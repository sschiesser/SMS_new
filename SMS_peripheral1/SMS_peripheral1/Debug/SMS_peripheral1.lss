
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e8a4  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  100168a4  100168a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  10016950  10016950  00016950  2**2
                  ALLOC
  3 .stack        00001800  100197f0  100197f0  00016950  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00016950  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00016978  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004e2f2  00000000  00000000  00016a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005652  00000000  00000000  00064d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b9b1  00000000  00000000  0006a370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d58  00000000  00000000  00075d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  00076a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002861b  00000000  00000000  00077859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017dfd  00000000  00000000  0009fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014712c  00000000  00000000  000b7c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f40  00000000  00000000  001feda0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100168a4 	.word	0x100168a4
10008068:	100168a4 	.word	0x100168a4
1000806c:	10016950 	.word	0x10016950
10008070:	100197f0 	.word	0x100197f0
10008074:	10016950 	.word	0x10016950
10008078:	100168a8 	.word	0x100168a8
1000807c:	10016954 	.word	0x10016954
10008080:	10013869 	.word	0x10013869
10008084:	1000e6e1 	.word	0x1000e6e1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10016950 	.word	0x10016950
100080a8:	00000000 	.word	0x00000000
100080ac:	100168a4 	.word	0x100168a4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10016954 	.word	0x10016954
100080dc:	100168a4 	.word	0x100168a4
100080e0:	100168a4 	.word	0x100168a4
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000b70d 	.word	0x1000b70d
10008114:	10011b71 	.word	0x10011b71
10008118:	100168a8 	.word	0x100168a8
1000811c:	000f4240 	.word	0x000f4240
10008120:	100168a4 	.word	0x100168a4
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	100168a8 	.word	0x100168a8
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	1001696c 	.word	0x1001696c

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	1001696c 	.word	0x1001696c

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	1001696c 	.word	0x1001696c

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000c249 	.word	0x1000c249

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000bde1 	.word	0x1000bde1
100083ec:	40003400 	.word	0x40003400
100083f0:	1000b369 	.word	0x1000b369

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	100168ac 	.word	0x100168ac
10008500:	1000a3d9 	.word	0x1000a3d9

10008504 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008504:	b510      	push	{r4, lr}
10008506:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008508:	4b79      	ldr	r3, [pc, #484]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000850a:	7a9b      	ldrb	r3, [r3, #10]
1000850c:	2b00      	cmp	r3, #0
1000850e:	d100      	bne.n	10008512 <mpu_reset_fifo+0xe>
10008510:	e0ce      	b.n	100086b0 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008512:	466b      	mov	r3, sp
10008514:	3307      	adds	r3, #7
10008516:	2200      	movs	r2, #0
10008518:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000851a:	4a75      	ldr	r2, [pc, #468]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000851c:	6811      	ldr	r1, [r2, #0]
1000851e:	7c49      	ldrb	r1, [r1, #17]
10008520:	6852      	ldr	r2, [r2, #4]
10008522:	7810      	ldrb	r0, [r2, #0]
10008524:	2201      	movs	r2, #1
10008526:	4c73      	ldr	r4, [pc, #460]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008528:	47a0      	blx	r4
1000852a:	2800      	cmp	r0, #0
1000852c:	d000      	beq.n	10008530 <mpu_reset_fifo+0x2c>
1000852e:	e0c2      	b.n	100086b6 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008530:	4b6f      	ldr	r3, [pc, #444]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008532:	681a      	ldr	r2, [r3, #0]
10008534:	7951      	ldrb	r1, [r2, #5]
10008536:	685b      	ldr	r3, [r3, #4]
10008538:	7818      	ldrb	r0, [r3, #0]
1000853a:	466b      	mov	r3, sp
1000853c:	3307      	adds	r3, #7
1000853e:	2201      	movs	r2, #1
10008540:	4c6c      	ldr	r4, [pc, #432]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008542:	47a0      	blx	r4
10008544:	2800      	cmp	r0, #0
10008546:	d000      	beq.n	1000854a <mpu_reset_fifo+0x46>
10008548:	e0b8      	b.n	100086bc <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000854a:	4b69      	ldr	r3, [pc, #420]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000854c:	681a      	ldr	r2, [r3, #0]
1000854e:	7911      	ldrb	r1, [r2, #4]
10008550:	685b      	ldr	r3, [r3, #4]
10008552:	7818      	ldrb	r0, [r3, #0]
10008554:	466b      	mov	r3, sp
10008556:	3307      	adds	r3, #7
10008558:	2201      	movs	r2, #1
1000855a:	4c66      	ldr	r4, [pc, #408]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000855c:	47a0      	blx	r4
1000855e:	2800      	cmp	r0, #0
10008560:	d000      	beq.n	10008564 <mpu_reset_fifo+0x60>
10008562:	e0ae      	b.n	100086c2 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008564:	2324      	movs	r3, #36	; 0x24
10008566:	4a62      	ldr	r2, [pc, #392]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008568:	5cd3      	ldrb	r3, [r2, r3]
1000856a:	2b00      	cmp	r3, #0
1000856c:	d04f      	beq.n	1000860e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000856e:	466b      	mov	r3, sp
10008570:	3307      	adds	r3, #7
10008572:	220c      	movs	r2, #12
10008574:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008576:	4a5e      	ldr	r2, [pc, #376]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008578:	6811      	ldr	r1, [r2, #0]
1000857a:	7909      	ldrb	r1, [r1, #4]
1000857c:	6852      	ldr	r2, [r2, #4]
1000857e:	7810      	ldrb	r0, [r2, #0]
10008580:	2201      	movs	r2, #1
10008582:	4c5c      	ldr	r4, [pc, #368]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008584:	47a0      	blx	r4
10008586:	2800      	cmp	r0, #0
10008588:	d000      	beq.n	1000858c <mpu_reset_fifo+0x88>
1000858a:	e09d      	b.n	100086c8 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
1000858c:	3032      	adds	r0, #50	; 0x32
1000858e:	4b5a      	ldr	r3, [pc, #360]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008590:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008592:	22c0      	movs	r2, #192	; 0xc0
10008594:	466b      	mov	r3, sp
10008596:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008598:	4b55      	ldr	r3, [pc, #340]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000859a:	7a9b      	ldrb	r3, [r3, #10]
1000859c:	07db      	lsls	r3, r3, #31
1000859e:	d502      	bpl.n	100085a6 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100085a0:	3220      	adds	r2, #32
100085a2:	466b      	mov	r3, sp
100085a4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a6:	4b52      	ldr	r3, [pc, #328]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085a8:	681a      	ldr	r2, [r3, #0]
100085aa:	7911      	ldrb	r1, [r2, #4]
100085ac:	685b      	ldr	r3, [r3, #4]
100085ae:	7818      	ldrb	r0, [r3, #0]
100085b0:	466b      	mov	r3, sp
100085b2:	3307      	adds	r3, #7
100085b4:	2201      	movs	r2, #1
100085b6:	4c4f      	ldr	r4, [pc, #316]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085b8:	47a0      	blx	r4
100085ba:	2800      	cmp	r0, #0
100085bc:	d000      	beq.n	100085c0 <mpu_reset_fifo+0xbc>
100085be:	e086      	b.n	100086ce <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100085c0:	4b4b      	ldr	r3, [pc, #300]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085c2:	7c5b      	ldrb	r3, [r3, #17]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d003      	beq.n	100085d0 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100085c8:	2202      	movs	r2, #2
100085ca:	466b      	mov	r3, sp
100085cc:	71da      	strb	r2, [r3, #7]
100085ce:	e002      	b.n	100085d6 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100085d0:	2200      	movs	r2, #0
100085d2:	466b      	mov	r3, sp
100085d4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d6:	4b46      	ldr	r3, [pc, #280]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085d8:	681a      	ldr	r2, [r3, #0]
100085da:	7c51      	ldrb	r1, [r2, #17]
100085dc:	685b      	ldr	r3, [r3, #4]
100085de:	7818      	ldrb	r0, [r3, #0]
100085e0:	466b      	mov	r3, sp
100085e2:	3307      	adds	r3, #7
100085e4:	2201      	movs	r2, #1
100085e6:	4c43      	ldr	r4, [pc, #268]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085e8:	47a0      	blx	r4
100085ea:	2800      	cmp	r0, #0
100085ec:	d172      	bne.n	100086d4 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100085ee:	466b      	mov	r3, sp
100085f0:	3307      	adds	r3, #7
100085f2:	2200      	movs	r2, #0
100085f4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085f6:	4a3e      	ldr	r2, [pc, #248]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085f8:	6811      	ldr	r1, [r2, #0]
100085fa:	7949      	ldrb	r1, [r1, #5]
100085fc:	6852      	ldr	r2, [r2, #4]
100085fe:	7810      	ldrb	r0, [r2, #0]
10008600:	2201      	movs	r2, #1
10008602:	4c3c      	ldr	r4, [pc, #240]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008604:	47a0      	blx	r4
10008606:	1e43      	subs	r3, r0, #1
10008608:	4198      	sbcs	r0, r3
1000860a:	4240      	negs	r0, r0
1000860c:	e06d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000860e:	466b      	mov	r3, sp
10008610:	3307      	adds	r3, #7
10008612:	2204      	movs	r2, #4
10008614:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008616:	4a36      	ldr	r2, [pc, #216]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008618:	6811      	ldr	r1, [r2, #0]
1000861a:	7909      	ldrb	r1, [r1, #4]
1000861c:	6852      	ldr	r2, [r2, #4]
1000861e:	7810      	ldrb	r0, [r2, #0]
10008620:	2201      	movs	r2, #1
10008622:	4c34      	ldr	r4, [pc, #208]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008624:	47a0      	blx	r4
10008626:	2800      	cmp	r0, #0
10008628:	d157      	bne.n	100086da <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000862a:	4b31      	ldr	r3, [pc, #196]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000862c:	7c9b      	ldrb	r3, [r3, #18]
1000862e:	2b00      	cmp	r3, #0
10008630:	d103      	bne.n	1000863a <mpu_reset_fifo+0x136>
10008632:	4b2f      	ldr	r3, [pc, #188]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008634:	7a9b      	ldrb	r3, [r3, #10]
10008636:	07db      	lsls	r3, r3, #31
10008638:	d403      	bmi.n	10008642 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000863a:	2240      	movs	r2, #64	; 0x40
1000863c:	466b      	mov	r3, sp
1000863e:	71da      	strb	r2, [r3, #7]
10008640:	e002      	b.n	10008648 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008642:	2260      	movs	r2, #96	; 0x60
10008644:	466b      	mov	r3, sp
10008646:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008648:	4b29      	ldr	r3, [pc, #164]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000864a:	681a      	ldr	r2, [r3, #0]
1000864c:	7911      	ldrb	r1, [r2, #4]
1000864e:	685b      	ldr	r3, [r3, #4]
10008650:	7818      	ldrb	r0, [r3, #0]
10008652:	466b      	mov	r3, sp
10008654:	3307      	adds	r3, #7
10008656:	2201      	movs	r2, #1
10008658:	4c26      	ldr	r4, [pc, #152]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000865a:	47a0      	blx	r4
1000865c:	2800      	cmp	r0, #0
1000865e:	d13f      	bne.n	100086e0 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008660:	3032      	adds	r0, #50	; 0x32
10008662:	4b25      	ldr	r3, [pc, #148]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008664:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008666:	4b22      	ldr	r3, [pc, #136]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008668:	7c5b      	ldrb	r3, [r3, #17]
1000866a:	2b00      	cmp	r3, #0
1000866c:	d003      	beq.n	10008676 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000866e:	2201      	movs	r2, #1
10008670:	466b      	mov	r3, sp
10008672:	71da      	strb	r2, [r3, #7]
10008674:	e002      	b.n	1000867c <mpu_reset_fifo+0x178>
        else
            data = 0;
10008676:	2200      	movs	r2, #0
10008678:	466b      	mov	r3, sp
1000867a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000867c:	4b1c      	ldr	r3, [pc, #112]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000867e:	681a      	ldr	r2, [r3, #0]
10008680:	7c51      	ldrb	r1, [r2, #17]
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	466b      	mov	r3, sp
10008688:	3307      	adds	r3, #7
1000868a:	2201      	movs	r2, #1
1000868c:	4c19      	ldr	r4, [pc, #100]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000868e:	47a0      	blx	r4
10008690:	2800      	cmp	r0, #0
10008692:	d128      	bne.n	100086e6 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008694:	4a16      	ldr	r2, [pc, #88]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008696:	0013      	movs	r3, r2
10008698:	3310      	adds	r3, #16
1000869a:	6811      	ldr	r1, [r2, #0]
1000869c:	7949      	ldrb	r1, [r1, #5]
1000869e:	6852      	ldr	r2, [r2, #4]
100086a0:	7810      	ldrb	r0, [r2, #0]
100086a2:	2201      	movs	r2, #1
100086a4:	4c13      	ldr	r4, [pc, #76]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100086a6:	47a0      	blx	r4
100086a8:	1e43      	subs	r3, r0, #1
100086aa:	4198      	sbcs	r0, r3
100086ac:	4240      	negs	r0, r0
100086ae:	e01c      	b.n	100086ea <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100086b0:	2001      	movs	r0, #1
100086b2:	4240      	negs	r0, r0
100086b4:	e019      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086b6:	2001      	movs	r0, #1
100086b8:	4240      	negs	r0, r0
100086ba:	e016      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100086bc:	2001      	movs	r0, #1
100086be:	4240      	negs	r0, r0
100086c0:	e013      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086c2:	2001      	movs	r0, #1
100086c4:	4240      	negs	r0, r0
100086c6:	e010      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086c8:	2001      	movs	r0, #1
100086ca:	4240      	negs	r0, r0
100086cc:	e00d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086ce:	2001      	movs	r0, #1
100086d0:	4240      	negs	r0, r0
100086d2:	e00a      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086d4:	2001      	movs	r0, #1
100086d6:	4240      	negs	r0, r0
100086d8:	e007      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086da:	2001      	movs	r0, #1
100086dc:	4240      	negs	r0, r0
100086de:	e004      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086e0:	2001      	movs	r0, #1
100086e2:	4240      	negs	r0, r0
100086e4:	e001      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086e6:	2001      	movs	r0, #1
100086e8:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100086ea:	b002      	add	sp, #8
100086ec:	bd10      	pop	{r4, pc}
100086ee:	46c0      	nop			; (mov r8, r8)
100086f0:	100168ac 	.word	0x100168ac
100086f4:	1000a3d9 	.word	0x1000a3d9
100086f8:	10008129 	.word	0x10008129

100086fc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086fc:	b510      	push	{r4, lr}
100086fe:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008700:	4b24      	ldr	r3, [pc, #144]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008702:	7a9b      	ldrb	r3, [r3, #10]
10008704:	2b00      	cmp	r3, #0
10008706:	d03b      	beq.n	10008780 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008708:	23fa      	movs	r3, #250	; 0xfa
1000870a:	005b      	lsls	r3, r3, #1
1000870c:	4298      	cmp	r0, r3
1000870e:	d010      	beq.n	10008732 <mpu_set_gyro_fsr+0x36>
10008710:	d802      	bhi.n	10008718 <mpu_set_gyro_fsr+0x1c>
10008712:	28fa      	cmp	r0, #250	; 0xfa
10008714:	d009      	beq.n	1000872a <mpu_set_gyro_fsr+0x2e>
10008716:	e036      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
10008718:	23fa      	movs	r3, #250	; 0xfa
1000871a:	009b      	lsls	r3, r3, #2
1000871c:	4298      	cmp	r0, r3
1000871e:	d00c      	beq.n	1000873a <mpu_set_gyro_fsr+0x3e>
10008720:	23fa      	movs	r3, #250	; 0xfa
10008722:	00db      	lsls	r3, r3, #3
10008724:	4298      	cmp	r0, r3
10008726:	d00c      	beq.n	10008742 <mpu_set_gyro_fsr+0x46>
10008728:	e02d      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000872a:	2200      	movs	r2, #0
1000872c:	466b      	mov	r3, sp
1000872e:	71da      	strb	r2, [r3, #7]
        break;
10008730:	e00a      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008732:	2208      	movs	r2, #8
10008734:	466b      	mov	r3, sp
10008736:	71da      	strb	r2, [r3, #7]
        break;
10008738:	e006      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000873a:	2210      	movs	r2, #16
1000873c:	466b      	mov	r3, sp
1000873e:	71da      	strb	r2, [r3, #7]
        break;
10008740:	e002      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008742:	2218      	movs	r2, #24
10008744:	466b      	mov	r3, sp
10008746:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008748:	466b      	mov	r3, sp
1000874a:	3307      	adds	r3, #7
1000874c:	781b      	ldrb	r3, [r3, #0]
1000874e:	4a11      	ldr	r2, [pc, #68]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008750:	7a12      	ldrb	r2, [r2, #8]
10008752:	08db      	lsrs	r3, r3, #3
        return 0;
10008754:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008756:	429a      	cmp	r2, r3
10008758:	d01a      	beq.n	10008790 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000875a:	4b0e      	ldr	r3, [pc, #56]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000875c:	681a      	ldr	r2, [r3, #0]
1000875e:	7991      	ldrb	r1, [r2, #6]
10008760:	685b      	ldr	r3, [r3, #4]
10008762:	7818      	ldrb	r0, [r3, #0]
10008764:	466b      	mov	r3, sp
10008766:	3307      	adds	r3, #7
10008768:	2201      	movs	r2, #1
1000876a:	4c0b      	ldr	r4, [pc, #44]	; (10008798 <mpu_set_gyro_fsr+0x9c>)
1000876c:	47a0      	blx	r4
1000876e:	2800      	cmp	r0, #0
10008770:	d10c      	bne.n	1000878c <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008772:	466b      	mov	r3, sp
10008774:	3307      	adds	r3, #7
10008776:	781b      	ldrb	r3, [r3, #0]
10008778:	08db      	lsrs	r3, r3, #3
1000877a:	4a06      	ldr	r2, [pc, #24]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000877c:	7213      	strb	r3, [r2, #8]
    return 0;
1000877e:	e007      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e004      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e001      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008790:	b002      	add	sp, #8
10008792:	bd10      	pop	{r4, pc}
10008794:	100168ac 	.word	0x100168ac
10008798:	1000a3d9 	.word	0x1000a3d9

1000879c <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
1000879c:	4b11      	ldr	r3, [pc, #68]	; (100087e4 <mpu_get_accel_fsr+0x48>)
1000879e:	7a5b      	ldrb	r3, [r3, #9]
100087a0:	2b01      	cmp	r3, #1
100087a2:	d009      	beq.n	100087b8 <mpu_get_accel_fsr+0x1c>
100087a4:	2b00      	cmp	r3, #0
100087a6:	d004      	beq.n	100087b2 <mpu_get_accel_fsr+0x16>
100087a8:	2b02      	cmp	r3, #2
100087aa:	d008      	beq.n	100087be <mpu_get_accel_fsr+0x22>
100087ac:	2b03      	cmp	r3, #3
100087ae:	d009      	beq.n	100087c4 <mpu_get_accel_fsr+0x28>
100087b0:	e014      	b.n	100087dc <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
100087b2:	2302      	movs	r3, #2
100087b4:	7003      	strb	r3, [r0, #0]
        break;
100087b6:	e007      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100087b8:	2304      	movs	r3, #4
100087ba:	7003      	strb	r3, [r0, #0]
        break;
100087bc:	e004      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100087be:	2308      	movs	r3, #8
100087c0:	7003      	strb	r3, [r0, #0]
        break;
100087c2:	e001      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100087c4:	2310      	movs	r3, #16
100087c6:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087c8:	4b06      	ldr	r3, [pc, #24]	; (100087e4 <mpu_get_accel_fsr+0x48>)
100087ca:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100087cc:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087ce:	2a00      	cmp	r2, #0
100087d0:	d006      	beq.n	100087e0 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100087d2:	7803      	ldrb	r3, [r0, #0]
100087d4:	005b      	lsls	r3, r3, #1
100087d6:	7003      	strb	r3, [r0, #0]
    return 0;
100087d8:	2300      	movs	r3, #0
100087da:	e001      	b.n	100087e0 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100087dc:	2301      	movs	r3, #1
100087de:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100087e0:	0018      	movs	r0, r3
100087e2:	4770      	bx	lr
100087e4:	100168ac 	.word	0x100168ac

100087e8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100087e8:	b510      	push	{r4, lr}
100087ea:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087ec:	4b21      	ldr	r3, [pc, #132]	; (10008874 <mpu_set_accel_fsr+0x8c>)
100087ee:	7a9b      	ldrb	r3, [r3, #10]
100087f0:	2b00      	cmp	r3, #0
100087f2:	d035      	beq.n	10008860 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100087f4:	2804      	cmp	r0, #4
100087f6:	d00c      	beq.n	10008812 <mpu_set_accel_fsr+0x2a>
100087f8:	d802      	bhi.n	10008800 <mpu_set_accel_fsr+0x18>
100087fa:	2802      	cmp	r0, #2
100087fc:	d005      	beq.n	1000880a <mpu_set_accel_fsr+0x22>
100087fe:	e032      	b.n	10008866 <mpu_set_accel_fsr+0x7e>
10008800:	2808      	cmp	r0, #8
10008802:	d00a      	beq.n	1000881a <mpu_set_accel_fsr+0x32>
10008804:	2810      	cmp	r0, #16
10008806:	d00c      	beq.n	10008822 <mpu_set_accel_fsr+0x3a>
10008808:	e02d      	b.n	10008866 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
1000880a:	2200      	movs	r2, #0
1000880c:	466b      	mov	r3, sp
1000880e:	71da      	strb	r2, [r3, #7]
        break;
10008810:	e00a      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
10008812:	2208      	movs	r2, #8
10008814:	466b      	mov	r3, sp
10008816:	71da      	strb	r2, [r3, #7]
        break;
10008818:	e006      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
1000881a:	2210      	movs	r2, #16
1000881c:	466b      	mov	r3, sp
1000881e:	71da      	strb	r2, [r3, #7]
        break;
10008820:	e002      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
10008822:	2218      	movs	r2, #24
10008824:	466b      	mov	r3, sp
10008826:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008828:	466b      	mov	r3, sp
1000882a:	3307      	adds	r3, #7
1000882c:	781b      	ldrb	r3, [r3, #0]
1000882e:	4a11      	ldr	r2, [pc, #68]	; (10008874 <mpu_set_accel_fsr+0x8c>)
10008830:	7a52      	ldrb	r2, [r2, #9]
10008832:	08db      	lsrs	r3, r3, #3
        return 0;
10008834:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008836:	429a      	cmp	r2, r3
10008838:	d01a      	beq.n	10008870 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000883a:	4b0e      	ldr	r3, [pc, #56]	; (10008874 <mpu_set_accel_fsr+0x8c>)
1000883c:	681a      	ldr	r2, [r3, #0]
1000883e:	79d1      	ldrb	r1, [r2, #7]
10008840:	685b      	ldr	r3, [r3, #4]
10008842:	7818      	ldrb	r0, [r3, #0]
10008844:	466b      	mov	r3, sp
10008846:	3307      	adds	r3, #7
10008848:	2201      	movs	r2, #1
1000884a:	4c0b      	ldr	r4, [pc, #44]	; (10008878 <mpu_set_accel_fsr+0x90>)
1000884c:	47a0      	blx	r4
1000884e:	2800      	cmp	r0, #0
10008850:	d10c      	bne.n	1000886c <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008852:	466b      	mov	r3, sp
10008854:	3307      	adds	r3, #7
10008856:	781b      	ldrb	r3, [r3, #0]
10008858:	08db      	lsrs	r3, r3, #3
1000885a:	4a06      	ldr	r2, [pc, #24]	; (10008874 <mpu_set_accel_fsr+0x8c>)
1000885c:	7253      	strb	r3, [r2, #9]
    return 0;
1000885e:	e007      	b.n	10008870 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008860:	2001      	movs	r0, #1
10008862:	4240      	negs	r0, r0
10008864:	e004      	b.n	10008870 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008866:	2001      	movs	r0, #1
10008868:	4240      	negs	r0, r0
1000886a:	e001      	b.n	10008870 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
1000886c:	2001      	movs	r0, #1
1000886e:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008870:	b002      	add	sp, #8
10008872:	bd10      	pop	{r4, pc}
10008874:	100168ac 	.word	0x100168ac
10008878:	1000a3d9 	.word	0x1000a3d9

1000887c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000887c:	b510      	push	{r4, lr}
1000887e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008880:	4b2b      	ldr	r3, [pc, #172]	; (10008930 <mpu_set_lpf+0xb4>)
10008882:	7a9b      	ldrb	r3, [r3, #10]
10008884:	2b00      	cmp	r3, #0
10008886:	d049      	beq.n	1000891c <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008888:	28bb      	cmp	r0, #187	; 0xbb
1000888a:	d903      	bls.n	10008894 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
1000888c:	2201      	movs	r2, #1
1000888e:	466b      	mov	r3, sp
10008890:	71da      	strb	r2, [r3, #7]
10008892:	e01a      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008894:	2861      	cmp	r0, #97	; 0x61
10008896:	d903      	bls.n	100088a0 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008898:	2202      	movs	r2, #2
1000889a:	466b      	mov	r3, sp
1000889c:	71da      	strb	r2, [r3, #7]
1000889e:	e014      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100088a0:	2829      	cmp	r0, #41	; 0x29
100088a2:	d903      	bls.n	100088ac <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100088a4:	2203      	movs	r2, #3
100088a6:	466b      	mov	r3, sp
100088a8:	71da      	strb	r2, [r3, #7]
100088aa:	e00e      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100088ac:	2813      	cmp	r0, #19
100088ae:	d903      	bls.n	100088b8 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
100088b0:	2204      	movs	r2, #4
100088b2:	466b      	mov	r3, sp
100088b4:	71da      	strb	r2, [r3, #7]
100088b6:	e008      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100088b8:	2809      	cmp	r0, #9
100088ba:	d903      	bls.n	100088c4 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100088bc:	2205      	movs	r2, #5
100088be:	466b      	mov	r3, sp
100088c0:	71da      	strb	r2, [r3, #7]
100088c2:	e002      	b.n	100088ca <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100088c4:	2206      	movs	r2, #6
100088c6:	466b      	mov	r3, sp
100088c8:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100088ca:	4b19      	ldr	r3, [pc, #100]	; (10008930 <mpu_set_lpf+0xb4>)
100088cc:	7ada      	ldrb	r2, [r3, #11]
100088ce:	466b      	mov	r3, sp
100088d0:	3307      	adds	r3, #7
100088d2:	781b      	ldrb	r3, [r3, #0]
        return 0;
100088d4:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100088d6:	429a      	cmp	r2, r3
100088d8:	d028      	beq.n	1000892c <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100088da:	4b15      	ldr	r3, [pc, #84]	; (10008930 <mpu_set_lpf+0xb4>)
100088dc:	681a      	ldr	r2, [r3, #0]
100088de:	7891      	ldrb	r1, [r2, #2]
100088e0:	685b      	ldr	r3, [r3, #4]
100088e2:	7818      	ldrb	r0, [r3, #0]
100088e4:	466b      	mov	r3, sp
100088e6:	3307      	adds	r3, #7
100088e8:	2201      	movs	r2, #1
100088ea:	4c12      	ldr	r4, [pc, #72]	; (10008934 <mpu_set_lpf+0xb8>)
100088ec:	47a0      	blx	r4
100088ee:	2800      	cmp	r0, #0
100088f0:	d117      	bne.n	10008922 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100088f2:	466b      	mov	r3, sp
100088f4:	3307      	adds	r3, #7
100088f6:	7819      	ldrb	r1, [r3, #0]
100088f8:	2240      	movs	r2, #64	; 0x40
100088fa:	430a      	orrs	r2, r1
100088fc:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100088fe:	4a0c      	ldr	r2, [pc, #48]	; (10008930 <mpu_set_lpf+0xb4>)
10008900:	6811      	ldr	r1, [r2, #0]
10008902:	7a09      	ldrb	r1, [r1, #8]
10008904:	6852      	ldr	r2, [r2, #4]
10008906:	7810      	ldrb	r0, [r2, #0]
10008908:	2201      	movs	r2, #1
1000890a:	4c0a      	ldr	r4, [pc, #40]	; (10008934 <mpu_set_lpf+0xb8>)
1000890c:	47a0      	blx	r4
1000890e:	2800      	cmp	r0, #0
10008910:	d10a      	bne.n	10008928 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008912:	466b      	mov	r3, sp
10008914:	79da      	ldrb	r2, [r3, #7]
10008916:	4b06      	ldr	r3, [pc, #24]	; (10008930 <mpu_set_lpf+0xb4>)
10008918:	72da      	strb	r2, [r3, #11]
    return 0;
1000891a:	e007      	b.n	1000892c <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000891c:	2001      	movs	r0, #1
1000891e:	4240      	negs	r0, r0
10008920:	e004      	b.n	1000892c <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008922:	2001      	movs	r0, #1
10008924:	4240      	negs	r0, r0
10008926:	e001      	b.n	1000892c <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008928:	2001      	movs	r0, #1
1000892a:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
1000892c:	b002      	add	sp, #8
1000892e:	bd10      	pop	{r4, pc}
10008930:	100168ac 	.word	0x100168ac
10008934:	1000a3d9 	.word	0x1000a3d9

10008938 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008938:	2324      	movs	r3, #36	; 0x24
1000893a:	4a05      	ldr	r2, [pc, #20]	; (10008950 <mpu_get_sample_rate+0x18>)
1000893c:	5cd3      	ldrb	r3, [r2, r3]
1000893e:	2b00      	cmp	r3, #0
10008940:	d103      	bne.n	1000894a <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008942:	89d3      	ldrh	r3, [r2, #14]
10008944:	8003      	strh	r3, [r0, #0]
    return 0;
10008946:	2000      	movs	r0, #0
10008948:	e001      	b.n	1000894e <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
1000894a:	2001      	movs	r0, #1
1000894c:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
1000894e:	4770      	bx	lr
10008950:	100168ac 	.word	0x100168ac

10008954 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008954:	b530      	push	{r4, r5, lr}
10008956:	b083      	sub	sp, #12
10008958:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000895a:	d020      	beq.n	1000899e <mpu_set_compass_sample_rate+0x4a>
1000895c:	4b17      	ldr	r3, [pc, #92]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
1000895e:	89d8      	ldrh	r0, [r3, #14]
10008960:	4281      	cmp	r1, r0
10008962:	d81f      	bhi.n	100089a4 <mpu_set_compass_sample_rate+0x50>
10008964:	2964      	cmp	r1, #100	; 0x64
10008966:	d820      	bhi.n	100089aa <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008968:	466b      	mov	r3, sp
1000896a:	1ddc      	adds	r4, r3, #7
1000896c:	4b14      	ldr	r3, [pc, #80]	; (100089c0 <mpu_set_compass_sample_rate+0x6c>)
1000896e:	4798      	blx	r3
10008970:	3801      	subs	r0, #1
10008972:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008974:	4b11      	ldr	r3, [pc, #68]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
10008976:	2224      	movs	r2, #36	; 0x24
10008978:	6819      	ldr	r1, [r3, #0]
1000897a:	5c89      	ldrb	r1, [r1, r2]
1000897c:	685b      	ldr	r3, [r3, #4]
1000897e:	7818      	ldrb	r0, [r3, #0]
10008980:	0023      	movs	r3, r4
10008982:	3a23      	subs	r2, #35	; 0x23
10008984:	4c0f      	ldr	r4, [pc, #60]	; (100089c4 <mpu_set_compass_sample_rate+0x70>)
10008986:	47a0      	blx	r4
10008988:	1e04      	subs	r4, r0, #0
1000898a:	d111      	bne.n	100089b0 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
1000898c:	4d0b      	ldr	r5, [pc, #44]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
1000898e:	89e8      	ldrh	r0, [r5, #14]
10008990:	466b      	mov	r3, sp
10008992:	79d9      	ldrb	r1, [r3, #7]
10008994:	3101      	adds	r1, #1
10008996:	4b0c      	ldr	r3, [pc, #48]	; (100089c8 <mpu_set_compass_sample_rate+0x74>)
10008998:	4798      	blx	r3
1000899a:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
1000899c:	e00a      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
1000899e:	2401      	movs	r4, #1
100089a0:	4264      	negs	r4, r4
100089a2:	e007      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
100089a4:	2401      	movs	r4, #1
100089a6:	4264      	negs	r4, r4
100089a8:	e004      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
100089aa:	2401      	movs	r4, #1
100089ac:	4264      	negs	r4, r4
100089ae:	e001      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
100089b0:	2401      	movs	r4, #1
100089b2:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
100089b4:	0020      	movs	r0, r4
100089b6:	b003      	add	sp, #12
100089b8:	bd30      	pop	{r4, r5, pc}
100089ba:	46c0      	nop			; (mov r8, r8)
100089bc:	100168ac 	.word	0x100168ac
100089c0:	10011b71 	.word	0x10011b71
100089c4:	1000a3d9 	.word	0x1000a3d9
100089c8:	10011c85 	.word	0x10011c85

100089cc <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
100089cc:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089ce:	2324      	movs	r3, #36	; 0x24
100089d0:	4a16      	ldr	r2, [pc, #88]	; (10008a2c <mpu_configure_fifo+0x60>)
100089d2:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
100089d4:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089d6:	2b00      	cmp	r3, #0
100089d8:	d126      	bne.n	10008a28 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
100089da:	7a94      	ldrb	r4, [r2, #10]
100089dc:	2c00      	cmp	r4, #0
100089de:	d015      	beq.n	10008a0c <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
100089e0:	2301      	movs	r3, #1
100089e2:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
100089e4:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
100089e6:	4004      	ands	r4, r0
100089e8:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
100089ea:	1b04      	subs	r4, r0, r4
100089ec:	1e63      	subs	r3, r4, #1
100089ee:	419c      	sbcs	r4, r3
100089f0:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
100089f2:	2800      	cmp	r0, #0
100089f4:	d10d      	bne.n	10008a12 <mpu_configure_fifo+0x46>
100089f6:	7d13      	ldrb	r3, [r2, #20]
100089f8:	2b00      	cmp	r3, #0
100089fa:	d112      	bne.n	10008a22 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
100089fc:	4b0c      	ldr	r3, [pc, #48]	; (10008a30 <mpu_configure_fifo+0x64>)
100089fe:	4798      	blx	r3
10008a00:	e012      	b.n	10008a28 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008a02:	4b0a      	ldr	r3, [pc, #40]	; (10008a2c <mpu_configure_fifo+0x60>)
10008a04:	741d      	strb	r5, [r3, #16]
                return -1;
10008a06:	2401      	movs	r4, #1
10008a08:	4264      	negs	r4, r4
10008a0a:	e00d      	b.n	10008a28 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008a0c:	2401      	movs	r4, #1
10008a0e:	4264      	negs	r4, r4
10008a10:	e00a      	b.n	10008a28 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a12:	2001      	movs	r0, #1
10008a14:	4b06      	ldr	r3, [pc, #24]	; (10008a30 <mpu_configure_fifo+0x64>)
10008a16:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008a18:	4b06      	ldr	r3, [pc, #24]	; (10008a34 <mpu_configure_fifo+0x68>)
10008a1a:	4798      	blx	r3
10008a1c:	2800      	cmp	r0, #0
10008a1e:	d003      	beq.n	10008a28 <mpu_configure_fifo+0x5c>
10008a20:	e7ef      	b.n	10008a02 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a22:	2001      	movs	r0, #1
10008a24:	4b02      	ldr	r3, [pc, #8]	; (10008a30 <mpu_configure_fifo+0x64>)
10008a26:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008a28:	0020      	movs	r0, r4
10008a2a:	bd70      	pop	{r4, r5, r6, pc}
10008a2c:	100168ac 	.word	0x100168ac
10008a30:	10008461 	.word	0x10008461
10008a34:	10008505 	.word	0x10008505

10008a38 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008a38:	b530      	push	{r4, r5, lr}
10008a3a:	b083      	sub	sp, #12
10008a3c:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008a3e:	4b59      	ldr	r3, [pc, #356]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008a40:	7c9b      	ldrb	r3, [r3, #18]
10008a42:	4283      	cmp	r3, r0
10008a44:	d100      	bne.n	10008a48 <mpu_set_bypass+0x10>
10008a46:	e097      	b.n	10008b78 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008a48:	2800      	cmp	r0, #0
10008a4a:	d042      	beq.n	10008ad2 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a4c:	4b55      	ldr	r3, [pc, #340]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008a4e:	681a      	ldr	r2, [r3, #0]
10008a50:	7911      	ldrb	r1, [r2, #4]
10008a52:	685b      	ldr	r3, [r3, #4]
10008a54:	7818      	ldrb	r0, [r3, #0]
10008a56:	466b      	mov	r3, sp
10008a58:	3307      	adds	r3, #7
10008a5a:	2201      	movs	r2, #1
10008a5c:	4d52      	ldr	r5, [pc, #328]	; (10008ba8 <mpu_set_bypass+0x170>)
10008a5e:	47a8      	blx	r5
10008a60:	2800      	cmp	r0, #0
10008a62:	d000      	beq.n	10008a66 <mpu_set_bypass+0x2e>
10008a64:	e08a      	b.n	10008b7c <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008a66:	466b      	mov	r3, sp
10008a68:	3307      	adds	r3, #7
10008a6a:	781a      	ldrb	r2, [r3, #0]
10008a6c:	2120      	movs	r1, #32
10008a6e:	438a      	bics	r2, r1
10008a70:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a72:	4a4c      	ldr	r2, [pc, #304]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008a74:	6811      	ldr	r1, [r2, #0]
10008a76:	7909      	ldrb	r1, [r1, #4]
10008a78:	6852      	ldr	r2, [r2, #4]
10008a7a:	7810      	ldrb	r0, [r2, #0]
10008a7c:	2201      	movs	r2, #1
10008a7e:	4d4b      	ldr	r5, [pc, #300]	; (10008bac <mpu_set_bypass+0x174>)
10008a80:	47a8      	blx	r5
10008a82:	2800      	cmp	r0, #0
10008a84:	d17d      	bne.n	10008b82 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008a86:	3003      	adds	r0, #3
10008a88:	4b49      	ldr	r3, [pc, #292]	; (10008bb0 <mpu_set_bypass+0x178>)
10008a8a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008a8c:	2202      	movs	r2, #2
10008a8e:	466b      	mov	r3, sp
10008a90:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008a92:	2322      	movs	r3, #34	; 0x22
10008a94:	4a43      	ldr	r2, [pc, #268]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008a96:	5cd3      	ldrb	r3, [r2, r3]
10008a98:	2b00      	cmp	r3, #0
10008a9a:	d002      	beq.n	10008aa2 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008a9c:	2282      	movs	r2, #130	; 0x82
10008a9e:	466b      	mov	r3, sp
10008aa0:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008aa2:	2323      	movs	r3, #35	; 0x23
10008aa4:	4a3f      	ldr	r2, [pc, #252]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008aa6:	5cd3      	ldrb	r3, [r2, r3]
10008aa8:	2b00      	cmp	r3, #0
10008aaa:	d005      	beq.n	10008ab8 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008aac:	466b      	mov	r3, sp
10008aae:	1dda      	adds	r2, r3, #7
10008ab0:	79d9      	ldrb	r1, [r3, #7]
10008ab2:	2330      	movs	r3, #48	; 0x30
10008ab4:	430b      	orrs	r3, r1
10008ab6:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ab8:	4b3a      	ldr	r3, [pc, #232]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008aba:	681a      	ldr	r2, [r3, #0]
10008abc:	7dd1      	ldrb	r1, [r2, #23]
10008abe:	685b      	ldr	r3, [r3, #4]
10008ac0:	7818      	ldrb	r0, [r3, #0]
10008ac2:	466b      	mov	r3, sp
10008ac4:	3307      	adds	r3, #7
10008ac6:	2201      	movs	r2, #1
10008ac8:	4d38      	ldr	r5, [pc, #224]	; (10008bac <mpu_set_bypass+0x174>)
10008aca:	47a8      	blx	r5
10008acc:	2800      	cmp	r0, #0
10008ace:	d04f      	beq.n	10008b70 <mpu_set_bypass+0x138>
10008ad0:	e05a      	b.n	10008b88 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ad2:	4b34      	ldr	r3, [pc, #208]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008ad4:	681a      	ldr	r2, [r3, #0]
10008ad6:	7911      	ldrb	r1, [r2, #4]
10008ad8:	685b      	ldr	r3, [r3, #4]
10008ada:	7818      	ldrb	r0, [r3, #0]
10008adc:	466b      	mov	r3, sp
10008ade:	3307      	adds	r3, #7
10008ae0:	2201      	movs	r2, #1
10008ae2:	4d31      	ldr	r5, [pc, #196]	; (10008ba8 <mpu_set_bypass+0x170>)
10008ae4:	47a8      	blx	r5
10008ae6:	2800      	cmp	r0, #0
10008ae8:	d151      	bne.n	10008b8e <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008aea:	4b2e      	ldr	r3, [pc, #184]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008aec:	7a9b      	ldrb	r3, [r3, #10]
10008aee:	07db      	lsls	r3, r3, #31
10008af0:	d506      	bpl.n	10008b00 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008af2:	466b      	mov	r3, sp
10008af4:	1dda      	adds	r2, r3, #7
10008af6:	79d9      	ldrb	r1, [r3, #7]
10008af8:	2320      	movs	r3, #32
10008afa:	430b      	orrs	r3, r1
10008afc:	7013      	strb	r3, [r2, #0]
10008afe:	e005      	b.n	10008b0c <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008b00:	466b      	mov	r3, sp
10008b02:	1dda      	adds	r2, r3, #7
10008b04:	79db      	ldrb	r3, [r3, #7]
10008b06:	2120      	movs	r1, #32
10008b08:	438b      	bics	r3, r1
10008b0a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b0c:	4b25      	ldr	r3, [pc, #148]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008b0e:	681a      	ldr	r2, [r3, #0]
10008b10:	7911      	ldrb	r1, [r2, #4]
10008b12:	685b      	ldr	r3, [r3, #4]
10008b14:	7818      	ldrb	r0, [r3, #0]
10008b16:	466b      	mov	r3, sp
10008b18:	3307      	adds	r3, #7
10008b1a:	2201      	movs	r2, #1
10008b1c:	4d23      	ldr	r5, [pc, #140]	; (10008bac <mpu_set_bypass+0x174>)
10008b1e:	47a8      	blx	r5
10008b20:	2800      	cmp	r0, #0
10008b22:	d137      	bne.n	10008b94 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008b24:	3003      	adds	r0, #3
10008b26:	4b22      	ldr	r3, [pc, #136]	; (10008bb0 <mpu_set_bypass+0x178>)
10008b28:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008b2a:	2322      	movs	r3, #34	; 0x22
10008b2c:	4a1d      	ldr	r2, [pc, #116]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008b2e:	5cd3      	ldrb	r3, [r2, r3]
10008b30:	2b00      	cmp	r3, #0
10008b32:	d003      	beq.n	10008b3c <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008b34:	2280      	movs	r2, #128	; 0x80
10008b36:	466b      	mov	r3, sp
10008b38:	71da      	strb	r2, [r3, #7]
10008b3a:	e002      	b.n	10008b42 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008b3c:	2200      	movs	r2, #0
10008b3e:	466b      	mov	r3, sp
10008b40:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b42:	2323      	movs	r3, #35	; 0x23
10008b44:	4a17      	ldr	r2, [pc, #92]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008b46:	5cd3      	ldrb	r3, [r2, r3]
10008b48:	2b00      	cmp	r3, #0
10008b4a:	d005      	beq.n	10008b58 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b4c:	466b      	mov	r3, sp
10008b4e:	1dda      	adds	r2, r3, #7
10008b50:	79d9      	ldrb	r1, [r3, #7]
10008b52:	2330      	movs	r3, #48	; 0x30
10008b54:	430b      	orrs	r3, r1
10008b56:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b58:	4b12      	ldr	r3, [pc, #72]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008b5a:	681a      	ldr	r2, [r3, #0]
10008b5c:	7dd1      	ldrb	r1, [r2, #23]
10008b5e:	685b      	ldr	r3, [r3, #4]
10008b60:	7818      	ldrb	r0, [r3, #0]
10008b62:	466b      	mov	r3, sp
10008b64:	3307      	adds	r3, #7
10008b66:	2201      	movs	r2, #1
10008b68:	4d10      	ldr	r5, [pc, #64]	; (10008bac <mpu_set_bypass+0x174>)
10008b6a:	47a8      	blx	r5
10008b6c:	2800      	cmp	r0, #0
10008b6e:	d114      	bne.n	10008b9a <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008b70:	4b0c      	ldr	r3, [pc, #48]	; (10008ba4 <mpu_set_bypass+0x16c>)
10008b72:	749c      	strb	r4, [r3, #18]
    return 0;
10008b74:	2000      	movs	r0, #0
10008b76:	e012      	b.n	10008b9e <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008b78:	2000      	movs	r0, #0
10008b7a:	e010      	b.n	10008b9e <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b7c:	2001      	movs	r0, #1
10008b7e:	4240      	negs	r0, r0
10008b80:	e00d      	b.n	10008b9e <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b82:	2001      	movs	r0, #1
10008b84:	4240      	negs	r0, r0
10008b86:	e00a      	b.n	10008b9e <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b88:	2001      	movs	r0, #1
10008b8a:	4240      	negs	r0, r0
10008b8c:	e007      	b.n	10008b9e <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b8e:	2001      	movs	r0, #1
10008b90:	4240      	negs	r0, r0
10008b92:	e004      	b.n	10008b9e <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b94:	2001      	movs	r0, #1
10008b96:	4240      	negs	r0, r0
10008b98:	e001      	b.n	10008b9e <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b9a:	2001      	movs	r0, #1
10008b9c:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008b9e:	b003      	add	sp, #12
10008ba0:	bd30      	pop	{r4, r5, pc}
10008ba2:	46c0      	nop			; (mov r8, r8)
10008ba4:	100168ac 	.word	0x100168ac
10008ba8:	1000a435 	.word	0x1000a435
10008bac:	1000a3d9 	.word	0x1000a3d9
10008bb0:	10008129 	.word	0x10008129

10008bb4 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008bb4:	b530      	push	{r4, r5, lr}
10008bb6:	b083      	sub	sp, #12
10008bb8:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008bba:	2323      	movs	r3, #35	; 0x23
10008bbc:	4a1c      	ldr	r2, [pc, #112]	; (10008c30 <mpu_set_int_latched+0x7c>)
10008bbe:	5cd3      	ldrb	r3, [r2, r3]
10008bc0:	4283      	cmp	r3, r0
10008bc2:	d02e      	beq.n	10008c22 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008bc4:	2800      	cmp	r0, #0
10008bc6:	d003      	beq.n	10008bd0 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bc8:	2230      	movs	r2, #48	; 0x30
10008bca:	466b      	mov	r3, sp
10008bcc:	71da      	strb	r2, [r3, #7]
10008bce:	e002      	b.n	10008bd6 <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008bd0:	2200      	movs	r2, #0
10008bd2:	466b      	mov	r3, sp
10008bd4:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008bd6:	4b16      	ldr	r3, [pc, #88]	; (10008c30 <mpu_set_int_latched+0x7c>)
10008bd8:	7c9b      	ldrb	r3, [r3, #18]
10008bda:	2b00      	cmp	r3, #0
10008bdc:	d005      	beq.n	10008bea <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008bde:	466b      	mov	r3, sp
10008be0:	1dda      	adds	r2, r3, #7
10008be2:	79d9      	ldrb	r1, [r3, #7]
10008be4:	2302      	movs	r3, #2
10008be6:	430b      	orrs	r3, r1
10008be8:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008bea:	2322      	movs	r3, #34	; 0x22
10008bec:	4a10      	ldr	r2, [pc, #64]	; (10008c30 <mpu_set_int_latched+0x7c>)
10008bee:	5cd3      	ldrb	r3, [r2, r3]
10008bf0:	2b00      	cmp	r3, #0
10008bf2:	d006      	beq.n	10008c02 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008bf4:	466b      	mov	r3, sp
10008bf6:	1dda      	adds	r2, r3, #7
10008bf8:	79db      	ldrb	r3, [r3, #7]
10008bfa:	2180      	movs	r1, #128	; 0x80
10008bfc:	4249      	negs	r1, r1
10008bfe:	430b      	orrs	r3, r1
10008c00:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c02:	4b0b      	ldr	r3, [pc, #44]	; (10008c30 <mpu_set_int_latched+0x7c>)
10008c04:	681a      	ldr	r2, [r3, #0]
10008c06:	7dd1      	ldrb	r1, [r2, #23]
10008c08:	685b      	ldr	r3, [r3, #4]
10008c0a:	7818      	ldrb	r0, [r3, #0]
10008c0c:	466b      	mov	r3, sp
10008c0e:	3307      	adds	r3, #7
10008c10:	2201      	movs	r2, #1
10008c12:	4d08      	ldr	r5, [pc, #32]	; (10008c34 <mpu_set_int_latched+0x80>)
10008c14:	47a8      	blx	r5
10008c16:	2800      	cmp	r0, #0
10008c18:	d105      	bne.n	10008c26 <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c1a:	2323      	movs	r3, #35	; 0x23
10008c1c:	4a04      	ldr	r2, [pc, #16]	; (10008c30 <mpu_set_int_latched+0x7c>)
10008c1e:	54d4      	strb	r4, [r2, r3]
    return 0;
10008c20:	e003      	b.n	10008c2a <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c22:	2000      	movs	r0, #0
10008c24:	e001      	b.n	10008c2a <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008c26:	2001      	movs	r0, #1
10008c28:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008c2a:	b003      	add	sp, #12
10008c2c:	bd30      	pop	{r4, r5, pc}
10008c2e:	46c0      	nop			; (mov r8, r8)
10008c30:	100168ac 	.word	0x100168ac
10008c34:	1000a3d9 	.word	0x1000a3d9

10008c38 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008c38:	b510      	push	{r4, lr}
10008c3a:	b082      	sub	sp, #8
10008c3c:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008c3e:	2c28      	cmp	r4, #40	; 0x28
10008c40:	d878      	bhi.n	10008d34 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008c42:	2800      	cmp	r0, #0
10008c44:	d115      	bne.n	10008c72 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008c46:	2000      	movs	r0, #0
10008c48:	4b44      	ldr	r3, [pc, #272]	; (10008d5c <mpu_lp_accel_mode+0x124>)
10008c4a:	4798      	blx	r3
        tmp[0] = 0;
10008c4c:	ab01      	add	r3, sp, #4
10008c4e:	2200      	movs	r2, #0
10008c50:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008c52:	3207      	adds	r2, #7
10008c54:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008c56:	4a42      	ldr	r2, [pc, #264]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008c58:	6811      	ldr	r1, [r2, #0]
10008c5a:	7d49      	ldrb	r1, [r1, #21]
10008c5c:	6852      	ldr	r2, [r2, #4]
10008c5e:	7810      	ldrb	r0, [r2, #0]
10008c60:	2202      	movs	r2, #2
10008c62:	4c40      	ldr	r4, [pc, #256]	; (10008d64 <mpu_lp_accel_mode+0x12c>)
10008c64:	47a0      	blx	r4
10008c66:	1e04      	subs	r4, r0, #0
10008c68:	d167      	bne.n	10008d3a <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c6a:	2200      	movs	r2, #0
10008c6c:	4b3c      	ldr	r3, [pc, #240]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008c6e:	751a      	strb	r2, [r3, #20]
        return 0;
10008c70:	e071      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008c72:	2001      	movs	r0, #1
10008c74:	4b39      	ldr	r3, [pc, #228]	; (10008d5c <mpu_lp_accel_mode+0x124>)
10008c76:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008c78:	2c01      	cmp	r4, #1
10008c7a:	d103      	bne.n	10008c84 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008c7c:	2202      	movs	r2, #2
10008c7e:	ab01      	add	r3, sp, #4
10008c80:	701a      	strb	r2, [r3, #0]
10008c82:	e01a      	b.n	10008cba <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008c84:	2c02      	cmp	r4, #2
10008c86:	d103      	bne.n	10008c90 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008c88:	2203      	movs	r2, #3
10008c8a:	ab01      	add	r3, sp, #4
10008c8c:	701a      	strb	r2, [r3, #0]
10008c8e:	e014      	b.n	10008cba <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008c90:	2c05      	cmp	r4, #5
10008c92:	d803      	bhi.n	10008c9c <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008c94:	2204      	movs	r2, #4
10008c96:	ab01      	add	r3, sp, #4
10008c98:	701a      	strb	r2, [r3, #0]
10008c9a:	e00e      	b.n	10008cba <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008c9c:	2c0a      	cmp	r4, #10
10008c9e:	d803      	bhi.n	10008ca8 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008ca0:	2205      	movs	r2, #5
10008ca2:	ab01      	add	r3, sp, #4
10008ca4:	701a      	strb	r2, [r3, #0]
10008ca6:	e008      	b.n	10008cba <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008ca8:	2c14      	cmp	r4, #20
10008caa:	d803      	bhi.n	10008cb4 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008cac:	2206      	movs	r2, #6
10008cae:	ab01      	add	r3, sp, #4
10008cb0:	701a      	strb	r2, [r3, #0]
10008cb2:	e002      	b.n	10008cba <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008cb4:	2207      	movs	r2, #7
10008cb6:	ab01      	add	r3, sp, #4
10008cb8:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008cba:	4b29      	ldr	r3, [pc, #164]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008cbc:	681a      	ldr	r2, [r3, #0]
10008cbe:	7a51      	ldrb	r1, [r2, #9]
10008cc0:	685b      	ldr	r3, [r3, #4]
10008cc2:	7818      	ldrb	r0, [r3, #0]
10008cc4:	ab01      	add	r3, sp, #4
10008cc6:	2201      	movs	r2, #1
10008cc8:	4c26      	ldr	r4, [pc, #152]	; (10008d64 <mpu_lp_accel_mode+0x12c>)
10008cca:	47a0      	blx	r4
10008ccc:	2800      	cmp	r0, #0
10008cce:	d137      	bne.n	10008d40 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008cd0:	4b23      	ldr	r3, [pc, #140]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008cd2:	681a      	ldr	r2, [r3, #0]
10008cd4:	7a11      	ldrb	r1, [r2, #8]
10008cd6:	685b      	ldr	r3, [r3, #4]
10008cd8:	7818      	ldrb	r0, [r3, #0]
10008cda:	ab01      	add	r3, sp, #4
10008cdc:	2201      	movs	r2, #1
10008cde:	4c22      	ldr	r4, [pc, #136]	; (10008d68 <mpu_lp_accel_mode+0x130>)
10008ce0:	47a0      	blx	r4
10008ce2:	2800      	cmp	r0, #0
10008ce4:	d12f      	bne.n	10008d46 <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008ce6:	ab01      	add	r3, sp, #4
10008ce8:	7819      	ldrb	r1, [r3, #0]
10008cea:	2208      	movs	r2, #8
10008cec:	430a      	orrs	r2, r1
10008cee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008cf0:	4a1b      	ldr	r2, [pc, #108]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008cf2:	6811      	ldr	r1, [r2, #0]
10008cf4:	7a09      	ldrb	r1, [r1, #8]
10008cf6:	6852      	ldr	r2, [r2, #4]
10008cf8:	7810      	ldrb	r0, [r2, #0]
10008cfa:	2201      	movs	r2, #1
10008cfc:	4c19      	ldr	r4, [pc, #100]	; (10008d64 <mpu_lp_accel_mode+0x12c>)
10008cfe:	47a0      	blx	r4
10008d00:	2800      	cmp	r0, #0
10008d02:	d123      	bne.n	10008d4c <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d04:	ab01      	add	r3, sp, #4
10008d06:	2220      	movs	r2, #32
10008d08:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d0a:	4a15      	ldr	r2, [pc, #84]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008d0c:	6811      	ldr	r1, [r2, #0]
10008d0e:	7d49      	ldrb	r1, [r1, #21]
10008d10:	6852      	ldr	r2, [r2, #4]
10008d12:	7810      	ldrb	r0, [r2, #0]
10008d14:	2201      	movs	r2, #1
10008d16:	4c13      	ldr	r4, [pc, #76]	; (10008d64 <mpu_lp_accel_mode+0x12c>)
10008d18:	47a0      	blx	r4
10008d1a:	1e04      	subs	r4, r0, #0
10008d1c:	d119      	bne.n	10008d52 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d1e:	4b10      	ldr	r3, [pc, #64]	; (10008d60 <mpu_lp_accel_mode+0x128>)
10008d20:	2208      	movs	r2, #8
10008d22:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008d24:	2200      	movs	r2, #0
10008d26:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d28:	3201      	adds	r2, #1
10008d2a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008d2c:	2000      	movs	r0, #0
10008d2e:	4b0f      	ldr	r3, [pc, #60]	; (10008d6c <mpu_lp_accel_mode+0x134>)
10008d30:	4798      	blx	r3

    return 0;
10008d32:	e010      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008d34:	2401      	movs	r4, #1
10008d36:	4264      	negs	r4, r4
10008d38:	e00d      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008d3a:	2401      	movs	r4, #1
10008d3c:	4264      	negs	r4, r4
10008d3e:	e00a      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d40:	2401      	movs	r4, #1
10008d42:	4264      	negs	r4, r4
10008d44:	e007      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008d46:	2401      	movs	r4, #1
10008d48:	4264      	negs	r4, r4
10008d4a:	e004      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008d4c:	2401      	movs	r4, #1
10008d4e:	4264      	negs	r4, r4
10008d50:	e001      	b.n	10008d56 <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008d52:	2401      	movs	r4, #1
10008d54:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008d56:	0020      	movs	r0, r4
10008d58:	b002      	add	sp, #8
10008d5a:	bd10      	pop	{r4, pc}
10008d5c:	10008bb5 	.word	0x10008bb5
10008d60:	100168ac 	.word	0x100168ac
10008d64:	1000a3d9 	.word	0x1000a3d9
10008d68:	1000a435 	.word	0x1000a435
10008d6c:	100089cd 	.word	0x100089cd

10008d70 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008d70:	b530      	push	{r4, r5, lr}
10008d72:	b083      	sub	sp, #12
10008d74:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d76:	4b2c      	ldr	r3, [pc, #176]	; (10008e28 <mpu_set_sample_rate+0xb8>)
10008d78:	7a9b      	ldrb	r3, [r3, #10]
10008d7a:	2b00      	cmp	r3, #0
10008d7c:	d048      	beq.n	10008e10 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008d7e:	2324      	movs	r3, #36	; 0x24
10008d80:	4a29      	ldr	r2, [pc, #164]	; (10008e28 <mpu_set_sample_rate+0xb8>)
10008d82:	5cd3      	ldrb	r3, [r2, r3]
10008d84:	2b00      	cmp	r3, #0
10008d86:	d146      	bne.n	10008e16 <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d88:	7d13      	ldrb	r3, [r2, #20]
10008d8a:	2b00      	cmp	r3, #0
10008d8c:	d00a      	beq.n	10008da4 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008d8e:	1e43      	subs	r3, r0, #1
10008d90:	b29b      	uxth	r3, r3
10008d92:	2b27      	cmp	r3, #39	; 0x27
10008d94:	d803      	bhi.n	10008d9e <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d96:	4b25      	ldr	r3, [pc, #148]	; (10008e2c <mpu_set_sample_rate+0xbc>)
10008d98:	4798      	blx	r3
                return 0;
10008d9a:	2400      	movs	r4, #0
10008d9c:	e040      	b.n	10008e20 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008d9e:	2000      	movs	r0, #0
10008da0:	4b22      	ldr	r3, [pc, #136]	; (10008e2c <mpu_set_sample_rate+0xbc>)
10008da2:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008da4:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008da6:	2c03      	cmp	r4, #3
10008da8:	d907      	bls.n	10008dba <mpu_set_sample_rate+0x4a>
10008daa:	1c21      	adds	r1, r4, #0
10008dac:	23fa      	movs	r3, #250	; 0xfa
10008dae:	009b      	lsls	r3, r3, #2
10008db0:	429c      	cmp	r4, r3
10008db2:	d901      	bls.n	10008db8 <mpu_set_sample_rate+0x48>
10008db4:	4b1e      	ldr	r3, [pc, #120]	; (10008e30 <mpu_set_sample_rate+0xc0>)
10008db6:	8819      	ldrh	r1, [r3, #0]
10008db8:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008dba:	466b      	mov	r3, sp
10008dbc:	1ddc      	adds	r4, r3, #7
10008dbe:	20fa      	movs	r0, #250	; 0xfa
10008dc0:	0080      	lsls	r0, r0, #2
10008dc2:	4b1c      	ldr	r3, [pc, #112]	; (10008e34 <mpu_set_sample_rate+0xc4>)
10008dc4:	4798      	blx	r3
10008dc6:	3801      	subs	r0, #1
10008dc8:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dca:	4b17      	ldr	r3, [pc, #92]	; (10008e28 <mpu_set_sample_rate+0xb8>)
10008dcc:	681a      	ldr	r2, [r3, #0]
10008dce:	7851      	ldrb	r1, [r2, #1]
10008dd0:	685b      	ldr	r3, [r3, #4]
10008dd2:	7818      	ldrb	r0, [r3, #0]
10008dd4:	0023      	movs	r3, r4
10008dd6:	2201      	movs	r2, #1
10008dd8:	4c17      	ldr	r4, [pc, #92]	; (10008e38 <mpu_set_sample_rate+0xc8>)
10008dda:	47a0      	blx	r4
10008ddc:	1e04      	subs	r4, r0, #0
10008dde:	d11d      	bne.n	10008e1c <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008de0:	4d11      	ldr	r5, [pc, #68]	; (10008e28 <mpu_set_sample_rate+0xb8>)
10008de2:	466b      	mov	r3, sp
10008de4:	79d9      	ldrb	r1, [r3, #7]
10008de6:	3101      	adds	r1, #1
10008de8:	20fa      	movs	r0, #250	; 0xfa
10008dea:	0080      	lsls	r0, r0, #2
10008dec:	4b11      	ldr	r3, [pc, #68]	; (10008e34 <mpu_set_sample_rate+0xc4>)
10008dee:	4798      	blx	r3
10008df0:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008df2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008df4:	1c18      	adds	r0, r3, #0
10008df6:	b29b      	uxth	r3, r3
10008df8:	2b64      	cmp	r3, #100	; 0x64
10008dfa:	d900      	bls.n	10008dfe <mpu_set_sample_rate+0x8e>
10008dfc:	2064      	movs	r0, #100	; 0x64
10008dfe:	b280      	uxth	r0, r0
10008e00:	4b0e      	ldr	r3, [pc, #56]	; (10008e3c <mpu_set_sample_rate+0xcc>)
10008e02:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e04:	4b08      	ldr	r3, [pc, #32]	; (10008e28 <mpu_set_sample_rate+0xb8>)
10008e06:	89d8      	ldrh	r0, [r3, #14]
10008e08:	0840      	lsrs	r0, r0, #1
10008e0a:	4b0d      	ldr	r3, [pc, #52]	; (10008e40 <mpu_set_sample_rate+0xd0>)
10008e0c:	4798      	blx	r3
        return 0;
10008e0e:	e007      	b.n	10008e20 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e10:	2401      	movs	r4, #1
10008e12:	4264      	negs	r4, r4
10008e14:	e004      	b.n	10008e20 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008e16:	2401      	movs	r4, #1
10008e18:	4264      	negs	r4, r4
10008e1a:	e001      	b.n	10008e20 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008e1c:	2401      	movs	r4, #1
10008e1e:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008e20:	0020      	movs	r0, r4
10008e22:	b003      	add	sp, #12
10008e24:	bd30      	pop	{r4, r5, pc}
10008e26:	46c0      	nop			; (mov r8, r8)
10008e28:	100168ac 	.word	0x100168ac
10008e2c:	10008c39 	.word	0x10008c39
10008e30:	10014aa0 	.word	0x10014aa0
10008e34:	10011c85 	.word	0x10011c85
10008e38:	1000a3d9 	.word	0x1000a3d9
10008e3c:	10008955 	.word	0x10008955
10008e40:	1000887d 	.word	0x1000887d

10008e44 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e44:	b530      	push	{r4, r5, lr}
10008e46:	b083      	sub	sp, #12
10008e48:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e4a:	2370      	movs	r3, #112	; 0x70
10008e4c:	4203      	tst	r3, r0
10008e4e:	d003      	beq.n	10008e58 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008e50:	2201      	movs	r2, #1
10008e52:	466b      	mov	r3, sp
10008e54:	71da      	strb	r2, [r3, #7]
10008e56:	e015      	b.n	10008e84 <mpu_set_sensors+0x40>
    else if (sensors)
10008e58:	2800      	cmp	r0, #0
10008e5a:	d003      	beq.n	10008e64 <mpu_set_sensors+0x20>
        data = 0;
10008e5c:	2200      	movs	r2, #0
10008e5e:	466b      	mov	r3, sp
10008e60:	71da      	strb	r2, [r3, #7]
10008e62:	e00f      	b.n	10008e84 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008e64:	466b      	mov	r3, sp
10008e66:	3307      	adds	r3, #7
10008e68:	2240      	movs	r2, #64	; 0x40
10008e6a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e6c:	4a6a      	ldr	r2, [pc, #424]	; (10009018 <mpu_set_sensors+0x1d4>)
10008e6e:	6811      	ldr	r1, [r2, #0]
10008e70:	7d49      	ldrb	r1, [r1, #21]
10008e72:	6852      	ldr	r2, [r2, #4]
10008e74:	7810      	ldrb	r0, [r2, #0]
10008e76:	2201      	movs	r2, #1
10008e78:	4d68      	ldr	r5, [pc, #416]	; (1000901c <mpu_set_sensors+0x1d8>)
10008e7a:	47a8      	blx	r5
10008e7c:	2800      	cmp	r0, #0
10008e7e:	d100      	bne.n	10008e82 <mpu_set_sensors+0x3e>
10008e80:	e0b2      	b.n	10008fe8 <mpu_set_sensors+0x1a4>
10008e82:	e00b      	b.n	10008e9c <mpu_set_sensors+0x58>
10008e84:	4b64      	ldr	r3, [pc, #400]	; (10009018 <mpu_set_sensors+0x1d4>)
10008e86:	681a      	ldr	r2, [r3, #0]
10008e88:	7d51      	ldrb	r1, [r2, #21]
10008e8a:	685b      	ldr	r3, [r3, #4]
10008e8c:	7818      	ldrb	r0, [r3, #0]
10008e8e:	466b      	mov	r3, sp
10008e90:	3307      	adds	r3, #7
10008e92:	2201      	movs	r2, #1
10008e94:	4d61      	ldr	r5, [pc, #388]	; (1000901c <mpu_set_sensors+0x1d8>)
10008e96:	47a8      	blx	r5
10008e98:	2800      	cmp	r0, #0
10008e9a:	d005      	beq.n	10008ea8 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008e9c:	2200      	movs	r2, #0
10008e9e:	4b5e      	ldr	r3, [pc, #376]	; (10009018 <mpu_set_sensors+0x1d4>)
10008ea0:	729a      	strb	r2, [r3, #10]
        return -1;
10008ea2:	2501      	movs	r5, #1
10008ea4:	426d      	negs	r5, r5
10008ea6:	e0b4      	b.n	10009012 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008ea8:	466b      	mov	r3, sp
10008eaa:	1dda      	adds	r2, r3, #7
10008eac:	79db      	ldrb	r3, [r3, #7]
10008eae:	2140      	movs	r1, #64	; 0x40
10008eb0:	438b      	bics	r3, r1
10008eb2:	4959      	ldr	r1, [pc, #356]	; (10009018 <mpu_set_sensors+0x1d4>)
10008eb4:	730b      	strb	r3, [r1, #12]

    data = 0;
10008eb6:	2300      	movs	r3, #0
10008eb8:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008eba:	0663      	lsls	r3, r4, #25
10008ebc:	d402      	bmi.n	10008ec4 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008ebe:	2204      	movs	r2, #4
10008ec0:	466b      	mov	r3, sp
10008ec2:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008ec4:	06a3      	lsls	r3, r4, #26
10008ec6:	d405      	bmi.n	10008ed4 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008ec8:	466b      	mov	r3, sp
10008eca:	1dda      	adds	r2, r3, #7
10008ecc:	79d9      	ldrb	r1, [r3, #7]
10008ece:	2302      	movs	r3, #2
10008ed0:	430b      	orrs	r3, r1
10008ed2:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008ed4:	06e3      	lsls	r3, r4, #27
10008ed6:	d405      	bmi.n	10008ee4 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008ed8:	466b      	mov	r3, sp
10008eda:	1dda      	adds	r2, r3, #7
10008edc:	79d9      	ldrb	r1, [r3, #7]
10008ede:	2301      	movs	r3, #1
10008ee0:	430b      	orrs	r3, r1
10008ee2:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008ee4:	0723      	lsls	r3, r4, #28
10008ee6:	d405      	bmi.n	10008ef4 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008ee8:	466b      	mov	r3, sp
10008eea:	1dda      	adds	r2, r3, #7
10008eec:	79d9      	ldrb	r1, [r3, #7]
10008eee:	2338      	movs	r3, #56	; 0x38
10008ef0:	430b      	orrs	r3, r1
10008ef2:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008ef4:	4b48      	ldr	r3, [pc, #288]	; (10009018 <mpu_set_sensors+0x1d4>)
10008ef6:	681a      	ldr	r2, [r3, #0]
10008ef8:	7d91      	ldrb	r1, [r2, #22]
10008efa:	685b      	ldr	r3, [r3, #4]
10008efc:	7818      	ldrb	r0, [r3, #0]
10008efe:	466b      	mov	r3, sp
10008f00:	3307      	adds	r3, #7
10008f02:	2201      	movs	r2, #1
10008f04:	4d45      	ldr	r5, [pc, #276]	; (1000901c <mpu_set_sensors+0x1d8>)
10008f06:	47a8      	blx	r5
10008f08:	2800      	cmp	r0, #0
10008f0a:	d005      	beq.n	10008f18 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008f0c:	2200      	movs	r2, #0
10008f0e:	4b42      	ldr	r3, [pc, #264]	; (10009018 <mpu_set_sensors+0x1d4>)
10008f10:	729a      	strb	r2, [r3, #10]
        return -1;
10008f12:	2501      	movs	r5, #1
10008f14:	426d      	negs	r5, r5
10008f16:	e07c      	b.n	10009012 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008f18:	2308      	movs	r3, #8
10008f1a:	0022      	movs	r2, r4
10008f1c:	439a      	bics	r2, r3
10008f1e:	d06b      	beq.n	10008ff8 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008f20:	2000      	movs	r0, #0
10008f22:	4b3f      	ldr	r3, [pc, #252]	; (10009020 <mpu_set_sensors+0x1dc>)
10008f24:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f26:	4b3c      	ldr	r3, [pc, #240]	; (10009018 <mpu_set_sensors+0x1d4>)
10008f28:	681a      	ldr	r2, [r3, #0]
10008f2a:	7911      	ldrb	r1, [r2, #4]
10008f2c:	685b      	ldr	r3, [r3, #4]
10008f2e:	7818      	ldrb	r0, [r3, #0]
10008f30:	466b      	mov	r3, sp
10008f32:	3306      	adds	r3, #6
10008f34:	2201      	movs	r2, #1
10008f36:	4d3b      	ldr	r5, [pc, #236]	; (10009024 <mpu_set_sensors+0x1e0>)
10008f38:	47a8      	blx	r5
10008f3a:	2800      	cmp	r0, #0
10008f3c:	d148      	bne.n	10008fd0 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f3e:	07e3      	lsls	r3, r4, #31
10008f40:	d509      	bpl.n	10008f56 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008f42:	2211      	movs	r2, #17
10008f44:	466b      	mov	r3, sp
10008f46:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f48:	466b      	mov	r3, sp
10008f4a:	1d9a      	adds	r2, r3, #6
10008f4c:	7999      	ldrb	r1, [r3, #6]
10008f4e:	2320      	movs	r3, #32
10008f50:	430b      	orrs	r3, r1
10008f52:	7013      	strb	r3, [r2, #0]
10008f54:	e008      	b.n	10008f68 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008f56:	2210      	movs	r2, #16
10008f58:	466b      	mov	r3, sp
10008f5a:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f5c:	466b      	mov	r3, sp
10008f5e:	1d9a      	adds	r2, r3, #6
10008f60:	799b      	ldrb	r3, [r3, #6]
10008f62:	2120      	movs	r1, #32
10008f64:	438b      	bics	r3, r1
10008f66:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f68:	2324      	movs	r3, #36	; 0x24
10008f6a:	4a2b      	ldr	r2, [pc, #172]	; (10009018 <mpu_set_sensors+0x1d4>)
10008f6c:	5cd3      	ldrb	r3, [r2, r3]
10008f6e:	2b00      	cmp	r3, #0
10008f70:	d007      	beq.n	10008f82 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008f72:	466b      	mov	r3, sp
10008f74:	1d9a      	adds	r2, r3, #6
10008f76:	799b      	ldrb	r3, [r3, #6]
10008f78:	2180      	movs	r1, #128	; 0x80
10008f7a:	4249      	negs	r1, r1
10008f7c:	430b      	orrs	r3, r1
10008f7e:	7013      	strb	r3, [r2, #0]
10008f80:	e005      	b.n	10008f8e <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008f82:	466b      	mov	r3, sp
10008f84:	1d9a      	adds	r2, r3, #6
10008f86:	799b      	ldrb	r3, [r3, #6]
10008f88:	217f      	movs	r1, #127	; 0x7f
10008f8a:	400b      	ands	r3, r1
10008f8c:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f8e:	4b22      	ldr	r3, [pc, #136]	; (10009018 <mpu_set_sensors+0x1d4>)
10008f90:	2226      	movs	r2, #38	; 0x26
10008f92:	6819      	ldr	r1, [r3, #0]
10008f94:	5c89      	ldrb	r1, [r1, r2]
10008f96:	685b      	ldr	r3, [r3, #4]
10008f98:	7818      	ldrb	r0, [r3, #0]
10008f9a:	466b      	mov	r3, sp
10008f9c:	3307      	adds	r3, #7
10008f9e:	3a25      	subs	r2, #37	; 0x25
10008fa0:	4d1e      	ldr	r5, [pc, #120]	; (1000901c <mpu_set_sensors+0x1d8>)
10008fa2:	47a8      	blx	r5
10008fa4:	2800      	cmp	r0, #0
10008fa6:	d116      	bne.n	10008fd6 <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008fa8:	4b1b      	ldr	r3, [pc, #108]	; (10009018 <mpu_set_sensors+0x1d4>)
10008faa:	681a      	ldr	r2, [r3, #0]
10008fac:	7911      	ldrb	r1, [r2, #4]
10008fae:	685b      	ldr	r3, [r3, #4]
10008fb0:	7818      	ldrb	r0, [r3, #0]
10008fb2:	466b      	mov	r3, sp
10008fb4:	3306      	adds	r3, #6
10008fb6:	2201      	movs	r2, #1
10008fb8:	4d18      	ldr	r5, [pc, #96]	; (1000901c <mpu_set_sensors+0x1d8>)
10008fba:	47a8      	blx	r5
10008fbc:	1e05      	subs	r5, r0, #0
10008fbe:	d10d      	bne.n	10008fdc <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008fc0:	4b15      	ldr	r3, [pc, #84]	; (10009018 <mpu_set_sensors+0x1d4>)
10008fc2:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008fc4:	2200      	movs	r2, #0
10008fc6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008fc8:	2032      	movs	r0, #50	; 0x32
10008fca:	4b17      	ldr	r3, [pc, #92]	; (10009028 <mpu_set_sensors+0x1e4>)
10008fcc:	4798      	blx	r3
    return 0;
10008fce:	e020      	b.n	10009012 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fd0:	2501      	movs	r5, #1
10008fd2:	426d      	negs	r5, r5
10008fd4:	e01d      	b.n	10009012 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
10008fd6:	2501      	movs	r5, #1
10008fd8:	426d      	negs	r5, r5
10008fda:	e01a      	b.n	10009012 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fdc:	2501      	movs	r5, #1
10008fde:	426d      	negs	r5, r5
10008fe0:	e017      	b.n	10009012 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fe2:	2501      	movs	r5, #1
10008fe4:	426d      	negs	r5, r5
10008fe6:	e014      	b.n	10009012 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fe8:	466b      	mov	r3, sp
10008fea:	3307      	adds	r3, #7
10008fec:	781b      	ldrb	r3, [r3, #0]
10008fee:	2240      	movs	r2, #64	; 0x40
10008ff0:	4393      	bics	r3, r2
10008ff2:	4a09      	ldr	r2, [pc, #36]	; (10009018 <mpu_set_sensors+0x1d4>)
10008ff4:	7313      	strb	r3, [r2, #12]
10008ff6:	e762      	b.n	10008ebe <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ff8:	4b07      	ldr	r3, [pc, #28]	; (10009018 <mpu_set_sensors+0x1d4>)
10008ffa:	681a      	ldr	r2, [r3, #0]
10008ffc:	7911      	ldrb	r1, [r2, #4]
10008ffe:	685b      	ldr	r3, [r3, #4]
10009000:	7818      	ldrb	r0, [r3, #0]
10009002:	466b      	mov	r3, sp
10009004:	3306      	adds	r3, #6
10009006:	2201      	movs	r2, #1
10009008:	4d06      	ldr	r5, [pc, #24]	; (10009024 <mpu_set_sensors+0x1e0>)
1000900a:	47a8      	blx	r5
1000900c:	2800      	cmp	r0, #0
1000900e:	d0a2      	beq.n	10008f56 <mpu_set_sensors+0x112>
10009010:	e7e7      	b.n	10008fe2 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009012:	0028      	movs	r0, r5
10009014:	b003      	add	sp, #12
10009016:	bd30      	pop	{r4, r5, pc}
10009018:	100168ac 	.word	0x100168ac
1000901c:	1000a3d9 	.word	0x1000a3d9
10009020:	10008bb5 	.word	0x10008bb5
10009024:	1000a435 	.word	0x1000a435
10009028:	10008129 	.word	0x10008129

1000902c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000902c:	b530      	push	{r4, r5, lr}
1000902e:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009030:	ab02      	add	r3, sp, #8
10009032:	2280      	movs	r2, #128	; 0x80
10009034:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009036:	4ab9      	ldr	r2, [pc, #740]	; (1000931c <mpu_init+0x2f0>)
10009038:	6811      	ldr	r1, [r2, #0]
1000903a:	7d49      	ldrb	r1, [r1, #21]
1000903c:	6852      	ldr	r2, [r2, #4]
1000903e:	7810      	ldrb	r0, [r2, #0]
10009040:	2201      	movs	r2, #1
10009042:	4cb7      	ldr	r4, [pc, #732]	; (10009320 <mpu_init+0x2f4>)
10009044:	47a0      	blx	r4
10009046:	2800      	cmp	r0, #0
10009048:	d000      	beq.n	1000904c <mpu_init+0x20>
1000904a:	e149      	b.n	100092e0 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
1000904c:	3064      	adds	r0, #100	; 0x64
1000904e:	4bb5      	ldr	r3, [pc, #724]	; (10009324 <mpu_init+0x2f8>)
10009050:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009052:	ab02      	add	r3, sp, #8
10009054:	2200      	movs	r2, #0
10009056:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009058:	4ab0      	ldr	r2, [pc, #704]	; (1000931c <mpu_init+0x2f0>)
1000905a:	6811      	ldr	r1, [r2, #0]
1000905c:	7d49      	ldrb	r1, [r1, #21]
1000905e:	6852      	ldr	r2, [r2, #4]
10009060:	7810      	ldrb	r0, [r2, #0]
10009062:	2201      	movs	r2, #1
10009064:	4cae      	ldr	r4, [pc, #696]	; (10009320 <mpu_init+0x2f4>)
10009066:	47a0      	blx	r4
10009068:	2800      	cmp	r0, #0
1000906a:	d000      	beq.n	1000906e <mpu_init+0x42>
1000906c:	e13b      	b.n	100092e6 <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
1000906e:	4aab      	ldr	r2, [pc, #684]	; (1000931c <mpu_init+0x2f0>)
10009070:	2300      	movs	r3, #0
10009072:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009074:	ab02      	add	r3, sp, #8
10009076:	2140      	movs	r1, #64	; 0x40
10009078:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000907a:	6811      	ldr	r1, [r2, #0]
1000907c:	7a09      	ldrb	r1, [r1, #8]
1000907e:	6852      	ldr	r2, [r2, #4]
10009080:	7810      	ldrb	r0, [r2, #0]
10009082:	2201      	movs	r2, #1
10009084:	4ca6      	ldr	r4, [pc, #664]	; (10009320 <mpu_init+0x2f4>)
10009086:	47a0      	blx	r4
10009088:	2800      	cmp	r0, #0
1000908a:	d000      	beq.n	1000908e <mpu_init+0x62>
1000908c:	e12e      	b.n	100092ec <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000908e:	4ca3      	ldr	r4, [pc, #652]	; (1000931c <mpu_init+0x2f0>)
10009090:	23ff      	movs	r3, #255	; 0xff
10009092:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009094:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009096:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009098:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000909a:	2201      	movs	r2, #1
1000909c:	4252      	negs	r2, r2
1000909e:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090a0:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
100090a2:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090a4:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
100090a6:	3bfe      	subs	r3, #254	; 0xfe
100090a8:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090aa:	2500      	movs	r5, #0
100090ac:	3321      	adds	r3, #33	; 0x21
100090ae:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
100090b0:	3301      	adds	r3, #1
100090b2:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090b4:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090b6:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090b8:	0020      	movs	r0, r4
100090ba:	3016      	adds	r0, #22
100090bc:	320d      	adds	r2, #13
100090be:	2100      	movs	r1, #0
100090c0:	4b99      	ldr	r3, [pc, #612]	; (10009328 <mpu_init+0x2fc>)
100090c2:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090c4:	2324      	movs	r3, #36	; 0x24
100090c6:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090c8:	3301      	adds	r3, #1
100090ca:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
100090cc:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100090ce:	20fa      	movs	r0, #250	; 0xfa
100090d0:	00c0      	lsls	r0, r0, #3
100090d2:	4b96      	ldr	r3, [pc, #600]	; (1000932c <mpu_init+0x300>)
100090d4:	4798      	blx	r3
100090d6:	2800      	cmp	r0, #0
100090d8:	d000      	beq.n	100090dc <mpu_init+0xb0>
100090da:	e10a      	b.n	100092f2 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
100090dc:	3002      	adds	r0, #2
100090de:	4b94      	ldr	r3, [pc, #592]	; (10009330 <mpu_init+0x304>)
100090e0:	4798      	blx	r3
100090e2:	2800      	cmp	r0, #0
100090e4:	d000      	beq.n	100090e8 <mpu_init+0xbc>
100090e6:	e107      	b.n	100092f8 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100090e8:	302a      	adds	r0, #42	; 0x2a
100090ea:	4b92      	ldr	r3, [pc, #584]	; (10009334 <mpu_init+0x308>)
100090ec:	4798      	blx	r3
100090ee:	2800      	cmp	r0, #0
100090f0:	d000      	beq.n	100090f4 <mpu_init+0xc8>
100090f2:	e104      	b.n	100092fe <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100090f4:	3032      	adds	r0, #50	; 0x32
100090f6:	4b90      	ldr	r3, [pc, #576]	; (10009338 <mpu_init+0x30c>)
100090f8:	4798      	blx	r3
100090fa:	2800      	cmp	r0, #0
100090fc:	d000      	beq.n	10009100 <mpu_init+0xd4>
100090fe:	e101      	b.n	10009304 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009100:	4b8e      	ldr	r3, [pc, #568]	; (1000933c <mpu_init+0x310>)
10009102:	4798      	blx	r3
10009104:	2800      	cmp	r0, #0
10009106:	d000      	beq.n	1000910a <mpu_init+0xde>
10009108:	e0ff      	b.n	1000930a <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000910a:	3001      	adds	r0, #1
1000910c:	4b8c      	ldr	r3, [pc, #560]	; (10009340 <mpu_init+0x314>)
1000910e:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009110:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009112:	4d8c      	ldr	r5, [pc, #560]	; (10009344 <mpu_init+0x318>)
10009114:	ab01      	add	r3, sp, #4
10009116:	2201      	movs	r2, #1
10009118:	2100      	movs	r1, #0
1000911a:	0020      	movs	r0, r4
1000911c:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
1000911e:	2800      	cmp	r0, #0
10009120:	d103      	bne.n	1000912a <mpu_init+0xfe>
10009122:	466b      	mov	r3, sp
10009124:	791b      	ldrb	r3, [r3, #4]
10009126:	2b48      	cmp	r3, #72	; 0x48
10009128:	d004      	beq.n	10009134 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000912a:	3401      	adds	r4, #1
1000912c:	b2e4      	uxtb	r4, r4
1000912e:	2c10      	cmp	r4, #16
10009130:	d1f0      	bne.n	10009114 <mpu_init+0xe8>
10009132:	e001      	b.n	10009138 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009134:	2c0f      	cmp	r4, #15
10009136:	d905      	bls.n	10009144 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009138:	4883      	ldr	r0, [pc, #524]	; (10009348 <mpu_init+0x31c>)
1000913a:	4c84      	ldr	r4, [pc, #528]	; (1000934c <mpu_init+0x320>)
1000913c:	47a0      	blx	r4
1000913e:	4884      	ldr	r0, [pc, #528]	; (10009350 <mpu_init+0x324>)
10009140:	47a0      	blx	r4
10009142:	e0c4      	b.n	100092ce <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009144:	232a      	movs	r3, #42	; 0x2a
10009146:	4a75      	ldr	r2, [pc, #468]	; (1000931c <mpu_init+0x2f0>)
10009148:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
1000914a:	ab01      	add	r3, sp, #4
1000914c:	2210      	movs	r2, #16
1000914e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009150:	3a0f      	subs	r2, #15
10009152:	210a      	movs	r1, #10
10009154:	0020      	movs	r0, r4
10009156:	4c72      	ldr	r4, [pc, #456]	; (10009320 <mpu_init+0x2f4>)
10009158:	47a0      	blx	r4
1000915a:	2800      	cmp	r0, #0
1000915c:	d000      	beq.n	10009160 <mpu_init+0x134>
1000915e:	e0b6      	b.n	100092ce <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009160:	3001      	adds	r0, #1
10009162:	4b70      	ldr	r3, [pc, #448]	; (10009324 <mpu_init+0x2f8>)
10009164:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009166:	ab01      	add	r3, sp, #4
10009168:	221f      	movs	r2, #31
1000916a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000916c:	320b      	adds	r2, #11
1000916e:	496b      	ldr	r1, [pc, #428]	; (1000931c <mpu_init+0x2f0>)
10009170:	5c88      	ldrb	r0, [r1, r2]
10009172:	3a29      	subs	r2, #41	; 0x29
10009174:	210a      	movs	r1, #10
10009176:	4c6a      	ldr	r4, [pc, #424]	; (10009320 <mpu_init+0x2f4>)
10009178:	47a0      	blx	r4
1000917a:	2800      	cmp	r0, #0
1000917c:	d000      	beq.n	10009180 <mpu_init+0x154>
1000917e:	e0a6      	b.n	100092ce <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009180:	3001      	adds	r0, #1
10009182:	4b68      	ldr	r3, [pc, #416]	; (10009324 <mpu_init+0x2f8>)
10009184:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009186:	232a      	movs	r3, #42	; 0x2a
10009188:	4a64      	ldr	r2, [pc, #400]	; (1000931c <mpu_init+0x2f0>)
1000918a:	5cd0      	ldrb	r0, [r2, r3]
1000918c:	ab01      	add	r3, sp, #4
1000918e:	2203      	movs	r2, #3
10009190:	2110      	movs	r1, #16
10009192:	4c6c      	ldr	r4, [pc, #432]	; (10009344 <mpu_init+0x318>)
10009194:	47a0      	blx	r4
10009196:	2800      	cmp	r0, #0
10009198:	d000      	beq.n	1000919c <mpu_init+0x170>
1000919a:	e098      	b.n	100092ce <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
1000919c:	4a5f      	ldr	r2, [pc, #380]	; (1000931c <mpu_init+0x2f0>)
1000919e:	ab01      	add	r3, sp, #4
100091a0:	7819      	ldrb	r1, [r3, #0]
100091a2:	3180      	adds	r1, #128	; 0x80
100091a4:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091a6:	7859      	ldrb	r1, [r3, #1]
100091a8:	3180      	adds	r1, #128	; 0x80
100091aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091ac:	7899      	ldrb	r1, [r3, #2]
100091ae:	3180      	adds	r1, #128	; 0x80
100091b0:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091b2:	2110      	movs	r1, #16
100091b4:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091b6:	311a      	adds	r1, #26
100091b8:	5c50      	ldrb	r0, [r2, r1]
100091ba:	2201      	movs	r2, #1
100091bc:	3920      	subs	r1, #32
100091be:	4c58      	ldr	r4, [pc, #352]	; (10009320 <mpu_init+0x2f4>)
100091c0:	47a0      	blx	r4
100091c2:	2800      	cmp	r0, #0
100091c4:	d000      	beq.n	100091c8 <mpu_init+0x19c>
100091c6:	e082      	b.n	100092ce <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091c8:	3001      	adds	r0, #1
100091ca:	4b56      	ldr	r3, [pc, #344]	; (10009324 <mpu_init+0x2f8>)
100091cc:	4798      	blx	r3

    mpu_set_bypass(0);
100091ce:	2000      	movs	r0, #0
100091d0:	4b5b      	ldr	r3, [pc, #364]	; (10009340 <mpu_init+0x314>)
100091d2:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091d4:	ab01      	add	r3, sp, #4
100091d6:	2240      	movs	r2, #64	; 0x40
100091d8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091da:	4a50      	ldr	r2, [pc, #320]	; (1000931c <mpu_init+0x2f0>)
100091dc:	6811      	ldr	r1, [r2, #0]
100091de:	7e89      	ldrb	r1, [r1, #26]
100091e0:	6852      	ldr	r2, [r2, #4]
100091e2:	7810      	ldrb	r0, [r2, #0]
100091e4:	2201      	movs	r2, #1
100091e6:	4c4e      	ldr	r4, [pc, #312]	; (10009320 <mpu_init+0x2f4>)
100091e8:	47a0      	blx	r4
100091ea:	2800      	cmp	r0, #0
100091ec:	d16f      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091ee:	ab01      	add	r3, sp, #4
100091f0:	4a4a      	ldr	r2, [pc, #296]	; (1000931c <mpu_init+0x2f0>)
100091f2:	212a      	movs	r1, #42	; 0x2a
100091f4:	5c51      	ldrb	r1, [r2, r1]
100091f6:	3880      	subs	r0, #128	; 0x80
100091f8:	4301      	orrs	r1, r0
100091fa:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091fc:	6811      	ldr	r1, [r2, #0]
100091fe:	7f89      	ldrb	r1, [r1, #30]
10009200:	6852      	ldr	r2, [r2, #4]
10009202:	7810      	ldrb	r0, [r2, #0]
10009204:	2201      	movs	r2, #1
10009206:	4c46      	ldr	r4, [pc, #280]	; (10009320 <mpu_init+0x2f4>)
10009208:	47a0      	blx	r4
1000920a:	2800      	cmp	r0, #0
1000920c:	d15f      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1000920e:	ab01      	add	r3, sp, #4
10009210:	2202      	movs	r2, #2
10009212:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009214:	4a41      	ldr	r2, [pc, #260]	; (1000931c <mpu_init+0x2f0>)
10009216:	6811      	ldr	r1, [r2, #0]
10009218:	7fc9      	ldrb	r1, [r1, #31]
1000921a:	6852      	ldr	r2, [r2, #4]
1000921c:	7810      	ldrb	r0, [r2, #0]
1000921e:	2201      	movs	r2, #1
10009220:	4c3f      	ldr	r4, [pc, #252]	; (10009320 <mpu_init+0x2f4>)
10009222:	47a0      	blx	r4
10009224:	2800      	cmp	r0, #0
10009226:	d152      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009228:	ab01      	add	r3, sp, #4
1000922a:	2288      	movs	r2, #136	; 0x88
1000922c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000922e:	4a3b      	ldr	r2, [pc, #236]	; (1000931c <mpu_init+0x2f0>)
10009230:	2120      	movs	r1, #32
10009232:	6810      	ldr	r0, [r2, #0]
10009234:	5c41      	ldrb	r1, [r0, r1]
10009236:	6852      	ldr	r2, [r2, #4]
10009238:	7810      	ldrb	r0, [r2, #0]
1000923a:	2201      	movs	r2, #1
1000923c:	4c38      	ldr	r4, [pc, #224]	; (10009320 <mpu_init+0x2f4>)
1000923e:	47a0      	blx	r4
10009240:	2800      	cmp	r0, #0
10009242:	d144      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009244:	ab01      	add	r3, sp, #4
10009246:	4a35      	ldr	r2, [pc, #212]	; (1000931c <mpu_init+0x2f0>)
10009248:	212a      	movs	r1, #42	; 0x2a
1000924a:	5c51      	ldrb	r1, [r2, r1]
1000924c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000924e:	2121      	movs	r1, #33	; 0x21
10009250:	6810      	ldr	r0, [r2, #0]
10009252:	5c41      	ldrb	r1, [r0, r1]
10009254:	6852      	ldr	r2, [r2, #4]
10009256:	7810      	ldrb	r0, [r2, #0]
10009258:	2201      	movs	r2, #1
1000925a:	4c31      	ldr	r4, [pc, #196]	; (10009320 <mpu_init+0x2f4>)
1000925c:	47a0      	blx	r4
1000925e:	2800      	cmp	r0, #0
10009260:	d135      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009262:	ab01      	add	r3, sp, #4
10009264:	220a      	movs	r2, #10
10009266:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009268:	4a2c      	ldr	r2, [pc, #176]	; (1000931c <mpu_init+0x2f0>)
1000926a:	2122      	movs	r1, #34	; 0x22
1000926c:	6810      	ldr	r0, [r2, #0]
1000926e:	5c41      	ldrb	r1, [r0, r1]
10009270:	6852      	ldr	r2, [r2, #4]
10009272:	7810      	ldrb	r0, [r2, #0]
10009274:	2201      	movs	r2, #1
10009276:	4c2a      	ldr	r4, [pc, #168]	; (10009320 <mpu_init+0x2f4>)
10009278:	47a0      	blx	r4
1000927a:	2800      	cmp	r0, #0
1000927c:	d127      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000927e:	ab01      	add	r3, sp, #4
10009280:	2281      	movs	r2, #129	; 0x81
10009282:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009284:	4a25      	ldr	r2, [pc, #148]	; (1000931c <mpu_init+0x2f0>)
10009286:	2123      	movs	r1, #35	; 0x23
10009288:	6810      	ldr	r0, [r2, #0]
1000928a:	5c41      	ldrb	r1, [r0, r1]
1000928c:	6852      	ldr	r2, [r2, #4]
1000928e:	7810      	ldrb	r0, [r2, #0]
10009290:	2201      	movs	r2, #1
10009292:	4c23      	ldr	r4, [pc, #140]	; (10009320 <mpu_init+0x2f4>)
10009294:	47a0      	blx	r4
10009296:	2800      	cmp	r0, #0
10009298:	d119      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000929a:	ab01      	add	r3, sp, #4
1000929c:	2211      	movs	r2, #17
1000929e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100092a0:	4a1e      	ldr	r2, [pc, #120]	; (1000931c <mpu_init+0x2f0>)
100092a2:	2126      	movs	r1, #38	; 0x26
100092a4:	6810      	ldr	r0, [r2, #0]
100092a6:	5c41      	ldrb	r1, [r0, r1]
100092a8:	6852      	ldr	r2, [r2, #4]
100092aa:	7810      	ldrb	r0, [r2, #0]
100092ac:	2201      	movs	r2, #1
100092ae:	4c1c      	ldr	r4, [pc, #112]	; (10009320 <mpu_init+0x2f4>)
100092b0:	47a0      	blx	r4
100092b2:	2800      	cmp	r0, #0
100092b4:	d10b      	bne.n	100092ce <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092b6:	ab01      	add	r3, sp, #4
100092b8:	2203      	movs	r2, #3
100092ba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092bc:	4a17      	ldr	r2, [pc, #92]	; (1000931c <mpu_init+0x2f0>)
100092be:	2127      	movs	r1, #39	; 0x27
100092c0:	6810      	ldr	r0, [r2, #0]
100092c2:	5c41      	ldrb	r1, [r0, r1]
100092c4:	6852      	ldr	r2, [r2, #4]
100092c6:	7810      	ldrb	r0, [r2, #0]
100092c8:	2201      	movs	r2, #1
100092ca:	4c15      	ldr	r4, [pc, #84]	; (10009320 <mpu_init+0x2f4>)
100092cc:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
100092ce:	200a      	movs	r0, #10
100092d0:	4b20      	ldr	r3, [pc, #128]	; (10009354 <mpu_init+0x328>)
100092d2:	4798      	blx	r3
100092d4:	1e04      	subs	r4, r0, #0
100092d6:	d11b      	bne.n	10009310 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100092d8:	2000      	movs	r0, #0
100092da:	4b1f      	ldr	r3, [pc, #124]	; (10009358 <mpu_init+0x32c>)
100092dc:	4798      	blx	r3
    return 0;
100092de:	e019      	b.n	10009314 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092e0:	2401      	movs	r4, #1
100092e2:	4264      	negs	r4, r4
100092e4:	e016      	b.n	10009314 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092e6:	2401      	movs	r4, #1
100092e8:	4264      	negs	r4, r4
100092ea:	e013      	b.n	10009314 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100092ec:	2401      	movs	r4, #1
100092ee:	4264      	negs	r4, r4
100092f0:	e010      	b.n	10009314 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
100092f2:	2401      	movs	r4, #1
100092f4:	4264      	negs	r4, r4
100092f6:	e00d      	b.n	10009314 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
100092f8:	2401      	movs	r4, #1
100092fa:	4264      	negs	r4, r4
100092fc:	e00a      	b.n	10009314 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100092fe:	2401      	movs	r4, #1
10009300:	4264      	negs	r4, r4
10009302:	e007      	b.n	10009314 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009304:	2401      	movs	r4, #1
10009306:	4264      	negs	r4, r4
10009308:	e004      	b.n	10009314 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000930a:	2401      	movs	r4, #1
1000930c:	4264      	negs	r4, r4
1000930e:	e001      	b.n	10009314 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009310:	2401      	movs	r4, #1
10009312:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009314:	0020      	movs	r0, r4
10009316:	b005      	add	sp, #20
10009318:	bd30      	pop	{r4, r5, pc}
1000931a:	46c0      	nop			; (mov r8, r8)
1000931c:	100168ac 	.word	0x100168ac
10009320:	1000a3d9 	.word	0x1000a3d9
10009324:	10008129 	.word	0x10008129
10009328:	100138f9 	.word	0x100138f9
1000932c:	100086fd 	.word	0x100086fd
10009330:	100087e9 	.word	0x100087e9
10009334:	1000887d 	.word	0x1000887d
10009338:	10008d71 	.word	0x10008d71
1000933c:	100089cd 	.word	0x100089cd
10009340:	10008a39 	.word	0x10008a39
10009344:	1000a435 	.word	0x1000a435
10009348:	10014d08 	.word	0x10014d08
1000934c:	10013b61 	.word	0x10013b61
10009350:	10014b78 	.word	0x10014b78
10009354:	10008955 	.word	0x10008955
10009358:	10008e45 	.word	0x10008e45

1000935c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1000935c:	b570      	push	{r4, r5, r6, lr}
1000935e:	b082      	sub	sp, #8
10009360:	000c      	movs	r4, r1
10009362:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009364:	d025      	beq.n	100093b2 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
10009366:	4b19      	ldr	r3, [pc, #100]	; (100093cc <mpu_write_mem+0x70>)
10009368:	7a9b      	ldrb	r3, [r3, #10]
1000936a:	2b00      	cmp	r3, #0
1000936c:	d024      	beq.n	100093b8 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000936e:	ab01      	add	r3, sp, #4
10009370:	0a02      	lsrs	r2, r0, #8
10009372:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009374:	b2c0      	uxtb	r0, r0
10009376:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009378:	4b14      	ldr	r3, [pc, #80]	; (100093cc <mpu_write_mem+0x70>)
1000937a:	685b      	ldr	r3, [r3, #4]
1000937c:	1840      	adds	r0, r0, r1
1000937e:	895a      	ldrh	r2, [r3, #10]
10009380:	4290      	cmp	r0, r2
10009382:	dc1c      	bgt.n	100093be <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009384:	4a11      	ldr	r2, [pc, #68]	; (100093cc <mpu_write_mem+0x70>)
10009386:	6812      	ldr	r2, [r2, #0]
10009388:	7ed1      	ldrb	r1, [r2, #27]
1000938a:	7818      	ldrb	r0, [r3, #0]
1000938c:	ab01      	add	r3, sp, #4
1000938e:	2202      	movs	r2, #2
10009390:	4e0f      	ldr	r6, [pc, #60]	; (100093d0 <mpu_write_mem+0x74>)
10009392:	47b0      	blx	r6
10009394:	2800      	cmp	r0, #0
10009396:	d115      	bne.n	100093c4 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009398:	b2e2      	uxtb	r2, r4
1000939a:	4b0c      	ldr	r3, [pc, #48]	; (100093cc <mpu_write_mem+0x70>)
1000939c:	6819      	ldr	r1, [r3, #0]
1000939e:	7e09      	ldrb	r1, [r1, #24]
100093a0:	685b      	ldr	r3, [r3, #4]
100093a2:	7818      	ldrb	r0, [r3, #0]
100093a4:	002b      	movs	r3, r5
100093a6:	4c0a      	ldr	r4, [pc, #40]	; (100093d0 <mpu_write_mem+0x74>)
100093a8:	47a0      	blx	r4
100093aa:	1e43      	subs	r3, r0, #1
100093ac:	4198      	sbcs	r0, r3
100093ae:	4240      	negs	r0, r0
100093b0:	e00a      	b.n	100093c8 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
100093b2:	2001      	movs	r0, #1
100093b4:	4240      	negs	r0, r0
100093b6:	e007      	b.n	100093c8 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
100093b8:	2001      	movs	r0, #1
100093ba:	4240      	negs	r0, r0
100093bc:	e004      	b.n	100093c8 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
100093be:	2001      	movs	r0, #1
100093c0:	4240      	negs	r0, r0
100093c2:	e001      	b.n	100093c8 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
100093c4:	2001      	movs	r0, #1
100093c6:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
100093c8:	b002      	add	sp, #8
100093ca:	bd70      	pop	{r4, r5, r6, pc}
100093cc:	100168ac 	.word	0x100168ac
100093d0:	1000a3d9 	.word	0x1000a3d9

100093d4 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100093d4:	b570      	push	{r4, r5, r6, lr}
100093d6:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100093d8:	2324      	movs	r3, #36	; 0x24
100093da:	4a21      	ldr	r2, [pc, #132]	; (10009460 <mpu_set_dmp_state+0x8c>)
100093dc:	5cd3      	ldrb	r3, [r2, r3]
100093de:	4283      	cmp	r3, r0
100093e0:	d037      	beq.n	10009452 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
100093e2:	2800      	cmp	r0, #0
100093e4:	d020      	beq.n	10009428 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
100093e6:	2325      	movs	r3, #37	; 0x25
100093e8:	5cd3      	ldrb	r3, [r2, r3]
100093ea:	2b00      	cmp	r3, #0
100093ec:	d033      	beq.n	10009456 <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100093ee:	2000      	movs	r0, #0
100093f0:	4d1c      	ldr	r5, [pc, #112]	; (10009464 <mpu_set_dmp_state+0x90>)
100093f2:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100093f4:	2000      	movs	r0, #0
100093f6:	4b1c      	ldr	r3, [pc, #112]	; (10009468 <mpu_set_dmp_state+0x94>)
100093f8:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100093fa:	4c19      	ldr	r4, [pc, #100]	; (10009460 <mpu_set_dmp_state+0x8c>)
100093fc:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100093fe:	4b1b      	ldr	r3, [pc, #108]	; (1000946c <mpu_set_dmp_state+0x98>)
10009400:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009402:	466b      	mov	r3, sp
10009404:	3307      	adds	r3, #7
10009406:	2200      	movs	r2, #0
10009408:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000940a:	6862      	ldr	r2, [r4, #4]
1000940c:	7810      	ldrb	r0, [r2, #0]
1000940e:	2201      	movs	r2, #1
10009410:	2123      	movs	r1, #35	; 0x23
10009412:	4e17      	ldr	r6, [pc, #92]	; (10009470 <mpu_set_dmp_state+0x9c>)
10009414:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
10009416:	2201      	movs	r2, #1
10009418:	2324      	movs	r3, #36	; 0x24
1000941a:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
1000941c:	2001      	movs	r0, #1
1000941e:	47a8      	blx	r5
        mpu_reset_fifo();
10009420:	4b14      	ldr	r3, [pc, #80]	; (10009474 <mpu_set_dmp_state+0xa0>)
10009422:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
10009424:	2000      	movs	r0, #0
10009426:	e018      	b.n	1000945a <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009428:	2000      	movs	r0, #0
1000942a:	4b0e      	ldr	r3, [pc, #56]	; (10009464 <mpu_set_dmp_state+0x90>)
1000942c:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1000942e:	466b      	mov	r3, sp
10009430:	3307      	adds	r3, #7
10009432:	4c0b      	ldr	r4, [pc, #44]	; (10009460 <mpu_set_dmp_state+0x8c>)
10009434:	7c22      	ldrb	r2, [r4, #16]
10009436:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009438:	6862      	ldr	r2, [r4, #4]
1000943a:	7810      	ldrb	r0, [r2, #0]
1000943c:	2201      	movs	r2, #1
1000943e:	2123      	movs	r1, #35	; 0x23
10009440:	4d0b      	ldr	r5, [pc, #44]	; (10009470 <mpu_set_dmp_state+0x9c>)
10009442:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009444:	2200      	movs	r2, #0
10009446:	2324      	movs	r3, #36	; 0x24
10009448:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
1000944a:	4b0a      	ldr	r3, [pc, #40]	; (10009474 <mpu_set_dmp_state+0xa0>)
1000944c:	4798      	blx	r3
    }
    return 0;
1000944e:	2000      	movs	r0, #0
10009450:	e003      	b.n	1000945a <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009452:	2000      	movs	r0, #0
10009454:	e001      	b.n	1000945a <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
10009456:	2001      	movs	r0, #1
10009458:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
1000945a:	b002      	add	sp, #8
1000945c:	bd70      	pop	{r4, r5, r6, pc}
1000945e:	46c0      	nop			; (mov r8, r8)
10009460:	100168ac 	.word	0x100168ac
10009464:	10008461 	.word	0x10008461
10009468:	10008a39 	.word	0x10008a39
1000946c:	10008d71 	.word	0x10008d71
10009470:	1000a3d9 	.word	0x1000a3d9
10009474:	10008505 	.word	0x10008505

10009478 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009478:	4b02      	ldr	r3, [pc, #8]	; (10009484 <mpu_get_compass_fsr+0xc>)
1000947a:	685b      	ldr	r3, [r3, #4]
1000947c:	899b      	ldrh	r3, [r3, #12]
1000947e:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009480:	2000      	movs	r0, #0
10009482:	4770      	bx	lr
10009484:	100168ac 	.word	0x100168ac

10009488 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
10009488:	b510      	push	{r4, lr}
1000948a:	b086      	sub	sp, #24
1000948c:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000948e:	220c      	movs	r2, #12
10009490:	4915      	ldr	r1, [pc, #84]	; (100094e8 <dmp_set_fifo_rate+0x60>)
10009492:	3110      	adds	r1, #16
10009494:	a803      	add	r0, sp, #12
10009496:	4b15      	ldr	r3, [pc, #84]	; (100094ec <dmp_set_fifo_rate+0x64>)
10009498:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000949a:	2cc8      	cmp	r4, #200	; 0xc8
1000949c:	d819      	bhi.n	100094d2 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
1000949e:	0021      	movs	r1, r4
100094a0:	20c8      	movs	r0, #200	; 0xc8
100094a2:	4b13      	ldr	r3, [pc, #76]	; (100094f0 <dmp_set_fifo_rate+0x68>)
100094a4:	4798      	blx	r3
100094a6:	3801      	subs	r0, #1
100094a8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094aa:	aa01      	add	r2, sp, #4
100094ac:	0a03      	lsrs	r3, r0, #8
100094ae:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
100094b0:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100094b2:	2102      	movs	r1, #2
100094b4:	480f      	ldr	r0, [pc, #60]	; (100094f4 <dmp_set_fifo_rate+0x6c>)
100094b6:	4b10      	ldr	r3, [pc, #64]	; (100094f8 <dmp_set_fifo_rate+0x70>)
100094b8:	4798      	blx	r3
100094ba:	2800      	cmp	r0, #0
100094bc:	d10c      	bne.n	100094d8 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100094be:	aa03      	add	r2, sp, #12
100094c0:	210c      	movs	r1, #12
100094c2:	480e      	ldr	r0, [pc, #56]	; (100094fc <dmp_set_fifo_rate+0x74>)
100094c4:	4b0c      	ldr	r3, [pc, #48]	; (100094f8 <dmp_set_fifo_rate+0x70>)
100094c6:	4798      	blx	r3
100094c8:	2800      	cmp	r0, #0
100094ca:	d108      	bne.n	100094de <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
100094cc:	4b0c      	ldr	r3, [pc, #48]	; (10009500 <dmp_set_fifo_rate+0x78>)
100094ce:	819c      	strh	r4, [r3, #12]
    return 0;
100094d0:	e007      	b.n	100094e2 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
100094d2:	2001      	movs	r0, #1
100094d4:	4240      	negs	r0, r0
100094d6:	e004      	b.n	100094e2 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
100094d8:	2001      	movs	r0, #1
100094da:	4240      	negs	r0, r0
100094dc:	e001      	b.n	100094e2 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
100094de:	2001      	movs	r0, #1
100094e0:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
100094e2:	b006      	add	sp, #24
100094e4:	bd10      	pop	{r4, pc}
100094e6:	46c0      	nop			; (mov r8, r8)
100094e8:	10014f54 	.word	0x10014f54
100094ec:	100138e7 	.word	0x100138e7
100094f0:	10011c85 	.word	0x10011c85
100094f4:	00000216 	.word	0x00000216
100094f8:	1000935d 	.word	0x1000935d
100094fc:	00000ac1 	.word	0x00000ac1
10009500:	10016970 	.word	0x10016970

10009504 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009504:	b5f0      	push	{r4, r5, r6, r7, lr}
10009506:	4647      	mov	r7, r8
10009508:	b480      	push	{r7}
1000950a:	b082      	sub	sp, #8
1000950c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000950e:	0743      	lsls	r3, r0, #29
10009510:	d100      	bne.n	10009514 <dmp_set_tap_thresh+0x10>
10009512:	e09c      	b.n	1000964e <dmp_set_tap_thresh+0x14a>
10009514:	23c8      	movs	r3, #200	; 0xc8
10009516:	00db      	lsls	r3, r3, #3
10009518:	4299      	cmp	r1, r3
1000951a:	d900      	bls.n	1000951e <dmp_set_tap_thresh+0x1a>
1000951c:	e09a      	b.n	10009654 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000951e:	0008      	movs	r0, r1
10009520:	4b58      	ldr	r3, [pc, #352]	; (10009684 <dmp_set_tap_thresh+0x180>)
10009522:	4798      	blx	r3
10009524:	4958      	ldr	r1, [pc, #352]	; (10009688 <dmp_set_tap_thresh+0x184>)
10009526:	4b59      	ldr	r3, [pc, #356]	; (1000968c <dmp_set_tap_thresh+0x188>)
10009528:	4798      	blx	r3
1000952a:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000952c:	466b      	mov	r3, sp
1000952e:	1cdd      	adds	r5, r3, #3
10009530:	0028      	movs	r0, r5
10009532:	4b57      	ldr	r3, [pc, #348]	; (10009690 <dmp_set_tap_thresh+0x18c>)
10009534:	4798      	blx	r3
    switch (accel_fsr) {
10009536:	782b      	ldrb	r3, [r5, #0]
10009538:	2b04      	cmp	r3, #4
1000953a:	d019      	beq.n	10009570 <dmp_set_tap_thresh+0x6c>
1000953c:	b2da      	uxtb	r2, r3
1000953e:	2a04      	cmp	r2, #4
10009540:	d802      	bhi.n	10009548 <dmp_set_tap_thresh+0x44>
10009542:	2b02      	cmp	r3, #2
10009544:	d005      	beq.n	10009552 <dmp_set_tap_thresh+0x4e>
10009546:	e088      	b.n	1000965a <dmp_set_tap_thresh+0x156>
10009548:	2b08      	cmp	r3, #8
1000954a:	d020      	beq.n	1000958e <dmp_set_tap_thresh+0x8a>
1000954c:	2b10      	cmp	r3, #16
1000954e:	d02d      	beq.n	100095ac <dmp_set_tap_thresh+0xa8>
10009550:	e083      	b.n	1000965a <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009552:	4b50      	ldr	r3, [pc, #320]	; (10009694 <dmp_set_tap_thresh+0x190>)
10009554:	4698      	mov	r8, r3
10009556:	218d      	movs	r1, #141	; 0x8d
10009558:	05c9      	lsls	r1, r1, #23
1000955a:	1c30      	adds	r0, r6, #0
1000955c:	4798      	blx	r3
1000955e:	4f4e      	ldr	r7, [pc, #312]	; (10009698 <dmp_set_tap_thresh+0x194>)
10009560:	47b8      	blx	r7
10009562:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009564:	494d      	ldr	r1, [pc, #308]	; (1000969c <dmp_set_tap_thresh+0x198>)
10009566:	1c30      	adds	r0, r6, #0
10009568:	47c0      	blx	r8
1000956a:	47b8      	blx	r7
1000956c:	b280      	uxth	r0, r0
        break;
1000956e:	e02b      	b.n	100095c8 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009570:	4b48      	ldr	r3, [pc, #288]	; (10009694 <dmp_set_tap_thresh+0x190>)
10009572:	4698      	mov	r8, r3
10009574:	218c      	movs	r1, #140	; 0x8c
10009576:	05c9      	lsls	r1, r1, #23
10009578:	1c30      	adds	r0, r6, #0
1000957a:	4798      	blx	r3
1000957c:	4f46      	ldr	r7, [pc, #280]	; (10009698 <dmp_set_tap_thresh+0x194>)
1000957e:	47b8      	blx	r7
10009580:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009582:	4947      	ldr	r1, [pc, #284]	; (100096a0 <dmp_set_tap_thresh+0x19c>)
10009584:	1c30      	adds	r0, r6, #0
10009586:	47c0      	blx	r8
10009588:	47b8      	blx	r7
1000958a:	b280      	uxth	r0, r0
        break;
1000958c:	e01c      	b.n	100095c8 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000958e:	4b41      	ldr	r3, [pc, #260]	; (10009694 <dmp_set_tap_thresh+0x190>)
10009590:	4698      	mov	r8, r3
10009592:	218b      	movs	r1, #139	; 0x8b
10009594:	05c9      	lsls	r1, r1, #23
10009596:	1c30      	adds	r0, r6, #0
10009598:	4798      	blx	r3
1000959a:	4f3f      	ldr	r7, [pc, #252]	; (10009698 <dmp_set_tap_thresh+0x194>)
1000959c:	47b8      	blx	r7
1000959e:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100095a0:	4940      	ldr	r1, [pc, #256]	; (100096a4 <dmp_set_tap_thresh+0x1a0>)
100095a2:	1c30      	adds	r0, r6, #0
100095a4:	47c0      	blx	r8
100095a6:	47b8      	blx	r7
100095a8:	b280      	uxth	r0, r0
        break;
100095aa:	e00d      	b.n	100095c8 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100095ac:	4b39      	ldr	r3, [pc, #228]	; (10009694 <dmp_set_tap_thresh+0x190>)
100095ae:	4698      	mov	r8, r3
100095b0:	218a      	movs	r1, #138	; 0x8a
100095b2:	05c9      	lsls	r1, r1, #23
100095b4:	1c30      	adds	r0, r6, #0
100095b6:	4798      	blx	r3
100095b8:	4f37      	ldr	r7, [pc, #220]	; (10009698 <dmp_set_tap_thresh+0x194>)
100095ba:	47b8      	blx	r7
100095bc:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100095be:	493a      	ldr	r1, [pc, #232]	; (100096a8 <dmp_set_tap_thresh+0x1a4>)
100095c0:	1c30      	adds	r0, r6, #0
100095c2:	47c0      	blx	r8
100095c4:	47b8      	blx	r7
100095c6:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100095c8:	ab01      	add	r3, sp, #4
100095ca:	0a2a      	lsrs	r2, r5, #8
100095cc:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
100095ce:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100095d0:	0a02      	lsrs	r2, r0, #8
100095d2:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100095d4:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
100095d6:	07e3      	lsls	r3, r4, #31
100095d8:	d510      	bpl.n	100095fc <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100095da:	aa01      	add	r2, sp, #4
100095dc:	2102      	movs	r1, #2
100095de:	20ea      	movs	r0, #234	; 0xea
100095e0:	0040      	lsls	r0, r0, #1
100095e2:	4b32      	ldr	r3, [pc, #200]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
100095e4:	4798      	blx	r3
100095e6:	2800      	cmp	r0, #0
100095e8:	d13a      	bne.n	10009660 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
100095ea:	466b      	mov	r3, sp
100095ec:	1d9a      	adds	r2, r3, #6
100095ee:	2102      	movs	r1, #2
100095f0:	3025      	adds	r0, #37	; 0x25
100095f2:	30ff      	adds	r0, #255	; 0xff
100095f4:	4b2d      	ldr	r3, [pc, #180]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
100095f6:	4798      	blx	r3
100095f8:	2800      	cmp	r0, #0
100095fa:	d134      	bne.n	10009666 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
100095fc:	07a3      	lsls	r3, r4, #30
100095fe:	d510      	bpl.n	10009622 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009600:	aa01      	add	r2, sp, #4
10009602:	2102      	movs	r1, #2
10009604:	20ec      	movs	r0, #236	; 0xec
10009606:	0040      	lsls	r0, r0, #1
10009608:	4b28      	ldr	r3, [pc, #160]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
1000960a:	4798      	blx	r3
1000960c:	2800      	cmp	r0, #0
1000960e:	d12d      	bne.n	1000966c <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009610:	466b      	mov	r3, sp
10009612:	1d9a      	adds	r2, r3, #6
10009614:	2102      	movs	r1, #2
10009616:	3029      	adds	r0, #41	; 0x29
10009618:	30ff      	adds	r0, #255	; 0xff
1000961a:	4b24      	ldr	r3, [pc, #144]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
1000961c:	4798      	blx	r3
1000961e:	2800      	cmp	r0, #0
10009620:	d127      	bne.n	10009672 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009622:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009624:	0763      	lsls	r3, r4, #29
10009626:	d529      	bpl.n	1000967c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009628:	aa01      	add	r2, sp, #4
1000962a:	2102      	movs	r1, #2
1000962c:	30dd      	adds	r0, #221	; 0xdd
1000962e:	30ff      	adds	r0, #255	; 0xff
10009630:	4b1e      	ldr	r3, [pc, #120]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
10009632:	4798      	blx	r3
10009634:	2800      	cmp	r0, #0
10009636:	d11f      	bne.n	10009678 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009638:	466b      	mov	r3, sp
1000963a:	1d9a      	adds	r2, r3, #6
1000963c:	2102      	movs	r1, #2
1000963e:	302d      	adds	r0, #45	; 0x2d
10009640:	30ff      	adds	r0, #255	; 0xff
10009642:	4b1a      	ldr	r3, [pc, #104]	; (100096ac <dmp_set_tap_thresh+0x1a8>)
10009644:	4798      	blx	r3
10009646:	1e43      	subs	r3, r0, #1
10009648:	4198      	sbcs	r0, r3
1000964a:	4240      	negs	r0, r0
1000964c:	e016      	b.n	1000967c <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000964e:	2001      	movs	r0, #1
10009650:	4240      	negs	r0, r0
10009652:	e013      	b.n	1000967c <dmp_set_tap_thresh+0x178>
10009654:	2001      	movs	r0, #1
10009656:	4240      	negs	r0, r0
10009658:	e010      	b.n	1000967c <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000965a:	2001      	movs	r0, #1
1000965c:	4240      	negs	r0, r0
1000965e:	e00d      	b.n	1000967c <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
10009660:	2001      	movs	r0, #1
10009662:	4240      	negs	r0, r0
10009664:	e00a      	b.n	1000967c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
10009666:	2001      	movs	r0, #1
10009668:	4240      	negs	r0, r0
1000966a:	e007      	b.n	1000967c <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
1000966c:	2001      	movs	r0, #1
1000966e:	4240      	negs	r0, r0
10009670:	e004      	b.n	1000967c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
10009672:	2001      	movs	r0, #1
10009674:	4240      	negs	r0, r0
10009676:	e001      	b.n	1000967c <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
10009678:	2001      	movs	r0, #1
1000967a:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
1000967c:	b002      	add	sp, #8
1000967e:	bc04      	pop	{r2}
10009680:	4690      	mov	r8, r2
10009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009684:	1001291d 	.word	0x1001291d
10009688:	43480000 	.word	0x43480000
1000968c:	10012011 	.word	0x10012011
10009690:	1000879d 	.word	0x1000879d
10009694:	100123a5 	.word	0x100123a5
10009698:	10011fa5 	.word	0x10011fa5
1000969c:	46400000 	.word	0x46400000
100096a0:	45c00000 	.word	0x45c00000
100096a4:	45400000 	.word	0x45400000
100096a8:	44c00000 	.word	0x44c00000
100096ac:	1000935d 	.word	0x1000935d

100096b0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096b0:	b500      	push	{lr}
100096b2:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096b4:	07c3      	lsls	r3, r0, #31
100096b6:	d403      	bmi.n	100096c0 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100096b8:	2200      	movs	r2, #0
100096ba:	466b      	mov	r3, sp
100096bc:	71da      	strb	r2, [r3, #7]
100096be:	e002      	b.n	100096c6 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
100096c0:	2230      	movs	r2, #48	; 0x30
100096c2:	466b      	mov	r3, sp
100096c4:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
100096c6:	0783      	lsls	r3, r0, #30
100096c8:	d505      	bpl.n	100096d6 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
100096ca:	466b      	mov	r3, sp
100096cc:	1dda      	adds	r2, r3, #7
100096ce:	79d9      	ldrb	r1, [r3, #7]
100096d0:	230c      	movs	r3, #12
100096d2:	430b      	orrs	r3, r1
100096d4:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100096d6:	0743      	lsls	r3, r0, #29
100096d8:	d505      	bpl.n	100096e6 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
100096da:	466b      	mov	r3, sp
100096dc:	1dda      	adds	r2, r3, #7
100096de:	79d9      	ldrb	r1, [r3, #7]
100096e0:	2303      	movs	r3, #3
100096e2:	430b      	orrs	r3, r1
100096e4:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100096e6:	466b      	mov	r3, sp
100096e8:	1dda      	adds	r2, r3, #7
100096ea:	2101      	movs	r1, #1
100096ec:	20a4      	movs	r0, #164	; 0xa4
100096ee:	0040      	lsls	r0, r0, #1
100096f0:	4b01      	ldr	r3, [pc, #4]	; (100096f8 <dmp_set_tap_axes+0x48>)
100096f2:	4798      	blx	r3
}
100096f4:	b003      	add	sp, #12
100096f6:	bd00      	pop	{pc}
100096f8:	1000935d 	.word	0x1000935d

100096fc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
100096fc:	b500      	push	{lr}
100096fe:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009700:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009702:	2800      	cmp	r0, #0
10009704:	d004      	beq.n	10009710 <dmp_set_tap_count+0x14>
10009706:	1c03      	adds	r3, r0, #0
10009708:	2804      	cmp	r0, #4
1000970a:	d900      	bls.n	1000970e <dmp_set_tap_count+0x12>
1000970c:	2304      	movs	r3, #4
1000970e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009710:	466a      	mov	r2, sp
10009712:	3207      	adds	r2, #7
10009714:	3b01      	subs	r3, #1
10009716:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009718:	2101      	movs	r1, #1
1000971a:	2050      	movs	r0, #80	; 0x50
1000971c:	30ff      	adds	r0, #255	; 0xff
1000971e:	4b02      	ldr	r3, [pc, #8]	; (10009728 <dmp_set_tap_count+0x2c>)
10009720:	4798      	blx	r3
}
10009722:	b003      	add	sp, #12
10009724:	bd00      	pop	{pc}
10009726:	46c0      	nop			; (mov r8, r8)
10009728:	1000935d 	.word	0x1000935d

1000972c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
1000972c:	b500      	push	{lr}
1000972e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009730:	2105      	movs	r1, #5
10009732:	4b07      	ldr	r3, [pc, #28]	; (10009750 <dmp_set_tap_time+0x24>)
10009734:	4798      	blx	r3
10009736:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009738:	aa01      	add	r2, sp, #4
1000973a:	0a03      	lsrs	r3, r0, #8
1000973c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000973e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009740:	2102      	movs	r1, #2
10009742:	20ef      	movs	r0, #239	; 0xef
10009744:	0040      	lsls	r0, r0, #1
10009746:	4b03      	ldr	r3, [pc, #12]	; (10009754 <dmp_set_tap_time+0x28>)
10009748:	4798      	blx	r3
}
1000974a:	b003      	add	sp, #12
1000974c:	bd00      	pop	{pc}
1000974e:	46c0      	nop			; (mov r8, r8)
10009750:	10011b71 	.word	0x10011b71
10009754:	1000935d 	.word	0x1000935d

10009758 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009758:	b500      	push	{lr}
1000975a:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1000975c:	2105      	movs	r1, #5
1000975e:	4b07      	ldr	r3, [pc, #28]	; (1000977c <dmp_set_tap_time_multi+0x24>)
10009760:	4798      	blx	r3
10009762:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009764:	aa01      	add	r2, sp, #4
10009766:	0a03      	lsrs	r3, r0, #8
10009768:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000976a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
1000976c:	2102      	movs	r1, #2
1000976e:	20ed      	movs	r0, #237	; 0xed
10009770:	0040      	lsls	r0, r0, #1
10009772:	4b03      	ldr	r3, [pc, #12]	; (10009780 <dmp_set_tap_time_multi+0x28>)
10009774:	4798      	blx	r3
}
10009776:	b003      	add	sp, #12
10009778:	bd00      	pop	{pc}
1000977a:	46c0      	nop			; (mov r8, r8)
1000977c:	10011b71 	.word	0x10011b71
10009780:	1000935d 	.word	0x1000935d

10009784 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009784:	b510      	push	{r4, lr}
10009786:	b082      	sub	sp, #8
10009788:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
1000978a:	21fa      	movs	r1, #250	; 0xfa
1000978c:	0089      	lsls	r1, r1, #2
1000978e:	4b09      	ldr	r3, [pc, #36]	; (100097b4 <dmp_set_shake_reject_thresh+0x30>)
10009790:	4798      	blx	r3
10009792:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009794:	aa01      	add	r2, sp, #4
10009796:	1603      	asrs	r3, r0, #24
10009798:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1000979a:	1403      	asrs	r3, r0, #16
1000979c:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1000979e:	1203      	asrs	r3, r0, #8
100097a0:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097a2:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100097a4:	2104      	movs	r1, #4
100097a6:	20ae      	movs	r0, #174	; 0xae
100097a8:	0040      	lsls	r0, r0, #1
100097aa:	4b03      	ldr	r3, [pc, #12]	; (100097b8 <dmp_set_shake_reject_thresh+0x34>)
100097ac:	4798      	blx	r3
}
100097ae:	b002      	add	sp, #8
100097b0:	bd10      	pop	{r4, pc}
100097b2:	46c0      	nop			; (mov r8, r8)
100097b4:	10011c85 	.word	0x10011c85
100097b8:	1000935d 	.word	0x1000935d

100097bc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
100097bc:	b500      	push	{lr}
100097be:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100097c0:	2105      	movs	r1, #5
100097c2:	4b07      	ldr	r3, [pc, #28]	; (100097e0 <dmp_set_shake_reject_time+0x24>)
100097c4:	4798      	blx	r3
100097c6:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100097c8:	aa01      	add	r2, sp, #4
100097ca:	0a03      	lsrs	r3, r0, #8
100097cc:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
100097ce:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
100097d0:	2102      	movs	r1, #2
100097d2:	20ad      	movs	r0, #173	; 0xad
100097d4:	0040      	lsls	r0, r0, #1
100097d6:	4b03      	ldr	r3, [pc, #12]	; (100097e4 <dmp_set_shake_reject_time+0x28>)
100097d8:	4798      	blx	r3
}
100097da:	b003      	add	sp, #12
100097dc:	bd00      	pop	{pc}
100097de:	46c0      	nop			; (mov r8, r8)
100097e0:	10011b71 	.word	0x10011b71
100097e4:	1000935d 	.word	0x1000935d

100097e8 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
100097e8:	b500      	push	{lr}
100097ea:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100097ec:	2105      	movs	r1, #5
100097ee:	4b07      	ldr	r3, [pc, #28]	; (1000980c <dmp_set_shake_reject_timeout+0x24>)
100097f0:	4798      	blx	r3
100097f2:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100097f4:	aa01      	add	r2, sp, #4
100097f6:	0a03      	lsrs	r3, r0, #8
100097f8:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
100097fa:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
100097fc:	2102      	movs	r1, #2
100097fe:	20ac      	movs	r0, #172	; 0xac
10009800:	0040      	lsls	r0, r0, #1
10009802:	4b03      	ldr	r3, [pc, #12]	; (10009810 <dmp_set_shake_reject_timeout+0x28>)
10009804:	4798      	blx	r3
}
10009806:	b003      	add	sp, #12
10009808:	bd00      	pop	{pc}
1000980a:	46c0      	nop			; (mov r8, r8)
1000980c:	10011b71 	.word	0x10011b71
10009810:	1000935d 	.word	0x1000935d

10009814 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009814:	b500      	push	{lr}
10009816:	b085      	sub	sp, #20
    if (enable) {
10009818:	2800      	cmp	r0, #0
1000981a:	d00c      	beq.n	10009836 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000981c:	2209      	movs	r2, #9
1000981e:	490d      	ldr	r1, [pc, #52]	; (10009854 <dmp_enable_gyro_cal+0x40>)
10009820:	311c      	adds	r1, #28
10009822:	a801      	add	r0, sp, #4
10009824:	4b0c      	ldr	r3, [pc, #48]	; (10009858 <dmp_enable_gyro_cal+0x44>)
10009826:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009828:	aa01      	add	r2, sp, #4
1000982a:	2109      	movs	r1, #9
1000982c:	2097      	movs	r0, #151	; 0x97
1000982e:	00c0      	lsls	r0, r0, #3
10009830:	4b0a      	ldr	r3, [pc, #40]	; (1000985c <dmp_enable_gyro_cal+0x48>)
10009832:	4798      	blx	r3
10009834:	e00b      	b.n	1000984e <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009836:	2209      	movs	r2, #9
10009838:	4906      	ldr	r1, [pc, #24]	; (10009854 <dmp_enable_gyro_cal+0x40>)
1000983a:	3128      	adds	r1, #40	; 0x28
1000983c:	a801      	add	r0, sp, #4
1000983e:	4b06      	ldr	r3, [pc, #24]	; (10009858 <dmp_enable_gyro_cal+0x44>)
10009840:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009842:	aa01      	add	r2, sp, #4
10009844:	2109      	movs	r1, #9
10009846:	2097      	movs	r0, #151	; 0x97
10009848:	00c0      	lsls	r0, r0, #3
1000984a:	4b04      	ldr	r3, [pc, #16]	; (1000985c <dmp_enable_gyro_cal+0x48>)
1000984c:	4798      	blx	r3
    }
}
1000984e:	b005      	add	sp, #20
10009850:	bd00      	pop	{pc}
10009852:	46c0      	nop			; (mov r8, r8)
10009854:	10014f54 	.word	0x10014f54
10009858:	100138e7 	.word	0x100138e7
1000985c:	1000935d 	.word	0x1000935d

10009860 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009860:	b500      	push	{lr}
10009862:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009864:	2800      	cmp	r0, #0
10009866:	d009      	beq.n	1000987c <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009868:	ab01      	add	r3, sp, #4
1000986a:	22c0      	movs	r2, #192	; 0xc0
1000986c:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
1000986e:	3202      	adds	r2, #2
10009870:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009872:	3202      	adds	r2, #2
10009874:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009876:	3202      	adds	r2, #2
10009878:	70da      	strb	r2, [r3, #3]
1000987a:	e001      	b.n	10009880 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
1000987c:	4b05      	ldr	r3, [pc, #20]	; (10009894 <dmp_enable_lp_quat+0x34>)
1000987e:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009880:	aa01      	add	r2, sp, #4
10009882:	2104      	movs	r1, #4
10009884:	4804      	ldr	r0, [pc, #16]	; (10009898 <dmp_enable_lp_quat+0x38>)
10009886:	4b05      	ldr	r3, [pc, #20]	; (1000989c <dmp_enable_lp_quat+0x3c>)
10009888:	4798      	blx	r3

    return mpu_reset_fifo();
1000988a:	4b05      	ldr	r3, [pc, #20]	; (100098a0 <dmp_enable_lp_quat+0x40>)
1000988c:	4798      	blx	r3
}
1000988e:	b003      	add	sp, #12
10009890:	bd00      	pop	{pc}
10009892:	46c0      	nop			; (mov r8, r8)
10009894:	8b8b8b8b 	.word	0x8b8b8b8b
10009898:	00000a98 	.word	0x00000a98
1000989c:	1000935d 	.word	0x1000935d
100098a0:	10008505 	.word	0x10008505

100098a4 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
100098a4:	b500      	push	{lr}
100098a6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100098a8:	2800      	cmp	r0, #0
100098aa:	d009      	beq.n	100098c0 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
100098ac:	ab01      	add	r3, sp, #4
100098ae:	2220      	movs	r2, #32
100098b0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
100098b2:	3208      	adds	r2, #8
100098b4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
100098b6:	3208      	adds	r2, #8
100098b8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
100098ba:	3208      	adds	r2, #8
100098bc:	70da      	strb	r2, [r3, #3]
100098be:	e001      	b.n	100098c4 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
100098c0:	4b05      	ldr	r3, [pc, #20]	; (100098d8 <dmp_enable_6x_lp_quat+0x34>)
100098c2:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
100098c4:	aa01      	add	r2, sp, #4
100098c6:	2104      	movs	r1, #4
100098c8:	4804      	ldr	r0, [pc, #16]	; (100098dc <dmp_enable_6x_lp_quat+0x38>)
100098ca:	4b05      	ldr	r3, [pc, #20]	; (100098e0 <dmp_enable_6x_lp_quat+0x3c>)
100098cc:	4798      	blx	r3

    return mpu_reset_fifo();
100098ce:	4b05      	ldr	r3, [pc, #20]	; (100098e4 <dmp_enable_6x_lp_quat+0x40>)
100098d0:	4798      	blx	r3
}
100098d2:	b003      	add	sp, #12
100098d4:	bd00      	pop	{pc}
100098d6:	46c0      	nop			; (mov r8, r8)
100098d8:	a3a3a3a3 	.word	0xa3a3a3a3
100098dc:	00000a9e 	.word	0x00000a9e
100098e0:	1000935d 	.word	0x1000935d
100098e4:	10008505 	.word	0x10008505

100098e8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100098e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100098ea:	b085      	sub	sp, #20
100098ec:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100098ee:	ad01      	add	r5, sp, #4
100098f0:	2302      	movs	r3, #2
100098f2:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100098f4:	33c8      	adds	r3, #200	; 0xc8
100098f6:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100098f8:	3319      	adds	r3, #25
100098fa:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100098fc:	3bda      	subs	r3, #218	; 0xda
100098fe:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009900:	002a      	movs	r2, r5
10009902:	2104      	movs	r1, #4
10009904:	2068      	movs	r0, #104	; 0x68
10009906:	4b6a      	ldr	r3, [pc, #424]	; (10009ab0 <dmp_enable_feature+0x1c8>)
10009908:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000990a:	23a3      	movs	r3, #163	; 0xa3
1000990c:	702b      	strb	r3, [r5, #0]
1000990e:	2740      	movs	r7, #64	; 0x40
10009910:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009912:	d007      	beq.n	10009924 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009914:	ab01      	add	r3, sp, #4
10009916:	22c0      	movs	r2, #192	; 0xc0
10009918:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
1000991a:	3208      	adds	r2, #8
1000991c:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
1000991e:	3a06      	subs	r2, #6
10009920:	70da      	strb	r2, [r3, #3]
10009922:	e004      	b.n	1000992e <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009924:	ab01      	add	r3, sp, #4
10009926:	22a3      	movs	r2, #163	; 0xa3
10009928:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
1000992a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
1000992c:	70da      	strb	r2, [r3, #3]
1000992e:	25c0      	movs	r5, #192	; 0xc0
10009930:	006d      	lsls	r5, r5, #1
10009932:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009934:	d007      	beq.n	10009946 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009936:	ab01      	add	r3, sp, #4
10009938:	22c4      	movs	r2, #196	; 0xc4
1000993a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
1000993c:	3208      	adds	r2, #8
1000993e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009940:	3a06      	subs	r2, #6
10009942:	719a      	strb	r2, [r3, #6]
10009944:	e004      	b.n	10009950 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009946:	ab01      	add	r3, sp, #4
10009948:	22a3      	movs	r2, #163	; 0xa3
1000994a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
1000994c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
1000994e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009950:	aa01      	add	r2, sp, #4
10009952:	23a3      	movs	r3, #163	; 0xa3
10009954:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009956:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009958:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000995a:	210a      	movs	r1, #10
1000995c:	4855      	ldr	r0, [pc, #340]	; (10009ab4 <dmp_enable_feature+0x1cc>)
1000995e:	4b54      	ldr	r3, [pc, #336]	; (10009ab0 <dmp_enable_feature+0x1c8>)
10009960:	4798      	blx	r3
10009962:	2603      	movs	r6, #3
10009964:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009966:	d003      	beq.n	10009970 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009968:	2220      	movs	r2, #32
1000996a:	ab01      	add	r3, sp, #4
1000996c:	701a      	strb	r2, [r3, #0]
1000996e:	e002      	b.n	10009976 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009970:	22d8      	movs	r2, #216	; 0xd8
10009972:	ab01      	add	r3, sp, #4
10009974:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009976:	aa01      	add	r2, sp, #4
10009978:	2101      	movs	r1, #1
1000997a:	484f      	ldr	r0, [pc, #316]	; (10009ab8 <dmp_enable_feature+0x1d0>)
1000997c:	4b4c      	ldr	r3, [pc, #304]	; (10009ab0 <dmp_enable_feature+0x1c8>)
1000997e:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009980:	06a3      	lsls	r3, r4, #26
10009982:	d503      	bpl.n	1000998c <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009984:	2001      	movs	r0, #1
10009986:	4b4d      	ldr	r3, [pc, #308]	; (10009abc <dmp_enable_feature+0x1d4>)
10009988:	4798      	blx	r3
1000998a:	e002      	b.n	10009992 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
1000998c:	2000      	movs	r0, #0
1000998e:	4b4b      	ldr	r3, [pc, #300]	; (10009abc <dmp_enable_feature+0x1d4>)
10009990:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009992:	2d00      	cmp	r5, #0
10009994:	d019      	beq.n	100099ca <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009996:	05e3      	lsls	r3, r4, #23
10009998:	d509      	bpl.n	100099ae <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
1000999a:	ab01      	add	r3, sp, #4
1000999c:	22b2      	movs	r2, #178	; 0xb2
1000999e:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
100099a0:	3a27      	subs	r2, #39	; 0x27
100099a2:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
100099a4:	322b      	adds	r2, #43	; 0x2b
100099a6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
100099a8:	3a1b      	subs	r2, #27
100099aa:	70da      	strb	r2, [r3, #3]
100099ac:	e008      	b.n	100099c0 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
100099ae:	ab01      	add	r3, sp, #4
100099b0:	22b0      	movs	r2, #176	; 0xb0
100099b2:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
100099b4:	3a30      	subs	r2, #48	; 0x30
100099b6:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
100099b8:	3234      	adds	r2, #52	; 0x34
100099ba:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
100099bc:	3a24      	subs	r2, #36	; 0x24
100099be:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
100099c0:	aa01      	add	r2, sp, #4
100099c2:	2104      	movs	r1, #4
100099c4:	483e      	ldr	r0, [pc, #248]	; (10009ac0 <dmp_enable_feature+0x1d8>)
100099c6:	4b3a      	ldr	r3, [pc, #232]	; (10009ab0 <dmp_enable_feature+0x1c8>)
100099c8:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
100099ca:	07e3      	lsls	r3, r4, #31
100099cc:	d523      	bpl.n	10009a16 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
100099ce:	aa01      	add	r2, sp, #4
100099d0:	23f8      	movs	r3, #248	; 0xf8
100099d2:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100099d4:	2101      	movs	r1, #1
100099d6:	208b      	movs	r0, #139	; 0x8b
100099d8:	0100      	lsls	r0, r0, #4
100099da:	4b35      	ldr	r3, [pc, #212]	; (10009ab0 <dmp_enable_feature+0x1c8>)
100099dc:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
100099de:	21fa      	movs	r1, #250	; 0xfa
100099e0:	2007      	movs	r0, #7
100099e2:	4b38      	ldr	r3, [pc, #224]	; (10009ac4 <dmp_enable_feature+0x1dc>)
100099e4:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
100099e6:	2007      	movs	r0, #7
100099e8:	4b37      	ldr	r3, [pc, #220]	; (10009ac8 <dmp_enable_feature+0x1e0>)
100099ea:	4798      	blx	r3
        dmp_set_tap_count(1);
100099ec:	2001      	movs	r0, #1
100099ee:	4b37      	ldr	r3, [pc, #220]	; (10009acc <dmp_enable_feature+0x1e4>)
100099f0:	4798      	blx	r3
        dmp_set_tap_time(100);
100099f2:	2064      	movs	r0, #100	; 0x64
100099f4:	4b36      	ldr	r3, [pc, #216]	; (10009ad0 <dmp_enable_feature+0x1e8>)
100099f6:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
100099f8:	20fa      	movs	r0, #250	; 0xfa
100099fa:	0040      	lsls	r0, r0, #1
100099fc:	4b35      	ldr	r3, [pc, #212]	; (10009ad4 <dmp_enable_feature+0x1ec>)
100099fe:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009a00:	21c8      	movs	r1, #200	; 0xc8
10009a02:	4835      	ldr	r0, [pc, #212]	; (10009ad8 <dmp_enable_feature+0x1f0>)
10009a04:	4b35      	ldr	r3, [pc, #212]	; (10009adc <dmp_enable_feature+0x1f4>)
10009a06:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009a08:	2028      	movs	r0, #40	; 0x28
10009a0a:	4b35      	ldr	r3, [pc, #212]	; (10009ae0 <dmp_enable_feature+0x1f8>)
10009a0c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009a0e:	200a      	movs	r0, #10
10009a10:	4b34      	ldr	r3, [pc, #208]	; (10009ae4 <dmp_enable_feature+0x1fc>)
10009a12:	4798      	blx	r3
10009a14:	e007      	b.n	10009a26 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009a16:	aa01      	add	r2, sp, #4
10009a18:	23d8      	movs	r3, #216	; 0xd8
10009a1a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a1c:	2101      	movs	r1, #1
10009a1e:	208b      	movs	r0, #139	; 0x8b
10009a20:	0100      	lsls	r0, r0, #4
10009a22:	4b23      	ldr	r3, [pc, #140]	; (10009ab0 <dmp_enable_feature+0x1c8>)
10009a24:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009a26:	07a3      	lsls	r3, r4, #30
10009a28:	d503      	bpl.n	10009a32 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009a2a:	22d9      	movs	r2, #217	; 0xd9
10009a2c:	ab01      	add	r3, sp, #4
10009a2e:	701a      	strb	r2, [r3, #0]
10009a30:	e002      	b.n	10009a38 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009a32:	22d8      	movs	r2, #216	; 0xd8
10009a34:	ab01      	add	r3, sp, #4
10009a36:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009a38:	aa01      	add	r2, sp, #4
10009a3a:	2101      	movs	r1, #1
10009a3c:	482a      	ldr	r0, [pc, #168]	; (10009ae8 <dmp_enable_feature+0x200>)
10009a3e:	4b1c      	ldr	r3, [pc, #112]	; (10009ab0 <dmp_enable_feature+0x1c8>)
10009a40:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009a42:	0763      	lsls	r3, r4, #29
10009a44:	d503      	bpl.n	10009a4e <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009a46:	2001      	movs	r0, #1
10009a48:	4b28      	ldr	r3, [pc, #160]	; (10009aec <dmp_enable_feature+0x204>)
10009a4a:	4798      	blx	r3
10009a4c:	e002      	b.n	10009a54 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009a4e:	2000      	movs	r0, #0
10009a50:	4b26      	ldr	r3, [pc, #152]	; (10009aec <dmp_enable_feature+0x204>)
10009a52:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009a54:	06e3      	lsls	r3, r4, #27
10009a56:	d503      	bpl.n	10009a60 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009a58:	2001      	movs	r0, #1
10009a5a:	4b25      	ldr	r3, [pc, #148]	; (10009af0 <dmp_enable_feature+0x208>)
10009a5c:	4798      	blx	r3
10009a5e:	e002      	b.n	10009a66 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009a60:	2000      	movs	r0, #0
10009a62:	4b23      	ldr	r3, [pc, #140]	; (10009af0 <dmp_enable_feature+0x208>)
10009a64:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009a66:	2308      	movs	r3, #8
10009a68:	4323      	orrs	r3, r4
10009a6a:	4a22      	ldr	r2, [pc, #136]	; (10009af4 <dmp_enable_feature+0x20c>)
10009a6c:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009a6e:	4b22      	ldr	r3, [pc, #136]	; (10009af8 <dmp_enable_feature+0x210>)
10009a70:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009a72:	2f00      	cmp	r7, #0
10009a74:	d103      	bne.n	10009a7e <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009a76:	2200      	movs	r2, #0
10009a78:	4b1e      	ldr	r3, [pc, #120]	; (10009af4 <dmp_enable_feature+0x20c>)
10009a7a:	739a      	strb	r2, [r3, #14]
10009a7c:	e002      	b.n	10009a84 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009a7e:	2206      	movs	r2, #6
10009a80:	4b1c      	ldr	r3, [pc, #112]	; (10009af4 <dmp_enable_feature+0x20c>)
10009a82:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009a84:	2d00      	cmp	r5, #0
10009a86:	d003      	beq.n	10009a90 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009a88:	4a1a      	ldr	r2, [pc, #104]	; (10009af4 <dmp_enable_feature+0x20c>)
10009a8a:	7b93      	ldrb	r3, [r2, #14]
10009a8c:	3306      	adds	r3, #6
10009a8e:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009a90:	2314      	movs	r3, #20
10009a92:	4223      	tst	r3, r4
10009a94:	d003      	beq.n	10009a9e <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009a96:	4a17      	ldr	r2, [pc, #92]	; (10009af4 <dmp_enable_feature+0x20c>)
10009a98:	7b93      	ldrb	r3, [r2, #14]
10009a9a:	3310      	adds	r3, #16
10009a9c:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009a9e:	2e00      	cmp	r6, #0
10009aa0:	d003      	beq.n	10009aaa <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009aa2:	4a14      	ldr	r2, [pc, #80]	; (10009af4 <dmp_enable_feature+0x20c>)
10009aa4:	7b93      	ldrb	r3, [r2, #14]
10009aa6:	3304      	adds	r3, #4
10009aa8:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009aaa:	2000      	movs	r0, #0
10009aac:	b005      	add	sp, #20
10009aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ab0:	1000935d 	.word	0x1000935d
10009ab4:	00000aa7 	.word	0x00000aa7
10009ab8:	00000ab6 	.word	0x00000ab6
10009abc:	10009815 	.word	0x10009815
10009ac0:	00000aa2 	.word	0x00000aa2
10009ac4:	10009505 	.word	0x10009505
10009ac8:	100096b1 	.word	0x100096b1
10009acc:	100096fd 	.word	0x100096fd
10009ad0:	1000972d 	.word	0x1000972d
10009ad4:	10009759 	.word	0x10009759
10009ad8:	02cae309 	.word	0x02cae309
10009adc:	10009785 	.word	0x10009785
10009ae0:	100097bd 	.word	0x100097bd
10009ae4:	100097e9 	.word	0x100097e9
10009ae8:	0000073d 	.word	0x0000073d
10009aec:	10009861 	.word	0x10009861
10009af0:	100098a5 	.word	0x100098a5
10009af4:	10016970 	.word	0x10016970
10009af8:	10008505 	.word	0x10008505

10009afc <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009afc:	b510      	push	{r4, lr}
10009afe:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009b00:	4809      	ldr	r0, [pc, #36]	; (10009b28 <sms_ble_pair_request_fn+0x2c>)
10009b02:	4b0a      	ldr	r3, [pc, #40]	; (10009b2c <sms_ble_pair_request_fn+0x30>)
10009b04:	4798      	blx	r3
10009b06:	4b0a      	ldr	r3, [pc, #40]	; (10009b30 <sms_ble_pair_request_fn+0x34>)
10009b08:	781a      	ldrb	r2, [r3, #0]
10009b0a:	b2d2      	uxtb	r2, r2
10009b0c:	4b09      	ldr	r3, [pc, #36]	; (10009b34 <sms_ble_pair_request_fn+0x38>)
10009b0e:	781b      	ldrb	r3, [r3, #0]
10009b10:	b2db      	uxtb	r3, r3
10009b12:	4909      	ldr	r1, [pc, #36]	; (10009b38 <sms_ble_pair_request_fn+0x3c>)
10009b14:	7808      	ldrb	r0, [r1, #0]
10009b16:	4909      	ldr	r1, [pc, #36]	; (10009b3c <sms_ble_pair_request_fn+0x40>)
10009b18:	7849      	ldrb	r1, [r1, #1]
10009b1a:	9000      	str	r0, [sp, #0]
10009b1c:	4808      	ldr	r0, [pc, #32]	; (10009b40 <sms_ble_pair_request_fn+0x44>)
10009b1e:	4c09      	ldr	r4, [pc, #36]	; (10009b44 <sms_ble_pair_request_fn+0x48>)
10009b20:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009b22:	2000      	movs	r0, #0
10009b24:	b002      	add	sp, #8
10009b26:	bd10      	pop	{r4, pc}
10009b28:	10014d08 	.word	0x10014d08
10009b2c:	10013b61 	.word	0x10013b61
10009b30:	100185d4 	.word	0x100185d4
10009b34:	10018428 	.word	0x10018428
10009b38:	100185d5 	.word	0x100185d5
10009b3c:	100184c4 	.word	0x100184c4
10009b40:	10014fa0 	.word	0x10014fa0
10009b44:	10013a41 	.word	0x10013a41

10009b48 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009b48:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009b4a:	2001      	movs	r0, #1
10009b4c:	4b08      	ldr	r3, [pc, #32]	; (10009b70 <sms_ble_notification_confirmed_fn+0x28>)
10009b4e:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009b50:	2200      	movs	r2, #0
10009b52:	4b08      	ldr	r3, [pc, #32]	; (10009b74 <sms_ble_notification_confirmed_fn+0x2c>)
10009b54:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009b56:	3222      	adds	r2, #34	; 0x22
10009b58:	4b07      	ldr	r3, [pc, #28]	; (10009b78 <sms_ble_notification_confirmed_fn+0x30>)
10009b5a:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009b5c:	4b07      	ldr	r3, [pc, #28]	; (10009b7c <sms_ble_notification_confirmed_fn+0x34>)
10009b5e:	781b      	ldrb	r3, [r3, #0]
10009b60:	2b00      	cmp	r3, #0
10009b62:	d102      	bne.n	10009b6a <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009b64:	3a21      	subs	r2, #33	; 0x21
10009b66:	4b06      	ldr	r3, [pc, #24]	; (10009b80 <sms_ble_notification_confirmed_fn+0x38>)
10009b68:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009b6a:	2000      	movs	r0, #0
10009b6c:	bd10      	pop	{r4, pc}
10009b6e:	46c0      	nop			; (mov r8, r8)
10009b70:	1000aa75 	.word	0x1000aa75
10009b74:	100185d5 	.word	0x100185d5
10009b78:	100185d4 	.word	0x100185d4
10009b7c:	10018428 	.word	0x10018428
10009b80:	100184bd 	.word	0x100184bd

10009b84 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009b84:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009b86:	2001      	movs	r0, #1
10009b88:	4b08      	ldr	r3, [pc, #32]	; (10009bac <sms_ble_indication_confirmed_fn+0x28>)
10009b8a:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009b8c:	2200      	movs	r2, #0
10009b8e:	4b08      	ldr	r3, [pc, #32]	; (10009bb0 <sms_ble_indication_confirmed_fn+0x2c>)
10009b90:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009b92:	3222      	adds	r2, #34	; 0x22
10009b94:	4b07      	ldr	r3, [pc, #28]	; (10009bb4 <sms_ble_indication_confirmed_fn+0x30>)
10009b96:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009b98:	4b07      	ldr	r3, [pc, #28]	; (10009bb8 <sms_ble_indication_confirmed_fn+0x34>)
10009b9a:	781b      	ldrb	r3, [r3, #0]
10009b9c:	2b00      	cmp	r3, #0
10009b9e:	d102      	bne.n	10009ba6 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009ba0:	3a21      	subs	r2, #33	; 0x21
10009ba2:	4b06      	ldr	r3, [pc, #24]	; (10009bbc <sms_ble_indication_confirmed_fn+0x38>)
10009ba4:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009ba6:	2000      	movs	r0, #0
10009ba8:	bd10      	pop	{r4, pc}
10009baa:	46c0      	nop			; (mov r8, r8)
10009bac:	1000aa75 	.word	0x1000aa75
10009bb0:	100185d5 	.word	0x100185d5
10009bb4:	100185d4 	.word	0x100185d4
10009bb8:	10018428 	.word	0x10018428
10009bbc:	100184bd 	.word	0x100184bd

10009bc0 <sms_ble_power_down>:
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
    sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
10009bc0:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009bc2:	482c      	ldr	r0, [pc, #176]	; (10009c74 <sms_ble_power_down+0xb4>)
10009bc4:	4b2c      	ldr	r3, [pc, #176]	; (10009c78 <sms_ble_power_down+0xb8>)
10009bc6:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009bc8:	4b2c      	ldr	r3, [pc, #176]	; (10009c7c <sms_ble_power_down+0xbc>)
10009bca:	781b      	ldrb	r3, [r3, #0]
10009bcc:	2b00      	cmp	r3, #0
10009bce:	d105      	bne.n	10009bdc <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009bd0:	2201      	movs	r2, #1
10009bd2:	4b2b      	ldr	r3, [pc, #172]	; (10009c80 <sms_ble_power_down+0xc0>)
10009bd4:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009bd6:	4b2b      	ldr	r3, [pc, #172]	; (10009c84 <sms_ble_power_down+0xc4>)
10009bd8:	4798      	blx	r3
10009bda:	e049      	b.n	10009c70 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009bdc:	4b27      	ldr	r3, [pc, #156]	; (10009c7c <sms_ble_power_down+0xbc>)
10009bde:	781b      	ldrb	r3, [r3, #0]
10009be0:	b2db      	uxtb	r3, r3
10009be2:	2b21      	cmp	r3, #33	; 0x21
10009be4:	d030      	beq.n	10009c48 <sms_ble_power_down+0x88>
10009be6:	d802      	bhi.n	10009bee <sms_ble_power_down+0x2e>
10009be8:	2b20      	cmp	r3, #32
10009bea:	d005      	beq.n	10009bf8 <sms_ble_power_down+0x38>
10009bec:	e037      	b.n	10009c5e <sms_ble_power_down+0x9e>
10009bee:	2b22      	cmp	r3, #34	; 0x22
10009bf0:	d017      	beq.n	10009c22 <sms_ble_power_down+0x62>
10009bf2:	2b23      	cmp	r3, #35	; 0x23
10009bf4:	d01b      	beq.n	10009c2e <sms_ble_power_down+0x6e>
10009bf6:	e032      	b.n	10009c5e <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009bf8:	4823      	ldr	r0, [pc, #140]	; (10009c88 <sms_ble_power_down+0xc8>)
10009bfa:	4b24      	ldr	r3, [pc, #144]	; (10009c8c <sms_ble_power_down+0xcc>)
10009bfc:	4798      	blx	r3
10009bfe:	4824      	ldr	r0, [pc, #144]	; (10009c90 <sms_ble_power_down+0xd0>)
10009c00:	4b24      	ldr	r3, [pc, #144]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c02:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009c04:	4b24      	ldr	r3, [pc, #144]	; (10009c98 <sms_ble_power_down+0xd8>)
10009c06:	4798      	blx	r3
10009c08:	2800      	cmp	r0, #0
10009c0a:	d003      	beq.n	10009c14 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009c0c:	4823      	ldr	r0, [pc, #140]	; (10009c9c <sms_ble_power_down+0xdc>)
10009c0e:	4b21      	ldr	r3, [pc, #132]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c10:	4798      	blx	r3
10009c12:	e024      	b.n	10009c5e <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009c14:	4822      	ldr	r0, [pc, #136]	; (10009ca0 <sms_ble_power_down+0xe0>)
10009c16:	4b1f      	ldr	r3, [pc, #124]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c18:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009c1a:	2211      	movs	r2, #17
10009c1c:	4b17      	ldr	r3, [pc, #92]	; (10009c7c <sms_ble_power_down+0xbc>)
10009c1e:	701a      	strb	r2, [r3, #0]
10009c20:	e01d      	b.n	10009c5e <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009c22:	4819      	ldr	r0, [pc, #100]	; (10009c88 <sms_ble_power_down+0xc8>)
10009c24:	4b19      	ldr	r3, [pc, #100]	; (10009c8c <sms_ble_power_down+0xcc>)
10009c26:	4798      	blx	r3
10009c28:	481e      	ldr	r0, [pc, #120]	; (10009ca4 <sms_ble_power_down+0xe4>)
10009c2a:	4b1a      	ldr	r3, [pc, #104]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c2c:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009c2e:	4816      	ldr	r0, [pc, #88]	; (10009c88 <sms_ble_power_down+0xc8>)
10009c30:	4b16      	ldr	r3, [pc, #88]	; (10009c8c <sms_ble_power_down+0xcc>)
10009c32:	4798      	blx	r3
10009c34:	481c      	ldr	r0, [pc, #112]	; (10009ca8 <sms_ble_power_down+0xe8>)
10009c36:	4b17      	ldr	r3, [pc, #92]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c38:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009c3a:	2100      	movs	r1, #0
10009c3c:	2328      	movs	r3, #40	; 0x28
10009c3e:	4a1b      	ldr	r2, [pc, #108]	; (10009cac <sms_ble_power_down+0xec>)
10009c40:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009c42:	2000      	movs	r0, #0
10009c44:	4b1a      	ldr	r3, [pc, #104]	; (10009cb0 <sms_ble_power_down+0xf0>)
10009c46:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009c48:	480f      	ldr	r0, [pc, #60]	; (10009c88 <sms_ble_power_down+0xc8>)
10009c4a:	4b10      	ldr	r3, [pc, #64]	; (10009c8c <sms_ble_power_down+0xcc>)
10009c4c:	4798      	blx	r3
10009c4e:	4819      	ldr	r0, [pc, #100]	; (10009cb4 <sms_ble_power_down+0xf4>)
10009c50:	4b10      	ldr	r3, [pc, #64]	; (10009c94 <sms_ble_power_down+0xd4>)
10009c52:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009c54:	4b18      	ldr	r3, [pc, #96]	; (10009cb8 <sms_ble_power_down+0xf8>)
10009c56:	8818      	ldrh	r0, [r3, #0]
10009c58:	2113      	movs	r1, #19
10009c5a:	4b18      	ldr	r3, [pc, #96]	; (10009cbc <sms_ble_power_down+0xfc>)
10009c5c:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009c5e:	2211      	movs	r2, #17
10009c60:	4b06      	ldr	r3, [pc, #24]	; (10009c7c <sms_ble_power_down+0xbc>)
10009c62:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009c64:	3a0e      	subs	r2, #14
10009c66:	4b16      	ldr	r3, [pc, #88]	; (10009cc0 <sms_ble_power_down+0x100>)
10009c68:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009c6a:	2016      	movs	r0, #22
10009c6c:	4b15      	ldr	r3, [pc, #84]	; (10009cc4 <sms_ble_power_down+0x104>)
10009c6e:	4798      	blx	r3
    }
}
10009c70:	bd10      	pop	{r4, pc}
10009c72:	46c0      	nop			; (mov r8, r8)
10009c74:	10014ff0 	.word	0x10014ff0
10009c78:	1000a1f5 	.word	0x1000a1f5
10009c7c:	100185d4 	.word	0x100185d4
10009c80:	100184bd 	.word	0x100184bd
10009c84:	1000e455 	.word	0x1000e455
10009c88:	10014d08 	.word	0x10014d08
10009c8c:	10013b61 	.word	0x10013b61
10009c90:	10015008 	.word	0x10015008
10009c94:	10013a41 	.word	0x10013a41
10009c98:	1000f565 	.word	0x1000f565
10009c9c:	1001505c 	.word	0x1001505c
10009ca0:	10015068 	.word	0x10015068
10009ca4:	10015070 	.word	0x10015070
10009ca8:	100150c8 	.word	0x100150c8
10009cac:	10018538 	.word	0x10018538
10009cb0:	1000a251 	.word	0x1000a251
10009cb4:	100150f4 	.word	0x100150f4
10009cb8:	100184be 	.word	0x100184be
10009cbc:	1000f591 	.word	0x1000f591
10009cc0:	100185d5 	.word	0x100185d5
10009cc4:	1000a745 	.word	0x1000a745

10009cc8 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009cc8:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009cca:	2211      	movs	r2, #17
10009ccc:	4b05      	ldr	r3, [pc, #20]	; (10009ce4 <sms_ble_adv_report_fn+0x1c>)
10009cce:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009cd0:	4805      	ldr	r0, [pc, #20]	; (10009ce8 <sms_ble_adv_report_fn+0x20>)
10009cd2:	4b06      	ldr	r3, [pc, #24]	; (10009cec <sms_ble_adv_report_fn+0x24>)
10009cd4:	4798      	blx	r3
10009cd6:	4806      	ldr	r0, [pc, #24]	; (10009cf0 <sms_ble_adv_report_fn+0x28>)
10009cd8:	4b06      	ldr	r3, [pc, #24]	; (10009cf4 <sms_ble_adv_report_fn+0x2c>)
10009cda:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009cdc:	4b06      	ldr	r3, [pc, #24]	; (10009cf8 <sms_ble_adv_report_fn+0x30>)
10009cde:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009ce0:	2000      	movs	r0, #0
10009ce2:	bd10      	pop	{r4, pc}
10009ce4:	100185d4 	.word	0x100185d4
10009ce8:	10014d08 	.word	0x10014d08
10009cec:	10013b61 	.word	0x10013b61
10009cf0:	1001512c 	.word	0x1001512c
10009cf4:	10013a41 	.word	0x10013a41
10009cf8:	10009bc1 	.word	0x10009bc1

10009cfc <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009cfc:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009cfe:	4b0a      	ldr	r3, [pc, #40]	; (10009d28 <sms_ble_connected_fn+0x2c>)
10009d00:	781b      	ldrb	r3, [r3, #0]
10009d02:	2b20      	cmp	r3, #32
10009d04:	d10c      	bne.n	10009d20 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009d06:	8902      	ldrh	r2, [r0, #8]
10009d08:	4b08      	ldr	r3, [pc, #32]	; (10009d2c <sms_ble_connected_fn+0x30>)
10009d0a:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009d0c:	2221      	movs	r2, #33	; 0x21
10009d0e:	4b06      	ldr	r3, [pc, #24]	; (10009d28 <sms_ble_connected_fn+0x2c>)
10009d10:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009d12:	4807      	ldr	r0, [pc, #28]	; (10009d30 <sms_ble_connected_fn+0x34>)
10009d14:	4b07      	ldr	r3, [pc, #28]	; (10009d34 <sms_ble_connected_fn+0x38>)
10009d16:	4798      	blx	r3
10009d18:	4807      	ldr	r0, [pc, #28]	; (10009d38 <sms_ble_connected_fn+0x3c>)
10009d1a:	4b08      	ldr	r3, [pc, #32]	; (10009d3c <sms_ble_connected_fn+0x40>)
10009d1c:	4798      	blx	r3
10009d1e:	e001      	b.n	10009d24 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009d20:	4b07      	ldr	r3, [pc, #28]	; (10009d40 <sms_ble_connected_fn+0x44>)
10009d22:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009d24:	2000      	movs	r0, #0
10009d26:	bd10      	pop	{r4, pc}
10009d28:	100185d4 	.word	0x100185d4
10009d2c:	100185ca 	.word	0x100185ca
10009d30:	10014d08 	.word	0x10014d08
10009d34:	10013b61 	.word	0x10013b61
10009d38:	10015160 	.word	0x10015160
10009d3c:	10013a41 	.word	0x10013a41
10009d40:	10009bc1 	.word	0x10009bc1

10009d44 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009d44:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009d46:	4b09      	ldr	r3, [pc, #36]	; (10009d6c <sms_ble_paired_fn+0x28>)
10009d48:	781b      	ldrb	r3, [r3, #0]
10009d4a:	2b21      	cmp	r3, #33	; 0x21
10009d4c:	d10a      	bne.n	10009d64 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
10009d4e:	2222      	movs	r2, #34	; 0x22
10009d50:	4b06      	ldr	r3, [pc, #24]	; (10009d6c <sms_ble_paired_fn+0x28>)
10009d52:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009d54:	4806      	ldr	r0, [pc, #24]	; (10009d70 <sms_ble_paired_fn+0x2c>)
10009d56:	4b07      	ldr	r3, [pc, #28]	; (10009d74 <sms_ble_paired_fn+0x30>)
10009d58:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009d5a:	2101      	movs	r1, #1
10009d5c:	2001      	movs	r0, #1
10009d5e:	4b06      	ldr	r3, [pc, #24]	; (10009d78 <sms_ble_paired_fn+0x34>)
10009d60:	4798      	blx	r3
10009d62:	e001      	b.n	10009d68 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009d64:	4b05      	ldr	r3, [pc, #20]	; (10009d7c <sms_ble_paired_fn+0x38>)
10009d66:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009d68:	2000      	movs	r0, #0
10009d6a:	bd10      	pop	{r4, pc}
10009d6c:	100185d4 	.word	0x100185d4
10009d70:	10015190 	.word	0x10015190
10009d74:	1000a1f5 	.word	0x1000a1f5
10009d78:	1000a2dd 	.word	0x1000a2dd
10009d7c:	10009bc1 	.word	0x10009bc1

10009d80 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009d80:	b510      	push	{r4, lr}
10009d82:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009d84:	2220      	movs	r2, #32
10009d86:	4b17      	ldr	r3, [pc, #92]	; (10009de4 <sms_ble_advertise+0x64>)
10009d88:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009d8a:	4b17      	ldr	r3, [pc, #92]	; (10009de8 <sms_ble_advertise+0x68>)
10009d8c:	4798      	blx	r3
10009d8e:	1e04      	subs	r4, r0, #0
10009d90:	d007      	beq.n	10009da2 <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009d92:	4816      	ldr	r0, [pc, #88]	; (10009dec <sms_ble_advertise+0x6c>)
10009d94:	4b16      	ldr	r3, [pc, #88]	; (10009df0 <sms_ble_advertise+0x70>)
10009d96:	4798      	blx	r3
10009d98:	4816      	ldr	r0, [pc, #88]	; (10009df4 <sms_ble_advertise+0x74>)
10009d9a:	4b17      	ldr	r3, [pc, #92]	; (10009df8 <sms_ble_advertise+0x78>)
10009d9c:	4798      	blx	r3
        return status;
10009d9e:	0020      	movs	r0, r4
10009da0:	e01e      	b.n	10009de0 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009da2:	2300      	movs	r3, #0
10009da4:	9302      	str	r3, [sp, #8]
10009da6:	4b15      	ldr	r3, [pc, #84]	; (10009dfc <sms_ble_advertise+0x7c>)
10009da8:	9301      	str	r3, [sp, #4]
10009daa:	23c8      	movs	r3, #200	; 0xc8
10009dac:	00db      	lsls	r3, r3, #3
10009dae:	9300      	str	r3, [sp, #0]
10009db0:	2300      	movs	r3, #0
10009db2:	2200      	movs	r2, #0
10009db4:	2101      	movs	r1, #1
10009db6:	2000      	movs	r0, #0
10009db8:	4c11      	ldr	r4, [pc, #68]	; (10009e00 <sms_ble_advertise+0x80>)
10009dba:	47a0      	blx	r4
10009dbc:	1e04      	subs	r4, r0, #0
10009dbe:	d107      	bne.n	10009dd0 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009dc0:	480a      	ldr	r0, [pc, #40]	; (10009dec <sms_ble_advertise+0x6c>)
10009dc2:	4b0b      	ldr	r3, [pc, #44]	; (10009df0 <sms_ble_advertise+0x70>)
10009dc4:	4798      	blx	r3
10009dc6:	480f      	ldr	r0, [pc, #60]	; (10009e04 <sms_ble_advertise+0x84>)
10009dc8:	4b0b      	ldr	r3, [pc, #44]	; (10009df8 <sms_ble_advertise+0x78>)
10009dca:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10009dcc:	2000      	movs	r0, #0
10009dce:	e007      	b.n	10009de0 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009dd0:	4806      	ldr	r0, [pc, #24]	; (10009dec <sms_ble_advertise+0x6c>)
10009dd2:	4b07      	ldr	r3, [pc, #28]	; (10009df0 <sms_ble_advertise+0x70>)
10009dd4:	4798      	blx	r3
10009dd6:	0021      	movs	r1, r4
10009dd8:	480b      	ldr	r0, [pc, #44]	; (10009e08 <sms_ble_advertise+0x88>)
10009dda:	4b07      	ldr	r3, [pc, #28]	; (10009df8 <sms_ble_advertise+0x78>)
10009ddc:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
10009dde:	20e2      	movs	r0, #226	; 0xe2
}
10009de0:	b004      	add	sp, #16
10009de2:	bd10      	pop	{r4, pc}
10009de4:	100185d4 	.word	0x100185d4
10009de8:	1000da91 	.word	0x1000da91
10009dec:	10014d08 	.word	0x10014d08
10009df0:	10013b61 	.word	0x10013b61
10009df4:	100151a4 	.word	0x100151a4
10009df8:	10013a41 	.word	0x10013a41
10009dfc:	0000028f 	.word	0x0000028f
10009e00:	1000f429 	.word	0x1000f429
10009e04:	100151d8 	.word	0x100151d8
10009e08:	10015208 	.word	0x10015208

10009e0c <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009e0c:	b530      	push	{r4, r5, lr}
10009e0e:	b083      	sub	sp, #12
10009e10:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
10009e12:	4b1c      	ldr	r3, [pc, #112]	; (10009e84 <sms_ble_disconnected_fn+0x78>)
10009e14:	781b      	ldrb	r3, [r3, #0]
10009e16:	2b22      	cmp	r3, #34	; 0x22
10009e18:	d10a      	bne.n	10009e30 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
10009e1a:	2100      	movs	r1, #0
10009e1c:	3306      	adds	r3, #6
10009e1e:	4a1a      	ldr	r2, [pc, #104]	; (10009e88 <sms_ble_disconnected_fn+0x7c>)
10009e20:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10009e22:	2000      	movs	r0, #0
10009e24:	4b19      	ldr	r3, [pc, #100]	; (10009e8c <sms_ble_disconnected_fn+0x80>)
10009e26:	4798      	blx	r3
        sms_sensors_switch(false, false);
10009e28:	2100      	movs	r1, #0
10009e2a:	2000      	movs	r0, #0
10009e2c:	4b18      	ldr	r3, [pc, #96]	; (10009e90 <sms_ble_disconnected_fn+0x84>)
10009e2e:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
10009e30:	4c14      	ldr	r4, [pc, #80]	; (10009e84 <sms_ble_disconnected_fn+0x78>)
10009e32:	2311      	movs	r3, #17
10009e34:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e36:	4817      	ldr	r0, [pc, #92]	; (10009e94 <sms_ble_disconnected_fn+0x88>)
10009e38:	4b17      	ldr	r3, [pc, #92]	; (10009e98 <sms_ble_disconnected_fn+0x8c>)
10009e3a:	4798      	blx	r3
10009e3c:	7822      	ldrb	r2, [r4, #0]
10009e3e:	b2d2      	uxtb	r2, r2
10009e40:	4b16      	ldr	r3, [pc, #88]	; (10009e9c <sms_ble_disconnected_fn+0x90>)
10009e42:	781b      	ldrb	r3, [r3, #0]
10009e44:	b2db      	uxtb	r3, r3
10009e46:	4916      	ldr	r1, [pc, #88]	; (10009ea0 <sms_ble_disconnected_fn+0x94>)
10009e48:	7808      	ldrb	r0, [r1, #0]
10009e4a:	4916      	ldr	r1, [pc, #88]	; (10009ea4 <sms_ble_disconnected_fn+0x98>)
10009e4c:	7849      	ldrb	r1, [r1, #1]
10009e4e:	9000      	str	r0, [sp, #0]
10009e50:	4815      	ldr	r0, [pc, #84]	; (10009ea8 <sms_ble_disconnected_fn+0x9c>)
10009e52:	4c16      	ldr	r4, [pc, #88]	; (10009eac <sms_ble_disconnected_fn+0xa0>)
10009e54:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009e56:	78ab      	ldrb	r3, [r5, #2]
10009e58:	2b1a      	cmp	r3, #26
10009e5a:	d00b      	beq.n	10009e74 <sms_ble_disconnected_fn+0x68>
10009e5c:	b2da      	uxtb	r2, r3
10009e5e:	2a1a      	cmp	r2, #26
10009e60:	d804      	bhi.n	10009e6c <sms_ble_disconnected_fn+0x60>
10009e62:	2b05      	cmp	r3, #5
10009e64:	d006      	beq.n	10009e74 <sms_ble_disconnected_fn+0x68>
10009e66:	2b08      	cmp	r3, #8
10009e68:	d107      	bne.n	10009e7a <sms_ble_disconnected_fn+0x6e>
10009e6a:	e003      	b.n	10009e74 <sms_ble_disconnected_fn+0x68>
10009e6c:	2b29      	cmp	r3, #41	; 0x29
10009e6e:	d001      	beq.n	10009e74 <sms_ble_disconnected_fn+0x68>
10009e70:	2b3b      	cmp	r3, #59	; 0x3b
10009e72:	d102      	bne.n	10009e7a <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009e74:	4b0e      	ldr	r3, [pc, #56]	; (10009eb0 <sms_ble_disconnected_fn+0xa4>)
10009e76:	4798      	blx	r3
        break;
10009e78:	e001      	b.n	10009e7e <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009e7a:	4b0e      	ldr	r3, [pc, #56]	; (10009eb4 <sms_ble_disconnected_fn+0xa8>)
10009e7c:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009e7e:	2000      	movs	r0, #0
10009e80:	b003      	add	sp, #12
10009e82:	bd30      	pop	{r4, r5, pc}
10009e84:	100185d4 	.word	0x100185d4
10009e88:	10018538 	.word	0x10018538
10009e8c:	1000a251 	.word	0x1000a251
10009e90:	1000a2dd 	.word	0x1000a2dd
10009e94:	10014d08 	.word	0x10014d08
10009e98:	10013b61 	.word	0x10013b61
10009e9c:	10018428 	.word	0x10018428
10009ea0:	100185d5 	.word	0x100185d5
10009ea4:	100184c4 	.word	0x100184c4
10009ea8:	1001524c 	.word	0x1001524c
10009eac:	10013a41 	.word	0x10013a41
10009eb0:	10009d81 	.word	0x10009d81
10009eb4:	10009bc1 	.word	0x10009bc1

10009eb8 <sms_ble_primary_service_define>:
    return status;
}


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10009eb8:	b510      	push	{r4, lr}
10009eba:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10009ebc:	0001      	movs	r1, r0
10009ebe:	3112      	adds	r1, #18
10009ec0:	2301      	movs	r3, #1
10009ec2:	9301      	str	r3, [sp, #4]
10009ec4:	0003      	movs	r3, r0
10009ec6:	3314      	adds	r3, #20
10009ec8:	9300      	str	r3, [sp, #0]
10009eca:	2300      	movs	r3, #0
10009ecc:	2200      	movs	r2, #0
10009ece:	4c02      	ldr	r4, [pc, #8]	; (10009ed8 <sms_ble_primary_service_define+0x20>)
10009ed0:	47a0      	blx	r4
}
10009ed2:	b002      	add	sp, #8
10009ed4:	bd10      	pop	{r4, pc}
10009ed6:	46c0      	nop			; (mov r8, r8)
10009ed8:	1000fced 	.word	0x1000fced

10009edc <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10009edc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ede:	464f      	mov	r7, r9
10009ee0:	4646      	mov	r6, r8
10009ee2:	b4c0      	push	{r6, r7}
10009ee4:	b083      	sub	sp, #12
10009ee6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
10009ee8:	2801      	cmp	r0, #1
10009eea:	d010      	beq.n	10009f0e <sms_ble_service_init+0x32>
10009eec:	2800      	cmp	r0, #0
10009eee:	d002      	beq.n	10009ef6 <sms_ble_service_init+0x1a>
10009ef0:	2802      	cmp	r0, #2
10009ef2:	d019      	beq.n	10009f28 <sms_ble_service_init+0x4c>
10009ef4:	e025      	b.n	10009f42 <sms_ble_service_init+0x66>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
10009ef6:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
10009ef8:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
10009efa:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10009efc:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
10009efe:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10009f00:	231c      	movs	r3, #28
10009f02:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10009f04:	333b      	adds	r3, #59	; 0x3b
10009f06:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
10009f08:	3b56      	subs	r3, #86	; 0x56
10009f0a:	9301      	str	r3, [sp, #4]
10009f0c:	e022      	b.n	10009f54 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
10009f0e:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
10009f10:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
10009f12:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10009f14:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009f16:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10009f18:	231c      	movs	r3, #28
10009f1a:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10009f1c:	333b      	adds	r3, #59	; 0x3b
10009f1e:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
10009f20:	3b4f      	subs	r3, #79	; 0x4f
10009f22:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
10009f24:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
10009f26:	e015      	b.n	10009f54 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
10009f28:	2411      	movs	r4, #17
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
10009f2a:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
10009f2c:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10009f2e:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
10009f30:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10009f32:	231c      	movs	r3, #28
10009f34:	4698      	mov	r8, r3
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10009f36:	333b      	adds	r3, #59	; 0x3b
10009f38:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
10009f3a:	3b43      	subs	r3, #67	; 0x43
10009f3c:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
10009f3e:	3b11      	subs	r3, #17
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
        break;
10009f40:	e008      	b.n	10009f54 <sms_ble_service_init+0x78>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10009f42:	2400      	movs	r4, #0
10009f44:	2500      	movs	r5, #0
10009f46:	2600      	movs	r6, #0
10009f48:	2700      	movs	r7, #0
10009f4a:	2000      	movs	r0, #0
10009f4c:	2300      	movs	r3, #0
10009f4e:	4698      	mov	r8, r3
10009f50:	4699      	mov	r9, r3
    uint8_t char_size = 0;
10009f52:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10009f54:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
10009f56:	2302      	movs	r3, #2
10009f58:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10009f5a:	2300      	movs	r3, #0
10009f5c:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10009f5e:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10009f60:	464a      	mov	r2, r9
10009f62:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10009f64:	4642      	mov	r2, r8
10009f66:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10009f68:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
10009f6a:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10009f6c:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10009f6e:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10009f70:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10009f72:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10009f74:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10009f76:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
10009f78:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
10009f7a:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
10009f7c:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10009f7e:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10009f80:	2412      	movs	r4, #18
10009f82:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10009f84:	4662      	mov	r2, ip
10009f86:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10009f88:	466a      	mov	r2, sp
10009f8a:	8892      	ldrh	r2, [r2, #4]
10009f8c:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10009f8e:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10009f90:	2011      	movs	r0, #17
10009f92:	2234      	movs	r2, #52	; 0x34
10009f94:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10009f96:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
10009f98:	2200      	movs	r2, #0
10009f9a:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
10009f9c:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10009f9e:	3033      	adds	r0, #51	; 0x33
10009fa0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10009fa2:	3001      	adds	r0, #1
10009fa4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10009fa6:	3001      	adds	r0, #1
10009fa8:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
10009faa:	2248      	movs	r2, #72	; 0x48
10009fac:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10009fae:	3202      	adds	r2, #2
10009fb0:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10009fb2:	3202      	adds	r2, #2
10009fb4:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10009fb6:	640b      	str	r3, [r1, #64]	; 0x40
10009fb8:	b003      	add	sp, #12
10009fba:	bc0c      	pop	{r2, r3}
10009fbc:	4690      	mov	r8, r2
10009fbe:	4699      	mov	r9, r3
10009fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009fc2:	46c0      	nop			; (mov r8, r8)

10009fc4 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10009fc4:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
10009fc6:	2201      	movs	r2, #1
10009fc8:	4b04      	ldr	r3, [pc, #16]	; (10009fdc <sms_button_bt0_callback+0x18>)
10009fca:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10009fcc:	4b04      	ldr	r3, [pc, #16]	; (10009fe0 <sms_button_bt0_callback+0x1c>)
10009fce:	7858      	ldrb	r0, [r3, #1]
10009fd0:	2300      	movs	r3, #0
10009fd2:	2200      	movs	r2, #0
10009fd4:	2102      	movs	r1, #2
10009fd6:	4c03      	ldr	r4, [pc, #12]	; (10009fe4 <sms_button_bt0_callback+0x20>)
10009fd8:	47a0      	blx	r4
}
10009fda:	bd10      	pop	{r4, pc}
10009fdc:	100185bc 	.word	0x100185bc
10009fe0:	10018424 	.word	0x10018424
10009fe4:	1000e189 	.word	0x1000e189

10009fe8 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10009fe8:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
10009fea:	2202      	movs	r2, #2
10009fec:	4b04      	ldr	r3, [pc, #16]	; (1000a000 <sms_button_bt1_callback+0x18>)
10009fee:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10009ff0:	4b04      	ldr	r3, [pc, #16]	; (1000a004 <sms_button_bt1_callback+0x1c>)
10009ff2:	7858      	ldrb	r0, [r3, #1]
10009ff4:	2300      	movs	r3, #0
10009ff6:	2200      	movs	r2, #0
10009ff8:	2102      	movs	r1, #2
10009ffa:	4c03      	ldr	r4, [pc, #12]	; (1000a008 <sms_button_bt1_callback+0x20>)
10009ffc:	47a0      	blx	r4
}
10009ffe:	bd10      	pop	{r4, pc}
1000a000:	100185bc 	.word	0x100185bc
1000a004:	100184c0 	.word	0x100184c0
1000a008:	1000e189 	.word	0x1000e189

1000a00c <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a00c:	b510      	push	{r4, lr}
1000a00e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a010:	ac01      	add	r4, sp, #4
1000a012:	0020      	movs	r0, r4
1000a014:	4b20      	ldr	r3, [pc, #128]	; (1000a098 <sms_button_configure_gpio+0x8c>)
1000a016:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a018:	2300      	movs	r3, #0
1000a01a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a01c:	3302      	adds	r3, #2
1000a01e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a020:	3b01      	subs	r3, #1
1000a022:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a024:	4b1d      	ldr	r3, [pc, #116]	; (1000a09c <sms_button_configure_gpio+0x90>)
1000a026:	7858      	ldrb	r0, [r3, #1]
1000a028:	0021      	movs	r1, r4
1000a02a:	4b1d      	ldr	r3, [pc, #116]	; (1000a0a0 <sms_button_configure_gpio+0x94>)
1000a02c:	4798      	blx	r3
1000a02e:	2800      	cmp	r0, #0
1000a030:	d005      	beq.n	1000a03e <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a032:	481c      	ldr	r0, [pc, #112]	; (1000a0a4 <sms_button_configure_gpio+0x98>)
1000a034:	4b1c      	ldr	r3, [pc, #112]	; (1000a0a8 <sms_button_configure_gpio+0x9c>)
1000a036:	4798      	blx	r3
1000a038:	481c      	ldr	r0, [pc, #112]	; (1000a0ac <sms_button_configure_gpio+0xa0>)
1000a03a:	4b1d      	ldr	r3, [pc, #116]	; (1000a0b0 <sms_button_configure_gpio+0xa4>)
1000a03c:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a03e:	ac01      	add	r4, sp, #4
1000a040:	0020      	movs	r0, r4
1000a042:	4b15      	ldr	r3, [pc, #84]	; (1000a098 <sms_button_configure_gpio+0x8c>)
1000a044:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a046:	2300      	movs	r3, #0
1000a048:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a04a:	3302      	adds	r3, #2
1000a04c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a04e:	3b01      	subs	r3, #1
1000a050:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a052:	4b18      	ldr	r3, [pc, #96]	; (1000a0b4 <sms_button_configure_gpio+0xa8>)
1000a054:	7858      	ldrb	r0, [r3, #1]
1000a056:	0021      	movs	r1, r4
1000a058:	4b11      	ldr	r3, [pc, #68]	; (1000a0a0 <sms_button_configure_gpio+0x94>)
1000a05a:	4798      	blx	r3
1000a05c:	2800      	cmp	r0, #0
1000a05e:	d005      	beq.n	1000a06c <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a060:	4810      	ldr	r0, [pc, #64]	; (1000a0a4 <sms_button_configure_gpio+0x98>)
1000a062:	4b11      	ldr	r3, [pc, #68]	; (1000a0a8 <sms_button_configure_gpio+0x9c>)
1000a064:	4798      	blx	r3
1000a066:	4814      	ldr	r0, [pc, #80]	; (1000a0b8 <sms_button_configure_gpio+0xac>)
1000a068:	4b11      	ldr	r3, [pc, #68]	; (1000a0b0 <sms_button_configure_gpio+0xa4>)
1000a06a:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a06c:	ac01      	add	r4, sp, #4
1000a06e:	0020      	movs	r0, r4
1000a070:	4b09      	ldr	r3, [pc, #36]	; (1000a098 <sms_button_configure_gpio+0x8c>)
1000a072:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a074:	2300      	movs	r3, #0
1000a076:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a078:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a07a:	0021      	movs	r1, r4
1000a07c:	2017      	movs	r0, #23
1000a07e:	4b08      	ldr	r3, [pc, #32]	; (1000a0a0 <sms_button_configure_gpio+0x94>)
1000a080:	4798      	blx	r3
1000a082:	2800      	cmp	r0, #0
1000a084:	d005      	beq.n	1000a092 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a086:	4807      	ldr	r0, [pc, #28]	; (1000a0a4 <sms_button_configure_gpio+0x98>)
1000a088:	4b07      	ldr	r3, [pc, #28]	; (1000a0a8 <sms_button_configure_gpio+0x9c>)
1000a08a:	4798      	blx	r3
1000a08c:	480b      	ldr	r0, [pc, #44]	; (1000a0bc <sms_button_configure_gpio+0xb0>)
1000a08e:	4b08      	ldr	r3, [pc, #32]	; (1000a0b0 <sms_button_configure_gpio+0xa4>)
1000a090:	4798      	blx	r3
    }
}
1000a092:	b002      	add	sp, #8
1000a094:	bd10      	pop	{r4, pc}
1000a096:	46c0      	nop			; (mov r8, r8)
1000a098:	1000b115 	.word	0x1000b115
1000a09c:	10018424 	.word	0x10018424
1000a0a0:	1000b125 	.word	0x1000b125
1000a0a4:	10014d08 	.word	0x10014d08
1000a0a8:	10013b61 	.word	0x10013b61
1000a0ac:	10015320 	.word	0x10015320
1000a0b0:	10013a41 	.word	0x10013a41
1000a0b4:	100184c0 	.word	0x100184c0
1000a0b8:	10015358 	.word	0x10015358
1000a0bc:	10015390 	.word	0x10015390

1000a0c0 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a0c0:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a0c2:	4b06      	ldr	r3, [pc, #24]	; (1000a0dc <sms_button_register_callbacks+0x1c>)
1000a0c4:	7858      	ldrb	r0, [r3, #1]
1000a0c6:	2202      	movs	r2, #2
1000a0c8:	4905      	ldr	r1, [pc, #20]	; (1000a0e0 <sms_button_register_callbacks+0x20>)
1000a0ca:	4c06      	ldr	r4, [pc, #24]	; (1000a0e4 <sms_button_register_callbacks+0x24>)
1000a0cc:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a0ce:	4b06      	ldr	r3, [pc, #24]	; (1000a0e8 <sms_button_register_callbacks+0x28>)
1000a0d0:	7858      	ldrb	r0, [r3, #1]
1000a0d2:	2202      	movs	r2, #2
1000a0d4:	4905      	ldr	r1, [pc, #20]	; (1000a0ec <sms_button_register_callbacks+0x2c>)
1000a0d6:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a0d8:	bd10      	pop	{r4, pc}
1000a0da:	46c0      	nop			; (mov r8, r8)
1000a0dc:	10018424 	.word	0x10018424
1000a0e0:	10009fc5 	.word	0x10009fc5
1000a0e4:	1000b4b5 	.word	0x1000b4b5
1000a0e8:	100184c0 	.word	0x100184c0
1000a0ec:	10009fe9 	.word	0x10009fe9

1000a0f0 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a0f0:	b510      	push	{r4, lr}
1000a0f2:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a0f4:	2800      	cmp	r0, #0
1000a0f6:	d104      	bne.n	1000a102 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a0f8:	4b0c      	ldr	r3, [pc, #48]	; (1000a12c <sms_button_toggle_interrupt+0x3c>)
1000a0fa:	7858      	ldrb	r0, [r3, #1]
1000a0fc:	4b0c      	ldr	r3, [pc, #48]	; (1000a130 <sms_button_toggle_interrupt+0x40>)
1000a0fe:	4798      	blx	r3
1000a100:	e005      	b.n	1000a10e <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a102:	2801      	cmp	r0, #1
1000a104:	d103      	bne.n	1000a10e <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a106:	4b09      	ldr	r3, [pc, #36]	; (1000a12c <sms_button_toggle_interrupt+0x3c>)
1000a108:	7858      	ldrb	r0, [r3, #1]
1000a10a:	4b0a      	ldr	r3, [pc, #40]	; (1000a134 <sms_button_toggle_interrupt+0x44>)
1000a10c:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a10e:	2c00      	cmp	r4, #0
1000a110:	d104      	bne.n	1000a11c <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a112:	4b09      	ldr	r3, [pc, #36]	; (1000a138 <sms_button_toggle_interrupt+0x48>)
1000a114:	7858      	ldrb	r0, [r3, #1]
1000a116:	4b06      	ldr	r3, [pc, #24]	; (1000a130 <sms_button_toggle_interrupt+0x40>)
1000a118:	4798      	blx	r3
1000a11a:	e005      	b.n	1000a128 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a11c:	2c01      	cmp	r4, #1
1000a11e:	d103      	bne.n	1000a128 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a120:	4b05      	ldr	r3, [pc, #20]	; (1000a138 <sms_button_toggle_interrupt+0x48>)
1000a122:	7858      	ldrb	r0, [r3, #1]
1000a124:	4b03      	ldr	r3, [pc, #12]	; (1000a134 <sms_button_toggle_interrupt+0x44>)
1000a126:	4798      	blx	r3
    }
}
1000a128:	bd10      	pop	{r4, pc}
1000a12a:	46c0      	nop			; (mov r8, r8)
1000a12c:	10018424 	.word	0x10018424
1000a130:	1000b585 	.word	0x1000b585
1000a134:	1000b5e1 	.word	0x1000b5e1
1000a138:	100184c0 	.word	0x100184c0

1000a13c <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a13c:	b510      	push	{r4, lr}
1000a13e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a140:	466b      	mov	r3, sp
1000a142:	1dda      	adds	r2, r3, #7
1000a144:	2300      	movs	r3, #0
1000a146:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a148:	4c0d      	ldr	r4, [pc, #52]	; (1000a180 <sms_button_define_services+0x44>)
1000a14a:	0021      	movs	r1, r4
1000a14c:	2000      	movs	r0, #0
1000a14e:	4b0d      	ldr	r3, [pc, #52]	; (1000a184 <sms_button_define_services+0x48>)
1000a150:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a152:	0020      	movs	r0, r4
1000a154:	4b0c      	ldr	r3, [pc, #48]	; (1000a188 <sms_button_define_services+0x4c>)
1000a156:	4798      	blx	r3
1000a158:	1e04      	subs	r4, r0, #0
1000a15a:	d007      	beq.n	1000a16c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a15c:	480b      	ldr	r0, [pc, #44]	; (1000a18c <sms_button_define_services+0x50>)
1000a15e:	4b0c      	ldr	r3, [pc, #48]	; (1000a190 <sms_button_define_services+0x54>)
1000a160:	4798      	blx	r3
1000a162:	0021      	movs	r1, r4
1000a164:	480b      	ldr	r0, [pc, #44]	; (1000a194 <sms_button_define_services+0x58>)
1000a166:	4b0c      	ldr	r3, [pc, #48]	; (1000a198 <sms_button_define_services+0x5c>)
1000a168:	4798      	blx	r3
1000a16a:	e007      	b.n	1000a17c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a16c:	4807      	ldr	r0, [pc, #28]	; (1000a18c <sms_button_define_services+0x50>)
1000a16e:	4b08      	ldr	r3, [pc, #32]	; (1000a190 <sms_button_define_services+0x54>)
1000a170:	4798      	blx	r3
1000a172:	4b0a      	ldr	r3, [pc, #40]	; (1000a19c <sms_button_define_services+0x60>)
1000a174:	8ad9      	ldrh	r1, [r3, #22]
1000a176:	480a      	ldr	r0, [pc, #40]	; (1000a1a0 <sms_button_define_services+0x64>)
1000a178:	4b07      	ldr	r3, [pc, #28]	; (1000a198 <sms_button_define_services+0x5c>)
1000a17a:	4798      	blx	r3
    }
1000a17c:	b002      	add	sp, #8
1000a17e:	bd10      	pop	{r4, pc}
1000a180:	100184c8 	.word	0x100184c8
1000a184:	10009edd 	.word	0x10009edd
1000a188:	10009eb9 	.word	0x10009eb9
1000a18c:	10014d08 	.word	0x10014d08
1000a190:	10013b61 	.word	0x10013b61
1000a194:	100154c8 	.word	0x100154c8
1000a198:	10013a41 	.word	0x10013a41
1000a19c:	100184c4 	.word	0x100184c4
1000a1a0:	1001550c 	.word	0x1001550c

1000a1a4 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a1a4:	b510      	push	{r4, lr}
1000a1a6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a1a8:	ac01      	add	r4, sp, #4
1000a1aa:	0020      	movs	r0, r4
1000a1ac:	4b0a      	ldr	r3, [pc, #40]	; (1000a1d8 <sms_monitor_configure_gpio+0x34>)
1000a1ae:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a1b0:	2301      	movs	r3, #1
1000a1b2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a1b4:	0021      	movs	r1, r4
1000a1b6:	2002      	movs	r0, #2
1000a1b8:	4b08      	ldr	r3, [pc, #32]	; (1000a1dc <sms_monitor_configure_gpio+0x38>)
1000a1ba:	4798      	blx	r3
1000a1bc:	2800      	cmp	r0, #0
1000a1be:	d005      	beq.n	1000a1cc <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a1c0:	4807      	ldr	r0, [pc, #28]	; (1000a1e0 <sms_monitor_configure_gpio+0x3c>)
1000a1c2:	4b08      	ldr	r3, [pc, #32]	; (1000a1e4 <sms_monitor_configure_gpio+0x40>)
1000a1c4:	4798      	blx	r3
1000a1c6:	4808      	ldr	r0, [pc, #32]	; (1000a1e8 <sms_monitor_configure_gpio+0x44>)
1000a1c8:	4b08      	ldr	r3, [pc, #32]	; (1000a1ec <sms_monitor_configure_gpio+0x48>)
1000a1ca:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a1cc:	2100      	movs	r1, #0
1000a1ce:	2002      	movs	r0, #2
1000a1d0:	4b07      	ldr	r3, [pc, #28]	; (1000a1f0 <sms_monitor_configure_gpio+0x4c>)
1000a1d2:	4798      	blx	r3
}
1000a1d4:	b002      	add	sp, #8
1000a1d6:	bd10      	pop	{r4, pc}
1000a1d8:	1000b115 	.word	0x1000b115
1000a1dc:	1000b125 	.word	0x1000b125
1000a1e0:	10014d08 	.word	0x10014d08
1000a1e4:	10013b61 	.word	0x10013b61
1000a1e8:	10015554 	.word	0x10015554
1000a1ec:	10013a41 	.word	0x10013a41
1000a1f0:	1000b2dd 	.word	0x1000b2dd

1000a1f4 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a1f4:	b570      	push	{r4, r5, r6, lr}
1000a1f6:	b084      	sub	sp, #16
1000a1f8:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a1fa:	480c      	ldr	r0, [pc, #48]	; (1000a22c <sms_monitor_get_states+0x38>)
1000a1fc:	4b0c      	ldr	r3, [pc, #48]	; (1000a230 <sms_monitor_get_states+0x3c>)
1000a1fe:	4798      	blx	r3
1000a200:	4b0c      	ldr	r3, [pc, #48]	; (1000a234 <sms_monitor_get_states+0x40>)
1000a202:	7819      	ldrb	r1, [r3, #0]
1000a204:	4b0c      	ldr	r3, [pc, #48]	; (1000a238 <sms_monitor_get_states+0x44>)
1000a206:	7818      	ldrb	r0, [r3, #0]
1000a208:	4b0c      	ldr	r3, [pc, #48]	; (1000a23c <sms_monitor_get_states+0x48>)
1000a20a:	781d      	ldrb	r5, [r3, #0]
1000a20c:	4b0c      	ldr	r3, [pc, #48]	; (1000a240 <sms_monitor_get_states+0x4c>)
1000a20e:	781e      	ldrb	r6, [r3, #0]
1000a210:	4a0c      	ldr	r2, [pc, #48]	; (1000a244 <sms_monitor_get_states+0x50>)
1000a212:	7853      	ldrb	r3, [r2, #1]
1000a214:	7812      	ldrb	r2, [r2, #0]
1000a216:	9603      	str	r6, [sp, #12]
1000a218:	9502      	str	r5, [sp, #8]
1000a21a:	9001      	str	r0, [sp, #4]
1000a21c:	9100      	str	r1, [sp, #0]
1000a21e:	0021      	movs	r1, r4
1000a220:	4809      	ldr	r0, [pc, #36]	; (1000a248 <sms_monitor_get_states+0x54>)
1000a222:	4c0a      	ldr	r4, [pc, #40]	; (1000a24c <sms_monitor_get_states+0x58>)
1000a224:	47a0      	blx	r4
}
1000a226:	b004      	add	sp, #16
1000a228:	bd70      	pop	{r4, r5, r6, pc}
1000a22a:	46c0      	nop			; (mov r8, r8)
1000a22c:	10014d08 	.word	0x10014d08
1000a230:	10013b61 	.word	0x10013b61
1000a234:	100185d4 	.word	0x100185d4
1000a238:	10018428 	.word	0x10018428
1000a23c:	100185d5 	.word	0x100185d5
1000a240:	100184bc 	.word	0x100184bc
1000a244:	100184c4 	.word	0x100184c4
1000a248:	10015574 	.word	0x10015574
1000a24c:	10013a41 	.word	0x10013a41

1000a250 <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a250:	b510      	push	{r4, lr}
1000a252:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a254:	2800      	cmp	r0, #0
1000a256:	d007      	beq.n	1000a268 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000a258:	2102      	movs	r1, #2
1000a25a:	2330      	movs	r3, #48	; 0x30
1000a25c:	4a15      	ldr	r2, [pc, #84]	; (1000a2b4 <sms_sensors_interrupt_toggle+0x64>)
1000a25e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000a260:	201e      	movs	r0, #30
1000a262:	4b15      	ldr	r3, [pc, #84]	; (1000a2b8 <sms_sensors_interrupt_toggle+0x68>)
1000a264:	4798      	blx	r3
1000a266:	e006      	b.n	1000a276 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000a268:	2100      	movs	r1, #0
1000a26a:	2330      	movs	r3, #48	; 0x30
1000a26c:	4a11      	ldr	r2, [pc, #68]	; (1000a2b4 <sms_sensors_interrupt_toggle+0x64>)
1000a26e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000a270:	201e      	movs	r0, #30
1000a272:	4b12      	ldr	r3, [pc, #72]	; (1000a2bc <sms_sensors_interrupt_toggle+0x6c>)
1000a274:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000a276:	2c00      	cmp	r4, #0
1000a278:	d010      	beq.n	1000a29c <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000a27a:	4b11      	ldr	r3, [pc, #68]	; (1000a2c0 <sms_sensors_interrupt_toggle+0x70>)
1000a27c:	2103      	movs	r1, #3
1000a27e:	2225      	movs	r2, #37	; 0x25
1000a280:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000a282:	3901      	subs	r1, #1
1000a284:	3203      	adds	r2, #3
1000a286:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a288:	2100      	movs	r1, #0
1000a28a:	480e      	ldr	r0, [pc, #56]	; (1000a2c4 <sms_sensors_interrupt_toggle+0x74>)
1000a28c:	4b0e      	ldr	r3, [pc, #56]	; (1000a2c8 <sms_sensors_interrupt_toggle+0x78>)
1000a28e:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a290:	4b0e      	ldr	r3, [pc, #56]	; (1000a2cc <sms_sensors_interrupt_toggle+0x7c>)
1000a292:	4798      	blx	r3
        sensors_active = true;
1000a294:	2201      	movs	r2, #1
1000a296:	4b0e      	ldr	r3, [pc, #56]	; (1000a2d0 <sms_sensors_interrupt_toggle+0x80>)
1000a298:	701a      	strb	r2, [r3, #0]
1000a29a:	e00a      	b.n	1000a2b2 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000a29c:	2102      	movs	r1, #2
1000a29e:	2325      	movs	r3, #37	; 0x25
1000a2a0:	4a07      	ldr	r2, [pc, #28]	; (1000a2c0 <sms_sensors_interrupt_toggle+0x70>)
1000a2a2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000a2a4:	4b0b      	ldr	r3, [pc, #44]	; (1000a2d4 <sms_sensors_interrupt_toggle+0x84>)
1000a2a6:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000a2a8:	4b0b      	ldr	r3, [pc, #44]	; (1000a2d8 <sms_sensors_interrupt_toggle+0x88>)
1000a2aa:	4798      	blx	r3
        sensors_active = false;
1000a2ac:	2200      	movs	r2, #0
1000a2ae:	4b08      	ldr	r3, [pc, #32]	; (1000a2d0 <sms_sensors_interrupt_toggle+0x80>)
1000a2b0:	701a      	strb	r2, [r3, #0]
    }
}
1000a2b2:	bd10      	pop	{r4, pc}
1000a2b4:	1001842c 	.word	0x1001842c
1000a2b8:	1000b585 	.word	0x1000b585
1000a2bc:	1000b5e1 	.word	0x1000b5e1
1000a2c0:	10018538 	.word	0x10018538
1000a2c4:	00000cc6 	.word	0x00000cc6
1000a2c8:	1000a951 	.word	0x1000a951
1000a2cc:	1000a985 	.word	0x1000a985
1000a2d0:	100185c8 	.word	0x100185c8
1000a2d4:	1000a979 	.word	0x1000a979
1000a2d8:	1000a9a5 	.word	0x1000a9a5

1000a2dc <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a2dc:	b510      	push	{r4, lr}
1000a2de:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a2e0:	2800      	cmp	r0, #0
1000a2e2:	d016      	beq.n	1000a312 <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000a2e4:	4b15      	ldr	r3, [pc, #84]	; (1000a33c <sms_sensors_switch+0x60>)
1000a2e6:	4798      	blx	r3
1000a2e8:	2800      	cmp	r0, #0
1000a2ea:	d00a      	beq.n	1000a302 <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000a2ec:	4814      	ldr	r0, [pc, #80]	; (1000a340 <sms_sensors_switch+0x64>)
1000a2ee:	4b15      	ldr	r3, [pc, #84]	; (1000a344 <sms_sensors_switch+0x68>)
1000a2f0:	4798      	blx	r3
1000a2f2:	4815      	ldr	r0, [pc, #84]	; (1000a348 <sms_sensors_switch+0x6c>)
1000a2f4:	4b15      	ldr	r3, [pc, #84]	; (1000a34c <sms_sensors_switch+0x70>)
1000a2f6:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000a2f8:	2100      	movs	r1, #0
1000a2fa:	2006      	movs	r0, #6
1000a2fc:	4b14      	ldr	r3, [pc, #80]	; (1000a350 <sms_sensors_switch+0x74>)
1000a2fe:	4798      	blx	r3
1000a300:	e00b      	b.n	1000a31a <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000a302:	2201      	movs	r2, #1
1000a304:	4b13      	ldr	r3, [pc, #76]	; (1000a354 <sms_sensors_switch+0x78>)
1000a306:	711a      	strb	r2, [r3, #4]
            sms_sensors_interrupt_toggle(true, false);
1000a308:	2100      	movs	r1, #0
1000a30a:	2001      	movs	r0, #1
1000a30c:	4b12      	ldr	r3, [pc, #72]	; (1000a358 <sms_sensors_switch+0x7c>)
1000a30e:	4798      	blx	r3
1000a310:	e003      	b.n	1000a31a <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000a312:	2100      	movs	r1, #0
1000a314:	2006      	movs	r0, #6
1000a316:	4b0e      	ldr	r3, [pc, #56]	; (1000a350 <sms_sensors_switch+0x74>)
1000a318:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000a31a:	2c00      	cmp	r4, #0
1000a31c:	d009      	beq.n	1000a332 <sms_sensors_switch+0x56>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000a31e:	4b0f      	ldr	r3, [pc, #60]	; (1000a35c <sms_sensors_switch+0x80>)
1000a320:	2101      	movs	r1, #1
1000a322:	2225      	movs	r2, #37	; 0x25
1000a324:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
1000a326:	2200      	movs	r2, #0
1000a328:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
1000a32a:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000a32c:	4b0c      	ldr	r3, [pc, #48]	; (1000a360 <sms_sensors_switch+0x84>)
1000a32e:	4798      	blx	r3
1000a330:	e003      	b.n	1000a33a <sms_sensors_switch+0x5e>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000a332:	2100      	movs	r1, #0
1000a334:	2007      	movs	r0, #7
1000a336:	4b06      	ldr	r3, [pc, #24]	; (1000a350 <sms_sensors_switch+0x74>)
1000a338:	4798      	blx	r3
    }
}
1000a33a:	bd10      	pop	{r4, pc}
1000a33c:	1000a589 	.word	0x1000a589
1000a340:	10014d08 	.word	0x10014d08
1000a344:	10013b61 	.word	0x10013b61
1000a348:	100155b4 	.word	0x100155b4
1000a34c:	10013a41 	.word	0x10013a41
1000a350:	1000b2dd 	.word	0x1000b2dd
1000a354:	1001842c 	.word	0x1001842c
1000a358:	1000a251 	.word	0x1000a251
1000a35c:	10018538 	.word	0x10018538
1000a360:	1000a7b9 	.word	0x1000a7b9

1000a364 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a364:	b530      	push	{r4, r5, lr}
1000a366:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a368:	2010      	movs	r0, #16
1000a36a:	4c14      	ldr	r4, [pc, #80]	; (1000a3bc <sms_i2c_master_configure+0x58>)
1000a36c:	47a0      	blx	r4
1000a36e:	4b14      	ldr	r3, [pc, #80]	; (1000a3c0 <sms_i2c_master_configure+0x5c>)
1000a370:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a372:	2010      	movs	r0, #16
1000a374:	47a0      	blx	r4
1000a376:	4b13      	ldr	r3, [pc, #76]	; (1000a3c4 <sms_i2c_master_configure+0x60>)
1000a378:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a37a:	ac01      	add	r4, sp, #4
1000a37c:	0020      	movs	r0, r4
1000a37e:	4b12      	ldr	r3, [pc, #72]	; (1000a3c8 <sms_i2c_master_configure+0x64>)
1000a380:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a382:	2301      	movs	r3, #1
1000a384:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a386:	3381      	adds	r3, #129	; 0x81
1000a388:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a38a:	3b74      	subs	r3, #116	; 0x74
1000a38c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a38e:	3301      	adds	r3, #1
1000a390:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a392:	3b0b      	subs	r3, #11
1000a394:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a396:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a398:	4d0c      	ldr	r5, [pc, #48]	; (1000a3cc <sms_i2c_master_configure+0x68>)
1000a39a:	4c0d      	ldr	r4, [pc, #52]	; (1000a3d0 <sms_i2c_master_configure+0x6c>)
1000a39c:	aa01      	add	r2, sp, #4
1000a39e:	490d      	ldr	r1, [pc, #52]	; (1000a3d4 <sms_i2c_master_configure+0x70>)
1000a3a0:	0028      	movs	r0, r5
1000a3a2:	47a0      	blx	r4
1000a3a4:	2800      	cmp	r0, #0
1000a3a6:	d1f9      	bne.n	1000a39c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a3a8:	4b08      	ldr	r3, [pc, #32]	; (1000a3cc <sms_i2c_master_configure+0x68>)
1000a3aa:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a3ac:	2128      	movs	r1, #40	; 0x28
1000a3ae:	5c53      	ldrb	r3, [r2, r1]
1000a3b0:	07db      	lsls	r3, r3, #31
1000a3b2:	d4fc      	bmi.n	1000a3ae <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a3b4:	2301      	movs	r3, #1
1000a3b6:	7513      	strb	r3, [r2, #20]
}
1000a3b8:	b007      	add	sp, #28
1000a3ba:	bd30      	pop	{r4, r5, pc}
1000a3bc:	100138b5 	.word	0x100138b5
1000a3c0:	100185dc 	.word	0x100185dc
1000a3c4:	100185c0 	.word	0x100185c0
1000a3c8:	10008369 	.word	0x10008369
1000a3cc:	100185cc 	.word	0x100185cc
1000a3d0:	10008381 	.word	0x10008381
1000a3d4:	40003400 	.word	0x40003400

1000a3d8 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a3da:	4c12      	ldr	r4, [pc, #72]	; (1000a424 <sms_i2c_master_write+0x4c>)
1000a3dc:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a3de:	1c50      	adds	r0, r2, #1
1000a3e0:	b2c0      	uxtb	r0, r0
1000a3e2:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a3e4:	6860      	ldr	r0, [r4, #4]
1000a3e6:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a3e8:	2a00      	cmp	r2, #0
1000a3ea:	d00e      	beq.n	1000a40a <sms_i2c_master_write+0x32>
1000a3ec:	2000      	movs	r0, #0
1000a3ee:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a3f0:	5c18      	ldrb	r0, [r3, r0]
1000a3f2:	6865      	ldr	r5, [r4, #4]
1000a3f4:	5468      	strb	r0, [r5, r1]
1000a3f6:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a3f8:	b2c9      	uxtb	r1, r1
1000a3fa:	428a      	cmp	r2, r1
1000a3fc:	d8f7      	bhi.n	1000a3ee <sms_i2c_master_write+0x16>
1000a3fe:	e004      	b.n	1000a40a <sms_i2c_master_write+0x32>
1000a400:	3c01      	subs	r4, #1
1000a402:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a404:	2c00      	cmp	r4, #0
1000a406:	d104      	bne.n	1000a412 <sms_i2c_master_write+0x3a>
1000a408:	e009      	b.n	1000a41e <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a40a:	4c07      	ldr	r4, [pc, #28]	; (1000a428 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a40c:	4e05      	ldr	r6, [pc, #20]	; (1000a424 <sms_i2c_master_write+0x4c>)
1000a40e:	4d07      	ldr	r5, [pc, #28]	; (1000a42c <sms_i2c_master_write+0x54>)
1000a410:	4f07      	ldr	r7, [pc, #28]	; (1000a430 <sms_i2c_master_write+0x58>)
1000a412:	0031      	movs	r1, r6
1000a414:	0028      	movs	r0, r5
1000a416:	47b8      	blx	r7
1000a418:	2800      	cmp	r0, #0
1000a41a:	d1f1      	bne.n	1000a400 <sms_i2c_master_write+0x28>
1000a41c:	e001      	b.n	1000a422 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a41e:	2001      	movs	r0, #1
1000a420:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a424:	100185dc 	.word	0x100185dc
1000a428:	000003e9 	.word	0x000003e9
1000a42c:	100185cc 	.word	0x100185cc
1000a430:	10008419 	.word	0x10008419

1000a434 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a434:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a436:	4647      	mov	r7, r8
1000a438:	b480      	push	{r7}
1000a43a:	0017      	movs	r7, r2
1000a43c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a43e:	b280      	uxth	r0, r0
1000a440:	4b1d      	ldr	r3, [pc, #116]	; (1000a4b8 <sms_i2c_master_read+0x84>)
1000a442:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a444:	2201      	movs	r2, #1
1000a446:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a448:	685b      	ldr	r3, [r3, #4]
1000a44a:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a44c:	4b1b      	ldr	r3, [pc, #108]	; (1000a4bc <sms_i2c_master_read+0x88>)
1000a44e:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a450:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a452:	4c1b      	ldr	r4, [pc, #108]	; (1000a4c0 <sms_i2c_master_read+0x8c>)
1000a454:	4e18      	ldr	r6, [pc, #96]	; (1000a4b8 <sms_i2c_master_read+0x84>)
1000a456:	4d1b      	ldr	r5, [pc, #108]	; (1000a4c4 <sms_i2c_master_read+0x90>)
1000a458:	e003      	b.n	1000a462 <sms_i2c_master_read+0x2e>
1000a45a:	3c01      	subs	r4, #1
1000a45c:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000a45e:	2c00      	cmp	r4, #0
1000a460:	d01f      	beq.n	1000a4a2 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a462:	0031      	movs	r1, r6
1000a464:	4818      	ldr	r0, [pc, #96]	; (1000a4c8 <sms_i2c_master_read+0x94>)
1000a466:	47a8      	blx	r5
1000a468:	2800      	cmp	r0, #0
1000a46a:	d1f6      	bne.n	1000a45a <sms_i2c_master_read+0x26>
1000a46c:	4e14      	ldr	r6, [pc, #80]	; (1000a4c0 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a46e:	4d13      	ldr	r5, [pc, #76]	; (1000a4bc <sms_i2c_master_read+0x88>)
1000a470:	4c16      	ldr	r4, [pc, #88]	; (1000a4cc <sms_i2c_master_read+0x98>)
1000a472:	e003      	b.n	1000a47c <sms_i2c_master_read+0x48>
1000a474:	3e01      	subs	r6, #1
1000a476:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000a478:	2e00      	cmp	r6, #0
1000a47a:	d015      	beq.n	1000a4a8 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a47c:	0029      	movs	r1, r5
1000a47e:	4812      	ldr	r0, [pc, #72]	; (1000a4c8 <sms_i2c_master_read+0x94>)
1000a480:	47a0      	blx	r4
1000a482:	2800      	cmp	r0, #0
1000a484:	d1f6      	bne.n	1000a474 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a486:	2f00      	cmp	r7, #0
1000a488:	d011      	beq.n	1000a4ae <sms_i2c_master_read+0x7a>
1000a48a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000a48c:	490b      	ldr	r1, [pc, #44]	; (1000a4bc <sms_i2c_master_read+0x88>)
1000a48e:	684a      	ldr	r2, [r1, #4]
1000a490:	5cd2      	ldrb	r2, [r2, r3]
1000a492:	4640      	mov	r0, r8
1000a494:	54c2      	strb	r2, [r0, r3]
1000a496:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a498:	b2da      	uxtb	r2, r3
1000a49a:	4297      	cmp	r7, r2
1000a49c:	d8f7      	bhi.n	1000a48e <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a49e:	2000      	movs	r0, #0
1000a4a0:	e006      	b.n	1000a4b0 <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a4a2:	2001      	movs	r0, #1
1000a4a4:	4240      	negs	r0, r0
1000a4a6:	e003      	b.n	1000a4b0 <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a4a8:	2001      	movs	r0, #1
1000a4aa:	4240      	negs	r0, r0
1000a4ac:	e000      	b.n	1000a4b0 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a4ae:	2000      	movs	r0, #0
1000a4b0:	bc04      	pop	{r2}
1000a4b2:	4690      	mov	r8, r2
1000a4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4b6:	46c0      	nop			; (mov r8, r8)
1000a4b8:	100185dc 	.word	0x100185dc
1000a4bc:	100185c0 	.word	0x100185c0
1000a4c0:	000003e9 	.word	0x000003e9
1000a4c4:	1000843d 	.word	0x1000843d
1000a4c8:	100185cc 	.word	0x100185cc
1000a4cc:	100083f5 	.word	0x100083f5

1000a4d0 <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000a4d0:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
1000a4d2:	2203      	movs	r2, #3
1000a4d4:	4b04      	ldr	r3, [pc, #16]	; (1000a4e8 <sms_mpu_interrupt_callback+0x18>)
1000a4d6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a4d8:	2300      	movs	r3, #0
1000a4da:	2200      	movs	r2, #0
1000a4dc:	2102      	movs	r1, #2
1000a4de:	201e      	movs	r0, #30
1000a4e0:	4c02      	ldr	r4, [pc, #8]	; (1000a4ec <sms_mpu_interrupt_callback+0x1c>)
1000a4e2:	47a0      	blx	r4
}
1000a4e4:	bd10      	pop	{r4, pc}
1000a4e6:	46c0      	nop			; (mov r8, r8)
1000a4e8:	100185bc 	.word	0x100185bc
1000a4ec:	1000e189 	.word	0x1000e189

1000a4f0 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000a4f0:	b510      	push	{r4, lr}
1000a4f2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a4f4:	ac01      	add	r4, sp, #4
1000a4f6:	0020      	movs	r0, r4
1000a4f8:	4b15      	ldr	r3, [pc, #84]	; (1000a550 <sms_mpu_configure_gpio+0x60>)
1000a4fa:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a4fc:	2300      	movs	r3, #0
1000a4fe:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a500:	3302      	adds	r3, #2
1000a502:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a504:	3b01      	subs	r3, #1
1000a506:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000a508:	0021      	movs	r1, r4
1000a50a:	201e      	movs	r0, #30
1000a50c:	4b11      	ldr	r3, [pc, #68]	; (1000a554 <sms_mpu_configure_gpio+0x64>)
1000a50e:	4798      	blx	r3
1000a510:	2800      	cmp	r0, #0
1000a512:	d005      	beq.n	1000a520 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000a514:	4810      	ldr	r0, [pc, #64]	; (1000a558 <sms_mpu_configure_gpio+0x68>)
1000a516:	4b11      	ldr	r3, [pc, #68]	; (1000a55c <sms_mpu_configure_gpio+0x6c>)
1000a518:	4798      	blx	r3
1000a51a:	4811      	ldr	r0, [pc, #68]	; (1000a560 <sms_mpu_configure_gpio+0x70>)
1000a51c:	4b11      	ldr	r3, [pc, #68]	; (1000a564 <sms_mpu_configure_gpio+0x74>)
1000a51e:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a520:	ac01      	add	r4, sp, #4
1000a522:	0020      	movs	r0, r4
1000a524:	4b0a      	ldr	r3, [pc, #40]	; (1000a550 <sms_mpu_configure_gpio+0x60>)
1000a526:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a528:	2301      	movs	r3, #1
1000a52a:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000a52c:	0021      	movs	r1, r4
1000a52e:	2006      	movs	r0, #6
1000a530:	4b08      	ldr	r3, [pc, #32]	; (1000a554 <sms_mpu_configure_gpio+0x64>)
1000a532:	4798      	blx	r3
1000a534:	2800      	cmp	r0, #0
1000a536:	d105      	bne.n	1000a544 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
1000a538:	4807      	ldr	r0, [pc, #28]	; (1000a558 <sms_mpu_configure_gpio+0x68>)
1000a53a:	4b08      	ldr	r3, [pc, #32]	; (1000a55c <sms_mpu_configure_gpio+0x6c>)
1000a53c:	4798      	blx	r3
1000a53e:	480a      	ldr	r0, [pc, #40]	; (1000a568 <sms_mpu_configure_gpio+0x78>)
1000a540:	4b08      	ldr	r3, [pc, #32]	; (1000a564 <sms_mpu_configure_gpio+0x74>)
1000a542:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000a544:	2101      	movs	r1, #1
1000a546:	2006      	movs	r0, #6
1000a548:	4b08      	ldr	r3, [pc, #32]	; (1000a56c <sms_mpu_configure_gpio+0x7c>)
1000a54a:	4798      	blx	r3
}
1000a54c:	b002      	add	sp, #8
1000a54e:	bd10      	pop	{r4, pc}
1000a550:	1000b115 	.word	0x1000b115
1000a554:	1000b125 	.word	0x1000b125
1000a558:	10014d08 	.word	0x10014d08
1000a55c:	10013b61 	.word	0x10013b61
1000a560:	100155e4 	.word	0x100155e4
1000a564:	10013a41 	.word	0x10013a41
1000a568:	10015624 	.word	0x10015624
1000a56c:	1000b2dd 	.word	0x1000b2dd

1000a570 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000a570:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000a572:	2202      	movs	r2, #2
1000a574:	4902      	ldr	r1, [pc, #8]	; (1000a580 <sms_mpu_register_callbacks+0x10>)
1000a576:	201e      	movs	r0, #30
1000a578:	4b02      	ldr	r3, [pc, #8]	; (1000a584 <sms_mpu_register_callbacks+0x14>)
1000a57a:	4798      	blx	r3
}
1000a57c:	bd10      	pop	{r4, pc}
1000a57e:	46c0      	nop			; (mov r8, r8)
1000a580:	1000a4d1 	.word	0x1000a4d1
1000a584:	1000b4b5 	.word	0x1000b4b5

1000a588 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000a588:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000a58a:	4825      	ldr	r0, [pc, #148]	; (1000a620 <sms_mpu_initialize+0x98>)
1000a58c:	4b25      	ldr	r3, [pc, #148]	; (1000a624 <sms_mpu_initialize+0x9c>)
1000a58e:	4798      	blx	r3
1000a590:	4825      	ldr	r0, [pc, #148]	; (1000a628 <sms_mpu_initialize+0xa0>)
1000a592:	4b26      	ldr	r3, [pc, #152]	; (1000a62c <sms_mpu_initialize+0xa4>)
1000a594:	4798      	blx	r3
    res = mpu_init(NULL);
1000a596:	2000      	movs	r0, #0
1000a598:	4b25      	ldr	r3, [pc, #148]	; (1000a630 <sms_mpu_initialize+0xa8>)
1000a59a:	4798      	blx	r3
    if(res) {
1000a59c:	2800      	cmp	r0, #0
1000a59e:	d005      	beq.n	1000a5ac <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000a5a0:	4824      	ldr	r0, [pc, #144]	; (1000a634 <sms_mpu_initialize+0xac>)
1000a5a2:	4b22      	ldr	r3, [pc, #136]	; (1000a62c <sms_mpu_initialize+0xa4>)
1000a5a4:	4798      	blx	r3
        return -1;
1000a5a6:	2001      	movs	r0, #1
1000a5a8:	4240      	negs	r0, r0
1000a5aa:	e037      	b.n	1000a61c <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000a5ac:	481c      	ldr	r0, [pc, #112]	; (1000a620 <sms_mpu_initialize+0x98>)
1000a5ae:	4b1d      	ldr	r3, [pc, #116]	; (1000a624 <sms_mpu_initialize+0x9c>)
1000a5b0:	4798      	blx	r3
1000a5b2:	4821      	ldr	r0, [pc, #132]	; (1000a638 <sms_mpu_initialize+0xb0>)
1000a5b4:	4b1d      	ldr	r3, [pc, #116]	; (1000a62c <sms_mpu_initialize+0xa4>)
1000a5b6:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000a5b8:	2079      	movs	r0, #121	; 0x79
1000a5ba:	4b20      	ldr	r3, [pc, #128]	; (1000a63c <sms_mpu_initialize+0xb4>)
1000a5bc:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000a5be:	2078      	movs	r0, #120	; 0x78
1000a5c0:	4b1f      	ldr	r3, [pc, #124]	; (1000a640 <sms_mpu_initialize+0xb8>)
1000a5c2:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a5c4:	2014      	movs	r0, #20
1000a5c6:	4b1f      	ldr	r3, [pc, #124]	; (1000a644 <sms_mpu_initialize+0xbc>)
1000a5c8:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000a5ca:	2004      	movs	r0, #4
1000a5cc:	4b1e      	ldr	r3, [pc, #120]	; (1000a648 <sms_mpu_initialize+0xc0>)
1000a5ce:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000a5d0:	4d1e      	ldr	r5, [pc, #120]	; (1000a64c <sms_mpu_initialize+0xc4>)
1000a5d2:	0028      	movs	r0, r5
1000a5d4:	4b1e      	ldr	r3, [pc, #120]	; (1000a650 <sms_mpu_initialize+0xc8>)
1000a5d6:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000a5d8:	1f68      	subs	r0, r5, #5
1000a5da:	4b1e      	ldr	r3, [pc, #120]	; (1000a654 <sms_mpu_initialize+0xcc>)
1000a5dc:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000a5de:	1ea8      	subs	r0, r5, #2
1000a5e0:	4b1d      	ldr	r3, [pc, #116]	; (1000a658 <sms_mpu_initialize+0xd0>)
1000a5e2:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a5e4:	002c      	movs	r4, r5
1000a5e6:	2307      	movs	r3, #7
1000a5e8:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000a5ea:	20f0      	movs	r0, #240	; 0xf0
1000a5ec:	0040      	lsls	r0, r0, #1
1000a5ee:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a5f0:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000a5f2:	4b1a      	ldr	r3, [pc, #104]	; (1000a65c <sms_mpu_initialize+0xd4>)
1000a5f4:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a5f6:	2014      	movs	r0, #20
1000a5f8:	4b19      	ldr	r3, [pc, #100]	; (1000a660 <sms_mpu_initialize+0xd8>)
1000a5fa:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000a5fc:	2001      	movs	r0, #1
1000a5fe:	4b19      	ldr	r3, [pc, #100]	; (1000a664 <sms_mpu_initialize+0xdc>)
1000a600:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000a602:	2201      	movs	r2, #1
1000a604:	2326      	movs	r3, #38	; 0x26
1000a606:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000a608:	2300      	movs	r3, #0
1000a60a:	322c      	adds	r2, #44	; 0x2c
1000a60c:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000a60e:	3a01      	subs	r2, #1
1000a610:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000a612:	3202      	adds	r2, #2
1000a614:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000a616:	3201      	adds	r2, #1
1000a618:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000a61a:	2000      	movs	r0, #0
}
1000a61c:	bd70      	pop	{r4, r5, r6, pc}
1000a61e:	46c0      	nop			; (mov r8, r8)
1000a620:	10014d08 	.word	0x10014d08
1000a624:	10013b61 	.word	0x10013b61
1000a628:	10015664 	.word	0x10015664
1000a62c:	10013a41 	.word	0x10013a41
1000a630:	1000902d 	.word	0x1000902d
1000a634:	10015678 	.word	0x10015678
1000a638:	10015684 	.word	0x10015684
1000a63c:	10008e45 	.word	0x10008e45
1000a640:	100089cd 	.word	0x100089cd
1000a644:	10008d71 	.word	0x10008d71
1000a648:	10008955 	.word	0x10008955
1000a64c:	10018436 	.word	0x10018436
1000a650:	10008939 	.word	0x10008939
1000a654:	1000879d 	.word	0x1000879d
1000a658:	10009479 	.word	0x10009479
1000a65c:	100098e9 	.word	0x100098e9
1000a660:	10009489 	.word	0x10009489
1000a664:	100093d5 	.word	0x100093d5

1000a668 <sms_mpu_define_services>:

    return 0;
}

void sms_mpu_define_services(void)
{
1000a668:	b510      	push	{r4, lr}
1000a66a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a66c:	466b      	mov	r3, sp
1000a66e:	1dda      	adds	r2, r3, #7
1000a670:	2300      	movs	r3, #0
1000a672:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000a674:	4c0e      	ldr	r4, [pc, #56]	; (1000a6b0 <sms_mpu_define_services+0x48>)
1000a676:	0021      	movs	r1, r4
1000a678:	2002      	movs	r0, #2
1000a67a:	4b0e      	ldr	r3, [pc, #56]	; (1000a6b4 <sms_mpu_define_services+0x4c>)
1000a67c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000a67e:	0020      	movs	r0, r4
1000a680:	4b0d      	ldr	r3, [pc, #52]	; (1000a6b8 <sms_mpu_define_services+0x50>)
1000a682:	4798      	blx	r3
1000a684:	1e04      	subs	r4, r0, #0
1000a686:	d007      	beq.n	1000a698 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000a688:	480c      	ldr	r0, [pc, #48]	; (1000a6bc <sms_mpu_define_services+0x54>)
1000a68a:	4b0d      	ldr	r3, [pc, #52]	; (1000a6c0 <sms_mpu_define_services+0x58>)
1000a68c:	4798      	blx	r3
1000a68e:	0021      	movs	r1, r4
1000a690:	480c      	ldr	r0, [pc, #48]	; (1000a6c4 <sms_mpu_define_services+0x5c>)
1000a692:	4b0d      	ldr	r3, [pc, #52]	; (1000a6c8 <sms_mpu_define_services+0x60>)
1000a694:	4798      	blx	r3
1000a696:	e008      	b.n	1000a6aa <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000a698:	4808      	ldr	r0, [pc, #32]	; (1000a6bc <sms_mpu_define_services+0x54>)
1000a69a:	4b09      	ldr	r3, [pc, #36]	; (1000a6c0 <sms_mpu_define_services+0x58>)
1000a69c:	4798      	blx	r3
1000a69e:	2346      	movs	r3, #70	; 0x46
1000a6a0:	4a0a      	ldr	r2, [pc, #40]	; (1000a6cc <sms_mpu_define_services+0x64>)
1000a6a2:	5ad1      	ldrh	r1, [r2, r3]
1000a6a4:	480a      	ldr	r0, [pc, #40]	; (1000a6d0 <sms_mpu_define_services+0x68>)
1000a6a6:	4b08      	ldr	r3, [pc, #32]	; (1000a6c8 <sms_mpu_define_services+0x60>)
1000a6a8:	4798      	blx	r3
    }
1000a6aa:	b002      	add	sp, #8
1000a6ac:	bd10      	pop	{r4, pc}
1000a6ae:	46c0      	nop			; (mov r8, r8)
1000a6b0:	10018460 	.word	0x10018460
1000a6b4:	10009edd 	.word	0x10009edd
1000a6b8:	10009eb9 	.word	0x10009eb9
1000a6bc:	10014d08 	.word	0x10014d08
1000a6c0:	10013b61 	.word	0x10013b61
1000a6c4:	10015698 	.word	0x10015698
1000a6c8:	10013a41 	.word	0x10013a41
1000a6cc:	1001842c 	.word	0x1001842c
1000a6d0:	100156d8 	.word	0x100156d8

1000a6d4 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a6d4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a6d6:	2100      	movs	r1, #0
1000a6d8:	4b01      	ldr	r3, [pc, #4]	; (1000a6e0 <sms_led_switch_on+0xc>)
1000a6da:	4798      	blx	r3
}
1000a6dc:	bd10      	pop	{r4, pc}
1000a6de:	46c0      	nop			; (mov r8, r8)
1000a6e0:	1000b2dd 	.word	0x1000b2dd

1000a6e4 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a6e4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a6e6:	2101      	movs	r1, #1
1000a6e8:	4b01      	ldr	r3, [pc, #4]	; (1000a6f0 <sms_led_switch_off+0xc>)
1000a6ea:	4798      	blx	r3
}
1000a6ec:	bd10      	pop	{r4, pc}
1000a6ee:	46c0      	nop			; (mov r8, r8)
1000a6f0:	1000b2dd 	.word	0x1000b2dd

1000a6f4 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a6f4:	b510      	push	{r4, lr}
1000a6f6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a6f8:	ac01      	add	r4, sp, #4
1000a6fa:	0020      	movs	r0, r4
1000a6fc:	4b0a      	ldr	r3, [pc, #40]	; (1000a728 <sms_led_gpio_init+0x34>)
1000a6fe:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a700:	2301      	movs	r3, #1
1000a702:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a704:	0021      	movs	r1, r4
1000a706:	2016      	movs	r0, #22
1000a708:	4b08      	ldr	r3, [pc, #32]	; (1000a72c <sms_led_gpio_init+0x38>)
1000a70a:	4798      	blx	r3
1000a70c:	2800      	cmp	r0, #0
1000a70e:	d005      	beq.n	1000a71c <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000a710:	4807      	ldr	r0, [pc, #28]	; (1000a730 <sms_led_gpio_init+0x3c>)
1000a712:	4b08      	ldr	r3, [pc, #32]	; (1000a734 <sms_led_gpio_init+0x40>)
1000a714:	4798      	blx	r3
1000a716:	4808      	ldr	r0, [pc, #32]	; (1000a738 <sms_led_gpio_init+0x44>)
1000a718:	4b08      	ldr	r3, [pc, #32]	; (1000a73c <sms_led_gpio_init+0x48>)
1000a71a:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a71c:	2016      	movs	r0, #22
1000a71e:	4b08      	ldr	r3, [pc, #32]	; (1000a740 <sms_led_gpio_init+0x4c>)
1000a720:	4798      	blx	r3
}
1000a722:	b002      	add	sp, #8
1000a724:	bd10      	pop	{r4, pc}
1000a726:	46c0      	nop			; (mov r8, r8)
1000a728:	1000b115 	.word	0x1000b115
1000a72c:	1000b125 	.word	0x1000b125
1000a730:	10014d08 	.word	0x10014d08
1000a734:	10013b61 	.word	0x10013b61
1000a738:	10015718 	.word	0x10015718
1000a73c:	10013a41 	.word	0x10013a41
1000a740:	1000a6e5 	.word	0x1000a6e5

1000a744 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a744:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a746:	4b0c      	ldr	r3, [pc, #48]	; (1000a778 <sms_led_blink_start+0x34>)
1000a748:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a74a:	2200      	movs	r2, #0
1000a74c:	4b0b      	ldr	r3, [pc, #44]	; (1000a77c <sms_led_blink_start+0x38>)
1000a74e:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a750:	4b0b      	ldr	r3, [pc, #44]	; (1000a780 <sms_led_blink_start+0x3c>)
1000a752:	781b      	ldrb	r3, [r3, #0]
1000a754:	b2db      	uxtb	r3, r3
1000a756:	2b02      	cmp	r3, #2
1000a758:	d002      	beq.n	1000a760 <sms_led_blink_start+0x1c>
1000a75a:	2b03      	cmp	r3, #3
1000a75c:	d002      	beq.n	1000a764 <sms_led_blink_start+0x20>
1000a75e:	e004      	b.n	1000a76a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a760:	2164      	movs	r1, #100	; 0x64
1000a762:	e003      	b.n	1000a76c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a764:	21c8      	movs	r1, #200	; 0xc8
1000a766:	0049      	lsls	r1, r1, #1
        break;
1000a768:	e000      	b.n	1000a76c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a76a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a76c:	2201      	movs	r2, #1
1000a76e:	2001      	movs	r0, #1
1000a770:	4b04      	ldr	r3, [pc, #16]	; (1000a784 <sms_led_blink_start+0x40>)
1000a772:	4798      	blx	r3
}
1000a774:	bd10      	pop	{r4, pc}
1000a776:	46c0      	nop			; (mov r8, r8)
1000a778:	1000a6d5 	.word	0x1000a6d5
1000a77c:	100185f8 	.word	0x100185f8
1000a780:	100185d5 	.word	0x100185d5
1000a784:	1000aa15 	.word	0x1000aa15

1000a788 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a788:	b510      	push	{r4, lr}
1000a78a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a78c:	4a05      	ldr	r2, [pc, #20]	; (1000a7a4 <sms_pressure_ms58_reset+0x1c>)
1000a78e:	231e      	movs	r3, #30
1000a790:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a792:	3b1d      	subs	r3, #29
1000a794:	9300      	str	r3, [sp, #0]
1000a796:	4b04      	ldr	r3, [pc, #16]	; (1000a7a8 <sms_pressure_ms58_reset+0x20>)
1000a798:	4904      	ldr	r1, [pc, #16]	; (1000a7ac <sms_pressure_ms58_reset+0x24>)
1000a79a:	4805      	ldr	r0, [pc, #20]	; (1000a7b0 <sms_pressure_ms58_reset+0x28>)
1000a79c:	4c05      	ldr	r4, [pc, #20]	; (1000a7b4 <sms_pressure_ms58_reset+0x2c>)
1000a79e:	47a0      	blx	r4
}
1000a7a0:	b002      	add	sp, #8
1000a7a2:	bd10      	pop	{r4, pc}
1000a7a4:	10018528 	.word	0x10018528
1000a7a8:	10018518 	.word	0x10018518
1000a7ac:	100185d8 	.word	0x100185d8
1000a7b0:	100185e4 	.word	0x100185e4
1000a7b4:	1000a8f5 	.word	0x1000a8f5

1000a7b8 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000a7b8:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000a7ba:	480d      	ldr	r0, [pc, #52]	; (1000a7f0 <sms_pressure_startup+0x38>)
1000a7bc:	4b0d      	ldr	r3, [pc, #52]	; (1000a7f4 <sms_pressure_startup+0x3c>)
1000a7be:	4798      	blx	r3
1000a7c0:	480d      	ldr	r0, [pc, #52]	; (1000a7f8 <sms_pressure_startup+0x40>)
1000a7c2:	4b0e      	ldr	r3, [pc, #56]	; (1000a7fc <sms_pressure_startup+0x44>)
1000a7c4:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000a7c6:	2101      	movs	r1, #1
1000a7c8:	2001      	movs	r0, #1
1000a7ca:	4b0d      	ldr	r3, [pc, #52]	; (1000a800 <sms_pressure_startup+0x48>)
1000a7cc:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000a7ce:	4b0d      	ldr	r3, [pc, #52]	; (1000a804 <sms_pressure_startup+0x4c>)
1000a7d0:	2101      	movs	r1, #1
1000a7d2:	2225      	movs	r2, #37	; 0x25
1000a7d4:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
1000a7d6:	2200      	movs	r2, #0
1000a7d8:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000a7da:	4b0b      	ldr	r3, [pc, #44]	; (1000a808 <sms_pressure_startup+0x50>)
1000a7dc:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000a7de:	2202      	movs	r2, #2
1000a7e0:	4b0a      	ldr	r3, [pc, #40]	; (1000a80c <sms_pressure_startup+0x54>)
1000a7e2:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000a7e4:	2200      	movs	r2, #0
1000a7e6:	2103      	movs	r1, #3
1000a7e8:	2001      	movs	r0, #1
1000a7ea:	4b09      	ldr	r3, [pc, #36]	; (1000a810 <sms_pressure_startup+0x58>)
1000a7ec:	4798      	blx	r3
}
1000a7ee:	bd10      	pop	{r4, pc}
1000a7f0:	10014d08 	.word	0x10014d08
1000a7f4:	10013b61 	.word	0x10013b61
1000a7f8:	1001578c 	.word	0x1001578c
1000a7fc:	10013a41 	.word	0x10013a41
1000a800:	1000a0f1 	.word	0x1000a0f1
1000a804:	10018538 	.word	0x10018538
1000a808:	1000a789 	.word	0x1000a789
1000a80c:	10018428 	.word	0x10018428
1000a810:	1000aa15 	.word	0x1000aa15

1000a814 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
1000a814:	b510      	push	{r4, lr}
1000a816:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a818:	466b      	mov	r3, sp
1000a81a:	1dda      	adds	r2, r3, #7
1000a81c:	2300      	movs	r3, #0
1000a81e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000a820:	4c0d      	ldr	r4, [pc, #52]	; (1000a858 <sms_pressure_define_services+0x44>)
1000a822:	0021      	movs	r1, r4
1000a824:	2001      	movs	r0, #1
1000a826:	4b0d      	ldr	r3, [pc, #52]	; (1000a85c <sms_pressure_define_services+0x48>)
1000a828:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000a82a:	0020      	movs	r0, r4
1000a82c:	4b0c      	ldr	r3, [pc, #48]	; (1000a860 <sms_pressure_define_services+0x4c>)
1000a82e:	4798      	blx	r3
1000a830:	1e04      	subs	r4, r0, #0
1000a832:	d007      	beq.n	1000a844 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000a834:	480b      	ldr	r0, [pc, #44]	; (1000a864 <sms_pressure_define_services+0x50>)
1000a836:	4b0c      	ldr	r3, [pc, #48]	; (1000a868 <sms_pressure_define_services+0x54>)
1000a838:	4798      	blx	r3
1000a83a:	0021      	movs	r1, r4
1000a83c:	480b      	ldr	r0, [pc, #44]	; (1000a86c <sms_pressure_define_services+0x58>)
1000a83e:	4b0c      	ldr	r3, [pc, #48]	; (1000a870 <sms_pressure_define_services+0x5c>)
1000a840:	4798      	blx	r3
1000a842:	e007      	b.n	1000a854 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000a844:	4807      	ldr	r0, [pc, #28]	; (1000a864 <sms_pressure_define_services+0x50>)
1000a846:	4b08      	ldr	r3, [pc, #32]	; (1000a868 <sms_pressure_define_services+0x54>)
1000a848:	4798      	blx	r3
1000a84a:	4b0a      	ldr	r3, [pc, #40]	; (1000a874 <sms_pressure_define_services+0x60>)
1000a84c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000a84e:	480a      	ldr	r0, [pc, #40]	; (1000a878 <sms_pressure_define_services+0x64>)
1000a850:	4b07      	ldr	r3, [pc, #28]	; (1000a870 <sms_pressure_define_services+0x5c>)
1000a852:	4798      	blx	r3
    }
1000a854:	b002      	add	sp, #8
1000a856:	bd10      	pop	{r4, pc}
1000a858:	10018564 	.word	0x10018564
1000a85c:	10009edd 	.word	0x10009edd
1000a860:	10009eb9 	.word	0x10009eb9
1000a864:	10014d08 	.word	0x10014d08
1000a868:	10013b61 	.word	0x10013b61
1000a86c:	10015868 	.word	0x10015868
1000a870:	10013a41 	.word	0x10013a41
1000a874:	10018538 	.word	0x10018538
1000a878:	100158b0 	.word	0x100158b0

1000a87c <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a87c:	b530      	push	{r4, r5, lr}
1000a87e:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a880:	ac01      	add	r4, sp, #4
1000a882:	0020      	movs	r0, r4
1000a884:	4b13      	ldr	r3, [pc, #76]	; (1000a8d4 <sms_spi_master_configure+0x58>)
1000a886:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a888:	2310      	movs	r3, #16
1000a88a:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a88c:	0021      	movs	r1, r4
1000a88e:	4812      	ldr	r0, [pc, #72]	; (1000a8d8 <sms_spi_master_configure+0x5c>)
1000a890:	4b12      	ldr	r3, [pc, #72]	; (1000a8dc <sms_spi_master_configure+0x60>)
1000a892:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a894:	ac02      	add	r4, sp, #8
1000a896:	0020      	movs	r0, r4
1000a898:	4b11      	ldr	r3, [pc, #68]	; (1000a8e0 <sms_spi_master_configure+0x64>)
1000a89a:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a89c:	2368      	movs	r3, #104	; 0x68
1000a89e:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a8a0:	2300      	movs	r3, #0
1000a8a2:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a8a4:	3311      	adds	r3, #17
1000a8a6:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a8a8:	3b0d      	subs	r3, #13
1000a8aa:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a8ac:	2213      	movs	r2, #19
1000a8ae:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a8b0:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a8b2:	3a14      	subs	r2, #20
1000a8b4:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a8b6:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a8b8:	3213      	adds	r2, #19
1000a8ba:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a8bc:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a8be:	4d09      	ldr	r5, [pc, #36]	; (1000a8e4 <sms_spi_master_configure+0x68>)
1000a8c0:	0022      	movs	r2, r4
1000a8c2:	4909      	ldr	r1, [pc, #36]	; (1000a8e8 <sms_spi_master_configure+0x6c>)
1000a8c4:	0028      	movs	r0, r5
1000a8c6:	4b09      	ldr	r3, [pc, #36]	; (1000a8ec <sms_spi_master_configure+0x70>)
1000a8c8:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a8ca:	0028      	movs	r0, r5
1000a8cc:	4b08      	ldr	r3, [pc, #32]	; (1000a8f0 <sms_spi_master_configure+0x74>)
1000a8ce:	4798      	blx	r3
}
1000a8d0:	b00d      	add	sp, #52	; 0x34
1000a8d2:	bd30      	pop	{r4, r5, pc}
1000a8d4:	1000aac1 	.word	0x1000aac1
1000a8d8:	100185d8 	.word	0x100185d8
1000a8dc:	1000aaf9 	.word	0x1000aaf9
1000a8e0:	1000aacd 	.word	0x1000aacd
1000a8e4:	100185e4 	.word	0x100185e4
1000a8e8:	40007000 	.word	0x40007000
1000a8ec:	1000abc9 	.word	0x1000abc9
1000a8f0:	1000ab39 	.word	0x1000ab39

1000a8f4 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8f6:	b083      	sub	sp, #12
1000a8f8:	0004      	movs	r4, r0
1000a8fa:	000d      	movs	r5, r1
1000a8fc:	9200      	str	r2, [sp, #0]
1000a8fe:	9301      	str	r3, [sp, #4]
1000a900:	ab08      	add	r3, sp, #32
1000a902:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a904:	2201      	movs	r2, #1
1000a906:	4f08      	ldr	r7, [pc, #32]	; (1000a928 <sms_spi_master_transceive+0x34>)
1000a908:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a90a:	0033      	movs	r3, r6
1000a90c:	9a01      	ldr	r2, [sp, #4]
1000a90e:	9900      	ldr	r1, [sp, #0]
1000a910:	0020      	movs	r0, r4
1000a912:	4e06      	ldr	r6, [pc, #24]	; (1000a92c <sms_spi_master_transceive+0x38>)
1000a914:	47b0      	blx	r6
1000a916:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a918:	2200      	movs	r2, #0
1000a91a:	0029      	movs	r1, r5
1000a91c:	0020      	movs	r0, r4
1000a91e:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a920:	0030      	movs	r0, r6
1000a922:	b003      	add	sp, #12
1000a924:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a926:	46c0      	nop			; (mov r8, r8)
1000a928:	1000adb1 	.word	0x1000adb1
1000a92c:	1000ad2d 	.word	0x1000ad2d

1000a930 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a930:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000a932:	2204      	movs	r2, #4
1000a934:	4b04      	ldr	r3, [pc, #16]	; (1000a948 <sms_timer_aon_callback+0x18>)
1000a936:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a938:	2300      	movs	r3, #0
1000a93a:	2200      	movs	r2, #0
1000a93c:	2103      	movs	r1, #3
1000a93e:	2042      	movs	r0, #66	; 0x42
1000a940:	4c02      	ldr	r4, [pc, #8]	; (1000a94c <sms_timer_aon_callback+0x1c>)
1000a942:	47a0      	blx	r4
}
1000a944:	bd10      	pop	{r4, pc}
1000a946:	46c0      	nop			; (mov r8, r8)
1000a948:	100185bc 	.word	0x100185bc
1000a94c:	1000e189 	.word	0x1000e189

1000a950 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000a950:	b530      	push	{r4, r5, lr}
1000a952:	b083      	sub	sp, #12
1000a954:	0004      	movs	r4, r0
1000a956:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a958:	4668      	mov	r0, sp
1000a95a:	4b05      	ldr	r3, [pc, #20]	; (1000a970 <sms_timer_aon_init+0x20>)
1000a95c:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a95e:	466b      	mov	r3, sp
1000a960:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000a962:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a964:	4668      	mov	r0, sp
1000a966:	4b03      	ldr	r3, [pc, #12]	; (1000a974 <sms_timer_aon_init+0x24>)
1000a968:	4798      	blx	r3
}
1000a96a:	b003      	add	sp, #12
1000a96c:	bd30      	pop	{r4, r5, pc}
1000a96e:	46c0      	nop			; (mov r8, r8)
1000a970:	10008155 	.word	0x10008155
1000a974:	100081c9 	.word	0x100081c9

1000a978 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a978:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a97a:	4b01      	ldr	r3, [pc, #4]	; (1000a980 <sms_timer_aon_disable+0x8>)
1000a97c:	4798      	blx	r3
}
1000a97e:	bd10      	pop	{r4, pc}
1000a980:	10008165 	.word	0x10008165

1000a984 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a984:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a986:	4804      	ldr	r0, [pc, #16]	; (1000a998 <sms_timer_aon_register_callback+0x14>)
1000a988:	4b04      	ldr	r3, [pc, #16]	; (1000a99c <sms_timer_aon_register_callback+0x18>)
1000a98a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a98c:	2280      	movs	r2, #128	; 0x80
1000a98e:	0512      	lsls	r2, r2, #20
1000a990:	4b03      	ldr	r3, [pc, #12]	; (1000a9a0 <sms_timer_aon_register_callback+0x1c>)
1000a992:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a994:	bd10      	pop	{r4, pc}
1000a996:	46c0      	nop			; (mov r8, r8)
1000a998:	1000a931 	.word	0x1000a931
1000a99c:	100081b1 	.word	0x100081b1
1000a9a0:	e000e100 	.word	0xe000e100

1000a9a4 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a9a4:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a9a6:	4b04      	ldr	r3, [pc, #16]	; (1000a9b8 <sms_timer_aon_unregister_callback+0x14>)
1000a9a8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a9aa:	2180      	movs	r1, #128	; 0x80
1000a9ac:	0509      	lsls	r1, r1, #20
1000a9ae:	2380      	movs	r3, #128	; 0x80
1000a9b0:	4a02      	ldr	r2, [pc, #8]	; (1000a9bc <sms_timer_aon_unregister_callback+0x18>)
1000a9b2:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a9b4:	bd10      	pop	{r4, pc}
1000a9b6:	46c0      	nop			; (mov r8, r8)
1000a9b8:	100081bd 	.word	0x100081bd
1000a9bc:	e000e100 	.word	0xe000e100

1000a9c0 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a9c0:	b510      	push	{r4, lr}
1000a9c2:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a9c4:	ac01      	add	r4, sp, #4
1000a9c6:	0020      	movs	r0, r4
1000a9c8:	4b08      	ldr	r3, [pc, #32]	; (1000a9ec <sms_dualtimer_init+0x2c>)
1000a9ca:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000a9cc:	4a08      	ldr	r2, [pc, #32]	; (1000a9f0 <sms_dualtimer_init+0x30>)
1000a9ce:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a9d0:	2300      	movs	r3, #0
1000a9d2:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000a9d4:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a9d6:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000a9d8:	0020      	movs	r0, r4
1000a9da:	4b06      	ldr	r3, [pc, #24]	; (1000a9f4 <sms_dualtimer_init+0x34>)
1000a9dc:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a9de:	2000      	movs	r0, #0
1000a9e0:	4c05      	ldr	r4, [pc, #20]	; (1000a9f8 <sms_dualtimer_init+0x38>)
1000a9e2:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a9e4:	2001      	movs	r0, #1
1000a9e6:	47a0      	blx	r4
}
1000a9e8:	b008      	add	sp, #32
1000a9ea:	bd10      	pop	{r4, pc}
1000a9ec:	1000ae15 	.word	0x1000ae15
1000a9f0:	018cba80 	.word	0x018cba80
1000a9f4:	1000aea9 	.word	0x1000aea9
1000a9f8:	1000ae85 	.word	0x1000ae85

1000a9fc <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a9fc:	b510      	push	{r4, lr}
1000a9fe:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000aa00:	4b02      	ldr	r3, [pc, #8]	; (1000aa0c <sms_dualtimer_register_callback+0x10>)
1000aa02:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000aa04:	0020      	movs	r0, r4
1000aa06:	4b02      	ldr	r3, [pc, #8]	; (1000aa10 <sms_dualtimer_register_callback+0x14>)
1000aa08:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000aa0a:	bd10      	pop	{r4, pc}
1000aa0c:	1000afad 	.word	0x1000afad
1000aa10:	1000ae85 	.word	0x1000ae85

1000aa14 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000aa14:	b510      	push	{r4, lr}
1000aa16:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000aa18:	2801      	cmp	r0, #1
1000aa1a:	d006      	beq.n	1000aa2a <sms_dualtimer_start+0x16>
1000aa1c:	2800      	cmp	r0, #0
1000aa1e:	d002      	beq.n	1000aa26 <sms_dualtimer_start+0x12>
1000aa20:	2802      	cmp	r0, #2
1000aa22:	d004      	beq.n	1000aa2e <sms_dualtimer_start+0x1a>
1000aa24:	e005      	b.n	1000aa32 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000aa26:	221a      	movs	r2, #26
1000aa28:	e004      	b.n	1000aa34 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000aa2a:	4a0c      	ldr	r2, [pc, #48]	; (1000aa5c <sms_dualtimer_start+0x48>)
        break;
1000aa2c:	e002      	b.n	1000aa34 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000aa2e:	4a0c      	ldr	r2, [pc, #48]	; (1000aa60 <sms_dualtimer_start+0x4c>)
        break;
1000aa30:	e000      	b.n	1000aa34 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000aa32:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000aa34:	2900      	cmp	r1, #0
1000aa36:	d101      	bne.n	1000aa3c <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000aa38:	21fa      	movs	r1, #250	; 0xfa
1000aa3a:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000aa3c:	2000      	movs	r0, #0
1000aa3e:	4b09      	ldr	r3, [pc, #36]	; (1000aa64 <sms_dualtimer_start+0x50>)
1000aa40:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000aa42:	434a      	muls	r2, r1
1000aa44:	2100      	movs	r1, #0
1000aa46:	0020      	movs	r0, r4
1000aa48:	4b07      	ldr	r3, [pc, #28]	; (1000aa68 <sms_dualtimer_start+0x54>)
1000aa4a:	4798      	blx	r3
    dualtimer_enable(tmr);
1000aa4c:	0020      	movs	r0, r4
1000aa4e:	4b07      	ldr	r3, [pc, #28]	; (1000aa6c <sms_dualtimer_start+0x58>)
1000aa50:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aa52:	2280      	movs	r2, #128	; 0x80
1000aa54:	01d2      	lsls	r2, r2, #7
1000aa56:	4b06      	ldr	r3, [pc, #24]	; (1000aa70 <sms_dualtimer_start+0x5c>)
1000aa58:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000aa5a:	bd10      	pop	{r4, pc}
1000aa5c:	00006590 	.word	0x00006590
1000aa60:	018cba80 	.word	0x018cba80
1000aa64:	100184bd 	.word	0x100184bd
1000aa68:	1000ae39 	.word	0x1000ae39
1000aa6c:	1000ae61 	.word	0x1000ae61
1000aa70:	e000e100 	.word	0xe000e100

1000aa74 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000aa74:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000aa76:	4b01      	ldr	r3, [pc, #4]	; (1000aa7c <sms_dualtimer_stop+0x8>)
1000aa78:	4798      	blx	r3
}
1000aa7a:	bd10      	pop	{r4, pc}
1000aa7c:	1000ae85 	.word	0x1000ae85

1000aa80 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000aa80:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000aa82:	2205      	movs	r2, #5
1000aa84:	4b04      	ldr	r3, [pc, #16]	; (1000aa98 <sms_dualtimer1_cb+0x18>)
1000aa86:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000aa88:	2300      	movs	r3, #0
1000aa8a:	2200      	movs	r2, #0
1000aa8c:	2101      	movs	r1, #1
1000aa8e:	2040      	movs	r0, #64	; 0x40
1000aa90:	4c02      	ldr	r4, [pc, #8]	; (1000aa9c <sms_dualtimer1_cb+0x1c>)
1000aa92:	47a0      	blx	r4
}
1000aa94:	bd10      	pop	{r4, pc}
1000aa96:	46c0      	nop			; (mov r8, r8)
1000aa98:	100185bc 	.word	0x100185bc
1000aa9c:	1000e189 	.word	0x1000e189

1000aaa0 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000aaa0:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000aaa2:	2206      	movs	r2, #6
1000aaa4:	4b04      	ldr	r3, [pc, #16]	; (1000aab8 <sms_dualtimer2_cb+0x18>)
1000aaa6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000aaa8:	2300      	movs	r3, #0
1000aaaa:	2200      	movs	r2, #0
1000aaac:	2101      	movs	r1, #1
1000aaae:	2041      	movs	r0, #65	; 0x41
1000aab0:	4c02      	ldr	r4, [pc, #8]	; (1000aabc <sms_dualtimer2_cb+0x1c>)
1000aab2:	47a0      	blx	r4
}
1000aab4:	bd10      	pop	{r4, pc}
1000aab6:	46c0      	nop			; (mov r8, r8)
1000aab8:	100185bc 	.word	0x100185bc
1000aabc:	1000e189 	.word	0x1000e189

1000aac0 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000aac0:	230c      	movs	r3, #12
1000aac2:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000aac4:	2300      	movs	r3, #0
1000aac6:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000aac8:	7083      	strb	r3, [r0, #2]
}
1000aaca:	4770      	bx	lr

1000aacc <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000aacc:	2301      	movs	r3, #1
1000aace:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000aad0:	2300      	movs	r3, #0
1000aad2:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000aad4:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000aad6:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000aad8:	3381      	adds	r3, #129	; 0x81
1000aada:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000aadc:	3b77      	subs	r3, #119	; 0x77
1000aade:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000aae0:	3301      	adds	r3, #1
1000aae2:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000aae4:	3301      	adds	r3, #1
1000aae6:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000aae8:	3301      	adds	r3, #1
1000aaea:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000aaec:	3b0b      	subs	r3, #11
1000aaee:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000aaf0:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000aaf2:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000aaf4:	6243      	str	r3, [r0, #36]	; 0x24
};
1000aaf6:	4770      	bx	lr

1000aaf8 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000aaf8:	b530      	push	{r4, r5, lr}
1000aafa:	b083      	sub	sp, #12
1000aafc:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000aafe:	780b      	ldrb	r3, [r1, #0]
1000ab00:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000ab02:	784b      	ldrb	r3, [r1, #1]
1000ab04:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000ab06:	788b      	ldrb	r3, [r1, #2]
1000ab08:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ab0a:	ad01      	add	r5, sp, #4
1000ab0c:	0028      	movs	r0, r5
1000ab0e:	4b07      	ldr	r3, [pc, #28]	; (1000ab2c <spi_attach_slave+0x34>)
1000ab10:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ab12:	2301      	movs	r3, #1
1000ab14:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000ab16:	7820      	ldrb	r0, [r4, #0]
1000ab18:	0029      	movs	r1, r5
1000ab1a:	4b05      	ldr	r3, [pc, #20]	; (1000ab30 <spi_attach_slave+0x38>)
1000ab1c:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000ab1e:	7820      	ldrb	r0, [r4, #0]
1000ab20:	2101      	movs	r1, #1
1000ab22:	4b04      	ldr	r3, [pc, #16]	; (1000ab34 <spi_attach_slave+0x3c>)
1000ab24:	4798      	blx	r3
}
1000ab26:	b003      	add	sp, #12
1000ab28:	bd30      	pop	{r4, r5, pc}
1000ab2a:	46c0      	nop			; (mov r8, r8)
1000ab2c:	1000b115 	.word	0x1000b115
1000ab30:	1000b125 	.word	0x1000b125
1000ab34:	1000b2dd 	.word	0x1000b2dd

1000ab38 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000ab38:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000ab3a:	2201      	movs	r2, #1
1000ab3c:	761a      	strb	r2, [r3, #24]
}
1000ab3e:	4770      	bx	lr

1000ab40 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000ab40:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000ab42:	2300      	movs	r3, #0
1000ab44:	6802      	ldr	r2, [r0, #0]
1000ab46:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000ab48:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000ab4a:	4a0d      	ldr	r2, [pc, #52]	; (1000ab80 <spi_disable+0x40>)
1000ab4c:	4293      	cmp	r3, r2
1000ab4e:	d109      	bne.n	1000ab64 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000ab50:	2041      	movs	r0, #65	; 0x41
1000ab52:	4c0c      	ldr	r4, [pc, #48]	; (1000ab84 <spi_disable+0x44>)
1000ab54:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000ab56:	2026      	movs	r0, #38	; 0x26
1000ab58:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000ab5a:	2038      	movs	r0, #56	; 0x38
1000ab5c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000ab5e:	2001      	movs	r0, #1
1000ab60:	47a0      	blx	r4
1000ab62:	e00b      	b.n	1000ab7c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000ab64:	4a08      	ldr	r2, [pc, #32]	; (1000ab88 <spi_disable+0x48>)
1000ab66:	4293      	cmp	r3, r2
1000ab68:	d108      	bne.n	1000ab7c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000ab6a:	2042      	movs	r0, #66	; 0x42
1000ab6c:	4c05      	ldr	r4, [pc, #20]	; (1000ab84 <spi_disable+0x44>)
1000ab6e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000ab70:	2027      	movs	r0, #39	; 0x27
1000ab72:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000ab74:	2039      	movs	r0, #57	; 0x39
1000ab76:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000ab78:	2002      	movs	r0, #2
1000ab7a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000ab7c:	bd10      	pop	{r4, pc}
1000ab7e:	46c0      	nop			; (mov r8, r8)
1000ab80:	40006000 	.word	0x40006000
1000ab84:	1000ba75 	.word	0x1000ba75
1000ab88:	40007000 	.word	0x40007000

1000ab8c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000ab8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000ab8e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000ab90:	4b09      	ldr	r3, [pc, #36]	; (1000abb8 <spi_reset+0x2c>)
1000ab92:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000ab94:	4b09      	ldr	r3, [pc, #36]	; (1000abbc <spi_reset+0x30>)
1000ab96:	429c      	cmp	r4, r3
1000ab98:	d105      	bne.n	1000aba6 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000ab9a:	2001      	movs	r0, #1
1000ab9c:	4c08      	ldr	r4, [pc, #32]	; (1000abc0 <spi_reset+0x34>)
1000ab9e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000aba0:	2038      	movs	r0, #56	; 0x38
1000aba2:	47a0      	blx	r4
1000aba4:	e007      	b.n	1000abb6 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000aba6:	4b07      	ldr	r3, [pc, #28]	; (1000abc4 <spi_reset+0x38>)
1000aba8:	429c      	cmp	r4, r3
1000abaa:	d104      	bne.n	1000abb6 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000abac:	2002      	movs	r0, #2
1000abae:	4c04      	ldr	r4, [pc, #16]	; (1000abc0 <spi_reset+0x34>)
1000abb0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000abb2:	2039      	movs	r0, #57	; 0x39
1000abb4:	47a0      	blx	r4
	}
}
1000abb6:	bd10      	pop	{r4, pc}
1000abb8:	1000ab41 	.word	0x1000ab41
1000abbc:	40006000 	.word	0x40006000
1000abc0:	1000bde1 	.word	0x1000bde1
1000abc4:	40007000 	.word	0x40007000

1000abc8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abca:	465f      	mov	r7, fp
1000abcc:	4646      	mov	r6, r8
1000abce:	b4c0      	push	{r6, r7}
1000abd0:	b083      	sub	sp, #12
1000abd2:	0006      	movs	r6, r0
1000abd4:	4688      	mov	r8, r1
1000abd6:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000abd8:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000abda:	7e0b      	ldrb	r3, [r1, #24]
1000abdc:	07db      	lsls	r3, r3, #31
1000abde:	d501      	bpl.n	1000abe4 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000abe0:	2300      	movs	r3, #0
1000abe2:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000abe4:	0030      	movs	r0, r6
1000abe6:	4b4a      	ldr	r3, [pc, #296]	; (1000ad10 <spi_init+0x148>)
1000abe8:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000abea:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000abec:	4a49      	ldr	r2, [pc, #292]	; (1000ad14 <spi_init+0x14c>)
1000abee:	4293      	cmp	r3, r2
1000abf0:	d109      	bne.n	1000ac06 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000abf2:	2041      	movs	r0, #65	; 0x41
1000abf4:	4c48      	ldr	r4, [pc, #288]	; (1000ad18 <spi_init+0x150>)
1000abf6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000abf8:	2026      	movs	r0, #38	; 0x26
1000abfa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000abfc:	2038      	movs	r0, #56	; 0x38
1000abfe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000ac00:	2001      	movs	r0, #1
1000ac02:	47a0      	blx	r4
1000ac04:	e00b      	b.n	1000ac1e <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000ac06:	4a45      	ldr	r2, [pc, #276]	; (1000ad1c <spi_init+0x154>)
1000ac08:	4293      	cmp	r3, r2
1000ac0a:	d108      	bne.n	1000ac1e <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000ac0c:	2042      	movs	r0, #66	; 0x42
1000ac0e:	4c42      	ldr	r4, [pc, #264]	; (1000ad18 <spi_init+0x150>)
1000ac10:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000ac12:	2027      	movs	r0, #39	; 0x27
1000ac14:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000ac16:	2039      	movs	r0, #57	; 0x39
1000ac18:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000ac1a:	2002      	movs	r0, #2
1000ac1c:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ac1e:	a801      	add	r0, sp, #4
1000ac20:	4b3f      	ldr	r3, [pc, #252]	; (1000ad20 <spi_init+0x158>)
1000ac22:	4798      	blx	r3
1000ac24:	002c      	movs	r4, r5
1000ac26:	3408      	adds	r4, #8
1000ac28:	2318      	movs	r3, #24
1000ac2a:	469b      	mov	fp, r3
1000ac2c:	44ab      	add	fp, r5
1000ac2e:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000ac30:	6820      	ldr	r0, [r4, #0]
1000ac32:	1c43      	adds	r3, r0, #1
1000ac34:	d011      	beq.n	1000ac5a <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000ac36:	782b      	ldrb	r3, [r5, #0]
1000ac38:	2b01      	cmp	r3, #1
1000ac3a:	d102      	bne.n	1000ac42 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ac3c:	466a      	mov	r2, sp
1000ac3e:	7113      	strb	r3, [r2, #4]
1000ac40:	e003      	b.n	1000ac4a <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000ac42:	2b00      	cmp	r3, #0
1000ac44:	d101      	bne.n	1000ac4a <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000ac46:	466a      	mov	r2, sp
1000ac48:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000ac4a:	b2c0      	uxtb	r0, r0
1000ac4c:	a901      	add	r1, sp, #4
1000ac4e:	4b35      	ldr	r3, [pc, #212]	; (1000ad24 <spi_init+0x15c>)
1000ac50:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000ac52:	8a39      	ldrh	r1, [r7, #16]
1000ac54:	7838      	ldrb	r0, [r7, #0]
1000ac56:	4b34      	ldr	r3, [pc, #208]	; (1000ad28 <spi_init+0x160>)
1000ac58:	4798      	blx	r3
1000ac5a:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000ac5c:	455c      	cmp	r4, fp
1000ac5e:	d1e6      	bne.n	1000ac2e <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000ac60:	78eb      	ldrb	r3, [r5, #3]
1000ac62:	4642      	mov	r2, r8
1000ac64:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000ac66:	782b      	ldrb	r3, [r5, #0]
1000ac68:	2b01      	cmp	r3, #1
1000ac6a:	d100      	bne.n	1000ac6e <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000ac6c:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000ac6e:	782b      	ldrb	r3, [r5, #0]
1000ac70:	2b00      	cmp	r3, #0
1000ac72:	d101      	bne.n	1000ac78 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000ac74:	4642      	mov	r2, r8
1000ac76:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000ac78:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000ac7a:	782a      	ldrb	r2, [r5, #0]
1000ac7c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000ac7e:	782a      	ldrb	r2, [r5, #0]
1000ac80:	2a01      	cmp	r2, #1
1000ac82:	d101      	bne.n	1000ac88 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000ac84:	792a      	ldrb	r2, [r5, #4]
1000ac86:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000ac88:	786a      	ldrb	r2, [r5, #1]
1000ac8a:	2a04      	cmp	r2, #4
1000ac8c:	d104      	bne.n	1000ac98 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000ac8e:	2124      	movs	r1, #36	; 0x24
1000ac90:	5c58      	ldrb	r0, [r3, r1]
1000ac92:	4302      	orrs	r2, r0
1000ac94:	545a      	strb	r2, [r3, r1]
1000ac96:	e004      	b.n	1000aca2 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000ac98:	2124      	movs	r1, #36	; 0x24
1000ac9a:	5c5a      	ldrb	r2, [r3, r1]
1000ac9c:	2004      	movs	r0, #4
1000ac9e:	4382      	bics	r2, r0
1000aca0:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000aca2:	78aa      	ldrb	r2, [r5, #2]
1000aca4:	2a01      	cmp	r2, #1
1000aca6:	d01a      	beq.n	1000acde <spi_init+0x116>
1000aca8:	2a00      	cmp	r2, #0
1000acaa:	d004      	beq.n	1000acb6 <spi_init+0xee>
1000acac:	2a02      	cmp	r2, #2
1000acae:	d00c      	beq.n	1000acca <spi_init+0x102>
1000acb0:	2a03      	cmp	r2, #3
1000acb2:	d01e      	beq.n	1000acf2 <spi_init+0x12a>
1000acb4:	e026      	b.n	1000ad04 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000acb6:	2224      	movs	r2, #36	; 0x24
1000acb8:	5c99      	ldrb	r1, [r3, r2]
1000acba:	2002      	movs	r0, #2
1000acbc:	4381      	bics	r1, r0
1000acbe:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000acc0:	5c99      	ldrb	r1, [r3, r2]
1000acc2:	3801      	subs	r0, #1
1000acc4:	4381      	bics	r1, r0
1000acc6:	5499      	strb	r1, [r3, r2]
1000acc8:	e01c      	b.n	1000ad04 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000acca:	2224      	movs	r2, #36	; 0x24
1000accc:	5c98      	ldrb	r0, [r3, r2]
1000acce:	2102      	movs	r1, #2
1000acd0:	4301      	orrs	r1, r0
1000acd2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000acd4:	5c99      	ldrb	r1, [r3, r2]
1000acd6:	2001      	movs	r0, #1
1000acd8:	4381      	bics	r1, r0
1000acda:	5499      	strb	r1, [r3, r2]
1000acdc:	e012      	b.n	1000ad04 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000acde:	2224      	movs	r2, #36	; 0x24
1000ace0:	5c99      	ldrb	r1, [r3, r2]
1000ace2:	2002      	movs	r0, #2
1000ace4:	4381      	bics	r1, r0
1000ace6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000ace8:	5c98      	ldrb	r0, [r3, r2]
1000acea:	2101      	movs	r1, #1
1000acec:	4301      	orrs	r1, r0
1000acee:	5499      	strb	r1, [r3, r2]
1000acf0:	e008      	b.n	1000ad04 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000acf2:	2224      	movs	r2, #36	; 0x24
1000acf4:	5c98      	ldrb	r0, [r3, r2]
1000acf6:	2102      	movs	r1, #2
1000acf8:	4301      	orrs	r1, r0
1000acfa:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000acfc:	5c98      	ldrb	r0, [r3, r2]
1000acfe:	2101      	movs	r1, #1
1000ad00:	4301      	orrs	r1, r0
1000ad02:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000ad04:	2000      	movs	r0, #0
1000ad06:	b003      	add	sp, #12
1000ad08:	bc0c      	pop	{r2, r3}
1000ad0a:	4690      	mov	r8, r2
1000ad0c:	469b      	mov	fp, r3
1000ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad10:	1000ab8d 	.word	0x1000ab8d
1000ad14:	40006000 	.word	0x40006000
1000ad18:	1000b719 	.word	0x1000b719
1000ad1c:	40007000 	.word	0x40007000
1000ad20:	1000b115 	.word	0x1000b115
1000ad24:	1000b125 	.word	0x1000b125
1000ad28:	1000b369 	.word	0x1000b369

1000ad2c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad2e:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000ad30:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000ad32:	2600      	movs	r6, #0
1000ad34:	466d      	mov	r5, sp
1000ad36:	71ee      	strb	r6, [r5, #7]
1000ad38:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000ad3a:	2c00      	cmp	r4, #0
1000ad3c:	d034      	beq.n	1000ada8 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000ad3e:	2900      	cmp	r1, #0
1000ad40:	d104      	bne.n	1000ad4c <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000ad42:	0029      	movs	r1, r5
1000ad44:	7980      	ldrb	r0, [r0, #6]
1000ad46:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000ad48:	2701      	movs	r7, #1
1000ad4a:	e00b      	b.n	1000ad64 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000ad4c:	2a00      	cmp	r2, #0
1000ad4e:	d005      	beq.n	1000ad5c <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ad50:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000ad52:	2b00      	cmp	r3, #0
1000ad54:	d029      	beq.n	1000adaa <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000ad56:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ad58:	2700      	movs	r7, #0
1000ad5a:	e003      	b.n	1000ad64 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000ad5c:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ad5e:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000ad60:	466a      	mov	r2, sp
1000ad62:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000ad64:	2528      	movs	r5, #40	; 0x28
1000ad66:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000ad68:	07c0      	lsls	r0, r0, #31
1000ad6a:	d4fc      	bmi.n	1000ad66 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000ad6c:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000ad6e:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000ad70:	2b00      	cmp	r3, #0
1000ad72:	d014      	beq.n	1000ad9e <spi_transceive_buffer_wait+0x72>
1000ad74:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000ad76:	4278      	negs	r0, r7
1000ad78:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000ad7a:	4270      	negs	r0, r6
1000ad7c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000ad7e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000ad80:	07c0      	lsls	r0, r0, #31
1000ad82:	d5fc      	bpl.n	1000ad7e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000ad84:	7808      	ldrb	r0, [r1, #0]
1000ad86:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000ad88:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000ad8a:	07c0      	lsls	r0, r0, #31
1000ad8c:	d5fc      	bpl.n	1000ad88 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000ad8e:	7920      	ldrb	r0, [r4, #4]
1000ad90:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000ad92:	3501      	adds	r5, #1
1000ad94:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000ad96:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000ad98:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000ad9a:	42ab      	cmp	r3, r5
1000ad9c:	d1ef      	bne.n	1000ad7e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000ad9e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000ada0:	06db      	lsls	r3, r3, #27
1000ada2:	d5fc      	bpl.n	1000ad9e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000ada4:	2000      	movs	r0, #0
1000ada6:	e000      	b.n	1000adaa <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000ada8:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000adaa:	b003      	add	sp, #12
1000adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000adae:	46c0      	nop			; (mov r8, r8)

1000adb0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000adb0:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000adb2:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000adb4:	2a00      	cmp	r2, #0
1000adb6:	d003      	beq.n	1000adc0 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000adb8:	2100      	movs	r1, #0
1000adba:	4b04      	ldr	r3, [pc, #16]	; (1000adcc <spi_select_slave+0x1c>)
1000adbc:	4798      	blx	r3
1000adbe:	e002      	b.n	1000adc6 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000adc0:	2101      	movs	r1, #1
1000adc2:	4b02      	ldr	r3, [pc, #8]	; (1000adcc <spi_select_slave+0x1c>)
1000adc4:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000adc6:	2000      	movs	r0, #0
1000adc8:	bd10      	pop	{r4, pc}
1000adca:	46c0      	nop			; (mov r8, r8)
1000adcc:	1000b2dd 	.word	0x1000b2dd

1000add0 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000add0:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000add2:	4b0d      	ldr	r3, [pc, #52]	; (1000ae08 <dualtimer_isr_handler+0x38>)
1000add4:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000add6:	2b00      	cmp	r3, #0
1000add8:	d007      	beq.n	1000adea <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000adda:	2201      	movs	r2, #1
1000addc:	4b0a      	ldr	r3, [pc, #40]	; (1000ae08 <dualtimer_isr_handler+0x38>)
1000adde:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000ade0:	4b0a      	ldr	r3, [pc, #40]	; (1000ae0c <dualtimer_isr_handler+0x3c>)
1000ade2:	681b      	ldr	r3, [r3, #0]
1000ade4:	2b00      	cmp	r3, #0
1000ade6:	d000      	beq.n	1000adea <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000ade8:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000adea:	2334      	movs	r3, #52	; 0x34
1000adec:	4a06      	ldr	r2, [pc, #24]	; (1000ae08 <dualtimer_isr_handler+0x38>)
1000adee:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000adf0:	2b00      	cmp	r3, #0
1000adf2:	d007      	beq.n	1000ae04 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000adf4:	2101      	movs	r1, #1
1000adf6:	232c      	movs	r3, #44	; 0x2c
1000adf8:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000adfa:	4b05      	ldr	r3, [pc, #20]	; (1000ae10 <dualtimer_isr_handler+0x40>)
1000adfc:	681b      	ldr	r3, [r3, #0]
1000adfe:	2b00      	cmp	r3, #0
1000ae00:	d000      	beq.n	1000ae04 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000ae02:	4798      	blx	r3
	}
}
1000ae04:	bd10      	pop	{r4, pc}
1000ae06:	46c0      	nop			; (mov r8, r8)
1000ae08:	40001000 	.word	0x40001000
1000ae0c:	10016980 	.word	0x10016980
1000ae10:	10016984 	.word	0x10016984

1000ae14 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000ae14:	2301      	movs	r3, #1
1000ae16:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000ae18:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000ae1a:	2202      	movs	r2, #2
1000ae1c:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000ae1e:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ae20:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ae22:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ae24:	2200      	movs	r2, #0
1000ae26:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ae28:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000ae2a:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000ae2c:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000ae2e:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000ae30:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000ae32:	7602      	strb	r2, [r0, #24]
}
1000ae34:	4770      	bx	lr
1000ae36:	46c0      	nop			; (mov r8, r8)

1000ae38 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000ae38:	2800      	cmp	r0, #0
1000ae3a:	d107      	bne.n	1000ae4c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ae3c:	2900      	cmp	r1, #0
1000ae3e:	d102      	bne.n	1000ae46 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000ae40:	4b06      	ldr	r3, [pc, #24]	; (1000ae5c <dualtimer_set_counter+0x24>)
1000ae42:	601a      	str	r2, [r3, #0]
1000ae44:	e009      	b.n	1000ae5a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000ae46:	4b05      	ldr	r3, [pc, #20]	; (1000ae5c <dualtimer_set_counter+0x24>)
1000ae48:	619a      	str	r2, [r3, #24]
1000ae4a:	e006      	b.n	1000ae5a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ae4c:	2900      	cmp	r1, #0
1000ae4e:	d102      	bne.n	1000ae56 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000ae50:	4b02      	ldr	r3, [pc, #8]	; (1000ae5c <dualtimer_set_counter+0x24>)
1000ae52:	621a      	str	r2, [r3, #32]
1000ae54:	e001      	b.n	1000ae5a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000ae56:	4b01      	ldr	r3, [pc, #4]	; (1000ae5c <dualtimer_set_counter+0x24>)
1000ae58:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000ae5a:	4770      	bx	lr
1000ae5c:	40001000 	.word	0x40001000

1000ae60 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ae60:	2800      	cmp	r0, #0
1000ae62:	d105      	bne.n	1000ae70 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ae64:	4a06      	ldr	r2, [pc, #24]	; (1000ae80 <dualtimer_enable+0x20>)
1000ae66:	7a11      	ldrb	r1, [r2, #8]
1000ae68:	2380      	movs	r3, #128	; 0x80
1000ae6a:	430b      	orrs	r3, r1
1000ae6c:	7213      	strb	r3, [r2, #8]
1000ae6e:	e005      	b.n	1000ae7c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ae70:	4903      	ldr	r1, [pc, #12]	; (1000ae80 <dualtimer_enable+0x20>)
1000ae72:	2228      	movs	r2, #40	; 0x28
1000ae74:	5c88      	ldrb	r0, [r1, r2]
1000ae76:	2380      	movs	r3, #128	; 0x80
1000ae78:	4303      	orrs	r3, r0
1000ae7a:	548b      	strb	r3, [r1, r2]
	}
}
1000ae7c:	4770      	bx	lr
1000ae7e:	46c0      	nop			; (mov r8, r8)
1000ae80:	40001000 	.word	0x40001000

1000ae84 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ae84:	2800      	cmp	r0, #0
1000ae86:	d105      	bne.n	1000ae94 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ae88:	4a06      	ldr	r2, [pc, #24]	; (1000aea4 <dualtimer_disable+0x20>)
1000ae8a:	7a11      	ldrb	r1, [r2, #8]
1000ae8c:	237f      	movs	r3, #127	; 0x7f
1000ae8e:	400b      	ands	r3, r1
1000ae90:	7213      	strb	r3, [r2, #8]
1000ae92:	e005      	b.n	1000aea0 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ae94:	4903      	ldr	r1, [pc, #12]	; (1000aea4 <dualtimer_disable+0x20>)
1000ae96:	2228      	movs	r2, #40	; 0x28
1000ae98:	5c88      	ldrb	r0, [r1, r2]
1000ae9a:	237f      	movs	r3, #127	; 0x7f
1000ae9c:	4003      	ands	r3, r0
1000ae9e:	548b      	strb	r3, [r1, r2]
	}
}
1000aea0:	4770      	bx	lr
1000aea2:	46c0      	nop			; (mov r8, r8)
1000aea4:	40001000 	.word	0x40001000

1000aea8 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000aea8:	b570      	push	{r4, r5, r6, lr}
1000aeaa:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000aeac:	2004      	movs	r0, #4
1000aeae:	4b39      	ldr	r3, [pc, #228]	; (1000af94 <dualtimer_init+0xec>)
1000aeb0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000aeb2:	7823      	ldrb	r3, [r4, #0]
1000aeb4:	2b00      	cmp	r3, #0
1000aeb6:	d102      	bne.n	1000aebe <dualtimer_init+0x16>
1000aeb8:	7b23      	ldrb	r3, [r4, #12]
1000aeba:	2b00      	cmp	r3, #0
1000aebc:	d065      	beq.n	1000af8a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000aebe:	4936      	ldr	r1, [pc, #216]	; (1000af98 <dualtimer_init+0xf0>)
1000aec0:	68ca      	ldr	r2, [r1, #12]
1000aec2:	2320      	movs	r3, #32
1000aec4:	4313      	orrs	r3, r2
1000aec6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000aec8:	7e22      	ldrb	r2, [r4, #24]
1000aeca:	698b      	ldr	r3, [r1, #24]
1000aecc:	2003      	movs	r0, #3
1000aece:	4002      	ands	r2, r0
1000aed0:	0112      	lsls	r2, r2, #4
1000aed2:	302d      	adds	r0, #45	; 0x2d
1000aed4:	4383      	bics	r3, r0
1000aed6:	4313      	orrs	r3, r2
1000aed8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000aeda:	7823      	ldrb	r3, [r4, #0]
1000aedc:	2b00      	cmp	r3, #0
1000aede:	d026      	beq.n	1000af2e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000aee0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000aee2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000aee4:	2b00      	cmp	r3, #0
1000aee6:	d003      	beq.n	1000aef0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000aee8:	3b02      	subs	r3, #2
1000aeea:	425d      	negs	r5, r3
1000aeec:	415d      	adcs	r5, r3
1000aeee:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000aef0:	78a2      	ldrb	r2, [r4, #2]
1000aef2:	0052      	lsls	r2, r2, #1
1000aef4:	2502      	movs	r5, #2
1000aef6:	402a      	ands	r2, r5
1000aef8:	78e3      	ldrb	r3, [r4, #3]
1000aefa:	009b      	lsls	r3, r3, #2
1000aefc:	350a      	adds	r5, #10
1000aefe:	402b      	ands	r3, r5
1000af00:	431a      	orrs	r2, r3
1000af02:	0015      	movs	r5, r2
1000af04:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000af06:	7923      	ldrb	r3, [r4, #4]
1000af08:	2b00      	cmp	r3, #0
1000af0a:	d001      	beq.n	1000af10 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000af0c:	2320      	movs	r3, #32
1000af0e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000af10:	4b22      	ldr	r3, [pc, #136]	; (1000af9c <dualtimer_init+0xf4>)
1000af12:	68a2      	ldr	r2, [r4, #8]
1000af14:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000af16:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000af18:	491f      	ldr	r1, [pc, #124]	; (1000af98 <dualtimer_init+0xf0>)
1000af1a:	22c4      	movs	r2, #196	; 0xc4
1000af1c:	0052      	lsls	r2, r2, #1
1000af1e:	5c88      	ldrb	r0, [r1, r2]
1000af20:	2301      	movs	r3, #1
1000af22:	4303      	orrs	r3, r0
1000af24:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000af26:	2000      	movs	r0, #0
1000af28:	4b1d      	ldr	r3, [pc, #116]	; (1000afa0 <dualtimer_init+0xf8>)
1000af2a:	4798      	blx	r3
1000af2c:	e000      	b.n	1000af30 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000af2e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000af30:	7b23      	ldrb	r3, [r4, #12]
1000af32:	2b00      	cmp	r3, #0
1000af34:	d029      	beq.n	1000af8a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000af36:	7b63      	ldrb	r3, [r4, #13]
1000af38:	2b00      	cmp	r3, #0
1000af3a:	d005      	beq.n	1000af48 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000af3c:	2b01      	cmp	r3, #1
1000af3e:	d005      	beq.n	1000af4c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000af40:	2b02      	cmp	r3, #2
1000af42:	d104      	bne.n	1000af4e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000af44:	2540      	movs	r5, #64	; 0x40
1000af46:	e002      	b.n	1000af4e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000af48:	2501      	movs	r5, #1
1000af4a:	e000      	b.n	1000af4e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000af4c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000af4e:	7ba3      	ldrb	r3, [r4, #14]
1000af50:	005b      	lsls	r3, r3, #1
1000af52:	2102      	movs	r1, #2
1000af54:	4019      	ands	r1, r3
1000af56:	7be2      	ldrb	r2, [r4, #15]
1000af58:	0092      	lsls	r2, r2, #2
1000af5a:	230c      	movs	r3, #12
1000af5c:	4013      	ands	r3, r2
1000af5e:	430b      	orrs	r3, r1
1000af60:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000af62:	7c23      	ldrb	r3, [r4, #16]
1000af64:	2b00      	cmp	r3, #0
1000af66:	d001      	beq.n	1000af6c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000af68:	2320      	movs	r3, #32
1000af6a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000af6c:	6962      	ldr	r2, [r4, #20]
1000af6e:	4b0b      	ldr	r3, [pc, #44]	; (1000af9c <dualtimer_init+0xf4>)
1000af70:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000af72:	2228      	movs	r2, #40	; 0x28
1000af74:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000af76:	4908      	ldr	r1, [pc, #32]	; (1000af98 <dualtimer_init+0xf0>)
1000af78:	3261      	adds	r2, #97	; 0x61
1000af7a:	32ff      	adds	r2, #255	; 0xff
1000af7c:	5c88      	ldrb	r0, [r1, r2]
1000af7e:	2302      	movs	r3, #2
1000af80:	4303      	orrs	r3, r0
1000af82:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000af84:	2001      	movs	r0, #1
1000af86:	4b06      	ldr	r3, [pc, #24]	; (1000afa0 <dualtimer_init+0xf8>)
1000af88:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000af8a:	4906      	ldr	r1, [pc, #24]	; (1000afa4 <dualtimer_init+0xfc>)
1000af8c:	201e      	movs	r0, #30
1000af8e:	4b06      	ldr	r3, [pc, #24]	; (1000afa8 <dualtimer_init+0x100>)
1000af90:	4798      	blx	r3
}
1000af92:	bd70      	pop	{r4, r5, r6, pc}
1000af94:	1000bde1 	.word	0x1000bde1
1000af98:	4000b000 	.word	0x4000b000
1000af9c:	40001000 	.word	0x40001000
1000afa0:	1000ae61 	.word	0x1000ae61
1000afa4:	1000add1 	.word	0x1000add1
1000afa8:	1000c249 	.word	0x1000c249

1000afac <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000afac:	2800      	cmp	r0, #0
1000afae:	d102      	bne.n	1000afb6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000afb0:	4b02      	ldr	r3, [pc, #8]	; (1000afbc <dualtimer_register_callback+0x10>)
1000afb2:	6019      	str	r1, [r3, #0]
1000afb4:	e001      	b.n	1000afba <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000afb6:	4b02      	ldr	r3, [pc, #8]	; (1000afc0 <dualtimer_register_callback+0x14>)
1000afb8:	6019      	str	r1, [r3, #0]
	}
}
1000afba:	4770      	bx	lr
1000afbc:	10016980 	.word	0x10016980
1000afc0:	10016984 	.word	0x10016984

1000afc4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000afc4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000afc6:	4b16      	ldr	r3, [pc, #88]	; (1000b020 <gpio_port0_isr_handler+0x5c>)
1000afc8:	681d      	ldr	r5, [r3, #0]
1000afca:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000afcc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000afce:	07cb      	lsls	r3, r1, #31
1000afd0:	d407      	bmi.n	1000afe2 <gpio_port0_isr_handler+0x1e>
1000afd2:	2301      	movs	r3, #1
1000afd4:	2401      	movs	r4, #1
1000afd6:	0018      	movs	r0, r3
1000afd8:	0022      	movs	r2, r4
1000afda:	409a      	lsls	r2, r3
1000afdc:	4211      	tst	r1, r2
1000afde:	d014      	beq.n	1000b00a <gpio_port0_isr_handler+0x46>
1000afe0:	e001      	b.n	1000afe6 <gpio_port0_isr_handler+0x22>
1000afe2:	2201      	movs	r2, #1
1000afe4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000afe6:	b292      	uxth	r2, r2
1000afe8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000afea:	2346      	movs	r3, #70	; 0x46
1000afec:	4a0c      	ldr	r2, [pc, #48]	; (1000b020 <gpio_port0_isr_handler+0x5c>)
1000afee:	5ad3      	ldrh	r3, [r2, r3]
1000aff0:	4103      	asrs	r3, r0
1000aff2:	07db      	lsls	r3, r3, #31
1000aff4:	d50c      	bpl.n	1000b010 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000aff6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000aff8:	5ad3      	ldrh	r3, [r2, r3]
1000affa:	4103      	asrs	r3, r0
1000affc:	07db      	lsls	r3, r3, #31
1000affe:	d507      	bpl.n	1000b010 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b000:	0080      	lsls	r0, r0, #2
1000b002:	1810      	adds	r0, r2, r0
1000b004:	6843      	ldr	r3, [r0, #4]
1000b006:	4798      	blx	r3
1000b008:	e002      	b.n	1000b010 <gpio_port0_isr_handler+0x4c>
1000b00a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b00c:	2b10      	cmp	r3, #16
1000b00e:	d1e2      	bne.n	1000afd6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b010:	2180      	movs	r1, #128	; 0x80
1000b012:	0409      	lsls	r1, r1, #16
1000b014:	23c0      	movs	r3, #192	; 0xc0
1000b016:	005b      	lsls	r3, r3, #1
1000b018:	4a02      	ldr	r2, [pc, #8]	; (1000b024 <gpio_port0_isr_handler+0x60>)
1000b01a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b01c:	bd70      	pop	{r4, r5, r6, pc}
1000b01e:	46c0      	nop			; (mov r8, r8)
1000b020:	100185fc 	.word	0x100185fc
1000b024:	e000e100 	.word	0xe000e100

1000b028 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b02a:	4b18      	ldr	r3, [pc, #96]	; (1000b08c <gpio_port1_isr_handler+0x64>)
1000b02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b02e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b030:	b2b6      	uxth	r6, r6
1000b032:	0037      	movs	r7, r6
1000b034:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b036:	0b76      	lsrs	r6, r6, #13
1000b038:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b03a:	4d14      	ldr	r5, [pc, #80]	; (1000b08c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b03c:	2e00      	cmp	r6, #0
1000b03e:	d001      	beq.n	1000b044 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b040:	4b13      	ldr	r3, [pc, #76]	; (1000b090 <gpio_port1_isr_handler+0x68>)
1000b042:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b044:	0022      	movs	r2, r4
1000b046:	2301      	movs	r3, #1
1000b048:	40a3      	lsls	r3, r4
1000b04a:	421f      	tst	r7, r3
1000b04c:	d013      	beq.n	1000b076 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b04e:	b29b      	uxth	r3, r3
1000b050:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b052:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b054:	238e      	movs	r3, #142	; 0x8e
1000b056:	5aeb      	ldrh	r3, [r5, r3]
1000b058:	4123      	asrs	r3, r4
1000b05a:	07db      	lsls	r3, r3, #31
1000b05c:	d50b      	bpl.n	1000b076 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b05e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b060:	490a      	ldr	r1, [pc, #40]	; (1000b08c <gpio_port1_isr_handler+0x64>)
1000b062:	5acb      	ldrh	r3, [r1, r3]
1000b064:	4123      	asrs	r3, r4
1000b066:	07db      	lsls	r3, r3, #31
1000b068:	d505      	bpl.n	1000b076 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b06a:	3212      	adds	r2, #18
1000b06c:	0092      	lsls	r2, r2, #2
1000b06e:	188a      	adds	r2, r1, r2
1000b070:	6853      	ldr	r3, [r2, #4]
1000b072:	4798      	blx	r3
				break;
1000b074:	e002      	b.n	1000b07c <gpio_port1_isr_handler+0x54>
1000b076:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b078:	2c10      	cmp	r4, #16
1000b07a:	d1df      	bne.n	1000b03c <gpio_port1_isr_handler+0x14>
1000b07c:	2180      	movs	r1, #128	; 0x80
1000b07e:	0449      	lsls	r1, r1, #17
1000b080:	23c0      	movs	r3, #192	; 0xc0
1000b082:	005b      	lsls	r3, r3, #1
1000b084:	4a03      	ldr	r2, [pc, #12]	; (1000b094 <gpio_port1_isr_handler+0x6c>)
1000b086:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b08a:	46c0      	nop			; (mov r8, r8)
1000b08c:	100185fc 	.word	0x100185fc
1000b090:	0001bc51 	.word	0x0001bc51
1000b094:	e000e100 	.word	0xe000e100

1000b098 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b098:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b09a:	2390      	movs	r3, #144	; 0x90
1000b09c:	4a1b      	ldr	r2, [pc, #108]	; (1000b10c <gpio_port2_isr_handler+0x74>)
1000b09e:	58d2      	ldr	r2, [r2, r3]
1000b0a0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b0a2:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b0a4:	04d9      	lsls	r1, r3, #19
1000b0a6:	d414      	bmi.n	1000b0d2 <gpio_port2_isr_handler+0x3a>
1000b0a8:	0499      	lsls	r1, r3, #18
1000b0aa:	d40a      	bmi.n	1000b0c2 <gpio_port2_isr_handler+0x2a>
1000b0ac:	0459      	lsls	r1, r3, #17
1000b0ae:	d40c      	bmi.n	1000b0ca <gpio_port2_isr_handler+0x32>
1000b0b0:	0bdb      	lsrs	r3, r3, #15
1000b0b2:	03db      	lsls	r3, r3, #15
1000b0b4:	b29b      	uxth	r3, r3
1000b0b6:	2b00      	cmp	r3, #0
1000b0b8:	d020      	beq.n	1000b0fc <gpio_port2_isr_handler+0x64>
1000b0ba:	2380      	movs	r3, #128	; 0x80
1000b0bc:	021b      	lsls	r3, r3, #8
1000b0be:	210f      	movs	r1, #15
1000b0c0:	e00a      	b.n	1000b0d8 <gpio_port2_isr_handler+0x40>
1000b0c2:	2380      	movs	r3, #128	; 0x80
1000b0c4:	019b      	lsls	r3, r3, #6
1000b0c6:	210d      	movs	r1, #13
1000b0c8:	e006      	b.n	1000b0d8 <gpio_port2_isr_handler+0x40>
1000b0ca:	2380      	movs	r3, #128	; 0x80
1000b0cc:	01db      	lsls	r3, r3, #7
1000b0ce:	210e      	movs	r1, #14
1000b0d0:	e002      	b.n	1000b0d8 <gpio_port2_isr_handler+0x40>
1000b0d2:	2380      	movs	r3, #128	; 0x80
1000b0d4:	015b      	lsls	r3, r3, #5
1000b0d6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b0d8:	b29b      	uxth	r3, r3
1000b0da:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b0dc:	23d6      	movs	r3, #214	; 0xd6
1000b0de:	4a0b      	ldr	r2, [pc, #44]	; (1000b10c <gpio_port2_isr_handler+0x74>)
1000b0e0:	5ad3      	ldrh	r3, [r2, r3]
1000b0e2:	410b      	asrs	r3, r1
1000b0e4:	07db      	lsls	r3, r3, #31
1000b0e6:	d509      	bpl.n	1000b0fc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b0e8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b0ea:	5ad3      	ldrh	r3, [r2, r3]
1000b0ec:	410b      	asrs	r3, r1
1000b0ee:	07db      	lsls	r3, r3, #31
1000b0f0:	d504      	bpl.n	1000b0fc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b0f2:	3124      	adds	r1, #36	; 0x24
1000b0f4:	0089      	lsls	r1, r1, #2
1000b0f6:	1851      	adds	r1, r2, r1
1000b0f8:	684b      	ldr	r3, [r1, #4]
1000b0fa:	4798      	blx	r3
1000b0fc:	2180      	movs	r1, #128	; 0x80
1000b0fe:	0489      	lsls	r1, r1, #18
1000b100:	23c0      	movs	r3, #192	; 0xc0
1000b102:	005b      	lsls	r3, r3, #1
1000b104:	4a02      	ldr	r2, [pc, #8]	; (1000b110 <gpio_port2_isr_handler+0x78>)
1000b106:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b108:	bd10      	pop	{r4, pc}
1000b10a:	46c0      	nop			; (mov r8, r8)
1000b10c:	100185fc 	.word	0x100185fc
1000b110:	e000e100 	.word	0xe000e100

1000b114 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b114:	2300      	movs	r3, #0
1000b116:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b118:	2201      	movs	r2, #1
1000b11a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b11c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b11e:	70c3      	strb	r3, [r0, #3]
}
1000b120:	4770      	bx	lr
1000b122:	46c0      	nop			; (mov r8, r8)

1000b124 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b124:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b126:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b128:	2801      	cmp	r0, #1
1000b12a:	d800      	bhi.n	1000b12e <gpio_pin_set_config+0xa>
1000b12c:	e0c8      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b12e:	2807      	cmp	r0, #7
1000b130:	d809      	bhi.n	1000b146 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b132:	4d64      	ldr	r5, [pc, #400]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b134:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b136:	3b10      	subs	r3, #16
1000b138:	4003      	ands	r3, r0
1000b13a:	009b      	lsls	r3, r3, #2
1000b13c:	2407      	movs	r4, #7
1000b13e:	409c      	lsls	r4, r3
1000b140:	43a2      	bics	r2, r4
1000b142:	646a      	str	r2, [r5, #68]	; 0x44
1000b144:	e029      	b.n	1000b19a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b146:	280f      	cmp	r0, #15
1000b148:	d809      	bhi.n	1000b15e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b14a:	4d5e      	ldr	r5, [pc, #376]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b14c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b14e:	2307      	movs	r3, #7
1000b150:	4003      	ands	r3, r0
1000b152:	009b      	lsls	r3, r3, #2
1000b154:	2407      	movs	r4, #7
1000b156:	409c      	lsls	r4, r3
1000b158:	43a2      	bics	r2, r4
1000b15a:	64aa      	str	r2, [r5, #72]	; 0x48
1000b15c:	e01d      	b.n	1000b19a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b15e:	2817      	cmp	r0, #23
1000b160:	d809      	bhi.n	1000b176 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b162:	4d58      	ldr	r5, [pc, #352]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b164:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b166:	2307      	movs	r3, #7
1000b168:	4003      	ands	r3, r0
1000b16a:	009b      	lsls	r3, r3, #2
1000b16c:	2407      	movs	r4, #7
1000b16e:	409c      	lsls	r4, r3
1000b170:	43a2      	bics	r2, r4
1000b172:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b174:	e011      	b.n	1000b19a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b176:	0003      	movs	r3, r0
1000b178:	3b2c      	subs	r3, #44	; 0x2c
1000b17a:	2b03      	cmp	r3, #3
1000b17c:	d80d      	bhi.n	1000b19a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b17e:	4d52      	ldr	r5, [pc, #328]	; (1000b2c8 <gpio_pin_set_config+0x1a4>)
1000b180:	2482      	movs	r4, #130	; 0x82
1000b182:	00e4      	lsls	r4, r4, #3
1000b184:	5d2a      	ldrb	r2, [r5, r4]
1000b186:	0712      	lsls	r2, r2, #28
1000b188:	2601      	movs	r6, #1
1000b18a:	409e      	lsls	r6, r3
1000b18c:	0f12      	lsrs	r2, r2, #28
1000b18e:	5d2b      	ldrb	r3, [r5, r4]
1000b190:	43b2      	bics	r2, r6
1000b192:	260f      	movs	r6, #15
1000b194:	43b3      	bics	r3, r6
1000b196:	4313      	orrs	r3, r2
1000b198:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b19a:	0003      	movs	r3, r0
1000b19c:	3b1d      	subs	r3, #29
1000b19e:	2b02      	cmp	r3, #2
1000b1a0:	d829      	bhi.n	1000b1f6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b1a2:	784b      	ldrb	r3, [r1, #1]
1000b1a4:	2b01      	cmp	r3, #1
1000b1a6:	d108      	bne.n	1000b1ba <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b1a8:	4d47      	ldr	r5, [pc, #284]	; (1000b2c8 <gpio_pin_set_config+0x1a4>)
1000b1aa:	7d2b      	ldrb	r3, [r5, #20]
1000b1ac:	241f      	movs	r4, #31
1000b1ae:	1a24      	subs	r4, r4, r0
1000b1b0:	2201      	movs	r2, #1
1000b1b2:	40a2      	lsls	r2, r4
1000b1b4:	4393      	bics	r3, r2
1000b1b6:	752b      	strb	r3, [r5, #20]
1000b1b8:	e008      	b.n	1000b1cc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b1ba:	4c43      	ldr	r4, [pc, #268]	; (1000b2c8 <gpio_pin_set_config+0x1a4>)
1000b1bc:	7d25      	ldrb	r5, [r4, #20]
1000b1be:	221f      	movs	r2, #31
1000b1c0:	1a12      	subs	r2, r2, r0
1000b1c2:	2301      	movs	r3, #1
1000b1c4:	4093      	lsls	r3, r2
1000b1c6:	432b      	orrs	r3, r5
1000b1c8:	b2db      	uxtb	r3, r3
1000b1ca:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b1cc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b1ce:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b1d0:	2a00      	cmp	r2, #0
1000b1d2:	d075      	beq.n	1000b2c0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b1d4:	493c      	ldr	r1, [pc, #240]	; (1000b2c8 <gpio_pin_set_config+0x1a4>)
1000b1d6:	880c      	ldrh	r4, [r1, #0]
1000b1d8:	221f      	movs	r2, #31
1000b1da:	1a10      	subs	r0, r2, r0
1000b1dc:	0080      	lsls	r0, r0, #2
1000b1de:	3301      	adds	r3, #1
1000b1e0:	4083      	lsls	r3, r0
1000b1e2:	4323      	orrs	r3, r4
1000b1e4:	b29b      	uxth	r3, r3
1000b1e6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b1e8:	4a38      	ldr	r2, [pc, #224]	; (1000b2cc <gpio_pin_set_config+0x1a8>)
1000b1ea:	7811      	ldrb	r1, [r2, #0]
1000b1ec:	2302      	movs	r3, #2
1000b1ee:	430b      	orrs	r3, r1
1000b1f0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b1f2:	2300      	movs	r3, #0
1000b1f4:	e064      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b1f6:	780a      	ldrb	r2, [r1, #0]
1000b1f8:	2a00      	cmp	r2, #0
1000b1fa:	d140      	bne.n	1000b27e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b1fc:	280f      	cmp	r0, #15
1000b1fe:	d808      	bhi.n	1000b212 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b200:	2301      	movs	r3, #1
1000b202:	4083      	lsls	r3, r0
1000b204:	b29b      	uxth	r3, r3
1000b206:	4a32      	ldr	r2, [pc, #200]	; (1000b2d0 <gpio_pin_set_config+0x1ac>)
1000b208:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b20a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b20c:	281f      	cmp	r0, #31
1000b20e:	d857      	bhi.n	1000b2c0 <gpio_pin_set_config+0x19c>
1000b210:	e012      	b.n	1000b238 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b212:	281f      	cmp	r0, #31
1000b214:	d807      	bhi.n	1000b226 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b216:	220f      	movs	r2, #15
1000b218:	4002      	ands	r2, r0
1000b21a:	2301      	movs	r3, #1
1000b21c:	4093      	lsls	r3, r2
1000b21e:	b29b      	uxth	r3, r3
1000b220:	4a2c      	ldr	r2, [pc, #176]	; (1000b2d4 <gpio_pin_set_config+0x1b0>)
1000b222:	8293      	strh	r3, [r2, #20]
1000b224:	e008      	b.n	1000b238 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b226:	230f      	movs	r3, #15
1000b228:	4018      	ands	r0, r3
1000b22a:	3b0e      	subs	r3, #14
1000b22c:	4083      	lsls	r3, r0
1000b22e:	b29b      	uxth	r3, r3
1000b230:	4a29      	ldr	r2, [pc, #164]	; (1000b2d8 <gpio_pin_set_config+0x1b4>)
1000b232:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b234:	2300      	movs	r3, #0
1000b236:	e043      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b238:	784b      	ldrb	r3, [r1, #1]
1000b23a:	2b01      	cmp	r3, #1
1000b23c:	d00c      	beq.n	1000b258 <gpio_pin_set_config+0x134>
1000b23e:	2b00      	cmp	r3, #0
1000b240:	d002      	beq.n	1000b248 <gpio_pin_set_config+0x124>
1000b242:	2b02      	cmp	r3, #2
1000b244:	d010      	beq.n	1000b268 <gpio_pin_set_config+0x144>
1000b246:	e03a      	b.n	1000b2be <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b248:	491e      	ldr	r1, [pc, #120]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b24a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b24c:	2301      	movs	r3, #1
1000b24e:	4083      	lsls	r3, r0
1000b250:	4313      	orrs	r3, r2
1000b252:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b254:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b256:	e033      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b258:	491a      	ldr	r1, [pc, #104]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b25a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b25c:	2201      	movs	r2, #1
1000b25e:	4082      	lsls	r2, r0
1000b260:	4393      	bics	r3, r2
1000b262:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b264:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b266:	e02b      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b268:	4b16      	ldr	r3, [pc, #88]	; (1000b2c4 <gpio_pin_set_config+0x1a0>)
1000b26a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b26c:	2201      	movs	r2, #1
1000b26e:	4082      	lsls	r2, r0
1000b270:	4311      	orrs	r1, r2
1000b272:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b274:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b276:	4391      	bics	r1, r2
1000b278:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b27a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b27c:	e020      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b27e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b280:	2a01      	cmp	r2, #1
1000b282:	d11d      	bne.n	1000b2c0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b284:	280f      	cmp	r0, #15
1000b286:	d806      	bhi.n	1000b296 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b288:	3301      	adds	r3, #1
1000b28a:	4083      	lsls	r3, r0
1000b28c:	b29b      	uxth	r3, r3
1000b28e:	4a10      	ldr	r2, [pc, #64]	; (1000b2d0 <gpio_pin_set_config+0x1ac>)
1000b290:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b292:	2300      	movs	r3, #0
1000b294:	e014      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b296:	281f      	cmp	r0, #31
1000b298:	d808      	bhi.n	1000b2ac <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b29a:	230f      	movs	r3, #15
1000b29c:	4018      	ands	r0, r3
1000b29e:	3b0e      	subs	r3, #14
1000b2a0:	4083      	lsls	r3, r0
1000b2a2:	b29b      	uxth	r3, r3
1000b2a4:	4a0b      	ldr	r2, [pc, #44]	; (1000b2d4 <gpio_pin_set_config+0x1b0>)
1000b2a6:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b2a8:	2300      	movs	r3, #0
1000b2aa:	e009      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b2ac:	230f      	movs	r3, #15
1000b2ae:	4018      	ands	r0, r3
1000b2b0:	3b0e      	subs	r3, #14
1000b2b2:	4083      	lsls	r3, r0
1000b2b4:	b29b      	uxth	r3, r3
1000b2b6:	4a08      	ldr	r2, [pc, #32]	; (1000b2d8 <gpio_pin_set_config+0x1b4>)
1000b2b8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b2ba:	2300      	movs	r3, #0
1000b2bc:	e000      	b.n	1000b2c0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b2be:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b2c0:	0018      	movs	r0, r3
1000b2c2:	bd70      	pop	{r4, r5, r6, pc}
1000b2c4:	4000b000 	.word	0x4000b000
1000b2c8:	4000f000 	.word	0x4000f000
1000b2cc:	4000e000 	.word	0x4000e000
1000b2d0:	40010000 	.word	0x40010000
1000b2d4:	40011000 	.word	0x40011000
1000b2d8:	40013000 	.word	0x40013000

1000b2dc <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b2dc:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b2de:	280f      	cmp	r0, #15
1000b2e0:	d810      	bhi.n	1000b304 <gpio_pin_set_output_level+0x28>
		if(level) {
1000b2e2:	2900      	cmp	r1, #0
1000b2e4:	d007      	beq.n	1000b2f6 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b2e6:	4a1d      	ldr	r2, [pc, #116]	; (1000b35c <gpio_pin_set_output_level+0x80>)
1000b2e8:	8891      	ldrh	r1, [r2, #4]
1000b2ea:	2301      	movs	r3, #1
1000b2ec:	4083      	lsls	r3, r0
1000b2ee:	430b      	orrs	r3, r1
1000b2f0:	b29b      	uxth	r3, r3
1000b2f2:	8093      	strh	r3, [r2, #4]
1000b2f4:	e031      	b.n	1000b35a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b2f6:	4919      	ldr	r1, [pc, #100]	; (1000b35c <gpio_pin_set_output_level+0x80>)
1000b2f8:	888b      	ldrh	r3, [r1, #4]
1000b2fa:	2201      	movs	r2, #1
1000b2fc:	4082      	lsls	r2, r0
1000b2fe:	4393      	bics	r3, r2
1000b300:	808b      	strh	r3, [r1, #4]
1000b302:	e02a      	b.n	1000b35a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b304:	281f      	cmp	r0, #31
1000b306:	d814      	bhi.n	1000b332 <gpio_pin_set_output_level+0x56>
		if(level) {
1000b308:	2900      	cmp	r1, #0
1000b30a:	d009      	beq.n	1000b320 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b30c:	4914      	ldr	r1, [pc, #80]	; (1000b360 <gpio_pin_set_output_level+0x84>)
1000b30e:	888c      	ldrh	r4, [r1, #4]
1000b310:	220f      	movs	r2, #15
1000b312:	4010      	ands	r0, r2
1000b314:	2301      	movs	r3, #1
1000b316:	4083      	lsls	r3, r0
1000b318:	4323      	orrs	r3, r4
1000b31a:	b29b      	uxth	r3, r3
1000b31c:	808b      	strh	r3, [r1, #4]
1000b31e:	e01c      	b.n	1000b35a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b320:	490f      	ldr	r1, [pc, #60]	; (1000b360 <gpio_pin_set_output_level+0x84>)
1000b322:	888b      	ldrh	r3, [r1, #4]
1000b324:	220f      	movs	r2, #15
1000b326:	4010      	ands	r0, r2
1000b328:	3a0e      	subs	r2, #14
1000b32a:	4082      	lsls	r2, r0
1000b32c:	4393      	bics	r3, r2
1000b32e:	808b      	strh	r3, [r1, #4]
1000b330:	e013      	b.n	1000b35a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b332:	2900      	cmp	r1, #0
1000b334:	d009      	beq.n	1000b34a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b336:	490b      	ldr	r1, [pc, #44]	; (1000b364 <gpio_pin_set_output_level+0x88>)
1000b338:	888c      	ldrh	r4, [r1, #4]
1000b33a:	220f      	movs	r2, #15
1000b33c:	4010      	ands	r0, r2
1000b33e:	2301      	movs	r3, #1
1000b340:	4083      	lsls	r3, r0
1000b342:	4323      	orrs	r3, r4
1000b344:	b29b      	uxth	r3, r3
1000b346:	808b      	strh	r3, [r1, #4]
1000b348:	e007      	b.n	1000b35a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b34a:	4906      	ldr	r1, [pc, #24]	; (1000b364 <gpio_pin_set_output_level+0x88>)
1000b34c:	888b      	ldrh	r3, [r1, #4]
1000b34e:	220f      	movs	r2, #15
1000b350:	4010      	ands	r0, r2
1000b352:	3a0e      	subs	r2, #14
1000b354:	4082      	lsls	r2, r0
1000b356:	4393      	bics	r3, r2
1000b358:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b35a:	bd10      	pop	{r4, pc}
1000b35c:	40010000 	.word	0x40010000
1000b360:	40011000 	.word	0x40011000
1000b364:	40013000 	.word	0x40013000

1000b368 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b368:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b36a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b36c:	23ff      	movs	r3, #255	; 0xff
1000b36e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b370:	2807      	cmp	r0, #7
1000b372:	d833      	bhi.n	1000b3dc <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b374:	4a4e      	ldr	r2, [pc, #312]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b376:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b378:	3bf8      	subs	r3, #248	; 0xf8
1000b37a:	4003      	ands	r3, r0
1000b37c:	009b      	lsls	r3, r3, #2
1000b37e:	2607      	movs	r6, #7
1000b380:	409e      	lsls	r6, r3
1000b382:	43b4      	bics	r4, r6
1000b384:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b386:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b388:	000e      	movs	r6, r1
1000b38a:	409e      	lsls	r6, r3
1000b38c:	0033      	movs	r3, r6
1000b38e:	4323      	orrs	r3, r4
1000b390:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b392:	2901      	cmp	r1, #1
1000b394:	d000      	beq.n	1000b398 <gpio_pinmux_cofiguration+0x30>
1000b396:	e08a      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b398:	2803      	cmp	r0, #3
1000b39a:	d80f      	bhi.n	1000b3bc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b39c:	0011      	movs	r1, r2
1000b39e:	22d0      	movs	r2, #208	; 0xd0
1000b3a0:	0052      	lsls	r2, r2, #1
1000b3a2:	588c      	ldr	r4, [r1, r2]
1000b3a4:	2303      	movs	r3, #3
1000b3a6:	4018      	ands	r0, r3
1000b3a8:	00c0      	lsls	r0, r0, #3
1000b3aa:	333c      	adds	r3, #60	; 0x3c
1000b3ac:	4083      	lsls	r3, r0
1000b3ae:	439c      	bics	r4, r3
1000b3b0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b3b2:	588b      	ldr	r3, [r1, r2]
1000b3b4:	4085      	lsls	r5, r0
1000b3b6:	431d      	orrs	r5, r3
1000b3b8:	508d      	str	r5, [r1, r2]
1000b3ba:	e078      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b3bc:	493c      	ldr	r1, [pc, #240]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b3be:	22d2      	movs	r2, #210	; 0xd2
1000b3c0:	0052      	lsls	r2, r2, #1
1000b3c2:	588c      	ldr	r4, [r1, r2]
1000b3c4:	2303      	movs	r3, #3
1000b3c6:	4018      	ands	r0, r3
1000b3c8:	00c0      	lsls	r0, r0, #3
1000b3ca:	333c      	adds	r3, #60	; 0x3c
1000b3cc:	4083      	lsls	r3, r0
1000b3ce:	439c      	bics	r4, r3
1000b3d0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b3d2:	588b      	ldr	r3, [r1, r2]
1000b3d4:	4085      	lsls	r5, r0
1000b3d6:	431d      	orrs	r5, r3
1000b3d8:	508d      	str	r5, [r1, r2]
1000b3da:	e068      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b3dc:	280f      	cmp	r0, #15
1000b3de:	d832      	bhi.n	1000b446 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b3e0:	4a33      	ldr	r2, [pc, #204]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b3e2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b3e4:	2307      	movs	r3, #7
1000b3e6:	4003      	ands	r3, r0
1000b3e8:	009b      	lsls	r3, r3, #2
1000b3ea:	2607      	movs	r6, #7
1000b3ec:	409e      	lsls	r6, r3
1000b3ee:	43b4      	bics	r4, r6
1000b3f0:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b3f2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b3f4:	000e      	movs	r6, r1
1000b3f6:	409e      	lsls	r6, r3
1000b3f8:	0033      	movs	r3, r6
1000b3fa:	4323      	orrs	r3, r4
1000b3fc:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b3fe:	2901      	cmp	r1, #1
1000b400:	d155      	bne.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b402:	280b      	cmp	r0, #11
1000b404:	d80f      	bhi.n	1000b426 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b406:	0011      	movs	r1, r2
1000b408:	22d4      	movs	r2, #212	; 0xd4
1000b40a:	0052      	lsls	r2, r2, #1
1000b40c:	588c      	ldr	r4, [r1, r2]
1000b40e:	2303      	movs	r3, #3
1000b410:	4018      	ands	r0, r3
1000b412:	00c0      	lsls	r0, r0, #3
1000b414:	333c      	adds	r3, #60	; 0x3c
1000b416:	4083      	lsls	r3, r0
1000b418:	439c      	bics	r4, r3
1000b41a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b41c:	588b      	ldr	r3, [r1, r2]
1000b41e:	4085      	lsls	r5, r0
1000b420:	431d      	orrs	r5, r3
1000b422:	508d      	str	r5, [r1, r2]
1000b424:	e043      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b426:	4922      	ldr	r1, [pc, #136]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b428:	22d6      	movs	r2, #214	; 0xd6
1000b42a:	0052      	lsls	r2, r2, #1
1000b42c:	588c      	ldr	r4, [r1, r2]
1000b42e:	2303      	movs	r3, #3
1000b430:	4018      	ands	r0, r3
1000b432:	00c0      	lsls	r0, r0, #3
1000b434:	333c      	adds	r3, #60	; 0x3c
1000b436:	4083      	lsls	r3, r0
1000b438:	439c      	bics	r4, r3
1000b43a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b43c:	588b      	ldr	r3, [r1, r2]
1000b43e:	4085      	lsls	r5, r0
1000b440:	431d      	orrs	r5, r3
1000b442:	508d      	str	r5, [r1, r2]
1000b444:	e033      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b446:	2817      	cmp	r0, #23
1000b448:	d831      	bhi.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b44a:	4a19      	ldr	r2, [pc, #100]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b44c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b44e:	2307      	movs	r3, #7
1000b450:	4003      	ands	r3, r0
1000b452:	009b      	lsls	r3, r3, #2
1000b454:	2607      	movs	r6, #7
1000b456:	409e      	lsls	r6, r3
1000b458:	43b4      	bics	r4, r6
1000b45a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b45c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b45e:	000e      	movs	r6, r1
1000b460:	409e      	lsls	r6, r3
1000b462:	0033      	movs	r3, r6
1000b464:	4323      	orrs	r3, r4
1000b466:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b468:	2901      	cmp	r1, #1
1000b46a:	d120      	bne.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b46c:	2813      	cmp	r0, #19
1000b46e:	d80f      	bhi.n	1000b490 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b470:	0011      	movs	r1, r2
1000b472:	22d8      	movs	r2, #216	; 0xd8
1000b474:	0052      	lsls	r2, r2, #1
1000b476:	588c      	ldr	r4, [r1, r2]
1000b478:	2303      	movs	r3, #3
1000b47a:	4018      	ands	r0, r3
1000b47c:	00c0      	lsls	r0, r0, #3
1000b47e:	333c      	adds	r3, #60	; 0x3c
1000b480:	4083      	lsls	r3, r0
1000b482:	439c      	bics	r4, r3
1000b484:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b486:	588b      	ldr	r3, [r1, r2]
1000b488:	4085      	lsls	r5, r0
1000b48a:	431d      	orrs	r5, r3
1000b48c:	508d      	str	r5, [r1, r2]
1000b48e:	e00e      	b.n	1000b4ae <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b490:	4a07      	ldr	r2, [pc, #28]	; (1000b4b0 <gpio_pinmux_cofiguration+0x148>)
1000b492:	23da      	movs	r3, #218	; 0xda
1000b494:	005b      	lsls	r3, r3, #1
1000b496:	58d1      	ldr	r1, [r2, r3]
1000b498:	2403      	movs	r4, #3
1000b49a:	4020      	ands	r0, r4
1000b49c:	00c0      	lsls	r0, r0, #3
1000b49e:	343c      	adds	r4, #60	; 0x3c
1000b4a0:	4084      	lsls	r4, r0
1000b4a2:	43a1      	bics	r1, r4
1000b4a4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b4a6:	58d1      	ldr	r1, [r2, r3]
1000b4a8:	4085      	lsls	r5, r0
1000b4aa:	430d      	orrs	r5, r1
1000b4ac:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b4ae:	bd70      	pop	{r4, r5, r6, pc}
1000b4b0:	4000b000 	.word	0x4000b000

1000b4b4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b4b6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b4b8:	280f      	cmp	r0, #15
1000b4ba:	d904      	bls.n	1000b4c6 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b4bc:	241f      	movs	r4, #31
1000b4be:	4284      	cmp	r4, r0
1000b4c0:	415b      	adcs	r3, r3
1000b4c2:	3c1d      	subs	r4, #29
1000b4c4:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b4c6:	2a01      	cmp	r2, #1
1000b4c8:	d016      	beq.n	1000b4f8 <gpio_register_callback+0x44>
1000b4ca:	2a00      	cmp	r2, #0
1000b4cc:	d004      	beq.n	1000b4d8 <gpio_register_callback+0x24>
1000b4ce:	2a02      	cmp	r2, #2
1000b4d0:	d022      	beq.n	1000b518 <gpio_register_callback+0x64>
1000b4d2:	2a03      	cmp	r2, #3
1000b4d4:	d030      	beq.n	1000b538 <gpio_register_callback+0x84>
1000b4d6:	e03e      	b.n	1000b556 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b4d8:	4e29      	ldr	r6, [pc, #164]	; (1000b580 <gpio_register_callback+0xcc>)
1000b4da:	00dc      	lsls	r4, r3, #3
1000b4dc:	18e2      	adds	r2, r4, r3
1000b4de:	00d2      	lsls	r2, r2, #3
1000b4e0:	5997      	ldr	r7, [r2, r6]
1000b4e2:	250f      	movs	r5, #15
1000b4e4:	4005      	ands	r5, r0
1000b4e6:	2201      	movs	r2, #1
1000b4e8:	40aa      	lsls	r2, r5
1000b4ea:	b292      	uxth	r2, r2
1000b4ec:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b4ee:	18e4      	adds	r4, r4, r3
1000b4f0:	00e4      	lsls	r4, r4, #3
1000b4f2:	59a4      	ldr	r4, [r4, r6]
1000b4f4:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b4f6:	e02e      	b.n	1000b556 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b4f8:	4e21      	ldr	r6, [pc, #132]	; (1000b580 <gpio_register_callback+0xcc>)
1000b4fa:	00dc      	lsls	r4, r3, #3
1000b4fc:	18e2      	adds	r2, r4, r3
1000b4fe:	00d2      	lsls	r2, r2, #3
1000b500:	5997      	ldr	r7, [r2, r6]
1000b502:	250f      	movs	r5, #15
1000b504:	4005      	ands	r5, r0
1000b506:	2201      	movs	r2, #1
1000b508:	40aa      	lsls	r2, r5
1000b50a:	b292      	uxth	r2, r2
1000b50c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b50e:	18e4      	adds	r4, r4, r3
1000b510:	00e4      	lsls	r4, r4, #3
1000b512:	59a4      	ldr	r4, [r4, r6]
1000b514:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b516:	e01e      	b.n	1000b556 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b518:	4e19      	ldr	r6, [pc, #100]	; (1000b580 <gpio_register_callback+0xcc>)
1000b51a:	00dc      	lsls	r4, r3, #3
1000b51c:	18e2      	adds	r2, r4, r3
1000b51e:	00d2      	lsls	r2, r2, #3
1000b520:	5997      	ldr	r7, [r2, r6]
1000b522:	250f      	movs	r5, #15
1000b524:	4005      	ands	r5, r0
1000b526:	2201      	movs	r2, #1
1000b528:	40aa      	lsls	r2, r5
1000b52a:	b292      	uxth	r2, r2
1000b52c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b52e:	18e4      	adds	r4, r4, r3
1000b530:	00e4      	lsls	r4, r4, #3
1000b532:	59a4      	ldr	r4, [r4, r6]
1000b534:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b536:	e00e      	b.n	1000b556 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b538:	4e11      	ldr	r6, [pc, #68]	; (1000b580 <gpio_register_callback+0xcc>)
1000b53a:	00dc      	lsls	r4, r3, #3
1000b53c:	18e2      	adds	r2, r4, r3
1000b53e:	00d2      	lsls	r2, r2, #3
1000b540:	5997      	ldr	r7, [r2, r6]
1000b542:	250f      	movs	r5, #15
1000b544:	4005      	ands	r5, r0
1000b546:	2201      	movs	r2, #1
1000b548:	40aa      	lsls	r2, r5
1000b54a:	b292      	uxth	r2, r2
1000b54c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b54e:	18e4      	adds	r4, r4, r3
1000b550:	00e4      	lsls	r4, r4, #3
1000b552:	59a4      	ldr	r4, [r4, r6]
1000b554:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b556:	220f      	movs	r2, #15
1000b558:	4010      	ands	r0, r2
1000b55a:	4c09      	ldr	r4, [pc, #36]	; (1000b580 <gpio_register_callback+0xcc>)
1000b55c:	00dd      	lsls	r5, r3, #3
1000b55e:	18ea      	adds	r2, r5, r3
1000b560:	0052      	lsls	r2, r2, #1
1000b562:	1812      	adds	r2, r2, r0
1000b564:	0092      	lsls	r2, r2, #2
1000b566:	18a2      	adds	r2, r4, r2
1000b568:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b56a:	18ea      	adds	r2, r5, r3
1000b56c:	00d2      	lsls	r2, r2, #3
1000b56e:	18a2      	adds	r2, r4, r2
1000b570:	3244      	adds	r2, #68	; 0x44
1000b572:	2101      	movs	r1, #1
1000b574:	4081      	lsls	r1, r0
1000b576:	8813      	ldrh	r3, [r2, #0]
1000b578:	430b      	orrs	r3, r1
1000b57a:	8013      	strh	r3, [r2, #0]
}
1000b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b57e:	46c0      	nop			; (mov r8, r8)
1000b580:	100185fc 	.word	0x100185fc

1000b584 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000b584:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b586:	280f      	cmp	r0, #15
1000b588:	d805      	bhi.n	1000b596 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b58a:	2280      	movs	r2, #128	; 0x80
1000b58c:	0412      	lsls	r2, r2, #16
1000b58e:	4b12      	ldr	r3, [pc, #72]	; (1000b5d8 <gpio_enable_callback+0x54>)
1000b590:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000b592:	2200      	movs	r2, #0
1000b594:	e00c      	b.n	1000b5b0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000b596:	281f      	cmp	r0, #31
1000b598:	d805      	bhi.n	1000b5a6 <gpio_enable_callback+0x22>
1000b59a:	2280      	movs	r2, #128	; 0x80
1000b59c:	0452      	lsls	r2, r2, #17
1000b59e:	4b0e      	ldr	r3, [pc, #56]	; (1000b5d8 <gpio_enable_callback+0x54>)
1000b5a0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000b5a2:	2201      	movs	r2, #1
1000b5a4:	e004      	b.n	1000b5b0 <gpio_enable_callback+0x2c>
1000b5a6:	2280      	movs	r2, #128	; 0x80
1000b5a8:	0492      	lsls	r2, r2, #18
1000b5aa:	4b0b      	ldr	r3, [pc, #44]	; (1000b5d8 <gpio_enable_callback+0x54>)
1000b5ac:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000b5ae:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000b5b0:	230f      	movs	r3, #15
1000b5b2:	4018      	ands	r0, r3
1000b5b4:	2101      	movs	r1, #1
1000b5b6:	4081      	lsls	r1, r0
1000b5b8:	4c08      	ldr	r4, [pc, #32]	; (1000b5dc <gpio_enable_callback+0x58>)
1000b5ba:	00d5      	lsls	r5, r2, #3
1000b5bc:	18ab      	adds	r3, r5, r2
1000b5be:	00db      	lsls	r3, r3, #3
1000b5c0:	18e3      	adds	r3, r4, r3
1000b5c2:	3346      	adds	r3, #70	; 0x46
1000b5c4:	8818      	ldrh	r0, [r3, #0]
1000b5c6:	4308      	orrs	r0, r1
1000b5c8:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000b5ca:	18aa      	adds	r2, r5, r2
1000b5cc:	00d2      	lsls	r2, r2, #3
1000b5ce:	5913      	ldr	r3, [r2, r4]
1000b5d0:	b289      	uxth	r1, r1
1000b5d2:	8419      	strh	r1, [r3, #32]
}
1000b5d4:	bd30      	pop	{r4, r5, pc}
1000b5d6:	46c0      	nop			; (mov r8, r8)
1000b5d8:	e000e100 	.word	0xe000e100
1000b5dc:	100185fc 	.word	0x100185fc

1000b5e0 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b5e0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b5e2:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b5e4:	280f      	cmp	r0, #15
1000b5e6:	d904      	bls.n	1000b5f2 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b5e8:	221f      	movs	r2, #31
1000b5ea:	4282      	cmp	r2, r0
1000b5ec:	415b      	adcs	r3, r3
1000b5ee:	3a1d      	subs	r2, #29
1000b5f0:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b5f2:	220f      	movs	r2, #15
1000b5f4:	4010      	ands	r0, r2
1000b5f6:	2101      	movs	r1, #1
1000b5f8:	4081      	lsls	r1, r0
1000b5fa:	4c07      	ldr	r4, [pc, #28]	; (1000b618 <gpio_disable_callback+0x38>)
1000b5fc:	00dd      	lsls	r5, r3, #3
1000b5fe:	18ea      	adds	r2, r5, r3
1000b600:	00d2      	lsls	r2, r2, #3
1000b602:	18a2      	adds	r2, r4, r2
1000b604:	3246      	adds	r2, #70	; 0x46
1000b606:	8810      	ldrh	r0, [r2, #0]
1000b608:	4388      	bics	r0, r1
1000b60a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b60c:	18eb      	adds	r3, r5, r3
1000b60e:	00db      	lsls	r3, r3, #3
1000b610:	591b      	ldr	r3, [r3, r4]
1000b612:	b289      	uxth	r1, r1
1000b614:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b616:	bd30      	pop	{r4, r5, pc}
1000b618:	100185fc 	.word	0x100185fc

1000b61c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b61c:	b510      	push	{r4, lr}
1000b61e:	4a11      	ldr	r2, [pc, #68]	; (1000b664 <gpio_init+0x48>)
1000b620:	0010      	movs	r0, r2
1000b622:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b624:	2100      	movs	r1, #0
1000b626:	e007      	b.n	1000b638 <gpio_init+0x1c>
1000b628:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b62a:	4293      	cmp	r3, r2
1000b62c:	d1fc      	bne.n	1000b628 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b62e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b630:	8011      	strh	r1, [r2, #0]
1000b632:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b634:	4282      	cmp	r2, r0
1000b636:	d002      	beq.n	1000b63e <gpio_init+0x22>
1000b638:	0013      	movs	r3, r2
1000b63a:	3b40      	subs	r3, #64	; 0x40
1000b63c:	e7f4      	b.n	1000b628 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b63e:	4b0a      	ldr	r3, [pc, #40]	; (1000b668 <gpio_init+0x4c>)
1000b640:	4a0a      	ldr	r2, [pc, #40]	; (1000b66c <gpio_init+0x50>)
1000b642:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b644:	4a0a      	ldr	r2, [pc, #40]	; (1000b670 <gpio_init+0x54>)
1000b646:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b648:	490a      	ldr	r1, [pc, #40]	; (1000b674 <gpio_init+0x58>)
1000b64a:	2290      	movs	r2, #144	; 0x90
1000b64c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b64e:	490a      	ldr	r1, [pc, #40]	; (1000b678 <gpio_init+0x5c>)
1000b650:	2027      	movs	r0, #39	; 0x27
1000b652:	4c0a      	ldr	r4, [pc, #40]	; (1000b67c <gpio_init+0x60>)
1000b654:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b656:	490a      	ldr	r1, [pc, #40]	; (1000b680 <gpio_init+0x64>)
1000b658:	2028      	movs	r0, #40	; 0x28
1000b65a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b65c:	4909      	ldr	r1, [pc, #36]	; (1000b684 <gpio_init+0x68>)
1000b65e:	2029      	movs	r0, #41	; 0x29
1000b660:	47a0      	blx	r4
}
1000b662:	bd10      	pop	{r4, pc}
1000b664:	10018640 	.word	0x10018640
1000b668:	100185fc 	.word	0x100185fc
1000b66c:	40010000 	.word	0x40010000
1000b670:	40011000 	.word	0x40011000
1000b674:	40013000 	.word	0x40013000
1000b678:	1000afc5 	.word	0x1000afc5
1000b67c:	1000c249 	.word	0x1000c249
1000b680:	1000b029 	.word	0x1000b029
1000b684:	1000b099 	.word	0x1000b099

1000b688 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000b688:	2801      	cmp	r0, #1
1000b68a:	d00d      	beq.n	1000b6a8 <system_clock_config+0x20>
1000b68c:	2800      	cmp	r0, #0
1000b68e:	d002      	beq.n	1000b696 <system_clock_config+0xe>
1000b690:	2802      	cmp	r0, #2
1000b692:	d01c      	beq.n	1000b6ce <system_clock_config+0x46>
1000b694:	e02e      	b.n	1000b6f4 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b696:	4a18      	ldr	r2, [pc, #96]	; (1000b6f8 <system_clock_config+0x70>)
1000b698:	6990      	ldr	r0, [r2, #24]
1000b69a:	230c      	movs	r3, #12
1000b69c:	4303      	orrs	r3, r0
1000b69e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000b6a0:	4a16      	ldr	r2, [pc, #88]	; (1000b6fc <system_clock_config+0x74>)
1000b6a2:	4b17      	ldr	r3, [pc, #92]	; (1000b700 <system_clock_config+0x78>)
1000b6a4:	601a      	str	r2, [r3, #0]
			break;
1000b6a6:	e01a      	b.n	1000b6de <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b6a8:	4b13      	ldr	r3, [pc, #76]	; (1000b6f8 <system_clock_config+0x70>)
1000b6aa:	6998      	ldr	r0, [r3, #24]
1000b6ac:	2208      	movs	r2, #8
1000b6ae:	4302      	orrs	r2, r0
1000b6b0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b6b2:	699a      	ldr	r2, [r3, #24]
1000b6b4:	2004      	movs	r0, #4
1000b6b6:	4382      	bics	r2, r0
1000b6b8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b6ba:	4a12      	ldr	r2, [pc, #72]	; (1000b704 <system_clock_config+0x7c>)
1000b6bc:	6853      	ldr	r3, [r2, #4]
1000b6be:	2080      	movs	r0, #128	; 0x80
1000b6c0:	0300      	lsls	r0, r0, #12
1000b6c2:	4303      	orrs	r3, r0
1000b6c4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b6c6:	4a10      	ldr	r2, [pc, #64]	; (1000b708 <system_clock_config+0x80>)
1000b6c8:	4b0d      	ldr	r3, [pc, #52]	; (1000b700 <system_clock_config+0x78>)
1000b6ca:	601a      	str	r2, [r3, #0]
			break;
1000b6cc:	e007      	b.n	1000b6de <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b6ce:	4a0a      	ldr	r2, [pc, #40]	; (1000b6f8 <system_clock_config+0x70>)
1000b6d0:	6993      	ldr	r3, [r2, #24]
1000b6d2:	200c      	movs	r0, #12
1000b6d4:	4383      	bics	r3, r0
1000b6d6:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b6d8:	4a08      	ldr	r2, [pc, #32]	; (1000b6fc <system_clock_config+0x74>)
1000b6da:	4b09      	ldr	r3, [pc, #36]	; (1000b700 <system_clock_config+0x78>)
1000b6dc:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b6de:	4b06      	ldr	r3, [pc, #24]	; (1000b6f8 <system_clock_config+0x70>)
1000b6e0:	699a      	ldr	r2, [r3, #24]
1000b6e2:	2003      	movs	r0, #3
1000b6e4:	4382      	bics	r2, r0
1000b6e6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b6e8:	699a      	ldr	r2, [r3, #24]
1000b6ea:	4001      	ands	r1, r0
1000b6ec:	4311      	orrs	r1, r2
1000b6ee:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b6f0:	2000      	movs	r0, #0
1000b6f2:	e000      	b.n	1000b6f6 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b6f4:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b6f6:	4770      	bx	lr
1000b6f8:	4000b000 	.word	0x4000b000
1000b6fc:	018cba80 	.word	0x018cba80
1000b700:	100186d4 	.word	0x100186d4
1000b704:	4000f000 	.word	0x4000f000
1000b708:	001e8480 	.word	0x001e8480

1000b70c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b70c:	4b01      	ldr	r3, [pc, #4]	; (1000b714 <system_clock_get_value+0x8>)
1000b70e:	6818      	ldr	r0, [r3, #0]
}
1000b710:	4770      	bx	lr
1000b712:	46c0      	nop			; (mov r8, r8)
1000b714:	100186d4 	.word	0x100186d4

1000b718 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b718:	b500      	push	{lr}
	switch (peripheral) {
1000b71a:	2835      	cmp	r0, #53	; 0x35
1000b71c:	d900      	bls.n	1000b720 <system_clock_peripheral_enable+0x8>
1000b71e:	e1a2      	b.n	1000ba66 <system_clock_peripheral_enable+0x34e>
1000b720:	0080      	lsls	r0, r0, #2
1000b722:	4bd2      	ldr	r3, [pc, #840]	; (1000ba6c <system_clock_peripheral_enable+0x354>)
1000b724:	581b      	ldr	r3, [r3, r0]
1000b726:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b728:	4ad1      	ldr	r2, [pc, #836]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b72a:	68d1      	ldr	r1, [r2, #12]
1000b72c:	2302      	movs	r3, #2
1000b72e:	430b      	orrs	r3, r1
1000b730:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b732:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b734:	e198      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b736:	4ace      	ldr	r2, [pc, #824]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b738:	68d1      	ldr	r1, [r2, #12]
1000b73a:	2304      	movs	r3, #4
1000b73c:	430b      	orrs	r3, r1
1000b73e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b740:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b742:	e191      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b744:	4aca      	ldr	r2, [pc, #808]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b746:	68d1      	ldr	r1, [r2, #12]
1000b748:	2308      	movs	r3, #8
1000b74a:	430b      	orrs	r3, r1
1000b74c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b74e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b750:	e18a      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b752:	4ac7      	ldr	r2, [pc, #796]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b754:	68d1      	ldr	r1, [r2, #12]
1000b756:	2310      	movs	r3, #16
1000b758:	430b      	orrs	r3, r1
1000b75a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b75c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b75e:	e183      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b760:	4ac3      	ldr	r2, [pc, #780]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b762:	68d1      	ldr	r1, [r2, #12]
1000b764:	2320      	movs	r3, #32
1000b766:	430b      	orrs	r3, r1
1000b768:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b76a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b76c:	e17c      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b76e:	4ac0      	ldr	r2, [pc, #768]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b770:	68d1      	ldr	r1, [r2, #12]
1000b772:	2380      	movs	r3, #128	; 0x80
1000b774:	430b      	orrs	r3, r1
1000b776:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b77a:	e175      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b77c:	4abc      	ldr	r2, [pc, #752]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b77e:	68d3      	ldr	r3, [r2, #12]
1000b780:	2180      	movs	r1, #128	; 0x80
1000b782:	0049      	lsls	r1, r1, #1
1000b784:	430b      	orrs	r3, r1
1000b786:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b78a:	e16d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b78c:	4ab8      	ldr	r2, [pc, #736]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b78e:	68d3      	ldr	r3, [r2, #12]
1000b790:	2180      	movs	r1, #128	; 0x80
1000b792:	0109      	lsls	r1, r1, #4
1000b794:	430b      	orrs	r3, r1
1000b796:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b79a:	e165      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b79c:	4ab4      	ldr	r2, [pc, #720]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b79e:	68d3      	ldr	r3, [r2, #12]
1000b7a0:	2180      	movs	r1, #128	; 0x80
1000b7a2:	0149      	lsls	r1, r1, #5
1000b7a4:	430b      	orrs	r3, r1
1000b7a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b7aa:	e15d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7ac:	4ab0      	ldr	r2, [pc, #704]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7ae:	68d3      	ldr	r3, [r2, #12]
1000b7b0:	2180      	movs	r1, #128	; 0x80
1000b7b2:	0189      	lsls	r1, r1, #6
1000b7b4:	430b      	orrs	r3, r1
1000b7b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b7ba:	e155      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7bc:	4aac      	ldr	r2, [pc, #688]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7be:	68d3      	ldr	r3, [r2, #12]
1000b7c0:	2180      	movs	r1, #128	; 0x80
1000b7c2:	01c9      	lsls	r1, r1, #7
1000b7c4:	430b      	orrs	r3, r1
1000b7c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b7ca:	e14d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7cc:	4aa8      	ldr	r2, [pc, #672]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7ce:	68d3      	ldr	r3, [r2, #12]
1000b7d0:	2180      	movs	r1, #128	; 0x80
1000b7d2:	0209      	lsls	r1, r1, #8
1000b7d4:	430b      	orrs	r3, r1
1000b7d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b7da:	e145      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7dc:	4aa4      	ldr	r2, [pc, #656]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7de:	68d3      	ldr	r3, [r2, #12]
1000b7e0:	2180      	movs	r1, #128	; 0x80
1000b7e2:	0249      	lsls	r1, r1, #9
1000b7e4:	430b      	orrs	r3, r1
1000b7e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b7ea:	e13d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7ec:	4aa0      	ldr	r2, [pc, #640]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7ee:	68d3      	ldr	r3, [r2, #12]
1000b7f0:	2180      	movs	r1, #128	; 0x80
1000b7f2:	0289      	lsls	r1, r1, #10
1000b7f4:	430b      	orrs	r3, r1
1000b7f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b7fa:	e135      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b7fc:	4a9c      	ldr	r2, [pc, #624]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b7fe:	68d3      	ldr	r3, [r2, #12]
1000b800:	2180      	movs	r1, #128	; 0x80
1000b802:	02c9      	lsls	r1, r1, #11
1000b804:	430b      	orrs	r3, r1
1000b806:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b80a:	e12d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b80c:	4a98      	ldr	r2, [pc, #608]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b80e:	68d3      	ldr	r3, [r2, #12]
1000b810:	2180      	movs	r1, #128	; 0x80
1000b812:	0309      	lsls	r1, r1, #12
1000b814:	430b      	orrs	r3, r1
1000b816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b81a:	e125      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b81c:	4a94      	ldr	r2, [pc, #592]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b81e:	68d3      	ldr	r3, [r2, #12]
1000b820:	2180      	movs	r1, #128	; 0x80
1000b822:	0349      	lsls	r1, r1, #13
1000b824:	430b      	orrs	r3, r1
1000b826:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b82a:	e11d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b82c:	4a90      	ldr	r2, [pc, #576]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b82e:	68d3      	ldr	r3, [r2, #12]
1000b830:	2180      	movs	r1, #128	; 0x80
1000b832:	0389      	lsls	r1, r1, #14
1000b834:	430b      	orrs	r3, r1
1000b836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b83a:	e115      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b83c:	4a8c      	ldr	r2, [pc, #560]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b83e:	68d3      	ldr	r3, [r2, #12]
1000b840:	2180      	movs	r1, #128	; 0x80
1000b842:	03c9      	lsls	r1, r1, #15
1000b844:	430b      	orrs	r3, r1
1000b846:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b84a:	e10d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b84c:	4a88      	ldr	r2, [pc, #544]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b84e:	68d3      	ldr	r3, [r2, #12]
1000b850:	2180      	movs	r1, #128	; 0x80
1000b852:	0409      	lsls	r1, r1, #16
1000b854:	430b      	orrs	r3, r1
1000b856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b85a:	e105      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b85c:	4a84      	ldr	r2, [pc, #528]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b85e:	68d3      	ldr	r3, [r2, #12]
1000b860:	2180      	movs	r1, #128	; 0x80
1000b862:	0449      	lsls	r1, r1, #17
1000b864:	430b      	orrs	r3, r1
1000b866:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b86a:	e0fd      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b86c:	4a80      	ldr	r2, [pc, #512]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b86e:	68d3      	ldr	r3, [r2, #12]
1000b870:	2180      	movs	r1, #128	; 0x80
1000b872:	0489      	lsls	r1, r1, #18
1000b874:	430b      	orrs	r3, r1
1000b876:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b87a:	e0f5      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b87c:	4a7c      	ldr	r2, [pc, #496]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b87e:	68d3      	ldr	r3, [r2, #12]
1000b880:	2180      	movs	r1, #128	; 0x80
1000b882:	04c9      	lsls	r1, r1, #19
1000b884:	430b      	orrs	r3, r1
1000b886:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b88a:	e0ed      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b88c:	4a78      	ldr	r2, [pc, #480]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b88e:	68d3      	ldr	r3, [r2, #12]
1000b890:	2180      	movs	r1, #128	; 0x80
1000b892:	0509      	lsls	r1, r1, #20
1000b894:	430b      	orrs	r3, r1
1000b896:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b89a:	e0e5      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b89c:	4a74      	ldr	r2, [pc, #464]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b89e:	68d3      	ldr	r3, [r2, #12]
1000b8a0:	2180      	movs	r1, #128	; 0x80
1000b8a2:	0549      	lsls	r1, r1, #21
1000b8a4:	430b      	orrs	r3, r1
1000b8a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b8aa:	e0dd      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b8ac:	4a70      	ldr	r2, [pc, #448]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8ae:	68d3      	ldr	r3, [r2, #12]
1000b8b0:	2180      	movs	r1, #128	; 0x80
1000b8b2:	0589      	lsls	r1, r1, #22
1000b8b4:	430b      	orrs	r3, r1
1000b8b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b8ba:	e0d5      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b8bc:	4a6c      	ldr	r2, [pc, #432]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8be:	68d3      	ldr	r3, [r2, #12]
1000b8c0:	2180      	movs	r1, #128	; 0x80
1000b8c2:	05c9      	lsls	r1, r1, #23
1000b8c4:	430b      	orrs	r3, r1
1000b8c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b8ca:	e0cd      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b8cc:	4a68      	ldr	r2, [pc, #416]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8ce:	6911      	ldr	r1, [r2, #16]
1000b8d0:	2301      	movs	r3, #1
1000b8d2:	430b      	orrs	r3, r1
1000b8d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b8d8:	e0c6      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b8da:	4a65      	ldr	r2, [pc, #404]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8dc:	6911      	ldr	r1, [r2, #16]
1000b8de:	2302      	movs	r3, #2
1000b8e0:	430b      	orrs	r3, r1
1000b8e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b8e6:	e0bf      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b8e8:	4a61      	ldr	r2, [pc, #388]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8ea:	6911      	ldr	r1, [r2, #16]
1000b8ec:	2304      	movs	r3, #4
1000b8ee:	430b      	orrs	r3, r1
1000b8f0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b8f4:	e0b8      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b8f6:	4a5e      	ldr	r2, [pc, #376]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b8f8:	6911      	ldr	r1, [r2, #16]
1000b8fa:	2308      	movs	r3, #8
1000b8fc:	430b      	orrs	r3, r1
1000b8fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b900:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b902:	e0b1      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b904:	4a5a      	ldr	r2, [pc, #360]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b906:	6911      	ldr	r1, [r2, #16]
1000b908:	2310      	movs	r3, #16
1000b90a:	430b      	orrs	r3, r1
1000b90c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b90e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b910:	e0aa      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b912:	4a57      	ldr	r2, [pc, #348]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b914:	6911      	ldr	r1, [r2, #16]
1000b916:	2320      	movs	r3, #32
1000b918:	430b      	orrs	r3, r1
1000b91a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b91c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b91e:	e0a3      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b920:	4a53      	ldr	r2, [pc, #332]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b922:	6911      	ldr	r1, [r2, #16]
1000b924:	2340      	movs	r3, #64	; 0x40
1000b926:	430b      	orrs	r3, r1
1000b928:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b92a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b92c:	e09c      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b92e:	4a50      	ldr	r2, [pc, #320]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b930:	6911      	ldr	r1, [r2, #16]
1000b932:	2380      	movs	r3, #128	; 0x80
1000b934:	430b      	orrs	r3, r1
1000b936:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b93a:	e095      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b93c:	4a4c      	ldr	r2, [pc, #304]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b93e:	6913      	ldr	r3, [r2, #16]
1000b940:	2180      	movs	r1, #128	; 0x80
1000b942:	0049      	lsls	r1, r1, #1
1000b944:	430b      	orrs	r3, r1
1000b946:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b94a:	e08d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b94c:	4a48      	ldr	r2, [pc, #288]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b94e:	6913      	ldr	r3, [r2, #16]
1000b950:	2180      	movs	r1, #128	; 0x80
1000b952:	0089      	lsls	r1, r1, #2
1000b954:	430b      	orrs	r3, r1
1000b956:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b95a:	e085      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b95c:	4a44      	ldr	r2, [pc, #272]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b95e:	6913      	ldr	r3, [r2, #16]
1000b960:	2180      	movs	r1, #128	; 0x80
1000b962:	00c9      	lsls	r1, r1, #3
1000b964:	430b      	orrs	r3, r1
1000b966:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b968:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b96a:	e07d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b96c:	4a40      	ldr	r2, [pc, #256]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b96e:	6913      	ldr	r3, [r2, #16]
1000b970:	2180      	movs	r1, #128	; 0x80
1000b972:	0109      	lsls	r1, r1, #4
1000b974:	430b      	orrs	r3, r1
1000b976:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b978:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b97a:	e075      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b97c:	4a3c      	ldr	r2, [pc, #240]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b97e:	6913      	ldr	r3, [r2, #16]
1000b980:	2180      	movs	r1, #128	; 0x80
1000b982:	0149      	lsls	r1, r1, #5
1000b984:	430b      	orrs	r3, r1
1000b986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b98a:	e06d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b98c:	4a38      	ldr	r2, [pc, #224]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b98e:	6913      	ldr	r3, [r2, #16]
1000b990:	2180      	movs	r1, #128	; 0x80
1000b992:	0189      	lsls	r1, r1, #6
1000b994:	430b      	orrs	r3, r1
1000b996:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b99a:	e065      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b99c:	4a34      	ldr	r2, [pc, #208]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b99e:	6913      	ldr	r3, [r2, #16]
1000b9a0:	2180      	movs	r1, #128	; 0x80
1000b9a2:	01c9      	lsls	r1, r1, #7
1000b9a4:	430b      	orrs	r3, r1
1000b9a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b9aa:	e05d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9ac:	4a30      	ldr	r2, [pc, #192]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9ae:	6913      	ldr	r3, [r2, #16]
1000b9b0:	2180      	movs	r1, #128	; 0x80
1000b9b2:	0209      	lsls	r1, r1, #8
1000b9b4:	430b      	orrs	r3, r1
1000b9b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b9ba:	e055      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9bc:	4a2c      	ldr	r2, [pc, #176]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9be:	6913      	ldr	r3, [r2, #16]
1000b9c0:	2180      	movs	r1, #128	; 0x80
1000b9c2:	0249      	lsls	r1, r1, #9
1000b9c4:	430b      	orrs	r3, r1
1000b9c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b9ca:	e04d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9cc:	4a28      	ldr	r2, [pc, #160]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9ce:	6913      	ldr	r3, [r2, #16]
1000b9d0:	2180      	movs	r1, #128	; 0x80
1000b9d2:	0289      	lsls	r1, r1, #10
1000b9d4:	430b      	orrs	r3, r1
1000b9d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b9da:	e045      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9dc:	4a24      	ldr	r2, [pc, #144]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9de:	6913      	ldr	r3, [r2, #16]
1000b9e0:	2180      	movs	r1, #128	; 0x80
1000b9e2:	02c9      	lsls	r1, r1, #11
1000b9e4:	430b      	orrs	r3, r1
1000b9e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b9ea:	e03d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9ec:	4a20      	ldr	r2, [pc, #128]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9ee:	6913      	ldr	r3, [r2, #16]
1000b9f0:	2180      	movs	r1, #128	; 0x80
1000b9f2:	0309      	lsls	r1, r1, #12
1000b9f4:	430b      	orrs	r3, r1
1000b9f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b9fa:	e035      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b9fc:	4a1c      	ldr	r2, [pc, #112]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000b9fe:	6913      	ldr	r3, [r2, #16]
1000ba00:	2180      	movs	r1, #128	; 0x80
1000ba02:	0349      	lsls	r1, r1, #13
1000ba04:	430b      	orrs	r3, r1
1000ba06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ba0a:	e02d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ba0c:	4a18      	ldr	r2, [pc, #96]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba0e:	6913      	ldr	r3, [r2, #16]
1000ba10:	2180      	movs	r1, #128	; 0x80
1000ba12:	0389      	lsls	r1, r1, #14
1000ba14:	430b      	orrs	r3, r1
1000ba16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ba1a:	e025      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ba1c:	4a14      	ldr	r2, [pc, #80]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba1e:	6913      	ldr	r3, [r2, #16]
1000ba20:	2180      	movs	r1, #128	; 0x80
1000ba22:	03c9      	lsls	r1, r1, #15
1000ba24:	430b      	orrs	r3, r1
1000ba26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ba2a:	e01d      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ba2c:	4a10      	ldr	r2, [pc, #64]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba2e:	6913      	ldr	r3, [r2, #16]
1000ba30:	2180      	movs	r1, #128	; 0x80
1000ba32:	0409      	lsls	r1, r1, #16
1000ba34:	430b      	orrs	r3, r1
1000ba36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ba3a:	e015      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ba3c:	4a0c      	ldr	r2, [pc, #48]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba3e:	7d11      	ldrb	r1, [r2, #20]
1000ba40:	2301      	movs	r3, #1
1000ba42:	430b      	orrs	r3, r1
1000ba44:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ba48:	e00e      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ba4a:	4a09      	ldr	r2, [pc, #36]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba4c:	7d11      	ldrb	r1, [r2, #20]
1000ba4e:	2302      	movs	r3, #2
1000ba50:	430b      	orrs	r3, r1
1000ba52:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ba56:	e007      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ba58:	4a05      	ldr	r2, [pc, #20]	; (1000ba70 <system_clock_peripheral_enable+0x358>)
1000ba5a:	7d11      	ldrb	r1, [r2, #20]
1000ba5c:	2304      	movs	r3, #4
1000ba5e:	430b      	orrs	r3, r1
1000ba60:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ba64:	e000      	b.n	1000ba68 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ba66:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ba68:	bd00      	pop	{pc}
1000ba6a:	46c0      	nop			; (mov r8, r8)
1000ba6c:	100158fc 	.word	0x100158fc
1000ba70:	4000b000 	.word	0x4000b000

1000ba74 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000ba74:	b500      	push	{lr}
	switch (peripheral) {
1000ba76:	2835      	cmp	r0, #53	; 0x35
1000ba78:	d900      	bls.n	1000ba7c <system_clock_peripheral_disable+0x8>
1000ba7a:	e17d      	b.n	1000bd78 <system_clock_peripheral_disable+0x304>
1000ba7c:	0080      	lsls	r0, r0, #2
1000ba7e:	4bbf      	ldr	r3, [pc, #764]	; (1000bd7c <system_clock_peripheral_disable+0x308>)
1000ba80:	581b      	ldr	r3, [r3, r0]
1000ba82:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ba84:	4abe      	ldr	r2, [pc, #760]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000ba86:	68d3      	ldr	r3, [r2, #12]
1000ba88:	2102      	movs	r1, #2
1000ba8a:	438b      	bics	r3, r1
1000ba8c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba8e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ba90:	e173      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ba92:	4abb      	ldr	r2, [pc, #748]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000ba94:	68d3      	ldr	r3, [r2, #12]
1000ba96:	2104      	movs	r1, #4
1000ba98:	438b      	bics	r3, r1
1000ba9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ba9e:	e16c      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000baa0:	4ab7      	ldr	r2, [pc, #732]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000baa2:	68d3      	ldr	r3, [r2, #12]
1000baa4:	2108      	movs	r1, #8
1000baa6:	438b      	bics	r3, r1
1000baa8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000baac:	e165      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000baae:	4ab4      	ldr	r2, [pc, #720]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bab0:	68d3      	ldr	r3, [r2, #12]
1000bab2:	2110      	movs	r1, #16
1000bab4:	438b      	bics	r3, r1
1000bab6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bab8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000baba:	e15e      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000babc:	4ab0      	ldr	r2, [pc, #704]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000babe:	68d3      	ldr	r3, [r2, #12]
1000bac0:	2120      	movs	r1, #32
1000bac2:	438b      	bics	r3, r1
1000bac4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bac8:	e157      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000baca:	4aad      	ldr	r2, [pc, #692]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bacc:	68d3      	ldr	r3, [r2, #12]
1000bace:	2180      	movs	r1, #128	; 0x80
1000bad0:	438b      	bics	r3, r1
1000bad2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bad6:	e150      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bad8:	4aa9      	ldr	r2, [pc, #676]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bada:	68d1      	ldr	r1, [r2, #12]
1000badc:	4ba9      	ldr	r3, [pc, #676]	; (1000bd84 <system_clock_peripheral_disable+0x310>)
1000bade:	400b      	ands	r3, r1
1000bae0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bae2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bae4:	e149      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bae6:	4aa6      	ldr	r2, [pc, #664]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bae8:	68d1      	ldr	r1, [r2, #12]
1000baea:	4ba7      	ldr	r3, [pc, #668]	; (1000bd88 <system_clock_peripheral_disable+0x314>)
1000baec:	400b      	ands	r3, r1
1000baee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000baf2:	e142      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000baf4:	4aa2      	ldr	r2, [pc, #648]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000baf6:	68d1      	ldr	r1, [r2, #12]
1000baf8:	4ba4      	ldr	r3, [pc, #656]	; (1000bd8c <system_clock_peripheral_disable+0x318>)
1000bafa:	400b      	ands	r3, r1
1000bafc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bafe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bb00:	e13b      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb02:	4a9f      	ldr	r2, [pc, #636]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb04:	68d1      	ldr	r1, [r2, #12]
1000bb06:	4ba2      	ldr	r3, [pc, #648]	; (1000bd90 <system_clock_peripheral_disable+0x31c>)
1000bb08:	400b      	ands	r3, r1
1000bb0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bb0e:	e134      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb10:	4a9b      	ldr	r2, [pc, #620]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb12:	68d1      	ldr	r1, [r2, #12]
1000bb14:	4b9f      	ldr	r3, [pc, #636]	; (1000bd94 <system_clock_peripheral_disable+0x320>)
1000bb16:	400b      	ands	r3, r1
1000bb18:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb1a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bb1c:	e12d      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb1e:	4a98      	ldr	r2, [pc, #608]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb20:	68d1      	ldr	r1, [r2, #12]
1000bb22:	4b9d      	ldr	r3, [pc, #628]	; (1000bd98 <system_clock_peripheral_disable+0x324>)
1000bb24:	400b      	ands	r3, r1
1000bb26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bb2a:	e126      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb2c:	4a94      	ldr	r2, [pc, #592]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb2e:	68d1      	ldr	r1, [r2, #12]
1000bb30:	4b9a      	ldr	r3, [pc, #616]	; (1000bd9c <system_clock_peripheral_disable+0x328>)
1000bb32:	400b      	ands	r3, r1
1000bb34:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb36:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bb38:	e11f      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb3a:	4a91      	ldr	r2, [pc, #580]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb3c:	68d1      	ldr	r1, [r2, #12]
1000bb3e:	4b98      	ldr	r3, [pc, #608]	; (1000bda0 <system_clock_peripheral_disable+0x32c>)
1000bb40:	400b      	ands	r3, r1
1000bb42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bb46:	e118      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb48:	4a8d      	ldr	r2, [pc, #564]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb4a:	68d1      	ldr	r1, [r2, #12]
1000bb4c:	4b95      	ldr	r3, [pc, #596]	; (1000bda4 <system_clock_peripheral_disable+0x330>)
1000bb4e:	400b      	ands	r3, r1
1000bb50:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb52:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bb54:	e111      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb56:	4a8a      	ldr	r2, [pc, #552]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb58:	68d1      	ldr	r1, [r2, #12]
1000bb5a:	4b93      	ldr	r3, [pc, #588]	; (1000bda8 <system_clock_peripheral_disable+0x334>)
1000bb5c:	400b      	ands	r3, r1
1000bb5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bb62:	e10a      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb64:	4a86      	ldr	r2, [pc, #536]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb66:	68d1      	ldr	r1, [r2, #12]
1000bb68:	4b90      	ldr	r3, [pc, #576]	; (1000bdac <system_clock_peripheral_disable+0x338>)
1000bb6a:	400b      	ands	r3, r1
1000bb6c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bb70:	e103      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb72:	4a83      	ldr	r2, [pc, #524]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb74:	68d1      	ldr	r1, [r2, #12]
1000bb76:	4b8e      	ldr	r3, [pc, #568]	; (1000bdb0 <system_clock_peripheral_disable+0x33c>)
1000bb78:	400b      	ands	r3, r1
1000bb7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bb7e:	e0fc      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb80:	4a7f      	ldr	r2, [pc, #508]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb82:	68d1      	ldr	r1, [r2, #12]
1000bb84:	4b8b      	ldr	r3, [pc, #556]	; (1000bdb4 <system_clock_peripheral_disable+0x340>)
1000bb86:	400b      	ands	r3, r1
1000bb88:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bb8c:	e0f5      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb8e:	4a7c      	ldr	r2, [pc, #496]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb90:	68d1      	ldr	r1, [r2, #12]
1000bb92:	4b89      	ldr	r3, [pc, #548]	; (1000bdb8 <system_clock_peripheral_disable+0x344>)
1000bb94:	400b      	ands	r3, r1
1000bb96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bb9a:	e0ee      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bb9c:	4a78      	ldr	r2, [pc, #480]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bb9e:	68d1      	ldr	r1, [r2, #12]
1000bba0:	4b86      	ldr	r3, [pc, #536]	; (1000bdbc <system_clock_peripheral_disable+0x348>)
1000bba2:	400b      	ands	r3, r1
1000bba4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bba6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bba8:	e0e7      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbaa:	4a75      	ldr	r2, [pc, #468]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbac:	68d1      	ldr	r1, [r2, #12]
1000bbae:	4b84      	ldr	r3, [pc, #528]	; (1000bdc0 <system_clock_peripheral_disable+0x34c>)
1000bbb0:	400b      	ands	r3, r1
1000bbb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bbb6:	e0e0      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbb8:	4a71      	ldr	r2, [pc, #452]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbba:	68d1      	ldr	r1, [r2, #12]
1000bbbc:	4b81      	ldr	r3, [pc, #516]	; (1000bdc4 <system_clock_peripheral_disable+0x350>)
1000bbbe:	400b      	ands	r3, r1
1000bbc0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bbc4:	e0d9      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbc6:	4a6e      	ldr	r2, [pc, #440]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbc8:	68d1      	ldr	r1, [r2, #12]
1000bbca:	4b7f      	ldr	r3, [pc, #508]	; (1000bdc8 <system_clock_peripheral_disable+0x354>)
1000bbcc:	400b      	ands	r3, r1
1000bbce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bbd2:	e0d2      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbd4:	4a6a      	ldr	r2, [pc, #424]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbd6:	68d1      	ldr	r1, [r2, #12]
1000bbd8:	4b7c      	ldr	r3, [pc, #496]	; (1000bdcc <system_clock_peripheral_disable+0x358>)
1000bbda:	400b      	ands	r3, r1
1000bbdc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bbe0:	e0cb      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbe2:	4a67      	ldr	r2, [pc, #412]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbe4:	68d1      	ldr	r1, [r2, #12]
1000bbe6:	4b7a      	ldr	r3, [pc, #488]	; (1000bdd0 <system_clock_peripheral_disable+0x35c>)
1000bbe8:	400b      	ands	r3, r1
1000bbea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bbee:	e0c4      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bbf0:	4a63      	ldr	r2, [pc, #396]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bbf2:	68d1      	ldr	r1, [r2, #12]
1000bbf4:	4b77      	ldr	r3, [pc, #476]	; (1000bdd4 <system_clock_peripheral_disable+0x360>)
1000bbf6:	400b      	ands	r3, r1
1000bbf8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbfa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bbfc:	e0bd      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bbfe:	4a60      	ldr	r2, [pc, #384]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc00:	6913      	ldr	r3, [r2, #16]
1000bc02:	2101      	movs	r1, #1
1000bc04:	438b      	bics	r3, r1
1000bc06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bc0a:	e0b6      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc0c:	4a5c      	ldr	r2, [pc, #368]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc0e:	6913      	ldr	r3, [r2, #16]
1000bc10:	2102      	movs	r1, #2
1000bc12:	438b      	bics	r3, r1
1000bc14:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bc18:	e0af      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc1a:	4a59      	ldr	r2, [pc, #356]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc1c:	6913      	ldr	r3, [r2, #16]
1000bc1e:	2104      	movs	r1, #4
1000bc20:	438b      	bics	r3, r1
1000bc22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bc26:	e0a8      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc28:	4a55      	ldr	r2, [pc, #340]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc2a:	6913      	ldr	r3, [r2, #16]
1000bc2c:	2108      	movs	r1, #8
1000bc2e:	438b      	bics	r3, r1
1000bc30:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bc34:	e0a1      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc36:	4a52      	ldr	r2, [pc, #328]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc38:	6913      	ldr	r3, [r2, #16]
1000bc3a:	2110      	movs	r1, #16
1000bc3c:	438b      	bics	r3, r1
1000bc3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bc42:	e09a      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc44:	4a4e      	ldr	r2, [pc, #312]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc46:	6913      	ldr	r3, [r2, #16]
1000bc48:	2120      	movs	r1, #32
1000bc4a:	438b      	bics	r3, r1
1000bc4c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bc50:	e093      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc52:	4a4b      	ldr	r2, [pc, #300]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc54:	6913      	ldr	r3, [r2, #16]
1000bc56:	2140      	movs	r1, #64	; 0x40
1000bc58:	438b      	bics	r3, r1
1000bc5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bc5e:	e08c      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc60:	4a47      	ldr	r2, [pc, #284]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc62:	6913      	ldr	r3, [r2, #16]
1000bc64:	2180      	movs	r1, #128	; 0x80
1000bc66:	438b      	bics	r3, r1
1000bc68:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bc6c:	e085      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc6e:	4a44      	ldr	r2, [pc, #272]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc70:	6911      	ldr	r1, [r2, #16]
1000bc72:	4b44      	ldr	r3, [pc, #272]	; (1000bd84 <system_clock_peripheral_disable+0x310>)
1000bc74:	400b      	ands	r3, r1
1000bc76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bc7a:	e07e      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc7c:	4a40      	ldr	r2, [pc, #256]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc7e:	6911      	ldr	r1, [r2, #16]
1000bc80:	4b55      	ldr	r3, [pc, #340]	; (1000bdd8 <system_clock_peripheral_disable+0x364>)
1000bc82:	400b      	ands	r3, r1
1000bc84:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bc88:	e077      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc8a:	4a3d      	ldr	r2, [pc, #244]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc8c:	6911      	ldr	r1, [r2, #16]
1000bc8e:	4b53      	ldr	r3, [pc, #332]	; (1000bddc <system_clock_peripheral_disable+0x368>)
1000bc90:	400b      	ands	r3, r1
1000bc92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bc96:	e070      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bc98:	4a39      	ldr	r2, [pc, #228]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bc9a:	6911      	ldr	r1, [r2, #16]
1000bc9c:	4b3a      	ldr	r3, [pc, #232]	; (1000bd88 <system_clock_peripheral_disable+0x314>)
1000bc9e:	400b      	ands	r3, r1
1000bca0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bca2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bca4:	e069      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bca6:	4a36      	ldr	r2, [pc, #216]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bca8:	6911      	ldr	r1, [r2, #16]
1000bcaa:	4b38      	ldr	r3, [pc, #224]	; (1000bd8c <system_clock_peripheral_disable+0x318>)
1000bcac:	400b      	ands	r3, r1
1000bcae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bcb2:	e062      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcb4:	4a32      	ldr	r2, [pc, #200]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bcb6:	6911      	ldr	r1, [r2, #16]
1000bcb8:	4b35      	ldr	r3, [pc, #212]	; (1000bd90 <system_clock_peripheral_disable+0x31c>)
1000bcba:	400b      	ands	r3, r1
1000bcbc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bcc0:	e05b      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcc2:	4a2f      	ldr	r2, [pc, #188]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bcc4:	6911      	ldr	r1, [r2, #16]
1000bcc6:	4b33      	ldr	r3, [pc, #204]	; (1000bd94 <system_clock_peripheral_disable+0x320>)
1000bcc8:	400b      	ands	r3, r1
1000bcca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bcce:	e054      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcd0:	4a2b      	ldr	r2, [pc, #172]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bcd2:	6911      	ldr	r1, [r2, #16]
1000bcd4:	4b30      	ldr	r3, [pc, #192]	; (1000bd98 <system_clock_peripheral_disable+0x324>)
1000bcd6:	400b      	ands	r3, r1
1000bcd8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bcdc:	e04d      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcde:	4a28      	ldr	r2, [pc, #160]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bce0:	6911      	ldr	r1, [r2, #16]
1000bce2:	4b2e      	ldr	r3, [pc, #184]	; (1000bd9c <system_clock_peripheral_disable+0x328>)
1000bce4:	400b      	ands	r3, r1
1000bce6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bce8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bcea:	e046      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcec:	4a24      	ldr	r2, [pc, #144]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bcee:	6911      	ldr	r1, [r2, #16]
1000bcf0:	4b2b      	ldr	r3, [pc, #172]	; (1000bda0 <system_clock_peripheral_disable+0x32c>)
1000bcf2:	400b      	ands	r3, r1
1000bcf4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bcf8:	e03f      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bcfa:	4a21      	ldr	r2, [pc, #132]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bcfc:	6911      	ldr	r1, [r2, #16]
1000bcfe:	4b29      	ldr	r3, [pc, #164]	; (1000bda4 <system_clock_peripheral_disable+0x330>)
1000bd00:	400b      	ands	r3, r1
1000bd02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bd06:	e038      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bd08:	4a1d      	ldr	r2, [pc, #116]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd0a:	6911      	ldr	r1, [r2, #16]
1000bd0c:	4b26      	ldr	r3, [pc, #152]	; (1000bda8 <system_clock_peripheral_disable+0x334>)
1000bd0e:	400b      	ands	r3, r1
1000bd10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bd14:	e031      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bd16:	4a1a      	ldr	r2, [pc, #104]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd18:	6911      	ldr	r1, [r2, #16]
1000bd1a:	4b24      	ldr	r3, [pc, #144]	; (1000bdac <system_clock_peripheral_disable+0x338>)
1000bd1c:	400b      	ands	r3, r1
1000bd1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bd22:	e02a      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bd24:	4a16      	ldr	r2, [pc, #88]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd26:	6911      	ldr	r1, [r2, #16]
1000bd28:	4b21      	ldr	r3, [pc, #132]	; (1000bdb0 <system_clock_peripheral_disable+0x33c>)
1000bd2a:	400b      	ands	r3, r1
1000bd2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bd30:	e023      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bd32:	4a13      	ldr	r2, [pc, #76]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd34:	6911      	ldr	r1, [r2, #16]
1000bd36:	4b1f      	ldr	r3, [pc, #124]	; (1000bdb4 <system_clock_peripheral_disable+0x340>)
1000bd38:	400b      	ands	r3, r1
1000bd3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bd3e:	e01c      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bd40:	4a0f      	ldr	r2, [pc, #60]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd42:	6911      	ldr	r1, [r2, #16]
1000bd44:	4b1c      	ldr	r3, [pc, #112]	; (1000bdb8 <system_clock_peripheral_disable+0x344>)
1000bd46:	400b      	ands	r3, r1
1000bd48:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bd4c:	e015      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bd4e:	4a0c      	ldr	r2, [pc, #48]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd50:	7d13      	ldrb	r3, [r2, #20]
1000bd52:	2101      	movs	r1, #1
1000bd54:	438b      	bics	r3, r1
1000bd56:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bd5a:	e00e      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bd5c:	4a08      	ldr	r2, [pc, #32]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd5e:	7d13      	ldrb	r3, [r2, #20]
1000bd60:	2102      	movs	r1, #2
1000bd62:	438b      	bics	r3, r1
1000bd64:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bd68:	e007      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bd6a:	4a05      	ldr	r2, [pc, #20]	; (1000bd80 <system_clock_peripheral_disable+0x30c>)
1000bd6c:	7d13      	ldrb	r3, [r2, #20]
1000bd6e:	2104      	movs	r1, #4
1000bd70:	438b      	bics	r3, r1
1000bd72:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bd76:	e000      	b.n	1000bd7a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bd78:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bd7a:	bd00      	pop	{pc}
1000bd7c:	100159d4 	.word	0x100159d4
1000bd80:	4000b000 	.word	0x4000b000
1000bd84:	fffffeff 	.word	0xfffffeff
1000bd88:	fffff7ff 	.word	0xfffff7ff
1000bd8c:	ffffefff 	.word	0xffffefff
1000bd90:	ffffdfff 	.word	0xffffdfff
1000bd94:	ffffbfff 	.word	0xffffbfff
1000bd98:	ffff7fff 	.word	0xffff7fff
1000bd9c:	fffeffff 	.word	0xfffeffff
1000bda0:	fffdffff 	.word	0xfffdffff
1000bda4:	fffbffff 	.word	0xfffbffff
1000bda8:	fff7ffff 	.word	0xfff7ffff
1000bdac:	ffefffff 	.word	0xffefffff
1000bdb0:	ffdfffff 	.word	0xffdfffff
1000bdb4:	ffbfffff 	.word	0xffbfffff
1000bdb8:	ff7fffff 	.word	0xff7fffff
1000bdbc:	feffffff 	.word	0xfeffffff
1000bdc0:	fdffffff 	.word	0xfdffffff
1000bdc4:	fbffffff 	.word	0xfbffffff
1000bdc8:	f7ffffff 	.word	0xf7ffffff
1000bdcc:	efffffff 	.word	0xefffffff
1000bdd0:	dfffffff 	.word	0xdfffffff
1000bdd4:	bfffffff 	.word	0xbfffffff
1000bdd8:	fffffdff 	.word	0xfffffdff
1000bddc:	fffffbff 	.word	0xfffffbff

1000bde0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000bde0:	b500      	push	{lr}
	switch (peripheral) {
1000bde2:	2843      	cmp	r0, #67	; 0x43
1000bde4:	d900      	bls.n	1000bde8 <system_peripheral_reset+0x8>
1000bde6:	e223      	b.n	1000c230 <system_peripheral_reset+0x450>
1000bde8:	0080      	lsls	r0, r0, #2
1000bdea:	4be0      	ldr	r3, [pc, #896]	; (1000c16c <system_peripheral_reset+0x38c>)
1000bdec:	581b      	ldr	r3, [r3, r0]
1000bdee:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bdf0:	4bdf      	ldr	r3, [pc, #892]	; (1000c170 <system_peripheral_reset+0x390>)
1000bdf2:	6859      	ldr	r1, [r3, #4]
1000bdf4:	2202      	movs	r2, #2
1000bdf6:	4391      	bics	r1, r2
1000bdf8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bdfa:	6859      	ldr	r1, [r3, #4]
1000bdfc:	430a      	orrs	r2, r1
1000bdfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be00:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000be02:	e216      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be04:	4bda      	ldr	r3, [pc, #872]	; (1000c170 <system_peripheral_reset+0x390>)
1000be06:	6859      	ldr	r1, [r3, #4]
1000be08:	2204      	movs	r2, #4
1000be0a:	4391      	bics	r1, r2
1000be0c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be0e:	6859      	ldr	r1, [r3, #4]
1000be10:	430a      	orrs	r2, r1
1000be12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be14:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000be16:	e20c      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be18:	4bd5      	ldr	r3, [pc, #852]	; (1000c170 <system_peripheral_reset+0x390>)
1000be1a:	6859      	ldr	r1, [r3, #4]
1000be1c:	2208      	movs	r2, #8
1000be1e:	4391      	bics	r1, r2
1000be20:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be22:	6859      	ldr	r1, [r3, #4]
1000be24:	430a      	orrs	r2, r1
1000be26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be28:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000be2a:	e202      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be2c:	4bd0      	ldr	r3, [pc, #832]	; (1000c170 <system_peripheral_reset+0x390>)
1000be2e:	6859      	ldr	r1, [r3, #4]
1000be30:	2210      	movs	r2, #16
1000be32:	4391      	bics	r1, r2
1000be34:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be36:	6859      	ldr	r1, [r3, #4]
1000be38:	430a      	orrs	r2, r1
1000be3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000be3e:	e1f8      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be40:	4bcb      	ldr	r3, [pc, #812]	; (1000c170 <system_peripheral_reset+0x390>)
1000be42:	6859      	ldr	r1, [r3, #4]
1000be44:	2220      	movs	r2, #32
1000be46:	4391      	bics	r1, r2
1000be48:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be4a:	6859      	ldr	r1, [r3, #4]
1000be4c:	430a      	orrs	r2, r1
1000be4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be50:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000be52:	e1ee      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be54:	4bc6      	ldr	r3, [pc, #792]	; (1000c170 <system_peripheral_reset+0x390>)
1000be56:	6859      	ldr	r1, [r3, #4]
1000be58:	2240      	movs	r2, #64	; 0x40
1000be5a:	4391      	bics	r1, r2
1000be5c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be5e:	6859      	ldr	r1, [r3, #4]
1000be60:	430a      	orrs	r2, r1
1000be62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be64:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000be66:	e1e4      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be68:	4bc1      	ldr	r3, [pc, #772]	; (1000c170 <system_peripheral_reset+0x390>)
1000be6a:	6859      	ldr	r1, [r3, #4]
1000be6c:	2280      	movs	r2, #128	; 0x80
1000be6e:	4391      	bics	r1, r2
1000be70:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be72:	6859      	ldr	r1, [r3, #4]
1000be74:	430a      	orrs	r2, r1
1000be76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be78:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000be7a:	e1da      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be7c:	4bbc      	ldr	r3, [pc, #752]	; (1000c170 <system_peripheral_reset+0x390>)
1000be7e:	6859      	ldr	r1, [r3, #4]
1000be80:	4abc      	ldr	r2, [pc, #752]	; (1000c174 <system_peripheral_reset+0x394>)
1000be82:	400a      	ands	r2, r1
1000be84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be86:	685a      	ldr	r2, [r3, #4]
1000be88:	2180      	movs	r1, #128	; 0x80
1000be8a:	0049      	lsls	r1, r1, #1
1000be8c:	430a      	orrs	r2, r1
1000be8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be90:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000be92:	e1ce      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be94:	4bb6      	ldr	r3, [pc, #728]	; (1000c170 <system_peripheral_reset+0x390>)
1000be96:	6859      	ldr	r1, [r3, #4]
1000be98:	4ab7      	ldr	r2, [pc, #732]	; (1000c178 <system_peripheral_reset+0x398>)
1000be9a:	400a      	ands	r2, r1
1000be9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be9e:	685a      	ldr	r2, [r3, #4]
1000bea0:	2180      	movs	r1, #128	; 0x80
1000bea2:	0089      	lsls	r1, r1, #2
1000bea4:	430a      	orrs	r2, r1
1000bea6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000beaa:	e1c2      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000beac:	4bb0      	ldr	r3, [pc, #704]	; (1000c170 <system_peripheral_reset+0x390>)
1000beae:	6859      	ldr	r1, [r3, #4]
1000beb0:	4ab2      	ldr	r2, [pc, #712]	; (1000c17c <system_peripheral_reset+0x39c>)
1000beb2:	400a      	ands	r2, r1
1000beb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000beb6:	685a      	ldr	r2, [r3, #4]
1000beb8:	2180      	movs	r1, #128	; 0x80
1000beba:	00c9      	lsls	r1, r1, #3
1000bebc:	430a      	orrs	r2, r1
1000bebe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000bec2:	e1b6      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bec4:	4baa      	ldr	r3, [pc, #680]	; (1000c170 <system_peripheral_reset+0x390>)
1000bec6:	6859      	ldr	r1, [r3, #4]
1000bec8:	4aad      	ldr	r2, [pc, #692]	; (1000c180 <system_peripheral_reset+0x3a0>)
1000beca:	400a      	ands	r2, r1
1000becc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bece:	685a      	ldr	r2, [r3, #4]
1000bed0:	2180      	movs	r1, #128	; 0x80
1000bed2:	0109      	lsls	r1, r1, #4
1000bed4:	430a      	orrs	r2, r1
1000bed6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed8:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000beda:	e1aa      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bedc:	4ba4      	ldr	r3, [pc, #656]	; (1000c170 <system_peripheral_reset+0x390>)
1000bede:	6859      	ldr	r1, [r3, #4]
1000bee0:	4aa8      	ldr	r2, [pc, #672]	; (1000c184 <system_peripheral_reset+0x3a4>)
1000bee2:	400a      	ands	r2, r1
1000bee4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bee6:	685a      	ldr	r2, [r3, #4]
1000bee8:	2180      	movs	r1, #128	; 0x80
1000beea:	0149      	lsls	r1, r1, #5
1000beec:	430a      	orrs	r2, r1
1000beee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bef0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000bef2:	e19e      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bef4:	4b9e      	ldr	r3, [pc, #632]	; (1000c170 <system_peripheral_reset+0x390>)
1000bef6:	6859      	ldr	r1, [r3, #4]
1000bef8:	4aa3      	ldr	r2, [pc, #652]	; (1000c188 <system_peripheral_reset+0x3a8>)
1000befa:	400a      	ands	r2, r1
1000befc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000befe:	685a      	ldr	r2, [r3, #4]
1000bf00:	2180      	movs	r1, #128	; 0x80
1000bf02:	0189      	lsls	r1, r1, #6
1000bf04:	430a      	orrs	r2, r1
1000bf06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf08:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000bf0a:	e192      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf0c:	4b98      	ldr	r3, [pc, #608]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf0e:	6859      	ldr	r1, [r3, #4]
1000bf10:	4a9e      	ldr	r2, [pc, #632]	; (1000c18c <system_peripheral_reset+0x3ac>)
1000bf12:	400a      	ands	r2, r1
1000bf14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf16:	685a      	ldr	r2, [r3, #4]
1000bf18:	2180      	movs	r1, #128	; 0x80
1000bf1a:	01c9      	lsls	r1, r1, #7
1000bf1c:	430a      	orrs	r2, r1
1000bf1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf20:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000bf22:	e186      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf24:	4b92      	ldr	r3, [pc, #584]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf26:	6859      	ldr	r1, [r3, #4]
1000bf28:	4a99      	ldr	r2, [pc, #612]	; (1000c190 <system_peripheral_reset+0x3b0>)
1000bf2a:	400a      	ands	r2, r1
1000bf2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf2e:	685a      	ldr	r2, [r3, #4]
1000bf30:	2180      	movs	r1, #128	; 0x80
1000bf32:	0209      	lsls	r1, r1, #8
1000bf34:	430a      	orrs	r2, r1
1000bf36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf38:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000bf3a:	e17a      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf3c:	4b8c      	ldr	r3, [pc, #560]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf3e:	6859      	ldr	r1, [r3, #4]
1000bf40:	4a94      	ldr	r2, [pc, #592]	; (1000c194 <system_peripheral_reset+0x3b4>)
1000bf42:	400a      	ands	r2, r1
1000bf44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf46:	685a      	ldr	r2, [r3, #4]
1000bf48:	2180      	movs	r1, #128	; 0x80
1000bf4a:	0249      	lsls	r1, r1, #9
1000bf4c:	430a      	orrs	r2, r1
1000bf4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf50:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000bf52:	e16e      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf54:	4b86      	ldr	r3, [pc, #536]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf56:	6859      	ldr	r1, [r3, #4]
1000bf58:	4a8f      	ldr	r2, [pc, #572]	; (1000c198 <system_peripheral_reset+0x3b8>)
1000bf5a:	400a      	ands	r2, r1
1000bf5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf5e:	685a      	ldr	r2, [r3, #4]
1000bf60:	2180      	movs	r1, #128	; 0x80
1000bf62:	0289      	lsls	r1, r1, #10
1000bf64:	430a      	orrs	r2, r1
1000bf66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf68:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000bf6a:	e162      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf6c:	4b80      	ldr	r3, [pc, #512]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf6e:	6859      	ldr	r1, [r3, #4]
1000bf70:	4a8a      	ldr	r2, [pc, #552]	; (1000c19c <system_peripheral_reset+0x3bc>)
1000bf72:	400a      	ands	r2, r1
1000bf74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf76:	685a      	ldr	r2, [r3, #4]
1000bf78:	2180      	movs	r1, #128	; 0x80
1000bf7a:	02c9      	lsls	r1, r1, #11
1000bf7c:	430a      	orrs	r2, r1
1000bf7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf80:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000bf82:	e156      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf84:	4b7a      	ldr	r3, [pc, #488]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf86:	6859      	ldr	r1, [r3, #4]
1000bf88:	4a85      	ldr	r2, [pc, #532]	; (1000c1a0 <system_peripheral_reset+0x3c0>)
1000bf8a:	400a      	ands	r2, r1
1000bf8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf8e:	685a      	ldr	r2, [r3, #4]
1000bf90:	2180      	movs	r1, #128	; 0x80
1000bf92:	0309      	lsls	r1, r1, #12
1000bf94:	430a      	orrs	r2, r1
1000bf96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf98:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000bf9a:	e14a      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf9c:	4b74      	ldr	r3, [pc, #464]	; (1000c170 <system_peripheral_reset+0x390>)
1000bf9e:	6859      	ldr	r1, [r3, #4]
1000bfa0:	4a80      	ldr	r2, [pc, #512]	; (1000c1a4 <system_peripheral_reset+0x3c4>)
1000bfa2:	400a      	ands	r2, r1
1000bfa4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfa6:	685a      	ldr	r2, [r3, #4]
1000bfa8:	2180      	movs	r1, #128	; 0x80
1000bfaa:	0349      	lsls	r1, r1, #13
1000bfac:	430a      	orrs	r2, r1
1000bfae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000bfb2:	e13e      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfb4:	4b6e      	ldr	r3, [pc, #440]	; (1000c170 <system_peripheral_reset+0x390>)
1000bfb6:	6859      	ldr	r1, [r3, #4]
1000bfb8:	4a7b      	ldr	r2, [pc, #492]	; (1000c1a8 <system_peripheral_reset+0x3c8>)
1000bfba:	400a      	ands	r2, r1
1000bfbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfbe:	685a      	ldr	r2, [r3, #4]
1000bfc0:	2180      	movs	r1, #128	; 0x80
1000bfc2:	0389      	lsls	r1, r1, #14
1000bfc4:	430a      	orrs	r2, r1
1000bfc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000bfca:	e132      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfcc:	4b68      	ldr	r3, [pc, #416]	; (1000c170 <system_peripheral_reset+0x390>)
1000bfce:	6859      	ldr	r1, [r3, #4]
1000bfd0:	4a76      	ldr	r2, [pc, #472]	; (1000c1ac <system_peripheral_reset+0x3cc>)
1000bfd2:	400a      	ands	r2, r1
1000bfd4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfd6:	685a      	ldr	r2, [r3, #4]
1000bfd8:	2180      	movs	r1, #128	; 0x80
1000bfda:	03c9      	lsls	r1, r1, #15
1000bfdc:	430a      	orrs	r2, r1
1000bfde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfe0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000bfe2:	e126      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfe4:	4b62      	ldr	r3, [pc, #392]	; (1000c170 <system_peripheral_reset+0x390>)
1000bfe6:	6859      	ldr	r1, [r3, #4]
1000bfe8:	4a71      	ldr	r2, [pc, #452]	; (1000c1b0 <system_peripheral_reset+0x3d0>)
1000bfea:	400a      	ands	r2, r1
1000bfec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfee:	685a      	ldr	r2, [r3, #4]
1000bff0:	2180      	movs	r1, #128	; 0x80
1000bff2:	0409      	lsls	r1, r1, #16
1000bff4:	430a      	orrs	r2, r1
1000bff6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bff8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000bffa:	e11a      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bffc:	4b5c      	ldr	r3, [pc, #368]	; (1000c170 <system_peripheral_reset+0x390>)
1000bffe:	6859      	ldr	r1, [r3, #4]
1000c000:	4a6c      	ldr	r2, [pc, #432]	; (1000c1b4 <system_peripheral_reset+0x3d4>)
1000c002:	400a      	ands	r2, r1
1000c004:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c006:	685a      	ldr	r2, [r3, #4]
1000c008:	2180      	movs	r1, #128	; 0x80
1000c00a:	0449      	lsls	r1, r1, #17
1000c00c:	430a      	orrs	r2, r1
1000c00e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c010:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c012:	e10e      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c014:	4b56      	ldr	r3, [pc, #344]	; (1000c170 <system_peripheral_reset+0x390>)
1000c016:	6859      	ldr	r1, [r3, #4]
1000c018:	4a67      	ldr	r2, [pc, #412]	; (1000c1b8 <system_peripheral_reset+0x3d8>)
1000c01a:	400a      	ands	r2, r1
1000c01c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c01e:	685a      	ldr	r2, [r3, #4]
1000c020:	2180      	movs	r1, #128	; 0x80
1000c022:	0489      	lsls	r1, r1, #18
1000c024:	430a      	orrs	r2, r1
1000c026:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c028:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c02a:	e102      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c02c:	4b50      	ldr	r3, [pc, #320]	; (1000c170 <system_peripheral_reset+0x390>)
1000c02e:	6859      	ldr	r1, [r3, #4]
1000c030:	4a62      	ldr	r2, [pc, #392]	; (1000c1bc <system_peripheral_reset+0x3dc>)
1000c032:	400a      	ands	r2, r1
1000c034:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c036:	685a      	ldr	r2, [r3, #4]
1000c038:	2180      	movs	r1, #128	; 0x80
1000c03a:	04c9      	lsls	r1, r1, #19
1000c03c:	430a      	orrs	r2, r1
1000c03e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c040:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c042:	e0f6      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c044:	4b4a      	ldr	r3, [pc, #296]	; (1000c170 <system_peripheral_reset+0x390>)
1000c046:	6859      	ldr	r1, [r3, #4]
1000c048:	4a5d      	ldr	r2, [pc, #372]	; (1000c1c0 <system_peripheral_reset+0x3e0>)
1000c04a:	400a      	ands	r2, r1
1000c04c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c04e:	685a      	ldr	r2, [r3, #4]
1000c050:	2180      	movs	r1, #128	; 0x80
1000c052:	0509      	lsls	r1, r1, #20
1000c054:	430a      	orrs	r2, r1
1000c056:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c058:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c05a:	e0ea      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c05c:	4b44      	ldr	r3, [pc, #272]	; (1000c170 <system_peripheral_reset+0x390>)
1000c05e:	6859      	ldr	r1, [r3, #4]
1000c060:	4a58      	ldr	r2, [pc, #352]	; (1000c1c4 <system_peripheral_reset+0x3e4>)
1000c062:	400a      	ands	r2, r1
1000c064:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c066:	685a      	ldr	r2, [r3, #4]
1000c068:	2180      	movs	r1, #128	; 0x80
1000c06a:	0549      	lsls	r1, r1, #21
1000c06c:	430a      	orrs	r2, r1
1000c06e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c070:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c072:	e0de      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c074:	4b3e      	ldr	r3, [pc, #248]	; (1000c170 <system_peripheral_reset+0x390>)
1000c076:	6859      	ldr	r1, [r3, #4]
1000c078:	4a53      	ldr	r2, [pc, #332]	; (1000c1c8 <system_peripheral_reset+0x3e8>)
1000c07a:	400a      	ands	r2, r1
1000c07c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c07e:	685a      	ldr	r2, [r3, #4]
1000c080:	2180      	movs	r1, #128	; 0x80
1000c082:	0589      	lsls	r1, r1, #22
1000c084:	430a      	orrs	r2, r1
1000c086:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c088:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c08a:	e0d2      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c08c:	4b38      	ldr	r3, [pc, #224]	; (1000c170 <system_peripheral_reset+0x390>)
1000c08e:	6859      	ldr	r1, [r3, #4]
1000c090:	4a4e      	ldr	r2, [pc, #312]	; (1000c1cc <system_peripheral_reset+0x3ec>)
1000c092:	400a      	ands	r2, r1
1000c094:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c096:	685a      	ldr	r2, [r3, #4]
1000c098:	2180      	movs	r1, #128	; 0x80
1000c09a:	05c9      	lsls	r1, r1, #23
1000c09c:	430a      	orrs	r2, r1
1000c09e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0a0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c0a2:	e0c6      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0a4:	4a32      	ldr	r2, [pc, #200]	; (1000c170 <system_peripheral_reset+0x390>)
1000c0a6:	6853      	ldr	r3, [r2, #4]
1000c0a8:	005b      	lsls	r3, r3, #1
1000c0aa:	085b      	lsrs	r3, r3, #1
1000c0ac:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ae:	6853      	ldr	r3, [r2, #4]
1000c0b0:	2180      	movs	r1, #128	; 0x80
1000c0b2:	0609      	lsls	r1, r1, #24
1000c0b4:	430b      	orrs	r3, r1
1000c0b6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0b8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c0ba:	e0ba      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0bc:	4b2c      	ldr	r3, [pc, #176]	; (1000c170 <system_peripheral_reset+0x390>)
1000c0be:	891a      	ldrh	r2, [r3, #8]
1000c0c0:	2101      	movs	r1, #1
1000c0c2:	438a      	bics	r2, r1
1000c0c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0c6:	8919      	ldrh	r1, [r3, #8]
1000c0c8:	2201      	movs	r2, #1
1000c0ca:	430a      	orrs	r2, r1
1000c0cc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ce:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c0d0:	e0af      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0d2:	4b27      	ldr	r3, [pc, #156]	; (1000c170 <system_peripheral_reset+0x390>)
1000c0d4:	891a      	ldrh	r2, [r3, #8]
1000c0d6:	2102      	movs	r1, #2
1000c0d8:	438a      	bics	r2, r1
1000c0da:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0dc:	8919      	ldrh	r1, [r3, #8]
1000c0de:	2202      	movs	r2, #2
1000c0e0:	430a      	orrs	r2, r1
1000c0e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c0e6:	e0a4      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0e8:	4b21      	ldr	r3, [pc, #132]	; (1000c170 <system_peripheral_reset+0x390>)
1000c0ea:	891a      	ldrh	r2, [r3, #8]
1000c0ec:	2104      	movs	r1, #4
1000c0ee:	438a      	bics	r2, r1
1000c0f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0f2:	8919      	ldrh	r1, [r3, #8]
1000c0f4:	2204      	movs	r2, #4
1000c0f6:	430a      	orrs	r2, r1
1000c0f8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0fa:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c0fc:	e099      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0fe:	4b1c      	ldr	r3, [pc, #112]	; (1000c170 <system_peripheral_reset+0x390>)
1000c100:	891a      	ldrh	r2, [r3, #8]
1000c102:	2108      	movs	r1, #8
1000c104:	438a      	bics	r2, r1
1000c106:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c108:	8919      	ldrh	r1, [r3, #8]
1000c10a:	2208      	movs	r2, #8
1000c10c:	430a      	orrs	r2, r1
1000c10e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c110:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c112:	e08e      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c114:	4b16      	ldr	r3, [pc, #88]	; (1000c170 <system_peripheral_reset+0x390>)
1000c116:	891a      	ldrh	r2, [r3, #8]
1000c118:	2110      	movs	r1, #16
1000c11a:	438a      	bics	r2, r1
1000c11c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c11e:	8919      	ldrh	r1, [r3, #8]
1000c120:	2210      	movs	r2, #16
1000c122:	430a      	orrs	r2, r1
1000c124:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c126:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c128:	e083      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c12a:	4b11      	ldr	r3, [pc, #68]	; (1000c170 <system_peripheral_reset+0x390>)
1000c12c:	891a      	ldrh	r2, [r3, #8]
1000c12e:	2120      	movs	r1, #32
1000c130:	438a      	bics	r2, r1
1000c132:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c134:	8919      	ldrh	r1, [r3, #8]
1000c136:	2220      	movs	r2, #32
1000c138:	430a      	orrs	r2, r1
1000c13a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c13c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c13e:	e078      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c140:	4b0b      	ldr	r3, [pc, #44]	; (1000c170 <system_peripheral_reset+0x390>)
1000c142:	891a      	ldrh	r2, [r3, #8]
1000c144:	2140      	movs	r1, #64	; 0x40
1000c146:	438a      	bics	r2, r1
1000c148:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c14a:	8919      	ldrh	r1, [r3, #8]
1000c14c:	2240      	movs	r2, #64	; 0x40
1000c14e:	430a      	orrs	r2, r1
1000c150:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c152:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c154:	e06d      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c156:	4b06      	ldr	r3, [pc, #24]	; (1000c170 <system_peripheral_reset+0x390>)
1000c158:	891a      	ldrh	r2, [r3, #8]
1000c15a:	2180      	movs	r1, #128	; 0x80
1000c15c:	438a      	bics	r2, r1
1000c15e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c160:	8919      	ldrh	r1, [r3, #8]
1000c162:	2280      	movs	r2, #128	; 0x80
1000c164:	430a      	orrs	r2, r1
1000c166:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c168:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c16a:	e062      	b.n	1000c232 <system_peripheral_reset+0x452>
1000c16c:	10015aac 	.word	0x10015aac
1000c170:	4000b000 	.word	0x4000b000
1000c174:	fffffeff 	.word	0xfffffeff
1000c178:	fffffdff 	.word	0xfffffdff
1000c17c:	fffffbff 	.word	0xfffffbff
1000c180:	fffff7ff 	.word	0xfffff7ff
1000c184:	ffffefff 	.word	0xffffefff
1000c188:	ffffdfff 	.word	0xffffdfff
1000c18c:	ffffbfff 	.word	0xffffbfff
1000c190:	ffff7fff 	.word	0xffff7fff
1000c194:	fffeffff 	.word	0xfffeffff
1000c198:	fffdffff 	.word	0xfffdffff
1000c19c:	fffbffff 	.word	0xfffbffff
1000c1a0:	fff7ffff 	.word	0xfff7ffff
1000c1a4:	ffefffff 	.word	0xffefffff
1000c1a8:	ffdfffff 	.word	0xffdfffff
1000c1ac:	ffbfffff 	.word	0xffbfffff
1000c1b0:	ff7fffff 	.word	0xff7fffff
1000c1b4:	feffffff 	.word	0xfeffffff
1000c1b8:	fdffffff 	.word	0xfdffffff
1000c1bc:	fbffffff 	.word	0xfbffffff
1000c1c0:	f7ffffff 	.word	0xf7ffffff
1000c1c4:	efffffff 	.word	0xefffffff
1000c1c8:	dfffffff 	.word	0xdfffffff
1000c1cc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c1d0:	4b18      	ldr	r3, [pc, #96]	; (1000c234 <system_peripheral_reset+0x454>)
1000c1d2:	8919      	ldrh	r1, [r3, #8]
1000c1d4:	4a18      	ldr	r2, [pc, #96]	; (1000c238 <system_peripheral_reset+0x458>)
1000c1d6:	400a      	ands	r2, r1
1000c1d8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c1da:	8919      	ldrh	r1, [r3, #8]
1000c1dc:	2280      	movs	r2, #128	; 0x80
1000c1de:	0052      	lsls	r2, r2, #1
1000c1e0:	430a      	orrs	r2, r1
1000c1e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c1e6:	e024      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c1e8:	4b12      	ldr	r3, [pc, #72]	; (1000c234 <system_peripheral_reset+0x454>)
1000c1ea:	8919      	ldrh	r1, [r3, #8]
1000c1ec:	4a13      	ldr	r2, [pc, #76]	; (1000c23c <system_peripheral_reset+0x45c>)
1000c1ee:	400a      	ands	r2, r1
1000c1f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c1f2:	8919      	ldrh	r1, [r3, #8]
1000c1f4:	2280      	movs	r2, #128	; 0x80
1000c1f6:	0092      	lsls	r2, r2, #2
1000c1f8:	430a      	orrs	r2, r1
1000c1fa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c1fe:	e018      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c200:	4b0c      	ldr	r3, [pc, #48]	; (1000c234 <system_peripheral_reset+0x454>)
1000c202:	8919      	ldrh	r1, [r3, #8]
1000c204:	4a0e      	ldr	r2, [pc, #56]	; (1000c240 <system_peripheral_reset+0x460>)
1000c206:	400a      	ands	r2, r1
1000c208:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c20a:	8919      	ldrh	r1, [r3, #8]
1000c20c:	2280      	movs	r2, #128	; 0x80
1000c20e:	00d2      	lsls	r2, r2, #3
1000c210:	430a      	orrs	r2, r1
1000c212:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c214:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c216:	e00c      	b.n	1000c232 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c218:	4b06      	ldr	r3, [pc, #24]	; (1000c234 <system_peripheral_reset+0x454>)
1000c21a:	8919      	ldrh	r1, [r3, #8]
1000c21c:	4a09      	ldr	r2, [pc, #36]	; (1000c244 <system_peripheral_reset+0x464>)
1000c21e:	400a      	ands	r2, r1
1000c220:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c222:	8919      	ldrh	r1, [r3, #8]
1000c224:	2280      	movs	r2, #128	; 0x80
1000c226:	0112      	lsls	r2, r2, #4
1000c228:	430a      	orrs	r2, r1
1000c22a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c22c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c22e:	e000      	b.n	1000c232 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c230:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c232:	bd00      	pop	{pc}
1000c234:	4000b000 	.word	0x4000b000
1000c238:	fffffeff 	.word	0xfffffeff
1000c23c:	fffffdff 	.word	0xfffffdff
1000c240:	fffffbff 	.word	0xfffffbff
1000c244:	fffff7ff 	.word	0xfffff7ff

1000c248 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c248:	2380      	movs	r3, #128	; 0x80
1000c24a:	04db      	lsls	r3, r3, #19
1000c24c:	469c      	mov	ip, r3
1000c24e:	4460      	add	r0, ip
1000c250:	0080      	lsls	r0, r0, #2
1000c252:	6001      	str	r1, [r0, #0]
}
1000c254:	4770      	bx	lr
1000c256:	46c0      	nop			; (mov r8, r8)

1000c258 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c258:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c25a:	4b20      	ldr	r3, [pc, #128]	; (1000c2dc <uart_rx0_isr_handler+0x84>)
1000c25c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c25e:	6823      	ldr	r3, [r4, #0]
1000c260:	7d1d      	ldrb	r5, [r3, #20]
1000c262:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c264:	066a      	lsls	r2, r5, #25
1000c266:	d513      	bpl.n	1000c290 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c268:	211e      	movs	r1, #30
1000c26a:	2222      	movs	r2, #34	; 0x22
1000c26c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c26e:	7e1a      	ldrb	r2, [r3, #24]
1000c270:	3123      	adds	r1, #35	; 0x23
1000c272:	438a      	bics	r2, r1
1000c274:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c276:	2321      	movs	r3, #33	; 0x21
1000c278:	5ce3      	ldrb	r3, [r4, r3]
1000c27a:	071b      	lsls	r3, r3, #28
1000c27c:	d506      	bpl.n	1000c28c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c27e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c280:	5ce3      	ldrb	r3, [r4, r3]
1000c282:	071b      	lsls	r3, r3, #28
1000c284:	d502      	bpl.n	1000c28c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c286:	0020      	movs	r0, r4
1000c288:	6923      	ldr	r3, [r4, #16]
1000c28a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c28c:	6823      	ldr	r3, [r4, #0]
1000c28e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c290:	07eb      	lsls	r3, r5, #31
1000c292:	d522      	bpl.n	1000c2da <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c294:	6823      	ldr	r3, [r4, #0]
1000c296:	7c1b      	ldrb	r3, [r3, #16]
1000c298:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c29a:	6962      	ldr	r2, [r4, #20]
1000c29c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c29e:	6963      	ldr	r3, [r4, #20]
1000c2a0:	3301      	adds	r3, #1
1000c2a2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c2a4:	8ba3      	ldrh	r3, [r4, #28]
1000c2a6:	3b01      	subs	r3, #1
1000c2a8:	b29b      	uxth	r3, r3
1000c2aa:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c2ac:	8ba3      	ldrh	r3, [r4, #28]
1000c2ae:	b29b      	uxth	r3, r3
1000c2b0:	2b00      	cmp	r3, #0
1000c2b2:	d112      	bne.n	1000c2da <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c2b4:	3321      	adds	r3, #33	; 0x21
1000c2b6:	5ce3      	ldrb	r3, [r4, r3]
1000c2b8:	075b      	lsls	r3, r3, #29
1000c2ba:	d50e      	bpl.n	1000c2da <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c2bc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c2be:	5ce3      	ldrb	r3, [r4, r3]
1000c2c0:	075b      	lsls	r3, r3, #29
1000c2c2:	d50a      	bpl.n	1000c2da <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c2c4:	2200      	movs	r2, #0
1000c2c6:	2322      	movs	r3, #34	; 0x22
1000c2c8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c2ca:	6822      	ldr	r2, [r4, #0]
1000c2cc:	7e13      	ldrb	r3, [r2, #24]
1000c2ce:	2101      	movs	r1, #1
1000c2d0:	438b      	bics	r3, r1
1000c2d2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c2d4:	68e3      	ldr	r3, [r4, #12]
1000c2d6:	0020      	movs	r0, r4
1000c2d8:	4798      	blx	r3
			}
		}
	}
}
1000c2da:	bd70      	pop	{r4, r5, r6, pc}
1000c2dc:	100186d8 	.word	0x100186d8

1000c2e0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c2e0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c2e2:	4b21      	ldr	r3, [pc, #132]	; (1000c368 <uart_tx0_isr_handler+0x88>)
1000c2e4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c2e6:	6823      	ldr	r3, [r4, #0]
1000c2e8:	791d      	ldrb	r5, [r3, #4]
1000c2ea:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c2ec:	07ea      	lsls	r2, r5, #31
1000c2ee:	d517      	bpl.n	1000c320 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c2f0:	69a2      	ldr	r2, [r4, #24]
1000c2f2:	7811      	ldrb	r1, [r2, #0]
1000c2f4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c2f6:	3201      	adds	r2, #1
1000c2f8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c2fa:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c2fc:	8be3      	ldrh	r3, [r4, #30]
1000c2fe:	3b01      	subs	r3, #1
1000c300:	b29b      	uxth	r3, r3
1000c302:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c304:	8be3      	ldrh	r3, [r4, #30]
1000c306:	b29b      	uxth	r3, r3
1000c308:	2b00      	cmp	r3, #0
1000c30a:	d109      	bne.n	1000c320 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c30c:	6822      	ldr	r2, [r4, #0]
1000c30e:	7a13      	ldrb	r3, [r2, #8]
1000c310:	2101      	movs	r1, #1
1000c312:	438b      	bics	r3, r1
1000c314:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c316:	6822      	ldr	r2, [r4, #0]
1000c318:	7a11      	ldrb	r1, [r2, #8]
1000c31a:	2310      	movs	r3, #16
1000c31c:	430b      	orrs	r3, r1
1000c31e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c320:	06eb      	lsls	r3, r5, #27
1000c322:	d512      	bpl.n	1000c34a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c324:	2321      	movs	r3, #33	; 0x21
1000c326:	5ce3      	ldrb	r3, [r4, r3]
1000c328:	07db      	lsls	r3, r3, #31
1000c32a:	d50e      	bpl.n	1000c34a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c32c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c32e:	5ce3      	ldrb	r3, [r4, r3]
1000c330:	07db      	lsls	r3, r3, #31
1000c332:	d50a      	bpl.n	1000c34a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c334:	2200      	movs	r2, #0
1000c336:	2322      	movs	r3, #34	; 0x22
1000c338:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c33a:	6822      	ldr	r2, [r4, #0]
1000c33c:	7a13      	ldrb	r3, [r2, #8]
1000c33e:	2110      	movs	r1, #16
1000c340:	438b      	bics	r3, r1
1000c342:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c344:	0020      	movs	r0, r4
1000c346:	6863      	ldr	r3, [r4, #4]
1000c348:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c34a:	06ab      	lsls	r3, r5, #26
1000c34c:	d50a      	bpl.n	1000c364 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c34e:	2321      	movs	r3, #33	; 0x21
1000c350:	5ce3      	ldrb	r3, [r4, r3]
1000c352:	079b      	lsls	r3, r3, #30
1000c354:	d506      	bpl.n	1000c364 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c356:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c358:	5ce3      	ldrb	r3, [r4, r3]
1000c35a:	079b      	lsls	r3, r3, #30
1000c35c:	d502      	bpl.n	1000c364 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c35e:	68a3      	ldr	r3, [r4, #8]
1000c360:	0020      	movs	r0, r4
1000c362:	4798      	blx	r3
		}

	}
}
1000c364:	bd70      	pop	{r4, r5, r6, pc}
1000c366:	46c0      	nop			; (mov r8, r8)
1000c368:	100186d8 	.word	0x100186d8

1000c36c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c36c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c36e:	4b20      	ldr	r3, [pc, #128]	; (1000c3f0 <uart_rx1_isr_handler+0x84>)
1000c370:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c372:	6823      	ldr	r3, [r4, #0]
1000c374:	7d1d      	ldrb	r5, [r3, #20]
1000c376:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c378:	066a      	lsls	r2, r5, #25
1000c37a:	d513      	bpl.n	1000c3a4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c37c:	211e      	movs	r1, #30
1000c37e:	2222      	movs	r2, #34	; 0x22
1000c380:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c382:	7e1a      	ldrb	r2, [r3, #24]
1000c384:	3123      	adds	r1, #35	; 0x23
1000c386:	438a      	bics	r2, r1
1000c388:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c38a:	2321      	movs	r3, #33	; 0x21
1000c38c:	5ce3      	ldrb	r3, [r4, r3]
1000c38e:	071b      	lsls	r3, r3, #28
1000c390:	d506      	bpl.n	1000c3a0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c392:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c394:	5ce3      	ldrb	r3, [r4, r3]
1000c396:	071b      	lsls	r3, r3, #28
1000c398:	d502      	bpl.n	1000c3a0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c39a:	0020      	movs	r0, r4
1000c39c:	6923      	ldr	r3, [r4, #16]
1000c39e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c3a0:	6823      	ldr	r3, [r4, #0]
1000c3a2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c3a4:	07eb      	lsls	r3, r5, #31
1000c3a6:	d522      	bpl.n	1000c3ee <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c3a8:	6823      	ldr	r3, [r4, #0]
1000c3aa:	7c1b      	ldrb	r3, [r3, #16]
1000c3ac:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c3ae:	6962      	ldr	r2, [r4, #20]
1000c3b0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c3b2:	6963      	ldr	r3, [r4, #20]
1000c3b4:	3301      	adds	r3, #1
1000c3b6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c3b8:	8ba3      	ldrh	r3, [r4, #28]
1000c3ba:	3b01      	subs	r3, #1
1000c3bc:	b29b      	uxth	r3, r3
1000c3be:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c3c0:	8ba3      	ldrh	r3, [r4, #28]
1000c3c2:	b29b      	uxth	r3, r3
1000c3c4:	2b00      	cmp	r3, #0
1000c3c6:	d112      	bne.n	1000c3ee <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c3c8:	3321      	adds	r3, #33	; 0x21
1000c3ca:	5ce3      	ldrb	r3, [r4, r3]
1000c3cc:	075b      	lsls	r3, r3, #29
1000c3ce:	d50e      	bpl.n	1000c3ee <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c3d0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c3d2:	5ce3      	ldrb	r3, [r4, r3]
1000c3d4:	075b      	lsls	r3, r3, #29
1000c3d6:	d50a      	bpl.n	1000c3ee <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c3d8:	2200      	movs	r2, #0
1000c3da:	2322      	movs	r3, #34	; 0x22
1000c3dc:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c3de:	6822      	ldr	r2, [r4, #0]
1000c3e0:	7e13      	ldrb	r3, [r2, #24]
1000c3e2:	2101      	movs	r1, #1
1000c3e4:	438b      	bics	r3, r1
1000c3e6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c3e8:	68e3      	ldr	r3, [r4, #12]
1000c3ea:	0020      	movs	r0, r4
1000c3ec:	4798      	blx	r3
			}
		}
	}
}
1000c3ee:	bd70      	pop	{r4, r5, r6, pc}
1000c3f0:	100186d8 	.word	0x100186d8

1000c3f4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c3f4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c3f6:	4b21      	ldr	r3, [pc, #132]	; (1000c47c <uart_tx1_isr_handler+0x88>)
1000c3f8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c3fa:	6823      	ldr	r3, [r4, #0]
1000c3fc:	791d      	ldrb	r5, [r3, #4]
1000c3fe:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c400:	07ea      	lsls	r2, r5, #31
1000c402:	d517      	bpl.n	1000c434 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c404:	69a2      	ldr	r2, [r4, #24]
1000c406:	7811      	ldrb	r1, [r2, #0]
1000c408:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c40a:	3201      	adds	r2, #1
1000c40c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c40e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c410:	8be3      	ldrh	r3, [r4, #30]
1000c412:	3b01      	subs	r3, #1
1000c414:	b29b      	uxth	r3, r3
1000c416:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c418:	8be3      	ldrh	r3, [r4, #30]
1000c41a:	b29b      	uxth	r3, r3
1000c41c:	2b00      	cmp	r3, #0
1000c41e:	d109      	bne.n	1000c434 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c420:	6822      	ldr	r2, [r4, #0]
1000c422:	7a13      	ldrb	r3, [r2, #8]
1000c424:	2101      	movs	r1, #1
1000c426:	438b      	bics	r3, r1
1000c428:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c42a:	6822      	ldr	r2, [r4, #0]
1000c42c:	7a11      	ldrb	r1, [r2, #8]
1000c42e:	2310      	movs	r3, #16
1000c430:	430b      	orrs	r3, r1
1000c432:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c434:	06eb      	lsls	r3, r5, #27
1000c436:	d512      	bpl.n	1000c45e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c438:	2321      	movs	r3, #33	; 0x21
1000c43a:	5ce3      	ldrb	r3, [r4, r3]
1000c43c:	07db      	lsls	r3, r3, #31
1000c43e:	d50e      	bpl.n	1000c45e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c440:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c442:	5ce3      	ldrb	r3, [r4, r3]
1000c444:	07db      	lsls	r3, r3, #31
1000c446:	d50a      	bpl.n	1000c45e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c448:	2200      	movs	r2, #0
1000c44a:	2322      	movs	r3, #34	; 0x22
1000c44c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c44e:	6822      	ldr	r2, [r4, #0]
1000c450:	7a13      	ldrb	r3, [r2, #8]
1000c452:	2110      	movs	r1, #16
1000c454:	438b      	bics	r3, r1
1000c456:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c458:	0020      	movs	r0, r4
1000c45a:	6863      	ldr	r3, [r4, #4]
1000c45c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c45e:	06ab      	lsls	r3, r5, #26
1000c460:	d50a      	bpl.n	1000c478 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c462:	2321      	movs	r3, #33	; 0x21
1000c464:	5ce3      	ldrb	r3, [r4, r3]
1000c466:	079b      	lsls	r3, r3, #30
1000c468:	d506      	bpl.n	1000c478 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c46a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c46c:	5ce3      	ldrb	r3, [r4, r3]
1000c46e:	079b      	lsls	r3, r3, #30
1000c470:	d502      	bpl.n	1000c478 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c472:	68a3      	ldr	r3, [r4, #8]
1000c474:	0020      	movs	r0, r4
1000c476:	4798      	blx	r3
		}

	}
}
1000c478:	bd70      	pop	{r4, r5, r6, pc}
1000c47a:	46c0      	nop			; (mov r8, r8)
1000c47c:	100186d8 	.word	0x100186d8

1000c480 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c480:	23e1      	movs	r3, #225	; 0xe1
1000c482:	025b      	lsls	r3, r3, #9
1000c484:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c486:	2300      	movs	r3, #0
1000c488:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c48a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c48c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c48e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c490:	3302      	adds	r3, #2
1000c492:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c494:	2203      	movs	r2, #3
1000c496:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c498:	3201      	adds	r2, #1
1000c49a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c49c:	3201      	adds	r2, #1
1000c49e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c4a0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c4a2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c4a4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c4a6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c4a8:	4770      	bx	lr
1000c4aa:	46c0      	nop			; (mov r8, r8)

1000c4ac <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c4ae:	464f      	mov	r7, r9
1000c4b0:	4646      	mov	r6, r8
1000c4b2:	b4c0      	push	{r6, r7}
1000c4b4:	0005      	movs	r5, r0
1000c4b6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c4b8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c4ba:	2300      	movs	r3, #0
1000c4bc:	6043      	str	r3, [r0, #4]
1000c4be:	6083      	str	r3, [r0, #8]
1000c4c0:	60c3      	str	r3, [r0, #12]
1000c4c2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c4c4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c4c6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c4c8:	2200      	movs	r2, #0
1000c4ca:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c4cc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c4ce:	3320      	adds	r3, #32
1000c4d0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c4d2:	3301      	adds	r3, #1
1000c4d4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c4d6:	3301      	adds	r3, #1
1000c4d8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c4da:	4b55      	ldr	r3, [pc, #340]	; (1000c630 <uart_init+0x184>)
1000c4dc:	4299      	cmp	r1, r3
1000c4de:	d118      	bne.n	1000c512 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c4e0:	2009      	movs	r0, #9
1000c4e2:	4c54      	ldr	r4, [pc, #336]	; (1000c634 <uart_init+0x188>)
1000c4e4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c4e6:	200a      	movs	r0, #10
1000c4e8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c4ea:	2009      	movs	r0, #9
1000c4ec:	4c52      	ldr	r4, [pc, #328]	; (1000c638 <uart_init+0x18c>)
1000c4ee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c4f0:	200a      	movs	r0, #10
1000c4f2:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c4f4:	4b51      	ldr	r3, [pc, #324]	; (1000c63c <uart_init+0x190>)
1000c4f6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c4f8:	4951      	ldr	r1, [pc, #324]	; (1000c640 <uart_init+0x194>)
1000c4fa:	2010      	movs	r0, #16
1000c4fc:	4c51      	ldr	r4, [pc, #324]	; (1000c644 <uart_init+0x198>)
1000c4fe:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c500:	4951      	ldr	r1, [pc, #324]	; (1000c648 <uart_init+0x19c>)
1000c502:	2011      	movs	r0, #17
1000c504:	47a0      	blx	r4
1000c506:	4b51      	ldr	r3, [pc, #324]	; (1000c64c <uart_init+0x1a0>)
1000c508:	2201      	movs	r2, #1
1000c50a:	601a      	str	r2, [r3, #0]
1000c50c:	3201      	adds	r2, #1
1000c50e:	601a      	str	r2, [r3, #0]
1000c510:	e01a      	b.n	1000c548 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c512:	4b4f      	ldr	r3, [pc, #316]	; (1000c650 <uart_init+0x1a4>)
1000c514:	4299      	cmp	r1, r3
1000c516:	d117      	bne.n	1000c548 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c518:	200b      	movs	r0, #11
1000c51a:	4c46      	ldr	r4, [pc, #280]	; (1000c634 <uart_init+0x188>)
1000c51c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c51e:	200c      	movs	r0, #12
1000c520:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c522:	200b      	movs	r0, #11
1000c524:	4c44      	ldr	r4, [pc, #272]	; (1000c638 <uart_init+0x18c>)
1000c526:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c528:	200c      	movs	r0, #12
1000c52a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c52c:	4b43      	ldr	r3, [pc, #268]	; (1000c63c <uart_init+0x190>)
1000c52e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c530:	4948      	ldr	r1, [pc, #288]	; (1000c654 <uart_init+0x1a8>)
1000c532:	2012      	movs	r0, #18
1000c534:	4c43      	ldr	r4, [pc, #268]	; (1000c644 <uart_init+0x198>)
1000c536:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c538:	4947      	ldr	r1, [pc, #284]	; (1000c658 <uart_init+0x1ac>)
1000c53a:	2013      	movs	r0, #19
1000c53c:	47a0      	blx	r4
1000c53e:	4b43      	ldr	r3, [pc, #268]	; (1000c64c <uart_init+0x1a0>)
1000c540:	2204      	movs	r2, #4
1000c542:	601a      	str	r2, [r3, #0]
1000c544:	3204      	adds	r2, #4
1000c546:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c548:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c54a:	2204      	movs	r2, #4
1000c54c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c54e:	2b00      	cmp	r3, #0
1000c550:	d152      	bne.n	1000c5f8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c552:	3302      	adds	r3, #2
1000c554:	4698      	mov	r8, r3
1000c556:	e04f      	b.n	1000c5f8 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c558:	8a31      	ldrh	r1, [r6, #16]
1000c55a:	ce01      	ldmia	r6!, {r0}
1000c55c:	b2c0      	uxtb	r0, r0
1000c55e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c560:	3401      	adds	r4, #1
1000c562:	b2e4      	uxtb	r4, r4
1000c564:	4544      	cmp	r4, r8
1000c566:	d3f7      	bcc.n	1000c558 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c568:	682b      	ldr	r3, [r5, #0]
1000c56a:	7d1a      	ldrb	r2, [r3, #20]
1000c56c:	07d2      	lsls	r2, r2, #31
1000c56e:	d504      	bpl.n	1000c57a <uart_init+0xce>
1000c570:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c572:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c574:	7d1a      	ldrb	r2, [r3, #20]
1000c576:	420a      	tst	r2, r1
1000c578:	d1fb      	bne.n	1000c572 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c57a:	2100      	movs	r1, #0
1000c57c:	2220      	movs	r2, #32
1000c57e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c580:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c582:	1e59      	subs	r1, r3, #1
1000c584:	418b      	sbcs	r3, r1
1000c586:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c588:	793b      	ldrb	r3, [r7, #4]
1000c58a:	797a      	ldrb	r2, [r7, #5]
1000c58c:	4313      	orrs	r3, r2
1000c58e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c590:	79ba      	ldrb	r2, [r7, #6]
1000c592:	2a02      	cmp	r2, #2
1000c594:	d00d      	beq.n	1000c5b2 <uart_init+0x106>
1000c596:	b2d1      	uxtb	r1, r2
1000c598:	2902      	cmp	r1, #2
1000c59a:	d802      	bhi.n	1000c5a2 <uart_init+0xf6>
1000c59c:	2a01      	cmp	r2, #1
1000c59e:	d005      	beq.n	1000c5ac <uart_init+0x100>
1000c5a0:	e00f      	b.n	1000c5c2 <uart_init+0x116>
1000c5a2:	2a03      	cmp	r2, #3
1000c5a4:	d008      	beq.n	1000c5b8 <uart_init+0x10c>
1000c5a6:	2a04      	cmp	r2, #4
1000c5a8:	d009      	beq.n	1000c5be <uart_init+0x112>
1000c5aa:	e00a      	b.n	1000c5c2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c5ac:	2202      	movs	r2, #2
1000c5ae:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c5b0:	e007      	b.n	1000c5c2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c5b2:	2206      	movs	r2, #6
1000c5b4:	4313      	orrs	r3, r2
			break;
1000c5b6:	e004      	b.n	1000c5c2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c5b8:	220a      	movs	r2, #10
1000c5ba:	4313      	orrs	r3, r2
			break;
1000c5bc:	e001      	b.n	1000c5c2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c5be:	220e      	movs	r2, #14
1000c5c0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c5c2:	2220      	movs	r2, #32
1000c5c4:	6829      	ldr	r1, [r5, #0]
1000c5c6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c5c8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c5ca:	4b24      	ldr	r3, [pc, #144]	; (1000c65c <uart_init+0x1b0>)
1000c5cc:	4798      	blx	r3
1000c5ce:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c5d0:	0031      	movs	r1, r6
1000c5d2:	4b23      	ldr	r3, [pc, #140]	; (1000c660 <uart_init+0x1b4>)
1000c5d4:	4798      	blx	r3
1000c5d6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c5d8:	0400      	lsls	r0, r0, #16
1000c5da:	0c00      	lsrs	r0, r0, #16
1000c5dc:	4370      	muls	r0, r6
1000c5de:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c5e0:	0931      	lsrs	r1, r6, #4
1000c5e2:	4288      	cmp	r0, r1
1000c5e4:	d906      	bls.n	1000c5f4 <uart_init+0x148>
1000c5e6:	2300      	movs	r3, #0
		i++;
1000c5e8:	3301      	adds	r3, #1
1000c5ea:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c5ec:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c5ee:	4288      	cmp	r0, r1
1000c5f0:	d8fa      	bhi.n	1000c5e8 <uart_init+0x13c>
1000c5f2:	e007      	b.n	1000c604 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c5f4:	2300      	movs	r3, #0
1000c5f6:	e005      	b.n	1000c604 <uart_init+0x158>
1000c5f8:	003e      	movs	r6, r7
1000c5fa:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c5fc:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c5fe:	4b19      	ldr	r3, [pc, #100]	; (1000c664 <uart_init+0x1b8>)
1000c600:	4699      	mov	r9, r3
1000c602:	e7a9      	b.n	1000c558 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c604:	2100      	movs	r1, #0
1000c606:	2028      	movs	r0, #40	; 0x28
1000c608:	682c      	ldr	r4, [r5, #0]
1000c60a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c60c:	3301      	adds	r3, #1
1000c60e:	071b      	lsls	r3, r3, #28
1000c610:	0f5b      	lsrs	r3, r3, #29
1000c612:	00d2      	lsls	r2, r2, #3
1000c614:	4313      	orrs	r3, r2
1000c616:	b29b      	uxth	r3, r3
1000c618:	682a      	ldr	r2, [r5, #0]
1000c61a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c61c:	682b      	ldr	r3, [r5, #0]
1000c61e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c620:	682b      	ldr	r3, [r5, #0]
1000c622:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c624:	2000      	movs	r0, #0
1000c626:	bc0c      	pop	{r2, r3}
1000c628:	4690      	mov	r8, r2
1000c62a:	4699      	mov	r9, r3
1000c62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c62e:	46c0      	nop			; (mov r8, r8)
1000c630:	40004000 	.word	0x40004000
1000c634:	1000bde1 	.word	0x1000bde1
1000c638:	1000b719 	.word	0x1000b719
1000c63c:	100186d8 	.word	0x100186d8
1000c640:	1000c259 	.word	0x1000c259
1000c644:	1000c249 	.word	0x1000c249
1000c648:	1000c2e1 	.word	0x1000c2e1
1000c64c:	e000e100 	.word	0xe000e100
1000c650:	40005000 	.word	0x40005000
1000c654:	1000c36d 	.word	0x1000c36d
1000c658:	1000c3f5 	.word	0x1000c3f5
1000c65c:	1000b70d 	.word	0x1000b70d
1000c660:	10011b71 	.word	0x10011b71
1000c664:	1000b369 	.word	0x1000b369

1000c668 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c668:	6802      	ldr	r2, [r0, #0]
1000c66a:	2001      	movs	r0, #1
1000c66c:	7913      	ldrb	r3, [r2, #4]
1000c66e:	4203      	tst	r3, r0
1000c670:	d0fc      	beq.n	1000c66c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c672:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c674:	2000      	movs	r0, #0
1000c676:	4770      	bx	lr

1000c678 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c678:	6802      	ldr	r2, [r0, #0]
1000c67a:	2001      	movs	r0, #1
1000c67c:	7d13      	ldrb	r3, [r2, #20]
1000c67e:	4203      	tst	r3, r0
1000c680:	d0fc      	beq.n	1000c67c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c682:	7c13      	ldrb	r3, [r2, #16]
1000c684:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c686:	2000      	movs	r0, #0
1000c688:	4770      	bx	lr
1000c68a:	46c0      	nop			; (mov r8, r8)

1000c68c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c68c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c68e:	2a00      	cmp	r2, #0
1000c690:	d00d      	beq.n	1000c6ae <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c692:	330b      	adds	r3, #11
1000c694:	5cc3      	ldrb	r3, [r0, r3]
1000c696:	b2db      	uxtb	r3, r3
1000c698:	2b05      	cmp	r3, #5
1000c69a:	d008      	beq.n	1000c6ae <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c69c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c69e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c6a0:	2205      	movs	r2, #5
1000c6a2:	2322      	movs	r3, #34	; 0x22
1000c6a4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c6a6:	6803      	ldr	r3, [r0, #0]
1000c6a8:	3a04      	subs	r2, #4
1000c6aa:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c6ac:	2300      	movs	r3, #0
}
1000c6ae:	0018      	movs	r0, r3
1000c6b0:	4770      	bx	lr
1000c6b2:	46c0      	nop			; (mov r8, r8)

1000c6b4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c6b4:	0093      	lsls	r3, r2, #2
1000c6b6:	18c3      	adds	r3, r0, r3
1000c6b8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c6ba:	2120      	movs	r1, #32
1000c6bc:	2301      	movs	r3, #1
1000c6be:	4093      	lsls	r3, r2
1000c6c0:	5c42      	ldrb	r2, [r0, r1]
1000c6c2:	4313      	orrs	r3, r2
1000c6c4:	5443      	strb	r3, [r0, r1]
}
1000c6c6:	4770      	bx	lr

1000c6c8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c6c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c6ca:	2221      	movs	r2, #33	; 0x21
1000c6cc:	2301      	movs	r3, #1
1000c6ce:	408b      	lsls	r3, r1
1000c6d0:	5c84      	ldrb	r4, [r0, r2]
1000c6d2:	4323      	orrs	r3, r4
1000c6d4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c6d6:	2901      	cmp	r1, #1
1000c6d8:	d104      	bne.n	1000c6e4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c6da:	6802      	ldr	r2, [r0, #0]
1000c6dc:	7a11      	ldrb	r1, [r2, #8]
1000c6de:	2320      	movs	r3, #32
1000c6e0:	430b      	orrs	r3, r1
1000c6e2:	7213      	strb	r3, [r2, #8]
	}
}
1000c6e4:	bd10      	pop	{r4, pc}
1000c6e6:	46c0      	nop			; (mov r8, r8)

1000c6e8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c6e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c6ea:	2201      	movs	r2, #1
1000c6ec:	408a      	lsls	r2, r1
1000c6ee:	2421      	movs	r4, #33	; 0x21
1000c6f0:	5d03      	ldrb	r3, [r0, r4]
1000c6f2:	4393      	bics	r3, r2
1000c6f4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c6f6:	2901      	cmp	r1, #1
1000c6f8:	d104      	bne.n	1000c704 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c6fa:	6802      	ldr	r2, [r0, #0]
1000c6fc:	7a13      	ldrb	r3, [r2, #8]
1000c6fe:	311f      	adds	r1, #31
1000c700:	438b      	bics	r3, r1
1000c702:	7213      	strb	r3, [r2, #8]
	}

}
1000c704:	bd10      	pop	{r4, pc}
1000c706:	46c0      	nop			; (mov r8, r8)

1000c708 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c708:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c70a:	4647      	mov	r7, r8
1000c70c:	b480      	push	{r7}
1000c70e:	000c      	movs	r4, r1
1000c710:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c712:	2800      	cmp	r0, #0
1000c714:	d10d      	bne.n	1000c732 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c716:	2a00      	cmp	r2, #0
1000c718:	dd0e      	ble.n	1000c738 <_read+0x30>
1000c71a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c71c:	4e08      	ldr	r6, [pc, #32]	; (1000c740 <_read+0x38>)
1000c71e:	4d09      	ldr	r5, [pc, #36]	; (1000c744 <_read+0x3c>)
1000c720:	6830      	ldr	r0, [r6, #0]
1000c722:	0021      	movs	r1, r4
1000c724:	682b      	ldr	r3, [r5, #0]
1000c726:	4798      	blx	r3
		ptr++;
1000c728:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c72a:	42a7      	cmp	r7, r4
1000c72c:	d1f8      	bne.n	1000c720 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c72e:	4640      	mov	r0, r8
1000c730:	e003      	b.n	1000c73a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c732:	2001      	movs	r0, #1
1000c734:	4240      	negs	r0, r0
1000c736:	e000      	b.n	1000c73a <_read+0x32>
	}

	for (; len > 0; --len) {
1000c738:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c73a:	bc04      	pop	{r2}
1000c73c:	4690      	mov	r8, r2
1000c73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c740:	100186e8 	.word	0x100186e8
1000c744:	100186e0 	.word	0x100186e0

1000c748 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c748:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c74a:	4647      	mov	r7, r8
1000c74c:	b480      	push	{r7}
1000c74e:	000e      	movs	r6, r1
1000c750:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c752:	3801      	subs	r0, #1
1000c754:	2802      	cmp	r0, #2
1000c756:	d811      	bhi.n	1000c77c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c758:	2a00      	cmp	r2, #0
1000c75a:	d012      	beq.n	1000c782 <_write+0x3a>
1000c75c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c75e:	4b0c      	ldr	r3, [pc, #48]	; (1000c790 <_write+0x48>)
1000c760:	4698      	mov	r8, r3
1000c762:	4f0c      	ldr	r7, [pc, #48]	; (1000c794 <_write+0x4c>)
1000c764:	4643      	mov	r3, r8
1000c766:	6818      	ldr	r0, [r3, #0]
1000c768:	5d31      	ldrb	r1, [r6, r4]
1000c76a:	683b      	ldr	r3, [r7, #0]
1000c76c:	4798      	blx	r3
1000c76e:	2800      	cmp	r0, #0
1000c770:	db09      	blt.n	1000c786 <_write+0x3e>
			return -1;
		}
		++nChars;
1000c772:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c774:	42a5      	cmp	r5, r4
1000c776:	d1f5      	bne.n	1000c764 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c778:	0020      	movs	r0, r4
1000c77a:	e006      	b.n	1000c78a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c77c:	2001      	movs	r0, #1
1000c77e:	4240      	negs	r0, r0
1000c780:	e003      	b.n	1000c78a <_write+0x42>
	}

	for (; len != 0; --len) {
1000c782:	2000      	movs	r0, #0
1000c784:	e001      	b.n	1000c78a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c786:	2001      	movs	r0, #1
1000c788:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c78a:	bc04      	pop	{r2}
1000c78c:	4690      	mov	r8, r2
1000c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c790:	100186e8 	.word	0x100186e8
1000c794:	100186e4 	.word	0x100186e4

1000c798 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000c798:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c79a:	4a06      	ldr	r2, [pc, #24]	; (1000c7b4 <_sbrk+0x1c>)
1000c79c:	6812      	ldr	r2, [r2, #0]
1000c79e:	2a00      	cmp	r2, #0
1000c7a0:	d102      	bne.n	1000c7a8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000c7a2:	4905      	ldr	r1, [pc, #20]	; (1000c7b8 <_sbrk+0x20>)
1000c7a4:	4a03      	ldr	r2, [pc, #12]	; (1000c7b4 <_sbrk+0x1c>)
1000c7a6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000c7a8:	4a02      	ldr	r2, [pc, #8]	; (1000c7b4 <_sbrk+0x1c>)
1000c7aa:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000c7ac:	18c3      	adds	r3, r0, r3
1000c7ae:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c7b0:	4770      	bx	lr
1000c7b2:	46c0      	nop			; (mov r8, r8)
1000c7b4:	10016988 	.word	0x10016988
1000c7b8:	1001aff0 	.word	0x1001aff0

1000c7bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c7bc:	2001      	movs	r0, #1
1000c7be:	4240      	negs	r0, r0
1000c7c0:	4770      	bx	lr
1000c7c2:	46c0      	nop			; (mov r8, r8)

1000c7c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c7c4:	2380      	movs	r3, #128	; 0x80
1000c7c6:	019b      	lsls	r3, r3, #6
1000c7c8:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c7ca:	2000      	movs	r0, #0
1000c7cc:	4770      	bx	lr
1000c7ce:	46c0      	nop			; (mov r8, r8)

1000c7d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c7d0:	2001      	movs	r0, #1
1000c7d2:	4770      	bx	lr

1000c7d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c7d4:	2000      	movs	r0, #0
1000c7d6:	4770      	bx	lr

1000c7d8 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000c7d8:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000c7da:	4804      	ldr	r0, [pc, #16]	; (1000c7ec <ble_undefined_event_handler+0x14>)
1000c7dc:	4b04      	ldr	r3, [pc, #16]	; (1000c7f0 <ble_undefined_event_handler+0x18>)
1000c7de:	4798      	blx	r3
1000c7e0:	4804      	ldr	r0, [pc, #16]	; (1000c7f4 <ble_undefined_event_handler+0x1c>)
1000c7e2:	4b05      	ldr	r3, [pc, #20]	; (1000c7f8 <ble_undefined_event_handler+0x20>)
1000c7e4:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c7e6:	2000      	movs	r0, #0
1000c7e8:	bd10      	pop	{r4, pc}
1000c7ea:	46c0      	nop			; (mov r8, r8)
1000c7ec:	10014d08 	.word	0x10014d08
1000c7f0:	10013b61 	.word	0x10013b61
1000c7f4:	10015c30 	.word	0x10015c30
1000c7f8:	10013a41 	.word	0x10013a41

1000c7fc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c7fc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c7fe:	7800      	ldrb	r0, [r0, #0]
1000c800:	2800      	cmp	r0, #0
1000c802:	d006      	beq.n	1000c812 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c804:	4803      	ldr	r0, [pc, #12]	; (1000c814 <ble_scan_report_handler+0x18>)
1000c806:	4b04      	ldr	r3, [pc, #16]	; (1000c818 <ble_scan_report_handler+0x1c>)
1000c808:	4798      	blx	r3
1000c80a:	4804      	ldr	r0, [pc, #16]	; (1000c81c <ble_scan_report_handler+0x20>)
1000c80c:	4b04      	ldr	r3, [pc, #16]	; (1000c820 <ble_scan_report_handler+0x24>)
1000c80e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c810:	20e2      	movs	r0, #226	; 0xe2
}
1000c812:	bd10      	pop	{r4, pc}
1000c814:	10014d08 	.word	0x10014d08
1000c818:	10013b61 	.word	0x10013b61
1000c81c:	10015c4c 	.word	0x10015c4c
1000c820:	10013a41 	.word	0x10013a41

1000c824 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c824:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c826:	7800      	ldrb	r0, [r0, #0]
1000c828:	2800      	cmp	r0, #0
1000c82a:	d006      	beq.n	1000c83a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c82c:	4803      	ldr	r0, [pc, #12]	; (1000c83c <ble_adv_report_handler+0x18>)
1000c82e:	4b04      	ldr	r3, [pc, #16]	; (1000c840 <ble_adv_report_handler+0x1c>)
1000c830:	4798      	blx	r3
1000c832:	4804      	ldr	r0, [pc, #16]	; (1000c844 <ble_adv_report_handler+0x20>)
1000c834:	4b04      	ldr	r3, [pc, #16]	; (1000c848 <ble_adv_report_handler+0x24>)
1000c836:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c838:	20e2      	movs	r0, #226	; 0xe2
}
1000c83a:	bd10      	pop	{r4, pc}
1000c83c:	10014d08 	.word	0x10014d08
1000c840:	10013b61 	.word	0x10013b61
1000c844:	10015c60 	.word	0x10015c60
1000c848:	10013a41 	.word	0x10013a41

1000c84c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c84c:	b510      	push	{r4, lr}
1000c84e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c850:	4804      	ldr	r0, [pc, #16]	; (1000c864 <ble_mtu_changed_indication_handler+0x18>)
1000c852:	4b05      	ldr	r3, [pc, #20]	; (1000c868 <ble_mtu_changed_indication_handler+0x1c>)
1000c854:	4798      	blx	r3
1000c856:	8862      	ldrh	r2, [r4, #2]
1000c858:	8821      	ldrh	r1, [r4, #0]
1000c85a:	4804      	ldr	r0, [pc, #16]	; (1000c86c <ble_mtu_changed_indication_handler+0x20>)
1000c85c:	4b04      	ldr	r3, [pc, #16]	; (1000c870 <ble_mtu_changed_indication_handler+0x24>)
1000c85e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c860:	2000      	movs	r0, #0
1000c862:	bd10      	pop	{r4, pc}
1000c864:	10014d08 	.word	0x10014d08
1000c868:	10013b61 	.word	0x10013b61
1000c86c:	10015c74 	.word	0x10015c74
1000c870:	10013a41 	.word	0x10013a41

1000c874 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c874:	b570      	push	{r4, r5, r6, lr}
1000c876:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c878:	78c5      	ldrb	r5, [r0, #3]
1000c87a:	2d00      	cmp	r5, #0
1000c87c:	d108      	bne.n	1000c890 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c87e:	480a      	ldr	r0, [pc, #40]	; (1000c8a8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c880:	4b0a      	ldr	r3, [pc, #40]	; (1000c8ac <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c882:	4798      	blx	r3
1000c884:	78a2      	ldrb	r2, [r4, #2]
1000c886:	8821      	ldrh	r1, [r4, #0]
1000c888:	4809      	ldr	r0, [pc, #36]	; (1000c8b0 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000c88a:	4b0a      	ldr	r3, [pc, #40]	; (1000c8b4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c88c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c88e:	e008      	b.n	1000c8a2 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c890:	4805      	ldr	r0, [pc, #20]	; (1000c8a8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c892:	4b06      	ldr	r3, [pc, #24]	; (1000c8ac <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c894:	4798      	blx	r3
1000c896:	78a2      	ldrb	r2, [r4, #2]
1000c898:	8821      	ldrh	r1, [r4, #0]
1000c89a:	4807      	ldr	r0, [pc, #28]	; (1000c8b8 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000c89c:	4b05      	ldr	r3, [pc, #20]	; (1000c8b4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c89e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c8a0:	25e2      	movs	r5, #226	; 0xe2
}
1000c8a2:	0028      	movs	r0, r5
1000c8a4:	bd70      	pop	{r4, r5, r6, pc}
1000c8a6:	46c0      	nop			; (mov r8, r8)
1000c8a8:	10014d08 	.word	0x10014d08
1000c8ac:	10013b61 	.word	0x10013b61
1000c8b0:	10015cac 	.word	0x10015cac
1000c8b4:	10013a41 	.word	0x10013a41
1000c8b8:	10015cdc 	.word	0x10015cdc

1000c8bc <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c8bc:	b570      	push	{r4, r5, r6, lr}
1000c8be:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c8c0:	78c5      	ldrb	r5, [r0, #3]
1000c8c2:	2d00      	cmp	r5, #0
1000c8c4:	d108      	bne.n	1000c8d8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c8c6:	480a      	ldr	r0, [pc, #40]	; (1000c8f0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c8c8:	4b0a      	ldr	r3, [pc, #40]	; (1000c8f4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c8ca:	4798      	blx	r3
1000c8cc:	78a2      	ldrb	r2, [r4, #2]
1000c8ce:	8821      	ldrh	r1, [r4, #0]
1000c8d0:	4809      	ldr	r0, [pc, #36]	; (1000c8f8 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000c8d2:	4b0a      	ldr	r3, [pc, #40]	; (1000c8fc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c8d4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c8d6:	e008      	b.n	1000c8ea <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c8d8:	4805      	ldr	r0, [pc, #20]	; (1000c8f0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c8da:	4b06      	ldr	r3, [pc, #24]	; (1000c8f4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c8dc:	4798      	blx	r3
1000c8de:	78a2      	ldrb	r2, [r4, #2]
1000c8e0:	8821      	ldrh	r1, [r4, #0]
1000c8e2:	4807      	ldr	r0, [pc, #28]	; (1000c900 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000c8e4:	4b05      	ldr	r3, [pc, #20]	; (1000c8fc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c8e6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c8e8:	25e2      	movs	r5, #226	; 0xe2
}
1000c8ea:	0028      	movs	r0, r5
1000c8ec:	bd70      	pop	{r4, r5, r6, pc}
1000c8ee:	46c0      	nop			; (mov r8, r8)
1000c8f0:	10014d08 	.word	0x10014d08
1000c8f4:	10013b61 	.word	0x10013b61
1000c8f8:	10015d14 	.word	0x10015d14
1000c8fc:	10013a41 	.word	0x10013a41
1000c900:	10015d50 	.word	0x10015d50

1000c904 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c906:	0006      	movs	r6, r0
1000c908:	4c1d      	ldr	r4, [pc, #116]	; (1000c980 <ble_disconnected_state_handler+0x7c>)
1000c90a:	239b      	movs	r3, #155	; 0x9b
1000c90c:	009b      	lsls	r3, r3, #2
1000c90e:	18e7      	adds	r7, r4, r3
1000c910:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c912:	0023      	movs	r3, r4
1000c914:	3b56      	subs	r3, #86	; 0x56
1000c916:	881a      	ldrh	r2, [r3, #0]
1000c918:	8833      	ldrh	r3, [r6, #0]
1000c91a:	429a      	cmp	r2, r3
1000c91c:	d122      	bne.n	1000c964 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c91e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c920:	2b05      	cmp	r3, #5
1000c922:	d001      	beq.n	1000c928 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c924:	2b08      	cmp	r3, #8
1000c926:	d102      	bne.n	1000c92e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c928:	2301      	movs	r3, #1
1000c92a:	702b      	strb	r3, [r5, #0]
1000c92c:	e01a      	b.n	1000c964 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c92e:	2b07      	cmp	r3, #7
1000c930:	d80f      	bhi.n	1000c952 <ble_disconnected_state_handler+0x4e>
1000c932:	009b      	lsls	r3, r3, #2
1000c934:	4a13      	ldr	r2, [pc, #76]	; (1000c984 <ble_disconnected_state_handler+0x80>)
1000c936:	58d3      	ldr	r3, [r2, r3]
1000c938:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c93a:	2300      	movs	r3, #0
1000c93c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c93e:	4b12      	ldr	r3, [pc, #72]	; (1000c988 <ble_disconnected_state_handler+0x84>)
1000c940:	781b      	ldrb	r3, [r3, #0]
1000c942:	2b00      	cmp	r3, #0
1000c944:	d00e      	beq.n	1000c964 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c946:	4a10      	ldr	r2, [pc, #64]	; (1000c988 <ble_disconnected_state_handler+0x84>)
1000c948:	7813      	ldrb	r3, [r2, #0]
1000c94a:	3b01      	subs	r3, #1
1000c94c:	b2db      	uxtb	r3, r3
1000c94e:	7013      	strb	r3, [r2, #0]
1000c950:	e008      	b.n	1000c964 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c952:	480e      	ldr	r0, [pc, #56]	; (1000c98c <ble_disconnected_state_handler+0x88>)
1000c954:	4b0e      	ldr	r3, [pc, #56]	; (1000c990 <ble_disconnected_state_handler+0x8c>)
1000c956:	4798      	blx	r3
1000c958:	7829      	ldrb	r1, [r5, #0]
1000c95a:	480e      	ldr	r0, [pc, #56]	; (1000c994 <ble_disconnected_state_handler+0x90>)
1000c95c:	4b0e      	ldr	r3, [pc, #56]	; (1000c998 <ble_disconnected_state_handler+0x94>)
1000c95e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c960:	2300      	movs	r3, #0
1000c962:	702b      	strb	r3, [r5, #0]
1000c964:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c966:	42bc      	cmp	r4, r7
1000c968:	d1d2      	bne.n	1000c910 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c96a:	4808      	ldr	r0, [pc, #32]	; (1000c98c <ble_disconnected_state_handler+0x88>)
1000c96c:	4b08      	ldr	r3, [pc, #32]	; (1000c990 <ble_disconnected_state_handler+0x8c>)
1000c96e:	4798      	blx	r3
1000c970:	8832      	ldrh	r2, [r6, #0]
1000c972:	78b1      	ldrb	r1, [r6, #2]
1000c974:	4809      	ldr	r0, [pc, #36]	; (1000c99c <ble_disconnected_state_handler+0x98>)
1000c976:	4b08      	ldr	r3, [pc, #32]	; (1000c998 <ble_disconnected_state_handler+0x94>)
1000c978:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c97a:	2000      	movs	r0, #0
1000c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c97e:	46c0      	nop			; (mov r8, r8)
1000c980:	10018762 	.word	0x10018762
1000c984:	10015bbc 	.word	0x10015bbc
1000c988:	10018970 	.word	0x10018970
1000c98c:	10014d08 	.word	0x10014d08
1000c990:	10013b61 	.word	0x10013b61
1000c994:	10015d8c 	.word	0x10015d8c
1000c998:	10013a41 	.word	0x10013a41
1000c99c:	10015da4 	.word	0x10015da4

1000c9a0 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c9a0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c9a2:	4804      	ldr	r0, [pc, #16]	; (1000c9b4 <ble_conn_param_update+0x14>)
1000c9a4:	4b04      	ldr	r3, [pc, #16]	; (1000c9b8 <ble_conn_param_update+0x18>)
1000c9a6:	4798      	blx	r3
1000c9a8:	4804      	ldr	r0, [pc, #16]	; (1000c9bc <ble_conn_param_update+0x1c>)
1000c9aa:	4b05      	ldr	r3, [pc, #20]	; (1000c9c0 <ble_conn_param_update+0x20>)
1000c9ac:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c9ae:	2000      	movs	r0, #0
1000c9b0:	bd10      	pop	{r4, pc}
1000c9b2:	46c0      	nop			; (mov r8, r8)
1000c9b4:	10014d08 	.word	0x10014d08
1000c9b8:	10013b61 	.word	0x10013b61
1000c9bc:	10015dd4 	.word	0x10015dd4
1000c9c0:	10013a41 	.word	0x10013a41

1000c9c4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c9c6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c9c8:	8801      	ldrh	r1, [r0, #0]
1000c9ca:	4b28      	ldr	r3, [pc, #160]	; (1000ca6c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c9cc:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c9ce:	891a      	ldrh	r2, [r3, #8]
1000c9d0:	428a      	cmp	r2, r1
1000c9d2:	d104      	bne.n	1000c9de <ble_encryption_status_change_handler+0x1a>
1000c9d4:	001a      	movs	r2, r3
1000c9d6:	325e      	adds	r2, #94	; 0x5e
1000c9d8:	7812      	ldrb	r2, [r2, #0]
1000c9da:	2a06      	cmp	r2, #6
1000c9dc:	d02e      	beq.n	1000ca3c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c9de:	3401      	adds	r4, #1
1000c9e0:	b2e4      	uxtb	r4, r4
1000c9e2:	337c      	adds	r3, #124	; 0x7c
1000c9e4:	2c05      	cmp	r4, #5
1000c9e6:	d1f2      	bne.n	1000c9ce <ble_encryption_status_change_handler+0xa>
1000c9e8:	e039      	b.n	1000ca5e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c9ea:	4920      	ldr	r1, [pc, #128]	; (1000ca6c <ble_encryption_status_change_handler+0xa8>)
1000c9ec:	0163      	lsls	r3, r4, #5
1000c9ee:	1b1a      	subs	r2, r3, r4
1000c9f0:	0092      	lsls	r2, r2, #2
1000c9f2:	188a      	adds	r2, r1, r2
1000c9f4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c9f6:	0014      	movs	r4, r2
1000c9f8:	345e      	adds	r4, #94	; 0x5e
1000c9fa:	2307      	movs	r3, #7
1000c9fc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c9fe:	481c      	ldr	r0, [pc, #112]	; (1000ca70 <ble_encryption_status_change_handler+0xac>)
1000ca00:	4b1c      	ldr	r3, [pc, #112]	; (1000ca74 <ble_encryption_status_change_handler+0xb0>)
1000ca02:	4798      	blx	r3
1000ca04:	481c      	ldr	r0, [pc, #112]	; (1000ca78 <ble_encryption_status_change_handler+0xb4>)
1000ca06:	4b1d      	ldr	r3, [pc, #116]	; (1000ca7c <ble_encryption_status_change_handler+0xb8>)
1000ca08:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ca0a:	25e2      	movs	r5, #226	; 0xe2
1000ca0c:	e02b      	b.n	1000ca66 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000ca0e:	4818      	ldr	r0, [pc, #96]	; (1000ca70 <ble_encryption_status_change_handler+0xac>)
1000ca10:	4b18      	ldr	r3, [pc, #96]	; (1000ca74 <ble_encryption_status_change_handler+0xb0>)
1000ca12:	4798      	blx	r3
1000ca14:	481a      	ldr	r0, [pc, #104]	; (1000ca80 <ble_encryption_status_change_handler+0xbc>)
1000ca16:	4b19      	ldr	r3, [pc, #100]	; (1000ca7c <ble_encryption_status_change_handler+0xb8>)
1000ca18:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000ca1a:	4914      	ldr	r1, [pc, #80]	; (1000ca6c <ble_encryption_status_change_handler+0xa8>)
1000ca1c:	0163      	lsls	r3, r4, #5
1000ca1e:	1b1a      	subs	r2, r3, r4
1000ca20:	0092      	lsls	r2, r2, #2
1000ca22:	188a      	adds	r2, r1, r2
1000ca24:	0010      	movs	r0, r2
1000ca26:	305e      	adds	r0, #94	; 0x5e
1000ca28:	2708      	movs	r7, #8
1000ca2a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000ca2c:	78f0      	ldrb	r0, [r6, #3]
1000ca2e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000ca30:	78b2      	ldrb	r2, [r6, #2]
1000ca32:	1b1c      	subs	r4, r3, r4
1000ca34:	00a4      	lsls	r4, r4, #2
1000ca36:	190c      	adds	r4, r1, r4
1000ca38:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000ca3a:	e014      	b.n	1000ca66 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000ca3c:	78b5      	ldrb	r5, [r6, #2]
1000ca3e:	2d00      	cmp	r5, #0
1000ca40:	d0e5      	beq.n	1000ca0e <ble_encryption_status_change_handler+0x4a>
1000ca42:	e7d2      	b.n	1000c9ea <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000ca44:	4e0a      	ldr	r6, [pc, #40]	; (1000ca70 <ble_encryption_status_change_handler+0xac>)
1000ca46:	0030      	movs	r0, r6
1000ca48:	4d0a      	ldr	r5, [pc, #40]	; (1000ca74 <ble_encryption_status_change_handler+0xb0>)
1000ca4a:	47a8      	blx	r5
1000ca4c:	480c      	ldr	r0, [pc, #48]	; (1000ca80 <ble_encryption_status_change_handler+0xbc>)
1000ca4e:	4c0b      	ldr	r4, [pc, #44]	; (1000ca7c <ble_encryption_status_change_handler+0xb8>)
1000ca50:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000ca52:	0030      	movs	r0, r6
1000ca54:	47a8      	blx	r5
1000ca56:	480b      	ldr	r0, [pc, #44]	; (1000ca84 <ble_encryption_status_change_handler+0xc0>)
1000ca58:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000ca5a:	25e2      	movs	r5, #226	; 0xe2
1000ca5c:	e003      	b.n	1000ca66 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000ca5e:	78b5      	ldrb	r5, [r6, #2]
1000ca60:	2d00      	cmp	r5, #0
1000ca62:	d1c2      	bne.n	1000c9ea <ble_encryption_status_change_handler+0x26>
1000ca64:	e7ee      	b.n	1000ca44 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000ca66:	0028      	movs	r0, r5
1000ca68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca6a:	46c0      	nop			; (mov r8, r8)
1000ca6c:	10018704 	.word	0x10018704
1000ca70:	10014d08 	.word	0x10014d08
1000ca74:	10013b61 	.word	0x10013b61
1000ca78:	10015df0 	.word	0x10015df0
1000ca7c:	10013a41 	.word	0x10013a41
1000ca80:	10015e04 	.word	0x10015e04
1000ca84:	10015e28 	.word	0x10015e28

1000ca88 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000ca88:	b530      	push	{r4, r5, lr}
1000ca8a:	b085      	sub	sp, #20
1000ca8c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000ca8e:	4b1f      	ldr	r3, [pc, #124]	; (1000cb0c <ble_scan_info_handler+0x84>)
1000ca90:	781b      	ldrb	r3, [r3, #0]
1000ca92:	b2db      	uxtb	r3, r3
1000ca94:	2b13      	cmp	r3, #19
1000ca96:	d824      	bhi.n	1000cae2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000ca98:	4d1c      	ldr	r5, [pc, #112]	; (1000cb0c <ble_scan_info_handler+0x84>)
1000ca9a:	782b      	ldrb	r3, [r5, #0]
1000ca9c:	b2db      	uxtb	r3, r3
1000ca9e:	0098      	lsls	r0, r3, #2
1000caa0:	18c0      	adds	r0, r0, r3
1000caa2:	00c0      	lsls	r0, r0, #3
1000caa4:	18c3      	adds	r3, r0, r3
1000caa6:	481a      	ldr	r0, [pc, #104]	; (1000cb10 <ble_scan_info_handler+0x88>)
1000caa8:	1818      	adds	r0, r3, r0
1000caaa:	2229      	movs	r2, #41	; 0x29
1000caac:	0021      	movs	r1, r4
1000caae:	4b19      	ldr	r3, [pc, #100]	; (1000cb14 <ble_scan_info_handler+0x8c>)
1000cab0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000cab2:	4819      	ldr	r0, [pc, #100]	; (1000cb18 <ble_scan_info_handler+0x90>)
1000cab4:	4b19      	ldr	r3, [pc, #100]	; (1000cb1c <ble_scan_info_handler+0x94>)
1000cab6:	4798      	blx	r3
1000cab8:	7829      	ldrb	r1, [r5, #0]
1000caba:	b2c9      	uxtb	r1, r1
1000cabc:	79a3      	ldrb	r3, [r4, #6]
1000cabe:	79e2      	ldrb	r2, [r4, #7]
1000cac0:	78a0      	ldrb	r0, [r4, #2]
1000cac2:	9003      	str	r0, [sp, #12]
1000cac4:	78e0      	ldrb	r0, [r4, #3]
1000cac6:	9002      	str	r0, [sp, #8]
1000cac8:	7920      	ldrb	r0, [r4, #4]
1000caca:	9001      	str	r0, [sp, #4]
1000cacc:	7960      	ldrb	r0, [r4, #5]
1000cace:	9000      	str	r0, [sp, #0]
1000cad0:	4813      	ldr	r0, [pc, #76]	; (1000cb20 <ble_scan_info_handler+0x98>)
1000cad2:	4c14      	ldr	r4, [pc, #80]	; (1000cb24 <ble_scan_info_handler+0x9c>)
1000cad4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000cad6:	782b      	ldrb	r3, [r5, #0]
1000cad8:	3301      	adds	r3, #1
1000cada:	b2db      	uxtb	r3, r3
1000cadc:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000cade:	2300      	movs	r3, #0
1000cae0:	e011      	b.n	1000cb06 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cae2:	480d      	ldr	r0, [pc, #52]	; (1000cb18 <ble_scan_info_handler+0x90>)
1000cae4:	4b0d      	ldr	r3, [pc, #52]	; (1000cb1c <ble_scan_info_handler+0x94>)
1000cae6:	4798      	blx	r3
1000cae8:	480f      	ldr	r0, [pc, #60]	; (1000cb28 <ble_scan_info_handler+0xa0>)
1000caea:	4b0e      	ldr	r3, [pc, #56]	; (1000cb24 <ble_scan_info_handler+0x9c>)
1000caec:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000caee:	4b0f      	ldr	r3, [pc, #60]	; (1000cb2c <ble_scan_info_handler+0xa4>)
1000caf0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000caf2:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000caf4:	2800      	cmp	r0, #0
1000caf6:	d006      	beq.n	1000cb06 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000caf8:	4807      	ldr	r0, [pc, #28]	; (1000cb18 <ble_scan_info_handler+0x90>)
1000cafa:	4b08      	ldr	r3, [pc, #32]	; (1000cb1c <ble_scan_info_handler+0x94>)
1000cafc:	4798      	blx	r3
1000cafe:	480c      	ldr	r0, [pc, #48]	; (1000cb30 <ble_scan_info_handler+0xa8>)
1000cb00:	4b08      	ldr	r3, [pc, #32]	; (1000cb24 <ble_scan_info_handler+0x9c>)
1000cb02:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cb04:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000cb06:	0018      	movs	r0, r3
1000cb08:	b005      	add	sp, #20
1000cb0a:	bd30      	pop	{r4, r5, pc}
1000cb0c:	10017270 	.word	0x10017270
1000cb10:	100189e8 	.word	0x100189e8
1000cb14:	100138e7 	.word	0x100138e7
1000cb18:	10014d08 	.word	0x10014d08
1000cb1c:	10013b61 	.word	0x10013b61
1000cb20:	10015e50 	.word	0x10015e50
1000cb24:	10013a41 	.word	0x10013a41
1000cb28:	10015e8c 	.word	0x10015e8c
1000cb2c:	1000f571 	.word	0x1000f571
1000cb30:	10015ec4 	.word	0x10015ec4

1000cb34 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb36:	465f      	mov	r7, fp
1000cb38:	4656      	mov	r6, sl
1000cb3a:	464d      	mov	r5, r9
1000cb3c:	4644      	mov	r4, r8
1000cb3e:	b4f0      	push	{r4, r5, r6, r7}
1000cb40:	b083      	sub	sp, #12
1000cb42:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cb44:	8841      	ldrh	r1, [r0, #2]
1000cb46:	4b59      	ldr	r3, [pc, #356]	; (1000ccac <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb48:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cb4a:	891a      	ldrh	r2, [r3, #8]
1000cb4c:	428a      	cmp	r2, r1
1000cb4e:	d105      	bne.n	1000cb5c <ble_pair_done_handler+0x28>
1000cb50:	001a      	movs	r2, r3
1000cb52:	325e      	adds	r2, #94	; 0x5e
1000cb54:	7812      	ldrb	r2, [r2, #0]
1000cb56:	2a03      	cmp	r2, #3
1000cb58:	d100      	bne.n	1000cb5c <ble_pair_done_handler+0x28>
1000cb5a:	e09a      	b.n	1000cc92 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb5c:	3401      	adds	r4, #1
1000cb5e:	b2e4      	uxtb	r4, r4
1000cb60:	337c      	adds	r3, #124	; 0x7c
1000cb62:	2c05      	cmp	r4, #5
1000cb64:	d1f1      	bne.n	1000cb4a <ble_pair_done_handler+0x16>
1000cb66:	e057      	b.n	1000cc18 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000cb68:	7821      	ldrb	r1, [r4, #0]
1000cb6a:	0030      	movs	r0, r6
1000cb6c:	47b8      	blx	r7
1000cb6e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000cb70:	454c      	cmp	r4, r9
1000cb72:	d1f9      	bne.n	1000cb68 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000cb74:	484e      	ldr	r0, [pc, #312]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cb76:	4b4f      	ldr	r3, [pc, #316]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cb78:	4798      	blx	r3
1000cb7a:	484f      	ldr	r0, [pc, #316]	; (1000ccb8 <ble_pair_done_handler+0x184>)
1000cb7c:	4b4f      	ldr	r3, [pc, #316]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cb7e:	4798      	blx	r3
1000cb80:	002e      	movs	r6, r5
1000cb82:	3622      	adds	r6, #34	; 0x22
1000cb84:	002c      	movs	r4, r5
1000cb86:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000cb88:	4f4c      	ldr	r7, [pc, #304]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cb8a:	7831      	ldrb	r1, [r6, #0]
1000cb8c:	484c      	ldr	r0, [pc, #304]	; (1000ccc0 <ble_pair_done_handler+0x18c>)
1000cb8e:	47b8      	blx	r7
1000cb90:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000cb92:	42a6      	cmp	r6, r4
1000cb94:	d1f9      	bne.n	1000cb8a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000cb96:	4846      	ldr	r0, [pc, #280]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cb98:	4b46      	ldr	r3, [pc, #280]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cb9a:	4798      	blx	r3
1000cb9c:	4849      	ldr	r0, [pc, #292]	; (1000ccc4 <ble_pair_done_handler+0x190>)
1000cb9e:	4b47      	ldr	r3, [pc, #284]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cba0:	4798      	blx	r3
1000cba2:	3542      	adds	r5, #66	; 0x42
1000cba4:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000cba6:	4e46      	ldr	r6, [pc, #280]	; (1000ccc0 <ble_pair_done_handler+0x18c>)
1000cba8:	4d44      	ldr	r5, [pc, #272]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cbaa:	7821      	ldrb	r1, [r4, #0]
1000cbac:	0030      	movs	r0, r6
1000cbae:	47a8      	blx	r5
1000cbb0:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000cbb2:	42bc      	cmp	r4, r7
1000cbb4:	d1f9      	bne.n	1000cbaa <ble_pair_done_handler+0x76>
1000cbb6:	e071      	b.n	1000cc9c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000cbb8:	0163      	lsls	r3, r4, #5
1000cbba:	1b1c      	subs	r4, r3, r4
1000cbbc:	00a4      	lsls	r4, r4, #2
1000cbbe:	4b3b      	ldr	r3, [pc, #236]	; (1000ccac <ble_pair_done_handler+0x178>)
1000cbc0:	191c      	adds	r4, r3, r4
1000cbc2:	345e      	adds	r4, #94	; 0x5e
1000cbc4:	7823      	ldrb	r3, [r4, #0]
1000cbc6:	2b01      	cmp	r3, #1
1000cbc8:	d915      	bls.n	1000cbf6 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000cbca:	4839      	ldr	r0, [pc, #228]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cbcc:	4b39      	ldr	r3, [pc, #228]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cbce:	4798      	blx	r3
1000cbd0:	483d      	ldr	r0, [pc, #244]	; (1000ccc8 <ble_pair_done_handler+0x194>)
1000cbd2:	4b3a      	ldr	r3, [pc, #232]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cbd4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000cbd6:	8868      	ldrh	r0, [r5, #2]
1000cbd8:	2113      	movs	r1, #19
1000cbda:	4b3c      	ldr	r3, [pc, #240]	; (1000cccc <ble_pair_done_handler+0x198>)
1000cbdc:	4798      	blx	r3
1000cbde:	9001      	str	r0, [sp, #4]
1000cbe0:	2800      	cmp	r0, #0
1000cbe2:	d05b      	beq.n	1000cc9c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000cbe4:	4832      	ldr	r0, [pc, #200]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cbe6:	4b33      	ldr	r3, [pc, #204]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cbe8:	4798      	blx	r3
1000cbea:	4839      	ldr	r0, [pc, #228]	; (1000ccd0 <ble_pair_done_handler+0x19c>)
1000cbec:	4b33      	ldr	r3, [pc, #204]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cbee:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cbf0:	23e2      	movs	r3, #226	; 0xe2
1000cbf2:	9301      	str	r3, [sp, #4]
1000cbf4:	e052      	b.n	1000cc9c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000cbf6:	2300      	movs	r3, #0
1000cbf8:	9301      	str	r3, [sp, #4]
1000cbfa:	e04f      	b.n	1000cc9c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cbfc:	4e2c      	ldr	r6, [pc, #176]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cbfe:	0030      	movs	r0, r6
1000cc00:	4d2c      	ldr	r5, [pc, #176]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cc02:	47a8      	blx	r5
1000cc04:	4833      	ldr	r0, [pc, #204]	; (1000ccd4 <ble_pair_done_handler+0x1a0>)
1000cc06:	4c2d      	ldr	r4, [pc, #180]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cc08:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000cc0a:	0030      	movs	r0, r6
1000cc0c:	47a8      	blx	r5
1000cc0e:	4832      	ldr	r0, [pc, #200]	; (1000ccd8 <ble_pair_done_handler+0x1a4>)
1000cc10:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cc12:	23e2      	movs	r3, #226	; 0xe2
1000cc14:	9301      	str	r3, [sp, #4]
1000cc16:	e041      	b.n	1000cc9c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cc18:	792b      	ldrb	r3, [r5, #4]
1000cc1a:	2b00      	cmp	r3, #0
1000cc1c:	d1cc      	bne.n	1000cbb8 <ble_pair_done_handler+0x84>
1000cc1e:	e7ed      	b.n	1000cbfc <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cc20:	4823      	ldr	r0, [pc, #140]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cc22:	4b24      	ldr	r3, [pc, #144]	; (1000ccb4 <ble_pair_done_handler+0x180>)
1000cc24:	469b      	mov	fp, r3
1000cc26:	4798      	blx	r3
1000cc28:	482a      	ldr	r0, [pc, #168]	; (1000ccd4 <ble_pair_done_handler+0x1a0>)
1000cc2a:	4b24      	ldr	r3, [pc, #144]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cc2c:	469a      	mov	sl, r3
1000cc2e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000cc30:	782a      	ldrb	r2, [r5, #0]
1000cc32:	4b1e      	ldr	r3, [pc, #120]	; (1000ccac <ble_pair_done_handler+0x178>)
1000cc34:	4698      	mov	r8, r3
1000cc36:	0167      	lsls	r7, r4, #5
1000cc38:	1b3b      	subs	r3, r7, r4
1000cc3a:	009b      	lsls	r3, r3, #2
1000cc3c:	4443      	add	r3, r8
1000cc3e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000cc40:	792a      	ldrb	r2, [r5, #4]
1000cc42:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000cc44:	335e      	adds	r3, #94	; 0x5e
1000cc46:	2205      	movs	r2, #5
1000cc48:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000cc4a:	1b38      	subs	r0, r7, r4
1000cc4c:	0080      	lsls	r0, r0, #2
1000cc4e:	4440      	add	r0, r8
1000cc50:	3036      	adds	r0, #54	; 0x36
1000cc52:	320b      	adds	r2, #11
1000cc54:	0029      	movs	r1, r5
1000cc56:	3122      	adds	r1, #34	; 0x22
1000cc58:	4b20      	ldr	r3, [pc, #128]	; (1000ccdc <ble_pair_done_handler+0x1a8>)
1000cc5a:	4699      	mov	r9, r3
1000cc5c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000cc5e:	1b38      	subs	r0, r7, r4
1000cc60:	0080      	lsls	r0, r0, #2
1000cc62:	4440      	add	r0, r8
1000cc64:	3046      	adds	r0, #70	; 0x46
1000cc66:	2217      	movs	r2, #23
1000cc68:	0029      	movs	r1, r5
1000cc6a:	3132      	adds	r1, #50	; 0x32
1000cc6c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000cc6e:	1b38      	subs	r0, r7, r4
1000cc70:	0080      	lsls	r0, r0, #2
1000cc72:	4440      	add	r0, r8
1000cc74:	301a      	adds	r0, #26
1000cc76:	1dac      	adds	r4, r5, #6
1000cc78:	221c      	movs	r2, #28
1000cc7a:	0021      	movs	r1, r4
1000cc7c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000cc7e:	480c      	ldr	r0, [pc, #48]	; (1000ccb0 <ble_pair_done_handler+0x17c>)
1000cc80:	47d8      	blx	fp
1000cc82:	4817      	ldr	r0, [pc, #92]	; (1000cce0 <ble_pair_done_handler+0x1ac>)
1000cc84:	47d0      	blx	sl
1000cc86:	2316      	movs	r3, #22
1000cc88:	4699      	mov	r9, r3
1000cc8a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000cc8c:	4e0c      	ldr	r6, [pc, #48]	; (1000ccc0 <ble_pair_done_handler+0x18c>)
1000cc8e:	4f0b      	ldr	r7, [pc, #44]	; (1000ccbc <ble_pair_done_handler+0x188>)
1000cc90:	e76a      	b.n	1000cb68 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cc92:	792b      	ldrb	r3, [r5, #4]
1000cc94:	9301      	str	r3, [sp, #4]
1000cc96:	2b00      	cmp	r3, #0
1000cc98:	d0c2      	beq.n	1000cc20 <ble_pair_done_handler+0xec>
1000cc9a:	e78d      	b.n	1000cbb8 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000cc9c:	9801      	ldr	r0, [sp, #4]
1000cc9e:	b003      	add	sp, #12
1000cca0:	bc3c      	pop	{r2, r3, r4, r5}
1000cca2:	4690      	mov	r8, r2
1000cca4:	4699      	mov	r9, r3
1000cca6:	46a2      	mov	sl, r4
1000cca8:	46ab      	mov	fp, r5
1000ccaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ccac:	10018704 	.word	0x10018704
1000ccb0:	10014d08 	.word	0x10014d08
1000ccb4:	10013b61 	.word	0x10013b61
1000ccb8:	10015ee8 	.word	0x10015ee8
1000ccbc:	10013a41 	.word	0x10013a41
1000ccc0:	10015edc 	.word	0x10015edc
1000ccc4:	10015ef0 	.word	0x10015ef0
1000ccc8:	10015ef8 	.word	0x10015ef8
1000cccc:	1000f591 	.word	0x1000f591
1000ccd0:	10015f18 	.word	0x10015f18
1000ccd4:	10015f34 	.word	0x10015f34
1000ccd8:	10015f60 	.word	0x10015f60
1000ccdc:	100138e7 	.word	0x100138e7
1000cce0:	10015f90 	.word	0x10015f90

1000cce4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000cce4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000cce6:	8800      	ldrh	r0, [r0, #0]
1000cce8:	2378      	movs	r3, #120	; 0x78
1000ccea:	2201      	movs	r2, #1
1000ccec:	2101      	movs	r1, #1
1000ccee:	4c02      	ldr	r4, [pc, #8]	; (1000ccf8 <ble_conn_param_update_req+0x14>)
1000ccf0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000ccf2:	2000      	movs	r0, #0
1000ccf4:	bd10      	pop	{r4, pc}
1000ccf6:	46c0      	nop			; (mov r8, r8)
1000ccf8:	1000f5b1 	.word	0x1000f5b1

1000ccfc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ccfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccfe:	4657      	mov	r7, sl
1000cd00:	464e      	mov	r6, r9
1000cd02:	4645      	mov	r5, r8
1000cd04:	b4e0      	push	{r5, r6, r7}
1000cd06:	b084      	sub	sp, #16
1000cd08:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000cd0a:	2209      	movs	r2, #9
1000cd0c:	2100      	movs	r1, #0
1000cd0e:	a801      	add	r0, sp, #4
1000cd10:	4b6a      	ldr	r3, [pc, #424]	; (1000cebc <ble_slave_security_request_handler+0x1c0>)
1000cd12:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd14:	8825      	ldrh	r5, [r4, #0]
1000cd16:	496a      	ldr	r1, [pc, #424]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cd18:	000a      	movs	r2, r1
1000cd1a:	2300      	movs	r3, #0
1000cd1c:	8910      	ldrh	r0, [r2, #8]
1000cd1e:	42a8      	cmp	r0, r5
1000cd20:	d116      	bne.n	1000cd50 <ble_slave_security_request_handler+0x54>
1000cd22:	0010      	movs	r0, r2
1000cd24:	305e      	adds	r0, #94	; 0x5e
1000cd26:	7800      	ldrb	r0, [r0, #0]
1000cd28:	2802      	cmp	r0, #2
1000cd2a:	d111      	bne.n	1000cd50 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000cd2c:	4864      	ldr	r0, [pc, #400]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cd2e:	015a      	lsls	r2, r3, #5
1000cd30:	1ad6      	subs	r6, r2, r3
1000cd32:	00b6      	lsls	r6, r6, #2
1000cd34:	1986      	adds	r6, r0, r6
1000cd36:	365e      	adds	r6, #94	; 0x5e
1000cd38:	2206      	movs	r2, #6
1000cd3a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000cd3c:	32f9      	adds	r2, #249	; 0xf9
1000cd3e:	4013      	ands	r3, r2
1000cd40:	015a      	lsls	r2, r3, #5
1000cd42:	1ad2      	subs	r2, r2, r3
1000cd44:	0092      	lsls	r2, r2, #2
1000cd46:	1882      	adds	r2, r0, r2
1000cd48:	7d12      	ldrb	r2, [r2, #20]
1000cd4a:	07d0      	lsls	r0, r2, #31
1000cd4c:	d405      	bmi.n	1000cd5a <ble_slave_security_request_handler+0x5e>
1000cd4e:	e01b      	b.n	1000cd88 <ble_slave_security_request_handler+0x8c>
1000cd50:	3301      	adds	r3, #1
1000cd52:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd54:	2b05      	cmp	r3, #5
1000cd56:	d1e1      	bne.n	1000cd1c <ble_slave_security_request_handler+0x20>
1000cd58:	e01e      	b.n	1000cd98 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000cd5a:	78e0      	ldrb	r0, [r4, #3]
1000cd5c:	2800      	cmp	r0, #0
1000cd5e:	d013      	beq.n	1000cd88 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000cd60:	0159      	lsls	r1, r3, #5
1000cd62:	1ac9      	subs	r1, r1, r3
1000cd64:	008b      	lsls	r3, r1, #2
1000cd66:	4956      	ldr	r1, [pc, #344]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cd68:	18c9      	adds	r1, r1, r3
1000cd6a:	311a      	adds	r1, #26
1000cd6c:	8820      	ldrh	r0, [r4, #0]
1000cd6e:	4b55      	ldr	r3, [pc, #340]	; (1000cec4 <ble_slave_security_request_handler+0x1c8>)
1000cd70:	4798      	blx	r3
1000cd72:	2800      	cmp	r0, #0
1000cd74:	d100      	bne.n	1000cd78 <ble_slave_security_request_handler+0x7c>
1000cd76:	e09b      	b.n	1000ceb0 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000cd78:	4853      	ldr	r0, [pc, #332]	; (1000cec8 <ble_slave_security_request_handler+0x1cc>)
1000cd7a:	4b54      	ldr	r3, [pc, #336]	; (1000cecc <ble_slave_security_request_handler+0x1d0>)
1000cd7c:	4798      	blx	r3
1000cd7e:	4854      	ldr	r0, [pc, #336]	; (1000ced0 <ble_slave_security_request_handler+0x1d4>)
1000cd80:	4b54      	ldr	r3, [pc, #336]	; (1000ced4 <ble_slave_security_request_handler+0x1d8>)
1000cd82:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cd84:	20e2      	movs	r0, #226	; 0xe2
1000cd86:	e093      	b.n	1000ceb0 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cd88:	015a      	lsls	r2, r3, #5
1000cd8a:	1ad3      	subs	r3, r2, r3
1000cd8c:	009b      	lsls	r3, r3, #2
1000cd8e:	4a4c      	ldr	r2, [pc, #304]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cd90:	18d3      	adds	r3, r2, r3
1000cd92:	335e      	adds	r3, #94	; 0x5e
1000cd94:	2202      	movs	r2, #2
1000cd96:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd98:	8825      	ldrh	r5, [r4, #0]
1000cd9a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd9c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd9e:	0016      	movs	r6, r2
1000cda0:	8908      	ldrh	r0, [r1, #8]
1000cda2:	42a8      	cmp	r0, r5
1000cda4:	d10d      	bne.n	1000cdc2 <ble_slave_security_request_handler+0xc6>
1000cda6:	0008      	movs	r0, r1
1000cda8:	305e      	adds	r0, #94	; 0x5e
1000cdaa:	7800      	ldrb	r0, [r0, #0]
1000cdac:	2802      	cmp	r0, #2
1000cdae:	d108      	bne.n	1000cdc2 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000cdb0:	0152      	lsls	r2, r2, #5
1000cdb2:	1b92      	subs	r2, r2, r6
1000cdb4:	0096      	lsls	r6, r2, #2
1000cdb6:	4a42      	ldr	r2, [pc, #264]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cdb8:	1992      	adds	r2, r2, r6
1000cdba:	325e      	adds	r2, #94	; 0x5e
1000cdbc:	2103      	movs	r1, #3
1000cdbe:	7011      	strb	r1, [r2, #0]
			break;
1000cdc0:	e005      	b.n	1000cdce <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdc2:	3301      	adds	r3, #1
1000cdc4:	b2db      	uxtb	r3, r3
1000cdc6:	3201      	adds	r2, #1
1000cdc8:	317c      	adds	r1, #124	; 0x7c
1000cdca:	2b05      	cmp	r3, #5
1000cdcc:	d1e7      	bne.n	1000cd9e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000cdce:	aa01      	add	r2, sp, #4
1000cdd0:	78e1      	ldrb	r1, [r4, #3]
1000cdd2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000cdd4:	2101      	movs	r1, #1
1000cdd6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000cdd8:	3103      	adds	r1, #3
1000cdda:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000cddc:	001f      	movs	r7, r3
1000cdde:	015a      	lsls	r2, r3, #5
1000cde0:	1ad2      	subs	r2, r2, r3
1000cde2:	0092      	lsls	r2, r2, #2
1000cde4:	4936      	ldr	r1, [pc, #216]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000cde6:	5c52      	ldrb	r2, [r2, r1]
1000cde8:	2a02      	cmp	r2, #2
1000cdea:	d104      	bne.n	1000cdf6 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cdec:	aa01      	add	r2, sp, #4
1000cdee:	2103      	movs	r1, #3
1000cdf0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cdf2:	71d1      	strb	r1, [r2, #7]
1000cdf4:	e003      	b.n	1000cdfe <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000cdf6:	aa01      	add	r2, sp, #4
1000cdf8:	2101      	movs	r1, #1
1000cdfa:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000cdfc:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000cdfe:	aa01      	add	r2, sp, #4
1000ce00:	2110      	movs	r1, #16
1000ce02:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000ce04:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000ce06:	017a      	lsls	r2, r7, #5
1000ce08:	1bd2      	subs	r2, r2, r7
1000ce0a:	0092      	lsls	r2, r2, #2
1000ce0c:	492c      	ldr	r1, [pc, #176]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000ce0e:	188a      	adds	r2, r1, r2
1000ce10:	7e12      	ldrb	r2, [r2, #24]
1000ce12:	2a40      	cmp	r2, #64	; 0x40
1000ce14:	d134      	bne.n	1000ce80 <ble_slave_security_request_handler+0x184>
1000ce16:	015a      	lsls	r2, r3, #5
1000ce18:	1ad3      	subs	r3, r2, r3
1000ce1a:	009b      	lsls	r3, r3, #2
1000ce1c:	469a      	mov	sl, r3
1000ce1e:	001e      	movs	r6, r3
1000ce20:	3660      	adds	r6, #96	; 0x60
1000ce22:	1876      	adds	r6, r6, r1
1000ce24:	4655      	mov	r5, sl
1000ce26:	3568      	adds	r5, #104	; 0x68
1000ce28:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ce2a:	4b2b      	ldr	r3, [pc, #172]	; (1000ced8 <ble_slave_security_request_handler+0x1dc>)
1000ce2c:	4699      	mov	r9, r3
1000ce2e:	230f      	movs	r3, #15
1000ce30:	4698      	mov	r8, r3
1000ce32:	47c8      	blx	r9
1000ce34:	4643      	mov	r3, r8
1000ce36:	4018      	ands	r0, r3
1000ce38:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ce3a:	47c8      	blx	r9
1000ce3c:	4643      	mov	r3, r8
1000ce3e:	4018      	ands	r0, r3
1000ce40:	74b0      	strb	r0, [r6, #18]
1000ce42:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ce44:	42ae      	cmp	r6, r5
1000ce46:	d1f4      	bne.n	1000ce32 <ble_slave_security_request_handler+0x136>
1000ce48:	4656      	mov	r6, sl
1000ce4a:	3670      	adds	r6, #112	; 0x70
1000ce4c:	4a1c      	ldr	r2, [pc, #112]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000ce4e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ce50:	4b21      	ldr	r3, [pc, #132]	; (1000ced8 <ble_slave_security_request_handler+0x1dc>)
1000ce52:	4699      	mov	r9, r3
1000ce54:	230f      	movs	r3, #15
1000ce56:	4698      	mov	r8, r3
1000ce58:	47c8      	blx	r9
1000ce5a:	4643      	mov	r3, r8
1000ce5c:	4018      	ands	r0, r3
1000ce5e:	7028      	strb	r0, [r5, #0]
1000ce60:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ce62:	42b5      	cmp	r5, r6
1000ce64:	d1f8      	bne.n	1000ce58 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ce66:	4b1c      	ldr	r3, [pc, #112]	; (1000ced8 <ble_slave_security_request_handler+0x1dc>)
1000ce68:	4798      	blx	r3
1000ce6a:	017b      	lsls	r3, r7, #5
1000ce6c:	1bdb      	subs	r3, r3, r7
1000ce6e:	009b      	lsls	r3, r3, #2
1000ce70:	4a13      	ldr	r2, [pc, #76]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000ce72:	18d3      	adds	r3, r2, r3
1000ce74:	001a      	movs	r2, r3
1000ce76:	3270      	adds	r2, #112	; 0x70
1000ce78:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ce7a:	337a      	adds	r3, #122	; 0x7a
1000ce7c:	2210      	movs	r2, #16
1000ce7e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000ce80:	017a      	lsls	r2, r7, #5
1000ce82:	1bd7      	subs	r7, r2, r7
1000ce84:	00bf      	lsls	r7, r7, #2
1000ce86:	3760      	adds	r7, #96	; 0x60
1000ce88:	4a0d      	ldr	r2, [pc, #52]	; (1000cec0 <ble_slave_security_request_handler+0x1c4>)
1000ce8a:	18ba      	adds	r2, r7, r2
1000ce8c:	8820      	ldrh	r0, [r4, #0]
1000ce8e:	2300      	movs	r3, #0
1000ce90:	a901      	add	r1, sp, #4
1000ce92:	4c12      	ldr	r4, [pc, #72]	; (1000cedc <ble_slave_security_request_handler+0x1e0>)
1000ce94:	47a0      	blx	r4
1000ce96:	2800      	cmp	r0, #0
1000ce98:	d00a      	beq.n	1000ceb0 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000ce9a:	ab01      	add	r3, sp, #4
1000ce9c:	2200      	movs	r2, #0
1000ce9e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000cea0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000cea2:	4809      	ldr	r0, [pc, #36]	; (1000cec8 <ble_slave_security_request_handler+0x1cc>)
1000cea4:	4b09      	ldr	r3, [pc, #36]	; (1000cecc <ble_slave_security_request_handler+0x1d0>)
1000cea6:	4798      	blx	r3
1000cea8:	480d      	ldr	r0, [pc, #52]	; (1000cee0 <ble_slave_security_request_handler+0x1e4>)
1000ceaa:	4b0a      	ldr	r3, [pc, #40]	; (1000ced4 <ble_slave_security_request_handler+0x1d8>)
1000ceac:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ceae:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000ceb0:	b004      	add	sp, #16
1000ceb2:	bc1c      	pop	{r2, r3, r4}
1000ceb4:	4690      	mov	r8, r2
1000ceb6:	4699      	mov	r9, r3
1000ceb8:	46a2      	mov	sl, r4
1000ceba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cebc:	100138f9 	.word	0x100138f9
1000cec0:	10018704 	.word	0x10018704
1000cec4:	10010101 	.word	0x10010101
1000cec8:	10014d08 	.word	0x10014d08
1000cecc:	10013b61 	.word	0x10013b61
1000ced0:	10015f98 	.word	0x10015f98
1000ced4:	10013a41 	.word	0x10013a41
1000ced8:	10013b75 	.word	0x10013b75
1000cedc:	1000ff15 	.word	0x1000ff15
1000cee0:	10015fb0 	.word	0x10015fb0

1000cee4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cee6:	465f      	mov	r7, fp
1000cee8:	4656      	mov	r6, sl
1000ceea:	464d      	mov	r5, r9
1000ceec:	4644      	mov	r4, r8
1000ceee:	b4f0      	push	{r4, r5, r6, r7}
1000cef0:	b085      	sub	sp, #20
1000cef2:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cef4:	8804      	ldrh	r4, [r0, #0]
1000cef6:	4a54      	ldr	r2, [pc, #336]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cef8:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cefa:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cefc:	8910      	ldrh	r0, [r2, #8]
1000cefe:	42a0      	cmp	r0, r4
1000cf00:	d10d      	bne.n	1000cf1e <ble_pair_request_handler+0x3a>
1000cf02:	0010      	movs	r0, r2
1000cf04:	305e      	adds	r0, #94	; 0x5e
1000cf06:	7800      	ldrb	r0, [r0, #0]
1000cf08:	2802      	cmp	r0, #2
1000cf0a:	d108      	bne.n	1000cf1e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000cf0c:	014a      	lsls	r2, r1, #5
1000cf0e:	1a52      	subs	r2, r2, r1
1000cf10:	0095      	lsls	r5, r2, #2
1000cf12:	4a4d      	ldr	r2, [pc, #308]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cf14:	1952      	adds	r2, r2, r5
1000cf16:	325e      	adds	r2, #94	; 0x5e
1000cf18:	2103      	movs	r1, #3
1000cf1a:	7011      	strb	r1, [r2, #0]
			break;
1000cf1c:	e005      	b.n	1000cf2a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf1e:	3301      	adds	r3, #1
1000cf20:	b2db      	uxtb	r3, r3
1000cf22:	3101      	adds	r1, #1
1000cf24:	327c      	adds	r2, #124	; 0x7c
1000cf26:	2b05      	cmp	r3, #5
1000cf28:	d1e8      	bne.n	1000cefc <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000cf2a:	aa01      	add	r2, sp, #4
1000cf2c:	2100      	movs	r1, #0
1000cf2e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000cf30:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000cf32:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000cf34:	2003      	movs	r0, #3
1000cf36:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000cf38:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000cf3a:	001e      	movs	r6, r3
1000cf3c:	015a      	lsls	r2, r3, #5
1000cf3e:	1ad2      	subs	r2, r2, r3
1000cf40:	0092      	lsls	r2, r2, #2
1000cf42:	4941      	ldr	r1, [pc, #260]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cf44:	5c52      	ldrb	r2, [r2, r1]
1000cf46:	2a02      	cmp	r2, #2
1000cf48:	d104      	bne.n	1000cf54 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf4a:	aa01      	add	r2, sp, #4
1000cf4c:	2103      	movs	r1, #3
1000cf4e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf50:	71d1      	strb	r1, [r2, #7]
1000cf52:	e003      	b.n	1000cf5c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000cf54:	aa01      	add	r2, sp, #4
1000cf56:	2101      	movs	r1, #1
1000cf58:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000cf5a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000cf5c:	aa01      	add	r2, sp, #4
1000cf5e:	2110      	movs	r1, #16
1000cf60:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000cf62:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000cf64:	0172      	lsls	r2, r6, #5
1000cf66:	1b92      	subs	r2, r2, r6
1000cf68:	0092      	lsls	r2, r2, #2
1000cf6a:	4937      	ldr	r1, [pc, #220]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cf6c:	188a      	adds	r2, r1, r2
1000cf6e:	7e12      	ldrb	r2, [r2, #24]
1000cf70:	2a40      	cmp	r2, #64	; 0x40
1000cf72:	d142      	bne.n	1000cffa <ble_pair_request_handler+0x116>
1000cf74:	015f      	lsls	r7, r3, #5
1000cf76:	1afb      	subs	r3, r7, r3
1000cf78:	009b      	lsls	r3, r3, #2
1000cf7a:	469b      	mov	fp, r3
1000cf7c:	001c      	movs	r4, r3
1000cf7e:	3460      	adds	r4, #96	; 0x60
1000cf80:	1864      	adds	r4, r4, r1
1000cf82:	465d      	mov	r5, fp
1000cf84:	3568      	adds	r5, #104	; 0x68
1000cf86:	186d      	adds	r5, r5, r1
1000cf88:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cf8a:	4b30      	ldr	r3, [pc, #192]	; (1000d04c <ble_pair_request_handler+0x168>)
1000cf8c:	469a      	mov	sl, r3
1000cf8e:	230f      	movs	r3, #15
1000cf90:	4699      	mov	r9, r3
1000cf92:	47d0      	blx	sl
1000cf94:	464b      	mov	r3, r9
1000cf96:	4018      	ands	r0, r3
1000cf98:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000cf9a:	47d0      	blx	sl
1000cf9c:	464b      	mov	r3, r9
1000cf9e:	4018      	ands	r0, r3
1000cfa0:	74b8      	strb	r0, [r7, #18]
1000cfa2:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000cfa4:	42af      	cmp	r7, r5
1000cfa6:	d1f4      	bne.n	1000cf92 <ble_pair_request_handler+0xae>
1000cfa8:	465b      	mov	r3, fp
1000cfaa:	3370      	adds	r3, #112	; 0x70
1000cfac:	4f26      	ldr	r7, [pc, #152]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cfae:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cfb0:	4b26      	ldr	r3, [pc, #152]	; (1000d04c <ble_pair_request_handler+0x168>)
1000cfb2:	469a      	mov	sl, r3
1000cfb4:	230f      	movs	r3, #15
1000cfb6:	4699      	mov	r9, r3
1000cfb8:	47d0      	blx	sl
1000cfba:	464b      	mov	r3, r9
1000cfbc:	4018      	ands	r0, r3
1000cfbe:	7028      	strb	r0, [r5, #0]
1000cfc0:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000cfc2:	42bd      	cmp	r5, r7
1000cfc4:	d1f8      	bne.n	1000cfb8 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000cfc6:	4822      	ldr	r0, [pc, #136]	; (1000d050 <ble_pair_request_handler+0x16c>)
1000cfc8:	4b22      	ldr	r3, [pc, #136]	; (1000d054 <ble_pair_request_handler+0x170>)
1000cfca:	4798      	blx	r3
1000cfcc:	4822      	ldr	r0, [pc, #136]	; (1000d058 <ble_pair_request_handler+0x174>)
1000cfce:	4b23      	ldr	r3, [pc, #140]	; (1000d05c <ble_pair_request_handler+0x178>)
1000cfd0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000cfd2:	4d22      	ldr	r5, [pc, #136]	; (1000d05c <ble_pair_request_handler+0x178>)
1000cfd4:	7821      	ldrb	r1, [r4, #0]
1000cfd6:	4822      	ldr	r0, [pc, #136]	; (1000d060 <ble_pair_request_handler+0x17c>)
1000cfd8:	47a8      	blx	r5
1000cfda:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000cfdc:	42bc      	cmp	r4, r7
1000cfde:	d1f9      	bne.n	1000cfd4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000cfe0:	4b1a      	ldr	r3, [pc, #104]	; (1000d04c <ble_pair_request_handler+0x168>)
1000cfe2:	4798      	blx	r3
1000cfe4:	0173      	lsls	r3, r6, #5
1000cfe6:	1b9b      	subs	r3, r3, r6
1000cfe8:	009b      	lsls	r3, r3, #2
1000cfea:	4a17      	ldr	r2, [pc, #92]	; (1000d048 <ble_pair_request_handler+0x164>)
1000cfec:	18d3      	adds	r3, r2, r3
1000cfee:	001a      	movs	r2, r3
1000cff0:	3270      	adds	r2, #112	; 0x70
1000cff2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000cff4:	337a      	adds	r3, #122	; 0x7a
1000cff6:	2210      	movs	r2, #16
1000cff8:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000cffa:	4815      	ldr	r0, [pc, #84]	; (1000d050 <ble_pair_request_handler+0x16c>)
1000cffc:	4b15      	ldr	r3, [pc, #84]	; (1000d054 <ble_pair_request_handler+0x170>)
1000cffe:	4798      	blx	r3
1000d000:	4818      	ldr	r0, [pc, #96]	; (1000d064 <ble_pair_request_handler+0x180>)
1000d002:	4b16      	ldr	r3, [pc, #88]	; (1000d05c <ble_pair_request_handler+0x178>)
1000d004:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d006:	0173      	lsls	r3, r6, #5
1000d008:	1b9b      	subs	r3, r3, r6
1000d00a:	009b      	lsls	r3, r3, #2
1000d00c:	3360      	adds	r3, #96	; 0x60
1000d00e:	4a0e      	ldr	r2, [pc, #56]	; (1000d048 <ble_pair_request_handler+0x164>)
1000d010:	189a      	adds	r2, r3, r2
1000d012:	4643      	mov	r3, r8
1000d014:	8818      	ldrh	r0, [r3, #0]
1000d016:	2300      	movs	r3, #0
1000d018:	a901      	add	r1, sp, #4
1000d01a:	4c13      	ldr	r4, [pc, #76]	; (1000d068 <ble_pair_request_handler+0x184>)
1000d01c:	47a0      	blx	r4
1000d01e:	2800      	cmp	r0, #0
1000d020:	d00a      	beq.n	1000d038 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000d022:	ab01      	add	r3, sp, #4
1000d024:	2200      	movs	r2, #0
1000d026:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d028:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d02a:	4809      	ldr	r0, [pc, #36]	; (1000d050 <ble_pair_request_handler+0x16c>)
1000d02c:	4b09      	ldr	r3, [pc, #36]	; (1000d054 <ble_pair_request_handler+0x170>)
1000d02e:	4798      	blx	r3
1000d030:	480e      	ldr	r0, [pc, #56]	; (1000d06c <ble_pair_request_handler+0x188>)
1000d032:	4b0a      	ldr	r3, [pc, #40]	; (1000d05c <ble_pair_request_handler+0x178>)
1000d034:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d036:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d038:	b005      	add	sp, #20
1000d03a:	bc3c      	pop	{r2, r3, r4, r5}
1000d03c:	4690      	mov	r8, r2
1000d03e:	4699      	mov	r9, r3
1000d040:	46a2      	mov	sl, r4
1000d042:	46ab      	mov	fp, r5
1000d044:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d046:	46c0      	nop			; (mov r8, r8)
1000d048:	10018704 	.word	0x10018704
1000d04c:	10013b75 	.word	0x10013b75
1000d050:	10014d08 	.word	0x10014d08
1000d054:	10013b61 	.word	0x10013b61
1000d058:	10015fdc 	.word	0x10015fdc
1000d05c:	10013a41 	.word	0x10013a41
1000d060:	10015fec 	.word	0x10015fec
1000d064:	10015ff4 	.word	0x10015ff4
1000d068:	1000ff15 	.word	0x1000ff15
1000d06c:	10016010 	.word	0x10016010

1000d070 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d070:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d072:	b085      	sub	sp, #20
1000d074:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d076:	2206      	movs	r2, #6
1000d078:	493d      	ldr	r1, [pc, #244]	; (1000d170 <ble_pair_key_request_handler+0x100>)
1000d07a:	a802      	add	r0, sp, #8
1000d07c:	4e3d      	ldr	r6, [pc, #244]	; (1000d174 <ble_pair_key_request_handler+0x104>)
1000d07e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d080:	ac01      	add	r4, sp, #4
1000d082:	2204      	movs	r2, #4
1000d084:	0029      	movs	r1, r5
1000d086:	0020      	movs	r0, r4
1000d088:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d08a:	78e3      	ldrb	r3, [r4, #3]
1000d08c:	2b00      	cmp	r3, #0
1000d08e:	d162      	bne.n	1000d156 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d090:	4839      	ldr	r0, [pc, #228]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d092:	4b3a      	ldr	r3, [pc, #232]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d094:	4798      	blx	r3
1000d096:	483a      	ldr	r0, [pc, #232]	; (1000d180 <ble_pair_key_request_handler+0x110>)
1000d098:	4b3a      	ldr	r3, [pc, #232]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d09a:	4798      	blx	r3
1000d09c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d09e:	4c3a      	ldr	r4, [pc, #232]	; (1000d188 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d0a0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d0a2:	201e      	movs	r0, #30
1000d0a4:	47a0      	blx	r4
1000d0a6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d0a8:	2b00      	cmp	r3, #0
1000d0aa:	d11a      	bne.n	1000d0e2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d0ac:	4f32      	ldr	r7, [pc, #200]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d0ae:	0038      	movs	r0, r7
1000d0b0:	4e32      	ldr	r6, [pc, #200]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d0b2:	47b0      	blx	r6
1000d0b4:	4835      	ldr	r0, [pc, #212]	; (1000d18c <ble_pair_key_request_handler+0x11c>)
1000d0b6:	4c33      	ldr	r4, [pc, #204]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d0b8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d0ba:	0038      	movs	r0, r7
1000d0bc:	47b0      	blx	r6
1000d0be:	4834      	ldr	r0, [pc, #208]	; (1000d190 <ble_pair_key_request_handler+0x120>)
1000d0c0:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d0c2:	8828      	ldrh	r0, [r5, #0]
1000d0c4:	2113      	movs	r1, #19
1000d0c6:	4b33      	ldr	r3, [pc, #204]	; (1000d194 <ble_pair_key_request_handler+0x124>)
1000d0c8:	4798      	blx	r3
1000d0ca:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d0cc:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d0ce:	2b00      	cmp	r3, #0
1000d0d0:	d04c      	beq.n	1000d16c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d0d2:	4829      	ldr	r0, [pc, #164]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d0d4:	4b29      	ldr	r3, [pc, #164]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d0d6:	4798      	blx	r3
1000d0d8:	482f      	ldr	r0, [pc, #188]	; (1000d198 <ble_pair_key_request_handler+0x128>)
1000d0da:	4b2a      	ldr	r3, [pc, #168]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d0dc:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d0de:	20e2      	movs	r0, #226	; 0xe2
1000d0e0:	e044      	b.n	1000d16c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d0e2:	001a      	movs	r2, r3
1000d0e4:	3a30      	subs	r2, #48	; 0x30
1000d0e6:	2a09      	cmp	r2, #9
1000d0e8:	d8db      	bhi.n	1000d0a2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d0ea:	aa02      	add	r2, sp, #8
1000d0ec:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d0ee:	4038      	ands	r0, r7
1000d0f0:	4b2a      	ldr	r3, [pc, #168]	; (1000d19c <ble_pair_key_request_handler+0x12c>)
1000d0f2:	4798      	blx	r3
1000d0f4:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d0f6:	2e06      	cmp	r6, #6
1000d0f8:	d026      	beq.n	1000d148 <ble_pair_key_request_handler+0xd8>
1000d0fa:	e7d2      	b.n	1000d0a2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d0fc:	481e      	ldr	r0, [pc, #120]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d0fe:	4b1f      	ldr	r3, [pc, #124]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d100:	4798      	blx	r3
1000d102:	4827      	ldr	r0, [pc, #156]	; (1000d1a0 <ble_pair_key_request_handler+0x130>)
1000d104:	4b1f      	ldr	r3, [pc, #124]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d106:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d108:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d10a:	4e24      	ldr	r6, [pc, #144]	; (1000d19c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d10c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d10e:	5ce0      	ldrb	r0, [r4, r3]
1000d110:	47b0      	blx	r6
1000d112:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d114:	2c06      	cmp	r4, #6
1000d116:	d1f9      	bne.n	1000d10c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d118:	ab01      	add	r3, sp, #4
1000d11a:	7899      	ldrb	r1, [r3, #2]
1000d11c:	8828      	ldrh	r0, [r5, #0]
1000d11e:	aa02      	add	r2, sp, #8
1000d120:	4b20      	ldr	r3, [pc, #128]	; (1000d1a4 <ble_pair_key_request_handler+0x134>)
1000d122:	4798      	blx	r3
1000d124:	2800      	cmp	r0, #0
1000d126:	d021      	beq.n	1000d16c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d128:	4813      	ldr	r0, [pc, #76]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d12a:	4b14      	ldr	r3, [pc, #80]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d12c:	4798      	blx	r3
1000d12e:	481e      	ldr	r0, [pc, #120]	; (1000d1a8 <ble_pair_key_request_handler+0x138>)
1000d130:	4b14      	ldr	r3, [pc, #80]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d132:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d134:	2000      	movs	r0, #0
1000d136:	e019      	b.n	1000d16c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d138:	480f      	ldr	r0, [pc, #60]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d13a:	4b10      	ldr	r3, [pc, #64]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d13c:	4798      	blx	r3
1000d13e:	481b      	ldr	r0, [pc, #108]	; (1000d1ac <ble_pair_key_request_handler+0x13c>)
1000d140:	4b10      	ldr	r3, [pc, #64]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d142:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d144:	2000      	movs	r0, #0
1000d146:	e011      	b.n	1000d16c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d148:	480b      	ldr	r0, [pc, #44]	; (1000d178 <ble_pair_key_request_handler+0x108>)
1000d14a:	4b0c      	ldr	r3, [pc, #48]	; (1000d17c <ble_pair_key_request_handler+0x10c>)
1000d14c:	4798      	blx	r3
1000d14e:	4818      	ldr	r0, [pc, #96]	; (1000d1b0 <ble_pair_key_request_handler+0x140>)
1000d150:	4b0c      	ldr	r3, [pc, #48]	; (1000d184 <ble_pair_key_request_handler+0x114>)
1000d152:	4798      	blx	r3
1000d154:	e7d8      	b.n	1000d108 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d156:	ab01      	add	r3, sp, #4
1000d158:	885a      	ldrh	r2, [r3, #2]
1000d15a:	2380      	movs	r3, #128	; 0x80
1000d15c:	005b      	lsls	r3, r3, #1
1000d15e:	429a      	cmp	r2, r3
1000d160:	d0cc      	beq.n	1000d0fc <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d162:	ab01      	add	r3, sp, #4
1000d164:	789b      	ldrb	r3, [r3, #2]
1000d166:	2b01      	cmp	r3, #1
1000d168:	d0e6      	beq.n	1000d138 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d16a:	2000      	movs	r0, #0
}
1000d16c:	b005      	add	sp, #20
1000d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d170:	10015bf8 	.word	0x10015bf8
1000d174:	100138e7 	.word	0x100138e7
1000d178:	10014d08 	.word	0x10014d08
1000d17c:	10013b61 	.word	0x10013b61
1000d180:	10016038 	.word	0x10016038
1000d184:	10013a41 	.word	0x10013a41
1000d188:	1000dcdd 	.word	0x1000dcdd
1000d18c:	10016060 	.word	0x10016060
1000d190:	1001606c 	.word	0x1001606c
1000d194:	1000f591 	.word	0x1000f591
1000d198:	10015f18 	.word	0x10015f18
1000d19c:	10013a75 	.word	0x10013a75
1000d1a0:	10016080 	.word	0x10016080
1000d1a4:	10010045 	.word	0x10010045
1000d1a8:	100160b8 	.word	0x100160b8
1000d1ac:	100160d0 	.word	0x100160d0
1000d1b0:	100160ec 	.word	0x100160ec

1000d1b4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d1b6:	465f      	mov	r7, fp
1000d1b8:	4656      	mov	r6, sl
1000d1ba:	464d      	mov	r5, r9
1000d1bc:	b4e0      	push	{r5, r6, r7}
1000d1be:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d1c0:	8800      	ldrh	r0, [r0, #0]
1000d1c2:	4b49      	ldr	r3, [pc, #292]	; (1000d2e8 <ble_encryption_request_handler+0x134>)
1000d1c4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1c6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d1c8:	8919      	ldrh	r1, [r3, #8]
1000d1ca:	4281      	cmp	r1, r0
1000d1cc:	d137      	bne.n	1000d23e <ble_encryption_request_handler+0x8a>
1000d1ce:	0019      	movs	r1, r3
1000d1d0:	315e      	adds	r1, #94	; 0x5e
1000d1d2:	7809      	ldrb	r1, [r1, #0]
1000d1d4:	2901      	cmp	r1, #1
1000d1d6:	d932      	bls.n	1000d23e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d1d8:	4f43      	ldr	r7, [pc, #268]	; (1000d2e8 <ble_encryption_request_handler+0x134>)
1000d1da:	0153      	lsls	r3, r2, #5
1000d1dc:	1a9d      	subs	r5, r3, r2
1000d1de:	00ad      	lsls	r5, r5, #2
1000d1e0:	197d      	adds	r5, r7, r5
1000d1e2:	355e      	adds	r5, #94	; 0x5e
1000d1e4:	2306      	movs	r3, #6
1000d1e6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000d1e8:	4840      	ldr	r0, [pc, #256]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d1ea:	4b41      	ldr	r3, [pc, #260]	; (1000d2f0 <ble_encryption_request_handler+0x13c>)
1000d1ec:	469a      	mov	sl, r3
1000d1ee:	4798      	blx	r3
1000d1f0:	8831      	ldrh	r1, [r6, #0]
1000d1f2:	4840      	ldr	r0, [pc, #256]	; (1000d2f4 <ble_encryption_request_handler+0x140>)
1000d1f4:	4b40      	ldr	r3, [pc, #256]	; (1000d2f8 <ble_encryption_request_handler+0x144>)
1000d1f6:	4699      	mov	r9, r3
1000d1f8:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000d1fa:	483c      	ldr	r0, [pc, #240]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d1fc:	47d0      	blx	sl
1000d1fe:	0163      	lsls	r3, r4, #5
1000d200:	1b1b      	subs	r3, r3, r4
1000d202:	009b      	lsls	r3, r3, #2
1000d204:	18ff      	adds	r7, r7, r3
1000d206:	2370      	movs	r3, #112	; 0x70
1000d208:	469b      	mov	fp, r3
1000d20a:	44bb      	add	fp, r7
1000d20c:	465b      	mov	r3, fp
1000d20e:	8819      	ldrh	r1, [r3, #0]
1000d210:	483a      	ldr	r0, [pc, #232]	; (1000d2fc <ble_encryption_request_handler+0x148>)
1000d212:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000d214:	4835      	ldr	r0, [pc, #212]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d216:	47d0      	blx	sl
1000d218:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000d21a:	4839      	ldr	r0, [pc, #228]	; (1000d300 <ble_encryption_request_handler+0x14c>)
1000d21c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000d21e:	4833      	ldr	r0, [pc, #204]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d220:	47d0      	blx	sl
1000d222:	8871      	ldrh	r1, [r6, #2]
1000d224:	4837      	ldr	r0, [pc, #220]	; (1000d304 <ble_encryption_request_handler+0x150>)
1000d226:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000d228:	4830      	ldr	r0, [pc, #192]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d22a:	47d0      	blx	sl
1000d22c:	0021      	movs	r1, r4
1000d22e:	4836      	ldr	r0, [pc, #216]	; (1000d308 <ble_encryption_request_handler+0x154>)
1000d230:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d232:	465b      	mov	r3, fp
1000d234:	881a      	ldrh	r2, [r3, #0]
1000d236:	8873      	ldrh	r3, [r6, #2]
1000d238:	429a      	cmp	r2, r3
1000d23a:	d12a      	bne.n	1000d292 <ble_encryption_request_handler+0xde>
1000d23c:	e006      	b.n	1000d24c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d23e:	3401      	adds	r4, #1
1000d240:	b2e4      	uxtb	r4, r4
1000d242:	3201      	adds	r2, #1
1000d244:	337c      	adds	r3, #124	; 0x7c
1000d246:	2c05      	cmp	r4, #5
1000d248:	d1be      	bne.n	1000d1c8 <ble_encryption_request_handler+0x14>
1000d24a:	e022      	b.n	1000d292 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d24c:	0161      	lsls	r1, r4, #5
1000d24e:	1b09      	subs	r1, r1, r4
1000d250:	0089      	lsls	r1, r1, #2
1000d252:	4b25      	ldr	r3, [pc, #148]	; (1000d2e8 <ble_encryption_request_handler+0x134>)
1000d254:	1859      	adds	r1, r3, r1
1000d256:	3172      	adds	r1, #114	; 0x72
1000d258:	1d30      	adds	r0, r6, #4
1000d25a:	2208      	movs	r2, #8
1000d25c:	4b2b      	ldr	r3, [pc, #172]	; (1000d30c <ble_encryption_request_handler+0x158>)
1000d25e:	4798      	blx	r3
1000d260:	2800      	cmp	r0, #0
1000d262:	d116      	bne.n	1000d292 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000d264:	4821      	ldr	r0, [pc, #132]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d266:	4b22      	ldr	r3, [pc, #136]	; (1000d2f0 <ble_encryption_request_handler+0x13c>)
1000d268:	4798      	blx	r3
1000d26a:	4829      	ldr	r0, [pc, #164]	; (1000d310 <ble_encryption_request_handler+0x15c>)
1000d26c:	4b22      	ldr	r3, [pc, #136]	; (1000d2f8 <ble_encryption_request_handler+0x144>)
1000d26e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d270:	0162      	lsls	r2, r4, #5
1000d272:	1b13      	subs	r3, r2, r4
1000d274:	009b      	lsls	r3, r3, #2
1000d276:	3360      	adds	r3, #96	; 0x60
1000d278:	491b      	ldr	r1, [pc, #108]	; (1000d2e8 <ble_encryption_request_handler+0x134>)
1000d27a:	185b      	adds	r3, r3, r1
1000d27c:	1b12      	subs	r2, r2, r4
1000d27e:	0092      	lsls	r2, r2, #2
1000d280:	188a      	adds	r2, r1, r2
1000d282:	7d11      	ldrb	r1, [r2, #20]
1000d284:	8830      	ldrh	r0, [r6, #0]
1000d286:	2201      	movs	r2, #1
1000d288:	4c22      	ldr	r4, [pc, #136]	; (1000d314 <ble_encryption_request_handler+0x160>)
1000d28a:	47a0      	blx	r4
1000d28c:	1e04      	subs	r4, r0, #0
1000d28e:	d01e      	beq.n	1000d2ce <ble_encryption_request_handler+0x11a>
1000d290:	e015      	b.n	1000d2be <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d292:	4f16      	ldr	r7, [pc, #88]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d294:	0038      	movs	r0, r7
1000d296:	4e16      	ldr	r6, [pc, #88]	; (1000d2f0 <ble_encryption_request_handler+0x13c>)
1000d298:	47b0      	blx	r6
1000d29a:	481f      	ldr	r0, [pc, #124]	; (1000d318 <ble_encryption_request_handler+0x164>)
1000d29c:	4d16      	ldr	r5, [pc, #88]	; (1000d2f8 <ble_encryption_request_handler+0x144>)
1000d29e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d2a0:	0038      	movs	r0, r7
1000d2a2:	47b0      	blx	r6
1000d2a4:	481d      	ldr	r0, [pc, #116]	; (1000d31c <ble_encryption_request_handler+0x168>)
1000d2a6:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d2a8:	0163      	lsls	r3, r4, #5
1000d2aa:	1b1c      	subs	r4, r3, r4
1000d2ac:	00a4      	lsls	r4, r4, #2
1000d2ae:	4b0e      	ldr	r3, [pc, #56]	; (1000d2e8 <ble_encryption_request_handler+0x134>)
1000d2b0:	191c      	adds	r4, r3, r4
1000d2b2:	8920      	ldrh	r0, [r4, #8]
1000d2b4:	2105      	movs	r1, #5
1000d2b6:	4b1a      	ldr	r3, [pc, #104]	; (1000d320 <ble_encryption_request_handler+0x16c>)
1000d2b8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d2ba:	24e2      	movs	r4, #226	; 0xe2
1000d2bc:	e00d      	b.n	1000d2da <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d2be:	480b      	ldr	r0, [pc, #44]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d2c0:	4b0b      	ldr	r3, [pc, #44]	; (1000d2f0 <ble_encryption_request_handler+0x13c>)
1000d2c2:	4798      	blx	r3
1000d2c4:	4817      	ldr	r0, [pc, #92]	; (1000d324 <ble_encryption_request_handler+0x170>)
1000d2c6:	4b0c      	ldr	r3, [pc, #48]	; (1000d2f8 <ble_encryption_request_handler+0x144>)
1000d2c8:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d2ca:	2400      	movs	r4, #0
1000d2cc:	e005      	b.n	1000d2da <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000d2ce:	4807      	ldr	r0, [pc, #28]	; (1000d2ec <ble_encryption_request_handler+0x138>)
1000d2d0:	4b07      	ldr	r3, [pc, #28]	; (1000d2f0 <ble_encryption_request_handler+0x13c>)
1000d2d2:	4798      	blx	r3
1000d2d4:	4814      	ldr	r0, [pc, #80]	; (1000d328 <ble_encryption_request_handler+0x174>)
1000d2d6:	4b08      	ldr	r3, [pc, #32]	; (1000d2f8 <ble_encryption_request_handler+0x144>)
1000d2d8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000d2da:	0020      	movs	r0, r4
1000d2dc:	bc1c      	pop	{r2, r3, r4}
1000d2de:	4691      	mov	r9, r2
1000d2e0:	469a      	mov	sl, r3
1000d2e2:	46a3      	mov	fp, r4
1000d2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2e6:	46c0      	nop			; (mov r8, r8)
1000d2e8:	10018704 	.word	0x10018704
1000d2ec:	10014d08 	.word	0x10014d08
1000d2f0:	10013b61 	.word	0x10013b61
1000d2f4:	10016100 	.word	0x10016100
1000d2f8:	10013a41 	.word	0x10013a41
1000d2fc:	1001612c 	.word	0x1001612c
1000d300:	10016140 	.word	0x10016140
1000d304:	10016154 	.word	0x10016154
1000d308:	10016164 	.word	0x10016164
1000d30c:	100138c9 	.word	0x100138c9
1000d310:	10016174 	.word	0x10016174
1000d314:	10010179 	.word	0x10010179
1000d318:	10016188 	.word	0x10016188
1000d31c:	100161c0 	.word	0x100161c0
1000d320:	1000f591 	.word	0x1000f591
1000d324:	10016218 	.word	0x10016218
1000d328:	10016238 	.word	0x10016238

1000d32c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d32c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d32e:	2a00      	cmp	r2, #0
1000d330:	d047      	beq.n	1000d3c2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d332:	2906      	cmp	r1, #6
1000d334:	d847      	bhi.n	1000d3c6 <ble_mgr_events_callback_handler+0x9a>
1000d336:	0089      	lsls	r1, r1, #2
1000d338:	4b28      	ldr	r3, [pc, #160]	; (1000d3dc <ble_mgr_events_callback_handler+0xb0>)
1000d33a:	585b      	ldr	r3, [r3, r1]
1000d33c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d33e:	4b28      	ldr	r3, [pc, #160]	; (1000d3e0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d340:	2405      	movs	r4, #5
1000d342:	e00a      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d344:	4b27      	ldr	r3, [pc, #156]	; (1000d3e4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d346:	2401      	movs	r4, #1
			}
			break;
1000d348:	e007      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d34a:	4b27      	ldr	r3, [pc, #156]	; (1000d3e8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d34c:	2405      	movs	r4, #5
			}
			break;
1000d34e:	e004      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d350:	4b26      	ldr	r3, [pc, #152]	; (1000d3ec <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d352:	2401      	movs	r4, #1
			}
			break;
1000d354:	e001      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d356:	4b26      	ldr	r3, [pc, #152]	; (1000d3f0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d358:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d35a:	2800      	cmp	r0, #0
1000d35c:	d116      	bne.n	1000d38c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d35e:	6819      	ldr	r1, [r3, #0]
1000d360:	2900      	cmp	r1, #0
1000d362:	d10b      	bne.n	1000d37c <ble_mgr_events_callback_handler+0x50>
1000d364:	e006      	b.n	1000d374 <ble_mgr_events_callback_handler+0x48>
1000d366:	001d      	movs	r5, r3
1000d368:	3304      	adds	r3, #4
1000d36a:	1f18      	subs	r0, r3, #4
1000d36c:	6800      	ldr	r0, [r0, #0]
1000d36e:	2800      	cmp	r0, #0
1000d370:	d106      	bne.n	1000d380 <ble_mgr_events_callback_handler+0x54>
1000d372:	e000      	b.n	1000d376 <ble_mgr_events_callback_handler+0x4a>
1000d374:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d376:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d378:	2101      	movs	r1, #1
						break;
1000d37a:	e02c      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
1000d37c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d37e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d380:	3101      	adds	r1, #1
1000d382:	b2c9      	uxtb	r1, r1
1000d384:	42a1      	cmp	r1, r4
1000d386:	d3ee      	bcc.n	1000d366 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d388:	2100      	movs	r1, #0
1000d38a:	e024      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
1000d38c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d38e:	2801      	cmp	r0, #1
1000d390:	d121      	bne.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d392:	6819      	ldr	r1, [r3, #0]
1000d394:	428a      	cmp	r2, r1
1000d396:	d10c      	bne.n	1000d3b2 <ble_mgr_events_callback_handler+0x86>
1000d398:	e006      	b.n	1000d3a8 <ble_mgr_events_callback_handler+0x7c>
1000d39a:	001d      	movs	r5, r3
1000d39c:	3304      	adds	r3, #4
1000d39e:	1f18      	subs	r0, r3, #4
1000d3a0:	6800      	ldr	r0, [r0, #0]
1000d3a2:	4282      	cmp	r2, r0
1000d3a4:	d107      	bne.n	1000d3b6 <ble_mgr_events_callback_handler+0x8a>
1000d3a6:	e000      	b.n	1000d3aa <ble_mgr_events_callback_handler+0x7e>
1000d3a8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d3aa:	2300      	movs	r3, #0
1000d3ac:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d3ae:	2101      	movs	r1, #1
						break;
1000d3b0:	e011      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
1000d3b2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d3b4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d3b6:	3101      	adds	r1, #1
1000d3b8:	b2c9      	uxtb	r1, r1
1000d3ba:	42a1      	cmp	r1, r4
1000d3bc:	d3ed      	bcc.n	1000d39a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d3be:	2100      	movs	r1, #0
1000d3c0:	e009      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d3c2:	2100      	movs	r1, #0
1000d3c4:	e007      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d3c6:	2100      	movs	r1, #0
1000d3c8:	e005      	b.n	1000d3d6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d3ca:	4b0a      	ldr	r3, [pc, #40]	; (1000d3f4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d3cc:	2405      	movs	r4, #5
1000d3ce:	e7c4      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d3d0:	4b09      	ldr	r3, [pc, #36]	; (1000d3f8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d3d2:	2401      	movs	r4, #1
1000d3d4:	e7c1      	b.n	1000d35a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d3d6:	0008      	movs	r0, r1
1000d3d8:	bd30      	pop	{r4, r5, pc}
1000d3da:	46c0      	nop			; (mov r8, r8)
1000d3dc:	10015bdc 	.word	0x10015bdc
1000d3e0:	100186f0 	.word	0x100186f0
1000d3e4:	100186ec 	.word	0x100186ec
1000d3e8:	10018974 	.word	0x10018974
1000d3ec:	10018f28 	.word	0x10018f28
1000d3f0:	10018988 	.word	0x10018988
1000d3f4:	1001899c 	.word	0x1001899c
1000d3f8:	100189e4 	.word	0x100189e4

1000d3fc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3fe:	465f      	mov	r7, fp
1000d400:	4656      	mov	r6, sl
1000d402:	464d      	mov	r5, r9
1000d404:	4644      	mov	r4, r8
1000d406:	b4f0      	push	{r4, r5, r6, r7}
1000d408:	b091      	sub	sp, #68	; 0x44
1000d40a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d40c:	2400      	movs	r4, #0
1000d40e:	4b7e      	ldr	r3, [pc, #504]	; (1000d608 <ble_device_init+0x20c>)
1000d410:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d412:	2207      	movs	r2, #7
1000d414:	2100      	movs	r1, #0
1000d416:	487d      	ldr	r0, [pc, #500]	; (1000d60c <ble_device_init+0x210>)
1000d418:	4e7d      	ldr	r6, [pc, #500]	; (1000d610 <ble_device_init+0x214>)
1000d41a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d41c:	2212      	movs	r2, #18
1000d41e:	2100      	movs	r1, #0
1000d420:	487c      	ldr	r0, [pc, #496]	; (1000d614 <ble_device_init+0x218>)
1000d422:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d424:	4a7c      	ldr	r2, [pc, #496]	; (1000d618 <ble_device_init+0x21c>)
1000d426:	2100      	movs	r1, #0
1000d428:	487c      	ldr	r0, [pc, #496]	; (1000d61c <ble_device_init+0x220>)
1000d42a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000d42c:	4b7c      	ldr	r3, [pc, #496]	; (1000d620 <ble_device_init+0x224>)
1000d42e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d430:	22cd      	movs	r2, #205	; 0xcd
1000d432:	0092      	lsls	r2, r2, #2
1000d434:	2100      	movs	r1, #0
1000d436:	487b      	ldr	r0, [pc, #492]	; (1000d624 <ble_device_init+0x228>)
1000d438:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000d43a:	4b7b      	ldr	r3, [pc, #492]	; (1000d628 <ble_device_init+0x22c>)
1000d43c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d43e:	2283      	movs	r2, #131	; 0x83
1000d440:	0092      	lsls	r2, r2, #2
1000d442:	2100      	movs	r1, #0
1000d444:	4879      	ldr	r0, [pc, #484]	; (1000d62c <ble_device_init+0x230>)
1000d446:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d448:	4b79      	ldr	r3, [pc, #484]	; (1000d630 <ble_device_init+0x234>)
1000d44a:	469b      	mov	fp, r3
1000d44c:	2380      	movs	r3, #128	; 0x80
1000d44e:	00db      	lsls	r3, r3, #3
1000d450:	469a      	mov	sl, r3
1000d452:	001a      	movs	r2, r3
1000d454:	2100      	movs	r1, #0
1000d456:	4658      	mov	r0, fp
1000d458:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d45a:	4b76      	ldr	r3, [pc, #472]	; (1000d634 <ble_device_init+0x238>)
1000d45c:	4699      	mov	r9, r3
1000d45e:	2380      	movs	r3, #128	; 0x80
1000d460:	015b      	lsls	r3, r3, #5
1000d462:	4698      	mov	r8, r3
1000d464:	001a      	movs	r2, r3
1000d466:	2100      	movs	r1, #0
1000d468:	4648      	mov	r0, r9
1000d46a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d46c:	4f72      	ldr	r7, [pc, #456]	; (1000d638 <ble_device_init+0x23c>)
1000d46e:	221c      	movs	r2, #28
1000d470:	2100      	movs	r1, #0
1000d472:	0038      	movs	r0, r7
1000d474:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d476:	465b      	mov	r3, fp
1000d478:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d47a:	4653      	mov	r3, sl
1000d47c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d47e:	464b      	mov	r3, r9
1000d480:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d482:	4643      	mov	r3, r8
1000d484:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d486:	4b6d      	ldr	r3, [pc, #436]	; (1000d63c <ble_device_init+0x240>)
1000d488:	601c      	str	r4, [r3, #0]
1000d48a:	605c      	str	r4, [r3, #4]
1000d48c:	609c      	str	r4, [r3, #8]
1000d48e:	60dc      	str	r4, [r3, #12]
1000d490:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d492:	4b6b      	ldr	r3, [pc, #428]	; (1000d640 <ble_device_init+0x244>)
1000d494:	601c      	str	r4, [r3, #0]
1000d496:	605c      	str	r4, [r3, #4]
1000d498:	609c      	str	r4, [r3, #8]
1000d49a:	60dc      	str	r4, [r3, #12]
1000d49c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d49e:	4b69      	ldr	r3, [pc, #420]	; (1000d644 <ble_device_init+0x248>)
1000d4a0:	601c      	str	r4, [r3, #0]
1000d4a2:	605c      	str	r4, [r3, #4]
1000d4a4:	609c      	str	r4, [r3, #8]
1000d4a6:	60dc      	str	r4, [r3, #12]
1000d4a8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d4aa:	4b67      	ldr	r3, [pc, #412]	; (1000d648 <ble_device_init+0x24c>)
1000d4ac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d4ae:	4b67      	ldr	r3, [pc, #412]	; (1000d64c <ble_device_init+0x250>)
1000d4b0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d4b2:	4b67      	ldr	r3, [pc, #412]	; (1000d650 <ble_device_init+0x254>)
1000d4b4:	601c      	str	r4, [r3, #0]
1000d4b6:	605c      	str	r4, [r3, #4]
1000d4b8:	609c      	str	r4, [r3, #8]
1000d4ba:	60dc      	str	r4, [r3, #12]
1000d4bc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d4be:	4b65      	ldr	r3, [pc, #404]	; (1000d654 <ble_device_init+0x258>)
1000d4c0:	601c      	str	r4, [r3, #0]
1000d4c2:	4c65      	ldr	r4, [pc, #404]	; (1000d658 <ble_device_init+0x25c>)
1000d4c4:	239b      	movs	r3, #155	; 0x9b
1000d4c6:	009b      	lsls	r3, r3, #2
1000d4c8:	4698      	mov	r8, r3
1000d4ca:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d4cc:	4f50      	ldr	r7, [pc, #320]	; (1000d610 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d4ce:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d4d0:	227c      	movs	r2, #124	; 0x7c
1000d4d2:	2100      	movs	r1, #0
1000d4d4:	0020      	movs	r0, r4
1000d4d6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d4d8:	0023      	movs	r3, r4
1000d4da:	335e      	adds	r3, #94	; 0x5e
1000d4dc:	2200      	movs	r2, #0
1000d4de:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d4e0:	7626      	strb	r6, [r4, #24]
1000d4e2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d4e4:	45a0      	cmp	r8, r4
1000d4e6:	d1f3      	bne.n	1000d4d0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d4e8:	4b5c      	ldr	r3, [pc, #368]	; (1000d65c <ble_device_init+0x260>)
1000d4ea:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d4ec:	4c52      	ldr	r4, [pc, #328]	; (1000d638 <ble_device_init+0x23c>)
1000d4ee:	4b4a      	ldr	r3, [pc, #296]	; (1000d618 <ble_device_init+0x21c>)
1000d4f0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d4f2:	4b4a      	ldr	r3, [pc, #296]	; (1000d61c <ble_device_init+0x220>)
1000d4f4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000d4f6:	485a      	ldr	r0, [pc, #360]	; (1000d660 <ble_device_init+0x264>)
1000d4f8:	4b5a      	ldr	r3, [pc, #360]	; (1000d664 <ble_device_init+0x268>)
1000d4fa:	4798      	blx	r3
1000d4fc:	485a      	ldr	r0, [pc, #360]	; (1000d668 <ble_device_init+0x26c>)
1000d4fe:	4b5b      	ldr	r3, [pc, #364]	; (1000d66c <ble_device_init+0x270>)
1000d500:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d502:	0020      	movs	r0, r4
1000d504:	4b5a      	ldr	r3, [pc, #360]	; (1000d670 <ble_device_init+0x274>)
1000d506:	4798      	blx	r3
1000d508:	2800      	cmp	r0, #0
1000d50a:	d00b      	beq.n	1000d524 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d50c:	4e54      	ldr	r6, [pc, #336]	; (1000d660 <ble_device_init+0x264>)
1000d50e:	0030      	movs	r0, r6
1000d510:	4d54      	ldr	r5, [pc, #336]	; (1000d664 <ble_device_init+0x268>)
1000d512:	47a8      	blx	r5
1000d514:	4857      	ldr	r0, [pc, #348]	; (1000d674 <ble_device_init+0x278>)
1000d516:	4c55      	ldr	r4, [pc, #340]	; (1000d66c <ble_device_init+0x270>)
1000d518:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d51a:	0030      	movs	r0, r6
1000d51c:	47a8      	blx	r5
1000d51e:	4856      	ldr	r0, [pc, #344]	; (1000d678 <ble_device_init+0x27c>)
1000d520:	47a0      	blx	r4
1000d522:	e7fe      	b.n	1000d522 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d524:	4a55      	ldr	r2, [pc, #340]	; (1000d67c <ble_device_init+0x280>)
1000d526:	2100      	movs	r1, #0
1000d528:	2000      	movs	r0, #0
1000d52a:	4c55      	ldr	r4, [pc, #340]	; (1000d680 <ble_device_init+0x284>)
1000d52c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d52e:	4a55      	ldr	r2, [pc, #340]	; (1000d684 <ble_device_init+0x288>)
1000d530:	2102      	movs	r1, #2
1000d532:	2000      	movs	r0, #0
1000d534:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d536:	2109      	movs	r1, #9
1000d538:	4853      	ldr	r0, [pc, #332]	; (1000d688 <ble_device_init+0x28c>)
1000d53a:	4b54      	ldr	r3, [pc, #336]	; (1000d68c <ble_device_init+0x290>)
1000d53c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d53e:	2800      	cmp	r0, #0
1000d540:	d005      	beq.n	1000d54e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000d542:	4847      	ldr	r0, [pc, #284]	; (1000d660 <ble_device_init+0x264>)
1000d544:	4b47      	ldr	r3, [pc, #284]	; (1000d664 <ble_device_init+0x268>)
1000d546:	4798      	blx	r3
1000d548:	4851      	ldr	r0, [pc, #324]	; (1000d690 <ble_device_init+0x294>)
1000d54a:	4b48      	ldr	r3, [pc, #288]	; (1000d66c <ble_device_init+0x270>)
1000d54c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d54e:	2207      	movs	r2, #7
1000d550:	4950      	ldr	r1, [pc, #320]	; (1000d694 <ble_device_init+0x298>)
1000d552:	3108      	adds	r1, #8
1000d554:	a804      	add	r0, sp, #16
1000d556:	4b50      	ldr	r3, [pc, #320]	; (1000d698 <ble_device_init+0x29c>)
1000d558:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d55a:	2226      	movs	r2, #38	; 0x26
1000d55c:	2100      	movs	r1, #0
1000d55e:	a806      	add	r0, sp, #24
1000d560:	4b2b      	ldr	r3, [pc, #172]	; (1000d610 <ble_device_init+0x214>)
1000d562:	4798      	blx	r3
	
	if (addr == NULL)
1000d564:	2d00      	cmp	r5, #0
1000d566:	d10c      	bne.n	1000d582 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d568:	a804      	add	r0, sp, #16
1000d56a:	4b4c      	ldr	r3, [pc, #304]	; (1000d69c <ble_device_init+0x2a0>)
1000d56c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d56e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d570:	2800      	cmp	r0, #0
1000d572:	d006      	beq.n	1000d582 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d574:	483a      	ldr	r0, [pc, #232]	; (1000d660 <ble_device_init+0x264>)
1000d576:	4b3b      	ldr	r3, [pc, #236]	; (1000d664 <ble_device_init+0x268>)
1000d578:	4798      	blx	r3
1000d57a:	4849      	ldr	r0, [pc, #292]	; (1000d6a0 <ble_device_init+0x2a4>)
1000d57c:	4b3b      	ldr	r3, [pc, #236]	; (1000d66c <ble_device_init+0x270>)
1000d57e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d580:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000d582:	4837      	ldr	r0, [pc, #220]	; (1000d660 <ble_device_init+0x264>)
1000d584:	4b37      	ldr	r3, [pc, #220]	; (1000d664 <ble_device_init+0x268>)
1000d586:	4798      	blx	r3
1000d588:	792b      	ldrb	r3, [r5, #4]
1000d58a:	796a      	ldrb	r2, [r5, #5]
1000d58c:	79a9      	ldrb	r1, [r5, #6]
1000d58e:	7828      	ldrb	r0, [r5, #0]
1000d590:	9003      	str	r0, [sp, #12]
1000d592:	7868      	ldrb	r0, [r5, #1]
1000d594:	9002      	str	r0, [sp, #8]
1000d596:	78a8      	ldrb	r0, [r5, #2]
1000d598:	9001      	str	r0, [sp, #4]
1000d59a:	78e8      	ldrb	r0, [r5, #3]
1000d59c:	9000      	str	r0, [sp, #0]
1000d59e:	4841      	ldr	r0, [pc, #260]	; (1000d6a4 <ble_device_init+0x2a8>)
1000d5a0:	4c32      	ldr	r4, [pc, #200]	; (1000d66c <ble_device_init+0x270>)
1000d5a2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d5a4:	ac06      	add	r4, sp, #24
1000d5a6:	230a      	movs	r3, #10
1000d5a8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d5aa:	4b3f      	ldr	r3, [pc, #252]	; (1000d6a8 <ble_device_init+0x2ac>)
1000d5ac:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d5ae:	2207      	movs	r2, #7
1000d5b0:	0029      	movs	r1, r5
1000d5b2:	a807      	add	r0, sp, #28
1000d5b4:	4b38      	ldr	r3, [pc, #224]	; (1000d698 <ble_device_init+0x29c>)
1000d5b6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d5b8:	2300      	movs	r3, #0
1000d5ba:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d5bc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d5be:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d5c0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d5c2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d5c4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d5c6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d5c8:	2380      	movs	r3, #128	; 0x80
1000d5ca:	009b      	lsls	r3, r3, #2
1000d5cc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d5ce:	0020      	movs	r0, r4
1000d5d0:	4b36      	ldr	r3, [pc, #216]	; (1000d6ac <ble_device_init+0x2b0>)
1000d5d2:	4798      	blx	r3
1000d5d4:	2800      	cmp	r0, #0
1000d5d6:	d005      	beq.n	1000d5e4 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d5d8:	4821      	ldr	r0, [pc, #132]	; (1000d660 <ble_device_init+0x264>)
1000d5da:	4b22      	ldr	r3, [pc, #136]	; (1000d664 <ble_device_init+0x268>)
1000d5dc:	4798      	blx	r3
1000d5de:	4834      	ldr	r0, [pc, #208]	; (1000d6b0 <ble_device_init+0x2b4>)
1000d5e0:	4b22      	ldr	r3, [pc, #136]	; (1000d66c <ble_device_init+0x270>)
1000d5e2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d5e4:	0028      	movs	r0, r5
1000d5e6:	4b33      	ldr	r3, [pc, #204]	; (1000d6b4 <ble_device_init+0x2b8>)
1000d5e8:	4798      	blx	r3
1000d5ea:	2800      	cmp	r0, #0
1000d5ec:	d005      	beq.n	1000d5fa <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d5ee:	481c      	ldr	r0, [pc, #112]	; (1000d660 <ble_device_init+0x264>)
1000d5f0:	4b1c      	ldr	r3, [pc, #112]	; (1000d664 <ble_device_init+0x268>)
1000d5f2:	4798      	blx	r3
1000d5f4:	4830      	ldr	r0, [pc, #192]	; (1000d6b8 <ble_device_init+0x2bc>)
1000d5f6:	4b1d      	ldr	r3, [pc, #116]	; (1000d66c <ble_device_init+0x270>)
1000d5f8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d5fa:	b011      	add	sp, #68	; 0x44
1000d5fc:	bc3c      	pop	{r2, r3, r4, r5}
1000d5fe:	4690      	mov	r8, r2
1000d600:	4699      	mov	r9, r3
1000d602:	46a2      	mov	sl, r4
1000d604:	46ab      	mov	fp, r5
1000d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d608:	1001726c 	.word	0x1001726c
1000d60c:	10017274 	.word	0x10017274
1000d610:	100138f9 	.word	0x100138f9
1000d614:	100189b0 	.word	0x100189b0
1000d618:	000004e2 	.word	0x000004e2
1000d61c:	10016d8c 	.word	0x10016d8c
1000d620:	10017270 	.word	0x10017270
1000d624:	100189e8 	.word	0x100189e8
1000d628:	100189e0 	.word	0x100189e0
1000d62c:	10018d1c 	.word	0x10018d1c
1000d630:	1001698c 	.word	0x1001698c
1000d634:	1001727c 	.word	0x1001727c
1000d638:	100189c4 	.word	0x100189c4
1000d63c:	10018988 	.word	0x10018988
1000d640:	1001899c 	.word	0x1001899c
1000d644:	100186f0 	.word	0x100186f0
1000d648:	100189e4 	.word	0x100189e4
1000d64c:	100186ec 	.word	0x100186ec
1000d650:	10018974 	.word	0x10018974
1000d654:	10018f28 	.word	0x10018f28
1000d658:	10018704 	.word	0x10018704
1000d65c:	10018970 	.word	0x10018970
1000d660:	10014d08 	.word	0x10014d08
1000d664:	10013b61 	.word	0x10013b61
1000d668:	10016254 	.word	0x10016254
1000d66c:	10013a41 	.word	0x10013a41
1000d670:	1000f19d 	.word	0x1000f19d
1000d674:	10016278 	.word	0x10016278
1000d678:	100162a4 	.word	0x100162a4
1000d67c:	10016654 	.word	0x10016654
1000d680:	1000d32d 	.word	0x1000d32d
1000d684:	10015c08 	.word	0x10015c08
1000d688:	100162ec 	.word	0x100162ec
1000d68c:	1000f0b5 	.word	0x1000f0b5
1000d690:	100162f8 	.word	0x100162f8
1000d694:	10015bf8 	.word	0x10015bf8
1000d698:	100138e7 	.word	0x100138e7
1000d69c:	1000f0e9 	.word	0x1000f0e9
1000d6a0:	10016310 	.word	0x10016310
1000d6a4:	1001633c 	.word	0x1001633c
1000d6a8:	00003a98 	.word	0x00003a98
1000d6ac:	1000f10d 	.word	0x1000f10d
1000d6b0:	1001638c 	.word	0x1001638c
1000d6b4:	1000f351 	.word	0x1000f351
1000d6b8:	100163c8 	.word	0x100163c8

1000d6bc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000d6bc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000d6be:	2200      	movs	r2, #0
1000d6c0:	2100      	movs	r1, #0
1000d6c2:	4b0a      	ldr	r3, [pc, #40]	; (1000d6ec <ble_send_slave_sec_request+0x30>)
1000d6c4:	4798      	blx	r3
1000d6c6:	1e04      	subs	r4, r0, #0
1000d6c8:	d106      	bne.n	1000d6d8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000d6ca:	4809      	ldr	r0, [pc, #36]	; (1000d6f0 <ble_send_slave_sec_request+0x34>)
1000d6cc:	4b09      	ldr	r3, [pc, #36]	; (1000d6f4 <ble_send_slave_sec_request+0x38>)
1000d6ce:	4798      	blx	r3
1000d6d0:	4809      	ldr	r0, [pc, #36]	; (1000d6f8 <ble_send_slave_sec_request+0x3c>)
1000d6d2:	4b0a      	ldr	r3, [pc, #40]	; (1000d6fc <ble_send_slave_sec_request+0x40>)
1000d6d4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000d6d6:	e006      	b.n	1000d6e6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000d6d8:	4805      	ldr	r0, [pc, #20]	; (1000d6f0 <ble_send_slave_sec_request+0x34>)
1000d6da:	4b06      	ldr	r3, [pc, #24]	; (1000d6f4 <ble_send_slave_sec_request+0x38>)
1000d6dc:	4798      	blx	r3
1000d6de:	4808      	ldr	r0, [pc, #32]	; (1000d700 <ble_send_slave_sec_request+0x44>)
1000d6e0:	4b06      	ldr	r3, [pc, #24]	; (1000d6fc <ble_send_slave_sec_request+0x40>)
1000d6e2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000d6e4:	24e2      	movs	r4, #226	; 0xe2
}
1000d6e6:	0020      	movs	r0, r4
1000d6e8:	bd10      	pop	{r4, pc}
1000d6ea:	46c0      	nop			; (mov r8, r8)
1000d6ec:	100100c1 	.word	0x100100c1
1000d6f0:	10014d08 	.word	0x10014d08
1000d6f4:	10013b61 	.word	0x10013b61
1000d6f8:	10016418 	.word	0x10016418
1000d6fc:	10013a41 	.word	0x10013a41
1000d700:	1001643c 	.word	0x1001643c

1000d704 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d704:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d706:	465f      	mov	r7, fp
1000d708:	464e      	mov	r6, r9
1000d70a:	4645      	mov	r5, r8
1000d70c:	b4e0      	push	{r5, r6, r7}
1000d70e:	b09a      	sub	sp, #104	; 0x68
1000d710:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000d712:	7a86      	ldrb	r6, [r0, #10]
1000d714:	2e00      	cmp	r6, #0
1000d716:	d000      	beq.n	1000d71a <ble_connected_state_handler+0x16>
1000d718:	e0cc      	b.n	1000d8b4 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000d71a:	4878      	ldr	r0, [pc, #480]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d71c:	4f78      	ldr	r7, [pc, #480]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d71e:	47b8      	blx	r7
1000d720:	792b      	ldrb	r3, [r5, #4]
1000d722:	796a      	ldrb	r2, [r5, #5]
1000d724:	79a9      	ldrb	r1, [r5, #6]
1000d726:	7868      	ldrb	r0, [r5, #1]
1000d728:	9002      	str	r0, [sp, #8]
1000d72a:	78a8      	ldrb	r0, [r5, #2]
1000d72c:	9001      	str	r0, [sp, #4]
1000d72e:	78e8      	ldrb	r0, [r5, #3]
1000d730:	9000      	str	r0, [sp, #0]
1000d732:	4874      	ldr	r0, [pc, #464]	; (1000d904 <ble_connected_state_handler+0x200>)
1000d734:	4c74      	ldr	r4, [pc, #464]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d736:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d738:	4870      	ldr	r0, [pc, #448]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d73a:	47b8      	blx	r7
1000d73c:	8929      	ldrh	r1, [r5, #8]
1000d73e:	4873      	ldr	r0, [pc, #460]	; (1000d90c <ble_connected_state_handler+0x208>)
1000d740:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d742:	2212      	movs	r2, #18
1000d744:	0029      	movs	r1, r5
1000d746:	4872      	ldr	r0, [pc, #456]	; (1000d910 <ble_connected_state_handler+0x20c>)
1000d748:	4b72      	ldr	r3, [pc, #456]	; (1000d914 <ble_connected_state_handler+0x210>)
1000d74a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d74c:	9504      	str	r5, [sp, #16]
1000d74e:	2207      	movs	r2, #7
1000d750:	0029      	movs	r1, r5
1000d752:	4871      	ldr	r0, [pc, #452]	; (1000d918 <ble_connected_state_handler+0x214>)
1000d754:	4b71      	ldr	r3, [pc, #452]	; (1000d91c <ble_connected_state_handler+0x218>)
1000d756:	4798      	blx	r3
1000d758:	2800      	cmp	r0, #0
1000d75a:	d100      	bne.n	1000d75e <ble_connected_state_handler+0x5a>
1000d75c:	e0b3      	b.n	1000d8c6 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d75e:	782b      	ldrb	r3, [r5, #0]
1000d760:	2b02      	cmp	r3, #2
1000d762:	d000      	beq.n	1000d766 <ble_connected_state_handler+0x62>
1000d764:	e0af      	b.n	1000d8c6 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d766:	2250      	movs	r2, #80	; 0x50
1000d768:	2100      	movs	r1, #0
1000d76a:	a806      	add	r0, sp, #24
1000d76c:	4b6c      	ldr	r3, [pc, #432]	; (1000d920 <ble_connected_state_handler+0x21c>)
1000d76e:	4798      	blx	r3
1000d770:	4f6c      	ldr	r7, [pc, #432]	; (1000d924 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d772:	2300      	movs	r3, #0
1000d774:	e00b      	b.n	1000d78e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d776:	1c59      	adds	r1, r3, #1
1000d778:	7814      	ldrb	r4, [r2, #0]
1000d77a:	a806      	add	r0, sp, #24
1000d77c:	54c4      	strb	r4, [r0, r3]
1000d77e:	3201      	adds	r2, #1
1000d780:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d782:	42b3      	cmp	r3, r6
1000d784:	d1f7      	bne.n	1000d776 <ble_connected_state_handler+0x72>
1000d786:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d788:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d78a:	2b50      	cmp	r3, #80	; 0x50
1000d78c:	d004      	beq.n	1000d798 <ble_connected_state_handler+0x94>
1000d78e:	001e      	movs	r6, r3
1000d790:	3610      	adds	r6, #16
1000d792:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d794:	003a      	movs	r2, r7
1000d796:	e7ee      	b.n	1000d776 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d798:	aa06      	add	r2, sp, #24
1000d79a:	0029      	movs	r1, r5
1000d79c:	2005      	movs	r0, #5
1000d79e:	4b62      	ldr	r3, [pc, #392]	; (1000d928 <ble_connected_state_handler+0x224>)
1000d7a0:	4798      	blx	r3
1000d7a2:	1e06      	subs	r6, r0, #0
1000d7a4:	d106      	bne.n	1000d7b4 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000d7a6:	4855      	ldr	r0, [pc, #340]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d7a8:	4b55      	ldr	r3, [pc, #340]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d7aa:	4798      	blx	r3
1000d7ac:	485f      	ldr	r0, [pc, #380]	; (1000d92c <ble_connected_state_handler+0x228>)
1000d7ae:	4b56      	ldr	r3, [pc, #344]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d7b0:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000d7b2:	e09c      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d7b4:	4851      	ldr	r0, [pc, #324]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d7b6:	4b52      	ldr	r3, [pc, #328]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d7b8:	4798      	blx	r3
1000d7ba:	485d      	ldr	r0, [pc, #372]	; (1000d930 <ble_connected_state_handler+0x22c>)
1000d7bc:	4b52      	ldr	r3, [pc, #328]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d7be:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d7c0:	26e2      	movs	r6, #226	; 0xe2
1000d7c2:	e094      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
1000d7c4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d7c6:	9405      	str	r4, [sp, #20]
1000d7c8:	2207      	movs	r2, #7
1000d7ca:	9904      	ldr	r1, [sp, #16]
1000d7cc:	4648      	mov	r0, r9
1000d7ce:	47d8      	blx	fp
1000d7d0:	2800      	cmp	r0, #0
1000d7d2:	d109      	bne.n	1000d7e8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d7d4:	9a05      	ldr	r2, [sp, #20]
1000d7d6:	0153      	lsls	r3, r2, #5
1000d7d8:	1a9b      	subs	r3, r3, r2
1000d7da:	009a      	lsls	r2, r3, #2
1000d7dc:	4b55      	ldr	r3, [pc, #340]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d7de:	189b      	adds	r3, r3, r2
1000d7e0:	335e      	adds	r3, #94	; 0x5e
1000d7e2:	2202      	movs	r2, #2
1000d7e4:	701a      	strb	r2, [r3, #0]
1000d7e6:	e02b      	b.n	1000d840 <ble_connected_state_handler+0x13c>
1000d7e8:	3401      	adds	r4, #1
1000d7ea:	237c      	movs	r3, #124	; 0x7c
1000d7ec:	469c      	mov	ip, r3
1000d7ee:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7f0:	2c05      	cmp	r4, #5
1000d7f2:	d1e7      	bne.n	1000d7c4 <ble_connected_state_handler+0xc0>
1000d7f4:	e072      	b.n	1000d8dc <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d7f6:	001c      	movs	r4, r3
1000d7f8:	7811      	ldrb	r1, [r2, #0]
1000d7fa:	2900      	cmp	r1, #0
1000d7fc:	d11a      	bne.n	1000d834 <ble_connected_state_handler+0x130>
1000d7fe:	e001      	b.n	1000d804 <ble_connected_state_handler+0x100>
1000d800:	2400      	movs	r4, #0
1000d802:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d804:	0163      	lsls	r3, r4, #5
1000d806:	4699      	mov	r9, r3
1000d808:	1b18      	subs	r0, r3, r4
1000d80a:	0080      	lsls	r0, r0, #2
1000d80c:	4b49      	ldr	r3, [pc, #292]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d80e:	4698      	mov	r8, r3
1000d810:	4440      	add	r0, r8
1000d812:	2212      	movs	r2, #18
1000d814:	0029      	movs	r1, r5
1000d816:	4b3f      	ldr	r3, [pc, #252]	; (1000d914 <ble_connected_state_handler+0x210>)
1000d818:	4798      	blx	r3
						ble_device_count++;
1000d81a:	4a47      	ldr	r2, [pc, #284]	; (1000d938 <ble_connected_state_handler+0x234>)
1000d81c:	7813      	ldrb	r3, [r2, #0]
1000d81e:	3301      	adds	r3, #1
1000d820:	b2db      	uxtb	r3, r3
1000d822:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d824:	464b      	mov	r3, r9
1000d826:	1b1b      	subs	r3, r3, r4
1000d828:	009b      	lsls	r3, r3, #2
1000d82a:	4443      	add	r3, r8
1000d82c:	335e      	adds	r3, #94	; 0x5e
1000d82e:	2202      	movs	r2, #2
1000d830:	701a      	strb	r2, [r3, #0]
						break;
1000d832:	e005      	b.n	1000d840 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d834:	1c79      	adds	r1, r7, #1
1000d836:	b2cf      	uxtb	r7, r1
1000d838:	3301      	adds	r3, #1
1000d83a:	327c      	adds	r2, #124	; 0x7c
1000d83c:	2f05      	cmp	r7, #5
1000d83e:	d1da      	bne.n	1000d7f6 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d840:	2207      	movs	r2, #7
1000d842:	0029      	movs	r1, r5
1000d844:	4834      	ldr	r0, [pc, #208]	; (1000d918 <ble_connected_state_handler+0x214>)
1000d846:	4b35      	ldr	r3, [pc, #212]	; (1000d91c <ble_connected_state_handler+0x218>)
1000d848:	4798      	blx	r3
1000d84a:	2800      	cmp	r0, #0
1000d84c:	d10c      	bne.n	1000d868 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d84e:	017b      	lsls	r3, r7, #5
1000d850:	1bdb      	subs	r3, r3, r7
1000d852:	009b      	lsls	r3, r3, #2
1000d854:	4a37      	ldr	r2, [pc, #220]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d856:	18d3      	adds	r3, r2, r3
1000d858:	2205      	movs	r2, #5
1000d85a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d85c:	3202      	adds	r2, #2
1000d85e:	2100      	movs	r1, #0
1000d860:	482d      	ldr	r0, [pc, #180]	; (1000d918 <ble_connected_state_handler+0x214>)
1000d862:	4b2f      	ldr	r3, [pc, #188]	; (1000d920 <ble_connected_state_handler+0x21c>)
1000d864:	4798      	blx	r3
1000d866:	e042      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d868:	4b32      	ldr	r3, [pc, #200]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d86a:	4698      	mov	r8, r3
1000d86c:	017c      	lsls	r4, r7, #5
1000d86e:	1be3      	subs	r3, r4, r7
1000d870:	009b      	lsls	r3, r3, #2
1000d872:	4443      	add	r3, r8
1000d874:	220a      	movs	r2, #10
1000d876:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d878:	3a03      	subs	r2, #3
1000d87a:	2100      	movs	r1, #0
1000d87c:	4826      	ldr	r0, [pc, #152]	; (1000d918 <ble_connected_state_handler+0x214>)
1000d87e:	4b28      	ldr	r3, [pc, #160]	; (1000d920 <ble_connected_state_handler+0x21c>)
1000d880:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d882:	1be4      	subs	r4, r4, r7
1000d884:	00a4      	lsls	r4, r4, #2
1000d886:	4444      	add	r4, r8
1000d888:	7ca3      	ldrb	r3, [r4, #18]
1000d88a:	2b0a      	cmp	r3, #10
1000d88c:	d12f      	bne.n	1000d8ee <ble_connected_state_handler+0x1ea>
1000d88e:	e00d      	b.n	1000d8ac <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d890:	481a      	ldr	r0, [pc, #104]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d892:	4b1b      	ldr	r3, [pc, #108]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d894:	4798      	blx	r3
1000d896:	4b28      	ldr	r3, [pc, #160]	; (1000d938 <ble_connected_state_handler+0x234>)
1000d898:	7819      	ldrb	r1, [r3, #0]
1000d89a:	b2c9      	uxtb	r1, r1
1000d89c:	4827      	ldr	r0, [pc, #156]	; (1000d93c <ble_connected_state_handler+0x238>)
1000d89e:	4b1a      	ldr	r3, [pc, #104]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d8a0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d8a2:	8928      	ldrh	r0, [r5, #8]
1000d8a4:	2113      	movs	r1, #19
1000d8a6:	4b26      	ldr	r3, [pc, #152]	; (1000d940 <ble_connected_state_handler+0x23c>)
1000d8a8:	4798      	blx	r3
1000d8aa:	e020      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d8ac:	8928      	ldrh	r0, [r5, #8]
1000d8ae:	4b25      	ldr	r3, [pc, #148]	; (1000d944 <ble_connected_state_handler+0x240>)
1000d8b0:	4798      	blx	r3
1000d8b2:	e01c      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d8b4:	4811      	ldr	r0, [pc, #68]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d8b6:	4b12      	ldr	r3, [pc, #72]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d8b8:	4798      	blx	r3
1000d8ba:	7aa9      	ldrb	r1, [r5, #10]
1000d8bc:	4822      	ldr	r0, [pc, #136]	; (1000d948 <ble_connected_state_handler+0x244>)
1000d8be:	4b12      	ldr	r3, [pc, #72]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d8c0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d8c2:	2600      	movs	r6, #0
1000d8c4:	e013      	b.n	1000d8ee <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d8c6:	4b1c      	ldr	r3, [pc, #112]	; (1000d938 <ble_connected_state_handler+0x234>)
1000d8c8:	781b      	ldrb	r3, [r3, #0]
1000d8ca:	b2db      	uxtb	r3, r3
1000d8cc:	2b04      	cmp	r3, #4
1000d8ce:	d8df      	bhi.n	1000d890 <ble_connected_state_handler+0x18c>
1000d8d0:	4b18      	ldr	r3, [pc, #96]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d8d2:	4699      	mov	r9, r3
1000d8d4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d8d6:	4b11      	ldr	r3, [pc, #68]	; (1000d91c <ble_connected_state_handler+0x218>)
1000d8d8:	469b      	mov	fp, r3
1000d8da:	e773      	b.n	1000d7c4 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d8dc:	235e      	movs	r3, #94	; 0x5e
1000d8de:	4a15      	ldr	r2, [pc, #84]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d8e0:	5cd3      	ldrb	r3, [r2, r3]
1000d8e2:	2b00      	cmp	r3, #0
1000d8e4:	d08c      	beq.n	1000d800 <ble_connected_state_handler+0xfc>
1000d8e6:	4a19      	ldr	r2, [pc, #100]	; (1000d94c <ble_connected_state_handler+0x248>)
1000d8e8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8ea:	2701      	movs	r7, #1
1000d8ec:	e783      	b.n	1000d7f6 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d8ee:	0030      	movs	r0, r6
1000d8f0:	b01a      	add	sp, #104	; 0x68
1000d8f2:	bc1c      	pop	{r2, r3, r4}
1000d8f4:	4690      	mov	r8, r2
1000d8f6:	4699      	mov	r9, r3
1000d8f8:	46a3      	mov	fp, r4
1000d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8fc:	10014d08 	.word	0x10014d08
1000d900:	10013b61 	.word	0x10013b61
1000d904:	1001645c 	.word	0x1001645c
1000d908:	10013a41 	.word	0x10013a41
1000d90c:	100164a0 	.word	0x100164a0
1000d910:	100189b0 	.word	0x100189b0
1000d914:	100138e7 	.word	0x100138e7
1000d918:	10017274 	.word	0x10017274
1000d91c:	100138c9 	.word	0x100138c9
1000d920:	100138f9 	.word	0x100138f9
1000d924:	1001874a 	.word	0x1001874a
1000d928:	1000f5bd 	.word	0x1000f5bd
1000d92c:	100164b8 	.word	0x100164b8
1000d930:	100164dc 	.word	0x100164dc
1000d934:	10018704 	.word	0x10018704
1000d938:	10018970 	.word	0x10018970
1000d93c:	10016500 	.word	0x10016500
1000d940:	1000f591 	.word	0x1000f591
1000d944:	1000d6bd 	.word	0x1000d6bd
1000d948:	1001653c 	.word	0x1001653c
1000d94c:	100187de 	.word	0x100187de

1000d950 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d950:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d952:	4647      	mov	r7, r8
1000d954:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d956:	7803      	ldrb	r3, [r0, #0]
1000d958:	2b00      	cmp	r3, #0
1000d95a:	d152      	bne.n	1000da02 <ble_resolv_rand_addr_handler+0xb2>
1000d95c:	4d3e      	ldr	r5, [pc, #248]	; (1000da58 <ble_resolv_rand_addr_handler+0x108>)
1000d95e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d960:	1c46      	adds	r6, r0, #1
1000d962:	4f3e      	ldr	r7, [pc, #248]	; (1000da5c <ble_resolv_rand_addr_handler+0x10c>)
1000d964:	2210      	movs	r2, #16
1000d966:	0029      	movs	r1, r5
1000d968:	0030      	movs	r0, r6
1000d96a:	47b8      	blx	r7
1000d96c:	2800      	cmp	r0, #0
1000d96e:	d031      	beq.n	1000d9d4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d970:	3401      	adds	r4, #1
1000d972:	b2e4      	uxtb	r4, r4
1000d974:	357c      	adds	r5, #124	; 0x7c
1000d976:	2c05      	cmp	r4, #5
1000d978:	d1f4      	bne.n	1000d964 <ble_resolv_rand_addr_handler+0x14>
1000d97a:	e042      	b.n	1000da02 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d97c:	001d      	movs	r5, r3
1000d97e:	7811      	ldrb	r1, [r2, #0]
1000d980:	2900      	cmp	r1, #0
1000d982:	d11b      	bne.n	1000d9bc <ble_resolv_rand_addr_handler+0x6c>
1000d984:	e001      	b.n	1000d98a <ble_resolv_rand_addr_handler+0x3a>
1000d986:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d988:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d98a:	4b35      	ldr	r3, [pc, #212]	; (1000da60 <ble_resolv_rand_addr_handler+0x110>)
1000d98c:	4698      	mov	r8, r3
1000d98e:	016e      	lsls	r6, r5, #5
1000d990:	1b77      	subs	r7, r6, r5
1000d992:	00bf      	lsls	r7, r7, #2
1000d994:	4447      	add	r7, r8
1000d996:	2212      	movs	r2, #18
1000d998:	4932      	ldr	r1, [pc, #200]	; (1000da64 <ble_resolv_rand_addr_handler+0x114>)
1000d99a:	0038      	movs	r0, r7
1000d99c:	4b32      	ldr	r3, [pc, #200]	; (1000da68 <ble_resolv_rand_addr_handler+0x118>)
1000d99e:	4798      	blx	r3
				ble_device_count++;
1000d9a0:	4a32      	ldr	r2, [pc, #200]	; (1000da6c <ble_resolv_rand_addr_handler+0x11c>)
1000d9a2:	7813      	ldrb	r3, [r2, #0]
1000d9a4:	3301      	adds	r3, #1
1000d9a6:	b2db      	uxtb	r3, r3
1000d9a8:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d9aa:	375e      	adds	r7, #94	; 0x5e
1000d9ac:	2302      	movs	r3, #2
1000d9ae:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d9b0:	1b75      	subs	r5, r6, r5
1000d9b2:	00ad      	lsls	r5, r5, #2
1000d9b4:	4445      	add	r5, r8
1000d9b6:	3308      	adds	r3, #8
1000d9b8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d9ba:	e031      	b.n	1000da20 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9bc:	3401      	adds	r4, #1
1000d9be:	b2e4      	uxtb	r4, r4
1000d9c0:	3301      	adds	r3, #1
1000d9c2:	327c      	adds	r2, #124	; 0x7c
1000d9c4:	2c05      	cmp	r4, #5
1000d9c6:	d1d9      	bne.n	1000d97c <ble_resolv_rand_addr_handler+0x2c>
1000d9c8:	e03a      	b.n	1000da40 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d9ca:	4b26      	ldr	r3, [pc, #152]	; (1000da64 <ble_resolv_rand_addr_handler+0x114>)
1000d9cc:	8918      	ldrh	r0, [r3, #8]
1000d9ce:	4b28      	ldr	r3, [pc, #160]	; (1000da70 <ble_resolv_rand_addr_handler+0x120>)
1000d9d0:	4798      	blx	r3
1000d9d2:	e03c      	b.n	1000da4e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d9d4:	4827      	ldr	r0, [pc, #156]	; (1000da74 <ble_resolv_rand_addr_handler+0x124>)
1000d9d6:	4b28      	ldr	r3, [pc, #160]	; (1000da78 <ble_resolv_rand_addr_handler+0x128>)
1000d9d8:	4798      	blx	r3
1000d9da:	4828      	ldr	r0, [pc, #160]	; (1000da7c <ble_resolv_rand_addr_handler+0x12c>)
1000d9dc:	4b28      	ldr	r3, [pc, #160]	; (1000da80 <ble_resolv_rand_addr_handler+0x130>)
1000d9de:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d9e0:	481f      	ldr	r0, [pc, #124]	; (1000da60 <ble_resolv_rand_addr_handler+0x110>)
1000d9e2:	0163      	lsls	r3, r4, #5
1000d9e4:	1b1a      	subs	r2, r3, r4
1000d9e6:	0092      	lsls	r2, r2, #2
1000d9e8:	1882      	adds	r2, r0, r2
1000d9ea:	0011      	movs	r1, r2
1000d9ec:	315e      	adds	r1, #94	; 0x5e
1000d9ee:	2502      	movs	r5, #2
1000d9f0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d9f2:	210a      	movs	r1, #10
1000d9f4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d9f6:	0010      	movs	r0, r2
1000d9f8:	2212      	movs	r2, #18
1000d9fa:	491a      	ldr	r1, [pc, #104]	; (1000da64 <ble_resolv_rand_addr_handler+0x114>)
1000d9fc:	4b1a      	ldr	r3, [pc, #104]	; (1000da68 <ble_resolv_rand_addr_handler+0x118>)
1000d9fe:	4798      	blx	r3
1000da00:	e00e      	b.n	1000da20 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000da02:	481c      	ldr	r0, [pc, #112]	; (1000da74 <ble_resolv_rand_addr_handler+0x124>)
1000da04:	4b1c      	ldr	r3, [pc, #112]	; (1000da78 <ble_resolv_rand_addr_handler+0x128>)
1000da06:	4798      	blx	r3
1000da08:	481e      	ldr	r0, [pc, #120]	; (1000da84 <ble_resolv_rand_addr_handler+0x134>)
1000da0a:	4b1d      	ldr	r3, [pc, #116]	; (1000da80 <ble_resolv_rand_addr_handler+0x130>)
1000da0c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000da0e:	235e      	movs	r3, #94	; 0x5e
1000da10:	4a13      	ldr	r2, [pc, #76]	; (1000da60 <ble_resolv_rand_addr_handler+0x110>)
1000da12:	5cd3      	ldrb	r3, [r2, r3]
1000da14:	2b00      	cmp	r3, #0
1000da16:	d0b6      	beq.n	1000d986 <ble_resolv_rand_addr_handler+0x36>
1000da18:	4a1b      	ldr	r2, [pc, #108]	; (1000da88 <ble_resolv_rand_addr_handler+0x138>)
1000da1a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da1c:	2401      	movs	r4, #1
1000da1e:	e7ad      	b.n	1000d97c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000da20:	4814      	ldr	r0, [pc, #80]	; (1000da74 <ble_resolv_rand_addr_handler+0x124>)
1000da22:	4b15      	ldr	r3, [pc, #84]	; (1000da78 <ble_resolv_rand_addr_handler+0x128>)
1000da24:	4798      	blx	r3
1000da26:	0021      	movs	r1, r4
1000da28:	4818      	ldr	r0, [pc, #96]	; (1000da8c <ble_resolv_rand_addr_handler+0x13c>)
1000da2a:	4b15      	ldr	r3, [pc, #84]	; (1000da80 <ble_resolv_rand_addr_handler+0x130>)
1000da2c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000da2e:	0163      	lsls	r3, r4, #5
1000da30:	1b1c      	subs	r4, r3, r4
1000da32:	00a4      	lsls	r4, r4, #2
1000da34:	4b0a      	ldr	r3, [pc, #40]	; (1000da60 <ble_resolv_rand_addr_handler+0x110>)
1000da36:	191c      	adds	r4, r3, r4
1000da38:	7ca3      	ldrb	r3, [r4, #18]
1000da3a:	2b0a      	cmp	r3, #10
1000da3c:	d107      	bne.n	1000da4e <ble_resolv_rand_addr_handler+0xfe>
1000da3e:	e7c4      	b.n	1000d9ca <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000da40:	480c      	ldr	r0, [pc, #48]	; (1000da74 <ble_resolv_rand_addr_handler+0x124>)
1000da42:	4b0d      	ldr	r3, [pc, #52]	; (1000da78 <ble_resolv_rand_addr_handler+0x128>)
1000da44:	4798      	blx	r3
1000da46:	2105      	movs	r1, #5
1000da48:	4810      	ldr	r0, [pc, #64]	; (1000da8c <ble_resolv_rand_addr_handler+0x13c>)
1000da4a:	4b0d      	ldr	r3, [pc, #52]	; (1000da80 <ble_resolv_rand_addr_handler+0x130>)
1000da4c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000da4e:	2000      	movs	r0, #0
1000da50:	bc04      	pop	{r2}
1000da52:	4690      	mov	r8, r2
1000da54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da56:	46c0      	nop			; (mov r8, r8)
1000da58:	1001874a 	.word	0x1001874a
1000da5c:	100138c9 	.word	0x100138c9
1000da60:	10018704 	.word	0x10018704
1000da64:	100189b0 	.word	0x100189b0
1000da68:	100138e7 	.word	0x100138e7
1000da6c:	10018970 	.word	0x10018970
1000da70:	1000d6bd 	.word	0x1000d6bd
1000da74:	10014d08 	.word	0x10014d08
1000da78:	10013b61 	.word	0x10013b61
1000da7c:	10016564 	.word	0x10016564
1000da80:	10013a41 	.word	0x10013a41
1000da84:	1001657c 	.word	0x1001657c
1000da88:	100187de 	.word	0x100187de
1000da8c:	10016598 	.word	0x10016598

1000da90 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000da90:	b530      	push	{r4, r5, lr}
1000da92:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000da94:	ac08      	add	r4, sp, #32
1000da96:	2203      	movs	r2, #3
1000da98:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000da9a:	2302      	movs	r3, #2
1000da9c:	70a3      	strb	r3, [r4, #2]
1000da9e:	3316      	adds	r3, #22
1000daa0:	70e3      	strb	r3, [r4, #3]
1000daa2:	7122      	strb	r2, [r4, #4]
1000daa4:	7163      	strb	r3, [r4, #5]
1000daa6:	3201      	adds	r2, #1
1000daa8:	71a2      	strb	r2, [r4, #6]
1000daaa:	71e3      	strb	r3, [r4, #7]
1000daac:	320b      	adds	r2, #11
1000daae:	7222      	strb	r2, [r4, #8]
1000dab0:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000dab2:	2509      	movs	r5, #9
1000dab4:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000dab6:	3b0e      	subs	r3, #14
1000dab8:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000daba:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000dabc:	aa0b      	add	r2, sp, #44	; 0x2c
1000dabe:	4b16      	ldr	r3, [pc, #88]	; (1000db18 <ble_advertisement_data_set+0x88>)
1000dac0:	cb03      	ldmia	r3!, {r0, r1}
1000dac2:	c203      	stmia	r2!, {r0, r1}
1000dac4:	781b      	ldrb	r3, [r3, #0]
1000dac6:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000dac8:	2300      	movs	r3, #0
1000daca:	466a      	mov	r2, sp
1000dacc:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000dace:	3315      	adds	r3, #21
1000dad0:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000dad2:	4812      	ldr	r0, [pc, #72]	; (1000db1c <ble_advertisement_data_set+0x8c>)
1000dad4:	4b12      	ldr	r3, [pc, #72]	; (1000db20 <ble_advertisement_data_set+0x90>)
1000dad6:	4798      	blx	r3
1000dad8:	4812      	ldr	r0, [pc, #72]	; (1000db24 <ble_advertisement_data_set+0x94>)
1000dada:	4b13      	ldr	r3, [pc, #76]	; (1000db28 <ble_advertisement_data_set+0x98>)
1000dadc:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000dade:	466b      	mov	r3, sp
1000dae0:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000dae2:	23ff      	movs	r3, #255	; 0xff
1000dae4:	466a      	mov	r2, sp
1000dae6:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000dae8:	2208      	movs	r2, #8
1000daea:	4910      	ldr	r1, [pc, #64]	; (1000db2c <ble_advertisement_data_set+0x9c>)
1000daec:	466b      	mov	r3, sp
1000daee:	1c98      	adds	r0, r3, #2
1000daf0:	4b0f      	ldr	r3, [pc, #60]	; (1000db30 <ble_advertisement_data_set+0xa0>)
1000daf2:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000daf4:	230a      	movs	r3, #10
1000daf6:	466a      	mov	r2, sp
1000daf8:	2115      	movs	r1, #21
1000dafa:	0020      	movs	r0, r4
1000dafc:	4c0d      	ldr	r4, [pc, #52]	; (1000db34 <ble_advertisement_data_set+0xa4>)
1000dafe:	47a0      	blx	r4
1000db00:	2800      	cmp	r0, #0
1000db02:	d005      	beq.n	1000db10 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000db04:	4805      	ldr	r0, [pc, #20]	; (1000db1c <ble_advertisement_data_set+0x8c>)
1000db06:	4b06      	ldr	r3, [pc, #24]	; (1000db20 <ble_advertisement_data_set+0x90>)
1000db08:	4798      	blx	r3
1000db0a:	480b      	ldr	r0, [pc, #44]	; (1000db38 <ble_advertisement_data_set+0xa8>)
1000db0c:	4b06      	ldr	r3, [pc, #24]	; (1000db28 <ble_advertisement_data_set+0x98>)
1000db0e:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000db10:	2000      	movs	r0, #0
1000db12:	b011      	add	sp, #68	; 0x44
1000db14:	bd30      	pop	{r4, r5, pc}
1000db16:	46c0      	nop			; (mov r8, r8)
1000db18:	100162ec 	.word	0x100162ec
1000db1c:	10014d08 	.word	0x10014d08
1000db20:	10013b61 	.word	0x10013b61
1000db24:	100165f0 	.word	0x100165f0
1000db28:	10013a41 	.word	0x10013a41
1000db2c:	10016624 	.word	0x10016624
1000db30:	100138e7 	.word	0x100138e7
1000db34:	1000f3a5 	.word	0x1000f3a5
1000db38:	10016630 	.word	0x10016630

1000db3c <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000db3c:	4b01      	ldr	r3, [pc, #4]	; (1000db44 <register_ble_user_event_cb+0x8>)
1000db3e:	6018      	str	r0, [r3, #0]
}
1000db40:	4770      	bx	lr
1000db42:	46c0      	nop			; (mov r8, r8)
1000db44:	1001726c 	.word	0x1001726c

1000db48 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000db48:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000db4a:	4b0e      	ldr	r3, [pc, #56]	; (1000db84 <uart_read_complete_callback+0x3c>)
1000db4c:	781b      	ldrb	r3, [r3, #0]
1000db4e:	2b01      	cmp	r3, #1
1000db50:	d10b      	bne.n	1000db6a <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000db52:	2202      	movs	r2, #2
1000db54:	4b0b      	ldr	r3, [pc, #44]	; (1000db84 <uart_read_complete_callback+0x3c>)
1000db56:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000db58:	4b0b      	ldr	r3, [pc, #44]	; (1000db88 <uart_read_complete_callback+0x40>)
1000db5a:	681b      	ldr	r3, [r3, #0]
1000db5c:	2b00      	cmp	r3, #0
1000db5e:	d110      	bne.n	1000db82 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000db60:	2102      	movs	r1, #2
1000db62:	480a      	ldr	r0, [pc, #40]	; (1000db8c <uart_read_complete_callback+0x44>)
1000db64:	4b0a      	ldr	r3, [pc, #40]	; (1000db90 <uart_read_complete_callback+0x48>)
1000db66:	4798      	blx	r3
1000db68:	e00b      	b.n	1000db82 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000db6a:	4b07      	ldr	r3, [pc, #28]	; (1000db88 <uart_read_complete_callback+0x40>)
1000db6c:	681b      	ldr	r3, [r3, #0]
1000db6e:	2b00      	cmp	r3, #0
1000db70:	d007      	beq.n	1000db82 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000db72:	4c08      	ldr	r4, [pc, #32]	; (1000db94 <uart_read_complete_callback+0x4c>)
1000db74:	7820      	ldrb	r0, [r4, #0]
1000db76:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000db78:	2201      	movs	r2, #1
1000db7a:	0021      	movs	r1, r4
1000db7c:	4803      	ldr	r0, [pc, #12]	; (1000db8c <uart_read_complete_callback+0x44>)
1000db7e:	4b06      	ldr	r3, [pc, #24]	; (1000db98 <uart_read_complete_callback+0x50>)
1000db80:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000db82:	bd10      	pop	{r4, pc}
1000db84:	10018280 	.word	0x10018280
1000db88:	10018288 	.word	0x10018288
1000db8c:	10018f2c 	.word	0x10018f2c
1000db90:	1000c6e9 	.word	0x1000c6e9
1000db94:	10018284 	.word	0x10018284
1000db98:	1000c68d 	.word	0x1000c68d

1000db9c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000db9c:	b570      	push	{r4, r5, r6, lr}
1000db9e:	0006      	movs	r6, r0
1000dba0:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000dba2:	4c03      	ldr	r4, [pc, #12]	; (1000dbb0 <usart_serial_getchar+0x14>)
1000dba4:	0029      	movs	r1, r5
1000dba6:	0030      	movs	r0, r6
1000dba8:	47a0      	blx	r4
1000dbaa:	2800      	cmp	r0, #0
1000dbac:	d1fa      	bne.n	1000dba4 <usart_serial_getchar+0x8>
}
1000dbae:	bd70      	pop	{r4, r5, r6, pc}
1000dbb0:	1000c679 	.word	0x1000c679

1000dbb4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000dbb4:	b570      	push	{r4, r5, r6, lr}
1000dbb6:	0006      	movs	r6, r0
1000dbb8:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000dbba:	4c03      	ldr	r4, [pc, #12]	; (1000dbc8 <usart_serial_putchar+0x14>)
1000dbbc:	0029      	movs	r1, r5
1000dbbe:	0030      	movs	r0, r6
1000dbc0:	47a0      	blx	r4
1000dbc2:	2800      	cmp	r0, #0
1000dbc4:	d1fa      	bne.n	1000dbbc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000dbc6:	bd70      	pop	{r4, r5, r6, pc}
1000dbc8:	1000c669 	.word	0x1000c669

1000dbcc <serial_console_init>:

void serial_console_init(void)
{
1000dbcc:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000dbce:	2100      	movs	r1, #0
1000dbd0:	2000      	movs	r0, #0
1000dbd2:	4b19      	ldr	r3, [pc, #100]	; (1000dc38 <serial_console_init+0x6c>)
1000dbd4:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000dbd6:	4c19      	ldr	r4, [pc, #100]	; (1000dc3c <serial_console_init+0x70>)
1000dbd8:	0020      	movs	r0, r4
1000dbda:	4b19      	ldr	r3, [pc, #100]	; (1000dc40 <serial_console_init+0x74>)
1000dbdc:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000dbde:	23e1      	movs	r3, #225	; 0xe1
1000dbe0:	025b      	lsls	r3, r3, #9
1000dbe2:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000dbe4:	2302      	movs	r3, #2
1000dbe6:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000dbe8:	2203      	movs	r2, #3
1000dbea:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000dbec:	3201      	adds	r2, #1
1000dbee:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000dbf0:	3201      	adds	r2, #1
1000dbf2:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000dbf4:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000dbf6:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000dbf8:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000dbfa:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000dbfc:	4d11      	ldr	r5, [pc, #68]	; (1000dc44 <serial_console_init+0x78>)
1000dbfe:	4b12      	ldr	r3, [pc, #72]	; (1000dc48 <serial_console_init+0x7c>)
1000dc00:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000dc02:	4a12      	ldr	r2, [pc, #72]	; (1000dc4c <serial_console_init+0x80>)
1000dc04:	4b12      	ldr	r3, [pc, #72]	; (1000dc50 <serial_console_init+0x84>)
1000dc06:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000dc08:	4a12      	ldr	r2, [pc, #72]	; (1000dc54 <serial_console_init+0x88>)
1000dc0a:	4b13      	ldr	r3, [pc, #76]	; (1000dc58 <serial_console_init+0x8c>)
1000dc0c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000dc0e:	0022      	movs	r2, r4
1000dc10:	4912      	ldr	r1, [pc, #72]	; (1000dc5c <serial_console_init+0x90>)
1000dc12:	0028      	movs	r0, r5
1000dc14:	4b12      	ldr	r3, [pc, #72]	; (1000dc60 <serial_console_init+0x94>)
1000dc16:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000dc18:	4e12      	ldr	r6, [pc, #72]	; (1000dc64 <serial_console_init+0x98>)
1000dc1a:	6833      	ldr	r3, [r6, #0]
1000dc1c:	6898      	ldr	r0, [r3, #8]
1000dc1e:	2100      	movs	r1, #0
1000dc20:	4c11      	ldr	r4, [pc, #68]	; (1000dc68 <serial_console_init+0x9c>)
1000dc22:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000dc24:	6833      	ldr	r3, [r6, #0]
1000dc26:	6858      	ldr	r0, [r3, #4]
1000dc28:	2100      	movs	r1, #0
1000dc2a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000dc2c:	2202      	movs	r2, #2
1000dc2e:	490f      	ldr	r1, [pc, #60]	; (1000dc6c <serial_console_init+0xa0>)
1000dc30:	0028      	movs	r0, r5
1000dc32:	4b0f      	ldr	r3, [pc, #60]	; (1000dc70 <serial_console_init+0xa4>)
1000dc34:	4798      	blx	r3
}
1000dc36:	bd70      	pop	{r4, r5, r6, pc}
1000dc38:	1000b689 	.word	0x1000b689
1000dc3c:	10018f50 	.word	0x10018f50
1000dc40:	1000c481 	.word	0x1000c481
1000dc44:	10018f2c 	.word	0x10018f2c
1000dc48:	100186e8 	.word	0x100186e8
1000dc4c:	1000dbb5 	.word	0x1000dbb5
1000dc50:	100186e4 	.word	0x100186e4
1000dc54:	1000db9d 	.word	0x1000db9d
1000dc58:	100186e0 	.word	0x100186e0
1000dc5c:	40004000 	.word	0x40004000
1000dc60:	1000c4ad 	.word	0x1000c4ad
1000dc64:	1001694c 	.word	0x1001694c
1000dc68:	10013c11 	.word	0x10013c11
1000dc6c:	1000db49 	.word	0x1000db49
1000dc70:	1000c6b5 	.word	0x1000c6b5

1000dc74 <_time_start>:

void _time_start(unsigned int sec)
{
1000dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc76:	b083      	sub	sp, #12
1000dc78:	0005      	movs	r5, r0
	system_clock_get_value();
1000dc7a:	4c0d      	ldr	r4, [pc, #52]	; (1000dcb0 <_time_start+0x3c>)
1000dc7c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000dc7e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000dc80:	4f0c      	ldr	r7, [pc, #48]	; (1000dcb4 <_time_start+0x40>)
1000dc82:	47b8      	blx	r7
1000dc84:	4e0c      	ldr	r6, [pc, #48]	; (1000dcb8 <_time_start+0x44>)
1000dc86:	4a0d      	ldr	r2, [pc, #52]	; (1000dcbc <_time_start+0x48>)
1000dc88:	4b0d      	ldr	r3, [pc, #52]	; (1000dcc0 <_time_start+0x4c>)
1000dc8a:	47b0      	blx	r6
1000dc8c:	9000      	str	r0, [sp, #0]
1000dc8e:	9101      	str	r1, [sp, #4]
1000dc90:	20fa      	movs	r0, #250	; 0xfa
1000dc92:	0080      	lsls	r0, r0, #2
1000dc94:	4368      	muls	r0, r5
1000dc96:	47b8      	blx	r7
1000dc98:	0002      	movs	r2, r0
1000dc9a:	000b      	movs	r3, r1
1000dc9c:	9800      	ldr	r0, [sp, #0]
1000dc9e:	9901      	ldr	r1, [sp, #4]
1000dca0:	47b0      	blx	r6
1000dca2:	4b08      	ldr	r3, [pc, #32]	; (1000dcc4 <_time_start+0x50>)
1000dca4:	4798      	blx	r3
1000dca6:	4b08      	ldr	r3, [pc, #32]	; (1000dcc8 <_time_start+0x54>)
1000dca8:	6018      	str	r0, [r3, #0]
}
1000dcaa:	b003      	add	sp, #12
1000dcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcae:	46c0      	nop			; (mov r8, r8)
1000dcb0:	1000b70d 	.word	0x1000b70d
1000dcb4:	100137bd 	.word	0x100137bd
1000dcb8:	10012bb5 	.word	0x10012bb5
1000dcbc:	19feaec7 	.word	0x19feaec7
1000dcc0:	3f09d8ef 	.word	0x3f09d8ef
1000dcc4:	10011fd5 	.word	0x10011fd5
1000dcc8:	1001827c 	.word	0x1001827c

1000dccc <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000dccc:	4b02      	ldr	r3, [pc, #8]	; (1000dcd8 <_time_done+0xc>)
1000dcce:	681a      	ldr	r2, [r3, #0]
1000dcd0:	1e50      	subs	r0, r2, #1
1000dcd2:	6018      	str	r0, [r3, #0]
}
1000dcd4:	4770      	bx	lr
1000dcd6:	46c0      	nop			; (mov r8, r8)
1000dcd8:	1001827c 	.word	0x1001827c

1000dcdc <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000dcdc:	b570      	push	{r4, r5, r6, lr}
1000dcde:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000dce0:	2201      	movs	r2, #1
1000dce2:	4b11      	ldr	r3, [pc, #68]	; (1000dd28 <getchar_b11_timeout+0x4c>)
1000dce4:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000dce6:	4b11      	ldr	r3, [pc, #68]	; (1000dd2c <getchar_b11_timeout+0x50>)
1000dce8:	681b      	ldr	r3, [r3, #0]
1000dcea:	2b00      	cmp	r3, #0
1000dcec:	d103      	bne.n	1000dcf6 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000dcee:	2102      	movs	r1, #2
1000dcf0:	480f      	ldr	r0, [pc, #60]	; (1000dd30 <getchar_b11_timeout+0x54>)
1000dcf2:	4b10      	ldr	r3, [pc, #64]	; (1000dd34 <getchar_b11_timeout+0x58>)
1000dcf4:	4798      	blx	r3

	_time_start(sec);
1000dcf6:	0020      	movs	r0, r4
1000dcf8:	4b0f      	ldr	r3, [pc, #60]	; (1000dd38 <getchar_b11_timeout+0x5c>)
1000dcfa:	4798      	blx	r3
	
	string_input[0] = 0;
1000dcfc:	490f      	ldr	r1, [pc, #60]	; (1000dd3c <getchar_b11_timeout+0x60>)
1000dcfe:	2300      	movs	r3, #0
1000dd00:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000dd02:	2201      	movs	r2, #1
1000dd04:	480a      	ldr	r0, [pc, #40]	; (1000dd30 <getchar_b11_timeout+0x54>)
1000dd06:	4b0e      	ldr	r3, [pc, #56]	; (1000dd40 <getchar_b11_timeout+0x64>)
1000dd08:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000dd0a:	4c07      	ldr	r4, [pc, #28]	; (1000dd28 <getchar_b11_timeout+0x4c>)
1000dd0c:	4d0d      	ldr	r5, [pc, #52]	; (1000dd44 <getchar_b11_timeout+0x68>)
1000dd0e:	7823      	ldrb	r3, [r4, #0]
1000dd10:	2b02      	cmp	r3, #2
1000dd12:	d002      	beq.n	1000dd1a <getchar_b11_timeout+0x3e>
1000dd14:	47a8      	blx	r5
1000dd16:	2800      	cmp	r0, #0
1000dd18:	d1f9      	bne.n	1000dd0e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000dd1a:	2200      	movs	r2, #0
1000dd1c:	4b02      	ldr	r3, [pc, #8]	; (1000dd28 <getchar_b11_timeout+0x4c>)
1000dd1e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000dd20:	4b06      	ldr	r3, [pc, #24]	; (1000dd3c <getchar_b11_timeout+0x60>)
1000dd22:	7818      	ldrb	r0, [r3, #0]
}
1000dd24:	bd70      	pop	{r4, r5, r6, pc}
1000dd26:	46c0      	nop			; (mov r8, r8)
1000dd28:	10018280 	.word	0x10018280
1000dd2c:	10018288 	.word	0x10018288
1000dd30:	10018f2c 	.word	0x10018f2c
1000dd34:	1000c6c9 	.word	0x1000c6c9
1000dd38:	1000dc75 	.word	0x1000dc75
1000dd3c:	10018284 	.word	0x10018284
1000dd40:	1000c68d 	.word	0x1000c68d
1000dd44:	1000dccd 	.word	0x1000dccd

1000dd48 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000dd48:	4b02      	ldr	r3, [pc, #8]	; (1000dd54 <platform_event_free+0xc>)
1000dd4a:	681a      	ldr	r2, [r3, #0]
1000dd4c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000dd4e:	6018      	str	r0, [r3, #0]
}
1000dd50:	4770      	bx	lr
1000dd52:	46c0      	nop			; (mov r8, r8)
1000dd54:	10018290 	.word	0x10018290

1000dd58 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000dd58:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000dd5a:	4b0b      	ldr	r3, [pc, #44]	; (1000dd88 <platform_event_post+0x30>)
1000dd5c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000dd5e:	2c00      	cmp	r4, #0
1000dd60:	d011      	beq.n	1000dd86 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000dd62:	6825      	ldr	r5, [r4, #0]
1000dd64:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000dd66:	2300      	movs	r3, #0
1000dd68:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000dd6a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000dd6c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000dd6e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000dd70:	4b06      	ldr	r3, [pc, #24]	; (1000dd8c <platform_event_post+0x34>)
1000dd72:	681a      	ldr	r2, [r3, #0]
1000dd74:	2a00      	cmp	r2, #0
1000dd76:	d102      	bne.n	1000dd7e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000dd78:	601c      	str	r4, [r3, #0]
1000dd7a:	e004      	b.n	1000dd86 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000dd7c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000dd7e:	6813      	ldr	r3, [r2, #0]
1000dd80:	2b00      	cmp	r3, #0
1000dd82:	d1fb      	bne.n	1000dd7c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000dd84:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000dd86:	bd30      	pop	{r4, r5, pc}
1000dd88:	10018290 	.word	0x10018290
1000dd8c:	1001828c 	.word	0x1001828c

1000dd90 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000dd90:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000dd92:	2300      	movs	r3, #0
1000dd94:	4a06      	ldr	r2, [pc, #24]	; (1000ddb0 <platform_event_init+0x20>)
1000dd96:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000dd98:	4a06      	ldr	r2, [pc, #24]	; (1000ddb4 <platform_event_init+0x24>)
1000dd9a:	6013      	str	r3, [r2, #0]
1000dd9c:	4c06      	ldr	r4, [pc, #24]	; (1000ddb8 <platform_event_init+0x28>)
1000dd9e:	0026      	movs	r6, r4
1000dda0:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000dda2:	4d06      	ldr	r5, [pc, #24]	; (1000ddbc <platform_event_init+0x2c>)
1000dda4:	0020      	movs	r0, r4
1000dda6:	47a8      	blx	r5
1000dda8:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ddaa:	42b4      	cmp	r4, r6
1000ddac:	d1fa      	bne.n	1000dda4 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ddae:	bd70      	pop	{r4, r5, r6, pc}
1000ddb0:	10018290 	.word	0x10018290
1000ddb4:	1001828c 	.word	0x1001828c
1000ddb8:	10018294 	.word	0x10018294
1000ddbc:	1000dd49 	.word	0x1000dd49

1000ddc0 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ddc0:	b570      	push	{r4, r5, r6, lr}
1000ddc2:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ddc4:	4b13      	ldr	r3, [pc, #76]	; (1000de14 <at_ke_msg_send+0x54>)
1000ddc6:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ddc8:	4b13      	ldr	r3, [pc, #76]	; (1000de18 <at_ke_msg_send+0x58>)
1000ddca:	681b      	ldr	r3, [r3, #0]
1000ddcc:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ddce:	2c0c      	cmp	r4, #12
1000ddd0:	d01f      	beq.n	1000de12 <at_ke_msg_send+0x52>
1000ddd2:	3c0c      	subs	r4, #12
1000ddd4:	88e3      	ldrh	r3, [r4, #6]
1000ddd6:	2b05      	cmp	r3, #5
1000ddd8:	d01b      	beq.n	1000de12 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ddda:	07eb      	lsls	r3, r5, #31
1000dddc:	d414      	bmi.n	1000de08 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ddde:	4b0f      	ldr	r3, [pc, #60]	; (1000de1c <at_ke_msg_send+0x5c>)
1000dde0:	681b      	ldr	r3, [r3, #0]
1000dde2:	2002      	movs	r0, #2
1000dde4:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000dde6:	4b0e      	ldr	r3, [pc, #56]	; (1000de20 <at_ke_msg_send+0x60>)
1000dde8:	681b      	ldr	r3, [r3, #0]
1000ddea:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ddec:	4c0d      	ldr	r4, [pc, #52]	; (1000de24 <at_ke_msg_send+0x64>)
1000ddee:	2003      	movs	r0, #3
1000ddf0:	6823      	ldr	r3, [r4, #0]
1000ddf2:	4798      	blx	r3
1000ddf4:	2800      	cmp	r0, #0
1000ddf6:	d1fa      	bne.n	1000ddee <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ddf8:	4b0b      	ldr	r3, [pc, #44]	; (1000de28 <at_ke_msg_send+0x68>)
1000ddfa:	681b      	ldr	r3, [r3, #0]
1000ddfc:	3002      	adds	r0, #2
1000ddfe:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000de00:	2201      	movs	r2, #1
1000de02:	4b0a      	ldr	r3, [pc, #40]	; (1000de2c <at_ke_msg_send+0x6c>)
1000de04:	601a      	str	r2, [r3, #0]
1000de06:	e004      	b.n	1000de12 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000de08:	4b09      	ldr	r3, [pc, #36]	; (1000de30 <at_ke_msg_send+0x70>)
1000de0a:	6818      	ldr	r0, [r3, #0]
1000de0c:	4b09      	ldr	r3, [pc, #36]	; (1000de34 <at_ke_msg_send+0x74>)
1000de0e:	681b      	ldr	r3, [r3, #0]
1000de10:	4798      	blx	r3
		}
	}
}
1000de12:	bd70      	pop	{r4, r5, r6, pc}
1000de14:	4000b1ec 	.word	0x4000b1ec
1000de18:	1001833c 	.word	0x1001833c
1000de1c:	10018334 	.word	0x10018334
1000de20:	10018348 	.word	0x10018348
1000de24:	1001831c 	.word	0x1001831c
1000de28:	10018324 	.word	0x10018324
1000de2c:	4000b020 	.word	0x4000b020
1000de30:	10018328 	.word	0x10018328
1000de34:	10018318 	.word	0x10018318

1000de38 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000de38:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000de3a:	4b06      	ldr	r3, [pc, #24]	; (1000de54 <samb11_plf_resume_callback+0x1c>)
1000de3c:	4a06      	ldr	r2, [pc, #24]	; (1000de58 <samb11_plf_resume_callback+0x20>)
1000de3e:	6819      	ldr	r1, [r3, #0]
1000de40:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000de42:	685a      	ldr	r2, [r3, #4]
1000de44:	4b05      	ldr	r3, [pc, #20]	; (1000de5c <samb11_plf_resume_callback+0x24>)
1000de46:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000de48:	4b05      	ldr	r3, [pc, #20]	; (1000de60 <samb11_plf_resume_callback+0x28>)
1000de4a:	681b      	ldr	r3, [r3, #0]
1000de4c:	2b00      	cmp	r3, #0
1000de4e:	d000      	beq.n	1000de52 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000de50:	4798      	blx	r3
	}
}
1000de52:	bd10      	pop	{r4, pc}
1000de54:	10018f78 	.word	0x10018f78
1000de58:	4000b00c 	.word	0x4000b00c
1000de5c:	4000b010 	.word	0x4000b010
1000de60:	10019254 	.word	0x10019254

1000de64 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000de64:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000de66:	2232      	movs	r2, #50	; 0x32
1000de68:	2100      	movs	r1, #0
1000de6a:	480d      	ldr	r0, [pc, #52]	; (1000dea0 <init_port_list+0x3c>)
1000de6c:	4b0d      	ldr	r3, [pc, #52]	; (1000dea4 <init_port_list+0x40>)
1000de6e:	4798      	blx	r3
1000de70:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000de72:	480b      	ldr	r0, [pc, #44]	; (1000dea0 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000de74:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000de76:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000de78:	004a      	lsls	r2, r1, #1
1000de7a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000de7c:	1882      	adds	r2, r0, r2
1000de7e:	7853      	ldrb	r3, [r2, #1]
1000de80:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000de82:	b2db      	uxtb	r3, r3
1000de84:	43a3      	bics	r3, r4
1000de86:	7053      	strb	r3, [r2, #1]
1000de88:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000de8a:	2919      	cmp	r1, #25
1000de8c:	d1f4      	bne.n	1000de78 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000de8e:	4b04      	ldr	r3, [pc, #16]	; (1000dea0 <init_port_list+0x3c>)
1000de90:	785a      	ldrb	r2, [r3, #1]
1000de92:	3918      	subs	r1, #24
1000de94:	438a      	bics	r2, r1
1000de96:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000de98:	78da      	ldrb	r2, [r3, #3]
1000de9a:	438a      	bics	r2, r1
1000de9c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000de9e:	bd70      	pop	{r4, r5, r6, pc}
1000dea0:	10018f94 	.word	0x10018f94
1000dea4:	100138f9 	.word	0x100138f9

1000dea8 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000dea8:	4a06      	ldr	r2, [pc, #24]	; (1000dec4 <init_clock+0x1c>)
1000deaa:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000deac:	4b06      	ldr	r3, [pc, #24]	; (1000dec8 <init_clock+0x20>)
1000deae:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000deb0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000deb2:	4a06      	ldr	r2, [pc, #24]	; (1000decc <init_clock+0x24>)
1000deb4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000deb6:	4906      	ldr	r1, [pc, #24]	; (1000ded0 <init_clock+0x28>)
1000deb8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000deba:	4b06      	ldr	r3, [pc, #24]	; (1000ded4 <init_clock+0x2c>)
1000debc:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000debe:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000dec0:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000dec2:	4770      	bx	lr
1000dec4:	4000b00c 	.word	0x4000b00c
1000dec8:	fffe0fd3 	.word	0xfffe0fd3
1000decc:	10018f78 	.word	0x10018f78
1000ded0:	4000b010 	.word	0x4000b010
1000ded4:	ffffe7c0 	.word	0xffffe7c0

1000ded8 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000ded8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000deda:	4657      	mov	r7, sl
1000dedc:	464e      	mov	r6, r9
1000dede:	4645      	mov	r5, r8
1000dee0:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000dee2:	4b4f      	ldr	r3, [pc, #316]	; (1000e020 <platform_driver_init+0x148>)
1000dee4:	781b      	ldrb	r3, [r3, #0]
1000dee6:	2b00      	cmp	r3, #0
1000dee8:	d004      	beq.n	1000def4 <platform_driver_init+0x1c>
1000deea:	4b4d      	ldr	r3, [pc, #308]	; (1000e020 <platform_driver_init+0x148>)
1000deec:	781b      	ldrb	r3, [r3, #0]
1000deee:	2b01      	cmp	r3, #1
1000def0:	d100      	bne.n	1000def4 <platform_driver_init+0x1c>
1000def2:	e08c      	b.n	1000e00e <platform_driver_init+0x136>
		init_port_list();
1000def4:	4b4b      	ldr	r3, [pc, #300]	; (1000e024 <platform_driver_init+0x14c>)
1000def6:	4798      	blx	r3
		init_clock();
1000def8:	4b4b      	ldr	r3, [pc, #300]	; (1000e028 <platform_driver_init+0x150>)
1000defa:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000defc:	2300      	movs	r3, #0
1000defe:	4698      	mov	r8, r3
1000df00:	4b4a      	ldr	r3, [pc, #296]	; (1000e02c <platform_driver_init+0x154>)
1000df02:	4642      	mov	r2, r8
1000df04:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000df06:	4c4a      	ldr	r4, [pc, #296]	; (1000e030 <platform_driver_init+0x158>)
1000df08:	2380      	movs	r3, #128	; 0x80
1000df0a:	2280      	movs	r2, #128	; 0x80
1000df0c:	0412      	lsls	r2, r2, #16
1000df0e:	4692      	mov	sl, r2
1000df10:	50e2      	str	r2, [r4, r3]
1000df12:	2280      	movs	r2, #128	; 0x80
1000df14:	0452      	lsls	r2, r2, #17
1000df16:	4691      	mov	r9, r2
1000df18:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000df1a:	4d46      	ldr	r5, [pc, #280]	; (1000e034 <platform_driver_init+0x15c>)
1000df1c:	4b46      	ldr	r3, [pc, #280]	; (1000e038 <platform_driver_init+0x160>)
1000df1e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000df20:	4b46      	ldr	r3, [pc, #280]	; (1000e03c <platform_driver_init+0x164>)
1000df22:	4a47      	ldr	r2, [pc, #284]	; (1000e040 <platform_driver_init+0x168>)
1000df24:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000df26:	4947      	ldr	r1, [pc, #284]	; (1000e044 <platform_driver_init+0x16c>)
1000df28:	4a47      	ldr	r2, [pc, #284]	; (1000e048 <platform_driver_init+0x170>)
1000df2a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000df2c:	4a47      	ldr	r2, [pc, #284]	; (1000e04c <platform_driver_init+0x174>)
1000df2e:	6811      	ldr	r1, [r2, #0]
1000df30:	4a47      	ldr	r2, [pc, #284]	; (1000e050 <platform_driver_init+0x178>)
1000df32:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000df34:	4a47      	ldr	r2, [pc, #284]	; (1000e054 <platform_driver_init+0x17c>)
1000df36:	6811      	ldr	r1, [r2, #0]
1000df38:	4a47      	ldr	r2, [pc, #284]	; (1000e058 <platform_driver_init+0x180>)
1000df3a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000df3c:	4947      	ldr	r1, [pc, #284]	; (1000e05c <platform_driver_init+0x184>)
1000df3e:	4a48      	ldr	r2, [pc, #288]	; (1000e060 <platform_driver_init+0x188>)
1000df40:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000df42:	4948      	ldr	r1, [pc, #288]	; (1000e064 <platform_driver_init+0x18c>)
1000df44:	4a48      	ldr	r2, [pc, #288]	; (1000e068 <platform_driver_init+0x190>)
1000df46:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000df48:	4f48      	ldr	r7, [pc, #288]	; (1000e06c <platform_driver_init+0x194>)
1000df4a:	4a49      	ldr	r2, [pc, #292]	; (1000e070 <platform_driver_init+0x198>)
1000df4c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000df4e:	4949      	ldr	r1, [pc, #292]	; (1000e074 <platform_driver_init+0x19c>)
1000df50:	4a49      	ldr	r2, [pc, #292]	; (1000e078 <platform_driver_init+0x1a0>)
1000df52:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000df54:	4949      	ldr	r1, [pc, #292]	; (1000e07c <platform_driver_init+0x1a4>)
1000df56:	4a4a      	ldr	r2, [pc, #296]	; (1000e080 <platform_driver_init+0x1a8>)
1000df58:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000df5a:	4e4a      	ldr	r6, [pc, #296]	; (1000e084 <platform_driver_init+0x1ac>)
1000df5c:	4a4a      	ldr	r2, [pc, #296]	; (1000e088 <platform_driver_init+0x1b0>)
1000df5e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000df60:	494a      	ldr	r1, [pc, #296]	; (1000e08c <platform_driver_init+0x1b4>)
1000df62:	4a4b      	ldr	r2, [pc, #300]	; (1000e090 <platform_driver_init+0x1b8>)
1000df64:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000df66:	494b      	ldr	r1, [pc, #300]	; (1000e094 <platform_driver_init+0x1bc>)
1000df68:	4a4b      	ldr	r2, [pc, #300]	; (1000e098 <platform_driver_init+0x1c0>)
1000df6a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000df6c:	494b      	ldr	r1, [pc, #300]	; (1000e09c <platform_driver_init+0x1c4>)
1000df6e:	4a4c      	ldr	r2, [pc, #304]	; (1000e0a0 <platform_driver_init+0x1c8>)
1000df70:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000df72:	494c      	ldr	r1, [pc, #304]	; (1000e0a4 <platform_driver_init+0x1cc>)
1000df74:	4a4c      	ldr	r2, [pc, #304]	; (1000e0a8 <platform_driver_init+0x1d0>)
1000df76:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000df78:	494c      	ldr	r1, [pc, #304]	; (1000e0ac <platform_driver_init+0x1d4>)
1000df7a:	4a4d      	ldr	r2, [pc, #308]	; (1000e0b0 <platform_driver_init+0x1d8>)
1000df7c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000df7e:	2028      	movs	r0, #40	; 0x28
1000df80:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000df82:	494c      	ldr	r1, [pc, #304]	; (1000e0b4 <platform_driver_init+0x1dc>)
1000df84:	2028      	movs	r0, #40	; 0x28
1000df86:	682b      	ldr	r3, [r5, #0]
1000df88:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000df8a:	682b      	ldr	r3, [r5, #0]
1000df8c:	494a      	ldr	r1, [pc, #296]	; (1000e0b8 <platform_driver_init+0x1e0>)
1000df8e:	2027      	movs	r0, #39	; 0x27
1000df90:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000df92:	4b4a      	ldr	r3, [pc, #296]	; (1000e0bc <platform_driver_init+0x1e4>)
1000df94:	681a      	ldr	r2, [r3, #0]
1000df96:	4b4a      	ldr	r3, [pc, #296]	; (1000e0c0 <platform_driver_init+0x1e8>)
1000df98:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000df9a:	4a4a      	ldr	r2, [pc, #296]	; (1000e0c4 <platform_driver_init+0x1ec>)
1000df9c:	4b4a      	ldr	r3, [pc, #296]	; (1000e0c8 <platform_driver_init+0x1f0>)
1000df9e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000dfa0:	4a4a      	ldr	r2, [pc, #296]	; (1000e0cc <platform_driver_init+0x1f4>)
1000dfa2:	4b4b      	ldr	r3, [pc, #300]	; (1000e0d0 <platform_driver_init+0x1f8>)
1000dfa4:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000dfa6:	4a4b      	ldr	r2, [pc, #300]	; (1000e0d4 <platform_driver_init+0x1fc>)
1000dfa8:	4b4b      	ldr	r3, [pc, #300]	; (1000e0d8 <platform_driver_init+0x200>)
1000dfaa:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000dfac:	4a4b      	ldr	r2, [pc, #300]	; (1000e0dc <platform_driver_init+0x204>)
1000dfae:	4b4c      	ldr	r3, [pc, #304]	; (1000e0e0 <platform_driver_init+0x208>)
1000dfb0:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000dfb2:	4a4c      	ldr	r2, [pc, #304]	; (1000e0e4 <platform_driver_init+0x20c>)
1000dfb4:	4b4c      	ldr	r3, [pc, #304]	; (1000e0e8 <platform_driver_init+0x210>)
1000dfb6:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000dfb8:	4a4c      	ldr	r2, [pc, #304]	; (1000e0ec <platform_driver_init+0x214>)
1000dfba:	4b4d      	ldr	r3, [pc, #308]	; (1000e0f0 <platform_driver_init+0x218>)
1000dfbc:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000dfbe:	4a4d      	ldr	r2, [pc, #308]	; (1000e0f4 <platform_driver_init+0x21c>)
1000dfc0:	4b4d      	ldr	r3, [pc, #308]	; (1000e0f8 <platform_driver_init+0x220>)
1000dfc2:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000dfc4:	22a0      	movs	r2, #160	; 0xa0
1000dfc6:	0092      	lsls	r2, r2, #2
1000dfc8:	2100      	movs	r1, #0
1000dfca:	484c      	ldr	r0, [pc, #304]	; (1000e0fc <platform_driver_init+0x224>)
1000dfcc:	4b4c      	ldr	r3, [pc, #304]	; (1000e100 <platform_driver_init+0x228>)
1000dfce:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dfd0:	2280      	movs	r2, #128	; 0x80
1000dfd2:	0092      	lsls	r2, r2, #2
1000dfd4:	4b4b      	ldr	r3, [pc, #300]	; (1000e104 <platform_driver_init+0x22c>)
1000dfd6:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000dfd8:	4b4b      	ldr	r3, [pc, #300]	; (1000e108 <platform_driver_init+0x230>)
1000dfda:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000dfdc:	4653      	mov	r3, sl
1000dfde:	6023      	str	r3, [r4, #0]
1000dfe0:	464b      	mov	r3, r9
1000dfe2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000dfe4:	4b49      	ldr	r3, [pc, #292]	; (1000e10c <platform_driver_init+0x234>)
1000dfe6:	4642      	mov	r2, r8
1000dfe8:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000dfea:	683b      	ldr	r3, [r7, #0]
1000dfec:	4a48      	ldr	r2, [pc, #288]	; (1000e110 <platform_driver_init+0x238>)
1000dfee:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000dff0:	6833      	ldr	r3, [r6, #0]
1000dff2:	4a48      	ldr	r2, [pc, #288]	; (1000e114 <platform_driver_init+0x23c>)
1000dff4:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000dff6:	2000      	movs	r0, #0
1000dff8:	4c47      	ldr	r4, [pc, #284]	; (1000e118 <platform_driver_init+0x240>)
1000dffa:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000dffc:	2001      	movs	r0, #1
1000dffe:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e000:	2002      	movs	r0, #2
1000e002:	47a0      	blx	r4
		platform_initialized = 1;
1000e004:	2201      	movs	r2, #1
1000e006:	4b06      	ldr	r3, [pc, #24]	; (1000e020 <platform_driver_init+0x148>)
1000e008:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e00a:	2000      	movs	r0, #0
1000e00c:	e003      	b.n	1000e016 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e00e:	2201      	movs	r2, #1
1000e010:	4b03      	ldr	r3, [pc, #12]	; (1000e020 <platform_driver_init+0x148>)
1000e012:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e014:	2001      	movs	r0, #1
	}
	return status;
}
1000e016:	bc1c      	pop	{r2, r3, r4}
1000e018:	4690      	mov	r8, r2
1000e01a:	4699      	mov	r9, r3
1000e01c:	46a2      	mov	sl, r4
1000e01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e020:	10018320 	.word	0x10018320
1000e024:	1000de65 	.word	0x1000de65
1000e028:	1000dea9 	.word	0x1000dea9
1000e02c:	10018340 	.word	0x10018340
1000e030:	e000e100 	.word	0xe000e100
1000e034:	10019248 	.word	0x10019248
1000e038:	000007d7 	.word	0x000007d7
1000e03c:	000007bd 	.word	0x000007bd
1000e040:	10018f84 	.word	0x10018f84
1000e044:	0001bc51 	.word	0x0001bc51
1000e048:	1001924c 	.word	0x1001924c
1000e04c:	100400bc 	.word	0x100400bc
1000e050:	10018314 	.word	0x10018314
1000e054:	100400b8 	.word	0x100400b8
1000e058:	10018310 	.word	0x10018310
1000e05c:	0001b99f 	.word	0x0001b99f
1000e060:	10018f80 	.word	0x10018f80
1000e064:	0001b9db 	.word	0x0001b9db
1000e068:	10018f8c 	.word	0x10018f8c
1000e06c:	1001925c 	.word	0x1001925c
1000e070:	1004003c 	.word	0x1004003c
1000e074:	10041fc0 	.word	0x10041fc0
1000e078:	10018f90 	.word	0x10018f90
1000e07c:	10041fc4 	.word	0x10041fc4
1000e080:	10019258 	.word	0x10019258
1000e084:	10019250 	.word	0x10019250
1000e088:	10041fd4 	.word	0x10041fd4
1000e08c:	10041fd8 	.word	0x10041fd8
1000e090:	10018f88 	.word	0x10018f88
1000e094:	0001cbe9 	.word	0x0001cbe9
1000e098:	10018334 	.word	0x10018334
1000e09c:	0001cd8f 	.word	0x0001cd8f
1000e0a0:	10018324 	.word	0x10018324
1000e0a4:	0001cea3 	.word	0x0001cea3
1000e0a8:	10018348 	.word	0x10018348
1000e0ac:	0001cbcf 	.word	0x0001cbcf
1000e0b0:	1001831c 	.word	0x1001831c
1000e0b4:	1000e561 	.word	0x1000e561
1000e0b8:	1000e4f5 	.word	0x1000e4f5
1000e0bc:	100400e4 	.word	0x100400e4
1000e0c0:	1001833c 	.word	0x1001833c
1000e0c4:	00019fe9 	.word	0x00019fe9
1000e0c8:	1001834c 	.word	0x1001834c
1000e0cc:	0001dbdd 	.word	0x0001dbdd
1000e0d0:	10018318 	.word	0x10018318
1000e0d4:	0001dc5b 	.word	0x0001dc5b
1000e0d8:	1001832c 	.word	0x1001832c
1000e0dc:	100405ec 	.word	0x100405ec
1000e0e0:	10018328 	.word	0x10018328
1000e0e4:	0001d5e3 	.word	0x0001d5e3
1000e0e8:	10018338 	.word	0x10018338
1000e0ec:	10040c20 	.word	0x10040c20
1000e0f0:	10018350 	.word	0x10018350
1000e0f4:	00019f09 	.word	0x00019f09
1000e0f8:	1001830c 	.word	0x1001830c
1000e0fc:	10018fc8 	.word	0x10018fc8
1000e100:	100138f9 	.word	0x100138f9
1000e104:	10019260 	.word	0x10019260
1000e108:	1000dd91 	.word	0x1000dd91
1000e10c:	10019254 	.word	0x10019254
1000e110:	1000de39 	.word	0x1000de39
1000e114:	1000e5bd 	.word	0x1000e5bd
1000e118:	1000e5a5 	.word	0x1000e5a5

1000e11c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e11c:	4b04      	ldr	r3, [pc, #16]	; (1000e130 <platform_register_ble_msg_handler+0x14>)
1000e11e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e120:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e122:	2a01      	cmp	r2, #1
1000e124:	d102      	bne.n	1000e12c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e126:	4b03      	ldr	r3, [pc, #12]	; (1000e134 <platform_register_ble_msg_handler+0x18>)
1000e128:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e12a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e12c:	0018      	movs	r0, r3
1000e12e:	4770      	bx	lr
1000e130:	10018320 	.word	0x10018320
1000e134:	10018340 	.word	0x10018340

1000e138 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e138:	b570      	push	{r4, r5, r6, lr}
1000e13a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e13c:	4b0e      	ldr	r3, [pc, #56]	; (1000e178 <platform_interface_send+0x40>)
1000e13e:	681b      	ldr	r3, [r3, #0]
1000e140:	2b00      	cmp	r3, #0
1000e142:	d002      	beq.n	1000e14a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e144:	8840      	ldrh	r0, [r0, #2]
1000e146:	4798      	blx	r3
1000e148:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e14a:	88e3      	ldrh	r3, [r4, #6]
1000e14c:	88a2      	ldrh	r2, [r4, #4]
1000e14e:	8861      	ldrh	r1, [r4, #2]
1000e150:	8820      	ldrh	r0, [r4, #0]
1000e152:	4d0a      	ldr	r5, [pc, #40]	; (1000e17c <platform_interface_send+0x44>)
1000e154:	682d      	ldr	r5, [r5, #0]
1000e156:	47a8      	blx	r5
1000e158:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e15a:	88e2      	ldrh	r2, [r4, #6]
1000e15c:	2a00      	cmp	r2, #0
1000e15e:	d102      	bne.n	1000e166 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e160:	4b07      	ldr	r3, [pc, #28]	; (1000e180 <platform_interface_send+0x48>)
1000e162:	4798      	blx	r3
1000e164:	e006      	b.n	1000e174 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e166:	0021      	movs	r1, r4
1000e168:	3108      	adds	r1, #8
1000e16a:	4b06      	ldr	r3, [pc, #24]	; (1000e184 <platform_interface_send+0x4c>)
1000e16c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e16e:	0028      	movs	r0, r5
1000e170:	4b03      	ldr	r3, [pc, #12]	; (1000e180 <platform_interface_send+0x48>)
1000e172:	4798      	blx	r3
	}
}
1000e174:	bd70      	pop	{r4, r5, r6, pc}
1000e176:	46c0      	nop			; (mov r8, r8)
1000e178:	10018314 	.word	0x10018314
1000e17c:	1001834c 	.word	0x1001834c
1000e180:	1000ddc1 	.word	0x1000ddc1
1000e184:	100138e7 	.word	0x100138e7

1000e188 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e188:	b570      	push	{r4, r5, r6, lr}
1000e18a:	0015      	movs	r5, r2
1000e18c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e18e:	020a      	lsls	r2, r1, #8
1000e190:	4302      	orrs	r2, r0
1000e192:	4b0a      	ldr	r3, [pc, #40]	; (1000e1bc <send_plf_int_msg_ind+0x34>)
1000e194:	681e      	ldr	r6, [r3, #0]
1000e196:	0023      	movs	r3, r4
1000e198:	2105      	movs	r1, #5
1000e19a:	20a0      	movs	r0, #160	; 0xa0
1000e19c:	00c0      	lsls	r0, r0, #3
1000e19e:	47b0      	blx	r6
1000e1a0:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e1a2:	d00a      	beq.n	1000e1ba <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e1a4:	2c00      	cmp	r4, #0
1000e1a6:	d005      	beq.n	1000e1b4 <send_plf_int_msg_ind+0x2c>
1000e1a8:	2d00      	cmp	r5, #0
1000e1aa:	d003      	beq.n	1000e1b4 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e1ac:	0022      	movs	r2, r4
1000e1ae:	0029      	movs	r1, r5
1000e1b0:	4b03      	ldr	r3, [pc, #12]	; (1000e1c0 <send_plf_int_msg_ind+0x38>)
1000e1b2:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e1b4:	0030      	movs	r0, r6
1000e1b6:	4b03      	ldr	r3, [pc, #12]	; (1000e1c4 <send_plf_int_msg_ind+0x3c>)
1000e1b8:	4798      	blx	r3
	}
}
1000e1ba:	bd70      	pop	{r4, r5, r6, pc}
1000e1bc:	1001834c 	.word	0x1001834c
1000e1c0:	100138e7 	.word	0x100138e7
1000e1c4:	1000ddc1 	.word	0x1000ddc1

1000e1c8 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1ca:	465f      	mov	r7, fp
1000e1cc:	4656      	mov	r6, sl
1000e1ce:	464d      	mov	r5, r9
1000e1d0:	4644      	mov	r4, r8
1000e1d2:	b4f0      	push	{r4, r5, r6, r7}
1000e1d4:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e1d6:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e1d8:	2300      	movs	r3, #0
1000e1da:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e1dc:	1ce3      	adds	r3, r4, #3
1000e1de:	d81c      	bhi.n	1000e21a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e1e0:	220d      	movs	r2, #13
1000e1e2:	2100      	movs	r1, #0
1000e1e4:	a802      	add	r0, sp, #8
1000e1e6:	4b82      	ldr	r3, [pc, #520]	; (1000e3f0 <platform_event_wait+0x228>)
1000e1e8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e1ea:	2333      	movs	r3, #51	; 0x33
1000e1ec:	aa02      	add	r2, sp, #8
1000e1ee:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e1f0:	3b30      	subs	r3, #48	; 0x30
1000e1f2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e1f4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e1f6:	3302      	adds	r3, #2
1000e1f8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e1fa:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e1fc:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e1fe:	0a23      	lsrs	r3, r4, #8
1000e200:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e202:	0c23      	lsrs	r3, r4, #16
1000e204:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e206:	0e24      	lsrs	r4, r4, #24
1000e208:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e20a:	2301      	movs	r3, #1
1000e20c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e20e:	210d      	movs	r1, #13
1000e210:	0010      	movs	r0, r2
1000e212:	4b78      	ldr	r3, [pc, #480]	; (1000e3f4 <platform_event_wait+0x22c>)
1000e214:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e216:	2301      	movs	r3, #1
1000e218:	4699      	mov	r9, r3
1000e21a:	2400      	movs	r4, #0
1000e21c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e21e:	4f76      	ldr	r7, [pc, #472]	; (1000e3f8 <platform_event_wait+0x230>)
1000e220:	4e76      	ldr	r6, [pc, #472]	; (1000e3fc <platform_event_wait+0x234>)
1000e222:	4977      	ldr	r1, [pc, #476]	; (1000e400 <platform_event_wait+0x238>)
1000e224:	6838      	ldr	r0, [r7, #0]
1000e226:	6833      	ldr	r3, [r6, #0]
1000e228:	4798      	blx	r3
1000e22a:	2800      	cmp	r0, #0
1000e22c:	d000      	beq.n	1000e230 <platform_event_wait+0x68>
1000e22e:	e088      	b.n	1000e342 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e230:	4b73      	ldr	r3, [pc, #460]	; (1000e400 <platform_event_wait+0x238>)
1000e232:	681c      	ldr	r4, [r3, #0]
1000e234:	88a3      	ldrh	r3, [r4, #4]
1000e236:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e238:	23cd      	movs	r3, #205	; 0xcd
1000e23a:	009b      	lsls	r3, r3, #2
1000e23c:	459a      	cmp	sl, r3
1000e23e:	d100      	bne.n	1000e242 <platform_event_wait+0x7a>
1000e240:	e0c7      	b.n	1000e3d2 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e242:	8923      	ldrh	r3, [r4, #8]
1000e244:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e246:	8963      	ldrh	r3, [r4, #10]
1000e248:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e24a:	464b      	mov	r3, r9
1000e24c:	2b00      	cmp	r3, #0
1000e24e:	d011      	beq.n	1000e274 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e250:	220d      	movs	r2, #13
1000e252:	2100      	movs	r1, #0
1000e254:	a802      	add	r0, sp, #8
1000e256:	4b66      	ldr	r3, [pc, #408]	; (1000e3f0 <platform_event_wait+0x228>)
1000e258:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e25a:	2333      	movs	r3, #51	; 0x33
1000e25c:	aa02      	add	r2, sp, #8
1000e25e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e260:	3b30      	subs	r3, #48	; 0x30
1000e262:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e264:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e266:	3302      	adds	r3, #2
1000e268:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e26a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e26c:	210d      	movs	r1, #13
1000e26e:	0010      	movs	r0, r2
1000e270:	4b60      	ldr	r3, [pc, #384]	; (1000e3f4 <platform_event_wait+0x22c>)
1000e272:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e274:	23a0      	movs	r3, #160	; 0xa0
1000e276:	00db      	lsls	r3, r3, #3
1000e278:	459a      	cmp	sl, r3
1000e27a:	d121      	bne.n	1000e2c0 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e27c:	4b61      	ldr	r3, [pc, #388]	; (1000e404 <platform_event_wait+0x23c>)
1000e27e:	881b      	ldrh	r3, [r3, #0]
1000e280:	4443      	add	r3, r8
1000e282:	22a0      	movs	r2, #160	; 0xa0
1000e284:	0092      	lsls	r2, r2, #2
1000e286:	4293      	cmp	r3, r2
1000e288:	dd02      	ble.n	1000e290 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e28a:	3a80      	subs	r2, #128	; 0x80
1000e28c:	4b5d      	ldr	r3, [pc, #372]	; (1000e404 <platform_event_wait+0x23c>)
1000e28e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e290:	4b5c      	ldr	r3, [pc, #368]	; (1000e404 <platform_event_wait+0x23c>)
1000e292:	469a      	mov	sl, r3
1000e294:	881d      	ldrh	r5, [r3, #0]
1000e296:	4b5c      	ldr	r3, [pc, #368]	; (1000e408 <platform_event_wait+0x240>)
1000e298:	18ed      	adds	r5, r5, r3
1000e29a:	0021      	movs	r1, r4
1000e29c:	310c      	adds	r1, #12
1000e29e:	4642      	mov	r2, r8
1000e2a0:	0028      	movs	r0, r5
1000e2a2:	4b5a      	ldr	r3, [pc, #360]	; (1000e40c <platform_event_wait+0x244>)
1000e2a4:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e2a6:	4642      	mov	r2, r8
1000e2a8:	0029      	movs	r1, r5
1000e2aa:	4658      	mov	r0, fp
1000e2ac:	4b58      	ldr	r3, [pc, #352]	; (1000e410 <platform_event_wait+0x248>)
1000e2ae:	4798      	blx	r3
				plf_event_buff_index += len;
1000e2b0:	4653      	mov	r3, sl
1000e2b2:	881b      	ldrh	r3, [r3, #0]
1000e2b4:	4443      	add	r3, r8
1000e2b6:	4652      	mov	r2, sl
1000e2b8:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e2ba:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e2bc:	2502      	movs	r5, #2
1000e2be:	e03a      	b.n	1000e336 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e2c0:	4b54      	ldr	r3, [pc, #336]	; (1000e414 <platform_event_wait+0x24c>)
1000e2c2:	681b      	ldr	r3, [r3, #0]
1000e2c4:	2b00      	cmp	r3, #0
1000e2c6:	d032      	beq.n	1000e32e <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e2c8:	4b4d      	ldr	r3, [pc, #308]	; (1000e400 <platform_event_wait+0x238>)
1000e2ca:	681a      	ldr	r2, [r3, #0]
1000e2cc:	8893      	ldrh	r3, [r2, #4]
1000e2ce:	21cd      	movs	r1, #205	; 0xcd
1000e2d0:	0089      	lsls	r1, r1, #2
1000e2d2:	428b      	cmp	r3, r1
1000e2d4:	d104      	bne.n	1000e2e0 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e2d6:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e2d8:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e2da:	2b00      	cmp	r3, #0
1000e2dc:	d02b      	beq.n	1000e336 <platform_event_wait+0x16e>
1000e2de:	e028      	b.n	1000e332 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e2e0:	4c4d      	ldr	r4, [pc, #308]	; (1000e418 <platform_event_wait+0x250>)
1000e2e2:	4d49      	ldr	r5, [pc, #292]	; (1000e408 <platform_event_wait+0x240>)
1000e2e4:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e2e6:	702b      	strb	r3, [r5, #0]
1000e2e8:	0a1b      	lsrs	r3, r3, #8
1000e2ea:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e2ec:	8910      	ldrh	r0, [r2, #8]
1000e2ee:	4b4b      	ldr	r3, [pc, #300]	; (1000e41c <platform_event_wait+0x254>)
1000e2f0:	681b      	ldr	r3, [r3, #0]
1000e2f2:	4798      	blx	r3
1000e2f4:	7128      	strb	r0, [r5, #4]
1000e2f6:	0a00      	lsrs	r0, r0, #8
1000e2f8:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e2fa:	6820      	ldr	r0, [r4, #0]
1000e2fc:	4b40      	ldr	r3, [pc, #256]	; (1000e400 <platform_event_wait+0x238>)
1000e2fe:	681a      	ldr	r2, [r3, #0]
1000e300:	88d2      	ldrh	r2, [r2, #6]
1000e302:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e304:	681d      	ldr	r5, [r3, #0]
1000e306:	896b      	ldrh	r3, [r5, #10]
1000e308:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e30a:	3008      	adds	r0, #8
1000e30c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e30e:	896a      	ldrh	r2, [r5, #10]
1000e310:	2a00      	cmp	r2, #0
1000e312:	d003      	beq.n	1000e31c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e314:	0029      	movs	r1, r5
1000e316:	310c      	adds	r1, #12
1000e318:	4b3c      	ldr	r3, [pc, #240]	; (1000e40c <platform_event_wait+0x244>)
1000e31a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e31c:	8969      	ldrh	r1, [r5, #10]
1000e31e:	3108      	adds	r1, #8
1000e320:	4b3c      	ldr	r3, [pc, #240]	; (1000e414 <platform_event_wait+0x24c>)
1000e322:	681b      	ldr	r3, [r3, #0]
1000e324:	4838      	ldr	r0, [pc, #224]	; (1000e408 <platform_event_wait+0x240>)
1000e326:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e328:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e32a:	2503      	movs	r5, #3
1000e32c:	e003      	b.n	1000e336 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e32e:	2400      	movs	r4, #0
1000e330:	e001      	b.n	1000e336 <platform_event_wait+0x16e>
1000e332:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e334:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e336:	4b32      	ldr	r3, [pc, #200]	; (1000e400 <platform_event_wait+0x238>)
1000e338:	6818      	ldr	r0, [r3, #0]
1000e33a:	4b39      	ldr	r3, [pc, #228]	; (1000e420 <platform_event_wait+0x258>)
1000e33c:	681b      	ldr	r3, [r3, #0]
1000e33e:	4798      	blx	r3
1000e340:	e000      	b.n	1000e344 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e342:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e344:	2c00      	cmp	r4, #0
1000e346:	d000      	beq.n	1000e34a <platform_event_wait+0x182>
1000e348:	e76b      	b.n	1000e222 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e34a:	464b      	mov	r3, r9
1000e34c:	2b00      	cmp	r3, #0
1000e34e:	d046      	beq.n	1000e3de <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e350:	4b29      	ldr	r3, [pc, #164]	; (1000e3f8 <platform_event_wait+0x230>)
1000e352:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e354:	2e00      	cmp	r6, #0
1000e356:	d104      	bne.n	1000e362 <platform_event_wait+0x19a>
1000e358:	2300      	movs	r3, #0
1000e35a:	6a1c      	ldr	r4, [r3, #32]
1000e35c:	2c00      	cmp	r4, #0
1000e35e:	d131      	bne.n	1000e3c4 <platform_event_wait+0x1fc>
1000e360:	e03d      	b.n	1000e3de <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e362:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e364:	2314      	movs	r3, #20
1000e366:	469c      	mov	ip, r3
1000e368:	44b4      	add	ip, r6
1000e36a:	4663      	mov	r3, ip
1000e36c:	4660      	mov	r0, ip
1000e36e:	9300      	str	r3, [sp, #0]
1000e370:	4b2c      	ldr	r3, [pc, #176]	; (1000e424 <platform_event_wait+0x25c>)
1000e372:	681b      	ldr	r3, [r3, #0]
1000e374:	4798      	blx	r3
	while(NULL != current)
1000e376:	2c00      	cmp	r4, #0
1000e378:	d01f      	beq.n	1000e3ba <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e37a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e37c:	23cd      	movs	r3, #205	; 0xcd
1000e37e:	009b      	lsls	r3, r3, #2
1000e380:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e382:	4b27      	ldr	r3, [pc, #156]	; (1000e420 <platform_event_wait+0x258>)
1000e384:	469a      	mov	sl, r3
1000e386:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e388:	6803      	ldr	r3, [r0, #0]
1000e38a:	889b      	ldrh	r3, [r3, #4]
1000e38c:	4543      	cmp	r3, r8
1000e38e:	d110      	bne.n	1000e3b2 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e390:	2f00      	cmp	r7, #0
1000e392:	d006      	beq.n	1000e3a2 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e394:	6883      	ldr	r3, [r0, #8]
1000e396:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e398:	4653      	mov	r3, sl
1000e39a:	681b      	ldr	r3, [r3, #0]
1000e39c:	4798      	blx	r3
				current = prev->pstrNext;
1000e39e:	68b8      	ldr	r0, [r7, #8]
1000e3a0:	e009      	b.n	1000e3b6 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e3a2:	6883      	ldr	r3, [r0, #8]
1000e3a4:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e3a6:	4b1e      	ldr	r3, [pc, #120]	; (1000e420 <platform_event_wait+0x258>)
1000e3a8:	681b      	ldr	r3, [r3, #0]
1000e3aa:	9301      	str	r3, [sp, #4]
1000e3ac:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e3ae:	6a30      	ldr	r0, [r6, #32]
1000e3b0:	e001      	b.n	1000e3b6 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e3b2:	0007      	movs	r7, r0
1000e3b4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e3b6:	2800      	cmp	r0, #0
1000e3b8:	d1e6      	bne.n	1000e388 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e3ba:	4b1b      	ldr	r3, [pc, #108]	; (1000e428 <platform_event_wait+0x260>)
1000e3bc:	681b      	ldr	r3, [r3, #0]
1000e3be:	9800      	ldr	r0, [sp, #0]
1000e3c0:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e3c2:	e00c      	b.n	1000e3de <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e3c4:	2314      	movs	r3, #20
1000e3c6:	9300      	str	r3, [sp, #0]
1000e3c8:	4b16      	ldr	r3, [pc, #88]	; (1000e424 <platform_event_wait+0x25c>)
1000e3ca:	681b      	ldr	r3, [r3, #0]
1000e3cc:	2014      	movs	r0, #20
1000e3ce:	4798      	blx	r3
1000e3d0:	e7d3      	b.n	1000e37a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e3d2:	4b10      	ldr	r3, [pc, #64]	; (1000e414 <platform_event_wait+0x24c>)
1000e3d4:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e3d6:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e3d8:	2b00      	cmp	r3, #0
1000e3da:	d0ac      	beq.n	1000e336 <platform_event_wait+0x16e>
1000e3dc:	e77b      	b.n	1000e2d6 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e3de:	0028      	movs	r0, r5
1000e3e0:	b007      	add	sp, #28
1000e3e2:	bc3c      	pop	{r2, r3, r4, r5}
1000e3e4:	4690      	mov	r8, r2
1000e3e6:	4699      	mov	r9, r3
1000e3e8:	46a2      	mov	sl, r4
1000e3ea:	46ab      	mov	fp, r5
1000e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3ee:	46c0      	nop			; (mov r8, r8)
1000e3f0:	100138f9 	.word	0x100138f9
1000e3f4:	1000e139 	.word	0x1000e139
1000e3f8:	10018350 	.word	0x10018350
1000e3fc:	10018338 	.word	0x10018338
1000e400:	10018344 	.word	0x10018344
1000e404:	10019260 	.word	0x10019260
1000e408:	10018fc8 	.word	0x10018fc8
1000e40c:	100138e7 	.word	0x100138e7
1000e410:	1000dd59 	.word	0x1000dd59
1000e414:	10018340 	.word	0x10018340
1000e418:	10018330 	.word	0x10018330
1000e41c:	10018310 	.word	0x10018310
1000e420:	1001830c 	.word	0x1001830c
1000e424:	1001832c 	.word	0x1001832c
1000e428:	10018318 	.word	0x10018318

1000e42c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e42c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e42e:	4b03      	ldr	r3, [pc, #12]	; (1000e43c <acquire_sleep_lock+0x10>)
1000e430:	681b      	ldr	r3, [r3, #0]
1000e432:	2080      	movs	r0, #128	; 0x80
1000e434:	0200      	lsls	r0, r0, #8
1000e436:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e438:	2008      	movs	r0, #8
1000e43a:	bd10      	pop	{r4, pc}
1000e43c:	10018f80 	.word	0x10018f80

1000e440 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e440:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e442:	4b03      	ldr	r3, [pc, #12]	; (1000e450 <release_message_lock+0x10>)
1000e444:	681b      	ldr	r3, [r3, #0]
1000e446:	2080      	movs	r0, #128	; 0x80
1000e448:	01c0      	lsls	r0, r0, #7
1000e44a:	4798      	blx	r3
	return status;
}
1000e44c:	2000      	movs	r0, #0
1000e44e:	bd10      	pop	{r4, pc}
1000e450:	10018f8c 	.word	0x10018f8c

1000e454 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e454:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e456:	4c05      	ldr	r4, [pc, #20]	; (1000e46c <release_sleep_lock+0x18>)
1000e458:	2080      	movs	r0, #128	; 0x80
1000e45a:	01c0      	lsls	r0, r0, #7
1000e45c:	6823      	ldr	r3, [r4, #0]
1000e45e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e460:	6823      	ldr	r3, [r4, #0]
1000e462:	2080      	movs	r0, #128	; 0x80
1000e464:	0200      	lsls	r0, r0, #8
1000e466:	4798      	blx	r3
	return status;
}
1000e468:	2000      	movs	r0, #0
1000e46a:	bd10      	pop	{r4, pc}
1000e46c:	10018f8c 	.word	0x10018f8c

1000e470 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e470:	2800      	cmp	r0, #0
1000e472:	d003      	beq.n	1000e47c <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e474:	4b02      	ldr	r3, [pc, #8]	; (1000e480 <register_resume_callback+0x10>)
1000e476:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e478:	2000      	movs	r0, #0
1000e47a:	e000      	b.n	1000e47e <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e47c:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e47e:	4770      	bx	lr
1000e480:	10019254 	.word	0x10019254

1000e484 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e484:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e486:	4a18      	ldr	r2, [pc, #96]	; (1000e4e8 <gpio1_combined_isr_handler+0x64>)
1000e488:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e48a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e48c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e48e:	2180      	movs	r1, #128	; 0x80
1000e490:	0209      	lsls	r1, r1, #8
1000e492:	4301      	orrs	r1, r0
1000e494:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e496:	0010      	movs	r0, r2
1000e498:	4d14      	ldr	r5, [pc, #80]	; (1000e4ec <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e49a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e49c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e49e:	05db      	lsls	r3, r3, #23
1000e4a0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e4a2:	d011      	beq.n	1000e4c8 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e4a4:	b2db      	uxtb	r3, r3
1000e4a6:	4259      	negs	r1, r3
1000e4a8:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e4aa:	2b01      	cmp	r3, #1
1000e4ac:	d006      	beq.n	1000e4bc <gpio1_combined_isr_handler+0x38>
1000e4ae:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e4b0:	085b      	lsrs	r3, r3, #1
				index++;
1000e4b2:	3101      	adds	r1, #1
1000e4b4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e4b6:	2b01      	cmp	r3, #1
1000e4b8:	d1fa      	bne.n	1000e4b0 <gpio1_combined_isr_handler+0x2c>
1000e4ba:	e000      	b.n	1000e4be <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e4bc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e4be:	0023      	movs	r3, r4
1000e4c0:	408b      	lsls	r3, r1
1000e4c2:	b29b      	uxth	r3, r3
1000e4c4:	8703      	strh	r3, [r0, #56]	; 0x38
1000e4c6:	e003      	b.n	1000e4d0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e4c8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e4ca:	432b      	orrs	r3, r5
1000e4cc:	b29b      	uxth	r3, r3
1000e4ce:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e4d0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e4d2:	05db      	lsls	r3, r3, #23
1000e4d4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e4d6:	d1e2      	bne.n	1000e49e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e4d8:	2180      	movs	r1, #128	; 0x80
1000e4da:	0049      	lsls	r1, r1, #1
1000e4dc:	3381      	adds	r3, #129	; 0x81
1000e4de:	33ff      	adds	r3, #255	; 0xff
1000e4e0:	4a03      	ldr	r2, [pc, #12]	; (1000e4f0 <gpio1_combined_isr_handler+0x6c>)
1000e4e2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e4e4:	bd30      	pop	{r4, r5, pc}
1000e4e6:	46c0      	nop			; (mov r8, r8)
1000e4e8:	40011000 	.word	0x40011000
1000e4ec:	ffff8000 	.word	0xffff8000
1000e4f0:	e000e100 	.word	0xe000e100

1000e4f4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e4f4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e4f6:	4a17      	ldr	r2, [pc, #92]	; (1000e554 <gpio0_combined_isr_handler+0x60>)
1000e4f8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e4fa:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e4fc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e4fe:	2180      	movs	r1, #128	; 0x80
1000e500:	0209      	lsls	r1, r1, #8
1000e502:	4301      	orrs	r1, r0
1000e504:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e506:	0010      	movs	r0, r2
1000e508:	4d13      	ldr	r5, [pc, #76]	; (1000e558 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e50a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e50c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e50e:	05db      	lsls	r3, r3, #23
1000e510:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e512:	d011      	beq.n	1000e538 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e514:	b2db      	uxtb	r3, r3
1000e516:	4259      	negs	r1, r3
1000e518:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e51a:	2b01      	cmp	r3, #1
1000e51c:	d006      	beq.n	1000e52c <gpio0_combined_isr_handler+0x38>
1000e51e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e520:	085b      	lsrs	r3, r3, #1
				index++;
1000e522:	3101      	adds	r1, #1
1000e524:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e526:	2b01      	cmp	r3, #1
1000e528:	d1fa      	bne.n	1000e520 <gpio0_combined_isr_handler+0x2c>
1000e52a:	e000      	b.n	1000e52e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e52c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e52e:	0023      	movs	r3, r4
1000e530:	408b      	lsls	r3, r1
1000e532:	b29b      	uxth	r3, r3
1000e534:	8703      	strh	r3, [r0, #56]	; 0x38
1000e536:	e003      	b.n	1000e540 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e538:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e53a:	432b      	orrs	r3, r5
1000e53c:	b29b      	uxth	r3, r3
1000e53e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e540:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e542:	05db      	lsls	r3, r3, #23
1000e544:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e546:	d1e2      	bne.n	1000e50e <gpio0_combined_isr_handler+0x1a>
1000e548:	2180      	movs	r1, #128	; 0x80
1000e54a:	3381      	adds	r3, #129	; 0x81
1000e54c:	33ff      	adds	r3, #255	; 0xff
1000e54e:	4a03      	ldr	r2, [pc, #12]	; (1000e55c <gpio0_combined_isr_handler+0x68>)
1000e550:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e552:	bd30      	pop	{r4, r5, pc}
1000e554:	40010000 	.word	0x40010000
1000e558:	ffff8000 	.word	0xffff8000
1000e55c:	e000e100 	.word	0xe000e100

1000e560 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e560:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e562:	4b0c      	ldr	r3, [pc, #48]	; (1000e594 <PORT1_COMB_Handler+0x34>)
1000e564:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e566:	0b5b      	lsrs	r3, r3, #13
1000e568:	d010      	beq.n	1000e58c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e56a:	4b0b      	ldr	r3, [pc, #44]	; (1000e598 <PORT1_COMB_Handler+0x38>)
1000e56c:	681b      	ldr	r3, [r3, #0]
1000e56e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e570:	4a08      	ldr	r2, [pc, #32]	; (1000e594 <PORT1_COMB_Handler+0x34>)
1000e572:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e574:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e576:	0b5b      	lsrs	r3, r3, #13
1000e578:	035b      	lsls	r3, r3, #13
1000e57a:	430b      	orrs	r3, r1
1000e57c:	8713      	strh	r3, [r2, #56]	; 0x38
1000e57e:	2180      	movs	r1, #128	; 0x80
1000e580:	0049      	lsls	r1, r1, #1
1000e582:	23c0      	movs	r3, #192	; 0xc0
1000e584:	005b      	lsls	r3, r3, #1
1000e586:	4a05      	ldr	r2, [pc, #20]	; (1000e59c <PORT1_COMB_Handler+0x3c>)
1000e588:	50d1      	str	r1, [r2, r3]
1000e58a:	e001      	b.n	1000e590 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e58c:	4b04      	ldr	r3, [pc, #16]	; (1000e5a0 <PORT1_COMB_Handler+0x40>)
1000e58e:	4798      	blx	r3
	}
}
1000e590:	bd10      	pop	{r4, pc}
1000e592:	46c0      	nop			; (mov r8, r8)
1000e594:	40011000 	.word	0x40011000
1000e598:	1001924c 	.word	0x1001924c
1000e59c:	e000e100 	.word	0xe000e100
1000e5a0:	1000e485 	.word	0x1000e485

1000e5a4 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e5a4:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e5a6:	2802      	cmp	r0, #2
1000e5a8:	d804      	bhi.n	1000e5b4 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e5aa:	0080      	lsls	r0, r0, #2
1000e5ac:	2200      	movs	r2, #0
1000e5ae:	4b02      	ldr	r3, [pc, #8]	; (1000e5b8 <wakeup_int_unregister_callback+0x14>)
1000e5b0:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e5b2:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e5b4:	0018      	movs	r0, r3
1000e5b6:	4770      	bx	lr
1000e5b8:	10019264 	.word	0x10019264

1000e5bc <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e5bc:	b510      	push	{r4, lr}
1000e5be:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e5c0:	7803      	ldrb	r3, [r0, #0]
1000e5c2:	2b01      	cmp	r3, #1
1000e5c4:	d108      	bne.n	1000e5d8 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e5c6:	4b11      	ldr	r3, [pc, #68]	; (1000e60c <wakeup_active_event_callback+0x50>)
1000e5c8:	681b      	ldr	r3, [r3, #0]
1000e5ca:	2b00      	cmp	r3, #0
1000e5cc:	d000      	beq.n	1000e5d0 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e5ce:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e5d0:	23ff      	movs	r3, #255	; 0xff
1000e5d2:	6822      	ldr	r2, [r4, #0]
1000e5d4:	439a      	bics	r2, r3
1000e5d6:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e5d8:	7863      	ldrb	r3, [r4, #1]
1000e5da:	2b01      	cmp	r3, #1
1000e5dc:	d108      	bne.n	1000e5f0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e5de:	4b0b      	ldr	r3, [pc, #44]	; (1000e60c <wakeup_active_event_callback+0x50>)
1000e5e0:	685b      	ldr	r3, [r3, #4]
1000e5e2:	2b00      	cmp	r3, #0
1000e5e4:	d000      	beq.n	1000e5e8 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e5e6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e5e8:	4b09      	ldr	r3, [pc, #36]	; (1000e610 <wakeup_active_event_callback+0x54>)
1000e5ea:	6822      	ldr	r2, [r4, #0]
1000e5ec:	4013      	ands	r3, r2
1000e5ee:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e5f0:	78a3      	ldrb	r3, [r4, #2]
1000e5f2:	2b01      	cmp	r3, #1
1000e5f4:	d108      	bne.n	1000e608 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e5f6:	4b05      	ldr	r3, [pc, #20]	; (1000e60c <wakeup_active_event_callback+0x50>)
1000e5f8:	689b      	ldr	r3, [r3, #8]
1000e5fa:	2b00      	cmp	r3, #0
1000e5fc:	d000      	beq.n	1000e600 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e5fe:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e600:	4b04      	ldr	r3, [pc, #16]	; (1000e614 <wakeup_active_event_callback+0x58>)
1000e602:	6822      	ldr	r2, [r4, #0]
1000e604:	4013      	ands	r3, r2
1000e606:	6023      	str	r3, [r4, #0]
	}
}
1000e608:	bd10      	pop	{r4, pc}
1000e60a:	46c0      	nop			; (mov r8, r8)
1000e60c:	10019264 	.word	0x10019264
1000e610:	ffff00ff 	.word	0xffff00ff
1000e614:	ff00ffff 	.word	0xff00ffff

1000e618 <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000e618:	2201      	movs	r2, #1
1000e61a:	4b01      	ldr	r3, [pc, #4]	; (1000e620 <sms_plf_event_cb+0x8>)
1000e61c:	705a      	strb	r2, [r3, #1]
}
1000e61e:	4770      	bx	lr
1000e620:	100185bc 	.word	0x100185bc

1000e624 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000e624:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000e626:	4b09      	ldr	r3, [pc, #36]	; (1000e64c <resume_cb+0x28>)
1000e628:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000e62a:	4b09      	ldr	r3, [pc, #36]	; (1000e650 <resume_cb+0x2c>)
1000e62c:	4798      	blx	r3
    sms_dualtimer_init();
1000e62e:	4b09      	ldr	r3, [pc, #36]	; (1000e654 <resume_cb+0x30>)
1000e630:	4798      	blx	r3
    delay_init();
1000e632:	4b09      	ldr	r3, [pc, #36]	; (1000e658 <resume_cb+0x34>)
1000e634:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000e636:	4b09      	ldr	r3, [pc, #36]	; (1000e65c <resume_cb+0x38>)
1000e638:	4798      	blx	r3
    sms_led_gpio_init();
1000e63a:	4b09      	ldr	r3, [pc, #36]	; (1000e660 <resume_cb+0x3c>)
1000e63c:	4798      	blx	r3
    sms_spi_master_configure();
1000e63e:	4b09      	ldr	r3, [pc, #36]	; (1000e664 <resume_cb+0x40>)
1000e640:	4798      	blx	r3
    sms_i2c_master_configure();
1000e642:	4b09      	ldr	r3, [pc, #36]	; (1000e668 <resume_cb+0x44>)
1000e644:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000e646:	4b09      	ldr	r3, [pc, #36]	; (1000e66c <resume_cb+0x48>)
1000e648:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e64a:	bd10      	pop	{r4, pc}
1000e64c:	1000de65 	.word	0x1000de65
1000e650:	1000dbcd 	.word	0x1000dbcd
1000e654:	1000a9c1 	.word	0x1000a9c1
1000e658:	100080e9 	.word	0x100080e9
1000e65c:	1000a00d 	.word	0x1000a00d
1000e660:	1000a6f5 	.word	0x1000a6f5
1000e664:	1000a87d 	.word	0x1000a87d
1000e668:	1000a365 	.word	0x1000a365
1000e66c:	1000a1a5 	.word	0x1000a1a5

1000e670 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e670:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000e672:	2300      	movs	r3, #0
1000e674:	4a10      	ldr	r2, [pc, #64]	; (1000e6b8 <sms_init_variables+0x48>)
1000e676:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000e678:	4a10      	ldr	r2, [pc, #64]	; (1000e6bc <sms_init_variables+0x4c>)
1000e67a:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000e67c:	4810      	ldr	r0, [pc, #64]	; (1000e6c0 <sms_init_variables+0x50>)
1000e67e:	2225      	movs	r2, #37	; 0x25
1000e680:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000e682:	4a10      	ldr	r2, [pc, #64]	; (1000e6c4 <sms_init_variables+0x54>)
1000e684:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000e686:	4a10      	ldr	r2, [pc, #64]	; (1000e6c8 <sms_init_variables+0x58>)
1000e688:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e68a:	2101      	movs	r1, #1
1000e68c:	4a0f      	ldr	r2, [pc, #60]	; (1000e6cc <sms_init_variables+0x5c>)
1000e68e:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000e690:	4a0f      	ldr	r2, [pc, #60]	; (1000e6d0 <sms_init_variables+0x60>)
1000e692:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000e694:	241f      	movs	r4, #31
1000e696:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000e698:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000e69a:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000e69c:	2228      	movs	r2, #40	; 0x28
1000e69e:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000e6a0:	4a0c      	ldr	r2, [pc, #48]	; (1000e6d4 <sms_init_variables+0x64>)
1000e6a2:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000e6a4:	4a0c      	ldr	r2, [pc, #48]	; (1000e6d8 <sms_init_variables+0x68>)
1000e6a6:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000e6a8:	201d      	movs	r0, #29
1000e6aa:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000e6ac:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000e6ae:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000e6b0:	4a0a      	ldr	r2, [pc, #40]	; (1000e6dc <sms_init_variables+0x6c>)
1000e6b2:	8013      	strh	r3, [r2, #0]
}
1000e6b4:	bd10      	pop	{r4, pc}
1000e6b6:	46c0      	nop			; (mov r8, r8)
1000e6b8:	100185d4 	.word	0x100185d4
1000e6bc:	100184c4 	.word	0x100184c4
1000e6c0:	10018538 	.word	0x10018538
1000e6c4:	10018428 	.word	0x10018428
1000e6c8:	100185d5 	.word	0x100185d5
1000e6cc:	100184bc 	.word	0x100184bc
1000e6d0:	10018424 	.word	0x10018424
1000e6d4:	100184bd 	.word	0x100184bd
1000e6d8:	100184c0 	.word	0x100184c0
1000e6dc:	100185f0 	.word	0x100185f0

1000e6e0 <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000e6e0:	b510      	push	{r4, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000e6e2:	2210      	movs	r2, #16
1000e6e4:	4b2b      	ldr	r3, [pc, #172]	; (1000e794 <main+0xb4>)
1000e6e6:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000e6e8:	4b2b      	ldr	r3, [pc, #172]	; (1000e798 <main+0xb8>)
1000e6ea:	4798      	blx	r3
	gpio_init(); // GPIO
1000e6ec:	4b2b      	ldr	r3, [pc, #172]	; (1000e79c <main+0xbc>)
1000e6ee:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e6f0:	4b2b      	ldr	r3, [pc, #172]	; (1000e7a0 <main+0xc0>)
1000e6f2:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000e6f4:	4b2b      	ldr	r3, [pc, #172]	; (1000e7a4 <main+0xc4>)
1000e6f6:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000e6f8:	4b2b      	ldr	r3, [pc, #172]	; (1000e7a8 <main+0xc8>)
1000e6fa:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000e6fc:	4b2b      	ldr	r3, [pc, #172]	; (1000e7ac <main+0xcc>)
1000e6fe:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000e700:	4b2b      	ldr	r3, [pc, #172]	; (1000e7b0 <main+0xd0>)
1000e702:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000e704:	4b2b      	ldr	r3, [pc, #172]	; (1000e7b4 <main+0xd4>)
1000e706:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000e708:	4b2b      	ldr	r3, [pc, #172]	; (1000e7b8 <main+0xd8>)
1000e70a:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000e70c:	4b2b      	ldr	r3, [pc, #172]	; (1000e7bc <main+0xdc>)
1000e70e:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000e710:	4b2b      	ldr	r3, [pc, #172]	; (1000e7c0 <main+0xe0>)
1000e712:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000e714:	4b2b      	ldr	r3, [pc, #172]	; (1000e7c4 <main+0xe4>)
1000e716:	4798      	blx	r3
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000e718:	2100      	movs	r1, #0
1000e71a:	2325      	movs	r3, #37	; 0x25
1000e71c:	4a2a      	ldr	r2, [pc, #168]	; (1000e7c8 <main+0xe8>)
1000e71e:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000e720:	4b2a      	ldr	r3, [pc, #168]	; (1000e7cc <main+0xec>)
1000e722:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000e724:	2000      	movs	r0, #0
1000e726:	4b2a      	ldr	r3, [pc, #168]	; (1000e7d0 <main+0xf0>)
1000e728:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000e72a:	4b2a      	ldr	r3, [pc, #168]	; (1000e7d4 <main+0xf4>)
1000e72c:	4798      	blx	r3
    sms_pressure_define_services();
1000e72e:	4b2a      	ldr	r3, [pc, #168]	; (1000e7d8 <main+0xf8>)
1000e730:	4798      	blx	r3
    sms_mpu_define_services();
1000e732:	4b2a      	ldr	r3, [pc, #168]	; (1000e7dc <main+0xfc>)
1000e734:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000e736:	482a      	ldr	r0, [pc, #168]	; (1000e7e0 <main+0x100>)
1000e738:	4b2a      	ldr	r3, [pc, #168]	; (1000e7e4 <main+0x104>)
1000e73a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000e73c:	492a      	ldr	r1, [pc, #168]	; (1000e7e8 <main+0x108>)
1000e73e:	2000      	movs	r0, #0
1000e740:	4c2a      	ldr	r4, [pc, #168]	; (1000e7ec <main+0x10c>)
1000e742:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000e744:	492a      	ldr	r1, [pc, #168]	; (1000e7f0 <main+0x110>)
1000e746:	2001      	movs	r0, #1
1000e748:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000e74a:	4b2a      	ldr	r3, [pc, #168]	; (1000e7f4 <main+0x114>)
1000e74c:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000e74e:	4b2a      	ldr	r3, [pc, #168]	; (1000e7f8 <main+0x118>)
1000e750:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e752:	4a2a      	ldr	r2, [pc, #168]	; (1000e7fc <main+0x11c>)
1000e754:	2100      	movs	r1, #0
1000e756:	2000      	movs	r0, #0
1000e758:	4c29      	ldr	r4, [pc, #164]	; (1000e800 <main+0x120>)
1000e75a:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e75c:	4a29      	ldr	r2, [pc, #164]	; (1000e804 <main+0x124>)
1000e75e:	2102      	movs	r1, #2
1000e760:	2000      	movs	r0, #0
1000e762:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000e764:	4828      	ldr	r0, [pc, #160]	; (1000e808 <main+0x128>)
1000e766:	4b29      	ldr	r3, [pc, #164]	; (1000e80c <main+0x12c>)
1000e768:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e76a:	2100      	movs	r1, #0
1000e76c:	2000      	movs	r0, #0
1000e76e:	4b28      	ldr	r3, [pc, #160]	; (1000e810 <main+0x130>)
1000e770:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    res = sms_mpu_initialize();
1000e772:	4b28      	ldr	r3, [pc, #160]	; (1000e814 <main+0x134>)
1000e774:	4798      	blx	r3
    if(res) {
1000e776:	2800      	cmp	r0, #0
1000e778:	d006      	beq.n	1000e788 <main+0xa8>
        DBG_LOG("Could not initialize MPU!");
1000e77a:	4827      	ldr	r0, [pc, #156]	; (1000e818 <main+0x138>)
1000e77c:	4b27      	ldr	r3, [pc, #156]	; (1000e81c <main+0x13c>)
1000e77e:	4798      	blx	r3
1000e780:	4827      	ldr	r0, [pc, #156]	; (1000e820 <main+0x140>)
1000e782:	4b28      	ldr	r3, [pc, #160]	; (1000e824 <main+0x144>)
1000e784:	4798      	blx	r3
1000e786:	e7fe      	b.n	1000e786 <main+0xa6>
        while(1) {}
    }
    sms_sensors_interrupt_toggle(true, false);
1000e788:	2100      	movs	r1, #0
1000e78a:	2001      	movs	r0, #1
1000e78c:	4b26      	ldr	r3, [pc, #152]	; (1000e828 <main+0x148>)
1000e78e:	4798      	blx	r3
1000e790:	e7fe      	b.n	1000e790 <main+0xb0>
1000e792:	46c0      	nop			; (mov r8, r8)
1000e794:	100185d4 	.word	0x100185d4
1000e798:	1000ded9 	.word	0x1000ded9
1000e79c:	1000b61d 	.word	0x1000b61d
1000e7a0:	1000dbcd 	.word	0x1000dbcd
1000e7a4:	1000e42d 	.word	0x1000e42d
1000e7a8:	1000e671 	.word	0x1000e671
1000e7ac:	1000a9c1 	.word	0x1000a9c1
1000e7b0:	100080e9 	.word	0x100080e9
1000e7b4:	1000a00d 	.word	0x1000a00d
1000e7b8:	1000a6f5 	.word	0x1000a6f5
1000e7bc:	1000a365 	.word	0x1000a365
1000e7c0:	1000a87d 	.word	0x1000a87d
1000e7c4:	1000a4f1 	.word	0x1000a4f1
1000e7c8:	10018538 	.word	0x10018538
1000e7cc:	1000a1a5 	.word	0x1000a1a5
1000e7d0:	1000d3fd 	.word	0x1000d3fd
1000e7d4:	1000a13d 	.word	0x1000a13d
1000e7d8:	1000a815 	.word	0x1000a815
1000e7dc:	1000a669 	.word	0x1000a669
1000e7e0:	1000e625 	.word	0x1000e625
1000e7e4:	1000e471 	.word	0x1000e471
1000e7e8:	1000aa81 	.word	0x1000aa81
1000e7ec:	1000a9fd 	.word	0x1000a9fd
1000e7f0:	1000aaa1 	.word	0x1000aaa1
1000e7f4:	1000a0c1 	.word	0x1000a0c1
1000e7f8:	1000a571 	.word	0x1000a571
1000e7fc:	100152ac 	.word	0x100152ac
1000e800:	1000d32d 	.word	0x1000d32d
1000e804:	100152f8 	.word	0x100152f8
1000e808:	1000e619 	.word	0x1000e619
1000e80c:	1000db3d 	.word	0x1000db3d
1000e810:	1000a0f1 	.word	0x1000a0f1
1000e814:	1000a589 	.word	0x1000a589
1000e818:	10014d08 	.word	0x10014d08
1000e81c:	10013b61 	.word	0x10013b61
1000e820:	100166a0 	.word	0x100166a0
1000e824:	10013a41 	.word	0x10013a41
1000e828:	1000a251 	.word	0x1000a251

1000e82c <internal_event_post>:
1000e82c:	b570      	push	{r4, r5, r6, lr}
1000e82e:	4d12      	ldr	r5, [pc, #72]	; (1000e878 <internal_event_post+0x4c>)
1000e830:	682c      	ldr	r4, [r5, #0]
1000e832:	2c00      	cmp	r4, #0
1000e834:	d014      	beq.n	1000e860 <internal_event_post+0x34>
1000e836:	6826      	ldr	r6, [r4, #0]
1000e838:	60e2      	str	r2, [r4, #12]
1000e83a:	602e      	str	r6, [r5, #0]
1000e83c:	2500      	movs	r5, #0
1000e83e:	4a0f      	ldr	r2, [pc, #60]	; (1000e87c <internal_event_post+0x50>)
1000e840:	8123      	strh	r3, [r4, #8]
1000e842:	6813      	ldr	r3, [r2, #0]
1000e844:	6025      	str	r5, [r4, #0]
1000e846:	80a0      	strh	r0, [r4, #4]
1000e848:	80e1      	strh	r1, [r4, #6]
1000e84a:	42ab      	cmp	r3, r5
1000e84c:	d101      	bne.n	1000e852 <internal_event_post+0x26>
1000e84e:	6014      	str	r4, [r2, #0]
1000e850:	e011      	b.n	1000e876 <internal_event_post+0x4a>
1000e852:	681a      	ldr	r2, [r3, #0]
1000e854:	2a00      	cmp	r2, #0
1000e856:	d001      	beq.n	1000e85c <internal_event_post+0x30>
1000e858:	1c13      	adds	r3, r2, #0
1000e85a:	e7fa      	b.n	1000e852 <internal_event_post+0x26>
1000e85c:	601c      	str	r4, [r3, #0]
1000e85e:	e00a      	b.n	1000e876 <internal_event_post+0x4a>
1000e860:	b2c4      	uxtb	r4, r0
1000e862:	2c00      	cmp	r4, #0
1000e864:	d107      	bne.n	1000e876 <internal_event_post+0x4a>
1000e866:	4c06      	ldr	r4, [pc, #24]	; (1000e880 <internal_event_post+0x54>)
1000e868:	60e2      	str	r2, [r4, #12]
1000e86a:	2201      	movs	r2, #1
1000e86c:	8123      	strh	r3, [r4, #8]
1000e86e:	4b05      	ldr	r3, [pc, #20]	; (1000e884 <internal_event_post+0x58>)
1000e870:	80a0      	strh	r0, [r4, #4]
1000e872:	80e1      	strh	r1, [r4, #6]
1000e874:	701a      	strb	r2, [r3, #0]
1000e876:	bd70      	pop	{r4, r5, r6, pc}
1000e878:	1001836c 	.word	0x1001836c
1000e87c:	10018368 	.word	0x10018368
1000e880:	10018354 	.word	0x10018354
1000e884:	10018364 	.word	0x10018364

1000e888 <internal_event_init>:
1000e888:	b510      	push	{r4, lr}
1000e88a:	4b08      	ldr	r3, [pc, #32]	; (1000e8ac <internal_event_init+0x24>)
1000e88c:	0900      	lsrs	r0, r0, #4
1000e88e:	0100      	lsls	r0, r0, #4
1000e890:	681a      	ldr	r2, [r3, #0]
1000e892:	1808      	adds	r0, r1, r0
1000e894:	4281      	cmp	r1, r0
1000e896:	d003      	beq.n	1000e8a0 <internal_event_init+0x18>
1000e898:	600a      	str	r2, [r1, #0]
1000e89a:	1c0a      	adds	r2, r1, #0
1000e89c:	3110      	adds	r1, #16
1000e89e:	e7f9      	b.n	1000e894 <internal_event_init+0xc>
1000e8a0:	601a      	str	r2, [r3, #0]
1000e8a2:	2200      	movs	r2, #0
1000e8a4:	4b02      	ldr	r3, [pc, #8]	; (1000e8b0 <internal_event_init+0x28>)
1000e8a6:	601a      	str	r2, [r3, #0]
1000e8a8:	bd10      	pop	{r4, pc}
1000e8aa:	46c0      	nop			; (mov r8, r8)
1000e8ac:	1001836c 	.word	0x1001836c
1000e8b0:	10018368 	.word	0x10018368

1000e8b4 <special_events_handler>:
1000e8b4:	b538      	push	{r3, r4, r5, lr}
1000e8b6:	4c1b      	ldr	r4, [pc, #108]	; (1000e924 <special_events_handler+0x70>)
1000e8b8:	1c03      	adds	r3, r0, #0
1000e8ba:	8825      	ldrh	r5, [r4, #0]
1000e8bc:	1c08      	adds	r0, r1, #0
1000e8be:	1c21      	adds	r1, r4, #0
1000e8c0:	429d      	cmp	r5, r3
1000e8c2:	d107      	bne.n	1000e8d4 <special_events_handler+0x20>
1000e8c4:	88a5      	ldrh	r5, [r4, #4]
1000e8c6:	4285      	cmp	r5, r0
1000e8c8:	d104      	bne.n	1000e8d4 <special_events_handler+0x20>
1000e8ca:	2301      	movs	r3, #1
1000e8cc:	425b      	negs	r3, r3
1000e8ce:	8023      	strh	r3, [r4, #0]
1000e8d0:	60a2      	str	r2, [r4, #8]
1000e8d2:	e009      	b.n	1000e8e8 <special_events_handler+0x34>
1000e8d4:	884c      	ldrh	r4, [r1, #2]
1000e8d6:	429c      	cmp	r4, r3
1000e8d8:	d10a      	bne.n	1000e8f0 <special_events_handler+0x3c>
1000e8da:	888c      	ldrh	r4, [r1, #4]
1000e8dc:	4284      	cmp	r4, r0
1000e8de:	d107      	bne.n	1000e8f0 <special_events_handler+0x3c>
1000e8e0:	2301      	movs	r3, #1
1000e8e2:	425b      	negs	r3, r3
1000e8e4:	804b      	strh	r3, [r1, #2]
1000e8e6:	608a      	str	r2, [r1, #8]
1000e8e8:	4b0f      	ldr	r3, [pc, #60]	; (1000e928 <special_events_handler+0x74>)
1000e8ea:	4798      	blx	r3
1000e8ec:	2001      	movs	r0, #1
1000e8ee:	e017      	b.n	1000e920 <special_events_handler+0x6c>
1000e8f0:	490e      	ldr	r1, [pc, #56]	; (1000e92c <special_events_handler+0x78>)
1000e8f2:	428b      	cmp	r3, r1
1000e8f4:	d00e      	beq.n	1000e914 <special_events_handler+0x60>
1000e8f6:	490e      	ldr	r1, [pc, #56]	; (1000e930 <special_events_handler+0x7c>)
1000e8f8:	428b      	cmp	r3, r1
1000e8fa:	d007      	beq.n	1000e90c <special_events_handler+0x58>
1000e8fc:	490d      	ldr	r1, [pc, #52]	; (1000e934 <special_events_handler+0x80>)
1000e8fe:	2000      	movs	r0, #0
1000e900:	428b      	cmp	r3, r1
1000e902:	d10d      	bne.n	1000e920 <special_events_handler+0x6c>
1000e904:	1c10      	adds	r0, r2, #0
1000e906:	4b0c      	ldr	r3, [pc, #48]	; (1000e938 <special_events_handler+0x84>)
1000e908:	4798      	blx	r3
1000e90a:	e7ef      	b.n	1000e8ec <special_events_handler+0x38>
1000e90c:	1c11      	adds	r1, r2, #0
1000e90e:	4b0b      	ldr	r3, [pc, #44]	; (1000e93c <special_events_handler+0x88>)
1000e910:	2200      	movs	r2, #0
1000e912:	e002      	b.n	1000e91a <special_events_handler+0x66>
1000e914:	1c11      	adds	r1, r2, #0
1000e916:	2200      	movs	r2, #0
1000e918:	4b09      	ldr	r3, [pc, #36]	; (1000e940 <special_events_handler+0x8c>)
1000e91a:	4798      	blx	r3
1000e91c:	4243      	negs	r3, r0
1000e91e:	4158      	adcs	r0, r3
1000e920:	bd38      	pop	{r3, r4, r5, pc}
1000e922:	46c0      	nop			; (mov r8, r8)
1000e924:	10019270 	.word	0x10019270
1000e928:	1001029d 	.word	0x1001029d
1000e92c:	00000e13 	.word	0x00000e13
1000e930:	00000e15 	.word	0x00000e15
1000e934:	00000e01 	.word	0x00000e01
1000e938:	1001060d 	.word	0x1001060d
1000e93c:	100107cd 	.word	0x100107cd
1000e940:	100108a5 	.word	0x100108a5

1000e944 <at_ble_event_get>:
1000e944:	2300      	movs	r3, #0
1000e946:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e948:	b087      	sub	sp, #28
1000e94a:	9204      	str	r2, [sp, #16]
1000e94c:	7003      	strb	r3, [r0, #0]
1000e94e:	9b04      	ldr	r3, [sp, #16]
1000e950:	9003      	str	r0, [sp, #12]
1000e952:	3b01      	subs	r3, #1
1000e954:	1c0d      	adds	r5, r1, #0
1000e956:	9305      	str	r3, [sp, #20]
1000e958:	3303      	adds	r3, #3
1000e95a:	d802      	bhi.n	1000e962 <at_ble_event_get+0x1e>
1000e95c:	9804      	ldr	r0, [sp, #16]
1000e95e:	4bae      	ldr	r3, [pc, #696]	; (1000ec18 <at_ble_event_get+0x2d4>)
1000e960:	4798      	blx	r3
1000e962:	9b05      	ldr	r3, [sp, #20]
1000e964:	4cad      	ldr	r4, [pc, #692]	; (1000ec1c <at_ble_event_get+0x2d8>)
1000e966:	3303      	adds	r3, #3
1000e968:	d902      	bls.n	1000e970 <at_ble_event_get+0x2c>
1000e96a:	2300      	movs	r3, #0
1000e96c:	9302      	str	r3, [sp, #8]
1000e96e:	e015      	b.n	1000e99c <at_ble_event_get+0x58>
1000e970:	2300      	movs	r3, #0
1000e972:	9302      	str	r3, [sp, #8]
1000e974:	6823      	ldr	r3, [r4, #0]
1000e976:	2b00      	cmp	r3, #0
1000e978:	d113      	bne.n	1000e9a2 <at_ble_event_get+0x5e>
1000e97a:	9b02      	ldr	r3, [sp, #8]
1000e97c:	2bd0      	cmp	r3, #208	; 0xd0
1000e97e:	d100      	bne.n	1000e982 <at_ble_event_get+0x3e>
1000e980:	e2da      	b.n	1000ef38 <at_ble_event_get+0x5f4>
1000e982:	9804      	ldr	r0, [sp, #16]
1000e984:	4ba6      	ldr	r3, [pc, #664]	; (1000ec20 <at_ble_event_get+0x2dc>)
1000e986:	4798      	blx	r3
1000e988:	9002      	str	r0, [sp, #8]
1000e98a:	2802      	cmp	r0, #2
1000e98c:	d1f2      	bne.n	1000e974 <at_ble_event_get+0x30>
1000e98e:	e03f      	b.n	1000ea10 <at_ble_event_get+0xcc>
1000e990:	9804      	ldr	r0, [sp, #16]
1000e992:	4ba3      	ldr	r3, [pc, #652]	; (1000ec20 <at_ble_event_get+0x2dc>)
1000e994:	4798      	blx	r3
1000e996:	9002      	str	r0, [sp, #8]
1000e998:	2802      	cmp	r0, #2
1000e99a:	d039      	beq.n	1000ea10 <at_ble_event_get+0xcc>
1000e99c:	6823      	ldr	r3, [r4, #0]
1000e99e:	2b00      	cmp	r3, #0
1000e9a0:	d0f6      	beq.n	1000e990 <at_ble_event_get+0x4c>
1000e9a2:	9b02      	ldr	r3, [sp, #8]
1000e9a4:	2bd0      	cmp	r3, #208	; 0xd0
1000e9a6:	d100      	bne.n	1000e9aa <at_ble_event_get+0x66>
1000e9a8:	e2c6      	b.n	1000ef38 <at_ble_event_get+0x5f4>
1000e9aa:	9b02      	ldr	r3, [sp, #8]
1000e9ac:	3b03      	subs	r3, #3
1000e9ae:	1e5a      	subs	r2, r3, #1
1000e9b0:	4193      	sbcs	r3, r2
1000e9b2:	9a02      	ldr	r2, [sp, #8]
1000e9b4:	425b      	negs	r3, r3
1000e9b6:	401a      	ands	r2, r3
1000e9b8:	6823      	ldr	r3, [r4, #0]
1000e9ba:	9202      	str	r2, [sp, #8]
1000e9bc:	2b00      	cmp	r3, #0
1000e9be:	d100      	bne.n	1000e9c2 <at_ble_event_get+0x7e>
1000e9c0:	e2c2      	b.n	1000ef48 <at_ble_event_get+0x604>
1000e9c2:	681a      	ldr	r2, [r3, #0]
1000e9c4:	68de      	ldr	r6, [r3, #12]
1000e9c6:	6022      	str	r2, [r4, #0]
1000e9c8:	88da      	ldrh	r2, [r3, #6]
1000e9ca:	9201      	str	r2, [sp, #4]
1000e9cc:	4a95      	ldr	r2, [pc, #596]	; (1000ec24 <at_ble_event_get+0x2e0>)
1000e9ce:	889c      	ldrh	r4, [r3, #4]
1000e9d0:	6811      	ldr	r1, [r2, #0]
1000e9d2:	6013      	str	r3, [r2, #0]
1000e9d4:	6019      	str	r1, [r3, #0]
1000e9d6:	4b94      	ldr	r3, [pc, #592]	; (1000ec28 <at_ble_event_get+0x2e4>)
1000e9d8:	781b      	ldrb	r3, [r3, #0]
1000e9da:	2b01      	cmp	r3, #1
1000e9dc:	d10f      	bne.n	1000e9fe <at_ble_event_get+0xba>
1000e9de:	4b93      	ldr	r3, [pc, #588]	; (1000ec2c <at_ble_event_get+0x2e8>)
1000e9e0:	4a92      	ldr	r2, [pc, #584]	; (1000ec2c <at_ble_event_get+0x2e8>)
1000e9e2:	8898      	ldrh	r0, [r3, #4]
1000e9e4:	88d9      	ldrh	r1, [r3, #6]
1000e9e6:	68d2      	ldr	r2, [r2, #12]
1000e9e8:	891b      	ldrh	r3, [r3, #8]
1000e9ea:	4f91      	ldr	r7, [pc, #580]	; (1000ec30 <at_ble_event_get+0x2ec>)
1000e9ec:	47b8      	blx	r7
1000e9ee:	2210      	movs	r2, #16
1000e9f0:	4b90      	ldr	r3, [pc, #576]	; (1000ec34 <at_ble_event_get+0x2f0>)
1000e9f2:	488e      	ldr	r0, [pc, #568]	; (1000ec2c <at_ble_event_get+0x2e8>)
1000e9f4:	2100      	movs	r1, #0
1000e9f6:	4798      	blx	r3
1000e9f8:	2300      	movs	r3, #0
1000e9fa:	4a8b      	ldr	r2, [pc, #556]	; (1000ec28 <at_ble_event_get+0x2e4>)
1000e9fc:	7013      	strb	r3, [r2, #0]
1000e9fe:	9b02      	ldr	r3, [sp, #8]
1000ea00:	2b00      	cmp	r3, #0
1000ea02:	d114      	bne.n	1000ea2e <at_ble_event_get+0xea>
1000ea04:	4b8c      	ldr	r3, [pc, #560]	; (1000ec38 <at_ble_event_get+0x2f4>)
1000ea06:	429c      	cmp	r4, r3
1000ea08:	d009      	beq.n	1000ea1e <at_ble_event_get+0xda>
1000ea0a:	4b8c      	ldr	r3, [pc, #560]	; (1000ec3c <at_ble_event_get+0x2f8>)
1000ea0c:	429c      	cmp	r4, r3
1000ea0e:	d127      	bne.n	1000ea60 <at_ble_event_get+0x11c>
1000ea10:	233a      	movs	r3, #58	; 0x3a
1000ea12:	9a03      	ldr	r2, [sp, #12]
1000ea14:	7013      	strb	r3, [r2, #0]
1000ea16:	2300      	movs	r3, #0
1000ea18:	9302      	str	r3, [sp, #8]
1000ea1a:	1c1d      	adds	r5, r3, #0
1000ea1c:	e007      	b.n	1000ea2e <at_ble_event_get+0xea>
1000ea1e:	9b01      	ldr	r3, [sp, #4]
1000ea20:	42a3      	cmp	r3, r4
1000ea22:	d000      	beq.n	1000ea26 <at_ble_event_get+0xe2>
1000ea24:	e28a      	b.n	1000ef3c <at_ble_event_get+0x5f8>
1000ea26:	2338      	movs	r3, #56	; 0x38
1000ea28:	9a03      	ldr	r2, [sp, #12]
1000ea2a:	7013      	strb	r3, [r2, #0]
1000ea2c:	602e      	str	r6, [r5, #0]
1000ea2e:	9b03      	ldr	r3, [sp, #12]
1000ea30:	781b      	ldrb	r3, [r3, #0]
1000ea32:	2b3b      	cmp	r3, #59	; 0x3b
1000ea34:	d101      	bne.n	1000ea3a <at_ble_event_get+0xf6>
1000ea36:	4b82      	ldr	r3, [pc, #520]	; (1000ec40 <at_ble_event_get+0x2fc>)
1000ea38:	4798      	blx	r3
1000ea3a:	9b03      	ldr	r3, [sp, #12]
1000ea3c:	781b      	ldrb	r3, [r3, #0]
1000ea3e:	2b3b      	cmp	r3, #59	; 0x3b
1000ea40:	d003      	beq.n	1000ea4a <at_ble_event_get+0x106>
1000ea42:	9b05      	ldr	r3, [sp, #20]
1000ea44:	3303      	adds	r3, #3
1000ea46:	d904      	bls.n	1000ea52 <at_ble_event_get+0x10e>
1000ea48:	e283      	b.n	1000ef52 <at_ble_event_get+0x60e>
1000ea4a:	9b02      	ldr	r3, [sp, #8]
1000ea4c:	2b00      	cmp	r3, #0
1000ea4e:	d088      	beq.n	1000e962 <at_ble_event_get+0x1e>
1000ea50:	e7f7      	b.n	1000ea42 <at_ble_event_get+0xfe>
1000ea52:	9b02      	ldr	r3, [sp, #8]
1000ea54:	2bd0      	cmp	r3, #208	; 0xd0
1000ea56:	d100      	bne.n	1000ea5a <at_ble_event_get+0x116>
1000ea58:	e27b      	b.n	1000ef52 <at_ble_event_get+0x60e>
1000ea5a:	4b7a      	ldr	r3, [pc, #488]	; (1000ec44 <at_ble_event_get+0x300>)
1000ea5c:	4798      	blx	r3
1000ea5e:	e278      	b.n	1000ef52 <at_ble_event_get+0x60e>
1000ea60:	9b01      	ldr	r3, [sp, #4]
1000ea62:	2bbb      	cmp	r3, #187	; 0xbb
1000ea64:	d125      	bne.n	1000eab2 <at_ble_event_get+0x16e>
1000ea66:	2cbb      	cmp	r4, #187	; 0xbb
1000ea68:	d123      	bne.n	1000eab2 <at_ble_event_get+0x16e>
1000ea6a:	466b      	mov	r3, sp
1000ea6c:	891b      	ldrh	r3, [r3, #8]
1000ea6e:	80ab      	strh	r3, [r5, #4]
1000ea70:	78b3      	ldrb	r3, [r6, #2]
1000ea72:	7872      	ldrb	r2, [r6, #1]
1000ea74:	78f0      	ldrb	r0, [r6, #3]
1000ea76:	021b      	lsls	r3, r3, #8
1000ea78:	4313      	orrs	r3, r2
1000ea7a:	7971      	ldrb	r1, [r6, #5]
1000ea7c:	7932      	ldrb	r2, [r6, #4]
1000ea7e:	70a8      	strb	r0, [r5, #2]
1000ea80:	4871      	ldr	r0, [pc, #452]	; (1000ec48 <at_ble_event_get+0x304>)
1000ea82:	802b      	strh	r3, [r5, #0]
1000ea84:	4283      	cmp	r3, r0
1000ea86:	d806      	bhi.n	1000ea96 <at_ble_event_get+0x152>
1000ea88:	4a70      	ldr	r2, [pc, #448]	; (1000ec4c <at_ble_event_get+0x308>)
1000ea8a:	4293      	cmp	r3, r2
1000ea8c:	d20b      	bcs.n	1000eaa6 <at_ble_event_get+0x162>
1000ea8e:	4a70      	ldr	r2, [pc, #448]	; (1000ec50 <at_ble_event_get+0x30c>)
1000ea90:	4293      	cmp	r3, r2
1000ea92:	d008      	beq.n	1000eaa6 <at_ble_event_get+0x162>
1000ea94:	e009      	b.n	1000eaaa <at_ble_event_get+0x166>
1000ea96:	486f      	ldr	r0, [pc, #444]	; (1000ec54 <at_ble_event_get+0x310>)
1000ea98:	4283      	cmp	r3, r0
1000ea9a:	d106      	bne.n	1000eaaa <at_ble_event_get+0x166>
1000ea9c:	020b      	lsls	r3, r1, #8
1000ea9e:	4313      	orrs	r3, r2
1000eaa0:	80ab      	strh	r3, [r5, #4]
1000eaa2:	2337      	movs	r3, #55	; 0x37
1000eaa4:	e002      	b.n	1000eaac <at_ble_event_get+0x168>
1000eaa6:	2336      	movs	r3, #54	; 0x36
1000eaa8:	e000      	b.n	1000eaac <at_ble_event_get+0x168>
1000eaaa:	2300      	movs	r3, #0
1000eaac:	9a03      	ldr	r2, [sp, #12]
1000eaae:	7013      	strb	r3, [r2, #0]
1000eab0:	e7bd      	b.n	1000ea2e <at_ble_event_get+0xea>
1000eab2:	4b69      	ldr	r3, [pc, #420]	; (1000ec58 <at_ble_event_get+0x314>)
1000eab4:	429c      	cmp	r4, r3
1000eab6:	d100      	bne.n	1000eaba <at_ble_event_get+0x176>
1000eab8:	e144      	b.n	1000ed44 <at_ble_event_get+0x400>
1000eaba:	d865      	bhi.n	1000eb88 <at_ble_event_get+0x244>
1000eabc:	4b67      	ldr	r3, [pc, #412]	; (1000ec5c <at_ble_event_get+0x318>)
1000eabe:	429c      	cmp	r4, r3
1000eac0:	d100      	bne.n	1000eac4 <at_ble_event_get+0x180>
1000eac2:	e1d5      	b.n	1000ee70 <at_ble_event_get+0x52c>
1000eac4:	d82f      	bhi.n	1000eb26 <at_ble_event_get+0x1e2>
1000eac6:	4b66      	ldr	r3, [pc, #408]	; (1000ec60 <at_ble_event_get+0x31c>)
1000eac8:	429c      	cmp	r4, r3
1000eaca:	d100      	bne.n	1000eace <at_ble_event_get+0x18a>
1000eacc:	e1e0      	b.n	1000ee90 <at_ble_event_get+0x54c>
1000eace:	d813      	bhi.n	1000eaf8 <at_ble_event_get+0x1b4>
1000ead0:	4b64      	ldr	r3, [pc, #400]	; (1000ec64 <at_ble_event_get+0x320>)
1000ead2:	429c      	cmp	r4, r3
1000ead4:	d100      	bne.n	1000ead8 <at_ble_event_get+0x194>
1000ead6:	e1a3      	b.n	1000ee20 <at_ble_event_get+0x4dc>
1000ead8:	d804      	bhi.n	1000eae4 <at_ble_event_get+0x1a0>
1000eada:	2638      	movs	r6, #56	; 0x38
1000eadc:	42b4      	cmp	r4, r6
1000eade:	d100      	bne.n	1000eae2 <at_ble_event_get+0x19e>
1000eae0:	e225      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eae2:	e117      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eae4:	4b60      	ldr	r3, [pc, #384]	; (1000ec68 <at_ble_event_get+0x324>)
1000eae6:	429c      	cmp	r4, r3
1000eae8:	d100      	bne.n	1000eaec <at_ble_event_get+0x1a8>
1000eaea:	e19f      	b.n	1000ee2c <at_ble_event_get+0x4e8>
1000eaec:	33fe      	adds	r3, #254	; 0xfe
1000eaee:	33ff      	adds	r3, #255	; 0xff
1000eaf0:	429c      	cmp	r4, r3
1000eaf2:	d100      	bne.n	1000eaf6 <at_ble_event_get+0x1b2>
1000eaf4:	e1d3      	b.n	1000ee9e <at_ble_event_get+0x55a>
1000eaf6:	e10d      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eaf8:	4b5c      	ldr	r3, [pc, #368]	; (1000ec6c <at_ble_event_get+0x328>)
1000eafa:	429c      	cmp	r4, r3
1000eafc:	d100      	bne.n	1000eb00 <at_ble_event_get+0x1bc>
1000eafe:	e1a9      	b.n	1000ee54 <at_ble_event_get+0x510>
1000eb00:	d808      	bhi.n	1000eb14 <at_ble_event_get+0x1d0>
1000eb02:	4b5b      	ldr	r3, [pc, #364]	; (1000ec70 <at_ble_event_get+0x32c>)
1000eb04:	429c      	cmp	r4, r3
1000eb06:	d100      	bne.n	1000eb0a <at_ble_event_get+0x1c6>
1000eb08:	e196      	b.n	1000ee38 <at_ble_event_get+0x4f4>
1000eb0a:	4b5a      	ldr	r3, [pc, #360]	; (1000ec74 <at_ble_event_get+0x330>)
1000eb0c:	429c      	cmp	r4, r3
1000eb0e:	d100      	bne.n	1000eb12 <at_ble_event_get+0x1ce>
1000eb10:	e199      	b.n	1000ee46 <at_ble_event_get+0x502>
1000eb12:	e0ff      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb14:	4b58      	ldr	r3, [pc, #352]	; (1000ec78 <at_ble_event_get+0x334>)
1000eb16:	429c      	cmp	r4, r3
1000eb18:	d100      	bne.n	1000eb1c <at_ble_event_get+0x1d8>
1000eb1a:	e1a2      	b.n	1000ee62 <at_ble_event_get+0x51e>
1000eb1c:	4b57      	ldr	r3, [pc, #348]	; (1000ec7c <at_ble_event_get+0x338>)
1000eb1e:	429c      	cmp	r4, r3
1000eb20:	d100      	bne.n	1000eb24 <at_ble_event_get+0x1e0>
1000eb22:	e1d4      	b.n	1000eece <at_ble_event_get+0x58a>
1000eb24:	e0f6      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb26:	4b56      	ldr	r3, [pc, #344]	; (1000ec80 <at_ble_event_get+0x33c>)
1000eb28:	429c      	cmp	r4, r3
1000eb2a:	d100      	bne.n	1000eb2e <at_ble_event_get+0x1ea>
1000eb2c:	e1c8      	b.n	1000eec0 <at_ble_event_get+0x57c>
1000eb2e:	d812      	bhi.n	1000eb56 <at_ble_event_get+0x212>
1000eb30:	4b54      	ldr	r3, [pc, #336]	; (1000ec84 <at_ble_event_get+0x340>)
1000eb32:	429c      	cmp	r4, r3
1000eb34:	d100      	bne.n	1000eb38 <at_ble_event_get+0x1f4>
1000eb36:	e1d1      	b.n	1000eedc <at_ble_event_get+0x598>
1000eb38:	d804      	bhi.n	1000eb44 <at_ble_event_get+0x200>
1000eb3a:	4b53      	ldr	r3, [pc, #332]	; (1000ec88 <at_ble_event_get+0x344>)
1000eb3c:	429c      	cmp	r4, r3
1000eb3e:	d100      	bne.n	1000eb42 <at_ble_event_get+0x1fe>
1000eb40:	e19b      	b.n	1000ee7a <at_ble_event_get+0x536>
1000eb42:	e0e7      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb44:	4b51      	ldr	r3, [pc, #324]	; (1000ec8c <at_ble_event_get+0x348>)
1000eb46:	429c      	cmp	r4, r3
1000eb48:	d100      	bne.n	1000eb4c <at_ble_event_get+0x208>
1000eb4a:	e1ad      	b.n	1000eea8 <at_ble_event_get+0x564>
1000eb4c:	4b50      	ldr	r3, [pc, #320]	; (1000ec90 <at_ble_event_get+0x34c>)
1000eb4e:	429c      	cmp	r4, r3
1000eb50:	d100      	bne.n	1000eb54 <at_ble_event_get+0x210>
1000eb52:	e1b0      	b.n	1000eeb6 <at_ble_event_get+0x572>
1000eb54:	e0de      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb56:	4b4f      	ldr	r3, [pc, #316]	; (1000ec94 <at_ble_event_get+0x350>)
1000eb58:	429c      	cmp	r4, r3
1000eb5a:	d100      	bne.n	1000eb5e <at_ble_event_get+0x21a>
1000eb5c:	e0e0      	b.n	1000ed20 <at_ble_event_get+0x3dc>
1000eb5e:	d809      	bhi.n	1000eb74 <at_ble_event_get+0x230>
1000eb60:	3b08      	subs	r3, #8
1000eb62:	429c      	cmp	r4, r3
1000eb64:	d100      	bne.n	1000eb68 <at_ble_event_get+0x224>
1000eb66:	e0d7      	b.n	1000ed18 <at_ble_event_get+0x3d4>
1000eb68:	4b4b      	ldr	r3, [pc, #300]	; (1000ec98 <at_ble_event_get+0x354>)
1000eb6a:	2639      	movs	r6, #57	; 0x39
1000eb6c:	429c      	cmp	r4, r3
1000eb6e:	d100      	bne.n	1000eb72 <at_ble_event_get+0x22e>
1000eb70:	e1dd      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eb72:	e0cf      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb74:	23d1      	movs	r3, #209	; 0xd1
1000eb76:	011b      	lsls	r3, r3, #4
1000eb78:	429c      	cmp	r4, r3
1000eb7a:	d100      	bne.n	1000eb7e <at_ble_event_get+0x23a>
1000eb7c:	e0d6      	b.n	1000ed2c <at_ble_event_get+0x3e8>
1000eb7e:	4b47      	ldr	r3, [pc, #284]	; (1000ec9c <at_ble_event_get+0x358>)
1000eb80:	429c      	cmp	r4, r3
1000eb82:	d100      	bne.n	1000eb86 <at_ble_event_get+0x242>
1000eb84:	e0d8      	b.n	1000ed38 <at_ble_event_get+0x3f4>
1000eb86:	e0c5      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000eb88:	4b45      	ldr	r3, [pc, #276]	; (1000eca0 <at_ble_event_get+0x35c>)
1000eb8a:	429c      	cmp	r4, r3
1000eb8c:	d100      	bne.n	1000eb90 <at_ble_event_get+0x24c>
1000eb8e:	e117      	b.n	1000edc0 <at_ble_event_get+0x47c>
1000eb90:	d82e      	bhi.n	1000ebf0 <at_ble_event_get+0x2ac>
1000eb92:	4b44      	ldr	r3, [pc, #272]	; (1000eca4 <at_ble_event_get+0x360>)
1000eb94:	429c      	cmp	r4, r3
1000eb96:	d100      	bne.n	1000eb9a <at_ble_event_get+0x256>
1000eb98:	e13d      	b.n	1000ee16 <at_ble_event_get+0x4d2>
1000eb9a:	d812      	bhi.n	1000ebc2 <at_ble_event_get+0x27e>
1000eb9c:	4b42      	ldr	r3, [pc, #264]	; (1000eca8 <at_ble_event_get+0x364>)
1000eb9e:	429c      	cmp	r4, r3
1000eba0:	d100      	bne.n	1000eba4 <at_ble_event_get+0x260>
1000eba2:	e0e8      	b.n	1000ed76 <at_ble_event_get+0x432>
1000eba4:	d804      	bhi.n	1000ebb0 <at_ble_event_get+0x26c>
1000eba6:	3b03      	subs	r3, #3
1000eba8:	429c      	cmp	r4, r3
1000ebaa:	d100      	bne.n	1000ebae <at_ble_event_get+0x26a>
1000ebac:	e0d0      	b.n	1000ed50 <at_ble_event_get+0x40c>
1000ebae:	e0b1      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ebb0:	4b3e      	ldr	r3, [pc, #248]	; (1000ecac <at_ble_event_get+0x368>)
1000ebb2:	429c      	cmp	r4, r3
1000ebb4:	d100      	bne.n	1000ebb8 <at_ble_event_get+0x274>
1000ebb6:	e0d0      	b.n	1000ed5a <at_ble_event_get+0x416>
1000ebb8:	4b3d      	ldr	r3, [pc, #244]	; (1000ecb0 <at_ble_event_get+0x36c>)
1000ebba:	429c      	cmp	r4, r3
1000ebbc:	d100      	bne.n	1000ebc0 <at_ble_event_get+0x27c>
1000ebbe:	e0f9      	b.n	1000edb4 <at_ble_event_get+0x470>
1000ebc0:	e0a8      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ebc2:	4b3c      	ldr	r3, [pc, #240]	; (1000ecb4 <at_ble_event_get+0x370>)
1000ebc4:	429c      	cmp	r4, r3
1000ebc6:	d100      	bne.n	1000ebca <at_ble_event_get+0x286>
1000ebc8:	e0db      	b.n	1000ed82 <at_ble_event_get+0x43e>
1000ebca:	d808      	bhi.n	1000ebde <at_ble_event_get+0x29a>
1000ebcc:	4b3a      	ldr	r3, [pc, #232]	; (1000ecb8 <at_ble_event_get+0x374>)
1000ebce:	429c      	cmp	r4, r3
1000ebd0:	d100      	bne.n	1000ebd4 <at_ble_event_get+0x290>
1000ebd2:	e11b      	b.n	1000ee0c <at_ble_event_get+0x4c8>
1000ebd4:	4b39      	ldr	r3, [pc, #228]	; (1000ecbc <at_ble_event_get+0x378>)
1000ebd6:	429c      	cmp	r4, r3
1000ebd8:	d100      	bne.n	1000ebdc <at_ble_event_get+0x298>
1000ebda:	e0d8      	b.n	1000ed8e <at_ble_event_get+0x44a>
1000ebdc:	e09a      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ebde:	4b38      	ldr	r3, [pc, #224]	; (1000ecc0 <at_ble_event_get+0x37c>)
1000ebe0:	429c      	cmp	r4, r3
1000ebe2:	d100      	bne.n	1000ebe6 <at_ble_event_get+0x2a2>
1000ebe4:	e0d8      	b.n	1000ed98 <at_ble_event_get+0x454>
1000ebe6:	4b37      	ldr	r3, [pc, #220]	; (1000ecc4 <at_ble_event_get+0x380>)
1000ebe8:	429c      	cmp	r4, r3
1000ebea:	d100      	bne.n	1000ebee <at_ble_event_get+0x2aa>
1000ebec:	e0db      	b.n	1000eda6 <at_ble_event_get+0x462>
1000ebee:	e091      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ebf0:	4b35      	ldr	r3, [pc, #212]	; (1000ecc8 <at_ble_event_get+0x384>)
1000ebf2:	429c      	cmp	r4, r3
1000ebf4:	d100      	bne.n	1000ebf8 <at_ble_event_get+0x2b4>
1000ebf6:	e0f7      	b.n	1000ede8 <at_ble_event_get+0x4a4>
1000ebf8:	d876      	bhi.n	1000ece8 <at_ble_event_get+0x3a4>
1000ebfa:	4b34      	ldr	r3, [pc, #208]	; (1000eccc <at_ble_event_get+0x388>)
1000ebfc:	429c      	cmp	r4, r3
1000ebfe:	d100      	bne.n	1000ec02 <at_ble_event_get+0x2be>
1000ec00:	e0f8      	b.n	1000edf4 <at_ble_event_get+0x4b0>
1000ec02:	d869      	bhi.n	1000ecd8 <at_ble_event_get+0x394>
1000ec04:	4b32      	ldr	r3, [pc, #200]	; (1000ecd0 <at_ble_event_get+0x38c>)
1000ec06:	429c      	cmp	r4, r3
1000ec08:	d100      	bne.n	1000ec0c <at_ble_event_get+0x2c8>
1000ec0a:	e0e0      	b.n	1000edce <at_ble_event_get+0x48a>
1000ec0c:	4b31      	ldr	r3, [pc, #196]	; (1000ecd4 <at_ble_event_get+0x390>)
1000ec0e:	429c      	cmp	r4, r3
1000ec10:	d100      	bne.n	1000ec14 <at_ble_event_get+0x2d0>
1000ec12:	e0a9      	b.n	1000ed68 <at_ble_event_get+0x424>
1000ec14:	e07e      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ec16:	46c0      	nop			; (mov r8, r8)
1000ec18:	100102d5 	.word	0x100102d5
1000ec1c:	10018368 	.word	0x10018368
1000ec20:	1000e1c9 	.word	0x1000e1c9
1000ec24:	1001836c 	.word	0x1001836c
1000ec28:	10018364 	.word	0x10018364
1000ec2c:	10018354 	.word	0x10018354
1000ec30:	1000e82d 	.word	0x1000e82d
1000ec34:	100138f9 	.word	0x100138f9
1000ec38:	0000ffff 	.word	0x0000ffff
1000ec3c:	0000fffe 	.word	0x0000fffe
1000ec40:	1000e441 	.word	0x1000e441
1000ec44:	100102d7 	.word	0x100102d7
1000ec48:	0000201e 	.word	0x0000201e
1000ec4c:	0000201d 	.word	0x0000201d
1000ec50:	00000c03 	.word	0x00000c03
1000ec54:	0000201f 	.word	0x0000201f
1000ec58:	00000d1c 	.word	0x00000d1c
1000ec5c:	00000c0c 	.word	0x00000c0c
1000ec60:	00000c02 	.word	0x00000c02
1000ec64:	00000a02 	.word	0x00000a02
1000ec68:	00000a03 	.word	0x00000a03
1000ec6c:	00000c06 	.word	0x00000c06
1000ec70:	00000c04 	.word	0x00000c04
1000ec74:	00000c05 	.word	0x00000c05
1000ec78:	00000c07 	.word	0x00000c07
1000ec7c:	00000c09 	.word	0x00000c09
1000ec80:	00000c17 	.word	0x00000c17
1000ec84:	00000c12 	.word	0x00000c12
1000ec88:	00000c0d 	.word	0x00000c0d
1000ec8c:	00000c13 	.word	0x00000c13
1000ec90:	00000c15 	.word	0x00000c15
1000ec94:	00000d08 	.word	0x00000d08
1000ec98:	00000d01 	.word	0x00000d01
1000ec9c:	00000d15 	.word	0x00000d15
1000eca0:	00000e1b 	.word	0x00000e1b
1000eca4:	00000e0f 	.word	0x00000e0f
1000eca8:	00000e03 	.word	0x00000e03
1000ecac:	00000e06 	.word	0x00000e06
1000ecb0:	00000e0a 	.word	0x00000e0a
1000ecb4:	00000e15 	.word	0x00000e15
1000ecb8:	00000e11 	.word	0x00000e11
1000ecbc:	00000e13 	.word	0x00000e13
1000ecc0:	00000e17 	.word	0x00000e17
1000ecc4:	00000e19 	.word	0x00000e19
1000ecc8:	00000e27 	.word	0x00000e27
1000eccc:	00000e21 	.word	0x00000e21
1000ecd0:	00000e1c 	.word	0x00000e1c
1000ecd4:	00000e1d 	.word	0x00000e1d
1000ecd8:	4b9f      	ldr	r3, [pc, #636]	; (1000ef58 <at_ble_event_get+0x614>)
1000ecda:	429c      	cmp	r4, r3
1000ecdc:	d07e      	beq.n	1000eddc <at_ble_event_get+0x498>
1000ecde:	4b9f      	ldr	r3, [pc, #636]	; (1000ef5c <at_ble_event_get+0x618>)
1000ece0:	429c      	cmp	r4, r3
1000ece2:	d100      	bne.n	1000ece6 <at_ble_event_get+0x3a2>
1000ece4:	e08c      	b.n	1000ee00 <at_ble_event_get+0x4bc>
1000ece6:	e015      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ece8:	4b9d      	ldr	r3, [pc, #628]	; (1000ef60 <at_ble_event_get+0x61c>)
1000ecea:	429c      	cmp	r4, r3
1000ecec:	d100      	bne.n	1000ecf0 <at_ble_event_get+0x3ac>
1000ecee:	e10a      	b.n	1000ef06 <at_ble_event_get+0x5c2>
1000ecf0:	d808      	bhi.n	1000ed04 <at_ble_event_get+0x3c0>
1000ecf2:	4b9c      	ldr	r3, [pc, #624]	; (1000ef64 <at_ble_event_get+0x620>)
1000ecf4:	429c      	cmp	r4, r3
1000ecf6:	d100      	bne.n	1000ecfa <at_ble_event_get+0x3b6>
1000ecf8:	e0f7      	b.n	1000eeea <at_ble_event_get+0x5a6>
1000ecfa:	4b9b      	ldr	r3, [pc, #620]	; (1000ef68 <at_ble_event_get+0x624>)
1000ecfc:	429c      	cmp	r4, r3
1000ecfe:	d100      	bne.n	1000ed02 <at_ble_event_get+0x3be>
1000ed00:	e0fa      	b.n	1000eef8 <at_ble_event_get+0x5b4>
1000ed02:	e007      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ed04:	4b99      	ldr	r3, [pc, #612]	; (1000ef6c <at_ble_event_get+0x628>)
1000ed06:	429c      	cmp	r4, r3
1000ed08:	d100      	bne.n	1000ed0c <at_ble_event_get+0x3c8>
1000ed0a:	e103      	b.n	1000ef14 <at_ble_event_get+0x5d0>
1000ed0c:	4b98      	ldr	r3, [pc, #608]	; (1000ef70 <at_ble_event_get+0x62c>)
1000ed0e:	429c      	cmp	r4, r3
1000ed10:	d100      	bne.n	1000ed14 <at_ble_event_get+0x3d0>
1000ed12:	e106      	b.n	1000ef22 <at_ble_event_get+0x5de>
1000ed14:	2600      	movs	r6, #0
1000ed16:	e10a      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed18:	1c30      	adds	r0, r6, #0
1000ed1a:	1c29      	adds	r1, r5, #0
1000ed1c:	4b95      	ldr	r3, [pc, #596]	; (1000ef74 <at_ble_event_get+0x630>)
1000ed1e:	e014      	b.n	1000ed4a <at_ble_event_get+0x406>
1000ed20:	1c30      	adds	r0, r6, #0
1000ed22:	1c29      	adds	r1, r5, #0
1000ed24:	4b94      	ldr	r3, [pc, #592]	; (1000ef78 <at_ble_event_get+0x634>)
1000ed26:	4798      	blx	r3
1000ed28:	2604      	movs	r6, #4
1000ed2a:	e100      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed2c:	1c30      	adds	r0, r6, #0
1000ed2e:	1c29      	adds	r1, r5, #0
1000ed30:	4b92      	ldr	r3, [pc, #584]	; (1000ef7c <at_ble_event_get+0x638>)
1000ed32:	4798      	blx	r3
1000ed34:	2601      	movs	r6, #1
1000ed36:	e0fa      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed38:	1c30      	adds	r0, r6, #0
1000ed3a:	1c29      	adds	r1, r5, #0
1000ed3c:	4b90      	ldr	r3, [pc, #576]	; (1000ef80 <at_ble_event_get+0x63c>)
1000ed3e:	4798      	blx	r3
1000ed40:	260f      	movs	r6, #15
1000ed42:	e0f4      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed44:	1c30      	adds	r0, r6, #0
1000ed46:	1c29      	adds	r1, r5, #0
1000ed48:	4b8e      	ldr	r3, [pc, #568]	; (1000ef84 <at_ble_event_get+0x640>)
1000ed4a:	4798      	blx	r3
1000ed4c:	1c06      	adds	r6, r0, #0
1000ed4e:	e0ee      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed50:	9801      	ldr	r0, [sp, #4]
1000ed52:	1c31      	adds	r1, r6, #0
1000ed54:	1c2a      	adds	r2, r5, #0
1000ed56:	4b8c      	ldr	r3, [pc, #560]	; (1000ef88 <at_ble_event_get+0x644>)
1000ed58:	e017      	b.n	1000ed8a <at_ble_event_get+0x446>
1000ed5a:	1c31      	adds	r1, r6, #0
1000ed5c:	9801      	ldr	r0, [sp, #4]
1000ed5e:	1c2a      	adds	r2, r5, #0
1000ed60:	4b8a      	ldr	r3, [pc, #552]	; (1000ef8c <at_ble_event_get+0x648>)
1000ed62:	4798      	blx	r3
1000ed64:	2611      	movs	r6, #17
1000ed66:	e0e2      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed68:	1c31      	adds	r1, r6, #0
1000ed6a:	9801      	ldr	r0, [sp, #4]
1000ed6c:	1c2a      	adds	r2, r5, #0
1000ed6e:	4b88      	ldr	r3, [pc, #544]	; (1000ef90 <at_ble_event_get+0x64c>)
1000ed70:	4798      	blx	r3
1000ed72:	2612      	movs	r6, #18
1000ed74:	e0db      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed76:	1c30      	adds	r0, r6, #0
1000ed78:	1c29      	adds	r1, r5, #0
1000ed7a:	4b86      	ldr	r3, [pc, #536]	; (1000ef94 <at_ble_event_get+0x650>)
1000ed7c:	4798      	blx	r3
1000ed7e:	2606      	movs	r6, #6
1000ed80:	e0d5      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ed82:	1c31      	adds	r1, r6, #0
1000ed84:	1c2a      	adds	r2, r5, #0
1000ed86:	9801      	ldr	r0, [sp, #4]
1000ed88:	4b83      	ldr	r3, [pc, #524]	; (1000ef98 <at_ble_event_get+0x654>)
1000ed8a:	4798      	blx	r3
1000ed8c:	e7de      	b.n	1000ed4c <at_ble_event_get+0x408>
1000ed8e:	9801      	ldr	r0, [sp, #4]
1000ed90:	1c31      	adds	r1, r6, #0
1000ed92:	1c2a      	adds	r2, r5, #0
1000ed94:	4b81      	ldr	r3, [pc, #516]	; (1000ef9c <at_ble_event_get+0x658>)
1000ed96:	e7f8      	b.n	1000ed8a <at_ble_event_get+0x446>
1000ed98:	1c31      	adds	r1, r6, #0
1000ed9a:	9801      	ldr	r0, [sp, #4]
1000ed9c:	1c2a      	adds	r2, r5, #0
1000ed9e:	4b80      	ldr	r3, [pc, #512]	; (1000efa0 <at_ble_event_get+0x65c>)
1000eda0:	4798      	blx	r3
1000eda2:	260d      	movs	r6, #13
1000eda4:	e0c3      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eda6:	1c31      	adds	r1, r6, #0
1000eda8:	9801      	ldr	r0, [sp, #4]
1000edaa:	1c2a      	adds	r2, r5, #0
1000edac:	4b7d      	ldr	r3, [pc, #500]	; (1000efa4 <at_ble_event_get+0x660>)
1000edae:	4798      	blx	r3
1000edb0:	260e      	movs	r6, #14
1000edb2:	e0bc      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000edb4:	9801      	ldr	r0, [sp, #4]
1000edb6:	1c31      	adds	r1, r6, #0
1000edb8:	1c2a      	adds	r2, r5, #0
1000edba:	4b7b      	ldr	r3, [pc, #492]	; (1000efa8 <at_ble_event_get+0x664>)
1000edbc:	4798      	blx	r3
1000edbe:	e084      	b.n	1000eeca <at_ble_event_get+0x586>
1000edc0:	1c31      	adds	r1, r6, #0
1000edc2:	9801      	ldr	r0, [sp, #4]
1000edc4:	1c2a      	adds	r2, r5, #0
1000edc6:	4b79      	ldr	r3, [pc, #484]	; (1000efac <at_ble_event_get+0x668>)
1000edc8:	4798      	blx	r3
1000edca:	260b      	movs	r6, #11
1000edcc:	e0af      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000edce:	1c31      	adds	r1, r6, #0
1000edd0:	9801      	ldr	r0, [sp, #4]
1000edd2:	1c2a      	adds	r2, r5, #0
1000edd4:	4b76      	ldr	r3, [pc, #472]	; (1000efb0 <at_ble_event_get+0x66c>)
1000edd6:	4798      	blx	r3
1000edd8:	2610      	movs	r6, #16
1000edda:	e0a8      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eddc:	1c30      	adds	r0, r6, #0
1000edde:	1c29      	adds	r1, r5, #0
1000ede0:	4b74      	ldr	r3, [pc, #464]	; (1000efb4 <at_ble_event_get+0x670>)
1000ede2:	4798      	blx	r3
1000ede4:	2628      	movs	r6, #40	; 0x28
1000ede6:	e0a2      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ede8:	1c30      	adds	r0, r6, #0
1000edea:	1c29      	adds	r1, r5, #0
1000edec:	4b72      	ldr	r3, [pc, #456]	; (1000efb8 <at_ble_event_get+0x674>)
1000edee:	4798      	blx	r3
1000edf0:	2629      	movs	r6, #41	; 0x29
1000edf2:	e09c      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000edf4:	1c30      	adds	r0, r6, #0
1000edf6:	1c29      	adds	r1, r5, #0
1000edf8:	4b70      	ldr	r3, [pc, #448]	; (1000efbc <at_ble_event_get+0x678>)
1000edfa:	4798      	blx	r3
1000edfc:	2627      	movs	r6, #39	; 0x27
1000edfe:	e096      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee00:	1c30      	adds	r0, r6, #0
1000ee02:	1c29      	adds	r1, r5, #0
1000ee04:	4b6e      	ldr	r3, [pc, #440]	; (1000efc0 <at_ble_event_get+0x67c>)
1000ee06:	4798      	blx	r3
1000ee08:	262a      	movs	r6, #42	; 0x2a
1000ee0a:	e090      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee0c:	9801      	ldr	r0, [sp, #4]
1000ee0e:	1c31      	adds	r1, r6, #0
1000ee10:	1c2a      	adds	r2, r5, #0
1000ee12:	4b6c      	ldr	r3, [pc, #432]	; (1000efc4 <at_ble_event_get+0x680>)
1000ee14:	e7b9      	b.n	1000ed8a <at_ble_event_get+0x446>
1000ee16:	9801      	ldr	r0, [sp, #4]
1000ee18:	1c31      	adds	r1, r6, #0
1000ee1a:	1c2a      	adds	r2, r5, #0
1000ee1c:	4b6a      	ldr	r3, [pc, #424]	; (1000efc8 <at_ble_event_get+0x684>)
1000ee1e:	e7b4      	b.n	1000ed8a <at_ble_event_get+0x446>
1000ee20:	1c30      	adds	r0, r6, #0
1000ee22:	1c29      	adds	r1, r5, #0
1000ee24:	4b69      	ldr	r3, [pc, #420]	; (1000efcc <at_ble_event_get+0x688>)
1000ee26:	4798      	blx	r3
1000ee28:	262b      	movs	r6, #43	; 0x2b
1000ee2a:	e080      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee2c:	1c30      	adds	r0, r6, #0
1000ee2e:	1c29      	adds	r1, r5, #0
1000ee30:	4b67      	ldr	r3, [pc, #412]	; (1000efd0 <at_ble_event_get+0x68c>)
1000ee32:	4798      	blx	r3
1000ee34:	262c      	movs	r6, #44	; 0x2c
1000ee36:	e07a      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee38:	1c31      	adds	r1, r6, #0
1000ee3a:	9801      	ldr	r0, [sp, #4]
1000ee3c:	1c2a      	adds	r2, r5, #0
1000ee3e:	4b65      	ldr	r3, [pc, #404]	; (1000efd4 <at_ble_event_get+0x690>)
1000ee40:	4798      	blx	r3
1000ee42:	2613      	movs	r6, #19
1000ee44:	e073      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee46:	1c31      	adds	r1, r6, #0
1000ee48:	9801      	ldr	r0, [sp, #4]
1000ee4a:	1c2a      	adds	r2, r5, #0
1000ee4c:	4b62      	ldr	r3, [pc, #392]	; (1000efd8 <at_ble_event_get+0x694>)
1000ee4e:	4798      	blx	r3
1000ee50:	2614      	movs	r6, #20
1000ee52:	e06c      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee54:	1c31      	adds	r1, r6, #0
1000ee56:	9801      	ldr	r0, [sp, #4]
1000ee58:	1c2a      	adds	r2, r5, #0
1000ee5a:	4b60      	ldr	r3, [pc, #384]	; (1000efdc <at_ble_event_get+0x698>)
1000ee5c:	4798      	blx	r3
1000ee5e:	2615      	movs	r6, #21
1000ee60:	e065      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee62:	1c31      	adds	r1, r6, #0
1000ee64:	9801      	ldr	r0, [sp, #4]
1000ee66:	1c2a      	adds	r2, r5, #0
1000ee68:	4b5d      	ldr	r3, [pc, #372]	; (1000efe0 <at_ble_event_get+0x69c>)
1000ee6a:	4798      	blx	r3
1000ee6c:	2616      	movs	r6, #22
1000ee6e:	e05e      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee70:	9801      	ldr	r0, [sp, #4]
1000ee72:	1c31      	adds	r1, r6, #0
1000ee74:	1c2a      	adds	r2, r5, #0
1000ee76:	4b5b      	ldr	r3, [pc, #364]	; (1000efe4 <at_ble_event_get+0x6a0>)
1000ee78:	e787      	b.n	1000ed8a <at_ble_event_get+0x446>
1000ee7a:	1c31      	adds	r1, r6, #0
1000ee7c:	9801      	ldr	r0, [sp, #4]
1000ee7e:	1c2a      	adds	r2, r5, #0
1000ee80:	4b58      	ldr	r3, [pc, #352]	; (1000efe4 <at_ble_event_get+0x6a0>)
1000ee82:	4798      	blx	r3
1000ee84:	88a9      	ldrh	r1, [r5, #4]
1000ee86:	1c06      	adds	r6, r0, #0
1000ee88:	4b57      	ldr	r3, [pc, #348]	; (1000efe8 <at_ble_event_get+0x6a4>)
1000ee8a:	8828      	ldrh	r0, [r5, #0]
1000ee8c:	4798      	blx	r3
1000ee8e:	e04e      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee90:	1c31      	adds	r1, r6, #0
1000ee92:	9801      	ldr	r0, [sp, #4]
1000ee94:	1c2a      	adds	r2, r5, #0
1000ee96:	4b55      	ldr	r3, [pc, #340]	; (1000efec <at_ble_event_get+0x6a8>)
1000ee98:	4798      	blx	r3
1000ee9a:	2623      	movs	r6, #35	; 0x23
1000ee9c:	e047      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ee9e:	9801      	ldr	r0, [sp, #4]
1000eea0:	1c31      	adds	r1, r6, #0
1000eea2:	1c2a      	adds	r2, r5, #0
1000eea4:	4b52      	ldr	r3, [pc, #328]	; (1000eff0 <at_ble_event_get+0x6ac>)
1000eea6:	e770      	b.n	1000ed8a <at_ble_event_get+0x446>
1000eea8:	9b01      	ldr	r3, [sp, #4]
1000eeaa:	1c30      	adds	r0, r6, #0
1000eeac:	0a1f      	lsrs	r7, r3, #8
1000eeae:	802f      	strh	r7, [r5, #0]
1000eeb0:	1c29      	adds	r1, r5, #0
1000eeb2:	4b50      	ldr	r3, [pc, #320]	; (1000eff4 <at_ble_event_get+0x6b0>)
1000eeb4:	e749      	b.n	1000ed4a <at_ble_event_get+0x406>
1000eeb6:	9801      	ldr	r0, [sp, #4]
1000eeb8:	1c31      	adds	r1, r6, #0
1000eeba:	1c2a      	adds	r2, r5, #0
1000eebc:	4b4e      	ldr	r3, [pc, #312]	; (1000eff8 <at_ble_event_get+0x6b4>)
1000eebe:	e764      	b.n	1000ed8a <at_ble_event_get+0x446>
1000eec0:	1c30      	adds	r0, r6, #0
1000eec2:	1c29      	adds	r1, r5, #0
1000eec4:	9a01      	ldr	r2, [sp, #4]
1000eec6:	4b4d      	ldr	r3, [pc, #308]	; (1000effc <at_ble_event_get+0x6b8>)
1000eec8:	4798      	blx	r3
1000eeca:	263b      	movs	r6, #59	; 0x3b
1000eecc:	e02f      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eece:	1c31      	adds	r1, r6, #0
1000eed0:	9801      	ldr	r0, [sp, #4]
1000eed2:	1c2a      	adds	r2, r5, #0
1000eed4:	4b4a      	ldr	r3, [pc, #296]	; (1000f000 <at_ble_event_get+0x6bc>)
1000eed6:	4798      	blx	r3
1000eed8:	2618      	movs	r6, #24
1000eeda:	e028      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eedc:	1c31      	adds	r1, r6, #0
1000eede:	9801      	ldr	r0, [sp, #4]
1000eee0:	1c2a      	adds	r2, r5, #0
1000eee2:	4b48      	ldr	r3, [pc, #288]	; (1000f004 <at_ble_event_get+0x6c0>)
1000eee4:	4798      	blx	r3
1000eee6:	2620      	movs	r6, #32
1000eee8:	e021      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eeea:	1c31      	adds	r1, r6, #0
1000eeec:	9801      	ldr	r0, [sp, #4]
1000eeee:	1c2a      	adds	r2, r5, #0
1000eef0:	4b45      	ldr	r3, [pc, #276]	; (1000f008 <at_ble_event_get+0x6c4>)
1000eef2:	4798      	blx	r3
1000eef4:	2633      	movs	r6, #51	; 0x33
1000eef6:	e01a      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000eef8:	1c31      	adds	r1, r6, #0
1000eefa:	9801      	ldr	r0, [sp, #4]
1000eefc:	1c2a      	adds	r2, r5, #0
1000eefe:	4b43      	ldr	r3, [pc, #268]	; (1000f00c <at_ble_event_get+0x6c8>)
1000ef00:	4798      	blx	r3
1000ef02:	2630      	movs	r6, #48	; 0x30
1000ef04:	e013      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ef06:	1c31      	adds	r1, r6, #0
1000ef08:	9801      	ldr	r0, [sp, #4]
1000ef0a:	1c2a      	adds	r2, r5, #0
1000ef0c:	4b40      	ldr	r3, [pc, #256]	; (1000f010 <at_ble_event_get+0x6cc>)
1000ef0e:	4798      	blx	r3
1000ef10:	2634      	movs	r6, #52	; 0x34
1000ef12:	e00c      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ef14:	1c31      	adds	r1, r6, #0
1000ef16:	9801      	ldr	r0, [sp, #4]
1000ef18:	1c2a      	adds	r2, r5, #0
1000ef1a:	4b3e      	ldr	r3, [pc, #248]	; (1000f014 <at_ble_event_get+0x6d0>)
1000ef1c:	4798      	blx	r3
1000ef1e:	2635      	movs	r6, #53	; 0x35
1000ef20:	e005      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ef22:	1c31      	adds	r1, r6, #0
1000ef24:	9801      	ldr	r0, [sp, #4]
1000ef26:	1c2a      	adds	r2, r5, #0
1000ef28:	4b3b      	ldr	r3, [pc, #236]	; (1000f018 <at_ble_event_get+0x6d4>)
1000ef2a:	4798      	blx	r3
1000ef2c:	2632      	movs	r6, #50	; 0x32
1000ef2e:	9b03      	ldr	r3, [sp, #12]
1000ef30:	701e      	strb	r6, [r3, #0]
1000ef32:	2300      	movs	r3, #0
1000ef34:	9302      	str	r3, [sp, #8]
1000ef36:	e57a      	b.n	1000ea2e <at_ble_event_get+0xea>
1000ef38:	23d0      	movs	r3, #208	; 0xd0
1000ef3a:	e7fb      	b.n	1000ef34 <at_ble_event_get+0x5f0>
1000ef3c:	9b01      	ldr	r3, [sp, #4]
1000ef3e:	9e02      	ldr	r6, [sp, #8]
1000ef40:	2bbb      	cmp	r3, #187	; 0xbb
1000ef42:	d000      	beq.n	1000ef46 <at_ble_event_get+0x602>
1000ef44:	e6e6      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ef46:	e7f2      	b.n	1000ef2e <at_ble_event_get+0x5ea>
1000ef48:	9b02      	ldr	r3, [sp, #8]
1000ef4a:	2b00      	cmp	r3, #0
1000ef4c:	d000      	beq.n	1000ef50 <at_ble_event_get+0x60c>
1000ef4e:	e56e      	b.n	1000ea2e <at_ble_event_get+0xea>
1000ef50:	e6e0      	b.n	1000ed14 <at_ble_event_get+0x3d0>
1000ef52:	9802      	ldr	r0, [sp, #8]
1000ef54:	b007      	add	sp, #28
1000ef56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef58:	00000e22 	.word	0x00000e22
1000ef5c:	00000e25 	.word	0x00000e25
1000ef60:	00001b05 	.word	0x00001b05
1000ef64:	00001b01 	.word	0x00001b01
1000ef68:	00001b03 	.word	0x00001b03
1000ef6c:	00001b06 	.word	0x00001b06
1000ef70:	00001b08 	.word	0x00001b08
1000ef74:	10011101 	.word	0x10011101
1000ef78:	100110e5 	.word	0x100110e5
1000ef7c:	10011381 	.word	0x10011381
1000ef80:	10011471 	.word	0x10011471
1000ef84:	10011495 	.word	0x10011495
1000ef88:	10010479 	.word	0x10010479
1000ef8c:	10010cf9 	.word	0x10010cf9
1000ef90:	10010d75 	.word	0x10010d75
1000ef94:	10010731 	.word	0x10010731
1000ef98:	100107cd 	.word	0x100107cd
1000ef9c:	100108a5 	.word	0x100108a5
1000efa0:	10010b2d 	.word	0x10010b2d
1000efa4:	10010bcd 	.word	0x10010bcd
1000efa8:	10010c85 	.word	0x10010c85
1000efac:	10010cad 	.word	0x10010cad
1000efb0:	10010cc3 	.word	0x10010cc3
1000efb4:	10010d8d 	.word	0x10010d8d
1000efb8:	10010dbb 	.word	0x10010dbb
1000efbc:	10010dd1 	.word	0x10010dd1
1000efc0:	10010dfb 	.word	0x10010dfb
1000efc4:	10010c29 	.word	0x10010c29
1000efc8:	10010c53 	.word	0x10010c53
1000efcc:	1000feb9 	.word	0x1000feb9
1000efd0:	1000fee5 	.word	0x1000fee5
1000efd4:	1001163d 	.word	0x1001163d
1000efd8:	10011679 	.word	0x10011679
1000efdc:	100116c1 	.word	0x100116c1
1000efe0:	10011705 	.word	0x10011705
1000efe4:	10011739 	.word	0x10011739
1000efe8:	100115fd 	.word	0x100115fd
1000efec:	10011805 	.word	0x10011805
1000eff0:	1001178d 	.word	0x1001178d
1000eff4:	1000fe11 	.word	0x1000fe11
1000eff8:	1000fe7d 	.word	0x1000fe7d
1000effc:	1000fe41 	.word	0x1000fe41
1000f000:	10011815 	.word	0x10011815
1000f004:	10011855 	.word	0x10011855
1000f008:	10011b1d 	.word	0x10011b1d
1000f00c:	10011b27 	.word	0x10011b27
1000f010:	10011b2d 	.word	0x10011b2d
1000f014:	10011b33 	.word	0x10011b33
1000f018:	10011b3f 	.word	0x10011b3f

1000f01c <internal_event_flush>:
1000f01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f01e:	490e      	ldr	r1, [pc, #56]	; (1000f058 <internal_event_flush+0x3c>)
1000f020:	2400      	movs	r4, #0
1000f022:	680b      	ldr	r3, [r1, #0]
1000f024:	1c0f      	adds	r7, r1, #0
1000f026:	1c1e      	adds	r6, r3, #0
1000f028:	4a0c      	ldr	r2, [pc, #48]	; (1000f05c <internal_event_flush+0x40>)
1000f02a:	6815      	ldr	r5, [r2, #0]
1000f02c:	9201      	str	r2, [sp, #4]
1000f02e:	2b00      	cmp	r3, #0
1000f030:	d00e      	beq.n	1000f050 <internal_event_flush+0x34>
1000f032:	889a      	ldrh	r2, [r3, #4]
1000f034:	6819      	ldr	r1, [r3, #0]
1000f036:	4282      	cmp	r2, r0
1000f038:	d107      	bne.n	1000f04a <internal_event_flush+0x2e>
1000f03a:	2c00      	cmp	r4, #0
1000f03c:	d001      	beq.n	1000f042 <internal_event_flush+0x26>
1000f03e:	6021      	str	r1, [r4, #0]
1000f040:	e000      	b.n	1000f044 <internal_event_flush+0x28>
1000f042:	1c0e      	adds	r6, r1, #0
1000f044:	601d      	str	r5, [r3, #0]
1000f046:	1c1d      	adds	r5, r3, #0
1000f048:	1c23      	adds	r3, r4, #0
1000f04a:	1c1c      	adds	r4, r3, #0
1000f04c:	1c0b      	adds	r3, r1, #0
1000f04e:	e7ee      	b.n	1000f02e <internal_event_flush+0x12>
1000f050:	9b01      	ldr	r3, [sp, #4]
1000f052:	603e      	str	r6, [r7, #0]
1000f054:	601d      	str	r5, [r3, #0]
1000f056:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f058:	10018368 	.word	0x10018368
1000f05c:	1001836c 	.word	0x1001836c

1000f060 <internal_conn_flush>:
1000f060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f062:	4a12      	ldr	r2, [pc, #72]	; (1000f0ac <internal_conn_flush+0x4c>)
1000f064:	9000      	str	r0, [sp, #0]
1000f066:	6813      	ldr	r3, [r2, #0]
1000f068:	4811      	ldr	r0, [pc, #68]	; (1000f0b0 <internal_conn_flush+0x50>)
1000f06a:	1c1f      	adds	r7, r3, #0
1000f06c:	2100      	movs	r1, #0
1000f06e:	4684      	mov	ip, r0
1000f070:	6804      	ldr	r4, [r0, #0]
1000f072:	9201      	str	r2, [sp, #4]
1000f074:	2b00      	cmp	r3, #0
1000f076:	d014      	beq.n	1000f0a2 <internal_conn_flush+0x42>
1000f078:	88d8      	ldrh	r0, [r3, #6]
1000f07a:	9a00      	ldr	r2, [sp, #0]
1000f07c:	681d      	ldr	r5, [r3, #0]
1000f07e:	0a06      	lsrs	r6, r0, #8
1000f080:	4296      	cmp	r6, r2
1000f082:	d10b      	bne.n	1000f09c <internal_conn_flush+0x3c>
1000f084:	26fd      	movs	r6, #253	; 0xfd
1000f086:	4006      	ands	r6, r0
1000f088:	2e0c      	cmp	r6, #12
1000f08a:	d107      	bne.n	1000f09c <internal_conn_flush+0x3c>
1000f08c:	2900      	cmp	r1, #0
1000f08e:	d001      	beq.n	1000f094 <internal_conn_flush+0x34>
1000f090:	600d      	str	r5, [r1, #0]
1000f092:	e000      	b.n	1000f096 <internal_conn_flush+0x36>
1000f094:	1c2f      	adds	r7, r5, #0
1000f096:	601c      	str	r4, [r3, #0]
1000f098:	1c1c      	adds	r4, r3, #0
1000f09a:	1c0b      	adds	r3, r1, #0
1000f09c:	1c19      	adds	r1, r3, #0
1000f09e:	1c2b      	adds	r3, r5, #0
1000f0a0:	e7e8      	b.n	1000f074 <internal_conn_flush+0x14>
1000f0a2:	9b01      	ldr	r3, [sp, #4]
1000f0a4:	601f      	str	r7, [r3, #0]
1000f0a6:	4663      	mov	r3, ip
1000f0a8:	601c      	str	r4, [r3, #0]
1000f0aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f0ac:	10018368 	.word	0x10018368
1000f0b0:	1001836c 	.word	0x1001836c

1000f0b4 <at_ble_device_name_set>:
1000f0b4:	b530      	push	{r4, r5, lr}
1000f0b6:	23cf      	movs	r3, #207	; 0xcf
1000f0b8:	2800      	cmp	r0, #0
1000f0ba:	d010      	beq.n	1000f0de <at_ble_device_name_set+0x2a>
1000f0bc:	1e4a      	subs	r2, r1, #1
1000f0be:	2a1f      	cmp	r2, #31
1000f0c0:	d80d      	bhi.n	1000f0de <at_ble_device_name_set+0x2a>
1000f0c2:	4a08      	ldr	r2, [pc, #32]	; (1000f0e4 <at_ble_device_name_set+0x30>)
1000f0c4:	1c13      	adds	r3, r2, #0
1000f0c6:	33aa      	adds	r3, #170	; 0xaa
1000f0c8:	8019      	strh	r1, [r3, #0]
1000f0ca:	2300      	movs	r3, #0
1000f0cc:	1c1c      	adds	r4, r3, #0
1000f0ce:	5cc5      	ldrb	r5, [r0, r3]
1000f0d0:	34ac      	adds	r4, #172	; 0xac
1000f0d2:	3301      	adds	r3, #1
1000f0d4:	5515      	strb	r5, [r2, r4]
1000f0d6:	b2dc      	uxtb	r4, r3
1000f0d8:	428c      	cmp	r4, r1
1000f0da:	d3f7      	bcc.n	1000f0cc <at_ble_device_name_set+0x18>
1000f0dc:	2300      	movs	r3, #0
1000f0de:	1c18      	adds	r0, r3, #0
1000f0e0:	bd30      	pop	{r4, r5, pc}
1000f0e2:	46c0      	nop			; (mov r8, r8)
1000f0e4:	1001930e 	.word	0x1001930e

1000f0e8 <at_ble_addr_get>:
1000f0e8:	b510      	push	{r4, lr}
1000f0ea:	1c04      	adds	r4, r0, #0
1000f0ec:	20cf      	movs	r0, #207	; 0xcf
1000f0ee:	2c00      	cmp	r4, #0
1000f0f0:	d006      	beq.n	1000f100 <at_ble_addr_get+0x18>
1000f0f2:	4b04      	ldr	r3, [pc, #16]	; (1000f104 <at_ble_addr_get+0x1c>)
1000f0f4:	38ce      	subs	r0, #206	; 0xce
1000f0f6:	1c21      	adds	r1, r4, #0
1000f0f8:	4798      	blx	r3
1000f0fa:	4b03      	ldr	r3, [pc, #12]	; (1000f108 <at_ble_addr_get+0x20>)
1000f0fc:	791b      	ldrb	r3, [r3, #4]
1000f0fe:	7023      	strb	r3, [r4, #0]
1000f100:	bd10      	pop	{r4, pc}
1000f102:	46c0      	nop			; (mov r8, r8)
1000f104:	10010f95 	.word	0x10010f95
1000f108:	1001930e 	.word	0x1001930e

1000f10c <at_ble_set_dev_config>:
1000f10c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f10e:	7906      	ldrb	r6, [r0, #4]
1000f110:	b089      	sub	sp, #36	; 0x24
1000f112:	25cf      	movs	r5, #207	; 0xcf
1000f114:	2e03      	cmp	r6, #3
1000f116:	d838      	bhi.n	1000f18a <at_ble_set_dev_config+0x7e>
1000f118:	7803      	ldrb	r3, [r0, #0]
1000f11a:	3511      	adds	r5, #17
1000f11c:	2b0f      	cmp	r3, #15
1000f11e:	d834      	bhi.n	1000f18a <at_ble_set_dev_config+0x7e>
1000f120:	2380      	movs	r3, #128	; 0x80
1000f122:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f124:	3d11      	subs	r5, #17
1000f126:	009b      	lsls	r3, r3, #2
1000f128:	429f      	cmp	r7, r3
1000f12a:	d82e      	bhi.n	1000f18a <at_ble_set_dev_config+0x7e>
1000f12c:	7fc5      	ldrb	r5, [r0, #31]
1000f12e:	7f83      	ldrb	r3, [r0, #30]
1000f130:	01ad      	lsls	r5, r5, #6
1000f132:	015b      	lsls	r3, r3, #5
1000f134:	431d      	orrs	r5, r3
1000f136:	7ec3      	ldrb	r3, [r0, #27]
1000f138:	431d      	orrs	r5, r3
1000f13a:	7f43      	ldrb	r3, [r0, #29]
1000f13c:	011b      	lsls	r3, r3, #4
1000f13e:	431d      	orrs	r5, r3
1000f140:	7f03      	ldrb	r3, [r0, #28]
1000f142:	009b      	lsls	r3, r3, #2
1000f144:	431d      	orrs	r5, r3
1000f146:	4b12      	ldr	r3, [pc, #72]	; (1000f190 <at_ble_set_dev_config+0x84>)
1000f148:	b2ed      	uxtb	r5, r5
1000f14a:	711e      	strb	r6, [r3, #4]
1000f14c:	7903      	ldrb	r3, [r0, #4]
1000f14e:	3b02      	subs	r3, #2
1000f150:	2b01      	cmp	r3, #1
1000f152:	d801      	bhi.n	1000f158 <at_ble_set_dev_config+0x4c>
1000f154:	2302      	movs	r3, #2
1000f156:	7103      	strb	r3, [r0, #4]
1000f158:	1c04      	adds	r4, r0, #0
1000f15a:	1c23      	adds	r3, r4, #0
1000f15c:	330b      	adds	r3, #11
1000f15e:	8861      	ldrh	r1, [r4, #2]
1000f160:	9307      	str	r3, [sp, #28]
1000f162:	7923      	ldrb	r3, [r4, #4]
1000f164:	7800      	ldrb	r0, [r0, #0]
1000f166:	9300      	str	r3, [sp, #0]
1000f168:	9501      	str	r5, [sp, #4]
1000f16a:	8c25      	ldrh	r5, [r4, #32]
1000f16c:	1d62      	adds	r2, r4, #5
1000f16e:	9502      	str	r5, [sp, #8]
1000f170:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f172:	9b07      	ldr	r3, [sp, #28]
1000f174:	9503      	str	r5, [sp, #12]
1000f176:	9704      	str	r7, [sp, #16]
1000f178:	4d06      	ldr	r5, [pc, #24]	; (1000f194 <at_ble_set_dev_config+0x88>)
1000f17a:	47a8      	blx	r5
1000f17c:	7126      	strb	r6, [r4, #4]
1000f17e:	1c05      	adds	r5, r0, #0
1000f180:	1c21      	adds	r1, r4, #0
1000f182:	4803      	ldr	r0, [pc, #12]	; (1000f190 <at_ble_set_dev_config+0x84>)
1000f184:	2226      	movs	r2, #38	; 0x26
1000f186:	4b04      	ldr	r3, [pc, #16]	; (1000f198 <at_ble_set_dev_config+0x8c>)
1000f188:	4798      	blx	r3
1000f18a:	1c28      	adds	r0, r5, #0
1000f18c:	b009      	add	sp, #36	; 0x24
1000f18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f190:	1001930e 	.word	0x1001930e
1000f194:	10010e8d 	.word	0x10010e8d
1000f198:	100138e7 	.word	0x100138e7

1000f19c <at_ble_init>:
1000f19c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f19e:	b087      	sub	sp, #28
1000f1a0:	af03      	add	r7, sp, #12
1000f1a2:	4954      	ldr	r1, [pc, #336]	; (1000f2f4 <at_ble_init+0x158>)
1000f1a4:	220b      	movs	r2, #11
1000f1a6:	4b54      	ldr	r3, [pc, #336]	; (1000f2f8 <at_ble_init+0x15c>)
1000f1a8:	1c04      	adds	r4, r0, #0
1000f1aa:	1c38      	adds	r0, r7, #0
1000f1ac:	4798      	blx	r3
1000f1ae:	2205      	movs	r2, #5
1000f1b0:	4b52      	ldr	r3, [pc, #328]	; (1000f2fc <at_ble_init+0x160>)
1000f1b2:	2640      	movs	r6, #64	; 0x40
1000f1b4:	801a      	strh	r2, [r3, #0]
1000f1b6:	2300      	movs	r3, #0
1000f1b8:	4a51      	ldr	r2, [pc, #324]	; (1000f300 <at_ble_init+0x164>)
1000f1ba:	6013      	str	r3, [r2, #0]
1000f1bc:	4a51      	ldr	r2, [pc, #324]	; (1000f304 <at_ble_init+0x168>)
1000f1be:	7013      	strb	r3, [r2, #0]
1000f1c0:	4a51      	ldr	r2, [pc, #324]	; (1000f308 <at_ble_init+0x16c>)
1000f1c2:	7013      	strb	r3, [r2, #0]
1000f1c4:	4b51      	ldr	r3, [pc, #324]	; (1000f30c <at_ble_init+0x170>)
1000f1c6:	4798      	blx	r3
1000f1c8:	4b51      	ldr	r3, [pc, #324]	; (1000f310 <at_ble_init+0x174>)
1000f1ca:	4798      	blx	r3
1000f1cc:	4b51      	ldr	r3, [pc, #324]	; (1000f314 <at_ble_init+0x178>)
1000f1ce:	4798      	blx	r3
1000f1d0:	4b51      	ldr	r3, [pc, #324]	; (1000f318 <at_ble_init+0x17c>)
1000f1d2:	4798      	blx	r3
1000f1d4:	2c00      	cmp	r4, #0
1000f1d6:	d100      	bne.n	1000f1da <at_ble_init+0x3e>
1000f1d8:	e089      	b.n	1000f2ee <at_ble_init+0x152>
1000f1da:	68a3      	ldr	r3, [r4, #8]
1000f1dc:	2b00      	cmp	r3, #0
1000f1de:	d100      	bne.n	1000f1e2 <at_ble_init+0x46>
1000f1e0:	e085      	b.n	1000f2ee <at_ble_init+0x152>
1000f1e2:	6923      	ldr	r3, [r4, #16]
1000f1e4:	2b00      	cmp	r3, #0
1000f1e6:	d100      	bne.n	1000f1ea <at_ble_init+0x4e>
1000f1e8:	e081      	b.n	1000f2ee <at_ble_init+0x152>
1000f1ea:	6820      	ldr	r0, [r4, #0]
1000f1ec:	2800      	cmp	r0, #0
1000f1ee:	d102      	bne.n	1000f1f6 <at_ble_init+0x5a>
1000f1f0:	6863      	ldr	r3, [r4, #4]
1000f1f2:	2b00      	cmp	r3, #0
1000f1f4:	d17b      	bne.n	1000f2ee <at_ble_init+0x152>
1000f1f6:	4b49      	ldr	r3, [pc, #292]	; (1000f31c <at_ble_init+0x180>)
1000f1f8:	6861      	ldr	r1, [r4, #4]
1000f1fa:	4798      	blx	r3
1000f1fc:	4b48      	ldr	r3, [pc, #288]	; (1000f320 <at_ble_init+0x184>)
1000f1fe:	4798      	blx	r3
1000f200:	2801      	cmp	r0, #1
1000f202:	d901      	bls.n	1000f208 <at_ble_init+0x6c>
1000f204:	26e2      	movs	r6, #226	; 0xe2
1000f206:	e072      	b.n	1000f2ee <at_ble_init+0x152>
1000f208:	4846      	ldr	r0, [pc, #280]	; (1000f324 <at_ble_init+0x188>)
1000f20a:	4b47      	ldr	r3, [pc, #284]	; (1000f328 <at_ble_init+0x18c>)
1000f20c:	4798      	blx	r3
1000f20e:	2800      	cmp	r0, #0
1000f210:	d1f8      	bne.n	1000f204 <at_ble_init+0x68>
1000f212:	1c20      	adds	r0, r4, #0
1000f214:	4b45      	ldr	r3, [pc, #276]	; (1000f32c <at_ble_init+0x190>)
1000f216:	4798      	blx	r3
1000f218:	68e0      	ldr	r0, [r4, #12]
1000f21a:	68a1      	ldr	r1, [r4, #8]
1000f21c:	4b44      	ldr	r3, [pc, #272]	; (1000f330 <at_ble_init+0x194>)
1000f21e:	4798      	blx	r3
1000f220:	466b      	mov	r3, sp
1000f222:	2201      	movs	r2, #1
1000f224:	1cdc      	adds	r4, r3, #3
1000f226:	1c20      	adds	r0, r4, #0
1000f228:	a901      	add	r1, sp, #4
1000f22a:	4252      	negs	r2, r2
1000f22c:	4b41      	ldr	r3, [pc, #260]	; (1000f334 <at_ble_init+0x198>)
1000f22e:	4798      	blx	r3
1000f230:	2800      	cmp	r0, #0
1000f232:	d102      	bne.n	1000f23a <at_ble_init+0x9e>
1000f234:	7823      	ldrb	r3, [r4, #0]
1000f236:	2b39      	cmp	r3, #57	; 0x39
1000f238:	d1f2      	bne.n	1000f220 <at_ble_init+0x84>
1000f23a:	4b3f      	ldr	r3, [pc, #252]	; (1000f338 <at_ble_init+0x19c>)
1000f23c:	4798      	blx	r3
1000f23e:	1e06      	subs	r6, r0, #0
1000f240:	d155      	bne.n	1000f2ee <at_ble_init+0x152>
1000f242:	1c03      	adds	r3, r0, #0
1000f244:	2101      	movs	r1, #1
1000f246:	4a3d      	ldr	r2, [pc, #244]	; (1000f33c <at_ble_init+0x1a0>)
1000f248:	4249      	negs	r1, r1
1000f24a:	189a      	adds	r2, r3, r2
1000f24c:	3312      	adds	r3, #18
1000f24e:	8151      	strh	r1, [r2, #10]
1000f250:	2b90      	cmp	r3, #144	; 0x90
1000f252:	d1f7      	bne.n	1000f244 <at_ble_init+0xa8>
1000f254:	4c3a      	ldr	r4, [pc, #232]	; (1000f340 <at_ble_init+0x1a4>)
1000f256:	3b81      	subs	r3, #129	; 0x81
1000f258:	7023      	strb	r3, [r4, #0]
1000f25a:	4b3a      	ldr	r3, [pc, #232]	; (1000f344 <at_ble_init+0x1a8>)
1000f25c:	4a3a      	ldr	r2, [pc, #232]	; (1000f348 <at_ble_init+0x1ac>)
1000f25e:	8063      	strh	r3, [r4, #2]
1000f260:	2300      	movs	r3, #0
1000f262:	7123      	strb	r3, [r4, #4]
1000f264:	3301      	adds	r3, #1
1000f266:	1e58      	subs	r0, r3, #1
1000f268:	0119      	lsls	r1, r3, #4
1000f26a:	4301      	orrs	r1, r0
1000f26c:	3302      	adds	r3, #2
1000f26e:	7011      	strb	r1, [r2, #0]
1000f270:	3201      	adds	r2, #1
1000f272:	2b21      	cmp	r3, #33	; 0x21
1000f274:	d1f7      	bne.n	1000f266 <at_ble_init+0xca>
1000f276:	33e0      	adds	r3, #224	; 0xe0
1000f278:	33ff      	adds	r3, #255	; 0xff
1000f27a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f27c:	1c23      	adds	r3, r4, #0
1000f27e:	2500      	movs	r5, #0
1000f280:	3373      	adds	r3, #115	; 0x73
1000f282:	701d      	strb	r5, [r3, #0]
1000f284:	1c23      	adds	r3, r4, #0
1000f286:	3372      	adds	r3, #114	; 0x72
1000f288:	701d      	strb	r5, [r3, #0]
1000f28a:	1c23      	adds	r3, r4, #0
1000f28c:	3376      	adds	r3, #118	; 0x76
1000f28e:	701d      	strb	r5, [r3, #0]
1000f290:	1c23      	adds	r3, r4, #0
1000f292:	33cc      	adds	r3, #204	; 0xcc
1000f294:	801d      	strh	r5, [r3, #0]
1000f296:	1c22      	adds	r2, r4, #0
1000f298:	23a0      	movs	r3, #160	; 0xa0
1000f29a:	32d0      	adds	r2, #208	; 0xd0
1000f29c:	005b      	lsls	r3, r3, #1
1000f29e:	8013      	strh	r3, [r2, #0]
1000f2a0:	1c22      	adds	r2, r4, #0
1000f2a2:	32ce      	adds	r2, #206	; 0xce
1000f2a4:	8013      	strh	r3, [r2, #0]
1000f2a6:	1c23      	adds	r3, r4, #0
1000f2a8:	33d2      	adds	r3, #210	; 0xd2
1000f2aa:	801d      	strh	r5, [r3, #0]
1000f2ac:	22fa      	movs	r2, #250	; 0xfa
1000f2ae:	1c23      	adds	r3, r4, #0
1000f2b0:	0052      	lsls	r2, r2, #1
1000f2b2:	33d4      	adds	r3, #212	; 0xd4
1000f2b4:	801a      	strh	r2, [r3, #0]
1000f2b6:	1c23      	adds	r3, r4, #0
1000f2b8:	33d6      	adds	r3, #214	; 0xd6
1000f2ba:	701d      	strb	r5, [r3, #0]
1000f2bc:	1c20      	adds	r0, r4, #0
1000f2be:	4b23      	ldr	r3, [pc, #140]	; (1000f34c <at_ble_init+0x1b0>)
1000f2c0:	76e5      	strb	r5, [r4, #27]
1000f2c2:	7725      	strb	r5, [r4, #28]
1000f2c4:	7765      	strb	r5, [r4, #29]
1000f2c6:	77a5      	strb	r5, [r4, #30]
1000f2c8:	77e5      	strb	r5, [r4, #31]
1000f2ca:	8425      	strh	r5, [r4, #32]
1000f2cc:	8465      	strh	r5, [r4, #34]	; 0x22
1000f2ce:	4798      	blx	r3
1000f2d0:	1c23      	adds	r3, r4, #0
1000f2d2:	2207      	movs	r2, #7
1000f2d4:	3374      	adds	r3, #116	; 0x74
1000f2d6:	701a      	strb	r2, [r3, #0]
1000f2d8:	1c23      	adds	r3, r4, #0
1000f2da:	3204      	adds	r2, #4
1000f2dc:	33aa      	adds	r3, #170	; 0xaa
1000f2de:	801a      	strh	r2, [r3, #0]
1000f2e0:	1c2b      	adds	r3, r5, #0
1000f2e2:	5d7a      	ldrb	r2, [r7, r5]
1000f2e4:	33ac      	adds	r3, #172	; 0xac
1000f2e6:	3501      	adds	r5, #1
1000f2e8:	54e2      	strb	r2, [r4, r3]
1000f2ea:	2d0b      	cmp	r5, #11
1000f2ec:	d1f8      	bne.n	1000f2e0 <at_ble_init+0x144>
1000f2ee:	1c30      	adds	r0, r6, #0
1000f2f0:	b007      	add	sp, #28
1000f2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2f4:	100166bc 	.word	0x100166bc
1000f2f8:	100138e7 	.word	0x100138e7
1000f2fc:	1001927c 	.word	0x1001927c
1000f300:	10018418 	.word	0x10018418
1000f304:	10018378 	.word	0x10018378
1000f308:	100168e4 	.word	0x100168e4
1000f30c:	10011865 	.word	0x10011865
1000f310:	1000f60d 	.word	0x1000f60d
1000f314:	1000fc6d 	.word	0x1000fc6d
1000f318:	1000fead 	.word	0x1000fead
1000f31c:	1000fca9 	.word	0x1000fca9
1000f320:	1000ded9 	.word	0x1000ded9
1000f324:	100101ad 	.word	0x100101ad
1000f328:	1000e11d 	.word	0x1000e11d
1000f32c:	10010255 	.word	0x10010255
1000f330:	1000e889 	.word	0x1000e889
1000f334:	1000e945 	.word	0x1000e945
1000f338:	10010e1d 	.word	0x10010e1d
1000f33c:	1001927e 	.word	0x1001927e
1000f340:	1001930e 	.word	0x1001930e
1000f344:	00003a98 	.word	0x00003a98
1000f348:	10019319 	.word	0x10019319
1000f34c:	1000f10d 	.word	0x1000f10d

1000f350 <at_ble_addr_set>:
1000f350:	b538      	push	{r3, r4, r5, lr}
1000f352:	1c45      	adds	r5, r0, #1
1000f354:	1c03      	adds	r3, r0, #0
1000f356:	20cf      	movs	r0, #207	; 0xcf
1000f358:	2d00      	cmp	r5, #0
1000f35a:	d018      	beq.n	1000f38e <at_ble_addr_set+0x3e>
1000f35c:	781a      	ldrb	r2, [r3, #0]
1000f35e:	2a03      	cmp	r2, #3
1000f360:	d815      	bhi.n	1000f38e <at_ble_addr_set+0x3e>
1000f362:	2a01      	cmp	r2, #1
1000f364:	d102      	bne.n	1000f36c <at_ble_addr_set+0x1c>
1000f366:	785a      	ldrb	r2, [r3, #1]
1000f368:	2a00      	cmp	r2, #0
1000f36a:	d010      	beq.n	1000f38e <at_ble_addr_set+0x3e>
1000f36c:	1c1c      	adds	r4, r3, #0
1000f36e:	1c29      	adds	r1, r5, #0
1000f370:	2206      	movs	r2, #6
1000f372:	4b07      	ldr	r3, [pc, #28]	; (1000f390 <at_ble_addr_set+0x40>)
1000f374:	4807      	ldr	r0, [pc, #28]	; (1000f394 <at_ble_addr_set+0x44>)
1000f376:	4798      	blx	r3
1000f378:	7823      	ldrb	r3, [r4, #0]
1000f37a:	4807      	ldr	r0, [pc, #28]	; (1000f398 <at_ble_addr_set+0x48>)
1000f37c:	7103      	strb	r3, [r0, #4]
1000f37e:	4b07      	ldr	r3, [pc, #28]	; (1000f39c <at_ble_addr_set+0x4c>)
1000f380:	4798      	blx	r3
1000f382:	7823      	ldrb	r3, [r4, #0]
1000f384:	2b00      	cmp	r3, #0
1000f386:	d102      	bne.n	1000f38e <at_ble_addr_set+0x3e>
1000f388:	1c28      	adds	r0, r5, #0
1000f38a:	4b05      	ldr	r3, [pc, #20]	; (1000f3a0 <at_ble_addr_set+0x50>)
1000f38c:	4798      	blx	r3
1000f38e:	bd38      	pop	{r3, r4, r5, pc}
1000f390:	100138e7 	.word	0x100138e7
1000f394:	10019313 	.word	0x10019313
1000f398:	1001930e 	.word	0x1001930e
1000f39c:	1000f10d 	.word	0x1000f10d
1000f3a0:	100102d9 	.word	0x100102d9

1000f3a4 <at_ble_adv_data_set>:
1000f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f3a6:	4684      	mov	ip, r0
1000f3a8:	1c0f      	adds	r7, r1, #0
1000f3aa:	1c16      	adds	r6, r2, #0
1000f3ac:	1c1c      	adds	r4, r3, #0
1000f3ae:	2800      	cmp	r0, #0
1000f3b0:	d102      	bne.n	1000f3b8 <at_ble_adv_data_set+0x14>
1000f3b2:	20e2      	movs	r0, #226	; 0xe2
1000f3b4:	2a00      	cmp	r2, #0
1000f3b6:	d02b      	beq.n	1000f410 <at_ble_adv_data_set+0x6c>
1000f3b8:	20cf      	movs	r0, #207	; 0xcf
1000f3ba:	2f1f      	cmp	r7, #31
1000f3bc:	d828      	bhi.n	1000f410 <at_ble_adv_data_set+0x6c>
1000f3be:	2c1f      	cmp	r4, #31
1000f3c0:	d826      	bhi.n	1000f410 <at_ble_adv_data_set+0x6c>
1000f3c2:	4663      	mov	r3, ip
1000f3c4:	2b00      	cmp	r3, #0
1000f3c6:	d00e      	beq.n	1000f3e6 <at_ble_adv_data_set+0x42>
1000f3c8:	4812      	ldr	r0, [pc, #72]	; (1000f414 <at_ble_adv_data_set+0x70>)
1000f3ca:	4d13      	ldr	r5, [pc, #76]	; (1000f418 <at_ble_adv_data_set+0x74>)
1000f3cc:	2f00      	cmp	r7, #0
1000f3ce:	d104      	bne.n	1000f3da <at_ble_adv_data_set+0x36>
1000f3d0:	1c39      	adds	r1, r7, #0
1000f3d2:	221f      	movs	r2, #31
1000f3d4:	4b11      	ldr	r3, [pc, #68]	; (1000f41c <at_ble_adv_data_set+0x78>)
1000f3d6:	4798      	blx	r3
1000f3d8:	e003      	b.n	1000f3e2 <at_ble_adv_data_set+0x3e>
1000f3da:	4661      	mov	r1, ip
1000f3dc:	1c3a      	adds	r2, r7, #0
1000f3de:	4b10      	ldr	r3, [pc, #64]	; (1000f420 <at_ble_adv_data_set+0x7c>)
1000f3e0:	4798      	blx	r3
1000f3e2:	3572      	adds	r5, #114	; 0x72
1000f3e4:	702f      	strb	r7, [r5, #0]
1000f3e6:	1e30      	subs	r0, r6, #0
1000f3e8:	d012      	beq.n	1000f410 <at_ble_adv_data_set+0x6c>
1000f3ea:	4d0b      	ldr	r5, [pc, #44]	; (1000f418 <at_ble_adv_data_set+0x74>)
1000f3ec:	480d      	ldr	r0, [pc, #52]	; (1000f424 <at_ble_adv_data_set+0x80>)
1000f3ee:	2c00      	cmp	r4, #0
1000f3f0:	d107      	bne.n	1000f402 <at_ble_adv_data_set+0x5e>
1000f3f2:	1c21      	adds	r1, r4, #0
1000f3f4:	221f      	movs	r2, #31
1000f3f6:	4b09      	ldr	r3, [pc, #36]	; (1000f41c <at_ble_adv_data_set+0x78>)
1000f3f8:	3573      	adds	r5, #115	; 0x73
1000f3fa:	4798      	blx	r3
1000f3fc:	702c      	strb	r4, [r5, #0]
1000f3fe:	1c20      	adds	r0, r4, #0
1000f400:	e006      	b.n	1000f410 <at_ble_adv_data_set+0x6c>
1000f402:	1c31      	adds	r1, r6, #0
1000f404:	1c22      	adds	r2, r4, #0
1000f406:	4b06      	ldr	r3, [pc, #24]	; (1000f420 <at_ble_adv_data_set+0x7c>)
1000f408:	4798      	blx	r3
1000f40a:	2000      	movs	r0, #0
1000f40c:	3573      	adds	r5, #115	; 0x73
1000f40e:	702c      	strb	r4, [r5, #0]
1000f410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f412:	46c0      	nop			; (mov r8, r8)
1000f414:	10019342 	.word	0x10019342
1000f418:	1001930e 	.word	0x1001930e
1000f41c:	100138f9 	.word	0x100138f9
1000f420:	100138e7 	.word	0x100138e7
1000f424:	10019361 	.word	0x10019361

1000f428 <at_ble_adv_start>:
1000f428:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f42a:	b091      	sub	sp, #68	; 0x44
1000f42c:	1c1f      	adds	r7, r3, #0
1000f42e:	ab16      	add	r3, sp, #88	; 0x58
1000f430:	881d      	ldrh	r5, [r3, #0]
1000f432:	ab17      	add	r3, sp, #92	; 0x5c
1000f434:	881b      	ldrh	r3, [r3, #0]
1000f436:	910d      	str	r1, [sp, #52]	; 0x34
1000f438:	930e      	str	r3, [sp, #56]	; 0x38
1000f43a:	ab18      	add	r3, sp, #96	; 0x60
1000f43c:	781b      	ldrb	r3, [r3, #0]
1000f43e:	1c04      	adds	r4, r0, #0
1000f440:	930f      	str	r3, [sp, #60]	; 0x3c
1000f442:	4b42      	ldr	r3, [pc, #264]	; (1000f54c <at_ble_adv_start+0x124>)
1000f444:	1c16      	adds	r6, r2, #0
1000f446:	3373      	adds	r3, #115	; 0x73
1000f448:	781b      	ldrb	r3, [r3, #0]
1000f44a:	20cf      	movs	r0, #207	; 0xcf
1000f44c:	930c      	str	r3, [sp, #48]	; 0x30
1000f44e:	2c01      	cmp	r4, #1
1000f450:	d103      	bne.n	1000f45a <at_ble_adv_start+0x32>
1000f452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000f454:	2b00      	cmp	r3, #0
1000f456:	d176      	bne.n	1000f546 <at_ble_adv_start+0x11e>
1000f458:	e024      	b.n	1000f4a4 <at_ble_adv_start+0x7c>
1000f45a:	2c04      	cmp	r4, #4
1000f45c:	d873      	bhi.n	1000f546 <at_ble_adv_start+0x11e>
1000f45e:	2380      	movs	r3, #128	; 0x80
1000f460:	01db      	lsls	r3, r3, #7
1000f462:	429d      	cmp	r5, r3
1000f464:	d86f      	bhi.n	1000f546 <at_ble_adv_start+0x11e>
1000f466:	2c00      	cmp	r4, #0
1000f468:	d102      	bne.n	1000f470 <at_ble_adv_start+0x48>
1000f46a:	2d1f      	cmp	r5, #31
1000f46c:	d96b      	bls.n	1000f546 <at_ble_adv_start+0x11e>
1000f46e:	e003      	b.n	1000f478 <at_ble_adv_start+0x50>
1000f470:	2d9f      	cmp	r5, #159	; 0x9f
1000f472:	d801      	bhi.n	1000f478 <at_ble_adv_start+0x50>
1000f474:	2c01      	cmp	r4, #1
1000f476:	d166      	bne.n	1000f546 <at_ble_adv_start+0x11e>
1000f478:	2f00      	cmp	r7, #0
1000f47a:	d009      	beq.n	1000f490 <at_ble_adv_start+0x68>
1000f47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f47e:	20cf      	movs	r0, #207	; 0xcf
1000f480:	3b01      	subs	r3, #1
1000f482:	2b01      	cmp	r3, #1
1000f484:	d95f      	bls.n	1000f546 <at_ble_adv_start+0x11e>
1000f486:	2c01      	cmp	r4, #1
1000f488:	d102      	bne.n	1000f490 <at_ble_adv_start+0x68>
1000f48a:	2d00      	cmp	r5, #0
1000f48c:	d100      	bne.n	1000f490 <at_ble_adv_start+0x68>
1000f48e:	3520      	adds	r5, #32
1000f490:	4b2f      	ldr	r3, [pc, #188]	; (1000f550 <at_ble_adv_start+0x128>)
1000f492:	4798      	blx	r3
1000f494:	1c01      	adds	r1, r0, #0
1000f496:	2e00      	cmp	r6, #0
1000f498:	d043      	beq.n	1000f522 <at_ble_adv_start+0xfa>
1000f49a:	7833      	ldrb	r3, [r6, #0]
1000f49c:	1e60      	subs	r0, r4, #1
1000f49e:	2b00      	cmp	r3, #0
1000f4a0:	d109      	bne.n	1000f4b6 <at_ble_adv_start+0x8e>
1000f4a2:	e03b      	b.n	1000f51c <at_ble_adv_start+0xf4>
1000f4a4:	2380      	movs	r3, #128	; 0x80
1000f4a6:	01db      	lsls	r3, r3, #7
1000f4a8:	429d      	cmp	r5, r3
1000f4aa:	d84c      	bhi.n	1000f546 <at_ble_adv_start+0x11e>
1000f4ac:	2e00      	cmp	r6, #0
1000f4ae:	d04a      	beq.n	1000f546 <at_ble_adv_start+0x11e>
1000f4b0:	2f00      	cmp	r7, #0
1000f4b2:	d1e3      	bne.n	1000f47c <at_ble_adv_start+0x54>
1000f4b4:	e02b      	b.n	1000f50e <at_ble_adv_start+0xe6>
1000f4b6:	2301      	movs	r3, #1
1000f4b8:	2803      	cmp	r0, #3
1000f4ba:	d93a      	bls.n	1000f532 <at_ble_adv_start+0x10a>
1000f4bc:	200d      	movs	r0, #13
1000f4be:	1c72      	adds	r2, r6, #1
1000f4c0:	e002      	b.n	1000f4c8 <at_ble_adv_start+0xa0>
1000f4c2:	200e      	movs	r0, #14
1000f4c4:	1e32      	subs	r2, r6, #0
1000f4c6:	d1fa      	bne.n	1000f4be <at_ble_adv_start+0x96>
1000f4c8:	4c20      	ldr	r4, [pc, #128]	; (1000f54c <at_ble_adv_start+0x124>)
1000f4ca:	3474      	adds	r4, #116	; 0x74
1000f4cc:	7826      	ldrb	r6, [r4, #0]
1000f4ce:	2407      	movs	r4, #7
1000f4d0:	2e00      	cmp	r6, #0
1000f4d2:	d000      	beq.n	1000f4d6 <at_ble_adv_start+0xae>
1000f4d4:	1c34      	adds	r4, r6, #0
1000f4d6:	9200      	str	r2, [sp, #0]
1000f4d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f4da:	9403      	str	r4, [sp, #12]
1000f4dc:	9204      	str	r2, [sp, #16]
1000f4de:	4a1b      	ldr	r2, [pc, #108]	; (1000f54c <at_ble_adv_start+0x124>)
1000f4e0:	9501      	str	r5, [sp, #4]
1000f4e2:	9502      	str	r5, [sp, #8]
1000f4e4:	9705      	str	r7, [sp, #20]
1000f4e6:	3272      	adds	r2, #114	; 0x72
1000f4e8:	7812      	ldrb	r2, [r2, #0]
1000f4ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f4ec:	9206      	str	r2, [sp, #24]
1000f4ee:	4a19      	ldr	r2, [pc, #100]	; (1000f554 <at_ble_adv_start+0x12c>)
1000f4f0:	9207      	str	r2, [sp, #28]
1000f4f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f4f4:	9208      	str	r2, [sp, #32]
1000f4f6:	4a18      	ldr	r2, [pc, #96]	; (1000f558 <at_ble_adv_start+0x130>)
1000f4f8:	9209      	str	r2, [sp, #36]	; 0x24
1000f4fa:	2264      	movs	r2, #100	; 0x64
1000f4fc:	4362      	muls	r2, r4
1000f4fe:	b292      	uxth	r2, r2
1000f500:	920a      	str	r2, [sp, #40]	; 0x28
1000f502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f504:	4c15      	ldr	r4, [pc, #84]	; (1000f55c <at_ble_adv_start+0x134>)
1000f506:	920b      	str	r2, [sp, #44]	; 0x2c
1000f508:	4a15      	ldr	r2, [pc, #84]	; (1000f560 <at_ble_adv_start+0x138>)
1000f50a:	47a0      	blx	r4
1000f50c:	e01b      	b.n	1000f546 <at_ble_adv_start+0x11e>
1000f50e:	2d00      	cmp	r5, #0
1000f510:	d1be      	bne.n	1000f490 <at_ble_adv_start+0x68>
1000f512:	4b0f      	ldr	r3, [pc, #60]	; (1000f550 <at_ble_adv_start+0x128>)
1000f514:	4798      	blx	r3
1000f516:	2520      	movs	r5, #32
1000f518:	1c01      	adds	r1, r0, #0
1000f51a:	e7be      	b.n	1000f49a <at_ble_adv_start+0x72>
1000f51c:	2803      	cmp	r0, #3
1000f51e:	d8cd      	bhi.n	1000f4bc <at_ble_adv_start+0x94>
1000f520:	e006      	b.n	1000f530 <at_ble_adv_start+0x108>
1000f522:	1e60      	subs	r0, r4, #1
1000f524:	2803      	cmp	r0, #3
1000f526:	d903      	bls.n	1000f530 <at_ble_adv_start+0x108>
1000f528:	1c33      	adds	r3, r6, #0
1000f52a:	200d      	movs	r0, #13
1000f52c:	1c32      	adds	r2, r6, #0
1000f52e:	e7cb      	b.n	1000f4c8 <at_ble_adv_start+0xa0>
1000f530:	2300      	movs	r3, #0
1000f532:	f002 fb09 	bl	10011b48 <__gnu_thumb1_case_sqi>
1000f536:	06c6      	.short	0x06c6
1000f538:	0204      	.short	0x0204
1000f53a:	200f      	movs	r0, #15
1000f53c:	e7c2      	b.n	1000f4c4 <at_ble_adv_start+0x9c>
1000f53e:	2200      	movs	r2, #0
1000f540:	920c      	str	r2, [sp, #48]	; 0x30
1000f542:	200c      	movs	r0, #12
1000f544:	e7be      	b.n	1000f4c4 <at_ble_adv_start+0x9c>
1000f546:	b011      	add	sp, #68	; 0x44
1000f548:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f54a:	46c0      	nop			; (mov r8, r8)
1000f54c:	1001930e 	.word	0x1001930e
1000f550:	10011369 	.word	0x10011369
1000f554:	10019342 	.word	0x10019342
1000f558:	10019361 	.word	0x10019361
1000f55c:	10011249 	.word	0x10011249
1000f560:	00003a98 	.word	0x00003a98

1000f564 <at_ble_adv_stop>:
1000f564:	b508      	push	{r3, lr}
1000f566:	4b01      	ldr	r3, [pc, #4]	; (1000f56c <at_ble_adv_stop+0x8>)
1000f568:	4798      	blx	r3
1000f56a:	bd08      	pop	{r3, pc}
1000f56c:	10011075 	.word	0x10011075

1000f570 <at_ble_scan_stop>:
1000f570:	b510      	push	{r4, lr}
1000f572:	4b05      	ldr	r3, [pc, #20]	; (1000f588 <at_ble_scan_stop+0x18>)
1000f574:	4798      	blx	r3
1000f576:	1e04      	subs	r4, r0, #0
1000f578:	d103      	bne.n	1000f582 <at_ble_scan_stop+0x12>
1000f57a:	20d1      	movs	r0, #209	; 0xd1
1000f57c:	4b03      	ldr	r3, [pc, #12]	; (1000f58c <at_ble_scan_stop+0x1c>)
1000f57e:	0100      	lsls	r0, r0, #4
1000f580:	4798      	blx	r3
1000f582:	1c20      	adds	r0, r4, #0
1000f584:	bd10      	pop	{r4, pc}
1000f586:	46c0      	nop			; (mov r8, r8)
1000f588:	10011075 	.word	0x10011075
1000f58c:	1000f01d 	.word	0x1000f01d

1000f590 <at_ble_disconnect>:
1000f590:	b538      	push	{r3, r4, r5, lr}
1000f592:	1c04      	adds	r4, r0, #0
1000f594:	4b04      	ldr	r3, [pc, #16]	; (1000f5a8 <at_ble_disconnect+0x18>)
1000f596:	1c08      	adds	r0, r1, #0
1000f598:	1c21      	adds	r1, r4, #0
1000f59a:	4798      	blx	r3
1000f59c:	1c05      	adds	r5, r0, #0
1000f59e:	4b03      	ldr	r3, [pc, #12]	; (1000f5ac <at_ble_disconnect+0x1c>)
1000f5a0:	1c20      	adds	r0, r4, #0
1000f5a2:	4798      	blx	r3
1000f5a4:	1c28      	adds	r0, r5, #0
1000f5a6:	bd38      	pop	{r3, r4, r5, pc}
1000f5a8:	100106ed 	.word	0x100106ed
1000f5ac:	1000f061 	.word	0x1000f061

1000f5b0 <at_ble_conn_update_reply>:
1000f5b0:	b510      	push	{r4, lr}
1000f5b2:	4c01      	ldr	r4, [pc, #4]	; (1000f5b8 <at_ble_conn_update_reply+0x8>)
1000f5b4:	47a0      	blx	r4
1000f5b6:	bd10      	pop	{r4, pc}
1000f5b8:	10010bdd 	.word	0x10010bdd

1000f5bc <at_ble_random_address_resolve>:
1000f5bc:	b510      	push	{r4, lr}
1000f5be:	23cf      	movs	r3, #207	; 0xcf
1000f5c0:	2800      	cmp	r0, #0
1000f5c2:	d00a      	beq.n	1000f5da <at_ble_random_address_resolve+0x1e>
1000f5c4:	2900      	cmp	r1, #0
1000f5c6:	d008      	beq.n	1000f5da <at_ble_random_address_resolve+0x1e>
1000f5c8:	2a00      	cmp	r2, #0
1000f5ca:	d006      	beq.n	1000f5da <at_ble_random_address_resolve+0x1e>
1000f5cc:	780c      	ldrb	r4, [r1, #0]
1000f5ce:	2c02      	cmp	r4, #2
1000f5d0:	d103      	bne.n	1000f5da <at_ble_random_address_resolve+0x1e>
1000f5d2:	4b03      	ldr	r3, [pc, #12]	; (1000f5e0 <at_ble_random_address_resolve+0x24>)
1000f5d4:	3101      	adds	r1, #1
1000f5d6:	4798      	blx	r3
1000f5d8:	2300      	movs	r3, #0
1000f5da:	1c18      	adds	r0, r3, #0
1000f5dc:	bd10      	pop	{r4, pc}
1000f5de:	46c0      	nop			; (mov r8, r8)
1000f5e0:	10011409 	.word	0x10011409

1000f5e4 <at_ble_uuid_type2len>:
1000f5e4:	23cf      	movs	r3, #207	; 0xcf
1000f5e6:	2802      	cmp	r0, #2
1000f5e8:	d801      	bhi.n	1000f5ee <at_ble_uuid_type2len+0xa>
1000f5ea:	4b02      	ldr	r3, [pc, #8]	; (1000f5f4 <at_ble_uuid_type2len+0x10>)
1000f5ec:	5c1b      	ldrb	r3, [r3, r0]
1000f5ee:	1c18      	adds	r0, r3, #0
1000f5f0:	4770      	bx	lr
1000f5f2:	46c0      	nop			; (mov r8, r8)
1000f5f4:	100166c7 	.word	0x100166c7

1000f5f8 <at_ble_uuid_len2type>:
1000f5f8:	1e83      	subs	r3, r0, #2
1000f5fa:	b2db      	uxtb	r3, r3
1000f5fc:	2003      	movs	r0, #3
1000f5fe:	2b0e      	cmp	r3, #14
1000f600:	d801      	bhi.n	1000f606 <at_ble_uuid_len2type+0xe>
1000f602:	4a01      	ldr	r2, [pc, #4]	; (1000f608 <at_ble_uuid_len2type+0x10>)
1000f604:	5cd0      	ldrb	r0, [r2, r3]
1000f606:	4770      	bx	lr
1000f608:	100166ca 	.word	0x100166ca

1000f60c <init_gatt_client_module>:
1000f60c:	2200      	movs	r2, #0
1000f60e:	4b01      	ldr	r3, [pc, #4]	; (1000f614 <init_gatt_client_module+0x8>)
1000f610:	801a      	strh	r2, [r3, #0]
1000f612:	4770      	bx	lr
1000f614:	10018370 	.word	0x10018370

1000f618 <db_searchATT>:
1000f618:	b570      	push	{r4, r5, r6, lr}
1000f61a:	1c05      	adds	r5, r0, #0
1000f61c:	2400      	movs	r4, #0
1000f61e:	4b0c      	ldr	r3, [pc, #48]	; (1000f650 <db_searchATT+0x38>)
1000f620:	6819      	ldr	r1, [r3, #0]
1000f622:	4b0c      	ldr	r3, [pc, #48]	; (1000f654 <db_searchATT+0x3c>)
1000f624:	681e      	ldr	r6, [r3, #0]
1000f626:	428c      	cmp	r4, r1
1000f628:	dc10      	bgt.n	1000f64c <db_searchATT+0x34>
1000f62a:	200c      	movs	r0, #12
1000f62c:	1863      	adds	r3, r4, r1
1000f62e:	0fda      	lsrs	r2, r3, #31
1000f630:	18d3      	adds	r3, r2, r3
1000f632:	1c02      	adds	r2, r0, #0
1000f634:	105b      	asrs	r3, r3, #1
1000f636:	435a      	muls	r2, r3
1000f638:	18b0      	adds	r0, r6, r2
1000f63a:	8802      	ldrh	r2, [r0, #0]
1000f63c:	42aa      	cmp	r2, r5
1000f63e:	d201      	bcs.n	1000f644 <db_searchATT+0x2c>
1000f640:	1e59      	subs	r1, r3, #1
1000f642:	e7f0      	b.n	1000f626 <db_searchATT+0xe>
1000f644:	42aa      	cmp	r2, r5
1000f646:	d902      	bls.n	1000f64e <db_searchATT+0x36>
1000f648:	1c5c      	adds	r4, r3, #1
1000f64a:	e7ec      	b.n	1000f626 <db_searchATT+0xe>
1000f64c:	2000      	movs	r0, #0
1000f64e:	bd70      	pop	{r4, r5, r6, pc}
1000f650:	10018384 	.word	0x10018384
1000f654:	1001837c 	.word	0x1001837c

1000f658 <att_permissions>:
1000f658:	b530      	push	{r4, r5, lr}
1000f65a:	2403      	movs	r4, #3
1000f65c:	1c05      	adds	r5, r0, #0
1000f65e:	2301      	movs	r3, #1
1000f660:	4025      	ands	r5, r4
1000f662:	42a5      	cmp	r5, r4
1000f664:	d009      	beq.n	1000f67a <att_permissions+0x22>
1000f666:	1c23      	adds	r3, r4, #0
1000f668:	1924      	adds	r4, r4, r4
1000f66a:	4220      	tst	r0, r4
1000f66c:	d105      	bne.n	1000f67a <att_permissions+0x22>
1000f66e:	3b02      	subs	r3, #2
1000f670:	4218      	tst	r0, r3
1000f672:	d102      	bne.n	1000f67a <att_permissions+0x22>
1000f674:	1e4b      	subs	r3, r1, #1
1000f676:	4199      	sbcs	r1, r3
1000f678:	b28b      	uxth	r3, r1
1000f67a:	2130      	movs	r1, #48	; 0x30
1000f67c:	4001      	ands	r1, r0
1000f67e:	2930      	cmp	r1, #48	; 0x30
1000f680:	d007      	beq.n	1000f692 <att_permissions+0x3a>
1000f682:	0641      	lsls	r1, r0, #25
1000f684:	d401      	bmi.n	1000f68a <att_permissions+0x32>
1000f686:	0681      	lsls	r1, r0, #26
1000f688:	d501      	bpl.n	1000f68e <att_permissions+0x36>
1000f68a:	4807      	ldr	r0, [pc, #28]	; (1000f6a8 <att_permissions+0x50>)
1000f68c:	e009      	b.n	1000f6a2 <att_permissions+0x4a>
1000f68e:	06c1      	lsls	r1, r0, #27
1000f690:	d501      	bpl.n	1000f696 <att_permissions+0x3e>
1000f692:	4806      	ldr	r0, [pc, #24]	; (1000f6ac <att_permissions+0x54>)
1000f694:	e005      	b.n	1000f6a2 <att_permissions+0x4a>
1000f696:	2a00      	cmp	r2, #0
1000f698:	d001      	beq.n	1000f69e <att_permissions+0x46>
1000f69a:	2204      	movs	r2, #4
1000f69c:	4313      	orrs	r3, r2
1000f69e:	2080      	movs	r0, #128	; 0x80
1000f6a0:	0180      	lsls	r0, r0, #6
1000f6a2:	4318      	orrs	r0, r3
1000f6a4:	bd30      	pop	{r4, r5, pc}
1000f6a6:	46c0      	nop			; (mov r8, r8)
1000f6a8:	0000200c 	.word	0x0000200c
1000f6ac:	00002004 	.word	0x00002004

1000f6b0 <char_permissions>:
1000f6b0:	b530      	push	{r4, r5, lr}
1000f6b2:	2300      	movs	r3, #0
1000f6b4:	0784      	lsls	r4, r0, #30
1000f6b6:	d503      	bpl.n	1000f6c0 <char_permissions+0x10>
1000f6b8:	3301      	adds	r3, #1
1000f6ba:	4219      	tst	r1, r3
1000f6bc:	d100      	bne.n	1000f6c0 <char_permissions+0x10>
1000f6be:	3302      	adds	r3, #2
1000f6c0:	0704      	lsls	r4, r0, #28
1000f6c2:	d508      	bpl.n	1000f6d6 <char_permissions+0x26>
1000f6c4:	06cc      	lsls	r4, r1, #27
1000f6c6:	d501      	bpl.n	1000f6cc <char_permissions+0x1c>
1000f6c8:	2404      	movs	r4, #4
1000f6ca:	e000      	b.n	1000f6ce <char_permissions+0x1e>
1000f6cc:	240c      	movs	r4, #12
1000f6ce:	4323      	orrs	r3, r4
1000f6d0:	2480      	movs	r4, #128	; 0x80
1000f6d2:	01a4      	lsls	r4, r4, #6
1000f6d4:	4323      	orrs	r3, r4
1000f6d6:	0684      	lsls	r4, r0, #26
1000f6d8:	d506      	bpl.n	1000f6e8 <char_permissions+0x38>
1000f6da:	2406      	movs	r4, #6
1000f6dc:	4221      	tst	r1, r4
1000f6de:	d101      	bne.n	1000f6e4 <char_permissions+0x34>
1000f6e0:	340a      	adds	r4, #10
1000f6e2:	e000      	b.n	1000f6e6 <char_permissions+0x36>
1000f6e4:	2430      	movs	r4, #48	; 0x30
1000f6e6:	4323      	orrs	r3, r4
1000f6e8:	06c4      	lsls	r4, r0, #27
1000f6ea:	d506      	bpl.n	1000f6fa <char_permissions+0x4a>
1000f6ec:	2406      	movs	r4, #6
1000f6ee:	4221      	tst	r1, r4
1000f6f0:	d101      	bne.n	1000f6f6 <char_permissions+0x46>
1000f6f2:	343a      	adds	r4, #58	; 0x3a
1000f6f4:	e000      	b.n	1000f6f8 <char_permissions+0x48>
1000f6f6:	24c0      	movs	r4, #192	; 0xc0
1000f6f8:	4323      	orrs	r3, r4
1000f6fa:	2480      	movs	r4, #128	; 0x80
1000f6fc:	0064      	lsls	r4, r4, #1
1000f6fe:	4220      	tst	r0, r4
1000f700:	d000      	beq.n	1000f704 <char_permissions+0x54>
1000f702:	4323      	orrs	r3, r4
1000f704:	07c4      	lsls	r4, r0, #31
1000f706:	d502      	bpl.n	1000f70e <char_permissions+0x5e>
1000f708:	2480      	movs	r4, #128	; 0x80
1000f70a:	00a4      	lsls	r4, r4, #2
1000f70c:	4323      	orrs	r3, r4
1000f70e:	2404      	movs	r4, #4
1000f710:	4220      	tst	r0, r4
1000f712:	d006      	beq.n	1000f722 <char_permissions+0x72>
1000f714:	06cd      	lsls	r5, r1, #27
1000f716:	d400      	bmi.n	1000f71a <char_permissions+0x6a>
1000f718:	240c      	movs	r4, #12
1000f71a:	4323      	orrs	r3, r4
1000f71c:	2480      	movs	r4, #128	; 0x80
1000f71e:	0124      	lsls	r4, r4, #4
1000f720:	4323      	orrs	r3, r4
1000f722:	0644      	lsls	r4, r0, #25
1000f724:	d501      	bpl.n	1000f72a <char_permissions+0x7a>
1000f726:	4c08      	ldr	r4, [pc, #32]	; (1000f748 <char_permissions+0x98>)
1000f728:	4323      	orrs	r3, r4
1000f72a:	0600      	lsls	r0, r0, #24
1000f72c:	d507      	bpl.n	1000f73e <char_permissions+0x8e>
1000f72e:	2004      	movs	r0, #4
1000f730:	06c9      	lsls	r1, r1, #27
1000f732:	d400      	bmi.n	1000f736 <char_permissions+0x86>
1000f734:	200c      	movs	r0, #12
1000f736:	4303      	orrs	r3, r0
1000f738:	2084      	movs	r0, #132	; 0x84
1000f73a:	0180      	lsls	r0, r0, #6
1000f73c:	4303      	orrs	r3, r0
1000f73e:	0390      	lsls	r0, r2, #14
1000f740:	4303      	orrs	r3, r0
1000f742:	b298      	uxth	r0, r3
1000f744:	bd30      	pop	{r4, r5, pc}
1000f746:	46c0      	nop			; (mov r8, r8)
1000f748:	00001004 	.word	0x00001004

1000f74c <presentation_format_define>:
1000f74c:	b507      	push	{r0, r1, r2, lr}
1000f74e:	466a      	mov	r2, sp
1000f750:	780b      	ldrb	r3, [r1, #0]
1000f752:	7013      	strb	r3, [r2, #0]
1000f754:	784b      	ldrb	r3, [r1, #1]
1000f756:	7053      	strb	r3, [r2, #1]
1000f758:	884b      	ldrh	r3, [r1, #2]
1000f75a:	7093      	strb	r3, [r2, #2]
1000f75c:	0a1b      	lsrs	r3, r3, #8
1000f75e:	70d3      	strb	r3, [r2, #3]
1000f760:	790b      	ldrb	r3, [r1, #4]
1000f762:	7113      	strb	r3, [r2, #4]
1000f764:	88cb      	ldrh	r3, [r1, #6]
1000f766:	2107      	movs	r1, #7
1000f768:	7153      	strb	r3, [r2, #5]
1000f76a:	0a1b      	lsrs	r3, r3, #8
1000f76c:	7193      	strb	r3, [r2, #6]
1000f76e:	4b01      	ldr	r3, [pc, #4]	; (1000f774 <presentation_format_define+0x28>)
1000f770:	4798      	blx	r3
1000f772:	bd0e      	pop	{r1, r2, r3, pc}
1000f774:	100119f5 	.word	0x100119f5

1000f778 <db_addATT>:
1000f778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f77a:	4c29      	ldr	r4, [pc, #164]	; (1000f820 <db_addATT+0xa8>)
1000f77c:	1c1d      	adds	r5, r3, #0
1000f77e:	6823      	ldr	r3, [r4, #0]
1000f780:	9001      	str	r0, [sp, #4]
1000f782:	26d3      	movs	r6, #211	; 0xd3
1000f784:	2b00      	cmp	r3, #0
1000f786:	d048      	beq.n	1000f81a <db_addATT+0xa2>
1000f788:	1c1e      	adds	r6, r3, #0
1000f78a:	3e0c      	subs	r6, #12
1000f78c:	6026      	str	r6, [r4, #0]
1000f78e:	2900      	cmp	r1, #0
1000f790:	d005      	beq.n	1000f79e <db_addATT+0x26>
1000f792:	4f24      	ldr	r7, [pc, #144]	; (1000f824 <db_addATT+0xac>)
1000f794:	46bc      	mov	ip, r7
1000f796:	4660      	mov	r0, ip
1000f798:	683f      	ldr	r7, [r7, #0]
1000f79a:	18bf      	adds	r7, r7, r2
1000f79c:	6007      	str	r7, [r0, #0]
1000f79e:	4821      	ldr	r0, [pc, #132]	; (1000f824 <db_addATT+0xac>)
1000f7a0:	6807      	ldr	r7, [r0, #0]
1000f7a2:	4684      	mov	ip, r0
1000f7a4:	42be      	cmp	r6, r7
1000f7a6:	d932      	bls.n	1000f80e <db_addATT+0x96>
1000f7a8:	4668      	mov	r0, sp
1000f7aa:	8880      	ldrh	r0, [r0, #4]
1000f7ac:	3b0c      	subs	r3, #12
1000f7ae:	8018      	strh	r0, [r3, #0]
1000f7b0:	6823      	ldr	r3, [r4, #0]
1000f7b2:	2900      	cmp	r1, #0
1000f7b4:	d009      	beq.n	1000f7ca <db_addATT+0x52>
1000f7b6:	2a00      	cmp	r2, #0
1000f7b8:	d007      	beq.n	1000f7ca <db_addATT+0x52>
1000f7ba:	4660      	mov	r0, ip
1000f7bc:	6800      	ldr	r0, [r0, #0]
1000f7be:	809a      	strh	r2, [r3, #4]
1000f7c0:	1a80      	subs	r0, r0, r2
1000f7c2:	6098      	str	r0, [r3, #8]
1000f7c4:	4b18      	ldr	r3, [pc, #96]	; (1000f828 <db_addATT+0xb0>)
1000f7c6:	4798      	blx	r3
1000f7c8:	e002      	b.n	1000f7d0 <db_addATT+0x58>
1000f7ca:	2100      	movs	r1, #0
1000f7cc:	809a      	strh	r2, [r3, #4]
1000f7ce:	6099      	str	r1, [r3, #8]
1000f7d0:	2300      	movs	r3, #0
1000f7d2:	6822      	ldr	r2, [r4, #0]
1000f7d4:	7093      	strb	r3, [r2, #2]
1000f7d6:	3303      	adds	r3, #3
1000f7d8:	402b      	ands	r3, r5
1000f7da:	2b03      	cmp	r3, #3
1000f7dc:	d001      	beq.n	1000f7e2 <db_addATT+0x6a>
1000f7de:	076b      	lsls	r3, r5, #29
1000f7e0:	d504      	bpl.n	1000f7ec <db_addATT+0x74>
1000f7e2:	2101      	movs	r1, #1
1000f7e4:	6822      	ldr	r2, [r4, #0]
1000f7e6:	7893      	ldrb	r3, [r2, #2]
1000f7e8:	430b      	orrs	r3, r1
1000f7ea:	7093      	strb	r3, [r2, #2]
1000f7ec:	2330      	movs	r3, #48	; 0x30
1000f7ee:	402b      	ands	r3, r5
1000f7f0:	2b30      	cmp	r3, #48	; 0x30
1000f7f2:	d001      	beq.n	1000f7f8 <db_addATT+0x80>
1000f7f4:	066b      	lsls	r3, r5, #25
1000f7f6:	d504      	bpl.n	1000f802 <db_addATT+0x8a>
1000f7f8:	2102      	movs	r1, #2
1000f7fa:	6822      	ldr	r2, [r4, #0]
1000f7fc:	7893      	ldrb	r3, [r2, #2]
1000f7fe:	430b      	orrs	r3, r1
1000f800:	7093      	strb	r3, [r2, #2]
1000f802:	4a0a      	ldr	r2, [pc, #40]	; (1000f82c <db_addATT+0xb4>)
1000f804:	2600      	movs	r6, #0
1000f806:	6813      	ldr	r3, [r2, #0]
1000f808:	3301      	adds	r3, #1
1000f80a:	6013      	str	r3, [r2, #0]
1000f80c:	e005      	b.n	1000f81a <db_addATT+0xa2>
1000f80e:	6023      	str	r3, [r4, #0]
1000f810:	2611      	movs	r6, #17
1000f812:	2900      	cmp	r1, #0
1000f814:	d001      	beq.n	1000f81a <db_addATT+0xa2>
1000f816:	1aba      	subs	r2, r7, r2
1000f818:	6002      	str	r2, [r0, #0]
1000f81a:	1c30      	adds	r0, r6, #0
1000f81c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f81e:	46c0      	nop			; (mov r8, r8)
1000f820:	1001837c 	.word	0x1001837c
1000f824:	10018380 	.word	0x10018380
1000f828:	100138e7 	.word	0x100138e7
1000f82c:	10018384 	.word	0x10018384

1000f830 <user_description_define>:
1000f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f832:	1c05      	adds	r5, r0, #0
1000f834:	20cf      	movs	r0, #207	; 0xcf
1000f836:	2a00      	cmp	r2, #0
1000f838:	d01c      	beq.n	1000f874 <user_description_define+0x44>
1000f83a:	1c14      	adds	r4, r2, #0
1000f83c:	2203      	movs	r2, #3
1000f83e:	1c1e      	adds	r6, r3, #0
1000f840:	400a      	ands	r2, r1
1000f842:	1c0b      	adds	r3, r1, #0
1000f844:	3a03      	subs	r2, #3
1000f846:	4251      	negs	r1, r2
1000f848:	4151      	adcs	r1, r2
1000f84a:	075a      	lsls	r2, r3, #29
1000f84c:	0fd2      	lsrs	r2, r2, #31
1000f84e:	430a      	orrs	r2, r1
1000f850:	03d2      	lsls	r2, r2, #15
1000f852:	4f09      	ldr	r7, [pc, #36]	; (1000f878 <user_description_define+0x48>)
1000f854:	1c28      	adds	r0, r5, #0
1000f856:	2a00      	cmp	r2, #0
1000f858:	d003      	beq.n	1000f862 <user_description_define+0x32>
1000f85a:	1c21      	adds	r1, r4, #0
1000f85c:	1c32      	adds	r2, r6, #0
1000f85e:	47b8      	blx	r7
1000f860:	e008      	b.n	1000f874 <user_description_define+0x44>
1000f862:	1c11      	adds	r1, r2, #0
1000f864:	47b8      	blx	r7
1000f866:	2800      	cmp	r0, #0
1000f868:	d104      	bne.n	1000f874 <user_description_define+0x44>
1000f86a:	1c28      	adds	r0, r5, #0
1000f86c:	1c31      	adds	r1, r6, #0
1000f86e:	1c22      	adds	r2, r4, #0
1000f870:	4b02      	ldr	r3, [pc, #8]	; (1000f87c <user_description_define+0x4c>)
1000f872:	4798      	blx	r3
1000f874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f876:	46c0      	nop			; (mov r8, r8)
1000f878:	1000f779 	.word	0x1000f779
1000f87c:	100119f5 	.word	0x100119f5

1000f880 <at_ble_read_authorize_reply.part.1>:
1000f880:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f882:	4b09      	ldr	r3, [pc, #36]	; (1000f8a8 <at_ble_read_authorize_reply.part.1+0x28>)
1000f884:	1c05      	adds	r5, r0, #0
1000f886:	1c08      	adds	r0, r1, #0
1000f888:	1c0c      	adds	r4, r1, #0
1000f88a:	4798      	blx	r3
1000f88c:	2800      	cmp	r0, #0
1000f88e:	d009      	beq.n	1000f8a4 <at_ble_read_authorize_reply.part.1+0x24>
1000f890:	6882      	ldr	r2, [r0, #8]
1000f892:	2a00      	cmp	r2, #0
1000f894:	d006      	beq.n	1000f8a4 <at_ble_read_authorize_reply.part.1+0x24>
1000f896:	8883      	ldrh	r3, [r0, #4]
1000f898:	1c29      	adds	r1, r5, #0
1000f89a:	9200      	str	r2, [sp, #0]
1000f89c:	1c20      	adds	r0, r4, #0
1000f89e:	2200      	movs	r2, #0
1000f8a0:	4c02      	ldr	r4, [pc, #8]	; (1000f8ac <at_ble_read_authorize_reply.part.1+0x2c>)
1000f8a2:	47a0      	blx	r4
1000f8a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f8a6:	46c0      	nop			; (mov r8, r8)
1000f8a8:	1000f619 	.word	0x1000f619
1000f8ac:	10011505 	.word	0x10011505

1000f8b0 <internal_at_ble_service_define>:
1000f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8b2:	b08b      	sub	sp, #44	; 0x2c
1000f8b4:	9306      	str	r3, [sp, #24]
1000f8b6:	ab10      	add	r3, sp, #64	; 0x40
1000f8b8:	9202      	str	r2, [sp, #8]
1000f8ba:	cb04      	ldmia	r3!, {r2}
1000f8bc:	1c05      	adds	r5, r0, #0
1000f8be:	881b      	ldrh	r3, [r3, #0]
1000f8c0:	9105      	str	r1, [sp, #20]
1000f8c2:	9303      	str	r3, [sp, #12]
1000f8c4:	ab12      	add	r3, sp, #72	; 0x48
1000f8c6:	781b      	ldrb	r3, [r3, #0]
1000f8c8:	20cf      	movs	r0, #207	; 0xcf
1000f8ca:	9304      	str	r3, [sp, #16]
1000f8cc:	2d00      	cmp	r5, #0
1000f8ce:	d100      	bne.n	1000f8d2 <internal_at_ble_service_define+0x22>
1000f8d0:	e1ca      	b.n	1000fc68 <internal_at_ble_service_define+0x3b8>
1000f8d2:	2900      	cmp	r1, #0
1000f8d4:	d100      	bne.n	1000f8d8 <internal_at_ble_service_define+0x28>
1000f8d6:	e1c7      	b.n	1000fc68 <internal_at_ble_service_define+0x3b8>
1000f8d8:	2a00      	cmp	r2, #0
1000f8da:	d100      	bne.n	1000f8de <internal_at_ble_service_define+0x2e>
1000f8dc:	e1c4      	b.n	1000fc68 <internal_at_ble_service_define+0x3b8>
1000f8de:	9b03      	ldr	r3, [sp, #12]
1000f8e0:	2b00      	cmp	r3, #0
1000f8e2:	d100      	bne.n	1000f8e6 <internal_at_ble_service_define+0x36>
1000f8e4:	e1c0      	b.n	1000fc68 <internal_at_ble_service_define+0x3b8>
1000f8e6:	4bc9      	ldr	r3, [pc, #804]	; (1000fc0c <internal_at_ble_service_define+0x35c>)
1000f8e8:	3004      	adds	r0, #4
1000f8ea:	681e      	ldr	r6, [r3, #0]
1000f8ec:	2e00      	cmp	r6, #0
1000f8ee:	d100      	bne.n	1000f8f2 <internal_at_ble_service_define+0x42>
1000f8f0:	e1ba      	b.n	1000fc68 <internal_at_ble_service_define+0x3b8>
1000f8f2:	2400      	movs	r4, #0
1000f8f4:	4bc6      	ldr	r3, [pc, #792]	; (1000fc10 <internal_at_ble_service_define+0x360>)
1000f8f6:	8034      	strh	r4, [r6, #0]
1000f8f8:	881b      	ldrh	r3, [r3, #0]
1000f8fa:	1db7      	adds	r7, r6, #6
1000f8fc:	1c21      	adds	r1, r4, #0
1000f8fe:	2210      	movs	r2, #16
1000f900:	8073      	strh	r3, [r6, #2]
1000f902:	1c38      	adds	r0, r7, #0
1000f904:	4bc3      	ldr	r3, [pc, #780]	; (1000fc14 <internal_at_ble_service_define+0x364>)
1000f906:	4798      	blx	r3
1000f908:	7828      	ldrb	r0, [r5, #0]
1000f90a:	4bc3      	ldr	r3, [pc, #780]	; (1000fc18 <internal_at_ble_service_define+0x368>)
1000f90c:	4798      	blx	r3
1000f90e:	1c69      	adds	r1, r5, #1
1000f910:	1c02      	adds	r2, r0, #0
1000f912:	4bc2      	ldr	r3, [pc, #776]	; (1000fc1c <internal_at_ble_service_define+0x36c>)
1000f914:	1c38      	adds	r0, r7, #0
1000f916:	4798      	blx	r3
1000f918:	2204      	movs	r2, #4
1000f91a:	782b      	ldrb	r3, [r5, #0]
1000f91c:	9d02      	ldr	r5, [sp, #8]
1000f91e:	011b      	lsls	r3, r3, #4
1000f920:	4313      	orrs	r3, r2
1000f922:	9a04      	ldr	r2, [sp, #16]
1000f924:	7174      	strb	r4, [r6, #5]
1000f926:	0192      	lsls	r2, r2, #6
1000f928:	4313      	orrs	r3, r2
1000f92a:	7133      	strb	r3, [r6, #4]
1000f92c:	2316      	movs	r3, #22
1000f92e:	9a06      	ldr	r2, [sp, #24]
1000f930:	3512      	adds	r5, #18
1000f932:	4353      	muls	r3, r2
1000f934:	9a02      	ldr	r2, [sp, #8]
1000f936:	3312      	adds	r3, #18
1000f938:	18d7      	adds	r7, r2, r3
1000f93a:	42bd      	cmp	r5, r7
1000f93c:	d00f      	beq.n	1000f95e <internal_at_ble_service_define+0xae>
1000f93e:	4bb8      	ldr	r3, [pc, #736]	; (1000fc20 <internal_at_ble_service_define+0x370>)
1000f940:	8829      	ldrh	r1, [r5, #0]
1000f942:	9300      	str	r3, [sp, #0]
1000f944:	230e      	movs	r3, #14
1000f946:	aa06      	add	r2, sp, #24
1000f948:	189b      	adds	r3, r3, r2
1000f94a:	9301      	str	r3, [sp, #4]
1000f94c:	4cb5      	ldr	r4, [pc, #724]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000f94e:	1c30      	adds	r0, r6, #0
1000f950:	2201      	movs	r2, #1
1000f952:	2302      	movs	r3, #2
1000f954:	47a0      	blx	r4
1000f956:	3516      	adds	r5, #22
1000f958:	1e04      	subs	r4, r0, #0
1000f95a:	d0ee      	beq.n	1000f93a <internal_at_ble_service_define+0x8a>
1000f95c:	e183      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000f95e:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f960:	2300      	movs	r3, #0
1000f962:	3714      	adds	r7, #20
1000f964:	1c3d      	adds	r5, r7, #0
1000f966:	9302      	str	r3, [sp, #8]
1000f968:	9b02      	ldr	r3, [sp, #8]
1000f96a:	9a03      	ldr	r2, [sp, #12]
1000f96c:	4293      	cmp	r3, r2
1000f96e:	db00      	blt.n	1000f972 <internal_at_ble_service_define+0xc2>
1000f970:	e0bf      	b.n	1000faf2 <internal_at_ble_service_define+0x242>
1000f972:	4bad      	ldr	r3, [pc, #692]	; (1000fc28 <internal_at_ble_service_define+0x378>)
1000f974:	aa06      	add	r2, sp, #24
1000f976:	9300      	str	r3, [sp, #0]
1000f978:	230e      	movs	r3, #14
1000f97a:	189b      	adds	r3, r3, r2
1000f97c:	9301      	str	r3, [sp, #4]
1000f97e:	4ca9      	ldr	r4, [pc, #676]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000f980:	1c30      	adds	r0, r6, #0
1000f982:	2104      	movs	r1, #4
1000f984:	2201      	movs	r2, #1
1000f986:	2302      	movs	r3, #2
1000f988:	47a0      	blx	r4
1000f98a:	1e04      	subs	r4, r0, #0
1000f98c:	d000      	beq.n	1000f990 <internal_at_ble_service_define+0xe0>
1000f98e:	e16a      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000f990:	1c2b      	adds	r3, r5, #0
1000f992:	3b12      	subs	r3, #18
1000f994:	7b2c      	ldrb	r4, [r5, #12]
1000f996:	781b      	ldrb	r3, [r3, #0]
1000f998:	1c21      	adds	r1, r4, #0
1000f99a:	1c1a      	adds	r2, r3, #0
1000f99c:	9304      	str	r3, [sp, #16]
1000f99e:	8828      	ldrh	r0, [r5, #0]
1000f9a0:	4ba2      	ldr	r3, [pc, #648]	; (1000fc2c <internal_at_ble_service_define+0x37c>)
1000f9a2:	4798      	blx	r3
1000f9a4:	2303      	movs	r3, #3
1000f9a6:	4023      	ands	r3, r4
1000f9a8:	3b03      	subs	r3, #3
1000f9aa:	4259      	negs	r1, r3
1000f9ac:	4159      	adcs	r1, r3
1000f9ae:	2301      	movs	r3, #1
1000f9b0:	08a4      	lsrs	r4, r4, #2
1000f9b2:	401c      	ands	r4, r3
1000f9b4:	430c      	orrs	r4, r1
1000f9b6:	896b      	ldrh	r3, [r5, #10]
1000f9b8:	03e4      	lsls	r4, r4, #15
1000f9ba:	431c      	orrs	r4, r3
1000f9bc:	9007      	str	r0, [sp, #28]
1000f9be:	4b96      	ldr	r3, [pc, #600]	; (1000fc18 <internal_at_ble_service_define+0x368>)
1000f9c0:	9804      	ldr	r0, [sp, #16]
1000f9c2:	4798      	blx	r3
1000f9c4:	1c2a      	adds	r2, r5, #0
1000f9c6:	3a11      	subs	r2, #17
1000f9c8:	9200      	str	r2, [sp, #0]
1000f9ca:	3a03      	subs	r2, #3
1000f9cc:	1c03      	adds	r3, r0, #0
1000f9ce:	9201      	str	r2, [sp, #4]
1000f9d0:	1c21      	adds	r1, r4, #0
1000f9d2:	1c30      	adds	r0, r6, #0
1000f9d4:	4c93      	ldr	r4, [pc, #588]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000f9d6:	9a07      	ldr	r2, [sp, #28]
1000f9d8:	47a0      	blx	r4
1000f9da:	1e04      	subs	r4, r0, #0
1000f9dc:	d000      	beq.n	1000f9e0 <internal_at_ble_service_define+0x130>
1000f9de:	e142      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000f9e0:	22c0      	movs	r2, #192	; 0xc0
1000f9e2:	882b      	ldrh	r3, [r5, #0]
1000f9e4:	0052      	lsls	r2, r2, #1
1000f9e6:	4213      	tst	r3, r2
1000f9e8:	d104      	bne.n	1000f9f4 <internal_at_ble_service_define+0x144>
1000f9ea:	8aab      	ldrh	r3, [r5, #20]
1000f9ec:	9304      	str	r3, [sp, #16]
1000f9ee:	2b00      	cmp	r3, #0
1000f9f0:	d116      	bne.n	1000fa20 <internal_at_ble_service_define+0x170>
1000f9f2:	e03a      	b.n	1000fa6a <internal_at_ble_service_define+0x1ba>
1000f9f4:	2201      	movs	r2, #1
1000f9f6:	09d9      	lsrs	r1, r3, #7
1000f9f8:	4011      	ands	r1, r2
1000f9fa:	05db      	lsls	r3, r3, #23
1000f9fc:	d501      	bpl.n	1000fa02 <internal_at_ble_service_define+0x152>
1000f9fe:	2302      	movs	r3, #2
1000fa00:	4319      	orrs	r1, r3
1000fa02:	4b8b      	ldr	r3, [pc, #556]	; (1000fc30 <internal_at_ble_service_define+0x380>)
1000fa04:	aa06      	add	r2, sp, #24
1000fa06:	9300      	str	r3, [sp, #0]
1000fa08:	230e      	movs	r3, #14
1000fa0a:	189b      	adds	r3, r3, r2
1000fa0c:	9301      	str	r3, [sp, #4]
1000fa0e:	4c85      	ldr	r4, [pc, #532]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000fa10:	0209      	lsls	r1, r1, #8
1000fa12:	1c30      	adds	r0, r6, #0
1000fa14:	2201      	movs	r2, #1
1000fa16:	2302      	movs	r3, #2
1000fa18:	47a0      	blx	r4
1000fa1a:	1e04      	subs	r4, r0, #0
1000fa1c:	d0e5      	beq.n	1000f9ea <internal_at_ble_service_define+0x13a>
1000fa1e:	e122      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fa20:	2380      	movs	r3, #128	; 0x80
1000fa22:	882a      	ldrh	r2, [r5, #0]
1000fa24:	7f2c      	ldrb	r4, [r5, #28]
1000fa26:	005b      	lsls	r3, r3, #1
1000fa28:	401a      	ands	r2, r3
1000fa2a:	1c20      	adds	r0, r4, #0
1000fa2c:	2101      	movs	r1, #1
1000fa2e:	2a00      	cmp	r2, #0
1000fa30:	d000      	beq.n	1000fa34 <internal_at_ble_service_define+0x184>
1000fa32:	1c0a      	adds	r2, r1, #0
1000fa34:	4b7f      	ldr	r3, [pc, #508]	; (1000fc34 <internal_at_ble_service_define+0x384>)
1000fa36:	4798      	blx	r3
1000fa38:	2203      	movs	r2, #3
1000fa3a:	4022      	ands	r2, r4
1000fa3c:	3a03      	subs	r2, #3
1000fa3e:	4251      	negs	r1, r2
1000fa40:	4151      	adcs	r1, r2
1000fa42:	4b7d      	ldr	r3, [pc, #500]	; (1000fc38 <internal_at_ble_service_define+0x388>)
1000fa44:	1c0a      	adds	r2, r1, #0
1000fa46:	9300      	str	r3, [sp, #0]
1000fa48:	1c2b      	adds	r3, r5, #0
1000fa4a:	0764      	lsls	r4, r4, #29
1000fa4c:	0fe4      	lsrs	r4, r4, #31
1000fa4e:	4322      	orrs	r2, r4
1000fa50:	03d2      	lsls	r2, r2, #15
1000fa52:	4310      	orrs	r0, r2
1000fa54:	3320      	adds	r3, #32
1000fa56:	b282      	uxth	r2, r0
1000fa58:	9301      	str	r3, [sp, #4]
1000fa5a:	4c72      	ldr	r4, [pc, #456]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000fa5c:	1c30      	adds	r0, r6, #0
1000fa5e:	9904      	ldr	r1, [sp, #16]
1000fa60:	2302      	movs	r3, #2
1000fa62:	47a0      	blx	r4
1000fa64:	1e04      	subs	r4, r0, #0
1000fa66:	d000      	beq.n	1000fa6a <internal_at_ble_service_define+0x1ba>
1000fa68:	e0fd      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fa6a:	2101      	movs	r1, #1
1000fa6c:	882b      	ldrh	r3, [r5, #0]
1000fa6e:	420b      	tst	r3, r1
1000fa70:	d011      	beq.n	1000fa96 <internal_at_ble_service_define+0x1e6>
1000fa72:	7fa8      	ldrb	r0, [r5, #30]
1000fa74:	4b6f      	ldr	r3, [pc, #444]	; (1000fc34 <internal_at_ble_service_define+0x384>)
1000fa76:	2200      	movs	r2, #0
1000fa78:	4798      	blx	r3
1000fa7a:	4b70      	ldr	r3, [pc, #448]	; (1000fc3c <internal_at_ble_service_define+0x38c>)
1000fa7c:	1c02      	adds	r2, r0, #0
1000fa7e:	9300      	str	r3, [sp, #0]
1000fa80:	1c2b      	adds	r3, r5, #0
1000fa82:	3324      	adds	r3, #36	; 0x24
1000fa84:	9301      	str	r3, [sp, #4]
1000fa86:	4c67      	ldr	r4, [pc, #412]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000fa88:	1c30      	adds	r0, r6, #0
1000fa8a:	496d      	ldr	r1, [pc, #436]	; (1000fc40 <internal_at_ble_service_define+0x390>)
1000fa8c:	2302      	movs	r3, #2
1000fa8e:	47a0      	blx	r4
1000fa90:	1e04      	subs	r4, r0, #0
1000fa92:	d000      	beq.n	1000fa96 <internal_at_ble_service_define+0x1e6>
1000fa94:	e0e7      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fa96:	2330      	movs	r3, #48	; 0x30
1000fa98:	882a      	ldrh	r2, [r5, #0]
1000fa9a:	421a      	tst	r2, r3
1000fa9c:	d012      	beq.n	1000fac4 <internal_at_ble_service_define+0x214>
1000fa9e:	2101      	movs	r1, #1
1000faa0:	7f68      	ldrb	r0, [r5, #29]
1000faa2:	1c0a      	adds	r2, r1, #0
1000faa4:	4b63      	ldr	r3, [pc, #396]	; (1000fc34 <internal_at_ble_service_define+0x384>)
1000faa6:	4798      	blx	r3
1000faa8:	4b66      	ldr	r3, [pc, #408]	; (1000fc44 <internal_at_ble_service_define+0x394>)
1000faaa:	1c02      	adds	r2, r0, #0
1000faac:	9300      	str	r3, [sp, #0]
1000faae:	1c2b      	adds	r3, r5, #0
1000fab0:	3322      	adds	r3, #34	; 0x22
1000fab2:	9301      	str	r3, [sp, #4]
1000fab4:	4c5b      	ldr	r4, [pc, #364]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000fab6:	1c30      	adds	r0, r6, #0
1000fab8:	4961      	ldr	r1, [pc, #388]	; (1000fc40 <internal_at_ble_service_define+0x390>)
1000faba:	2302      	movs	r3, #2
1000fabc:	47a0      	blx	r4
1000fabe:	1e04      	subs	r4, r0, #0
1000fac0:	d000      	beq.n	1000fac4 <internal_at_ble_service_define+0x214>
1000fac2:	e0d0      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fac4:	69ab      	ldr	r3, [r5, #24]
1000fac6:	2b00      	cmp	r3, #0
1000fac8:	d00e      	beq.n	1000fae8 <internal_at_ble_service_define+0x238>
1000faca:	4b5f      	ldr	r3, [pc, #380]	; (1000fc48 <internal_at_ble_service_define+0x398>)
1000facc:	aa06      	add	r2, sp, #24
1000face:	9300      	str	r3, [sp, #0]
1000fad0:	230e      	movs	r3, #14
1000fad2:	189b      	adds	r3, r3, r2
1000fad4:	9301      	str	r3, [sp, #4]
1000fad6:	4c53      	ldr	r4, [pc, #332]	; (1000fc24 <internal_at_ble_service_define+0x374>)
1000fad8:	1c30      	adds	r0, r6, #0
1000fada:	2107      	movs	r1, #7
1000fadc:	2201      	movs	r2, #1
1000fade:	2302      	movs	r3, #2
1000fae0:	47a0      	blx	r4
1000fae2:	1e04      	subs	r4, r0, #0
1000fae4:	d000      	beq.n	1000fae8 <internal_at_ble_service_define+0x238>
1000fae6:	e0be      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fae8:	9b02      	ldr	r3, [sp, #8]
1000faea:	353c      	adds	r5, #60	; 0x3c
1000faec:	3301      	adds	r3, #1
1000faee:	9302      	str	r3, [sp, #8]
1000faf0:	e73a      	b.n	1000f968 <internal_at_ble_service_define+0xb8>
1000faf2:	1c30      	adds	r0, r6, #0
1000faf4:	4b55      	ldr	r3, [pc, #340]	; (1000fc4c <internal_at_ble_service_define+0x39c>)
1000faf6:	4798      	blx	r3
1000faf8:	1e04      	subs	r4, r0, #0
1000fafa:	d000      	beq.n	1000fafe <internal_at_ble_service_define+0x24e>
1000fafc:	e0b3      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fafe:	8833      	ldrh	r3, [r6, #0]
1000fb00:	9a05      	ldr	r2, [sp, #20]
1000fb02:	8013      	strh	r3, [r2, #0]
1000fb04:	8836      	ldrh	r6, [r6, #0]
1000fb06:	9b06      	ldr	r3, [sp, #24]
1000fb08:	9a03      	ldr	r2, [sp, #12]
1000fb0a:	18f6      	adds	r6, r6, r3
1000fb0c:	b2b3      	uxth	r3, r6
1000fb0e:	9302      	str	r3, [sp, #8]
1000fb10:	233c      	movs	r3, #60	; 0x3c
1000fb12:	4353      	muls	r3, r2
1000fb14:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000fb16:	3314      	adds	r3, #20
1000fb18:	18d3      	adds	r3, r2, r3
1000fb1a:	9304      	str	r3, [sp, #16]
1000fb1c:	9b04      	ldr	r3, [sp, #16]
1000fb1e:	429f      	cmp	r7, r3
1000fb20:	d100      	bne.n	1000fb24 <internal_at_ble_service_define+0x274>
1000fb22:	e0a0      	b.n	1000fc66 <internal_at_ble_service_define+0x3b6>
1000fb24:	9b02      	ldr	r3, [sp, #8]
1000fb26:	1c9d      	adds	r5, r3, #2
1000fb28:	1c3b      	adds	r3, r7, #0
1000fb2a:	b2ad      	uxth	r5, r5
1000fb2c:	3b14      	subs	r3, #20
1000fb2e:	801d      	strh	r5, [r3, #0]
1000fb30:	9303      	str	r3, [sp, #12]
1000fb32:	893b      	ldrh	r3, [r7, #8]
1000fb34:	2b00      	cmp	r3, #0
1000fb36:	d108      	bne.n	1000fb4a <internal_at_ble_service_define+0x29a>
1000fb38:	23c0      	movs	r3, #192	; 0xc0
1000fb3a:	883a      	ldrh	r2, [r7, #0]
1000fb3c:	005b      	lsls	r3, r3, #1
1000fb3e:	421a      	tst	r2, r3
1000fb40:	d026      	beq.n	1000fb90 <internal_at_ble_service_define+0x2e0>
1000fb42:	9e02      	ldr	r6, [sp, #8]
1000fb44:	3603      	adds	r6, #3
1000fb46:	b2b5      	uxth	r5, r6
1000fb48:	e022      	b.n	1000fb90 <internal_at_ble_service_define+0x2e0>
1000fb4a:	2103      	movs	r1, #3
1000fb4c:	7b3b      	ldrb	r3, [r7, #12]
1000fb4e:	4019      	ands	r1, r3
1000fb50:	3903      	subs	r1, #3
1000fb52:	424a      	negs	r2, r1
1000fb54:	414a      	adcs	r2, r1
1000fb56:	0759      	lsls	r1, r3, #29
1000fb58:	0fc9      	lsrs	r1, r1, #31
1000fb5a:	4311      	orrs	r1, r2
1000fb5c:	03c9      	lsls	r1, r1, #15
1000fb5e:	897a      	ldrh	r2, [r7, #10]
1000fb60:	2900      	cmp	r1, #0
1000fb62:	d007      	beq.n	1000fb74 <internal_at_ble_service_define+0x2c4>
1000fb64:	6879      	ldr	r1, [r7, #4]
1000fb66:	2900      	cmp	r1, #0
1000fb68:	d100      	bne.n	1000fb6c <internal_at_ble_service_define+0x2bc>
1000fb6a:	4939      	ldr	r1, [pc, #228]	; (1000fc50 <internal_at_ble_service_define+0x3a0>)
1000fb6c:	1c28      	adds	r0, r5, #0
1000fb6e:	4e39      	ldr	r6, [pc, #228]	; (1000fc54 <internal_at_ble_service_define+0x3a4>)
1000fb70:	47b0      	blx	r6
1000fb72:	e00a      	b.n	1000fb8a <internal_at_ble_service_define+0x2da>
1000fb74:	1c28      	adds	r0, r5, #0
1000fb76:	4e37      	ldr	r6, [pc, #220]	; (1000fc54 <internal_at_ble_service_define+0x3a4>)
1000fb78:	47b0      	blx	r6
1000fb7a:	2800      	cmp	r0, #0
1000fb7c:	d172      	bne.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fb7e:	9b03      	ldr	r3, [sp, #12]
1000fb80:	8939      	ldrh	r1, [r7, #8]
1000fb82:	8818      	ldrh	r0, [r3, #0]
1000fb84:	687a      	ldr	r2, [r7, #4]
1000fb86:	4b34      	ldr	r3, [pc, #208]	; (1000fc58 <internal_at_ble_service_define+0x3a8>)
1000fb88:	4798      	blx	r3
1000fb8a:	2800      	cmp	r0, #0
1000fb8c:	d0d4      	beq.n	1000fb38 <internal_at_ble_service_define+0x288>
1000fb8e:	e069      	b.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fb90:	8abb      	ldrh	r3, [r7, #20]
1000fb92:	2b00      	cmp	r3, #0
1000fb94:	d00a      	beq.n	1000fbac <internal_at_ble_service_define+0x2fc>
1000fb96:	3501      	adds	r5, #1
1000fb98:	b2ad      	uxth	r5, r5
1000fb9a:	843d      	strh	r5, [r7, #32]
1000fb9c:	7f39      	ldrb	r1, [r7, #28]
1000fb9e:	8afb      	ldrh	r3, [r7, #22]
1000fba0:	1c28      	adds	r0, r5, #0
1000fba2:	693a      	ldr	r2, [r7, #16]
1000fba4:	4e2d      	ldr	r6, [pc, #180]	; (1000fc5c <internal_at_ble_service_define+0x3ac>)
1000fba6:	47b0      	blx	r6
1000fba8:	2800      	cmp	r0, #0
1000fbaa:	d15b      	bne.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fbac:	883b      	ldrh	r3, [r7, #0]
1000fbae:	07db      	lsls	r3, r3, #31
1000fbb0:	d50d      	bpl.n	1000fbce <internal_at_ble_service_define+0x31e>
1000fbb2:	2200      	movs	r2, #0
1000fbb4:	3501      	adds	r5, #1
1000fbb6:	b2ad      	uxth	r5, r5
1000fbb8:	a909      	add	r1, sp, #36	; 0x24
1000fbba:	84bd      	strh	r5, [r7, #36]	; 0x24
1000fbbc:	7fbb      	ldrb	r3, [r7, #30]
1000fbbe:	1c28      	adds	r0, r5, #0
1000fbc0:	700a      	strb	r2, [r1, #0]
1000fbc2:	704a      	strb	r2, [r1, #1]
1000fbc4:	4e23      	ldr	r6, [pc, #140]	; (1000fc54 <internal_at_ble_service_define+0x3a4>)
1000fbc6:	3202      	adds	r2, #2
1000fbc8:	47b0      	blx	r6
1000fbca:	2800      	cmp	r0, #0
1000fbcc:	d14a      	bne.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fbce:	2330      	movs	r3, #48	; 0x30
1000fbd0:	883a      	ldrh	r2, [r7, #0]
1000fbd2:	421a      	tst	r2, r3
1000fbd4:	d00d      	beq.n	1000fbf2 <internal_at_ble_service_define+0x342>
1000fbd6:	2200      	movs	r2, #0
1000fbd8:	3501      	adds	r5, #1
1000fbda:	b2ad      	uxth	r5, r5
1000fbdc:	a909      	add	r1, sp, #36	; 0x24
1000fbde:	847d      	strh	r5, [r7, #34]	; 0x22
1000fbe0:	7f7b      	ldrb	r3, [r7, #29]
1000fbe2:	1c28      	adds	r0, r5, #0
1000fbe4:	700a      	strb	r2, [r1, #0]
1000fbe6:	704a      	strb	r2, [r1, #1]
1000fbe8:	4e1a      	ldr	r6, [pc, #104]	; (1000fc54 <internal_at_ble_service_define+0x3a4>)
1000fbea:	3202      	adds	r2, #2
1000fbec:	47b0      	blx	r6
1000fbee:	2800      	cmp	r0, #0
1000fbf0:	d138      	bne.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fbf2:	69b9      	ldr	r1, [r7, #24]
1000fbf4:	2900      	cmp	r1, #0
1000fbf6:	d006      	beq.n	1000fc06 <internal_at_ble_service_define+0x356>
1000fbf8:	3501      	adds	r5, #1
1000fbfa:	b2ad      	uxth	r5, r5
1000fbfc:	1c28      	adds	r0, r5, #0
1000fbfe:	4b18      	ldr	r3, [pc, #96]	; (1000fc60 <internal_at_ble_service_define+0x3b0>)
1000fc00:	4798      	blx	r3
1000fc02:	2800      	cmp	r0, #0
1000fc04:	d12e      	bne.n	1000fc64 <internal_at_ble_service_define+0x3b4>
1000fc06:	373c      	adds	r7, #60	; 0x3c
1000fc08:	9502      	str	r5, [sp, #8]
1000fc0a:	e787      	b.n	1000fb1c <internal_at_ble_service_define+0x26c>
1000fc0c:	1001838c 	.word	0x1001838c
1000fc10:	1001927c 	.word	0x1001927c
1000fc14:	100138f9 	.word	0x100138f9
1000fc18:	1000f5e5 	.word	0x1000f5e5
1000fc1c:	100138e7 	.word	0x100138e7
1000fc20:	100166e3 	.word	0x100166e3
1000fc24:	10011985 	.word	0x10011985
1000fc28:	100166e5 	.word	0x100166e5
1000fc2c:	1000f6b1 	.word	0x1000f6b1
1000fc30:	100166e1 	.word	0x100166e1
1000fc34:	1000f659 	.word	0x1000f659
1000fc38:	100166dd 	.word	0x100166dd
1000fc3c:	100166df 	.word	0x100166df
1000fc40:	00008002 	.word	0x00008002
1000fc44:	100166d9 	.word	0x100166d9
1000fc48:	100166db 	.word	0x100166db
1000fc4c:	10011879 	.word	0x10011879
1000fc50:	10018378 	.word	0x10018378
1000fc54:	1000f779 	.word	0x1000f779
1000fc58:	100119f5 	.word	0x100119f5
1000fc5c:	1000f831 	.word	0x1000f831
1000fc60:	1000f74d 	.word	0x1000f74d
1000fc64:	1c04      	adds	r4, r0, #0
1000fc66:	1c20      	adds	r0, r4, #0
1000fc68:	b00b      	add	sp, #44	; 0x2c
1000fc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000fc6c <initi_gatt_server_module>:
1000fc6c:	2300      	movs	r3, #0
1000fc6e:	4a07      	ldr	r2, [pc, #28]	; (1000fc8c <initi_gatt_server_module+0x20>)
1000fc70:	7013      	strb	r3, [r2, #0]
1000fc72:	4a07      	ldr	r2, [pc, #28]	; (1000fc90 <initi_gatt_server_module+0x24>)
1000fc74:	6013      	str	r3, [r2, #0]
1000fc76:	4a07      	ldr	r2, [pc, #28]	; (1000fc94 <initi_gatt_server_module+0x28>)
1000fc78:	6013      	str	r3, [r2, #0]
1000fc7a:	4a07      	ldr	r2, [pc, #28]	; (1000fc98 <initi_gatt_server_module+0x2c>)
1000fc7c:	6013      	str	r3, [r2, #0]
1000fc7e:	4a07      	ldr	r2, [pc, #28]	; (1000fc9c <initi_gatt_server_module+0x30>)
1000fc80:	6013      	str	r3, [r2, #0]
1000fc82:	4a07      	ldr	r2, [pc, #28]	; (1000fca0 <initi_gatt_server_module+0x34>)
1000fc84:	6013      	str	r3, [r2, #0]
1000fc86:	4a07      	ldr	r2, [pc, #28]	; (1000fca4 <initi_gatt_server_module+0x38>)
1000fc88:	6013      	str	r3, [r2, #0]
1000fc8a:	4770      	bx	lr
1000fc8c:	10018378 	.word	0x10018378
1000fc90:	10018388 	.word	0x10018388
1000fc94:	10018384 	.word	0x10018384
1000fc98:	10018374 	.word	0x10018374
1000fc9c:	10018380 	.word	0x10018380
1000fca0:	1001837c 	.word	0x1001837c
1000fca4:	1001838c 	.word	0x1001838c

1000fca8 <db_init>:
1000fca8:	4b0a      	ldr	r3, [pc, #40]	; (1000fcd4 <db_init+0x2c>)
1000fcaa:	4a0b      	ldr	r2, [pc, #44]	; (1000fcd8 <db_init+0x30>)
1000fcac:	6018      	str	r0, [r3, #0]
1000fcae:	084b      	lsrs	r3, r1, #1
1000fcb0:	6013      	str	r3, [r2, #0]
1000fcb2:	4a0a      	ldr	r2, [pc, #40]	; (1000fcdc <db_init+0x34>)
1000fcb4:	18c3      	adds	r3, r0, r3
1000fcb6:	6013      	str	r3, [r2, #0]
1000fcb8:	4a09      	ldr	r2, [pc, #36]	; (1000fce0 <db_init+0x38>)
1000fcba:	1841      	adds	r1, r0, r1
1000fcbc:	6013      	str	r3, [r2, #0]
1000fcbe:	2303      	movs	r3, #3
1000fcc0:	2200      	movs	r2, #0
1000fcc2:	3103      	adds	r1, #3
1000fcc4:	4399      	bics	r1, r3
1000fcc6:	4b07      	ldr	r3, [pc, #28]	; (1000fce4 <db_init+0x3c>)
1000fcc8:	3904      	subs	r1, #4
1000fcca:	6019      	str	r1, [r3, #0]
1000fccc:	4b06      	ldr	r3, [pc, #24]	; (1000fce8 <db_init+0x40>)
1000fcce:	601a      	str	r2, [r3, #0]
1000fcd0:	4770      	bx	lr
1000fcd2:	46c0      	nop			; (mov r8, r8)
1000fcd4:	1001838c 	.word	0x1001838c
1000fcd8:	10018388 	.word	0x10018388
1000fcdc:	10018374 	.word	0x10018374
1000fce0:	10018380 	.word	0x10018380
1000fce4:	1001837c 	.word	0x1001837c
1000fce8:	10018384 	.word	0x10018384

1000fcec <at_ble_primary_service_define>:
1000fcec:	b530      	push	{r4, r5, lr}
1000fcee:	b085      	sub	sp, #20
1000fcf0:	ac08      	add	r4, sp, #32
1000fcf2:	cc20      	ldmia	r4!, {r5}
1000fcf4:	8824      	ldrh	r4, [r4, #0]
1000fcf6:	9500      	str	r5, [sp, #0]
1000fcf8:	9401      	str	r4, [sp, #4]
1000fcfa:	2401      	movs	r4, #1
1000fcfc:	9402      	str	r4, [sp, #8]
1000fcfe:	4c02      	ldr	r4, [pc, #8]	; (1000fd08 <at_ble_primary_service_define+0x1c>)
1000fd00:	47a0      	blx	r4
1000fd02:	b005      	add	sp, #20
1000fd04:	bd30      	pop	{r4, r5, pc}
1000fd06:	46c0      	nop			; (mov r8, r8)
1000fd08:	1000f8b1 	.word	0x1000f8b1

1000fd0c <at_ble_characteristic_value_set>:
1000fd0c:	b570      	push	{r4, r5, r6, lr}
1000fd0e:	4b0b      	ldr	r3, [pc, #44]	; (1000fd3c <at_ble_characteristic_value_set+0x30>)
1000fd10:	1c06      	adds	r6, r0, #0
1000fd12:	1c0c      	adds	r4, r1, #0
1000fd14:	1c15      	adds	r5, r2, #0
1000fd16:	4798      	blx	r3
1000fd18:	2800      	cmp	r0, #0
1000fd1a:	d008      	beq.n	1000fd2e <at_ble_characteristic_value_set+0x22>
1000fd1c:	6880      	ldr	r0, [r0, #8]
1000fd1e:	2800      	cmp	r0, #0
1000fd20:	d005      	beq.n	1000fd2e <at_ble_characteristic_value_set+0x22>
1000fd22:	1c21      	adds	r1, r4, #0
1000fd24:	1c2a      	adds	r2, r5, #0
1000fd26:	4b06      	ldr	r3, [pc, #24]	; (1000fd40 <at_ble_characteristic_value_set+0x34>)
1000fd28:	4798      	blx	r3
1000fd2a:	2000      	movs	r0, #0
1000fd2c:	e004      	b.n	1000fd38 <at_ble_characteristic_value_set+0x2c>
1000fd2e:	1c30      	adds	r0, r6, #0
1000fd30:	1c29      	adds	r1, r5, #0
1000fd32:	1c22      	adds	r2, r4, #0
1000fd34:	4b03      	ldr	r3, [pc, #12]	; (1000fd44 <at_ble_characteristic_value_set+0x38>)
1000fd36:	4798      	blx	r3
1000fd38:	bd70      	pop	{r4, r5, r6, pc}
1000fd3a:	46c0      	nop			; (mov r8, r8)
1000fd3c:	1000f619 	.word	0x1000f619
1000fd40:	100138e7 	.word	0x100138e7
1000fd44:	100119f5 	.word	0x100119f5

1000fd48 <at_ble_characteristic_value_get>:
1000fd48:	b570      	push	{r4, r5, r6, lr}
1000fd4a:	4b0c      	ldr	r3, [pc, #48]	; (1000fd7c <at_ble_characteristic_value_get+0x34>)
1000fd4c:	1c06      	adds	r6, r0, #0
1000fd4e:	1c0c      	adds	r4, r1, #0
1000fd50:	1c15      	adds	r5, r2, #0
1000fd52:	4798      	blx	r3
1000fd54:	2800      	cmp	r0, #0
1000fd56:	d00b      	beq.n	1000fd70 <at_ble_characteristic_value_get+0x28>
1000fd58:	6883      	ldr	r3, [r0, #8]
1000fd5a:	2b00      	cmp	r3, #0
1000fd5c:	d008      	beq.n	1000fd70 <at_ble_characteristic_value_get+0x28>
1000fd5e:	8883      	ldrh	r3, [r0, #4]
1000fd60:	802b      	strh	r3, [r5, #0]
1000fd62:	8882      	ldrh	r2, [r0, #4]
1000fd64:	6881      	ldr	r1, [r0, #8]
1000fd66:	4b06      	ldr	r3, [pc, #24]	; (1000fd80 <at_ble_characteristic_value_get+0x38>)
1000fd68:	1c20      	adds	r0, r4, #0
1000fd6a:	4798      	blx	r3
1000fd6c:	2000      	movs	r0, #0
1000fd6e:	e004      	b.n	1000fd7a <at_ble_characteristic_value_get+0x32>
1000fd70:	1c30      	adds	r0, r6, #0
1000fd72:	1c29      	adds	r1, r5, #0
1000fd74:	1c22      	adds	r2, r4, #0
1000fd76:	4b03      	ldr	r3, [pc, #12]	; (1000fd84 <at_ble_characteristic_value_get+0x3c>)
1000fd78:	4798      	blx	r3
1000fd7a:	bd70      	pop	{r4, r5, r6, pc}
1000fd7c:	1000f619 	.word	0x1000f619
1000fd80:	100138e7 	.word	0x100138e7
1000fd84:	10011a81 	.word	0x10011a81

1000fd88 <at_ble_write_authorize_reply>:
1000fd88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd8a:	b085      	sub	sp, #20
1000fd8c:	1c04      	adds	r4, r0, #0
1000fd8e:	9101      	str	r1, [sp, #4]
1000fd90:	2900      	cmp	r1, #0
1000fd92:	d128      	bne.n	1000fde6 <at_ble_write_authorize_reply+0x5e>
1000fd94:	8843      	ldrh	r3, [r0, #2]
1000fd96:	1c27      	adds	r7, r4, #0
1000fd98:	9300      	str	r3, [sp, #0]
1000fd9a:	1c18      	adds	r0, r3, #0
1000fd9c:	4b16      	ldr	r3, [pc, #88]	; (1000fdf8 <at_ble_write_authorize_reply+0x70>)
1000fd9e:	4798      	blx	r3
1000fda0:	3708      	adds	r7, #8
1000fda2:	2800      	cmp	r0, #0
1000fda4:	d009      	beq.n	1000fdba <at_ble_write_authorize_reply+0x32>
1000fda6:	6880      	ldr	r0, [r0, #8]
1000fda8:	2800      	cmp	r0, #0
1000fdaa:	d006      	beq.n	1000fdba <at_ble_write_authorize_reply+0x32>
1000fdac:	88a3      	ldrh	r3, [r4, #4]
1000fdae:	88e2      	ldrh	r2, [r4, #6]
1000fdb0:	18c0      	adds	r0, r0, r3
1000fdb2:	1c39      	adds	r1, r7, #0
1000fdb4:	4b11      	ldr	r3, [pc, #68]	; (1000fdfc <at_ble_write_authorize_reply+0x74>)
1000fdb6:	4798      	blx	r3
1000fdb8:	e015      	b.n	1000fde6 <at_ble_write_authorize_reply+0x5e>
1000fdba:	ab02      	add	r3, sp, #8
1000fdbc:	1d9e      	adds	r6, r3, #6
1000fdbe:	2300      	movs	r3, #0
1000fdc0:	4d0f      	ldr	r5, [pc, #60]	; (1000fe00 <at_ble_write_authorize_reply+0x78>)
1000fdc2:	8033      	strh	r3, [r6, #0]
1000fdc4:	6829      	ldr	r1, [r5, #0]
1000fdc6:	1c32      	adds	r2, r6, #0
1000fdc8:	4b0e      	ldr	r3, [pc, #56]	; (1000fe04 <at_ble_write_authorize_reply+0x7c>)
1000fdca:	9800      	ldr	r0, [sp, #0]
1000fdcc:	4798      	blx	r3
1000fdce:	682b      	ldr	r3, [r5, #0]
1000fdd0:	88a0      	ldrh	r0, [r4, #4]
1000fdd2:	88e2      	ldrh	r2, [r4, #6]
1000fdd4:	1818      	adds	r0, r3, r0
1000fdd6:	1c39      	adds	r1, r7, #0
1000fdd8:	4b08      	ldr	r3, [pc, #32]	; (1000fdfc <at_ble_write_authorize_reply+0x74>)
1000fdda:	4798      	blx	r3
1000fddc:	8860      	ldrh	r0, [r4, #2]
1000fdde:	8832      	ldrh	r2, [r6, #0]
1000fde0:	6829      	ldr	r1, [r5, #0]
1000fde2:	4b09      	ldr	r3, [pc, #36]	; (1000fe08 <at_ble_write_authorize_reply+0x80>)
1000fde4:	4798      	blx	r3
1000fde6:	8860      	ldrh	r0, [r4, #2]
1000fde8:	8821      	ldrh	r1, [r4, #0]
1000fdea:	9a01      	ldr	r2, [sp, #4]
1000fdec:	4b07      	ldr	r3, [pc, #28]	; (1000fe0c <at_ble_write_authorize_reply+0x84>)
1000fdee:	4798      	blx	r3
1000fdf0:	2000      	movs	r0, #0
1000fdf2:	b005      	add	sp, #20
1000fdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdf6:	46c0      	nop			; (mov r8, r8)
1000fdf8:	1000f619 	.word	0x1000f619
1000fdfc:	100138e7 	.word	0x100138e7
1000fe00:	100168e8 	.word	0x100168e8
1000fe04:	1000fd49 	.word	0x1000fd49
1000fe08:	1000fd0d 	.word	0x1000fd0d
1000fe0c:	10011571 	.word	0x10011571

1000fe10 <gatts_handle_read_req>:
1000fe10:	b538      	push	{r3, r4, r5, lr}
1000fe12:	1c0c      	adds	r4, r1, #0
1000fe14:	4b07      	ldr	r3, [pc, #28]	; (1000fe34 <gatts_handle_read_req+0x24>)
1000fe16:	4798      	blx	r3
1000fe18:	8865      	ldrh	r5, [r4, #2]
1000fe1a:	4b07      	ldr	r3, [pc, #28]	; (1000fe38 <gatts_handle_read_req+0x28>)
1000fe1c:	1c28      	adds	r0, r5, #0
1000fe1e:	4798      	blx	r3
1000fe20:	7883      	ldrb	r3, [r0, #2]
1000fe22:	2026      	movs	r0, #38	; 0x26
1000fe24:	07db      	lsls	r3, r3, #31
1000fe26:	d404      	bmi.n	1000fe32 <gatts_handle_read_req+0x22>
1000fe28:	8820      	ldrh	r0, [r4, #0]
1000fe2a:	1c29      	adds	r1, r5, #0
1000fe2c:	4b03      	ldr	r3, [pc, #12]	; (1000fe3c <gatts_handle_read_req+0x2c>)
1000fe2e:	4798      	blx	r3
1000fe30:	203b      	movs	r0, #59	; 0x3b
1000fe32:	bd38      	pop	{r3, r4, r5, pc}
1000fe34:	100114b5 	.word	0x100114b5
1000fe38:	1000f619 	.word	0x1000f619
1000fe3c:	1000f881 	.word	0x1000f881

1000fe40 <gatts_handle_att_info_req>:
1000fe40:	b538      	push	{r3, r4, r5, lr}
1000fe42:	1c0d      	adds	r5, r1, #0
1000fe44:	4b0a      	ldr	r3, [pc, #40]	; (1000fe70 <gatts_handle_att_info_req+0x30>)
1000fe46:	1c14      	adds	r4, r2, #0
1000fe48:	4798      	blx	r3
1000fe4a:	882d      	ldrh	r5, [r5, #0]
1000fe4c:	4b09      	ldr	r3, [pc, #36]	; (1000fe74 <gatts_handle_att_info_req+0x34>)
1000fe4e:	1c28      	adds	r0, r5, #0
1000fe50:	4798      	blx	r3
1000fe52:	0a22      	lsrs	r2, r4, #8
1000fe54:	1c03      	adds	r3, r0, #0
1000fe56:	4c08      	ldr	r4, [pc, #32]	; (1000fe78 <gatts_handle_att_info_req+0x38>)
1000fe58:	b291      	uxth	r1, r2
1000fe5a:	2800      	cmp	r0, #0
1000fe5c:	d003      	beq.n	1000fe66 <gatts_handle_att_info_req+0x26>
1000fe5e:	8882      	ldrh	r2, [r0, #4]
1000fe60:	2300      	movs	r3, #0
1000fe62:	1c28      	adds	r0, r5, #0
1000fe64:	e001      	b.n	1000fe6a <gatts_handle_att_info_req+0x2a>
1000fe66:	1c28      	adds	r0, r5, #0
1000fe68:	2201      	movs	r2, #1
1000fe6a:	47a0      	blx	r4
1000fe6c:	203b      	movs	r0, #59	; 0x3b
1000fe6e:	bd38      	pop	{r3, r4, r5, pc}
1000fe70:	100114f9 	.word	0x100114f9
1000fe74:	1000f619 	.word	0x1000f619
1000fe78:	100115b5 	.word	0x100115b5

1000fe7c <gatts_handle_write_req>:
1000fe7c:	b510      	push	{r4, lr}
1000fe7e:	1c14      	adds	r4, r2, #0
1000fe80:	4b07      	ldr	r3, [pc, #28]	; (1000fea0 <gatts_handle_write_req+0x24>)
1000fe82:	4798      	blx	r3
1000fe84:	4b07      	ldr	r3, [pc, #28]	; (1000fea4 <gatts_handle_write_req+0x28>)
1000fe86:	8860      	ldrh	r0, [r4, #2]
1000fe88:	4798      	blx	r3
1000fe8a:	2302      	movs	r3, #2
1000fe8c:	7881      	ldrb	r1, [r0, #2]
1000fe8e:	2022      	movs	r0, #34	; 0x22
1000fe90:	4019      	ands	r1, r3
1000fe92:	d103      	bne.n	1000fe9c <gatts_handle_write_req+0x20>
1000fe94:	1c20      	adds	r0, r4, #0
1000fe96:	4b04      	ldr	r3, [pc, #16]	; (1000fea8 <gatts_handle_write_req+0x2c>)
1000fe98:	4798      	blx	r3
1000fe9a:	201f      	movs	r0, #31
1000fe9c:	bd10      	pop	{r4, pc}
1000fe9e:	46c0      	nop			; (mov r8, r8)
1000fea0:	100114c1 	.word	0x100114c1
1000fea4:	1000f619 	.word	0x1000f619
1000fea8:	1000fd89 	.word	0x1000fd89

1000feac <init_l2cc_task_module>:
1000feac:	220a      	movs	r2, #10
1000feae:	4b01      	ldr	r3, [pc, #4]	; (1000feb4 <init_l2cc_task_module+0x8>)
1000feb0:	701a      	strb	r2, [r3, #0]
1000feb2:	4770      	bx	lr
1000feb4:	100168e4 	.word	0x100168e4

1000feb8 <l2cc_data_send_rsp_handler>:
1000feb8:	b510      	push	{r4, lr}
1000feba:	7802      	ldrb	r2, [r0, #0]
1000febc:	700a      	strb	r2, [r1, #0]
1000febe:	7883      	ldrb	r3, [r0, #2]
1000fec0:	7844      	ldrb	r4, [r0, #1]
1000fec2:	021b      	lsls	r3, r3, #8
1000fec4:	4323      	orrs	r3, r4
1000fec6:	804b      	strh	r3, [r1, #2]
1000fec8:	7903      	ldrb	r3, [r0, #4]
1000feca:	78c0      	ldrb	r0, [r0, #3]
1000fecc:	021b      	lsls	r3, r3, #8
1000fece:	4303      	orrs	r3, r0
1000fed0:	808b      	strh	r3, [r1, #4]
1000fed2:	2a00      	cmp	r2, #0
1000fed4:	d103      	bne.n	1000fede <l2cc_data_send_rsp_handler+0x26>
1000fed6:	4a02      	ldr	r2, [pc, #8]	; (1000fee0 <l2cc_data_send_rsp_handler+0x28>)
1000fed8:	7813      	ldrb	r3, [r2, #0]
1000feda:	3301      	adds	r3, #1
1000fedc:	7013      	strb	r3, [r2, #0]
1000fede:	bd10      	pop	{r4, pc}
1000fee0:	100168e4 	.word	0x100168e4

1000fee4 <l2cc_data_received_handler>:
1000fee4:	b508      	push	{r3, lr}
1000fee6:	1c03      	adds	r3, r0, #0
1000fee8:	7842      	ldrb	r2, [r0, #1]
1000feea:	7800      	ldrb	r0, [r0, #0]
1000feec:	0212      	lsls	r2, r2, #8
1000feee:	4302      	orrs	r2, r0
1000fef0:	800a      	strh	r2, [r1, #0]
1000fef2:	78da      	ldrb	r2, [r3, #3]
1000fef4:	7898      	ldrb	r0, [r3, #2]
1000fef6:	0212      	lsls	r2, r2, #8
1000fef8:	4302      	orrs	r2, r0
1000fefa:	804a      	strh	r2, [r1, #2]
1000fefc:	795a      	ldrb	r2, [r3, #5]
1000fefe:	7918      	ldrb	r0, [r3, #4]
1000ff00:	0212      	lsls	r2, r2, #8
1000ff02:	4302      	orrs	r2, r0
1000ff04:	808a      	strh	r2, [r1, #4]
1000ff06:	1d88      	adds	r0, r1, #6
1000ff08:	1d99      	adds	r1, r3, #6
1000ff0a:	4b01      	ldr	r3, [pc, #4]	; (1000ff10 <l2cc_data_received_handler+0x2c>)
1000ff0c:	4798      	blx	r3
1000ff0e:	bd08      	pop	{r3, pc}
1000ff10:	100138e7 	.word	0x100138e7

1000ff14 <at_ble_authenticate>:
1000ff14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff16:	1c0c      	adds	r4, r1, #0
1000ff18:	211f      	movs	r1, #31
1000ff1a:	b08b      	sub	sp, #44	; 0x2c
1000ff1c:	9307      	str	r3, [sp, #28]
1000ff1e:	ab02      	add	r3, sp, #8
1000ff20:	18c9      	adds	r1, r1, r3
1000ff22:	230f      	movs	r3, #15
1000ff24:	700b      	strb	r3, [r1, #0]
1000ff26:	4b40      	ldr	r3, [pc, #256]	; (10010028 <at_ble_authenticate+0x114>)
1000ff28:	1c05      	adds	r5, r0, #0
1000ff2a:	1c16      	adds	r6, r2, #0
1000ff2c:	4798      	blx	r3
1000ff2e:	1c07      	adds	r7, r0, #0
1000ff30:	2001      	movs	r0, #1
1000ff32:	2f07      	cmp	r7, #7
1000ff34:	d875      	bhi.n	10010022 <at_ble_authenticate+0x10e>
1000ff36:	2c00      	cmp	r4, #0
1000ff38:	d113      	bne.n	1000ff62 <at_ble_authenticate+0x4e>
1000ff3a:	2312      	movs	r3, #18
1000ff3c:	435f      	muls	r7, r3
1000ff3e:	4b3b      	ldr	r3, [pc, #236]	; (1001002c <at_ble_authenticate+0x118>)
1000ff40:	5cfb      	ldrb	r3, [r7, r3]
1000ff42:	4283      	cmp	r3, r0
1000ff44:	d001      	beq.n	1000ff4a <at_ble_authenticate+0x36>
1000ff46:	20cf      	movs	r0, #207	; 0xcf
1000ff48:	e06b      	b.n	10010022 <at_ble_authenticate+0x10e>
1000ff4a:	9504      	str	r5, [sp, #16]
1000ff4c:	9400      	str	r4, [sp, #0]
1000ff4e:	9401      	str	r4, [sp, #4]
1000ff50:	9402      	str	r4, [sp, #8]
1000ff52:	9403      	str	r4, [sp, #12]
1000ff54:	1c20      	adds	r0, r4, #0
1000ff56:	1c21      	adds	r1, r4, #0
1000ff58:	1c22      	adds	r2, r4, #0
1000ff5a:	1c23      	adds	r3, r4, #0
1000ff5c:	4d34      	ldr	r5, [pc, #208]	; (10010030 <at_ble_authenticate+0x11c>)
1000ff5e:	47a8      	blx	r5
1000ff60:	e05e      	b.n	10010020 <at_ble_authenticate+0x10c>
1000ff62:	7922      	ldrb	r2, [r4, #4]
1000ff64:	2a06      	cmp	r2, #6
1000ff66:	d9ee      	bls.n	1000ff46 <at_ble_authenticate+0x32>
1000ff68:	7963      	ldrb	r3, [r4, #5]
1000ff6a:	2b10      	cmp	r3, #16
1000ff6c:	d8eb      	bhi.n	1000ff46 <at_ble_authenticate+0x32>
1000ff6e:	429a      	cmp	r2, r3
1000ff70:	d8e9      	bhi.n	1000ff46 <at_ble_authenticate+0x32>
1000ff72:	7a23      	ldrb	r3, [r4, #8]
1000ff74:	2b04      	cmp	r3, #4
1000ff76:	d8e6      	bhi.n	1000ff46 <at_ble_authenticate+0x32>
1000ff78:	79a3      	ldrb	r3, [r4, #6]
1000ff7a:	2b07      	cmp	r3, #7
1000ff7c:	d8e3      	bhi.n	1000ff46 <at_ble_authenticate+0x32>
1000ff7e:	79e3      	ldrb	r3, [r4, #7]
1000ff80:	2b07      	cmp	r3, #7
1000ff82:	d8e0      	bhi.n	1000ff46 <at_ble_authenticate+0x32>
1000ff84:	78a3      	ldrb	r3, [r4, #2]
1000ff86:	2b00      	cmp	r3, #0
1000ff88:	d006      	beq.n	1000ff98 <at_ble_authenticate+0x84>
1000ff8a:	2e00      	cmp	r6, #0
1000ff8c:	d0db      	beq.n	1000ff46 <at_ble_authenticate+0x32>
1000ff8e:	4829      	ldr	r0, [pc, #164]	; (10010034 <at_ble_authenticate+0x120>)
1000ff90:	1c31      	adds	r1, r6, #0
1000ff92:	221c      	movs	r2, #28
1000ff94:	4b28      	ldr	r3, [pc, #160]	; (10010038 <at_ble_authenticate+0x124>)
1000ff96:	4798      	blx	r3
1000ff98:	9b07      	ldr	r3, [sp, #28]
1000ff9a:	2b00      	cmp	r3, #0
1000ff9c:	d005      	beq.n	1000ffaa <at_ble_authenticate+0x96>
1000ff9e:	4827      	ldr	r0, [pc, #156]	; (1001003c <at_ble_authenticate+0x128>)
1000ffa0:	1c19      	adds	r1, r3, #0
1000ffa2:	309a      	adds	r0, #154	; 0x9a
1000ffa4:	2210      	movs	r2, #16
1000ffa6:	4b24      	ldr	r3, [pc, #144]	; (10010038 <at_ble_authenticate+0x124>)
1000ffa8:	4798      	blx	r3
1000ffaa:	7863      	ldrb	r3, [r4, #1]
1000ffac:	78a2      	ldrb	r2, [r4, #2]
1000ffae:	009b      	lsls	r3, r3, #2
1000ffb0:	4313      	orrs	r3, r2
1000ffb2:	2212      	movs	r2, #18
1000ffb4:	4357      	muls	r7, r2
1000ffb6:	4a1d      	ldr	r2, [pc, #116]	; (1001002c <at_ble_authenticate+0x118>)
1000ffb8:	b2db      	uxtb	r3, r3
1000ffba:	5cba      	ldrb	r2, [r7, r2]
1000ffbc:	2a00      	cmp	r2, #0
1000ffbe:	d116      	bne.n	1000ffee <at_ble_authenticate+0xda>
1000ffc0:	79a0      	ldrb	r0, [r4, #6]
1000ffc2:	0742      	lsls	r2, r0, #29
1000ffc4:	d502      	bpl.n	1000ffcc <at_ble_authenticate+0xb8>
1000ffc6:	9a07      	ldr	r2, [sp, #28]
1000ffc8:	2a00      	cmp	r2, #0
1000ffca:	d0bc      	beq.n	1000ff46 <at_ble_authenticate+0x32>
1000ffcc:	07c2      	lsls	r2, r0, #31
1000ffce:	d501      	bpl.n	1000ffd4 <at_ble_authenticate+0xc0>
1000ffd0:	2e00      	cmp	r6, #0
1000ffd2:	d0b8      	beq.n	1000ff46 <at_ble_authenticate+0x32>
1000ffd4:	7966      	ldrb	r6, [r4, #5]
1000ffd6:	7821      	ldrb	r1, [r4, #0]
1000ffd8:	78e2      	ldrb	r2, [r4, #3]
1000ffda:	9600      	str	r6, [sp, #0]
1000ffdc:	9001      	str	r0, [sp, #4]
1000ffde:	79e0      	ldrb	r0, [r4, #7]
1000ffe0:	9002      	str	r0, [sp, #8]
1000ffe2:	7a20      	ldrb	r0, [r4, #8]
1000ffe4:	4c16      	ldr	r4, [pc, #88]	; (10010040 <at_ble_authenticate+0x12c>)
1000ffe6:	9003      	str	r0, [sp, #12]
1000ffe8:	1c28      	adds	r0, r5, #0
1000ffea:	47a0      	blx	r4
1000ffec:	e018      	b.n	10010020 <at_ble_authenticate+0x10c>
1000ffee:	2a01      	cmp	r2, #1
1000fff0:	d1a9      	bne.n	1000ff46 <at_ble_authenticate+0x32>
1000fff2:	79e0      	ldrb	r0, [r4, #7]
1000fff4:	0742      	lsls	r2, r0, #29
1000fff6:	d502      	bpl.n	1000fffe <at_ble_authenticate+0xea>
1000fff8:	9a07      	ldr	r2, [sp, #28]
1000fffa:	2a00      	cmp	r2, #0
1000fffc:	d0a3      	beq.n	1000ff46 <at_ble_authenticate+0x32>
1000fffe:	07c2      	lsls	r2, r0, #31
10010000:	d501      	bpl.n	10010006 <at_ble_authenticate+0xf2>
10010002:	2e00      	cmp	r6, #0
10010004:	d09f      	beq.n	1000ff46 <at_ble_authenticate+0x32>
10010006:	7966      	ldrb	r6, [r4, #5]
10010008:	7821      	ldrb	r1, [r4, #0]
1001000a:	78e2      	ldrb	r2, [r4, #3]
1001000c:	9600      	str	r6, [sp, #0]
1001000e:	79a6      	ldrb	r6, [r4, #6]
10010010:	9002      	str	r0, [sp, #8]
10010012:	9601      	str	r6, [sp, #4]
10010014:	7a20      	ldrb	r0, [r4, #8]
10010016:	9504      	str	r5, [sp, #16]
10010018:	9003      	str	r0, [sp, #12]
1001001a:	4c05      	ldr	r4, [pc, #20]	; (10010030 <at_ble_authenticate+0x11c>)
1001001c:	2001      	movs	r0, #1
1001001e:	47a0      	blx	r4
10010020:	2000      	movs	r0, #0
10010022:	b00b      	add	sp, #44	; 0x2c
10010024:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010026:	46c0      	nop			; (mov r8, r8)
10010028:	10010415 	.word	0x10010415
1001002c:	1001927e 	.word	0x1001927e
10010030:	10010985 	.word	0x10010985
10010034:	1001938c 	.word	0x1001938c
10010038:	100138e7 	.word	0x100138e7
1001003c:	1001930e 	.word	0x1001930e
10010040:	10010765 	.word	0x10010765

10010044 <at_ble_pair_key_reply>:
10010044:	b5f0      	push	{r4, r5, r6, r7, lr}
10010046:	b085      	sub	sp, #20
10010048:	1c05      	adds	r5, r0, #0
1001004a:	1c0c      	adds	r4, r1, #0
1001004c:	1c16      	adds	r6, r2, #0
1001004e:	2100      	movs	r1, #0
10010050:	4668      	mov	r0, sp
10010052:	2210      	movs	r2, #16
10010054:	4b18      	ldr	r3, [pc, #96]	; (100100b8 <at_ble_pair_key_reply+0x74>)
10010056:	4798      	blx	r3
10010058:	2101      	movs	r1, #1
1001005a:	2e00      	cmp	r6, #0
1001005c:	d101      	bne.n	10010062 <at_ble_pair_key_reply+0x1e>
1001005e:	1c31      	adds	r1, r6, #0
10010060:	466e      	mov	r6, sp
10010062:	2c00      	cmp	r4, #0
10010064:	d116      	bne.n	10010094 <at_ble_pair_key_reply+0x50>
10010066:	2701      	movs	r7, #1
10010068:	1c23      	adds	r3, r4, #0
1001006a:	1d70      	adds	r0, r6, #5
1001006c:	3e01      	subs	r6, #1
1001006e:	7802      	ldrb	r2, [r0, #0]
10010070:	3801      	subs	r0, #1
10010072:	3a30      	subs	r2, #48	; 0x30
10010074:	437a      	muls	r2, r7
10010076:	189b      	adds	r3, r3, r2
10010078:	220a      	movs	r2, #10
1001007a:	4357      	muls	r7, r2
1001007c:	42b0      	cmp	r0, r6
1001007e:	d1f6      	bne.n	1001006e <at_ble_pair_key_reply+0x2a>
10010080:	466a      	mov	r2, sp
10010082:	4668      	mov	r0, sp
10010084:	7013      	strb	r3, [r2, #0]
10010086:	0a1a      	lsrs	r2, r3, #8
10010088:	7042      	strb	r2, [r0, #1]
1001008a:	0c1a      	lsrs	r2, r3, #16
1001008c:	0e1b      	lsrs	r3, r3, #24
1001008e:	7082      	strb	r2, [r0, #2]
10010090:	70c3      	strb	r3, [r0, #3]
10010092:	e009      	b.n	100100a8 <at_ble_pair_key_reply+0x64>
10010094:	20cf      	movs	r0, #207	; 0xcf
10010096:	2c01      	cmp	r4, #1
10010098:	d10c      	bne.n	100100b4 <at_ble_pair_key_reply+0x70>
1001009a:	2300      	movs	r3, #0
1001009c:	4668      	mov	r0, sp
1001009e:	5cf2      	ldrb	r2, [r6, r3]
100100a0:	54c2      	strb	r2, [r0, r3]
100100a2:	3301      	adds	r3, #1
100100a4:	2b10      	cmp	r3, #16
100100a6:	d1f9      	bne.n	1001009c <at_ble_pair_key_reply+0x58>
100100a8:	2004      	movs	r0, #4
100100aa:	466a      	mov	r2, sp
100100ac:	1c2b      	adds	r3, r5, #0
100100ae:	4c03      	ldr	r4, [pc, #12]	; (100100bc <at_ble_pair_key_reply+0x78>)
100100b0:	47a0      	blx	r4
100100b2:	2000      	movs	r0, #0
100100b4:	b005      	add	sp, #20
100100b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100b8:	100138f9 	.word	0x100138f9
100100bc:	10010a01 	.word	0x10010a01

100100c0 <at_ble_send_slave_sec_request>:
100100c0:	b570      	push	{r4, r5, r6, lr}
100100c2:	4b0c      	ldr	r3, [pc, #48]	; (100100f4 <at_ble_send_slave_sec_request+0x34>)
100100c4:	1c0e      	adds	r6, r1, #0
100100c6:	2100      	movs	r1, #0
100100c8:	1c05      	adds	r5, r0, #0
100100ca:	1c14      	adds	r4, r2, #0
100100cc:	4798      	blx	r3
100100ce:	2301      	movs	r3, #1
100100d0:	2807      	cmp	r0, #7
100100d2:	d80d      	bhi.n	100100f0 <at_ble_send_slave_sec_request+0x30>
100100d4:	3311      	adds	r3, #17
100100d6:	4358      	muls	r0, r3
100100d8:	4b07      	ldr	r3, [pc, #28]	; (100100f8 <at_ble_send_slave_sec_request+0x38>)
100100da:	5cc2      	ldrb	r2, [r0, r3]
100100dc:	23e0      	movs	r3, #224	; 0xe0
100100de:	2a01      	cmp	r2, #1
100100e0:	d106      	bne.n	100100f0 <at_ble_send_slave_sec_request+0x30>
100100e2:	00b1      	lsls	r1, r6, #2
100100e4:	430c      	orrs	r4, r1
100100e6:	4b05      	ldr	r3, [pc, #20]	; (100100fc <at_ble_send_slave_sec_request+0x3c>)
100100e8:	b2e1      	uxtb	r1, r4
100100ea:	1c28      	adds	r0, r5, #0
100100ec:	4798      	blx	r3
100100ee:	2300      	movs	r3, #0
100100f0:	1c18      	adds	r0, r3, #0
100100f2:	bd70      	pop	{r4, r5, r6, pc}
100100f4:	10010415 	.word	0x10010415
100100f8:	1001927e 	.word	0x1001927e
100100fc:	10010a51 	.word	0x10010a51

10010100 <at_ble_encryption_start>:
10010100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010102:	23cf      	movs	r3, #207	; 0xcf
10010104:	2900      	cmp	r1, #0
10010106:	d02b      	beq.n	10010160 <at_ble_encryption_start+0x60>
10010108:	2a05      	cmp	r2, #5
1001010a:	d829      	bhi.n	10010160 <at_ble_encryption_start+0x60>
1001010c:	2701      	movs	r7, #1
1001010e:	1c3d      	adds	r5, r7, #0
10010110:	2433      	movs	r4, #51	; 0x33
10010112:	4095      	lsls	r5, r2
10010114:	4225      	tst	r5, r4
10010116:	d023      	beq.n	10010160 <at_ble_encryption_start+0x60>
10010118:	7e8c      	ldrb	r4, [r1, #26]
1001011a:	3c07      	subs	r4, #7
1001011c:	2c09      	cmp	r4, #9
1001011e:	d81f      	bhi.n	10010160 <at_ble_encryption_start+0x60>
10010120:	4b10      	ldr	r3, [pc, #64]	; (10010164 <at_ble_encryption_start+0x64>)
10010122:	1c0c      	adds	r4, r1, #0
10010124:	2100      	movs	r1, #0
10010126:	1c15      	adds	r5, r2, #0
10010128:	1c06      	adds	r6, r0, #0
1001012a:	4798      	blx	r3
1001012c:	1c3b      	adds	r3, r7, #0
1001012e:	2807      	cmp	r0, #7
10010130:	d816      	bhi.n	10010160 <at_ble_encryption_start+0x60>
10010132:	2312      	movs	r3, #18
10010134:	4358      	muls	r0, r3
10010136:	4b0c      	ldr	r3, [pc, #48]	; (10010168 <at_ble_encryption_start+0x68>)
10010138:	5cc7      	ldrb	r7, [r0, r3]
1001013a:	23e0      	movs	r3, #224	; 0xe0
1001013c:	2f00      	cmp	r7, #0
1001013e:	d10f      	bne.n	10010160 <at_ble_encryption_start+0x60>
10010140:	1c21      	adds	r1, r4, #0
10010142:	221c      	movs	r2, #28
10010144:	4b09      	ldr	r3, [pc, #36]	; (1001016c <at_ble_encryption_start+0x6c>)
10010146:	480a      	ldr	r0, [pc, #40]	; (10010170 <at_ble_encryption_start+0x70>)
10010148:	4798      	blx	r3
1001014a:	1c23      	adds	r3, r4, #0
1001014c:	7ea1      	ldrb	r1, [r4, #26]
1001014e:	8a22      	ldrh	r2, [r4, #16]
10010150:	3312      	adds	r3, #18
10010152:	9100      	str	r1, [sp, #0]
10010154:	9501      	str	r5, [sp, #4]
10010156:	1c21      	adds	r1, r4, #0
10010158:	1c30      	adds	r0, r6, #0
1001015a:	4c06      	ldr	r4, [pc, #24]	; (10010174 <at_ble_encryption_start+0x74>)
1001015c:	47a0      	blx	r4
1001015e:	1c3b      	adds	r3, r7, #0
10010160:	1c18      	adds	r0, r3, #0
10010162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010164:	10010415 	.word	0x10010415
10010168:	1001927e 	.word	0x1001927e
1001016c:	100138e7 	.word	0x100138e7
10010170:	1001938c 	.word	0x1001938c
10010174:	10010a91 	.word	0x10010a91

10010178 <at_ble_encryption_request_reply>:
10010178:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001017a:	24cf      	movs	r4, #207	; 0xcf
1001017c:	2b00      	cmp	r3, #0
1001017e:	d011      	beq.n	100101a4 <at_ble_encryption_request_reply+0x2c>
10010180:	2a00      	cmp	r2, #0
10010182:	d00a      	beq.n	1001019a <at_ble_encryption_request_reply+0x22>
10010184:	2905      	cmp	r1, #5
10010186:	d80d      	bhi.n	100101a4 <at_ble_encryption_request_reply+0x2c>
10010188:	2501      	movs	r5, #1
1001018a:	2633      	movs	r6, #51	; 0x33
1001018c:	408d      	lsls	r5, r1
1001018e:	4235      	tst	r5, r6
10010190:	d008      	beq.n	100101a4 <at_ble_encryption_request_reply+0x2c>
10010192:	7e9d      	ldrb	r5, [r3, #26]
10010194:	3d07      	subs	r5, #7
10010196:	2d09      	cmp	r5, #9
10010198:	d804      	bhi.n	100101a4 <at_ble_encryption_request_reply+0x2c>
1001019a:	7e9c      	ldrb	r4, [r3, #26]
1001019c:	9400      	str	r4, [sp, #0]
1001019e:	4c02      	ldr	r4, [pc, #8]	; (100101a8 <at_ble_encryption_request_reply+0x30>)
100101a0:	47a0      	blx	r4
100101a2:	2400      	movs	r4, #0
100101a4:	1c20      	adds	r0, r4, #0
100101a6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100101a8:	10010b4d 	.word	0x10010b4d

100101ac <rx_callback>:
100101ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101ae:	8883      	ldrh	r3, [r0, #4]
100101b0:	1c01      	adds	r1, r0, #0
100101b2:	9301      	str	r3, [sp, #4]
100101b4:	88c5      	ldrh	r5, [r0, #6]
100101b6:	8806      	ldrh	r6, [r0, #0]
100101b8:	2d00      	cmp	r5, #0
100101ba:	d10f      	bne.n	100101dc <rx_callback+0x30>
100101bc:	1c19      	adds	r1, r3, #0
100101be:	1c30      	adds	r0, r6, #0
100101c0:	4b19      	ldr	r3, [pc, #100]	; (10010228 <rx_callback+0x7c>)
100101c2:	1c2a      	adds	r2, r5, #0
100101c4:	4798      	blx	r3
100101c6:	1e03      	subs	r3, r0, #0
100101c8:	d105      	bne.n	100101d6 <rx_callback+0x2a>
100101ca:	1c30      	adds	r0, r6, #0
100101cc:	9901      	ldr	r1, [sp, #4]
100101ce:	1c1a      	adds	r2, r3, #0
100101d0:	4c16      	ldr	r4, [pc, #88]	; (1001022c <rx_callback+0x80>)
100101d2:	47a0      	blx	r4
100101d4:	e027      	b.n	10010226 <rx_callback+0x7a>
100101d6:	4b16      	ldr	r3, [pc, #88]	; (10010230 <rx_callback+0x84>)
100101d8:	4798      	blx	r3
100101da:	e024      	b.n	10010226 <rx_callback+0x7a>
100101dc:	4c15      	ldr	r4, [pc, #84]	; (10010234 <rx_callback+0x88>)
100101de:	4a16      	ldr	r2, [pc, #88]	; (10010238 <rx_callback+0x8c>)
100101e0:	6823      	ldr	r3, [r4, #0]
100101e2:	6812      	ldr	r2, [r2, #0]
100101e4:	18eb      	adds	r3, r5, r3
100101e6:	4293      	cmp	r3, r2
100101e8:	d901      	bls.n	100101ee <rx_callback+0x42>
100101ea:	2300      	movs	r3, #0
100101ec:	6023      	str	r3, [r4, #0]
100101ee:	4f13      	ldr	r7, [pc, #76]	; (1001023c <rx_callback+0x90>)
100101f0:	6822      	ldr	r2, [r4, #0]
100101f2:	683b      	ldr	r3, [r7, #0]
100101f4:	3108      	adds	r1, #8
100101f6:	1898      	adds	r0, r3, r2
100101f8:	1c2a      	adds	r2, r5, #0
100101fa:	4b11      	ldr	r3, [pc, #68]	; (10010240 <rx_callback+0x94>)
100101fc:	4798      	blx	r3
100101fe:	683b      	ldr	r3, [r7, #0]
10010200:	6822      	ldr	r2, [r4, #0]
10010202:	1c30      	adds	r0, r6, #0
10010204:	189a      	adds	r2, r3, r2
10010206:	9901      	ldr	r1, [sp, #4]
10010208:	4b07      	ldr	r3, [pc, #28]	; (10010228 <rx_callback+0x7c>)
1001020a:	4798      	blx	r3
1001020c:	2800      	cmp	r0, #0
1001020e:	d1e2      	bne.n	100101d6 <rx_callback+0x2a>
10010210:	6823      	ldr	r3, [r4, #0]
10010212:	683a      	ldr	r2, [r7, #0]
10010214:	1c30      	adds	r0, r6, #0
10010216:	18d2      	adds	r2, r2, r3
10010218:	9901      	ldr	r1, [sp, #4]
1001021a:	1c2b      	adds	r3, r5, #0
1001021c:	4e03      	ldr	r6, [pc, #12]	; (1001022c <rx_callback+0x80>)
1001021e:	47b0      	blx	r6
10010220:	6823      	ldr	r3, [r4, #0]
10010222:	18ed      	adds	r5, r5, r3
10010224:	6025      	str	r5, [r4, #0]
10010226:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010228:	1000e8b5 	.word	0x1000e8b5
1001022c:	1000e82d 	.word	0x1000e82d
10010230:	1000e441 	.word	0x1000e441
10010234:	100193e8 	.word	0x100193e8
10010238:	10018394 	.word	0x10018394
1001023c:	10018390 	.word	0x10018390
10010240:	100138e7 	.word	0x100138e7

10010244 <interface_send>:
10010244:	b508      	push	{r3, lr}
10010246:	4b02      	ldr	r3, [pc, #8]	; (10010250 <interface_send+0xc>)
10010248:	4798      	blx	r3
1001024a:	2000      	movs	r0, #0
1001024c:	bd08      	pop	{r3, pc}
1001024e:	46c0      	nop			; (mov r8, r8)
10010250:	1000e139 	.word	0x1000e139

10010254 <interface_init>:
10010254:	2280      	movs	r2, #128	; 0x80
10010256:	b510      	push	{r4, lr}
10010258:	2100      	movs	r1, #0
1001025a:	1c04      	adds	r4, r0, #0
1001025c:	0092      	lsls	r2, r2, #2
1001025e:	4b08      	ldr	r3, [pc, #32]	; (10010280 <interface_init+0x2c>)
10010260:	4808      	ldr	r0, [pc, #32]	; (10010284 <interface_init+0x30>)
10010262:	4798      	blx	r3
10010264:	2200      	movs	r2, #0
10010266:	4b08      	ldr	r3, [pc, #32]	; (10010288 <interface_init+0x34>)
10010268:	601a      	str	r2, [r3, #0]
1001026a:	4a08      	ldr	r2, [pc, #32]	; (1001028c <interface_init+0x38>)
1001026c:	4b08      	ldr	r3, [pc, #32]	; (10010290 <interface_init+0x3c>)
1001026e:	601a      	str	r2, [r3, #0]
10010270:	4b08      	ldr	r3, [pc, #32]	; (10010294 <interface_init+0x40>)
10010272:	6922      	ldr	r2, [r4, #16]
10010274:	601a      	str	r2, [r3, #0]
10010276:	6962      	ldr	r2, [r4, #20]
10010278:	4b07      	ldr	r3, [pc, #28]	; (10010298 <interface_init+0x44>)
1001027a:	601a      	str	r2, [r3, #0]
1001027c:	bd10      	pop	{r4, pc}
1001027e:	46c0      	nop			; (mov r8, r8)
10010280:	100138f9 	.word	0x100138f9
10010284:	100195ec 	.word	0x100195ec
10010288:	100193e8 	.word	0x100193e8
1001028c:	100193ec 	.word	0x100193ec
10010290:	100168e8 	.word	0x100168e8
10010294:	10018390 	.word	0x10018390
10010298:	10018394 	.word	0x10018394

1001029c <platform_cmd_cmpl_signal>:
1001029c:	2201      	movs	r2, #1
1001029e:	4b01      	ldr	r3, [pc, #4]	; (100102a4 <platform_cmd_cmpl_signal+0x8>)
100102a0:	601a      	str	r2, [r3, #0]
100102a2:	4770      	bx	lr
100102a4:	10018398 	.word	0x10018398

100102a8 <platform_cmd_cmpl_wait>:
100102a8:	b510      	push	{r4, lr}
100102aa:	1c04      	adds	r4, r0, #0
100102ac:	4b07      	ldr	r3, [pc, #28]	; (100102cc <platform_cmd_cmpl_wait+0x24>)
100102ae:	681a      	ldr	r2, [r3, #0]
100102b0:	2a01      	cmp	r2, #1
100102b2:	d003      	beq.n	100102bc <platform_cmd_cmpl_wait+0x14>
100102b4:	4b06      	ldr	r3, [pc, #24]	; (100102d0 <platform_cmd_cmpl_wait+0x28>)
100102b6:	2000      	movs	r0, #0
100102b8:	4798      	blx	r3
100102ba:	e7f7      	b.n	100102ac <platform_cmd_cmpl_wait+0x4>
100102bc:	6819      	ldr	r1, [r3, #0]
100102be:	2901      	cmp	r1, #1
100102c0:	d102      	bne.n	100102c8 <platform_cmd_cmpl_wait+0x20>
100102c2:	2200      	movs	r2, #0
100102c4:	601a      	str	r2, [r3, #0]
100102c6:	e000      	b.n	100102ca <platform_cmd_cmpl_wait+0x22>
100102c8:	7022      	strb	r2, [r4, #0]
100102ca:	bd10      	pop	{r4, pc}
100102cc:	10018398 	.word	0x10018398
100102d0:	1000e1c9 	.word	0x1000e1c9

100102d4 <start_timer>:
100102d4:	4770      	bx	lr

100102d6 <stop_timer>:
100102d6:	4770      	bx	lr

100102d8 <dbg_le_set_bd_addr_req_handler>:
100102d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100102da:	466b      	mov	r3, sp
100102dc:	1dde      	adds	r6, r3, #7
100102de:	2300      	movs	r3, #0
100102e0:	7033      	strb	r3, [r6, #0]
100102e2:	230f      	movs	r3, #15
100102e4:	4c13      	ldr	r4, [pc, #76]	; (10010334 <dbg_le_set_bd_addr_req_handler+0x5c>)
100102e6:	2703      	movs	r7, #3
100102e8:	7023      	strb	r3, [r4, #0]
100102ea:	2300      	movs	r3, #0
100102ec:	70e3      	strb	r3, [r4, #3]
100102ee:	4b12      	ldr	r3, [pc, #72]	; (10010338 <dbg_le_set_bd_addr_req_handler+0x60>)
100102f0:	1c01      	adds	r1, r0, #0
100102f2:	881a      	ldrh	r2, [r3, #0]
100102f4:	881b      	ldrh	r3, [r3, #0]
100102f6:	7122      	strb	r2, [r4, #4]
100102f8:	0a1b      	lsrs	r3, r3, #8
100102fa:	2206      	movs	r2, #6
100102fc:	7163      	strb	r3, [r4, #5]
100102fe:	480f      	ldr	r0, [pc, #60]	; (1001033c <dbg_le_set_bd_addr_req_handler+0x64>)
10010300:	4b0f      	ldr	r3, [pc, #60]	; (10010340 <dbg_le_set_bd_addr_req_handler+0x68>)
10010302:	7067      	strb	r7, [r4, #1]
10010304:	70a7      	strb	r7, [r4, #2]
10010306:	4798      	blx	r3
10010308:	4d0e      	ldr	r5, [pc, #56]	; (10010344 <dbg_le_set_bd_addr_req_handler+0x6c>)
1001030a:	4b0f      	ldr	r3, [pc, #60]	; (10010348 <dbg_le_set_bd_addr_req_handler+0x70>)
1001030c:	210e      	movs	r1, #14
1001030e:	802b      	strh	r3, [r5, #0]
10010310:	2306      	movs	r3, #6
10010312:	71a3      	strb	r3, [r4, #6]
10010314:	2300      	movs	r3, #0
10010316:	1c20      	adds	r0, r4, #0
10010318:	71e3      	strb	r3, [r4, #7]
1001031a:	4b0c      	ldr	r3, [pc, #48]	; (1001034c <dbg_le_set_bd_addr_req_handler+0x74>)
1001031c:	80af      	strh	r7, [r5, #4]
1001031e:	4798      	blx	r3
10010320:	1c30      	adds	r0, r6, #0
10010322:	4b0b      	ldr	r3, [pc, #44]	; (10010350 <dbg_le_set_bd_addr_req_handler+0x78>)
10010324:	4798      	blx	r3
10010326:	7833      	ldrb	r3, [r6, #0]
10010328:	20e2      	movs	r0, #226	; 0xe2
1001032a:	2b00      	cmp	r3, #0
1001032c:	d101      	bne.n	10010332 <dbg_le_set_bd_addr_req_handler+0x5a>
1001032e:	68ab      	ldr	r3, [r5, #8]
10010330:	7818      	ldrb	r0, [r3, #0]
10010332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010334:	100195ec 	.word	0x100195ec
10010338:	1001927c 	.word	0x1001927c
1001033c:	100195f4 	.word	0x100195f4
10010340:	100138e7 	.word	0x100138e7
10010344:	10019270 	.word	0x10019270
10010348:	00000329 	.word	0x00000329
1001034c:	10010245 	.word	0x10010245
10010350:	100102a9 	.word	0x100102a9

10010354 <gapc_get_dev_info_cfm.constprop.1>:
10010354:	b538      	push	{r3, r4, r5, lr}
10010356:	230b      	movs	r3, #11
10010358:	4c27      	ldr	r4, [pc, #156]	; (100103f8 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1001035a:	7023      	strb	r3, [r4, #0]
1001035c:	3303      	adds	r3, #3
1001035e:	7063      	strb	r3, [r4, #1]
10010360:	3329      	adds	r3, #41	; 0x29
10010362:	70a3      	strb	r3, [r4, #2]
10010364:	4b25      	ldr	r3, [pc, #148]	; (100103fc <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10010366:	70e1      	strb	r1, [r4, #3]
10010368:	881a      	ldrh	r2, [r3, #0]
1001036a:	881b      	ldrh	r3, [r3, #0]
1001036c:	7122      	strb	r2, [r4, #4]
1001036e:	0a1b      	lsrs	r3, r3, #8
10010370:	7163      	strb	r3, [r4, #5]
10010372:	2300      	movs	r3, #0
10010374:	7220      	strb	r0, [r4, #8]
10010376:	7263      	strb	r3, [r4, #9]
10010378:	2801      	cmp	r0, #1
1001037a:	d02b      	beq.n	100103d4 <gapc_get_dev_info_cfm.constprop.1+0x80>
1001037c:	4298      	cmp	r0, r3
1001037e:	d01b      	beq.n	100103b8 <gapc_get_dev_info_cfm.constprop.1+0x64>
10010380:	2802      	cmp	r0, #2
10010382:	d12f      	bne.n	100103e4 <gapc_get_dev_info_cfm.constprop.1+0x90>
10010384:	4b1e      	ldr	r3, [pc, #120]	; (10010400 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010386:	2112      	movs	r1, #18
10010388:	1c1a      	adds	r2, r3, #0
1001038a:	32ce      	adds	r2, #206	; 0xce
1001038c:	8812      	ldrh	r2, [r2, #0]
1001038e:	72a2      	strb	r2, [r4, #10]
10010390:	0a12      	lsrs	r2, r2, #8
10010392:	72e2      	strb	r2, [r4, #11]
10010394:	1c1a      	adds	r2, r3, #0
10010396:	32d0      	adds	r2, #208	; 0xd0
10010398:	8812      	ldrh	r2, [r2, #0]
1001039a:	7322      	strb	r2, [r4, #12]
1001039c:	0a12      	lsrs	r2, r2, #8
1001039e:	7362      	strb	r2, [r4, #13]
100103a0:	1c1a      	adds	r2, r3, #0
100103a2:	32d2      	adds	r2, #210	; 0xd2
100103a4:	8812      	ldrh	r2, [r2, #0]
100103a6:	33d4      	adds	r3, #212	; 0xd4
100103a8:	73a2      	strb	r2, [r4, #14]
100103aa:	0a12      	lsrs	r2, r2, #8
100103ac:	73e2      	strb	r2, [r4, #15]
100103ae:	881b      	ldrh	r3, [r3, #0]
100103b0:	7423      	strb	r3, [r4, #16]
100103b2:	0a1b      	lsrs	r3, r3, #8
100103b4:	7463      	strb	r3, [r4, #17]
100103b6:	e016      	b.n	100103e6 <gapc_get_dev_info_cfm.constprop.1+0x92>
100103b8:	4b11      	ldr	r3, [pc, #68]	; (10010400 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100103ba:	4912      	ldr	r1, [pc, #72]	; (10010404 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100103bc:	33aa      	adds	r3, #170	; 0xaa
100103be:	881d      	ldrh	r5, [r3, #0]
100103c0:	4811      	ldr	r0, [pc, #68]	; (10010408 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
100103c2:	0a2b      	lsrs	r3, r5, #8
100103c4:	72a5      	strb	r5, [r4, #10]
100103c6:	72e3      	strb	r3, [r4, #11]
100103c8:	1c2a      	adds	r2, r5, #0
100103ca:	4b10      	ldr	r3, [pc, #64]	; (1001040c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100103cc:	350c      	adds	r5, #12
100103ce:	4798      	blx	r3
100103d0:	b2a9      	uxth	r1, r5
100103d2:	e008      	b.n	100103e6 <gapc_get_dev_info_cfm.constprop.1+0x92>
100103d4:	4b0a      	ldr	r3, [pc, #40]	; (10010400 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100103d6:	210c      	movs	r1, #12
100103d8:	33cc      	adds	r3, #204	; 0xcc
100103da:	881b      	ldrh	r3, [r3, #0]
100103dc:	72a3      	strb	r3, [r4, #10]
100103de:	0a1b      	lsrs	r3, r3, #8
100103e0:	72e3      	strb	r3, [r4, #11]
100103e2:	e000      	b.n	100103e6 <gapc_get_dev_info_cfm.constprop.1+0x92>
100103e4:	210a      	movs	r1, #10
100103e6:	1c0b      	adds	r3, r1, #0
100103e8:	3b08      	subs	r3, #8
100103ea:	71a3      	strb	r3, [r4, #6]
100103ec:	121b      	asrs	r3, r3, #8
100103ee:	71e3      	strb	r3, [r4, #7]
100103f0:	1c20      	adds	r0, r4, #0
100103f2:	4b07      	ldr	r3, [pc, #28]	; (10010410 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
100103f4:	4798      	blx	r3
100103f6:	bd38      	pop	{r3, r4, r5, pc}
100103f8:	100195ec 	.word	0x100195ec
100103fc:	1001927c 	.word	0x1001927c
10010400:	1001930e 	.word	0x1001930e
10010404:	100193ba 	.word	0x100193ba
10010408:	100195f8 	.word	0x100195f8
1001040c:	100138e7 	.word	0x100138e7
10010410:	10010245 	.word	0x10010245

10010414 <check_ConnData_idx_role>:
10010414:	4b0c      	ldr	r3, [pc, #48]	; (10010448 <check_ConnData_idx_role+0x34>)
10010416:	b570      	push	{r4, r5, r6, lr}
10010418:	1c04      	adds	r4, r0, #0
1001041a:	2008      	movs	r0, #8
1001041c:	429c      	cmp	r4, r3
1001041e:	d011      	beq.n	10010444 <check_ConnData_idx_role+0x30>
10010420:	2300      	movs	r3, #0
10010422:	2212      	movs	r2, #18
10010424:	435a      	muls	r2, r3
10010426:	4d09      	ldr	r5, [pc, #36]	; (1001044c <check_ConnData_idx_role+0x38>)
10010428:	b2d8      	uxtb	r0, r3
1001042a:	1956      	adds	r6, r2, r5
1001042c:	8976      	ldrh	r6, [r6, #10]
1001042e:	42a6      	cmp	r6, r4
10010430:	d104      	bne.n	1001043c <check_ConnData_idx_role+0x28>
10010432:	2900      	cmp	r1, #0
10010434:	d006      	beq.n	10010444 <check_ConnData_idx_role+0x30>
10010436:	5d53      	ldrb	r3, [r2, r5]
10010438:	700b      	strb	r3, [r1, #0]
1001043a:	e003      	b.n	10010444 <check_ConnData_idx_role+0x30>
1001043c:	3301      	adds	r3, #1
1001043e:	2b08      	cmp	r3, #8
10010440:	d1ef      	bne.n	10010422 <check_ConnData_idx_role+0xe>
10010442:	1c18      	adds	r0, r3, #0
10010444:	bd70      	pop	{r4, r5, r6, pc}
10010446:	46c0      	nop			; (mov r8, r8)
10010448:	0000ffff 	.word	0x0000ffff
1001044c:	1001927e 	.word	0x1001927e

10010450 <check_ConnData_emptyEntry>:
10010450:	2300      	movs	r3, #0
10010452:	2212      	movs	r2, #18
10010454:	435a      	muls	r2, r3
10010456:	4906      	ldr	r1, [pc, #24]	; (10010470 <check_ConnData_emptyEntry+0x20>)
10010458:	b2d8      	uxtb	r0, r3
1001045a:	1852      	adds	r2, r2, r1
1001045c:	8951      	ldrh	r1, [r2, #10]
1001045e:	4a05      	ldr	r2, [pc, #20]	; (10010474 <check_ConnData_emptyEntry+0x24>)
10010460:	4291      	cmp	r1, r2
10010462:	d003      	beq.n	1001046c <check_ConnData_emptyEntry+0x1c>
10010464:	3301      	adds	r3, #1
10010466:	2b08      	cmp	r3, #8
10010468:	d1f3      	bne.n	10010452 <check_ConnData_emptyEntry+0x2>
1001046a:	1c18      	adds	r0, r3, #0
1001046c:	4770      	bx	lr
1001046e:	46c0      	nop			; (mov r8, r8)
10010470:	1001927e 	.word	0x1001927e
10010474:	0000ffff 	.word	0x0000ffff

10010478 <gapc_cmp_evt>:
10010478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001047a:	780b      	ldrb	r3, [r1, #0]
1001047c:	1c05      	adds	r5, r0, #0
1001047e:	1e58      	subs	r0, r3, #1
10010480:	784e      	ldrb	r6, [r1, #1]
10010482:	280f      	cmp	r0, #15
10010484:	d85a      	bhi.n	1001053c <gapc_cmp_evt+0xc4>
10010486:	1c14      	adds	r4, r2, #0
10010488:	f001 fb68 	bl	10011b5c <__gnu_thumb1_case_uqi>
1001048c:	5858440a 	.word	0x5858440a
10010490:	4b584444 	.word	0x4b584444
10010494:	0825122d 	.word	0x0825122d
10010498:	3e395858 	.word	0x3e395858
1001049c:	203b      	movs	r0, #59	; 0x3b
1001049e:	e04e      	b.n	1001053e <gapc_cmp_evt+0xc6>
100104a0:	203b      	movs	r0, #59	; 0x3b
100104a2:	2e00      	cmp	r6, #0
100104a4:	d04b      	beq.n	1001053e <gapc_cmp_evt+0xc6>
100104a6:	0a2d      	lsrs	r5, r5, #8
100104a8:	8015      	strh	r5, [r2, #0]
100104aa:	7096      	strb	r6, [r2, #2]
100104ac:	3835      	subs	r0, #53	; 0x35
100104ae:	e046      	b.n	1001053e <gapc_cmp_evt+0xc6>
100104b0:	466b      	mov	r3, sp
100104b2:	1ddf      	adds	r7, r3, #7
100104b4:	2301      	movs	r3, #1
100104b6:	0a2d      	lsrs	r5, r5, #8
100104b8:	703b      	strb	r3, [r7, #0]
100104ba:	1c28      	adds	r0, r5, #0
100104bc:	1c39      	adds	r1, r7, #0
100104be:	4b20      	ldr	r3, [pc, #128]	; (10010540 <gapc_cmp_evt+0xc8>)
100104c0:	4798      	blx	r3
100104c2:	2807      	cmp	r0, #7
100104c4:	d803      	bhi.n	100104ce <gapc_cmp_evt+0x56>
100104c6:	783b      	ldrb	r3, [r7, #0]
100104c8:	203b      	movs	r0, #59	; 0x3b
100104ca:	2b00      	cmp	r3, #0
100104cc:	d037      	beq.n	1001053e <gapc_cmp_evt+0xc6>
100104ce:	8065      	strh	r5, [r4, #2]
100104d0:	7126      	strb	r6, [r4, #4]
100104d2:	2009      	movs	r0, #9
100104d4:	e033      	b.n	1001053e <gapc_cmp_evt+0xc6>
100104d6:	203b      	movs	r0, #59	; 0x3b
100104d8:	2e00      	cmp	r6, #0
100104da:	d030      	beq.n	1001053e <gapc_cmp_evt+0xc6>
100104dc:	0a2d      	lsrs	r5, r5, #8
100104de:	8015      	strh	r5, [r2, #0]
100104e0:	7096      	strb	r6, [r2, #2]
100104e2:	382d      	subs	r0, #45	; 0x2d
100104e4:	e02b      	b.n	1001053e <gapc_cmp_evt+0xc6>
100104e6:	203b      	movs	r0, #59	; 0x3b
100104e8:	2e00      	cmp	r6, #0
100104ea:	d028      	beq.n	1001053e <gapc_cmp_evt+0xc6>
100104ec:	2300      	movs	r3, #0
100104ee:	0a2d      	lsrs	r5, r5, #8
100104f0:	8015      	strh	r5, [r2, #0]
100104f2:	7096      	strb	r6, [r2, #2]
100104f4:	8093      	strh	r3, [r2, #4]
100104f6:	80d3      	strh	r3, [r2, #6]
100104f8:	8113      	strh	r3, [r2, #8]
100104fa:	3834      	subs	r0, #52	; 0x34
100104fc:	e01f      	b.n	1001053e <gapc_cmp_evt+0xc6>
100104fe:	203b      	movs	r0, #59	; 0x3b
10010500:	2e00      	cmp	r6, #0
10010502:	d01c      	beq.n	1001053e <gapc_cmp_evt+0xc6>
10010504:	7216      	strb	r6, [r2, #8]
10010506:	e003      	b.n	10010510 <gapc_cmp_evt+0x98>
10010508:	203b      	movs	r0, #59	; 0x3b
1001050a:	2e00      	cmp	r6, #0
1001050c:	d017      	beq.n	1001053e <gapc_cmp_evt+0xc6>
1001050e:	7116      	strb	r6, [r2, #4]
10010510:	3812      	subs	r0, #18
10010512:	e014      	b.n	1001053e <gapc_cmp_evt+0xc6>
10010514:	203b      	movs	r0, #59	; 0x3b
10010516:	2e00      	cmp	r6, #0
10010518:	d011      	beq.n	1001053e <gapc_cmp_evt+0xc6>
1001051a:	7093      	strb	r3, [r2, #2]
1001051c:	70d6      	strb	r6, [r2, #3]
1001051e:	382a      	subs	r0, #42	; 0x2a
10010520:	e00d      	b.n	1001053e <gapc_cmp_evt+0xc6>
10010522:	203b      	movs	r0, #59	; 0x3b
10010524:	2e00      	cmp	r6, #0
10010526:	d00a      	beq.n	1001053e <gapc_cmp_evt+0xc6>
10010528:	0a2d      	lsrs	r5, r5, #8
1001052a:	7016      	strb	r6, [r2, #0]
1001052c:	8055      	strh	r5, [r2, #2]
1001052e:	1d10      	adds	r0, r2, #4
10010530:	2100      	movs	r1, #0
10010532:	2205      	movs	r2, #5
10010534:	4b03      	ldr	r3, [pc, #12]	; (10010544 <gapc_cmp_evt+0xcc>)
10010536:	4798      	blx	r3
10010538:	2012      	movs	r0, #18
1001053a:	e000      	b.n	1001053e <gapc_cmp_evt+0xc6>
1001053c:	2000      	movs	r0, #0
1001053e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010540:	10010415 	.word	0x10010415
10010544:	100138f9 	.word	0x100138f9

10010548 <gapc_connection_cfm_handler>:
10010548:	b5f0      	push	{r4, r5, r6, r7, lr}
1001054a:	b085      	sub	sp, #20
1001054c:	1c1d      	adds	r5, r3, #0
1001054e:	ab0a      	add	r3, sp, #40	; 0x28
10010550:	781b      	ldrb	r3, [r3, #0]
10010552:	9201      	str	r2, [sp, #4]
10010554:	9302      	str	r3, [sp, #8]
10010556:	ab0b      	add	r3, sp, #44	; 0x2c
10010558:	781b      	ldrb	r3, [r3, #0]
1001055a:	1c07      	adds	r7, r0, #0
1001055c:	9303      	str	r3, [sp, #12]
1001055e:	ab0c      	add	r3, sp, #48	; 0x30
10010560:	881a      	ldrh	r2, [r3, #0]
10010562:	2302      	movs	r3, #2
10010564:	1c0e      	adds	r6, r1, #0
10010566:	4c23      	ldr	r4, [pc, #140]	; (100105f4 <gapc_connection_cfm_handler+0xac>)
10010568:	1c39      	adds	r1, r7, #0
1001056a:	7023      	strb	r3, [r4, #0]
1001056c:	330c      	adds	r3, #12
1001056e:	7063      	strb	r3, [r4, #1]
10010570:	70a3      	strb	r3, [r4, #2]
10010572:	4b21      	ldr	r3, [pc, #132]	; (100105f8 <gapc_connection_cfm_handler+0xb0>)
10010574:	70e2      	strb	r2, [r4, #3]
10010576:	881a      	ldrh	r2, [r3, #0]
10010578:	881b      	ldrh	r3, [r3, #0]
1001057a:	7122      	strb	r2, [r4, #4]
1001057c:	0a1b      	lsrs	r3, r3, #8
1001057e:	4f1f      	ldr	r7, [pc, #124]	; (100105fc <gapc_connection_cfm_handler+0xb4>)
10010580:	2210      	movs	r2, #16
10010582:	481f      	ldr	r0, [pc, #124]	; (10010600 <gapc_connection_cfm_handler+0xb8>)
10010584:	7163      	strb	r3, [r4, #5]
10010586:	47b8      	blx	r7
10010588:	0a33      	lsrs	r3, r6, #8
1001058a:	7626      	strb	r6, [r4, #24]
1001058c:	7663      	strb	r3, [r4, #25]
1001058e:	9901      	ldr	r1, [sp, #4]
10010590:	0c33      	lsrs	r3, r6, #16
10010592:	2210      	movs	r2, #16
10010594:	0e36      	lsrs	r6, r6, #24
10010596:	481b      	ldr	r0, [pc, #108]	; (10010604 <gapc_connection_cfm_handler+0xbc>)
10010598:	76a3      	strb	r3, [r4, #26]
1001059a:	76e6      	strb	r6, [r4, #27]
1001059c:	47b8      	blx	r7
1001059e:	1c23      	adds	r3, r4, #0
100105a0:	332c      	adds	r3, #44	; 0x2c
100105a2:	701d      	strb	r5, [r3, #0]
100105a4:	1c23      	adds	r3, r4, #0
100105a6:	0a2a      	lsrs	r2, r5, #8
100105a8:	332d      	adds	r3, #45	; 0x2d
100105aa:	701a      	strb	r2, [r3, #0]
100105ac:	1c23      	adds	r3, r4, #0
100105ae:	0c2a      	lsrs	r2, r5, #16
100105b0:	332e      	adds	r3, #46	; 0x2e
100105b2:	701a      	strb	r2, [r3, #0]
100105b4:	1c23      	adds	r3, r4, #0
100105b6:	0e2d      	lsrs	r5, r5, #24
100105b8:	332f      	adds	r3, #47	; 0x2f
100105ba:	466a      	mov	r2, sp
100105bc:	701d      	strb	r5, [r3, #0]
100105be:	1c23      	adds	r3, r4, #0
100105c0:	7a12      	ldrb	r2, [r2, #8]
100105c2:	3330      	adds	r3, #48	; 0x30
100105c4:	701a      	strb	r2, [r3, #0]
100105c6:	1c23      	adds	r3, r4, #0
100105c8:	2500      	movs	r5, #0
100105ca:	3331      	adds	r3, #49	; 0x31
100105cc:	466a      	mov	r2, sp
100105ce:	701d      	strb	r5, [r3, #0]
100105d0:	1c23      	adds	r3, r4, #0
100105d2:	7b12      	ldrb	r2, [r2, #12]
100105d4:	3332      	adds	r3, #50	; 0x32
100105d6:	701a      	strb	r2, [r3, #0]
100105d8:	1c23      	adds	r3, r4, #0
100105da:	3333      	adds	r3, #51	; 0x33
100105dc:	701d      	strb	r5, [r3, #0]
100105de:	232c      	movs	r3, #44	; 0x2c
100105e0:	1c20      	adds	r0, r4, #0
100105e2:	71a3      	strb	r3, [r4, #6]
100105e4:	2134      	movs	r1, #52	; 0x34
100105e6:	4b08      	ldr	r3, [pc, #32]	; (10010608 <gapc_connection_cfm_handler+0xc0>)
100105e8:	71e5      	strb	r5, [r4, #7]
100105ea:	4798      	blx	r3
100105ec:	1c28      	adds	r0, r5, #0
100105ee:	b005      	add	sp, #20
100105f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105f2:	46c0      	nop			; (mov r8, r8)
100105f4:	100195ec 	.word	0x100195ec
100105f8:	1001927c 	.word	0x1001927c
100105fc:	100138e7 	.word	0x100138e7
10010600:	100195f4 	.word	0x100195f4
10010604:	10019608 	.word	0x10019608
10010608:	10010245 	.word	0x10010245

1001060c <gapc_con_req_ind>:
1001060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001060e:	7845      	ldrb	r5, [r0, #1]
10010610:	7803      	ldrb	r3, [r0, #0]
10010612:	4c30      	ldr	r4, [pc, #192]	; (100106d4 <gapc_con_req_ind+0xc8>)
10010614:	022d      	lsls	r5, r5, #8
10010616:	431d      	orrs	r5, r3
10010618:	85a5      	strh	r5, [r4, #44]	; 0x2c
1001061a:	78c3      	ldrb	r3, [r0, #3]
1001061c:	7882      	ldrb	r2, [r0, #2]
1001061e:	b08b      	sub	sp, #44	; 0x2c
10010620:	021b      	lsls	r3, r3, #8
10010622:	431a      	orrs	r2, r3
10010624:	466b      	mov	r3, sp
10010626:	9205      	str	r2, [sp, #20]
10010628:	8a9b      	ldrh	r3, [r3, #20]
1001062a:	2120      	movs	r1, #32
1001062c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1001062e:	7943      	ldrb	r3, [r0, #5]
10010630:	7902      	ldrb	r2, [r0, #4]
10010632:	021b      	lsls	r3, r3, #8
10010634:	431a      	orrs	r2, r3
10010636:	466b      	mov	r3, sp
10010638:	9206      	str	r2, [sp, #24]
1001063a:	8b1b      	ldrh	r3, [r3, #24]
1001063c:	1c06      	adds	r6, r0, #0
1001063e:	8623      	strh	r3, [r4, #48]	; 0x30
10010640:	79c3      	ldrb	r3, [r0, #7]
10010642:	7982      	ldrb	r2, [r0, #6]
10010644:	021b      	lsls	r3, r3, #8
10010646:	431a      	orrs	r2, r3
10010648:	466b      	mov	r3, sp
1001064a:	9207      	str	r2, [sp, #28]
1001064c:	466a      	mov	r2, sp
1001064e:	8b9b      	ldrh	r3, [r3, #28]
10010650:	1852      	adds	r2, r2, r1
10010652:	8663      	strh	r3, [r4, #50]	; 0x32
10010654:	7a43      	ldrb	r3, [r0, #9]
10010656:	1c01      	adds	r1, r0, #0
10010658:	9308      	str	r3, [sp, #32]
1001065a:	1c23      	adds	r3, r4, #0
1001065c:	7812      	ldrb	r2, [r2, #0]
1001065e:	3377      	adds	r3, #119	; 0x77
10010660:	3478      	adds	r4, #120	; 0x78
10010662:	701a      	strb	r2, [r3, #0]
10010664:	310a      	adds	r1, #10
10010666:	2206      	movs	r2, #6
10010668:	4b1b      	ldr	r3, [pc, #108]	; (100106d8 <gapc_con_req_ind+0xcc>)
1001066a:	1c20      	adds	r0, r4, #0
1001066c:	4798      	blx	r3
1001066e:	7c33      	ldrb	r3, [r6, #16]
10010670:	9309      	str	r3, [sp, #36]	; 0x24
10010672:	4b1a      	ldr	r3, [pc, #104]	; (100106dc <gapc_con_req_ind+0xd0>)
10010674:	4798      	blx	r3
10010676:	4e1a      	ldr	r6, [pc, #104]	; (100106e0 <gapc_con_req_ind+0xd4>)
10010678:	1e07      	subs	r7, r0, #0
1001067a:	2f07      	cmp	r7, #7
1001067c:	d81b      	bhi.n	100106b6 <gapc_con_req_ind+0xaa>
1001067e:	2312      	movs	r3, #18
10010680:	4343      	muls	r3, r0
10010682:	18f0      	adds	r0, r6, r3
10010684:	8145      	strh	r5, [r0, #10]
10010686:	4669      	mov	r1, sp
10010688:	2524      	movs	r5, #36	; 0x24
1001068a:	1949      	adds	r1, r1, r5
1001068c:	7809      	ldrb	r1, [r1, #0]
1001068e:	2206      	movs	r2, #6
10010690:	54f1      	strb	r1, [r6, r3]
10010692:	2120      	movs	r1, #32
10010694:	466b      	mov	r3, sp
10010696:	185b      	adds	r3, r3, r1
10010698:	781b      	ldrb	r3, [r3, #0]
1001069a:	1c21      	adds	r1, r4, #0
1001069c:	7043      	strb	r3, [r0, #1]
1001069e:	466b      	mov	r3, sp
100106a0:	8a9b      	ldrh	r3, [r3, #20]
100106a2:	3002      	adds	r0, #2
100106a4:	8143      	strh	r3, [r0, #10]
100106a6:	466b      	mov	r3, sp
100106a8:	8b1b      	ldrh	r3, [r3, #24]
100106aa:	8183      	strh	r3, [r0, #12]
100106ac:	466b      	mov	r3, sp
100106ae:	8b9b      	ldrh	r3, [r3, #28]
100106b0:	81c3      	strh	r3, [r0, #14]
100106b2:	4b09      	ldr	r3, [pc, #36]	; (100106d8 <gapc_con_req_ind+0xcc>)
100106b4:	4798      	blx	r3
100106b6:	2112      	movs	r1, #18
100106b8:	2300      	movs	r3, #0
100106ba:	434f      	muls	r7, r1
100106bc:	9300      	str	r3, [sp, #0]
100106be:	9301      	str	r3, [sp, #4]
100106c0:	19f6      	adds	r6, r6, r7
100106c2:	8971      	ldrh	r1, [r6, #10]
100106c4:	4a07      	ldr	r2, [pc, #28]	; (100106e4 <gapc_con_req_ind+0xd8>)
100106c6:	9102      	str	r1, [sp, #8]
100106c8:	1c10      	adds	r0, r2, #0
100106ca:	1c19      	adds	r1, r3, #0
100106cc:	4c06      	ldr	r4, [pc, #24]	; (100106e8 <gapc_con_req_ind+0xdc>)
100106ce:	47a0      	blx	r4
100106d0:	b00b      	add	sp, #44	; 0x2c
100106d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106d4:	1001930e 	.word	0x1001930e
100106d8:	100138e7 	.word	0x100138e7
100106dc:	10010451 	.word	0x10010451
100106e0:	1001927e 	.word	0x1001927e
100106e4:	1001839c 	.word	0x1001839c
100106e8:	10010549 	.word	0x10010549

100106ec <gapc_disconnect_cmd_handler>:
100106ec:	2204      	movs	r2, #4
100106ee:	b510      	push	{r4, lr}
100106f0:	4b0c      	ldr	r3, [pc, #48]	; (10010724 <gapc_disconnect_cmd_handler+0x38>)
100106f2:	2400      	movs	r4, #0
100106f4:	701a      	strb	r2, [r3, #0]
100106f6:	320a      	adds	r2, #10
100106f8:	705a      	strb	r2, [r3, #1]
100106fa:	709a      	strb	r2, [r3, #2]
100106fc:	4a0a      	ldr	r2, [pc, #40]	; (10010728 <gapc_disconnect_cmd_handler+0x3c>)
100106fe:	70d9      	strb	r1, [r3, #3]
10010700:	8811      	ldrh	r1, [r2, #0]
10010702:	8812      	ldrh	r2, [r2, #0]
10010704:	7119      	strb	r1, [r3, #4]
10010706:	0a12      	lsrs	r2, r2, #8
10010708:	715a      	strb	r2, [r3, #5]
1001070a:	2201      	movs	r2, #1
1001070c:	721a      	strb	r2, [r3, #8]
1001070e:	1892      	adds	r2, r2, r2
10010710:	7258      	strb	r0, [r3, #9]
10010712:	719a      	strb	r2, [r3, #6]
10010714:	71dc      	strb	r4, [r3, #7]
10010716:	1c18      	adds	r0, r3, #0
10010718:	210a      	movs	r1, #10
1001071a:	4b04      	ldr	r3, [pc, #16]	; (1001072c <gapc_disconnect_cmd_handler+0x40>)
1001071c:	4798      	blx	r3
1001071e:	1c20      	adds	r0, r4, #0
10010720:	bd10      	pop	{r4, pc}
10010722:	46c0      	nop			; (mov r8, r8)
10010724:	100195ec 	.word	0x100195ec
10010728:	1001927c 	.word	0x1001927c
1001072c:	10010245 	.word	0x10010245

10010730 <gapc_disconnect_ind>:
10010730:	1c02      	adds	r2, r0, #0
10010732:	b508      	push	{r3, lr}
10010734:	7843      	ldrb	r3, [r0, #1]
10010736:	7800      	ldrb	r0, [r0, #0]
10010738:	021b      	lsls	r3, r3, #8
1001073a:	4318      	orrs	r0, r3
1001073c:	8008      	strh	r0, [r1, #0]
1001073e:	7893      	ldrb	r3, [r2, #2]
10010740:	708b      	strb	r3, [r1, #2]
10010742:	2100      	movs	r1, #0
10010744:	4b05      	ldr	r3, [pc, #20]	; (1001075c <gapc_disconnect_ind+0x2c>)
10010746:	4798      	blx	r3
10010748:	2807      	cmp	r0, #7
1001074a:	d806      	bhi.n	1001075a <gapc_disconnect_ind+0x2a>
1001074c:	2312      	movs	r3, #18
1001074e:	4358      	muls	r0, r3
10010750:	4b03      	ldr	r3, [pc, #12]	; (10010760 <gapc_disconnect_ind+0x30>)
10010752:	1818      	adds	r0, r3, r0
10010754:	2301      	movs	r3, #1
10010756:	425b      	negs	r3, r3
10010758:	8143      	strh	r3, [r0, #10]
1001075a:	bd08      	pop	{r3, pc}
1001075c:	10010415 	.word	0x10010415
10010760:	1001927e 	.word	0x1001927e

10010764 <gapc_bond_cmd_handler>:
10010764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010766:	9300      	str	r3, [sp, #0]
10010768:	2312      	movs	r3, #18
1001076a:	1c04      	adds	r4, r0, #0
1001076c:	a808      	add	r0, sp, #32
1001076e:	7807      	ldrb	r7, [r0, #0]
10010770:	a809      	add	r0, sp, #36	; 0x24
10010772:	7806      	ldrb	r6, [r0, #0]
10010774:	a80a      	add	r0, sp, #40	; 0x28
10010776:	7805      	ldrb	r5, [r0, #0]
10010778:	a80b      	add	r0, sp, #44	; 0x2c
1001077a:	7800      	ldrb	r0, [r0, #0]
1001077c:	9001      	str	r0, [sp, #4]
1001077e:	4810      	ldr	r0, [pc, #64]	; (100107c0 <gapc_bond_cmd_handler+0x5c>)
10010780:	7003      	strb	r3, [r0, #0]
10010782:	230e      	movs	r3, #14
10010784:	70c4      	strb	r4, [r0, #3]
10010786:	4c0f      	ldr	r4, [pc, #60]	; (100107c4 <gapc_bond_cmd_handler+0x60>)
10010788:	7043      	strb	r3, [r0, #1]
1001078a:	7083      	strb	r3, [r0, #2]
1001078c:	8823      	ldrh	r3, [r4, #0]
1001078e:	8824      	ldrh	r4, [r4, #0]
10010790:	7103      	strb	r3, [r0, #4]
10010792:	466b      	mov	r3, sp
10010794:	781b      	ldrb	r3, [r3, #0]
10010796:	0a24      	lsrs	r4, r4, #8
10010798:	72c3      	strb	r3, [r0, #11]
1001079a:	466b      	mov	r3, sp
1001079c:	791b      	ldrb	r3, [r3, #4]
1001079e:	7144      	strb	r4, [r0, #5]
100107a0:	73c3      	strb	r3, [r0, #15]
100107a2:	2308      	movs	r3, #8
100107a4:	7183      	strb	r3, [r0, #6]
100107a6:	2300      	movs	r3, #0
100107a8:	240a      	movs	r4, #10
100107aa:	7241      	strb	r1, [r0, #9]
100107ac:	71c3      	strb	r3, [r0, #7]
100107ae:	2110      	movs	r1, #16
100107b0:	4b05      	ldr	r3, [pc, #20]	; (100107c8 <gapc_bond_cmd_handler+0x64>)
100107b2:	7307      	strb	r7, [r0, #12]
100107b4:	7346      	strb	r6, [r0, #13]
100107b6:	7385      	strb	r5, [r0, #14]
100107b8:	7204      	strb	r4, [r0, #8]
100107ba:	7282      	strb	r2, [r0, #10]
100107bc:	4798      	blx	r3
100107be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100107c0:	100195ec 	.word	0x100195ec
100107c4:	1001927c 	.word	0x1001927c
100107c8:	10010245 	.word	0x10010245

100107cc <gapc_bond_ind>:
100107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100107ce:	780e      	ldrb	r6, [r1, #0]
100107d0:	1c03      	adds	r3, r0, #0
100107d2:	1eb0      	subs	r0, r6, #2
100107d4:	2805      	cmp	r0, #5
100107d6:	d85d      	bhi.n	10010894 <gapc_bond_ind+0xc8>
100107d8:	1c15      	adds	r5, r2, #0
100107da:	1c0c      	adds	r4, r1, #0
100107dc:	f001 f9be 	bl	10011b5c <__gnu_thumb1_case_uqi>
100107e0:	2f5a030d 	.word	0x2f5a030d
100107e4:	4740      	.short	0x4740
100107e6:	2009      	movs	r0, #9
100107e8:	2a00      	cmp	r2, #0
100107ea:	d054      	beq.n	10010896 <gapc_bond_ind+0xca>
100107ec:	0a1b      	lsrs	r3, r3, #8
100107ee:	8053      	strh	r3, [r2, #2]
100107f0:	788b      	ldrb	r3, [r1, #2]
100107f2:	4829      	ldr	r0, [pc, #164]	; (10010898 <gapc_bond_ind+0xcc>)
100107f4:	7113      	strb	r3, [r2, #4]
100107f6:	2100      	movs	r1, #0
100107f8:	e01c      	b.n	10010834 <gapc_bond_ind+0x68>
100107fa:	2009      	movs	r0, #9
100107fc:	2a00      	cmp	r2, #0
100107fe:	d04a      	beq.n	10010896 <gapc_bond_ind+0xca>
10010800:	4c25      	ldr	r4, [pc, #148]	; (10010898 <gapc_bond_ind+0xcc>)
10010802:	0a1b      	lsrs	r3, r3, #8
10010804:	8053      	strh	r3, [r2, #2]
10010806:	788b      	ldrb	r3, [r1, #2]
10010808:	2700      	movs	r7, #0
1001080a:	1c10      	adds	r0, r2, #0
1001080c:	1c21      	adds	r1, r4, #0
1001080e:	7013      	strb	r3, [r2, #0]
10010810:	4e22      	ldr	r6, [pc, #136]	; (1001089c <gapc_bond_ind+0xd0>)
10010812:	7117      	strb	r7, [r2, #4]
10010814:	312e      	adds	r1, #46	; 0x2e
10010816:	2217      	movs	r2, #23
10010818:	3032      	adds	r0, #50	; 0x32
1001081a:	47b0      	blx	r6
1001081c:	1c28      	adds	r0, r5, #0
1001081e:	1c21      	adds	r1, r4, #0
10010820:	2210      	movs	r2, #16
10010822:	311e      	adds	r1, #30
10010824:	3022      	adds	r0, #34	; 0x22
10010826:	47b0      	blx	r6
10010828:	1ca1      	adds	r1, r4, #2
1001082a:	1da8      	adds	r0, r5, #6
1001082c:	221c      	movs	r2, #28
1001082e:	47b0      	blx	r6
10010830:	1c20      	adds	r0, r4, #0
10010832:	1c39      	adds	r1, r7, #0
10010834:	2246      	movs	r2, #70	; 0x46
10010836:	4b1a      	ldr	r3, [pc, #104]	; (100108a0 <gapc_bond_ind+0xd4>)
10010838:	4798      	blx	r3
1001083a:	2009      	movs	r0, #9
1001083c:	e02b      	b.n	10010896 <gapc_bond_ind+0xca>
1001083e:	4d16      	ldr	r5, [pc, #88]	; (10010898 <gapc_bond_ind+0xcc>)
10010840:	3102      	adds	r1, #2
10010842:	1c28      	adds	r0, r5, #0
10010844:	2210      	movs	r2, #16
10010846:	4e15      	ldr	r6, [pc, #84]	; (1001089c <gapc_bond_ind+0xd0>)
10010848:	302e      	adds	r0, #46	; 0x2e
1001084a:	47b0      	blx	r6
1001084c:	1c28      	adds	r0, r5, #0
1001084e:	1c21      	adds	r1, r4, #0
10010850:	303f      	adds	r0, #63	; 0x3f
10010852:	3112      	adds	r1, #18
10010854:	2206      	movs	r2, #6
10010856:	47b0      	blx	r6
10010858:	7e23      	ldrb	r3, [r4, #24]
1001085a:	353e      	adds	r5, #62	; 0x3e
1001085c:	702b      	strb	r3, [r5, #0]
1001085e:	e019      	b.n	10010894 <gapc_bond_ind+0xc8>
10010860:	480d      	ldr	r0, [pc, #52]	; (10010898 <gapc_bond_ind+0xcc>)
10010862:	3102      	adds	r1, #2
10010864:	2210      	movs	r2, #16
10010866:	4b0d      	ldr	r3, [pc, #52]	; (1001089c <gapc_bond_ind+0xd0>)
10010868:	301e      	adds	r0, #30
1001086a:	4798      	blx	r3
1001086c:	e012      	b.n	10010894 <gapc_bond_ind+0xc8>
1001086e:	4d0a      	ldr	r5, [pc, #40]	; (10010898 <gapc_bond_ind+0xcc>)
10010870:	3102      	adds	r1, #2
10010872:	2210      	movs	r2, #16
10010874:	4e09      	ldr	r6, [pc, #36]	; (1001089c <gapc_bond_ind+0xd0>)
10010876:	1ca8      	adds	r0, r5, #2
10010878:	47b0      	blx	r6
1001087a:	1c28      	adds	r0, r5, #0
1001087c:	1c21      	adds	r1, r4, #0
1001087e:	7ce3      	ldrb	r3, [r4, #19]
10010880:	7ca2      	ldrb	r2, [r4, #18]
10010882:	021b      	lsls	r3, r3, #8
10010884:	4313      	orrs	r3, r2
10010886:	3014      	adds	r0, #20
10010888:	3114      	adds	r1, #20
1001088a:	2208      	movs	r2, #8
1001088c:	826b      	strh	r3, [r5, #18]
1001088e:	47b0      	blx	r6
10010890:	7f23      	ldrb	r3, [r4, #28]
10010892:	772b      	strb	r3, [r5, #28]
10010894:	2000      	movs	r0, #0
10010896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010898:	100183cc 	.word	0x100183cc
1001089c:	100138e7 	.word	0x100138e7
100108a0:	100138f9 	.word	0x100138f9

100108a4 <gapc_bond_req_ind>:
100108a4:	b570      	push	{r4, r5, r6, lr}
100108a6:	780c      	ldrb	r4, [r1, #0]
100108a8:	1c03      	adds	r3, r0, #0
100108aa:	7849      	ldrb	r1, [r1, #1]
100108ac:	2c07      	cmp	r4, #7
100108ae:	d85c      	bhi.n	1001096a <gapc_bond_req_ind+0xc6>
100108b0:	1c20      	adds	r0, r4, #0
100108b2:	f001 f953 	bl	10011b5c <__gnu_thumb1_case_uqi>
100108b6:	5a04      	.short	0x5a04
100108b8:	5a0b5a5a 	.word	0x5a0b5a5a
100108bc:	1f1f      	.short	0x1f1f
100108be:	200a      	movs	r0, #10
100108c0:	2a00      	cmp	r2, #0
100108c2:	d053      	beq.n	1001096c <gapc_bond_req_ind+0xc8>
100108c4:	0a1b      	lsrs	r3, r3, #8
100108c6:	8013      	strh	r3, [r2, #0]
100108c8:	7091      	strb	r1, [r2, #2]
100108ca:	e04f      	b.n	1001096c <gapc_bond_req_ind+0xc8>
100108cc:	2a00      	cmp	r2, #0
100108ce:	d00b      	beq.n	100108e8 <gapc_bond_req_ind+0x44>
100108d0:	0a1b      	lsrs	r3, r3, #8
100108d2:	8013      	strh	r3, [r2, #0]
100108d4:	2900      	cmp	r1, #0
100108d6:	d102      	bne.n	100108de <gapc_bond_req_ind+0x3a>
100108d8:	2301      	movs	r3, #1
100108da:	7093      	strb	r3, [r2, #2]
100108dc:	e004      	b.n	100108e8 <gapc_bond_req_ind+0x44>
100108de:	2300      	movs	r3, #0
100108e0:	7093      	strb	r3, [r2, #2]
100108e2:	2902      	cmp	r1, #2
100108e4:	d102      	bne.n	100108ec <gapc_bond_req_ind+0x48>
100108e6:	70d3      	strb	r3, [r2, #3]
100108e8:	200c      	movs	r0, #12
100108ea:	e03f      	b.n	1001096c <gapc_bond_req_ind+0xc8>
100108ec:	2901      	cmp	r1, #1
100108ee:	d1fb      	bne.n	100108e8 <gapc_bond_req_ind+0x44>
100108f0:	70d1      	strb	r1, [r2, #3]
100108f2:	e7f9      	b.n	100108e8 <gapc_bond_req_ind+0x44>
100108f4:	2214      	movs	r2, #20
100108f6:	481e      	ldr	r0, [pc, #120]	; (10010970 <gapc_bond_req_ind+0xcc>)
100108f8:	0a1b      	lsrs	r3, r3, #8
100108fa:	70c3      	strb	r3, [r0, #3]
100108fc:	4b1d      	ldr	r3, [pc, #116]	; (10010974 <gapc_bond_req_ind+0xd0>)
100108fe:	7002      	strb	r2, [r0, #0]
10010900:	3a06      	subs	r2, #6
10010902:	7042      	strb	r2, [r0, #1]
10010904:	7082      	strb	r2, [r0, #2]
10010906:	881a      	ldrh	r2, [r3, #0]
10010908:	881b      	ldrh	r3, [r3, #0]
1001090a:	4e1b      	ldr	r6, [pc, #108]	; (10010978 <gapc_bond_req_ind+0xd4>)
1001090c:	0a1b      	lsrs	r3, r3, #8
1001090e:	7143      	strb	r3, [r0, #5]
10010910:	2301      	movs	r3, #1
10010912:	7102      	strb	r2, [r0, #4]
10010914:	7204      	strb	r4, [r0, #8]
10010916:	7243      	strb	r3, [r0, #9]
10010918:	1c05      	adds	r5, r0, #0
1001091a:	1c31      	adds	r1, r6, #0
1001091c:	300a      	adds	r0, #10
1001091e:	2c07      	cmp	r4, #7
10010920:	d116      	bne.n	10010950 <gapc_bond_req_ind+0xac>
10010922:	317e      	adds	r1, #126	; 0x7e
10010924:	2210      	movs	r2, #16
10010926:	4c15      	ldr	r4, [pc, #84]	; (1001097c <gapc_bond_req_ind+0xd8>)
10010928:	47a0      	blx	r4
1001092a:	1c33      	adds	r3, r6, #0
1001092c:	1c31      	adds	r1, r6, #0
1001092e:	1c28      	adds	r0, r5, #0
10010930:	338e      	adds	r3, #142	; 0x8e
10010932:	881b      	ldrh	r3, [r3, #0]
10010934:	3190      	adds	r1, #144	; 0x90
10010936:	76ab      	strb	r3, [r5, #26]
10010938:	2208      	movs	r2, #8
1001093a:	0a1b      	lsrs	r3, r3, #8
1001093c:	301c      	adds	r0, #28
1001093e:	76eb      	strb	r3, [r5, #27]
10010940:	47a0      	blx	r4
10010942:	1c31      	adds	r1, r6, #0
10010944:	3198      	adds	r1, #152	; 0x98
10010946:	780a      	ldrb	r2, [r1, #0]
10010948:	1d6b      	adds	r3, r5, #5
1001094a:	77da      	strb	r2, [r3, #31]
1001094c:	2125      	movs	r1, #37	; 0x25
1001094e:	e004      	b.n	1001095a <gapc_bond_req_ind+0xb6>
10010950:	319a      	adds	r1, #154	; 0x9a
10010952:	2210      	movs	r2, #16
10010954:	4b09      	ldr	r3, [pc, #36]	; (1001097c <gapc_bond_req_ind+0xd8>)
10010956:	4798      	blx	r3
10010958:	211a      	movs	r1, #26
1001095a:	1c0b      	adds	r3, r1, #0
1001095c:	2400      	movs	r4, #0
1001095e:	3b08      	subs	r3, #8
10010960:	71ab      	strb	r3, [r5, #6]
10010962:	1c28      	adds	r0, r5, #0
10010964:	4b06      	ldr	r3, [pc, #24]	; (10010980 <gapc_bond_req_ind+0xdc>)
10010966:	71ec      	strb	r4, [r5, #7]
10010968:	4798      	blx	r3
1001096a:	2000      	movs	r0, #0
1001096c:	bd70      	pop	{r4, r5, r6, pc}
1001096e:	46c0      	nop			; (mov r8, r8)
10010970:	100195ec 	.word	0x100195ec
10010974:	1001927c 	.word	0x1001927c
10010978:	1001930e 	.word	0x1001930e
1001097c:	100138e7 	.word	0x100138e7
10010980:	10010245 	.word	0x10010245

10010984 <gapc_bond_cfm_handler_pair_resp>:
10010984:	b5f0      	push	{r4, r5, r6, r7, lr}
10010986:	b085      	sub	sp, #20
10010988:	1c07      	adds	r7, r0, #0
1001098a:	a80a      	add	r0, sp, #40	; 0x28
1001098c:	7806      	ldrb	r6, [r0, #0]
1001098e:	a80b      	add	r0, sp, #44	; 0x2c
10010990:	7805      	ldrb	r5, [r0, #0]
10010992:	a80c      	add	r0, sp, #48	; 0x30
10010994:	7800      	ldrb	r0, [r0, #0]
10010996:	2414      	movs	r4, #20
10010998:	9002      	str	r0, [sp, #8]
1001099a:	a80d      	add	r0, sp, #52	; 0x34
1001099c:	7800      	ldrb	r0, [r0, #0]
1001099e:	9301      	str	r3, [sp, #4]
100109a0:	9003      	str	r0, [sp, #12]
100109a2:	a80e      	add	r0, sp, #56	; 0x38
100109a4:	8800      	ldrh	r0, [r0, #0]
100109a6:	4684      	mov	ip, r0
100109a8:	4812      	ldr	r0, [pc, #72]	; (100109f4 <gapc_bond_cfm_handler_pair_resp+0x70>)
100109aa:	7004      	strb	r4, [r0, #0]
100109ac:	3c06      	subs	r4, #6
100109ae:	7044      	strb	r4, [r0, #1]
100109b0:	7084      	strb	r4, [r0, #2]
100109b2:	4664      	mov	r4, ip
100109b4:	70c4      	strb	r4, [r0, #3]
100109b6:	4c10      	ldr	r4, [pc, #64]	; (100109f8 <gapc_bond_cfm_handler_pair_resp+0x74>)
100109b8:	7247      	strb	r7, [r0, #9]
100109ba:	8823      	ldrh	r3, [r4, #0]
100109bc:	8824      	ldrh	r4, [r4, #0]
100109be:	7103      	strb	r3, [r0, #4]
100109c0:	466b      	mov	r3, sp
100109c2:	791b      	ldrb	r3, [r3, #4]
100109c4:	0a24      	lsrs	r4, r4, #8
100109c6:	7303      	strb	r3, [r0, #12]
100109c8:	466b      	mov	r3, sp
100109ca:	7a1b      	ldrb	r3, [r3, #8]
100109cc:	7144      	strb	r4, [r0, #5]
100109ce:	73c3      	strb	r3, [r0, #15]
100109d0:	466b      	mov	r3, sp
100109d2:	7b1b      	ldrb	r3, [r3, #12]
100109d4:	2401      	movs	r4, #1
100109d6:	7403      	strb	r3, [r0, #16]
100109d8:	2309      	movs	r3, #9
100109da:	7183      	strb	r3, [r0, #6]
100109dc:	2300      	movs	r3, #0
100109de:	7204      	strb	r4, [r0, #8]
100109e0:	7281      	strb	r1, [r0, #10]
100109e2:	72c2      	strb	r2, [r0, #11]
100109e4:	7346      	strb	r6, [r0, #13]
100109e6:	7385      	strb	r5, [r0, #14]
100109e8:	71c3      	strb	r3, [r0, #7]
100109ea:	2111      	movs	r1, #17
100109ec:	4b03      	ldr	r3, [pc, #12]	; (100109fc <gapc_bond_cfm_handler_pair_resp+0x78>)
100109ee:	4798      	blx	r3
100109f0:	b005      	add	sp, #20
100109f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100109f4:	100195ec 	.word	0x100195ec
100109f8:	1001927c 	.word	0x1001927c
100109fc:	10010245 	.word	0x10010245

10010a00 <gapc_bond_cfm_handler_key_exch>:
10010a00:	b538      	push	{r3, r4, r5, lr}
10010a02:	2514      	movs	r5, #20
10010a04:	4c0d      	ldr	r4, [pc, #52]	; (10010a3c <gapc_bond_cfm_handler_key_exch+0x3c>)
10010a06:	70e3      	strb	r3, [r4, #3]
10010a08:	4b0d      	ldr	r3, [pc, #52]	; (10010a40 <gapc_bond_cfm_handler_key_exch+0x40>)
10010a0a:	7025      	strb	r5, [r4, #0]
10010a0c:	3d06      	subs	r5, #6
10010a0e:	7065      	strb	r5, [r4, #1]
10010a10:	70a5      	strb	r5, [r4, #2]
10010a12:	881d      	ldrh	r5, [r3, #0]
10010a14:	881b      	ldrh	r3, [r3, #0]
10010a16:	7220      	strb	r0, [r4, #8]
10010a18:	0a1b      	lsrs	r3, r3, #8
10010a1a:	7163      	strb	r3, [r4, #5]
10010a1c:	7261      	strb	r1, [r4, #9]
10010a1e:	4b09      	ldr	r3, [pc, #36]	; (10010a44 <gapc_bond_cfm_handler_key_exch+0x44>)
10010a20:	1c11      	adds	r1, r2, #0
10010a22:	4809      	ldr	r0, [pc, #36]	; (10010a48 <gapc_bond_cfm_handler_key_exch+0x48>)
10010a24:	2210      	movs	r2, #16
10010a26:	7125      	strb	r5, [r4, #4]
10010a28:	4798      	blx	r3
10010a2a:	2312      	movs	r3, #18
10010a2c:	71a3      	strb	r3, [r4, #6]
10010a2e:	2300      	movs	r3, #0
10010a30:	1c20      	adds	r0, r4, #0
10010a32:	71e3      	strb	r3, [r4, #7]
10010a34:	211a      	movs	r1, #26
10010a36:	4b05      	ldr	r3, [pc, #20]	; (10010a4c <gapc_bond_cfm_handler_key_exch+0x4c>)
10010a38:	4798      	blx	r3
10010a3a:	bd38      	pop	{r3, r4, r5, pc}
10010a3c:	100195ec 	.word	0x100195ec
10010a40:	1001927c 	.word	0x1001927c
10010a44:	100138e7 	.word	0x100138e7
10010a48:	100195f6 	.word	0x100195f6
10010a4c:	10010245 	.word	0x10010245

10010a50 <gapc_security_cmd_handler>:
10010a50:	221a      	movs	r2, #26
10010a52:	b508      	push	{r3, lr}
10010a54:	4b0b      	ldr	r3, [pc, #44]	; (10010a84 <gapc_security_cmd_handler+0x34>)
10010a56:	701a      	strb	r2, [r3, #0]
10010a58:	3a0c      	subs	r2, #12
10010a5a:	705a      	strb	r2, [r3, #1]
10010a5c:	709a      	strb	r2, [r3, #2]
10010a5e:	4a0a      	ldr	r2, [pc, #40]	; (10010a88 <gapc_security_cmd_handler+0x38>)
10010a60:	70d8      	strb	r0, [r3, #3]
10010a62:	8810      	ldrh	r0, [r2, #0]
10010a64:	8812      	ldrh	r2, [r2, #0]
10010a66:	7118      	strb	r0, [r3, #4]
10010a68:	0a12      	lsrs	r2, r2, #8
10010a6a:	715a      	strb	r2, [r3, #5]
10010a6c:	220c      	movs	r2, #12
10010a6e:	721a      	strb	r2, [r3, #8]
10010a70:	3a0a      	subs	r2, #10
10010a72:	719a      	strb	r2, [r3, #6]
10010a74:	2200      	movs	r2, #0
10010a76:	7259      	strb	r1, [r3, #9]
10010a78:	71da      	strb	r2, [r3, #7]
10010a7a:	1c18      	adds	r0, r3, #0
10010a7c:	210a      	movs	r1, #10
10010a7e:	4b03      	ldr	r3, [pc, #12]	; (10010a8c <gapc_security_cmd_handler+0x3c>)
10010a80:	4798      	blx	r3
10010a82:	bd08      	pop	{r3, pc}
10010a84:	100195ec 	.word	0x100195ec
10010a88:	1001927c 	.word	0x1001927c
10010a8c:	10010245 	.word	0x10010245

10010a90 <gapc_encrypt_cmd_handler>:
10010a90:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a92:	2500      	movs	r5, #0
10010a94:	b089      	sub	sp, #36	; 0x24
10010a96:	9306      	str	r3, [sp, #24]
10010a98:	ab0e      	add	r3, sp, #56	; 0x38
10010a9a:	781b      	ldrb	r3, [r3, #0]
10010a9c:	1c17      	adds	r7, r2, #0
10010a9e:	9307      	str	r3, [sp, #28]
10010aa0:	ab0f      	add	r3, sp, #60	; 0x3c
10010aa2:	781b      	ldrb	r3, [r3, #0]
10010aa4:	4a19      	ldr	r2, [pc, #100]	; (10010b0c <gapc_encrypt_cmd_handler+0x7c>)
10010aa6:	1c06      	adds	r6, r0, #0
10010aa8:	9105      	str	r1, [sp, #20]
10010aaa:	9300      	str	r3, [sp, #0]
10010aac:	9002      	str	r0, [sp, #8]
10010aae:	1c29      	adds	r1, r5, #0
10010ab0:	1c2b      	adds	r3, r5, #0
10010ab2:	9501      	str	r5, [sp, #4]
10010ab4:	1c10      	adds	r0, r2, #0
10010ab6:	4c16      	ldr	r4, [pc, #88]	; (10010b10 <gapc_encrypt_cmd_handler+0x80>)
10010ab8:	47a0      	blx	r4
10010aba:	2316      	movs	r3, #22
10010abc:	4c15      	ldr	r4, [pc, #84]	; (10010b14 <gapc_encrypt_cmd_handler+0x84>)
10010abe:	9905      	ldr	r1, [sp, #20]
10010ac0:	7023      	strb	r3, [r4, #0]
10010ac2:	3b08      	subs	r3, #8
10010ac4:	7063      	strb	r3, [r4, #1]
10010ac6:	70a3      	strb	r3, [r4, #2]
10010ac8:	4b13      	ldr	r3, [pc, #76]	; (10010b18 <gapc_encrypt_cmd_handler+0x88>)
10010aca:	70e6      	strb	r6, [r4, #3]
10010acc:	881a      	ldrh	r2, [r3, #0]
10010ace:	881b      	ldrh	r3, [r3, #0]
10010ad0:	7122      	strb	r2, [r4, #4]
10010ad2:	0a1b      	lsrs	r3, r3, #8
10010ad4:	7163      	strb	r3, [r4, #5]
10010ad6:	230b      	movs	r3, #11
10010ad8:	4e10      	ldr	r6, [pc, #64]	; (10010b1c <gapc_encrypt_cmd_handler+0x8c>)
10010ada:	2210      	movs	r2, #16
10010adc:	4810      	ldr	r0, [pc, #64]	; (10010b20 <gapc_encrypt_cmd_handler+0x90>)
10010ade:	7223      	strb	r3, [r4, #8]
10010ae0:	7265      	strb	r5, [r4, #9]
10010ae2:	47b0      	blx	r6
10010ae4:	0a3b      	lsrs	r3, r7, #8
10010ae6:	9906      	ldr	r1, [sp, #24]
10010ae8:	2208      	movs	r2, #8
10010aea:	480e      	ldr	r0, [pc, #56]	; (10010b24 <gapc_encrypt_cmd_handler+0x94>)
10010aec:	76e3      	strb	r3, [r4, #27]
10010aee:	76a7      	strb	r7, [r4, #26]
10010af0:	47b0      	blx	r6
10010af2:	466a      	mov	r2, sp
10010af4:	7f12      	ldrb	r2, [r2, #28]
10010af6:	1d63      	adds	r3, r4, #5
10010af8:	77da      	strb	r2, [r3, #31]
10010afa:	231d      	movs	r3, #29
10010afc:	1c20      	adds	r0, r4, #0
10010afe:	71a3      	strb	r3, [r4, #6]
10010b00:	2125      	movs	r1, #37	; 0x25
10010b02:	4b09      	ldr	r3, [pc, #36]	; (10010b28 <gapc_encrypt_cmd_handler+0x98>)
10010b04:	71e5      	strb	r5, [r4, #7]
10010b06:	4798      	blx	r3
10010b08:	b009      	add	sp, #36	; 0x24
10010b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b0c:	100183ac 	.word	0x100183ac
10010b10:	10010549 	.word	0x10010549
10010b14:	100195ec 	.word	0x100195ec
10010b18:	1001927c 	.word	0x1001927c
10010b1c:	100138e7 	.word	0x100138e7
10010b20:	100195f6 	.word	0x100195f6
10010b24:	10019608 	.word	0x10019608
10010b28:	10010245 	.word	0x10010245

10010b2c <gapc_encrypt_req_ind>:
10010b2c:	b508      	push	{r3, lr}
10010b2e:	0a00      	lsrs	r0, r0, #8
10010b30:	8010      	strh	r0, [r2, #0]
10010b32:	784b      	ldrb	r3, [r1, #1]
10010b34:	7808      	ldrb	r0, [r1, #0]
10010b36:	021b      	lsls	r3, r3, #8
10010b38:	4303      	orrs	r3, r0
10010b3a:	8053      	strh	r3, [r2, #2]
10010b3c:	1d10      	adds	r0, r2, #4
10010b3e:	3102      	adds	r1, #2
10010b40:	2208      	movs	r2, #8
10010b42:	4b01      	ldr	r3, [pc, #4]	; (10010b48 <gapc_encrypt_req_ind+0x1c>)
10010b44:	4798      	blx	r3
10010b46:	bd08      	pop	{r3, pc}
10010b48:	100138e7 	.word	0x100138e7

10010b4c <gapc_encrypt_cfm_handler>:
10010b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b4e:	2500      	movs	r5, #0
10010b50:	b087      	sub	sp, #28
10010b52:	9304      	str	r3, [sp, #16]
10010b54:	ab0c      	add	r3, sp, #48	; 0x30
10010b56:	781b      	ldrb	r3, [r3, #0]
10010b58:	1c17      	adds	r7, r2, #0
10010b5a:	4a15      	ldr	r2, [pc, #84]	; (10010bb0 <gapc_encrypt_cfm_handler+0x64>)
10010b5c:	1c06      	adds	r6, r0, #0
10010b5e:	9305      	str	r3, [sp, #20]
10010b60:	9100      	str	r1, [sp, #0]
10010b62:	9002      	str	r0, [sp, #8]
10010b64:	1c29      	adds	r1, r5, #0
10010b66:	1c2b      	adds	r3, r5, #0
10010b68:	9501      	str	r5, [sp, #4]
10010b6a:	1c10      	adds	r0, r2, #0
10010b6c:	4c11      	ldr	r4, [pc, #68]	; (10010bb4 <gapc_encrypt_cfm_handler+0x68>)
10010b6e:	47a0      	blx	r4
10010b70:	2318      	movs	r3, #24
10010b72:	4c11      	ldr	r4, [pc, #68]	; (10010bb8 <gapc_encrypt_cfm_handler+0x6c>)
10010b74:	9904      	ldr	r1, [sp, #16]
10010b76:	7023      	strb	r3, [r4, #0]
10010b78:	3b0a      	subs	r3, #10
10010b7a:	7063      	strb	r3, [r4, #1]
10010b7c:	70a3      	strb	r3, [r4, #2]
10010b7e:	4b0f      	ldr	r3, [pc, #60]	; (10010bbc <gapc_encrypt_cfm_handler+0x70>)
10010b80:	480f      	ldr	r0, [pc, #60]	; (10010bc0 <gapc_encrypt_cfm_handler+0x74>)
10010b82:	881a      	ldrh	r2, [r3, #0]
10010b84:	881b      	ldrh	r3, [r3, #0]
10010b86:	7122      	strb	r2, [r4, #4]
10010b88:	0a1b      	lsrs	r3, r3, #8
10010b8a:	7163      	strb	r3, [r4, #5]
10010b8c:	2210      	movs	r2, #16
10010b8e:	4b0d      	ldr	r3, [pc, #52]	; (10010bc4 <gapc_encrypt_cfm_handler+0x78>)
10010b90:	70e6      	strb	r6, [r4, #3]
10010b92:	7227      	strb	r7, [r4, #8]
10010b94:	4798      	blx	r3
10010b96:	466b      	mov	r3, sp
10010b98:	7d1b      	ldrb	r3, [r3, #20]
10010b9a:	1c20      	adds	r0, r4, #0
10010b9c:	7663      	strb	r3, [r4, #25]
10010b9e:	2312      	movs	r3, #18
10010ba0:	211a      	movs	r1, #26
10010ba2:	71a3      	strb	r3, [r4, #6]
10010ba4:	4b08      	ldr	r3, [pc, #32]	; (10010bc8 <gapc_encrypt_cfm_handler+0x7c>)
10010ba6:	71e5      	strb	r5, [r4, #7]
10010ba8:	4798      	blx	r3
10010baa:	b007      	add	sp, #28
10010bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bae:	46c0      	nop			; (mov r8, r8)
10010bb0:	100183bc 	.word	0x100183bc
10010bb4:	10010549 	.word	0x10010549
10010bb8:	100195ec 	.word	0x100195ec
10010bbc:	1001927c 	.word	0x1001927c
10010bc0:	100195f5 	.word	0x100195f5
10010bc4:	100138e7 	.word	0x100138e7
10010bc8:	10010245 	.word	0x10010245

10010bcc <gapc_encrypt_ind>:
10010bcc:	780b      	ldrb	r3, [r1, #0]
10010bce:	0a00      	lsrs	r0, r0, #8
10010bd0:	70d3      	strb	r3, [r2, #3]
10010bd2:	2300      	movs	r3, #0
10010bd4:	8010      	strh	r0, [r2, #0]
10010bd6:	7093      	strb	r3, [r2, #2]
10010bd8:	4770      	bx	lr
	...

10010bdc <gapc_param_update_cfm_handler>:
10010bdc:	b538      	push	{r3, r4, r5, lr}
10010bde:	2410      	movs	r4, #16
10010be0:	1c05      	adds	r5, r0, #0
10010be2:	480e      	ldr	r0, [pc, #56]	; (10010c1c <gapc_param_update_cfm_handler+0x40>)
10010be4:	7004      	strb	r4, [r0, #0]
10010be6:	3c02      	subs	r4, #2
10010be8:	7044      	strb	r4, [r0, #1]
10010bea:	7084      	strb	r4, [r0, #2]
10010bec:	4c0c      	ldr	r4, [pc, #48]	; (10010c20 <gapc_param_update_cfm_handler+0x44>)
10010bee:	70c5      	strb	r5, [r0, #3]
10010bf0:	8825      	ldrh	r5, [r4, #0]
10010bf2:	8824      	ldrh	r4, [r4, #0]
10010bf4:	72c3      	strb	r3, [r0, #11]
10010bf6:	0a1b      	lsrs	r3, r3, #8
10010bf8:	0a24      	lsrs	r4, r4, #8
10010bfa:	7303      	strb	r3, [r0, #12]
10010bfc:	2305      	movs	r3, #5
10010bfe:	7144      	strb	r4, [r0, #5]
10010c00:	2400      	movs	r4, #0
10010c02:	7201      	strb	r1, [r0, #8]
10010c04:	7242      	strb	r2, [r0, #9]
10010c06:	7183      	strb	r3, [r0, #6]
10010c08:	0a12      	lsrs	r2, r2, #8
10010c0a:	210d      	movs	r1, #13
10010c0c:	4b05      	ldr	r3, [pc, #20]	; (10010c24 <gapc_param_update_cfm_handler+0x48>)
10010c0e:	7105      	strb	r5, [r0, #4]
10010c10:	7282      	strb	r2, [r0, #10]
10010c12:	71c4      	strb	r4, [r0, #7]
10010c14:	4798      	blx	r3
10010c16:	1c20      	adds	r0, r4, #0
10010c18:	bd38      	pop	{r3, r4, r5, pc}
10010c1a:	46c0      	nop			; (mov r8, r8)
10010c1c:	100195ec 	.word	0x100195ec
10010c20:	1001927c 	.word	0x1001927c
10010c24:	10010245 	.word	0x10010245

10010c28 <gapc_param_updated_ind>:
10010c28:	2300      	movs	r3, #0
10010c2a:	0a00      	lsrs	r0, r0, #8
10010c2c:	8010      	strh	r0, [r2, #0]
10010c2e:	7093      	strb	r3, [r2, #2]
10010c30:	784b      	ldrb	r3, [r1, #1]
10010c32:	7808      	ldrb	r0, [r1, #0]
10010c34:	021b      	lsls	r3, r3, #8
10010c36:	4303      	orrs	r3, r0
10010c38:	8093      	strh	r3, [r2, #4]
10010c3a:	78cb      	ldrb	r3, [r1, #3]
10010c3c:	7888      	ldrb	r0, [r1, #2]
10010c3e:	021b      	lsls	r3, r3, #8
10010c40:	4303      	orrs	r3, r0
10010c42:	80d3      	strh	r3, [r2, #6]
10010c44:	794b      	ldrb	r3, [r1, #5]
10010c46:	7909      	ldrb	r1, [r1, #4]
10010c48:	021b      	lsls	r3, r3, #8
10010c4a:	430b      	orrs	r3, r1
10010c4c:	2007      	movs	r0, #7
10010c4e:	8113      	strh	r3, [r2, #8]
10010c50:	4770      	bx	lr

10010c52 <gapc_param_updated_req_ind>:
10010c52:	0a00      	lsrs	r0, r0, #8
10010c54:	8010      	strh	r0, [r2, #0]
10010c56:	784b      	ldrb	r3, [r1, #1]
10010c58:	7808      	ldrb	r0, [r1, #0]
10010c5a:	021b      	lsls	r3, r3, #8
10010c5c:	4303      	orrs	r3, r0
10010c5e:	8053      	strh	r3, [r2, #2]
10010c60:	78cb      	ldrb	r3, [r1, #3]
10010c62:	7888      	ldrb	r0, [r1, #2]
10010c64:	021b      	lsls	r3, r3, #8
10010c66:	4303      	orrs	r3, r0
10010c68:	8093      	strh	r3, [r2, #4]
10010c6a:	794b      	ldrb	r3, [r1, #5]
10010c6c:	7908      	ldrb	r0, [r1, #4]
10010c6e:	021b      	lsls	r3, r3, #8
10010c70:	4303      	orrs	r3, r0
10010c72:	80d3      	strh	r3, [r2, #6]
10010c74:	79cb      	ldrb	r3, [r1, #7]
10010c76:	7989      	ldrb	r1, [r1, #6]
10010c78:	021b      	lsls	r3, r3, #8
10010c7a:	430b      	orrs	r3, r1
10010c7c:	2008      	movs	r0, #8
10010c7e:	8113      	strh	r3, [r2, #8]
10010c80:	4770      	bx	lr
	...

10010c84 <gapc_dev_info_req_ind_handler>:
10010c84:	b508      	push	{r3, lr}
10010c86:	1c0b      	adds	r3, r1, #0
10010c88:	0a01      	lsrs	r1, r0, #8
10010c8a:	8011      	strh	r1, [r2, #0]
10010c8c:	7818      	ldrb	r0, [r3, #0]
10010c8e:	7090      	strb	r0, [r2, #2]
10010c90:	2800      	cmp	r0, #0
10010c92:	d104      	bne.n	10010c9e <gapc_dev_info_req_ind_handler+0x1a>
10010c94:	4b03      	ldr	r3, [pc, #12]	; (10010ca4 <gapc_dev_info_req_ind_handler+0x20>)
10010c96:	33aa      	adds	r3, #170	; 0xaa
10010c98:	881b      	ldrh	r3, [r3, #0]
10010c9a:	2b00      	cmp	r3, #0
10010c9c:	d001      	beq.n	10010ca2 <gapc_dev_info_req_ind_handler+0x1e>
10010c9e:	4b02      	ldr	r3, [pc, #8]	; (10010ca8 <gapc_dev_info_req_ind_handler+0x24>)
10010ca0:	4798      	blx	r3
10010ca2:	bd08      	pop	{r3, pc}
10010ca4:	1001930e 	.word	0x1001930e
10010ca8:	10010355 	.word	0x10010355

10010cac <gapc_sec_req_ind>:
10010cac:	0a00      	lsrs	r0, r0, #8
10010cae:	8010      	strh	r0, [r2, #0]
10010cb0:	7809      	ldrb	r1, [r1, #0]
10010cb2:	2301      	movs	r3, #1
10010cb4:	1c08      	adds	r0, r1, #0
10010cb6:	0889      	lsrs	r1, r1, #2
10010cb8:	4018      	ands	r0, r3
10010cba:	400b      	ands	r3, r1
10010cbc:	70d0      	strb	r0, [r2, #3]
10010cbe:	7113      	strb	r3, [r2, #4]
10010cc0:	4770      	bx	lr

10010cc2 <gapc_sign_counter_ind_handler>:
10010cc2:	0a00      	lsrs	r0, r0, #8
10010cc4:	8010      	strh	r0, [r2, #0]
10010cc6:	784b      	ldrb	r3, [r1, #1]
10010cc8:	0218      	lsls	r0, r3, #8
10010cca:	788b      	ldrb	r3, [r1, #2]
10010ccc:	041b      	lsls	r3, r3, #16
10010cce:	4303      	orrs	r3, r0
10010cd0:	7808      	ldrb	r0, [r1, #0]
10010cd2:	4303      	orrs	r3, r0
10010cd4:	78c8      	ldrb	r0, [r1, #3]
10010cd6:	0600      	lsls	r0, r0, #24
10010cd8:	4303      	orrs	r3, r0
10010cda:	6053      	str	r3, [r2, #4]
10010cdc:	794b      	ldrb	r3, [r1, #5]
10010cde:	0218      	lsls	r0, r3, #8
10010ce0:	798b      	ldrb	r3, [r1, #6]
10010ce2:	041b      	lsls	r3, r3, #16
10010ce4:	4303      	orrs	r3, r0
10010ce6:	7908      	ldrb	r0, [r1, #4]
10010ce8:	79c9      	ldrb	r1, [r1, #7]
10010cea:	4303      	orrs	r3, r0
10010cec:	0609      	lsls	r1, r1, #24
10010cee:	430b      	orrs	r3, r1
10010cf0:	2000      	movs	r0, #0
10010cf2:	6093      	str	r3, [r2, #8]
10010cf4:	4770      	bx	lr
	...

10010cf8 <gapc_peer_att_info_ind_handler>:
10010cf8:	b510      	push	{r4, lr}
10010cfa:	0a00      	lsrs	r0, r0, #8
10010cfc:	8010      	strh	r0, [r2, #0]
10010cfe:	7808      	ldrb	r0, [r1, #0]
10010d00:	7090      	strb	r0, [r2, #2]
10010d02:	788b      	ldrb	r3, [r1, #2]
10010d04:	784c      	ldrb	r4, [r1, #1]
10010d06:	021b      	lsls	r3, r3, #8
10010d08:	4323      	orrs	r3, r4
10010d0a:	8093      	strh	r3, [r2, #4]
10010d0c:	2801      	cmp	r0, #1
10010d0e:	d027      	beq.n	10010d60 <gapc_peer_att_info_ind_handler+0x68>
10010d10:	2800      	cmp	r0, #0
10010d12:	d017      	beq.n	10010d44 <gapc_peer_att_info_ind_handler+0x4c>
10010d14:	2802      	cmp	r0, #2
10010d16:	d12a      	bne.n	10010d6e <gapc_peer_att_info_ind_handler+0x76>
10010d18:	790b      	ldrb	r3, [r1, #4]
10010d1a:	78c8      	ldrb	r0, [r1, #3]
10010d1c:	021b      	lsls	r3, r3, #8
10010d1e:	4303      	orrs	r3, r0
10010d20:	8113      	strh	r3, [r2, #8]
10010d22:	798b      	ldrb	r3, [r1, #6]
10010d24:	7948      	ldrb	r0, [r1, #5]
10010d26:	021b      	lsls	r3, r3, #8
10010d28:	4303      	orrs	r3, r0
10010d2a:	80d3      	strh	r3, [r2, #6]
10010d2c:	7a0b      	ldrb	r3, [r1, #8]
10010d2e:	79c8      	ldrb	r0, [r1, #7]
10010d30:	021b      	lsls	r3, r3, #8
10010d32:	4303      	orrs	r3, r0
10010d34:	8193      	strh	r3, [r2, #12]
10010d36:	7a8b      	ldrb	r3, [r1, #10]
10010d38:	7a49      	ldrb	r1, [r1, #9]
10010d3a:	021b      	lsls	r3, r3, #8
10010d3c:	430b      	orrs	r3, r1
10010d3e:	8153      	strh	r3, [r2, #10]
10010d40:	2306      	movs	r3, #6
10010d42:	e013      	b.n	10010d6c <gapc_peer_att_info_ind_handler+0x74>
10010d44:	1c14      	adds	r4, r2, #0
10010d46:	1c20      	adds	r0, r4, #0
10010d48:	790a      	ldrb	r2, [r1, #4]
10010d4a:	78cb      	ldrb	r3, [r1, #3]
10010d4c:	0212      	lsls	r2, r2, #8
10010d4e:	431a      	orrs	r2, r3
10010d50:	80e2      	strh	r2, [r4, #6]
10010d52:	4b07      	ldr	r3, [pc, #28]	; (10010d70 <gapc_peer_att_info_ind_handler+0x78>)
10010d54:	3008      	adds	r0, #8
10010d56:	3105      	adds	r1, #5
10010d58:	4798      	blx	r3
10010d5a:	2302      	movs	r3, #2
10010d5c:	70a3      	strb	r3, [r4, #2]
10010d5e:	e006      	b.n	10010d6e <gapc_peer_att_info_ind_handler+0x76>
10010d60:	790b      	ldrb	r3, [r1, #4]
10010d62:	78c9      	ldrb	r1, [r1, #3]
10010d64:	021b      	lsls	r3, r3, #8
10010d66:	430b      	orrs	r3, r1
10010d68:	80d3      	strh	r3, [r2, #6]
10010d6a:	2305      	movs	r3, #5
10010d6c:	7093      	strb	r3, [r2, #2]
10010d6e:	bd10      	pop	{r4, pc}
10010d70:	100138e7 	.word	0x100138e7

10010d74 <gapc_con_channel_map_ind_handler>:
10010d74:	b508      	push	{r3, lr}
10010d76:	2300      	movs	r3, #0
10010d78:	0a00      	lsrs	r0, r0, #8
10010d7a:	7013      	strb	r3, [r2, #0]
10010d7c:	8050      	strh	r0, [r2, #2]
10010d7e:	4b02      	ldr	r3, [pc, #8]	; (10010d88 <gapc_con_channel_map_ind_handler+0x14>)
10010d80:	1d10      	adds	r0, r2, #4
10010d82:	2205      	movs	r2, #5
10010d84:	4798      	blx	r3
10010d86:	bd08      	pop	{r3, pc}
10010d88:	100138e7 	.word	0x100138e7

10010d8c <gapc_lecb_connected>:
10010d8c:	7843      	ldrb	r3, [r0, #1]
10010d8e:	7802      	ldrb	r2, [r0, #0]
10010d90:	021b      	lsls	r3, r3, #8
10010d92:	4313      	orrs	r3, r2
10010d94:	800b      	strh	r3, [r1, #0]
10010d96:	78c3      	ldrb	r3, [r0, #3]
10010d98:	7882      	ldrb	r2, [r0, #2]
10010d9a:	021b      	lsls	r3, r3, #8
10010d9c:	4313      	orrs	r3, r2
10010d9e:	804b      	strh	r3, [r1, #2]
10010da0:	7943      	ldrb	r3, [r0, #5]
10010da2:	7902      	ldrb	r2, [r0, #4]
10010da4:	021b      	lsls	r3, r3, #8
10010da6:	4313      	orrs	r3, r2
10010da8:	808b      	strh	r3, [r1, #4]
10010daa:	79c3      	ldrb	r3, [r0, #7]
10010dac:	7982      	ldrb	r2, [r0, #6]
10010dae:	021b      	lsls	r3, r3, #8
10010db0:	4313      	orrs	r3, r2
10010db2:	80cb      	strh	r3, [r1, #6]
10010db4:	2300      	movs	r3, #0
10010db6:	720b      	strb	r3, [r1, #8]
10010db8:	4770      	bx	lr

10010dba <gapc_lecb_disconnected>:
10010dba:	7843      	ldrb	r3, [r0, #1]
10010dbc:	7802      	ldrb	r2, [r0, #0]
10010dbe:	021b      	lsls	r3, r3, #8
10010dc0:	4313      	orrs	r3, r2
10010dc2:	800b      	strh	r3, [r1, #0]
10010dc4:	78c3      	ldrb	r3, [r0, #3]
10010dc6:	7882      	ldrb	r2, [r0, #2]
10010dc8:	021b      	lsls	r3, r3, #8
10010dca:	4313      	orrs	r3, r2
10010dcc:	804b      	strh	r3, [r1, #2]
10010dce:	4770      	bx	lr

10010dd0 <gapc_lecb_connect_req_ind>:
10010dd0:	7843      	ldrb	r3, [r0, #1]
10010dd2:	7802      	ldrb	r2, [r0, #0]
10010dd4:	021b      	lsls	r3, r3, #8
10010dd6:	4313      	orrs	r3, r2
10010dd8:	800b      	strh	r3, [r1, #0]
10010dda:	78c3      	ldrb	r3, [r0, #3]
10010ddc:	7882      	ldrb	r2, [r0, #2]
10010dde:	021b      	lsls	r3, r3, #8
10010de0:	4313      	orrs	r3, r2
10010de2:	804b      	strh	r3, [r1, #2]
10010de4:	7943      	ldrb	r3, [r0, #5]
10010de6:	7902      	ldrb	r2, [r0, #4]
10010de8:	021b      	lsls	r3, r3, #8
10010dea:	4313      	orrs	r3, r2
10010dec:	808b      	strh	r3, [r1, #4]
10010dee:	79c3      	ldrb	r3, [r0, #7]
10010df0:	7982      	ldrb	r2, [r0, #6]
10010df2:	021b      	lsls	r3, r3, #8
10010df4:	4313      	orrs	r3, r2
10010df6:	80cb      	strh	r3, [r1, #6]
10010df8:	4770      	bx	lr

10010dfa <gapc_lecb_add_credit_resp_handler>:
10010dfa:	7843      	ldrb	r3, [r0, #1]
10010dfc:	7802      	ldrb	r2, [r0, #0]
10010dfe:	021b      	lsls	r3, r3, #8
10010e00:	4313      	orrs	r3, r2
10010e02:	800b      	strh	r3, [r1, #0]
10010e04:	78c3      	ldrb	r3, [r0, #3]
10010e06:	7882      	ldrb	r2, [r0, #2]
10010e08:	021b      	lsls	r3, r3, #8
10010e0a:	4313      	orrs	r3, r2
10010e0c:	804b      	strh	r3, [r1, #2]
10010e0e:	7943      	ldrb	r3, [r0, #5]
10010e10:	7902      	ldrb	r2, [r0, #4]
10010e12:	021b      	lsls	r3, r3, #8
10010e14:	4313      	orrs	r3, r2
10010e16:	808b      	strh	r3, [r1, #4]
10010e18:	4770      	bx	lr
	...

10010e1c <gapm_reset_req_handler>:
10010e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010e1e:	466b      	mov	r3, sp
10010e20:	4915      	ldr	r1, [pc, #84]	; (10010e78 <gapm_reset_req_handler+0x5c>)
10010e22:	4816      	ldr	r0, [pc, #88]	; (10010e7c <gapm_reset_req_handler+0x60>)
10010e24:	880c      	ldrh	r4, [r1, #0]
10010e26:	8809      	ldrh	r1, [r1, #0]
10010e28:	1ddd      	adds	r5, r3, #7
10010e2a:	0a09      	lsrs	r1, r1, #8
10010e2c:	2300      	movs	r3, #0
10010e2e:	2202      	movs	r2, #2
10010e30:	7141      	strb	r1, [r0, #5]
10010e32:	26d0      	movs	r6, #208	; 0xd0
10010e34:	2101      	movs	r1, #1
10010e36:	7104      	strb	r4, [r0, #4]
10010e38:	4c11      	ldr	r4, [pc, #68]	; (10010e80 <gapm_reset_req_handler+0x64>)
10010e3a:	702b      	strb	r3, [r5, #0]
10010e3c:	7002      	strb	r2, [r0, #0]
10010e3e:	70c3      	strb	r3, [r0, #3]
10010e40:	320b      	adds	r2, #11
10010e42:	7201      	strb	r1, [r0, #8]
10010e44:	7181      	strb	r1, [r0, #6]
10010e46:	71c3      	strb	r3, [r0, #7]
10010e48:	3108      	adds	r1, #8
10010e4a:	4b0e      	ldr	r3, [pc, #56]	; (10010e84 <gapm_reset_req_handler+0x68>)
10010e4c:	0136      	lsls	r6, r6, #4
10010e4e:	7042      	strb	r2, [r0, #1]
10010e50:	7082      	strb	r2, [r0, #2]
10010e52:	80a2      	strh	r2, [r4, #4]
10010e54:	8026      	strh	r6, [r4, #0]
10010e56:	4798      	blx	r3
10010e58:	1c28      	adds	r0, r5, #0
10010e5a:	4b0b      	ldr	r3, [pc, #44]	; (10010e88 <gapm_reset_req_handler+0x6c>)
10010e5c:	4798      	blx	r3
10010e5e:	782b      	ldrb	r3, [r5, #0]
10010e60:	20e2      	movs	r0, #226	; 0xe2
10010e62:	2b00      	cmp	r3, #0
10010e64:	d106      	bne.n	10010e74 <gapm_reset_req_handler+0x58>
10010e66:	68a3      	ldr	r3, [r4, #8]
10010e68:	20e2      	movs	r0, #226	; 0xe2
10010e6a:	781a      	ldrb	r2, [r3, #0]
10010e6c:	785b      	ldrb	r3, [r3, #1]
10010e6e:	2a01      	cmp	r2, #1
10010e70:	d100      	bne.n	10010e74 <gapm_reset_req_handler+0x58>
10010e72:	1c18      	adds	r0, r3, #0
10010e74:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010e76:	46c0      	nop			; (mov r8, r8)
10010e78:	1001927c 	.word	0x1001927c
10010e7c:	100195ec 	.word	0x100195ec
10010e80:	10019270 	.word	0x10019270
10010e84:	10010245 	.word	0x10010245
10010e88:	100102a9 	.word	0x100102a9

10010e8c <gapm_set_dev_config_cmd_handler>:
10010e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e8e:	b089      	sub	sp, #36	; 0x24
10010e90:	9303      	str	r3, [sp, #12]
10010e92:	ab0e      	add	r3, sp, #56	; 0x38
10010e94:	781b      	ldrb	r3, [r3, #0]
10010e96:	4c37      	ldr	r4, [pc, #220]	; (10010f74 <gapm_set_dev_config_cmd_handler+0xe8>)
10010e98:	9304      	str	r3, [sp, #16]
10010e9a:	ab0f      	add	r3, sp, #60	; 0x3c
10010e9c:	781b      	ldrb	r3, [r3, #0]
10010e9e:	270d      	movs	r7, #13
10010ea0:	9305      	str	r3, [sp, #20]
10010ea2:	ab10      	add	r3, sp, #64	; 0x40
10010ea4:	881b      	ldrh	r3, [r3, #0]
10010ea6:	72a1      	strb	r1, [r4, #10]
10010ea8:	9300      	str	r3, [sp, #0]
10010eaa:	ab11      	add	r3, sp, #68	; 0x44
10010eac:	881b      	ldrh	r3, [r3, #0]
10010eae:	0a09      	lsrs	r1, r1, #8
10010eb0:	9301      	str	r3, [sp, #4]
10010eb2:	ab12      	add	r3, sp, #72	; 0x48
10010eb4:	881b      	ldrh	r3, [r3, #0]
10010eb6:	7260      	strb	r0, [r4, #9]
10010eb8:	9302      	str	r3, [sp, #8]
10010eba:	ab06      	add	r3, sp, #24
10010ebc:	1dde      	adds	r6, r3, #7
10010ebe:	2300      	movs	r3, #0
10010ec0:	7033      	strb	r3, [r6, #0]
10010ec2:	2304      	movs	r3, #4
10010ec4:	7023      	strb	r3, [r4, #0]
10010ec6:	2300      	movs	r3, #0
10010ec8:	70e3      	strb	r3, [r4, #3]
10010eca:	4b2b      	ldr	r3, [pc, #172]	; (10010f78 <gapm_set_dev_config_cmd_handler+0xec>)
10010ecc:	72e1      	strb	r1, [r4, #11]
10010ece:	881d      	ldrh	r5, [r3, #0]
10010ed0:	881b      	ldrh	r3, [r3, #0]
10010ed2:	1c11      	adds	r1, r2, #0
10010ed4:	0a1b      	lsrs	r3, r3, #8
10010ed6:	7163      	strb	r3, [r4, #5]
10010ed8:	2303      	movs	r3, #3
10010eda:	7125      	strb	r5, [r4, #4]
10010edc:	2206      	movs	r2, #6
10010ede:	4d27      	ldr	r5, [pc, #156]	; (10010f7c <gapm_set_dev_config_cmd_handler+0xf0>)
10010ee0:	4827      	ldr	r0, [pc, #156]	; (10010f80 <gapm_set_dev_config_cmd_handler+0xf4>)
10010ee2:	7223      	strb	r3, [r4, #8]
10010ee4:	7067      	strb	r7, [r4, #1]
10010ee6:	70a7      	strb	r7, [r4, #2]
10010ee8:	47a8      	blx	r5
10010eea:	9903      	ldr	r1, [sp, #12]
10010eec:	2210      	movs	r2, #16
10010eee:	4825      	ldr	r0, [pc, #148]	; (10010f84 <gapm_set_dev_config_cmd_handler+0xf8>)
10010ef0:	47a8      	blx	r5
10010ef2:	466a      	mov	r2, sp
10010ef4:	7c12      	ldrb	r2, [r2, #16]
10010ef6:	1ce3      	adds	r3, r4, #3
10010ef8:	77da      	strb	r2, [r3, #31]
10010efa:	466a      	mov	r2, sp
10010efc:	7d12      	ldrb	r2, [r2, #20]
10010efe:	1d23      	adds	r3, r4, #4
10010f00:	77da      	strb	r2, [r3, #31]
10010f02:	466a      	mov	r2, sp
10010f04:	7812      	ldrb	r2, [r2, #0]
10010f06:	1d63      	adds	r3, r4, #5
10010f08:	77da      	strb	r2, [r3, #31]
10010f0a:	9b00      	ldr	r3, [sp, #0]
10010f0c:	1da2      	adds	r2, r4, #6
10010f0e:	0a1b      	lsrs	r3, r3, #8
10010f10:	77d3      	strb	r3, [r2, #31]
10010f12:	466a      	mov	r2, sp
10010f14:	7912      	ldrb	r2, [r2, #4]
10010f16:	1de3      	adds	r3, r4, #7
10010f18:	77da      	strb	r2, [r3, #31]
10010f1a:	1c22      	adds	r2, r4, #0
10010f1c:	9b01      	ldr	r3, [sp, #4]
10010f1e:	3208      	adds	r2, #8
10010f20:	0a1b      	lsrs	r3, r3, #8
10010f22:	77d3      	strb	r3, [r2, #31]
10010f24:	466a      	mov	r2, sp
10010f26:	1c23      	adds	r3, r4, #0
10010f28:	7a12      	ldrb	r2, [r2, #8]
10010f2a:	3328      	adds	r3, #40	; 0x28
10010f2c:	701a      	strb	r2, [r3, #0]
10010f2e:	1c22      	adds	r2, r4, #0
10010f30:	9b02      	ldr	r3, [sp, #8]
10010f32:	3229      	adds	r2, #41	; 0x29
10010f34:	0a1b      	lsrs	r3, r3, #8
10010f36:	7013      	strb	r3, [r2, #0]
10010f38:	23d0      	movs	r3, #208	; 0xd0
10010f3a:	4d13      	ldr	r5, [pc, #76]	; (10010f88 <gapm_set_dev_config_cmd_handler+0xfc>)
10010f3c:	011b      	lsls	r3, r3, #4
10010f3e:	802b      	strh	r3, [r5, #0]
10010f40:	2322      	movs	r3, #34	; 0x22
10010f42:	71a3      	strb	r3, [r4, #6]
10010f44:	2300      	movs	r3, #0
10010f46:	212a      	movs	r1, #42	; 0x2a
10010f48:	71e3      	strb	r3, [r4, #7]
10010f4a:	1c20      	adds	r0, r4, #0
10010f4c:	4b0f      	ldr	r3, [pc, #60]	; (10010f8c <gapm_set_dev_config_cmd_handler+0x100>)
10010f4e:	80af      	strh	r7, [r5, #4]
10010f50:	4798      	blx	r3
10010f52:	1c30      	adds	r0, r6, #0
10010f54:	4b0e      	ldr	r3, [pc, #56]	; (10010f90 <gapm_set_dev_config_cmd_handler+0x104>)
10010f56:	4798      	blx	r3
10010f58:	7833      	ldrb	r3, [r6, #0]
10010f5a:	20e2      	movs	r0, #226	; 0xe2
10010f5c:	2b00      	cmp	r3, #0
10010f5e:	d106      	bne.n	10010f6e <gapm_set_dev_config_cmd_handler+0xe2>
10010f60:	68ab      	ldr	r3, [r5, #8]
10010f62:	20e2      	movs	r0, #226	; 0xe2
10010f64:	781a      	ldrb	r2, [r3, #0]
10010f66:	785b      	ldrb	r3, [r3, #1]
10010f68:	2a03      	cmp	r2, #3
10010f6a:	d100      	bne.n	10010f6e <gapm_set_dev_config_cmd_handler+0xe2>
10010f6c:	1c18      	adds	r0, r3, #0
10010f6e:	b009      	add	sp, #36	; 0x24
10010f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f72:	46c0      	nop			; (mov r8, r8)
10010f74:	100195ec 	.word	0x100195ec
10010f78:	1001927c 	.word	0x1001927c
10010f7c:	100138e7 	.word	0x100138e7
10010f80:	100195f8 	.word	0x100195f8
10010f84:	100195fe 	.word	0x100195fe
10010f88:	10019270 	.word	0x10019270
10010f8c:	10010245 	.word	0x10010245
10010f90:	100102a9 	.word	0x100102a9

10010f94 <gapm_get_dev_config_cmd_handler>:
10010f94:	4684      	mov	ip, r0
10010f96:	4663      	mov	r3, ip
10010f98:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f9a:	b085      	sub	sp, #20
10010f9c:	9100      	str	r1, [sp, #0]
10010f9e:	20cf      	movs	r0, #207	; 0xcf
10010fa0:	2b01      	cmp	r3, #1
10010fa2:	d854      	bhi.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
10010fa4:	2900      	cmp	r1, #0
10010fa6:	d052      	beq.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
10010fa8:	2200      	movs	r2, #0
10010faa:	492a      	ldr	r1, [pc, #168]	; (10011054 <gapm_get_dev_config_cmd_handler+0xc0>)
10010fac:	ab02      	add	r3, sp, #8
10010fae:	880c      	ldrh	r4, [r1, #0]
10010fb0:	8809      	ldrh	r1, [r1, #0]
10010fb2:	1d9f      	adds	r7, r3, #6
10010fb4:	719a      	strb	r2, [r3, #6]
10010fb6:	4b28      	ldr	r3, [pc, #160]	; (10011058 <gapm_get_dev_config_cmd_handler+0xc4>)
10010fb8:	0a09      	lsrs	r1, r1, #8
10010fba:	250d      	movs	r5, #13
10010fbc:	2606      	movs	r6, #6
10010fbe:	7159      	strb	r1, [r3, #5]
10010fc0:	4661      	mov	r1, ip
10010fc2:	701e      	strb	r6, [r3, #0]
10010fc4:	705d      	strb	r5, [r3, #1]
10010fc6:	709d      	strb	r5, [r3, #2]
10010fc8:	70da      	strb	r2, [r3, #3]
10010fca:	711c      	strb	r4, [r3, #4]
10010fcc:	2901      	cmp	r1, #1
10010fce:	d13e      	bne.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
10010fd0:	21d0      	movs	r1, #208	; 0xd0
10010fd2:	4c22      	ldr	r4, [pc, #136]	; (1001105c <gapm_get_dev_config_cmd_handler+0xc8>)
10010fd4:	0109      	lsls	r1, r1, #4
10010fd6:	8061      	strh	r1, [r4, #2]
10010fd8:	4921      	ldr	r1, [pc, #132]	; (10011060 <gapm_get_dev_config_cmd_handler+0xcc>)
10010fda:	71da      	strb	r2, [r3, #7]
10010fdc:	8021      	strh	r1, [r4, #0]
10010fde:	4661      	mov	r1, ip
10010fe0:	721e      	strb	r6, [r3, #8]
10010fe2:	7199      	strb	r1, [r3, #6]
10010fe4:	1c18      	adds	r0, r3, #0
10010fe6:	2109      	movs	r1, #9
10010fe8:	4b1e      	ldr	r3, [pc, #120]	; (10011064 <gapm_get_dev_config_cmd_handler+0xd0>)
10010fea:	80a5      	strh	r5, [r4, #4]
10010fec:	4798      	blx	r3
10010fee:	1c38      	adds	r0, r7, #0
10010ff0:	4b1d      	ldr	r3, [pc, #116]	; (10011068 <gapm_get_dev_config_cmd_handler+0xd4>)
10010ff2:	4798      	blx	r3
10010ff4:	783b      	ldrb	r3, [r7, #0]
10010ff6:	20e2      	movs	r0, #226	; 0xe2
10010ff8:	9301      	str	r3, [sp, #4]
10010ffa:	2b00      	cmp	r3, #0
10010ffc:	d127      	bne.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
10010ffe:	8821      	ldrh	r1, [r4, #0]
10011000:	4a1a      	ldr	r2, [pc, #104]	; (1001106c <gapm_get_dev_config_cmd_handler+0xd8>)
10011002:	68a7      	ldr	r7, [r4, #8]
10011004:	3b01      	subs	r3, #1
10011006:	4291      	cmp	r1, r2
10011008:	d001      	beq.n	1001100e <gapm_get_dev_config_cmd_handler+0x7a>
1001100a:	8023      	strh	r3, [r4, #0]
1001100c:	e01a      	b.n	10011044 <gapm_get_dev_config_cmd_handler+0xb0>
1001100e:	8063      	strh	r3, [r4, #2]
10011010:	9b00      	ldr	r3, [sp, #0]
10011012:	1c39      	adds	r1, r7, #0
10011014:	1c58      	adds	r0, r3, #1
10011016:	1c32      	adds	r2, r6, #0
10011018:	4b15      	ldr	r3, [pc, #84]	; (10011070 <gapm_get_dev_config_cmd_handler+0xdc>)
1001101a:	4798      	blx	r3
1001101c:	79bb      	ldrb	r3, [r7, #6]
1001101e:	9a00      	ldr	r2, [sp, #0]
10011020:	7013      	strb	r3, [r2, #0]
10011022:	23d0      	movs	r3, #208	; 0xd0
10011024:	011b      	lsls	r3, r3, #4
10011026:	8023      	strh	r3, [r4, #0]
10011028:	ab02      	add	r3, sp, #8
1001102a:	80a5      	strh	r5, [r4, #4]
1001102c:	1ddd      	adds	r5, r3, #7
1001102e:	466b      	mov	r3, sp
10011030:	791b      	ldrb	r3, [r3, #4]
10011032:	1c28      	adds	r0, r5, #0
10011034:	702b      	strb	r3, [r5, #0]
10011036:	4b0c      	ldr	r3, [pc, #48]	; (10011068 <gapm_get_dev_config_cmd_handler+0xd4>)
10011038:	4798      	blx	r3
1001103a:	782b      	ldrb	r3, [r5, #0]
1001103c:	20d0      	movs	r0, #208	; 0xd0
1001103e:	2b00      	cmp	r3, #0
10011040:	d105      	bne.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
10011042:	68a7      	ldr	r7, [r4, #8]
10011044:	783b      	ldrb	r3, [r7, #0]
10011046:	7878      	ldrb	r0, [r7, #1]
10011048:	2b06      	cmp	r3, #6
1001104a:	d000      	beq.n	1001104e <gapm_get_dev_config_cmd_handler+0xba>
1001104c:	20e2      	movs	r0, #226	; 0xe2
1001104e:	b005      	add	sp, #20
10011050:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011052:	46c0      	nop			; (mov r8, r8)
10011054:	1001927c 	.word	0x1001927c
10011058:	100195ec 	.word	0x100195ec
1001105c:	10019270 	.word	0x10019270
10011060:	00000d08 	.word	0x00000d08
10011064:	10010245 	.word	0x10010245
10011068:	100102a9 	.word	0x100102a9
1001106c:	0000ffff 	.word	0x0000ffff
10011070:	100138e7 	.word	0x100138e7

10011074 <gapm_cancel_cmd_handler>:
10011074:	b537      	push	{r0, r1, r2, r4, r5, lr}
10011076:	4916      	ldr	r1, [pc, #88]	; (100110d0 <gapm_cancel_cmd_handler+0x5c>)
10011078:	4816      	ldr	r0, [pc, #88]	; (100110d4 <gapm_cancel_cmd_handler+0x60>)
1001107a:	880c      	ldrh	r4, [r1, #0]
1001107c:	8809      	ldrh	r1, [r1, #0]
1001107e:	466b      	mov	r3, sp
10011080:	0a09      	lsrs	r1, r1, #8
10011082:	7141      	strb	r1, [r0, #5]
10011084:	2102      	movs	r1, #2
10011086:	2203      	movs	r2, #3
10011088:	7201      	strb	r1, [r0, #8]
1001108a:	21d0      	movs	r1, #208	; 0xd0
1001108c:	1ddd      	adds	r5, r3, #7
1001108e:	2300      	movs	r3, #0
10011090:	7104      	strb	r4, [r0, #4]
10011092:	4c11      	ldr	r4, [pc, #68]	; (100110d8 <gapm_cancel_cmd_handler+0x64>)
10011094:	7002      	strb	r2, [r0, #0]
10011096:	0109      	lsls	r1, r1, #4
10011098:	320a      	adds	r2, #10
1001109a:	702b      	strb	r3, [r5, #0]
1001109c:	7042      	strb	r2, [r0, #1]
1001109e:	7082      	strb	r2, [r0, #2]
100110a0:	70c3      	strb	r3, [r0, #3]
100110a2:	8021      	strh	r1, [r4, #0]
100110a4:	80a2      	strh	r2, [r4, #4]
100110a6:	71c3      	strb	r3, [r0, #7]
100110a8:	3a0c      	subs	r2, #12
100110aa:	2109      	movs	r1, #9
100110ac:	4b0b      	ldr	r3, [pc, #44]	; (100110dc <gapm_cancel_cmd_handler+0x68>)
100110ae:	7182      	strb	r2, [r0, #6]
100110b0:	4798      	blx	r3
100110b2:	1c28      	adds	r0, r5, #0
100110b4:	4b0a      	ldr	r3, [pc, #40]	; (100110e0 <gapm_cancel_cmd_handler+0x6c>)
100110b6:	4798      	blx	r3
100110b8:	7828      	ldrb	r0, [r5, #0]
100110ba:	2800      	cmp	r0, #0
100110bc:	d001      	beq.n	100110c2 <gapm_cancel_cmd_handler+0x4e>
100110be:	20e2      	movs	r0, #226	; 0xe2
100110c0:	e004      	b.n	100110cc <gapm_cancel_cmd_handler+0x58>
100110c2:	68a3      	ldr	r3, [r4, #8]
100110c4:	785b      	ldrb	r3, [r3, #1]
100110c6:	2b44      	cmp	r3, #68	; 0x44
100110c8:	d000      	beq.n	100110cc <gapm_cancel_cmd_handler+0x58>
100110ca:	1c18      	adds	r0, r3, #0
100110cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100110ce:	46c0      	nop			; (mov r8, r8)
100110d0:	1001927c 	.word	0x1001927c
100110d4:	100195ec 	.word	0x100195ec
100110d8:	10019270 	.word	0x10019270
100110dc:	10010245 	.word	0x10010245
100110e0:	100102a9 	.word	0x100102a9

100110e4 <gapm_dev_bdaddr_ind_handler>:
100110e4:	b538      	push	{r3, r4, r5, lr}
100110e6:	1c05      	adds	r5, r0, #0
100110e8:	1c0c      	adds	r4, r1, #0
100110ea:	1c48      	adds	r0, r1, #1
100110ec:	2206      	movs	r2, #6
100110ee:	1c29      	adds	r1, r5, #0
100110f0:	4b02      	ldr	r3, [pc, #8]	; (100110fc <gapm_dev_bdaddr_ind_handler+0x18>)
100110f2:	4798      	blx	r3
100110f4:	79ab      	ldrb	r3, [r5, #6]
100110f6:	2000      	movs	r0, #0
100110f8:	7023      	strb	r3, [r4, #0]
100110fa:	bd38      	pop	{r3, r4, r5, pc}
100110fc:	100138e7 	.word	0x100138e7

10011100 <gapm_cmp_evt>:
10011100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011102:	7803      	ldrb	r3, [r0, #0]
10011104:	7845      	ldrb	r5, [r0, #1]
10011106:	3b0c      	subs	r3, #12
10011108:	1e18      	subs	r0, r3, #0
1001110a:	280b      	cmp	r0, #11
1001110c:	d900      	bls.n	10011110 <gapm_cmp_evt+0x10>
1001110e:	e08d      	b.n	1001122c <gapm_cmp_evt+0x12c>
10011110:	1c0c      	adds	r4, r1, #0
10011112:	f000 fd23 	bl	10011b5c <__gnu_thumb1_case_uqi>
10011116:	1952      	.short	0x1952
10011118:	068b1919 	.word	0x068b1919
1001111c:	8b595906 	.word	0x8b595906
10011120:	0d8b      	.short	0x0d8b
10011122:	2300      	movs	r3, #0
10011124:	2d45      	cmp	r5, #69	; 0x45
10011126:	d000      	beq.n	1001112a <gapm_cmp_evt+0x2a>
10011128:	1c2b      	adds	r3, r5, #0
1001112a:	7023      	strb	r3, [r4, #0]
1001112c:	2002      	movs	r0, #2
1001112e:	e07e      	b.n	1001122e <gapm_cmp_evt+0x12e>
10011130:	203b      	movs	r0, #59	; 0x3b
10011132:	2d00      	cmp	r5, #0
10011134:	d100      	bne.n	10011138 <gapm_cmp_evt+0x38>
10011136:	e07a      	b.n	1001122e <gapm_cmp_evt+0x12e>
10011138:	700d      	strb	r5, [r1, #0]
1001113a:	1c48      	adds	r0, r1, #1
1001113c:	2210      	movs	r2, #16
1001113e:	2100      	movs	r1, #0
10011140:	4b3b      	ldr	r3, [pc, #236]	; (10011230 <gapm_cmp_evt+0x130>)
10011142:	4798      	blx	r3
10011144:	200f      	movs	r0, #15
10011146:	e072      	b.n	1001122e <gapm_cmp_evt+0x12e>
10011148:	2d00      	cmp	r5, #0
1001114a:	d134      	bne.n	100111b6 <gapm_cmp_evt+0xb6>
1001114c:	4b39      	ldr	r3, [pc, #228]	; (10011234 <gapm_cmp_evt+0x134>)
1001114e:	4798      	blx	r3
10011150:	1e43      	subs	r3, r0, #1
10011152:	b2db      	uxtb	r3, r3
10011154:	1c28      	adds	r0, r5, #0
10011156:	2b06      	cmp	r3, #6
10011158:	d869      	bhi.n	1001122e <gapm_cmp_evt+0x12e>
1001115a:	466b      	mov	r3, sp
1001115c:	4e36      	ldr	r6, [pc, #216]	; (10011238 <gapm_cmp_evt+0x138>)
1001115e:	1dd9      	adds	r1, r3, #7
10011160:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011162:	4b36      	ldr	r3, [pc, #216]	; (1001123c <gapm_cmp_evt+0x13c>)
10011164:	4798      	blx	r3
10011166:	2312      	movs	r3, #18
10011168:	4358      	muls	r0, r3
1001116a:	4935      	ldr	r1, [pc, #212]	; (10011240 <gapm_cmp_evt+0x140>)
1001116c:	1809      	adds	r1, r1, r0
1001116e:	1c0b      	adds	r3, r1, #0
10011170:	894a      	ldrh	r2, [r1, #10]
10011172:	3308      	adds	r3, #8
10011174:	8122      	strh	r2, [r4, #8]
10011176:	784f      	ldrb	r7, [r1, #1]
10011178:	72a5      	strb	r5, [r4, #10]
1001117a:	7027      	strb	r7, [r4, #0]
1001117c:	898a      	ldrh	r2, [r1, #12]
1001117e:	1c60      	adds	r0, r4, #1
10011180:	81a2      	strh	r2, [r4, #12]
10011182:	88db      	ldrh	r3, [r3, #6]
10011184:	3102      	adds	r1, #2
10011186:	81e3      	strh	r3, [r4, #14]
10011188:	89cb      	ldrh	r3, [r1, #14]
1001118a:	2206      	movs	r2, #6
1001118c:	8223      	strh	r3, [r4, #16]
1001118e:	4b2d      	ldr	r3, [pc, #180]	; (10011244 <gapm_cmp_evt+0x144>)
10011190:	4798      	blx	r3
10011192:	2f00      	cmp	r7, #0
10011194:	d00a      	beq.n	100111ac <gapm_cmp_evt+0xac>
10011196:	79a3      	ldrb	r3, [r4, #6]
10011198:	223f      	movs	r2, #63	; 0x3f
1001119a:	1c19      	adds	r1, r3, #0
1001119c:	3501      	adds	r5, #1
1001119e:	4391      	bics	r1, r2
100111a0:	29c0      	cmp	r1, #192	; 0xc0
100111a2:	d003      	beq.n	100111ac <gapm_cmp_evt+0xac>
100111a4:	065b      	lsls	r3, r3, #25
100111a6:	0fdb      	lsrs	r3, r3, #31
100111a8:	3502      	adds	r5, #2
100111aa:	1aed      	subs	r5, r5, r3
100111ac:	2301      	movs	r3, #1
100111ae:	425b      	negs	r3, r3
100111b0:	7025      	strb	r5, [r4, #0]
100111b2:	85b3      	strh	r3, [r6, #44]	; 0x2c
100111b4:	e038      	b.n	10011228 <gapm_cmp_evt+0x128>
100111b6:	700d      	strb	r5, [r1, #0]
100111b8:	e004      	b.n	100111c4 <gapm_cmp_evt+0xc4>
100111ba:	2300      	movs	r3, #0
100111bc:	2d45      	cmp	r5, #69	; 0x45
100111be:	d000      	beq.n	100111c2 <gapm_cmp_evt+0xc2>
100111c0:	1c2b      	adds	r3, r5, #0
100111c2:	7023      	strb	r3, [r4, #0]
100111c4:	2003      	movs	r0, #3
100111c6:	e032      	b.n	1001122e <gapm_cmp_evt+0x12e>
100111c8:	4e1b      	ldr	r6, [pc, #108]	; (10011238 <gapm_cmp_evt+0x138>)
100111ca:	2100      	movs	r1, #0
100111cc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100111ce:	4b1b      	ldr	r3, [pc, #108]	; (1001123c <gapm_cmp_evt+0x13c>)
100111d0:	4798      	blx	r3
100111d2:	2807      	cmp	r0, #7
100111d4:	d818      	bhi.n	10011208 <gapm_cmp_evt+0x108>
100111d6:	2301      	movs	r3, #1
100111d8:	425b      	negs	r3, r3
100111da:	85b3      	strh	r3, [r6, #44]	; 0x2c
100111dc:	3313      	adds	r3, #19
100111de:	4358      	muls	r0, r3
100111e0:	4917      	ldr	r1, [pc, #92]	; (10011240 <gapm_cmp_evt+0x140>)
100111e2:	1809      	adds	r1, r1, r0
100111e4:	1c0b      	adds	r3, r1, #0
100111e6:	894a      	ldrh	r2, [r1, #10]
100111e8:	3308      	adds	r3, #8
100111ea:	8122      	strh	r2, [r4, #8]
100111ec:	784a      	ldrb	r2, [r1, #1]
100111ee:	72a5      	strb	r5, [r4, #10]
100111f0:	7022      	strb	r2, [r4, #0]
100111f2:	898a      	ldrh	r2, [r1, #12]
100111f4:	1c60      	adds	r0, r4, #1
100111f6:	81a2      	strh	r2, [r4, #12]
100111f8:	88db      	ldrh	r3, [r3, #6]
100111fa:	3102      	adds	r1, #2
100111fc:	81e3      	strh	r3, [r4, #14]
100111fe:	89cb      	ldrh	r3, [r1, #14]
10011200:	2206      	movs	r2, #6
10011202:	8223      	strh	r3, [r4, #16]
10011204:	4b0f      	ldr	r3, [pc, #60]	; (10011244 <gapm_cmp_evt+0x144>)
10011206:	4798      	blx	r3
10011208:	2200      	movs	r2, #0
1001120a:	7823      	ldrb	r3, [r4, #0]
1001120c:	4293      	cmp	r3, r2
1001120e:	d00a      	beq.n	10011226 <gapm_cmp_evt+0x126>
10011210:	79a3      	ldrb	r3, [r4, #6]
10011212:	323f      	adds	r2, #63	; 0x3f
10011214:	1c19      	adds	r1, r3, #0
10011216:	4391      	bics	r1, r2
10011218:	3a3e      	subs	r2, #62	; 0x3e
1001121a:	29c0      	cmp	r1, #192	; 0xc0
1001121c:	d003      	beq.n	10011226 <gapm_cmp_evt+0x126>
1001121e:	065b      	lsls	r3, r3, #25
10011220:	0fdb      	lsrs	r3, r3, #31
10011222:	3202      	adds	r2, #2
10011224:	1ad2      	subs	r2, r2, r3
10011226:	7022      	strb	r2, [r4, #0]
10011228:	2005      	movs	r0, #5
1001122a:	e000      	b.n	1001122e <gapm_cmp_evt+0x12e>
1001122c:	2000      	movs	r0, #0
1001122e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011230:	100138f9 	.word	0x100138f9
10011234:	10010451 	.word	0x10010451
10011238:	1001930e 	.word	0x1001930e
1001123c:	10010415 	.word	0x10010415
10011240:	1001927e 	.word	0x1001927e
10011244:	100138e7 	.word	0x100138e7

10011248 <gapm_start_adv_cmd_handler>:
10011248:	b5f0      	push	{r4, r5, r6, r7, lr}
1001124a:	b089      	sub	sp, #36	; 0x24
1001124c:	9303      	str	r3, [sp, #12]
1001124e:	ab0e      	add	r3, sp, #56	; 0x38
10011250:	9102      	str	r1, [sp, #8]
10011252:	cb02      	ldmia	r3!, {r1}
10011254:	aa08      	add	r2, sp, #32
10011256:	881b      	ldrh	r3, [r3, #0]
10011258:	4e3c      	ldr	r6, [pc, #240]	; (1001134c <gapm_start_adv_cmd_handler+0x104>)
1001125a:	9300      	str	r3, [sp, #0]
1001125c:	ab10      	add	r3, sp, #64	; 0x40
1001125e:	881b      	ldrh	r3, [r3, #0]
10011260:	240d      	movs	r4, #13
10011262:	469c      	mov	ip, r3
10011264:	ab11      	add	r3, sp, #68	; 0x44
10011266:	781b      	ldrb	r3, [r3, #0]
10011268:	9304      	str	r3, [sp, #16]
1001126a:	ab12      	add	r3, sp, #72	; 0x48
1001126c:	781b      	ldrb	r3, [r3, #0]
1001126e:	9305      	str	r3, [sp, #20]
10011270:	ab13      	add	r3, sp, #76	; 0x4c
10011272:	781b      	ldrb	r3, [r3, #0]
10011274:	9306      	str	r3, [sp, #24]
10011276:	ab14      	add	r3, sp, #80	; 0x50
10011278:	781b      	ldrb	r3, [r3, #0]
1001127a:	9301      	str	r3, [sp, #4]
1001127c:	2319      	movs	r3, #25
1001127e:	189b      	adds	r3, r3, r2
10011280:	7fdd      	ldrb	r5, [r3, #31]
10011282:	ab18      	add	r3, sp, #96	; 0x60
10011284:	881f      	ldrh	r7, [r3, #0]
10011286:	ab19      	add	r3, sp, #100	; 0x64
10011288:	781b      	ldrb	r3, [r3, #0]
1001128a:	8832      	ldrh	r2, [r6, #0]
1001128c:	9307      	str	r3, [sp, #28]
1001128e:	4b30      	ldr	r3, [pc, #192]	; (10011350 <gapm_start_adv_cmd_handler+0x108>)
10011290:	8836      	ldrh	r6, [r6, #0]
10011292:	711a      	strb	r2, [r3, #4]
10011294:	466a      	mov	r2, sp
10011296:	7a12      	ldrb	r2, [r2, #8]
10011298:	701c      	strb	r4, [r3, #0]
1001129a:	705c      	strb	r4, [r3, #1]
1001129c:	709c      	strb	r4, [r3, #2]
1001129e:	725a      	strb	r2, [r3, #9]
100112a0:	2400      	movs	r4, #0
100112a2:	466a      	mov	r2, sp
100112a4:	0a36      	lsrs	r6, r6, #8
100112a6:	70dc      	strb	r4, [r3, #3]
100112a8:	7218      	strb	r0, [r3, #8]
100112aa:	729c      	strb	r4, [r3, #10]
100112ac:	715e      	strb	r6, [r3, #5]
100112ae:	72dc      	strb	r4, [r3, #11]
100112b0:	7812      	ldrb	r2, [r2, #0]
100112b2:	380e      	subs	r0, #14
100112b4:	731a      	strb	r2, [r3, #12]
100112b6:	9a00      	ldr	r2, [sp, #0]
100112b8:	0a14      	lsrs	r4, r2, #8
100112ba:	4662      	mov	r2, ip
100112bc:	739a      	strb	r2, [r3, #14]
100112be:	4662      	mov	r2, ip
100112c0:	735c      	strb	r4, [r3, #13]
100112c2:	0a14      	lsrs	r4, r2, #8
100112c4:	466a      	mov	r2, sp
100112c6:	7c12      	ldrb	r2, [r2, #16]
100112c8:	73dc      	strb	r4, [r3, #15]
100112ca:	741a      	strb	r2, [r3, #16]
100112cc:	1c1c      	adds	r4, r3, #0
100112ce:	2801      	cmp	r0, #1
100112d0:	d809      	bhi.n	100112e6 <gapm_start_adv_cmd_handler+0x9e>
100112d2:	2900      	cmp	r1, #0
100112d4:	d003      	beq.n	100112de <gapm_start_adv_cmd_handler+0x96>
100112d6:	481f      	ldr	r0, [pc, #124]	; (10011354 <gapm_start_adv_cmd_handler+0x10c>)
100112d8:	2206      	movs	r2, #6
100112da:	4b1f      	ldr	r3, [pc, #124]	; (10011358 <gapm_start_adv_cmd_handler+0x110>)
100112dc:	4798      	blx	r3
100112de:	466b      	mov	r3, sp
100112e0:	7b1b      	ldrb	r3, [r3, #12]
100112e2:	75e3      	strb	r3, [r4, #23]
100112e4:	e014      	b.n	10011310 <gapm_start_adv_cmd_handler+0xc8>
100112e6:	466b      	mov	r3, sp
100112e8:	7d1b      	ldrb	r3, [r3, #20]
100112ea:	9915      	ldr	r1, [sp, #84]	; 0x54
100112ec:	7463      	strb	r3, [r4, #17]
100112ee:	466b      	mov	r3, sp
100112f0:	7e1b      	ldrb	r3, [r3, #24]
100112f2:	9a01      	ldr	r2, [sp, #4]
100112f4:	74a3      	strb	r3, [r4, #18]
100112f6:	466b      	mov	r3, sp
100112f8:	791b      	ldrb	r3, [r3, #4]
100112fa:	4818      	ldr	r0, [pc, #96]	; (1001135c <gapm_start_adv_cmd_handler+0x114>)
100112fc:	4e16      	ldr	r6, [pc, #88]	; (10011358 <gapm_start_adv_cmd_handler+0x110>)
100112fe:	74e3      	strb	r3, [r4, #19]
10011300:	47b0      	blx	r6
10011302:	1c23      	adds	r3, r4, #0
10011304:	4816      	ldr	r0, [pc, #88]	; (10011360 <gapm_start_adv_cmd_handler+0x118>)
10011306:	3330      	adds	r3, #48	; 0x30
10011308:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001130a:	1c2a      	adds	r2, r5, #0
1001130c:	701d      	strb	r5, [r3, #0]
1001130e:	47b0      	blx	r6
10011310:	1c22      	adds	r2, r4, #0
10011312:	23a5      	movs	r3, #165	; 0xa5
10011314:	3250      	adds	r2, #80	; 0x50
10011316:	7013      	strb	r3, [r2, #0]
10011318:	1c22      	adds	r2, r4, #0
1001131a:	3251      	adds	r2, #81	; 0x51
1001131c:	7013      	strb	r3, [r2, #0]
1001131e:	1c23      	adds	r3, r4, #0
10011320:	1c22      	adds	r2, r4, #0
10011322:	3352      	adds	r3, #82	; 0x52
10011324:	701f      	strb	r7, [r3, #0]
10011326:	3253      	adds	r2, #83	; 0x53
10011328:	0a3b      	lsrs	r3, r7, #8
1001132a:	7013      	strb	r3, [r2, #0]
1001132c:	466a      	mov	r2, sp
1001132e:	1c23      	adds	r3, r4, #0
10011330:	7f12      	ldrb	r2, [r2, #28]
10011332:	3354      	adds	r3, #84	; 0x54
10011334:	701a      	strb	r2, [r3, #0]
10011336:	234d      	movs	r3, #77	; 0x4d
10011338:	2500      	movs	r5, #0
1001133a:	71a3      	strb	r3, [r4, #6]
1001133c:	1c20      	adds	r0, r4, #0
1001133e:	2155      	movs	r1, #85	; 0x55
10011340:	4b08      	ldr	r3, [pc, #32]	; (10011364 <gapm_start_adv_cmd_handler+0x11c>)
10011342:	71e5      	strb	r5, [r4, #7]
10011344:	4798      	blx	r3
10011346:	1c28      	adds	r0, r5, #0
10011348:	b009      	add	sp, #36	; 0x24
1001134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001134c:	1001927c 	.word	0x1001927c
10011350:	100195ec 	.word	0x100195ec
10011354:	100195fd 	.word	0x100195fd
10011358:	100138e7 	.word	0x100138e7
1001135c:	10019600 	.word	0x10019600
10011360:	1001961d 	.word	0x1001961d
10011364:	10010245 	.word	0x10010245

10011368 <get_gap_local_addr_type>:
10011368:	4b04      	ldr	r3, [pc, #16]	; (1001137c <get_gap_local_addr_type+0x14>)
1001136a:	2001      	movs	r0, #1
1001136c:	791b      	ldrb	r3, [r3, #4]
1001136e:	2b02      	cmp	r3, #2
10011370:	d003      	beq.n	1001137a <get_gap_local_addr_type+0x12>
10011372:	3b03      	subs	r3, #3
10011374:	4258      	negs	r0, r3
10011376:	4158      	adcs	r0, r3
10011378:	0040      	lsls	r0, r0, #1
1001137a:	4770      	bx	lr
1001137c:	1001930e 	.word	0x1001930e

10011380 <gapm_adv_report_evt_handler>:
10011380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011382:	7843      	ldrb	r3, [r0, #1]
10011384:	1c05      	adds	r5, r0, #0
10011386:	9301      	str	r3, [sp, #4]
10011388:	466b      	mov	r3, sp
1001138a:	1c0c      	adds	r4, r1, #0
1001138c:	791b      	ldrb	r3, [r3, #4]
1001138e:	7806      	ldrb	r6, [r0, #0]
10011390:	2206      	movs	r2, #6
10011392:	704b      	strb	r3, [r1, #1]
10011394:	1c88      	adds	r0, r1, #2
10011396:	4f1b      	ldr	r7, [pc, #108]	; (10011404 <gapm_adv_report_evt_handler+0x84>)
10011398:	1ca9      	adds	r1, r5, #2
1001139a:	47b8      	blx	r7
1001139c:	1c20      	adds	r0, r4, #0
1001139e:	1c29      	adds	r1, r5, #0
100113a0:	7a2a      	ldrb	r2, [r5, #8]
100113a2:	3008      	adds	r0, #8
100113a4:	77c2      	strb	r2, [r0, #31]
100113a6:	3109      	adds	r1, #9
100113a8:	3528      	adds	r5, #40	; 0x28
100113aa:	47b8      	blx	r7
100113ac:	782b      	ldrb	r3, [r5, #0]
100113ae:	b25a      	sxtb	r2, r3
100113b0:	2a00      	cmp	r2, #0
100113b2:	da01      	bge.n	100113b8 <gapm_adv_report_evt_handler+0x38>
100113b4:	3301      	adds	r3, #1
100113b6:	b2db      	uxtb	r3, r3
100113b8:	1c22      	adds	r2, r4, #0
100113ba:	3228      	adds	r2, #40	; 0x28
100113bc:	7013      	strb	r3, [r2, #0]
100113be:	2200      	movs	r2, #0
100113c0:	9b01      	ldr	r3, [sp, #4]
100113c2:	4293      	cmp	r3, r2
100113c4:	d00a      	beq.n	100113dc <gapm_adv_report_evt_handler+0x5c>
100113c6:	79e3      	ldrb	r3, [r4, #7]
100113c8:	323f      	adds	r2, #63	; 0x3f
100113ca:	1c19      	adds	r1, r3, #0
100113cc:	4391      	bics	r1, r2
100113ce:	3a3e      	subs	r2, #62	; 0x3e
100113d0:	29c0      	cmp	r1, #192	; 0xc0
100113d2:	d003      	beq.n	100113dc <gapm_adv_report_evt_handler+0x5c>
100113d4:	065b      	lsls	r3, r3, #25
100113d6:	0fdb      	lsrs	r3, r3, #31
100113d8:	3202      	adds	r2, #2
100113da:	1ad2      	subs	r2, r2, r3
100113dc:	7062      	strb	r2, [r4, #1]
100113de:	2e04      	cmp	r6, #4
100113e0:	d80f      	bhi.n	10011402 <gapm_adv_report_evt_handler+0x82>
100113e2:	1c30      	adds	r0, r6, #0
100113e4:	f000 fbba 	bl	10011b5c <__gnu_thumb1_case_uqi>
100113e8:	09070503 	.word	0x09070503
100113ec:	0b          	.byte	0x0b
100113ed:	00          	.byte	0x00
100113ee:	2300      	movs	r3, #0
100113f0:	e006      	b.n	10011400 <gapm_adv_report_evt_handler+0x80>
100113f2:	2301      	movs	r3, #1
100113f4:	e004      	b.n	10011400 <gapm_adv_report_evt_handler+0x80>
100113f6:	2302      	movs	r3, #2
100113f8:	e002      	b.n	10011400 <gapm_adv_report_evt_handler+0x80>
100113fa:	2303      	movs	r3, #3
100113fc:	e000      	b.n	10011400 <gapm_adv_report_evt_handler+0x80>
100113fe:	2305      	movs	r3, #5
10011400:	7023      	strb	r3, [r4, #0]
10011402:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011404:	100138e7 	.word	0x100138e7

10011408 <gapm_resolv_addr_cmd_handler>:
10011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001140a:	2314      	movs	r3, #20
1001140c:	4c12      	ldr	r4, [pc, #72]	; (10011458 <gapm_resolv_addr_cmd_handler+0x50>)
1001140e:	1c17      	adds	r7, r2, #0
10011410:	7023      	strb	r3, [r4, #0]
10011412:	3b07      	subs	r3, #7
10011414:	7063      	strb	r3, [r4, #1]
10011416:	70a3      	strb	r3, [r4, #2]
10011418:	2300      	movs	r3, #0
1001141a:	70e3      	strb	r3, [r4, #3]
1001141c:	4b0f      	ldr	r3, [pc, #60]	; (1001145c <gapm_resolv_addr_cmd_handler+0x54>)
1001141e:	1c05      	adds	r5, r0, #0
10011420:	881a      	ldrh	r2, [r3, #0]
10011422:	881b      	ldrh	r3, [r3, #0]
10011424:	4e0e      	ldr	r6, [pc, #56]	; (10011460 <gapm_resolv_addr_cmd_handler+0x58>)
10011426:	0a1b      	lsrs	r3, r3, #8
10011428:	7163      	strb	r3, [r4, #5]
1001142a:	2317      	movs	r3, #23
1001142c:	012d      	lsls	r5, r5, #4
1001142e:	7122      	strb	r2, [r4, #4]
10011430:	7260      	strb	r0, [r4, #9]
10011432:	2206      	movs	r2, #6
10011434:	480b      	ldr	r0, [pc, #44]	; (10011464 <gapm_resolv_addr_cmd_handler+0x5c>)
10011436:	7223      	strb	r3, [r4, #8]
10011438:	47b0      	blx	r6
1001143a:	1c39      	adds	r1, r7, #0
1001143c:	1c2a      	adds	r2, r5, #0
1001143e:	480a      	ldr	r0, [pc, #40]	; (10011468 <gapm_resolv_addr_cmd_handler+0x60>)
10011440:	47b0      	blx	r6
10011442:	1c29      	adds	r1, r5, #0
10011444:	3110      	adds	r1, #16
10011446:	1c0b      	adds	r3, r1, #0
10011448:	3b08      	subs	r3, #8
1001144a:	71a3      	strb	r3, [r4, #6]
1001144c:	121b      	asrs	r3, r3, #8
1001144e:	71e3      	strb	r3, [r4, #7]
10011450:	1c20      	adds	r0, r4, #0
10011452:	4b06      	ldr	r3, [pc, #24]	; (1001146c <gapm_resolv_addr_cmd_handler+0x64>)
10011454:	4798      	blx	r3
10011456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011458:	100195ec 	.word	0x100195ec
1001145c:	1001927c 	.word	0x1001927c
10011460:	100138e7 	.word	0x100138e7
10011464:	100195f6 	.word	0x100195f6
10011468:	100195fc 	.word	0x100195fc
1001146c:	10010245 	.word	0x10010245

10011470 <gapm_addr_solved_ind_handler>:
10011470:	b570      	push	{r4, r5, r6, lr}
10011472:	1c04      	adds	r4, r0, #0
10011474:	1c08      	adds	r0, r1, #0
10011476:	1c0d      	adds	r5, r1, #0
10011478:	4e05      	ldr	r6, [pc, #20]	; (10011490 <gapm_addr_solved_ind_handler+0x20>)
1001147a:	1c21      	adds	r1, r4, #0
1001147c:	2206      	movs	r2, #6
1001147e:	3011      	adds	r0, #17
10011480:	47b0      	blx	r6
10011482:	1c68      	adds	r0, r5, #1
10011484:	1da1      	adds	r1, r4, #6
10011486:	2210      	movs	r2, #16
10011488:	47b0      	blx	r6
1001148a:	2300      	movs	r3, #0
1001148c:	702b      	strb	r3, [r5, #0]
1001148e:	bd70      	pop	{r4, r5, r6, pc}
10011490:	100138e7 	.word	0x100138e7

10011494 <gapm_profile_added_ind_handler>:
10011494:	b510      	push	{r4, lr}
10011496:	7843      	ldrb	r3, [r0, #1]
10011498:	7902      	ldrb	r2, [r0, #4]
1001149a:	7944      	ldrb	r4, [r0, #5]
1001149c:	7800      	ldrb	r0, [r0, #0]
1001149e:	021b      	lsls	r3, r3, #8
100114a0:	4303      	orrs	r3, r0
100114a2:	2b1b      	cmp	r3, #27
100114a4:	d104      	bne.n	100114b0 <gapm_profile_added_ind_handler+0x1c>
100114a6:	2300      	movs	r3, #0
100114a8:	700b      	strb	r3, [r1, #0]
100114aa:	0223      	lsls	r3, r4, #8
100114ac:	4313      	orrs	r3, r2
100114ae:	804b      	strh	r3, [r1, #2]
100114b0:	203b      	movs	r0, #59	; 0x3b
100114b2:	bd10      	pop	{r4, pc}

100114b4 <gattc_read_req_ind_parser>:
100114b4:	7843      	ldrb	r3, [r0, #1]
100114b6:	7802      	ldrb	r2, [r0, #0]
100114b8:	021b      	lsls	r3, r3, #8
100114ba:	4313      	orrs	r3, r2
100114bc:	804b      	strh	r3, [r1, #2]
100114be:	4770      	bx	lr

100114c0 <gattc_write_req_ind_parser>:
100114c0:	b508      	push	{r3, lr}
100114c2:	1c13      	adds	r3, r2, #0
100114c4:	0a00      	lsrs	r0, r0, #8
100114c6:	8010      	strh	r0, [r2, #0]
100114c8:	784a      	ldrb	r2, [r1, #1]
100114ca:	7808      	ldrb	r0, [r1, #0]
100114cc:	0212      	lsls	r2, r2, #8
100114ce:	4302      	orrs	r2, r0
100114d0:	805a      	strh	r2, [r3, #2]
100114d2:	78ca      	ldrb	r2, [r1, #3]
100114d4:	7888      	ldrb	r0, [r1, #2]
100114d6:	0212      	lsls	r2, r2, #8
100114d8:	4302      	orrs	r2, r0
100114da:	809a      	strh	r2, [r3, #4]
100114dc:	794a      	ldrb	r2, [r1, #5]
100114de:	7908      	ldrb	r0, [r1, #4]
100114e0:	0212      	lsls	r2, r2, #8
100114e2:	4302      	orrs	r2, r0
100114e4:	80da      	strh	r2, [r3, #6]
100114e6:	3308      	adds	r3, #8
100114e8:	1c18      	adds	r0, r3, #0
100114ea:	3106      	adds	r1, #6
100114ec:	4b01      	ldr	r3, [pc, #4]	; (100114f4 <gattc_write_req_ind_parser+0x34>)
100114ee:	4798      	blx	r3
100114f0:	bd08      	pop	{r3, pc}
100114f2:	46c0      	nop			; (mov r8, r8)
100114f4:	100138e7 	.word	0x100138e7

100114f8 <gattc_att_info_req_parser>:
100114f8:	7843      	ldrb	r3, [r0, #1]
100114fa:	7802      	ldrb	r2, [r0, #0]
100114fc:	021b      	lsls	r3, r3, #8
100114fe:	4313      	orrs	r3, r2
10011500:	800b      	strh	r3, [r1, #0]
10011502:	4770      	bx	lr

10011504 <gattc_read_cfm>:
10011504:	b538      	push	{r3, r4, r5, lr}
10011506:	2514      	movs	r5, #20
10011508:	1c1c      	adds	r4, r3, #0
1001150a:	4b14      	ldr	r3, [pc, #80]	; (1001155c <gattc_read_cfm+0x58>)
1001150c:	70d9      	strb	r1, [r3, #3]
1001150e:	4914      	ldr	r1, [pc, #80]	; (10011560 <gattc_read_cfm+0x5c>)
10011510:	701d      	strb	r5, [r3, #0]
10011512:	3d08      	subs	r5, #8
10011514:	705d      	strb	r5, [r3, #1]
10011516:	709d      	strb	r5, [r3, #2]
10011518:	880d      	ldrh	r5, [r1, #0]
1001151a:	8809      	ldrh	r1, [r1, #0]
1001151c:	7218      	strb	r0, [r3, #8]
1001151e:	0a09      	lsrs	r1, r1, #8
10011520:	7159      	strb	r1, [r3, #5]
10011522:	0a00      	lsrs	r0, r0, #8
10011524:	0a21      	lsrs	r1, r4, #8
10011526:	711d      	strb	r5, [r3, #4]
10011528:	7258      	strb	r0, [r3, #9]
1001152a:	729c      	strb	r4, [r3, #10]
1001152c:	72d9      	strb	r1, [r3, #11]
1001152e:	731a      	strb	r2, [r3, #12]
10011530:	1c1d      	adds	r5, r3, #0
10011532:	2c00      	cmp	r4, #0
10011534:	d007      	beq.n	10011546 <gattc_read_cfm+0x42>
10011536:	9904      	ldr	r1, [sp, #16]
10011538:	1c22      	adds	r2, r4, #0
1001153a:	480a      	ldr	r0, [pc, #40]	; (10011564 <gattc_read_cfm+0x60>)
1001153c:	4b0a      	ldr	r3, [pc, #40]	; (10011568 <gattc_read_cfm+0x64>)
1001153e:	340d      	adds	r4, #13
10011540:	4798      	blx	r3
10011542:	b2a1      	uxth	r1, r4
10011544:	e001      	b.n	1001154a <gattc_read_cfm+0x46>
10011546:	210e      	movs	r1, #14
10011548:	735c      	strb	r4, [r3, #13]
1001154a:	1c0b      	adds	r3, r1, #0
1001154c:	3b08      	subs	r3, #8
1001154e:	71ab      	strb	r3, [r5, #6]
10011550:	121b      	asrs	r3, r3, #8
10011552:	71eb      	strb	r3, [r5, #7]
10011554:	1c28      	adds	r0, r5, #0
10011556:	4b05      	ldr	r3, [pc, #20]	; (1001156c <gattc_read_cfm+0x68>)
10011558:	4798      	blx	r3
1001155a:	bd38      	pop	{r3, r4, r5, pc}
1001155c:	100195ec 	.word	0x100195ec
10011560:	1001927c 	.word	0x1001927c
10011564:	100195f9 	.word	0x100195f9
10011568:	100138e7 	.word	0x100138e7
1001156c:	10010245 	.word	0x10010245

10011570 <gattc_write_cfm>:
10011570:	4b0d      	ldr	r3, [pc, #52]	; (100115a8 <gattc_write_cfm+0x38>)
10011572:	b510      	push	{r4, lr}
10011574:	729a      	strb	r2, [r3, #10]
10011576:	2203      	movs	r2, #3
10011578:	2416      	movs	r4, #22
1001157a:	719a      	strb	r2, [r3, #6]
1001157c:	2200      	movs	r2, #0
1001157e:	70d9      	strb	r1, [r3, #3]
10011580:	490a      	ldr	r1, [pc, #40]	; (100115ac <gattc_write_cfm+0x3c>)
10011582:	701c      	strb	r4, [r3, #0]
10011584:	3c0a      	subs	r4, #10
10011586:	705c      	strb	r4, [r3, #1]
10011588:	709c      	strb	r4, [r3, #2]
1001158a:	880c      	ldrh	r4, [r1, #0]
1001158c:	8809      	ldrh	r1, [r1, #0]
1001158e:	7218      	strb	r0, [r3, #8]
10011590:	0a09      	lsrs	r1, r1, #8
10011592:	0a00      	lsrs	r0, r0, #8
10011594:	711c      	strb	r4, [r3, #4]
10011596:	7159      	strb	r1, [r3, #5]
10011598:	7258      	strb	r0, [r3, #9]
1001159a:	71da      	strb	r2, [r3, #7]
1001159c:	1c18      	adds	r0, r3, #0
1001159e:	210b      	movs	r1, #11
100115a0:	4b03      	ldr	r3, [pc, #12]	; (100115b0 <gattc_write_cfm+0x40>)
100115a2:	4798      	blx	r3
100115a4:	bd10      	pop	{r4, pc}
100115a6:	46c0      	nop			; (mov r8, r8)
100115a8:	100195ec 	.word	0x100195ec
100115ac:	1001927c 	.word	0x1001927c
100115b0:	10010245 	.word	0x10010245

100115b4 <gattc_att_info_cfm>:
100115b4:	b538      	push	{r3, r4, r5, lr}
100115b6:	4c0e      	ldr	r4, [pc, #56]	; (100115f0 <gattc_att_info_cfm+0x3c>)
100115b8:	2518      	movs	r5, #24
100115ba:	7323      	strb	r3, [r4, #12]
100115bc:	2305      	movs	r3, #5
100115be:	71a3      	strb	r3, [r4, #6]
100115c0:	2300      	movs	r3, #0
100115c2:	70e1      	strb	r1, [r4, #3]
100115c4:	490b      	ldr	r1, [pc, #44]	; (100115f4 <gattc_att_info_cfm+0x40>)
100115c6:	7025      	strb	r5, [r4, #0]
100115c8:	3d0c      	subs	r5, #12
100115ca:	7065      	strb	r5, [r4, #1]
100115cc:	70a5      	strb	r5, [r4, #2]
100115ce:	880d      	ldrh	r5, [r1, #0]
100115d0:	8809      	ldrh	r1, [r1, #0]
100115d2:	7220      	strb	r0, [r4, #8]
100115d4:	0a09      	lsrs	r1, r1, #8
100115d6:	0a00      	lsrs	r0, r0, #8
100115d8:	7161      	strb	r1, [r4, #5]
100115da:	7260      	strb	r0, [r4, #9]
100115dc:	72a2      	strb	r2, [r4, #10]
100115de:	71e3      	strb	r3, [r4, #7]
100115e0:	0a12      	lsrs	r2, r2, #8
100115e2:	1c20      	adds	r0, r4, #0
100115e4:	210d      	movs	r1, #13
100115e6:	4b04      	ldr	r3, [pc, #16]	; (100115f8 <gattc_att_info_cfm+0x44>)
100115e8:	7125      	strb	r5, [r4, #4]
100115ea:	72e2      	strb	r2, [r4, #11]
100115ec:	4798      	blx	r3
100115ee:	bd38      	pop	{r3, r4, r5, pc}
100115f0:	100195ec 	.word	0x100195ec
100115f4:	1001927c 	.word	0x1001927c
100115f8:	10010245 	.word	0x10010245

100115fc <gattc_event_cfm_handler>:
100115fc:	220e      	movs	r2, #14
100115fe:	b508      	push	{r3, lr}
10011600:	4b0b      	ldr	r3, [pc, #44]	; (10011630 <gattc_event_cfm_handler+0x34>)
10011602:	701a      	strb	r2, [r3, #0]
10011604:	3a02      	subs	r2, #2
10011606:	705a      	strb	r2, [r3, #1]
10011608:	709a      	strb	r2, [r3, #2]
1001160a:	4a0a      	ldr	r2, [pc, #40]	; (10011634 <gattc_event_cfm_handler+0x38>)
1001160c:	70d8      	strb	r0, [r3, #3]
1001160e:	8810      	ldrh	r0, [r2, #0]
10011610:	8812      	ldrh	r2, [r2, #0]
10011612:	7219      	strb	r1, [r3, #8]
10011614:	0a12      	lsrs	r2, r2, #8
10011616:	715a      	strb	r2, [r3, #5]
10011618:	2202      	movs	r2, #2
1001161a:	719a      	strb	r2, [r3, #6]
1001161c:	2200      	movs	r2, #0
1001161e:	0a09      	lsrs	r1, r1, #8
10011620:	7118      	strb	r0, [r3, #4]
10011622:	7259      	strb	r1, [r3, #9]
10011624:	71da      	strb	r2, [r3, #7]
10011626:	1c18      	adds	r0, r3, #0
10011628:	210a      	movs	r1, #10
1001162a:	4b03      	ldr	r3, [pc, #12]	; (10011638 <gattc_event_cfm_handler+0x3c>)
1001162c:	4798      	blx	r3
1001162e:	bd08      	pop	{r3, pc}
10011630:	100195ec 	.word	0x100195ec
10011634:	1001927c 	.word	0x1001927c
10011638:	10010245 	.word	0x10010245

1001163c <gattc_disc_svc_ind_parser>:
1001163c:	b570      	push	{r4, r5, r6, lr}
1001163e:	1c15      	adds	r5, r2, #0
10011640:	0a00      	lsrs	r0, r0, #8
10011642:	8010      	strh	r0, [r2, #0]
10011644:	784b      	ldrb	r3, [r1, #1]
10011646:	780a      	ldrb	r2, [r1, #0]
10011648:	021b      	lsls	r3, r3, #8
1001164a:	4313      	orrs	r3, r2
1001164c:	806b      	strh	r3, [r5, #2]
1001164e:	78cb      	ldrb	r3, [r1, #3]
10011650:	788a      	ldrb	r2, [r1, #2]
10011652:	021b      	lsls	r3, r3, #8
10011654:	4313      	orrs	r3, r2
10011656:	80ab      	strh	r3, [r5, #4]
10011658:	790e      	ldrb	r6, [r1, #4]
1001165a:	4b05      	ldr	r3, [pc, #20]	; (10011670 <gattc_disc_svc_ind_parser+0x34>)
1001165c:	1c30      	adds	r0, r6, #0
1001165e:	1c0c      	adds	r4, r1, #0
10011660:	4798      	blx	r3
10011662:	1c32      	adds	r2, r6, #0
10011664:	71a8      	strb	r0, [r5, #6]
10011666:	1d61      	adds	r1, r4, #5
10011668:	1de8      	adds	r0, r5, #7
1001166a:	4b02      	ldr	r3, [pc, #8]	; (10011674 <gattc_disc_svc_ind_parser+0x38>)
1001166c:	4798      	blx	r3
1001166e:	bd70      	pop	{r4, r5, r6, pc}
10011670:	1000f5f9 	.word	0x1000f5f9
10011674:	100138e7 	.word	0x100138e7

10011678 <gattc_disc_svc_incl_ind_parser>:
10011678:	b570      	push	{r4, r5, r6, lr}
1001167a:	1c15      	adds	r5, r2, #0
1001167c:	0a00      	lsrs	r0, r0, #8
1001167e:	8010      	strh	r0, [r2, #0]
10011680:	784b      	ldrb	r3, [r1, #1]
10011682:	780a      	ldrb	r2, [r1, #0]
10011684:	021b      	lsls	r3, r3, #8
10011686:	4313      	orrs	r3, r2
10011688:	806b      	strh	r3, [r5, #2]
1001168a:	78cb      	ldrb	r3, [r1, #3]
1001168c:	788a      	ldrb	r2, [r1, #2]
1001168e:	021b      	lsls	r3, r3, #8
10011690:	4313      	orrs	r3, r2
10011692:	80ab      	strh	r3, [r5, #4]
10011694:	794b      	ldrb	r3, [r1, #5]
10011696:	790a      	ldrb	r2, [r1, #4]
10011698:	021b      	lsls	r3, r3, #8
1001169a:	4313      	orrs	r3, r2
1001169c:	80eb      	strh	r3, [r5, #6]
1001169e:	798e      	ldrb	r6, [r1, #6]
100116a0:	4b05      	ldr	r3, [pc, #20]	; (100116b8 <gattc_disc_svc_incl_ind_parser+0x40>)
100116a2:	1c30      	adds	r0, r6, #0
100116a4:	1c0c      	adds	r4, r1, #0
100116a6:	4798      	blx	r3
100116a8:	7228      	strb	r0, [r5, #8]
100116aa:	1c28      	adds	r0, r5, #0
100116ac:	1c32      	adds	r2, r6, #0
100116ae:	1de1      	adds	r1, r4, #7
100116b0:	4b02      	ldr	r3, [pc, #8]	; (100116bc <gattc_disc_svc_incl_ind_parser+0x44>)
100116b2:	3009      	adds	r0, #9
100116b4:	4798      	blx	r3
100116b6:	bd70      	pop	{r4, r5, r6, pc}
100116b8:	1000f5f9 	.word	0x1000f5f9
100116bc:	100138e7 	.word	0x100138e7

100116c0 <gattc_disc_char_ind_parser>:
100116c0:	b570      	push	{r4, r5, r6, lr}
100116c2:	1c15      	adds	r5, r2, #0
100116c4:	0a00      	lsrs	r0, r0, #8
100116c6:	8010      	strh	r0, [r2, #0]
100116c8:	784b      	ldrb	r3, [r1, #1]
100116ca:	780a      	ldrb	r2, [r1, #0]
100116cc:	021b      	lsls	r3, r3, #8
100116ce:	4313      	orrs	r3, r2
100116d0:	806b      	strh	r3, [r5, #2]
100116d2:	78cb      	ldrb	r3, [r1, #3]
100116d4:	788a      	ldrb	r2, [r1, #2]
100116d6:	021b      	lsls	r3, r3, #8
100116d8:	4313      	orrs	r3, r2
100116da:	80ab      	strh	r3, [r5, #4]
100116dc:	790b      	ldrb	r3, [r1, #4]
100116de:	1c0c      	adds	r4, r1, #0
100116e0:	71ab      	strb	r3, [r5, #6]
100116e2:	794e      	ldrb	r6, [r1, #5]
100116e4:	4b05      	ldr	r3, [pc, #20]	; (100116fc <gattc_disc_char_ind_parser+0x3c>)
100116e6:	1c30      	adds	r0, r6, #0
100116e8:	4798      	blx	r3
100116ea:	71e8      	strb	r0, [r5, #7]
100116ec:	1c28      	adds	r0, r5, #0
100116ee:	1c32      	adds	r2, r6, #0
100116f0:	1da1      	adds	r1, r4, #6
100116f2:	4b03      	ldr	r3, [pc, #12]	; (10011700 <gattc_disc_char_ind_parser+0x40>)
100116f4:	3008      	adds	r0, #8
100116f6:	4798      	blx	r3
100116f8:	bd70      	pop	{r4, r5, r6, pc}
100116fa:	46c0      	nop			; (mov r8, r8)
100116fc:	1000f5f9 	.word	0x1000f5f9
10011700:	100138e7 	.word	0x100138e7

10011704 <gattc_disc_char_desc_ind_parser>:
10011704:	b570      	push	{r4, r5, r6, lr}
10011706:	1c15      	adds	r5, r2, #0
10011708:	0a00      	lsrs	r0, r0, #8
1001170a:	8010      	strh	r0, [r2, #0]
1001170c:	784b      	ldrb	r3, [r1, #1]
1001170e:	780a      	ldrb	r2, [r1, #0]
10011710:	021b      	lsls	r3, r3, #8
10011712:	4313      	orrs	r3, r2
10011714:	806b      	strh	r3, [r5, #2]
10011716:	788e      	ldrb	r6, [r1, #2]
10011718:	4b05      	ldr	r3, [pc, #20]	; (10011730 <gattc_disc_char_desc_ind_parser+0x2c>)
1001171a:	1c30      	adds	r0, r6, #0
1001171c:	1c0c      	adds	r4, r1, #0
1001171e:	4798      	blx	r3
10011720:	1c32      	adds	r2, r6, #0
10011722:	7128      	strb	r0, [r5, #4]
10011724:	1ce1      	adds	r1, r4, #3
10011726:	1d68      	adds	r0, r5, #5
10011728:	4b02      	ldr	r3, [pc, #8]	; (10011734 <gattc_disc_char_desc_ind_parser+0x30>)
1001172a:	4798      	blx	r3
1001172c:	bd70      	pop	{r4, r5, r6, pc}
1001172e:	46c0      	nop			; (mov r8, r8)
10011730:	1000f5f9 	.word	0x1000f5f9
10011734:	100138e7 	.word	0x100138e7

10011738 <gattc_event_ind_and_notification_parser>:
10011738:	b510      	push	{r4, lr}
1001173a:	780c      	ldrb	r4, [r1, #0]
1001173c:	1c13      	adds	r3, r2, #0
1001173e:	2c12      	cmp	r4, #18
10011740:	d10e      	bne.n	10011760 <gattc_event_ind_and_notification_parser+0x28>
10011742:	0a00      	lsrs	r0, r0, #8
10011744:	8010      	strh	r0, [r2, #0]
10011746:	788a      	ldrb	r2, [r1, #2]
10011748:	709a      	strb	r2, [r3, #2]
1001174a:	7948      	ldrb	r0, [r1, #5]
1001174c:	790c      	ldrb	r4, [r1, #4]
1001174e:	0200      	lsls	r0, r0, #8
10011750:	4320      	orrs	r0, r4
10011752:	8098      	strh	r0, [r3, #4]
10011754:	3106      	adds	r1, #6
10011756:	1d98      	adds	r0, r3, #6
10011758:	4b0b      	ldr	r3, [pc, #44]	; (10011788 <gattc_event_ind_and_notification_parser+0x50>)
1001175a:	4798      	blx	r3
1001175c:	221b      	movs	r2, #27
1001175e:	e010      	b.n	10011782 <gattc_event_ind_and_notification_parser+0x4a>
10011760:	2200      	movs	r2, #0
10011762:	2c13      	cmp	r4, #19
10011764:	d10d      	bne.n	10011782 <gattc_event_ind_and_notification_parser+0x4a>
10011766:	0a00      	lsrs	r0, r0, #8
10011768:	8018      	strh	r0, [r3, #0]
1001176a:	788a      	ldrb	r2, [r1, #2]
1001176c:	709a      	strb	r2, [r3, #2]
1001176e:	7908      	ldrb	r0, [r1, #4]
10011770:	78cc      	ldrb	r4, [r1, #3]
10011772:	0200      	lsls	r0, r0, #8
10011774:	4320      	orrs	r0, r4
10011776:	8098      	strh	r0, [r3, #4]
10011778:	3106      	adds	r1, #6
1001177a:	1d98      	adds	r0, r3, #6
1001177c:	4b02      	ldr	r3, [pc, #8]	; (10011788 <gattc_event_ind_and_notification_parser+0x50>)
1001177e:	4798      	blx	r3
10011780:	221c      	movs	r2, #28
10011782:	1c10      	adds	r0, r2, #0
10011784:	bd10      	pop	{r4, pc}
10011786:	46c0      	nop			; (mov r8, r8)
10011788:	100138e7 	.word	0x100138e7

1001178c <gattc_complete_evt_handler>:
1001178c:	b500      	push	{lr}
1001178e:	0a00      	lsrs	r0, r0, #8
10011790:	8010      	strh	r0, [r2, #0]
10011792:	7808      	ldrb	r0, [r1, #0]
10011794:	7090      	strb	r0, [r2, #2]
10011796:	784b      	ldrb	r3, [r1, #1]
10011798:	3801      	subs	r0, #1
1001179a:	70d3      	strb	r3, [r2, #3]
1001179c:	2813      	cmp	r0, #19
1001179e:	d82c      	bhi.n	100117fa <gattc_complete_evt_handler+0x6e>
100117a0:	f000 f9dc 	bl	10011b5c <__gnu_thumb1_case_uqi>
100117a4:	0a0a0a0c 	.word	0x0a0a0a0c
100117a8:	210a0a0a 	.word	0x210a0a0a
100117ac:	111f2121 	.word	0x111f2121
100117b0:	2b111111 	.word	0x2b111111
100117b4:	2919132b 	.word	0x2919132b
100117b8:	2017      	movs	r0, #23
100117ba:	e01f      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117bc:	2024      	movs	r0, #36	; 0x24
100117be:	2b00      	cmp	r3, #0
100117c0:	d11c      	bne.n	100117fc <gattc_complete_evt_handler+0x70>
100117c2:	3017      	adds	r0, #23
100117c4:	e01a      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117c6:	2025      	movs	r0, #37	; 0x25
100117c8:	e018      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117ca:	4a0d      	ldr	r2, [pc, #52]	; (10011800 <gattc_complete_evt_handler+0x74>)
100117cc:	201d      	movs	r0, #29
100117ce:	6813      	ldr	r3, [r2, #0]
100117d0:	3b01      	subs	r3, #1
100117d2:	6013      	str	r3, [r2, #0]
100117d4:	e012      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117d6:	4a0a      	ldr	r2, [pc, #40]	; (10011800 <gattc_complete_evt_handler+0x74>)
100117d8:	201e      	movs	r0, #30
100117da:	6813      	ldr	r3, [r2, #0]
100117dc:	3b01      	subs	r3, #1
100117de:	6013      	str	r3, [r2, #0]
100117e0:	e00c      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117e2:	2019      	movs	r0, #25
100117e4:	e00a      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117e6:	203b      	movs	r0, #59	; 0x3b
100117e8:	2b00      	cmp	r3, #0
100117ea:	d007      	beq.n	100117fc <gattc_complete_evt_handler+0x70>
100117ec:	2182      	movs	r1, #130	; 0x82
100117ee:	0089      	lsls	r1, r1, #2
100117f0:	5453      	strb	r3, [r2, r1]
100117f2:	3823      	subs	r0, #35	; 0x23
100117f4:	e002      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117f6:	2021      	movs	r0, #33	; 0x21
100117f8:	e000      	b.n	100117fc <gattc_complete_evt_handler+0x70>
100117fa:	2000      	movs	r0, #0
100117fc:	bd00      	pop	{pc}
100117fe:	46c0      	nop			; (mov r8, r8)
10011800:	10018418 	.word	0x10018418

10011804 <gattc_event_mtu_changed_ind_parser>:
10011804:	0a00      	lsrs	r0, r0, #8
10011806:	8010      	strh	r0, [r2, #0]
10011808:	784b      	ldrb	r3, [r1, #1]
1001180a:	7809      	ldrb	r1, [r1, #0]
1001180c:	021b      	lsls	r3, r3, #8
1001180e:	430b      	orrs	r3, r1
10011810:	8053      	strh	r3, [r2, #2]
10011812:	4770      	bx	lr

10011814 <gattc_read_ind_parser>:
10011814:	0a00      	lsrs	r0, r0, #8
10011816:	b508      	push	{r3, lr}
10011818:	8010      	strh	r0, [r2, #0]
1001181a:	1c13      	adds	r3, r2, #0
1001181c:	2282      	movs	r2, #130	; 0x82
1001181e:	2000      	movs	r0, #0
10011820:	0092      	lsls	r2, r2, #2
10011822:	5498      	strb	r0, [r3, r2]
10011824:	784a      	ldrb	r2, [r1, #1]
10011826:	7808      	ldrb	r0, [r1, #0]
10011828:	0212      	lsls	r2, r2, #8
1001182a:	4302      	orrs	r2, r0
1001182c:	805a      	strh	r2, [r3, #2]
1001182e:	78ca      	ldrb	r2, [r1, #3]
10011830:	7888      	ldrb	r0, [r1, #2]
10011832:	0212      	lsls	r2, r2, #8
10011834:	4302      	orrs	r2, r0
10011836:	80da      	strh	r2, [r3, #6]
10011838:	794a      	ldrb	r2, [r1, #5]
1001183a:	7908      	ldrb	r0, [r1, #4]
1001183c:	0212      	lsls	r2, r2, #8
1001183e:	4302      	orrs	r2, r0
10011840:	809a      	strh	r2, [r3, #4]
10011842:	3308      	adds	r3, #8
10011844:	1c18      	adds	r0, r3, #0
10011846:	3106      	adds	r1, #6
10011848:	4b01      	ldr	r3, [pc, #4]	; (10011850 <gattc_read_ind_parser+0x3c>)
1001184a:	4798      	blx	r3
1001184c:	bd08      	pop	{r3, pc}
1001184e:	46c0      	nop			; (mov r8, r8)
10011850:	100138e7 	.word	0x100138e7

10011854 <gattc_svc_changed_cfg_ind_parser>:
10011854:	0a00      	lsrs	r0, r0, #8
10011856:	8010      	strh	r0, [r2, #0]
10011858:	784b      	ldrb	r3, [r1, #1]
1001185a:	7809      	ldrb	r1, [r1, #0]
1001185c:	021b      	lsls	r3, r3, #8
1001185e:	430b      	orrs	r3, r1
10011860:	8053      	strh	r3, [r2, #2]
10011862:	4770      	bx	lr

10011864 <init_gattc_task_module>:
10011864:	2300      	movs	r3, #0
10011866:	4a02      	ldr	r2, [pc, #8]	; (10011870 <init_gattc_task_module+0xc>)
10011868:	8013      	strh	r3, [r2, #0]
1001186a:	4a02      	ldr	r2, [pc, #8]	; (10011874 <init_gattc_task_module+0x10>)
1001186c:	8013      	strh	r3, [r2, #0]
1001186e:	4770      	bx	lr
10011870:	10018412 	.word	0x10018412
10011874:	10018414 	.word	0x10018414

10011878 <gattm_add_svc_req_handler>:
10011878:	2200      	movs	r2, #0
1001187a:	210b      	movs	r1, #11
1001187c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001187e:	1c04      	adds	r4, r0, #0
10011880:	7943      	ldrb	r3, [r0, #5]
10011882:	b085      	sub	sp, #20
10011884:	9301      	str	r3, [sp, #4]
10011886:	ab02      	add	r3, sp, #8
10011888:	71da      	strb	r2, [r3, #7]
1001188a:	4b37      	ldr	r3, [pc, #220]	; (10011968 <gattm_add_svc_req_handler+0xf0>)
1001188c:	7059      	strb	r1, [r3, #1]
1001188e:	7099      	strb	r1, [r3, #2]
10011890:	4936      	ldr	r1, [pc, #216]	; (1001196c <gattm_add_svc_req_handler+0xf4>)
10011892:	701a      	strb	r2, [r3, #0]
10011894:	8808      	ldrh	r0, [r1, #0]
10011896:	8809      	ldrh	r1, [r1, #0]
10011898:	70da      	strb	r2, [r3, #3]
1001189a:	0a09      	lsrs	r1, r1, #8
1001189c:	7118      	strb	r0, [r3, #4]
1001189e:	7159      	strb	r1, [r3, #5]
100118a0:	8821      	ldrh	r1, [r4, #0]
100118a2:	7219      	strb	r1, [r3, #8]
100118a4:	8821      	ldrh	r1, [r4, #0]
100118a6:	0a09      	lsrs	r1, r1, #8
100118a8:	7259      	strb	r1, [r3, #9]
100118aa:	8861      	ldrh	r1, [r4, #2]
100118ac:	7299      	strb	r1, [r3, #10]
100118ae:	8861      	ldrh	r1, [r4, #2]
100118b0:	0a09      	lsrs	r1, r1, #8
100118b2:	72d9      	strb	r1, [r3, #11]
100118b4:	7921      	ldrb	r1, [r4, #4]
100118b6:	7319      	strb	r1, [r3, #12]
100118b8:	4669      	mov	r1, sp
100118ba:	7909      	ldrb	r1, [r1, #4]
100118bc:	7359      	strb	r1, [r3, #13]
100118be:	18a1      	adds	r1, r4, r2
100118c0:	7988      	ldrb	r0, [r1, #6]
100118c2:	1899      	adds	r1, r3, r2
100118c4:	3201      	adds	r2, #1
100118c6:	7388      	strb	r0, [r1, #14]
100118c8:	2a10      	cmp	r2, #16
100118ca:	d1f8      	bne.n	100118be <gattm_add_svc_req_handler+0x46>
100118cc:	1c27      	adds	r7, r4, #0
100118ce:	2300      	movs	r3, #0
100118d0:	251e      	movs	r5, #30
100118d2:	3716      	adds	r7, #22
100118d4:	9300      	str	r3, [sp, #0]
100118d6:	9b00      	ldr	r3, [sp, #0]
100118d8:	9a01      	ldr	r2, [sp, #4]
100118da:	4e23      	ldr	r6, [pc, #140]	; (10011968 <gattm_add_svc_req_handler+0xf0>)
100118dc:	4293      	cmp	r3, r2
100118de:	da21      	bge.n	10011924 <gattm_add_svc_req_handler+0xac>
100118e0:	1c39      	adds	r1, r7, #0
100118e2:	1970      	adds	r0, r6, r5
100118e4:	2210      	movs	r2, #16
100118e6:	4b22      	ldr	r3, [pc, #136]	; (10011970 <gattm_add_svc_req_handler+0xf8>)
100118e8:	4798      	blx	r3
100118ea:	1c2b      	adds	r3, r5, #0
100118ec:	8a3a      	ldrh	r2, [r7, #16]
100118ee:	3310      	adds	r3, #16
100118f0:	b29b      	uxth	r3, r3
100118f2:	54f2      	strb	r2, [r6, r3]
100118f4:	1c2b      	adds	r3, r5, #0
100118f6:	8a3a      	ldrh	r2, [r7, #16]
100118f8:	3311      	adds	r3, #17
100118fa:	b29b      	uxth	r3, r3
100118fc:	0a12      	lsrs	r2, r2, #8
100118fe:	54f2      	strb	r2, [r6, r3]
10011900:	1c2a      	adds	r2, r5, #0
10011902:	1c2b      	adds	r3, r5, #0
10011904:	8a79      	ldrh	r1, [r7, #18]
10011906:	3212      	adds	r2, #18
10011908:	b292      	uxth	r2, r2
1001190a:	54b1      	strb	r1, [r6, r2]
1001190c:	8a7a      	ldrh	r2, [r7, #18]
1001190e:	3313      	adds	r3, #19
10011910:	b29b      	uxth	r3, r3
10011912:	0a12      	lsrs	r2, r2, #8
10011914:	54f2      	strb	r2, [r6, r3]
10011916:	9b00      	ldr	r3, [sp, #0]
10011918:	3514      	adds	r5, #20
1001191a:	3301      	adds	r3, #1
1001191c:	b2ad      	uxth	r5, r5
1001191e:	9300      	str	r3, [sp, #0]
10011920:	3714      	adds	r7, #20
10011922:	e7d8      	b.n	100118d6 <gattm_add_svc_req_handler+0x5e>
10011924:	2114      	movs	r1, #20
10011926:	4d13      	ldr	r5, [pc, #76]	; (10011974 <gattm_add_svc_req_handler+0xfc>)
10011928:	4b13      	ldr	r3, [pc, #76]	; (10011978 <gattm_add_svc_req_handler+0x100>)
1001192a:	4351      	muls	r1, r2
1001192c:	802b      	strh	r3, [r5, #0]
1001192e:	230b      	movs	r3, #11
10011930:	311e      	adds	r1, #30
10011932:	80ab      	strh	r3, [r5, #4]
10011934:	1c0b      	adds	r3, r1, #0
10011936:	3b08      	subs	r3, #8
10011938:	71b3      	strb	r3, [r6, #6]
1001193a:	121b      	asrs	r3, r3, #8
1001193c:	71f3      	strb	r3, [r6, #7]
1001193e:	1c30      	adds	r0, r6, #0
10011940:	4b0e      	ldr	r3, [pc, #56]	; (1001197c <gattm_add_svc_req_handler+0x104>)
10011942:	4798      	blx	r3
10011944:	ab02      	add	r3, sp, #8
10011946:	1dde      	adds	r6, r3, #7
10011948:	1c30      	adds	r0, r6, #0
1001194a:	4b0d      	ldr	r3, [pc, #52]	; (10011980 <gattm_add_svc_req_handler+0x108>)
1001194c:	4798      	blx	r3
1001194e:	7833      	ldrb	r3, [r6, #0]
10011950:	20e2      	movs	r0, #226	; 0xe2
10011952:	2b00      	cmp	r3, #0
10011954:	d106      	bne.n	10011964 <gattm_add_svc_req_handler+0xec>
10011956:	68aa      	ldr	r2, [r5, #8]
10011958:	7853      	ldrb	r3, [r2, #1]
1001195a:	7811      	ldrb	r1, [r2, #0]
1001195c:	021b      	lsls	r3, r3, #8
1001195e:	430b      	orrs	r3, r1
10011960:	8023      	strh	r3, [r4, #0]
10011962:	7890      	ldrb	r0, [r2, #2]
10011964:	b005      	add	sp, #20
10011966:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011968:	100195ec 	.word	0x100195ec
1001196c:	1001927c 	.word	0x1001927c
10011970:	100138e7 	.word	0x100138e7
10011974:	10019270 	.word	0x10019270
10011978:	00000b01 	.word	0x00000b01
1001197c:	10010245 	.word	0x10010245
10011980:	100102a9 	.word	0x100102a9

10011984 <gattm_add_attribute_req_handler>:
10011984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011986:	1c1f      	adds	r7, r3, #0
10011988:	4b16      	ldr	r3, [pc, #88]	; (100119e4 <gattm_add_attribute_req_handler+0x60>)
1001198a:	9100      	str	r1, [sp, #0]
1001198c:	9201      	str	r2, [sp, #4]
1001198e:	1c05      	adds	r5, r0, #0
10011990:	7946      	ldrb	r6, [r0, #5]
10011992:	6818      	ldr	r0, [r3, #0]
10011994:	2114      	movs	r1, #20
10011996:	4b14      	ldr	r3, [pc, #80]	; (100119e8 <gattm_add_attribute_req_handler+0x64>)
10011998:	382a      	subs	r0, #42	; 0x2a
1001199a:	4798      	blx	r3
1001199c:	2311      	movs	r3, #17
1001199e:	4286      	cmp	r6, r0
100119a0:	d21e      	bcs.n	100119e0 <gattm_add_attribute_req_handler+0x5c>
100119a2:	2414      	movs	r4, #20
100119a4:	4366      	muls	r6, r4
100119a6:	19a8      	adds	r0, r5, r6
100119a8:	2100      	movs	r1, #0
100119aa:	2210      	movs	r2, #16
100119ac:	4b0f      	ldr	r3, [pc, #60]	; (100119ec <gattm_add_attribute_req_handler+0x68>)
100119ae:	3016      	adds	r0, #22
100119b0:	4798      	blx	r3
100119b2:	7968      	ldrb	r0, [r5, #5]
100119b4:	1c3a      	adds	r2, r7, #0
100119b6:	4360      	muls	r0, r4
100119b8:	1828      	adds	r0, r5, r0
100119ba:	4b0d      	ldr	r3, [pc, #52]	; (100119f0 <gattm_add_attribute_req_handler+0x6c>)
100119bc:	3016      	adds	r0, #22
100119be:	9908      	ldr	r1, [sp, #32]
100119c0:	4798      	blx	r3
100119c2:	466a      	mov	r2, sp
100119c4:	796b      	ldrb	r3, [r5, #5]
100119c6:	8812      	ldrh	r2, [r2, #0]
100119c8:	435c      	muls	r4, r3
100119ca:	192c      	adds	r4, r5, r4
100119cc:	8522      	strh	r2, [r4, #40]	; 0x28
100119ce:	466a      	mov	r2, sp
100119d0:	8892      	ldrh	r2, [r2, #4]
100119d2:	84e2      	strh	r2, [r4, #38]	; 0x26
100119d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100119d6:	8013      	strh	r3, [r2, #0]
100119d8:	796b      	ldrb	r3, [r5, #5]
100119da:	3301      	adds	r3, #1
100119dc:	716b      	strb	r3, [r5, #5]
100119de:	2300      	movs	r3, #0
100119e0:	1c18      	adds	r0, r3, #0
100119e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100119e4:	10018388 	.word	0x10018388
100119e8:	10011b71 	.word	0x10011b71
100119ec:	100138f9 	.word	0x100138f9
100119f0:	100138e7 	.word	0x100138e7

100119f4 <gattm_att_set_value_req_handler>:
100119f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119f6:	466b      	mov	r3, sp
100119f8:	1dde      	adds	r6, r3, #7
100119fa:	2300      	movs	r3, #0
100119fc:	1c0d      	adds	r5, r1, #0
100119fe:	210c      	movs	r1, #12
10011a00:	270b      	movs	r7, #11
10011a02:	4c17      	ldr	r4, [pc, #92]	; (10011a60 <gattm_att_set_value_req_handler+0x6c>)
10011a04:	7033      	strb	r3, [r6, #0]
10011a06:	70e3      	strb	r3, [r4, #3]
10011a08:	4b16      	ldr	r3, [pc, #88]	; (10011a64 <gattm_att_set_value_req_handler+0x70>)
10011a0a:	7021      	strb	r1, [r4, #0]
10011a0c:	8819      	ldrh	r1, [r3, #0]
10011a0e:	881b      	ldrh	r3, [r3, #0]
10011a10:	7220      	strb	r0, [r4, #8]
10011a12:	0a1b      	lsrs	r3, r3, #8
10011a14:	7163      	strb	r3, [r4, #5]
10011a16:	0a00      	lsrs	r0, r0, #8
10011a18:	0a2b      	lsrs	r3, r5, #8
10011a1a:	7121      	strb	r1, [r4, #4]
10011a1c:	7260      	strb	r0, [r4, #9]
10011a1e:	1c11      	adds	r1, r2, #0
10011a20:	72a5      	strb	r5, [r4, #10]
10011a22:	1c2a      	adds	r2, r5, #0
10011a24:	72e3      	strb	r3, [r4, #11]
10011a26:	350c      	adds	r5, #12
10011a28:	4b0f      	ldr	r3, [pc, #60]	; (10011a68 <gattm_att_set_value_req_handler+0x74>)
10011a2a:	4810      	ldr	r0, [pc, #64]	; (10011a6c <gattm_att_set_value_req_handler+0x78>)
10011a2c:	7067      	strb	r7, [r4, #1]
10011a2e:	70a7      	strb	r7, [r4, #2]
10011a30:	4798      	blx	r3
10011a32:	b2a9      	uxth	r1, r5
10011a34:	4b0e      	ldr	r3, [pc, #56]	; (10011a70 <gattm_att_set_value_req_handler+0x7c>)
10011a36:	4d0f      	ldr	r5, [pc, #60]	; (10011a74 <gattm_att_set_value_req_handler+0x80>)
10011a38:	1c20      	adds	r0, r4, #0
10011a3a:	802b      	strh	r3, [r5, #0]
10011a3c:	1c0b      	adds	r3, r1, #0
10011a3e:	3b08      	subs	r3, #8
10011a40:	71a3      	strb	r3, [r4, #6]
10011a42:	121b      	asrs	r3, r3, #8
10011a44:	71e3      	strb	r3, [r4, #7]
10011a46:	4b0c      	ldr	r3, [pc, #48]	; (10011a78 <gattm_att_set_value_req_handler+0x84>)
10011a48:	80af      	strh	r7, [r5, #4]
10011a4a:	4798      	blx	r3
10011a4c:	1c30      	adds	r0, r6, #0
10011a4e:	4b0b      	ldr	r3, [pc, #44]	; (10011a7c <gattm_att_set_value_req_handler+0x88>)
10011a50:	4798      	blx	r3
10011a52:	7833      	ldrb	r3, [r6, #0]
10011a54:	20e2      	movs	r0, #226	; 0xe2
10011a56:	2b00      	cmp	r3, #0
10011a58:	d101      	bne.n	10011a5e <gattm_att_set_value_req_handler+0x6a>
10011a5a:	68ab      	ldr	r3, [r5, #8]
10011a5c:	7898      	ldrb	r0, [r3, #2]
10011a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011a60:	100195ec 	.word	0x100195ec
10011a64:	1001927c 	.word	0x1001927c
10011a68:	100138e7 	.word	0x100138e7
10011a6c:	100195f8 	.word	0x100195f8
10011a70:	00000b0d 	.word	0x00000b0d
10011a74:	10019270 	.word	0x10019270
10011a78:	10010245 	.word	0x10010245
10011a7c:	100102a9 	.word	0x100102a9

10011a80 <gattm_att_get_value_req_handler>:
10011a80:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a82:	b085      	sub	sp, #20
10011a84:	9201      	str	r2, [sp, #4]
10011a86:	220a      	movs	r2, #10
10011a88:	1c04      	adds	r4, r0, #0
10011a8a:	481d      	ldr	r0, [pc, #116]	; (10011b00 <gattm_att_get_value_req_handler+0x80>)
10011a8c:	ab02      	add	r3, sp, #8
10011a8e:	1dde      	adds	r6, r3, #7
10011a90:	7002      	strb	r2, [r0, #0]
10011a92:	2300      	movs	r3, #0
10011a94:	220b      	movs	r2, #11
10011a96:	4d1b      	ldr	r5, [pc, #108]	; (10011b04 <gattm_att_get_value_req_handler+0x84>)
10011a98:	1c0f      	adds	r7, r1, #0
10011a9a:	8829      	ldrh	r1, [r5, #0]
10011a9c:	882d      	ldrh	r5, [r5, #0]
10011a9e:	7101      	strb	r1, [r0, #4]
10011aa0:	0a2d      	lsrs	r5, r5, #8
10011aa2:	7145      	strb	r5, [r0, #5]
10011aa4:	0a25      	lsrs	r5, r4, #8
10011aa6:	7245      	strb	r5, [r0, #9]
10011aa8:	4917      	ldr	r1, [pc, #92]	; (10011b08 <gattm_att_get_value_req_handler+0x88>)
10011aaa:	4d18      	ldr	r5, [pc, #96]	; (10011b0c <gattm_att_get_value_req_handler+0x8c>)
10011aac:	7033      	strb	r3, [r6, #0]
10011aae:	7042      	strb	r2, [r0, #1]
10011ab0:	7082      	strb	r2, [r0, #2]
10011ab2:	70c3      	strb	r3, [r0, #3]
10011ab4:	8029      	strh	r1, [r5, #0]
10011ab6:	80aa      	strh	r2, [r5, #4]
10011ab8:	71c3      	strb	r3, [r0, #7]
10011aba:	3a09      	subs	r2, #9
10011abc:	210a      	movs	r1, #10
10011abe:	4b14      	ldr	r3, [pc, #80]	; (10011b10 <gattm_att_get_value_req_handler+0x90>)
10011ac0:	7182      	strb	r2, [r0, #6]
10011ac2:	7204      	strb	r4, [r0, #8]
10011ac4:	4798      	blx	r3
10011ac6:	1c30      	adds	r0, r6, #0
10011ac8:	4b12      	ldr	r3, [pc, #72]	; (10011b14 <gattm_att_get_value_req_handler+0x94>)
10011aca:	4798      	blx	r3
10011acc:	7833      	ldrb	r3, [r6, #0]
10011ace:	20e2      	movs	r0, #226	; 0xe2
10011ad0:	2b00      	cmp	r3, #0
10011ad2:	d112      	bne.n	10011afa <gattm_att_get_value_req_handler+0x7a>
10011ad4:	68a9      	ldr	r1, [r5, #8]
10011ad6:	9801      	ldr	r0, [sp, #4]
10011ad8:	784d      	ldrb	r5, [r1, #1]
10011ada:	780b      	ldrb	r3, [r1, #0]
10011adc:	78ca      	ldrb	r2, [r1, #3]
10011ade:	022d      	lsls	r5, r5, #8
10011ae0:	431d      	orrs	r5, r3
10011ae2:	788b      	ldrb	r3, [r1, #2]
10011ae4:	0212      	lsls	r2, r2, #8
10011ae6:	431a      	orrs	r2, r3
10011ae8:	803a      	strh	r2, [r7, #0]
10011aea:	790e      	ldrb	r6, [r1, #4]
10011aec:	4b0a      	ldr	r3, [pc, #40]	; (10011b18 <gattm_att_get_value_req_handler+0x98>)
10011aee:	3105      	adds	r1, #5
10011af0:	4798      	blx	r3
10011af2:	20e2      	movs	r0, #226	; 0xe2
10011af4:	42ac      	cmp	r4, r5
10011af6:	d100      	bne.n	10011afa <gattm_att_get_value_req_handler+0x7a>
10011af8:	1c30      	adds	r0, r6, #0
10011afa:	b005      	add	sp, #20
10011afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011afe:	46c0      	nop			; (mov r8, r8)
10011b00:	100195ec 	.word	0x100195ec
10011b04:	1001927c 	.word	0x1001927c
10011b08:	00000b0b 	.word	0x00000b0b
10011b0c:	10019270 	.word	0x10019270
10011b10:	10010245 	.word	0x10010245
10011b14:	100102a9 	.word	0x100102a9
10011b18:	100138e7 	.word	0x100138e7

10011b1c <htpt_enable_rsp_handler>:
10011b1c:	780b      	ldrb	r3, [r1, #0]
10011b1e:	7013      	strb	r3, [r2, #0]
10011b20:	784b      	ldrb	r3, [r1, #1]
10011b22:	7053      	strb	r3, [r2, #1]
10011b24:	4770      	bx	lr

10011b26 <htpt_temp_send_rsp_handler>:
10011b26:	780b      	ldrb	r3, [r1, #0]
10011b28:	7013      	strb	r3, [r2, #0]
10011b2a:	4770      	bx	lr

10011b2c <htpt_meas_intv_upd_rsp_handler>:
10011b2c:	780b      	ldrb	r3, [r1, #0]
10011b2e:	7013      	strb	r3, [r2, #0]
10011b30:	4770      	bx	lr

10011b32 <htpt_meas_intv_chg_req_ind_handler>:
10011b32:	78cb      	ldrb	r3, [r1, #3]
10011b34:	7889      	ldrb	r1, [r1, #2]
10011b36:	021b      	lsls	r3, r3, #8
10011b38:	430b      	orrs	r3, r1
10011b3a:	8013      	strh	r3, [r2, #0]
10011b3c:	4770      	bx	lr

10011b3e <htpt_cfg_indntf_ind_handler>:
10011b3e:	780b      	ldrb	r3, [r1, #0]
10011b40:	7013      	strb	r3, [r2, #0]
10011b42:	784b      	ldrb	r3, [r1, #1]
10011b44:	7053      	strb	r3, [r2, #1]
10011b46:	4770      	bx	lr

10011b48 <__gnu_thumb1_case_sqi>:
10011b48:	b402      	push	{r1}
10011b4a:	4671      	mov	r1, lr
10011b4c:	0849      	lsrs	r1, r1, #1
10011b4e:	0049      	lsls	r1, r1, #1
10011b50:	5609      	ldrsb	r1, [r1, r0]
10011b52:	0049      	lsls	r1, r1, #1
10011b54:	448e      	add	lr, r1
10011b56:	bc02      	pop	{r1}
10011b58:	4770      	bx	lr
10011b5a:	46c0      	nop			; (mov r8, r8)

10011b5c <__gnu_thumb1_case_uqi>:
10011b5c:	b402      	push	{r1}
10011b5e:	4671      	mov	r1, lr
10011b60:	0849      	lsrs	r1, r1, #1
10011b62:	0049      	lsls	r1, r1, #1
10011b64:	5c09      	ldrb	r1, [r1, r0]
10011b66:	0049      	lsls	r1, r1, #1
10011b68:	448e      	add	lr, r1
10011b6a:	bc02      	pop	{r1}
10011b6c:	4770      	bx	lr
10011b6e:	46c0      	nop			; (mov r8, r8)

10011b70 <__aeabi_uidiv>:
10011b70:	2200      	movs	r2, #0
10011b72:	0843      	lsrs	r3, r0, #1
10011b74:	428b      	cmp	r3, r1
10011b76:	d374      	bcc.n	10011c62 <__aeabi_uidiv+0xf2>
10011b78:	0903      	lsrs	r3, r0, #4
10011b7a:	428b      	cmp	r3, r1
10011b7c:	d35f      	bcc.n	10011c3e <__aeabi_uidiv+0xce>
10011b7e:	0a03      	lsrs	r3, r0, #8
10011b80:	428b      	cmp	r3, r1
10011b82:	d344      	bcc.n	10011c0e <__aeabi_uidiv+0x9e>
10011b84:	0b03      	lsrs	r3, r0, #12
10011b86:	428b      	cmp	r3, r1
10011b88:	d328      	bcc.n	10011bdc <__aeabi_uidiv+0x6c>
10011b8a:	0c03      	lsrs	r3, r0, #16
10011b8c:	428b      	cmp	r3, r1
10011b8e:	d30d      	bcc.n	10011bac <__aeabi_uidiv+0x3c>
10011b90:	22ff      	movs	r2, #255	; 0xff
10011b92:	0209      	lsls	r1, r1, #8
10011b94:	ba12      	rev	r2, r2
10011b96:	0c03      	lsrs	r3, r0, #16
10011b98:	428b      	cmp	r3, r1
10011b9a:	d302      	bcc.n	10011ba2 <__aeabi_uidiv+0x32>
10011b9c:	1212      	asrs	r2, r2, #8
10011b9e:	0209      	lsls	r1, r1, #8
10011ba0:	d065      	beq.n	10011c6e <__aeabi_uidiv+0xfe>
10011ba2:	0b03      	lsrs	r3, r0, #12
10011ba4:	428b      	cmp	r3, r1
10011ba6:	d319      	bcc.n	10011bdc <__aeabi_uidiv+0x6c>
10011ba8:	e000      	b.n	10011bac <__aeabi_uidiv+0x3c>
10011baa:	0a09      	lsrs	r1, r1, #8
10011bac:	0bc3      	lsrs	r3, r0, #15
10011bae:	428b      	cmp	r3, r1
10011bb0:	d301      	bcc.n	10011bb6 <__aeabi_uidiv+0x46>
10011bb2:	03cb      	lsls	r3, r1, #15
10011bb4:	1ac0      	subs	r0, r0, r3
10011bb6:	4152      	adcs	r2, r2
10011bb8:	0b83      	lsrs	r3, r0, #14
10011bba:	428b      	cmp	r3, r1
10011bbc:	d301      	bcc.n	10011bc2 <__aeabi_uidiv+0x52>
10011bbe:	038b      	lsls	r3, r1, #14
10011bc0:	1ac0      	subs	r0, r0, r3
10011bc2:	4152      	adcs	r2, r2
10011bc4:	0b43      	lsrs	r3, r0, #13
10011bc6:	428b      	cmp	r3, r1
10011bc8:	d301      	bcc.n	10011bce <__aeabi_uidiv+0x5e>
10011bca:	034b      	lsls	r3, r1, #13
10011bcc:	1ac0      	subs	r0, r0, r3
10011bce:	4152      	adcs	r2, r2
10011bd0:	0b03      	lsrs	r3, r0, #12
10011bd2:	428b      	cmp	r3, r1
10011bd4:	d301      	bcc.n	10011bda <__aeabi_uidiv+0x6a>
10011bd6:	030b      	lsls	r3, r1, #12
10011bd8:	1ac0      	subs	r0, r0, r3
10011bda:	4152      	adcs	r2, r2
10011bdc:	0ac3      	lsrs	r3, r0, #11
10011bde:	428b      	cmp	r3, r1
10011be0:	d301      	bcc.n	10011be6 <__aeabi_uidiv+0x76>
10011be2:	02cb      	lsls	r3, r1, #11
10011be4:	1ac0      	subs	r0, r0, r3
10011be6:	4152      	adcs	r2, r2
10011be8:	0a83      	lsrs	r3, r0, #10
10011bea:	428b      	cmp	r3, r1
10011bec:	d301      	bcc.n	10011bf2 <__aeabi_uidiv+0x82>
10011bee:	028b      	lsls	r3, r1, #10
10011bf0:	1ac0      	subs	r0, r0, r3
10011bf2:	4152      	adcs	r2, r2
10011bf4:	0a43      	lsrs	r3, r0, #9
10011bf6:	428b      	cmp	r3, r1
10011bf8:	d301      	bcc.n	10011bfe <__aeabi_uidiv+0x8e>
10011bfa:	024b      	lsls	r3, r1, #9
10011bfc:	1ac0      	subs	r0, r0, r3
10011bfe:	4152      	adcs	r2, r2
10011c00:	0a03      	lsrs	r3, r0, #8
10011c02:	428b      	cmp	r3, r1
10011c04:	d301      	bcc.n	10011c0a <__aeabi_uidiv+0x9a>
10011c06:	020b      	lsls	r3, r1, #8
10011c08:	1ac0      	subs	r0, r0, r3
10011c0a:	4152      	adcs	r2, r2
10011c0c:	d2cd      	bcs.n	10011baa <__aeabi_uidiv+0x3a>
10011c0e:	09c3      	lsrs	r3, r0, #7
10011c10:	428b      	cmp	r3, r1
10011c12:	d301      	bcc.n	10011c18 <__aeabi_uidiv+0xa8>
10011c14:	01cb      	lsls	r3, r1, #7
10011c16:	1ac0      	subs	r0, r0, r3
10011c18:	4152      	adcs	r2, r2
10011c1a:	0983      	lsrs	r3, r0, #6
10011c1c:	428b      	cmp	r3, r1
10011c1e:	d301      	bcc.n	10011c24 <__aeabi_uidiv+0xb4>
10011c20:	018b      	lsls	r3, r1, #6
10011c22:	1ac0      	subs	r0, r0, r3
10011c24:	4152      	adcs	r2, r2
10011c26:	0943      	lsrs	r3, r0, #5
10011c28:	428b      	cmp	r3, r1
10011c2a:	d301      	bcc.n	10011c30 <__aeabi_uidiv+0xc0>
10011c2c:	014b      	lsls	r3, r1, #5
10011c2e:	1ac0      	subs	r0, r0, r3
10011c30:	4152      	adcs	r2, r2
10011c32:	0903      	lsrs	r3, r0, #4
10011c34:	428b      	cmp	r3, r1
10011c36:	d301      	bcc.n	10011c3c <__aeabi_uidiv+0xcc>
10011c38:	010b      	lsls	r3, r1, #4
10011c3a:	1ac0      	subs	r0, r0, r3
10011c3c:	4152      	adcs	r2, r2
10011c3e:	08c3      	lsrs	r3, r0, #3
10011c40:	428b      	cmp	r3, r1
10011c42:	d301      	bcc.n	10011c48 <__aeabi_uidiv+0xd8>
10011c44:	00cb      	lsls	r3, r1, #3
10011c46:	1ac0      	subs	r0, r0, r3
10011c48:	4152      	adcs	r2, r2
10011c4a:	0883      	lsrs	r3, r0, #2
10011c4c:	428b      	cmp	r3, r1
10011c4e:	d301      	bcc.n	10011c54 <__aeabi_uidiv+0xe4>
10011c50:	008b      	lsls	r3, r1, #2
10011c52:	1ac0      	subs	r0, r0, r3
10011c54:	4152      	adcs	r2, r2
10011c56:	0843      	lsrs	r3, r0, #1
10011c58:	428b      	cmp	r3, r1
10011c5a:	d301      	bcc.n	10011c60 <__aeabi_uidiv+0xf0>
10011c5c:	004b      	lsls	r3, r1, #1
10011c5e:	1ac0      	subs	r0, r0, r3
10011c60:	4152      	adcs	r2, r2
10011c62:	1a41      	subs	r1, r0, r1
10011c64:	d200      	bcs.n	10011c68 <__aeabi_uidiv+0xf8>
10011c66:	4601      	mov	r1, r0
10011c68:	4152      	adcs	r2, r2
10011c6a:	4610      	mov	r0, r2
10011c6c:	4770      	bx	lr
10011c6e:	e7ff      	b.n	10011c70 <__aeabi_uidiv+0x100>
10011c70:	b501      	push	{r0, lr}
10011c72:	2000      	movs	r0, #0
10011c74:	f000 f8f0 	bl	10011e58 <__aeabi_idiv0>
10011c78:	bd02      	pop	{r1, pc}
10011c7a:	46c0      	nop			; (mov r8, r8)

10011c7c <__aeabi_uidivmod>:
10011c7c:	2900      	cmp	r1, #0
10011c7e:	d0f7      	beq.n	10011c70 <__aeabi_uidiv+0x100>
10011c80:	e776      	b.n	10011b70 <__aeabi_uidiv>
10011c82:	4770      	bx	lr

10011c84 <__aeabi_idiv>:
10011c84:	4603      	mov	r3, r0
10011c86:	430b      	orrs	r3, r1
10011c88:	d47f      	bmi.n	10011d8a <__aeabi_idiv+0x106>
10011c8a:	2200      	movs	r2, #0
10011c8c:	0843      	lsrs	r3, r0, #1
10011c8e:	428b      	cmp	r3, r1
10011c90:	d374      	bcc.n	10011d7c <__aeabi_idiv+0xf8>
10011c92:	0903      	lsrs	r3, r0, #4
10011c94:	428b      	cmp	r3, r1
10011c96:	d35f      	bcc.n	10011d58 <__aeabi_idiv+0xd4>
10011c98:	0a03      	lsrs	r3, r0, #8
10011c9a:	428b      	cmp	r3, r1
10011c9c:	d344      	bcc.n	10011d28 <__aeabi_idiv+0xa4>
10011c9e:	0b03      	lsrs	r3, r0, #12
10011ca0:	428b      	cmp	r3, r1
10011ca2:	d328      	bcc.n	10011cf6 <__aeabi_idiv+0x72>
10011ca4:	0c03      	lsrs	r3, r0, #16
10011ca6:	428b      	cmp	r3, r1
10011ca8:	d30d      	bcc.n	10011cc6 <__aeabi_idiv+0x42>
10011caa:	22ff      	movs	r2, #255	; 0xff
10011cac:	0209      	lsls	r1, r1, #8
10011cae:	ba12      	rev	r2, r2
10011cb0:	0c03      	lsrs	r3, r0, #16
10011cb2:	428b      	cmp	r3, r1
10011cb4:	d302      	bcc.n	10011cbc <__aeabi_idiv+0x38>
10011cb6:	1212      	asrs	r2, r2, #8
10011cb8:	0209      	lsls	r1, r1, #8
10011cba:	d065      	beq.n	10011d88 <__aeabi_idiv+0x104>
10011cbc:	0b03      	lsrs	r3, r0, #12
10011cbe:	428b      	cmp	r3, r1
10011cc0:	d319      	bcc.n	10011cf6 <__aeabi_idiv+0x72>
10011cc2:	e000      	b.n	10011cc6 <__aeabi_idiv+0x42>
10011cc4:	0a09      	lsrs	r1, r1, #8
10011cc6:	0bc3      	lsrs	r3, r0, #15
10011cc8:	428b      	cmp	r3, r1
10011cca:	d301      	bcc.n	10011cd0 <__aeabi_idiv+0x4c>
10011ccc:	03cb      	lsls	r3, r1, #15
10011cce:	1ac0      	subs	r0, r0, r3
10011cd0:	4152      	adcs	r2, r2
10011cd2:	0b83      	lsrs	r3, r0, #14
10011cd4:	428b      	cmp	r3, r1
10011cd6:	d301      	bcc.n	10011cdc <__aeabi_idiv+0x58>
10011cd8:	038b      	lsls	r3, r1, #14
10011cda:	1ac0      	subs	r0, r0, r3
10011cdc:	4152      	adcs	r2, r2
10011cde:	0b43      	lsrs	r3, r0, #13
10011ce0:	428b      	cmp	r3, r1
10011ce2:	d301      	bcc.n	10011ce8 <__aeabi_idiv+0x64>
10011ce4:	034b      	lsls	r3, r1, #13
10011ce6:	1ac0      	subs	r0, r0, r3
10011ce8:	4152      	adcs	r2, r2
10011cea:	0b03      	lsrs	r3, r0, #12
10011cec:	428b      	cmp	r3, r1
10011cee:	d301      	bcc.n	10011cf4 <__aeabi_idiv+0x70>
10011cf0:	030b      	lsls	r3, r1, #12
10011cf2:	1ac0      	subs	r0, r0, r3
10011cf4:	4152      	adcs	r2, r2
10011cf6:	0ac3      	lsrs	r3, r0, #11
10011cf8:	428b      	cmp	r3, r1
10011cfa:	d301      	bcc.n	10011d00 <__aeabi_idiv+0x7c>
10011cfc:	02cb      	lsls	r3, r1, #11
10011cfe:	1ac0      	subs	r0, r0, r3
10011d00:	4152      	adcs	r2, r2
10011d02:	0a83      	lsrs	r3, r0, #10
10011d04:	428b      	cmp	r3, r1
10011d06:	d301      	bcc.n	10011d0c <__aeabi_idiv+0x88>
10011d08:	028b      	lsls	r3, r1, #10
10011d0a:	1ac0      	subs	r0, r0, r3
10011d0c:	4152      	adcs	r2, r2
10011d0e:	0a43      	lsrs	r3, r0, #9
10011d10:	428b      	cmp	r3, r1
10011d12:	d301      	bcc.n	10011d18 <__aeabi_idiv+0x94>
10011d14:	024b      	lsls	r3, r1, #9
10011d16:	1ac0      	subs	r0, r0, r3
10011d18:	4152      	adcs	r2, r2
10011d1a:	0a03      	lsrs	r3, r0, #8
10011d1c:	428b      	cmp	r3, r1
10011d1e:	d301      	bcc.n	10011d24 <__aeabi_idiv+0xa0>
10011d20:	020b      	lsls	r3, r1, #8
10011d22:	1ac0      	subs	r0, r0, r3
10011d24:	4152      	adcs	r2, r2
10011d26:	d2cd      	bcs.n	10011cc4 <__aeabi_idiv+0x40>
10011d28:	09c3      	lsrs	r3, r0, #7
10011d2a:	428b      	cmp	r3, r1
10011d2c:	d301      	bcc.n	10011d32 <__aeabi_idiv+0xae>
10011d2e:	01cb      	lsls	r3, r1, #7
10011d30:	1ac0      	subs	r0, r0, r3
10011d32:	4152      	adcs	r2, r2
10011d34:	0983      	lsrs	r3, r0, #6
10011d36:	428b      	cmp	r3, r1
10011d38:	d301      	bcc.n	10011d3e <__aeabi_idiv+0xba>
10011d3a:	018b      	lsls	r3, r1, #6
10011d3c:	1ac0      	subs	r0, r0, r3
10011d3e:	4152      	adcs	r2, r2
10011d40:	0943      	lsrs	r3, r0, #5
10011d42:	428b      	cmp	r3, r1
10011d44:	d301      	bcc.n	10011d4a <__aeabi_idiv+0xc6>
10011d46:	014b      	lsls	r3, r1, #5
10011d48:	1ac0      	subs	r0, r0, r3
10011d4a:	4152      	adcs	r2, r2
10011d4c:	0903      	lsrs	r3, r0, #4
10011d4e:	428b      	cmp	r3, r1
10011d50:	d301      	bcc.n	10011d56 <__aeabi_idiv+0xd2>
10011d52:	010b      	lsls	r3, r1, #4
10011d54:	1ac0      	subs	r0, r0, r3
10011d56:	4152      	adcs	r2, r2
10011d58:	08c3      	lsrs	r3, r0, #3
10011d5a:	428b      	cmp	r3, r1
10011d5c:	d301      	bcc.n	10011d62 <__aeabi_idiv+0xde>
10011d5e:	00cb      	lsls	r3, r1, #3
10011d60:	1ac0      	subs	r0, r0, r3
10011d62:	4152      	adcs	r2, r2
10011d64:	0883      	lsrs	r3, r0, #2
10011d66:	428b      	cmp	r3, r1
10011d68:	d301      	bcc.n	10011d6e <__aeabi_idiv+0xea>
10011d6a:	008b      	lsls	r3, r1, #2
10011d6c:	1ac0      	subs	r0, r0, r3
10011d6e:	4152      	adcs	r2, r2
10011d70:	0843      	lsrs	r3, r0, #1
10011d72:	428b      	cmp	r3, r1
10011d74:	d301      	bcc.n	10011d7a <__aeabi_idiv+0xf6>
10011d76:	004b      	lsls	r3, r1, #1
10011d78:	1ac0      	subs	r0, r0, r3
10011d7a:	4152      	adcs	r2, r2
10011d7c:	1a41      	subs	r1, r0, r1
10011d7e:	d200      	bcs.n	10011d82 <__aeabi_idiv+0xfe>
10011d80:	4601      	mov	r1, r0
10011d82:	4152      	adcs	r2, r2
10011d84:	4610      	mov	r0, r2
10011d86:	4770      	bx	lr
10011d88:	e05d      	b.n	10011e46 <__aeabi_idiv+0x1c2>
10011d8a:	0fca      	lsrs	r2, r1, #31
10011d8c:	d000      	beq.n	10011d90 <__aeabi_idiv+0x10c>
10011d8e:	4249      	negs	r1, r1
10011d90:	1003      	asrs	r3, r0, #32
10011d92:	d300      	bcc.n	10011d96 <__aeabi_idiv+0x112>
10011d94:	4240      	negs	r0, r0
10011d96:	4053      	eors	r3, r2
10011d98:	2200      	movs	r2, #0
10011d9a:	469c      	mov	ip, r3
10011d9c:	0903      	lsrs	r3, r0, #4
10011d9e:	428b      	cmp	r3, r1
10011da0:	d32d      	bcc.n	10011dfe <__aeabi_idiv+0x17a>
10011da2:	0a03      	lsrs	r3, r0, #8
10011da4:	428b      	cmp	r3, r1
10011da6:	d312      	bcc.n	10011dce <__aeabi_idiv+0x14a>
10011da8:	22fc      	movs	r2, #252	; 0xfc
10011daa:	0189      	lsls	r1, r1, #6
10011dac:	ba12      	rev	r2, r2
10011dae:	0a03      	lsrs	r3, r0, #8
10011db0:	428b      	cmp	r3, r1
10011db2:	d30c      	bcc.n	10011dce <__aeabi_idiv+0x14a>
10011db4:	0189      	lsls	r1, r1, #6
10011db6:	1192      	asrs	r2, r2, #6
10011db8:	428b      	cmp	r3, r1
10011dba:	d308      	bcc.n	10011dce <__aeabi_idiv+0x14a>
10011dbc:	0189      	lsls	r1, r1, #6
10011dbe:	1192      	asrs	r2, r2, #6
10011dc0:	428b      	cmp	r3, r1
10011dc2:	d304      	bcc.n	10011dce <__aeabi_idiv+0x14a>
10011dc4:	0189      	lsls	r1, r1, #6
10011dc6:	d03a      	beq.n	10011e3e <__aeabi_idiv+0x1ba>
10011dc8:	1192      	asrs	r2, r2, #6
10011dca:	e000      	b.n	10011dce <__aeabi_idiv+0x14a>
10011dcc:	0989      	lsrs	r1, r1, #6
10011dce:	09c3      	lsrs	r3, r0, #7
10011dd0:	428b      	cmp	r3, r1
10011dd2:	d301      	bcc.n	10011dd8 <__aeabi_idiv+0x154>
10011dd4:	01cb      	lsls	r3, r1, #7
10011dd6:	1ac0      	subs	r0, r0, r3
10011dd8:	4152      	adcs	r2, r2
10011dda:	0983      	lsrs	r3, r0, #6
10011ddc:	428b      	cmp	r3, r1
10011dde:	d301      	bcc.n	10011de4 <__aeabi_idiv+0x160>
10011de0:	018b      	lsls	r3, r1, #6
10011de2:	1ac0      	subs	r0, r0, r3
10011de4:	4152      	adcs	r2, r2
10011de6:	0943      	lsrs	r3, r0, #5
10011de8:	428b      	cmp	r3, r1
10011dea:	d301      	bcc.n	10011df0 <__aeabi_idiv+0x16c>
10011dec:	014b      	lsls	r3, r1, #5
10011dee:	1ac0      	subs	r0, r0, r3
10011df0:	4152      	adcs	r2, r2
10011df2:	0903      	lsrs	r3, r0, #4
10011df4:	428b      	cmp	r3, r1
10011df6:	d301      	bcc.n	10011dfc <__aeabi_idiv+0x178>
10011df8:	010b      	lsls	r3, r1, #4
10011dfa:	1ac0      	subs	r0, r0, r3
10011dfc:	4152      	adcs	r2, r2
10011dfe:	08c3      	lsrs	r3, r0, #3
10011e00:	428b      	cmp	r3, r1
10011e02:	d301      	bcc.n	10011e08 <__aeabi_idiv+0x184>
10011e04:	00cb      	lsls	r3, r1, #3
10011e06:	1ac0      	subs	r0, r0, r3
10011e08:	4152      	adcs	r2, r2
10011e0a:	0883      	lsrs	r3, r0, #2
10011e0c:	428b      	cmp	r3, r1
10011e0e:	d301      	bcc.n	10011e14 <__aeabi_idiv+0x190>
10011e10:	008b      	lsls	r3, r1, #2
10011e12:	1ac0      	subs	r0, r0, r3
10011e14:	4152      	adcs	r2, r2
10011e16:	d2d9      	bcs.n	10011dcc <__aeabi_idiv+0x148>
10011e18:	0843      	lsrs	r3, r0, #1
10011e1a:	428b      	cmp	r3, r1
10011e1c:	d301      	bcc.n	10011e22 <__aeabi_idiv+0x19e>
10011e1e:	004b      	lsls	r3, r1, #1
10011e20:	1ac0      	subs	r0, r0, r3
10011e22:	4152      	adcs	r2, r2
10011e24:	1a41      	subs	r1, r0, r1
10011e26:	d200      	bcs.n	10011e2a <__aeabi_idiv+0x1a6>
10011e28:	4601      	mov	r1, r0
10011e2a:	4663      	mov	r3, ip
10011e2c:	4152      	adcs	r2, r2
10011e2e:	105b      	asrs	r3, r3, #1
10011e30:	4610      	mov	r0, r2
10011e32:	d301      	bcc.n	10011e38 <__aeabi_idiv+0x1b4>
10011e34:	4240      	negs	r0, r0
10011e36:	2b00      	cmp	r3, #0
10011e38:	d500      	bpl.n	10011e3c <__aeabi_idiv+0x1b8>
10011e3a:	4249      	negs	r1, r1
10011e3c:	4770      	bx	lr
10011e3e:	4663      	mov	r3, ip
10011e40:	105b      	asrs	r3, r3, #1
10011e42:	d300      	bcc.n	10011e46 <__aeabi_idiv+0x1c2>
10011e44:	4240      	negs	r0, r0
10011e46:	b501      	push	{r0, lr}
10011e48:	2000      	movs	r0, #0
10011e4a:	f000 f805 	bl	10011e58 <__aeabi_idiv0>
10011e4e:	bd02      	pop	{r1, pc}

10011e50 <__aeabi_idivmod>:
10011e50:	2900      	cmp	r1, #0
10011e52:	d0f8      	beq.n	10011e46 <__aeabi_idiv+0x1c2>
10011e54:	e716      	b.n	10011c84 <__aeabi_idiv>
10011e56:	4770      	bx	lr

10011e58 <__aeabi_idiv0>:
10011e58:	4770      	bx	lr
10011e5a:	46c0      	nop			; (mov r8, r8)

10011e5c <__aeabi_cdrcmple>:
10011e5c:	4684      	mov	ip, r0
10011e5e:	1c10      	adds	r0, r2, #0
10011e60:	4662      	mov	r2, ip
10011e62:	468c      	mov	ip, r1
10011e64:	1c19      	adds	r1, r3, #0
10011e66:	4663      	mov	r3, ip
10011e68:	e000      	b.n	10011e6c <__aeabi_cdcmpeq>
10011e6a:	46c0      	nop			; (mov r8, r8)

10011e6c <__aeabi_cdcmpeq>:
10011e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011e6e:	f000 fe37 	bl	10012ae0 <__ledf2>
10011e72:	2800      	cmp	r0, #0
10011e74:	d401      	bmi.n	10011e7a <__aeabi_cdcmpeq+0xe>
10011e76:	2100      	movs	r1, #0
10011e78:	42c8      	cmn	r0, r1
10011e7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011e7c <__aeabi_dcmpeq>:
10011e7c:	b510      	push	{r4, lr}
10011e7e:	f000 fd8b 	bl	10012998 <__eqdf2>
10011e82:	4240      	negs	r0, r0
10011e84:	3001      	adds	r0, #1
10011e86:	bd10      	pop	{r4, pc}

10011e88 <__aeabi_dcmplt>:
10011e88:	b510      	push	{r4, lr}
10011e8a:	f000 fe29 	bl	10012ae0 <__ledf2>
10011e8e:	2800      	cmp	r0, #0
10011e90:	db01      	blt.n	10011e96 <__aeabi_dcmplt+0xe>
10011e92:	2000      	movs	r0, #0
10011e94:	bd10      	pop	{r4, pc}
10011e96:	2001      	movs	r0, #1
10011e98:	bd10      	pop	{r4, pc}
10011e9a:	46c0      	nop			; (mov r8, r8)

10011e9c <__aeabi_dcmple>:
10011e9c:	b510      	push	{r4, lr}
10011e9e:	f000 fe1f 	bl	10012ae0 <__ledf2>
10011ea2:	2800      	cmp	r0, #0
10011ea4:	dd01      	ble.n	10011eaa <__aeabi_dcmple+0xe>
10011ea6:	2000      	movs	r0, #0
10011ea8:	bd10      	pop	{r4, pc}
10011eaa:	2001      	movs	r0, #1
10011eac:	bd10      	pop	{r4, pc}
10011eae:	46c0      	nop			; (mov r8, r8)

10011eb0 <__aeabi_dcmpgt>:
10011eb0:	b510      	push	{r4, lr}
10011eb2:	f000 fdb1 	bl	10012a18 <__gedf2>
10011eb6:	2800      	cmp	r0, #0
10011eb8:	dc01      	bgt.n	10011ebe <__aeabi_dcmpgt+0xe>
10011eba:	2000      	movs	r0, #0
10011ebc:	bd10      	pop	{r4, pc}
10011ebe:	2001      	movs	r0, #1
10011ec0:	bd10      	pop	{r4, pc}
10011ec2:	46c0      	nop			; (mov r8, r8)

10011ec4 <__aeabi_dcmpge>:
10011ec4:	b510      	push	{r4, lr}
10011ec6:	f000 fda7 	bl	10012a18 <__gedf2>
10011eca:	2800      	cmp	r0, #0
10011ecc:	da01      	bge.n	10011ed2 <__aeabi_dcmpge+0xe>
10011ece:	2000      	movs	r0, #0
10011ed0:	bd10      	pop	{r4, pc}
10011ed2:	2001      	movs	r0, #1
10011ed4:	bd10      	pop	{r4, pc}
10011ed6:	46c0      	nop			; (mov r8, r8)

10011ed8 <__aeabi_cfrcmple>:
10011ed8:	4684      	mov	ip, r0
10011eda:	1c08      	adds	r0, r1, #0
10011edc:	4661      	mov	r1, ip
10011ede:	e7ff      	b.n	10011ee0 <__aeabi_cfcmpeq>

10011ee0 <__aeabi_cfcmpeq>:
10011ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011ee2:	f000 fa1b 	bl	1001231c <__lesf2>
10011ee6:	2800      	cmp	r0, #0
10011ee8:	d401      	bmi.n	10011eee <__aeabi_cfcmpeq+0xe>
10011eea:	2100      	movs	r1, #0
10011eec:	42c8      	cmn	r0, r1
10011eee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011ef0 <__aeabi_fcmpeq>:
10011ef0:	b510      	push	{r4, lr}
10011ef2:	f000 f9a7 	bl	10012244 <__eqsf2>
10011ef6:	4240      	negs	r0, r0
10011ef8:	3001      	adds	r0, #1
10011efa:	bd10      	pop	{r4, pc}

10011efc <__aeabi_fcmplt>:
10011efc:	b510      	push	{r4, lr}
10011efe:	f000 fa0d 	bl	1001231c <__lesf2>
10011f02:	2800      	cmp	r0, #0
10011f04:	db01      	blt.n	10011f0a <__aeabi_fcmplt+0xe>
10011f06:	2000      	movs	r0, #0
10011f08:	bd10      	pop	{r4, pc}
10011f0a:	2001      	movs	r0, #1
10011f0c:	bd10      	pop	{r4, pc}
10011f0e:	46c0      	nop			; (mov r8, r8)

10011f10 <__aeabi_fcmple>:
10011f10:	b510      	push	{r4, lr}
10011f12:	f000 fa03 	bl	1001231c <__lesf2>
10011f16:	2800      	cmp	r0, #0
10011f18:	dd01      	ble.n	10011f1e <__aeabi_fcmple+0xe>
10011f1a:	2000      	movs	r0, #0
10011f1c:	bd10      	pop	{r4, pc}
10011f1e:	2001      	movs	r0, #1
10011f20:	bd10      	pop	{r4, pc}
10011f22:	46c0      	nop			; (mov r8, r8)

10011f24 <__aeabi_fcmpgt>:
10011f24:	b510      	push	{r4, lr}
10011f26:	f000 f9b5 	bl	10012294 <__gesf2>
10011f2a:	2800      	cmp	r0, #0
10011f2c:	dc01      	bgt.n	10011f32 <__aeabi_fcmpgt+0xe>
10011f2e:	2000      	movs	r0, #0
10011f30:	bd10      	pop	{r4, pc}
10011f32:	2001      	movs	r0, #1
10011f34:	bd10      	pop	{r4, pc}
10011f36:	46c0      	nop			; (mov r8, r8)

10011f38 <__aeabi_fcmpge>:
10011f38:	b510      	push	{r4, lr}
10011f3a:	f000 f9ab 	bl	10012294 <__gesf2>
10011f3e:	2800      	cmp	r0, #0
10011f40:	da01      	bge.n	10011f46 <__aeabi_fcmpge+0xe>
10011f42:	2000      	movs	r0, #0
10011f44:	bd10      	pop	{r4, pc}
10011f46:	2001      	movs	r0, #1
10011f48:	bd10      	pop	{r4, pc}
10011f4a:	46c0      	nop			; (mov r8, r8)

10011f4c <__aeabi_lmul>:
10011f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f4e:	464f      	mov	r7, r9
10011f50:	4646      	mov	r6, r8
10011f52:	b4c0      	push	{r6, r7}
10011f54:	0416      	lsls	r6, r2, #16
10011f56:	0c36      	lsrs	r6, r6, #16
10011f58:	4699      	mov	r9, r3
10011f5a:	0033      	movs	r3, r6
10011f5c:	0405      	lsls	r5, r0, #16
10011f5e:	0c2c      	lsrs	r4, r5, #16
10011f60:	0c07      	lsrs	r7, r0, #16
10011f62:	0c15      	lsrs	r5, r2, #16
10011f64:	4363      	muls	r3, r4
10011f66:	437e      	muls	r6, r7
10011f68:	436f      	muls	r7, r5
10011f6a:	4365      	muls	r5, r4
10011f6c:	0c1c      	lsrs	r4, r3, #16
10011f6e:	19ad      	adds	r5, r5, r6
10011f70:	1964      	adds	r4, r4, r5
10011f72:	469c      	mov	ip, r3
10011f74:	42a6      	cmp	r6, r4
10011f76:	d903      	bls.n	10011f80 <__aeabi_lmul+0x34>
10011f78:	2380      	movs	r3, #128	; 0x80
10011f7a:	025b      	lsls	r3, r3, #9
10011f7c:	4698      	mov	r8, r3
10011f7e:	4447      	add	r7, r8
10011f80:	4663      	mov	r3, ip
10011f82:	0c25      	lsrs	r5, r4, #16
10011f84:	19ef      	adds	r7, r5, r7
10011f86:	041d      	lsls	r5, r3, #16
10011f88:	464b      	mov	r3, r9
10011f8a:	434a      	muls	r2, r1
10011f8c:	4343      	muls	r3, r0
10011f8e:	0c2d      	lsrs	r5, r5, #16
10011f90:	0424      	lsls	r4, r4, #16
10011f92:	1964      	adds	r4, r4, r5
10011f94:	1899      	adds	r1, r3, r2
10011f96:	19c9      	adds	r1, r1, r7
10011f98:	0020      	movs	r0, r4
10011f9a:	bc0c      	pop	{r2, r3}
10011f9c:	4690      	mov	r8, r2
10011f9e:	4699      	mov	r9, r3
10011fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011fa2:	46c0      	nop			; (mov r8, r8)

10011fa4 <__aeabi_f2uiz>:
10011fa4:	219e      	movs	r1, #158	; 0x9e
10011fa6:	b510      	push	{r4, lr}
10011fa8:	05c9      	lsls	r1, r1, #23
10011faa:	1c04      	adds	r4, r0, #0
10011fac:	f7ff ffc4 	bl	10011f38 <__aeabi_fcmpge>
10011fb0:	2800      	cmp	r0, #0
10011fb2:	d103      	bne.n	10011fbc <__aeabi_f2uiz+0x18>
10011fb4:	1c20      	adds	r0, r4, #0
10011fb6:	f000 fc8f 	bl	100128d8 <__aeabi_f2iz>
10011fba:	bd10      	pop	{r4, pc}
10011fbc:	219e      	movs	r1, #158	; 0x9e
10011fbe:	1c20      	adds	r0, r4, #0
10011fc0:	05c9      	lsls	r1, r1, #23
10011fc2:	f000 fb03 	bl	100125cc <__aeabi_fsub>
10011fc6:	f000 fc87 	bl	100128d8 <__aeabi_f2iz>
10011fca:	2380      	movs	r3, #128	; 0x80
10011fcc:	061b      	lsls	r3, r3, #24
10011fce:	469c      	mov	ip, r3
10011fd0:	4460      	add	r0, ip
10011fd2:	e7f2      	b.n	10011fba <__aeabi_f2uiz+0x16>

10011fd4 <__aeabi_d2uiz>:
10011fd4:	b570      	push	{r4, r5, r6, lr}
10011fd6:	2200      	movs	r2, #0
10011fd8:	4b0c      	ldr	r3, [pc, #48]	; (1001200c <__aeabi_d2uiz+0x38>)
10011fda:	0004      	movs	r4, r0
10011fdc:	000d      	movs	r5, r1
10011fde:	f7ff ff71 	bl	10011ec4 <__aeabi_dcmpge>
10011fe2:	2800      	cmp	r0, #0
10011fe4:	d104      	bne.n	10011ff0 <__aeabi_d2uiz+0x1c>
10011fe6:	0020      	movs	r0, r4
10011fe8:	0029      	movs	r1, r5
10011fea:	f001 fbb1 	bl	10013750 <__aeabi_d2iz>
10011fee:	bd70      	pop	{r4, r5, r6, pc}
10011ff0:	4b06      	ldr	r3, [pc, #24]	; (1001200c <__aeabi_d2uiz+0x38>)
10011ff2:	2200      	movs	r2, #0
10011ff4:	0020      	movs	r0, r4
10011ff6:	0029      	movs	r1, r5
10011ff8:	f001 f856 	bl	100130a8 <__aeabi_dsub>
10011ffc:	f001 fba8 	bl	10013750 <__aeabi_d2iz>
10012000:	2380      	movs	r3, #128	; 0x80
10012002:	061b      	lsls	r3, r3, #24
10012004:	469c      	mov	ip, r3
10012006:	4460      	add	r0, ip
10012008:	e7f1      	b.n	10011fee <__aeabi_d2uiz+0x1a>
1001200a:	46c0      	nop			; (mov r8, r8)
1001200c:	41e00000 	.word	0x41e00000

10012010 <__aeabi_fdiv>:
10012010:	b5f0      	push	{r4, r5, r6, r7, lr}
10012012:	4656      	mov	r6, sl
10012014:	4644      	mov	r4, r8
10012016:	465f      	mov	r7, fp
10012018:	464d      	mov	r5, r9
1001201a:	b4f0      	push	{r4, r5, r6, r7}
1001201c:	0244      	lsls	r4, r0, #9
1001201e:	0046      	lsls	r6, r0, #1
10012020:	0fc7      	lsrs	r7, r0, #31
10012022:	b083      	sub	sp, #12
10012024:	4688      	mov	r8, r1
10012026:	0a65      	lsrs	r5, r4, #9
10012028:	0e36      	lsrs	r6, r6, #24
1001202a:	46ba      	mov	sl, r7
1001202c:	d03d      	beq.n	100120aa <__aeabi_fdiv+0x9a>
1001202e:	2eff      	cmp	r6, #255	; 0xff
10012030:	d022      	beq.n	10012078 <__aeabi_fdiv+0x68>
10012032:	2300      	movs	r3, #0
10012034:	00ec      	lsls	r4, r5, #3
10012036:	2580      	movs	r5, #128	; 0x80
10012038:	4699      	mov	r9, r3
1001203a:	469b      	mov	fp, r3
1001203c:	04ed      	lsls	r5, r5, #19
1001203e:	4325      	orrs	r5, r4
10012040:	3e7f      	subs	r6, #127	; 0x7f
10012042:	4643      	mov	r3, r8
10012044:	025c      	lsls	r4, r3, #9
10012046:	0058      	lsls	r0, r3, #1
10012048:	0fdb      	lsrs	r3, r3, #31
1001204a:	0a64      	lsrs	r4, r4, #9
1001204c:	0e00      	lsrs	r0, r0, #24
1001204e:	4698      	mov	r8, r3
10012050:	d036      	beq.n	100120c0 <__aeabi_fdiv+0xb0>
10012052:	28ff      	cmp	r0, #255	; 0xff
10012054:	d030      	beq.n	100120b8 <__aeabi_fdiv+0xa8>
10012056:	2380      	movs	r3, #128	; 0x80
10012058:	2100      	movs	r1, #0
1001205a:	00e4      	lsls	r4, r4, #3
1001205c:	04db      	lsls	r3, r3, #19
1001205e:	431c      	orrs	r4, r3
10012060:	387f      	subs	r0, #127	; 0x7f
10012062:	1a30      	subs	r0, r6, r0
10012064:	9001      	str	r0, [sp, #4]
10012066:	4648      	mov	r0, r9
10012068:	4642      	mov	r2, r8
1001206a:	4308      	orrs	r0, r1
1001206c:	4e72      	ldr	r6, [pc, #456]	; (10012238 <__aeabi_fdiv+0x228>)
1001206e:	0080      	lsls	r0, r0, #2
10012070:	5830      	ldr	r0, [r6, r0]
10012072:	407a      	eors	r2, r7
10012074:	0013      	movs	r3, r2
10012076:	4687      	mov	pc, r0
10012078:	2d00      	cmp	r5, #0
1001207a:	d144      	bne.n	10012106 <__aeabi_fdiv+0xf6>
1001207c:	2308      	movs	r3, #8
1001207e:	4699      	mov	r9, r3
10012080:	3b06      	subs	r3, #6
10012082:	469b      	mov	fp, r3
10012084:	e7dd      	b.n	10012042 <__aeabi_fdiv+0x32>
10012086:	2201      	movs	r2, #1
10012088:	20ff      	movs	r0, #255	; 0xff
1001208a:	2400      	movs	r4, #0
1001208c:	401a      	ands	r2, r3
1001208e:	0264      	lsls	r4, r4, #9
10012090:	05c3      	lsls	r3, r0, #23
10012092:	0a64      	lsrs	r4, r4, #9
10012094:	07d2      	lsls	r2, r2, #31
10012096:	431c      	orrs	r4, r3
10012098:	4314      	orrs	r4, r2
1001209a:	0020      	movs	r0, r4
1001209c:	b003      	add	sp, #12
1001209e:	bc3c      	pop	{r2, r3, r4, r5}
100120a0:	4690      	mov	r8, r2
100120a2:	4699      	mov	r9, r3
100120a4:	46a2      	mov	sl, r4
100120a6:	46ab      	mov	fp, r5
100120a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120aa:	2d00      	cmp	r5, #0
100120ac:	d120      	bne.n	100120f0 <__aeabi_fdiv+0xe0>
100120ae:	2304      	movs	r3, #4
100120b0:	4699      	mov	r9, r3
100120b2:	3b03      	subs	r3, #3
100120b4:	469b      	mov	fp, r3
100120b6:	e7c4      	b.n	10012042 <__aeabi_fdiv+0x32>
100120b8:	2c00      	cmp	r4, #0
100120ba:	d117      	bne.n	100120ec <__aeabi_fdiv+0xdc>
100120bc:	2102      	movs	r1, #2
100120be:	e002      	b.n	100120c6 <__aeabi_fdiv+0xb6>
100120c0:	2c00      	cmp	r4, #0
100120c2:	d10a      	bne.n	100120da <__aeabi_fdiv+0xca>
100120c4:	2101      	movs	r1, #1
100120c6:	1a32      	subs	r2, r6, r0
100120c8:	9201      	str	r2, [sp, #4]
100120ca:	464a      	mov	r2, r9
100120cc:	4643      	mov	r3, r8
100120ce:	430a      	orrs	r2, r1
100120d0:	485a      	ldr	r0, [pc, #360]	; (1001223c <__aeabi_fdiv+0x22c>)
100120d2:	0092      	lsls	r2, r2, #2
100120d4:	5882      	ldr	r2, [r0, r2]
100120d6:	407b      	eors	r3, r7
100120d8:	4697      	mov	pc, r2
100120da:	0020      	movs	r0, r4
100120dc:	f001 fba6 	bl	1001382c <__clzsi2>
100120e0:	1f43      	subs	r3, r0, #5
100120e2:	3076      	adds	r0, #118	; 0x76
100120e4:	409c      	lsls	r4, r3
100120e6:	4240      	negs	r0, r0
100120e8:	2100      	movs	r1, #0
100120ea:	e7ba      	b.n	10012062 <__aeabi_fdiv+0x52>
100120ec:	2103      	movs	r1, #3
100120ee:	e7b8      	b.n	10012062 <__aeabi_fdiv+0x52>
100120f0:	0028      	movs	r0, r5
100120f2:	f001 fb9b 	bl	1001382c <__clzsi2>
100120f6:	1f43      	subs	r3, r0, #5
100120f8:	409d      	lsls	r5, r3
100120fa:	2300      	movs	r3, #0
100120fc:	3076      	adds	r0, #118	; 0x76
100120fe:	4246      	negs	r6, r0
10012100:	4699      	mov	r9, r3
10012102:	469b      	mov	fp, r3
10012104:	e79d      	b.n	10012042 <__aeabi_fdiv+0x32>
10012106:	230c      	movs	r3, #12
10012108:	4699      	mov	r9, r3
1001210a:	3b09      	subs	r3, #9
1001210c:	469b      	mov	fp, r3
1001210e:	e798      	b.n	10012042 <__aeabi_fdiv+0x32>
10012110:	2480      	movs	r4, #128	; 0x80
10012112:	2200      	movs	r2, #0
10012114:	03e4      	lsls	r4, r4, #15
10012116:	20ff      	movs	r0, #255	; 0xff
10012118:	e7b9      	b.n	1001208e <__aeabi_fdiv+0x7e>
1001211a:	2400      	movs	r4, #0
1001211c:	46c2      	mov	sl, r8
1001211e:	468b      	mov	fp, r1
10012120:	465a      	mov	r2, fp
10012122:	4653      	mov	r3, sl
10012124:	2a02      	cmp	r2, #2
10012126:	d0ae      	beq.n	10012086 <__aeabi_fdiv+0x76>
10012128:	2a03      	cmp	r2, #3
1001212a:	d07d      	beq.n	10012228 <__aeabi_fdiv+0x218>
1001212c:	2a01      	cmp	r2, #1
1001212e:	d131      	bne.n	10012194 <__aeabi_fdiv+0x184>
10012130:	2201      	movs	r2, #1
10012132:	2000      	movs	r0, #0
10012134:	401a      	ands	r2, r3
10012136:	2400      	movs	r4, #0
10012138:	e7a9      	b.n	1001208e <__aeabi_fdiv+0x7e>
1001213a:	2201      	movs	r2, #1
1001213c:	1a10      	subs	r0, r2, r0
1001213e:	281b      	cmp	r0, #27
10012140:	dd56      	ble.n	100121f0 <__aeabi_fdiv+0x1e0>
10012142:	401a      	ands	r2, r3
10012144:	2000      	movs	r0, #0
10012146:	2400      	movs	r4, #0
10012148:	e7a1      	b.n	1001208e <__aeabi_fdiv+0x7e>
1001214a:	2380      	movs	r3, #128	; 0x80
1001214c:	03db      	lsls	r3, r3, #15
1001214e:	421d      	tst	r5, r3
10012150:	d14b      	bne.n	100121ea <__aeabi_fdiv+0x1da>
10012152:	2380      	movs	r3, #128	; 0x80
10012154:	03db      	lsls	r3, r3, #15
10012156:	432b      	orrs	r3, r5
10012158:	025c      	lsls	r4, r3, #9
1001215a:	0a64      	lsrs	r4, r4, #9
1001215c:	003a      	movs	r2, r7
1001215e:	20ff      	movs	r0, #255	; 0xff
10012160:	e795      	b.n	1001208e <__aeabi_fdiv+0x7e>
10012162:	016d      	lsls	r5, r5, #5
10012164:	0160      	lsls	r0, r4, #5
10012166:	4285      	cmp	r5, r0
10012168:	d230      	bcs.n	100121cc <__aeabi_fdiv+0x1bc>
1001216a:	9a01      	ldr	r2, [sp, #4]
1001216c:	2400      	movs	r4, #0
1001216e:	3a01      	subs	r2, #1
10012170:	9201      	str	r2, [sp, #4]
10012172:	221b      	movs	r2, #27
10012174:	2701      	movs	r7, #1
10012176:	0029      	movs	r1, r5
10012178:	0064      	lsls	r4, r4, #1
1001217a:	006d      	lsls	r5, r5, #1
1001217c:	2900      	cmp	r1, #0
1001217e:	db01      	blt.n	10012184 <__aeabi_fdiv+0x174>
10012180:	42a8      	cmp	r0, r5
10012182:	d801      	bhi.n	10012188 <__aeabi_fdiv+0x178>
10012184:	1a2d      	subs	r5, r5, r0
10012186:	433c      	orrs	r4, r7
10012188:	3a01      	subs	r2, #1
1001218a:	2a00      	cmp	r2, #0
1001218c:	d1f3      	bne.n	10012176 <__aeabi_fdiv+0x166>
1001218e:	1e6a      	subs	r2, r5, #1
10012190:	4195      	sbcs	r5, r2
10012192:	432c      	orrs	r4, r5
10012194:	9801      	ldr	r0, [sp, #4]
10012196:	307f      	adds	r0, #127	; 0x7f
10012198:	2800      	cmp	r0, #0
1001219a:	ddce      	ble.n	1001213a <__aeabi_fdiv+0x12a>
1001219c:	0762      	lsls	r2, r4, #29
1001219e:	d004      	beq.n	100121aa <__aeabi_fdiv+0x19a>
100121a0:	220f      	movs	r2, #15
100121a2:	4022      	ands	r2, r4
100121a4:	2a04      	cmp	r2, #4
100121a6:	d000      	beq.n	100121aa <__aeabi_fdiv+0x19a>
100121a8:	3404      	adds	r4, #4
100121aa:	0122      	lsls	r2, r4, #4
100121ac:	d503      	bpl.n	100121b6 <__aeabi_fdiv+0x1a6>
100121ae:	4a24      	ldr	r2, [pc, #144]	; (10012240 <__aeabi_fdiv+0x230>)
100121b0:	9801      	ldr	r0, [sp, #4]
100121b2:	4014      	ands	r4, r2
100121b4:	3080      	adds	r0, #128	; 0x80
100121b6:	28fe      	cmp	r0, #254	; 0xfe
100121b8:	dd00      	ble.n	100121bc <__aeabi_fdiv+0x1ac>
100121ba:	e764      	b.n	10012086 <__aeabi_fdiv+0x76>
100121bc:	2201      	movs	r2, #1
100121be:	01a4      	lsls	r4, r4, #6
100121c0:	0a64      	lsrs	r4, r4, #9
100121c2:	b2c0      	uxtb	r0, r0
100121c4:	401a      	ands	r2, r3
100121c6:	e762      	b.n	1001208e <__aeabi_fdiv+0x7e>
100121c8:	002c      	movs	r4, r5
100121ca:	e7a9      	b.n	10012120 <__aeabi_fdiv+0x110>
100121cc:	1a2d      	subs	r5, r5, r0
100121ce:	221a      	movs	r2, #26
100121d0:	2401      	movs	r4, #1
100121d2:	e7cf      	b.n	10012174 <__aeabi_fdiv+0x164>
100121d4:	026b      	lsls	r3, r5, #9
100121d6:	d5bc      	bpl.n	10012152 <__aeabi_fdiv+0x142>
100121d8:	2400      	movs	r4, #0
100121da:	2380      	movs	r3, #128	; 0x80
100121dc:	03db      	lsls	r3, r3, #15
100121de:	431c      	orrs	r4, r3
100121e0:	0264      	lsls	r4, r4, #9
100121e2:	0a64      	lsrs	r4, r4, #9
100121e4:	4642      	mov	r2, r8
100121e6:	20ff      	movs	r0, #255	; 0xff
100121e8:	e751      	b.n	1001208e <__aeabi_fdiv+0x7e>
100121ea:	421c      	tst	r4, r3
100121ec:	d1b3      	bne.n	10012156 <__aeabi_fdiv+0x146>
100121ee:	e7f4      	b.n	100121da <__aeabi_fdiv+0x1ca>
100121f0:	0021      	movs	r1, r4
100121f2:	2220      	movs	r2, #32
100121f4:	40c1      	lsrs	r1, r0
100121f6:	1a10      	subs	r0, r2, r0
100121f8:	4084      	lsls	r4, r0
100121fa:	1e62      	subs	r2, r4, #1
100121fc:	4194      	sbcs	r4, r2
100121fe:	430c      	orrs	r4, r1
10012200:	0762      	lsls	r2, r4, #29
10012202:	d004      	beq.n	1001220e <__aeabi_fdiv+0x1fe>
10012204:	220f      	movs	r2, #15
10012206:	4022      	ands	r2, r4
10012208:	2a04      	cmp	r2, #4
1001220a:	d000      	beq.n	1001220e <__aeabi_fdiv+0x1fe>
1001220c:	3404      	adds	r4, #4
1001220e:	0162      	lsls	r2, r4, #5
10012210:	d504      	bpl.n	1001221c <__aeabi_fdiv+0x20c>
10012212:	2201      	movs	r2, #1
10012214:	2001      	movs	r0, #1
10012216:	401a      	ands	r2, r3
10012218:	2400      	movs	r4, #0
1001221a:	e738      	b.n	1001208e <__aeabi_fdiv+0x7e>
1001221c:	2201      	movs	r2, #1
1001221e:	01a4      	lsls	r4, r4, #6
10012220:	0a64      	lsrs	r4, r4, #9
10012222:	401a      	ands	r2, r3
10012224:	2000      	movs	r0, #0
10012226:	e732      	b.n	1001208e <__aeabi_fdiv+0x7e>
10012228:	2380      	movs	r3, #128	; 0x80
1001222a:	03db      	lsls	r3, r3, #15
1001222c:	431c      	orrs	r4, r3
1001222e:	0264      	lsls	r4, r4, #9
10012230:	0a64      	lsrs	r4, r4, #9
10012232:	4652      	mov	r2, sl
10012234:	20ff      	movs	r0, #255	; 0xff
10012236:	e72a      	b.n	1001208e <__aeabi_fdiv+0x7e>
10012238:	100166e8 	.word	0x100166e8
1001223c:	10016728 	.word	0x10016728
10012240:	f7ffffff 	.word	0xf7ffffff

10012244 <__eqsf2>:
10012244:	0243      	lsls	r3, r0, #9
10012246:	b570      	push	{r4, r5, r6, lr}
10012248:	0042      	lsls	r2, r0, #1
1001224a:	004c      	lsls	r4, r1, #1
1001224c:	0a5d      	lsrs	r5, r3, #9
1001224e:	0fc3      	lsrs	r3, r0, #31
10012250:	0248      	lsls	r0, r1, #9
10012252:	0e12      	lsrs	r2, r2, #24
10012254:	0a46      	lsrs	r6, r0, #9
10012256:	0e24      	lsrs	r4, r4, #24
10012258:	0fc9      	lsrs	r1, r1, #31
1001225a:	2aff      	cmp	r2, #255	; 0xff
1001225c:	d00f      	beq.n	1001227e <__eqsf2+0x3a>
1001225e:	2cff      	cmp	r4, #255	; 0xff
10012260:	d011      	beq.n	10012286 <__eqsf2+0x42>
10012262:	2001      	movs	r0, #1
10012264:	42a2      	cmp	r2, r4
10012266:	d000      	beq.n	1001226a <__eqsf2+0x26>
10012268:	bd70      	pop	{r4, r5, r6, pc}
1001226a:	42b5      	cmp	r5, r6
1001226c:	d1fc      	bne.n	10012268 <__eqsf2+0x24>
1001226e:	428b      	cmp	r3, r1
10012270:	d00d      	beq.n	1001228e <__eqsf2+0x4a>
10012272:	2a00      	cmp	r2, #0
10012274:	d1f8      	bne.n	10012268 <__eqsf2+0x24>
10012276:	0028      	movs	r0, r5
10012278:	1e43      	subs	r3, r0, #1
1001227a:	4198      	sbcs	r0, r3
1001227c:	e7f4      	b.n	10012268 <__eqsf2+0x24>
1001227e:	2001      	movs	r0, #1
10012280:	2d00      	cmp	r5, #0
10012282:	d1f1      	bne.n	10012268 <__eqsf2+0x24>
10012284:	e7eb      	b.n	1001225e <__eqsf2+0x1a>
10012286:	2001      	movs	r0, #1
10012288:	2e00      	cmp	r6, #0
1001228a:	d1ed      	bne.n	10012268 <__eqsf2+0x24>
1001228c:	e7e9      	b.n	10012262 <__eqsf2+0x1e>
1001228e:	2000      	movs	r0, #0
10012290:	e7ea      	b.n	10012268 <__eqsf2+0x24>
10012292:	46c0      	nop			; (mov r8, r8)

10012294 <__gesf2>:
10012294:	0243      	lsls	r3, r0, #9
10012296:	b5f0      	push	{r4, r5, r6, r7, lr}
10012298:	0042      	lsls	r2, r0, #1
1001229a:	0a5d      	lsrs	r5, r3, #9
1001229c:	0fc3      	lsrs	r3, r0, #31
1001229e:	0248      	lsls	r0, r1, #9
100122a0:	0a44      	lsrs	r4, r0, #9
100122a2:	0048      	lsls	r0, r1, #1
100122a4:	0e12      	lsrs	r2, r2, #24
100122a6:	0e00      	lsrs	r0, r0, #24
100122a8:	0fc9      	lsrs	r1, r1, #31
100122aa:	2aff      	cmp	r2, #255	; 0xff
100122ac:	d01f      	beq.n	100122ee <__gesf2+0x5a>
100122ae:	28ff      	cmp	r0, #255	; 0xff
100122b0:	d022      	beq.n	100122f8 <__gesf2+0x64>
100122b2:	2a00      	cmp	r2, #0
100122b4:	d109      	bne.n	100122ca <__gesf2+0x36>
100122b6:	426e      	negs	r6, r5
100122b8:	416e      	adcs	r6, r5
100122ba:	2800      	cmp	r0, #0
100122bc:	d10f      	bne.n	100122de <__gesf2+0x4a>
100122be:	2c00      	cmp	r4, #0
100122c0:	d10d      	bne.n	100122de <__gesf2+0x4a>
100122c2:	2000      	movs	r0, #0
100122c4:	2d00      	cmp	r5, #0
100122c6:	d009      	beq.n	100122dc <__gesf2+0x48>
100122c8:	e005      	b.n	100122d6 <__gesf2+0x42>
100122ca:	2800      	cmp	r0, #0
100122cc:	d101      	bne.n	100122d2 <__gesf2+0x3e>
100122ce:	2c00      	cmp	r4, #0
100122d0:	d001      	beq.n	100122d6 <__gesf2+0x42>
100122d2:	428b      	cmp	r3, r1
100122d4:	d013      	beq.n	100122fe <__gesf2+0x6a>
100122d6:	4258      	negs	r0, r3
100122d8:	2301      	movs	r3, #1
100122da:	4318      	orrs	r0, r3
100122dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122de:	2e00      	cmp	r6, #0
100122e0:	d0f7      	beq.n	100122d2 <__gesf2+0x3e>
100122e2:	4248      	negs	r0, r1
100122e4:	4141      	adcs	r1, r0
100122e6:	2001      	movs	r0, #1
100122e8:	4249      	negs	r1, r1
100122ea:	4308      	orrs	r0, r1
100122ec:	e7f6      	b.n	100122dc <__gesf2+0x48>
100122ee:	2d00      	cmp	r5, #0
100122f0:	d0dd      	beq.n	100122ae <__gesf2+0x1a>
100122f2:	2002      	movs	r0, #2
100122f4:	4240      	negs	r0, r0
100122f6:	e7f1      	b.n	100122dc <__gesf2+0x48>
100122f8:	2c00      	cmp	r4, #0
100122fa:	d0da      	beq.n	100122b2 <__gesf2+0x1e>
100122fc:	e7f9      	b.n	100122f2 <__gesf2+0x5e>
100122fe:	4282      	cmp	r2, r0
10012300:	dce9      	bgt.n	100122d6 <__gesf2+0x42>
10012302:	db04      	blt.n	1001230e <__gesf2+0x7a>
10012304:	42a5      	cmp	r5, r4
10012306:	d8e6      	bhi.n	100122d6 <__gesf2+0x42>
10012308:	2000      	movs	r0, #0
1001230a:	42a5      	cmp	r5, r4
1001230c:	d2e6      	bcs.n	100122dc <__gesf2+0x48>
1001230e:	4258      	negs	r0, r3
10012310:	4143      	adcs	r3, r0
10012312:	2001      	movs	r0, #1
10012314:	425b      	negs	r3, r3
10012316:	4318      	orrs	r0, r3
10012318:	e7e0      	b.n	100122dc <__gesf2+0x48>
1001231a:	46c0      	nop			; (mov r8, r8)

1001231c <__lesf2>:
1001231c:	0243      	lsls	r3, r0, #9
1001231e:	b5f0      	push	{r4, r5, r6, r7, lr}
10012320:	0042      	lsls	r2, r0, #1
10012322:	004c      	lsls	r4, r1, #1
10012324:	0a5e      	lsrs	r6, r3, #9
10012326:	0fc3      	lsrs	r3, r0, #31
10012328:	0248      	lsls	r0, r1, #9
1001232a:	0e12      	lsrs	r2, r2, #24
1001232c:	0a45      	lsrs	r5, r0, #9
1001232e:	0e24      	lsrs	r4, r4, #24
10012330:	0fc9      	lsrs	r1, r1, #31
10012332:	2aff      	cmp	r2, #255	; 0xff
10012334:	d017      	beq.n	10012366 <__lesf2+0x4a>
10012336:	2cff      	cmp	r4, #255	; 0xff
10012338:	d019      	beq.n	1001236e <__lesf2+0x52>
1001233a:	2a00      	cmp	r2, #0
1001233c:	d10b      	bne.n	10012356 <__lesf2+0x3a>
1001233e:	4270      	negs	r0, r6
10012340:	4170      	adcs	r0, r6
10012342:	2c00      	cmp	r4, #0
10012344:	d017      	beq.n	10012376 <__lesf2+0x5a>
10012346:	2800      	cmp	r0, #0
10012348:	d007      	beq.n	1001235a <__lesf2+0x3e>
1001234a:	4248      	negs	r0, r1
1001234c:	4141      	adcs	r1, r0
1001234e:	2001      	movs	r0, #1
10012350:	4249      	negs	r1, r1
10012352:	4308      	orrs	r0, r1
10012354:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012356:	2c00      	cmp	r4, #0
10012358:	d013      	beq.n	10012382 <__lesf2+0x66>
1001235a:	428b      	cmp	r3, r1
1001235c:	d014      	beq.n	10012388 <__lesf2+0x6c>
1001235e:	4258      	negs	r0, r3
10012360:	2301      	movs	r3, #1
10012362:	4318      	orrs	r0, r3
10012364:	e7f6      	b.n	10012354 <__lesf2+0x38>
10012366:	2002      	movs	r0, #2
10012368:	2e00      	cmp	r6, #0
1001236a:	d1f3      	bne.n	10012354 <__lesf2+0x38>
1001236c:	e7e3      	b.n	10012336 <__lesf2+0x1a>
1001236e:	2002      	movs	r0, #2
10012370:	2d00      	cmp	r5, #0
10012372:	d1ef      	bne.n	10012354 <__lesf2+0x38>
10012374:	e7e1      	b.n	1001233a <__lesf2+0x1e>
10012376:	2d00      	cmp	r5, #0
10012378:	d1e5      	bne.n	10012346 <__lesf2+0x2a>
1001237a:	2000      	movs	r0, #0
1001237c:	2e00      	cmp	r6, #0
1001237e:	d0e9      	beq.n	10012354 <__lesf2+0x38>
10012380:	e7ed      	b.n	1001235e <__lesf2+0x42>
10012382:	2d00      	cmp	r5, #0
10012384:	d1e9      	bne.n	1001235a <__lesf2+0x3e>
10012386:	e7ea      	b.n	1001235e <__lesf2+0x42>
10012388:	42a2      	cmp	r2, r4
1001238a:	dce8      	bgt.n	1001235e <__lesf2+0x42>
1001238c:	db04      	blt.n	10012398 <__lesf2+0x7c>
1001238e:	42ae      	cmp	r6, r5
10012390:	d8e5      	bhi.n	1001235e <__lesf2+0x42>
10012392:	2000      	movs	r0, #0
10012394:	42ae      	cmp	r6, r5
10012396:	d2dd      	bcs.n	10012354 <__lesf2+0x38>
10012398:	4258      	negs	r0, r3
1001239a:	4143      	adcs	r3, r0
1001239c:	2001      	movs	r0, #1
1001239e:	425b      	negs	r3, r3
100123a0:	4318      	orrs	r0, r3
100123a2:	e7d7      	b.n	10012354 <__lesf2+0x38>

100123a4 <__aeabi_fmul>:
100123a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100123a6:	4657      	mov	r7, sl
100123a8:	464e      	mov	r6, r9
100123aa:	4645      	mov	r5, r8
100123ac:	0043      	lsls	r3, r0, #1
100123ae:	b4e0      	push	{r5, r6, r7}
100123b0:	0246      	lsls	r6, r0, #9
100123b2:	4688      	mov	r8, r1
100123b4:	0a76      	lsrs	r6, r6, #9
100123b6:	0e1f      	lsrs	r7, r3, #24
100123b8:	0fc4      	lsrs	r4, r0, #31
100123ba:	2f00      	cmp	r7, #0
100123bc:	d047      	beq.n	1001244e <__aeabi_fmul+0xaa>
100123be:	2fff      	cmp	r7, #255	; 0xff
100123c0:	d025      	beq.n	1001240e <__aeabi_fmul+0x6a>
100123c2:	2300      	movs	r3, #0
100123c4:	2580      	movs	r5, #128	; 0x80
100123c6:	469a      	mov	sl, r3
100123c8:	4699      	mov	r9, r3
100123ca:	00f6      	lsls	r6, r6, #3
100123cc:	04ed      	lsls	r5, r5, #19
100123ce:	432e      	orrs	r6, r5
100123d0:	3f7f      	subs	r7, #127	; 0x7f
100123d2:	4643      	mov	r3, r8
100123d4:	4642      	mov	r2, r8
100123d6:	025d      	lsls	r5, r3, #9
100123d8:	0fd2      	lsrs	r2, r2, #31
100123da:	005b      	lsls	r3, r3, #1
100123dc:	0a6d      	lsrs	r5, r5, #9
100123de:	0e1b      	lsrs	r3, r3, #24
100123e0:	4690      	mov	r8, r2
100123e2:	d040      	beq.n	10012466 <__aeabi_fmul+0xc2>
100123e4:	2bff      	cmp	r3, #255	; 0xff
100123e6:	d039      	beq.n	1001245c <__aeabi_fmul+0xb8>
100123e8:	2280      	movs	r2, #128	; 0x80
100123ea:	2000      	movs	r0, #0
100123ec:	00ed      	lsls	r5, r5, #3
100123ee:	04d2      	lsls	r2, r2, #19
100123f0:	4315      	orrs	r5, r2
100123f2:	3b7f      	subs	r3, #127	; 0x7f
100123f4:	18fb      	adds	r3, r7, r3
100123f6:	4642      	mov	r2, r8
100123f8:	4657      	mov	r7, sl
100123fa:	1c59      	adds	r1, r3, #1
100123fc:	4062      	eors	r2, r4
100123fe:	468c      	mov	ip, r1
10012400:	4307      	orrs	r7, r0
10012402:	2f0f      	cmp	r7, #15
10012404:	d85c      	bhi.n	100124c0 <__aeabi_fmul+0x11c>
10012406:	496f      	ldr	r1, [pc, #444]	; (100125c4 <__aeabi_fmul+0x220>)
10012408:	00bf      	lsls	r7, r7, #2
1001240a:	59c9      	ldr	r1, [r1, r7]
1001240c:	468f      	mov	pc, r1
1001240e:	2e00      	cmp	r6, #0
10012410:	d145      	bne.n	1001249e <__aeabi_fmul+0xfa>
10012412:	2308      	movs	r3, #8
10012414:	469a      	mov	sl, r3
10012416:	3b06      	subs	r3, #6
10012418:	4699      	mov	r9, r3
1001241a:	e7da      	b.n	100123d2 <__aeabi_fmul+0x2e>
1001241c:	4642      	mov	r2, r8
1001241e:	2802      	cmp	r0, #2
10012420:	d02d      	beq.n	1001247e <__aeabi_fmul+0xda>
10012422:	2803      	cmp	r0, #3
10012424:	d100      	bne.n	10012428 <__aeabi_fmul+0x84>
10012426:	e0c3      	b.n	100125b0 <__aeabi_fmul+0x20c>
10012428:	2801      	cmp	r0, #1
1001242a:	d000      	beq.n	1001242e <__aeabi_fmul+0x8a>
1001242c:	e0a2      	b.n	10012574 <__aeabi_fmul+0x1d0>
1001242e:	2500      	movs	r5, #0
10012430:	2600      	movs	r6, #0
10012432:	4002      	ands	r2, r0
10012434:	b2d4      	uxtb	r4, r2
10012436:	0276      	lsls	r6, r6, #9
10012438:	05ed      	lsls	r5, r5, #23
1001243a:	0a76      	lsrs	r6, r6, #9
1001243c:	432e      	orrs	r6, r5
1001243e:	07e4      	lsls	r4, r4, #31
10012440:	4326      	orrs	r6, r4
10012442:	0030      	movs	r0, r6
10012444:	bc1c      	pop	{r2, r3, r4}
10012446:	4690      	mov	r8, r2
10012448:	4699      	mov	r9, r3
1001244a:	46a2      	mov	sl, r4
1001244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001244e:	2e00      	cmp	r6, #0
10012450:	d11a      	bne.n	10012488 <__aeabi_fmul+0xe4>
10012452:	2304      	movs	r3, #4
10012454:	469a      	mov	sl, r3
10012456:	3b03      	subs	r3, #3
10012458:	4699      	mov	r9, r3
1001245a:	e7ba      	b.n	100123d2 <__aeabi_fmul+0x2e>
1001245c:	002a      	movs	r2, r5
1001245e:	1e51      	subs	r1, r2, #1
10012460:	418a      	sbcs	r2, r1
10012462:	1c90      	adds	r0, r2, #2
10012464:	e7c6      	b.n	100123f4 <__aeabi_fmul+0x50>
10012466:	2001      	movs	r0, #1
10012468:	2d00      	cmp	r5, #0
1001246a:	d0c3      	beq.n	100123f4 <__aeabi_fmul+0x50>
1001246c:	0028      	movs	r0, r5
1001246e:	f001 f9dd 	bl	1001382c <__clzsi2>
10012472:	1f43      	subs	r3, r0, #5
10012474:	3076      	adds	r0, #118	; 0x76
10012476:	409d      	lsls	r5, r3
10012478:	4243      	negs	r3, r0
1001247a:	2000      	movs	r0, #0
1001247c:	e7ba      	b.n	100123f4 <__aeabi_fmul+0x50>
1001247e:	2401      	movs	r4, #1
10012480:	25ff      	movs	r5, #255	; 0xff
10012482:	4014      	ands	r4, r2
10012484:	2600      	movs	r6, #0
10012486:	e7d6      	b.n	10012436 <__aeabi_fmul+0x92>
10012488:	0030      	movs	r0, r6
1001248a:	f001 f9cf 	bl	1001382c <__clzsi2>
1001248e:	1f43      	subs	r3, r0, #5
10012490:	409e      	lsls	r6, r3
10012492:	2300      	movs	r3, #0
10012494:	3076      	adds	r0, #118	; 0x76
10012496:	4247      	negs	r7, r0
10012498:	469a      	mov	sl, r3
1001249a:	4699      	mov	r9, r3
1001249c:	e799      	b.n	100123d2 <__aeabi_fmul+0x2e>
1001249e:	230c      	movs	r3, #12
100124a0:	469a      	mov	sl, r3
100124a2:	3b09      	subs	r3, #9
100124a4:	4699      	mov	r9, r3
100124a6:	e794      	b.n	100123d2 <__aeabi_fmul+0x2e>
100124a8:	2680      	movs	r6, #128	; 0x80
100124aa:	2400      	movs	r4, #0
100124ac:	03f6      	lsls	r6, r6, #15
100124ae:	25ff      	movs	r5, #255	; 0xff
100124b0:	e7c1      	b.n	10012436 <__aeabi_fmul+0x92>
100124b2:	0035      	movs	r5, r6
100124b4:	4648      	mov	r0, r9
100124b6:	e7b2      	b.n	1001241e <__aeabi_fmul+0x7a>
100124b8:	0035      	movs	r5, r6
100124ba:	0022      	movs	r2, r4
100124bc:	4648      	mov	r0, r9
100124be:	e7ae      	b.n	1001241e <__aeabi_fmul+0x7a>
100124c0:	0429      	lsls	r1, r5, #16
100124c2:	0c09      	lsrs	r1, r1, #16
100124c4:	0008      	movs	r0, r1
100124c6:	0c37      	lsrs	r7, r6, #16
100124c8:	0436      	lsls	r6, r6, #16
100124ca:	0c36      	lsrs	r6, r6, #16
100124cc:	0c2c      	lsrs	r4, r5, #16
100124ce:	4379      	muls	r1, r7
100124d0:	4370      	muls	r0, r6
100124d2:	4367      	muls	r7, r4
100124d4:	4374      	muls	r4, r6
100124d6:	0c06      	lsrs	r6, r0, #16
100124d8:	1864      	adds	r4, r4, r1
100124da:	1936      	adds	r6, r6, r4
100124dc:	42b1      	cmp	r1, r6
100124de:	d903      	bls.n	100124e8 <__aeabi_fmul+0x144>
100124e0:	2180      	movs	r1, #128	; 0x80
100124e2:	0249      	lsls	r1, r1, #9
100124e4:	4688      	mov	r8, r1
100124e6:	4447      	add	r7, r8
100124e8:	0400      	lsls	r0, r0, #16
100124ea:	0c00      	lsrs	r0, r0, #16
100124ec:	0431      	lsls	r1, r6, #16
100124ee:	1809      	adds	r1, r1, r0
100124f0:	018d      	lsls	r5, r1, #6
100124f2:	1e68      	subs	r0, r5, #1
100124f4:	4185      	sbcs	r5, r0
100124f6:	0e89      	lsrs	r1, r1, #26
100124f8:	4329      	orrs	r1, r5
100124fa:	0c35      	lsrs	r5, r6, #16
100124fc:	19ed      	adds	r5, r5, r7
100124fe:	01ad      	lsls	r5, r5, #6
10012500:	430d      	orrs	r5, r1
10012502:	0129      	lsls	r1, r5, #4
10012504:	d504      	bpl.n	10012510 <__aeabi_fmul+0x16c>
10012506:	2301      	movs	r3, #1
10012508:	0869      	lsrs	r1, r5, #1
1001250a:	401d      	ands	r5, r3
1001250c:	4663      	mov	r3, ip
1001250e:	430d      	orrs	r5, r1
10012510:	0019      	movs	r1, r3
10012512:	317f      	adds	r1, #127	; 0x7f
10012514:	2900      	cmp	r1, #0
10012516:	dd25      	ble.n	10012564 <__aeabi_fmul+0x1c0>
10012518:	0768      	lsls	r0, r5, #29
1001251a:	d004      	beq.n	10012526 <__aeabi_fmul+0x182>
1001251c:	200f      	movs	r0, #15
1001251e:	4028      	ands	r0, r5
10012520:	2804      	cmp	r0, #4
10012522:	d000      	beq.n	10012526 <__aeabi_fmul+0x182>
10012524:	3504      	adds	r5, #4
10012526:	0128      	lsls	r0, r5, #4
10012528:	d503      	bpl.n	10012532 <__aeabi_fmul+0x18e>
1001252a:	4927      	ldr	r1, [pc, #156]	; (100125c8 <__aeabi_fmul+0x224>)
1001252c:	3380      	adds	r3, #128	; 0x80
1001252e:	400d      	ands	r5, r1
10012530:	0019      	movs	r1, r3
10012532:	29fe      	cmp	r1, #254	; 0xfe
10012534:	dca3      	bgt.n	1001247e <__aeabi_fmul+0xda>
10012536:	2401      	movs	r4, #1
10012538:	01ad      	lsls	r5, r5, #6
1001253a:	0a6e      	lsrs	r6, r5, #9
1001253c:	4014      	ands	r4, r2
1001253e:	b2cd      	uxtb	r5, r1
10012540:	e779      	b.n	10012436 <__aeabi_fmul+0x92>
10012542:	2080      	movs	r0, #128	; 0x80
10012544:	03c0      	lsls	r0, r0, #15
10012546:	4206      	tst	r6, r0
10012548:	d007      	beq.n	1001255a <__aeabi_fmul+0x1b6>
1001254a:	4205      	tst	r5, r0
1001254c:	d105      	bne.n	1001255a <__aeabi_fmul+0x1b6>
1001254e:	4328      	orrs	r0, r5
10012550:	0246      	lsls	r6, r0, #9
10012552:	0a76      	lsrs	r6, r6, #9
10012554:	4644      	mov	r4, r8
10012556:	25ff      	movs	r5, #255	; 0xff
10012558:	e76d      	b.n	10012436 <__aeabi_fmul+0x92>
1001255a:	4306      	orrs	r6, r0
1001255c:	0276      	lsls	r6, r6, #9
1001255e:	0a76      	lsrs	r6, r6, #9
10012560:	25ff      	movs	r5, #255	; 0xff
10012562:	e768      	b.n	10012436 <__aeabi_fmul+0x92>
10012564:	2401      	movs	r4, #1
10012566:	1a61      	subs	r1, r4, r1
10012568:	291b      	cmp	r1, #27
1001256a:	dd05      	ble.n	10012578 <__aeabi_fmul+0x1d4>
1001256c:	4014      	ands	r4, r2
1001256e:	2500      	movs	r5, #0
10012570:	2600      	movs	r6, #0
10012572:	e760      	b.n	10012436 <__aeabi_fmul+0x92>
10012574:	4663      	mov	r3, ip
10012576:	e7cb      	b.n	10012510 <__aeabi_fmul+0x16c>
10012578:	002e      	movs	r6, r5
1001257a:	2320      	movs	r3, #32
1001257c:	40ce      	lsrs	r6, r1
1001257e:	1a59      	subs	r1, r3, r1
10012580:	408d      	lsls	r5, r1
10012582:	1e6b      	subs	r3, r5, #1
10012584:	419d      	sbcs	r5, r3
10012586:	432e      	orrs	r6, r5
10012588:	0773      	lsls	r3, r6, #29
1001258a:	d004      	beq.n	10012596 <__aeabi_fmul+0x1f2>
1001258c:	230f      	movs	r3, #15
1001258e:	4033      	ands	r3, r6
10012590:	2b04      	cmp	r3, #4
10012592:	d000      	beq.n	10012596 <__aeabi_fmul+0x1f2>
10012594:	3604      	adds	r6, #4
10012596:	0173      	lsls	r3, r6, #5
10012598:	d504      	bpl.n	100125a4 <__aeabi_fmul+0x200>
1001259a:	2401      	movs	r4, #1
1001259c:	2501      	movs	r5, #1
1001259e:	4014      	ands	r4, r2
100125a0:	2600      	movs	r6, #0
100125a2:	e748      	b.n	10012436 <__aeabi_fmul+0x92>
100125a4:	2401      	movs	r4, #1
100125a6:	01b6      	lsls	r6, r6, #6
100125a8:	0a76      	lsrs	r6, r6, #9
100125aa:	4014      	ands	r4, r2
100125ac:	2500      	movs	r5, #0
100125ae:	e742      	b.n	10012436 <__aeabi_fmul+0x92>
100125b0:	2680      	movs	r6, #128	; 0x80
100125b2:	2401      	movs	r4, #1
100125b4:	03f6      	lsls	r6, r6, #15
100125b6:	432e      	orrs	r6, r5
100125b8:	0276      	lsls	r6, r6, #9
100125ba:	0a76      	lsrs	r6, r6, #9
100125bc:	4014      	ands	r4, r2
100125be:	25ff      	movs	r5, #255	; 0xff
100125c0:	e739      	b.n	10012436 <__aeabi_fmul+0x92>
100125c2:	46c0      	nop			; (mov r8, r8)
100125c4:	10016768 	.word	0x10016768
100125c8:	f7ffffff 	.word	0xf7ffffff

100125cc <__aeabi_fsub>:
100125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100125ce:	024a      	lsls	r2, r1, #9
100125d0:	004e      	lsls	r6, r1, #1
100125d2:	0243      	lsls	r3, r0, #9
100125d4:	0044      	lsls	r4, r0, #1
100125d6:	0e24      	lsrs	r4, r4, #24
100125d8:	0fc5      	lsrs	r5, r0, #31
100125da:	099b      	lsrs	r3, r3, #6
100125dc:	0e36      	lsrs	r6, r6, #24
100125de:	0fc9      	lsrs	r1, r1, #31
100125e0:	0992      	lsrs	r2, r2, #6
100125e2:	2eff      	cmp	r6, #255	; 0xff
100125e4:	d100      	bne.n	100125e8 <__aeabi_fsub+0x1c>
100125e6:	e083      	b.n	100126f0 <__aeabi_fsub+0x124>
100125e8:	2001      	movs	r0, #1
100125ea:	4041      	eors	r1, r0
100125ec:	1ba0      	subs	r0, r4, r6
100125ee:	42a9      	cmp	r1, r5
100125f0:	d05c      	beq.n	100126ac <__aeabi_fsub+0xe0>
100125f2:	2800      	cmp	r0, #0
100125f4:	dc00      	bgt.n	100125f8 <__aeabi_fsub+0x2c>
100125f6:	e095      	b.n	10012724 <__aeabi_fsub+0x158>
100125f8:	2e00      	cmp	r6, #0
100125fa:	d11c      	bne.n	10012636 <__aeabi_fsub+0x6a>
100125fc:	2a00      	cmp	r2, #0
100125fe:	d000      	beq.n	10012602 <__aeabi_fsub+0x36>
10012600:	e081      	b.n	10012706 <__aeabi_fsub+0x13a>
10012602:	075a      	lsls	r2, r3, #29
10012604:	d004      	beq.n	10012610 <__aeabi_fsub+0x44>
10012606:	220f      	movs	r2, #15
10012608:	401a      	ands	r2, r3
1001260a:	2a04      	cmp	r2, #4
1001260c:	d000      	beq.n	10012610 <__aeabi_fsub+0x44>
1001260e:	3304      	adds	r3, #4
10012610:	015a      	lsls	r2, r3, #5
10012612:	d53b      	bpl.n	1001268c <__aeabi_fsub+0xc0>
10012614:	3401      	adds	r4, #1
10012616:	2cff      	cmp	r4, #255	; 0xff
10012618:	d100      	bne.n	1001261c <__aeabi_fsub+0x50>
1001261a:	e091      	b.n	10012740 <__aeabi_fsub+0x174>
1001261c:	2001      	movs	r0, #1
1001261e:	019b      	lsls	r3, r3, #6
10012620:	0a5b      	lsrs	r3, r3, #9
10012622:	b2e4      	uxtb	r4, r4
10012624:	4005      	ands	r5, r0
10012626:	025b      	lsls	r3, r3, #9
10012628:	05e4      	lsls	r4, r4, #23
1001262a:	0a5b      	lsrs	r3, r3, #9
1001262c:	07ed      	lsls	r5, r5, #31
1001262e:	4323      	orrs	r3, r4
10012630:	432b      	orrs	r3, r5
10012632:	0018      	movs	r0, r3
10012634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012636:	2cff      	cmp	r4, #255	; 0xff
10012638:	d0e3      	beq.n	10012602 <__aeabi_fsub+0x36>
1001263a:	2180      	movs	r1, #128	; 0x80
1001263c:	04c9      	lsls	r1, r1, #19
1001263e:	430a      	orrs	r2, r1
10012640:	281b      	cmp	r0, #27
10012642:	dd00      	ble.n	10012646 <__aeabi_fsub+0x7a>
10012644:	e090      	b.n	10012768 <__aeabi_fsub+0x19c>
10012646:	0016      	movs	r6, r2
10012648:	2120      	movs	r1, #32
1001264a:	40c6      	lsrs	r6, r0
1001264c:	1a08      	subs	r0, r1, r0
1001264e:	4082      	lsls	r2, r0
10012650:	1e51      	subs	r1, r2, #1
10012652:	418a      	sbcs	r2, r1
10012654:	4332      	orrs	r2, r6
10012656:	1a9b      	subs	r3, r3, r2
10012658:	015a      	lsls	r2, r3, #5
1001265a:	d515      	bpl.n	10012688 <__aeabi_fsub+0xbc>
1001265c:	019b      	lsls	r3, r3, #6
1001265e:	099e      	lsrs	r6, r3, #6
10012660:	0030      	movs	r0, r6
10012662:	f001 f8e3 	bl	1001382c <__clzsi2>
10012666:	3805      	subs	r0, #5
10012668:	4086      	lsls	r6, r0
1001266a:	4284      	cmp	r4, r0
1001266c:	dc6c      	bgt.n	10012748 <__aeabi_fsub+0x17c>
1001266e:	1b04      	subs	r4, r0, r4
10012670:	0033      	movs	r3, r6
10012672:	2020      	movs	r0, #32
10012674:	3401      	adds	r4, #1
10012676:	40e3      	lsrs	r3, r4
10012678:	1b04      	subs	r4, r0, r4
1001267a:	40a6      	lsls	r6, r4
1001267c:	1e72      	subs	r2, r6, #1
1001267e:	4196      	sbcs	r6, r2
10012680:	2400      	movs	r4, #0
10012682:	4333      	orrs	r3, r6
10012684:	e7bd      	b.n	10012602 <__aeabi_fsub+0x36>
10012686:	000d      	movs	r5, r1
10012688:	075a      	lsls	r2, r3, #29
1001268a:	d1bc      	bne.n	10012606 <__aeabi_fsub+0x3a>
1001268c:	08df      	lsrs	r7, r3, #3
1001268e:	2301      	movs	r3, #1
10012690:	401d      	ands	r5, r3
10012692:	2cff      	cmp	r4, #255	; 0xff
10012694:	d133      	bne.n	100126fe <__aeabi_fsub+0x132>
10012696:	2f00      	cmp	r7, #0
10012698:	d100      	bne.n	1001269c <__aeabi_fsub+0xd0>
1001269a:	e090      	b.n	100127be <__aeabi_fsub+0x1f2>
1001269c:	2280      	movs	r2, #128	; 0x80
1001269e:	03d2      	lsls	r2, r2, #15
100126a0:	0013      	movs	r3, r2
100126a2:	433b      	orrs	r3, r7
100126a4:	025b      	lsls	r3, r3, #9
100126a6:	0a5b      	lsrs	r3, r3, #9
100126a8:	24ff      	movs	r4, #255	; 0xff
100126aa:	e7bc      	b.n	10012626 <__aeabi_fsub+0x5a>
100126ac:	2800      	cmp	r0, #0
100126ae:	dd4f      	ble.n	10012750 <__aeabi_fsub+0x184>
100126b0:	2e00      	cmp	r6, #0
100126b2:	d02e      	beq.n	10012712 <__aeabi_fsub+0x146>
100126b4:	2cff      	cmp	r4, #255	; 0xff
100126b6:	d0a4      	beq.n	10012602 <__aeabi_fsub+0x36>
100126b8:	2580      	movs	r5, #128	; 0x80
100126ba:	04ed      	lsls	r5, r5, #19
100126bc:	432a      	orrs	r2, r5
100126be:	281b      	cmp	r0, #27
100126c0:	dd00      	ble.n	100126c4 <__aeabi_fsub+0xf8>
100126c2:	e097      	b.n	100127f4 <__aeabi_fsub+0x228>
100126c4:	0016      	movs	r6, r2
100126c6:	2520      	movs	r5, #32
100126c8:	40c6      	lsrs	r6, r0
100126ca:	1a28      	subs	r0, r5, r0
100126cc:	4082      	lsls	r2, r0
100126ce:	1e50      	subs	r0, r2, #1
100126d0:	4182      	sbcs	r2, r0
100126d2:	4332      	orrs	r2, r6
100126d4:	189b      	adds	r3, r3, r2
100126d6:	015a      	lsls	r2, r3, #5
100126d8:	d5d5      	bpl.n	10012686 <__aeabi_fsub+0xba>
100126da:	3401      	adds	r4, #1
100126dc:	2cff      	cmp	r4, #255	; 0xff
100126de:	d06d      	beq.n	100127bc <__aeabi_fsub+0x1f0>
100126e0:	2201      	movs	r2, #1
100126e2:	487b      	ldr	r0, [pc, #492]	; (100128d0 <__aeabi_fsub+0x304>)
100126e4:	401a      	ands	r2, r3
100126e6:	085b      	lsrs	r3, r3, #1
100126e8:	4003      	ands	r3, r0
100126ea:	4313      	orrs	r3, r2
100126ec:	000d      	movs	r5, r1
100126ee:	e788      	b.n	10012602 <__aeabi_fsub+0x36>
100126f0:	2a00      	cmp	r2, #0
100126f2:	d000      	beq.n	100126f6 <__aeabi_fsub+0x12a>
100126f4:	e77a      	b.n	100125ec <__aeabi_fsub+0x20>
100126f6:	e777      	b.n	100125e8 <__aeabi_fsub+0x1c>
100126f8:	1e03      	subs	r3, r0, #0
100126fa:	d1c5      	bne.n	10012688 <__aeabi_fsub+0xbc>
100126fc:	2500      	movs	r5, #0
100126fe:	027b      	lsls	r3, r7, #9
10012700:	0a5b      	lsrs	r3, r3, #9
10012702:	b2e4      	uxtb	r4, r4
10012704:	e78f      	b.n	10012626 <__aeabi_fsub+0x5a>
10012706:	3801      	subs	r0, #1
10012708:	2800      	cmp	r0, #0
1001270a:	d0a4      	beq.n	10012656 <__aeabi_fsub+0x8a>
1001270c:	2cff      	cmp	r4, #255	; 0xff
1001270e:	d197      	bne.n	10012640 <__aeabi_fsub+0x74>
10012710:	e777      	b.n	10012602 <__aeabi_fsub+0x36>
10012712:	2a00      	cmp	r2, #0
10012714:	d100      	bne.n	10012718 <__aeabi_fsub+0x14c>
10012716:	e774      	b.n	10012602 <__aeabi_fsub+0x36>
10012718:	3801      	subs	r0, #1
1001271a:	2800      	cmp	r0, #0
1001271c:	d0da      	beq.n	100126d4 <__aeabi_fsub+0x108>
1001271e:	2cff      	cmp	r4, #255	; 0xff
10012720:	d1cd      	bne.n	100126be <__aeabi_fsub+0xf2>
10012722:	e76e      	b.n	10012602 <__aeabi_fsub+0x36>
10012724:	2800      	cmp	r0, #0
10012726:	d121      	bne.n	1001276c <__aeabi_fsub+0x1a0>
10012728:	1c60      	adds	r0, r4, #1
1001272a:	b2c0      	uxtb	r0, r0
1001272c:	2801      	cmp	r0, #1
1001272e:	dd58      	ble.n	100127e2 <__aeabi_fsub+0x216>
10012730:	2780      	movs	r7, #128	; 0x80
10012732:	1a9e      	subs	r6, r3, r2
10012734:	04ff      	lsls	r7, r7, #19
10012736:	4037      	ands	r7, r6
10012738:	d02f      	beq.n	1001279a <__aeabi_fsub+0x1ce>
1001273a:	1ad6      	subs	r6, r2, r3
1001273c:	000d      	movs	r5, r1
1001273e:	e78f      	b.n	10012660 <__aeabi_fsub+0x94>
10012740:	2301      	movs	r3, #1
10012742:	401d      	ands	r5, r3
10012744:	2300      	movs	r3, #0
10012746:	e76e      	b.n	10012626 <__aeabi_fsub+0x5a>
10012748:	4b62      	ldr	r3, [pc, #392]	; (100128d4 <__aeabi_fsub+0x308>)
1001274a:	1a24      	subs	r4, r4, r0
1001274c:	4033      	ands	r3, r6
1001274e:	e758      	b.n	10012602 <__aeabi_fsub+0x36>
10012750:	2800      	cmp	r0, #0
10012752:	d151      	bne.n	100127f8 <__aeabi_fsub+0x22c>
10012754:	1c60      	adds	r0, r4, #1
10012756:	b2c6      	uxtb	r6, r0
10012758:	2e01      	cmp	r6, #1
1001275a:	dd33      	ble.n	100127c4 <__aeabi_fsub+0x1f8>
1001275c:	28ff      	cmp	r0, #255	; 0xff
1001275e:	d02d      	beq.n	100127bc <__aeabi_fsub+0x1f0>
10012760:	189b      	adds	r3, r3, r2
10012762:	085b      	lsrs	r3, r3, #1
10012764:	0004      	movs	r4, r0
10012766:	e74c      	b.n	10012602 <__aeabi_fsub+0x36>
10012768:	2201      	movs	r2, #1
1001276a:	e774      	b.n	10012656 <__aeabi_fsub+0x8a>
1001276c:	2c00      	cmp	r4, #0
1001276e:	d01a      	beq.n	100127a6 <__aeabi_fsub+0x1da>
10012770:	2eff      	cmp	r6, #255	; 0xff
10012772:	d01f      	beq.n	100127b4 <__aeabi_fsub+0x1e8>
10012774:	2480      	movs	r4, #128	; 0x80
10012776:	04e4      	lsls	r4, r4, #19
10012778:	4240      	negs	r0, r0
1001277a:	4323      	orrs	r3, r4
1001277c:	281b      	cmp	r0, #27
1001277e:	dd00      	ble.n	10012782 <__aeabi_fsub+0x1b6>
10012780:	e096      	b.n	100128b0 <__aeabi_fsub+0x2e4>
10012782:	001d      	movs	r5, r3
10012784:	2420      	movs	r4, #32
10012786:	40c5      	lsrs	r5, r0
10012788:	1a20      	subs	r0, r4, r0
1001278a:	4083      	lsls	r3, r0
1001278c:	1e58      	subs	r0, r3, #1
1001278e:	4183      	sbcs	r3, r0
10012790:	432b      	orrs	r3, r5
10012792:	1ad3      	subs	r3, r2, r3
10012794:	0034      	movs	r4, r6
10012796:	000d      	movs	r5, r1
10012798:	e75e      	b.n	10012658 <__aeabi_fsub+0x8c>
1001279a:	2e00      	cmp	r6, #0
1001279c:	d000      	beq.n	100127a0 <__aeabi_fsub+0x1d4>
1001279e:	e75f      	b.n	10012660 <__aeabi_fsub+0x94>
100127a0:	2500      	movs	r5, #0
100127a2:	2400      	movs	r4, #0
100127a4:	e7ab      	b.n	100126fe <__aeabi_fsub+0x132>
100127a6:	2b00      	cmp	r3, #0
100127a8:	d044      	beq.n	10012834 <__aeabi_fsub+0x268>
100127aa:	43c0      	mvns	r0, r0
100127ac:	2800      	cmp	r0, #0
100127ae:	d0f0      	beq.n	10012792 <__aeabi_fsub+0x1c6>
100127b0:	2eff      	cmp	r6, #255	; 0xff
100127b2:	d1e3      	bne.n	1001277c <__aeabi_fsub+0x1b0>
100127b4:	0013      	movs	r3, r2
100127b6:	24ff      	movs	r4, #255	; 0xff
100127b8:	000d      	movs	r5, r1
100127ba:	e722      	b.n	10012602 <__aeabi_fsub+0x36>
100127bc:	000d      	movs	r5, r1
100127be:	24ff      	movs	r4, #255	; 0xff
100127c0:	2300      	movs	r3, #0
100127c2:	e730      	b.n	10012626 <__aeabi_fsub+0x5a>
100127c4:	2c00      	cmp	r4, #0
100127c6:	d15d      	bne.n	10012884 <__aeabi_fsub+0x2b8>
100127c8:	2b00      	cmp	r3, #0
100127ca:	d07d      	beq.n	100128c8 <__aeabi_fsub+0x2fc>
100127cc:	2a00      	cmp	r2, #0
100127ce:	d100      	bne.n	100127d2 <__aeabi_fsub+0x206>
100127d0:	e717      	b.n	10012602 <__aeabi_fsub+0x36>
100127d2:	189b      	adds	r3, r3, r2
100127d4:	015a      	lsls	r2, r3, #5
100127d6:	d400      	bmi.n	100127da <__aeabi_fsub+0x20e>
100127d8:	e756      	b.n	10012688 <__aeabi_fsub+0xbc>
100127da:	4a3e      	ldr	r2, [pc, #248]	; (100128d4 <__aeabi_fsub+0x308>)
100127dc:	0004      	movs	r4, r0
100127de:	4013      	ands	r3, r2
100127e0:	e70f      	b.n	10012602 <__aeabi_fsub+0x36>
100127e2:	2c00      	cmp	r4, #0
100127e4:	d11e      	bne.n	10012824 <__aeabi_fsub+0x258>
100127e6:	2b00      	cmp	r3, #0
100127e8:	d12f      	bne.n	1001284a <__aeabi_fsub+0x27e>
100127ea:	2a00      	cmp	r2, #0
100127ec:	d065      	beq.n	100128ba <__aeabi_fsub+0x2ee>
100127ee:	0013      	movs	r3, r2
100127f0:	000d      	movs	r5, r1
100127f2:	e706      	b.n	10012602 <__aeabi_fsub+0x36>
100127f4:	2201      	movs	r2, #1
100127f6:	e76d      	b.n	100126d4 <__aeabi_fsub+0x108>
100127f8:	2c00      	cmp	r4, #0
100127fa:	d11f      	bne.n	1001283c <__aeabi_fsub+0x270>
100127fc:	2b00      	cmp	r3, #0
100127fe:	d059      	beq.n	100128b4 <__aeabi_fsub+0x2e8>
10012800:	43c0      	mvns	r0, r0
10012802:	2800      	cmp	r0, #0
10012804:	d00b      	beq.n	1001281e <__aeabi_fsub+0x252>
10012806:	2eff      	cmp	r6, #255	; 0xff
10012808:	d04f      	beq.n	100128aa <__aeabi_fsub+0x2de>
1001280a:	281b      	cmp	r0, #27
1001280c:	dc5e      	bgt.n	100128cc <__aeabi_fsub+0x300>
1001280e:	001d      	movs	r5, r3
10012810:	2420      	movs	r4, #32
10012812:	40c5      	lsrs	r5, r0
10012814:	1a20      	subs	r0, r4, r0
10012816:	4083      	lsls	r3, r0
10012818:	1e58      	subs	r0, r3, #1
1001281a:	4183      	sbcs	r3, r0
1001281c:	432b      	orrs	r3, r5
1001281e:	189b      	adds	r3, r3, r2
10012820:	0034      	movs	r4, r6
10012822:	e758      	b.n	100126d6 <__aeabi_fsub+0x10a>
10012824:	2b00      	cmp	r3, #0
10012826:	d11c      	bne.n	10012862 <__aeabi_fsub+0x296>
10012828:	2a00      	cmp	r2, #0
1001282a:	d049      	beq.n	100128c0 <__aeabi_fsub+0x2f4>
1001282c:	0013      	movs	r3, r2
1001282e:	000d      	movs	r5, r1
10012830:	24ff      	movs	r4, #255	; 0xff
10012832:	e6e6      	b.n	10012602 <__aeabi_fsub+0x36>
10012834:	0013      	movs	r3, r2
10012836:	0034      	movs	r4, r6
10012838:	000d      	movs	r5, r1
1001283a:	e6e2      	b.n	10012602 <__aeabi_fsub+0x36>
1001283c:	2eff      	cmp	r6, #255	; 0xff
1001283e:	d034      	beq.n	100128aa <__aeabi_fsub+0x2de>
10012840:	2480      	movs	r4, #128	; 0x80
10012842:	04e4      	lsls	r4, r4, #19
10012844:	4240      	negs	r0, r0
10012846:	4323      	orrs	r3, r4
10012848:	e7df      	b.n	1001280a <__aeabi_fsub+0x23e>
1001284a:	2a00      	cmp	r2, #0
1001284c:	d100      	bne.n	10012850 <__aeabi_fsub+0x284>
1001284e:	e6d8      	b.n	10012602 <__aeabi_fsub+0x36>
10012850:	2780      	movs	r7, #128	; 0x80
10012852:	1a98      	subs	r0, r3, r2
10012854:	04ff      	lsls	r7, r7, #19
10012856:	4007      	ands	r7, r0
10012858:	d100      	bne.n	1001285c <__aeabi_fsub+0x290>
1001285a:	e74d      	b.n	100126f8 <__aeabi_fsub+0x12c>
1001285c:	1ad3      	subs	r3, r2, r3
1001285e:	000d      	movs	r5, r1
10012860:	e6cf      	b.n	10012602 <__aeabi_fsub+0x36>
10012862:	24ff      	movs	r4, #255	; 0xff
10012864:	2a00      	cmp	r2, #0
10012866:	d100      	bne.n	1001286a <__aeabi_fsub+0x29e>
10012868:	e6cb      	b.n	10012602 <__aeabi_fsub+0x36>
1001286a:	2080      	movs	r0, #128	; 0x80
1001286c:	08db      	lsrs	r3, r3, #3
1001286e:	03c0      	lsls	r0, r0, #15
10012870:	4203      	tst	r3, r0
10012872:	d004      	beq.n	1001287e <__aeabi_fsub+0x2b2>
10012874:	08d2      	lsrs	r2, r2, #3
10012876:	4202      	tst	r2, r0
10012878:	d101      	bne.n	1001287e <__aeabi_fsub+0x2b2>
1001287a:	0013      	movs	r3, r2
1001287c:	000d      	movs	r5, r1
1001287e:	00db      	lsls	r3, r3, #3
10012880:	24ff      	movs	r4, #255	; 0xff
10012882:	e6be      	b.n	10012602 <__aeabi_fsub+0x36>
10012884:	2b00      	cmp	r3, #0
10012886:	d010      	beq.n	100128aa <__aeabi_fsub+0x2de>
10012888:	24ff      	movs	r4, #255	; 0xff
1001288a:	2a00      	cmp	r2, #0
1001288c:	d100      	bne.n	10012890 <__aeabi_fsub+0x2c4>
1001288e:	e6b8      	b.n	10012602 <__aeabi_fsub+0x36>
10012890:	2080      	movs	r0, #128	; 0x80
10012892:	08db      	lsrs	r3, r3, #3
10012894:	03c0      	lsls	r0, r0, #15
10012896:	4203      	tst	r3, r0
10012898:	d003      	beq.n	100128a2 <__aeabi_fsub+0x2d6>
1001289a:	08d2      	lsrs	r2, r2, #3
1001289c:	4202      	tst	r2, r0
1001289e:	d100      	bne.n	100128a2 <__aeabi_fsub+0x2d6>
100128a0:	0013      	movs	r3, r2
100128a2:	00db      	lsls	r3, r3, #3
100128a4:	000d      	movs	r5, r1
100128a6:	24ff      	movs	r4, #255	; 0xff
100128a8:	e6ab      	b.n	10012602 <__aeabi_fsub+0x36>
100128aa:	0013      	movs	r3, r2
100128ac:	24ff      	movs	r4, #255	; 0xff
100128ae:	e6a8      	b.n	10012602 <__aeabi_fsub+0x36>
100128b0:	2301      	movs	r3, #1
100128b2:	e76e      	b.n	10012792 <__aeabi_fsub+0x1c6>
100128b4:	0013      	movs	r3, r2
100128b6:	0034      	movs	r4, r6
100128b8:	e6a3      	b.n	10012602 <__aeabi_fsub+0x36>
100128ba:	2700      	movs	r7, #0
100128bc:	2500      	movs	r5, #0
100128be:	e71e      	b.n	100126fe <__aeabi_fsub+0x132>
100128c0:	2780      	movs	r7, #128	; 0x80
100128c2:	2500      	movs	r5, #0
100128c4:	03ff      	lsls	r7, r7, #15
100128c6:	e6e9      	b.n	1001269c <__aeabi_fsub+0xd0>
100128c8:	0013      	movs	r3, r2
100128ca:	e69a      	b.n	10012602 <__aeabi_fsub+0x36>
100128cc:	2301      	movs	r3, #1
100128ce:	e7a6      	b.n	1001281e <__aeabi_fsub+0x252>
100128d0:	7dffffff 	.word	0x7dffffff
100128d4:	fbffffff 	.word	0xfbffffff

100128d8 <__aeabi_f2iz>:
100128d8:	0243      	lsls	r3, r0, #9
100128da:	0a59      	lsrs	r1, r3, #9
100128dc:	0043      	lsls	r3, r0, #1
100128de:	0fc2      	lsrs	r2, r0, #31
100128e0:	0e1b      	lsrs	r3, r3, #24
100128e2:	2000      	movs	r0, #0
100128e4:	2b7e      	cmp	r3, #126	; 0x7e
100128e6:	dd0e      	ble.n	10012906 <__aeabi_f2iz+0x2e>
100128e8:	2b9d      	cmp	r3, #157	; 0x9d
100128ea:	dc0d      	bgt.n	10012908 <__aeabi_f2iz+0x30>
100128ec:	2080      	movs	r0, #128	; 0x80
100128ee:	0400      	lsls	r0, r0, #16
100128f0:	4301      	orrs	r1, r0
100128f2:	2b95      	cmp	r3, #149	; 0x95
100128f4:	dc0b      	bgt.n	1001290e <__aeabi_f2iz+0x36>
100128f6:	2096      	movs	r0, #150	; 0x96
100128f8:	1ac3      	subs	r3, r0, r3
100128fa:	40d9      	lsrs	r1, r3
100128fc:	000b      	movs	r3, r1
100128fe:	4258      	negs	r0, r3
10012900:	2a00      	cmp	r2, #0
10012902:	d100      	bne.n	10012906 <__aeabi_f2iz+0x2e>
10012904:	0018      	movs	r0, r3
10012906:	4770      	bx	lr
10012908:	4b03      	ldr	r3, [pc, #12]	; (10012918 <__aeabi_f2iz+0x40>)
1001290a:	18d0      	adds	r0, r2, r3
1001290c:	e7fb      	b.n	10012906 <__aeabi_f2iz+0x2e>
1001290e:	3b96      	subs	r3, #150	; 0x96
10012910:	4099      	lsls	r1, r3
10012912:	000b      	movs	r3, r1
10012914:	e7f3      	b.n	100128fe <__aeabi_f2iz+0x26>
10012916:	46c0      	nop			; (mov r8, r8)
10012918:	7fffffff 	.word	0x7fffffff

1001291c <__aeabi_ui2f>:
1001291c:	b570      	push	{r4, r5, r6, lr}
1001291e:	1e04      	subs	r4, r0, #0
10012920:	d028      	beq.n	10012974 <__aeabi_ui2f+0x58>
10012922:	f000 ff83 	bl	1001382c <__clzsi2>
10012926:	239e      	movs	r3, #158	; 0x9e
10012928:	1a1b      	subs	r3, r3, r0
1001292a:	2b96      	cmp	r3, #150	; 0x96
1001292c:	dc0a      	bgt.n	10012944 <__aeabi_ui2f+0x28>
1001292e:	2296      	movs	r2, #150	; 0x96
10012930:	1ad2      	subs	r2, r2, r3
10012932:	4094      	lsls	r4, r2
10012934:	0262      	lsls	r2, r4, #9
10012936:	0a52      	lsrs	r2, r2, #9
10012938:	b2d8      	uxtb	r0, r3
1001293a:	0252      	lsls	r2, r2, #9
1001293c:	0a52      	lsrs	r2, r2, #9
1001293e:	05c0      	lsls	r0, r0, #23
10012940:	4310      	orrs	r0, r2
10012942:	bd70      	pop	{r4, r5, r6, pc}
10012944:	2b99      	cmp	r3, #153	; 0x99
10012946:	dc18      	bgt.n	1001297a <__aeabi_ui2f+0x5e>
10012948:	2299      	movs	r2, #153	; 0x99
1001294a:	1ad2      	subs	r2, r2, r3
1001294c:	4094      	lsls	r4, r2
1001294e:	4a11      	ldr	r2, [pc, #68]	; (10012994 <__aeabi_ui2f+0x78>)
10012950:	4022      	ands	r2, r4
10012952:	0761      	lsls	r1, r4, #29
10012954:	d004      	beq.n	10012960 <__aeabi_ui2f+0x44>
10012956:	210f      	movs	r1, #15
10012958:	400c      	ands	r4, r1
1001295a:	2c04      	cmp	r4, #4
1001295c:	d000      	beq.n	10012960 <__aeabi_ui2f+0x44>
1001295e:	3204      	adds	r2, #4
10012960:	0151      	lsls	r1, r2, #5
10012962:	d503      	bpl.n	1001296c <__aeabi_ui2f+0x50>
10012964:	4b0b      	ldr	r3, [pc, #44]	; (10012994 <__aeabi_ui2f+0x78>)
10012966:	401a      	ands	r2, r3
10012968:	239f      	movs	r3, #159	; 0x9f
1001296a:	1a1b      	subs	r3, r3, r0
1001296c:	0192      	lsls	r2, r2, #6
1001296e:	0a52      	lsrs	r2, r2, #9
10012970:	b2d8      	uxtb	r0, r3
10012972:	e7e2      	b.n	1001293a <__aeabi_ui2f+0x1e>
10012974:	2000      	movs	r0, #0
10012976:	2200      	movs	r2, #0
10012978:	e7df      	b.n	1001293a <__aeabi_ui2f+0x1e>
1001297a:	2205      	movs	r2, #5
1001297c:	0025      	movs	r5, r4
1001297e:	1a12      	subs	r2, r2, r0
10012980:	21b9      	movs	r1, #185	; 0xb9
10012982:	40d5      	lsrs	r5, r2
10012984:	0022      	movs	r2, r4
10012986:	1ac9      	subs	r1, r1, r3
10012988:	408a      	lsls	r2, r1
1001298a:	1e54      	subs	r4, r2, #1
1001298c:	41a2      	sbcs	r2, r4
1001298e:	002c      	movs	r4, r5
10012990:	4314      	orrs	r4, r2
10012992:	e7dc      	b.n	1001294e <__aeabi_ui2f+0x32>
10012994:	fbffffff 	.word	0xfbffffff

10012998 <__eqdf2>:
10012998:	b5f0      	push	{r4, r5, r6, r7, lr}
1001299a:	465f      	mov	r7, fp
1001299c:	4656      	mov	r6, sl
1001299e:	464d      	mov	r5, r9
100129a0:	4644      	mov	r4, r8
100129a2:	b4f0      	push	{r4, r5, r6, r7}
100129a4:	031f      	lsls	r7, r3, #12
100129a6:	005c      	lsls	r4, r3, #1
100129a8:	0fdb      	lsrs	r3, r3, #31
100129aa:	469a      	mov	sl, r3
100129ac:	4b19      	ldr	r3, [pc, #100]	; (10012a14 <__eqdf2+0x7c>)
100129ae:	030e      	lsls	r6, r1, #12
100129b0:	004d      	lsls	r5, r1, #1
100129b2:	0fc9      	lsrs	r1, r1, #31
100129b4:	4680      	mov	r8, r0
100129b6:	0b36      	lsrs	r6, r6, #12
100129b8:	0d6d      	lsrs	r5, r5, #21
100129ba:	468b      	mov	fp, r1
100129bc:	4691      	mov	r9, r2
100129be:	0b3f      	lsrs	r7, r7, #12
100129c0:	0d64      	lsrs	r4, r4, #21
100129c2:	429d      	cmp	r5, r3
100129c4:	d019      	beq.n	100129fa <__eqdf2+0x62>
100129c6:	4b13      	ldr	r3, [pc, #76]	; (10012a14 <__eqdf2+0x7c>)
100129c8:	429c      	cmp	r4, r3
100129ca:	d01b      	beq.n	10012a04 <__eqdf2+0x6c>
100129cc:	2301      	movs	r3, #1
100129ce:	42a5      	cmp	r5, r4
100129d0:	d006      	beq.n	100129e0 <__eqdf2+0x48>
100129d2:	0018      	movs	r0, r3
100129d4:	bc3c      	pop	{r2, r3, r4, r5}
100129d6:	4690      	mov	r8, r2
100129d8:	4699      	mov	r9, r3
100129da:	46a2      	mov	sl, r4
100129dc:	46ab      	mov	fp, r5
100129de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129e0:	42be      	cmp	r6, r7
100129e2:	d1f6      	bne.n	100129d2 <__eqdf2+0x3a>
100129e4:	45c8      	cmp	r8, r9
100129e6:	d1f4      	bne.n	100129d2 <__eqdf2+0x3a>
100129e8:	45d3      	cmp	fp, sl
100129ea:	d010      	beq.n	10012a0e <__eqdf2+0x76>
100129ec:	2d00      	cmp	r5, #0
100129ee:	d1f0      	bne.n	100129d2 <__eqdf2+0x3a>
100129f0:	4330      	orrs	r0, r6
100129f2:	0003      	movs	r3, r0
100129f4:	1e5a      	subs	r2, r3, #1
100129f6:	4193      	sbcs	r3, r2
100129f8:	e7eb      	b.n	100129d2 <__eqdf2+0x3a>
100129fa:	0031      	movs	r1, r6
100129fc:	2301      	movs	r3, #1
100129fe:	4301      	orrs	r1, r0
10012a00:	d1e7      	bne.n	100129d2 <__eqdf2+0x3a>
10012a02:	e7e0      	b.n	100129c6 <__eqdf2+0x2e>
10012a04:	433a      	orrs	r2, r7
10012a06:	2301      	movs	r3, #1
10012a08:	2a00      	cmp	r2, #0
10012a0a:	d1e2      	bne.n	100129d2 <__eqdf2+0x3a>
10012a0c:	e7de      	b.n	100129cc <__eqdf2+0x34>
10012a0e:	2300      	movs	r3, #0
10012a10:	e7df      	b.n	100129d2 <__eqdf2+0x3a>
10012a12:	46c0      	nop			; (mov r8, r8)
10012a14:	000007ff 	.word	0x000007ff

10012a18 <__gedf2>:
10012a18:	b5f0      	push	{r4, r5, r6, r7, lr}
10012a1a:	465f      	mov	r7, fp
10012a1c:	4644      	mov	r4, r8
10012a1e:	4656      	mov	r6, sl
10012a20:	464d      	mov	r5, r9
10012a22:	b4f0      	push	{r4, r5, r6, r7}
10012a24:	031f      	lsls	r7, r3, #12
10012a26:	0b3c      	lsrs	r4, r7, #12
10012a28:	4f2c      	ldr	r7, [pc, #176]	; (10012adc <__gedf2+0xc4>)
10012a2a:	030e      	lsls	r6, r1, #12
10012a2c:	004d      	lsls	r5, r1, #1
10012a2e:	46a3      	mov	fp, r4
10012a30:	005c      	lsls	r4, r3, #1
10012a32:	4684      	mov	ip, r0
10012a34:	0b36      	lsrs	r6, r6, #12
10012a36:	0d6d      	lsrs	r5, r5, #21
10012a38:	0fc9      	lsrs	r1, r1, #31
10012a3a:	4690      	mov	r8, r2
10012a3c:	0d64      	lsrs	r4, r4, #21
10012a3e:	0fdb      	lsrs	r3, r3, #31
10012a40:	42bd      	cmp	r5, r7
10012a42:	d02b      	beq.n	10012a9c <__gedf2+0x84>
10012a44:	4f25      	ldr	r7, [pc, #148]	; (10012adc <__gedf2+0xc4>)
10012a46:	42bc      	cmp	r4, r7
10012a48:	d02e      	beq.n	10012aa8 <__gedf2+0x90>
10012a4a:	2d00      	cmp	r5, #0
10012a4c:	d10e      	bne.n	10012a6c <__gedf2+0x54>
10012a4e:	4330      	orrs	r0, r6
10012a50:	0007      	movs	r7, r0
10012a52:	4681      	mov	r9, r0
10012a54:	4278      	negs	r0, r7
10012a56:	4178      	adcs	r0, r7
10012a58:	2c00      	cmp	r4, #0
10012a5a:	d117      	bne.n	10012a8c <__gedf2+0x74>
10012a5c:	465f      	mov	r7, fp
10012a5e:	433a      	orrs	r2, r7
10012a60:	d114      	bne.n	10012a8c <__gedf2+0x74>
10012a62:	464b      	mov	r3, r9
10012a64:	2000      	movs	r0, #0
10012a66:	2b00      	cmp	r3, #0
10012a68:	d00a      	beq.n	10012a80 <__gedf2+0x68>
10012a6a:	e006      	b.n	10012a7a <__gedf2+0x62>
10012a6c:	2c00      	cmp	r4, #0
10012a6e:	d102      	bne.n	10012a76 <__gedf2+0x5e>
10012a70:	4658      	mov	r0, fp
10012a72:	4302      	orrs	r2, r0
10012a74:	d001      	beq.n	10012a7a <__gedf2+0x62>
10012a76:	4299      	cmp	r1, r3
10012a78:	d01a      	beq.n	10012ab0 <__gedf2+0x98>
10012a7a:	2301      	movs	r3, #1
10012a7c:	4248      	negs	r0, r1
10012a7e:	4318      	orrs	r0, r3
10012a80:	bc3c      	pop	{r2, r3, r4, r5}
10012a82:	4690      	mov	r8, r2
10012a84:	4699      	mov	r9, r3
10012a86:	46a2      	mov	sl, r4
10012a88:	46ab      	mov	fp, r5
10012a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a8c:	2800      	cmp	r0, #0
10012a8e:	d0f2      	beq.n	10012a76 <__gedf2+0x5e>
10012a90:	4258      	negs	r0, r3
10012a92:	4158      	adcs	r0, r3
10012a94:	2201      	movs	r2, #1
10012a96:	4240      	negs	r0, r0
10012a98:	4310      	orrs	r0, r2
10012a9a:	e7f1      	b.n	10012a80 <__gedf2+0x68>
10012a9c:	0037      	movs	r7, r6
10012a9e:	4307      	orrs	r7, r0
10012aa0:	d0d0      	beq.n	10012a44 <__gedf2+0x2c>
10012aa2:	2002      	movs	r0, #2
10012aa4:	4240      	negs	r0, r0
10012aa6:	e7eb      	b.n	10012a80 <__gedf2+0x68>
10012aa8:	465f      	mov	r7, fp
10012aaa:	4317      	orrs	r7, r2
10012aac:	d0cd      	beq.n	10012a4a <__gedf2+0x32>
10012aae:	e7f8      	b.n	10012aa2 <__gedf2+0x8a>
10012ab0:	42a5      	cmp	r5, r4
10012ab2:	dce2      	bgt.n	10012a7a <__gedf2+0x62>
10012ab4:	db05      	blt.n	10012ac2 <__gedf2+0xaa>
10012ab6:	455e      	cmp	r6, fp
10012ab8:	d8df      	bhi.n	10012a7a <__gedf2+0x62>
10012aba:	d008      	beq.n	10012ace <__gedf2+0xb6>
10012abc:	2000      	movs	r0, #0
10012abe:	455e      	cmp	r6, fp
10012ac0:	d2de      	bcs.n	10012a80 <__gedf2+0x68>
10012ac2:	4248      	negs	r0, r1
10012ac4:	4148      	adcs	r0, r1
10012ac6:	2301      	movs	r3, #1
10012ac8:	4240      	negs	r0, r0
10012aca:	4318      	orrs	r0, r3
10012acc:	e7d8      	b.n	10012a80 <__gedf2+0x68>
10012ace:	45c4      	cmp	ip, r8
10012ad0:	d8d3      	bhi.n	10012a7a <__gedf2+0x62>
10012ad2:	2000      	movs	r0, #0
10012ad4:	45c4      	cmp	ip, r8
10012ad6:	d3f4      	bcc.n	10012ac2 <__gedf2+0xaa>
10012ad8:	e7d2      	b.n	10012a80 <__gedf2+0x68>
10012ada:	46c0      	nop			; (mov r8, r8)
10012adc:	000007ff 	.word	0x000007ff

10012ae0 <__ledf2>:
10012ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ae2:	465f      	mov	r7, fp
10012ae4:	464d      	mov	r5, r9
10012ae6:	4644      	mov	r4, r8
10012ae8:	4656      	mov	r6, sl
10012aea:	b4f0      	push	{r4, r5, r6, r7}
10012aec:	031c      	lsls	r4, r3, #12
10012aee:	0b24      	lsrs	r4, r4, #12
10012af0:	46a4      	mov	ip, r4
10012af2:	4c2f      	ldr	r4, [pc, #188]	; (10012bb0 <__ledf2+0xd0>)
10012af4:	030f      	lsls	r7, r1, #12
10012af6:	004d      	lsls	r5, r1, #1
10012af8:	005e      	lsls	r6, r3, #1
10012afa:	0fc9      	lsrs	r1, r1, #31
10012afc:	4680      	mov	r8, r0
10012afe:	0b3f      	lsrs	r7, r7, #12
10012b00:	0d6d      	lsrs	r5, r5, #21
10012b02:	468b      	mov	fp, r1
10012b04:	4691      	mov	r9, r2
10012b06:	0d76      	lsrs	r6, r6, #21
10012b08:	0fdb      	lsrs	r3, r3, #31
10012b0a:	42a5      	cmp	r5, r4
10012b0c:	d020      	beq.n	10012b50 <__ledf2+0x70>
10012b0e:	4c28      	ldr	r4, [pc, #160]	; (10012bb0 <__ledf2+0xd0>)
10012b10:	42a6      	cmp	r6, r4
10012b12:	d022      	beq.n	10012b5a <__ledf2+0x7a>
10012b14:	2d00      	cmp	r5, #0
10012b16:	d112      	bne.n	10012b3e <__ledf2+0x5e>
10012b18:	4338      	orrs	r0, r7
10012b1a:	4244      	negs	r4, r0
10012b1c:	4144      	adcs	r4, r0
10012b1e:	2e00      	cmp	r6, #0
10012b20:	d020      	beq.n	10012b64 <__ledf2+0x84>
10012b22:	2c00      	cmp	r4, #0
10012b24:	d00d      	beq.n	10012b42 <__ledf2+0x62>
10012b26:	425c      	negs	r4, r3
10012b28:	4163      	adcs	r3, r4
10012b2a:	2401      	movs	r4, #1
10012b2c:	425b      	negs	r3, r3
10012b2e:	431c      	orrs	r4, r3
10012b30:	0020      	movs	r0, r4
10012b32:	bc3c      	pop	{r2, r3, r4, r5}
10012b34:	4690      	mov	r8, r2
10012b36:	4699      	mov	r9, r3
10012b38:	46a2      	mov	sl, r4
10012b3a:	46ab      	mov	fp, r5
10012b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012b3e:	2e00      	cmp	r6, #0
10012b40:	d017      	beq.n	10012b72 <__ledf2+0x92>
10012b42:	455b      	cmp	r3, fp
10012b44:	d019      	beq.n	10012b7a <__ledf2+0x9a>
10012b46:	465b      	mov	r3, fp
10012b48:	425c      	negs	r4, r3
10012b4a:	2301      	movs	r3, #1
10012b4c:	431c      	orrs	r4, r3
10012b4e:	e7ef      	b.n	10012b30 <__ledf2+0x50>
10012b50:	0039      	movs	r1, r7
10012b52:	2402      	movs	r4, #2
10012b54:	4301      	orrs	r1, r0
10012b56:	d1eb      	bne.n	10012b30 <__ledf2+0x50>
10012b58:	e7d9      	b.n	10012b0e <__ledf2+0x2e>
10012b5a:	4661      	mov	r1, ip
10012b5c:	2402      	movs	r4, #2
10012b5e:	4311      	orrs	r1, r2
10012b60:	d1e6      	bne.n	10012b30 <__ledf2+0x50>
10012b62:	e7d7      	b.n	10012b14 <__ledf2+0x34>
10012b64:	4661      	mov	r1, ip
10012b66:	430a      	orrs	r2, r1
10012b68:	d1db      	bne.n	10012b22 <__ledf2+0x42>
10012b6a:	2400      	movs	r4, #0
10012b6c:	2800      	cmp	r0, #0
10012b6e:	d0df      	beq.n	10012b30 <__ledf2+0x50>
10012b70:	e7e9      	b.n	10012b46 <__ledf2+0x66>
10012b72:	4661      	mov	r1, ip
10012b74:	430a      	orrs	r2, r1
10012b76:	d1e4      	bne.n	10012b42 <__ledf2+0x62>
10012b78:	e7e5      	b.n	10012b46 <__ledf2+0x66>
10012b7a:	42b5      	cmp	r5, r6
10012b7c:	dd03      	ble.n	10012b86 <__ledf2+0xa6>
10012b7e:	2201      	movs	r2, #1
10012b80:	425c      	negs	r4, r3
10012b82:	4314      	orrs	r4, r2
10012b84:	e7d4      	b.n	10012b30 <__ledf2+0x50>
10012b86:	42b5      	cmp	r5, r6
10012b88:	dbcd      	blt.n	10012b26 <__ledf2+0x46>
10012b8a:	4567      	cmp	r7, ip
10012b8c:	d8db      	bhi.n	10012b46 <__ledf2+0x66>
10012b8e:	d009      	beq.n	10012ba4 <__ledf2+0xc4>
10012b90:	2400      	movs	r4, #0
10012b92:	4567      	cmp	r7, ip
10012b94:	d2cc      	bcs.n	10012b30 <__ledf2+0x50>
10012b96:	4659      	mov	r1, fp
10012b98:	424c      	negs	r4, r1
10012b9a:	4161      	adcs	r1, r4
10012b9c:	2401      	movs	r4, #1
10012b9e:	4249      	negs	r1, r1
10012ba0:	430c      	orrs	r4, r1
10012ba2:	e7c5      	b.n	10012b30 <__ledf2+0x50>
10012ba4:	45c8      	cmp	r8, r9
10012ba6:	d8ce      	bhi.n	10012b46 <__ledf2+0x66>
10012ba8:	2400      	movs	r4, #0
10012baa:	45c8      	cmp	r8, r9
10012bac:	d3f3      	bcc.n	10012b96 <__ledf2+0xb6>
10012bae:	e7bf      	b.n	10012b30 <__ledf2+0x50>
10012bb0:	000007ff 	.word	0x000007ff

10012bb4 <__aeabi_dmul>:
10012bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012bb6:	465f      	mov	r7, fp
10012bb8:	4656      	mov	r6, sl
10012bba:	464d      	mov	r5, r9
10012bbc:	4644      	mov	r4, r8
10012bbe:	b4f0      	push	{r4, r5, r6, r7}
10012bc0:	030d      	lsls	r5, r1, #12
10012bc2:	4699      	mov	r9, r3
10012bc4:	004e      	lsls	r6, r1, #1
10012bc6:	0b2b      	lsrs	r3, r5, #12
10012bc8:	b087      	sub	sp, #28
10012bca:	0007      	movs	r7, r0
10012bcc:	4692      	mov	sl, r2
10012bce:	4680      	mov	r8, r0
10012bd0:	469b      	mov	fp, r3
10012bd2:	0d76      	lsrs	r6, r6, #21
10012bd4:	0fcc      	lsrs	r4, r1, #31
10012bd6:	2e00      	cmp	r6, #0
10012bd8:	d069      	beq.n	10012cae <__aeabi_dmul+0xfa>
10012bda:	4b6d      	ldr	r3, [pc, #436]	; (10012d90 <__aeabi_dmul+0x1dc>)
10012bdc:	429e      	cmp	r6, r3
10012bde:	d035      	beq.n	10012c4c <__aeabi_dmul+0x98>
10012be0:	465b      	mov	r3, fp
10012be2:	2280      	movs	r2, #128	; 0x80
10012be4:	00dd      	lsls	r5, r3, #3
10012be6:	0412      	lsls	r2, r2, #16
10012be8:	0f43      	lsrs	r3, r0, #29
10012bea:	4313      	orrs	r3, r2
10012bec:	432b      	orrs	r3, r5
10012bee:	469b      	mov	fp, r3
10012bf0:	00c3      	lsls	r3, r0, #3
10012bf2:	4698      	mov	r8, r3
10012bf4:	4b67      	ldr	r3, [pc, #412]	; (10012d94 <__aeabi_dmul+0x1e0>)
10012bf6:	2700      	movs	r7, #0
10012bf8:	469c      	mov	ip, r3
10012bfa:	2300      	movs	r3, #0
10012bfc:	4466      	add	r6, ip
10012bfe:	9301      	str	r3, [sp, #4]
10012c00:	464a      	mov	r2, r9
10012c02:	0315      	lsls	r5, r2, #12
10012c04:	0050      	lsls	r0, r2, #1
10012c06:	0fd2      	lsrs	r2, r2, #31
10012c08:	4653      	mov	r3, sl
10012c0a:	0b2d      	lsrs	r5, r5, #12
10012c0c:	0d40      	lsrs	r0, r0, #21
10012c0e:	4691      	mov	r9, r2
10012c10:	d100      	bne.n	10012c14 <__aeabi_dmul+0x60>
10012c12:	e076      	b.n	10012d02 <__aeabi_dmul+0x14e>
10012c14:	4a5e      	ldr	r2, [pc, #376]	; (10012d90 <__aeabi_dmul+0x1dc>)
10012c16:	4290      	cmp	r0, r2
10012c18:	d06c      	beq.n	10012cf4 <__aeabi_dmul+0x140>
10012c1a:	2280      	movs	r2, #128	; 0x80
10012c1c:	0f5b      	lsrs	r3, r3, #29
10012c1e:	0412      	lsls	r2, r2, #16
10012c20:	4313      	orrs	r3, r2
10012c22:	4a5c      	ldr	r2, [pc, #368]	; (10012d94 <__aeabi_dmul+0x1e0>)
10012c24:	00ed      	lsls	r5, r5, #3
10012c26:	4694      	mov	ip, r2
10012c28:	431d      	orrs	r5, r3
10012c2a:	4653      	mov	r3, sl
10012c2c:	2200      	movs	r2, #0
10012c2e:	00db      	lsls	r3, r3, #3
10012c30:	4460      	add	r0, ip
10012c32:	4649      	mov	r1, r9
10012c34:	1836      	adds	r6, r6, r0
10012c36:	1c70      	adds	r0, r6, #1
10012c38:	4061      	eors	r1, r4
10012c3a:	9002      	str	r0, [sp, #8]
10012c3c:	4317      	orrs	r7, r2
10012c3e:	2f0f      	cmp	r7, #15
10012c40:	d900      	bls.n	10012c44 <__aeabi_dmul+0x90>
10012c42:	e0af      	b.n	10012da4 <__aeabi_dmul+0x1f0>
10012c44:	4854      	ldr	r0, [pc, #336]	; (10012d98 <__aeabi_dmul+0x1e4>)
10012c46:	00bf      	lsls	r7, r7, #2
10012c48:	59c7      	ldr	r7, [r0, r7]
10012c4a:	46bf      	mov	pc, r7
10012c4c:	465b      	mov	r3, fp
10012c4e:	431f      	orrs	r7, r3
10012c50:	d000      	beq.n	10012c54 <__aeabi_dmul+0xa0>
10012c52:	e088      	b.n	10012d66 <__aeabi_dmul+0x1b2>
10012c54:	2300      	movs	r3, #0
10012c56:	469b      	mov	fp, r3
10012c58:	4698      	mov	r8, r3
10012c5a:	3302      	adds	r3, #2
10012c5c:	2708      	movs	r7, #8
10012c5e:	9301      	str	r3, [sp, #4]
10012c60:	e7ce      	b.n	10012c00 <__aeabi_dmul+0x4c>
10012c62:	4649      	mov	r1, r9
10012c64:	2a02      	cmp	r2, #2
10012c66:	d06a      	beq.n	10012d3e <__aeabi_dmul+0x18a>
10012c68:	2a03      	cmp	r2, #3
10012c6a:	d100      	bne.n	10012c6e <__aeabi_dmul+0xba>
10012c6c:	e209      	b.n	10013082 <__aeabi_dmul+0x4ce>
10012c6e:	2a01      	cmp	r2, #1
10012c70:	d000      	beq.n	10012c74 <__aeabi_dmul+0xc0>
10012c72:	e1bb      	b.n	10012fec <__aeabi_dmul+0x438>
10012c74:	4011      	ands	r1, r2
10012c76:	2200      	movs	r2, #0
10012c78:	2300      	movs	r3, #0
10012c7a:	2500      	movs	r5, #0
10012c7c:	4690      	mov	r8, r2
10012c7e:	b2cc      	uxtb	r4, r1
10012c80:	2100      	movs	r1, #0
10012c82:	032d      	lsls	r5, r5, #12
10012c84:	0d0a      	lsrs	r2, r1, #20
10012c86:	0512      	lsls	r2, r2, #20
10012c88:	0b2d      	lsrs	r5, r5, #12
10012c8a:	4315      	orrs	r5, r2
10012c8c:	4a43      	ldr	r2, [pc, #268]	; (10012d9c <__aeabi_dmul+0x1e8>)
10012c8e:	051b      	lsls	r3, r3, #20
10012c90:	4015      	ands	r5, r2
10012c92:	431d      	orrs	r5, r3
10012c94:	006d      	lsls	r5, r5, #1
10012c96:	07e4      	lsls	r4, r4, #31
10012c98:	086d      	lsrs	r5, r5, #1
10012c9a:	4325      	orrs	r5, r4
10012c9c:	4640      	mov	r0, r8
10012c9e:	0029      	movs	r1, r5
10012ca0:	b007      	add	sp, #28
10012ca2:	bc3c      	pop	{r2, r3, r4, r5}
10012ca4:	4690      	mov	r8, r2
10012ca6:	4699      	mov	r9, r3
10012ca8:	46a2      	mov	sl, r4
10012caa:	46ab      	mov	fp, r5
10012cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012cae:	4303      	orrs	r3, r0
10012cb0:	d052      	beq.n	10012d58 <__aeabi_dmul+0x1a4>
10012cb2:	465b      	mov	r3, fp
10012cb4:	2b00      	cmp	r3, #0
10012cb6:	d100      	bne.n	10012cba <__aeabi_dmul+0x106>
10012cb8:	e18a      	b.n	10012fd0 <__aeabi_dmul+0x41c>
10012cba:	4658      	mov	r0, fp
10012cbc:	f000 fdb6 	bl	1001382c <__clzsi2>
10012cc0:	0003      	movs	r3, r0
10012cc2:	3b0b      	subs	r3, #11
10012cc4:	2b1c      	cmp	r3, #28
10012cc6:	dd00      	ble.n	10012cca <__aeabi_dmul+0x116>
10012cc8:	e17b      	b.n	10012fc2 <__aeabi_dmul+0x40e>
10012cca:	221d      	movs	r2, #29
10012ccc:	1ad3      	subs	r3, r2, r3
10012cce:	003a      	movs	r2, r7
10012cd0:	0001      	movs	r1, r0
10012cd2:	465d      	mov	r5, fp
10012cd4:	40da      	lsrs	r2, r3
10012cd6:	3908      	subs	r1, #8
10012cd8:	408d      	lsls	r5, r1
10012cda:	0013      	movs	r3, r2
10012cdc:	408f      	lsls	r7, r1
10012cde:	432b      	orrs	r3, r5
10012ce0:	469b      	mov	fp, r3
10012ce2:	46b8      	mov	r8, r7
10012ce4:	4b2e      	ldr	r3, [pc, #184]	; (10012da0 <__aeabi_dmul+0x1ec>)
10012ce6:	2700      	movs	r7, #0
10012ce8:	469c      	mov	ip, r3
10012cea:	2300      	movs	r3, #0
10012cec:	4460      	add	r0, ip
10012cee:	4246      	negs	r6, r0
10012cf0:	9301      	str	r3, [sp, #4]
10012cf2:	e785      	b.n	10012c00 <__aeabi_dmul+0x4c>
10012cf4:	4652      	mov	r2, sl
10012cf6:	432a      	orrs	r2, r5
10012cf8:	d12c      	bne.n	10012d54 <__aeabi_dmul+0x1a0>
10012cfa:	2500      	movs	r5, #0
10012cfc:	2300      	movs	r3, #0
10012cfe:	2202      	movs	r2, #2
10012d00:	e797      	b.n	10012c32 <__aeabi_dmul+0x7e>
10012d02:	4652      	mov	r2, sl
10012d04:	432a      	orrs	r2, r5
10012d06:	d021      	beq.n	10012d4c <__aeabi_dmul+0x198>
10012d08:	2d00      	cmp	r5, #0
10012d0a:	d100      	bne.n	10012d0e <__aeabi_dmul+0x15a>
10012d0c:	e154      	b.n	10012fb8 <__aeabi_dmul+0x404>
10012d0e:	0028      	movs	r0, r5
10012d10:	f000 fd8c 	bl	1001382c <__clzsi2>
10012d14:	0003      	movs	r3, r0
10012d16:	3b0b      	subs	r3, #11
10012d18:	2b1c      	cmp	r3, #28
10012d1a:	dd00      	ble.n	10012d1e <__aeabi_dmul+0x16a>
10012d1c:	e146      	b.n	10012fac <__aeabi_dmul+0x3f8>
10012d1e:	211d      	movs	r1, #29
10012d20:	1acb      	subs	r3, r1, r3
10012d22:	4651      	mov	r1, sl
10012d24:	0002      	movs	r2, r0
10012d26:	40d9      	lsrs	r1, r3
10012d28:	4653      	mov	r3, sl
10012d2a:	3a08      	subs	r2, #8
10012d2c:	4095      	lsls	r5, r2
10012d2e:	4093      	lsls	r3, r2
10012d30:	430d      	orrs	r5, r1
10012d32:	4a1b      	ldr	r2, [pc, #108]	; (10012da0 <__aeabi_dmul+0x1ec>)
10012d34:	4694      	mov	ip, r2
10012d36:	4460      	add	r0, ip
10012d38:	4240      	negs	r0, r0
10012d3a:	2200      	movs	r2, #0
10012d3c:	e779      	b.n	10012c32 <__aeabi_dmul+0x7e>
10012d3e:	2401      	movs	r4, #1
10012d40:	2200      	movs	r2, #0
10012d42:	400c      	ands	r4, r1
10012d44:	4b12      	ldr	r3, [pc, #72]	; (10012d90 <__aeabi_dmul+0x1dc>)
10012d46:	2500      	movs	r5, #0
10012d48:	4690      	mov	r8, r2
10012d4a:	e799      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012d4c:	2500      	movs	r5, #0
10012d4e:	2300      	movs	r3, #0
10012d50:	2201      	movs	r2, #1
10012d52:	e76e      	b.n	10012c32 <__aeabi_dmul+0x7e>
10012d54:	2203      	movs	r2, #3
10012d56:	e76c      	b.n	10012c32 <__aeabi_dmul+0x7e>
10012d58:	2300      	movs	r3, #0
10012d5a:	469b      	mov	fp, r3
10012d5c:	4698      	mov	r8, r3
10012d5e:	3301      	adds	r3, #1
10012d60:	2704      	movs	r7, #4
10012d62:	9301      	str	r3, [sp, #4]
10012d64:	e74c      	b.n	10012c00 <__aeabi_dmul+0x4c>
10012d66:	2303      	movs	r3, #3
10012d68:	270c      	movs	r7, #12
10012d6a:	9301      	str	r3, [sp, #4]
10012d6c:	e748      	b.n	10012c00 <__aeabi_dmul+0x4c>
10012d6e:	2300      	movs	r3, #0
10012d70:	2580      	movs	r5, #128	; 0x80
10012d72:	4698      	mov	r8, r3
10012d74:	2400      	movs	r4, #0
10012d76:	032d      	lsls	r5, r5, #12
10012d78:	4b05      	ldr	r3, [pc, #20]	; (10012d90 <__aeabi_dmul+0x1dc>)
10012d7a:	e781      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012d7c:	465d      	mov	r5, fp
10012d7e:	4643      	mov	r3, r8
10012d80:	9a01      	ldr	r2, [sp, #4]
10012d82:	e76f      	b.n	10012c64 <__aeabi_dmul+0xb0>
10012d84:	465d      	mov	r5, fp
10012d86:	4643      	mov	r3, r8
10012d88:	0021      	movs	r1, r4
10012d8a:	9a01      	ldr	r2, [sp, #4]
10012d8c:	e76a      	b.n	10012c64 <__aeabi_dmul+0xb0>
10012d8e:	46c0      	nop			; (mov r8, r8)
10012d90:	000007ff 	.word	0x000007ff
10012d94:	fffffc01 	.word	0xfffffc01
10012d98:	100167a8 	.word	0x100167a8
10012d9c:	800fffff 	.word	0x800fffff
10012da0:	000003f3 	.word	0x000003f3
10012da4:	4642      	mov	r2, r8
10012da6:	0c12      	lsrs	r2, r2, #16
10012da8:	4691      	mov	r9, r2
10012daa:	0c1a      	lsrs	r2, r3, #16
10012dac:	4694      	mov	ip, r2
10012dae:	4642      	mov	r2, r8
10012db0:	0417      	lsls	r7, r2, #16
10012db2:	464a      	mov	r2, r9
10012db4:	041b      	lsls	r3, r3, #16
10012db6:	0c1b      	lsrs	r3, r3, #16
10012db8:	435a      	muls	r2, r3
10012dba:	4660      	mov	r0, ip
10012dbc:	4690      	mov	r8, r2
10012dbe:	464a      	mov	r2, r9
10012dc0:	4342      	muls	r2, r0
10012dc2:	0010      	movs	r0, r2
10012dc4:	9203      	str	r2, [sp, #12]
10012dc6:	4662      	mov	r2, ip
10012dc8:	001c      	movs	r4, r3
10012dca:	0c3f      	lsrs	r7, r7, #16
10012dcc:	437a      	muls	r2, r7
10012dce:	437c      	muls	r4, r7
10012dd0:	4442      	add	r2, r8
10012dd2:	9201      	str	r2, [sp, #4]
10012dd4:	0c22      	lsrs	r2, r4, #16
10012dd6:	4692      	mov	sl, r2
10012dd8:	9a01      	ldr	r2, [sp, #4]
10012dda:	4452      	add	r2, sl
10012ddc:	4590      	cmp	r8, r2
10012dde:	d906      	bls.n	10012dee <__aeabi_dmul+0x23a>
10012de0:	4682      	mov	sl, r0
10012de2:	2080      	movs	r0, #128	; 0x80
10012de4:	0240      	lsls	r0, r0, #9
10012de6:	4680      	mov	r8, r0
10012de8:	44c2      	add	sl, r8
10012dea:	4650      	mov	r0, sl
10012dec:	9003      	str	r0, [sp, #12]
10012dee:	0c10      	lsrs	r0, r2, #16
10012df0:	9004      	str	r0, [sp, #16]
10012df2:	4648      	mov	r0, r9
10012df4:	0424      	lsls	r4, r4, #16
10012df6:	0c24      	lsrs	r4, r4, #16
10012df8:	0412      	lsls	r2, r2, #16
10012dfa:	1912      	adds	r2, r2, r4
10012dfc:	9205      	str	r2, [sp, #20]
10012dfe:	0c2a      	lsrs	r2, r5, #16
10012e00:	042d      	lsls	r5, r5, #16
10012e02:	0c2d      	lsrs	r5, r5, #16
10012e04:	4368      	muls	r0, r5
10012e06:	002c      	movs	r4, r5
10012e08:	4682      	mov	sl, r0
10012e0a:	4648      	mov	r0, r9
10012e0c:	437c      	muls	r4, r7
10012e0e:	4350      	muls	r0, r2
10012e10:	4681      	mov	r9, r0
10012e12:	0c20      	lsrs	r0, r4, #16
10012e14:	4680      	mov	r8, r0
10012e16:	4357      	muls	r7, r2
10012e18:	4457      	add	r7, sl
10012e1a:	4447      	add	r7, r8
10012e1c:	45ba      	cmp	sl, r7
10012e1e:	d903      	bls.n	10012e28 <__aeabi_dmul+0x274>
10012e20:	2080      	movs	r0, #128	; 0x80
10012e22:	0240      	lsls	r0, r0, #9
10012e24:	4680      	mov	r8, r0
10012e26:	44c1      	add	r9, r8
10012e28:	0c38      	lsrs	r0, r7, #16
10012e2a:	043f      	lsls	r7, r7, #16
10012e2c:	46b8      	mov	r8, r7
10012e2e:	4448      	add	r0, r9
10012e30:	0424      	lsls	r4, r4, #16
10012e32:	0c24      	lsrs	r4, r4, #16
10012e34:	9001      	str	r0, [sp, #4]
10012e36:	9804      	ldr	r0, [sp, #16]
10012e38:	44a0      	add	r8, r4
10012e3a:	4440      	add	r0, r8
10012e3c:	9004      	str	r0, [sp, #16]
10012e3e:	4658      	mov	r0, fp
10012e40:	0c00      	lsrs	r0, r0, #16
10012e42:	4681      	mov	r9, r0
10012e44:	4658      	mov	r0, fp
10012e46:	0404      	lsls	r4, r0, #16
10012e48:	0c20      	lsrs	r0, r4, #16
10012e4a:	4682      	mov	sl, r0
10012e4c:	0007      	movs	r7, r0
10012e4e:	4648      	mov	r0, r9
10012e50:	435f      	muls	r7, r3
10012e52:	464c      	mov	r4, r9
10012e54:	4343      	muls	r3, r0
10012e56:	4660      	mov	r0, ip
10012e58:	4360      	muls	r0, r4
10012e5a:	4664      	mov	r4, ip
10012e5c:	4683      	mov	fp, r0
10012e5e:	4650      	mov	r0, sl
10012e60:	4344      	muls	r4, r0
10012e62:	0c38      	lsrs	r0, r7, #16
10012e64:	4684      	mov	ip, r0
10012e66:	18e4      	adds	r4, r4, r3
10012e68:	4464      	add	r4, ip
10012e6a:	42a3      	cmp	r3, r4
10012e6c:	d903      	bls.n	10012e76 <__aeabi_dmul+0x2c2>
10012e6e:	2380      	movs	r3, #128	; 0x80
10012e70:	025b      	lsls	r3, r3, #9
10012e72:	469c      	mov	ip, r3
10012e74:	44e3      	add	fp, ip
10012e76:	4648      	mov	r0, r9
10012e78:	043f      	lsls	r7, r7, #16
10012e7a:	0c23      	lsrs	r3, r4, #16
10012e7c:	0c3f      	lsrs	r7, r7, #16
10012e7e:	0424      	lsls	r4, r4, #16
10012e80:	19e4      	adds	r4, r4, r7
10012e82:	4657      	mov	r7, sl
10012e84:	4368      	muls	r0, r5
10012e86:	436f      	muls	r7, r5
10012e88:	4684      	mov	ip, r0
10012e8a:	464d      	mov	r5, r9
10012e8c:	4650      	mov	r0, sl
10012e8e:	4355      	muls	r5, r2
10012e90:	4342      	muls	r2, r0
10012e92:	0c38      	lsrs	r0, r7, #16
10012e94:	4681      	mov	r9, r0
10012e96:	4462      	add	r2, ip
10012e98:	444a      	add	r2, r9
10012e9a:	445b      	add	r3, fp
10012e9c:	4594      	cmp	ip, r2
10012e9e:	d903      	bls.n	10012ea8 <__aeabi_dmul+0x2f4>
10012ea0:	2080      	movs	r0, #128	; 0x80
10012ea2:	0240      	lsls	r0, r0, #9
10012ea4:	4684      	mov	ip, r0
10012ea6:	4465      	add	r5, ip
10012ea8:	9803      	ldr	r0, [sp, #12]
10012eaa:	043f      	lsls	r7, r7, #16
10012eac:	4683      	mov	fp, r0
10012eae:	9804      	ldr	r0, [sp, #16]
10012eb0:	0c3f      	lsrs	r7, r7, #16
10012eb2:	4684      	mov	ip, r0
10012eb4:	44e3      	add	fp, ip
10012eb6:	45c3      	cmp	fp, r8
10012eb8:	4180      	sbcs	r0, r0
10012eba:	4240      	negs	r0, r0
10012ebc:	4682      	mov	sl, r0
10012ebe:	0410      	lsls	r0, r2, #16
10012ec0:	4684      	mov	ip, r0
10012ec2:	9801      	ldr	r0, [sp, #4]
10012ec4:	4467      	add	r7, ip
10012ec6:	4684      	mov	ip, r0
10012ec8:	4467      	add	r7, ip
10012eca:	44a3      	add	fp, r4
10012ecc:	46bc      	mov	ip, r7
10012ece:	45a3      	cmp	fp, r4
10012ed0:	41a4      	sbcs	r4, r4
10012ed2:	4699      	mov	r9, r3
10012ed4:	44d4      	add	ip, sl
10012ed6:	4264      	negs	r4, r4
10012ed8:	4287      	cmp	r7, r0
10012eda:	41bf      	sbcs	r7, r7
10012edc:	45d4      	cmp	ip, sl
10012ede:	4180      	sbcs	r0, r0
10012ee0:	44e1      	add	r9, ip
10012ee2:	46a0      	mov	r8, r4
10012ee4:	4599      	cmp	r9, r3
10012ee6:	419b      	sbcs	r3, r3
10012ee8:	427f      	negs	r7, r7
10012eea:	4240      	negs	r0, r0
10012eec:	44c8      	add	r8, r9
10012eee:	4307      	orrs	r7, r0
10012ef0:	0c12      	lsrs	r2, r2, #16
10012ef2:	18ba      	adds	r2, r7, r2
10012ef4:	45a0      	cmp	r8, r4
10012ef6:	41a4      	sbcs	r4, r4
10012ef8:	425f      	negs	r7, r3
10012efa:	003b      	movs	r3, r7
10012efc:	4264      	negs	r4, r4
10012efe:	4323      	orrs	r3, r4
10012f00:	18d7      	adds	r7, r2, r3
10012f02:	4643      	mov	r3, r8
10012f04:	197d      	adds	r5, r7, r5
10012f06:	0ddb      	lsrs	r3, r3, #23
10012f08:	026d      	lsls	r5, r5, #9
10012f0a:	431d      	orrs	r5, r3
10012f0c:	465b      	mov	r3, fp
10012f0e:	025a      	lsls	r2, r3, #9
10012f10:	9b05      	ldr	r3, [sp, #20]
10012f12:	431a      	orrs	r2, r3
10012f14:	1e53      	subs	r3, r2, #1
10012f16:	419a      	sbcs	r2, r3
10012f18:	465b      	mov	r3, fp
10012f1a:	0ddb      	lsrs	r3, r3, #23
10012f1c:	431a      	orrs	r2, r3
10012f1e:	4643      	mov	r3, r8
10012f20:	025b      	lsls	r3, r3, #9
10012f22:	4313      	orrs	r3, r2
10012f24:	01ea      	lsls	r2, r5, #7
10012f26:	d507      	bpl.n	10012f38 <__aeabi_dmul+0x384>
10012f28:	2201      	movs	r2, #1
10012f2a:	085c      	lsrs	r4, r3, #1
10012f2c:	4013      	ands	r3, r2
10012f2e:	4323      	orrs	r3, r4
10012f30:	07ea      	lsls	r2, r5, #31
10012f32:	9e02      	ldr	r6, [sp, #8]
10012f34:	4313      	orrs	r3, r2
10012f36:	086d      	lsrs	r5, r5, #1
10012f38:	4a57      	ldr	r2, [pc, #348]	; (10013098 <__aeabi_dmul+0x4e4>)
10012f3a:	18b2      	adds	r2, r6, r2
10012f3c:	2a00      	cmp	r2, #0
10012f3e:	dd4b      	ble.n	10012fd8 <__aeabi_dmul+0x424>
10012f40:	0758      	lsls	r0, r3, #29
10012f42:	d009      	beq.n	10012f58 <__aeabi_dmul+0x3a4>
10012f44:	200f      	movs	r0, #15
10012f46:	4018      	ands	r0, r3
10012f48:	2804      	cmp	r0, #4
10012f4a:	d005      	beq.n	10012f58 <__aeabi_dmul+0x3a4>
10012f4c:	1d18      	adds	r0, r3, #4
10012f4e:	4298      	cmp	r0, r3
10012f50:	419b      	sbcs	r3, r3
10012f52:	425b      	negs	r3, r3
10012f54:	18ed      	adds	r5, r5, r3
10012f56:	0003      	movs	r3, r0
10012f58:	01e8      	lsls	r0, r5, #7
10012f5a:	d504      	bpl.n	10012f66 <__aeabi_dmul+0x3b2>
10012f5c:	4a4f      	ldr	r2, [pc, #316]	; (1001309c <__aeabi_dmul+0x4e8>)
10012f5e:	4015      	ands	r5, r2
10012f60:	2280      	movs	r2, #128	; 0x80
10012f62:	00d2      	lsls	r2, r2, #3
10012f64:	18b2      	adds	r2, r6, r2
10012f66:	484e      	ldr	r0, [pc, #312]	; (100130a0 <__aeabi_dmul+0x4ec>)
10012f68:	4282      	cmp	r2, r0
10012f6a:	dd00      	ble.n	10012f6e <__aeabi_dmul+0x3ba>
10012f6c:	e6e7      	b.n	10012d3e <__aeabi_dmul+0x18a>
10012f6e:	2401      	movs	r4, #1
10012f70:	08db      	lsrs	r3, r3, #3
10012f72:	0768      	lsls	r0, r5, #29
10012f74:	4318      	orrs	r0, r3
10012f76:	026d      	lsls	r5, r5, #9
10012f78:	0553      	lsls	r3, r2, #21
10012f7a:	4680      	mov	r8, r0
10012f7c:	0b2d      	lsrs	r5, r5, #12
10012f7e:	0d5b      	lsrs	r3, r3, #21
10012f80:	400c      	ands	r4, r1
10012f82:	e67d      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012f84:	2280      	movs	r2, #128	; 0x80
10012f86:	4659      	mov	r1, fp
10012f88:	0312      	lsls	r2, r2, #12
10012f8a:	4211      	tst	r1, r2
10012f8c:	d008      	beq.n	10012fa0 <__aeabi_dmul+0x3ec>
10012f8e:	4215      	tst	r5, r2
10012f90:	d106      	bne.n	10012fa0 <__aeabi_dmul+0x3ec>
10012f92:	4315      	orrs	r5, r2
10012f94:	032d      	lsls	r5, r5, #12
10012f96:	4698      	mov	r8, r3
10012f98:	0b2d      	lsrs	r5, r5, #12
10012f9a:	464c      	mov	r4, r9
10012f9c:	4b41      	ldr	r3, [pc, #260]	; (100130a4 <__aeabi_dmul+0x4f0>)
10012f9e:	e66f      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012fa0:	465d      	mov	r5, fp
10012fa2:	4315      	orrs	r5, r2
10012fa4:	032d      	lsls	r5, r5, #12
10012fa6:	0b2d      	lsrs	r5, r5, #12
10012fa8:	4b3e      	ldr	r3, [pc, #248]	; (100130a4 <__aeabi_dmul+0x4f0>)
10012faa:	e669      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012fac:	0003      	movs	r3, r0
10012fae:	4655      	mov	r5, sl
10012fb0:	3b28      	subs	r3, #40	; 0x28
10012fb2:	409d      	lsls	r5, r3
10012fb4:	2300      	movs	r3, #0
10012fb6:	e6bc      	b.n	10012d32 <__aeabi_dmul+0x17e>
10012fb8:	4650      	mov	r0, sl
10012fba:	f000 fc37 	bl	1001382c <__clzsi2>
10012fbe:	3020      	adds	r0, #32
10012fc0:	e6a8      	b.n	10012d14 <__aeabi_dmul+0x160>
10012fc2:	0003      	movs	r3, r0
10012fc4:	3b28      	subs	r3, #40	; 0x28
10012fc6:	409f      	lsls	r7, r3
10012fc8:	2300      	movs	r3, #0
10012fca:	46bb      	mov	fp, r7
10012fcc:	4698      	mov	r8, r3
10012fce:	e689      	b.n	10012ce4 <__aeabi_dmul+0x130>
10012fd0:	f000 fc2c 	bl	1001382c <__clzsi2>
10012fd4:	3020      	adds	r0, #32
10012fd6:	e673      	b.n	10012cc0 <__aeabi_dmul+0x10c>
10012fd8:	2401      	movs	r4, #1
10012fda:	1aa6      	subs	r6, r4, r2
10012fdc:	2e38      	cmp	r6, #56	; 0x38
10012fde:	dd07      	ble.n	10012ff0 <__aeabi_dmul+0x43c>
10012fe0:	2200      	movs	r2, #0
10012fe2:	400c      	ands	r4, r1
10012fe4:	2300      	movs	r3, #0
10012fe6:	2500      	movs	r5, #0
10012fe8:	4690      	mov	r8, r2
10012fea:	e649      	b.n	10012c80 <__aeabi_dmul+0xcc>
10012fec:	9e02      	ldr	r6, [sp, #8]
10012fee:	e7a3      	b.n	10012f38 <__aeabi_dmul+0x384>
10012ff0:	2e1f      	cmp	r6, #31
10012ff2:	dc20      	bgt.n	10013036 <__aeabi_dmul+0x482>
10012ff4:	2220      	movs	r2, #32
10012ff6:	002c      	movs	r4, r5
10012ff8:	0018      	movs	r0, r3
10012ffa:	1b92      	subs	r2, r2, r6
10012ffc:	40f0      	lsrs	r0, r6
10012ffe:	4094      	lsls	r4, r2
10013000:	4093      	lsls	r3, r2
10013002:	4304      	orrs	r4, r0
10013004:	1e58      	subs	r0, r3, #1
10013006:	4183      	sbcs	r3, r0
10013008:	431c      	orrs	r4, r3
1001300a:	40f5      	lsrs	r5, r6
1001300c:	0763      	lsls	r3, r4, #29
1001300e:	d009      	beq.n	10013024 <__aeabi_dmul+0x470>
10013010:	230f      	movs	r3, #15
10013012:	4023      	ands	r3, r4
10013014:	2b04      	cmp	r3, #4
10013016:	d005      	beq.n	10013024 <__aeabi_dmul+0x470>
10013018:	0023      	movs	r3, r4
1001301a:	1d1c      	adds	r4, r3, #4
1001301c:	429c      	cmp	r4, r3
1001301e:	4192      	sbcs	r2, r2
10013020:	4252      	negs	r2, r2
10013022:	18ad      	adds	r5, r5, r2
10013024:	022b      	lsls	r3, r5, #8
10013026:	d51f      	bpl.n	10013068 <__aeabi_dmul+0x4b4>
10013028:	2401      	movs	r4, #1
1001302a:	2200      	movs	r2, #0
1001302c:	400c      	ands	r4, r1
1001302e:	2301      	movs	r3, #1
10013030:	2500      	movs	r5, #0
10013032:	4690      	mov	r8, r2
10013034:	e624      	b.n	10012c80 <__aeabi_dmul+0xcc>
10013036:	201f      	movs	r0, #31
10013038:	002c      	movs	r4, r5
1001303a:	4240      	negs	r0, r0
1001303c:	1a82      	subs	r2, r0, r2
1001303e:	40d4      	lsrs	r4, r2
10013040:	2e20      	cmp	r6, #32
10013042:	d01c      	beq.n	1001307e <__aeabi_dmul+0x4ca>
10013044:	2240      	movs	r2, #64	; 0x40
10013046:	1b96      	subs	r6, r2, r6
10013048:	40b5      	lsls	r5, r6
1001304a:	432b      	orrs	r3, r5
1001304c:	1e58      	subs	r0, r3, #1
1001304e:	4183      	sbcs	r3, r0
10013050:	2007      	movs	r0, #7
10013052:	4323      	orrs	r3, r4
10013054:	4018      	ands	r0, r3
10013056:	2500      	movs	r5, #0
10013058:	2800      	cmp	r0, #0
1001305a:	d009      	beq.n	10013070 <__aeabi_dmul+0x4bc>
1001305c:	220f      	movs	r2, #15
1001305e:	2500      	movs	r5, #0
10013060:	401a      	ands	r2, r3
10013062:	001c      	movs	r4, r3
10013064:	2a04      	cmp	r2, #4
10013066:	d1d8      	bne.n	1001301a <__aeabi_dmul+0x466>
10013068:	0023      	movs	r3, r4
1001306a:	0768      	lsls	r0, r5, #29
1001306c:	026d      	lsls	r5, r5, #9
1001306e:	0b2d      	lsrs	r5, r5, #12
10013070:	2401      	movs	r4, #1
10013072:	08db      	lsrs	r3, r3, #3
10013074:	4303      	orrs	r3, r0
10013076:	4698      	mov	r8, r3
10013078:	400c      	ands	r4, r1
1001307a:	2300      	movs	r3, #0
1001307c:	e600      	b.n	10012c80 <__aeabi_dmul+0xcc>
1001307e:	2500      	movs	r5, #0
10013080:	e7e3      	b.n	1001304a <__aeabi_dmul+0x496>
10013082:	2280      	movs	r2, #128	; 0x80
10013084:	2401      	movs	r4, #1
10013086:	0312      	lsls	r2, r2, #12
10013088:	4315      	orrs	r5, r2
1001308a:	032d      	lsls	r5, r5, #12
1001308c:	4698      	mov	r8, r3
1001308e:	0b2d      	lsrs	r5, r5, #12
10013090:	400c      	ands	r4, r1
10013092:	4b04      	ldr	r3, [pc, #16]	; (100130a4 <__aeabi_dmul+0x4f0>)
10013094:	e5f4      	b.n	10012c80 <__aeabi_dmul+0xcc>
10013096:	46c0      	nop			; (mov r8, r8)
10013098:	000003ff 	.word	0x000003ff
1001309c:	feffffff 	.word	0xfeffffff
100130a0:	000007fe 	.word	0x000007fe
100130a4:	000007ff 	.word	0x000007ff

100130a8 <__aeabi_dsub>:
100130a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100130aa:	4657      	mov	r7, sl
100130ac:	464e      	mov	r6, r9
100130ae:	4645      	mov	r5, r8
100130b0:	b4e0      	push	{r5, r6, r7}
100130b2:	000e      	movs	r6, r1
100130b4:	0011      	movs	r1, r2
100130b6:	0ff2      	lsrs	r2, r6, #31
100130b8:	4692      	mov	sl, r2
100130ba:	00c5      	lsls	r5, r0, #3
100130bc:	0f42      	lsrs	r2, r0, #29
100130be:	0318      	lsls	r0, r3, #12
100130c0:	0337      	lsls	r7, r6, #12
100130c2:	0074      	lsls	r4, r6, #1
100130c4:	0a40      	lsrs	r0, r0, #9
100130c6:	0f4e      	lsrs	r6, r1, #29
100130c8:	0a7f      	lsrs	r7, r7, #9
100130ca:	4330      	orrs	r0, r6
100130cc:	4ecf      	ldr	r6, [pc, #828]	; (1001340c <__aeabi_dsub+0x364>)
100130ce:	4317      	orrs	r7, r2
100130d0:	005a      	lsls	r2, r3, #1
100130d2:	0d64      	lsrs	r4, r4, #21
100130d4:	0d52      	lsrs	r2, r2, #21
100130d6:	0fdb      	lsrs	r3, r3, #31
100130d8:	00c9      	lsls	r1, r1, #3
100130da:	42b2      	cmp	r2, r6
100130dc:	d100      	bne.n	100130e0 <__aeabi_dsub+0x38>
100130de:	e0e5      	b.n	100132ac <__aeabi_dsub+0x204>
100130e0:	2601      	movs	r6, #1
100130e2:	4073      	eors	r3, r6
100130e4:	1aa6      	subs	r6, r4, r2
100130e6:	46b4      	mov	ip, r6
100130e8:	4553      	cmp	r3, sl
100130ea:	d100      	bne.n	100130ee <__aeabi_dsub+0x46>
100130ec:	e0af      	b.n	1001324e <__aeabi_dsub+0x1a6>
100130ee:	2e00      	cmp	r6, #0
100130f0:	dc00      	bgt.n	100130f4 <__aeabi_dsub+0x4c>
100130f2:	e10d      	b.n	10013310 <__aeabi_dsub+0x268>
100130f4:	2a00      	cmp	r2, #0
100130f6:	d13a      	bne.n	1001316e <__aeabi_dsub+0xc6>
100130f8:	0003      	movs	r3, r0
100130fa:	430b      	orrs	r3, r1
100130fc:	d000      	beq.n	10013100 <__aeabi_dsub+0x58>
100130fe:	e0e4      	b.n	100132ca <__aeabi_dsub+0x222>
10013100:	076b      	lsls	r3, r5, #29
10013102:	d009      	beq.n	10013118 <__aeabi_dsub+0x70>
10013104:	230f      	movs	r3, #15
10013106:	402b      	ands	r3, r5
10013108:	2b04      	cmp	r3, #4
1001310a:	d005      	beq.n	10013118 <__aeabi_dsub+0x70>
1001310c:	1d2b      	adds	r3, r5, #4
1001310e:	42ab      	cmp	r3, r5
10013110:	41ad      	sbcs	r5, r5
10013112:	426d      	negs	r5, r5
10013114:	197f      	adds	r7, r7, r5
10013116:	001d      	movs	r5, r3
10013118:	023b      	lsls	r3, r7, #8
1001311a:	d400      	bmi.n	1001311e <__aeabi_dsub+0x76>
1001311c:	e088      	b.n	10013230 <__aeabi_dsub+0x188>
1001311e:	4bbb      	ldr	r3, [pc, #748]	; (1001340c <__aeabi_dsub+0x364>)
10013120:	3401      	adds	r4, #1
10013122:	429c      	cmp	r4, r3
10013124:	d100      	bne.n	10013128 <__aeabi_dsub+0x80>
10013126:	e110      	b.n	1001334a <__aeabi_dsub+0x2a2>
10013128:	003a      	movs	r2, r7
1001312a:	4bb9      	ldr	r3, [pc, #740]	; (10013410 <__aeabi_dsub+0x368>)
1001312c:	4651      	mov	r1, sl
1001312e:	401a      	ands	r2, r3
10013130:	2301      	movs	r3, #1
10013132:	0750      	lsls	r0, r2, #29
10013134:	08ed      	lsrs	r5, r5, #3
10013136:	0252      	lsls	r2, r2, #9
10013138:	0564      	lsls	r4, r4, #21
1001313a:	4305      	orrs	r5, r0
1001313c:	0b12      	lsrs	r2, r2, #12
1001313e:	0d64      	lsrs	r4, r4, #21
10013140:	400b      	ands	r3, r1
10013142:	2100      	movs	r1, #0
10013144:	0028      	movs	r0, r5
10013146:	0312      	lsls	r2, r2, #12
10013148:	0d0d      	lsrs	r5, r1, #20
1001314a:	0b12      	lsrs	r2, r2, #12
1001314c:	0564      	lsls	r4, r4, #21
1001314e:	052d      	lsls	r5, r5, #20
10013150:	4315      	orrs	r5, r2
10013152:	0862      	lsrs	r2, r4, #1
10013154:	4caf      	ldr	r4, [pc, #700]	; (10013414 <__aeabi_dsub+0x36c>)
10013156:	07db      	lsls	r3, r3, #31
10013158:	402c      	ands	r4, r5
1001315a:	4314      	orrs	r4, r2
1001315c:	0064      	lsls	r4, r4, #1
1001315e:	0864      	lsrs	r4, r4, #1
10013160:	431c      	orrs	r4, r3
10013162:	0021      	movs	r1, r4
10013164:	bc1c      	pop	{r2, r3, r4}
10013166:	4690      	mov	r8, r2
10013168:	4699      	mov	r9, r3
1001316a:	46a2      	mov	sl, r4
1001316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001316e:	4ba7      	ldr	r3, [pc, #668]	; (1001340c <__aeabi_dsub+0x364>)
10013170:	429c      	cmp	r4, r3
10013172:	d0c5      	beq.n	10013100 <__aeabi_dsub+0x58>
10013174:	2380      	movs	r3, #128	; 0x80
10013176:	041b      	lsls	r3, r3, #16
10013178:	4318      	orrs	r0, r3
1001317a:	4663      	mov	r3, ip
1001317c:	2b38      	cmp	r3, #56	; 0x38
1001317e:	dd00      	ble.n	10013182 <__aeabi_dsub+0xda>
10013180:	e0fd      	b.n	1001337e <__aeabi_dsub+0x2d6>
10013182:	2b1f      	cmp	r3, #31
10013184:	dd00      	ble.n	10013188 <__aeabi_dsub+0xe0>
10013186:	e130      	b.n	100133ea <__aeabi_dsub+0x342>
10013188:	4662      	mov	r2, ip
1001318a:	2320      	movs	r3, #32
1001318c:	1a9b      	subs	r3, r3, r2
1001318e:	0002      	movs	r2, r0
10013190:	409a      	lsls	r2, r3
10013192:	4666      	mov	r6, ip
10013194:	4690      	mov	r8, r2
10013196:	000a      	movs	r2, r1
10013198:	4099      	lsls	r1, r3
1001319a:	40f2      	lsrs	r2, r6
1001319c:	4646      	mov	r6, r8
1001319e:	1e4b      	subs	r3, r1, #1
100131a0:	4199      	sbcs	r1, r3
100131a2:	4332      	orrs	r2, r6
100131a4:	4311      	orrs	r1, r2
100131a6:	4663      	mov	r3, ip
100131a8:	0002      	movs	r2, r0
100131aa:	40da      	lsrs	r2, r3
100131ac:	1a69      	subs	r1, r5, r1
100131ae:	428d      	cmp	r5, r1
100131b0:	419b      	sbcs	r3, r3
100131b2:	000d      	movs	r5, r1
100131b4:	1aba      	subs	r2, r7, r2
100131b6:	425b      	negs	r3, r3
100131b8:	1ad7      	subs	r7, r2, r3
100131ba:	023b      	lsls	r3, r7, #8
100131bc:	d535      	bpl.n	1001322a <__aeabi_dsub+0x182>
100131be:	027a      	lsls	r2, r7, #9
100131c0:	0a53      	lsrs	r3, r2, #9
100131c2:	4698      	mov	r8, r3
100131c4:	4643      	mov	r3, r8
100131c6:	2b00      	cmp	r3, #0
100131c8:	d100      	bne.n	100131cc <__aeabi_dsub+0x124>
100131ca:	e0c4      	b.n	10013356 <__aeabi_dsub+0x2ae>
100131cc:	4640      	mov	r0, r8
100131ce:	f000 fb2d 	bl	1001382c <__clzsi2>
100131d2:	0003      	movs	r3, r0
100131d4:	3b08      	subs	r3, #8
100131d6:	2b1f      	cmp	r3, #31
100131d8:	dd00      	ble.n	100131dc <__aeabi_dsub+0x134>
100131da:	e0c5      	b.n	10013368 <__aeabi_dsub+0x2c0>
100131dc:	2220      	movs	r2, #32
100131de:	0029      	movs	r1, r5
100131e0:	1ad2      	subs	r2, r2, r3
100131e2:	4647      	mov	r7, r8
100131e4:	40d1      	lsrs	r1, r2
100131e6:	409f      	lsls	r7, r3
100131e8:	000a      	movs	r2, r1
100131ea:	409d      	lsls	r5, r3
100131ec:	433a      	orrs	r2, r7
100131ee:	429c      	cmp	r4, r3
100131f0:	dd00      	ble.n	100131f4 <__aeabi_dsub+0x14c>
100131f2:	e0c0      	b.n	10013376 <__aeabi_dsub+0x2ce>
100131f4:	1b1c      	subs	r4, r3, r4
100131f6:	1c63      	adds	r3, r4, #1
100131f8:	2b1f      	cmp	r3, #31
100131fa:	dd00      	ble.n	100131fe <__aeabi_dsub+0x156>
100131fc:	e0e4      	b.n	100133c8 <__aeabi_dsub+0x320>
100131fe:	2120      	movs	r1, #32
10013200:	0014      	movs	r4, r2
10013202:	0028      	movs	r0, r5
10013204:	1ac9      	subs	r1, r1, r3
10013206:	40d8      	lsrs	r0, r3
10013208:	408c      	lsls	r4, r1
1001320a:	408d      	lsls	r5, r1
1001320c:	4304      	orrs	r4, r0
1001320e:	40da      	lsrs	r2, r3
10013210:	1e68      	subs	r0, r5, #1
10013212:	4185      	sbcs	r5, r0
10013214:	0017      	movs	r7, r2
10013216:	4325      	orrs	r5, r4
10013218:	2400      	movs	r4, #0
1001321a:	e771      	b.n	10013100 <__aeabi_dsub+0x58>
1001321c:	4642      	mov	r2, r8
1001321e:	4663      	mov	r3, ip
10013220:	431a      	orrs	r2, r3
10013222:	d100      	bne.n	10013226 <__aeabi_dsub+0x17e>
10013224:	e24c      	b.n	100136c0 <__aeabi_dsub+0x618>
10013226:	4667      	mov	r7, ip
10013228:	4645      	mov	r5, r8
1001322a:	076b      	lsls	r3, r5, #29
1001322c:	d000      	beq.n	10013230 <__aeabi_dsub+0x188>
1001322e:	e769      	b.n	10013104 <__aeabi_dsub+0x5c>
10013230:	2301      	movs	r3, #1
10013232:	4651      	mov	r1, sl
10013234:	0778      	lsls	r0, r7, #29
10013236:	08ed      	lsrs	r5, r5, #3
10013238:	08fa      	lsrs	r2, r7, #3
1001323a:	400b      	ands	r3, r1
1001323c:	4305      	orrs	r5, r0
1001323e:	4973      	ldr	r1, [pc, #460]	; (1001340c <__aeabi_dsub+0x364>)
10013240:	428c      	cmp	r4, r1
10013242:	d038      	beq.n	100132b6 <__aeabi_dsub+0x20e>
10013244:	0312      	lsls	r2, r2, #12
10013246:	0564      	lsls	r4, r4, #21
10013248:	0b12      	lsrs	r2, r2, #12
1001324a:	0d64      	lsrs	r4, r4, #21
1001324c:	e779      	b.n	10013142 <__aeabi_dsub+0x9a>
1001324e:	2e00      	cmp	r6, #0
10013250:	dc00      	bgt.n	10013254 <__aeabi_dsub+0x1ac>
10013252:	e09a      	b.n	1001338a <__aeabi_dsub+0x2e2>
10013254:	2a00      	cmp	r2, #0
10013256:	d047      	beq.n	100132e8 <__aeabi_dsub+0x240>
10013258:	4a6c      	ldr	r2, [pc, #432]	; (1001340c <__aeabi_dsub+0x364>)
1001325a:	4294      	cmp	r4, r2
1001325c:	d100      	bne.n	10013260 <__aeabi_dsub+0x1b8>
1001325e:	e74f      	b.n	10013100 <__aeabi_dsub+0x58>
10013260:	2280      	movs	r2, #128	; 0x80
10013262:	0412      	lsls	r2, r2, #16
10013264:	4310      	orrs	r0, r2
10013266:	4662      	mov	r2, ip
10013268:	2a38      	cmp	r2, #56	; 0x38
1001326a:	dc00      	bgt.n	1001326e <__aeabi_dsub+0x1c6>
1001326c:	e108      	b.n	10013480 <__aeabi_dsub+0x3d8>
1001326e:	4301      	orrs	r1, r0
10013270:	1e48      	subs	r0, r1, #1
10013272:	4181      	sbcs	r1, r0
10013274:	2200      	movs	r2, #0
10013276:	b2c9      	uxtb	r1, r1
10013278:	1949      	adds	r1, r1, r5
1001327a:	19d2      	adds	r2, r2, r7
1001327c:	42a9      	cmp	r1, r5
1001327e:	41bf      	sbcs	r7, r7
10013280:	000d      	movs	r5, r1
10013282:	427f      	negs	r7, r7
10013284:	18bf      	adds	r7, r7, r2
10013286:	023a      	lsls	r2, r7, #8
10013288:	d400      	bmi.n	1001328c <__aeabi_dsub+0x1e4>
1001328a:	e142      	b.n	10013512 <__aeabi_dsub+0x46a>
1001328c:	4a5f      	ldr	r2, [pc, #380]	; (1001340c <__aeabi_dsub+0x364>)
1001328e:	3401      	adds	r4, #1
10013290:	4294      	cmp	r4, r2
10013292:	d100      	bne.n	10013296 <__aeabi_dsub+0x1ee>
10013294:	e14e      	b.n	10013534 <__aeabi_dsub+0x48c>
10013296:	2001      	movs	r0, #1
10013298:	4a5d      	ldr	r2, [pc, #372]	; (10013410 <__aeabi_dsub+0x368>)
1001329a:	0869      	lsrs	r1, r5, #1
1001329c:	403a      	ands	r2, r7
1001329e:	4028      	ands	r0, r5
100132a0:	4308      	orrs	r0, r1
100132a2:	07d5      	lsls	r5, r2, #31
100132a4:	4305      	orrs	r5, r0
100132a6:	0857      	lsrs	r7, r2, #1
100132a8:	469a      	mov	sl, r3
100132aa:	e729      	b.n	10013100 <__aeabi_dsub+0x58>
100132ac:	0006      	movs	r6, r0
100132ae:	430e      	orrs	r6, r1
100132b0:	d000      	beq.n	100132b4 <__aeabi_dsub+0x20c>
100132b2:	e717      	b.n	100130e4 <__aeabi_dsub+0x3c>
100132b4:	e714      	b.n	100130e0 <__aeabi_dsub+0x38>
100132b6:	0029      	movs	r1, r5
100132b8:	4311      	orrs	r1, r2
100132ba:	d100      	bne.n	100132be <__aeabi_dsub+0x216>
100132bc:	e1f9      	b.n	100136b2 <__aeabi_dsub+0x60a>
100132be:	2180      	movs	r1, #128	; 0x80
100132c0:	0309      	lsls	r1, r1, #12
100132c2:	430a      	orrs	r2, r1
100132c4:	0312      	lsls	r2, r2, #12
100132c6:	0b12      	lsrs	r2, r2, #12
100132c8:	e73b      	b.n	10013142 <__aeabi_dsub+0x9a>
100132ca:	2301      	movs	r3, #1
100132cc:	425b      	negs	r3, r3
100132ce:	4698      	mov	r8, r3
100132d0:	44c4      	add	ip, r8
100132d2:	4663      	mov	r3, ip
100132d4:	2b00      	cmp	r3, #0
100132d6:	d172      	bne.n	100133be <__aeabi_dsub+0x316>
100132d8:	1a69      	subs	r1, r5, r1
100132da:	428d      	cmp	r5, r1
100132dc:	419b      	sbcs	r3, r3
100132de:	1a3f      	subs	r7, r7, r0
100132e0:	425b      	negs	r3, r3
100132e2:	1aff      	subs	r7, r7, r3
100132e4:	000d      	movs	r5, r1
100132e6:	e768      	b.n	100131ba <__aeabi_dsub+0x112>
100132e8:	0002      	movs	r2, r0
100132ea:	430a      	orrs	r2, r1
100132ec:	d100      	bne.n	100132f0 <__aeabi_dsub+0x248>
100132ee:	e707      	b.n	10013100 <__aeabi_dsub+0x58>
100132f0:	2201      	movs	r2, #1
100132f2:	4252      	negs	r2, r2
100132f4:	4690      	mov	r8, r2
100132f6:	44c4      	add	ip, r8
100132f8:	4662      	mov	r2, ip
100132fa:	2a00      	cmp	r2, #0
100132fc:	d000      	beq.n	10013300 <__aeabi_dsub+0x258>
100132fe:	e0e6      	b.n	100134ce <__aeabi_dsub+0x426>
10013300:	1869      	adds	r1, r5, r1
10013302:	42a9      	cmp	r1, r5
10013304:	41b6      	sbcs	r6, r6
10013306:	183f      	adds	r7, r7, r0
10013308:	4276      	negs	r6, r6
1001330a:	19f7      	adds	r7, r6, r7
1001330c:	000d      	movs	r5, r1
1001330e:	e7ba      	b.n	10013286 <__aeabi_dsub+0x1de>
10013310:	2e00      	cmp	r6, #0
10013312:	d000      	beq.n	10013316 <__aeabi_dsub+0x26e>
10013314:	e080      	b.n	10013418 <__aeabi_dsub+0x370>
10013316:	1c62      	adds	r2, r4, #1
10013318:	0552      	lsls	r2, r2, #21
1001331a:	0d52      	lsrs	r2, r2, #21
1001331c:	2a01      	cmp	r2, #1
1001331e:	dc00      	bgt.n	10013322 <__aeabi_dsub+0x27a>
10013320:	e0f9      	b.n	10013516 <__aeabi_dsub+0x46e>
10013322:	1a6a      	subs	r2, r5, r1
10013324:	4691      	mov	r9, r2
10013326:	454d      	cmp	r5, r9
10013328:	41b6      	sbcs	r6, r6
1001332a:	1a3a      	subs	r2, r7, r0
1001332c:	4276      	negs	r6, r6
1001332e:	1b92      	subs	r2, r2, r6
10013330:	4690      	mov	r8, r2
10013332:	0212      	lsls	r2, r2, #8
10013334:	d400      	bmi.n	10013338 <__aeabi_dsub+0x290>
10013336:	e099      	b.n	1001346c <__aeabi_dsub+0x3c4>
10013338:	1b4d      	subs	r5, r1, r5
1001333a:	42a9      	cmp	r1, r5
1001333c:	4189      	sbcs	r1, r1
1001333e:	1bc7      	subs	r7, r0, r7
10013340:	4249      	negs	r1, r1
10013342:	1a7a      	subs	r2, r7, r1
10013344:	4690      	mov	r8, r2
10013346:	469a      	mov	sl, r3
10013348:	e73c      	b.n	100131c4 <__aeabi_dsub+0x11c>
1001334a:	4652      	mov	r2, sl
1001334c:	2301      	movs	r3, #1
1001334e:	2500      	movs	r5, #0
10013350:	4013      	ands	r3, r2
10013352:	2200      	movs	r2, #0
10013354:	e6f5      	b.n	10013142 <__aeabi_dsub+0x9a>
10013356:	0028      	movs	r0, r5
10013358:	f000 fa68 	bl	1001382c <__clzsi2>
1001335c:	3020      	adds	r0, #32
1001335e:	0003      	movs	r3, r0
10013360:	3b08      	subs	r3, #8
10013362:	2b1f      	cmp	r3, #31
10013364:	dc00      	bgt.n	10013368 <__aeabi_dsub+0x2c0>
10013366:	e739      	b.n	100131dc <__aeabi_dsub+0x134>
10013368:	002a      	movs	r2, r5
1001336a:	3828      	subs	r0, #40	; 0x28
1001336c:	4082      	lsls	r2, r0
1001336e:	2500      	movs	r5, #0
10013370:	429c      	cmp	r4, r3
10013372:	dc00      	bgt.n	10013376 <__aeabi_dsub+0x2ce>
10013374:	e73e      	b.n	100131f4 <__aeabi_dsub+0x14c>
10013376:	4f26      	ldr	r7, [pc, #152]	; (10013410 <__aeabi_dsub+0x368>)
10013378:	1ae4      	subs	r4, r4, r3
1001337a:	4017      	ands	r7, r2
1001337c:	e6c0      	b.n	10013100 <__aeabi_dsub+0x58>
1001337e:	4301      	orrs	r1, r0
10013380:	1e48      	subs	r0, r1, #1
10013382:	4181      	sbcs	r1, r0
10013384:	2200      	movs	r2, #0
10013386:	b2c9      	uxtb	r1, r1
10013388:	e710      	b.n	100131ac <__aeabi_dsub+0x104>
1001338a:	2e00      	cmp	r6, #0
1001338c:	d000      	beq.n	10013390 <__aeabi_dsub+0x2e8>
1001338e:	e0f1      	b.n	10013574 <__aeabi_dsub+0x4cc>
10013390:	1c62      	adds	r2, r4, #1
10013392:	4694      	mov	ip, r2
10013394:	0552      	lsls	r2, r2, #21
10013396:	0d52      	lsrs	r2, r2, #21
10013398:	2a01      	cmp	r2, #1
1001339a:	dc00      	bgt.n	1001339e <__aeabi_dsub+0x2f6>
1001339c:	e0a0      	b.n	100134e0 <__aeabi_dsub+0x438>
1001339e:	4a1b      	ldr	r2, [pc, #108]	; (1001340c <__aeabi_dsub+0x364>)
100133a0:	4594      	cmp	ip, r2
100133a2:	d100      	bne.n	100133a6 <__aeabi_dsub+0x2fe>
100133a4:	e0c5      	b.n	10013532 <__aeabi_dsub+0x48a>
100133a6:	1869      	adds	r1, r5, r1
100133a8:	42a9      	cmp	r1, r5
100133aa:	4192      	sbcs	r2, r2
100133ac:	183f      	adds	r7, r7, r0
100133ae:	4252      	negs	r2, r2
100133b0:	19d2      	adds	r2, r2, r7
100133b2:	0849      	lsrs	r1, r1, #1
100133b4:	07d5      	lsls	r5, r2, #31
100133b6:	430d      	orrs	r5, r1
100133b8:	0857      	lsrs	r7, r2, #1
100133ba:	4664      	mov	r4, ip
100133bc:	e6a0      	b.n	10013100 <__aeabi_dsub+0x58>
100133be:	4b13      	ldr	r3, [pc, #76]	; (1001340c <__aeabi_dsub+0x364>)
100133c0:	429c      	cmp	r4, r3
100133c2:	d000      	beq.n	100133c6 <__aeabi_dsub+0x31e>
100133c4:	e6d9      	b.n	1001317a <__aeabi_dsub+0xd2>
100133c6:	e69b      	b.n	10013100 <__aeabi_dsub+0x58>
100133c8:	0011      	movs	r1, r2
100133ca:	3c1f      	subs	r4, #31
100133cc:	40e1      	lsrs	r1, r4
100133ce:	000c      	movs	r4, r1
100133d0:	2b20      	cmp	r3, #32
100133d2:	d100      	bne.n	100133d6 <__aeabi_dsub+0x32e>
100133d4:	e080      	b.n	100134d8 <__aeabi_dsub+0x430>
100133d6:	2140      	movs	r1, #64	; 0x40
100133d8:	1acb      	subs	r3, r1, r3
100133da:	409a      	lsls	r2, r3
100133dc:	4315      	orrs	r5, r2
100133de:	1e6a      	subs	r2, r5, #1
100133e0:	4195      	sbcs	r5, r2
100133e2:	2700      	movs	r7, #0
100133e4:	4325      	orrs	r5, r4
100133e6:	2400      	movs	r4, #0
100133e8:	e71f      	b.n	1001322a <__aeabi_dsub+0x182>
100133ea:	4663      	mov	r3, ip
100133ec:	0002      	movs	r2, r0
100133ee:	3b20      	subs	r3, #32
100133f0:	40da      	lsrs	r2, r3
100133f2:	4663      	mov	r3, ip
100133f4:	2b20      	cmp	r3, #32
100133f6:	d071      	beq.n	100134dc <__aeabi_dsub+0x434>
100133f8:	2340      	movs	r3, #64	; 0x40
100133fa:	4666      	mov	r6, ip
100133fc:	1b9b      	subs	r3, r3, r6
100133fe:	4098      	lsls	r0, r3
10013400:	4301      	orrs	r1, r0
10013402:	1e48      	subs	r0, r1, #1
10013404:	4181      	sbcs	r1, r0
10013406:	4311      	orrs	r1, r2
10013408:	2200      	movs	r2, #0
1001340a:	e6cf      	b.n	100131ac <__aeabi_dsub+0x104>
1001340c:	000007ff 	.word	0x000007ff
10013410:	ff7fffff 	.word	0xff7fffff
10013414:	800fffff 	.word	0x800fffff
10013418:	2c00      	cmp	r4, #0
1001341a:	d048      	beq.n	100134ae <__aeabi_dsub+0x406>
1001341c:	4cca      	ldr	r4, [pc, #808]	; (10013748 <__aeabi_dsub+0x6a0>)
1001341e:	42a2      	cmp	r2, r4
10013420:	d100      	bne.n	10013424 <__aeabi_dsub+0x37c>
10013422:	e0a2      	b.n	1001356a <__aeabi_dsub+0x4c2>
10013424:	4274      	negs	r4, r6
10013426:	46a1      	mov	r9, r4
10013428:	2480      	movs	r4, #128	; 0x80
1001342a:	0424      	lsls	r4, r4, #16
1001342c:	4327      	orrs	r7, r4
1001342e:	464c      	mov	r4, r9
10013430:	2c38      	cmp	r4, #56	; 0x38
10013432:	dd00      	ble.n	10013436 <__aeabi_dsub+0x38e>
10013434:	e0db      	b.n	100135ee <__aeabi_dsub+0x546>
10013436:	2c1f      	cmp	r4, #31
10013438:	dd00      	ble.n	1001343c <__aeabi_dsub+0x394>
1001343a:	e144      	b.n	100136c6 <__aeabi_dsub+0x61e>
1001343c:	464e      	mov	r6, r9
1001343e:	2420      	movs	r4, #32
10013440:	1ba4      	subs	r4, r4, r6
10013442:	003e      	movs	r6, r7
10013444:	40a6      	lsls	r6, r4
10013446:	46a2      	mov	sl, r4
10013448:	46b0      	mov	r8, r6
1001344a:	464c      	mov	r4, r9
1001344c:	002e      	movs	r6, r5
1001344e:	40e6      	lsrs	r6, r4
10013450:	46b4      	mov	ip, r6
10013452:	4646      	mov	r6, r8
10013454:	4664      	mov	r4, ip
10013456:	4326      	orrs	r6, r4
10013458:	4654      	mov	r4, sl
1001345a:	40a5      	lsls	r5, r4
1001345c:	1e6c      	subs	r4, r5, #1
1001345e:	41a5      	sbcs	r5, r4
10013460:	0034      	movs	r4, r6
10013462:	432c      	orrs	r4, r5
10013464:	464d      	mov	r5, r9
10013466:	40ef      	lsrs	r7, r5
10013468:	1b0d      	subs	r5, r1, r4
1001346a:	e028      	b.n	100134be <__aeabi_dsub+0x416>
1001346c:	464a      	mov	r2, r9
1001346e:	4643      	mov	r3, r8
10013470:	464d      	mov	r5, r9
10013472:	431a      	orrs	r2, r3
10013474:	d000      	beq.n	10013478 <__aeabi_dsub+0x3d0>
10013476:	e6a5      	b.n	100131c4 <__aeabi_dsub+0x11c>
10013478:	2300      	movs	r3, #0
1001347a:	2400      	movs	r4, #0
1001347c:	2500      	movs	r5, #0
1001347e:	e6de      	b.n	1001323e <__aeabi_dsub+0x196>
10013480:	2a1f      	cmp	r2, #31
10013482:	dc5a      	bgt.n	1001353a <__aeabi_dsub+0x492>
10013484:	4666      	mov	r6, ip
10013486:	2220      	movs	r2, #32
10013488:	1b92      	subs	r2, r2, r6
1001348a:	0006      	movs	r6, r0
1001348c:	4096      	lsls	r6, r2
1001348e:	4691      	mov	r9, r2
10013490:	46b0      	mov	r8, r6
10013492:	4662      	mov	r2, ip
10013494:	000e      	movs	r6, r1
10013496:	40d6      	lsrs	r6, r2
10013498:	4642      	mov	r2, r8
1001349a:	4316      	orrs	r6, r2
1001349c:	464a      	mov	r2, r9
1001349e:	4091      	lsls	r1, r2
100134a0:	1e4a      	subs	r2, r1, #1
100134a2:	4191      	sbcs	r1, r2
100134a4:	0002      	movs	r2, r0
100134a6:	4660      	mov	r0, ip
100134a8:	4331      	orrs	r1, r6
100134aa:	40c2      	lsrs	r2, r0
100134ac:	e6e4      	b.n	10013278 <__aeabi_dsub+0x1d0>
100134ae:	003c      	movs	r4, r7
100134b0:	432c      	orrs	r4, r5
100134b2:	d05a      	beq.n	1001356a <__aeabi_dsub+0x4c2>
100134b4:	43f4      	mvns	r4, r6
100134b6:	46a1      	mov	r9, r4
100134b8:	2c00      	cmp	r4, #0
100134ba:	d152      	bne.n	10013562 <__aeabi_dsub+0x4ba>
100134bc:	1b4d      	subs	r5, r1, r5
100134be:	42a9      	cmp	r1, r5
100134c0:	4189      	sbcs	r1, r1
100134c2:	1bc7      	subs	r7, r0, r7
100134c4:	4249      	negs	r1, r1
100134c6:	1a7f      	subs	r7, r7, r1
100134c8:	0014      	movs	r4, r2
100134ca:	469a      	mov	sl, r3
100134cc:	e675      	b.n	100131ba <__aeabi_dsub+0x112>
100134ce:	4a9e      	ldr	r2, [pc, #632]	; (10013748 <__aeabi_dsub+0x6a0>)
100134d0:	4294      	cmp	r4, r2
100134d2:	d000      	beq.n	100134d6 <__aeabi_dsub+0x42e>
100134d4:	e6c7      	b.n	10013266 <__aeabi_dsub+0x1be>
100134d6:	e613      	b.n	10013100 <__aeabi_dsub+0x58>
100134d8:	2200      	movs	r2, #0
100134da:	e77f      	b.n	100133dc <__aeabi_dsub+0x334>
100134dc:	2000      	movs	r0, #0
100134de:	e78f      	b.n	10013400 <__aeabi_dsub+0x358>
100134e0:	2c00      	cmp	r4, #0
100134e2:	d000      	beq.n	100134e6 <__aeabi_dsub+0x43e>
100134e4:	e0c8      	b.n	10013678 <__aeabi_dsub+0x5d0>
100134e6:	003b      	movs	r3, r7
100134e8:	432b      	orrs	r3, r5
100134ea:	d100      	bne.n	100134ee <__aeabi_dsub+0x446>
100134ec:	e10f      	b.n	1001370e <__aeabi_dsub+0x666>
100134ee:	0003      	movs	r3, r0
100134f0:	430b      	orrs	r3, r1
100134f2:	d100      	bne.n	100134f6 <__aeabi_dsub+0x44e>
100134f4:	e604      	b.n	10013100 <__aeabi_dsub+0x58>
100134f6:	1869      	adds	r1, r5, r1
100134f8:	42a9      	cmp	r1, r5
100134fa:	419b      	sbcs	r3, r3
100134fc:	183f      	adds	r7, r7, r0
100134fe:	425b      	negs	r3, r3
10013500:	19df      	adds	r7, r3, r7
10013502:	023b      	lsls	r3, r7, #8
10013504:	d400      	bmi.n	10013508 <__aeabi_dsub+0x460>
10013506:	e11a      	b.n	1001373e <__aeabi_dsub+0x696>
10013508:	4b90      	ldr	r3, [pc, #576]	; (1001374c <__aeabi_dsub+0x6a4>)
1001350a:	000d      	movs	r5, r1
1001350c:	401f      	ands	r7, r3
1001350e:	4664      	mov	r4, ip
10013510:	e5f6      	b.n	10013100 <__aeabi_dsub+0x58>
10013512:	469a      	mov	sl, r3
10013514:	e689      	b.n	1001322a <__aeabi_dsub+0x182>
10013516:	003a      	movs	r2, r7
10013518:	432a      	orrs	r2, r5
1001351a:	2c00      	cmp	r4, #0
1001351c:	d15c      	bne.n	100135d8 <__aeabi_dsub+0x530>
1001351e:	2a00      	cmp	r2, #0
10013520:	d175      	bne.n	1001360e <__aeabi_dsub+0x566>
10013522:	0002      	movs	r2, r0
10013524:	430a      	orrs	r2, r1
10013526:	d100      	bne.n	1001352a <__aeabi_dsub+0x482>
10013528:	e0ca      	b.n	100136c0 <__aeabi_dsub+0x618>
1001352a:	0007      	movs	r7, r0
1001352c:	000d      	movs	r5, r1
1001352e:	469a      	mov	sl, r3
10013530:	e5e6      	b.n	10013100 <__aeabi_dsub+0x58>
10013532:	4664      	mov	r4, ip
10013534:	2200      	movs	r2, #0
10013536:	2500      	movs	r5, #0
10013538:	e681      	b.n	1001323e <__aeabi_dsub+0x196>
1001353a:	4662      	mov	r2, ip
1001353c:	0006      	movs	r6, r0
1001353e:	3a20      	subs	r2, #32
10013540:	40d6      	lsrs	r6, r2
10013542:	4662      	mov	r2, ip
10013544:	46b0      	mov	r8, r6
10013546:	2a20      	cmp	r2, #32
10013548:	d100      	bne.n	1001354c <__aeabi_dsub+0x4a4>
1001354a:	e0b7      	b.n	100136bc <__aeabi_dsub+0x614>
1001354c:	2240      	movs	r2, #64	; 0x40
1001354e:	4666      	mov	r6, ip
10013550:	1b92      	subs	r2, r2, r6
10013552:	4090      	lsls	r0, r2
10013554:	4301      	orrs	r1, r0
10013556:	4642      	mov	r2, r8
10013558:	1e48      	subs	r0, r1, #1
1001355a:	4181      	sbcs	r1, r0
1001355c:	4311      	orrs	r1, r2
1001355e:	2200      	movs	r2, #0
10013560:	e68a      	b.n	10013278 <__aeabi_dsub+0x1d0>
10013562:	4c79      	ldr	r4, [pc, #484]	; (10013748 <__aeabi_dsub+0x6a0>)
10013564:	42a2      	cmp	r2, r4
10013566:	d000      	beq.n	1001356a <__aeabi_dsub+0x4c2>
10013568:	e761      	b.n	1001342e <__aeabi_dsub+0x386>
1001356a:	0007      	movs	r7, r0
1001356c:	000d      	movs	r5, r1
1001356e:	0014      	movs	r4, r2
10013570:	469a      	mov	sl, r3
10013572:	e5c5      	b.n	10013100 <__aeabi_dsub+0x58>
10013574:	2c00      	cmp	r4, #0
10013576:	d141      	bne.n	100135fc <__aeabi_dsub+0x554>
10013578:	003c      	movs	r4, r7
1001357a:	432c      	orrs	r4, r5
1001357c:	d078      	beq.n	10013670 <__aeabi_dsub+0x5c8>
1001357e:	43f4      	mvns	r4, r6
10013580:	46a1      	mov	r9, r4
10013582:	2c00      	cmp	r4, #0
10013584:	d020      	beq.n	100135c8 <__aeabi_dsub+0x520>
10013586:	4c70      	ldr	r4, [pc, #448]	; (10013748 <__aeabi_dsub+0x6a0>)
10013588:	42a2      	cmp	r2, r4
1001358a:	d071      	beq.n	10013670 <__aeabi_dsub+0x5c8>
1001358c:	464c      	mov	r4, r9
1001358e:	2c38      	cmp	r4, #56	; 0x38
10013590:	dd00      	ble.n	10013594 <__aeabi_dsub+0x4ec>
10013592:	e0b2      	b.n	100136fa <__aeabi_dsub+0x652>
10013594:	2c1f      	cmp	r4, #31
10013596:	dd00      	ble.n	1001359a <__aeabi_dsub+0x4f2>
10013598:	e0bc      	b.n	10013714 <__aeabi_dsub+0x66c>
1001359a:	2620      	movs	r6, #32
1001359c:	1b34      	subs	r4, r6, r4
1001359e:	46a2      	mov	sl, r4
100135a0:	003c      	movs	r4, r7
100135a2:	4656      	mov	r6, sl
100135a4:	40b4      	lsls	r4, r6
100135a6:	464e      	mov	r6, r9
100135a8:	46a0      	mov	r8, r4
100135aa:	002c      	movs	r4, r5
100135ac:	40f4      	lsrs	r4, r6
100135ae:	46a4      	mov	ip, r4
100135b0:	4644      	mov	r4, r8
100135b2:	4666      	mov	r6, ip
100135b4:	4334      	orrs	r4, r6
100135b6:	46a4      	mov	ip, r4
100135b8:	4654      	mov	r4, sl
100135ba:	40a5      	lsls	r5, r4
100135bc:	4664      	mov	r4, ip
100135be:	1e6e      	subs	r6, r5, #1
100135c0:	41b5      	sbcs	r5, r6
100135c2:	4325      	orrs	r5, r4
100135c4:	464c      	mov	r4, r9
100135c6:	40e7      	lsrs	r7, r4
100135c8:	186d      	adds	r5, r5, r1
100135ca:	428d      	cmp	r5, r1
100135cc:	4189      	sbcs	r1, r1
100135ce:	183f      	adds	r7, r7, r0
100135d0:	4249      	negs	r1, r1
100135d2:	19cf      	adds	r7, r1, r7
100135d4:	0014      	movs	r4, r2
100135d6:	e656      	b.n	10013286 <__aeabi_dsub+0x1de>
100135d8:	2a00      	cmp	r2, #0
100135da:	d12f      	bne.n	1001363c <__aeabi_dsub+0x594>
100135dc:	0002      	movs	r2, r0
100135de:	430a      	orrs	r2, r1
100135e0:	d100      	bne.n	100135e4 <__aeabi_dsub+0x53c>
100135e2:	e084      	b.n	100136ee <__aeabi_dsub+0x646>
100135e4:	0007      	movs	r7, r0
100135e6:	000d      	movs	r5, r1
100135e8:	469a      	mov	sl, r3
100135ea:	4c57      	ldr	r4, [pc, #348]	; (10013748 <__aeabi_dsub+0x6a0>)
100135ec:	e588      	b.n	10013100 <__aeabi_dsub+0x58>
100135ee:	433d      	orrs	r5, r7
100135f0:	1e6f      	subs	r7, r5, #1
100135f2:	41bd      	sbcs	r5, r7
100135f4:	b2ec      	uxtb	r4, r5
100135f6:	2700      	movs	r7, #0
100135f8:	1b0d      	subs	r5, r1, r4
100135fa:	e760      	b.n	100134be <__aeabi_dsub+0x416>
100135fc:	4c52      	ldr	r4, [pc, #328]	; (10013748 <__aeabi_dsub+0x6a0>)
100135fe:	42a2      	cmp	r2, r4
10013600:	d036      	beq.n	10013670 <__aeabi_dsub+0x5c8>
10013602:	4274      	negs	r4, r6
10013604:	2680      	movs	r6, #128	; 0x80
10013606:	0436      	lsls	r6, r6, #16
10013608:	46a1      	mov	r9, r4
1001360a:	4337      	orrs	r7, r6
1001360c:	e7be      	b.n	1001358c <__aeabi_dsub+0x4e4>
1001360e:	0002      	movs	r2, r0
10013610:	430a      	orrs	r2, r1
10013612:	d100      	bne.n	10013616 <__aeabi_dsub+0x56e>
10013614:	e574      	b.n	10013100 <__aeabi_dsub+0x58>
10013616:	1a6a      	subs	r2, r5, r1
10013618:	4690      	mov	r8, r2
1001361a:	4545      	cmp	r5, r8
1001361c:	41b6      	sbcs	r6, r6
1001361e:	1a3a      	subs	r2, r7, r0
10013620:	4276      	negs	r6, r6
10013622:	1b92      	subs	r2, r2, r6
10013624:	4694      	mov	ip, r2
10013626:	0212      	lsls	r2, r2, #8
10013628:	d400      	bmi.n	1001362c <__aeabi_dsub+0x584>
1001362a:	e5f7      	b.n	1001321c <__aeabi_dsub+0x174>
1001362c:	1b4d      	subs	r5, r1, r5
1001362e:	42a9      	cmp	r1, r5
10013630:	4189      	sbcs	r1, r1
10013632:	1bc7      	subs	r7, r0, r7
10013634:	4249      	negs	r1, r1
10013636:	1a7f      	subs	r7, r7, r1
10013638:	469a      	mov	sl, r3
1001363a:	e561      	b.n	10013100 <__aeabi_dsub+0x58>
1001363c:	0002      	movs	r2, r0
1001363e:	430a      	orrs	r2, r1
10013640:	d03a      	beq.n	100136b8 <__aeabi_dsub+0x610>
10013642:	08ed      	lsrs	r5, r5, #3
10013644:	077c      	lsls	r4, r7, #29
10013646:	432c      	orrs	r4, r5
10013648:	2580      	movs	r5, #128	; 0x80
1001364a:	08fa      	lsrs	r2, r7, #3
1001364c:	032d      	lsls	r5, r5, #12
1001364e:	422a      	tst	r2, r5
10013650:	d008      	beq.n	10013664 <__aeabi_dsub+0x5bc>
10013652:	08c7      	lsrs	r7, r0, #3
10013654:	422f      	tst	r7, r5
10013656:	d105      	bne.n	10013664 <__aeabi_dsub+0x5bc>
10013658:	0745      	lsls	r5, r0, #29
1001365a:	002c      	movs	r4, r5
1001365c:	003a      	movs	r2, r7
1001365e:	469a      	mov	sl, r3
10013660:	08c9      	lsrs	r1, r1, #3
10013662:	430c      	orrs	r4, r1
10013664:	0f67      	lsrs	r7, r4, #29
10013666:	00d2      	lsls	r2, r2, #3
10013668:	00e5      	lsls	r5, r4, #3
1001366a:	4317      	orrs	r7, r2
1001366c:	4c36      	ldr	r4, [pc, #216]	; (10013748 <__aeabi_dsub+0x6a0>)
1001366e:	e547      	b.n	10013100 <__aeabi_dsub+0x58>
10013670:	0007      	movs	r7, r0
10013672:	000d      	movs	r5, r1
10013674:	0014      	movs	r4, r2
10013676:	e543      	b.n	10013100 <__aeabi_dsub+0x58>
10013678:	003a      	movs	r2, r7
1001367a:	432a      	orrs	r2, r5
1001367c:	d043      	beq.n	10013706 <__aeabi_dsub+0x65e>
1001367e:	0002      	movs	r2, r0
10013680:	430a      	orrs	r2, r1
10013682:	d019      	beq.n	100136b8 <__aeabi_dsub+0x610>
10013684:	08ed      	lsrs	r5, r5, #3
10013686:	077c      	lsls	r4, r7, #29
10013688:	432c      	orrs	r4, r5
1001368a:	2580      	movs	r5, #128	; 0x80
1001368c:	08fa      	lsrs	r2, r7, #3
1001368e:	032d      	lsls	r5, r5, #12
10013690:	422a      	tst	r2, r5
10013692:	d007      	beq.n	100136a4 <__aeabi_dsub+0x5fc>
10013694:	08c6      	lsrs	r6, r0, #3
10013696:	422e      	tst	r6, r5
10013698:	d104      	bne.n	100136a4 <__aeabi_dsub+0x5fc>
1001369a:	0747      	lsls	r7, r0, #29
1001369c:	003c      	movs	r4, r7
1001369e:	0032      	movs	r2, r6
100136a0:	08c9      	lsrs	r1, r1, #3
100136a2:	430c      	orrs	r4, r1
100136a4:	00d7      	lsls	r7, r2, #3
100136a6:	0f62      	lsrs	r2, r4, #29
100136a8:	00e5      	lsls	r5, r4, #3
100136aa:	4317      	orrs	r7, r2
100136ac:	469a      	mov	sl, r3
100136ae:	4c26      	ldr	r4, [pc, #152]	; (10013748 <__aeabi_dsub+0x6a0>)
100136b0:	e526      	b.n	10013100 <__aeabi_dsub+0x58>
100136b2:	2200      	movs	r2, #0
100136b4:	2500      	movs	r5, #0
100136b6:	e544      	b.n	10013142 <__aeabi_dsub+0x9a>
100136b8:	4c23      	ldr	r4, [pc, #140]	; (10013748 <__aeabi_dsub+0x6a0>)
100136ba:	e521      	b.n	10013100 <__aeabi_dsub+0x58>
100136bc:	2000      	movs	r0, #0
100136be:	e749      	b.n	10013554 <__aeabi_dsub+0x4ac>
100136c0:	2300      	movs	r3, #0
100136c2:	2500      	movs	r5, #0
100136c4:	e5bb      	b.n	1001323e <__aeabi_dsub+0x196>
100136c6:	464c      	mov	r4, r9
100136c8:	003e      	movs	r6, r7
100136ca:	3c20      	subs	r4, #32
100136cc:	40e6      	lsrs	r6, r4
100136ce:	464c      	mov	r4, r9
100136d0:	46b4      	mov	ip, r6
100136d2:	2c20      	cmp	r4, #32
100136d4:	d031      	beq.n	1001373a <__aeabi_dsub+0x692>
100136d6:	2440      	movs	r4, #64	; 0x40
100136d8:	464e      	mov	r6, r9
100136da:	1ba6      	subs	r6, r4, r6
100136dc:	40b7      	lsls	r7, r6
100136de:	433d      	orrs	r5, r7
100136e0:	1e6c      	subs	r4, r5, #1
100136e2:	41a5      	sbcs	r5, r4
100136e4:	4664      	mov	r4, ip
100136e6:	432c      	orrs	r4, r5
100136e8:	2700      	movs	r7, #0
100136ea:	1b0d      	subs	r5, r1, r4
100136ec:	e6e7      	b.n	100134be <__aeabi_dsub+0x416>
100136ee:	2280      	movs	r2, #128	; 0x80
100136f0:	2300      	movs	r3, #0
100136f2:	0312      	lsls	r2, r2, #12
100136f4:	4c14      	ldr	r4, [pc, #80]	; (10013748 <__aeabi_dsub+0x6a0>)
100136f6:	2500      	movs	r5, #0
100136f8:	e5a1      	b.n	1001323e <__aeabi_dsub+0x196>
100136fa:	433d      	orrs	r5, r7
100136fc:	1e6f      	subs	r7, r5, #1
100136fe:	41bd      	sbcs	r5, r7
10013700:	2700      	movs	r7, #0
10013702:	b2ed      	uxtb	r5, r5
10013704:	e760      	b.n	100135c8 <__aeabi_dsub+0x520>
10013706:	0007      	movs	r7, r0
10013708:	000d      	movs	r5, r1
1001370a:	4c0f      	ldr	r4, [pc, #60]	; (10013748 <__aeabi_dsub+0x6a0>)
1001370c:	e4f8      	b.n	10013100 <__aeabi_dsub+0x58>
1001370e:	0007      	movs	r7, r0
10013710:	000d      	movs	r5, r1
10013712:	e4f5      	b.n	10013100 <__aeabi_dsub+0x58>
10013714:	464e      	mov	r6, r9
10013716:	003c      	movs	r4, r7
10013718:	3e20      	subs	r6, #32
1001371a:	40f4      	lsrs	r4, r6
1001371c:	46a0      	mov	r8, r4
1001371e:	464c      	mov	r4, r9
10013720:	2c20      	cmp	r4, #32
10013722:	d00e      	beq.n	10013742 <__aeabi_dsub+0x69a>
10013724:	2440      	movs	r4, #64	; 0x40
10013726:	464e      	mov	r6, r9
10013728:	1ba4      	subs	r4, r4, r6
1001372a:	40a7      	lsls	r7, r4
1001372c:	433d      	orrs	r5, r7
1001372e:	1e6f      	subs	r7, r5, #1
10013730:	41bd      	sbcs	r5, r7
10013732:	4644      	mov	r4, r8
10013734:	2700      	movs	r7, #0
10013736:	4325      	orrs	r5, r4
10013738:	e746      	b.n	100135c8 <__aeabi_dsub+0x520>
1001373a:	2700      	movs	r7, #0
1001373c:	e7cf      	b.n	100136de <__aeabi_dsub+0x636>
1001373e:	000d      	movs	r5, r1
10013740:	e573      	b.n	1001322a <__aeabi_dsub+0x182>
10013742:	2700      	movs	r7, #0
10013744:	e7f2      	b.n	1001372c <__aeabi_dsub+0x684>
10013746:	46c0      	nop			; (mov r8, r8)
10013748:	000007ff 	.word	0x000007ff
1001374c:	ff7fffff 	.word	0xff7fffff

10013750 <__aeabi_d2iz>:
10013750:	030b      	lsls	r3, r1, #12
10013752:	b530      	push	{r4, r5, lr}
10013754:	4d13      	ldr	r5, [pc, #76]	; (100137a4 <__aeabi_d2iz+0x54>)
10013756:	0b1a      	lsrs	r2, r3, #12
10013758:	004b      	lsls	r3, r1, #1
1001375a:	0d5b      	lsrs	r3, r3, #21
1001375c:	0fc9      	lsrs	r1, r1, #31
1001375e:	2400      	movs	r4, #0
10013760:	42ab      	cmp	r3, r5
10013762:	dd11      	ble.n	10013788 <__aeabi_d2iz+0x38>
10013764:	4c10      	ldr	r4, [pc, #64]	; (100137a8 <__aeabi_d2iz+0x58>)
10013766:	42a3      	cmp	r3, r4
10013768:	dc10      	bgt.n	1001378c <__aeabi_d2iz+0x3c>
1001376a:	2480      	movs	r4, #128	; 0x80
1001376c:	0364      	lsls	r4, r4, #13
1001376e:	4322      	orrs	r2, r4
10013770:	4c0e      	ldr	r4, [pc, #56]	; (100137ac <__aeabi_d2iz+0x5c>)
10013772:	1ae4      	subs	r4, r4, r3
10013774:	2c1f      	cmp	r4, #31
10013776:	dd0c      	ble.n	10013792 <__aeabi_d2iz+0x42>
10013778:	480d      	ldr	r0, [pc, #52]	; (100137b0 <__aeabi_d2iz+0x60>)
1001377a:	1ac3      	subs	r3, r0, r3
1001377c:	40da      	lsrs	r2, r3
1001377e:	0013      	movs	r3, r2
10013780:	425c      	negs	r4, r3
10013782:	2900      	cmp	r1, #0
10013784:	d100      	bne.n	10013788 <__aeabi_d2iz+0x38>
10013786:	001c      	movs	r4, r3
10013788:	0020      	movs	r0, r4
1001378a:	bd30      	pop	{r4, r5, pc}
1001378c:	4b09      	ldr	r3, [pc, #36]	; (100137b4 <__aeabi_d2iz+0x64>)
1001378e:	18cc      	adds	r4, r1, r3
10013790:	e7fa      	b.n	10013788 <__aeabi_d2iz+0x38>
10013792:	40e0      	lsrs	r0, r4
10013794:	4c08      	ldr	r4, [pc, #32]	; (100137b8 <__aeabi_d2iz+0x68>)
10013796:	46a4      	mov	ip, r4
10013798:	4463      	add	r3, ip
1001379a:	409a      	lsls	r2, r3
1001379c:	0013      	movs	r3, r2
1001379e:	4303      	orrs	r3, r0
100137a0:	e7ee      	b.n	10013780 <__aeabi_d2iz+0x30>
100137a2:	46c0      	nop			; (mov r8, r8)
100137a4:	000003fe 	.word	0x000003fe
100137a8:	0000041d 	.word	0x0000041d
100137ac:	00000433 	.word	0x00000433
100137b0:	00000413 	.word	0x00000413
100137b4:	7fffffff 	.word	0x7fffffff
100137b8:	fffffbed 	.word	0xfffffbed

100137bc <__aeabi_ui2d>:
100137bc:	b570      	push	{r4, r5, r6, lr}
100137be:	1e05      	subs	r5, r0, #0
100137c0:	d028      	beq.n	10013814 <__aeabi_ui2d+0x58>
100137c2:	f000 f833 	bl	1001382c <__clzsi2>
100137c6:	4b15      	ldr	r3, [pc, #84]	; (1001381c <__aeabi_ui2d+0x60>)
100137c8:	4a15      	ldr	r2, [pc, #84]	; (10013820 <__aeabi_ui2d+0x64>)
100137ca:	1a1b      	subs	r3, r3, r0
100137cc:	1ad2      	subs	r2, r2, r3
100137ce:	2a1f      	cmp	r2, #31
100137d0:	dd16      	ble.n	10013800 <__aeabi_ui2d+0x44>
100137d2:	002c      	movs	r4, r5
100137d4:	4a13      	ldr	r2, [pc, #76]	; (10013824 <__aeabi_ui2d+0x68>)
100137d6:	2500      	movs	r5, #0
100137d8:	1ad2      	subs	r2, r2, r3
100137da:	4094      	lsls	r4, r2
100137dc:	055a      	lsls	r2, r3, #21
100137de:	0324      	lsls	r4, r4, #12
100137e0:	0b24      	lsrs	r4, r4, #12
100137e2:	0d52      	lsrs	r2, r2, #21
100137e4:	2100      	movs	r1, #0
100137e6:	0324      	lsls	r4, r4, #12
100137e8:	0d0b      	lsrs	r3, r1, #20
100137ea:	0b24      	lsrs	r4, r4, #12
100137ec:	051b      	lsls	r3, r3, #20
100137ee:	4323      	orrs	r3, r4
100137f0:	4c0d      	ldr	r4, [pc, #52]	; (10013828 <__aeabi_ui2d+0x6c>)
100137f2:	0512      	lsls	r2, r2, #20
100137f4:	4023      	ands	r3, r4
100137f6:	4313      	orrs	r3, r2
100137f8:	005b      	lsls	r3, r3, #1
100137fa:	0028      	movs	r0, r5
100137fc:	0859      	lsrs	r1, r3, #1
100137fe:	bd70      	pop	{r4, r5, r6, pc}
10013800:	210b      	movs	r1, #11
10013802:	002c      	movs	r4, r5
10013804:	1a08      	subs	r0, r1, r0
10013806:	40c4      	lsrs	r4, r0
10013808:	4095      	lsls	r5, r2
1001380a:	0324      	lsls	r4, r4, #12
1001380c:	055a      	lsls	r2, r3, #21
1001380e:	0b24      	lsrs	r4, r4, #12
10013810:	0d52      	lsrs	r2, r2, #21
10013812:	e7e7      	b.n	100137e4 <__aeabi_ui2d+0x28>
10013814:	2200      	movs	r2, #0
10013816:	2400      	movs	r4, #0
10013818:	e7e4      	b.n	100137e4 <__aeabi_ui2d+0x28>
1001381a:	46c0      	nop			; (mov r8, r8)
1001381c:	0000041e 	.word	0x0000041e
10013820:	00000433 	.word	0x00000433
10013824:	00000413 	.word	0x00000413
10013828:	800fffff 	.word	0x800fffff

1001382c <__clzsi2>:
1001382c:	211c      	movs	r1, #28
1001382e:	2301      	movs	r3, #1
10013830:	041b      	lsls	r3, r3, #16
10013832:	4298      	cmp	r0, r3
10013834:	d301      	bcc.n	1001383a <__clzsi2+0xe>
10013836:	0c00      	lsrs	r0, r0, #16
10013838:	3910      	subs	r1, #16
1001383a:	0a1b      	lsrs	r3, r3, #8
1001383c:	4298      	cmp	r0, r3
1001383e:	d301      	bcc.n	10013844 <__clzsi2+0x18>
10013840:	0a00      	lsrs	r0, r0, #8
10013842:	3908      	subs	r1, #8
10013844:	091b      	lsrs	r3, r3, #4
10013846:	4298      	cmp	r0, r3
10013848:	d301      	bcc.n	1001384e <__clzsi2+0x22>
1001384a:	0900      	lsrs	r0, r0, #4
1001384c:	3904      	subs	r1, #4
1001384e:	a202      	add	r2, pc, #8	; (adr r2, 10013858 <__clzsi2+0x2c>)
10013850:	5c10      	ldrb	r0, [r2, r0]
10013852:	1840      	adds	r0, r0, r1
10013854:	4770      	bx	lr
10013856:	46c0      	nop			; (mov r8, r8)
10013858:	02020304 	.word	0x02020304
1001385c:	01010101 	.word	0x01010101
	...

10013868 <__libc_init_array>:
10013868:	4b0e      	ldr	r3, [pc, #56]	; (100138a4 <__libc_init_array+0x3c>)
1001386a:	b570      	push	{r4, r5, r6, lr}
1001386c:	2500      	movs	r5, #0
1001386e:	001e      	movs	r6, r3
10013870:	4c0d      	ldr	r4, [pc, #52]	; (100138a8 <__libc_init_array+0x40>)
10013872:	1ae4      	subs	r4, r4, r3
10013874:	10a4      	asrs	r4, r4, #2
10013876:	42a5      	cmp	r5, r4
10013878:	d004      	beq.n	10013884 <__libc_init_array+0x1c>
1001387a:	00ab      	lsls	r3, r5, #2
1001387c:	58f3      	ldr	r3, [r6, r3]
1001387e:	4798      	blx	r3
10013880:	3501      	adds	r5, #1
10013882:	e7f8      	b.n	10013876 <__libc_init_array+0xe>
10013884:	f002 fffe 	bl	10016884 <_init>
10013888:	4b08      	ldr	r3, [pc, #32]	; (100138ac <__libc_init_array+0x44>)
1001388a:	2500      	movs	r5, #0
1001388c:	001e      	movs	r6, r3
1001388e:	4c08      	ldr	r4, [pc, #32]	; (100138b0 <__libc_init_array+0x48>)
10013890:	1ae4      	subs	r4, r4, r3
10013892:	10a4      	asrs	r4, r4, #2
10013894:	42a5      	cmp	r5, r4
10013896:	d004      	beq.n	100138a2 <__libc_init_array+0x3a>
10013898:	00ab      	lsls	r3, r5, #2
1001389a:	58f3      	ldr	r3, [r6, r3]
1001389c:	4798      	blx	r3
1001389e:	3501      	adds	r5, #1
100138a0:	e7f8      	b.n	10013894 <__libc_init_array+0x2c>
100138a2:	bd70      	pop	{r4, r5, r6, pc}
100138a4:	10016890 	.word	0x10016890
100138a8:	10016890 	.word	0x10016890
100138ac:	10016890 	.word	0x10016890
100138b0:	10016894 	.word	0x10016894

100138b4 <malloc>:
100138b4:	b510      	push	{r4, lr}
100138b6:	4b03      	ldr	r3, [pc, #12]	; (100138c4 <malloc+0x10>)
100138b8:	0001      	movs	r1, r0
100138ba:	6818      	ldr	r0, [r3, #0]
100138bc:	f000 f86a 	bl	10013994 <_malloc_r>
100138c0:	bd10      	pop	{r4, pc}
100138c2:	46c0      	nop			; (mov r8, r8)
100138c4:	1001694c 	.word	0x1001694c

100138c8 <memcmp>:
100138c8:	b530      	push	{r4, r5, lr}
100138ca:	2400      	movs	r4, #0
100138cc:	42a2      	cmp	r2, r4
100138ce:	d008      	beq.n	100138e2 <memcmp+0x1a>
100138d0:	5d03      	ldrb	r3, [r0, r4]
100138d2:	1c65      	adds	r5, r4, #1
100138d4:	5d0c      	ldrb	r4, [r1, r4]
100138d6:	42a3      	cmp	r3, r4
100138d8:	d001      	beq.n	100138de <memcmp+0x16>
100138da:	1b18      	subs	r0, r3, r4
100138dc:	e002      	b.n	100138e4 <memcmp+0x1c>
100138de:	002c      	movs	r4, r5
100138e0:	e7f4      	b.n	100138cc <memcmp+0x4>
100138e2:	2000      	movs	r0, #0
100138e4:	bd30      	pop	{r4, r5, pc}

100138e6 <memcpy>:
100138e6:	2300      	movs	r3, #0
100138e8:	b510      	push	{r4, lr}
100138ea:	429a      	cmp	r2, r3
100138ec:	d003      	beq.n	100138f6 <memcpy+0x10>
100138ee:	5ccc      	ldrb	r4, [r1, r3]
100138f0:	54c4      	strb	r4, [r0, r3]
100138f2:	3301      	adds	r3, #1
100138f4:	e7f9      	b.n	100138ea <memcpy+0x4>
100138f6:	bd10      	pop	{r4, pc}

100138f8 <memset>:
100138f8:	0003      	movs	r3, r0
100138fa:	1882      	adds	r2, r0, r2
100138fc:	4293      	cmp	r3, r2
100138fe:	d002      	beq.n	10013906 <memset+0xe>
10013900:	7019      	strb	r1, [r3, #0]
10013902:	3301      	adds	r3, #1
10013904:	e7fa      	b.n	100138fc <memset+0x4>
10013906:	4770      	bx	lr

10013908 <_free_r>:
10013908:	b530      	push	{r4, r5, lr}
1001390a:	2900      	cmp	r1, #0
1001390c:	d03e      	beq.n	1001398c <_free_r+0x84>
1001390e:	3904      	subs	r1, #4
10013910:	680b      	ldr	r3, [r1, #0]
10013912:	2b00      	cmp	r3, #0
10013914:	da00      	bge.n	10013918 <_free_r+0x10>
10013916:	18c9      	adds	r1, r1, r3
10013918:	4a1d      	ldr	r2, [pc, #116]	; (10013990 <_free_r+0x88>)
1001391a:	6813      	ldr	r3, [r2, #0]
1001391c:	0014      	movs	r4, r2
1001391e:	2b00      	cmp	r3, #0
10013920:	d102      	bne.n	10013928 <_free_r+0x20>
10013922:	604b      	str	r3, [r1, #4]
10013924:	6011      	str	r1, [r2, #0]
10013926:	e031      	b.n	1001398c <_free_r+0x84>
10013928:	428b      	cmp	r3, r1
1001392a:	d90d      	bls.n	10013948 <_free_r+0x40>
1001392c:	680a      	ldr	r2, [r1, #0]
1001392e:	1888      	adds	r0, r1, r2
10013930:	4283      	cmp	r3, r0
10013932:	d103      	bne.n	1001393c <_free_r+0x34>
10013934:	6818      	ldr	r0, [r3, #0]
10013936:	685b      	ldr	r3, [r3, #4]
10013938:	1882      	adds	r2, r0, r2
1001393a:	600a      	str	r2, [r1, #0]
1001393c:	604b      	str	r3, [r1, #4]
1001393e:	6021      	str	r1, [r4, #0]
10013940:	e024      	b.n	1001398c <_free_r+0x84>
10013942:	428a      	cmp	r2, r1
10013944:	d803      	bhi.n	1001394e <_free_r+0x46>
10013946:	0013      	movs	r3, r2
10013948:	685a      	ldr	r2, [r3, #4]
1001394a:	2a00      	cmp	r2, #0
1001394c:	d1f9      	bne.n	10013942 <_free_r+0x3a>
1001394e:	681d      	ldr	r5, [r3, #0]
10013950:	195c      	adds	r4, r3, r5
10013952:	428c      	cmp	r4, r1
10013954:	d10b      	bne.n	1001396e <_free_r+0x66>
10013956:	6809      	ldr	r1, [r1, #0]
10013958:	1869      	adds	r1, r5, r1
1001395a:	1858      	adds	r0, r3, r1
1001395c:	6019      	str	r1, [r3, #0]
1001395e:	4282      	cmp	r2, r0
10013960:	d114      	bne.n	1001398c <_free_r+0x84>
10013962:	6810      	ldr	r0, [r2, #0]
10013964:	6852      	ldr	r2, [r2, #4]
10013966:	1841      	adds	r1, r0, r1
10013968:	6019      	str	r1, [r3, #0]
1001396a:	605a      	str	r2, [r3, #4]
1001396c:	e00e      	b.n	1001398c <_free_r+0x84>
1001396e:	428c      	cmp	r4, r1
10013970:	d902      	bls.n	10013978 <_free_r+0x70>
10013972:	230c      	movs	r3, #12
10013974:	6003      	str	r3, [r0, #0]
10013976:	e009      	b.n	1001398c <_free_r+0x84>
10013978:	6808      	ldr	r0, [r1, #0]
1001397a:	180c      	adds	r4, r1, r0
1001397c:	42a2      	cmp	r2, r4
1001397e:	d103      	bne.n	10013988 <_free_r+0x80>
10013980:	6814      	ldr	r4, [r2, #0]
10013982:	6852      	ldr	r2, [r2, #4]
10013984:	1820      	adds	r0, r4, r0
10013986:	6008      	str	r0, [r1, #0]
10013988:	604a      	str	r2, [r1, #4]
1001398a:	6059      	str	r1, [r3, #4]
1001398c:	bd30      	pop	{r4, r5, pc}
1001398e:	46c0      	nop			; (mov r8, r8)
10013990:	10018420 	.word	0x10018420

10013994 <_malloc_r>:
10013994:	2303      	movs	r3, #3
10013996:	b570      	push	{r4, r5, r6, lr}
10013998:	1ccd      	adds	r5, r1, #3
1001399a:	439d      	bics	r5, r3
1001399c:	3508      	adds	r5, #8
1001399e:	0006      	movs	r6, r0
100139a0:	2d0c      	cmp	r5, #12
100139a2:	d201      	bcs.n	100139a8 <_malloc_r+0x14>
100139a4:	250c      	movs	r5, #12
100139a6:	e005      	b.n	100139b4 <_malloc_r+0x20>
100139a8:	2d00      	cmp	r5, #0
100139aa:	da03      	bge.n	100139b4 <_malloc_r+0x20>
100139ac:	230c      	movs	r3, #12
100139ae:	2000      	movs	r0, #0
100139b0:	6033      	str	r3, [r6, #0]
100139b2:	e040      	b.n	10013a36 <_malloc_r+0xa2>
100139b4:	42a9      	cmp	r1, r5
100139b6:	d8f9      	bhi.n	100139ac <_malloc_r+0x18>
100139b8:	4b1f      	ldr	r3, [pc, #124]	; (10013a38 <_malloc_r+0xa4>)
100139ba:	681c      	ldr	r4, [r3, #0]
100139bc:	001a      	movs	r2, r3
100139be:	0021      	movs	r1, r4
100139c0:	2900      	cmp	r1, #0
100139c2:	d013      	beq.n	100139ec <_malloc_r+0x58>
100139c4:	680b      	ldr	r3, [r1, #0]
100139c6:	1b5b      	subs	r3, r3, r5
100139c8:	d40d      	bmi.n	100139e6 <_malloc_r+0x52>
100139ca:	2b0b      	cmp	r3, #11
100139cc:	d902      	bls.n	100139d4 <_malloc_r+0x40>
100139ce:	600b      	str	r3, [r1, #0]
100139d0:	18cc      	adds	r4, r1, r3
100139d2:	e01e      	b.n	10013a12 <_malloc_r+0x7e>
100139d4:	428c      	cmp	r4, r1
100139d6:	d102      	bne.n	100139de <_malloc_r+0x4a>
100139d8:	6863      	ldr	r3, [r4, #4]
100139da:	6013      	str	r3, [r2, #0]
100139dc:	e01a      	b.n	10013a14 <_malloc_r+0x80>
100139de:	684b      	ldr	r3, [r1, #4]
100139e0:	6063      	str	r3, [r4, #4]
100139e2:	000c      	movs	r4, r1
100139e4:	e016      	b.n	10013a14 <_malloc_r+0x80>
100139e6:	000c      	movs	r4, r1
100139e8:	6849      	ldr	r1, [r1, #4]
100139ea:	e7e9      	b.n	100139c0 <_malloc_r+0x2c>
100139ec:	4c13      	ldr	r4, [pc, #76]	; (10013a3c <_malloc_r+0xa8>)
100139ee:	6823      	ldr	r3, [r4, #0]
100139f0:	2b00      	cmp	r3, #0
100139f2:	d103      	bne.n	100139fc <_malloc_r+0x68>
100139f4:	0030      	movs	r0, r6
100139f6:	f000 f8f9 	bl	10013bec <_sbrk_r>
100139fa:	6020      	str	r0, [r4, #0]
100139fc:	0029      	movs	r1, r5
100139fe:	0030      	movs	r0, r6
10013a00:	f000 f8f4 	bl	10013bec <_sbrk_r>
10013a04:	1c43      	adds	r3, r0, #1
10013a06:	d0d1      	beq.n	100139ac <_malloc_r+0x18>
10013a08:	2303      	movs	r3, #3
10013a0a:	1cc4      	adds	r4, r0, #3
10013a0c:	439c      	bics	r4, r3
10013a0e:	42a0      	cmp	r0, r4
10013a10:	d10a      	bne.n	10013a28 <_malloc_r+0x94>
10013a12:	6025      	str	r5, [r4, #0]
10013a14:	0020      	movs	r0, r4
10013a16:	2207      	movs	r2, #7
10013a18:	300b      	adds	r0, #11
10013a1a:	1d23      	adds	r3, r4, #4
10013a1c:	4390      	bics	r0, r2
10013a1e:	1ac3      	subs	r3, r0, r3
10013a20:	d009      	beq.n	10013a36 <_malloc_r+0xa2>
10013a22:	425a      	negs	r2, r3
10013a24:	50e2      	str	r2, [r4, r3]
10013a26:	e006      	b.n	10013a36 <_malloc_r+0xa2>
10013a28:	1a21      	subs	r1, r4, r0
10013a2a:	0030      	movs	r0, r6
10013a2c:	f000 f8de 	bl	10013bec <_sbrk_r>
10013a30:	1c43      	adds	r3, r0, #1
10013a32:	d1ee      	bne.n	10013a12 <_malloc_r+0x7e>
10013a34:	e7ba      	b.n	100139ac <_malloc_r+0x18>
10013a36:	bd70      	pop	{r4, r5, r6, pc}
10013a38:	10018420 	.word	0x10018420
10013a3c:	1001841c 	.word	0x1001841c

10013a40 <iprintf>:
10013a40:	b40f      	push	{r0, r1, r2, r3}
10013a42:	4b0b      	ldr	r3, [pc, #44]	; (10013a70 <iprintf+0x30>)
10013a44:	b513      	push	{r0, r1, r4, lr}
10013a46:	681c      	ldr	r4, [r3, #0]
10013a48:	2c00      	cmp	r4, #0
10013a4a:	d005      	beq.n	10013a58 <iprintf+0x18>
10013a4c:	69a3      	ldr	r3, [r4, #24]
10013a4e:	2b00      	cmp	r3, #0
10013a50:	d102      	bne.n	10013a58 <iprintf+0x18>
10013a52:	0020      	movs	r0, r4
10013a54:	f000 fb58 	bl	10014108 <__sinit>
10013a58:	ab05      	add	r3, sp, #20
10013a5a:	9a04      	ldr	r2, [sp, #16]
10013a5c:	68a1      	ldr	r1, [r4, #8]
10013a5e:	0020      	movs	r0, r4
10013a60:	9301      	str	r3, [sp, #4]
10013a62:	f000 fc71 	bl	10014348 <_vfiprintf_r>
10013a66:	bc16      	pop	{r1, r2, r4}
10013a68:	bc08      	pop	{r3}
10013a6a:	b004      	add	sp, #16
10013a6c:	4718      	bx	r3
10013a6e:	46c0      	nop			; (mov r8, r8)
10013a70:	1001694c 	.word	0x1001694c

10013a74 <putchar>:
10013a74:	4b08      	ldr	r3, [pc, #32]	; (10013a98 <putchar+0x24>)
10013a76:	b570      	push	{r4, r5, r6, lr}
10013a78:	681c      	ldr	r4, [r3, #0]
10013a7a:	0005      	movs	r5, r0
10013a7c:	2c00      	cmp	r4, #0
10013a7e:	d005      	beq.n	10013a8c <putchar+0x18>
10013a80:	69a3      	ldr	r3, [r4, #24]
10013a82:	2b00      	cmp	r3, #0
10013a84:	d102      	bne.n	10013a8c <putchar+0x18>
10013a86:	0020      	movs	r0, r4
10013a88:	f000 fb3e 	bl	10014108 <__sinit>
10013a8c:	0029      	movs	r1, r5
10013a8e:	68a2      	ldr	r2, [r4, #8]
10013a90:	0020      	movs	r0, r4
10013a92:	f000 ff05 	bl	100148a0 <_putc_r>
10013a96:	bd70      	pop	{r4, r5, r6, pc}
10013a98:	1001694c 	.word	0x1001694c

10013a9c <_puts_r>:
10013a9c:	b570      	push	{r4, r5, r6, lr}
10013a9e:	0005      	movs	r5, r0
10013aa0:	000e      	movs	r6, r1
10013aa2:	2800      	cmp	r0, #0
10013aa4:	d004      	beq.n	10013ab0 <_puts_r+0x14>
10013aa6:	6983      	ldr	r3, [r0, #24]
10013aa8:	2b00      	cmp	r3, #0
10013aaa:	d101      	bne.n	10013ab0 <_puts_r+0x14>
10013aac:	f000 fb2c 	bl	10014108 <__sinit>
10013ab0:	69ab      	ldr	r3, [r5, #24]
10013ab2:	68ac      	ldr	r4, [r5, #8]
10013ab4:	2b00      	cmp	r3, #0
10013ab6:	d102      	bne.n	10013abe <_puts_r+0x22>
10013ab8:	0028      	movs	r0, r5
10013aba:	f000 fb25 	bl	10014108 <__sinit>
10013abe:	4b25      	ldr	r3, [pc, #148]	; (10013b54 <_puts_r+0xb8>)
10013ac0:	429c      	cmp	r4, r3
10013ac2:	d101      	bne.n	10013ac8 <_puts_r+0x2c>
10013ac4:	686c      	ldr	r4, [r5, #4]
10013ac6:	e008      	b.n	10013ada <_puts_r+0x3e>
10013ac8:	4b23      	ldr	r3, [pc, #140]	; (10013b58 <_puts_r+0xbc>)
10013aca:	429c      	cmp	r4, r3
10013acc:	d101      	bne.n	10013ad2 <_puts_r+0x36>
10013ace:	68ac      	ldr	r4, [r5, #8]
10013ad0:	e003      	b.n	10013ada <_puts_r+0x3e>
10013ad2:	4b22      	ldr	r3, [pc, #136]	; (10013b5c <_puts_r+0xc0>)
10013ad4:	429c      	cmp	r4, r3
10013ad6:	d100      	bne.n	10013ada <_puts_r+0x3e>
10013ad8:	68ec      	ldr	r4, [r5, #12]
10013ada:	89a3      	ldrh	r3, [r4, #12]
10013adc:	071b      	lsls	r3, r3, #28
10013ade:	d502      	bpl.n	10013ae6 <_puts_r+0x4a>
10013ae0:	6923      	ldr	r3, [r4, #16]
10013ae2:	2b00      	cmp	r3, #0
10013ae4:	d111      	bne.n	10013b0a <_puts_r+0x6e>
10013ae6:	0021      	movs	r1, r4
10013ae8:	0028      	movs	r0, r5
10013aea:	f000 f9a3 	bl	10013e34 <__swsetup_r>
10013aee:	2800      	cmp	r0, #0
10013af0:	d00b      	beq.n	10013b0a <_puts_r+0x6e>
10013af2:	2001      	movs	r0, #1
10013af4:	4240      	negs	r0, r0
10013af6:	e02b      	b.n	10013b50 <_puts_r+0xb4>
10013af8:	3b01      	subs	r3, #1
10013afa:	3601      	adds	r6, #1
10013afc:	60a3      	str	r3, [r4, #8]
10013afe:	2b00      	cmp	r3, #0
10013b00:	db08      	blt.n	10013b14 <_puts_r+0x78>
10013b02:	6823      	ldr	r3, [r4, #0]
10013b04:	1c5a      	adds	r2, r3, #1
10013b06:	6022      	str	r2, [r4, #0]
10013b08:	7019      	strb	r1, [r3, #0]
10013b0a:	7831      	ldrb	r1, [r6, #0]
10013b0c:	68a3      	ldr	r3, [r4, #8]
10013b0e:	2900      	cmp	r1, #0
10013b10:	d1f2      	bne.n	10013af8 <_puts_r+0x5c>
10013b12:	e00b      	b.n	10013b2c <_puts_r+0x90>
10013b14:	69a2      	ldr	r2, [r4, #24]
10013b16:	4293      	cmp	r3, r2
10013b18:	db01      	blt.n	10013b1e <_puts_r+0x82>
10013b1a:	290a      	cmp	r1, #10
10013b1c:	d1f1      	bne.n	10013b02 <_puts_r+0x66>
10013b1e:	0022      	movs	r2, r4
10013b20:	0028      	movs	r0, r5
10013b22:	f000 f92f 	bl	10013d84 <__swbuf_r>
10013b26:	1c43      	adds	r3, r0, #1
10013b28:	d1ef      	bne.n	10013b0a <_puts_r+0x6e>
10013b2a:	e7e2      	b.n	10013af2 <_puts_r+0x56>
10013b2c:	3b01      	subs	r3, #1
10013b2e:	60a3      	str	r3, [r4, #8]
10013b30:	2b00      	cmp	r3, #0
10013b32:	da08      	bge.n	10013b46 <_puts_r+0xaa>
10013b34:	0022      	movs	r2, r4
10013b36:	310a      	adds	r1, #10
10013b38:	0028      	movs	r0, r5
10013b3a:	f000 f923 	bl	10013d84 <__swbuf_r>
10013b3e:	1c43      	adds	r3, r0, #1
10013b40:	d0d7      	beq.n	10013af2 <_puts_r+0x56>
10013b42:	200a      	movs	r0, #10
10013b44:	e004      	b.n	10013b50 <_puts_r+0xb4>
10013b46:	200a      	movs	r0, #10
10013b48:	6823      	ldr	r3, [r4, #0]
10013b4a:	1c5a      	adds	r2, r3, #1
10013b4c:	6022      	str	r2, [r4, #0]
10013b4e:	7018      	strb	r0, [r3, #0]
10013b50:	bd70      	pop	{r4, r5, r6, pc}
10013b52:	46c0      	nop			; (mov r8, r8)
10013b54:	100167f0 	.word	0x100167f0
10013b58:	10016810 	.word	0x10016810
10013b5c:	10016830 	.word	0x10016830

10013b60 <puts>:
10013b60:	b510      	push	{r4, lr}
10013b62:	4b03      	ldr	r3, [pc, #12]	; (10013b70 <puts+0x10>)
10013b64:	0001      	movs	r1, r0
10013b66:	6818      	ldr	r0, [r3, #0]
10013b68:	f7ff ff98 	bl	10013a9c <_puts_r>
10013b6c:	bd10      	pop	{r4, pc}
10013b6e:	46c0      	nop			; (mov r8, r8)
10013b70:	1001694c 	.word	0x1001694c

10013b74 <rand>:
10013b74:	4b15      	ldr	r3, [pc, #84]	; (10013bcc <rand+0x58>)
10013b76:	b510      	push	{r4, lr}
10013b78:	681c      	ldr	r4, [r3, #0]
10013b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10013b7c:	2b00      	cmp	r3, #0
10013b7e:	d115      	bne.n	10013bac <rand+0x38>
10013b80:	2018      	movs	r0, #24
10013b82:	f7ff fe97 	bl	100138b4 <malloc>
10013b86:	4b12      	ldr	r3, [pc, #72]	; (10013bd0 <rand+0x5c>)
10013b88:	63a0      	str	r0, [r4, #56]	; 0x38
10013b8a:	8003      	strh	r3, [r0, #0]
10013b8c:	4b11      	ldr	r3, [pc, #68]	; (10013bd4 <rand+0x60>)
10013b8e:	2201      	movs	r2, #1
10013b90:	8043      	strh	r3, [r0, #2]
10013b92:	4b11      	ldr	r3, [pc, #68]	; (10013bd8 <rand+0x64>)
10013b94:	8083      	strh	r3, [r0, #4]
10013b96:	4b11      	ldr	r3, [pc, #68]	; (10013bdc <rand+0x68>)
10013b98:	80c3      	strh	r3, [r0, #6]
10013b9a:	4b11      	ldr	r3, [pc, #68]	; (10013be0 <rand+0x6c>)
10013b9c:	8103      	strh	r3, [r0, #8]
10013b9e:	2305      	movs	r3, #5
10013ba0:	8143      	strh	r3, [r0, #10]
10013ba2:	3306      	adds	r3, #6
10013ba4:	8183      	strh	r3, [r0, #12]
10013ba6:	2300      	movs	r3, #0
10013ba8:	6102      	str	r2, [r0, #16]
10013baa:	6143      	str	r3, [r0, #20]
10013bac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10013bae:	4a0d      	ldr	r2, [pc, #52]	; (10013be4 <rand+0x70>)
10013bb0:	6920      	ldr	r0, [r4, #16]
10013bb2:	6961      	ldr	r1, [r4, #20]
10013bb4:	4b0c      	ldr	r3, [pc, #48]	; (10013be8 <rand+0x74>)
10013bb6:	f7fe f9c9 	bl	10011f4c <__aeabi_lmul>
10013bba:	2201      	movs	r2, #1
10013bbc:	2300      	movs	r3, #0
10013bbe:	1880      	adds	r0, r0, r2
10013bc0:	4159      	adcs	r1, r3
10013bc2:	6120      	str	r0, [r4, #16]
10013bc4:	6161      	str	r1, [r4, #20]
10013bc6:	0048      	lsls	r0, r1, #1
10013bc8:	0840      	lsrs	r0, r0, #1
10013bca:	bd10      	pop	{r4, pc}
10013bcc:	1001694c 	.word	0x1001694c
10013bd0:	0000330e 	.word	0x0000330e
10013bd4:	ffffabcd 	.word	0xffffabcd
10013bd8:	00001234 	.word	0x00001234
10013bdc:	ffffe66d 	.word	0xffffe66d
10013be0:	ffffdeec 	.word	0xffffdeec
10013be4:	4c957f2d 	.word	0x4c957f2d
10013be8:	5851f42d 	.word	0x5851f42d

10013bec <_sbrk_r>:
10013bec:	2300      	movs	r3, #0
10013bee:	b570      	push	{r4, r5, r6, lr}
10013bf0:	4c06      	ldr	r4, [pc, #24]	; (10013c0c <_sbrk_r+0x20>)
10013bf2:	0005      	movs	r5, r0
10013bf4:	0008      	movs	r0, r1
10013bf6:	6023      	str	r3, [r4, #0]
10013bf8:	f7f8 fdce 	bl	1000c798 <_sbrk>
10013bfc:	1c43      	adds	r3, r0, #1
10013bfe:	d103      	bne.n	10013c08 <_sbrk_r+0x1c>
10013c00:	6823      	ldr	r3, [r4, #0]
10013c02:	2b00      	cmp	r3, #0
10013c04:	d000      	beq.n	10013c08 <_sbrk_r+0x1c>
10013c06:	602b      	str	r3, [r5, #0]
10013c08:	bd70      	pop	{r4, r5, r6, pc}
10013c0a:	46c0      	nop			; (mov r8, r8)
10013c0c:	100197ec 	.word	0x100197ec

10013c10 <setbuf>:
10013c10:	424a      	negs	r2, r1
10013c12:	414a      	adcs	r2, r1
10013c14:	2380      	movs	r3, #128	; 0x80
10013c16:	b510      	push	{r4, lr}
10013c18:	0052      	lsls	r2, r2, #1
10013c1a:	00db      	lsls	r3, r3, #3
10013c1c:	f000 f802 	bl	10013c24 <setvbuf>
10013c20:	bd10      	pop	{r4, pc}
	...

10013c24 <setvbuf>:
10013c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c26:	001d      	movs	r5, r3
10013c28:	4b51      	ldr	r3, [pc, #324]	; (10013d70 <setvbuf+0x14c>)
10013c2a:	b085      	sub	sp, #20
10013c2c:	681e      	ldr	r6, [r3, #0]
10013c2e:	0004      	movs	r4, r0
10013c30:	000f      	movs	r7, r1
10013c32:	9200      	str	r2, [sp, #0]
10013c34:	2e00      	cmp	r6, #0
10013c36:	d005      	beq.n	10013c44 <setvbuf+0x20>
10013c38:	69b3      	ldr	r3, [r6, #24]
10013c3a:	2b00      	cmp	r3, #0
10013c3c:	d102      	bne.n	10013c44 <setvbuf+0x20>
10013c3e:	0030      	movs	r0, r6
10013c40:	f000 fa62 	bl	10014108 <__sinit>
10013c44:	4b4b      	ldr	r3, [pc, #300]	; (10013d74 <setvbuf+0x150>)
10013c46:	429c      	cmp	r4, r3
10013c48:	d101      	bne.n	10013c4e <setvbuf+0x2a>
10013c4a:	6874      	ldr	r4, [r6, #4]
10013c4c:	e008      	b.n	10013c60 <setvbuf+0x3c>
10013c4e:	4b4a      	ldr	r3, [pc, #296]	; (10013d78 <setvbuf+0x154>)
10013c50:	429c      	cmp	r4, r3
10013c52:	d101      	bne.n	10013c58 <setvbuf+0x34>
10013c54:	68b4      	ldr	r4, [r6, #8]
10013c56:	e003      	b.n	10013c60 <setvbuf+0x3c>
10013c58:	4b48      	ldr	r3, [pc, #288]	; (10013d7c <setvbuf+0x158>)
10013c5a:	429c      	cmp	r4, r3
10013c5c:	d100      	bne.n	10013c60 <setvbuf+0x3c>
10013c5e:	68f4      	ldr	r4, [r6, #12]
10013c60:	9b00      	ldr	r3, [sp, #0]
10013c62:	2b02      	cmp	r3, #2
10013c64:	d005      	beq.n	10013c72 <setvbuf+0x4e>
10013c66:	2b01      	cmp	r3, #1
10013c68:	d900      	bls.n	10013c6c <setvbuf+0x48>
10013c6a:	e07c      	b.n	10013d66 <setvbuf+0x142>
10013c6c:	2d00      	cmp	r5, #0
10013c6e:	da00      	bge.n	10013c72 <setvbuf+0x4e>
10013c70:	e079      	b.n	10013d66 <setvbuf+0x142>
10013c72:	0021      	movs	r1, r4
10013c74:	0030      	movs	r0, r6
10013c76:	f000 f9d9 	bl	1001402c <_fflush_r>
10013c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013c7c:	2900      	cmp	r1, #0
10013c7e:	d008      	beq.n	10013c92 <setvbuf+0x6e>
10013c80:	0023      	movs	r3, r4
10013c82:	3344      	adds	r3, #68	; 0x44
10013c84:	4299      	cmp	r1, r3
10013c86:	d002      	beq.n	10013c8e <setvbuf+0x6a>
10013c88:	0030      	movs	r0, r6
10013c8a:	f7ff fe3d 	bl	10013908 <_free_r>
10013c8e:	2300      	movs	r3, #0
10013c90:	6363      	str	r3, [r4, #52]	; 0x34
10013c92:	2300      	movs	r3, #0
10013c94:	61a3      	str	r3, [r4, #24]
10013c96:	6063      	str	r3, [r4, #4]
10013c98:	89a3      	ldrh	r3, [r4, #12]
10013c9a:	061b      	lsls	r3, r3, #24
10013c9c:	d503      	bpl.n	10013ca6 <setvbuf+0x82>
10013c9e:	6921      	ldr	r1, [r4, #16]
10013ca0:	0030      	movs	r0, r6
10013ca2:	f7ff fe31 	bl	10013908 <_free_r>
10013ca6:	89a2      	ldrh	r2, [r4, #12]
10013ca8:	4b35      	ldr	r3, [pc, #212]	; (10013d80 <setvbuf+0x15c>)
10013caa:	4013      	ands	r3, r2
10013cac:	81a3      	strh	r3, [r4, #12]
10013cae:	9b00      	ldr	r3, [sp, #0]
10013cb0:	2b02      	cmp	r3, #2
10013cb2:	d021      	beq.n	10013cf8 <setvbuf+0xd4>
10013cb4:	ab03      	add	r3, sp, #12
10013cb6:	aa02      	add	r2, sp, #8
10013cb8:	0021      	movs	r1, r4
10013cba:	0030      	movs	r0, r6
10013cbc:	f000 fab8 	bl	10014230 <__swhatbuf_r>
10013cc0:	89a3      	ldrh	r3, [r4, #12]
10013cc2:	4318      	orrs	r0, r3
10013cc4:	81a0      	strh	r0, [r4, #12]
10013cc6:	2d00      	cmp	r5, #0
10013cc8:	d101      	bne.n	10013cce <setvbuf+0xaa>
10013cca:	9d02      	ldr	r5, [sp, #8]
10013ccc:	e001      	b.n	10013cd2 <setvbuf+0xae>
10013cce:	2f00      	cmp	r7, #0
10013cd0:	d125      	bne.n	10013d1e <setvbuf+0xfa>
10013cd2:	0028      	movs	r0, r5
10013cd4:	f7ff fdee 	bl	100138b4 <malloc>
10013cd8:	9501      	str	r5, [sp, #4]
10013cda:	1e07      	subs	r7, r0, #0
10013cdc:	d11a      	bne.n	10013d14 <setvbuf+0xf0>
10013cde:	9b02      	ldr	r3, [sp, #8]
10013ce0:	9301      	str	r3, [sp, #4]
10013ce2:	42ab      	cmp	r3, r5
10013ce4:	d102      	bne.n	10013cec <setvbuf+0xc8>
10013ce6:	2001      	movs	r0, #1
10013ce8:	4240      	negs	r0, r0
10013cea:	e006      	b.n	10013cfa <setvbuf+0xd6>
10013cec:	9801      	ldr	r0, [sp, #4]
10013cee:	f7ff fde1 	bl	100138b4 <malloc>
10013cf2:	1e07      	subs	r7, r0, #0
10013cf4:	d10e      	bne.n	10013d14 <setvbuf+0xf0>
10013cf6:	e7f6      	b.n	10013ce6 <setvbuf+0xc2>
10013cf8:	2000      	movs	r0, #0
10013cfa:	2202      	movs	r2, #2
10013cfc:	89a3      	ldrh	r3, [r4, #12]
10013cfe:	4313      	orrs	r3, r2
10013d00:	81a3      	strh	r3, [r4, #12]
10013d02:	2300      	movs	r3, #0
10013d04:	60a3      	str	r3, [r4, #8]
10013d06:	0023      	movs	r3, r4
10013d08:	3347      	adds	r3, #71	; 0x47
10013d0a:	6023      	str	r3, [r4, #0]
10013d0c:	6123      	str	r3, [r4, #16]
10013d0e:	2301      	movs	r3, #1
10013d10:	6163      	str	r3, [r4, #20]
10013d12:	e02a      	b.n	10013d6a <setvbuf+0x146>
10013d14:	2280      	movs	r2, #128	; 0x80
10013d16:	89a3      	ldrh	r3, [r4, #12]
10013d18:	9d01      	ldr	r5, [sp, #4]
10013d1a:	4313      	orrs	r3, r2
10013d1c:	81a3      	strh	r3, [r4, #12]
10013d1e:	69b3      	ldr	r3, [r6, #24]
10013d20:	2b00      	cmp	r3, #0
10013d22:	d102      	bne.n	10013d2a <setvbuf+0x106>
10013d24:	0030      	movs	r0, r6
10013d26:	f000 f9ef 	bl	10014108 <__sinit>
10013d2a:	9b00      	ldr	r3, [sp, #0]
10013d2c:	2b01      	cmp	r3, #1
10013d2e:	d103      	bne.n	10013d38 <setvbuf+0x114>
10013d30:	89a3      	ldrh	r3, [r4, #12]
10013d32:	9a00      	ldr	r2, [sp, #0]
10013d34:	431a      	orrs	r2, r3
10013d36:	81a2      	strh	r2, [r4, #12]
10013d38:	2308      	movs	r3, #8
10013d3a:	89a2      	ldrh	r2, [r4, #12]
10013d3c:	6027      	str	r7, [r4, #0]
10013d3e:	4013      	ands	r3, r2
10013d40:	6127      	str	r7, [r4, #16]
10013d42:	6165      	str	r5, [r4, #20]
10013d44:	1e18      	subs	r0, r3, #0
10013d46:	d00c      	beq.n	10013d62 <setvbuf+0x13e>
10013d48:	2301      	movs	r3, #1
10013d4a:	401a      	ands	r2, r3
10013d4c:	2300      	movs	r3, #0
10013d4e:	1e10      	subs	r0, r2, #0
10013d50:	4298      	cmp	r0, r3
10013d52:	d004      	beq.n	10013d5e <setvbuf+0x13a>
10013d54:	426d      	negs	r5, r5
10013d56:	60a3      	str	r3, [r4, #8]
10013d58:	61a5      	str	r5, [r4, #24]
10013d5a:	0018      	movs	r0, r3
10013d5c:	e005      	b.n	10013d6a <setvbuf+0x146>
10013d5e:	60a5      	str	r5, [r4, #8]
10013d60:	e003      	b.n	10013d6a <setvbuf+0x146>
10013d62:	60a3      	str	r3, [r4, #8]
10013d64:	e001      	b.n	10013d6a <setvbuf+0x146>
10013d66:	2001      	movs	r0, #1
10013d68:	4240      	negs	r0, r0
10013d6a:	b005      	add	sp, #20
10013d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013d6e:	46c0      	nop			; (mov r8, r8)
10013d70:	1001694c 	.word	0x1001694c
10013d74:	100167f0 	.word	0x100167f0
10013d78:	10016810 	.word	0x10016810
10013d7c:	10016830 	.word	0x10016830
10013d80:	fffff35c 	.word	0xfffff35c

10013d84 <__swbuf_r>:
10013d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013d86:	0005      	movs	r5, r0
10013d88:	000f      	movs	r7, r1
10013d8a:	0014      	movs	r4, r2
10013d8c:	2800      	cmp	r0, #0
10013d8e:	d004      	beq.n	10013d9a <__swbuf_r+0x16>
10013d90:	6983      	ldr	r3, [r0, #24]
10013d92:	2b00      	cmp	r3, #0
10013d94:	d101      	bne.n	10013d9a <__swbuf_r+0x16>
10013d96:	f000 f9b7 	bl	10014108 <__sinit>
10013d9a:	4b23      	ldr	r3, [pc, #140]	; (10013e28 <__swbuf_r+0xa4>)
10013d9c:	429c      	cmp	r4, r3
10013d9e:	d101      	bne.n	10013da4 <__swbuf_r+0x20>
10013da0:	686c      	ldr	r4, [r5, #4]
10013da2:	e008      	b.n	10013db6 <__swbuf_r+0x32>
10013da4:	4b21      	ldr	r3, [pc, #132]	; (10013e2c <__swbuf_r+0xa8>)
10013da6:	429c      	cmp	r4, r3
10013da8:	d101      	bne.n	10013dae <__swbuf_r+0x2a>
10013daa:	68ac      	ldr	r4, [r5, #8]
10013dac:	e003      	b.n	10013db6 <__swbuf_r+0x32>
10013dae:	4b20      	ldr	r3, [pc, #128]	; (10013e30 <__swbuf_r+0xac>)
10013db0:	429c      	cmp	r4, r3
10013db2:	d100      	bne.n	10013db6 <__swbuf_r+0x32>
10013db4:	68ec      	ldr	r4, [r5, #12]
10013db6:	69a3      	ldr	r3, [r4, #24]
10013db8:	60a3      	str	r3, [r4, #8]
10013dba:	89a3      	ldrh	r3, [r4, #12]
10013dbc:	071b      	lsls	r3, r3, #28
10013dbe:	d50a      	bpl.n	10013dd6 <__swbuf_r+0x52>
10013dc0:	6923      	ldr	r3, [r4, #16]
10013dc2:	2b00      	cmp	r3, #0
10013dc4:	d007      	beq.n	10013dd6 <__swbuf_r+0x52>
10013dc6:	6823      	ldr	r3, [r4, #0]
10013dc8:	6922      	ldr	r2, [r4, #16]
10013dca:	b2fe      	uxtb	r6, r7
10013dcc:	1a98      	subs	r0, r3, r2
10013dce:	6963      	ldr	r3, [r4, #20]
10013dd0:	4298      	cmp	r0, r3
10013dd2:	db0f      	blt.n	10013df4 <__swbuf_r+0x70>
10013dd4:	e008      	b.n	10013de8 <__swbuf_r+0x64>
10013dd6:	0021      	movs	r1, r4
10013dd8:	0028      	movs	r0, r5
10013dda:	f000 f82b 	bl	10013e34 <__swsetup_r>
10013dde:	2800      	cmp	r0, #0
10013de0:	d0f1      	beq.n	10013dc6 <__swbuf_r+0x42>
10013de2:	2001      	movs	r0, #1
10013de4:	4240      	negs	r0, r0
10013de6:	e01d      	b.n	10013e24 <__swbuf_r+0xa0>
10013de8:	0021      	movs	r1, r4
10013dea:	0028      	movs	r0, r5
10013dec:	f000 f91e 	bl	1001402c <_fflush_r>
10013df0:	2800      	cmp	r0, #0
10013df2:	d1f6      	bne.n	10013de2 <__swbuf_r+0x5e>
10013df4:	68a3      	ldr	r3, [r4, #8]
10013df6:	3001      	adds	r0, #1
10013df8:	3b01      	subs	r3, #1
10013dfa:	60a3      	str	r3, [r4, #8]
10013dfc:	6823      	ldr	r3, [r4, #0]
10013dfe:	1c5a      	adds	r2, r3, #1
10013e00:	6022      	str	r2, [r4, #0]
10013e02:	701f      	strb	r7, [r3, #0]
10013e04:	6963      	ldr	r3, [r4, #20]
10013e06:	4298      	cmp	r0, r3
10013e08:	d005      	beq.n	10013e16 <__swbuf_r+0x92>
10013e0a:	89a3      	ldrh	r3, [r4, #12]
10013e0c:	0030      	movs	r0, r6
10013e0e:	07db      	lsls	r3, r3, #31
10013e10:	d508      	bpl.n	10013e24 <__swbuf_r+0xa0>
10013e12:	2e0a      	cmp	r6, #10
10013e14:	d106      	bne.n	10013e24 <__swbuf_r+0xa0>
10013e16:	0021      	movs	r1, r4
10013e18:	0028      	movs	r0, r5
10013e1a:	f000 f907 	bl	1001402c <_fflush_r>
10013e1e:	2800      	cmp	r0, #0
10013e20:	d1df      	bne.n	10013de2 <__swbuf_r+0x5e>
10013e22:	0030      	movs	r0, r6
10013e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013e26:	46c0      	nop			; (mov r8, r8)
10013e28:	100167f0 	.word	0x100167f0
10013e2c:	10016810 	.word	0x10016810
10013e30:	10016830 	.word	0x10016830

10013e34 <__swsetup_r>:
10013e34:	4b36      	ldr	r3, [pc, #216]	; (10013f10 <__swsetup_r+0xdc>)
10013e36:	b570      	push	{r4, r5, r6, lr}
10013e38:	681d      	ldr	r5, [r3, #0]
10013e3a:	0006      	movs	r6, r0
10013e3c:	000c      	movs	r4, r1
10013e3e:	2d00      	cmp	r5, #0
10013e40:	d005      	beq.n	10013e4e <__swsetup_r+0x1a>
10013e42:	69ab      	ldr	r3, [r5, #24]
10013e44:	2b00      	cmp	r3, #0
10013e46:	d102      	bne.n	10013e4e <__swsetup_r+0x1a>
10013e48:	0028      	movs	r0, r5
10013e4a:	f000 f95d 	bl	10014108 <__sinit>
10013e4e:	4b31      	ldr	r3, [pc, #196]	; (10013f14 <__swsetup_r+0xe0>)
10013e50:	429c      	cmp	r4, r3
10013e52:	d101      	bne.n	10013e58 <__swsetup_r+0x24>
10013e54:	686c      	ldr	r4, [r5, #4]
10013e56:	e008      	b.n	10013e6a <__swsetup_r+0x36>
10013e58:	4b2f      	ldr	r3, [pc, #188]	; (10013f18 <__swsetup_r+0xe4>)
10013e5a:	429c      	cmp	r4, r3
10013e5c:	d101      	bne.n	10013e62 <__swsetup_r+0x2e>
10013e5e:	68ac      	ldr	r4, [r5, #8]
10013e60:	e003      	b.n	10013e6a <__swsetup_r+0x36>
10013e62:	4b2e      	ldr	r3, [pc, #184]	; (10013f1c <__swsetup_r+0xe8>)
10013e64:	429c      	cmp	r4, r3
10013e66:	d100      	bne.n	10013e6a <__swsetup_r+0x36>
10013e68:	68ec      	ldr	r4, [r5, #12]
10013e6a:	220c      	movs	r2, #12
10013e6c:	5ea3      	ldrsh	r3, [r4, r2]
10013e6e:	b29a      	uxth	r2, r3
10013e70:	0711      	lsls	r1, r2, #28
10013e72:	d423      	bmi.n	10013ebc <__swsetup_r+0x88>
10013e74:	06d1      	lsls	r1, r2, #27
10013e76:	d407      	bmi.n	10013e88 <__swsetup_r+0x54>
10013e78:	2209      	movs	r2, #9
10013e7a:	2001      	movs	r0, #1
10013e7c:	6032      	str	r2, [r6, #0]
10013e7e:	3237      	adds	r2, #55	; 0x37
10013e80:	4313      	orrs	r3, r2
10013e82:	81a3      	strh	r3, [r4, #12]
10013e84:	4240      	negs	r0, r0
10013e86:	e042      	b.n	10013f0e <__swsetup_r+0xda>
10013e88:	0753      	lsls	r3, r2, #29
10013e8a:	d513      	bpl.n	10013eb4 <__swsetup_r+0x80>
10013e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013e8e:	2900      	cmp	r1, #0
10013e90:	d008      	beq.n	10013ea4 <__swsetup_r+0x70>
10013e92:	0023      	movs	r3, r4
10013e94:	3344      	adds	r3, #68	; 0x44
10013e96:	4299      	cmp	r1, r3
10013e98:	d002      	beq.n	10013ea0 <__swsetup_r+0x6c>
10013e9a:	0030      	movs	r0, r6
10013e9c:	f7ff fd34 	bl	10013908 <_free_r>
10013ea0:	2300      	movs	r3, #0
10013ea2:	6363      	str	r3, [r4, #52]	; 0x34
10013ea4:	2224      	movs	r2, #36	; 0x24
10013ea6:	89a3      	ldrh	r3, [r4, #12]
10013ea8:	4393      	bics	r3, r2
10013eaa:	81a3      	strh	r3, [r4, #12]
10013eac:	2300      	movs	r3, #0
10013eae:	6063      	str	r3, [r4, #4]
10013eb0:	6923      	ldr	r3, [r4, #16]
10013eb2:	6023      	str	r3, [r4, #0]
10013eb4:	2208      	movs	r2, #8
10013eb6:	89a3      	ldrh	r3, [r4, #12]
10013eb8:	4313      	orrs	r3, r2
10013eba:	81a3      	strh	r3, [r4, #12]
10013ebc:	6923      	ldr	r3, [r4, #16]
10013ebe:	2b00      	cmp	r3, #0
10013ec0:	d10b      	bne.n	10013eda <__swsetup_r+0xa6>
10013ec2:	23a0      	movs	r3, #160	; 0xa0
10013ec4:	89a2      	ldrh	r2, [r4, #12]
10013ec6:	009b      	lsls	r3, r3, #2
10013ec8:	4013      	ands	r3, r2
10013eca:	2280      	movs	r2, #128	; 0x80
10013ecc:	0092      	lsls	r2, r2, #2
10013ece:	4293      	cmp	r3, r2
10013ed0:	d003      	beq.n	10013eda <__swsetup_r+0xa6>
10013ed2:	0021      	movs	r1, r4
10013ed4:	0030      	movs	r0, r6
10013ed6:	f000 f9d1 	bl	1001427c <__smakebuf_r>
10013eda:	2301      	movs	r3, #1
10013edc:	89a2      	ldrh	r2, [r4, #12]
10013ede:	4013      	ands	r3, r2
10013ee0:	d005      	beq.n	10013eee <__swsetup_r+0xba>
10013ee2:	2300      	movs	r3, #0
10013ee4:	60a3      	str	r3, [r4, #8]
10013ee6:	6963      	ldr	r3, [r4, #20]
10013ee8:	425b      	negs	r3, r3
10013eea:	61a3      	str	r3, [r4, #24]
10013eec:	e003      	b.n	10013ef6 <__swsetup_r+0xc2>
10013eee:	0792      	lsls	r2, r2, #30
10013ef0:	d400      	bmi.n	10013ef4 <__swsetup_r+0xc0>
10013ef2:	6963      	ldr	r3, [r4, #20]
10013ef4:	60a3      	str	r3, [r4, #8]
10013ef6:	2000      	movs	r0, #0
10013ef8:	6923      	ldr	r3, [r4, #16]
10013efa:	4283      	cmp	r3, r0
10013efc:	d107      	bne.n	10013f0e <__swsetup_r+0xda>
10013efe:	220c      	movs	r2, #12
10013f00:	5ea3      	ldrsh	r3, [r4, r2]
10013f02:	061a      	lsls	r2, r3, #24
10013f04:	d503      	bpl.n	10013f0e <__swsetup_r+0xda>
10013f06:	2240      	movs	r2, #64	; 0x40
10013f08:	4313      	orrs	r3, r2
10013f0a:	81a3      	strh	r3, [r4, #12]
10013f0c:	3801      	subs	r0, #1
10013f0e:	bd70      	pop	{r4, r5, r6, pc}
10013f10:	1001694c 	.word	0x1001694c
10013f14:	100167f0 	.word	0x100167f0
10013f18:	10016810 	.word	0x10016810
10013f1c:	10016830 	.word	0x10016830

10013f20 <__sflush_r>:
10013f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013f22:	898a      	ldrh	r2, [r1, #12]
10013f24:	0005      	movs	r5, r0
10013f26:	000c      	movs	r4, r1
10013f28:	0713      	lsls	r3, r2, #28
10013f2a:	d45a      	bmi.n	10013fe2 <__sflush_r+0xc2>
10013f2c:	684b      	ldr	r3, [r1, #4]
10013f2e:	2b00      	cmp	r3, #0
10013f30:	dc02      	bgt.n	10013f38 <__sflush_r+0x18>
10013f32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10013f34:	2b00      	cmp	r3, #0
10013f36:	dd19      	ble.n	10013f6c <__sflush_r+0x4c>
10013f38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10013f3a:	2f00      	cmp	r7, #0
10013f3c:	d016      	beq.n	10013f6c <__sflush_r+0x4c>
10013f3e:	2300      	movs	r3, #0
10013f40:	682e      	ldr	r6, [r5, #0]
10013f42:	602b      	str	r3, [r5, #0]
10013f44:	2380      	movs	r3, #128	; 0x80
10013f46:	015b      	lsls	r3, r3, #5
10013f48:	401a      	ands	r2, r3
10013f4a:	d001      	beq.n	10013f50 <__sflush_r+0x30>
10013f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10013f4e:	e014      	b.n	10013f7a <__sflush_r+0x5a>
10013f50:	2301      	movs	r3, #1
10013f52:	6a21      	ldr	r1, [r4, #32]
10013f54:	0028      	movs	r0, r5
10013f56:	47b8      	blx	r7
10013f58:	1c43      	adds	r3, r0, #1
10013f5a:	d10e      	bne.n	10013f7a <__sflush_r+0x5a>
10013f5c:	682b      	ldr	r3, [r5, #0]
10013f5e:	2b00      	cmp	r3, #0
10013f60:	d00b      	beq.n	10013f7a <__sflush_r+0x5a>
10013f62:	2b1d      	cmp	r3, #29
10013f64:	d001      	beq.n	10013f6a <__sflush_r+0x4a>
10013f66:	2b16      	cmp	r3, #22
10013f68:	d102      	bne.n	10013f70 <__sflush_r+0x50>
10013f6a:	602e      	str	r6, [r5, #0]
10013f6c:	2000      	movs	r0, #0
10013f6e:	e05a      	b.n	10014026 <__sflush_r+0x106>
10013f70:	2240      	movs	r2, #64	; 0x40
10013f72:	89a3      	ldrh	r3, [r4, #12]
10013f74:	4313      	orrs	r3, r2
10013f76:	81a3      	strh	r3, [r4, #12]
10013f78:	e055      	b.n	10014026 <__sflush_r+0x106>
10013f7a:	89a3      	ldrh	r3, [r4, #12]
10013f7c:	075b      	lsls	r3, r3, #29
10013f7e:	d506      	bpl.n	10013f8e <__sflush_r+0x6e>
10013f80:	6863      	ldr	r3, [r4, #4]
10013f82:	1ac0      	subs	r0, r0, r3
10013f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
10013f86:	2b00      	cmp	r3, #0
10013f88:	d001      	beq.n	10013f8e <__sflush_r+0x6e>
10013f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10013f8c:	1ac0      	subs	r0, r0, r3
10013f8e:	2300      	movs	r3, #0
10013f90:	0002      	movs	r2, r0
10013f92:	6a21      	ldr	r1, [r4, #32]
10013f94:	0028      	movs	r0, r5
10013f96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10013f98:	47b8      	blx	r7
10013f9a:	89a3      	ldrh	r3, [r4, #12]
10013f9c:	1c42      	adds	r2, r0, #1
10013f9e:	d106      	bne.n	10013fae <__sflush_r+0x8e>
10013fa0:	6829      	ldr	r1, [r5, #0]
10013fa2:	291d      	cmp	r1, #29
10013fa4:	d83a      	bhi.n	1001401c <__sflush_r+0xfc>
10013fa6:	4a20      	ldr	r2, [pc, #128]	; (10014028 <__sflush_r+0x108>)
10013fa8:	40ca      	lsrs	r2, r1
10013faa:	07d2      	lsls	r2, r2, #31
10013fac:	d536      	bpl.n	1001401c <__sflush_r+0xfc>
10013fae:	2200      	movs	r2, #0
10013fb0:	6062      	str	r2, [r4, #4]
10013fb2:	6922      	ldr	r2, [r4, #16]
10013fb4:	6022      	str	r2, [r4, #0]
10013fb6:	04db      	lsls	r3, r3, #19
10013fb8:	d505      	bpl.n	10013fc6 <__sflush_r+0xa6>
10013fba:	1c43      	adds	r3, r0, #1
10013fbc:	d102      	bne.n	10013fc4 <__sflush_r+0xa4>
10013fbe:	682b      	ldr	r3, [r5, #0]
10013fc0:	2b00      	cmp	r3, #0
10013fc2:	d100      	bne.n	10013fc6 <__sflush_r+0xa6>
10013fc4:	6560      	str	r0, [r4, #84]	; 0x54
10013fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013fc8:	602e      	str	r6, [r5, #0]
10013fca:	2900      	cmp	r1, #0
10013fcc:	d0ce      	beq.n	10013f6c <__sflush_r+0x4c>
10013fce:	0023      	movs	r3, r4
10013fd0:	3344      	adds	r3, #68	; 0x44
10013fd2:	4299      	cmp	r1, r3
10013fd4:	d002      	beq.n	10013fdc <__sflush_r+0xbc>
10013fd6:	0028      	movs	r0, r5
10013fd8:	f7ff fc96 	bl	10013908 <_free_r>
10013fdc:	2000      	movs	r0, #0
10013fde:	6360      	str	r0, [r4, #52]	; 0x34
10013fe0:	e021      	b.n	10014026 <__sflush_r+0x106>
10013fe2:	690f      	ldr	r7, [r1, #16]
10013fe4:	2f00      	cmp	r7, #0
10013fe6:	d0c1      	beq.n	10013f6c <__sflush_r+0x4c>
10013fe8:	680b      	ldr	r3, [r1, #0]
10013fea:	600f      	str	r7, [r1, #0]
10013fec:	1bdb      	subs	r3, r3, r7
10013fee:	9301      	str	r3, [sp, #4]
10013ff0:	2300      	movs	r3, #0
10013ff2:	0792      	lsls	r2, r2, #30
10013ff4:	d100      	bne.n	10013ff8 <__sflush_r+0xd8>
10013ff6:	694b      	ldr	r3, [r1, #20]
10013ff8:	60a3      	str	r3, [r4, #8]
10013ffa:	e003      	b.n	10014004 <__sflush_r+0xe4>
10013ffc:	9b01      	ldr	r3, [sp, #4]
10013ffe:	183f      	adds	r7, r7, r0
10014000:	1a1b      	subs	r3, r3, r0
10014002:	9301      	str	r3, [sp, #4]
10014004:	9b01      	ldr	r3, [sp, #4]
10014006:	2b00      	cmp	r3, #0
10014008:	ddb0      	ble.n	10013f6c <__sflush_r+0x4c>
1001400a:	9b01      	ldr	r3, [sp, #4]
1001400c:	003a      	movs	r2, r7
1001400e:	6a21      	ldr	r1, [r4, #32]
10014010:	0028      	movs	r0, r5
10014012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10014014:	47b0      	blx	r6
10014016:	2800      	cmp	r0, #0
10014018:	dcf0      	bgt.n	10013ffc <__sflush_r+0xdc>
1001401a:	89a3      	ldrh	r3, [r4, #12]
1001401c:	2240      	movs	r2, #64	; 0x40
1001401e:	2001      	movs	r0, #1
10014020:	4313      	orrs	r3, r2
10014022:	81a3      	strh	r3, [r4, #12]
10014024:	4240      	negs	r0, r0
10014026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014028:	20400001 	.word	0x20400001

1001402c <_fflush_r>:
1001402c:	690b      	ldr	r3, [r1, #16]
1001402e:	b570      	push	{r4, r5, r6, lr}
10014030:	0005      	movs	r5, r0
10014032:	000c      	movs	r4, r1
10014034:	2b00      	cmp	r3, #0
10014036:	d101      	bne.n	1001403c <_fflush_r+0x10>
10014038:	2000      	movs	r0, #0
1001403a:	e01c      	b.n	10014076 <_fflush_r+0x4a>
1001403c:	2800      	cmp	r0, #0
1001403e:	d004      	beq.n	1001404a <_fflush_r+0x1e>
10014040:	6983      	ldr	r3, [r0, #24]
10014042:	2b00      	cmp	r3, #0
10014044:	d101      	bne.n	1001404a <_fflush_r+0x1e>
10014046:	f000 f85f 	bl	10014108 <__sinit>
1001404a:	4b0b      	ldr	r3, [pc, #44]	; (10014078 <_fflush_r+0x4c>)
1001404c:	429c      	cmp	r4, r3
1001404e:	d101      	bne.n	10014054 <_fflush_r+0x28>
10014050:	686c      	ldr	r4, [r5, #4]
10014052:	e008      	b.n	10014066 <_fflush_r+0x3a>
10014054:	4b09      	ldr	r3, [pc, #36]	; (1001407c <_fflush_r+0x50>)
10014056:	429c      	cmp	r4, r3
10014058:	d101      	bne.n	1001405e <_fflush_r+0x32>
1001405a:	68ac      	ldr	r4, [r5, #8]
1001405c:	e003      	b.n	10014066 <_fflush_r+0x3a>
1001405e:	4b08      	ldr	r3, [pc, #32]	; (10014080 <_fflush_r+0x54>)
10014060:	429c      	cmp	r4, r3
10014062:	d100      	bne.n	10014066 <_fflush_r+0x3a>
10014064:	68ec      	ldr	r4, [r5, #12]
10014066:	220c      	movs	r2, #12
10014068:	5ea3      	ldrsh	r3, [r4, r2]
1001406a:	2b00      	cmp	r3, #0
1001406c:	d0e4      	beq.n	10014038 <_fflush_r+0xc>
1001406e:	0021      	movs	r1, r4
10014070:	0028      	movs	r0, r5
10014072:	f7ff ff55 	bl	10013f20 <__sflush_r>
10014076:	bd70      	pop	{r4, r5, r6, pc}
10014078:	100167f0 	.word	0x100167f0
1001407c:	10016810 	.word	0x10016810
10014080:	10016830 	.word	0x10016830

10014084 <_cleanup_r>:
10014084:	b510      	push	{r4, lr}
10014086:	4902      	ldr	r1, [pc, #8]	; (10014090 <_cleanup_r+0xc>)
10014088:	f000 f8b0 	bl	100141ec <_fwalk_reent>
1001408c:	bd10      	pop	{r4, pc}
1001408e:	46c0      	nop			; (mov r8, r8)
10014090:	1001402d 	.word	0x1001402d

10014094 <std.isra.0>:
10014094:	2300      	movs	r3, #0
10014096:	b510      	push	{r4, lr}
10014098:	0004      	movs	r4, r0
1001409a:	6003      	str	r3, [r0, #0]
1001409c:	6043      	str	r3, [r0, #4]
1001409e:	6083      	str	r3, [r0, #8]
100140a0:	8181      	strh	r1, [r0, #12]
100140a2:	6643      	str	r3, [r0, #100]	; 0x64
100140a4:	81c2      	strh	r2, [r0, #14]
100140a6:	6103      	str	r3, [r0, #16]
100140a8:	6143      	str	r3, [r0, #20]
100140aa:	6183      	str	r3, [r0, #24]
100140ac:	0019      	movs	r1, r3
100140ae:	2208      	movs	r2, #8
100140b0:	305c      	adds	r0, #92	; 0x5c
100140b2:	f7ff fc21 	bl	100138f8 <memset>
100140b6:	4b05      	ldr	r3, [pc, #20]	; (100140cc <std.isra.0+0x38>)
100140b8:	6224      	str	r4, [r4, #32]
100140ba:	6263      	str	r3, [r4, #36]	; 0x24
100140bc:	4b04      	ldr	r3, [pc, #16]	; (100140d0 <std.isra.0+0x3c>)
100140be:	62a3      	str	r3, [r4, #40]	; 0x28
100140c0:	4b04      	ldr	r3, [pc, #16]	; (100140d4 <std.isra.0+0x40>)
100140c2:	62e3      	str	r3, [r4, #44]	; 0x2c
100140c4:	4b04      	ldr	r3, [pc, #16]	; (100140d8 <std.isra.0+0x44>)
100140c6:	6323      	str	r3, [r4, #48]	; 0x30
100140c8:	bd10      	pop	{r4, pc}
100140ca:	46c0      	nop			; (mov r8, r8)
100140cc:	1001490d 	.word	0x1001490d
100140d0:	10014935 	.word	0x10014935
100140d4:	1001496d 	.word	0x1001496d
100140d8:	10014999 	.word	0x10014999

100140dc <__sfmoreglue>:
100140dc:	b570      	push	{r4, r5, r6, lr}
100140de:	2568      	movs	r5, #104	; 0x68
100140e0:	1e4b      	subs	r3, r1, #1
100140e2:	435d      	muls	r5, r3
100140e4:	000e      	movs	r6, r1
100140e6:	0029      	movs	r1, r5
100140e8:	3174      	adds	r1, #116	; 0x74
100140ea:	f7ff fc53 	bl	10013994 <_malloc_r>
100140ee:	1e04      	subs	r4, r0, #0
100140f0:	d008      	beq.n	10014104 <__sfmoreglue+0x28>
100140f2:	2100      	movs	r1, #0
100140f4:	002a      	movs	r2, r5
100140f6:	6001      	str	r1, [r0, #0]
100140f8:	6046      	str	r6, [r0, #4]
100140fa:	300c      	adds	r0, #12
100140fc:	60a0      	str	r0, [r4, #8]
100140fe:	3268      	adds	r2, #104	; 0x68
10014100:	f7ff fbfa 	bl	100138f8 <memset>
10014104:	0020      	movs	r0, r4
10014106:	bd70      	pop	{r4, r5, r6, pc}

10014108 <__sinit>:
10014108:	6983      	ldr	r3, [r0, #24]
1001410a:	b513      	push	{r0, r1, r4, lr}
1001410c:	0004      	movs	r4, r0
1001410e:	2b00      	cmp	r3, #0
10014110:	d128      	bne.n	10014164 <__sinit+0x5c>
10014112:	6483      	str	r3, [r0, #72]	; 0x48
10014114:	64c3      	str	r3, [r0, #76]	; 0x4c
10014116:	6503      	str	r3, [r0, #80]	; 0x50
10014118:	4b13      	ldr	r3, [pc, #76]	; (10014168 <__sinit+0x60>)
1001411a:	4a14      	ldr	r2, [pc, #80]	; (1001416c <__sinit+0x64>)
1001411c:	681b      	ldr	r3, [r3, #0]
1001411e:	6282      	str	r2, [r0, #40]	; 0x28
10014120:	9301      	str	r3, [sp, #4]
10014122:	4298      	cmp	r0, r3
10014124:	d101      	bne.n	1001412a <__sinit+0x22>
10014126:	2301      	movs	r3, #1
10014128:	6183      	str	r3, [r0, #24]
1001412a:	0020      	movs	r0, r4
1001412c:	f000 f820 	bl	10014170 <__sfp>
10014130:	6060      	str	r0, [r4, #4]
10014132:	0020      	movs	r0, r4
10014134:	f000 f81c 	bl	10014170 <__sfp>
10014138:	60a0      	str	r0, [r4, #8]
1001413a:	0020      	movs	r0, r4
1001413c:	f000 f818 	bl	10014170 <__sfp>
10014140:	2200      	movs	r2, #0
10014142:	60e0      	str	r0, [r4, #12]
10014144:	2104      	movs	r1, #4
10014146:	6860      	ldr	r0, [r4, #4]
10014148:	f7ff ffa4 	bl	10014094 <std.isra.0>
1001414c:	2201      	movs	r2, #1
1001414e:	2109      	movs	r1, #9
10014150:	68a0      	ldr	r0, [r4, #8]
10014152:	f7ff ff9f 	bl	10014094 <std.isra.0>
10014156:	2202      	movs	r2, #2
10014158:	2112      	movs	r1, #18
1001415a:	68e0      	ldr	r0, [r4, #12]
1001415c:	f7ff ff9a 	bl	10014094 <std.isra.0>
10014160:	2301      	movs	r3, #1
10014162:	61a3      	str	r3, [r4, #24]
10014164:	bd13      	pop	{r0, r1, r4, pc}
10014166:	46c0      	nop			; (mov r8, r8)
10014168:	100167ec 	.word	0x100167ec
1001416c:	10014085 	.word	0x10014085

10014170 <__sfp>:
10014170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014172:	4b1d      	ldr	r3, [pc, #116]	; (100141e8 <__sfp+0x78>)
10014174:	0006      	movs	r6, r0
10014176:	681d      	ldr	r5, [r3, #0]
10014178:	69ab      	ldr	r3, [r5, #24]
1001417a:	2b00      	cmp	r3, #0
1001417c:	d102      	bne.n	10014184 <__sfp+0x14>
1001417e:	0028      	movs	r0, r5
10014180:	f7ff ffc2 	bl	10014108 <__sinit>
10014184:	3548      	adds	r5, #72	; 0x48
10014186:	68ac      	ldr	r4, [r5, #8]
10014188:	686b      	ldr	r3, [r5, #4]
1001418a:	3b01      	subs	r3, #1
1001418c:	d405      	bmi.n	1001419a <__sfp+0x2a>
1001418e:	220c      	movs	r2, #12
10014190:	5ea7      	ldrsh	r7, [r4, r2]
10014192:	2f00      	cmp	r7, #0
10014194:	d010      	beq.n	100141b8 <__sfp+0x48>
10014196:	3468      	adds	r4, #104	; 0x68
10014198:	e7f7      	b.n	1001418a <__sfp+0x1a>
1001419a:	682b      	ldr	r3, [r5, #0]
1001419c:	2b00      	cmp	r3, #0
1001419e:	d001      	beq.n	100141a4 <__sfp+0x34>
100141a0:	682d      	ldr	r5, [r5, #0]
100141a2:	e7f0      	b.n	10014186 <__sfp+0x16>
100141a4:	2104      	movs	r1, #4
100141a6:	0030      	movs	r0, r6
100141a8:	f7ff ff98 	bl	100140dc <__sfmoreglue>
100141ac:	6028      	str	r0, [r5, #0]
100141ae:	2800      	cmp	r0, #0
100141b0:	d1f6      	bne.n	100141a0 <__sfp+0x30>
100141b2:	230c      	movs	r3, #12
100141b4:	6033      	str	r3, [r6, #0]
100141b6:	e016      	b.n	100141e6 <__sfp+0x76>
100141b8:	2301      	movs	r3, #1
100141ba:	0020      	movs	r0, r4
100141bc:	425b      	negs	r3, r3
100141be:	81e3      	strh	r3, [r4, #14]
100141c0:	3302      	adds	r3, #2
100141c2:	81a3      	strh	r3, [r4, #12]
100141c4:	6667      	str	r7, [r4, #100]	; 0x64
100141c6:	6027      	str	r7, [r4, #0]
100141c8:	60a7      	str	r7, [r4, #8]
100141ca:	6067      	str	r7, [r4, #4]
100141cc:	6127      	str	r7, [r4, #16]
100141ce:	6167      	str	r7, [r4, #20]
100141d0:	61a7      	str	r7, [r4, #24]
100141d2:	305c      	adds	r0, #92	; 0x5c
100141d4:	2208      	movs	r2, #8
100141d6:	0039      	movs	r1, r7
100141d8:	f7ff fb8e 	bl	100138f8 <memset>
100141dc:	0020      	movs	r0, r4
100141de:	6367      	str	r7, [r4, #52]	; 0x34
100141e0:	63a7      	str	r7, [r4, #56]	; 0x38
100141e2:	64a7      	str	r7, [r4, #72]	; 0x48
100141e4:	64e7      	str	r7, [r4, #76]	; 0x4c
100141e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100141e8:	100167ec 	.word	0x100167ec

100141ec <_fwalk_reent>:
100141ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100141ee:	0004      	movs	r4, r0
100141f0:	0007      	movs	r7, r0
100141f2:	2600      	movs	r6, #0
100141f4:	9101      	str	r1, [sp, #4]
100141f6:	3448      	adds	r4, #72	; 0x48
100141f8:	2c00      	cmp	r4, #0
100141fa:	d016      	beq.n	1001422a <_fwalk_reent+0x3e>
100141fc:	6863      	ldr	r3, [r4, #4]
100141fe:	68a5      	ldr	r5, [r4, #8]
10014200:	9300      	str	r3, [sp, #0]
10014202:	9b00      	ldr	r3, [sp, #0]
10014204:	3b01      	subs	r3, #1
10014206:	9300      	str	r3, [sp, #0]
10014208:	d40d      	bmi.n	10014226 <_fwalk_reent+0x3a>
1001420a:	89ab      	ldrh	r3, [r5, #12]
1001420c:	2b01      	cmp	r3, #1
1001420e:	d908      	bls.n	10014222 <_fwalk_reent+0x36>
10014210:	220e      	movs	r2, #14
10014212:	5eab      	ldrsh	r3, [r5, r2]
10014214:	3301      	adds	r3, #1
10014216:	d004      	beq.n	10014222 <_fwalk_reent+0x36>
10014218:	0029      	movs	r1, r5
1001421a:	0038      	movs	r0, r7
1001421c:	9b01      	ldr	r3, [sp, #4]
1001421e:	4798      	blx	r3
10014220:	4306      	orrs	r6, r0
10014222:	3568      	adds	r5, #104	; 0x68
10014224:	e7ed      	b.n	10014202 <_fwalk_reent+0x16>
10014226:	6824      	ldr	r4, [r4, #0]
10014228:	e7e6      	b.n	100141f8 <_fwalk_reent+0xc>
1001422a:	0030      	movs	r0, r6
1001422c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10014230 <__swhatbuf_r>:
10014230:	b570      	push	{r4, r5, r6, lr}
10014232:	000e      	movs	r6, r1
10014234:	001d      	movs	r5, r3
10014236:	230e      	movs	r3, #14
10014238:	5ec9      	ldrsh	r1, [r1, r3]
1001423a:	b090      	sub	sp, #64	; 0x40
1001423c:	0014      	movs	r4, r2
1001423e:	2900      	cmp	r1, #0
10014240:	da06      	bge.n	10014250 <__swhatbuf_r+0x20>
10014242:	2300      	movs	r3, #0
10014244:	602b      	str	r3, [r5, #0]
10014246:	89b3      	ldrh	r3, [r6, #12]
10014248:	061b      	lsls	r3, r3, #24
1001424a:	d50f      	bpl.n	1001426c <__swhatbuf_r+0x3c>
1001424c:	2340      	movs	r3, #64	; 0x40
1001424e:	e00f      	b.n	10014270 <__swhatbuf_r+0x40>
10014250:	aa01      	add	r2, sp, #4
10014252:	f000 fbcd 	bl	100149f0 <_fstat_r>
10014256:	2800      	cmp	r0, #0
10014258:	dbf3      	blt.n	10014242 <__swhatbuf_r+0x12>
1001425a:	23f0      	movs	r3, #240	; 0xf0
1001425c:	9a02      	ldr	r2, [sp, #8]
1001425e:	021b      	lsls	r3, r3, #8
10014260:	4013      	ands	r3, r2
10014262:	4a05      	ldr	r2, [pc, #20]	; (10014278 <__swhatbuf_r+0x48>)
10014264:	189b      	adds	r3, r3, r2
10014266:	425a      	negs	r2, r3
10014268:	4153      	adcs	r3, r2
1001426a:	602b      	str	r3, [r5, #0]
1001426c:	2380      	movs	r3, #128	; 0x80
1001426e:	00db      	lsls	r3, r3, #3
10014270:	2000      	movs	r0, #0
10014272:	6023      	str	r3, [r4, #0]
10014274:	b010      	add	sp, #64	; 0x40
10014276:	bd70      	pop	{r4, r5, r6, pc}
10014278:	ffffe000 	.word	0xffffe000

1001427c <__smakebuf_r>:
1001427c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001427e:	2602      	movs	r6, #2
10014280:	898b      	ldrh	r3, [r1, #12]
10014282:	0005      	movs	r5, r0
10014284:	000c      	movs	r4, r1
10014286:	4233      	tst	r3, r6
10014288:	d110      	bne.n	100142ac <__smakebuf_r+0x30>
1001428a:	ab01      	add	r3, sp, #4
1001428c:	466a      	mov	r2, sp
1001428e:	f7ff ffcf 	bl	10014230 <__swhatbuf_r>
10014292:	9900      	ldr	r1, [sp, #0]
10014294:	0007      	movs	r7, r0
10014296:	0028      	movs	r0, r5
10014298:	f7ff fb7c 	bl	10013994 <_malloc_r>
1001429c:	2800      	cmp	r0, #0
1001429e:	d10c      	bne.n	100142ba <__smakebuf_r+0x3e>
100142a0:	220c      	movs	r2, #12
100142a2:	5ea3      	ldrsh	r3, [r4, r2]
100142a4:	059a      	lsls	r2, r3, #22
100142a6:	d423      	bmi.n	100142f0 <__smakebuf_r+0x74>
100142a8:	4333      	orrs	r3, r6
100142aa:	81a3      	strh	r3, [r4, #12]
100142ac:	0023      	movs	r3, r4
100142ae:	3347      	adds	r3, #71	; 0x47
100142b0:	6023      	str	r3, [r4, #0]
100142b2:	6123      	str	r3, [r4, #16]
100142b4:	2301      	movs	r3, #1
100142b6:	6163      	str	r3, [r4, #20]
100142b8:	e01a      	b.n	100142f0 <__smakebuf_r+0x74>
100142ba:	2280      	movs	r2, #128	; 0x80
100142bc:	4b0d      	ldr	r3, [pc, #52]	; (100142f4 <__smakebuf_r+0x78>)
100142be:	62ab      	str	r3, [r5, #40]	; 0x28
100142c0:	89a3      	ldrh	r3, [r4, #12]
100142c2:	6020      	str	r0, [r4, #0]
100142c4:	4313      	orrs	r3, r2
100142c6:	81a3      	strh	r3, [r4, #12]
100142c8:	9b00      	ldr	r3, [sp, #0]
100142ca:	6120      	str	r0, [r4, #16]
100142cc:	6163      	str	r3, [r4, #20]
100142ce:	9b01      	ldr	r3, [sp, #4]
100142d0:	2b00      	cmp	r3, #0
100142d2:	d00a      	beq.n	100142ea <__smakebuf_r+0x6e>
100142d4:	230e      	movs	r3, #14
100142d6:	5ee1      	ldrsh	r1, [r4, r3]
100142d8:	0028      	movs	r0, r5
100142da:	f000 fb9b 	bl	10014a14 <_isatty_r>
100142de:	2800      	cmp	r0, #0
100142e0:	d003      	beq.n	100142ea <__smakebuf_r+0x6e>
100142e2:	2201      	movs	r2, #1
100142e4:	89a3      	ldrh	r3, [r4, #12]
100142e6:	4313      	orrs	r3, r2
100142e8:	81a3      	strh	r3, [r4, #12]
100142ea:	89a3      	ldrh	r3, [r4, #12]
100142ec:	431f      	orrs	r7, r3
100142ee:	81a7      	strh	r7, [r4, #12]
100142f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100142f2:	46c0      	nop			; (mov r8, r8)
100142f4:	10014085 	.word	0x10014085

100142f8 <__sfputc_r>:
100142f8:	6893      	ldr	r3, [r2, #8]
100142fa:	b510      	push	{r4, lr}
100142fc:	3b01      	subs	r3, #1
100142fe:	6093      	str	r3, [r2, #8]
10014300:	2b00      	cmp	r3, #0
10014302:	da05      	bge.n	10014310 <__sfputc_r+0x18>
10014304:	6994      	ldr	r4, [r2, #24]
10014306:	42a3      	cmp	r3, r4
10014308:	db08      	blt.n	1001431c <__sfputc_r+0x24>
1001430a:	b2cb      	uxtb	r3, r1
1001430c:	2b0a      	cmp	r3, #10
1001430e:	d005      	beq.n	1001431c <__sfputc_r+0x24>
10014310:	6813      	ldr	r3, [r2, #0]
10014312:	1c58      	adds	r0, r3, #1
10014314:	6010      	str	r0, [r2, #0]
10014316:	7019      	strb	r1, [r3, #0]
10014318:	b2c8      	uxtb	r0, r1
1001431a:	e001      	b.n	10014320 <__sfputc_r+0x28>
1001431c:	f7ff fd32 	bl	10013d84 <__swbuf_r>
10014320:	bd10      	pop	{r4, pc}

10014322 <__sfputs_r>:
10014322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014324:	0006      	movs	r6, r0
10014326:	000f      	movs	r7, r1
10014328:	0014      	movs	r4, r2
1001432a:	18d5      	adds	r5, r2, r3
1001432c:	42ac      	cmp	r4, r5
1001432e:	d008      	beq.n	10014342 <__sfputs_r+0x20>
10014330:	7821      	ldrb	r1, [r4, #0]
10014332:	003a      	movs	r2, r7
10014334:	0030      	movs	r0, r6
10014336:	f7ff ffdf 	bl	100142f8 <__sfputc_r>
1001433a:	3401      	adds	r4, #1
1001433c:	1c43      	adds	r3, r0, #1
1001433e:	d1f5      	bne.n	1001432c <__sfputs_r+0xa>
10014340:	e000      	b.n	10014344 <__sfputs_r+0x22>
10014342:	2000      	movs	r0, #0
10014344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10014348 <_vfiprintf_r>:
10014348:	b5f0      	push	{r4, r5, r6, r7, lr}
1001434a:	b09f      	sub	sp, #124	; 0x7c
1001434c:	0006      	movs	r6, r0
1001434e:	000f      	movs	r7, r1
10014350:	9202      	str	r2, [sp, #8]
10014352:	9305      	str	r3, [sp, #20]
10014354:	2800      	cmp	r0, #0
10014356:	d004      	beq.n	10014362 <_vfiprintf_r+0x1a>
10014358:	6983      	ldr	r3, [r0, #24]
1001435a:	2b00      	cmp	r3, #0
1001435c:	d101      	bne.n	10014362 <_vfiprintf_r+0x1a>
1001435e:	f7ff fed3 	bl	10014108 <__sinit>
10014362:	4b7f      	ldr	r3, [pc, #508]	; (10014560 <_vfiprintf_r+0x218>)
10014364:	429f      	cmp	r7, r3
10014366:	d101      	bne.n	1001436c <_vfiprintf_r+0x24>
10014368:	6877      	ldr	r7, [r6, #4]
1001436a:	e008      	b.n	1001437e <_vfiprintf_r+0x36>
1001436c:	4b7d      	ldr	r3, [pc, #500]	; (10014564 <_vfiprintf_r+0x21c>)
1001436e:	429f      	cmp	r7, r3
10014370:	d101      	bne.n	10014376 <_vfiprintf_r+0x2e>
10014372:	68b7      	ldr	r7, [r6, #8]
10014374:	e003      	b.n	1001437e <_vfiprintf_r+0x36>
10014376:	4b7c      	ldr	r3, [pc, #496]	; (10014568 <_vfiprintf_r+0x220>)
10014378:	429f      	cmp	r7, r3
1001437a:	d100      	bne.n	1001437e <_vfiprintf_r+0x36>
1001437c:	68f7      	ldr	r7, [r6, #12]
1001437e:	89bb      	ldrh	r3, [r7, #12]
10014380:	071b      	lsls	r3, r3, #28
10014382:	d50a      	bpl.n	1001439a <_vfiprintf_r+0x52>
10014384:	693b      	ldr	r3, [r7, #16]
10014386:	2b00      	cmp	r3, #0
10014388:	d007      	beq.n	1001439a <_vfiprintf_r+0x52>
1001438a:	2300      	movs	r3, #0
1001438c:	ad06      	add	r5, sp, #24
1001438e:	616b      	str	r3, [r5, #20]
10014390:	3320      	adds	r3, #32
10014392:	766b      	strb	r3, [r5, #25]
10014394:	3310      	adds	r3, #16
10014396:	76ab      	strb	r3, [r5, #26]
10014398:	e03d      	b.n	10014416 <_vfiprintf_r+0xce>
1001439a:	0039      	movs	r1, r7
1001439c:	0030      	movs	r0, r6
1001439e:	f7ff fd49 	bl	10013e34 <__swsetup_r>
100143a2:	2800      	cmp	r0, #0
100143a4:	d0f1      	beq.n	1001438a <_vfiprintf_r+0x42>
100143a6:	2001      	movs	r0, #1
100143a8:	4240      	negs	r0, r0
100143aa:	e0d6      	b.n	1001455a <_vfiprintf_r+0x212>
100143ac:	9a05      	ldr	r2, [sp, #20]
100143ae:	1d11      	adds	r1, r2, #4
100143b0:	6812      	ldr	r2, [r2, #0]
100143b2:	9105      	str	r1, [sp, #20]
100143b4:	2a00      	cmp	r2, #0
100143b6:	da00      	bge.n	100143ba <_vfiprintf_r+0x72>
100143b8:	e07f      	b.n	100144ba <_vfiprintf_r+0x172>
100143ba:	9209      	str	r2, [sp, #36]	; 0x24
100143bc:	3401      	adds	r4, #1
100143be:	7823      	ldrb	r3, [r4, #0]
100143c0:	2b2e      	cmp	r3, #46	; 0x2e
100143c2:	d100      	bne.n	100143c6 <_vfiprintf_r+0x7e>
100143c4:	e08d      	b.n	100144e2 <_vfiprintf_r+0x19a>
100143c6:	7821      	ldrb	r1, [r4, #0]
100143c8:	2203      	movs	r2, #3
100143ca:	4868      	ldr	r0, [pc, #416]	; (1001456c <_vfiprintf_r+0x224>)
100143cc:	f000 fb48 	bl	10014a60 <memchr>
100143d0:	2800      	cmp	r0, #0
100143d2:	d007      	beq.n	100143e4 <_vfiprintf_r+0x9c>
100143d4:	4b65      	ldr	r3, [pc, #404]	; (1001456c <_vfiprintf_r+0x224>)
100143d6:	682a      	ldr	r2, [r5, #0]
100143d8:	1ac0      	subs	r0, r0, r3
100143da:	2340      	movs	r3, #64	; 0x40
100143dc:	4083      	lsls	r3, r0
100143de:	4313      	orrs	r3, r2
100143e0:	602b      	str	r3, [r5, #0]
100143e2:	3401      	adds	r4, #1
100143e4:	7821      	ldrb	r1, [r4, #0]
100143e6:	1c63      	adds	r3, r4, #1
100143e8:	2206      	movs	r2, #6
100143ea:	4861      	ldr	r0, [pc, #388]	; (10014570 <_vfiprintf_r+0x228>)
100143ec:	9302      	str	r3, [sp, #8]
100143ee:	7629      	strb	r1, [r5, #24]
100143f0:	f000 fb36 	bl	10014a60 <memchr>
100143f4:	2800      	cmp	r0, #0
100143f6:	d100      	bne.n	100143fa <_vfiprintf_r+0xb2>
100143f8:	e09d      	b.n	10014536 <_vfiprintf_r+0x1ee>
100143fa:	4b5e      	ldr	r3, [pc, #376]	; (10014574 <_vfiprintf_r+0x22c>)
100143fc:	2b00      	cmp	r3, #0
100143fe:	d000      	beq.n	10014402 <_vfiprintf_r+0xba>
10014400:	e090      	b.n	10014524 <_vfiprintf_r+0x1dc>
10014402:	2207      	movs	r2, #7
10014404:	9b05      	ldr	r3, [sp, #20]
10014406:	3307      	adds	r3, #7
10014408:	4393      	bics	r3, r2
1001440a:	3308      	adds	r3, #8
1001440c:	9305      	str	r3, [sp, #20]
1001440e:	696b      	ldr	r3, [r5, #20]
10014410:	9a03      	ldr	r2, [sp, #12]
10014412:	189b      	adds	r3, r3, r2
10014414:	616b      	str	r3, [r5, #20]
10014416:	9c02      	ldr	r4, [sp, #8]
10014418:	7823      	ldrb	r3, [r4, #0]
1001441a:	2b00      	cmp	r3, #0
1001441c:	d104      	bne.n	10014428 <_vfiprintf_r+0xe0>
1001441e:	9b02      	ldr	r3, [sp, #8]
10014420:	1ae3      	subs	r3, r4, r3
10014422:	9304      	str	r3, [sp, #16]
10014424:	d012      	beq.n	1001444c <_vfiprintf_r+0x104>
10014426:	e003      	b.n	10014430 <_vfiprintf_r+0xe8>
10014428:	2b25      	cmp	r3, #37	; 0x25
1001442a:	d0f8      	beq.n	1001441e <_vfiprintf_r+0xd6>
1001442c:	3401      	adds	r4, #1
1001442e:	e7f3      	b.n	10014418 <_vfiprintf_r+0xd0>
10014430:	9b04      	ldr	r3, [sp, #16]
10014432:	9a02      	ldr	r2, [sp, #8]
10014434:	0039      	movs	r1, r7
10014436:	0030      	movs	r0, r6
10014438:	f7ff ff73 	bl	10014322 <__sfputs_r>
1001443c:	1c43      	adds	r3, r0, #1
1001443e:	d100      	bne.n	10014442 <_vfiprintf_r+0xfa>
10014440:	e086      	b.n	10014550 <_vfiprintf_r+0x208>
10014442:	696a      	ldr	r2, [r5, #20]
10014444:	9b04      	ldr	r3, [sp, #16]
10014446:	4694      	mov	ip, r2
10014448:	4463      	add	r3, ip
1001444a:	616b      	str	r3, [r5, #20]
1001444c:	7823      	ldrb	r3, [r4, #0]
1001444e:	2b00      	cmp	r3, #0
10014450:	d07e      	beq.n	10014550 <_vfiprintf_r+0x208>
10014452:	2201      	movs	r2, #1
10014454:	2300      	movs	r3, #0
10014456:	4252      	negs	r2, r2
10014458:	606a      	str	r2, [r5, #4]
1001445a:	a902      	add	r1, sp, #8
1001445c:	3254      	adds	r2, #84	; 0x54
1001445e:	1852      	adds	r2, r2, r1
10014460:	3401      	adds	r4, #1
10014462:	602b      	str	r3, [r5, #0]
10014464:	60eb      	str	r3, [r5, #12]
10014466:	60ab      	str	r3, [r5, #8]
10014468:	7013      	strb	r3, [r2, #0]
1001446a:	65ab      	str	r3, [r5, #88]	; 0x58
1001446c:	7821      	ldrb	r1, [r4, #0]
1001446e:	2205      	movs	r2, #5
10014470:	4841      	ldr	r0, [pc, #260]	; (10014578 <_vfiprintf_r+0x230>)
10014472:	f000 faf5 	bl	10014a60 <memchr>
10014476:	2800      	cmp	r0, #0
10014478:	d008      	beq.n	1001448c <_vfiprintf_r+0x144>
1001447a:	4b3f      	ldr	r3, [pc, #252]	; (10014578 <_vfiprintf_r+0x230>)
1001447c:	682a      	ldr	r2, [r5, #0]
1001447e:	1ac0      	subs	r0, r0, r3
10014480:	2301      	movs	r3, #1
10014482:	4083      	lsls	r3, r0
10014484:	4313      	orrs	r3, r2
10014486:	602b      	str	r3, [r5, #0]
10014488:	3401      	adds	r4, #1
1001448a:	e7ef      	b.n	1001446c <_vfiprintf_r+0x124>
1001448c:	682b      	ldr	r3, [r5, #0]
1001448e:	06da      	lsls	r2, r3, #27
10014490:	d504      	bpl.n	1001449c <_vfiprintf_r+0x154>
10014492:	2253      	movs	r2, #83	; 0x53
10014494:	2120      	movs	r1, #32
10014496:	a802      	add	r0, sp, #8
10014498:	1812      	adds	r2, r2, r0
1001449a:	7011      	strb	r1, [r2, #0]
1001449c:	071a      	lsls	r2, r3, #28
1001449e:	d504      	bpl.n	100144aa <_vfiprintf_r+0x162>
100144a0:	2253      	movs	r2, #83	; 0x53
100144a2:	212b      	movs	r1, #43	; 0x2b
100144a4:	a802      	add	r0, sp, #8
100144a6:	1812      	adds	r2, r2, r0
100144a8:	7011      	strb	r1, [r2, #0]
100144aa:	7822      	ldrb	r2, [r4, #0]
100144ac:	2a2a      	cmp	r2, #42	; 0x2a
100144ae:	d100      	bne.n	100144b2 <_vfiprintf_r+0x16a>
100144b0:	e77c      	b.n	100143ac <_vfiprintf_r+0x64>
100144b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100144b4:	2000      	movs	r0, #0
100144b6:	210a      	movs	r1, #10
100144b8:	e005      	b.n	100144c6 <_vfiprintf_r+0x17e>
100144ba:	4252      	negs	r2, r2
100144bc:	60ea      	str	r2, [r5, #12]
100144be:	2202      	movs	r2, #2
100144c0:	4313      	orrs	r3, r2
100144c2:	602b      	str	r3, [r5, #0]
100144c4:	e77a      	b.n	100143bc <_vfiprintf_r+0x74>
100144c6:	7822      	ldrb	r2, [r4, #0]
100144c8:	3a30      	subs	r2, #48	; 0x30
100144ca:	2a09      	cmp	r2, #9
100144cc:	d804      	bhi.n	100144d8 <_vfiprintf_r+0x190>
100144ce:	434b      	muls	r3, r1
100144d0:	3401      	adds	r4, #1
100144d2:	189b      	adds	r3, r3, r2
100144d4:	2001      	movs	r0, #1
100144d6:	e7f6      	b.n	100144c6 <_vfiprintf_r+0x17e>
100144d8:	2800      	cmp	r0, #0
100144da:	d100      	bne.n	100144de <_vfiprintf_r+0x196>
100144dc:	e76f      	b.n	100143be <_vfiprintf_r+0x76>
100144de:	9309      	str	r3, [sp, #36]	; 0x24
100144e0:	e76d      	b.n	100143be <_vfiprintf_r+0x76>
100144e2:	7863      	ldrb	r3, [r4, #1]
100144e4:	2b2a      	cmp	r3, #42	; 0x2a
100144e6:	d10a      	bne.n	100144fe <_vfiprintf_r+0x1b6>
100144e8:	9b05      	ldr	r3, [sp, #20]
100144ea:	3402      	adds	r4, #2
100144ec:	1d1a      	adds	r2, r3, #4
100144ee:	681b      	ldr	r3, [r3, #0]
100144f0:	9205      	str	r2, [sp, #20]
100144f2:	2b00      	cmp	r3, #0
100144f4:	da01      	bge.n	100144fa <_vfiprintf_r+0x1b2>
100144f6:	2301      	movs	r3, #1
100144f8:	425b      	negs	r3, r3
100144fa:	9307      	str	r3, [sp, #28]
100144fc:	e763      	b.n	100143c6 <_vfiprintf_r+0x7e>
100144fe:	2300      	movs	r3, #0
10014500:	200a      	movs	r0, #10
10014502:	001a      	movs	r2, r3
10014504:	3401      	adds	r4, #1
10014506:	606b      	str	r3, [r5, #4]
10014508:	7821      	ldrb	r1, [r4, #0]
1001450a:	3930      	subs	r1, #48	; 0x30
1001450c:	2909      	cmp	r1, #9
1001450e:	d804      	bhi.n	1001451a <_vfiprintf_r+0x1d2>
10014510:	4342      	muls	r2, r0
10014512:	3401      	adds	r4, #1
10014514:	1852      	adds	r2, r2, r1
10014516:	2301      	movs	r3, #1
10014518:	e7f6      	b.n	10014508 <_vfiprintf_r+0x1c0>
1001451a:	2b00      	cmp	r3, #0
1001451c:	d100      	bne.n	10014520 <_vfiprintf_r+0x1d8>
1001451e:	e752      	b.n	100143c6 <_vfiprintf_r+0x7e>
10014520:	9207      	str	r2, [sp, #28]
10014522:	e750      	b.n	100143c6 <_vfiprintf_r+0x7e>
10014524:	ab05      	add	r3, sp, #20
10014526:	9300      	str	r3, [sp, #0]
10014528:	003a      	movs	r2, r7
1001452a:	4b14      	ldr	r3, [pc, #80]	; (1001457c <_vfiprintf_r+0x234>)
1001452c:	0029      	movs	r1, r5
1001452e:	0030      	movs	r0, r6
10014530:	e000      	b.n	10014534 <_vfiprintf_r+0x1ec>
10014532:	bf00      	nop
10014534:	e007      	b.n	10014546 <_vfiprintf_r+0x1fe>
10014536:	ab05      	add	r3, sp, #20
10014538:	9300      	str	r3, [sp, #0]
1001453a:	003a      	movs	r2, r7
1001453c:	4b0f      	ldr	r3, [pc, #60]	; (1001457c <_vfiprintf_r+0x234>)
1001453e:	0029      	movs	r1, r5
10014540:	0030      	movs	r0, r6
10014542:	f000 f88b 	bl	1001465c <_printf_i>
10014546:	9003      	str	r0, [sp, #12]
10014548:	9b03      	ldr	r3, [sp, #12]
1001454a:	3301      	adds	r3, #1
1001454c:	d000      	beq.n	10014550 <_vfiprintf_r+0x208>
1001454e:	e75e      	b.n	1001440e <_vfiprintf_r+0xc6>
10014550:	89bb      	ldrh	r3, [r7, #12]
10014552:	065b      	lsls	r3, r3, #25
10014554:	d500      	bpl.n	10014558 <_vfiprintf_r+0x210>
10014556:	e726      	b.n	100143a6 <_vfiprintf_r+0x5e>
10014558:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001455a:	b01f      	add	sp, #124	; 0x7c
1001455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001455e:	46c0      	nop			; (mov r8, r8)
10014560:	100167f0 	.word	0x100167f0
10014564:	10016810 	.word	0x10016810
10014568:	10016830 	.word	0x10016830
1001456c:	10016856 	.word	0x10016856
10014570:	1001685a 	.word	0x1001685a
10014574:	00000000 	.word	0x00000000
10014578:	10016850 	.word	0x10016850
1001457c:	10014323 	.word	0x10014323

10014580 <_printf_common>:
10014580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014582:	0017      	movs	r7, r2
10014584:	9301      	str	r3, [sp, #4]
10014586:	688a      	ldr	r2, [r1, #8]
10014588:	690b      	ldr	r3, [r1, #16]
1001458a:	9000      	str	r0, [sp, #0]
1001458c:	000c      	movs	r4, r1
1001458e:	4293      	cmp	r3, r2
10014590:	da00      	bge.n	10014594 <_printf_common+0x14>
10014592:	0013      	movs	r3, r2
10014594:	0022      	movs	r2, r4
10014596:	603b      	str	r3, [r7, #0]
10014598:	3243      	adds	r2, #67	; 0x43
1001459a:	7812      	ldrb	r2, [r2, #0]
1001459c:	2a00      	cmp	r2, #0
1001459e:	d001      	beq.n	100145a4 <_printf_common+0x24>
100145a0:	3301      	adds	r3, #1
100145a2:	603b      	str	r3, [r7, #0]
100145a4:	6823      	ldr	r3, [r4, #0]
100145a6:	069b      	lsls	r3, r3, #26
100145a8:	d502      	bpl.n	100145b0 <_printf_common+0x30>
100145aa:	683b      	ldr	r3, [r7, #0]
100145ac:	3302      	adds	r3, #2
100145ae:	603b      	str	r3, [r7, #0]
100145b0:	2506      	movs	r5, #6
100145b2:	6823      	ldr	r3, [r4, #0]
100145b4:	401d      	ands	r5, r3
100145b6:	d01e      	beq.n	100145f6 <_printf_common+0x76>
100145b8:	0023      	movs	r3, r4
100145ba:	3343      	adds	r3, #67	; 0x43
100145bc:	781b      	ldrb	r3, [r3, #0]
100145be:	1e5a      	subs	r2, r3, #1
100145c0:	4193      	sbcs	r3, r2
100145c2:	6822      	ldr	r2, [r4, #0]
100145c4:	0692      	lsls	r2, r2, #26
100145c6:	d51c      	bpl.n	10014602 <_printf_common+0x82>
100145c8:	2030      	movs	r0, #48	; 0x30
100145ca:	18e1      	adds	r1, r4, r3
100145cc:	3143      	adds	r1, #67	; 0x43
100145ce:	7008      	strb	r0, [r1, #0]
100145d0:	0021      	movs	r1, r4
100145d2:	1c5a      	adds	r2, r3, #1
100145d4:	3145      	adds	r1, #69	; 0x45
100145d6:	7809      	ldrb	r1, [r1, #0]
100145d8:	18a2      	adds	r2, r4, r2
100145da:	3243      	adds	r2, #67	; 0x43
100145dc:	3302      	adds	r3, #2
100145de:	7011      	strb	r1, [r2, #0]
100145e0:	e00f      	b.n	10014602 <_printf_common+0x82>
100145e2:	0022      	movs	r2, r4
100145e4:	2301      	movs	r3, #1
100145e6:	3219      	adds	r2, #25
100145e8:	9901      	ldr	r1, [sp, #4]
100145ea:	9800      	ldr	r0, [sp, #0]
100145ec:	9e08      	ldr	r6, [sp, #32]
100145ee:	47b0      	blx	r6
100145f0:	1c43      	adds	r3, r0, #1
100145f2:	d00e      	beq.n	10014612 <_printf_common+0x92>
100145f4:	3501      	adds	r5, #1
100145f6:	68e3      	ldr	r3, [r4, #12]
100145f8:	683a      	ldr	r2, [r7, #0]
100145fa:	1a9b      	subs	r3, r3, r2
100145fc:	429d      	cmp	r5, r3
100145fe:	dbf0      	blt.n	100145e2 <_printf_common+0x62>
10014600:	e7da      	b.n	100145b8 <_printf_common+0x38>
10014602:	0022      	movs	r2, r4
10014604:	9901      	ldr	r1, [sp, #4]
10014606:	3243      	adds	r2, #67	; 0x43
10014608:	9800      	ldr	r0, [sp, #0]
1001460a:	9d08      	ldr	r5, [sp, #32]
1001460c:	47a8      	blx	r5
1001460e:	1c43      	adds	r3, r0, #1
10014610:	d102      	bne.n	10014618 <_printf_common+0x98>
10014612:	2001      	movs	r0, #1
10014614:	4240      	negs	r0, r0
10014616:	e020      	b.n	1001465a <_printf_common+0xda>
10014618:	2306      	movs	r3, #6
1001461a:	6820      	ldr	r0, [r4, #0]
1001461c:	68e1      	ldr	r1, [r4, #12]
1001461e:	683a      	ldr	r2, [r7, #0]
10014620:	4003      	ands	r3, r0
10014622:	2500      	movs	r5, #0
10014624:	2b04      	cmp	r3, #4
10014626:	d103      	bne.n	10014630 <_printf_common+0xb0>
10014628:	1a8d      	subs	r5, r1, r2
1001462a:	43eb      	mvns	r3, r5
1001462c:	17db      	asrs	r3, r3, #31
1001462e:	401d      	ands	r5, r3
10014630:	68a3      	ldr	r3, [r4, #8]
10014632:	6922      	ldr	r2, [r4, #16]
10014634:	4293      	cmp	r3, r2
10014636:	dd01      	ble.n	1001463c <_printf_common+0xbc>
10014638:	1a9b      	subs	r3, r3, r2
1001463a:	18ed      	adds	r5, r5, r3
1001463c:	2700      	movs	r7, #0
1001463e:	42bd      	cmp	r5, r7
10014640:	d00a      	beq.n	10014658 <_printf_common+0xd8>
10014642:	0022      	movs	r2, r4
10014644:	2301      	movs	r3, #1
10014646:	321a      	adds	r2, #26
10014648:	9901      	ldr	r1, [sp, #4]
1001464a:	9800      	ldr	r0, [sp, #0]
1001464c:	9e08      	ldr	r6, [sp, #32]
1001464e:	47b0      	blx	r6
10014650:	1c43      	adds	r3, r0, #1
10014652:	d0de      	beq.n	10014612 <_printf_common+0x92>
10014654:	3701      	adds	r7, #1
10014656:	e7f2      	b.n	1001463e <_printf_common+0xbe>
10014658:	2000      	movs	r0, #0
1001465a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001465c <_printf_i>:
1001465c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001465e:	b08b      	sub	sp, #44	; 0x2c
10014660:	9206      	str	r2, [sp, #24]
10014662:	000a      	movs	r2, r1
10014664:	3243      	adds	r2, #67	; 0x43
10014666:	9307      	str	r3, [sp, #28]
10014668:	9005      	str	r0, [sp, #20]
1001466a:	9204      	str	r2, [sp, #16]
1001466c:	7e0a      	ldrb	r2, [r1, #24]
1001466e:	000c      	movs	r4, r1
10014670:	9b10      	ldr	r3, [sp, #64]	; 0x40
10014672:	2a6e      	cmp	r2, #110	; 0x6e
10014674:	d100      	bne.n	10014678 <_printf_i+0x1c>
10014676:	e0ab      	b.n	100147d0 <_printf_i+0x174>
10014678:	d811      	bhi.n	1001469e <_printf_i+0x42>
1001467a:	2a63      	cmp	r2, #99	; 0x63
1001467c:	d022      	beq.n	100146c4 <_printf_i+0x68>
1001467e:	d809      	bhi.n	10014694 <_printf_i+0x38>
10014680:	2a00      	cmp	r2, #0
10014682:	d100      	bne.n	10014686 <_printf_i+0x2a>
10014684:	e0b5      	b.n	100147f2 <_printf_i+0x196>
10014686:	2a58      	cmp	r2, #88	; 0x58
10014688:	d000      	beq.n	1001468c <_printf_i+0x30>
1001468a:	e0c5      	b.n	10014818 <_printf_i+0x1bc>
1001468c:	3145      	adds	r1, #69	; 0x45
1001468e:	700a      	strb	r2, [r1, #0]
10014690:	4a81      	ldr	r2, [pc, #516]	; (10014898 <_printf_i+0x23c>)
10014692:	e04f      	b.n	10014734 <_printf_i+0xd8>
10014694:	2a64      	cmp	r2, #100	; 0x64
10014696:	d01d      	beq.n	100146d4 <_printf_i+0x78>
10014698:	2a69      	cmp	r2, #105	; 0x69
1001469a:	d01b      	beq.n	100146d4 <_printf_i+0x78>
1001469c:	e0bc      	b.n	10014818 <_printf_i+0x1bc>
1001469e:	2a73      	cmp	r2, #115	; 0x73
100146a0:	d100      	bne.n	100146a4 <_printf_i+0x48>
100146a2:	e0aa      	b.n	100147fa <_printf_i+0x19e>
100146a4:	d809      	bhi.n	100146ba <_printf_i+0x5e>
100146a6:	2a6f      	cmp	r2, #111	; 0x6f
100146a8:	d029      	beq.n	100146fe <_printf_i+0xa2>
100146aa:	2a70      	cmp	r2, #112	; 0x70
100146ac:	d000      	beq.n	100146b0 <_printf_i+0x54>
100146ae:	e0b3      	b.n	10014818 <_printf_i+0x1bc>
100146b0:	2220      	movs	r2, #32
100146b2:	6809      	ldr	r1, [r1, #0]
100146b4:	430a      	orrs	r2, r1
100146b6:	6022      	str	r2, [r4, #0]
100146b8:	e037      	b.n	1001472a <_printf_i+0xce>
100146ba:	2a75      	cmp	r2, #117	; 0x75
100146bc:	d01f      	beq.n	100146fe <_printf_i+0xa2>
100146be:	2a78      	cmp	r2, #120	; 0x78
100146c0:	d033      	beq.n	1001472a <_printf_i+0xce>
100146c2:	e0a9      	b.n	10014818 <_printf_i+0x1bc>
100146c4:	000e      	movs	r6, r1
100146c6:	681a      	ldr	r2, [r3, #0]
100146c8:	3642      	adds	r6, #66	; 0x42
100146ca:	1d11      	adds	r1, r2, #4
100146cc:	6019      	str	r1, [r3, #0]
100146ce:	6813      	ldr	r3, [r2, #0]
100146d0:	7033      	strb	r3, [r6, #0]
100146d2:	e0a4      	b.n	1001481e <_printf_i+0x1c2>
100146d4:	6821      	ldr	r1, [r4, #0]
100146d6:	681a      	ldr	r2, [r3, #0]
100146d8:	0608      	lsls	r0, r1, #24
100146da:	d406      	bmi.n	100146ea <_printf_i+0x8e>
100146dc:	0649      	lsls	r1, r1, #25
100146de:	d504      	bpl.n	100146ea <_printf_i+0x8e>
100146e0:	1d11      	adds	r1, r2, #4
100146e2:	6019      	str	r1, [r3, #0]
100146e4:	2300      	movs	r3, #0
100146e6:	5ed5      	ldrsh	r5, [r2, r3]
100146e8:	e002      	b.n	100146f0 <_printf_i+0x94>
100146ea:	1d11      	adds	r1, r2, #4
100146ec:	6019      	str	r1, [r3, #0]
100146ee:	6815      	ldr	r5, [r2, #0]
100146f0:	2d00      	cmp	r5, #0
100146f2:	da3b      	bge.n	1001476c <_printf_i+0x110>
100146f4:	232d      	movs	r3, #45	; 0x2d
100146f6:	9a04      	ldr	r2, [sp, #16]
100146f8:	426d      	negs	r5, r5
100146fa:	7013      	strb	r3, [r2, #0]
100146fc:	e036      	b.n	1001476c <_printf_i+0x110>
100146fe:	6821      	ldr	r1, [r4, #0]
10014700:	681a      	ldr	r2, [r3, #0]
10014702:	0608      	lsls	r0, r1, #24
10014704:	d406      	bmi.n	10014714 <_printf_i+0xb8>
10014706:	0649      	lsls	r1, r1, #25
10014708:	d504      	bpl.n	10014714 <_printf_i+0xb8>
1001470a:	6815      	ldr	r5, [r2, #0]
1001470c:	1d11      	adds	r1, r2, #4
1001470e:	6019      	str	r1, [r3, #0]
10014710:	b2ad      	uxth	r5, r5
10014712:	e002      	b.n	1001471a <_printf_i+0xbe>
10014714:	1d11      	adds	r1, r2, #4
10014716:	6019      	str	r1, [r3, #0]
10014718:	6815      	ldr	r5, [r2, #0]
1001471a:	4b5f      	ldr	r3, [pc, #380]	; (10014898 <_printf_i+0x23c>)
1001471c:	7e22      	ldrb	r2, [r4, #24]
1001471e:	9303      	str	r3, [sp, #12]
10014720:	2708      	movs	r7, #8
10014722:	2a6f      	cmp	r2, #111	; 0x6f
10014724:	d01d      	beq.n	10014762 <_printf_i+0x106>
10014726:	270a      	movs	r7, #10
10014728:	e01b      	b.n	10014762 <_printf_i+0x106>
1001472a:	0022      	movs	r2, r4
1001472c:	2178      	movs	r1, #120	; 0x78
1001472e:	3245      	adds	r2, #69	; 0x45
10014730:	7011      	strb	r1, [r2, #0]
10014732:	4a5a      	ldr	r2, [pc, #360]	; (1001489c <_printf_i+0x240>)
10014734:	6819      	ldr	r1, [r3, #0]
10014736:	9203      	str	r2, [sp, #12]
10014738:	1d08      	adds	r0, r1, #4
1001473a:	6822      	ldr	r2, [r4, #0]
1001473c:	6018      	str	r0, [r3, #0]
1001473e:	680d      	ldr	r5, [r1, #0]
10014740:	0610      	lsls	r0, r2, #24
10014742:	d402      	bmi.n	1001474a <_printf_i+0xee>
10014744:	0650      	lsls	r0, r2, #25
10014746:	d500      	bpl.n	1001474a <_printf_i+0xee>
10014748:	b2ad      	uxth	r5, r5
1001474a:	07d3      	lsls	r3, r2, #31
1001474c:	d502      	bpl.n	10014754 <_printf_i+0xf8>
1001474e:	2320      	movs	r3, #32
10014750:	431a      	orrs	r2, r3
10014752:	6022      	str	r2, [r4, #0]
10014754:	2710      	movs	r7, #16
10014756:	2d00      	cmp	r5, #0
10014758:	d103      	bne.n	10014762 <_printf_i+0x106>
1001475a:	2320      	movs	r3, #32
1001475c:	6822      	ldr	r2, [r4, #0]
1001475e:	439a      	bics	r2, r3
10014760:	6022      	str	r2, [r4, #0]
10014762:	0023      	movs	r3, r4
10014764:	2200      	movs	r2, #0
10014766:	3343      	adds	r3, #67	; 0x43
10014768:	701a      	strb	r2, [r3, #0]
1001476a:	e002      	b.n	10014772 <_printf_i+0x116>
1001476c:	270a      	movs	r7, #10
1001476e:	4b4a      	ldr	r3, [pc, #296]	; (10014898 <_printf_i+0x23c>)
10014770:	9303      	str	r3, [sp, #12]
10014772:	6863      	ldr	r3, [r4, #4]
10014774:	60a3      	str	r3, [r4, #8]
10014776:	2b00      	cmp	r3, #0
10014778:	db09      	blt.n	1001478e <_printf_i+0x132>
1001477a:	2204      	movs	r2, #4
1001477c:	6821      	ldr	r1, [r4, #0]
1001477e:	4391      	bics	r1, r2
10014780:	6021      	str	r1, [r4, #0]
10014782:	2d00      	cmp	r5, #0
10014784:	d105      	bne.n	10014792 <_printf_i+0x136>
10014786:	9e04      	ldr	r6, [sp, #16]
10014788:	2b00      	cmp	r3, #0
1001478a:	d011      	beq.n	100147b0 <_printf_i+0x154>
1001478c:	e07b      	b.n	10014886 <_printf_i+0x22a>
1001478e:	2d00      	cmp	r5, #0
10014790:	d079      	beq.n	10014886 <_printf_i+0x22a>
10014792:	9e04      	ldr	r6, [sp, #16]
10014794:	0028      	movs	r0, r5
10014796:	0039      	movs	r1, r7
10014798:	f7fd fa70 	bl	10011c7c <__aeabi_uidivmod>
1001479c:	9b03      	ldr	r3, [sp, #12]
1001479e:	3e01      	subs	r6, #1
100147a0:	5c5b      	ldrb	r3, [r3, r1]
100147a2:	0028      	movs	r0, r5
100147a4:	7033      	strb	r3, [r6, #0]
100147a6:	0039      	movs	r1, r7
100147a8:	f7fd f9e2 	bl	10011b70 <__aeabi_uidiv>
100147ac:	1e05      	subs	r5, r0, #0
100147ae:	d1f1      	bne.n	10014794 <_printf_i+0x138>
100147b0:	2f08      	cmp	r7, #8
100147b2:	d109      	bne.n	100147c8 <_printf_i+0x16c>
100147b4:	6823      	ldr	r3, [r4, #0]
100147b6:	07db      	lsls	r3, r3, #31
100147b8:	d506      	bpl.n	100147c8 <_printf_i+0x16c>
100147ba:	6863      	ldr	r3, [r4, #4]
100147bc:	6922      	ldr	r2, [r4, #16]
100147be:	4293      	cmp	r3, r2
100147c0:	dc02      	bgt.n	100147c8 <_printf_i+0x16c>
100147c2:	2330      	movs	r3, #48	; 0x30
100147c4:	3e01      	subs	r6, #1
100147c6:	7033      	strb	r3, [r6, #0]
100147c8:	9b04      	ldr	r3, [sp, #16]
100147ca:	1b9b      	subs	r3, r3, r6
100147cc:	6123      	str	r3, [r4, #16]
100147ce:	e02b      	b.n	10014828 <_printf_i+0x1cc>
100147d0:	6809      	ldr	r1, [r1, #0]
100147d2:	681a      	ldr	r2, [r3, #0]
100147d4:	0608      	lsls	r0, r1, #24
100147d6:	d407      	bmi.n	100147e8 <_printf_i+0x18c>
100147d8:	0649      	lsls	r1, r1, #25
100147da:	d505      	bpl.n	100147e8 <_printf_i+0x18c>
100147dc:	1d11      	adds	r1, r2, #4
100147de:	6019      	str	r1, [r3, #0]
100147e0:	6813      	ldr	r3, [r2, #0]
100147e2:	8aa2      	ldrh	r2, [r4, #20]
100147e4:	801a      	strh	r2, [r3, #0]
100147e6:	e004      	b.n	100147f2 <_printf_i+0x196>
100147e8:	1d11      	adds	r1, r2, #4
100147ea:	6019      	str	r1, [r3, #0]
100147ec:	6813      	ldr	r3, [r2, #0]
100147ee:	6962      	ldr	r2, [r4, #20]
100147f0:	601a      	str	r2, [r3, #0]
100147f2:	2300      	movs	r3, #0
100147f4:	9e04      	ldr	r6, [sp, #16]
100147f6:	6123      	str	r3, [r4, #16]
100147f8:	e016      	b.n	10014828 <_printf_i+0x1cc>
100147fa:	681a      	ldr	r2, [r3, #0]
100147fc:	1d11      	adds	r1, r2, #4
100147fe:	6019      	str	r1, [r3, #0]
10014800:	6816      	ldr	r6, [r2, #0]
10014802:	2100      	movs	r1, #0
10014804:	6862      	ldr	r2, [r4, #4]
10014806:	0030      	movs	r0, r6
10014808:	f000 f92a 	bl	10014a60 <memchr>
1001480c:	2800      	cmp	r0, #0
1001480e:	d001      	beq.n	10014814 <_printf_i+0x1b8>
10014810:	1b80      	subs	r0, r0, r6
10014812:	6060      	str	r0, [r4, #4]
10014814:	6863      	ldr	r3, [r4, #4]
10014816:	e003      	b.n	10014820 <_printf_i+0x1c4>
10014818:	0026      	movs	r6, r4
1001481a:	3642      	adds	r6, #66	; 0x42
1001481c:	7032      	strb	r2, [r6, #0]
1001481e:	2301      	movs	r3, #1
10014820:	6123      	str	r3, [r4, #16]
10014822:	2300      	movs	r3, #0
10014824:	9a04      	ldr	r2, [sp, #16]
10014826:	7013      	strb	r3, [r2, #0]
10014828:	9b07      	ldr	r3, [sp, #28]
1001482a:	aa09      	add	r2, sp, #36	; 0x24
1001482c:	9300      	str	r3, [sp, #0]
1001482e:	0021      	movs	r1, r4
10014830:	9b06      	ldr	r3, [sp, #24]
10014832:	9805      	ldr	r0, [sp, #20]
10014834:	f7ff fea4 	bl	10014580 <_printf_common>
10014838:	1c43      	adds	r3, r0, #1
1001483a:	d102      	bne.n	10014842 <_printf_i+0x1e6>
1001483c:	2001      	movs	r0, #1
1001483e:	4240      	negs	r0, r0
10014840:	e027      	b.n	10014892 <_printf_i+0x236>
10014842:	6923      	ldr	r3, [r4, #16]
10014844:	0032      	movs	r2, r6
10014846:	9906      	ldr	r1, [sp, #24]
10014848:	9805      	ldr	r0, [sp, #20]
1001484a:	9d07      	ldr	r5, [sp, #28]
1001484c:	47a8      	blx	r5
1001484e:	1c43      	adds	r3, r0, #1
10014850:	d0f4      	beq.n	1001483c <_printf_i+0x1e0>
10014852:	6823      	ldr	r3, [r4, #0]
10014854:	2500      	movs	r5, #0
10014856:	079b      	lsls	r3, r3, #30
10014858:	d40f      	bmi.n	1001487a <_printf_i+0x21e>
1001485a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001485c:	68e0      	ldr	r0, [r4, #12]
1001485e:	4298      	cmp	r0, r3
10014860:	da17      	bge.n	10014892 <_printf_i+0x236>
10014862:	0018      	movs	r0, r3
10014864:	e015      	b.n	10014892 <_printf_i+0x236>
10014866:	0022      	movs	r2, r4
10014868:	2301      	movs	r3, #1
1001486a:	3219      	adds	r2, #25
1001486c:	9906      	ldr	r1, [sp, #24]
1001486e:	9805      	ldr	r0, [sp, #20]
10014870:	9e07      	ldr	r6, [sp, #28]
10014872:	47b0      	blx	r6
10014874:	1c43      	adds	r3, r0, #1
10014876:	d0e1      	beq.n	1001483c <_printf_i+0x1e0>
10014878:	3501      	adds	r5, #1
1001487a:	68e3      	ldr	r3, [r4, #12]
1001487c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001487e:	1a9b      	subs	r3, r3, r2
10014880:	429d      	cmp	r5, r3
10014882:	dbf0      	blt.n	10014866 <_printf_i+0x20a>
10014884:	e7e9      	b.n	1001485a <_printf_i+0x1fe>
10014886:	0026      	movs	r6, r4
10014888:	9b03      	ldr	r3, [sp, #12]
1001488a:	3642      	adds	r6, #66	; 0x42
1001488c:	781b      	ldrb	r3, [r3, #0]
1001488e:	7033      	strb	r3, [r6, #0]
10014890:	e78e      	b.n	100147b0 <_printf_i+0x154>
10014892:	b00b      	add	sp, #44	; 0x2c
10014894:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014896:	46c0      	nop			; (mov r8, r8)
10014898:	10016861 	.word	0x10016861
1001489c:	10016872 	.word	0x10016872

100148a0 <_putc_r>:
100148a0:	b570      	push	{r4, r5, r6, lr}
100148a2:	0006      	movs	r6, r0
100148a4:	000d      	movs	r5, r1
100148a6:	0014      	movs	r4, r2
100148a8:	2800      	cmp	r0, #0
100148aa:	d004      	beq.n	100148b6 <_putc_r+0x16>
100148ac:	6983      	ldr	r3, [r0, #24]
100148ae:	2b00      	cmp	r3, #0
100148b0:	d101      	bne.n	100148b6 <_putc_r+0x16>
100148b2:	f7ff fc29 	bl	10014108 <__sinit>
100148b6:	4b12      	ldr	r3, [pc, #72]	; (10014900 <_putc_r+0x60>)
100148b8:	429c      	cmp	r4, r3
100148ba:	d101      	bne.n	100148c0 <_putc_r+0x20>
100148bc:	6874      	ldr	r4, [r6, #4]
100148be:	e008      	b.n	100148d2 <_putc_r+0x32>
100148c0:	4b10      	ldr	r3, [pc, #64]	; (10014904 <_putc_r+0x64>)
100148c2:	429c      	cmp	r4, r3
100148c4:	d101      	bne.n	100148ca <_putc_r+0x2a>
100148c6:	68b4      	ldr	r4, [r6, #8]
100148c8:	e003      	b.n	100148d2 <_putc_r+0x32>
100148ca:	4b0f      	ldr	r3, [pc, #60]	; (10014908 <_putc_r+0x68>)
100148cc:	429c      	cmp	r4, r3
100148ce:	d100      	bne.n	100148d2 <_putc_r+0x32>
100148d0:	68f4      	ldr	r4, [r6, #12]
100148d2:	68a3      	ldr	r3, [r4, #8]
100148d4:	3b01      	subs	r3, #1
100148d6:	60a3      	str	r3, [r4, #8]
100148d8:	2b00      	cmp	r3, #0
100148da:	da05      	bge.n	100148e8 <_putc_r+0x48>
100148dc:	69a2      	ldr	r2, [r4, #24]
100148de:	4293      	cmp	r3, r2
100148e0:	db08      	blt.n	100148f4 <_putc_r+0x54>
100148e2:	b2eb      	uxtb	r3, r5
100148e4:	2b0a      	cmp	r3, #10
100148e6:	d005      	beq.n	100148f4 <_putc_r+0x54>
100148e8:	6823      	ldr	r3, [r4, #0]
100148ea:	b2e8      	uxtb	r0, r5
100148ec:	1c5a      	adds	r2, r3, #1
100148ee:	6022      	str	r2, [r4, #0]
100148f0:	701d      	strb	r5, [r3, #0]
100148f2:	e004      	b.n	100148fe <_putc_r+0x5e>
100148f4:	0022      	movs	r2, r4
100148f6:	0029      	movs	r1, r5
100148f8:	0030      	movs	r0, r6
100148fa:	f7ff fa43 	bl	10013d84 <__swbuf_r>
100148fe:	bd70      	pop	{r4, r5, r6, pc}
10014900:	100167f0 	.word	0x100167f0
10014904:	10016810 	.word	0x10016810
10014908:	10016830 	.word	0x10016830

1001490c <__sread>:
1001490c:	b570      	push	{r4, r5, r6, lr}
1001490e:	000c      	movs	r4, r1
10014910:	250e      	movs	r5, #14
10014912:	5f49      	ldrsh	r1, [r1, r5]
10014914:	f000 f8b0 	bl	10014a78 <_read_r>
10014918:	2800      	cmp	r0, #0
1001491a:	db03      	blt.n	10014924 <__sread+0x18>
1001491c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001491e:	181b      	adds	r3, r3, r0
10014920:	6563      	str	r3, [r4, #84]	; 0x54
10014922:	e003      	b.n	1001492c <__sread+0x20>
10014924:	89a2      	ldrh	r2, [r4, #12]
10014926:	4b02      	ldr	r3, [pc, #8]	; (10014930 <__sread+0x24>)
10014928:	4013      	ands	r3, r2
1001492a:	81a3      	strh	r3, [r4, #12]
1001492c:	bd70      	pop	{r4, r5, r6, pc}
1001492e:	46c0      	nop			; (mov r8, r8)
10014930:	ffffefff 	.word	0xffffefff

10014934 <__swrite>:
10014934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014936:	001f      	movs	r7, r3
10014938:	898b      	ldrh	r3, [r1, #12]
1001493a:	0005      	movs	r5, r0
1001493c:	000c      	movs	r4, r1
1001493e:	0016      	movs	r6, r2
10014940:	05db      	lsls	r3, r3, #23
10014942:	d505      	bpl.n	10014950 <__swrite+0x1c>
10014944:	230e      	movs	r3, #14
10014946:	5ec9      	ldrsh	r1, [r1, r3]
10014948:	2200      	movs	r2, #0
1001494a:	2302      	movs	r3, #2
1001494c:	f000 f874 	bl	10014a38 <_lseek_r>
10014950:	89a2      	ldrh	r2, [r4, #12]
10014952:	4b05      	ldr	r3, [pc, #20]	; (10014968 <__swrite+0x34>)
10014954:	0028      	movs	r0, r5
10014956:	4013      	ands	r3, r2
10014958:	81a3      	strh	r3, [r4, #12]
1001495a:	0032      	movs	r2, r6
1001495c:	230e      	movs	r3, #14
1001495e:	5ee1      	ldrsh	r1, [r4, r3]
10014960:	003b      	movs	r3, r7
10014962:	f000 f81f 	bl	100149a4 <_write_r>
10014966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014968:	ffffefff 	.word	0xffffefff

1001496c <__sseek>:
1001496c:	b570      	push	{r4, r5, r6, lr}
1001496e:	000c      	movs	r4, r1
10014970:	250e      	movs	r5, #14
10014972:	5f49      	ldrsh	r1, [r1, r5]
10014974:	f000 f860 	bl	10014a38 <_lseek_r>
10014978:	89a3      	ldrh	r3, [r4, #12]
1001497a:	1c42      	adds	r2, r0, #1
1001497c:	d103      	bne.n	10014986 <__sseek+0x1a>
1001497e:	4a05      	ldr	r2, [pc, #20]	; (10014994 <__sseek+0x28>)
10014980:	4013      	ands	r3, r2
10014982:	81a3      	strh	r3, [r4, #12]
10014984:	e004      	b.n	10014990 <__sseek+0x24>
10014986:	2280      	movs	r2, #128	; 0x80
10014988:	0152      	lsls	r2, r2, #5
1001498a:	4313      	orrs	r3, r2
1001498c:	81a3      	strh	r3, [r4, #12]
1001498e:	6560      	str	r0, [r4, #84]	; 0x54
10014990:	bd70      	pop	{r4, r5, r6, pc}
10014992:	46c0      	nop			; (mov r8, r8)
10014994:	ffffefff 	.word	0xffffefff

10014998 <__sclose>:
10014998:	b510      	push	{r4, lr}
1001499a:	230e      	movs	r3, #14
1001499c:	5ec9      	ldrsh	r1, [r1, r3]
1001499e:	f000 f815 	bl	100149cc <_close_r>
100149a2:	bd10      	pop	{r4, pc}

100149a4 <_write_r>:
100149a4:	b570      	push	{r4, r5, r6, lr}
100149a6:	0005      	movs	r5, r0
100149a8:	0008      	movs	r0, r1
100149aa:	0011      	movs	r1, r2
100149ac:	2200      	movs	r2, #0
100149ae:	4c06      	ldr	r4, [pc, #24]	; (100149c8 <_write_r+0x24>)
100149b0:	6022      	str	r2, [r4, #0]
100149b2:	001a      	movs	r2, r3
100149b4:	f7f7 fec8 	bl	1000c748 <_write>
100149b8:	1c43      	adds	r3, r0, #1
100149ba:	d103      	bne.n	100149c4 <_write_r+0x20>
100149bc:	6823      	ldr	r3, [r4, #0]
100149be:	2b00      	cmp	r3, #0
100149c0:	d000      	beq.n	100149c4 <_write_r+0x20>
100149c2:	602b      	str	r3, [r5, #0]
100149c4:	bd70      	pop	{r4, r5, r6, pc}
100149c6:	46c0      	nop			; (mov r8, r8)
100149c8:	100197ec 	.word	0x100197ec

100149cc <_close_r>:
100149cc:	2300      	movs	r3, #0
100149ce:	b570      	push	{r4, r5, r6, lr}
100149d0:	4c06      	ldr	r4, [pc, #24]	; (100149ec <_close_r+0x20>)
100149d2:	0005      	movs	r5, r0
100149d4:	0008      	movs	r0, r1
100149d6:	6023      	str	r3, [r4, #0]
100149d8:	f7f7 fef0 	bl	1000c7bc <_close>
100149dc:	1c43      	adds	r3, r0, #1
100149de:	d103      	bne.n	100149e8 <_close_r+0x1c>
100149e0:	6823      	ldr	r3, [r4, #0]
100149e2:	2b00      	cmp	r3, #0
100149e4:	d000      	beq.n	100149e8 <_close_r+0x1c>
100149e6:	602b      	str	r3, [r5, #0]
100149e8:	bd70      	pop	{r4, r5, r6, pc}
100149ea:	46c0      	nop			; (mov r8, r8)
100149ec:	100197ec 	.word	0x100197ec

100149f0 <_fstat_r>:
100149f0:	2300      	movs	r3, #0
100149f2:	b570      	push	{r4, r5, r6, lr}
100149f4:	4c06      	ldr	r4, [pc, #24]	; (10014a10 <_fstat_r+0x20>)
100149f6:	0005      	movs	r5, r0
100149f8:	0008      	movs	r0, r1
100149fa:	0011      	movs	r1, r2
100149fc:	6023      	str	r3, [r4, #0]
100149fe:	f7f7 fee1 	bl	1000c7c4 <_fstat>
10014a02:	1c43      	adds	r3, r0, #1
10014a04:	d103      	bne.n	10014a0e <_fstat_r+0x1e>
10014a06:	6823      	ldr	r3, [r4, #0]
10014a08:	2b00      	cmp	r3, #0
10014a0a:	d000      	beq.n	10014a0e <_fstat_r+0x1e>
10014a0c:	602b      	str	r3, [r5, #0]
10014a0e:	bd70      	pop	{r4, r5, r6, pc}
10014a10:	100197ec 	.word	0x100197ec

10014a14 <_isatty_r>:
10014a14:	2300      	movs	r3, #0
10014a16:	b570      	push	{r4, r5, r6, lr}
10014a18:	4c06      	ldr	r4, [pc, #24]	; (10014a34 <_isatty_r+0x20>)
10014a1a:	0005      	movs	r5, r0
10014a1c:	0008      	movs	r0, r1
10014a1e:	6023      	str	r3, [r4, #0]
10014a20:	f7f7 fed6 	bl	1000c7d0 <_isatty>
10014a24:	1c43      	adds	r3, r0, #1
10014a26:	d103      	bne.n	10014a30 <_isatty_r+0x1c>
10014a28:	6823      	ldr	r3, [r4, #0]
10014a2a:	2b00      	cmp	r3, #0
10014a2c:	d000      	beq.n	10014a30 <_isatty_r+0x1c>
10014a2e:	602b      	str	r3, [r5, #0]
10014a30:	bd70      	pop	{r4, r5, r6, pc}
10014a32:	46c0      	nop			; (mov r8, r8)
10014a34:	100197ec 	.word	0x100197ec

10014a38 <_lseek_r>:
10014a38:	b570      	push	{r4, r5, r6, lr}
10014a3a:	0005      	movs	r5, r0
10014a3c:	0008      	movs	r0, r1
10014a3e:	0011      	movs	r1, r2
10014a40:	2200      	movs	r2, #0
10014a42:	4c06      	ldr	r4, [pc, #24]	; (10014a5c <_lseek_r+0x24>)
10014a44:	6022      	str	r2, [r4, #0]
10014a46:	001a      	movs	r2, r3
10014a48:	f7f7 fec4 	bl	1000c7d4 <_lseek>
10014a4c:	1c43      	adds	r3, r0, #1
10014a4e:	d103      	bne.n	10014a58 <_lseek_r+0x20>
10014a50:	6823      	ldr	r3, [r4, #0]
10014a52:	2b00      	cmp	r3, #0
10014a54:	d000      	beq.n	10014a58 <_lseek_r+0x20>
10014a56:	602b      	str	r3, [r5, #0]
10014a58:	bd70      	pop	{r4, r5, r6, pc}
10014a5a:	46c0      	nop			; (mov r8, r8)
10014a5c:	100197ec 	.word	0x100197ec

10014a60 <memchr>:
10014a60:	b2c9      	uxtb	r1, r1
10014a62:	1882      	adds	r2, r0, r2
10014a64:	4290      	cmp	r0, r2
10014a66:	d004      	beq.n	10014a72 <memchr+0x12>
10014a68:	7803      	ldrb	r3, [r0, #0]
10014a6a:	428b      	cmp	r3, r1
10014a6c:	d002      	beq.n	10014a74 <memchr+0x14>
10014a6e:	3001      	adds	r0, #1
10014a70:	e7f8      	b.n	10014a64 <memchr+0x4>
10014a72:	2000      	movs	r0, #0
10014a74:	4770      	bx	lr
	...

10014a78 <_read_r>:
10014a78:	b570      	push	{r4, r5, r6, lr}
10014a7a:	0005      	movs	r5, r0
10014a7c:	0008      	movs	r0, r1
10014a7e:	0011      	movs	r1, r2
10014a80:	2200      	movs	r2, #0
10014a82:	4c06      	ldr	r4, [pc, #24]	; (10014a9c <_read_r+0x24>)
10014a84:	6022      	str	r2, [r4, #0]
10014a86:	001a      	movs	r2, r3
10014a88:	f7f7 fe3e 	bl	1000c708 <_read>
10014a8c:	1c43      	adds	r3, r0, #1
10014a8e:	d103      	bne.n	10014a98 <_read_r+0x20>
10014a90:	6823      	ldr	r3, [r4, #0]
10014a92:	2b00      	cmp	r3, #0
10014a94:	d000      	beq.n	10014a98 <_read_r+0x20>
10014a96:	602b      	str	r3, [r5, #0]
10014a98:	bd70      	pop	{r4, r5, r6, pc}
10014a9a:	46c0      	nop			; (mov r8, r8)
10014a9c:	100197ec 	.word	0x100197ec
10014aa0:	000003e8 	.word	0x000003e8

10014aa4 <test>:
10014aa4:	00000083 00004000 00000200 00c800c8     .....@..........
10014ab4:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10014ac4:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10014ad4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10014ae4:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10014af4:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10014b04:	666f206c 74657366 74616420 57482061     l offset data HW
10014b14:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10014b24:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10014b34:	6f727947 66666f20 20746573 61746164     Gyro offset data
10014b44:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10014b54:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10014b64:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10014b74:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10014b84:	6e756f66 00002e64 72617453 676e6974     found...Starting
10014b94:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10014ba4:	72746552 69766569 4220676e 65736169     Retrieving Biase
10014bb4:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10014bc4:	65736169 72452073 20726f72 6f70202d     iases Error - po
10014bd4:	62697373 4920656c 65204332 726f7272     ssible I2C error
10014be4:	00000000 72746552 69766569 5320676e     ....Retrieving S
10014bf4:	69422054 73657361 00000000 72746552     T Biases....Retr
10014c04:	69766569 5320676e 69422054 73657361     ieving ST Biases
10014c14:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10014c24:	32492065 72652043 00726f72 64616552     e I2C error.Read
10014c34:	20676e69 2050544f 69676552 72657473     ing OTP Register
10014c44:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10014c54:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10014c64:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10014c74:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10014c84:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10014c94:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10014ca4:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10014cb4:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10014cc4:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10014cd4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10014ce4:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10014cf4:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10014d04:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10014d14:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10014d24:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10014d34:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10014d44:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10014d54:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10014d64:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10014d74:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10014d84:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10014d94:	6c207361 20737365 6e616874 2e372520     as less than %7.
10014da4:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10014db4:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10014dc4:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10014dd4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10014de4:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10014df4:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10014e04:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10014e14:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10014e24:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10014e34:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10014e44:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10014e54:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10014e64:	253a7369 72672064 65746165 68742072     is:%d greater th
10014e74:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10014e84:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10014e94:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10014ea4:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10014eb4:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10014ec4:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10014ed4:	65542066 52207473 6c757365 203a7374     f Test Results: 
10014ee4:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10014ef4:	73655420 65522074 746c7573 25203a73      Test Results: %
10014f04:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10014f14:	00000000                                ....

10014f18 <hw>:
10014f18:	04000069 01410080 01000000 00001333     i.....A.....3...

10014f28 <reg>:
10014f28:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10014f38:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10014f48:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10014f58:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10014f68:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10014f78:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10014f88:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10014f98:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
10014fa8:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
10014fb8:	6150095d 6e697269 65722067 73657571     ].Pairing reques
10014fc8:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
10014fd8:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
10014fe8:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
10014ff8:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
10015008:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10015018:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
10015028:	6e616d6d 65722064 76696563 64206465     mmand received d
10015038:	6e697275 64612067 74726576 6d657369     uring advertisem
10015048:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
10015058:	00000020 6c696166 21216465 00000021      ...failed!!!...
10015068:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
10015078:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
10015088:	65636976 69617020 2e646572 64202e2e     vice paired... d
10015098:	62617369 676e696c 746e6920 75727265     isabling interru
100150a8:	20737470 77732026 68637469 20676e69     pts & switching 
100150b8:	6e776f64 6e657320 73726f73 00000000     down sensors....
100150c8:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
100150d8:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
100150e8:	69646e69 69746163 0000676e 736d735b     indicating..[sms
100150f8:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10015108:	65440909 65636976 6e6f6320 7463656e     ..Device connect
10015118:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
10015128:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
10015138:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
10015148:	73697472 6e656d65 69742074 756f656d     rtisement timeou
10015158:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
10015168:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
10015178:	69766544 20736563 6e6e6f63 65746365     Devices connecte
10015188:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
10015198:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
100151a8:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
100151b8:	65766441 73697472 6e656d65 61642074     Advertisement da
100151c8:	73206174 66207465 656c6961 00002164     ta set failed!..
100151d8:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
100151e8:	095d6573 454c4209 61745320 64657472     se]..BLE Started
100151f8:	76644120 69747265 656d6573 0000746e      Advertisement..
10015208:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10015218:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10015228:	73697472 6e656d65 74732074 20747261     rtisement start 
10015238:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
10015248:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
10015258:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
10015268:	64207265 6f637369 63656e6e 2e646574     er disconnected.
10015278:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
10015288:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10015298:	64252032 00000000 6e630a0d 25203a74     2 %d......cnt: %
100152a8:	00000064                                d...

100152ac <sms_ble_gap_cb>:
	...
100152b8:	10009cc9 00000000 10009cfd 10009e0d     ................
	...
100152d0:	10009d45 10009afd 00000000 00000000     E...............
	...

100152f8 <sms_ble_gatt_server_cb>:
100152f8:	10009b49 10009b85 00000000 00000000     I...............
	...
10015320:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015330:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10015340:	656c6968 74657320 676e6974 20707520     hile setting up 
10015350:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10015360:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10015370:	6c626f72 77206d65 656c6968 74657320     roblem while set
10015380:	676e6974 20707520 74747562 00316e6f     ting up button1.
10015390:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100153a0:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
100153b0:	656c6968 74657320 676e6974 20707520     hile setting up 
100153c0:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
100153d0:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
100153e0:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
100153f0:	74747542 73206e6f 65746174 6425203a     Button state: %d
10015400:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10015410:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10015420:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10015430:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10015440:	6e697472 65732067 726f736e 42282073     rting sensors (B
10015450:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
10015460:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10015470:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10015480:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10015490:	6e697472 65732067 726f736e 42282073     rting sensors (B
100154a0:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
100154b0:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
100154c0:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
100154d0:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100154e0:	5d736563 72655309 65636976 65642073     ces].Services de
100154f0:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10015500:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10015510:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10015520:	69767265 5d736563 72655309 65636976     ervices].Service
10015530:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10015540:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10015550:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10015560:	65732065 6e697474 70672067 70206f69     e setting gpio p
10015570:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10015580:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10015590:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
100155a0:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
100155b0:	00000000 736d735b 6e65735f 73726f73     ....[sms_sensors
100155c0:	6977735f 5d686374 43090909 646c756f     _switch]...Could
100155d0:	2074276e 74696e69 696c6169 4d20657a     n't initialize M
100155e0:	00005550 736d735b 756d695f 6e6f635f     PU..[sms_imu_con
100155f0:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10015600:	6d656c62 69687720 7320656c 69747465     blem while setti
10015610:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10015620:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10015630:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10015640:	6d656c62 69687720 7320656c 69747465     blem while setti
10015650:	7520676e 504d2070 43562055 69702043     ng up MPU VCC pi
10015660:	0000006e 74696e49 696c6169 676e697a     n...Initializing
10015670:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
10015680:	00000000 74746553 20676e69 4d207075     ....Setting up M
10015690:	2e2e5550 0000002e 736d735b 75706d5f     PU......[sms_mpu
100156a0:	6665645f 5f656e69 76726573 73656369     _define_services
100156b0:	6553095d 63697672 64207365 6e696665     ].Services defin
100156c0:	20676e69 6c696166 202c6465 73616572     ing failed, reas
100156d0:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
100156e0:	6665645f 5f656e69 76726573 73656369     _define_services
100156f0:	6553095d 63697672 64207365 6e696665     ].Services defin
10015700:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
10015710:	203a656c 00006425 736d735b 64656c5f     le: %d..[sms_led
10015720:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
10015730:	206d656c 6c696877 65732065 6e697474     lem while settin
10015740:	70752067 64656c20 00000030 736d735b     g up led0...[sms
10015750:	6572705f 72757373 6f635f65 6769666e     _pressure_config
10015760:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
10015770:	6877206d 20656c69 74746573 20676e69     m while setting 
10015780:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
10015790:	6572705f 72757373 74735f65 75747261     _pressure_startu
100157a0:	09095d70 72617453 676e6974 65727020     p]..Starting pre
100157b0:	72757373 65732065 726f736e 00000000     ssure sensor....
100157c0:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
100157d0:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
100157e0:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
100157f0:	65727020 72757373 203d2065 00646c25      pressure = %ld.
10015800:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
10015810:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
10015820:	61642067 70206174 696c6c6f 0000676e     g data polling..
10015830:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10015840:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
10015850:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
10015860:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
10015870:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10015880:	65636976 53095d73 69767265 20736563     vices].Services 
10015890:	69666564 676e696e 69616620 2c64656c     defining failed,
100158a0:	61657220 206e6f73 78257830 00000000      reason 0x%x....
100158b0:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
100158c0:	656e6966 7265735f 65636976 53095d73     fine_services].S
100158d0:	69767265 20736563 69666564 2c64656e     ervices defined,
100158e0:	534d5320 65727020 72757373 61682065      SMS pressure ha
100158f0:	656c646e 6425203a 00000000 1000b728     ndle: %d....(...
10015900:	1000b736 1000b744 1000b752 1000b760     6...D...R...`...
10015910:	1000b76e 1000b77c 1000b78c 1000b79c     n...|...........
10015920:	1000b7ac 1000b7bc 1000b7cc 1000b7dc     ................
10015930:	1000b7ec 1000b7fc 1000b80c 1000b81c     ................
10015940:	1000b82c 1000b83c 1000b84c 1000b85c     ,...<...L...\...
10015950:	1000b86c 1000b87c 1000b88c 1000b89c     l...|...........
10015960:	1000b8ac 1000b8bc 1000b8cc 1000b8da     ................
10015970:	1000b8e8 1000b8f6 1000b904 1000b912     ................
10015980:	1000b920 1000b92e 1000b93c 1000b94c      .......<...L...
10015990:	1000b95c 1000b96c 1000b97c 1000b98c     \...l...|.......
100159a0:	1000b99c 1000b9ac 1000b9bc 1000b9cc     ................
100159b0:	1000b9dc 1000b9ec 1000b9fc 1000ba0c     ................
100159c0:	1000ba1c 1000ba2c 1000ba3c 1000ba4a     ....,...<...J...
100159d0:	1000ba58 1000ba84 1000ba92 1000baa0     X...............
100159e0:	1000baae 1000babc 1000baca 1000bad8     ................
100159f0:	1000bae6 1000baf4 1000bb02 1000bb10     ................
10015a00:	1000bb1e 1000bb2c 1000bb3a 1000bb48     ....,...:...H...
10015a10:	1000bb56 1000bb64 1000bb72 1000bb80     V...d...r.......
10015a20:	1000bb8e 1000bb9c 1000bbaa 1000bbb8     ................
10015a30:	1000bbc6 1000bbd4 1000bbe2 1000bbf0     ................
10015a40:	1000bbfe 1000bc0c 1000bc1a 1000bc28     ............(...
10015a50:	1000bc36 1000bc44 1000bc52 1000bc60     6...D...R...`...
10015a60:	1000bc6e 1000bc7c 1000bc8a 1000bc98     n...|...........
10015a70:	1000bca6 1000bcb4 1000bcc2 1000bcd0     ................
10015a80:	1000bcde 1000bcec 1000bcfa 1000bd08     ................
10015a90:	1000bd16 1000bd24 1000bd32 1000bd40     ....$...2...@...
10015aa0:	1000bd4e 1000bd5c 1000bd6a 1000be04     N...\...j.......
10015ab0:	1000be2c 1000be54 1000be7c 1000c0bc     ,...T...|.......
10015ac0:	1000beac 1000bec4 1000bf3c 1000bf54     ........<...T...
10015ad0:	1000bedc 1000bef4 1000bf0c 1000bf24     ............$...
10015ae0:	1000bf6c 1000c230 1000c230 1000c230     l...0...0...0...
10015af0:	1000c230 1000c230 1000c230 1000c230     0...0...0...0...
10015b00:	1000c230 1000c014 1000c02c 1000c044     0.......,...D...
10015b10:	1000c0d2 1000bf9c 1000c230 1000c230     ........0...0...
10015b20:	1000c230 1000c230 1000c230 1000c230     0...0...0...0...
10015b30:	1000c05c 1000c074 1000c08c 1000c0a4     \...t...........
10015b40:	1000c230 1000c1e8 1000c200 1000c230     0...........0...
10015b50:	1000c230 1000c0fe 1000c114 1000c12a     0...........*...
10015b60:	1000c140 1000c230 1000c230 1000c230     @...0...0...0...
10015b70:	1000c230 1000c230 1000c230 1000c230     0...0...0...0...
10015b80:	1000c230 1000bdf0 1000be18 1000be40     0...........@...
10015b90:	1000be68 1000be94 1000bf84 1000bfb4     h...............
10015ba0:	1000bfcc 1000bfe4 1000bffc 1000c0e8     ................
10015bb0:	1000c156 1000c1d0 1000c218 1000c952     V...........R...
10015bc0:	1000c964 1000c93a 1000c93a 1000c93a     d...:...:...:...
10015bd0:	1000c952 1000c93a 1000c93a 1000d356     R...:...:...V...
10015be0:	1000d3ca 1000d33e 1000d3d0 1000d344     ....>.......D...
10015bf0:	1000d34a 1000d350 34333231 00003635     J...P...123456..
10015c00:	efcdab00 00efcdab                       ........

10015c08 <ble_mgr_gatt_server_handle>:
	...
10015c20:	1000c84d 1000c875 1000c8bd 00000000     M...u...........
10015c30:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10015c40:	65636552 64657669 00000000 6e616353     Received....Scan
10015c50:	676e696e 61662020 64656c69 00000000     ning  failed....
10015c60:	65766441 73697472 20676e69 6c696166     Advertising fail
10015c70:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10015c80:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10015c90:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10015ca0:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10015cb0:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10015cc0:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10015cd0:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10015ce0:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10015cf0:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10015d00:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10015d10:	00000064 72616843 69725720 43206574     d...Char Write C
10015d20:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10015d30:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10015d40:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10015d50:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10015d60:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10015d70:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10015d80:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10015d90:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10015da0:	00000000 69766544 64206563 6f637369     ....Device disco
10015db0:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10015dc0:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10015dd0:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10015de0:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10015df0:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10015e00:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10015e10:	6c706d6f 64657465 63757320 73736563     ompleted success
10015e20:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10015e30:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10015e40:	74707972 206e6f69 6f666e69 00000000     ryption info....
10015e50:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10015e60:	64612064 73657264 255b2073 20205d64     d address [%d]  
10015e70:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10015e80:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10015e90:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10015ea0:	206e6163 69766564 72206563 68636165     can device reach
10015eb0:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10015ec0:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10015ed0:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10015ee0:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10015ef0:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10015f00:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10015f10:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10015f20:	52207463 65757165 46207473 656c6961     ct Request Faile
10015f30:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10015f40:	72756465 6f632065 656c706d 20646574     edure completed 
10015f50:	63637573 66737365 796c6c75 00000000     successfully....
10015f60:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10015f70:	646e756f 206f7420 726f7473 68742065     ound to store th
10015f80:	61702065 6e697269 6e692067 00006f66     e pairing info..
10015f90:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10015fa0:	4e206e6f 7320746f 74726174 00006465     on Not started..
10015fb0:	76616c53 65532065 69727563 52207974     Slave Security R
10015fc0:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10015fd0:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10015fe0:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10015ff0:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10016000:	20676e69 70736572 65736e6f 00000000     ing response....
10016010:	72696150 71655220 74736575 41202d20     Pair Request - A
10016020:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10016030:	64656c69 00000000 65746e45 68742072     iled....Enter th
10016040:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10016050:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10016060:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10016070:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10016080:	61656c50 45206573 7265746e 65687420     Please Enter the
10016090:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
100160a0:	65646f63 206e6f28 6568746f 65442072     code(on other De
100160b0:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
100160c0:	70657220 6620796c 656c6961 00000064      reply failed...
100160d0:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
100160e0:	70707573 6574726f 00000064 65746e45     supported...Ente
100160f0:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10016100:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10016110:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10016120:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10016130:	76656420 20656369 76696465 00782520      device ediv %x.
10016140:	72656570 76656420 20656369 76696465     peer device ediv
10016150:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10016160:	00782520 20656854 65646e69 73692078      %x.The index is
10016170:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10016180:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10016190:	6f666e69 74616d72 206e6f69 7020666f     information of p
100161a0:	20726565 69766564 69206563 6f6e2073     eer device is no
100161b0:	76612074 616c6961 2e656c62 00000000     t available.....
100161c0:	61656c50 75206573 6961706e 68742072     Please unpair th
100161d0:	65642065 65636976 6f726620 6570206d     e device from pe
100161e0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100161f0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10016200:	20646e61 72617473 61702074 6e697269     and start pairin
10016210:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10016220:	52206e6f 65757165 52207473 796c7065     on Request Reply
10016230:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10016240:	52206e6f 65757165 52207473 796c7065     on Request Reply
10016250:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10016260:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10016270:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10016280:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10016290:	7a696c61 6f697461 6166206e 64656c69     alization failed
100162a0:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
100162b0:	61656c50 63206573 6b636568 65687420     Please check the
100162c0:	776f7020 61207265 6320646e 656e6e6f      power and conne
100162d0:	6f697463 202f206e 64726168 65726177     ction / hardware
100162e0:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
100162f0:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10016300:	20656d61 20746573 6c696166 00006465     ame set failed..
10016310:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10016320:	5d676966 44420909 64646120 73736572     fig]..BD address
10016330:	74656720 69616620 0064656c 656c625b      get failed.[ble
10016340:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016350:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10016360:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10016370:	25583230 2c583230 64644120 73736572     02X%02X, Address
10016380:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10016390:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100163a0:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100163b0:	666e6f63 72756769 6f697461 6166206e     configuration fa
100163c0:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
100163d0:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
100163e0:	454c4220 76654420 20656369 72646441      BLE Device Addr
100163f0:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10016400:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10016410:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10016420:	69727563 72207974 65757165 73207473     curity request s
10016430:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10016440:	65732065 69727563 72207974 65757165     e security reque
10016450:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10016460:	65746365 6f742064 65657020 65642072     ected to peer de
10016470:	65636976 74697720 64612068 73657264     vice with addres
10016480:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10016490:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100164a0:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100164b0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100164c0:	61522067 6d6f646e 64646120 73736572     g Random address
100164d0:	63757320 73736563 00002a2a 6f736552      success**..Reso
100164e0:	6e69766c 61522067 6d6f646e 64646120     lving Random add
100164f0:	73736572 69616620 2a64656c 0000002a     ress failed**...
10016500:	2078614d 626d756e 6f207265 6f632066     Max number of co
10016510:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10016520:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10016530:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10016540:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10016550:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10016560:	00000064 23232323 23232323 65442323     d...##########De
10016570:	65636976 756f4620 0000646e 23232323     vice Found..####
10016580:	23232323 65442323 65636976 746f4e20     ######Device Not
10016590:	756f4620 0000646e 69766544 69206563      Found..Device i
100165a0:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
100165b0:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
100165c0:	20726576 6e657645 64253a74 00000000     ver Event:%d....
100165d0:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
100165e0:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
100165f0:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10016600:	756e614d 74636166 72657275 65707320     Manufacturer spe
10016610:	69666963 61642063 65206174 6c62616e     cific data enabl
10016620:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
10016630:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10016640:	61642074 73206174 66207465 656c6961     t data set faile
10016650:	00000064                                d...

10016654 <ble_mgr_gap_handle>:
10016654:	1000c7d9 1000ca89 1000c7fd 1000c825     ............%...
10016664:	00000000 1000d705 1000c905 1000c9a1     ................
10016674:	1000cce5 1000cb35 1000cee5 1000ccfd     ....5...........
10016684:	1000d071 1000d1b5 1000c9c5 1000d951     q...........Q...
	...
100166a0:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
100166b0:	657a696c 55504d20 00000021 656d7441     lize MPU!...Atme
100166c0:	6f43206c 022e7072                                l Corp.

100166c7 <CSWTCH.45>:
100166c7:	00100402                                         ...

100166ca <CSWTCH.47>:
100166ca:	03010300 03030303 03030303 02020303              ...............

100166d9 <client_conf_uuid>:
100166d9:	29042902                                         .)

100166db <presentation_format_uuid>:
100166db:	29012904                                         .)

100166dd <user_desc_uuid>:
100166dd:	29032901                                         .)

100166df <server_conf_uuid>:
100166df:	29002903                                         .)

100166e1 <extended_props_uuid>:
100166e1:	28022900                                         .)

100166e3 <include_uuid>:
100166e3:	28032802                                         .(

100166e5 <char_uuid>:
100166e5:	62002803 86100121 44100120 1c100121     .(.b!... ..D!...
100166f5:	44100121 10100121 44100121 1c100121     !..D!...!..D!...
10016705:	86100121 86100120 10100120 1c100121     !... ... ...!...
10016715:	c8100121 c8100121 c8100121 4a100121     !...!...!...!..J
10016725:	86100121 86100120 30100120 1a100121     !... ... ..0!...
10016735:	30100121 10100121 30100121 1a100121     !..0!...!..0!...
10016745:	86100121 86100120 10100120 1a100121     !... ... ...!...
10016755:	c8100121 c8100121 c8100121 d4100121     !...!...!...!...
10016765:	c0100121 1e100124 1e100124 1c100124     !...$...$...$...
10016775:	b2100124 b2100124 a8100124 1c100124     $...$...$...$...
10016785:	b2100124 a8100124 b2100124 1c100124     $...$...$...$...
10016795:	b8100124 b8100124 b8100124 42100124     $...$...$...$..B
100167a5:	a4100125 6410012d 6410012c 6210012c     %...-..d,..d,..b
100167b5:	7c10012c 7c10012d 6e10012d 6210012d     ,..|-..|-..n-..b
100167c5:	7c10012c 6e10012d 7c10012d 6210012d     ,..|-..n-..|-..b
100167d5:	8410012c 8410012d 8410012d 8410012d     ,...-...-...-...
100167e5:	4310012f ec000000                                /..C...

100167ec <_global_impure_ptr>:
100167ec:	100168ec                                .h..

100167f0 <__sf_fake_stdin>:
	...

10016810 <__sf_fake_stdout>:
	...

10016830 <__sf_fake_stderr>:
	...
10016850:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10016860:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10016870:	31300046 35343332 39383736 64636261     F.0123456789abcd
10016880:	00006665                                ef..

10016884 <_init>:
10016884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016886:	46c0      	nop			; (mov r8, r8)
10016888:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001688a:	bc08      	pop	{r3}
1001688c:	469e      	mov	lr, r3
1001688e:	4770      	bx	lr

10016890 <__init_array_start>:
10016890:	100080b1 	.word	0x100080b1

10016894 <_fini>:
10016894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016896:	46c0      	nop			; (mov r8, r8)
10016898:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001689a:	bc08      	pop	{r3}
1001689c:	469e      	mov	lr, r3
1001689e:	4770      	bx	lr

100168a0 <__fini_array_start>:
100168a0:	10008089 	.word	0x10008089
