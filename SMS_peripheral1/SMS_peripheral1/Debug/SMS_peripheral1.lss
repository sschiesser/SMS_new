
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ebe4  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  10016be4  10016be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f24  10016c54  10016c54  00016c54  2**2
                  ALLOC
  3 .stack        00000800  10019b78  10019b78  00016c54  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00016c54  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00016c7c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b6b2  00000000  00000000  00016d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052f3  00000000  00000000  000623e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a438  00000000  00000000  000676d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  00071b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  0007264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c388  00000000  00000000  0007314d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015fc2  00000000  00000000  0007f4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00141806  00000000  00000000  00095497  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b94  00000000  00000000  001d6ca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10016be4 	.word	0x10016be4
10008068:	10016be4 	.word	0x10016be4
1000806c:	10016c54 	.word	0x10016c54
10008070:	10019b78 	.word	0x10019b78
10008074:	10016c54 	.word	0x10016c54
10008078:	10016be8 	.word	0x10016be8
1000807c:	10016c58 	.word	0x10016c58
10008080:	100149b1 	.word	0x100149b1
10008084:	1000d5bd 	.word	0x1000d5bd

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10016c54 	.word	0x10016c54
100080a8:	00000000 	.word	0x00000000
100080ac:	10016be4 	.word	0x10016be4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10016c58 	.word	0x10016c58
100080dc:	10016be4 	.word	0x10016be4
100080e0:	10016be4 	.word	0x10016be4
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10016c70 	.word	0x10016c70

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10016c70 	.word	0x10016c70

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10016c70 	.word	0x10016c70

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000b4c5 	.word	0x1000b4c5

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b05d 	.word	0x1000b05d
10008388:	40003400 	.word	0x40003400
1000838c:	1000a5e5 	.word	0x1000a5e5

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10016c74 	.word	0x10016c74
1000841c:	1001a378 	.word	0x1001a378

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000843c:	4b03      	ldr	r3, [pc, #12]	; (1000844c <sms_ble_pair_request_fn+0x10>)
1000843e:	781b      	ldrb	r3, [r3, #0]
10008440:	4b03      	ldr	r3, [pc, #12]	; (10008450 <sms_ble_pair_request_fn+0x14>)
10008442:	781b      	ldrb	r3, [r3, #0]
10008444:	4b03      	ldr	r3, [pc, #12]	; (10008454 <sms_ble_pair_request_fn+0x18>)
10008446:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008448:	2000      	movs	r0, #0
1000844a:	4770      	bx	lr
1000844c:	100187f4 	.word	0x100187f4
10008450:	10018718 	.word	0x10018718
10008454:	10018933 	.word	0x10018933

10008458 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008458:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000845a:	4811      	ldr	r0, [pc, #68]	; (100084a0 <sms_ble_notification_confirmed_fn+0x48>)
1000845c:	4d11      	ldr	r5, [pc, #68]	; (100084a4 <sms_ble_notification_confirmed_fn+0x4c>)
1000845e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008460:	4c11      	ldr	r4, [pc, #68]	; (100084a8 <sms_ble_notification_confirmed_fn+0x50>)
10008462:	7863      	ldrb	r3, [r4, #1]
10008464:	3b01      	subs	r3, #1
10008466:	b2db      	uxtb	r3, r3
10008468:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000846a:	4810      	ldr	r0, [pc, #64]	; (100084ac <sms_ble_notification_confirmed_fn+0x54>)
1000846c:	4b10      	ldr	r3, [pc, #64]	; (100084b0 <sms_ble_notification_confirmed_fn+0x58>)
1000846e:	4798      	blx	r3
10008470:	4810      	ldr	r0, [pc, #64]	; (100084b4 <sms_ble_notification_confirmed_fn+0x5c>)
10008472:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008474:	2201      	movs	r2, #1
10008476:	4252      	negs	r2, r2
10008478:	4b0f      	ldr	r3, [pc, #60]	; (100084b8 <sms_ble_notification_confirmed_fn+0x60>)
1000847a:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
1000847c:	2001      	movs	r0, #1
1000847e:	4b0f      	ldr	r3, [pc, #60]	; (100084bc <sms_ble_notification_confirmed_fn+0x64>)
10008480:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008482:	2200      	movs	r2, #0
10008484:	4b0e      	ldr	r3, [pc, #56]	; (100084c0 <sms_ble_notification_confirmed_fn+0x68>)
10008486:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008488:	2322      	movs	r3, #34	; 0x22
1000848a:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
1000848c:	4b0d      	ldr	r3, [pc, #52]	; (100084c4 <sms_ble_notification_confirmed_fn+0x6c>)
1000848e:	781b      	ldrb	r3, [r3, #0]
10008490:	2b00      	cmp	r3, #0
10008492:	d102      	bne.n	1000849a <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
10008494:	3201      	adds	r2, #1
10008496:	4b0c      	ldr	r3, [pc, #48]	; (100084c8 <sms_ble_notification_confirmed_fn+0x70>)
10008498:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
1000849a:	2000      	movs	r0, #0
1000849c:	bd70      	pop	{r4, r5, r6, pc}
1000849e:	46c0      	nop			; (mov r8, r8)
100084a0:	10015be8 	.word	0x10015be8
100084a4:	10014b89 	.word	0x10014b89
100084a8:	100187f4 	.word	0x100187f4
100084ac:	10015bf0 	.word	0x10015bf0
100084b0:	10014ca9 	.word	0x10014ca9
100084b4:	10015bf4 	.word	0x10015bf4
100084b8:	100187ec 	.word	0x100187ec
100084bc:	10009cd1 	.word	0x10009cd1
100084c0:	10018933 	.word	0x10018933
100084c4:	10018718 	.word	0x10018718
100084c8:	100187f1 	.word	0x100187f1

100084cc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084cc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084ce:	2001      	movs	r0, #1
100084d0:	4b08      	ldr	r3, [pc, #32]	; (100084f4 <sms_ble_indication_confirmed_fn+0x28>)
100084d2:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100084d4:	2200      	movs	r2, #0
100084d6:	4b08      	ldr	r3, [pc, #32]	; (100084f8 <sms_ble_indication_confirmed_fn+0x2c>)
100084d8:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100084da:	3222      	adds	r2, #34	; 0x22
100084dc:	4b07      	ldr	r3, [pc, #28]	; (100084fc <sms_ble_indication_confirmed_fn+0x30>)
100084de:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100084e0:	4b07      	ldr	r3, [pc, #28]	; (10008500 <sms_ble_indication_confirmed_fn+0x34>)
100084e2:	781b      	ldrb	r3, [r3, #0]
100084e4:	2b00      	cmp	r3, #0
100084e6:	d102      	bne.n	100084ee <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
100084e8:	3a21      	subs	r2, #33	; 0x21
100084ea:	4b06      	ldr	r3, [pc, #24]	; (10008504 <sms_ble_indication_confirmed_fn+0x38>)
100084ec:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100084ee:	2000      	movs	r0, #0
100084f0:	bd10      	pop	{r4, pc}
100084f2:	46c0      	nop			; (mov r8, r8)
100084f4:	10009cd1 	.word	0x10009cd1
100084f8:	10018933 	.word	0x10018933
100084fc:	100187f4 	.word	0x100187f4
10008500:	10018718 	.word	0x10018718
10008504:	100187f1 	.word	0x100187f1

10008508 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008508:	2300      	movs	r3, #0
1000850a:	4a02      	ldr	r2, [pc, #8]	; (10008514 <sms_ble_init_variables+0xc>)
1000850c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000850e:	4a02      	ldr	r2, [pc, #8]	; (10008518 <sms_ble_init_variables+0x10>)
10008510:	8013      	strh	r3, [r2, #0]
}
10008512:	4770      	bx	lr
10008514:	100187f4 	.word	0x100187f4
10008518:	10018978 	.word	0x10018978

1000851c <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
1000851c:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
1000851e:	481b      	ldr	r0, [pc, #108]	; (1000858c <sms_ble_power_down+0x70>)
10008520:	4b1b      	ldr	r3, [pc, #108]	; (10008590 <sms_ble_power_down+0x74>)
10008522:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008524:	4b1b      	ldr	r3, [pc, #108]	; (10008594 <sms_ble_power_down+0x78>)
10008526:	781b      	ldrb	r3, [r3, #0]
10008528:	2b00      	cmp	r3, #0
1000852a:	d105      	bne.n	10008538 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
1000852c:	2201      	movs	r2, #1
1000852e:	4b1a      	ldr	r3, [pc, #104]	; (10008598 <sms_ble_power_down+0x7c>)
10008530:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008532:	4b1a      	ldr	r3, [pc, #104]	; (1000859c <sms_ble_power_down+0x80>)
10008534:	4798      	blx	r3
10008536:	e028      	b.n	1000858a <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008538:	4b16      	ldr	r3, [pc, #88]	; (10008594 <sms_ble_power_down+0x78>)
1000853a:	781b      	ldrb	r3, [r3, #0]
1000853c:	b2db      	uxtb	r3, r3
1000853e:	2b21      	cmp	r3, #33	; 0x21
10008540:	d015      	beq.n	1000856e <sms_ble_power_down+0x52>
10008542:	d802      	bhi.n	1000854a <sms_ble_power_down+0x2e>
10008544:	2b20      	cmp	r3, #32
10008546:	d003      	beq.n	10008550 <sms_ble_power_down+0x34>
10008548:	e016      	b.n	10008578 <sms_ble_power_down+0x5c>
1000854a:	2b23      	cmp	r3, #35	; 0x23
1000854c:	d908      	bls.n	10008560 <sms_ble_power_down+0x44>
1000854e:	e013      	b.n	10008578 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008550:	4b13      	ldr	r3, [pc, #76]	; (100085a0 <sms_ble_power_down+0x84>)
10008552:	4798      	blx	r3
10008554:	2800      	cmp	r0, #0
10008556:	d10f      	bne.n	10008578 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008558:	2211      	movs	r2, #17
1000855a:	4b0e      	ldr	r3, [pc, #56]	; (10008594 <sms_ble_power_down+0x78>)
1000855c:	701a      	strb	r2, [r3, #0]
1000855e:	e00b      	b.n	10008578 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008560:	2100      	movs	r1, #0
10008562:	232b      	movs	r3, #43	; 0x2b
10008564:	4a0f      	ldr	r2, [pc, #60]	; (100085a4 <sms_ble_power_down+0x88>)
10008566:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008568:	2000      	movs	r0, #0
1000856a:	4b0f      	ldr	r3, [pc, #60]	; (100085a8 <sms_ble_power_down+0x8c>)
1000856c:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
1000856e:	4b0f      	ldr	r3, [pc, #60]	; (100085ac <sms_ble_power_down+0x90>)
10008570:	8818      	ldrh	r0, [r3, #0]
10008572:	2113      	movs	r1, #19
10008574:	4b0e      	ldr	r3, [pc, #56]	; (100085b0 <sms_ble_power_down+0x94>)
10008576:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008578:	2211      	movs	r2, #17
1000857a:	4b06      	ldr	r3, [pc, #24]	; (10008594 <sms_ble_power_down+0x78>)
1000857c:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000857e:	3a0e      	subs	r2, #14
10008580:	4b0c      	ldr	r3, [pc, #48]	; (100085b4 <sms_ble_power_down+0x98>)
10008582:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008584:	2016      	movs	r0, #22
10008586:	4b0c      	ldr	r3, [pc, #48]	; (100085b8 <sms_ble_power_down+0x9c>)
10008588:	4798      	blx	r3
	}
}
1000858a:	bd10      	pop	{r4, pc}
1000858c:	10015c00 	.word	0x10015c00
10008590:	10008ae1 	.word	0x10008ae1
10008594:	100187f4 	.word	0x100187f4
10008598:	100187f1 	.word	0x100187f1
1000859c:	1000d369 	.word	0x1000d369
100085a0:	1000e4e9 	.word	0x1000e4e9
100085a4:	10018898 	.word	0x10018898
100085a8:	10009a05 	.word	0x10009a05
100085ac:	100187f6 	.word	0x100187f6
100085b0:	1000e515 	.word	0x1000e515
100085b4:	10018933 	.word	0x10018933
100085b8:	10009785 	.word	0x10009785

100085bc <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100085bc:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085be:	2211      	movs	r2, #17
100085c0:	4b02      	ldr	r3, [pc, #8]	; (100085cc <sms_ble_adv_report_fn+0x10>)
100085c2:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
100085c4:	4b02      	ldr	r3, [pc, #8]	; (100085d0 <sms_ble_adv_report_fn+0x14>)
100085c6:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
100085c8:	2000      	movs	r0, #0
100085ca:	bd10      	pop	{r4, pc}
100085cc:	100187f4 	.word	0x100187f4
100085d0:	1000851d 	.word	0x1000851d

100085d4 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
100085d4:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
100085d6:	4b0c      	ldr	r3, [pc, #48]	; (10008608 <sms_ble_connected_fn+0x34>)
100085d8:	781b      	ldrb	r3, [r3, #0]
100085da:	2b20      	cmp	r3, #32
100085dc:	d110      	bne.n	10008600 <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
100085de:	8902      	ldrh	r2, [r0, #8]
100085e0:	4b0a      	ldr	r3, [pc, #40]	; (1000860c <sms_ble_connected_fn+0x38>)
100085e2:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
100085e4:	2221      	movs	r2, #33	; 0x21
100085e6:	4b08      	ldr	r3, [pc, #32]	; (10008608 <sms_ble_connected_fn+0x34>)
100085e8:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
100085ea:	4809      	ldr	r0, [pc, #36]	; (10008610 <sms_ble_connected_fn+0x3c>)
100085ec:	4b09      	ldr	r3, [pc, #36]	; (10008614 <sms_ble_connected_fn+0x40>)
100085ee:	4798      	blx	r3
100085f0:	4809      	ldr	r0, [pc, #36]	; (10008618 <sms_ble_connected_fn+0x44>)
100085f2:	4b0a      	ldr	r3, [pc, #40]	; (1000861c <sms_ble_connected_fn+0x48>)
100085f4:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
100085f6:	22fa      	movs	r2, #250	; 0xfa
100085f8:	0052      	lsls	r2, r2, #1
100085fa:	4b09      	ldr	r3, [pc, #36]	; (10008620 <sms_ble_connected_fn+0x4c>)
100085fc:	601a      	str	r2, [r3, #0]
100085fe:	e001      	b.n	10008604 <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10008600:	4b08      	ldr	r3, [pc, #32]	; (10008624 <sms_ble_connected_fn+0x50>)
10008602:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10008604:	2000      	movs	r0, #0
10008606:	bd10      	pop	{r4, pc}
10008608:	100187f4 	.word	0x100187f4
1000860c:	10018926 	.word	0x10018926
10008610:	10015bf0 	.word	0x10015bf0
10008614:	10014ca9 	.word	0x10014ca9
10008618:	10015c18 	.word	0x10015c18
1000861c:	10014b89 	.word	0x10014b89
10008620:	100187ec 	.word	0x100187ec
10008624:	1000851d 	.word	0x1000851d

10008628 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008628:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
1000862a:	4b0e      	ldr	r3, [pc, #56]	; (10008664 <sms_ble_paired_fn+0x3c>)
1000862c:	781b      	ldrb	r3, [r3, #0]
1000862e:	2b21      	cmp	r3, #33	; 0x21
10008630:	d114      	bne.n	1000865c <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
10008632:	2222      	movs	r2, #34	; 0x22
10008634:	4b0b      	ldr	r3, [pc, #44]	; (10008664 <sms_ble_paired_fn+0x3c>)
10008636:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008638:	480b      	ldr	r0, [pc, #44]	; (10008668 <sms_ble_paired_fn+0x40>)
1000863a:	4b0c      	ldr	r3, [pc, #48]	; (1000866c <sms_ble_paired_fn+0x44>)
1000863c:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000863e:	2101      	movs	r1, #1
10008640:	2001      	movs	r0, #1
10008642:	4b0b      	ldr	r3, [pc, #44]	; (10008670 <sms_ble_paired_fn+0x48>)
10008644:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
10008646:	480b      	ldr	r0, [pc, #44]	; (10008674 <sms_ble_paired_fn+0x4c>)
10008648:	4b0b      	ldr	r3, [pc, #44]	; (10008678 <sms_ble_paired_fn+0x50>)
1000864a:	4798      	blx	r3
1000864c:	480b      	ldr	r0, [pc, #44]	; (1000867c <sms_ble_paired_fn+0x54>)
1000864e:	4b0c      	ldr	r3, [pc, #48]	; (10008680 <sms_ble_paired_fn+0x58>)
10008650:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008652:	2201      	movs	r2, #1
10008654:	4252      	negs	r2, r2
10008656:	4b0b      	ldr	r3, [pc, #44]	; (10008684 <sms_ble_paired_fn+0x5c>)
10008658:	601a      	str	r2, [r3, #0]
1000865a:	e001      	b.n	10008660 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
1000865c:	4b0a      	ldr	r3, [pc, #40]	; (10008688 <sms_ble_paired_fn+0x60>)
1000865e:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008660:	2000      	movs	r0, #0
10008662:	bd10      	pop	{r4, pc}
10008664:	100187f4 	.word	0x100187f4
10008668:	10015c28 	.word	0x10015c28
1000866c:	10008ae1 	.word	0x10008ae1
10008670:	10009a91 	.word	0x10009a91
10008674:	10015bf0 	.word	0x10015bf0
10008678:	10014ca9 	.word	0x10014ca9
1000867c:	10015bf4 	.word	0x10015bf4
10008680:	10014b89 	.word	0x10014b89
10008684:	100187ec 	.word	0x100187ec
10008688:	1000851d 	.word	0x1000851d

1000868c <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
1000868c:	b510      	push	{r4, lr}
1000868e:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008690:	2220      	movs	r2, #32
10008692:	4b14      	ldr	r3, [pc, #80]	; (100086e4 <sms_ble_advertise+0x58>)
10008694:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008696:	4b14      	ldr	r3, [pc, #80]	; (100086e8 <sms_ble_advertise+0x5c>)
10008698:	4798      	blx	r3
1000869a:	1e04      	subs	r4, r0, #0
1000869c:	d007      	beq.n	100086ae <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000869e:	4813      	ldr	r0, [pc, #76]	; (100086ec <sms_ble_advertise+0x60>)
100086a0:	4b13      	ldr	r3, [pc, #76]	; (100086f0 <sms_ble_advertise+0x64>)
100086a2:	4798      	blx	r3
100086a4:	4813      	ldr	r0, [pc, #76]	; (100086f4 <sms_ble_advertise+0x68>)
100086a6:	4b14      	ldr	r3, [pc, #80]	; (100086f8 <sms_ble_advertise+0x6c>)
100086a8:	4798      	blx	r3
		return status;
100086aa:	0020      	movs	r0, r4
100086ac:	e018      	b.n	100086e0 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086ae:	2300      	movs	r3, #0
100086b0:	9302      	str	r3, [sp, #8]
100086b2:	4b12      	ldr	r3, [pc, #72]	; (100086fc <sms_ble_advertise+0x70>)
100086b4:	9301      	str	r3, [sp, #4]
100086b6:	23c8      	movs	r3, #200	; 0xc8
100086b8:	00db      	lsls	r3, r3, #3
100086ba:	9300      	str	r3, [sp, #0]
100086bc:	2300      	movs	r3, #0
100086be:	2200      	movs	r2, #0
100086c0:	2101      	movs	r1, #1
100086c2:	2000      	movs	r0, #0
100086c4:	4c0e      	ldr	r4, [pc, #56]	; (10008700 <sms_ble_advertise+0x74>)
100086c6:	47a0      	blx	r4
100086c8:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
100086ca:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086cc:	2c00      	cmp	r4, #0
100086ce:	d007      	beq.n	100086e0 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100086d0:	4806      	ldr	r0, [pc, #24]	; (100086ec <sms_ble_advertise+0x60>)
100086d2:	4b07      	ldr	r3, [pc, #28]	; (100086f0 <sms_ble_advertise+0x64>)
100086d4:	4798      	blx	r3
100086d6:	0021      	movs	r1, r4
100086d8:	480a      	ldr	r0, [pc, #40]	; (10008704 <sms_ble_advertise+0x78>)
100086da:	4b07      	ldr	r3, [pc, #28]	; (100086f8 <sms_ble_advertise+0x6c>)
100086dc:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100086de:	20e2      	movs	r0, #226	; 0xe2
}
100086e0:	b004      	add	sp, #16
100086e2:	bd10      	pop	{r4, pc}
100086e4:	100187f4 	.word	0x100187f4
100086e8:	1000c9cd 	.word	0x1000c9cd
100086ec:	10015bf0 	.word	0x10015bf0
100086f0:	10014ca9 	.word	0x10014ca9
100086f4:	10015c3c 	.word	0x10015c3c
100086f8:	10014b89 	.word	0x10014b89
100086fc:	0000028f 	.word	0x0000028f
10008700:	1000e3ad 	.word	0x1000e3ad
10008704:	10015c70 	.word	0x10015c70

10008708 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008708:	b510      	push	{r4, lr}
1000870a:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000870c:	4b16      	ldr	r3, [pc, #88]	; (10008768 <sms_ble_disconnected_fn+0x60>)
1000870e:	781b      	ldrb	r3, [r3, #0]
10008710:	2b22      	cmp	r3, #34	; 0x22
10008712:	d10a      	bne.n	1000872a <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10008714:	2100      	movs	r1, #0
10008716:	3309      	adds	r3, #9
10008718:	4a14      	ldr	r2, [pc, #80]	; (1000876c <sms_ble_disconnected_fn+0x64>)
1000871a:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000871c:	2000      	movs	r0, #0
1000871e:	4b14      	ldr	r3, [pc, #80]	; (10008770 <sms_ble_disconnected_fn+0x68>)
10008720:	4798      	blx	r3
        sms_sensors_switch(false, false);
10008722:	2100      	movs	r1, #0
10008724:	2000      	movs	r0, #0
10008726:	4b13      	ldr	r3, [pc, #76]	; (10008774 <sms_ble_disconnected_fn+0x6c>)
10008728:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000872a:	4b0f      	ldr	r3, [pc, #60]	; (10008768 <sms_ble_disconnected_fn+0x60>)
1000872c:	2211      	movs	r2, #17
1000872e:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008730:	781b      	ldrb	r3, [r3, #0]
10008732:	4b11      	ldr	r3, [pc, #68]	; (10008778 <sms_ble_disconnected_fn+0x70>)
10008734:	781b      	ldrb	r3, [r3, #0]
10008736:	4b11      	ldr	r3, [pc, #68]	; (1000877c <sms_ble_disconnected_fn+0x74>)
10008738:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000873a:	78a3      	ldrb	r3, [r4, #2]
1000873c:	2b1a      	cmp	r3, #26
1000873e:	d00b      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
10008740:	b2da      	uxtb	r2, r3
10008742:	2a1a      	cmp	r2, #26
10008744:	d804      	bhi.n	10008750 <sms_ble_disconnected_fn+0x48>
10008746:	2b05      	cmp	r3, #5
10008748:	d006      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
1000874a:	2b08      	cmp	r3, #8
1000874c:	d107      	bne.n	1000875e <sms_ble_disconnected_fn+0x56>
1000874e:	e003      	b.n	10008758 <sms_ble_disconnected_fn+0x50>
10008750:	2b29      	cmp	r3, #41	; 0x29
10008752:	d001      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
10008754:	2b3b      	cmp	r3, #59	; 0x3b
10008756:	d102      	bne.n	1000875e <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008758:	4b09      	ldr	r3, [pc, #36]	; (10008780 <sms_ble_disconnected_fn+0x78>)
1000875a:	4798      	blx	r3
        break;
1000875c:	e001      	b.n	10008762 <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000875e:	4b09      	ldr	r3, [pc, #36]	; (10008784 <sms_ble_disconnected_fn+0x7c>)
10008760:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10008762:	2000      	movs	r0, #0
10008764:	bd10      	pop	{r4, pc}
10008766:	46c0      	nop			; (mov r8, r8)
10008768:	100187f4 	.word	0x100187f4
1000876c:	10018898 	.word	0x10018898
10008770:	10009a05 	.word	0x10009a05
10008774:	10009a91 	.word	0x10009a91
10008778:	10018718 	.word	0x10018718
1000877c:	10018933 	.word	0x10018933
10008780:	1000868d 	.word	0x1000868d
10008784:	1000851d 	.word	0x1000851d

10008788 <sms_ble_primary_service_define>:
	}
    return status;
}

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008788:	b510      	push	{r4, lr}
1000878a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000878c:	0001      	movs	r1, r0
1000878e:	3112      	adds	r1, #18
10008790:	2301      	movs	r3, #1
10008792:	9301      	str	r3, [sp, #4]
10008794:	0003      	movs	r3, r0
10008796:	3314      	adds	r3, #20
10008798:	9300      	str	r3, [sp, #0]
1000879a:	2300      	movs	r3, #0
1000879c:	2200      	movs	r2, #0
1000879e:	4c02      	ldr	r4, [pc, #8]	; (100087a8 <sms_ble_primary_service_define+0x20>)
100087a0:	47a0      	blx	r4
}
100087a2:	b002      	add	sp, #8
100087a4:	bd10      	pop	{r4, pc}
100087a6:	46c0      	nop			; (mov r8, r8)
100087a8:	1000ec71 	.word	0x1000ec71

100087ac <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100087ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100087ae:	464f      	mov	r7, r9
100087b0:	4646      	mov	r6, r8
100087b2:	b4c0      	push	{r6, r7}
100087b4:	b083      	sub	sp, #12
100087b6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100087b8:	2801      	cmp	r0, #1
100087ba:	d010      	beq.n	100087de <sms_ble_service_init+0x32>
100087bc:	2800      	cmp	r0, #0
100087be:	d002      	beq.n	100087c6 <sms_ble_service_init+0x1a>
100087c0:	2802      	cmp	r0, #2
100087c2:	d019      	beq.n	100087f8 <sms_ble_service_init+0x4c>
100087c4:	e025      	b.n	10008812 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100087c6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100087c8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100087ca:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100087cc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100087ce:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100087d0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100087d2:	221c      	movs	r2, #28
100087d4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100087d6:	3a1b      	subs	r2, #27
100087d8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100087da:	4691      	mov	r9, r2
100087dc:	e023      	b.n	10008826 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100087de:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
100087e0:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
100087e2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
100087e4:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
100087e6:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
100087e8:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
100087ea:	221c      	movs	r2, #28
100087ec:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
100087ee:	3a14      	subs	r2, #20
100087f0:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
100087f2:	3a06      	subs	r2, #6
100087f4:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
100087f6:	e016      	b.n	10008826 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
100087f8:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
100087fa:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
100087fc:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
100087fe:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008800:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008802:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008804:	221c      	movs	r2, #28
10008806:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008808:	3a08      	subs	r2, #8
1000880a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000880c:	3a11      	subs	r2, #17
1000880e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008810:	e009      	b.n	10008826 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008812:	2300      	movs	r3, #0
10008814:	2400      	movs	r4, #0
10008816:	2500      	movs	r5, #0
10008818:	2600      	movs	r6, #0
1000881a:	2700      	movs	r7, #0
1000881c:	2000      	movs	r0, #0
1000881e:	2200      	movs	r2, #0
10008820:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008822:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008824:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008826:	464a      	mov	r2, r9
10008828:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000882a:	2202      	movs	r2, #2
1000882c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000882e:	4642      	mov	r2, r8
10008830:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008832:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008834:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008836:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008838:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000883a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000883c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000883e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008840:	2300      	movs	r3, #0
10008842:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008844:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008846:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008848:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000884a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000884c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000884e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008850:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008852:	2412      	movs	r4, #18
10008854:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008856:	4662      	mov	r2, ip
10008858:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000885a:	466a      	mov	r2, sp
1000885c:	8892      	ldrh	r2, [r2, #4]
1000885e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008860:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008862:	2011      	movs	r0, #17
10008864:	2234      	movs	r2, #52	; 0x34
10008866:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008868:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000886a:	2200      	movs	r2, #0
1000886c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000886e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008870:	3033      	adds	r0, #51	; 0x33
10008872:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008874:	3001      	adds	r0, #1
10008876:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008878:	3001      	adds	r0, #1
1000887a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000887c:	2248      	movs	r2, #72	; 0x48
1000887e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008880:	3202      	adds	r2, #2
10008882:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008884:	3202      	adds	r2, #2
10008886:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008888:	640b      	str	r3, [r1, #64]	; 0x40
1000888a:	b003      	add	sp, #12
1000888c:	bc0c      	pop	{r2, r3}
1000888e:	4690      	mov	r8, r2
10008890:	4699      	mov	r9, r3
10008892:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008894 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008894:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008896:	4b05      	ldr	r3, [pc, #20]	; (100088ac <sms_button_bt0_callback+0x18>)
10008898:	2201      	movs	r2, #1
1000889a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000889c:	7858      	ldrb	r0, [r3, #1]
1000889e:	2300      	movs	r3, #0
100088a0:	2200      	movs	r2, #0
100088a2:	2102      	movs	r1, #2
100088a4:	4c02      	ldr	r4, [pc, #8]	; (100088b0 <sms_button_bt0_callback+0x1c>)
100088a6:	47a0      	blx	r4
}
100088a8:	bd10      	pop	{r4, pc}
100088aa:	46c0      	nop			; (mov r8, r8)
100088ac:	10018810 	.word	0x10018810
100088b0:	1000d09d 	.word	0x1000d09d

100088b4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100088b4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100088b6:	4b05      	ldr	r3, [pc, #20]	; (100088cc <sms_button_bt1_callback+0x18>)
100088b8:	2201      	movs	r2, #1
100088ba:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100088bc:	79d8      	ldrb	r0, [r3, #7]
100088be:	2300      	movs	r3, #0
100088c0:	2200      	movs	r2, #0
100088c2:	2102      	movs	r1, #2
100088c4:	4c02      	ldr	r4, [pc, #8]	; (100088d0 <sms_button_bt1_callback+0x1c>)
100088c6:	47a0      	blx	r4
}
100088c8:	bd10      	pop	{r4, pc}
100088ca:	46c0      	nop			; (mov r8, r8)
100088cc:	10018810 	.word	0x10018810
100088d0:	1000d09d 	.word	0x1000d09d

100088d4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100088d4:	4b08      	ldr	r3, [pc, #32]	; (100088f8 <sms_button_init_variables+0x24>)
100088d6:	2200      	movs	r2, #0
100088d8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
100088da:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
100088dc:	211f      	movs	r1, #31
100088de:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
100088e0:	391e      	subs	r1, #30
100088e2:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
100088e4:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
100088e6:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
100088e8:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
100088ea:	201d      	movs	r0, #29
100088ec:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
100088ee:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
100088f0:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
100088f2:	72da      	strb	r2, [r3, #11]
}
100088f4:	4770      	bx	lr
100088f6:	46c0      	nop			; (mov r8, r8)
100088f8:	10018810 	.word	0x10018810

100088fc <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
100088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100088fe:	4657      	mov	r7, sl
10008900:	464e      	mov	r6, r9
10008902:	4645      	mov	r5, r8
10008904:	b4e0      	push	{r5, r6, r7}
10008906:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008908:	ac01      	add	r4, sp, #4
1000890a:	0020      	movs	r0, r4
1000890c:	4b1d      	ldr	r3, [pc, #116]	; (10008984 <sms_button_gpio_init+0x88>)
1000890e:	469a      	mov	sl, r3
10008910:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008912:	2300      	movs	r3, #0
10008914:	4699      	mov	r9, r3
10008916:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008918:	2302      	movs	r3, #2
1000891a:	4698      	mov	r8, r3
1000891c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000891e:	2701      	movs	r7, #1
10008920:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008922:	4e19      	ldr	r6, [pc, #100]	; (10008988 <sms_button_gpio_init+0x8c>)
10008924:	7870      	ldrb	r0, [r6, #1]
10008926:	0021      	movs	r1, r4
10008928:	4d18      	ldr	r5, [pc, #96]	; (1000898c <sms_button_gpio_init+0x90>)
1000892a:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000892c:	0020      	movs	r0, r4
1000892e:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008930:	464b      	mov	r3, r9
10008932:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008934:	4643      	mov	r3, r8
10008936:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008938:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000893a:	79f0      	ldrb	r0, [r6, #7]
1000893c:	0021      	movs	r1, r4
1000893e:	47a8      	blx	r5
10008940:	2800      	cmp	r0, #0
10008942:	d005      	beq.n	10008950 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008944:	4812      	ldr	r0, [pc, #72]	; (10008990 <sms_button_gpio_init+0x94>)
10008946:	4b13      	ldr	r3, [pc, #76]	; (10008994 <sms_button_gpio_init+0x98>)
10008948:	4798      	blx	r3
1000894a:	4813      	ldr	r0, [pc, #76]	; (10008998 <sms_button_gpio_init+0x9c>)
1000894c:	4b13      	ldr	r3, [pc, #76]	; (1000899c <sms_button_gpio_init+0xa0>)
1000894e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008950:	ac01      	add	r4, sp, #4
10008952:	0020      	movs	r0, r4
10008954:	4b0b      	ldr	r3, [pc, #44]	; (10008984 <sms_button_gpio_init+0x88>)
10008956:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008958:	2300      	movs	r3, #0
1000895a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000895c:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000895e:	0021      	movs	r1, r4
10008960:	2017      	movs	r0, #23
10008962:	4b0a      	ldr	r3, [pc, #40]	; (1000898c <sms_button_gpio_init+0x90>)
10008964:	4798      	blx	r3
10008966:	2800      	cmp	r0, #0
10008968:	d005      	beq.n	10008976 <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000896a:	4809      	ldr	r0, [pc, #36]	; (10008990 <sms_button_gpio_init+0x94>)
1000896c:	4b09      	ldr	r3, [pc, #36]	; (10008994 <sms_button_gpio_init+0x98>)
1000896e:	4798      	blx	r3
10008970:	480b      	ldr	r0, [pc, #44]	; (100089a0 <sms_button_gpio_init+0xa4>)
10008972:	4b0a      	ldr	r3, [pc, #40]	; (1000899c <sms_button_gpio_init+0xa0>)
10008974:	4798      	blx	r3
    }
}
10008976:	b002      	add	sp, #8
10008978:	bc1c      	pop	{r2, r3, r4}
1000897a:	4690      	mov	r8, r2
1000897c:	4699      	mov	r9, r3
1000897e:	46a2      	mov	sl, r4
10008980:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008982:	46c0      	nop			; (mov r8, r8)
10008984:	1000a391 	.word	0x1000a391
10008988:	10018810 	.word	0x10018810
1000898c:	1000a3a1 	.word	0x1000a3a1
10008990:	10015bf0 	.word	0x10015bf0
10008994:	10014ca9 	.word	0x10014ca9
10008998:	10015d58 	.word	0x10015d58
1000899c:	10014b89 	.word	0x10014b89
100089a0:	10015d90 	.word	0x10015d90

100089a4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100089a4:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100089a6:	4d05      	ldr	r5, [pc, #20]	; (100089bc <sms_button_register_callbacks+0x18>)
100089a8:	7868      	ldrb	r0, [r5, #1]
100089aa:	2202      	movs	r2, #2
100089ac:	4904      	ldr	r1, [pc, #16]	; (100089c0 <sms_button_register_callbacks+0x1c>)
100089ae:	4c05      	ldr	r4, [pc, #20]	; (100089c4 <sms_button_register_callbacks+0x20>)
100089b0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100089b2:	79e8      	ldrb	r0, [r5, #7]
100089b4:	2202      	movs	r2, #2
100089b6:	4904      	ldr	r1, [pc, #16]	; (100089c8 <sms_button_register_callbacks+0x24>)
100089b8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100089ba:	bd70      	pop	{r4, r5, r6, pc}
100089bc:	10018810 	.word	0x10018810
100089c0:	10008895 	.word	0x10008895
100089c4:	1000a731 	.word	0x1000a731
100089c8:	100088b5 	.word	0x100088b5

100089cc <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
100089cc:	b510      	push	{r4, lr}
100089ce:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
100089d0:	2800      	cmp	r0, #0
100089d2:	d104      	bne.n	100089de <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
100089d4:	4b0c      	ldr	r3, [pc, #48]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089d6:	7858      	ldrb	r0, [r3, #1]
100089d8:	4b0c      	ldr	r3, [pc, #48]	; (10008a0c <sms_button_toggle_callback+0x40>)
100089da:	4798      	blx	r3
100089dc:	e005      	b.n	100089ea <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
100089de:	2801      	cmp	r0, #1
100089e0:	d103      	bne.n	100089ea <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
100089e2:	4b09      	ldr	r3, [pc, #36]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089e4:	7858      	ldrb	r0, [r3, #1]
100089e6:	4b0a      	ldr	r3, [pc, #40]	; (10008a10 <sms_button_toggle_callback+0x44>)
100089e8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
100089ea:	2c00      	cmp	r4, #0
100089ec:	d104      	bne.n	100089f8 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
100089ee:	4b06      	ldr	r3, [pc, #24]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089f0:	79d8      	ldrb	r0, [r3, #7]
100089f2:	4b06      	ldr	r3, [pc, #24]	; (10008a0c <sms_button_toggle_callback+0x40>)
100089f4:	4798      	blx	r3
100089f6:	e005      	b.n	10008a04 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
100089f8:	2c01      	cmp	r4, #1
100089fa:	d103      	bne.n	10008a04 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
100089fc:	4b02      	ldr	r3, [pc, #8]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089fe:	79d8      	ldrb	r0, [r3, #7]
10008a00:	4b03      	ldr	r3, [pc, #12]	; (10008a10 <sms_button_toggle_callback+0x44>)
10008a02:	4798      	blx	r3
    }
}
10008a04:	bd10      	pop	{r4, pc}
10008a06:	46c0      	nop			; (mov r8, r8)
10008a08:	10018810 	.word	0x10018810
10008a0c:	1000a801 	.word	0x1000a801
10008a10:	1000a85d 	.word	0x1000a85d

10008a14 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008a14:	b510      	push	{r4, lr}
10008a16:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008a18:	466b      	mov	r3, sp
10008a1a:	1dda      	adds	r2, r3, #7
10008a1c:	2300      	movs	r3, #0
10008a1e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008a20:	4c09      	ldr	r4, [pc, #36]	; (10008a48 <sms_button_define_services+0x34>)
10008a22:	0021      	movs	r1, r4
10008a24:	2000      	movs	r0, #0
10008a26:	4b09      	ldr	r3, [pc, #36]	; (10008a4c <sms_button_define_services+0x38>)
10008a28:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008a2a:	0020      	movs	r0, r4
10008a2c:	4b08      	ldr	r3, [pc, #32]	; (10008a50 <sms_button_define_services+0x3c>)
10008a2e:	4798      	blx	r3
10008a30:	1e04      	subs	r4, r0, #0
10008a32:	d006      	beq.n	10008a42 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008a34:	4807      	ldr	r0, [pc, #28]	; (10008a54 <sms_button_define_services+0x40>)
10008a36:	4b08      	ldr	r3, [pc, #32]	; (10008a58 <sms_button_define_services+0x44>)
10008a38:	4798      	blx	r3
10008a3a:	0021      	movs	r1, r4
10008a3c:	4807      	ldr	r0, [pc, #28]	; (10008a5c <sms_button_define_services+0x48>)
10008a3e:	4b08      	ldr	r3, [pc, #32]	; (10008a60 <sms_button_define_services+0x4c>)
10008a40:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
10008a42:	b002      	add	sp, #8
10008a44:	bd10      	pop	{r4, pc}
10008a46:	46c0      	nop			; (mov r8, r8)
10008a48:	10018820 	.word	0x10018820
10008a4c:	100087ad 	.word	0x100087ad
10008a50:	10008789 	.word	0x10008789
10008a54:	10015bf0 	.word	0x10015bf0
10008a58:	10014ca9 	.word	0x10014ca9
10008a5c:	10015e00 	.word	0x10015e00
10008a60:	10014b89 	.word	0x10014b89

10008a64 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008a64:	b510      	push	{r4, lr}
10008a66:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008a68:	ac01      	add	r4, sp, #4
10008a6a:	0020      	movs	r0, r4
10008a6c:	4b15      	ldr	r3, [pc, #84]	; (10008ac4 <sms_monitor_configure_gpio+0x60>)
10008a6e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008a70:	2301      	movs	r3, #1
10008a72:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008a74:	0021      	movs	r1, r4
10008a76:	200e      	movs	r0, #14
10008a78:	4b13      	ldr	r3, [pc, #76]	; (10008ac8 <sms_monitor_configure_gpio+0x64>)
10008a7a:	4798      	blx	r3
10008a7c:	2800      	cmp	r0, #0
10008a7e:	d005      	beq.n	10008a8c <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008a80:	4812      	ldr	r0, [pc, #72]	; (10008acc <sms_monitor_configure_gpio+0x68>)
10008a82:	4b13      	ldr	r3, [pc, #76]	; (10008ad0 <sms_monitor_configure_gpio+0x6c>)
10008a84:	4798      	blx	r3
10008a86:	4813      	ldr	r0, [pc, #76]	; (10008ad4 <sms_monitor_configure_gpio+0x70>)
10008a88:	4b13      	ldr	r3, [pc, #76]	; (10008ad8 <sms_monitor_configure_gpio+0x74>)
10008a8a:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008a8c:	2100      	movs	r1, #0
10008a8e:	200e      	movs	r0, #14
10008a90:	4b12      	ldr	r3, [pc, #72]	; (10008adc <sms_monitor_configure_gpio+0x78>)
10008a92:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008a94:	ac01      	add	r4, sp, #4
10008a96:	0020      	movs	r0, r4
10008a98:	4b0a      	ldr	r3, [pc, #40]	; (10008ac4 <sms_monitor_configure_gpio+0x60>)
10008a9a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008a9c:	2301      	movs	r3, #1
10008a9e:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008aa0:	0021      	movs	r1, r4
10008aa2:	200f      	movs	r0, #15
10008aa4:	4b08      	ldr	r3, [pc, #32]	; (10008ac8 <sms_monitor_configure_gpio+0x64>)
10008aa6:	4798      	blx	r3
10008aa8:	2800      	cmp	r0, #0
10008aaa:	d005      	beq.n	10008ab8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008aac:	4807      	ldr	r0, [pc, #28]	; (10008acc <sms_monitor_configure_gpio+0x68>)
10008aae:	4b08      	ldr	r3, [pc, #32]	; (10008ad0 <sms_monitor_configure_gpio+0x6c>)
10008ab0:	4798      	blx	r3
10008ab2:	4808      	ldr	r0, [pc, #32]	; (10008ad4 <sms_monitor_configure_gpio+0x70>)
10008ab4:	4b08      	ldr	r3, [pc, #32]	; (10008ad8 <sms_monitor_configure_gpio+0x74>)
10008ab6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008ab8:	2100      	movs	r1, #0
10008aba:	200f      	movs	r0, #15
10008abc:	4b07      	ldr	r3, [pc, #28]	; (10008adc <sms_monitor_configure_gpio+0x78>)
10008abe:	4798      	blx	r3
}
10008ac0:	b002      	add	sp, #8
10008ac2:	bd10      	pop	{r4, pc}
10008ac4:	1000a391 	.word	0x1000a391
10008ac8:	1000a3a1 	.word	0x1000a3a1
10008acc:	10015bf0 	.word	0x10015bf0
10008ad0:	10014ca9 	.word	0x10014ca9
10008ad4:	10015e44 	.word	0x10015e44
10008ad8:	10014b89 	.word	0x10014b89
10008adc:	1000a559 	.word	0x1000a559

10008ae0 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008ae0:	4b04      	ldr	r3, [pc, #16]	; (10008af4 <sms_monitor_get_states+0x14>)
10008ae2:	781b      	ldrb	r3, [r3, #0]
10008ae4:	4b04      	ldr	r3, [pc, #16]	; (10008af8 <sms_monitor_get_states+0x18>)
10008ae6:	781b      	ldrb	r3, [r3, #0]
10008ae8:	4b04      	ldr	r3, [pc, #16]	; (10008afc <sms_monitor_get_states+0x1c>)
10008aea:	781b      	ldrb	r3, [r3, #0]
10008aec:	4b04      	ldr	r3, [pc, #16]	; (10008b00 <sms_monitor_get_states+0x20>)
10008aee:	781b      	ldrb	r3, [r3, #0]
}
10008af0:	4770      	bx	lr
10008af2:	46c0      	nop			; (mov r8, r8)
10008af4:	100187f4 	.word	0x100187f4
10008af8:	10018718 	.word	0x10018718
10008afc:	10018933 	.word	0x10018933
10008b00:	100187f0 	.word	0x100187f0

10008b04 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008b04:	b530      	push	{r4, r5, lr}
10008b06:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008b08:	2010      	movs	r0, #16
10008b0a:	4c14      	ldr	r4, [pc, #80]	; (10008b5c <sms_i2c_master_configure+0x58>)
10008b0c:	47a0      	blx	r4
10008b0e:	4b14      	ldr	r3, [pc, #80]	; (10008b60 <sms_i2c_master_configure+0x5c>)
10008b10:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008b12:	2010      	movs	r0, #16
10008b14:	47a0      	blx	r4
10008b16:	4b13      	ldr	r3, [pc, #76]	; (10008b64 <sms_i2c_master_configure+0x60>)
10008b18:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008b1a:	ac01      	add	r4, sp, #4
10008b1c:	0020      	movs	r0, r4
10008b1e:	4b12      	ldr	r3, [pc, #72]	; (10008b68 <sms_i2c_master_configure+0x64>)
10008b20:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008b22:	2303      	movs	r3, #3
10008b24:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008b26:	331b      	adds	r3, #27
10008b28:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008b2a:	3b16      	subs	r3, #22
10008b2c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008b2e:	3301      	adds	r3, #1
10008b30:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008b32:	3b07      	subs	r3, #7
10008b34:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008b36:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008b38:	4d0c      	ldr	r5, [pc, #48]	; (10008b6c <sms_i2c_master_configure+0x68>)
10008b3a:	4c0d      	ldr	r4, [pc, #52]	; (10008b70 <sms_i2c_master_configure+0x6c>)
10008b3c:	aa01      	add	r2, sp, #4
10008b3e:	490d      	ldr	r1, [pc, #52]	; (10008b74 <sms_i2c_master_configure+0x70>)
10008b40:	0028      	movs	r0, r5
10008b42:	47a0      	blx	r4
10008b44:	2800      	cmp	r0, #0
10008b46:	d1f9      	bne.n	10008b3c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008b48:	4b08      	ldr	r3, [pc, #32]	; (10008b6c <sms_i2c_master_configure+0x68>)
10008b4a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008b4c:	2128      	movs	r1, #40	; 0x28
10008b4e:	5c53      	ldrb	r3, [r2, r1]
10008b50:	07db      	lsls	r3, r3, #31
10008b52:	d4fc      	bmi.n	10008b4e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008b54:	2301      	movs	r3, #1
10008b56:	7513      	strb	r3, [r2, #20]
}
10008b58:	b007      	add	sp, #28
10008b5a:	bd30      	pop	{r4, r5, pc}
10008b5c:	100149fd 	.word	0x100149fd
10008b60:	1001893c 	.word	0x1001893c
10008b64:	1001891c 	.word	0x1001891c
10008b68:	10008305 	.word	0x10008305
10008b6c:	10018928 	.word	0x10018928
10008b70:	1000831d 	.word	0x1000831d
10008b74:	40003000 	.word	0x40003000

10008b78 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008b7a:	4c12      	ldr	r4, [pc, #72]	; (10008bc4 <sms_i2c_master_write+0x4c>)
10008b7c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008b7e:	1c50      	adds	r0, r2, #1
10008b80:	b2c0      	uxtb	r0, r0
10008b82:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008b84:	6860      	ldr	r0, [r4, #4]
10008b86:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008b88:	2a00      	cmp	r2, #0
10008b8a:	d00e      	beq.n	10008baa <sms_i2c_master_write+0x32>
10008b8c:	2000      	movs	r0, #0
10008b8e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008b90:	5c18      	ldrb	r0, [r3, r0]
10008b92:	6865      	ldr	r5, [r4, #4]
10008b94:	5468      	strb	r0, [r5, r1]
10008b96:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008b98:	b2c9      	uxtb	r1, r1
10008b9a:	428a      	cmp	r2, r1
10008b9c:	d8f7      	bhi.n	10008b8e <sms_i2c_master_write+0x16>
10008b9e:	e004      	b.n	10008baa <sms_i2c_master_write+0x32>
10008ba0:	3c01      	subs	r4, #1
10008ba2:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008ba4:	2c00      	cmp	r4, #0
10008ba6:	d104      	bne.n	10008bb2 <sms_i2c_master_write+0x3a>
10008ba8:	e009      	b.n	10008bbe <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008baa:	4c07      	ldr	r4, [pc, #28]	; (10008bc8 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008bac:	4e05      	ldr	r6, [pc, #20]	; (10008bc4 <sms_i2c_master_write+0x4c>)
10008bae:	4d07      	ldr	r5, [pc, #28]	; (10008bcc <sms_i2c_master_write+0x54>)
10008bb0:	4f07      	ldr	r7, [pc, #28]	; (10008bd0 <sms_i2c_master_write+0x58>)
10008bb2:	0031      	movs	r1, r6
10008bb4:	0028      	movs	r0, r5
10008bb6:	47b8      	blx	r7
10008bb8:	2800      	cmp	r0, #0
10008bba:	d1f1      	bne.n	10008ba0 <sms_i2c_master_write+0x28>
10008bbc:	e001      	b.n	10008bc2 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008bbe:	2001      	movs	r0, #1
10008bc0:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008bc4:	1001893c 	.word	0x1001893c
10008bc8:	000003e9 	.word	0x000003e9
10008bcc:	10018928 	.word	0x10018928
10008bd0:	100083b5 	.word	0x100083b5

10008bd4 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008bd6:	4647      	mov	r7, r8
10008bd8:	b480      	push	{r7}
10008bda:	0017      	movs	r7, r2
10008bdc:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008bde:	b280      	uxth	r0, r0
10008be0:	4b1d      	ldr	r3, [pc, #116]	; (10008c58 <sms_i2c_master_read+0x84>)
10008be2:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008be4:	2201      	movs	r2, #1
10008be6:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008be8:	685b      	ldr	r3, [r3, #4]
10008bea:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008bec:	4b1b      	ldr	r3, [pc, #108]	; (10008c5c <sms_i2c_master_read+0x88>)
10008bee:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008bf0:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008bf2:	4c1b      	ldr	r4, [pc, #108]	; (10008c60 <sms_i2c_master_read+0x8c>)
10008bf4:	4e18      	ldr	r6, [pc, #96]	; (10008c58 <sms_i2c_master_read+0x84>)
10008bf6:	4d1b      	ldr	r5, [pc, #108]	; (10008c64 <sms_i2c_master_read+0x90>)
10008bf8:	e003      	b.n	10008c02 <sms_i2c_master_read+0x2e>
10008bfa:	3c01      	subs	r4, #1
10008bfc:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008bfe:	2c00      	cmp	r4, #0
10008c00:	d01f      	beq.n	10008c42 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008c02:	0031      	movs	r1, r6
10008c04:	4818      	ldr	r0, [pc, #96]	; (10008c68 <sms_i2c_master_read+0x94>)
10008c06:	47a8      	blx	r5
10008c08:	2800      	cmp	r0, #0
10008c0a:	d1f6      	bne.n	10008bfa <sms_i2c_master_read+0x26>
10008c0c:	4e14      	ldr	r6, [pc, #80]	; (10008c60 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008c0e:	4d13      	ldr	r5, [pc, #76]	; (10008c5c <sms_i2c_master_read+0x88>)
10008c10:	4c16      	ldr	r4, [pc, #88]	; (10008c6c <sms_i2c_master_read+0x98>)
10008c12:	e003      	b.n	10008c1c <sms_i2c_master_read+0x48>
10008c14:	3e01      	subs	r6, #1
10008c16:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008c18:	2e00      	cmp	r6, #0
10008c1a:	d015      	beq.n	10008c48 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008c1c:	0029      	movs	r1, r5
10008c1e:	4812      	ldr	r0, [pc, #72]	; (10008c68 <sms_i2c_master_read+0x94>)
10008c20:	47a0      	blx	r4
10008c22:	2800      	cmp	r0, #0
10008c24:	d1f6      	bne.n	10008c14 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008c26:	2f00      	cmp	r7, #0
10008c28:	d011      	beq.n	10008c4e <sms_i2c_master_read+0x7a>
10008c2a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008c2c:	490b      	ldr	r1, [pc, #44]	; (10008c5c <sms_i2c_master_read+0x88>)
10008c2e:	684a      	ldr	r2, [r1, #4]
10008c30:	5cd2      	ldrb	r2, [r2, r3]
10008c32:	4640      	mov	r0, r8
10008c34:	54c2      	strb	r2, [r0, r3]
10008c36:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008c38:	b2da      	uxtb	r2, r3
10008c3a:	4297      	cmp	r7, r2
10008c3c:	d8f7      	bhi.n	10008c2e <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008c3e:	2000      	movs	r0, #0
10008c40:	e006      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008c42:	2001      	movs	r0, #1
10008c44:	4240      	negs	r0, r0
10008c46:	e003      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008c48:	2001      	movs	r0, #1
10008c4a:	4240      	negs	r0, r0
10008c4c:	e000      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008c4e:	2000      	movs	r0, #0
10008c50:	bc04      	pop	{r2}
10008c52:	4690      	mov	r8, r2
10008c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c56:	46c0      	nop			; (mov r8, r8)
10008c58:	1001893c 	.word	0x1001893c
10008c5c:	1001891c 	.word	0x1001891c
10008c60:	000003e9 	.word	0x000003e9
10008c64:	100083d9 	.word	0x100083d9
10008c68:	10018928 	.word	0x10018928
10008c6c:	10008391 	.word	0x10008391

10008c70 <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008c70:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
10008c72:	2344      	movs	r3, #68	; 0x44
10008c74:	4a06      	ldr	r2, [pc, #24]	; (10008c90 <sms_mpu_interrupt_callback+0x20>)
10008c76:	5cd3      	ldrb	r3, [r2, r3]
10008c78:	2b00      	cmp	r3, #0
10008c7a:	d008      	beq.n	10008c8e <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
10008c7c:	2101      	movs	r1, #1
10008c7e:	2345      	movs	r3, #69	; 0x45
10008c80:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008c82:	2300      	movs	r3, #0
10008c84:	2200      	movs	r2, #0
10008c86:	3101      	adds	r1, #1
10008c88:	201e      	movs	r0, #30
10008c8a:	4c02      	ldr	r4, [pc, #8]	; (10008c94 <sms_mpu_interrupt_callback+0x24>)
10008c8c:	47a0      	blx	r4
	}
}
10008c8e:	bd10      	pop	{r4, pc}
10008c90:	1001871c 	.word	0x1001871c
10008c94:	1000d09d 	.word	0x1000d09d

10008c98 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
10008c98:	b510      	push	{r4, lr}
10008c9a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008c9c:	ac01      	add	r4, sp, #4
10008c9e:	0020      	movs	r0, r4
10008ca0:	4b0a      	ldr	r3, [pc, #40]	; (10008ccc <sms_mpu_configure_gpio+0x34>)
10008ca2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008ca4:	2300      	movs	r3, #0
10008ca6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008ca8:	3302      	adds	r3, #2
10008caa:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008cac:	3b01      	subs	r3, #1
10008cae:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008cb0:	0021      	movs	r1, r4
10008cb2:	201e      	movs	r0, #30
10008cb4:	4b06      	ldr	r3, [pc, #24]	; (10008cd0 <sms_mpu_configure_gpio+0x38>)
10008cb6:	4798      	blx	r3
10008cb8:	2800      	cmp	r0, #0
10008cba:	d005      	beq.n	10008cc8 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008cbc:	4805      	ldr	r0, [pc, #20]	; (10008cd4 <sms_mpu_configure_gpio+0x3c>)
10008cbe:	4b06      	ldr	r3, [pc, #24]	; (10008cd8 <sms_mpu_configure_gpio+0x40>)
10008cc0:	4798      	blx	r3
10008cc2:	4806      	ldr	r0, [pc, #24]	; (10008cdc <sms_mpu_configure_gpio+0x44>)
10008cc4:	4b06      	ldr	r3, [pc, #24]	; (10008ce0 <sms_mpu_configure_gpio+0x48>)
10008cc6:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10008cc8:	b002      	add	sp, #8
10008cca:	bd10      	pop	{r4, pc}
10008ccc:	1000a391 	.word	0x1000a391
10008cd0:	1000a3a1 	.word	0x1000a3a1
10008cd4:	10015bf0 	.word	0x10015bf0
10008cd8:	10014ca9 	.word	0x10014ca9
10008cdc:	10015e64 	.word	0x10015e64
10008ce0:	10014b89 	.word	0x10014b89

10008ce4 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10008ce4:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10008ce6:	2202      	movs	r2, #2
10008ce8:	4902      	ldr	r1, [pc, #8]	; (10008cf4 <sms_mpu_register_callbacks+0x10>)
10008cea:	201e      	movs	r0, #30
10008cec:	4b02      	ldr	r3, [pc, #8]	; (10008cf8 <sms_mpu_register_callbacks+0x14>)
10008cee:	4798      	blx	r3
}
10008cf0:	bd10      	pop	{r4, pc}
10008cf2:	46c0      	nop			; (mov r8, r8)
10008cf4:	10008c71 	.word	0x10008c71
10008cf8:	1000a731 	.word	0x1000a731

10008cfc <sms_mpu_define_services>:
	
    return 0;
}

void sms_mpu_define_services(void)
{
10008cfc:	b510      	push	{r4, lr}
10008cfe:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008d00:	466b      	mov	r3, sp
10008d02:	1dda      	adds	r2, r3, #7
10008d04:	2300      	movs	r3, #0
10008d06:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
10008d08:	4c09      	ldr	r4, [pc, #36]	; (10008d30 <sms_mpu_define_services+0x34>)
10008d0a:	0021      	movs	r1, r4
10008d0c:	2002      	movs	r0, #2
10008d0e:	4b09      	ldr	r3, [pc, #36]	; (10008d34 <sms_mpu_define_services+0x38>)
10008d10:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
10008d12:	0020      	movs	r0, r4
10008d14:	4b08      	ldr	r3, [pc, #32]	; (10008d38 <sms_mpu_define_services+0x3c>)
10008d16:	4798      	blx	r3
10008d18:	1e04      	subs	r4, r0, #0
10008d1a:	d006      	beq.n	10008d2a <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10008d1c:	4807      	ldr	r0, [pc, #28]	; (10008d3c <sms_mpu_define_services+0x40>)
10008d1e:	4b08      	ldr	r3, [pc, #32]	; (10008d40 <sms_mpu_define_services+0x44>)
10008d20:	4798      	blx	r3
10008d22:	0021      	movs	r1, r4
10008d24:	4807      	ldr	r0, [pc, #28]	; (10008d44 <sms_mpu_define_services+0x48>)
10008d26:	4b08      	ldr	r3, [pc, #32]	; (10008d48 <sms_mpu_define_services+0x4c>)
10008d28:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}
10008d2a:	b002      	add	sp, #8
10008d2c:	bd10      	pop	{r4, pc}
10008d2e:	46c0      	nop			; (mov r8, r8)
10008d30:	10018790 	.word	0x10018790
10008d34:	100087ad 	.word	0x100087ad
10008d38:	10008789 	.word	0x10008789
10008d3c:	10015bf0 	.word	0x10015bf0
10008d40:	10014ca9 	.word	0x10014ca9
10008d44:	10015ea4 	.word	0x10015ea4
10008d48:	10014b89 	.word	0x10014b89

10008d4c <writeByte>:
	}

}

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10008d4c:	b510      	push	{r4, lr}
10008d4e:	b082      	sub	sp, #8
10008d50:	466b      	mov	r3, sp
10008d52:	3307      	adds	r3, #7
10008d54:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10008d56:	2201      	movs	r2, #1
10008d58:	4c01      	ldr	r4, [pc, #4]	; (10008d60 <writeByte+0x14>)
10008d5a:	47a0      	blx	r4
}
10008d5c:	b002      	add	sp, #8
10008d5e:	bd10      	pop	{r4, pc}
10008d60:	10008b79 	.word	0x10008b79

10008d64 <sms_mpu_calibrate>:
	}
	return retVal;
}

void sms_mpu_calibrate(float *dest1, float *dest2)
{
10008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10008d66:	465f      	mov	r7, fp
10008d68:	4656      	mov	r6, sl
10008d6a:	464d      	mov	r5, r9
10008d6c:	4644      	mov	r4, r8
10008d6e:	b4f0      	push	{r4, r5, r6, r7}
10008d70:	b093      	sub	sp, #76	; 0x4c
10008d72:	9007      	str	r0, [sp, #28]
10008d74:	9108      	str	r1, [sp, #32]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10008d76:	2280      	movs	r2, #128	; 0x80
10008d78:	216b      	movs	r1, #107	; 0x6b
10008d7a:	2069      	movs	r0, #105	; 0x69
10008d7c:	4ce7      	ldr	r4, [pc, #924]	; (1000911c <sms_mpu_calibrate+0x3b8>)
10008d7e:	47a0      	blx	r4
	delay_ms(100);
10008d80:	2064      	movs	r0, #100	; 0x64
10008d82:	4de7      	ldr	r5, [pc, #924]	; (10009120 <sms_mpu_calibrate+0x3bc>)
10008d84:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10008d86:	2201      	movs	r2, #1
10008d88:	216b      	movs	r1, #107	; 0x6b
10008d8a:	2069      	movs	r0, #105	; 0x69
10008d8c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10008d8e:	2200      	movs	r2, #0
10008d90:	216c      	movs	r1, #108	; 0x6c
10008d92:	2069      	movs	r0, #105	; 0x69
10008d94:	47a0      	blx	r4
	delay_ms(200);
10008d96:	20c8      	movs	r0, #200	; 0xc8
10008d98:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10008d9a:	2200      	movs	r2, #0
10008d9c:	2138      	movs	r1, #56	; 0x38
10008d9e:	2069      	movs	r0, #105	; 0x69
10008da0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10008da2:	2200      	movs	r2, #0
10008da4:	2123      	movs	r1, #35	; 0x23
10008da6:	2069      	movs	r0, #105	; 0x69
10008da8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10008daa:	2200      	movs	r2, #0
10008dac:	216b      	movs	r1, #107	; 0x6b
10008dae:	2069      	movs	r0, #105	; 0x69
10008db0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10008db2:	2200      	movs	r2, #0
10008db4:	2124      	movs	r1, #36	; 0x24
10008db6:	2069      	movs	r0, #105	; 0x69
10008db8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10008dba:	2200      	movs	r2, #0
10008dbc:	216a      	movs	r1, #106	; 0x6a
10008dbe:	2069      	movs	r0, #105	; 0x69
10008dc0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10008dc2:	220c      	movs	r2, #12
10008dc4:	216a      	movs	r1, #106	; 0x6a
10008dc6:	2069      	movs	r0, #105	; 0x69
10008dc8:	47a0      	blx	r4
	delay_ms(15);
10008dca:	200f      	movs	r0, #15
10008dcc:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10008dce:	2201      	movs	r2, #1
10008dd0:	211a      	movs	r1, #26
10008dd2:	2069      	movs	r0, #105	; 0x69
10008dd4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10008dd6:	2200      	movs	r2, #0
10008dd8:	2119      	movs	r1, #25
10008dda:	2069      	movs	r0, #105	; 0x69
10008ddc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10008dde:	2200      	movs	r2, #0
10008de0:	211b      	movs	r1, #27
10008de2:	2069      	movs	r0, #105	; 0x69
10008de4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10008de6:	2200      	movs	r2, #0
10008de8:	211c      	movs	r1, #28
10008dea:	2069      	movs	r0, #105	; 0x69
10008dec:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10008dee:	2240      	movs	r2, #64	; 0x40
10008df0:	216a      	movs	r1, #106	; 0x6a
10008df2:	2069      	movs	r0, #105	; 0x69
10008df4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10008df6:	2278      	movs	r2, #120	; 0x78
10008df8:	2123      	movs	r1, #35	; 0x23
10008dfa:	2069      	movs	r0, #105	; 0x69
10008dfc:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10008dfe:	2028      	movs	r0, #40	; 0x28
10008e00:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10008e02:	2200      	movs	r2, #0
10008e04:	2123      	movs	r1, #35	; 0x23
10008e06:	2069      	movs	r0, #105	; 0x69
10008e08:	47a0      	blx	r4
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008e0a:	ac0f      	add	r4, sp, #60	; 0x3c
10008e0c:	0023      	movs	r3, r4
10008e0e:	2202      	movs	r2, #2
10008e10:	2172      	movs	r1, #114	; 0x72
10008e12:	2069      	movs	r0, #105	; 0x69
10008e14:	4dc3      	ldr	r5, [pc, #780]	; (10009124 <sms_mpu_calibrate+0x3c0>)
10008e16:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10008e18:	7820      	ldrb	r0, [r4, #0]
10008e1a:	0200      	lsls	r0, r0, #8
10008e1c:	7863      	ldrb	r3, [r4, #1]
10008e1e:	4318      	orrs	r0, r3
10008e20:	210c      	movs	r1, #12
10008e22:	4bc1      	ldr	r3, [pc, #772]	; (10009128 <sms_mpu_calibrate+0x3c4>)
10008e24:	4798      	blx	r3
10008e26:	b283      	uxth	r3, r0
10008e28:	9306      	str	r3, [sp, #24]
	
	for (ii = 0; ii < packet_count; ii++) {
10008e2a:	2b00      	cmp	r3, #0
10008e2c:	d042      	beq.n	10008eb4 <sms_mpu_calibrate+0x150>
10008e2e:	2300      	movs	r3, #0
10008e30:	4698      	mov	r8, r3
10008e32:	2700      	movs	r7, #0
10008e34:	469b      	mov	fp, r3
10008e36:	469a      	mov	sl, r3
10008e38:	4699      	mov	r9, r3
10008e3a:	2500      	movs	r5, #0
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008e3c:	ac0f      	add	r4, sp, #60	; 0x3c
10008e3e:	9305      	str	r3, [sp, #20]
10008e40:	0023      	movs	r3, r4
10008e42:	220c      	movs	r2, #12
10008e44:	2174      	movs	r1, #116	; 0x74
10008e46:	2069      	movs	r0, #105	; 0x69
10008e48:	4eb6      	ldr	r6, [pc, #728]	; (10009124 <sms_mpu_calibrate+0x3c0>)
10008e4a:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10008e4c:	7823      	ldrb	r3, [r4, #0]
10008e4e:	021b      	lsls	r3, r3, #8
10008e50:	7862      	ldrb	r2, [r4, #1]
10008e52:	4313      	orrs	r3, r2
10008e54:	b21b      	sxth	r3, r3
10008e56:	9a05      	ldr	r2, [sp, #20]
10008e58:	4694      	mov	ip, r2
10008e5a:	449c      	add	ip, r3
10008e5c:	4663      	mov	r3, ip
10008e5e:	9305      	str	r3, [sp, #20]
		accel_bias[1] += (int32_t) accel_temp[1];
10008e60:	78a3      	ldrb	r3, [r4, #2]
10008e62:	021b      	lsls	r3, r3, #8
10008e64:	78e2      	ldrb	r2, [r4, #3]
10008e66:	4313      	orrs	r3, r2
10008e68:	b21b      	sxth	r3, r3
10008e6a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10008e6c:	7923      	ldrb	r3, [r4, #4]
10008e6e:	021b      	lsls	r3, r3, #8
10008e70:	7962      	ldrb	r2, [r4, #5]
10008e72:	4313      	orrs	r3, r2
10008e74:	b21b      	sxth	r3, r3
10008e76:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10008e78:	79a3      	ldrb	r3, [r4, #6]
10008e7a:	021b      	lsls	r3, r3, #8
10008e7c:	79e2      	ldrb	r2, [r4, #7]
10008e7e:	4313      	orrs	r3, r2
10008e80:	b21b      	sxth	r3, r3
10008e82:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10008e84:	7a23      	ldrb	r3, [r4, #8]
10008e86:	021b      	lsls	r3, r3, #8
10008e88:	7a62      	ldrb	r2, [r4, #9]
10008e8a:	4313      	orrs	r3, r2
10008e8c:	b21b      	sxth	r3, r3
10008e8e:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10008e90:	7aa3      	ldrb	r3, [r4, #10]
10008e92:	021b      	lsls	r3, r3, #8
10008e94:	7ae2      	ldrb	r2, [r4, #11]
10008e96:	4313      	orrs	r3, r2
10008e98:	b21b      	sxth	r3, r3
10008e9a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10008e9c:	3501      	adds	r5, #1
10008e9e:	b2ad      	uxth	r5, r5
10008ea0:	9b06      	ldr	r3, [sp, #24]
10008ea2:	42ab      	cmp	r3, r5
10008ea4:	d1cc      	bne.n	10008e40 <sms_mpu_calibrate+0xdc>
10008ea6:	4653      	mov	r3, sl
10008ea8:	46ba      	mov	sl, r7
10008eaa:	465a      	mov	r2, fp
10008eac:	46e3      	mov	fp, ip
10008eae:	0016      	movs	r6, r2
10008eb0:	001f      	movs	r7, r3
10008eb2:	e006      	b.n	10008ec2 <sms_mpu_calibrate+0x15e>

void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10008eb4:	2300      	movs	r3, #0
10008eb6:	4698      	mov	r8, r3
10008eb8:	2700      	movs	r7, #0
10008eba:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10008ebc:	469b      	mov	fp, r3
10008ebe:	469a      	mov	sl, r3
10008ec0:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10008ec2:	4c9a      	ldr	r4, [pc, #616]	; (1000912c <sms_mpu_calibrate+0x3c8>)
10008ec4:	9906      	ldr	r1, [sp, #24]
10008ec6:	4658      	mov	r0, fp
10008ec8:	47a0      	blx	r4
10008eca:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10008ecc:	9b06      	ldr	r3, [sp, #24]
10008ece:	469b      	mov	fp, r3
10008ed0:	0019      	movs	r1, r3
10008ed2:	4650      	mov	r0, sl
10008ed4:	47a0      	blx	r4
10008ed6:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10008ed8:	4659      	mov	r1, fp
10008eda:	4648      	mov	r0, r9
10008edc:	47a0      	blx	r4
10008ede:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10008ee0:	4659      	mov	r1, fp
10008ee2:	4640      	mov	r0, r8
10008ee4:	47a0      	blx	r4
10008ee6:	9009      	str	r0, [sp, #36]	; 0x24
	gyro_bias[1]  /= (int32_t) packet_count;
10008ee8:	4659      	mov	r1, fp
10008eea:	0038      	movs	r0, r7
10008eec:	47a0      	blx	r4
10008eee:	9005      	str	r0, [sp, #20]
	gyro_bias[2]  /= (int32_t) packet_count;
10008ef0:	4659      	mov	r1, fp
10008ef2:	0030      	movs	r0, r6
10008ef4:	47a0      	blx	r4
10008ef6:	9006      	str	r0, [sp, #24]
	
	if(accel_bias[2] > 0L) {
10008ef8:	464b      	mov	r3, r9
10008efa:	2b00      	cmp	r3, #0
10008efc:	dd03      	ble.n	10008f06 <sms_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10008efe:	4e8c      	ldr	r6, [pc, #560]	; (10009130 <sms_mpu_calibrate+0x3cc>)
10008f00:	444e      	add	r6, r9
10008f02:	46b3      	mov	fp, r6
10008f04:	e003      	b.n	10008f0e <sms_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10008f06:	2680      	movs	r6, #128	; 0x80
10008f08:	01f6      	lsls	r6, r6, #7
10008f0a:	444e      	add	r6, r9
10008f0c:	46b3      	mov	fp, r6
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10008f0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008f10:	4271      	negs	r1, r6
10008f12:	17ca      	asrs	r2, r1, #31
10008f14:	2303      	movs	r3, #3
10008f16:	401a      	ands	r2, r3
10008f18:	1852      	adds	r2, r2, r1
10008f1a:	1091      	asrs	r1, r2, #2
10008f1c:	1292      	asrs	r2, r2, #10
10008f1e:	b2d2      	uxtb	r2, r2
10008f20:	ac0f      	add	r4, sp, #60	; 0x3c
10008f22:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10008f24:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10008f26:	9905      	ldr	r1, [sp, #20]
10008f28:	4248      	negs	r0, r1
10008f2a:	17c1      	asrs	r1, r0, #31
10008f2c:	4019      	ands	r1, r3
10008f2e:	1809      	adds	r1, r1, r0
10008f30:	1088      	asrs	r0, r1, #2
10008f32:	1289      	asrs	r1, r1, #10
10008f34:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10008f36:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10008f38:	9f06      	ldr	r7, [sp, #24]
10008f3a:	4279      	negs	r1, r7
10008f3c:	17c8      	asrs	r0, r1, #31
10008f3e:	4003      	ands	r3, r0
10008f40:	185b      	adds	r3, r3, r1
10008f42:	1099      	asrs	r1, r3, #2
10008f44:	129b      	asrs	r3, r3, #10
10008f46:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10008f48:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10008f4a:	2113      	movs	r1, #19
10008f4c:	2069      	movs	r0, #105	; 0x69
10008f4e:	4f73      	ldr	r7, [pc, #460]	; (1000911c <sms_mpu_calibrate+0x3b8>)
10008f50:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10008f52:	7862      	ldrb	r2, [r4, #1]
10008f54:	2114      	movs	r1, #20
10008f56:	2069      	movs	r0, #105	; 0x69
10008f58:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10008f5a:	78a2      	ldrb	r2, [r4, #2]
10008f5c:	2115      	movs	r1, #21
10008f5e:	2069      	movs	r0, #105	; 0x69
10008f60:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10008f62:	78e2      	ldrb	r2, [r4, #3]
10008f64:	2116      	movs	r1, #22
10008f66:	2069      	movs	r0, #105	; 0x69
10008f68:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10008f6a:	7922      	ldrb	r2, [r4, #4]
10008f6c:	2117      	movs	r1, #23
10008f6e:	2069      	movs	r0, #105	; 0x69
10008f70:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10008f72:	7962      	ldrb	r2, [r4, #5]
10008f74:	2118      	movs	r1, #24
10008f76:	2069      	movs	r0, #105	; 0x69
10008f78:	47b8      	blx	r7
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10008f7a:	4a6e      	ldr	r2, [pc, #440]	; (10009134 <sms_mpu_calibrate+0x3d0>)
10008f7c:	4690      	mov	r8, r2
10008f7e:	0030      	movs	r0, r6
10008f80:	4790      	blx	r2
10008f82:	4f6d      	ldr	r7, [pc, #436]	; (10009138 <sms_mpu_calibrate+0x3d4>)
10008f84:	496d      	ldr	r1, [pc, #436]	; (1000913c <sms_mpu_calibrate+0x3d8>)
10008f86:	47b8      	blx	r7
10008f88:	9e07      	ldr	r6, [sp, #28]
10008f8a:	6030      	str	r0, [r6, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10008f8c:	9805      	ldr	r0, [sp, #20]
10008f8e:	47c0      	blx	r8
10008f90:	496a      	ldr	r1, [pc, #424]	; (1000913c <sms_mpu_calibrate+0x3d8>)
10008f92:	47b8      	blx	r7
10008f94:	6070      	str	r0, [r6, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10008f96:	9806      	ldr	r0, [sp, #24]
10008f98:	47c0      	blx	r8
10008f9a:	4968      	ldr	r1, [pc, #416]	; (1000913c <sms_mpu_calibrate+0x3d8>)
10008f9c:	47b8      	blx	r7
10008f9e:	60b0      	str	r0, [r6, #8]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fa0:	0023      	movs	r3, r4
10008fa2:	2202      	movs	r2, #2
10008fa4:	2177      	movs	r1, #119	; 0x77
10008fa6:	2069      	movs	r0, #105	; 0x69
10008fa8:	4f5e      	ldr	r7, [pc, #376]	; (10009124 <sms_mpu_calibrate+0x3c0>)
10008faa:	46b9      	mov	r9, r7
10008fac:	47b8      	blx	r7
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fae:	7823      	ldrb	r3, [r4, #0]
10008fb0:	021b      	lsls	r3, r3, #8
10008fb2:	7862      	ldrb	r2, [r4, #1]
10008fb4:	4313      	orrs	r3, r2
10008fb6:	4698      	mov	r8, r3
10008fb8:	930c      	str	r3, [sp, #48]	; 0x30
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fba:	0023      	movs	r3, r4
10008fbc:	2202      	movs	r2, #2
10008fbe:	217a      	movs	r1, #122	; 0x7a
10008fc0:	2069      	movs	r0, #105	; 0x69
10008fc2:	47b8      	blx	r7

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fc4:	7827      	ldrb	r7, [r4, #0]
10008fc6:	023f      	lsls	r7, r7, #8
10008fc8:	7863      	ldrb	r3, [r4, #1]
10008fca:	431f      	orrs	r7, r3
10008fcc:	970d      	str	r7, [sp, #52]	; 0x34
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fce:	0023      	movs	r3, r4
10008fd0:	2202      	movs	r2, #2
10008fd2:	217d      	movs	r1, #125	; 0x7d
10008fd4:	2069      	movs	r0, #105	; 0x69
10008fd6:	47c8      	blx	r9
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fd8:	7823      	ldrb	r3, [r4, #0]
10008fda:	021b      	lsls	r3, r3, #8
10008fdc:	7861      	ldrb	r1, [r4, #1]
10008fde:	4319      	orrs	r1, r3
10008fe0:	910e      	str	r1, [sp, #56]	; 0x38
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10008fe2:	ab0b      	add	r3, sp, #44	; 0x2c
10008fe4:	2200      	movs	r2, #0
10008fe6:	701a      	strb	r2, [r3, #0]
10008fe8:	705a      	strb	r2, [r3, #1]
10008fea:	709a      	strb	r2, [r3, #2]
10008fec:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10008fee:	2001      	movs	r0, #1
10008ff0:	465e      	mov	r6, fp
10008ff2:	009a      	lsls	r2, r3, #2
10008ff4:	ac0c      	add	r4, sp, #48	; 0x30
10008ff6:	5912      	ldr	r2, [r2, r4]
10008ff8:	4202      	tst	r2, r0
10008ffa:	d001      	beq.n	10009000 <sms_mpu_calibrate+0x29c>
10008ffc:	aa0b      	add	r2, sp, #44	; 0x2c
10008ffe:	5498      	strb	r0, [r3, r2]
10009000:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009002:	2b03      	cmp	r3, #3
10009004:	d1f5      	bne.n	10008ff2 <sms_mpu_calibrate+0x28e>
10009006:	46b3      	mov	fp, r6
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009008:	17e8      	asrs	r0, r5, #31
1000900a:	2207      	movs	r2, #7
1000900c:	4010      	ands	r0, r2
1000900e:	1940      	adds	r0, r0, r5
10009010:	10c0      	asrs	r0, r0, #3
10009012:	4643      	mov	r3, r8
10009014:	1a18      	subs	r0, r3, r0
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009016:	4653      	mov	r3, sl
10009018:	17dc      	asrs	r4, r3, #31
1000901a:	4014      	ands	r4, r2
1000901c:	4454      	add	r4, sl
1000901e:	10e4      	asrs	r4, r4, #3
10009020:	1b3f      	subs	r7, r7, r4
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009022:	17f3      	asrs	r3, r6, #31
10009024:	4013      	ands	r3, r2
10009026:	445b      	add	r3, fp
10009028:	10da      	asrs	r2, r3, #3
1000902a:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
1000902c:	1202      	asrs	r2, r0, #8
1000902e:	b2d2      	uxtb	r2, r2
10009030:	ac0f      	add	r4, sp, #60	; 0x3c
10009032:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009034:	a90b      	add	r1, sp, #44	; 0x2c
10009036:	780e      	ldrb	r6, [r1, #0]
10009038:	4330      	orrs	r0, r6
1000903a:	7060      	strb	r0, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
1000903c:	1238      	asrs	r0, r7, #8
1000903e:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009040:	7848      	ldrb	r0, [r1, #1]
10009042:	4307      	orrs	r7, r0
10009044:	70e7      	strb	r7, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009046:	1218      	asrs	r0, r3, #8
10009048:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000904a:	7889      	ldrb	r1, [r1, #2]
1000904c:	430b      	orrs	r3, r1
1000904e:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009050:	2177      	movs	r1, #119	; 0x77
10009052:	2069      	movs	r0, #105	; 0x69
10009054:	4f31      	ldr	r7, [pc, #196]	; (1000911c <sms_mpu_calibrate+0x3b8>)
10009056:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009058:	7862      	ldrb	r2, [r4, #1]
1000905a:	2178      	movs	r1, #120	; 0x78
1000905c:	2069      	movs	r0, #105	; 0x69
1000905e:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009060:	78a2      	ldrb	r2, [r4, #2]
10009062:	217a      	movs	r1, #122	; 0x7a
10009064:	2069      	movs	r0, #105	; 0x69
10009066:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009068:	78e2      	ldrb	r2, [r4, #3]
1000906a:	217b      	movs	r1, #123	; 0x7b
1000906c:	2069      	movs	r0, #105	; 0x69
1000906e:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009070:	7922      	ldrb	r2, [r4, #4]
10009072:	217d      	movs	r1, #125	; 0x7d
10009074:	2069      	movs	r0, #105	; 0x69
10009076:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009078:	7962      	ldrb	r2, [r4, #5]
1000907a:	217e      	movs	r1, #126	; 0x7e
1000907c:	2069      	movs	r0, #105	; 0x69
1000907e:	47b8      	blx	r7

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009080:	4f2c      	ldr	r7, [pc, #176]	; (10009134 <sms_mpu_calibrate+0x3d0>)
10009082:	0028      	movs	r0, r5
10009084:	47b8      	blx	r7
10009086:	4c2e      	ldr	r4, [pc, #184]	; (10009140 <sms_mpu_calibrate+0x3dc>)
10009088:	21e2      	movs	r1, #226	; 0xe2
1000908a:	0589      	lsls	r1, r1, #22
1000908c:	47a0      	blx	r4
1000908e:	9e08      	ldr	r6, [sp, #32]
10009090:	0033      	movs	r3, r6
10009092:	9005      	str	r0, [sp, #20]
10009094:	6018      	str	r0, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009096:	4650      	mov	r0, sl
10009098:	47b8      	blx	r7
1000909a:	21e2      	movs	r1, #226	; 0xe2
1000909c:	0589      	lsls	r1, r1, #22
1000909e:	47a0      	blx	r4
100090a0:	1c05      	adds	r5, r0, #0
100090a2:	9608      	str	r6, [sp, #32]
100090a4:	0033      	movs	r3, r6
100090a6:	6058      	str	r0, [r3, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
100090a8:	4658      	mov	r0, fp
100090aa:	47b8      	blx	r7
100090ac:	21e2      	movs	r1, #226	; 0xe2
100090ae:	0589      	lsls	r1, r1, #22
100090b0:	47a0      	blx	r4
100090b2:	1c06      	adds	r6, r0, #0
100090b4:	9b08      	ldr	r3, [sp, #32]
100090b6:	6098      	str	r0, [r3, #8]
	uint32_t p0 = dest1[0] * 10000;
100090b8:	4922      	ldr	r1, [pc, #136]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090ba:	9b07      	ldr	r3, [sp, #28]
100090bc:	6818      	ldr	r0, [r3, #0]
100090be:	47a0      	blx	r4
100090c0:	4f21      	ldr	r7, [pc, #132]	; (10009148 <sms_mpu_calibrate+0x3e4>)
100090c2:	47b8      	blx	r7
100090c4:	9006      	str	r0, [sp, #24]
	uint32_t p1 = dest1[1] * 10000;
100090c6:	491f      	ldr	r1, [pc, #124]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090c8:	9b07      	ldr	r3, [sp, #28]
100090ca:	6858      	ldr	r0, [r3, #4]
100090cc:	47a0      	blx	r4
100090ce:	47b8      	blx	r7
100090d0:	9008      	str	r0, [sp, #32]
	uint32_t p2 = dest1[2] * 10000;
100090d2:	491c      	ldr	r1, [pc, #112]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090d4:	9b07      	ldr	r3, [sp, #28]
100090d6:	6898      	ldr	r0, [r3, #8]
100090d8:	47a0      	blx	r4
100090da:	47b8      	blx	r7
100090dc:	9007      	str	r0, [sp, #28]
	uint32_t p3 = dest2[0] * 10000;
	uint32_t p4 = dest2[1] * 10000;
	uint32_t p5 = dest2[2] * 10000;
	DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
100090de:	481b      	ldr	r0, [pc, #108]	; (1000914c <sms_mpu_calibrate+0x3e8>)
100090e0:	4b1b      	ldr	r3, [pc, #108]	; (10009150 <sms_mpu_calibrate+0x3ec>)
100090e2:	4798      	blx	r3
100090e4:	4917      	ldr	r1, [pc, #92]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090e6:	1c30      	adds	r0, r6, #0
100090e8:	47a0      	blx	r4
100090ea:	47b8      	blx	r7
100090ec:	9002      	str	r0, [sp, #8]
100090ee:	4915      	ldr	r1, [pc, #84]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090f0:	1c28      	adds	r0, r5, #0
100090f2:	47a0      	blx	r4
100090f4:	47b8      	blx	r7
100090f6:	9001      	str	r0, [sp, #4]
100090f8:	4912      	ldr	r1, [pc, #72]	; (10009144 <sms_mpu_calibrate+0x3e0>)
100090fa:	9805      	ldr	r0, [sp, #20]
100090fc:	47a0      	blx	r4
100090fe:	47b8      	blx	r7
10009100:	9000      	str	r0, [sp, #0]
10009102:	9b07      	ldr	r3, [sp, #28]
10009104:	9a08      	ldr	r2, [sp, #32]
10009106:	9906      	ldr	r1, [sp, #24]
10009108:	4812      	ldr	r0, [pc, #72]	; (10009154 <sms_mpu_calibrate+0x3f0>)
1000910a:	4c13      	ldr	r4, [pc, #76]	; (10009158 <sms_mpu_calibrate+0x3f4>)
1000910c:	47a0      	blx	r4
}
1000910e:	b013      	add	sp, #76	; 0x4c
10009110:	bc3c      	pop	{r2, r3, r4, r5}
10009112:	4690      	mov	r8, r2
10009114:	4699      	mov	r9, r3
10009116:	46a2      	mov	sl, r4
10009118:	46ab      	mov	fp, r5
1000911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000911c:	10008d4d 	.word	0x10008d4d
10009120:	10009cfd 	.word	0x10009cfd
10009124:	10008bd5 	.word	0x10008bd5
10009128:	10011d15 	.word	0x10011d15
1000912c:	10011e29 	.word	0x10011e29
10009130:	ffffc000 	.word	0xffffc000
10009134:	10012ac1 	.word	0x10012ac1
10009138:	100121b5 	.word	0x100121b5
1000913c:	43030000 	.word	0x43030000
10009140:	10012549 	.word	0x10012549
10009144:	461c4000 	.word	0x461c4000
10009148:	10012149 	.word	0x10012149
1000914c:	10015bf0 	.word	0x10015bf0
10009150:	10014ca9 	.word	0x10014ca9
10009154:	10015ee4 	.word	0x10015ee4
10009158:	10014b89 	.word	0x10014b89

1000915c <sms_mpu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}

void sms_mpu_comp_initialize(float *destination)
{
1000915c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000915e:	465f      	mov	r7, fp
10009160:	4656      	mov	r6, sl
10009162:	464d      	mov	r5, r9
10009164:	4644      	mov	r4, r8
10009166:	b4f0      	push	{r4, r5, r6, r7}
10009168:	b083      	sub	sp, #12
1000916a:	0007      	movs	r7, r0
	uint8_t m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
	uint8_t m_mode = 0x02;	// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
1000916c:	2200      	movs	r2, #0
1000916e:	210a      	movs	r1, #10
10009170:	200c      	movs	r0, #12
10009172:	4d2b      	ldr	r5, [pc, #172]	; (10009220 <sms_mpu_comp_initialize+0xc4>)
10009174:	47a8      	blx	r5
	delay_ms(10);
10009176:	200a      	movs	r0, #10
10009178:	4b2a      	ldr	r3, [pc, #168]	; (10009224 <sms_mpu_comp_initialize+0xc8>)
1000917a:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
1000917c:	220f      	movs	r2, #15
1000917e:	210a      	movs	r1, #10
10009180:	200c      	movs	r0, #12
10009182:	47a8      	blx	r5
	delay_ms(10);
10009184:	200a      	movs	r0, #10
10009186:	4b27      	ldr	r3, [pc, #156]	; (10009224 <sms_mpu_comp_initialize+0xc8>)
10009188:	4798      	blx	r3
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000918a:	ae01      	add	r6, sp, #4
1000918c:	0033      	movs	r3, r6
1000918e:	2203      	movs	r2, #3
10009190:	2110      	movs	r1, #16
10009192:	200c      	movs	r0, #12
10009194:	4c24      	ldr	r4, [pc, #144]	; (10009228 <sms_mpu_comp_initialize+0xcc>)
10009196:	47a0      	blx	r4
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009198:	7830      	ldrb	r0, [r6, #0]
1000919a:	3880      	subs	r0, #128	; 0x80
1000919c:	4b23      	ldr	r3, [pc, #140]	; (1000922c <sms_mpu_comp_initialize+0xd0>)
1000919e:	469b      	mov	fp, r3
100091a0:	4798      	blx	r3
100091a2:	4b23      	ldr	r3, [pc, #140]	; (10009230 <sms_mpu_comp_initialize+0xd4>)
100091a4:	469a      	mov	sl, r3
100091a6:	4798      	blx	r3
100091a8:	4b22      	ldr	r3, [pc, #136]	; (10009234 <sms_mpu_comp_initialize+0xd8>)
100091aa:	4699      	mov	r9, r3
100091ac:	2200      	movs	r2, #0
100091ae:	4b22      	ldr	r3, [pc, #136]	; (10009238 <sms_mpu_comp_initialize+0xdc>)
100091b0:	47c8      	blx	r9
100091b2:	4b22      	ldr	r3, [pc, #136]	; (1000923c <sms_mpu_comp_initialize+0xe0>)
100091b4:	4698      	mov	r8, r3
100091b6:	2200      	movs	r2, #0
100091b8:	4b21      	ldr	r3, [pc, #132]	; (10009240 <sms_mpu_comp_initialize+0xe4>)
100091ba:	47c0      	blx	r8
100091bc:	4b21      	ldr	r3, [pc, #132]	; (10009244 <sms_mpu_comp_initialize+0xe8>)
100091be:	4798      	blx	r3
100091c0:	6038      	str	r0, [r7, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
100091c2:	7870      	ldrb	r0, [r6, #1]
100091c4:	3880      	subs	r0, #128	; 0x80
100091c6:	47d8      	blx	fp
100091c8:	47d0      	blx	sl
100091ca:	2200      	movs	r2, #0
100091cc:	4b1a      	ldr	r3, [pc, #104]	; (10009238 <sms_mpu_comp_initialize+0xdc>)
100091ce:	47c8      	blx	r9
100091d0:	2200      	movs	r2, #0
100091d2:	4b1b      	ldr	r3, [pc, #108]	; (10009240 <sms_mpu_comp_initialize+0xe4>)
100091d4:	47c0      	blx	r8
100091d6:	4b1b      	ldr	r3, [pc, #108]	; (10009244 <sms_mpu_comp_initialize+0xe8>)
100091d8:	4798      	blx	r3
100091da:	6078      	str	r0, [r7, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
100091dc:	78b0      	ldrb	r0, [r6, #2]
100091de:	3880      	subs	r0, #128	; 0x80
100091e0:	47d8      	blx	fp
100091e2:	47d0      	blx	sl
100091e4:	2200      	movs	r2, #0
100091e6:	4b14      	ldr	r3, [pc, #80]	; (10009238 <sms_mpu_comp_initialize+0xdc>)
100091e8:	47c8      	blx	r9
100091ea:	2200      	movs	r2, #0
100091ec:	4b14      	ldr	r3, [pc, #80]	; (10009240 <sms_mpu_comp_initialize+0xe4>)
100091ee:	47c0      	blx	r8
100091f0:	4b14      	ldr	r3, [pc, #80]	; (10009244 <sms_mpu_comp_initialize+0xe8>)
100091f2:	4798      	blx	r3
100091f4:	60b8      	str	r0, [r7, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
100091f6:	2200      	movs	r2, #0
100091f8:	210a      	movs	r1, #10
100091fa:	200c      	movs	r0, #12
100091fc:	47a8      	blx	r5
	delay_ms(10);
100091fe:	200a      	movs	r0, #10
10009200:	4b08      	ldr	r3, [pc, #32]	; (10009224 <sms_mpu_comp_initialize+0xc8>)
10009202:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, m_scale << 4 | m_mode); // Set magnetometer data resolution and sample ODR
10009204:	2212      	movs	r2, #18
10009206:	210a      	movs	r1, #10
10009208:	200c      	movs	r0, #12
1000920a:	47a8      	blx	r5
	delay_ms(10);
1000920c:	200a      	movs	r0, #10
1000920e:	4b05      	ldr	r3, [pc, #20]	; (10009224 <sms_mpu_comp_initialize+0xc8>)
10009210:	4798      	blx	r3
}
10009212:	b003      	add	sp, #12
10009214:	bc3c      	pop	{r2, r3, r4, r5}
10009216:	4690      	mov	r8, r2
10009218:	4699      	mov	r9, r3
1000921a:	46a2      	mov	sl, r4
1000921c:	46ab      	mov	fp, r5
1000921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009220:	10008d4d 	.word	0x10008d4d
10009224:	10009cfd 	.word	0x10009cfd
10009228:	10008bd5 	.word	0x10008bd5
1000922c:	10012ac1 	.word	0x10012ac1
10009230:	100147a9 	.word	0x100147a9
10009234:	10013a6d 	.word	0x10013a6d
10009238:	3f700000 	.word	0x3f700000
1000923c:	10012bcd 	.word	0x10012bcd
10009240:	3ff00000 	.word	0x3ff00000
10009244:	10014851 	.word	0x10014851

10009248 <readByte>:
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009248:	b530      	push	{r4, r5, lr}
1000924a:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
1000924c:	ac01      	add	r4, sp, #4
1000924e:	0023      	movs	r3, r4
10009250:	2201      	movs	r2, #1
10009252:	4d02      	ldr	r5, [pc, #8]	; (1000925c <readByte+0x14>)
10009254:	47a8      	blx	r5
	return data[0];
10009256:	7820      	ldrb	r0, [r4, #0]
}
10009258:	b003      	add	sp, #12
1000925a:	bd30      	pop	{r4, r5, pc}
1000925c:	10008bd5 	.word	0x10008bd5

10009260 <sms_mpu_comp_check>:
	}
	return retVal;
}

int sms_mpu_comp_check(void)
{
10009260:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009262:	2100      	movs	r1, #0
10009264:	200c      	movs	r0, #12
10009266:	4b03      	ldr	r3, [pc, #12]	; (10009274 <sms_mpu_comp_check+0x14>)
10009268:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
1000926a:	3848      	subs	r0, #72	; 0x48
1000926c:	1e43      	subs	r3, r0, #1
1000926e:	4198      	sbcs	r0, r3
10009270:	4240      	negs	r0, r0
}
10009272:	bd10      	pop	{r4, pc}
10009274:	10009249 	.word	0x10009249

10009278 <sms_mpu_initialize>:
	uint32_t p5 = dest2[2] * 10000;
	DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}

void sms_mpu_initialize(void)
{
10009278:	b570      	push	{r4, r5, r6, lr}
	// Initialize variables
	q[0] = 1.0;
1000927a:	4a25      	ldr	r2, [pc, #148]	; (10009310 <sms_mpu_initialize+0x98>)
1000927c:	23fe      	movs	r3, #254	; 0xfe
1000927e:	059b      	lsls	r3, r3, #22
10009280:	6013      	str	r3, [r2, #0]
	q[1] = 0.0;
10009282:	2300      	movs	r3, #0
10009284:	6053      	str	r3, [r2, #4]
	q[2] = 0.0;
10009286:	6093      	str	r3, [r2, #8]
	q[3] = 0.0;
10009288:	60d3      	str	r3, [r2, #12]
	eInt[0] = 0.0;
1000928a:	4a22      	ldr	r2, [pc, #136]	; (10009314 <sms_mpu_initialize+0x9c>)
1000928c:	6013      	str	r3, [r2, #0]
	eInt[1] = 0.0;
1000928e:	6053      	str	r3, [r2, #4]
	eInt[2] = 0.0;
10009290:	6093      	str	r3, [r2, #8]
	uint8_t a_scale = AFS_2G;
	uint8_t g_scale = GFS_250DPS;

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009292:	2200      	movs	r2, #0
10009294:	216b      	movs	r1, #107	; 0x6b
10009296:	2069      	movs	r0, #105	; 0x69
10009298:	4c1f      	ldr	r4, [pc, #124]	; (10009318 <sms_mpu_initialize+0xa0>)
1000929a:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
1000929c:	2064      	movs	r0, #100	; 0x64
1000929e:	4d1f      	ldr	r5, [pc, #124]	; (1000931c <sms_mpu_initialize+0xa4>)
100092a0:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
100092a2:	2201      	movs	r2, #1
100092a4:	216b      	movs	r1, #107	; 0x6b
100092a6:	2069      	movs	r0, #105	; 0x69
100092a8:	47a0      	blx	r4
	delay_ms(200);
100092aa:	20c8      	movs	r0, #200	; 0xc8
100092ac:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x06);		// gyro bandwidth = 10 Hz
100092ae:	2206      	movs	r2, #6
100092b0:	211a      	movs	r1, #26
100092b2:	2069      	movs	r0, #105	; 0x69
100092b4:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x08);  	// Use a 111 Hz rate; a rate consistent with the filter update rate
100092b6:	2208      	movs	r2, #8
100092b8:	2119      	movs	r1, #25
100092ba:	2069      	movs	r0, #105	; 0x69
100092bc:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
100092be:	211b      	movs	r1, #27
100092c0:	2069      	movs	r0, #105	; 0x69
100092c2:	4e17      	ldr	r6, [pc, #92]	; (10009320 <sms_mpu_initialize+0xa8>)
100092c4:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (g_scale << 3); // Set full scale range for the gyro
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
100092c6:	23e5      	movs	r3, #229	; 0xe5
100092c8:	0002      	movs	r2, r0
100092ca:	401a      	ands	r2, r3
100092cc:	211b      	movs	r1, #27
100092ce:	2069      	movs	r0, #105	; 0x69
100092d0:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
100092d2:	211c      	movs	r1, #28
100092d4:	2069      	movs	r0, #105	; 0x69
100092d6:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (a_scale << 3); // Set full scale range for the accelerometer
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
100092d8:	23e7      	movs	r3, #231	; 0xe7
100092da:	0002      	movs	r2, r0
100092dc:	401a      	ands	r2, r3
100092de:	211c      	movs	r1, #28
100092e0:	2069      	movs	r0, #105	; 0x69
100092e2:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
100092e4:	211d      	movs	r1, #29
100092e6:	2069      	movs	r0, #105	; 0x69
100092e8:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
100092ea:	23f0      	movs	r3, #240	; 0xf0
100092ec:	0002      	movs	r2, r0
100092ee:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x06;  // Set accelerometer rate to 1 kHz and bandwidth to 10 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
100092f0:	3bea      	subs	r3, #234	; 0xea
100092f2:	431a      	orrs	r2, r3
100092f4:	211d      	movs	r1, #29
100092f6:	2069      	movs	r0, #105	; 0x69
100092f8:	47a0      	blx	r4

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
100092fa:	2222      	movs	r2, #34	; 0x22
100092fc:	2137      	movs	r1, #55	; 0x37
100092fe:	2069      	movs	r0, #105	; 0x69
10009300:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009302:	2201      	movs	r2, #1
10009304:	2138      	movs	r1, #56	; 0x38
10009306:	2069      	movs	r0, #105	; 0x69
10009308:	47a0      	blx	r4
	delay_ms(100);
1000930a:	2064      	movs	r0, #100	; 0x64
1000930c:	47a8      	blx	r5
}
1000930e:	bd70      	pop	{r4, r5, r6, pc}
10009310:	1001895c 	.word	0x1001895c
10009314:	10018804 	.word	0x10018804
10009318:	10008d4d 	.word	0x10008d4d
1000931c:	10009cfd 	.word	0x10009cfd
10009320:	10009249 	.word	0x10009249

10009324 <sms_mpu_selftest>:
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}

void sms_mpu_selftest(float *destination)
{
10009324:	b5f0      	push	{r4, r5, r6, r7, lr}
10009326:	465f      	mov	r7, fp
10009328:	4656      	mov	r6, sl
1000932a:	464d      	mov	r5, r9
1000932c:	4644      	mov	r4, r8
1000932e:	b4f0      	push	{r4, r5, r6, r7}
10009330:	b09d      	sub	sp, #116	; 0x74
10009332:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009334:	2206      	movs	r2, #6
10009336:	2100      	movs	r1, #0
10009338:	a81a      	add	r0, sp, #104	; 0x68
1000933a:	4ce0      	ldr	r4, [pc, #896]	; (100096bc <sms_mpu_selftest+0x398>)
1000933c:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000933e:	220c      	movs	r2, #12
10009340:	2100      	movs	r1, #0
10009342:	a817      	add	r0, sp, #92	; 0x5c
10009344:	47a0      	blx	r4
10009346:	220c      	movs	r2, #12
10009348:	2100      	movs	r1, #0
1000934a:	a814      	add	r0, sp, #80	; 0x50
1000934c:	47a0      	blx	r4
1000934e:	220c      	movs	r2, #12
10009350:	2100      	movs	r1, #0
10009352:	a811      	add	r0, sp, #68	; 0x44
10009354:	47a0      	blx	r4
10009356:	220c      	movs	r2, #12
10009358:	2100      	movs	r1, #0
1000935a:	a80e      	add	r0, sp, #56	; 0x38
1000935c:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000935e:	2200      	movs	r2, #0
10009360:	2119      	movs	r1, #25
10009362:	2069      	movs	r0, #105	; 0x69
10009364:	4cd6      	ldr	r4, [pc, #856]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009366:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009368:	2202      	movs	r2, #2
1000936a:	211a      	movs	r1, #26
1000936c:	2069      	movs	r0, #105	; 0x69
1000936e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009370:	2200      	movs	r2, #0
10009372:	211b      	movs	r1, #27
10009374:	2069      	movs	r0, #105	; 0x69
10009376:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009378:	2202      	movs	r2, #2
1000937a:	211d      	movs	r1, #29
1000937c:	2069      	movs	r0, #105	; 0x69
1000937e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009380:	2200      	movs	r2, #0
10009382:	211c      	movs	r1, #28
10009384:	2069      	movs	r0, #105	; 0x69
10009386:	47a0      	blx	r4
10009388:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000938a:	ac1a      	add	r4, sp, #104	; 0x68
1000938c:	4ecd      	ldr	r6, [pc, #820]	; (100096c4 <sms_mpu_selftest+0x3a0>)
1000938e:	0023      	movs	r3, r4
10009390:	2206      	movs	r2, #6
10009392:	213b      	movs	r1, #59	; 0x3b
10009394:	2069      	movs	r0, #105	; 0x69
10009396:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009398:	7823      	ldrb	r3, [r4, #0]
1000939a:	021b      	lsls	r3, r3, #8
1000939c:	7862      	ldrb	r2, [r4, #1]
1000939e:	4313      	orrs	r3, r2
100093a0:	b21b      	sxth	r3, r3
100093a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
100093a4:	4694      	mov	ip, r2
100093a6:	4463      	add	r3, ip
100093a8:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100093aa:	78a3      	ldrb	r3, [r4, #2]
100093ac:	021b      	lsls	r3, r3, #8
100093ae:	78e2      	ldrb	r2, [r4, #3]
100093b0:	4313      	orrs	r3, r2
100093b2:	b21b      	sxth	r3, r3
100093b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
100093b6:	9200      	str	r2, [sp, #0]
100093b8:	4694      	mov	ip, r2
100093ba:	4463      	add	r3, ip
100093bc:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
100093be:	7923      	ldrb	r3, [r4, #4]
100093c0:	021b      	lsls	r3, r3, #8
100093c2:	7962      	ldrb	r2, [r4, #5]
100093c4:	4313      	orrs	r3, r2
100093c6:	b21b      	sxth	r3, r3
100093c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
100093ca:	9200      	str	r2, [sp, #0]
100093cc:	4694      	mov	ip, r2
100093ce:	4463      	add	r3, ip
100093d0:	9316      	str	r3, [sp, #88]	; 0x58
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100093d2:	0023      	movs	r3, r4
100093d4:	2206      	movs	r2, #6
100093d6:	2143      	movs	r1, #67	; 0x43
100093d8:	2069      	movs	r0, #105	; 0x69
100093da:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100093dc:	7823      	ldrb	r3, [r4, #0]
100093de:	021b      	lsls	r3, r3, #8
100093e0:	7862      	ldrb	r2, [r4, #1]
100093e2:	4313      	orrs	r3, r2
100093e4:	b21b      	sxth	r3, r3
100093e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
100093e8:	4694      	mov	ip, r2
100093ea:	4463      	add	r3, ip
100093ec:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100093ee:	78a3      	ldrb	r3, [r4, #2]
100093f0:	021b      	lsls	r3, r3, #8
100093f2:	78e2      	ldrb	r2, [r4, #3]
100093f4:	4313      	orrs	r3, r2
100093f6:	b21b      	sxth	r3, r3
100093f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
100093fa:	9200      	str	r2, [sp, #0]
100093fc:	4694      	mov	ip, r2
100093fe:	4463      	add	r3, ip
10009400:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009402:	7923      	ldrb	r3, [r4, #4]
10009404:	021b      	lsls	r3, r3, #8
10009406:	7962      	ldrb	r2, [r4, #5]
10009408:	4313      	orrs	r3, r2
1000940a:	b21b      	sxth	r3, r3
1000940c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000940e:	9200      	str	r2, [sp, #0]
10009410:	4694      	mov	ip, r2
10009412:	4463      	add	r3, ip
10009414:	9319      	str	r3, [sp, #100]	; 0x64
10009416:	3d01      	subs	r5, #1
10009418:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000941a:	2d00      	cmp	r5, #0
1000941c:	d1b7      	bne.n	1000938e <sms_mpu_selftest+0x6a>
1000941e:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009420:	4ea9      	ldr	r6, [pc, #676]	; (100096c8 <sms_mpu_selftest+0x3a4>)
10009422:	ad14      	add	r5, sp, #80	; 0x50
10009424:	21c8      	movs	r1, #200	; 0xc8
10009426:	5960      	ldr	r0, [r4, r5]
10009428:	47b0      	blx	r6
1000942a:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000942c:	ad17      	add	r5, sp, #92	; 0x5c
1000942e:	21c8      	movs	r1, #200	; 0xc8
10009430:	5960      	ldr	r0, [r4, r5]
10009432:	47b0      	blx	r6
10009434:	5160      	str	r0, [r4, r5]
10009436:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009438:	2c0c      	cmp	r4, #12
1000943a:	d1f2      	bne.n	10009422 <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000943c:	22e0      	movs	r2, #224	; 0xe0
1000943e:	211c      	movs	r1, #28
10009440:	2069      	movs	r0, #105	; 0x69
10009442:	4c9f      	ldr	r4, [pc, #636]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009444:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009446:	22e0      	movs	r2, #224	; 0xe0
10009448:	211c      	movs	r1, #28
1000944a:	2069      	movs	r0, #105	; 0x69
1000944c:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000944e:	2019      	movs	r0, #25
10009450:	4b9e      	ldr	r3, [pc, #632]	; (100096cc <sms_mpu_selftest+0x3a8>)
10009452:	4798      	blx	r3
10009454:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009456:	ac1a      	add	r4, sp, #104	; 0x68
10009458:	4e9a      	ldr	r6, [pc, #616]	; (100096c4 <sms_mpu_selftest+0x3a0>)
1000945a:	0023      	movs	r3, r4
1000945c:	2206      	movs	r2, #6
1000945e:	213b      	movs	r1, #59	; 0x3b
10009460:	2069      	movs	r0, #105	; 0x69
10009462:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009464:	7823      	ldrb	r3, [r4, #0]
10009466:	021b      	lsls	r3, r3, #8
10009468:	7862      	ldrb	r2, [r4, #1]
1000946a:	4313      	orrs	r3, r2
1000946c:	b21b      	sxth	r3, r3
1000946e:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009470:	4694      	mov	ip, r2
10009472:	4463      	add	r3, ip
10009474:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009476:	78a3      	ldrb	r3, [r4, #2]
10009478:	021b      	lsls	r3, r3, #8
1000947a:	78e2      	ldrb	r2, [r4, #3]
1000947c:	4313      	orrs	r3, r2
1000947e:	b21b      	sxth	r3, r3
10009480:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009482:	9200      	str	r2, [sp, #0]
10009484:	4694      	mov	ip, r2
10009486:	4463      	add	r3, ip
10009488:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000948a:	7923      	ldrb	r3, [r4, #4]
1000948c:	021b      	lsls	r3, r3, #8
1000948e:	7962      	ldrb	r2, [r4, #5]
10009490:	4313      	orrs	r3, r2
10009492:	b21b      	sxth	r3, r3
10009494:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009496:	9200      	str	r2, [sp, #0]
10009498:	4694      	mov	ip, r2
1000949a:	4463      	add	r3, ip
1000949c:	9313      	str	r3, [sp, #76]	; 0x4c
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000949e:	0023      	movs	r3, r4
100094a0:	2206      	movs	r2, #6
100094a2:	2143      	movs	r1, #67	; 0x43
100094a4:	2069      	movs	r0, #105	; 0x69
100094a6:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100094a8:	7823      	ldrb	r3, [r4, #0]
100094aa:	021b      	lsls	r3, r3, #8
100094ac:	7862      	ldrb	r2, [r4, #1]
100094ae:	4313      	orrs	r3, r2
100094b0:	b21b      	sxth	r3, r3
100094b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100094b4:	4694      	mov	ip, r2
100094b6:	4463      	add	r3, ip
100094b8:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100094ba:	78a3      	ldrb	r3, [r4, #2]
100094bc:	021b      	lsls	r3, r3, #8
100094be:	78e2      	ldrb	r2, [r4, #3]
100094c0:	4313      	orrs	r3, r2
100094c2:	b21b      	sxth	r3, r3
100094c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100094c6:	9200      	str	r2, [sp, #0]
100094c8:	4694      	mov	ip, r2
100094ca:	4463      	add	r3, ip
100094cc:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100094ce:	7923      	ldrb	r3, [r4, #4]
100094d0:	021b      	lsls	r3, r3, #8
100094d2:	7962      	ldrb	r2, [r4, #5]
100094d4:	4313      	orrs	r3, r2
100094d6:	b21b      	sxth	r3, r3
100094d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100094da:	9200      	str	r2, [sp, #0]
100094dc:	4694      	mov	ip, r2
100094de:	4463      	add	r3, ip
100094e0:	9310      	str	r3, [sp, #64]	; 0x40
100094e2:	3d01      	subs	r5, #1
100094e4:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
100094e6:	2d00      	cmp	r5, #0
100094e8:	d1b7      	bne.n	1000945a <sms_mpu_selftest+0x136>
100094ea:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
100094ec:	4e76      	ldr	r6, [pc, #472]	; (100096c8 <sms_mpu_selftest+0x3a4>)
100094ee:	ad11      	add	r5, sp, #68	; 0x44
100094f0:	21c8      	movs	r1, #200	; 0xc8
100094f2:	5960      	ldr	r0, [r4, r5]
100094f4:	47b0      	blx	r6
100094f6:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
100094f8:	ad0e      	add	r5, sp, #56	; 0x38
100094fa:	21c8      	movs	r1, #200	; 0xc8
100094fc:	5960      	ldr	r0, [r4, r5]
100094fe:	47b0      	blx	r6
10009500:	5160      	str	r0, [r4, r5]
10009502:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009504:	2c0c      	cmp	r4, #12
10009506:	d1f2      	bne.n	100094ee <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009508:	2200      	movs	r2, #0
1000950a:	211c      	movs	r1, #28
1000950c:	2069      	movs	r0, #105	; 0x69
1000950e:	4c6c      	ldr	r4, [pc, #432]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009510:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009512:	2200      	movs	r2, #0
10009514:	211b      	movs	r1, #27
10009516:	2069      	movs	r0, #105	; 0x69
10009518:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000951a:	2019      	movs	r0, #25
1000951c:	4b6b      	ldr	r3, [pc, #428]	; (100096cc <sms_mpu_selftest+0x3a8>)
1000951e:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009520:	210d      	movs	r1, #13
10009522:	2069      	movs	r0, #105	; 0x69
10009524:	4d6a      	ldr	r5, [pc, #424]	; (100096d0 <sms_mpu_selftest+0x3ac>)
10009526:	47a8      	blx	r5
10009528:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
1000952a:	210e      	movs	r1, #14
1000952c:	2069      	movs	r0, #105	; 0x69
1000952e:	47a8      	blx	r5
10009530:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009532:	210f      	movs	r1, #15
10009534:	2069      	movs	r0, #105	; 0x69
10009536:	47a8      	blx	r5
10009538:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
1000953a:	2100      	movs	r1, #0
1000953c:	2069      	movs	r0, #105	; 0x69
1000953e:	47a8      	blx	r5
10009540:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009542:	2101      	movs	r1, #1
10009544:	2069      	movs	r0, #105	; 0x69
10009546:	47a8      	blx	r5
10009548:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
1000954a:	2102      	movs	r1, #2
1000954c:	2069      	movs	r0, #105	; 0x69
1000954e:	47a8      	blx	r5
10009550:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009552:	4b60      	ldr	r3, [pc, #384]	; (100096d4 <sms_mpu_selftest+0x3b0>)
10009554:	469a      	mov	sl, r3
10009556:	0020      	movs	r0, r4
10009558:	4798      	blx	r3
1000955a:	4b5f      	ldr	r3, [pc, #380]	; (100096d8 <sms_mpu_selftest+0x3b4>)
1000955c:	4699      	mov	r9, r3
1000955e:	4798      	blx	r3
10009560:	4e5e      	ldr	r6, [pc, #376]	; (100096dc <sms_mpu_selftest+0x3b8>)
10009562:	2200      	movs	r2, #0
10009564:	4b5e      	ldr	r3, [pc, #376]	; (100096e0 <sms_mpu_selftest+0x3bc>)
10009566:	47b0      	blx	r6
10009568:	0002      	movs	r2, r0
1000956a:	000b      	movs	r3, r1
1000956c:	485d      	ldr	r0, [pc, #372]	; (100096e4 <sms_mpu_selftest+0x3c0>)
1000956e:	495e      	ldr	r1, [pc, #376]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009570:	4f5e      	ldr	r7, [pc, #376]	; (100096ec <sms_mpu_selftest+0x3c8>)
10009572:	47b8      	blx	r7
10009574:	4d5e      	ldr	r5, [pc, #376]	; (100096f0 <sms_mpu_selftest+0x3cc>)
10009576:	2200      	movs	r2, #0
10009578:	4b5e      	ldr	r3, [pc, #376]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000957a:	47a8      	blx	r5
1000957c:	4c5e      	ldr	r4, [pc, #376]	; (100096f8 <sms_mpu_selftest+0x3d4>)
1000957e:	47a0      	blx	r4
10009580:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009582:	9800      	ldr	r0, [sp, #0]
10009584:	47d0      	blx	sl
10009586:	47c8      	blx	r9
10009588:	2200      	movs	r2, #0
1000958a:	4b55      	ldr	r3, [pc, #340]	; (100096e0 <sms_mpu_selftest+0x3bc>)
1000958c:	47b0      	blx	r6
1000958e:	0002      	movs	r2, r0
10009590:	000b      	movs	r3, r1
10009592:	4854      	ldr	r0, [pc, #336]	; (100096e4 <sms_mpu_selftest+0x3c0>)
10009594:	4954      	ldr	r1, [pc, #336]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009596:	47b8      	blx	r7
10009598:	2200      	movs	r2, #0
1000959a:	4b56      	ldr	r3, [pc, #344]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000959c:	47a8      	blx	r5
1000959e:	47a0      	blx	r4
100095a0:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
100095a2:	9804      	ldr	r0, [sp, #16]
100095a4:	47d0      	blx	sl
100095a6:	47c8      	blx	r9
100095a8:	2200      	movs	r2, #0
100095aa:	4b4d      	ldr	r3, [pc, #308]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095ac:	47b0      	blx	r6
100095ae:	0002      	movs	r2, r0
100095b0:	000b      	movs	r3, r1
100095b2:	484c      	ldr	r0, [pc, #304]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095b4:	494c      	ldr	r1, [pc, #304]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095b6:	47b8      	blx	r7
100095b8:	2200      	movs	r2, #0
100095ba:	4b4e      	ldr	r3, [pc, #312]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095bc:	47a8      	blx	r5
100095be:	47a0      	blx	r4
100095c0:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
100095c2:	9805      	ldr	r0, [sp, #20]
100095c4:	47d0      	blx	sl
100095c6:	47c8      	blx	r9
100095c8:	2200      	movs	r2, #0
100095ca:	4b45      	ldr	r3, [pc, #276]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095cc:	47b0      	blx	r6
100095ce:	0002      	movs	r2, r0
100095d0:	000b      	movs	r3, r1
100095d2:	4844      	ldr	r0, [pc, #272]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095d4:	4944      	ldr	r1, [pc, #272]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095d6:	47b8      	blx	r7
100095d8:	2200      	movs	r2, #0
100095da:	4b46      	ldr	r3, [pc, #280]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095dc:	47a8      	blx	r5
100095de:	47a0      	blx	r4
100095e0:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
100095e2:	9806      	ldr	r0, [sp, #24]
100095e4:	47d0      	blx	sl
100095e6:	47c8      	blx	r9
100095e8:	2200      	movs	r2, #0
100095ea:	4b3d      	ldr	r3, [pc, #244]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095ec:	47b0      	blx	r6
100095ee:	0002      	movs	r2, r0
100095f0:	000b      	movs	r3, r1
100095f2:	483c      	ldr	r0, [pc, #240]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095f4:	493c      	ldr	r1, [pc, #240]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095f6:	47b8      	blx	r7
100095f8:	2200      	movs	r2, #0
100095fa:	4b3e      	ldr	r3, [pc, #248]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095fc:	47a8      	blx	r5
100095fe:	47a0      	blx	r4
10009600:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009602:	9807      	ldr	r0, [sp, #28]
10009604:	47d0      	blx	sl
10009606:	47c8      	blx	r9
10009608:	2200      	movs	r2, #0
1000960a:	4b35      	ldr	r3, [pc, #212]	; (100096e0 <sms_mpu_selftest+0x3bc>)
1000960c:	47b0      	blx	r6
1000960e:	0002      	movs	r2, r0
10009610:	000b      	movs	r3, r1
10009612:	4834      	ldr	r0, [pc, #208]	; (100096e4 <sms_mpu_selftest+0x3c0>)
10009614:	4934      	ldr	r1, [pc, #208]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009616:	47b8      	blx	r7
10009618:	2200      	movs	r2, #0
1000961a:	4b36      	ldr	r3, [pc, #216]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000961c:	47a8      	blx	r5
1000961e:	47a0      	blx	r4
10009620:	900d      	str	r0, [sp, #52]	; 0x34
10009622:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009624:	4b35      	ldr	r3, [pc, #212]	; (100096fc <sms_mpu_selftest+0x3d8>)
10009626:	4699      	mov	r9, r3
10009628:	4d2b      	ldr	r5, [pc, #172]	; (100096d8 <sms_mpu_selftest+0x3b4>)
1000962a:	4b31      	ldr	r3, [pc, #196]	; (100096f0 <sms_mpu_selftest+0x3cc>)
1000962c:	4698      	mov	r8, r3
1000962e:	4b34      	ldr	r3, [pc, #208]	; (10009700 <sms_mpu_selftest+0x3dc>)
10009630:	469a      	mov	sl, r3
10009632:	4f2a      	ldr	r7, [pc, #168]	; (100096dc <sms_mpu_selftest+0x3b8>)
10009634:	4e30      	ldr	r6, [pc, #192]	; (100096f8 <sms_mpu_selftest+0x3d4>)
10009636:	ab11      	add	r3, sp, #68	; 0x44
10009638:	58e3      	ldr	r3, [r4, r3]
1000963a:	aa14      	add	r2, sp, #80	; 0x50
1000963c:	58a0      	ldr	r0, [r4, r2]
1000963e:	1a18      	subs	r0, r3, r0
10009640:	47c8      	blx	r9
10009642:	47a8      	blx	r5
10009644:	2200      	movs	r2, #0
10009646:	4b2f      	ldr	r3, [pc, #188]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009648:	47c0      	blx	r8
1000964a:	9000      	str	r0, [sp, #0]
1000964c:	9101      	str	r1, [sp, #4]
1000964e:	ab08      	add	r3, sp, #32
10009650:	58e0      	ldr	r0, [r4, r3]
10009652:	47a8      	blx	r5
10009654:	0002      	movs	r2, r0
10009656:	000b      	movs	r3, r1
10009658:	9800      	ldr	r0, [sp, #0]
1000965a:	9901      	ldr	r1, [sp, #4]
1000965c:	47d0      	blx	sl
1000965e:	2200      	movs	r2, #0
10009660:	4b28      	ldr	r3, [pc, #160]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009662:	47b8      	blx	r7
10009664:	47b0      	blx	r6
10009666:	9b03      	ldr	r3, [sp, #12]
10009668:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
1000966a:	469b      	mov	fp, r3
1000966c:	44a3      	add	fp, r4
1000966e:	ab0e      	add	r3, sp, #56	; 0x38
10009670:	58e3      	ldr	r3, [r4, r3]
10009672:	aa17      	add	r2, sp, #92	; 0x5c
10009674:	58a0      	ldr	r0, [r4, r2]
10009676:	1a18      	subs	r0, r3, r0
10009678:	47c8      	blx	r9
1000967a:	47a8      	blx	r5
1000967c:	2200      	movs	r2, #0
1000967e:	4b21      	ldr	r3, [pc, #132]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009680:	47c0      	blx	r8
10009682:	9000      	str	r0, [sp, #0]
10009684:	9101      	str	r1, [sp, #4]
10009686:	0023      	movs	r3, r4
10009688:	aa08      	add	r2, sp, #32
1000968a:	4694      	mov	ip, r2
1000968c:	4463      	add	r3, ip
1000968e:	68d8      	ldr	r0, [r3, #12]
10009690:	47a8      	blx	r5
10009692:	0002      	movs	r2, r0
10009694:	000b      	movs	r3, r1
10009696:	9800      	ldr	r0, [sp, #0]
10009698:	9901      	ldr	r1, [sp, #4]
1000969a:	47d0      	blx	sl
1000969c:	2200      	movs	r2, #0
1000969e:	4b19      	ldr	r3, [pc, #100]	; (10009704 <sms_mpu_selftest+0x3e0>)
100096a0:	47b8      	blx	r7
100096a2:	47b0      	blx	r6
100096a4:	465b      	mov	r3, fp
100096a6:	60d8      	str	r0, [r3, #12]
100096a8:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
100096aa:	2c0c      	cmp	r4, #12
100096ac:	d1c3      	bne.n	10009636 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
100096ae:	b01d      	add	sp, #116	; 0x74
100096b0:	bc3c      	pop	{r2, r3, r4, r5}
100096b2:	4690      	mov	r8, r2
100096b4:	4699      	mov	r9, r3
100096b6:	46a2      	mov	sl, r4
100096b8:	46ab      	mov	fp, r5
100096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096bc:	10014a41 	.word	0x10014a41
100096c0:	10008d4d 	.word	0x10008d4d
100096c4:	10008bd5 	.word	0x10008bd5
100096c8:	10011e29 	.word	0x10011e29
100096cc:	10009cfd 	.word	0x10009cfd
100096d0:	10009249 	.word	0x10009249
100096d4:	10012b51 	.word	0x10012b51
100096d8:	100147a9 	.word	0x100147a9
100096dc:	10013f61 	.word	0x10013f61
100096e0:	3ff00000 	.word	0x3ff00000
100096e4:	c28f5c29 	.word	0xc28f5c29
100096e8:	3ff028f5 	.word	0x3ff028f5
100096ec:	10010acd 	.word	0x10010acd
100096f0:	10013a6d 	.word	0x10013a6d
100096f4:	40a47800 	.word	0x40a47800
100096f8:	10014851 	.word	0x10014851
100096fc:	10012ac1 	.word	0x10012ac1
10009700:	10013225 	.word	0x10013225
10009704:	40590000 	.word	0x40590000

10009708 <sms_mpu_check>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
10009708:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000970a:	2175      	movs	r1, #117	; 0x75
1000970c:	2069      	movs	r0, #105	; 0x69
1000970e:	4b06      	ldr	r3, [pc, #24]	; (10009728 <sms_mpu_check+0x20>)
10009710:	4798      	blx	r3
	if(c == 0x71) {
10009712:	2871      	cmp	r0, #113	; 0x71
10009714:	d104      	bne.n	10009720 <sms_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_mpu_selftest(mpu_device.hal.self_test);
10009716:	4805      	ldr	r0, [pc, #20]	; (1000972c <sms_mpu_check+0x24>)
10009718:	4b05      	ldr	r3, [pc, #20]	; (10009730 <sms_mpu_check+0x28>)
1000971a:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000971c:	2000      	movs	r0, #0
1000971e:	e001      	b.n	10009724 <sms_mpu_check+0x1c>
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
	int retVal = -1;
10009720:	2001      	movs	r0, #1
10009722:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.hal.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009724:	bd10      	pop	{r4, pc}
10009726:	46c0      	nop			; (mov r8, r8)
10009728:	10009249 	.word	0x10009249
1000972c:	10018720 	.word	0x10018720
10009730:	10009325 	.word	0x10009325

10009734 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10009734:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009736:	2100      	movs	r1, #0
10009738:	4b01      	ldr	r3, [pc, #4]	; (10009740 <sms_led_switch_on+0xc>)
1000973a:	4798      	blx	r3
}
1000973c:	bd10      	pop	{r4, pc}
1000973e:	46c0      	nop			; (mov r8, r8)
10009740:	1000a559 	.word	0x1000a559

10009744 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009744:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009746:	2101      	movs	r1, #1
10009748:	4b01      	ldr	r3, [pc, #4]	; (10009750 <sms_led_switch_off+0xc>)
1000974a:	4798      	blx	r3
}
1000974c:	bd10      	pop	{r4, pc}
1000974e:	46c0      	nop			; (mov r8, r8)
10009750:	1000a559 	.word	0x1000a559

10009754 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009754:	b510      	push	{r4, lr}
10009756:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009758:	ac01      	add	r4, sp, #4
1000975a:	0020      	movs	r0, r4
1000975c:	4b06      	ldr	r3, [pc, #24]	; (10009778 <sms_led_gpio_init+0x24>)
1000975e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009760:	2301      	movs	r3, #1
10009762:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009764:	0021      	movs	r1, r4
10009766:	2016      	movs	r0, #22
10009768:	4b04      	ldr	r3, [pc, #16]	; (1000977c <sms_led_gpio_init+0x28>)
1000976a:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000976c:	2016      	movs	r0, #22
1000976e:	4b04      	ldr	r3, [pc, #16]	; (10009780 <sms_led_gpio_init+0x2c>)
10009770:	4798      	blx	r3
}
10009772:	b002      	add	sp, #8
10009774:	bd10      	pop	{r4, pc}
10009776:	46c0      	nop			; (mov r8, r8)
10009778:	1000a391 	.word	0x1000a391
1000977c:	1000a3a1 	.word	0x1000a3a1
10009780:	10009745 	.word	0x10009745

10009784 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009784:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009786:	4b0c      	ldr	r3, [pc, #48]	; (100097b8 <sms_led_blink_start+0x34>)
10009788:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000978a:	2200      	movs	r2, #0
1000978c:	4b0b      	ldr	r3, [pc, #44]	; (100097bc <sms_led_blink_start+0x38>)
1000978e:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009790:	4b0b      	ldr	r3, [pc, #44]	; (100097c0 <sms_led_blink_start+0x3c>)
10009792:	781b      	ldrb	r3, [r3, #0]
10009794:	b2db      	uxtb	r3, r3
10009796:	2b02      	cmp	r3, #2
10009798:	d002      	beq.n	100097a0 <sms_led_blink_start+0x1c>
1000979a:	2b03      	cmp	r3, #3
1000979c:	d002      	beq.n	100097a4 <sms_led_blink_start+0x20>
1000979e:	e004      	b.n	100097aa <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
100097a0:	2164      	movs	r1, #100	; 0x64
100097a2:	e003      	b.n	100097ac <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
100097a4:	21c8      	movs	r1, #200	; 0xc8
100097a6:	0049      	lsls	r1, r1, #1
        break;
100097a8:	e000      	b.n	100097ac <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
100097aa:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
100097ac:	2201      	movs	r2, #1
100097ae:	2001      	movs	r0, #1
100097b0:	4b04      	ldr	r3, [pc, #16]	; (100097c4 <sms_led_blink_start+0x40>)
100097b2:	4798      	blx	r3
}
100097b4:	bd10      	pop	{r4, pc}
100097b6:	46c0      	nop			; (mov r8, r8)
100097b8:	10009735 	.word	0x10009735
100097bc:	10018980 	.word	0x10018980
100097c0:	10018933 	.word	0x10018933
100097c4:	10009c71 	.word	0x10009c71

100097c8 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
100097c8:	4b06      	ldr	r3, [pc, #24]	; (100097e4 <sms_pressure_init_variables+0x1c>)
100097ca:	2200      	movs	r2, #0
100097cc:	2125      	movs	r1, #37	; 0x25
100097ce:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
100097d0:	3106      	adds	r1, #6
100097d2:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
100097d4:	3901      	subs	r1, #1
100097d6:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
100097d8:	3902      	subs	r1, #2
100097da:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
100097dc:	3101      	adds	r1, #1
100097de:	545a      	strb	r2, [r3, r1]
}
100097e0:	4770      	bx	lr
100097e2:	46c0      	nop			; (mov r8, r8)
100097e4:	10018898 	.word	0x10018898

100097e8 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
100097e8:	b510      	push	{r4, lr}
100097ea:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
100097ec:	4a05      	ldr	r2, [pc, #20]	; (10009804 <sms_pressure_ms58_reset+0x1c>)
100097ee:	231e      	movs	r3, #30
100097f0:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
100097f2:	3b1d      	subs	r3, #29
100097f4:	9300      	str	r3, [sp, #0]
100097f6:	4b04      	ldr	r3, [pc, #16]	; (10009808 <sms_pressure_ms58_reset+0x20>)
100097f8:	4904      	ldr	r1, [pc, #16]	; (1000980c <sms_pressure_ms58_reset+0x24>)
100097fa:	4805      	ldr	r0, [pc, #20]	; (10009810 <sms_pressure_ms58_reset+0x28>)
100097fc:	4c05      	ldr	r4, [pc, #20]	; (10009814 <sms_pressure_ms58_reset+0x2c>)
100097fe:	47a0      	blx	r4
}
10009800:	b002      	add	sp, #8
10009802:	bd10      	pop	{r4, pc}
10009804:	10018888 	.word	0x10018888
10009808:	10018874 	.word	0x10018874
1000980c:	10018938 	.word	0x10018938
10009810:	10018944 	.word	0x10018944
10009814:	10009b41 	.word	0x10009b41

10009818 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009818:	b5f0      	push	{r4, r5, r6, r7, lr}
1000981a:	4657      	mov	r7, sl
1000981c:	b480      	push	{r7}
1000981e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009820:	4d37      	ldr	r5, [pc, #220]	; (10009900 <sms_pressure_ms58_read_prom+0xe8>)
10009822:	23a2      	movs	r3, #162	; 0xa2
10009824:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
10009826:	2300      	movs	r3, #0
10009828:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000982a:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000982c:	4c35      	ldr	r4, [pc, #212]	; (10009904 <sms_pressure_ms58_read_prom+0xec>)
1000982e:	3303      	adds	r3, #3
10009830:	469a      	mov	sl, r3
10009832:	9300      	str	r3, [sp, #0]
10009834:	0023      	movs	r3, r4
10009836:	002a      	movs	r2, r5
10009838:	4933      	ldr	r1, [pc, #204]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
1000983a:	4834      	ldr	r0, [pc, #208]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
1000983c:	4f34      	ldr	r7, [pc, #208]	; (10009910 <sms_pressure_ms58_read_prom+0xf8>)
1000983e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009840:	4e34      	ldr	r6, [pc, #208]	; (10009914 <sms_pressure_ms58_read_prom+0xfc>)
10009842:	7863      	ldrb	r3, [r4, #1]
10009844:	021b      	lsls	r3, r3, #8
10009846:	78a2      	ldrb	r2, [r4, #2]
10009848:	4313      	orrs	r3, r2
1000984a:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000984c:	23a4      	movs	r3, #164	; 0xa4
1000984e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009850:	4653      	mov	r3, sl
10009852:	9300      	str	r3, [sp, #0]
10009854:	0023      	movs	r3, r4
10009856:	002a      	movs	r2, r5
10009858:	492b      	ldr	r1, [pc, #172]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
1000985a:	482c      	ldr	r0, [pc, #176]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
1000985c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000985e:	7863      	ldrb	r3, [r4, #1]
10009860:	021b      	lsls	r3, r3, #8
10009862:	78a2      	ldrb	r2, [r4, #2]
10009864:	4313      	orrs	r3, r2
10009866:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009868:	23a6      	movs	r3, #166	; 0xa6
1000986a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000986c:	4653      	mov	r3, sl
1000986e:	9300      	str	r3, [sp, #0]
10009870:	0023      	movs	r3, r4
10009872:	002a      	movs	r2, r5
10009874:	4924      	ldr	r1, [pc, #144]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
10009876:	4825      	ldr	r0, [pc, #148]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
10009878:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000987a:	7863      	ldrb	r3, [r4, #1]
1000987c:	021b      	lsls	r3, r3, #8
1000987e:	78a2      	ldrb	r2, [r4, #2]
10009880:	4313      	orrs	r3, r2
10009882:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009884:	23a8      	movs	r3, #168	; 0xa8
10009886:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009888:	4653      	mov	r3, sl
1000988a:	9300      	str	r3, [sp, #0]
1000988c:	0023      	movs	r3, r4
1000988e:	002a      	movs	r2, r5
10009890:	491d      	ldr	r1, [pc, #116]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
10009892:	481e      	ldr	r0, [pc, #120]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
10009894:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009896:	7863      	ldrb	r3, [r4, #1]
10009898:	021b      	lsls	r3, r3, #8
1000989a:	78a2      	ldrb	r2, [r4, #2]
1000989c:	4313      	orrs	r3, r2
1000989e:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
100098a0:	23aa      	movs	r3, #170	; 0xaa
100098a2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098a4:	4653      	mov	r3, sl
100098a6:	9300      	str	r3, [sp, #0]
100098a8:	0023      	movs	r3, r4
100098aa:	002a      	movs	r2, r5
100098ac:	4916      	ldr	r1, [pc, #88]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
100098ae:	4817      	ldr	r0, [pc, #92]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
100098b0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098b2:	7863      	ldrb	r3, [r4, #1]
100098b4:	021b      	lsls	r3, r3, #8
100098b6:	78a2      	ldrb	r2, [r4, #2]
100098b8:	4313      	orrs	r3, r2
100098ba:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
100098bc:	23ac      	movs	r3, #172	; 0xac
100098be:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098c0:	4653      	mov	r3, sl
100098c2:	9300      	str	r3, [sp, #0]
100098c4:	0023      	movs	r3, r4
100098c6:	002a      	movs	r2, r5
100098c8:	490f      	ldr	r1, [pc, #60]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
100098ca:	4810      	ldr	r0, [pc, #64]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
100098cc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098ce:	7863      	ldrb	r3, [r4, #1]
100098d0:	021b      	lsls	r3, r3, #8
100098d2:	78a2      	ldrb	r2, [r4, #2]
100098d4:	4313      	orrs	r3, r2
100098d6:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
100098d8:	23ae      	movs	r3, #174	; 0xae
100098da:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098dc:	4653      	mov	r3, sl
100098de:	9300      	str	r3, [sp, #0]
100098e0:	0023      	movs	r3, r4
100098e2:	002a      	movs	r2, r5
100098e4:	4908      	ldr	r1, [pc, #32]	; (10009908 <sms_pressure_ms58_read_prom+0xf0>)
100098e6:	4809      	ldr	r0, [pc, #36]	; (1000990c <sms_pressure_ms58_read_prom+0xf4>)
100098e8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098ea:	7863      	ldrb	r3, [r4, #1]
100098ec:	021b      	lsls	r3, r3, #8
100098ee:	78a2      	ldrb	r2, [r4, #2]
100098f0:	4313      	orrs	r3, r2
100098f2:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
100098f4:	2000      	movs	r0, #0
100098f6:	b002      	add	sp, #8
100098f8:	bc04      	pop	{r2}
100098fa:	4692      	mov	sl, r2
100098fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100098fe:	46c0      	nop			; (mov r8, r8)
10009900:	10018888 	.word	0x10018888
10009904:	10018874 	.word	0x10018874
10009908:	10018938 	.word	0x10018938
1000990c:	10018944 	.word	0x10018944
10009910:	10009b41 	.word	0x10009b41
10009914:	10018898 	.word	0x10018898

10009918 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009918:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000991a:	4b0a      	ldr	r3, [pc, #40]	; (10009944 <sms_pressure_init+0x2c>)
1000991c:	4798      	blx	r3
1000991e:	2800      	cmp	r0, #0
10009920:	d10d      	bne.n	1000993e <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
10009922:	4b09      	ldr	r3, [pc, #36]	; (10009948 <sms_pressure_init+0x30>)
10009924:	2201      	movs	r2, #1
10009926:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009928:	2402      	movs	r4, #2
1000992a:	2125      	movs	r1, #37	; 0x25
1000992c:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000992e:	3103      	adds	r1, #3
10009930:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
10009932:	2200      	movs	r2, #0
10009934:	3101      	adds	r1, #1
10009936:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009938:	3101      	adds	r1, #1
1000993a:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000993c:	e000      	b.n	10009940 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000993e:	2010      	movs	r0, #16
}
10009940:	bd10      	pop	{r4, pc}
10009942:	46c0      	nop			; (mov r8, r8)
10009944:	10009819 	.word	0x10009819
10009948:	10018898 	.word	0x10018898

1000994c <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000994c:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000994e:	2101      	movs	r1, #1
10009950:	2001      	movs	r0, #1
10009952:	4b10      	ldr	r3, [pc, #64]	; (10009994 <sms_pressure_startup+0x48>)
10009954:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009956:	2101      	movs	r1, #1
10009958:	2325      	movs	r3, #37	; 0x25
1000995a:	4a0f      	ldr	r2, [pc, #60]	; (10009998 <sms_pressure_startup+0x4c>)
1000995c:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000995e:	4b0f      	ldr	r3, [pc, #60]	; (1000999c <sms_pressure_startup+0x50>)
10009960:	4798      	blx	r3
    delay_ms(3);
10009962:	2003      	movs	r0, #3
10009964:	4b0e      	ldr	r3, [pc, #56]	; (100099a0 <sms_pressure_startup+0x54>)
10009966:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
10009968:	4b0e      	ldr	r3, [pc, #56]	; (100099a4 <sms_pressure_startup+0x58>)
1000996a:	4798      	blx	r3
1000996c:	2800      	cmp	r0, #0
1000996e:	d000      	beq.n	10009972 <sms_pressure_startup+0x26>
10009970:	e7fe      	b.n	10009970 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
10009972:	4b09      	ldr	r3, [pc, #36]	; (10009998 <sms_pressure_startup+0x4c>)
10009974:	2102      	movs	r1, #2
10009976:	2225      	movs	r2, #37	; 0x25
10009978:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000997a:	2401      	movs	r4, #1
1000997c:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000997e:	3a1e      	subs	r2, #30
10009980:	4b09      	ldr	r3, [pc, #36]	; (100099a8 <sms_pressure_startup+0x5c>)
10009982:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009984:	3901      	subs	r1, #1
10009986:	2001      	movs	r0, #1
10009988:	4b08      	ldr	r3, [pc, #32]	; (100099ac <sms_pressure_startup+0x60>)
1000998a:	4798      	blx	r3
    
    ulp_ready = true;
1000998c:	4b08      	ldr	r3, [pc, #32]	; (100099b0 <sms_pressure_startup+0x64>)
1000998e:	701c      	strb	r4, [r3, #0]
}
10009990:	bd10      	pop	{r4, pc}
10009992:	46c0      	nop			; (mov r8, r8)
10009994:	100089cd 	.word	0x100089cd
10009998:	10018898 	.word	0x10018898
1000999c:	100097e9 	.word	0x100097e9
100099a0:	10009cfd 	.word	0x10009cfd
100099a4:	10009919 	.word	0x10009919
100099a8:	100187f0 	.word	0x100187f0
100099ac:	10009a05 	.word	0x10009a05
100099b0:	100187f1 	.word	0x100187f1

100099b4 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
100099b4:	b510      	push	{r4, lr}
100099b6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100099b8:	466b      	mov	r3, sp
100099ba:	1dda      	adds	r2, r3, #7
100099bc:	2300      	movs	r3, #0
100099be:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
100099c0:	4c09      	ldr	r4, [pc, #36]	; (100099e8 <sms_pressure_define_services+0x34>)
100099c2:	0021      	movs	r1, r4
100099c4:	2001      	movs	r0, #1
100099c6:	4b09      	ldr	r3, [pc, #36]	; (100099ec <sms_pressure_define_services+0x38>)
100099c8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
100099ca:	0020      	movs	r0, r4
100099cc:	4b08      	ldr	r3, [pc, #32]	; (100099f0 <sms_pressure_define_services+0x3c>)
100099ce:	4798      	blx	r3
100099d0:	1e04      	subs	r4, r0, #0
100099d2:	d006      	beq.n	100099e2 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
100099d4:	4807      	ldr	r0, [pc, #28]	; (100099f4 <sms_pressure_define_services+0x40>)
100099d6:	4b08      	ldr	r3, [pc, #32]	; (100099f8 <sms_pressure_define_services+0x44>)
100099d8:	4798      	blx	r3
100099da:	0021      	movs	r1, r4
100099dc:	4807      	ldr	r0, [pc, #28]	; (100099fc <sms_pressure_define_services+0x48>)
100099de:	4b08      	ldr	r3, [pc, #32]	; (10009a00 <sms_pressure_define_services+0x4c>)
100099e0:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
100099e2:	b002      	add	sp, #8
100099e4:	bd10      	pop	{r4, pc}
100099e6:	46c0      	nop			; (mov r8, r8)
100099e8:	100188c4 	.word	0x100188c4
100099ec:	100087ad 	.word	0x100087ad
100099f0:	10008789 	.word	0x10008789
100099f4:	10015bf0 	.word	0x10015bf0
100099f8:	10014ca9 	.word	0x10014ca9
100099fc:	10015f08 	.word	0x10015f08
10009a00:	10014b89 	.word	0x10014b89

10009a04 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009a04:	b510      	push	{r4, lr}
10009a06:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009a08:	2800      	cmp	r0, #0
10009a0a:	d007      	beq.n	10009a1c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
10009a0c:	2102      	movs	r1, #2
10009a0e:	2371      	movs	r3, #113	; 0x71
10009a10:	4a15      	ldr	r2, [pc, #84]	; (10009a68 <sms_sensors_interrupt_toggle+0x64>)
10009a12:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009a14:	201e      	movs	r0, #30
10009a16:	4b15      	ldr	r3, [pc, #84]	; (10009a6c <sms_sensors_interrupt_toggle+0x68>)
10009a18:	4798      	blx	r3
10009a1a:	e006      	b.n	10009a2a <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
10009a1c:	2100      	movs	r1, #0
10009a1e:	2371      	movs	r3, #113	; 0x71
10009a20:	4a11      	ldr	r2, [pc, #68]	; (10009a68 <sms_sensors_interrupt_toggle+0x64>)
10009a22:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009a24:	201e      	movs	r0, #30
10009a26:	4b12      	ldr	r3, [pc, #72]	; (10009a70 <sms_sensors_interrupt_toggle+0x6c>)
10009a28:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009a2a:	2c00      	cmp	r4, #0
10009a2c:	d010      	beq.n	10009a50 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
10009a2e:	4b11      	ldr	r3, [pc, #68]	; (10009a74 <sms_sensors_interrupt_toggle+0x70>)
10009a30:	2103      	movs	r1, #3
10009a32:	2225      	movs	r2, #37	; 0x25
10009a34:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009a36:	3901      	subs	r1, #1
10009a38:	3206      	adds	r2, #6
10009a3a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
10009a3c:	2100      	movs	r1, #0
10009a3e:	480e      	ldr	r0, [pc, #56]	; (10009a78 <sms_sensors_interrupt_toggle+0x74>)
10009a40:	4b0e      	ldr	r3, [pc, #56]	; (10009a7c <sms_sensors_interrupt_toggle+0x78>)
10009a42:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009a44:	4b0e      	ldr	r3, [pc, #56]	; (10009a80 <sms_sensors_interrupt_toggle+0x7c>)
10009a46:	4798      	blx	r3
        sensors_active = true;
10009a48:	2201      	movs	r2, #1
10009a4a:	4b0e      	ldr	r3, [pc, #56]	; (10009a84 <sms_sensors_interrupt_toggle+0x80>)
10009a4c:	701a      	strb	r2, [r3, #0]
10009a4e:	e00a      	b.n	10009a66 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
10009a50:	2102      	movs	r1, #2
10009a52:	2325      	movs	r3, #37	; 0x25
10009a54:	4a07      	ldr	r2, [pc, #28]	; (10009a74 <sms_sensors_interrupt_toggle+0x70>)
10009a56:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009a58:	4b0b      	ldr	r3, [pc, #44]	; (10009a88 <sms_sensors_interrupt_toggle+0x84>)
10009a5a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
10009a5c:	4b0b      	ldr	r3, [pc, #44]	; (10009a8c <sms_sensors_interrupt_toggle+0x88>)
10009a5e:	4798      	blx	r3
        sensors_active = false;
10009a60:	2200      	movs	r2, #0
10009a62:	4b08      	ldr	r3, [pc, #32]	; (10009a84 <sms_sensors_interrupt_toggle+0x80>)
10009a64:	701a      	strb	r2, [r3, #0]
    }
}
10009a66:	bd10      	pop	{r4, pc}
10009a68:	1001871c 	.word	0x1001871c
10009a6c:	1000a801 	.word	0x1000a801
10009a70:	1000a85d 	.word	0x1000a85d
10009a74:	10018898 	.word	0x10018898
10009a78:	000003d5 	.word	0x000003d5
10009a7c:	10009ba5 	.word	0x10009ba5
10009a80:	10009bd9 	.word	0x10009bd9
10009a84:	10018924 	.word	0x10018924
10009a88:	10009bcd 	.word	0x10009bcd
10009a8c:	10009bf9 	.word	0x10009bf9

10009a90 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009a90:	b510      	push	{r4, lr}
10009a92:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009a94:	2800      	cmp	r0, #0
10009a96:	d103      	bne.n	10009aa0 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009a98:	2100      	movs	r1, #0
10009a9a:	3006      	adds	r0, #6
10009a9c:	4b07      	ldr	r3, [pc, #28]	; (10009abc <sms_sensors_switch+0x2c>)
10009a9e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009aa0:	2c00      	cmp	r4, #0
10009aa2:	d006      	beq.n	10009ab2 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009aa4:	2101      	movs	r1, #1
10009aa6:	2325      	movs	r3, #37	; 0x25
10009aa8:	4a05      	ldr	r2, [pc, #20]	; (10009ac0 <sms_sensors_switch+0x30>)
10009aaa:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
10009aac:	4b05      	ldr	r3, [pc, #20]	; (10009ac4 <sms_sensors_switch+0x34>)
10009aae:	4798      	blx	r3
10009ab0:	e003      	b.n	10009aba <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009ab2:	2100      	movs	r1, #0
10009ab4:	2007      	movs	r0, #7
10009ab6:	4b01      	ldr	r3, [pc, #4]	; (10009abc <sms_sensors_switch+0x2c>)
10009ab8:	4798      	blx	r3
    }
}
10009aba:	bd10      	pop	{r4, pc}
10009abc:	1000a559 	.word	0x1000a559
10009ac0:	10018898 	.word	0x10018898
10009ac4:	1000994d 	.word	0x1000994d

10009ac8 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009ac8:	b530      	push	{r4, r5, lr}
10009aca:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009acc:	ac01      	add	r4, sp, #4
10009ace:	0020      	movs	r0, r4
10009ad0:	4b13      	ldr	r3, [pc, #76]	; (10009b20 <sms_spi_master_configure+0x58>)
10009ad2:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009ad4:	2310      	movs	r3, #16
10009ad6:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009ad8:	0021      	movs	r1, r4
10009ada:	4812      	ldr	r0, [pc, #72]	; (10009b24 <sms_spi_master_configure+0x5c>)
10009adc:	4b12      	ldr	r3, [pc, #72]	; (10009b28 <sms_spi_master_configure+0x60>)
10009ade:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009ae0:	ac02      	add	r4, sp, #8
10009ae2:	0020      	movs	r0, r4
10009ae4:	4b11      	ldr	r3, [pc, #68]	; (10009b2c <sms_spi_master_configure+0x64>)
10009ae6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009ae8:	2368      	movs	r3, #104	; 0x68
10009aea:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009aec:	2300      	movs	r3, #0
10009aee:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009af0:	3311      	adds	r3, #17
10009af2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009af4:	3b0d      	subs	r3, #13
10009af6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009af8:	2213      	movs	r2, #19
10009afa:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009afc:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009afe:	3a14      	subs	r2, #20
10009b00:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009b02:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009b04:	3213      	adds	r2, #19
10009b06:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009b08:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009b0a:	4d09      	ldr	r5, [pc, #36]	; (10009b30 <sms_spi_master_configure+0x68>)
10009b0c:	0022      	movs	r2, r4
10009b0e:	4909      	ldr	r1, [pc, #36]	; (10009b34 <sms_spi_master_configure+0x6c>)
10009b10:	0028      	movs	r0, r5
10009b12:	4b09      	ldr	r3, [pc, #36]	; (10009b38 <sms_spi_master_configure+0x70>)
10009b14:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009b16:	0028      	movs	r0, r5
10009b18:	4b08      	ldr	r3, [pc, #32]	; (10009b3c <sms_spi_master_configure+0x74>)
10009b1a:	4798      	blx	r3
}
10009b1c:	b00d      	add	sp, #52	; 0x34
10009b1e:	bd30      	pop	{r4, r5, pc}
10009b20:	10009d29 	.word	0x10009d29
10009b24:	10018938 	.word	0x10018938
10009b28:	10009d61 	.word	0x10009d61
10009b2c:	10009d35 	.word	0x10009d35
10009b30:	10018944 	.word	0x10018944
10009b34:	40007000 	.word	0x40007000
10009b38:	10009e31 	.word	0x10009e31
10009b3c:	10009da1 	.word	0x10009da1

10009b40 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009b40:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b42:	b083      	sub	sp, #12
10009b44:	0004      	movs	r4, r0
10009b46:	000d      	movs	r5, r1
10009b48:	9200      	str	r2, [sp, #0]
10009b4a:	9301      	str	r3, [sp, #4]
10009b4c:	ab08      	add	r3, sp, #32
10009b4e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009b50:	2201      	movs	r2, #1
10009b52:	4f08      	ldr	r7, [pc, #32]	; (10009b74 <sms_spi_master_transceive+0x34>)
10009b54:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009b56:	0033      	movs	r3, r6
10009b58:	9a01      	ldr	r2, [sp, #4]
10009b5a:	9900      	ldr	r1, [sp, #0]
10009b5c:	0020      	movs	r0, r4
10009b5e:	4e06      	ldr	r6, [pc, #24]	; (10009b78 <sms_spi_master_transceive+0x38>)
10009b60:	47b0      	blx	r6
10009b62:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009b64:	2200      	movs	r2, #0
10009b66:	0029      	movs	r1, r5
10009b68:	0020      	movs	r0, r4
10009b6a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009b6c:	0030      	movs	r0, r6
10009b6e:	b003      	add	sp, #12
10009b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b72:	46c0      	nop			; (mov r8, r8)
10009b74:	1000a019 	.word	0x1000a019
10009b78:	10009f95 	.word	0x10009f95

10009b7c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
10009b7c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
10009b7e:	2328      	movs	r3, #40	; 0x28
10009b80:	4a06      	ldr	r2, [pc, #24]	; (10009b9c <sms_timer_aon_callback+0x20>)
10009b82:	5cd3      	ldrb	r3, [r2, r3]
10009b84:	2b00      	cmp	r3, #0
10009b86:	d008      	beq.n	10009b9a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009b88:	2101      	movs	r1, #1
10009b8a:	2329      	movs	r3, #41	; 0x29
10009b8c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
10009b8e:	2300      	movs	r3, #0
10009b90:	2200      	movs	r2, #0
10009b92:	3102      	adds	r1, #2
10009b94:	2042      	movs	r0, #66	; 0x42
10009b96:	4c02      	ldr	r4, [pc, #8]	; (10009ba0 <sms_timer_aon_callback+0x24>)
10009b98:	47a0      	blx	r4
	}
}
10009b9a:	bd10      	pop	{r4, pc}
10009b9c:	10018898 	.word	0x10018898
10009ba0:	1000d09d 	.word	0x1000d09d

10009ba4 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009ba4:	b530      	push	{r4, r5, lr}
10009ba6:	b083      	sub	sp, #12
10009ba8:	0004      	movs	r4, r0
10009baa:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009bac:	4668      	mov	r0, sp
10009bae:	4b05      	ldr	r3, [pc, #20]	; (10009bc4 <sms_timer_aon_init+0x20>)
10009bb0:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009bb2:	466b      	mov	r3, sp
10009bb4:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
10009bb6:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
10009bb8:	4668      	mov	r0, sp
10009bba:	4b03      	ldr	r3, [pc, #12]	; (10009bc8 <sms_timer_aon_init+0x24>)
10009bbc:	4798      	blx	r3
}
10009bbe:	b003      	add	sp, #12
10009bc0:	bd30      	pop	{r4, r5, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	100080e9 	.word	0x100080e9
10009bc8:	1000815d 	.word	0x1000815d

10009bcc <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009bcc:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009bce:	4b01      	ldr	r3, [pc, #4]	; (10009bd4 <sms_timer_aon_disable+0x8>)
10009bd0:	4798      	blx	r3
}
10009bd2:	bd10      	pop	{r4, pc}
10009bd4:	100080f9 	.word	0x100080f9

10009bd8 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
10009bd8:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
10009bda:	4804      	ldr	r0, [pc, #16]	; (10009bec <sms_timer_aon_register_callback+0x14>)
10009bdc:	4b04      	ldr	r3, [pc, #16]	; (10009bf0 <sms_timer_aon_register_callback+0x18>)
10009bde:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009be0:	2280      	movs	r2, #128	; 0x80
10009be2:	0512      	lsls	r2, r2, #20
10009be4:	4b03      	ldr	r3, [pc, #12]	; (10009bf4 <sms_timer_aon_register_callback+0x1c>)
10009be6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009be8:	bd10      	pop	{r4, pc}
10009bea:	46c0      	nop			; (mov r8, r8)
10009bec:	10009b7d 	.word	0x10009b7d
10009bf0:	10008145 	.word	0x10008145
10009bf4:	e000e100 	.word	0xe000e100

10009bf8 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
10009bf8:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
10009bfa:	4b04      	ldr	r3, [pc, #16]	; (10009c0c <sms_timer_aon_unregister_callback+0x14>)
10009bfc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009bfe:	2180      	movs	r1, #128	; 0x80
10009c00:	0509      	lsls	r1, r1, #20
10009c02:	2380      	movs	r3, #128	; 0x80
10009c04:	4a02      	ldr	r2, [pc, #8]	; (10009c10 <sms_timer_aon_unregister_callback+0x18>)
10009c06:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009c08:	bd10      	pop	{r4, pc}
10009c0a:	46c0      	nop			; (mov r8, r8)
10009c0c:	10008151 	.word	0x10008151
10009c10:	e000e100 	.word	0xe000e100

10009c14 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009c14:	b510      	push	{r4, lr}
10009c16:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009c18:	ac01      	add	r4, sp, #4
10009c1a:	0020      	movs	r0, r4
10009c1c:	4b09      	ldr	r3, [pc, #36]	; (10009c44 <sms_dualtimer_init+0x30>)
10009c1e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009c20:	4b09      	ldr	r3, [pc, #36]	; (10009c48 <sms_dualtimer_init+0x34>)
10009c22:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009c24:	2300      	movs	r3, #0
10009c26:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
10009c28:	4a08      	ldr	r2, [pc, #32]	; (10009c4c <sms_dualtimer_init+0x38>)
10009c2a:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009c2c:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009c2e:	0020      	movs	r0, r4
10009c30:	4b07      	ldr	r3, [pc, #28]	; (10009c50 <sms_dualtimer_init+0x3c>)
10009c32:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009c34:	2000      	movs	r0, #0
10009c36:	4c07      	ldr	r4, [pc, #28]	; (10009c54 <sms_dualtimer_init+0x40>)
10009c38:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009c3a:	2001      	movs	r0, #1
10009c3c:	47a0      	blx	r4
}
10009c3e:	b008      	add	sp, #32
10009c40:	bd10      	pop	{r4, pc}
10009c42:	46c0      	nop			; (mov r8, r8)
10009c44:	1000a07d 	.word	0x1000a07d
10009c48:	018cba80 	.word	0x018cba80
10009c4c:	00006590 	.word	0x00006590
10009c50:	1000a125 	.word	0x1000a125
10009c54:	1000a101 	.word	0x1000a101

10009c58 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009c58:	b510      	push	{r4, lr}
10009c5a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009c5c:	4b02      	ldr	r3, [pc, #8]	; (10009c68 <sms_dualtimer_register_callback+0x10>)
10009c5e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009c60:	0020      	movs	r0, r4
10009c62:	4b02      	ldr	r3, [pc, #8]	; (10009c6c <sms_dualtimer_register_callback+0x14>)
10009c64:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
10009c66:	bd10      	pop	{r4, pc}
10009c68:	1000a229 	.word	0x1000a229
10009c6c:	1000a101 	.word	0x1000a101

10009c70 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009c70:	b510      	push	{r4, lr}
10009c72:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
10009c74:	2801      	cmp	r0, #1
10009c76:	d006      	beq.n	10009c86 <sms_dualtimer_start+0x16>
10009c78:	2800      	cmp	r0, #0
10009c7a:	d002      	beq.n	10009c82 <sms_dualtimer_start+0x12>
10009c7c:	2802      	cmp	r0, #2
10009c7e:	d004      	beq.n	10009c8a <sms_dualtimer_start+0x1a>
10009c80:	e005      	b.n	10009c8e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
10009c82:	221a      	movs	r2, #26
10009c84:	e004      	b.n	10009c90 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
10009c86:	4a0c      	ldr	r2, [pc, #48]	; (10009cb8 <sms_dualtimer_start+0x48>)
        break;
10009c88:	e002      	b.n	10009c90 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009c8a:	4a0c      	ldr	r2, [pc, #48]	; (10009cbc <sms_dualtimer_start+0x4c>)
        break;
10009c8c:	e000      	b.n	10009c90 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009c8e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009c90:	2900      	cmp	r1, #0
10009c92:	d101      	bne.n	10009c98 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
10009c94:	21fa      	movs	r1, #250	; 0xfa
10009c96:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009c98:	2000      	movs	r0, #0
10009c9a:	4b09      	ldr	r3, [pc, #36]	; (10009cc0 <sms_dualtimer_start+0x50>)
10009c9c:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009c9e:	434a      	muls	r2, r1
10009ca0:	2100      	movs	r1, #0
10009ca2:	0020      	movs	r0, r4
10009ca4:	4b07      	ldr	r3, [pc, #28]	; (10009cc4 <sms_dualtimer_start+0x54>)
10009ca6:	4798      	blx	r3
    dualtimer_enable(tmr);
10009ca8:	0020      	movs	r0, r4
10009caa:	4b07      	ldr	r3, [pc, #28]	; (10009cc8 <sms_dualtimer_start+0x58>)
10009cac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009cae:	2280      	movs	r2, #128	; 0x80
10009cb0:	01d2      	lsls	r2, r2, #7
10009cb2:	4b06      	ldr	r3, [pc, #24]	; (10009ccc <sms_dualtimer_start+0x5c>)
10009cb4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
10009cb6:	bd10      	pop	{r4, pc}
10009cb8:	00006590 	.word	0x00006590
10009cbc:	018cba80 	.word	0x018cba80
10009cc0:	100187f1 	.word	0x100187f1
10009cc4:	1000a0b5 	.word	0x1000a0b5
10009cc8:	1000a0dd 	.word	0x1000a0dd
10009ccc:	e000e100 	.word	0xe000e100

10009cd0 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
10009cd0:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
10009cd2:	4b01      	ldr	r3, [pc, #4]	; (10009cd8 <sms_dualtimer_stop+0x8>)
10009cd4:	4798      	blx	r3
}
10009cd6:	bd10      	pop	{r4, pc}
10009cd8:	1000a101 	.word	0x1000a101

10009cdc <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
10009cdc:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
10009cde:	2201      	movs	r2, #1
10009ce0:	4b04      	ldr	r3, [pc, #16]	; (10009cf4 <sms_dualtimer1_cb+0x18>)
10009ce2:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009ce4:	2300      	movs	r3, #0
10009ce6:	2200      	movs	r2, #0
10009ce8:	2101      	movs	r1, #1
10009cea:	2040      	movs	r0, #64	; 0x40
10009cec:	4c02      	ldr	r4, [pc, #8]	; (10009cf8 <sms_dualtimer1_cb+0x1c>)
10009cee:	47a0      	blx	r4
}
10009cf0:	bd10      	pop	{r4, pc}
10009cf2:	46c0      	nop			; (mov r8, r8)
10009cf4:	10018884 	.word	0x10018884
10009cf8:	1000d09d 	.word	0x1000d09d

10009cfc <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
10009cfc:	b510      	push	{r4, lr}
10009cfe:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009d00:	2201      	movs	r2, #1
10009d02:	2001      	movs	r0, #1
10009d04:	4b05      	ldr	r3, [pc, #20]	; (10009d1c <delay_ms+0x20>)
10009d06:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
10009d08:	4c05      	ldr	r4, [pc, #20]	; (10009d20 <delay_ms+0x24>)
10009d0a:	2001      	movs	r0, #1
10009d0c:	47a0      	blx	r4
10009d0e:	2800      	cmp	r0, #0
10009d10:	d1fb      	bne.n	10009d0a <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009d12:	3001      	adds	r0, #1
10009d14:	4b03      	ldr	r3, [pc, #12]	; (10009d24 <delay_ms+0x28>)
10009d16:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10009d18:	bd10      	pop	{r4, pc}
10009d1a:	46c0      	nop			; (mov r8, r8)
10009d1c:	10009c71 	.word	0x10009c71
10009d20:	1000a0a1 	.word	0x1000a0a1
10009d24:	1000a101 	.word	0x1000a101

10009d28 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10009d28:	230c      	movs	r3, #12
10009d2a:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10009d2c:	2300      	movs	r3, #0
10009d2e:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10009d30:	7083      	strb	r3, [r0, #2]
}
10009d32:	4770      	bx	lr

10009d34 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10009d34:	2301      	movs	r3, #1
10009d36:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10009d38:	2300      	movs	r3, #0
10009d3a:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
10009d3c:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
10009d3e:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10009d40:	3381      	adds	r3, #129	; 0x81
10009d42:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10009d44:	3b77      	subs	r3, #119	; 0x77
10009d46:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10009d48:	3301      	adds	r3, #1
10009d4a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
10009d4c:	3301      	adds	r3, #1
10009d4e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10009d50:	3301      	adds	r3, #1
10009d52:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10009d54:	3b0b      	subs	r3, #11
10009d56:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10009d58:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
10009d5a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
10009d5c:	6243      	str	r3, [r0, #36]	; 0x24
};
10009d5e:	4770      	bx	lr

10009d60 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10009d60:	b530      	push	{r4, r5, lr}
10009d62:	b083      	sub	sp, #12
10009d64:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10009d66:	780b      	ldrb	r3, [r1, #0]
10009d68:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10009d6a:	784b      	ldrb	r3, [r1, #1]
10009d6c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
10009d6e:	788b      	ldrb	r3, [r1, #2]
10009d70:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009d72:	ad01      	add	r5, sp, #4
10009d74:	0028      	movs	r0, r5
10009d76:	4b07      	ldr	r3, [pc, #28]	; (10009d94 <spi_attach_slave+0x34>)
10009d78:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009d7a:	2301      	movs	r3, #1
10009d7c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
10009d7e:	7820      	ldrb	r0, [r4, #0]
10009d80:	0029      	movs	r1, r5
10009d82:	4b05      	ldr	r3, [pc, #20]	; (10009d98 <spi_attach_slave+0x38>)
10009d84:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10009d86:	7820      	ldrb	r0, [r4, #0]
10009d88:	2101      	movs	r1, #1
10009d8a:	4b04      	ldr	r3, [pc, #16]	; (10009d9c <spi_attach_slave+0x3c>)
10009d8c:	4798      	blx	r3
}
10009d8e:	b003      	add	sp, #12
10009d90:	bd30      	pop	{r4, r5, pc}
10009d92:	46c0      	nop			; (mov r8, r8)
10009d94:	1000a391 	.word	0x1000a391
10009d98:	1000a3a1 	.word	0x1000a3a1
10009d9c:	1000a559 	.word	0x1000a559

10009da0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10009da0:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10009da2:	2201      	movs	r2, #1
10009da4:	761a      	strb	r2, [r3, #24]
}
10009da6:	4770      	bx	lr

10009da8 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10009da8:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009daa:	2300      	movs	r3, #0
10009dac:	6802      	ldr	r2, [r0, #0]
10009dae:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009db0:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10009db2:	4a0d      	ldr	r2, [pc, #52]	; (10009de8 <spi_disable+0x40>)
10009db4:	4293      	cmp	r3, r2
10009db6:	d109      	bne.n	10009dcc <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10009db8:	2041      	movs	r0, #65	; 0x41
10009dba:	4c0c      	ldr	r4, [pc, #48]	; (10009dec <spi_disable+0x44>)
10009dbc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10009dbe:	2026      	movs	r0, #38	; 0x26
10009dc0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10009dc2:	2038      	movs	r0, #56	; 0x38
10009dc4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10009dc6:	2001      	movs	r0, #1
10009dc8:	47a0      	blx	r4
10009dca:	e00b      	b.n	10009de4 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10009dcc:	4a08      	ldr	r2, [pc, #32]	; (10009df0 <spi_disable+0x48>)
10009dce:	4293      	cmp	r3, r2
10009dd0:	d108      	bne.n	10009de4 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10009dd2:	2042      	movs	r0, #66	; 0x42
10009dd4:	4c05      	ldr	r4, [pc, #20]	; (10009dec <spi_disable+0x44>)
10009dd6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10009dd8:	2027      	movs	r0, #39	; 0x27
10009dda:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10009ddc:	2039      	movs	r0, #57	; 0x39
10009dde:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009de0:	2002      	movs	r0, #2
10009de2:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10009de4:	bd10      	pop	{r4, pc}
10009de6:	46c0      	nop			; (mov r8, r8)
10009de8:	40006000 	.word	0x40006000
10009dec:	1000acf1 	.word	0x1000acf1
10009df0:	40007000 	.word	0x40007000

10009df4 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10009df4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10009df6:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10009df8:	4b09      	ldr	r3, [pc, #36]	; (10009e20 <spi_reset+0x2c>)
10009dfa:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10009dfc:	4b09      	ldr	r3, [pc, #36]	; (10009e24 <spi_reset+0x30>)
10009dfe:	429c      	cmp	r4, r3
10009e00:	d105      	bne.n	10009e0e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10009e02:	2001      	movs	r0, #1
10009e04:	4c08      	ldr	r4, [pc, #32]	; (10009e28 <spi_reset+0x34>)
10009e06:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10009e08:	2038      	movs	r0, #56	; 0x38
10009e0a:	47a0      	blx	r4
10009e0c:	e007      	b.n	10009e1e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10009e0e:	4b07      	ldr	r3, [pc, #28]	; (10009e2c <spi_reset+0x38>)
10009e10:	429c      	cmp	r4, r3
10009e12:	d104      	bne.n	10009e1e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10009e14:	2002      	movs	r0, #2
10009e16:	4c04      	ldr	r4, [pc, #16]	; (10009e28 <spi_reset+0x34>)
10009e18:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10009e1a:	2039      	movs	r0, #57	; 0x39
10009e1c:	47a0      	blx	r4
	}
}
10009e1e:	bd10      	pop	{r4, pc}
10009e20:	10009da9 	.word	0x10009da9
10009e24:	40006000 	.word	0x40006000
10009e28:	1000b05d 	.word	0x1000b05d
10009e2c:	40007000 	.word	0x40007000

10009e30 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e32:	465f      	mov	r7, fp
10009e34:	4646      	mov	r6, r8
10009e36:	b4c0      	push	{r6, r7}
10009e38:	b083      	sub	sp, #12
10009e3a:	0006      	movs	r6, r0
10009e3c:	4688      	mov	r8, r1
10009e3e:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10009e40:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10009e42:	7e0b      	ldrb	r3, [r1, #24]
10009e44:	07db      	lsls	r3, r3, #31
10009e46:	d501      	bpl.n	10009e4c <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009e48:	2300      	movs	r3, #0
10009e4a:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10009e4c:	0030      	movs	r0, r6
10009e4e:	4b4a      	ldr	r3, [pc, #296]	; (10009f78 <spi_init+0x148>)
10009e50:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009e52:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10009e54:	4a49      	ldr	r2, [pc, #292]	; (10009f7c <spi_init+0x14c>)
10009e56:	4293      	cmp	r3, r2
10009e58:	d109      	bne.n	10009e6e <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10009e5a:	2041      	movs	r0, #65	; 0x41
10009e5c:	4c48      	ldr	r4, [pc, #288]	; (10009f80 <spi_init+0x150>)
10009e5e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10009e60:	2026      	movs	r0, #38	; 0x26
10009e62:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10009e64:	2038      	movs	r0, #56	; 0x38
10009e66:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10009e68:	2001      	movs	r0, #1
10009e6a:	47a0      	blx	r4
10009e6c:	e00b      	b.n	10009e86 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10009e6e:	4a45      	ldr	r2, [pc, #276]	; (10009f84 <spi_init+0x154>)
10009e70:	4293      	cmp	r3, r2
10009e72:	d108      	bne.n	10009e86 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10009e74:	2042      	movs	r0, #66	; 0x42
10009e76:	4c42      	ldr	r4, [pc, #264]	; (10009f80 <spi_init+0x150>)
10009e78:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10009e7a:	2027      	movs	r0, #39	; 0x27
10009e7c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10009e7e:	2039      	movs	r0, #57	; 0x39
10009e80:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10009e82:	2002      	movs	r0, #2
10009e84:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009e86:	a801      	add	r0, sp, #4
10009e88:	4b3f      	ldr	r3, [pc, #252]	; (10009f88 <spi_init+0x158>)
10009e8a:	4798      	blx	r3
10009e8c:	002c      	movs	r4, r5
10009e8e:	3408      	adds	r4, #8
10009e90:	2318      	movs	r3, #24
10009e92:	469b      	mov	fp, r3
10009e94:	44ab      	add	fp, r5
10009e96:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10009e98:	6820      	ldr	r0, [r4, #0]
10009e9a:	1c43      	adds	r3, r0, #1
10009e9c:	d011      	beq.n	10009ec2 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
10009e9e:	782b      	ldrb	r3, [r5, #0]
10009ea0:	2b01      	cmp	r3, #1
10009ea2:	d102      	bne.n	10009eaa <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009ea4:	466a      	mov	r2, sp
10009ea6:	7113      	strb	r3, [r2, #4]
10009ea8:	e003      	b.n	10009eb2 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
10009eaa:	2b00      	cmp	r3, #0
10009eac:	d101      	bne.n	10009eb2 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10009eae:	466a      	mov	r2, sp
10009eb0:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10009eb2:	b2c0      	uxtb	r0, r0
10009eb4:	a901      	add	r1, sp, #4
10009eb6:	4b35      	ldr	r3, [pc, #212]	; (10009f8c <spi_init+0x15c>)
10009eb8:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10009eba:	8a39      	ldrh	r1, [r7, #16]
10009ebc:	7838      	ldrb	r0, [r7, #0]
10009ebe:	4b34      	ldr	r3, [pc, #208]	; (10009f90 <spi_init+0x160>)
10009ec0:	4798      	blx	r3
10009ec2:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10009ec4:	455c      	cmp	r4, fp
10009ec6:	d1e6      	bne.n	10009e96 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10009ec8:	78eb      	ldrb	r3, [r5, #3]
10009eca:	4642      	mov	r2, r8
10009ecc:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10009ece:	782b      	ldrb	r3, [r5, #0]
10009ed0:	2b01      	cmp	r3, #1
10009ed2:	d100      	bne.n	10009ed6 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10009ed4:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
10009ed6:	782b      	ldrb	r3, [r5, #0]
10009ed8:	2b00      	cmp	r3, #0
10009eda:	d101      	bne.n	10009ee0 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
10009edc:	4642      	mov	r2, r8
10009ede:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10009ee0:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10009ee2:	782a      	ldrb	r2, [r5, #0]
10009ee4:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10009ee6:	782a      	ldrb	r2, [r5, #0]
10009ee8:	2a01      	cmp	r2, #1
10009eea:	d101      	bne.n	10009ef0 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10009eec:	792a      	ldrb	r2, [r5, #4]
10009eee:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10009ef0:	786a      	ldrb	r2, [r5, #1]
10009ef2:	2a04      	cmp	r2, #4
10009ef4:	d104      	bne.n	10009f00 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10009ef6:	2124      	movs	r1, #36	; 0x24
10009ef8:	5c58      	ldrb	r0, [r3, r1]
10009efa:	4302      	orrs	r2, r0
10009efc:	545a      	strb	r2, [r3, r1]
10009efe:	e004      	b.n	10009f0a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10009f00:	2124      	movs	r1, #36	; 0x24
10009f02:	5c5a      	ldrb	r2, [r3, r1]
10009f04:	2004      	movs	r0, #4
10009f06:	4382      	bics	r2, r0
10009f08:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10009f0a:	78aa      	ldrb	r2, [r5, #2]
10009f0c:	2a01      	cmp	r2, #1
10009f0e:	d01a      	beq.n	10009f46 <spi_init+0x116>
10009f10:	2a00      	cmp	r2, #0
10009f12:	d004      	beq.n	10009f1e <spi_init+0xee>
10009f14:	2a02      	cmp	r2, #2
10009f16:	d00c      	beq.n	10009f32 <spi_init+0x102>
10009f18:	2a03      	cmp	r2, #3
10009f1a:	d01e      	beq.n	10009f5a <spi_init+0x12a>
10009f1c:	e026      	b.n	10009f6c <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009f1e:	2224      	movs	r2, #36	; 0x24
10009f20:	5c99      	ldrb	r1, [r3, r2]
10009f22:	2002      	movs	r0, #2
10009f24:	4381      	bics	r1, r0
10009f26:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009f28:	5c99      	ldrb	r1, [r3, r2]
10009f2a:	3801      	subs	r0, #1
10009f2c:	4381      	bics	r1, r0
10009f2e:	5499      	strb	r1, [r3, r2]
10009f30:	e01c      	b.n	10009f6c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009f32:	2224      	movs	r2, #36	; 0x24
10009f34:	5c98      	ldrb	r0, [r3, r2]
10009f36:	2102      	movs	r1, #2
10009f38:	4301      	orrs	r1, r0
10009f3a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009f3c:	5c99      	ldrb	r1, [r3, r2]
10009f3e:	2001      	movs	r0, #1
10009f40:	4381      	bics	r1, r0
10009f42:	5499      	strb	r1, [r3, r2]
10009f44:	e012      	b.n	10009f6c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009f46:	2224      	movs	r2, #36	; 0x24
10009f48:	5c99      	ldrb	r1, [r3, r2]
10009f4a:	2002      	movs	r0, #2
10009f4c:	4381      	bics	r1, r0
10009f4e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009f50:	5c98      	ldrb	r0, [r3, r2]
10009f52:	2101      	movs	r1, #1
10009f54:	4301      	orrs	r1, r0
10009f56:	5499      	strb	r1, [r3, r2]
10009f58:	e008      	b.n	10009f6c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009f5a:	2224      	movs	r2, #36	; 0x24
10009f5c:	5c98      	ldrb	r0, [r3, r2]
10009f5e:	2102      	movs	r1, #2
10009f60:	4301      	orrs	r1, r0
10009f62:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009f64:	5c98      	ldrb	r0, [r3, r2]
10009f66:	2101      	movs	r1, #1
10009f68:	4301      	orrs	r1, r0
10009f6a:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10009f6c:	2000      	movs	r0, #0
10009f6e:	b003      	add	sp, #12
10009f70:	bc0c      	pop	{r2, r3}
10009f72:	4690      	mov	r8, r2
10009f74:	469b      	mov	fp, r3
10009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f78:	10009df5 	.word	0x10009df5
10009f7c:	40006000 	.word	0x40006000
10009f80:	1000a995 	.word	0x1000a995
10009f84:	40007000 	.word	0x40007000
10009f88:	1000a391 	.word	0x1000a391
10009f8c:	1000a3a1 	.word	0x1000a3a1
10009f90:	1000a5e5 	.word	0x1000a5e5

10009f94 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10009f94:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f96:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10009f98:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10009f9a:	2600      	movs	r6, #0
10009f9c:	466d      	mov	r5, sp
10009f9e:	71ee      	strb	r6, [r5, #7]
10009fa0:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10009fa2:	2c00      	cmp	r4, #0
10009fa4:	d034      	beq.n	1000a010 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10009fa6:	2900      	cmp	r1, #0
10009fa8:	d104      	bne.n	10009fb4 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10009faa:	0029      	movs	r1, r5
10009fac:	7980      	ldrb	r0, [r0, #6]
10009fae:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10009fb0:	2701      	movs	r7, #1
10009fb2:	e00b      	b.n	10009fcc <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10009fb4:	2a00      	cmp	r2, #0
10009fb6:	d005      	beq.n	10009fc4 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009fb8:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10009fba:	2b00      	cmp	r3, #0
10009fbc:	d029      	beq.n	1000a012 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10009fbe:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009fc0:	2700      	movs	r7, #0
10009fc2:	e003      	b.n	10009fcc <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10009fc4:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009fc6:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10009fc8:	466a      	mov	r2, sp
10009fca:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10009fcc:	2528      	movs	r5, #40	; 0x28
10009fce:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10009fd0:	07c0      	lsls	r0, r0, #31
10009fd2:	d4fc      	bmi.n	10009fce <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10009fd4:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10009fd6:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10009fd8:	2b00      	cmp	r3, #0
10009fda:	d014      	beq.n	1000a006 <spi_transceive_buffer_wait+0x72>
10009fdc:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10009fde:	4278      	negs	r0, r7
10009fe0:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10009fe2:	4270      	negs	r0, r6
10009fe4:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10009fe6:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10009fe8:	07c0      	lsls	r0, r0, #31
10009fea:	d5fc      	bpl.n	10009fe6 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10009fec:	7808      	ldrb	r0, [r1, #0]
10009fee:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10009ff0:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10009ff2:	07c0      	lsls	r0, r0, #31
10009ff4:	d5fc      	bpl.n	10009ff0 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10009ff6:	7920      	ldrb	r0, [r4, #4]
10009ff8:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10009ffa:	3501      	adds	r5, #1
10009ffc:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10009ffe:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a000:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a002:	42ab      	cmp	r3, r5
1000a004:	d1ef      	bne.n	10009fe6 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a006:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a008:	06db      	lsls	r3, r3, #27
1000a00a:	d5fc      	bpl.n	1000a006 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a00c:	2000      	movs	r0, #0
1000a00e:	e000      	b.n	1000a012 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a010:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a012:	b003      	add	sp, #12
1000a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a016:	46c0      	nop			; (mov r8, r8)

1000a018 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a018:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a01a:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a01c:	2a00      	cmp	r2, #0
1000a01e:	d003      	beq.n	1000a028 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a020:	2100      	movs	r1, #0
1000a022:	4b04      	ldr	r3, [pc, #16]	; (1000a034 <spi_select_slave+0x1c>)
1000a024:	4798      	blx	r3
1000a026:	e002      	b.n	1000a02e <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a028:	2101      	movs	r1, #1
1000a02a:	4b02      	ldr	r3, [pc, #8]	; (1000a034 <spi_select_slave+0x1c>)
1000a02c:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a02e:	2000      	movs	r0, #0
1000a030:	bd10      	pop	{r4, pc}
1000a032:	46c0      	nop			; (mov r8, r8)
1000a034:	1000a559 	.word	0x1000a559

1000a038 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a038:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a03a:	4b0d      	ldr	r3, [pc, #52]	; (1000a070 <dualtimer_isr_handler+0x38>)
1000a03c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a03e:	2b00      	cmp	r3, #0
1000a040:	d007      	beq.n	1000a052 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a042:	2201      	movs	r2, #1
1000a044:	4b0a      	ldr	r3, [pc, #40]	; (1000a070 <dualtimer_isr_handler+0x38>)
1000a046:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a048:	4b0a      	ldr	r3, [pc, #40]	; (1000a074 <dualtimer_isr_handler+0x3c>)
1000a04a:	681b      	ldr	r3, [r3, #0]
1000a04c:	2b00      	cmp	r3, #0
1000a04e:	d000      	beq.n	1000a052 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a050:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a052:	2334      	movs	r3, #52	; 0x34
1000a054:	4a06      	ldr	r2, [pc, #24]	; (1000a070 <dualtimer_isr_handler+0x38>)
1000a056:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a058:	2b00      	cmp	r3, #0
1000a05a:	d007      	beq.n	1000a06c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a05c:	2101      	movs	r1, #1
1000a05e:	232c      	movs	r3, #44	; 0x2c
1000a060:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a062:	4b05      	ldr	r3, [pc, #20]	; (1000a078 <dualtimer_isr_handler+0x40>)
1000a064:	681b      	ldr	r3, [r3, #0]
1000a066:	2b00      	cmp	r3, #0
1000a068:	d000      	beq.n	1000a06c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a06a:	4798      	blx	r3
	}
}
1000a06c:	bd10      	pop	{r4, pc}
1000a06e:	46c0      	nop			; (mov r8, r8)
1000a070:	40001000 	.word	0x40001000
1000a074:	10016c78 	.word	0x10016c78
1000a078:	10016c7c 	.word	0x10016c7c

1000a07c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a07c:	2301      	movs	r3, #1
1000a07e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a080:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a082:	2202      	movs	r2, #2
1000a084:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a086:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a088:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a08a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a08c:	2200      	movs	r2, #0
1000a08e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a090:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a092:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a094:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a096:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a098:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a09a:	7602      	strb	r2, [r0, #24]
}
1000a09c:	4770      	bx	lr
1000a09e:	46c0      	nop			; (mov r8, r8)

1000a0a0 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a0a0:	2800      	cmp	r0, #0
1000a0a2:	d102      	bne.n	1000a0aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a0a4:	4b02      	ldr	r3, [pc, #8]	; (1000a0b0 <dualtimer_get_value+0x10>)
1000a0a6:	6858      	ldr	r0, [r3, #4]
1000a0a8:	e001      	b.n	1000a0ae <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a0aa:	4b01      	ldr	r3, [pc, #4]	; (1000a0b0 <dualtimer_get_value+0x10>)
1000a0ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a0ae:	4770      	bx	lr
1000a0b0:	40001000 	.word	0x40001000

1000a0b4 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a0b4:	2800      	cmp	r0, #0
1000a0b6:	d107      	bne.n	1000a0c8 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a0b8:	2900      	cmp	r1, #0
1000a0ba:	d102      	bne.n	1000a0c2 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a0bc:	4b06      	ldr	r3, [pc, #24]	; (1000a0d8 <dualtimer_set_counter+0x24>)
1000a0be:	601a      	str	r2, [r3, #0]
1000a0c0:	e009      	b.n	1000a0d6 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a0c2:	4b05      	ldr	r3, [pc, #20]	; (1000a0d8 <dualtimer_set_counter+0x24>)
1000a0c4:	619a      	str	r2, [r3, #24]
1000a0c6:	e006      	b.n	1000a0d6 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a0c8:	2900      	cmp	r1, #0
1000a0ca:	d102      	bne.n	1000a0d2 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a0cc:	4b02      	ldr	r3, [pc, #8]	; (1000a0d8 <dualtimer_set_counter+0x24>)
1000a0ce:	621a      	str	r2, [r3, #32]
1000a0d0:	e001      	b.n	1000a0d6 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a0d2:	4b01      	ldr	r3, [pc, #4]	; (1000a0d8 <dualtimer_set_counter+0x24>)
1000a0d4:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a0d6:	4770      	bx	lr
1000a0d8:	40001000 	.word	0x40001000

1000a0dc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a0dc:	2800      	cmp	r0, #0
1000a0de:	d105      	bne.n	1000a0ec <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a0e0:	4a06      	ldr	r2, [pc, #24]	; (1000a0fc <dualtimer_enable+0x20>)
1000a0e2:	7a11      	ldrb	r1, [r2, #8]
1000a0e4:	2380      	movs	r3, #128	; 0x80
1000a0e6:	430b      	orrs	r3, r1
1000a0e8:	7213      	strb	r3, [r2, #8]
1000a0ea:	e005      	b.n	1000a0f8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a0ec:	4903      	ldr	r1, [pc, #12]	; (1000a0fc <dualtimer_enable+0x20>)
1000a0ee:	2228      	movs	r2, #40	; 0x28
1000a0f0:	5c88      	ldrb	r0, [r1, r2]
1000a0f2:	2380      	movs	r3, #128	; 0x80
1000a0f4:	4303      	orrs	r3, r0
1000a0f6:	548b      	strb	r3, [r1, r2]
	}
}
1000a0f8:	4770      	bx	lr
1000a0fa:	46c0      	nop			; (mov r8, r8)
1000a0fc:	40001000 	.word	0x40001000

1000a100 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a100:	2800      	cmp	r0, #0
1000a102:	d105      	bne.n	1000a110 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a104:	4a06      	ldr	r2, [pc, #24]	; (1000a120 <dualtimer_disable+0x20>)
1000a106:	7a11      	ldrb	r1, [r2, #8]
1000a108:	237f      	movs	r3, #127	; 0x7f
1000a10a:	400b      	ands	r3, r1
1000a10c:	7213      	strb	r3, [r2, #8]
1000a10e:	e005      	b.n	1000a11c <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a110:	4903      	ldr	r1, [pc, #12]	; (1000a120 <dualtimer_disable+0x20>)
1000a112:	2228      	movs	r2, #40	; 0x28
1000a114:	5c88      	ldrb	r0, [r1, r2]
1000a116:	237f      	movs	r3, #127	; 0x7f
1000a118:	4003      	ands	r3, r0
1000a11a:	548b      	strb	r3, [r1, r2]
	}
}
1000a11c:	4770      	bx	lr
1000a11e:	46c0      	nop			; (mov r8, r8)
1000a120:	40001000 	.word	0x40001000

1000a124 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a124:	b570      	push	{r4, r5, r6, lr}
1000a126:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a128:	2004      	movs	r0, #4
1000a12a:	4b39      	ldr	r3, [pc, #228]	; (1000a210 <dualtimer_init+0xec>)
1000a12c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a12e:	7823      	ldrb	r3, [r4, #0]
1000a130:	2b00      	cmp	r3, #0
1000a132:	d102      	bne.n	1000a13a <dualtimer_init+0x16>
1000a134:	7b23      	ldrb	r3, [r4, #12]
1000a136:	2b00      	cmp	r3, #0
1000a138:	d065      	beq.n	1000a206 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a13a:	4936      	ldr	r1, [pc, #216]	; (1000a214 <dualtimer_init+0xf0>)
1000a13c:	68ca      	ldr	r2, [r1, #12]
1000a13e:	2320      	movs	r3, #32
1000a140:	4313      	orrs	r3, r2
1000a142:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a144:	7e22      	ldrb	r2, [r4, #24]
1000a146:	698b      	ldr	r3, [r1, #24]
1000a148:	2003      	movs	r0, #3
1000a14a:	4002      	ands	r2, r0
1000a14c:	0112      	lsls	r2, r2, #4
1000a14e:	302d      	adds	r0, #45	; 0x2d
1000a150:	4383      	bics	r3, r0
1000a152:	4313      	orrs	r3, r2
1000a154:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a156:	7823      	ldrb	r3, [r4, #0]
1000a158:	2b00      	cmp	r3, #0
1000a15a:	d026      	beq.n	1000a1aa <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a15c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a15e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a160:	2b00      	cmp	r3, #0
1000a162:	d003      	beq.n	1000a16c <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a164:	3b02      	subs	r3, #2
1000a166:	425d      	negs	r5, r3
1000a168:	415d      	adcs	r5, r3
1000a16a:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a16c:	78a2      	ldrb	r2, [r4, #2]
1000a16e:	0052      	lsls	r2, r2, #1
1000a170:	2502      	movs	r5, #2
1000a172:	402a      	ands	r2, r5
1000a174:	78e3      	ldrb	r3, [r4, #3]
1000a176:	009b      	lsls	r3, r3, #2
1000a178:	350a      	adds	r5, #10
1000a17a:	402b      	ands	r3, r5
1000a17c:	431a      	orrs	r2, r3
1000a17e:	0015      	movs	r5, r2
1000a180:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a182:	7923      	ldrb	r3, [r4, #4]
1000a184:	2b00      	cmp	r3, #0
1000a186:	d001      	beq.n	1000a18c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a188:	2320      	movs	r3, #32
1000a18a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a18c:	4b22      	ldr	r3, [pc, #136]	; (1000a218 <dualtimer_init+0xf4>)
1000a18e:	68a2      	ldr	r2, [r4, #8]
1000a190:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a192:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a194:	491f      	ldr	r1, [pc, #124]	; (1000a214 <dualtimer_init+0xf0>)
1000a196:	22c4      	movs	r2, #196	; 0xc4
1000a198:	0052      	lsls	r2, r2, #1
1000a19a:	5c88      	ldrb	r0, [r1, r2]
1000a19c:	2301      	movs	r3, #1
1000a19e:	4303      	orrs	r3, r0
1000a1a0:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a1a2:	2000      	movs	r0, #0
1000a1a4:	4b1d      	ldr	r3, [pc, #116]	; (1000a21c <dualtimer_init+0xf8>)
1000a1a6:	4798      	blx	r3
1000a1a8:	e000      	b.n	1000a1ac <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a1aa:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a1ac:	7b23      	ldrb	r3, [r4, #12]
1000a1ae:	2b00      	cmp	r3, #0
1000a1b0:	d029      	beq.n	1000a206 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a1b2:	7b63      	ldrb	r3, [r4, #13]
1000a1b4:	2b00      	cmp	r3, #0
1000a1b6:	d005      	beq.n	1000a1c4 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a1b8:	2b01      	cmp	r3, #1
1000a1ba:	d005      	beq.n	1000a1c8 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a1bc:	2b02      	cmp	r3, #2
1000a1be:	d104      	bne.n	1000a1ca <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a1c0:	2540      	movs	r5, #64	; 0x40
1000a1c2:	e002      	b.n	1000a1ca <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a1c4:	2501      	movs	r5, #1
1000a1c6:	e000      	b.n	1000a1ca <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a1c8:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a1ca:	7ba3      	ldrb	r3, [r4, #14]
1000a1cc:	005b      	lsls	r3, r3, #1
1000a1ce:	2102      	movs	r1, #2
1000a1d0:	4019      	ands	r1, r3
1000a1d2:	7be2      	ldrb	r2, [r4, #15]
1000a1d4:	0092      	lsls	r2, r2, #2
1000a1d6:	230c      	movs	r3, #12
1000a1d8:	4013      	ands	r3, r2
1000a1da:	430b      	orrs	r3, r1
1000a1dc:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a1de:	7c23      	ldrb	r3, [r4, #16]
1000a1e0:	2b00      	cmp	r3, #0
1000a1e2:	d001      	beq.n	1000a1e8 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a1e4:	2320      	movs	r3, #32
1000a1e6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a1e8:	6962      	ldr	r2, [r4, #20]
1000a1ea:	4b0b      	ldr	r3, [pc, #44]	; (1000a218 <dualtimer_init+0xf4>)
1000a1ec:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a1ee:	2228      	movs	r2, #40	; 0x28
1000a1f0:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a1f2:	4908      	ldr	r1, [pc, #32]	; (1000a214 <dualtimer_init+0xf0>)
1000a1f4:	3261      	adds	r2, #97	; 0x61
1000a1f6:	32ff      	adds	r2, #255	; 0xff
1000a1f8:	5c88      	ldrb	r0, [r1, r2]
1000a1fa:	2302      	movs	r3, #2
1000a1fc:	4303      	orrs	r3, r0
1000a1fe:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a200:	2001      	movs	r0, #1
1000a202:	4b06      	ldr	r3, [pc, #24]	; (1000a21c <dualtimer_init+0xf8>)
1000a204:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a206:	4906      	ldr	r1, [pc, #24]	; (1000a220 <dualtimer_init+0xfc>)
1000a208:	201e      	movs	r0, #30
1000a20a:	4b06      	ldr	r3, [pc, #24]	; (1000a224 <dualtimer_init+0x100>)
1000a20c:	4798      	blx	r3
}
1000a20e:	bd70      	pop	{r4, r5, r6, pc}
1000a210:	1000b05d 	.word	0x1000b05d
1000a214:	4000b000 	.word	0x4000b000
1000a218:	40001000 	.word	0x40001000
1000a21c:	1000a0dd 	.word	0x1000a0dd
1000a220:	1000a039 	.word	0x1000a039
1000a224:	1000b4c5 	.word	0x1000b4c5

1000a228 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a228:	2800      	cmp	r0, #0
1000a22a:	d102      	bne.n	1000a232 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a22c:	4b02      	ldr	r3, [pc, #8]	; (1000a238 <dualtimer_register_callback+0x10>)
1000a22e:	6019      	str	r1, [r3, #0]
1000a230:	e001      	b.n	1000a236 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a232:	4b02      	ldr	r3, [pc, #8]	; (1000a23c <dualtimer_register_callback+0x14>)
1000a234:	6019      	str	r1, [r3, #0]
	}
}
1000a236:	4770      	bx	lr
1000a238:	10016c78 	.word	0x10016c78
1000a23c:	10016c7c 	.word	0x10016c7c

1000a240 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a240:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a242:	4b16      	ldr	r3, [pc, #88]	; (1000a29c <gpio_port0_isr_handler+0x5c>)
1000a244:	681d      	ldr	r5, [r3, #0]
1000a246:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a248:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a24a:	07cb      	lsls	r3, r1, #31
1000a24c:	d407      	bmi.n	1000a25e <gpio_port0_isr_handler+0x1e>
1000a24e:	2301      	movs	r3, #1
1000a250:	2401      	movs	r4, #1
1000a252:	0018      	movs	r0, r3
1000a254:	0022      	movs	r2, r4
1000a256:	409a      	lsls	r2, r3
1000a258:	4211      	tst	r1, r2
1000a25a:	d014      	beq.n	1000a286 <gpio_port0_isr_handler+0x46>
1000a25c:	e001      	b.n	1000a262 <gpio_port0_isr_handler+0x22>
1000a25e:	2201      	movs	r2, #1
1000a260:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a262:	b292      	uxth	r2, r2
1000a264:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a266:	2346      	movs	r3, #70	; 0x46
1000a268:	4a0c      	ldr	r2, [pc, #48]	; (1000a29c <gpio_port0_isr_handler+0x5c>)
1000a26a:	5ad3      	ldrh	r3, [r2, r3]
1000a26c:	4103      	asrs	r3, r0
1000a26e:	07db      	lsls	r3, r3, #31
1000a270:	d50c      	bpl.n	1000a28c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a272:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a274:	5ad3      	ldrh	r3, [r2, r3]
1000a276:	4103      	asrs	r3, r0
1000a278:	07db      	lsls	r3, r3, #31
1000a27a:	d507      	bpl.n	1000a28c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a27c:	0080      	lsls	r0, r0, #2
1000a27e:	1810      	adds	r0, r2, r0
1000a280:	6843      	ldr	r3, [r0, #4]
1000a282:	4798      	blx	r3
1000a284:	e002      	b.n	1000a28c <gpio_port0_isr_handler+0x4c>
1000a286:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a288:	2b10      	cmp	r3, #16
1000a28a:	d1e2      	bne.n	1000a252 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a28c:	2180      	movs	r1, #128	; 0x80
1000a28e:	0409      	lsls	r1, r1, #16
1000a290:	23c0      	movs	r3, #192	; 0xc0
1000a292:	005b      	lsls	r3, r3, #1
1000a294:	4a02      	ldr	r2, [pc, #8]	; (1000a2a0 <gpio_port0_isr_handler+0x60>)
1000a296:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a298:	bd70      	pop	{r4, r5, r6, pc}
1000a29a:	46c0      	nop			; (mov r8, r8)
1000a29c:	10018984 	.word	0x10018984
1000a2a0:	e000e100 	.word	0xe000e100

1000a2a4 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a2a6:	4b18      	ldr	r3, [pc, #96]	; (1000a308 <gpio_port1_isr_handler+0x64>)
1000a2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a2aa:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a2ac:	b2b6      	uxth	r6, r6
1000a2ae:	0037      	movs	r7, r6
1000a2b0:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a2b2:	0b76      	lsrs	r6, r6, #13
1000a2b4:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a2b6:	4d14      	ldr	r5, [pc, #80]	; (1000a308 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a2b8:	2e00      	cmp	r6, #0
1000a2ba:	d001      	beq.n	1000a2c0 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a2bc:	4b13      	ldr	r3, [pc, #76]	; (1000a30c <gpio_port1_isr_handler+0x68>)
1000a2be:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a2c0:	0022      	movs	r2, r4
1000a2c2:	2301      	movs	r3, #1
1000a2c4:	40a3      	lsls	r3, r4
1000a2c6:	421f      	tst	r7, r3
1000a2c8:	d013      	beq.n	1000a2f2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a2ca:	b29b      	uxth	r3, r3
1000a2cc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a2ce:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a2d0:	238e      	movs	r3, #142	; 0x8e
1000a2d2:	5aeb      	ldrh	r3, [r5, r3]
1000a2d4:	4123      	asrs	r3, r4
1000a2d6:	07db      	lsls	r3, r3, #31
1000a2d8:	d50b      	bpl.n	1000a2f2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a2da:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a2dc:	490a      	ldr	r1, [pc, #40]	; (1000a308 <gpio_port1_isr_handler+0x64>)
1000a2de:	5acb      	ldrh	r3, [r1, r3]
1000a2e0:	4123      	asrs	r3, r4
1000a2e2:	07db      	lsls	r3, r3, #31
1000a2e4:	d505      	bpl.n	1000a2f2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a2e6:	3212      	adds	r2, #18
1000a2e8:	0092      	lsls	r2, r2, #2
1000a2ea:	188a      	adds	r2, r1, r2
1000a2ec:	6853      	ldr	r3, [r2, #4]
1000a2ee:	4798      	blx	r3
				break;
1000a2f0:	e002      	b.n	1000a2f8 <gpio_port1_isr_handler+0x54>
1000a2f2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a2f4:	2c10      	cmp	r4, #16
1000a2f6:	d1df      	bne.n	1000a2b8 <gpio_port1_isr_handler+0x14>
1000a2f8:	2180      	movs	r1, #128	; 0x80
1000a2fa:	0449      	lsls	r1, r1, #17
1000a2fc:	23c0      	movs	r3, #192	; 0xc0
1000a2fe:	005b      	lsls	r3, r3, #1
1000a300:	4a03      	ldr	r2, [pc, #12]	; (1000a310 <gpio_port1_isr_handler+0x6c>)
1000a302:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a306:	46c0      	nop			; (mov r8, r8)
1000a308:	10018984 	.word	0x10018984
1000a30c:	0001bc51 	.word	0x0001bc51
1000a310:	e000e100 	.word	0xe000e100

1000a314 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a314:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a316:	2390      	movs	r3, #144	; 0x90
1000a318:	4a1b      	ldr	r2, [pc, #108]	; (1000a388 <gpio_port2_isr_handler+0x74>)
1000a31a:	58d2      	ldr	r2, [r2, r3]
1000a31c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a31e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a320:	04d9      	lsls	r1, r3, #19
1000a322:	d414      	bmi.n	1000a34e <gpio_port2_isr_handler+0x3a>
1000a324:	0499      	lsls	r1, r3, #18
1000a326:	d40a      	bmi.n	1000a33e <gpio_port2_isr_handler+0x2a>
1000a328:	0459      	lsls	r1, r3, #17
1000a32a:	d40c      	bmi.n	1000a346 <gpio_port2_isr_handler+0x32>
1000a32c:	0bdb      	lsrs	r3, r3, #15
1000a32e:	03db      	lsls	r3, r3, #15
1000a330:	b29b      	uxth	r3, r3
1000a332:	2b00      	cmp	r3, #0
1000a334:	d020      	beq.n	1000a378 <gpio_port2_isr_handler+0x64>
1000a336:	2380      	movs	r3, #128	; 0x80
1000a338:	021b      	lsls	r3, r3, #8
1000a33a:	210f      	movs	r1, #15
1000a33c:	e00a      	b.n	1000a354 <gpio_port2_isr_handler+0x40>
1000a33e:	2380      	movs	r3, #128	; 0x80
1000a340:	019b      	lsls	r3, r3, #6
1000a342:	210d      	movs	r1, #13
1000a344:	e006      	b.n	1000a354 <gpio_port2_isr_handler+0x40>
1000a346:	2380      	movs	r3, #128	; 0x80
1000a348:	01db      	lsls	r3, r3, #7
1000a34a:	210e      	movs	r1, #14
1000a34c:	e002      	b.n	1000a354 <gpio_port2_isr_handler+0x40>
1000a34e:	2380      	movs	r3, #128	; 0x80
1000a350:	015b      	lsls	r3, r3, #5
1000a352:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a354:	b29b      	uxth	r3, r3
1000a356:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a358:	23d6      	movs	r3, #214	; 0xd6
1000a35a:	4a0b      	ldr	r2, [pc, #44]	; (1000a388 <gpio_port2_isr_handler+0x74>)
1000a35c:	5ad3      	ldrh	r3, [r2, r3]
1000a35e:	410b      	asrs	r3, r1
1000a360:	07db      	lsls	r3, r3, #31
1000a362:	d509      	bpl.n	1000a378 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a364:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a366:	5ad3      	ldrh	r3, [r2, r3]
1000a368:	410b      	asrs	r3, r1
1000a36a:	07db      	lsls	r3, r3, #31
1000a36c:	d504      	bpl.n	1000a378 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a36e:	3124      	adds	r1, #36	; 0x24
1000a370:	0089      	lsls	r1, r1, #2
1000a372:	1851      	adds	r1, r2, r1
1000a374:	684b      	ldr	r3, [r1, #4]
1000a376:	4798      	blx	r3
1000a378:	2180      	movs	r1, #128	; 0x80
1000a37a:	0489      	lsls	r1, r1, #18
1000a37c:	23c0      	movs	r3, #192	; 0xc0
1000a37e:	005b      	lsls	r3, r3, #1
1000a380:	4a02      	ldr	r2, [pc, #8]	; (1000a38c <gpio_port2_isr_handler+0x78>)
1000a382:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a384:	bd10      	pop	{r4, pc}
1000a386:	46c0      	nop			; (mov r8, r8)
1000a388:	10018984 	.word	0x10018984
1000a38c:	e000e100 	.word	0xe000e100

1000a390 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a390:	2300      	movs	r3, #0
1000a392:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a394:	2201      	movs	r2, #1
1000a396:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a398:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a39a:	70c3      	strb	r3, [r0, #3]
}
1000a39c:	4770      	bx	lr
1000a39e:	46c0      	nop			; (mov r8, r8)

1000a3a0 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a3a0:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a3a2:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a3a4:	2801      	cmp	r0, #1
1000a3a6:	d800      	bhi.n	1000a3aa <gpio_pin_set_config+0xa>
1000a3a8:	e0c8      	b.n	1000a53c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a3aa:	2807      	cmp	r0, #7
1000a3ac:	d809      	bhi.n	1000a3c2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a3ae:	4d64      	ldr	r5, [pc, #400]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a3b0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a3b2:	3b10      	subs	r3, #16
1000a3b4:	4003      	ands	r3, r0
1000a3b6:	009b      	lsls	r3, r3, #2
1000a3b8:	2407      	movs	r4, #7
1000a3ba:	409c      	lsls	r4, r3
1000a3bc:	43a2      	bics	r2, r4
1000a3be:	646a      	str	r2, [r5, #68]	; 0x44
1000a3c0:	e029      	b.n	1000a416 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a3c2:	280f      	cmp	r0, #15
1000a3c4:	d809      	bhi.n	1000a3da <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a3c6:	4d5e      	ldr	r5, [pc, #376]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a3c8:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a3ca:	2307      	movs	r3, #7
1000a3cc:	4003      	ands	r3, r0
1000a3ce:	009b      	lsls	r3, r3, #2
1000a3d0:	2407      	movs	r4, #7
1000a3d2:	409c      	lsls	r4, r3
1000a3d4:	43a2      	bics	r2, r4
1000a3d6:	64aa      	str	r2, [r5, #72]	; 0x48
1000a3d8:	e01d      	b.n	1000a416 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a3da:	2817      	cmp	r0, #23
1000a3dc:	d809      	bhi.n	1000a3f2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a3de:	4d58      	ldr	r5, [pc, #352]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a3e0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a3e2:	2307      	movs	r3, #7
1000a3e4:	4003      	ands	r3, r0
1000a3e6:	009b      	lsls	r3, r3, #2
1000a3e8:	2407      	movs	r4, #7
1000a3ea:	409c      	lsls	r4, r3
1000a3ec:	43a2      	bics	r2, r4
1000a3ee:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a3f0:	e011      	b.n	1000a416 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a3f2:	0003      	movs	r3, r0
1000a3f4:	3b2c      	subs	r3, #44	; 0x2c
1000a3f6:	2b03      	cmp	r3, #3
1000a3f8:	d80d      	bhi.n	1000a416 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a3fa:	4d52      	ldr	r5, [pc, #328]	; (1000a544 <gpio_pin_set_config+0x1a4>)
1000a3fc:	2482      	movs	r4, #130	; 0x82
1000a3fe:	00e4      	lsls	r4, r4, #3
1000a400:	5d2a      	ldrb	r2, [r5, r4]
1000a402:	0712      	lsls	r2, r2, #28
1000a404:	2601      	movs	r6, #1
1000a406:	409e      	lsls	r6, r3
1000a408:	0f12      	lsrs	r2, r2, #28
1000a40a:	5d2b      	ldrb	r3, [r5, r4]
1000a40c:	43b2      	bics	r2, r6
1000a40e:	260f      	movs	r6, #15
1000a410:	43b3      	bics	r3, r6
1000a412:	4313      	orrs	r3, r2
1000a414:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a416:	0003      	movs	r3, r0
1000a418:	3b1d      	subs	r3, #29
1000a41a:	2b02      	cmp	r3, #2
1000a41c:	d829      	bhi.n	1000a472 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a41e:	784b      	ldrb	r3, [r1, #1]
1000a420:	2b01      	cmp	r3, #1
1000a422:	d108      	bne.n	1000a436 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a424:	4d47      	ldr	r5, [pc, #284]	; (1000a544 <gpio_pin_set_config+0x1a4>)
1000a426:	7d2b      	ldrb	r3, [r5, #20]
1000a428:	241f      	movs	r4, #31
1000a42a:	1a24      	subs	r4, r4, r0
1000a42c:	2201      	movs	r2, #1
1000a42e:	40a2      	lsls	r2, r4
1000a430:	4393      	bics	r3, r2
1000a432:	752b      	strb	r3, [r5, #20]
1000a434:	e008      	b.n	1000a448 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a436:	4c43      	ldr	r4, [pc, #268]	; (1000a544 <gpio_pin_set_config+0x1a4>)
1000a438:	7d25      	ldrb	r5, [r4, #20]
1000a43a:	221f      	movs	r2, #31
1000a43c:	1a12      	subs	r2, r2, r0
1000a43e:	2301      	movs	r3, #1
1000a440:	4093      	lsls	r3, r2
1000a442:	432b      	orrs	r3, r5
1000a444:	b2db      	uxtb	r3, r3
1000a446:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a448:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a44a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a44c:	2a00      	cmp	r2, #0
1000a44e:	d075      	beq.n	1000a53c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a450:	493c      	ldr	r1, [pc, #240]	; (1000a544 <gpio_pin_set_config+0x1a4>)
1000a452:	880c      	ldrh	r4, [r1, #0]
1000a454:	221f      	movs	r2, #31
1000a456:	1a10      	subs	r0, r2, r0
1000a458:	0080      	lsls	r0, r0, #2
1000a45a:	3301      	adds	r3, #1
1000a45c:	4083      	lsls	r3, r0
1000a45e:	4323      	orrs	r3, r4
1000a460:	b29b      	uxth	r3, r3
1000a462:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a464:	4a38      	ldr	r2, [pc, #224]	; (1000a548 <gpio_pin_set_config+0x1a8>)
1000a466:	7811      	ldrb	r1, [r2, #0]
1000a468:	2302      	movs	r3, #2
1000a46a:	430b      	orrs	r3, r1
1000a46c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a46e:	2300      	movs	r3, #0
1000a470:	e064      	b.n	1000a53c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a472:	780a      	ldrb	r2, [r1, #0]
1000a474:	2a00      	cmp	r2, #0
1000a476:	d140      	bne.n	1000a4fa <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a478:	280f      	cmp	r0, #15
1000a47a:	d808      	bhi.n	1000a48e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a47c:	2301      	movs	r3, #1
1000a47e:	4083      	lsls	r3, r0
1000a480:	b29b      	uxth	r3, r3
1000a482:	4a32      	ldr	r2, [pc, #200]	; (1000a54c <gpio_pin_set_config+0x1ac>)
1000a484:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a486:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a488:	281f      	cmp	r0, #31
1000a48a:	d857      	bhi.n	1000a53c <gpio_pin_set_config+0x19c>
1000a48c:	e012      	b.n	1000a4b4 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a48e:	281f      	cmp	r0, #31
1000a490:	d807      	bhi.n	1000a4a2 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a492:	220f      	movs	r2, #15
1000a494:	4002      	ands	r2, r0
1000a496:	2301      	movs	r3, #1
1000a498:	4093      	lsls	r3, r2
1000a49a:	b29b      	uxth	r3, r3
1000a49c:	4a2c      	ldr	r2, [pc, #176]	; (1000a550 <gpio_pin_set_config+0x1b0>)
1000a49e:	8293      	strh	r3, [r2, #20]
1000a4a0:	e008      	b.n	1000a4b4 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a4a2:	230f      	movs	r3, #15
1000a4a4:	4018      	ands	r0, r3
1000a4a6:	3b0e      	subs	r3, #14
1000a4a8:	4083      	lsls	r3, r0
1000a4aa:	b29b      	uxth	r3, r3
1000a4ac:	4a29      	ldr	r2, [pc, #164]	; (1000a554 <gpio_pin_set_config+0x1b4>)
1000a4ae:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4b0:	2300      	movs	r3, #0
1000a4b2:	e043      	b.n	1000a53c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a4b4:	784b      	ldrb	r3, [r1, #1]
1000a4b6:	2b01      	cmp	r3, #1
1000a4b8:	d00c      	beq.n	1000a4d4 <gpio_pin_set_config+0x134>
1000a4ba:	2b00      	cmp	r3, #0
1000a4bc:	d002      	beq.n	1000a4c4 <gpio_pin_set_config+0x124>
1000a4be:	2b02      	cmp	r3, #2
1000a4c0:	d010      	beq.n	1000a4e4 <gpio_pin_set_config+0x144>
1000a4c2:	e03a      	b.n	1000a53a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a4c4:	491e      	ldr	r1, [pc, #120]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a4c6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a4c8:	2301      	movs	r3, #1
1000a4ca:	4083      	lsls	r3, r0
1000a4cc:	4313      	orrs	r3, r2
1000a4ce:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4d0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a4d2:	e033      	b.n	1000a53c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a4d4:	491a      	ldr	r1, [pc, #104]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a4d6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a4d8:	2201      	movs	r2, #1
1000a4da:	4082      	lsls	r2, r0
1000a4dc:	4393      	bics	r3, r2
1000a4de:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4e0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a4e2:	e02b      	b.n	1000a53c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a4e4:	4b16      	ldr	r3, [pc, #88]	; (1000a540 <gpio_pin_set_config+0x1a0>)
1000a4e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a4e8:	2201      	movs	r2, #1
1000a4ea:	4082      	lsls	r2, r0
1000a4ec:	4311      	orrs	r1, r2
1000a4ee:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a4f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a4f2:	4391      	bics	r1, r2
1000a4f4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4f6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a4f8:	e020      	b.n	1000a53c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4fa:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a4fc:	2a01      	cmp	r2, #1
1000a4fe:	d11d      	bne.n	1000a53c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a500:	280f      	cmp	r0, #15
1000a502:	d806      	bhi.n	1000a512 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a504:	3301      	adds	r3, #1
1000a506:	4083      	lsls	r3, r0
1000a508:	b29b      	uxth	r3, r3
1000a50a:	4a10      	ldr	r2, [pc, #64]	; (1000a54c <gpio_pin_set_config+0x1ac>)
1000a50c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a50e:	2300      	movs	r3, #0
1000a510:	e014      	b.n	1000a53c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a512:	281f      	cmp	r0, #31
1000a514:	d808      	bhi.n	1000a528 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a516:	230f      	movs	r3, #15
1000a518:	4018      	ands	r0, r3
1000a51a:	3b0e      	subs	r3, #14
1000a51c:	4083      	lsls	r3, r0
1000a51e:	b29b      	uxth	r3, r3
1000a520:	4a0b      	ldr	r2, [pc, #44]	; (1000a550 <gpio_pin_set_config+0x1b0>)
1000a522:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a524:	2300      	movs	r3, #0
1000a526:	e009      	b.n	1000a53c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a528:	230f      	movs	r3, #15
1000a52a:	4018      	ands	r0, r3
1000a52c:	3b0e      	subs	r3, #14
1000a52e:	4083      	lsls	r3, r0
1000a530:	b29b      	uxth	r3, r3
1000a532:	4a08      	ldr	r2, [pc, #32]	; (1000a554 <gpio_pin_set_config+0x1b4>)
1000a534:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a536:	2300      	movs	r3, #0
1000a538:	e000      	b.n	1000a53c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a53a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a53c:	0018      	movs	r0, r3
1000a53e:	bd70      	pop	{r4, r5, r6, pc}
1000a540:	4000b000 	.word	0x4000b000
1000a544:	4000f000 	.word	0x4000f000
1000a548:	4000e000 	.word	0x4000e000
1000a54c:	40010000 	.word	0x40010000
1000a550:	40011000 	.word	0x40011000
1000a554:	40013000 	.word	0x40013000

1000a558 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a558:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a55a:	280f      	cmp	r0, #15
1000a55c:	d810      	bhi.n	1000a580 <gpio_pin_set_output_level+0x28>
		if(level) {
1000a55e:	2900      	cmp	r1, #0
1000a560:	d007      	beq.n	1000a572 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a562:	4a1d      	ldr	r2, [pc, #116]	; (1000a5d8 <gpio_pin_set_output_level+0x80>)
1000a564:	8891      	ldrh	r1, [r2, #4]
1000a566:	2301      	movs	r3, #1
1000a568:	4083      	lsls	r3, r0
1000a56a:	430b      	orrs	r3, r1
1000a56c:	b29b      	uxth	r3, r3
1000a56e:	8093      	strh	r3, [r2, #4]
1000a570:	e031      	b.n	1000a5d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a572:	4919      	ldr	r1, [pc, #100]	; (1000a5d8 <gpio_pin_set_output_level+0x80>)
1000a574:	888b      	ldrh	r3, [r1, #4]
1000a576:	2201      	movs	r2, #1
1000a578:	4082      	lsls	r2, r0
1000a57a:	4393      	bics	r3, r2
1000a57c:	808b      	strh	r3, [r1, #4]
1000a57e:	e02a      	b.n	1000a5d6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a580:	281f      	cmp	r0, #31
1000a582:	d814      	bhi.n	1000a5ae <gpio_pin_set_output_level+0x56>
		if(level) {
1000a584:	2900      	cmp	r1, #0
1000a586:	d009      	beq.n	1000a59c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a588:	4914      	ldr	r1, [pc, #80]	; (1000a5dc <gpio_pin_set_output_level+0x84>)
1000a58a:	888c      	ldrh	r4, [r1, #4]
1000a58c:	220f      	movs	r2, #15
1000a58e:	4010      	ands	r0, r2
1000a590:	2301      	movs	r3, #1
1000a592:	4083      	lsls	r3, r0
1000a594:	4323      	orrs	r3, r4
1000a596:	b29b      	uxth	r3, r3
1000a598:	808b      	strh	r3, [r1, #4]
1000a59a:	e01c      	b.n	1000a5d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a59c:	490f      	ldr	r1, [pc, #60]	; (1000a5dc <gpio_pin_set_output_level+0x84>)
1000a59e:	888b      	ldrh	r3, [r1, #4]
1000a5a0:	220f      	movs	r2, #15
1000a5a2:	4010      	ands	r0, r2
1000a5a4:	3a0e      	subs	r2, #14
1000a5a6:	4082      	lsls	r2, r0
1000a5a8:	4393      	bics	r3, r2
1000a5aa:	808b      	strh	r3, [r1, #4]
1000a5ac:	e013      	b.n	1000a5d6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a5ae:	2900      	cmp	r1, #0
1000a5b0:	d009      	beq.n	1000a5c6 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a5b2:	490b      	ldr	r1, [pc, #44]	; (1000a5e0 <gpio_pin_set_output_level+0x88>)
1000a5b4:	888c      	ldrh	r4, [r1, #4]
1000a5b6:	220f      	movs	r2, #15
1000a5b8:	4010      	ands	r0, r2
1000a5ba:	2301      	movs	r3, #1
1000a5bc:	4083      	lsls	r3, r0
1000a5be:	4323      	orrs	r3, r4
1000a5c0:	b29b      	uxth	r3, r3
1000a5c2:	808b      	strh	r3, [r1, #4]
1000a5c4:	e007      	b.n	1000a5d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a5c6:	4906      	ldr	r1, [pc, #24]	; (1000a5e0 <gpio_pin_set_output_level+0x88>)
1000a5c8:	888b      	ldrh	r3, [r1, #4]
1000a5ca:	220f      	movs	r2, #15
1000a5cc:	4010      	ands	r0, r2
1000a5ce:	3a0e      	subs	r2, #14
1000a5d0:	4082      	lsls	r2, r0
1000a5d2:	4393      	bics	r3, r2
1000a5d4:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a5d6:	bd10      	pop	{r4, pc}
1000a5d8:	40010000 	.word	0x40010000
1000a5dc:	40011000 	.word	0x40011000
1000a5e0:	40013000 	.word	0x40013000

1000a5e4 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a5e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a5e6:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a5e8:	23ff      	movs	r3, #255	; 0xff
1000a5ea:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a5ec:	2807      	cmp	r0, #7
1000a5ee:	d833      	bhi.n	1000a658 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a5f0:	4a4e      	ldr	r2, [pc, #312]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a5f2:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a5f4:	3bf8      	subs	r3, #248	; 0xf8
1000a5f6:	4003      	ands	r3, r0
1000a5f8:	009b      	lsls	r3, r3, #2
1000a5fa:	2607      	movs	r6, #7
1000a5fc:	409e      	lsls	r6, r3
1000a5fe:	43b4      	bics	r4, r6
1000a600:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a602:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a604:	000e      	movs	r6, r1
1000a606:	409e      	lsls	r6, r3
1000a608:	0033      	movs	r3, r6
1000a60a:	4323      	orrs	r3, r4
1000a60c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a60e:	2901      	cmp	r1, #1
1000a610:	d000      	beq.n	1000a614 <gpio_pinmux_cofiguration+0x30>
1000a612:	e08a      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a614:	2803      	cmp	r0, #3
1000a616:	d80f      	bhi.n	1000a638 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a618:	0011      	movs	r1, r2
1000a61a:	22d0      	movs	r2, #208	; 0xd0
1000a61c:	0052      	lsls	r2, r2, #1
1000a61e:	588c      	ldr	r4, [r1, r2]
1000a620:	2303      	movs	r3, #3
1000a622:	4018      	ands	r0, r3
1000a624:	00c0      	lsls	r0, r0, #3
1000a626:	333c      	adds	r3, #60	; 0x3c
1000a628:	4083      	lsls	r3, r0
1000a62a:	439c      	bics	r4, r3
1000a62c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a62e:	588b      	ldr	r3, [r1, r2]
1000a630:	4085      	lsls	r5, r0
1000a632:	431d      	orrs	r5, r3
1000a634:	508d      	str	r5, [r1, r2]
1000a636:	e078      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a638:	493c      	ldr	r1, [pc, #240]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a63a:	22d2      	movs	r2, #210	; 0xd2
1000a63c:	0052      	lsls	r2, r2, #1
1000a63e:	588c      	ldr	r4, [r1, r2]
1000a640:	2303      	movs	r3, #3
1000a642:	4018      	ands	r0, r3
1000a644:	00c0      	lsls	r0, r0, #3
1000a646:	333c      	adds	r3, #60	; 0x3c
1000a648:	4083      	lsls	r3, r0
1000a64a:	439c      	bics	r4, r3
1000a64c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a64e:	588b      	ldr	r3, [r1, r2]
1000a650:	4085      	lsls	r5, r0
1000a652:	431d      	orrs	r5, r3
1000a654:	508d      	str	r5, [r1, r2]
1000a656:	e068      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a658:	280f      	cmp	r0, #15
1000a65a:	d832      	bhi.n	1000a6c2 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a65c:	4a33      	ldr	r2, [pc, #204]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a65e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a660:	2307      	movs	r3, #7
1000a662:	4003      	ands	r3, r0
1000a664:	009b      	lsls	r3, r3, #2
1000a666:	2607      	movs	r6, #7
1000a668:	409e      	lsls	r6, r3
1000a66a:	43b4      	bics	r4, r6
1000a66c:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a66e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a670:	000e      	movs	r6, r1
1000a672:	409e      	lsls	r6, r3
1000a674:	0033      	movs	r3, r6
1000a676:	4323      	orrs	r3, r4
1000a678:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a67a:	2901      	cmp	r1, #1
1000a67c:	d155      	bne.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a67e:	280b      	cmp	r0, #11
1000a680:	d80f      	bhi.n	1000a6a2 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a682:	0011      	movs	r1, r2
1000a684:	22d4      	movs	r2, #212	; 0xd4
1000a686:	0052      	lsls	r2, r2, #1
1000a688:	588c      	ldr	r4, [r1, r2]
1000a68a:	2303      	movs	r3, #3
1000a68c:	4018      	ands	r0, r3
1000a68e:	00c0      	lsls	r0, r0, #3
1000a690:	333c      	adds	r3, #60	; 0x3c
1000a692:	4083      	lsls	r3, r0
1000a694:	439c      	bics	r4, r3
1000a696:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a698:	588b      	ldr	r3, [r1, r2]
1000a69a:	4085      	lsls	r5, r0
1000a69c:	431d      	orrs	r5, r3
1000a69e:	508d      	str	r5, [r1, r2]
1000a6a0:	e043      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a6a2:	4922      	ldr	r1, [pc, #136]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a6a4:	22d6      	movs	r2, #214	; 0xd6
1000a6a6:	0052      	lsls	r2, r2, #1
1000a6a8:	588c      	ldr	r4, [r1, r2]
1000a6aa:	2303      	movs	r3, #3
1000a6ac:	4018      	ands	r0, r3
1000a6ae:	00c0      	lsls	r0, r0, #3
1000a6b0:	333c      	adds	r3, #60	; 0x3c
1000a6b2:	4083      	lsls	r3, r0
1000a6b4:	439c      	bics	r4, r3
1000a6b6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a6b8:	588b      	ldr	r3, [r1, r2]
1000a6ba:	4085      	lsls	r5, r0
1000a6bc:	431d      	orrs	r5, r3
1000a6be:	508d      	str	r5, [r1, r2]
1000a6c0:	e033      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a6c2:	2817      	cmp	r0, #23
1000a6c4:	d831      	bhi.n	1000a72a <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a6c6:	4a19      	ldr	r2, [pc, #100]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a6c8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a6ca:	2307      	movs	r3, #7
1000a6cc:	4003      	ands	r3, r0
1000a6ce:	009b      	lsls	r3, r3, #2
1000a6d0:	2607      	movs	r6, #7
1000a6d2:	409e      	lsls	r6, r3
1000a6d4:	43b4      	bics	r4, r6
1000a6d6:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a6d8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a6da:	000e      	movs	r6, r1
1000a6dc:	409e      	lsls	r6, r3
1000a6de:	0033      	movs	r3, r6
1000a6e0:	4323      	orrs	r3, r4
1000a6e2:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a6e4:	2901      	cmp	r1, #1
1000a6e6:	d120      	bne.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a6e8:	2813      	cmp	r0, #19
1000a6ea:	d80f      	bhi.n	1000a70c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a6ec:	0011      	movs	r1, r2
1000a6ee:	22d8      	movs	r2, #216	; 0xd8
1000a6f0:	0052      	lsls	r2, r2, #1
1000a6f2:	588c      	ldr	r4, [r1, r2]
1000a6f4:	2303      	movs	r3, #3
1000a6f6:	4018      	ands	r0, r3
1000a6f8:	00c0      	lsls	r0, r0, #3
1000a6fa:	333c      	adds	r3, #60	; 0x3c
1000a6fc:	4083      	lsls	r3, r0
1000a6fe:	439c      	bics	r4, r3
1000a700:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a702:	588b      	ldr	r3, [r1, r2]
1000a704:	4085      	lsls	r5, r0
1000a706:	431d      	orrs	r5, r3
1000a708:	508d      	str	r5, [r1, r2]
1000a70a:	e00e      	b.n	1000a72a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a70c:	4a07      	ldr	r2, [pc, #28]	; (1000a72c <gpio_pinmux_cofiguration+0x148>)
1000a70e:	23da      	movs	r3, #218	; 0xda
1000a710:	005b      	lsls	r3, r3, #1
1000a712:	58d1      	ldr	r1, [r2, r3]
1000a714:	2403      	movs	r4, #3
1000a716:	4020      	ands	r0, r4
1000a718:	00c0      	lsls	r0, r0, #3
1000a71a:	343c      	adds	r4, #60	; 0x3c
1000a71c:	4084      	lsls	r4, r0
1000a71e:	43a1      	bics	r1, r4
1000a720:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a722:	58d1      	ldr	r1, [r2, r3]
1000a724:	4085      	lsls	r5, r0
1000a726:	430d      	orrs	r5, r1
1000a728:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a72a:	bd70      	pop	{r4, r5, r6, pc}
1000a72c:	4000b000 	.word	0x4000b000

1000a730 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a730:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a732:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a734:	280f      	cmp	r0, #15
1000a736:	d904      	bls.n	1000a742 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a738:	241f      	movs	r4, #31
1000a73a:	4284      	cmp	r4, r0
1000a73c:	415b      	adcs	r3, r3
1000a73e:	3c1d      	subs	r4, #29
1000a740:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a742:	2a01      	cmp	r2, #1
1000a744:	d016      	beq.n	1000a774 <gpio_register_callback+0x44>
1000a746:	2a00      	cmp	r2, #0
1000a748:	d004      	beq.n	1000a754 <gpio_register_callback+0x24>
1000a74a:	2a02      	cmp	r2, #2
1000a74c:	d022      	beq.n	1000a794 <gpio_register_callback+0x64>
1000a74e:	2a03      	cmp	r2, #3
1000a750:	d030      	beq.n	1000a7b4 <gpio_register_callback+0x84>
1000a752:	e03e      	b.n	1000a7d2 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a754:	4e29      	ldr	r6, [pc, #164]	; (1000a7fc <gpio_register_callback+0xcc>)
1000a756:	00dc      	lsls	r4, r3, #3
1000a758:	18e2      	adds	r2, r4, r3
1000a75a:	00d2      	lsls	r2, r2, #3
1000a75c:	5997      	ldr	r7, [r2, r6]
1000a75e:	250f      	movs	r5, #15
1000a760:	4005      	ands	r5, r0
1000a762:	2201      	movs	r2, #1
1000a764:	40aa      	lsls	r2, r5
1000a766:	b292      	uxth	r2, r2
1000a768:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a76a:	18e4      	adds	r4, r4, r3
1000a76c:	00e4      	lsls	r4, r4, #3
1000a76e:	59a4      	ldr	r4, [r4, r6]
1000a770:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a772:	e02e      	b.n	1000a7d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a774:	4e21      	ldr	r6, [pc, #132]	; (1000a7fc <gpio_register_callback+0xcc>)
1000a776:	00dc      	lsls	r4, r3, #3
1000a778:	18e2      	adds	r2, r4, r3
1000a77a:	00d2      	lsls	r2, r2, #3
1000a77c:	5997      	ldr	r7, [r2, r6]
1000a77e:	250f      	movs	r5, #15
1000a780:	4005      	ands	r5, r0
1000a782:	2201      	movs	r2, #1
1000a784:	40aa      	lsls	r2, r5
1000a786:	b292      	uxth	r2, r2
1000a788:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a78a:	18e4      	adds	r4, r4, r3
1000a78c:	00e4      	lsls	r4, r4, #3
1000a78e:	59a4      	ldr	r4, [r4, r6]
1000a790:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a792:	e01e      	b.n	1000a7d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a794:	4e19      	ldr	r6, [pc, #100]	; (1000a7fc <gpio_register_callback+0xcc>)
1000a796:	00dc      	lsls	r4, r3, #3
1000a798:	18e2      	adds	r2, r4, r3
1000a79a:	00d2      	lsls	r2, r2, #3
1000a79c:	5997      	ldr	r7, [r2, r6]
1000a79e:	250f      	movs	r5, #15
1000a7a0:	4005      	ands	r5, r0
1000a7a2:	2201      	movs	r2, #1
1000a7a4:	40aa      	lsls	r2, r5
1000a7a6:	b292      	uxth	r2, r2
1000a7a8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a7aa:	18e4      	adds	r4, r4, r3
1000a7ac:	00e4      	lsls	r4, r4, #3
1000a7ae:	59a4      	ldr	r4, [r4, r6]
1000a7b0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a7b2:	e00e      	b.n	1000a7d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a7b4:	4e11      	ldr	r6, [pc, #68]	; (1000a7fc <gpio_register_callback+0xcc>)
1000a7b6:	00dc      	lsls	r4, r3, #3
1000a7b8:	18e2      	adds	r2, r4, r3
1000a7ba:	00d2      	lsls	r2, r2, #3
1000a7bc:	5997      	ldr	r7, [r2, r6]
1000a7be:	250f      	movs	r5, #15
1000a7c0:	4005      	ands	r5, r0
1000a7c2:	2201      	movs	r2, #1
1000a7c4:	40aa      	lsls	r2, r5
1000a7c6:	b292      	uxth	r2, r2
1000a7c8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a7ca:	18e4      	adds	r4, r4, r3
1000a7cc:	00e4      	lsls	r4, r4, #3
1000a7ce:	59a4      	ldr	r4, [r4, r6]
1000a7d0:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a7d2:	220f      	movs	r2, #15
1000a7d4:	4010      	ands	r0, r2
1000a7d6:	4c09      	ldr	r4, [pc, #36]	; (1000a7fc <gpio_register_callback+0xcc>)
1000a7d8:	00dd      	lsls	r5, r3, #3
1000a7da:	18ea      	adds	r2, r5, r3
1000a7dc:	0052      	lsls	r2, r2, #1
1000a7de:	1812      	adds	r2, r2, r0
1000a7e0:	0092      	lsls	r2, r2, #2
1000a7e2:	18a2      	adds	r2, r4, r2
1000a7e4:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000a7e6:	18ea      	adds	r2, r5, r3
1000a7e8:	00d2      	lsls	r2, r2, #3
1000a7ea:	18a2      	adds	r2, r4, r2
1000a7ec:	3244      	adds	r2, #68	; 0x44
1000a7ee:	2101      	movs	r1, #1
1000a7f0:	4081      	lsls	r1, r0
1000a7f2:	8813      	ldrh	r3, [r2, #0]
1000a7f4:	430b      	orrs	r3, r1
1000a7f6:	8013      	strh	r3, [r2, #0]
}
1000a7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7fa:	46c0      	nop			; (mov r8, r8)
1000a7fc:	10018984 	.word	0x10018984

1000a800 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000a800:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a802:	280f      	cmp	r0, #15
1000a804:	d805      	bhi.n	1000a812 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a806:	2280      	movs	r2, #128	; 0x80
1000a808:	0412      	lsls	r2, r2, #16
1000a80a:	4b12      	ldr	r3, [pc, #72]	; (1000a854 <gpio_enable_callback+0x54>)
1000a80c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000a80e:	2200      	movs	r2, #0
1000a810:	e00c      	b.n	1000a82c <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000a812:	281f      	cmp	r0, #31
1000a814:	d805      	bhi.n	1000a822 <gpio_enable_callback+0x22>
1000a816:	2280      	movs	r2, #128	; 0x80
1000a818:	0452      	lsls	r2, r2, #17
1000a81a:	4b0e      	ldr	r3, [pc, #56]	; (1000a854 <gpio_enable_callback+0x54>)
1000a81c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000a81e:	2201      	movs	r2, #1
1000a820:	e004      	b.n	1000a82c <gpio_enable_callback+0x2c>
1000a822:	2280      	movs	r2, #128	; 0x80
1000a824:	0492      	lsls	r2, r2, #18
1000a826:	4b0b      	ldr	r3, [pc, #44]	; (1000a854 <gpio_enable_callback+0x54>)
1000a828:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000a82a:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000a82c:	230f      	movs	r3, #15
1000a82e:	4018      	ands	r0, r3
1000a830:	2101      	movs	r1, #1
1000a832:	4081      	lsls	r1, r0
1000a834:	4c08      	ldr	r4, [pc, #32]	; (1000a858 <gpio_enable_callback+0x58>)
1000a836:	00d5      	lsls	r5, r2, #3
1000a838:	18ab      	adds	r3, r5, r2
1000a83a:	00db      	lsls	r3, r3, #3
1000a83c:	18e3      	adds	r3, r4, r3
1000a83e:	3346      	adds	r3, #70	; 0x46
1000a840:	8818      	ldrh	r0, [r3, #0]
1000a842:	4308      	orrs	r0, r1
1000a844:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000a846:	18aa      	adds	r2, r5, r2
1000a848:	00d2      	lsls	r2, r2, #3
1000a84a:	5913      	ldr	r3, [r2, r4]
1000a84c:	b289      	uxth	r1, r1
1000a84e:	8419      	strh	r1, [r3, #32]
}
1000a850:	bd30      	pop	{r4, r5, pc}
1000a852:	46c0      	nop			; (mov r8, r8)
1000a854:	e000e100 	.word	0xe000e100
1000a858:	10018984 	.word	0x10018984

1000a85c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000a85c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a85e:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a860:	280f      	cmp	r0, #15
1000a862:	d904      	bls.n	1000a86e <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a864:	221f      	movs	r2, #31
1000a866:	4282      	cmp	r2, r0
1000a868:	415b      	adcs	r3, r3
1000a86a:	3a1d      	subs	r2, #29
1000a86c:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000a86e:	220f      	movs	r2, #15
1000a870:	4010      	ands	r0, r2
1000a872:	2101      	movs	r1, #1
1000a874:	4081      	lsls	r1, r0
1000a876:	4c07      	ldr	r4, [pc, #28]	; (1000a894 <gpio_disable_callback+0x38>)
1000a878:	00dd      	lsls	r5, r3, #3
1000a87a:	18ea      	adds	r2, r5, r3
1000a87c:	00d2      	lsls	r2, r2, #3
1000a87e:	18a2      	adds	r2, r4, r2
1000a880:	3246      	adds	r2, #70	; 0x46
1000a882:	8810      	ldrh	r0, [r2, #0]
1000a884:	4388      	bics	r0, r1
1000a886:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000a888:	18eb      	adds	r3, r5, r3
1000a88a:	00db      	lsls	r3, r3, #3
1000a88c:	591b      	ldr	r3, [r3, r4]
1000a88e:	b289      	uxth	r1, r1
1000a890:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000a892:	bd30      	pop	{r4, r5, pc}
1000a894:	10018984 	.word	0x10018984

1000a898 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000a898:	b510      	push	{r4, lr}
1000a89a:	4a11      	ldr	r2, [pc, #68]	; (1000a8e0 <gpio_init+0x48>)
1000a89c:	0010      	movs	r0, r2
1000a89e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000a8a0:	2100      	movs	r1, #0
1000a8a2:	e007      	b.n	1000a8b4 <gpio_init+0x1c>
1000a8a4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000a8a6:	4293      	cmp	r3, r2
1000a8a8:	d1fc      	bne.n	1000a8a4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000a8aa:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000a8ac:	8011      	strh	r1, [r2, #0]
1000a8ae:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000a8b0:	4282      	cmp	r2, r0
1000a8b2:	d002      	beq.n	1000a8ba <gpio_init+0x22>
1000a8b4:	0013      	movs	r3, r2
1000a8b6:	3b40      	subs	r3, #64	; 0x40
1000a8b8:	e7f4      	b.n	1000a8a4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000a8ba:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e4 <gpio_init+0x4c>)
1000a8bc:	4a0a      	ldr	r2, [pc, #40]	; (1000a8e8 <gpio_init+0x50>)
1000a8be:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000a8c0:	4a0a      	ldr	r2, [pc, #40]	; (1000a8ec <gpio_init+0x54>)
1000a8c2:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000a8c4:	490a      	ldr	r1, [pc, #40]	; (1000a8f0 <gpio_init+0x58>)
1000a8c6:	2290      	movs	r2, #144	; 0x90
1000a8c8:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000a8ca:	490a      	ldr	r1, [pc, #40]	; (1000a8f4 <gpio_init+0x5c>)
1000a8cc:	2027      	movs	r0, #39	; 0x27
1000a8ce:	4c0a      	ldr	r4, [pc, #40]	; (1000a8f8 <gpio_init+0x60>)
1000a8d0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000a8d2:	490a      	ldr	r1, [pc, #40]	; (1000a8fc <gpio_init+0x64>)
1000a8d4:	2028      	movs	r0, #40	; 0x28
1000a8d6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000a8d8:	4909      	ldr	r1, [pc, #36]	; (1000a900 <gpio_init+0x68>)
1000a8da:	2029      	movs	r0, #41	; 0x29
1000a8dc:	47a0      	blx	r4
}
1000a8de:	bd10      	pop	{r4, pc}
1000a8e0:	100189c8 	.word	0x100189c8
1000a8e4:	10018984 	.word	0x10018984
1000a8e8:	40010000 	.word	0x40010000
1000a8ec:	40011000 	.word	0x40011000
1000a8f0:	40013000 	.word	0x40013000
1000a8f4:	1000a241 	.word	0x1000a241
1000a8f8:	1000b4c5 	.word	0x1000b4c5
1000a8fc:	1000a2a5 	.word	0x1000a2a5
1000a900:	1000a315 	.word	0x1000a315

1000a904 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000a904:	2801      	cmp	r0, #1
1000a906:	d00d      	beq.n	1000a924 <system_clock_config+0x20>
1000a908:	2800      	cmp	r0, #0
1000a90a:	d002      	beq.n	1000a912 <system_clock_config+0xe>
1000a90c:	2802      	cmp	r0, #2
1000a90e:	d01c      	beq.n	1000a94a <system_clock_config+0x46>
1000a910:	e02e      	b.n	1000a970 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a912:	4a18      	ldr	r2, [pc, #96]	; (1000a974 <system_clock_config+0x70>)
1000a914:	6990      	ldr	r0, [r2, #24]
1000a916:	230c      	movs	r3, #12
1000a918:	4303      	orrs	r3, r0
1000a91a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000a91c:	4a16      	ldr	r2, [pc, #88]	; (1000a978 <system_clock_config+0x74>)
1000a91e:	4b17      	ldr	r3, [pc, #92]	; (1000a97c <system_clock_config+0x78>)
1000a920:	601a      	str	r2, [r3, #0]
			break;
1000a922:	e01a      	b.n	1000a95a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a924:	4b13      	ldr	r3, [pc, #76]	; (1000a974 <system_clock_config+0x70>)
1000a926:	6998      	ldr	r0, [r3, #24]
1000a928:	2208      	movs	r2, #8
1000a92a:	4302      	orrs	r2, r0
1000a92c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a92e:	699a      	ldr	r2, [r3, #24]
1000a930:	2004      	movs	r0, #4
1000a932:	4382      	bics	r2, r0
1000a934:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000a936:	4a12      	ldr	r2, [pc, #72]	; (1000a980 <system_clock_config+0x7c>)
1000a938:	6853      	ldr	r3, [r2, #4]
1000a93a:	2080      	movs	r0, #128	; 0x80
1000a93c:	0300      	lsls	r0, r0, #12
1000a93e:	4303      	orrs	r3, r0
1000a940:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000a942:	4a10      	ldr	r2, [pc, #64]	; (1000a984 <system_clock_config+0x80>)
1000a944:	4b0d      	ldr	r3, [pc, #52]	; (1000a97c <system_clock_config+0x78>)
1000a946:	601a      	str	r2, [r3, #0]
			break;
1000a948:	e007      	b.n	1000a95a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a94a:	4a0a      	ldr	r2, [pc, #40]	; (1000a974 <system_clock_config+0x70>)
1000a94c:	6993      	ldr	r3, [r2, #24]
1000a94e:	200c      	movs	r0, #12
1000a950:	4383      	bics	r3, r0
1000a952:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000a954:	4a08      	ldr	r2, [pc, #32]	; (1000a978 <system_clock_config+0x74>)
1000a956:	4b09      	ldr	r3, [pc, #36]	; (1000a97c <system_clock_config+0x78>)
1000a958:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a95a:	4b06      	ldr	r3, [pc, #24]	; (1000a974 <system_clock_config+0x70>)
1000a95c:	699a      	ldr	r2, [r3, #24]
1000a95e:	2003      	movs	r0, #3
1000a960:	4382      	bics	r2, r0
1000a962:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a964:	699a      	ldr	r2, [r3, #24]
1000a966:	4001      	ands	r1, r0
1000a968:	4311      	orrs	r1, r2
1000a96a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000a96c:	2000      	movs	r0, #0
1000a96e:	e000      	b.n	1000a972 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000a970:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000a972:	4770      	bx	lr
1000a974:	4000b000 	.word	0x4000b000
1000a978:	018cba80 	.word	0x018cba80
1000a97c:	10018a5c 	.word	0x10018a5c
1000a980:	4000f000 	.word	0x4000f000
1000a984:	001e8480 	.word	0x001e8480

1000a988 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000a988:	4b01      	ldr	r3, [pc, #4]	; (1000a990 <system_clock_get_value+0x8>)
1000a98a:	6818      	ldr	r0, [r3, #0]
}
1000a98c:	4770      	bx	lr
1000a98e:	46c0      	nop			; (mov r8, r8)
1000a990:	10018a5c 	.word	0x10018a5c

1000a994 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000a994:	b500      	push	{lr}
	switch (peripheral) {
1000a996:	2835      	cmp	r0, #53	; 0x35
1000a998:	d900      	bls.n	1000a99c <system_clock_peripheral_enable+0x8>
1000a99a:	e1a2      	b.n	1000ace2 <system_clock_peripheral_enable+0x34e>
1000a99c:	0080      	lsls	r0, r0, #2
1000a99e:	4bd2      	ldr	r3, [pc, #840]	; (1000ace8 <system_clock_peripheral_enable+0x354>)
1000a9a0:	581b      	ldr	r3, [r3, r0]
1000a9a2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9a4:	4ad1      	ldr	r2, [pc, #836]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9a6:	68d1      	ldr	r1, [r2, #12]
1000a9a8:	2302      	movs	r3, #2
1000a9aa:	430b      	orrs	r3, r1
1000a9ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9ae:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000a9b0:	e198      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9b2:	4ace      	ldr	r2, [pc, #824]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9b4:	68d1      	ldr	r1, [r2, #12]
1000a9b6:	2304      	movs	r3, #4
1000a9b8:	430b      	orrs	r3, r1
1000a9ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000a9be:	e191      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9c0:	4aca      	ldr	r2, [pc, #808]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9c2:	68d1      	ldr	r1, [r2, #12]
1000a9c4:	2308      	movs	r3, #8
1000a9c6:	430b      	orrs	r3, r1
1000a9c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000a9cc:	e18a      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9ce:	4ac7      	ldr	r2, [pc, #796]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9d0:	68d1      	ldr	r1, [r2, #12]
1000a9d2:	2310      	movs	r3, #16
1000a9d4:	430b      	orrs	r3, r1
1000a9d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000a9da:	e183      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9dc:	4ac3      	ldr	r2, [pc, #780]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9de:	68d1      	ldr	r1, [r2, #12]
1000a9e0:	2320      	movs	r3, #32
1000a9e2:	430b      	orrs	r3, r1
1000a9e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000a9e8:	e17c      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9ea:	4ac0      	ldr	r2, [pc, #768]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9ec:	68d1      	ldr	r1, [r2, #12]
1000a9ee:	2380      	movs	r3, #128	; 0x80
1000a9f0:	430b      	orrs	r3, r1
1000a9f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000a9f6:	e175      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9f8:	4abc      	ldr	r2, [pc, #752]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000a9fa:	68d3      	ldr	r3, [r2, #12]
1000a9fc:	2180      	movs	r1, #128	; 0x80
1000a9fe:	0049      	lsls	r1, r1, #1
1000aa00:	430b      	orrs	r3, r1
1000aa02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000aa06:	e16d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa08:	4ab8      	ldr	r2, [pc, #736]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa0a:	68d3      	ldr	r3, [r2, #12]
1000aa0c:	2180      	movs	r1, #128	; 0x80
1000aa0e:	0109      	lsls	r1, r1, #4
1000aa10:	430b      	orrs	r3, r1
1000aa12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000aa16:	e165      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa18:	4ab4      	ldr	r2, [pc, #720]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa1a:	68d3      	ldr	r3, [r2, #12]
1000aa1c:	2180      	movs	r1, #128	; 0x80
1000aa1e:	0149      	lsls	r1, r1, #5
1000aa20:	430b      	orrs	r3, r1
1000aa22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000aa26:	e15d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa28:	4ab0      	ldr	r2, [pc, #704]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa2a:	68d3      	ldr	r3, [r2, #12]
1000aa2c:	2180      	movs	r1, #128	; 0x80
1000aa2e:	0189      	lsls	r1, r1, #6
1000aa30:	430b      	orrs	r3, r1
1000aa32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000aa36:	e155      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa38:	4aac      	ldr	r2, [pc, #688]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa3a:	68d3      	ldr	r3, [r2, #12]
1000aa3c:	2180      	movs	r1, #128	; 0x80
1000aa3e:	01c9      	lsls	r1, r1, #7
1000aa40:	430b      	orrs	r3, r1
1000aa42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000aa46:	e14d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa48:	4aa8      	ldr	r2, [pc, #672]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa4a:	68d3      	ldr	r3, [r2, #12]
1000aa4c:	2180      	movs	r1, #128	; 0x80
1000aa4e:	0209      	lsls	r1, r1, #8
1000aa50:	430b      	orrs	r3, r1
1000aa52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000aa56:	e145      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa58:	4aa4      	ldr	r2, [pc, #656]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa5a:	68d3      	ldr	r3, [r2, #12]
1000aa5c:	2180      	movs	r1, #128	; 0x80
1000aa5e:	0249      	lsls	r1, r1, #9
1000aa60:	430b      	orrs	r3, r1
1000aa62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000aa66:	e13d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa68:	4aa0      	ldr	r2, [pc, #640]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa6a:	68d3      	ldr	r3, [r2, #12]
1000aa6c:	2180      	movs	r1, #128	; 0x80
1000aa6e:	0289      	lsls	r1, r1, #10
1000aa70:	430b      	orrs	r3, r1
1000aa72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000aa76:	e135      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa78:	4a9c      	ldr	r2, [pc, #624]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa7a:	68d3      	ldr	r3, [r2, #12]
1000aa7c:	2180      	movs	r1, #128	; 0x80
1000aa7e:	02c9      	lsls	r1, r1, #11
1000aa80:	430b      	orrs	r3, r1
1000aa82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000aa86:	e12d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa88:	4a98      	ldr	r2, [pc, #608]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa8a:	68d3      	ldr	r3, [r2, #12]
1000aa8c:	2180      	movs	r1, #128	; 0x80
1000aa8e:	0309      	lsls	r1, r1, #12
1000aa90:	430b      	orrs	r3, r1
1000aa92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000aa96:	e125      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa98:	4a94      	ldr	r2, [pc, #592]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aa9a:	68d3      	ldr	r3, [r2, #12]
1000aa9c:	2180      	movs	r1, #128	; 0x80
1000aa9e:	0349      	lsls	r1, r1, #13
1000aaa0:	430b      	orrs	r3, r1
1000aaa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000aaa6:	e11d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aaa8:	4a90      	ldr	r2, [pc, #576]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aaaa:	68d3      	ldr	r3, [r2, #12]
1000aaac:	2180      	movs	r1, #128	; 0x80
1000aaae:	0389      	lsls	r1, r1, #14
1000aab0:	430b      	orrs	r3, r1
1000aab2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000aab6:	e115      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aab8:	4a8c      	ldr	r2, [pc, #560]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aaba:	68d3      	ldr	r3, [r2, #12]
1000aabc:	2180      	movs	r1, #128	; 0x80
1000aabe:	03c9      	lsls	r1, r1, #15
1000aac0:	430b      	orrs	r3, r1
1000aac2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000aac6:	e10d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aac8:	4a88      	ldr	r2, [pc, #544]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aaca:	68d3      	ldr	r3, [r2, #12]
1000aacc:	2180      	movs	r1, #128	; 0x80
1000aace:	0409      	lsls	r1, r1, #16
1000aad0:	430b      	orrs	r3, r1
1000aad2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000aad6:	e105      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aad8:	4a84      	ldr	r2, [pc, #528]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aada:	68d3      	ldr	r3, [r2, #12]
1000aadc:	2180      	movs	r1, #128	; 0x80
1000aade:	0449      	lsls	r1, r1, #17
1000aae0:	430b      	orrs	r3, r1
1000aae2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000aae6:	e0fd      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aae8:	4a80      	ldr	r2, [pc, #512]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aaea:	68d3      	ldr	r3, [r2, #12]
1000aaec:	2180      	movs	r1, #128	; 0x80
1000aaee:	0489      	lsls	r1, r1, #18
1000aaf0:	430b      	orrs	r3, r1
1000aaf2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000aaf6:	e0f5      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aaf8:	4a7c      	ldr	r2, [pc, #496]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000aafa:	68d3      	ldr	r3, [r2, #12]
1000aafc:	2180      	movs	r1, #128	; 0x80
1000aafe:	04c9      	lsls	r1, r1, #19
1000ab00:	430b      	orrs	r3, r1
1000ab02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ab06:	e0ed      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab08:	4a78      	ldr	r2, [pc, #480]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab0a:	68d3      	ldr	r3, [r2, #12]
1000ab0c:	2180      	movs	r1, #128	; 0x80
1000ab0e:	0509      	lsls	r1, r1, #20
1000ab10:	430b      	orrs	r3, r1
1000ab12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ab16:	e0e5      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab18:	4a74      	ldr	r2, [pc, #464]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab1a:	68d3      	ldr	r3, [r2, #12]
1000ab1c:	2180      	movs	r1, #128	; 0x80
1000ab1e:	0549      	lsls	r1, r1, #21
1000ab20:	430b      	orrs	r3, r1
1000ab22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ab26:	e0dd      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab28:	4a70      	ldr	r2, [pc, #448]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab2a:	68d3      	ldr	r3, [r2, #12]
1000ab2c:	2180      	movs	r1, #128	; 0x80
1000ab2e:	0589      	lsls	r1, r1, #22
1000ab30:	430b      	orrs	r3, r1
1000ab32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ab36:	e0d5      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab38:	4a6c      	ldr	r2, [pc, #432]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab3a:	68d3      	ldr	r3, [r2, #12]
1000ab3c:	2180      	movs	r1, #128	; 0x80
1000ab3e:	05c9      	lsls	r1, r1, #23
1000ab40:	430b      	orrs	r3, r1
1000ab42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ab46:	e0cd      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab48:	4a68      	ldr	r2, [pc, #416]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab4a:	6911      	ldr	r1, [r2, #16]
1000ab4c:	2301      	movs	r3, #1
1000ab4e:	430b      	orrs	r3, r1
1000ab50:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab52:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ab54:	e0c6      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab56:	4a65      	ldr	r2, [pc, #404]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab58:	6911      	ldr	r1, [r2, #16]
1000ab5a:	2302      	movs	r3, #2
1000ab5c:	430b      	orrs	r3, r1
1000ab5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ab62:	e0bf      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab64:	4a61      	ldr	r2, [pc, #388]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab66:	6911      	ldr	r1, [r2, #16]
1000ab68:	2304      	movs	r3, #4
1000ab6a:	430b      	orrs	r3, r1
1000ab6c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000ab70:	e0b8      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab72:	4a5e      	ldr	r2, [pc, #376]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab74:	6911      	ldr	r1, [r2, #16]
1000ab76:	2308      	movs	r3, #8
1000ab78:	430b      	orrs	r3, r1
1000ab7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ab7e:	e0b1      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab80:	4a5a      	ldr	r2, [pc, #360]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab82:	6911      	ldr	r1, [r2, #16]
1000ab84:	2310      	movs	r3, #16
1000ab86:	430b      	orrs	r3, r1
1000ab88:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ab8c:	e0aa      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab8e:	4a57      	ldr	r2, [pc, #348]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab90:	6911      	ldr	r1, [r2, #16]
1000ab92:	2320      	movs	r3, #32
1000ab94:	430b      	orrs	r3, r1
1000ab96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ab9a:	e0a3      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab9c:	4a53      	ldr	r2, [pc, #332]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ab9e:	6911      	ldr	r1, [r2, #16]
1000aba0:	2340      	movs	r3, #64	; 0x40
1000aba2:	430b      	orrs	r3, r1
1000aba4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aba6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000aba8:	e09c      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abaa:	4a50      	ldr	r2, [pc, #320]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abac:	6911      	ldr	r1, [r2, #16]
1000abae:	2380      	movs	r3, #128	; 0x80
1000abb0:	430b      	orrs	r3, r1
1000abb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000abb6:	e095      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abb8:	4a4c      	ldr	r2, [pc, #304]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abba:	6913      	ldr	r3, [r2, #16]
1000abbc:	2180      	movs	r1, #128	; 0x80
1000abbe:	0049      	lsls	r1, r1, #1
1000abc0:	430b      	orrs	r3, r1
1000abc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000abc6:	e08d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abc8:	4a48      	ldr	r2, [pc, #288]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abca:	6913      	ldr	r3, [r2, #16]
1000abcc:	2180      	movs	r1, #128	; 0x80
1000abce:	0089      	lsls	r1, r1, #2
1000abd0:	430b      	orrs	r3, r1
1000abd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000abd6:	e085      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abd8:	4a44      	ldr	r2, [pc, #272]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abda:	6913      	ldr	r3, [r2, #16]
1000abdc:	2180      	movs	r1, #128	; 0x80
1000abde:	00c9      	lsls	r1, r1, #3
1000abe0:	430b      	orrs	r3, r1
1000abe2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abe4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000abe6:	e07d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abe8:	4a40      	ldr	r2, [pc, #256]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abea:	6913      	ldr	r3, [r2, #16]
1000abec:	2180      	movs	r1, #128	; 0x80
1000abee:	0109      	lsls	r1, r1, #4
1000abf0:	430b      	orrs	r3, r1
1000abf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000abf6:	e075      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abf8:	4a3c      	ldr	r2, [pc, #240]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000abfa:	6913      	ldr	r3, [r2, #16]
1000abfc:	2180      	movs	r1, #128	; 0x80
1000abfe:	0149      	lsls	r1, r1, #5
1000ac00:	430b      	orrs	r3, r1
1000ac02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ac06:	e06d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac08:	4a38      	ldr	r2, [pc, #224]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac0a:	6913      	ldr	r3, [r2, #16]
1000ac0c:	2180      	movs	r1, #128	; 0x80
1000ac0e:	0189      	lsls	r1, r1, #6
1000ac10:	430b      	orrs	r3, r1
1000ac12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ac16:	e065      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac18:	4a34      	ldr	r2, [pc, #208]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac1a:	6913      	ldr	r3, [r2, #16]
1000ac1c:	2180      	movs	r1, #128	; 0x80
1000ac1e:	01c9      	lsls	r1, r1, #7
1000ac20:	430b      	orrs	r3, r1
1000ac22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ac26:	e05d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac28:	4a30      	ldr	r2, [pc, #192]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac2a:	6913      	ldr	r3, [r2, #16]
1000ac2c:	2180      	movs	r1, #128	; 0x80
1000ac2e:	0209      	lsls	r1, r1, #8
1000ac30:	430b      	orrs	r3, r1
1000ac32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ac36:	e055      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac38:	4a2c      	ldr	r2, [pc, #176]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac3a:	6913      	ldr	r3, [r2, #16]
1000ac3c:	2180      	movs	r1, #128	; 0x80
1000ac3e:	0249      	lsls	r1, r1, #9
1000ac40:	430b      	orrs	r3, r1
1000ac42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ac46:	e04d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac48:	4a28      	ldr	r2, [pc, #160]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac4a:	6913      	ldr	r3, [r2, #16]
1000ac4c:	2180      	movs	r1, #128	; 0x80
1000ac4e:	0289      	lsls	r1, r1, #10
1000ac50:	430b      	orrs	r3, r1
1000ac52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ac56:	e045      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac58:	4a24      	ldr	r2, [pc, #144]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac5a:	6913      	ldr	r3, [r2, #16]
1000ac5c:	2180      	movs	r1, #128	; 0x80
1000ac5e:	02c9      	lsls	r1, r1, #11
1000ac60:	430b      	orrs	r3, r1
1000ac62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ac66:	e03d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac68:	4a20      	ldr	r2, [pc, #128]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac6a:	6913      	ldr	r3, [r2, #16]
1000ac6c:	2180      	movs	r1, #128	; 0x80
1000ac6e:	0309      	lsls	r1, r1, #12
1000ac70:	430b      	orrs	r3, r1
1000ac72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ac76:	e035      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac78:	4a1c      	ldr	r2, [pc, #112]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac7a:	6913      	ldr	r3, [r2, #16]
1000ac7c:	2180      	movs	r1, #128	; 0x80
1000ac7e:	0349      	lsls	r1, r1, #13
1000ac80:	430b      	orrs	r3, r1
1000ac82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ac86:	e02d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac88:	4a18      	ldr	r2, [pc, #96]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac8a:	6913      	ldr	r3, [r2, #16]
1000ac8c:	2180      	movs	r1, #128	; 0x80
1000ac8e:	0389      	lsls	r1, r1, #14
1000ac90:	430b      	orrs	r3, r1
1000ac92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ac96:	e025      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac98:	4a14      	ldr	r2, [pc, #80]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000ac9a:	6913      	ldr	r3, [r2, #16]
1000ac9c:	2180      	movs	r1, #128	; 0x80
1000ac9e:	03c9      	lsls	r1, r1, #15
1000aca0:	430b      	orrs	r3, r1
1000aca2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aca4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000aca6:	e01d      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aca8:	4a10      	ldr	r2, [pc, #64]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000acaa:	6913      	ldr	r3, [r2, #16]
1000acac:	2180      	movs	r1, #128	; 0x80
1000acae:	0409      	lsls	r1, r1, #16
1000acb0:	430b      	orrs	r3, r1
1000acb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000acb6:	e015      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000acb8:	4a0c      	ldr	r2, [pc, #48]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000acba:	7d11      	ldrb	r1, [r2, #20]
1000acbc:	2301      	movs	r3, #1
1000acbe:	430b      	orrs	r3, r1
1000acc0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000acc4:	e00e      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000acc6:	4a09      	ldr	r2, [pc, #36]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000acc8:	7d11      	ldrb	r1, [r2, #20]
1000acca:	2302      	movs	r3, #2
1000accc:	430b      	orrs	r3, r1
1000acce:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000acd2:	e007      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000acd4:	4a05      	ldr	r2, [pc, #20]	; (1000acec <system_clock_peripheral_enable+0x358>)
1000acd6:	7d11      	ldrb	r1, [r2, #20]
1000acd8:	2304      	movs	r3, #4
1000acda:	430b      	orrs	r3, r1
1000acdc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ace0:	e000      	b.n	1000ace4 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ace2:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ace4:	bd00      	pop	{pc}
1000ace6:	46c0      	nop			; (mov r8, r8)
1000ace8:	10015f50 	.word	0x10015f50
1000acec:	4000b000 	.word	0x4000b000

1000acf0 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000acf0:	b500      	push	{lr}
	switch (peripheral) {
1000acf2:	2835      	cmp	r0, #53	; 0x35
1000acf4:	d900      	bls.n	1000acf8 <system_clock_peripheral_disable+0x8>
1000acf6:	e17d      	b.n	1000aff4 <system_clock_peripheral_disable+0x304>
1000acf8:	0080      	lsls	r0, r0, #2
1000acfa:	4bbf      	ldr	r3, [pc, #764]	; (1000aff8 <system_clock_peripheral_disable+0x308>)
1000acfc:	581b      	ldr	r3, [r3, r0]
1000acfe:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad00:	4abe      	ldr	r2, [pc, #760]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad02:	68d3      	ldr	r3, [r2, #12]
1000ad04:	2102      	movs	r1, #2
1000ad06:	438b      	bics	r3, r1
1000ad08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad0a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ad0c:	e173      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad0e:	4abb      	ldr	r2, [pc, #748]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad10:	68d3      	ldr	r3, [r2, #12]
1000ad12:	2104      	movs	r1, #4
1000ad14:	438b      	bics	r3, r1
1000ad16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ad1a:	e16c      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad1c:	4ab7      	ldr	r2, [pc, #732]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad1e:	68d3      	ldr	r3, [r2, #12]
1000ad20:	2108      	movs	r1, #8
1000ad22:	438b      	bics	r3, r1
1000ad24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000ad28:	e165      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad2a:	4ab4      	ldr	r2, [pc, #720]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad2c:	68d3      	ldr	r3, [r2, #12]
1000ad2e:	2110      	movs	r1, #16
1000ad30:	438b      	bics	r3, r1
1000ad32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000ad36:	e15e      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad38:	4ab0      	ldr	r2, [pc, #704]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad3a:	68d3      	ldr	r3, [r2, #12]
1000ad3c:	2120      	movs	r1, #32
1000ad3e:	438b      	bics	r3, r1
1000ad40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000ad44:	e157      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad46:	4aad      	ldr	r2, [pc, #692]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad48:	68d3      	ldr	r3, [r2, #12]
1000ad4a:	2180      	movs	r1, #128	; 0x80
1000ad4c:	438b      	bics	r3, r1
1000ad4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ad52:	e150      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad54:	4aa9      	ldr	r2, [pc, #676]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad56:	68d1      	ldr	r1, [r2, #12]
1000ad58:	4ba9      	ldr	r3, [pc, #676]	; (1000b000 <system_clock_peripheral_disable+0x310>)
1000ad5a:	400b      	ands	r3, r1
1000ad5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ad60:	e149      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad62:	4aa6      	ldr	r2, [pc, #664]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad64:	68d1      	ldr	r1, [r2, #12]
1000ad66:	4ba7      	ldr	r3, [pc, #668]	; (1000b004 <system_clock_peripheral_disable+0x314>)
1000ad68:	400b      	ands	r3, r1
1000ad6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000ad6e:	e142      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad70:	4aa2      	ldr	r2, [pc, #648]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad72:	68d1      	ldr	r1, [r2, #12]
1000ad74:	4ba4      	ldr	r3, [pc, #656]	; (1000b008 <system_clock_peripheral_disable+0x318>)
1000ad76:	400b      	ands	r3, r1
1000ad78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ad7c:	e13b      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad7e:	4a9f      	ldr	r2, [pc, #636]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad80:	68d1      	ldr	r1, [r2, #12]
1000ad82:	4ba2      	ldr	r3, [pc, #648]	; (1000b00c <system_clock_peripheral_disable+0x31c>)
1000ad84:	400b      	ands	r3, r1
1000ad86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ad8a:	e134      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad8c:	4a9b      	ldr	r2, [pc, #620]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad8e:	68d1      	ldr	r1, [r2, #12]
1000ad90:	4b9f      	ldr	r3, [pc, #636]	; (1000b010 <system_clock_peripheral_disable+0x320>)
1000ad92:	400b      	ands	r3, r1
1000ad94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ad98:	e12d      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad9a:	4a98      	ldr	r2, [pc, #608]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ad9c:	68d1      	ldr	r1, [r2, #12]
1000ad9e:	4b9d      	ldr	r3, [pc, #628]	; (1000b014 <system_clock_peripheral_disable+0x324>)
1000ada0:	400b      	ands	r3, r1
1000ada2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000ada6:	e126      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ada8:	4a94      	ldr	r2, [pc, #592]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000adaa:	68d1      	ldr	r1, [r2, #12]
1000adac:	4b9a      	ldr	r3, [pc, #616]	; (1000b018 <system_clock_peripheral_disable+0x328>)
1000adae:	400b      	ands	r3, r1
1000adb0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000adb4:	e11f      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adb6:	4a91      	ldr	r2, [pc, #580]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000adb8:	68d1      	ldr	r1, [r2, #12]
1000adba:	4b98      	ldr	r3, [pc, #608]	; (1000b01c <system_clock_peripheral_disable+0x32c>)
1000adbc:	400b      	ands	r3, r1
1000adbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000adc2:	e118      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adc4:	4a8d      	ldr	r2, [pc, #564]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000adc6:	68d1      	ldr	r1, [r2, #12]
1000adc8:	4b95      	ldr	r3, [pc, #596]	; (1000b020 <system_clock_peripheral_disable+0x330>)
1000adca:	400b      	ands	r3, r1
1000adcc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000add0:	e111      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000add2:	4a8a      	ldr	r2, [pc, #552]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000add4:	68d1      	ldr	r1, [r2, #12]
1000add6:	4b93      	ldr	r3, [pc, #588]	; (1000b024 <system_clock_peripheral_disable+0x334>)
1000add8:	400b      	ands	r3, r1
1000adda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000addc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000adde:	e10a      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ade0:	4a86      	ldr	r2, [pc, #536]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ade2:	68d1      	ldr	r1, [r2, #12]
1000ade4:	4b90      	ldr	r3, [pc, #576]	; (1000b028 <system_clock_peripheral_disable+0x338>)
1000ade6:	400b      	ands	r3, r1
1000ade8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000adec:	e103      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adee:	4a83      	ldr	r2, [pc, #524]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000adf0:	68d1      	ldr	r1, [r2, #12]
1000adf2:	4b8e      	ldr	r3, [pc, #568]	; (1000b02c <system_clock_peripheral_disable+0x33c>)
1000adf4:	400b      	ands	r3, r1
1000adf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000adfa:	e0fc      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adfc:	4a7f      	ldr	r2, [pc, #508]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000adfe:	68d1      	ldr	r1, [r2, #12]
1000ae00:	4b8b      	ldr	r3, [pc, #556]	; (1000b030 <system_clock_peripheral_disable+0x340>)
1000ae02:	400b      	ands	r3, r1
1000ae04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ae08:	e0f5      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae0a:	4a7c      	ldr	r2, [pc, #496]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae0c:	68d1      	ldr	r1, [r2, #12]
1000ae0e:	4b89      	ldr	r3, [pc, #548]	; (1000b034 <system_clock_peripheral_disable+0x344>)
1000ae10:	400b      	ands	r3, r1
1000ae12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000ae16:	e0ee      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae18:	4a78      	ldr	r2, [pc, #480]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae1a:	68d1      	ldr	r1, [r2, #12]
1000ae1c:	4b86      	ldr	r3, [pc, #536]	; (1000b038 <system_clock_peripheral_disable+0x348>)
1000ae1e:	400b      	ands	r3, r1
1000ae20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ae24:	e0e7      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae26:	4a75      	ldr	r2, [pc, #468]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae28:	68d1      	ldr	r1, [r2, #12]
1000ae2a:	4b84      	ldr	r3, [pc, #528]	; (1000b03c <system_clock_peripheral_disable+0x34c>)
1000ae2c:	400b      	ands	r3, r1
1000ae2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ae32:	e0e0      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae34:	4a71      	ldr	r2, [pc, #452]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae36:	68d1      	ldr	r1, [r2, #12]
1000ae38:	4b81      	ldr	r3, [pc, #516]	; (1000b040 <system_clock_peripheral_disable+0x350>)
1000ae3a:	400b      	ands	r3, r1
1000ae3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ae40:	e0d9      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae42:	4a6e      	ldr	r2, [pc, #440]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae44:	68d1      	ldr	r1, [r2, #12]
1000ae46:	4b7f      	ldr	r3, [pc, #508]	; (1000b044 <system_clock_peripheral_disable+0x354>)
1000ae48:	400b      	ands	r3, r1
1000ae4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ae4e:	e0d2      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae50:	4a6a      	ldr	r2, [pc, #424]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae52:	68d1      	ldr	r1, [r2, #12]
1000ae54:	4b7c      	ldr	r3, [pc, #496]	; (1000b048 <system_clock_peripheral_disable+0x358>)
1000ae56:	400b      	ands	r3, r1
1000ae58:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ae5c:	e0cb      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae5e:	4a67      	ldr	r2, [pc, #412]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae60:	68d1      	ldr	r1, [r2, #12]
1000ae62:	4b7a      	ldr	r3, [pc, #488]	; (1000b04c <system_clock_peripheral_disable+0x35c>)
1000ae64:	400b      	ands	r3, r1
1000ae66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ae6a:	e0c4      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae6c:	4a63      	ldr	r2, [pc, #396]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae6e:	68d1      	ldr	r1, [r2, #12]
1000ae70:	4b77      	ldr	r3, [pc, #476]	; (1000b050 <system_clock_peripheral_disable+0x360>)
1000ae72:	400b      	ands	r3, r1
1000ae74:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ae78:	e0bd      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae7a:	4a60      	ldr	r2, [pc, #384]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae7c:	6913      	ldr	r3, [r2, #16]
1000ae7e:	2101      	movs	r1, #1
1000ae80:	438b      	bics	r3, r1
1000ae82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ae86:	e0b6      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae88:	4a5c      	ldr	r2, [pc, #368]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae8a:	6913      	ldr	r3, [r2, #16]
1000ae8c:	2102      	movs	r1, #2
1000ae8e:	438b      	bics	r3, r1
1000ae90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ae94:	e0af      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae96:	4a59      	ldr	r2, [pc, #356]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000ae98:	6913      	ldr	r3, [r2, #16]
1000ae9a:	2104      	movs	r1, #4
1000ae9c:	438b      	bics	r3, r1
1000ae9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000aea2:	e0a8      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aea4:	4a55      	ldr	r2, [pc, #340]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aea6:	6913      	ldr	r3, [r2, #16]
1000aea8:	2108      	movs	r1, #8
1000aeaa:	438b      	bics	r3, r1
1000aeac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000aeb0:	e0a1      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aeb2:	4a52      	ldr	r2, [pc, #328]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aeb4:	6913      	ldr	r3, [r2, #16]
1000aeb6:	2110      	movs	r1, #16
1000aeb8:	438b      	bics	r3, r1
1000aeba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aebc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000aebe:	e09a      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aec0:	4a4e      	ldr	r2, [pc, #312]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aec2:	6913      	ldr	r3, [r2, #16]
1000aec4:	2120      	movs	r1, #32
1000aec6:	438b      	bics	r3, r1
1000aec8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000aecc:	e093      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aece:	4a4b      	ldr	r2, [pc, #300]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aed0:	6913      	ldr	r3, [r2, #16]
1000aed2:	2140      	movs	r1, #64	; 0x40
1000aed4:	438b      	bics	r3, r1
1000aed6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aed8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000aeda:	e08c      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aedc:	4a47      	ldr	r2, [pc, #284]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aede:	6913      	ldr	r3, [r2, #16]
1000aee0:	2180      	movs	r1, #128	; 0x80
1000aee2:	438b      	bics	r3, r1
1000aee4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aee6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000aee8:	e085      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aeea:	4a44      	ldr	r2, [pc, #272]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aeec:	6911      	ldr	r1, [r2, #16]
1000aeee:	4b44      	ldr	r3, [pc, #272]	; (1000b000 <system_clock_peripheral_disable+0x310>)
1000aef0:	400b      	ands	r3, r1
1000aef2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aef4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000aef6:	e07e      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aef8:	4a40      	ldr	r2, [pc, #256]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000aefa:	6911      	ldr	r1, [r2, #16]
1000aefc:	4b55      	ldr	r3, [pc, #340]	; (1000b054 <system_clock_peripheral_disable+0x364>)
1000aefe:	400b      	ands	r3, r1
1000af00:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000af04:	e077      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af06:	4a3d      	ldr	r2, [pc, #244]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af08:	6911      	ldr	r1, [r2, #16]
1000af0a:	4b53      	ldr	r3, [pc, #332]	; (1000b058 <system_clock_peripheral_disable+0x368>)
1000af0c:	400b      	ands	r3, r1
1000af0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000af12:	e070      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af14:	4a39      	ldr	r2, [pc, #228]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af16:	6911      	ldr	r1, [r2, #16]
1000af18:	4b3a      	ldr	r3, [pc, #232]	; (1000b004 <system_clock_peripheral_disable+0x314>)
1000af1a:	400b      	ands	r3, r1
1000af1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000af20:	e069      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af22:	4a36      	ldr	r2, [pc, #216]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af24:	6911      	ldr	r1, [r2, #16]
1000af26:	4b38      	ldr	r3, [pc, #224]	; (1000b008 <system_clock_peripheral_disable+0x318>)
1000af28:	400b      	ands	r3, r1
1000af2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000af2e:	e062      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af30:	4a32      	ldr	r2, [pc, #200]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af32:	6911      	ldr	r1, [r2, #16]
1000af34:	4b35      	ldr	r3, [pc, #212]	; (1000b00c <system_clock_peripheral_disable+0x31c>)
1000af36:	400b      	ands	r3, r1
1000af38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000af3c:	e05b      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af3e:	4a2f      	ldr	r2, [pc, #188]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af40:	6911      	ldr	r1, [r2, #16]
1000af42:	4b33      	ldr	r3, [pc, #204]	; (1000b010 <system_clock_peripheral_disable+0x320>)
1000af44:	400b      	ands	r3, r1
1000af46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000af4a:	e054      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af4c:	4a2b      	ldr	r2, [pc, #172]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af4e:	6911      	ldr	r1, [r2, #16]
1000af50:	4b30      	ldr	r3, [pc, #192]	; (1000b014 <system_clock_peripheral_disable+0x324>)
1000af52:	400b      	ands	r3, r1
1000af54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000af58:	e04d      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af5a:	4a28      	ldr	r2, [pc, #160]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af5c:	6911      	ldr	r1, [r2, #16]
1000af5e:	4b2e      	ldr	r3, [pc, #184]	; (1000b018 <system_clock_peripheral_disable+0x328>)
1000af60:	400b      	ands	r3, r1
1000af62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000af66:	e046      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af68:	4a24      	ldr	r2, [pc, #144]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af6a:	6911      	ldr	r1, [r2, #16]
1000af6c:	4b2b      	ldr	r3, [pc, #172]	; (1000b01c <system_clock_peripheral_disable+0x32c>)
1000af6e:	400b      	ands	r3, r1
1000af70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000af74:	e03f      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af76:	4a21      	ldr	r2, [pc, #132]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af78:	6911      	ldr	r1, [r2, #16]
1000af7a:	4b29      	ldr	r3, [pc, #164]	; (1000b020 <system_clock_peripheral_disable+0x330>)
1000af7c:	400b      	ands	r3, r1
1000af7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000af82:	e038      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af84:	4a1d      	ldr	r2, [pc, #116]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af86:	6911      	ldr	r1, [r2, #16]
1000af88:	4b26      	ldr	r3, [pc, #152]	; (1000b024 <system_clock_peripheral_disable+0x334>)
1000af8a:	400b      	ands	r3, r1
1000af8c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000af90:	e031      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af92:	4a1a      	ldr	r2, [pc, #104]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000af94:	6911      	ldr	r1, [r2, #16]
1000af96:	4b24      	ldr	r3, [pc, #144]	; (1000b028 <system_clock_peripheral_disable+0x338>)
1000af98:	400b      	ands	r3, r1
1000af9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000af9e:	e02a      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afa0:	4a16      	ldr	r2, [pc, #88]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afa2:	6911      	ldr	r1, [r2, #16]
1000afa4:	4b21      	ldr	r3, [pc, #132]	; (1000b02c <system_clock_peripheral_disable+0x33c>)
1000afa6:	400b      	ands	r3, r1
1000afa8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000afac:	e023      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afae:	4a13      	ldr	r2, [pc, #76]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afb0:	6911      	ldr	r1, [r2, #16]
1000afb2:	4b1f      	ldr	r3, [pc, #124]	; (1000b030 <system_clock_peripheral_disable+0x340>)
1000afb4:	400b      	ands	r3, r1
1000afb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000afba:	e01c      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afbc:	4a0f      	ldr	r2, [pc, #60]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afbe:	6911      	ldr	r1, [r2, #16]
1000afc0:	4b1c      	ldr	r3, [pc, #112]	; (1000b034 <system_clock_peripheral_disable+0x344>)
1000afc2:	400b      	ands	r3, r1
1000afc4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000afc8:	e015      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000afca:	4a0c      	ldr	r2, [pc, #48]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afcc:	7d13      	ldrb	r3, [r2, #20]
1000afce:	2101      	movs	r1, #1
1000afd0:	438b      	bics	r3, r1
1000afd2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000afd6:	e00e      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000afd8:	4a08      	ldr	r2, [pc, #32]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afda:	7d13      	ldrb	r3, [r2, #20]
1000afdc:	2102      	movs	r1, #2
1000afde:	438b      	bics	r3, r1
1000afe0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afe2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000afe4:	e007      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000afe6:	4a05      	ldr	r2, [pc, #20]	; (1000affc <system_clock_peripheral_disable+0x30c>)
1000afe8:	7d13      	ldrb	r3, [r2, #20]
1000afea:	2104      	movs	r1, #4
1000afec:	438b      	bics	r3, r1
1000afee:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aff0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000aff2:	e000      	b.n	1000aff6 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000aff4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000aff6:	bd00      	pop	{pc}
1000aff8:	10016028 	.word	0x10016028
1000affc:	4000b000 	.word	0x4000b000
1000b000:	fffffeff 	.word	0xfffffeff
1000b004:	fffff7ff 	.word	0xfffff7ff
1000b008:	ffffefff 	.word	0xffffefff
1000b00c:	ffffdfff 	.word	0xffffdfff
1000b010:	ffffbfff 	.word	0xffffbfff
1000b014:	ffff7fff 	.word	0xffff7fff
1000b018:	fffeffff 	.word	0xfffeffff
1000b01c:	fffdffff 	.word	0xfffdffff
1000b020:	fffbffff 	.word	0xfffbffff
1000b024:	fff7ffff 	.word	0xfff7ffff
1000b028:	ffefffff 	.word	0xffefffff
1000b02c:	ffdfffff 	.word	0xffdfffff
1000b030:	ffbfffff 	.word	0xffbfffff
1000b034:	ff7fffff 	.word	0xff7fffff
1000b038:	feffffff 	.word	0xfeffffff
1000b03c:	fdffffff 	.word	0xfdffffff
1000b040:	fbffffff 	.word	0xfbffffff
1000b044:	f7ffffff 	.word	0xf7ffffff
1000b048:	efffffff 	.word	0xefffffff
1000b04c:	dfffffff 	.word	0xdfffffff
1000b050:	bfffffff 	.word	0xbfffffff
1000b054:	fffffdff 	.word	0xfffffdff
1000b058:	fffffbff 	.word	0xfffffbff

1000b05c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b05c:	b500      	push	{lr}
	switch (peripheral) {
1000b05e:	2843      	cmp	r0, #67	; 0x43
1000b060:	d900      	bls.n	1000b064 <system_peripheral_reset+0x8>
1000b062:	e223      	b.n	1000b4ac <system_peripheral_reset+0x450>
1000b064:	0080      	lsls	r0, r0, #2
1000b066:	4be0      	ldr	r3, [pc, #896]	; (1000b3e8 <system_peripheral_reset+0x38c>)
1000b068:	581b      	ldr	r3, [r3, r0]
1000b06a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b06c:	4bdf      	ldr	r3, [pc, #892]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b06e:	6859      	ldr	r1, [r3, #4]
1000b070:	2202      	movs	r2, #2
1000b072:	4391      	bics	r1, r2
1000b074:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b076:	6859      	ldr	r1, [r3, #4]
1000b078:	430a      	orrs	r2, r1
1000b07a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b07c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b07e:	e216      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b080:	4bda      	ldr	r3, [pc, #872]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b082:	6859      	ldr	r1, [r3, #4]
1000b084:	2204      	movs	r2, #4
1000b086:	4391      	bics	r1, r2
1000b088:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b08a:	6859      	ldr	r1, [r3, #4]
1000b08c:	430a      	orrs	r2, r1
1000b08e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b090:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b092:	e20c      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b094:	4bd5      	ldr	r3, [pc, #852]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b096:	6859      	ldr	r1, [r3, #4]
1000b098:	2208      	movs	r2, #8
1000b09a:	4391      	bics	r1, r2
1000b09c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b09e:	6859      	ldr	r1, [r3, #4]
1000b0a0:	430a      	orrs	r2, r1
1000b0a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b0a6:	e202      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0a8:	4bd0      	ldr	r3, [pc, #832]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b0aa:	6859      	ldr	r1, [r3, #4]
1000b0ac:	2210      	movs	r2, #16
1000b0ae:	4391      	bics	r1, r2
1000b0b0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0b2:	6859      	ldr	r1, [r3, #4]
1000b0b4:	430a      	orrs	r2, r1
1000b0b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0b8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b0ba:	e1f8      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0bc:	4bcb      	ldr	r3, [pc, #812]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b0be:	6859      	ldr	r1, [r3, #4]
1000b0c0:	2220      	movs	r2, #32
1000b0c2:	4391      	bics	r1, r2
1000b0c4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0c6:	6859      	ldr	r1, [r3, #4]
1000b0c8:	430a      	orrs	r2, r1
1000b0ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0cc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b0ce:	e1ee      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0d0:	4bc6      	ldr	r3, [pc, #792]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b0d2:	6859      	ldr	r1, [r3, #4]
1000b0d4:	2240      	movs	r2, #64	; 0x40
1000b0d6:	4391      	bics	r1, r2
1000b0d8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0da:	6859      	ldr	r1, [r3, #4]
1000b0dc:	430a      	orrs	r2, r1
1000b0de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b0e2:	e1e4      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0e4:	4bc1      	ldr	r3, [pc, #772]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b0e6:	6859      	ldr	r1, [r3, #4]
1000b0e8:	2280      	movs	r2, #128	; 0x80
1000b0ea:	4391      	bics	r1, r2
1000b0ec:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0ee:	6859      	ldr	r1, [r3, #4]
1000b0f0:	430a      	orrs	r2, r1
1000b0f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b0f6:	e1da      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0f8:	4bbc      	ldr	r3, [pc, #752]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b0fa:	6859      	ldr	r1, [r3, #4]
1000b0fc:	4abc      	ldr	r2, [pc, #752]	; (1000b3f0 <system_peripheral_reset+0x394>)
1000b0fe:	400a      	ands	r2, r1
1000b100:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b102:	685a      	ldr	r2, [r3, #4]
1000b104:	2180      	movs	r1, #128	; 0x80
1000b106:	0049      	lsls	r1, r1, #1
1000b108:	430a      	orrs	r2, r1
1000b10a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b10c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b10e:	e1ce      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b110:	4bb6      	ldr	r3, [pc, #728]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b112:	6859      	ldr	r1, [r3, #4]
1000b114:	4ab7      	ldr	r2, [pc, #732]	; (1000b3f4 <system_peripheral_reset+0x398>)
1000b116:	400a      	ands	r2, r1
1000b118:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b11a:	685a      	ldr	r2, [r3, #4]
1000b11c:	2180      	movs	r1, #128	; 0x80
1000b11e:	0089      	lsls	r1, r1, #2
1000b120:	430a      	orrs	r2, r1
1000b122:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b124:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b126:	e1c2      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b128:	4bb0      	ldr	r3, [pc, #704]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b12a:	6859      	ldr	r1, [r3, #4]
1000b12c:	4ab2      	ldr	r2, [pc, #712]	; (1000b3f8 <system_peripheral_reset+0x39c>)
1000b12e:	400a      	ands	r2, r1
1000b130:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b132:	685a      	ldr	r2, [r3, #4]
1000b134:	2180      	movs	r1, #128	; 0x80
1000b136:	00c9      	lsls	r1, r1, #3
1000b138:	430a      	orrs	r2, r1
1000b13a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b13c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b13e:	e1b6      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b140:	4baa      	ldr	r3, [pc, #680]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b142:	6859      	ldr	r1, [r3, #4]
1000b144:	4aad      	ldr	r2, [pc, #692]	; (1000b3fc <system_peripheral_reset+0x3a0>)
1000b146:	400a      	ands	r2, r1
1000b148:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b14a:	685a      	ldr	r2, [r3, #4]
1000b14c:	2180      	movs	r1, #128	; 0x80
1000b14e:	0109      	lsls	r1, r1, #4
1000b150:	430a      	orrs	r2, r1
1000b152:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b154:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b156:	e1aa      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b158:	4ba4      	ldr	r3, [pc, #656]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b15a:	6859      	ldr	r1, [r3, #4]
1000b15c:	4aa8      	ldr	r2, [pc, #672]	; (1000b400 <system_peripheral_reset+0x3a4>)
1000b15e:	400a      	ands	r2, r1
1000b160:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b162:	685a      	ldr	r2, [r3, #4]
1000b164:	2180      	movs	r1, #128	; 0x80
1000b166:	0149      	lsls	r1, r1, #5
1000b168:	430a      	orrs	r2, r1
1000b16a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b16c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b16e:	e19e      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b170:	4b9e      	ldr	r3, [pc, #632]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b172:	6859      	ldr	r1, [r3, #4]
1000b174:	4aa3      	ldr	r2, [pc, #652]	; (1000b404 <system_peripheral_reset+0x3a8>)
1000b176:	400a      	ands	r2, r1
1000b178:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b17a:	685a      	ldr	r2, [r3, #4]
1000b17c:	2180      	movs	r1, #128	; 0x80
1000b17e:	0189      	lsls	r1, r1, #6
1000b180:	430a      	orrs	r2, r1
1000b182:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b184:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b186:	e192      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b188:	4b98      	ldr	r3, [pc, #608]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b18a:	6859      	ldr	r1, [r3, #4]
1000b18c:	4a9e      	ldr	r2, [pc, #632]	; (1000b408 <system_peripheral_reset+0x3ac>)
1000b18e:	400a      	ands	r2, r1
1000b190:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b192:	685a      	ldr	r2, [r3, #4]
1000b194:	2180      	movs	r1, #128	; 0x80
1000b196:	01c9      	lsls	r1, r1, #7
1000b198:	430a      	orrs	r2, r1
1000b19a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b19c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b19e:	e186      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1a0:	4b92      	ldr	r3, [pc, #584]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b1a2:	6859      	ldr	r1, [r3, #4]
1000b1a4:	4a99      	ldr	r2, [pc, #612]	; (1000b40c <system_peripheral_reset+0x3b0>)
1000b1a6:	400a      	ands	r2, r1
1000b1a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1aa:	685a      	ldr	r2, [r3, #4]
1000b1ac:	2180      	movs	r1, #128	; 0x80
1000b1ae:	0209      	lsls	r1, r1, #8
1000b1b0:	430a      	orrs	r2, r1
1000b1b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b1b6:	e17a      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1b8:	4b8c      	ldr	r3, [pc, #560]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b1ba:	6859      	ldr	r1, [r3, #4]
1000b1bc:	4a94      	ldr	r2, [pc, #592]	; (1000b410 <system_peripheral_reset+0x3b4>)
1000b1be:	400a      	ands	r2, r1
1000b1c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1c2:	685a      	ldr	r2, [r3, #4]
1000b1c4:	2180      	movs	r1, #128	; 0x80
1000b1c6:	0249      	lsls	r1, r1, #9
1000b1c8:	430a      	orrs	r2, r1
1000b1ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1cc:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b1ce:	e16e      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1d0:	4b86      	ldr	r3, [pc, #536]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b1d2:	6859      	ldr	r1, [r3, #4]
1000b1d4:	4a8f      	ldr	r2, [pc, #572]	; (1000b414 <system_peripheral_reset+0x3b8>)
1000b1d6:	400a      	ands	r2, r1
1000b1d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1da:	685a      	ldr	r2, [r3, #4]
1000b1dc:	2180      	movs	r1, #128	; 0x80
1000b1de:	0289      	lsls	r1, r1, #10
1000b1e0:	430a      	orrs	r2, r1
1000b1e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b1e6:	e162      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1e8:	4b80      	ldr	r3, [pc, #512]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b1ea:	6859      	ldr	r1, [r3, #4]
1000b1ec:	4a8a      	ldr	r2, [pc, #552]	; (1000b418 <system_peripheral_reset+0x3bc>)
1000b1ee:	400a      	ands	r2, r1
1000b1f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1f2:	685a      	ldr	r2, [r3, #4]
1000b1f4:	2180      	movs	r1, #128	; 0x80
1000b1f6:	02c9      	lsls	r1, r1, #11
1000b1f8:	430a      	orrs	r2, r1
1000b1fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1fc:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b1fe:	e156      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b200:	4b7a      	ldr	r3, [pc, #488]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b202:	6859      	ldr	r1, [r3, #4]
1000b204:	4a85      	ldr	r2, [pc, #532]	; (1000b41c <system_peripheral_reset+0x3c0>)
1000b206:	400a      	ands	r2, r1
1000b208:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b20a:	685a      	ldr	r2, [r3, #4]
1000b20c:	2180      	movs	r1, #128	; 0x80
1000b20e:	0309      	lsls	r1, r1, #12
1000b210:	430a      	orrs	r2, r1
1000b212:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b214:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b216:	e14a      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b218:	4b74      	ldr	r3, [pc, #464]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b21a:	6859      	ldr	r1, [r3, #4]
1000b21c:	4a80      	ldr	r2, [pc, #512]	; (1000b420 <system_peripheral_reset+0x3c4>)
1000b21e:	400a      	ands	r2, r1
1000b220:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b222:	685a      	ldr	r2, [r3, #4]
1000b224:	2180      	movs	r1, #128	; 0x80
1000b226:	0349      	lsls	r1, r1, #13
1000b228:	430a      	orrs	r2, r1
1000b22a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b22c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b22e:	e13e      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b230:	4b6e      	ldr	r3, [pc, #440]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b232:	6859      	ldr	r1, [r3, #4]
1000b234:	4a7b      	ldr	r2, [pc, #492]	; (1000b424 <system_peripheral_reset+0x3c8>)
1000b236:	400a      	ands	r2, r1
1000b238:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b23a:	685a      	ldr	r2, [r3, #4]
1000b23c:	2180      	movs	r1, #128	; 0x80
1000b23e:	0389      	lsls	r1, r1, #14
1000b240:	430a      	orrs	r2, r1
1000b242:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b244:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b246:	e132      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b248:	4b68      	ldr	r3, [pc, #416]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b24a:	6859      	ldr	r1, [r3, #4]
1000b24c:	4a76      	ldr	r2, [pc, #472]	; (1000b428 <system_peripheral_reset+0x3cc>)
1000b24e:	400a      	ands	r2, r1
1000b250:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b252:	685a      	ldr	r2, [r3, #4]
1000b254:	2180      	movs	r1, #128	; 0x80
1000b256:	03c9      	lsls	r1, r1, #15
1000b258:	430a      	orrs	r2, r1
1000b25a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b25c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b25e:	e126      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b260:	4b62      	ldr	r3, [pc, #392]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b262:	6859      	ldr	r1, [r3, #4]
1000b264:	4a71      	ldr	r2, [pc, #452]	; (1000b42c <system_peripheral_reset+0x3d0>)
1000b266:	400a      	ands	r2, r1
1000b268:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b26a:	685a      	ldr	r2, [r3, #4]
1000b26c:	2180      	movs	r1, #128	; 0x80
1000b26e:	0409      	lsls	r1, r1, #16
1000b270:	430a      	orrs	r2, r1
1000b272:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b274:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b276:	e11a      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b278:	4b5c      	ldr	r3, [pc, #368]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b27a:	6859      	ldr	r1, [r3, #4]
1000b27c:	4a6c      	ldr	r2, [pc, #432]	; (1000b430 <system_peripheral_reset+0x3d4>)
1000b27e:	400a      	ands	r2, r1
1000b280:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b282:	685a      	ldr	r2, [r3, #4]
1000b284:	2180      	movs	r1, #128	; 0x80
1000b286:	0449      	lsls	r1, r1, #17
1000b288:	430a      	orrs	r2, r1
1000b28a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b28c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b28e:	e10e      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b290:	4b56      	ldr	r3, [pc, #344]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b292:	6859      	ldr	r1, [r3, #4]
1000b294:	4a67      	ldr	r2, [pc, #412]	; (1000b434 <system_peripheral_reset+0x3d8>)
1000b296:	400a      	ands	r2, r1
1000b298:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b29a:	685a      	ldr	r2, [r3, #4]
1000b29c:	2180      	movs	r1, #128	; 0x80
1000b29e:	0489      	lsls	r1, r1, #18
1000b2a0:	430a      	orrs	r2, r1
1000b2a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b2a6:	e102      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2a8:	4b50      	ldr	r3, [pc, #320]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b2aa:	6859      	ldr	r1, [r3, #4]
1000b2ac:	4a62      	ldr	r2, [pc, #392]	; (1000b438 <system_peripheral_reset+0x3dc>)
1000b2ae:	400a      	ands	r2, r1
1000b2b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2b2:	685a      	ldr	r2, [r3, #4]
1000b2b4:	2180      	movs	r1, #128	; 0x80
1000b2b6:	04c9      	lsls	r1, r1, #19
1000b2b8:	430a      	orrs	r2, r1
1000b2ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2bc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b2be:	e0f6      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2c0:	4b4a      	ldr	r3, [pc, #296]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b2c2:	6859      	ldr	r1, [r3, #4]
1000b2c4:	4a5d      	ldr	r2, [pc, #372]	; (1000b43c <system_peripheral_reset+0x3e0>)
1000b2c6:	400a      	ands	r2, r1
1000b2c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2ca:	685a      	ldr	r2, [r3, #4]
1000b2cc:	2180      	movs	r1, #128	; 0x80
1000b2ce:	0509      	lsls	r1, r1, #20
1000b2d0:	430a      	orrs	r2, r1
1000b2d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b2d6:	e0ea      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2d8:	4b44      	ldr	r3, [pc, #272]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b2da:	6859      	ldr	r1, [r3, #4]
1000b2dc:	4a58      	ldr	r2, [pc, #352]	; (1000b440 <system_peripheral_reset+0x3e4>)
1000b2de:	400a      	ands	r2, r1
1000b2e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2e2:	685a      	ldr	r2, [r3, #4]
1000b2e4:	2180      	movs	r1, #128	; 0x80
1000b2e6:	0549      	lsls	r1, r1, #21
1000b2e8:	430a      	orrs	r2, r1
1000b2ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ec:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b2ee:	e0de      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2f0:	4b3e      	ldr	r3, [pc, #248]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b2f2:	6859      	ldr	r1, [r3, #4]
1000b2f4:	4a53      	ldr	r2, [pc, #332]	; (1000b444 <system_peripheral_reset+0x3e8>)
1000b2f6:	400a      	ands	r2, r1
1000b2f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2fa:	685a      	ldr	r2, [r3, #4]
1000b2fc:	2180      	movs	r1, #128	; 0x80
1000b2fe:	0589      	lsls	r1, r1, #22
1000b300:	430a      	orrs	r2, r1
1000b302:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b304:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b306:	e0d2      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b308:	4b38      	ldr	r3, [pc, #224]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b30a:	6859      	ldr	r1, [r3, #4]
1000b30c:	4a4e      	ldr	r2, [pc, #312]	; (1000b448 <system_peripheral_reset+0x3ec>)
1000b30e:	400a      	ands	r2, r1
1000b310:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b312:	685a      	ldr	r2, [r3, #4]
1000b314:	2180      	movs	r1, #128	; 0x80
1000b316:	05c9      	lsls	r1, r1, #23
1000b318:	430a      	orrs	r2, r1
1000b31a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b31c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b31e:	e0c6      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b320:	4a32      	ldr	r2, [pc, #200]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b322:	6853      	ldr	r3, [r2, #4]
1000b324:	005b      	lsls	r3, r3, #1
1000b326:	085b      	lsrs	r3, r3, #1
1000b328:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b32a:	6853      	ldr	r3, [r2, #4]
1000b32c:	2180      	movs	r1, #128	; 0x80
1000b32e:	0609      	lsls	r1, r1, #24
1000b330:	430b      	orrs	r3, r1
1000b332:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b334:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b336:	e0ba      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b338:	4b2c      	ldr	r3, [pc, #176]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b33a:	891a      	ldrh	r2, [r3, #8]
1000b33c:	2101      	movs	r1, #1
1000b33e:	438a      	bics	r2, r1
1000b340:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b342:	8919      	ldrh	r1, [r3, #8]
1000b344:	2201      	movs	r2, #1
1000b346:	430a      	orrs	r2, r1
1000b348:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b34a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b34c:	e0af      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b34e:	4b27      	ldr	r3, [pc, #156]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b350:	891a      	ldrh	r2, [r3, #8]
1000b352:	2102      	movs	r1, #2
1000b354:	438a      	bics	r2, r1
1000b356:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b358:	8919      	ldrh	r1, [r3, #8]
1000b35a:	2202      	movs	r2, #2
1000b35c:	430a      	orrs	r2, r1
1000b35e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b360:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b362:	e0a4      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b364:	4b21      	ldr	r3, [pc, #132]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b366:	891a      	ldrh	r2, [r3, #8]
1000b368:	2104      	movs	r1, #4
1000b36a:	438a      	bics	r2, r1
1000b36c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b36e:	8919      	ldrh	r1, [r3, #8]
1000b370:	2204      	movs	r2, #4
1000b372:	430a      	orrs	r2, r1
1000b374:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b376:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b378:	e099      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b37a:	4b1c      	ldr	r3, [pc, #112]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b37c:	891a      	ldrh	r2, [r3, #8]
1000b37e:	2108      	movs	r1, #8
1000b380:	438a      	bics	r2, r1
1000b382:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b384:	8919      	ldrh	r1, [r3, #8]
1000b386:	2208      	movs	r2, #8
1000b388:	430a      	orrs	r2, r1
1000b38a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b38c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b38e:	e08e      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b390:	4b16      	ldr	r3, [pc, #88]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b392:	891a      	ldrh	r2, [r3, #8]
1000b394:	2110      	movs	r1, #16
1000b396:	438a      	bics	r2, r1
1000b398:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b39a:	8919      	ldrh	r1, [r3, #8]
1000b39c:	2210      	movs	r2, #16
1000b39e:	430a      	orrs	r2, r1
1000b3a0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a2:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b3a4:	e083      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3a6:	4b11      	ldr	r3, [pc, #68]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b3a8:	891a      	ldrh	r2, [r3, #8]
1000b3aa:	2120      	movs	r1, #32
1000b3ac:	438a      	bics	r2, r1
1000b3ae:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3b0:	8919      	ldrh	r1, [r3, #8]
1000b3b2:	2220      	movs	r2, #32
1000b3b4:	430a      	orrs	r2, r1
1000b3b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3b8:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b3ba:	e078      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3bc:	4b0b      	ldr	r3, [pc, #44]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b3be:	891a      	ldrh	r2, [r3, #8]
1000b3c0:	2140      	movs	r1, #64	; 0x40
1000b3c2:	438a      	bics	r2, r1
1000b3c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3c6:	8919      	ldrh	r1, [r3, #8]
1000b3c8:	2240      	movs	r2, #64	; 0x40
1000b3ca:	430a      	orrs	r2, r1
1000b3cc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ce:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b3d0:	e06d      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3d2:	4b06      	ldr	r3, [pc, #24]	; (1000b3ec <system_peripheral_reset+0x390>)
1000b3d4:	891a      	ldrh	r2, [r3, #8]
1000b3d6:	2180      	movs	r1, #128	; 0x80
1000b3d8:	438a      	bics	r2, r1
1000b3da:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3dc:	8919      	ldrh	r1, [r3, #8]
1000b3de:	2280      	movs	r2, #128	; 0x80
1000b3e0:	430a      	orrs	r2, r1
1000b3e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b3e6:	e062      	b.n	1000b4ae <system_peripheral_reset+0x452>
1000b3e8:	10016100 	.word	0x10016100
1000b3ec:	4000b000 	.word	0x4000b000
1000b3f0:	fffffeff 	.word	0xfffffeff
1000b3f4:	fffffdff 	.word	0xfffffdff
1000b3f8:	fffffbff 	.word	0xfffffbff
1000b3fc:	fffff7ff 	.word	0xfffff7ff
1000b400:	ffffefff 	.word	0xffffefff
1000b404:	ffffdfff 	.word	0xffffdfff
1000b408:	ffffbfff 	.word	0xffffbfff
1000b40c:	ffff7fff 	.word	0xffff7fff
1000b410:	fffeffff 	.word	0xfffeffff
1000b414:	fffdffff 	.word	0xfffdffff
1000b418:	fffbffff 	.word	0xfffbffff
1000b41c:	fff7ffff 	.word	0xfff7ffff
1000b420:	ffefffff 	.word	0xffefffff
1000b424:	ffdfffff 	.word	0xffdfffff
1000b428:	ffbfffff 	.word	0xffbfffff
1000b42c:	ff7fffff 	.word	0xff7fffff
1000b430:	feffffff 	.word	0xfeffffff
1000b434:	fdffffff 	.word	0xfdffffff
1000b438:	fbffffff 	.word	0xfbffffff
1000b43c:	f7ffffff 	.word	0xf7ffffff
1000b440:	efffffff 	.word	0xefffffff
1000b444:	dfffffff 	.word	0xdfffffff
1000b448:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b44c:	4b18      	ldr	r3, [pc, #96]	; (1000b4b0 <system_peripheral_reset+0x454>)
1000b44e:	8919      	ldrh	r1, [r3, #8]
1000b450:	4a18      	ldr	r2, [pc, #96]	; (1000b4b4 <system_peripheral_reset+0x458>)
1000b452:	400a      	ands	r2, r1
1000b454:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b456:	8919      	ldrh	r1, [r3, #8]
1000b458:	2280      	movs	r2, #128	; 0x80
1000b45a:	0052      	lsls	r2, r2, #1
1000b45c:	430a      	orrs	r2, r1
1000b45e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b460:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b462:	e024      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b464:	4b12      	ldr	r3, [pc, #72]	; (1000b4b0 <system_peripheral_reset+0x454>)
1000b466:	8919      	ldrh	r1, [r3, #8]
1000b468:	4a13      	ldr	r2, [pc, #76]	; (1000b4b8 <system_peripheral_reset+0x45c>)
1000b46a:	400a      	ands	r2, r1
1000b46c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b46e:	8919      	ldrh	r1, [r3, #8]
1000b470:	2280      	movs	r2, #128	; 0x80
1000b472:	0092      	lsls	r2, r2, #2
1000b474:	430a      	orrs	r2, r1
1000b476:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b478:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b47a:	e018      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b47c:	4b0c      	ldr	r3, [pc, #48]	; (1000b4b0 <system_peripheral_reset+0x454>)
1000b47e:	8919      	ldrh	r1, [r3, #8]
1000b480:	4a0e      	ldr	r2, [pc, #56]	; (1000b4bc <system_peripheral_reset+0x460>)
1000b482:	400a      	ands	r2, r1
1000b484:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b486:	8919      	ldrh	r1, [r3, #8]
1000b488:	2280      	movs	r2, #128	; 0x80
1000b48a:	00d2      	lsls	r2, r2, #3
1000b48c:	430a      	orrs	r2, r1
1000b48e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b490:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b492:	e00c      	b.n	1000b4ae <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b494:	4b06      	ldr	r3, [pc, #24]	; (1000b4b0 <system_peripheral_reset+0x454>)
1000b496:	8919      	ldrh	r1, [r3, #8]
1000b498:	4a09      	ldr	r2, [pc, #36]	; (1000b4c0 <system_peripheral_reset+0x464>)
1000b49a:	400a      	ands	r2, r1
1000b49c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b49e:	8919      	ldrh	r1, [r3, #8]
1000b4a0:	2280      	movs	r2, #128	; 0x80
1000b4a2:	0112      	lsls	r2, r2, #4
1000b4a4:	430a      	orrs	r2, r1
1000b4a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4a8:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b4aa:	e000      	b.n	1000b4ae <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b4ac:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b4ae:	bd00      	pop	{pc}
1000b4b0:	4000b000 	.word	0x4000b000
1000b4b4:	fffffeff 	.word	0xfffffeff
1000b4b8:	fffffdff 	.word	0xfffffdff
1000b4bc:	fffffbff 	.word	0xfffffbff
1000b4c0:	fffff7ff 	.word	0xfffff7ff

1000b4c4 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b4c4:	2380      	movs	r3, #128	; 0x80
1000b4c6:	04db      	lsls	r3, r3, #19
1000b4c8:	469c      	mov	ip, r3
1000b4ca:	4460      	add	r0, ip
1000b4cc:	0080      	lsls	r0, r0, #2
1000b4ce:	6001      	str	r1, [r0, #0]
}
1000b4d0:	4770      	bx	lr
1000b4d2:	46c0      	nop			; (mov r8, r8)

1000b4d4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b4d4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b4d6:	4b20      	ldr	r3, [pc, #128]	; (1000b558 <uart_rx0_isr_handler+0x84>)
1000b4d8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b4da:	6823      	ldr	r3, [r4, #0]
1000b4dc:	7d1d      	ldrb	r5, [r3, #20]
1000b4de:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b4e0:	066a      	lsls	r2, r5, #25
1000b4e2:	d513      	bpl.n	1000b50c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b4e4:	211e      	movs	r1, #30
1000b4e6:	2222      	movs	r2, #34	; 0x22
1000b4e8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b4ea:	7e1a      	ldrb	r2, [r3, #24]
1000b4ec:	3123      	adds	r1, #35	; 0x23
1000b4ee:	438a      	bics	r2, r1
1000b4f0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b4f2:	2321      	movs	r3, #33	; 0x21
1000b4f4:	5ce3      	ldrb	r3, [r4, r3]
1000b4f6:	071b      	lsls	r3, r3, #28
1000b4f8:	d506      	bpl.n	1000b508 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b4fa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b4fc:	5ce3      	ldrb	r3, [r4, r3]
1000b4fe:	071b      	lsls	r3, r3, #28
1000b500:	d502      	bpl.n	1000b508 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b502:	0020      	movs	r0, r4
1000b504:	6923      	ldr	r3, [r4, #16]
1000b506:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b508:	6823      	ldr	r3, [r4, #0]
1000b50a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b50c:	07eb      	lsls	r3, r5, #31
1000b50e:	d522      	bpl.n	1000b556 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b510:	6823      	ldr	r3, [r4, #0]
1000b512:	7c1b      	ldrb	r3, [r3, #16]
1000b514:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b516:	6962      	ldr	r2, [r4, #20]
1000b518:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b51a:	6963      	ldr	r3, [r4, #20]
1000b51c:	3301      	adds	r3, #1
1000b51e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b520:	8ba3      	ldrh	r3, [r4, #28]
1000b522:	3b01      	subs	r3, #1
1000b524:	b29b      	uxth	r3, r3
1000b526:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b528:	8ba3      	ldrh	r3, [r4, #28]
1000b52a:	b29b      	uxth	r3, r3
1000b52c:	2b00      	cmp	r3, #0
1000b52e:	d112      	bne.n	1000b556 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b530:	3321      	adds	r3, #33	; 0x21
1000b532:	5ce3      	ldrb	r3, [r4, r3]
1000b534:	075b      	lsls	r3, r3, #29
1000b536:	d50e      	bpl.n	1000b556 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b538:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b53a:	5ce3      	ldrb	r3, [r4, r3]
1000b53c:	075b      	lsls	r3, r3, #29
1000b53e:	d50a      	bpl.n	1000b556 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b540:	2200      	movs	r2, #0
1000b542:	2322      	movs	r3, #34	; 0x22
1000b544:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b546:	6822      	ldr	r2, [r4, #0]
1000b548:	7e13      	ldrb	r3, [r2, #24]
1000b54a:	2101      	movs	r1, #1
1000b54c:	438b      	bics	r3, r1
1000b54e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b550:	68e3      	ldr	r3, [r4, #12]
1000b552:	0020      	movs	r0, r4
1000b554:	4798      	blx	r3
			}
		}
	}
}
1000b556:	bd70      	pop	{r4, r5, r6, pc}
1000b558:	10018a60 	.word	0x10018a60

1000b55c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b55c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b55e:	4b21      	ldr	r3, [pc, #132]	; (1000b5e4 <uart_tx0_isr_handler+0x88>)
1000b560:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b562:	6823      	ldr	r3, [r4, #0]
1000b564:	791d      	ldrb	r5, [r3, #4]
1000b566:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b568:	07ea      	lsls	r2, r5, #31
1000b56a:	d517      	bpl.n	1000b59c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b56c:	69a2      	ldr	r2, [r4, #24]
1000b56e:	7811      	ldrb	r1, [r2, #0]
1000b570:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b572:	3201      	adds	r2, #1
1000b574:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b576:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b578:	8be3      	ldrh	r3, [r4, #30]
1000b57a:	3b01      	subs	r3, #1
1000b57c:	b29b      	uxth	r3, r3
1000b57e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b580:	8be3      	ldrh	r3, [r4, #30]
1000b582:	b29b      	uxth	r3, r3
1000b584:	2b00      	cmp	r3, #0
1000b586:	d109      	bne.n	1000b59c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b588:	6822      	ldr	r2, [r4, #0]
1000b58a:	7a13      	ldrb	r3, [r2, #8]
1000b58c:	2101      	movs	r1, #1
1000b58e:	438b      	bics	r3, r1
1000b590:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b592:	6822      	ldr	r2, [r4, #0]
1000b594:	7a11      	ldrb	r1, [r2, #8]
1000b596:	2310      	movs	r3, #16
1000b598:	430b      	orrs	r3, r1
1000b59a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b59c:	06eb      	lsls	r3, r5, #27
1000b59e:	d512      	bpl.n	1000b5c6 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b5a0:	2321      	movs	r3, #33	; 0x21
1000b5a2:	5ce3      	ldrb	r3, [r4, r3]
1000b5a4:	07db      	lsls	r3, r3, #31
1000b5a6:	d50e      	bpl.n	1000b5c6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b5a8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b5aa:	5ce3      	ldrb	r3, [r4, r3]
1000b5ac:	07db      	lsls	r3, r3, #31
1000b5ae:	d50a      	bpl.n	1000b5c6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b5b0:	2200      	movs	r2, #0
1000b5b2:	2322      	movs	r3, #34	; 0x22
1000b5b4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b5b6:	6822      	ldr	r2, [r4, #0]
1000b5b8:	7a13      	ldrb	r3, [r2, #8]
1000b5ba:	2110      	movs	r1, #16
1000b5bc:	438b      	bics	r3, r1
1000b5be:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b5c0:	0020      	movs	r0, r4
1000b5c2:	6863      	ldr	r3, [r4, #4]
1000b5c4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b5c6:	06ab      	lsls	r3, r5, #26
1000b5c8:	d50a      	bpl.n	1000b5e0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b5ca:	2321      	movs	r3, #33	; 0x21
1000b5cc:	5ce3      	ldrb	r3, [r4, r3]
1000b5ce:	079b      	lsls	r3, r3, #30
1000b5d0:	d506      	bpl.n	1000b5e0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b5d2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b5d4:	5ce3      	ldrb	r3, [r4, r3]
1000b5d6:	079b      	lsls	r3, r3, #30
1000b5d8:	d502      	bpl.n	1000b5e0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b5da:	68a3      	ldr	r3, [r4, #8]
1000b5dc:	0020      	movs	r0, r4
1000b5de:	4798      	blx	r3
		}

	}
}
1000b5e0:	bd70      	pop	{r4, r5, r6, pc}
1000b5e2:	46c0      	nop			; (mov r8, r8)
1000b5e4:	10018a60 	.word	0x10018a60

1000b5e8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b5e8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b5ea:	4b20      	ldr	r3, [pc, #128]	; (1000b66c <uart_rx1_isr_handler+0x84>)
1000b5ec:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b5ee:	6823      	ldr	r3, [r4, #0]
1000b5f0:	7d1d      	ldrb	r5, [r3, #20]
1000b5f2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b5f4:	066a      	lsls	r2, r5, #25
1000b5f6:	d513      	bpl.n	1000b620 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b5f8:	211e      	movs	r1, #30
1000b5fa:	2222      	movs	r2, #34	; 0x22
1000b5fc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b5fe:	7e1a      	ldrb	r2, [r3, #24]
1000b600:	3123      	adds	r1, #35	; 0x23
1000b602:	438a      	bics	r2, r1
1000b604:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b606:	2321      	movs	r3, #33	; 0x21
1000b608:	5ce3      	ldrb	r3, [r4, r3]
1000b60a:	071b      	lsls	r3, r3, #28
1000b60c:	d506      	bpl.n	1000b61c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b60e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b610:	5ce3      	ldrb	r3, [r4, r3]
1000b612:	071b      	lsls	r3, r3, #28
1000b614:	d502      	bpl.n	1000b61c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b616:	0020      	movs	r0, r4
1000b618:	6923      	ldr	r3, [r4, #16]
1000b61a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b61c:	6823      	ldr	r3, [r4, #0]
1000b61e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b620:	07eb      	lsls	r3, r5, #31
1000b622:	d522      	bpl.n	1000b66a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b624:	6823      	ldr	r3, [r4, #0]
1000b626:	7c1b      	ldrb	r3, [r3, #16]
1000b628:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b62a:	6962      	ldr	r2, [r4, #20]
1000b62c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b62e:	6963      	ldr	r3, [r4, #20]
1000b630:	3301      	adds	r3, #1
1000b632:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b634:	8ba3      	ldrh	r3, [r4, #28]
1000b636:	3b01      	subs	r3, #1
1000b638:	b29b      	uxth	r3, r3
1000b63a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b63c:	8ba3      	ldrh	r3, [r4, #28]
1000b63e:	b29b      	uxth	r3, r3
1000b640:	2b00      	cmp	r3, #0
1000b642:	d112      	bne.n	1000b66a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b644:	3321      	adds	r3, #33	; 0x21
1000b646:	5ce3      	ldrb	r3, [r4, r3]
1000b648:	075b      	lsls	r3, r3, #29
1000b64a:	d50e      	bpl.n	1000b66a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b64c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b64e:	5ce3      	ldrb	r3, [r4, r3]
1000b650:	075b      	lsls	r3, r3, #29
1000b652:	d50a      	bpl.n	1000b66a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b654:	2200      	movs	r2, #0
1000b656:	2322      	movs	r3, #34	; 0x22
1000b658:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b65a:	6822      	ldr	r2, [r4, #0]
1000b65c:	7e13      	ldrb	r3, [r2, #24]
1000b65e:	2101      	movs	r1, #1
1000b660:	438b      	bics	r3, r1
1000b662:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b664:	68e3      	ldr	r3, [r4, #12]
1000b666:	0020      	movs	r0, r4
1000b668:	4798      	blx	r3
			}
		}
	}
}
1000b66a:	bd70      	pop	{r4, r5, r6, pc}
1000b66c:	10018a60 	.word	0x10018a60

1000b670 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b670:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b672:	4b21      	ldr	r3, [pc, #132]	; (1000b6f8 <uart_tx1_isr_handler+0x88>)
1000b674:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b676:	6823      	ldr	r3, [r4, #0]
1000b678:	791d      	ldrb	r5, [r3, #4]
1000b67a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b67c:	07ea      	lsls	r2, r5, #31
1000b67e:	d517      	bpl.n	1000b6b0 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b680:	69a2      	ldr	r2, [r4, #24]
1000b682:	7811      	ldrb	r1, [r2, #0]
1000b684:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b686:	3201      	adds	r2, #1
1000b688:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b68a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b68c:	8be3      	ldrh	r3, [r4, #30]
1000b68e:	3b01      	subs	r3, #1
1000b690:	b29b      	uxth	r3, r3
1000b692:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b694:	8be3      	ldrh	r3, [r4, #30]
1000b696:	b29b      	uxth	r3, r3
1000b698:	2b00      	cmp	r3, #0
1000b69a:	d109      	bne.n	1000b6b0 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b69c:	6822      	ldr	r2, [r4, #0]
1000b69e:	7a13      	ldrb	r3, [r2, #8]
1000b6a0:	2101      	movs	r1, #1
1000b6a2:	438b      	bics	r3, r1
1000b6a4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b6a6:	6822      	ldr	r2, [r4, #0]
1000b6a8:	7a11      	ldrb	r1, [r2, #8]
1000b6aa:	2310      	movs	r3, #16
1000b6ac:	430b      	orrs	r3, r1
1000b6ae:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b6b0:	06eb      	lsls	r3, r5, #27
1000b6b2:	d512      	bpl.n	1000b6da <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b6b4:	2321      	movs	r3, #33	; 0x21
1000b6b6:	5ce3      	ldrb	r3, [r4, r3]
1000b6b8:	07db      	lsls	r3, r3, #31
1000b6ba:	d50e      	bpl.n	1000b6da <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b6bc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b6be:	5ce3      	ldrb	r3, [r4, r3]
1000b6c0:	07db      	lsls	r3, r3, #31
1000b6c2:	d50a      	bpl.n	1000b6da <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b6c4:	2200      	movs	r2, #0
1000b6c6:	2322      	movs	r3, #34	; 0x22
1000b6c8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b6ca:	6822      	ldr	r2, [r4, #0]
1000b6cc:	7a13      	ldrb	r3, [r2, #8]
1000b6ce:	2110      	movs	r1, #16
1000b6d0:	438b      	bics	r3, r1
1000b6d2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b6d4:	0020      	movs	r0, r4
1000b6d6:	6863      	ldr	r3, [r4, #4]
1000b6d8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b6da:	06ab      	lsls	r3, r5, #26
1000b6dc:	d50a      	bpl.n	1000b6f4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b6de:	2321      	movs	r3, #33	; 0x21
1000b6e0:	5ce3      	ldrb	r3, [r4, r3]
1000b6e2:	079b      	lsls	r3, r3, #30
1000b6e4:	d506      	bpl.n	1000b6f4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b6e6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b6e8:	5ce3      	ldrb	r3, [r4, r3]
1000b6ea:	079b      	lsls	r3, r3, #30
1000b6ec:	d502      	bpl.n	1000b6f4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b6ee:	68a3      	ldr	r3, [r4, #8]
1000b6f0:	0020      	movs	r0, r4
1000b6f2:	4798      	blx	r3
		}

	}
}
1000b6f4:	bd70      	pop	{r4, r5, r6, pc}
1000b6f6:	46c0      	nop			; (mov r8, r8)
1000b6f8:	10018a60 	.word	0x10018a60

1000b6fc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b6fc:	23e1      	movs	r3, #225	; 0xe1
1000b6fe:	025b      	lsls	r3, r3, #9
1000b700:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b702:	2300      	movs	r3, #0
1000b704:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b706:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b708:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b70a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b70c:	3302      	adds	r3, #2
1000b70e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b710:	2203      	movs	r2, #3
1000b712:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b714:	3201      	adds	r2, #1
1000b716:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b718:	3201      	adds	r2, #1
1000b71a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b71c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b71e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b720:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b722:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b724:	4770      	bx	lr
1000b726:	46c0      	nop			; (mov r8, r8)

1000b728 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b72a:	464f      	mov	r7, r9
1000b72c:	4646      	mov	r6, r8
1000b72e:	b4c0      	push	{r6, r7}
1000b730:	0005      	movs	r5, r0
1000b732:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b734:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b736:	2300      	movs	r3, #0
1000b738:	6043      	str	r3, [r0, #4]
1000b73a:	6083      	str	r3, [r0, #8]
1000b73c:	60c3      	str	r3, [r0, #12]
1000b73e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b740:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b742:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b744:	2200      	movs	r2, #0
1000b746:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b748:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b74a:	3320      	adds	r3, #32
1000b74c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b74e:	3301      	adds	r3, #1
1000b750:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b752:	3301      	adds	r3, #1
1000b754:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b756:	4b55      	ldr	r3, [pc, #340]	; (1000b8ac <uart_init+0x184>)
1000b758:	4299      	cmp	r1, r3
1000b75a:	d118      	bne.n	1000b78e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b75c:	2009      	movs	r0, #9
1000b75e:	4c54      	ldr	r4, [pc, #336]	; (1000b8b0 <uart_init+0x188>)
1000b760:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b762:	200a      	movs	r0, #10
1000b764:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b766:	2009      	movs	r0, #9
1000b768:	4c52      	ldr	r4, [pc, #328]	; (1000b8b4 <uart_init+0x18c>)
1000b76a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b76c:	200a      	movs	r0, #10
1000b76e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b770:	4b51      	ldr	r3, [pc, #324]	; (1000b8b8 <uart_init+0x190>)
1000b772:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b774:	4951      	ldr	r1, [pc, #324]	; (1000b8bc <uart_init+0x194>)
1000b776:	2010      	movs	r0, #16
1000b778:	4c51      	ldr	r4, [pc, #324]	; (1000b8c0 <uart_init+0x198>)
1000b77a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b77c:	4951      	ldr	r1, [pc, #324]	; (1000b8c4 <uart_init+0x19c>)
1000b77e:	2011      	movs	r0, #17
1000b780:	47a0      	blx	r4
1000b782:	4b51      	ldr	r3, [pc, #324]	; (1000b8c8 <uart_init+0x1a0>)
1000b784:	2201      	movs	r2, #1
1000b786:	601a      	str	r2, [r3, #0]
1000b788:	3201      	adds	r2, #1
1000b78a:	601a      	str	r2, [r3, #0]
1000b78c:	e01a      	b.n	1000b7c4 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b78e:	4b4f      	ldr	r3, [pc, #316]	; (1000b8cc <uart_init+0x1a4>)
1000b790:	4299      	cmp	r1, r3
1000b792:	d117      	bne.n	1000b7c4 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b794:	200b      	movs	r0, #11
1000b796:	4c46      	ldr	r4, [pc, #280]	; (1000b8b0 <uart_init+0x188>)
1000b798:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b79a:	200c      	movs	r0, #12
1000b79c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b79e:	200b      	movs	r0, #11
1000b7a0:	4c44      	ldr	r4, [pc, #272]	; (1000b8b4 <uart_init+0x18c>)
1000b7a2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b7a4:	200c      	movs	r0, #12
1000b7a6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b7a8:	4b43      	ldr	r3, [pc, #268]	; (1000b8b8 <uart_init+0x190>)
1000b7aa:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b7ac:	4948      	ldr	r1, [pc, #288]	; (1000b8d0 <uart_init+0x1a8>)
1000b7ae:	2012      	movs	r0, #18
1000b7b0:	4c43      	ldr	r4, [pc, #268]	; (1000b8c0 <uart_init+0x198>)
1000b7b2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b7b4:	4947      	ldr	r1, [pc, #284]	; (1000b8d4 <uart_init+0x1ac>)
1000b7b6:	2013      	movs	r0, #19
1000b7b8:	47a0      	blx	r4
1000b7ba:	4b43      	ldr	r3, [pc, #268]	; (1000b8c8 <uart_init+0x1a0>)
1000b7bc:	2204      	movs	r2, #4
1000b7be:	601a      	str	r2, [r3, #0]
1000b7c0:	3204      	adds	r2, #4
1000b7c2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b7c4:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b7c6:	2204      	movs	r2, #4
1000b7c8:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b7ca:	2b00      	cmp	r3, #0
1000b7cc:	d152      	bne.n	1000b874 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b7ce:	3302      	adds	r3, #2
1000b7d0:	4698      	mov	r8, r3
1000b7d2:	e04f      	b.n	1000b874 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b7d4:	8a31      	ldrh	r1, [r6, #16]
1000b7d6:	ce01      	ldmia	r6!, {r0}
1000b7d8:	b2c0      	uxtb	r0, r0
1000b7da:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b7dc:	3401      	adds	r4, #1
1000b7de:	b2e4      	uxtb	r4, r4
1000b7e0:	4544      	cmp	r4, r8
1000b7e2:	d3f7      	bcc.n	1000b7d4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b7e4:	682b      	ldr	r3, [r5, #0]
1000b7e6:	7d1a      	ldrb	r2, [r3, #20]
1000b7e8:	07d2      	lsls	r2, r2, #31
1000b7ea:	d504      	bpl.n	1000b7f6 <uart_init+0xce>
1000b7ec:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b7ee:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b7f0:	7d1a      	ldrb	r2, [r3, #20]
1000b7f2:	420a      	tst	r2, r1
1000b7f4:	d1fb      	bne.n	1000b7ee <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b7f6:	2100      	movs	r1, #0
1000b7f8:	2220      	movs	r2, #32
1000b7fa:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b7fc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b7fe:	1e59      	subs	r1, r3, #1
1000b800:	418b      	sbcs	r3, r1
1000b802:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b804:	793b      	ldrb	r3, [r7, #4]
1000b806:	797a      	ldrb	r2, [r7, #5]
1000b808:	4313      	orrs	r3, r2
1000b80a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b80c:	79ba      	ldrb	r2, [r7, #6]
1000b80e:	2a02      	cmp	r2, #2
1000b810:	d00d      	beq.n	1000b82e <uart_init+0x106>
1000b812:	b2d1      	uxtb	r1, r2
1000b814:	2902      	cmp	r1, #2
1000b816:	d802      	bhi.n	1000b81e <uart_init+0xf6>
1000b818:	2a01      	cmp	r2, #1
1000b81a:	d005      	beq.n	1000b828 <uart_init+0x100>
1000b81c:	e00f      	b.n	1000b83e <uart_init+0x116>
1000b81e:	2a03      	cmp	r2, #3
1000b820:	d008      	beq.n	1000b834 <uart_init+0x10c>
1000b822:	2a04      	cmp	r2, #4
1000b824:	d009      	beq.n	1000b83a <uart_init+0x112>
1000b826:	e00a      	b.n	1000b83e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b828:	2202      	movs	r2, #2
1000b82a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b82c:	e007      	b.n	1000b83e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b82e:	2206      	movs	r2, #6
1000b830:	4313      	orrs	r3, r2
			break;
1000b832:	e004      	b.n	1000b83e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b834:	220a      	movs	r2, #10
1000b836:	4313      	orrs	r3, r2
			break;
1000b838:	e001      	b.n	1000b83e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b83a:	220e      	movs	r2, #14
1000b83c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b83e:	2220      	movs	r2, #32
1000b840:	6829      	ldr	r1, [r5, #0]
1000b842:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b844:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b846:	4b24      	ldr	r3, [pc, #144]	; (1000b8d8 <uart_init+0x1b0>)
1000b848:	4798      	blx	r3
1000b84a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b84c:	0031      	movs	r1, r6
1000b84e:	4b23      	ldr	r3, [pc, #140]	; (1000b8dc <uart_init+0x1b4>)
1000b850:	4798      	blx	r3
1000b852:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b854:	0400      	lsls	r0, r0, #16
1000b856:	0c00      	lsrs	r0, r0, #16
1000b858:	4370      	muls	r0, r6
1000b85a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b85c:	0931      	lsrs	r1, r6, #4
1000b85e:	4288      	cmp	r0, r1
1000b860:	d906      	bls.n	1000b870 <uart_init+0x148>
1000b862:	2300      	movs	r3, #0
		i++;
1000b864:	3301      	adds	r3, #1
1000b866:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b868:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b86a:	4288      	cmp	r0, r1
1000b86c:	d8fa      	bhi.n	1000b864 <uart_init+0x13c>
1000b86e:	e007      	b.n	1000b880 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b870:	2300      	movs	r3, #0
1000b872:	e005      	b.n	1000b880 <uart_init+0x158>
1000b874:	003e      	movs	r6, r7
1000b876:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b878:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b87a:	4b19      	ldr	r3, [pc, #100]	; (1000b8e0 <uart_init+0x1b8>)
1000b87c:	4699      	mov	r9, r3
1000b87e:	e7a9      	b.n	1000b7d4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b880:	2100      	movs	r1, #0
1000b882:	2028      	movs	r0, #40	; 0x28
1000b884:	682c      	ldr	r4, [r5, #0]
1000b886:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b888:	3301      	adds	r3, #1
1000b88a:	071b      	lsls	r3, r3, #28
1000b88c:	0f5b      	lsrs	r3, r3, #29
1000b88e:	00d2      	lsls	r2, r2, #3
1000b890:	4313      	orrs	r3, r2
1000b892:	b29b      	uxth	r3, r3
1000b894:	682a      	ldr	r2, [r5, #0]
1000b896:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b898:	682b      	ldr	r3, [r5, #0]
1000b89a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b89c:	682b      	ldr	r3, [r5, #0]
1000b89e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b8a0:	2000      	movs	r0, #0
1000b8a2:	bc0c      	pop	{r2, r3}
1000b8a4:	4690      	mov	r8, r2
1000b8a6:	4699      	mov	r9, r3
1000b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b8aa:	46c0      	nop			; (mov r8, r8)
1000b8ac:	40004000 	.word	0x40004000
1000b8b0:	1000b05d 	.word	0x1000b05d
1000b8b4:	1000a995 	.word	0x1000a995
1000b8b8:	10018a60 	.word	0x10018a60
1000b8bc:	1000b4d5 	.word	0x1000b4d5
1000b8c0:	1000b4c5 	.word	0x1000b4c5
1000b8c4:	1000b55d 	.word	0x1000b55d
1000b8c8:	e000e100 	.word	0xe000e100
1000b8cc:	40005000 	.word	0x40005000
1000b8d0:	1000b5e9 	.word	0x1000b5e9
1000b8d4:	1000b671 	.word	0x1000b671
1000b8d8:	1000a989 	.word	0x1000a989
1000b8dc:	10011d15 	.word	0x10011d15
1000b8e0:	1000a5e5 	.word	0x1000a5e5

1000b8e4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b8e4:	6802      	ldr	r2, [r0, #0]
1000b8e6:	2001      	movs	r0, #1
1000b8e8:	7913      	ldrb	r3, [r2, #4]
1000b8ea:	4203      	tst	r3, r0
1000b8ec:	d0fc      	beq.n	1000b8e8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b8ee:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b8f0:	2000      	movs	r0, #0
1000b8f2:	4770      	bx	lr

1000b8f4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b8f4:	6802      	ldr	r2, [r0, #0]
1000b8f6:	2001      	movs	r0, #1
1000b8f8:	7d13      	ldrb	r3, [r2, #20]
1000b8fa:	4203      	tst	r3, r0
1000b8fc:	d0fc      	beq.n	1000b8f8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b8fe:	7c13      	ldrb	r3, [r2, #16]
1000b900:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b902:	2000      	movs	r0, #0
1000b904:	4770      	bx	lr
1000b906:	46c0      	nop			; (mov r8, r8)

1000b908 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b908:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b90a:	2a00      	cmp	r2, #0
1000b90c:	d00d      	beq.n	1000b92a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b90e:	330b      	adds	r3, #11
1000b910:	5cc3      	ldrb	r3, [r0, r3]
1000b912:	b2db      	uxtb	r3, r3
1000b914:	2b05      	cmp	r3, #5
1000b916:	d008      	beq.n	1000b92a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b918:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b91a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b91c:	2205      	movs	r2, #5
1000b91e:	2322      	movs	r3, #34	; 0x22
1000b920:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b922:	6803      	ldr	r3, [r0, #0]
1000b924:	3a04      	subs	r2, #4
1000b926:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b928:	2300      	movs	r3, #0
}
1000b92a:	0018      	movs	r0, r3
1000b92c:	4770      	bx	lr
1000b92e:	46c0      	nop			; (mov r8, r8)

1000b930 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b930:	0093      	lsls	r3, r2, #2
1000b932:	18c3      	adds	r3, r0, r3
1000b934:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b936:	2120      	movs	r1, #32
1000b938:	2301      	movs	r3, #1
1000b93a:	4093      	lsls	r3, r2
1000b93c:	5c42      	ldrb	r2, [r0, r1]
1000b93e:	4313      	orrs	r3, r2
1000b940:	5443      	strb	r3, [r0, r1]
}
1000b942:	4770      	bx	lr

1000b944 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b944:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b946:	2221      	movs	r2, #33	; 0x21
1000b948:	2301      	movs	r3, #1
1000b94a:	408b      	lsls	r3, r1
1000b94c:	5c84      	ldrb	r4, [r0, r2]
1000b94e:	4323      	orrs	r3, r4
1000b950:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b952:	2901      	cmp	r1, #1
1000b954:	d104      	bne.n	1000b960 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b956:	6802      	ldr	r2, [r0, #0]
1000b958:	7a11      	ldrb	r1, [r2, #8]
1000b95a:	2320      	movs	r3, #32
1000b95c:	430b      	orrs	r3, r1
1000b95e:	7213      	strb	r3, [r2, #8]
	}
}
1000b960:	bd10      	pop	{r4, pc}
1000b962:	46c0      	nop			; (mov r8, r8)

1000b964 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b964:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b966:	2201      	movs	r2, #1
1000b968:	408a      	lsls	r2, r1
1000b96a:	2421      	movs	r4, #33	; 0x21
1000b96c:	5d03      	ldrb	r3, [r0, r4]
1000b96e:	4393      	bics	r3, r2
1000b970:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b972:	2901      	cmp	r1, #1
1000b974:	d104      	bne.n	1000b980 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b976:	6802      	ldr	r2, [r0, #0]
1000b978:	7a13      	ldrb	r3, [r2, #8]
1000b97a:	311f      	adds	r1, #31
1000b97c:	438b      	bics	r3, r1
1000b97e:	7213      	strb	r3, [r2, #8]
	}

}
1000b980:	bd10      	pop	{r4, pc}
1000b982:	46c0      	nop			; (mov r8, r8)

1000b984 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b984:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b986:	4647      	mov	r7, r8
1000b988:	b480      	push	{r7}
1000b98a:	000c      	movs	r4, r1
1000b98c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b98e:	2800      	cmp	r0, #0
1000b990:	d10d      	bne.n	1000b9ae <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b992:	2a00      	cmp	r2, #0
1000b994:	dd0e      	ble.n	1000b9b4 <_read+0x30>
1000b996:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b998:	4e08      	ldr	r6, [pc, #32]	; (1000b9bc <_read+0x38>)
1000b99a:	4d09      	ldr	r5, [pc, #36]	; (1000b9c0 <_read+0x3c>)
1000b99c:	6830      	ldr	r0, [r6, #0]
1000b99e:	0021      	movs	r1, r4
1000b9a0:	682b      	ldr	r3, [r5, #0]
1000b9a2:	4798      	blx	r3
		ptr++;
1000b9a4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b9a6:	42a7      	cmp	r7, r4
1000b9a8:	d1f8      	bne.n	1000b99c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b9aa:	4640      	mov	r0, r8
1000b9ac:	e003      	b.n	1000b9b6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b9ae:	2001      	movs	r0, #1
1000b9b0:	4240      	negs	r0, r0
1000b9b2:	e000      	b.n	1000b9b6 <_read+0x32>
	}

	for (; len > 0; --len) {
1000b9b4:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b9b6:	bc04      	pop	{r2}
1000b9b8:	4690      	mov	r8, r2
1000b9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9bc:	10018a70 	.word	0x10018a70
1000b9c0:	10018a68 	.word	0x10018a68

1000b9c4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b9c6:	4647      	mov	r7, r8
1000b9c8:	b480      	push	{r7}
1000b9ca:	000e      	movs	r6, r1
1000b9cc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b9ce:	3801      	subs	r0, #1
1000b9d0:	2802      	cmp	r0, #2
1000b9d2:	d811      	bhi.n	1000b9f8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b9d4:	2a00      	cmp	r2, #0
1000b9d6:	d012      	beq.n	1000b9fe <_write+0x3a>
1000b9d8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b9da:	4b0c      	ldr	r3, [pc, #48]	; (1000ba0c <_write+0x48>)
1000b9dc:	4698      	mov	r8, r3
1000b9de:	4f0c      	ldr	r7, [pc, #48]	; (1000ba10 <_write+0x4c>)
1000b9e0:	4643      	mov	r3, r8
1000b9e2:	6818      	ldr	r0, [r3, #0]
1000b9e4:	5d31      	ldrb	r1, [r6, r4]
1000b9e6:	683b      	ldr	r3, [r7, #0]
1000b9e8:	4798      	blx	r3
1000b9ea:	2800      	cmp	r0, #0
1000b9ec:	db09      	blt.n	1000ba02 <_write+0x3e>
			return -1;
		}
		++nChars;
1000b9ee:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b9f0:	42a5      	cmp	r5, r4
1000b9f2:	d1f5      	bne.n	1000b9e0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b9f4:	0020      	movs	r0, r4
1000b9f6:	e006      	b.n	1000ba06 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b9f8:	2001      	movs	r0, #1
1000b9fa:	4240      	negs	r0, r0
1000b9fc:	e003      	b.n	1000ba06 <_write+0x42>
	}

	for (; len != 0; --len) {
1000b9fe:	2000      	movs	r0, #0
1000ba00:	e001      	b.n	1000ba06 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000ba02:	2001      	movs	r0, #1
1000ba04:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000ba06:	bc04      	pop	{r2}
1000ba08:	4690      	mov	r8, r2
1000ba0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba0c:	10018a70 	.word	0x10018a70
1000ba10:	10018a6c 	.word	0x10018a6c

1000ba14 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000ba14:	2000      	movs	r0, #0
1000ba16:	4770      	bx	lr

1000ba18 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000ba18:	2000      	movs	r0, #0
1000ba1a:	4770      	bx	lr

1000ba1c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ba1c:	78c0      	ldrb	r0, [r0, #3]
1000ba1e:	2800      	cmp	r0, #0
1000ba20:	d000      	beq.n	1000ba24 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ba22:	20e2      	movs	r0, #226	; 0xe2
}
1000ba24:	4770      	bx	lr
1000ba26:	46c0      	nop			; (mov r8, r8)

1000ba28 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000ba28:	2000      	movs	r0, #0
1000ba2a:	4770      	bx	lr

1000ba2c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000ba2c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000ba2e:	7800      	ldrb	r0, [r0, #0]
1000ba30:	2800      	cmp	r0, #0
1000ba32:	d006      	beq.n	1000ba42 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ba34:	4803      	ldr	r0, [pc, #12]	; (1000ba44 <ble_scan_report_handler+0x18>)
1000ba36:	4b04      	ldr	r3, [pc, #16]	; (1000ba48 <ble_scan_report_handler+0x1c>)
1000ba38:	4798      	blx	r3
1000ba3a:	4804      	ldr	r0, [pc, #16]	; (1000ba4c <ble_scan_report_handler+0x20>)
1000ba3c:	4b04      	ldr	r3, [pc, #16]	; (1000ba50 <ble_scan_report_handler+0x24>)
1000ba3e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000ba40:	20e2      	movs	r0, #226	; 0xe2
}
1000ba42:	bd10      	pop	{r4, pc}
1000ba44:	10015bf0 	.word	0x10015bf0
1000ba48:	10014ca9 	.word	0x10014ca9
1000ba4c:	10016284 	.word	0x10016284
1000ba50:	10014b89 	.word	0x10014b89

1000ba54 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000ba54:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000ba56:	7800      	ldrb	r0, [r0, #0]
1000ba58:	2800      	cmp	r0, #0
1000ba5a:	d006      	beq.n	1000ba6a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000ba5c:	4803      	ldr	r0, [pc, #12]	; (1000ba6c <ble_adv_report_handler+0x18>)
1000ba5e:	4b04      	ldr	r3, [pc, #16]	; (1000ba70 <ble_adv_report_handler+0x1c>)
1000ba60:	4798      	blx	r3
1000ba62:	4804      	ldr	r0, [pc, #16]	; (1000ba74 <ble_adv_report_handler+0x20>)
1000ba64:	4b04      	ldr	r3, [pc, #16]	; (1000ba78 <ble_adv_report_handler+0x24>)
1000ba66:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000ba68:	20e2      	movs	r0, #226	; 0xe2
}
1000ba6a:	bd10      	pop	{r4, pc}
1000ba6c:	10015bf0 	.word	0x10015bf0
1000ba70:	10014ca9 	.word	0x10014ca9
1000ba74:	10016298 	.word	0x10016298
1000ba78:	10014b89 	.word	0x10014b89

1000ba7c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ba7c:	b510      	push	{r4, lr}
1000ba7e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ba80:	78c0      	ldrb	r0, [r0, #3]
1000ba82:	2800      	cmp	r0, #0
1000ba84:	d008      	beq.n	1000ba98 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ba86:	4805      	ldr	r0, [pc, #20]	; (1000ba9c <ble_mtu_changed_cmd_complete_handler+0x20>)
1000ba88:	4b05      	ldr	r3, [pc, #20]	; (1000baa0 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000ba8a:	4798      	blx	r3
1000ba8c:	78a2      	ldrb	r2, [r4, #2]
1000ba8e:	8821      	ldrh	r1, [r4, #0]
1000ba90:	4804      	ldr	r0, [pc, #16]	; (1000baa4 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000ba92:	4b05      	ldr	r3, [pc, #20]	; (1000baa8 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000ba94:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ba96:	20e2      	movs	r0, #226	; 0xe2
}
1000ba98:	bd10      	pop	{r4, pc}
1000ba9a:	46c0      	nop			; (mov r8, r8)
1000ba9c:	10015bf0 	.word	0x10015bf0
1000baa0:	10014ca9 	.word	0x10014ca9
1000baa4:	100162ac 	.word	0x100162ac
1000baa8:	10014b89 	.word	0x10014b89

1000baac <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000baae:	0004      	movs	r4, r0
1000bab0:	4b19      	ldr	r3, [pc, #100]	; (1000bb18 <ble_disconnected_state_handler+0x6c>)
1000bab2:	229b      	movs	r2, #155	; 0x9b
1000bab4:	0092      	lsls	r2, r2, #2
1000bab6:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000bab8:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000baba:	2600      	movs	r6, #0
1000babc:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000babe:	001a      	movs	r2, r3
1000bac0:	3a56      	subs	r2, #86	; 0x56
1000bac2:	8811      	ldrh	r1, [r2, #0]
1000bac4:	8822      	ldrh	r2, [r4, #0]
1000bac6:	4291      	cmp	r1, r2
1000bac8:	d119      	bne.n	1000bafe <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000baca:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bacc:	2a05      	cmp	r2, #5
1000bace:	d001      	beq.n	1000bad4 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bad0:	2a08      	cmp	r2, #8
1000bad2:	d101      	bne.n	1000bad8 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000bad4:	7007      	strb	r7, [r0, #0]
1000bad6:	e012      	b.n	1000bafe <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000bad8:	2a07      	cmp	r2, #7
1000bada:	d80f      	bhi.n	1000bafc <ble_disconnected_state_handler+0x50>
1000badc:	0092      	lsls	r2, r2, #2
1000bade:	490f      	ldr	r1, [pc, #60]	; (1000bb1c <ble_disconnected_state_handler+0x70>)
1000bae0:	588a      	ldr	r2, [r1, r2]
1000bae2:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bae4:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000bae6:	4a0e      	ldr	r2, [pc, #56]	; (1000bb20 <ble_disconnected_state_handler+0x74>)
1000bae8:	7812      	ldrb	r2, [r2, #0]
1000baea:	2a00      	cmp	r2, #0
1000baec:	d007      	beq.n	1000bafe <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000baee:	4a0c      	ldr	r2, [pc, #48]	; (1000bb20 <ble_disconnected_state_handler+0x74>)
1000baf0:	7812      	ldrb	r2, [r2, #0]
1000baf2:	3a01      	subs	r2, #1
1000baf4:	b2d2      	uxtb	r2, r2
1000baf6:	490a      	ldr	r1, [pc, #40]	; (1000bb20 <ble_disconnected_state_handler+0x74>)
1000baf8:	700a      	strb	r2, [r1, #0]
1000bafa:	e000      	b.n	1000bafe <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bafc:	7006      	strb	r6, [r0, #0]
1000bafe:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb00:	42ab      	cmp	r3, r5
1000bb02:	d1db      	bne.n	1000babc <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000bb04:	4807      	ldr	r0, [pc, #28]	; (1000bb24 <ble_disconnected_state_handler+0x78>)
1000bb06:	4b08      	ldr	r3, [pc, #32]	; (1000bb28 <ble_disconnected_state_handler+0x7c>)
1000bb08:	4798      	blx	r3
1000bb0a:	8822      	ldrh	r2, [r4, #0]
1000bb0c:	78a1      	ldrb	r1, [r4, #2]
1000bb0e:	4807      	ldr	r0, [pc, #28]	; (1000bb2c <ble_disconnected_state_handler+0x80>)
1000bb10:	4b07      	ldr	r3, [pc, #28]	; (1000bb30 <ble_disconnected_state_handler+0x84>)
1000bb12:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000bb14:	2000      	movs	r0, #0
1000bb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bb18:	10018aea 	.word	0x10018aea
1000bb1c:	10016210 	.word	0x10016210
1000bb20:	10018cf8 	.word	0x10018cf8
1000bb24:	10015bf0 	.word	0x10015bf0
1000bb28:	10014ca9 	.word	0x10014ca9
1000bb2c:	100162e4 	.word	0x100162e4
1000bb30:	10014b89 	.word	0x10014b89

1000bb34 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bb36:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000bb38:	8801      	ldrh	r1, [r0, #0]
1000bb3a:	4b28      	ldr	r3, [pc, #160]	; (1000bbdc <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb3c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000bb3e:	891a      	ldrh	r2, [r3, #8]
1000bb40:	428a      	cmp	r2, r1
1000bb42:	d104      	bne.n	1000bb4e <ble_encryption_status_change_handler+0x1a>
1000bb44:	001a      	movs	r2, r3
1000bb46:	325e      	adds	r2, #94	; 0x5e
1000bb48:	7812      	ldrb	r2, [r2, #0]
1000bb4a:	2a06      	cmp	r2, #6
1000bb4c:	d02e      	beq.n	1000bbac <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb4e:	3401      	adds	r4, #1
1000bb50:	b2e4      	uxtb	r4, r4
1000bb52:	337c      	adds	r3, #124	; 0x7c
1000bb54:	2c05      	cmp	r4, #5
1000bb56:	d1f2      	bne.n	1000bb3e <ble_encryption_status_change_handler+0xa>
1000bb58:	e039      	b.n	1000bbce <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000bb5a:	4920      	ldr	r1, [pc, #128]	; (1000bbdc <ble_encryption_status_change_handler+0xa8>)
1000bb5c:	0163      	lsls	r3, r4, #5
1000bb5e:	1b1a      	subs	r2, r3, r4
1000bb60:	0092      	lsls	r2, r2, #2
1000bb62:	188a      	adds	r2, r1, r2
1000bb64:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000bb66:	0014      	movs	r4, r2
1000bb68:	345e      	adds	r4, #94	; 0x5e
1000bb6a:	2307      	movs	r3, #7
1000bb6c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000bb6e:	481c      	ldr	r0, [pc, #112]	; (1000bbe0 <ble_encryption_status_change_handler+0xac>)
1000bb70:	4b1c      	ldr	r3, [pc, #112]	; (1000bbe4 <ble_encryption_status_change_handler+0xb0>)
1000bb72:	4798      	blx	r3
1000bb74:	481c      	ldr	r0, [pc, #112]	; (1000bbe8 <ble_encryption_status_change_handler+0xb4>)
1000bb76:	4b1d      	ldr	r3, [pc, #116]	; (1000bbec <ble_encryption_status_change_handler+0xb8>)
1000bb78:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bb7a:	25e2      	movs	r5, #226	; 0xe2
1000bb7c:	e02b      	b.n	1000bbd6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000bb7e:	4818      	ldr	r0, [pc, #96]	; (1000bbe0 <ble_encryption_status_change_handler+0xac>)
1000bb80:	4b18      	ldr	r3, [pc, #96]	; (1000bbe4 <ble_encryption_status_change_handler+0xb0>)
1000bb82:	4798      	blx	r3
1000bb84:	481a      	ldr	r0, [pc, #104]	; (1000bbf0 <ble_encryption_status_change_handler+0xbc>)
1000bb86:	4b19      	ldr	r3, [pc, #100]	; (1000bbec <ble_encryption_status_change_handler+0xb8>)
1000bb88:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000bb8a:	4914      	ldr	r1, [pc, #80]	; (1000bbdc <ble_encryption_status_change_handler+0xa8>)
1000bb8c:	0163      	lsls	r3, r4, #5
1000bb8e:	1b1a      	subs	r2, r3, r4
1000bb90:	0092      	lsls	r2, r2, #2
1000bb92:	188a      	adds	r2, r1, r2
1000bb94:	0010      	movs	r0, r2
1000bb96:	305e      	adds	r0, #94	; 0x5e
1000bb98:	2708      	movs	r7, #8
1000bb9a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000bb9c:	78f0      	ldrb	r0, [r6, #3]
1000bb9e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000bba0:	78b2      	ldrb	r2, [r6, #2]
1000bba2:	1b1c      	subs	r4, r3, r4
1000bba4:	00a4      	lsls	r4, r4, #2
1000bba6:	190c      	adds	r4, r1, r4
1000bba8:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000bbaa:	e014      	b.n	1000bbd6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bbac:	78b5      	ldrb	r5, [r6, #2]
1000bbae:	2d00      	cmp	r5, #0
1000bbb0:	d0e5      	beq.n	1000bb7e <ble_encryption_status_change_handler+0x4a>
1000bbb2:	e7d2      	b.n	1000bb5a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000bbb4:	4e0a      	ldr	r6, [pc, #40]	; (1000bbe0 <ble_encryption_status_change_handler+0xac>)
1000bbb6:	0030      	movs	r0, r6
1000bbb8:	4d0a      	ldr	r5, [pc, #40]	; (1000bbe4 <ble_encryption_status_change_handler+0xb0>)
1000bbba:	47a8      	blx	r5
1000bbbc:	480c      	ldr	r0, [pc, #48]	; (1000bbf0 <ble_encryption_status_change_handler+0xbc>)
1000bbbe:	4c0b      	ldr	r4, [pc, #44]	; (1000bbec <ble_encryption_status_change_handler+0xb8>)
1000bbc0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000bbc2:	0030      	movs	r0, r6
1000bbc4:	47a8      	blx	r5
1000bbc6:	480b      	ldr	r0, [pc, #44]	; (1000bbf4 <ble_encryption_status_change_handler+0xc0>)
1000bbc8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bbca:	25e2      	movs	r5, #226	; 0xe2
1000bbcc:	e003      	b.n	1000bbd6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bbce:	78b5      	ldrb	r5, [r6, #2]
1000bbd0:	2d00      	cmp	r5, #0
1000bbd2:	d1c2      	bne.n	1000bb5a <ble_encryption_status_change_handler+0x26>
1000bbd4:	e7ee      	b.n	1000bbb4 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000bbd6:	0028      	movs	r0, r5
1000bbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bbda:	46c0      	nop			; (mov r8, r8)
1000bbdc:	10018a8c 	.word	0x10018a8c
1000bbe0:	10015bf0 	.word	0x10015bf0
1000bbe4:	10014ca9 	.word	0x10014ca9
1000bbe8:	10016314 	.word	0x10016314
1000bbec:	10014b89 	.word	0x10014b89
1000bbf0:	10016328 	.word	0x10016328
1000bbf4:	1001634c 	.word	0x1001634c

1000bbf8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000bbf8:	b510      	push	{r4, lr}
1000bbfa:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000bbfc:	4b15      	ldr	r3, [pc, #84]	; (1000bc54 <ble_scan_info_handler+0x5c>)
1000bbfe:	781b      	ldrb	r3, [r3, #0]
1000bc00:	b2db      	uxtb	r3, r3
1000bc02:	2b13      	cmp	r3, #19
1000bc04:	d812      	bhi.n	1000bc2c <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000bc06:	4c13      	ldr	r4, [pc, #76]	; (1000bc54 <ble_scan_info_handler+0x5c>)
1000bc08:	7823      	ldrb	r3, [r4, #0]
1000bc0a:	b2db      	uxtb	r3, r3
1000bc0c:	0098      	lsls	r0, r3, #2
1000bc0e:	18c0      	adds	r0, r0, r3
1000bc10:	00c0      	lsls	r0, r0, #3
1000bc12:	18c3      	adds	r3, r0, r3
1000bc14:	4810      	ldr	r0, [pc, #64]	; (1000bc58 <ble_scan_info_handler+0x60>)
1000bc16:	1818      	adds	r0, r3, r0
1000bc18:	2229      	movs	r2, #41	; 0x29
1000bc1a:	4b10      	ldr	r3, [pc, #64]	; (1000bc5c <ble_scan_info_handler+0x64>)
1000bc1c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bc1e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000bc20:	7823      	ldrb	r3, [r4, #0]
1000bc22:	3301      	adds	r3, #1
1000bc24:	b2db      	uxtb	r3, r3
1000bc26:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000bc28:	2300      	movs	r3, #0
1000bc2a:	e011      	b.n	1000bc50 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000bc2c:	480c      	ldr	r0, [pc, #48]	; (1000bc60 <ble_scan_info_handler+0x68>)
1000bc2e:	4b0d      	ldr	r3, [pc, #52]	; (1000bc64 <ble_scan_info_handler+0x6c>)
1000bc30:	4798      	blx	r3
1000bc32:	480d      	ldr	r0, [pc, #52]	; (1000bc68 <ble_scan_info_handler+0x70>)
1000bc34:	4b0d      	ldr	r3, [pc, #52]	; (1000bc6c <ble_scan_info_handler+0x74>)
1000bc36:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bc38:	4b0d      	ldr	r3, [pc, #52]	; (1000bc70 <ble_scan_info_handler+0x78>)
1000bc3a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bc3c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bc3e:	2800      	cmp	r0, #0
1000bc40:	d006      	beq.n	1000bc50 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000bc42:	4807      	ldr	r0, [pc, #28]	; (1000bc60 <ble_scan_info_handler+0x68>)
1000bc44:	4b07      	ldr	r3, [pc, #28]	; (1000bc64 <ble_scan_info_handler+0x6c>)
1000bc46:	4798      	blx	r3
1000bc48:	480a      	ldr	r0, [pc, #40]	; (1000bc74 <ble_scan_info_handler+0x7c>)
1000bc4a:	4b08      	ldr	r3, [pc, #32]	; (1000bc6c <ble_scan_info_handler+0x74>)
1000bc4c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bc4e:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000bc50:	0018      	movs	r0, r3
1000bc52:	bd10      	pop	{r4, pc}
1000bc54:	10017564 	.word	0x10017564
1000bc58:	10018d70 	.word	0x10018d70
1000bc5c:	10014a2f 	.word	0x10014a2f
1000bc60:	10015bf0 	.word	0x10015bf0
1000bc64:	10014ca9 	.word	0x10014ca9
1000bc68:	10016374 	.word	0x10016374
1000bc6c:	10014b89 	.word	0x10014b89
1000bc70:	1000e4f5 	.word	0x1000e4f5
1000bc74:	100163ac 	.word	0x100163ac

1000bc78 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bc7a:	464f      	mov	r7, r9
1000bc7c:	4646      	mov	r6, r8
1000bc7e:	b4c0      	push	{r6, r7}
1000bc80:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bc82:	8841      	ldrh	r1, [r0, #2]
1000bc84:	4b3a      	ldr	r3, [pc, #232]	; (1000bd70 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc86:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bc88:	891a      	ldrh	r2, [r3, #8]
1000bc8a:	428a      	cmp	r2, r1
1000bc8c:	d104      	bne.n	1000bc98 <ble_pair_done_handler+0x20>
1000bc8e:	001a      	movs	r2, r3
1000bc90:	325e      	adds	r2, #94	; 0x5e
1000bc92:	7812      	ldrb	r2, [r2, #0]
1000bc94:	2a03      	cmp	r2, #3
1000bc96:	d062      	beq.n	1000bd5e <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc98:	3401      	adds	r4, #1
1000bc9a:	b2e4      	uxtb	r4, r4
1000bc9c:	337c      	adds	r3, #124	; 0x7c
1000bc9e:	2c05      	cmp	r4, #5
1000bca0:	d1f2      	bne.n	1000bc88 <ble_pair_done_handler+0x10>
1000bca2:	e02b      	b.n	1000bcfc <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000bca4:	0163      	lsls	r3, r4, #5
1000bca6:	1b1c      	subs	r4, r3, r4
1000bca8:	00a4      	lsls	r4, r4, #2
1000bcaa:	4b31      	ldr	r3, [pc, #196]	; (1000bd70 <ble_pair_done_handler+0xf8>)
1000bcac:	191c      	adds	r4, r3, r4
1000bcae:	345e      	adds	r4, #94	; 0x5e
1000bcb0:	7823      	ldrb	r3, [r4, #0]
1000bcb2:	2b01      	cmp	r3, #1
1000bcb4:	d913      	bls.n	1000bcde <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000bcb6:	482f      	ldr	r0, [pc, #188]	; (1000bd74 <ble_pair_done_handler+0xfc>)
1000bcb8:	4b2f      	ldr	r3, [pc, #188]	; (1000bd78 <ble_pair_done_handler+0x100>)
1000bcba:	4798      	blx	r3
1000bcbc:	482f      	ldr	r0, [pc, #188]	; (1000bd7c <ble_pair_done_handler+0x104>)
1000bcbe:	4b30      	ldr	r3, [pc, #192]	; (1000bd80 <ble_pair_done_handler+0x108>)
1000bcc0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000bcc2:	8868      	ldrh	r0, [r5, #2]
1000bcc4:	2113      	movs	r1, #19
1000bcc6:	4b2f      	ldr	r3, [pc, #188]	; (1000bd84 <ble_pair_done_handler+0x10c>)
1000bcc8:	4798      	blx	r3
1000bcca:	1e06      	subs	r6, r0, #0
1000bccc:	d04b      	beq.n	1000bd66 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000bcce:	4829      	ldr	r0, [pc, #164]	; (1000bd74 <ble_pair_done_handler+0xfc>)
1000bcd0:	4b29      	ldr	r3, [pc, #164]	; (1000bd78 <ble_pair_done_handler+0x100>)
1000bcd2:	4798      	blx	r3
1000bcd4:	482c      	ldr	r0, [pc, #176]	; (1000bd88 <ble_pair_done_handler+0x110>)
1000bcd6:	4b2a      	ldr	r3, [pc, #168]	; (1000bd80 <ble_pair_done_handler+0x108>)
1000bcd8:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000bcda:	26e2      	movs	r6, #226	; 0xe2
1000bcdc:	e043      	b.n	1000bd66 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000bcde:	2600      	movs	r6, #0
1000bce0:	e041      	b.n	1000bd66 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bce2:	4e24      	ldr	r6, [pc, #144]	; (1000bd74 <ble_pair_done_handler+0xfc>)
1000bce4:	0030      	movs	r0, r6
1000bce6:	4d24      	ldr	r5, [pc, #144]	; (1000bd78 <ble_pair_done_handler+0x100>)
1000bce8:	47a8      	blx	r5
1000bcea:	4828      	ldr	r0, [pc, #160]	; (1000bd8c <ble_pair_done_handler+0x114>)
1000bcec:	4c24      	ldr	r4, [pc, #144]	; (1000bd80 <ble_pair_done_handler+0x108>)
1000bcee:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000bcf0:	0030      	movs	r0, r6
1000bcf2:	47a8      	blx	r5
1000bcf4:	4826      	ldr	r0, [pc, #152]	; (1000bd90 <ble_pair_done_handler+0x118>)
1000bcf6:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bcf8:	26e2      	movs	r6, #226	; 0xe2
1000bcfa:	e034      	b.n	1000bd66 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bcfc:	792b      	ldrb	r3, [r5, #4]
1000bcfe:	2b00      	cmp	r3, #0
1000bd00:	d1d0      	bne.n	1000bca4 <ble_pair_done_handler+0x2c>
1000bd02:	e7ee      	b.n	1000bce2 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bd04:	481b      	ldr	r0, [pc, #108]	; (1000bd74 <ble_pair_done_handler+0xfc>)
1000bd06:	4b1c      	ldr	r3, [pc, #112]	; (1000bd78 <ble_pair_done_handler+0x100>)
1000bd08:	4798      	blx	r3
1000bd0a:	4820      	ldr	r0, [pc, #128]	; (1000bd8c <ble_pair_done_handler+0x114>)
1000bd0c:	4b1c      	ldr	r3, [pc, #112]	; (1000bd80 <ble_pair_done_handler+0x108>)
1000bd0e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000bd10:	782a      	ldrb	r2, [r5, #0]
1000bd12:	4b17      	ldr	r3, [pc, #92]	; (1000bd70 <ble_pair_done_handler+0xf8>)
1000bd14:	4699      	mov	r9, r3
1000bd16:	0167      	lsls	r7, r4, #5
1000bd18:	1b3b      	subs	r3, r7, r4
1000bd1a:	009b      	lsls	r3, r3, #2
1000bd1c:	444b      	add	r3, r9
1000bd1e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000bd20:	792a      	ldrb	r2, [r5, #4]
1000bd22:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000bd24:	335e      	adds	r3, #94	; 0x5e
1000bd26:	2205      	movs	r2, #5
1000bd28:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000bd2a:	1b38      	subs	r0, r7, r4
1000bd2c:	0080      	lsls	r0, r0, #2
1000bd2e:	4448      	add	r0, r9
1000bd30:	3036      	adds	r0, #54	; 0x36
1000bd32:	0029      	movs	r1, r5
1000bd34:	3122      	adds	r1, #34	; 0x22
1000bd36:	320b      	adds	r2, #11
1000bd38:	4b16      	ldr	r3, [pc, #88]	; (1000bd94 <ble_pair_done_handler+0x11c>)
1000bd3a:	4698      	mov	r8, r3
1000bd3c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000bd3e:	1b38      	subs	r0, r7, r4
1000bd40:	0080      	lsls	r0, r0, #2
1000bd42:	4448      	add	r0, r9
1000bd44:	3046      	adds	r0, #70	; 0x46
1000bd46:	0029      	movs	r1, r5
1000bd48:	3132      	adds	r1, #50	; 0x32
1000bd4a:	2217      	movs	r2, #23
1000bd4c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000bd4e:	1b38      	subs	r0, r7, r4
1000bd50:	0080      	lsls	r0, r0, #2
1000bd52:	4448      	add	r0, r9
1000bd54:	301a      	adds	r0, #26
1000bd56:	1da9      	adds	r1, r5, #6
1000bd58:	221c      	movs	r2, #28
1000bd5a:	47c0      	blx	r8
1000bd5c:	e003      	b.n	1000bd66 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bd5e:	792e      	ldrb	r6, [r5, #4]
1000bd60:	2e00      	cmp	r6, #0
1000bd62:	d0cf      	beq.n	1000bd04 <ble_pair_done_handler+0x8c>
1000bd64:	e79e      	b.n	1000bca4 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000bd66:	0030      	movs	r0, r6
1000bd68:	bc0c      	pop	{r2, r3}
1000bd6a:	4690      	mov	r8, r2
1000bd6c:	4699      	mov	r9, r3
1000bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bd70:	10018a8c 	.word	0x10018a8c
1000bd74:	10015bf0 	.word	0x10015bf0
1000bd78:	10014ca9 	.word	0x10014ca9
1000bd7c:	100163c4 	.word	0x100163c4
1000bd80:	10014b89 	.word	0x10014b89
1000bd84:	1000e515 	.word	0x1000e515
1000bd88:	100163e4 	.word	0x100163e4
1000bd8c:	10016400 	.word	0x10016400
1000bd90:	1001642c 	.word	0x1001642c
1000bd94:	10014a2f 	.word	0x10014a2f

1000bd98 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000bd98:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000bd9a:	8800      	ldrh	r0, [r0, #0]
1000bd9c:	2378      	movs	r3, #120	; 0x78
1000bd9e:	2201      	movs	r2, #1
1000bda0:	2101      	movs	r1, #1
1000bda2:	4c02      	ldr	r4, [pc, #8]	; (1000bdac <ble_conn_param_update_req+0x14>)
1000bda4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000bda6:	2000      	movs	r0, #0
1000bda8:	bd10      	pop	{r4, pc}
1000bdaa:	46c0      	nop			; (mov r8, r8)
1000bdac:	1000e535 	.word	0x1000e535

1000bdb0 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000bdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdb2:	4657      	mov	r7, sl
1000bdb4:	464e      	mov	r6, r9
1000bdb6:	4645      	mov	r5, r8
1000bdb8:	b4e0      	push	{r5, r6, r7}
1000bdba:	b084      	sub	sp, #16
1000bdbc:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000bdbe:	2209      	movs	r2, #9
1000bdc0:	2100      	movs	r1, #0
1000bdc2:	a801      	add	r0, sp, #4
1000bdc4:	4b6a      	ldr	r3, [pc, #424]	; (1000bf70 <ble_slave_security_request_handler+0x1c0>)
1000bdc6:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bdc8:	8825      	ldrh	r5, [r4, #0]
1000bdca:	496a      	ldr	r1, [pc, #424]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bdcc:	000a      	movs	r2, r1
1000bdce:	2300      	movs	r3, #0
1000bdd0:	8910      	ldrh	r0, [r2, #8]
1000bdd2:	42a8      	cmp	r0, r5
1000bdd4:	d116      	bne.n	1000be04 <ble_slave_security_request_handler+0x54>
1000bdd6:	0010      	movs	r0, r2
1000bdd8:	305e      	adds	r0, #94	; 0x5e
1000bdda:	7800      	ldrb	r0, [r0, #0]
1000bddc:	2802      	cmp	r0, #2
1000bdde:	d111      	bne.n	1000be04 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000bde0:	4864      	ldr	r0, [pc, #400]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bde2:	015a      	lsls	r2, r3, #5
1000bde4:	1ad6      	subs	r6, r2, r3
1000bde6:	00b6      	lsls	r6, r6, #2
1000bde8:	1986      	adds	r6, r0, r6
1000bdea:	365e      	adds	r6, #94	; 0x5e
1000bdec:	2206      	movs	r2, #6
1000bdee:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000bdf0:	32f9      	adds	r2, #249	; 0xf9
1000bdf2:	4013      	ands	r3, r2
1000bdf4:	015a      	lsls	r2, r3, #5
1000bdf6:	1ad2      	subs	r2, r2, r3
1000bdf8:	0092      	lsls	r2, r2, #2
1000bdfa:	1882      	adds	r2, r0, r2
1000bdfc:	7d12      	ldrb	r2, [r2, #20]
1000bdfe:	07d0      	lsls	r0, r2, #31
1000be00:	d405      	bmi.n	1000be0e <ble_slave_security_request_handler+0x5e>
1000be02:	e01b      	b.n	1000be3c <ble_slave_security_request_handler+0x8c>
1000be04:	3301      	adds	r3, #1
1000be06:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be08:	2b05      	cmp	r3, #5
1000be0a:	d1e1      	bne.n	1000bdd0 <ble_slave_security_request_handler+0x20>
1000be0c:	e01e      	b.n	1000be4c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000be0e:	78e0      	ldrb	r0, [r4, #3]
1000be10:	2800      	cmp	r0, #0
1000be12:	d013      	beq.n	1000be3c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000be14:	0159      	lsls	r1, r3, #5
1000be16:	1ac9      	subs	r1, r1, r3
1000be18:	008b      	lsls	r3, r1, #2
1000be1a:	4956      	ldr	r1, [pc, #344]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000be1c:	18c9      	adds	r1, r1, r3
1000be1e:	311a      	adds	r1, #26
1000be20:	8820      	ldrh	r0, [r4, #0]
1000be22:	4b55      	ldr	r3, [pc, #340]	; (1000bf78 <ble_slave_security_request_handler+0x1c8>)
1000be24:	4798      	blx	r3
1000be26:	2800      	cmp	r0, #0
1000be28:	d100      	bne.n	1000be2c <ble_slave_security_request_handler+0x7c>
1000be2a:	e09b      	b.n	1000bf64 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000be2c:	4853      	ldr	r0, [pc, #332]	; (1000bf7c <ble_slave_security_request_handler+0x1cc>)
1000be2e:	4b54      	ldr	r3, [pc, #336]	; (1000bf80 <ble_slave_security_request_handler+0x1d0>)
1000be30:	4798      	blx	r3
1000be32:	4854      	ldr	r0, [pc, #336]	; (1000bf84 <ble_slave_security_request_handler+0x1d4>)
1000be34:	4b54      	ldr	r3, [pc, #336]	; (1000bf88 <ble_slave_security_request_handler+0x1d8>)
1000be36:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000be38:	20e2      	movs	r0, #226	; 0xe2
1000be3a:	e093      	b.n	1000bf64 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000be3c:	015a      	lsls	r2, r3, #5
1000be3e:	1ad3      	subs	r3, r2, r3
1000be40:	009b      	lsls	r3, r3, #2
1000be42:	4a4c      	ldr	r2, [pc, #304]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000be44:	18d3      	adds	r3, r2, r3
1000be46:	335e      	adds	r3, #94	; 0x5e
1000be48:	2202      	movs	r2, #2
1000be4a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000be4c:	8825      	ldrh	r5, [r4, #0]
1000be4e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be50:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000be52:	0016      	movs	r6, r2
1000be54:	8908      	ldrh	r0, [r1, #8]
1000be56:	42a8      	cmp	r0, r5
1000be58:	d10d      	bne.n	1000be76 <ble_slave_security_request_handler+0xc6>
1000be5a:	0008      	movs	r0, r1
1000be5c:	305e      	adds	r0, #94	; 0x5e
1000be5e:	7800      	ldrb	r0, [r0, #0]
1000be60:	2802      	cmp	r0, #2
1000be62:	d108      	bne.n	1000be76 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000be64:	0152      	lsls	r2, r2, #5
1000be66:	1b92      	subs	r2, r2, r6
1000be68:	0096      	lsls	r6, r2, #2
1000be6a:	4a42      	ldr	r2, [pc, #264]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000be6c:	1992      	adds	r2, r2, r6
1000be6e:	325e      	adds	r2, #94	; 0x5e
1000be70:	2103      	movs	r1, #3
1000be72:	7011      	strb	r1, [r2, #0]
			break;
1000be74:	e005      	b.n	1000be82 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be76:	3301      	adds	r3, #1
1000be78:	b2db      	uxtb	r3, r3
1000be7a:	3201      	adds	r2, #1
1000be7c:	317c      	adds	r1, #124	; 0x7c
1000be7e:	2b05      	cmp	r3, #5
1000be80:	d1e7      	bne.n	1000be52 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000be82:	aa01      	add	r2, sp, #4
1000be84:	78e1      	ldrb	r1, [r4, #3]
1000be86:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000be88:	2101      	movs	r1, #1
1000be8a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000be8c:	3103      	adds	r1, #3
1000be8e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000be90:	001f      	movs	r7, r3
1000be92:	015a      	lsls	r2, r3, #5
1000be94:	1ad2      	subs	r2, r2, r3
1000be96:	0092      	lsls	r2, r2, #2
1000be98:	4936      	ldr	r1, [pc, #216]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000be9a:	5c52      	ldrb	r2, [r2, r1]
1000be9c:	2a02      	cmp	r2, #2
1000be9e:	d104      	bne.n	1000beaa <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bea0:	aa01      	add	r2, sp, #4
1000bea2:	2103      	movs	r1, #3
1000bea4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bea6:	71d1      	strb	r1, [r2, #7]
1000bea8:	e003      	b.n	1000beb2 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000beaa:	aa01      	add	r2, sp, #4
1000beac:	2101      	movs	r1, #1
1000beae:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000beb0:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000beb2:	aa01      	add	r2, sp, #4
1000beb4:	2110      	movs	r1, #16
1000beb6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000beb8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000beba:	017a      	lsls	r2, r7, #5
1000bebc:	1bd2      	subs	r2, r2, r7
1000bebe:	0092      	lsls	r2, r2, #2
1000bec0:	492c      	ldr	r1, [pc, #176]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bec2:	188a      	adds	r2, r1, r2
1000bec4:	7e12      	ldrb	r2, [r2, #24]
1000bec6:	2a40      	cmp	r2, #64	; 0x40
1000bec8:	d134      	bne.n	1000bf34 <ble_slave_security_request_handler+0x184>
1000beca:	015a      	lsls	r2, r3, #5
1000becc:	1ad3      	subs	r3, r2, r3
1000bece:	009b      	lsls	r3, r3, #2
1000bed0:	469a      	mov	sl, r3
1000bed2:	001e      	movs	r6, r3
1000bed4:	3660      	adds	r6, #96	; 0x60
1000bed6:	1876      	adds	r6, r6, r1
1000bed8:	4655      	mov	r5, sl
1000beda:	3568      	adds	r5, #104	; 0x68
1000bedc:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bede:	4b2b      	ldr	r3, [pc, #172]	; (1000bf8c <ble_slave_security_request_handler+0x1dc>)
1000bee0:	4699      	mov	r9, r3
1000bee2:	230f      	movs	r3, #15
1000bee4:	4698      	mov	r8, r3
1000bee6:	47c8      	blx	r9
1000bee8:	4643      	mov	r3, r8
1000beea:	4018      	ands	r0, r3
1000beec:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000beee:	47c8      	blx	r9
1000bef0:	4643      	mov	r3, r8
1000bef2:	4018      	ands	r0, r3
1000bef4:	74b0      	strb	r0, [r6, #18]
1000bef6:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000bef8:	42ae      	cmp	r6, r5
1000befa:	d1f4      	bne.n	1000bee6 <ble_slave_security_request_handler+0x136>
1000befc:	4656      	mov	r6, sl
1000befe:	3670      	adds	r6, #112	; 0x70
1000bf00:	4a1c      	ldr	r2, [pc, #112]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bf02:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bf04:	4b21      	ldr	r3, [pc, #132]	; (1000bf8c <ble_slave_security_request_handler+0x1dc>)
1000bf06:	4699      	mov	r9, r3
1000bf08:	230f      	movs	r3, #15
1000bf0a:	4698      	mov	r8, r3
1000bf0c:	47c8      	blx	r9
1000bf0e:	4643      	mov	r3, r8
1000bf10:	4018      	ands	r0, r3
1000bf12:	7028      	strb	r0, [r5, #0]
1000bf14:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bf16:	42b5      	cmp	r5, r6
1000bf18:	d1f8      	bne.n	1000bf0c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bf1a:	4b1c      	ldr	r3, [pc, #112]	; (1000bf8c <ble_slave_security_request_handler+0x1dc>)
1000bf1c:	4798      	blx	r3
1000bf1e:	017b      	lsls	r3, r7, #5
1000bf20:	1bdb      	subs	r3, r3, r7
1000bf22:	009b      	lsls	r3, r3, #2
1000bf24:	4a13      	ldr	r2, [pc, #76]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bf26:	18d3      	adds	r3, r2, r3
1000bf28:	001a      	movs	r2, r3
1000bf2a:	3270      	adds	r2, #112	; 0x70
1000bf2c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000bf2e:	337a      	adds	r3, #122	; 0x7a
1000bf30:	2210      	movs	r2, #16
1000bf32:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000bf34:	017a      	lsls	r2, r7, #5
1000bf36:	1bd7      	subs	r7, r2, r7
1000bf38:	00bf      	lsls	r7, r7, #2
1000bf3a:	3760      	adds	r7, #96	; 0x60
1000bf3c:	4a0d      	ldr	r2, [pc, #52]	; (1000bf74 <ble_slave_security_request_handler+0x1c4>)
1000bf3e:	18ba      	adds	r2, r7, r2
1000bf40:	8820      	ldrh	r0, [r4, #0]
1000bf42:	2300      	movs	r3, #0
1000bf44:	a901      	add	r1, sp, #4
1000bf46:	4c12      	ldr	r4, [pc, #72]	; (1000bf90 <ble_slave_security_request_handler+0x1e0>)
1000bf48:	47a0      	blx	r4
1000bf4a:	2800      	cmp	r0, #0
1000bf4c:	d00a      	beq.n	1000bf64 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000bf4e:	ab01      	add	r3, sp, #4
1000bf50:	2200      	movs	r2, #0
1000bf52:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000bf54:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000bf56:	4809      	ldr	r0, [pc, #36]	; (1000bf7c <ble_slave_security_request_handler+0x1cc>)
1000bf58:	4b09      	ldr	r3, [pc, #36]	; (1000bf80 <ble_slave_security_request_handler+0x1d0>)
1000bf5a:	4798      	blx	r3
1000bf5c:	480d      	ldr	r0, [pc, #52]	; (1000bf94 <ble_slave_security_request_handler+0x1e4>)
1000bf5e:	4b0a      	ldr	r3, [pc, #40]	; (1000bf88 <ble_slave_security_request_handler+0x1d8>)
1000bf60:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bf62:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000bf64:	b004      	add	sp, #16
1000bf66:	bc1c      	pop	{r2, r3, r4}
1000bf68:	4690      	mov	r8, r2
1000bf6a:	4699      	mov	r9, r3
1000bf6c:	46a2      	mov	sl, r4
1000bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf70:	10014a41 	.word	0x10014a41
1000bf74:	10018a8c 	.word	0x10018a8c
1000bf78:	1000f085 	.word	0x1000f085
1000bf7c:	10015bf0 	.word	0x10015bf0
1000bf80:	10014ca9 	.word	0x10014ca9
1000bf84:	1001645c 	.word	0x1001645c
1000bf88:	10014b89 	.word	0x10014b89
1000bf8c:	10014cbd 	.word	0x10014cbd
1000bf90:	1000ee99 	.word	0x1000ee99
1000bf94:	10016474 	.word	0x10016474

1000bf98 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf9a:	465f      	mov	r7, fp
1000bf9c:	4656      	mov	r6, sl
1000bf9e:	464d      	mov	r5, r9
1000bfa0:	4644      	mov	r4, r8
1000bfa2:	b4f0      	push	{r4, r5, r6, r7}
1000bfa4:	b085      	sub	sp, #20
1000bfa6:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bfa8:	8804      	ldrh	r4, [r0, #0]
1000bfaa:	4a48      	ldr	r2, [pc, #288]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000bfac:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfae:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bfb0:	8910      	ldrh	r0, [r2, #8]
1000bfb2:	42a0      	cmp	r0, r4
1000bfb4:	d10d      	bne.n	1000bfd2 <ble_pair_request_handler+0x3a>
1000bfb6:	0010      	movs	r0, r2
1000bfb8:	305e      	adds	r0, #94	; 0x5e
1000bfba:	7800      	ldrb	r0, [r0, #0]
1000bfbc:	2802      	cmp	r0, #2
1000bfbe:	d108      	bne.n	1000bfd2 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000bfc0:	014a      	lsls	r2, r1, #5
1000bfc2:	1a52      	subs	r2, r2, r1
1000bfc4:	0095      	lsls	r5, r2, #2
1000bfc6:	4a41      	ldr	r2, [pc, #260]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000bfc8:	1952      	adds	r2, r2, r5
1000bfca:	325e      	adds	r2, #94	; 0x5e
1000bfcc:	2103      	movs	r1, #3
1000bfce:	7011      	strb	r1, [r2, #0]
			break;
1000bfd0:	e005      	b.n	1000bfde <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfd2:	3301      	adds	r3, #1
1000bfd4:	b2db      	uxtb	r3, r3
1000bfd6:	3101      	adds	r1, #1
1000bfd8:	327c      	adds	r2, #124	; 0x7c
1000bfda:	2b05      	cmp	r3, #5
1000bfdc:	d1e8      	bne.n	1000bfb0 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000bfde:	aa01      	add	r2, sp, #4
1000bfe0:	2100      	movs	r1, #0
1000bfe2:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000bfe4:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000bfe6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000bfe8:	2003      	movs	r0, #3
1000bfea:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000bfec:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000bfee:	001f      	movs	r7, r3
1000bff0:	015a      	lsls	r2, r3, #5
1000bff2:	1ad2      	subs	r2, r2, r3
1000bff4:	0092      	lsls	r2, r2, #2
1000bff6:	4935      	ldr	r1, [pc, #212]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000bff8:	5c52      	ldrb	r2, [r2, r1]
1000bffa:	2a02      	cmp	r2, #2
1000bffc:	d104      	bne.n	1000c008 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bffe:	aa01      	add	r2, sp, #4
1000c000:	2103      	movs	r1, #3
1000c002:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c004:	71d1      	strb	r1, [r2, #7]
1000c006:	e003      	b.n	1000c010 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c008:	aa01      	add	r2, sp, #4
1000c00a:	2101      	movs	r1, #1
1000c00c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c00e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c010:	aa01      	add	r2, sp, #4
1000c012:	2110      	movs	r1, #16
1000c014:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c016:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c018:	017a      	lsls	r2, r7, #5
1000c01a:	1bd2      	subs	r2, r2, r7
1000c01c:	0092      	lsls	r2, r2, #2
1000c01e:	492b      	ldr	r1, [pc, #172]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000c020:	188a      	adds	r2, r1, r2
1000c022:	7e12      	ldrb	r2, [r2, #24]
1000c024:	2a40      	cmp	r2, #64	; 0x40
1000c026:	d131      	bne.n	1000c08c <ble_pair_request_handler+0xf4>
1000c028:	015a      	lsls	r2, r3, #5
1000c02a:	1ad3      	subs	r3, r2, r3
1000c02c:	009b      	lsls	r3, r3, #2
1000c02e:	469a      	mov	sl, r3
1000c030:	001d      	movs	r5, r3
1000c032:	3560      	adds	r5, #96	; 0x60
1000c034:	186d      	adds	r5, r5, r1
1000c036:	4654      	mov	r4, sl
1000c038:	3468      	adds	r4, #104	; 0x68
1000c03a:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c03c:	4b24      	ldr	r3, [pc, #144]	; (1000c0d0 <ble_pair_request_handler+0x138>)
1000c03e:	4699      	mov	r9, r3
1000c040:	260f      	movs	r6, #15
1000c042:	47c8      	blx	r9
1000c044:	4030      	ands	r0, r6
1000c046:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c048:	47c8      	blx	r9
1000c04a:	4030      	ands	r0, r6
1000c04c:	74a8      	strb	r0, [r5, #18]
1000c04e:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c050:	42a5      	cmp	r5, r4
1000c052:	d1f6      	bne.n	1000c042 <ble_pair_request_handler+0xaa>
1000c054:	4655      	mov	r5, sl
1000c056:	3570      	adds	r5, #112	; 0x70
1000c058:	4a1c      	ldr	r2, [pc, #112]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000c05a:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c05c:	4b1c      	ldr	r3, [pc, #112]	; (1000c0d0 <ble_pair_request_handler+0x138>)
1000c05e:	4699      	mov	r9, r3
1000c060:	230f      	movs	r3, #15
1000c062:	4698      	mov	r8, r3
1000c064:	47c8      	blx	r9
1000c066:	4643      	mov	r3, r8
1000c068:	4018      	ands	r0, r3
1000c06a:	7020      	strb	r0, [r4, #0]
1000c06c:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c06e:	42ac      	cmp	r4, r5
1000c070:	d1f8      	bne.n	1000c064 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c072:	4b17      	ldr	r3, [pc, #92]	; (1000c0d0 <ble_pair_request_handler+0x138>)
1000c074:	4798      	blx	r3
1000c076:	017b      	lsls	r3, r7, #5
1000c078:	1bdb      	subs	r3, r3, r7
1000c07a:	009b      	lsls	r3, r3, #2
1000c07c:	4a13      	ldr	r2, [pc, #76]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000c07e:	18d3      	adds	r3, r2, r3
1000c080:	001a      	movs	r2, r3
1000c082:	3270      	adds	r2, #112	; 0x70
1000c084:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c086:	337a      	adds	r3, #122	; 0x7a
1000c088:	2210      	movs	r2, #16
1000c08a:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c08c:	017a      	lsls	r2, r7, #5
1000c08e:	1bd7      	subs	r7, r2, r7
1000c090:	00bf      	lsls	r7, r7, #2
1000c092:	3760      	adds	r7, #96	; 0x60
1000c094:	4a0d      	ldr	r2, [pc, #52]	; (1000c0cc <ble_pair_request_handler+0x134>)
1000c096:	18ba      	adds	r2, r7, r2
1000c098:	465b      	mov	r3, fp
1000c09a:	8818      	ldrh	r0, [r3, #0]
1000c09c:	2300      	movs	r3, #0
1000c09e:	a901      	add	r1, sp, #4
1000c0a0:	4c0c      	ldr	r4, [pc, #48]	; (1000c0d4 <ble_pair_request_handler+0x13c>)
1000c0a2:	47a0      	blx	r4
1000c0a4:	2800      	cmp	r0, #0
1000c0a6:	d00a      	beq.n	1000c0be <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000c0a8:	ab01      	add	r3, sp, #4
1000c0aa:	2200      	movs	r2, #0
1000c0ac:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c0ae:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c0b0:	4809      	ldr	r0, [pc, #36]	; (1000c0d8 <ble_pair_request_handler+0x140>)
1000c0b2:	4b0a      	ldr	r3, [pc, #40]	; (1000c0dc <ble_pair_request_handler+0x144>)
1000c0b4:	4798      	blx	r3
1000c0b6:	480a      	ldr	r0, [pc, #40]	; (1000c0e0 <ble_pair_request_handler+0x148>)
1000c0b8:	4b0a      	ldr	r3, [pc, #40]	; (1000c0e4 <ble_pair_request_handler+0x14c>)
1000c0ba:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c0bc:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c0be:	b005      	add	sp, #20
1000c0c0:	bc3c      	pop	{r2, r3, r4, r5}
1000c0c2:	4690      	mov	r8, r2
1000c0c4:	4699      	mov	r9, r3
1000c0c6:	46a2      	mov	sl, r4
1000c0c8:	46ab      	mov	fp, r5
1000c0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0cc:	10018a8c 	.word	0x10018a8c
1000c0d0:	10014cbd 	.word	0x10014cbd
1000c0d4:	1000ee99 	.word	0x1000ee99
1000c0d8:	10015bf0 	.word	0x10015bf0
1000c0dc:	10014ca9 	.word	0x10014ca9
1000c0e0:	100164a0 	.word	0x100164a0
1000c0e4:	10014b89 	.word	0x10014b89

1000c0e8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0ea:	b085      	sub	sp, #20
1000c0ec:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c0ee:	2206      	movs	r2, #6
1000c0f0:	493d      	ldr	r1, [pc, #244]	; (1000c1e8 <ble_pair_key_request_handler+0x100>)
1000c0f2:	a802      	add	r0, sp, #8
1000c0f4:	4e3d      	ldr	r6, [pc, #244]	; (1000c1ec <ble_pair_key_request_handler+0x104>)
1000c0f6:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c0f8:	ac01      	add	r4, sp, #4
1000c0fa:	2204      	movs	r2, #4
1000c0fc:	0029      	movs	r1, r5
1000c0fe:	0020      	movs	r0, r4
1000c100:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c102:	78e3      	ldrb	r3, [r4, #3]
1000c104:	2b00      	cmp	r3, #0
1000c106:	d162      	bne.n	1000c1ce <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c108:	4839      	ldr	r0, [pc, #228]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c10a:	4b3a      	ldr	r3, [pc, #232]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c10c:	4798      	blx	r3
1000c10e:	483a      	ldr	r0, [pc, #232]	; (1000c1f8 <ble_pair_key_request_handler+0x110>)
1000c110:	4b3a      	ldr	r3, [pc, #232]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c112:	4798      	blx	r3
1000c114:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c116:	4c3a      	ldr	r4, [pc, #232]	; (1000c200 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c118:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c11a:	201e      	movs	r0, #30
1000c11c:	47a0      	blx	r4
1000c11e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c120:	2b00      	cmp	r3, #0
1000c122:	d11a      	bne.n	1000c15a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c124:	4f32      	ldr	r7, [pc, #200]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c126:	0038      	movs	r0, r7
1000c128:	4e32      	ldr	r6, [pc, #200]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c12a:	47b0      	blx	r6
1000c12c:	4835      	ldr	r0, [pc, #212]	; (1000c204 <ble_pair_key_request_handler+0x11c>)
1000c12e:	4c33      	ldr	r4, [pc, #204]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c130:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c132:	0038      	movs	r0, r7
1000c134:	47b0      	blx	r6
1000c136:	4834      	ldr	r0, [pc, #208]	; (1000c208 <ble_pair_key_request_handler+0x120>)
1000c138:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c13a:	8828      	ldrh	r0, [r5, #0]
1000c13c:	2113      	movs	r1, #19
1000c13e:	4b33      	ldr	r3, [pc, #204]	; (1000c20c <ble_pair_key_request_handler+0x124>)
1000c140:	4798      	blx	r3
1000c142:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c144:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c146:	2b00      	cmp	r3, #0
1000c148:	d04c      	beq.n	1000c1e4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c14a:	4829      	ldr	r0, [pc, #164]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c14c:	4b29      	ldr	r3, [pc, #164]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c14e:	4798      	blx	r3
1000c150:	482f      	ldr	r0, [pc, #188]	; (1000c210 <ble_pair_key_request_handler+0x128>)
1000c152:	4b2a      	ldr	r3, [pc, #168]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c154:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c156:	20e2      	movs	r0, #226	; 0xe2
1000c158:	e044      	b.n	1000c1e4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c15a:	001a      	movs	r2, r3
1000c15c:	3a30      	subs	r2, #48	; 0x30
1000c15e:	2a09      	cmp	r2, #9
1000c160:	d8db      	bhi.n	1000c11a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c162:	aa02      	add	r2, sp, #8
1000c164:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c166:	4038      	ands	r0, r7
1000c168:	4b2a      	ldr	r3, [pc, #168]	; (1000c214 <ble_pair_key_request_handler+0x12c>)
1000c16a:	4798      	blx	r3
1000c16c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c16e:	2e06      	cmp	r6, #6
1000c170:	d026      	beq.n	1000c1c0 <ble_pair_key_request_handler+0xd8>
1000c172:	e7d2      	b.n	1000c11a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c174:	481e      	ldr	r0, [pc, #120]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c176:	4b1f      	ldr	r3, [pc, #124]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c178:	4798      	blx	r3
1000c17a:	4827      	ldr	r0, [pc, #156]	; (1000c218 <ble_pair_key_request_handler+0x130>)
1000c17c:	4b1f      	ldr	r3, [pc, #124]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c17e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c180:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c182:	4e24      	ldr	r6, [pc, #144]	; (1000c214 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c184:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c186:	5ce0      	ldrb	r0, [r4, r3]
1000c188:	47b0      	blx	r6
1000c18a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c18c:	2c06      	cmp	r4, #6
1000c18e:	d1f9      	bne.n	1000c184 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c190:	ab01      	add	r3, sp, #4
1000c192:	7899      	ldrb	r1, [r3, #2]
1000c194:	8828      	ldrh	r0, [r5, #0]
1000c196:	aa02      	add	r2, sp, #8
1000c198:	4b20      	ldr	r3, [pc, #128]	; (1000c21c <ble_pair_key_request_handler+0x134>)
1000c19a:	4798      	blx	r3
1000c19c:	2800      	cmp	r0, #0
1000c19e:	d021      	beq.n	1000c1e4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c1a0:	4813      	ldr	r0, [pc, #76]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c1a2:	4b14      	ldr	r3, [pc, #80]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c1a4:	4798      	blx	r3
1000c1a6:	481e      	ldr	r0, [pc, #120]	; (1000c220 <ble_pair_key_request_handler+0x138>)
1000c1a8:	4b14      	ldr	r3, [pc, #80]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c1aa:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c1ac:	2000      	movs	r0, #0
1000c1ae:	e019      	b.n	1000c1e4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c1b0:	480f      	ldr	r0, [pc, #60]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c1b2:	4b10      	ldr	r3, [pc, #64]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c1b4:	4798      	blx	r3
1000c1b6:	481b      	ldr	r0, [pc, #108]	; (1000c224 <ble_pair_key_request_handler+0x13c>)
1000c1b8:	4b10      	ldr	r3, [pc, #64]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c1ba:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c1bc:	2000      	movs	r0, #0
1000c1be:	e011      	b.n	1000c1e4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c1c0:	480b      	ldr	r0, [pc, #44]	; (1000c1f0 <ble_pair_key_request_handler+0x108>)
1000c1c2:	4b0c      	ldr	r3, [pc, #48]	; (1000c1f4 <ble_pair_key_request_handler+0x10c>)
1000c1c4:	4798      	blx	r3
1000c1c6:	4818      	ldr	r0, [pc, #96]	; (1000c228 <ble_pair_key_request_handler+0x140>)
1000c1c8:	4b0c      	ldr	r3, [pc, #48]	; (1000c1fc <ble_pair_key_request_handler+0x114>)
1000c1ca:	4798      	blx	r3
1000c1cc:	e7d8      	b.n	1000c180 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c1ce:	ab01      	add	r3, sp, #4
1000c1d0:	885a      	ldrh	r2, [r3, #2]
1000c1d2:	2380      	movs	r3, #128	; 0x80
1000c1d4:	005b      	lsls	r3, r3, #1
1000c1d6:	429a      	cmp	r2, r3
1000c1d8:	d0cc      	beq.n	1000c174 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c1da:	ab01      	add	r3, sp, #4
1000c1dc:	789b      	ldrb	r3, [r3, #2]
1000c1de:	2b01      	cmp	r3, #1
1000c1e0:	d0e6      	beq.n	1000c1b0 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c1e2:	2000      	movs	r0, #0
}
1000c1e4:	b005      	add	sp, #20
1000c1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c1e8:	1001624c 	.word	0x1001624c
1000c1ec:	10014a2f 	.word	0x10014a2f
1000c1f0:	10015bf0 	.word	0x10015bf0
1000c1f4:	10014ca9 	.word	0x10014ca9
1000c1f8:	100164c8 	.word	0x100164c8
1000c1fc:	10014b89 	.word	0x10014b89
1000c200:	1000cbf1 	.word	0x1000cbf1
1000c204:	100164f0 	.word	0x100164f0
1000c208:	100164fc 	.word	0x100164fc
1000c20c:	1000e515 	.word	0x1000e515
1000c210:	100163e4 	.word	0x100163e4
1000c214:	10014bbd 	.word	0x10014bbd
1000c218:	10016510 	.word	0x10016510
1000c21c:	1000efc9 	.word	0x1000efc9
1000c220:	10016548 	.word	0x10016548
1000c224:	10016560 	.word	0x10016560
1000c228:	1001657c 	.word	0x1001657c

1000c22c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c22e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c230:	8805      	ldrh	r5, [r0, #0]
1000c232:	4b2f      	ldr	r3, [pc, #188]	; (1000c2f0 <ble_encryption_request_handler+0xc4>)
1000c234:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c236:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c238:	0010      	movs	r0, r2
1000c23a:	8919      	ldrh	r1, [r3, #8]
1000c23c:	42a9      	cmp	r1, r5
1000c23e:	d116      	bne.n	1000c26e <ble_encryption_request_handler+0x42>
1000c240:	0019      	movs	r1, r3
1000c242:	315e      	adds	r1, #94	; 0x5e
1000c244:	7809      	ldrb	r1, [r1, #0]
1000c246:	2901      	cmp	r1, #1
1000c248:	d911      	bls.n	1000c26e <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c24a:	4929      	ldr	r1, [pc, #164]	; (1000c2f0 <ble_encryption_request_handler+0xc4>)
1000c24c:	0152      	lsls	r2, r2, #5
1000c24e:	1a10      	subs	r0, r2, r0
1000c250:	0080      	lsls	r0, r0, #2
1000c252:	1808      	adds	r0, r1, r0
1000c254:	305e      	adds	r0, #94	; 0x5e
1000c256:	2306      	movs	r3, #6
1000c258:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c25a:	0162      	lsls	r2, r4, #5
1000c25c:	1b13      	subs	r3, r2, r4
1000c25e:	009b      	lsls	r3, r3, #2
1000c260:	18cb      	adds	r3, r1, r3
1000c262:	3370      	adds	r3, #112	; 0x70
1000c264:	881a      	ldrh	r2, [r3, #0]
1000c266:	8873      	ldrh	r3, [r6, #2]
1000c268:	429a      	cmp	r2, r3
1000c26a:	d113      	bne.n	1000c294 <ble_encryption_request_handler+0x68>
1000c26c:	e006      	b.n	1000c27c <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c26e:	3401      	adds	r4, #1
1000c270:	b2e4      	uxtb	r4, r4
1000c272:	3201      	adds	r2, #1
1000c274:	337c      	adds	r3, #124	; 0x7c
1000c276:	2c05      	cmp	r4, #5
1000c278:	d1de      	bne.n	1000c238 <ble_encryption_request_handler+0xc>
1000c27a:	e00b      	b.n	1000c294 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c27c:	0161      	lsls	r1, r4, #5
1000c27e:	1b09      	subs	r1, r1, r4
1000c280:	0089      	lsls	r1, r1, #2
1000c282:	4b1b      	ldr	r3, [pc, #108]	; (1000c2f0 <ble_encryption_request_handler+0xc4>)
1000c284:	1859      	adds	r1, r3, r1
1000c286:	3172      	adds	r1, #114	; 0x72
1000c288:	1d30      	adds	r0, r6, #4
1000c28a:	2208      	movs	r2, #8
1000c28c:	4b19      	ldr	r3, [pc, #100]	; (1000c2f4 <ble_encryption_request_handler+0xc8>)
1000c28e:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000c290:	2800      	cmp	r0, #0
1000c292:	d015      	beq.n	1000c2c0 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c294:	4f18      	ldr	r7, [pc, #96]	; (1000c2f8 <ble_encryption_request_handler+0xcc>)
1000c296:	0038      	movs	r0, r7
1000c298:	4e18      	ldr	r6, [pc, #96]	; (1000c2fc <ble_encryption_request_handler+0xd0>)
1000c29a:	47b0      	blx	r6
1000c29c:	4818      	ldr	r0, [pc, #96]	; (1000c300 <ble_encryption_request_handler+0xd4>)
1000c29e:	4d19      	ldr	r5, [pc, #100]	; (1000c304 <ble_encryption_request_handler+0xd8>)
1000c2a0:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c2a2:	0038      	movs	r0, r7
1000c2a4:	47b0      	blx	r6
1000c2a6:	4818      	ldr	r0, [pc, #96]	; (1000c308 <ble_encryption_request_handler+0xdc>)
1000c2a8:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c2aa:	0163      	lsls	r3, r4, #5
1000c2ac:	1b1c      	subs	r4, r3, r4
1000c2ae:	00a4      	lsls	r4, r4, #2
1000c2b0:	4b0f      	ldr	r3, [pc, #60]	; (1000c2f0 <ble_encryption_request_handler+0xc4>)
1000c2b2:	191c      	adds	r4, r3, r4
1000c2b4:	8920      	ldrh	r0, [r4, #8]
1000c2b6:	2105      	movs	r1, #5
1000c2b8:	4b14      	ldr	r3, [pc, #80]	; (1000c30c <ble_encryption_request_handler+0xe0>)
1000c2ba:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c2bc:	20e2      	movs	r0, #226	; 0xe2
1000c2be:	e016      	b.n	1000c2ee <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c2c0:	0162      	lsls	r2, r4, #5
1000c2c2:	1b13      	subs	r3, r2, r4
1000c2c4:	009b      	lsls	r3, r3, #2
1000c2c6:	3360      	adds	r3, #96	; 0x60
1000c2c8:	4909      	ldr	r1, [pc, #36]	; (1000c2f0 <ble_encryption_request_handler+0xc4>)
1000c2ca:	185b      	adds	r3, r3, r1
1000c2cc:	1b14      	subs	r4, r2, r4
1000c2ce:	00a4      	lsls	r4, r4, #2
1000c2d0:	190c      	adds	r4, r1, r4
1000c2d2:	7d21      	ldrb	r1, [r4, #20]
1000c2d4:	8830      	ldrh	r0, [r6, #0]
1000c2d6:	2201      	movs	r2, #1
1000c2d8:	4c0d      	ldr	r4, [pc, #52]	; (1000c310 <ble_encryption_request_handler+0xe4>)
1000c2da:	47a0      	blx	r4
1000c2dc:	2800      	cmp	r0, #0
1000c2de:	d006      	beq.n	1000c2ee <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c2e0:	4805      	ldr	r0, [pc, #20]	; (1000c2f8 <ble_encryption_request_handler+0xcc>)
1000c2e2:	4b06      	ldr	r3, [pc, #24]	; (1000c2fc <ble_encryption_request_handler+0xd0>)
1000c2e4:	4798      	blx	r3
1000c2e6:	480b      	ldr	r0, [pc, #44]	; (1000c314 <ble_encryption_request_handler+0xe8>)
1000c2e8:	4b06      	ldr	r3, [pc, #24]	; (1000c304 <ble_encryption_request_handler+0xd8>)
1000c2ea:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c2ec:	2000      	movs	r0, #0
}
1000c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c2f0:	10018a8c 	.word	0x10018a8c
1000c2f4:	10014a11 	.word	0x10014a11
1000c2f8:	10015bf0 	.word	0x10015bf0
1000c2fc:	10014ca9 	.word	0x10014ca9
1000c300:	10016590 	.word	0x10016590
1000c304:	10014b89 	.word	0x10014b89
1000c308:	100165c8 	.word	0x100165c8
1000c30c:	1000e515 	.word	0x1000e515
1000c310:	1000f0fd 	.word	0x1000f0fd
1000c314:	10016620 	.word	0x10016620

1000c318 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000c318:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000c31a:	2a00      	cmp	r2, #0
1000c31c:	d047      	beq.n	1000c3ae <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000c31e:	2906      	cmp	r1, #6
1000c320:	d847      	bhi.n	1000c3b2 <ble_mgr_events_callback_handler+0x9a>
1000c322:	0089      	lsls	r1, r1, #2
1000c324:	4b28      	ldr	r3, [pc, #160]	; (1000c3c8 <ble_mgr_events_callback_handler+0xb0>)
1000c326:	585b      	ldr	r3, [r3, r1]
1000c328:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000c32a:	4b28      	ldr	r3, [pc, #160]	; (1000c3cc <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000c32c:	2405      	movs	r4, #5
1000c32e:	e00a      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000c330:	4b27      	ldr	r3, [pc, #156]	; (1000c3d0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000c332:	2401      	movs	r4, #1
			}
			break;
1000c334:	e007      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000c336:	4b27      	ldr	r3, [pc, #156]	; (1000c3d4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000c338:	2405      	movs	r4, #5
			}
			break;
1000c33a:	e004      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000c33c:	4b26      	ldr	r3, [pc, #152]	; (1000c3d8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000c33e:	2401      	movs	r4, #1
			}
			break;
1000c340:	e001      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000c342:	4b26      	ldr	r3, [pc, #152]	; (1000c3dc <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000c344:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000c346:	2800      	cmp	r0, #0
1000c348:	d116      	bne.n	1000c378 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c34a:	6819      	ldr	r1, [r3, #0]
1000c34c:	2900      	cmp	r1, #0
1000c34e:	d10b      	bne.n	1000c368 <ble_mgr_events_callback_handler+0x50>
1000c350:	e006      	b.n	1000c360 <ble_mgr_events_callback_handler+0x48>
1000c352:	001d      	movs	r5, r3
1000c354:	3304      	adds	r3, #4
1000c356:	1f18      	subs	r0, r3, #4
1000c358:	6800      	ldr	r0, [r0, #0]
1000c35a:	2800      	cmp	r0, #0
1000c35c:	d106      	bne.n	1000c36c <ble_mgr_events_callback_handler+0x54>
1000c35e:	e000      	b.n	1000c362 <ble_mgr_events_callback_handler+0x4a>
1000c360:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000c362:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000c364:	2101      	movs	r1, #1
						break;
1000c366:	e02c      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
1000c368:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c36a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c36c:	3101      	adds	r1, #1
1000c36e:	b2c9      	uxtb	r1, r1
1000c370:	42a1      	cmp	r1, r4
1000c372:	d3ee      	bcc.n	1000c352 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c374:	2100      	movs	r1, #0
1000c376:	e024      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
1000c378:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000c37a:	2801      	cmp	r0, #1
1000c37c:	d121      	bne.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c37e:	6819      	ldr	r1, [r3, #0]
1000c380:	428a      	cmp	r2, r1
1000c382:	d10c      	bne.n	1000c39e <ble_mgr_events_callback_handler+0x86>
1000c384:	e006      	b.n	1000c394 <ble_mgr_events_callback_handler+0x7c>
1000c386:	001d      	movs	r5, r3
1000c388:	3304      	adds	r3, #4
1000c38a:	1f18      	subs	r0, r3, #4
1000c38c:	6800      	ldr	r0, [r0, #0]
1000c38e:	4282      	cmp	r2, r0
1000c390:	d107      	bne.n	1000c3a2 <ble_mgr_events_callback_handler+0x8a>
1000c392:	e000      	b.n	1000c396 <ble_mgr_events_callback_handler+0x7e>
1000c394:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000c396:	2300      	movs	r3, #0
1000c398:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000c39a:	2101      	movs	r1, #1
						break;
1000c39c:	e011      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
1000c39e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c3a0:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c3a2:	3101      	adds	r1, #1
1000c3a4:	b2c9      	uxtb	r1, r1
1000c3a6:	42a1      	cmp	r1, r4
1000c3a8:	d3ed      	bcc.n	1000c386 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c3aa:	2100      	movs	r1, #0
1000c3ac:	e009      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000c3ae:	2100      	movs	r1, #0
1000c3b0:	e007      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000c3b2:	2100      	movs	r1, #0
1000c3b4:	e005      	b.n	1000c3c2 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000c3b6:	4b0a      	ldr	r3, [pc, #40]	; (1000c3e0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000c3b8:	2405      	movs	r4, #5
1000c3ba:	e7c4      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000c3bc:	4b09      	ldr	r3, [pc, #36]	; (1000c3e4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000c3be:	2401      	movs	r4, #1
1000c3c0:	e7c1      	b.n	1000c346 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000c3c2:	0008      	movs	r0, r1
1000c3c4:	bd30      	pop	{r4, r5, pc}
1000c3c6:	46c0      	nop			; (mov r8, r8)
1000c3c8:	10016230 	.word	0x10016230
1000c3cc:	10018a78 	.word	0x10018a78
1000c3d0:	10018a74 	.word	0x10018a74
1000c3d4:	10018cfc 	.word	0x10018cfc
1000c3d8:	100192b0 	.word	0x100192b0
1000c3dc:	10018d10 	.word	0x10018d10
1000c3e0:	10018d24 	.word	0x10018d24
1000c3e4:	10018d6c 	.word	0x10018d6c

1000c3e8 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c3ea:	465f      	mov	r7, fp
1000c3ec:	4656      	mov	r6, sl
1000c3ee:	464d      	mov	r5, r9
1000c3f0:	4644      	mov	r4, r8
1000c3f2:	b4f0      	push	{r4, r5, r6, r7}
1000c3f4:	b08d      	sub	sp, #52	; 0x34
1000c3f6:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000c3f8:	2400      	movs	r4, #0
1000c3fa:	4b72      	ldr	r3, [pc, #456]	; (1000c5c4 <ble_device_init+0x1dc>)
1000c3fc:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c3fe:	2207      	movs	r2, #7
1000c400:	2100      	movs	r1, #0
1000c402:	4871      	ldr	r0, [pc, #452]	; (1000c5c8 <ble_device_init+0x1e0>)
1000c404:	4d71      	ldr	r5, [pc, #452]	; (1000c5cc <ble_device_init+0x1e4>)
1000c406:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000c408:	2212      	movs	r2, #18
1000c40a:	2100      	movs	r1, #0
1000c40c:	4870      	ldr	r0, [pc, #448]	; (1000c5d0 <ble_device_init+0x1e8>)
1000c40e:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000c410:	4a70      	ldr	r2, [pc, #448]	; (1000c5d4 <ble_device_init+0x1ec>)
1000c412:	2100      	movs	r1, #0
1000c414:	4870      	ldr	r0, [pc, #448]	; (1000c5d8 <ble_device_init+0x1f0>)
1000c416:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000c418:	4b70      	ldr	r3, [pc, #448]	; (1000c5dc <ble_device_init+0x1f4>)
1000c41a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000c41c:	22cd      	movs	r2, #205	; 0xcd
1000c41e:	0092      	lsls	r2, r2, #2
1000c420:	2100      	movs	r1, #0
1000c422:	486f      	ldr	r0, [pc, #444]	; (1000c5e0 <ble_device_init+0x1f8>)
1000c424:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000c426:	4b6f      	ldr	r3, [pc, #444]	; (1000c5e4 <ble_device_init+0x1fc>)
1000c428:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000c42a:	2283      	movs	r2, #131	; 0x83
1000c42c:	0092      	lsls	r2, r2, #2
1000c42e:	2100      	movs	r1, #0
1000c430:	486d      	ldr	r0, [pc, #436]	; (1000c5e8 <ble_device_init+0x200>)
1000c432:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000c434:	4b6d      	ldr	r3, [pc, #436]	; (1000c5ec <ble_device_init+0x204>)
1000c436:	469b      	mov	fp, r3
1000c438:	2380      	movs	r3, #128	; 0x80
1000c43a:	00db      	lsls	r3, r3, #3
1000c43c:	469a      	mov	sl, r3
1000c43e:	001a      	movs	r2, r3
1000c440:	2100      	movs	r1, #0
1000c442:	4658      	mov	r0, fp
1000c444:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000c446:	4b6a      	ldr	r3, [pc, #424]	; (1000c5f0 <ble_device_init+0x208>)
1000c448:	4699      	mov	r9, r3
1000c44a:	2380      	movs	r3, #128	; 0x80
1000c44c:	015b      	lsls	r3, r3, #5
1000c44e:	4698      	mov	r8, r3
1000c450:	001a      	movs	r2, r3
1000c452:	2100      	movs	r1, #0
1000c454:	4648      	mov	r0, r9
1000c456:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c458:	4f66      	ldr	r7, [pc, #408]	; (1000c5f4 <ble_device_init+0x20c>)
1000c45a:	221c      	movs	r2, #28
1000c45c:	2100      	movs	r1, #0
1000c45e:	0038      	movs	r0, r7
1000c460:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c462:	465b      	mov	r3, fp
1000c464:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c466:	4653      	mov	r3, sl
1000c468:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c46a:	464b      	mov	r3, r9
1000c46c:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c46e:	4643      	mov	r3, r8
1000c470:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c472:	4b61      	ldr	r3, [pc, #388]	; (1000c5f8 <ble_device_init+0x210>)
1000c474:	601c      	str	r4, [r3, #0]
1000c476:	605c      	str	r4, [r3, #4]
1000c478:	609c      	str	r4, [r3, #8]
1000c47a:	60dc      	str	r4, [r3, #12]
1000c47c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c47e:	4b5f      	ldr	r3, [pc, #380]	; (1000c5fc <ble_device_init+0x214>)
1000c480:	601c      	str	r4, [r3, #0]
1000c482:	605c      	str	r4, [r3, #4]
1000c484:	609c      	str	r4, [r3, #8]
1000c486:	60dc      	str	r4, [r3, #12]
1000c488:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c48a:	4b5d      	ldr	r3, [pc, #372]	; (1000c600 <ble_device_init+0x218>)
1000c48c:	601c      	str	r4, [r3, #0]
1000c48e:	605c      	str	r4, [r3, #4]
1000c490:	609c      	str	r4, [r3, #8]
1000c492:	60dc      	str	r4, [r3, #12]
1000c494:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c496:	4b5b      	ldr	r3, [pc, #364]	; (1000c604 <ble_device_init+0x21c>)
1000c498:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c49a:	4b5b      	ldr	r3, [pc, #364]	; (1000c608 <ble_device_init+0x220>)
1000c49c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c49e:	4b5b      	ldr	r3, [pc, #364]	; (1000c60c <ble_device_init+0x224>)
1000c4a0:	601c      	str	r4, [r3, #0]
1000c4a2:	605c      	str	r4, [r3, #4]
1000c4a4:	609c      	str	r4, [r3, #8]
1000c4a6:	60dc      	str	r4, [r3, #12]
1000c4a8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c4aa:	4b59      	ldr	r3, [pc, #356]	; (1000c610 <ble_device_init+0x228>)
1000c4ac:	601c      	str	r4, [r3, #0]
1000c4ae:	4c59      	ldr	r4, [pc, #356]	; (1000c614 <ble_device_init+0x22c>)
1000c4b0:	239b      	movs	r3, #155	; 0x9b
1000c4b2:	009b      	lsls	r3, r3, #2
1000c4b4:	4698      	mov	r8, r3
1000c4b6:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c4b8:	4f44      	ldr	r7, [pc, #272]	; (1000c5cc <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c4ba:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c4bc:	227c      	movs	r2, #124	; 0x7c
1000c4be:	2100      	movs	r1, #0
1000c4c0:	0020      	movs	r0, r4
1000c4c2:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c4c4:	0023      	movs	r3, r4
1000c4c6:	335e      	adds	r3, #94	; 0x5e
1000c4c8:	2200      	movs	r2, #0
1000c4ca:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c4cc:	7625      	strb	r5, [r4, #24]
1000c4ce:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c4d0:	45a0      	cmp	r8, r4
1000c4d2:	d1f3      	bne.n	1000c4bc <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c4d4:	4b50      	ldr	r3, [pc, #320]	; (1000c618 <ble_device_init+0x230>)
1000c4d6:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c4d8:	4846      	ldr	r0, [pc, #280]	; (1000c5f4 <ble_device_init+0x20c>)
1000c4da:	4b3e      	ldr	r3, [pc, #248]	; (1000c5d4 <ble_device_init+0x1ec>)
1000c4dc:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c4de:	4b3e      	ldr	r3, [pc, #248]	; (1000c5d8 <ble_device_init+0x1f0>)
1000c4e0:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c4e2:	4b4e      	ldr	r3, [pc, #312]	; (1000c61c <ble_device_init+0x234>)
1000c4e4:	4798      	blx	r3
1000c4e6:	2800      	cmp	r0, #0
1000c4e8:	d00b      	beq.n	1000c502 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c4ea:	4e4d      	ldr	r6, [pc, #308]	; (1000c620 <ble_device_init+0x238>)
1000c4ec:	0030      	movs	r0, r6
1000c4ee:	4d4d      	ldr	r5, [pc, #308]	; (1000c624 <ble_device_init+0x23c>)
1000c4f0:	47a8      	blx	r5
1000c4f2:	484d      	ldr	r0, [pc, #308]	; (1000c628 <ble_device_init+0x240>)
1000c4f4:	4c4d      	ldr	r4, [pc, #308]	; (1000c62c <ble_device_init+0x244>)
1000c4f6:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c4f8:	0030      	movs	r0, r6
1000c4fa:	47a8      	blx	r5
1000c4fc:	484c      	ldr	r0, [pc, #304]	; (1000c630 <ble_device_init+0x248>)
1000c4fe:	47a0      	blx	r4
1000c500:	e7fe      	b.n	1000c500 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c502:	4a4c      	ldr	r2, [pc, #304]	; (1000c634 <ble_device_init+0x24c>)
1000c504:	2100      	movs	r1, #0
1000c506:	2000      	movs	r0, #0
1000c508:	4c4b      	ldr	r4, [pc, #300]	; (1000c638 <ble_device_init+0x250>)
1000c50a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c50c:	4a4b      	ldr	r2, [pc, #300]	; (1000c63c <ble_device_init+0x254>)
1000c50e:	2102      	movs	r1, #2
1000c510:	2000      	movs	r0, #0
1000c512:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c514:	2109      	movs	r1, #9
1000c516:	484a      	ldr	r0, [pc, #296]	; (1000c640 <ble_device_init+0x258>)
1000c518:	4b4a      	ldr	r3, [pc, #296]	; (1000c644 <ble_device_init+0x25c>)
1000c51a:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c51c:	2800      	cmp	r0, #0
1000c51e:	d005      	beq.n	1000c52c <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000c520:	483f      	ldr	r0, [pc, #252]	; (1000c620 <ble_device_init+0x238>)
1000c522:	4b40      	ldr	r3, [pc, #256]	; (1000c624 <ble_device_init+0x23c>)
1000c524:	4798      	blx	r3
1000c526:	4848      	ldr	r0, [pc, #288]	; (1000c648 <ble_device_init+0x260>)
1000c528:	4b40      	ldr	r3, [pc, #256]	; (1000c62c <ble_device_init+0x244>)
1000c52a:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c52c:	2207      	movs	r2, #7
1000c52e:	4947      	ldr	r1, [pc, #284]	; (1000c64c <ble_device_init+0x264>)
1000c530:	3108      	adds	r1, #8
1000c532:	4668      	mov	r0, sp
1000c534:	4b46      	ldr	r3, [pc, #280]	; (1000c650 <ble_device_init+0x268>)
1000c536:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c538:	2226      	movs	r2, #38	; 0x26
1000c53a:	2100      	movs	r1, #0
1000c53c:	a802      	add	r0, sp, #8
1000c53e:	4b23      	ldr	r3, [pc, #140]	; (1000c5cc <ble_device_init+0x1e4>)
1000c540:	4798      	blx	r3
	
	if (addr == NULL)
1000c542:	2e00      	cmp	r6, #0
1000c544:	d10c      	bne.n	1000c560 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c546:	4668      	mov	r0, sp
1000c548:	4b42      	ldr	r3, [pc, #264]	; (1000c654 <ble_device_init+0x26c>)
1000c54a:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c54c:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c54e:	2800      	cmp	r0, #0
1000c550:	d006      	beq.n	1000c560 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c552:	4833      	ldr	r0, [pc, #204]	; (1000c620 <ble_device_init+0x238>)
1000c554:	4b33      	ldr	r3, [pc, #204]	; (1000c624 <ble_device_init+0x23c>)
1000c556:	4798      	blx	r3
1000c558:	483f      	ldr	r0, [pc, #252]	; (1000c658 <ble_device_init+0x270>)
1000c55a:	4b34      	ldr	r3, [pc, #208]	; (1000c62c <ble_device_init+0x244>)
1000c55c:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c55e:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c560:	ac02      	add	r4, sp, #8
1000c562:	230a      	movs	r3, #10
1000c564:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000c566:	4b3d      	ldr	r3, [pc, #244]	; (1000c65c <ble_device_init+0x274>)
1000c568:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000c56a:	2207      	movs	r2, #7
1000c56c:	0031      	movs	r1, r6
1000c56e:	a803      	add	r0, sp, #12
1000c570:	4b37      	ldr	r3, [pc, #220]	; (1000c650 <ble_device_init+0x268>)
1000c572:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000c574:	2300      	movs	r3, #0
1000c576:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000c578:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000c57a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000c57c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000c57e:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c580:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c582:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000c584:	2380      	movs	r3, #128	; 0x80
1000c586:	009b      	lsls	r3, r3, #2
1000c588:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000c58a:	0020      	movs	r0, r4
1000c58c:	4b34      	ldr	r3, [pc, #208]	; (1000c660 <ble_device_init+0x278>)
1000c58e:	4798      	blx	r3
1000c590:	2800      	cmp	r0, #0
1000c592:	d005      	beq.n	1000c5a0 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000c594:	4822      	ldr	r0, [pc, #136]	; (1000c620 <ble_device_init+0x238>)
1000c596:	4b23      	ldr	r3, [pc, #140]	; (1000c624 <ble_device_init+0x23c>)
1000c598:	4798      	blx	r3
1000c59a:	4832      	ldr	r0, [pc, #200]	; (1000c664 <ble_device_init+0x27c>)
1000c59c:	4b23      	ldr	r3, [pc, #140]	; (1000c62c <ble_device_init+0x244>)
1000c59e:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000c5a0:	0030      	movs	r0, r6
1000c5a2:	4b31      	ldr	r3, [pc, #196]	; (1000c668 <ble_device_init+0x280>)
1000c5a4:	4798      	blx	r3
1000c5a6:	2800      	cmp	r0, #0
1000c5a8:	d005      	beq.n	1000c5b6 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000c5aa:	481d      	ldr	r0, [pc, #116]	; (1000c620 <ble_device_init+0x238>)
1000c5ac:	4b1d      	ldr	r3, [pc, #116]	; (1000c624 <ble_device_init+0x23c>)
1000c5ae:	4798      	blx	r3
1000c5b0:	482e      	ldr	r0, [pc, #184]	; (1000c66c <ble_device_init+0x284>)
1000c5b2:	4b1e      	ldr	r3, [pc, #120]	; (1000c62c <ble_device_init+0x244>)
1000c5b4:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000c5b6:	b00d      	add	sp, #52	; 0x34
1000c5b8:	bc3c      	pop	{r2, r3, r4, r5}
1000c5ba:	4690      	mov	r8, r2
1000c5bc:	4699      	mov	r9, r3
1000c5be:	46a2      	mov	sl, r4
1000c5c0:	46ab      	mov	fp, r5
1000c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5c4:	10017560 	.word	0x10017560
1000c5c8:	10017568 	.word	0x10017568
1000c5cc:	10014a41 	.word	0x10014a41
1000c5d0:	10018d38 	.word	0x10018d38
1000c5d4:	000004e2 	.word	0x000004e2
1000c5d8:	10017080 	.word	0x10017080
1000c5dc:	10017564 	.word	0x10017564
1000c5e0:	10018d70 	.word	0x10018d70
1000c5e4:	10018d68 	.word	0x10018d68
1000c5e8:	100190a4 	.word	0x100190a4
1000c5ec:	10016c80 	.word	0x10016c80
1000c5f0:	10017570 	.word	0x10017570
1000c5f4:	10018d4c 	.word	0x10018d4c
1000c5f8:	10018d10 	.word	0x10018d10
1000c5fc:	10018d24 	.word	0x10018d24
1000c600:	10018a78 	.word	0x10018a78
1000c604:	10018d6c 	.word	0x10018d6c
1000c608:	10018a74 	.word	0x10018a74
1000c60c:	10018cfc 	.word	0x10018cfc
1000c610:	100192b0 	.word	0x100192b0
1000c614:	10018a8c 	.word	0x10018a8c
1000c618:	10018cf8 	.word	0x10018cf8
1000c61c:	1000e121 	.word	0x1000e121
1000c620:	10015bf0 	.word	0x10015bf0
1000c624:	10014ca9 	.word	0x10014ca9
1000c628:	10016640 	.word	0x10016640
1000c62c:	10014b89 	.word	0x10014b89
1000c630:	1001666c 	.word	0x1001666c
1000c634:	100168c0 	.word	0x100168c0
1000c638:	1000c319 	.word	0x1000c319
1000c63c:	1001625c 	.word	0x1001625c
1000c640:	100166b4 	.word	0x100166b4
1000c644:	1000e039 	.word	0x1000e039
1000c648:	100166c0 	.word	0x100166c0
1000c64c:	1001624c 	.word	0x1001624c
1000c650:	10014a2f 	.word	0x10014a2f
1000c654:	1000e06d 	.word	0x1000e06d
1000c658:	100166d8 	.word	0x100166d8
1000c65c:	00003a98 	.word	0x00003a98
1000c660:	1000e091 	.word	0x1000e091
1000c664:	10016704 	.word	0x10016704
1000c668:	1000e2d5 	.word	0x1000e2d5
1000c66c:	10016740 	.word	0x10016740

1000c670 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000c670:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000c672:	2200      	movs	r2, #0
1000c674:	2100      	movs	r1, #0
1000c676:	4b06      	ldr	r3, [pc, #24]	; (1000c690 <ble_send_slave_sec_request+0x20>)
1000c678:	4798      	blx	r3
1000c67a:	2800      	cmp	r0, #0
1000c67c:	d006      	beq.n	1000c68c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000c67e:	4805      	ldr	r0, [pc, #20]	; (1000c694 <ble_send_slave_sec_request+0x24>)
1000c680:	4b05      	ldr	r3, [pc, #20]	; (1000c698 <ble_send_slave_sec_request+0x28>)
1000c682:	4798      	blx	r3
1000c684:	4805      	ldr	r0, [pc, #20]	; (1000c69c <ble_send_slave_sec_request+0x2c>)
1000c686:	4b06      	ldr	r3, [pc, #24]	; (1000c6a0 <ble_send_slave_sec_request+0x30>)
1000c688:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000c68a:	20e2      	movs	r0, #226	; 0xe2
}
1000c68c:	bd10      	pop	{r4, pc}
1000c68e:	46c0      	nop			; (mov r8, r8)
1000c690:	1000f045 	.word	0x1000f045
1000c694:	10015bf0 	.word	0x10015bf0
1000c698:	10014ca9 	.word	0x10014ca9
1000c69c:	10016790 	.word	0x10016790
1000c6a0:	10014b89 	.word	0x10014b89

1000c6a4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6a6:	465f      	mov	r7, fp
1000c6a8:	464e      	mov	r6, r9
1000c6aa:	4645      	mov	r5, r8
1000c6ac:	b4e0      	push	{r5, r6, r7}
1000c6ae:	b09a      	sub	sp, #104	; 0x68
1000c6b0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000c6b2:	7a86      	ldrb	r6, [r0, #10]
1000c6b4:	2e00      	cmp	r6, #0
1000c6b6:	d000      	beq.n	1000c6ba <ble_connected_state_handler+0x16>
1000c6b8:	e0c6      	b.n	1000c848 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000c6ba:	4875      	ldr	r0, [pc, #468]	; (1000c890 <ble_connected_state_handler+0x1ec>)
1000c6bc:	4f75      	ldr	r7, [pc, #468]	; (1000c894 <ble_connected_state_handler+0x1f0>)
1000c6be:	47b8      	blx	r7
1000c6c0:	792b      	ldrb	r3, [r5, #4]
1000c6c2:	796a      	ldrb	r2, [r5, #5]
1000c6c4:	79a9      	ldrb	r1, [r5, #6]
1000c6c6:	7868      	ldrb	r0, [r5, #1]
1000c6c8:	9002      	str	r0, [sp, #8]
1000c6ca:	78a8      	ldrb	r0, [r5, #2]
1000c6cc:	9001      	str	r0, [sp, #4]
1000c6ce:	78e8      	ldrb	r0, [r5, #3]
1000c6d0:	9000      	str	r0, [sp, #0]
1000c6d2:	4871      	ldr	r0, [pc, #452]	; (1000c898 <ble_connected_state_handler+0x1f4>)
1000c6d4:	4c71      	ldr	r4, [pc, #452]	; (1000c89c <ble_connected_state_handler+0x1f8>)
1000c6d6:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000c6d8:	486d      	ldr	r0, [pc, #436]	; (1000c890 <ble_connected_state_handler+0x1ec>)
1000c6da:	47b8      	blx	r7
1000c6dc:	8929      	ldrh	r1, [r5, #8]
1000c6de:	4870      	ldr	r0, [pc, #448]	; (1000c8a0 <ble_connected_state_handler+0x1fc>)
1000c6e0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000c6e2:	2212      	movs	r2, #18
1000c6e4:	0029      	movs	r1, r5
1000c6e6:	486f      	ldr	r0, [pc, #444]	; (1000c8a4 <ble_connected_state_handler+0x200>)
1000c6e8:	4b6f      	ldr	r3, [pc, #444]	; (1000c8a8 <ble_connected_state_handler+0x204>)
1000c6ea:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c6ec:	9504      	str	r5, [sp, #16]
1000c6ee:	2207      	movs	r2, #7
1000c6f0:	0029      	movs	r1, r5
1000c6f2:	486e      	ldr	r0, [pc, #440]	; (1000c8ac <ble_connected_state_handler+0x208>)
1000c6f4:	4b6e      	ldr	r3, [pc, #440]	; (1000c8b0 <ble_connected_state_handler+0x20c>)
1000c6f6:	4798      	blx	r3
1000c6f8:	2800      	cmp	r0, #0
1000c6fa:	d100      	bne.n	1000c6fe <ble_connected_state_handler+0x5a>
1000c6fc:	e0ad      	b.n	1000c85a <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000c6fe:	782b      	ldrb	r3, [r5, #0]
1000c700:	2b02      	cmp	r3, #2
1000c702:	d000      	beq.n	1000c706 <ble_connected_state_handler+0x62>
1000c704:	e0a9      	b.n	1000c85a <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000c706:	2250      	movs	r2, #80	; 0x50
1000c708:	2100      	movs	r1, #0
1000c70a:	a806      	add	r0, sp, #24
1000c70c:	4b69      	ldr	r3, [pc, #420]	; (1000c8b4 <ble_connected_state_handler+0x210>)
1000c70e:	4798      	blx	r3
1000c710:	4f69      	ldr	r7, [pc, #420]	; (1000c8b8 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000c712:	2300      	movs	r3, #0
1000c714:	e00b      	b.n	1000c72e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c716:	1c59      	adds	r1, r3, #1
1000c718:	7814      	ldrb	r4, [r2, #0]
1000c71a:	a806      	add	r0, sp, #24
1000c71c:	54c4      	strb	r4, [r0, r3]
1000c71e:	3201      	adds	r2, #1
1000c720:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000c722:	42b3      	cmp	r3, r6
1000c724:	d1f7      	bne.n	1000c716 <ble_connected_state_handler+0x72>
1000c726:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c728:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000c72a:	2b50      	cmp	r3, #80	; 0x50
1000c72c:	d004      	beq.n	1000c738 <ble_connected_state_handler+0x94>
1000c72e:	001e      	movs	r6, r3
1000c730:	3610      	adds	r6, #16
1000c732:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c734:	003a      	movs	r2, r7
1000c736:	e7ee      	b.n	1000c716 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000c738:	aa06      	add	r2, sp, #24
1000c73a:	0029      	movs	r1, r5
1000c73c:	2005      	movs	r0, #5
1000c73e:	4b5f      	ldr	r3, [pc, #380]	; (1000c8bc <ble_connected_state_handler+0x218>)
1000c740:	4798      	blx	r3
1000c742:	1e06      	subs	r6, r0, #0
1000c744:	d100      	bne.n	1000c748 <ble_connected_state_handler+0xa4>
1000c746:	e09c      	b.n	1000c882 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000c748:	4851      	ldr	r0, [pc, #324]	; (1000c890 <ble_connected_state_handler+0x1ec>)
1000c74a:	4b52      	ldr	r3, [pc, #328]	; (1000c894 <ble_connected_state_handler+0x1f0>)
1000c74c:	4798      	blx	r3
1000c74e:	485c      	ldr	r0, [pc, #368]	; (1000c8c0 <ble_connected_state_handler+0x21c>)
1000c750:	4b52      	ldr	r3, [pc, #328]	; (1000c89c <ble_connected_state_handler+0x1f8>)
1000c752:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000c754:	26e2      	movs	r6, #226	; 0xe2
1000c756:	e094      	b.n	1000c882 <ble_connected_state_handler+0x1de>
1000c758:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c75a:	9405      	str	r4, [sp, #20]
1000c75c:	2207      	movs	r2, #7
1000c75e:	9904      	ldr	r1, [sp, #16]
1000c760:	4648      	mov	r0, r9
1000c762:	47d8      	blx	fp
1000c764:	2800      	cmp	r0, #0
1000c766:	d109      	bne.n	1000c77c <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c768:	9a05      	ldr	r2, [sp, #20]
1000c76a:	0153      	lsls	r3, r2, #5
1000c76c:	1a9b      	subs	r3, r3, r2
1000c76e:	009a      	lsls	r2, r3, #2
1000c770:	4b54      	ldr	r3, [pc, #336]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c772:	189b      	adds	r3, r3, r2
1000c774:	335e      	adds	r3, #94	; 0x5e
1000c776:	2202      	movs	r2, #2
1000c778:	701a      	strb	r2, [r3, #0]
1000c77a:	e02b      	b.n	1000c7d4 <ble_connected_state_handler+0x130>
1000c77c:	3401      	adds	r4, #1
1000c77e:	237c      	movs	r3, #124	; 0x7c
1000c780:	469c      	mov	ip, r3
1000c782:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c784:	2c05      	cmp	r4, #5
1000c786:	d1e7      	bne.n	1000c758 <ble_connected_state_handler+0xb4>
1000c788:	e072      	b.n	1000c870 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c78a:	001c      	movs	r4, r3
1000c78c:	7811      	ldrb	r1, [r2, #0]
1000c78e:	2900      	cmp	r1, #0
1000c790:	d11a      	bne.n	1000c7c8 <ble_connected_state_handler+0x124>
1000c792:	e001      	b.n	1000c798 <ble_connected_state_handler+0xf4>
1000c794:	2400      	movs	r4, #0
1000c796:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000c798:	0163      	lsls	r3, r4, #5
1000c79a:	4699      	mov	r9, r3
1000c79c:	1b18      	subs	r0, r3, r4
1000c79e:	0080      	lsls	r0, r0, #2
1000c7a0:	4b48      	ldr	r3, [pc, #288]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c7a2:	4698      	mov	r8, r3
1000c7a4:	4440      	add	r0, r8
1000c7a6:	2212      	movs	r2, #18
1000c7a8:	0029      	movs	r1, r5
1000c7aa:	4b3f      	ldr	r3, [pc, #252]	; (1000c8a8 <ble_connected_state_handler+0x204>)
1000c7ac:	4798      	blx	r3
						ble_device_count++;
1000c7ae:	4a46      	ldr	r2, [pc, #280]	; (1000c8c8 <ble_connected_state_handler+0x224>)
1000c7b0:	7813      	ldrb	r3, [r2, #0]
1000c7b2:	3301      	adds	r3, #1
1000c7b4:	b2db      	uxtb	r3, r3
1000c7b6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c7b8:	464b      	mov	r3, r9
1000c7ba:	1b1b      	subs	r3, r3, r4
1000c7bc:	009b      	lsls	r3, r3, #2
1000c7be:	4443      	add	r3, r8
1000c7c0:	335e      	adds	r3, #94	; 0x5e
1000c7c2:	2202      	movs	r2, #2
1000c7c4:	701a      	strb	r2, [r3, #0]
						break;
1000c7c6:	e005      	b.n	1000c7d4 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7c8:	1c79      	adds	r1, r7, #1
1000c7ca:	b2cf      	uxtb	r7, r1
1000c7cc:	3301      	adds	r3, #1
1000c7ce:	327c      	adds	r2, #124	; 0x7c
1000c7d0:	2f05      	cmp	r7, #5
1000c7d2:	d1da      	bne.n	1000c78a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c7d4:	2207      	movs	r2, #7
1000c7d6:	0029      	movs	r1, r5
1000c7d8:	4834      	ldr	r0, [pc, #208]	; (1000c8ac <ble_connected_state_handler+0x208>)
1000c7da:	4b35      	ldr	r3, [pc, #212]	; (1000c8b0 <ble_connected_state_handler+0x20c>)
1000c7dc:	4798      	blx	r3
1000c7de:	2800      	cmp	r0, #0
1000c7e0:	d10c      	bne.n	1000c7fc <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000c7e2:	017b      	lsls	r3, r7, #5
1000c7e4:	1bdb      	subs	r3, r3, r7
1000c7e6:	009b      	lsls	r3, r3, #2
1000c7e8:	4a36      	ldr	r2, [pc, #216]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c7ea:	18d3      	adds	r3, r2, r3
1000c7ec:	2205      	movs	r2, #5
1000c7ee:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c7f0:	3202      	adds	r2, #2
1000c7f2:	2100      	movs	r1, #0
1000c7f4:	482d      	ldr	r0, [pc, #180]	; (1000c8ac <ble_connected_state_handler+0x208>)
1000c7f6:	4b2f      	ldr	r3, [pc, #188]	; (1000c8b4 <ble_connected_state_handler+0x210>)
1000c7f8:	4798      	blx	r3
1000c7fa:	e042      	b.n	1000c882 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c7fc:	4b31      	ldr	r3, [pc, #196]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c7fe:	4698      	mov	r8, r3
1000c800:	017c      	lsls	r4, r7, #5
1000c802:	1be3      	subs	r3, r4, r7
1000c804:	009b      	lsls	r3, r3, #2
1000c806:	4443      	add	r3, r8
1000c808:	220a      	movs	r2, #10
1000c80a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c80c:	3a03      	subs	r2, #3
1000c80e:	2100      	movs	r1, #0
1000c810:	4826      	ldr	r0, [pc, #152]	; (1000c8ac <ble_connected_state_handler+0x208>)
1000c812:	4b28      	ldr	r3, [pc, #160]	; (1000c8b4 <ble_connected_state_handler+0x210>)
1000c814:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c816:	1be4      	subs	r4, r4, r7
1000c818:	00a4      	lsls	r4, r4, #2
1000c81a:	4444      	add	r4, r8
1000c81c:	7ca3      	ldrb	r3, [r4, #18]
1000c81e:	2b0a      	cmp	r3, #10
1000c820:	d12f      	bne.n	1000c882 <ble_connected_state_handler+0x1de>
1000c822:	e00d      	b.n	1000c840 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000c824:	481a      	ldr	r0, [pc, #104]	; (1000c890 <ble_connected_state_handler+0x1ec>)
1000c826:	4b1b      	ldr	r3, [pc, #108]	; (1000c894 <ble_connected_state_handler+0x1f0>)
1000c828:	4798      	blx	r3
1000c82a:	4b27      	ldr	r3, [pc, #156]	; (1000c8c8 <ble_connected_state_handler+0x224>)
1000c82c:	7819      	ldrb	r1, [r3, #0]
1000c82e:	b2c9      	uxtb	r1, r1
1000c830:	4826      	ldr	r0, [pc, #152]	; (1000c8cc <ble_connected_state_handler+0x228>)
1000c832:	4b1a      	ldr	r3, [pc, #104]	; (1000c89c <ble_connected_state_handler+0x1f8>)
1000c834:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000c836:	8928      	ldrh	r0, [r5, #8]
1000c838:	2113      	movs	r1, #19
1000c83a:	4b25      	ldr	r3, [pc, #148]	; (1000c8d0 <ble_connected_state_handler+0x22c>)
1000c83c:	4798      	blx	r3
1000c83e:	e020      	b.n	1000c882 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000c840:	8928      	ldrh	r0, [r5, #8]
1000c842:	4b24      	ldr	r3, [pc, #144]	; (1000c8d4 <ble_connected_state_handler+0x230>)
1000c844:	4798      	blx	r3
1000c846:	e01c      	b.n	1000c882 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000c848:	4811      	ldr	r0, [pc, #68]	; (1000c890 <ble_connected_state_handler+0x1ec>)
1000c84a:	4b12      	ldr	r3, [pc, #72]	; (1000c894 <ble_connected_state_handler+0x1f0>)
1000c84c:	4798      	blx	r3
1000c84e:	7aa9      	ldrb	r1, [r5, #10]
1000c850:	4821      	ldr	r0, [pc, #132]	; (1000c8d8 <ble_connected_state_handler+0x234>)
1000c852:	4b12      	ldr	r3, [pc, #72]	; (1000c89c <ble_connected_state_handler+0x1f8>)
1000c854:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000c856:	2600      	movs	r6, #0
1000c858:	e013      	b.n	1000c882 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000c85a:	4b1b      	ldr	r3, [pc, #108]	; (1000c8c8 <ble_connected_state_handler+0x224>)
1000c85c:	781b      	ldrb	r3, [r3, #0]
1000c85e:	b2db      	uxtb	r3, r3
1000c860:	2b04      	cmp	r3, #4
1000c862:	d8df      	bhi.n	1000c824 <ble_connected_state_handler+0x180>
1000c864:	4b17      	ldr	r3, [pc, #92]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c866:	4699      	mov	r9, r3
1000c868:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c86a:	4b11      	ldr	r3, [pc, #68]	; (1000c8b0 <ble_connected_state_handler+0x20c>)
1000c86c:	469b      	mov	fp, r3
1000c86e:	e773      	b.n	1000c758 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c870:	235e      	movs	r3, #94	; 0x5e
1000c872:	4a14      	ldr	r2, [pc, #80]	; (1000c8c4 <ble_connected_state_handler+0x220>)
1000c874:	5cd3      	ldrb	r3, [r2, r3]
1000c876:	2b00      	cmp	r3, #0
1000c878:	d08c      	beq.n	1000c794 <ble_connected_state_handler+0xf0>
1000c87a:	4a18      	ldr	r2, [pc, #96]	; (1000c8dc <ble_connected_state_handler+0x238>)
1000c87c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c87e:	2701      	movs	r7, #1
1000c880:	e783      	b.n	1000c78a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000c882:	0030      	movs	r0, r6
1000c884:	b01a      	add	sp, #104	; 0x68
1000c886:	bc1c      	pop	{r2, r3, r4}
1000c888:	4690      	mov	r8, r2
1000c88a:	4699      	mov	r9, r3
1000c88c:	46a3      	mov	fp, r4
1000c88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c890:	10015bf0 	.word	0x10015bf0
1000c894:	10014ca9 	.word	0x10014ca9
1000c898:	100167b0 	.word	0x100167b0
1000c89c:	10014b89 	.word	0x10014b89
1000c8a0:	100167f4 	.word	0x100167f4
1000c8a4:	10018d38 	.word	0x10018d38
1000c8a8:	10014a2f 	.word	0x10014a2f
1000c8ac:	10017568 	.word	0x10017568
1000c8b0:	10014a11 	.word	0x10014a11
1000c8b4:	10014a41 	.word	0x10014a41
1000c8b8:	10018ad2 	.word	0x10018ad2
1000c8bc:	1000e541 	.word	0x1000e541
1000c8c0:	1001680c 	.word	0x1001680c
1000c8c4:	10018a8c 	.word	0x10018a8c
1000c8c8:	10018cf8 	.word	0x10018cf8
1000c8cc:	10016830 	.word	0x10016830
1000c8d0:	1000e515 	.word	0x1000e515
1000c8d4:	1000c671 	.word	0x1000c671
1000c8d8:	1001686c 	.word	0x1001686c
1000c8dc:	10018b66 	.word	0x10018b66

1000c8e0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000c8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8e2:	4647      	mov	r7, r8
1000c8e4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c8e6:	7803      	ldrb	r3, [r0, #0]
1000c8e8:	2b00      	cmp	r3, #0
1000c8ea:	d141      	bne.n	1000c970 <ble_resolv_rand_addr_handler+0x90>
1000c8ec:	4d2f      	ldr	r5, [pc, #188]	; (1000c9ac <ble_resolv_rand_addr_handler+0xcc>)
1000c8ee:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000c8f0:	1c46      	adds	r6, r0, #1
1000c8f2:	4f2f      	ldr	r7, [pc, #188]	; (1000c9b0 <ble_resolv_rand_addr_handler+0xd0>)
1000c8f4:	2210      	movs	r2, #16
1000c8f6:	0029      	movs	r1, r5
1000c8f8:	0030      	movs	r0, r6
1000c8fa:	47b8      	blx	r7
1000c8fc:	2800      	cmp	r0, #0
1000c8fe:	d03f      	beq.n	1000c980 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c900:	3401      	adds	r4, #1
1000c902:	b2e4      	uxtb	r4, r4
1000c904:	357c      	adds	r5, #124	; 0x7c
1000c906:	2c05      	cmp	r4, #5
1000c908:	d1f4      	bne.n	1000c8f4 <ble_resolv_rand_addr_handler+0x14>
1000c90a:	e031      	b.n	1000c970 <ble_resolv_rand_addr_handler+0x90>
1000c90c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c90e:	001c      	movs	r4, r3
1000c910:	7811      	ldrb	r1, [r2, #0]
1000c912:	2900      	cmp	r1, #0
1000c914:	d122      	bne.n	1000c95c <ble_resolv_rand_addr_handler+0x7c>
1000c916:	e001      	b.n	1000c91c <ble_resolv_rand_addr_handler+0x3c>
1000c918:	2400      	movs	r4, #0
1000c91a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c91c:	4b25      	ldr	r3, [pc, #148]	; (1000c9b4 <ble_resolv_rand_addr_handler+0xd4>)
1000c91e:	4698      	mov	r8, r3
1000c920:	0166      	lsls	r6, r4, #5
1000c922:	1b37      	subs	r7, r6, r4
1000c924:	00bf      	lsls	r7, r7, #2
1000c926:	4447      	add	r7, r8
1000c928:	2212      	movs	r2, #18
1000c92a:	4923      	ldr	r1, [pc, #140]	; (1000c9b8 <ble_resolv_rand_addr_handler+0xd8>)
1000c92c:	0038      	movs	r0, r7
1000c92e:	4b23      	ldr	r3, [pc, #140]	; (1000c9bc <ble_resolv_rand_addr_handler+0xdc>)
1000c930:	4798      	blx	r3
				ble_device_count++;
1000c932:	4a23      	ldr	r2, [pc, #140]	; (1000c9c0 <ble_resolv_rand_addr_handler+0xe0>)
1000c934:	7813      	ldrb	r3, [r2, #0]
1000c936:	3301      	adds	r3, #1
1000c938:	b2db      	uxtb	r3, r3
1000c93a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c93c:	375e      	adds	r7, #94	; 0x5e
1000c93e:	2302      	movs	r3, #2
1000c940:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c942:	1b34      	subs	r4, r6, r4
1000c944:	00a4      	lsls	r4, r4, #2
1000c946:	4444      	add	r4, r8
1000c948:	3308      	adds	r3, #8
1000c94a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c94c:	016b      	lsls	r3, r5, #5
1000c94e:	1b5d      	subs	r5, r3, r5
1000c950:	00ad      	lsls	r5, r5, #2
1000c952:	4445      	add	r5, r8
1000c954:	7cab      	ldrb	r3, [r5, #18]
1000c956:	2b0a      	cmp	r3, #10
1000c958:	d123      	bne.n	1000c9a2 <ble_resolv_rand_addr_handler+0xc2>
1000c95a:	e004      	b.n	1000c966 <ble_resolv_rand_addr_handler+0x86>
1000c95c:	3301      	adds	r3, #1
1000c95e:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c960:	2b05      	cmp	r3, #5
1000c962:	d1d3      	bne.n	1000c90c <ble_resolv_rand_addr_handler+0x2c>
1000c964:	e01d      	b.n	1000c9a2 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c966:	4b14      	ldr	r3, [pc, #80]	; (1000c9b8 <ble_resolv_rand_addr_handler+0xd8>)
1000c968:	8918      	ldrh	r0, [r3, #8]
1000c96a:	4b16      	ldr	r3, [pc, #88]	; (1000c9c4 <ble_resolv_rand_addr_handler+0xe4>)
1000c96c:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000c96e:	e018      	b.n	1000c9a2 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c970:	235e      	movs	r3, #94	; 0x5e
1000c972:	4a10      	ldr	r2, [pc, #64]	; (1000c9b4 <ble_resolv_rand_addr_handler+0xd4>)
1000c974:	5cd3      	ldrb	r3, [r2, r3]
1000c976:	2b00      	cmp	r3, #0
1000c978:	d0ce      	beq.n	1000c918 <ble_resolv_rand_addr_handler+0x38>
1000c97a:	4a13      	ldr	r2, [pc, #76]	; (1000c9c8 <ble_resolv_rand_addr_handler+0xe8>)
1000c97c:	2301      	movs	r3, #1
1000c97e:	e7c5      	b.n	1000c90c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c980:	480c      	ldr	r0, [pc, #48]	; (1000c9b4 <ble_resolv_rand_addr_handler+0xd4>)
1000c982:	0163      	lsls	r3, r4, #5
1000c984:	1b1a      	subs	r2, r3, r4
1000c986:	0092      	lsls	r2, r2, #2
1000c988:	1882      	adds	r2, r0, r2
1000c98a:	0011      	movs	r1, r2
1000c98c:	315e      	adds	r1, #94	; 0x5e
1000c98e:	2502      	movs	r5, #2
1000c990:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c992:	210a      	movs	r1, #10
1000c994:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c996:	0010      	movs	r0, r2
1000c998:	2212      	movs	r2, #18
1000c99a:	4907      	ldr	r1, [pc, #28]	; (1000c9b8 <ble_resolv_rand_addr_handler+0xd8>)
1000c99c:	4b07      	ldr	r3, [pc, #28]	; (1000c9bc <ble_resolv_rand_addr_handler+0xdc>)
1000c99e:	4798      	blx	r3
1000c9a0:	e7e1      	b.n	1000c966 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c9a2:	2000      	movs	r0, #0
1000c9a4:	bc04      	pop	{r2}
1000c9a6:	4690      	mov	r8, r2
1000c9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c9aa:	46c0      	nop			; (mov r8, r8)
1000c9ac:	10018ad2 	.word	0x10018ad2
1000c9b0:	10014a11 	.word	0x10014a11
1000c9b4:	10018a8c 	.word	0x10018a8c
1000c9b8:	10018d38 	.word	0x10018d38
1000c9bc:	10014a2f 	.word	0x10014a2f
1000c9c0:	10018cf8 	.word	0x10018cf8
1000c9c4:	1000c671 	.word	0x1000c671
1000c9c8:	10018b66 	.word	0x10018b66

1000c9cc <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000c9cc:	b510      	push	{r4, lr}
1000c9ce:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000c9d0:	ac08      	add	r4, sp, #32
1000c9d2:	2203      	movs	r2, #3
1000c9d4:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000c9d6:	2302      	movs	r3, #2
1000c9d8:	70a3      	strb	r3, [r4, #2]
1000c9da:	3316      	adds	r3, #22
1000c9dc:	70e3      	strb	r3, [r4, #3]
1000c9de:	7122      	strb	r2, [r4, #4]
1000c9e0:	7163      	strb	r3, [r4, #5]
1000c9e2:	3201      	adds	r2, #1
1000c9e4:	71a2      	strb	r2, [r4, #6]
1000c9e6:	71e3      	strb	r3, [r4, #7]
1000c9e8:	320b      	adds	r2, #11
1000c9ea:	7222      	strb	r2, [r4, #8]
1000c9ec:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000c9ee:	3b0f      	subs	r3, #15
1000c9f0:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000c9f2:	3a05      	subs	r2, #5
1000c9f4:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000c9f6:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000c9f8:	aa0b      	add	r2, sp, #44	; 0x2c
1000c9fa:	4b10      	ldr	r3, [pc, #64]	; (1000ca3c <ble_advertisement_data_set+0x70>)
1000c9fc:	cb03      	ldmia	r3!, {r0, r1}
1000c9fe:	c203      	stmia	r2!, {r0, r1}
1000ca00:	781b      	ldrb	r3, [r3, #0]
1000ca02:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ca04:	2307      	movs	r3, #7
1000ca06:	466a      	mov	r2, sp
1000ca08:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ca0a:	33f8      	adds	r3, #248	; 0xf8
1000ca0c:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ca0e:	2206      	movs	r2, #6
1000ca10:	490b      	ldr	r1, [pc, #44]	; (1000ca40 <ble_advertisement_data_set+0x74>)
1000ca12:	466b      	mov	r3, sp
1000ca14:	1c98      	adds	r0, r3, #2
1000ca16:	4b0b      	ldr	r3, [pc, #44]	; (1000ca44 <ble_advertisement_data_set+0x78>)
1000ca18:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ca1a:	2308      	movs	r3, #8
1000ca1c:	466a      	mov	r2, sp
1000ca1e:	2115      	movs	r1, #21
1000ca20:	0020      	movs	r0, r4
1000ca22:	4c09      	ldr	r4, [pc, #36]	; (1000ca48 <ble_advertisement_data_set+0x7c>)
1000ca24:	47a0      	blx	r4
1000ca26:	2800      	cmp	r0, #0
1000ca28:	d005      	beq.n	1000ca36 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ca2a:	4808      	ldr	r0, [pc, #32]	; (1000ca4c <ble_advertisement_data_set+0x80>)
1000ca2c:	4b08      	ldr	r3, [pc, #32]	; (1000ca50 <ble_advertisement_data_set+0x84>)
1000ca2e:	4798      	blx	r3
1000ca30:	4808      	ldr	r0, [pc, #32]	; (1000ca54 <ble_advertisement_data_set+0x88>)
1000ca32:	4b09      	ldr	r3, [pc, #36]	; (1000ca58 <ble_advertisement_data_set+0x8c>)
1000ca34:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ca36:	2000      	movs	r0, #0
1000ca38:	b010      	add	sp, #64	; 0x40
1000ca3a:	bd10      	pop	{r4, pc}
1000ca3c:	100166b4 	.word	0x100166b4
1000ca40:	10016894 	.word	0x10016894
1000ca44:	10014a2f 	.word	0x10014a2f
1000ca48:	1000e329 	.word	0x1000e329
1000ca4c:	10015bf0 	.word	0x10015bf0
1000ca50:	10014ca9 	.word	0x10014ca9
1000ca54:	1001689c 	.word	0x1001689c
1000ca58:	10014b89 	.word	0x10014b89

1000ca5c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ca5c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ca5e:	4b0e      	ldr	r3, [pc, #56]	; (1000ca98 <uart_read_complete_callback+0x3c>)
1000ca60:	781b      	ldrb	r3, [r3, #0]
1000ca62:	2b01      	cmp	r3, #1
1000ca64:	d10b      	bne.n	1000ca7e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ca66:	2202      	movs	r2, #2
1000ca68:	4b0b      	ldr	r3, [pc, #44]	; (1000ca98 <uart_read_complete_callback+0x3c>)
1000ca6a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ca6c:	4b0b      	ldr	r3, [pc, #44]	; (1000ca9c <uart_read_complete_callback+0x40>)
1000ca6e:	681b      	ldr	r3, [r3, #0]
1000ca70:	2b00      	cmp	r3, #0
1000ca72:	d110      	bne.n	1000ca96 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ca74:	2102      	movs	r1, #2
1000ca76:	480a      	ldr	r0, [pc, #40]	; (1000caa0 <uart_read_complete_callback+0x44>)
1000ca78:	4b0a      	ldr	r3, [pc, #40]	; (1000caa4 <uart_read_complete_callback+0x48>)
1000ca7a:	4798      	blx	r3
1000ca7c:	e00b      	b.n	1000ca96 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ca7e:	4b07      	ldr	r3, [pc, #28]	; (1000ca9c <uart_read_complete_callback+0x40>)
1000ca80:	681b      	ldr	r3, [r3, #0]
1000ca82:	2b00      	cmp	r3, #0
1000ca84:	d007      	beq.n	1000ca96 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ca86:	4c08      	ldr	r4, [pc, #32]	; (1000caa8 <uart_read_complete_callback+0x4c>)
1000ca88:	7820      	ldrb	r0, [r4, #0]
1000ca8a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ca8c:	2201      	movs	r2, #1
1000ca8e:	0021      	movs	r1, r4
1000ca90:	4803      	ldr	r0, [pc, #12]	; (1000caa0 <uart_read_complete_callback+0x44>)
1000ca92:	4b06      	ldr	r3, [pc, #24]	; (1000caac <uart_read_complete_callback+0x50>)
1000ca94:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ca96:	bd10      	pop	{r4, pc}
1000ca98:	10018574 	.word	0x10018574
1000ca9c:	1001857c 	.word	0x1001857c
1000caa0:	100192b4 	.word	0x100192b4
1000caa4:	1000b965 	.word	0x1000b965
1000caa8:	10018578 	.word	0x10018578
1000caac:	1000b909 	.word	0x1000b909

1000cab0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000cab0:	b570      	push	{r4, r5, r6, lr}
1000cab2:	0006      	movs	r6, r0
1000cab4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000cab6:	4c03      	ldr	r4, [pc, #12]	; (1000cac4 <usart_serial_getchar+0x14>)
1000cab8:	0029      	movs	r1, r5
1000caba:	0030      	movs	r0, r6
1000cabc:	47a0      	blx	r4
1000cabe:	2800      	cmp	r0, #0
1000cac0:	d1fa      	bne.n	1000cab8 <usart_serial_getchar+0x8>
}
1000cac2:	bd70      	pop	{r4, r5, r6, pc}
1000cac4:	1000b8f5 	.word	0x1000b8f5

1000cac8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000cac8:	b570      	push	{r4, r5, r6, lr}
1000caca:	0006      	movs	r6, r0
1000cacc:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000cace:	4c03      	ldr	r4, [pc, #12]	; (1000cadc <usart_serial_putchar+0x14>)
1000cad0:	0029      	movs	r1, r5
1000cad2:	0030      	movs	r0, r6
1000cad4:	47a0      	blx	r4
1000cad6:	2800      	cmp	r0, #0
1000cad8:	d1fa      	bne.n	1000cad0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000cada:	bd70      	pop	{r4, r5, r6, pc}
1000cadc:	1000b8e5 	.word	0x1000b8e5

1000cae0 <serial_console_init>:

void serial_console_init(void)
{
1000cae0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000cae2:	2100      	movs	r1, #0
1000cae4:	2000      	movs	r0, #0
1000cae6:	4b19      	ldr	r3, [pc, #100]	; (1000cb4c <serial_console_init+0x6c>)
1000cae8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000caea:	4c19      	ldr	r4, [pc, #100]	; (1000cb50 <serial_console_init+0x70>)
1000caec:	0020      	movs	r0, r4
1000caee:	4b19      	ldr	r3, [pc, #100]	; (1000cb54 <serial_console_init+0x74>)
1000caf0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000caf2:	23e1      	movs	r3, #225	; 0xe1
1000caf4:	025b      	lsls	r3, r3, #9
1000caf6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000caf8:	2302      	movs	r3, #2
1000cafa:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000cafc:	2203      	movs	r2, #3
1000cafe:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000cb00:	3201      	adds	r2, #1
1000cb02:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000cb04:	3201      	adds	r2, #1
1000cb06:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000cb08:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000cb0a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000cb0c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000cb0e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000cb10:	4d11      	ldr	r5, [pc, #68]	; (1000cb58 <serial_console_init+0x78>)
1000cb12:	4b12      	ldr	r3, [pc, #72]	; (1000cb5c <serial_console_init+0x7c>)
1000cb14:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000cb16:	4a12      	ldr	r2, [pc, #72]	; (1000cb60 <serial_console_init+0x80>)
1000cb18:	4b12      	ldr	r3, [pc, #72]	; (1000cb64 <serial_console_init+0x84>)
1000cb1a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000cb1c:	4a12      	ldr	r2, [pc, #72]	; (1000cb68 <serial_console_init+0x88>)
1000cb1e:	4b13      	ldr	r3, [pc, #76]	; (1000cb6c <serial_console_init+0x8c>)
1000cb20:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000cb22:	0022      	movs	r2, r4
1000cb24:	4912      	ldr	r1, [pc, #72]	; (1000cb70 <serial_console_init+0x90>)
1000cb26:	0028      	movs	r0, r5
1000cb28:	4b12      	ldr	r3, [pc, #72]	; (1000cb74 <serial_console_init+0x94>)
1000cb2a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000cb2c:	4e12      	ldr	r6, [pc, #72]	; (1000cb78 <serial_console_init+0x98>)
1000cb2e:	6833      	ldr	r3, [r6, #0]
1000cb30:	6898      	ldr	r0, [r3, #8]
1000cb32:	2100      	movs	r1, #0
1000cb34:	4c11      	ldr	r4, [pc, #68]	; (1000cb7c <serial_console_init+0x9c>)
1000cb36:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000cb38:	6833      	ldr	r3, [r6, #0]
1000cb3a:	6858      	ldr	r0, [r3, #4]
1000cb3c:	2100      	movs	r1, #0
1000cb3e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000cb40:	2202      	movs	r2, #2
1000cb42:	490f      	ldr	r1, [pc, #60]	; (1000cb80 <serial_console_init+0xa0>)
1000cb44:	0028      	movs	r0, r5
1000cb46:	4b0f      	ldr	r3, [pc, #60]	; (1000cb84 <serial_console_init+0xa4>)
1000cb48:	4798      	blx	r3
}
1000cb4a:	bd70      	pop	{r4, r5, r6, pc}
1000cb4c:	1000a905 	.word	0x1000a905
1000cb50:	100192d8 	.word	0x100192d8
1000cb54:	1000b6fd 	.word	0x1000b6fd
1000cb58:	100192b4 	.word	0x100192b4
1000cb5c:	10018a70 	.word	0x10018a70
1000cb60:	1000cac9 	.word	0x1000cac9
1000cb64:	10018a6c 	.word	0x10018a6c
1000cb68:	1000cab1 	.word	0x1000cab1
1000cb6c:	10018a68 	.word	0x10018a68
1000cb70:	40004000 	.word	0x40004000
1000cb74:	1000b729 	.word	0x1000b729
1000cb78:	10016c50 	.word	0x10016c50
1000cb7c:	10014d59 	.word	0x10014d59
1000cb80:	1000ca5d 	.word	0x1000ca5d
1000cb84:	1000b931 	.word	0x1000b931

1000cb88 <_time_start>:

void _time_start(unsigned int sec)
{
1000cb88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb8a:	b083      	sub	sp, #12
1000cb8c:	0005      	movs	r5, r0
	system_clock_get_value();
1000cb8e:	4c0d      	ldr	r4, [pc, #52]	; (1000cbc4 <_time_start+0x3c>)
1000cb90:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000cb92:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000cb94:	4f0c      	ldr	r7, [pc, #48]	; (1000cbc8 <_time_start+0x40>)
1000cb96:	47b8      	blx	r7
1000cb98:	4e0c      	ldr	r6, [pc, #48]	; (1000cbcc <_time_start+0x44>)
1000cb9a:	4a0d      	ldr	r2, [pc, #52]	; (1000cbd0 <_time_start+0x48>)
1000cb9c:	4b0d      	ldr	r3, [pc, #52]	; (1000cbd4 <_time_start+0x4c>)
1000cb9e:	47b0      	blx	r6
1000cba0:	9000      	str	r0, [sp, #0]
1000cba2:	9101      	str	r1, [sp, #4]
1000cba4:	20fa      	movs	r0, #250	; 0xfa
1000cba6:	0080      	lsls	r0, r0, #2
1000cba8:	4368      	muls	r0, r5
1000cbaa:	47b8      	blx	r7
1000cbac:	0002      	movs	r2, r0
1000cbae:	000b      	movs	r3, r1
1000cbb0:	9800      	ldr	r0, [sp, #0]
1000cbb2:	9901      	ldr	r1, [sp, #4]
1000cbb4:	47b0      	blx	r6
1000cbb6:	4b08      	ldr	r3, [pc, #32]	; (1000cbd8 <_time_start+0x50>)
1000cbb8:	4798      	blx	r3
1000cbba:	4b08      	ldr	r3, [pc, #32]	; (1000cbdc <_time_start+0x54>)
1000cbbc:	6018      	str	r0, [r3, #0]
}
1000cbbe:	b003      	add	sp, #12
1000cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbc2:	46c0      	nop			; (mov r8, r8)
1000cbc4:	1000a989 	.word	0x1000a989
1000cbc8:	10014739 	.word	0x10014739
1000cbcc:	10013a6d 	.word	0x10013a6d
1000cbd0:	19feaec7 	.word	0x19feaec7
1000cbd4:	3f09d8ef 	.word	0x3f09d8ef
1000cbd8:	10012179 	.word	0x10012179
1000cbdc:	10018570 	.word	0x10018570

1000cbe0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000cbe0:	4b02      	ldr	r3, [pc, #8]	; (1000cbec <_time_done+0xc>)
1000cbe2:	681a      	ldr	r2, [r3, #0]
1000cbe4:	1e50      	subs	r0, r2, #1
1000cbe6:	6018      	str	r0, [r3, #0]
}
1000cbe8:	4770      	bx	lr
1000cbea:	46c0      	nop			; (mov r8, r8)
1000cbec:	10018570 	.word	0x10018570

1000cbf0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000cbf0:	b570      	push	{r4, r5, r6, lr}
1000cbf2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000cbf4:	2201      	movs	r2, #1
1000cbf6:	4b11      	ldr	r3, [pc, #68]	; (1000cc3c <getchar_b11_timeout+0x4c>)
1000cbf8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000cbfa:	4b11      	ldr	r3, [pc, #68]	; (1000cc40 <getchar_b11_timeout+0x50>)
1000cbfc:	681b      	ldr	r3, [r3, #0]
1000cbfe:	2b00      	cmp	r3, #0
1000cc00:	d103      	bne.n	1000cc0a <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000cc02:	2102      	movs	r1, #2
1000cc04:	480f      	ldr	r0, [pc, #60]	; (1000cc44 <getchar_b11_timeout+0x54>)
1000cc06:	4b10      	ldr	r3, [pc, #64]	; (1000cc48 <getchar_b11_timeout+0x58>)
1000cc08:	4798      	blx	r3

	_time_start(sec);
1000cc0a:	0020      	movs	r0, r4
1000cc0c:	4b0f      	ldr	r3, [pc, #60]	; (1000cc4c <getchar_b11_timeout+0x5c>)
1000cc0e:	4798      	blx	r3
	
	string_input[0] = 0;
1000cc10:	490f      	ldr	r1, [pc, #60]	; (1000cc50 <getchar_b11_timeout+0x60>)
1000cc12:	2300      	movs	r3, #0
1000cc14:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000cc16:	2201      	movs	r2, #1
1000cc18:	480a      	ldr	r0, [pc, #40]	; (1000cc44 <getchar_b11_timeout+0x54>)
1000cc1a:	4b0e      	ldr	r3, [pc, #56]	; (1000cc54 <getchar_b11_timeout+0x64>)
1000cc1c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000cc1e:	4c07      	ldr	r4, [pc, #28]	; (1000cc3c <getchar_b11_timeout+0x4c>)
1000cc20:	4d0d      	ldr	r5, [pc, #52]	; (1000cc58 <getchar_b11_timeout+0x68>)
1000cc22:	7823      	ldrb	r3, [r4, #0]
1000cc24:	2b02      	cmp	r3, #2
1000cc26:	d002      	beq.n	1000cc2e <getchar_b11_timeout+0x3e>
1000cc28:	47a8      	blx	r5
1000cc2a:	2800      	cmp	r0, #0
1000cc2c:	d1f9      	bne.n	1000cc22 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000cc2e:	2200      	movs	r2, #0
1000cc30:	4b02      	ldr	r3, [pc, #8]	; (1000cc3c <getchar_b11_timeout+0x4c>)
1000cc32:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000cc34:	4b06      	ldr	r3, [pc, #24]	; (1000cc50 <getchar_b11_timeout+0x60>)
1000cc36:	7818      	ldrb	r0, [r3, #0]
}
1000cc38:	bd70      	pop	{r4, r5, r6, pc}
1000cc3a:	46c0      	nop			; (mov r8, r8)
1000cc3c:	10018574 	.word	0x10018574
1000cc40:	1001857c 	.word	0x1001857c
1000cc44:	100192b4 	.word	0x100192b4
1000cc48:	1000b945 	.word	0x1000b945
1000cc4c:	1000cb89 	.word	0x1000cb89
1000cc50:	10018578 	.word	0x10018578
1000cc54:	1000b909 	.word	0x1000b909
1000cc58:	1000cbe1 	.word	0x1000cbe1

1000cc5c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000cc5c:	4b02      	ldr	r3, [pc, #8]	; (1000cc68 <platform_event_free+0xc>)
1000cc5e:	681a      	ldr	r2, [r3, #0]
1000cc60:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000cc62:	6018      	str	r0, [r3, #0]
}
1000cc64:	4770      	bx	lr
1000cc66:	46c0      	nop			; (mov r8, r8)
1000cc68:	10018584 	.word	0x10018584

1000cc6c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000cc6c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000cc6e:	4b0b      	ldr	r3, [pc, #44]	; (1000cc9c <platform_event_post+0x30>)
1000cc70:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000cc72:	2c00      	cmp	r4, #0
1000cc74:	d011      	beq.n	1000cc9a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000cc76:	6825      	ldr	r5, [r4, #0]
1000cc78:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000cc7a:	2300      	movs	r3, #0
1000cc7c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000cc7e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000cc80:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000cc82:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000cc84:	4b06      	ldr	r3, [pc, #24]	; (1000cca0 <platform_event_post+0x34>)
1000cc86:	681a      	ldr	r2, [r3, #0]
1000cc88:	2a00      	cmp	r2, #0
1000cc8a:	d102      	bne.n	1000cc92 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000cc8c:	601c      	str	r4, [r3, #0]
1000cc8e:	e004      	b.n	1000cc9a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000cc90:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000cc92:	6813      	ldr	r3, [r2, #0]
1000cc94:	2b00      	cmp	r3, #0
1000cc96:	d1fb      	bne.n	1000cc90 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000cc98:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000cc9a:	bd30      	pop	{r4, r5, pc}
1000cc9c:	10018584 	.word	0x10018584
1000cca0:	10018580 	.word	0x10018580

1000cca4 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000cca4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000cca6:	2300      	movs	r3, #0
1000cca8:	4a06      	ldr	r2, [pc, #24]	; (1000ccc4 <platform_event_init+0x20>)
1000ccaa:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ccac:	4a06      	ldr	r2, [pc, #24]	; (1000ccc8 <platform_event_init+0x24>)
1000ccae:	6013      	str	r3, [r2, #0]
1000ccb0:	4c06      	ldr	r4, [pc, #24]	; (1000cccc <platform_event_init+0x28>)
1000ccb2:	0026      	movs	r6, r4
1000ccb4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ccb6:	4d06      	ldr	r5, [pc, #24]	; (1000ccd0 <platform_event_init+0x2c>)
1000ccb8:	0020      	movs	r0, r4
1000ccba:	47a8      	blx	r5
1000ccbc:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ccbe:	42b4      	cmp	r4, r6
1000ccc0:	d1fa      	bne.n	1000ccb8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ccc2:	bd70      	pop	{r4, r5, r6, pc}
1000ccc4:	10018584 	.word	0x10018584
1000ccc8:	10018580 	.word	0x10018580
1000cccc:	10018588 	.word	0x10018588
1000ccd0:	1000cc5d 	.word	0x1000cc5d

1000ccd4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ccd4:	b570      	push	{r4, r5, r6, lr}
1000ccd6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ccd8:	4b13      	ldr	r3, [pc, #76]	; (1000cd28 <at_ke_msg_send+0x54>)
1000ccda:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ccdc:	4b13      	ldr	r3, [pc, #76]	; (1000cd2c <at_ke_msg_send+0x58>)
1000ccde:	681b      	ldr	r3, [r3, #0]
1000cce0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000cce2:	2c0c      	cmp	r4, #12
1000cce4:	d01f      	beq.n	1000cd26 <at_ke_msg_send+0x52>
1000cce6:	3c0c      	subs	r4, #12
1000cce8:	88e3      	ldrh	r3, [r4, #6]
1000ccea:	2b05      	cmp	r3, #5
1000ccec:	d01b      	beq.n	1000cd26 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ccee:	07eb      	lsls	r3, r5, #31
1000ccf0:	d414      	bmi.n	1000cd1c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ccf2:	4b0f      	ldr	r3, [pc, #60]	; (1000cd30 <at_ke_msg_send+0x5c>)
1000ccf4:	681b      	ldr	r3, [r3, #0]
1000ccf6:	2002      	movs	r0, #2
1000ccf8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ccfa:	4b0e      	ldr	r3, [pc, #56]	; (1000cd34 <at_ke_msg_send+0x60>)
1000ccfc:	681b      	ldr	r3, [r3, #0]
1000ccfe:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000cd00:	4c0d      	ldr	r4, [pc, #52]	; (1000cd38 <at_ke_msg_send+0x64>)
1000cd02:	2003      	movs	r0, #3
1000cd04:	6823      	ldr	r3, [r4, #0]
1000cd06:	4798      	blx	r3
1000cd08:	2800      	cmp	r0, #0
1000cd0a:	d1fa      	bne.n	1000cd02 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000cd0c:	4b0b      	ldr	r3, [pc, #44]	; (1000cd3c <at_ke_msg_send+0x68>)
1000cd0e:	681b      	ldr	r3, [r3, #0]
1000cd10:	3002      	adds	r0, #2
1000cd12:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000cd14:	2201      	movs	r2, #1
1000cd16:	4b0a      	ldr	r3, [pc, #40]	; (1000cd40 <at_ke_msg_send+0x6c>)
1000cd18:	601a      	str	r2, [r3, #0]
1000cd1a:	e004      	b.n	1000cd26 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000cd1c:	4b09      	ldr	r3, [pc, #36]	; (1000cd44 <at_ke_msg_send+0x70>)
1000cd1e:	6818      	ldr	r0, [r3, #0]
1000cd20:	4b09      	ldr	r3, [pc, #36]	; (1000cd48 <at_ke_msg_send+0x74>)
1000cd22:	681b      	ldr	r3, [r3, #0]
1000cd24:	4798      	blx	r3
		}
	}
}
1000cd26:	bd70      	pop	{r4, r5, r6, pc}
1000cd28:	4000b1ec 	.word	0x4000b1ec
1000cd2c:	10018630 	.word	0x10018630
1000cd30:	10018628 	.word	0x10018628
1000cd34:	1001863c 	.word	0x1001863c
1000cd38:	10018610 	.word	0x10018610
1000cd3c:	10018618 	.word	0x10018618
1000cd40:	4000b020 	.word	0x4000b020
1000cd44:	1001861c 	.word	0x1001861c
1000cd48:	1001860c 	.word	0x1001860c

1000cd4c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000cd4c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000cd4e:	4b06      	ldr	r3, [pc, #24]	; (1000cd68 <samb11_plf_resume_callback+0x1c>)
1000cd50:	4a06      	ldr	r2, [pc, #24]	; (1000cd6c <samb11_plf_resume_callback+0x20>)
1000cd52:	6819      	ldr	r1, [r3, #0]
1000cd54:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000cd56:	685a      	ldr	r2, [r3, #4]
1000cd58:	4b05      	ldr	r3, [pc, #20]	; (1000cd70 <samb11_plf_resume_callback+0x24>)
1000cd5a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000cd5c:	4b05      	ldr	r3, [pc, #20]	; (1000cd74 <samb11_plf_resume_callback+0x28>)
1000cd5e:	681b      	ldr	r3, [r3, #0]
1000cd60:	2b00      	cmp	r3, #0
1000cd62:	d000      	beq.n	1000cd66 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000cd64:	4798      	blx	r3
	}
}
1000cd66:	bd10      	pop	{r4, pc}
1000cd68:	10019300 	.word	0x10019300
1000cd6c:	4000b00c 	.word	0x4000b00c
1000cd70:	4000b010 	.word	0x4000b010
1000cd74:	100195dc 	.word	0x100195dc

1000cd78 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000cd78:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000cd7a:	2232      	movs	r2, #50	; 0x32
1000cd7c:	2100      	movs	r1, #0
1000cd7e:	480d      	ldr	r0, [pc, #52]	; (1000cdb4 <init_port_list+0x3c>)
1000cd80:	4b0d      	ldr	r3, [pc, #52]	; (1000cdb8 <init_port_list+0x40>)
1000cd82:	4798      	blx	r3
1000cd84:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cd86:	480b      	ldr	r0, [pc, #44]	; (1000cdb4 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000cd88:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000cd8a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cd8c:	004a      	lsls	r2, r1, #1
1000cd8e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000cd90:	1882      	adds	r2, r0, r2
1000cd92:	7853      	ldrb	r3, [r2, #1]
1000cd94:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000cd96:	b2db      	uxtb	r3, r3
1000cd98:	43a3      	bics	r3, r4
1000cd9a:	7053      	strb	r3, [r2, #1]
1000cd9c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000cd9e:	2919      	cmp	r1, #25
1000cda0:	d1f4      	bne.n	1000cd8c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000cda2:	4b04      	ldr	r3, [pc, #16]	; (1000cdb4 <init_port_list+0x3c>)
1000cda4:	785a      	ldrb	r2, [r3, #1]
1000cda6:	3918      	subs	r1, #24
1000cda8:	438a      	bics	r2, r1
1000cdaa:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000cdac:	78da      	ldrb	r2, [r3, #3]
1000cdae:	438a      	bics	r2, r1
1000cdb0:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000cdb2:	bd70      	pop	{r4, r5, r6, pc}
1000cdb4:	1001931c 	.word	0x1001931c
1000cdb8:	10014a41 	.word	0x10014a41

1000cdbc <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000cdbc:	4a06      	ldr	r2, [pc, #24]	; (1000cdd8 <init_clock+0x1c>)
1000cdbe:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000cdc0:	4b06      	ldr	r3, [pc, #24]	; (1000cddc <init_clock+0x20>)
1000cdc2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000cdc4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000cdc6:	4a06      	ldr	r2, [pc, #24]	; (1000cde0 <init_clock+0x24>)
1000cdc8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000cdca:	4906      	ldr	r1, [pc, #24]	; (1000cde4 <init_clock+0x28>)
1000cdcc:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000cdce:	4b06      	ldr	r3, [pc, #24]	; (1000cde8 <init_clock+0x2c>)
1000cdd0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000cdd2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000cdd4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000cdd6:	4770      	bx	lr
1000cdd8:	4000b00c 	.word	0x4000b00c
1000cddc:	fffe0fd3 	.word	0xfffe0fd3
1000cde0:	10019300 	.word	0x10019300
1000cde4:	4000b010 	.word	0x4000b010
1000cde8:	ffffe7c0 	.word	0xffffe7c0

1000cdec <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdee:	4657      	mov	r7, sl
1000cdf0:	464e      	mov	r6, r9
1000cdf2:	4645      	mov	r5, r8
1000cdf4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000cdf6:	4b4f      	ldr	r3, [pc, #316]	; (1000cf34 <platform_driver_init+0x148>)
1000cdf8:	781b      	ldrb	r3, [r3, #0]
1000cdfa:	2b00      	cmp	r3, #0
1000cdfc:	d004      	beq.n	1000ce08 <platform_driver_init+0x1c>
1000cdfe:	4b4d      	ldr	r3, [pc, #308]	; (1000cf34 <platform_driver_init+0x148>)
1000ce00:	781b      	ldrb	r3, [r3, #0]
1000ce02:	2b01      	cmp	r3, #1
1000ce04:	d100      	bne.n	1000ce08 <platform_driver_init+0x1c>
1000ce06:	e08c      	b.n	1000cf22 <platform_driver_init+0x136>
		init_port_list();
1000ce08:	4b4b      	ldr	r3, [pc, #300]	; (1000cf38 <platform_driver_init+0x14c>)
1000ce0a:	4798      	blx	r3
		init_clock();
1000ce0c:	4b4b      	ldr	r3, [pc, #300]	; (1000cf3c <platform_driver_init+0x150>)
1000ce0e:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ce10:	2300      	movs	r3, #0
1000ce12:	4698      	mov	r8, r3
1000ce14:	4b4a      	ldr	r3, [pc, #296]	; (1000cf40 <platform_driver_init+0x154>)
1000ce16:	4642      	mov	r2, r8
1000ce18:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ce1a:	4c4a      	ldr	r4, [pc, #296]	; (1000cf44 <platform_driver_init+0x158>)
1000ce1c:	2380      	movs	r3, #128	; 0x80
1000ce1e:	2280      	movs	r2, #128	; 0x80
1000ce20:	0412      	lsls	r2, r2, #16
1000ce22:	4692      	mov	sl, r2
1000ce24:	50e2      	str	r2, [r4, r3]
1000ce26:	2280      	movs	r2, #128	; 0x80
1000ce28:	0452      	lsls	r2, r2, #17
1000ce2a:	4691      	mov	r9, r2
1000ce2c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ce2e:	4d46      	ldr	r5, [pc, #280]	; (1000cf48 <platform_driver_init+0x15c>)
1000ce30:	4b46      	ldr	r3, [pc, #280]	; (1000cf4c <platform_driver_init+0x160>)
1000ce32:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ce34:	4b46      	ldr	r3, [pc, #280]	; (1000cf50 <platform_driver_init+0x164>)
1000ce36:	4a47      	ldr	r2, [pc, #284]	; (1000cf54 <platform_driver_init+0x168>)
1000ce38:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ce3a:	4947      	ldr	r1, [pc, #284]	; (1000cf58 <platform_driver_init+0x16c>)
1000ce3c:	4a47      	ldr	r2, [pc, #284]	; (1000cf5c <platform_driver_init+0x170>)
1000ce3e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ce40:	4a47      	ldr	r2, [pc, #284]	; (1000cf60 <platform_driver_init+0x174>)
1000ce42:	6811      	ldr	r1, [r2, #0]
1000ce44:	4a47      	ldr	r2, [pc, #284]	; (1000cf64 <platform_driver_init+0x178>)
1000ce46:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ce48:	4a47      	ldr	r2, [pc, #284]	; (1000cf68 <platform_driver_init+0x17c>)
1000ce4a:	6811      	ldr	r1, [r2, #0]
1000ce4c:	4a47      	ldr	r2, [pc, #284]	; (1000cf6c <platform_driver_init+0x180>)
1000ce4e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ce50:	4947      	ldr	r1, [pc, #284]	; (1000cf70 <platform_driver_init+0x184>)
1000ce52:	4a48      	ldr	r2, [pc, #288]	; (1000cf74 <platform_driver_init+0x188>)
1000ce54:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ce56:	4948      	ldr	r1, [pc, #288]	; (1000cf78 <platform_driver_init+0x18c>)
1000ce58:	4a48      	ldr	r2, [pc, #288]	; (1000cf7c <platform_driver_init+0x190>)
1000ce5a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ce5c:	4f48      	ldr	r7, [pc, #288]	; (1000cf80 <platform_driver_init+0x194>)
1000ce5e:	4a49      	ldr	r2, [pc, #292]	; (1000cf84 <platform_driver_init+0x198>)
1000ce60:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ce62:	4949      	ldr	r1, [pc, #292]	; (1000cf88 <platform_driver_init+0x19c>)
1000ce64:	4a49      	ldr	r2, [pc, #292]	; (1000cf8c <platform_driver_init+0x1a0>)
1000ce66:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ce68:	4949      	ldr	r1, [pc, #292]	; (1000cf90 <platform_driver_init+0x1a4>)
1000ce6a:	4a4a      	ldr	r2, [pc, #296]	; (1000cf94 <platform_driver_init+0x1a8>)
1000ce6c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ce6e:	4e4a      	ldr	r6, [pc, #296]	; (1000cf98 <platform_driver_init+0x1ac>)
1000ce70:	4a4a      	ldr	r2, [pc, #296]	; (1000cf9c <platform_driver_init+0x1b0>)
1000ce72:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ce74:	494a      	ldr	r1, [pc, #296]	; (1000cfa0 <platform_driver_init+0x1b4>)
1000ce76:	4a4b      	ldr	r2, [pc, #300]	; (1000cfa4 <platform_driver_init+0x1b8>)
1000ce78:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ce7a:	494b      	ldr	r1, [pc, #300]	; (1000cfa8 <platform_driver_init+0x1bc>)
1000ce7c:	4a4b      	ldr	r2, [pc, #300]	; (1000cfac <platform_driver_init+0x1c0>)
1000ce7e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ce80:	494b      	ldr	r1, [pc, #300]	; (1000cfb0 <platform_driver_init+0x1c4>)
1000ce82:	4a4c      	ldr	r2, [pc, #304]	; (1000cfb4 <platform_driver_init+0x1c8>)
1000ce84:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ce86:	494c      	ldr	r1, [pc, #304]	; (1000cfb8 <platform_driver_init+0x1cc>)
1000ce88:	4a4c      	ldr	r2, [pc, #304]	; (1000cfbc <platform_driver_init+0x1d0>)
1000ce8a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ce8c:	494c      	ldr	r1, [pc, #304]	; (1000cfc0 <platform_driver_init+0x1d4>)
1000ce8e:	4a4d      	ldr	r2, [pc, #308]	; (1000cfc4 <platform_driver_init+0x1d8>)
1000ce90:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ce92:	2028      	movs	r0, #40	; 0x28
1000ce94:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ce96:	494c      	ldr	r1, [pc, #304]	; (1000cfc8 <platform_driver_init+0x1dc>)
1000ce98:	2028      	movs	r0, #40	; 0x28
1000ce9a:	682b      	ldr	r3, [r5, #0]
1000ce9c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ce9e:	682b      	ldr	r3, [r5, #0]
1000cea0:	494a      	ldr	r1, [pc, #296]	; (1000cfcc <platform_driver_init+0x1e0>)
1000cea2:	2027      	movs	r0, #39	; 0x27
1000cea4:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000cea6:	4b4a      	ldr	r3, [pc, #296]	; (1000cfd0 <platform_driver_init+0x1e4>)
1000cea8:	681a      	ldr	r2, [r3, #0]
1000ceaa:	4b4a      	ldr	r3, [pc, #296]	; (1000cfd4 <platform_driver_init+0x1e8>)
1000ceac:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ceae:	4a4a      	ldr	r2, [pc, #296]	; (1000cfd8 <platform_driver_init+0x1ec>)
1000ceb0:	4b4a      	ldr	r3, [pc, #296]	; (1000cfdc <platform_driver_init+0x1f0>)
1000ceb2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ceb4:	4a4a      	ldr	r2, [pc, #296]	; (1000cfe0 <platform_driver_init+0x1f4>)
1000ceb6:	4b4b      	ldr	r3, [pc, #300]	; (1000cfe4 <platform_driver_init+0x1f8>)
1000ceb8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ceba:	4a4b      	ldr	r2, [pc, #300]	; (1000cfe8 <platform_driver_init+0x1fc>)
1000cebc:	4b4b      	ldr	r3, [pc, #300]	; (1000cfec <platform_driver_init+0x200>)
1000cebe:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000cec0:	4a4b      	ldr	r2, [pc, #300]	; (1000cff0 <platform_driver_init+0x204>)
1000cec2:	4b4c      	ldr	r3, [pc, #304]	; (1000cff4 <platform_driver_init+0x208>)
1000cec4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000cec6:	4a4c      	ldr	r2, [pc, #304]	; (1000cff8 <platform_driver_init+0x20c>)
1000cec8:	4b4c      	ldr	r3, [pc, #304]	; (1000cffc <platform_driver_init+0x210>)
1000ceca:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000cecc:	4a4c      	ldr	r2, [pc, #304]	; (1000d000 <platform_driver_init+0x214>)
1000cece:	4b4d      	ldr	r3, [pc, #308]	; (1000d004 <platform_driver_init+0x218>)
1000ced0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000ced2:	4a4d      	ldr	r2, [pc, #308]	; (1000d008 <platform_driver_init+0x21c>)
1000ced4:	4b4d      	ldr	r3, [pc, #308]	; (1000d00c <platform_driver_init+0x220>)
1000ced6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ced8:	22a0      	movs	r2, #160	; 0xa0
1000ceda:	0092      	lsls	r2, r2, #2
1000cedc:	2100      	movs	r1, #0
1000cede:	484c      	ldr	r0, [pc, #304]	; (1000d010 <platform_driver_init+0x224>)
1000cee0:	4b4c      	ldr	r3, [pc, #304]	; (1000d014 <platform_driver_init+0x228>)
1000cee2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000cee4:	2280      	movs	r2, #128	; 0x80
1000cee6:	0092      	lsls	r2, r2, #2
1000cee8:	4b4b      	ldr	r3, [pc, #300]	; (1000d018 <platform_driver_init+0x22c>)
1000ceea:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000ceec:	4b4b      	ldr	r3, [pc, #300]	; (1000d01c <platform_driver_init+0x230>)
1000ceee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cef0:	4653      	mov	r3, sl
1000cef2:	6023      	str	r3, [r4, #0]
1000cef4:	464b      	mov	r3, r9
1000cef6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000cef8:	4b49      	ldr	r3, [pc, #292]	; (1000d020 <platform_driver_init+0x234>)
1000cefa:	4642      	mov	r2, r8
1000cefc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000cefe:	683b      	ldr	r3, [r7, #0]
1000cf00:	4a48      	ldr	r2, [pc, #288]	; (1000d024 <platform_driver_init+0x238>)
1000cf02:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000cf04:	6833      	ldr	r3, [r6, #0]
1000cf06:	4a48      	ldr	r2, [pc, #288]	; (1000d028 <platform_driver_init+0x23c>)
1000cf08:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000cf0a:	2000      	movs	r0, #0
1000cf0c:	4c47      	ldr	r4, [pc, #284]	; (1000d02c <platform_driver_init+0x240>)
1000cf0e:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000cf10:	2001      	movs	r0, #1
1000cf12:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000cf14:	2002      	movs	r0, #2
1000cf16:	47a0      	blx	r4
		platform_initialized = 1;
1000cf18:	2201      	movs	r2, #1
1000cf1a:	4b06      	ldr	r3, [pc, #24]	; (1000cf34 <platform_driver_init+0x148>)
1000cf1c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000cf1e:	2000      	movs	r0, #0
1000cf20:	e003      	b.n	1000cf2a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000cf22:	2201      	movs	r2, #1
1000cf24:	4b03      	ldr	r3, [pc, #12]	; (1000cf34 <platform_driver_init+0x148>)
1000cf26:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000cf28:	2001      	movs	r0, #1
	}
	return status;
}
1000cf2a:	bc1c      	pop	{r2, r3, r4}
1000cf2c:	4690      	mov	r8, r2
1000cf2e:	4699      	mov	r9, r3
1000cf30:	46a2      	mov	sl, r4
1000cf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf34:	10018614 	.word	0x10018614
1000cf38:	1000cd79 	.word	0x1000cd79
1000cf3c:	1000cdbd 	.word	0x1000cdbd
1000cf40:	10018634 	.word	0x10018634
1000cf44:	e000e100 	.word	0xe000e100
1000cf48:	100195d0 	.word	0x100195d0
1000cf4c:	000007d7 	.word	0x000007d7
1000cf50:	000007bd 	.word	0x000007bd
1000cf54:	1001930c 	.word	0x1001930c
1000cf58:	0001bc51 	.word	0x0001bc51
1000cf5c:	100195d4 	.word	0x100195d4
1000cf60:	100400bc 	.word	0x100400bc
1000cf64:	10018608 	.word	0x10018608
1000cf68:	100400b8 	.word	0x100400b8
1000cf6c:	10018604 	.word	0x10018604
1000cf70:	0001b99f 	.word	0x0001b99f
1000cf74:	10019308 	.word	0x10019308
1000cf78:	0001b9db 	.word	0x0001b9db
1000cf7c:	10019314 	.word	0x10019314
1000cf80:	100195e4 	.word	0x100195e4
1000cf84:	1004003c 	.word	0x1004003c
1000cf88:	10041fc0 	.word	0x10041fc0
1000cf8c:	10019318 	.word	0x10019318
1000cf90:	10041fc4 	.word	0x10041fc4
1000cf94:	100195e0 	.word	0x100195e0
1000cf98:	100195d8 	.word	0x100195d8
1000cf9c:	10041fd4 	.word	0x10041fd4
1000cfa0:	10041fd8 	.word	0x10041fd8
1000cfa4:	10019310 	.word	0x10019310
1000cfa8:	0001cbe9 	.word	0x0001cbe9
1000cfac:	10018628 	.word	0x10018628
1000cfb0:	0001cd8f 	.word	0x0001cd8f
1000cfb4:	10018618 	.word	0x10018618
1000cfb8:	0001cea3 	.word	0x0001cea3
1000cfbc:	1001863c 	.word	0x1001863c
1000cfc0:	0001cbcf 	.word	0x0001cbcf
1000cfc4:	10018610 	.word	0x10018610
1000cfc8:	1000d475 	.word	0x1000d475
1000cfcc:	1000d409 	.word	0x1000d409
1000cfd0:	100400e4 	.word	0x100400e4
1000cfd4:	10018630 	.word	0x10018630
1000cfd8:	00019fe9 	.word	0x00019fe9
1000cfdc:	10018640 	.word	0x10018640
1000cfe0:	0001dbdd 	.word	0x0001dbdd
1000cfe4:	1001860c 	.word	0x1001860c
1000cfe8:	0001dc5b 	.word	0x0001dc5b
1000cfec:	10018620 	.word	0x10018620
1000cff0:	100405ec 	.word	0x100405ec
1000cff4:	1001861c 	.word	0x1001861c
1000cff8:	0001d5e3 	.word	0x0001d5e3
1000cffc:	1001862c 	.word	0x1001862c
1000d000:	10040c20 	.word	0x10040c20
1000d004:	10018644 	.word	0x10018644
1000d008:	00019f09 	.word	0x00019f09
1000d00c:	10018600 	.word	0x10018600
1000d010:	10019350 	.word	0x10019350
1000d014:	10014a41 	.word	0x10014a41
1000d018:	100195e8 	.word	0x100195e8
1000d01c:	1000cca5 	.word	0x1000cca5
1000d020:	100195dc 	.word	0x100195dc
1000d024:	1000cd4d 	.word	0x1000cd4d
1000d028:	1000d4d1 	.word	0x1000d4d1
1000d02c:	1000d4b9 	.word	0x1000d4b9

1000d030 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d030:	4b04      	ldr	r3, [pc, #16]	; (1000d044 <platform_register_ble_msg_handler+0x14>)
1000d032:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d034:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d036:	2a01      	cmp	r2, #1
1000d038:	d102      	bne.n	1000d040 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d03a:	4b03      	ldr	r3, [pc, #12]	; (1000d048 <platform_register_ble_msg_handler+0x18>)
1000d03c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d03e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d040:	0018      	movs	r0, r3
1000d042:	4770      	bx	lr
1000d044:	10018614 	.word	0x10018614
1000d048:	10018634 	.word	0x10018634

1000d04c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d04c:	b570      	push	{r4, r5, r6, lr}
1000d04e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d050:	4b0e      	ldr	r3, [pc, #56]	; (1000d08c <platform_interface_send+0x40>)
1000d052:	681b      	ldr	r3, [r3, #0]
1000d054:	2b00      	cmp	r3, #0
1000d056:	d002      	beq.n	1000d05e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d058:	8840      	ldrh	r0, [r0, #2]
1000d05a:	4798      	blx	r3
1000d05c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d05e:	88e3      	ldrh	r3, [r4, #6]
1000d060:	88a2      	ldrh	r2, [r4, #4]
1000d062:	8861      	ldrh	r1, [r4, #2]
1000d064:	8820      	ldrh	r0, [r4, #0]
1000d066:	4d0a      	ldr	r5, [pc, #40]	; (1000d090 <platform_interface_send+0x44>)
1000d068:	682d      	ldr	r5, [r5, #0]
1000d06a:	47a8      	blx	r5
1000d06c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d06e:	88e2      	ldrh	r2, [r4, #6]
1000d070:	2a00      	cmp	r2, #0
1000d072:	d102      	bne.n	1000d07a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d074:	4b07      	ldr	r3, [pc, #28]	; (1000d094 <platform_interface_send+0x48>)
1000d076:	4798      	blx	r3
1000d078:	e006      	b.n	1000d088 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d07a:	0021      	movs	r1, r4
1000d07c:	3108      	adds	r1, #8
1000d07e:	4b06      	ldr	r3, [pc, #24]	; (1000d098 <platform_interface_send+0x4c>)
1000d080:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d082:	0028      	movs	r0, r5
1000d084:	4b03      	ldr	r3, [pc, #12]	; (1000d094 <platform_interface_send+0x48>)
1000d086:	4798      	blx	r3
	}
}
1000d088:	bd70      	pop	{r4, r5, r6, pc}
1000d08a:	46c0      	nop			; (mov r8, r8)
1000d08c:	10018608 	.word	0x10018608
1000d090:	10018640 	.word	0x10018640
1000d094:	1000ccd5 	.word	0x1000ccd5
1000d098:	10014a2f 	.word	0x10014a2f

1000d09c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d09c:	b570      	push	{r4, r5, r6, lr}
1000d09e:	0015      	movs	r5, r2
1000d0a0:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d0a2:	020a      	lsls	r2, r1, #8
1000d0a4:	4302      	orrs	r2, r0
1000d0a6:	4b0a      	ldr	r3, [pc, #40]	; (1000d0d0 <send_plf_int_msg_ind+0x34>)
1000d0a8:	681e      	ldr	r6, [r3, #0]
1000d0aa:	0023      	movs	r3, r4
1000d0ac:	2105      	movs	r1, #5
1000d0ae:	20a0      	movs	r0, #160	; 0xa0
1000d0b0:	00c0      	lsls	r0, r0, #3
1000d0b2:	47b0      	blx	r6
1000d0b4:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d0b6:	d00a      	beq.n	1000d0ce <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d0b8:	2c00      	cmp	r4, #0
1000d0ba:	d005      	beq.n	1000d0c8 <send_plf_int_msg_ind+0x2c>
1000d0bc:	2d00      	cmp	r5, #0
1000d0be:	d003      	beq.n	1000d0c8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d0c0:	0022      	movs	r2, r4
1000d0c2:	0029      	movs	r1, r5
1000d0c4:	4b03      	ldr	r3, [pc, #12]	; (1000d0d4 <send_plf_int_msg_ind+0x38>)
1000d0c6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d0c8:	0030      	movs	r0, r6
1000d0ca:	4b03      	ldr	r3, [pc, #12]	; (1000d0d8 <send_plf_int_msg_ind+0x3c>)
1000d0cc:	4798      	blx	r3
	}
}
1000d0ce:	bd70      	pop	{r4, r5, r6, pc}
1000d0d0:	10018640 	.word	0x10018640
1000d0d4:	10014a2f 	.word	0x10014a2f
1000d0d8:	1000ccd5 	.word	0x1000ccd5

1000d0dc <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0de:	465f      	mov	r7, fp
1000d0e0:	4656      	mov	r6, sl
1000d0e2:	464d      	mov	r5, r9
1000d0e4:	4644      	mov	r4, r8
1000d0e6:	b4f0      	push	{r4, r5, r6, r7}
1000d0e8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d0ea:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d0ec:	2300      	movs	r3, #0
1000d0ee:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d0f0:	1ce3      	adds	r3, r4, #3
1000d0f2:	d81c      	bhi.n	1000d12e <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d0f4:	220d      	movs	r2, #13
1000d0f6:	2100      	movs	r1, #0
1000d0f8:	a802      	add	r0, sp, #8
1000d0fa:	4b82      	ldr	r3, [pc, #520]	; (1000d304 <platform_event_wait+0x228>)
1000d0fc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d0fe:	2333      	movs	r3, #51	; 0x33
1000d100:	aa02      	add	r2, sp, #8
1000d102:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d104:	3b30      	subs	r3, #48	; 0x30
1000d106:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d108:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d10a:	3302      	adds	r3, #2
1000d10c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d10e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d110:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d112:	0a23      	lsrs	r3, r4, #8
1000d114:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d116:	0c23      	lsrs	r3, r4, #16
1000d118:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d11a:	0e24      	lsrs	r4, r4, #24
1000d11c:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d11e:	2301      	movs	r3, #1
1000d120:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d122:	210d      	movs	r1, #13
1000d124:	0010      	movs	r0, r2
1000d126:	4b78      	ldr	r3, [pc, #480]	; (1000d308 <platform_event_wait+0x22c>)
1000d128:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d12a:	2301      	movs	r3, #1
1000d12c:	4699      	mov	r9, r3
1000d12e:	2400      	movs	r4, #0
1000d130:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d132:	4f76      	ldr	r7, [pc, #472]	; (1000d30c <platform_event_wait+0x230>)
1000d134:	4e76      	ldr	r6, [pc, #472]	; (1000d310 <platform_event_wait+0x234>)
1000d136:	4977      	ldr	r1, [pc, #476]	; (1000d314 <platform_event_wait+0x238>)
1000d138:	6838      	ldr	r0, [r7, #0]
1000d13a:	6833      	ldr	r3, [r6, #0]
1000d13c:	4798      	blx	r3
1000d13e:	2800      	cmp	r0, #0
1000d140:	d000      	beq.n	1000d144 <platform_event_wait+0x68>
1000d142:	e088      	b.n	1000d256 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d144:	4b73      	ldr	r3, [pc, #460]	; (1000d314 <platform_event_wait+0x238>)
1000d146:	681c      	ldr	r4, [r3, #0]
1000d148:	88a3      	ldrh	r3, [r4, #4]
1000d14a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d14c:	23cd      	movs	r3, #205	; 0xcd
1000d14e:	009b      	lsls	r3, r3, #2
1000d150:	459a      	cmp	sl, r3
1000d152:	d100      	bne.n	1000d156 <platform_event_wait+0x7a>
1000d154:	e0c7      	b.n	1000d2e6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d156:	8923      	ldrh	r3, [r4, #8]
1000d158:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d15a:	8963      	ldrh	r3, [r4, #10]
1000d15c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d15e:	464b      	mov	r3, r9
1000d160:	2b00      	cmp	r3, #0
1000d162:	d011      	beq.n	1000d188 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d164:	220d      	movs	r2, #13
1000d166:	2100      	movs	r1, #0
1000d168:	a802      	add	r0, sp, #8
1000d16a:	4b66      	ldr	r3, [pc, #408]	; (1000d304 <platform_event_wait+0x228>)
1000d16c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d16e:	2333      	movs	r3, #51	; 0x33
1000d170:	aa02      	add	r2, sp, #8
1000d172:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d174:	3b30      	subs	r3, #48	; 0x30
1000d176:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d178:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d17a:	3302      	adds	r3, #2
1000d17c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d17e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d180:	210d      	movs	r1, #13
1000d182:	0010      	movs	r0, r2
1000d184:	4b60      	ldr	r3, [pc, #384]	; (1000d308 <platform_event_wait+0x22c>)
1000d186:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d188:	23a0      	movs	r3, #160	; 0xa0
1000d18a:	00db      	lsls	r3, r3, #3
1000d18c:	459a      	cmp	sl, r3
1000d18e:	d121      	bne.n	1000d1d4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d190:	4b61      	ldr	r3, [pc, #388]	; (1000d318 <platform_event_wait+0x23c>)
1000d192:	881b      	ldrh	r3, [r3, #0]
1000d194:	4443      	add	r3, r8
1000d196:	22a0      	movs	r2, #160	; 0xa0
1000d198:	0092      	lsls	r2, r2, #2
1000d19a:	4293      	cmp	r3, r2
1000d19c:	dd02      	ble.n	1000d1a4 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d19e:	3a80      	subs	r2, #128	; 0x80
1000d1a0:	4b5d      	ldr	r3, [pc, #372]	; (1000d318 <platform_event_wait+0x23c>)
1000d1a2:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d1a4:	4b5c      	ldr	r3, [pc, #368]	; (1000d318 <platform_event_wait+0x23c>)
1000d1a6:	469a      	mov	sl, r3
1000d1a8:	881d      	ldrh	r5, [r3, #0]
1000d1aa:	4b5c      	ldr	r3, [pc, #368]	; (1000d31c <platform_event_wait+0x240>)
1000d1ac:	18ed      	adds	r5, r5, r3
1000d1ae:	0021      	movs	r1, r4
1000d1b0:	310c      	adds	r1, #12
1000d1b2:	4642      	mov	r2, r8
1000d1b4:	0028      	movs	r0, r5
1000d1b6:	4b5a      	ldr	r3, [pc, #360]	; (1000d320 <platform_event_wait+0x244>)
1000d1b8:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d1ba:	4642      	mov	r2, r8
1000d1bc:	0029      	movs	r1, r5
1000d1be:	4658      	mov	r0, fp
1000d1c0:	4b58      	ldr	r3, [pc, #352]	; (1000d324 <platform_event_wait+0x248>)
1000d1c2:	4798      	blx	r3
				plf_event_buff_index += len;
1000d1c4:	4653      	mov	r3, sl
1000d1c6:	881b      	ldrh	r3, [r3, #0]
1000d1c8:	4443      	add	r3, r8
1000d1ca:	4652      	mov	r2, sl
1000d1cc:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d1ce:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d1d0:	2502      	movs	r5, #2
1000d1d2:	e03a      	b.n	1000d24a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d1d4:	4b54      	ldr	r3, [pc, #336]	; (1000d328 <platform_event_wait+0x24c>)
1000d1d6:	681b      	ldr	r3, [r3, #0]
1000d1d8:	2b00      	cmp	r3, #0
1000d1da:	d032      	beq.n	1000d242 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d1dc:	4b4d      	ldr	r3, [pc, #308]	; (1000d314 <platform_event_wait+0x238>)
1000d1de:	681a      	ldr	r2, [r3, #0]
1000d1e0:	8893      	ldrh	r3, [r2, #4]
1000d1e2:	21cd      	movs	r1, #205	; 0xcd
1000d1e4:	0089      	lsls	r1, r1, #2
1000d1e6:	428b      	cmp	r3, r1
1000d1e8:	d104      	bne.n	1000d1f4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d1ea:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d1ec:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d1ee:	2b00      	cmp	r3, #0
1000d1f0:	d02b      	beq.n	1000d24a <platform_event_wait+0x16e>
1000d1f2:	e028      	b.n	1000d246 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d1f4:	4c4d      	ldr	r4, [pc, #308]	; (1000d32c <platform_event_wait+0x250>)
1000d1f6:	4d49      	ldr	r5, [pc, #292]	; (1000d31c <platform_event_wait+0x240>)
1000d1f8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d1fa:	702b      	strb	r3, [r5, #0]
1000d1fc:	0a1b      	lsrs	r3, r3, #8
1000d1fe:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d200:	8910      	ldrh	r0, [r2, #8]
1000d202:	4b4b      	ldr	r3, [pc, #300]	; (1000d330 <platform_event_wait+0x254>)
1000d204:	681b      	ldr	r3, [r3, #0]
1000d206:	4798      	blx	r3
1000d208:	7128      	strb	r0, [r5, #4]
1000d20a:	0a00      	lsrs	r0, r0, #8
1000d20c:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d20e:	6820      	ldr	r0, [r4, #0]
1000d210:	4b40      	ldr	r3, [pc, #256]	; (1000d314 <platform_event_wait+0x238>)
1000d212:	681a      	ldr	r2, [r3, #0]
1000d214:	88d2      	ldrh	r2, [r2, #6]
1000d216:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d218:	681d      	ldr	r5, [r3, #0]
1000d21a:	896b      	ldrh	r3, [r5, #10]
1000d21c:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d21e:	3008      	adds	r0, #8
1000d220:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d222:	896a      	ldrh	r2, [r5, #10]
1000d224:	2a00      	cmp	r2, #0
1000d226:	d003      	beq.n	1000d230 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d228:	0029      	movs	r1, r5
1000d22a:	310c      	adds	r1, #12
1000d22c:	4b3c      	ldr	r3, [pc, #240]	; (1000d320 <platform_event_wait+0x244>)
1000d22e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d230:	8969      	ldrh	r1, [r5, #10]
1000d232:	3108      	adds	r1, #8
1000d234:	4b3c      	ldr	r3, [pc, #240]	; (1000d328 <platform_event_wait+0x24c>)
1000d236:	681b      	ldr	r3, [r3, #0]
1000d238:	4838      	ldr	r0, [pc, #224]	; (1000d31c <platform_event_wait+0x240>)
1000d23a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d23c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d23e:	2503      	movs	r5, #3
1000d240:	e003      	b.n	1000d24a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d242:	2400      	movs	r4, #0
1000d244:	e001      	b.n	1000d24a <platform_event_wait+0x16e>
1000d246:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000d248:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000d24a:	4b32      	ldr	r3, [pc, #200]	; (1000d314 <platform_event_wait+0x238>)
1000d24c:	6818      	ldr	r0, [r3, #0]
1000d24e:	4b39      	ldr	r3, [pc, #228]	; (1000d334 <platform_event_wait+0x258>)
1000d250:	681b      	ldr	r3, [r3, #0]
1000d252:	4798      	blx	r3
1000d254:	e000      	b.n	1000d258 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000d256:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000d258:	2c00      	cmp	r4, #0
1000d25a:	d000      	beq.n	1000d25e <platform_event_wait+0x182>
1000d25c:	e76b      	b.n	1000d136 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000d25e:	464b      	mov	r3, r9
1000d260:	2b00      	cmp	r3, #0
1000d262:	d046      	beq.n	1000d2f2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000d264:	4b29      	ldr	r3, [pc, #164]	; (1000d30c <platform_event_wait+0x230>)
1000d266:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000d268:	2e00      	cmp	r6, #0
1000d26a:	d104      	bne.n	1000d276 <platform_event_wait+0x19a>
1000d26c:	2300      	movs	r3, #0
1000d26e:	6a1c      	ldr	r4, [r3, #32]
1000d270:	2c00      	cmp	r4, #0
1000d272:	d131      	bne.n	1000d2d8 <platform_event_wait+0x1fc>
1000d274:	e03d      	b.n	1000d2f2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000d276:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000d278:	2314      	movs	r3, #20
1000d27a:	469c      	mov	ip, r3
1000d27c:	44b4      	add	ip, r6
1000d27e:	4663      	mov	r3, ip
1000d280:	4660      	mov	r0, ip
1000d282:	9300      	str	r3, [sp, #0]
1000d284:	4b2c      	ldr	r3, [pc, #176]	; (1000d338 <platform_event_wait+0x25c>)
1000d286:	681b      	ldr	r3, [r3, #0]
1000d288:	4798      	blx	r3
	while(NULL != current)
1000d28a:	2c00      	cmp	r4, #0
1000d28c:	d01f      	beq.n	1000d2ce <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000d28e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d290:	23cd      	movs	r3, #205	; 0xcd
1000d292:	009b      	lsls	r3, r3, #2
1000d294:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000d296:	4b27      	ldr	r3, [pc, #156]	; (1000d334 <platform_event_wait+0x258>)
1000d298:	469a      	mov	sl, r3
1000d29a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d29c:	6803      	ldr	r3, [r0, #0]
1000d29e:	889b      	ldrh	r3, [r3, #4]
1000d2a0:	4543      	cmp	r3, r8
1000d2a2:	d110      	bne.n	1000d2c6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000d2a4:	2f00      	cmp	r7, #0
1000d2a6:	d006      	beq.n	1000d2b6 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000d2a8:	6883      	ldr	r3, [r0, #8]
1000d2aa:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000d2ac:	4653      	mov	r3, sl
1000d2ae:	681b      	ldr	r3, [r3, #0]
1000d2b0:	4798      	blx	r3
				current = prev->pstrNext;
1000d2b2:	68b8      	ldr	r0, [r7, #8]
1000d2b4:	e009      	b.n	1000d2ca <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000d2b6:	6883      	ldr	r3, [r0, #8]
1000d2b8:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000d2ba:	4b1e      	ldr	r3, [pc, #120]	; (1000d334 <platform_event_wait+0x258>)
1000d2bc:	681b      	ldr	r3, [r3, #0]
1000d2be:	9301      	str	r3, [sp, #4]
1000d2c0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000d2c2:	6a30      	ldr	r0, [r6, #32]
1000d2c4:	e001      	b.n	1000d2ca <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000d2c6:	0007      	movs	r7, r0
1000d2c8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000d2ca:	2800      	cmp	r0, #0
1000d2cc:	d1e6      	bne.n	1000d29c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000d2ce:	4b1b      	ldr	r3, [pc, #108]	; (1000d33c <platform_event_wait+0x260>)
1000d2d0:	681b      	ldr	r3, [r3, #0]
1000d2d2:	9800      	ldr	r0, [sp, #0]
1000d2d4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d2d6:	e00c      	b.n	1000d2f2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d2d8:	2314      	movs	r3, #20
1000d2da:	9300      	str	r3, [sp, #0]
1000d2dc:	4b16      	ldr	r3, [pc, #88]	; (1000d338 <platform_event_wait+0x25c>)
1000d2de:	681b      	ldr	r3, [r3, #0]
1000d2e0:	2014      	movs	r0, #20
1000d2e2:	4798      	blx	r3
1000d2e4:	e7d3      	b.n	1000d28e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d2e6:	4b10      	ldr	r3, [pc, #64]	; (1000d328 <platform_event_wait+0x24c>)
1000d2e8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d2ea:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d2ec:	2b00      	cmp	r3, #0
1000d2ee:	d0ac      	beq.n	1000d24a <platform_event_wait+0x16e>
1000d2f0:	e77b      	b.n	1000d1ea <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d2f2:	0028      	movs	r0, r5
1000d2f4:	b007      	add	sp, #28
1000d2f6:	bc3c      	pop	{r2, r3, r4, r5}
1000d2f8:	4690      	mov	r8, r2
1000d2fa:	4699      	mov	r9, r3
1000d2fc:	46a2      	mov	sl, r4
1000d2fe:	46ab      	mov	fp, r5
1000d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d302:	46c0      	nop			; (mov r8, r8)
1000d304:	10014a41 	.word	0x10014a41
1000d308:	1000d04d 	.word	0x1000d04d
1000d30c:	10018644 	.word	0x10018644
1000d310:	1001862c 	.word	0x1001862c
1000d314:	10018638 	.word	0x10018638
1000d318:	100195e8 	.word	0x100195e8
1000d31c:	10019350 	.word	0x10019350
1000d320:	10014a2f 	.word	0x10014a2f
1000d324:	1000cc6d 	.word	0x1000cc6d
1000d328:	10018634 	.word	0x10018634
1000d32c:	10018624 	.word	0x10018624
1000d330:	10018604 	.word	0x10018604
1000d334:	10018600 	.word	0x10018600
1000d338:	10018620 	.word	0x10018620
1000d33c:	1001860c 	.word	0x1001860c

1000d340 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d340:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d342:	4b03      	ldr	r3, [pc, #12]	; (1000d350 <acquire_sleep_lock+0x10>)
1000d344:	681b      	ldr	r3, [r3, #0]
1000d346:	2080      	movs	r0, #128	; 0x80
1000d348:	0200      	lsls	r0, r0, #8
1000d34a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d34c:	2008      	movs	r0, #8
1000d34e:	bd10      	pop	{r4, pc}
1000d350:	10019308 	.word	0x10019308

1000d354 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d354:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d356:	4b03      	ldr	r3, [pc, #12]	; (1000d364 <release_message_lock+0x10>)
1000d358:	681b      	ldr	r3, [r3, #0]
1000d35a:	2080      	movs	r0, #128	; 0x80
1000d35c:	01c0      	lsls	r0, r0, #7
1000d35e:	4798      	blx	r3
	return status;
}
1000d360:	2000      	movs	r0, #0
1000d362:	bd10      	pop	{r4, pc}
1000d364:	10019314 	.word	0x10019314

1000d368 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d368:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d36a:	4c05      	ldr	r4, [pc, #20]	; (1000d380 <release_sleep_lock+0x18>)
1000d36c:	2080      	movs	r0, #128	; 0x80
1000d36e:	01c0      	lsls	r0, r0, #7
1000d370:	6823      	ldr	r3, [r4, #0]
1000d372:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d374:	6823      	ldr	r3, [r4, #0]
1000d376:	2080      	movs	r0, #128	; 0x80
1000d378:	0200      	lsls	r0, r0, #8
1000d37a:	4798      	blx	r3
	return status;
}
1000d37c:	2000      	movs	r0, #0
1000d37e:	bd10      	pop	{r4, pc}
1000d380:	10019314 	.word	0x10019314

1000d384 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d384:	2800      	cmp	r0, #0
1000d386:	d003      	beq.n	1000d390 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d388:	4b02      	ldr	r3, [pc, #8]	; (1000d394 <register_resume_callback+0x10>)
1000d38a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d38c:	2000      	movs	r0, #0
1000d38e:	e000      	b.n	1000d392 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d390:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d392:	4770      	bx	lr
1000d394:	100195dc 	.word	0x100195dc

1000d398 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d398:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d39a:	4a18      	ldr	r2, [pc, #96]	; (1000d3fc <gpio1_combined_isr_handler+0x64>)
1000d39c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d39e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d3a0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d3a2:	2180      	movs	r1, #128	; 0x80
1000d3a4:	0209      	lsls	r1, r1, #8
1000d3a6:	4301      	orrs	r1, r0
1000d3a8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d3aa:	0010      	movs	r0, r2
1000d3ac:	4d14      	ldr	r5, [pc, #80]	; (1000d400 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d3ae:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d3b0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d3b2:	05db      	lsls	r3, r3, #23
1000d3b4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d3b6:	d011      	beq.n	1000d3dc <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d3b8:	b2db      	uxtb	r3, r3
1000d3ba:	4259      	negs	r1, r3
1000d3bc:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d3be:	2b01      	cmp	r3, #1
1000d3c0:	d006      	beq.n	1000d3d0 <gpio1_combined_isr_handler+0x38>
1000d3c2:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d3c4:	085b      	lsrs	r3, r3, #1
				index++;
1000d3c6:	3101      	adds	r1, #1
1000d3c8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d3ca:	2b01      	cmp	r3, #1
1000d3cc:	d1fa      	bne.n	1000d3c4 <gpio1_combined_isr_handler+0x2c>
1000d3ce:	e000      	b.n	1000d3d2 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d3d0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d3d2:	0023      	movs	r3, r4
1000d3d4:	408b      	lsls	r3, r1
1000d3d6:	b29b      	uxth	r3, r3
1000d3d8:	8703      	strh	r3, [r0, #56]	; 0x38
1000d3da:	e003      	b.n	1000d3e4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d3dc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d3de:	432b      	orrs	r3, r5
1000d3e0:	b29b      	uxth	r3, r3
1000d3e2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d3e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d3e6:	05db      	lsls	r3, r3, #23
1000d3e8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d3ea:	d1e2      	bne.n	1000d3b2 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d3ec:	2180      	movs	r1, #128	; 0x80
1000d3ee:	0049      	lsls	r1, r1, #1
1000d3f0:	3381      	adds	r3, #129	; 0x81
1000d3f2:	33ff      	adds	r3, #255	; 0xff
1000d3f4:	4a03      	ldr	r2, [pc, #12]	; (1000d404 <gpio1_combined_isr_handler+0x6c>)
1000d3f6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d3f8:	bd30      	pop	{r4, r5, pc}
1000d3fa:	46c0      	nop			; (mov r8, r8)
1000d3fc:	40011000 	.word	0x40011000
1000d400:	ffff8000 	.word	0xffff8000
1000d404:	e000e100 	.word	0xe000e100

1000d408 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d408:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d40a:	4a17      	ldr	r2, [pc, #92]	; (1000d468 <gpio0_combined_isr_handler+0x60>)
1000d40c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d40e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d410:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d412:	2180      	movs	r1, #128	; 0x80
1000d414:	0209      	lsls	r1, r1, #8
1000d416:	4301      	orrs	r1, r0
1000d418:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d41a:	0010      	movs	r0, r2
1000d41c:	4d13      	ldr	r5, [pc, #76]	; (1000d46c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d41e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d420:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d422:	05db      	lsls	r3, r3, #23
1000d424:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d426:	d011      	beq.n	1000d44c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d428:	b2db      	uxtb	r3, r3
1000d42a:	4259      	negs	r1, r3
1000d42c:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d42e:	2b01      	cmp	r3, #1
1000d430:	d006      	beq.n	1000d440 <gpio0_combined_isr_handler+0x38>
1000d432:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d434:	085b      	lsrs	r3, r3, #1
				index++;
1000d436:	3101      	adds	r1, #1
1000d438:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d43a:	2b01      	cmp	r3, #1
1000d43c:	d1fa      	bne.n	1000d434 <gpio0_combined_isr_handler+0x2c>
1000d43e:	e000      	b.n	1000d442 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d440:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d442:	0023      	movs	r3, r4
1000d444:	408b      	lsls	r3, r1
1000d446:	b29b      	uxth	r3, r3
1000d448:	8703      	strh	r3, [r0, #56]	; 0x38
1000d44a:	e003      	b.n	1000d454 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d44c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d44e:	432b      	orrs	r3, r5
1000d450:	b29b      	uxth	r3, r3
1000d452:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d454:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d456:	05db      	lsls	r3, r3, #23
1000d458:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d45a:	d1e2      	bne.n	1000d422 <gpio0_combined_isr_handler+0x1a>
1000d45c:	2180      	movs	r1, #128	; 0x80
1000d45e:	3381      	adds	r3, #129	; 0x81
1000d460:	33ff      	adds	r3, #255	; 0xff
1000d462:	4a03      	ldr	r2, [pc, #12]	; (1000d470 <gpio0_combined_isr_handler+0x68>)
1000d464:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d466:	bd30      	pop	{r4, r5, pc}
1000d468:	40010000 	.word	0x40010000
1000d46c:	ffff8000 	.word	0xffff8000
1000d470:	e000e100 	.word	0xe000e100

1000d474 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d474:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d476:	4b0c      	ldr	r3, [pc, #48]	; (1000d4a8 <PORT1_COMB_Handler+0x34>)
1000d478:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d47a:	0b5b      	lsrs	r3, r3, #13
1000d47c:	d010      	beq.n	1000d4a0 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d47e:	4b0b      	ldr	r3, [pc, #44]	; (1000d4ac <PORT1_COMB_Handler+0x38>)
1000d480:	681b      	ldr	r3, [r3, #0]
1000d482:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d484:	4a08      	ldr	r2, [pc, #32]	; (1000d4a8 <PORT1_COMB_Handler+0x34>)
1000d486:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d488:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d48a:	0b5b      	lsrs	r3, r3, #13
1000d48c:	035b      	lsls	r3, r3, #13
1000d48e:	430b      	orrs	r3, r1
1000d490:	8713      	strh	r3, [r2, #56]	; 0x38
1000d492:	2180      	movs	r1, #128	; 0x80
1000d494:	0049      	lsls	r1, r1, #1
1000d496:	23c0      	movs	r3, #192	; 0xc0
1000d498:	005b      	lsls	r3, r3, #1
1000d49a:	4a05      	ldr	r2, [pc, #20]	; (1000d4b0 <PORT1_COMB_Handler+0x3c>)
1000d49c:	50d1      	str	r1, [r2, r3]
1000d49e:	e001      	b.n	1000d4a4 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d4a0:	4b04      	ldr	r3, [pc, #16]	; (1000d4b4 <PORT1_COMB_Handler+0x40>)
1000d4a2:	4798      	blx	r3
	}
}
1000d4a4:	bd10      	pop	{r4, pc}
1000d4a6:	46c0      	nop			; (mov r8, r8)
1000d4a8:	40011000 	.word	0x40011000
1000d4ac:	100195d4 	.word	0x100195d4
1000d4b0:	e000e100 	.word	0xe000e100
1000d4b4:	1000d399 	.word	0x1000d399

1000d4b8 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d4b8:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d4ba:	2802      	cmp	r0, #2
1000d4bc:	d804      	bhi.n	1000d4c8 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d4be:	0080      	lsls	r0, r0, #2
1000d4c0:	2200      	movs	r2, #0
1000d4c2:	4b02      	ldr	r3, [pc, #8]	; (1000d4cc <wakeup_int_unregister_callback+0x14>)
1000d4c4:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d4c6:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000d4c8:	0018      	movs	r0, r3
1000d4ca:	4770      	bx	lr
1000d4cc:	100195ec 	.word	0x100195ec

1000d4d0 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000d4d0:	b510      	push	{r4, lr}
1000d4d2:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000d4d4:	7803      	ldrb	r3, [r0, #0]
1000d4d6:	2b01      	cmp	r3, #1
1000d4d8:	d108      	bne.n	1000d4ec <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000d4da:	4b11      	ldr	r3, [pc, #68]	; (1000d520 <wakeup_active_event_callback+0x50>)
1000d4dc:	681b      	ldr	r3, [r3, #0]
1000d4de:	2b00      	cmp	r3, #0
1000d4e0:	d000      	beq.n	1000d4e4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000d4e2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000d4e4:	23ff      	movs	r3, #255	; 0xff
1000d4e6:	6822      	ldr	r2, [r4, #0]
1000d4e8:	439a      	bics	r2, r3
1000d4ea:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000d4ec:	7863      	ldrb	r3, [r4, #1]
1000d4ee:	2b01      	cmp	r3, #1
1000d4f0:	d108      	bne.n	1000d504 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000d4f2:	4b0b      	ldr	r3, [pc, #44]	; (1000d520 <wakeup_active_event_callback+0x50>)
1000d4f4:	685b      	ldr	r3, [r3, #4]
1000d4f6:	2b00      	cmp	r3, #0
1000d4f8:	d000      	beq.n	1000d4fc <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000d4fa:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000d4fc:	4b09      	ldr	r3, [pc, #36]	; (1000d524 <wakeup_active_event_callback+0x54>)
1000d4fe:	6822      	ldr	r2, [r4, #0]
1000d500:	4013      	ands	r3, r2
1000d502:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000d504:	78a3      	ldrb	r3, [r4, #2]
1000d506:	2b01      	cmp	r3, #1
1000d508:	d108      	bne.n	1000d51c <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000d50a:	4b05      	ldr	r3, [pc, #20]	; (1000d520 <wakeup_active_event_callback+0x50>)
1000d50c:	689b      	ldr	r3, [r3, #8]
1000d50e:	2b00      	cmp	r3, #0
1000d510:	d000      	beq.n	1000d514 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000d512:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000d514:	4b04      	ldr	r3, [pc, #16]	; (1000d528 <wakeup_active_event_callback+0x58>)
1000d516:	6822      	ldr	r2, [r4, #0]
1000d518:	4013      	ands	r3, r2
1000d51a:	6023      	str	r3, [r4, #0]
	}
}
1000d51c:	bd10      	pop	{r4, pc}
1000d51e:	46c0      	nop			; (mov r8, r8)
1000d520:	100195ec 	.word	0x100195ec
1000d524:	ffff00ff 	.word	0xffff00ff
1000d528:	ff00ffff 	.word	0xff00ffff

1000d52c <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000d52c:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000d52e:	4b08      	ldr	r3, [pc, #32]	; (1000d550 <resume_cb+0x24>)
1000d530:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000d532:	4b08      	ldr	r3, [pc, #32]	; (1000d554 <resume_cb+0x28>)
1000d534:	4798      	blx	r3
	sms_dualtimer_init();
1000d536:	4b08      	ldr	r3, [pc, #32]	; (1000d558 <resume_cb+0x2c>)
1000d538:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000d53a:	4b08      	ldr	r3, [pc, #32]	; (1000d55c <resume_cb+0x30>)
1000d53c:	4798      	blx	r3
	sms_led_gpio_init();
1000d53e:	4b08      	ldr	r3, [pc, #32]	; (1000d560 <resume_cb+0x34>)
1000d540:	4798      	blx	r3
	sms_spi_master_configure();
1000d542:	4b08      	ldr	r3, [pc, #32]	; (1000d564 <resume_cb+0x38>)
1000d544:	4798      	blx	r3
	sms_i2c_master_configure();
1000d546:	4b08      	ldr	r3, [pc, #32]	; (1000d568 <resume_cb+0x3c>)
1000d548:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000d54a:	4b08      	ldr	r3, [pc, #32]	; (1000d56c <resume_cb+0x40>)
1000d54c:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000d54e:	bd10      	pop	{r4, pc}
1000d550:	1000cd79 	.word	0x1000cd79
1000d554:	1000cae1 	.word	0x1000cae1
1000d558:	10009c15 	.word	0x10009c15
1000d55c:	100088fd 	.word	0x100088fd
1000d560:	10009755 	.word	0x10009755
1000d564:	10009ac9 	.word	0x10009ac9
1000d568:	10008b05 	.word	0x10008b05
1000d56c:	10008a65 	.word	0x10008a65

1000d570 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000d570:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000d572:	2300      	movs	r3, #0
1000d574:	4a09      	ldr	r2, [pc, #36]	; (1000d59c <sms_init_variables+0x2c>)
1000d576:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000d578:	4a09      	ldr	r2, [pc, #36]	; (1000d5a0 <sms_init_variables+0x30>)
1000d57a:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000d57c:	2101      	movs	r1, #1
1000d57e:	4a09      	ldr	r2, [pc, #36]	; (1000d5a4 <sms_init_variables+0x34>)
1000d580:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000d582:	4a09      	ldr	r2, [pc, #36]	; (1000d5a8 <sms_init_variables+0x38>)
1000d584:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000d586:	2201      	movs	r2, #1
1000d588:	4252      	negs	r2, r2
1000d58a:	4b08      	ldr	r3, [pc, #32]	; (1000d5ac <sms_init_variables+0x3c>)
1000d58c:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000d58e:	4b08      	ldr	r3, [pc, #32]	; (1000d5b0 <sms_init_variables+0x40>)
1000d590:	4798      	blx	r3
	sms_button_init_variables();
1000d592:	4b08      	ldr	r3, [pc, #32]	; (1000d5b4 <sms_init_variables+0x44>)
1000d594:	4798      	blx	r3
	sms_pressure_init_variables();
1000d596:	4b08      	ldr	r3, [pc, #32]	; (1000d5b8 <sms_init_variables+0x48>)
1000d598:	4798      	blx	r3
}
1000d59a:	bd10      	pop	{r4, pc}
1000d59c:	10018718 	.word	0x10018718
1000d5a0:	10018933 	.word	0x10018933
1000d5a4:	100187f0 	.word	0x100187f0
1000d5a8:	100187f1 	.word	0x100187f1
1000d5ac:	100187ec 	.word	0x100187ec
1000d5b0:	10008509 	.word	0x10008509
1000d5b4:	100088d5 	.word	0x100088d5
1000d5b8:	100097c9 	.word	0x100097c9

1000d5bc <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000d5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5be:	b087      	sub	sp, #28
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000d5c0:	2210      	movs	r2, #16
1000d5c2:	4b4f      	ldr	r3, [pc, #316]	; (1000d700 <main+0x144>)
1000d5c4:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000d5c6:	4b4f      	ldr	r3, [pc, #316]	; (1000d704 <main+0x148>)
1000d5c8:	4798      	blx	r3
	gpio_init(); // GPIO
1000d5ca:	4b4f      	ldr	r3, [pc, #316]	; (1000d708 <main+0x14c>)
1000d5cc:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000d5ce:	4b4f      	ldr	r3, [pc, #316]	; (1000d70c <main+0x150>)
1000d5d0:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000d5d2:	4b4f      	ldr	r3, [pc, #316]	; (1000d710 <main+0x154>)
1000d5d4:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000d5d6:	4b4f      	ldr	r3, [pc, #316]	; (1000d714 <main+0x158>)
1000d5d8:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000d5da:	4b4f      	ldr	r3, [pc, #316]	; (1000d718 <main+0x15c>)
1000d5dc:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000d5de:	4b4f      	ldr	r3, [pc, #316]	; (1000d71c <main+0x160>)
1000d5e0:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000d5e2:	4b4f      	ldr	r3, [pc, #316]	; (1000d720 <main+0x164>)
1000d5e4:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000d5e6:	4b4f      	ldr	r3, [pc, #316]	; (1000d724 <main+0x168>)
1000d5e8:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000d5ea:	4b4f      	ldr	r3, [pc, #316]	; (1000d728 <main+0x16c>)
1000d5ec:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000d5ee:	4b4f      	ldr	r3, [pc, #316]	; (1000d72c <main+0x170>)
1000d5f0:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000d5f2:	4b4f      	ldr	r3, [pc, #316]	; (1000d730 <main+0x174>)
1000d5f4:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000d5f6:	2000      	movs	r0, #0
1000d5f8:	4b4e      	ldr	r3, [pc, #312]	; (1000d734 <main+0x178>)
1000d5fa:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000d5fc:	4b4e      	ldr	r3, [pc, #312]	; (1000d738 <main+0x17c>)
1000d5fe:	4798      	blx	r3
	sms_pressure_define_services();
1000d600:	4b4e      	ldr	r3, [pc, #312]	; (1000d73c <main+0x180>)
1000d602:	4798      	blx	r3
	sms_mpu_define_services();
1000d604:	4b4e      	ldr	r3, [pc, #312]	; (1000d740 <main+0x184>)
1000d606:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000d608:	484e      	ldr	r0, [pc, #312]	; (1000d744 <main+0x188>)
1000d60a:	4b4f      	ldr	r3, [pc, #316]	; (1000d748 <main+0x18c>)
1000d60c:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000d60e:	494f      	ldr	r1, [pc, #316]	; (1000d74c <main+0x190>)
1000d610:	2000      	movs	r0, #0
1000d612:	4b4f      	ldr	r3, [pc, #316]	; (1000d750 <main+0x194>)
1000d614:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000d616:	4b4f      	ldr	r3, [pc, #316]	; (1000d754 <main+0x198>)
1000d618:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000d61a:	4b4f      	ldr	r3, [pc, #316]	; (1000d758 <main+0x19c>)
1000d61c:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000d61e:	4a4f      	ldr	r2, [pc, #316]	; (1000d75c <main+0x1a0>)
1000d620:	2100      	movs	r1, #0
1000d622:	2000      	movs	r0, #0
1000d624:	4c4e      	ldr	r4, [pc, #312]	; (1000d760 <main+0x1a4>)
1000d626:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000d628:	4a4e      	ldr	r2, [pc, #312]	; (1000d764 <main+0x1a8>)
1000d62a:	2102      	movs	r1, #2
1000d62c:	2000      	movs	r0, #0
1000d62e:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000d630:	2100      	movs	r1, #0
1000d632:	2000      	movs	r0, #0
1000d634:	4b4c      	ldr	r3, [pc, #304]	; (1000d768 <main+0x1ac>)
1000d636:	4798      	blx	r3

	if(sms_mpu_check()) {
1000d638:	4b4c      	ldr	r3, [pc, #304]	; (1000d76c <main+0x1b0>)
1000d63a:	4798      	blx	r3
1000d63c:	2800      	cmp	r0, #0
1000d63e:	d005      	beq.n	1000d64c <main+0x90>
		DBG_LOG("MPU not here...");
1000d640:	484b      	ldr	r0, [pc, #300]	; (1000d770 <main+0x1b4>)
1000d642:	4b4c      	ldr	r3, [pc, #304]	; (1000d774 <main+0x1b8>)
1000d644:	4798      	blx	r3
1000d646:	484c      	ldr	r0, [pc, #304]	; (1000d778 <main+0x1bc>)
1000d648:	4b4c      	ldr	r3, [pc, #304]	; (1000d77c <main+0x1c0>)
1000d64a:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.gyro_bias, mpu_device.accel_bias);
1000d64c:	4c4c      	ldr	r4, [pc, #304]	; (1000d780 <main+0x1c4>)
1000d64e:	0020      	movs	r0, r4
1000d650:	380c      	subs	r0, #12
1000d652:	0021      	movs	r1, r4
1000d654:	4b4b      	ldr	r3, [pc, #300]	; (1000d784 <main+0x1c8>)
1000d656:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(mpu_device.gyro_bias[0] * 10000), (uint32_t)(mpu_device.gyro_bias[1] * 10000), (uint32_t)(mpu_device.gyro_bias[2] * 10000), (uint32_t)(mpu_device.accel_bias[0] * 10000), (uint32_t)(mpu_device.accel_bias[1] * 10000), (uint32_t)(mpu_device.accel_bias[2] * 10000));
1000d658:	4845      	ldr	r0, [pc, #276]	; (1000d770 <main+0x1b4>)
1000d65a:	4b46      	ldr	r3, [pc, #280]	; (1000d774 <main+0x1b8>)
1000d65c:	4798      	blx	r3
1000d65e:	3c54      	subs	r4, #84	; 0x54
1000d660:	4e49      	ldr	r6, [pc, #292]	; (1000d788 <main+0x1cc>)
1000d662:	494a      	ldr	r1, [pc, #296]	; (1000d78c <main+0x1d0>)
1000d664:	6d20      	ldr	r0, [r4, #80]	; 0x50
1000d666:	47b0      	blx	r6
1000d668:	4d49      	ldr	r5, [pc, #292]	; (1000d790 <main+0x1d4>)
1000d66a:	47a8      	blx	r5
1000d66c:	0007      	movs	r7, r0
1000d66e:	4947      	ldr	r1, [pc, #284]	; (1000d78c <main+0x1d0>)
1000d670:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
1000d672:	47b0      	blx	r6
1000d674:	47a8      	blx	r5
1000d676:	9004      	str	r0, [sp, #16]
1000d678:	4944      	ldr	r1, [pc, #272]	; (1000d78c <main+0x1d0>)
1000d67a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000d67c:	47b0      	blx	r6
1000d67e:	47a8      	blx	r5
1000d680:	9005      	str	r0, [sp, #20]
1000d682:	4942      	ldr	r1, [pc, #264]	; (1000d78c <main+0x1d0>)
1000d684:	6de0      	ldr	r0, [r4, #92]	; 0x5c
1000d686:	47b0      	blx	r6
1000d688:	47a8      	blx	r5
1000d68a:	9002      	str	r0, [sp, #8]
1000d68c:	493f      	ldr	r1, [pc, #252]	; (1000d78c <main+0x1d0>)
1000d68e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000d690:	47b0      	blx	r6
1000d692:	47a8      	blx	r5
1000d694:	9001      	str	r0, [sp, #4]
1000d696:	493d      	ldr	r1, [pc, #244]	; (1000d78c <main+0x1d0>)
1000d698:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000d69a:	47b0      	blx	r6
1000d69c:	47a8      	blx	r5
1000d69e:	9000      	str	r0, [sp, #0]
1000d6a0:	003b      	movs	r3, r7
1000d6a2:	9a04      	ldr	r2, [sp, #16]
1000d6a4:	9905      	ldr	r1, [sp, #20]
1000d6a6:	483b      	ldr	r0, [pc, #236]	; (1000d794 <main+0x1d8>)
1000d6a8:	4c34      	ldr	r4, [pc, #208]	; (1000d77c <main+0x1c0>)
1000d6aa:	47a0      	blx	r4
	
	sms_mpu_initialize();
1000d6ac:	4b3a      	ldr	r3, [pc, #232]	; (1000d798 <main+0x1dc>)
1000d6ae:	4798      	blx	r3
	//DBG_LOG("MPU-9250 initialized...");
	//DBG_LOG("Bias values:\n\rgyroX %f, gyroY %f, gyroZ %f\n\raccelX %f, accelY %f, accelZ %f", mpu_device.gyro_bias[0], mpu_device.gyro_bias[1], mpu_device.gyro_bias[2], mpu_device.accel_bias[0], mpu_device.accel_bias[1], mpu_device.accel_bias[2]);
	
	if(sms_mpu_comp_check()) {
1000d6b0:	4b3a      	ldr	r3, [pc, #232]	; (1000d79c <main+0x1e0>)
1000d6b2:	4798      	blx	r3
1000d6b4:	2800      	cmp	r0, #0
1000d6b6:	d005      	beq.n	1000d6c4 <main+0x108>
		DBG_LOG("Compass not here...");
1000d6b8:	482d      	ldr	r0, [pc, #180]	; (1000d770 <main+0x1b4>)
1000d6ba:	4b2e      	ldr	r3, [pc, #184]	; (1000d774 <main+0x1b8>)
1000d6bc:	4798      	blx	r3
1000d6be:	4838      	ldr	r0, [pc, #224]	; (1000d7a0 <main+0x1e4>)
1000d6c0:	4b2e      	ldr	r3, [pc, #184]	; (1000d77c <main+0x1c0>)
1000d6c2:	4798      	blx	r3
	}
	
	sms_mpu_comp_initialize(mpu_device.mag_calibration);
1000d6c4:	4c37      	ldr	r4, [pc, #220]	; (1000d7a4 <main+0x1e8>)
1000d6c6:	0020      	movs	r0, r4
1000d6c8:	4b37      	ldr	r3, [pc, #220]	; (1000d7a8 <main+0x1ec>)
1000d6ca:	4798      	blx	r3
	DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.mag_calibration[0] * 10000), (uint32_t)(mpu_device.mag_calibration[1] * 10000), (uint32_t)(mpu_device.mag_calibration[2] * 10000));
1000d6cc:	4828      	ldr	r0, [pc, #160]	; (1000d770 <main+0x1b4>)
1000d6ce:	4b29      	ldr	r3, [pc, #164]	; (1000d774 <main+0x1b8>)
1000d6d0:	4798      	blx	r3
1000d6d2:	4e2d      	ldr	r6, [pc, #180]	; (1000d788 <main+0x1cc>)
1000d6d4:	492d      	ldr	r1, [pc, #180]	; (1000d78c <main+0x1d0>)
1000d6d6:	68a0      	ldr	r0, [r4, #8]
1000d6d8:	47b0      	blx	r6
1000d6da:	4d2d      	ldr	r5, [pc, #180]	; (1000d790 <main+0x1d4>)
1000d6dc:	47a8      	blx	r5
1000d6de:	0007      	movs	r7, r0
1000d6e0:	492a      	ldr	r1, [pc, #168]	; (1000d78c <main+0x1d0>)
1000d6e2:	6860      	ldr	r0, [r4, #4]
1000d6e4:	47b0      	blx	r6
1000d6e6:	47a8      	blx	r5
1000d6e8:	9004      	str	r0, [sp, #16]
1000d6ea:	4928      	ldr	r1, [pc, #160]	; (1000d78c <main+0x1d0>)
1000d6ec:	6820      	ldr	r0, [r4, #0]
1000d6ee:	47b0      	blx	r6
1000d6f0:	47a8      	blx	r5
1000d6f2:	0001      	movs	r1, r0
1000d6f4:	003b      	movs	r3, r7
1000d6f6:	9a04      	ldr	r2, [sp, #16]
1000d6f8:	482c      	ldr	r0, [pc, #176]	; (1000d7ac <main+0x1f0>)
1000d6fa:	4c20      	ldr	r4, [pc, #128]	; (1000d77c <main+0x1c0>)
1000d6fc:	47a0      	blx	r4
1000d6fe:	e7fe      	b.n	1000d6fe <main+0x142>
1000d700:	100187f4 	.word	0x100187f4
1000d704:	1000cded 	.word	0x1000cded
1000d708:	1000a899 	.word	0x1000a899
1000d70c:	1000cae1 	.word	0x1000cae1
1000d710:	1000d341 	.word	0x1000d341
1000d714:	1000d571 	.word	0x1000d571
1000d718:	10009c15 	.word	0x10009c15
1000d71c:	100088fd 	.word	0x100088fd
1000d720:	10009755 	.word	0x10009755
1000d724:	10008b05 	.word	0x10008b05
1000d728:	10009ac9 	.word	0x10009ac9
1000d72c:	10008c99 	.word	0x10008c99
1000d730:	10008a65 	.word	0x10008a65
1000d734:	1000c3e9 	.word	0x1000c3e9
1000d738:	10008a15 	.word	0x10008a15
1000d73c:	100099b5 	.word	0x100099b5
1000d740:	10008cfd 	.word	0x10008cfd
1000d744:	1000d52d 	.word	0x1000d52d
1000d748:	1000d385 	.word	0x1000d385
1000d74c:	10009cdd 	.word	0x10009cdd
1000d750:	10009c59 	.word	0x10009c59
1000d754:	100089a5 	.word	0x100089a5
1000d758:	10008ce5 	.word	0x10008ce5
1000d75c:	10015ce4 	.word	0x10015ce4
1000d760:	1000c319 	.word	0x1000c319
1000d764:	10015d30 	.word	0x10015d30
1000d768:	100089cd 	.word	0x100089cd
1000d76c:	10009709 	.word	0x10009709
1000d770:	10015bf0 	.word	0x10015bf0
1000d774:	10014ca9 	.word	0x10014ca9
1000d778:	1001690c 	.word	0x1001690c
1000d77c:	10014b89 	.word	0x10014b89
1000d780:	10018770 	.word	0x10018770
1000d784:	10008d65 	.word	0x10008d65
1000d788:	10012549 	.word	0x10012549
1000d78c:	461c4000 	.word	0x461c4000
1000d790:	10012149 	.word	0x10012149
1000d794:	1001691c 	.word	0x1001691c
1000d798:	10009279 	.word	0x10009279
1000d79c:	10009261 	.word	0x10009261
1000d7a0:	10016958 	.word	0x10016958
1000d7a4:	1001877c 	.word	0x1001877c
1000d7a8:	1000915d 	.word	0x1000915d
1000d7ac:	1001696c 	.word	0x1001696c

1000d7b0 <internal_event_post>:
1000d7b0:	b570      	push	{r4, r5, r6, lr}
1000d7b2:	4d12      	ldr	r5, [pc, #72]	; (1000d7fc <internal_event_post+0x4c>)
1000d7b4:	682c      	ldr	r4, [r5, #0]
1000d7b6:	2c00      	cmp	r4, #0
1000d7b8:	d014      	beq.n	1000d7e4 <internal_event_post+0x34>
1000d7ba:	6826      	ldr	r6, [r4, #0]
1000d7bc:	60e2      	str	r2, [r4, #12]
1000d7be:	602e      	str	r6, [r5, #0]
1000d7c0:	2500      	movs	r5, #0
1000d7c2:	4a0f      	ldr	r2, [pc, #60]	; (1000d800 <internal_event_post+0x50>)
1000d7c4:	8123      	strh	r3, [r4, #8]
1000d7c6:	6813      	ldr	r3, [r2, #0]
1000d7c8:	6025      	str	r5, [r4, #0]
1000d7ca:	80a0      	strh	r0, [r4, #4]
1000d7cc:	80e1      	strh	r1, [r4, #6]
1000d7ce:	42ab      	cmp	r3, r5
1000d7d0:	d101      	bne.n	1000d7d6 <internal_event_post+0x26>
1000d7d2:	6014      	str	r4, [r2, #0]
1000d7d4:	e011      	b.n	1000d7fa <internal_event_post+0x4a>
1000d7d6:	681a      	ldr	r2, [r3, #0]
1000d7d8:	2a00      	cmp	r2, #0
1000d7da:	d001      	beq.n	1000d7e0 <internal_event_post+0x30>
1000d7dc:	1c13      	adds	r3, r2, #0
1000d7de:	e7fa      	b.n	1000d7d6 <internal_event_post+0x26>
1000d7e0:	601c      	str	r4, [r3, #0]
1000d7e2:	e00a      	b.n	1000d7fa <internal_event_post+0x4a>
1000d7e4:	b2c4      	uxtb	r4, r0
1000d7e6:	2c00      	cmp	r4, #0
1000d7e8:	d107      	bne.n	1000d7fa <internal_event_post+0x4a>
1000d7ea:	4c06      	ldr	r4, [pc, #24]	; (1000d804 <internal_event_post+0x54>)
1000d7ec:	60e2      	str	r2, [r4, #12]
1000d7ee:	2201      	movs	r2, #1
1000d7f0:	8123      	strh	r3, [r4, #8]
1000d7f2:	4b05      	ldr	r3, [pc, #20]	; (1000d808 <internal_event_post+0x58>)
1000d7f4:	80a0      	strh	r0, [r4, #4]
1000d7f6:	80e1      	strh	r1, [r4, #6]
1000d7f8:	701a      	strb	r2, [r3, #0]
1000d7fa:	bd70      	pop	{r4, r5, r6, pc}
1000d7fc:	10018660 	.word	0x10018660
1000d800:	1001865c 	.word	0x1001865c
1000d804:	10018648 	.word	0x10018648
1000d808:	10018658 	.word	0x10018658

1000d80c <internal_event_init>:
1000d80c:	b510      	push	{r4, lr}
1000d80e:	4b08      	ldr	r3, [pc, #32]	; (1000d830 <internal_event_init+0x24>)
1000d810:	0900      	lsrs	r0, r0, #4
1000d812:	0100      	lsls	r0, r0, #4
1000d814:	681a      	ldr	r2, [r3, #0]
1000d816:	1808      	adds	r0, r1, r0
1000d818:	4281      	cmp	r1, r0
1000d81a:	d003      	beq.n	1000d824 <internal_event_init+0x18>
1000d81c:	600a      	str	r2, [r1, #0]
1000d81e:	1c0a      	adds	r2, r1, #0
1000d820:	3110      	adds	r1, #16
1000d822:	e7f9      	b.n	1000d818 <internal_event_init+0xc>
1000d824:	601a      	str	r2, [r3, #0]
1000d826:	2200      	movs	r2, #0
1000d828:	4b02      	ldr	r3, [pc, #8]	; (1000d834 <internal_event_init+0x28>)
1000d82a:	601a      	str	r2, [r3, #0]
1000d82c:	bd10      	pop	{r4, pc}
1000d82e:	46c0      	nop			; (mov r8, r8)
1000d830:	10018660 	.word	0x10018660
1000d834:	1001865c 	.word	0x1001865c

1000d838 <special_events_handler>:
1000d838:	b538      	push	{r3, r4, r5, lr}
1000d83a:	4c1b      	ldr	r4, [pc, #108]	; (1000d8a8 <special_events_handler+0x70>)
1000d83c:	1c03      	adds	r3, r0, #0
1000d83e:	8825      	ldrh	r5, [r4, #0]
1000d840:	1c08      	adds	r0, r1, #0
1000d842:	1c21      	adds	r1, r4, #0
1000d844:	429d      	cmp	r5, r3
1000d846:	d107      	bne.n	1000d858 <special_events_handler+0x20>
1000d848:	88a5      	ldrh	r5, [r4, #4]
1000d84a:	4285      	cmp	r5, r0
1000d84c:	d104      	bne.n	1000d858 <special_events_handler+0x20>
1000d84e:	2301      	movs	r3, #1
1000d850:	425b      	negs	r3, r3
1000d852:	8023      	strh	r3, [r4, #0]
1000d854:	60a2      	str	r2, [r4, #8]
1000d856:	e009      	b.n	1000d86c <special_events_handler+0x34>
1000d858:	884c      	ldrh	r4, [r1, #2]
1000d85a:	429c      	cmp	r4, r3
1000d85c:	d10a      	bne.n	1000d874 <special_events_handler+0x3c>
1000d85e:	888c      	ldrh	r4, [r1, #4]
1000d860:	4284      	cmp	r4, r0
1000d862:	d107      	bne.n	1000d874 <special_events_handler+0x3c>
1000d864:	2301      	movs	r3, #1
1000d866:	425b      	negs	r3, r3
1000d868:	804b      	strh	r3, [r1, #2]
1000d86a:	608a      	str	r2, [r1, #8]
1000d86c:	4b0f      	ldr	r3, [pc, #60]	; (1000d8ac <special_events_handler+0x74>)
1000d86e:	4798      	blx	r3
1000d870:	2001      	movs	r0, #1
1000d872:	e017      	b.n	1000d8a4 <special_events_handler+0x6c>
1000d874:	490e      	ldr	r1, [pc, #56]	; (1000d8b0 <special_events_handler+0x78>)
1000d876:	428b      	cmp	r3, r1
1000d878:	d00e      	beq.n	1000d898 <special_events_handler+0x60>
1000d87a:	490e      	ldr	r1, [pc, #56]	; (1000d8b4 <special_events_handler+0x7c>)
1000d87c:	428b      	cmp	r3, r1
1000d87e:	d007      	beq.n	1000d890 <special_events_handler+0x58>
1000d880:	490d      	ldr	r1, [pc, #52]	; (1000d8b8 <special_events_handler+0x80>)
1000d882:	2000      	movs	r0, #0
1000d884:	428b      	cmp	r3, r1
1000d886:	d10d      	bne.n	1000d8a4 <special_events_handler+0x6c>
1000d888:	1c10      	adds	r0, r2, #0
1000d88a:	4b0c      	ldr	r3, [pc, #48]	; (1000d8bc <special_events_handler+0x84>)
1000d88c:	4798      	blx	r3
1000d88e:	e7ef      	b.n	1000d870 <special_events_handler+0x38>
1000d890:	1c11      	adds	r1, r2, #0
1000d892:	4b0b      	ldr	r3, [pc, #44]	; (1000d8c0 <special_events_handler+0x88>)
1000d894:	2200      	movs	r2, #0
1000d896:	e002      	b.n	1000d89e <special_events_handler+0x66>
1000d898:	1c11      	adds	r1, r2, #0
1000d89a:	2200      	movs	r2, #0
1000d89c:	4b09      	ldr	r3, [pc, #36]	; (1000d8c4 <special_events_handler+0x8c>)
1000d89e:	4798      	blx	r3
1000d8a0:	4243      	negs	r3, r0
1000d8a2:	4158      	adcs	r0, r3
1000d8a4:	bd38      	pop	{r3, r4, r5, pc}
1000d8a6:	46c0      	nop			; (mov r8, r8)
1000d8a8:	100195f8 	.word	0x100195f8
1000d8ac:	1000f221 	.word	0x1000f221
1000d8b0:	00000e13 	.word	0x00000e13
1000d8b4:	00000e15 	.word	0x00000e15
1000d8b8:	00000e01 	.word	0x00000e01
1000d8bc:	1000f591 	.word	0x1000f591
1000d8c0:	1000f751 	.word	0x1000f751
1000d8c4:	1000f829 	.word	0x1000f829

1000d8c8 <at_ble_event_get>:
1000d8c8:	2300      	movs	r3, #0
1000d8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8cc:	b087      	sub	sp, #28
1000d8ce:	9204      	str	r2, [sp, #16]
1000d8d0:	7003      	strb	r3, [r0, #0]
1000d8d2:	9b04      	ldr	r3, [sp, #16]
1000d8d4:	9003      	str	r0, [sp, #12]
1000d8d6:	3b01      	subs	r3, #1
1000d8d8:	1c0d      	adds	r5, r1, #0
1000d8da:	9305      	str	r3, [sp, #20]
1000d8dc:	3303      	adds	r3, #3
1000d8de:	d802      	bhi.n	1000d8e6 <at_ble_event_get+0x1e>
1000d8e0:	9804      	ldr	r0, [sp, #16]
1000d8e2:	4bae      	ldr	r3, [pc, #696]	; (1000db9c <at_ble_event_get+0x2d4>)
1000d8e4:	4798      	blx	r3
1000d8e6:	9b05      	ldr	r3, [sp, #20]
1000d8e8:	4cad      	ldr	r4, [pc, #692]	; (1000dba0 <at_ble_event_get+0x2d8>)
1000d8ea:	3303      	adds	r3, #3
1000d8ec:	d902      	bls.n	1000d8f4 <at_ble_event_get+0x2c>
1000d8ee:	2300      	movs	r3, #0
1000d8f0:	9302      	str	r3, [sp, #8]
1000d8f2:	e015      	b.n	1000d920 <at_ble_event_get+0x58>
1000d8f4:	2300      	movs	r3, #0
1000d8f6:	9302      	str	r3, [sp, #8]
1000d8f8:	6823      	ldr	r3, [r4, #0]
1000d8fa:	2b00      	cmp	r3, #0
1000d8fc:	d113      	bne.n	1000d926 <at_ble_event_get+0x5e>
1000d8fe:	9b02      	ldr	r3, [sp, #8]
1000d900:	2bd0      	cmp	r3, #208	; 0xd0
1000d902:	d100      	bne.n	1000d906 <at_ble_event_get+0x3e>
1000d904:	e2da      	b.n	1000debc <at_ble_event_get+0x5f4>
1000d906:	9804      	ldr	r0, [sp, #16]
1000d908:	4ba6      	ldr	r3, [pc, #664]	; (1000dba4 <at_ble_event_get+0x2dc>)
1000d90a:	4798      	blx	r3
1000d90c:	9002      	str	r0, [sp, #8]
1000d90e:	2802      	cmp	r0, #2
1000d910:	d1f2      	bne.n	1000d8f8 <at_ble_event_get+0x30>
1000d912:	e03f      	b.n	1000d994 <at_ble_event_get+0xcc>
1000d914:	9804      	ldr	r0, [sp, #16]
1000d916:	4ba3      	ldr	r3, [pc, #652]	; (1000dba4 <at_ble_event_get+0x2dc>)
1000d918:	4798      	blx	r3
1000d91a:	9002      	str	r0, [sp, #8]
1000d91c:	2802      	cmp	r0, #2
1000d91e:	d039      	beq.n	1000d994 <at_ble_event_get+0xcc>
1000d920:	6823      	ldr	r3, [r4, #0]
1000d922:	2b00      	cmp	r3, #0
1000d924:	d0f6      	beq.n	1000d914 <at_ble_event_get+0x4c>
1000d926:	9b02      	ldr	r3, [sp, #8]
1000d928:	2bd0      	cmp	r3, #208	; 0xd0
1000d92a:	d100      	bne.n	1000d92e <at_ble_event_get+0x66>
1000d92c:	e2c6      	b.n	1000debc <at_ble_event_get+0x5f4>
1000d92e:	9b02      	ldr	r3, [sp, #8]
1000d930:	3b03      	subs	r3, #3
1000d932:	1e5a      	subs	r2, r3, #1
1000d934:	4193      	sbcs	r3, r2
1000d936:	9a02      	ldr	r2, [sp, #8]
1000d938:	425b      	negs	r3, r3
1000d93a:	401a      	ands	r2, r3
1000d93c:	6823      	ldr	r3, [r4, #0]
1000d93e:	9202      	str	r2, [sp, #8]
1000d940:	2b00      	cmp	r3, #0
1000d942:	d100      	bne.n	1000d946 <at_ble_event_get+0x7e>
1000d944:	e2c2      	b.n	1000decc <at_ble_event_get+0x604>
1000d946:	681a      	ldr	r2, [r3, #0]
1000d948:	68de      	ldr	r6, [r3, #12]
1000d94a:	6022      	str	r2, [r4, #0]
1000d94c:	88da      	ldrh	r2, [r3, #6]
1000d94e:	9201      	str	r2, [sp, #4]
1000d950:	4a95      	ldr	r2, [pc, #596]	; (1000dba8 <at_ble_event_get+0x2e0>)
1000d952:	889c      	ldrh	r4, [r3, #4]
1000d954:	6811      	ldr	r1, [r2, #0]
1000d956:	6013      	str	r3, [r2, #0]
1000d958:	6019      	str	r1, [r3, #0]
1000d95a:	4b94      	ldr	r3, [pc, #592]	; (1000dbac <at_ble_event_get+0x2e4>)
1000d95c:	781b      	ldrb	r3, [r3, #0]
1000d95e:	2b01      	cmp	r3, #1
1000d960:	d10f      	bne.n	1000d982 <at_ble_event_get+0xba>
1000d962:	4b93      	ldr	r3, [pc, #588]	; (1000dbb0 <at_ble_event_get+0x2e8>)
1000d964:	4a92      	ldr	r2, [pc, #584]	; (1000dbb0 <at_ble_event_get+0x2e8>)
1000d966:	8898      	ldrh	r0, [r3, #4]
1000d968:	88d9      	ldrh	r1, [r3, #6]
1000d96a:	68d2      	ldr	r2, [r2, #12]
1000d96c:	891b      	ldrh	r3, [r3, #8]
1000d96e:	4f91      	ldr	r7, [pc, #580]	; (1000dbb4 <at_ble_event_get+0x2ec>)
1000d970:	47b8      	blx	r7
1000d972:	2210      	movs	r2, #16
1000d974:	4b90      	ldr	r3, [pc, #576]	; (1000dbb8 <at_ble_event_get+0x2f0>)
1000d976:	488e      	ldr	r0, [pc, #568]	; (1000dbb0 <at_ble_event_get+0x2e8>)
1000d978:	2100      	movs	r1, #0
1000d97a:	4798      	blx	r3
1000d97c:	2300      	movs	r3, #0
1000d97e:	4a8b      	ldr	r2, [pc, #556]	; (1000dbac <at_ble_event_get+0x2e4>)
1000d980:	7013      	strb	r3, [r2, #0]
1000d982:	9b02      	ldr	r3, [sp, #8]
1000d984:	2b00      	cmp	r3, #0
1000d986:	d114      	bne.n	1000d9b2 <at_ble_event_get+0xea>
1000d988:	4b8c      	ldr	r3, [pc, #560]	; (1000dbbc <at_ble_event_get+0x2f4>)
1000d98a:	429c      	cmp	r4, r3
1000d98c:	d009      	beq.n	1000d9a2 <at_ble_event_get+0xda>
1000d98e:	4b8c      	ldr	r3, [pc, #560]	; (1000dbc0 <at_ble_event_get+0x2f8>)
1000d990:	429c      	cmp	r4, r3
1000d992:	d127      	bne.n	1000d9e4 <at_ble_event_get+0x11c>
1000d994:	233a      	movs	r3, #58	; 0x3a
1000d996:	9a03      	ldr	r2, [sp, #12]
1000d998:	7013      	strb	r3, [r2, #0]
1000d99a:	2300      	movs	r3, #0
1000d99c:	9302      	str	r3, [sp, #8]
1000d99e:	1c1d      	adds	r5, r3, #0
1000d9a0:	e007      	b.n	1000d9b2 <at_ble_event_get+0xea>
1000d9a2:	9b01      	ldr	r3, [sp, #4]
1000d9a4:	42a3      	cmp	r3, r4
1000d9a6:	d000      	beq.n	1000d9aa <at_ble_event_get+0xe2>
1000d9a8:	e28a      	b.n	1000dec0 <at_ble_event_get+0x5f8>
1000d9aa:	2338      	movs	r3, #56	; 0x38
1000d9ac:	9a03      	ldr	r2, [sp, #12]
1000d9ae:	7013      	strb	r3, [r2, #0]
1000d9b0:	602e      	str	r6, [r5, #0]
1000d9b2:	9b03      	ldr	r3, [sp, #12]
1000d9b4:	781b      	ldrb	r3, [r3, #0]
1000d9b6:	2b3b      	cmp	r3, #59	; 0x3b
1000d9b8:	d101      	bne.n	1000d9be <at_ble_event_get+0xf6>
1000d9ba:	4b82      	ldr	r3, [pc, #520]	; (1000dbc4 <at_ble_event_get+0x2fc>)
1000d9bc:	4798      	blx	r3
1000d9be:	9b03      	ldr	r3, [sp, #12]
1000d9c0:	781b      	ldrb	r3, [r3, #0]
1000d9c2:	2b3b      	cmp	r3, #59	; 0x3b
1000d9c4:	d003      	beq.n	1000d9ce <at_ble_event_get+0x106>
1000d9c6:	9b05      	ldr	r3, [sp, #20]
1000d9c8:	3303      	adds	r3, #3
1000d9ca:	d904      	bls.n	1000d9d6 <at_ble_event_get+0x10e>
1000d9cc:	e283      	b.n	1000ded6 <at_ble_event_get+0x60e>
1000d9ce:	9b02      	ldr	r3, [sp, #8]
1000d9d0:	2b00      	cmp	r3, #0
1000d9d2:	d088      	beq.n	1000d8e6 <at_ble_event_get+0x1e>
1000d9d4:	e7f7      	b.n	1000d9c6 <at_ble_event_get+0xfe>
1000d9d6:	9b02      	ldr	r3, [sp, #8]
1000d9d8:	2bd0      	cmp	r3, #208	; 0xd0
1000d9da:	d100      	bne.n	1000d9de <at_ble_event_get+0x116>
1000d9dc:	e27b      	b.n	1000ded6 <at_ble_event_get+0x60e>
1000d9de:	4b7a      	ldr	r3, [pc, #488]	; (1000dbc8 <at_ble_event_get+0x300>)
1000d9e0:	4798      	blx	r3
1000d9e2:	e278      	b.n	1000ded6 <at_ble_event_get+0x60e>
1000d9e4:	9b01      	ldr	r3, [sp, #4]
1000d9e6:	2bbb      	cmp	r3, #187	; 0xbb
1000d9e8:	d125      	bne.n	1000da36 <at_ble_event_get+0x16e>
1000d9ea:	2cbb      	cmp	r4, #187	; 0xbb
1000d9ec:	d123      	bne.n	1000da36 <at_ble_event_get+0x16e>
1000d9ee:	466b      	mov	r3, sp
1000d9f0:	891b      	ldrh	r3, [r3, #8]
1000d9f2:	80ab      	strh	r3, [r5, #4]
1000d9f4:	78b3      	ldrb	r3, [r6, #2]
1000d9f6:	7872      	ldrb	r2, [r6, #1]
1000d9f8:	78f0      	ldrb	r0, [r6, #3]
1000d9fa:	021b      	lsls	r3, r3, #8
1000d9fc:	4313      	orrs	r3, r2
1000d9fe:	7971      	ldrb	r1, [r6, #5]
1000da00:	7932      	ldrb	r2, [r6, #4]
1000da02:	70a8      	strb	r0, [r5, #2]
1000da04:	4871      	ldr	r0, [pc, #452]	; (1000dbcc <at_ble_event_get+0x304>)
1000da06:	802b      	strh	r3, [r5, #0]
1000da08:	4283      	cmp	r3, r0
1000da0a:	d806      	bhi.n	1000da1a <at_ble_event_get+0x152>
1000da0c:	4a70      	ldr	r2, [pc, #448]	; (1000dbd0 <at_ble_event_get+0x308>)
1000da0e:	4293      	cmp	r3, r2
1000da10:	d20b      	bcs.n	1000da2a <at_ble_event_get+0x162>
1000da12:	4a70      	ldr	r2, [pc, #448]	; (1000dbd4 <at_ble_event_get+0x30c>)
1000da14:	4293      	cmp	r3, r2
1000da16:	d008      	beq.n	1000da2a <at_ble_event_get+0x162>
1000da18:	e009      	b.n	1000da2e <at_ble_event_get+0x166>
1000da1a:	486f      	ldr	r0, [pc, #444]	; (1000dbd8 <at_ble_event_get+0x310>)
1000da1c:	4283      	cmp	r3, r0
1000da1e:	d106      	bne.n	1000da2e <at_ble_event_get+0x166>
1000da20:	020b      	lsls	r3, r1, #8
1000da22:	4313      	orrs	r3, r2
1000da24:	80ab      	strh	r3, [r5, #4]
1000da26:	2337      	movs	r3, #55	; 0x37
1000da28:	e002      	b.n	1000da30 <at_ble_event_get+0x168>
1000da2a:	2336      	movs	r3, #54	; 0x36
1000da2c:	e000      	b.n	1000da30 <at_ble_event_get+0x168>
1000da2e:	2300      	movs	r3, #0
1000da30:	9a03      	ldr	r2, [sp, #12]
1000da32:	7013      	strb	r3, [r2, #0]
1000da34:	e7bd      	b.n	1000d9b2 <at_ble_event_get+0xea>
1000da36:	4b69      	ldr	r3, [pc, #420]	; (1000dbdc <at_ble_event_get+0x314>)
1000da38:	429c      	cmp	r4, r3
1000da3a:	d100      	bne.n	1000da3e <at_ble_event_get+0x176>
1000da3c:	e144      	b.n	1000dcc8 <at_ble_event_get+0x400>
1000da3e:	d865      	bhi.n	1000db0c <at_ble_event_get+0x244>
1000da40:	4b67      	ldr	r3, [pc, #412]	; (1000dbe0 <at_ble_event_get+0x318>)
1000da42:	429c      	cmp	r4, r3
1000da44:	d100      	bne.n	1000da48 <at_ble_event_get+0x180>
1000da46:	e1d5      	b.n	1000ddf4 <at_ble_event_get+0x52c>
1000da48:	d82f      	bhi.n	1000daaa <at_ble_event_get+0x1e2>
1000da4a:	4b66      	ldr	r3, [pc, #408]	; (1000dbe4 <at_ble_event_get+0x31c>)
1000da4c:	429c      	cmp	r4, r3
1000da4e:	d100      	bne.n	1000da52 <at_ble_event_get+0x18a>
1000da50:	e1e0      	b.n	1000de14 <at_ble_event_get+0x54c>
1000da52:	d813      	bhi.n	1000da7c <at_ble_event_get+0x1b4>
1000da54:	4b64      	ldr	r3, [pc, #400]	; (1000dbe8 <at_ble_event_get+0x320>)
1000da56:	429c      	cmp	r4, r3
1000da58:	d100      	bne.n	1000da5c <at_ble_event_get+0x194>
1000da5a:	e1a3      	b.n	1000dda4 <at_ble_event_get+0x4dc>
1000da5c:	d804      	bhi.n	1000da68 <at_ble_event_get+0x1a0>
1000da5e:	2638      	movs	r6, #56	; 0x38
1000da60:	42b4      	cmp	r4, r6
1000da62:	d100      	bne.n	1000da66 <at_ble_event_get+0x19e>
1000da64:	e225      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000da66:	e117      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000da68:	4b60      	ldr	r3, [pc, #384]	; (1000dbec <at_ble_event_get+0x324>)
1000da6a:	429c      	cmp	r4, r3
1000da6c:	d100      	bne.n	1000da70 <at_ble_event_get+0x1a8>
1000da6e:	e19f      	b.n	1000ddb0 <at_ble_event_get+0x4e8>
1000da70:	33fe      	adds	r3, #254	; 0xfe
1000da72:	33ff      	adds	r3, #255	; 0xff
1000da74:	429c      	cmp	r4, r3
1000da76:	d100      	bne.n	1000da7a <at_ble_event_get+0x1b2>
1000da78:	e1d3      	b.n	1000de22 <at_ble_event_get+0x55a>
1000da7a:	e10d      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000da7c:	4b5c      	ldr	r3, [pc, #368]	; (1000dbf0 <at_ble_event_get+0x328>)
1000da7e:	429c      	cmp	r4, r3
1000da80:	d100      	bne.n	1000da84 <at_ble_event_get+0x1bc>
1000da82:	e1a9      	b.n	1000ddd8 <at_ble_event_get+0x510>
1000da84:	d808      	bhi.n	1000da98 <at_ble_event_get+0x1d0>
1000da86:	4b5b      	ldr	r3, [pc, #364]	; (1000dbf4 <at_ble_event_get+0x32c>)
1000da88:	429c      	cmp	r4, r3
1000da8a:	d100      	bne.n	1000da8e <at_ble_event_get+0x1c6>
1000da8c:	e196      	b.n	1000ddbc <at_ble_event_get+0x4f4>
1000da8e:	4b5a      	ldr	r3, [pc, #360]	; (1000dbf8 <at_ble_event_get+0x330>)
1000da90:	429c      	cmp	r4, r3
1000da92:	d100      	bne.n	1000da96 <at_ble_event_get+0x1ce>
1000da94:	e199      	b.n	1000ddca <at_ble_event_get+0x502>
1000da96:	e0ff      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000da98:	4b58      	ldr	r3, [pc, #352]	; (1000dbfc <at_ble_event_get+0x334>)
1000da9a:	429c      	cmp	r4, r3
1000da9c:	d100      	bne.n	1000daa0 <at_ble_event_get+0x1d8>
1000da9e:	e1a2      	b.n	1000dde6 <at_ble_event_get+0x51e>
1000daa0:	4b57      	ldr	r3, [pc, #348]	; (1000dc00 <at_ble_event_get+0x338>)
1000daa2:	429c      	cmp	r4, r3
1000daa4:	d100      	bne.n	1000daa8 <at_ble_event_get+0x1e0>
1000daa6:	e1d4      	b.n	1000de52 <at_ble_event_get+0x58a>
1000daa8:	e0f6      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000daaa:	4b56      	ldr	r3, [pc, #344]	; (1000dc04 <at_ble_event_get+0x33c>)
1000daac:	429c      	cmp	r4, r3
1000daae:	d100      	bne.n	1000dab2 <at_ble_event_get+0x1ea>
1000dab0:	e1c8      	b.n	1000de44 <at_ble_event_get+0x57c>
1000dab2:	d812      	bhi.n	1000dada <at_ble_event_get+0x212>
1000dab4:	4b54      	ldr	r3, [pc, #336]	; (1000dc08 <at_ble_event_get+0x340>)
1000dab6:	429c      	cmp	r4, r3
1000dab8:	d100      	bne.n	1000dabc <at_ble_event_get+0x1f4>
1000daba:	e1d1      	b.n	1000de60 <at_ble_event_get+0x598>
1000dabc:	d804      	bhi.n	1000dac8 <at_ble_event_get+0x200>
1000dabe:	4b53      	ldr	r3, [pc, #332]	; (1000dc0c <at_ble_event_get+0x344>)
1000dac0:	429c      	cmp	r4, r3
1000dac2:	d100      	bne.n	1000dac6 <at_ble_event_get+0x1fe>
1000dac4:	e19b      	b.n	1000ddfe <at_ble_event_get+0x536>
1000dac6:	e0e7      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000dac8:	4b51      	ldr	r3, [pc, #324]	; (1000dc10 <at_ble_event_get+0x348>)
1000daca:	429c      	cmp	r4, r3
1000dacc:	d100      	bne.n	1000dad0 <at_ble_event_get+0x208>
1000dace:	e1ad      	b.n	1000de2c <at_ble_event_get+0x564>
1000dad0:	4b50      	ldr	r3, [pc, #320]	; (1000dc14 <at_ble_event_get+0x34c>)
1000dad2:	429c      	cmp	r4, r3
1000dad4:	d100      	bne.n	1000dad8 <at_ble_event_get+0x210>
1000dad6:	e1b0      	b.n	1000de3a <at_ble_event_get+0x572>
1000dad8:	e0de      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000dada:	4b4f      	ldr	r3, [pc, #316]	; (1000dc18 <at_ble_event_get+0x350>)
1000dadc:	429c      	cmp	r4, r3
1000dade:	d100      	bne.n	1000dae2 <at_ble_event_get+0x21a>
1000dae0:	e0e0      	b.n	1000dca4 <at_ble_event_get+0x3dc>
1000dae2:	d809      	bhi.n	1000daf8 <at_ble_event_get+0x230>
1000dae4:	3b08      	subs	r3, #8
1000dae6:	429c      	cmp	r4, r3
1000dae8:	d100      	bne.n	1000daec <at_ble_event_get+0x224>
1000daea:	e0d7      	b.n	1000dc9c <at_ble_event_get+0x3d4>
1000daec:	4b4b      	ldr	r3, [pc, #300]	; (1000dc1c <at_ble_event_get+0x354>)
1000daee:	2639      	movs	r6, #57	; 0x39
1000daf0:	429c      	cmp	r4, r3
1000daf2:	d100      	bne.n	1000daf6 <at_ble_event_get+0x22e>
1000daf4:	e1dd      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000daf6:	e0cf      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000daf8:	23d1      	movs	r3, #209	; 0xd1
1000dafa:	011b      	lsls	r3, r3, #4
1000dafc:	429c      	cmp	r4, r3
1000dafe:	d100      	bne.n	1000db02 <at_ble_event_get+0x23a>
1000db00:	e0d6      	b.n	1000dcb0 <at_ble_event_get+0x3e8>
1000db02:	4b47      	ldr	r3, [pc, #284]	; (1000dc20 <at_ble_event_get+0x358>)
1000db04:	429c      	cmp	r4, r3
1000db06:	d100      	bne.n	1000db0a <at_ble_event_get+0x242>
1000db08:	e0d8      	b.n	1000dcbc <at_ble_event_get+0x3f4>
1000db0a:	e0c5      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db0c:	4b45      	ldr	r3, [pc, #276]	; (1000dc24 <at_ble_event_get+0x35c>)
1000db0e:	429c      	cmp	r4, r3
1000db10:	d100      	bne.n	1000db14 <at_ble_event_get+0x24c>
1000db12:	e117      	b.n	1000dd44 <at_ble_event_get+0x47c>
1000db14:	d82e      	bhi.n	1000db74 <at_ble_event_get+0x2ac>
1000db16:	4b44      	ldr	r3, [pc, #272]	; (1000dc28 <at_ble_event_get+0x360>)
1000db18:	429c      	cmp	r4, r3
1000db1a:	d100      	bne.n	1000db1e <at_ble_event_get+0x256>
1000db1c:	e13d      	b.n	1000dd9a <at_ble_event_get+0x4d2>
1000db1e:	d812      	bhi.n	1000db46 <at_ble_event_get+0x27e>
1000db20:	4b42      	ldr	r3, [pc, #264]	; (1000dc2c <at_ble_event_get+0x364>)
1000db22:	429c      	cmp	r4, r3
1000db24:	d100      	bne.n	1000db28 <at_ble_event_get+0x260>
1000db26:	e0e8      	b.n	1000dcfa <at_ble_event_get+0x432>
1000db28:	d804      	bhi.n	1000db34 <at_ble_event_get+0x26c>
1000db2a:	3b03      	subs	r3, #3
1000db2c:	429c      	cmp	r4, r3
1000db2e:	d100      	bne.n	1000db32 <at_ble_event_get+0x26a>
1000db30:	e0d0      	b.n	1000dcd4 <at_ble_event_get+0x40c>
1000db32:	e0b1      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db34:	4b3e      	ldr	r3, [pc, #248]	; (1000dc30 <at_ble_event_get+0x368>)
1000db36:	429c      	cmp	r4, r3
1000db38:	d100      	bne.n	1000db3c <at_ble_event_get+0x274>
1000db3a:	e0d0      	b.n	1000dcde <at_ble_event_get+0x416>
1000db3c:	4b3d      	ldr	r3, [pc, #244]	; (1000dc34 <at_ble_event_get+0x36c>)
1000db3e:	429c      	cmp	r4, r3
1000db40:	d100      	bne.n	1000db44 <at_ble_event_get+0x27c>
1000db42:	e0f9      	b.n	1000dd38 <at_ble_event_get+0x470>
1000db44:	e0a8      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db46:	4b3c      	ldr	r3, [pc, #240]	; (1000dc38 <at_ble_event_get+0x370>)
1000db48:	429c      	cmp	r4, r3
1000db4a:	d100      	bne.n	1000db4e <at_ble_event_get+0x286>
1000db4c:	e0db      	b.n	1000dd06 <at_ble_event_get+0x43e>
1000db4e:	d808      	bhi.n	1000db62 <at_ble_event_get+0x29a>
1000db50:	4b3a      	ldr	r3, [pc, #232]	; (1000dc3c <at_ble_event_get+0x374>)
1000db52:	429c      	cmp	r4, r3
1000db54:	d100      	bne.n	1000db58 <at_ble_event_get+0x290>
1000db56:	e11b      	b.n	1000dd90 <at_ble_event_get+0x4c8>
1000db58:	4b39      	ldr	r3, [pc, #228]	; (1000dc40 <at_ble_event_get+0x378>)
1000db5a:	429c      	cmp	r4, r3
1000db5c:	d100      	bne.n	1000db60 <at_ble_event_get+0x298>
1000db5e:	e0d8      	b.n	1000dd12 <at_ble_event_get+0x44a>
1000db60:	e09a      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db62:	4b38      	ldr	r3, [pc, #224]	; (1000dc44 <at_ble_event_get+0x37c>)
1000db64:	429c      	cmp	r4, r3
1000db66:	d100      	bne.n	1000db6a <at_ble_event_get+0x2a2>
1000db68:	e0d8      	b.n	1000dd1c <at_ble_event_get+0x454>
1000db6a:	4b37      	ldr	r3, [pc, #220]	; (1000dc48 <at_ble_event_get+0x380>)
1000db6c:	429c      	cmp	r4, r3
1000db6e:	d100      	bne.n	1000db72 <at_ble_event_get+0x2aa>
1000db70:	e0db      	b.n	1000dd2a <at_ble_event_get+0x462>
1000db72:	e091      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db74:	4b35      	ldr	r3, [pc, #212]	; (1000dc4c <at_ble_event_get+0x384>)
1000db76:	429c      	cmp	r4, r3
1000db78:	d100      	bne.n	1000db7c <at_ble_event_get+0x2b4>
1000db7a:	e0f7      	b.n	1000dd6c <at_ble_event_get+0x4a4>
1000db7c:	d876      	bhi.n	1000dc6c <at_ble_event_get+0x3a4>
1000db7e:	4b34      	ldr	r3, [pc, #208]	; (1000dc50 <at_ble_event_get+0x388>)
1000db80:	429c      	cmp	r4, r3
1000db82:	d100      	bne.n	1000db86 <at_ble_event_get+0x2be>
1000db84:	e0f8      	b.n	1000dd78 <at_ble_event_get+0x4b0>
1000db86:	d869      	bhi.n	1000dc5c <at_ble_event_get+0x394>
1000db88:	4b32      	ldr	r3, [pc, #200]	; (1000dc54 <at_ble_event_get+0x38c>)
1000db8a:	429c      	cmp	r4, r3
1000db8c:	d100      	bne.n	1000db90 <at_ble_event_get+0x2c8>
1000db8e:	e0e0      	b.n	1000dd52 <at_ble_event_get+0x48a>
1000db90:	4b31      	ldr	r3, [pc, #196]	; (1000dc58 <at_ble_event_get+0x390>)
1000db92:	429c      	cmp	r4, r3
1000db94:	d100      	bne.n	1000db98 <at_ble_event_get+0x2d0>
1000db96:	e0a9      	b.n	1000dcec <at_ble_event_get+0x424>
1000db98:	e07e      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000db9a:	46c0      	nop			; (mov r8, r8)
1000db9c:	1000f259 	.word	0x1000f259
1000dba0:	1001865c 	.word	0x1001865c
1000dba4:	1000d0dd 	.word	0x1000d0dd
1000dba8:	10018660 	.word	0x10018660
1000dbac:	10018658 	.word	0x10018658
1000dbb0:	10018648 	.word	0x10018648
1000dbb4:	1000d7b1 	.word	0x1000d7b1
1000dbb8:	10014a41 	.word	0x10014a41
1000dbbc:	0000ffff 	.word	0x0000ffff
1000dbc0:	0000fffe 	.word	0x0000fffe
1000dbc4:	1000d355 	.word	0x1000d355
1000dbc8:	1000f25b 	.word	0x1000f25b
1000dbcc:	0000201e 	.word	0x0000201e
1000dbd0:	0000201d 	.word	0x0000201d
1000dbd4:	00000c03 	.word	0x00000c03
1000dbd8:	0000201f 	.word	0x0000201f
1000dbdc:	00000d1c 	.word	0x00000d1c
1000dbe0:	00000c0c 	.word	0x00000c0c
1000dbe4:	00000c02 	.word	0x00000c02
1000dbe8:	00000a02 	.word	0x00000a02
1000dbec:	00000a03 	.word	0x00000a03
1000dbf0:	00000c06 	.word	0x00000c06
1000dbf4:	00000c04 	.word	0x00000c04
1000dbf8:	00000c05 	.word	0x00000c05
1000dbfc:	00000c07 	.word	0x00000c07
1000dc00:	00000c09 	.word	0x00000c09
1000dc04:	00000c17 	.word	0x00000c17
1000dc08:	00000c12 	.word	0x00000c12
1000dc0c:	00000c0d 	.word	0x00000c0d
1000dc10:	00000c13 	.word	0x00000c13
1000dc14:	00000c15 	.word	0x00000c15
1000dc18:	00000d08 	.word	0x00000d08
1000dc1c:	00000d01 	.word	0x00000d01
1000dc20:	00000d15 	.word	0x00000d15
1000dc24:	00000e1b 	.word	0x00000e1b
1000dc28:	00000e0f 	.word	0x00000e0f
1000dc2c:	00000e03 	.word	0x00000e03
1000dc30:	00000e06 	.word	0x00000e06
1000dc34:	00000e0a 	.word	0x00000e0a
1000dc38:	00000e15 	.word	0x00000e15
1000dc3c:	00000e11 	.word	0x00000e11
1000dc40:	00000e13 	.word	0x00000e13
1000dc44:	00000e17 	.word	0x00000e17
1000dc48:	00000e19 	.word	0x00000e19
1000dc4c:	00000e27 	.word	0x00000e27
1000dc50:	00000e21 	.word	0x00000e21
1000dc54:	00000e1c 	.word	0x00000e1c
1000dc58:	00000e1d 	.word	0x00000e1d
1000dc5c:	4b9f      	ldr	r3, [pc, #636]	; (1000dedc <at_ble_event_get+0x614>)
1000dc5e:	429c      	cmp	r4, r3
1000dc60:	d07e      	beq.n	1000dd60 <at_ble_event_get+0x498>
1000dc62:	4b9f      	ldr	r3, [pc, #636]	; (1000dee0 <at_ble_event_get+0x618>)
1000dc64:	429c      	cmp	r4, r3
1000dc66:	d100      	bne.n	1000dc6a <at_ble_event_get+0x3a2>
1000dc68:	e08c      	b.n	1000dd84 <at_ble_event_get+0x4bc>
1000dc6a:	e015      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000dc6c:	4b9d      	ldr	r3, [pc, #628]	; (1000dee4 <at_ble_event_get+0x61c>)
1000dc6e:	429c      	cmp	r4, r3
1000dc70:	d100      	bne.n	1000dc74 <at_ble_event_get+0x3ac>
1000dc72:	e10a      	b.n	1000de8a <at_ble_event_get+0x5c2>
1000dc74:	d808      	bhi.n	1000dc88 <at_ble_event_get+0x3c0>
1000dc76:	4b9c      	ldr	r3, [pc, #624]	; (1000dee8 <at_ble_event_get+0x620>)
1000dc78:	429c      	cmp	r4, r3
1000dc7a:	d100      	bne.n	1000dc7e <at_ble_event_get+0x3b6>
1000dc7c:	e0f7      	b.n	1000de6e <at_ble_event_get+0x5a6>
1000dc7e:	4b9b      	ldr	r3, [pc, #620]	; (1000deec <at_ble_event_get+0x624>)
1000dc80:	429c      	cmp	r4, r3
1000dc82:	d100      	bne.n	1000dc86 <at_ble_event_get+0x3be>
1000dc84:	e0fa      	b.n	1000de7c <at_ble_event_get+0x5b4>
1000dc86:	e007      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000dc88:	4b99      	ldr	r3, [pc, #612]	; (1000def0 <at_ble_event_get+0x628>)
1000dc8a:	429c      	cmp	r4, r3
1000dc8c:	d100      	bne.n	1000dc90 <at_ble_event_get+0x3c8>
1000dc8e:	e103      	b.n	1000de98 <at_ble_event_get+0x5d0>
1000dc90:	4b98      	ldr	r3, [pc, #608]	; (1000def4 <at_ble_event_get+0x62c>)
1000dc92:	429c      	cmp	r4, r3
1000dc94:	d100      	bne.n	1000dc98 <at_ble_event_get+0x3d0>
1000dc96:	e106      	b.n	1000dea6 <at_ble_event_get+0x5de>
1000dc98:	2600      	movs	r6, #0
1000dc9a:	e10a      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dc9c:	1c30      	adds	r0, r6, #0
1000dc9e:	1c29      	adds	r1, r5, #0
1000dca0:	4b95      	ldr	r3, [pc, #596]	; (1000def8 <at_ble_event_get+0x630>)
1000dca2:	e014      	b.n	1000dcce <at_ble_event_get+0x406>
1000dca4:	1c30      	adds	r0, r6, #0
1000dca6:	1c29      	adds	r1, r5, #0
1000dca8:	4b94      	ldr	r3, [pc, #592]	; (1000defc <at_ble_event_get+0x634>)
1000dcaa:	4798      	blx	r3
1000dcac:	2604      	movs	r6, #4
1000dcae:	e100      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcb0:	1c30      	adds	r0, r6, #0
1000dcb2:	1c29      	adds	r1, r5, #0
1000dcb4:	4b92      	ldr	r3, [pc, #584]	; (1000df00 <at_ble_event_get+0x638>)
1000dcb6:	4798      	blx	r3
1000dcb8:	2601      	movs	r6, #1
1000dcba:	e0fa      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcbc:	1c30      	adds	r0, r6, #0
1000dcbe:	1c29      	adds	r1, r5, #0
1000dcc0:	4b90      	ldr	r3, [pc, #576]	; (1000df04 <at_ble_event_get+0x63c>)
1000dcc2:	4798      	blx	r3
1000dcc4:	260f      	movs	r6, #15
1000dcc6:	e0f4      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcc8:	1c30      	adds	r0, r6, #0
1000dcca:	1c29      	adds	r1, r5, #0
1000dccc:	4b8e      	ldr	r3, [pc, #568]	; (1000df08 <at_ble_event_get+0x640>)
1000dcce:	4798      	blx	r3
1000dcd0:	1c06      	adds	r6, r0, #0
1000dcd2:	e0ee      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcd4:	9801      	ldr	r0, [sp, #4]
1000dcd6:	1c31      	adds	r1, r6, #0
1000dcd8:	1c2a      	adds	r2, r5, #0
1000dcda:	4b8c      	ldr	r3, [pc, #560]	; (1000df0c <at_ble_event_get+0x644>)
1000dcdc:	e017      	b.n	1000dd0e <at_ble_event_get+0x446>
1000dcde:	1c31      	adds	r1, r6, #0
1000dce0:	9801      	ldr	r0, [sp, #4]
1000dce2:	1c2a      	adds	r2, r5, #0
1000dce4:	4b8a      	ldr	r3, [pc, #552]	; (1000df10 <at_ble_event_get+0x648>)
1000dce6:	4798      	blx	r3
1000dce8:	2611      	movs	r6, #17
1000dcea:	e0e2      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcec:	1c31      	adds	r1, r6, #0
1000dcee:	9801      	ldr	r0, [sp, #4]
1000dcf0:	1c2a      	adds	r2, r5, #0
1000dcf2:	4b88      	ldr	r3, [pc, #544]	; (1000df14 <at_ble_event_get+0x64c>)
1000dcf4:	4798      	blx	r3
1000dcf6:	2612      	movs	r6, #18
1000dcf8:	e0db      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dcfa:	1c30      	adds	r0, r6, #0
1000dcfc:	1c29      	adds	r1, r5, #0
1000dcfe:	4b86      	ldr	r3, [pc, #536]	; (1000df18 <at_ble_event_get+0x650>)
1000dd00:	4798      	blx	r3
1000dd02:	2606      	movs	r6, #6
1000dd04:	e0d5      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd06:	1c31      	adds	r1, r6, #0
1000dd08:	1c2a      	adds	r2, r5, #0
1000dd0a:	9801      	ldr	r0, [sp, #4]
1000dd0c:	4b83      	ldr	r3, [pc, #524]	; (1000df1c <at_ble_event_get+0x654>)
1000dd0e:	4798      	blx	r3
1000dd10:	e7de      	b.n	1000dcd0 <at_ble_event_get+0x408>
1000dd12:	9801      	ldr	r0, [sp, #4]
1000dd14:	1c31      	adds	r1, r6, #0
1000dd16:	1c2a      	adds	r2, r5, #0
1000dd18:	4b81      	ldr	r3, [pc, #516]	; (1000df20 <at_ble_event_get+0x658>)
1000dd1a:	e7f8      	b.n	1000dd0e <at_ble_event_get+0x446>
1000dd1c:	1c31      	adds	r1, r6, #0
1000dd1e:	9801      	ldr	r0, [sp, #4]
1000dd20:	1c2a      	adds	r2, r5, #0
1000dd22:	4b80      	ldr	r3, [pc, #512]	; (1000df24 <at_ble_event_get+0x65c>)
1000dd24:	4798      	blx	r3
1000dd26:	260d      	movs	r6, #13
1000dd28:	e0c3      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd2a:	1c31      	adds	r1, r6, #0
1000dd2c:	9801      	ldr	r0, [sp, #4]
1000dd2e:	1c2a      	adds	r2, r5, #0
1000dd30:	4b7d      	ldr	r3, [pc, #500]	; (1000df28 <at_ble_event_get+0x660>)
1000dd32:	4798      	blx	r3
1000dd34:	260e      	movs	r6, #14
1000dd36:	e0bc      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd38:	9801      	ldr	r0, [sp, #4]
1000dd3a:	1c31      	adds	r1, r6, #0
1000dd3c:	1c2a      	adds	r2, r5, #0
1000dd3e:	4b7b      	ldr	r3, [pc, #492]	; (1000df2c <at_ble_event_get+0x664>)
1000dd40:	4798      	blx	r3
1000dd42:	e084      	b.n	1000de4e <at_ble_event_get+0x586>
1000dd44:	1c31      	adds	r1, r6, #0
1000dd46:	9801      	ldr	r0, [sp, #4]
1000dd48:	1c2a      	adds	r2, r5, #0
1000dd4a:	4b79      	ldr	r3, [pc, #484]	; (1000df30 <at_ble_event_get+0x668>)
1000dd4c:	4798      	blx	r3
1000dd4e:	260b      	movs	r6, #11
1000dd50:	e0af      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd52:	1c31      	adds	r1, r6, #0
1000dd54:	9801      	ldr	r0, [sp, #4]
1000dd56:	1c2a      	adds	r2, r5, #0
1000dd58:	4b76      	ldr	r3, [pc, #472]	; (1000df34 <at_ble_event_get+0x66c>)
1000dd5a:	4798      	blx	r3
1000dd5c:	2610      	movs	r6, #16
1000dd5e:	e0a8      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd60:	1c30      	adds	r0, r6, #0
1000dd62:	1c29      	adds	r1, r5, #0
1000dd64:	4b74      	ldr	r3, [pc, #464]	; (1000df38 <at_ble_event_get+0x670>)
1000dd66:	4798      	blx	r3
1000dd68:	2628      	movs	r6, #40	; 0x28
1000dd6a:	e0a2      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd6c:	1c30      	adds	r0, r6, #0
1000dd6e:	1c29      	adds	r1, r5, #0
1000dd70:	4b72      	ldr	r3, [pc, #456]	; (1000df3c <at_ble_event_get+0x674>)
1000dd72:	4798      	blx	r3
1000dd74:	2629      	movs	r6, #41	; 0x29
1000dd76:	e09c      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd78:	1c30      	adds	r0, r6, #0
1000dd7a:	1c29      	adds	r1, r5, #0
1000dd7c:	4b70      	ldr	r3, [pc, #448]	; (1000df40 <at_ble_event_get+0x678>)
1000dd7e:	4798      	blx	r3
1000dd80:	2627      	movs	r6, #39	; 0x27
1000dd82:	e096      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd84:	1c30      	adds	r0, r6, #0
1000dd86:	1c29      	adds	r1, r5, #0
1000dd88:	4b6e      	ldr	r3, [pc, #440]	; (1000df44 <at_ble_event_get+0x67c>)
1000dd8a:	4798      	blx	r3
1000dd8c:	262a      	movs	r6, #42	; 0x2a
1000dd8e:	e090      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dd90:	9801      	ldr	r0, [sp, #4]
1000dd92:	1c31      	adds	r1, r6, #0
1000dd94:	1c2a      	adds	r2, r5, #0
1000dd96:	4b6c      	ldr	r3, [pc, #432]	; (1000df48 <at_ble_event_get+0x680>)
1000dd98:	e7b9      	b.n	1000dd0e <at_ble_event_get+0x446>
1000dd9a:	9801      	ldr	r0, [sp, #4]
1000dd9c:	1c31      	adds	r1, r6, #0
1000dd9e:	1c2a      	adds	r2, r5, #0
1000dda0:	4b6a      	ldr	r3, [pc, #424]	; (1000df4c <at_ble_event_get+0x684>)
1000dda2:	e7b4      	b.n	1000dd0e <at_ble_event_get+0x446>
1000dda4:	1c30      	adds	r0, r6, #0
1000dda6:	1c29      	adds	r1, r5, #0
1000dda8:	4b69      	ldr	r3, [pc, #420]	; (1000df50 <at_ble_event_get+0x688>)
1000ddaa:	4798      	blx	r3
1000ddac:	262b      	movs	r6, #43	; 0x2b
1000ddae:	e080      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000ddb0:	1c30      	adds	r0, r6, #0
1000ddb2:	1c29      	adds	r1, r5, #0
1000ddb4:	4b67      	ldr	r3, [pc, #412]	; (1000df54 <at_ble_event_get+0x68c>)
1000ddb6:	4798      	blx	r3
1000ddb8:	262c      	movs	r6, #44	; 0x2c
1000ddba:	e07a      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000ddbc:	1c31      	adds	r1, r6, #0
1000ddbe:	9801      	ldr	r0, [sp, #4]
1000ddc0:	1c2a      	adds	r2, r5, #0
1000ddc2:	4b65      	ldr	r3, [pc, #404]	; (1000df58 <at_ble_event_get+0x690>)
1000ddc4:	4798      	blx	r3
1000ddc6:	2613      	movs	r6, #19
1000ddc8:	e073      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000ddca:	1c31      	adds	r1, r6, #0
1000ddcc:	9801      	ldr	r0, [sp, #4]
1000ddce:	1c2a      	adds	r2, r5, #0
1000ddd0:	4b62      	ldr	r3, [pc, #392]	; (1000df5c <at_ble_event_get+0x694>)
1000ddd2:	4798      	blx	r3
1000ddd4:	2614      	movs	r6, #20
1000ddd6:	e06c      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000ddd8:	1c31      	adds	r1, r6, #0
1000ddda:	9801      	ldr	r0, [sp, #4]
1000dddc:	1c2a      	adds	r2, r5, #0
1000ddde:	4b60      	ldr	r3, [pc, #384]	; (1000df60 <at_ble_event_get+0x698>)
1000dde0:	4798      	blx	r3
1000dde2:	2615      	movs	r6, #21
1000dde4:	e065      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dde6:	1c31      	adds	r1, r6, #0
1000dde8:	9801      	ldr	r0, [sp, #4]
1000ddea:	1c2a      	adds	r2, r5, #0
1000ddec:	4b5d      	ldr	r3, [pc, #372]	; (1000df64 <at_ble_event_get+0x69c>)
1000ddee:	4798      	blx	r3
1000ddf0:	2616      	movs	r6, #22
1000ddf2:	e05e      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000ddf4:	9801      	ldr	r0, [sp, #4]
1000ddf6:	1c31      	adds	r1, r6, #0
1000ddf8:	1c2a      	adds	r2, r5, #0
1000ddfa:	4b5b      	ldr	r3, [pc, #364]	; (1000df68 <at_ble_event_get+0x6a0>)
1000ddfc:	e787      	b.n	1000dd0e <at_ble_event_get+0x446>
1000ddfe:	1c31      	adds	r1, r6, #0
1000de00:	9801      	ldr	r0, [sp, #4]
1000de02:	1c2a      	adds	r2, r5, #0
1000de04:	4b58      	ldr	r3, [pc, #352]	; (1000df68 <at_ble_event_get+0x6a0>)
1000de06:	4798      	blx	r3
1000de08:	88a9      	ldrh	r1, [r5, #4]
1000de0a:	1c06      	adds	r6, r0, #0
1000de0c:	4b57      	ldr	r3, [pc, #348]	; (1000df6c <at_ble_event_get+0x6a4>)
1000de0e:	8828      	ldrh	r0, [r5, #0]
1000de10:	4798      	blx	r3
1000de12:	e04e      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de14:	1c31      	adds	r1, r6, #0
1000de16:	9801      	ldr	r0, [sp, #4]
1000de18:	1c2a      	adds	r2, r5, #0
1000de1a:	4b55      	ldr	r3, [pc, #340]	; (1000df70 <at_ble_event_get+0x6a8>)
1000de1c:	4798      	blx	r3
1000de1e:	2623      	movs	r6, #35	; 0x23
1000de20:	e047      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de22:	9801      	ldr	r0, [sp, #4]
1000de24:	1c31      	adds	r1, r6, #0
1000de26:	1c2a      	adds	r2, r5, #0
1000de28:	4b52      	ldr	r3, [pc, #328]	; (1000df74 <at_ble_event_get+0x6ac>)
1000de2a:	e770      	b.n	1000dd0e <at_ble_event_get+0x446>
1000de2c:	9b01      	ldr	r3, [sp, #4]
1000de2e:	1c30      	adds	r0, r6, #0
1000de30:	0a1f      	lsrs	r7, r3, #8
1000de32:	802f      	strh	r7, [r5, #0]
1000de34:	1c29      	adds	r1, r5, #0
1000de36:	4b50      	ldr	r3, [pc, #320]	; (1000df78 <at_ble_event_get+0x6b0>)
1000de38:	e749      	b.n	1000dcce <at_ble_event_get+0x406>
1000de3a:	9801      	ldr	r0, [sp, #4]
1000de3c:	1c31      	adds	r1, r6, #0
1000de3e:	1c2a      	adds	r2, r5, #0
1000de40:	4b4e      	ldr	r3, [pc, #312]	; (1000df7c <at_ble_event_get+0x6b4>)
1000de42:	e764      	b.n	1000dd0e <at_ble_event_get+0x446>
1000de44:	1c30      	adds	r0, r6, #0
1000de46:	1c29      	adds	r1, r5, #0
1000de48:	9a01      	ldr	r2, [sp, #4]
1000de4a:	4b4d      	ldr	r3, [pc, #308]	; (1000df80 <at_ble_event_get+0x6b8>)
1000de4c:	4798      	blx	r3
1000de4e:	263b      	movs	r6, #59	; 0x3b
1000de50:	e02f      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de52:	1c31      	adds	r1, r6, #0
1000de54:	9801      	ldr	r0, [sp, #4]
1000de56:	1c2a      	adds	r2, r5, #0
1000de58:	4b4a      	ldr	r3, [pc, #296]	; (1000df84 <at_ble_event_get+0x6bc>)
1000de5a:	4798      	blx	r3
1000de5c:	2618      	movs	r6, #24
1000de5e:	e028      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de60:	1c31      	adds	r1, r6, #0
1000de62:	9801      	ldr	r0, [sp, #4]
1000de64:	1c2a      	adds	r2, r5, #0
1000de66:	4b48      	ldr	r3, [pc, #288]	; (1000df88 <at_ble_event_get+0x6c0>)
1000de68:	4798      	blx	r3
1000de6a:	2620      	movs	r6, #32
1000de6c:	e021      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de6e:	1c31      	adds	r1, r6, #0
1000de70:	9801      	ldr	r0, [sp, #4]
1000de72:	1c2a      	adds	r2, r5, #0
1000de74:	4b45      	ldr	r3, [pc, #276]	; (1000df8c <at_ble_event_get+0x6c4>)
1000de76:	4798      	blx	r3
1000de78:	2633      	movs	r6, #51	; 0x33
1000de7a:	e01a      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de7c:	1c31      	adds	r1, r6, #0
1000de7e:	9801      	ldr	r0, [sp, #4]
1000de80:	1c2a      	adds	r2, r5, #0
1000de82:	4b43      	ldr	r3, [pc, #268]	; (1000df90 <at_ble_event_get+0x6c8>)
1000de84:	4798      	blx	r3
1000de86:	2630      	movs	r6, #48	; 0x30
1000de88:	e013      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de8a:	1c31      	adds	r1, r6, #0
1000de8c:	9801      	ldr	r0, [sp, #4]
1000de8e:	1c2a      	adds	r2, r5, #0
1000de90:	4b40      	ldr	r3, [pc, #256]	; (1000df94 <at_ble_event_get+0x6cc>)
1000de92:	4798      	blx	r3
1000de94:	2634      	movs	r6, #52	; 0x34
1000de96:	e00c      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000de98:	1c31      	adds	r1, r6, #0
1000de9a:	9801      	ldr	r0, [sp, #4]
1000de9c:	1c2a      	adds	r2, r5, #0
1000de9e:	4b3e      	ldr	r3, [pc, #248]	; (1000df98 <at_ble_event_get+0x6d0>)
1000dea0:	4798      	blx	r3
1000dea2:	2635      	movs	r6, #53	; 0x35
1000dea4:	e005      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000dea6:	1c31      	adds	r1, r6, #0
1000dea8:	9801      	ldr	r0, [sp, #4]
1000deaa:	1c2a      	adds	r2, r5, #0
1000deac:	4b3b      	ldr	r3, [pc, #236]	; (1000df9c <at_ble_event_get+0x6d4>)
1000deae:	4798      	blx	r3
1000deb0:	2632      	movs	r6, #50	; 0x32
1000deb2:	9b03      	ldr	r3, [sp, #12]
1000deb4:	701e      	strb	r6, [r3, #0]
1000deb6:	2300      	movs	r3, #0
1000deb8:	9302      	str	r3, [sp, #8]
1000deba:	e57a      	b.n	1000d9b2 <at_ble_event_get+0xea>
1000debc:	23d0      	movs	r3, #208	; 0xd0
1000debe:	e7fb      	b.n	1000deb8 <at_ble_event_get+0x5f0>
1000dec0:	9b01      	ldr	r3, [sp, #4]
1000dec2:	9e02      	ldr	r6, [sp, #8]
1000dec4:	2bbb      	cmp	r3, #187	; 0xbb
1000dec6:	d000      	beq.n	1000deca <at_ble_event_get+0x602>
1000dec8:	e6e6      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000deca:	e7f2      	b.n	1000deb2 <at_ble_event_get+0x5ea>
1000decc:	9b02      	ldr	r3, [sp, #8]
1000dece:	2b00      	cmp	r3, #0
1000ded0:	d000      	beq.n	1000ded4 <at_ble_event_get+0x60c>
1000ded2:	e56e      	b.n	1000d9b2 <at_ble_event_get+0xea>
1000ded4:	e6e0      	b.n	1000dc98 <at_ble_event_get+0x3d0>
1000ded6:	9802      	ldr	r0, [sp, #8]
1000ded8:	b007      	add	sp, #28
1000deda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dedc:	00000e22 	.word	0x00000e22
1000dee0:	00000e25 	.word	0x00000e25
1000dee4:	00001b05 	.word	0x00001b05
1000dee8:	00001b01 	.word	0x00001b01
1000deec:	00001b03 	.word	0x00001b03
1000def0:	00001b06 	.word	0x00001b06
1000def4:	00001b08 	.word	0x00001b08
1000def8:	10010085 	.word	0x10010085
1000defc:	10010069 	.word	0x10010069
1000df00:	10010305 	.word	0x10010305
1000df04:	100103f5 	.word	0x100103f5
1000df08:	10010419 	.word	0x10010419
1000df0c:	1000f3fd 	.word	0x1000f3fd
1000df10:	1000fc7d 	.word	0x1000fc7d
1000df14:	1000fcf9 	.word	0x1000fcf9
1000df18:	1000f6b5 	.word	0x1000f6b5
1000df1c:	1000f751 	.word	0x1000f751
1000df20:	1000f829 	.word	0x1000f829
1000df24:	1000fab1 	.word	0x1000fab1
1000df28:	1000fb51 	.word	0x1000fb51
1000df2c:	1000fc09 	.word	0x1000fc09
1000df30:	1000fc31 	.word	0x1000fc31
1000df34:	1000fc47 	.word	0x1000fc47
1000df38:	1000fd11 	.word	0x1000fd11
1000df3c:	1000fd3f 	.word	0x1000fd3f
1000df40:	1000fd55 	.word	0x1000fd55
1000df44:	1000fd7f 	.word	0x1000fd7f
1000df48:	1000fbad 	.word	0x1000fbad
1000df4c:	1000fbd7 	.word	0x1000fbd7
1000df50:	1000ee3d 	.word	0x1000ee3d
1000df54:	1000ee69 	.word	0x1000ee69
1000df58:	100105c1 	.word	0x100105c1
1000df5c:	100105fd 	.word	0x100105fd
1000df60:	10010645 	.word	0x10010645
1000df64:	10010689 	.word	0x10010689
1000df68:	100106bd 	.word	0x100106bd
1000df6c:	10010581 	.word	0x10010581
1000df70:	10010789 	.word	0x10010789
1000df74:	10010711 	.word	0x10010711
1000df78:	1000ed95 	.word	0x1000ed95
1000df7c:	1000ee01 	.word	0x1000ee01
1000df80:	1000edc5 	.word	0x1000edc5
1000df84:	10010799 	.word	0x10010799
1000df88:	100107d9 	.word	0x100107d9
1000df8c:	10010aa1 	.word	0x10010aa1
1000df90:	10010aab 	.word	0x10010aab
1000df94:	10010ab1 	.word	0x10010ab1
1000df98:	10010ab7 	.word	0x10010ab7
1000df9c:	10010ac3 	.word	0x10010ac3

1000dfa0 <internal_event_flush>:
1000dfa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dfa2:	490e      	ldr	r1, [pc, #56]	; (1000dfdc <internal_event_flush+0x3c>)
1000dfa4:	2400      	movs	r4, #0
1000dfa6:	680b      	ldr	r3, [r1, #0]
1000dfa8:	1c0f      	adds	r7, r1, #0
1000dfaa:	1c1e      	adds	r6, r3, #0
1000dfac:	4a0c      	ldr	r2, [pc, #48]	; (1000dfe0 <internal_event_flush+0x40>)
1000dfae:	6815      	ldr	r5, [r2, #0]
1000dfb0:	9201      	str	r2, [sp, #4]
1000dfb2:	2b00      	cmp	r3, #0
1000dfb4:	d00e      	beq.n	1000dfd4 <internal_event_flush+0x34>
1000dfb6:	889a      	ldrh	r2, [r3, #4]
1000dfb8:	6819      	ldr	r1, [r3, #0]
1000dfba:	4282      	cmp	r2, r0
1000dfbc:	d107      	bne.n	1000dfce <internal_event_flush+0x2e>
1000dfbe:	2c00      	cmp	r4, #0
1000dfc0:	d001      	beq.n	1000dfc6 <internal_event_flush+0x26>
1000dfc2:	6021      	str	r1, [r4, #0]
1000dfc4:	e000      	b.n	1000dfc8 <internal_event_flush+0x28>
1000dfc6:	1c0e      	adds	r6, r1, #0
1000dfc8:	601d      	str	r5, [r3, #0]
1000dfca:	1c1d      	adds	r5, r3, #0
1000dfcc:	1c23      	adds	r3, r4, #0
1000dfce:	1c1c      	adds	r4, r3, #0
1000dfd0:	1c0b      	adds	r3, r1, #0
1000dfd2:	e7ee      	b.n	1000dfb2 <internal_event_flush+0x12>
1000dfd4:	9b01      	ldr	r3, [sp, #4]
1000dfd6:	603e      	str	r6, [r7, #0]
1000dfd8:	601d      	str	r5, [r3, #0]
1000dfda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dfdc:	1001865c 	.word	0x1001865c
1000dfe0:	10018660 	.word	0x10018660

1000dfe4 <internal_conn_flush>:
1000dfe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dfe6:	4a12      	ldr	r2, [pc, #72]	; (1000e030 <internal_conn_flush+0x4c>)
1000dfe8:	9000      	str	r0, [sp, #0]
1000dfea:	6813      	ldr	r3, [r2, #0]
1000dfec:	4811      	ldr	r0, [pc, #68]	; (1000e034 <internal_conn_flush+0x50>)
1000dfee:	1c1f      	adds	r7, r3, #0
1000dff0:	2100      	movs	r1, #0
1000dff2:	4684      	mov	ip, r0
1000dff4:	6804      	ldr	r4, [r0, #0]
1000dff6:	9201      	str	r2, [sp, #4]
1000dff8:	2b00      	cmp	r3, #0
1000dffa:	d014      	beq.n	1000e026 <internal_conn_flush+0x42>
1000dffc:	88d8      	ldrh	r0, [r3, #6]
1000dffe:	9a00      	ldr	r2, [sp, #0]
1000e000:	681d      	ldr	r5, [r3, #0]
1000e002:	0a06      	lsrs	r6, r0, #8
1000e004:	4296      	cmp	r6, r2
1000e006:	d10b      	bne.n	1000e020 <internal_conn_flush+0x3c>
1000e008:	26fd      	movs	r6, #253	; 0xfd
1000e00a:	4006      	ands	r6, r0
1000e00c:	2e0c      	cmp	r6, #12
1000e00e:	d107      	bne.n	1000e020 <internal_conn_flush+0x3c>
1000e010:	2900      	cmp	r1, #0
1000e012:	d001      	beq.n	1000e018 <internal_conn_flush+0x34>
1000e014:	600d      	str	r5, [r1, #0]
1000e016:	e000      	b.n	1000e01a <internal_conn_flush+0x36>
1000e018:	1c2f      	adds	r7, r5, #0
1000e01a:	601c      	str	r4, [r3, #0]
1000e01c:	1c1c      	adds	r4, r3, #0
1000e01e:	1c0b      	adds	r3, r1, #0
1000e020:	1c19      	adds	r1, r3, #0
1000e022:	1c2b      	adds	r3, r5, #0
1000e024:	e7e8      	b.n	1000dff8 <internal_conn_flush+0x14>
1000e026:	9b01      	ldr	r3, [sp, #4]
1000e028:	601f      	str	r7, [r3, #0]
1000e02a:	4663      	mov	r3, ip
1000e02c:	601c      	str	r4, [r3, #0]
1000e02e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e030:	1001865c 	.word	0x1001865c
1000e034:	10018660 	.word	0x10018660

1000e038 <at_ble_device_name_set>:
1000e038:	b530      	push	{r4, r5, lr}
1000e03a:	23cf      	movs	r3, #207	; 0xcf
1000e03c:	2800      	cmp	r0, #0
1000e03e:	d010      	beq.n	1000e062 <at_ble_device_name_set+0x2a>
1000e040:	1e4a      	subs	r2, r1, #1
1000e042:	2a1f      	cmp	r2, #31
1000e044:	d80d      	bhi.n	1000e062 <at_ble_device_name_set+0x2a>
1000e046:	4a08      	ldr	r2, [pc, #32]	; (1000e068 <at_ble_device_name_set+0x30>)
1000e048:	1c13      	adds	r3, r2, #0
1000e04a:	33aa      	adds	r3, #170	; 0xaa
1000e04c:	8019      	strh	r1, [r3, #0]
1000e04e:	2300      	movs	r3, #0
1000e050:	1c1c      	adds	r4, r3, #0
1000e052:	5cc5      	ldrb	r5, [r0, r3]
1000e054:	34ac      	adds	r4, #172	; 0xac
1000e056:	3301      	adds	r3, #1
1000e058:	5515      	strb	r5, [r2, r4]
1000e05a:	b2dc      	uxtb	r4, r3
1000e05c:	428c      	cmp	r4, r1
1000e05e:	d3f7      	bcc.n	1000e050 <at_ble_device_name_set+0x18>
1000e060:	2300      	movs	r3, #0
1000e062:	1c18      	adds	r0, r3, #0
1000e064:	bd30      	pop	{r4, r5, pc}
1000e066:	46c0      	nop			; (mov r8, r8)
1000e068:	10019696 	.word	0x10019696

1000e06c <at_ble_addr_get>:
1000e06c:	b510      	push	{r4, lr}
1000e06e:	1c04      	adds	r4, r0, #0
1000e070:	20cf      	movs	r0, #207	; 0xcf
1000e072:	2c00      	cmp	r4, #0
1000e074:	d006      	beq.n	1000e084 <at_ble_addr_get+0x18>
1000e076:	4b04      	ldr	r3, [pc, #16]	; (1000e088 <at_ble_addr_get+0x1c>)
1000e078:	38ce      	subs	r0, #206	; 0xce
1000e07a:	1c21      	adds	r1, r4, #0
1000e07c:	4798      	blx	r3
1000e07e:	4b03      	ldr	r3, [pc, #12]	; (1000e08c <at_ble_addr_get+0x20>)
1000e080:	791b      	ldrb	r3, [r3, #4]
1000e082:	7023      	strb	r3, [r4, #0]
1000e084:	bd10      	pop	{r4, pc}
1000e086:	46c0      	nop			; (mov r8, r8)
1000e088:	1000ff19 	.word	0x1000ff19
1000e08c:	10019696 	.word	0x10019696

1000e090 <at_ble_set_dev_config>:
1000e090:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e092:	7906      	ldrb	r6, [r0, #4]
1000e094:	b089      	sub	sp, #36	; 0x24
1000e096:	25cf      	movs	r5, #207	; 0xcf
1000e098:	2e03      	cmp	r6, #3
1000e09a:	d838      	bhi.n	1000e10e <at_ble_set_dev_config+0x7e>
1000e09c:	7803      	ldrb	r3, [r0, #0]
1000e09e:	3511      	adds	r5, #17
1000e0a0:	2b0f      	cmp	r3, #15
1000e0a2:	d834      	bhi.n	1000e10e <at_ble_set_dev_config+0x7e>
1000e0a4:	2380      	movs	r3, #128	; 0x80
1000e0a6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e0a8:	3d11      	subs	r5, #17
1000e0aa:	009b      	lsls	r3, r3, #2
1000e0ac:	429f      	cmp	r7, r3
1000e0ae:	d82e      	bhi.n	1000e10e <at_ble_set_dev_config+0x7e>
1000e0b0:	7fc5      	ldrb	r5, [r0, #31]
1000e0b2:	7f83      	ldrb	r3, [r0, #30]
1000e0b4:	01ad      	lsls	r5, r5, #6
1000e0b6:	015b      	lsls	r3, r3, #5
1000e0b8:	431d      	orrs	r5, r3
1000e0ba:	7ec3      	ldrb	r3, [r0, #27]
1000e0bc:	431d      	orrs	r5, r3
1000e0be:	7f43      	ldrb	r3, [r0, #29]
1000e0c0:	011b      	lsls	r3, r3, #4
1000e0c2:	431d      	orrs	r5, r3
1000e0c4:	7f03      	ldrb	r3, [r0, #28]
1000e0c6:	009b      	lsls	r3, r3, #2
1000e0c8:	431d      	orrs	r5, r3
1000e0ca:	4b12      	ldr	r3, [pc, #72]	; (1000e114 <at_ble_set_dev_config+0x84>)
1000e0cc:	b2ed      	uxtb	r5, r5
1000e0ce:	711e      	strb	r6, [r3, #4]
1000e0d0:	7903      	ldrb	r3, [r0, #4]
1000e0d2:	3b02      	subs	r3, #2
1000e0d4:	2b01      	cmp	r3, #1
1000e0d6:	d801      	bhi.n	1000e0dc <at_ble_set_dev_config+0x4c>
1000e0d8:	2302      	movs	r3, #2
1000e0da:	7103      	strb	r3, [r0, #4]
1000e0dc:	1c04      	adds	r4, r0, #0
1000e0de:	1c23      	adds	r3, r4, #0
1000e0e0:	330b      	adds	r3, #11
1000e0e2:	8861      	ldrh	r1, [r4, #2]
1000e0e4:	9307      	str	r3, [sp, #28]
1000e0e6:	7923      	ldrb	r3, [r4, #4]
1000e0e8:	7800      	ldrb	r0, [r0, #0]
1000e0ea:	9300      	str	r3, [sp, #0]
1000e0ec:	9501      	str	r5, [sp, #4]
1000e0ee:	8c25      	ldrh	r5, [r4, #32]
1000e0f0:	1d62      	adds	r2, r4, #5
1000e0f2:	9502      	str	r5, [sp, #8]
1000e0f4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e0f6:	9b07      	ldr	r3, [sp, #28]
1000e0f8:	9503      	str	r5, [sp, #12]
1000e0fa:	9704      	str	r7, [sp, #16]
1000e0fc:	4d06      	ldr	r5, [pc, #24]	; (1000e118 <at_ble_set_dev_config+0x88>)
1000e0fe:	47a8      	blx	r5
1000e100:	7126      	strb	r6, [r4, #4]
1000e102:	1c05      	adds	r5, r0, #0
1000e104:	1c21      	adds	r1, r4, #0
1000e106:	4803      	ldr	r0, [pc, #12]	; (1000e114 <at_ble_set_dev_config+0x84>)
1000e108:	2226      	movs	r2, #38	; 0x26
1000e10a:	4b04      	ldr	r3, [pc, #16]	; (1000e11c <at_ble_set_dev_config+0x8c>)
1000e10c:	4798      	blx	r3
1000e10e:	1c28      	adds	r0, r5, #0
1000e110:	b009      	add	sp, #36	; 0x24
1000e112:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e114:	10019696 	.word	0x10019696
1000e118:	1000fe11 	.word	0x1000fe11
1000e11c:	10014a2f 	.word	0x10014a2f

1000e120 <at_ble_init>:
1000e120:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e122:	b087      	sub	sp, #28
1000e124:	af03      	add	r7, sp, #12
1000e126:	4954      	ldr	r1, [pc, #336]	; (1000e278 <at_ble_init+0x158>)
1000e128:	220b      	movs	r2, #11
1000e12a:	4b54      	ldr	r3, [pc, #336]	; (1000e27c <at_ble_init+0x15c>)
1000e12c:	1c04      	adds	r4, r0, #0
1000e12e:	1c38      	adds	r0, r7, #0
1000e130:	4798      	blx	r3
1000e132:	2205      	movs	r2, #5
1000e134:	4b52      	ldr	r3, [pc, #328]	; (1000e280 <at_ble_init+0x160>)
1000e136:	2640      	movs	r6, #64	; 0x40
1000e138:	801a      	strh	r2, [r3, #0]
1000e13a:	2300      	movs	r3, #0
1000e13c:	4a51      	ldr	r2, [pc, #324]	; (1000e284 <at_ble_init+0x164>)
1000e13e:	6013      	str	r3, [r2, #0]
1000e140:	4a51      	ldr	r2, [pc, #324]	; (1000e288 <at_ble_init+0x168>)
1000e142:	7013      	strb	r3, [r2, #0]
1000e144:	4a51      	ldr	r2, [pc, #324]	; (1000e28c <at_ble_init+0x16c>)
1000e146:	7013      	strb	r3, [r2, #0]
1000e148:	4b51      	ldr	r3, [pc, #324]	; (1000e290 <at_ble_init+0x170>)
1000e14a:	4798      	blx	r3
1000e14c:	4b51      	ldr	r3, [pc, #324]	; (1000e294 <at_ble_init+0x174>)
1000e14e:	4798      	blx	r3
1000e150:	4b51      	ldr	r3, [pc, #324]	; (1000e298 <at_ble_init+0x178>)
1000e152:	4798      	blx	r3
1000e154:	4b51      	ldr	r3, [pc, #324]	; (1000e29c <at_ble_init+0x17c>)
1000e156:	4798      	blx	r3
1000e158:	2c00      	cmp	r4, #0
1000e15a:	d100      	bne.n	1000e15e <at_ble_init+0x3e>
1000e15c:	e089      	b.n	1000e272 <at_ble_init+0x152>
1000e15e:	68a3      	ldr	r3, [r4, #8]
1000e160:	2b00      	cmp	r3, #0
1000e162:	d100      	bne.n	1000e166 <at_ble_init+0x46>
1000e164:	e085      	b.n	1000e272 <at_ble_init+0x152>
1000e166:	6923      	ldr	r3, [r4, #16]
1000e168:	2b00      	cmp	r3, #0
1000e16a:	d100      	bne.n	1000e16e <at_ble_init+0x4e>
1000e16c:	e081      	b.n	1000e272 <at_ble_init+0x152>
1000e16e:	6820      	ldr	r0, [r4, #0]
1000e170:	2800      	cmp	r0, #0
1000e172:	d102      	bne.n	1000e17a <at_ble_init+0x5a>
1000e174:	6863      	ldr	r3, [r4, #4]
1000e176:	2b00      	cmp	r3, #0
1000e178:	d17b      	bne.n	1000e272 <at_ble_init+0x152>
1000e17a:	4b49      	ldr	r3, [pc, #292]	; (1000e2a0 <at_ble_init+0x180>)
1000e17c:	6861      	ldr	r1, [r4, #4]
1000e17e:	4798      	blx	r3
1000e180:	4b48      	ldr	r3, [pc, #288]	; (1000e2a4 <at_ble_init+0x184>)
1000e182:	4798      	blx	r3
1000e184:	2801      	cmp	r0, #1
1000e186:	d901      	bls.n	1000e18c <at_ble_init+0x6c>
1000e188:	26e2      	movs	r6, #226	; 0xe2
1000e18a:	e072      	b.n	1000e272 <at_ble_init+0x152>
1000e18c:	4846      	ldr	r0, [pc, #280]	; (1000e2a8 <at_ble_init+0x188>)
1000e18e:	4b47      	ldr	r3, [pc, #284]	; (1000e2ac <at_ble_init+0x18c>)
1000e190:	4798      	blx	r3
1000e192:	2800      	cmp	r0, #0
1000e194:	d1f8      	bne.n	1000e188 <at_ble_init+0x68>
1000e196:	1c20      	adds	r0, r4, #0
1000e198:	4b45      	ldr	r3, [pc, #276]	; (1000e2b0 <at_ble_init+0x190>)
1000e19a:	4798      	blx	r3
1000e19c:	68e0      	ldr	r0, [r4, #12]
1000e19e:	68a1      	ldr	r1, [r4, #8]
1000e1a0:	4b44      	ldr	r3, [pc, #272]	; (1000e2b4 <at_ble_init+0x194>)
1000e1a2:	4798      	blx	r3
1000e1a4:	466b      	mov	r3, sp
1000e1a6:	2201      	movs	r2, #1
1000e1a8:	1cdc      	adds	r4, r3, #3
1000e1aa:	1c20      	adds	r0, r4, #0
1000e1ac:	a901      	add	r1, sp, #4
1000e1ae:	4252      	negs	r2, r2
1000e1b0:	4b41      	ldr	r3, [pc, #260]	; (1000e2b8 <at_ble_init+0x198>)
1000e1b2:	4798      	blx	r3
1000e1b4:	2800      	cmp	r0, #0
1000e1b6:	d102      	bne.n	1000e1be <at_ble_init+0x9e>
1000e1b8:	7823      	ldrb	r3, [r4, #0]
1000e1ba:	2b39      	cmp	r3, #57	; 0x39
1000e1bc:	d1f2      	bne.n	1000e1a4 <at_ble_init+0x84>
1000e1be:	4b3f      	ldr	r3, [pc, #252]	; (1000e2bc <at_ble_init+0x19c>)
1000e1c0:	4798      	blx	r3
1000e1c2:	1e06      	subs	r6, r0, #0
1000e1c4:	d155      	bne.n	1000e272 <at_ble_init+0x152>
1000e1c6:	1c03      	adds	r3, r0, #0
1000e1c8:	2101      	movs	r1, #1
1000e1ca:	4a3d      	ldr	r2, [pc, #244]	; (1000e2c0 <at_ble_init+0x1a0>)
1000e1cc:	4249      	negs	r1, r1
1000e1ce:	189a      	adds	r2, r3, r2
1000e1d0:	3312      	adds	r3, #18
1000e1d2:	8151      	strh	r1, [r2, #10]
1000e1d4:	2b90      	cmp	r3, #144	; 0x90
1000e1d6:	d1f7      	bne.n	1000e1c8 <at_ble_init+0xa8>
1000e1d8:	4c3a      	ldr	r4, [pc, #232]	; (1000e2c4 <at_ble_init+0x1a4>)
1000e1da:	3b81      	subs	r3, #129	; 0x81
1000e1dc:	7023      	strb	r3, [r4, #0]
1000e1de:	4b3a      	ldr	r3, [pc, #232]	; (1000e2c8 <at_ble_init+0x1a8>)
1000e1e0:	4a3a      	ldr	r2, [pc, #232]	; (1000e2cc <at_ble_init+0x1ac>)
1000e1e2:	8063      	strh	r3, [r4, #2]
1000e1e4:	2300      	movs	r3, #0
1000e1e6:	7123      	strb	r3, [r4, #4]
1000e1e8:	3301      	adds	r3, #1
1000e1ea:	1e58      	subs	r0, r3, #1
1000e1ec:	0119      	lsls	r1, r3, #4
1000e1ee:	4301      	orrs	r1, r0
1000e1f0:	3302      	adds	r3, #2
1000e1f2:	7011      	strb	r1, [r2, #0]
1000e1f4:	3201      	adds	r2, #1
1000e1f6:	2b21      	cmp	r3, #33	; 0x21
1000e1f8:	d1f7      	bne.n	1000e1ea <at_ble_init+0xca>
1000e1fa:	33e0      	adds	r3, #224	; 0xe0
1000e1fc:	33ff      	adds	r3, #255	; 0xff
1000e1fe:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e200:	1c23      	adds	r3, r4, #0
1000e202:	2500      	movs	r5, #0
1000e204:	3373      	adds	r3, #115	; 0x73
1000e206:	701d      	strb	r5, [r3, #0]
1000e208:	1c23      	adds	r3, r4, #0
1000e20a:	3372      	adds	r3, #114	; 0x72
1000e20c:	701d      	strb	r5, [r3, #0]
1000e20e:	1c23      	adds	r3, r4, #0
1000e210:	3376      	adds	r3, #118	; 0x76
1000e212:	701d      	strb	r5, [r3, #0]
1000e214:	1c23      	adds	r3, r4, #0
1000e216:	33cc      	adds	r3, #204	; 0xcc
1000e218:	801d      	strh	r5, [r3, #0]
1000e21a:	1c22      	adds	r2, r4, #0
1000e21c:	23a0      	movs	r3, #160	; 0xa0
1000e21e:	32d0      	adds	r2, #208	; 0xd0
1000e220:	005b      	lsls	r3, r3, #1
1000e222:	8013      	strh	r3, [r2, #0]
1000e224:	1c22      	adds	r2, r4, #0
1000e226:	32ce      	adds	r2, #206	; 0xce
1000e228:	8013      	strh	r3, [r2, #0]
1000e22a:	1c23      	adds	r3, r4, #0
1000e22c:	33d2      	adds	r3, #210	; 0xd2
1000e22e:	801d      	strh	r5, [r3, #0]
1000e230:	22fa      	movs	r2, #250	; 0xfa
1000e232:	1c23      	adds	r3, r4, #0
1000e234:	0052      	lsls	r2, r2, #1
1000e236:	33d4      	adds	r3, #212	; 0xd4
1000e238:	801a      	strh	r2, [r3, #0]
1000e23a:	1c23      	adds	r3, r4, #0
1000e23c:	33d6      	adds	r3, #214	; 0xd6
1000e23e:	701d      	strb	r5, [r3, #0]
1000e240:	1c20      	adds	r0, r4, #0
1000e242:	4b23      	ldr	r3, [pc, #140]	; (1000e2d0 <at_ble_init+0x1b0>)
1000e244:	76e5      	strb	r5, [r4, #27]
1000e246:	7725      	strb	r5, [r4, #28]
1000e248:	7765      	strb	r5, [r4, #29]
1000e24a:	77a5      	strb	r5, [r4, #30]
1000e24c:	77e5      	strb	r5, [r4, #31]
1000e24e:	8425      	strh	r5, [r4, #32]
1000e250:	8465      	strh	r5, [r4, #34]	; 0x22
1000e252:	4798      	blx	r3
1000e254:	1c23      	adds	r3, r4, #0
1000e256:	2207      	movs	r2, #7
1000e258:	3374      	adds	r3, #116	; 0x74
1000e25a:	701a      	strb	r2, [r3, #0]
1000e25c:	1c23      	adds	r3, r4, #0
1000e25e:	3204      	adds	r2, #4
1000e260:	33aa      	adds	r3, #170	; 0xaa
1000e262:	801a      	strh	r2, [r3, #0]
1000e264:	1c2b      	adds	r3, r5, #0
1000e266:	5d7a      	ldrb	r2, [r7, r5]
1000e268:	33ac      	adds	r3, #172	; 0xac
1000e26a:	3501      	adds	r5, #1
1000e26c:	54e2      	strb	r2, [r4, r3]
1000e26e:	2d0b      	cmp	r5, #11
1000e270:	d1f8      	bne.n	1000e264 <at_ble_init+0x144>
1000e272:	1c30      	adds	r0, r6, #0
1000e274:	b007      	add	sp, #28
1000e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e278:	100169a3 	.word	0x100169a3
1000e27c:	10014a2f 	.word	0x10014a2f
1000e280:	10019604 	.word	0x10019604
1000e284:	1001870c 	.word	0x1001870c
1000e288:	1001866c 	.word	0x1001866c
1000e28c:	10016be4 	.word	0x10016be4
1000e290:	100107e9 	.word	0x100107e9
1000e294:	1000e591 	.word	0x1000e591
1000e298:	1000ebf1 	.word	0x1000ebf1
1000e29c:	1000ee31 	.word	0x1000ee31
1000e2a0:	1000ec2d 	.word	0x1000ec2d
1000e2a4:	1000cded 	.word	0x1000cded
1000e2a8:	1000f131 	.word	0x1000f131
1000e2ac:	1000d031 	.word	0x1000d031
1000e2b0:	1000f1d9 	.word	0x1000f1d9
1000e2b4:	1000d80d 	.word	0x1000d80d
1000e2b8:	1000d8c9 	.word	0x1000d8c9
1000e2bc:	1000fda1 	.word	0x1000fda1
1000e2c0:	10019606 	.word	0x10019606
1000e2c4:	10019696 	.word	0x10019696
1000e2c8:	00003a98 	.word	0x00003a98
1000e2cc:	100196a1 	.word	0x100196a1
1000e2d0:	1000e091 	.word	0x1000e091

1000e2d4 <at_ble_addr_set>:
1000e2d4:	b538      	push	{r3, r4, r5, lr}
1000e2d6:	1c45      	adds	r5, r0, #1
1000e2d8:	1c03      	adds	r3, r0, #0
1000e2da:	20cf      	movs	r0, #207	; 0xcf
1000e2dc:	2d00      	cmp	r5, #0
1000e2de:	d018      	beq.n	1000e312 <at_ble_addr_set+0x3e>
1000e2e0:	781a      	ldrb	r2, [r3, #0]
1000e2e2:	2a03      	cmp	r2, #3
1000e2e4:	d815      	bhi.n	1000e312 <at_ble_addr_set+0x3e>
1000e2e6:	2a01      	cmp	r2, #1
1000e2e8:	d102      	bne.n	1000e2f0 <at_ble_addr_set+0x1c>
1000e2ea:	785a      	ldrb	r2, [r3, #1]
1000e2ec:	2a00      	cmp	r2, #0
1000e2ee:	d010      	beq.n	1000e312 <at_ble_addr_set+0x3e>
1000e2f0:	1c1c      	adds	r4, r3, #0
1000e2f2:	1c29      	adds	r1, r5, #0
1000e2f4:	2206      	movs	r2, #6
1000e2f6:	4b07      	ldr	r3, [pc, #28]	; (1000e314 <at_ble_addr_set+0x40>)
1000e2f8:	4807      	ldr	r0, [pc, #28]	; (1000e318 <at_ble_addr_set+0x44>)
1000e2fa:	4798      	blx	r3
1000e2fc:	7823      	ldrb	r3, [r4, #0]
1000e2fe:	4807      	ldr	r0, [pc, #28]	; (1000e31c <at_ble_addr_set+0x48>)
1000e300:	7103      	strb	r3, [r0, #4]
1000e302:	4b07      	ldr	r3, [pc, #28]	; (1000e320 <at_ble_addr_set+0x4c>)
1000e304:	4798      	blx	r3
1000e306:	7823      	ldrb	r3, [r4, #0]
1000e308:	2b00      	cmp	r3, #0
1000e30a:	d102      	bne.n	1000e312 <at_ble_addr_set+0x3e>
1000e30c:	1c28      	adds	r0, r5, #0
1000e30e:	4b05      	ldr	r3, [pc, #20]	; (1000e324 <at_ble_addr_set+0x50>)
1000e310:	4798      	blx	r3
1000e312:	bd38      	pop	{r3, r4, r5, pc}
1000e314:	10014a2f 	.word	0x10014a2f
1000e318:	1001969b 	.word	0x1001969b
1000e31c:	10019696 	.word	0x10019696
1000e320:	1000e091 	.word	0x1000e091
1000e324:	1000f25d 	.word	0x1000f25d

1000e328 <at_ble_adv_data_set>:
1000e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e32a:	4684      	mov	ip, r0
1000e32c:	1c0f      	adds	r7, r1, #0
1000e32e:	1c16      	adds	r6, r2, #0
1000e330:	1c1c      	adds	r4, r3, #0
1000e332:	2800      	cmp	r0, #0
1000e334:	d102      	bne.n	1000e33c <at_ble_adv_data_set+0x14>
1000e336:	20e2      	movs	r0, #226	; 0xe2
1000e338:	2a00      	cmp	r2, #0
1000e33a:	d02b      	beq.n	1000e394 <at_ble_adv_data_set+0x6c>
1000e33c:	20cf      	movs	r0, #207	; 0xcf
1000e33e:	2f1f      	cmp	r7, #31
1000e340:	d828      	bhi.n	1000e394 <at_ble_adv_data_set+0x6c>
1000e342:	2c1f      	cmp	r4, #31
1000e344:	d826      	bhi.n	1000e394 <at_ble_adv_data_set+0x6c>
1000e346:	4663      	mov	r3, ip
1000e348:	2b00      	cmp	r3, #0
1000e34a:	d00e      	beq.n	1000e36a <at_ble_adv_data_set+0x42>
1000e34c:	4812      	ldr	r0, [pc, #72]	; (1000e398 <at_ble_adv_data_set+0x70>)
1000e34e:	4d13      	ldr	r5, [pc, #76]	; (1000e39c <at_ble_adv_data_set+0x74>)
1000e350:	2f00      	cmp	r7, #0
1000e352:	d104      	bne.n	1000e35e <at_ble_adv_data_set+0x36>
1000e354:	1c39      	adds	r1, r7, #0
1000e356:	221f      	movs	r2, #31
1000e358:	4b11      	ldr	r3, [pc, #68]	; (1000e3a0 <at_ble_adv_data_set+0x78>)
1000e35a:	4798      	blx	r3
1000e35c:	e003      	b.n	1000e366 <at_ble_adv_data_set+0x3e>
1000e35e:	4661      	mov	r1, ip
1000e360:	1c3a      	adds	r2, r7, #0
1000e362:	4b10      	ldr	r3, [pc, #64]	; (1000e3a4 <at_ble_adv_data_set+0x7c>)
1000e364:	4798      	blx	r3
1000e366:	3572      	adds	r5, #114	; 0x72
1000e368:	702f      	strb	r7, [r5, #0]
1000e36a:	1e30      	subs	r0, r6, #0
1000e36c:	d012      	beq.n	1000e394 <at_ble_adv_data_set+0x6c>
1000e36e:	4d0b      	ldr	r5, [pc, #44]	; (1000e39c <at_ble_adv_data_set+0x74>)
1000e370:	480d      	ldr	r0, [pc, #52]	; (1000e3a8 <at_ble_adv_data_set+0x80>)
1000e372:	2c00      	cmp	r4, #0
1000e374:	d107      	bne.n	1000e386 <at_ble_adv_data_set+0x5e>
1000e376:	1c21      	adds	r1, r4, #0
1000e378:	221f      	movs	r2, #31
1000e37a:	4b09      	ldr	r3, [pc, #36]	; (1000e3a0 <at_ble_adv_data_set+0x78>)
1000e37c:	3573      	adds	r5, #115	; 0x73
1000e37e:	4798      	blx	r3
1000e380:	702c      	strb	r4, [r5, #0]
1000e382:	1c20      	adds	r0, r4, #0
1000e384:	e006      	b.n	1000e394 <at_ble_adv_data_set+0x6c>
1000e386:	1c31      	adds	r1, r6, #0
1000e388:	1c22      	adds	r2, r4, #0
1000e38a:	4b06      	ldr	r3, [pc, #24]	; (1000e3a4 <at_ble_adv_data_set+0x7c>)
1000e38c:	4798      	blx	r3
1000e38e:	2000      	movs	r0, #0
1000e390:	3573      	adds	r5, #115	; 0x73
1000e392:	702c      	strb	r4, [r5, #0]
1000e394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e396:	46c0      	nop			; (mov r8, r8)
1000e398:	100196ca 	.word	0x100196ca
1000e39c:	10019696 	.word	0x10019696
1000e3a0:	10014a41 	.word	0x10014a41
1000e3a4:	10014a2f 	.word	0x10014a2f
1000e3a8:	100196e9 	.word	0x100196e9

1000e3ac <at_ble_adv_start>:
1000e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e3ae:	b091      	sub	sp, #68	; 0x44
1000e3b0:	1c1f      	adds	r7, r3, #0
1000e3b2:	ab16      	add	r3, sp, #88	; 0x58
1000e3b4:	881d      	ldrh	r5, [r3, #0]
1000e3b6:	ab17      	add	r3, sp, #92	; 0x5c
1000e3b8:	881b      	ldrh	r3, [r3, #0]
1000e3ba:	910d      	str	r1, [sp, #52]	; 0x34
1000e3bc:	930e      	str	r3, [sp, #56]	; 0x38
1000e3be:	ab18      	add	r3, sp, #96	; 0x60
1000e3c0:	781b      	ldrb	r3, [r3, #0]
1000e3c2:	1c04      	adds	r4, r0, #0
1000e3c4:	930f      	str	r3, [sp, #60]	; 0x3c
1000e3c6:	4b42      	ldr	r3, [pc, #264]	; (1000e4d0 <at_ble_adv_start+0x124>)
1000e3c8:	1c16      	adds	r6, r2, #0
1000e3ca:	3373      	adds	r3, #115	; 0x73
1000e3cc:	781b      	ldrb	r3, [r3, #0]
1000e3ce:	20cf      	movs	r0, #207	; 0xcf
1000e3d0:	930c      	str	r3, [sp, #48]	; 0x30
1000e3d2:	2c01      	cmp	r4, #1
1000e3d4:	d103      	bne.n	1000e3de <at_ble_adv_start+0x32>
1000e3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e3d8:	2b00      	cmp	r3, #0
1000e3da:	d176      	bne.n	1000e4ca <at_ble_adv_start+0x11e>
1000e3dc:	e024      	b.n	1000e428 <at_ble_adv_start+0x7c>
1000e3de:	2c04      	cmp	r4, #4
1000e3e0:	d873      	bhi.n	1000e4ca <at_ble_adv_start+0x11e>
1000e3e2:	2380      	movs	r3, #128	; 0x80
1000e3e4:	01db      	lsls	r3, r3, #7
1000e3e6:	429d      	cmp	r5, r3
1000e3e8:	d86f      	bhi.n	1000e4ca <at_ble_adv_start+0x11e>
1000e3ea:	2c00      	cmp	r4, #0
1000e3ec:	d102      	bne.n	1000e3f4 <at_ble_adv_start+0x48>
1000e3ee:	2d1f      	cmp	r5, #31
1000e3f0:	d96b      	bls.n	1000e4ca <at_ble_adv_start+0x11e>
1000e3f2:	e003      	b.n	1000e3fc <at_ble_adv_start+0x50>
1000e3f4:	2d9f      	cmp	r5, #159	; 0x9f
1000e3f6:	d801      	bhi.n	1000e3fc <at_ble_adv_start+0x50>
1000e3f8:	2c01      	cmp	r4, #1
1000e3fa:	d166      	bne.n	1000e4ca <at_ble_adv_start+0x11e>
1000e3fc:	2f00      	cmp	r7, #0
1000e3fe:	d009      	beq.n	1000e414 <at_ble_adv_start+0x68>
1000e400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e402:	20cf      	movs	r0, #207	; 0xcf
1000e404:	3b01      	subs	r3, #1
1000e406:	2b01      	cmp	r3, #1
1000e408:	d95f      	bls.n	1000e4ca <at_ble_adv_start+0x11e>
1000e40a:	2c01      	cmp	r4, #1
1000e40c:	d102      	bne.n	1000e414 <at_ble_adv_start+0x68>
1000e40e:	2d00      	cmp	r5, #0
1000e410:	d100      	bne.n	1000e414 <at_ble_adv_start+0x68>
1000e412:	3520      	adds	r5, #32
1000e414:	4b2f      	ldr	r3, [pc, #188]	; (1000e4d4 <at_ble_adv_start+0x128>)
1000e416:	4798      	blx	r3
1000e418:	1c01      	adds	r1, r0, #0
1000e41a:	2e00      	cmp	r6, #0
1000e41c:	d043      	beq.n	1000e4a6 <at_ble_adv_start+0xfa>
1000e41e:	7833      	ldrb	r3, [r6, #0]
1000e420:	1e60      	subs	r0, r4, #1
1000e422:	2b00      	cmp	r3, #0
1000e424:	d109      	bne.n	1000e43a <at_ble_adv_start+0x8e>
1000e426:	e03b      	b.n	1000e4a0 <at_ble_adv_start+0xf4>
1000e428:	2380      	movs	r3, #128	; 0x80
1000e42a:	01db      	lsls	r3, r3, #7
1000e42c:	429d      	cmp	r5, r3
1000e42e:	d84c      	bhi.n	1000e4ca <at_ble_adv_start+0x11e>
1000e430:	2e00      	cmp	r6, #0
1000e432:	d04a      	beq.n	1000e4ca <at_ble_adv_start+0x11e>
1000e434:	2f00      	cmp	r7, #0
1000e436:	d1e3      	bne.n	1000e400 <at_ble_adv_start+0x54>
1000e438:	e02b      	b.n	1000e492 <at_ble_adv_start+0xe6>
1000e43a:	2301      	movs	r3, #1
1000e43c:	2803      	cmp	r0, #3
1000e43e:	d93a      	bls.n	1000e4b6 <at_ble_adv_start+0x10a>
1000e440:	200d      	movs	r0, #13
1000e442:	1c72      	adds	r2, r6, #1
1000e444:	e002      	b.n	1000e44c <at_ble_adv_start+0xa0>
1000e446:	200e      	movs	r0, #14
1000e448:	1e32      	subs	r2, r6, #0
1000e44a:	d1fa      	bne.n	1000e442 <at_ble_adv_start+0x96>
1000e44c:	4c20      	ldr	r4, [pc, #128]	; (1000e4d0 <at_ble_adv_start+0x124>)
1000e44e:	3474      	adds	r4, #116	; 0x74
1000e450:	7826      	ldrb	r6, [r4, #0]
1000e452:	2407      	movs	r4, #7
1000e454:	2e00      	cmp	r6, #0
1000e456:	d000      	beq.n	1000e45a <at_ble_adv_start+0xae>
1000e458:	1c34      	adds	r4, r6, #0
1000e45a:	9200      	str	r2, [sp, #0]
1000e45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e45e:	9403      	str	r4, [sp, #12]
1000e460:	9204      	str	r2, [sp, #16]
1000e462:	4a1b      	ldr	r2, [pc, #108]	; (1000e4d0 <at_ble_adv_start+0x124>)
1000e464:	9501      	str	r5, [sp, #4]
1000e466:	9502      	str	r5, [sp, #8]
1000e468:	9705      	str	r7, [sp, #20]
1000e46a:	3272      	adds	r2, #114	; 0x72
1000e46c:	7812      	ldrb	r2, [r2, #0]
1000e46e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e470:	9206      	str	r2, [sp, #24]
1000e472:	4a19      	ldr	r2, [pc, #100]	; (1000e4d8 <at_ble_adv_start+0x12c>)
1000e474:	9207      	str	r2, [sp, #28]
1000e476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e478:	9208      	str	r2, [sp, #32]
1000e47a:	4a18      	ldr	r2, [pc, #96]	; (1000e4dc <at_ble_adv_start+0x130>)
1000e47c:	9209      	str	r2, [sp, #36]	; 0x24
1000e47e:	2264      	movs	r2, #100	; 0x64
1000e480:	4362      	muls	r2, r4
1000e482:	b292      	uxth	r2, r2
1000e484:	920a      	str	r2, [sp, #40]	; 0x28
1000e486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e488:	4c15      	ldr	r4, [pc, #84]	; (1000e4e0 <at_ble_adv_start+0x134>)
1000e48a:	920b      	str	r2, [sp, #44]	; 0x2c
1000e48c:	4a15      	ldr	r2, [pc, #84]	; (1000e4e4 <at_ble_adv_start+0x138>)
1000e48e:	47a0      	blx	r4
1000e490:	e01b      	b.n	1000e4ca <at_ble_adv_start+0x11e>
1000e492:	2d00      	cmp	r5, #0
1000e494:	d1be      	bne.n	1000e414 <at_ble_adv_start+0x68>
1000e496:	4b0f      	ldr	r3, [pc, #60]	; (1000e4d4 <at_ble_adv_start+0x128>)
1000e498:	4798      	blx	r3
1000e49a:	2520      	movs	r5, #32
1000e49c:	1c01      	adds	r1, r0, #0
1000e49e:	e7be      	b.n	1000e41e <at_ble_adv_start+0x72>
1000e4a0:	2803      	cmp	r0, #3
1000e4a2:	d8cd      	bhi.n	1000e440 <at_ble_adv_start+0x94>
1000e4a4:	e006      	b.n	1000e4b4 <at_ble_adv_start+0x108>
1000e4a6:	1e60      	subs	r0, r4, #1
1000e4a8:	2803      	cmp	r0, #3
1000e4aa:	d903      	bls.n	1000e4b4 <at_ble_adv_start+0x108>
1000e4ac:	1c33      	adds	r3, r6, #0
1000e4ae:	200d      	movs	r0, #13
1000e4b0:	1c32      	adds	r2, r6, #0
1000e4b2:	e7cb      	b.n	1000e44c <at_ble_adv_start+0xa0>
1000e4b4:	2300      	movs	r3, #0
1000e4b6:	f003 fc19 	bl	10011cec <__gnu_thumb1_case_sqi>
1000e4ba:	06c6      	.short	0x06c6
1000e4bc:	0204      	.short	0x0204
1000e4be:	200f      	movs	r0, #15
1000e4c0:	e7c2      	b.n	1000e448 <at_ble_adv_start+0x9c>
1000e4c2:	2200      	movs	r2, #0
1000e4c4:	920c      	str	r2, [sp, #48]	; 0x30
1000e4c6:	200c      	movs	r0, #12
1000e4c8:	e7be      	b.n	1000e448 <at_ble_adv_start+0x9c>
1000e4ca:	b011      	add	sp, #68	; 0x44
1000e4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e4ce:	46c0      	nop			; (mov r8, r8)
1000e4d0:	10019696 	.word	0x10019696
1000e4d4:	100102ed 	.word	0x100102ed
1000e4d8:	100196ca 	.word	0x100196ca
1000e4dc:	100196e9 	.word	0x100196e9
1000e4e0:	100101cd 	.word	0x100101cd
1000e4e4:	00003a98 	.word	0x00003a98

1000e4e8 <at_ble_adv_stop>:
1000e4e8:	b508      	push	{r3, lr}
1000e4ea:	4b01      	ldr	r3, [pc, #4]	; (1000e4f0 <at_ble_adv_stop+0x8>)
1000e4ec:	4798      	blx	r3
1000e4ee:	bd08      	pop	{r3, pc}
1000e4f0:	1000fff9 	.word	0x1000fff9

1000e4f4 <at_ble_scan_stop>:
1000e4f4:	b510      	push	{r4, lr}
1000e4f6:	4b05      	ldr	r3, [pc, #20]	; (1000e50c <at_ble_scan_stop+0x18>)
1000e4f8:	4798      	blx	r3
1000e4fa:	1e04      	subs	r4, r0, #0
1000e4fc:	d103      	bne.n	1000e506 <at_ble_scan_stop+0x12>
1000e4fe:	20d1      	movs	r0, #209	; 0xd1
1000e500:	4b03      	ldr	r3, [pc, #12]	; (1000e510 <at_ble_scan_stop+0x1c>)
1000e502:	0100      	lsls	r0, r0, #4
1000e504:	4798      	blx	r3
1000e506:	1c20      	adds	r0, r4, #0
1000e508:	bd10      	pop	{r4, pc}
1000e50a:	46c0      	nop			; (mov r8, r8)
1000e50c:	1000fff9 	.word	0x1000fff9
1000e510:	1000dfa1 	.word	0x1000dfa1

1000e514 <at_ble_disconnect>:
1000e514:	b538      	push	{r3, r4, r5, lr}
1000e516:	1c04      	adds	r4, r0, #0
1000e518:	4b04      	ldr	r3, [pc, #16]	; (1000e52c <at_ble_disconnect+0x18>)
1000e51a:	1c08      	adds	r0, r1, #0
1000e51c:	1c21      	adds	r1, r4, #0
1000e51e:	4798      	blx	r3
1000e520:	1c05      	adds	r5, r0, #0
1000e522:	4b03      	ldr	r3, [pc, #12]	; (1000e530 <at_ble_disconnect+0x1c>)
1000e524:	1c20      	adds	r0, r4, #0
1000e526:	4798      	blx	r3
1000e528:	1c28      	adds	r0, r5, #0
1000e52a:	bd38      	pop	{r3, r4, r5, pc}
1000e52c:	1000f671 	.word	0x1000f671
1000e530:	1000dfe5 	.word	0x1000dfe5

1000e534 <at_ble_conn_update_reply>:
1000e534:	b510      	push	{r4, lr}
1000e536:	4c01      	ldr	r4, [pc, #4]	; (1000e53c <at_ble_conn_update_reply+0x8>)
1000e538:	47a0      	blx	r4
1000e53a:	bd10      	pop	{r4, pc}
1000e53c:	1000fb61 	.word	0x1000fb61

1000e540 <at_ble_random_address_resolve>:
1000e540:	b510      	push	{r4, lr}
1000e542:	23cf      	movs	r3, #207	; 0xcf
1000e544:	2800      	cmp	r0, #0
1000e546:	d00a      	beq.n	1000e55e <at_ble_random_address_resolve+0x1e>
1000e548:	2900      	cmp	r1, #0
1000e54a:	d008      	beq.n	1000e55e <at_ble_random_address_resolve+0x1e>
1000e54c:	2a00      	cmp	r2, #0
1000e54e:	d006      	beq.n	1000e55e <at_ble_random_address_resolve+0x1e>
1000e550:	780c      	ldrb	r4, [r1, #0]
1000e552:	2c02      	cmp	r4, #2
1000e554:	d103      	bne.n	1000e55e <at_ble_random_address_resolve+0x1e>
1000e556:	4b03      	ldr	r3, [pc, #12]	; (1000e564 <at_ble_random_address_resolve+0x24>)
1000e558:	3101      	adds	r1, #1
1000e55a:	4798      	blx	r3
1000e55c:	2300      	movs	r3, #0
1000e55e:	1c18      	adds	r0, r3, #0
1000e560:	bd10      	pop	{r4, pc}
1000e562:	46c0      	nop			; (mov r8, r8)
1000e564:	1001038d 	.word	0x1001038d

1000e568 <at_ble_uuid_type2len>:
1000e568:	23cf      	movs	r3, #207	; 0xcf
1000e56a:	2802      	cmp	r0, #2
1000e56c:	d801      	bhi.n	1000e572 <at_ble_uuid_type2len+0xa>
1000e56e:	4b02      	ldr	r3, [pc, #8]	; (1000e578 <at_ble_uuid_type2len+0x10>)
1000e570:	5c1b      	ldrb	r3, [r3, r0]
1000e572:	1c18      	adds	r0, r3, #0
1000e574:	4770      	bx	lr
1000e576:	46c0      	nop			; (mov r8, r8)
1000e578:	100169ae 	.word	0x100169ae

1000e57c <at_ble_uuid_len2type>:
1000e57c:	1e83      	subs	r3, r0, #2
1000e57e:	b2db      	uxtb	r3, r3
1000e580:	2003      	movs	r0, #3
1000e582:	2b0e      	cmp	r3, #14
1000e584:	d801      	bhi.n	1000e58a <at_ble_uuid_len2type+0xe>
1000e586:	4a01      	ldr	r2, [pc, #4]	; (1000e58c <at_ble_uuid_len2type+0x10>)
1000e588:	5cd0      	ldrb	r0, [r2, r3]
1000e58a:	4770      	bx	lr
1000e58c:	100169b1 	.word	0x100169b1

1000e590 <init_gatt_client_module>:
1000e590:	2200      	movs	r2, #0
1000e592:	4b01      	ldr	r3, [pc, #4]	; (1000e598 <init_gatt_client_module+0x8>)
1000e594:	801a      	strh	r2, [r3, #0]
1000e596:	4770      	bx	lr
1000e598:	10018664 	.word	0x10018664

1000e59c <db_searchATT>:
1000e59c:	b570      	push	{r4, r5, r6, lr}
1000e59e:	1c05      	adds	r5, r0, #0
1000e5a0:	2400      	movs	r4, #0
1000e5a2:	4b0c      	ldr	r3, [pc, #48]	; (1000e5d4 <db_searchATT+0x38>)
1000e5a4:	6819      	ldr	r1, [r3, #0]
1000e5a6:	4b0c      	ldr	r3, [pc, #48]	; (1000e5d8 <db_searchATT+0x3c>)
1000e5a8:	681e      	ldr	r6, [r3, #0]
1000e5aa:	428c      	cmp	r4, r1
1000e5ac:	dc10      	bgt.n	1000e5d0 <db_searchATT+0x34>
1000e5ae:	200c      	movs	r0, #12
1000e5b0:	1863      	adds	r3, r4, r1
1000e5b2:	0fda      	lsrs	r2, r3, #31
1000e5b4:	18d3      	adds	r3, r2, r3
1000e5b6:	1c02      	adds	r2, r0, #0
1000e5b8:	105b      	asrs	r3, r3, #1
1000e5ba:	435a      	muls	r2, r3
1000e5bc:	18b0      	adds	r0, r6, r2
1000e5be:	8802      	ldrh	r2, [r0, #0]
1000e5c0:	42aa      	cmp	r2, r5
1000e5c2:	d201      	bcs.n	1000e5c8 <db_searchATT+0x2c>
1000e5c4:	1e59      	subs	r1, r3, #1
1000e5c6:	e7f0      	b.n	1000e5aa <db_searchATT+0xe>
1000e5c8:	42aa      	cmp	r2, r5
1000e5ca:	d902      	bls.n	1000e5d2 <db_searchATT+0x36>
1000e5cc:	1c5c      	adds	r4, r3, #1
1000e5ce:	e7ec      	b.n	1000e5aa <db_searchATT+0xe>
1000e5d0:	2000      	movs	r0, #0
1000e5d2:	bd70      	pop	{r4, r5, r6, pc}
1000e5d4:	10018678 	.word	0x10018678
1000e5d8:	10018670 	.word	0x10018670

1000e5dc <att_permissions>:
1000e5dc:	b530      	push	{r4, r5, lr}
1000e5de:	2403      	movs	r4, #3
1000e5e0:	1c05      	adds	r5, r0, #0
1000e5e2:	2301      	movs	r3, #1
1000e5e4:	4025      	ands	r5, r4
1000e5e6:	42a5      	cmp	r5, r4
1000e5e8:	d009      	beq.n	1000e5fe <att_permissions+0x22>
1000e5ea:	1c23      	adds	r3, r4, #0
1000e5ec:	1924      	adds	r4, r4, r4
1000e5ee:	4220      	tst	r0, r4
1000e5f0:	d105      	bne.n	1000e5fe <att_permissions+0x22>
1000e5f2:	3b02      	subs	r3, #2
1000e5f4:	4218      	tst	r0, r3
1000e5f6:	d102      	bne.n	1000e5fe <att_permissions+0x22>
1000e5f8:	1e4b      	subs	r3, r1, #1
1000e5fa:	4199      	sbcs	r1, r3
1000e5fc:	b28b      	uxth	r3, r1
1000e5fe:	2130      	movs	r1, #48	; 0x30
1000e600:	4001      	ands	r1, r0
1000e602:	2930      	cmp	r1, #48	; 0x30
1000e604:	d007      	beq.n	1000e616 <att_permissions+0x3a>
1000e606:	0641      	lsls	r1, r0, #25
1000e608:	d401      	bmi.n	1000e60e <att_permissions+0x32>
1000e60a:	0681      	lsls	r1, r0, #26
1000e60c:	d501      	bpl.n	1000e612 <att_permissions+0x36>
1000e60e:	4807      	ldr	r0, [pc, #28]	; (1000e62c <att_permissions+0x50>)
1000e610:	e009      	b.n	1000e626 <att_permissions+0x4a>
1000e612:	06c1      	lsls	r1, r0, #27
1000e614:	d501      	bpl.n	1000e61a <att_permissions+0x3e>
1000e616:	4806      	ldr	r0, [pc, #24]	; (1000e630 <att_permissions+0x54>)
1000e618:	e005      	b.n	1000e626 <att_permissions+0x4a>
1000e61a:	2a00      	cmp	r2, #0
1000e61c:	d001      	beq.n	1000e622 <att_permissions+0x46>
1000e61e:	2204      	movs	r2, #4
1000e620:	4313      	orrs	r3, r2
1000e622:	2080      	movs	r0, #128	; 0x80
1000e624:	0180      	lsls	r0, r0, #6
1000e626:	4318      	orrs	r0, r3
1000e628:	bd30      	pop	{r4, r5, pc}
1000e62a:	46c0      	nop			; (mov r8, r8)
1000e62c:	0000200c 	.word	0x0000200c
1000e630:	00002004 	.word	0x00002004

1000e634 <char_permissions>:
1000e634:	b530      	push	{r4, r5, lr}
1000e636:	2300      	movs	r3, #0
1000e638:	0784      	lsls	r4, r0, #30
1000e63a:	d503      	bpl.n	1000e644 <char_permissions+0x10>
1000e63c:	3301      	adds	r3, #1
1000e63e:	4219      	tst	r1, r3
1000e640:	d100      	bne.n	1000e644 <char_permissions+0x10>
1000e642:	3302      	adds	r3, #2
1000e644:	0704      	lsls	r4, r0, #28
1000e646:	d508      	bpl.n	1000e65a <char_permissions+0x26>
1000e648:	06cc      	lsls	r4, r1, #27
1000e64a:	d501      	bpl.n	1000e650 <char_permissions+0x1c>
1000e64c:	2404      	movs	r4, #4
1000e64e:	e000      	b.n	1000e652 <char_permissions+0x1e>
1000e650:	240c      	movs	r4, #12
1000e652:	4323      	orrs	r3, r4
1000e654:	2480      	movs	r4, #128	; 0x80
1000e656:	01a4      	lsls	r4, r4, #6
1000e658:	4323      	orrs	r3, r4
1000e65a:	0684      	lsls	r4, r0, #26
1000e65c:	d506      	bpl.n	1000e66c <char_permissions+0x38>
1000e65e:	2406      	movs	r4, #6
1000e660:	4221      	tst	r1, r4
1000e662:	d101      	bne.n	1000e668 <char_permissions+0x34>
1000e664:	340a      	adds	r4, #10
1000e666:	e000      	b.n	1000e66a <char_permissions+0x36>
1000e668:	2430      	movs	r4, #48	; 0x30
1000e66a:	4323      	orrs	r3, r4
1000e66c:	06c4      	lsls	r4, r0, #27
1000e66e:	d506      	bpl.n	1000e67e <char_permissions+0x4a>
1000e670:	2406      	movs	r4, #6
1000e672:	4221      	tst	r1, r4
1000e674:	d101      	bne.n	1000e67a <char_permissions+0x46>
1000e676:	343a      	adds	r4, #58	; 0x3a
1000e678:	e000      	b.n	1000e67c <char_permissions+0x48>
1000e67a:	24c0      	movs	r4, #192	; 0xc0
1000e67c:	4323      	orrs	r3, r4
1000e67e:	2480      	movs	r4, #128	; 0x80
1000e680:	0064      	lsls	r4, r4, #1
1000e682:	4220      	tst	r0, r4
1000e684:	d000      	beq.n	1000e688 <char_permissions+0x54>
1000e686:	4323      	orrs	r3, r4
1000e688:	07c4      	lsls	r4, r0, #31
1000e68a:	d502      	bpl.n	1000e692 <char_permissions+0x5e>
1000e68c:	2480      	movs	r4, #128	; 0x80
1000e68e:	00a4      	lsls	r4, r4, #2
1000e690:	4323      	orrs	r3, r4
1000e692:	2404      	movs	r4, #4
1000e694:	4220      	tst	r0, r4
1000e696:	d006      	beq.n	1000e6a6 <char_permissions+0x72>
1000e698:	06cd      	lsls	r5, r1, #27
1000e69a:	d400      	bmi.n	1000e69e <char_permissions+0x6a>
1000e69c:	240c      	movs	r4, #12
1000e69e:	4323      	orrs	r3, r4
1000e6a0:	2480      	movs	r4, #128	; 0x80
1000e6a2:	0124      	lsls	r4, r4, #4
1000e6a4:	4323      	orrs	r3, r4
1000e6a6:	0644      	lsls	r4, r0, #25
1000e6a8:	d501      	bpl.n	1000e6ae <char_permissions+0x7a>
1000e6aa:	4c08      	ldr	r4, [pc, #32]	; (1000e6cc <char_permissions+0x98>)
1000e6ac:	4323      	orrs	r3, r4
1000e6ae:	0600      	lsls	r0, r0, #24
1000e6b0:	d507      	bpl.n	1000e6c2 <char_permissions+0x8e>
1000e6b2:	2004      	movs	r0, #4
1000e6b4:	06c9      	lsls	r1, r1, #27
1000e6b6:	d400      	bmi.n	1000e6ba <char_permissions+0x86>
1000e6b8:	200c      	movs	r0, #12
1000e6ba:	4303      	orrs	r3, r0
1000e6bc:	2084      	movs	r0, #132	; 0x84
1000e6be:	0180      	lsls	r0, r0, #6
1000e6c0:	4303      	orrs	r3, r0
1000e6c2:	0390      	lsls	r0, r2, #14
1000e6c4:	4303      	orrs	r3, r0
1000e6c6:	b298      	uxth	r0, r3
1000e6c8:	bd30      	pop	{r4, r5, pc}
1000e6ca:	46c0      	nop			; (mov r8, r8)
1000e6cc:	00001004 	.word	0x00001004

1000e6d0 <presentation_format_define>:
1000e6d0:	b507      	push	{r0, r1, r2, lr}
1000e6d2:	466a      	mov	r2, sp
1000e6d4:	780b      	ldrb	r3, [r1, #0]
1000e6d6:	7013      	strb	r3, [r2, #0]
1000e6d8:	784b      	ldrb	r3, [r1, #1]
1000e6da:	7053      	strb	r3, [r2, #1]
1000e6dc:	884b      	ldrh	r3, [r1, #2]
1000e6de:	7093      	strb	r3, [r2, #2]
1000e6e0:	0a1b      	lsrs	r3, r3, #8
1000e6e2:	70d3      	strb	r3, [r2, #3]
1000e6e4:	790b      	ldrb	r3, [r1, #4]
1000e6e6:	7113      	strb	r3, [r2, #4]
1000e6e8:	88cb      	ldrh	r3, [r1, #6]
1000e6ea:	2107      	movs	r1, #7
1000e6ec:	7153      	strb	r3, [r2, #5]
1000e6ee:	0a1b      	lsrs	r3, r3, #8
1000e6f0:	7193      	strb	r3, [r2, #6]
1000e6f2:	4b01      	ldr	r3, [pc, #4]	; (1000e6f8 <presentation_format_define+0x28>)
1000e6f4:	4798      	blx	r3
1000e6f6:	bd0e      	pop	{r1, r2, r3, pc}
1000e6f8:	10010979 	.word	0x10010979

1000e6fc <db_addATT>:
1000e6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e6fe:	4c29      	ldr	r4, [pc, #164]	; (1000e7a4 <db_addATT+0xa8>)
1000e700:	1c1d      	adds	r5, r3, #0
1000e702:	6823      	ldr	r3, [r4, #0]
1000e704:	9001      	str	r0, [sp, #4]
1000e706:	26d3      	movs	r6, #211	; 0xd3
1000e708:	2b00      	cmp	r3, #0
1000e70a:	d048      	beq.n	1000e79e <db_addATT+0xa2>
1000e70c:	1c1e      	adds	r6, r3, #0
1000e70e:	3e0c      	subs	r6, #12
1000e710:	6026      	str	r6, [r4, #0]
1000e712:	2900      	cmp	r1, #0
1000e714:	d005      	beq.n	1000e722 <db_addATT+0x26>
1000e716:	4f24      	ldr	r7, [pc, #144]	; (1000e7a8 <db_addATT+0xac>)
1000e718:	46bc      	mov	ip, r7
1000e71a:	4660      	mov	r0, ip
1000e71c:	683f      	ldr	r7, [r7, #0]
1000e71e:	18bf      	adds	r7, r7, r2
1000e720:	6007      	str	r7, [r0, #0]
1000e722:	4821      	ldr	r0, [pc, #132]	; (1000e7a8 <db_addATT+0xac>)
1000e724:	6807      	ldr	r7, [r0, #0]
1000e726:	4684      	mov	ip, r0
1000e728:	42be      	cmp	r6, r7
1000e72a:	d932      	bls.n	1000e792 <db_addATT+0x96>
1000e72c:	4668      	mov	r0, sp
1000e72e:	8880      	ldrh	r0, [r0, #4]
1000e730:	3b0c      	subs	r3, #12
1000e732:	8018      	strh	r0, [r3, #0]
1000e734:	6823      	ldr	r3, [r4, #0]
1000e736:	2900      	cmp	r1, #0
1000e738:	d009      	beq.n	1000e74e <db_addATT+0x52>
1000e73a:	2a00      	cmp	r2, #0
1000e73c:	d007      	beq.n	1000e74e <db_addATT+0x52>
1000e73e:	4660      	mov	r0, ip
1000e740:	6800      	ldr	r0, [r0, #0]
1000e742:	809a      	strh	r2, [r3, #4]
1000e744:	1a80      	subs	r0, r0, r2
1000e746:	6098      	str	r0, [r3, #8]
1000e748:	4b18      	ldr	r3, [pc, #96]	; (1000e7ac <db_addATT+0xb0>)
1000e74a:	4798      	blx	r3
1000e74c:	e002      	b.n	1000e754 <db_addATT+0x58>
1000e74e:	2100      	movs	r1, #0
1000e750:	809a      	strh	r2, [r3, #4]
1000e752:	6099      	str	r1, [r3, #8]
1000e754:	2300      	movs	r3, #0
1000e756:	6822      	ldr	r2, [r4, #0]
1000e758:	7093      	strb	r3, [r2, #2]
1000e75a:	3303      	adds	r3, #3
1000e75c:	402b      	ands	r3, r5
1000e75e:	2b03      	cmp	r3, #3
1000e760:	d001      	beq.n	1000e766 <db_addATT+0x6a>
1000e762:	076b      	lsls	r3, r5, #29
1000e764:	d504      	bpl.n	1000e770 <db_addATT+0x74>
1000e766:	2101      	movs	r1, #1
1000e768:	6822      	ldr	r2, [r4, #0]
1000e76a:	7893      	ldrb	r3, [r2, #2]
1000e76c:	430b      	orrs	r3, r1
1000e76e:	7093      	strb	r3, [r2, #2]
1000e770:	2330      	movs	r3, #48	; 0x30
1000e772:	402b      	ands	r3, r5
1000e774:	2b30      	cmp	r3, #48	; 0x30
1000e776:	d001      	beq.n	1000e77c <db_addATT+0x80>
1000e778:	066b      	lsls	r3, r5, #25
1000e77a:	d504      	bpl.n	1000e786 <db_addATT+0x8a>
1000e77c:	2102      	movs	r1, #2
1000e77e:	6822      	ldr	r2, [r4, #0]
1000e780:	7893      	ldrb	r3, [r2, #2]
1000e782:	430b      	orrs	r3, r1
1000e784:	7093      	strb	r3, [r2, #2]
1000e786:	4a0a      	ldr	r2, [pc, #40]	; (1000e7b0 <db_addATT+0xb4>)
1000e788:	2600      	movs	r6, #0
1000e78a:	6813      	ldr	r3, [r2, #0]
1000e78c:	3301      	adds	r3, #1
1000e78e:	6013      	str	r3, [r2, #0]
1000e790:	e005      	b.n	1000e79e <db_addATT+0xa2>
1000e792:	6023      	str	r3, [r4, #0]
1000e794:	2611      	movs	r6, #17
1000e796:	2900      	cmp	r1, #0
1000e798:	d001      	beq.n	1000e79e <db_addATT+0xa2>
1000e79a:	1aba      	subs	r2, r7, r2
1000e79c:	6002      	str	r2, [r0, #0]
1000e79e:	1c30      	adds	r0, r6, #0
1000e7a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e7a2:	46c0      	nop			; (mov r8, r8)
1000e7a4:	10018670 	.word	0x10018670
1000e7a8:	10018674 	.word	0x10018674
1000e7ac:	10014a2f 	.word	0x10014a2f
1000e7b0:	10018678 	.word	0x10018678

1000e7b4 <user_description_define>:
1000e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e7b6:	1c05      	adds	r5, r0, #0
1000e7b8:	20cf      	movs	r0, #207	; 0xcf
1000e7ba:	2a00      	cmp	r2, #0
1000e7bc:	d01c      	beq.n	1000e7f8 <user_description_define+0x44>
1000e7be:	1c14      	adds	r4, r2, #0
1000e7c0:	2203      	movs	r2, #3
1000e7c2:	1c1e      	adds	r6, r3, #0
1000e7c4:	400a      	ands	r2, r1
1000e7c6:	1c0b      	adds	r3, r1, #0
1000e7c8:	3a03      	subs	r2, #3
1000e7ca:	4251      	negs	r1, r2
1000e7cc:	4151      	adcs	r1, r2
1000e7ce:	075a      	lsls	r2, r3, #29
1000e7d0:	0fd2      	lsrs	r2, r2, #31
1000e7d2:	430a      	orrs	r2, r1
1000e7d4:	03d2      	lsls	r2, r2, #15
1000e7d6:	4f09      	ldr	r7, [pc, #36]	; (1000e7fc <user_description_define+0x48>)
1000e7d8:	1c28      	adds	r0, r5, #0
1000e7da:	2a00      	cmp	r2, #0
1000e7dc:	d003      	beq.n	1000e7e6 <user_description_define+0x32>
1000e7de:	1c21      	adds	r1, r4, #0
1000e7e0:	1c32      	adds	r2, r6, #0
1000e7e2:	47b8      	blx	r7
1000e7e4:	e008      	b.n	1000e7f8 <user_description_define+0x44>
1000e7e6:	1c11      	adds	r1, r2, #0
1000e7e8:	47b8      	blx	r7
1000e7ea:	2800      	cmp	r0, #0
1000e7ec:	d104      	bne.n	1000e7f8 <user_description_define+0x44>
1000e7ee:	1c28      	adds	r0, r5, #0
1000e7f0:	1c31      	adds	r1, r6, #0
1000e7f2:	1c22      	adds	r2, r4, #0
1000e7f4:	4b02      	ldr	r3, [pc, #8]	; (1000e800 <user_description_define+0x4c>)
1000e7f6:	4798      	blx	r3
1000e7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e7fa:	46c0      	nop			; (mov r8, r8)
1000e7fc:	1000e6fd 	.word	0x1000e6fd
1000e800:	10010979 	.word	0x10010979

1000e804 <at_ble_read_authorize_reply.part.1>:
1000e804:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e806:	4b09      	ldr	r3, [pc, #36]	; (1000e82c <at_ble_read_authorize_reply.part.1+0x28>)
1000e808:	1c05      	adds	r5, r0, #0
1000e80a:	1c08      	adds	r0, r1, #0
1000e80c:	1c0c      	adds	r4, r1, #0
1000e80e:	4798      	blx	r3
1000e810:	2800      	cmp	r0, #0
1000e812:	d009      	beq.n	1000e828 <at_ble_read_authorize_reply.part.1+0x24>
1000e814:	6882      	ldr	r2, [r0, #8]
1000e816:	2a00      	cmp	r2, #0
1000e818:	d006      	beq.n	1000e828 <at_ble_read_authorize_reply.part.1+0x24>
1000e81a:	8883      	ldrh	r3, [r0, #4]
1000e81c:	1c29      	adds	r1, r5, #0
1000e81e:	9200      	str	r2, [sp, #0]
1000e820:	1c20      	adds	r0, r4, #0
1000e822:	2200      	movs	r2, #0
1000e824:	4c02      	ldr	r4, [pc, #8]	; (1000e830 <at_ble_read_authorize_reply.part.1+0x2c>)
1000e826:	47a0      	blx	r4
1000e828:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e82a:	46c0      	nop			; (mov r8, r8)
1000e82c:	1000e59d 	.word	0x1000e59d
1000e830:	10010489 	.word	0x10010489

1000e834 <internal_at_ble_service_define>:
1000e834:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e836:	b08b      	sub	sp, #44	; 0x2c
1000e838:	9306      	str	r3, [sp, #24]
1000e83a:	ab10      	add	r3, sp, #64	; 0x40
1000e83c:	9202      	str	r2, [sp, #8]
1000e83e:	cb04      	ldmia	r3!, {r2}
1000e840:	1c05      	adds	r5, r0, #0
1000e842:	881b      	ldrh	r3, [r3, #0]
1000e844:	9105      	str	r1, [sp, #20]
1000e846:	9303      	str	r3, [sp, #12]
1000e848:	ab12      	add	r3, sp, #72	; 0x48
1000e84a:	781b      	ldrb	r3, [r3, #0]
1000e84c:	20cf      	movs	r0, #207	; 0xcf
1000e84e:	9304      	str	r3, [sp, #16]
1000e850:	2d00      	cmp	r5, #0
1000e852:	d100      	bne.n	1000e856 <internal_at_ble_service_define+0x22>
1000e854:	e1ca      	b.n	1000ebec <internal_at_ble_service_define+0x3b8>
1000e856:	2900      	cmp	r1, #0
1000e858:	d100      	bne.n	1000e85c <internal_at_ble_service_define+0x28>
1000e85a:	e1c7      	b.n	1000ebec <internal_at_ble_service_define+0x3b8>
1000e85c:	2a00      	cmp	r2, #0
1000e85e:	d100      	bne.n	1000e862 <internal_at_ble_service_define+0x2e>
1000e860:	e1c4      	b.n	1000ebec <internal_at_ble_service_define+0x3b8>
1000e862:	9b03      	ldr	r3, [sp, #12]
1000e864:	2b00      	cmp	r3, #0
1000e866:	d100      	bne.n	1000e86a <internal_at_ble_service_define+0x36>
1000e868:	e1c0      	b.n	1000ebec <internal_at_ble_service_define+0x3b8>
1000e86a:	4bc9      	ldr	r3, [pc, #804]	; (1000eb90 <internal_at_ble_service_define+0x35c>)
1000e86c:	3004      	adds	r0, #4
1000e86e:	681e      	ldr	r6, [r3, #0]
1000e870:	2e00      	cmp	r6, #0
1000e872:	d100      	bne.n	1000e876 <internal_at_ble_service_define+0x42>
1000e874:	e1ba      	b.n	1000ebec <internal_at_ble_service_define+0x3b8>
1000e876:	2400      	movs	r4, #0
1000e878:	4bc6      	ldr	r3, [pc, #792]	; (1000eb94 <internal_at_ble_service_define+0x360>)
1000e87a:	8034      	strh	r4, [r6, #0]
1000e87c:	881b      	ldrh	r3, [r3, #0]
1000e87e:	1db7      	adds	r7, r6, #6
1000e880:	1c21      	adds	r1, r4, #0
1000e882:	2210      	movs	r2, #16
1000e884:	8073      	strh	r3, [r6, #2]
1000e886:	1c38      	adds	r0, r7, #0
1000e888:	4bc3      	ldr	r3, [pc, #780]	; (1000eb98 <internal_at_ble_service_define+0x364>)
1000e88a:	4798      	blx	r3
1000e88c:	7828      	ldrb	r0, [r5, #0]
1000e88e:	4bc3      	ldr	r3, [pc, #780]	; (1000eb9c <internal_at_ble_service_define+0x368>)
1000e890:	4798      	blx	r3
1000e892:	1c69      	adds	r1, r5, #1
1000e894:	1c02      	adds	r2, r0, #0
1000e896:	4bc2      	ldr	r3, [pc, #776]	; (1000eba0 <internal_at_ble_service_define+0x36c>)
1000e898:	1c38      	adds	r0, r7, #0
1000e89a:	4798      	blx	r3
1000e89c:	2204      	movs	r2, #4
1000e89e:	782b      	ldrb	r3, [r5, #0]
1000e8a0:	9d02      	ldr	r5, [sp, #8]
1000e8a2:	011b      	lsls	r3, r3, #4
1000e8a4:	4313      	orrs	r3, r2
1000e8a6:	9a04      	ldr	r2, [sp, #16]
1000e8a8:	7174      	strb	r4, [r6, #5]
1000e8aa:	0192      	lsls	r2, r2, #6
1000e8ac:	4313      	orrs	r3, r2
1000e8ae:	7133      	strb	r3, [r6, #4]
1000e8b0:	2316      	movs	r3, #22
1000e8b2:	9a06      	ldr	r2, [sp, #24]
1000e8b4:	3512      	adds	r5, #18
1000e8b6:	4353      	muls	r3, r2
1000e8b8:	9a02      	ldr	r2, [sp, #8]
1000e8ba:	3312      	adds	r3, #18
1000e8bc:	18d7      	adds	r7, r2, r3
1000e8be:	42bd      	cmp	r5, r7
1000e8c0:	d00f      	beq.n	1000e8e2 <internal_at_ble_service_define+0xae>
1000e8c2:	4bb8      	ldr	r3, [pc, #736]	; (1000eba4 <internal_at_ble_service_define+0x370>)
1000e8c4:	8829      	ldrh	r1, [r5, #0]
1000e8c6:	9300      	str	r3, [sp, #0]
1000e8c8:	230e      	movs	r3, #14
1000e8ca:	aa06      	add	r2, sp, #24
1000e8cc:	189b      	adds	r3, r3, r2
1000e8ce:	9301      	str	r3, [sp, #4]
1000e8d0:	4cb5      	ldr	r4, [pc, #724]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000e8d2:	1c30      	adds	r0, r6, #0
1000e8d4:	2201      	movs	r2, #1
1000e8d6:	2302      	movs	r3, #2
1000e8d8:	47a0      	blx	r4
1000e8da:	3516      	adds	r5, #22
1000e8dc:	1e04      	subs	r4, r0, #0
1000e8de:	d0ee      	beq.n	1000e8be <internal_at_ble_service_define+0x8a>
1000e8e0:	e183      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000e8e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000e8e4:	2300      	movs	r3, #0
1000e8e6:	3714      	adds	r7, #20
1000e8e8:	1c3d      	adds	r5, r7, #0
1000e8ea:	9302      	str	r3, [sp, #8]
1000e8ec:	9b02      	ldr	r3, [sp, #8]
1000e8ee:	9a03      	ldr	r2, [sp, #12]
1000e8f0:	4293      	cmp	r3, r2
1000e8f2:	db00      	blt.n	1000e8f6 <internal_at_ble_service_define+0xc2>
1000e8f4:	e0bf      	b.n	1000ea76 <internal_at_ble_service_define+0x242>
1000e8f6:	4bad      	ldr	r3, [pc, #692]	; (1000ebac <internal_at_ble_service_define+0x378>)
1000e8f8:	aa06      	add	r2, sp, #24
1000e8fa:	9300      	str	r3, [sp, #0]
1000e8fc:	230e      	movs	r3, #14
1000e8fe:	189b      	adds	r3, r3, r2
1000e900:	9301      	str	r3, [sp, #4]
1000e902:	4ca9      	ldr	r4, [pc, #676]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000e904:	1c30      	adds	r0, r6, #0
1000e906:	2104      	movs	r1, #4
1000e908:	2201      	movs	r2, #1
1000e90a:	2302      	movs	r3, #2
1000e90c:	47a0      	blx	r4
1000e90e:	1e04      	subs	r4, r0, #0
1000e910:	d000      	beq.n	1000e914 <internal_at_ble_service_define+0xe0>
1000e912:	e16a      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000e914:	1c2b      	adds	r3, r5, #0
1000e916:	3b12      	subs	r3, #18
1000e918:	7b2c      	ldrb	r4, [r5, #12]
1000e91a:	781b      	ldrb	r3, [r3, #0]
1000e91c:	1c21      	adds	r1, r4, #0
1000e91e:	1c1a      	adds	r2, r3, #0
1000e920:	9304      	str	r3, [sp, #16]
1000e922:	8828      	ldrh	r0, [r5, #0]
1000e924:	4ba2      	ldr	r3, [pc, #648]	; (1000ebb0 <internal_at_ble_service_define+0x37c>)
1000e926:	4798      	blx	r3
1000e928:	2303      	movs	r3, #3
1000e92a:	4023      	ands	r3, r4
1000e92c:	3b03      	subs	r3, #3
1000e92e:	4259      	negs	r1, r3
1000e930:	4159      	adcs	r1, r3
1000e932:	2301      	movs	r3, #1
1000e934:	08a4      	lsrs	r4, r4, #2
1000e936:	401c      	ands	r4, r3
1000e938:	430c      	orrs	r4, r1
1000e93a:	896b      	ldrh	r3, [r5, #10]
1000e93c:	03e4      	lsls	r4, r4, #15
1000e93e:	431c      	orrs	r4, r3
1000e940:	9007      	str	r0, [sp, #28]
1000e942:	4b96      	ldr	r3, [pc, #600]	; (1000eb9c <internal_at_ble_service_define+0x368>)
1000e944:	9804      	ldr	r0, [sp, #16]
1000e946:	4798      	blx	r3
1000e948:	1c2a      	adds	r2, r5, #0
1000e94a:	3a11      	subs	r2, #17
1000e94c:	9200      	str	r2, [sp, #0]
1000e94e:	3a03      	subs	r2, #3
1000e950:	1c03      	adds	r3, r0, #0
1000e952:	9201      	str	r2, [sp, #4]
1000e954:	1c21      	adds	r1, r4, #0
1000e956:	1c30      	adds	r0, r6, #0
1000e958:	4c93      	ldr	r4, [pc, #588]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000e95a:	9a07      	ldr	r2, [sp, #28]
1000e95c:	47a0      	blx	r4
1000e95e:	1e04      	subs	r4, r0, #0
1000e960:	d000      	beq.n	1000e964 <internal_at_ble_service_define+0x130>
1000e962:	e142      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000e964:	22c0      	movs	r2, #192	; 0xc0
1000e966:	882b      	ldrh	r3, [r5, #0]
1000e968:	0052      	lsls	r2, r2, #1
1000e96a:	4213      	tst	r3, r2
1000e96c:	d104      	bne.n	1000e978 <internal_at_ble_service_define+0x144>
1000e96e:	8aab      	ldrh	r3, [r5, #20]
1000e970:	9304      	str	r3, [sp, #16]
1000e972:	2b00      	cmp	r3, #0
1000e974:	d116      	bne.n	1000e9a4 <internal_at_ble_service_define+0x170>
1000e976:	e03a      	b.n	1000e9ee <internal_at_ble_service_define+0x1ba>
1000e978:	2201      	movs	r2, #1
1000e97a:	09d9      	lsrs	r1, r3, #7
1000e97c:	4011      	ands	r1, r2
1000e97e:	05db      	lsls	r3, r3, #23
1000e980:	d501      	bpl.n	1000e986 <internal_at_ble_service_define+0x152>
1000e982:	2302      	movs	r3, #2
1000e984:	4319      	orrs	r1, r3
1000e986:	4b8b      	ldr	r3, [pc, #556]	; (1000ebb4 <internal_at_ble_service_define+0x380>)
1000e988:	aa06      	add	r2, sp, #24
1000e98a:	9300      	str	r3, [sp, #0]
1000e98c:	230e      	movs	r3, #14
1000e98e:	189b      	adds	r3, r3, r2
1000e990:	9301      	str	r3, [sp, #4]
1000e992:	4c85      	ldr	r4, [pc, #532]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000e994:	0209      	lsls	r1, r1, #8
1000e996:	1c30      	adds	r0, r6, #0
1000e998:	2201      	movs	r2, #1
1000e99a:	2302      	movs	r3, #2
1000e99c:	47a0      	blx	r4
1000e99e:	1e04      	subs	r4, r0, #0
1000e9a0:	d0e5      	beq.n	1000e96e <internal_at_ble_service_define+0x13a>
1000e9a2:	e122      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000e9a4:	2380      	movs	r3, #128	; 0x80
1000e9a6:	882a      	ldrh	r2, [r5, #0]
1000e9a8:	7f2c      	ldrb	r4, [r5, #28]
1000e9aa:	005b      	lsls	r3, r3, #1
1000e9ac:	401a      	ands	r2, r3
1000e9ae:	1c20      	adds	r0, r4, #0
1000e9b0:	2101      	movs	r1, #1
1000e9b2:	2a00      	cmp	r2, #0
1000e9b4:	d000      	beq.n	1000e9b8 <internal_at_ble_service_define+0x184>
1000e9b6:	1c0a      	adds	r2, r1, #0
1000e9b8:	4b7f      	ldr	r3, [pc, #508]	; (1000ebb8 <internal_at_ble_service_define+0x384>)
1000e9ba:	4798      	blx	r3
1000e9bc:	2203      	movs	r2, #3
1000e9be:	4022      	ands	r2, r4
1000e9c0:	3a03      	subs	r2, #3
1000e9c2:	4251      	negs	r1, r2
1000e9c4:	4151      	adcs	r1, r2
1000e9c6:	4b7d      	ldr	r3, [pc, #500]	; (1000ebbc <internal_at_ble_service_define+0x388>)
1000e9c8:	1c0a      	adds	r2, r1, #0
1000e9ca:	9300      	str	r3, [sp, #0]
1000e9cc:	1c2b      	adds	r3, r5, #0
1000e9ce:	0764      	lsls	r4, r4, #29
1000e9d0:	0fe4      	lsrs	r4, r4, #31
1000e9d2:	4322      	orrs	r2, r4
1000e9d4:	03d2      	lsls	r2, r2, #15
1000e9d6:	4310      	orrs	r0, r2
1000e9d8:	3320      	adds	r3, #32
1000e9da:	b282      	uxth	r2, r0
1000e9dc:	9301      	str	r3, [sp, #4]
1000e9de:	4c72      	ldr	r4, [pc, #456]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000e9e0:	1c30      	adds	r0, r6, #0
1000e9e2:	9904      	ldr	r1, [sp, #16]
1000e9e4:	2302      	movs	r3, #2
1000e9e6:	47a0      	blx	r4
1000e9e8:	1e04      	subs	r4, r0, #0
1000e9ea:	d000      	beq.n	1000e9ee <internal_at_ble_service_define+0x1ba>
1000e9ec:	e0fd      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000e9ee:	2101      	movs	r1, #1
1000e9f0:	882b      	ldrh	r3, [r5, #0]
1000e9f2:	420b      	tst	r3, r1
1000e9f4:	d011      	beq.n	1000ea1a <internal_at_ble_service_define+0x1e6>
1000e9f6:	7fa8      	ldrb	r0, [r5, #30]
1000e9f8:	4b6f      	ldr	r3, [pc, #444]	; (1000ebb8 <internal_at_ble_service_define+0x384>)
1000e9fa:	2200      	movs	r2, #0
1000e9fc:	4798      	blx	r3
1000e9fe:	4b70      	ldr	r3, [pc, #448]	; (1000ebc0 <internal_at_ble_service_define+0x38c>)
1000ea00:	1c02      	adds	r2, r0, #0
1000ea02:	9300      	str	r3, [sp, #0]
1000ea04:	1c2b      	adds	r3, r5, #0
1000ea06:	3324      	adds	r3, #36	; 0x24
1000ea08:	9301      	str	r3, [sp, #4]
1000ea0a:	4c67      	ldr	r4, [pc, #412]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000ea0c:	1c30      	adds	r0, r6, #0
1000ea0e:	496d      	ldr	r1, [pc, #436]	; (1000ebc4 <internal_at_ble_service_define+0x390>)
1000ea10:	2302      	movs	r3, #2
1000ea12:	47a0      	blx	r4
1000ea14:	1e04      	subs	r4, r0, #0
1000ea16:	d000      	beq.n	1000ea1a <internal_at_ble_service_define+0x1e6>
1000ea18:	e0e7      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000ea1a:	2330      	movs	r3, #48	; 0x30
1000ea1c:	882a      	ldrh	r2, [r5, #0]
1000ea1e:	421a      	tst	r2, r3
1000ea20:	d012      	beq.n	1000ea48 <internal_at_ble_service_define+0x214>
1000ea22:	2101      	movs	r1, #1
1000ea24:	7f68      	ldrb	r0, [r5, #29]
1000ea26:	1c0a      	adds	r2, r1, #0
1000ea28:	4b63      	ldr	r3, [pc, #396]	; (1000ebb8 <internal_at_ble_service_define+0x384>)
1000ea2a:	4798      	blx	r3
1000ea2c:	4b66      	ldr	r3, [pc, #408]	; (1000ebc8 <internal_at_ble_service_define+0x394>)
1000ea2e:	1c02      	adds	r2, r0, #0
1000ea30:	9300      	str	r3, [sp, #0]
1000ea32:	1c2b      	adds	r3, r5, #0
1000ea34:	3322      	adds	r3, #34	; 0x22
1000ea36:	9301      	str	r3, [sp, #4]
1000ea38:	4c5b      	ldr	r4, [pc, #364]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000ea3a:	1c30      	adds	r0, r6, #0
1000ea3c:	4961      	ldr	r1, [pc, #388]	; (1000ebc4 <internal_at_ble_service_define+0x390>)
1000ea3e:	2302      	movs	r3, #2
1000ea40:	47a0      	blx	r4
1000ea42:	1e04      	subs	r4, r0, #0
1000ea44:	d000      	beq.n	1000ea48 <internal_at_ble_service_define+0x214>
1000ea46:	e0d0      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000ea48:	69ab      	ldr	r3, [r5, #24]
1000ea4a:	2b00      	cmp	r3, #0
1000ea4c:	d00e      	beq.n	1000ea6c <internal_at_ble_service_define+0x238>
1000ea4e:	4b5f      	ldr	r3, [pc, #380]	; (1000ebcc <internal_at_ble_service_define+0x398>)
1000ea50:	aa06      	add	r2, sp, #24
1000ea52:	9300      	str	r3, [sp, #0]
1000ea54:	230e      	movs	r3, #14
1000ea56:	189b      	adds	r3, r3, r2
1000ea58:	9301      	str	r3, [sp, #4]
1000ea5a:	4c53      	ldr	r4, [pc, #332]	; (1000eba8 <internal_at_ble_service_define+0x374>)
1000ea5c:	1c30      	adds	r0, r6, #0
1000ea5e:	2107      	movs	r1, #7
1000ea60:	2201      	movs	r2, #1
1000ea62:	2302      	movs	r3, #2
1000ea64:	47a0      	blx	r4
1000ea66:	1e04      	subs	r4, r0, #0
1000ea68:	d000      	beq.n	1000ea6c <internal_at_ble_service_define+0x238>
1000ea6a:	e0be      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000ea6c:	9b02      	ldr	r3, [sp, #8]
1000ea6e:	353c      	adds	r5, #60	; 0x3c
1000ea70:	3301      	adds	r3, #1
1000ea72:	9302      	str	r3, [sp, #8]
1000ea74:	e73a      	b.n	1000e8ec <internal_at_ble_service_define+0xb8>
1000ea76:	1c30      	adds	r0, r6, #0
1000ea78:	4b55      	ldr	r3, [pc, #340]	; (1000ebd0 <internal_at_ble_service_define+0x39c>)
1000ea7a:	4798      	blx	r3
1000ea7c:	1e04      	subs	r4, r0, #0
1000ea7e:	d000      	beq.n	1000ea82 <internal_at_ble_service_define+0x24e>
1000ea80:	e0b3      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000ea82:	8833      	ldrh	r3, [r6, #0]
1000ea84:	9a05      	ldr	r2, [sp, #20]
1000ea86:	8013      	strh	r3, [r2, #0]
1000ea88:	8836      	ldrh	r6, [r6, #0]
1000ea8a:	9b06      	ldr	r3, [sp, #24]
1000ea8c:	9a03      	ldr	r2, [sp, #12]
1000ea8e:	18f6      	adds	r6, r6, r3
1000ea90:	b2b3      	uxth	r3, r6
1000ea92:	9302      	str	r3, [sp, #8]
1000ea94:	233c      	movs	r3, #60	; 0x3c
1000ea96:	4353      	muls	r3, r2
1000ea98:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000ea9a:	3314      	adds	r3, #20
1000ea9c:	18d3      	adds	r3, r2, r3
1000ea9e:	9304      	str	r3, [sp, #16]
1000eaa0:	9b04      	ldr	r3, [sp, #16]
1000eaa2:	429f      	cmp	r7, r3
1000eaa4:	d100      	bne.n	1000eaa8 <internal_at_ble_service_define+0x274>
1000eaa6:	e0a0      	b.n	1000ebea <internal_at_ble_service_define+0x3b6>
1000eaa8:	9b02      	ldr	r3, [sp, #8]
1000eaaa:	1c9d      	adds	r5, r3, #2
1000eaac:	1c3b      	adds	r3, r7, #0
1000eaae:	b2ad      	uxth	r5, r5
1000eab0:	3b14      	subs	r3, #20
1000eab2:	801d      	strh	r5, [r3, #0]
1000eab4:	9303      	str	r3, [sp, #12]
1000eab6:	893b      	ldrh	r3, [r7, #8]
1000eab8:	2b00      	cmp	r3, #0
1000eaba:	d108      	bne.n	1000eace <internal_at_ble_service_define+0x29a>
1000eabc:	23c0      	movs	r3, #192	; 0xc0
1000eabe:	883a      	ldrh	r2, [r7, #0]
1000eac0:	005b      	lsls	r3, r3, #1
1000eac2:	421a      	tst	r2, r3
1000eac4:	d026      	beq.n	1000eb14 <internal_at_ble_service_define+0x2e0>
1000eac6:	9e02      	ldr	r6, [sp, #8]
1000eac8:	3603      	adds	r6, #3
1000eaca:	b2b5      	uxth	r5, r6
1000eacc:	e022      	b.n	1000eb14 <internal_at_ble_service_define+0x2e0>
1000eace:	2103      	movs	r1, #3
1000ead0:	7b3b      	ldrb	r3, [r7, #12]
1000ead2:	4019      	ands	r1, r3
1000ead4:	3903      	subs	r1, #3
1000ead6:	424a      	negs	r2, r1
1000ead8:	414a      	adcs	r2, r1
1000eada:	0759      	lsls	r1, r3, #29
1000eadc:	0fc9      	lsrs	r1, r1, #31
1000eade:	4311      	orrs	r1, r2
1000eae0:	03c9      	lsls	r1, r1, #15
1000eae2:	897a      	ldrh	r2, [r7, #10]
1000eae4:	2900      	cmp	r1, #0
1000eae6:	d007      	beq.n	1000eaf8 <internal_at_ble_service_define+0x2c4>
1000eae8:	6879      	ldr	r1, [r7, #4]
1000eaea:	2900      	cmp	r1, #0
1000eaec:	d100      	bne.n	1000eaf0 <internal_at_ble_service_define+0x2bc>
1000eaee:	4939      	ldr	r1, [pc, #228]	; (1000ebd4 <internal_at_ble_service_define+0x3a0>)
1000eaf0:	1c28      	adds	r0, r5, #0
1000eaf2:	4e39      	ldr	r6, [pc, #228]	; (1000ebd8 <internal_at_ble_service_define+0x3a4>)
1000eaf4:	47b0      	blx	r6
1000eaf6:	e00a      	b.n	1000eb0e <internal_at_ble_service_define+0x2da>
1000eaf8:	1c28      	adds	r0, r5, #0
1000eafa:	4e37      	ldr	r6, [pc, #220]	; (1000ebd8 <internal_at_ble_service_define+0x3a4>)
1000eafc:	47b0      	blx	r6
1000eafe:	2800      	cmp	r0, #0
1000eb00:	d172      	bne.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb02:	9b03      	ldr	r3, [sp, #12]
1000eb04:	8939      	ldrh	r1, [r7, #8]
1000eb06:	8818      	ldrh	r0, [r3, #0]
1000eb08:	687a      	ldr	r2, [r7, #4]
1000eb0a:	4b34      	ldr	r3, [pc, #208]	; (1000ebdc <internal_at_ble_service_define+0x3a8>)
1000eb0c:	4798      	blx	r3
1000eb0e:	2800      	cmp	r0, #0
1000eb10:	d0d4      	beq.n	1000eabc <internal_at_ble_service_define+0x288>
1000eb12:	e069      	b.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb14:	8abb      	ldrh	r3, [r7, #20]
1000eb16:	2b00      	cmp	r3, #0
1000eb18:	d00a      	beq.n	1000eb30 <internal_at_ble_service_define+0x2fc>
1000eb1a:	3501      	adds	r5, #1
1000eb1c:	b2ad      	uxth	r5, r5
1000eb1e:	843d      	strh	r5, [r7, #32]
1000eb20:	7f39      	ldrb	r1, [r7, #28]
1000eb22:	8afb      	ldrh	r3, [r7, #22]
1000eb24:	1c28      	adds	r0, r5, #0
1000eb26:	693a      	ldr	r2, [r7, #16]
1000eb28:	4e2d      	ldr	r6, [pc, #180]	; (1000ebe0 <internal_at_ble_service_define+0x3ac>)
1000eb2a:	47b0      	blx	r6
1000eb2c:	2800      	cmp	r0, #0
1000eb2e:	d15b      	bne.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb30:	883b      	ldrh	r3, [r7, #0]
1000eb32:	07db      	lsls	r3, r3, #31
1000eb34:	d50d      	bpl.n	1000eb52 <internal_at_ble_service_define+0x31e>
1000eb36:	2200      	movs	r2, #0
1000eb38:	3501      	adds	r5, #1
1000eb3a:	b2ad      	uxth	r5, r5
1000eb3c:	a909      	add	r1, sp, #36	; 0x24
1000eb3e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000eb40:	7fbb      	ldrb	r3, [r7, #30]
1000eb42:	1c28      	adds	r0, r5, #0
1000eb44:	700a      	strb	r2, [r1, #0]
1000eb46:	704a      	strb	r2, [r1, #1]
1000eb48:	4e23      	ldr	r6, [pc, #140]	; (1000ebd8 <internal_at_ble_service_define+0x3a4>)
1000eb4a:	3202      	adds	r2, #2
1000eb4c:	47b0      	blx	r6
1000eb4e:	2800      	cmp	r0, #0
1000eb50:	d14a      	bne.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb52:	2330      	movs	r3, #48	; 0x30
1000eb54:	883a      	ldrh	r2, [r7, #0]
1000eb56:	421a      	tst	r2, r3
1000eb58:	d00d      	beq.n	1000eb76 <internal_at_ble_service_define+0x342>
1000eb5a:	2200      	movs	r2, #0
1000eb5c:	3501      	adds	r5, #1
1000eb5e:	b2ad      	uxth	r5, r5
1000eb60:	a909      	add	r1, sp, #36	; 0x24
1000eb62:	847d      	strh	r5, [r7, #34]	; 0x22
1000eb64:	7f7b      	ldrb	r3, [r7, #29]
1000eb66:	1c28      	adds	r0, r5, #0
1000eb68:	700a      	strb	r2, [r1, #0]
1000eb6a:	704a      	strb	r2, [r1, #1]
1000eb6c:	4e1a      	ldr	r6, [pc, #104]	; (1000ebd8 <internal_at_ble_service_define+0x3a4>)
1000eb6e:	3202      	adds	r2, #2
1000eb70:	47b0      	blx	r6
1000eb72:	2800      	cmp	r0, #0
1000eb74:	d138      	bne.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb76:	69b9      	ldr	r1, [r7, #24]
1000eb78:	2900      	cmp	r1, #0
1000eb7a:	d006      	beq.n	1000eb8a <internal_at_ble_service_define+0x356>
1000eb7c:	3501      	adds	r5, #1
1000eb7e:	b2ad      	uxth	r5, r5
1000eb80:	1c28      	adds	r0, r5, #0
1000eb82:	4b18      	ldr	r3, [pc, #96]	; (1000ebe4 <internal_at_ble_service_define+0x3b0>)
1000eb84:	4798      	blx	r3
1000eb86:	2800      	cmp	r0, #0
1000eb88:	d12e      	bne.n	1000ebe8 <internal_at_ble_service_define+0x3b4>
1000eb8a:	373c      	adds	r7, #60	; 0x3c
1000eb8c:	9502      	str	r5, [sp, #8]
1000eb8e:	e787      	b.n	1000eaa0 <internal_at_ble_service_define+0x26c>
1000eb90:	10018680 	.word	0x10018680
1000eb94:	10019604 	.word	0x10019604
1000eb98:	10014a41 	.word	0x10014a41
1000eb9c:	1000e569 	.word	0x1000e569
1000eba0:	10014a2f 	.word	0x10014a2f
1000eba4:	100169ca 	.word	0x100169ca
1000eba8:	10010909 	.word	0x10010909
1000ebac:	100169cc 	.word	0x100169cc
1000ebb0:	1000e635 	.word	0x1000e635
1000ebb4:	100169c8 	.word	0x100169c8
1000ebb8:	1000e5dd 	.word	0x1000e5dd
1000ebbc:	100169c4 	.word	0x100169c4
1000ebc0:	100169c6 	.word	0x100169c6
1000ebc4:	00008002 	.word	0x00008002
1000ebc8:	100169c0 	.word	0x100169c0
1000ebcc:	100169c2 	.word	0x100169c2
1000ebd0:	100107fd 	.word	0x100107fd
1000ebd4:	1001866c 	.word	0x1001866c
1000ebd8:	1000e6fd 	.word	0x1000e6fd
1000ebdc:	10010979 	.word	0x10010979
1000ebe0:	1000e7b5 	.word	0x1000e7b5
1000ebe4:	1000e6d1 	.word	0x1000e6d1
1000ebe8:	1c04      	adds	r4, r0, #0
1000ebea:	1c20      	adds	r0, r4, #0
1000ebec:	b00b      	add	sp, #44	; 0x2c
1000ebee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ebf0 <initi_gatt_server_module>:
1000ebf0:	2300      	movs	r3, #0
1000ebf2:	4a07      	ldr	r2, [pc, #28]	; (1000ec10 <initi_gatt_server_module+0x20>)
1000ebf4:	7013      	strb	r3, [r2, #0]
1000ebf6:	4a07      	ldr	r2, [pc, #28]	; (1000ec14 <initi_gatt_server_module+0x24>)
1000ebf8:	6013      	str	r3, [r2, #0]
1000ebfa:	4a07      	ldr	r2, [pc, #28]	; (1000ec18 <initi_gatt_server_module+0x28>)
1000ebfc:	6013      	str	r3, [r2, #0]
1000ebfe:	4a07      	ldr	r2, [pc, #28]	; (1000ec1c <initi_gatt_server_module+0x2c>)
1000ec00:	6013      	str	r3, [r2, #0]
1000ec02:	4a07      	ldr	r2, [pc, #28]	; (1000ec20 <initi_gatt_server_module+0x30>)
1000ec04:	6013      	str	r3, [r2, #0]
1000ec06:	4a07      	ldr	r2, [pc, #28]	; (1000ec24 <initi_gatt_server_module+0x34>)
1000ec08:	6013      	str	r3, [r2, #0]
1000ec0a:	4a07      	ldr	r2, [pc, #28]	; (1000ec28 <initi_gatt_server_module+0x38>)
1000ec0c:	6013      	str	r3, [r2, #0]
1000ec0e:	4770      	bx	lr
1000ec10:	1001866c 	.word	0x1001866c
1000ec14:	1001867c 	.word	0x1001867c
1000ec18:	10018678 	.word	0x10018678
1000ec1c:	10018668 	.word	0x10018668
1000ec20:	10018674 	.word	0x10018674
1000ec24:	10018670 	.word	0x10018670
1000ec28:	10018680 	.word	0x10018680

1000ec2c <db_init>:
1000ec2c:	4b0a      	ldr	r3, [pc, #40]	; (1000ec58 <db_init+0x2c>)
1000ec2e:	4a0b      	ldr	r2, [pc, #44]	; (1000ec5c <db_init+0x30>)
1000ec30:	6018      	str	r0, [r3, #0]
1000ec32:	084b      	lsrs	r3, r1, #1
1000ec34:	6013      	str	r3, [r2, #0]
1000ec36:	4a0a      	ldr	r2, [pc, #40]	; (1000ec60 <db_init+0x34>)
1000ec38:	18c3      	adds	r3, r0, r3
1000ec3a:	6013      	str	r3, [r2, #0]
1000ec3c:	4a09      	ldr	r2, [pc, #36]	; (1000ec64 <db_init+0x38>)
1000ec3e:	1841      	adds	r1, r0, r1
1000ec40:	6013      	str	r3, [r2, #0]
1000ec42:	2303      	movs	r3, #3
1000ec44:	2200      	movs	r2, #0
1000ec46:	3103      	adds	r1, #3
1000ec48:	4399      	bics	r1, r3
1000ec4a:	4b07      	ldr	r3, [pc, #28]	; (1000ec68 <db_init+0x3c>)
1000ec4c:	3904      	subs	r1, #4
1000ec4e:	6019      	str	r1, [r3, #0]
1000ec50:	4b06      	ldr	r3, [pc, #24]	; (1000ec6c <db_init+0x40>)
1000ec52:	601a      	str	r2, [r3, #0]
1000ec54:	4770      	bx	lr
1000ec56:	46c0      	nop			; (mov r8, r8)
1000ec58:	10018680 	.word	0x10018680
1000ec5c:	1001867c 	.word	0x1001867c
1000ec60:	10018668 	.word	0x10018668
1000ec64:	10018674 	.word	0x10018674
1000ec68:	10018670 	.word	0x10018670
1000ec6c:	10018678 	.word	0x10018678

1000ec70 <at_ble_primary_service_define>:
1000ec70:	b530      	push	{r4, r5, lr}
1000ec72:	b085      	sub	sp, #20
1000ec74:	ac08      	add	r4, sp, #32
1000ec76:	cc20      	ldmia	r4!, {r5}
1000ec78:	8824      	ldrh	r4, [r4, #0]
1000ec7a:	9500      	str	r5, [sp, #0]
1000ec7c:	9401      	str	r4, [sp, #4]
1000ec7e:	2401      	movs	r4, #1
1000ec80:	9402      	str	r4, [sp, #8]
1000ec82:	4c02      	ldr	r4, [pc, #8]	; (1000ec8c <at_ble_primary_service_define+0x1c>)
1000ec84:	47a0      	blx	r4
1000ec86:	b005      	add	sp, #20
1000ec88:	bd30      	pop	{r4, r5, pc}
1000ec8a:	46c0      	nop			; (mov r8, r8)
1000ec8c:	1000e835 	.word	0x1000e835

1000ec90 <at_ble_characteristic_value_set>:
1000ec90:	b570      	push	{r4, r5, r6, lr}
1000ec92:	4b0b      	ldr	r3, [pc, #44]	; (1000ecc0 <at_ble_characteristic_value_set+0x30>)
1000ec94:	1c06      	adds	r6, r0, #0
1000ec96:	1c0c      	adds	r4, r1, #0
1000ec98:	1c15      	adds	r5, r2, #0
1000ec9a:	4798      	blx	r3
1000ec9c:	2800      	cmp	r0, #0
1000ec9e:	d008      	beq.n	1000ecb2 <at_ble_characteristic_value_set+0x22>
1000eca0:	6880      	ldr	r0, [r0, #8]
1000eca2:	2800      	cmp	r0, #0
1000eca4:	d005      	beq.n	1000ecb2 <at_ble_characteristic_value_set+0x22>
1000eca6:	1c21      	adds	r1, r4, #0
1000eca8:	1c2a      	adds	r2, r5, #0
1000ecaa:	4b06      	ldr	r3, [pc, #24]	; (1000ecc4 <at_ble_characteristic_value_set+0x34>)
1000ecac:	4798      	blx	r3
1000ecae:	2000      	movs	r0, #0
1000ecb0:	e004      	b.n	1000ecbc <at_ble_characteristic_value_set+0x2c>
1000ecb2:	1c30      	adds	r0, r6, #0
1000ecb4:	1c29      	adds	r1, r5, #0
1000ecb6:	1c22      	adds	r2, r4, #0
1000ecb8:	4b03      	ldr	r3, [pc, #12]	; (1000ecc8 <at_ble_characteristic_value_set+0x38>)
1000ecba:	4798      	blx	r3
1000ecbc:	bd70      	pop	{r4, r5, r6, pc}
1000ecbe:	46c0      	nop			; (mov r8, r8)
1000ecc0:	1000e59d 	.word	0x1000e59d
1000ecc4:	10014a2f 	.word	0x10014a2f
1000ecc8:	10010979 	.word	0x10010979

1000eccc <at_ble_characteristic_value_get>:
1000eccc:	b570      	push	{r4, r5, r6, lr}
1000ecce:	4b0c      	ldr	r3, [pc, #48]	; (1000ed00 <at_ble_characteristic_value_get+0x34>)
1000ecd0:	1c06      	adds	r6, r0, #0
1000ecd2:	1c0c      	adds	r4, r1, #0
1000ecd4:	1c15      	adds	r5, r2, #0
1000ecd6:	4798      	blx	r3
1000ecd8:	2800      	cmp	r0, #0
1000ecda:	d00b      	beq.n	1000ecf4 <at_ble_characteristic_value_get+0x28>
1000ecdc:	6883      	ldr	r3, [r0, #8]
1000ecde:	2b00      	cmp	r3, #0
1000ece0:	d008      	beq.n	1000ecf4 <at_ble_characteristic_value_get+0x28>
1000ece2:	8883      	ldrh	r3, [r0, #4]
1000ece4:	802b      	strh	r3, [r5, #0]
1000ece6:	8882      	ldrh	r2, [r0, #4]
1000ece8:	6881      	ldr	r1, [r0, #8]
1000ecea:	4b06      	ldr	r3, [pc, #24]	; (1000ed04 <at_ble_characteristic_value_get+0x38>)
1000ecec:	1c20      	adds	r0, r4, #0
1000ecee:	4798      	blx	r3
1000ecf0:	2000      	movs	r0, #0
1000ecf2:	e004      	b.n	1000ecfe <at_ble_characteristic_value_get+0x32>
1000ecf4:	1c30      	adds	r0, r6, #0
1000ecf6:	1c29      	adds	r1, r5, #0
1000ecf8:	1c22      	adds	r2, r4, #0
1000ecfa:	4b03      	ldr	r3, [pc, #12]	; (1000ed08 <at_ble_characteristic_value_get+0x3c>)
1000ecfc:	4798      	blx	r3
1000ecfe:	bd70      	pop	{r4, r5, r6, pc}
1000ed00:	1000e59d 	.word	0x1000e59d
1000ed04:	10014a2f 	.word	0x10014a2f
1000ed08:	10010a05 	.word	0x10010a05

1000ed0c <at_ble_write_authorize_reply>:
1000ed0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed0e:	b085      	sub	sp, #20
1000ed10:	1c04      	adds	r4, r0, #0
1000ed12:	9101      	str	r1, [sp, #4]
1000ed14:	2900      	cmp	r1, #0
1000ed16:	d128      	bne.n	1000ed6a <at_ble_write_authorize_reply+0x5e>
1000ed18:	8843      	ldrh	r3, [r0, #2]
1000ed1a:	1c27      	adds	r7, r4, #0
1000ed1c:	9300      	str	r3, [sp, #0]
1000ed1e:	1c18      	adds	r0, r3, #0
1000ed20:	4b16      	ldr	r3, [pc, #88]	; (1000ed7c <at_ble_write_authorize_reply+0x70>)
1000ed22:	4798      	blx	r3
1000ed24:	3708      	adds	r7, #8
1000ed26:	2800      	cmp	r0, #0
1000ed28:	d009      	beq.n	1000ed3e <at_ble_write_authorize_reply+0x32>
1000ed2a:	6880      	ldr	r0, [r0, #8]
1000ed2c:	2800      	cmp	r0, #0
1000ed2e:	d006      	beq.n	1000ed3e <at_ble_write_authorize_reply+0x32>
1000ed30:	88a3      	ldrh	r3, [r4, #4]
1000ed32:	88e2      	ldrh	r2, [r4, #6]
1000ed34:	18c0      	adds	r0, r0, r3
1000ed36:	1c39      	adds	r1, r7, #0
1000ed38:	4b11      	ldr	r3, [pc, #68]	; (1000ed80 <at_ble_write_authorize_reply+0x74>)
1000ed3a:	4798      	blx	r3
1000ed3c:	e015      	b.n	1000ed6a <at_ble_write_authorize_reply+0x5e>
1000ed3e:	ab02      	add	r3, sp, #8
1000ed40:	1d9e      	adds	r6, r3, #6
1000ed42:	2300      	movs	r3, #0
1000ed44:	4d0f      	ldr	r5, [pc, #60]	; (1000ed84 <at_ble_write_authorize_reply+0x78>)
1000ed46:	8033      	strh	r3, [r6, #0]
1000ed48:	6829      	ldr	r1, [r5, #0]
1000ed4a:	1c32      	adds	r2, r6, #0
1000ed4c:	4b0e      	ldr	r3, [pc, #56]	; (1000ed88 <at_ble_write_authorize_reply+0x7c>)
1000ed4e:	9800      	ldr	r0, [sp, #0]
1000ed50:	4798      	blx	r3
1000ed52:	682b      	ldr	r3, [r5, #0]
1000ed54:	88a0      	ldrh	r0, [r4, #4]
1000ed56:	88e2      	ldrh	r2, [r4, #6]
1000ed58:	1818      	adds	r0, r3, r0
1000ed5a:	1c39      	adds	r1, r7, #0
1000ed5c:	4b08      	ldr	r3, [pc, #32]	; (1000ed80 <at_ble_write_authorize_reply+0x74>)
1000ed5e:	4798      	blx	r3
1000ed60:	8860      	ldrh	r0, [r4, #2]
1000ed62:	8832      	ldrh	r2, [r6, #0]
1000ed64:	6829      	ldr	r1, [r5, #0]
1000ed66:	4b09      	ldr	r3, [pc, #36]	; (1000ed8c <at_ble_write_authorize_reply+0x80>)
1000ed68:	4798      	blx	r3
1000ed6a:	8860      	ldrh	r0, [r4, #2]
1000ed6c:	8821      	ldrh	r1, [r4, #0]
1000ed6e:	9a01      	ldr	r2, [sp, #4]
1000ed70:	4b07      	ldr	r3, [pc, #28]	; (1000ed90 <at_ble_write_authorize_reply+0x84>)
1000ed72:	4798      	blx	r3
1000ed74:	2000      	movs	r0, #0
1000ed76:	b005      	add	sp, #20
1000ed78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed7a:	46c0      	nop			; (mov r8, r8)
1000ed7c:	1000e59d 	.word	0x1000e59d
1000ed80:	10014a2f 	.word	0x10014a2f
1000ed84:	10016be8 	.word	0x10016be8
1000ed88:	1000eccd 	.word	0x1000eccd
1000ed8c:	1000ec91 	.word	0x1000ec91
1000ed90:	100104f5 	.word	0x100104f5

1000ed94 <gatts_handle_read_req>:
1000ed94:	b538      	push	{r3, r4, r5, lr}
1000ed96:	1c0c      	adds	r4, r1, #0
1000ed98:	4b07      	ldr	r3, [pc, #28]	; (1000edb8 <gatts_handle_read_req+0x24>)
1000ed9a:	4798      	blx	r3
1000ed9c:	8865      	ldrh	r5, [r4, #2]
1000ed9e:	4b07      	ldr	r3, [pc, #28]	; (1000edbc <gatts_handle_read_req+0x28>)
1000eda0:	1c28      	adds	r0, r5, #0
1000eda2:	4798      	blx	r3
1000eda4:	7883      	ldrb	r3, [r0, #2]
1000eda6:	2026      	movs	r0, #38	; 0x26
1000eda8:	07db      	lsls	r3, r3, #31
1000edaa:	d404      	bmi.n	1000edb6 <gatts_handle_read_req+0x22>
1000edac:	8820      	ldrh	r0, [r4, #0]
1000edae:	1c29      	adds	r1, r5, #0
1000edb0:	4b03      	ldr	r3, [pc, #12]	; (1000edc0 <gatts_handle_read_req+0x2c>)
1000edb2:	4798      	blx	r3
1000edb4:	203b      	movs	r0, #59	; 0x3b
1000edb6:	bd38      	pop	{r3, r4, r5, pc}
1000edb8:	10010439 	.word	0x10010439
1000edbc:	1000e59d 	.word	0x1000e59d
1000edc0:	1000e805 	.word	0x1000e805

1000edc4 <gatts_handle_att_info_req>:
1000edc4:	b538      	push	{r3, r4, r5, lr}
1000edc6:	1c0d      	adds	r5, r1, #0
1000edc8:	4b0a      	ldr	r3, [pc, #40]	; (1000edf4 <gatts_handle_att_info_req+0x30>)
1000edca:	1c14      	adds	r4, r2, #0
1000edcc:	4798      	blx	r3
1000edce:	882d      	ldrh	r5, [r5, #0]
1000edd0:	4b09      	ldr	r3, [pc, #36]	; (1000edf8 <gatts_handle_att_info_req+0x34>)
1000edd2:	1c28      	adds	r0, r5, #0
1000edd4:	4798      	blx	r3
1000edd6:	0a22      	lsrs	r2, r4, #8
1000edd8:	1c03      	adds	r3, r0, #0
1000edda:	4c08      	ldr	r4, [pc, #32]	; (1000edfc <gatts_handle_att_info_req+0x38>)
1000eddc:	b291      	uxth	r1, r2
1000edde:	2800      	cmp	r0, #0
1000ede0:	d003      	beq.n	1000edea <gatts_handle_att_info_req+0x26>
1000ede2:	8882      	ldrh	r2, [r0, #4]
1000ede4:	2300      	movs	r3, #0
1000ede6:	1c28      	adds	r0, r5, #0
1000ede8:	e001      	b.n	1000edee <gatts_handle_att_info_req+0x2a>
1000edea:	1c28      	adds	r0, r5, #0
1000edec:	2201      	movs	r2, #1
1000edee:	47a0      	blx	r4
1000edf0:	203b      	movs	r0, #59	; 0x3b
1000edf2:	bd38      	pop	{r3, r4, r5, pc}
1000edf4:	1001047d 	.word	0x1001047d
1000edf8:	1000e59d 	.word	0x1000e59d
1000edfc:	10010539 	.word	0x10010539

1000ee00 <gatts_handle_write_req>:
1000ee00:	b510      	push	{r4, lr}
1000ee02:	1c14      	adds	r4, r2, #0
1000ee04:	4b07      	ldr	r3, [pc, #28]	; (1000ee24 <gatts_handle_write_req+0x24>)
1000ee06:	4798      	blx	r3
1000ee08:	4b07      	ldr	r3, [pc, #28]	; (1000ee28 <gatts_handle_write_req+0x28>)
1000ee0a:	8860      	ldrh	r0, [r4, #2]
1000ee0c:	4798      	blx	r3
1000ee0e:	2302      	movs	r3, #2
1000ee10:	7881      	ldrb	r1, [r0, #2]
1000ee12:	2022      	movs	r0, #34	; 0x22
1000ee14:	4019      	ands	r1, r3
1000ee16:	d103      	bne.n	1000ee20 <gatts_handle_write_req+0x20>
1000ee18:	1c20      	adds	r0, r4, #0
1000ee1a:	4b04      	ldr	r3, [pc, #16]	; (1000ee2c <gatts_handle_write_req+0x2c>)
1000ee1c:	4798      	blx	r3
1000ee1e:	201f      	movs	r0, #31
1000ee20:	bd10      	pop	{r4, pc}
1000ee22:	46c0      	nop			; (mov r8, r8)
1000ee24:	10010445 	.word	0x10010445
1000ee28:	1000e59d 	.word	0x1000e59d
1000ee2c:	1000ed0d 	.word	0x1000ed0d

1000ee30 <init_l2cc_task_module>:
1000ee30:	220a      	movs	r2, #10
1000ee32:	4b01      	ldr	r3, [pc, #4]	; (1000ee38 <init_l2cc_task_module+0x8>)
1000ee34:	701a      	strb	r2, [r3, #0]
1000ee36:	4770      	bx	lr
1000ee38:	10016be4 	.word	0x10016be4

1000ee3c <l2cc_data_send_rsp_handler>:
1000ee3c:	b510      	push	{r4, lr}
1000ee3e:	7802      	ldrb	r2, [r0, #0]
1000ee40:	700a      	strb	r2, [r1, #0]
1000ee42:	7883      	ldrb	r3, [r0, #2]
1000ee44:	7844      	ldrb	r4, [r0, #1]
1000ee46:	021b      	lsls	r3, r3, #8
1000ee48:	4323      	orrs	r3, r4
1000ee4a:	804b      	strh	r3, [r1, #2]
1000ee4c:	7903      	ldrb	r3, [r0, #4]
1000ee4e:	78c0      	ldrb	r0, [r0, #3]
1000ee50:	021b      	lsls	r3, r3, #8
1000ee52:	4303      	orrs	r3, r0
1000ee54:	808b      	strh	r3, [r1, #4]
1000ee56:	2a00      	cmp	r2, #0
1000ee58:	d103      	bne.n	1000ee62 <l2cc_data_send_rsp_handler+0x26>
1000ee5a:	4a02      	ldr	r2, [pc, #8]	; (1000ee64 <l2cc_data_send_rsp_handler+0x28>)
1000ee5c:	7813      	ldrb	r3, [r2, #0]
1000ee5e:	3301      	adds	r3, #1
1000ee60:	7013      	strb	r3, [r2, #0]
1000ee62:	bd10      	pop	{r4, pc}
1000ee64:	10016be4 	.word	0x10016be4

1000ee68 <l2cc_data_received_handler>:
1000ee68:	b508      	push	{r3, lr}
1000ee6a:	1c03      	adds	r3, r0, #0
1000ee6c:	7842      	ldrb	r2, [r0, #1]
1000ee6e:	7800      	ldrb	r0, [r0, #0]
1000ee70:	0212      	lsls	r2, r2, #8
1000ee72:	4302      	orrs	r2, r0
1000ee74:	800a      	strh	r2, [r1, #0]
1000ee76:	78da      	ldrb	r2, [r3, #3]
1000ee78:	7898      	ldrb	r0, [r3, #2]
1000ee7a:	0212      	lsls	r2, r2, #8
1000ee7c:	4302      	orrs	r2, r0
1000ee7e:	804a      	strh	r2, [r1, #2]
1000ee80:	795a      	ldrb	r2, [r3, #5]
1000ee82:	7918      	ldrb	r0, [r3, #4]
1000ee84:	0212      	lsls	r2, r2, #8
1000ee86:	4302      	orrs	r2, r0
1000ee88:	808a      	strh	r2, [r1, #4]
1000ee8a:	1d88      	adds	r0, r1, #6
1000ee8c:	1d99      	adds	r1, r3, #6
1000ee8e:	4b01      	ldr	r3, [pc, #4]	; (1000ee94 <l2cc_data_received_handler+0x2c>)
1000ee90:	4798      	blx	r3
1000ee92:	bd08      	pop	{r3, pc}
1000ee94:	10014a2f 	.word	0x10014a2f

1000ee98 <at_ble_authenticate>:
1000ee98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee9a:	1c0c      	adds	r4, r1, #0
1000ee9c:	211f      	movs	r1, #31
1000ee9e:	b08b      	sub	sp, #44	; 0x2c
1000eea0:	9307      	str	r3, [sp, #28]
1000eea2:	ab02      	add	r3, sp, #8
1000eea4:	18c9      	adds	r1, r1, r3
1000eea6:	230f      	movs	r3, #15
1000eea8:	700b      	strb	r3, [r1, #0]
1000eeaa:	4b40      	ldr	r3, [pc, #256]	; (1000efac <at_ble_authenticate+0x114>)
1000eeac:	1c05      	adds	r5, r0, #0
1000eeae:	1c16      	adds	r6, r2, #0
1000eeb0:	4798      	blx	r3
1000eeb2:	1c07      	adds	r7, r0, #0
1000eeb4:	2001      	movs	r0, #1
1000eeb6:	2f07      	cmp	r7, #7
1000eeb8:	d875      	bhi.n	1000efa6 <at_ble_authenticate+0x10e>
1000eeba:	2c00      	cmp	r4, #0
1000eebc:	d113      	bne.n	1000eee6 <at_ble_authenticate+0x4e>
1000eebe:	2312      	movs	r3, #18
1000eec0:	435f      	muls	r7, r3
1000eec2:	4b3b      	ldr	r3, [pc, #236]	; (1000efb0 <at_ble_authenticate+0x118>)
1000eec4:	5cfb      	ldrb	r3, [r7, r3]
1000eec6:	4283      	cmp	r3, r0
1000eec8:	d001      	beq.n	1000eece <at_ble_authenticate+0x36>
1000eeca:	20cf      	movs	r0, #207	; 0xcf
1000eecc:	e06b      	b.n	1000efa6 <at_ble_authenticate+0x10e>
1000eece:	9504      	str	r5, [sp, #16]
1000eed0:	9400      	str	r4, [sp, #0]
1000eed2:	9401      	str	r4, [sp, #4]
1000eed4:	9402      	str	r4, [sp, #8]
1000eed6:	9403      	str	r4, [sp, #12]
1000eed8:	1c20      	adds	r0, r4, #0
1000eeda:	1c21      	adds	r1, r4, #0
1000eedc:	1c22      	adds	r2, r4, #0
1000eede:	1c23      	adds	r3, r4, #0
1000eee0:	4d34      	ldr	r5, [pc, #208]	; (1000efb4 <at_ble_authenticate+0x11c>)
1000eee2:	47a8      	blx	r5
1000eee4:	e05e      	b.n	1000efa4 <at_ble_authenticate+0x10c>
1000eee6:	7922      	ldrb	r2, [r4, #4]
1000eee8:	2a06      	cmp	r2, #6
1000eeea:	d9ee      	bls.n	1000eeca <at_ble_authenticate+0x32>
1000eeec:	7963      	ldrb	r3, [r4, #5]
1000eeee:	2b10      	cmp	r3, #16
1000eef0:	d8eb      	bhi.n	1000eeca <at_ble_authenticate+0x32>
1000eef2:	429a      	cmp	r2, r3
1000eef4:	d8e9      	bhi.n	1000eeca <at_ble_authenticate+0x32>
1000eef6:	7a23      	ldrb	r3, [r4, #8]
1000eef8:	2b04      	cmp	r3, #4
1000eefa:	d8e6      	bhi.n	1000eeca <at_ble_authenticate+0x32>
1000eefc:	79a3      	ldrb	r3, [r4, #6]
1000eefe:	2b07      	cmp	r3, #7
1000ef00:	d8e3      	bhi.n	1000eeca <at_ble_authenticate+0x32>
1000ef02:	79e3      	ldrb	r3, [r4, #7]
1000ef04:	2b07      	cmp	r3, #7
1000ef06:	d8e0      	bhi.n	1000eeca <at_ble_authenticate+0x32>
1000ef08:	78a3      	ldrb	r3, [r4, #2]
1000ef0a:	2b00      	cmp	r3, #0
1000ef0c:	d006      	beq.n	1000ef1c <at_ble_authenticate+0x84>
1000ef0e:	2e00      	cmp	r6, #0
1000ef10:	d0db      	beq.n	1000eeca <at_ble_authenticate+0x32>
1000ef12:	4829      	ldr	r0, [pc, #164]	; (1000efb8 <at_ble_authenticate+0x120>)
1000ef14:	1c31      	adds	r1, r6, #0
1000ef16:	221c      	movs	r2, #28
1000ef18:	4b28      	ldr	r3, [pc, #160]	; (1000efbc <at_ble_authenticate+0x124>)
1000ef1a:	4798      	blx	r3
1000ef1c:	9b07      	ldr	r3, [sp, #28]
1000ef1e:	2b00      	cmp	r3, #0
1000ef20:	d005      	beq.n	1000ef2e <at_ble_authenticate+0x96>
1000ef22:	4827      	ldr	r0, [pc, #156]	; (1000efc0 <at_ble_authenticate+0x128>)
1000ef24:	1c19      	adds	r1, r3, #0
1000ef26:	309a      	adds	r0, #154	; 0x9a
1000ef28:	2210      	movs	r2, #16
1000ef2a:	4b24      	ldr	r3, [pc, #144]	; (1000efbc <at_ble_authenticate+0x124>)
1000ef2c:	4798      	blx	r3
1000ef2e:	7863      	ldrb	r3, [r4, #1]
1000ef30:	78a2      	ldrb	r2, [r4, #2]
1000ef32:	009b      	lsls	r3, r3, #2
1000ef34:	4313      	orrs	r3, r2
1000ef36:	2212      	movs	r2, #18
1000ef38:	4357      	muls	r7, r2
1000ef3a:	4a1d      	ldr	r2, [pc, #116]	; (1000efb0 <at_ble_authenticate+0x118>)
1000ef3c:	b2db      	uxtb	r3, r3
1000ef3e:	5cba      	ldrb	r2, [r7, r2]
1000ef40:	2a00      	cmp	r2, #0
1000ef42:	d116      	bne.n	1000ef72 <at_ble_authenticate+0xda>
1000ef44:	79a0      	ldrb	r0, [r4, #6]
1000ef46:	0742      	lsls	r2, r0, #29
1000ef48:	d502      	bpl.n	1000ef50 <at_ble_authenticate+0xb8>
1000ef4a:	9a07      	ldr	r2, [sp, #28]
1000ef4c:	2a00      	cmp	r2, #0
1000ef4e:	d0bc      	beq.n	1000eeca <at_ble_authenticate+0x32>
1000ef50:	07c2      	lsls	r2, r0, #31
1000ef52:	d501      	bpl.n	1000ef58 <at_ble_authenticate+0xc0>
1000ef54:	2e00      	cmp	r6, #0
1000ef56:	d0b8      	beq.n	1000eeca <at_ble_authenticate+0x32>
1000ef58:	7966      	ldrb	r6, [r4, #5]
1000ef5a:	7821      	ldrb	r1, [r4, #0]
1000ef5c:	78e2      	ldrb	r2, [r4, #3]
1000ef5e:	9600      	str	r6, [sp, #0]
1000ef60:	9001      	str	r0, [sp, #4]
1000ef62:	79e0      	ldrb	r0, [r4, #7]
1000ef64:	9002      	str	r0, [sp, #8]
1000ef66:	7a20      	ldrb	r0, [r4, #8]
1000ef68:	4c16      	ldr	r4, [pc, #88]	; (1000efc4 <at_ble_authenticate+0x12c>)
1000ef6a:	9003      	str	r0, [sp, #12]
1000ef6c:	1c28      	adds	r0, r5, #0
1000ef6e:	47a0      	blx	r4
1000ef70:	e018      	b.n	1000efa4 <at_ble_authenticate+0x10c>
1000ef72:	2a01      	cmp	r2, #1
1000ef74:	d1a9      	bne.n	1000eeca <at_ble_authenticate+0x32>
1000ef76:	79e0      	ldrb	r0, [r4, #7]
1000ef78:	0742      	lsls	r2, r0, #29
1000ef7a:	d502      	bpl.n	1000ef82 <at_ble_authenticate+0xea>
1000ef7c:	9a07      	ldr	r2, [sp, #28]
1000ef7e:	2a00      	cmp	r2, #0
1000ef80:	d0a3      	beq.n	1000eeca <at_ble_authenticate+0x32>
1000ef82:	07c2      	lsls	r2, r0, #31
1000ef84:	d501      	bpl.n	1000ef8a <at_ble_authenticate+0xf2>
1000ef86:	2e00      	cmp	r6, #0
1000ef88:	d09f      	beq.n	1000eeca <at_ble_authenticate+0x32>
1000ef8a:	7966      	ldrb	r6, [r4, #5]
1000ef8c:	7821      	ldrb	r1, [r4, #0]
1000ef8e:	78e2      	ldrb	r2, [r4, #3]
1000ef90:	9600      	str	r6, [sp, #0]
1000ef92:	79a6      	ldrb	r6, [r4, #6]
1000ef94:	9002      	str	r0, [sp, #8]
1000ef96:	9601      	str	r6, [sp, #4]
1000ef98:	7a20      	ldrb	r0, [r4, #8]
1000ef9a:	9504      	str	r5, [sp, #16]
1000ef9c:	9003      	str	r0, [sp, #12]
1000ef9e:	4c05      	ldr	r4, [pc, #20]	; (1000efb4 <at_ble_authenticate+0x11c>)
1000efa0:	2001      	movs	r0, #1
1000efa2:	47a0      	blx	r4
1000efa4:	2000      	movs	r0, #0
1000efa6:	b00b      	add	sp, #44	; 0x2c
1000efa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000efaa:	46c0      	nop			; (mov r8, r8)
1000efac:	1000f399 	.word	0x1000f399
1000efb0:	10019606 	.word	0x10019606
1000efb4:	1000f909 	.word	0x1000f909
1000efb8:	10019714 	.word	0x10019714
1000efbc:	10014a2f 	.word	0x10014a2f
1000efc0:	10019696 	.word	0x10019696
1000efc4:	1000f6e9 	.word	0x1000f6e9

1000efc8 <at_ble_pair_key_reply>:
1000efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efca:	b085      	sub	sp, #20
1000efcc:	1c05      	adds	r5, r0, #0
1000efce:	1c0c      	adds	r4, r1, #0
1000efd0:	1c16      	adds	r6, r2, #0
1000efd2:	2100      	movs	r1, #0
1000efd4:	4668      	mov	r0, sp
1000efd6:	2210      	movs	r2, #16
1000efd8:	4b18      	ldr	r3, [pc, #96]	; (1000f03c <at_ble_pair_key_reply+0x74>)
1000efda:	4798      	blx	r3
1000efdc:	2101      	movs	r1, #1
1000efde:	2e00      	cmp	r6, #0
1000efe0:	d101      	bne.n	1000efe6 <at_ble_pair_key_reply+0x1e>
1000efe2:	1c31      	adds	r1, r6, #0
1000efe4:	466e      	mov	r6, sp
1000efe6:	2c00      	cmp	r4, #0
1000efe8:	d116      	bne.n	1000f018 <at_ble_pair_key_reply+0x50>
1000efea:	2701      	movs	r7, #1
1000efec:	1c23      	adds	r3, r4, #0
1000efee:	1d70      	adds	r0, r6, #5
1000eff0:	3e01      	subs	r6, #1
1000eff2:	7802      	ldrb	r2, [r0, #0]
1000eff4:	3801      	subs	r0, #1
1000eff6:	3a30      	subs	r2, #48	; 0x30
1000eff8:	437a      	muls	r2, r7
1000effa:	189b      	adds	r3, r3, r2
1000effc:	220a      	movs	r2, #10
1000effe:	4357      	muls	r7, r2
1000f000:	42b0      	cmp	r0, r6
1000f002:	d1f6      	bne.n	1000eff2 <at_ble_pair_key_reply+0x2a>
1000f004:	466a      	mov	r2, sp
1000f006:	4668      	mov	r0, sp
1000f008:	7013      	strb	r3, [r2, #0]
1000f00a:	0a1a      	lsrs	r2, r3, #8
1000f00c:	7042      	strb	r2, [r0, #1]
1000f00e:	0c1a      	lsrs	r2, r3, #16
1000f010:	0e1b      	lsrs	r3, r3, #24
1000f012:	7082      	strb	r2, [r0, #2]
1000f014:	70c3      	strb	r3, [r0, #3]
1000f016:	e009      	b.n	1000f02c <at_ble_pair_key_reply+0x64>
1000f018:	20cf      	movs	r0, #207	; 0xcf
1000f01a:	2c01      	cmp	r4, #1
1000f01c:	d10c      	bne.n	1000f038 <at_ble_pair_key_reply+0x70>
1000f01e:	2300      	movs	r3, #0
1000f020:	4668      	mov	r0, sp
1000f022:	5cf2      	ldrb	r2, [r6, r3]
1000f024:	54c2      	strb	r2, [r0, r3]
1000f026:	3301      	adds	r3, #1
1000f028:	2b10      	cmp	r3, #16
1000f02a:	d1f9      	bne.n	1000f020 <at_ble_pair_key_reply+0x58>
1000f02c:	2004      	movs	r0, #4
1000f02e:	466a      	mov	r2, sp
1000f030:	1c2b      	adds	r3, r5, #0
1000f032:	4c03      	ldr	r4, [pc, #12]	; (1000f040 <at_ble_pair_key_reply+0x78>)
1000f034:	47a0      	blx	r4
1000f036:	2000      	movs	r0, #0
1000f038:	b005      	add	sp, #20
1000f03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f03c:	10014a41 	.word	0x10014a41
1000f040:	1000f985 	.word	0x1000f985

1000f044 <at_ble_send_slave_sec_request>:
1000f044:	b570      	push	{r4, r5, r6, lr}
1000f046:	4b0c      	ldr	r3, [pc, #48]	; (1000f078 <at_ble_send_slave_sec_request+0x34>)
1000f048:	1c0e      	adds	r6, r1, #0
1000f04a:	2100      	movs	r1, #0
1000f04c:	1c05      	adds	r5, r0, #0
1000f04e:	1c14      	adds	r4, r2, #0
1000f050:	4798      	blx	r3
1000f052:	2301      	movs	r3, #1
1000f054:	2807      	cmp	r0, #7
1000f056:	d80d      	bhi.n	1000f074 <at_ble_send_slave_sec_request+0x30>
1000f058:	3311      	adds	r3, #17
1000f05a:	4358      	muls	r0, r3
1000f05c:	4b07      	ldr	r3, [pc, #28]	; (1000f07c <at_ble_send_slave_sec_request+0x38>)
1000f05e:	5cc2      	ldrb	r2, [r0, r3]
1000f060:	23e0      	movs	r3, #224	; 0xe0
1000f062:	2a01      	cmp	r2, #1
1000f064:	d106      	bne.n	1000f074 <at_ble_send_slave_sec_request+0x30>
1000f066:	00b1      	lsls	r1, r6, #2
1000f068:	430c      	orrs	r4, r1
1000f06a:	4b05      	ldr	r3, [pc, #20]	; (1000f080 <at_ble_send_slave_sec_request+0x3c>)
1000f06c:	b2e1      	uxtb	r1, r4
1000f06e:	1c28      	adds	r0, r5, #0
1000f070:	4798      	blx	r3
1000f072:	2300      	movs	r3, #0
1000f074:	1c18      	adds	r0, r3, #0
1000f076:	bd70      	pop	{r4, r5, r6, pc}
1000f078:	1000f399 	.word	0x1000f399
1000f07c:	10019606 	.word	0x10019606
1000f080:	1000f9d5 	.word	0x1000f9d5

1000f084 <at_ble_encryption_start>:
1000f084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f086:	23cf      	movs	r3, #207	; 0xcf
1000f088:	2900      	cmp	r1, #0
1000f08a:	d02b      	beq.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f08c:	2a05      	cmp	r2, #5
1000f08e:	d829      	bhi.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f090:	2701      	movs	r7, #1
1000f092:	1c3d      	adds	r5, r7, #0
1000f094:	2433      	movs	r4, #51	; 0x33
1000f096:	4095      	lsls	r5, r2
1000f098:	4225      	tst	r5, r4
1000f09a:	d023      	beq.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f09c:	7e8c      	ldrb	r4, [r1, #26]
1000f09e:	3c07      	subs	r4, #7
1000f0a0:	2c09      	cmp	r4, #9
1000f0a2:	d81f      	bhi.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f0a4:	4b10      	ldr	r3, [pc, #64]	; (1000f0e8 <at_ble_encryption_start+0x64>)
1000f0a6:	1c0c      	adds	r4, r1, #0
1000f0a8:	2100      	movs	r1, #0
1000f0aa:	1c15      	adds	r5, r2, #0
1000f0ac:	1c06      	adds	r6, r0, #0
1000f0ae:	4798      	blx	r3
1000f0b0:	1c3b      	adds	r3, r7, #0
1000f0b2:	2807      	cmp	r0, #7
1000f0b4:	d816      	bhi.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f0b6:	2312      	movs	r3, #18
1000f0b8:	4358      	muls	r0, r3
1000f0ba:	4b0c      	ldr	r3, [pc, #48]	; (1000f0ec <at_ble_encryption_start+0x68>)
1000f0bc:	5cc7      	ldrb	r7, [r0, r3]
1000f0be:	23e0      	movs	r3, #224	; 0xe0
1000f0c0:	2f00      	cmp	r7, #0
1000f0c2:	d10f      	bne.n	1000f0e4 <at_ble_encryption_start+0x60>
1000f0c4:	1c21      	adds	r1, r4, #0
1000f0c6:	221c      	movs	r2, #28
1000f0c8:	4b09      	ldr	r3, [pc, #36]	; (1000f0f0 <at_ble_encryption_start+0x6c>)
1000f0ca:	480a      	ldr	r0, [pc, #40]	; (1000f0f4 <at_ble_encryption_start+0x70>)
1000f0cc:	4798      	blx	r3
1000f0ce:	1c23      	adds	r3, r4, #0
1000f0d0:	7ea1      	ldrb	r1, [r4, #26]
1000f0d2:	8a22      	ldrh	r2, [r4, #16]
1000f0d4:	3312      	adds	r3, #18
1000f0d6:	9100      	str	r1, [sp, #0]
1000f0d8:	9501      	str	r5, [sp, #4]
1000f0da:	1c21      	adds	r1, r4, #0
1000f0dc:	1c30      	adds	r0, r6, #0
1000f0de:	4c06      	ldr	r4, [pc, #24]	; (1000f0f8 <at_ble_encryption_start+0x74>)
1000f0e0:	47a0      	blx	r4
1000f0e2:	1c3b      	adds	r3, r7, #0
1000f0e4:	1c18      	adds	r0, r3, #0
1000f0e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f0e8:	1000f399 	.word	0x1000f399
1000f0ec:	10019606 	.word	0x10019606
1000f0f0:	10014a2f 	.word	0x10014a2f
1000f0f4:	10019714 	.word	0x10019714
1000f0f8:	1000fa15 	.word	0x1000fa15

1000f0fc <at_ble_encryption_request_reply>:
1000f0fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f0fe:	24cf      	movs	r4, #207	; 0xcf
1000f100:	2b00      	cmp	r3, #0
1000f102:	d011      	beq.n	1000f128 <at_ble_encryption_request_reply+0x2c>
1000f104:	2a00      	cmp	r2, #0
1000f106:	d00a      	beq.n	1000f11e <at_ble_encryption_request_reply+0x22>
1000f108:	2905      	cmp	r1, #5
1000f10a:	d80d      	bhi.n	1000f128 <at_ble_encryption_request_reply+0x2c>
1000f10c:	2501      	movs	r5, #1
1000f10e:	2633      	movs	r6, #51	; 0x33
1000f110:	408d      	lsls	r5, r1
1000f112:	4235      	tst	r5, r6
1000f114:	d008      	beq.n	1000f128 <at_ble_encryption_request_reply+0x2c>
1000f116:	7e9d      	ldrb	r5, [r3, #26]
1000f118:	3d07      	subs	r5, #7
1000f11a:	2d09      	cmp	r5, #9
1000f11c:	d804      	bhi.n	1000f128 <at_ble_encryption_request_reply+0x2c>
1000f11e:	7e9c      	ldrb	r4, [r3, #26]
1000f120:	9400      	str	r4, [sp, #0]
1000f122:	4c02      	ldr	r4, [pc, #8]	; (1000f12c <at_ble_encryption_request_reply+0x30>)
1000f124:	47a0      	blx	r4
1000f126:	2400      	movs	r4, #0
1000f128:	1c20      	adds	r0, r4, #0
1000f12a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f12c:	1000fad1 	.word	0x1000fad1

1000f130 <rx_callback>:
1000f130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f132:	8883      	ldrh	r3, [r0, #4]
1000f134:	1c01      	adds	r1, r0, #0
1000f136:	9301      	str	r3, [sp, #4]
1000f138:	88c5      	ldrh	r5, [r0, #6]
1000f13a:	8806      	ldrh	r6, [r0, #0]
1000f13c:	2d00      	cmp	r5, #0
1000f13e:	d10f      	bne.n	1000f160 <rx_callback+0x30>
1000f140:	1c19      	adds	r1, r3, #0
1000f142:	1c30      	adds	r0, r6, #0
1000f144:	4b19      	ldr	r3, [pc, #100]	; (1000f1ac <rx_callback+0x7c>)
1000f146:	1c2a      	adds	r2, r5, #0
1000f148:	4798      	blx	r3
1000f14a:	1e03      	subs	r3, r0, #0
1000f14c:	d105      	bne.n	1000f15a <rx_callback+0x2a>
1000f14e:	1c30      	adds	r0, r6, #0
1000f150:	9901      	ldr	r1, [sp, #4]
1000f152:	1c1a      	adds	r2, r3, #0
1000f154:	4c16      	ldr	r4, [pc, #88]	; (1000f1b0 <rx_callback+0x80>)
1000f156:	47a0      	blx	r4
1000f158:	e027      	b.n	1000f1aa <rx_callback+0x7a>
1000f15a:	4b16      	ldr	r3, [pc, #88]	; (1000f1b4 <rx_callback+0x84>)
1000f15c:	4798      	blx	r3
1000f15e:	e024      	b.n	1000f1aa <rx_callback+0x7a>
1000f160:	4c15      	ldr	r4, [pc, #84]	; (1000f1b8 <rx_callback+0x88>)
1000f162:	4a16      	ldr	r2, [pc, #88]	; (1000f1bc <rx_callback+0x8c>)
1000f164:	6823      	ldr	r3, [r4, #0]
1000f166:	6812      	ldr	r2, [r2, #0]
1000f168:	18eb      	adds	r3, r5, r3
1000f16a:	4293      	cmp	r3, r2
1000f16c:	d901      	bls.n	1000f172 <rx_callback+0x42>
1000f16e:	2300      	movs	r3, #0
1000f170:	6023      	str	r3, [r4, #0]
1000f172:	4f13      	ldr	r7, [pc, #76]	; (1000f1c0 <rx_callback+0x90>)
1000f174:	6822      	ldr	r2, [r4, #0]
1000f176:	683b      	ldr	r3, [r7, #0]
1000f178:	3108      	adds	r1, #8
1000f17a:	1898      	adds	r0, r3, r2
1000f17c:	1c2a      	adds	r2, r5, #0
1000f17e:	4b11      	ldr	r3, [pc, #68]	; (1000f1c4 <rx_callback+0x94>)
1000f180:	4798      	blx	r3
1000f182:	683b      	ldr	r3, [r7, #0]
1000f184:	6822      	ldr	r2, [r4, #0]
1000f186:	1c30      	adds	r0, r6, #0
1000f188:	189a      	adds	r2, r3, r2
1000f18a:	9901      	ldr	r1, [sp, #4]
1000f18c:	4b07      	ldr	r3, [pc, #28]	; (1000f1ac <rx_callback+0x7c>)
1000f18e:	4798      	blx	r3
1000f190:	2800      	cmp	r0, #0
1000f192:	d1e2      	bne.n	1000f15a <rx_callback+0x2a>
1000f194:	6823      	ldr	r3, [r4, #0]
1000f196:	683a      	ldr	r2, [r7, #0]
1000f198:	1c30      	adds	r0, r6, #0
1000f19a:	18d2      	adds	r2, r2, r3
1000f19c:	9901      	ldr	r1, [sp, #4]
1000f19e:	1c2b      	adds	r3, r5, #0
1000f1a0:	4e03      	ldr	r6, [pc, #12]	; (1000f1b0 <rx_callback+0x80>)
1000f1a2:	47b0      	blx	r6
1000f1a4:	6823      	ldr	r3, [r4, #0]
1000f1a6:	18ed      	adds	r5, r5, r3
1000f1a8:	6025      	str	r5, [r4, #0]
1000f1aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f1ac:	1000d839 	.word	0x1000d839
1000f1b0:	1000d7b1 	.word	0x1000d7b1
1000f1b4:	1000d355 	.word	0x1000d355
1000f1b8:	10019770 	.word	0x10019770
1000f1bc:	10018688 	.word	0x10018688
1000f1c0:	10018684 	.word	0x10018684
1000f1c4:	10014a2f 	.word	0x10014a2f

1000f1c8 <interface_send>:
1000f1c8:	b508      	push	{r3, lr}
1000f1ca:	4b02      	ldr	r3, [pc, #8]	; (1000f1d4 <interface_send+0xc>)
1000f1cc:	4798      	blx	r3
1000f1ce:	2000      	movs	r0, #0
1000f1d0:	bd08      	pop	{r3, pc}
1000f1d2:	46c0      	nop			; (mov r8, r8)
1000f1d4:	1000d04d 	.word	0x1000d04d

1000f1d8 <interface_init>:
1000f1d8:	2280      	movs	r2, #128	; 0x80
1000f1da:	b510      	push	{r4, lr}
1000f1dc:	2100      	movs	r1, #0
1000f1de:	1c04      	adds	r4, r0, #0
1000f1e0:	0092      	lsls	r2, r2, #2
1000f1e2:	4b08      	ldr	r3, [pc, #32]	; (1000f204 <interface_init+0x2c>)
1000f1e4:	4808      	ldr	r0, [pc, #32]	; (1000f208 <interface_init+0x30>)
1000f1e6:	4798      	blx	r3
1000f1e8:	2200      	movs	r2, #0
1000f1ea:	4b08      	ldr	r3, [pc, #32]	; (1000f20c <interface_init+0x34>)
1000f1ec:	601a      	str	r2, [r3, #0]
1000f1ee:	4a08      	ldr	r2, [pc, #32]	; (1000f210 <interface_init+0x38>)
1000f1f0:	4b08      	ldr	r3, [pc, #32]	; (1000f214 <interface_init+0x3c>)
1000f1f2:	601a      	str	r2, [r3, #0]
1000f1f4:	4b08      	ldr	r3, [pc, #32]	; (1000f218 <interface_init+0x40>)
1000f1f6:	6922      	ldr	r2, [r4, #16]
1000f1f8:	601a      	str	r2, [r3, #0]
1000f1fa:	6962      	ldr	r2, [r4, #20]
1000f1fc:	4b07      	ldr	r3, [pc, #28]	; (1000f21c <interface_init+0x44>)
1000f1fe:	601a      	str	r2, [r3, #0]
1000f200:	bd10      	pop	{r4, pc}
1000f202:	46c0      	nop			; (mov r8, r8)
1000f204:	10014a41 	.word	0x10014a41
1000f208:	10019974 	.word	0x10019974
1000f20c:	10019770 	.word	0x10019770
1000f210:	10019774 	.word	0x10019774
1000f214:	10016be8 	.word	0x10016be8
1000f218:	10018684 	.word	0x10018684
1000f21c:	10018688 	.word	0x10018688

1000f220 <platform_cmd_cmpl_signal>:
1000f220:	2201      	movs	r2, #1
1000f222:	4b01      	ldr	r3, [pc, #4]	; (1000f228 <platform_cmd_cmpl_signal+0x8>)
1000f224:	601a      	str	r2, [r3, #0]
1000f226:	4770      	bx	lr
1000f228:	1001868c 	.word	0x1001868c

1000f22c <platform_cmd_cmpl_wait>:
1000f22c:	b510      	push	{r4, lr}
1000f22e:	1c04      	adds	r4, r0, #0
1000f230:	4b07      	ldr	r3, [pc, #28]	; (1000f250 <platform_cmd_cmpl_wait+0x24>)
1000f232:	681a      	ldr	r2, [r3, #0]
1000f234:	2a01      	cmp	r2, #1
1000f236:	d003      	beq.n	1000f240 <platform_cmd_cmpl_wait+0x14>
1000f238:	4b06      	ldr	r3, [pc, #24]	; (1000f254 <platform_cmd_cmpl_wait+0x28>)
1000f23a:	2000      	movs	r0, #0
1000f23c:	4798      	blx	r3
1000f23e:	e7f7      	b.n	1000f230 <platform_cmd_cmpl_wait+0x4>
1000f240:	6819      	ldr	r1, [r3, #0]
1000f242:	2901      	cmp	r1, #1
1000f244:	d102      	bne.n	1000f24c <platform_cmd_cmpl_wait+0x20>
1000f246:	2200      	movs	r2, #0
1000f248:	601a      	str	r2, [r3, #0]
1000f24a:	e000      	b.n	1000f24e <platform_cmd_cmpl_wait+0x22>
1000f24c:	7022      	strb	r2, [r4, #0]
1000f24e:	bd10      	pop	{r4, pc}
1000f250:	1001868c 	.word	0x1001868c
1000f254:	1000d0dd 	.word	0x1000d0dd

1000f258 <start_timer>:
1000f258:	4770      	bx	lr

1000f25a <stop_timer>:
1000f25a:	4770      	bx	lr

1000f25c <dbg_le_set_bd_addr_req_handler>:
1000f25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f25e:	466b      	mov	r3, sp
1000f260:	1dde      	adds	r6, r3, #7
1000f262:	2300      	movs	r3, #0
1000f264:	7033      	strb	r3, [r6, #0]
1000f266:	230f      	movs	r3, #15
1000f268:	4c13      	ldr	r4, [pc, #76]	; (1000f2b8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f26a:	2703      	movs	r7, #3
1000f26c:	7023      	strb	r3, [r4, #0]
1000f26e:	2300      	movs	r3, #0
1000f270:	70e3      	strb	r3, [r4, #3]
1000f272:	4b12      	ldr	r3, [pc, #72]	; (1000f2bc <dbg_le_set_bd_addr_req_handler+0x60>)
1000f274:	1c01      	adds	r1, r0, #0
1000f276:	881a      	ldrh	r2, [r3, #0]
1000f278:	881b      	ldrh	r3, [r3, #0]
1000f27a:	7122      	strb	r2, [r4, #4]
1000f27c:	0a1b      	lsrs	r3, r3, #8
1000f27e:	2206      	movs	r2, #6
1000f280:	7163      	strb	r3, [r4, #5]
1000f282:	480f      	ldr	r0, [pc, #60]	; (1000f2c0 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f284:	4b0f      	ldr	r3, [pc, #60]	; (1000f2c4 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f286:	7067      	strb	r7, [r4, #1]
1000f288:	70a7      	strb	r7, [r4, #2]
1000f28a:	4798      	blx	r3
1000f28c:	4d0e      	ldr	r5, [pc, #56]	; (1000f2c8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f28e:	4b0f      	ldr	r3, [pc, #60]	; (1000f2cc <dbg_le_set_bd_addr_req_handler+0x70>)
1000f290:	210e      	movs	r1, #14
1000f292:	802b      	strh	r3, [r5, #0]
1000f294:	2306      	movs	r3, #6
1000f296:	71a3      	strb	r3, [r4, #6]
1000f298:	2300      	movs	r3, #0
1000f29a:	1c20      	adds	r0, r4, #0
1000f29c:	71e3      	strb	r3, [r4, #7]
1000f29e:	4b0c      	ldr	r3, [pc, #48]	; (1000f2d0 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f2a0:	80af      	strh	r7, [r5, #4]
1000f2a2:	4798      	blx	r3
1000f2a4:	1c30      	adds	r0, r6, #0
1000f2a6:	4b0b      	ldr	r3, [pc, #44]	; (1000f2d4 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f2a8:	4798      	blx	r3
1000f2aa:	7833      	ldrb	r3, [r6, #0]
1000f2ac:	20e2      	movs	r0, #226	; 0xe2
1000f2ae:	2b00      	cmp	r3, #0
1000f2b0:	d101      	bne.n	1000f2b6 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f2b2:	68ab      	ldr	r3, [r5, #8]
1000f2b4:	7818      	ldrb	r0, [r3, #0]
1000f2b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f2b8:	10019974 	.word	0x10019974
1000f2bc:	10019604 	.word	0x10019604
1000f2c0:	1001997c 	.word	0x1001997c
1000f2c4:	10014a2f 	.word	0x10014a2f
1000f2c8:	100195f8 	.word	0x100195f8
1000f2cc:	00000329 	.word	0x00000329
1000f2d0:	1000f1c9 	.word	0x1000f1c9
1000f2d4:	1000f22d 	.word	0x1000f22d

1000f2d8 <gapc_get_dev_info_cfm.constprop.1>:
1000f2d8:	b538      	push	{r3, r4, r5, lr}
1000f2da:	230b      	movs	r3, #11
1000f2dc:	4c27      	ldr	r4, [pc, #156]	; (1000f37c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f2de:	7023      	strb	r3, [r4, #0]
1000f2e0:	3303      	adds	r3, #3
1000f2e2:	7063      	strb	r3, [r4, #1]
1000f2e4:	3329      	adds	r3, #41	; 0x29
1000f2e6:	70a3      	strb	r3, [r4, #2]
1000f2e8:	4b25      	ldr	r3, [pc, #148]	; (1000f380 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f2ea:	70e1      	strb	r1, [r4, #3]
1000f2ec:	881a      	ldrh	r2, [r3, #0]
1000f2ee:	881b      	ldrh	r3, [r3, #0]
1000f2f0:	7122      	strb	r2, [r4, #4]
1000f2f2:	0a1b      	lsrs	r3, r3, #8
1000f2f4:	7163      	strb	r3, [r4, #5]
1000f2f6:	2300      	movs	r3, #0
1000f2f8:	7220      	strb	r0, [r4, #8]
1000f2fa:	7263      	strb	r3, [r4, #9]
1000f2fc:	2801      	cmp	r0, #1
1000f2fe:	d02b      	beq.n	1000f358 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f300:	4298      	cmp	r0, r3
1000f302:	d01b      	beq.n	1000f33c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f304:	2802      	cmp	r0, #2
1000f306:	d12f      	bne.n	1000f368 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f308:	4b1e      	ldr	r3, [pc, #120]	; (1000f384 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f30a:	2112      	movs	r1, #18
1000f30c:	1c1a      	adds	r2, r3, #0
1000f30e:	32ce      	adds	r2, #206	; 0xce
1000f310:	8812      	ldrh	r2, [r2, #0]
1000f312:	72a2      	strb	r2, [r4, #10]
1000f314:	0a12      	lsrs	r2, r2, #8
1000f316:	72e2      	strb	r2, [r4, #11]
1000f318:	1c1a      	adds	r2, r3, #0
1000f31a:	32d0      	adds	r2, #208	; 0xd0
1000f31c:	8812      	ldrh	r2, [r2, #0]
1000f31e:	7322      	strb	r2, [r4, #12]
1000f320:	0a12      	lsrs	r2, r2, #8
1000f322:	7362      	strb	r2, [r4, #13]
1000f324:	1c1a      	adds	r2, r3, #0
1000f326:	32d2      	adds	r2, #210	; 0xd2
1000f328:	8812      	ldrh	r2, [r2, #0]
1000f32a:	33d4      	adds	r3, #212	; 0xd4
1000f32c:	73a2      	strb	r2, [r4, #14]
1000f32e:	0a12      	lsrs	r2, r2, #8
1000f330:	73e2      	strb	r2, [r4, #15]
1000f332:	881b      	ldrh	r3, [r3, #0]
1000f334:	7423      	strb	r3, [r4, #16]
1000f336:	0a1b      	lsrs	r3, r3, #8
1000f338:	7463      	strb	r3, [r4, #17]
1000f33a:	e016      	b.n	1000f36a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f33c:	4b11      	ldr	r3, [pc, #68]	; (1000f384 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f33e:	4912      	ldr	r1, [pc, #72]	; (1000f388 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f340:	33aa      	adds	r3, #170	; 0xaa
1000f342:	881d      	ldrh	r5, [r3, #0]
1000f344:	4811      	ldr	r0, [pc, #68]	; (1000f38c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f346:	0a2b      	lsrs	r3, r5, #8
1000f348:	72a5      	strb	r5, [r4, #10]
1000f34a:	72e3      	strb	r3, [r4, #11]
1000f34c:	1c2a      	adds	r2, r5, #0
1000f34e:	4b10      	ldr	r3, [pc, #64]	; (1000f390 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f350:	350c      	adds	r5, #12
1000f352:	4798      	blx	r3
1000f354:	b2a9      	uxth	r1, r5
1000f356:	e008      	b.n	1000f36a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f358:	4b0a      	ldr	r3, [pc, #40]	; (1000f384 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f35a:	210c      	movs	r1, #12
1000f35c:	33cc      	adds	r3, #204	; 0xcc
1000f35e:	881b      	ldrh	r3, [r3, #0]
1000f360:	72a3      	strb	r3, [r4, #10]
1000f362:	0a1b      	lsrs	r3, r3, #8
1000f364:	72e3      	strb	r3, [r4, #11]
1000f366:	e000      	b.n	1000f36a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f368:	210a      	movs	r1, #10
1000f36a:	1c0b      	adds	r3, r1, #0
1000f36c:	3b08      	subs	r3, #8
1000f36e:	71a3      	strb	r3, [r4, #6]
1000f370:	121b      	asrs	r3, r3, #8
1000f372:	71e3      	strb	r3, [r4, #7]
1000f374:	1c20      	adds	r0, r4, #0
1000f376:	4b07      	ldr	r3, [pc, #28]	; (1000f394 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f378:	4798      	blx	r3
1000f37a:	bd38      	pop	{r3, r4, r5, pc}
1000f37c:	10019974 	.word	0x10019974
1000f380:	10019604 	.word	0x10019604
1000f384:	10019696 	.word	0x10019696
1000f388:	10019742 	.word	0x10019742
1000f38c:	10019980 	.word	0x10019980
1000f390:	10014a2f 	.word	0x10014a2f
1000f394:	1000f1c9 	.word	0x1000f1c9

1000f398 <check_ConnData_idx_role>:
1000f398:	4b0c      	ldr	r3, [pc, #48]	; (1000f3cc <check_ConnData_idx_role+0x34>)
1000f39a:	b570      	push	{r4, r5, r6, lr}
1000f39c:	1c04      	adds	r4, r0, #0
1000f39e:	2008      	movs	r0, #8
1000f3a0:	429c      	cmp	r4, r3
1000f3a2:	d011      	beq.n	1000f3c8 <check_ConnData_idx_role+0x30>
1000f3a4:	2300      	movs	r3, #0
1000f3a6:	2212      	movs	r2, #18
1000f3a8:	435a      	muls	r2, r3
1000f3aa:	4d09      	ldr	r5, [pc, #36]	; (1000f3d0 <check_ConnData_idx_role+0x38>)
1000f3ac:	b2d8      	uxtb	r0, r3
1000f3ae:	1956      	adds	r6, r2, r5
1000f3b0:	8976      	ldrh	r6, [r6, #10]
1000f3b2:	42a6      	cmp	r6, r4
1000f3b4:	d104      	bne.n	1000f3c0 <check_ConnData_idx_role+0x28>
1000f3b6:	2900      	cmp	r1, #0
1000f3b8:	d006      	beq.n	1000f3c8 <check_ConnData_idx_role+0x30>
1000f3ba:	5d53      	ldrb	r3, [r2, r5]
1000f3bc:	700b      	strb	r3, [r1, #0]
1000f3be:	e003      	b.n	1000f3c8 <check_ConnData_idx_role+0x30>
1000f3c0:	3301      	adds	r3, #1
1000f3c2:	2b08      	cmp	r3, #8
1000f3c4:	d1ef      	bne.n	1000f3a6 <check_ConnData_idx_role+0xe>
1000f3c6:	1c18      	adds	r0, r3, #0
1000f3c8:	bd70      	pop	{r4, r5, r6, pc}
1000f3ca:	46c0      	nop			; (mov r8, r8)
1000f3cc:	0000ffff 	.word	0x0000ffff
1000f3d0:	10019606 	.word	0x10019606

1000f3d4 <check_ConnData_emptyEntry>:
1000f3d4:	2300      	movs	r3, #0
1000f3d6:	2212      	movs	r2, #18
1000f3d8:	435a      	muls	r2, r3
1000f3da:	4906      	ldr	r1, [pc, #24]	; (1000f3f4 <check_ConnData_emptyEntry+0x20>)
1000f3dc:	b2d8      	uxtb	r0, r3
1000f3de:	1852      	adds	r2, r2, r1
1000f3e0:	8951      	ldrh	r1, [r2, #10]
1000f3e2:	4a05      	ldr	r2, [pc, #20]	; (1000f3f8 <check_ConnData_emptyEntry+0x24>)
1000f3e4:	4291      	cmp	r1, r2
1000f3e6:	d003      	beq.n	1000f3f0 <check_ConnData_emptyEntry+0x1c>
1000f3e8:	3301      	adds	r3, #1
1000f3ea:	2b08      	cmp	r3, #8
1000f3ec:	d1f3      	bne.n	1000f3d6 <check_ConnData_emptyEntry+0x2>
1000f3ee:	1c18      	adds	r0, r3, #0
1000f3f0:	4770      	bx	lr
1000f3f2:	46c0      	nop			; (mov r8, r8)
1000f3f4:	10019606 	.word	0x10019606
1000f3f8:	0000ffff 	.word	0x0000ffff

1000f3fc <gapc_cmp_evt>:
1000f3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f3fe:	780b      	ldrb	r3, [r1, #0]
1000f400:	1c05      	adds	r5, r0, #0
1000f402:	1e58      	subs	r0, r3, #1
1000f404:	784e      	ldrb	r6, [r1, #1]
1000f406:	280f      	cmp	r0, #15
1000f408:	d85a      	bhi.n	1000f4c0 <gapc_cmp_evt+0xc4>
1000f40a:	1c14      	adds	r4, r2, #0
1000f40c:	f002 fc78 	bl	10011d00 <__gnu_thumb1_case_uqi>
1000f410:	5858440a 	.word	0x5858440a
1000f414:	4b584444 	.word	0x4b584444
1000f418:	0825122d 	.word	0x0825122d
1000f41c:	3e395858 	.word	0x3e395858
1000f420:	203b      	movs	r0, #59	; 0x3b
1000f422:	e04e      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f424:	203b      	movs	r0, #59	; 0x3b
1000f426:	2e00      	cmp	r6, #0
1000f428:	d04b      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f42a:	0a2d      	lsrs	r5, r5, #8
1000f42c:	8015      	strh	r5, [r2, #0]
1000f42e:	7096      	strb	r6, [r2, #2]
1000f430:	3835      	subs	r0, #53	; 0x35
1000f432:	e046      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f434:	466b      	mov	r3, sp
1000f436:	1ddf      	adds	r7, r3, #7
1000f438:	2301      	movs	r3, #1
1000f43a:	0a2d      	lsrs	r5, r5, #8
1000f43c:	703b      	strb	r3, [r7, #0]
1000f43e:	1c28      	adds	r0, r5, #0
1000f440:	1c39      	adds	r1, r7, #0
1000f442:	4b20      	ldr	r3, [pc, #128]	; (1000f4c4 <gapc_cmp_evt+0xc8>)
1000f444:	4798      	blx	r3
1000f446:	2807      	cmp	r0, #7
1000f448:	d803      	bhi.n	1000f452 <gapc_cmp_evt+0x56>
1000f44a:	783b      	ldrb	r3, [r7, #0]
1000f44c:	203b      	movs	r0, #59	; 0x3b
1000f44e:	2b00      	cmp	r3, #0
1000f450:	d037      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f452:	8065      	strh	r5, [r4, #2]
1000f454:	7126      	strb	r6, [r4, #4]
1000f456:	2009      	movs	r0, #9
1000f458:	e033      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f45a:	203b      	movs	r0, #59	; 0x3b
1000f45c:	2e00      	cmp	r6, #0
1000f45e:	d030      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f460:	0a2d      	lsrs	r5, r5, #8
1000f462:	8015      	strh	r5, [r2, #0]
1000f464:	7096      	strb	r6, [r2, #2]
1000f466:	382d      	subs	r0, #45	; 0x2d
1000f468:	e02b      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f46a:	203b      	movs	r0, #59	; 0x3b
1000f46c:	2e00      	cmp	r6, #0
1000f46e:	d028      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f470:	2300      	movs	r3, #0
1000f472:	0a2d      	lsrs	r5, r5, #8
1000f474:	8015      	strh	r5, [r2, #0]
1000f476:	7096      	strb	r6, [r2, #2]
1000f478:	8093      	strh	r3, [r2, #4]
1000f47a:	80d3      	strh	r3, [r2, #6]
1000f47c:	8113      	strh	r3, [r2, #8]
1000f47e:	3834      	subs	r0, #52	; 0x34
1000f480:	e01f      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f482:	203b      	movs	r0, #59	; 0x3b
1000f484:	2e00      	cmp	r6, #0
1000f486:	d01c      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f488:	7216      	strb	r6, [r2, #8]
1000f48a:	e003      	b.n	1000f494 <gapc_cmp_evt+0x98>
1000f48c:	203b      	movs	r0, #59	; 0x3b
1000f48e:	2e00      	cmp	r6, #0
1000f490:	d017      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f492:	7116      	strb	r6, [r2, #4]
1000f494:	3812      	subs	r0, #18
1000f496:	e014      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f498:	203b      	movs	r0, #59	; 0x3b
1000f49a:	2e00      	cmp	r6, #0
1000f49c:	d011      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f49e:	7093      	strb	r3, [r2, #2]
1000f4a0:	70d6      	strb	r6, [r2, #3]
1000f4a2:	382a      	subs	r0, #42	; 0x2a
1000f4a4:	e00d      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f4a6:	203b      	movs	r0, #59	; 0x3b
1000f4a8:	2e00      	cmp	r6, #0
1000f4aa:	d00a      	beq.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f4ac:	0a2d      	lsrs	r5, r5, #8
1000f4ae:	7016      	strb	r6, [r2, #0]
1000f4b0:	8055      	strh	r5, [r2, #2]
1000f4b2:	1d10      	adds	r0, r2, #4
1000f4b4:	2100      	movs	r1, #0
1000f4b6:	2205      	movs	r2, #5
1000f4b8:	4b03      	ldr	r3, [pc, #12]	; (1000f4c8 <gapc_cmp_evt+0xcc>)
1000f4ba:	4798      	blx	r3
1000f4bc:	2012      	movs	r0, #18
1000f4be:	e000      	b.n	1000f4c2 <gapc_cmp_evt+0xc6>
1000f4c0:	2000      	movs	r0, #0
1000f4c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f4c4:	1000f399 	.word	0x1000f399
1000f4c8:	10014a41 	.word	0x10014a41

1000f4cc <gapc_connection_cfm_handler>:
1000f4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4ce:	b085      	sub	sp, #20
1000f4d0:	1c1d      	adds	r5, r3, #0
1000f4d2:	ab0a      	add	r3, sp, #40	; 0x28
1000f4d4:	781b      	ldrb	r3, [r3, #0]
1000f4d6:	9201      	str	r2, [sp, #4]
1000f4d8:	9302      	str	r3, [sp, #8]
1000f4da:	ab0b      	add	r3, sp, #44	; 0x2c
1000f4dc:	781b      	ldrb	r3, [r3, #0]
1000f4de:	1c07      	adds	r7, r0, #0
1000f4e0:	9303      	str	r3, [sp, #12]
1000f4e2:	ab0c      	add	r3, sp, #48	; 0x30
1000f4e4:	881a      	ldrh	r2, [r3, #0]
1000f4e6:	2302      	movs	r3, #2
1000f4e8:	1c0e      	adds	r6, r1, #0
1000f4ea:	4c23      	ldr	r4, [pc, #140]	; (1000f578 <gapc_connection_cfm_handler+0xac>)
1000f4ec:	1c39      	adds	r1, r7, #0
1000f4ee:	7023      	strb	r3, [r4, #0]
1000f4f0:	330c      	adds	r3, #12
1000f4f2:	7063      	strb	r3, [r4, #1]
1000f4f4:	70a3      	strb	r3, [r4, #2]
1000f4f6:	4b21      	ldr	r3, [pc, #132]	; (1000f57c <gapc_connection_cfm_handler+0xb0>)
1000f4f8:	70e2      	strb	r2, [r4, #3]
1000f4fa:	881a      	ldrh	r2, [r3, #0]
1000f4fc:	881b      	ldrh	r3, [r3, #0]
1000f4fe:	7122      	strb	r2, [r4, #4]
1000f500:	0a1b      	lsrs	r3, r3, #8
1000f502:	4f1f      	ldr	r7, [pc, #124]	; (1000f580 <gapc_connection_cfm_handler+0xb4>)
1000f504:	2210      	movs	r2, #16
1000f506:	481f      	ldr	r0, [pc, #124]	; (1000f584 <gapc_connection_cfm_handler+0xb8>)
1000f508:	7163      	strb	r3, [r4, #5]
1000f50a:	47b8      	blx	r7
1000f50c:	0a33      	lsrs	r3, r6, #8
1000f50e:	7626      	strb	r6, [r4, #24]
1000f510:	7663      	strb	r3, [r4, #25]
1000f512:	9901      	ldr	r1, [sp, #4]
1000f514:	0c33      	lsrs	r3, r6, #16
1000f516:	2210      	movs	r2, #16
1000f518:	0e36      	lsrs	r6, r6, #24
1000f51a:	481b      	ldr	r0, [pc, #108]	; (1000f588 <gapc_connection_cfm_handler+0xbc>)
1000f51c:	76a3      	strb	r3, [r4, #26]
1000f51e:	76e6      	strb	r6, [r4, #27]
1000f520:	47b8      	blx	r7
1000f522:	1c23      	adds	r3, r4, #0
1000f524:	332c      	adds	r3, #44	; 0x2c
1000f526:	701d      	strb	r5, [r3, #0]
1000f528:	1c23      	adds	r3, r4, #0
1000f52a:	0a2a      	lsrs	r2, r5, #8
1000f52c:	332d      	adds	r3, #45	; 0x2d
1000f52e:	701a      	strb	r2, [r3, #0]
1000f530:	1c23      	adds	r3, r4, #0
1000f532:	0c2a      	lsrs	r2, r5, #16
1000f534:	332e      	adds	r3, #46	; 0x2e
1000f536:	701a      	strb	r2, [r3, #0]
1000f538:	1c23      	adds	r3, r4, #0
1000f53a:	0e2d      	lsrs	r5, r5, #24
1000f53c:	332f      	adds	r3, #47	; 0x2f
1000f53e:	466a      	mov	r2, sp
1000f540:	701d      	strb	r5, [r3, #0]
1000f542:	1c23      	adds	r3, r4, #0
1000f544:	7a12      	ldrb	r2, [r2, #8]
1000f546:	3330      	adds	r3, #48	; 0x30
1000f548:	701a      	strb	r2, [r3, #0]
1000f54a:	1c23      	adds	r3, r4, #0
1000f54c:	2500      	movs	r5, #0
1000f54e:	3331      	adds	r3, #49	; 0x31
1000f550:	466a      	mov	r2, sp
1000f552:	701d      	strb	r5, [r3, #0]
1000f554:	1c23      	adds	r3, r4, #0
1000f556:	7b12      	ldrb	r2, [r2, #12]
1000f558:	3332      	adds	r3, #50	; 0x32
1000f55a:	701a      	strb	r2, [r3, #0]
1000f55c:	1c23      	adds	r3, r4, #0
1000f55e:	3333      	adds	r3, #51	; 0x33
1000f560:	701d      	strb	r5, [r3, #0]
1000f562:	232c      	movs	r3, #44	; 0x2c
1000f564:	1c20      	adds	r0, r4, #0
1000f566:	71a3      	strb	r3, [r4, #6]
1000f568:	2134      	movs	r1, #52	; 0x34
1000f56a:	4b08      	ldr	r3, [pc, #32]	; (1000f58c <gapc_connection_cfm_handler+0xc0>)
1000f56c:	71e5      	strb	r5, [r4, #7]
1000f56e:	4798      	blx	r3
1000f570:	1c28      	adds	r0, r5, #0
1000f572:	b005      	add	sp, #20
1000f574:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f576:	46c0      	nop			; (mov r8, r8)
1000f578:	10019974 	.word	0x10019974
1000f57c:	10019604 	.word	0x10019604
1000f580:	10014a2f 	.word	0x10014a2f
1000f584:	1001997c 	.word	0x1001997c
1000f588:	10019990 	.word	0x10019990
1000f58c:	1000f1c9 	.word	0x1000f1c9

1000f590 <gapc_con_req_ind>:
1000f590:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f592:	7845      	ldrb	r5, [r0, #1]
1000f594:	7803      	ldrb	r3, [r0, #0]
1000f596:	4c30      	ldr	r4, [pc, #192]	; (1000f658 <gapc_con_req_ind+0xc8>)
1000f598:	022d      	lsls	r5, r5, #8
1000f59a:	431d      	orrs	r5, r3
1000f59c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f59e:	78c3      	ldrb	r3, [r0, #3]
1000f5a0:	7882      	ldrb	r2, [r0, #2]
1000f5a2:	b08b      	sub	sp, #44	; 0x2c
1000f5a4:	021b      	lsls	r3, r3, #8
1000f5a6:	431a      	orrs	r2, r3
1000f5a8:	466b      	mov	r3, sp
1000f5aa:	9205      	str	r2, [sp, #20]
1000f5ac:	8a9b      	ldrh	r3, [r3, #20]
1000f5ae:	2120      	movs	r1, #32
1000f5b0:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f5b2:	7943      	ldrb	r3, [r0, #5]
1000f5b4:	7902      	ldrb	r2, [r0, #4]
1000f5b6:	021b      	lsls	r3, r3, #8
1000f5b8:	431a      	orrs	r2, r3
1000f5ba:	466b      	mov	r3, sp
1000f5bc:	9206      	str	r2, [sp, #24]
1000f5be:	8b1b      	ldrh	r3, [r3, #24]
1000f5c0:	1c06      	adds	r6, r0, #0
1000f5c2:	8623      	strh	r3, [r4, #48]	; 0x30
1000f5c4:	79c3      	ldrb	r3, [r0, #7]
1000f5c6:	7982      	ldrb	r2, [r0, #6]
1000f5c8:	021b      	lsls	r3, r3, #8
1000f5ca:	431a      	orrs	r2, r3
1000f5cc:	466b      	mov	r3, sp
1000f5ce:	9207      	str	r2, [sp, #28]
1000f5d0:	466a      	mov	r2, sp
1000f5d2:	8b9b      	ldrh	r3, [r3, #28]
1000f5d4:	1852      	adds	r2, r2, r1
1000f5d6:	8663      	strh	r3, [r4, #50]	; 0x32
1000f5d8:	7a43      	ldrb	r3, [r0, #9]
1000f5da:	1c01      	adds	r1, r0, #0
1000f5dc:	9308      	str	r3, [sp, #32]
1000f5de:	1c23      	adds	r3, r4, #0
1000f5e0:	7812      	ldrb	r2, [r2, #0]
1000f5e2:	3377      	adds	r3, #119	; 0x77
1000f5e4:	3478      	adds	r4, #120	; 0x78
1000f5e6:	701a      	strb	r2, [r3, #0]
1000f5e8:	310a      	adds	r1, #10
1000f5ea:	2206      	movs	r2, #6
1000f5ec:	4b1b      	ldr	r3, [pc, #108]	; (1000f65c <gapc_con_req_ind+0xcc>)
1000f5ee:	1c20      	adds	r0, r4, #0
1000f5f0:	4798      	blx	r3
1000f5f2:	7c33      	ldrb	r3, [r6, #16]
1000f5f4:	9309      	str	r3, [sp, #36]	; 0x24
1000f5f6:	4b1a      	ldr	r3, [pc, #104]	; (1000f660 <gapc_con_req_ind+0xd0>)
1000f5f8:	4798      	blx	r3
1000f5fa:	4e1a      	ldr	r6, [pc, #104]	; (1000f664 <gapc_con_req_ind+0xd4>)
1000f5fc:	1e07      	subs	r7, r0, #0
1000f5fe:	2f07      	cmp	r7, #7
1000f600:	d81b      	bhi.n	1000f63a <gapc_con_req_ind+0xaa>
1000f602:	2312      	movs	r3, #18
1000f604:	4343      	muls	r3, r0
1000f606:	18f0      	adds	r0, r6, r3
1000f608:	8145      	strh	r5, [r0, #10]
1000f60a:	4669      	mov	r1, sp
1000f60c:	2524      	movs	r5, #36	; 0x24
1000f60e:	1949      	adds	r1, r1, r5
1000f610:	7809      	ldrb	r1, [r1, #0]
1000f612:	2206      	movs	r2, #6
1000f614:	54f1      	strb	r1, [r6, r3]
1000f616:	2120      	movs	r1, #32
1000f618:	466b      	mov	r3, sp
1000f61a:	185b      	adds	r3, r3, r1
1000f61c:	781b      	ldrb	r3, [r3, #0]
1000f61e:	1c21      	adds	r1, r4, #0
1000f620:	7043      	strb	r3, [r0, #1]
1000f622:	466b      	mov	r3, sp
1000f624:	8a9b      	ldrh	r3, [r3, #20]
1000f626:	3002      	adds	r0, #2
1000f628:	8143      	strh	r3, [r0, #10]
1000f62a:	466b      	mov	r3, sp
1000f62c:	8b1b      	ldrh	r3, [r3, #24]
1000f62e:	8183      	strh	r3, [r0, #12]
1000f630:	466b      	mov	r3, sp
1000f632:	8b9b      	ldrh	r3, [r3, #28]
1000f634:	81c3      	strh	r3, [r0, #14]
1000f636:	4b09      	ldr	r3, [pc, #36]	; (1000f65c <gapc_con_req_ind+0xcc>)
1000f638:	4798      	blx	r3
1000f63a:	2112      	movs	r1, #18
1000f63c:	2300      	movs	r3, #0
1000f63e:	434f      	muls	r7, r1
1000f640:	9300      	str	r3, [sp, #0]
1000f642:	9301      	str	r3, [sp, #4]
1000f644:	19f6      	adds	r6, r6, r7
1000f646:	8971      	ldrh	r1, [r6, #10]
1000f648:	4a07      	ldr	r2, [pc, #28]	; (1000f668 <gapc_con_req_ind+0xd8>)
1000f64a:	9102      	str	r1, [sp, #8]
1000f64c:	1c10      	adds	r0, r2, #0
1000f64e:	1c19      	adds	r1, r3, #0
1000f650:	4c06      	ldr	r4, [pc, #24]	; (1000f66c <gapc_con_req_ind+0xdc>)
1000f652:	47a0      	blx	r4
1000f654:	b00b      	add	sp, #44	; 0x2c
1000f656:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f658:	10019696 	.word	0x10019696
1000f65c:	10014a2f 	.word	0x10014a2f
1000f660:	1000f3d5 	.word	0x1000f3d5
1000f664:	10019606 	.word	0x10019606
1000f668:	10018690 	.word	0x10018690
1000f66c:	1000f4cd 	.word	0x1000f4cd

1000f670 <gapc_disconnect_cmd_handler>:
1000f670:	2204      	movs	r2, #4
1000f672:	b510      	push	{r4, lr}
1000f674:	4b0c      	ldr	r3, [pc, #48]	; (1000f6a8 <gapc_disconnect_cmd_handler+0x38>)
1000f676:	2400      	movs	r4, #0
1000f678:	701a      	strb	r2, [r3, #0]
1000f67a:	320a      	adds	r2, #10
1000f67c:	705a      	strb	r2, [r3, #1]
1000f67e:	709a      	strb	r2, [r3, #2]
1000f680:	4a0a      	ldr	r2, [pc, #40]	; (1000f6ac <gapc_disconnect_cmd_handler+0x3c>)
1000f682:	70d9      	strb	r1, [r3, #3]
1000f684:	8811      	ldrh	r1, [r2, #0]
1000f686:	8812      	ldrh	r2, [r2, #0]
1000f688:	7119      	strb	r1, [r3, #4]
1000f68a:	0a12      	lsrs	r2, r2, #8
1000f68c:	715a      	strb	r2, [r3, #5]
1000f68e:	2201      	movs	r2, #1
1000f690:	721a      	strb	r2, [r3, #8]
1000f692:	1892      	adds	r2, r2, r2
1000f694:	7258      	strb	r0, [r3, #9]
1000f696:	719a      	strb	r2, [r3, #6]
1000f698:	71dc      	strb	r4, [r3, #7]
1000f69a:	1c18      	adds	r0, r3, #0
1000f69c:	210a      	movs	r1, #10
1000f69e:	4b04      	ldr	r3, [pc, #16]	; (1000f6b0 <gapc_disconnect_cmd_handler+0x40>)
1000f6a0:	4798      	blx	r3
1000f6a2:	1c20      	adds	r0, r4, #0
1000f6a4:	bd10      	pop	{r4, pc}
1000f6a6:	46c0      	nop			; (mov r8, r8)
1000f6a8:	10019974 	.word	0x10019974
1000f6ac:	10019604 	.word	0x10019604
1000f6b0:	1000f1c9 	.word	0x1000f1c9

1000f6b4 <gapc_disconnect_ind>:
1000f6b4:	1c02      	adds	r2, r0, #0
1000f6b6:	b508      	push	{r3, lr}
1000f6b8:	7843      	ldrb	r3, [r0, #1]
1000f6ba:	7800      	ldrb	r0, [r0, #0]
1000f6bc:	021b      	lsls	r3, r3, #8
1000f6be:	4318      	orrs	r0, r3
1000f6c0:	8008      	strh	r0, [r1, #0]
1000f6c2:	7893      	ldrb	r3, [r2, #2]
1000f6c4:	708b      	strb	r3, [r1, #2]
1000f6c6:	2100      	movs	r1, #0
1000f6c8:	4b05      	ldr	r3, [pc, #20]	; (1000f6e0 <gapc_disconnect_ind+0x2c>)
1000f6ca:	4798      	blx	r3
1000f6cc:	2807      	cmp	r0, #7
1000f6ce:	d806      	bhi.n	1000f6de <gapc_disconnect_ind+0x2a>
1000f6d0:	2312      	movs	r3, #18
1000f6d2:	4358      	muls	r0, r3
1000f6d4:	4b03      	ldr	r3, [pc, #12]	; (1000f6e4 <gapc_disconnect_ind+0x30>)
1000f6d6:	1818      	adds	r0, r3, r0
1000f6d8:	2301      	movs	r3, #1
1000f6da:	425b      	negs	r3, r3
1000f6dc:	8143      	strh	r3, [r0, #10]
1000f6de:	bd08      	pop	{r3, pc}
1000f6e0:	1000f399 	.word	0x1000f399
1000f6e4:	10019606 	.word	0x10019606

1000f6e8 <gapc_bond_cmd_handler>:
1000f6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6ea:	9300      	str	r3, [sp, #0]
1000f6ec:	2312      	movs	r3, #18
1000f6ee:	1c04      	adds	r4, r0, #0
1000f6f0:	a808      	add	r0, sp, #32
1000f6f2:	7807      	ldrb	r7, [r0, #0]
1000f6f4:	a809      	add	r0, sp, #36	; 0x24
1000f6f6:	7806      	ldrb	r6, [r0, #0]
1000f6f8:	a80a      	add	r0, sp, #40	; 0x28
1000f6fa:	7805      	ldrb	r5, [r0, #0]
1000f6fc:	a80b      	add	r0, sp, #44	; 0x2c
1000f6fe:	7800      	ldrb	r0, [r0, #0]
1000f700:	9001      	str	r0, [sp, #4]
1000f702:	4810      	ldr	r0, [pc, #64]	; (1000f744 <gapc_bond_cmd_handler+0x5c>)
1000f704:	7003      	strb	r3, [r0, #0]
1000f706:	230e      	movs	r3, #14
1000f708:	70c4      	strb	r4, [r0, #3]
1000f70a:	4c0f      	ldr	r4, [pc, #60]	; (1000f748 <gapc_bond_cmd_handler+0x60>)
1000f70c:	7043      	strb	r3, [r0, #1]
1000f70e:	7083      	strb	r3, [r0, #2]
1000f710:	8823      	ldrh	r3, [r4, #0]
1000f712:	8824      	ldrh	r4, [r4, #0]
1000f714:	7103      	strb	r3, [r0, #4]
1000f716:	466b      	mov	r3, sp
1000f718:	781b      	ldrb	r3, [r3, #0]
1000f71a:	0a24      	lsrs	r4, r4, #8
1000f71c:	72c3      	strb	r3, [r0, #11]
1000f71e:	466b      	mov	r3, sp
1000f720:	791b      	ldrb	r3, [r3, #4]
1000f722:	7144      	strb	r4, [r0, #5]
1000f724:	73c3      	strb	r3, [r0, #15]
1000f726:	2308      	movs	r3, #8
1000f728:	7183      	strb	r3, [r0, #6]
1000f72a:	2300      	movs	r3, #0
1000f72c:	240a      	movs	r4, #10
1000f72e:	7241      	strb	r1, [r0, #9]
1000f730:	71c3      	strb	r3, [r0, #7]
1000f732:	2110      	movs	r1, #16
1000f734:	4b05      	ldr	r3, [pc, #20]	; (1000f74c <gapc_bond_cmd_handler+0x64>)
1000f736:	7307      	strb	r7, [r0, #12]
1000f738:	7346      	strb	r6, [r0, #13]
1000f73a:	7385      	strb	r5, [r0, #14]
1000f73c:	7204      	strb	r4, [r0, #8]
1000f73e:	7282      	strb	r2, [r0, #10]
1000f740:	4798      	blx	r3
1000f742:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f744:	10019974 	.word	0x10019974
1000f748:	10019604 	.word	0x10019604
1000f74c:	1000f1c9 	.word	0x1000f1c9

1000f750 <gapc_bond_ind>:
1000f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f752:	780e      	ldrb	r6, [r1, #0]
1000f754:	1c03      	adds	r3, r0, #0
1000f756:	1eb0      	subs	r0, r6, #2
1000f758:	2805      	cmp	r0, #5
1000f75a:	d85d      	bhi.n	1000f818 <gapc_bond_ind+0xc8>
1000f75c:	1c15      	adds	r5, r2, #0
1000f75e:	1c0c      	adds	r4, r1, #0
1000f760:	f002 face 	bl	10011d00 <__gnu_thumb1_case_uqi>
1000f764:	2f5a030d 	.word	0x2f5a030d
1000f768:	4740      	.short	0x4740
1000f76a:	2009      	movs	r0, #9
1000f76c:	2a00      	cmp	r2, #0
1000f76e:	d054      	beq.n	1000f81a <gapc_bond_ind+0xca>
1000f770:	0a1b      	lsrs	r3, r3, #8
1000f772:	8053      	strh	r3, [r2, #2]
1000f774:	788b      	ldrb	r3, [r1, #2]
1000f776:	4829      	ldr	r0, [pc, #164]	; (1000f81c <gapc_bond_ind+0xcc>)
1000f778:	7113      	strb	r3, [r2, #4]
1000f77a:	2100      	movs	r1, #0
1000f77c:	e01c      	b.n	1000f7b8 <gapc_bond_ind+0x68>
1000f77e:	2009      	movs	r0, #9
1000f780:	2a00      	cmp	r2, #0
1000f782:	d04a      	beq.n	1000f81a <gapc_bond_ind+0xca>
1000f784:	4c25      	ldr	r4, [pc, #148]	; (1000f81c <gapc_bond_ind+0xcc>)
1000f786:	0a1b      	lsrs	r3, r3, #8
1000f788:	8053      	strh	r3, [r2, #2]
1000f78a:	788b      	ldrb	r3, [r1, #2]
1000f78c:	2700      	movs	r7, #0
1000f78e:	1c10      	adds	r0, r2, #0
1000f790:	1c21      	adds	r1, r4, #0
1000f792:	7013      	strb	r3, [r2, #0]
1000f794:	4e22      	ldr	r6, [pc, #136]	; (1000f820 <gapc_bond_ind+0xd0>)
1000f796:	7117      	strb	r7, [r2, #4]
1000f798:	312e      	adds	r1, #46	; 0x2e
1000f79a:	2217      	movs	r2, #23
1000f79c:	3032      	adds	r0, #50	; 0x32
1000f79e:	47b0      	blx	r6
1000f7a0:	1c28      	adds	r0, r5, #0
1000f7a2:	1c21      	adds	r1, r4, #0
1000f7a4:	2210      	movs	r2, #16
1000f7a6:	311e      	adds	r1, #30
1000f7a8:	3022      	adds	r0, #34	; 0x22
1000f7aa:	47b0      	blx	r6
1000f7ac:	1ca1      	adds	r1, r4, #2
1000f7ae:	1da8      	adds	r0, r5, #6
1000f7b0:	221c      	movs	r2, #28
1000f7b2:	47b0      	blx	r6
1000f7b4:	1c20      	adds	r0, r4, #0
1000f7b6:	1c39      	adds	r1, r7, #0
1000f7b8:	2246      	movs	r2, #70	; 0x46
1000f7ba:	4b1a      	ldr	r3, [pc, #104]	; (1000f824 <gapc_bond_ind+0xd4>)
1000f7bc:	4798      	blx	r3
1000f7be:	2009      	movs	r0, #9
1000f7c0:	e02b      	b.n	1000f81a <gapc_bond_ind+0xca>
1000f7c2:	4d16      	ldr	r5, [pc, #88]	; (1000f81c <gapc_bond_ind+0xcc>)
1000f7c4:	3102      	adds	r1, #2
1000f7c6:	1c28      	adds	r0, r5, #0
1000f7c8:	2210      	movs	r2, #16
1000f7ca:	4e15      	ldr	r6, [pc, #84]	; (1000f820 <gapc_bond_ind+0xd0>)
1000f7cc:	302e      	adds	r0, #46	; 0x2e
1000f7ce:	47b0      	blx	r6
1000f7d0:	1c28      	adds	r0, r5, #0
1000f7d2:	1c21      	adds	r1, r4, #0
1000f7d4:	303f      	adds	r0, #63	; 0x3f
1000f7d6:	3112      	adds	r1, #18
1000f7d8:	2206      	movs	r2, #6
1000f7da:	47b0      	blx	r6
1000f7dc:	7e23      	ldrb	r3, [r4, #24]
1000f7de:	353e      	adds	r5, #62	; 0x3e
1000f7e0:	702b      	strb	r3, [r5, #0]
1000f7e2:	e019      	b.n	1000f818 <gapc_bond_ind+0xc8>
1000f7e4:	480d      	ldr	r0, [pc, #52]	; (1000f81c <gapc_bond_ind+0xcc>)
1000f7e6:	3102      	adds	r1, #2
1000f7e8:	2210      	movs	r2, #16
1000f7ea:	4b0d      	ldr	r3, [pc, #52]	; (1000f820 <gapc_bond_ind+0xd0>)
1000f7ec:	301e      	adds	r0, #30
1000f7ee:	4798      	blx	r3
1000f7f0:	e012      	b.n	1000f818 <gapc_bond_ind+0xc8>
1000f7f2:	4d0a      	ldr	r5, [pc, #40]	; (1000f81c <gapc_bond_ind+0xcc>)
1000f7f4:	3102      	adds	r1, #2
1000f7f6:	2210      	movs	r2, #16
1000f7f8:	4e09      	ldr	r6, [pc, #36]	; (1000f820 <gapc_bond_ind+0xd0>)
1000f7fa:	1ca8      	adds	r0, r5, #2
1000f7fc:	47b0      	blx	r6
1000f7fe:	1c28      	adds	r0, r5, #0
1000f800:	1c21      	adds	r1, r4, #0
1000f802:	7ce3      	ldrb	r3, [r4, #19]
1000f804:	7ca2      	ldrb	r2, [r4, #18]
1000f806:	021b      	lsls	r3, r3, #8
1000f808:	4313      	orrs	r3, r2
1000f80a:	3014      	adds	r0, #20
1000f80c:	3114      	adds	r1, #20
1000f80e:	2208      	movs	r2, #8
1000f810:	826b      	strh	r3, [r5, #18]
1000f812:	47b0      	blx	r6
1000f814:	7f23      	ldrb	r3, [r4, #28]
1000f816:	772b      	strb	r3, [r5, #28]
1000f818:	2000      	movs	r0, #0
1000f81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f81c:	100186c0 	.word	0x100186c0
1000f820:	10014a2f 	.word	0x10014a2f
1000f824:	10014a41 	.word	0x10014a41

1000f828 <gapc_bond_req_ind>:
1000f828:	b570      	push	{r4, r5, r6, lr}
1000f82a:	780c      	ldrb	r4, [r1, #0]
1000f82c:	1c03      	adds	r3, r0, #0
1000f82e:	7849      	ldrb	r1, [r1, #1]
1000f830:	2c07      	cmp	r4, #7
1000f832:	d85c      	bhi.n	1000f8ee <gapc_bond_req_ind+0xc6>
1000f834:	1c20      	adds	r0, r4, #0
1000f836:	f002 fa63 	bl	10011d00 <__gnu_thumb1_case_uqi>
1000f83a:	5a04      	.short	0x5a04
1000f83c:	5a0b5a5a 	.word	0x5a0b5a5a
1000f840:	1f1f      	.short	0x1f1f
1000f842:	200a      	movs	r0, #10
1000f844:	2a00      	cmp	r2, #0
1000f846:	d053      	beq.n	1000f8f0 <gapc_bond_req_ind+0xc8>
1000f848:	0a1b      	lsrs	r3, r3, #8
1000f84a:	8013      	strh	r3, [r2, #0]
1000f84c:	7091      	strb	r1, [r2, #2]
1000f84e:	e04f      	b.n	1000f8f0 <gapc_bond_req_ind+0xc8>
1000f850:	2a00      	cmp	r2, #0
1000f852:	d00b      	beq.n	1000f86c <gapc_bond_req_ind+0x44>
1000f854:	0a1b      	lsrs	r3, r3, #8
1000f856:	8013      	strh	r3, [r2, #0]
1000f858:	2900      	cmp	r1, #0
1000f85a:	d102      	bne.n	1000f862 <gapc_bond_req_ind+0x3a>
1000f85c:	2301      	movs	r3, #1
1000f85e:	7093      	strb	r3, [r2, #2]
1000f860:	e004      	b.n	1000f86c <gapc_bond_req_ind+0x44>
1000f862:	2300      	movs	r3, #0
1000f864:	7093      	strb	r3, [r2, #2]
1000f866:	2902      	cmp	r1, #2
1000f868:	d102      	bne.n	1000f870 <gapc_bond_req_ind+0x48>
1000f86a:	70d3      	strb	r3, [r2, #3]
1000f86c:	200c      	movs	r0, #12
1000f86e:	e03f      	b.n	1000f8f0 <gapc_bond_req_ind+0xc8>
1000f870:	2901      	cmp	r1, #1
1000f872:	d1fb      	bne.n	1000f86c <gapc_bond_req_ind+0x44>
1000f874:	70d1      	strb	r1, [r2, #3]
1000f876:	e7f9      	b.n	1000f86c <gapc_bond_req_ind+0x44>
1000f878:	2214      	movs	r2, #20
1000f87a:	481e      	ldr	r0, [pc, #120]	; (1000f8f4 <gapc_bond_req_ind+0xcc>)
1000f87c:	0a1b      	lsrs	r3, r3, #8
1000f87e:	70c3      	strb	r3, [r0, #3]
1000f880:	4b1d      	ldr	r3, [pc, #116]	; (1000f8f8 <gapc_bond_req_ind+0xd0>)
1000f882:	7002      	strb	r2, [r0, #0]
1000f884:	3a06      	subs	r2, #6
1000f886:	7042      	strb	r2, [r0, #1]
1000f888:	7082      	strb	r2, [r0, #2]
1000f88a:	881a      	ldrh	r2, [r3, #0]
1000f88c:	881b      	ldrh	r3, [r3, #0]
1000f88e:	4e1b      	ldr	r6, [pc, #108]	; (1000f8fc <gapc_bond_req_ind+0xd4>)
1000f890:	0a1b      	lsrs	r3, r3, #8
1000f892:	7143      	strb	r3, [r0, #5]
1000f894:	2301      	movs	r3, #1
1000f896:	7102      	strb	r2, [r0, #4]
1000f898:	7204      	strb	r4, [r0, #8]
1000f89a:	7243      	strb	r3, [r0, #9]
1000f89c:	1c05      	adds	r5, r0, #0
1000f89e:	1c31      	adds	r1, r6, #0
1000f8a0:	300a      	adds	r0, #10
1000f8a2:	2c07      	cmp	r4, #7
1000f8a4:	d116      	bne.n	1000f8d4 <gapc_bond_req_ind+0xac>
1000f8a6:	317e      	adds	r1, #126	; 0x7e
1000f8a8:	2210      	movs	r2, #16
1000f8aa:	4c15      	ldr	r4, [pc, #84]	; (1000f900 <gapc_bond_req_ind+0xd8>)
1000f8ac:	47a0      	blx	r4
1000f8ae:	1c33      	adds	r3, r6, #0
1000f8b0:	1c31      	adds	r1, r6, #0
1000f8b2:	1c28      	adds	r0, r5, #0
1000f8b4:	338e      	adds	r3, #142	; 0x8e
1000f8b6:	881b      	ldrh	r3, [r3, #0]
1000f8b8:	3190      	adds	r1, #144	; 0x90
1000f8ba:	76ab      	strb	r3, [r5, #26]
1000f8bc:	2208      	movs	r2, #8
1000f8be:	0a1b      	lsrs	r3, r3, #8
1000f8c0:	301c      	adds	r0, #28
1000f8c2:	76eb      	strb	r3, [r5, #27]
1000f8c4:	47a0      	blx	r4
1000f8c6:	1c31      	adds	r1, r6, #0
1000f8c8:	3198      	adds	r1, #152	; 0x98
1000f8ca:	780a      	ldrb	r2, [r1, #0]
1000f8cc:	1d6b      	adds	r3, r5, #5
1000f8ce:	77da      	strb	r2, [r3, #31]
1000f8d0:	2125      	movs	r1, #37	; 0x25
1000f8d2:	e004      	b.n	1000f8de <gapc_bond_req_ind+0xb6>
1000f8d4:	319a      	adds	r1, #154	; 0x9a
1000f8d6:	2210      	movs	r2, #16
1000f8d8:	4b09      	ldr	r3, [pc, #36]	; (1000f900 <gapc_bond_req_ind+0xd8>)
1000f8da:	4798      	blx	r3
1000f8dc:	211a      	movs	r1, #26
1000f8de:	1c0b      	adds	r3, r1, #0
1000f8e0:	2400      	movs	r4, #0
1000f8e2:	3b08      	subs	r3, #8
1000f8e4:	71ab      	strb	r3, [r5, #6]
1000f8e6:	1c28      	adds	r0, r5, #0
1000f8e8:	4b06      	ldr	r3, [pc, #24]	; (1000f904 <gapc_bond_req_ind+0xdc>)
1000f8ea:	71ec      	strb	r4, [r5, #7]
1000f8ec:	4798      	blx	r3
1000f8ee:	2000      	movs	r0, #0
1000f8f0:	bd70      	pop	{r4, r5, r6, pc}
1000f8f2:	46c0      	nop			; (mov r8, r8)
1000f8f4:	10019974 	.word	0x10019974
1000f8f8:	10019604 	.word	0x10019604
1000f8fc:	10019696 	.word	0x10019696
1000f900:	10014a2f 	.word	0x10014a2f
1000f904:	1000f1c9 	.word	0x1000f1c9

1000f908 <gapc_bond_cfm_handler_pair_resp>:
1000f908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f90a:	b085      	sub	sp, #20
1000f90c:	1c07      	adds	r7, r0, #0
1000f90e:	a80a      	add	r0, sp, #40	; 0x28
1000f910:	7806      	ldrb	r6, [r0, #0]
1000f912:	a80b      	add	r0, sp, #44	; 0x2c
1000f914:	7805      	ldrb	r5, [r0, #0]
1000f916:	a80c      	add	r0, sp, #48	; 0x30
1000f918:	7800      	ldrb	r0, [r0, #0]
1000f91a:	2414      	movs	r4, #20
1000f91c:	9002      	str	r0, [sp, #8]
1000f91e:	a80d      	add	r0, sp, #52	; 0x34
1000f920:	7800      	ldrb	r0, [r0, #0]
1000f922:	9301      	str	r3, [sp, #4]
1000f924:	9003      	str	r0, [sp, #12]
1000f926:	a80e      	add	r0, sp, #56	; 0x38
1000f928:	8800      	ldrh	r0, [r0, #0]
1000f92a:	4684      	mov	ip, r0
1000f92c:	4812      	ldr	r0, [pc, #72]	; (1000f978 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000f92e:	7004      	strb	r4, [r0, #0]
1000f930:	3c06      	subs	r4, #6
1000f932:	7044      	strb	r4, [r0, #1]
1000f934:	7084      	strb	r4, [r0, #2]
1000f936:	4664      	mov	r4, ip
1000f938:	70c4      	strb	r4, [r0, #3]
1000f93a:	4c10      	ldr	r4, [pc, #64]	; (1000f97c <gapc_bond_cfm_handler_pair_resp+0x74>)
1000f93c:	7247      	strb	r7, [r0, #9]
1000f93e:	8823      	ldrh	r3, [r4, #0]
1000f940:	8824      	ldrh	r4, [r4, #0]
1000f942:	7103      	strb	r3, [r0, #4]
1000f944:	466b      	mov	r3, sp
1000f946:	791b      	ldrb	r3, [r3, #4]
1000f948:	0a24      	lsrs	r4, r4, #8
1000f94a:	7303      	strb	r3, [r0, #12]
1000f94c:	466b      	mov	r3, sp
1000f94e:	7a1b      	ldrb	r3, [r3, #8]
1000f950:	7144      	strb	r4, [r0, #5]
1000f952:	73c3      	strb	r3, [r0, #15]
1000f954:	466b      	mov	r3, sp
1000f956:	7b1b      	ldrb	r3, [r3, #12]
1000f958:	2401      	movs	r4, #1
1000f95a:	7403      	strb	r3, [r0, #16]
1000f95c:	2309      	movs	r3, #9
1000f95e:	7183      	strb	r3, [r0, #6]
1000f960:	2300      	movs	r3, #0
1000f962:	7204      	strb	r4, [r0, #8]
1000f964:	7281      	strb	r1, [r0, #10]
1000f966:	72c2      	strb	r2, [r0, #11]
1000f968:	7346      	strb	r6, [r0, #13]
1000f96a:	7385      	strb	r5, [r0, #14]
1000f96c:	71c3      	strb	r3, [r0, #7]
1000f96e:	2111      	movs	r1, #17
1000f970:	4b03      	ldr	r3, [pc, #12]	; (1000f980 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000f972:	4798      	blx	r3
1000f974:	b005      	add	sp, #20
1000f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f978:	10019974 	.word	0x10019974
1000f97c:	10019604 	.word	0x10019604
1000f980:	1000f1c9 	.word	0x1000f1c9

1000f984 <gapc_bond_cfm_handler_key_exch>:
1000f984:	b538      	push	{r3, r4, r5, lr}
1000f986:	2514      	movs	r5, #20
1000f988:	4c0d      	ldr	r4, [pc, #52]	; (1000f9c0 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000f98a:	70e3      	strb	r3, [r4, #3]
1000f98c:	4b0d      	ldr	r3, [pc, #52]	; (1000f9c4 <gapc_bond_cfm_handler_key_exch+0x40>)
1000f98e:	7025      	strb	r5, [r4, #0]
1000f990:	3d06      	subs	r5, #6
1000f992:	7065      	strb	r5, [r4, #1]
1000f994:	70a5      	strb	r5, [r4, #2]
1000f996:	881d      	ldrh	r5, [r3, #0]
1000f998:	881b      	ldrh	r3, [r3, #0]
1000f99a:	7220      	strb	r0, [r4, #8]
1000f99c:	0a1b      	lsrs	r3, r3, #8
1000f99e:	7163      	strb	r3, [r4, #5]
1000f9a0:	7261      	strb	r1, [r4, #9]
1000f9a2:	4b09      	ldr	r3, [pc, #36]	; (1000f9c8 <gapc_bond_cfm_handler_key_exch+0x44>)
1000f9a4:	1c11      	adds	r1, r2, #0
1000f9a6:	4809      	ldr	r0, [pc, #36]	; (1000f9cc <gapc_bond_cfm_handler_key_exch+0x48>)
1000f9a8:	2210      	movs	r2, #16
1000f9aa:	7125      	strb	r5, [r4, #4]
1000f9ac:	4798      	blx	r3
1000f9ae:	2312      	movs	r3, #18
1000f9b0:	71a3      	strb	r3, [r4, #6]
1000f9b2:	2300      	movs	r3, #0
1000f9b4:	1c20      	adds	r0, r4, #0
1000f9b6:	71e3      	strb	r3, [r4, #7]
1000f9b8:	211a      	movs	r1, #26
1000f9ba:	4b05      	ldr	r3, [pc, #20]	; (1000f9d0 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000f9bc:	4798      	blx	r3
1000f9be:	bd38      	pop	{r3, r4, r5, pc}
1000f9c0:	10019974 	.word	0x10019974
1000f9c4:	10019604 	.word	0x10019604
1000f9c8:	10014a2f 	.word	0x10014a2f
1000f9cc:	1001997e 	.word	0x1001997e
1000f9d0:	1000f1c9 	.word	0x1000f1c9

1000f9d4 <gapc_security_cmd_handler>:
1000f9d4:	221a      	movs	r2, #26
1000f9d6:	b508      	push	{r3, lr}
1000f9d8:	4b0b      	ldr	r3, [pc, #44]	; (1000fa08 <gapc_security_cmd_handler+0x34>)
1000f9da:	701a      	strb	r2, [r3, #0]
1000f9dc:	3a0c      	subs	r2, #12
1000f9de:	705a      	strb	r2, [r3, #1]
1000f9e0:	709a      	strb	r2, [r3, #2]
1000f9e2:	4a0a      	ldr	r2, [pc, #40]	; (1000fa0c <gapc_security_cmd_handler+0x38>)
1000f9e4:	70d8      	strb	r0, [r3, #3]
1000f9e6:	8810      	ldrh	r0, [r2, #0]
1000f9e8:	8812      	ldrh	r2, [r2, #0]
1000f9ea:	7118      	strb	r0, [r3, #4]
1000f9ec:	0a12      	lsrs	r2, r2, #8
1000f9ee:	715a      	strb	r2, [r3, #5]
1000f9f0:	220c      	movs	r2, #12
1000f9f2:	721a      	strb	r2, [r3, #8]
1000f9f4:	3a0a      	subs	r2, #10
1000f9f6:	719a      	strb	r2, [r3, #6]
1000f9f8:	2200      	movs	r2, #0
1000f9fa:	7259      	strb	r1, [r3, #9]
1000f9fc:	71da      	strb	r2, [r3, #7]
1000f9fe:	1c18      	adds	r0, r3, #0
1000fa00:	210a      	movs	r1, #10
1000fa02:	4b03      	ldr	r3, [pc, #12]	; (1000fa10 <gapc_security_cmd_handler+0x3c>)
1000fa04:	4798      	blx	r3
1000fa06:	bd08      	pop	{r3, pc}
1000fa08:	10019974 	.word	0x10019974
1000fa0c:	10019604 	.word	0x10019604
1000fa10:	1000f1c9 	.word	0x1000f1c9

1000fa14 <gapc_encrypt_cmd_handler>:
1000fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa16:	2500      	movs	r5, #0
1000fa18:	b089      	sub	sp, #36	; 0x24
1000fa1a:	9306      	str	r3, [sp, #24]
1000fa1c:	ab0e      	add	r3, sp, #56	; 0x38
1000fa1e:	781b      	ldrb	r3, [r3, #0]
1000fa20:	1c17      	adds	r7, r2, #0
1000fa22:	9307      	str	r3, [sp, #28]
1000fa24:	ab0f      	add	r3, sp, #60	; 0x3c
1000fa26:	781b      	ldrb	r3, [r3, #0]
1000fa28:	4a19      	ldr	r2, [pc, #100]	; (1000fa90 <gapc_encrypt_cmd_handler+0x7c>)
1000fa2a:	1c06      	adds	r6, r0, #0
1000fa2c:	9105      	str	r1, [sp, #20]
1000fa2e:	9300      	str	r3, [sp, #0]
1000fa30:	9002      	str	r0, [sp, #8]
1000fa32:	1c29      	adds	r1, r5, #0
1000fa34:	1c2b      	adds	r3, r5, #0
1000fa36:	9501      	str	r5, [sp, #4]
1000fa38:	1c10      	adds	r0, r2, #0
1000fa3a:	4c16      	ldr	r4, [pc, #88]	; (1000fa94 <gapc_encrypt_cmd_handler+0x80>)
1000fa3c:	47a0      	blx	r4
1000fa3e:	2316      	movs	r3, #22
1000fa40:	4c15      	ldr	r4, [pc, #84]	; (1000fa98 <gapc_encrypt_cmd_handler+0x84>)
1000fa42:	9905      	ldr	r1, [sp, #20]
1000fa44:	7023      	strb	r3, [r4, #0]
1000fa46:	3b08      	subs	r3, #8
1000fa48:	7063      	strb	r3, [r4, #1]
1000fa4a:	70a3      	strb	r3, [r4, #2]
1000fa4c:	4b13      	ldr	r3, [pc, #76]	; (1000fa9c <gapc_encrypt_cmd_handler+0x88>)
1000fa4e:	70e6      	strb	r6, [r4, #3]
1000fa50:	881a      	ldrh	r2, [r3, #0]
1000fa52:	881b      	ldrh	r3, [r3, #0]
1000fa54:	7122      	strb	r2, [r4, #4]
1000fa56:	0a1b      	lsrs	r3, r3, #8
1000fa58:	7163      	strb	r3, [r4, #5]
1000fa5a:	230b      	movs	r3, #11
1000fa5c:	4e10      	ldr	r6, [pc, #64]	; (1000faa0 <gapc_encrypt_cmd_handler+0x8c>)
1000fa5e:	2210      	movs	r2, #16
1000fa60:	4810      	ldr	r0, [pc, #64]	; (1000faa4 <gapc_encrypt_cmd_handler+0x90>)
1000fa62:	7223      	strb	r3, [r4, #8]
1000fa64:	7265      	strb	r5, [r4, #9]
1000fa66:	47b0      	blx	r6
1000fa68:	0a3b      	lsrs	r3, r7, #8
1000fa6a:	9906      	ldr	r1, [sp, #24]
1000fa6c:	2208      	movs	r2, #8
1000fa6e:	480e      	ldr	r0, [pc, #56]	; (1000faa8 <gapc_encrypt_cmd_handler+0x94>)
1000fa70:	76e3      	strb	r3, [r4, #27]
1000fa72:	76a7      	strb	r7, [r4, #26]
1000fa74:	47b0      	blx	r6
1000fa76:	466a      	mov	r2, sp
1000fa78:	7f12      	ldrb	r2, [r2, #28]
1000fa7a:	1d63      	adds	r3, r4, #5
1000fa7c:	77da      	strb	r2, [r3, #31]
1000fa7e:	231d      	movs	r3, #29
1000fa80:	1c20      	adds	r0, r4, #0
1000fa82:	71a3      	strb	r3, [r4, #6]
1000fa84:	2125      	movs	r1, #37	; 0x25
1000fa86:	4b09      	ldr	r3, [pc, #36]	; (1000faac <gapc_encrypt_cmd_handler+0x98>)
1000fa88:	71e5      	strb	r5, [r4, #7]
1000fa8a:	4798      	blx	r3
1000fa8c:	b009      	add	sp, #36	; 0x24
1000fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa90:	100186a0 	.word	0x100186a0
1000fa94:	1000f4cd 	.word	0x1000f4cd
1000fa98:	10019974 	.word	0x10019974
1000fa9c:	10019604 	.word	0x10019604
1000faa0:	10014a2f 	.word	0x10014a2f
1000faa4:	1001997e 	.word	0x1001997e
1000faa8:	10019990 	.word	0x10019990
1000faac:	1000f1c9 	.word	0x1000f1c9

1000fab0 <gapc_encrypt_req_ind>:
1000fab0:	b508      	push	{r3, lr}
1000fab2:	0a00      	lsrs	r0, r0, #8
1000fab4:	8010      	strh	r0, [r2, #0]
1000fab6:	784b      	ldrb	r3, [r1, #1]
1000fab8:	7808      	ldrb	r0, [r1, #0]
1000faba:	021b      	lsls	r3, r3, #8
1000fabc:	4303      	orrs	r3, r0
1000fabe:	8053      	strh	r3, [r2, #2]
1000fac0:	1d10      	adds	r0, r2, #4
1000fac2:	3102      	adds	r1, #2
1000fac4:	2208      	movs	r2, #8
1000fac6:	4b01      	ldr	r3, [pc, #4]	; (1000facc <gapc_encrypt_req_ind+0x1c>)
1000fac8:	4798      	blx	r3
1000faca:	bd08      	pop	{r3, pc}
1000facc:	10014a2f 	.word	0x10014a2f

1000fad0 <gapc_encrypt_cfm_handler>:
1000fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fad2:	2500      	movs	r5, #0
1000fad4:	b087      	sub	sp, #28
1000fad6:	9304      	str	r3, [sp, #16]
1000fad8:	ab0c      	add	r3, sp, #48	; 0x30
1000fada:	781b      	ldrb	r3, [r3, #0]
1000fadc:	1c17      	adds	r7, r2, #0
1000fade:	4a15      	ldr	r2, [pc, #84]	; (1000fb34 <gapc_encrypt_cfm_handler+0x64>)
1000fae0:	1c06      	adds	r6, r0, #0
1000fae2:	9305      	str	r3, [sp, #20]
1000fae4:	9100      	str	r1, [sp, #0]
1000fae6:	9002      	str	r0, [sp, #8]
1000fae8:	1c29      	adds	r1, r5, #0
1000faea:	1c2b      	adds	r3, r5, #0
1000faec:	9501      	str	r5, [sp, #4]
1000faee:	1c10      	adds	r0, r2, #0
1000faf0:	4c11      	ldr	r4, [pc, #68]	; (1000fb38 <gapc_encrypt_cfm_handler+0x68>)
1000faf2:	47a0      	blx	r4
1000faf4:	2318      	movs	r3, #24
1000faf6:	4c11      	ldr	r4, [pc, #68]	; (1000fb3c <gapc_encrypt_cfm_handler+0x6c>)
1000faf8:	9904      	ldr	r1, [sp, #16]
1000fafa:	7023      	strb	r3, [r4, #0]
1000fafc:	3b0a      	subs	r3, #10
1000fafe:	7063      	strb	r3, [r4, #1]
1000fb00:	70a3      	strb	r3, [r4, #2]
1000fb02:	4b0f      	ldr	r3, [pc, #60]	; (1000fb40 <gapc_encrypt_cfm_handler+0x70>)
1000fb04:	480f      	ldr	r0, [pc, #60]	; (1000fb44 <gapc_encrypt_cfm_handler+0x74>)
1000fb06:	881a      	ldrh	r2, [r3, #0]
1000fb08:	881b      	ldrh	r3, [r3, #0]
1000fb0a:	7122      	strb	r2, [r4, #4]
1000fb0c:	0a1b      	lsrs	r3, r3, #8
1000fb0e:	7163      	strb	r3, [r4, #5]
1000fb10:	2210      	movs	r2, #16
1000fb12:	4b0d      	ldr	r3, [pc, #52]	; (1000fb48 <gapc_encrypt_cfm_handler+0x78>)
1000fb14:	70e6      	strb	r6, [r4, #3]
1000fb16:	7227      	strb	r7, [r4, #8]
1000fb18:	4798      	blx	r3
1000fb1a:	466b      	mov	r3, sp
1000fb1c:	7d1b      	ldrb	r3, [r3, #20]
1000fb1e:	1c20      	adds	r0, r4, #0
1000fb20:	7663      	strb	r3, [r4, #25]
1000fb22:	2312      	movs	r3, #18
1000fb24:	211a      	movs	r1, #26
1000fb26:	71a3      	strb	r3, [r4, #6]
1000fb28:	4b08      	ldr	r3, [pc, #32]	; (1000fb4c <gapc_encrypt_cfm_handler+0x7c>)
1000fb2a:	71e5      	strb	r5, [r4, #7]
1000fb2c:	4798      	blx	r3
1000fb2e:	b007      	add	sp, #28
1000fb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb32:	46c0      	nop			; (mov r8, r8)
1000fb34:	100186b0 	.word	0x100186b0
1000fb38:	1000f4cd 	.word	0x1000f4cd
1000fb3c:	10019974 	.word	0x10019974
1000fb40:	10019604 	.word	0x10019604
1000fb44:	1001997d 	.word	0x1001997d
1000fb48:	10014a2f 	.word	0x10014a2f
1000fb4c:	1000f1c9 	.word	0x1000f1c9

1000fb50 <gapc_encrypt_ind>:
1000fb50:	780b      	ldrb	r3, [r1, #0]
1000fb52:	0a00      	lsrs	r0, r0, #8
1000fb54:	70d3      	strb	r3, [r2, #3]
1000fb56:	2300      	movs	r3, #0
1000fb58:	8010      	strh	r0, [r2, #0]
1000fb5a:	7093      	strb	r3, [r2, #2]
1000fb5c:	4770      	bx	lr
	...

1000fb60 <gapc_param_update_cfm_handler>:
1000fb60:	b538      	push	{r3, r4, r5, lr}
1000fb62:	2410      	movs	r4, #16
1000fb64:	1c05      	adds	r5, r0, #0
1000fb66:	480e      	ldr	r0, [pc, #56]	; (1000fba0 <gapc_param_update_cfm_handler+0x40>)
1000fb68:	7004      	strb	r4, [r0, #0]
1000fb6a:	3c02      	subs	r4, #2
1000fb6c:	7044      	strb	r4, [r0, #1]
1000fb6e:	7084      	strb	r4, [r0, #2]
1000fb70:	4c0c      	ldr	r4, [pc, #48]	; (1000fba4 <gapc_param_update_cfm_handler+0x44>)
1000fb72:	70c5      	strb	r5, [r0, #3]
1000fb74:	8825      	ldrh	r5, [r4, #0]
1000fb76:	8824      	ldrh	r4, [r4, #0]
1000fb78:	72c3      	strb	r3, [r0, #11]
1000fb7a:	0a1b      	lsrs	r3, r3, #8
1000fb7c:	0a24      	lsrs	r4, r4, #8
1000fb7e:	7303      	strb	r3, [r0, #12]
1000fb80:	2305      	movs	r3, #5
1000fb82:	7144      	strb	r4, [r0, #5]
1000fb84:	2400      	movs	r4, #0
1000fb86:	7201      	strb	r1, [r0, #8]
1000fb88:	7242      	strb	r2, [r0, #9]
1000fb8a:	7183      	strb	r3, [r0, #6]
1000fb8c:	0a12      	lsrs	r2, r2, #8
1000fb8e:	210d      	movs	r1, #13
1000fb90:	4b05      	ldr	r3, [pc, #20]	; (1000fba8 <gapc_param_update_cfm_handler+0x48>)
1000fb92:	7105      	strb	r5, [r0, #4]
1000fb94:	7282      	strb	r2, [r0, #10]
1000fb96:	71c4      	strb	r4, [r0, #7]
1000fb98:	4798      	blx	r3
1000fb9a:	1c20      	adds	r0, r4, #0
1000fb9c:	bd38      	pop	{r3, r4, r5, pc}
1000fb9e:	46c0      	nop			; (mov r8, r8)
1000fba0:	10019974 	.word	0x10019974
1000fba4:	10019604 	.word	0x10019604
1000fba8:	1000f1c9 	.word	0x1000f1c9

1000fbac <gapc_param_updated_ind>:
1000fbac:	2300      	movs	r3, #0
1000fbae:	0a00      	lsrs	r0, r0, #8
1000fbb0:	8010      	strh	r0, [r2, #0]
1000fbb2:	7093      	strb	r3, [r2, #2]
1000fbb4:	784b      	ldrb	r3, [r1, #1]
1000fbb6:	7808      	ldrb	r0, [r1, #0]
1000fbb8:	021b      	lsls	r3, r3, #8
1000fbba:	4303      	orrs	r3, r0
1000fbbc:	8093      	strh	r3, [r2, #4]
1000fbbe:	78cb      	ldrb	r3, [r1, #3]
1000fbc0:	7888      	ldrb	r0, [r1, #2]
1000fbc2:	021b      	lsls	r3, r3, #8
1000fbc4:	4303      	orrs	r3, r0
1000fbc6:	80d3      	strh	r3, [r2, #6]
1000fbc8:	794b      	ldrb	r3, [r1, #5]
1000fbca:	7909      	ldrb	r1, [r1, #4]
1000fbcc:	021b      	lsls	r3, r3, #8
1000fbce:	430b      	orrs	r3, r1
1000fbd0:	2007      	movs	r0, #7
1000fbd2:	8113      	strh	r3, [r2, #8]
1000fbd4:	4770      	bx	lr

1000fbd6 <gapc_param_updated_req_ind>:
1000fbd6:	0a00      	lsrs	r0, r0, #8
1000fbd8:	8010      	strh	r0, [r2, #0]
1000fbda:	784b      	ldrb	r3, [r1, #1]
1000fbdc:	7808      	ldrb	r0, [r1, #0]
1000fbde:	021b      	lsls	r3, r3, #8
1000fbe0:	4303      	orrs	r3, r0
1000fbe2:	8053      	strh	r3, [r2, #2]
1000fbe4:	78cb      	ldrb	r3, [r1, #3]
1000fbe6:	7888      	ldrb	r0, [r1, #2]
1000fbe8:	021b      	lsls	r3, r3, #8
1000fbea:	4303      	orrs	r3, r0
1000fbec:	8093      	strh	r3, [r2, #4]
1000fbee:	794b      	ldrb	r3, [r1, #5]
1000fbf0:	7908      	ldrb	r0, [r1, #4]
1000fbf2:	021b      	lsls	r3, r3, #8
1000fbf4:	4303      	orrs	r3, r0
1000fbf6:	80d3      	strh	r3, [r2, #6]
1000fbf8:	79cb      	ldrb	r3, [r1, #7]
1000fbfa:	7989      	ldrb	r1, [r1, #6]
1000fbfc:	021b      	lsls	r3, r3, #8
1000fbfe:	430b      	orrs	r3, r1
1000fc00:	2008      	movs	r0, #8
1000fc02:	8113      	strh	r3, [r2, #8]
1000fc04:	4770      	bx	lr
	...

1000fc08 <gapc_dev_info_req_ind_handler>:
1000fc08:	b508      	push	{r3, lr}
1000fc0a:	1c0b      	adds	r3, r1, #0
1000fc0c:	0a01      	lsrs	r1, r0, #8
1000fc0e:	8011      	strh	r1, [r2, #0]
1000fc10:	7818      	ldrb	r0, [r3, #0]
1000fc12:	7090      	strb	r0, [r2, #2]
1000fc14:	2800      	cmp	r0, #0
1000fc16:	d104      	bne.n	1000fc22 <gapc_dev_info_req_ind_handler+0x1a>
1000fc18:	4b03      	ldr	r3, [pc, #12]	; (1000fc28 <gapc_dev_info_req_ind_handler+0x20>)
1000fc1a:	33aa      	adds	r3, #170	; 0xaa
1000fc1c:	881b      	ldrh	r3, [r3, #0]
1000fc1e:	2b00      	cmp	r3, #0
1000fc20:	d001      	beq.n	1000fc26 <gapc_dev_info_req_ind_handler+0x1e>
1000fc22:	4b02      	ldr	r3, [pc, #8]	; (1000fc2c <gapc_dev_info_req_ind_handler+0x24>)
1000fc24:	4798      	blx	r3
1000fc26:	bd08      	pop	{r3, pc}
1000fc28:	10019696 	.word	0x10019696
1000fc2c:	1000f2d9 	.word	0x1000f2d9

1000fc30 <gapc_sec_req_ind>:
1000fc30:	0a00      	lsrs	r0, r0, #8
1000fc32:	8010      	strh	r0, [r2, #0]
1000fc34:	7809      	ldrb	r1, [r1, #0]
1000fc36:	2301      	movs	r3, #1
1000fc38:	1c08      	adds	r0, r1, #0
1000fc3a:	0889      	lsrs	r1, r1, #2
1000fc3c:	4018      	ands	r0, r3
1000fc3e:	400b      	ands	r3, r1
1000fc40:	70d0      	strb	r0, [r2, #3]
1000fc42:	7113      	strb	r3, [r2, #4]
1000fc44:	4770      	bx	lr

1000fc46 <gapc_sign_counter_ind_handler>:
1000fc46:	0a00      	lsrs	r0, r0, #8
1000fc48:	8010      	strh	r0, [r2, #0]
1000fc4a:	784b      	ldrb	r3, [r1, #1]
1000fc4c:	0218      	lsls	r0, r3, #8
1000fc4e:	788b      	ldrb	r3, [r1, #2]
1000fc50:	041b      	lsls	r3, r3, #16
1000fc52:	4303      	orrs	r3, r0
1000fc54:	7808      	ldrb	r0, [r1, #0]
1000fc56:	4303      	orrs	r3, r0
1000fc58:	78c8      	ldrb	r0, [r1, #3]
1000fc5a:	0600      	lsls	r0, r0, #24
1000fc5c:	4303      	orrs	r3, r0
1000fc5e:	6053      	str	r3, [r2, #4]
1000fc60:	794b      	ldrb	r3, [r1, #5]
1000fc62:	0218      	lsls	r0, r3, #8
1000fc64:	798b      	ldrb	r3, [r1, #6]
1000fc66:	041b      	lsls	r3, r3, #16
1000fc68:	4303      	orrs	r3, r0
1000fc6a:	7908      	ldrb	r0, [r1, #4]
1000fc6c:	79c9      	ldrb	r1, [r1, #7]
1000fc6e:	4303      	orrs	r3, r0
1000fc70:	0609      	lsls	r1, r1, #24
1000fc72:	430b      	orrs	r3, r1
1000fc74:	2000      	movs	r0, #0
1000fc76:	6093      	str	r3, [r2, #8]
1000fc78:	4770      	bx	lr
	...

1000fc7c <gapc_peer_att_info_ind_handler>:
1000fc7c:	b510      	push	{r4, lr}
1000fc7e:	0a00      	lsrs	r0, r0, #8
1000fc80:	8010      	strh	r0, [r2, #0]
1000fc82:	7808      	ldrb	r0, [r1, #0]
1000fc84:	7090      	strb	r0, [r2, #2]
1000fc86:	788b      	ldrb	r3, [r1, #2]
1000fc88:	784c      	ldrb	r4, [r1, #1]
1000fc8a:	021b      	lsls	r3, r3, #8
1000fc8c:	4323      	orrs	r3, r4
1000fc8e:	8093      	strh	r3, [r2, #4]
1000fc90:	2801      	cmp	r0, #1
1000fc92:	d027      	beq.n	1000fce4 <gapc_peer_att_info_ind_handler+0x68>
1000fc94:	2800      	cmp	r0, #0
1000fc96:	d017      	beq.n	1000fcc8 <gapc_peer_att_info_ind_handler+0x4c>
1000fc98:	2802      	cmp	r0, #2
1000fc9a:	d12a      	bne.n	1000fcf2 <gapc_peer_att_info_ind_handler+0x76>
1000fc9c:	790b      	ldrb	r3, [r1, #4]
1000fc9e:	78c8      	ldrb	r0, [r1, #3]
1000fca0:	021b      	lsls	r3, r3, #8
1000fca2:	4303      	orrs	r3, r0
1000fca4:	8113      	strh	r3, [r2, #8]
1000fca6:	798b      	ldrb	r3, [r1, #6]
1000fca8:	7948      	ldrb	r0, [r1, #5]
1000fcaa:	021b      	lsls	r3, r3, #8
1000fcac:	4303      	orrs	r3, r0
1000fcae:	80d3      	strh	r3, [r2, #6]
1000fcb0:	7a0b      	ldrb	r3, [r1, #8]
1000fcb2:	79c8      	ldrb	r0, [r1, #7]
1000fcb4:	021b      	lsls	r3, r3, #8
1000fcb6:	4303      	orrs	r3, r0
1000fcb8:	8193      	strh	r3, [r2, #12]
1000fcba:	7a8b      	ldrb	r3, [r1, #10]
1000fcbc:	7a49      	ldrb	r1, [r1, #9]
1000fcbe:	021b      	lsls	r3, r3, #8
1000fcc0:	430b      	orrs	r3, r1
1000fcc2:	8153      	strh	r3, [r2, #10]
1000fcc4:	2306      	movs	r3, #6
1000fcc6:	e013      	b.n	1000fcf0 <gapc_peer_att_info_ind_handler+0x74>
1000fcc8:	1c14      	adds	r4, r2, #0
1000fcca:	1c20      	adds	r0, r4, #0
1000fccc:	790a      	ldrb	r2, [r1, #4]
1000fcce:	78cb      	ldrb	r3, [r1, #3]
1000fcd0:	0212      	lsls	r2, r2, #8
1000fcd2:	431a      	orrs	r2, r3
1000fcd4:	80e2      	strh	r2, [r4, #6]
1000fcd6:	4b07      	ldr	r3, [pc, #28]	; (1000fcf4 <gapc_peer_att_info_ind_handler+0x78>)
1000fcd8:	3008      	adds	r0, #8
1000fcda:	3105      	adds	r1, #5
1000fcdc:	4798      	blx	r3
1000fcde:	2302      	movs	r3, #2
1000fce0:	70a3      	strb	r3, [r4, #2]
1000fce2:	e006      	b.n	1000fcf2 <gapc_peer_att_info_ind_handler+0x76>
1000fce4:	790b      	ldrb	r3, [r1, #4]
1000fce6:	78c9      	ldrb	r1, [r1, #3]
1000fce8:	021b      	lsls	r3, r3, #8
1000fcea:	430b      	orrs	r3, r1
1000fcec:	80d3      	strh	r3, [r2, #6]
1000fcee:	2305      	movs	r3, #5
1000fcf0:	7093      	strb	r3, [r2, #2]
1000fcf2:	bd10      	pop	{r4, pc}
1000fcf4:	10014a2f 	.word	0x10014a2f

1000fcf8 <gapc_con_channel_map_ind_handler>:
1000fcf8:	b508      	push	{r3, lr}
1000fcfa:	2300      	movs	r3, #0
1000fcfc:	0a00      	lsrs	r0, r0, #8
1000fcfe:	7013      	strb	r3, [r2, #0]
1000fd00:	8050      	strh	r0, [r2, #2]
1000fd02:	4b02      	ldr	r3, [pc, #8]	; (1000fd0c <gapc_con_channel_map_ind_handler+0x14>)
1000fd04:	1d10      	adds	r0, r2, #4
1000fd06:	2205      	movs	r2, #5
1000fd08:	4798      	blx	r3
1000fd0a:	bd08      	pop	{r3, pc}
1000fd0c:	10014a2f 	.word	0x10014a2f

1000fd10 <gapc_lecb_connected>:
1000fd10:	7843      	ldrb	r3, [r0, #1]
1000fd12:	7802      	ldrb	r2, [r0, #0]
1000fd14:	021b      	lsls	r3, r3, #8
1000fd16:	4313      	orrs	r3, r2
1000fd18:	800b      	strh	r3, [r1, #0]
1000fd1a:	78c3      	ldrb	r3, [r0, #3]
1000fd1c:	7882      	ldrb	r2, [r0, #2]
1000fd1e:	021b      	lsls	r3, r3, #8
1000fd20:	4313      	orrs	r3, r2
1000fd22:	804b      	strh	r3, [r1, #2]
1000fd24:	7943      	ldrb	r3, [r0, #5]
1000fd26:	7902      	ldrb	r2, [r0, #4]
1000fd28:	021b      	lsls	r3, r3, #8
1000fd2a:	4313      	orrs	r3, r2
1000fd2c:	808b      	strh	r3, [r1, #4]
1000fd2e:	79c3      	ldrb	r3, [r0, #7]
1000fd30:	7982      	ldrb	r2, [r0, #6]
1000fd32:	021b      	lsls	r3, r3, #8
1000fd34:	4313      	orrs	r3, r2
1000fd36:	80cb      	strh	r3, [r1, #6]
1000fd38:	2300      	movs	r3, #0
1000fd3a:	720b      	strb	r3, [r1, #8]
1000fd3c:	4770      	bx	lr

1000fd3e <gapc_lecb_disconnected>:
1000fd3e:	7843      	ldrb	r3, [r0, #1]
1000fd40:	7802      	ldrb	r2, [r0, #0]
1000fd42:	021b      	lsls	r3, r3, #8
1000fd44:	4313      	orrs	r3, r2
1000fd46:	800b      	strh	r3, [r1, #0]
1000fd48:	78c3      	ldrb	r3, [r0, #3]
1000fd4a:	7882      	ldrb	r2, [r0, #2]
1000fd4c:	021b      	lsls	r3, r3, #8
1000fd4e:	4313      	orrs	r3, r2
1000fd50:	804b      	strh	r3, [r1, #2]
1000fd52:	4770      	bx	lr

1000fd54 <gapc_lecb_connect_req_ind>:
1000fd54:	7843      	ldrb	r3, [r0, #1]
1000fd56:	7802      	ldrb	r2, [r0, #0]
1000fd58:	021b      	lsls	r3, r3, #8
1000fd5a:	4313      	orrs	r3, r2
1000fd5c:	800b      	strh	r3, [r1, #0]
1000fd5e:	78c3      	ldrb	r3, [r0, #3]
1000fd60:	7882      	ldrb	r2, [r0, #2]
1000fd62:	021b      	lsls	r3, r3, #8
1000fd64:	4313      	orrs	r3, r2
1000fd66:	804b      	strh	r3, [r1, #2]
1000fd68:	7943      	ldrb	r3, [r0, #5]
1000fd6a:	7902      	ldrb	r2, [r0, #4]
1000fd6c:	021b      	lsls	r3, r3, #8
1000fd6e:	4313      	orrs	r3, r2
1000fd70:	808b      	strh	r3, [r1, #4]
1000fd72:	79c3      	ldrb	r3, [r0, #7]
1000fd74:	7982      	ldrb	r2, [r0, #6]
1000fd76:	021b      	lsls	r3, r3, #8
1000fd78:	4313      	orrs	r3, r2
1000fd7a:	80cb      	strh	r3, [r1, #6]
1000fd7c:	4770      	bx	lr

1000fd7e <gapc_lecb_add_credit_resp_handler>:
1000fd7e:	7843      	ldrb	r3, [r0, #1]
1000fd80:	7802      	ldrb	r2, [r0, #0]
1000fd82:	021b      	lsls	r3, r3, #8
1000fd84:	4313      	orrs	r3, r2
1000fd86:	800b      	strh	r3, [r1, #0]
1000fd88:	78c3      	ldrb	r3, [r0, #3]
1000fd8a:	7882      	ldrb	r2, [r0, #2]
1000fd8c:	021b      	lsls	r3, r3, #8
1000fd8e:	4313      	orrs	r3, r2
1000fd90:	804b      	strh	r3, [r1, #2]
1000fd92:	7943      	ldrb	r3, [r0, #5]
1000fd94:	7902      	ldrb	r2, [r0, #4]
1000fd96:	021b      	lsls	r3, r3, #8
1000fd98:	4313      	orrs	r3, r2
1000fd9a:	808b      	strh	r3, [r1, #4]
1000fd9c:	4770      	bx	lr
	...

1000fda0 <gapm_reset_req_handler>:
1000fda0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fda2:	466b      	mov	r3, sp
1000fda4:	4915      	ldr	r1, [pc, #84]	; (1000fdfc <gapm_reset_req_handler+0x5c>)
1000fda6:	4816      	ldr	r0, [pc, #88]	; (1000fe00 <gapm_reset_req_handler+0x60>)
1000fda8:	880c      	ldrh	r4, [r1, #0]
1000fdaa:	8809      	ldrh	r1, [r1, #0]
1000fdac:	1ddd      	adds	r5, r3, #7
1000fdae:	0a09      	lsrs	r1, r1, #8
1000fdb0:	2300      	movs	r3, #0
1000fdb2:	2202      	movs	r2, #2
1000fdb4:	7141      	strb	r1, [r0, #5]
1000fdb6:	26d0      	movs	r6, #208	; 0xd0
1000fdb8:	2101      	movs	r1, #1
1000fdba:	7104      	strb	r4, [r0, #4]
1000fdbc:	4c11      	ldr	r4, [pc, #68]	; (1000fe04 <gapm_reset_req_handler+0x64>)
1000fdbe:	702b      	strb	r3, [r5, #0]
1000fdc0:	7002      	strb	r2, [r0, #0]
1000fdc2:	70c3      	strb	r3, [r0, #3]
1000fdc4:	320b      	adds	r2, #11
1000fdc6:	7201      	strb	r1, [r0, #8]
1000fdc8:	7181      	strb	r1, [r0, #6]
1000fdca:	71c3      	strb	r3, [r0, #7]
1000fdcc:	3108      	adds	r1, #8
1000fdce:	4b0e      	ldr	r3, [pc, #56]	; (1000fe08 <gapm_reset_req_handler+0x68>)
1000fdd0:	0136      	lsls	r6, r6, #4
1000fdd2:	7042      	strb	r2, [r0, #1]
1000fdd4:	7082      	strb	r2, [r0, #2]
1000fdd6:	80a2      	strh	r2, [r4, #4]
1000fdd8:	8026      	strh	r6, [r4, #0]
1000fdda:	4798      	blx	r3
1000fddc:	1c28      	adds	r0, r5, #0
1000fdde:	4b0b      	ldr	r3, [pc, #44]	; (1000fe0c <gapm_reset_req_handler+0x6c>)
1000fde0:	4798      	blx	r3
1000fde2:	782b      	ldrb	r3, [r5, #0]
1000fde4:	20e2      	movs	r0, #226	; 0xe2
1000fde6:	2b00      	cmp	r3, #0
1000fde8:	d106      	bne.n	1000fdf8 <gapm_reset_req_handler+0x58>
1000fdea:	68a3      	ldr	r3, [r4, #8]
1000fdec:	20e2      	movs	r0, #226	; 0xe2
1000fdee:	781a      	ldrb	r2, [r3, #0]
1000fdf0:	785b      	ldrb	r3, [r3, #1]
1000fdf2:	2a01      	cmp	r2, #1
1000fdf4:	d100      	bne.n	1000fdf8 <gapm_reset_req_handler+0x58>
1000fdf6:	1c18      	adds	r0, r3, #0
1000fdf8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fdfa:	46c0      	nop			; (mov r8, r8)
1000fdfc:	10019604 	.word	0x10019604
1000fe00:	10019974 	.word	0x10019974
1000fe04:	100195f8 	.word	0x100195f8
1000fe08:	1000f1c9 	.word	0x1000f1c9
1000fe0c:	1000f22d 	.word	0x1000f22d

1000fe10 <gapm_set_dev_config_cmd_handler>:
1000fe10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe12:	b089      	sub	sp, #36	; 0x24
1000fe14:	9303      	str	r3, [sp, #12]
1000fe16:	ab0e      	add	r3, sp, #56	; 0x38
1000fe18:	781b      	ldrb	r3, [r3, #0]
1000fe1a:	4c37      	ldr	r4, [pc, #220]	; (1000fef8 <gapm_set_dev_config_cmd_handler+0xe8>)
1000fe1c:	9304      	str	r3, [sp, #16]
1000fe1e:	ab0f      	add	r3, sp, #60	; 0x3c
1000fe20:	781b      	ldrb	r3, [r3, #0]
1000fe22:	270d      	movs	r7, #13
1000fe24:	9305      	str	r3, [sp, #20]
1000fe26:	ab10      	add	r3, sp, #64	; 0x40
1000fe28:	881b      	ldrh	r3, [r3, #0]
1000fe2a:	72a1      	strb	r1, [r4, #10]
1000fe2c:	9300      	str	r3, [sp, #0]
1000fe2e:	ab11      	add	r3, sp, #68	; 0x44
1000fe30:	881b      	ldrh	r3, [r3, #0]
1000fe32:	0a09      	lsrs	r1, r1, #8
1000fe34:	9301      	str	r3, [sp, #4]
1000fe36:	ab12      	add	r3, sp, #72	; 0x48
1000fe38:	881b      	ldrh	r3, [r3, #0]
1000fe3a:	7260      	strb	r0, [r4, #9]
1000fe3c:	9302      	str	r3, [sp, #8]
1000fe3e:	ab06      	add	r3, sp, #24
1000fe40:	1dde      	adds	r6, r3, #7
1000fe42:	2300      	movs	r3, #0
1000fe44:	7033      	strb	r3, [r6, #0]
1000fe46:	2304      	movs	r3, #4
1000fe48:	7023      	strb	r3, [r4, #0]
1000fe4a:	2300      	movs	r3, #0
1000fe4c:	70e3      	strb	r3, [r4, #3]
1000fe4e:	4b2b      	ldr	r3, [pc, #172]	; (1000fefc <gapm_set_dev_config_cmd_handler+0xec>)
1000fe50:	72e1      	strb	r1, [r4, #11]
1000fe52:	881d      	ldrh	r5, [r3, #0]
1000fe54:	881b      	ldrh	r3, [r3, #0]
1000fe56:	1c11      	adds	r1, r2, #0
1000fe58:	0a1b      	lsrs	r3, r3, #8
1000fe5a:	7163      	strb	r3, [r4, #5]
1000fe5c:	2303      	movs	r3, #3
1000fe5e:	7125      	strb	r5, [r4, #4]
1000fe60:	2206      	movs	r2, #6
1000fe62:	4d27      	ldr	r5, [pc, #156]	; (1000ff00 <gapm_set_dev_config_cmd_handler+0xf0>)
1000fe64:	4827      	ldr	r0, [pc, #156]	; (1000ff04 <gapm_set_dev_config_cmd_handler+0xf4>)
1000fe66:	7223      	strb	r3, [r4, #8]
1000fe68:	7067      	strb	r7, [r4, #1]
1000fe6a:	70a7      	strb	r7, [r4, #2]
1000fe6c:	47a8      	blx	r5
1000fe6e:	9903      	ldr	r1, [sp, #12]
1000fe70:	2210      	movs	r2, #16
1000fe72:	4825      	ldr	r0, [pc, #148]	; (1000ff08 <gapm_set_dev_config_cmd_handler+0xf8>)
1000fe74:	47a8      	blx	r5
1000fe76:	466a      	mov	r2, sp
1000fe78:	7c12      	ldrb	r2, [r2, #16]
1000fe7a:	1ce3      	adds	r3, r4, #3
1000fe7c:	77da      	strb	r2, [r3, #31]
1000fe7e:	466a      	mov	r2, sp
1000fe80:	7d12      	ldrb	r2, [r2, #20]
1000fe82:	1d23      	adds	r3, r4, #4
1000fe84:	77da      	strb	r2, [r3, #31]
1000fe86:	466a      	mov	r2, sp
1000fe88:	7812      	ldrb	r2, [r2, #0]
1000fe8a:	1d63      	adds	r3, r4, #5
1000fe8c:	77da      	strb	r2, [r3, #31]
1000fe8e:	9b00      	ldr	r3, [sp, #0]
1000fe90:	1da2      	adds	r2, r4, #6
1000fe92:	0a1b      	lsrs	r3, r3, #8
1000fe94:	77d3      	strb	r3, [r2, #31]
1000fe96:	466a      	mov	r2, sp
1000fe98:	7912      	ldrb	r2, [r2, #4]
1000fe9a:	1de3      	adds	r3, r4, #7
1000fe9c:	77da      	strb	r2, [r3, #31]
1000fe9e:	1c22      	adds	r2, r4, #0
1000fea0:	9b01      	ldr	r3, [sp, #4]
1000fea2:	3208      	adds	r2, #8
1000fea4:	0a1b      	lsrs	r3, r3, #8
1000fea6:	77d3      	strb	r3, [r2, #31]
1000fea8:	466a      	mov	r2, sp
1000feaa:	1c23      	adds	r3, r4, #0
1000feac:	7a12      	ldrb	r2, [r2, #8]
1000feae:	3328      	adds	r3, #40	; 0x28
1000feb0:	701a      	strb	r2, [r3, #0]
1000feb2:	1c22      	adds	r2, r4, #0
1000feb4:	9b02      	ldr	r3, [sp, #8]
1000feb6:	3229      	adds	r2, #41	; 0x29
1000feb8:	0a1b      	lsrs	r3, r3, #8
1000feba:	7013      	strb	r3, [r2, #0]
1000febc:	23d0      	movs	r3, #208	; 0xd0
1000febe:	4d13      	ldr	r5, [pc, #76]	; (1000ff0c <gapm_set_dev_config_cmd_handler+0xfc>)
1000fec0:	011b      	lsls	r3, r3, #4
1000fec2:	802b      	strh	r3, [r5, #0]
1000fec4:	2322      	movs	r3, #34	; 0x22
1000fec6:	71a3      	strb	r3, [r4, #6]
1000fec8:	2300      	movs	r3, #0
1000feca:	212a      	movs	r1, #42	; 0x2a
1000fecc:	71e3      	strb	r3, [r4, #7]
1000fece:	1c20      	adds	r0, r4, #0
1000fed0:	4b0f      	ldr	r3, [pc, #60]	; (1000ff10 <gapm_set_dev_config_cmd_handler+0x100>)
1000fed2:	80af      	strh	r7, [r5, #4]
1000fed4:	4798      	blx	r3
1000fed6:	1c30      	adds	r0, r6, #0
1000fed8:	4b0e      	ldr	r3, [pc, #56]	; (1000ff14 <gapm_set_dev_config_cmd_handler+0x104>)
1000feda:	4798      	blx	r3
1000fedc:	7833      	ldrb	r3, [r6, #0]
1000fede:	20e2      	movs	r0, #226	; 0xe2
1000fee0:	2b00      	cmp	r3, #0
1000fee2:	d106      	bne.n	1000fef2 <gapm_set_dev_config_cmd_handler+0xe2>
1000fee4:	68ab      	ldr	r3, [r5, #8]
1000fee6:	20e2      	movs	r0, #226	; 0xe2
1000fee8:	781a      	ldrb	r2, [r3, #0]
1000feea:	785b      	ldrb	r3, [r3, #1]
1000feec:	2a03      	cmp	r2, #3
1000feee:	d100      	bne.n	1000fef2 <gapm_set_dev_config_cmd_handler+0xe2>
1000fef0:	1c18      	adds	r0, r3, #0
1000fef2:	b009      	add	sp, #36	; 0x24
1000fef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fef6:	46c0      	nop			; (mov r8, r8)
1000fef8:	10019974 	.word	0x10019974
1000fefc:	10019604 	.word	0x10019604
1000ff00:	10014a2f 	.word	0x10014a2f
1000ff04:	10019980 	.word	0x10019980
1000ff08:	10019986 	.word	0x10019986
1000ff0c:	100195f8 	.word	0x100195f8
1000ff10:	1000f1c9 	.word	0x1000f1c9
1000ff14:	1000f22d 	.word	0x1000f22d

1000ff18 <gapm_get_dev_config_cmd_handler>:
1000ff18:	4684      	mov	ip, r0
1000ff1a:	4663      	mov	r3, ip
1000ff1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff1e:	b085      	sub	sp, #20
1000ff20:	9100      	str	r1, [sp, #0]
1000ff22:	20cf      	movs	r0, #207	; 0xcf
1000ff24:	2b01      	cmp	r3, #1
1000ff26:	d854      	bhi.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ff28:	2900      	cmp	r1, #0
1000ff2a:	d052      	beq.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ff2c:	2200      	movs	r2, #0
1000ff2e:	492a      	ldr	r1, [pc, #168]	; (1000ffd8 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ff30:	ab02      	add	r3, sp, #8
1000ff32:	880c      	ldrh	r4, [r1, #0]
1000ff34:	8809      	ldrh	r1, [r1, #0]
1000ff36:	1d9f      	adds	r7, r3, #6
1000ff38:	719a      	strb	r2, [r3, #6]
1000ff3a:	4b28      	ldr	r3, [pc, #160]	; (1000ffdc <gapm_get_dev_config_cmd_handler+0xc4>)
1000ff3c:	0a09      	lsrs	r1, r1, #8
1000ff3e:	250d      	movs	r5, #13
1000ff40:	2606      	movs	r6, #6
1000ff42:	7159      	strb	r1, [r3, #5]
1000ff44:	4661      	mov	r1, ip
1000ff46:	701e      	strb	r6, [r3, #0]
1000ff48:	705d      	strb	r5, [r3, #1]
1000ff4a:	709d      	strb	r5, [r3, #2]
1000ff4c:	70da      	strb	r2, [r3, #3]
1000ff4e:	711c      	strb	r4, [r3, #4]
1000ff50:	2901      	cmp	r1, #1
1000ff52:	d13e      	bne.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ff54:	21d0      	movs	r1, #208	; 0xd0
1000ff56:	4c22      	ldr	r4, [pc, #136]	; (1000ffe0 <gapm_get_dev_config_cmd_handler+0xc8>)
1000ff58:	0109      	lsls	r1, r1, #4
1000ff5a:	8061      	strh	r1, [r4, #2]
1000ff5c:	4921      	ldr	r1, [pc, #132]	; (1000ffe4 <gapm_get_dev_config_cmd_handler+0xcc>)
1000ff5e:	71da      	strb	r2, [r3, #7]
1000ff60:	8021      	strh	r1, [r4, #0]
1000ff62:	4661      	mov	r1, ip
1000ff64:	721e      	strb	r6, [r3, #8]
1000ff66:	7199      	strb	r1, [r3, #6]
1000ff68:	1c18      	adds	r0, r3, #0
1000ff6a:	2109      	movs	r1, #9
1000ff6c:	4b1e      	ldr	r3, [pc, #120]	; (1000ffe8 <gapm_get_dev_config_cmd_handler+0xd0>)
1000ff6e:	80a5      	strh	r5, [r4, #4]
1000ff70:	4798      	blx	r3
1000ff72:	1c38      	adds	r0, r7, #0
1000ff74:	4b1d      	ldr	r3, [pc, #116]	; (1000ffec <gapm_get_dev_config_cmd_handler+0xd4>)
1000ff76:	4798      	blx	r3
1000ff78:	783b      	ldrb	r3, [r7, #0]
1000ff7a:	20e2      	movs	r0, #226	; 0xe2
1000ff7c:	9301      	str	r3, [sp, #4]
1000ff7e:	2b00      	cmp	r3, #0
1000ff80:	d127      	bne.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ff82:	8821      	ldrh	r1, [r4, #0]
1000ff84:	4a1a      	ldr	r2, [pc, #104]	; (1000fff0 <gapm_get_dev_config_cmd_handler+0xd8>)
1000ff86:	68a7      	ldr	r7, [r4, #8]
1000ff88:	3b01      	subs	r3, #1
1000ff8a:	4291      	cmp	r1, r2
1000ff8c:	d001      	beq.n	1000ff92 <gapm_get_dev_config_cmd_handler+0x7a>
1000ff8e:	8023      	strh	r3, [r4, #0]
1000ff90:	e01a      	b.n	1000ffc8 <gapm_get_dev_config_cmd_handler+0xb0>
1000ff92:	8063      	strh	r3, [r4, #2]
1000ff94:	9b00      	ldr	r3, [sp, #0]
1000ff96:	1c39      	adds	r1, r7, #0
1000ff98:	1c58      	adds	r0, r3, #1
1000ff9a:	1c32      	adds	r2, r6, #0
1000ff9c:	4b15      	ldr	r3, [pc, #84]	; (1000fff4 <gapm_get_dev_config_cmd_handler+0xdc>)
1000ff9e:	4798      	blx	r3
1000ffa0:	79bb      	ldrb	r3, [r7, #6]
1000ffa2:	9a00      	ldr	r2, [sp, #0]
1000ffa4:	7013      	strb	r3, [r2, #0]
1000ffa6:	23d0      	movs	r3, #208	; 0xd0
1000ffa8:	011b      	lsls	r3, r3, #4
1000ffaa:	8023      	strh	r3, [r4, #0]
1000ffac:	ab02      	add	r3, sp, #8
1000ffae:	80a5      	strh	r5, [r4, #4]
1000ffb0:	1ddd      	adds	r5, r3, #7
1000ffb2:	466b      	mov	r3, sp
1000ffb4:	791b      	ldrb	r3, [r3, #4]
1000ffb6:	1c28      	adds	r0, r5, #0
1000ffb8:	702b      	strb	r3, [r5, #0]
1000ffba:	4b0c      	ldr	r3, [pc, #48]	; (1000ffec <gapm_get_dev_config_cmd_handler+0xd4>)
1000ffbc:	4798      	blx	r3
1000ffbe:	782b      	ldrb	r3, [r5, #0]
1000ffc0:	20d0      	movs	r0, #208	; 0xd0
1000ffc2:	2b00      	cmp	r3, #0
1000ffc4:	d105      	bne.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ffc6:	68a7      	ldr	r7, [r4, #8]
1000ffc8:	783b      	ldrb	r3, [r7, #0]
1000ffca:	7878      	ldrb	r0, [r7, #1]
1000ffcc:	2b06      	cmp	r3, #6
1000ffce:	d000      	beq.n	1000ffd2 <gapm_get_dev_config_cmd_handler+0xba>
1000ffd0:	20e2      	movs	r0, #226	; 0xe2
1000ffd2:	b005      	add	sp, #20
1000ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ffd6:	46c0      	nop			; (mov r8, r8)
1000ffd8:	10019604 	.word	0x10019604
1000ffdc:	10019974 	.word	0x10019974
1000ffe0:	100195f8 	.word	0x100195f8
1000ffe4:	00000d08 	.word	0x00000d08
1000ffe8:	1000f1c9 	.word	0x1000f1c9
1000ffec:	1000f22d 	.word	0x1000f22d
1000fff0:	0000ffff 	.word	0x0000ffff
1000fff4:	10014a2f 	.word	0x10014a2f

1000fff8 <gapm_cancel_cmd_handler>:
1000fff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fffa:	4916      	ldr	r1, [pc, #88]	; (10010054 <gapm_cancel_cmd_handler+0x5c>)
1000fffc:	4816      	ldr	r0, [pc, #88]	; (10010058 <gapm_cancel_cmd_handler+0x60>)
1000fffe:	880c      	ldrh	r4, [r1, #0]
10010000:	8809      	ldrh	r1, [r1, #0]
10010002:	466b      	mov	r3, sp
10010004:	0a09      	lsrs	r1, r1, #8
10010006:	7141      	strb	r1, [r0, #5]
10010008:	2102      	movs	r1, #2
1001000a:	2203      	movs	r2, #3
1001000c:	7201      	strb	r1, [r0, #8]
1001000e:	21d0      	movs	r1, #208	; 0xd0
10010010:	1ddd      	adds	r5, r3, #7
10010012:	2300      	movs	r3, #0
10010014:	7104      	strb	r4, [r0, #4]
10010016:	4c11      	ldr	r4, [pc, #68]	; (1001005c <gapm_cancel_cmd_handler+0x64>)
10010018:	7002      	strb	r2, [r0, #0]
1001001a:	0109      	lsls	r1, r1, #4
1001001c:	320a      	adds	r2, #10
1001001e:	702b      	strb	r3, [r5, #0]
10010020:	7042      	strb	r2, [r0, #1]
10010022:	7082      	strb	r2, [r0, #2]
10010024:	70c3      	strb	r3, [r0, #3]
10010026:	8021      	strh	r1, [r4, #0]
10010028:	80a2      	strh	r2, [r4, #4]
1001002a:	71c3      	strb	r3, [r0, #7]
1001002c:	3a0c      	subs	r2, #12
1001002e:	2109      	movs	r1, #9
10010030:	4b0b      	ldr	r3, [pc, #44]	; (10010060 <gapm_cancel_cmd_handler+0x68>)
10010032:	7182      	strb	r2, [r0, #6]
10010034:	4798      	blx	r3
10010036:	1c28      	adds	r0, r5, #0
10010038:	4b0a      	ldr	r3, [pc, #40]	; (10010064 <gapm_cancel_cmd_handler+0x6c>)
1001003a:	4798      	blx	r3
1001003c:	7828      	ldrb	r0, [r5, #0]
1001003e:	2800      	cmp	r0, #0
10010040:	d001      	beq.n	10010046 <gapm_cancel_cmd_handler+0x4e>
10010042:	20e2      	movs	r0, #226	; 0xe2
10010044:	e004      	b.n	10010050 <gapm_cancel_cmd_handler+0x58>
10010046:	68a3      	ldr	r3, [r4, #8]
10010048:	785b      	ldrb	r3, [r3, #1]
1001004a:	2b44      	cmp	r3, #68	; 0x44
1001004c:	d000      	beq.n	10010050 <gapm_cancel_cmd_handler+0x58>
1001004e:	1c18      	adds	r0, r3, #0
10010050:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010052:	46c0      	nop			; (mov r8, r8)
10010054:	10019604 	.word	0x10019604
10010058:	10019974 	.word	0x10019974
1001005c:	100195f8 	.word	0x100195f8
10010060:	1000f1c9 	.word	0x1000f1c9
10010064:	1000f22d 	.word	0x1000f22d

10010068 <gapm_dev_bdaddr_ind_handler>:
10010068:	b538      	push	{r3, r4, r5, lr}
1001006a:	1c05      	adds	r5, r0, #0
1001006c:	1c0c      	adds	r4, r1, #0
1001006e:	1c48      	adds	r0, r1, #1
10010070:	2206      	movs	r2, #6
10010072:	1c29      	adds	r1, r5, #0
10010074:	4b02      	ldr	r3, [pc, #8]	; (10010080 <gapm_dev_bdaddr_ind_handler+0x18>)
10010076:	4798      	blx	r3
10010078:	79ab      	ldrb	r3, [r5, #6]
1001007a:	2000      	movs	r0, #0
1001007c:	7023      	strb	r3, [r4, #0]
1001007e:	bd38      	pop	{r3, r4, r5, pc}
10010080:	10014a2f 	.word	0x10014a2f

10010084 <gapm_cmp_evt>:
10010084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010086:	7803      	ldrb	r3, [r0, #0]
10010088:	7845      	ldrb	r5, [r0, #1]
1001008a:	3b0c      	subs	r3, #12
1001008c:	1e18      	subs	r0, r3, #0
1001008e:	280b      	cmp	r0, #11
10010090:	d900      	bls.n	10010094 <gapm_cmp_evt+0x10>
10010092:	e08d      	b.n	100101b0 <gapm_cmp_evt+0x12c>
10010094:	1c0c      	adds	r4, r1, #0
10010096:	f001 fe33 	bl	10011d00 <__gnu_thumb1_case_uqi>
1001009a:	1952      	.short	0x1952
1001009c:	068b1919 	.word	0x068b1919
100100a0:	8b595906 	.word	0x8b595906
100100a4:	0d8b      	.short	0x0d8b
100100a6:	2300      	movs	r3, #0
100100a8:	2d45      	cmp	r5, #69	; 0x45
100100aa:	d000      	beq.n	100100ae <gapm_cmp_evt+0x2a>
100100ac:	1c2b      	adds	r3, r5, #0
100100ae:	7023      	strb	r3, [r4, #0]
100100b0:	2002      	movs	r0, #2
100100b2:	e07e      	b.n	100101b2 <gapm_cmp_evt+0x12e>
100100b4:	203b      	movs	r0, #59	; 0x3b
100100b6:	2d00      	cmp	r5, #0
100100b8:	d100      	bne.n	100100bc <gapm_cmp_evt+0x38>
100100ba:	e07a      	b.n	100101b2 <gapm_cmp_evt+0x12e>
100100bc:	700d      	strb	r5, [r1, #0]
100100be:	1c48      	adds	r0, r1, #1
100100c0:	2210      	movs	r2, #16
100100c2:	2100      	movs	r1, #0
100100c4:	4b3b      	ldr	r3, [pc, #236]	; (100101b4 <gapm_cmp_evt+0x130>)
100100c6:	4798      	blx	r3
100100c8:	200f      	movs	r0, #15
100100ca:	e072      	b.n	100101b2 <gapm_cmp_evt+0x12e>
100100cc:	2d00      	cmp	r5, #0
100100ce:	d134      	bne.n	1001013a <gapm_cmp_evt+0xb6>
100100d0:	4b39      	ldr	r3, [pc, #228]	; (100101b8 <gapm_cmp_evt+0x134>)
100100d2:	4798      	blx	r3
100100d4:	1e43      	subs	r3, r0, #1
100100d6:	b2db      	uxtb	r3, r3
100100d8:	1c28      	adds	r0, r5, #0
100100da:	2b06      	cmp	r3, #6
100100dc:	d869      	bhi.n	100101b2 <gapm_cmp_evt+0x12e>
100100de:	466b      	mov	r3, sp
100100e0:	4e36      	ldr	r6, [pc, #216]	; (100101bc <gapm_cmp_evt+0x138>)
100100e2:	1dd9      	adds	r1, r3, #7
100100e4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100100e6:	4b36      	ldr	r3, [pc, #216]	; (100101c0 <gapm_cmp_evt+0x13c>)
100100e8:	4798      	blx	r3
100100ea:	2312      	movs	r3, #18
100100ec:	4358      	muls	r0, r3
100100ee:	4935      	ldr	r1, [pc, #212]	; (100101c4 <gapm_cmp_evt+0x140>)
100100f0:	1809      	adds	r1, r1, r0
100100f2:	1c0b      	adds	r3, r1, #0
100100f4:	894a      	ldrh	r2, [r1, #10]
100100f6:	3308      	adds	r3, #8
100100f8:	8122      	strh	r2, [r4, #8]
100100fa:	784f      	ldrb	r7, [r1, #1]
100100fc:	72a5      	strb	r5, [r4, #10]
100100fe:	7027      	strb	r7, [r4, #0]
10010100:	898a      	ldrh	r2, [r1, #12]
10010102:	1c60      	adds	r0, r4, #1
10010104:	81a2      	strh	r2, [r4, #12]
10010106:	88db      	ldrh	r3, [r3, #6]
10010108:	3102      	adds	r1, #2
1001010a:	81e3      	strh	r3, [r4, #14]
1001010c:	89cb      	ldrh	r3, [r1, #14]
1001010e:	2206      	movs	r2, #6
10010110:	8223      	strh	r3, [r4, #16]
10010112:	4b2d      	ldr	r3, [pc, #180]	; (100101c8 <gapm_cmp_evt+0x144>)
10010114:	4798      	blx	r3
10010116:	2f00      	cmp	r7, #0
10010118:	d00a      	beq.n	10010130 <gapm_cmp_evt+0xac>
1001011a:	79a3      	ldrb	r3, [r4, #6]
1001011c:	223f      	movs	r2, #63	; 0x3f
1001011e:	1c19      	adds	r1, r3, #0
10010120:	3501      	adds	r5, #1
10010122:	4391      	bics	r1, r2
10010124:	29c0      	cmp	r1, #192	; 0xc0
10010126:	d003      	beq.n	10010130 <gapm_cmp_evt+0xac>
10010128:	065b      	lsls	r3, r3, #25
1001012a:	0fdb      	lsrs	r3, r3, #31
1001012c:	3502      	adds	r5, #2
1001012e:	1aed      	subs	r5, r5, r3
10010130:	2301      	movs	r3, #1
10010132:	425b      	negs	r3, r3
10010134:	7025      	strb	r5, [r4, #0]
10010136:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010138:	e038      	b.n	100101ac <gapm_cmp_evt+0x128>
1001013a:	700d      	strb	r5, [r1, #0]
1001013c:	e004      	b.n	10010148 <gapm_cmp_evt+0xc4>
1001013e:	2300      	movs	r3, #0
10010140:	2d45      	cmp	r5, #69	; 0x45
10010142:	d000      	beq.n	10010146 <gapm_cmp_evt+0xc2>
10010144:	1c2b      	adds	r3, r5, #0
10010146:	7023      	strb	r3, [r4, #0]
10010148:	2003      	movs	r0, #3
1001014a:	e032      	b.n	100101b2 <gapm_cmp_evt+0x12e>
1001014c:	4e1b      	ldr	r6, [pc, #108]	; (100101bc <gapm_cmp_evt+0x138>)
1001014e:	2100      	movs	r1, #0
10010150:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010152:	4b1b      	ldr	r3, [pc, #108]	; (100101c0 <gapm_cmp_evt+0x13c>)
10010154:	4798      	blx	r3
10010156:	2807      	cmp	r0, #7
10010158:	d818      	bhi.n	1001018c <gapm_cmp_evt+0x108>
1001015a:	2301      	movs	r3, #1
1001015c:	425b      	negs	r3, r3
1001015e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010160:	3313      	adds	r3, #19
10010162:	4358      	muls	r0, r3
10010164:	4917      	ldr	r1, [pc, #92]	; (100101c4 <gapm_cmp_evt+0x140>)
10010166:	1809      	adds	r1, r1, r0
10010168:	1c0b      	adds	r3, r1, #0
1001016a:	894a      	ldrh	r2, [r1, #10]
1001016c:	3308      	adds	r3, #8
1001016e:	8122      	strh	r2, [r4, #8]
10010170:	784a      	ldrb	r2, [r1, #1]
10010172:	72a5      	strb	r5, [r4, #10]
10010174:	7022      	strb	r2, [r4, #0]
10010176:	898a      	ldrh	r2, [r1, #12]
10010178:	1c60      	adds	r0, r4, #1
1001017a:	81a2      	strh	r2, [r4, #12]
1001017c:	88db      	ldrh	r3, [r3, #6]
1001017e:	3102      	adds	r1, #2
10010180:	81e3      	strh	r3, [r4, #14]
10010182:	89cb      	ldrh	r3, [r1, #14]
10010184:	2206      	movs	r2, #6
10010186:	8223      	strh	r3, [r4, #16]
10010188:	4b0f      	ldr	r3, [pc, #60]	; (100101c8 <gapm_cmp_evt+0x144>)
1001018a:	4798      	blx	r3
1001018c:	2200      	movs	r2, #0
1001018e:	7823      	ldrb	r3, [r4, #0]
10010190:	4293      	cmp	r3, r2
10010192:	d00a      	beq.n	100101aa <gapm_cmp_evt+0x126>
10010194:	79a3      	ldrb	r3, [r4, #6]
10010196:	323f      	adds	r2, #63	; 0x3f
10010198:	1c19      	adds	r1, r3, #0
1001019a:	4391      	bics	r1, r2
1001019c:	3a3e      	subs	r2, #62	; 0x3e
1001019e:	29c0      	cmp	r1, #192	; 0xc0
100101a0:	d003      	beq.n	100101aa <gapm_cmp_evt+0x126>
100101a2:	065b      	lsls	r3, r3, #25
100101a4:	0fdb      	lsrs	r3, r3, #31
100101a6:	3202      	adds	r2, #2
100101a8:	1ad2      	subs	r2, r2, r3
100101aa:	7022      	strb	r2, [r4, #0]
100101ac:	2005      	movs	r0, #5
100101ae:	e000      	b.n	100101b2 <gapm_cmp_evt+0x12e>
100101b0:	2000      	movs	r0, #0
100101b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100101b4:	10014a41 	.word	0x10014a41
100101b8:	1000f3d5 	.word	0x1000f3d5
100101bc:	10019696 	.word	0x10019696
100101c0:	1000f399 	.word	0x1000f399
100101c4:	10019606 	.word	0x10019606
100101c8:	10014a2f 	.word	0x10014a2f

100101cc <gapm_start_adv_cmd_handler>:
100101cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100101ce:	b089      	sub	sp, #36	; 0x24
100101d0:	9303      	str	r3, [sp, #12]
100101d2:	ab0e      	add	r3, sp, #56	; 0x38
100101d4:	9102      	str	r1, [sp, #8]
100101d6:	cb02      	ldmia	r3!, {r1}
100101d8:	aa08      	add	r2, sp, #32
100101da:	881b      	ldrh	r3, [r3, #0]
100101dc:	4e3c      	ldr	r6, [pc, #240]	; (100102d0 <gapm_start_adv_cmd_handler+0x104>)
100101de:	9300      	str	r3, [sp, #0]
100101e0:	ab10      	add	r3, sp, #64	; 0x40
100101e2:	881b      	ldrh	r3, [r3, #0]
100101e4:	240d      	movs	r4, #13
100101e6:	469c      	mov	ip, r3
100101e8:	ab11      	add	r3, sp, #68	; 0x44
100101ea:	781b      	ldrb	r3, [r3, #0]
100101ec:	9304      	str	r3, [sp, #16]
100101ee:	ab12      	add	r3, sp, #72	; 0x48
100101f0:	781b      	ldrb	r3, [r3, #0]
100101f2:	9305      	str	r3, [sp, #20]
100101f4:	ab13      	add	r3, sp, #76	; 0x4c
100101f6:	781b      	ldrb	r3, [r3, #0]
100101f8:	9306      	str	r3, [sp, #24]
100101fa:	ab14      	add	r3, sp, #80	; 0x50
100101fc:	781b      	ldrb	r3, [r3, #0]
100101fe:	9301      	str	r3, [sp, #4]
10010200:	2319      	movs	r3, #25
10010202:	189b      	adds	r3, r3, r2
10010204:	7fdd      	ldrb	r5, [r3, #31]
10010206:	ab18      	add	r3, sp, #96	; 0x60
10010208:	881f      	ldrh	r7, [r3, #0]
1001020a:	ab19      	add	r3, sp, #100	; 0x64
1001020c:	781b      	ldrb	r3, [r3, #0]
1001020e:	8832      	ldrh	r2, [r6, #0]
10010210:	9307      	str	r3, [sp, #28]
10010212:	4b30      	ldr	r3, [pc, #192]	; (100102d4 <gapm_start_adv_cmd_handler+0x108>)
10010214:	8836      	ldrh	r6, [r6, #0]
10010216:	711a      	strb	r2, [r3, #4]
10010218:	466a      	mov	r2, sp
1001021a:	7a12      	ldrb	r2, [r2, #8]
1001021c:	701c      	strb	r4, [r3, #0]
1001021e:	705c      	strb	r4, [r3, #1]
10010220:	709c      	strb	r4, [r3, #2]
10010222:	725a      	strb	r2, [r3, #9]
10010224:	2400      	movs	r4, #0
10010226:	466a      	mov	r2, sp
10010228:	0a36      	lsrs	r6, r6, #8
1001022a:	70dc      	strb	r4, [r3, #3]
1001022c:	7218      	strb	r0, [r3, #8]
1001022e:	729c      	strb	r4, [r3, #10]
10010230:	715e      	strb	r6, [r3, #5]
10010232:	72dc      	strb	r4, [r3, #11]
10010234:	7812      	ldrb	r2, [r2, #0]
10010236:	380e      	subs	r0, #14
10010238:	731a      	strb	r2, [r3, #12]
1001023a:	9a00      	ldr	r2, [sp, #0]
1001023c:	0a14      	lsrs	r4, r2, #8
1001023e:	4662      	mov	r2, ip
10010240:	739a      	strb	r2, [r3, #14]
10010242:	4662      	mov	r2, ip
10010244:	735c      	strb	r4, [r3, #13]
10010246:	0a14      	lsrs	r4, r2, #8
10010248:	466a      	mov	r2, sp
1001024a:	7c12      	ldrb	r2, [r2, #16]
1001024c:	73dc      	strb	r4, [r3, #15]
1001024e:	741a      	strb	r2, [r3, #16]
10010250:	1c1c      	adds	r4, r3, #0
10010252:	2801      	cmp	r0, #1
10010254:	d809      	bhi.n	1001026a <gapm_start_adv_cmd_handler+0x9e>
10010256:	2900      	cmp	r1, #0
10010258:	d003      	beq.n	10010262 <gapm_start_adv_cmd_handler+0x96>
1001025a:	481f      	ldr	r0, [pc, #124]	; (100102d8 <gapm_start_adv_cmd_handler+0x10c>)
1001025c:	2206      	movs	r2, #6
1001025e:	4b1f      	ldr	r3, [pc, #124]	; (100102dc <gapm_start_adv_cmd_handler+0x110>)
10010260:	4798      	blx	r3
10010262:	466b      	mov	r3, sp
10010264:	7b1b      	ldrb	r3, [r3, #12]
10010266:	75e3      	strb	r3, [r4, #23]
10010268:	e014      	b.n	10010294 <gapm_start_adv_cmd_handler+0xc8>
1001026a:	466b      	mov	r3, sp
1001026c:	7d1b      	ldrb	r3, [r3, #20]
1001026e:	9915      	ldr	r1, [sp, #84]	; 0x54
10010270:	7463      	strb	r3, [r4, #17]
10010272:	466b      	mov	r3, sp
10010274:	7e1b      	ldrb	r3, [r3, #24]
10010276:	9a01      	ldr	r2, [sp, #4]
10010278:	74a3      	strb	r3, [r4, #18]
1001027a:	466b      	mov	r3, sp
1001027c:	791b      	ldrb	r3, [r3, #4]
1001027e:	4818      	ldr	r0, [pc, #96]	; (100102e0 <gapm_start_adv_cmd_handler+0x114>)
10010280:	4e16      	ldr	r6, [pc, #88]	; (100102dc <gapm_start_adv_cmd_handler+0x110>)
10010282:	74e3      	strb	r3, [r4, #19]
10010284:	47b0      	blx	r6
10010286:	1c23      	adds	r3, r4, #0
10010288:	4816      	ldr	r0, [pc, #88]	; (100102e4 <gapm_start_adv_cmd_handler+0x118>)
1001028a:	3330      	adds	r3, #48	; 0x30
1001028c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001028e:	1c2a      	adds	r2, r5, #0
10010290:	701d      	strb	r5, [r3, #0]
10010292:	47b0      	blx	r6
10010294:	1c22      	adds	r2, r4, #0
10010296:	23a5      	movs	r3, #165	; 0xa5
10010298:	3250      	adds	r2, #80	; 0x50
1001029a:	7013      	strb	r3, [r2, #0]
1001029c:	1c22      	adds	r2, r4, #0
1001029e:	3251      	adds	r2, #81	; 0x51
100102a0:	7013      	strb	r3, [r2, #0]
100102a2:	1c23      	adds	r3, r4, #0
100102a4:	1c22      	adds	r2, r4, #0
100102a6:	3352      	adds	r3, #82	; 0x52
100102a8:	701f      	strb	r7, [r3, #0]
100102aa:	3253      	adds	r2, #83	; 0x53
100102ac:	0a3b      	lsrs	r3, r7, #8
100102ae:	7013      	strb	r3, [r2, #0]
100102b0:	466a      	mov	r2, sp
100102b2:	1c23      	adds	r3, r4, #0
100102b4:	7f12      	ldrb	r2, [r2, #28]
100102b6:	3354      	adds	r3, #84	; 0x54
100102b8:	701a      	strb	r2, [r3, #0]
100102ba:	234d      	movs	r3, #77	; 0x4d
100102bc:	2500      	movs	r5, #0
100102be:	71a3      	strb	r3, [r4, #6]
100102c0:	1c20      	adds	r0, r4, #0
100102c2:	2155      	movs	r1, #85	; 0x55
100102c4:	4b08      	ldr	r3, [pc, #32]	; (100102e8 <gapm_start_adv_cmd_handler+0x11c>)
100102c6:	71e5      	strb	r5, [r4, #7]
100102c8:	4798      	blx	r3
100102ca:	1c28      	adds	r0, r5, #0
100102cc:	b009      	add	sp, #36	; 0x24
100102ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102d0:	10019604 	.word	0x10019604
100102d4:	10019974 	.word	0x10019974
100102d8:	10019985 	.word	0x10019985
100102dc:	10014a2f 	.word	0x10014a2f
100102e0:	10019988 	.word	0x10019988
100102e4:	100199a5 	.word	0x100199a5
100102e8:	1000f1c9 	.word	0x1000f1c9

100102ec <get_gap_local_addr_type>:
100102ec:	4b04      	ldr	r3, [pc, #16]	; (10010300 <get_gap_local_addr_type+0x14>)
100102ee:	2001      	movs	r0, #1
100102f0:	791b      	ldrb	r3, [r3, #4]
100102f2:	2b02      	cmp	r3, #2
100102f4:	d003      	beq.n	100102fe <get_gap_local_addr_type+0x12>
100102f6:	3b03      	subs	r3, #3
100102f8:	4258      	negs	r0, r3
100102fa:	4158      	adcs	r0, r3
100102fc:	0040      	lsls	r0, r0, #1
100102fe:	4770      	bx	lr
10010300:	10019696 	.word	0x10019696

10010304 <gapm_adv_report_evt_handler>:
10010304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010306:	7843      	ldrb	r3, [r0, #1]
10010308:	1c05      	adds	r5, r0, #0
1001030a:	9301      	str	r3, [sp, #4]
1001030c:	466b      	mov	r3, sp
1001030e:	1c0c      	adds	r4, r1, #0
10010310:	791b      	ldrb	r3, [r3, #4]
10010312:	7806      	ldrb	r6, [r0, #0]
10010314:	2206      	movs	r2, #6
10010316:	704b      	strb	r3, [r1, #1]
10010318:	1c88      	adds	r0, r1, #2
1001031a:	4f1b      	ldr	r7, [pc, #108]	; (10010388 <gapm_adv_report_evt_handler+0x84>)
1001031c:	1ca9      	adds	r1, r5, #2
1001031e:	47b8      	blx	r7
10010320:	1c20      	adds	r0, r4, #0
10010322:	1c29      	adds	r1, r5, #0
10010324:	7a2a      	ldrb	r2, [r5, #8]
10010326:	3008      	adds	r0, #8
10010328:	77c2      	strb	r2, [r0, #31]
1001032a:	3109      	adds	r1, #9
1001032c:	3528      	adds	r5, #40	; 0x28
1001032e:	47b8      	blx	r7
10010330:	782b      	ldrb	r3, [r5, #0]
10010332:	b25a      	sxtb	r2, r3
10010334:	2a00      	cmp	r2, #0
10010336:	da01      	bge.n	1001033c <gapm_adv_report_evt_handler+0x38>
10010338:	3301      	adds	r3, #1
1001033a:	b2db      	uxtb	r3, r3
1001033c:	1c22      	adds	r2, r4, #0
1001033e:	3228      	adds	r2, #40	; 0x28
10010340:	7013      	strb	r3, [r2, #0]
10010342:	2200      	movs	r2, #0
10010344:	9b01      	ldr	r3, [sp, #4]
10010346:	4293      	cmp	r3, r2
10010348:	d00a      	beq.n	10010360 <gapm_adv_report_evt_handler+0x5c>
1001034a:	79e3      	ldrb	r3, [r4, #7]
1001034c:	323f      	adds	r2, #63	; 0x3f
1001034e:	1c19      	adds	r1, r3, #0
10010350:	4391      	bics	r1, r2
10010352:	3a3e      	subs	r2, #62	; 0x3e
10010354:	29c0      	cmp	r1, #192	; 0xc0
10010356:	d003      	beq.n	10010360 <gapm_adv_report_evt_handler+0x5c>
10010358:	065b      	lsls	r3, r3, #25
1001035a:	0fdb      	lsrs	r3, r3, #31
1001035c:	3202      	adds	r2, #2
1001035e:	1ad2      	subs	r2, r2, r3
10010360:	7062      	strb	r2, [r4, #1]
10010362:	2e04      	cmp	r6, #4
10010364:	d80f      	bhi.n	10010386 <gapm_adv_report_evt_handler+0x82>
10010366:	1c30      	adds	r0, r6, #0
10010368:	f001 fcca 	bl	10011d00 <__gnu_thumb1_case_uqi>
1001036c:	09070503 	.word	0x09070503
10010370:	0b          	.byte	0x0b
10010371:	00          	.byte	0x00
10010372:	2300      	movs	r3, #0
10010374:	e006      	b.n	10010384 <gapm_adv_report_evt_handler+0x80>
10010376:	2301      	movs	r3, #1
10010378:	e004      	b.n	10010384 <gapm_adv_report_evt_handler+0x80>
1001037a:	2302      	movs	r3, #2
1001037c:	e002      	b.n	10010384 <gapm_adv_report_evt_handler+0x80>
1001037e:	2303      	movs	r3, #3
10010380:	e000      	b.n	10010384 <gapm_adv_report_evt_handler+0x80>
10010382:	2305      	movs	r3, #5
10010384:	7023      	strb	r3, [r4, #0]
10010386:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010388:	10014a2f 	.word	0x10014a2f

1001038c <gapm_resolv_addr_cmd_handler>:
1001038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001038e:	2314      	movs	r3, #20
10010390:	4c12      	ldr	r4, [pc, #72]	; (100103dc <gapm_resolv_addr_cmd_handler+0x50>)
10010392:	1c17      	adds	r7, r2, #0
10010394:	7023      	strb	r3, [r4, #0]
10010396:	3b07      	subs	r3, #7
10010398:	7063      	strb	r3, [r4, #1]
1001039a:	70a3      	strb	r3, [r4, #2]
1001039c:	2300      	movs	r3, #0
1001039e:	70e3      	strb	r3, [r4, #3]
100103a0:	4b0f      	ldr	r3, [pc, #60]	; (100103e0 <gapm_resolv_addr_cmd_handler+0x54>)
100103a2:	1c05      	adds	r5, r0, #0
100103a4:	881a      	ldrh	r2, [r3, #0]
100103a6:	881b      	ldrh	r3, [r3, #0]
100103a8:	4e0e      	ldr	r6, [pc, #56]	; (100103e4 <gapm_resolv_addr_cmd_handler+0x58>)
100103aa:	0a1b      	lsrs	r3, r3, #8
100103ac:	7163      	strb	r3, [r4, #5]
100103ae:	2317      	movs	r3, #23
100103b0:	012d      	lsls	r5, r5, #4
100103b2:	7122      	strb	r2, [r4, #4]
100103b4:	7260      	strb	r0, [r4, #9]
100103b6:	2206      	movs	r2, #6
100103b8:	480b      	ldr	r0, [pc, #44]	; (100103e8 <gapm_resolv_addr_cmd_handler+0x5c>)
100103ba:	7223      	strb	r3, [r4, #8]
100103bc:	47b0      	blx	r6
100103be:	1c39      	adds	r1, r7, #0
100103c0:	1c2a      	adds	r2, r5, #0
100103c2:	480a      	ldr	r0, [pc, #40]	; (100103ec <gapm_resolv_addr_cmd_handler+0x60>)
100103c4:	47b0      	blx	r6
100103c6:	1c29      	adds	r1, r5, #0
100103c8:	3110      	adds	r1, #16
100103ca:	1c0b      	adds	r3, r1, #0
100103cc:	3b08      	subs	r3, #8
100103ce:	71a3      	strb	r3, [r4, #6]
100103d0:	121b      	asrs	r3, r3, #8
100103d2:	71e3      	strb	r3, [r4, #7]
100103d4:	1c20      	adds	r0, r4, #0
100103d6:	4b06      	ldr	r3, [pc, #24]	; (100103f0 <gapm_resolv_addr_cmd_handler+0x64>)
100103d8:	4798      	blx	r3
100103da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100103dc:	10019974 	.word	0x10019974
100103e0:	10019604 	.word	0x10019604
100103e4:	10014a2f 	.word	0x10014a2f
100103e8:	1001997e 	.word	0x1001997e
100103ec:	10019984 	.word	0x10019984
100103f0:	1000f1c9 	.word	0x1000f1c9

100103f4 <gapm_addr_solved_ind_handler>:
100103f4:	b570      	push	{r4, r5, r6, lr}
100103f6:	1c04      	adds	r4, r0, #0
100103f8:	1c08      	adds	r0, r1, #0
100103fa:	1c0d      	adds	r5, r1, #0
100103fc:	4e05      	ldr	r6, [pc, #20]	; (10010414 <gapm_addr_solved_ind_handler+0x20>)
100103fe:	1c21      	adds	r1, r4, #0
10010400:	2206      	movs	r2, #6
10010402:	3011      	adds	r0, #17
10010404:	47b0      	blx	r6
10010406:	1c68      	adds	r0, r5, #1
10010408:	1da1      	adds	r1, r4, #6
1001040a:	2210      	movs	r2, #16
1001040c:	47b0      	blx	r6
1001040e:	2300      	movs	r3, #0
10010410:	702b      	strb	r3, [r5, #0]
10010412:	bd70      	pop	{r4, r5, r6, pc}
10010414:	10014a2f 	.word	0x10014a2f

10010418 <gapm_profile_added_ind_handler>:
10010418:	b510      	push	{r4, lr}
1001041a:	7843      	ldrb	r3, [r0, #1]
1001041c:	7902      	ldrb	r2, [r0, #4]
1001041e:	7944      	ldrb	r4, [r0, #5]
10010420:	7800      	ldrb	r0, [r0, #0]
10010422:	021b      	lsls	r3, r3, #8
10010424:	4303      	orrs	r3, r0
10010426:	2b1b      	cmp	r3, #27
10010428:	d104      	bne.n	10010434 <gapm_profile_added_ind_handler+0x1c>
1001042a:	2300      	movs	r3, #0
1001042c:	700b      	strb	r3, [r1, #0]
1001042e:	0223      	lsls	r3, r4, #8
10010430:	4313      	orrs	r3, r2
10010432:	804b      	strh	r3, [r1, #2]
10010434:	203b      	movs	r0, #59	; 0x3b
10010436:	bd10      	pop	{r4, pc}

10010438 <gattc_read_req_ind_parser>:
10010438:	7843      	ldrb	r3, [r0, #1]
1001043a:	7802      	ldrb	r2, [r0, #0]
1001043c:	021b      	lsls	r3, r3, #8
1001043e:	4313      	orrs	r3, r2
10010440:	804b      	strh	r3, [r1, #2]
10010442:	4770      	bx	lr

10010444 <gattc_write_req_ind_parser>:
10010444:	b508      	push	{r3, lr}
10010446:	1c13      	adds	r3, r2, #0
10010448:	0a00      	lsrs	r0, r0, #8
1001044a:	8010      	strh	r0, [r2, #0]
1001044c:	784a      	ldrb	r2, [r1, #1]
1001044e:	7808      	ldrb	r0, [r1, #0]
10010450:	0212      	lsls	r2, r2, #8
10010452:	4302      	orrs	r2, r0
10010454:	805a      	strh	r2, [r3, #2]
10010456:	78ca      	ldrb	r2, [r1, #3]
10010458:	7888      	ldrb	r0, [r1, #2]
1001045a:	0212      	lsls	r2, r2, #8
1001045c:	4302      	orrs	r2, r0
1001045e:	809a      	strh	r2, [r3, #4]
10010460:	794a      	ldrb	r2, [r1, #5]
10010462:	7908      	ldrb	r0, [r1, #4]
10010464:	0212      	lsls	r2, r2, #8
10010466:	4302      	orrs	r2, r0
10010468:	80da      	strh	r2, [r3, #6]
1001046a:	3308      	adds	r3, #8
1001046c:	1c18      	adds	r0, r3, #0
1001046e:	3106      	adds	r1, #6
10010470:	4b01      	ldr	r3, [pc, #4]	; (10010478 <gattc_write_req_ind_parser+0x34>)
10010472:	4798      	blx	r3
10010474:	bd08      	pop	{r3, pc}
10010476:	46c0      	nop			; (mov r8, r8)
10010478:	10014a2f 	.word	0x10014a2f

1001047c <gattc_att_info_req_parser>:
1001047c:	7843      	ldrb	r3, [r0, #1]
1001047e:	7802      	ldrb	r2, [r0, #0]
10010480:	021b      	lsls	r3, r3, #8
10010482:	4313      	orrs	r3, r2
10010484:	800b      	strh	r3, [r1, #0]
10010486:	4770      	bx	lr

10010488 <gattc_read_cfm>:
10010488:	b538      	push	{r3, r4, r5, lr}
1001048a:	2514      	movs	r5, #20
1001048c:	1c1c      	adds	r4, r3, #0
1001048e:	4b14      	ldr	r3, [pc, #80]	; (100104e0 <gattc_read_cfm+0x58>)
10010490:	70d9      	strb	r1, [r3, #3]
10010492:	4914      	ldr	r1, [pc, #80]	; (100104e4 <gattc_read_cfm+0x5c>)
10010494:	701d      	strb	r5, [r3, #0]
10010496:	3d08      	subs	r5, #8
10010498:	705d      	strb	r5, [r3, #1]
1001049a:	709d      	strb	r5, [r3, #2]
1001049c:	880d      	ldrh	r5, [r1, #0]
1001049e:	8809      	ldrh	r1, [r1, #0]
100104a0:	7218      	strb	r0, [r3, #8]
100104a2:	0a09      	lsrs	r1, r1, #8
100104a4:	7159      	strb	r1, [r3, #5]
100104a6:	0a00      	lsrs	r0, r0, #8
100104a8:	0a21      	lsrs	r1, r4, #8
100104aa:	711d      	strb	r5, [r3, #4]
100104ac:	7258      	strb	r0, [r3, #9]
100104ae:	729c      	strb	r4, [r3, #10]
100104b0:	72d9      	strb	r1, [r3, #11]
100104b2:	731a      	strb	r2, [r3, #12]
100104b4:	1c1d      	adds	r5, r3, #0
100104b6:	2c00      	cmp	r4, #0
100104b8:	d007      	beq.n	100104ca <gattc_read_cfm+0x42>
100104ba:	9904      	ldr	r1, [sp, #16]
100104bc:	1c22      	adds	r2, r4, #0
100104be:	480a      	ldr	r0, [pc, #40]	; (100104e8 <gattc_read_cfm+0x60>)
100104c0:	4b0a      	ldr	r3, [pc, #40]	; (100104ec <gattc_read_cfm+0x64>)
100104c2:	340d      	adds	r4, #13
100104c4:	4798      	blx	r3
100104c6:	b2a1      	uxth	r1, r4
100104c8:	e001      	b.n	100104ce <gattc_read_cfm+0x46>
100104ca:	210e      	movs	r1, #14
100104cc:	735c      	strb	r4, [r3, #13]
100104ce:	1c0b      	adds	r3, r1, #0
100104d0:	3b08      	subs	r3, #8
100104d2:	71ab      	strb	r3, [r5, #6]
100104d4:	121b      	asrs	r3, r3, #8
100104d6:	71eb      	strb	r3, [r5, #7]
100104d8:	1c28      	adds	r0, r5, #0
100104da:	4b05      	ldr	r3, [pc, #20]	; (100104f0 <gattc_read_cfm+0x68>)
100104dc:	4798      	blx	r3
100104de:	bd38      	pop	{r3, r4, r5, pc}
100104e0:	10019974 	.word	0x10019974
100104e4:	10019604 	.word	0x10019604
100104e8:	10019981 	.word	0x10019981
100104ec:	10014a2f 	.word	0x10014a2f
100104f0:	1000f1c9 	.word	0x1000f1c9

100104f4 <gattc_write_cfm>:
100104f4:	4b0d      	ldr	r3, [pc, #52]	; (1001052c <gattc_write_cfm+0x38>)
100104f6:	b510      	push	{r4, lr}
100104f8:	729a      	strb	r2, [r3, #10]
100104fa:	2203      	movs	r2, #3
100104fc:	2416      	movs	r4, #22
100104fe:	719a      	strb	r2, [r3, #6]
10010500:	2200      	movs	r2, #0
10010502:	70d9      	strb	r1, [r3, #3]
10010504:	490a      	ldr	r1, [pc, #40]	; (10010530 <gattc_write_cfm+0x3c>)
10010506:	701c      	strb	r4, [r3, #0]
10010508:	3c0a      	subs	r4, #10
1001050a:	705c      	strb	r4, [r3, #1]
1001050c:	709c      	strb	r4, [r3, #2]
1001050e:	880c      	ldrh	r4, [r1, #0]
10010510:	8809      	ldrh	r1, [r1, #0]
10010512:	7218      	strb	r0, [r3, #8]
10010514:	0a09      	lsrs	r1, r1, #8
10010516:	0a00      	lsrs	r0, r0, #8
10010518:	711c      	strb	r4, [r3, #4]
1001051a:	7159      	strb	r1, [r3, #5]
1001051c:	7258      	strb	r0, [r3, #9]
1001051e:	71da      	strb	r2, [r3, #7]
10010520:	1c18      	adds	r0, r3, #0
10010522:	210b      	movs	r1, #11
10010524:	4b03      	ldr	r3, [pc, #12]	; (10010534 <gattc_write_cfm+0x40>)
10010526:	4798      	blx	r3
10010528:	bd10      	pop	{r4, pc}
1001052a:	46c0      	nop			; (mov r8, r8)
1001052c:	10019974 	.word	0x10019974
10010530:	10019604 	.word	0x10019604
10010534:	1000f1c9 	.word	0x1000f1c9

10010538 <gattc_att_info_cfm>:
10010538:	b538      	push	{r3, r4, r5, lr}
1001053a:	4c0e      	ldr	r4, [pc, #56]	; (10010574 <gattc_att_info_cfm+0x3c>)
1001053c:	2518      	movs	r5, #24
1001053e:	7323      	strb	r3, [r4, #12]
10010540:	2305      	movs	r3, #5
10010542:	71a3      	strb	r3, [r4, #6]
10010544:	2300      	movs	r3, #0
10010546:	70e1      	strb	r1, [r4, #3]
10010548:	490b      	ldr	r1, [pc, #44]	; (10010578 <gattc_att_info_cfm+0x40>)
1001054a:	7025      	strb	r5, [r4, #0]
1001054c:	3d0c      	subs	r5, #12
1001054e:	7065      	strb	r5, [r4, #1]
10010550:	70a5      	strb	r5, [r4, #2]
10010552:	880d      	ldrh	r5, [r1, #0]
10010554:	8809      	ldrh	r1, [r1, #0]
10010556:	7220      	strb	r0, [r4, #8]
10010558:	0a09      	lsrs	r1, r1, #8
1001055a:	0a00      	lsrs	r0, r0, #8
1001055c:	7161      	strb	r1, [r4, #5]
1001055e:	7260      	strb	r0, [r4, #9]
10010560:	72a2      	strb	r2, [r4, #10]
10010562:	71e3      	strb	r3, [r4, #7]
10010564:	0a12      	lsrs	r2, r2, #8
10010566:	1c20      	adds	r0, r4, #0
10010568:	210d      	movs	r1, #13
1001056a:	4b04      	ldr	r3, [pc, #16]	; (1001057c <gattc_att_info_cfm+0x44>)
1001056c:	7125      	strb	r5, [r4, #4]
1001056e:	72e2      	strb	r2, [r4, #11]
10010570:	4798      	blx	r3
10010572:	bd38      	pop	{r3, r4, r5, pc}
10010574:	10019974 	.word	0x10019974
10010578:	10019604 	.word	0x10019604
1001057c:	1000f1c9 	.word	0x1000f1c9

10010580 <gattc_event_cfm_handler>:
10010580:	220e      	movs	r2, #14
10010582:	b508      	push	{r3, lr}
10010584:	4b0b      	ldr	r3, [pc, #44]	; (100105b4 <gattc_event_cfm_handler+0x34>)
10010586:	701a      	strb	r2, [r3, #0]
10010588:	3a02      	subs	r2, #2
1001058a:	705a      	strb	r2, [r3, #1]
1001058c:	709a      	strb	r2, [r3, #2]
1001058e:	4a0a      	ldr	r2, [pc, #40]	; (100105b8 <gattc_event_cfm_handler+0x38>)
10010590:	70d8      	strb	r0, [r3, #3]
10010592:	8810      	ldrh	r0, [r2, #0]
10010594:	8812      	ldrh	r2, [r2, #0]
10010596:	7219      	strb	r1, [r3, #8]
10010598:	0a12      	lsrs	r2, r2, #8
1001059a:	715a      	strb	r2, [r3, #5]
1001059c:	2202      	movs	r2, #2
1001059e:	719a      	strb	r2, [r3, #6]
100105a0:	2200      	movs	r2, #0
100105a2:	0a09      	lsrs	r1, r1, #8
100105a4:	7118      	strb	r0, [r3, #4]
100105a6:	7259      	strb	r1, [r3, #9]
100105a8:	71da      	strb	r2, [r3, #7]
100105aa:	1c18      	adds	r0, r3, #0
100105ac:	210a      	movs	r1, #10
100105ae:	4b03      	ldr	r3, [pc, #12]	; (100105bc <gattc_event_cfm_handler+0x3c>)
100105b0:	4798      	blx	r3
100105b2:	bd08      	pop	{r3, pc}
100105b4:	10019974 	.word	0x10019974
100105b8:	10019604 	.word	0x10019604
100105bc:	1000f1c9 	.word	0x1000f1c9

100105c0 <gattc_disc_svc_ind_parser>:
100105c0:	b570      	push	{r4, r5, r6, lr}
100105c2:	1c15      	adds	r5, r2, #0
100105c4:	0a00      	lsrs	r0, r0, #8
100105c6:	8010      	strh	r0, [r2, #0]
100105c8:	784b      	ldrb	r3, [r1, #1]
100105ca:	780a      	ldrb	r2, [r1, #0]
100105cc:	021b      	lsls	r3, r3, #8
100105ce:	4313      	orrs	r3, r2
100105d0:	806b      	strh	r3, [r5, #2]
100105d2:	78cb      	ldrb	r3, [r1, #3]
100105d4:	788a      	ldrb	r2, [r1, #2]
100105d6:	021b      	lsls	r3, r3, #8
100105d8:	4313      	orrs	r3, r2
100105da:	80ab      	strh	r3, [r5, #4]
100105dc:	790e      	ldrb	r6, [r1, #4]
100105de:	4b05      	ldr	r3, [pc, #20]	; (100105f4 <gattc_disc_svc_ind_parser+0x34>)
100105e0:	1c30      	adds	r0, r6, #0
100105e2:	1c0c      	adds	r4, r1, #0
100105e4:	4798      	blx	r3
100105e6:	1c32      	adds	r2, r6, #0
100105e8:	71a8      	strb	r0, [r5, #6]
100105ea:	1d61      	adds	r1, r4, #5
100105ec:	1de8      	adds	r0, r5, #7
100105ee:	4b02      	ldr	r3, [pc, #8]	; (100105f8 <gattc_disc_svc_ind_parser+0x38>)
100105f0:	4798      	blx	r3
100105f2:	bd70      	pop	{r4, r5, r6, pc}
100105f4:	1000e57d 	.word	0x1000e57d
100105f8:	10014a2f 	.word	0x10014a2f

100105fc <gattc_disc_svc_incl_ind_parser>:
100105fc:	b570      	push	{r4, r5, r6, lr}
100105fe:	1c15      	adds	r5, r2, #0
10010600:	0a00      	lsrs	r0, r0, #8
10010602:	8010      	strh	r0, [r2, #0]
10010604:	784b      	ldrb	r3, [r1, #1]
10010606:	780a      	ldrb	r2, [r1, #0]
10010608:	021b      	lsls	r3, r3, #8
1001060a:	4313      	orrs	r3, r2
1001060c:	806b      	strh	r3, [r5, #2]
1001060e:	78cb      	ldrb	r3, [r1, #3]
10010610:	788a      	ldrb	r2, [r1, #2]
10010612:	021b      	lsls	r3, r3, #8
10010614:	4313      	orrs	r3, r2
10010616:	80ab      	strh	r3, [r5, #4]
10010618:	794b      	ldrb	r3, [r1, #5]
1001061a:	790a      	ldrb	r2, [r1, #4]
1001061c:	021b      	lsls	r3, r3, #8
1001061e:	4313      	orrs	r3, r2
10010620:	80eb      	strh	r3, [r5, #6]
10010622:	798e      	ldrb	r6, [r1, #6]
10010624:	4b05      	ldr	r3, [pc, #20]	; (1001063c <gattc_disc_svc_incl_ind_parser+0x40>)
10010626:	1c30      	adds	r0, r6, #0
10010628:	1c0c      	adds	r4, r1, #0
1001062a:	4798      	blx	r3
1001062c:	7228      	strb	r0, [r5, #8]
1001062e:	1c28      	adds	r0, r5, #0
10010630:	1c32      	adds	r2, r6, #0
10010632:	1de1      	adds	r1, r4, #7
10010634:	4b02      	ldr	r3, [pc, #8]	; (10010640 <gattc_disc_svc_incl_ind_parser+0x44>)
10010636:	3009      	adds	r0, #9
10010638:	4798      	blx	r3
1001063a:	bd70      	pop	{r4, r5, r6, pc}
1001063c:	1000e57d 	.word	0x1000e57d
10010640:	10014a2f 	.word	0x10014a2f

10010644 <gattc_disc_char_ind_parser>:
10010644:	b570      	push	{r4, r5, r6, lr}
10010646:	1c15      	adds	r5, r2, #0
10010648:	0a00      	lsrs	r0, r0, #8
1001064a:	8010      	strh	r0, [r2, #0]
1001064c:	784b      	ldrb	r3, [r1, #1]
1001064e:	780a      	ldrb	r2, [r1, #0]
10010650:	021b      	lsls	r3, r3, #8
10010652:	4313      	orrs	r3, r2
10010654:	806b      	strh	r3, [r5, #2]
10010656:	78cb      	ldrb	r3, [r1, #3]
10010658:	788a      	ldrb	r2, [r1, #2]
1001065a:	021b      	lsls	r3, r3, #8
1001065c:	4313      	orrs	r3, r2
1001065e:	80ab      	strh	r3, [r5, #4]
10010660:	790b      	ldrb	r3, [r1, #4]
10010662:	1c0c      	adds	r4, r1, #0
10010664:	71ab      	strb	r3, [r5, #6]
10010666:	794e      	ldrb	r6, [r1, #5]
10010668:	4b05      	ldr	r3, [pc, #20]	; (10010680 <gattc_disc_char_ind_parser+0x3c>)
1001066a:	1c30      	adds	r0, r6, #0
1001066c:	4798      	blx	r3
1001066e:	71e8      	strb	r0, [r5, #7]
10010670:	1c28      	adds	r0, r5, #0
10010672:	1c32      	adds	r2, r6, #0
10010674:	1da1      	adds	r1, r4, #6
10010676:	4b03      	ldr	r3, [pc, #12]	; (10010684 <gattc_disc_char_ind_parser+0x40>)
10010678:	3008      	adds	r0, #8
1001067a:	4798      	blx	r3
1001067c:	bd70      	pop	{r4, r5, r6, pc}
1001067e:	46c0      	nop			; (mov r8, r8)
10010680:	1000e57d 	.word	0x1000e57d
10010684:	10014a2f 	.word	0x10014a2f

10010688 <gattc_disc_char_desc_ind_parser>:
10010688:	b570      	push	{r4, r5, r6, lr}
1001068a:	1c15      	adds	r5, r2, #0
1001068c:	0a00      	lsrs	r0, r0, #8
1001068e:	8010      	strh	r0, [r2, #0]
10010690:	784b      	ldrb	r3, [r1, #1]
10010692:	780a      	ldrb	r2, [r1, #0]
10010694:	021b      	lsls	r3, r3, #8
10010696:	4313      	orrs	r3, r2
10010698:	806b      	strh	r3, [r5, #2]
1001069a:	788e      	ldrb	r6, [r1, #2]
1001069c:	4b05      	ldr	r3, [pc, #20]	; (100106b4 <gattc_disc_char_desc_ind_parser+0x2c>)
1001069e:	1c30      	adds	r0, r6, #0
100106a0:	1c0c      	adds	r4, r1, #0
100106a2:	4798      	blx	r3
100106a4:	1c32      	adds	r2, r6, #0
100106a6:	7128      	strb	r0, [r5, #4]
100106a8:	1ce1      	adds	r1, r4, #3
100106aa:	1d68      	adds	r0, r5, #5
100106ac:	4b02      	ldr	r3, [pc, #8]	; (100106b8 <gattc_disc_char_desc_ind_parser+0x30>)
100106ae:	4798      	blx	r3
100106b0:	bd70      	pop	{r4, r5, r6, pc}
100106b2:	46c0      	nop			; (mov r8, r8)
100106b4:	1000e57d 	.word	0x1000e57d
100106b8:	10014a2f 	.word	0x10014a2f

100106bc <gattc_event_ind_and_notification_parser>:
100106bc:	b510      	push	{r4, lr}
100106be:	780c      	ldrb	r4, [r1, #0]
100106c0:	1c13      	adds	r3, r2, #0
100106c2:	2c12      	cmp	r4, #18
100106c4:	d10e      	bne.n	100106e4 <gattc_event_ind_and_notification_parser+0x28>
100106c6:	0a00      	lsrs	r0, r0, #8
100106c8:	8010      	strh	r0, [r2, #0]
100106ca:	788a      	ldrb	r2, [r1, #2]
100106cc:	709a      	strb	r2, [r3, #2]
100106ce:	7948      	ldrb	r0, [r1, #5]
100106d0:	790c      	ldrb	r4, [r1, #4]
100106d2:	0200      	lsls	r0, r0, #8
100106d4:	4320      	orrs	r0, r4
100106d6:	8098      	strh	r0, [r3, #4]
100106d8:	3106      	adds	r1, #6
100106da:	1d98      	adds	r0, r3, #6
100106dc:	4b0b      	ldr	r3, [pc, #44]	; (1001070c <gattc_event_ind_and_notification_parser+0x50>)
100106de:	4798      	blx	r3
100106e0:	221b      	movs	r2, #27
100106e2:	e010      	b.n	10010706 <gattc_event_ind_and_notification_parser+0x4a>
100106e4:	2200      	movs	r2, #0
100106e6:	2c13      	cmp	r4, #19
100106e8:	d10d      	bne.n	10010706 <gattc_event_ind_and_notification_parser+0x4a>
100106ea:	0a00      	lsrs	r0, r0, #8
100106ec:	8018      	strh	r0, [r3, #0]
100106ee:	788a      	ldrb	r2, [r1, #2]
100106f0:	709a      	strb	r2, [r3, #2]
100106f2:	7908      	ldrb	r0, [r1, #4]
100106f4:	78cc      	ldrb	r4, [r1, #3]
100106f6:	0200      	lsls	r0, r0, #8
100106f8:	4320      	orrs	r0, r4
100106fa:	8098      	strh	r0, [r3, #4]
100106fc:	3106      	adds	r1, #6
100106fe:	1d98      	adds	r0, r3, #6
10010700:	4b02      	ldr	r3, [pc, #8]	; (1001070c <gattc_event_ind_and_notification_parser+0x50>)
10010702:	4798      	blx	r3
10010704:	221c      	movs	r2, #28
10010706:	1c10      	adds	r0, r2, #0
10010708:	bd10      	pop	{r4, pc}
1001070a:	46c0      	nop			; (mov r8, r8)
1001070c:	10014a2f 	.word	0x10014a2f

10010710 <gattc_complete_evt_handler>:
10010710:	b500      	push	{lr}
10010712:	0a00      	lsrs	r0, r0, #8
10010714:	8010      	strh	r0, [r2, #0]
10010716:	7808      	ldrb	r0, [r1, #0]
10010718:	7090      	strb	r0, [r2, #2]
1001071a:	784b      	ldrb	r3, [r1, #1]
1001071c:	3801      	subs	r0, #1
1001071e:	70d3      	strb	r3, [r2, #3]
10010720:	2813      	cmp	r0, #19
10010722:	d82c      	bhi.n	1001077e <gattc_complete_evt_handler+0x6e>
10010724:	f001 faec 	bl	10011d00 <__gnu_thumb1_case_uqi>
10010728:	0a0a0a0c 	.word	0x0a0a0a0c
1001072c:	210a0a0a 	.word	0x210a0a0a
10010730:	111f2121 	.word	0x111f2121
10010734:	2b111111 	.word	0x2b111111
10010738:	2919132b 	.word	0x2919132b
1001073c:	2017      	movs	r0, #23
1001073e:	e01f      	b.n	10010780 <gattc_complete_evt_handler+0x70>
10010740:	2024      	movs	r0, #36	; 0x24
10010742:	2b00      	cmp	r3, #0
10010744:	d11c      	bne.n	10010780 <gattc_complete_evt_handler+0x70>
10010746:	3017      	adds	r0, #23
10010748:	e01a      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001074a:	2025      	movs	r0, #37	; 0x25
1001074c:	e018      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001074e:	4a0d      	ldr	r2, [pc, #52]	; (10010784 <gattc_complete_evt_handler+0x74>)
10010750:	201d      	movs	r0, #29
10010752:	6813      	ldr	r3, [r2, #0]
10010754:	3b01      	subs	r3, #1
10010756:	6013      	str	r3, [r2, #0]
10010758:	e012      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001075a:	4a0a      	ldr	r2, [pc, #40]	; (10010784 <gattc_complete_evt_handler+0x74>)
1001075c:	201e      	movs	r0, #30
1001075e:	6813      	ldr	r3, [r2, #0]
10010760:	3b01      	subs	r3, #1
10010762:	6013      	str	r3, [r2, #0]
10010764:	e00c      	b.n	10010780 <gattc_complete_evt_handler+0x70>
10010766:	2019      	movs	r0, #25
10010768:	e00a      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001076a:	203b      	movs	r0, #59	; 0x3b
1001076c:	2b00      	cmp	r3, #0
1001076e:	d007      	beq.n	10010780 <gattc_complete_evt_handler+0x70>
10010770:	2182      	movs	r1, #130	; 0x82
10010772:	0089      	lsls	r1, r1, #2
10010774:	5453      	strb	r3, [r2, r1]
10010776:	3823      	subs	r0, #35	; 0x23
10010778:	e002      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001077a:	2021      	movs	r0, #33	; 0x21
1001077c:	e000      	b.n	10010780 <gattc_complete_evt_handler+0x70>
1001077e:	2000      	movs	r0, #0
10010780:	bd00      	pop	{pc}
10010782:	46c0      	nop			; (mov r8, r8)
10010784:	1001870c 	.word	0x1001870c

10010788 <gattc_event_mtu_changed_ind_parser>:
10010788:	0a00      	lsrs	r0, r0, #8
1001078a:	8010      	strh	r0, [r2, #0]
1001078c:	784b      	ldrb	r3, [r1, #1]
1001078e:	7809      	ldrb	r1, [r1, #0]
10010790:	021b      	lsls	r3, r3, #8
10010792:	430b      	orrs	r3, r1
10010794:	8053      	strh	r3, [r2, #2]
10010796:	4770      	bx	lr

10010798 <gattc_read_ind_parser>:
10010798:	0a00      	lsrs	r0, r0, #8
1001079a:	b508      	push	{r3, lr}
1001079c:	8010      	strh	r0, [r2, #0]
1001079e:	1c13      	adds	r3, r2, #0
100107a0:	2282      	movs	r2, #130	; 0x82
100107a2:	2000      	movs	r0, #0
100107a4:	0092      	lsls	r2, r2, #2
100107a6:	5498      	strb	r0, [r3, r2]
100107a8:	784a      	ldrb	r2, [r1, #1]
100107aa:	7808      	ldrb	r0, [r1, #0]
100107ac:	0212      	lsls	r2, r2, #8
100107ae:	4302      	orrs	r2, r0
100107b0:	805a      	strh	r2, [r3, #2]
100107b2:	78ca      	ldrb	r2, [r1, #3]
100107b4:	7888      	ldrb	r0, [r1, #2]
100107b6:	0212      	lsls	r2, r2, #8
100107b8:	4302      	orrs	r2, r0
100107ba:	80da      	strh	r2, [r3, #6]
100107bc:	794a      	ldrb	r2, [r1, #5]
100107be:	7908      	ldrb	r0, [r1, #4]
100107c0:	0212      	lsls	r2, r2, #8
100107c2:	4302      	orrs	r2, r0
100107c4:	809a      	strh	r2, [r3, #4]
100107c6:	3308      	adds	r3, #8
100107c8:	1c18      	adds	r0, r3, #0
100107ca:	3106      	adds	r1, #6
100107cc:	4b01      	ldr	r3, [pc, #4]	; (100107d4 <gattc_read_ind_parser+0x3c>)
100107ce:	4798      	blx	r3
100107d0:	bd08      	pop	{r3, pc}
100107d2:	46c0      	nop			; (mov r8, r8)
100107d4:	10014a2f 	.word	0x10014a2f

100107d8 <gattc_svc_changed_cfg_ind_parser>:
100107d8:	0a00      	lsrs	r0, r0, #8
100107da:	8010      	strh	r0, [r2, #0]
100107dc:	784b      	ldrb	r3, [r1, #1]
100107de:	7809      	ldrb	r1, [r1, #0]
100107e0:	021b      	lsls	r3, r3, #8
100107e2:	430b      	orrs	r3, r1
100107e4:	8053      	strh	r3, [r2, #2]
100107e6:	4770      	bx	lr

100107e8 <init_gattc_task_module>:
100107e8:	2300      	movs	r3, #0
100107ea:	4a02      	ldr	r2, [pc, #8]	; (100107f4 <init_gattc_task_module+0xc>)
100107ec:	8013      	strh	r3, [r2, #0]
100107ee:	4a02      	ldr	r2, [pc, #8]	; (100107f8 <init_gattc_task_module+0x10>)
100107f0:	8013      	strh	r3, [r2, #0]
100107f2:	4770      	bx	lr
100107f4:	10018706 	.word	0x10018706
100107f8:	10018708 	.word	0x10018708

100107fc <gattm_add_svc_req_handler>:
100107fc:	2200      	movs	r2, #0
100107fe:	210b      	movs	r1, #11
10010800:	b5f0      	push	{r4, r5, r6, r7, lr}
10010802:	1c04      	adds	r4, r0, #0
10010804:	7943      	ldrb	r3, [r0, #5]
10010806:	b085      	sub	sp, #20
10010808:	9301      	str	r3, [sp, #4]
1001080a:	ab02      	add	r3, sp, #8
1001080c:	71da      	strb	r2, [r3, #7]
1001080e:	4b37      	ldr	r3, [pc, #220]	; (100108ec <gattm_add_svc_req_handler+0xf0>)
10010810:	7059      	strb	r1, [r3, #1]
10010812:	7099      	strb	r1, [r3, #2]
10010814:	4936      	ldr	r1, [pc, #216]	; (100108f0 <gattm_add_svc_req_handler+0xf4>)
10010816:	701a      	strb	r2, [r3, #0]
10010818:	8808      	ldrh	r0, [r1, #0]
1001081a:	8809      	ldrh	r1, [r1, #0]
1001081c:	70da      	strb	r2, [r3, #3]
1001081e:	0a09      	lsrs	r1, r1, #8
10010820:	7118      	strb	r0, [r3, #4]
10010822:	7159      	strb	r1, [r3, #5]
10010824:	8821      	ldrh	r1, [r4, #0]
10010826:	7219      	strb	r1, [r3, #8]
10010828:	8821      	ldrh	r1, [r4, #0]
1001082a:	0a09      	lsrs	r1, r1, #8
1001082c:	7259      	strb	r1, [r3, #9]
1001082e:	8861      	ldrh	r1, [r4, #2]
10010830:	7299      	strb	r1, [r3, #10]
10010832:	8861      	ldrh	r1, [r4, #2]
10010834:	0a09      	lsrs	r1, r1, #8
10010836:	72d9      	strb	r1, [r3, #11]
10010838:	7921      	ldrb	r1, [r4, #4]
1001083a:	7319      	strb	r1, [r3, #12]
1001083c:	4669      	mov	r1, sp
1001083e:	7909      	ldrb	r1, [r1, #4]
10010840:	7359      	strb	r1, [r3, #13]
10010842:	18a1      	adds	r1, r4, r2
10010844:	7988      	ldrb	r0, [r1, #6]
10010846:	1899      	adds	r1, r3, r2
10010848:	3201      	adds	r2, #1
1001084a:	7388      	strb	r0, [r1, #14]
1001084c:	2a10      	cmp	r2, #16
1001084e:	d1f8      	bne.n	10010842 <gattm_add_svc_req_handler+0x46>
10010850:	1c27      	adds	r7, r4, #0
10010852:	2300      	movs	r3, #0
10010854:	251e      	movs	r5, #30
10010856:	3716      	adds	r7, #22
10010858:	9300      	str	r3, [sp, #0]
1001085a:	9b00      	ldr	r3, [sp, #0]
1001085c:	9a01      	ldr	r2, [sp, #4]
1001085e:	4e23      	ldr	r6, [pc, #140]	; (100108ec <gattm_add_svc_req_handler+0xf0>)
10010860:	4293      	cmp	r3, r2
10010862:	da21      	bge.n	100108a8 <gattm_add_svc_req_handler+0xac>
10010864:	1c39      	adds	r1, r7, #0
10010866:	1970      	adds	r0, r6, r5
10010868:	2210      	movs	r2, #16
1001086a:	4b22      	ldr	r3, [pc, #136]	; (100108f4 <gattm_add_svc_req_handler+0xf8>)
1001086c:	4798      	blx	r3
1001086e:	1c2b      	adds	r3, r5, #0
10010870:	8a3a      	ldrh	r2, [r7, #16]
10010872:	3310      	adds	r3, #16
10010874:	b29b      	uxth	r3, r3
10010876:	54f2      	strb	r2, [r6, r3]
10010878:	1c2b      	adds	r3, r5, #0
1001087a:	8a3a      	ldrh	r2, [r7, #16]
1001087c:	3311      	adds	r3, #17
1001087e:	b29b      	uxth	r3, r3
10010880:	0a12      	lsrs	r2, r2, #8
10010882:	54f2      	strb	r2, [r6, r3]
10010884:	1c2a      	adds	r2, r5, #0
10010886:	1c2b      	adds	r3, r5, #0
10010888:	8a79      	ldrh	r1, [r7, #18]
1001088a:	3212      	adds	r2, #18
1001088c:	b292      	uxth	r2, r2
1001088e:	54b1      	strb	r1, [r6, r2]
10010890:	8a7a      	ldrh	r2, [r7, #18]
10010892:	3313      	adds	r3, #19
10010894:	b29b      	uxth	r3, r3
10010896:	0a12      	lsrs	r2, r2, #8
10010898:	54f2      	strb	r2, [r6, r3]
1001089a:	9b00      	ldr	r3, [sp, #0]
1001089c:	3514      	adds	r5, #20
1001089e:	3301      	adds	r3, #1
100108a0:	b2ad      	uxth	r5, r5
100108a2:	9300      	str	r3, [sp, #0]
100108a4:	3714      	adds	r7, #20
100108a6:	e7d8      	b.n	1001085a <gattm_add_svc_req_handler+0x5e>
100108a8:	2114      	movs	r1, #20
100108aa:	4d13      	ldr	r5, [pc, #76]	; (100108f8 <gattm_add_svc_req_handler+0xfc>)
100108ac:	4b13      	ldr	r3, [pc, #76]	; (100108fc <gattm_add_svc_req_handler+0x100>)
100108ae:	4351      	muls	r1, r2
100108b0:	802b      	strh	r3, [r5, #0]
100108b2:	230b      	movs	r3, #11
100108b4:	311e      	adds	r1, #30
100108b6:	80ab      	strh	r3, [r5, #4]
100108b8:	1c0b      	adds	r3, r1, #0
100108ba:	3b08      	subs	r3, #8
100108bc:	71b3      	strb	r3, [r6, #6]
100108be:	121b      	asrs	r3, r3, #8
100108c0:	71f3      	strb	r3, [r6, #7]
100108c2:	1c30      	adds	r0, r6, #0
100108c4:	4b0e      	ldr	r3, [pc, #56]	; (10010900 <gattm_add_svc_req_handler+0x104>)
100108c6:	4798      	blx	r3
100108c8:	ab02      	add	r3, sp, #8
100108ca:	1dde      	adds	r6, r3, #7
100108cc:	1c30      	adds	r0, r6, #0
100108ce:	4b0d      	ldr	r3, [pc, #52]	; (10010904 <gattm_add_svc_req_handler+0x108>)
100108d0:	4798      	blx	r3
100108d2:	7833      	ldrb	r3, [r6, #0]
100108d4:	20e2      	movs	r0, #226	; 0xe2
100108d6:	2b00      	cmp	r3, #0
100108d8:	d106      	bne.n	100108e8 <gattm_add_svc_req_handler+0xec>
100108da:	68aa      	ldr	r2, [r5, #8]
100108dc:	7853      	ldrb	r3, [r2, #1]
100108de:	7811      	ldrb	r1, [r2, #0]
100108e0:	021b      	lsls	r3, r3, #8
100108e2:	430b      	orrs	r3, r1
100108e4:	8023      	strh	r3, [r4, #0]
100108e6:	7890      	ldrb	r0, [r2, #2]
100108e8:	b005      	add	sp, #20
100108ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108ec:	10019974 	.word	0x10019974
100108f0:	10019604 	.word	0x10019604
100108f4:	10014a2f 	.word	0x10014a2f
100108f8:	100195f8 	.word	0x100195f8
100108fc:	00000b01 	.word	0x00000b01
10010900:	1000f1c9 	.word	0x1000f1c9
10010904:	1000f22d 	.word	0x1000f22d

10010908 <gattm_add_attribute_req_handler>:
10010908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001090a:	1c1f      	adds	r7, r3, #0
1001090c:	4b16      	ldr	r3, [pc, #88]	; (10010968 <gattm_add_attribute_req_handler+0x60>)
1001090e:	9100      	str	r1, [sp, #0]
10010910:	9201      	str	r2, [sp, #4]
10010912:	1c05      	adds	r5, r0, #0
10010914:	7946      	ldrb	r6, [r0, #5]
10010916:	6818      	ldr	r0, [r3, #0]
10010918:	2114      	movs	r1, #20
1001091a:	4b14      	ldr	r3, [pc, #80]	; (1001096c <gattm_add_attribute_req_handler+0x64>)
1001091c:	382a      	subs	r0, #42	; 0x2a
1001091e:	4798      	blx	r3
10010920:	2311      	movs	r3, #17
10010922:	4286      	cmp	r6, r0
10010924:	d21e      	bcs.n	10010964 <gattm_add_attribute_req_handler+0x5c>
10010926:	2414      	movs	r4, #20
10010928:	4366      	muls	r6, r4
1001092a:	19a8      	adds	r0, r5, r6
1001092c:	2100      	movs	r1, #0
1001092e:	2210      	movs	r2, #16
10010930:	4b0f      	ldr	r3, [pc, #60]	; (10010970 <gattm_add_attribute_req_handler+0x68>)
10010932:	3016      	adds	r0, #22
10010934:	4798      	blx	r3
10010936:	7968      	ldrb	r0, [r5, #5]
10010938:	1c3a      	adds	r2, r7, #0
1001093a:	4360      	muls	r0, r4
1001093c:	1828      	adds	r0, r5, r0
1001093e:	4b0d      	ldr	r3, [pc, #52]	; (10010974 <gattm_add_attribute_req_handler+0x6c>)
10010940:	3016      	adds	r0, #22
10010942:	9908      	ldr	r1, [sp, #32]
10010944:	4798      	blx	r3
10010946:	466a      	mov	r2, sp
10010948:	796b      	ldrb	r3, [r5, #5]
1001094a:	8812      	ldrh	r2, [r2, #0]
1001094c:	435c      	muls	r4, r3
1001094e:	192c      	adds	r4, r5, r4
10010950:	8522      	strh	r2, [r4, #40]	; 0x28
10010952:	466a      	mov	r2, sp
10010954:	8892      	ldrh	r2, [r2, #4]
10010956:	84e2      	strh	r2, [r4, #38]	; 0x26
10010958:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001095a:	8013      	strh	r3, [r2, #0]
1001095c:	796b      	ldrb	r3, [r5, #5]
1001095e:	3301      	adds	r3, #1
10010960:	716b      	strb	r3, [r5, #5]
10010962:	2300      	movs	r3, #0
10010964:	1c18      	adds	r0, r3, #0
10010966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010968:	1001867c 	.word	0x1001867c
1001096c:	10011d15 	.word	0x10011d15
10010970:	10014a41 	.word	0x10014a41
10010974:	10014a2f 	.word	0x10014a2f

10010978 <gattm_att_set_value_req_handler>:
10010978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001097a:	466b      	mov	r3, sp
1001097c:	1dde      	adds	r6, r3, #7
1001097e:	2300      	movs	r3, #0
10010980:	1c0d      	adds	r5, r1, #0
10010982:	210c      	movs	r1, #12
10010984:	270b      	movs	r7, #11
10010986:	4c17      	ldr	r4, [pc, #92]	; (100109e4 <gattm_att_set_value_req_handler+0x6c>)
10010988:	7033      	strb	r3, [r6, #0]
1001098a:	70e3      	strb	r3, [r4, #3]
1001098c:	4b16      	ldr	r3, [pc, #88]	; (100109e8 <gattm_att_set_value_req_handler+0x70>)
1001098e:	7021      	strb	r1, [r4, #0]
10010990:	8819      	ldrh	r1, [r3, #0]
10010992:	881b      	ldrh	r3, [r3, #0]
10010994:	7220      	strb	r0, [r4, #8]
10010996:	0a1b      	lsrs	r3, r3, #8
10010998:	7163      	strb	r3, [r4, #5]
1001099a:	0a00      	lsrs	r0, r0, #8
1001099c:	0a2b      	lsrs	r3, r5, #8
1001099e:	7121      	strb	r1, [r4, #4]
100109a0:	7260      	strb	r0, [r4, #9]
100109a2:	1c11      	adds	r1, r2, #0
100109a4:	72a5      	strb	r5, [r4, #10]
100109a6:	1c2a      	adds	r2, r5, #0
100109a8:	72e3      	strb	r3, [r4, #11]
100109aa:	350c      	adds	r5, #12
100109ac:	4b0f      	ldr	r3, [pc, #60]	; (100109ec <gattm_att_set_value_req_handler+0x74>)
100109ae:	4810      	ldr	r0, [pc, #64]	; (100109f0 <gattm_att_set_value_req_handler+0x78>)
100109b0:	7067      	strb	r7, [r4, #1]
100109b2:	70a7      	strb	r7, [r4, #2]
100109b4:	4798      	blx	r3
100109b6:	b2a9      	uxth	r1, r5
100109b8:	4b0e      	ldr	r3, [pc, #56]	; (100109f4 <gattm_att_set_value_req_handler+0x7c>)
100109ba:	4d0f      	ldr	r5, [pc, #60]	; (100109f8 <gattm_att_set_value_req_handler+0x80>)
100109bc:	1c20      	adds	r0, r4, #0
100109be:	802b      	strh	r3, [r5, #0]
100109c0:	1c0b      	adds	r3, r1, #0
100109c2:	3b08      	subs	r3, #8
100109c4:	71a3      	strb	r3, [r4, #6]
100109c6:	121b      	asrs	r3, r3, #8
100109c8:	71e3      	strb	r3, [r4, #7]
100109ca:	4b0c      	ldr	r3, [pc, #48]	; (100109fc <gattm_att_set_value_req_handler+0x84>)
100109cc:	80af      	strh	r7, [r5, #4]
100109ce:	4798      	blx	r3
100109d0:	1c30      	adds	r0, r6, #0
100109d2:	4b0b      	ldr	r3, [pc, #44]	; (10010a00 <gattm_att_set_value_req_handler+0x88>)
100109d4:	4798      	blx	r3
100109d6:	7833      	ldrb	r3, [r6, #0]
100109d8:	20e2      	movs	r0, #226	; 0xe2
100109da:	2b00      	cmp	r3, #0
100109dc:	d101      	bne.n	100109e2 <gattm_att_set_value_req_handler+0x6a>
100109de:	68ab      	ldr	r3, [r5, #8]
100109e0:	7898      	ldrb	r0, [r3, #2]
100109e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100109e4:	10019974 	.word	0x10019974
100109e8:	10019604 	.word	0x10019604
100109ec:	10014a2f 	.word	0x10014a2f
100109f0:	10019980 	.word	0x10019980
100109f4:	00000b0d 	.word	0x00000b0d
100109f8:	100195f8 	.word	0x100195f8
100109fc:	1000f1c9 	.word	0x1000f1c9
10010a00:	1000f22d 	.word	0x1000f22d

10010a04 <gattm_att_get_value_req_handler>:
10010a04:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a06:	b085      	sub	sp, #20
10010a08:	9201      	str	r2, [sp, #4]
10010a0a:	220a      	movs	r2, #10
10010a0c:	1c04      	adds	r4, r0, #0
10010a0e:	481d      	ldr	r0, [pc, #116]	; (10010a84 <gattm_att_get_value_req_handler+0x80>)
10010a10:	ab02      	add	r3, sp, #8
10010a12:	1dde      	adds	r6, r3, #7
10010a14:	7002      	strb	r2, [r0, #0]
10010a16:	2300      	movs	r3, #0
10010a18:	220b      	movs	r2, #11
10010a1a:	4d1b      	ldr	r5, [pc, #108]	; (10010a88 <gattm_att_get_value_req_handler+0x84>)
10010a1c:	1c0f      	adds	r7, r1, #0
10010a1e:	8829      	ldrh	r1, [r5, #0]
10010a20:	882d      	ldrh	r5, [r5, #0]
10010a22:	7101      	strb	r1, [r0, #4]
10010a24:	0a2d      	lsrs	r5, r5, #8
10010a26:	7145      	strb	r5, [r0, #5]
10010a28:	0a25      	lsrs	r5, r4, #8
10010a2a:	7245      	strb	r5, [r0, #9]
10010a2c:	4917      	ldr	r1, [pc, #92]	; (10010a8c <gattm_att_get_value_req_handler+0x88>)
10010a2e:	4d18      	ldr	r5, [pc, #96]	; (10010a90 <gattm_att_get_value_req_handler+0x8c>)
10010a30:	7033      	strb	r3, [r6, #0]
10010a32:	7042      	strb	r2, [r0, #1]
10010a34:	7082      	strb	r2, [r0, #2]
10010a36:	70c3      	strb	r3, [r0, #3]
10010a38:	8029      	strh	r1, [r5, #0]
10010a3a:	80aa      	strh	r2, [r5, #4]
10010a3c:	71c3      	strb	r3, [r0, #7]
10010a3e:	3a09      	subs	r2, #9
10010a40:	210a      	movs	r1, #10
10010a42:	4b14      	ldr	r3, [pc, #80]	; (10010a94 <gattm_att_get_value_req_handler+0x90>)
10010a44:	7182      	strb	r2, [r0, #6]
10010a46:	7204      	strb	r4, [r0, #8]
10010a48:	4798      	blx	r3
10010a4a:	1c30      	adds	r0, r6, #0
10010a4c:	4b12      	ldr	r3, [pc, #72]	; (10010a98 <gattm_att_get_value_req_handler+0x94>)
10010a4e:	4798      	blx	r3
10010a50:	7833      	ldrb	r3, [r6, #0]
10010a52:	20e2      	movs	r0, #226	; 0xe2
10010a54:	2b00      	cmp	r3, #0
10010a56:	d112      	bne.n	10010a7e <gattm_att_get_value_req_handler+0x7a>
10010a58:	68a9      	ldr	r1, [r5, #8]
10010a5a:	9801      	ldr	r0, [sp, #4]
10010a5c:	784d      	ldrb	r5, [r1, #1]
10010a5e:	780b      	ldrb	r3, [r1, #0]
10010a60:	78ca      	ldrb	r2, [r1, #3]
10010a62:	022d      	lsls	r5, r5, #8
10010a64:	431d      	orrs	r5, r3
10010a66:	788b      	ldrb	r3, [r1, #2]
10010a68:	0212      	lsls	r2, r2, #8
10010a6a:	431a      	orrs	r2, r3
10010a6c:	803a      	strh	r2, [r7, #0]
10010a6e:	790e      	ldrb	r6, [r1, #4]
10010a70:	4b0a      	ldr	r3, [pc, #40]	; (10010a9c <gattm_att_get_value_req_handler+0x98>)
10010a72:	3105      	adds	r1, #5
10010a74:	4798      	blx	r3
10010a76:	20e2      	movs	r0, #226	; 0xe2
10010a78:	42ac      	cmp	r4, r5
10010a7a:	d100      	bne.n	10010a7e <gattm_att_get_value_req_handler+0x7a>
10010a7c:	1c30      	adds	r0, r6, #0
10010a7e:	b005      	add	sp, #20
10010a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a82:	46c0      	nop			; (mov r8, r8)
10010a84:	10019974 	.word	0x10019974
10010a88:	10019604 	.word	0x10019604
10010a8c:	00000b0b 	.word	0x00000b0b
10010a90:	100195f8 	.word	0x100195f8
10010a94:	1000f1c9 	.word	0x1000f1c9
10010a98:	1000f22d 	.word	0x1000f22d
10010a9c:	10014a2f 	.word	0x10014a2f

10010aa0 <htpt_enable_rsp_handler>:
10010aa0:	780b      	ldrb	r3, [r1, #0]
10010aa2:	7013      	strb	r3, [r2, #0]
10010aa4:	784b      	ldrb	r3, [r1, #1]
10010aa6:	7053      	strb	r3, [r2, #1]
10010aa8:	4770      	bx	lr

10010aaa <htpt_temp_send_rsp_handler>:
10010aaa:	780b      	ldrb	r3, [r1, #0]
10010aac:	7013      	strb	r3, [r2, #0]
10010aae:	4770      	bx	lr

10010ab0 <htpt_meas_intv_upd_rsp_handler>:
10010ab0:	780b      	ldrb	r3, [r1, #0]
10010ab2:	7013      	strb	r3, [r2, #0]
10010ab4:	4770      	bx	lr

10010ab6 <htpt_meas_intv_chg_req_ind_handler>:
10010ab6:	78cb      	ldrb	r3, [r1, #3]
10010ab8:	7889      	ldrb	r1, [r1, #2]
10010aba:	021b      	lsls	r3, r3, #8
10010abc:	430b      	orrs	r3, r1
10010abe:	8013      	strh	r3, [r2, #0]
10010ac0:	4770      	bx	lr

10010ac2 <htpt_cfg_indntf_ind_handler>:
10010ac2:	780b      	ldrb	r3, [r1, #0]
10010ac4:	7013      	strb	r3, [r2, #0]
10010ac6:	784b      	ldrb	r3, [r1, #1]
10010ac8:	7053      	strb	r3, [r2, #1]
10010aca:	4770      	bx	lr

10010acc <pow>:
10010acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ace:	465f      	mov	r7, fp
10010ad0:	464d      	mov	r5, r9
10010ad2:	4656      	mov	r6, sl
10010ad4:	4644      	mov	r4, r8
10010ad6:	b4f0      	push	{r4, r5, r6, r7}
10010ad8:	b091      	sub	sp, #68	; 0x44
10010ada:	001f      	movs	r7, r3
10010adc:	0004      	movs	r4, r0
10010ade:	000d      	movs	r5, r1
10010ae0:	0016      	movs	r6, r2
10010ae2:	f000 f9af 	bl	10010e44 <__ieee754_pow>
10010ae6:	4bcf      	ldr	r3, [pc, #828]	; (10010e24 <pow+0x358>)
10010ae8:	9002      	str	r0, [sp, #8]
10010aea:	9103      	str	r1, [sp, #12]
10010aec:	469b      	mov	fp, r3
10010aee:	781b      	ldrb	r3, [r3, #0]
10010af0:	b25b      	sxtb	r3, r3
10010af2:	4699      	mov	r9, r3
10010af4:	3301      	adds	r3, #1
10010af6:	d04f      	beq.n	10010b98 <pow+0xcc>
10010af8:	0032      	movs	r2, r6
10010afa:	003b      	movs	r3, r7
10010afc:	0030      	movs	r0, r6
10010afe:	0039      	movs	r1, r7
10010b00:	f003 fd82 	bl	10014608 <__aeabi_dcmpun>
10010b04:	9000      	str	r0, [sp, #0]
10010b06:	2800      	cmp	r0, #0
10010b08:	d146      	bne.n	10010b98 <pow+0xcc>
10010b0a:	0022      	movs	r2, r4
10010b0c:	002b      	movs	r3, r5
10010b0e:	0020      	movs	r0, r4
10010b10:	0029      	movs	r1, r5
10010b12:	f003 fd79 	bl	10014608 <__aeabi_dcmpun>
10010b16:	2200      	movs	r2, #0
10010b18:	4682      	mov	sl, r0
10010b1a:	2800      	cmp	r0, #0
10010b1c:	d134      	bne.n	10010b88 <pow+0xbc>
10010b1e:	2300      	movs	r3, #0
10010b20:	0020      	movs	r0, r4
10010b22:	0029      	movs	r1, r5
10010b24:	f001 fa7c 	bl	10012020 <__aeabi_dcmpeq>
10010b28:	2800      	cmp	r0, #0
10010b2a:	d03a      	beq.n	10010ba2 <pow+0xd6>
10010b2c:	2200      	movs	r2, #0
10010b2e:	2300      	movs	r3, #0
10010b30:	0030      	movs	r0, r6
10010b32:	0039      	movs	r1, r7
10010b34:	f001 fa74 	bl	10012020 <__aeabi_dcmpeq>
10010b38:	9005      	str	r0, [sp, #20]
10010b3a:	2800      	cmp	r0, #0
10010b3c:	d100      	bne.n	10010b40 <pow+0x74>
10010b3e:	e074      	b.n	10010c2a <pow+0x15e>
10010b40:	ab06      	add	r3, sp, #24
10010b42:	4698      	mov	r8, r3
10010b44:	2301      	movs	r3, #1
10010b46:	4642      	mov	r2, r8
10010b48:	9306      	str	r3, [sp, #24]
10010b4a:	4bb7      	ldr	r3, [pc, #732]	; (10010e28 <pow+0x35c>)
10010b4c:	6053      	str	r3, [r2, #4]
10010b4e:	4643      	mov	r3, r8
10010b50:	4652      	mov	r2, sl
10010b52:	609c      	str	r4, [r3, #8]
10010b54:	60dd      	str	r5, [r3, #12]
10010b56:	621a      	str	r2, [r3, #32]
10010b58:	611e      	str	r6, [r3, #16]
10010b5a:	615f      	str	r7, [r3, #20]
10010b5c:	4642      	mov	r2, r8
10010b5e:	2300      	movs	r3, #0
10010b60:	2400      	movs	r4, #0
10010b62:	6193      	str	r3, [r2, #24]
10010b64:	61d4      	str	r4, [r2, #28]
10010b66:	464b      	mov	r3, r9
10010b68:	2b00      	cmp	r3, #0
10010b6a:	d100      	bne.n	10010b6e <pow+0xa2>
10010b6c:	e094      	b.n	10010c98 <pow+0x1cc>
10010b6e:	2300      	movs	r3, #0
10010b70:	4cae      	ldr	r4, [pc, #696]	; (10010e2c <pow+0x360>)
10010b72:	9300      	str	r3, [sp, #0]
10010b74:	9401      	str	r4, [sp, #4]
10010b76:	9800      	ldr	r0, [sp, #0]
10010b78:	9901      	ldr	r1, [sp, #4]
10010b7a:	b011      	add	sp, #68	; 0x44
10010b7c:	bc3c      	pop	{r2, r3, r4, r5}
10010b7e:	4690      	mov	r8, r2
10010b80:	4699      	mov	r9, r3
10010b82:	46a2      	mov	sl, r4
10010b84:	46ab      	mov	fp, r5
10010b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b88:	2300      	movs	r3, #0
10010b8a:	0030      	movs	r0, r6
10010b8c:	0039      	movs	r1, r7
10010b8e:	f001 fa47 	bl	10012020 <__aeabi_dcmpeq>
10010b92:	2800      	cmp	r0, #0
10010b94:	d000      	beq.n	10010b98 <pow+0xcc>
10010b96:	e0eb      	b.n	10010d70 <pow+0x2a4>
10010b98:	9b02      	ldr	r3, [sp, #8]
10010b9a:	9c03      	ldr	r4, [sp, #12]
10010b9c:	9300      	str	r3, [sp, #0]
10010b9e:	9401      	str	r4, [sp, #4]
10010ba0:	e7e9      	b.n	10010b76 <pow+0xaa>
10010ba2:	9802      	ldr	r0, [sp, #8]
10010ba4:	9903      	ldr	r1, [sp, #12]
10010ba6:	f000 ff7d 	bl	10011aa4 <finite>
10010baa:	4681      	mov	r9, r0
10010bac:	2800      	cmp	r0, #0
10010bae:	d100      	bne.n	10010bb2 <pow+0xe6>
10010bb0:	e086      	b.n	10010cc0 <pow+0x1f4>
10010bb2:	9802      	ldr	r0, [sp, #8]
10010bb4:	9903      	ldr	r1, [sp, #12]
10010bb6:	2200      	movs	r2, #0
10010bb8:	2300      	movs	r3, #0
10010bba:	f001 fa31 	bl	10012020 <__aeabi_dcmpeq>
10010bbe:	2800      	cmp	r0, #0
10010bc0:	d0ea      	beq.n	10010b98 <pow+0xcc>
10010bc2:	0020      	movs	r0, r4
10010bc4:	0029      	movs	r1, r5
10010bc6:	f000 ff6d 	bl	10011aa4 <finite>
10010bca:	9a02      	ldr	r2, [sp, #8]
10010bcc:	9b03      	ldr	r3, [sp, #12]
10010bce:	9200      	str	r2, [sp, #0]
10010bd0:	9301      	str	r3, [sp, #4]
10010bd2:	2800      	cmp	r0, #0
10010bd4:	d0cf      	beq.n	10010b76 <pow+0xaa>
10010bd6:	0030      	movs	r0, r6
10010bd8:	0039      	movs	r1, r7
10010bda:	f000 ff63 	bl	10011aa4 <finite>
10010bde:	9a02      	ldr	r2, [sp, #8]
10010be0:	9b03      	ldr	r3, [sp, #12]
10010be2:	9200      	str	r2, [sp, #0]
10010be4:	9301      	str	r3, [sp, #4]
10010be6:	2800      	cmp	r0, #0
10010be8:	d0c5      	beq.n	10010b76 <pow+0xaa>
10010bea:	ab06      	add	r3, sp, #24
10010bec:	4698      	mov	r8, r3
10010bee:	2304      	movs	r3, #4
10010bf0:	4642      	mov	r2, r8
10010bf2:	9306      	str	r3, [sp, #24]
10010bf4:	4b8c      	ldr	r3, [pc, #560]	; (10010e28 <pow+0x35c>)
10010bf6:	6094      	str	r4, [r2, #8]
10010bf8:	60d5      	str	r5, [r2, #12]
10010bfa:	6053      	str	r3, [r2, #4]
10010bfc:	2300      	movs	r3, #0
10010bfe:	2400      	movs	r4, #0
10010c00:	6213      	str	r3, [r2, #32]
10010c02:	2300      	movs	r3, #0
10010c04:	6193      	str	r3, [r2, #24]
10010c06:	61d4      	str	r4, [r2, #28]
10010c08:	465b      	mov	r3, fp
10010c0a:	781b      	ldrb	r3, [r3, #0]
10010c0c:	6116      	str	r6, [r2, #16]
10010c0e:	6157      	str	r7, [r2, #20]
10010c10:	b25b      	sxtb	r3, r3
10010c12:	2b02      	cmp	r3, #2
10010c14:	d004      	beq.n	10010c20 <pow+0x154>
10010c16:	4640      	mov	r0, r8
10010c18:	f000 ff4e 	bl	10011ab8 <matherr>
10010c1c:	2800      	cmp	r0, #0
10010c1e:	d140      	bne.n	10010ca2 <pow+0x1d6>
10010c20:	f003 fec0 	bl	100149a4 <__errno>
10010c24:	2322      	movs	r3, #34	; 0x22
10010c26:	6003      	str	r3, [r0, #0]
10010c28:	e03b      	b.n	10010ca2 <pow+0x1d6>
10010c2a:	0030      	movs	r0, r6
10010c2c:	0039      	movs	r1, r7
10010c2e:	f000 ff39 	bl	10011aa4 <finite>
10010c32:	9a02      	ldr	r2, [sp, #8]
10010c34:	9b03      	ldr	r3, [sp, #12]
10010c36:	9200      	str	r2, [sp, #0]
10010c38:	9301      	str	r3, [sp, #4]
10010c3a:	2800      	cmp	r0, #0
10010c3c:	d09b      	beq.n	10010b76 <pow+0xaa>
10010c3e:	2200      	movs	r2, #0
10010c40:	2300      	movs	r3, #0
10010c42:	0030      	movs	r0, r6
10010c44:	0039      	movs	r1, r7
10010c46:	f001 f9f1 	bl	1001202c <__aeabi_dcmplt>
10010c4a:	2800      	cmp	r0, #0
10010c4c:	d100      	bne.n	10010c50 <pow+0x184>
10010c4e:	e792      	b.n	10010b76 <pow+0xaa>
10010c50:	ab06      	add	r3, sp, #24
10010c52:	4698      	mov	r8, r3
10010c54:	2301      	movs	r3, #1
10010c56:	4642      	mov	r2, r8
10010c58:	9306      	str	r3, [sp, #24]
10010c5a:	4b73      	ldr	r3, [pc, #460]	; (10010e28 <pow+0x35c>)
10010c5c:	6053      	str	r3, [r2, #4]
10010c5e:	4643      	mov	r3, r8
10010c60:	9a05      	ldr	r2, [sp, #20]
10010c62:	609c      	str	r4, [r3, #8]
10010c64:	60dd      	str	r5, [r3, #12]
10010c66:	621a      	str	r2, [r3, #32]
10010c68:	611e      	str	r6, [r3, #16]
10010c6a:	615f      	str	r7, [r3, #20]
10010c6c:	465b      	mov	r3, fp
10010c6e:	781b      	ldrb	r3, [r3, #0]
10010c70:	b25b      	sxtb	r3, r3
10010c72:	2b00      	cmp	r3, #0
10010c74:	d00b      	beq.n	10010c8e <pow+0x1c2>
10010c76:	2000      	movs	r0, #0
10010c78:	4642      	mov	r2, r8
10010c7a:	496d      	ldr	r1, [pc, #436]	; (10010e30 <pow+0x364>)
10010c7c:	6190      	str	r0, [r2, #24]
10010c7e:	61d1      	str	r1, [r2, #28]
10010c80:	2b02      	cmp	r3, #2
10010c82:	d109      	bne.n	10010c98 <pow+0x1cc>
10010c84:	f003 fe8e 	bl	100149a4 <__errno>
10010c88:	2321      	movs	r3, #33	; 0x21
10010c8a:	6003      	str	r3, [r0, #0]
10010c8c:	e009      	b.n	10010ca2 <pow+0x1d6>
10010c8e:	4642      	mov	r2, r8
10010c90:	2300      	movs	r3, #0
10010c92:	2400      	movs	r4, #0
10010c94:	6193      	str	r3, [r2, #24]
10010c96:	61d4      	str	r4, [r2, #28]
10010c98:	4640      	mov	r0, r8
10010c9a:	f000 ff0d 	bl	10011ab8 <matherr>
10010c9e:	2800      	cmp	r0, #0
10010ca0:	d0f0      	beq.n	10010c84 <pow+0x1b8>
10010ca2:	4643      	mov	r3, r8
10010ca4:	6a1b      	ldr	r3, [r3, #32]
10010ca6:	2b00      	cmp	r3, #0
10010ca8:	d004      	beq.n	10010cb4 <pow+0x1e8>
10010caa:	f003 fe7b 	bl	100149a4 <__errno>
10010cae:	4643      	mov	r3, r8
10010cb0:	6a1b      	ldr	r3, [r3, #32]
10010cb2:	6003      	str	r3, [r0, #0]
10010cb4:	4643      	mov	r3, r8
10010cb6:	69dc      	ldr	r4, [r3, #28]
10010cb8:	699b      	ldr	r3, [r3, #24]
10010cba:	9300      	str	r3, [sp, #0]
10010cbc:	9401      	str	r4, [sp, #4]
10010cbe:	e75a      	b.n	10010b76 <pow+0xaa>
10010cc0:	0020      	movs	r0, r4
10010cc2:	0029      	movs	r1, r5
10010cc4:	f000 feee 	bl	10011aa4 <finite>
10010cc8:	2800      	cmp	r0, #0
10010cca:	d100      	bne.n	10010cce <pow+0x202>
10010ccc:	e771      	b.n	10010bb2 <pow+0xe6>
10010cce:	0030      	movs	r0, r6
10010cd0:	0039      	movs	r1, r7
10010cd2:	f000 fee7 	bl	10011aa4 <finite>
10010cd6:	2800      	cmp	r0, #0
10010cd8:	d100      	bne.n	10010cdc <pow+0x210>
10010cda:	e76a      	b.n	10010bb2 <pow+0xe6>
10010cdc:	9802      	ldr	r0, [sp, #8]
10010cde:	9903      	ldr	r1, [sp, #12]
10010ce0:	000b      	movs	r3, r1
10010ce2:	0002      	movs	r2, r0
10010ce4:	f003 fc90 	bl	10014608 <__aeabi_dcmpun>
10010ce8:	ab06      	add	r3, sp, #24
10010cea:	4698      	mov	r8, r3
10010cec:	2800      	cmp	r0, #0
10010cee:	d17a      	bne.n	10010de6 <pow+0x31a>
10010cf0:	2303      	movs	r3, #3
10010cf2:	4642      	mov	r2, r8
10010cf4:	9306      	str	r3, [sp, #24]
10010cf6:	4b4c      	ldr	r3, [pc, #304]	; (10010e28 <pow+0x35c>)
10010cf8:	6210      	str	r0, [r2, #32]
10010cfa:	6053      	str	r3, [r2, #4]
10010cfc:	465b      	mov	r3, fp
10010cfe:	781b      	ldrb	r3, [r3, #0]
10010d00:	6094      	str	r4, [r2, #8]
10010d02:	60d5      	str	r5, [r2, #12]
10010d04:	b25b      	sxtb	r3, r3
10010d06:	6116      	str	r6, [r2, #16]
10010d08:	6157      	str	r7, [r2, #20]
10010d0a:	4699      	mov	r9, r3
10010d0c:	2b00      	cmp	r3, #0
10010d0e:	d148      	bne.n	10010da2 <pow+0x2d6>
10010d10:	22e0      	movs	r2, #224	; 0xe0
10010d12:	4641      	mov	r1, r8
10010d14:	4b47      	ldr	r3, [pc, #284]	; (10010e34 <pow+0x368>)
10010d16:	0612      	lsls	r2, r2, #24
10010d18:	618a      	str	r2, [r1, #24]
10010d1a:	61cb      	str	r3, [r1, #28]
10010d1c:	0020      	movs	r0, r4
10010d1e:	2200      	movs	r2, #0
10010d20:	2300      	movs	r3, #0
10010d22:	0029      	movs	r1, r5
10010d24:	f001 f982 	bl	1001202c <__aeabi_dcmplt>
10010d28:	2800      	cmp	r0, #0
10010d2a:	d100      	bne.n	10010d2e <pow+0x262>
10010d2c:	e773      	b.n	10010c16 <pow+0x14a>
10010d2e:	2200      	movs	r2, #0
10010d30:	4b41      	ldr	r3, [pc, #260]	; (10010e38 <pow+0x36c>)
10010d32:	0030      	movs	r0, r6
10010d34:	0039      	movs	r1, r7
10010d36:	f002 fe99 	bl	10013a6c <__aeabi_dmul>
10010d3a:	0004      	movs	r4, r0
10010d3c:	000d      	movs	r5, r1
10010d3e:	f000 fec3 	bl	10011ac8 <rint>
10010d42:	0002      	movs	r2, r0
10010d44:	000b      	movs	r3, r1
10010d46:	0020      	movs	r0, r4
10010d48:	0029      	movs	r1, r5
10010d4a:	f001 f969 	bl	10012020 <__aeabi_dcmpeq>
10010d4e:	2800      	cmp	r0, #0
10010d50:	d105      	bne.n	10010d5e <pow+0x292>
10010d52:	22e0      	movs	r2, #224	; 0xe0
10010d54:	4b39      	ldr	r3, [pc, #228]	; (10010e3c <pow+0x370>)
10010d56:	0612      	lsls	r2, r2, #24
10010d58:	4641      	mov	r1, r8
10010d5a:	618a      	str	r2, [r1, #24]
10010d5c:	61cb      	str	r3, [r1, #28]
10010d5e:	465b      	mov	r3, fp
10010d60:	781b      	ldrb	r3, [r3, #0]
10010d62:	b25b      	sxtb	r3, r3
10010d64:	4699      	mov	r9, r3
10010d66:	464b      	mov	r3, r9
10010d68:	2b02      	cmp	r3, #2
10010d6a:	d000      	beq.n	10010d6e <pow+0x2a2>
10010d6c:	e753      	b.n	10010c16 <pow+0x14a>
10010d6e:	e757      	b.n	10010c20 <pow+0x154>
10010d70:	ab06      	add	r3, sp, #24
10010d72:	4698      	mov	r8, r3
10010d74:	2301      	movs	r3, #1
10010d76:	4642      	mov	r2, r8
10010d78:	9306      	str	r3, [sp, #24]
10010d7a:	4b2b      	ldr	r3, [pc, #172]	; (10010e28 <pow+0x35c>)
10010d7c:	6053      	str	r3, [r2, #4]
10010d7e:	4643      	mov	r3, r8
10010d80:	609c      	str	r4, [r3, #8]
10010d82:	60dd      	str	r5, [r3, #12]
10010d84:	2400      	movs	r4, #0
10010d86:	9a00      	ldr	r2, [sp, #0]
10010d88:	4d28      	ldr	r5, [pc, #160]	; (10010e2c <pow+0x360>)
10010d8a:	621a      	str	r2, [r3, #32]
10010d8c:	611e      	str	r6, [r3, #16]
10010d8e:	615f      	str	r7, [r3, #20]
10010d90:	619c      	str	r4, [r3, #24]
10010d92:	61dd      	str	r5, [r3, #28]
10010d94:	464b      	mov	r3, r9
10010d96:	9400      	str	r4, [sp, #0]
10010d98:	9501      	str	r5, [sp, #4]
10010d9a:	2b02      	cmp	r3, #2
10010d9c:	d000      	beq.n	10010da0 <pow+0x2d4>
10010d9e:	e77b      	b.n	10010c98 <pow+0x1cc>
10010da0:	e6e9      	b.n	10010b76 <pow+0xaa>
10010da2:	2200      	movs	r2, #0
10010da4:	4641      	mov	r1, r8
10010da6:	4b26      	ldr	r3, [pc, #152]	; (10010e40 <pow+0x374>)
10010da8:	0020      	movs	r0, r4
10010daa:	618a      	str	r2, [r1, #24]
10010dac:	61cb      	str	r3, [r1, #28]
10010dae:	2200      	movs	r2, #0
10010db0:	2300      	movs	r3, #0
10010db2:	0029      	movs	r1, r5
10010db4:	f001 f93a 	bl	1001202c <__aeabi_dcmplt>
10010db8:	2800      	cmp	r0, #0
10010dba:	d0d4      	beq.n	10010d66 <pow+0x29a>
10010dbc:	2200      	movs	r2, #0
10010dbe:	4b1e      	ldr	r3, [pc, #120]	; (10010e38 <pow+0x36c>)
10010dc0:	0030      	movs	r0, r6
10010dc2:	0039      	movs	r1, r7
10010dc4:	f002 fe52 	bl	10013a6c <__aeabi_dmul>
10010dc8:	0004      	movs	r4, r0
10010dca:	000d      	movs	r5, r1
10010dcc:	f000 fe7c 	bl	10011ac8 <rint>
10010dd0:	0002      	movs	r2, r0
10010dd2:	000b      	movs	r3, r1
10010dd4:	0020      	movs	r0, r4
10010dd6:	0029      	movs	r1, r5
10010dd8:	f001 f922 	bl	10012020 <__aeabi_dcmpeq>
10010ddc:	2800      	cmp	r0, #0
10010dde:	d1be      	bne.n	10010d5e <pow+0x292>
10010de0:	2200      	movs	r2, #0
10010de2:	4b13      	ldr	r3, [pc, #76]	; (10010e30 <pow+0x364>)
10010de4:	e7b8      	b.n	10010d58 <pow+0x28c>
10010de6:	2301      	movs	r3, #1
10010de8:	4642      	mov	r2, r8
10010dea:	9306      	str	r3, [sp, #24]
10010dec:	4b0e      	ldr	r3, [pc, #56]	; (10010e28 <pow+0x35c>)
10010dee:	6053      	str	r3, [r2, #4]
10010df0:	4643      	mov	r3, r8
10010df2:	464a      	mov	r2, r9
10010df4:	609c      	str	r4, [r3, #8]
10010df6:	60dd      	str	r5, [r3, #12]
10010df8:	621a      	str	r2, [r3, #32]
10010dfa:	611e      	str	r6, [r3, #16]
10010dfc:	615f      	str	r7, [r3, #20]
10010dfe:	2400      	movs	r4, #0
10010e00:	465b      	mov	r3, fp
10010e02:	571c      	ldrsb	r4, [r3, r4]
10010e04:	2c00      	cmp	r4, #0
10010e06:	d100      	bne.n	10010e0a <pow+0x33e>
10010e08:	e741      	b.n	10010c8e <pow+0x1c2>
10010e0a:	2300      	movs	r3, #0
10010e0c:	2200      	movs	r2, #0
10010e0e:	0019      	movs	r1, r3
10010e10:	0010      	movs	r0, r2
10010e12:	f002 fa07 	bl	10013224 <__aeabi_ddiv>
10010e16:	4643      	mov	r3, r8
10010e18:	6198      	str	r0, [r3, #24]
10010e1a:	61d9      	str	r1, [r3, #28]
10010e1c:	2c02      	cmp	r4, #2
10010e1e:	d100      	bne.n	10010e22 <pow+0x356>
10010e20:	e730      	b.n	10010c84 <pow+0x1b8>
10010e22:	e739      	b.n	10010c98 <pow+0x1cc>
10010e24:	10016bec 	.word	0x10016bec
10010e28:	100169d0 	.word	0x100169d0
10010e2c:	3ff00000 	.word	0x3ff00000
10010e30:	fff00000 	.word	0xfff00000
10010e34:	47efffff 	.word	0x47efffff
10010e38:	3fe00000 	.word	0x3fe00000
10010e3c:	c7efffff 	.word	0xc7efffff
10010e40:	7ff00000 	.word	0x7ff00000

10010e44 <__ieee754_pow>:
10010e44:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e46:	4656      	mov	r6, sl
10010e48:	464d      	mov	r5, r9
10010e4a:	4644      	mov	r4, r8
10010e4c:	465f      	mov	r7, fp
10010e4e:	b4f0      	push	{r4, r5, r6, r7}
10010e50:	001c      	movs	r4, r3
10010e52:	0013      	movs	r3, r2
10010e54:	0067      	lsls	r7, r4, #1
10010e56:	b091      	sub	sp, #68	; 0x44
10010e58:	087f      	lsrs	r7, r7, #1
10010e5a:	9300      	str	r3, [sp, #0]
10010e5c:	9401      	str	r4, [sp, #4]
10010e5e:	0006      	movs	r6, r0
10010e60:	000d      	movs	r5, r1
10010e62:	4680      	mov	r8, r0
10010e64:	4689      	mov	r9, r1
10010e66:	46a2      	mov	sl, r4
10010e68:	433b      	orrs	r3, r7
10010e6a:	d032      	beq.n	10010ed2 <__ieee754_pow+0x8e>
10010e6c:	4b6e      	ldr	r3, [pc, #440]	; (10011028 <__ieee754_pow+0x1e4>)
10010e6e:	006c      	lsls	r4, r5, #1
10010e70:	0864      	lsrs	r4, r4, #1
10010e72:	429c      	cmp	r4, r3
10010e74:	dc29      	bgt.n	10010eca <__ieee754_pow+0x86>
10010e76:	d026      	beq.n	10010ec6 <__ieee754_pow+0x82>
10010e78:	429f      	cmp	r7, r3
10010e7a:	dc26      	bgt.n	10010eca <__ieee754_pow+0x86>
10010e7c:	4b6a      	ldr	r3, [pc, #424]	; (10011028 <__ieee754_pow+0x1e4>)
10010e7e:	429f      	cmp	r7, r3
10010e80:	d100      	bne.n	10010e84 <__ieee754_pow+0x40>
10010e82:	e089      	b.n	10010f98 <__ieee754_pow+0x154>
10010e84:	2300      	movs	r3, #0
10010e86:	469b      	mov	fp, r3
10010e88:	464b      	mov	r3, r9
10010e8a:	2b00      	cmp	r3, #0
10010e8c:	da00      	bge.n	10010e90 <__ieee754_pow+0x4c>
10010e8e:	e087      	b.n	10010fa0 <__ieee754_pow+0x15c>
10010e90:	2a00      	cmp	r2, #0
10010e92:	d12f      	bne.n	10010ef4 <__ieee754_pow+0xb0>
10010e94:	4b64      	ldr	r3, [pc, #400]	; (10011028 <__ieee754_pow+0x1e4>)
10010e96:	429f      	cmp	r7, r3
10010e98:	d100      	bne.n	10010e9c <__ieee754_pow+0x58>
10010e9a:	e09f      	b.n	10010fdc <__ieee754_pow+0x198>
10010e9c:	4b63      	ldr	r3, [pc, #396]	; (1001102c <__ieee754_pow+0x1e8>)
10010e9e:	429f      	cmp	r7, r3
10010ea0:	d05d      	beq.n	10010f5e <__ieee754_pow+0x11a>
10010ea2:	2380      	movs	r3, #128	; 0x80
10010ea4:	05db      	lsls	r3, r3, #23
10010ea6:	459a      	cmp	sl, r3
10010ea8:	d101      	bne.n	10010eae <__ieee754_pow+0x6a>
10010eaa:	f000 fbc1 	bl	10011630 <__ieee754_pow+0x7ec>
10010eae:	4b60      	ldr	r3, [pc, #384]	; (10011030 <__ieee754_pow+0x1ec>)
10010eb0:	459a      	cmp	sl, r3
10010eb2:	d11f      	bne.n	10010ef4 <__ieee754_pow+0xb0>
10010eb4:	464b      	mov	r3, r9
10010eb6:	2b00      	cmp	r3, #0
10010eb8:	db1c      	blt.n	10010ef4 <__ieee754_pow+0xb0>
10010eba:	0030      	movs	r0, r6
10010ebc:	0029      	movs	r1, r5
10010ebe:	f000 fcf7 	bl	100118b0 <__ieee754_sqrt>
10010ec2:	0006      	movs	r6, r0
10010ec4:	e007      	b.n	10010ed6 <__ieee754_pow+0x92>
10010ec6:	2800      	cmp	r0, #0
10010ec8:	d00d      	beq.n	10010ee6 <__ieee754_pow+0xa2>
10010eca:	4b5a      	ldr	r3, [pc, #360]	; (10011034 <__ieee754_pow+0x1f0>)
10010ecc:	18e0      	adds	r0, r4, r3
10010ece:	4330      	orrs	r0, r6
10010ed0:	d10b      	bne.n	10010eea <__ieee754_pow+0xa6>
10010ed2:	2600      	movs	r6, #0
10010ed4:	4955      	ldr	r1, [pc, #340]	; (1001102c <__ieee754_pow+0x1e8>)
10010ed6:	0030      	movs	r0, r6
10010ed8:	b011      	add	sp, #68	; 0x44
10010eda:	bc3c      	pop	{r2, r3, r4, r5}
10010edc:	4690      	mov	r8, r2
10010ede:	4699      	mov	r9, r3
10010ee0:	46a2      	mov	sl, r4
10010ee2:	46ab      	mov	fp, r5
10010ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ee6:	42a7      	cmp	r7, r4
10010ee8:	ddc8      	ble.n	10010e7c <__ieee754_pow+0x38>
10010eea:	4853      	ldr	r0, [pc, #332]	; (10011038 <__ieee754_pow+0x1f4>)
10010eec:	f000 fde6 	bl	10011abc <nan>
10010ef0:	0006      	movs	r6, r0
10010ef2:	e7f0      	b.n	10010ed6 <__ieee754_pow+0x92>
10010ef4:	0030      	movs	r0, r6
10010ef6:	0029      	movs	r1, r5
10010ef8:	f000 fdd0 	bl	10011a9c <fabs>
10010efc:	4643      	mov	r3, r8
10010efe:	2b00      	cmp	r3, #0
10010f00:	d01d      	beq.n	10010f3e <__ieee754_pow+0xfa>
10010f02:	0feb      	lsrs	r3, r5, #31
10010f04:	3b01      	subs	r3, #1
10010f06:	4698      	mov	r8, r3
10010f08:	465b      	mov	r3, fp
10010f0a:	4642      	mov	r2, r8
10010f0c:	4313      	orrs	r3, r2
10010f0e:	d079      	beq.n	10011004 <__ieee754_pow+0x1c0>
10010f10:	4b4a      	ldr	r3, [pc, #296]	; (1001103c <__ieee754_pow+0x1f8>)
10010f12:	429f      	cmp	r7, r3
10010f14:	dc00      	bgt.n	10010f18 <__ieee754_pow+0xd4>
10010f16:	e09f      	b.n	10011058 <__ieee754_pow+0x214>
10010f18:	4b49      	ldr	r3, [pc, #292]	; (10011040 <__ieee754_pow+0x1fc>)
10010f1a:	429f      	cmp	r7, r3
10010f1c:	dc01      	bgt.n	10010f22 <__ieee754_pow+0xde>
10010f1e:	f000 fbce 	bl	100116be <__ieee754_pow+0x87a>
10010f22:	4b48      	ldr	r3, [pc, #288]	; (10011044 <__ieee754_pow+0x200>)
10010f24:	429c      	cmp	r4, r3
10010f26:	dd79      	ble.n	1001101c <__ieee754_pow+0x1d8>
10010f28:	4653      	mov	r3, sl
10010f2a:	2b00      	cmp	r3, #0
10010f2c:	dd79      	ble.n	10011022 <__ieee754_pow+0x1de>
10010f2e:	4a46      	ldr	r2, [pc, #280]	; (10011048 <__ieee754_pow+0x204>)
10010f30:	4b46      	ldr	r3, [pc, #280]	; (1001104c <__ieee754_pow+0x208>)
10010f32:	0010      	movs	r0, r2
10010f34:	0019      	movs	r1, r3
10010f36:	f002 fd99 	bl	10013a6c <__aeabi_dmul>
10010f3a:	0006      	movs	r6, r0
10010f3c:	e7cb      	b.n	10010ed6 <__ieee754_pow+0x92>
10010f3e:	2c00      	cmp	r4, #0
10010f40:	d004      	beq.n	10010f4c <__ieee754_pow+0x108>
10010f42:	4a3a      	ldr	r2, [pc, #232]	; (1001102c <__ieee754_pow+0x1e8>)
10010f44:	00ab      	lsls	r3, r5, #2
10010f46:	089b      	lsrs	r3, r3, #2
10010f48:	4293      	cmp	r3, r2
10010f4a:	d1da      	bne.n	10010f02 <__ieee754_pow+0xbe>
10010f4c:	4653      	mov	r3, sl
10010f4e:	2b00      	cmp	r3, #0
10010f50:	da00      	bge.n	10010f54 <__ieee754_pow+0x110>
10010f52:	e3ad      	b.n	100116b0 <__ieee754_pow+0x86c>
10010f54:	464b      	mov	r3, r9
10010f56:	2b00      	cmp	r3, #0
10010f58:	db0d      	blt.n	10010f76 <__ieee754_pow+0x132>
10010f5a:	0006      	movs	r6, r0
10010f5c:	e7bb      	b.n	10010ed6 <__ieee754_pow+0x92>
10010f5e:	4653      	mov	r3, sl
10010f60:	0029      	movs	r1, r5
10010f62:	2b00      	cmp	r3, #0
10010f64:	dab7      	bge.n	10010ed6 <__ieee754_pow+0x92>
10010f66:	0032      	movs	r2, r6
10010f68:	002b      	movs	r3, r5
10010f6a:	2000      	movs	r0, #0
10010f6c:	492f      	ldr	r1, [pc, #188]	; (1001102c <__ieee754_pow+0x1e8>)
10010f6e:	f002 f959 	bl	10013224 <__aeabi_ddiv>
10010f72:	0006      	movs	r6, r0
10010f74:	e7af      	b.n	10010ed6 <__ieee754_pow+0x92>
10010f76:	4b2f      	ldr	r3, [pc, #188]	; (10011034 <__ieee754_pow+0x1f0>)
10010f78:	469c      	mov	ip, r3
10010f7a:	465b      	mov	r3, fp
10010f7c:	4464      	add	r4, ip
10010f7e:	431c      	orrs	r4, r3
10010f80:	d101      	bne.n	10010f86 <__ieee754_pow+0x142>
10010f82:	f000 fc2b 	bl	100117dc <__ieee754_pow+0x998>
10010f86:	465b      	mov	r3, fp
10010f88:	0006      	movs	r6, r0
10010f8a:	2b01      	cmp	r3, #1
10010f8c:	d1a3      	bne.n	10010ed6 <__ieee754_pow+0x92>
10010f8e:	2380      	movs	r3, #128	; 0x80
10010f90:	061b      	lsls	r3, r3, #24
10010f92:	469c      	mov	ip, r3
10010f94:	4461      	add	r1, ip
10010f96:	e79e      	b.n	10010ed6 <__ieee754_pow+0x92>
10010f98:	2a00      	cmp	r2, #0
10010f9a:	d100      	bne.n	10010f9e <__ieee754_pow+0x15a>
10010f9c:	e772      	b.n	10010e84 <__ieee754_pow+0x40>
10010f9e:	e794      	b.n	10010eca <__ieee754_pow+0x86>
10010fa0:	4b2b      	ldr	r3, [pc, #172]	; (10011050 <__ieee754_pow+0x20c>)
10010fa2:	429f      	cmp	r7, r3
10010fa4:	dc2b      	bgt.n	10010ffe <__ieee754_pow+0x1ba>
10010fa6:	4b27      	ldr	r3, [pc, #156]	; (10011044 <__ieee754_pow+0x200>)
10010fa8:	429f      	cmp	r7, r3
10010faa:	dc00      	bgt.n	10010fae <__ieee754_pow+0x16a>
10010fac:	e770      	b.n	10010e90 <__ieee754_pow+0x4c>
10010fae:	4929      	ldr	r1, [pc, #164]	; (10011054 <__ieee754_pow+0x210>)
10010fb0:	153b      	asrs	r3, r7, #20
10010fb2:	468c      	mov	ip, r1
10010fb4:	4463      	add	r3, ip
10010fb6:	2b14      	cmp	r3, #20
10010fb8:	dc01      	bgt.n	10010fbe <__ieee754_pow+0x17a>
10010fba:	f000 fbf2 	bl	100117a2 <__ieee754_pow+0x95e>
10010fbe:	2134      	movs	r1, #52	; 0x34
10010fc0:	1acb      	subs	r3, r1, r3
10010fc2:	9900      	ldr	r1, [sp, #0]
10010fc4:	40d9      	lsrs	r1, r3
10010fc6:	0008      	movs	r0, r1
10010fc8:	4098      	lsls	r0, r3
10010fca:	4282      	cmp	r2, r0
10010fcc:	d000      	beq.n	10010fd0 <__ieee754_pow+0x18c>
10010fce:	e75f      	b.n	10010e90 <__ieee754_pow+0x4c>
10010fd0:	2301      	movs	r3, #1
10010fd2:	4019      	ands	r1, r3
10010fd4:	3301      	adds	r3, #1
10010fd6:	1a5b      	subs	r3, r3, r1
10010fd8:	469b      	mov	fp, r3
10010fda:	e759      	b.n	10010e90 <__ieee754_pow+0x4c>
10010fdc:	4b15      	ldr	r3, [pc, #84]	; (10011034 <__ieee754_pow+0x1f0>)
10010fde:	18e0      	adds	r0, r4, r3
10010fe0:	4306      	orrs	r6, r0
10010fe2:	d100      	bne.n	10010fe6 <__ieee754_pow+0x1a2>
10010fe4:	e775      	b.n	10010ed2 <__ieee754_pow+0x8e>
10010fe6:	4b17      	ldr	r3, [pc, #92]	; (10011044 <__ieee754_pow+0x200>)
10010fe8:	429c      	cmp	r4, r3
10010fea:	dc00      	bgt.n	10010fee <__ieee754_pow+0x1aa>
10010fec:	e351      	b.n	10011692 <__ieee754_pow+0x84e>
10010fee:	4653      	mov	r3, sl
10010ff0:	2b00      	cmp	r3, #0
10010ff2:	db16      	blt.n	10011022 <__ieee754_pow+0x1de>
10010ff4:	9b00      	ldr	r3, [sp, #0]
10010ff6:	9c01      	ldr	r4, [sp, #4]
10010ff8:	001e      	movs	r6, r3
10010ffa:	0021      	movs	r1, r4
10010ffc:	e76b      	b.n	10010ed6 <__ieee754_pow+0x92>
10010ffe:	2302      	movs	r3, #2
10011000:	469b      	mov	fp, r3
10011002:	e745      	b.n	10010e90 <__ieee754_pow+0x4c>
10011004:	0032      	movs	r2, r6
10011006:	002b      	movs	r3, r5
10011008:	0030      	movs	r0, r6
1001100a:	0029      	movs	r1, r5
1001100c:	f002 ffa8 	bl	10013f60 <__aeabi_dsub>
10011010:	0002      	movs	r2, r0
10011012:	000b      	movs	r3, r1
10011014:	f002 f906 	bl	10013224 <__aeabi_ddiv>
10011018:	0006      	movs	r6, r0
1001101a:	e75c      	b.n	10010ed6 <__ieee754_pow+0x92>
1001101c:	4653      	mov	r3, sl
1001101e:	2b00      	cmp	r3, #0
10011020:	db85      	blt.n	10010f2e <__ieee754_pow+0xea>
10011022:	2600      	movs	r6, #0
10011024:	2100      	movs	r1, #0
10011026:	e756      	b.n	10010ed6 <__ieee754_pow+0x92>
10011028:	7ff00000 	.word	0x7ff00000
1001102c:	3ff00000 	.word	0x3ff00000
10011030:	3fe00000 	.word	0x3fe00000
10011034:	c0100000 	.word	0xc0100000
10011038:	10015ce0 	.word	0x10015ce0
1001103c:	41e00000 	.word	0x41e00000
10011040:	43f00000 	.word	0x43f00000
10011044:	3fefffff 	.word	0x3fefffff
10011048:	8800759c 	.word	0x8800759c
1001104c:	7e37e43c 	.word	0x7e37e43c
10011050:	433fffff 	.word	0x433fffff
10011054:	fffffc01 	.word	0xfffffc01
10011058:	4be8      	ldr	r3, [pc, #928]	; (100113fc <__ieee754_pow+0x5b8>)
1001105a:	2200      	movs	r2, #0
1001105c:	429c      	cmp	r4, r3
1001105e:	dc06      	bgt.n	1001106e <__ieee754_pow+0x22a>
10011060:	2200      	movs	r2, #0
10011062:	4be7      	ldr	r3, [pc, #924]	; (10011400 <__ieee754_pow+0x5bc>)
10011064:	f002 fd02 	bl	10013a6c <__aeabi_dmul>
10011068:	2235      	movs	r2, #53	; 0x35
1001106a:	000c      	movs	r4, r1
1001106c:	4252      	negs	r2, r2
1001106e:	4de5      	ldr	r5, [pc, #916]	; (10011404 <__ieee754_pow+0x5c0>)
10011070:	1523      	asrs	r3, r4, #20
10011072:	46ac      	mov	ip, r5
10011074:	4463      	add	r3, ip
10011076:	4699      	mov	r9, r3
10011078:	0324      	lsls	r4, r4, #12
1001107a:	4de3      	ldr	r5, [pc, #908]	; (10011408 <__ieee754_pow+0x5c4>)
1001107c:	4be3      	ldr	r3, [pc, #908]	; (1001140c <__ieee754_pow+0x5c8>)
1001107e:	0b24      	lsrs	r4, r4, #12
10011080:	4491      	add	r9, r2
10011082:	4325      	orrs	r5, r4
10011084:	429c      	cmp	r4, r3
10011086:	dd09      	ble.n	1001109c <__ieee754_pow+0x258>
10011088:	4be1      	ldr	r3, [pc, #900]	; (10011410 <__ieee754_pow+0x5cc>)
1001108a:	429c      	cmp	r4, r3
1001108c:	dc00      	bgt.n	10011090 <__ieee754_pow+0x24c>
1001108e:	e3a9      	b.n	100117e4 <__ieee754_pow+0x9a0>
10011090:	2301      	movs	r3, #1
10011092:	469c      	mov	ip, r3
10011094:	4bdf      	ldr	r3, [pc, #892]	; (10011414 <__ieee754_pow+0x5d0>)
10011096:	44e1      	add	r9, ip
10011098:	469c      	mov	ip, r3
1001109a:	4465      	add	r5, ip
1001109c:	2300      	movs	r3, #0
1001109e:	2400      	movs	r4, #0
100110a0:	2200      	movs	r2, #0
100110a2:	9308      	str	r3, [sp, #32]
100110a4:	9409      	str	r4, [sp, #36]	; 0x24
100110a6:	930c      	str	r3, [sp, #48]	; 0x30
100110a8:	940d      	str	r4, [sp, #52]	; 0x34
100110aa:	2400      	movs	r4, #0
100110ac:	4bd6      	ldr	r3, [pc, #856]	; (10011408 <__ieee754_pow+0x5c4>)
100110ae:	9206      	str	r2, [sp, #24]
100110b0:	9307      	str	r3, [sp, #28]
100110b2:	9a06      	ldr	r2, [sp, #24]
100110b4:	9b07      	ldr	r3, [sp, #28]
100110b6:	0029      	movs	r1, r5
100110b8:	900a      	str	r0, [sp, #40]	; 0x28
100110ba:	910b      	str	r1, [sp, #44]	; 0x2c
100110bc:	f002 ff50 	bl	10013f60 <__aeabi_dsub>
100110c0:	9a06      	ldr	r2, [sp, #24]
100110c2:	9b07      	ldr	r3, [sp, #28]
100110c4:	0006      	movs	r6, r0
100110c6:	000f      	movs	r7, r1
100110c8:	980a      	ldr	r0, [sp, #40]	; 0x28
100110ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
100110cc:	f001 fd7e 	bl	10012bcc <__aeabi_dadd>
100110d0:	0002      	movs	r2, r0
100110d2:	000b      	movs	r3, r1
100110d4:	2000      	movs	r0, #0
100110d6:	49cc      	ldr	r1, [pc, #816]	; (10011408 <__ieee754_pow+0x5c4>)
100110d8:	f002 f8a4 	bl	10013224 <__aeabi_ddiv>
100110dc:	000a      	movs	r2, r1
100110de:	0001      	movs	r1, r0
100110e0:	0013      	movs	r3, r2
100110e2:	910e      	str	r1, [sp, #56]	; 0x38
100110e4:	920f      	str	r2, [sp, #60]	; 0x3c
100110e6:	0002      	movs	r2, r0
100110e8:	0039      	movs	r1, r7
100110ea:	0030      	movs	r0, r6
100110ec:	f002 fcbe 	bl	10013a6c <__aeabi_dmul>
100110f0:	000a      	movs	r2, r1
100110f2:	0001      	movs	r1, r0
100110f4:	2080      	movs	r0, #128	; 0x80
100110f6:	9104      	str	r1, [sp, #16]
100110f8:	9205      	str	r2, [sp, #20]
100110fa:	0013      	movs	r3, r2
100110fc:	2200      	movs	r2, #0
100110fe:	2180      	movs	r1, #128	; 0x80
10011100:	0300      	lsls	r0, r0, #12
10011102:	4684      	mov	ip, r0
10011104:	9202      	str	r2, [sp, #8]
10011106:	9303      	str	r3, [sp, #12]
10011108:	2200      	movs	r2, #0
1001110a:	0589      	lsls	r1, r1, #22
1001110c:	106d      	asrs	r5, r5, #1
1001110e:	430d      	orrs	r5, r1
10011110:	4465      	add	r5, ip
10011112:	192b      	adds	r3, r5, r4
10011114:	9802      	ldr	r0, [sp, #8]
10011116:	9903      	ldr	r1, [sp, #12]
10011118:	0014      	movs	r4, r2
1001111a:	001d      	movs	r5, r3
1001111c:	f002 fca6 	bl	10013a6c <__aeabi_dmul>
10011120:	0002      	movs	r2, r0
10011122:	000b      	movs	r3, r1
10011124:	0030      	movs	r0, r6
10011126:	0039      	movs	r1, r7
10011128:	f002 ff1a 	bl	10013f60 <__aeabi_dsub>
1001112c:	9a06      	ldr	r2, [sp, #24]
1001112e:	9b07      	ldr	r3, [sp, #28]
10011130:	0006      	movs	r6, r0
10011132:	000f      	movs	r7, r1
10011134:	0020      	movs	r0, r4
10011136:	0029      	movs	r1, r5
10011138:	f002 ff12 	bl	10013f60 <__aeabi_dsub>
1001113c:	0002      	movs	r2, r0
1001113e:	000b      	movs	r3, r1
10011140:	980a      	ldr	r0, [sp, #40]	; 0x28
10011142:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011144:	f002 ff0c 	bl	10013f60 <__aeabi_dsub>
10011148:	9a02      	ldr	r2, [sp, #8]
1001114a:	9b03      	ldr	r3, [sp, #12]
1001114c:	f002 fc8e 	bl	10013a6c <__aeabi_dmul>
10011150:	0002      	movs	r2, r0
10011152:	000b      	movs	r3, r1
10011154:	0030      	movs	r0, r6
10011156:	0039      	movs	r1, r7
10011158:	f002 ff02 	bl	10013f60 <__aeabi_dsub>
1001115c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1001115e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011160:	f002 fc84 	bl	10013a6c <__aeabi_dmul>
10011164:	9d04      	ldr	r5, [sp, #16]
10011166:	9e05      	ldr	r6, [sp, #20]
10011168:	9006      	str	r0, [sp, #24]
1001116a:	9107      	str	r1, [sp, #28]
1001116c:	002a      	movs	r2, r5
1001116e:	0033      	movs	r3, r6
10011170:	0028      	movs	r0, r5
10011172:	0031      	movs	r1, r6
10011174:	f002 fc7a 	bl	10013a6c <__aeabi_dmul>
10011178:	0006      	movs	r6, r0
1001117a:	000f      	movs	r7, r1
1001117c:	4aa6      	ldr	r2, [pc, #664]	; (10011418 <__ieee754_pow+0x5d4>)
1001117e:	4ba7      	ldr	r3, [pc, #668]	; (1001141c <__ieee754_pow+0x5d8>)
10011180:	f002 fc74 	bl	10013a6c <__aeabi_dmul>
10011184:	4aa6      	ldr	r2, [pc, #664]	; (10011420 <__ieee754_pow+0x5dc>)
10011186:	4ba7      	ldr	r3, [pc, #668]	; (10011424 <__ieee754_pow+0x5e0>)
10011188:	f001 fd20 	bl	10012bcc <__aeabi_dadd>
1001118c:	0032      	movs	r2, r6
1001118e:	003b      	movs	r3, r7
10011190:	f002 fc6c 	bl	10013a6c <__aeabi_dmul>
10011194:	4aa4      	ldr	r2, [pc, #656]	; (10011428 <__ieee754_pow+0x5e4>)
10011196:	4ba5      	ldr	r3, [pc, #660]	; (1001142c <__ieee754_pow+0x5e8>)
10011198:	f001 fd18 	bl	10012bcc <__aeabi_dadd>
1001119c:	0032      	movs	r2, r6
1001119e:	003b      	movs	r3, r7
100111a0:	f002 fc64 	bl	10013a6c <__aeabi_dmul>
100111a4:	4aa2      	ldr	r2, [pc, #648]	; (10011430 <__ieee754_pow+0x5ec>)
100111a6:	4ba3      	ldr	r3, [pc, #652]	; (10011434 <__ieee754_pow+0x5f0>)
100111a8:	f001 fd10 	bl	10012bcc <__aeabi_dadd>
100111ac:	0032      	movs	r2, r6
100111ae:	003b      	movs	r3, r7
100111b0:	f002 fc5c 	bl	10013a6c <__aeabi_dmul>
100111b4:	4aa0      	ldr	r2, [pc, #640]	; (10011438 <__ieee754_pow+0x5f4>)
100111b6:	4ba1      	ldr	r3, [pc, #644]	; (1001143c <__ieee754_pow+0x5f8>)
100111b8:	f001 fd08 	bl	10012bcc <__aeabi_dadd>
100111bc:	0032      	movs	r2, r6
100111be:	003b      	movs	r3, r7
100111c0:	f002 fc54 	bl	10013a6c <__aeabi_dmul>
100111c4:	4a9e      	ldr	r2, [pc, #632]	; (10011440 <__ieee754_pow+0x5fc>)
100111c6:	4b9f      	ldr	r3, [pc, #636]	; (10011444 <__ieee754_pow+0x600>)
100111c8:	f001 fd00 	bl	10012bcc <__aeabi_dadd>
100111cc:	0032      	movs	r2, r6
100111ce:	0004      	movs	r4, r0
100111d0:	000d      	movs	r5, r1
100111d2:	003b      	movs	r3, r7
100111d4:	0030      	movs	r0, r6
100111d6:	0039      	movs	r1, r7
100111d8:	f002 fc48 	bl	10013a6c <__aeabi_dmul>
100111dc:	0002      	movs	r2, r0
100111de:	000b      	movs	r3, r1
100111e0:	0020      	movs	r0, r4
100111e2:	0029      	movs	r1, r5
100111e4:	f002 fc42 	bl	10013a6c <__aeabi_dmul>
100111e8:	9e02      	ldr	r6, [sp, #8]
100111ea:	9f03      	ldr	r7, [sp, #12]
100111ec:	0004      	movs	r4, r0
100111ee:	000d      	movs	r5, r1
100111f0:	9804      	ldr	r0, [sp, #16]
100111f2:	9905      	ldr	r1, [sp, #20]
100111f4:	0032      	movs	r2, r6
100111f6:	003b      	movs	r3, r7
100111f8:	f001 fce8 	bl	10012bcc <__aeabi_dadd>
100111fc:	9a06      	ldr	r2, [sp, #24]
100111fe:	9b07      	ldr	r3, [sp, #28]
10011200:	f002 fc34 	bl	10013a6c <__aeabi_dmul>
10011204:	0022      	movs	r2, r4
10011206:	002b      	movs	r3, r5
10011208:	f001 fce0 	bl	10012bcc <__aeabi_dadd>
1001120c:	0032      	movs	r2, r6
1001120e:	900a      	str	r0, [sp, #40]	; 0x28
10011210:	910b      	str	r1, [sp, #44]	; 0x2c
10011212:	003b      	movs	r3, r7
10011214:	0030      	movs	r0, r6
10011216:	0039      	movs	r1, r7
10011218:	9602      	str	r6, [sp, #8]
1001121a:	9703      	str	r7, [sp, #12]
1001121c:	f002 fc26 	bl	10013a6c <__aeabi_dmul>
10011220:	2200      	movs	r2, #0
10011222:	4b89      	ldr	r3, [pc, #548]	; (10011448 <__ieee754_pow+0x604>)
10011224:	0004      	movs	r4, r0
10011226:	000d      	movs	r5, r1
10011228:	f001 fcd0 	bl	10012bcc <__aeabi_dadd>
1001122c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001122e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011230:	f001 fccc 	bl	10012bcc <__aeabi_dadd>
10011234:	2600      	movs	r6, #0
10011236:	000f      	movs	r7, r1
10011238:	0032      	movs	r2, r6
1001123a:	000b      	movs	r3, r1
1001123c:	9802      	ldr	r0, [sp, #8]
1001123e:	9903      	ldr	r1, [sp, #12]
10011240:	f002 fc14 	bl	10013a6c <__aeabi_dmul>
10011244:	2200      	movs	r2, #0
10011246:	9002      	str	r0, [sp, #8]
10011248:	9103      	str	r1, [sp, #12]
1001124a:	4b7f      	ldr	r3, [pc, #508]	; (10011448 <__ieee754_pow+0x604>)
1001124c:	0030      	movs	r0, r6
1001124e:	0039      	movs	r1, r7
10011250:	f002 fe86 	bl	10013f60 <__aeabi_dsub>
10011254:	0022      	movs	r2, r4
10011256:	002b      	movs	r3, r5
10011258:	f002 fe82 	bl	10013f60 <__aeabi_dsub>
1001125c:	0002      	movs	r2, r0
1001125e:	000b      	movs	r3, r1
10011260:	980a      	ldr	r0, [sp, #40]	; 0x28
10011262:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011264:	f002 fe7c 	bl	10013f60 <__aeabi_dsub>
10011268:	9a04      	ldr	r2, [sp, #16]
1001126a:	9b05      	ldr	r3, [sp, #20]
1001126c:	f002 fbfe 	bl	10013a6c <__aeabi_dmul>
10011270:	0032      	movs	r2, r6
10011272:	0004      	movs	r4, r0
10011274:	000d      	movs	r5, r1
10011276:	9806      	ldr	r0, [sp, #24]
10011278:	9907      	ldr	r1, [sp, #28]
1001127a:	003b      	movs	r3, r7
1001127c:	f002 fbf6 	bl	10013a6c <__aeabi_dmul>
10011280:	0002      	movs	r2, r0
10011282:	000b      	movs	r3, r1
10011284:	0020      	movs	r0, r4
10011286:	0029      	movs	r1, r5
10011288:	f001 fca0 	bl	10012bcc <__aeabi_dadd>
1001128c:	0004      	movs	r4, r0
1001128e:	000d      	movs	r5, r1
10011290:	0002      	movs	r2, r0
10011292:	000b      	movs	r3, r1
10011294:	9802      	ldr	r0, [sp, #8]
10011296:	9903      	ldr	r1, [sp, #12]
10011298:	f001 fc98 	bl	10012bcc <__aeabi_dadd>
1001129c:	2600      	movs	r6, #0
1001129e:	22e0      	movs	r2, #224	; 0xe0
100112a0:	4b6a      	ldr	r3, [pc, #424]	; (1001144c <__ieee754_pow+0x608>)
100112a2:	0612      	lsls	r2, r2, #24
100112a4:	0030      	movs	r0, r6
100112a6:	000f      	movs	r7, r1
100112a8:	f002 fbe0 	bl	10013a6c <__aeabi_dmul>
100112ac:	9a02      	ldr	r2, [sp, #8]
100112ae:	9b03      	ldr	r3, [sp, #12]
100112b0:	9004      	str	r0, [sp, #16]
100112b2:	9105      	str	r1, [sp, #20]
100112b4:	0030      	movs	r0, r6
100112b6:	0039      	movs	r1, r7
100112b8:	f002 fe52 	bl	10013f60 <__aeabi_dsub>
100112bc:	0002      	movs	r2, r0
100112be:	000b      	movs	r3, r1
100112c0:	0020      	movs	r0, r4
100112c2:	0029      	movs	r1, r5
100112c4:	f002 fe4c 	bl	10013f60 <__aeabi_dsub>
100112c8:	4a61      	ldr	r2, [pc, #388]	; (10011450 <__ieee754_pow+0x60c>)
100112ca:	4b60      	ldr	r3, [pc, #384]	; (1001144c <__ieee754_pow+0x608>)
100112cc:	f002 fbce 	bl	10013a6c <__aeabi_dmul>
100112d0:	4a60      	ldr	r2, [pc, #384]	; (10011454 <__ieee754_pow+0x610>)
100112d2:	0004      	movs	r4, r0
100112d4:	000d      	movs	r5, r1
100112d6:	4b60      	ldr	r3, [pc, #384]	; (10011458 <__ieee754_pow+0x614>)
100112d8:	0030      	movs	r0, r6
100112da:	0039      	movs	r1, r7
100112dc:	f002 fbc6 	bl	10013a6c <__aeabi_dmul>
100112e0:	0002      	movs	r2, r0
100112e2:	000b      	movs	r3, r1
100112e4:	0020      	movs	r0, r4
100112e6:	0029      	movs	r1, r5
100112e8:	f001 fc70 	bl	10012bcc <__aeabi_dadd>
100112ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100112ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100112f0:	f001 fc6c 	bl	10012bcc <__aeabi_dadd>
100112f4:	0006      	movs	r6, r0
100112f6:	4648      	mov	r0, r9
100112f8:	000f      	movs	r7, r1
100112fa:	f003 f9db 	bl	100146b4 <__aeabi_i2d>
100112fe:	0004      	movs	r4, r0
10011300:	000d      	movs	r5, r1
10011302:	9804      	ldr	r0, [sp, #16]
10011304:	9905      	ldr	r1, [sp, #20]
10011306:	0032      	movs	r2, r6
10011308:	003b      	movs	r3, r7
1001130a:	f001 fc5f 	bl	10012bcc <__aeabi_dadd>
1001130e:	9a08      	ldr	r2, [sp, #32]
10011310:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011312:	f001 fc5b 	bl	10012bcc <__aeabi_dadd>
10011316:	0022      	movs	r2, r4
10011318:	002b      	movs	r3, r5
1001131a:	f001 fc57 	bl	10012bcc <__aeabi_dadd>
1001131e:	2000      	movs	r0, #0
10011320:	0022      	movs	r2, r4
10011322:	002b      	movs	r3, r5
10011324:	9002      	str	r0, [sp, #8]
10011326:	9103      	str	r1, [sp, #12]
10011328:	f002 fe1a 	bl	10013f60 <__aeabi_dsub>
1001132c:	9a08      	ldr	r2, [sp, #32]
1001132e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011330:	f002 fe16 	bl	10013f60 <__aeabi_dsub>
10011334:	9a04      	ldr	r2, [sp, #16]
10011336:	9b05      	ldr	r3, [sp, #20]
10011338:	f002 fe12 	bl	10013f60 <__aeabi_dsub>
1001133c:	0002      	movs	r2, r0
1001133e:	000b      	movs	r3, r1
10011340:	0030      	movs	r0, r6
10011342:	0039      	movs	r1, r7
10011344:	f002 fe0c 	bl	10013f60 <__aeabi_dsub>
10011348:	9004      	str	r0, [sp, #16]
1001134a:	9105      	str	r1, [sp, #20]
1001134c:	465b      	mov	r3, fp
1001134e:	4642      	mov	r2, r8
10011350:	3b01      	subs	r3, #1
10011352:	4313      	orrs	r3, r2
10011354:	d100      	bne.n	10011358 <__ieee754_pow+0x514>
10011356:	e197      	b.n	10011688 <__ieee754_pow+0x844>
10011358:	2300      	movs	r3, #0
1001135a:	4c2b      	ldr	r4, [pc, #172]	; (10011408 <__ieee754_pow+0x5c4>)
1001135c:	9306      	str	r3, [sp, #24]
1001135e:	9407      	str	r4, [sp, #28]
10011360:	9800      	ldr	r0, [sp, #0]
10011362:	9901      	ldr	r1, [sp, #4]
10011364:	2600      	movs	r6, #0
10011366:	000b      	movs	r3, r1
10011368:	0032      	movs	r2, r6
1001136a:	000f      	movs	r7, r1
1001136c:	f002 fdf8 	bl	10013f60 <__aeabi_dsub>
10011370:	9a02      	ldr	r2, [sp, #8]
10011372:	9b03      	ldr	r3, [sp, #12]
10011374:	f002 fb7a 	bl	10013a6c <__aeabi_dmul>
10011378:	9a00      	ldr	r2, [sp, #0]
1001137a:	9b01      	ldr	r3, [sp, #4]
1001137c:	0004      	movs	r4, r0
1001137e:	000d      	movs	r5, r1
10011380:	9804      	ldr	r0, [sp, #16]
10011382:	9905      	ldr	r1, [sp, #20]
10011384:	f002 fb72 	bl	10013a6c <__aeabi_dmul>
10011388:	0002      	movs	r2, r0
1001138a:	000b      	movs	r3, r1
1001138c:	0020      	movs	r0, r4
1001138e:	0029      	movs	r1, r5
10011390:	f001 fc1c 	bl	10012bcc <__aeabi_dadd>
10011394:	0004      	movs	r4, r0
10011396:	000d      	movs	r5, r1
10011398:	9802      	ldr	r0, [sp, #8]
1001139a:	9903      	ldr	r1, [sp, #12]
1001139c:	003b      	movs	r3, r7
1001139e:	0032      	movs	r2, r6
100113a0:	9404      	str	r4, [sp, #16]
100113a2:	9505      	str	r5, [sp, #20]
100113a4:	f002 fb62 	bl	10013a6c <__aeabi_dmul>
100113a8:	9000      	str	r0, [sp, #0]
100113aa:	9101      	str	r1, [sp, #4]
100113ac:	000b      	movs	r3, r1
100113ae:	0002      	movs	r2, r0
100113b0:	0029      	movs	r1, r5
100113b2:	0020      	movs	r0, r4
100113b4:	f001 fc0a 	bl	10012bcc <__aeabi_dadd>
100113b8:	4b28      	ldr	r3, [pc, #160]	; (1001145c <__ieee754_pow+0x618>)
100113ba:	4681      	mov	r9, r0
100113bc:	1e0f      	subs	r7, r1, #0
100113be:	468a      	mov	sl, r1
100113c0:	429f      	cmp	r7, r3
100113c2:	dc00      	bgt.n	100113c6 <__ieee754_pow+0x582>
100113c4:	e13c      	b.n	10011640 <__ieee754_pow+0x7fc>
100113c6:	4b26      	ldr	r3, [pc, #152]	; (10011460 <__ieee754_pow+0x61c>)
100113c8:	18cb      	adds	r3, r1, r3
100113ca:	4303      	orrs	r3, r0
100113cc:	d000      	beq.n	100113d0 <__ieee754_pow+0x58c>
100113ce:	e1db      	b.n	10011788 <__ieee754_pow+0x944>
100113d0:	9804      	ldr	r0, [sp, #16]
100113d2:	9905      	ldr	r1, [sp, #20]
100113d4:	4a23      	ldr	r2, [pc, #140]	; (10011464 <__ieee754_pow+0x620>)
100113d6:	4b24      	ldr	r3, [pc, #144]	; (10011468 <__ieee754_pow+0x624>)
100113d8:	f001 fbf8 	bl	10012bcc <__aeabi_dadd>
100113dc:	9a00      	ldr	r2, [sp, #0]
100113de:	9b01      	ldr	r3, [sp, #4]
100113e0:	0004      	movs	r4, r0
100113e2:	000d      	movs	r5, r1
100113e4:	4648      	mov	r0, r9
100113e6:	0039      	movs	r1, r7
100113e8:	f002 fdba 	bl	10013f60 <__aeabi_dsub>
100113ec:	0002      	movs	r2, r0
100113ee:	000b      	movs	r3, r1
100113f0:	0020      	movs	r0, r4
100113f2:	0029      	movs	r1, r5
100113f4:	f000 fe2e 	bl	10012054 <__aeabi_dcmpgt>
100113f8:	003e      	movs	r6, r7
100113fa:	e037      	b.n	1001146c <__ieee754_pow+0x628>
100113fc:	000fffff 	.word	0x000fffff
10011400:	43400000 	.word	0x43400000
10011404:	fffffc01 	.word	0xfffffc01
10011408:	3ff00000 	.word	0x3ff00000
1001140c:	0003988e 	.word	0x0003988e
10011410:	000bb679 	.word	0x000bb679
10011414:	fff00000 	.word	0xfff00000
10011418:	4a454eef 	.word	0x4a454eef
1001141c:	3fca7e28 	.word	0x3fca7e28
10011420:	93c9db65 	.word	0x93c9db65
10011424:	3fcd864a 	.word	0x3fcd864a
10011428:	a91d4101 	.word	0xa91d4101
1001142c:	3fd17460 	.word	0x3fd17460
10011430:	518f264d 	.word	0x518f264d
10011434:	3fd55555 	.word	0x3fd55555
10011438:	db6fabff 	.word	0xdb6fabff
1001143c:	3fdb6db6 	.word	0x3fdb6db6
10011440:	33333303 	.word	0x33333303
10011444:	3fe33333 	.word	0x3fe33333
10011448:	40080000 	.word	0x40080000
1001144c:	3feec709 	.word	0x3feec709
10011450:	dc3a03fd 	.word	0xdc3a03fd
10011454:	145b01f5 	.word	0x145b01f5
10011458:	be3e2fe0 	.word	0xbe3e2fe0
1001145c:	408fffff 	.word	0x408fffff
10011460:	bf700000 	.word	0xbf700000
10011464:	652b82fe 	.word	0x652b82fe
10011468:	3c971547 	.word	0x3c971547
1001146c:	2800      	cmp	r0, #0
1001146e:	d000      	beq.n	10011472 <__ieee754_pow+0x62e>
10011470:	e18a      	b.n	10011788 <__ieee754_pow+0x944>
10011472:	2280      	movs	r2, #128	; 0x80
10011474:	4be7      	ldr	r3, [pc, #924]	; (10011814 <__ieee754_pow+0x9d0>)
10011476:	0352      	lsls	r2, r2, #13
10011478:	469c      	mov	ip, r3
1001147a:	0013      	movs	r3, r2
1001147c:	1536      	asrs	r6, r6, #20
1001147e:	4466      	add	r6, ip
10011480:	4133      	asrs	r3, r6
10011482:	49e5      	ldr	r1, [pc, #916]	; (10011818 <__ieee754_pow+0x9d4>)
10011484:	19db      	adds	r3, r3, r7
10011486:	005e      	lsls	r6, r3, #1
10011488:	001c      	movs	r4, r3
1001148a:	031b      	lsls	r3, r3, #12
1001148c:	468c      	mov	ip, r1
1001148e:	0b1b      	lsrs	r3, r3, #12
10011490:	4313      	orrs	r3, r2
10011492:	2214      	movs	r2, #20
10011494:	0d76      	lsrs	r6, r6, #21
10011496:	4fe1      	ldr	r7, [pc, #900]	; (1001181c <__ieee754_pow+0x9d8>)
10011498:	4466      	add	r6, ip
1001149a:	4137      	asrs	r7, r6
1001149c:	1b96      	subs	r6, r2, r6
1001149e:	4133      	asrs	r3, r6
100114a0:	4698      	mov	r8, r3
100114a2:	4653      	mov	r3, sl
100114a4:	43bc      	bics	r4, r7
100114a6:	2000      	movs	r0, #0
100114a8:	0021      	movs	r1, r4
100114aa:	2b00      	cmp	r3, #0
100114ac:	da00      	bge.n	100114b0 <__ieee754_pow+0x66c>
100114ae:	e1a9      	b.n	10011804 <__ieee754_pow+0x9c0>
100114b0:	0002      	movs	r2, r0
100114b2:	000b      	movs	r3, r1
100114b4:	9800      	ldr	r0, [sp, #0]
100114b6:	9901      	ldr	r1, [sp, #4]
100114b8:	f002 fd52 	bl	10013f60 <__aeabi_dsub>
100114bc:	000b      	movs	r3, r1
100114be:	9000      	str	r0, [sp, #0]
100114c0:	9101      	str	r1, [sp, #4]
100114c2:	0002      	movs	r2, r0
100114c4:	9804      	ldr	r0, [sp, #16]
100114c6:	9905      	ldr	r1, [sp, #20]
100114c8:	f001 fb80 	bl	10012bcc <__aeabi_dadd>
100114cc:	4643      	mov	r3, r8
100114ce:	051b      	lsls	r3, r3, #20
100114d0:	4699      	mov	r9, r3
100114d2:	2000      	movs	r0, #0
100114d4:	2200      	movs	r2, #0
100114d6:	4bd2      	ldr	r3, [pc, #840]	; (10011820 <__ieee754_pow+0x9dc>)
100114d8:	0006      	movs	r6, r0
100114da:	000f      	movs	r7, r1
100114dc:	f002 fac6 	bl	10013a6c <__aeabi_dmul>
100114e0:	9a00      	ldr	r2, [sp, #0]
100114e2:	9b01      	ldr	r3, [sp, #4]
100114e4:	9002      	str	r0, [sp, #8]
100114e6:	9103      	str	r1, [sp, #12]
100114e8:	0030      	movs	r0, r6
100114ea:	0039      	movs	r1, r7
100114ec:	f002 fd38 	bl	10013f60 <__aeabi_dsub>
100114f0:	0002      	movs	r2, r0
100114f2:	000b      	movs	r3, r1
100114f4:	9804      	ldr	r0, [sp, #16]
100114f6:	9905      	ldr	r1, [sp, #20]
100114f8:	f002 fd32 	bl	10013f60 <__aeabi_dsub>
100114fc:	4ac9      	ldr	r2, [pc, #804]	; (10011824 <__ieee754_pow+0x9e0>)
100114fe:	4bca      	ldr	r3, [pc, #808]	; (10011828 <__ieee754_pow+0x9e4>)
10011500:	f002 fab4 	bl	10013a6c <__aeabi_dmul>
10011504:	4ac9      	ldr	r2, [pc, #804]	; (1001182c <__ieee754_pow+0x9e8>)
10011506:	0004      	movs	r4, r0
10011508:	000d      	movs	r5, r1
1001150a:	4bc9      	ldr	r3, [pc, #804]	; (10011830 <__ieee754_pow+0x9ec>)
1001150c:	0030      	movs	r0, r6
1001150e:	0039      	movs	r1, r7
10011510:	f002 faac 	bl	10013a6c <__aeabi_dmul>
10011514:	0002      	movs	r2, r0
10011516:	000b      	movs	r3, r1
10011518:	0020      	movs	r0, r4
1001151a:	0029      	movs	r1, r5
1001151c:	f001 fb56 	bl	10012bcc <__aeabi_dadd>
10011520:	0004      	movs	r4, r0
10011522:	000d      	movs	r5, r1
10011524:	0002      	movs	r2, r0
10011526:	000b      	movs	r3, r1
10011528:	9802      	ldr	r0, [sp, #8]
1001152a:	9903      	ldr	r1, [sp, #12]
1001152c:	f001 fb4e 	bl	10012bcc <__aeabi_dadd>
10011530:	9a02      	ldr	r2, [sp, #8]
10011532:	9b03      	ldr	r3, [sp, #12]
10011534:	0006      	movs	r6, r0
10011536:	000f      	movs	r7, r1
10011538:	f002 fd12 	bl	10013f60 <__aeabi_dsub>
1001153c:	0002      	movs	r2, r0
1001153e:	000b      	movs	r3, r1
10011540:	0020      	movs	r0, r4
10011542:	0029      	movs	r1, r5
10011544:	f002 fd0c 	bl	10013f60 <__aeabi_dsub>
10011548:	0032      	movs	r2, r6
1001154a:	9000      	str	r0, [sp, #0]
1001154c:	9101      	str	r1, [sp, #4]
1001154e:	003b      	movs	r3, r7
10011550:	0030      	movs	r0, r6
10011552:	0039      	movs	r1, r7
10011554:	f002 fa8a 	bl	10013a6c <__aeabi_dmul>
10011558:	0004      	movs	r4, r0
1001155a:	000d      	movs	r5, r1
1001155c:	4ab5      	ldr	r2, [pc, #724]	; (10011834 <__ieee754_pow+0x9f0>)
1001155e:	4bb6      	ldr	r3, [pc, #728]	; (10011838 <__ieee754_pow+0x9f4>)
10011560:	f002 fa84 	bl	10013a6c <__aeabi_dmul>
10011564:	4ab5      	ldr	r2, [pc, #724]	; (1001183c <__ieee754_pow+0x9f8>)
10011566:	4bb6      	ldr	r3, [pc, #728]	; (10011840 <__ieee754_pow+0x9fc>)
10011568:	f002 fcfa 	bl	10013f60 <__aeabi_dsub>
1001156c:	0022      	movs	r2, r4
1001156e:	002b      	movs	r3, r5
10011570:	f002 fa7c 	bl	10013a6c <__aeabi_dmul>
10011574:	4ab3      	ldr	r2, [pc, #716]	; (10011844 <__ieee754_pow+0xa00>)
10011576:	4bb4      	ldr	r3, [pc, #720]	; (10011848 <__ieee754_pow+0xa04>)
10011578:	f001 fb28 	bl	10012bcc <__aeabi_dadd>
1001157c:	0022      	movs	r2, r4
1001157e:	002b      	movs	r3, r5
10011580:	f002 fa74 	bl	10013a6c <__aeabi_dmul>
10011584:	4ab1      	ldr	r2, [pc, #708]	; (1001184c <__ieee754_pow+0xa08>)
10011586:	4bb2      	ldr	r3, [pc, #712]	; (10011850 <__ieee754_pow+0xa0c>)
10011588:	f002 fcea 	bl	10013f60 <__aeabi_dsub>
1001158c:	0022      	movs	r2, r4
1001158e:	002b      	movs	r3, r5
10011590:	f002 fa6c 	bl	10013a6c <__aeabi_dmul>
10011594:	4aaf      	ldr	r2, [pc, #700]	; (10011854 <__ieee754_pow+0xa10>)
10011596:	4bb0      	ldr	r3, [pc, #704]	; (10011858 <__ieee754_pow+0xa14>)
10011598:	f001 fb18 	bl	10012bcc <__aeabi_dadd>
1001159c:	0022      	movs	r2, r4
1001159e:	002b      	movs	r3, r5
100115a0:	f002 fa64 	bl	10013a6c <__aeabi_dmul>
100115a4:	0002      	movs	r2, r0
100115a6:	000b      	movs	r3, r1
100115a8:	0030      	movs	r0, r6
100115aa:	0039      	movs	r1, r7
100115ac:	f002 fcd8 	bl	10013f60 <__aeabi_dsub>
100115b0:	0004      	movs	r4, r0
100115b2:	000d      	movs	r5, r1
100115b4:	0002      	movs	r2, r0
100115b6:	000b      	movs	r3, r1
100115b8:	0030      	movs	r0, r6
100115ba:	0039      	movs	r1, r7
100115bc:	f002 fa56 	bl	10013a6c <__aeabi_dmul>
100115c0:	2380      	movs	r3, #128	; 0x80
100115c2:	9002      	str	r0, [sp, #8]
100115c4:	9103      	str	r1, [sp, #12]
100115c6:	2200      	movs	r2, #0
100115c8:	05db      	lsls	r3, r3, #23
100115ca:	0020      	movs	r0, r4
100115cc:	0029      	movs	r1, r5
100115ce:	f002 fcc7 	bl	10013f60 <__aeabi_dsub>
100115d2:	0002      	movs	r2, r0
100115d4:	000b      	movs	r3, r1
100115d6:	9802      	ldr	r0, [sp, #8]
100115d8:	9903      	ldr	r1, [sp, #12]
100115da:	f001 fe23 	bl	10013224 <__aeabi_ddiv>
100115de:	9a00      	ldr	r2, [sp, #0]
100115e0:	9b01      	ldr	r3, [sp, #4]
100115e2:	0004      	movs	r4, r0
100115e4:	000d      	movs	r5, r1
100115e6:	0030      	movs	r0, r6
100115e8:	0039      	movs	r1, r7
100115ea:	f002 fa3f 	bl	10013a6c <__aeabi_dmul>
100115ee:	9a00      	ldr	r2, [sp, #0]
100115f0:	9b01      	ldr	r3, [sp, #4]
100115f2:	f001 faeb 	bl	10012bcc <__aeabi_dadd>
100115f6:	0002      	movs	r2, r0
100115f8:	000b      	movs	r3, r1
100115fa:	0020      	movs	r0, r4
100115fc:	0029      	movs	r1, r5
100115fe:	f002 fcaf 	bl	10013f60 <__aeabi_dsub>
10011602:	0032      	movs	r2, r6
10011604:	003b      	movs	r3, r7
10011606:	f002 fcab 	bl	10013f60 <__aeabi_dsub>
1001160a:	0002      	movs	r2, r0
1001160c:	000b      	movs	r3, r1
1001160e:	2000      	movs	r0, #0
10011610:	4992      	ldr	r1, [pc, #584]	; (1001185c <__ieee754_pow+0xa18>)
10011612:	f002 fca5 	bl	10013f60 <__aeabi_dsub>
10011616:	464b      	mov	r3, r9
10011618:	185b      	adds	r3, r3, r1
1001161a:	151a      	asrs	r2, r3, #20
1001161c:	2a00      	cmp	r2, #0
1001161e:	dc00      	bgt.n	10011622 <__ieee754_pow+0x7de>
10011620:	e0f4      	b.n	1001180c <__ieee754_pow+0x9c8>
10011622:	0019      	movs	r1, r3
10011624:	9a06      	ldr	r2, [sp, #24]
10011626:	9b07      	ldr	r3, [sp, #28]
10011628:	f002 fa20 	bl	10013a6c <__aeabi_dmul>
1001162c:	0006      	movs	r6, r0
1001162e:	e452      	b.n	10010ed6 <__ieee754_pow+0x92>
10011630:	0032      	movs	r2, r6
10011632:	0030      	movs	r0, r6
10011634:	002b      	movs	r3, r5
10011636:	0029      	movs	r1, r5
10011638:	f002 fa18 	bl	10013a6c <__aeabi_dmul>
1001163c:	0006      	movs	r6, r0
1001163e:	e44a      	b.n	10010ed6 <__ieee754_pow+0x92>
10011640:	4b87      	ldr	r3, [pc, #540]	; (10011860 <__ieee754_pow+0xa1c>)
10011642:	004e      	lsls	r6, r1, #1
10011644:	0876      	lsrs	r6, r6, #1
10011646:	429e      	cmp	r6, r3
10011648:	dc00      	bgt.n	1001164c <__ieee754_pow+0x808>
1001164a:	e0bf      	b.n	100117cc <__ieee754_pow+0x988>
1001164c:	4b85      	ldr	r3, [pc, #532]	; (10011864 <__ieee754_pow+0xa20>)
1001164e:	18cb      	adds	r3, r1, r3
10011650:	4303      	orrs	r3, r0
10011652:	d10c      	bne.n	1001166e <__ieee754_pow+0x82a>
10011654:	9a00      	ldr	r2, [sp, #0]
10011656:	9b01      	ldr	r3, [sp, #4]
10011658:	f002 fc82 	bl	10013f60 <__aeabi_dsub>
1001165c:	0002      	movs	r2, r0
1001165e:	000b      	movs	r3, r1
10011660:	9804      	ldr	r0, [sp, #16]
10011662:	9905      	ldr	r1, [sp, #20]
10011664:	f000 fcec 	bl	10012040 <__aeabi_dcmple>
10011668:	2800      	cmp	r0, #0
1001166a:	d100      	bne.n	1001166e <__ieee754_pow+0x82a>
1001166c:	e701      	b.n	10011472 <__ieee754_pow+0x62e>
1001166e:	9806      	ldr	r0, [sp, #24]
10011670:	9907      	ldr	r1, [sp, #28]
10011672:	4a7d      	ldr	r2, [pc, #500]	; (10011868 <__ieee754_pow+0xa24>)
10011674:	4b7d      	ldr	r3, [pc, #500]	; (1001186c <__ieee754_pow+0xa28>)
10011676:	f002 f9f9 	bl	10013a6c <__aeabi_dmul>
1001167a:	4a7b      	ldr	r2, [pc, #492]	; (10011868 <__ieee754_pow+0xa24>)
1001167c:	4b7b      	ldr	r3, [pc, #492]	; (1001186c <__ieee754_pow+0xa28>)
1001167e:	f002 f9f5 	bl	10013a6c <__aeabi_dmul>
10011682:	0006      	movs	r6, r0
10011684:	f7ff fc27 	bl	10010ed6 <__ieee754_pow+0x92>
10011688:	2300      	movs	r3, #0
1001168a:	4c79      	ldr	r4, [pc, #484]	; (10011870 <__ieee754_pow+0xa2c>)
1001168c:	9306      	str	r3, [sp, #24]
1001168e:	9407      	str	r4, [sp, #28]
10011690:	e666      	b.n	10011360 <__ieee754_pow+0x51c>
10011692:	4653      	mov	r3, sl
10011694:	2b00      	cmp	r3, #0
10011696:	db00      	blt.n	1001169a <__ieee754_pow+0x856>
10011698:	e4c3      	b.n	10011022 <__ieee754_pow+0x1de>
1001169a:	9b00      	ldr	r3, [sp, #0]
1001169c:	9c01      	ldr	r4, [sp, #4]
1001169e:	2280      	movs	r2, #128	; 0x80
100116a0:	0612      	lsls	r2, r2, #24
100116a2:	001e      	movs	r6, r3
100116a4:	4694      	mov	ip, r2
100116a6:	0023      	movs	r3, r4
100116a8:	4463      	add	r3, ip
100116aa:	0019      	movs	r1, r3
100116ac:	f7ff fc13 	bl	10010ed6 <__ieee754_pow+0x92>
100116b0:	0002      	movs	r2, r0
100116b2:	000b      	movs	r3, r1
100116b4:	2000      	movs	r0, #0
100116b6:	4969      	ldr	r1, [pc, #420]	; (1001185c <__ieee754_pow+0xa18>)
100116b8:	f001 fdb4 	bl	10013224 <__aeabi_ddiv>
100116bc:	e44a      	b.n	10010f54 <__ieee754_pow+0x110>
100116be:	4b6d      	ldr	r3, [pc, #436]	; (10011874 <__ieee754_pow+0xa30>)
100116c0:	429c      	cmp	r4, r3
100116c2:	dc00      	bgt.n	100116c6 <__ieee754_pow+0x882>
100116c4:	e4aa      	b.n	1001101c <__ieee754_pow+0x1d8>
100116c6:	4b65      	ldr	r3, [pc, #404]	; (1001185c <__ieee754_pow+0xa18>)
100116c8:	429c      	cmp	r4, r3
100116ca:	dd01      	ble.n	100116d0 <__ieee754_pow+0x88c>
100116cc:	f7ff fc2c 	bl	10010f28 <__ieee754_pow+0xe4>
100116d0:	2200      	movs	r2, #0
100116d2:	4b62      	ldr	r3, [pc, #392]	; (1001185c <__ieee754_pow+0xa18>)
100116d4:	f002 fc44 	bl	10013f60 <__aeabi_dsub>
100116d8:	22c0      	movs	r2, #192	; 0xc0
100116da:	4b67      	ldr	r3, [pc, #412]	; (10011878 <__ieee754_pow+0xa34>)
100116dc:	05d2      	lsls	r2, r2, #23
100116de:	0004      	movs	r4, r0
100116e0:	000d      	movs	r5, r1
100116e2:	f002 f9c3 	bl	10013a6c <__aeabi_dmul>
100116e6:	4a65      	ldr	r2, [pc, #404]	; (1001187c <__ieee754_pow+0xa38>)
100116e8:	0006      	movs	r6, r0
100116ea:	000f      	movs	r7, r1
100116ec:	4b64      	ldr	r3, [pc, #400]	; (10011880 <__ieee754_pow+0xa3c>)
100116ee:	0020      	movs	r0, r4
100116f0:	0029      	movs	r1, r5
100116f2:	f002 f9bb 	bl	10013a6c <__aeabi_dmul>
100116f6:	2200      	movs	r2, #0
100116f8:	9002      	str	r0, [sp, #8]
100116fa:	9103      	str	r1, [sp, #12]
100116fc:	4b61      	ldr	r3, [pc, #388]	; (10011884 <__ieee754_pow+0xa40>)
100116fe:	0020      	movs	r0, r4
10011700:	0029      	movs	r1, r5
10011702:	f002 f9b3 	bl	10013a6c <__aeabi_dmul>
10011706:	0002      	movs	r2, r0
10011708:	000b      	movs	r3, r1
1001170a:	485f      	ldr	r0, [pc, #380]	; (10011888 <__ieee754_pow+0xa44>)
1001170c:	495f      	ldr	r1, [pc, #380]	; (1001188c <__ieee754_pow+0xa48>)
1001170e:	f002 fc27 	bl	10013f60 <__aeabi_dsub>
10011712:	0022      	movs	r2, r4
10011714:	002b      	movs	r3, r5
10011716:	f002 f9a9 	bl	10013a6c <__aeabi_dmul>
1001171a:	0002      	movs	r2, r0
1001171c:	000b      	movs	r3, r1
1001171e:	2000      	movs	r0, #0
10011720:	495b      	ldr	r1, [pc, #364]	; (10011890 <__ieee754_pow+0xa4c>)
10011722:	f002 fc1d 	bl	10013f60 <__aeabi_dsub>
10011726:	0022      	movs	r2, r4
10011728:	9004      	str	r0, [sp, #16]
1001172a:	9105      	str	r1, [sp, #20]
1001172c:	002b      	movs	r3, r5
1001172e:	0020      	movs	r0, r4
10011730:	0029      	movs	r1, r5
10011732:	f002 f99b 	bl	10013a6c <__aeabi_dmul>
10011736:	0002      	movs	r2, r0
10011738:	000b      	movs	r3, r1
1001173a:	9804      	ldr	r0, [sp, #16]
1001173c:	9905      	ldr	r1, [sp, #20]
1001173e:	f002 f995 	bl	10013a6c <__aeabi_dmul>
10011742:	4a54      	ldr	r2, [pc, #336]	; (10011894 <__ieee754_pow+0xa50>)
10011744:	4b4c      	ldr	r3, [pc, #304]	; (10011878 <__ieee754_pow+0xa34>)
10011746:	f002 f991 	bl	10013a6c <__aeabi_dmul>
1001174a:	0002      	movs	r2, r0
1001174c:	000b      	movs	r3, r1
1001174e:	9802      	ldr	r0, [sp, #8]
10011750:	9903      	ldr	r1, [sp, #12]
10011752:	f002 fc05 	bl	10013f60 <__aeabi_dsub>
10011756:	0002      	movs	r2, r0
10011758:	000b      	movs	r3, r1
1001175a:	0004      	movs	r4, r0
1001175c:	000d      	movs	r5, r1
1001175e:	0030      	movs	r0, r6
10011760:	0039      	movs	r1, r7
10011762:	f001 fa33 	bl	10012bcc <__aeabi_dadd>
10011766:	2200      	movs	r2, #0
10011768:	0010      	movs	r0, r2
1001176a:	003b      	movs	r3, r7
1001176c:	0032      	movs	r2, r6
1001176e:	9002      	str	r0, [sp, #8]
10011770:	9103      	str	r1, [sp, #12]
10011772:	f002 fbf5 	bl	10013f60 <__aeabi_dsub>
10011776:	0002      	movs	r2, r0
10011778:	000b      	movs	r3, r1
1001177a:	0020      	movs	r0, r4
1001177c:	0029      	movs	r1, r5
1001177e:	f002 fbef 	bl	10013f60 <__aeabi_dsub>
10011782:	9004      	str	r0, [sp, #16]
10011784:	9105      	str	r1, [sp, #20]
10011786:	e5e1      	b.n	1001134c <__ieee754_pow+0x508>
10011788:	4a43      	ldr	r2, [pc, #268]	; (10011898 <__ieee754_pow+0xa54>)
1001178a:	4b44      	ldr	r3, [pc, #272]	; (1001189c <__ieee754_pow+0xa58>)
1001178c:	9806      	ldr	r0, [sp, #24]
1001178e:	9907      	ldr	r1, [sp, #28]
10011790:	f002 f96c 	bl	10013a6c <__aeabi_dmul>
10011794:	4a40      	ldr	r2, [pc, #256]	; (10011898 <__ieee754_pow+0xa54>)
10011796:	4b41      	ldr	r3, [pc, #260]	; (1001189c <__ieee754_pow+0xa58>)
10011798:	f002 f968 	bl	10013a6c <__aeabi_dmul>
1001179c:	0006      	movs	r6, r0
1001179e:	f7ff fb9a 	bl	10010ed6 <__ieee754_pow+0x92>
100117a2:	2a00      	cmp	r2, #0
100117a4:	d001      	beq.n	100117aa <__ieee754_pow+0x966>
100117a6:	f7ff fba5 	bl	10010ef4 <__ieee754_pow+0xb0>
100117aa:	3214      	adds	r2, #20
100117ac:	1ad3      	subs	r3, r2, r3
100117ae:	003a      	movs	r2, r7
100117b0:	411a      	asrs	r2, r3
100117b2:	0011      	movs	r1, r2
100117b4:	4099      	lsls	r1, r3
100117b6:	428f      	cmp	r7, r1
100117b8:	d001      	beq.n	100117be <__ieee754_pow+0x97a>
100117ba:	f7ff fb6f 	bl	10010e9c <__ieee754_pow+0x58>
100117be:	2301      	movs	r3, #1
100117c0:	4013      	ands	r3, r2
100117c2:	2202      	movs	r2, #2
100117c4:	1ad3      	subs	r3, r2, r3
100117c6:	469b      	mov	fp, r3
100117c8:	f7ff fb68 	bl	10010e9c <__ieee754_pow+0x58>
100117cc:	4b30      	ldr	r3, [pc, #192]	; (10011890 <__ieee754_pow+0xa4c>)
100117ce:	429e      	cmp	r6, r3
100117d0:	dd00      	ble.n	100117d4 <__ieee754_pow+0x990>
100117d2:	e64e      	b.n	10011472 <__ieee754_pow+0x62e>
100117d4:	2300      	movs	r3, #0
100117d6:	4699      	mov	r9, r3
100117d8:	4698      	mov	r8, r3
100117da:	e67a      	b.n	100114d2 <__ieee754_pow+0x68e>
100117dc:	0002      	movs	r2, r0
100117de:	000b      	movs	r3, r1
100117e0:	f7ff fc14 	bl	1001100c <__ieee754_pow+0x1c8>
100117e4:	2380      	movs	r3, #128	; 0x80
100117e6:	4c2e      	ldr	r4, [pc, #184]	; (100118a0 <__ieee754_pow+0xa5c>)
100117e8:	05db      	lsls	r3, r3, #23
100117ea:	9308      	str	r3, [sp, #32]
100117ec:	9409      	str	r4, [sp, #36]	; 0x24
100117ee:	4b2d      	ldr	r3, [pc, #180]	; (100118a4 <__ieee754_pow+0xa60>)
100117f0:	4c2d      	ldr	r4, [pc, #180]	; (100118a8 <__ieee754_pow+0xa64>)
100117f2:	2200      	movs	r2, #0
100117f4:	930c      	str	r3, [sp, #48]	; 0x30
100117f6:	940d      	str	r4, [sp, #52]	; 0x34
100117f8:	2480      	movs	r4, #128	; 0x80
100117fa:	4b2c      	ldr	r3, [pc, #176]	; (100118ac <__ieee754_pow+0xa68>)
100117fc:	02e4      	lsls	r4, r4, #11
100117fe:	9206      	str	r2, [sp, #24]
10011800:	9307      	str	r3, [sp, #28]
10011802:	e456      	b.n	100110b2 <__ieee754_pow+0x26e>
10011804:	4643      	mov	r3, r8
10011806:	425b      	negs	r3, r3
10011808:	4698      	mov	r8, r3
1001180a:	e651      	b.n	100114b0 <__ieee754_pow+0x66c>
1001180c:	4642      	mov	r2, r8
1001180e:	f000 f9fd 	bl	10011c0c <scalbn>
10011812:	e707      	b.n	10011624 <__ieee754_pow+0x7e0>
10011814:	fffffc02 	.word	0xfffffc02
10011818:	fffffc01 	.word	0xfffffc01
1001181c:	000fffff 	.word	0x000fffff
10011820:	3fe62e43 	.word	0x3fe62e43
10011824:	fefa39ef 	.word	0xfefa39ef
10011828:	3fe62e42 	.word	0x3fe62e42
1001182c:	0ca86c39 	.word	0x0ca86c39
10011830:	be205c61 	.word	0xbe205c61
10011834:	72bea4d0 	.word	0x72bea4d0
10011838:	3e663769 	.word	0x3e663769
1001183c:	c5d26bf1 	.word	0xc5d26bf1
10011840:	3ebbbd41 	.word	0x3ebbbd41
10011844:	af25de2c 	.word	0xaf25de2c
10011848:	3f11566a 	.word	0x3f11566a
1001184c:	16bebd93 	.word	0x16bebd93
10011850:	3f66c16c 	.word	0x3f66c16c
10011854:	5555553e 	.word	0x5555553e
10011858:	3fc55555 	.word	0x3fc55555
1001185c:	3ff00000 	.word	0x3ff00000
10011860:	4090cbff 	.word	0x4090cbff
10011864:	3f6f3400 	.word	0x3f6f3400
10011868:	c2f8f359 	.word	0xc2f8f359
1001186c:	01a56e1f 	.word	0x01a56e1f
10011870:	bff00000 	.word	0xbff00000
10011874:	3feffffe 	.word	0x3feffffe
10011878:	3ff71547 	.word	0x3ff71547
1001187c:	f85ddf44 	.word	0xf85ddf44
10011880:	3e54ae0b 	.word	0x3e54ae0b
10011884:	3fd00000 	.word	0x3fd00000
10011888:	55555555 	.word	0x55555555
1001188c:	3fd55555 	.word	0x3fd55555
10011890:	3fe00000 	.word	0x3fe00000
10011894:	652b82fe 	.word	0x652b82fe
10011898:	8800759c 	.word	0x8800759c
1001189c:	7e37e43c 	.word	0x7e37e43c
100118a0:	3fe2b803 	.word	0x3fe2b803
100118a4:	43cfd006 	.word	0x43cfd006
100118a8:	3e4cfdeb 	.word	0x3e4cfdeb
100118ac:	3ff80000 	.word	0x3ff80000

100118b0 <__ieee754_sqrt>:
100118b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100118b2:	4656      	mov	r6, sl
100118b4:	464d      	mov	r5, r9
100118b6:	4644      	mov	r4, r8
100118b8:	465f      	mov	r7, fp
100118ba:	4b75      	ldr	r3, [pc, #468]	; (10011a90 <__ieee754_sqrt+0x1e0>)
100118bc:	b4f0      	push	{r4, r5, r6, r7}
100118be:	000a      	movs	r2, r1
100118c0:	000d      	movs	r5, r1
100118c2:	0019      	movs	r1, r3
100118c4:	b083      	sub	sp, #12
100118c6:	0006      	movs	r6, r0
100118c8:	0004      	movs	r4, r0
100118ca:	4029      	ands	r1, r5
100118cc:	4299      	cmp	r1, r3
100118ce:	d100      	bne.n	100118d2 <__ieee754_sqrt+0x22>
100118d0:	e0ba      	b.n	10011a48 <__ieee754_sqrt+0x198>
100118d2:	2d00      	cmp	r5, #0
100118d4:	dc00      	bgt.n	100118d8 <__ieee754_sqrt+0x28>
100118d6:	e094      	b.n	10011a02 <__ieee754_sqrt+0x152>
100118d8:	152d      	asrs	r5, r5, #20
100118da:	d100      	bne.n	100118de <__ieee754_sqrt+0x2e>
100118dc:	e0a3      	b.n	10011a26 <__ieee754_sqrt+0x176>
100118de:	4b6d      	ldr	r3, [pc, #436]	; (10011a94 <__ieee754_sqrt+0x1e4>)
100118e0:	0312      	lsls	r2, r2, #12
100118e2:	469c      	mov	ip, r3
100118e4:	2380      	movs	r3, #128	; 0x80
100118e6:	0b12      	lsrs	r2, r2, #12
100118e8:	035b      	lsls	r3, r3, #13
100118ea:	4465      	add	r5, ip
100118ec:	431a      	orrs	r2, r3
100118ee:	07eb      	lsls	r3, r5, #31
100118f0:	d500      	bpl.n	100118f4 <__ieee754_sqrt+0x44>
100118f2:	e081      	b.n	100119f8 <__ieee754_sqrt+0x148>
100118f4:	106b      	asrs	r3, r5, #1
100118f6:	4698      	mov	r8, r3
100118f8:	0fe3      	lsrs	r3, r4, #31
100118fa:	189b      	adds	r3, r3, r2
100118fc:	189b      	adds	r3, r3, r2
100118fe:	2280      	movs	r2, #128	; 0x80
10011900:	2116      	movs	r1, #22
10011902:	2600      	movs	r6, #0
10011904:	2700      	movs	r7, #0
10011906:	0064      	lsls	r4, r4, #1
10011908:	0392      	lsls	r2, r2, #14
1001190a:	18b8      	adds	r0, r7, r2
1001190c:	4298      	cmp	r0, r3
1001190e:	dc02      	bgt.n	10011916 <__ieee754_sqrt+0x66>
10011910:	1887      	adds	r7, r0, r2
10011912:	1a1b      	subs	r3, r3, r0
10011914:	18b6      	adds	r6, r6, r2
10011916:	0fe0      	lsrs	r0, r4, #31
10011918:	005b      	lsls	r3, r3, #1
1001191a:	3901      	subs	r1, #1
1001191c:	181b      	adds	r3, r3, r0
1001191e:	0064      	lsls	r4, r4, #1
10011920:	0852      	lsrs	r2, r2, #1
10011922:	2900      	cmp	r1, #0
10011924:	d1f1      	bne.n	1001190a <__ieee754_sqrt+0x5a>
10011926:	2200      	movs	r2, #0
10011928:	9201      	str	r2, [sp, #4]
1001192a:	4694      	mov	ip, r2
1001192c:	2280      	movs	r2, #128	; 0x80
1001192e:	0612      	lsls	r2, r2, #24
10011930:	2020      	movs	r0, #32
10011932:	4691      	mov	r9, r2
10011934:	e009      	b.n	1001194a <__ieee754_sqrt+0x9a>
10011936:	429f      	cmp	r7, r3
10011938:	d041      	beq.n	100119be <__ieee754_sqrt+0x10e>
1001193a:	0fe1      	lsrs	r1, r4, #31
1001193c:	18c9      	adds	r1, r1, r3
1001193e:	3801      	subs	r0, #1
10011940:	18cb      	adds	r3, r1, r3
10011942:	0064      	lsls	r4, r4, #1
10011944:	0852      	lsrs	r2, r2, #1
10011946:	2800      	cmp	r0, #0
10011948:	d01e      	beq.n	10011988 <__ieee754_sqrt+0xd8>
1001194a:	4661      	mov	r1, ip
1001194c:	1851      	adds	r1, r2, r1
1001194e:	429f      	cmp	r7, r3
10011950:	daf1      	bge.n	10011936 <__ieee754_sqrt+0x86>
10011952:	188d      	adds	r5, r1, r2
10011954:	46ac      	mov	ip, r5
10011956:	0fcd      	lsrs	r5, r1, #31
10011958:	07ed      	lsls	r5, r5, #31
1001195a:	46ba      	mov	sl, r7
1001195c:	454d      	cmp	r5, r9
1001195e:	d039      	beq.n	100119d4 <__ieee754_sqrt+0x124>
10011960:	1bdb      	subs	r3, r3, r7
10011962:	428c      	cmp	r4, r1
10011964:	41bf      	sbcs	r7, r7
10011966:	427f      	negs	r7, r7
10011968:	1bdb      	subs	r3, r3, r7
1001196a:	1a64      	subs	r4, r4, r1
1001196c:	9901      	ldr	r1, [sp, #4]
1001196e:	3801      	subs	r0, #1
10011970:	468b      	mov	fp, r1
10011972:	4493      	add	fp, r2
10011974:	4659      	mov	r1, fp
10011976:	9101      	str	r1, [sp, #4]
10011978:	0fe1      	lsrs	r1, r4, #31
1001197a:	18c9      	adds	r1, r1, r3
1001197c:	4657      	mov	r7, sl
1001197e:	18cb      	adds	r3, r1, r3
10011980:	0064      	lsls	r4, r4, #1
10011982:	0852      	lsrs	r2, r2, #1
10011984:	2800      	cmp	r0, #0
10011986:	d1e0      	bne.n	1001194a <__ieee754_sqrt+0x9a>
10011988:	4323      	orrs	r3, r4
1001198a:	d12b      	bne.n	100119e4 <__ieee754_sqrt+0x134>
1001198c:	9b01      	ldr	r3, [sp, #4]
1001198e:	085b      	lsrs	r3, r3, #1
10011990:	4941      	ldr	r1, [pc, #260]	; (10011a98 <__ieee754_sqrt+0x1e8>)
10011992:	1072      	asrs	r2, r6, #1
10011994:	468c      	mov	ip, r1
10011996:	4462      	add	r2, ip
10011998:	07f1      	lsls	r1, r6, #31
1001199a:	d502      	bpl.n	100119a2 <__ieee754_sqrt+0xf2>
1001199c:	2180      	movs	r1, #128	; 0x80
1001199e:	0609      	lsls	r1, r1, #24
100119a0:	430b      	orrs	r3, r1
100119a2:	4641      	mov	r1, r8
100119a4:	0509      	lsls	r1, r1, #20
100119a6:	188d      	adds	r5, r1, r2
100119a8:	001e      	movs	r6, r3
100119aa:	002f      	movs	r7, r5
100119ac:	0030      	movs	r0, r6
100119ae:	0039      	movs	r1, r7
100119b0:	b003      	add	sp, #12
100119b2:	bc3c      	pop	{r2, r3, r4, r5}
100119b4:	4690      	mov	r8, r2
100119b6:	4699      	mov	r9, r3
100119b8:	46a2      	mov	sl, r4
100119ba:	46ab      	mov	fp, r5
100119bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100119be:	42a1      	cmp	r1, r4
100119c0:	d80e      	bhi.n	100119e0 <__ieee754_sqrt+0x130>
100119c2:	188d      	adds	r5, r1, r2
100119c4:	46ac      	mov	ip, r5
100119c6:	0fcd      	lsrs	r5, r1, #31
100119c8:	07ed      	lsls	r5, r5, #31
100119ca:	454d      	cmp	r5, r9
100119cc:	d048      	beq.n	10011a60 <__ieee754_sqrt+0x1b0>
100119ce:	469a      	mov	sl, r3
100119d0:	2300      	movs	r3, #0
100119d2:	e7ca      	b.n	1001196a <__ieee754_sqrt+0xba>
100119d4:	4665      	mov	r5, ip
100119d6:	2d00      	cmp	r5, #0
100119d8:	dbc2      	blt.n	10011960 <__ieee754_sqrt+0xb0>
100119da:	1c7d      	adds	r5, r7, #1
100119dc:	46aa      	mov	sl, r5
100119de:	e7bf      	b.n	10011960 <__ieee754_sqrt+0xb0>
100119e0:	003b      	movs	r3, r7
100119e2:	e7aa      	b.n	1001193a <__ieee754_sqrt+0x8a>
100119e4:	9b01      	ldr	r3, [sp, #4]
100119e6:	3301      	adds	r3, #1
100119e8:	d03e      	beq.n	10011a68 <__ieee754_sqrt+0x1b8>
100119ea:	9a01      	ldr	r2, [sp, #4]
100119ec:	2301      	movs	r3, #1
100119ee:	4694      	mov	ip, r2
100119f0:	4013      	ands	r3, r2
100119f2:	4463      	add	r3, ip
100119f4:	085b      	lsrs	r3, r3, #1
100119f6:	e7cb      	b.n	10011990 <__ieee754_sqrt+0xe0>
100119f8:	0fe3      	lsrs	r3, r4, #31
100119fa:	0052      	lsls	r2, r2, #1
100119fc:	189a      	adds	r2, r3, r2
100119fe:	0064      	lsls	r4, r4, #1
10011a00:	e778      	b.n	100118f4 <__ieee754_sqrt+0x44>
10011a02:	006b      	lsls	r3, r5, #1
10011a04:	085b      	lsrs	r3, r3, #1
10011a06:	4303      	orrs	r3, r0
10011a08:	002f      	movs	r7, r5
10011a0a:	2b00      	cmp	r3, #0
10011a0c:	d0ce      	beq.n	100119ac <__ieee754_sqrt+0xfc>
10011a0e:	2500      	movs	r5, #0
10011a10:	2a00      	cmp	r2, #0
10011a12:	d131      	bne.n	10011a78 <__ieee754_sqrt+0x1c8>
10011a14:	0ae2      	lsrs	r2, r4, #11
10011a16:	3d15      	subs	r5, #21
10011a18:	0564      	lsls	r4, r4, #21
10011a1a:	2a00      	cmp	r2, #0
10011a1c:	d0fa      	beq.n	10011a14 <__ieee754_sqrt+0x164>
10011a1e:	2380      	movs	r3, #128	; 0x80
10011a20:	035b      	lsls	r3, r3, #13
10011a22:	421a      	tst	r2, r3
10011a24:	d123      	bne.n	10011a6e <__ieee754_sqrt+0x1be>
10011a26:	2080      	movs	r0, #128	; 0x80
10011a28:	2300      	movs	r3, #0
10011a2a:	0340      	lsls	r0, r0, #13
10011a2c:	e000      	b.n	10011a30 <__ieee754_sqrt+0x180>
10011a2e:	000b      	movs	r3, r1
10011a30:	0052      	lsls	r2, r2, #1
10011a32:	1c59      	adds	r1, r3, #1
10011a34:	4202      	tst	r2, r0
10011a36:	d0fa      	beq.n	10011a2e <__ieee754_sqrt+0x17e>
10011a38:	2020      	movs	r0, #32
10011a3a:	1a40      	subs	r0, r0, r1
10011a3c:	1aed      	subs	r5, r5, r3
10011a3e:	0023      	movs	r3, r4
10011a40:	40c3      	lsrs	r3, r0
10011a42:	408c      	lsls	r4, r1
10011a44:	431a      	orrs	r2, r3
10011a46:	e74a      	b.n	100118de <__ieee754_sqrt+0x2e>
10011a48:	0002      	movs	r2, r0
10011a4a:	002b      	movs	r3, r5
10011a4c:	0029      	movs	r1, r5
10011a4e:	f002 f80d 	bl	10013a6c <__aeabi_dmul>
10011a52:	0032      	movs	r2, r6
10011a54:	002b      	movs	r3, r5
10011a56:	f001 f8b9 	bl	10012bcc <__aeabi_dadd>
10011a5a:	0006      	movs	r6, r0
10011a5c:	000f      	movs	r7, r1
10011a5e:	e7a5      	b.n	100119ac <__ieee754_sqrt+0xfc>
10011a60:	4665      	mov	r5, ip
10011a62:	2d00      	cmp	r5, #0
10011a64:	dab9      	bge.n	100119da <__ieee754_sqrt+0x12a>
10011a66:	e7b2      	b.n	100119ce <__ieee754_sqrt+0x11e>
10011a68:	3601      	adds	r6, #1
10011a6a:	2300      	movs	r3, #0
10011a6c:	e790      	b.n	10011990 <__ieee754_sqrt+0xe0>
10011a6e:	2301      	movs	r3, #1
10011a70:	2020      	movs	r0, #32
10011a72:	425b      	negs	r3, r3
10011a74:	2100      	movs	r1, #0
10011a76:	e7e1      	b.n	10011a3c <__ieee754_sqrt+0x18c>
10011a78:	003b      	movs	r3, r7
10011a7a:	0002      	movs	r2, r0
10011a7c:	0039      	movs	r1, r7
10011a7e:	f002 fa6f 	bl	10013f60 <__aeabi_dsub>
10011a82:	0002      	movs	r2, r0
10011a84:	000b      	movs	r3, r1
10011a86:	f001 fbcd 	bl	10013224 <__aeabi_ddiv>
10011a8a:	0006      	movs	r6, r0
10011a8c:	000f      	movs	r7, r1
10011a8e:	e78d      	b.n	100119ac <__ieee754_sqrt+0xfc>
10011a90:	7ff00000 	.word	0x7ff00000
10011a94:	fffffc01 	.word	0xfffffc01
10011a98:	3fe00000 	.word	0x3fe00000

10011a9c <fabs>:
10011a9c:	0049      	lsls	r1, r1, #1
10011a9e:	084b      	lsrs	r3, r1, #1
10011aa0:	0019      	movs	r1, r3
10011aa2:	4770      	bx	lr

10011aa4 <finite>:
10011aa4:	4b03      	ldr	r3, [pc, #12]	; (10011ab4 <finite+0x10>)
10011aa6:	0048      	lsls	r0, r1, #1
10011aa8:	469c      	mov	ip, r3
10011aaa:	0840      	lsrs	r0, r0, #1
10011aac:	4460      	add	r0, ip
10011aae:	0fc0      	lsrs	r0, r0, #31
10011ab0:	4770      	bx	lr
10011ab2:	46c0      	nop			; (mov r8, r8)
10011ab4:	80100000 	.word	0x80100000

10011ab8 <matherr>:
10011ab8:	2000      	movs	r0, #0
10011aba:	4770      	bx	lr

10011abc <nan>:
10011abc:	2000      	movs	r0, #0
10011abe:	4901      	ldr	r1, [pc, #4]	; (10011ac4 <nan+0x8>)
10011ac0:	4770      	bx	lr
10011ac2:	46c0      	nop			; (mov r8, r8)
10011ac4:	7ff80000 	.word	0x7ff80000

10011ac8 <rint>:
10011ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011aca:	4647      	mov	r7, r8
10011acc:	b480      	push	{r7}
10011ace:	0fcb      	lsrs	r3, r1, #31
10011ad0:	4698      	mov	r8, r3
10011ad2:	4c4a      	ldr	r4, [pc, #296]	; (10011bfc <rint+0x134>)
10011ad4:	004b      	lsls	r3, r1, #1
10011ad6:	0d5b      	lsrs	r3, r3, #21
10011ad8:	191e      	adds	r6, r3, r4
10011ada:	b082      	sub	sp, #8
10011adc:	0007      	movs	r7, r0
10011ade:	000a      	movs	r2, r1
10011ae0:	2e13      	cmp	r6, #19
10011ae2:	dc35      	bgt.n	10011b50 <rint+0x88>
10011ae4:	2e00      	cmp	r6, #0
10011ae6:	db57      	blt.n	10011b98 <rint+0xd0>
10011ae8:	4b45      	ldr	r3, [pc, #276]	; (10011c00 <rint+0x138>)
10011aea:	0004      	movs	r4, r0
10011aec:	4133      	asrs	r3, r6
10011aee:	001f      	movs	r7, r3
10011af0:	400f      	ands	r7, r1
10011af2:	4307      	orrs	r7, r0
10011af4:	000d      	movs	r5, r1
10011af6:	2f00      	cmp	r7, #0
10011af8:	d024      	beq.n	10011b44 <rint+0x7c>
10011afa:	085b      	lsrs	r3, r3, #1
10011afc:	001c      	movs	r4, r3
10011afe:	400c      	ands	r4, r1
10011b00:	4320      	orrs	r0, r4
10011b02:	2700      	movs	r7, #0
10011b04:	2800      	cmp	r0, #0
10011b06:	d007      	beq.n	10011b18 <rint+0x50>
10011b08:	2e13      	cmp	r6, #19
10011b0a:	d100      	bne.n	10011b0e <rint+0x46>
10011b0c:	e072      	b.n	10011bf4 <rint+0x12c>
10011b0e:	2280      	movs	r2, #128	; 0x80
10011b10:	02d2      	lsls	r2, r2, #11
10011b12:	4132      	asrs	r2, r6
10011b14:	4399      	bics	r1, r3
10011b16:	430a      	orrs	r2, r1
10011b18:	4643      	mov	r3, r8
10011b1a:	00de      	lsls	r6, r3, #3
10011b1c:	4b39      	ldr	r3, [pc, #228]	; (10011c04 <rint+0x13c>)
10011b1e:	0011      	movs	r1, r2
10011b20:	199e      	adds	r6, r3, r6
10011b22:	6834      	ldr	r4, [r6, #0]
10011b24:	6875      	ldr	r5, [r6, #4]
10011b26:	0038      	movs	r0, r7
10011b28:	0022      	movs	r2, r4
10011b2a:	002b      	movs	r3, r5
10011b2c:	f001 f84e 	bl	10012bcc <__aeabi_dadd>
10011b30:	9000      	str	r0, [sp, #0]
10011b32:	9101      	str	r1, [sp, #4]
10011b34:	9800      	ldr	r0, [sp, #0]
10011b36:	9901      	ldr	r1, [sp, #4]
10011b38:	0022      	movs	r2, r4
10011b3a:	002b      	movs	r3, r5
10011b3c:	f002 fa10 	bl	10013f60 <__aeabi_dsub>
10011b40:	0004      	movs	r4, r0
10011b42:	000d      	movs	r5, r1
10011b44:	0020      	movs	r0, r4
10011b46:	0029      	movs	r1, r5
10011b48:	b002      	add	sp, #8
10011b4a:	bc04      	pop	{r2}
10011b4c:	4690      	mov	r8, r2
10011b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b50:	2e33      	cmp	r6, #51	; 0x33
10011b52:	dd0c      	ble.n	10011b6e <rint+0xa6>
10011b54:	2380      	movs	r3, #128	; 0x80
10011b56:	0004      	movs	r4, r0
10011b58:	000d      	movs	r5, r1
10011b5a:	00db      	lsls	r3, r3, #3
10011b5c:	429e      	cmp	r6, r3
10011b5e:	d1f1      	bne.n	10011b44 <rint+0x7c>
10011b60:	0002      	movs	r2, r0
10011b62:	000b      	movs	r3, r1
10011b64:	f001 f832 	bl	10012bcc <__aeabi_dadd>
10011b68:	0004      	movs	r4, r0
10011b6a:	000d      	movs	r5, r1
10011b6c:	e7ea      	b.n	10011b44 <rint+0x7c>
10011b6e:	4c26      	ldr	r4, [pc, #152]	; (10011c08 <rint+0x140>)
10011b70:	000d      	movs	r5, r1
10011b72:	46a4      	mov	ip, r4
10011b74:	2401      	movs	r4, #1
10011b76:	4463      	add	r3, ip
10011b78:	4264      	negs	r4, r4
10011b7a:	40dc      	lsrs	r4, r3
10011b7c:	46a4      	mov	ip, r4
10011b7e:	4661      	mov	r1, ip
10011b80:	0004      	movs	r4, r0
10011b82:	4201      	tst	r1, r0
10011b84:	d0de      	beq.n	10011b44 <rint+0x7c>
10011b86:	0849      	lsrs	r1, r1, #1
10011b88:	4201      	tst	r1, r0
10011b8a:	d0c5      	beq.n	10011b18 <rint+0x50>
10011b8c:	2780      	movs	r7, #128	; 0x80
10011b8e:	05ff      	lsls	r7, r7, #23
10011b90:	411f      	asrs	r7, r3
10011b92:	4388      	bics	r0, r1
10011b94:	4307      	orrs	r7, r0
10011b96:	e7bf      	b.n	10011b18 <rint+0x50>
10011b98:	004b      	lsls	r3, r1, #1
10011b9a:	085b      	lsrs	r3, r3, #1
10011b9c:	4303      	orrs	r3, r0
10011b9e:	0004      	movs	r4, r0
10011ba0:	000d      	movs	r5, r1
10011ba2:	2b00      	cmp	r3, #0
10011ba4:	d0ce      	beq.n	10011b44 <rint+0x7c>
10011ba6:	030b      	lsls	r3, r1, #12
10011ba8:	0b1b      	lsrs	r3, r3, #12
10011baa:	4303      	orrs	r3, r0
10011bac:	425a      	negs	r2, r3
10011bae:	4313      	orrs	r3, r2
10011bb0:	2280      	movs	r2, #128	; 0x80
10011bb2:	0b1b      	lsrs	r3, r3, #12
10011bb4:	0312      	lsls	r2, r2, #12
10011bb6:	4013      	ands	r3, r2
10011bb8:	0c4a      	lsrs	r2, r1, #17
10011bba:	0452      	lsls	r2, r2, #17
10011bbc:	4313      	orrs	r3, r2
10011bbe:	0019      	movs	r1, r3
10011bc0:	4643      	mov	r3, r8
10011bc2:	4a10      	ldr	r2, [pc, #64]	; (10011c04 <rint+0x13c>)
10011bc4:	00db      	lsls	r3, r3, #3
10011bc6:	18d3      	adds	r3, r2, r3
10011bc8:	681c      	ldr	r4, [r3, #0]
10011bca:	685d      	ldr	r5, [r3, #4]
10011bcc:	0022      	movs	r2, r4
10011bce:	002b      	movs	r3, r5
10011bd0:	f000 fffc 	bl	10012bcc <__aeabi_dadd>
10011bd4:	9000      	str	r0, [sp, #0]
10011bd6:	9101      	str	r1, [sp, #4]
10011bd8:	9800      	ldr	r0, [sp, #0]
10011bda:	9901      	ldr	r1, [sp, #4]
10011bdc:	0022      	movs	r2, r4
10011bde:	002b      	movs	r3, r5
10011be0:	f002 f9be 	bl	10013f60 <__aeabi_dsub>
10011be4:	4642      	mov	r2, r8
10011be6:	004b      	lsls	r3, r1, #1
10011be8:	085b      	lsrs	r3, r3, #1
10011bea:	07d6      	lsls	r6, r2, #31
10011bec:	4333      	orrs	r3, r6
10011bee:	0004      	movs	r4, r0
10011bf0:	001d      	movs	r5, r3
10011bf2:	e7a7      	b.n	10011b44 <rint+0x7c>
10011bf4:	2780      	movs	r7, #128	; 0x80
10011bf6:	063f      	lsls	r7, r7, #24
10011bf8:	e789      	b.n	10011b0e <rint+0x46>
10011bfa:	46c0      	nop			; (mov r8, r8)
10011bfc:	fffffc01 	.word	0xfffffc01
10011c00:	000fffff 	.word	0x000fffff
10011c04:	100169d8 	.word	0x100169d8
10011c08:	fffffbed 	.word	0xfffffbed

10011c0c <scalbn>:
10011c0c:	004b      	lsls	r3, r1, #1
10011c0e:	b570      	push	{r4, r5, r6, lr}
10011c10:	0d5b      	lsrs	r3, r3, #21
10011c12:	0014      	movs	r4, r2
10011c14:	000a      	movs	r2, r1
10011c16:	2b00      	cmp	r3, #0
10011c18:	d11a      	bne.n	10011c50 <scalbn+0x44>
10011c1a:	004b      	lsls	r3, r1, #1
10011c1c:	085b      	lsrs	r3, r3, #1
10011c1e:	4303      	orrs	r3, r0
10011c20:	d015      	beq.n	10011c4e <scalbn+0x42>
10011c22:	2200      	movs	r2, #0
10011c24:	4b22      	ldr	r3, [pc, #136]	; (10011cb0 <scalbn+0xa4>)
10011c26:	f001 ff21 	bl	10013a6c <__aeabi_dmul>
10011c2a:	4b22      	ldr	r3, [pc, #136]	; (10011cb4 <scalbn+0xa8>)
10011c2c:	000a      	movs	r2, r1
10011c2e:	429c      	cmp	r4, r3
10011c30:	db22      	blt.n	10011c78 <scalbn+0x6c>
10011c32:	004b      	lsls	r3, r1, #1
10011c34:	0d5b      	lsrs	r3, r3, #21
10011c36:	3b36      	subs	r3, #54	; 0x36
10011c38:	4d1f      	ldr	r5, [pc, #124]	; (10011cb8 <scalbn+0xac>)
10011c3a:	18e3      	adds	r3, r4, r3
10011c3c:	42ab      	cmp	r3, r5
10011c3e:	dc20      	bgt.n	10011c82 <scalbn+0x76>
10011c40:	2b00      	cmp	r3, #0
10011c42:	dd0d      	ble.n	10011c60 <scalbn+0x54>
10011c44:	4c1d      	ldr	r4, [pc, #116]	; (10011cbc <scalbn+0xb0>)
10011c46:	051b      	lsls	r3, r3, #20
10011c48:	4022      	ands	r2, r4
10011c4a:	431a      	orrs	r2, r3
10011c4c:	0011      	movs	r1, r2
10011c4e:	bd70      	pop	{r4, r5, r6, pc}
10011c50:	4d1b      	ldr	r5, [pc, #108]	; (10011cc0 <scalbn+0xb4>)
10011c52:	42ab      	cmp	r3, r5
10011c54:	d1f0      	bne.n	10011c38 <scalbn+0x2c>
10011c56:	0002      	movs	r2, r0
10011c58:	000b      	movs	r3, r1
10011c5a:	f000 ffb7 	bl	10012bcc <__aeabi_dadd>
10011c5e:	e7f6      	b.n	10011c4e <scalbn+0x42>
10011c60:	001d      	movs	r5, r3
10011c62:	3535      	adds	r5, #53	; 0x35
10011c64:	da18      	bge.n	10011c98 <scalbn+0x8c>
10011c66:	4b17      	ldr	r3, [pc, #92]	; (10011cc4 <scalbn+0xb8>)
10011c68:	0002      	movs	r2, r0
10011c6a:	429c      	cmp	r4, r3
10011c6c:	dc0a      	bgt.n	10011c84 <scalbn+0x78>
10011c6e:	000b      	movs	r3, r1
10011c70:	4815      	ldr	r0, [pc, #84]	; (10011cc8 <scalbn+0xbc>)
10011c72:	4916      	ldr	r1, [pc, #88]	; (10011ccc <scalbn+0xc0>)
10011c74:	f000 f832 	bl	10011cdc <copysign>
10011c78:	4a13      	ldr	r2, [pc, #76]	; (10011cc8 <scalbn+0xbc>)
10011c7a:	4b14      	ldr	r3, [pc, #80]	; (10011ccc <scalbn+0xc0>)
10011c7c:	f001 fef6 	bl	10013a6c <__aeabi_dmul>
10011c80:	e7e5      	b.n	10011c4e <scalbn+0x42>
10011c82:	0002      	movs	r2, r0
10011c84:	000b      	movs	r3, r1
10011c86:	4812      	ldr	r0, [pc, #72]	; (10011cd0 <scalbn+0xc4>)
10011c88:	4912      	ldr	r1, [pc, #72]	; (10011cd4 <scalbn+0xc8>)
10011c8a:	f000 f827 	bl	10011cdc <copysign>
10011c8e:	4a10      	ldr	r2, [pc, #64]	; (10011cd0 <scalbn+0xc4>)
10011c90:	4b10      	ldr	r3, [pc, #64]	; (10011cd4 <scalbn+0xc8>)
10011c92:	f001 feeb 	bl	10013a6c <__aeabi_dmul>
10011c96:	e7da      	b.n	10011c4e <scalbn+0x42>
10011c98:	4c08      	ldr	r4, [pc, #32]	; (10011cbc <scalbn+0xb0>)
10011c9a:	3336      	adds	r3, #54	; 0x36
10011c9c:	4022      	ands	r2, r4
10011c9e:	051b      	lsls	r3, r3, #20
10011ca0:	4313      	orrs	r3, r2
10011ca2:	0019      	movs	r1, r3
10011ca4:	2200      	movs	r2, #0
10011ca6:	4b0c      	ldr	r3, [pc, #48]	; (10011cd8 <scalbn+0xcc>)
10011ca8:	f001 fee0 	bl	10013a6c <__aeabi_dmul>
10011cac:	e7cf      	b.n	10011c4e <scalbn+0x42>
10011cae:	46c0      	nop			; (mov r8, r8)
10011cb0:	43500000 	.word	0x43500000
10011cb4:	ffff3cb0 	.word	0xffff3cb0
10011cb8:	000007fe 	.word	0x000007fe
10011cbc:	800fffff 	.word	0x800fffff
10011cc0:	000007ff 	.word	0x000007ff
10011cc4:	0000c350 	.word	0x0000c350
10011cc8:	c2f8f359 	.word	0xc2f8f359
10011ccc:	01a56e1f 	.word	0x01a56e1f
10011cd0:	8800759c 	.word	0x8800759c
10011cd4:	7e37e43c 	.word	0x7e37e43c
10011cd8:	3c900000 	.word	0x3c900000

10011cdc <copysign>:
10011cdc:	b530      	push	{r4, r5, lr}
10011cde:	004a      	lsls	r2, r1, #1
10011ce0:	0fdb      	lsrs	r3, r3, #31
10011ce2:	07db      	lsls	r3, r3, #31
10011ce4:	0852      	lsrs	r2, r2, #1
10011ce6:	431a      	orrs	r2, r3
10011ce8:	0011      	movs	r1, r2
10011cea:	bd30      	pop	{r4, r5, pc}

10011cec <__gnu_thumb1_case_sqi>:
10011cec:	b402      	push	{r1}
10011cee:	4671      	mov	r1, lr
10011cf0:	0849      	lsrs	r1, r1, #1
10011cf2:	0049      	lsls	r1, r1, #1
10011cf4:	5609      	ldrsb	r1, [r1, r0]
10011cf6:	0049      	lsls	r1, r1, #1
10011cf8:	448e      	add	lr, r1
10011cfa:	bc02      	pop	{r1}
10011cfc:	4770      	bx	lr
10011cfe:	46c0      	nop			; (mov r8, r8)

10011d00 <__gnu_thumb1_case_uqi>:
10011d00:	b402      	push	{r1}
10011d02:	4671      	mov	r1, lr
10011d04:	0849      	lsrs	r1, r1, #1
10011d06:	0049      	lsls	r1, r1, #1
10011d08:	5c09      	ldrb	r1, [r1, r0]
10011d0a:	0049      	lsls	r1, r1, #1
10011d0c:	448e      	add	lr, r1
10011d0e:	bc02      	pop	{r1}
10011d10:	4770      	bx	lr
10011d12:	46c0      	nop			; (mov r8, r8)

10011d14 <__aeabi_uidiv>:
10011d14:	2200      	movs	r2, #0
10011d16:	0843      	lsrs	r3, r0, #1
10011d18:	428b      	cmp	r3, r1
10011d1a:	d374      	bcc.n	10011e06 <__aeabi_uidiv+0xf2>
10011d1c:	0903      	lsrs	r3, r0, #4
10011d1e:	428b      	cmp	r3, r1
10011d20:	d35f      	bcc.n	10011de2 <__aeabi_uidiv+0xce>
10011d22:	0a03      	lsrs	r3, r0, #8
10011d24:	428b      	cmp	r3, r1
10011d26:	d344      	bcc.n	10011db2 <__aeabi_uidiv+0x9e>
10011d28:	0b03      	lsrs	r3, r0, #12
10011d2a:	428b      	cmp	r3, r1
10011d2c:	d328      	bcc.n	10011d80 <__aeabi_uidiv+0x6c>
10011d2e:	0c03      	lsrs	r3, r0, #16
10011d30:	428b      	cmp	r3, r1
10011d32:	d30d      	bcc.n	10011d50 <__aeabi_uidiv+0x3c>
10011d34:	22ff      	movs	r2, #255	; 0xff
10011d36:	0209      	lsls	r1, r1, #8
10011d38:	ba12      	rev	r2, r2
10011d3a:	0c03      	lsrs	r3, r0, #16
10011d3c:	428b      	cmp	r3, r1
10011d3e:	d302      	bcc.n	10011d46 <__aeabi_uidiv+0x32>
10011d40:	1212      	asrs	r2, r2, #8
10011d42:	0209      	lsls	r1, r1, #8
10011d44:	d065      	beq.n	10011e12 <__aeabi_uidiv+0xfe>
10011d46:	0b03      	lsrs	r3, r0, #12
10011d48:	428b      	cmp	r3, r1
10011d4a:	d319      	bcc.n	10011d80 <__aeabi_uidiv+0x6c>
10011d4c:	e000      	b.n	10011d50 <__aeabi_uidiv+0x3c>
10011d4e:	0a09      	lsrs	r1, r1, #8
10011d50:	0bc3      	lsrs	r3, r0, #15
10011d52:	428b      	cmp	r3, r1
10011d54:	d301      	bcc.n	10011d5a <__aeabi_uidiv+0x46>
10011d56:	03cb      	lsls	r3, r1, #15
10011d58:	1ac0      	subs	r0, r0, r3
10011d5a:	4152      	adcs	r2, r2
10011d5c:	0b83      	lsrs	r3, r0, #14
10011d5e:	428b      	cmp	r3, r1
10011d60:	d301      	bcc.n	10011d66 <__aeabi_uidiv+0x52>
10011d62:	038b      	lsls	r3, r1, #14
10011d64:	1ac0      	subs	r0, r0, r3
10011d66:	4152      	adcs	r2, r2
10011d68:	0b43      	lsrs	r3, r0, #13
10011d6a:	428b      	cmp	r3, r1
10011d6c:	d301      	bcc.n	10011d72 <__aeabi_uidiv+0x5e>
10011d6e:	034b      	lsls	r3, r1, #13
10011d70:	1ac0      	subs	r0, r0, r3
10011d72:	4152      	adcs	r2, r2
10011d74:	0b03      	lsrs	r3, r0, #12
10011d76:	428b      	cmp	r3, r1
10011d78:	d301      	bcc.n	10011d7e <__aeabi_uidiv+0x6a>
10011d7a:	030b      	lsls	r3, r1, #12
10011d7c:	1ac0      	subs	r0, r0, r3
10011d7e:	4152      	adcs	r2, r2
10011d80:	0ac3      	lsrs	r3, r0, #11
10011d82:	428b      	cmp	r3, r1
10011d84:	d301      	bcc.n	10011d8a <__aeabi_uidiv+0x76>
10011d86:	02cb      	lsls	r3, r1, #11
10011d88:	1ac0      	subs	r0, r0, r3
10011d8a:	4152      	adcs	r2, r2
10011d8c:	0a83      	lsrs	r3, r0, #10
10011d8e:	428b      	cmp	r3, r1
10011d90:	d301      	bcc.n	10011d96 <__aeabi_uidiv+0x82>
10011d92:	028b      	lsls	r3, r1, #10
10011d94:	1ac0      	subs	r0, r0, r3
10011d96:	4152      	adcs	r2, r2
10011d98:	0a43      	lsrs	r3, r0, #9
10011d9a:	428b      	cmp	r3, r1
10011d9c:	d301      	bcc.n	10011da2 <__aeabi_uidiv+0x8e>
10011d9e:	024b      	lsls	r3, r1, #9
10011da0:	1ac0      	subs	r0, r0, r3
10011da2:	4152      	adcs	r2, r2
10011da4:	0a03      	lsrs	r3, r0, #8
10011da6:	428b      	cmp	r3, r1
10011da8:	d301      	bcc.n	10011dae <__aeabi_uidiv+0x9a>
10011daa:	020b      	lsls	r3, r1, #8
10011dac:	1ac0      	subs	r0, r0, r3
10011dae:	4152      	adcs	r2, r2
10011db0:	d2cd      	bcs.n	10011d4e <__aeabi_uidiv+0x3a>
10011db2:	09c3      	lsrs	r3, r0, #7
10011db4:	428b      	cmp	r3, r1
10011db6:	d301      	bcc.n	10011dbc <__aeabi_uidiv+0xa8>
10011db8:	01cb      	lsls	r3, r1, #7
10011dba:	1ac0      	subs	r0, r0, r3
10011dbc:	4152      	adcs	r2, r2
10011dbe:	0983      	lsrs	r3, r0, #6
10011dc0:	428b      	cmp	r3, r1
10011dc2:	d301      	bcc.n	10011dc8 <__aeabi_uidiv+0xb4>
10011dc4:	018b      	lsls	r3, r1, #6
10011dc6:	1ac0      	subs	r0, r0, r3
10011dc8:	4152      	adcs	r2, r2
10011dca:	0943      	lsrs	r3, r0, #5
10011dcc:	428b      	cmp	r3, r1
10011dce:	d301      	bcc.n	10011dd4 <__aeabi_uidiv+0xc0>
10011dd0:	014b      	lsls	r3, r1, #5
10011dd2:	1ac0      	subs	r0, r0, r3
10011dd4:	4152      	adcs	r2, r2
10011dd6:	0903      	lsrs	r3, r0, #4
10011dd8:	428b      	cmp	r3, r1
10011dda:	d301      	bcc.n	10011de0 <__aeabi_uidiv+0xcc>
10011ddc:	010b      	lsls	r3, r1, #4
10011dde:	1ac0      	subs	r0, r0, r3
10011de0:	4152      	adcs	r2, r2
10011de2:	08c3      	lsrs	r3, r0, #3
10011de4:	428b      	cmp	r3, r1
10011de6:	d301      	bcc.n	10011dec <__aeabi_uidiv+0xd8>
10011de8:	00cb      	lsls	r3, r1, #3
10011dea:	1ac0      	subs	r0, r0, r3
10011dec:	4152      	adcs	r2, r2
10011dee:	0883      	lsrs	r3, r0, #2
10011df0:	428b      	cmp	r3, r1
10011df2:	d301      	bcc.n	10011df8 <__aeabi_uidiv+0xe4>
10011df4:	008b      	lsls	r3, r1, #2
10011df6:	1ac0      	subs	r0, r0, r3
10011df8:	4152      	adcs	r2, r2
10011dfa:	0843      	lsrs	r3, r0, #1
10011dfc:	428b      	cmp	r3, r1
10011dfe:	d301      	bcc.n	10011e04 <__aeabi_uidiv+0xf0>
10011e00:	004b      	lsls	r3, r1, #1
10011e02:	1ac0      	subs	r0, r0, r3
10011e04:	4152      	adcs	r2, r2
10011e06:	1a41      	subs	r1, r0, r1
10011e08:	d200      	bcs.n	10011e0c <__aeabi_uidiv+0xf8>
10011e0a:	4601      	mov	r1, r0
10011e0c:	4152      	adcs	r2, r2
10011e0e:	4610      	mov	r0, r2
10011e10:	4770      	bx	lr
10011e12:	e7ff      	b.n	10011e14 <__aeabi_uidiv+0x100>
10011e14:	b501      	push	{r0, lr}
10011e16:	2000      	movs	r0, #0
10011e18:	f000 f8f0 	bl	10011ffc <__aeabi_idiv0>
10011e1c:	bd02      	pop	{r1, pc}
10011e1e:	46c0      	nop			; (mov r8, r8)

10011e20 <__aeabi_uidivmod>:
10011e20:	2900      	cmp	r1, #0
10011e22:	d0f7      	beq.n	10011e14 <__aeabi_uidiv+0x100>
10011e24:	e776      	b.n	10011d14 <__aeabi_uidiv>
10011e26:	4770      	bx	lr

10011e28 <__aeabi_idiv>:
10011e28:	4603      	mov	r3, r0
10011e2a:	430b      	orrs	r3, r1
10011e2c:	d47f      	bmi.n	10011f2e <__aeabi_idiv+0x106>
10011e2e:	2200      	movs	r2, #0
10011e30:	0843      	lsrs	r3, r0, #1
10011e32:	428b      	cmp	r3, r1
10011e34:	d374      	bcc.n	10011f20 <__aeabi_idiv+0xf8>
10011e36:	0903      	lsrs	r3, r0, #4
10011e38:	428b      	cmp	r3, r1
10011e3a:	d35f      	bcc.n	10011efc <__aeabi_idiv+0xd4>
10011e3c:	0a03      	lsrs	r3, r0, #8
10011e3e:	428b      	cmp	r3, r1
10011e40:	d344      	bcc.n	10011ecc <__aeabi_idiv+0xa4>
10011e42:	0b03      	lsrs	r3, r0, #12
10011e44:	428b      	cmp	r3, r1
10011e46:	d328      	bcc.n	10011e9a <__aeabi_idiv+0x72>
10011e48:	0c03      	lsrs	r3, r0, #16
10011e4a:	428b      	cmp	r3, r1
10011e4c:	d30d      	bcc.n	10011e6a <__aeabi_idiv+0x42>
10011e4e:	22ff      	movs	r2, #255	; 0xff
10011e50:	0209      	lsls	r1, r1, #8
10011e52:	ba12      	rev	r2, r2
10011e54:	0c03      	lsrs	r3, r0, #16
10011e56:	428b      	cmp	r3, r1
10011e58:	d302      	bcc.n	10011e60 <__aeabi_idiv+0x38>
10011e5a:	1212      	asrs	r2, r2, #8
10011e5c:	0209      	lsls	r1, r1, #8
10011e5e:	d065      	beq.n	10011f2c <__aeabi_idiv+0x104>
10011e60:	0b03      	lsrs	r3, r0, #12
10011e62:	428b      	cmp	r3, r1
10011e64:	d319      	bcc.n	10011e9a <__aeabi_idiv+0x72>
10011e66:	e000      	b.n	10011e6a <__aeabi_idiv+0x42>
10011e68:	0a09      	lsrs	r1, r1, #8
10011e6a:	0bc3      	lsrs	r3, r0, #15
10011e6c:	428b      	cmp	r3, r1
10011e6e:	d301      	bcc.n	10011e74 <__aeabi_idiv+0x4c>
10011e70:	03cb      	lsls	r3, r1, #15
10011e72:	1ac0      	subs	r0, r0, r3
10011e74:	4152      	adcs	r2, r2
10011e76:	0b83      	lsrs	r3, r0, #14
10011e78:	428b      	cmp	r3, r1
10011e7a:	d301      	bcc.n	10011e80 <__aeabi_idiv+0x58>
10011e7c:	038b      	lsls	r3, r1, #14
10011e7e:	1ac0      	subs	r0, r0, r3
10011e80:	4152      	adcs	r2, r2
10011e82:	0b43      	lsrs	r3, r0, #13
10011e84:	428b      	cmp	r3, r1
10011e86:	d301      	bcc.n	10011e8c <__aeabi_idiv+0x64>
10011e88:	034b      	lsls	r3, r1, #13
10011e8a:	1ac0      	subs	r0, r0, r3
10011e8c:	4152      	adcs	r2, r2
10011e8e:	0b03      	lsrs	r3, r0, #12
10011e90:	428b      	cmp	r3, r1
10011e92:	d301      	bcc.n	10011e98 <__aeabi_idiv+0x70>
10011e94:	030b      	lsls	r3, r1, #12
10011e96:	1ac0      	subs	r0, r0, r3
10011e98:	4152      	adcs	r2, r2
10011e9a:	0ac3      	lsrs	r3, r0, #11
10011e9c:	428b      	cmp	r3, r1
10011e9e:	d301      	bcc.n	10011ea4 <__aeabi_idiv+0x7c>
10011ea0:	02cb      	lsls	r3, r1, #11
10011ea2:	1ac0      	subs	r0, r0, r3
10011ea4:	4152      	adcs	r2, r2
10011ea6:	0a83      	lsrs	r3, r0, #10
10011ea8:	428b      	cmp	r3, r1
10011eaa:	d301      	bcc.n	10011eb0 <__aeabi_idiv+0x88>
10011eac:	028b      	lsls	r3, r1, #10
10011eae:	1ac0      	subs	r0, r0, r3
10011eb0:	4152      	adcs	r2, r2
10011eb2:	0a43      	lsrs	r3, r0, #9
10011eb4:	428b      	cmp	r3, r1
10011eb6:	d301      	bcc.n	10011ebc <__aeabi_idiv+0x94>
10011eb8:	024b      	lsls	r3, r1, #9
10011eba:	1ac0      	subs	r0, r0, r3
10011ebc:	4152      	adcs	r2, r2
10011ebe:	0a03      	lsrs	r3, r0, #8
10011ec0:	428b      	cmp	r3, r1
10011ec2:	d301      	bcc.n	10011ec8 <__aeabi_idiv+0xa0>
10011ec4:	020b      	lsls	r3, r1, #8
10011ec6:	1ac0      	subs	r0, r0, r3
10011ec8:	4152      	adcs	r2, r2
10011eca:	d2cd      	bcs.n	10011e68 <__aeabi_idiv+0x40>
10011ecc:	09c3      	lsrs	r3, r0, #7
10011ece:	428b      	cmp	r3, r1
10011ed0:	d301      	bcc.n	10011ed6 <__aeabi_idiv+0xae>
10011ed2:	01cb      	lsls	r3, r1, #7
10011ed4:	1ac0      	subs	r0, r0, r3
10011ed6:	4152      	adcs	r2, r2
10011ed8:	0983      	lsrs	r3, r0, #6
10011eda:	428b      	cmp	r3, r1
10011edc:	d301      	bcc.n	10011ee2 <__aeabi_idiv+0xba>
10011ede:	018b      	lsls	r3, r1, #6
10011ee0:	1ac0      	subs	r0, r0, r3
10011ee2:	4152      	adcs	r2, r2
10011ee4:	0943      	lsrs	r3, r0, #5
10011ee6:	428b      	cmp	r3, r1
10011ee8:	d301      	bcc.n	10011eee <__aeabi_idiv+0xc6>
10011eea:	014b      	lsls	r3, r1, #5
10011eec:	1ac0      	subs	r0, r0, r3
10011eee:	4152      	adcs	r2, r2
10011ef0:	0903      	lsrs	r3, r0, #4
10011ef2:	428b      	cmp	r3, r1
10011ef4:	d301      	bcc.n	10011efa <__aeabi_idiv+0xd2>
10011ef6:	010b      	lsls	r3, r1, #4
10011ef8:	1ac0      	subs	r0, r0, r3
10011efa:	4152      	adcs	r2, r2
10011efc:	08c3      	lsrs	r3, r0, #3
10011efe:	428b      	cmp	r3, r1
10011f00:	d301      	bcc.n	10011f06 <__aeabi_idiv+0xde>
10011f02:	00cb      	lsls	r3, r1, #3
10011f04:	1ac0      	subs	r0, r0, r3
10011f06:	4152      	adcs	r2, r2
10011f08:	0883      	lsrs	r3, r0, #2
10011f0a:	428b      	cmp	r3, r1
10011f0c:	d301      	bcc.n	10011f12 <__aeabi_idiv+0xea>
10011f0e:	008b      	lsls	r3, r1, #2
10011f10:	1ac0      	subs	r0, r0, r3
10011f12:	4152      	adcs	r2, r2
10011f14:	0843      	lsrs	r3, r0, #1
10011f16:	428b      	cmp	r3, r1
10011f18:	d301      	bcc.n	10011f1e <__aeabi_idiv+0xf6>
10011f1a:	004b      	lsls	r3, r1, #1
10011f1c:	1ac0      	subs	r0, r0, r3
10011f1e:	4152      	adcs	r2, r2
10011f20:	1a41      	subs	r1, r0, r1
10011f22:	d200      	bcs.n	10011f26 <__aeabi_idiv+0xfe>
10011f24:	4601      	mov	r1, r0
10011f26:	4152      	adcs	r2, r2
10011f28:	4610      	mov	r0, r2
10011f2a:	4770      	bx	lr
10011f2c:	e05d      	b.n	10011fea <__aeabi_idiv+0x1c2>
10011f2e:	0fca      	lsrs	r2, r1, #31
10011f30:	d000      	beq.n	10011f34 <__aeabi_idiv+0x10c>
10011f32:	4249      	negs	r1, r1
10011f34:	1003      	asrs	r3, r0, #32
10011f36:	d300      	bcc.n	10011f3a <__aeabi_idiv+0x112>
10011f38:	4240      	negs	r0, r0
10011f3a:	4053      	eors	r3, r2
10011f3c:	2200      	movs	r2, #0
10011f3e:	469c      	mov	ip, r3
10011f40:	0903      	lsrs	r3, r0, #4
10011f42:	428b      	cmp	r3, r1
10011f44:	d32d      	bcc.n	10011fa2 <__aeabi_idiv+0x17a>
10011f46:	0a03      	lsrs	r3, r0, #8
10011f48:	428b      	cmp	r3, r1
10011f4a:	d312      	bcc.n	10011f72 <__aeabi_idiv+0x14a>
10011f4c:	22fc      	movs	r2, #252	; 0xfc
10011f4e:	0189      	lsls	r1, r1, #6
10011f50:	ba12      	rev	r2, r2
10011f52:	0a03      	lsrs	r3, r0, #8
10011f54:	428b      	cmp	r3, r1
10011f56:	d30c      	bcc.n	10011f72 <__aeabi_idiv+0x14a>
10011f58:	0189      	lsls	r1, r1, #6
10011f5a:	1192      	asrs	r2, r2, #6
10011f5c:	428b      	cmp	r3, r1
10011f5e:	d308      	bcc.n	10011f72 <__aeabi_idiv+0x14a>
10011f60:	0189      	lsls	r1, r1, #6
10011f62:	1192      	asrs	r2, r2, #6
10011f64:	428b      	cmp	r3, r1
10011f66:	d304      	bcc.n	10011f72 <__aeabi_idiv+0x14a>
10011f68:	0189      	lsls	r1, r1, #6
10011f6a:	d03a      	beq.n	10011fe2 <__aeabi_idiv+0x1ba>
10011f6c:	1192      	asrs	r2, r2, #6
10011f6e:	e000      	b.n	10011f72 <__aeabi_idiv+0x14a>
10011f70:	0989      	lsrs	r1, r1, #6
10011f72:	09c3      	lsrs	r3, r0, #7
10011f74:	428b      	cmp	r3, r1
10011f76:	d301      	bcc.n	10011f7c <__aeabi_idiv+0x154>
10011f78:	01cb      	lsls	r3, r1, #7
10011f7a:	1ac0      	subs	r0, r0, r3
10011f7c:	4152      	adcs	r2, r2
10011f7e:	0983      	lsrs	r3, r0, #6
10011f80:	428b      	cmp	r3, r1
10011f82:	d301      	bcc.n	10011f88 <__aeabi_idiv+0x160>
10011f84:	018b      	lsls	r3, r1, #6
10011f86:	1ac0      	subs	r0, r0, r3
10011f88:	4152      	adcs	r2, r2
10011f8a:	0943      	lsrs	r3, r0, #5
10011f8c:	428b      	cmp	r3, r1
10011f8e:	d301      	bcc.n	10011f94 <__aeabi_idiv+0x16c>
10011f90:	014b      	lsls	r3, r1, #5
10011f92:	1ac0      	subs	r0, r0, r3
10011f94:	4152      	adcs	r2, r2
10011f96:	0903      	lsrs	r3, r0, #4
10011f98:	428b      	cmp	r3, r1
10011f9a:	d301      	bcc.n	10011fa0 <__aeabi_idiv+0x178>
10011f9c:	010b      	lsls	r3, r1, #4
10011f9e:	1ac0      	subs	r0, r0, r3
10011fa0:	4152      	adcs	r2, r2
10011fa2:	08c3      	lsrs	r3, r0, #3
10011fa4:	428b      	cmp	r3, r1
10011fa6:	d301      	bcc.n	10011fac <__aeabi_idiv+0x184>
10011fa8:	00cb      	lsls	r3, r1, #3
10011faa:	1ac0      	subs	r0, r0, r3
10011fac:	4152      	adcs	r2, r2
10011fae:	0883      	lsrs	r3, r0, #2
10011fb0:	428b      	cmp	r3, r1
10011fb2:	d301      	bcc.n	10011fb8 <__aeabi_idiv+0x190>
10011fb4:	008b      	lsls	r3, r1, #2
10011fb6:	1ac0      	subs	r0, r0, r3
10011fb8:	4152      	adcs	r2, r2
10011fba:	d2d9      	bcs.n	10011f70 <__aeabi_idiv+0x148>
10011fbc:	0843      	lsrs	r3, r0, #1
10011fbe:	428b      	cmp	r3, r1
10011fc0:	d301      	bcc.n	10011fc6 <__aeabi_idiv+0x19e>
10011fc2:	004b      	lsls	r3, r1, #1
10011fc4:	1ac0      	subs	r0, r0, r3
10011fc6:	4152      	adcs	r2, r2
10011fc8:	1a41      	subs	r1, r0, r1
10011fca:	d200      	bcs.n	10011fce <__aeabi_idiv+0x1a6>
10011fcc:	4601      	mov	r1, r0
10011fce:	4663      	mov	r3, ip
10011fd0:	4152      	adcs	r2, r2
10011fd2:	105b      	asrs	r3, r3, #1
10011fd4:	4610      	mov	r0, r2
10011fd6:	d301      	bcc.n	10011fdc <__aeabi_idiv+0x1b4>
10011fd8:	4240      	negs	r0, r0
10011fda:	2b00      	cmp	r3, #0
10011fdc:	d500      	bpl.n	10011fe0 <__aeabi_idiv+0x1b8>
10011fde:	4249      	negs	r1, r1
10011fe0:	4770      	bx	lr
10011fe2:	4663      	mov	r3, ip
10011fe4:	105b      	asrs	r3, r3, #1
10011fe6:	d300      	bcc.n	10011fea <__aeabi_idiv+0x1c2>
10011fe8:	4240      	negs	r0, r0
10011fea:	b501      	push	{r0, lr}
10011fec:	2000      	movs	r0, #0
10011fee:	f000 f805 	bl	10011ffc <__aeabi_idiv0>
10011ff2:	bd02      	pop	{r1, pc}

10011ff4 <__aeabi_idivmod>:
10011ff4:	2900      	cmp	r1, #0
10011ff6:	d0f8      	beq.n	10011fea <__aeabi_idiv+0x1c2>
10011ff8:	e716      	b.n	10011e28 <__aeabi_idiv>
10011ffa:	4770      	bx	lr

10011ffc <__aeabi_idiv0>:
10011ffc:	4770      	bx	lr
10011ffe:	46c0      	nop			; (mov r8, r8)

10012000 <__aeabi_cdrcmple>:
10012000:	4684      	mov	ip, r0
10012002:	1c10      	adds	r0, r2, #0
10012004:	4662      	mov	r2, ip
10012006:	468c      	mov	ip, r1
10012008:	1c19      	adds	r1, r3, #0
1001200a:	4663      	mov	r3, ip
1001200c:	e000      	b.n	10012010 <__aeabi_cdcmpeq>
1001200e:	46c0      	nop			; (mov r8, r8)

10012010 <__aeabi_cdcmpeq>:
10012010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012012:	f001 fcc1 	bl	10013998 <__ledf2>
10012016:	2800      	cmp	r0, #0
10012018:	d401      	bmi.n	1001201e <__aeabi_cdcmpeq+0xe>
1001201a:	2100      	movs	r1, #0
1001201c:	42c8      	cmn	r0, r1
1001201e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012020 <__aeabi_dcmpeq>:
10012020:	b510      	push	{r4, lr}
10012022:	f001 fc15 	bl	10013850 <__eqdf2>
10012026:	4240      	negs	r0, r0
10012028:	3001      	adds	r0, #1
1001202a:	bd10      	pop	{r4, pc}

1001202c <__aeabi_dcmplt>:
1001202c:	b510      	push	{r4, lr}
1001202e:	f001 fcb3 	bl	10013998 <__ledf2>
10012032:	2800      	cmp	r0, #0
10012034:	db01      	blt.n	1001203a <__aeabi_dcmplt+0xe>
10012036:	2000      	movs	r0, #0
10012038:	bd10      	pop	{r4, pc}
1001203a:	2001      	movs	r0, #1
1001203c:	bd10      	pop	{r4, pc}
1001203e:	46c0      	nop			; (mov r8, r8)

10012040 <__aeabi_dcmple>:
10012040:	b510      	push	{r4, lr}
10012042:	f001 fca9 	bl	10013998 <__ledf2>
10012046:	2800      	cmp	r0, #0
10012048:	dd01      	ble.n	1001204e <__aeabi_dcmple+0xe>
1001204a:	2000      	movs	r0, #0
1001204c:	bd10      	pop	{r4, pc}
1001204e:	2001      	movs	r0, #1
10012050:	bd10      	pop	{r4, pc}
10012052:	46c0      	nop			; (mov r8, r8)

10012054 <__aeabi_dcmpgt>:
10012054:	b510      	push	{r4, lr}
10012056:	f001 fc3b 	bl	100138d0 <__gedf2>
1001205a:	2800      	cmp	r0, #0
1001205c:	dc01      	bgt.n	10012062 <__aeabi_dcmpgt+0xe>
1001205e:	2000      	movs	r0, #0
10012060:	bd10      	pop	{r4, pc}
10012062:	2001      	movs	r0, #1
10012064:	bd10      	pop	{r4, pc}
10012066:	46c0      	nop			; (mov r8, r8)

10012068 <__aeabi_dcmpge>:
10012068:	b510      	push	{r4, lr}
1001206a:	f001 fc31 	bl	100138d0 <__gedf2>
1001206e:	2800      	cmp	r0, #0
10012070:	da01      	bge.n	10012076 <__aeabi_dcmpge+0xe>
10012072:	2000      	movs	r0, #0
10012074:	bd10      	pop	{r4, pc}
10012076:	2001      	movs	r0, #1
10012078:	bd10      	pop	{r4, pc}
1001207a:	46c0      	nop			; (mov r8, r8)

1001207c <__aeabi_cfrcmple>:
1001207c:	4684      	mov	ip, r0
1001207e:	1c08      	adds	r0, r1, #0
10012080:	4661      	mov	r1, ip
10012082:	e7ff      	b.n	10012084 <__aeabi_cfcmpeq>

10012084 <__aeabi_cfcmpeq>:
10012084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012086:	f000 fa1b 	bl	100124c0 <__lesf2>
1001208a:	2800      	cmp	r0, #0
1001208c:	d401      	bmi.n	10012092 <__aeabi_cfcmpeq+0xe>
1001208e:	2100      	movs	r1, #0
10012090:	42c8      	cmn	r0, r1
10012092:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012094 <__aeabi_fcmpeq>:
10012094:	b510      	push	{r4, lr}
10012096:	f000 f9a7 	bl	100123e8 <__eqsf2>
1001209a:	4240      	negs	r0, r0
1001209c:	3001      	adds	r0, #1
1001209e:	bd10      	pop	{r4, pc}

100120a0 <__aeabi_fcmplt>:
100120a0:	b510      	push	{r4, lr}
100120a2:	f000 fa0d 	bl	100124c0 <__lesf2>
100120a6:	2800      	cmp	r0, #0
100120a8:	db01      	blt.n	100120ae <__aeabi_fcmplt+0xe>
100120aa:	2000      	movs	r0, #0
100120ac:	bd10      	pop	{r4, pc}
100120ae:	2001      	movs	r0, #1
100120b0:	bd10      	pop	{r4, pc}
100120b2:	46c0      	nop			; (mov r8, r8)

100120b4 <__aeabi_fcmple>:
100120b4:	b510      	push	{r4, lr}
100120b6:	f000 fa03 	bl	100124c0 <__lesf2>
100120ba:	2800      	cmp	r0, #0
100120bc:	dd01      	ble.n	100120c2 <__aeabi_fcmple+0xe>
100120be:	2000      	movs	r0, #0
100120c0:	bd10      	pop	{r4, pc}
100120c2:	2001      	movs	r0, #1
100120c4:	bd10      	pop	{r4, pc}
100120c6:	46c0      	nop			; (mov r8, r8)

100120c8 <__aeabi_fcmpgt>:
100120c8:	b510      	push	{r4, lr}
100120ca:	f000 f9b5 	bl	10012438 <__gesf2>
100120ce:	2800      	cmp	r0, #0
100120d0:	dc01      	bgt.n	100120d6 <__aeabi_fcmpgt+0xe>
100120d2:	2000      	movs	r0, #0
100120d4:	bd10      	pop	{r4, pc}
100120d6:	2001      	movs	r0, #1
100120d8:	bd10      	pop	{r4, pc}
100120da:	46c0      	nop			; (mov r8, r8)

100120dc <__aeabi_fcmpge>:
100120dc:	b510      	push	{r4, lr}
100120de:	f000 f9ab 	bl	10012438 <__gesf2>
100120e2:	2800      	cmp	r0, #0
100120e4:	da01      	bge.n	100120ea <__aeabi_fcmpge+0xe>
100120e6:	2000      	movs	r0, #0
100120e8:	bd10      	pop	{r4, pc}
100120ea:	2001      	movs	r0, #1
100120ec:	bd10      	pop	{r4, pc}
100120ee:	46c0      	nop			; (mov r8, r8)

100120f0 <__aeabi_lmul>:
100120f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100120f2:	464f      	mov	r7, r9
100120f4:	4646      	mov	r6, r8
100120f6:	b4c0      	push	{r6, r7}
100120f8:	0416      	lsls	r6, r2, #16
100120fa:	0c36      	lsrs	r6, r6, #16
100120fc:	4699      	mov	r9, r3
100120fe:	0033      	movs	r3, r6
10012100:	0405      	lsls	r5, r0, #16
10012102:	0c2c      	lsrs	r4, r5, #16
10012104:	0c07      	lsrs	r7, r0, #16
10012106:	0c15      	lsrs	r5, r2, #16
10012108:	4363      	muls	r3, r4
1001210a:	437e      	muls	r6, r7
1001210c:	436f      	muls	r7, r5
1001210e:	4365      	muls	r5, r4
10012110:	0c1c      	lsrs	r4, r3, #16
10012112:	19ad      	adds	r5, r5, r6
10012114:	1964      	adds	r4, r4, r5
10012116:	469c      	mov	ip, r3
10012118:	42a6      	cmp	r6, r4
1001211a:	d903      	bls.n	10012124 <__aeabi_lmul+0x34>
1001211c:	2380      	movs	r3, #128	; 0x80
1001211e:	025b      	lsls	r3, r3, #9
10012120:	4698      	mov	r8, r3
10012122:	4447      	add	r7, r8
10012124:	4663      	mov	r3, ip
10012126:	0c25      	lsrs	r5, r4, #16
10012128:	19ef      	adds	r7, r5, r7
1001212a:	041d      	lsls	r5, r3, #16
1001212c:	464b      	mov	r3, r9
1001212e:	434a      	muls	r2, r1
10012130:	4343      	muls	r3, r0
10012132:	0c2d      	lsrs	r5, r5, #16
10012134:	0424      	lsls	r4, r4, #16
10012136:	1964      	adds	r4, r4, r5
10012138:	1899      	adds	r1, r3, r2
1001213a:	19c9      	adds	r1, r1, r7
1001213c:	0020      	movs	r0, r4
1001213e:	bc0c      	pop	{r2, r3}
10012140:	4690      	mov	r8, r2
10012142:	4699      	mov	r9, r3
10012144:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012146:	46c0      	nop			; (mov r8, r8)

10012148 <__aeabi_f2uiz>:
10012148:	219e      	movs	r1, #158	; 0x9e
1001214a:	b510      	push	{r4, lr}
1001214c:	05c9      	lsls	r1, r1, #23
1001214e:	1c04      	adds	r4, r0, #0
10012150:	f7ff ffc4 	bl	100120dc <__aeabi_fcmpge>
10012154:	2800      	cmp	r0, #0
10012156:	d103      	bne.n	10012160 <__aeabi_f2uiz+0x18>
10012158:	1c20      	adds	r0, r4, #0
1001215a:	f000 fc8f 	bl	10012a7c <__aeabi_f2iz>
1001215e:	bd10      	pop	{r4, pc}
10012160:	219e      	movs	r1, #158	; 0x9e
10012162:	1c20      	adds	r0, r4, #0
10012164:	05c9      	lsls	r1, r1, #23
10012166:	f000 fb03 	bl	10012770 <__aeabi_fsub>
1001216a:	f000 fc87 	bl	10012a7c <__aeabi_f2iz>
1001216e:	2380      	movs	r3, #128	; 0x80
10012170:	061b      	lsls	r3, r3, #24
10012172:	469c      	mov	ip, r3
10012174:	4460      	add	r0, ip
10012176:	e7f2      	b.n	1001215e <__aeabi_f2uiz+0x16>

10012178 <__aeabi_d2uiz>:
10012178:	b570      	push	{r4, r5, r6, lr}
1001217a:	2200      	movs	r2, #0
1001217c:	4b0c      	ldr	r3, [pc, #48]	; (100121b0 <__aeabi_d2uiz+0x38>)
1001217e:	0004      	movs	r4, r0
10012180:	000d      	movs	r5, r1
10012182:	f7ff ff71 	bl	10012068 <__aeabi_dcmpge>
10012186:	2800      	cmp	r0, #0
10012188:	d104      	bne.n	10012194 <__aeabi_d2uiz+0x1c>
1001218a:	0020      	movs	r0, r4
1001218c:	0029      	movs	r1, r5
1001218e:	f002 fa5b 	bl	10014648 <__aeabi_d2iz>
10012192:	bd70      	pop	{r4, r5, r6, pc}
10012194:	4b06      	ldr	r3, [pc, #24]	; (100121b0 <__aeabi_d2uiz+0x38>)
10012196:	2200      	movs	r2, #0
10012198:	0020      	movs	r0, r4
1001219a:	0029      	movs	r1, r5
1001219c:	f001 fee0 	bl	10013f60 <__aeabi_dsub>
100121a0:	f002 fa52 	bl	10014648 <__aeabi_d2iz>
100121a4:	2380      	movs	r3, #128	; 0x80
100121a6:	061b      	lsls	r3, r3, #24
100121a8:	469c      	mov	ip, r3
100121aa:	4460      	add	r0, ip
100121ac:	e7f1      	b.n	10012192 <__aeabi_d2uiz+0x1a>
100121ae:	46c0      	nop			; (mov r8, r8)
100121b0:	41e00000 	.word	0x41e00000

100121b4 <__aeabi_fdiv>:
100121b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100121b6:	4656      	mov	r6, sl
100121b8:	4644      	mov	r4, r8
100121ba:	465f      	mov	r7, fp
100121bc:	464d      	mov	r5, r9
100121be:	b4f0      	push	{r4, r5, r6, r7}
100121c0:	0244      	lsls	r4, r0, #9
100121c2:	0046      	lsls	r6, r0, #1
100121c4:	0fc7      	lsrs	r7, r0, #31
100121c6:	b083      	sub	sp, #12
100121c8:	4688      	mov	r8, r1
100121ca:	0a65      	lsrs	r5, r4, #9
100121cc:	0e36      	lsrs	r6, r6, #24
100121ce:	46ba      	mov	sl, r7
100121d0:	d03d      	beq.n	1001224e <__aeabi_fdiv+0x9a>
100121d2:	2eff      	cmp	r6, #255	; 0xff
100121d4:	d022      	beq.n	1001221c <__aeabi_fdiv+0x68>
100121d6:	2300      	movs	r3, #0
100121d8:	00ec      	lsls	r4, r5, #3
100121da:	2580      	movs	r5, #128	; 0x80
100121dc:	4699      	mov	r9, r3
100121de:	469b      	mov	fp, r3
100121e0:	04ed      	lsls	r5, r5, #19
100121e2:	4325      	orrs	r5, r4
100121e4:	3e7f      	subs	r6, #127	; 0x7f
100121e6:	4643      	mov	r3, r8
100121e8:	025c      	lsls	r4, r3, #9
100121ea:	0058      	lsls	r0, r3, #1
100121ec:	0fdb      	lsrs	r3, r3, #31
100121ee:	0a64      	lsrs	r4, r4, #9
100121f0:	0e00      	lsrs	r0, r0, #24
100121f2:	4698      	mov	r8, r3
100121f4:	d036      	beq.n	10012264 <__aeabi_fdiv+0xb0>
100121f6:	28ff      	cmp	r0, #255	; 0xff
100121f8:	d030      	beq.n	1001225c <__aeabi_fdiv+0xa8>
100121fa:	2380      	movs	r3, #128	; 0x80
100121fc:	2100      	movs	r1, #0
100121fe:	00e4      	lsls	r4, r4, #3
10012200:	04db      	lsls	r3, r3, #19
10012202:	431c      	orrs	r4, r3
10012204:	387f      	subs	r0, #127	; 0x7f
10012206:	1a30      	subs	r0, r6, r0
10012208:	9001      	str	r0, [sp, #4]
1001220a:	4648      	mov	r0, r9
1001220c:	4642      	mov	r2, r8
1001220e:	4308      	orrs	r0, r1
10012210:	4e72      	ldr	r6, [pc, #456]	; (100123dc <__aeabi_fdiv+0x228>)
10012212:	0080      	lsls	r0, r0, #2
10012214:	5830      	ldr	r0, [r6, r0]
10012216:	407a      	eors	r2, r7
10012218:	0013      	movs	r3, r2
1001221a:	4687      	mov	pc, r0
1001221c:	2d00      	cmp	r5, #0
1001221e:	d144      	bne.n	100122aa <__aeabi_fdiv+0xf6>
10012220:	2308      	movs	r3, #8
10012222:	4699      	mov	r9, r3
10012224:	3b06      	subs	r3, #6
10012226:	469b      	mov	fp, r3
10012228:	e7dd      	b.n	100121e6 <__aeabi_fdiv+0x32>
1001222a:	2201      	movs	r2, #1
1001222c:	20ff      	movs	r0, #255	; 0xff
1001222e:	2400      	movs	r4, #0
10012230:	401a      	ands	r2, r3
10012232:	0264      	lsls	r4, r4, #9
10012234:	05c3      	lsls	r3, r0, #23
10012236:	0a64      	lsrs	r4, r4, #9
10012238:	07d2      	lsls	r2, r2, #31
1001223a:	431c      	orrs	r4, r3
1001223c:	4314      	orrs	r4, r2
1001223e:	0020      	movs	r0, r4
10012240:	b003      	add	sp, #12
10012242:	bc3c      	pop	{r2, r3, r4, r5}
10012244:	4690      	mov	r8, r2
10012246:	4699      	mov	r9, r3
10012248:	46a2      	mov	sl, r4
1001224a:	46ab      	mov	fp, r5
1001224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001224e:	2d00      	cmp	r5, #0
10012250:	d120      	bne.n	10012294 <__aeabi_fdiv+0xe0>
10012252:	2304      	movs	r3, #4
10012254:	4699      	mov	r9, r3
10012256:	3b03      	subs	r3, #3
10012258:	469b      	mov	fp, r3
1001225a:	e7c4      	b.n	100121e6 <__aeabi_fdiv+0x32>
1001225c:	2c00      	cmp	r4, #0
1001225e:	d117      	bne.n	10012290 <__aeabi_fdiv+0xdc>
10012260:	2102      	movs	r1, #2
10012262:	e002      	b.n	1001226a <__aeabi_fdiv+0xb6>
10012264:	2c00      	cmp	r4, #0
10012266:	d10a      	bne.n	1001227e <__aeabi_fdiv+0xca>
10012268:	2101      	movs	r1, #1
1001226a:	1a32      	subs	r2, r6, r0
1001226c:	9201      	str	r2, [sp, #4]
1001226e:	464a      	mov	r2, r9
10012270:	4643      	mov	r3, r8
10012272:	430a      	orrs	r2, r1
10012274:	485a      	ldr	r0, [pc, #360]	; (100123e0 <__aeabi_fdiv+0x22c>)
10012276:	0092      	lsls	r2, r2, #2
10012278:	5882      	ldr	r2, [r0, r2]
1001227a:	407b      	eors	r3, r7
1001227c:	4697      	mov	pc, r2
1001227e:	0020      	movs	r0, r4
10012280:	f002 fb72 	bl	10014968 <__clzsi2>
10012284:	1f43      	subs	r3, r0, #5
10012286:	3076      	adds	r0, #118	; 0x76
10012288:	409c      	lsls	r4, r3
1001228a:	4240      	negs	r0, r0
1001228c:	2100      	movs	r1, #0
1001228e:	e7ba      	b.n	10012206 <__aeabi_fdiv+0x52>
10012290:	2103      	movs	r1, #3
10012292:	e7b8      	b.n	10012206 <__aeabi_fdiv+0x52>
10012294:	0028      	movs	r0, r5
10012296:	f002 fb67 	bl	10014968 <__clzsi2>
1001229a:	1f43      	subs	r3, r0, #5
1001229c:	409d      	lsls	r5, r3
1001229e:	2300      	movs	r3, #0
100122a0:	3076      	adds	r0, #118	; 0x76
100122a2:	4246      	negs	r6, r0
100122a4:	4699      	mov	r9, r3
100122a6:	469b      	mov	fp, r3
100122a8:	e79d      	b.n	100121e6 <__aeabi_fdiv+0x32>
100122aa:	230c      	movs	r3, #12
100122ac:	4699      	mov	r9, r3
100122ae:	3b09      	subs	r3, #9
100122b0:	469b      	mov	fp, r3
100122b2:	e798      	b.n	100121e6 <__aeabi_fdiv+0x32>
100122b4:	2480      	movs	r4, #128	; 0x80
100122b6:	2200      	movs	r2, #0
100122b8:	03e4      	lsls	r4, r4, #15
100122ba:	20ff      	movs	r0, #255	; 0xff
100122bc:	e7b9      	b.n	10012232 <__aeabi_fdiv+0x7e>
100122be:	2400      	movs	r4, #0
100122c0:	46c2      	mov	sl, r8
100122c2:	468b      	mov	fp, r1
100122c4:	465a      	mov	r2, fp
100122c6:	4653      	mov	r3, sl
100122c8:	2a02      	cmp	r2, #2
100122ca:	d0ae      	beq.n	1001222a <__aeabi_fdiv+0x76>
100122cc:	2a03      	cmp	r2, #3
100122ce:	d07d      	beq.n	100123cc <__aeabi_fdiv+0x218>
100122d0:	2a01      	cmp	r2, #1
100122d2:	d131      	bne.n	10012338 <__aeabi_fdiv+0x184>
100122d4:	2201      	movs	r2, #1
100122d6:	2000      	movs	r0, #0
100122d8:	401a      	ands	r2, r3
100122da:	2400      	movs	r4, #0
100122dc:	e7a9      	b.n	10012232 <__aeabi_fdiv+0x7e>
100122de:	2201      	movs	r2, #1
100122e0:	1a10      	subs	r0, r2, r0
100122e2:	281b      	cmp	r0, #27
100122e4:	dd56      	ble.n	10012394 <__aeabi_fdiv+0x1e0>
100122e6:	401a      	ands	r2, r3
100122e8:	2000      	movs	r0, #0
100122ea:	2400      	movs	r4, #0
100122ec:	e7a1      	b.n	10012232 <__aeabi_fdiv+0x7e>
100122ee:	2380      	movs	r3, #128	; 0x80
100122f0:	03db      	lsls	r3, r3, #15
100122f2:	421d      	tst	r5, r3
100122f4:	d14b      	bne.n	1001238e <__aeabi_fdiv+0x1da>
100122f6:	2380      	movs	r3, #128	; 0x80
100122f8:	03db      	lsls	r3, r3, #15
100122fa:	432b      	orrs	r3, r5
100122fc:	025c      	lsls	r4, r3, #9
100122fe:	0a64      	lsrs	r4, r4, #9
10012300:	003a      	movs	r2, r7
10012302:	20ff      	movs	r0, #255	; 0xff
10012304:	e795      	b.n	10012232 <__aeabi_fdiv+0x7e>
10012306:	016d      	lsls	r5, r5, #5
10012308:	0160      	lsls	r0, r4, #5
1001230a:	4285      	cmp	r5, r0
1001230c:	d230      	bcs.n	10012370 <__aeabi_fdiv+0x1bc>
1001230e:	9a01      	ldr	r2, [sp, #4]
10012310:	2400      	movs	r4, #0
10012312:	3a01      	subs	r2, #1
10012314:	9201      	str	r2, [sp, #4]
10012316:	221b      	movs	r2, #27
10012318:	2701      	movs	r7, #1
1001231a:	0029      	movs	r1, r5
1001231c:	0064      	lsls	r4, r4, #1
1001231e:	006d      	lsls	r5, r5, #1
10012320:	2900      	cmp	r1, #0
10012322:	db01      	blt.n	10012328 <__aeabi_fdiv+0x174>
10012324:	42a8      	cmp	r0, r5
10012326:	d801      	bhi.n	1001232c <__aeabi_fdiv+0x178>
10012328:	1a2d      	subs	r5, r5, r0
1001232a:	433c      	orrs	r4, r7
1001232c:	3a01      	subs	r2, #1
1001232e:	2a00      	cmp	r2, #0
10012330:	d1f3      	bne.n	1001231a <__aeabi_fdiv+0x166>
10012332:	1e6a      	subs	r2, r5, #1
10012334:	4195      	sbcs	r5, r2
10012336:	432c      	orrs	r4, r5
10012338:	9801      	ldr	r0, [sp, #4]
1001233a:	307f      	adds	r0, #127	; 0x7f
1001233c:	2800      	cmp	r0, #0
1001233e:	ddce      	ble.n	100122de <__aeabi_fdiv+0x12a>
10012340:	0762      	lsls	r2, r4, #29
10012342:	d004      	beq.n	1001234e <__aeabi_fdiv+0x19a>
10012344:	220f      	movs	r2, #15
10012346:	4022      	ands	r2, r4
10012348:	2a04      	cmp	r2, #4
1001234a:	d000      	beq.n	1001234e <__aeabi_fdiv+0x19a>
1001234c:	3404      	adds	r4, #4
1001234e:	0122      	lsls	r2, r4, #4
10012350:	d503      	bpl.n	1001235a <__aeabi_fdiv+0x1a6>
10012352:	4a24      	ldr	r2, [pc, #144]	; (100123e4 <__aeabi_fdiv+0x230>)
10012354:	9801      	ldr	r0, [sp, #4]
10012356:	4014      	ands	r4, r2
10012358:	3080      	adds	r0, #128	; 0x80
1001235a:	28fe      	cmp	r0, #254	; 0xfe
1001235c:	dd00      	ble.n	10012360 <__aeabi_fdiv+0x1ac>
1001235e:	e764      	b.n	1001222a <__aeabi_fdiv+0x76>
10012360:	2201      	movs	r2, #1
10012362:	01a4      	lsls	r4, r4, #6
10012364:	0a64      	lsrs	r4, r4, #9
10012366:	b2c0      	uxtb	r0, r0
10012368:	401a      	ands	r2, r3
1001236a:	e762      	b.n	10012232 <__aeabi_fdiv+0x7e>
1001236c:	002c      	movs	r4, r5
1001236e:	e7a9      	b.n	100122c4 <__aeabi_fdiv+0x110>
10012370:	1a2d      	subs	r5, r5, r0
10012372:	221a      	movs	r2, #26
10012374:	2401      	movs	r4, #1
10012376:	e7cf      	b.n	10012318 <__aeabi_fdiv+0x164>
10012378:	026b      	lsls	r3, r5, #9
1001237a:	d5bc      	bpl.n	100122f6 <__aeabi_fdiv+0x142>
1001237c:	2400      	movs	r4, #0
1001237e:	2380      	movs	r3, #128	; 0x80
10012380:	03db      	lsls	r3, r3, #15
10012382:	431c      	orrs	r4, r3
10012384:	0264      	lsls	r4, r4, #9
10012386:	0a64      	lsrs	r4, r4, #9
10012388:	4642      	mov	r2, r8
1001238a:	20ff      	movs	r0, #255	; 0xff
1001238c:	e751      	b.n	10012232 <__aeabi_fdiv+0x7e>
1001238e:	421c      	tst	r4, r3
10012390:	d1b3      	bne.n	100122fa <__aeabi_fdiv+0x146>
10012392:	e7f4      	b.n	1001237e <__aeabi_fdiv+0x1ca>
10012394:	0021      	movs	r1, r4
10012396:	2220      	movs	r2, #32
10012398:	40c1      	lsrs	r1, r0
1001239a:	1a10      	subs	r0, r2, r0
1001239c:	4084      	lsls	r4, r0
1001239e:	1e62      	subs	r2, r4, #1
100123a0:	4194      	sbcs	r4, r2
100123a2:	430c      	orrs	r4, r1
100123a4:	0762      	lsls	r2, r4, #29
100123a6:	d004      	beq.n	100123b2 <__aeabi_fdiv+0x1fe>
100123a8:	220f      	movs	r2, #15
100123aa:	4022      	ands	r2, r4
100123ac:	2a04      	cmp	r2, #4
100123ae:	d000      	beq.n	100123b2 <__aeabi_fdiv+0x1fe>
100123b0:	3404      	adds	r4, #4
100123b2:	0162      	lsls	r2, r4, #5
100123b4:	d504      	bpl.n	100123c0 <__aeabi_fdiv+0x20c>
100123b6:	2201      	movs	r2, #1
100123b8:	2001      	movs	r0, #1
100123ba:	401a      	ands	r2, r3
100123bc:	2400      	movs	r4, #0
100123be:	e738      	b.n	10012232 <__aeabi_fdiv+0x7e>
100123c0:	2201      	movs	r2, #1
100123c2:	01a4      	lsls	r4, r4, #6
100123c4:	0a64      	lsrs	r4, r4, #9
100123c6:	401a      	ands	r2, r3
100123c8:	2000      	movs	r0, #0
100123ca:	e732      	b.n	10012232 <__aeabi_fdiv+0x7e>
100123cc:	2380      	movs	r3, #128	; 0x80
100123ce:	03db      	lsls	r3, r3, #15
100123d0:	431c      	orrs	r4, r3
100123d2:	0264      	lsls	r4, r4, #9
100123d4:	0a64      	lsrs	r4, r4, #9
100123d6:	4652      	mov	r2, sl
100123d8:	20ff      	movs	r0, #255	; 0xff
100123da:	e72a      	b.n	10012232 <__aeabi_fdiv+0x7e>
100123dc:	100169e8 	.word	0x100169e8
100123e0:	10016a28 	.word	0x10016a28
100123e4:	f7ffffff 	.word	0xf7ffffff

100123e8 <__eqsf2>:
100123e8:	0243      	lsls	r3, r0, #9
100123ea:	b570      	push	{r4, r5, r6, lr}
100123ec:	0042      	lsls	r2, r0, #1
100123ee:	004c      	lsls	r4, r1, #1
100123f0:	0a5d      	lsrs	r5, r3, #9
100123f2:	0fc3      	lsrs	r3, r0, #31
100123f4:	0248      	lsls	r0, r1, #9
100123f6:	0e12      	lsrs	r2, r2, #24
100123f8:	0a46      	lsrs	r6, r0, #9
100123fa:	0e24      	lsrs	r4, r4, #24
100123fc:	0fc9      	lsrs	r1, r1, #31
100123fe:	2aff      	cmp	r2, #255	; 0xff
10012400:	d00f      	beq.n	10012422 <__eqsf2+0x3a>
10012402:	2cff      	cmp	r4, #255	; 0xff
10012404:	d011      	beq.n	1001242a <__eqsf2+0x42>
10012406:	2001      	movs	r0, #1
10012408:	42a2      	cmp	r2, r4
1001240a:	d000      	beq.n	1001240e <__eqsf2+0x26>
1001240c:	bd70      	pop	{r4, r5, r6, pc}
1001240e:	42b5      	cmp	r5, r6
10012410:	d1fc      	bne.n	1001240c <__eqsf2+0x24>
10012412:	428b      	cmp	r3, r1
10012414:	d00d      	beq.n	10012432 <__eqsf2+0x4a>
10012416:	2a00      	cmp	r2, #0
10012418:	d1f8      	bne.n	1001240c <__eqsf2+0x24>
1001241a:	0028      	movs	r0, r5
1001241c:	1e43      	subs	r3, r0, #1
1001241e:	4198      	sbcs	r0, r3
10012420:	e7f4      	b.n	1001240c <__eqsf2+0x24>
10012422:	2001      	movs	r0, #1
10012424:	2d00      	cmp	r5, #0
10012426:	d1f1      	bne.n	1001240c <__eqsf2+0x24>
10012428:	e7eb      	b.n	10012402 <__eqsf2+0x1a>
1001242a:	2001      	movs	r0, #1
1001242c:	2e00      	cmp	r6, #0
1001242e:	d1ed      	bne.n	1001240c <__eqsf2+0x24>
10012430:	e7e9      	b.n	10012406 <__eqsf2+0x1e>
10012432:	2000      	movs	r0, #0
10012434:	e7ea      	b.n	1001240c <__eqsf2+0x24>
10012436:	46c0      	nop			; (mov r8, r8)

10012438 <__gesf2>:
10012438:	0243      	lsls	r3, r0, #9
1001243a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001243c:	0042      	lsls	r2, r0, #1
1001243e:	0a5d      	lsrs	r5, r3, #9
10012440:	0fc3      	lsrs	r3, r0, #31
10012442:	0248      	lsls	r0, r1, #9
10012444:	0a44      	lsrs	r4, r0, #9
10012446:	0048      	lsls	r0, r1, #1
10012448:	0e12      	lsrs	r2, r2, #24
1001244a:	0e00      	lsrs	r0, r0, #24
1001244c:	0fc9      	lsrs	r1, r1, #31
1001244e:	2aff      	cmp	r2, #255	; 0xff
10012450:	d01f      	beq.n	10012492 <__gesf2+0x5a>
10012452:	28ff      	cmp	r0, #255	; 0xff
10012454:	d022      	beq.n	1001249c <__gesf2+0x64>
10012456:	2a00      	cmp	r2, #0
10012458:	d109      	bne.n	1001246e <__gesf2+0x36>
1001245a:	426e      	negs	r6, r5
1001245c:	416e      	adcs	r6, r5
1001245e:	2800      	cmp	r0, #0
10012460:	d10f      	bne.n	10012482 <__gesf2+0x4a>
10012462:	2c00      	cmp	r4, #0
10012464:	d10d      	bne.n	10012482 <__gesf2+0x4a>
10012466:	2000      	movs	r0, #0
10012468:	2d00      	cmp	r5, #0
1001246a:	d009      	beq.n	10012480 <__gesf2+0x48>
1001246c:	e005      	b.n	1001247a <__gesf2+0x42>
1001246e:	2800      	cmp	r0, #0
10012470:	d101      	bne.n	10012476 <__gesf2+0x3e>
10012472:	2c00      	cmp	r4, #0
10012474:	d001      	beq.n	1001247a <__gesf2+0x42>
10012476:	428b      	cmp	r3, r1
10012478:	d013      	beq.n	100124a2 <__gesf2+0x6a>
1001247a:	4258      	negs	r0, r3
1001247c:	2301      	movs	r3, #1
1001247e:	4318      	orrs	r0, r3
10012480:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012482:	2e00      	cmp	r6, #0
10012484:	d0f7      	beq.n	10012476 <__gesf2+0x3e>
10012486:	4248      	negs	r0, r1
10012488:	4141      	adcs	r1, r0
1001248a:	2001      	movs	r0, #1
1001248c:	4249      	negs	r1, r1
1001248e:	4308      	orrs	r0, r1
10012490:	e7f6      	b.n	10012480 <__gesf2+0x48>
10012492:	2d00      	cmp	r5, #0
10012494:	d0dd      	beq.n	10012452 <__gesf2+0x1a>
10012496:	2002      	movs	r0, #2
10012498:	4240      	negs	r0, r0
1001249a:	e7f1      	b.n	10012480 <__gesf2+0x48>
1001249c:	2c00      	cmp	r4, #0
1001249e:	d0da      	beq.n	10012456 <__gesf2+0x1e>
100124a0:	e7f9      	b.n	10012496 <__gesf2+0x5e>
100124a2:	4282      	cmp	r2, r0
100124a4:	dce9      	bgt.n	1001247a <__gesf2+0x42>
100124a6:	db04      	blt.n	100124b2 <__gesf2+0x7a>
100124a8:	42a5      	cmp	r5, r4
100124aa:	d8e6      	bhi.n	1001247a <__gesf2+0x42>
100124ac:	2000      	movs	r0, #0
100124ae:	42a5      	cmp	r5, r4
100124b0:	d2e6      	bcs.n	10012480 <__gesf2+0x48>
100124b2:	4258      	negs	r0, r3
100124b4:	4143      	adcs	r3, r0
100124b6:	2001      	movs	r0, #1
100124b8:	425b      	negs	r3, r3
100124ba:	4318      	orrs	r0, r3
100124bc:	e7e0      	b.n	10012480 <__gesf2+0x48>
100124be:	46c0      	nop			; (mov r8, r8)

100124c0 <__lesf2>:
100124c0:	0243      	lsls	r3, r0, #9
100124c2:	b5f0      	push	{r4, r5, r6, r7, lr}
100124c4:	0042      	lsls	r2, r0, #1
100124c6:	004c      	lsls	r4, r1, #1
100124c8:	0a5e      	lsrs	r6, r3, #9
100124ca:	0fc3      	lsrs	r3, r0, #31
100124cc:	0248      	lsls	r0, r1, #9
100124ce:	0e12      	lsrs	r2, r2, #24
100124d0:	0a45      	lsrs	r5, r0, #9
100124d2:	0e24      	lsrs	r4, r4, #24
100124d4:	0fc9      	lsrs	r1, r1, #31
100124d6:	2aff      	cmp	r2, #255	; 0xff
100124d8:	d017      	beq.n	1001250a <__lesf2+0x4a>
100124da:	2cff      	cmp	r4, #255	; 0xff
100124dc:	d019      	beq.n	10012512 <__lesf2+0x52>
100124de:	2a00      	cmp	r2, #0
100124e0:	d10b      	bne.n	100124fa <__lesf2+0x3a>
100124e2:	4270      	negs	r0, r6
100124e4:	4170      	adcs	r0, r6
100124e6:	2c00      	cmp	r4, #0
100124e8:	d017      	beq.n	1001251a <__lesf2+0x5a>
100124ea:	2800      	cmp	r0, #0
100124ec:	d007      	beq.n	100124fe <__lesf2+0x3e>
100124ee:	4248      	negs	r0, r1
100124f0:	4141      	adcs	r1, r0
100124f2:	2001      	movs	r0, #1
100124f4:	4249      	negs	r1, r1
100124f6:	4308      	orrs	r0, r1
100124f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100124fa:	2c00      	cmp	r4, #0
100124fc:	d013      	beq.n	10012526 <__lesf2+0x66>
100124fe:	428b      	cmp	r3, r1
10012500:	d014      	beq.n	1001252c <__lesf2+0x6c>
10012502:	4258      	negs	r0, r3
10012504:	2301      	movs	r3, #1
10012506:	4318      	orrs	r0, r3
10012508:	e7f6      	b.n	100124f8 <__lesf2+0x38>
1001250a:	2002      	movs	r0, #2
1001250c:	2e00      	cmp	r6, #0
1001250e:	d1f3      	bne.n	100124f8 <__lesf2+0x38>
10012510:	e7e3      	b.n	100124da <__lesf2+0x1a>
10012512:	2002      	movs	r0, #2
10012514:	2d00      	cmp	r5, #0
10012516:	d1ef      	bne.n	100124f8 <__lesf2+0x38>
10012518:	e7e1      	b.n	100124de <__lesf2+0x1e>
1001251a:	2d00      	cmp	r5, #0
1001251c:	d1e5      	bne.n	100124ea <__lesf2+0x2a>
1001251e:	2000      	movs	r0, #0
10012520:	2e00      	cmp	r6, #0
10012522:	d0e9      	beq.n	100124f8 <__lesf2+0x38>
10012524:	e7ed      	b.n	10012502 <__lesf2+0x42>
10012526:	2d00      	cmp	r5, #0
10012528:	d1e9      	bne.n	100124fe <__lesf2+0x3e>
1001252a:	e7ea      	b.n	10012502 <__lesf2+0x42>
1001252c:	42a2      	cmp	r2, r4
1001252e:	dce8      	bgt.n	10012502 <__lesf2+0x42>
10012530:	db04      	blt.n	1001253c <__lesf2+0x7c>
10012532:	42ae      	cmp	r6, r5
10012534:	d8e5      	bhi.n	10012502 <__lesf2+0x42>
10012536:	2000      	movs	r0, #0
10012538:	42ae      	cmp	r6, r5
1001253a:	d2dd      	bcs.n	100124f8 <__lesf2+0x38>
1001253c:	4258      	negs	r0, r3
1001253e:	4143      	adcs	r3, r0
10012540:	2001      	movs	r0, #1
10012542:	425b      	negs	r3, r3
10012544:	4318      	orrs	r0, r3
10012546:	e7d7      	b.n	100124f8 <__lesf2+0x38>

10012548 <__aeabi_fmul>:
10012548:	b5f0      	push	{r4, r5, r6, r7, lr}
1001254a:	4657      	mov	r7, sl
1001254c:	464e      	mov	r6, r9
1001254e:	4645      	mov	r5, r8
10012550:	0043      	lsls	r3, r0, #1
10012552:	b4e0      	push	{r5, r6, r7}
10012554:	0246      	lsls	r6, r0, #9
10012556:	4688      	mov	r8, r1
10012558:	0a76      	lsrs	r6, r6, #9
1001255a:	0e1f      	lsrs	r7, r3, #24
1001255c:	0fc4      	lsrs	r4, r0, #31
1001255e:	2f00      	cmp	r7, #0
10012560:	d047      	beq.n	100125f2 <__aeabi_fmul+0xaa>
10012562:	2fff      	cmp	r7, #255	; 0xff
10012564:	d025      	beq.n	100125b2 <__aeabi_fmul+0x6a>
10012566:	2300      	movs	r3, #0
10012568:	2580      	movs	r5, #128	; 0x80
1001256a:	469a      	mov	sl, r3
1001256c:	4699      	mov	r9, r3
1001256e:	00f6      	lsls	r6, r6, #3
10012570:	04ed      	lsls	r5, r5, #19
10012572:	432e      	orrs	r6, r5
10012574:	3f7f      	subs	r7, #127	; 0x7f
10012576:	4643      	mov	r3, r8
10012578:	4642      	mov	r2, r8
1001257a:	025d      	lsls	r5, r3, #9
1001257c:	0fd2      	lsrs	r2, r2, #31
1001257e:	005b      	lsls	r3, r3, #1
10012580:	0a6d      	lsrs	r5, r5, #9
10012582:	0e1b      	lsrs	r3, r3, #24
10012584:	4690      	mov	r8, r2
10012586:	d040      	beq.n	1001260a <__aeabi_fmul+0xc2>
10012588:	2bff      	cmp	r3, #255	; 0xff
1001258a:	d039      	beq.n	10012600 <__aeabi_fmul+0xb8>
1001258c:	2280      	movs	r2, #128	; 0x80
1001258e:	2000      	movs	r0, #0
10012590:	00ed      	lsls	r5, r5, #3
10012592:	04d2      	lsls	r2, r2, #19
10012594:	4315      	orrs	r5, r2
10012596:	3b7f      	subs	r3, #127	; 0x7f
10012598:	18fb      	adds	r3, r7, r3
1001259a:	4642      	mov	r2, r8
1001259c:	4657      	mov	r7, sl
1001259e:	1c59      	adds	r1, r3, #1
100125a0:	4062      	eors	r2, r4
100125a2:	468c      	mov	ip, r1
100125a4:	4307      	orrs	r7, r0
100125a6:	2f0f      	cmp	r7, #15
100125a8:	d85c      	bhi.n	10012664 <__aeabi_fmul+0x11c>
100125aa:	496f      	ldr	r1, [pc, #444]	; (10012768 <__aeabi_fmul+0x220>)
100125ac:	00bf      	lsls	r7, r7, #2
100125ae:	59c9      	ldr	r1, [r1, r7]
100125b0:	468f      	mov	pc, r1
100125b2:	2e00      	cmp	r6, #0
100125b4:	d145      	bne.n	10012642 <__aeabi_fmul+0xfa>
100125b6:	2308      	movs	r3, #8
100125b8:	469a      	mov	sl, r3
100125ba:	3b06      	subs	r3, #6
100125bc:	4699      	mov	r9, r3
100125be:	e7da      	b.n	10012576 <__aeabi_fmul+0x2e>
100125c0:	4642      	mov	r2, r8
100125c2:	2802      	cmp	r0, #2
100125c4:	d02d      	beq.n	10012622 <__aeabi_fmul+0xda>
100125c6:	2803      	cmp	r0, #3
100125c8:	d100      	bne.n	100125cc <__aeabi_fmul+0x84>
100125ca:	e0c3      	b.n	10012754 <__aeabi_fmul+0x20c>
100125cc:	2801      	cmp	r0, #1
100125ce:	d000      	beq.n	100125d2 <__aeabi_fmul+0x8a>
100125d0:	e0a2      	b.n	10012718 <__aeabi_fmul+0x1d0>
100125d2:	2500      	movs	r5, #0
100125d4:	2600      	movs	r6, #0
100125d6:	4002      	ands	r2, r0
100125d8:	b2d4      	uxtb	r4, r2
100125da:	0276      	lsls	r6, r6, #9
100125dc:	05ed      	lsls	r5, r5, #23
100125de:	0a76      	lsrs	r6, r6, #9
100125e0:	432e      	orrs	r6, r5
100125e2:	07e4      	lsls	r4, r4, #31
100125e4:	4326      	orrs	r6, r4
100125e6:	0030      	movs	r0, r6
100125e8:	bc1c      	pop	{r2, r3, r4}
100125ea:	4690      	mov	r8, r2
100125ec:	4699      	mov	r9, r3
100125ee:	46a2      	mov	sl, r4
100125f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100125f2:	2e00      	cmp	r6, #0
100125f4:	d11a      	bne.n	1001262c <__aeabi_fmul+0xe4>
100125f6:	2304      	movs	r3, #4
100125f8:	469a      	mov	sl, r3
100125fa:	3b03      	subs	r3, #3
100125fc:	4699      	mov	r9, r3
100125fe:	e7ba      	b.n	10012576 <__aeabi_fmul+0x2e>
10012600:	002a      	movs	r2, r5
10012602:	1e51      	subs	r1, r2, #1
10012604:	418a      	sbcs	r2, r1
10012606:	1c90      	adds	r0, r2, #2
10012608:	e7c6      	b.n	10012598 <__aeabi_fmul+0x50>
1001260a:	2001      	movs	r0, #1
1001260c:	2d00      	cmp	r5, #0
1001260e:	d0c3      	beq.n	10012598 <__aeabi_fmul+0x50>
10012610:	0028      	movs	r0, r5
10012612:	f002 f9a9 	bl	10014968 <__clzsi2>
10012616:	1f43      	subs	r3, r0, #5
10012618:	3076      	adds	r0, #118	; 0x76
1001261a:	409d      	lsls	r5, r3
1001261c:	4243      	negs	r3, r0
1001261e:	2000      	movs	r0, #0
10012620:	e7ba      	b.n	10012598 <__aeabi_fmul+0x50>
10012622:	2401      	movs	r4, #1
10012624:	25ff      	movs	r5, #255	; 0xff
10012626:	4014      	ands	r4, r2
10012628:	2600      	movs	r6, #0
1001262a:	e7d6      	b.n	100125da <__aeabi_fmul+0x92>
1001262c:	0030      	movs	r0, r6
1001262e:	f002 f99b 	bl	10014968 <__clzsi2>
10012632:	1f43      	subs	r3, r0, #5
10012634:	409e      	lsls	r6, r3
10012636:	2300      	movs	r3, #0
10012638:	3076      	adds	r0, #118	; 0x76
1001263a:	4247      	negs	r7, r0
1001263c:	469a      	mov	sl, r3
1001263e:	4699      	mov	r9, r3
10012640:	e799      	b.n	10012576 <__aeabi_fmul+0x2e>
10012642:	230c      	movs	r3, #12
10012644:	469a      	mov	sl, r3
10012646:	3b09      	subs	r3, #9
10012648:	4699      	mov	r9, r3
1001264a:	e794      	b.n	10012576 <__aeabi_fmul+0x2e>
1001264c:	2680      	movs	r6, #128	; 0x80
1001264e:	2400      	movs	r4, #0
10012650:	03f6      	lsls	r6, r6, #15
10012652:	25ff      	movs	r5, #255	; 0xff
10012654:	e7c1      	b.n	100125da <__aeabi_fmul+0x92>
10012656:	0035      	movs	r5, r6
10012658:	4648      	mov	r0, r9
1001265a:	e7b2      	b.n	100125c2 <__aeabi_fmul+0x7a>
1001265c:	0035      	movs	r5, r6
1001265e:	0022      	movs	r2, r4
10012660:	4648      	mov	r0, r9
10012662:	e7ae      	b.n	100125c2 <__aeabi_fmul+0x7a>
10012664:	0429      	lsls	r1, r5, #16
10012666:	0c09      	lsrs	r1, r1, #16
10012668:	0008      	movs	r0, r1
1001266a:	0c37      	lsrs	r7, r6, #16
1001266c:	0436      	lsls	r6, r6, #16
1001266e:	0c36      	lsrs	r6, r6, #16
10012670:	0c2c      	lsrs	r4, r5, #16
10012672:	4379      	muls	r1, r7
10012674:	4370      	muls	r0, r6
10012676:	4367      	muls	r7, r4
10012678:	4374      	muls	r4, r6
1001267a:	0c06      	lsrs	r6, r0, #16
1001267c:	1864      	adds	r4, r4, r1
1001267e:	1936      	adds	r6, r6, r4
10012680:	42b1      	cmp	r1, r6
10012682:	d903      	bls.n	1001268c <__aeabi_fmul+0x144>
10012684:	2180      	movs	r1, #128	; 0x80
10012686:	0249      	lsls	r1, r1, #9
10012688:	4688      	mov	r8, r1
1001268a:	4447      	add	r7, r8
1001268c:	0400      	lsls	r0, r0, #16
1001268e:	0c00      	lsrs	r0, r0, #16
10012690:	0431      	lsls	r1, r6, #16
10012692:	1809      	adds	r1, r1, r0
10012694:	018d      	lsls	r5, r1, #6
10012696:	1e68      	subs	r0, r5, #1
10012698:	4185      	sbcs	r5, r0
1001269a:	0e89      	lsrs	r1, r1, #26
1001269c:	4329      	orrs	r1, r5
1001269e:	0c35      	lsrs	r5, r6, #16
100126a0:	19ed      	adds	r5, r5, r7
100126a2:	01ad      	lsls	r5, r5, #6
100126a4:	430d      	orrs	r5, r1
100126a6:	0129      	lsls	r1, r5, #4
100126a8:	d504      	bpl.n	100126b4 <__aeabi_fmul+0x16c>
100126aa:	2301      	movs	r3, #1
100126ac:	0869      	lsrs	r1, r5, #1
100126ae:	401d      	ands	r5, r3
100126b0:	4663      	mov	r3, ip
100126b2:	430d      	orrs	r5, r1
100126b4:	0019      	movs	r1, r3
100126b6:	317f      	adds	r1, #127	; 0x7f
100126b8:	2900      	cmp	r1, #0
100126ba:	dd25      	ble.n	10012708 <__aeabi_fmul+0x1c0>
100126bc:	0768      	lsls	r0, r5, #29
100126be:	d004      	beq.n	100126ca <__aeabi_fmul+0x182>
100126c0:	200f      	movs	r0, #15
100126c2:	4028      	ands	r0, r5
100126c4:	2804      	cmp	r0, #4
100126c6:	d000      	beq.n	100126ca <__aeabi_fmul+0x182>
100126c8:	3504      	adds	r5, #4
100126ca:	0128      	lsls	r0, r5, #4
100126cc:	d503      	bpl.n	100126d6 <__aeabi_fmul+0x18e>
100126ce:	4927      	ldr	r1, [pc, #156]	; (1001276c <__aeabi_fmul+0x224>)
100126d0:	3380      	adds	r3, #128	; 0x80
100126d2:	400d      	ands	r5, r1
100126d4:	0019      	movs	r1, r3
100126d6:	29fe      	cmp	r1, #254	; 0xfe
100126d8:	dca3      	bgt.n	10012622 <__aeabi_fmul+0xda>
100126da:	2401      	movs	r4, #1
100126dc:	01ad      	lsls	r5, r5, #6
100126de:	0a6e      	lsrs	r6, r5, #9
100126e0:	4014      	ands	r4, r2
100126e2:	b2cd      	uxtb	r5, r1
100126e4:	e779      	b.n	100125da <__aeabi_fmul+0x92>
100126e6:	2080      	movs	r0, #128	; 0x80
100126e8:	03c0      	lsls	r0, r0, #15
100126ea:	4206      	tst	r6, r0
100126ec:	d007      	beq.n	100126fe <__aeabi_fmul+0x1b6>
100126ee:	4205      	tst	r5, r0
100126f0:	d105      	bne.n	100126fe <__aeabi_fmul+0x1b6>
100126f2:	4328      	orrs	r0, r5
100126f4:	0246      	lsls	r6, r0, #9
100126f6:	0a76      	lsrs	r6, r6, #9
100126f8:	4644      	mov	r4, r8
100126fa:	25ff      	movs	r5, #255	; 0xff
100126fc:	e76d      	b.n	100125da <__aeabi_fmul+0x92>
100126fe:	4306      	orrs	r6, r0
10012700:	0276      	lsls	r6, r6, #9
10012702:	0a76      	lsrs	r6, r6, #9
10012704:	25ff      	movs	r5, #255	; 0xff
10012706:	e768      	b.n	100125da <__aeabi_fmul+0x92>
10012708:	2401      	movs	r4, #1
1001270a:	1a61      	subs	r1, r4, r1
1001270c:	291b      	cmp	r1, #27
1001270e:	dd05      	ble.n	1001271c <__aeabi_fmul+0x1d4>
10012710:	4014      	ands	r4, r2
10012712:	2500      	movs	r5, #0
10012714:	2600      	movs	r6, #0
10012716:	e760      	b.n	100125da <__aeabi_fmul+0x92>
10012718:	4663      	mov	r3, ip
1001271a:	e7cb      	b.n	100126b4 <__aeabi_fmul+0x16c>
1001271c:	002e      	movs	r6, r5
1001271e:	2320      	movs	r3, #32
10012720:	40ce      	lsrs	r6, r1
10012722:	1a59      	subs	r1, r3, r1
10012724:	408d      	lsls	r5, r1
10012726:	1e6b      	subs	r3, r5, #1
10012728:	419d      	sbcs	r5, r3
1001272a:	432e      	orrs	r6, r5
1001272c:	0773      	lsls	r3, r6, #29
1001272e:	d004      	beq.n	1001273a <__aeabi_fmul+0x1f2>
10012730:	230f      	movs	r3, #15
10012732:	4033      	ands	r3, r6
10012734:	2b04      	cmp	r3, #4
10012736:	d000      	beq.n	1001273a <__aeabi_fmul+0x1f2>
10012738:	3604      	adds	r6, #4
1001273a:	0173      	lsls	r3, r6, #5
1001273c:	d504      	bpl.n	10012748 <__aeabi_fmul+0x200>
1001273e:	2401      	movs	r4, #1
10012740:	2501      	movs	r5, #1
10012742:	4014      	ands	r4, r2
10012744:	2600      	movs	r6, #0
10012746:	e748      	b.n	100125da <__aeabi_fmul+0x92>
10012748:	2401      	movs	r4, #1
1001274a:	01b6      	lsls	r6, r6, #6
1001274c:	0a76      	lsrs	r6, r6, #9
1001274e:	4014      	ands	r4, r2
10012750:	2500      	movs	r5, #0
10012752:	e742      	b.n	100125da <__aeabi_fmul+0x92>
10012754:	2680      	movs	r6, #128	; 0x80
10012756:	2401      	movs	r4, #1
10012758:	03f6      	lsls	r6, r6, #15
1001275a:	432e      	orrs	r6, r5
1001275c:	0276      	lsls	r6, r6, #9
1001275e:	0a76      	lsrs	r6, r6, #9
10012760:	4014      	ands	r4, r2
10012762:	25ff      	movs	r5, #255	; 0xff
10012764:	e739      	b.n	100125da <__aeabi_fmul+0x92>
10012766:	46c0      	nop			; (mov r8, r8)
10012768:	10016a68 	.word	0x10016a68
1001276c:	f7ffffff 	.word	0xf7ffffff

10012770 <__aeabi_fsub>:
10012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012772:	024a      	lsls	r2, r1, #9
10012774:	004e      	lsls	r6, r1, #1
10012776:	0243      	lsls	r3, r0, #9
10012778:	0044      	lsls	r4, r0, #1
1001277a:	0e24      	lsrs	r4, r4, #24
1001277c:	0fc5      	lsrs	r5, r0, #31
1001277e:	099b      	lsrs	r3, r3, #6
10012780:	0e36      	lsrs	r6, r6, #24
10012782:	0fc9      	lsrs	r1, r1, #31
10012784:	0992      	lsrs	r2, r2, #6
10012786:	2eff      	cmp	r6, #255	; 0xff
10012788:	d100      	bne.n	1001278c <__aeabi_fsub+0x1c>
1001278a:	e083      	b.n	10012894 <__aeabi_fsub+0x124>
1001278c:	2001      	movs	r0, #1
1001278e:	4041      	eors	r1, r0
10012790:	1ba0      	subs	r0, r4, r6
10012792:	42a9      	cmp	r1, r5
10012794:	d05c      	beq.n	10012850 <__aeabi_fsub+0xe0>
10012796:	2800      	cmp	r0, #0
10012798:	dc00      	bgt.n	1001279c <__aeabi_fsub+0x2c>
1001279a:	e095      	b.n	100128c8 <__aeabi_fsub+0x158>
1001279c:	2e00      	cmp	r6, #0
1001279e:	d11c      	bne.n	100127da <__aeabi_fsub+0x6a>
100127a0:	2a00      	cmp	r2, #0
100127a2:	d000      	beq.n	100127a6 <__aeabi_fsub+0x36>
100127a4:	e081      	b.n	100128aa <__aeabi_fsub+0x13a>
100127a6:	075a      	lsls	r2, r3, #29
100127a8:	d004      	beq.n	100127b4 <__aeabi_fsub+0x44>
100127aa:	220f      	movs	r2, #15
100127ac:	401a      	ands	r2, r3
100127ae:	2a04      	cmp	r2, #4
100127b0:	d000      	beq.n	100127b4 <__aeabi_fsub+0x44>
100127b2:	3304      	adds	r3, #4
100127b4:	015a      	lsls	r2, r3, #5
100127b6:	d53b      	bpl.n	10012830 <__aeabi_fsub+0xc0>
100127b8:	3401      	adds	r4, #1
100127ba:	2cff      	cmp	r4, #255	; 0xff
100127bc:	d100      	bne.n	100127c0 <__aeabi_fsub+0x50>
100127be:	e091      	b.n	100128e4 <__aeabi_fsub+0x174>
100127c0:	2001      	movs	r0, #1
100127c2:	019b      	lsls	r3, r3, #6
100127c4:	0a5b      	lsrs	r3, r3, #9
100127c6:	b2e4      	uxtb	r4, r4
100127c8:	4005      	ands	r5, r0
100127ca:	025b      	lsls	r3, r3, #9
100127cc:	05e4      	lsls	r4, r4, #23
100127ce:	0a5b      	lsrs	r3, r3, #9
100127d0:	07ed      	lsls	r5, r5, #31
100127d2:	4323      	orrs	r3, r4
100127d4:	432b      	orrs	r3, r5
100127d6:	0018      	movs	r0, r3
100127d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100127da:	2cff      	cmp	r4, #255	; 0xff
100127dc:	d0e3      	beq.n	100127a6 <__aeabi_fsub+0x36>
100127de:	2180      	movs	r1, #128	; 0x80
100127e0:	04c9      	lsls	r1, r1, #19
100127e2:	430a      	orrs	r2, r1
100127e4:	281b      	cmp	r0, #27
100127e6:	dd00      	ble.n	100127ea <__aeabi_fsub+0x7a>
100127e8:	e090      	b.n	1001290c <__aeabi_fsub+0x19c>
100127ea:	0016      	movs	r6, r2
100127ec:	2120      	movs	r1, #32
100127ee:	40c6      	lsrs	r6, r0
100127f0:	1a08      	subs	r0, r1, r0
100127f2:	4082      	lsls	r2, r0
100127f4:	1e51      	subs	r1, r2, #1
100127f6:	418a      	sbcs	r2, r1
100127f8:	4332      	orrs	r2, r6
100127fa:	1a9b      	subs	r3, r3, r2
100127fc:	015a      	lsls	r2, r3, #5
100127fe:	d515      	bpl.n	1001282c <__aeabi_fsub+0xbc>
10012800:	019b      	lsls	r3, r3, #6
10012802:	099e      	lsrs	r6, r3, #6
10012804:	0030      	movs	r0, r6
10012806:	f002 f8af 	bl	10014968 <__clzsi2>
1001280a:	3805      	subs	r0, #5
1001280c:	4086      	lsls	r6, r0
1001280e:	4284      	cmp	r4, r0
10012810:	dc6c      	bgt.n	100128ec <__aeabi_fsub+0x17c>
10012812:	1b04      	subs	r4, r0, r4
10012814:	0033      	movs	r3, r6
10012816:	2020      	movs	r0, #32
10012818:	3401      	adds	r4, #1
1001281a:	40e3      	lsrs	r3, r4
1001281c:	1b04      	subs	r4, r0, r4
1001281e:	40a6      	lsls	r6, r4
10012820:	1e72      	subs	r2, r6, #1
10012822:	4196      	sbcs	r6, r2
10012824:	2400      	movs	r4, #0
10012826:	4333      	orrs	r3, r6
10012828:	e7bd      	b.n	100127a6 <__aeabi_fsub+0x36>
1001282a:	000d      	movs	r5, r1
1001282c:	075a      	lsls	r2, r3, #29
1001282e:	d1bc      	bne.n	100127aa <__aeabi_fsub+0x3a>
10012830:	08df      	lsrs	r7, r3, #3
10012832:	2301      	movs	r3, #1
10012834:	401d      	ands	r5, r3
10012836:	2cff      	cmp	r4, #255	; 0xff
10012838:	d133      	bne.n	100128a2 <__aeabi_fsub+0x132>
1001283a:	2f00      	cmp	r7, #0
1001283c:	d100      	bne.n	10012840 <__aeabi_fsub+0xd0>
1001283e:	e090      	b.n	10012962 <__aeabi_fsub+0x1f2>
10012840:	2280      	movs	r2, #128	; 0x80
10012842:	03d2      	lsls	r2, r2, #15
10012844:	0013      	movs	r3, r2
10012846:	433b      	orrs	r3, r7
10012848:	025b      	lsls	r3, r3, #9
1001284a:	0a5b      	lsrs	r3, r3, #9
1001284c:	24ff      	movs	r4, #255	; 0xff
1001284e:	e7bc      	b.n	100127ca <__aeabi_fsub+0x5a>
10012850:	2800      	cmp	r0, #0
10012852:	dd4f      	ble.n	100128f4 <__aeabi_fsub+0x184>
10012854:	2e00      	cmp	r6, #0
10012856:	d02e      	beq.n	100128b6 <__aeabi_fsub+0x146>
10012858:	2cff      	cmp	r4, #255	; 0xff
1001285a:	d0a4      	beq.n	100127a6 <__aeabi_fsub+0x36>
1001285c:	2580      	movs	r5, #128	; 0x80
1001285e:	04ed      	lsls	r5, r5, #19
10012860:	432a      	orrs	r2, r5
10012862:	281b      	cmp	r0, #27
10012864:	dd00      	ble.n	10012868 <__aeabi_fsub+0xf8>
10012866:	e097      	b.n	10012998 <__aeabi_fsub+0x228>
10012868:	0016      	movs	r6, r2
1001286a:	2520      	movs	r5, #32
1001286c:	40c6      	lsrs	r6, r0
1001286e:	1a28      	subs	r0, r5, r0
10012870:	4082      	lsls	r2, r0
10012872:	1e50      	subs	r0, r2, #1
10012874:	4182      	sbcs	r2, r0
10012876:	4332      	orrs	r2, r6
10012878:	189b      	adds	r3, r3, r2
1001287a:	015a      	lsls	r2, r3, #5
1001287c:	d5d5      	bpl.n	1001282a <__aeabi_fsub+0xba>
1001287e:	3401      	adds	r4, #1
10012880:	2cff      	cmp	r4, #255	; 0xff
10012882:	d06d      	beq.n	10012960 <__aeabi_fsub+0x1f0>
10012884:	2201      	movs	r2, #1
10012886:	487b      	ldr	r0, [pc, #492]	; (10012a74 <__aeabi_fsub+0x304>)
10012888:	401a      	ands	r2, r3
1001288a:	085b      	lsrs	r3, r3, #1
1001288c:	4003      	ands	r3, r0
1001288e:	4313      	orrs	r3, r2
10012890:	000d      	movs	r5, r1
10012892:	e788      	b.n	100127a6 <__aeabi_fsub+0x36>
10012894:	2a00      	cmp	r2, #0
10012896:	d000      	beq.n	1001289a <__aeabi_fsub+0x12a>
10012898:	e77a      	b.n	10012790 <__aeabi_fsub+0x20>
1001289a:	e777      	b.n	1001278c <__aeabi_fsub+0x1c>
1001289c:	1e03      	subs	r3, r0, #0
1001289e:	d1c5      	bne.n	1001282c <__aeabi_fsub+0xbc>
100128a0:	2500      	movs	r5, #0
100128a2:	027b      	lsls	r3, r7, #9
100128a4:	0a5b      	lsrs	r3, r3, #9
100128a6:	b2e4      	uxtb	r4, r4
100128a8:	e78f      	b.n	100127ca <__aeabi_fsub+0x5a>
100128aa:	3801      	subs	r0, #1
100128ac:	2800      	cmp	r0, #0
100128ae:	d0a4      	beq.n	100127fa <__aeabi_fsub+0x8a>
100128b0:	2cff      	cmp	r4, #255	; 0xff
100128b2:	d197      	bne.n	100127e4 <__aeabi_fsub+0x74>
100128b4:	e777      	b.n	100127a6 <__aeabi_fsub+0x36>
100128b6:	2a00      	cmp	r2, #0
100128b8:	d100      	bne.n	100128bc <__aeabi_fsub+0x14c>
100128ba:	e774      	b.n	100127a6 <__aeabi_fsub+0x36>
100128bc:	3801      	subs	r0, #1
100128be:	2800      	cmp	r0, #0
100128c0:	d0da      	beq.n	10012878 <__aeabi_fsub+0x108>
100128c2:	2cff      	cmp	r4, #255	; 0xff
100128c4:	d1cd      	bne.n	10012862 <__aeabi_fsub+0xf2>
100128c6:	e76e      	b.n	100127a6 <__aeabi_fsub+0x36>
100128c8:	2800      	cmp	r0, #0
100128ca:	d121      	bne.n	10012910 <__aeabi_fsub+0x1a0>
100128cc:	1c60      	adds	r0, r4, #1
100128ce:	b2c0      	uxtb	r0, r0
100128d0:	2801      	cmp	r0, #1
100128d2:	dd58      	ble.n	10012986 <__aeabi_fsub+0x216>
100128d4:	2780      	movs	r7, #128	; 0x80
100128d6:	1a9e      	subs	r6, r3, r2
100128d8:	04ff      	lsls	r7, r7, #19
100128da:	4037      	ands	r7, r6
100128dc:	d02f      	beq.n	1001293e <__aeabi_fsub+0x1ce>
100128de:	1ad6      	subs	r6, r2, r3
100128e0:	000d      	movs	r5, r1
100128e2:	e78f      	b.n	10012804 <__aeabi_fsub+0x94>
100128e4:	2301      	movs	r3, #1
100128e6:	401d      	ands	r5, r3
100128e8:	2300      	movs	r3, #0
100128ea:	e76e      	b.n	100127ca <__aeabi_fsub+0x5a>
100128ec:	4b62      	ldr	r3, [pc, #392]	; (10012a78 <__aeabi_fsub+0x308>)
100128ee:	1a24      	subs	r4, r4, r0
100128f0:	4033      	ands	r3, r6
100128f2:	e758      	b.n	100127a6 <__aeabi_fsub+0x36>
100128f4:	2800      	cmp	r0, #0
100128f6:	d151      	bne.n	1001299c <__aeabi_fsub+0x22c>
100128f8:	1c60      	adds	r0, r4, #1
100128fa:	b2c6      	uxtb	r6, r0
100128fc:	2e01      	cmp	r6, #1
100128fe:	dd33      	ble.n	10012968 <__aeabi_fsub+0x1f8>
10012900:	28ff      	cmp	r0, #255	; 0xff
10012902:	d02d      	beq.n	10012960 <__aeabi_fsub+0x1f0>
10012904:	189b      	adds	r3, r3, r2
10012906:	085b      	lsrs	r3, r3, #1
10012908:	0004      	movs	r4, r0
1001290a:	e74c      	b.n	100127a6 <__aeabi_fsub+0x36>
1001290c:	2201      	movs	r2, #1
1001290e:	e774      	b.n	100127fa <__aeabi_fsub+0x8a>
10012910:	2c00      	cmp	r4, #0
10012912:	d01a      	beq.n	1001294a <__aeabi_fsub+0x1da>
10012914:	2eff      	cmp	r6, #255	; 0xff
10012916:	d01f      	beq.n	10012958 <__aeabi_fsub+0x1e8>
10012918:	2480      	movs	r4, #128	; 0x80
1001291a:	04e4      	lsls	r4, r4, #19
1001291c:	4240      	negs	r0, r0
1001291e:	4323      	orrs	r3, r4
10012920:	281b      	cmp	r0, #27
10012922:	dd00      	ble.n	10012926 <__aeabi_fsub+0x1b6>
10012924:	e096      	b.n	10012a54 <__aeabi_fsub+0x2e4>
10012926:	001d      	movs	r5, r3
10012928:	2420      	movs	r4, #32
1001292a:	40c5      	lsrs	r5, r0
1001292c:	1a20      	subs	r0, r4, r0
1001292e:	4083      	lsls	r3, r0
10012930:	1e58      	subs	r0, r3, #1
10012932:	4183      	sbcs	r3, r0
10012934:	432b      	orrs	r3, r5
10012936:	1ad3      	subs	r3, r2, r3
10012938:	0034      	movs	r4, r6
1001293a:	000d      	movs	r5, r1
1001293c:	e75e      	b.n	100127fc <__aeabi_fsub+0x8c>
1001293e:	2e00      	cmp	r6, #0
10012940:	d000      	beq.n	10012944 <__aeabi_fsub+0x1d4>
10012942:	e75f      	b.n	10012804 <__aeabi_fsub+0x94>
10012944:	2500      	movs	r5, #0
10012946:	2400      	movs	r4, #0
10012948:	e7ab      	b.n	100128a2 <__aeabi_fsub+0x132>
1001294a:	2b00      	cmp	r3, #0
1001294c:	d044      	beq.n	100129d8 <__aeabi_fsub+0x268>
1001294e:	43c0      	mvns	r0, r0
10012950:	2800      	cmp	r0, #0
10012952:	d0f0      	beq.n	10012936 <__aeabi_fsub+0x1c6>
10012954:	2eff      	cmp	r6, #255	; 0xff
10012956:	d1e3      	bne.n	10012920 <__aeabi_fsub+0x1b0>
10012958:	0013      	movs	r3, r2
1001295a:	24ff      	movs	r4, #255	; 0xff
1001295c:	000d      	movs	r5, r1
1001295e:	e722      	b.n	100127a6 <__aeabi_fsub+0x36>
10012960:	000d      	movs	r5, r1
10012962:	24ff      	movs	r4, #255	; 0xff
10012964:	2300      	movs	r3, #0
10012966:	e730      	b.n	100127ca <__aeabi_fsub+0x5a>
10012968:	2c00      	cmp	r4, #0
1001296a:	d15d      	bne.n	10012a28 <__aeabi_fsub+0x2b8>
1001296c:	2b00      	cmp	r3, #0
1001296e:	d07d      	beq.n	10012a6c <__aeabi_fsub+0x2fc>
10012970:	2a00      	cmp	r2, #0
10012972:	d100      	bne.n	10012976 <__aeabi_fsub+0x206>
10012974:	e717      	b.n	100127a6 <__aeabi_fsub+0x36>
10012976:	189b      	adds	r3, r3, r2
10012978:	015a      	lsls	r2, r3, #5
1001297a:	d400      	bmi.n	1001297e <__aeabi_fsub+0x20e>
1001297c:	e756      	b.n	1001282c <__aeabi_fsub+0xbc>
1001297e:	4a3e      	ldr	r2, [pc, #248]	; (10012a78 <__aeabi_fsub+0x308>)
10012980:	0004      	movs	r4, r0
10012982:	4013      	ands	r3, r2
10012984:	e70f      	b.n	100127a6 <__aeabi_fsub+0x36>
10012986:	2c00      	cmp	r4, #0
10012988:	d11e      	bne.n	100129c8 <__aeabi_fsub+0x258>
1001298a:	2b00      	cmp	r3, #0
1001298c:	d12f      	bne.n	100129ee <__aeabi_fsub+0x27e>
1001298e:	2a00      	cmp	r2, #0
10012990:	d065      	beq.n	10012a5e <__aeabi_fsub+0x2ee>
10012992:	0013      	movs	r3, r2
10012994:	000d      	movs	r5, r1
10012996:	e706      	b.n	100127a6 <__aeabi_fsub+0x36>
10012998:	2201      	movs	r2, #1
1001299a:	e76d      	b.n	10012878 <__aeabi_fsub+0x108>
1001299c:	2c00      	cmp	r4, #0
1001299e:	d11f      	bne.n	100129e0 <__aeabi_fsub+0x270>
100129a0:	2b00      	cmp	r3, #0
100129a2:	d059      	beq.n	10012a58 <__aeabi_fsub+0x2e8>
100129a4:	43c0      	mvns	r0, r0
100129a6:	2800      	cmp	r0, #0
100129a8:	d00b      	beq.n	100129c2 <__aeabi_fsub+0x252>
100129aa:	2eff      	cmp	r6, #255	; 0xff
100129ac:	d04f      	beq.n	10012a4e <__aeabi_fsub+0x2de>
100129ae:	281b      	cmp	r0, #27
100129b0:	dc5e      	bgt.n	10012a70 <__aeabi_fsub+0x300>
100129b2:	001d      	movs	r5, r3
100129b4:	2420      	movs	r4, #32
100129b6:	40c5      	lsrs	r5, r0
100129b8:	1a20      	subs	r0, r4, r0
100129ba:	4083      	lsls	r3, r0
100129bc:	1e58      	subs	r0, r3, #1
100129be:	4183      	sbcs	r3, r0
100129c0:	432b      	orrs	r3, r5
100129c2:	189b      	adds	r3, r3, r2
100129c4:	0034      	movs	r4, r6
100129c6:	e758      	b.n	1001287a <__aeabi_fsub+0x10a>
100129c8:	2b00      	cmp	r3, #0
100129ca:	d11c      	bne.n	10012a06 <__aeabi_fsub+0x296>
100129cc:	2a00      	cmp	r2, #0
100129ce:	d049      	beq.n	10012a64 <__aeabi_fsub+0x2f4>
100129d0:	0013      	movs	r3, r2
100129d2:	000d      	movs	r5, r1
100129d4:	24ff      	movs	r4, #255	; 0xff
100129d6:	e6e6      	b.n	100127a6 <__aeabi_fsub+0x36>
100129d8:	0013      	movs	r3, r2
100129da:	0034      	movs	r4, r6
100129dc:	000d      	movs	r5, r1
100129de:	e6e2      	b.n	100127a6 <__aeabi_fsub+0x36>
100129e0:	2eff      	cmp	r6, #255	; 0xff
100129e2:	d034      	beq.n	10012a4e <__aeabi_fsub+0x2de>
100129e4:	2480      	movs	r4, #128	; 0x80
100129e6:	04e4      	lsls	r4, r4, #19
100129e8:	4240      	negs	r0, r0
100129ea:	4323      	orrs	r3, r4
100129ec:	e7df      	b.n	100129ae <__aeabi_fsub+0x23e>
100129ee:	2a00      	cmp	r2, #0
100129f0:	d100      	bne.n	100129f4 <__aeabi_fsub+0x284>
100129f2:	e6d8      	b.n	100127a6 <__aeabi_fsub+0x36>
100129f4:	2780      	movs	r7, #128	; 0x80
100129f6:	1a98      	subs	r0, r3, r2
100129f8:	04ff      	lsls	r7, r7, #19
100129fa:	4007      	ands	r7, r0
100129fc:	d100      	bne.n	10012a00 <__aeabi_fsub+0x290>
100129fe:	e74d      	b.n	1001289c <__aeabi_fsub+0x12c>
10012a00:	1ad3      	subs	r3, r2, r3
10012a02:	000d      	movs	r5, r1
10012a04:	e6cf      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a06:	24ff      	movs	r4, #255	; 0xff
10012a08:	2a00      	cmp	r2, #0
10012a0a:	d100      	bne.n	10012a0e <__aeabi_fsub+0x29e>
10012a0c:	e6cb      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a0e:	2080      	movs	r0, #128	; 0x80
10012a10:	08db      	lsrs	r3, r3, #3
10012a12:	03c0      	lsls	r0, r0, #15
10012a14:	4203      	tst	r3, r0
10012a16:	d004      	beq.n	10012a22 <__aeabi_fsub+0x2b2>
10012a18:	08d2      	lsrs	r2, r2, #3
10012a1a:	4202      	tst	r2, r0
10012a1c:	d101      	bne.n	10012a22 <__aeabi_fsub+0x2b2>
10012a1e:	0013      	movs	r3, r2
10012a20:	000d      	movs	r5, r1
10012a22:	00db      	lsls	r3, r3, #3
10012a24:	24ff      	movs	r4, #255	; 0xff
10012a26:	e6be      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a28:	2b00      	cmp	r3, #0
10012a2a:	d010      	beq.n	10012a4e <__aeabi_fsub+0x2de>
10012a2c:	24ff      	movs	r4, #255	; 0xff
10012a2e:	2a00      	cmp	r2, #0
10012a30:	d100      	bne.n	10012a34 <__aeabi_fsub+0x2c4>
10012a32:	e6b8      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a34:	2080      	movs	r0, #128	; 0x80
10012a36:	08db      	lsrs	r3, r3, #3
10012a38:	03c0      	lsls	r0, r0, #15
10012a3a:	4203      	tst	r3, r0
10012a3c:	d003      	beq.n	10012a46 <__aeabi_fsub+0x2d6>
10012a3e:	08d2      	lsrs	r2, r2, #3
10012a40:	4202      	tst	r2, r0
10012a42:	d100      	bne.n	10012a46 <__aeabi_fsub+0x2d6>
10012a44:	0013      	movs	r3, r2
10012a46:	00db      	lsls	r3, r3, #3
10012a48:	000d      	movs	r5, r1
10012a4a:	24ff      	movs	r4, #255	; 0xff
10012a4c:	e6ab      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a4e:	0013      	movs	r3, r2
10012a50:	24ff      	movs	r4, #255	; 0xff
10012a52:	e6a8      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a54:	2301      	movs	r3, #1
10012a56:	e76e      	b.n	10012936 <__aeabi_fsub+0x1c6>
10012a58:	0013      	movs	r3, r2
10012a5a:	0034      	movs	r4, r6
10012a5c:	e6a3      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a5e:	2700      	movs	r7, #0
10012a60:	2500      	movs	r5, #0
10012a62:	e71e      	b.n	100128a2 <__aeabi_fsub+0x132>
10012a64:	2780      	movs	r7, #128	; 0x80
10012a66:	2500      	movs	r5, #0
10012a68:	03ff      	lsls	r7, r7, #15
10012a6a:	e6e9      	b.n	10012840 <__aeabi_fsub+0xd0>
10012a6c:	0013      	movs	r3, r2
10012a6e:	e69a      	b.n	100127a6 <__aeabi_fsub+0x36>
10012a70:	2301      	movs	r3, #1
10012a72:	e7a6      	b.n	100129c2 <__aeabi_fsub+0x252>
10012a74:	7dffffff 	.word	0x7dffffff
10012a78:	fbffffff 	.word	0xfbffffff

10012a7c <__aeabi_f2iz>:
10012a7c:	0243      	lsls	r3, r0, #9
10012a7e:	0a59      	lsrs	r1, r3, #9
10012a80:	0043      	lsls	r3, r0, #1
10012a82:	0fc2      	lsrs	r2, r0, #31
10012a84:	0e1b      	lsrs	r3, r3, #24
10012a86:	2000      	movs	r0, #0
10012a88:	2b7e      	cmp	r3, #126	; 0x7e
10012a8a:	dd0e      	ble.n	10012aaa <__aeabi_f2iz+0x2e>
10012a8c:	2b9d      	cmp	r3, #157	; 0x9d
10012a8e:	dc0d      	bgt.n	10012aac <__aeabi_f2iz+0x30>
10012a90:	2080      	movs	r0, #128	; 0x80
10012a92:	0400      	lsls	r0, r0, #16
10012a94:	4301      	orrs	r1, r0
10012a96:	2b95      	cmp	r3, #149	; 0x95
10012a98:	dc0b      	bgt.n	10012ab2 <__aeabi_f2iz+0x36>
10012a9a:	2096      	movs	r0, #150	; 0x96
10012a9c:	1ac3      	subs	r3, r0, r3
10012a9e:	40d9      	lsrs	r1, r3
10012aa0:	000b      	movs	r3, r1
10012aa2:	4258      	negs	r0, r3
10012aa4:	2a00      	cmp	r2, #0
10012aa6:	d100      	bne.n	10012aaa <__aeabi_f2iz+0x2e>
10012aa8:	0018      	movs	r0, r3
10012aaa:	4770      	bx	lr
10012aac:	4b03      	ldr	r3, [pc, #12]	; (10012abc <__aeabi_f2iz+0x40>)
10012aae:	18d0      	adds	r0, r2, r3
10012ab0:	e7fb      	b.n	10012aaa <__aeabi_f2iz+0x2e>
10012ab2:	3b96      	subs	r3, #150	; 0x96
10012ab4:	4099      	lsls	r1, r3
10012ab6:	000b      	movs	r3, r1
10012ab8:	e7f3      	b.n	10012aa2 <__aeabi_f2iz+0x26>
10012aba:	46c0      	nop			; (mov r8, r8)
10012abc:	7fffffff 	.word	0x7fffffff

10012ac0 <__aeabi_i2f>:
10012ac0:	b570      	push	{r4, r5, r6, lr}
10012ac2:	2800      	cmp	r0, #0
10012ac4:	d030      	beq.n	10012b28 <__aeabi_i2f+0x68>
10012ac6:	17c3      	asrs	r3, r0, #31
10012ac8:	18c5      	adds	r5, r0, r3
10012aca:	405d      	eors	r5, r3
10012acc:	0fc4      	lsrs	r4, r0, #31
10012ace:	0028      	movs	r0, r5
10012ad0:	f001 ff4a 	bl	10014968 <__clzsi2>
10012ad4:	239e      	movs	r3, #158	; 0x9e
10012ad6:	1a1b      	subs	r3, r3, r0
10012ad8:	2b96      	cmp	r3, #150	; 0x96
10012ada:	dc0d      	bgt.n	10012af8 <__aeabi_i2f+0x38>
10012adc:	2296      	movs	r2, #150	; 0x96
10012ade:	1ad2      	subs	r2, r2, r3
10012ae0:	4095      	lsls	r5, r2
10012ae2:	026a      	lsls	r2, r5, #9
10012ae4:	0a52      	lsrs	r2, r2, #9
10012ae6:	b2d8      	uxtb	r0, r3
10012ae8:	0252      	lsls	r2, r2, #9
10012aea:	05c0      	lsls	r0, r0, #23
10012aec:	0a52      	lsrs	r2, r2, #9
10012aee:	07e4      	lsls	r4, r4, #31
10012af0:	4302      	orrs	r2, r0
10012af2:	4322      	orrs	r2, r4
10012af4:	0010      	movs	r0, r2
10012af6:	bd70      	pop	{r4, r5, r6, pc}
10012af8:	2b99      	cmp	r3, #153	; 0x99
10012afa:	dc19      	bgt.n	10012b30 <__aeabi_i2f+0x70>
10012afc:	2299      	movs	r2, #153	; 0x99
10012afe:	1ad2      	subs	r2, r2, r3
10012b00:	4095      	lsls	r5, r2
10012b02:	4a12      	ldr	r2, [pc, #72]	; (10012b4c <__aeabi_i2f+0x8c>)
10012b04:	402a      	ands	r2, r5
10012b06:	0769      	lsls	r1, r5, #29
10012b08:	d004      	beq.n	10012b14 <__aeabi_i2f+0x54>
10012b0a:	210f      	movs	r1, #15
10012b0c:	400d      	ands	r5, r1
10012b0e:	2d04      	cmp	r5, #4
10012b10:	d000      	beq.n	10012b14 <__aeabi_i2f+0x54>
10012b12:	3204      	adds	r2, #4
10012b14:	0151      	lsls	r1, r2, #5
10012b16:	d503      	bpl.n	10012b20 <__aeabi_i2f+0x60>
10012b18:	4b0c      	ldr	r3, [pc, #48]	; (10012b4c <__aeabi_i2f+0x8c>)
10012b1a:	401a      	ands	r2, r3
10012b1c:	239f      	movs	r3, #159	; 0x9f
10012b1e:	1a1b      	subs	r3, r3, r0
10012b20:	0192      	lsls	r2, r2, #6
10012b22:	0a52      	lsrs	r2, r2, #9
10012b24:	b2d8      	uxtb	r0, r3
10012b26:	e7df      	b.n	10012ae8 <__aeabi_i2f+0x28>
10012b28:	2400      	movs	r4, #0
10012b2a:	2000      	movs	r0, #0
10012b2c:	2200      	movs	r2, #0
10012b2e:	e7db      	b.n	10012ae8 <__aeabi_i2f+0x28>
10012b30:	2205      	movs	r2, #5
10012b32:	002e      	movs	r6, r5
10012b34:	1a12      	subs	r2, r2, r0
10012b36:	21b9      	movs	r1, #185	; 0xb9
10012b38:	40d6      	lsrs	r6, r2
10012b3a:	002a      	movs	r2, r5
10012b3c:	1ac9      	subs	r1, r1, r3
10012b3e:	408a      	lsls	r2, r1
10012b40:	1e55      	subs	r5, r2, #1
10012b42:	41aa      	sbcs	r2, r5
10012b44:	0035      	movs	r5, r6
10012b46:	4315      	orrs	r5, r2
10012b48:	e7db      	b.n	10012b02 <__aeabi_i2f+0x42>
10012b4a:	46c0      	nop			; (mov r8, r8)
10012b4c:	fbffffff 	.word	0xfbffffff

10012b50 <__aeabi_ui2f>:
10012b50:	b570      	push	{r4, r5, r6, lr}
10012b52:	1e04      	subs	r4, r0, #0
10012b54:	d028      	beq.n	10012ba8 <__aeabi_ui2f+0x58>
10012b56:	f001 ff07 	bl	10014968 <__clzsi2>
10012b5a:	239e      	movs	r3, #158	; 0x9e
10012b5c:	1a1b      	subs	r3, r3, r0
10012b5e:	2b96      	cmp	r3, #150	; 0x96
10012b60:	dc0a      	bgt.n	10012b78 <__aeabi_ui2f+0x28>
10012b62:	2296      	movs	r2, #150	; 0x96
10012b64:	1ad2      	subs	r2, r2, r3
10012b66:	4094      	lsls	r4, r2
10012b68:	0262      	lsls	r2, r4, #9
10012b6a:	0a52      	lsrs	r2, r2, #9
10012b6c:	b2d8      	uxtb	r0, r3
10012b6e:	0252      	lsls	r2, r2, #9
10012b70:	0a52      	lsrs	r2, r2, #9
10012b72:	05c0      	lsls	r0, r0, #23
10012b74:	4310      	orrs	r0, r2
10012b76:	bd70      	pop	{r4, r5, r6, pc}
10012b78:	2b99      	cmp	r3, #153	; 0x99
10012b7a:	dc18      	bgt.n	10012bae <__aeabi_ui2f+0x5e>
10012b7c:	2299      	movs	r2, #153	; 0x99
10012b7e:	1ad2      	subs	r2, r2, r3
10012b80:	4094      	lsls	r4, r2
10012b82:	4a11      	ldr	r2, [pc, #68]	; (10012bc8 <__aeabi_ui2f+0x78>)
10012b84:	4022      	ands	r2, r4
10012b86:	0761      	lsls	r1, r4, #29
10012b88:	d004      	beq.n	10012b94 <__aeabi_ui2f+0x44>
10012b8a:	210f      	movs	r1, #15
10012b8c:	400c      	ands	r4, r1
10012b8e:	2c04      	cmp	r4, #4
10012b90:	d000      	beq.n	10012b94 <__aeabi_ui2f+0x44>
10012b92:	3204      	adds	r2, #4
10012b94:	0151      	lsls	r1, r2, #5
10012b96:	d503      	bpl.n	10012ba0 <__aeabi_ui2f+0x50>
10012b98:	4b0b      	ldr	r3, [pc, #44]	; (10012bc8 <__aeabi_ui2f+0x78>)
10012b9a:	401a      	ands	r2, r3
10012b9c:	239f      	movs	r3, #159	; 0x9f
10012b9e:	1a1b      	subs	r3, r3, r0
10012ba0:	0192      	lsls	r2, r2, #6
10012ba2:	0a52      	lsrs	r2, r2, #9
10012ba4:	b2d8      	uxtb	r0, r3
10012ba6:	e7e2      	b.n	10012b6e <__aeabi_ui2f+0x1e>
10012ba8:	2000      	movs	r0, #0
10012baa:	2200      	movs	r2, #0
10012bac:	e7df      	b.n	10012b6e <__aeabi_ui2f+0x1e>
10012bae:	2205      	movs	r2, #5
10012bb0:	0025      	movs	r5, r4
10012bb2:	1a12      	subs	r2, r2, r0
10012bb4:	21b9      	movs	r1, #185	; 0xb9
10012bb6:	40d5      	lsrs	r5, r2
10012bb8:	0022      	movs	r2, r4
10012bba:	1ac9      	subs	r1, r1, r3
10012bbc:	408a      	lsls	r2, r1
10012bbe:	1e54      	subs	r4, r2, #1
10012bc0:	41a2      	sbcs	r2, r4
10012bc2:	002c      	movs	r4, r5
10012bc4:	4314      	orrs	r4, r2
10012bc6:	e7dc      	b.n	10012b82 <__aeabi_ui2f+0x32>
10012bc8:	fbffffff 	.word	0xfbffffff

10012bcc <__aeabi_dadd>:
10012bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012bce:	4656      	mov	r6, sl
10012bd0:	465f      	mov	r7, fp
10012bd2:	464d      	mov	r5, r9
10012bd4:	4644      	mov	r4, r8
10012bd6:	b4f0      	push	{r4, r5, r6, r7}
10012bd8:	000f      	movs	r7, r1
10012bda:	0ffd      	lsrs	r5, r7, #31
10012bdc:	46aa      	mov	sl, r5
10012bde:	0309      	lsls	r1, r1, #12
10012be0:	007c      	lsls	r4, r7, #1
10012be2:	002e      	movs	r6, r5
10012be4:	005f      	lsls	r7, r3, #1
10012be6:	0f45      	lsrs	r5, r0, #29
10012be8:	0a49      	lsrs	r1, r1, #9
10012bea:	0d7f      	lsrs	r7, r7, #21
10012bec:	4329      	orrs	r1, r5
10012bee:	00c5      	lsls	r5, r0, #3
10012bf0:	0318      	lsls	r0, r3, #12
10012bf2:	46bc      	mov	ip, r7
10012bf4:	0a40      	lsrs	r0, r0, #9
10012bf6:	0f57      	lsrs	r7, r2, #29
10012bf8:	0d64      	lsrs	r4, r4, #21
10012bfa:	0fdb      	lsrs	r3, r3, #31
10012bfc:	4338      	orrs	r0, r7
10012bfe:	00d2      	lsls	r2, r2, #3
10012c00:	459a      	cmp	sl, r3
10012c02:	d100      	bne.n	10012c06 <__aeabi_dadd+0x3a>
10012c04:	e0aa      	b.n	10012d5c <__aeabi_dadd+0x190>
10012c06:	4666      	mov	r6, ip
10012c08:	1ba6      	subs	r6, r4, r6
10012c0a:	2e00      	cmp	r6, #0
10012c0c:	dc00      	bgt.n	10012c10 <__aeabi_dadd+0x44>
10012c0e:	e0ff      	b.n	10012e10 <__aeabi_dadd+0x244>
10012c10:	4663      	mov	r3, ip
10012c12:	2b00      	cmp	r3, #0
10012c14:	d139      	bne.n	10012c8a <__aeabi_dadd+0xbe>
10012c16:	0003      	movs	r3, r0
10012c18:	4313      	orrs	r3, r2
10012c1a:	d000      	beq.n	10012c1e <__aeabi_dadd+0x52>
10012c1c:	e0d9      	b.n	10012dd2 <__aeabi_dadd+0x206>
10012c1e:	076b      	lsls	r3, r5, #29
10012c20:	d009      	beq.n	10012c36 <__aeabi_dadd+0x6a>
10012c22:	230f      	movs	r3, #15
10012c24:	402b      	ands	r3, r5
10012c26:	2b04      	cmp	r3, #4
10012c28:	d005      	beq.n	10012c36 <__aeabi_dadd+0x6a>
10012c2a:	1d2b      	adds	r3, r5, #4
10012c2c:	42ab      	cmp	r3, r5
10012c2e:	41ad      	sbcs	r5, r5
10012c30:	426d      	negs	r5, r5
10012c32:	1949      	adds	r1, r1, r5
10012c34:	001d      	movs	r5, r3
10012c36:	020b      	lsls	r3, r1, #8
10012c38:	d400      	bmi.n	10012c3c <__aeabi_dadd+0x70>
10012c3a:	e082      	b.n	10012d42 <__aeabi_dadd+0x176>
10012c3c:	4bca      	ldr	r3, [pc, #808]	; (10012f68 <__aeabi_dadd+0x39c>)
10012c3e:	3401      	adds	r4, #1
10012c40:	429c      	cmp	r4, r3
10012c42:	d100      	bne.n	10012c46 <__aeabi_dadd+0x7a>
10012c44:	e0fe      	b.n	10012e44 <__aeabi_dadd+0x278>
10012c46:	000a      	movs	r2, r1
10012c48:	4656      	mov	r6, sl
10012c4a:	4bc8      	ldr	r3, [pc, #800]	; (10012f6c <__aeabi_dadd+0x3a0>)
10012c4c:	08ed      	lsrs	r5, r5, #3
10012c4e:	401a      	ands	r2, r3
10012c50:	0750      	lsls	r0, r2, #29
10012c52:	0564      	lsls	r4, r4, #21
10012c54:	0252      	lsls	r2, r2, #9
10012c56:	4305      	orrs	r5, r0
10012c58:	0b12      	lsrs	r2, r2, #12
10012c5a:	0d64      	lsrs	r4, r4, #21
10012c5c:	2100      	movs	r1, #0
10012c5e:	0312      	lsls	r2, r2, #12
10012c60:	0d0b      	lsrs	r3, r1, #20
10012c62:	051b      	lsls	r3, r3, #20
10012c64:	0564      	lsls	r4, r4, #21
10012c66:	0b12      	lsrs	r2, r2, #12
10012c68:	431a      	orrs	r2, r3
10012c6a:	0863      	lsrs	r3, r4, #1
10012c6c:	4cc0      	ldr	r4, [pc, #768]	; (10012f70 <__aeabi_dadd+0x3a4>)
10012c6e:	07f6      	lsls	r6, r6, #31
10012c70:	4014      	ands	r4, r2
10012c72:	431c      	orrs	r4, r3
10012c74:	0064      	lsls	r4, r4, #1
10012c76:	0864      	lsrs	r4, r4, #1
10012c78:	4334      	orrs	r4, r6
10012c7a:	0028      	movs	r0, r5
10012c7c:	0021      	movs	r1, r4
10012c7e:	bc3c      	pop	{r2, r3, r4, r5}
10012c80:	4690      	mov	r8, r2
10012c82:	4699      	mov	r9, r3
10012c84:	46a2      	mov	sl, r4
10012c86:	46ab      	mov	fp, r5
10012c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012c8a:	4bb7      	ldr	r3, [pc, #732]	; (10012f68 <__aeabi_dadd+0x39c>)
10012c8c:	429c      	cmp	r4, r3
10012c8e:	d0c6      	beq.n	10012c1e <__aeabi_dadd+0x52>
10012c90:	2380      	movs	r3, #128	; 0x80
10012c92:	041b      	lsls	r3, r3, #16
10012c94:	4318      	orrs	r0, r3
10012c96:	2e38      	cmp	r6, #56	; 0x38
10012c98:	dd00      	ble.n	10012c9c <__aeabi_dadd+0xd0>
10012c9a:	e0eb      	b.n	10012e74 <__aeabi_dadd+0x2a8>
10012c9c:	2e1f      	cmp	r6, #31
10012c9e:	dd00      	ble.n	10012ca2 <__aeabi_dadd+0xd6>
10012ca0:	e11e      	b.n	10012ee0 <__aeabi_dadd+0x314>
10012ca2:	2320      	movs	r3, #32
10012ca4:	1b9b      	subs	r3, r3, r6
10012ca6:	469c      	mov	ip, r3
10012ca8:	0003      	movs	r3, r0
10012caa:	4667      	mov	r7, ip
10012cac:	40bb      	lsls	r3, r7
10012cae:	4698      	mov	r8, r3
10012cb0:	0013      	movs	r3, r2
10012cb2:	4647      	mov	r7, r8
10012cb4:	40f3      	lsrs	r3, r6
10012cb6:	433b      	orrs	r3, r7
10012cb8:	4667      	mov	r7, ip
10012cba:	40ba      	lsls	r2, r7
10012cbc:	1e57      	subs	r7, r2, #1
10012cbe:	41ba      	sbcs	r2, r7
10012cc0:	4313      	orrs	r3, r2
10012cc2:	0002      	movs	r2, r0
10012cc4:	40f2      	lsrs	r2, r6
10012cc6:	1aeb      	subs	r3, r5, r3
10012cc8:	429d      	cmp	r5, r3
10012cca:	41b6      	sbcs	r6, r6
10012ccc:	001d      	movs	r5, r3
10012cce:	1a8a      	subs	r2, r1, r2
10012cd0:	4276      	negs	r6, r6
10012cd2:	1b91      	subs	r1, r2, r6
10012cd4:	020b      	lsls	r3, r1, #8
10012cd6:	d531      	bpl.n	10012d3c <__aeabi_dadd+0x170>
10012cd8:	024a      	lsls	r2, r1, #9
10012cda:	0a56      	lsrs	r6, r2, #9
10012cdc:	2e00      	cmp	r6, #0
10012cde:	d100      	bne.n	10012ce2 <__aeabi_dadd+0x116>
10012ce0:	e0b4      	b.n	10012e4c <__aeabi_dadd+0x280>
10012ce2:	0030      	movs	r0, r6
10012ce4:	f001 fe40 	bl	10014968 <__clzsi2>
10012ce8:	0003      	movs	r3, r0
10012cea:	3b08      	subs	r3, #8
10012cec:	2b1f      	cmp	r3, #31
10012cee:	dd00      	ble.n	10012cf2 <__aeabi_dadd+0x126>
10012cf0:	e0b5      	b.n	10012e5e <__aeabi_dadd+0x292>
10012cf2:	2220      	movs	r2, #32
10012cf4:	0029      	movs	r1, r5
10012cf6:	1ad2      	subs	r2, r2, r3
10012cf8:	40d1      	lsrs	r1, r2
10012cfa:	409e      	lsls	r6, r3
10012cfc:	000a      	movs	r2, r1
10012cfe:	409d      	lsls	r5, r3
10012d00:	4332      	orrs	r2, r6
10012d02:	429c      	cmp	r4, r3
10012d04:	dd00      	ble.n	10012d08 <__aeabi_dadd+0x13c>
10012d06:	e0b1      	b.n	10012e6c <__aeabi_dadd+0x2a0>
10012d08:	1b1c      	subs	r4, r3, r4
10012d0a:	1c63      	adds	r3, r4, #1
10012d0c:	2b1f      	cmp	r3, #31
10012d0e:	dd00      	ble.n	10012d12 <__aeabi_dadd+0x146>
10012d10:	e0d5      	b.n	10012ebe <__aeabi_dadd+0x2f2>
10012d12:	2120      	movs	r1, #32
10012d14:	0014      	movs	r4, r2
10012d16:	0028      	movs	r0, r5
10012d18:	1ac9      	subs	r1, r1, r3
10012d1a:	408c      	lsls	r4, r1
10012d1c:	40d8      	lsrs	r0, r3
10012d1e:	408d      	lsls	r5, r1
10012d20:	4304      	orrs	r4, r0
10012d22:	40da      	lsrs	r2, r3
10012d24:	1e68      	subs	r0, r5, #1
10012d26:	4185      	sbcs	r5, r0
10012d28:	0011      	movs	r1, r2
10012d2a:	4325      	orrs	r5, r4
10012d2c:	2400      	movs	r4, #0
10012d2e:	e776      	b.n	10012c1e <__aeabi_dadd+0x52>
10012d30:	4641      	mov	r1, r8
10012d32:	4331      	orrs	r1, r6
10012d34:	d100      	bne.n	10012d38 <__aeabi_dadd+0x16c>
10012d36:	e234      	b.n	100131a2 <__aeabi_dadd+0x5d6>
10012d38:	0031      	movs	r1, r6
10012d3a:	4645      	mov	r5, r8
10012d3c:	076b      	lsls	r3, r5, #29
10012d3e:	d000      	beq.n	10012d42 <__aeabi_dadd+0x176>
10012d40:	e76f      	b.n	10012c22 <__aeabi_dadd+0x56>
10012d42:	4656      	mov	r6, sl
10012d44:	0748      	lsls	r0, r1, #29
10012d46:	08ed      	lsrs	r5, r5, #3
10012d48:	08c9      	lsrs	r1, r1, #3
10012d4a:	4305      	orrs	r5, r0
10012d4c:	4b86      	ldr	r3, [pc, #536]	; (10012f68 <__aeabi_dadd+0x39c>)
10012d4e:	429c      	cmp	r4, r3
10012d50:	d035      	beq.n	10012dbe <__aeabi_dadd+0x1f2>
10012d52:	030a      	lsls	r2, r1, #12
10012d54:	0564      	lsls	r4, r4, #21
10012d56:	0b12      	lsrs	r2, r2, #12
10012d58:	0d64      	lsrs	r4, r4, #21
10012d5a:	e77f      	b.n	10012c5c <__aeabi_dadd+0x90>
10012d5c:	4663      	mov	r3, ip
10012d5e:	1ae3      	subs	r3, r4, r3
10012d60:	469b      	mov	fp, r3
10012d62:	2b00      	cmp	r3, #0
10012d64:	dc00      	bgt.n	10012d68 <__aeabi_dadd+0x19c>
10012d66:	e08b      	b.n	10012e80 <__aeabi_dadd+0x2b4>
10012d68:	4667      	mov	r7, ip
10012d6a:	2f00      	cmp	r7, #0
10012d6c:	d03c      	beq.n	10012de8 <__aeabi_dadd+0x21c>
10012d6e:	4f7e      	ldr	r7, [pc, #504]	; (10012f68 <__aeabi_dadd+0x39c>)
10012d70:	42bc      	cmp	r4, r7
10012d72:	d100      	bne.n	10012d76 <__aeabi_dadd+0x1aa>
10012d74:	e753      	b.n	10012c1e <__aeabi_dadd+0x52>
10012d76:	2780      	movs	r7, #128	; 0x80
10012d78:	043f      	lsls	r7, r7, #16
10012d7a:	4338      	orrs	r0, r7
10012d7c:	465b      	mov	r3, fp
10012d7e:	2b38      	cmp	r3, #56	; 0x38
10012d80:	dc00      	bgt.n	10012d84 <__aeabi_dadd+0x1b8>
10012d82:	e0f7      	b.n	10012f74 <__aeabi_dadd+0x3a8>
10012d84:	4302      	orrs	r2, r0
10012d86:	1e50      	subs	r0, r2, #1
10012d88:	4182      	sbcs	r2, r0
10012d8a:	2000      	movs	r0, #0
10012d8c:	b2d2      	uxtb	r2, r2
10012d8e:	1953      	adds	r3, r2, r5
10012d90:	1842      	adds	r2, r0, r1
10012d92:	42ab      	cmp	r3, r5
10012d94:	4189      	sbcs	r1, r1
10012d96:	001d      	movs	r5, r3
10012d98:	4249      	negs	r1, r1
10012d9a:	1889      	adds	r1, r1, r2
10012d9c:	020b      	lsls	r3, r1, #8
10012d9e:	d5cd      	bpl.n	10012d3c <__aeabi_dadd+0x170>
10012da0:	4b71      	ldr	r3, [pc, #452]	; (10012f68 <__aeabi_dadd+0x39c>)
10012da2:	3401      	adds	r4, #1
10012da4:	429c      	cmp	r4, r3
10012da6:	d100      	bne.n	10012daa <__aeabi_dadd+0x1de>
10012da8:	e13d      	b.n	10013026 <__aeabi_dadd+0x45a>
10012daa:	2001      	movs	r0, #1
10012dac:	4a6f      	ldr	r2, [pc, #444]	; (10012f6c <__aeabi_dadd+0x3a0>)
10012dae:	086b      	lsrs	r3, r5, #1
10012db0:	400a      	ands	r2, r1
10012db2:	4028      	ands	r0, r5
10012db4:	4318      	orrs	r0, r3
10012db6:	07d5      	lsls	r5, r2, #31
10012db8:	4305      	orrs	r5, r0
10012dba:	0851      	lsrs	r1, r2, #1
10012dbc:	e72f      	b.n	10012c1e <__aeabi_dadd+0x52>
10012dbe:	002b      	movs	r3, r5
10012dc0:	430b      	orrs	r3, r1
10012dc2:	d100      	bne.n	10012dc6 <__aeabi_dadd+0x1fa>
10012dc4:	e1cb      	b.n	1001315e <__aeabi_dadd+0x592>
10012dc6:	2380      	movs	r3, #128	; 0x80
10012dc8:	031b      	lsls	r3, r3, #12
10012dca:	430b      	orrs	r3, r1
10012dcc:	031a      	lsls	r2, r3, #12
10012dce:	0b12      	lsrs	r2, r2, #12
10012dd0:	e744      	b.n	10012c5c <__aeabi_dadd+0x90>
10012dd2:	3e01      	subs	r6, #1
10012dd4:	2e00      	cmp	r6, #0
10012dd6:	d16d      	bne.n	10012eb4 <__aeabi_dadd+0x2e8>
10012dd8:	1aae      	subs	r6, r5, r2
10012dda:	42b5      	cmp	r5, r6
10012ddc:	419b      	sbcs	r3, r3
10012dde:	1a09      	subs	r1, r1, r0
10012de0:	425b      	negs	r3, r3
10012de2:	1ac9      	subs	r1, r1, r3
10012de4:	0035      	movs	r5, r6
10012de6:	e775      	b.n	10012cd4 <__aeabi_dadd+0x108>
10012de8:	0007      	movs	r7, r0
10012dea:	4317      	orrs	r7, r2
10012dec:	d100      	bne.n	10012df0 <__aeabi_dadd+0x224>
10012dee:	e716      	b.n	10012c1e <__aeabi_dadd+0x52>
10012df0:	2301      	movs	r3, #1
10012df2:	425b      	negs	r3, r3
10012df4:	469c      	mov	ip, r3
10012df6:	44e3      	add	fp, ip
10012df8:	465b      	mov	r3, fp
10012dfa:	2b00      	cmp	r3, #0
10012dfc:	d000      	beq.n	10012e00 <__aeabi_dadd+0x234>
10012dfe:	e0e0      	b.n	10012fc2 <__aeabi_dadd+0x3f6>
10012e00:	18aa      	adds	r2, r5, r2
10012e02:	42aa      	cmp	r2, r5
10012e04:	419b      	sbcs	r3, r3
10012e06:	1809      	adds	r1, r1, r0
10012e08:	425b      	negs	r3, r3
10012e0a:	1859      	adds	r1, r3, r1
10012e0c:	0015      	movs	r5, r2
10012e0e:	e7c5      	b.n	10012d9c <__aeabi_dadd+0x1d0>
10012e10:	2e00      	cmp	r6, #0
10012e12:	d175      	bne.n	10012f00 <__aeabi_dadd+0x334>
10012e14:	1c66      	adds	r6, r4, #1
10012e16:	0576      	lsls	r6, r6, #21
10012e18:	0d76      	lsrs	r6, r6, #21
10012e1a:	2e01      	cmp	r6, #1
10012e1c:	dc00      	bgt.n	10012e20 <__aeabi_dadd+0x254>
10012e1e:	e0f3      	b.n	10013008 <__aeabi_dadd+0x43c>
10012e20:	1aae      	subs	r6, r5, r2
10012e22:	46b0      	mov	r8, r6
10012e24:	4545      	cmp	r5, r8
10012e26:	41bf      	sbcs	r7, r7
10012e28:	1a0e      	subs	r6, r1, r0
10012e2a:	427f      	negs	r7, r7
10012e2c:	1bf6      	subs	r6, r6, r7
10012e2e:	0237      	lsls	r7, r6, #8
10012e30:	d400      	bmi.n	10012e34 <__aeabi_dadd+0x268>
10012e32:	e08f      	b.n	10012f54 <__aeabi_dadd+0x388>
10012e34:	1b55      	subs	r5, r2, r5
10012e36:	42aa      	cmp	r2, r5
10012e38:	41b6      	sbcs	r6, r6
10012e3a:	1a41      	subs	r1, r0, r1
10012e3c:	4276      	negs	r6, r6
10012e3e:	1b8e      	subs	r6, r1, r6
10012e40:	469a      	mov	sl, r3
10012e42:	e74b      	b.n	10012cdc <__aeabi_dadd+0x110>
10012e44:	4656      	mov	r6, sl
10012e46:	2200      	movs	r2, #0
10012e48:	2500      	movs	r5, #0
10012e4a:	e707      	b.n	10012c5c <__aeabi_dadd+0x90>
10012e4c:	0028      	movs	r0, r5
10012e4e:	f001 fd8b 	bl	10014968 <__clzsi2>
10012e52:	3020      	adds	r0, #32
10012e54:	0003      	movs	r3, r0
10012e56:	3b08      	subs	r3, #8
10012e58:	2b1f      	cmp	r3, #31
10012e5a:	dc00      	bgt.n	10012e5e <__aeabi_dadd+0x292>
10012e5c:	e749      	b.n	10012cf2 <__aeabi_dadd+0x126>
10012e5e:	002a      	movs	r2, r5
10012e60:	3828      	subs	r0, #40	; 0x28
10012e62:	4082      	lsls	r2, r0
10012e64:	2500      	movs	r5, #0
10012e66:	429c      	cmp	r4, r3
10012e68:	dc00      	bgt.n	10012e6c <__aeabi_dadd+0x2a0>
10012e6a:	e74d      	b.n	10012d08 <__aeabi_dadd+0x13c>
10012e6c:	493f      	ldr	r1, [pc, #252]	; (10012f6c <__aeabi_dadd+0x3a0>)
10012e6e:	1ae4      	subs	r4, r4, r3
10012e70:	4011      	ands	r1, r2
10012e72:	e6d4      	b.n	10012c1e <__aeabi_dadd+0x52>
10012e74:	4302      	orrs	r2, r0
10012e76:	1e50      	subs	r0, r2, #1
10012e78:	4182      	sbcs	r2, r0
10012e7a:	b2d3      	uxtb	r3, r2
10012e7c:	2200      	movs	r2, #0
10012e7e:	e722      	b.n	10012cc6 <__aeabi_dadd+0xfa>
10012e80:	2b00      	cmp	r3, #0
10012e82:	d000      	beq.n	10012e86 <__aeabi_dadd+0x2ba>
10012e84:	e0f3      	b.n	1001306e <__aeabi_dadd+0x4a2>
10012e86:	1c63      	adds	r3, r4, #1
10012e88:	469c      	mov	ip, r3
10012e8a:	055b      	lsls	r3, r3, #21
10012e8c:	0d5b      	lsrs	r3, r3, #21
10012e8e:	2b01      	cmp	r3, #1
10012e90:	dc00      	bgt.n	10012e94 <__aeabi_dadd+0x2c8>
10012e92:	e09f      	b.n	10012fd4 <__aeabi_dadd+0x408>
10012e94:	4b34      	ldr	r3, [pc, #208]	; (10012f68 <__aeabi_dadd+0x39c>)
10012e96:	459c      	cmp	ip, r3
10012e98:	d100      	bne.n	10012e9c <__aeabi_dadd+0x2d0>
10012e9a:	e0c3      	b.n	10013024 <__aeabi_dadd+0x458>
10012e9c:	18aa      	adds	r2, r5, r2
10012e9e:	1809      	adds	r1, r1, r0
10012ea0:	42aa      	cmp	r2, r5
10012ea2:	4180      	sbcs	r0, r0
10012ea4:	4240      	negs	r0, r0
10012ea6:	1841      	adds	r1, r0, r1
10012ea8:	07cd      	lsls	r5, r1, #31
10012eaa:	0852      	lsrs	r2, r2, #1
10012eac:	4315      	orrs	r5, r2
10012eae:	0849      	lsrs	r1, r1, #1
10012eb0:	4664      	mov	r4, ip
10012eb2:	e6b4      	b.n	10012c1e <__aeabi_dadd+0x52>
10012eb4:	4b2c      	ldr	r3, [pc, #176]	; (10012f68 <__aeabi_dadd+0x39c>)
10012eb6:	429c      	cmp	r4, r3
10012eb8:	d000      	beq.n	10012ebc <__aeabi_dadd+0x2f0>
10012eba:	e6ec      	b.n	10012c96 <__aeabi_dadd+0xca>
10012ebc:	e6af      	b.n	10012c1e <__aeabi_dadd+0x52>
10012ebe:	0011      	movs	r1, r2
10012ec0:	3c1f      	subs	r4, #31
10012ec2:	40e1      	lsrs	r1, r4
10012ec4:	000c      	movs	r4, r1
10012ec6:	2b20      	cmp	r3, #32
10012ec8:	d100      	bne.n	10012ecc <__aeabi_dadd+0x300>
10012eca:	e07f      	b.n	10012fcc <__aeabi_dadd+0x400>
10012ecc:	2140      	movs	r1, #64	; 0x40
10012ece:	1acb      	subs	r3, r1, r3
10012ed0:	409a      	lsls	r2, r3
10012ed2:	4315      	orrs	r5, r2
10012ed4:	1e6a      	subs	r2, r5, #1
10012ed6:	4195      	sbcs	r5, r2
10012ed8:	2100      	movs	r1, #0
10012eda:	4325      	orrs	r5, r4
10012edc:	2400      	movs	r4, #0
10012ede:	e72d      	b.n	10012d3c <__aeabi_dadd+0x170>
10012ee0:	0033      	movs	r3, r6
10012ee2:	0007      	movs	r7, r0
10012ee4:	3b20      	subs	r3, #32
10012ee6:	40df      	lsrs	r7, r3
10012ee8:	003b      	movs	r3, r7
10012eea:	2e20      	cmp	r6, #32
10012eec:	d070      	beq.n	10012fd0 <__aeabi_dadd+0x404>
10012eee:	2740      	movs	r7, #64	; 0x40
10012ef0:	1bbe      	subs	r6, r7, r6
10012ef2:	40b0      	lsls	r0, r6
10012ef4:	4302      	orrs	r2, r0
10012ef6:	1e50      	subs	r0, r2, #1
10012ef8:	4182      	sbcs	r2, r0
10012efa:	4313      	orrs	r3, r2
10012efc:	2200      	movs	r2, #0
10012efe:	e6e2      	b.n	10012cc6 <__aeabi_dadd+0xfa>
10012f00:	2c00      	cmp	r4, #0
10012f02:	d04f      	beq.n	10012fa4 <__aeabi_dadd+0x3d8>
10012f04:	4c18      	ldr	r4, [pc, #96]	; (10012f68 <__aeabi_dadd+0x39c>)
10012f06:	45a4      	cmp	ip, r4
10012f08:	d100      	bne.n	10012f0c <__aeabi_dadd+0x340>
10012f0a:	e0ab      	b.n	10013064 <__aeabi_dadd+0x498>
10012f0c:	2480      	movs	r4, #128	; 0x80
10012f0e:	0424      	lsls	r4, r4, #16
10012f10:	4276      	negs	r6, r6
10012f12:	4321      	orrs	r1, r4
10012f14:	2e38      	cmp	r6, #56	; 0x38
10012f16:	dd00      	ble.n	10012f1a <__aeabi_dadd+0x34e>
10012f18:	e0df      	b.n	100130da <__aeabi_dadd+0x50e>
10012f1a:	2e1f      	cmp	r6, #31
10012f1c:	dd00      	ble.n	10012f20 <__aeabi_dadd+0x354>
10012f1e:	e143      	b.n	100131a8 <__aeabi_dadd+0x5dc>
10012f20:	2720      	movs	r7, #32
10012f22:	1bbc      	subs	r4, r7, r6
10012f24:	46a1      	mov	r9, r4
10012f26:	000c      	movs	r4, r1
10012f28:	464f      	mov	r7, r9
10012f2a:	40bc      	lsls	r4, r7
10012f2c:	46a0      	mov	r8, r4
10012f2e:	002c      	movs	r4, r5
10012f30:	4647      	mov	r7, r8
10012f32:	40f4      	lsrs	r4, r6
10012f34:	433c      	orrs	r4, r7
10012f36:	464f      	mov	r7, r9
10012f38:	40bd      	lsls	r5, r7
10012f3a:	1e6f      	subs	r7, r5, #1
10012f3c:	41bd      	sbcs	r5, r7
10012f3e:	40f1      	lsrs	r1, r6
10012f40:	432c      	orrs	r4, r5
10012f42:	1b15      	subs	r5, r2, r4
10012f44:	42aa      	cmp	r2, r5
10012f46:	4192      	sbcs	r2, r2
10012f48:	1a41      	subs	r1, r0, r1
10012f4a:	4252      	negs	r2, r2
10012f4c:	1a89      	subs	r1, r1, r2
10012f4e:	4664      	mov	r4, ip
10012f50:	469a      	mov	sl, r3
10012f52:	e6bf      	b.n	10012cd4 <__aeabi_dadd+0x108>
10012f54:	4641      	mov	r1, r8
10012f56:	4645      	mov	r5, r8
10012f58:	4331      	orrs	r1, r6
10012f5a:	d000      	beq.n	10012f5e <__aeabi_dadd+0x392>
10012f5c:	e6be      	b.n	10012cdc <__aeabi_dadd+0x110>
10012f5e:	2600      	movs	r6, #0
10012f60:	2400      	movs	r4, #0
10012f62:	2500      	movs	r5, #0
10012f64:	e6f2      	b.n	10012d4c <__aeabi_dadd+0x180>
10012f66:	46c0      	nop			; (mov r8, r8)
10012f68:	000007ff 	.word	0x000007ff
10012f6c:	ff7fffff 	.word	0xff7fffff
10012f70:	800fffff 	.word	0x800fffff
10012f74:	2b1f      	cmp	r3, #31
10012f76:	dc59      	bgt.n	1001302c <__aeabi_dadd+0x460>
10012f78:	2720      	movs	r7, #32
10012f7a:	1aff      	subs	r7, r7, r3
10012f7c:	46bc      	mov	ip, r7
10012f7e:	0007      	movs	r7, r0
10012f80:	4663      	mov	r3, ip
10012f82:	409f      	lsls	r7, r3
10012f84:	465b      	mov	r3, fp
10012f86:	46b9      	mov	r9, r7
10012f88:	0017      	movs	r7, r2
10012f8a:	40df      	lsrs	r7, r3
10012f8c:	46b8      	mov	r8, r7
10012f8e:	464f      	mov	r7, r9
10012f90:	4643      	mov	r3, r8
10012f92:	431f      	orrs	r7, r3
10012f94:	4663      	mov	r3, ip
10012f96:	409a      	lsls	r2, r3
10012f98:	1e53      	subs	r3, r2, #1
10012f9a:	419a      	sbcs	r2, r3
10012f9c:	465b      	mov	r3, fp
10012f9e:	433a      	orrs	r2, r7
10012fa0:	40d8      	lsrs	r0, r3
10012fa2:	e6f4      	b.n	10012d8e <__aeabi_dadd+0x1c2>
10012fa4:	000c      	movs	r4, r1
10012fa6:	432c      	orrs	r4, r5
10012fa8:	d05c      	beq.n	10013064 <__aeabi_dadd+0x498>
10012faa:	43f6      	mvns	r6, r6
10012fac:	2e00      	cmp	r6, #0
10012fae:	d155      	bne.n	1001305c <__aeabi_dadd+0x490>
10012fb0:	1b55      	subs	r5, r2, r5
10012fb2:	42aa      	cmp	r2, r5
10012fb4:	41a4      	sbcs	r4, r4
10012fb6:	1a41      	subs	r1, r0, r1
10012fb8:	4264      	negs	r4, r4
10012fba:	1b09      	subs	r1, r1, r4
10012fbc:	469a      	mov	sl, r3
10012fbe:	4664      	mov	r4, ip
10012fc0:	e688      	b.n	10012cd4 <__aeabi_dadd+0x108>
10012fc2:	4f96      	ldr	r7, [pc, #600]	; (1001321c <__aeabi_dadd+0x650>)
10012fc4:	42bc      	cmp	r4, r7
10012fc6:	d000      	beq.n	10012fca <__aeabi_dadd+0x3fe>
10012fc8:	e6d8      	b.n	10012d7c <__aeabi_dadd+0x1b0>
10012fca:	e628      	b.n	10012c1e <__aeabi_dadd+0x52>
10012fcc:	2200      	movs	r2, #0
10012fce:	e780      	b.n	10012ed2 <__aeabi_dadd+0x306>
10012fd0:	2000      	movs	r0, #0
10012fd2:	e78f      	b.n	10012ef4 <__aeabi_dadd+0x328>
10012fd4:	000b      	movs	r3, r1
10012fd6:	432b      	orrs	r3, r5
10012fd8:	2c00      	cmp	r4, #0
10012fda:	d000      	beq.n	10012fde <__aeabi_dadd+0x412>
10012fdc:	e0c2      	b.n	10013164 <__aeabi_dadd+0x598>
10012fde:	2b00      	cmp	r3, #0
10012fe0:	d100      	bne.n	10012fe4 <__aeabi_dadd+0x418>
10012fe2:	e101      	b.n	100131e8 <__aeabi_dadd+0x61c>
10012fe4:	0003      	movs	r3, r0
10012fe6:	4313      	orrs	r3, r2
10012fe8:	d100      	bne.n	10012fec <__aeabi_dadd+0x420>
10012fea:	e618      	b.n	10012c1e <__aeabi_dadd+0x52>
10012fec:	18ab      	adds	r3, r5, r2
10012fee:	42ab      	cmp	r3, r5
10012ff0:	41b6      	sbcs	r6, r6
10012ff2:	1809      	adds	r1, r1, r0
10012ff4:	4276      	negs	r6, r6
10012ff6:	1871      	adds	r1, r6, r1
10012ff8:	020a      	lsls	r2, r1, #8
10012ffa:	d400      	bmi.n	10012ffe <__aeabi_dadd+0x432>
10012ffc:	e109      	b.n	10013212 <__aeabi_dadd+0x646>
10012ffe:	4a88      	ldr	r2, [pc, #544]	; (10013220 <__aeabi_dadd+0x654>)
10013000:	001d      	movs	r5, r3
10013002:	4011      	ands	r1, r2
10013004:	4664      	mov	r4, ip
10013006:	e60a      	b.n	10012c1e <__aeabi_dadd+0x52>
10013008:	2c00      	cmp	r4, #0
1001300a:	d15b      	bne.n	100130c4 <__aeabi_dadd+0x4f8>
1001300c:	000e      	movs	r6, r1
1001300e:	432e      	orrs	r6, r5
10013010:	d000      	beq.n	10013014 <__aeabi_dadd+0x448>
10013012:	e08a      	b.n	1001312a <__aeabi_dadd+0x55e>
10013014:	0001      	movs	r1, r0
10013016:	4311      	orrs	r1, r2
10013018:	d100      	bne.n	1001301c <__aeabi_dadd+0x450>
1001301a:	e0c2      	b.n	100131a2 <__aeabi_dadd+0x5d6>
1001301c:	0001      	movs	r1, r0
1001301e:	0015      	movs	r5, r2
10013020:	469a      	mov	sl, r3
10013022:	e5fc      	b.n	10012c1e <__aeabi_dadd+0x52>
10013024:	4664      	mov	r4, ip
10013026:	2100      	movs	r1, #0
10013028:	2500      	movs	r5, #0
1001302a:	e68f      	b.n	10012d4c <__aeabi_dadd+0x180>
1001302c:	2320      	movs	r3, #32
1001302e:	425b      	negs	r3, r3
10013030:	469c      	mov	ip, r3
10013032:	44dc      	add	ip, fp
10013034:	4663      	mov	r3, ip
10013036:	0007      	movs	r7, r0
10013038:	40df      	lsrs	r7, r3
1001303a:	465b      	mov	r3, fp
1001303c:	46bc      	mov	ip, r7
1001303e:	2b20      	cmp	r3, #32
10013040:	d100      	bne.n	10013044 <__aeabi_dadd+0x478>
10013042:	e0ac      	b.n	1001319e <__aeabi_dadd+0x5d2>
10013044:	2340      	movs	r3, #64	; 0x40
10013046:	465f      	mov	r7, fp
10013048:	1bdb      	subs	r3, r3, r7
1001304a:	4098      	lsls	r0, r3
1001304c:	4302      	orrs	r2, r0
1001304e:	1e50      	subs	r0, r2, #1
10013050:	4182      	sbcs	r2, r0
10013052:	4663      	mov	r3, ip
10013054:	4313      	orrs	r3, r2
10013056:	001a      	movs	r2, r3
10013058:	2000      	movs	r0, #0
1001305a:	e698      	b.n	10012d8e <__aeabi_dadd+0x1c2>
1001305c:	4c6f      	ldr	r4, [pc, #444]	; (1001321c <__aeabi_dadd+0x650>)
1001305e:	45a4      	cmp	ip, r4
10013060:	d000      	beq.n	10013064 <__aeabi_dadd+0x498>
10013062:	e757      	b.n	10012f14 <__aeabi_dadd+0x348>
10013064:	0001      	movs	r1, r0
10013066:	0015      	movs	r5, r2
10013068:	4664      	mov	r4, ip
1001306a:	469a      	mov	sl, r3
1001306c:	e5d7      	b.n	10012c1e <__aeabi_dadd+0x52>
1001306e:	2c00      	cmp	r4, #0
10013070:	d139      	bne.n	100130e6 <__aeabi_dadd+0x51a>
10013072:	000c      	movs	r4, r1
10013074:	432c      	orrs	r4, r5
10013076:	d06e      	beq.n	10013156 <__aeabi_dadd+0x58a>
10013078:	43db      	mvns	r3, r3
1001307a:	2b00      	cmp	r3, #0
1001307c:	d01a      	beq.n	100130b4 <__aeabi_dadd+0x4e8>
1001307e:	4c67      	ldr	r4, [pc, #412]	; (1001321c <__aeabi_dadd+0x650>)
10013080:	45a4      	cmp	ip, r4
10013082:	d068      	beq.n	10013156 <__aeabi_dadd+0x58a>
10013084:	2b38      	cmp	r3, #56	; 0x38
10013086:	dd00      	ble.n	1001308a <__aeabi_dadd+0x4be>
10013088:	e0a4      	b.n	100131d4 <__aeabi_dadd+0x608>
1001308a:	2b1f      	cmp	r3, #31
1001308c:	dd00      	ble.n	10013090 <__aeabi_dadd+0x4c4>
1001308e:	e0ae      	b.n	100131ee <__aeabi_dadd+0x622>
10013090:	2420      	movs	r4, #32
10013092:	000f      	movs	r7, r1
10013094:	1ae4      	subs	r4, r4, r3
10013096:	40a7      	lsls	r7, r4
10013098:	46b9      	mov	r9, r7
1001309a:	002f      	movs	r7, r5
1001309c:	40df      	lsrs	r7, r3
1001309e:	46b8      	mov	r8, r7
100130a0:	46a3      	mov	fp, r4
100130a2:	464f      	mov	r7, r9
100130a4:	4644      	mov	r4, r8
100130a6:	4327      	orrs	r7, r4
100130a8:	465c      	mov	r4, fp
100130aa:	40a5      	lsls	r5, r4
100130ac:	1e6c      	subs	r4, r5, #1
100130ae:	41a5      	sbcs	r5, r4
100130b0:	40d9      	lsrs	r1, r3
100130b2:	433d      	orrs	r5, r7
100130b4:	18ad      	adds	r5, r5, r2
100130b6:	4295      	cmp	r5, r2
100130b8:	419b      	sbcs	r3, r3
100130ba:	1809      	adds	r1, r1, r0
100130bc:	425b      	negs	r3, r3
100130be:	1859      	adds	r1, r3, r1
100130c0:	4664      	mov	r4, ip
100130c2:	e66b      	b.n	10012d9c <__aeabi_dadd+0x1d0>
100130c4:	000c      	movs	r4, r1
100130c6:	432c      	orrs	r4, r5
100130c8:	d115      	bne.n	100130f6 <__aeabi_dadd+0x52a>
100130ca:	0001      	movs	r1, r0
100130cc:	4311      	orrs	r1, r2
100130ce:	d07b      	beq.n	100131c8 <__aeabi_dadd+0x5fc>
100130d0:	0001      	movs	r1, r0
100130d2:	0015      	movs	r5, r2
100130d4:	469a      	mov	sl, r3
100130d6:	4c51      	ldr	r4, [pc, #324]	; (1001321c <__aeabi_dadd+0x650>)
100130d8:	e5a1      	b.n	10012c1e <__aeabi_dadd+0x52>
100130da:	430d      	orrs	r5, r1
100130dc:	1e69      	subs	r1, r5, #1
100130de:	418d      	sbcs	r5, r1
100130e0:	2100      	movs	r1, #0
100130e2:	b2ec      	uxtb	r4, r5
100130e4:	e72d      	b.n	10012f42 <__aeabi_dadd+0x376>
100130e6:	4c4d      	ldr	r4, [pc, #308]	; (1001321c <__aeabi_dadd+0x650>)
100130e8:	45a4      	cmp	ip, r4
100130ea:	d034      	beq.n	10013156 <__aeabi_dadd+0x58a>
100130ec:	2480      	movs	r4, #128	; 0x80
100130ee:	0424      	lsls	r4, r4, #16
100130f0:	425b      	negs	r3, r3
100130f2:	4321      	orrs	r1, r4
100130f4:	e7c6      	b.n	10013084 <__aeabi_dadd+0x4b8>
100130f6:	0004      	movs	r4, r0
100130f8:	4314      	orrs	r4, r2
100130fa:	d04e      	beq.n	1001319a <__aeabi_dadd+0x5ce>
100130fc:	08ed      	lsrs	r5, r5, #3
100130fe:	074c      	lsls	r4, r1, #29
10013100:	432c      	orrs	r4, r5
10013102:	2580      	movs	r5, #128	; 0x80
10013104:	08c9      	lsrs	r1, r1, #3
10013106:	032d      	lsls	r5, r5, #12
10013108:	4229      	tst	r1, r5
1001310a:	d008      	beq.n	1001311e <__aeabi_dadd+0x552>
1001310c:	08c6      	lsrs	r6, r0, #3
1001310e:	422e      	tst	r6, r5
10013110:	d105      	bne.n	1001311e <__aeabi_dadd+0x552>
10013112:	08d2      	lsrs	r2, r2, #3
10013114:	0741      	lsls	r1, r0, #29
10013116:	4311      	orrs	r1, r2
10013118:	000c      	movs	r4, r1
1001311a:	469a      	mov	sl, r3
1001311c:	0031      	movs	r1, r6
1001311e:	0f62      	lsrs	r2, r4, #29
10013120:	00c9      	lsls	r1, r1, #3
10013122:	00e5      	lsls	r5, r4, #3
10013124:	4311      	orrs	r1, r2
10013126:	4c3d      	ldr	r4, [pc, #244]	; (1001321c <__aeabi_dadd+0x650>)
10013128:	e579      	b.n	10012c1e <__aeabi_dadd+0x52>
1001312a:	0006      	movs	r6, r0
1001312c:	4316      	orrs	r6, r2
1001312e:	d100      	bne.n	10013132 <__aeabi_dadd+0x566>
10013130:	e575      	b.n	10012c1e <__aeabi_dadd+0x52>
10013132:	1aae      	subs	r6, r5, r2
10013134:	46b0      	mov	r8, r6
10013136:	4545      	cmp	r5, r8
10013138:	41bf      	sbcs	r7, r7
1001313a:	1a0e      	subs	r6, r1, r0
1001313c:	427f      	negs	r7, r7
1001313e:	1bf6      	subs	r6, r6, r7
10013140:	0237      	lsls	r7, r6, #8
10013142:	d400      	bmi.n	10013146 <__aeabi_dadd+0x57a>
10013144:	e5f4      	b.n	10012d30 <__aeabi_dadd+0x164>
10013146:	1b55      	subs	r5, r2, r5
10013148:	42aa      	cmp	r2, r5
1001314a:	41b6      	sbcs	r6, r6
1001314c:	1a41      	subs	r1, r0, r1
1001314e:	4276      	negs	r6, r6
10013150:	1b89      	subs	r1, r1, r6
10013152:	469a      	mov	sl, r3
10013154:	e563      	b.n	10012c1e <__aeabi_dadd+0x52>
10013156:	0001      	movs	r1, r0
10013158:	0015      	movs	r5, r2
1001315a:	4664      	mov	r4, ip
1001315c:	e55f      	b.n	10012c1e <__aeabi_dadd+0x52>
1001315e:	2200      	movs	r2, #0
10013160:	2500      	movs	r5, #0
10013162:	e57b      	b.n	10012c5c <__aeabi_dadd+0x90>
10013164:	2b00      	cmp	r3, #0
10013166:	d03b      	beq.n	100131e0 <__aeabi_dadd+0x614>
10013168:	0003      	movs	r3, r0
1001316a:	4313      	orrs	r3, r2
1001316c:	d015      	beq.n	1001319a <__aeabi_dadd+0x5ce>
1001316e:	08ed      	lsrs	r5, r5, #3
10013170:	074b      	lsls	r3, r1, #29
10013172:	432b      	orrs	r3, r5
10013174:	2580      	movs	r5, #128	; 0x80
10013176:	08c9      	lsrs	r1, r1, #3
10013178:	032d      	lsls	r5, r5, #12
1001317a:	4229      	tst	r1, r5
1001317c:	d007      	beq.n	1001318e <__aeabi_dadd+0x5c2>
1001317e:	08c4      	lsrs	r4, r0, #3
10013180:	422c      	tst	r4, r5
10013182:	d104      	bne.n	1001318e <__aeabi_dadd+0x5c2>
10013184:	0741      	lsls	r1, r0, #29
10013186:	000b      	movs	r3, r1
10013188:	0021      	movs	r1, r4
1001318a:	08d2      	lsrs	r2, r2, #3
1001318c:	4313      	orrs	r3, r2
1001318e:	00c9      	lsls	r1, r1, #3
10013190:	0f5a      	lsrs	r2, r3, #29
10013192:	4311      	orrs	r1, r2
10013194:	00dd      	lsls	r5, r3, #3
10013196:	4c21      	ldr	r4, [pc, #132]	; (1001321c <__aeabi_dadd+0x650>)
10013198:	e541      	b.n	10012c1e <__aeabi_dadd+0x52>
1001319a:	4c20      	ldr	r4, [pc, #128]	; (1001321c <__aeabi_dadd+0x650>)
1001319c:	e53f      	b.n	10012c1e <__aeabi_dadd+0x52>
1001319e:	2000      	movs	r0, #0
100131a0:	e754      	b.n	1001304c <__aeabi_dadd+0x480>
100131a2:	2600      	movs	r6, #0
100131a4:	2500      	movs	r5, #0
100131a6:	e5d1      	b.n	10012d4c <__aeabi_dadd+0x180>
100131a8:	0034      	movs	r4, r6
100131aa:	000f      	movs	r7, r1
100131ac:	3c20      	subs	r4, #32
100131ae:	40e7      	lsrs	r7, r4
100131b0:	003c      	movs	r4, r7
100131b2:	2e20      	cmp	r6, #32
100131b4:	d02b      	beq.n	1001320e <__aeabi_dadd+0x642>
100131b6:	2740      	movs	r7, #64	; 0x40
100131b8:	1bbe      	subs	r6, r7, r6
100131ba:	40b1      	lsls	r1, r6
100131bc:	430d      	orrs	r5, r1
100131be:	1e69      	subs	r1, r5, #1
100131c0:	418d      	sbcs	r5, r1
100131c2:	2100      	movs	r1, #0
100131c4:	432c      	orrs	r4, r5
100131c6:	e6bc      	b.n	10012f42 <__aeabi_dadd+0x376>
100131c8:	2180      	movs	r1, #128	; 0x80
100131ca:	2600      	movs	r6, #0
100131cc:	0309      	lsls	r1, r1, #12
100131ce:	4c13      	ldr	r4, [pc, #76]	; (1001321c <__aeabi_dadd+0x650>)
100131d0:	2500      	movs	r5, #0
100131d2:	e5bb      	b.n	10012d4c <__aeabi_dadd+0x180>
100131d4:	430d      	orrs	r5, r1
100131d6:	1e69      	subs	r1, r5, #1
100131d8:	418d      	sbcs	r5, r1
100131da:	2100      	movs	r1, #0
100131dc:	b2ed      	uxtb	r5, r5
100131de:	e769      	b.n	100130b4 <__aeabi_dadd+0x4e8>
100131e0:	0001      	movs	r1, r0
100131e2:	0015      	movs	r5, r2
100131e4:	4c0d      	ldr	r4, [pc, #52]	; (1001321c <__aeabi_dadd+0x650>)
100131e6:	e51a      	b.n	10012c1e <__aeabi_dadd+0x52>
100131e8:	0001      	movs	r1, r0
100131ea:	0015      	movs	r5, r2
100131ec:	e517      	b.n	10012c1e <__aeabi_dadd+0x52>
100131ee:	001c      	movs	r4, r3
100131f0:	000f      	movs	r7, r1
100131f2:	3c20      	subs	r4, #32
100131f4:	40e7      	lsrs	r7, r4
100131f6:	003c      	movs	r4, r7
100131f8:	2b20      	cmp	r3, #32
100131fa:	d00c      	beq.n	10013216 <__aeabi_dadd+0x64a>
100131fc:	2740      	movs	r7, #64	; 0x40
100131fe:	1afb      	subs	r3, r7, r3
10013200:	4099      	lsls	r1, r3
10013202:	430d      	orrs	r5, r1
10013204:	1e69      	subs	r1, r5, #1
10013206:	418d      	sbcs	r5, r1
10013208:	2100      	movs	r1, #0
1001320a:	4325      	orrs	r5, r4
1001320c:	e752      	b.n	100130b4 <__aeabi_dadd+0x4e8>
1001320e:	2100      	movs	r1, #0
10013210:	e7d4      	b.n	100131bc <__aeabi_dadd+0x5f0>
10013212:	001d      	movs	r5, r3
10013214:	e592      	b.n	10012d3c <__aeabi_dadd+0x170>
10013216:	2100      	movs	r1, #0
10013218:	e7f3      	b.n	10013202 <__aeabi_dadd+0x636>
1001321a:	46c0      	nop			; (mov r8, r8)
1001321c:	000007ff 	.word	0x000007ff
10013220:	ff7fffff 	.word	0xff7fffff

10013224 <__aeabi_ddiv>:
10013224:	b5f0      	push	{r4, r5, r6, r7, lr}
10013226:	4656      	mov	r6, sl
10013228:	464d      	mov	r5, r9
1001322a:	4644      	mov	r4, r8
1001322c:	465f      	mov	r7, fp
1001322e:	b4f0      	push	{r4, r5, r6, r7}
10013230:	001d      	movs	r5, r3
10013232:	030e      	lsls	r6, r1, #12
10013234:	004c      	lsls	r4, r1, #1
10013236:	0fcb      	lsrs	r3, r1, #31
10013238:	b087      	sub	sp, #28
1001323a:	0007      	movs	r7, r0
1001323c:	4692      	mov	sl, r2
1001323e:	4681      	mov	r9, r0
10013240:	0b36      	lsrs	r6, r6, #12
10013242:	0d64      	lsrs	r4, r4, #21
10013244:	4698      	mov	r8, r3
10013246:	d06a      	beq.n	1001331e <__aeabi_ddiv+0xfa>
10013248:	4b6d      	ldr	r3, [pc, #436]	; (10013400 <__aeabi_ddiv+0x1dc>)
1001324a:	429c      	cmp	r4, r3
1001324c:	d035      	beq.n	100132ba <__aeabi_ddiv+0x96>
1001324e:	2280      	movs	r2, #128	; 0x80
10013250:	0f43      	lsrs	r3, r0, #29
10013252:	0412      	lsls	r2, r2, #16
10013254:	4313      	orrs	r3, r2
10013256:	00f6      	lsls	r6, r6, #3
10013258:	431e      	orrs	r6, r3
1001325a:	00c3      	lsls	r3, r0, #3
1001325c:	4699      	mov	r9, r3
1001325e:	4b69      	ldr	r3, [pc, #420]	; (10013404 <__aeabi_ddiv+0x1e0>)
10013260:	2700      	movs	r7, #0
10013262:	469c      	mov	ip, r3
10013264:	2300      	movs	r3, #0
10013266:	4464      	add	r4, ip
10013268:	9302      	str	r3, [sp, #8]
1001326a:	032b      	lsls	r3, r5, #12
1001326c:	0068      	lsls	r0, r5, #1
1001326e:	0b1b      	lsrs	r3, r3, #12
10013270:	0fed      	lsrs	r5, r5, #31
10013272:	4651      	mov	r1, sl
10013274:	469b      	mov	fp, r3
10013276:	0d40      	lsrs	r0, r0, #21
10013278:	9500      	str	r5, [sp, #0]
1001327a:	d100      	bne.n	1001327e <__aeabi_ddiv+0x5a>
1001327c:	e078      	b.n	10013370 <__aeabi_ddiv+0x14c>
1001327e:	4b60      	ldr	r3, [pc, #384]	; (10013400 <__aeabi_ddiv+0x1dc>)
10013280:	4298      	cmp	r0, r3
10013282:	d06c      	beq.n	1001335e <__aeabi_ddiv+0x13a>
10013284:	465b      	mov	r3, fp
10013286:	00da      	lsls	r2, r3, #3
10013288:	0f4b      	lsrs	r3, r1, #29
1001328a:	2180      	movs	r1, #128	; 0x80
1001328c:	0409      	lsls	r1, r1, #16
1001328e:	430b      	orrs	r3, r1
10013290:	4313      	orrs	r3, r2
10013292:	469b      	mov	fp, r3
10013294:	4653      	mov	r3, sl
10013296:	00d9      	lsls	r1, r3, #3
10013298:	4b5a      	ldr	r3, [pc, #360]	; (10013404 <__aeabi_ddiv+0x1e0>)
1001329a:	469c      	mov	ip, r3
1001329c:	2300      	movs	r3, #0
1001329e:	4460      	add	r0, ip
100132a0:	4642      	mov	r2, r8
100132a2:	1a20      	subs	r0, r4, r0
100132a4:	406a      	eors	r2, r5
100132a6:	4692      	mov	sl, r2
100132a8:	9001      	str	r0, [sp, #4]
100132aa:	431f      	orrs	r7, r3
100132ac:	2f0f      	cmp	r7, #15
100132ae:	d900      	bls.n	100132b2 <__aeabi_ddiv+0x8e>
100132b0:	e0b0      	b.n	10013414 <__aeabi_ddiv+0x1f0>
100132b2:	4855      	ldr	r0, [pc, #340]	; (10013408 <__aeabi_ddiv+0x1e4>)
100132b4:	00bf      	lsls	r7, r7, #2
100132b6:	59c0      	ldr	r0, [r0, r7]
100132b8:	4687      	mov	pc, r0
100132ba:	4337      	orrs	r7, r6
100132bc:	d000      	beq.n	100132c0 <__aeabi_ddiv+0x9c>
100132be:	e088      	b.n	100133d2 <__aeabi_ddiv+0x1ae>
100132c0:	2300      	movs	r3, #0
100132c2:	4699      	mov	r9, r3
100132c4:	3302      	adds	r3, #2
100132c6:	2708      	movs	r7, #8
100132c8:	2600      	movs	r6, #0
100132ca:	9302      	str	r3, [sp, #8]
100132cc:	e7cd      	b.n	1001326a <__aeabi_ddiv+0x46>
100132ce:	4643      	mov	r3, r8
100132d0:	46b3      	mov	fp, r6
100132d2:	4649      	mov	r1, r9
100132d4:	9300      	str	r3, [sp, #0]
100132d6:	9b02      	ldr	r3, [sp, #8]
100132d8:	9a00      	ldr	r2, [sp, #0]
100132da:	4692      	mov	sl, r2
100132dc:	2b02      	cmp	r3, #2
100132de:	d000      	beq.n	100132e2 <__aeabi_ddiv+0xbe>
100132e0:	e1bf      	b.n	10013662 <__aeabi_ddiv+0x43e>
100132e2:	2100      	movs	r1, #0
100132e4:	4653      	mov	r3, sl
100132e6:	2201      	movs	r2, #1
100132e8:	2600      	movs	r6, #0
100132ea:	4689      	mov	r9, r1
100132ec:	401a      	ands	r2, r3
100132ee:	4b44      	ldr	r3, [pc, #272]	; (10013400 <__aeabi_ddiv+0x1dc>)
100132f0:	2100      	movs	r1, #0
100132f2:	0336      	lsls	r6, r6, #12
100132f4:	0d0c      	lsrs	r4, r1, #20
100132f6:	0524      	lsls	r4, r4, #20
100132f8:	0b36      	lsrs	r6, r6, #12
100132fa:	4326      	orrs	r6, r4
100132fc:	4c43      	ldr	r4, [pc, #268]	; (1001340c <__aeabi_ddiv+0x1e8>)
100132fe:	051b      	lsls	r3, r3, #20
10013300:	4026      	ands	r6, r4
10013302:	431e      	orrs	r6, r3
10013304:	0076      	lsls	r6, r6, #1
10013306:	07d2      	lsls	r2, r2, #31
10013308:	0876      	lsrs	r6, r6, #1
1001330a:	4316      	orrs	r6, r2
1001330c:	4648      	mov	r0, r9
1001330e:	0031      	movs	r1, r6
10013310:	b007      	add	sp, #28
10013312:	bc3c      	pop	{r2, r3, r4, r5}
10013314:	4690      	mov	r8, r2
10013316:	4699      	mov	r9, r3
10013318:	46a2      	mov	sl, r4
1001331a:	46ab      	mov	fp, r5
1001331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001331e:	0033      	movs	r3, r6
10013320:	4303      	orrs	r3, r0
10013322:	d04f      	beq.n	100133c4 <__aeabi_ddiv+0x1a0>
10013324:	2e00      	cmp	r6, #0
10013326:	d100      	bne.n	1001332a <__aeabi_ddiv+0x106>
10013328:	e1bc      	b.n	100136a4 <__aeabi_ddiv+0x480>
1001332a:	0030      	movs	r0, r6
1001332c:	f001 fb1c 	bl	10014968 <__clzsi2>
10013330:	0003      	movs	r3, r0
10013332:	3b0b      	subs	r3, #11
10013334:	2b1c      	cmp	r3, #28
10013336:	dd00      	ble.n	1001333a <__aeabi_ddiv+0x116>
10013338:	e1ad      	b.n	10013696 <__aeabi_ddiv+0x472>
1001333a:	221d      	movs	r2, #29
1001333c:	0001      	movs	r1, r0
1001333e:	1ad3      	subs	r3, r2, r3
10013340:	3908      	subs	r1, #8
10013342:	003a      	movs	r2, r7
10013344:	408f      	lsls	r7, r1
10013346:	408e      	lsls	r6, r1
10013348:	40da      	lsrs	r2, r3
1001334a:	46b9      	mov	r9, r7
1001334c:	4316      	orrs	r6, r2
1001334e:	4b30      	ldr	r3, [pc, #192]	; (10013410 <__aeabi_ddiv+0x1ec>)
10013350:	2700      	movs	r7, #0
10013352:	469c      	mov	ip, r3
10013354:	2300      	movs	r3, #0
10013356:	4460      	add	r0, ip
10013358:	4244      	negs	r4, r0
1001335a:	9302      	str	r3, [sp, #8]
1001335c:	e785      	b.n	1001326a <__aeabi_ddiv+0x46>
1001335e:	4653      	mov	r3, sl
10013360:	465a      	mov	r2, fp
10013362:	4313      	orrs	r3, r2
10013364:	d12c      	bne.n	100133c0 <__aeabi_ddiv+0x19c>
10013366:	2300      	movs	r3, #0
10013368:	2100      	movs	r1, #0
1001336a:	469b      	mov	fp, r3
1001336c:	3302      	adds	r3, #2
1001336e:	e797      	b.n	100132a0 <__aeabi_ddiv+0x7c>
10013370:	430b      	orrs	r3, r1
10013372:	d020      	beq.n	100133b6 <__aeabi_ddiv+0x192>
10013374:	465b      	mov	r3, fp
10013376:	2b00      	cmp	r3, #0
10013378:	d100      	bne.n	1001337c <__aeabi_ddiv+0x158>
1001337a:	e19e      	b.n	100136ba <__aeabi_ddiv+0x496>
1001337c:	4658      	mov	r0, fp
1001337e:	f001 faf3 	bl	10014968 <__clzsi2>
10013382:	0003      	movs	r3, r0
10013384:	3b0b      	subs	r3, #11
10013386:	2b1c      	cmp	r3, #28
10013388:	dd00      	ble.n	1001338c <__aeabi_ddiv+0x168>
1001338a:	e18f      	b.n	100136ac <__aeabi_ddiv+0x488>
1001338c:	0002      	movs	r2, r0
1001338e:	4659      	mov	r1, fp
10013390:	3a08      	subs	r2, #8
10013392:	4091      	lsls	r1, r2
10013394:	468b      	mov	fp, r1
10013396:	211d      	movs	r1, #29
10013398:	1acb      	subs	r3, r1, r3
1001339a:	4651      	mov	r1, sl
1001339c:	40d9      	lsrs	r1, r3
1001339e:	000b      	movs	r3, r1
100133a0:	4659      	mov	r1, fp
100133a2:	430b      	orrs	r3, r1
100133a4:	4651      	mov	r1, sl
100133a6:	469b      	mov	fp, r3
100133a8:	4091      	lsls	r1, r2
100133aa:	4b19      	ldr	r3, [pc, #100]	; (10013410 <__aeabi_ddiv+0x1ec>)
100133ac:	469c      	mov	ip, r3
100133ae:	4460      	add	r0, ip
100133b0:	4240      	negs	r0, r0
100133b2:	2300      	movs	r3, #0
100133b4:	e774      	b.n	100132a0 <__aeabi_ddiv+0x7c>
100133b6:	2300      	movs	r3, #0
100133b8:	2100      	movs	r1, #0
100133ba:	469b      	mov	fp, r3
100133bc:	3301      	adds	r3, #1
100133be:	e76f      	b.n	100132a0 <__aeabi_ddiv+0x7c>
100133c0:	2303      	movs	r3, #3
100133c2:	e76d      	b.n	100132a0 <__aeabi_ddiv+0x7c>
100133c4:	2300      	movs	r3, #0
100133c6:	4699      	mov	r9, r3
100133c8:	3301      	adds	r3, #1
100133ca:	2704      	movs	r7, #4
100133cc:	2600      	movs	r6, #0
100133ce:	9302      	str	r3, [sp, #8]
100133d0:	e74b      	b.n	1001326a <__aeabi_ddiv+0x46>
100133d2:	2303      	movs	r3, #3
100133d4:	270c      	movs	r7, #12
100133d6:	9302      	str	r3, [sp, #8]
100133d8:	e747      	b.n	1001326a <__aeabi_ddiv+0x46>
100133da:	2201      	movs	r2, #1
100133dc:	1ad5      	subs	r5, r2, r3
100133de:	2d38      	cmp	r5, #56	; 0x38
100133e0:	dc00      	bgt.n	100133e4 <__aeabi_ddiv+0x1c0>
100133e2:	e1b0      	b.n	10013746 <__aeabi_ddiv+0x522>
100133e4:	4653      	mov	r3, sl
100133e6:	401a      	ands	r2, r3
100133e8:	2100      	movs	r1, #0
100133ea:	2300      	movs	r3, #0
100133ec:	2600      	movs	r6, #0
100133ee:	4689      	mov	r9, r1
100133f0:	e77e      	b.n	100132f0 <__aeabi_ddiv+0xcc>
100133f2:	2300      	movs	r3, #0
100133f4:	2680      	movs	r6, #128	; 0x80
100133f6:	4699      	mov	r9, r3
100133f8:	2200      	movs	r2, #0
100133fa:	0336      	lsls	r6, r6, #12
100133fc:	4b00      	ldr	r3, [pc, #0]	; (10013400 <__aeabi_ddiv+0x1dc>)
100133fe:	e777      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013400:	000007ff 	.word	0x000007ff
10013404:	fffffc01 	.word	0xfffffc01
10013408:	10016aa8 	.word	0x10016aa8
1001340c:	800fffff 	.word	0x800fffff
10013410:	000003f3 	.word	0x000003f3
10013414:	455e      	cmp	r6, fp
10013416:	d900      	bls.n	1001341a <__aeabi_ddiv+0x1f6>
10013418:	e172      	b.n	10013700 <__aeabi_ddiv+0x4dc>
1001341a:	d100      	bne.n	1001341e <__aeabi_ddiv+0x1fa>
1001341c:	e16d      	b.n	100136fa <__aeabi_ddiv+0x4d6>
1001341e:	9b01      	ldr	r3, [sp, #4]
10013420:	464d      	mov	r5, r9
10013422:	3b01      	subs	r3, #1
10013424:	9301      	str	r3, [sp, #4]
10013426:	2300      	movs	r3, #0
10013428:	0034      	movs	r4, r6
1001342a:	9302      	str	r3, [sp, #8]
1001342c:	465b      	mov	r3, fp
1001342e:	021e      	lsls	r6, r3, #8
10013430:	0e0b      	lsrs	r3, r1, #24
10013432:	431e      	orrs	r6, r3
10013434:	020b      	lsls	r3, r1, #8
10013436:	9303      	str	r3, [sp, #12]
10013438:	0c33      	lsrs	r3, r6, #16
1001343a:	4699      	mov	r9, r3
1001343c:	0433      	lsls	r3, r6, #16
1001343e:	0c1b      	lsrs	r3, r3, #16
10013440:	4649      	mov	r1, r9
10013442:	0020      	movs	r0, r4
10013444:	9300      	str	r3, [sp, #0]
10013446:	f7fe fc65 	bl	10011d14 <__aeabi_uidiv>
1001344a:	9b00      	ldr	r3, [sp, #0]
1001344c:	0037      	movs	r7, r6
1001344e:	4343      	muls	r3, r0
10013450:	0006      	movs	r6, r0
10013452:	4649      	mov	r1, r9
10013454:	0020      	movs	r0, r4
10013456:	4698      	mov	r8, r3
10013458:	f7fe fce2 	bl	10011e20 <__aeabi_uidivmod>
1001345c:	0c2c      	lsrs	r4, r5, #16
1001345e:	0409      	lsls	r1, r1, #16
10013460:	430c      	orrs	r4, r1
10013462:	45a0      	cmp	r8, r4
10013464:	d909      	bls.n	1001347a <__aeabi_ddiv+0x256>
10013466:	19e4      	adds	r4, r4, r7
10013468:	1e73      	subs	r3, r6, #1
1001346a:	42a7      	cmp	r7, r4
1001346c:	d900      	bls.n	10013470 <__aeabi_ddiv+0x24c>
1001346e:	e15c      	b.n	1001372a <__aeabi_ddiv+0x506>
10013470:	45a0      	cmp	r8, r4
10013472:	d800      	bhi.n	10013476 <__aeabi_ddiv+0x252>
10013474:	e159      	b.n	1001372a <__aeabi_ddiv+0x506>
10013476:	3e02      	subs	r6, #2
10013478:	19e4      	adds	r4, r4, r7
1001347a:	4643      	mov	r3, r8
1001347c:	1ae4      	subs	r4, r4, r3
1001347e:	4649      	mov	r1, r9
10013480:	0020      	movs	r0, r4
10013482:	f7fe fc47 	bl	10011d14 <__aeabi_uidiv>
10013486:	0003      	movs	r3, r0
10013488:	9a00      	ldr	r2, [sp, #0]
1001348a:	4680      	mov	r8, r0
1001348c:	4353      	muls	r3, r2
1001348e:	4649      	mov	r1, r9
10013490:	0020      	movs	r0, r4
10013492:	469b      	mov	fp, r3
10013494:	f7fe fcc4 	bl	10011e20 <__aeabi_uidivmod>
10013498:	042a      	lsls	r2, r5, #16
1001349a:	0409      	lsls	r1, r1, #16
1001349c:	0c12      	lsrs	r2, r2, #16
1001349e:	430a      	orrs	r2, r1
100134a0:	4593      	cmp	fp, r2
100134a2:	d90d      	bls.n	100134c0 <__aeabi_ddiv+0x29c>
100134a4:	4643      	mov	r3, r8
100134a6:	19d2      	adds	r2, r2, r7
100134a8:	3b01      	subs	r3, #1
100134aa:	4297      	cmp	r7, r2
100134ac:	d900      	bls.n	100134b0 <__aeabi_ddiv+0x28c>
100134ae:	e13a      	b.n	10013726 <__aeabi_ddiv+0x502>
100134b0:	4593      	cmp	fp, r2
100134b2:	d800      	bhi.n	100134b6 <__aeabi_ddiv+0x292>
100134b4:	e137      	b.n	10013726 <__aeabi_ddiv+0x502>
100134b6:	2302      	movs	r3, #2
100134b8:	425b      	negs	r3, r3
100134ba:	469c      	mov	ip, r3
100134bc:	19d2      	adds	r2, r2, r7
100134be:	44e0      	add	r8, ip
100134c0:	465b      	mov	r3, fp
100134c2:	1ad2      	subs	r2, r2, r3
100134c4:	4643      	mov	r3, r8
100134c6:	0436      	lsls	r6, r6, #16
100134c8:	4333      	orrs	r3, r6
100134ca:	469b      	mov	fp, r3
100134cc:	9903      	ldr	r1, [sp, #12]
100134ce:	0c18      	lsrs	r0, r3, #16
100134d0:	0c0b      	lsrs	r3, r1, #16
100134d2:	001d      	movs	r5, r3
100134d4:	9305      	str	r3, [sp, #20]
100134d6:	0409      	lsls	r1, r1, #16
100134d8:	465b      	mov	r3, fp
100134da:	0c09      	lsrs	r1, r1, #16
100134dc:	000c      	movs	r4, r1
100134de:	041b      	lsls	r3, r3, #16
100134e0:	0c1b      	lsrs	r3, r3, #16
100134e2:	4344      	muls	r4, r0
100134e4:	9104      	str	r1, [sp, #16]
100134e6:	4359      	muls	r1, r3
100134e8:	436b      	muls	r3, r5
100134ea:	4368      	muls	r0, r5
100134ec:	191b      	adds	r3, r3, r4
100134ee:	0c0d      	lsrs	r5, r1, #16
100134f0:	18eb      	adds	r3, r5, r3
100134f2:	429c      	cmp	r4, r3
100134f4:	d903      	bls.n	100134fe <__aeabi_ddiv+0x2da>
100134f6:	2480      	movs	r4, #128	; 0x80
100134f8:	0264      	lsls	r4, r4, #9
100134fa:	46a4      	mov	ip, r4
100134fc:	4460      	add	r0, ip
100134fe:	0c1c      	lsrs	r4, r3, #16
10013500:	0409      	lsls	r1, r1, #16
10013502:	041b      	lsls	r3, r3, #16
10013504:	0c09      	lsrs	r1, r1, #16
10013506:	1820      	adds	r0, r4, r0
10013508:	185d      	adds	r5, r3, r1
1001350a:	4282      	cmp	r2, r0
1001350c:	d200      	bcs.n	10013510 <__aeabi_ddiv+0x2ec>
1001350e:	e0de      	b.n	100136ce <__aeabi_ddiv+0x4aa>
10013510:	d100      	bne.n	10013514 <__aeabi_ddiv+0x2f0>
10013512:	e0d7      	b.n	100136c4 <__aeabi_ddiv+0x4a0>
10013514:	1a16      	subs	r6, r2, r0
10013516:	9b02      	ldr	r3, [sp, #8]
10013518:	469c      	mov	ip, r3
1001351a:	1b5d      	subs	r5, r3, r5
1001351c:	45ac      	cmp	ip, r5
1001351e:	419b      	sbcs	r3, r3
10013520:	425b      	negs	r3, r3
10013522:	1af6      	subs	r6, r6, r3
10013524:	42b7      	cmp	r7, r6
10013526:	d100      	bne.n	1001352a <__aeabi_ddiv+0x306>
10013528:	e106      	b.n	10013738 <__aeabi_ddiv+0x514>
1001352a:	4649      	mov	r1, r9
1001352c:	0030      	movs	r0, r6
1001352e:	f7fe fbf1 	bl	10011d14 <__aeabi_uidiv>
10013532:	9b00      	ldr	r3, [sp, #0]
10013534:	0004      	movs	r4, r0
10013536:	4343      	muls	r3, r0
10013538:	4649      	mov	r1, r9
1001353a:	0030      	movs	r0, r6
1001353c:	4698      	mov	r8, r3
1001353e:	f7fe fc6f 	bl	10011e20 <__aeabi_uidivmod>
10013542:	0c2e      	lsrs	r6, r5, #16
10013544:	0409      	lsls	r1, r1, #16
10013546:	430e      	orrs	r6, r1
10013548:	45b0      	cmp	r8, r6
1001354a:	d909      	bls.n	10013560 <__aeabi_ddiv+0x33c>
1001354c:	19f6      	adds	r6, r6, r7
1001354e:	1e63      	subs	r3, r4, #1
10013550:	42b7      	cmp	r7, r6
10013552:	d900      	bls.n	10013556 <__aeabi_ddiv+0x332>
10013554:	e0f3      	b.n	1001373e <__aeabi_ddiv+0x51a>
10013556:	45b0      	cmp	r8, r6
10013558:	d800      	bhi.n	1001355c <__aeabi_ddiv+0x338>
1001355a:	e0f0      	b.n	1001373e <__aeabi_ddiv+0x51a>
1001355c:	3c02      	subs	r4, #2
1001355e:	19f6      	adds	r6, r6, r7
10013560:	4643      	mov	r3, r8
10013562:	1af3      	subs	r3, r6, r3
10013564:	4649      	mov	r1, r9
10013566:	0018      	movs	r0, r3
10013568:	9302      	str	r3, [sp, #8]
1001356a:	f7fe fbd3 	bl	10011d14 <__aeabi_uidiv>
1001356e:	9b00      	ldr	r3, [sp, #0]
10013570:	0006      	movs	r6, r0
10013572:	4343      	muls	r3, r0
10013574:	4649      	mov	r1, r9
10013576:	9802      	ldr	r0, [sp, #8]
10013578:	4698      	mov	r8, r3
1001357a:	f7fe fc51 	bl	10011e20 <__aeabi_uidivmod>
1001357e:	042d      	lsls	r5, r5, #16
10013580:	0409      	lsls	r1, r1, #16
10013582:	0c2d      	lsrs	r5, r5, #16
10013584:	430d      	orrs	r5, r1
10013586:	45a8      	cmp	r8, r5
10013588:	d909      	bls.n	1001359e <__aeabi_ddiv+0x37a>
1001358a:	19ed      	adds	r5, r5, r7
1001358c:	1e73      	subs	r3, r6, #1
1001358e:	42af      	cmp	r7, r5
10013590:	d900      	bls.n	10013594 <__aeabi_ddiv+0x370>
10013592:	e0d6      	b.n	10013742 <__aeabi_ddiv+0x51e>
10013594:	45a8      	cmp	r8, r5
10013596:	d800      	bhi.n	1001359a <__aeabi_ddiv+0x376>
10013598:	e0d3      	b.n	10013742 <__aeabi_ddiv+0x51e>
1001359a:	3e02      	subs	r6, #2
1001359c:	19ed      	adds	r5, r5, r7
1001359e:	0424      	lsls	r4, r4, #16
100135a0:	0021      	movs	r1, r4
100135a2:	4643      	mov	r3, r8
100135a4:	4331      	orrs	r1, r6
100135a6:	9e04      	ldr	r6, [sp, #16]
100135a8:	9a05      	ldr	r2, [sp, #20]
100135aa:	0030      	movs	r0, r6
100135ac:	1aed      	subs	r5, r5, r3
100135ae:	040b      	lsls	r3, r1, #16
100135b0:	0c0c      	lsrs	r4, r1, #16
100135b2:	0c1b      	lsrs	r3, r3, #16
100135b4:	4358      	muls	r0, r3
100135b6:	4366      	muls	r6, r4
100135b8:	4353      	muls	r3, r2
100135ba:	4354      	muls	r4, r2
100135bc:	199a      	adds	r2, r3, r6
100135be:	0c03      	lsrs	r3, r0, #16
100135c0:	189b      	adds	r3, r3, r2
100135c2:	429e      	cmp	r6, r3
100135c4:	d903      	bls.n	100135ce <__aeabi_ddiv+0x3aa>
100135c6:	2280      	movs	r2, #128	; 0x80
100135c8:	0252      	lsls	r2, r2, #9
100135ca:	4694      	mov	ip, r2
100135cc:	4464      	add	r4, ip
100135ce:	0c1a      	lsrs	r2, r3, #16
100135d0:	0400      	lsls	r0, r0, #16
100135d2:	041b      	lsls	r3, r3, #16
100135d4:	0c00      	lsrs	r0, r0, #16
100135d6:	1914      	adds	r4, r2, r4
100135d8:	181b      	adds	r3, r3, r0
100135da:	42a5      	cmp	r5, r4
100135dc:	d350      	bcc.n	10013680 <__aeabi_ddiv+0x45c>
100135de:	d04d      	beq.n	1001367c <__aeabi_ddiv+0x458>
100135e0:	2301      	movs	r3, #1
100135e2:	4319      	orrs	r1, r3
100135e4:	4a96      	ldr	r2, [pc, #600]	; (10013840 <__aeabi_ddiv+0x61c>)
100135e6:	9b01      	ldr	r3, [sp, #4]
100135e8:	4694      	mov	ip, r2
100135ea:	4463      	add	r3, ip
100135ec:	2b00      	cmp	r3, #0
100135ee:	dc00      	bgt.n	100135f2 <__aeabi_ddiv+0x3ce>
100135f0:	e6f3      	b.n	100133da <__aeabi_ddiv+0x1b6>
100135f2:	074a      	lsls	r2, r1, #29
100135f4:	d009      	beq.n	1001360a <__aeabi_ddiv+0x3e6>
100135f6:	220f      	movs	r2, #15
100135f8:	400a      	ands	r2, r1
100135fa:	2a04      	cmp	r2, #4
100135fc:	d005      	beq.n	1001360a <__aeabi_ddiv+0x3e6>
100135fe:	1d0a      	adds	r2, r1, #4
10013600:	428a      	cmp	r2, r1
10013602:	4189      	sbcs	r1, r1
10013604:	4249      	negs	r1, r1
10013606:	448b      	add	fp, r1
10013608:	0011      	movs	r1, r2
1001360a:	465a      	mov	r2, fp
1001360c:	01d2      	lsls	r2, r2, #7
1001360e:	d508      	bpl.n	10013622 <__aeabi_ddiv+0x3fe>
10013610:	465a      	mov	r2, fp
10013612:	4b8c      	ldr	r3, [pc, #560]	; (10013844 <__aeabi_ddiv+0x620>)
10013614:	401a      	ands	r2, r3
10013616:	4693      	mov	fp, r2
10013618:	2280      	movs	r2, #128	; 0x80
1001361a:	00d2      	lsls	r2, r2, #3
1001361c:	4694      	mov	ip, r2
1001361e:	9b01      	ldr	r3, [sp, #4]
10013620:	4463      	add	r3, ip
10013622:	4a89      	ldr	r2, [pc, #548]	; (10013848 <__aeabi_ddiv+0x624>)
10013624:	4293      	cmp	r3, r2
10013626:	dd00      	ble.n	1001362a <__aeabi_ddiv+0x406>
10013628:	e65b      	b.n	100132e2 <__aeabi_ddiv+0xbe>
1001362a:	465a      	mov	r2, fp
1001362c:	08c9      	lsrs	r1, r1, #3
1001362e:	0750      	lsls	r0, r2, #29
10013630:	4308      	orrs	r0, r1
10013632:	0256      	lsls	r6, r2, #9
10013634:	4651      	mov	r1, sl
10013636:	2201      	movs	r2, #1
10013638:	055b      	lsls	r3, r3, #21
1001363a:	4681      	mov	r9, r0
1001363c:	0b36      	lsrs	r6, r6, #12
1001363e:	0d5b      	lsrs	r3, r3, #21
10013640:	400a      	ands	r2, r1
10013642:	e655      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013644:	2380      	movs	r3, #128	; 0x80
10013646:	031b      	lsls	r3, r3, #12
10013648:	421e      	tst	r6, r3
1001364a:	d011      	beq.n	10013670 <__aeabi_ddiv+0x44c>
1001364c:	465a      	mov	r2, fp
1001364e:	421a      	tst	r2, r3
10013650:	d10e      	bne.n	10013670 <__aeabi_ddiv+0x44c>
10013652:	465e      	mov	r6, fp
10013654:	431e      	orrs	r6, r3
10013656:	0336      	lsls	r6, r6, #12
10013658:	0b36      	lsrs	r6, r6, #12
1001365a:	002a      	movs	r2, r5
1001365c:	4689      	mov	r9, r1
1001365e:	4b7b      	ldr	r3, [pc, #492]	; (1001384c <__aeabi_ddiv+0x628>)
10013660:	e646      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013662:	2b03      	cmp	r3, #3
10013664:	d100      	bne.n	10013668 <__aeabi_ddiv+0x444>
10013666:	e0e1      	b.n	1001382c <__aeabi_ddiv+0x608>
10013668:	2b01      	cmp	r3, #1
1001366a:	d1bb      	bne.n	100135e4 <__aeabi_ddiv+0x3c0>
1001366c:	401a      	ands	r2, r3
1001366e:	e6bb      	b.n	100133e8 <__aeabi_ddiv+0x1c4>
10013670:	431e      	orrs	r6, r3
10013672:	0336      	lsls	r6, r6, #12
10013674:	0b36      	lsrs	r6, r6, #12
10013676:	4642      	mov	r2, r8
10013678:	4b74      	ldr	r3, [pc, #464]	; (1001384c <__aeabi_ddiv+0x628>)
1001367a:	e639      	b.n	100132f0 <__aeabi_ddiv+0xcc>
1001367c:	2b00      	cmp	r3, #0
1001367e:	d0b1      	beq.n	100135e4 <__aeabi_ddiv+0x3c0>
10013680:	197d      	adds	r5, r7, r5
10013682:	1e4a      	subs	r2, r1, #1
10013684:	42af      	cmp	r7, r5
10013686:	d952      	bls.n	1001372e <__aeabi_ddiv+0x50a>
10013688:	0011      	movs	r1, r2
1001368a:	42a5      	cmp	r5, r4
1001368c:	d1a8      	bne.n	100135e0 <__aeabi_ddiv+0x3bc>
1001368e:	9a03      	ldr	r2, [sp, #12]
10013690:	429a      	cmp	r2, r3
10013692:	d1a5      	bne.n	100135e0 <__aeabi_ddiv+0x3bc>
10013694:	e7a6      	b.n	100135e4 <__aeabi_ddiv+0x3c0>
10013696:	0003      	movs	r3, r0
10013698:	003e      	movs	r6, r7
1001369a:	3b28      	subs	r3, #40	; 0x28
1001369c:	409e      	lsls	r6, r3
1001369e:	2300      	movs	r3, #0
100136a0:	4699      	mov	r9, r3
100136a2:	e654      	b.n	1001334e <__aeabi_ddiv+0x12a>
100136a4:	f001 f960 	bl	10014968 <__clzsi2>
100136a8:	3020      	adds	r0, #32
100136aa:	e641      	b.n	10013330 <__aeabi_ddiv+0x10c>
100136ac:	0003      	movs	r3, r0
100136ae:	4652      	mov	r2, sl
100136b0:	3b28      	subs	r3, #40	; 0x28
100136b2:	409a      	lsls	r2, r3
100136b4:	2100      	movs	r1, #0
100136b6:	4693      	mov	fp, r2
100136b8:	e677      	b.n	100133aa <__aeabi_ddiv+0x186>
100136ba:	4650      	mov	r0, sl
100136bc:	f001 f954 	bl	10014968 <__clzsi2>
100136c0:	3020      	adds	r0, #32
100136c2:	e65e      	b.n	10013382 <__aeabi_ddiv+0x15e>
100136c4:	9b02      	ldr	r3, [sp, #8]
100136c6:	2600      	movs	r6, #0
100136c8:	42ab      	cmp	r3, r5
100136ca:	d300      	bcc.n	100136ce <__aeabi_ddiv+0x4aa>
100136cc:	e723      	b.n	10013516 <__aeabi_ddiv+0x2f2>
100136ce:	9e03      	ldr	r6, [sp, #12]
100136d0:	9902      	ldr	r1, [sp, #8]
100136d2:	46b4      	mov	ip, r6
100136d4:	4461      	add	r1, ip
100136d6:	4688      	mov	r8, r1
100136d8:	45b0      	cmp	r8, r6
100136da:	41b6      	sbcs	r6, r6
100136dc:	465b      	mov	r3, fp
100136de:	4276      	negs	r6, r6
100136e0:	19f6      	adds	r6, r6, r7
100136e2:	18b2      	adds	r2, r6, r2
100136e4:	3b01      	subs	r3, #1
100136e6:	9102      	str	r1, [sp, #8]
100136e8:	4297      	cmp	r7, r2
100136ea:	d213      	bcs.n	10013714 <__aeabi_ddiv+0x4f0>
100136ec:	4290      	cmp	r0, r2
100136ee:	d84f      	bhi.n	10013790 <__aeabi_ddiv+0x56c>
100136f0:	d100      	bne.n	100136f4 <__aeabi_ddiv+0x4d0>
100136f2:	e08e      	b.n	10013812 <__aeabi_ddiv+0x5ee>
100136f4:	1a16      	subs	r6, r2, r0
100136f6:	469b      	mov	fp, r3
100136f8:	e70d      	b.n	10013516 <__aeabi_ddiv+0x2f2>
100136fa:	4589      	cmp	r9, r1
100136fc:	d200      	bcs.n	10013700 <__aeabi_ddiv+0x4dc>
100136fe:	e68e      	b.n	1001341e <__aeabi_ddiv+0x1fa>
10013700:	0874      	lsrs	r4, r6, #1
10013702:	464b      	mov	r3, r9
10013704:	07f6      	lsls	r6, r6, #31
10013706:	0035      	movs	r5, r6
10013708:	085b      	lsrs	r3, r3, #1
1001370a:	431d      	orrs	r5, r3
1001370c:	464b      	mov	r3, r9
1001370e:	07db      	lsls	r3, r3, #31
10013710:	9302      	str	r3, [sp, #8]
10013712:	e68b      	b.n	1001342c <__aeabi_ddiv+0x208>
10013714:	4297      	cmp	r7, r2
10013716:	d1ed      	bne.n	100136f4 <__aeabi_ddiv+0x4d0>
10013718:	9903      	ldr	r1, [sp, #12]
1001371a:	9c02      	ldr	r4, [sp, #8]
1001371c:	42a1      	cmp	r1, r4
1001371e:	d9e5      	bls.n	100136ec <__aeabi_ddiv+0x4c8>
10013720:	1a3e      	subs	r6, r7, r0
10013722:	469b      	mov	fp, r3
10013724:	e6f7      	b.n	10013516 <__aeabi_ddiv+0x2f2>
10013726:	4698      	mov	r8, r3
10013728:	e6ca      	b.n	100134c0 <__aeabi_ddiv+0x29c>
1001372a:	001e      	movs	r6, r3
1001372c:	e6a5      	b.n	1001347a <__aeabi_ddiv+0x256>
1001372e:	42ac      	cmp	r4, r5
10013730:	d83e      	bhi.n	100137b0 <__aeabi_ddiv+0x58c>
10013732:	d074      	beq.n	1001381e <__aeabi_ddiv+0x5fa>
10013734:	0011      	movs	r1, r2
10013736:	e753      	b.n	100135e0 <__aeabi_ddiv+0x3bc>
10013738:	2101      	movs	r1, #1
1001373a:	4249      	negs	r1, r1
1001373c:	e752      	b.n	100135e4 <__aeabi_ddiv+0x3c0>
1001373e:	001c      	movs	r4, r3
10013740:	e70e      	b.n	10013560 <__aeabi_ddiv+0x33c>
10013742:	001e      	movs	r6, r3
10013744:	e72b      	b.n	1001359e <__aeabi_ddiv+0x37a>
10013746:	2d1f      	cmp	r5, #31
10013748:	dc3c      	bgt.n	100137c4 <__aeabi_ddiv+0x5a0>
1001374a:	2320      	movs	r3, #32
1001374c:	000a      	movs	r2, r1
1001374e:	4658      	mov	r0, fp
10013750:	1b5b      	subs	r3, r3, r5
10013752:	4098      	lsls	r0, r3
10013754:	40ea      	lsrs	r2, r5
10013756:	4099      	lsls	r1, r3
10013758:	4302      	orrs	r2, r0
1001375a:	1e48      	subs	r0, r1, #1
1001375c:	4181      	sbcs	r1, r0
1001375e:	465e      	mov	r6, fp
10013760:	4311      	orrs	r1, r2
10013762:	40ee      	lsrs	r6, r5
10013764:	074b      	lsls	r3, r1, #29
10013766:	d009      	beq.n	1001377c <__aeabi_ddiv+0x558>
10013768:	230f      	movs	r3, #15
1001376a:	400b      	ands	r3, r1
1001376c:	2b04      	cmp	r3, #4
1001376e:	d005      	beq.n	1001377c <__aeabi_ddiv+0x558>
10013770:	000b      	movs	r3, r1
10013772:	1d19      	adds	r1, r3, #4
10013774:	4299      	cmp	r1, r3
10013776:	419b      	sbcs	r3, r3
10013778:	425b      	negs	r3, r3
1001377a:	18f6      	adds	r6, r6, r3
1001377c:	0233      	lsls	r3, r6, #8
1001377e:	d53c      	bpl.n	100137fa <__aeabi_ddiv+0x5d6>
10013780:	4653      	mov	r3, sl
10013782:	2201      	movs	r2, #1
10013784:	2100      	movs	r1, #0
10013786:	401a      	ands	r2, r3
10013788:	2600      	movs	r6, #0
1001378a:	2301      	movs	r3, #1
1001378c:	4689      	mov	r9, r1
1001378e:	e5af      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013790:	2302      	movs	r3, #2
10013792:	425b      	negs	r3, r3
10013794:	469c      	mov	ip, r3
10013796:	9c03      	ldr	r4, [sp, #12]
10013798:	44e3      	add	fp, ip
1001379a:	46a4      	mov	ip, r4
1001379c:	9b02      	ldr	r3, [sp, #8]
1001379e:	4463      	add	r3, ip
100137a0:	4698      	mov	r8, r3
100137a2:	45a0      	cmp	r8, r4
100137a4:	41b6      	sbcs	r6, r6
100137a6:	4276      	negs	r6, r6
100137a8:	19f6      	adds	r6, r6, r7
100137aa:	9302      	str	r3, [sp, #8]
100137ac:	18b2      	adds	r2, r6, r2
100137ae:	e6b1      	b.n	10013514 <__aeabi_ddiv+0x2f0>
100137b0:	9803      	ldr	r0, [sp, #12]
100137b2:	1e8a      	subs	r2, r1, #2
100137b4:	0041      	lsls	r1, r0, #1
100137b6:	4281      	cmp	r1, r0
100137b8:	41b6      	sbcs	r6, r6
100137ba:	4276      	negs	r6, r6
100137bc:	19f6      	adds	r6, r6, r7
100137be:	19ad      	adds	r5, r5, r6
100137c0:	9103      	str	r1, [sp, #12]
100137c2:	e761      	b.n	10013688 <__aeabi_ddiv+0x464>
100137c4:	221f      	movs	r2, #31
100137c6:	4252      	negs	r2, r2
100137c8:	1ad3      	subs	r3, r2, r3
100137ca:	465a      	mov	r2, fp
100137cc:	40da      	lsrs	r2, r3
100137ce:	0013      	movs	r3, r2
100137d0:	2d20      	cmp	r5, #32
100137d2:	d029      	beq.n	10013828 <__aeabi_ddiv+0x604>
100137d4:	2240      	movs	r2, #64	; 0x40
100137d6:	4658      	mov	r0, fp
100137d8:	1b55      	subs	r5, r2, r5
100137da:	40a8      	lsls	r0, r5
100137dc:	4301      	orrs	r1, r0
100137de:	1e48      	subs	r0, r1, #1
100137e0:	4181      	sbcs	r1, r0
100137e2:	2007      	movs	r0, #7
100137e4:	430b      	orrs	r3, r1
100137e6:	4018      	ands	r0, r3
100137e8:	2600      	movs	r6, #0
100137ea:	2800      	cmp	r0, #0
100137ec:	d009      	beq.n	10013802 <__aeabi_ddiv+0x5de>
100137ee:	220f      	movs	r2, #15
100137f0:	2600      	movs	r6, #0
100137f2:	401a      	ands	r2, r3
100137f4:	0019      	movs	r1, r3
100137f6:	2a04      	cmp	r2, #4
100137f8:	d1bb      	bne.n	10013772 <__aeabi_ddiv+0x54e>
100137fa:	000b      	movs	r3, r1
100137fc:	0770      	lsls	r0, r6, #29
100137fe:	0276      	lsls	r6, r6, #9
10013800:	0b36      	lsrs	r6, r6, #12
10013802:	08db      	lsrs	r3, r3, #3
10013804:	4303      	orrs	r3, r0
10013806:	4699      	mov	r9, r3
10013808:	2201      	movs	r2, #1
1001380a:	4653      	mov	r3, sl
1001380c:	401a      	ands	r2, r3
1001380e:	2300      	movs	r3, #0
10013810:	e56e      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013812:	9902      	ldr	r1, [sp, #8]
10013814:	428d      	cmp	r5, r1
10013816:	d8bb      	bhi.n	10013790 <__aeabi_ddiv+0x56c>
10013818:	469b      	mov	fp, r3
1001381a:	2600      	movs	r6, #0
1001381c:	e67b      	b.n	10013516 <__aeabi_ddiv+0x2f2>
1001381e:	9803      	ldr	r0, [sp, #12]
10013820:	4298      	cmp	r0, r3
10013822:	d3c5      	bcc.n	100137b0 <__aeabi_ddiv+0x58c>
10013824:	0011      	movs	r1, r2
10013826:	e732      	b.n	1001368e <__aeabi_ddiv+0x46a>
10013828:	2000      	movs	r0, #0
1001382a:	e7d7      	b.n	100137dc <__aeabi_ddiv+0x5b8>
1001382c:	2680      	movs	r6, #128	; 0x80
1001382e:	465b      	mov	r3, fp
10013830:	0336      	lsls	r6, r6, #12
10013832:	431e      	orrs	r6, r3
10013834:	0336      	lsls	r6, r6, #12
10013836:	0b36      	lsrs	r6, r6, #12
10013838:	9a00      	ldr	r2, [sp, #0]
1001383a:	4689      	mov	r9, r1
1001383c:	4b03      	ldr	r3, [pc, #12]	; (1001384c <__aeabi_ddiv+0x628>)
1001383e:	e557      	b.n	100132f0 <__aeabi_ddiv+0xcc>
10013840:	000003ff 	.word	0x000003ff
10013844:	feffffff 	.word	0xfeffffff
10013848:	000007fe 	.word	0x000007fe
1001384c:	000007ff 	.word	0x000007ff

10013850 <__eqdf2>:
10013850:	b5f0      	push	{r4, r5, r6, r7, lr}
10013852:	465f      	mov	r7, fp
10013854:	4656      	mov	r6, sl
10013856:	464d      	mov	r5, r9
10013858:	4644      	mov	r4, r8
1001385a:	b4f0      	push	{r4, r5, r6, r7}
1001385c:	031f      	lsls	r7, r3, #12
1001385e:	005c      	lsls	r4, r3, #1
10013860:	0fdb      	lsrs	r3, r3, #31
10013862:	469a      	mov	sl, r3
10013864:	4b19      	ldr	r3, [pc, #100]	; (100138cc <__eqdf2+0x7c>)
10013866:	030e      	lsls	r6, r1, #12
10013868:	004d      	lsls	r5, r1, #1
1001386a:	0fc9      	lsrs	r1, r1, #31
1001386c:	4680      	mov	r8, r0
1001386e:	0b36      	lsrs	r6, r6, #12
10013870:	0d6d      	lsrs	r5, r5, #21
10013872:	468b      	mov	fp, r1
10013874:	4691      	mov	r9, r2
10013876:	0b3f      	lsrs	r7, r7, #12
10013878:	0d64      	lsrs	r4, r4, #21
1001387a:	429d      	cmp	r5, r3
1001387c:	d019      	beq.n	100138b2 <__eqdf2+0x62>
1001387e:	4b13      	ldr	r3, [pc, #76]	; (100138cc <__eqdf2+0x7c>)
10013880:	429c      	cmp	r4, r3
10013882:	d01b      	beq.n	100138bc <__eqdf2+0x6c>
10013884:	2301      	movs	r3, #1
10013886:	42a5      	cmp	r5, r4
10013888:	d006      	beq.n	10013898 <__eqdf2+0x48>
1001388a:	0018      	movs	r0, r3
1001388c:	bc3c      	pop	{r2, r3, r4, r5}
1001388e:	4690      	mov	r8, r2
10013890:	4699      	mov	r9, r3
10013892:	46a2      	mov	sl, r4
10013894:	46ab      	mov	fp, r5
10013896:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013898:	42be      	cmp	r6, r7
1001389a:	d1f6      	bne.n	1001388a <__eqdf2+0x3a>
1001389c:	45c8      	cmp	r8, r9
1001389e:	d1f4      	bne.n	1001388a <__eqdf2+0x3a>
100138a0:	45d3      	cmp	fp, sl
100138a2:	d010      	beq.n	100138c6 <__eqdf2+0x76>
100138a4:	2d00      	cmp	r5, #0
100138a6:	d1f0      	bne.n	1001388a <__eqdf2+0x3a>
100138a8:	4330      	orrs	r0, r6
100138aa:	0003      	movs	r3, r0
100138ac:	1e5a      	subs	r2, r3, #1
100138ae:	4193      	sbcs	r3, r2
100138b0:	e7eb      	b.n	1001388a <__eqdf2+0x3a>
100138b2:	0031      	movs	r1, r6
100138b4:	2301      	movs	r3, #1
100138b6:	4301      	orrs	r1, r0
100138b8:	d1e7      	bne.n	1001388a <__eqdf2+0x3a>
100138ba:	e7e0      	b.n	1001387e <__eqdf2+0x2e>
100138bc:	433a      	orrs	r2, r7
100138be:	2301      	movs	r3, #1
100138c0:	2a00      	cmp	r2, #0
100138c2:	d1e2      	bne.n	1001388a <__eqdf2+0x3a>
100138c4:	e7de      	b.n	10013884 <__eqdf2+0x34>
100138c6:	2300      	movs	r3, #0
100138c8:	e7df      	b.n	1001388a <__eqdf2+0x3a>
100138ca:	46c0      	nop			; (mov r8, r8)
100138cc:	000007ff 	.word	0x000007ff

100138d0 <__gedf2>:
100138d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100138d2:	465f      	mov	r7, fp
100138d4:	4644      	mov	r4, r8
100138d6:	4656      	mov	r6, sl
100138d8:	464d      	mov	r5, r9
100138da:	b4f0      	push	{r4, r5, r6, r7}
100138dc:	031f      	lsls	r7, r3, #12
100138de:	0b3c      	lsrs	r4, r7, #12
100138e0:	4f2c      	ldr	r7, [pc, #176]	; (10013994 <__gedf2+0xc4>)
100138e2:	030e      	lsls	r6, r1, #12
100138e4:	004d      	lsls	r5, r1, #1
100138e6:	46a3      	mov	fp, r4
100138e8:	005c      	lsls	r4, r3, #1
100138ea:	4684      	mov	ip, r0
100138ec:	0b36      	lsrs	r6, r6, #12
100138ee:	0d6d      	lsrs	r5, r5, #21
100138f0:	0fc9      	lsrs	r1, r1, #31
100138f2:	4690      	mov	r8, r2
100138f4:	0d64      	lsrs	r4, r4, #21
100138f6:	0fdb      	lsrs	r3, r3, #31
100138f8:	42bd      	cmp	r5, r7
100138fa:	d02b      	beq.n	10013954 <__gedf2+0x84>
100138fc:	4f25      	ldr	r7, [pc, #148]	; (10013994 <__gedf2+0xc4>)
100138fe:	42bc      	cmp	r4, r7
10013900:	d02e      	beq.n	10013960 <__gedf2+0x90>
10013902:	2d00      	cmp	r5, #0
10013904:	d10e      	bne.n	10013924 <__gedf2+0x54>
10013906:	4330      	orrs	r0, r6
10013908:	0007      	movs	r7, r0
1001390a:	4681      	mov	r9, r0
1001390c:	4278      	negs	r0, r7
1001390e:	4178      	adcs	r0, r7
10013910:	2c00      	cmp	r4, #0
10013912:	d117      	bne.n	10013944 <__gedf2+0x74>
10013914:	465f      	mov	r7, fp
10013916:	433a      	orrs	r2, r7
10013918:	d114      	bne.n	10013944 <__gedf2+0x74>
1001391a:	464b      	mov	r3, r9
1001391c:	2000      	movs	r0, #0
1001391e:	2b00      	cmp	r3, #0
10013920:	d00a      	beq.n	10013938 <__gedf2+0x68>
10013922:	e006      	b.n	10013932 <__gedf2+0x62>
10013924:	2c00      	cmp	r4, #0
10013926:	d102      	bne.n	1001392e <__gedf2+0x5e>
10013928:	4658      	mov	r0, fp
1001392a:	4302      	orrs	r2, r0
1001392c:	d001      	beq.n	10013932 <__gedf2+0x62>
1001392e:	4299      	cmp	r1, r3
10013930:	d01a      	beq.n	10013968 <__gedf2+0x98>
10013932:	2301      	movs	r3, #1
10013934:	4248      	negs	r0, r1
10013936:	4318      	orrs	r0, r3
10013938:	bc3c      	pop	{r2, r3, r4, r5}
1001393a:	4690      	mov	r8, r2
1001393c:	4699      	mov	r9, r3
1001393e:	46a2      	mov	sl, r4
10013940:	46ab      	mov	fp, r5
10013942:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013944:	2800      	cmp	r0, #0
10013946:	d0f2      	beq.n	1001392e <__gedf2+0x5e>
10013948:	4258      	negs	r0, r3
1001394a:	4158      	adcs	r0, r3
1001394c:	2201      	movs	r2, #1
1001394e:	4240      	negs	r0, r0
10013950:	4310      	orrs	r0, r2
10013952:	e7f1      	b.n	10013938 <__gedf2+0x68>
10013954:	0037      	movs	r7, r6
10013956:	4307      	orrs	r7, r0
10013958:	d0d0      	beq.n	100138fc <__gedf2+0x2c>
1001395a:	2002      	movs	r0, #2
1001395c:	4240      	negs	r0, r0
1001395e:	e7eb      	b.n	10013938 <__gedf2+0x68>
10013960:	465f      	mov	r7, fp
10013962:	4317      	orrs	r7, r2
10013964:	d0cd      	beq.n	10013902 <__gedf2+0x32>
10013966:	e7f8      	b.n	1001395a <__gedf2+0x8a>
10013968:	42a5      	cmp	r5, r4
1001396a:	dce2      	bgt.n	10013932 <__gedf2+0x62>
1001396c:	db05      	blt.n	1001397a <__gedf2+0xaa>
1001396e:	455e      	cmp	r6, fp
10013970:	d8df      	bhi.n	10013932 <__gedf2+0x62>
10013972:	d008      	beq.n	10013986 <__gedf2+0xb6>
10013974:	2000      	movs	r0, #0
10013976:	455e      	cmp	r6, fp
10013978:	d2de      	bcs.n	10013938 <__gedf2+0x68>
1001397a:	4248      	negs	r0, r1
1001397c:	4148      	adcs	r0, r1
1001397e:	2301      	movs	r3, #1
10013980:	4240      	negs	r0, r0
10013982:	4318      	orrs	r0, r3
10013984:	e7d8      	b.n	10013938 <__gedf2+0x68>
10013986:	45c4      	cmp	ip, r8
10013988:	d8d3      	bhi.n	10013932 <__gedf2+0x62>
1001398a:	2000      	movs	r0, #0
1001398c:	45c4      	cmp	ip, r8
1001398e:	d3f4      	bcc.n	1001397a <__gedf2+0xaa>
10013990:	e7d2      	b.n	10013938 <__gedf2+0x68>
10013992:	46c0      	nop			; (mov r8, r8)
10013994:	000007ff 	.word	0x000007ff

10013998 <__ledf2>:
10013998:	b5f0      	push	{r4, r5, r6, r7, lr}
1001399a:	465f      	mov	r7, fp
1001399c:	464d      	mov	r5, r9
1001399e:	4644      	mov	r4, r8
100139a0:	4656      	mov	r6, sl
100139a2:	b4f0      	push	{r4, r5, r6, r7}
100139a4:	031c      	lsls	r4, r3, #12
100139a6:	0b24      	lsrs	r4, r4, #12
100139a8:	46a4      	mov	ip, r4
100139aa:	4c2f      	ldr	r4, [pc, #188]	; (10013a68 <__ledf2+0xd0>)
100139ac:	030f      	lsls	r7, r1, #12
100139ae:	004d      	lsls	r5, r1, #1
100139b0:	005e      	lsls	r6, r3, #1
100139b2:	0fc9      	lsrs	r1, r1, #31
100139b4:	4680      	mov	r8, r0
100139b6:	0b3f      	lsrs	r7, r7, #12
100139b8:	0d6d      	lsrs	r5, r5, #21
100139ba:	468b      	mov	fp, r1
100139bc:	4691      	mov	r9, r2
100139be:	0d76      	lsrs	r6, r6, #21
100139c0:	0fdb      	lsrs	r3, r3, #31
100139c2:	42a5      	cmp	r5, r4
100139c4:	d020      	beq.n	10013a08 <__ledf2+0x70>
100139c6:	4c28      	ldr	r4, [pc, #160]	; (10013a68 <__ledf2+0xd0>)
100139c8:	42a6      	cmp	r6, r4
100139ca:	d022      	beq.n	10013a12 <__ledf2+0x7a>
100139cc:	2d00      	cmp	r5, #0
100139ce:	d112      	bne.n	100139f6 <__ledf2+0x5e>
100139d0:	4338      	orrs	r0, r7
100139d2:	4244      	negs	r4, r0
100139d4:	4144      	adcs	r4, r0
100139d6:	2e00      	cmp	r6, #0
100139d8:	d020      	beq.n	10013a1c <__ledf2+0x84>
100139da:	2c00      	cmp	r4, #0
100139dc:	d00d      	beq.n	100139fa <__ledf2+0x62>
100139de:	425c      	negs	r4, r3
100139e0:	4163      	adcs	r3, r4
100139e2:	2401      	movs	r4, #1
100139e4:	425b      	negs	r3, r3
100139e6:	431c      	orrs	r4, r3
100139e8:	0020      	movs	r0, r4
100139ea:	bc3c      	pop	{r2, r3, r4, r5}
100139ec:	4690      	mov	r8, r2
100139ee:	4699      	mov	r9, r3
100139f0:	46a2      	mov	sl, r4
100139f2:	46ab      	mov	fp, r5
100139f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100139f6:	2e00      	cmp	r6, #0
100139f8:	d017      	beq.n	10013a2a <__ledf2+0x92>
100139fa:	455b      	cmp	r3, fp
100139fc:	d019      	beq.n	10013a32 <__ledf2+0x9a>
100139fe:	465b      	mov	r3, fp
10013a00:	425c      	negs	r4, r3
10013a02:	2301      	movs	r3, #1
10013a04:	431c      	orrs	r4, r3
10013a06:	e7ef      	b.n	100139e8 <__ledf2+0x50>
10013a08:	0039      	movs	r1, r7
10013a0a:	2402      	movs	r4, #2
10013a0c:	4301      	orrs	r1, r0
10013a0e:	d1eb      	bne.n	100139e8 <__ledf2+0x50>
10013a10:	e7d9      	b.n	100139c6 <__ledf2+0x2e>
10013a12:	4661      	mov	r1, ip
10013a14:	2402      	movs	r4, #2
10013a16:	4311      	orrs	r1, r2
10013a18:	d1e6      	bne.n	100139e8 <__ledf2+0x50>
10013a1a:	e7d7      	b.n	100139cc <__ledf2+0x34>
10013a1c:	4661      	mov	r1, ip
10013a1e:	430a      	orrs	r2, r1
10013a20:	d1db      	bne.n	100139da <__ledf2+0x42>
10013a22:	2400      	movs	r4, #0
10013a24:	2800      	cmp	r0, #0
10013a26:	d0df      	beq.n	100139e8 <__ledf2+0x50>
10013a28:	e7e9      	b.n	100139fe <__ledf2+0x66>
10013a2a:	4661      	mov	r1, ip
10013a2c:	430a      	orrs	r2, r1
10013a2e:	d1e4      	bne.n	100139fa <__ledf2+0x62>
10013a30:	e7e5      	b.n	100139fe <__ledf2+0x66>
10013a32:	42b5      	cmp	r5, r6
10013a34:	dd03      	ble.n	10013a3e <__ledf2+0xa6>
10013a36:	2201      	movs	r2, #1
10013a38:	425c      	negs	r4, r3
10013a3a:	4314      	orrs	r4, r2
10013a3c:	e7d4      	b.n	100139e8 <__ledf2+0x50>
10013a3e:	42b5      	cmp	r5, r6
10013a40:	dbcd      	blt.n	100139de <__ledf2+0x46>
10013a42:	4567      	cmp	r7, ip
10013a44:	d8db      	bhi.n	100139fe <__ledf2+0x66>
10013a46:	d009      	beq.n	10013a5c <__ledf2+0xc4>
10013a48:	2400      	movs	r4, #0
10013a4a:	4567      	cmp	r7, ip
10013a4c:	d2cc      	bcs.n	100139e8 <__ledf2+0x50>
10013a4e:	4659      	mov	r1, fp
10013a50:	424c      	negs	r4, r1
10013a52:	4161      	adcs	r1, r4
10013a54:	2401      	movs	r4, #1
10013a56:	4249      	negs	r1, r1
10013a58:	430c      	orrs	r4, r1
10013a5a:	e7c5      	b.n	100139e8 <__ledf2+0x50>
10013a5c:	45c8      	cmp	r8, r9
10013a5e:	d8ce      	bhi.n	100139fe <__ledf2+0x66>
10013a60:	2400      	movs	r4, #0
10013a62:	45c8      	cmp	r8, r9
10013a64:	d3f3      	bcc.n	10013a4e <__ledf2+0xb6>
10013a66:	e7bf      	b.n	100139e8 <__ledf2+0x50>
10013a68:	000007ff 	.word	0x000007ff

10013a6c <__aeabi_dmul>:
10013a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a6e:	465f      	mov	r7, fp
10013a70:	4656      	mov	r6, sl
10013a72:	464d      	mov	r5, r9
10013a74:	4644      	mov	r4, r8
10013a76:	b4f0      	push	{r4, r5, r6, r7}
10013a78:	030d      	lsls	r5, r1, #12
10013a7a:	4699      	mov	r9, r3
10013a7c:	004e      	lsls	r6, r1, #1
10013a7e:	0b2b      	lsrs	r3, r5, #12
10013a80:	b087      	sub	sp, #28
10013a82:	0007      	movs	r7, r0
10013a84:	4692      	mov	sl, r2
10013a86:	4680      	mov	r8, r0
10013a88:	469b      	mov	fp, r3
10013a8a:	0d76      	lsrs	r6, r6, #21
10013a8c:	0fcc      	lsrs	r4, r1, #31
10013a8e:	2e00      	cmp	r6, #0
10013a90:	d069      	beq.n	10013b66 <__aeabi_dmul+0xfa>
10013a92:	4b6d      	ldr	r3, [pc, #436]	; (10013c48 <__aeabi_dmul+0x1dc>)
10013a94:	429e      	cmp	r6, r3
10013a96:	d035      	beq.n	10013b04 <__aeabi_dmul+0x98>
10013a98:	465b      	mov	r3, fp
10013a9a:	2280      	movs	r2, #128	; 0x80
10013a9c:	00dd      	lsls	r5, r3, #3
10013a9e:	0412      	lsls	r2, r2, #16
10013aa0:	0f43      	lsrs	r3, r0, #29
10013aa2:	4313      	orrs	r3, r2
10013aa4:	432b      	orrs	r3, r5
10013aa6:	469b      	mov	fp, r3
10013aa8:	00c3      	lsls	r3, r0, #3
10013aaa:	4698      	mov	r8, r3
10013aac:	4b67      	ldr	r3, [pc, #412]	; (10013c4c <__aeabi_dmul+0x1e0>)
10013aae:	2700      	movs	r7, #0
10013ab0:	469c      	mov	ip, r3
10013ab2:	2300      	movs	r3, #0
10013ab4:	4466      	add	r6, ip
10013ab6:	9301      	str	r3, [sp, #4]
10013ab8:	464a      	mov	r2, r9
10013aba:	0315      	lsls	r5, r2, #12
10013abc:	0050      	lsls	r0, r2, #1
10013abe:	0fd2      	lsrs	r2, r2, #31
10013ac0:	4653      	mov	r3, sl
10013ac2:	0b2d      	lsrs	r5, r5, #12
10013ac4:	0d40      	lsrs	r0, r0, #21
10013ac6:	4691      	mov	r9, r2
10013ac8:	d100      	bne.n	10013acc <__aeabi_dmul+0x60>
10013aca:	e076      	b.n	10013bba <__aeabi_dmul+0x14e>
10013acc:	4a5e      	ldr	r2, [pc, #376]	; (10013c48 <__aeabi_dmul+0x1dc>)
10013ace:	4290      	cmp	r0, r2
10013ad0:	d06c      	beq.n	10013bac <__aeabi_dmul+0x140>
10013ad2:	2280      	movs	r2, #128	; 0x80
10013ad4:	0f5b      	lsrs	r3, r3, #29
10013ad6:	0412      	lsls	r2, r2, #16
10013ad8:	4313      	orrs	r3, r2
10013ada:	4a5c      	ldr	r2, [pc, #368]	; (10013c4c <__aeabi_dmul+0x1e0>)
10013adc:	00ed      	lsls	r5, r5, #3
10013ade:	4694      	mov	ip, r2
10013ae0:	431d      	orrs	r5, r3
10013ae2:	4653      	mov	r3, sl
10013ae4:	2200      	movs	r2, #0
10013ae6:	00db      	lsls	r3, r3, #3
10013ae8:	4460      	add	r0, ip
10013aea:	4649      	mov	r1, r9
10013aec:	1836      	adds	r6, r6, r0
10013aee:	1c70      	adds	r0, r6, #1
10013af0:	4061      	eors	r1, r4
10013af2:	9002      	str	r0, [sp, #8]
10013af4:	4317      	orrs	r7, r2
10013af6:	2f0f      	cmp	r7, #15
10013af8:	d900      	bls.n	10013afc <__aeabi_dmul+0x90>
10013afa:	e0af      	b.n	10013c5c <__aeabi_dmul+0x1f0>
10013afc:	4854      	ldr	r0, [pc, #336]	; (10013c50 <__aeabi_dmul+0x1e4>)
10013afe:	00bf      	lsls	r7, r7, #2
10013b00:	59c7      	ldr	r7, [r0, r7]
10013b02:	46bf      	mov	pc, r7
10013b04:	465b      	mov	r3, fp
10013b06:	431f      	orrs	r7, r3
10013b08:	d000      	beq.n	10013b0c <__aeabi_dmul+0xa0>
10013b0a:	e088      	b.n	10013c1e <__aeabi_dmul+0x1b2>
10013b0c:	2300      	movs	r3, #0
10013b0e:	469b      	mov	fp, r3
10013b10:	4698      	mov	r8, r3
10013b12:	3302      	adds	r3, #2
10013b14:	2708      	movs	r7, #8
10013b16:	9301      	str	r3, [sp, #4]
10013b18:	e7ce      	b.n	10013ab8 <__aeabi_dmul+0x4c>
10013b1a:	4649      	mov	r1, r9
10013b1c:	2a02      	cmp	r2, #2
10013b1e:	d06a      	beq.n	10013bf6 <__aeabi_dmul+0x18a>
10013b20:	2a03      	cmp	r2, #3
10013b22:	d100      	bne.n	10013b26 <__aeabi_dmul+0xba>
10013b24:	e209      	b.n	10013f3a <__aeabi_dmul+0x4ce>
10013b26:	2a01      	cmp	r2, #1
10013b28:	d000      	beq.n	10013b2c <__aeabi_dmul+0xc0>
10013b2a:	e1bb      	b.n	10013ea4 <__aeabi_dmul+0x438>
10013b2c:	4011      	ands	r1, r2
10013b2e:	2200      	movs	r2, #0
10013b30:	2300      	movs	r3, #0
10013b32:	2500      	movs	r5, #0
10013b34:	4690      	mov	r8, r2
10013b36:	b2cc      	uxtb	r4, r1
10013b38:	2100      	movs	r1, #0
10013b3a:	032d      	lsls	r5, r5, #12
10013b3c:	0d0a      	lsrs	r2, r1, #20
10013b3e:	0512      	lsls	r2, r2, #20
10013b40:	0b2d      	lsrs	r5, r5, #12
10013b42:	4315      	orrs	r5, r2
10013b44:	4a43      	ldr	r2, [pc, #268]	; (10013c54 <__aeabi_dmul+0x1e8>)
10013b46:	051b      	lsls	r3, r3, #20
10013b48:	4015      	ands	r5, r2
10013b4a:	431d      	orrs	r5, r3
10013b4c:	006d      	lsls	r5, r5, #1
10013b4e:	07e4      	lsls	r4, r4, #31
10013b50:	086d      	lsrs	r5, r5, #1
10013b52:	4325      	orrs	r5, r4
10013b54:	4640      	mov	r0, r8
10013b56:	0029      	movs	r1, r5
10013b58:	b007      	add	sp, #28
10013b5a:	bc3c      	pop	{r2, r3, r4, r5}
10013b5c:	4690      	mov	r8, r2
10013b5e:	4699      	mov	r9, r3
10013b60:	46a2      	mov	sl, r4
10013b62:	46ab      	mov	fp, r5
10013b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b66:	4303      	orrs	r3, r0
10013b68:	d052      	beq.n	10013c10 <__aeabi_dmul+0x1a4>
10013b6a:	465b      	mov	r3, fp
10013b6c:	2b00      	cmp	r3, #0
10013b6e:	d100      	bne.n	10013b72 <__aeabi_dmul+0x106>
10013b70:	e18a      	b.n	10013e88 <__aeabi_dmul+0x41c>
10013b72:	4658      	mov	r0, fp
10013b74:	f000 fef8 	bl	10014968 <__clzsi2>
10013b78:	0003      	movs	r3, r0
10013b7a:	3b0b      	subs	r3, #11
10013b7c:	2b1c      	cmp	r3, #28
10013b7e:	dd00      	ble.n	10013b82 <__aeabi_dmul+0x116>
10013b80:	e17b      	b.n	10013e7a <__aeabi_dmul+0x40e>
10013b82:	221d      	movs	r2, #29
10013b84:	1ad3      	subs	r3, r2, r3
10013b86:	003a      	movs	r2, r7
10013b88:	0001      	movs	r1, r0
10013b8a:	465d      	mov	r5, fp
10013b8c:	40da      	lsrs	r2, r3
10013b8e:	3908      	subs	r1, #8
10013b90:	408d      	lsls	r5, r1
10013b92:	0013      	movs	r3, r2
10013b94:	408f      	lsls	r7, r1
10013b96:	432b      	orrs	r3, r5
10013b98:	469b      	mov	fp, r3
10013b9a:	46b8      	mov	r8, r7
10013b9c:	4b2e      	ldr	r3, [pc, #184]	; (10013c58 <__aeabi_dmul+0x1ec>)
10013b9e:	2700      	movs	r7, #0
10013ba0:	469c      	mov	ip, r3
10013ba2:	2300      	movs	r3, #0
10013ba4:	4460      	add	r0, ip
10013ba6:	4246      	negs	r6, r0
10013ba8:	9301      	str	r3, [sp, #4]
10013baa:	e785      	b.n	10013ab8 <__aeabi_dmul+0x4c>
10013bac:	4652      	mov	r2, sl
10013bae:	432a      	orrs	r2, r5
10013bb0:	d12c      	bne.n	10013c0c <__aeabi_dmul+0x1a0>
10013bb2:	2500      	movs	r5, #0
10013bb4:	2300      	movs	r3, #0
10013bb6:	2202      	movs	r2, #2
10013bb8:	e797      	b.n	10013aea <__aeabi_dmul+0x7e>
10013bba:	4652      	mov	r2, sl
10013bbc:	432a      	orrs	r2, r5
10013bbe:	d021      	beq.n	10013c04 <__aeabi_dmul+0x198>
10013bc0:	2d00      	cmp	r5, #0
10013bc2:	d100      	bne.n	10013bc6 <__aeabi_dmul+0x15a>
10013bc4:	e154      	b.n	10013e70 <__aeabi_dmul+0x404>
10013bc6:	0028      	movs	r0, r5
10013bc8:	f000 fece 	bl	10014968 <__clzsi2>
10013bcc:	0003      	movs	r3, r0
10013bce:	3b0b      	subs	r3, #11
10013bd0:	2b1c      	cmp	r3, #28
10013bd2:	dd00      	ble.n	10013bd6 <__aeabi_dmul+0x16a>
10013bd4:	e146      	b.n	10013e64 <__aeabi_dmul+0x3f8>
10013bd6:	211d      	movs	r1, #29
10013bd8:	1acb      	subs	r3, r1, r3
10013bda:	4651      	mov	r1, sl
10013bdc:	0002      	movs	r2, r0
10013bde:	40d9      	lsrs	r1, r3
10013be0:	4653      	mov	r3, sl
10013be2:	3a08      	subs	r2, #8
10013be4:	4095      	lsls	r5, r2
10013be6:	4093      	lsls	r3, r2
10013be8:	430d      	orrs	r5, r1
10013bea:	4a1b      	ldr	r2, [pc, #108]	; (10013c58 <__aeabi_dmul+0x1ec>)
10013bec:	4694      	mov	ip, r2
10013bee:	4460      	add	r0, ip
10013bf0:	4240      	negs	r0, r0
10013bf2:	2200      	movs	r2, #0
10013bf4:	e779      	b.n	10013aea <__aeabi_dmul+0x7e>
10013bf6:	2401      	movs	r4, #1
10013bf8:	2200      	movs	r2, #0
10013bfa:	400c      	ands	r4, r1
10013bfc:	4b12      	ldr	r3, [pc, #72]	; (10013c48 <__aeabi_dmul+0x1dc>)
10013bfe:	2500      	movs	r5, #0
10013c00:	4690      	mov	r8, r2
10013c02:	e799      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013c04:	2500      	movs	r5, #0
10013c06:	2300      	movs	r3, #0
10013c08:	2201      	movs	r2, #1
10013c0a:	e76e      	b.n	10013aea <__aeabi_dmul+0x7e>
10013c0c:	2203      	movs	r2, #3
10013c0e:	e76c      	b.n	10013aea <__aeabi_dmul+0x7e>
10013c10:	2300      	movs	r3, #0
10013c12:	469b      	mov	fp, r3
10013c14:	4698      	mov	r8, r3
10013c16:	3301      	adds	r3, #1
10013c18:	2704      	movs	r7, #4
10013c1a:	9301      	str	r3, [sp, #4]
10013c1c:	e74c      	b.n	10013ab8 <__aeabi_dmul+0x4c>
10013c1e:	2303      	movs	r3, #3
10013c20:	270c      	movs	r7, #12
10013c22:	9301      	str	r3, [sp, #4]
10013c24:	e748      	b.n	10013ab8 <__aeabi_dmul+0x4c>
10013c26:	2300      	movs	r3, #0
10013c28:	2580      	movs	r5, #128	; 0x80
10013c2a:	4698      	mov	r8, r3
10013c2c:	2400      	movs	r4, #0
10013c2e:	032d      	lsls	r5, r5, #12
10013c30:	4b05      	ldr	r3, [pc, #20]	; (10013c48 <__aeabi_dmul+0x1dc>)
10013c32:	e781      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013c34:	465d      	mov	r5, fp
10013c36:	4643      	mov	r3, r8
10013c38:	9a01      	ldr	r2, [sp, #4]
10013c3a:	e76f      	b.n	10013b1c <__aeabi_dmul+0xb0>
10013c3c:	465d      	mov	r5, fp
10013c3e:	4643      	mov	r3, r8
10013c40:	0021      	movs	r1, r4
10013c42:	9a01      	ldr	r2, [sp, #4]
10013c44:	e76a      	b.n	10013b1c <__aeabi_dmul+0xb0>
10013c46:	46c0      	nop			; (mov r8, r8)
10013c48:	000007ff 	.word	0x000007ff
10013c4c:	fffffc01 	.word	0xfffffc01
10013c50:	10016ae8 	.word	0x10016ae8
10013c54:	800fffff 	.word	0x800fffff
10013c58:	000003f3 	.word	0x000003f3
10013c5c:	4642      	mov	r2, r8
10013c5e:	0c12      	lsrs	r2, r2, #16
10013c60:	4691      	mov	r9, r2
10013c62:	0c1a      	lsrs	r2, r3, #16
10013c64:	4694      	mov	ip, r2
10013c66:	4642      	mov	r2, r8
10013c68:	0417      	lsls	r7, r2, #16
10013c6a:	464a      	mov	r2, r9
10013c6c:	041b      	lsls	r3, r3, #16
10013c6e:	0c1b      	lsrs	r3, r3, #16
10013c70:	435a      	muls	r2, r3
10013c72:	4660      	mov	r0, ip
10013c74:	4690      	mov	r8, r2
10013c76:	464a      	mov	r2, r9
10013c78:	4342      	muls	r2, r0
10013c7a:	0010      	movs	r0, r2
10013c7c:	9203      	str	r2, [sp, #12]
10013c7e:	4662      	mov	r2, ip
10013c80:	001c      	movs	r4, r3
10013c82:	0c3f      	lsrs	r7, r7, #16
10013c84:	437a      	muls	r2, r7
10013c86:	437c      	muls	r4, r7
10013c88:	4442      	add	r2, r8
10013c8a:	9201      	str	r2, [sp, #4]
10013c8c:	0c22      	lsrs	r2, r4, #16
10013c8e:	4692      	mov	sl, r2
10013c90:	9a01      	ldr	r2, [sp, #4]
10013c92:	4452      	add	r2, sl
10013c94:	4590      	cmp	r8, r2
10013c96:	d906      	bls.n	10013ca6 <__aeabi_dmul+0x23a>
10013c98:	4682      	mov	sl, r0
10013c9a:	2080      	movs	r0, #128	; 0x80
10013c9c:	0240      	lsls	r0, r0, #9
10013c9e:	4680      	mov	r8, r0
10013ca0:	44c2      	add	sl, r8
10013ca2:	4650      	mov	r0, sl
10013ca4:	9003      	str	r0, [sp, #12]
10013ca6:	0c10      	lsrs	r0, r2, #16
10013ca8:	9004      	str	r0, [sp, #16]
10013caa:	4648      	mov	r0, r9
10013cac:	0424      	lsls	r4, r4, #16
10013cae:	0c24      	lsrs	r4, r4, #16
10013cb0:	0412      	lsls	r2, r2, #16
10013cb2:	1912      	adds	r2, r2, r4
10013cb4:	9205      	str	r2, [sp, #20]
10013cb6:	0c2a      	lsrs	r2, r5, #16
10013cb8:	042d      	lsls	r5, r5, #16
10013cba:	0c2d      	lsrs	r5, r5, #16
10013cbc:	4368      	muls	r0, r5
10013cbe:	002c      	movs	r4, r5
10013cc0:	4682      	mov	sl, r0
10013cc2:	4648      	mov	r0, r9
10013cc4:	437c      	muls	r4, r7
10013cc6:	4350      	muls	r0, r2
10013cc8:	4681      	mov	r9, r0
10013cca:	0c20      	lsrs	r0, r4, #16
10013ccc:	4680      	mov	r8, r0
10013cce:	4357      	muls	r7, r2
10013cd0:	4457      	add	r7, sl
10013cd2:	4447      	add	r7, r8
10013cd4:	45ba      	cmp	sl, r7
10013cd6:	d903      	bls.n	10013ce0 <__aeabi_dmul+0x274>
10013cd8:	2080      	movs	r0, #128	; 0x80
10013cda:	0240      	lsls	r0, r0, #9
10013cdc:	4680      	mov	r8, r0
10013cde:	44c1      	add	r9, r8
10013ce0:	0c38      	lsrs	r0, r7, #16
10013ce2:	043f      	lsls	r7, r7, #16
10013ce4:	46b8      	mov	r8, r7
10013ce6:	4448      	add	r0, r9
10013ce8:	0424      	lsls	r4, r4, #16
10013cea:	0c24      	lsrs	r4, r4, #16
10013cec:	9001      	str	r0, [sp, #4]
10013cee:	9804      	ldr	r0, [sp, #16]
10013cf0:	44a0      	add	r8, r4
10013cf2:	4440      	add	r0, r8
10013cf4:	9004      	str	r0, [sp, #16]
10013cf6:	4658      	mov	r0, fp
10013cf8:	0c00      	lsrs	r0, r0, #16
10013cfa:	4681      	mov	r9, r0
10013cfc:	4658      	mov	r0, fp
10013cfe:	0404      	lsls	r4, r0, #16
10013d00:	0c20      	lsrs	r0, r4, #16
10013d02:	4682      	mov	sl, r0
10013d04:	0007      	movs	r7, r0
10013d06:	4648      	mov	r0, r9
10013d08:	435f      	muls	r7, r3
10013d0a:	464c      	mov	r4, r9
10013d0c:	4343      	muls	r3, r0
10013d0e:	4660      	mov	r0, ip
10013d10:	4360      	muls	r0, r4
10013d12:	4664      	mov	r4, ip
10013d14:	4683      	mov	fp, r0
10013d16:	4650      	mov	r0, sl
10013d18:	4344      	muls	r4, r0
10013d1a:	0c38      	lsrs	r0, r7, #16
10013d1c:	4684      	mov	ip, r0
10013d1e:	18e4      	adds	r4, r4, r3
10013d20:	4464      	add	r4, ip
10013d22:	42a3      	cmp	r3, r4
10013d24:	d903      	bls.n	10013d2e <__aeabi_dmul+0x2c2>
10013d26:	2380      	movs	r3, #128	; 0x80
10013d28:	025b      	lsls	r3, r3, #9
10013d2a:	469c      	mov	ip, r3
10013d2c:	44e3      	add	fp, ip
10013d2e:	4648      	mov	r0, r9
10013d30:	043f      	lsls	r7, r7, #16
10013d32:	0c23      	lsrs	r3, r4, #16
10013d34:	0c3f      	lsrs	r7, r7, #16
10013d36:	0424      	lsls	r4, r4, #16
10013d38:	19e4      	adds	r4, r4, r7
10013d3a:	4657      	mov	r7, sl
10013d3c:	4368      	muls	r0, r5
10013d3e:	436f      	muls	r7, r5
10013d40:	4684      	mov	ip, r0
10013d42:	464d      	mov	r5, r9
10013d44:	4650      	mov	r0, sl
10013d46:	4355      	muls	r5, r2
10013d48:	4342      	muls	r2, r0
10013d4a:	0c38      	lsrs	r0, r7, #16
10013d4c:	4681      	mov	r9, r0
10013d4e:	4462      	add	r2, ip
10013d50:	444a      	add	r2, r9
10013d52:	445b      	add	r3, fp
10013d54:	4594      	cmp	ip, r2
10013d56:	d903      	bls.n	10013d60 <__aeabi_dmul+0x2f4>
10013d58:	2080      	movs	r0, #128	; 0x80
10013d5a:	0240      	lsls	r0, r0, #9
10013d5c:	4684      	mov	ip, r0
10013d5e:	4465      	add	r5, ip
10013d60:	9803      	ldr	r0, [sp, #12]
10013d62:	043f      	lsls	r7, r7, #16
10013d64:	4683      	mov	fp, r0
10013d66:	9804      	ldr	r0, [sp, #16]
10013d68:	0c3f      	lsrs	r7, r7, #16
10013d6a:	4684      	mov	ip, r0
10013d6c:	44e3      	add	fp, ip
10013d6e:	45c3      	cmp	fp, r8
10013d70:	4180      	sbcs	r0, r0
10013d72:	4240      	negs	r0, r0
10013d74:	4682      	mov	sl, r0
10013d76:	0410      	lsls	r0, r2, #16
10013d78:	4684      	mov	ip, r0
10013d7a:	9801      	ldr	r0, [sp, #4]
10013d7c:	4467      	add	r7, ip
10013d7e:	4684      	mov	ip, r0
10013d80:	4467      	add	r7, ip
10013d82:	44a3      	add	fp, r4
10013d84:	46bc      	mov	ip, r7
10013d86:	45a3      	cmp	fp, r4
10013d88:	41a4      	sbcs	r4, r4
10013d8a:	4699      	mov	r9, r3
10013d8c:	44d4      	add	ip, sl
10013d8e:	4264      	negs	r4, r4
10013d90:	4287      	cmp	r7, r0
10013d92:	41bf      	sbcs	r7, r7
10013d94:	45d4      	cmp	ip, sl
10013d96:	4180      	sbcs	r0, r0
10013d98:	44e1      	add	r9, ip
10013d9a:	46a0      	mov	r8, r4
10013d9c:	4599      	cmp	r9, r3
10013d9e:	419b      	sbcs	r3, r3
10013da0:	427f      	negs	r7, r7
10013da2:	4240      	negs	r0, r0
10013da4:	44c8      	add	r8, r9
10013da6:	4307      	orrs	r7, r0
10013da8:	0c12      	lsrs	r2, r2, #16
10013daa:	18ba      	adds	r2, r7, r2
10013dac:	45a0      	cmp	r8, r4
10013dae:	41a4      	sbcs	r4, r4
10013db0:	425f      	negs	r7, r3
10013db2:	003b      	movs	r3, r7
10013db4:	4264      	negs	r4, r4
10013db6:	4323      	orrs	r3, r4
10013db8:	18d7      	adds	r7, r2, r3
10013dba:	4643      	mov	r3, r8
10013dbc:	197d      	adds	r5, r7, r5
10013dbe:	0ddb      	lsrs	r3, r3, #23
10013dc0:	026d      	lsls	r5, r5, #9
10013dc2:	431d      	orrs	r5, r3
10013dc4:	465b      	mov	r3, fp
10013dc6:	025a      	lsls	r2, r3, #9
10013dc8:	9b05      	ldr	r3, [sp, #20]
10013dca:	431a      	orrs	r2, r3
10013dcc:	1e53      	subs	r3, r2, #1
10013dce:	419a      	sbcs	r2, r3
10013dd0:	465b      	mov	r3, fp
10013dd2:	0ddb      	lsrs	r3, r3, #23
10013dd4:	431a      	orrs	r2, r3
10013dd6:	4643      	mov	r3, r8
10013dd8:	025b      	lsls	r3, r3, #9
10013dda:	4313      	orrs	r3, r2
10013ddc:	01ea      	lsls	r2, r5, #7
10013dde:	d507      	bpl.n	10013df0 <__aeabi_dmul+0x384>
10013de0:	2201      	movs	r2, #1
10013de2:	085c      	lsrs	r4, r3, #1
10013de4:	4013      	ands	r3, r2
10013de6:	4323      	orrs	r3, r4
10013de8:	07ea      	lsls	r2, r5, #31
10013dea:	9e02      	ldr	r6, [sp, #8]
10013dec:	4313      	orrs	r3, r2
10013dee:	086d      	lsrs	r5, r5, #1
10013df0:	4a57      	ldr	r2, [pc, #348]	; (10013f50 <__aeabi_dmul+0x4e4>)
10013df2:	18b2      	adds	r2, r6, r2
10013df4:	2a00      	cmp	r2, #0
10013df6:	dd4b      	ble.n	10013e90 <__aeabi_dmul+0x424>
10013df8:	0758      	lsls	r0, r3, #29
10013dfa:	d009      	beq.n	10013e10 <__aeabi_dmul+0x3a4>
10013dfc:	200f      	movs	r0, #15
10013dfe:	4018      	ands	r0, r3
10013e00:	2804      	cmp	r0, #4
10013e02:	d005      	beq.n	10013e10 <__aeabi_dmul+0x3a4>
10013e04:	1d18      	adds	r0, r3, #4
10013e06:	4298      	cmp	r0, r3
10013e08:	419b      	sbcs	r3, r3
10013e0a:	425b      	negs	r3, r3
10013e0c:	18ed      	adds	r5, r5, r3
10013e0e:	0003      	movs	r3, r0
10013e10:	01e8      	lsls	r0, r5, #7
10013e12:	d504      	bpl.n	10013e1e <__aeabi_dmul+0x3b2>
10013e14:	4a4f      	ldr	r2, [pc, #316]	; (10013f54 <__aeabi_dmul+0x4e8>)
10013e16:	4015      	ands	r5, r2
10013e18:	2280      	movs	r2, #128	; 0x80
10013e1a:	00d2      	lsls	r2, r2, #3
10013e1c:	18b2      	adds	r2, r6, r2
10013e1e:	484e      	ldr	r0, [pc, #312]	; (10013f58 <__aeabi_dmul+0x4ec>)
10013e20:	4282      	cmp	r2, r0
10013e22:	dd00      	ble.n	10013e26 <__aeabi_dmul+0x3ba>
10013e24:	e6e7      	b.n	10013bf6 <__aeabi_dmul+0x18a>
10013e26:	2401      	movs	r4, #1
10013e28:	08db      	lsrs	r3, r3, #3
10013e2a:	0768      	lsls	r0, r5, #29
10013e2c:	4318      	orrs	r0, r3
10013e2e:	026d      	lsls	r5, r5, #9
10013e30:	0553      	lsls	r3, r2, #21
10013e32:	4680      	mov	r8, r0
10013e34:	0b2d      	lsrs	r5, r5, #12
10013e36:	0d5b      	lsrs	r3, r3, #21
10013e38:	400c      	ands	r4, r1
10013e3a:	e67d      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013e3c:	2280      	movs	r2, #128	; 0x80
10013e3e:	4659      	mov	r1, fp
10013e40:	0312      	lsls	r2, r2, #12
10013e42:	4211      	tst	r1, r2
10013e44:	d008      	beq.n	10013e58 <__aeabi_dmul+0x3ec>
10013e46:	4215      	tst	r5, r2
10013e48:	d106      	bne.n	10013e58 <__aeabi_dmul+0x3ec>
10013e4a:	4315      	orrs	r5, r2
10013e4c:	032d      	lsls	r5, r5, #12
10013e4e:	4698      	mov	r8, r3
10013e50:	0b2d      	lsrs	r5, r5, #12
10013e52:	464c      	mov	r4, r9
10013e54:	4b41      	ldr	r3, [pc, #260]	; (10013f5c <__aeabi_dmul+0x4f0>)
10013e56:	e66f      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013e58:	465d      	mov	r5, fp
10013e5a:	4315      	orrs	r5, r2
10013e5c:	032d      	lsls	r5, r5, #12
10013e5e:	0b2d      	lsrs	r5, r5, #12
10013e60:	4b3e      	ldr	r3, [pc, #248]	; (10013f5c <__aeabi_dmul+0x4f0>)
10013e62:	e669      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013e64:	0003      	movs	r3, r0
10013e66:	4655      	mov	r5, sl
10013e68:	3b28      	subs	r3, #40	; 0x28
10013e6a:	409d      	lsls	r5, r3
10013e6c:	2300      	movs	r3, #0
10013e6e:	e6bc      	b.n	10013bea <__aeabi_dmul+0x17e>
10013e70:	4650      	mov	r0, sl
10013e72:	f000 fd79 	bl	10014968 <__clzsi2>
10013e76:	3020      	adds	r0, #32
10013e78:	e6a8      	b.n	10013bcc <__aeabi_dmul+0x160>
10013e7a:	0003      	movs	r3, r0
10013e7c:	3b28      	subs	r3, #40	; 0x28
10013e7e:	409f      	lsls	r7, r3
10013e80:	2300      	movs	r3, #0
10013e82:	46bb      	mov	fp, r7
10013e84:	4698      	mov	r8, r3
10013e86:	e689      	b.n	10013b9c <__aeabi_dmul+0x130>
10013e88:	f000 fd6e 	bl	10014968 <__clzsi2>
10013e8c:	3020      	adds	r0, #32
10013e8e:	e673      	b.n	10013b78 <__aeabi_dmul+0x10c>
10013e90:	2401      	movs	r4, #1
10013e92:	1aa6      	subs	r6, r4, r2
10013e94:	2e38      	cmp	r6, #56	; 0x38
10013e96:	dd07      	ble.n	10013ea8 <__aeabi_dmul+0x43c>
10013e98:	2200      	movs	r2, #0
10013e9a:	400c      	ands	r4, r1
10013e9c:	2300      	movs	r3, #0
10013e9e:	2500      	movs	r5, #0
10013ea0:	4690      	mov	r8, r2
10013ea2:	e649      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013ea4:	9e02      	ldr	r6, [sp, #8]
10013ea6:	e7a3      	b.n	10013df0 <__aeabi_dmul+0x384>
10013ea8:	2e1f      	cmp	r6, #31
10013eaa:	dc20      	bgt.n	10013eee <__aeabi_dmul+0x482>
10013eac:	2220      	movs	r2, #32
10013eae:	002c      	movs	r4, r5
10013eb0:	0018      	movs	r0, r3
10013eb2:	1b92      	subs	r2, r2, r6
10013eb4:	40f0      	lsrs	r0, r6
10013eb6:	4094      	lsls	r4, r2
10013eb8:	4093      	lsls	r3, r2
10013eba:	4304      	orrs	r4, r0
10013ebc:	1e58      	subs	r0, r3, #1
10013ebe:	4183      	sbcs	r3, r0
10013ec0:	431c      	orrs	r4, r3
10013ec2:	40f5      	lsrs	r5, r6
10013ec4:	0763      	lsls	r3, r4, #29
10013ec6:	d009      	beq.n	10013edc <__aeabi_dmul+0x470>
10013ec8:	230f      	movs	r3, #15
10013eca:	4023      	ands	r3, r4
10013ecc:	2b04      	cmp	r3, #4
10013ece:	d005      	beq.n	10013edc <__aeabi_dmul+0x470>
10013ed0:	0023      	movs	r3, r4
10013ed2:	1d1c      	adds	r4, r3, #4
10013ed4:	429c      	cmp	r4, r3
10013ed6:	4192      	sbcs	r2, r2
10013ed8:	4252      	negs	r2, r2
10013eda:	18ad      	adds	r5, r5, r2
10013edc:	022b      	lsls	r3, r5, #8
10013ede:	d51f      	bpl.n	10013f20 <__aeabi_dmul+0x4b4>
10013ee0:	2401      	movs	r4, #1
10013ee2:	2200      	movs	r2, #0
10013ee4:	400c      	ands	r4, r1
10013ee6:	2301      	movs	r3, #1
10013ee8:	2500      	movs	r5, #0
10013eea:	4690      	mov	r8, r2
10013eec:	e624      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013eee:	201f      	movs	r0, #31
10013ef0:	002c      	movs	r4, r5
10013ef2:	4240      	negs	r0, r0
10013ef4:	1a82      	subs	r2, r0, r2
10013ef6:	40d4      	lsrs	r4, r2
10013ef8:	2e20      	cmp	r6, #32
10013efa:	d01c      	beq.n	10013f36 <__aeabi_dmul+0x4ca>
10013efc:	2240      	movs	r2, #64	; 0x40
10013efe:	1b96      	subs	r6, r2, r6
10013f00:	40b5      	lsls	r5, r6
10013f02:	432b      	orrs	r3, r5
10013f04:	1e58      	subs	r0, r3, #1
10013f06:	4183      	sbcs	r3, r0
10013f08:	2007      	movs	r0, #7
10013f0a:	4323      	orrs	r3, r4
10013f0c:	4018      	ands	r0, r3
10013f0e:	2500      	movs	r5, #0
10013f10:	2800      	cmp	r0, #0
10013f12:	d009      	beq.n	10013f28 <__aeabi_dmul+0x4bc>
10013f14:	220f      	movs	r2, #15
10013f16:	2500      	movs	r5, #0
10013f18:	401a      	ands	r2, r3
10013f1a:	001c      	movs	r4, r3
10013f1c:	2a04      	cmp	r2, #4
10013f1e:	d1d8      	bne.n	10013ed2 <__aeabi_dmul+0x466>
10013f20:	0023      	movs	r3, r4
10013f22:	0768      	lsls	r0, r5, #29
10013f24:	026d      	lsls	r5, r5, #9
10013f26:	0b2d      	lsrs	r5, r5, #12
10013f28:	2401      	movs	r4, #1
10013f2a:	08db      	lsrs	r3, r3, #3
10013f2c:	4303      	orrs	r3, r0
10013f2e:	4698      	mov	r8, r3
10013f30:	400c      	ands	r4, r1
10013f32:	2300      	movs	r3, #0
10013f34:	e600      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013f36:	2500      	movs	r5, #0
10013f38:	e7e3      	b.n	10013f02 <__aeabi_dmul+0x496>
10013f3a:	2280      	movs	r2, #128	; 0x80
10013f3c:	2401      	movs	r4, #1
10013f3e:	0312      	lsls	r2, r2, #12
10013f40:	4315      	orrs	r5, r2
10013f42:	032d      	lsls	r5, r5, #12
10013f44:	4698      	mov	r8, r3
10013f46:	0b2d      	lsrs	r5, r5, #12
10013f48:	400c      	ands	r4, r1
10013f4a:	4b04      	ldr	r3, [pc, #16]	; (10013f5c <__aeabi_dmul+0x4f0>)
10013f4c:	e5f4      	b.n	10013b38 <__aeabi_dmul+0xcc>
10013f4e:	46c0      	nop			; (mov r8, r8)
10013f50:	000003ff 	.word	0x000003ff
10013f54:	feffffff 	.word	0xfeffffff
10013f58:	000007fe 	.word	0x000007fe
10013f5c:	000007ff 	.word	0x000007ff

10013f60 <__aeabi_dsub>:
10013f60:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f62:	4657      	mov	r7, sl
10013f64:	464e      	mov	r6, r9
10013f66:	4645      	mov	r5, r8
10013f68:	b4e0      	push	{r5, r6, r7}
10013f6a:	000e      	movs	r6, r1
10013f6c:	0011      	movs	r1, r2
10013f6e:	0ff2      	lsrs	r2, r6, #31
10013f70:	4692      	mov	sl, r2
10013f72:	00c5      	lsls	r5, r0, #3
10013f74:	0f42      	lsrs	r2, r0, #29
10013f76:	0318      	lsls	r0, r3, #12
10013f78:	0337      	lsls	r7, r6, #12
10013f7a:	0074      	lsls	r4, r6, #1
10013f7c:	0a40      	lsrs	r0, r0, #9
10013f7e:	0f4e      	lsrs	r6, r1, #29
10013f80:	0a7f      	lsrs	r7, r7, #9
10013f82:	4330      	orrs	r0, r6
10013f84:	4ecf      	ldr	r6, [pc, #828]	; (100142c4 <__aeabi_dsub+0x364>)
10013f86:	4317      	orrs	r7, r2
10013f88:	005a      	lsls	r2, r3, #1
10013f8a:	0d64      	lsrs	r4, r4, #21
10013f8c:	0d52      	lsrs	r2, r2, #21
10013f8e:	0fdb      	lsrs	r3, r3, #31
10013f90:	00c9      	lsls	r1, r1, #3
10013f92:	42b2      	cmp	r2, r6
10013f94:	d100      	bne.n	10013f98 <__aeabi_dsub+0x38>
10013f96:	e0e5      	b.n	10014164 <__aeabi_dsub+0x204>
10013f98:	2601      	movs	r6, #1
10013f9a:	4073      	eors	r3, r6
10013f9c:	1aa6      	subs	r6, r4, r2
10013f9e:	46b4      	mov	ip, r6
10013fa0:	4553      	cmp	r3, sl
10013fa2:	d100      	bne.n	10013fa6 <__aeabi_dsub+0x46>
10013fa4:	e0af      	b.n	10014106 <__aeabi_dsub+0x1a6>
10013fa6:	2e00      	cmp	r6, #0
10013fa8:	dc00      	bgt.n	10013fac <__aeabi_dsub+0x4c>
10013faa:	e10d      	b.n	100141c8 <__aeabi_dsub+0x268>
10013fac:	2a00      	cmp	r2, #0
10013fae:	d13a      	bne.n	10014026 <__aeabi_dsub+0xc6>
10013fb0:	0003      	movs	r3, r0
10013fb2:	430b      	orrs	r3, r1
10013fb4:	d000      	beq.n	10013fb8 <__aeabi_dsub+0x58>
10013fb6:	e0e4      	b.n	10014182 <__aeabi_dsub+0x222>
10013fb8:	076b      	lsls	r3, r5, #29
10013fba:	d009      	beq.n	10013fd0 <__aeabi_dsub+0x70>
10013fbc:	230f      	movs	r3, #15
10013fbe:	402b      	ands	r3, r5
10013fc0:	2b04      	cmp	r3, #4
10013fc2:	d005      	beq.n	10013fd0 <__aeabi_dsub+0x70>
10013fc4:	1d2b      	adds	r3, r5, #4
10013fc6:	42ab      	cmp	r3, r5
10013fc8:	41ad      	sbcs	r5, r5
10013fca:	426d      	negs	r5, r5
10013fcc:	197f      	adds	r7, r7, r5
10013fce:	001d      	movs	r5, r3
10013fd0:	023b      	lsls	r3, r7, #8
10013fd2:	d400      	bmi.n	10013fd6 <__aeabi_dsub+0x76>
10013fd4:	e088      	b.n	100140e8 <__aeabi_dsub+0x188>
10013fd6:	4bbb      	ldr	r3, [pc, #748]	; (100142c4 <__aeabi_dsub+0x364>)
10013fd8:	3401      	adds	r4, #1
10013fda:	429c      	cmp	r4, r3
10013fdc:	d100      	bne.n	10013fe0 <__aeabi_dsub+0x80>
10013fde:	e110      	b.n	10014202 <__aeabi_dsub+0x2a2>
10013fe0:	003a      	movs	r2, r7
10013fe2:	4bb9      	ldr	r3, [pc, #740]	; (100142c8 <__aeabi_dsub+0x368>)
10013fe4:	4651      	mov	r1, sl
10013fe6:	401a      	ands	r2, r3
10013fe8:	2301      	movs	r3, #1
10013fea:	0750      	lsls	r0, r2, #29
10013fec:	08ed      	lsrs	r5, r5, #3
10013fee:	0252      	lsls	r2, r2, #9
10013ff0:	0564      	lsls	r4, r4, #21
10013ff2:	4305      	orrs	r5, r0
10013ff4:	0b12      	lsrs	r2, r2, #12
10013ff6:	0d64      	lsrs	r4, r4, #21
10013ff8:	400b      	ands	r3, r1
10013ffa:	2100      	movs	r1, #0
10013ffc:	0028      	movs	r0, r5
10013ffe:	0312      	lsls	r2, r2, #12
10014000:	0d0d      	lsrs	r5, r1, #20
10014002:	0b12      	lsrs	r2, r2, #12
10014004:	0564      	lsls	r4, r4, #21
10014006:	052d      	lsls	r5, r5, #20
10014008:	4315      	orrs	r5, r2
1001400a:	0862      	lsrs	r2, r4, #1
1001400c:	4caf      	ldr	r4, [pc, #700]	; (100142cc <__aeabi_dsub+0x36c>)
1001400e:	07db      	lsls	r3, r3, #31
10014010:	402c      	ands	r4, r5
10014012:	4314      	orrs	r4, r2
10014014:	0064      	lsls	r4, r4, #1
10014016:	0864      	lsrs	r4, r4, #1
10014018:	431c      	orrs	r4, r3
1001401a:	0021      	movs	r1, r4
1001401c:	bc1c      	pop	{r2, r3, r4}
1001401e:	4690      	mov	r8, r2
10014020:	4699      	mov	r9, r3
10014022:	46a2      	mov	sl, r4
10014024:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014026:	4ba7      	ldr	r3, [pc, #668]	; (100142c4 <__aeabi_dsub+0x364>)
10014028:	429c      	cmp	r4, r3
1001402a:	d0c5      	beq.n	10013fb8 <__aeabi_dsub+0x58>
1001402c:	2380      	movs	r3, #128	; 0x80
1001402e:	041b      	lsls	r3, r3, #16
10014030:	4318      	orrs	r0, r3
10014032:	4663      	mov	r3, ip
10014034:	2b38      	cmp	r3, #56	; 0x38
10014036:	dd00      	ble.n	1001403a <__aeabi_dsub+0xda>
10014038:	e0fd      	b.n	10014236 <__aeabi_dsub+0x2d6>
1001403a:	2b1f      	cmp	r3, #31
1001403c:	dd00      	ble.n	10014040 <__aeabi_dsub+0xe0>
1001403e:	e130      	b.n	100142a2 <__aeabi_dsub+0x342>
10014040:	4662      	mov	r2, ip
10014042:	2320      	movs	r3, #32
10014044:	1a9b      	subs	r3, r3, r2
10014046:	0002      	movs	r2, r0
10014048:	409a      	lsls	r2, r3
1001404a:	4666      	mov	r6, ip
1001404c:	4690      	mov	r8, r2
1001404e:	000a      	movs	r2, r1
10014050:	4099      	lsls	r1, r3
10014052:	40f2      	lsrs	r2, r6
10014054:	4646      	mov	r6, r8
10014056:	1e4b      	subs	r3, r1, #1
10014058:	4199      	sbcs	r1, r3
1001405a:	4332      	orrs	r2, r6
1001405c:	4311      	orrs	r1, r2
1001405e:	4663      	mov	r3, ip
10014060:	0002      	movs	r2, r0
10014062:	40da      	lsrs	r2, r3
10014064:	1a69      	subs	r1, r5, r1
10014066:	428d      	cmp	r5, r1
10014068:	419b      	sbcs	r3, r3
1001406a:	000d      	movs	r5, r1
1001406c:	1aba      	subs	r2, r7, r2
1001406e:	425b      	negs	r3, r3
10014070:	1ad7      	subs	r7, r2, r3
10014072:	023b      	lsls	r3, r7, #8
10014074:	d535      	bpl.n	100140e2 <__aeabi_dsub+0x182>
10014076:	027a      	lsls	r2, r7, #9
10014078:	0a53      	lsrs	r3, r2, #9
1001407a:	4698      	mov	r8, r3
1001407c:	4643      	mov	r3, r8
1001407e:	2b00      	cmp	r3, #0
10014080:	d100      	bne.n	10014084 <__aeabi_dsub+0x124>
10014082:	e0c4      	b.n	1001420e <__aeabi_dsub+0x2ae>
10014084:	4640      	mov	r0, r8
10014086:	f000 fc6f 	bl	10014968 <__clzsi2>
1001408a:	0003      	movs	r3, r0
1001408c:	3b08      	subs	r3, #8
1001408e:	2b1f      	cmp	r3, #31
10014090:	dd00      	ble.n	10014094 <__aeabi_dsub+0x134>
10014092:	e0c5      	b.n	10014220 <__aeabi_dsub+0x2c0>
10014094:	2220      	movs	r2, #32
10014096:	0029      	movs	r1, r5
10014098:	1ad2      	subs	r2, r2, r3
1001409a:	4647      	mov	r7, r8
1001409c:	40d1      	lsrs	r1, r2
1001409e:	409f      	lsls	r7, r3
100140a0:	000a      	movs	r2, r1
100140a2:	409d      	lsls	r5, r3
100140a4:	433a      	orrs	r2, r7
100140a6:	429c      	cmp	r4, r3
100140a8:	dd00      	ble.n	100140ac <__aeabi_dsub+0x14c>
100140aa:	e0c0      	b.n	1001422e <__aeabi_dsub+0x2ce>
100140ac:	1b1c      	subs	r4, r3, r4
100140ae:	1c63      	adds	r3, r4, #1
100140b0:	2b1f      	cmp	r3, #31
100140b2:	dd00      	ble.n	100140b6 <__aeabi_dsub+0x156>
100140b4:	e0e4      	b.n	10014280 <__aeabi_dsub+0x320>
100140b6:	2120      	movs	r1, #32
100140b8:	0014      	movs	r4, r2
100140ba:	0028      	movs	r0, r5
100140bc:	1ac9      	subs	r1, r1, r3
100140be:	40d8      	lsrs	r0, r3
100140c0:	408c      	lsls	r4, r1
100140c2:	408d      	lsls	r5, r1
100140c4:	4304      	orrs	r4, r0
100140c6:	40da      	lsrs	r2, r3
100140c8:	1e68      	subs	r0, r5, #1
100140ca:	4185      	sbcs	r5, r0
100140cc:	0017      	movs	r7, r2
100140ce:	4325      	orrs	r5, r4
100140d0:	2400      	movs	r4, #0
100140d2:	e771      	b.n	10013fb8 <__aeabi_dsub+0x58>
100140d4:	4642      	mov	r2, r8
100140d6:	4663      	mov	r3, ip
100140d8:	431a      	orrs	r2, r3
100140da:	d100      	bne.n	100140de <__aeabi_dsub+0x17e>
100140dc:	e24c      	b.n	10014578 <__aeabi_dsub+0x618>
100140de:	4667      	mov	r7, ip
100140e0:	4645      	mov	r5, r8
100140e2:	076b      	lsls	r3, r5, #29
100140e4:	d000      	beq.n	100140e8 <__aeabi_dsub+0x188>
100140e6:	e769      	b.n	10013fbc <__aeabi_dsub+0x5c>
100140e8:	2301      	movs	r3, #1
100140ea:	4651      	mov	r1, sl
100140ec:	0778      	lsls	r0, r7, #29
100140ee:	08ed      	lsrs	r5, r5, #3
100140f0:	08fa      	lsrs	r2, r7, #3
100140f2:	400b      	ands	r3, r1
100140f4:	4305      	orrs	r5, r0
100140f6:	4973      	ldr	r1, [pc, #460]	; (100142c4 <__aeabi_dsub+0x364>)
100140f8:	428c      	cmp	r4, r1
100140fa:	d038      	beq.n	1001416e <__aeabi_dsub+0x20e>
100140fc:	0312      	lsls	r2, r2, #12
100140fe:	0564      	lsls	r4, r4, #21
10014100:	0b12      	lsrs	r2, r2, #12
10014102:	0d64      	lsrs	r4, r4, #21
10014104:	e779      	b.n	10013ffa <__aeabi_dsub+0x9a>
10014106:	2e00      	cmp	r6, #0
10014108:	dc00      	bgt.n	1001410c <__aeabi_dsub+0x1ac>
1001410a:	e09a      	b.n	10014242 <__aeabi_dsub+0x2e2>
1001410c:	2a00      	cmp	r2, #0
1001410e:	d047      	beq.n	100141a0 <__aeabi_dsub+0x240>
10014110:	4a6c      	ldr	r2, [pc, #432]	; (100142c4 <__aeabi_dsub+0x364>)
10014112:	4294      	cmp	r4, r2
10014114:	d100      	bne.n	10014118 <__aeabi_dsub+0x1b8>
10014116:	e74f      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014118:	2280      	movs	r2, #128	; 0x80
1001411a:	0412      	lsls	r2, r2, #16
1001411c:	4310      	orrs	r0, r2
1001411e:	4662      	mov	r2, ip
10014120:	2a38      	cmp	r2, #56	; 0x38
10014122:	dc00      	bgt.n	10014126 <__aeabi_dsub+0x1c6>
10014124:	e108      	b.n	10014338 <__aeabi_dsub+0x3d8>
10014126:	4301      	orrs	r1, r0
10014128:	1e48      	subs	r0, r1, #1
1001412a:	4181      	sbcs	r1, r0
1001412c:	2200      	movs	r2, #0
1001412e:	b2c9      	uxtb	r1, r1
10014130:	1949      	adds	r1, r1, r5
10014132:	19d2      	adds	r2, r2, r7
10014134:	42a9      	cmp	r1, r5
10014136:	41bf      	sbcs	r7, r7
10014138:	000d      	movs	r5, r1
1001413a:	427f      	negs	r7, r7
1001413c:	18bf      	adds	r7, r7, r2
1001413e:	023a      	lsls	r2, r7, #8
10014140:	d400      	bmi.n	10014144 <__aeabi_dsub+0x1e4>
10014142:	e142      	b.n	100143ca <__aeabi_dsub+0x46a>
10014144:	4a5f      	ldr	r2, [pc, #380]	; (100142c4 <__aeabi_dsub+0x364>)
10014146:	3401      	adds	r4, #1
10014148:	4294      	cmp	r4, r2
1001414a:	d100      	bne.n	1001414e <__aeabi_dsub+0x1ee>
1001414c:	e14e      	b.n	100143ec <__aeabi_dsub+0x48c>
1001414e:	2001      	movs	r0, #1
10014150:	4a5d      	ldr	r2, [pc, #372]	; (100142c8 <__aeabi_dsub+0x368>)
10014152:	0869      	lsrs	r1, r5, #1
10014154:	403a      	ands	r2, r7
10014156:	4028      	ands	r0, r5
10014158:	4308      	orrs	r0, r1
1001415a:	07d5      	lsls	r5, r2, #31
1001415c:	4305      	orrs	r5, r0
1001415e:	0857      	lsrs	r7, r2, #1
10014160:	469a      	mov	sl, r3
10014162:	e729      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014164:	0006      	movs	r6, r0
10014166:	430e      	orrs	r6, r1
10014168:	d000      	beq.n	1001416c <__aeabi_dsub+0x20c>
1001416a:	e717      	b.n	10013f9c <__aeabi_dsub+0x3c>
1001416c:	e714      	b.n	10013f98 <__aeabi_dsub+0x38>
1001416e:	0029      	movs	r1, r5
10014170:	4311      	orrs	r1, r2
10014172:	d100      	bne.n	10014176 <__aeabi_dsub+0x216>
10014174:	e1f9      	b.n	1001456a <__aeabi_dsub+0x60a>
10014176:	2180      	movs	r1, #128	; 0x80
10014178:	0309      	lsls	r1, r1, #12
1001417a:	430a      	orrs	r2, r1
1001417c:	0312      	lsls	r2, r2, #12
1001417e:	0b12      	lsrs	r2, r2, #12
10014180:	e73b      	b.n	10013ffa <__aeabi_dsub+0x9a>
10014182:	2301      	movs	r3, #1
10014184:	425b      	negs	r3, r3
10014186:	4698      	mov	r8, r3
10014188:	44c4      	add	ip, r8
1001418a:	4663      	mov	r3, ip
1001418c:	2b00      	cmp	r3, #0
1001418e:	d172      	bne.n	10014276 <__aeabi_dsub+0x316>
10014190:	1a69      	subs	r1, r5, r1
10014192:	428d      	cmp	r5, r1
10014194:	419b      	sbcs	r3, r3
10014196:	1a3f      	subs	r7, r7, r0
10014198:	425b      	negs	r3, r3
1001419a:	1aff      	subs	r7, r7, r3
1001419c:	000d      	movs	r5, r1
1001419e:	e768      	b.n	10014072 <__aeabi_dsub+0x112>
100141a0:	0002      	movs	r2, r0
100141a2:	430a      	orrs	r2, r1
100141a4:	d100      	bne.n	100141a8 <__aeabi_dsub+0x248>
100141a6:	e707      	b.n	10013fb8 <__aeabi_dsub+0x58>
100141a8:	2201      	movs	r2, #1
100141aa:	4252      	negs	r2, r2
100141ac:	4690      	mov	r8, r2
100141ae:	44c4      	add	ip, r8
100141b0:	4662      	mov	r2, ip
100141b2:	2a00      	cmp	r2, #0
100141b4:	d000      	beq.n	100141b8 <__aeabi_dsub+0x258>
100141b6:	e0e6      	b.n	10014386 <__aeabi_dsub+0x426>
100141b8:	1869      	adds	r1, r5, r1
100141ba:	42a9      	cmp	r1, r5
100141bc:	41b6      	sbcs	r6, r6
100141be:	183f      	adds	r7, r7, r0
100141c0:	4276      	negs	r6, r6
100141c2:	19f7      	adds	r7, r6, r7
100141c4:	000d      	movs	r5, r1
100141c6:	e7ba      	b.n	1001413e <__aeabi_dsub+0x1de>
100141c8:	2e00      	cmp	r6, #0
100141ca:	d000      	beq.n	100141ce <__aeabi_dsub+0x26e>
100141cc:	e080      	b.n	100142d0 <__aeabi_dsub+0x370>
100141ce:	1c62      	adds	r2, r4, #1
100141d0:	0552      	lsls	r2, r2, #21
100141d2:	0d52      	lsrs	r2, r2, #21
100141d4:	2a01      	cmp	r2, #1
100141d6:	dc00      	bgt.n	100141da <__aeabi_dsub+0x27a>
100141d8:	e0f9      	b.n	100143ce <__aeabi_dsub+0x46e>
100141da:	1a6a      	subs	r2, r5, r1
100141dc:	4691      	mov	r9, r2
100141de:	454d      	cmp	r5, r9
100141e0:	41b6      	sbcs	r6, r6
100141e2:	1a3a      	subs	r2, r7, r0
100141e4:	4276      	negs	r6, r6
100141e6:	1b92      	subs	r2, r2, r6
100141e8:	4690      	mov	r8, r2
100141ea:	0212      	lsls	r2, r2, #8
100141ec:	d400      	bmi.n	100141f0 <__aeabi_dsub+0x290>
100141ee:	e099      	b.n	10014324 <__aeabi_dsub+0x3c4>
100141f0:	1b4d      	subs	r5, r1, r5
100141f2:	42a9      	cmp	r1, r5
100141f4:	4189      	sbcs	r1, r1
100141f6:	1bc7      	subs	r7, r0, r7
100141f8:	4249      	negs	r1, r1
100141fa:	1a7a      	subs	r2, r7, r1
100141fc:	4690      	mov	r8, r2
100141fe:	469a      	mov	sl, r3
10014200:	e73c      	b.n	1001407c <__aeabi_dsub+0x11c>
10014202:	4652      	mov	r2, sl
10014204:	2301      	movs	r3, #1
10014206:	2500      	movs	r5, #0
10014208:	4013      	ands	r3, r2
1001420a:	2200      	movs	r2, #0
1001420c:	e6f5      	b.n	10013ffa <__aeabi_dsub+0x9a>
1001420e:	0028      	movs	r0, r5
10014210:	f000 fbaa 	bl	10014968 <__clzsi2>
10014214:	3020      	adds	r0, #32
10014216:	0003      	movs	r3, r0
10014218:	3b08      	subs	r3, #8
1001421a:	2b1f      	cmp	r3, #31
1001421c:	dc00      	bgt.n	10014220 <__aeabi_dsub+0x2c0>
1001421e:	e739      	b.n	10014094 <__aeabi_dsub+0x134>
10014220:	002a      	movs	r2, r5
10014222:	3828      	subs	r0, #40	; 0x28
10014224:	4082      	lsls	r2, r0
10014226:	2500      	movs	r5, #0
10014228:	429c      	cmp	r4, r3
1001422a:	dc00      	bgt.n	1001422e <__aeabi_dsub+0x2ce>
1001422c:	e73e      	b.n	100140ac <__aeabi_dsub+0x14c>
1001422e:	4f26      	ldr	r7, [pc, #152]	; (100142c8 <__aeabi_dsub+0x368>)
10014230:	1ae4      	subs	r4, r4, r3
10014232:	4017      	ands	r7, r2
10014234:	e6c0      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014236:	4301      	orrs	r1, r0
10014238:	1e48      	subs	r0, r1, #1
1001423a:	4181      	sbcs	r1, r0
1001423c:	2200      	movs	r2, #0
1001423e:	b2c9      	uxtb	r1, r1
10014240:	e710      	b.n	10014064 <__aeabi_dsub+0x104>
10014242:	2e00      	cmp	r6, #0
10014244:	d000      	beq.n	10014248 <__aeabi_dsub+0x2e8>
10014246:	e0f1      	b.n	1001442c <__aeabi_dsub+0x4cc>
10014248:	1c62      	adds	r2, r4, #1
1001424a:	4694      	mov	ip, r2
1001424c:	0552      	lsls	r2, r2, #21
1001424e:	0d52      	lsrs	r2, r2, #21
10014250:	2a01      	cmp	r2, #1
10014252:	dc00      	bgt.n	10014256 <__aeabi_dsub+0x2f6>
10014254:	e0a0      	b.n	10014398 <__aeabi_dsub+0x438>
10014256:	4a1b      	ldr	r2, [pc, #108]	; (100142c4 <__aeabi_dsub+0x364>)
10014258:	4594      	cmp	ip, r2
1001425a:	d100      	bne.n	1001425e <__aeabi_dsub+0x2fe>
1001425c:	e0c5      	b.n	100143ea <__aeabi_dsub+0x48a>
1001425e:	1869      	adds	r1, r5, r1
10014260:	42a9      	cmp	r1, r5
10014262:	4192      	sbcs	r2, r2
10014264:	183f      	adds	r7, r7, r0
10014266:	4252      	negs	r2, r2
10014268:	19d2      	adds	r2, r2, r7
1001426a:	0849      	lsrs	r1, r1, #1
1001426c:	07d5      	lsls	r5, r2, #31
1001426e:	430d      	orrs	r5, r1
10014270:	0857      	lsrs	r7, r2, #1
10014272:	4664      	mov	r4, ip
10014274:	e6a0      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014276:	4b13      	ldr	r3, [pc, #76]	; (100142c4 <__aeabi_dsub+0x364>)
10014278:	429c      	cmp	r4, r3
1001427a:	d000      	beq.n	1001427e <__aeabi_dsub+0x31e>
1001427c:	e6d9      	b.n	10014032 <__aeabi_dsub+0xd2>
1001427e:	e69b      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014280:	0011      	movs	r1, r2
10014282:	3c1f      	subs	r4, #31
10014284:	40e1      	lsrs	r1, r4
10014286:	000c      	movs	r4, r1
10014288:	2b20      	cmp	r3, #32
1001428a:	d100      	bne.n	1001428e <__aeabi_dsub+0x32e>
1001428c:	e080      	b.n	10014390 <__aeabi_dsub+0x430>
1001428e:	2140      	movs	r1, #64	; 0x40
10014290:	1acb      	subs	r3, r1, r3
10014292:	409a      	lsls	r2, r3
10014294:	4315      	orrs	r5, r2
10014296:	1e6a      	subs	r2, r5, #1
10014298:	4195      	sbcs	r5, r2
1001429a:	2700      	movs	r7, #0
1001429c:	4325      	orrs	r5, r4
1001429e:	2400      	movs	r4, #0
100142a0:	e71f      	b.n	100140e2 <__aeabi_dsub+0x182>
100142a2:	4663      	mov	r3, ip
100142a4:	0002      	movs	r2, r0
100142a6:	3b20      	subs	r3, #32
100142a8:	40da      	lsrs	r2, r3
100142aa:	4663      	mov	r3, ip
100142ac:	2b20      	cmp	r3, #32
100142ae:	d071      	beq.n	10014394 <__aeabi_dsub+0x434>
100142b0:	2340      	movs	r3, #64	; 0x40
100142b2:	4666      	mov	r6, ip
100142b4:	1b9b      	subs	r3, r3, r6
100142b6:	4098      	lsls	r0, r3
100142b8:	4301      	orrs	r1, r0
100142ba:	1e48      	subs	r0, r1, #1
100142bc:	4181      	sbcs	r1, r0
100142be:	4311      	orrs	r1, r2
100142c0:	2200      	movs	r2, #0
100142c2:	e6cf      	b.n	10014064 <__aeabi_dsub+0x104>
100142c4:	000007ff 	.word	0x000007ff
100142c8:	ff7fffff 	.word	0xff7fffff
100142cc:	800fffff 	.word	0x800fffff
100142d0:	2c00      	cmp	r4, #0
100142d2:	d048      	beq.n	10014366 <__aeabi_dsub+0x406>
100142d4:	4cca      	ldr	r4, [pc, #808]	; (10014600 <__aeabi_dsub+0x6a0>)
100142d6:	42a2      	cmp	r2, r4
100142d8:	d100      	bne.n	100142dc <__aeabi_dsub+0x37c>
100142da:	e0a2      	b.n	10014422 <__aeabi_dsub+0x4c2>
100142dc:	4274      	negs	r4, r6
100142de:	46a1      	mov	r9, r4
100142e0:	2480      	movs	r4, #128	; 0x80
100142e2:	0424      	lsls	r4, r4, #16
100142e4:	4327      	orrs	r7, r4
100142e6:	464c      	mov	r4, r9
100142e8:	2c38      	cmp	r4, #56	; 0x38
100142ea:	dd00      	ble.n	100142ee <__aeabi_dsub+0x38e>
100142ec:	e0db      	b.n	100144a6 <__aeabi_dsub+0x546>
100142ee:	2c1f      	cmp	r4, #31
100142f0:	dd00      	ble.n	100142f4 <__aeabi_dsub+0x394>
100142f2:	e144      	b.n	1001457e <__aeabi_dsub+0x61e>
100142f4:	464e      	mov	r6, r9
100142f6:	2420      	movs	r4, #32
100142f8:	1ba4      	subs	r4, r4, r6
100142fa:	003e      	movs	r6, r7
100142fc:	40a6      	lsls	r6, r4
100142fe:	46a2      	mov	sl, r4
10014300:	46b0      	mov	r8, r6
10014302:	464c      	mov	r4, r9
10014304:	002e      	movs	r6, r5
10014306:	40e6      	lsrs	r6, r4
10014308:	46b4      	mov	ip, r6
1001430a:	4646      	mov	r6, r8
1001430c:	4664      	mov	r4, ip
1001430e:	4326      	orrs	r6, r4
10014310:	4654      	mov	r4, sl
10014312:	40a5      	lsls	r5, r4
10014314:	1e6c      	subs	r4, r5, #1
10014316:	41a5      	sbcs	r5, r4
10014318:	0034      	movs	r4, r6
1001431a:	432c      	orrs	r4, r5
1001431c:	464d      	mov	r5, r9
1001431e:	40ef      	lsrs	r7, r5
10014320:	1b0d      	subs	r5, r1, r4
10014322:	e028      	b.n	10014376 <__aeabi_dsub+0x416>
10014324:	464a      	mov	r2, r9
10014326:	4643      	mov	r3, r8
10014328:	464d      	mov	r5, r9
1001432a:	431a      	orrs	r2, r3
1001432c:	d000      	beq.n	10014330 <__aeabi_dsub+0x3d0>
1001432e:	e6a5      	b.n	1001407c <__aeabi_dsub+0x11c>
10014330:	2300      	movs	r3, #0
10014332:	2400      	movs	r4, #0
10014334:	2500      	movs	r5, #0
10014336:	e6de      	b.n	100140f6 <__aeabi_dsub+0x196>
10014338:	2a1f      	cmp	r2, #31
1001433a:	dc5a      	bgt.n	100143f2 <__aeabi_dsub+0x492>
1001433c:	4666      	mov	r6, ip
1001433e:	2220      	movs	r2, #32
10014340:	1b92      	subs	r2, r2, r6
10014342:	0006      	movs	r6, r0
10014344:	4096      	lsls	r6, r2
10014346:	4691      	mov	r9, r2
10014348:	46b0      	mov	r8, r6
1001434a:	4662      	mov	r2, ip
1001434c:	000e      	movs	r6, r1
1001434e:	40d6      	lsrs	r6, r2
10014350:	4642      	mov	r2, r8
10014352:	4316      	orrs	r6, r2
10014354:	464a      	mov	r2, r9
10014356:	4091      	lsls	r1, r2
10014358:	1e4a      	subs	r2, r1, #1
1001435a:	4191      	sbcs	r1, r2
1001435c:	0002      	movs	r2, r0
1001435e:	4660      	mov	r0, ip
10014360:	4331      	orrs	r1, r6
10014362:	40c2      	lsrs	r2, r0
10014364:	e6e4      	b.n	10014130 <__aeabi_dsub+0x1d0>
10014366:	003c      	movs	r4, r7
10014368:	432c      	orrs	r4, r5
1001436a:	d05a      	beq.n	10014422 <__aeabi_dsub+0x4c2>
1001436c:	43f4      	mvns	r4, r6
1001436e:	46a1      	mov	r9, r4
10014370:	2c00      	cmp	r4, #0
10014372:	d152      	bne.n	1001441a <__aeabi_dsub+0x4ba>
10014374:	1b4d      	subs	r5, r1, r5
10014376:	42a9      	cmp	r1, r5
10014378:	4189      	sbcs	r1, r1
1001437a:	1bc7      	subs	r7, r0, r7
1001437c:	4249      	negs	r1, r1
1001437e:	1a7f      	subs	r7, r7, r1
10014380:	0014      	movs	r4, r2
10014382:	469a      	mov	sl, r3
10014384:	e675      	b.n	10014072 <__aeabi_dsub+0x112>
10014386:	4a9e      	ldr	r2, [pc, #632]	; (10014600 <__aeabi_dsub+0x6a0>)
10014388:	4294      	cmp	r4, r2
1001438a:	d000      	beq.n	1001438e <__aeabi_dsub+0x42e>
1001438c:	e6c7      	b.n	1001411e <__aeabi_dsub+0x1be>
1001438e:	e613      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014390:	2200      	movs	r2, #0
10014392:	e77f      	b.n	10014294 <__aeabi_dsub+0x334>
10014394:	2000      	movs	r0, #0
10014396:	e78f      	b.n	100142b8 <__aeabi_dsub+0x358>
10014398:	2c00      	cmp	r4, #0
1001439a:	d000      	beq.n	1001439e <__aeabi_dsub+0x43e>
1001439c:	e0c8      	b.n	10014530 <__aeabi_dsub+0x5d0>
1001439e:	003b      	movs	r3, r7
100143a0:	432b      	orrs	r3, r5
100143a2:	d100      	bne.n	100143a6 <__aeabi_dsub+0x446>
100143a4:	e10f      	b.n	100145c6 <__aeabi_dsub+0x666>
100143a6:	0003      	movs	r3, r0
100143a8:	430b      	orrs	r3, r1
100143aa:	d100      	bne.n	100143ae <__aeabi_dsub+0x44e>
100143ac:	e604      	b.n	10013fb8 <__aeabi_dsub+0x58>
100143ae:	1869      	adds	r1, r5, r1
100143b0:	42a9      	cmp	r1, r5
100143b2:	419b      	sbcs	r3, r3
100143b4:	183f      	adds	r7, r7, r0
100143b6:	425b      	negs	r3, r3
100143b8:	19df      	adds	r7, r3, r7
100143ba:	023b      	lsls	r3, r7, #8
100143bc:	d400      	bmi.n	100143c0 <__aeabi_dsub+0x460>
100143be:	e11a      	b.n	100145f6 <__aeabi_dsub+0x696>
100143c0:	4b90      	ldr	r3, [pc, #576]	; (10014604 <__aeabi_dsub+0x6a4>)
100143c2:	000d      	movs	r5, r1
100143c4:	401f      	ands	r7, r3
100143c6:	4664      	mov	r4, ip
100143c8:	e5f6      	b.n	10013fb8 <__aeabi_dsub+0x58>
100143ca:	469a      	mov	sl, r3
100143cc:	e689      	b.n	100140e2 <__aeabi_dsub+0x182>
100143ce:	003a      	movs	r2, r7
100143d0:	432a      	orrs	r2, r5
100143d2:	2c00      	cmp	r4, #0
100143d4:	d15c      	bne.n	10014490 <__aeabi_dsub+0x530>
100143d6:	2a00      	cmp	r2, #0
100143d8:	d175      	bne.n	100144c6 <__aeabi_dsub+0x566>
100143da:	0002      	movs	r2, r0
100143dc:	430a      	orrs	r2, r1
100143de:	d100      	bne.n	100143e2 <__aeabi_dsub+0x482>
100143e0:	e0ca      	b.n	10014578 <__aeabi_dsub+0x618>
100143e2:	0007      	movs	r7, r0
100143e4:	000d      	movs	r5, r1
100143e6:	469a      	mov	sl, r3
100143e8:	e5e6      	b.n	10013fb8 <__aeabi_dsub+0x58>
100143ea:	4664      	mov	r4, ip
100143ec:	2200      	movs	r2, #0
100143ee:	2500      	movs	r5, #0
100143f0:	e681      	b.n	100140f6 <__aeabi_dsub+0x196>
100143f2:	4662      	mov	r2, ip
100143f4:	0006      	movs	r6, r0
100143f6:	3a20      	subs	r2, #32
100143f8:	40d6      	lsrs	r6, r2
100143fa:	4662      	mov	r2, ip
100143fc:	46b0      	mov	r8, r6
100143fe:	2a20      	cmp	r2, #32
10014400:	d100      	bne.n	10014404 <__aeabi_dsub+0x4a4>
10014402:	e0b7      	b.n	10014574 <__aeabi_dsub+0x614>
10014404:	2240      	movs	r2, #64	; 0x40
10014406:	4666      	mov	r6, ip
10014408:	1b92      	subs	r2, r2, r6
1001440a:	4090      	lsls	r0, r2
1001440c:	4301      	orrs	r1, r0
1001440e:	4642      	mov	r2, r8
10014410:	1e48      	subs	r0, r1, #1
10014412:	4181      	sbcs	r1, r0
10014414:	4311      	orrs	r1, r2
10014416:	2200      	movs	r2, #0
10014418:	e68a      	b.n	10014130 <__aeabi_dsub+0x1d0>
1001441a:	4c79      	ldr	r4, [pc, #484]	; (10014600 <__aeabi_dsub+0x6a0>)
1001441c:	42a2      	cmp	r2, r4
1001441e:	d000      	beq.n	10014422 <__aeabi_dsub+0x4c2>
10014420:	e761      	b.n	100142e6 <__aeabi_dsub+0x386>
10014422:	0007      	movs	r7, r0
10014424:	000d      	movs	r5, r1
10014426:	0014      	movs	r4, r2
10014428:	469a      	mov	sl, r3
1001442a:	e5c5      	b.n	10013fb8 <__aeabi_dsub+0x58>
1001442c:	2c00      	cmp	r4, #0
1001442e:	d141      	bne.n	100144b4 <__aeabi_dsub+0x554>
10014430:	003c      	movs	r4, r7
10014432:	432c      	orrs	r4, r5
10014434:	d078      	beq.n	10014528 <__aeabi_dsub+0x5c8>
10014436:	43f4      	mvns	r4, r6
10014438:	46a1      	mov	r9, r4
1001443a:	2c00      	cmp	r4, #0
1001443c:	d020      	beq.n	10014480 <__aeabi_dsub+0x520>
1001443e:	4c70      	ldr	r4, [pc, #448]	; (10014600 <__aeabi_dsub+0x6a0>)
10014440:	42a2      	cmp	r2, r4
10014442:	d071      	beq.n	10014528 <__aeabi_dsub+0x5c8>
10014444:	464c      	mov	r4, r9
10014446:	2c38      	cmp	r4, #56	; 0x38
10014448:	dd00      	ble.n	1001444c <__aeabi_dsub+0x4ec>
1001444a:	e0b2      	b.n	100145b2 <__aeabi_dsub+0x652>
1001444c:	2c1f      	cmp	r4, #31
1001444e:	dd00      	ble.n	10014452 <__aeabi_dsub+0x4f2>
10014450:	e0bc      	b.n	100145cc <__aeabi_dsub+0x66c>
10014452:	2620      	movs	r6, #32
10014454:	1b34      	subs	r4, r6, r4
10014456:	46a2      	mov	sl, r4
10014458:	003c      	movs	r4, r7
1001445a:	4656      	mov	r6, sl
1001445c:	40b4      	lsls	r4, r6
1001445e:	464e      	mov	r6, r9
10014460:	46a0      	mov	r8, r4
10014462:	002c      	movs	r4, r5
10014464:	40f4      	lsrs	r4, r6
10014466:	46a4      	mov	ip, r4
10014468:	4644      	mov	r4, r8
1001446a:	4666      	mov	r6, ip
1001446c:	4334      	orrs	r4, r6
1001446e:	46a4      	mov	ip, r4
10014470:	4654      	mov	r4, sl
10014472:	40a5      	lsls	r5, r4
10014474:	4664      	mov	r4, ip
10014476:	1e6e      	subs	r6, r5, #1
10014478:	41b5      	sbcs	r5, r6
1001447a:	4325      	orrs	r5, r4
1001447c:	464c      	mov	r4, r9
1001447e:	40e7      	lsrs	r7, r4
10014480:	186d      	adds	r5, r5, r1
10014482:	428d      	cmp	r5, r1
10014484:	4189      	sbcs	r1, r1
10014486:	183f      	adds	r7, r7, r0
10014488:	4249      	negs	r1, r1
1001448a:	19cf      	adds	r7, r1, r7
1001448c:	0014      	movs	r4, r2
1001448e:	e656      	b.n	1001413e <__aeabi_dsub+0x1de>
10014490:	2a00      	cmp	r2, #0
10014492:	d12f      	bne.n	100144f4 <__aeabi_dsub+0x594>
10014494:	0002      	movs	r2, r0
10014496:	430a      	orrs	r2, r1
10014498:	d100      	bne.n	1001449c <__aeabi_dsub+0x53c>
1001449a:	e084      	b.n	100145a6 <__aeabi_dsub+0x646>
1001449c:	0007      	movs	r7, r0
1001449e:	000d      	movs	r5, r1
100144a0:	469a      	mov	sl, r3
100144a2:	4c57      	ldr	r4, [pc, #348]	; (10014600 <__aeabi_dsub+0x6a0>)
100144a4:	e588      	b.n	10013fb8 <__aeabi_dsub+0x58>
100144a6:	433d      	orrs	r5, r7
100144a8:	1e6f      	subs	r7, r5, #1
100144aa:	41bd      	sbcs	r5, r7
100144ac:	b2ec      	uxtb	r4, r5
100144ae:	2700      	movs	r7, #0
100144b0:	1b0d      	subs	r5, r1, r4
100144b2:	e760      	b.n	10014376 <__aeabi_dsub+0x416>
100144b4:	4c52      	ldr	r4, [pc, #328]	; (10014600 <__aeabi_dsub+0x6a0>)
100144b6:	42a2      	cmp	r2, r4
100144b8:	d036      	beq.n	10014528 <__aeabi_dsub+0x5c8>
100144ba:	4274      	negs	r4, r6
100144bc:	2680      	movs	r6, #128	; 0x80
100144be:	0436      	lsls	r6, r6, #16
100144c0:	46a1      	mov	r9, r4
100144c2:	4337      	orrs	r7, r6
100144c4:	e7be      	b.n	10014444 <__aeabi_dsub+0x4e4>
100144c6:	0002      	movs	r2, r0
100144c8:	430a      	orrs	r2, r1
100144ca:	d100      	bne.n	100144ce <__aeabi_dsub+0x56e>
100144cc:	e574      	b.n	10013fb8 <__aeabi_dsub+0x58>
100144ce:	1a6a      	subs	r2, r5, r1
100144d0:	4690      	mov	r8, r2
100144d2:	4545      	cmp	r5, r8
100144d4:	41b6      	sbcs	r6, r6
100144d6:	1a3a      	subs	r2, r7, r0
100144d8:	4276      	negs	r6, r6
100144da:	1b92      	subs	r2, r2, r6
100144dc:	4694      	mov	ip, r2
100144de:	0212      	lsls	r2, r2, #8
100144e0:	d400      	bmi.n	100144e4 <__aeabi_dsub+0x584>
100144e2:	e5f7      	b.n	100140d4 <__aeabi_dsub+0x174>
100144e4:	1b4d      	subs	r5, r1, r5
100144e6:	42a9      	cmp	r1, r5
100144e8:	4189      	sbcs	r1, r1
100144ea:	1bc7      	subs	r7, r0, r7
100144ec:	4249      	negs	r1, r1
100144ee:	1a7f      	subs	r7, r7, r1
100144f0:	469a      	mov	sl, r3
100144f2:	e561      	b.n	10013fb8 <__aeabi_dsub+0x58>
100144f4:	0002      	movs	r2, r0
100144f6:	430a      	orrs	r2, r1
100144f8:	d03a      	beq.n	10014570 <__aeabi_dsub+0x610>
100144fa:	08ed      	lsrs	r5, r5, #3
100144fc:	077c      	lsls	r4, r7, #29
100144fe:	432c      	orrs	r4, r5
10014500:	2580      	movs	r5, #128	; 0x80
10014502:	08fa      	lsrs	r2, r7, #3
10014504:	032d      	lsls	r5, r5, #12
10014506:	422a      	tst	r2, r5
10014508:	d008      	beq.n	1001451c <__aeabi_dsub+0x5bc>
1001450a:	08c7      	lsrs	r7, r0, #3
1001450c:	422f      	tst	r7, r5
1001450e:	d105      	bne.n	1001451c <__aeabi_dsub+0x5bc>
10014510:	0745      	lsls	r5, r0, #29
10014512:	002c      	movs	r4, r5
10014514:	003a      	movs	r2, r7
10014516:	469a      	mov	sl, r3
10014518:	08c9      	lsrs	r1, r1, #3
1001451a:	430c      	orrs	r4, r1
1001451c:	0f67      	lsrs	r7, r4, #29
1001451e:	00d2      	lsls	r2, r2, #3
10014520:	00e5      	lsls	r5, r4, #3
10014522:	4317      	orrs	r7, r2
10014524:	4c36      	ldr	r4, [pc, #216]	; (10014600 <__aeabi_dsub+0x6a0>)
10014526:	e547      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014528:	0007      	movs	r7, r0
1001452a:	000d      	movs	r5, r1
1001452c:	0014      	movs	r4, r2
1001452e:	e543      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014530:	003a      	movs	r2, r7
10014532:	432a      	orrs	r2, r5
10014534:	d043      	beq.n	100145be <__aeabi_dsub+0x65e>
10014536:	0002      	movs	r2, r0
10014538:	430a      	orrs	r2, r1
1001453a:	d019      	beq.n	10014570 <__aeabi_dsub+0x610>
1001453c:	08ed      	lsrs	r5, r5, #3
1001453e:	077c      	lsls	r4, r7, #29
10014540:	432c      	orrs	r4, r5
10014542:	2580      	movs	r5, #128	; 0x80
10014544:	08fa      	lsrs	r2, r7, #3
10014546:	032d      	lsls	r5, r5, #12
10014548:	422a      	tst	r2, r5
1001454a:	d007      	beq.n	1001455c <__aeabi_dsub+0x5fc>
1001454c:	08c6      	lsrs	r6, r0, #3
1001454e:	422e      	tst	r6, r5
10014550:	d104      	bne.n	1001455c <__aeabi_dsub+0x5fc>
10014552:	0747      	lsls	r7, r0, #29
10014554:	003c      	movs	r4, r7
10014556:	0032      	movs	r2, r6
10014558:	08c9      	lsrs	r1, r1, #3
1001455a:	430c      	orrs	r4, r1
1001455c:	00d7      	lsls	r7, r2, #3
1001455e:	0f62      	lsrs	r2, r4, #29
10014560:	00e5      	lsls	r5, r4, #3
10014562:	4317      	orrs	r7, r2
10014564:	469a      	mov	sl, r3
10014566:	4c26      	ldr	r4, [pc, #152]	; (10014600 <__aeabi_dsub+0x6a0>)
10014568:	e526      	b.n	10013fb8 <__aeabi_dsub+0x58>
1001456a:	2200      	movs	r2, #0
1001456c:	2500      	movs	r5, #0
1001456e:	e544      	b.n	10013ffa <__aeabi_dsub+0x9a>
10014570:	4c23      	ldr	r4, [pc, #140]	; (10014600 <__aeabi_dsub+0x6a0>)
10014572:	e521      	b.n	10013fb8 <__aeabi_dsub+0x58>
10014574:	2000      	movs	r0, #0
10014576:	e749      	b.n	1001440c <__aeabi_dsub+0x4ac>
10014578:	2300      	movs	r3, #0
1001457a:	2500      	movs	r5, #0
1001457c:	e5bb      	b.n	100140f6 <__aeabi_dsub+0x196>
1001457e:	464c      	mov	r4, r9
10014580:	003e      	movs	r6, r7
10014582:	3c20      	subs	r4, #32
10014584:	40e6      	lsrs	r6, r4
10014586:	464c      	mov	r4, r9
10014588:	46b4      	mov	ip, r6
1001458a:	2c20      	cmp	r4, #32
1001458c:	d031      	beq.n	100145f2 <__aeabi_dsub+0x692>
1001458e:	2440      	movs	r4, #64	; 0x40
10014590:	464e      	mov	r6, r9
10014592:	1ba6      	subs	r6, r4, r6
10014594:	40b7      	lsls	r7, r6
10014596:	433d      	orrs	r5, r7
10014598:	1e6c      	subs	r4, r5, #1
1001459a:	41a5      	sbcs	r5, r4
1001459c:	4664      	mov	r4, ip
1001459e:	432c      	orrs	r4, r5
100145a0:	2700      	movs	r7, #0
100145a2:	1b0d      	subs	r5, r1, r4
100145a4:	e6e7      	b.n	10014376 <__aeabi_dsub+0x416>
100145a6:	2280      	movs	r2, #128	; 0x80
100145a8:	2300      	movs	r3, #0
100145aa:	0312      	lsls	r2, r2, #12
100145ac:	4c14      	ldr	r4, [pc, #80]	; (10014600 <__aeabi_dsub+0x6a0>)
100145ae:	2500      	movs	r5, #0
100145b0:	e5a1      	b.n	100140f6 <__aeabi_dsub+0x196>
100145b2:	433d      	orrs	r5, r7
100145b4:	1e6f      	subs	r7, r5, #1
100145b6:	41bd      	sbcs	r5, r7
100145b8:	2700      	movs	r7, #0
100145ba:	b2ed      	uxtb	r5, r5
100145bc:	e760      	b.n	10014480 <__aeabi_dsub+0x520>
100145be:	0007      	movs	r7, r0
100145c0:	000d      	movs	r5, r1
100145c2:	4c0f      	ldr	r4, [pc, #60]	; (10014600 <__aeabi_dsub+0x6a0>)
100145c4:	e4f8      	b.n	10013fb8 <__aeabi_dsub+0x58>
100145c6:	0007      	movs	r7, r0
100145c8:	000d      	movs	r5, r1
100145ca:	e4f5      	b.n	10013fb8 <__aeabi_dsub+0x58>
100145cc:	464e      	mov	r6, r9
100145ce:	003c      	movs	r4, r7
100145d0:	3e20      	subs	r6, #32
100145d2:	40f4      	lsrs	r4, r6
100145d4:	46a0      	mov	r8, r4
100145d6:	464c      	mov	r4, r9
100145d8:	2c20      	cmp	r4, #32
100145da:	d00e      	beq.n	100145fa <__aeabi_dsub+0x69a>
100145dc:	2440      	movs	r4, #64	; 0x40
100145de:	464e      	mov	r6, r9
100145e0:	1ba4      	subs	r4, r4, r6
100145e2:	40a7      	lsls	r7, r4
100145e4:	433d      	orrs	r5, r7
100145e6:	1e6f      	subs	r7, r5, #1
100145e8:	41bd      	sbcs	r5, r7
100145ea:	4644      	mov	r4, r8
100145ec:	2700      	movs	r7, #0
100145ee:	4325      	orrs	r5, r4
100145f0:	e746      	b.n	10014480 <__aeabi_dsub+0x520>
100145f2:	2700      	movs	r7, #0
100145f4:	e7cf      	b.n	10014596 <__aeabi_dsub+0x636>
100145f6:	000d      	movs	r5, r1
100145f8:	e573      	b.n	100140e2 <__aeabi_dsub+0x182>
100145fa:	2700      	movs	r7, #0
100145fc:	e7f2      	b.n	100145e4 <__aeabi_dsub+0x684>
100145fe:	46c0      	nop			; (mov r8, r8)
10014600:	000007ff 	.word	0x000007ff
10014604:	ff7fffff 	.word	0xff7fffff

10014608 <__aeabi_dcmpun>:
10014608:	b570      	push	{r4, r5, r6, lr}
1001460a:	4e0e      	ldr	r6, [pc, #56]	; (10014644 <__aeabi_dcmpun+0x3c>)
1001460c:	030c      	lsls	r4, r1, #12
1001460e:	031d      	lsls	r5, r3, #12
10014610:	0049      	lsls	r1, r1, #1
10014612:	005b      	lsls	r3, r3, #1
10014614:	0b24      	lsrs	r4, r4, #12
10014616:	0d49      	lsrs	r1, r1, #21
10014618:	0b2d      	lsrs	r5, r5, #12
1001461a:	0d5b      	lsrs	r3, r3, #21
1001461c:	42b1      	cmp	r1, r6
1001461e:	d004      	beq.n	1001462a <__aeabi_dcmpun+0x22>
10014620:	4908      	ldr	r1, [pc, #32]	; (10014644 <__aeabi_dcmpun+0x3c>)
10014622:	2000      	movs	r0, #0
10014624:	428b      	cmp	r3, r1
10014626:	d008      	beq.n	1001463a <__aeabi_dcmpun+0x32>
10014628:	bd70      	pop	{r4, r5, r6, pc}
1001462a:	4304      	orrs	r4, r0
1001462c:	2001      	movs	r0, #1
1001462e:	2c00      	cmp	r4, #0
10014630:	d1fa      	bne.n	10014628 <__aeabi_dcmpun+0x20>
10014632:	4904      	ldr	r1, [pc, #16]	; (10014644 <__aeabi_dcmpun+0x3c>)
10014634:	2000      	movs	r0, #0
10014636:	428b      	cmp	r3, r1
10014638:	d1f6      	bne.n	10014628 <__aeabi_dcmpun+0x20>
1001463a:	4315      	orrs	r5, r2
1001463c:	0028      	movs	r0, r5
1001463e:	1e45      	subs	r5, r0, #1
10014640:	41a8      	sbcs	r0, r5
10014642:	e7f1      	b.n	10014628 <__aeabi_dcmpun+0x20>
10014644:	000007ff 	.word	0x000007ff

10014648 <__aeabi_d2iz>:
10014648:	030b      	lsls	r3, r1, #12
1001464a:	b530      	push	{r4, r5, lr}
1001464c:	4d13      	ldr	r5, [pc, #76]	; (1001469c <__aeabi_d2iz+0x54>)
1001464e:	0b1a      	lsrs	r2, r3, #12
10014650:	004b      	lsls	r3, r1, #1
10014652:	0d5b      	lsrs	r3, r3, #21
10014654:	0fc9      	lsrs	r1, r1, #31
10014656:	2400      	movs	r4, #0
10014658:	42ab      	cmp	r3, r5
1001465a:	dd11      	ble.n	10014680 <__aeabi_d2iz+0x38>
1001465c:	4c10      	ldr	r4, [pc, #64]	; (100146a0 <__aeabi_d2iz+0x58>)
1001465e:	42a3      	cmp	r3, r4
10014660:	dc10      	bgt.n	10014684 <__aeabi_d2iz+0x3c>
10014662:	2480      	movs	r4, #128	; 0x80
10014664:	0364      	lsls	r4, r4, #13
10014666:	4322      	orrs	r2, r4
10014668:	4c0e      	ldr	r4, [pc, #56]	; (100146a4 <__aeabi_d2iz+0x5c>)
1001466a:	1ae4      	subs	r4, r4, r3
1001466c:	2c1f      	cmp	r4, #31
1001466e:	dd0c      	ble.n	1001468a <__aeabi_d2iz+0x42>
10014670:	480d      	ldr	r0, [pc, #52]	; (100146a8 <__aeabi_d2iz+0x60>)
10014672:	1ac3      	subs	r3, r0, r3
10014674:	40da      	lsrs	r2, r3
10014676:	0013      	movs	r3, r2
10014678:	425c      	negs	r4, r3
1001467a:	2900      	cmp	r1, #0
1001467c:	d100      	bne.n	10014680 <__aeabi_d2iz+0x38>
1001467e:	001c      	movs	r4, r3
10014680:	0020      	movs	r0, r4
10014682:	bd30      	pop	{r4, r5, pc}
10014684:	4b09      	ldr	r3, [pc, #36]	; (100146ac <__aeabi_d2iz+0x64>)
10014686:	18cc      	adds	r4, r1, r3
10014688:	e7fa      	b.n	10014680 <__aeabi_d2iz+0x38>
1001468a:	40e0      	lsrs	r0, r4
1001468c:	4c08      	ldr	r4, [pc, #32]	; (100146b0 <__aeabi_d2iz+0x68>)
1001468e:	46a4      	mov	ip, r4
10014690:	4463      	add	r3, ip
10014692:	409a      	lsls	r2, r3
10014694:	0013      	movs	r3, r2
10014696:	4303      	orrs	r3, r0
10014698:	e7ee      	b.n	10014678 <__aeabi_d2iz+0x30>
1001469a:	46c0      	nop			; (mov r8, r8)
1001469c:	000003fe 	.word	0x000003fe
100146a0:	0000041d 	.word	0x0000041d
100146a4:	00000433 	.word	0x00000433
100146a8:	00000413 	.word	0x00000413
100146ac:	7fffffff 	.word	0x7fffffff
100146b0:	fffffbed 	.word	0xfffffbed

100146b4 <__aeabi_i2d>:
100146b4:	b570      	push	{r4, r5, r6, lr}
100146b6:	2800      	cmp	r0, #0
100146b8:	d030      	beq.n	1001471c <__aeabi_i2d+0x68>
100146ba:	17c3      	asrs	r3, r0, #31
100146bc:	18c4      	adds	r4, r0, r3
100146be:	405c      	eors	r4, r3
100146c0:	0fc5      	lsrs	r5, r0, #31
100146c2:	0020      	movs	r0, r4
100146c4:	f000 f950 	bl	10014968 <__clzsi2>
100146c8:	4b17      	ldr	r3, [pc, #92]	; (10014728 <__aeabi_i2d+0x74>)
100146ca:	4a18      	ldr	r2, [pc, #96]	; (1001472c <__aeabi_i2d+0x78>)
100146cc:	1a1b      	subs	r3, r3, r0
100146ce:	1ad2      	subs	r2, r2, r3
100146d0:	2a1f      	cmp	r2, #31
100146d2:	dd18      	ble.n	10014706 <__aeabi_i2d+0x52>
100146d4:	4a16      	ldr	r2, [pc, #88]	; (10014730 <__aeabi_i2d+0x7c>)
100146d6:	1ad2      	subs	r2, r2, r3
100146d8:	4094      	lsls	r4, r2
100146da:	2200      	movs	r2, #0
100146dc:	0324      	lsls	r4, r4, #12
100146de:	055b      	lsls	r3, r3, #21
100146e0:	0b24      	lsrs	r4, r4, #12
100146e2:	0d5b      	lsrs	r3, r3, #21
100146e4:	2100      	movs	r1, #0
100146e6:	0010      	movs	r0, r2
100146e8:	0324      	lsls	r4, r4, #12
100146ea:	0d0a      	lsrs	r2, r1, #20
100146ec:	0512      	lsls	r2, r2, #20
100146ee:	0b24      	lsrs	r4, r4, #12
100146f0:	4314      	orrs	r4, r2
100146f2:	4a10      	ldr	r2, [pc, #64]	; (10014734 <__aeabi_i2d+0x80>)
100146f4:	051b      	lsls	r3, r3, #20
100146f6:	4014      	ands	r4, r2
100146f8:	431c      	orrs	r4, r3
100146fa:	0064      	lsls	r4, r4, #1
100146fc:	07ed      	lsls	r5, r5, #31
100146fe:	0864      	lsrs	r4, r4, #1
10014700:	432c      	orrs	r4, r5
10014702:	0021      	movs	r1, r4
10014704:	bd70      	pop	{r4, r5, r6, pc}
10014706:	0021      	movs	r1, r4
10014708:	4091      	lsls	r1, r2
1001470a:	000a      	movs	r2, r1
1001470c:	210b      	movs	r1, #11
1001470e:	1a08      	subs	r0, r1, r0
10014710:	40c4      	lsrs	r4, r0
10014712:	055b      	lsls	r3, r3, #21
10014714:	0324      	lsls	r4, r4, #12
10014716:	0b24      	lsrs	r4, r4, #12
10014718:	0d5b      	lsrs	r3, r3, #21
1001471a:	e7e3      	b.n	100146e4 <__aeabi_i2d+0x30>
1001471c:	2500      	movs	r5, #0
1001471e:	2300      	movs	r3, #0
10014720:	2400      	movs	r4, #0
10014722:	2200      	movs	r2, #0
10014724:	e7de      	b.n	100146e4 <__aeabi_i2d+0x30>
10014726:	46c0      	nop			; (mov r8, r8)
10014728:	0000041e 	.word	0x0000041e
1001472c:	00000433 	.word	0x00000433
10014730:	00000413 	.word	0x00000413
10014734:	800fffff 	.word	0x800fffff

10014738 <__aeabi_ui2d>:
10014738:	b570      	push	{r4, r5, r6, lr}
1001473a:	1e05      	subs	r5, r0, #0
1001473c:	d028      	beq.n	10014790 <__aeabi_ui2d+0x58>
1001473e:	f000 f913 	bl	10014968 <__clzsi2>
10014742:	4b15      	ldr	r3, [pc, #84]	; (10014798 <__aeabi_ui2d+0x60>)
10014744:	4a15      	ldr	r2, [pc, #84]	; (1001479c <__aeabi_ui2d+0x64>)
10014746:	1a1b      	subs	r3, r3, r0
10014748:	1ad2      	subs	r2, r2, r3
1001474a:	2a1f      	cmp	r2, #31
1001474c:	dd16      	ble.n	1001477c <__aeabi_ui2d+0x44>
1001474e:	002c      	movs	r4, r5
10014750:	4a13      	ldr	r2, [pc, #76]	; (100147a0 <__aeabi_ui2d+0x68>)
10014752:	2500      	movs	r5, #0
10014754:	1ad2      	subs	r2, r2, r3
10014756:	4094      	lsls	r4, r2
10014758:	055a      	lsls	r2, r3, #21
1001475a:	0324      	lsls	r4, r4, #12
1001475c:	0b24      	lsrs	r4, r4, #12
1001475e:	0d52      	lsrs	r2, r2, #21
10014760:	2100      	movs	r1, #0
10014762:	0324      	lsls	r4, r4, #12
10014764:	0d0b      	lsrs	r3, r1, #20
10014766:	0b24      	lsrs	r4, r4, #12
10014768:	051b      	lsls	r3, r3, #20
1001476a:	4323      	orrs	r3, r4
1001476c:	4c0d      	ldr	r4, [pc, #52]	; (100147a4 <__aeabi_ui2d+0x6c>)
1001476e:	0512      	lsls	r2, r2, #20
10014770:	4023      	ands	r3, r4
10014772:	4313      	orrs	r3, r2
10014774:	005b      	lsls	r3, r3, #1
10014776:	0028      	movs	r0, r5
10014778:	0859      	lsrs	r1, r3, #1
1001477a:	bd70      	pop	{r4, r5, r6, pc}
1001477c:	210b      	movs	r1, #11
1001477e:	002c      	movs	r4, r5
10014780:	1a08      	subs	r0, r1, r0
10014782:	40c4      	lsrs	r4, r0
10014784:	4095      	lsls	r5, r2
10014786:	0324      	lsls	r4, r4, #12
10014788:	055a      	lsls	r2, r3, #21
1001478a:	0b24      	lsrs	r4, r4, #12
1001478c:	0d52      	lsrs	r2, r2, #21
1001478e:	e7e7      	b.n	10014760 <__aeabi_ui2d+0x28>
10014790:	2200      	movs	r2, #0
10014792:	2400      	movs	r4, #0
10014794:	e7e4      	b.n	10014760 <__aeabi_ui2d+0x28>
10014796:	46c0      	nop			; (mov r8, r8)
10014798:	0000041e 	.word	0x0000041e
1001479c:	00000433 	.word	0x00000433
100147a0:	00000413 	.word	0x00000413
100147a4:	800fffff 	.word	0x800fffff

100147a8 <__aeabi_f2d>:
100147a8:	0042      	lsls	r2, r0, #1
100147aa:	0e12      	lsrs	r2, r2, #24
100147ac:	1c51      	adds	r1, r2, #1
100147ae:	0243      	lsls	r3, r0, #9
100147b0:	b2c9      	uxtb	r1, r1
100147b2:	b570      	push	{r4, r5, r6, lr}
100147b4:	0a5d      	lsrs	r5, r3, #9
100147b6:	0fc4      	lsrs	r4, r0, #31
100147b8:	2901      	cmp	r1, #1
100147ba:	dd15      	ble.n	100147e8 <__aeabi_f2d+0x40>
100147bc:	21e0      	movs	r1, #224	; 0xe0
100147be:	0089      	lsls	r1, r1, #2
100147c0:	468c      	mov	ip, r1
100147c2:	076d      	lsls	r5, r5, #29
100147c4:	0b1b      	lsrs	r3, r3, #12
100147c6:	4462      	add	r2, ip
100147c8:	2100      	movs	r1, #0
100147ca:	0028      	movs	r0, r5
100147cc:	0d0d      	lsrs	r5, r1, #20
100147ce:	052d      	lsls	r5, r5, #20
100147d0:	432b      	orrs	r3, r5
100147d2:	4d1c      	ldr	r5, [pc, #112]	; (10014844 <__aeabi_f2d+0x9c>)
100147d4:	0552      	lsls	r2, r2, #21
100147d6:	402b      	ands	r3, r5
100147d8:	0852      	lsrs	r2, r2, #1
100147da:	4313      	orrs	r3, r2
100147dc:	005b      	lsls	r3, r3, #1
100147de:	07e4      	lsls	r4, r4, #31
100147e0:	085b      	lsrs	r3, r3, #1
100147e2:	4323      	orrs	r3, r4
100147e4:	0019      	movs	r1, r3
100147e6:	bd70      	pop	{r4, r5, r6, pc}
100147e8:	2a00      	cmp	r2, #0
100147ea:	d115      	bne.n	10014818 <__aeabi_f2d+0x70>
100147ec:	2d00      	cmp	r5, #0
100147ee:	d01f      	beq.n	10014830 <__aeabi_f2d+0x88>
100147f0:	0028      	movs	r0, r5
100147f2:	f000 f8b9 	bl	10014968 <__clzsi2>
100147f6:	280a      	cmp	r0, #10
100147f8:	dc1d      	bgt.n	10014836 <__aeabi_f2d+0x8e>
100147fa:	230b      	movs	r3, #11
100147fc:	002a      	movs	r2, r5
100147fe:	1a1b      	subs	r3, r3, r0
10014800:	40da      	lsrs	r2, r3
10014802:	0013      	movs	r3, r2
10014804:	0002      	movs	r2, r0
10014806:	3215      	adds	r2, #21
10014808:	4095      	lsls	r5, r2
1001480a:	4a0f      	ldr	r2, [pc, #60]	; (10014848 <__aeabi_f2d+0xa0>)
1001480c:	031b      	lsls	r3, r3, #12
1001480e:	1a12      	subs	r2, r2, r0
10014810:	0552      	lsls	r2, r2, #21
10014812:	0b1b      	lsrs	r3, r3, #12
10014814:	0d52      	lsrs	r2, r2, #21
10014816:	e7d7      	b.n	100147c8 <__aeabi_f2d+0x20>
10014818:	2d00      	cmp	r5, #0
1001481a:	d006      	beq.n	1001482a <__aeabi_f2d+0x82>
1001481c:	2280      	movs	r2, #128	; 0x80
1001481e:	0b1b      	lsrs	r3, r3, #12
10014820:	0312      	lsls	r2, r2, #12
10014822:	4313      	orrs	r3, r2
10014824:	076d      	lsls	r5, r5, #29
10014826:	4a09      	ldr	r2, [pc, #36]	; (1001484c <__aeabi_f2d+0xa4>)
10014828:	e7ce      	b.n	100147c8 <__aeabi_f2d+0x20>
1001482a:	4a08      	ldr	r2, [pc, #32]	; (1001484c <__aeabi_f2d+0xa4>)
1001482c:	2300      	movs	r3, #0
1001482e:	e7cb      	b.n	100147c8 <__aeabi_f2d+0x20>
10014830:	2200      	movs	r2, #0
10014832:	2300      	movs	r3, #0
10014834:	e7c8      	b.n	100147c8 <__aeabi_f2d+0x20>
10014836:	0003      	movs	r3, r0
10014838:	3b0b      	subs	r3, #11
1001483a:	409d      	lsls	r5, r3
1001483c:	002b      	movs	r3, r5
1001483e:	2500      	movs	r5, #0
10014840:	e7e3      	b.n	1001480a <__aeabi_f2d+0x62>
10014842:	46c0      	nop			; (mov r8, r8)
10014844:	800fffff 	.word	0x800fffff
10014848:	00000389 	.word	0x00000389
1001484c:	000007ff 	.word	0x000007ff

10014850 <__aeabi_d2f>:
10014850:	004b      	lsls	r3, r1, #1
10014852:	b570      	push	{r4, r5, r6, lr}
10014854:	0d5e      	lsrs	r6, r3, #21
10014856:	030c      	lsls	r4, r1, #12
10014858:	1c75      	adds	r5, r6, #1
1001485a:	0a64      	lsrs	r4, r4, #9
1001485c:	0f42      	lsrs	r2, r0, #29
1001485e:	056d      	lsls	r5, r5, #21
10014860:	4322      	orrs	r2, r4
10014862:	0fc9      	lsrs	r1, r1, #31
10014864:	00c4      	lsls	r4, r0, #3
10014866:	0d6d      	lsrs	r5, r5, #21
10014868:	2d01      	cmp	r5, #1
1001486a:	dd2a      	ble.n	100148c2 <__aeabi_d2f+0x72>
1001486c:	4b3b      	ldr	r3, [pc, #236]	; (1001495c <__aeabi_d2f+0x10c>)
1001486e:	18f3      	adds	r3, r6, r3
10014870:	2bfe      	cmp	r3, #254	; 0xfe
10014872:	dc1a      	bgt.n	100148aa <__aeabi_d2f+0x5a>
10014874:	2b00      	cmp	r3, #0
10014876:	dd42      	ble.n	100148fe <__aeabi_d2f+0xae>
10014878:	0180      	lsls	r0, r0, #6
1001487a:	1e45      	subs	r5, r0, #1
1001487c:	41a8      	sbcs	r0, r5
1001487e:	00d2      	lsls	r2, r2, #3
10014880:	4310      	orrs	r0, r2
10014882:	0f62      	lsrs	r2, r4, #29
10014884:	4302      	orrs	r2, r0
10014886:	0750      	lsls	r0, r2, #29
10014888:	d004      	beq.n	10014894 <__aeabi_d2f+0x44>
1001488a:	200f      	movs	r0, #15
1001488c:	4010      	ands	r0, r2
1001488e:	2804      	cmp	r0, #4
10014890:	d000      	beq.n	10014894 <__aeabi_d2f+0x44>
10014892:	3204      	adds	r2, #4
10014894:	2080      	movs	r0, #128	; 0x80
10014896:	04c0      	lsls	r0, r0, #19
10014898:	4010      	ands	r0, r2
1001489a:	d021      	beq.n	100148e0 <__aeabi_d2f+0x90>
1001489c:	3301      	adds	r3, #1
1001489e:	2bff      	cmp	r3, #255	; 0xff
100148a0:	d003      	beq.n	100148aa <__aeabi_d2f+0x5a>
100148a2:	0192      	lsls	r2, r2, #6
100148a4:	0a52      	lsrs	r2, r2, #9
100148a6:	b2db      	uxtb	r3, r3
100148a8:	e001      	b.n	100148ae <__aeabi_d2f+0x5e>
100148aa:	23ff      	movs	r3, #255	; 0xff
100148ac:	2200      	movs	r2, #0
100148ae:	0252      	lsls	r2, r2, #9
100148b0:	0a52      	lsrs	r2, r2, #9
100148b2:	05db      	lsls	r3, r3, #23
100148b4:	4313      	orrs	r3, r2
100148b6:	005b      	lsls	r3, r3, #1
100148b8:	07c9      	lsls	r1, r1, #31
100148ba:	085b      	lsrs	r3, r3, #1
100148bc:	430b      	orrs	r3, r1
100148be:	0018      	movs	r0, r3
100148c0:	bd70      	pop	{r4, r5, r6, pc}
100148c2:	2e00      	cmp	r6, #0
100148c4:	d007      	beq.n	100148d6 <__aeabi_d2f+0x86>
100148c6:	4314      	orrs	r4, r2
100148c8:	d0ef      	beq.n	100148aa <__aeabi_d2f+0x5a>
100148ca:	2080      	movs	r0, #128	; 0x80
100148cc:	00d2      	lsls	r2, r2, #3
100148ce:	0480      	lsls	r0, r0, #18
100148d0:	4302      	orrs	r2, r0
100148d2:	23ff      	movs	r3, #255	; 0xff
100148d4:	e7d7      	b.n	10014886 <__aeabi_d2f+0x36>
100148d6:	4322      	orrs	r2, r4
100148d8:	2300      	movs	r3, #0
100148da:	2a00      	cmp	r2, #0
100148dc:	d003      	beq.n	100148e6 <__aeabi_d2f+0x96>
100148de:	2205      	movs	r2, #5
100148e0:	08d2      	lsrs	r2, r2, #3
100148e2:	2bff      	cmp	r3, #255	; 0xff
100148e4:	d003      	beq.n	100148ee <__aeabi_d2f+0x9e>
100148e6:	0252      	lsls	r2, r2, #9
100148e8:	0a52      	lsrs	r2, r2, #9
100148ea:	b2db      	uxtb	r3, r3
100148ec:	e7df      	b.n	100148ae <__aeabi_d2f+0x5e>
100148ee:	2a00      	cmp	r2, #0
100148f0:	d032      	beq.n	10014958 <__aeabi_d2f+0x108>
100148f2:	2080      	movs	r0, #128	; 0x80
100148f4:	03c0      	lsls	r0, r0, #15
100148f6:	4302      	orrs	r2, r0
100148f8:	0252      	lsls	r2, r2, #9
100148fa:	0a52      	lsrs	r2, r2, #9
100148fc:	e7d7      	b.n	100148ae <__aeabi_d2f+0x5e>
100148fe:	0018      	movs	r0, r3
10014900:	3017      	adds	r0, #23
10014902:	db14      	blt.n	1001492e <__aeabi_d2f+0xde>
10014904:	2080      	movs	r0, #128	; 0x80
10014906:	0400      	lsls	r0, r0, #16
10014908:	4302      	orrs	r2, r0
1001490a:	201e      	movs	r0, #30
1001490c:	1ac0      	subs	r0, r0, r3
1001490e:	281f      	cmp	r0, #31
10014910:	dc0f      	bgt.n	10014932 <__aeabi_d2f+0xe2>
10014912:	0025      	movs	r5, r4
10014914:	4b12      	ldr	r3, [pc, #72]	; (10014960 <__aeabi_d2f+0x110>)
10014916:	18f3      	adds	r3, r6, r3
10014918:	409d      	lsls	r5, r3
1001491a:	1e6e      	subs	r6, r5, #1
1001491c:	41b5      	sbcs	r5, r6
1001491e:	409a      	lsls	r2, r3
10014920:	002b      	movs	r3, r5
10014922:	4313      	orrs	r3, r2
10014924:	0022      	movs	r2, r4
10014926:	40c2      	lsrs	r2, r0
10014928:	431a      	orrs	r2, r3
1001492a:	2300      	movs	r3, #0
1001492c:	e7ab      	b.n	10014886 <__aeabi_d2f+0x36>
1001492e:	2300      	movs	r3, #0
10014930:	e7d5      	b.n	100148de <__aeabi_d2f+0x8e>
10014932:	2502      	movs	r5, #2
10014934:	426d      	negs	r5, r5
10014936:	1aeb      	subs	r3, r5, r3
10014938:	0015      	movs	r5, r2
1001493a:	40dd      	lsrs	r5, r3
1001493c:	2820      	cmp	r0, #32
1001493e:	d009      	beq.n	10014954 <__aeabi_d2f+0x104>
10014940:	4b08      	ldr	r3, [pc, #32]	; (10014964 <__aeabi_d2f+0x114>)
10014942:	18f3      	adds	r3, r6, r3
10014944:	409a      	lsls	r2, r3
10014946:	4314      	orrs	r4, r2
10014948:	1e62      	subs	r2, r4, #1
1001494a:	4194      	sbcs	r4, r2
1001494c:	0022      	movs	r2, r4
1001494e:	2300      	movs	r3, #0
10014950:	432a      	orrs	r2, r5
10014952:	e798      	b.n	10014886 <__aeabi_d2f+0x36>
10014954:	2200      	movs	r2, #0
10014956:	e7f6      	b.n	10014946 <__aeabi_d2f+0xf6>
10014958:	2200      	movs	r2, #0
1001495a:	e7a8      	b.n	100148ae <__aeabi_d2f+0x5e>
1001495c:	fffffc80 	.word	0xfffffc80
10014960:	fffffc82 	.word	0xfffffc82
10014964:	fffffca2 	.word	0xfffffca2

10014968 <__clzsi2>:
10014968:	211c      	movs	r1, #28
1001496a:	2301      	movs	r3, #1
1001496c:	041b      	lsls	r3, r3, #16
1001496e:	4298      	cmp	r0, r3
10014970:	d301      	bcc.n	10014976 <__clzsi2+0xe>
10014972:	0c00      	lsrs	r0, r0, #16
10014974:	3910      	subs	r1, #16
10014976:	0a1b      	lsrs	r3, r3, #8
10014978:	4298      	cmp	r0, r3
1001497a:	d301      	bcc.n	10014980 <__clzsi2+0x18>
1001497c:	0a00      	lsrs	r0, r0, #8
1001497e:	3908      	subs	r1, #8
10014980:	091b      	lsrs	r3, r3, #4
10014982:	4298      	cmp	r0, r3
10014984:	d301      	bcc.n	1001498a <__clzsi2+0x22>
10014986:	0900      	lsrs	r0, r0, #4
10014988:	3904      	subs	r1, #4
1001498a:	a202      	add	r2, pc, #8	; (adr r2, 10014994 <__clzsi2+0x2c>)
1001498c:	5c10      	ldrb	r0, [r2, r0]
1001498e:	1840      	adds	r0, r0, r1
10014990:	4770      	bx	lr
10014992:	46c0      	nop			; (mov r8, r8)
10014994:	02020304 	.word	0x02020304
10014998:	01010101 	.word	0x01010101
	...

100149a4 <__errno>:
100149a4:	4b01      	ldr	r3, [pc, #4]	; (100149ac <__errno+0x8>)
100149a6:	6818      	ldr	r0, [r3, #0]
100149a8:	4770      	bx	lr
100149aa:	46c0      	nop			; (mov r8, r8)
100149ac:	10016c50 	.word	0x10016c50

100149b0 <__libc_init_array>:
100149b0:	4b0e      	ldr	r3, [pc, #56]	; (100149ec <__libc_init_array+0x3c>)
100149b2:	b570      	push	{r4, r5, r6, lr}
100149b4:	2500      	movs	r5, #0
100149b6:	001e      	movs	r6, r3
100149b8:	4c0d      	ldr	r4, [pc, #52]	; (100149f0 <__libc_init_array+0x40>)
100149ba:	1ae4      	subs	r4, r4, r3
100149bc:	10a4      	asrs	r4, r4, #2
100149be:	42a5      	cmp	r5, r4
100149c0:	d004      	beq.n	100149cc <__libc_init_array+0x1c>
100149c2:	00ab      	lsls	r3, r5, #2
100149c4:	58f3      	ldr	r3, [r6, r3]
100149c6:	4798      	blx	r3
100149c8:	3501      	adds	r5, #1
100149ca:	e7f8      	b.n	100149be <__libc_init_array+0xe>
100149cc:	f002 f8fa 	bl	10016bc4 <_init>
100149d0:	4b08      	ldr	r3, [pc, #32]	; (100149f4 <__libc_init_array+0x44>)
100149d2:	2500      	movs	r5, #0
100149d4:	001e      	movs	r6, r3
100149d6:	4c08      	ldr	r4, [pc, #32]	; (100149f8 <__libc_init_array+0x48>)
100149d8:	1ae4      	subs	r4, r4, r3
100149da:	10a4      	asrs	r4, r4, #2
100149dc:	42a5      	cmp	r5, r4
100149de:	d004      	beq.n	100149ea <__libc_init_array+0x3a>
100149e0:	00ab      	lsls	r3, r5, #2
100149e2:	58f3      	ldr	r3, [r6, r3]
100149e4:	4798      	blx	r3
100149e6:	3501      	adds	r5, #1
100149e8:	e7f8      	b.n	100149dc <__libc_init_array+0x2c>
100149ea:	bd70      	pop	{r4, r5, r6, pc}
100149ec:	10016bd0 	.word	0x10016bd0
100149f0:	10016bd0 	.word	0x10016bd0
100149f4:	10016bd0 	.word	0x10016bd0
100149f8:	10016bd4 	.word	0x10016bd4

100149fc <malloc>:
100149fc:	b510      	push	{r4, lr}
100149fe:	4b03      	ldr	r3, [pc, #12]	; (10014a0c <malloc+0x10>)
10014a00:	0001      	movs	r1, r0
10014a02:	6818      	ldr	r0, [r3, #0]
10014a04:	f000 f86a 	bl	10014adc <_malloc_r>
10014a08:	bd10      	pop	{r4, pc}
10014a0a:	46c0      	nop			; (mov r8, r8)
10014a0c:	10016c50 	.word	0x10016c50

10014a10 <memcmp>:
10014a10:	b530      	push	{r4, r5, lr}
10014a12:	2400      	movs	r4, #0
10014a14:	42a2      	cmp	r2, r4
10014a16:	d008      	beq.n	10014a2a <memcmp+0x1a>
10014a18:	5d03      	ldrb	r3, [r0, r4]
10014a1a:	1c65      	adds	r5, r4, #1
10014a1c:	5d0c      	ldrb	r4, [r1, r4]
10014a1e:	42a3      	cmp	r3, r4
10014a20:	d001      	beq.n	10014a26 <memcmp+0x16>
10014a22:	1b18      	subs	r0, r3, r4
10014a24:	e002      	b.n	10014a2c <memcmp+0x1c>
10014a26:	002c      	movs	r4, r5
10014a28:	e7f4      	b.n	10014a14 <memcmp+0x4>
10014a2a:	2000      	movs	r0, #0
10014a2c:	bd30      	pop	{r4, r5, pc}

10014a2e <memcpy>:
10014a2e:	2300      	movs	r3, #0
10014a30:	b510      	push	{r4, lr}
10014a32:	429a      	cmp	r2, r3
10014a34:	d003      	beq.n	10014a3e <memcpy+0x10>
10014a36:	5ccc      	ldrb	r4, [r1, r3]
10014a38:	54c4      	strb	r4, [r0, r3]
10014a3a:	3301      	adds	r3, #1
10014a3c:	e7f9      	b.n	10014a32 <memcpy+0x4>
10014a3e:	bd10      	pop	{r4, pc}

10014a40 <memset>:
10014a40:	0003      	movs	r3, r0
10014a42:	1882      	adds	r2, r0, r2
10014a44:	4293      	cmp	r3, r2
10014a46:	d002      	beq.n	10014a4e <memset+0xe>
10014a48:	7019      	strb	r1, [r3, #0]
10014a4a:	3301      	adds	r3, #1
10014a4c:	e7fa      	b.n	10014a44 <memset+0x4>
10014a4e:	4770      	bx	lr

10014a50 <_free_r>:
10014a50:	b530      	push	{r4, r5, lr}
10014a52:	2900      	cmp	r1, #0
10014a54:	d03e      	beq.n	10014ad4 <_free_r+0x84>
10014a56:	3904      	subs	r1, #4
10014a58:	680b      	ldr	r3, [r1, #0]
10014a5a:	2b00      	cmp	r3, #0
10014a5c:	da00      	bge.n	10014a60 <_free_r+0x10>
10014a5e:	18c9      	adds	r1, r1, r3
10014a60:	4a1d      	ldr	r2, [pc, #116]	; (10014ad8 <_free_r+0x88>)
10014a62:	6813      	ldr	r3, [r2, #0]
10014a64:	0014      	movs	r4, r2
10014a66:	2b00      	cmp	r3, #0
10014a68:	d102      	bne.n	10014a70 <_free_r+0x20>
10014a6a:	604b      	str	r3, [r1, #4]
10014a6c:	6011      	str	r1, [r2, #0]
10014a6e:	e031      	b.n	10014ad4 <_free_r+0x84>
10014a70:	428b      	cmp	r3, r1
10014a72:	d90d      	bls.n	10014a90 <_free_r+0x40>
10014a74:	680a      	ldr	r2, [r1, #0]
10014a76:	1888      	adds	r0, r1, r2
10014a78:	4283      	cmp	r3, r0
10014a7a:	d103      	bne.n	10014a84 <_free_r+0x34>
10014a7c:	6818      	ldr	r0, [r3, #0]
10014a7e:	685b      	ldr	r3, [r3, #4]
10014a80:	1882      	adds	r2, r0, r2
10014a82:	600a      	str	r2, [r1, #0]
10014a84:	604b      	str	r3, [r1, #4]
10014a86:	6021      	str	r1, [r4, #0]
10014a88:	e024      	b.n	10014ad4 <_free_r+0x84>
10014a8a:	428a      	cmp	r2, r1
10014a8c:	d803      	bhi.n	10014a96 <_free_r+0x46>
10014a8e:	0013      	movs	r3, r2
10014a90:	685a      	ldr	r2, [r3, #4]
10014a92:	2a00      	cmp	r2, #0
10014a94:	d1f9      	bne.n	10014a8a <_free_r+0x3a>
10014a96:	681d      	ldr	r5, [r3, #0]
10014a98:	195c      	adds	r4, r3, r5
10014a9a:	428c      	cmp	r4, r1
10014a9c:	d10b      	bne.n	10014ab6 <_free_r+0x66>
10014a9e:	6809      	ldr	r1, [r1, #0]
10014aa0:	1869      	adds	r1, r5, r1
10014aa2:	1858      	adds	r0, r3, r1
10014aa4:	6019      	str	r1, [r3, #0]
10014aa6:	4282      	cmp	r2, r0
10014aa8:	d114      	bne.n	10014ad4 <_free_r+0x84>
10014aaa:	6810      	ldr	r0, [r2, #0]
10014aac:	6852      	ldr	r2, [r2, #4]
10014aae:	1841      	adds	r1, r0, r1
10014ab0:	6019      	str	r1, [r3, #0]
10014ab2:	605a      	str	r2, [r3, #4]
10014ab4:	e00e      	b.n	10014ad4 <_free_r+0x84>
10014ab6:	428c      	cmp	r4, r1
10014ab8:	d902      	bls.n	10014ac0 <_free_r+0x70>
10014aba:	230c      	movs	r3, #12
10014abc:	6003      	str	r3, [r0, #0]
10014abe:	e009      	b.n	10014ad4 <_free_r+0x84>
10014ac0:	6808      	ldr	r0, [r1, #0]
10014ac2:	180c      	adds	r4, r1, r0
10014ac4:	42a2      	cmp	r2, r4
10014ac6:	d103      	bne.n	10014ad0 <_free_r+0x80>
10014ac8:	6814      	ldr	r4, [r2, #0]
10014aca:	6852      	ldr	r2, [r2, #4]
10014acc:	1820      	adds	r0, r4, r0
10014ace:	6008      	str	r0, [r1, #0]
10014ad0:	604a      	str	r2, [r1, #4]
10014ad2:	6059      	str	r1, [r3, #4]
10014ad4:	bd30      	pop	{r4, r5, pc}
10014ad6:	46c0      	nop			; (mov r8, r8)
10014ad8:	10018714 	.word	0x10018714

10014adc <_malloc_r>:
10014adc:	2303      	movs	r3, #3
10014ade:	b570      	push	{r4, r5, r6, lr}
10014ae0:	1ccd      	adds	r5, r1, #3
10014ae2:	439d      	bics	r5, r3
10014ae4:	3508      	adds	r5, #8
10014ae6:	0006      	movs	r6, r0
10014ae8:	2d0c      	cmp	r5, #12
10014aea:	d201      	bcs.n	10014af0 <_malloc_r+0x14>
10014aec:	250c      	movs	r5, #12
10014aee:	e005      	b.n	10014afc <_malloc_r+0x20>
10014af0:	2d00      	cmp	r5, #0
10014af2:	da03      	bge.n	10014afc <_malloc_r+0x20>
10014af4:	230c      	movs	r3, #12
10014af6:	2000      	movs	r0, #0
10014af8:	6033      	str	r3, [r6, #0]
10014afa:	e040      	b.n	10014b7e <_malloc_r+0xa2>
10014afc:	42a9      	cmp	r1, r5
10014afe:	d8f9      	bhi.n	10014af4 <_malloc_r+0x18>
10014b00:	4b1f      	ldr	r3, [pc, #124]	; (10014b80 <_malloc_r+0xa4>)
10014b02:	681c      	ldr	r4, [r3, #0]
10014b04:	001a      	movs	r2, r3
10014b06:	0021      	movs	r1, r4
10014b08:	2900      	cmp	r1, #0
10014b0a:	d013      	beq.n	10014b34 <_malloc_r+0x58>
10014b0c:	680b      	ldr	r3, [r1, #0]
10014b0e:	1b5b      	subs	r3, r3, r5
10014b10:	d40d      	bmi.n	10014b2e <_malloc_r+0x52>
10014b12:	2b0b      	cmp	r3, #11
10014b14:	d902      	bls.n	10014b1c <_malloc_r+0x40>
10014b16:	600b      	str	r3, [r1, #0]
10014b18:	18cc      	adds	r4, r1, r3
10014b1a:	e01e      	b.n	10014b5a <_malloc_r+0x7e>
10014b1c:	428c      	cmp	r4, r1
10014b1e:	d102      	bne.n	10014b26 <_malloc_r+0x4a>
10014b20:	6863      	ldr	r3, [r4, #4]
10014b22:	6013      	str	r3, [r2, #0]
10014b24:	e01a      	b.n	10014b5c <_malloc_r+0x80>
10014b26:	684b      	ldr	r3, [r1, #4]
10014b28:	6063      	str	r3, [r4, #4]
10014b2a:	000c      	movs	r4, r1
10014b2c:	e016      	b.n	10014b5c <_malloc_r+0x80>
10014b2e:	000c      	movs	r4, r1
10014b30:	6849      	ldr	r1, [r1, #4]
10014b32:	e7e9      	b.n	10014b08 <_malloc_r+0x2c>
10014b34:	4c13      	ldr	r4, [pc, #76]	; (10014b84 <_malloc_r+0xa8>)
10014b36:	6823      	ldr	r3, [r4, #0]
10014b38:	2b00      	cmp	r3, #0
10014b3a:	d103      	bne.n	10014b44 <_malloc_r+0x68>
10014b3c:	0030      	movs	r0, r6
10014b3e:	f000 f8f9 	bl	10014d34 <_sbrk_r>
10014b42:	6020      	str	r0, [r4, #0]
10014b44:	0029      	movs	r1, r5
10014b46:	0030      	movs	r0, r6
10014b48:	f000 f8f4 	bl	10014d34 <_sbrk_r>
10014b4c:	1c43      	adds	r3, r0, #1
10014b4e:	d0d1      	beq.n	10014af4 <_malloc_r+0x18>
10014b50:	2303      	movs	r3, #3
10014b52:	1cc4      	adds	r4, r0, #3
10014b54:	439c      	bics	r4, r3
10014b56:	42a0      	cmp	r0, r4
10014b58:	d10a      	bne.n	10014b70 <_malloc_r+0x94>
10014b5a:	6025      	str	r5, [r4, #0]
10014b5c:	0020      	movs	r0, r4
10014b5e:	2207      	movs	r2, #7
10014b60:	300b      	adds	r0, #11
10014b62:	1d23      	adds	r3, r4, #4
10014b64:	4390      	bics	r0, r2
10014b66:	1ac3      	subs	r3, r0, r3
10014b68:	d009      	beq.n	10014b7e <_malloc_r+0xa2>
10014b6a:	425a      	negs	r2, r3
10014b6c:	50e2      	str	r2, [r4, r3]
10014b6e:	e006      	b.n	10014b7e <_malloc_r+0xa2>
10014b70:	1a21      	subs	r1, r4, r0
10014b72:	0030      	movs	r0, r6
10014b74:	f000 f8de 	bl	10014d34 <_sbrk_r>
10014b78:	1c43      	adds	r3, r0, #1
10014b7a:	d1ee      	bne.n	10014b5a <_malloc_r+0x7e>
10014b7c:	e7ba      	b.n	10014af4 <_malloc_r+0x18>
10014b7e:	bd70      	pop	{r4, r5, r6, pc}
10014b80:	10018714 	.word	0x10018714
10014b84:	10018710 	.word	0x10018710

10014b88 <iprintf>:
10014b88:	b40f      	push	{r0, r1, r2, r3}
10014b8a:	4b0b      	ldr	r3, [pc, #44]	; (10014bb8 <iprintf+0x30>)
10014b8c:	b513      	push	{r0, r1, r4, lr}
10014b8e:	681c      	ldr	r4, [r3, #0]
10014b90:	2c00      	cmp	r4, #0
10014b92:	d005      	beq.n	10014ba0 <iprintf+0x18>
10014b94:	69a3      	ldr	r3, [r4, #24]
10014b96:	2b00      	cmp	r3, #0
10014b98:	d102      	bne.n	10014ba0 <iprintf+0x18>
10014b9a:	0020      	movs	r0, r4
10014b9c:	f000 fb58 	bl	10015250 <__sinit>
10014ba0:	ab05      	add	r3, sp, #20
10014ba2:	9a04      	ldr	r2, [sp, #16]
10014ba4:	68a1      	ldr	r1, [r4, #8]
10014ba6:	0020      	movs	r0, r4
10014ba8:	9301      	str	r3, [sp, #4]
10014baa:	f000 fc71 	bl	10015490 <_vfiprintf_r>
10014bae:	bc16      	pop	{r1, r2, r4}
10014bb0:	bc08      	pop	{r3}
10014bb2:	b004      	add	sp, #16
10014bb4:	4718      	bx	r3
10014bb6:	46c0      	nop			; (mov r8, r8)
10014bb8:	10016c50 	.word	0x10016c50

10014bbc <putchar>:
10014bbc:	4b08      	ldr	r3, [pc, #32]	; (10014be0 <putchar+0x24>)
10014bbe:	b570      	push	{r4, r5, r6, lr}
10014bc0:	681c      	ldr	r4, [r3, #0]
10014bc2:	0005      	movs	r5, r0
10014bc4:	2c00      	cmp	r4, #0
10014bc6:	d005      	beq.n	10014bd4 <putchar+0x18>
10014bc8:	69a3      	ldr	r3, [r4, #24]
10014bca:	2b00      	cmp	r3, #0
10014bcc:	d102      	bne.n	10014bd4 <putchar+0x18>
10014bce:	0020      	movs	r0, r4
10014bd0:	f000 fb3e 	bl	10015250 <__sinit>
10014bd4:	0029      	movs	r1, r5
10014bd6:	68a2      	ldr	r2, [r4, #8]
10014bd8:	0020      	movs	r0, r4
10014bda:	f000 ff05 	bl	100159e8 <_putc_r>
10014bde:	bd70      	pop	{r4, r5, r6, pc}
10014be0:	10016c50 	.word	0x10016c50

10014be4 <_puts_r>:
10014be4:	b570      	push	{r4, r5, r6, lr}
10014be6:	0005      	movs	r5, r0
10014be8:	000e      	movs	r6, r1
10014bea:	2800      	cmp	r0, #0
10014bec:	d004      	beq.n	10014bf8 <_puts_r+0x14>
10014bee:	6983      	ldr	r3, [r0, #24]
10014bf0:	2b00      	cmp	r3, #0
10014bf2:	d101      	bne.n	10014bf8 <_puts_r+0x14>
10014bf4:	f000 fb2c 	bl	10015250 <__sinit>
10014bf8:	69ab      	ldr	r3, [r5, #24]
10014bfa:	68ac      	ldr	r4, [r5, #8]
10014bfc:	2b00      	cmp	r3, #0
10014bfe:	d102      	bne.n	10014c06 <_puts_r+0x22>
10014c00:	0028      	movs	r0, r5
10014c02:	f000 fb25 	bl	10015250 <__sinit>
10014c06:	4b25      	ldr	r3, [pc, #148]	; (10014c9c <_puts_r+0xb8>)
10014c08:	429c      	cmp	r4, r3
10014c0a:	d101      	bne.n	10014c10 <_puts_r+0x2c>
10014c0c:	686c      	ldr	r4, [r5, #4]
10014c0e:	e008      	b.n	10014c22 <_puts_r+0x3e>
10014c10:	4b23      	ldr	r3, [pc, #140]	; (10014ca0 <_puts_r+0xbc>)
10014c12:	429c      	cmp	r4, r3
10014c14:	d101      	bne.n	10014c1a <_puts_r+0x36>
10014c16:	68ac      	ldr	r4, [r5, #8]
10014c18:	e003      	b.n	10014c22 <_puts_r+0x3e>
10014c1a:	4b22      	ldr	r3, [pc, #136]	; (10014ca4 <_puts_r+0xc0>)
10014c1c:	429c      	cmp	r4, r3
10014c1e:	d100      	bne.n	10014c22 <_puts_r+0x3e>
10014c20:	68ec      	ldr	r4, [r5, #12]
10014c22:	89a3      	ldrh	r3, [r4, #12]
10014c24:	071b      	lsls	r3, r3, #28
10014c26:	d502      	bpl.n	10014c2e <_puts_r+0x4a>
10014c28:	6923      	ldr	r3, [r4, #16]
10014c2a:	2b00      	cmp	r3, #0
10014c2c:	d111      	bne.n	10014c52 <_puts_r+0x6e>
10014c2e:	0021      	movs	r1, r4
10014c30:	0028      	movs	r0, r5
10014c32:	f000 f9a3 	bl	10014f7c <__swsetup_r>
10014c36:	2800      	cmp	r0, #0
10014c38:	d00b      	beq.n	10014c52 <_puts_r+0x6e>
10014c3a:	2001      	movs	r0, #1
10014c3c:	4240      	negs	r0, r0
10014c3e:	e02b      	b.n	10014c98 <_puts_r+0xb4>
10014c40:	3b01      	subs	r3, #1
10014c42:	3601      	adds	r6, #1
10014c44:	60a3      	str	r3, [r4, #8]
10014c46:	2b00      	cmp	r3, #0
10014c48:	db08      	blt.n	10014c5c <_puts_r+0x78>
10014c4a:	6823      	ldr	r3, [r4, #0]
10014c4c:	1c5a      	adds	r2, r3, #1
10014c4e:	6022      	str	r2, [r4, #0]
10014c50:	7019      	strb	r1, [r3, #0]
10014c52:	7831      	ldrb	r1, [r6, #0]
10014c54:	68a3      	ldr	r3, [r4, #8]
10014c56:	2900      	cmp	r1, #0
10014c58:	d1f2      	bne.n	10014c40 <_puts_r+0x5c>
10014c5a:	e00b      	b.n	10014c74 <_puts_r+0x90>
10014c5c:	69a2      	ldr	r2, [r4, #24]
10014c5e:	4293      	cmp	r3, r2
10014c60:	db01      	blt.n	10014c66 <_puts_r+0x82>
10014c62:	290a      	cmp	r1, #10
10014c64:	d1f1      	bne.n	10014c4a <_puts_r+0x66>
10014c66:	0022      	movs	r2, r4
10014c68:	0028      	movs	r0, r5
10014c6a:	f000 f92f 	bl	10014ecc <__swbuf_r>
10014c6e:	1c43      	adds	r3, r0, #1
10014c70:	d1ef      	bne.n	10014c52 <_puts_r+0x6e>
10014c72:	e7e2      	b.n	10014c3a <_puts_r+0x56>
10014c74:	3b01      	subs	r3, #1
10014c76:	60a3      	str	r3, [r4, #8]
10014c78:	2b00      	cmp	r3, #0
10014c7a:	da08      	bge.n	10014c8e <_puts_r+0xaa>
10014c7c:	0022      	movs	r2, r4
10014c7e:	310a      	adds	r1, #10
10014c80:	0028      	movs	r0, r5
10014c82:	f000 f923 	bl	10014ecc <__swbuf_r>
10014c86:	1c43      	adds	r3, r0, #1
10014c88:	d0d7      	beq.n	10014c3a <_puts_r+0x56>
10014c8a:	200a      	movs	r0, #10
10014c8c:	e004      	b.n	10014c98 <_puts_r+0xb4>
10014c8e:	200a      	movs	r0, #10
10014c90:	6823      	ldr	r3, [r4, #0]
10014c92:	1c5a      	adds	r2, r3, #1
10014c94:	6022      	str	r2, [r4, #0]
10014c96:	7018      	strb	r0, [r3, #0]
10014c98:	bd70      	pop	{r4, r5, r6, pc}
10014c9a:	46c0      	nop			; (mov r8, r8)
10014c9c:	10016b30 	.word	0x10016b30
10014ca0:	10016b50 	.word	0x10016b50
10014ca4:	10016b70 	.word	0x10016b70

10014ca8 <puts>:
10014ca8:	b510      	push	{r4, lr}
10014caa:	4b03      	ldr	r3, [pc, #12]	; (10014cb8 <puts+0x10>)
10014cac:	0001      	movs	r1, r0
10014cae:	6818      	ldr	r0, [r3, #0]
10014cb0:	f7ff ff98 	bl	10014be4 <_puts_r>
10014cb4:	bd10      	pop	{r4, pc}
10014cb6:	46c0      	nop			; (mov r8, r8)
10014cb8:	10016c50 	.word	0x10016c50

10014cbc <rand>:
10014cbc:	4b15      	ldr	r3, [pc, #84]	; (10014d14 <rand+0x58>)
10014cbe:	b510      	push	{r4, lr}
10014cc0:	681c      	ldr	r4, [r3, #0]
10014cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014cc4:	2b00      	cmp	r3, #0
10014cc6:	d115      	bne.n	10014cf4 <rand+0x38>
10014cc8:	2018      	movs	r0, #24
10014cca:	f7ff fe97 	bl	100149fc <malloc>
10014cce:	4b12      	ldr	r3, [pc, #72]	; (10014d18 <rand+0x5c>)
10014cd0:	63a0      	str	r0, [r4, #56]	; 0x38
10014cd2:	8003      	strh	r3, [r0, #0]
10014cd4:	4b11      	ldr	r3, [pc, #68]	; (10014d1c <rand+0x60>)
10014cd6:	2201      	movs	r2, #1
10014cd8:	8043      	strh	r3, [r0, #2]
10014cda:	4b11      	ldr	r3, [pc, #68]	; (10014d20 <rand+0x64>)
10014cdc:	8083      	strh	r3, [r0, #4]
10014cde:	4b11      	ldr	r3, [pc, #68]	; (10014d24 <rand+0x68>)
10014ce0:	80c3      	strh	r3, [r0, #6]
10014ce2:	4b11      	ldr	r3, [pc, #68]	; (10014d28 <rand+0x6c>)
10014ce4:	8103      	strh	r3, [r0, #8]
10014ce6:	2305      	movs	r3, #5
10014ce8:	8143      	strh	r3, [r0, #10]
10014cea:	3306      	adds	r3, #6
10014cec:	8183      	strh	r3, [r0, #12]
10014cee:	2300      	movs	r3, #0
10014cf0:	6102      	str	r2, [r0, #16]
10014cf2:	6143      	str	r3, [r0, #20]
10014cf4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014cf6:	4a0d      	ldr	r2, [pc, #52]	; (10014d2c <rand+0x70>)
10014cf8:	6920      	ldr	r0, [r4, #16]
10014cfa:	6961      	ldr	r1, [r4, #20]
10014cfc:	4b0c      	ldr	r3, [pc, #48]	; (10014d30 <rand+0x74>)
10014cfe:	f7fd f9f7 	bl	100120f0 <__aeabi_lmul>
10014d02:	2201      	movs	r2, #1
10014d04:	2300      	movs	r3, #0
10014d06:	1880      	adds	r0, r0, r2
10014d08:	4159      	adcs	r1, r3
10014d0a:	6120      	str	r0, [r4, #16]
10014d0c:	6161      	str	r1, [r4, #20]
10014d0e:	0048      	lsls	r0, r1, #1
10014d10:	0840      	lsrs	r0, r0, #1
10014d12:	bd10      	pop	{r4, pc}
10014d14:	10016c50 	.word	0x10016c50
10014d18:	0000330e 	.word	0x0000330e
10014d1c:	ffffabcd 	.word	0xffffabcd
10014d20:	00001234 	.word	0x00001234
10014d24:	ffffe66d 	.word	0xffffe66d
10014d28:	ffffdeec 	.word	0xffffdeec
10014d2c:	4c957f2d 	.word	0x4c957f2d
10014d30:	5851f42d 	.word	0x5851f42d

10014d34 <_sbrk_r>:
10014d34:	2300      	movs	r3, #0
10014d36:	b570      	push	{r4, r5, r6, lr}
10014d38:	4c06      	ldr	r4, [pc, #24]	; (10014d54 <_sbrk_r+0x20>)
10014d3a:	0005      	movs	r5, r0
10014d3c:	0008      	movs	r0, r1
10014d3e:	6023      	str	r3, [r4, #0]
10014d40:	f7f3 fb5c 	bl	100083fc <_sbrk>
10014d44:	1c43      	adds	r3, r0, #1
10014d46:	d103      	bne.n	10014d50 <_sbrk_r+0x1c>
10014d48:	6823      	ldr	r3, [r4, #0]
10014d4a:	2b00      	cmp	r3, #0
10014d4c:	d000      	beq.n	10014d50 <_sbrk_r+0x1c>
10014d4e:	602b      	str	r3, [r5, #0]
10014d50:	bd70      	pop	{r4, r5, r6, pc}
10014d52:	46c0      	nop			; (mov r8, r8)
10014d54:	10019b74 	.word	0x10019b74

10014d58 <setbuf>:
10014d58:	424a      	negs	r2, r1
10014d5a:	414a      	adcs	r2, r1
10014d5c:	2380      	movs	r3, #128	; 0x80
10014d5e:	b510      	push	{r4, lr}
10014d60:	0052      	lsls	r2, r2, #1
10014d62:	00db      	lsls	r3, r3, #3
10014d64:	f000 f802 	bl	10014d6c <setvbuf>
10014d68:	bd10      	pop	{r4, pc}
	...

10014d6c <setvbuf>:
10014d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10014d6e:	001d      	movs	r5, r3
10014d70:	4b51      	ldr	r3, [pc, #324]	; (10014eb8 <setvbuf+0x14c>)
10014d72:	b085      	sub	sp, #20
10014d74:	681e      	ldr	r6, [r3, #0]
10014d76:	0004      	movs	r4, r0
10014d78:	000f      	movs	r7, r1
10014d7a:	9200      	str	r2, [sp, #0]
10014d7c:	2e00      	cmp	r6, #0
10014d7e:	d005      	beq.n	10014d8c <setvbuf+0x20>
10014d80:	69b3      	ldr	r3, [r6, #24]
10014d82:	2b00      	cmp	r3, #0
10014d84:	d102      	bne.n	10014d8c <setvbuf+0x20>
10014d86:	0030      	movs	r0, r6
10014d88:	f000 fa62 	bl	10015250 <__sinit>
10014d8c:	4b4b      	ldr	r3, [pc, #300]	; (10014ebc <setvbuf+0x150>)
10014d8e:	429c      	cmp	r4, r3
10014d90:	d101      	bne.n	10014d96 <setvbuf+0x2a>
10014d92:	6874      	ldr	r4, [r6, #4]
10014d94:	e008      	b.n	10014da8 <setvbuf+0x3c>
10014d96:	4b4a      	ldr	r3, [pc, #296]	; (10014ec0 <setvbuf+0x154>)
10014d98:	429c      	cmp	r4, r3
10014d9a:	d101      	bne.n	10014da0 <setvbuf+0x34>
10014d9c:	68b4      	ldr	r4, [r6, #8]
10014d9e:	e003      	b.n	10014da8 <setvbuf+0x3c>
10014da0:	4b48      	ldr	r3, [pc, #288]	; (10014ec4 <setvbuf+0x158>)
10014da2:	429c      	cmp	r4, r3
10014da4:	d100      	bne.n	10014da8 <setvbuf+0x3c>
10014da6:	68f4      	ldr	r4, [r6, #12]
10014da8:	9b00      	ldr	r3, [sp, #0]
10014daa:	2b02      	cmp	r3, #2
10014dac:	d005      	beq.n	10014dba <setvbuf+0x4e>
10014dae:	2b01      	cmp	r3, #1
10014db0:	d900      	bls.n	10014db4 <setvbuf+0x48>
10014db2:	e07c      	b.n	10014eae <setvbuf+0x142>
10014db4:	2d00      	cmp	r5, #0
10014db6:	da00      	bge.n	10014dba <setvbuf+0x4e>
10014db8:	e079      	b.n	10014eae <setvbuf+0x142>
10014dba:	0021      	movs	r1, r4
10014dbc:	0030      	movs	r0, r6
10014dbe:	f000 f9d9 	bl	10015174 <_fflush_r>
10014dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014dc4:	2900      	cmp	r1, #0
10014dc6:	d008      	beq.n	10014dda <setvbuf+0x6e>
10014dc8:	0023      	movs	r3, r4
10014dca:	3344      	adds	r3, #68	; 0x44
10014dcc:	4299      	cmp	r1, r3
10014dce:	d002      	beq.n	10014dd6 <setvbuf+0x6a>
10014dd0:	0030      	movs	r0, r6
10014dd2:	f7ff fe3d 	bl	10014a50 <_free_r>
10014dd6:	2300      	movs	r3, #0
10014dd8:	6363      	str	r3, [r4, #52]	; 0x34
10014dda:	2300      	movs	r3, #0
10014ddc:	61a3      	str	r3, [r4, #24]
10014dde:	6063      	str	r3, [r4, #4]
10014de0:	89a3      	ldrh	r3, [r4, #12]
10014de2:	061b      	lsls	r3, r3, #24
10014de4:	d503      	bpl.n	10014dee <setvbuf+0x82>
10014de6:	6921      	ldr	r1, [r4, #16]
10014de8:	0030      	movs	r0, r6
10014dea:	f7ff fe31 	bl	10014a50 <_free_r>
10014dee:	89a2      	ldrh	r2, [r4, #12]
10014df0:	4b35      	ldr	r3, [pc, #212]	; (10014ec8 <setvbuf+0x15c>)
10014df2:	4013      	ands	r3, r2
10014df4:	81a3      	strh	r3, [r4, #12]
10014df6:	9b00      	ldr	r3, [sp, #0]
10014df8:	2b02      	cmp	r3, #2
10014dfa:	d021      	beq.n	10014e40 <setvbuf+0xd4>
10014dfc:	ab03      	add	r3, sp, #12
10014dfe:	aa02      	add	r2, sp, #8
10014e00:	0021      	movs	r1, r4
10014e02:	0030      	movs	r0, r6
10014e04:	f000 fab8 	bl	10015378 <__swhatbuf_r>
10014e08:	89a3      	ldrh	r3, [r4, #12]
10014e0a:	4318      	orrs	r0, r3
10014e0c:	81a0      	strh	r0, [r4, #12]
10014e0e:	2d00      	cmp	r5, #0
10014e10:	d101      	bne.n	10014e16 <setvbuf+0xaa>
10014e12:	9d02      	ldr	r5, [sp, #8]
10014e14:	e001      	b.n	10014e1a <setvbuf+0xae>
10014e16:	2f00      	cmp	r7, #0
10014e18:	d125      	bne.n	10014e66 <setvbuf+0xfa>
10014e1a:	0028      	movs	r0, r5
10014e1c:	f7ff fdee 	bl	100149fc <malloc>
10014e20:	9501      	str	r5, [sp, #4]
10014e22:	1e07      	subs	r7, r0, #0
10014e24:	d11a      	bne.n	10014e5c <setvbuf+0xf0>
10014e26:	9b02      	ldr	r3, [sp, #8]
10014e28:	9301      	str	r3, [sp, #4]
10014e2a:	42ab      	cmp	r3, r5
10014e2c:	d102      	bne.n	10014e34 <setvbuf+0xc8>
10014e2e:	2001      	movs	r0, #1
10014e30:	4240      	negs	r0, r0
10014e32:	e006      	b.n	10014e42 <setvbuf+0xd6>
10014e34:	9801      	ldr	r0, [sp, #4]
10014e36:	f7ff fde1 	bl	100149fc <malloc>
10014e3a:	1e07      	subs	r7, r0, #0
10014e3c:	d10e      	bne.n	10014e5c <setvbuf+0xf0>
10014e3e:	e7f6      	b.n	10014e2e <setvbuf+0xc2>
10014e40:	2000      	movs	r0, #0
10014e42:	2202      	movs	r2, #2
10014e44:	89a3      	ldrh	r3, [r4, #12]
10014e46:	4313      	orrs	r3, r2
10014e48:	81a3      	strh	r3, [r4, #12]
10014e4a:	2300      	movs	r3, #0
10014e4c:	60a3      	str	r3, [r4, #8]
10014e4e:	0023      	movs	r3, r4
10014e50:	3347      	adds	r3, #71	; 0x47
10014e52:	6023      	str	r3, [r4, #0]
10014e54:	6123      	str	r3, [r4, #16]
10014e56:	2301      	movs	r3, #1
10014e58:	6163      	str	r3, [r4, #20]
10014e5a:	e02a      	b.n	10014eb2 <setvbuf+0x146>
10014e5c:	2280      	movs	r2, #128	; 0x80
10014e5e:	89a3      	ldrh	r3, [r4, #12]
10014e60:	9d01      	ldr	r5, [sp, #4]
10014e62:	4313      	orrs	r3, r2
10014e64:	81a3      	strh	r3, [r4, #12]
10014e66:	69b3      	ldr	r3, [r6, #24]
10014e68:	2b00      	cmp	r3, #0
10014e6a:	d102      	bne.n	10014e72 <setvbuf+0x106>
10014e6c:	0030      	movs	r0, r6
10014e6e:	f000 f9ef 	bl	10015250 <__sinit>
10014e72:	9b00      	ldr	r3, [sp, #0]
10014e74:	2b01      	cmp	r3, #1
10014e76:	d103      	bne.n	10014e80 <setvbuf+0x114>
10014e78:	89a3      	ldrh	r3, [r4, #12]
10014e7a:	9a00      	ldr	r2, [sp, #0]
10014e7c:	431a      	orrs	r2, r3
10014e7e:	81a2      	strh	r2, [r4, #12]
10014e80:	2308      	movs	r3, #8
10014e82:	89a2      	ldrh	r2, [r4, #12]
10014e84:	6027      	str	r7, [r4, #0]
10014e86:	4013      	ands	r3, r2
10014e88:	6127      	str	r7, [r4, #16]
10014e8a:	6165      	str	r5, [r4, #20]
10014e8c:	1e18      	subs	r0, r3, #0
10014e8e:	d00c      	beq.n	10014eaa <setvbuf+0x13e>
10014e90:	2301      	movs	r3, #1
10014e92:	401a      	ands	r2, r3
10014e94:	2300      	movs	r3, #0
10014e96:	1e10      	subs	r0, r2, #0
10014e98:	4298      	cmp	r0, r3
10014e9a:	d004      	beq.n	10014ea6 <setvbuf+0x13a>
10014e9c:	426d      	negs	r5, r5
10014e9e:	60a3      	str	r3, [r4, #8]
10014ea0:	61a5      	str	r5, [r4, #24]
10014ea2:	0018      	movs	r0, r3
10014ea4:	e005      	b.n	10014eb2 <setvbuf+0x146>
10014ea6:	60a5      	str	r5, [r4, #8]
10014ea8:	e003      	b.n	10014eb2 <setvbuf+0x146>
10014eaa:	60a3      	str	r3, [r4, #8]
10014eac:	e001      	b.n	10014eb2 <setvbuf+0x146>
10014eae:	2001      	movs	r0, #1
10014eb0:	4240      	negs	r0, r0
10014eb2:	b005      	add	sp, #20
10014eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014eb6:	46c0      	nop			; (mov r8, r8)
10014eb8:	10016c50 	.word	0x10016c50
10014ebc:	10016b30 	.word	0x10016b30
10014ec0:	10016b50 	.word	0x10016b50
10014ec4:	10016b70 	.word	0x10016b70
10014ec8:	fffff35c 	.word	0xfffff35c

10014ecc <__swbuf_r>:
10014ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014ece:	0005      	movs	r5, r0
10014ed0:	000f      	movs	r7, r1
10014ed2:	0014      	movs	r4, r2
10014ed4:	2800      	cmp	r0, #0
10014ed6:	d004      	beq.n	10014ee2 <__swbuf_r+0x16>
10014ed8:	6983      	ldr	r3, [r0, #24]
10014eda:	2b00      	cmp	r3, #0
10014edc:	d101      	bne.n	10014ee2 <__swbuf_r+0x16>
10014ede:	f000 f9b7 	bl	10015250 <__sinit>
10014ee2:	4b23      	ldr	r3, [pc, #140]	; (10014f70 <__swbuf_r+0xa4>)
10014ee4:	429c      	cmp	r4, r3
10014ee6:	d101      	bne.n	10014eec <__swbuf_r+0x20>
10014ee8:	686c      	ldr	r4, [r5, #4]
10014eea:	e008      	b.n	10014efe <__swbuf_r+0x32>
10014eec:	4b21      	ldr	r3, [pc, #132]	; (10014f74 <__swbuf_r+0xa8>)
10014eee:	429c      	cmp	r4, r3
10014ef0:	d101      	bne.n	10014ef6 <__swbuf_r+0x2a>
10014ef2:	68ac      	ldr	r4, [r5, #8]
10014ef4:	e003      	b.n	10014efe <__swbuf_r+0x32>
10014ef6:	4b20      	ldr	r3, [pc, #128]	; (10014f78 <__swbuf_r+0xac>)
10014ef8:	429c      	cmp	r4, r3
10014efa:	d100      	bne.n	10014efe <__swbuf_r+0x32>
10014efc:	68ec      	ldr	r4, [r5, #12]
10014efe:	69a3      	ldr	r3, [r4, #24]
10014f00:	60a3      	str	r3, [r4, #8]
10014f02:	89a3      	ldrh	r3, [r4, #12]
10014f04:	071b      	lsls	r3, r3, #28
10014f06:	d50a      	bpl.n	10014f1e <__swbuf_r+0x52>
10014f08:	6923      	ldr	r3, [r4, #16]
10014f0a:	2b00      	cmp	r3, #0
10014f0c:	d007      	beq.n	10014f1e <__swbuf_r+0x52>
10014f0e:	6823      	ldr	r3, [r4, #0]
10014f10:	6922      	ldr	r2, [r4, #16]
10014f12:	b2fe      	uxtb	r6, r7
10014f14:	1a98      	subs	r0, r3, r2
10014f16:	6963      	ldr	r3, [r4, #20]
10014f18:	4298      	cmp	r0, r3
10014f1a:	db0f      	blt.n	10014f3c <__swbuf_r+0x70>
10014f1c:	e008      	b.n	10014f30 <__swbuf_r+0x64>
10014f1e:	0021      	movs	r1, r4
10014f20:	0028      	movs	r0, r5
10014f22:	f000 f82b 	bl	10014f7c <__swsetup_r>
10014f26:	2800      	cmp	r0, #0
10014f28:	d0f1      	beq.n	10014f0e <__swbuf_r+0x42>
10014f2a:	2001      	movs	r0, #1
10014f2c:	4240      	negs	r0, r0
10014f2e:	e01d      	b.n	10014f6c <__swbuf_r+0xa0>
10014f30:	0021      	movs	r1, r4
10014f32:	0028      	movs	r0, r5
10014f34:	f000 f91e 	bl	10015174 <_fflush_r>
10014f38:	2800      	cmp	r0, #0
10014f3a:	d1f6      	bne.n	10014f2a <__swbuf_r+0x5e>
10014f3c:	68a3      	ldr	r3, [r4, #8]
10014f3e:	3001      	adds	r0, #1
10014f40:	3b01      	subs	r3, #1
10014f42:	60a3      	str	r3, [r4, #8]
10014f44:	6823      	ldr	r3, [r4, #0]
10014f46:	1c5a      	adds	r2, r3, #1
10014f48:	6022      	str	r2, [r4, #0]
10014f4a:	701f      	strb	r7, [r3, #0]
10014f4c:	6963      	ldr	r3, [r4, #20]
10014f4e:	4298      	cmp	r0, r3
10014f50:	d005      	beq.n	10014f5e <__swbuf_r+0x92>
10014f52:	89a3      	ldrh	r3, [r4, #12]
10014f54:	0030      	movs	r0, r6
10014f56:	07db      	lsls	r3, r3, #31
10014f58:	d508      	bpl.n	10014f6c <__swbuf_r+0xa0>
10014f5a:	2e0a      	cmp	r6, #10
10014f5c:	d106      	bne.n	10014f6c <__swbuf_r+0xa0>
10014f5e:	0021      	movs	r1, r4
10014f60:	0028      	movs	r0, r5
10014f62:	f000 f907 	bl	10015174 <_fflush_r>
10014f66:	2800      	cmp	r0, #0
10014f68:	d1df      	bne.n	10014f2a <__swbuf_r+0x5e>
10014f6a:	0030      	movs	r0, r6
10014f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014f6e:	46c0      	nop			; (mov r8, r8)
10014f70:	10016b30 	.word	0x10016b30
10014f74:	10016b50 	.word	0x10016b50
10014f78:	10016b70 	.word	0x10016b70

10014f7c <__swsetup_r>:
10014f7c:	4b36      	ldr	r3, [pc, #216]	; (10015058 <__swsetup_r+0xdc>)
10014f7e:	b570      	push	{r4, r5, r6, lr}
10014f80:	681d      	ldr	r5, [r3, #0]
10014f82:	0006      	movs	r6, r0
10014f84:	000c      	movs	r4, r1
10014f86:	2d00      	cmp	r5, #0
10014f88:	d005      	beq.n	10014f96 <__swsetup_r+0x1a>
10014f8a:	69ab      	ldr	r3, [r5, #24]
10014f8c:	2b00      	cmp	r3, #0
10014f8e:	d102      	bne.n	10014f96 <__swsetup_r+0x1a>
10014f90:	0028      	movs	r0, r5
10014f92:	f000 f95d 	bl	10015250 <__sinit>
10014f96:	4b31      	ldr	r3, [pc, #196]	; (1001505c <__swsetup_r+0xe0>)
10014f98:	429c      	cmp	r4, r3
10014f9a:	d101      	bne.n	10014fa0 <__swsetup_r+0x24>
10014f9c:	686c      	ldr	r4, [r5, #4]
10014f9e:	e008      	b.n	10014fb2 <__swsetup_r+0x36>
10014fa0:	4b2f      	ldr	r3, [pc, #188]	; (10015060 <__swsetup_r+0xe4>)
10014fa2:	429c      	cmp	r4, r3
10014fa4:	d101      	bne.n	10014faa <__swsetup_r+0x2e>
10014fa6:	68ac      	ldr	r4, [r5, #8]
10014fa8:	e003      	b.n	10014fb2 <__swsetup_r+0x36>
10014faa:	4b2e      	ldr	r3, [pc, #184]	; (10015064 <__swsetup_r+0xe8>)
10014fac:	429c      	cmp	r4, r3
10014fae:	d100      	bne.n	10014fb2 <__swsetup_r+0x36>
10014fb0:	68ec      	ldr	r4, [r5, #12]
10014fb2:	220c      	movs	r2, #12
10014fb4:	5ea3      	ldrsh	r3, [r4, r2]
10014fb6:	b29a      	uxth	r2, r3
10014fb8:	0711      	lsls	r1, r2, #28
10014fba:	d423      	bmi.n	10015004 <__swsetup_r+0x88>
10014fbc:	06d1      	lsls	r1, r2, #27
10014fbe:	d407      	bmi.n	10014fd0 <__swsetup_r+0x54>
10014fc0:	2209      	movs	r2, #9
10014fc2:	2001      	movs	r0, #1
10014fc4:	6032      	str	r2, [r6, #0]
10014fc6:	3237      	adds	r2, #55	; 0x37
10014fc8:	4313      	orrs	r3, r2
10014fca:	81a3      	strh	r3, [r4, #12]
10014fcc:	4240      	negs	r0, r0
10014fce:	e042      	b.n	10015056 <__swsetup_r+0xda>
10014fd0:	0753      	lsls	r3, r2, #29
10014fd2:	d513      	bpl.n	10014ffc <__swsetup_r+0x80>
10014fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014fd6:	2900      	cmp	r1, #0
10014fd8:	d008      	beq.n	10014fec <__swsetup_r+0x70>
10014fda:	0023      	movs	r3, r4
10014fdc:	3344      	adds	r3, #68	; 0x44
10014fde:	4299      	cmp	r1, r3
10014fe0:	d002      	beq.n	10014fe8 <__swsetup_r+0x6c>
10014fe2:	0030      	movs	r0, r6
10014fe4:	f7ff fd34 	bl	10014a50 <_free_r>
10014fe8:	2300      	movs	r3, #0
10014fea:	6363      	str	r3, [r4, #52]	; 0x34
10014fec:	2224      	movs	r2, #36	; 0x24
10014fee:	89a3      	ldrh	r3, [r4, #12]
10014ff0:	4393      	bics	r3, r2
10014ff2:	81a3      	strh	r3, [r4, #12]
10014ff4:	2300      	movs	r3, #0
10014ff6:	6063      	str	r3, [r4, #4]
10014ff8:	6923      	ldr	r3, [r4, #16]
10014ffa:	6023      	str	r3, [r4, #0]
10014ffc:	2208      	movs	r2, #8
10014ffe:	89a3      	ldrh	r3, [r4, #12]
10015000:	4313      	orrs	r3, r2
10015002:	81a3      	strh	r3, [r4, #12]
10015004:	6923      	ldr	r3, [r4, #16]
10015006:	2b00      	cmp	r3, #0
10015008:	d10b      	bne.n	10015022 <__swsetup_r+0xa6>
1001500a:	23a0      	movs	r3, #160	; 0xa0
1001500c:	89a2      	ldrh	r2, [r4, #12]
1001500e:	009b      	lsls	r3, r3, #2
10015010:	4013      	ands	r3, r2
10015012:	2280      	movs	r2, #128	; 0x80
10015014:	0092      	lsls	r2, r2, #2
10015016:	4293      	cmp	r3, r2
10015018:	d003      	beq.n	10015022 <__swsetup_r+0xa6>
1001501a:	0021      	movs	r1, r4
1001501c:	0030      	movs	r0, r6
1001501e:	f000 f9d1 	bl	100153c4 <__smakebuf_r>
10015022:	2301      	movs	r3, #1
10015024:	89a2      	ldrh	r2, [r4, #12]
10015026:	4013      	ands	r3, r2
10015028:	d005      	beq.n	10015036 <__swsetup_r+0xba>
1001502a:	2300      	movs	r3, #0
1001502c:	60a3      	str	r3, [r4, #8]
1001502e:	6963      	ldr	r3, [r4, #20]
10015030:	425b      	negs	r3, r3
10015032:	61a3      	str	r3, [r4, #24]
10015034:	e003      	b.n	1001503e <__swsetup_r+0xc2>
10015036:	0792      	lsls	r2, r2, #30
10015038:	d400      	bmi.n	1001503c <__swsetup_r+0xc0>
1001503a:	6963      	ldr	r3, [r4, #20]
1001503c:	60a3      	str	r3, [r4, #8]
1001503e:	2000      	movs	r0, #0
10015040:	6923      	ldr	r3, [r4, #16]
10015042:	4283      	cmp	r3, r0
10015044:	d107      	bne.n	10015056 <__swsetup_r+0xda>
10015046:	220c      	movs	r2, #12
10015048:	5ea3      	ldrsh	r3, [r4, r2]
1001504a:	061a      	lsls	r2, r3, #24
1001504c:	d503      	bpl.n	10015056 <__swsetup_r+0xda>
1001504e:	2240      	movs	r2, #64	; 0x40
10015050:	4313      	orrs	r3, r2
10015052:	81a3      	strh	r3, [r4, #12]
10015054:	3801      	subs	r0, #1
10015056:	bd70      	pop	{r4, r5, r6, pc}
10015058:	10016c50 	.word	0x10016c50
1001505c:	10016b30 	.word	0x10016b30
10015060:	10016b50 	.word	0x10016b50
10015064:	10016b70 	.word	0x10016b70

10015068 <__sflush_r>:
10015068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001506a:	898a      	ldrh	r2, [r1, #12]
1001506c:	0005      	movs	r5, r0
1001506e:	000c      	movs	r4, r1
10015070:	0713      	lsls	r3, r2, #28
10015072:	d45a      	bmi.n	1001512a <__sflush_r+0xc2>
10015074:	684b      	ldr	r3, [r1, #4]
10015076:	2b00      	cmp	r3, #0
10015078:	dc02      	bgt.n	10015080 <__sflush_r+0x18>
1001507a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001507c:	2b00      	cmp	r3, #0
1001507e:	dd19      	ble.n	100150b4 <__sflush_r+0x4c>
10015080:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015082:	2f00      	cmp	r7, #0
10015084:	d016      	beq.n	100150b4 <__sflush_r+0x4c>
10015086:	2300      	movs	r3, #0
10015088:	682e      	ldr	r6, [r5, #0]
1001508a:	602b      	str	r3, [r5, #0]
1001508c:	2380      	movs	r3, #128	; 0x80
1001508e:	015b      	lsls	r3, r3, #5
10015090:	401a      	ands	r2, r3
10015092:	d001      	beq.n	10015098 <__sflush_r+0x30>
10015094:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015096:	e014      	b.n	100150c2 <__sflush_r+0x5a>
10015098:	2301      	movs	r3, #1
1001509a:	6a21      	ldr	r1, [r4, #32]
1001509c:	0028      	movs	r0, r5
1001509e:	47b8      	blx	r7
100150a0:	1c43      	adds	r3, r0, #1
100150a2:	d10e      	bne.n	100150c2 <__sflush_r+0x5a>
100150a4:	682b      	ldr	r3, [r5, #0]
100150a6:	2b00      	cmp	r3, #0
100150a8:	d00b      	beq.n	100150c2 <__sflush_r+0x5a>
100150aa:	2b1d      	cmp	r3, #29
100150ac:	d001      	beq.n	100150b2 <__sflush_r+0x4a>
100150ae:	2b16      	cmp	r3, #22
100150b0:	d102      	bne.n	100150b8 <__sflush_r+0x50>
100150b2:	602e      	str	r6, [r5, #0]
100150b4:	2000      	movs	r0, #0
100150b6:	e05a      	b.n	1001516e <__sflush_r+0x106>
100150b8:	2240      	movs	r2, #64	; 0x40
100150ba:	89a3      	ldrh	r3, [r4, #12]
100150bc:	4313      	orrs	r3, r2
100150be:	81a3      	strh	r3, [r4, #12]
100150c0:	e055      	b.n	1001516e <__sflush_r+0x106>
100150c2:	89a3      	ldrh	r3, [r4, #12]
100150c4:	075b      	lsls	r3, r3, #29
100150c6:	d506      	bpl.n	100150d6 <__sflush_r+0x6e>
100150c8:	6863      	ldr	r3, [r4, #4]
100150ca:	1ac0      	subs	r0, r0, r3
100150cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
100150ce:	2b00      	cmp	r3, #0
100150d0:	d001      	beq.n	100150d6 <__sflush_r+0x6e>
100150d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
100150d4:	1ac0      	subs	r0, r0, r3
100150d6:	2300      	movs	r3, #0
100150d8:	0002      	movs	r2, r0
100150da:	6a21      	ldr	r1, [r4, #32]
100150dc:	0028      	movs	r0, r5
100150de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100150e0:	47b8      	blx	r7
100150e2:	89a3      	ldrh	r3, [r4, #12]
100150e4:	1c42      	adds	r2, r0, #1
100150e6:	d106      	bne.n	100150f6 <__sflush_r+0x8e>
100150e8:	6829      	ldr	r1, [r5, #0]
100150ea:	291d      	cmp	r1, #29
100150ec:	d83a      	bhi.n	10015164 <__sflush_r+0xfc>
100150ee:	4a20      	ldr	r2, [pc, #128]	; (10015170 <__sflush_r+0x108>)
100150f0:	40ca      	lsrs	r2, r1
100150f2:	07d2      	lsls	r2, r2, #31
100150f4:	d536      	bpl.n	10015164 <__sflush_r+0xfc>
100150f6:	2200      	movs	r2, #0
100150f8:	6062      	str	r2, [r4, #4]
100150fa:	6922      	ldr	r2, [r4, #16]
100150fc:	6022      	str	r2, [r4, #0]
100150fe:	04db      	lsls	r3, r3, #19
10015100:	d505      	bpl.n	1001510e <__sflush_r+0xa6>
10015102:	1c43      	adds	r3, r0, #1
10015104:	d102      	bne.n	1001510c <__sflush_r+0xa4>
10015106:	682b      	ldr	r3, [r5, #0]
10015108:	2b00      	cmp	r3, #0
1001510a:	d100      	bne.n	1001510e <__sflush_r+0xa6>
1001510c:	6560      	str	r0, [r4, #84]	; 0x54
1001510e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015110:	602e      	str	r6, [r5, #0]
10015112:	2900      	cmp	r1, #0
10015114:	d0ce      	beq.n	100150b4 <__sflush_r+0x4c>
10015116:	0023      	movs	r3, r4
10015118:	3344      	adds	r3, #68	; 0x44
1001511a:	4299      	cmp	r1, r3
1001511c:	d002      	beq.n	10015124 <__sflush_r+0xbc>
1001511e:	0028      	movs	r0, r5
10015120:	f7ff fc96 	bl	10014a50 <_free_r>
10015124:	2000      	movs	r0, #0
10015126:	6360      	str	r0, [r4, #52]	; 0x34
10015128:	e021      	b.n	1001516e <__sflush_r+0x106>
1001512a:	690f      	ldr	r7, [r1, #16]
1001512c:	2f00      	cmp	r7, #0
1001512e:	d0c1      	beq.n	100150b4 <__sflush_r+0x4c>
10015130:	680b      	ldr	r3, [r1, #0]
10015132:	600f      	str	r7, [r1, #0]
10015134:	1bdb      	subs	r3, r3, r7
10015136:	9301      	str	r3, [sp, #4]
10015138:	2300      	movs	r3, #0
1001513a:	0792      	lsls	r2, r2, #30
1001513c:	d100      	bne.n	10015140 <__sflush_r+0xd8>
1001513e:	694b      	ldr	r3, [r1, #20]
10015140:	60a3      	str	r3, [r4, #8]
10015142:	e003      	b.n	1001514c <__sflush_r+0xe4>
10015144:	9b01      	ldr	r3, [sp, #4]
10015146:	183f      	adds	r7, r7, r0
10015148:	1a1b      	subs	r3, r3, r0
1001514a:	9301      	str	r3, [sp, #4]
1001514c:	9b01      	ldr	r3, [sp, #4]
1001514e:	2b00      	cmp	r3, #0
10015150:	ddb0      	ble.n	100150b4 <__sflush_r+0x4c>
10015152:	9b01      	ldr	r3, [sp, #4]
10015154:	003a      	movs	r2, r7
10015156:	6a21      	ldr	r1, [r4, #32]
10015158:	0028      	movs	r0, r5
1001515a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1001515c:	47b0      	blx	r6
1001515e:	2800      	cmp	r0, #0
10015160:	dcf0      	bgt.n	10015144 <__sflush_r+0xdc>
10015162:	89a3      	ldrh	r3, [r4, #12]
10015164:	2240      	movs	r2, #64	; 0x40
10015166:	2001      	movs	r0, #1
10015168:	4313      	orrs	r3, r2
1001516a:	81a3      	strh	r3, [r4, #12]
1001516c:	4240      	negs	r0, r0
1001516e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015170:	20400001 	.word	0x20400001

10015174 <_fflush_r>:
10015174:	690b      	ldr	r3, [r1, #16]
10015176:	b570      	push	{r4, r5, r6, lr}
10015178:	0005      	movs	r5, r0
1001517a:	000c      	movs	r4, r1
1001517c:	2b00      	cmp	r3, #0
1001517e:	d101      	bne.n	10015184 <_fflush_r+0x10>
10015180:	2000      	movs	r0, #0
10015182:	e01c      	b.n	100151be <_fflush_r+0x4a>
10015184:	2800      	cmp	r0, #0
10015186:	d004      	beq.n	10015192 <_fflush_r+0x1e>
10015188:	6983      	ldr	r3, [r0, #24]
1001518a:	2b00      	cmp	r3, #0
1001518c:	d101      	bne.n	10015192 <_fflush_r+0x1e>
1001518e:	f000 f85f 	bl	10015250 <__sinit>
10015192:	4b0b      	ldr	r3, [pc, #44]	; (100151c0 <_fflush_r+0x4c>)
10015194:	429c      	cmp	r4, r3
10015196:	d101      	bne.n	1001519c <_fflush_r+0x28>
10015198:	686c      	ldr	r4, [r5, #4]
1001519a:	e008      	b.n	100151ae <_fflush_r+0x3a>
1001519c:	4b09      	ldr	r3, [pc, #36]	; (100151c4 <_fflush_r+0x50>)
1001519e:	429c      	cmp	r4, r3
100151a0:	d101      	bne.n	100151a6 <_fflush_r+0x32>
100151a2:	68ac      	ldr	r4, [r5, #8]
100151a4:	e003      	b.n	100151ae <_fflush_r+0x3a>
100151a6:	4b08      	ldr	r3, [pc, #32]	; (100151c8 <_fflush_r+0x54>)
100151a8:	429c      	cmp	r4, r3
100151aa:	d100      	bne.n	100151ae <_fflush_r+0x3a>
100151ac:	68ec      	ldr	r4, [r5, #12]
100151ae:	220c      	movs	r2, #12
100151b0:	5ea3      	ldrsh	r3, [r4, r2]
100151b2:	2b00      	cmp	r3, #0
100151b4:	d0e4      	beq.n	10015180 <_fflush_r+0xc>
100151b6:	0021      	movs	r1, r4
100151b8:	0028      	movs	r0, r5
100151ba:	f7ff ff55 	bl	10015068 <__sflush_r>
100151be:	bd70      	pop	{r4, r5, r6, pc}
100151c0:	10016b30 	.word	0x10016b30
100151c4:	10016b50 	.word	0x10016b50
100151c8:	10016b70 	.word	0x10016b70

100151cc <_cleanup_r>:
100151cc:	b510      	push	{r4, lr}
100151ce:	4902      	ldr	r1, [pc, #8]	; (100151d8 <_cleanup_r+0xc>)
100151d0:	f000 f8b0 	bl	10015334 <_fwalk_reent>
100151d4:	bd10      	pop	{r4, pc}
100151d6:	46c0      	nop			; (mov r8, r8)
100151d8:	10015175 	.word	0x10015175

100151dc <std.isra.0>:
100151dc:	2300      	movs	r3, #0
100151de:	b510      	push	{r4, lr}
100151e0:	0004      	movs	r4, r0
100151e2:	6003      	str	r3, [r0, #0]
100151e4:	6043      	str	r3, [r0, #4]
100151e6:	6083      	str	r3, [r0, #8]
100151e8:	8181      	strh	r1, [r0, #12]
100151ea:	6643      	str	r3, [r0, #100]	; 0x64
100151ec:	81c2      	strh	r2, [r0, #14]
100151ee:	6103      	str	r3, [r0, #16]
100151f0:	6143      	str	r3, [r0, #20]
100151f2:	6183      	str	r3, [r0, #24]
100151f4:	0019      	movs	r1, r3
100151f6:	2208      	movs	r2, #8
100151f8:	305c      	adds	r0, #92	; 0x5c
100151fa:	f7ff fc21 	bl	10014a40 <memset>
100151fe:	4b05      	ldr	r3, [pc, #20]	; (10015214 <std.isra.0+0x38>)
10015200:	6224      	str	r4, [r4, #32]
10015202:	6263      	str	r3, [r4, #36]	; 0x24
10015204:	4b04      	ldr	r3, [pc, #16]	; (10015218 <std.isra.0+0x3c>)
10015206:	62a3      	str	r3, [r4, #40]	; 0x28
10015208:	4b04      	ldr	r3, [pc, #16]	; (1001521c <std.isra.0+0x40>)
1001520a:	62e3      	str	r3, [r4, #44]	; 0x2c
1001520c:	4b04      	ldr	r3, [pc, #16]	; (10015220 <std.isra.0+0x44>)
1001520e:	6323      	str	r3, [r4, #48]	; 0x30
10015210:	bd10      	pop	{r4, pc}
10015212:	46c0      	nop			; (mov r8, r8)
10015214:	10015a55 	.word	0x10015a55
10015218:	10015a7d 	.word	0x10015a7d
1001521c:	10015ab5 	.word	0x10015ab5
10015220:	10015ae1 	.word	0x10015ae1

10015224 <__sfmoreglue>:
10015224:	b570      	push	{r4, r5, r6, lr}
10015226:	2568      	movs	r5, #104	; 0x68
10015228:	1e4b      	subs	r3, r1, #1
1001522a:	435d      	muls	r5, r3
1001522c:	000e      	movs	r6, r1
1001522e:	0029      	movs	r1, r5
10015230:	3174      	adds	r1, #116	; 0x74
10015232:	f7ff fc53 	bl	10014adc <_malloc_r>
10015236:	1e04      	subs	r4, r0, #0
10015238:	d008      	beq.n	1001524c <__sfmoreglue+0x28>
1001523a:	2100      	movs	r1, #0
1001523c:	002a      	movs	r2, r5
1001523e:	6001      	str	r1, [r0, #0]
10015240:	6046      	str	r6, [r0, #4]
10015242:	300c      	adds	r0, #12
10015244:	60a0      	str	r0, [r4, #8]
10015246:	3268      	adds	r2, #104	; 0x68
10015248:	f7ff fbfa 	bl	10014a40 <memset>
1001524c:	0020      	movs	r0, r4
1001524e:	bd70      	pop	{r4, r5, r6, pc}

10015250 <__sinit>:
10015250:	6983      	ldr	r3, [r0, #24]
10015252:	b513      	push	{r0, r1, r4, lr}
10015254:	0004      	movs	r4, r0
10015256:	2b00      	cmp	r3, #0
10015258:	d128      	bne.n	100152ac <__sinit+0x5c>
1001525a:	6483      	str	r3, [r0, #72]	; 0x48
1001525c:	64c3      	str	r3, [r0, #76]	; 0x4c
1001525e:	6503      	str	r3, [r0, #80]	; 0x50
10015260:	4b13      	ldr	r3, [pc, #76]	; (100152b0 <__sinit+0x60>)
10015262:	4a14      	ldr	r2, [pc, #80]	; (100152b4 <__sinit+0x64>)
10015264:	681b      	ldr	r3, [r3, #0]
10015266:	6282      	str	r2, [r0, #40]	; 0x28
10015268:	9301      	str	r3, [sp, #4]
1001526a:	4298      	cmp	r0, r3
1001526c:	d101      	bne.n	10015272 <__sinit+0x22>
1001526e:	2301      	movs	r3, #1
10015270:	6183      	str	r3, [r0, #24]
10015272:	0020      	movs	r0, r4
10015274:	f000 f820 	bl	100152b8 <__sfp>
10015278:	6060      	str	r0, [r4, #4]
1001527a:	0020      	movs	r0, r4
1001527c:	f000 f81c 	bl	100152b8 <__sfp>
10015280:	60a0      	str	r0, [r4, #8]
10015282:	0020      	movs	r0, r4
10015284:	f000 f818 	bl	100152b8 <__sfp>
10015288:	2200      	movs	r2, #0
1001528a:	60e0      	str	r0, [r4, #12]
1001528c:	2104      	movs	r1, #4
1001528e:	6860      	ldr	r0, [r4, #4]
10015290:	f7ff ffa4 	bl	100151dc <std.isra.0>
10015294:	2201      	movs	r2, #1
10015296:	2109      	movs	r1, #9
10015298:	68a0      	ldr	r0, [r4, #8]
1001529a:	f7ff ff9f 	bl	100151dc <std.isra.0>
1001529e:	2202      	movs	r2, #2
100152a0:	2112      	movs	r1, #18
100152a2:	68e0      	ldr	r0, [r4, #12]
100152a4:	f7ff ff9a 	bl	100151dc <std.isra.0>
100152a8:	2301      	movs	r3, #1
100152aa:	61a3      	str	r3, [r4, #24]
100152ac:	bd13      	pop	{r0, r1, r4, pc}
100152ae:	46c0      	nop			; (mov r8, r8)
100152b0:	10016b2c 	.word	0x10016b2c
100152b4:	100151cd 	.word	0x100151cd

100152b8 <__sfp>:
100152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100152ba:	4b1d      	ldr	r3, [pc, #116]	; (10015330 <__sfp+0x78>)
100152bc:	0006      	movs	r6, r0
100152be:	681d      	ldr	r5, [r3, #0]
100152c0:	69ab      	ldr	r3, [r5, #24]
100152c2:	2b00      	cmp	r3, #0
100152c4:	d102      	bne.n	100152cc <__sfp+0x14>
100152c6:	0028      	movs	r0, r5
100152c8:	f7ff ffc2 	bl	10015250 <__sinit>
100152cc:	3548      	adds	r5, #72	; 0x48
100152ce:	68ac      	ldr	r4, [r5, #8]
100152d0:	686b      	ldr	r3, [r5, #4]
100152d2:	3b01      	subs	r3, #1
100152d4:	d405      	bmi.n	100152e2 <__sfp+0x2a>
100152d6:	220c      	movs	r2, #12
100152d8:	5ea7      	ldrsh	r7, [r4, r2]
100152da:	2f00      	cmp	r7, #0
100152dc:	d010      	beq.n	10015300 <__sfp+0x48>
100152de:	3468      	adds	r4, #104	; 0x68
100152e0:	e7f7      	b.n	100152d2 <__sfp+0x1a>
100152e2:	682b      	ldr	r3, [r5, #0]
100152e4:	2b00      	cmp	r3, #0
100152e6:	d001      	beq.n	100152ec <__sfp+0x34>
100152e8:	682d      	ldr	r5, [r5, #0]
100152ea:	e7f0      	b.n	100152ce <__sfp+0x16>
100152ec:	2104      	movs	r1, #4
100152ee:	0030      	movs	r0, r6
100152f0:	f7ff ff98 	bl	10015224 <__sfmoreglue>
100152f4:	6028      	str	r0, [r5, #0]
100152f6:	2800      	cmp	r0, #0
100152f8:	d1f6      	bne.n	100152e8 <__sfp+0x30>
100152fa:	230c      	movs	r3, #12
100152fc:	6033      	str	r3, [r6, #0]
100152fe:	e016      	b.n	1001532e <__sfp+0x76>
10015300:	2301      	movs	r3, #1
10015302:	0020      	movs	r0, r4
10015304:	425b      	negs	r3, r3
10015306:	81e3      	strh	r3, [r4, #14]
10015308:	3302      	adds	r3, #2
1001530a:	81a3      	strh	r3, [r4, #12]
1001530c:	6667      	str	r7, [r4, #100]	; 0x64
1001530e:	6027      	str	r7, [r4, #0]
10015310:	60a7      	str	r7, [r4, #8]
10015312:	6067      	str	r7, [r4, #4]
10015314:	6127      	str	r7, [r4, #16]
10015316:	6167      	str	r7, [r4, #20]
10015318:	61a7      	str	r7, [r4, #24]
1001531a:	305c      	adds	r0, #92	; 0x5c
1001531c:	2208      	movs	r2, #8
1001531e:	0039      	movs	r1, r7
10015320:	f7ff fb8e 	bl	10014a40 <memset>
10015324:	0020      	movs	r0, r4
10015326:	6367      	str	r7, [r4, #52]	; 0x34
10015328:	63a7      	str	r7, [r4, #56]	; 0x38
1001532a:	64a7      	str	r7, [r4, #72]	; 0x48
1001532c:	64e7      	str	r7, [r4, #76]	; 0x4c
1001532e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015330:	10016b2c 	.word	0x10016b2c

10015334 <_fwalk_reent>:
10015334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015336:	0004      	movs	r4, r0
10015338:	0007      	movs	r7, r0
1001533a:	2600      	movs	r6, #0
1001533c:	9101      	str	r1, [sp, #4]
1001533e:	3448      	adds	r4, #72	; 0x48
10015340:	2c00      	cmp	r4, #0
10015342:	d016      	beq.n	10015372 <_fwalk_reent+0x3e>
10015344:	6863      	ldr	r3, [r4, #4]
10015346:	68a5      	ldr	r5, [r4, #8]
10015348:	9300      	str	r3, [sp, #0]
1001534a:	9b00      	ldr	r3, [sp, #0]
1001534c:	3b01      	subs	r3, #1
1001534e:	9300      	str	r3, [sp, #0]
10015350:	d40d      	bmi.n	1001536e <_fwalk_reent+0x3a>
10015352:	89ab      	ldrh	r3, [r5, #12]
10015354:	2b01      	cmp	r3, #1
10015356:	d908      	bls.n	1001536a <_fwalk_reent+0x36>
10015358:	220e      	movs	r2, #14
1001535a:	5eab      	ldrsh	r3, [r5, r2]
1001535c:	3301      	adds	r3, #1
1001535e:	d004      	beq.n	1001536a <_fwalk_reent+0x36>
10015360:	0029      	movs	r1, r5
10015362:	0038      	movs	r0, r7
10015364:	9b01      	ldr	r3, [sp, #4]
10015366:	4798      	blx	r3
10015368:	4306      	orrs	r6, r0
1001536a:	3568      	adds	r5, #104	; 0x68
1001536c:	e7ed      	b.n	1001534a <_fwalk_reent+0x16>
1001536e:	6824      	ldr	r4, [r4, #0]
10015370:	e7e6      	b.n	10015340 <_fwalk_reent+0xc>
10015372:	0030      	movs	r0, r6
10015374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015378 <__swhatbuf_r>:
10015378:	b570      	push	{r4, r5, r6, lr}
1001537a:	000e      	movs	r6, r1
1001537c:	001d      	movs	r5, r3
1001537e:	230e      	movs	r3, #14
10015380:	5ec9      	ldrsh	r1, [r1, r3]
10015382:	b090      	sub	sp, #64	; 0x40
10015384:	0014      	movs	r4, r2
10015386:	2900      	cmp	r1, #0
10015388:	da06      	bge.n	10015398 <__swhatbuf_r+0x20>
1001538a:	2300      	movs	r3, #0
1001538c:	602b      	str	r3, [r5, #0]
1001538e:	89b3      	ldrh	r3, [r6, #12]
10015390:	061b      	lsls	r3, r3, #24
10015392:	d50f      	bpl.n	100153b4 <__swhatbuf_r+0x3c>
10015394:	2340      	movs	r3, #64	; 0x40
10015396:	e00f      	b.n	100153b8 <__swhatbuf_r+0x40>
10015398:	aa01      	add	r2, sp, #4
1001539a:	f000 fbcd 	bl	10015b38 <_fstat_r>
1001539e:	2800      	cmp	r0, #0
100153a0:	dbf3      	blt.n	1001538a <__swhatbuf_r+0x12>
100153a2:	23f0      	movs	r3, #240	; 0xf0
100153a4:	9a02      	ldr	r2, [sp, #8]
100153a6:	021b      	lsls	r3, r3, #8
100153a8:	4013      	ands	r3, r2
100153aa:	4a05      	ldr	r2, [pc, #20]	; (100153c0 <__swhatbuf_r+0x48>)
100153ac:	189b      	adds	r3, r3, r2
100153ae:	425a      	negs	r2, r3
100153b0:	4153      	adcs	r3, r2
100153b2:	602b      	str	r3, [r5, #0]
100153b4:	2380      	movs	r3, #128	; 0x80
100153b6:	00db      	lsls	r3, r3, #3
100153b8:	2000      	movs	r0, #0
100153ba:	6023      	str	r3, [r4, #0]
100153bc:	b010      	add	sp, #64	; 0x40
100153be:	bd70      	pop	{r4, r5, r6, pc}
100153c0:	ffffe000 	.word	0xffffe000

100153c4 <__smakebuf_r>:
100153c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100153c6:	2602      	movs	r6, #2
100153c8:	898b      	ldrh	r3, [r1, #12]
100153ca:	0005      	movs	r5, r0
100153cc:	000c      	movs	r4, r1
100153ce:	4233      	tst	r3, r6
100153d0:	d110      	bne.n	100153f4 <__smakebuf_r+0x30>
100153d2:	ab01      	add	r3, sp, #4
100153d4:	466a      	mov	r2, sp
100153d6:	f7ff ffcf 	bl	10015378 <__swhatbuf_r>
100153da:	9900      	ldr	r1, [sp, #0]
100153dc:	0007      	movs	r7, r0
100153de:	0028      	movs	r0, r5
100153e0:	f7ff fb7c 	bl	10014adc <_malloc_r>
100153e4:	2800      	cmp	r0, #0
100153e6:	d10c      	bne.n	10015402 <__smakebuf_r+0x3e>
100153e8:	220c      	movs	r2, #12
100153ea:	5ea3      	ldrsh	r3, [r4, r2]
100153ec:	059a      	lsls	r2, r3, #22
100153ee:	d423      	bmi.n	10015438 <__smakebuf_r+0x74>
100153f0:	4333      	orrs	r3, r6
100153f2:	81a3      	strh	r3, [r4, #12]
100153f4:	0023      	movs	r3, r4
100153f6:	3347      	adds	r3, #71	; 0x47
100153f8:	6023      	str	r3, [r4, #0]
100153fa:	6123      	str	r3, [r4, #16]
100153fc:	2301      	movs	r3, #1
100153fe:	6163      	str	r3, [r4, #20]
10015400:	e01a      	b.n	10015438 <__smakebuf_r+0x74>
10015402:	2280      	movs	r2, #128	; 0x80
10015404:	4b0d      	ldr	r3, [pc, #52]	; (1001543c <__smakebuf_r+0x78>)
10015406:	62ab      	str	r3, [r5, #40]	; 0x28
10015408:	89a3      	ldrh	r3, [r4, #12]
1001540a:	6020      	str	r0, [r4, #0]
1001540c:	4313      	orrs	r3, r2
1001540e:	81a3      	strh	r3, [r4, #12]
10015410:	9b00      	ldr	r3, [sp, #0]
10015412:	6120      	str	r0, [r4, #16]
10015414:	6163      	str	r3, [r4, #20]
10015416:	9b01      	ldr	r3, [sp, #4]
10015418:	2b00      	cmp	r3, #0
1001541a:	d00a      	beq.n	10015432 <__smakebuf_r+0x6e>
1001541c:	230e      	movs	r3, #14
1001541e:	5ee1      	ldrsh	r1, [r4, r3]
10015420:	0028      	movs	r0, r5
10015422:	f000 fb9b 	bl	10015b5c <_isatty_r>
10015426:	2800      	cmp	r0, #0
10015428:	d003      	beq.n	10015432 <__smakebuf_r+0x6e>
1001542a:	2201      	movs	r2, #1
1001542c:	89a3      	ldrh	r3, [r4, #12]
1001542e:	4313      	orrs	r3, r2
10015430:	81a3      	strh	r3, [r4, #12]
10015432:	89a3      	ldrh	r3, [r4, #12]
10015434:	431f      	orrs	r7, r3
10015436:	81a7      	strh	r7, [r4, #12]
10015438:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001543a:	46c0      	nop			; (mov r8, r8)
1001543c:	100151cd 	.word	0x100151cd

10015440 <__sfputc_r>:
10015440:	6893      	ldr	r3, [r2, #8]
10015442:	b510      	push	{r4, lr}
10015444:	3b01      	subs	r3, #1
10015446:	6093      	str	r3, [r2, #8]
10015448:	2b00      	cmp	r3, #0
1001544a:	da05      	bge.n	10015458 <__sfputc_r+0x18>
1001544c:	6994      	ldr	r4, [r2, #24]
1001544e:	42a3      	cmp	r3, r4
10015450:	db08      	blt.n	10015464 <__sfputc_r+0x24>
10015452:	b2cb      	uxtb	r3, r1
10015454:	2b0a      	cmp	r3, #10
10015456:	d005      	beq.n	10015464 <__sfputc_r+0x24>
10015458:	6813      	ldr	r3, [r2, #0]
1001545a:	1c58      	adds	r0, r3, #1
1001545c:	6010      	str	r0, [r2, #0]
1001545e:	7019      	strb	r1, [r3, #0]
10015460:	b2c8      	uxtb	r0, r1
10015462:	e001      	b.n	10015468 <__sfputc_r+0x28>
10015464:	f7ff fd32 	bl	10014ecc <__swbuf_r>
10015468:	bd10      	pop	{r4, pc}

1001546a <__sfputs_r>:
1001546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001546c:	0006      	movs	r6, r0
1001546e:	000f      	movs	r7, r1
10015470:	0014      	movs	r4, r2
10015472:	18d5      	adds	r5, r2, r3
10015474:	42ac      	cmp	r4, r5
10015476:	d008      	beq.n	1001548a <__sfputs_r+0x20>
10015478:	7821      	ldrb	r1, [r4, #0]
1001547a:	003a      	movs	r2, r7
1001547c:	0030      	movs	r0, r6
1001547e:	f7ff ffdf 	bl	10015440 <__sfputc_r>
10015482:	3401      	adds	r4, #1
10015484:	1c43      	adds	r3, r0, #1
10015486:	d1f5      	bne.n	10015474 <__sfputs_r+0xa>
10015488:	e000      	b.n	1001548c <__sfputs_r+0x22>
1001548a:	2000      	movs	r0, #0
1001548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015490 <_vfiprintf_r>:
10015490:	b5f0      	push	{r4, r5, r6, r7, lr}
10015492:	b09f      	sub	sp, #124	; 0x7c
10015494:	0006      	movs	r6, r0
10015496:	000f      	movs	r7, r1
10015498:	9202      	str	r2, [sp, #8]
1001549a:	9305      	str	r3, [sp, #20]
1001549c:	2800      	cmp	r0, #0
1001549e:	d004      	beq.n	100154aa <_vfiprintf_r+0x1a>
100154a0:	6983      	ldr	r3, [r0, #24]
100154a2:	2b00      	cmp	r3, #0
100154a4:	d101      	bne.n	100154aa <_vfiprintf_r+0x1a>
100154a6:	f7ff fed3 	bl	10015250 <__sinit>
100154aa:	4b7f      	ldr	r3, [pc, #508]	; (100156a8 <_vfiprintf_r+0x218>)
100154ac:	429f      	cmp	r7, r3
100154ae:	d101      	bne.n	100154b4 <_vfiprintf_r+0x24>
100154b0:	6877      	ldr	r7, [r6, #4]
100154b2:	e008      	b.n	100154c6 <_vfiprintf_r+0x36>
100154b4:	4b7d      	ldr	r3, [pc, #500]	; (100156ac <_vfiprintf_r+0x21c>)
100154b6:	429f      	cmp	r7, r3
100154b8:	d101      	bne.n	100154be <_vfiprintf_r+0x2e>
100154ba:	68b7      	ldr	r7, [r6, #8]
100154bc:	e003      	b.n	100154c6 <_vfiprintf_r+0x36>
100154be:	4b7c      	ldr	r3, [pc, #496]	; (100156b0 <_vfiprintf_r+0x220>)
100154c0:	429f      	cmp	r7, r3
100154c2:	d100      	bne.n	100154c6 <_vfiprintf_r+0x36>
100154c4:	68f7      	ldr	r7, [r6, #12]
100154c6:	89bb      	ldrh	r3, [r7, #12]
100154c8:	071b      	lsls	r3, r3, #28
100154ca:	d50a      	bpl.n	100154e2 <_vfiprintf_r+0x52>
100154cc:	693b      	ldr	r3, [r7, #16]
100154ce:	2b00      	cmp	r3, #0
100154d0:	d007      	beq.n	100154e2 <_vfiprintf_r+0x52>
100154d2:	2300      	movs	r3, #0
100154d4:	ad06      	add	r5, sp, #24
100154d6:	616b      	str	r3, [r5, #20]
100154d8:	3320      	adds	r3, #32
100154da:	766b      	strb	r3, [r5, #25]
100154dc:	3310      	adds	r3, #16
100154de:	76ab      	strb	r3, [r5, #26]
100154e0:	e03d      	b.n	1001555e <_vfiprintf_r+0xce>
100154e2:	0039      	movs	r1, r7
100154e4:	0030      	movs	r0, r6
100154e6:	f7ff fd49 	bl	10014f7c <__swsetup_r>
100154ea:	2800      	cmp	r0, #0
100154ec:	d0f1      	beq.n	100154d2 <_vfiprintf_r+0x42>
100154ee:	2001      	movs	r0, #1
100154f0:	4240      	negs	r0, r0
100154f2:	e0d6      	b.n	100156a2 <_vfiprintf_r+0x212>
100154f4:	9a05      	ldr	r2, [sp, #20]
100154f6:	1d11      	adds	r1, r2, #4
100154f8:	6812      	ldr	r2, [r2, #0]
100154fa:	9105      	str	r1, [sp, #20]
100154fc:	2a00      	cmp	r2, #0
100154fe:	da00      	bge.n	10015502 <_vfiprintf_r+0x72>
10015500:	e07f      	b.n	10015602 <_vfiprintf_r+0x172>
10015502:	9209      	str	r2, [sp, #36]	; 0x24
10015504:	3401      	adds	r4, #1
10015506:	7823      	ldrb	r3, [r4, #0]
10015508:	2b2e      	cmp	r3, #46	; 0x2e
1001550a:	d100      	bne.n	1001550e <_vfiprintf_r+0x7e>
1001550c:	e08d      	b.n	1001562a <_vfiprintf_r+0x19a>
1001550e:	7821      	ldrb	r1, [r4, #0]
10015510:	2203      	movs	r2, #3
10015512:	4868      	ldr	r0, [pc, #416]	; (100156b4 <_vfiprintf_r+0x224>)
10015514:	f000 fb48 	bl	10015ba8 <memchr>
10015518:	2800      	cmp	r0, #0
1001551a:	d007      	beq.n	1001552c <_vfiprintf_r+0x9c>
1001551c:	4b65      	ldr	r3, [pc, #404]	; (100156b4 <_vfiprintf_r+0x224>)
1001551e:	682a      	ldr	r2, [r5, #0]
10015520:	1ac0      	subs	r0, r0, r3
10015522:	2340      	movs	r3, #64	; 0x40
10015524:	4083      	lsls	r3, r0
10015526:	4313      	orrs	r3, r2
10015528:	602b      	str	r3, [r5, #0]
1001552a:	3401      	adds	r4, #1
1001552c:	7821      	ldrb	r1, [r4, #0]
1001552e:	1c63      	adds	r3, r4, #1
10015530:	2206      	movs	r2, #6
10015532:	4861      	ldr	r0, [pc, #388]	; (100156b8 <_vfiprintf_r+0x228>)
10015534:	9302      	str	r3, [sp, #8]
10015536:	7629      	strb	r1, [r5, #24]
10015538:	f000 fb36 	bl	10015ba8 <memchr>
1001553c:	2800      	cmp	r0, #0
1001553e:	d100      	bne.n	10015542 <_vfiprintf_r+0xb2>
10015540:	e09d      	b.n	1001567e <_vfiprintf_r+0x1ee>
10015542:	4b5e      	ldr	r3, [pc, #376]	; (100156bc <_vfiprintf_r+0x22c>)
10015544:	2b00      	cmp	r3, #0
10015546:	d000      	beq.n	1001554a <_vfiprintf_r+0xba>
10015548:	e090      	b.n	1001566c <_vfiprintf_r+0x1dc>
1001554a:	2207      	movs	r2, #7
1001554c:	9b05      	ldr	r3, [sp, #20]
1001554e:	3307      	adds	r3, #7
10015550:	4393      	bics	r3, r2
10015552:	3308      	adds	r3, #8
10015554:	9305      	str	r3, [sp, #20]
10015556:	696b      	ldr	r3, [r5, #20]
10015558:	9a03      	ldr	r2, [sp, #12]
1001555a:	189b      	adds	r3, r3, r2
1001555c:	616b      	str	r3, [r5, #20]
1001555e:	9c02      	ldr	r4, [sp, #8]
10015560:	7823      	ldrb	r3, [r4, #0]
10015562:	2b00      	cmp	r3, #0
10015564:	d104      	bne.n	10015570 <_vfiprintf_r+0xe0>
10015566:	9b02      	ldr	r3, [sp, #8]
10015568:	1ae3      	subs	r3, r4, r3
1001556a:	9304      	str	r3, [sp, #16]
1001556c:	d012      	beq.n	10015594 <_vfiprintf_r+0x104>
1001556e:	e003      	b.n	10015578 <_vfiprintf_r+0xe8>
10015570:	2b25      	cmp	r3, #37	; 0x25
10015572:	d0f8      	beq.n	10015566 <_vfiprintf_r+0xd6>
10015574:	3401      	adds	r4, #1
10015576:	e7f3      	b.n	10015560 <_vfiprintf_r+0xd0>
10015578:	9b04      	ldr	r3, [sp, #16]
1001557a:	9a02      	ldr	r2, [sp, #8]
1001557c:	0039      	movs	r1, r7
1001557e:	0030      	movs	r0, r6
10015580:	f7ff ff73 	bl	1001546a <__sfputs_r>
10015584:	1c43      	adds	r3, r0, #1
10015586:	d100      	bne.n	1001558a <_vfiprintf_r+0xfa>
10015588:	e086      	b.n	10015698 <_vfiprintf_r+0x208>
1001558a:	696a      	ldr	r2, [r5, #20]
1001558c:	9b04      	ldr	r3, [sp, #16]
1001558e:	4694      	mov	ip, r2
10015590:	4463      	add	r3, ip
10015592:	616b      	str	r3, [r5, #20]
10015594:	7823      	ldrb	r3, [r4, #0]
10015596:	2b00      	cmp	r3, #0
10015598:	d07e      	beq.n	10015698 <_vfiprintf_r+0x208>
1001559a:	2201      	movs	r2, #1
1001559c:	2300      	movs	r3, #0
1001559e:	4252      	negs	r2, r2
100155a0:	606a      	str	r2, [r5, #4]
100155a2:	a902      	add	r1, sp, #8
100155a4:	3254      	adds	r2, #84	; 0x54
100155a6:	1852      	adds	r2, r2, r1
100155a8:	3401      	adds	r4, #1
100155aa:	602b      	str	r3, [r5, #0]
100155ac:	60eb      	str	r3, [r5, #12]
100155ae:	60ab      	str	r3, [r5, #8]
100155b0:	7013      	strb	r3, [r2, #0]
100155b2:	65ab      	str	r3, [r5, #88]	; 0x58
100155b4:	7821      	ldrb	r1, [r4, #0]
100155b6:	2205      	movs	r2, #5
100155b8:	4841      	ldr	r0, [pc, #260]	; (100156c0 <_vfiprintf_r+0x230>)
100155ba:	f000 faf5 	bl	10015ba8 <memchr>
100155be:	2800      	cmp	r0, #0
100155c0:	d008      	beq.n	100155d4 <_vfiprintf_r+0x144>
100155c2:	4b3f      	ldr	r3, [pc, #252]	; (100156c0 <_vfiprintf_r+0x230>)
100155c4:	682a      	ldr	r2, [r5, #0]
100155c6:	1ac0      	subs	r0, r0, r3
100155c8:	2301      	movs	r3, #1
100155ca:	4083      	lsls	r3, r0
100155cc:	4313      	orrs	r3, r2
100155ce:	602b      	str	r3, [r5, #0]
100155d0:	3401      	adds	r4, #1
100155d2:	e7ef      	b.n	100155b4 <_vfiprintf_r+0x124>
100155d4:	682b      	ldr	r3, [r5, #0]
100155d6:	06da      	lsls	r2, r3, #27
100155d8:	d504      	bpl.n	100155e4 <_vfiprintf_r+0x154>
100155da:	2253      	movs	r2, #83	; 0x53
100155dc:	2120      	movs	r1, #32
100155de:	a802      	add	r0, sp, #8
100155e0:	1812      	adds	r2, r2, r0
100155e2:	7011      	strb	r1, [r2, #0]
100155e4:	071a      	lsls	r2, r3, #28
100155e6:	d504      	bpl.n	100155f2 <_vfiprintf_r+0x162>
100155e8:	2253      	movs	r2, #83	; 0x53
100155ea:	212b      	movs	r1, #43	; 0x2b
100155ec:	a802      	add	r0, sp, #8
100155ee:	1812      	adds	r2, r2, r0
100155f0:	7011      	strb	r1, [r2, #0]
100155f2:	7822      	ldrb	r2, [r4, #0]
100155f4:	2a2a      	cmp	r2, #42	; 0x2a
100155f6:	d100      	bne.n	100155fa <_vfiprintf_r+0x16a>
100155f8:	e77c      	b.n	100154f4 <_vfiprintf_r+0x64>
100155fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
100155fc:	2000      	movs	r0, #0
100155fe:	210a      	movs	r1, #10
10015600:	e005      	b.n	1001560e <_vfiprintf_r+0x17e>
10015602:	4252      	negs	r2, r2
10015604:	60ea      	str	r2, [r5, #12]
10015606:	2202      	movs	r2, #2
10015608:	4313      	orrs	r3, r2
1001560a:	602b      	str	r3, [r5, #0]
1001560c:	e77a      	b.n	10015504 <_vfiprintf_r+0x74>
1001560e:	7822      	ldrb	r2, [r4, #0]
10015610:	3a30      	subs	r2, #48	; 0x30
10015612:	2a09      	cmp	r2, #9
10015614:	d804      	bhi.n	10015620 <_vfiprintf_r+0x190>
10015616:	434b      	muls	r3, r1
10015618:	3401      	adds	r4, #1
1001561a:	189b      	adds	r3, r3, r2
1001561c:	2001      	movs	r0, #1
1001561e:	e7f6      	b.n	1001560e <_vfiprintf_r+0x17e>
10015620:	2800      	cmp	r0, #0
10015622:	d100      	bne.n	10015626 <_vfiprintf_r+0x196>
10015624:	e76f      	b.n	10015506 <_vfiprintf_r+0x76>
10015626:	9309      	str	r3, [sp, #36]	; 0x24
10015628:	e76d      	b.n	10015506 <_vfiprintf_r+0x76>
1001562a:	7863      	ldrb	r3, [r4, #1]
1001562c:	2b2a      	cmp	r3, #42	; 0x2a
1001562e:	d10a      	bne.n	10015646 <_vfiprintf_r+0x1b6>
10015630:	9b05      	ldr	r3, [sp, #20]
10015632:	3402      	adds	r4, #2
10015634:	1d1a      	adds	r2, r3, #4
10015636:	681b      	ldr	r3, [r3, #0]
10015638:	9205      	str	r2, [sp, #20]
1001563a:	2b00      	cmp	r3, #0
1001563c:	da01      	bge.n	10015642 <_vfiprintf_r+0x1b2>
1001563e:	2301      	movs	r3, #1
10015640:	425b      	negs	r3, r3
10015642:	9307      	str	r3, [sp, #28]
10015644:	e763      	b.n	1001550e <_vfiprintf_r+0x7e>
10015646:	2300      	movs	r3, #0
10015648:	200a      	movs	r0, #10
1001564a:	001a      	movs	r2, r3
1001564c:	3401      	adds	r4, #1
1001564e:	606b      	str	r3, [r5, #4]
10015650:	7821      	ldrb	r1, [r4, #0]
10015652:	3930      	subs	r1, #48	; 0x30
10015654:	2909      	cmp	r1, #9
10015656:	d804      	bhi.n	10015662 <_vfiprintf_r+0x1d2>
10015658:	4342      	muls	r2, r0
1001565a:	3401      	adds	r4, #1
1001565c:	1852      	adds	r2, r2, r1
1001565e:	2301      	movs	r3, #1
10015660:	e7f6      	b.n	10015650 <_vfiprintf_r+0x1c0>
10015662:	2b00      	cmp	r3, #0
10015664:	d100      	bne.n	10015668 <_vfiprintf_r+0x1d8>
10015666:	e752      	b.n	1001550e <_vfiprintf_r+0x7e>
10015668:	9207      	str	r2, [sp, #28]
1001566a:	e750      	b.n	1001550e <_vfiprintf_r+0x7e>
1001566c:	ab05      	add	r3, sp, #20
1001566e:	9300      	str	r3, [sp, #0]
10015670:	003a      	movs	r2, r7
10015672:	4b14      	ldr	r3, [pc, #80]	; (100156c4 <_vfiprintf_r+0x234>)
10015674:	0029      	movs	r1, r5
10015676:	0030      	movs	r0, r6
10015678:	e000      	b.n	1001567c <_vfiprintf_r+0x1ec>
1001567a:	bf00      	nop
1001567c:	e007      	b.n	1001568e <_vfiprintf_r+0x1fe>
1001567e:	ab05      	add	r3, sp, #20
10015680:	9300      	str	r3, [sp, #0]
10015682:	003a      	movs	r2, r7
10015684:	4b0f      	ldr	r3, [pc, #60]	; (100156c4 <_vfiprintf_r+0x234>)
10015686:	0029      	movs	r1, r5
10015688:	0030      	movs	r0, r6
1001568a:	f000 f88b 	bl	100157a4 <_printf_i>
1001568e:	9003      	str	r0, [sp, #12]
10015690:	9b03      	ldr	r3, [sp, #12]
10015692:	3301      	adds	r3, #1
10015694:	d000      	beq.n	10015698 <_vfiprintf_r+0x208>
10015696:	e75e      	b.n	10015556 <_vfiprintf_r+0xc6>
10015698:	89bb      	ldrh	r3, [r7, #12]
1001569a:	065b      	lsls	r3, r3, #25
1001569c:	d500      	bpl.n	100156a0 <_vfiprintf_r+0x210>
1001569e:	e726      	b.n	100154ee <_vfiprintf_r+0x5e>
100156a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100156a2:	b01f      	add	sp, #124	; 0x7c
100156a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100156a6:	46c0      	nop			; (mov r8, r8)
100156a8:	10016b30 	.word	0x10016b30
100156ac:	10016b50 	.word	0x10016b50
100156b0:	10016b70 	.word	0x10016b70
100156b4:	10016b96 	.word	0x10016b96
100156b8:	10016b9a 	.word	0x10016b9a
100156bc:	00000000 	.word	0x00000000
100156c0:	10016b90 	.word	0x10016b90
100156c4:	1001546b 	.word	0x1001546b

100156c8 <_printf_common>:
100156c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100156ca:	0017      	movs	r7, r2
100156cc:	9301      	str	r3, [sp, #4]
100156ce:	688a      	ldr	r2, [r1, #8]
100156d0:	690b      	ldr	r3, [r1, #16]
100156d2:	9000      	str	r0, [sp, #0]
100156d4:	000c      	movs	r4, r1
100156d6:	4293      	cmp	r3, r2
100156d8:	da00      	bge.n	100156dc <_printf_common+0x14>
100156da:	0013      	movs	r3, r2
100156dc:	0022      	movs	r2, r4
100156de:	603b      	str	r3, [r7, #0]
100156e0:	3243      	adds	r2, #67	; 0x43
100156e2:	7812      	ldrb	r2, [r2, #0]
100156e4:	2a00      	cmp	r2, #0
100156e6:	d001      	beq.n	100156ec <_printf_common+0x24>
100156e8:	3301      	adds	r3, #1
100156ea:	603b      	str	r3, [r7, #0]
100156ec:	6823      	ldr	r3, [r4, #0]
100156ee:	069b      	lsls	r3, r3, #26
100156f0:	d502      	bpl.n	100156f8 <_printf_common+0x30>
100156f2:	683b      	ldr	r3, [r7, #0]
100156f4:	3302      	adds	r3, #2
100156f6:	603b      	str	r3, [r7, #0]
100156f8:	2506      	movs	r5, #6
100156fa:	6823      	ldr	r3, [r4, #0]
100156fc:	401d      	ands	r5, r3
100156fe:	d01e      	beq.n	1001573e <_printf_common+0x76>
10015700:	0023      	movs	r3, r4
10015702:	3343      	adds	r3, #67	; 0x43
10015704:	781b      	ldrb	r3, [r3, #0]
10015706:	1e5a      	subs	r2, r3, #1
10015708:	4193      	sbcs	r3, r2
1001570a:	6822      	ldr	r2, [r4, #0]
1001570c:	0692      	lsls	r2, r2, #26
1001570e:	d51c      	bpl.n	1001574a <_printf_common+0x82>
10015710:	2030      	movs	r0, #48	; 0x30
10015712:	18e1      	adds	r1, r4, r3
10015714:	3143      	adds	r1, #67	; 0x43
10015716:	7008      	strb	r0, [r1, #0]
10015718:	0021      	movs	r1, r4
1001571a:	1c5a      	adds	r2, r3, #1
1001571c:	3145      	adds	r1, #69	; 0x45
1001571e:	7809      	ldrb	r1, [r1, #0]
10015720:	18a2      	adds	r2, r4, r2
10015722:	3243      	adds	r2, #67	; 0x43
10015724:	3302      	adds	r3, #2
10015726:	7011      	strb	r1, [r2, #0]
10015728:	e00f      	b.n	1001574a <_printf_common+0x82>
1001572a:	0022      	movs	r2, r4
1001572c:	2301      	movs	r3, #1
1001572e:	3219      	adds	r2, #25
10015730:	9901      	ldr	r1, [sp, #4]
10015732:	9800      	ldr	r0, [sp, #0]
10015734:	9e08      	ldr	r6, [sp, #32]
10015736:	47b0      	blx	r6
10015738:	1c43      	adds	r3, r0, #1
1001573a:	d00e      	beq.n	1001575a <_printf_common+0x92>
1001573c:	3501      	adds	r5, #1
1001573e:	68e3      	ldr	r3, [r4, #12]
10015740:	683a      	ldr	r2, [r7, #0]
10015742:	1a9b      	subs	r3, r3, r2
10015744:	429d      	cmp	r5, r3
10015746:	dbf0      	blt.n	1001572a <_printf_common+0x62>
10015748:	e7da      	b.n	10015700 <_printf_common+0x38>
1001574a:	0022      	movs	r2, r4
1001574c:	9901      	ldr	r1, [sp, #4]
1001574e:	3243      	adds	r2, #67	; 0x43
10015750:	9800      	ldr	r0, [sp, #0]
10015752:	9d08      	ldr	r5, [sp, #32]
10015754:	47a8      	blx	r5
10015756:	1c43      	adds	r3, r0, #1
10015758:	d102      	bne.n	10015760 <_printf_common+0x98>
1001575a:	2001      	movs	r0, #1
1001575c:	4240      	negs	r0, r0
1001575e:	e020      	b.n	100157a2 <_printf_common+0xda>
10015760:	2306      	movs	r3, #6
10015762:	6820      	ldr	r0, [r4, #0]
10015764:	68e1      	ldr	r1, [r4, #12]
10015766:	683a      	ldr	r2, [r7, #0]
10015768:	4003      	ands	r3, r0
1001576a:	2500      	movs	r5, #0
1001576c:	2b04      	cmp	r3, #4
1001576e:	d103      	bne.n	10015778 <_printf_common+0xb0>
10015770:	1a8d      	subs	r5, r1, r2
10015772:	43eb      	mvns	r3, r5
10015774:	17db      	asrs	r3, r3, #31
10015776:	401d      	ands	r5, r3
10015778:	68a3      	ldr	r3, [r4, #8]
1001577a:	6922      	ldr	r2, [r4, #16]
1001577c:	4293      	cmp	r3, r2
1001577e:	dd01      	ble.n	10015784 <_printf_common+0xbc>
10015780:	1a9b      	subs	r3, r3, r2
10015782:	18ed      	adds	r5, r5, r3
10015784:	2700      	movs	r7, #0
10015786:	42bd      	cmp	r5, r7
10015788:	d00a      	beq.n	100157a0 <_printf_common+0xd8>
1001578a:	0022      	movs	r2, r4
1001578c:	2301      	movs	r3, #1
1001578e:	321a      	adds	r2, #26
10015790:	9901      	ldr	r1, [sp, #4]
10015792:	9800      	ldr	r0, [sp, #0]
10015794:	9e08      	ldr	r6, [sp, #32]
10015796:	47b0      	blx	r6
10015798:	1c43      	adds	r3, r0, #1
1001579a:	d0de      	beq.n	1001575a <_printf_common+0x92>
1001579c:	3701      	adds	r7, #1
1001579e:	e7f2      	b.n	10015786 <_printf_common+0xbe>
100157a0:	2000      	movs	r0, #0
100157a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100157a4 <_printf_i>:
100157a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100157a6:	b08b      	sub	sp, #44	; 0x2c
100157a8:	9206      	str	r2, [sp, #24]
100157aa:	000a      	movs	r2, r1
100157ac:	3243      	adds	r2, #67	; 0x43
100157ae:	9307      	str	r3, [sp, #28]
100157b0:	9005      	str	r0, [sp, #20]
100157b2:	9204      	str	r2, [sp, #16]
100157b4:	7e0a      	ldrb	r2, [r1, #24]
100157b6:	000c      	movs	r4, r1
100157b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100157ba:	2a6e      	cmp	r2, #110	; 0x6e
100157bc:	d100      	bne.n	100157c0 <_printf_i+0x1c>
100157be:	e0ab      	b.n	10015918 <_printf_i+0x174>
100157c0:	d811      	bhi.n	100157e6 <_printf_i+0x42>
100157c2:	2a63      	cmp	r2, #99	; 0x63
100157c4:	d022      	beq.n	1001580c <_printf_i+0x68>
100157c6:	d809      	bhi.n	100157dc <_printf_i+0x38>
100157c8:	2a00      	cmp	r2, #0
100157ca:	d100      	bne.n	100157ce <_printf_i+0x2a>
100157cc:	e0b5      	b.n	1001593a <_printf_i+0x196>
100157ce:	2a58      	cmp	r2, #88	; 0x58
100157d0:	d000      	beq.n	100157d4 <_printf_i+0x30>
100157d2:	e0c5      	b.n	10015960 <_printf_i+0x1bc>
100157d4:	3145      	adds	r1, #69	; 0x45
100157d6:	700a      	strb	r2, [r1, #0]
100157d8:	4a81      	ldr	r2, [pc, #516]	; (100159e0 <_printf_i+0x23c>)
100157da:	e04f      	b.n	1001587c <_printf_i+0xd8>
100157dc:	2a64      	cmp	r2, #100	; 0x64
100157de:	d01d      	beq.n	1001581c <_printf_i+0x78>
100157e0:	2a69      	cmp	r2, #105	; 0x69
100157e2:	d01b      	beq.n	1001581c <_printf_i+0x78>
100157e4:	e0bc      	b.n	10015960 <_printf_i+0x1bc>
100157e6:	2a73      	cmp	r2, #115	; 0x73
100157e8:	d100      	bne.n	100157ec <_printf_i+0x48>
100157ea:	e0aa      	b.n	10015942 <_printf_i+0x19e>
100157ec:	d809      	bhi.n	10015802 <_printf_i+0x5e>
100157ee:	2a6f      	cmp	r2, #111	; 0x6f
100157f0:	d029      	beq.n	10015846 <_printf_i+0xa2>
100157f2:	2a70      	cmp	r2, #112	; 0x70
100157f4:	d000      	beq.n	100157f8 <_printf_i+0x54>
100157f6:	e0b3      	b.n	10015960 <_printf_i+0x1bc>
100157f8:	2220      	movs	r2, #32
100157fa:	6809      	ldr	r1, [r1, #0]
100157fc:	430a      	orrs	r2, r1
100157fe:	6022      	str	r2, [r4, #0]
10015800:	e037      	b.n	10015872 <_printf_i+0xce>
10015802:	2a75      	cmp	r2, #117	; 0x75
10015804:	d01f      	beq.n	10015846 <_printf_i+0xa2>
10015806:	2a78      	cmp	r2, #120	; 0x78
10015808:	d033      	beq.n	10015872 <_printf_i+0xce>
1001580a:	e0a9      	b.n	10015960 <_printf_i+0x1bc>
1001580c:	000e      	movs	r6, r1
1001580e:	681a      	ldr	r2, [r3, #0]
10015810:	3642      	adds	r6, #66	; 0x42
10015812:	1d11      	adds	r1, r2, #4
10015814:	6019      	str	r1, [r3, #0]
10015816:	6813      	ldr	r3, [r2, #0]
10015818:	7033      	strb	r3, [r6, #0]
1001581a:	e0a4      	b.n	10015966 <_printf_i+0x1c2>
1001581c:	6821      	ldr	r1, [r4, #0]
1001581e:	681a      	ldr	r2, [r3, #0]
10015820:	0608      	lsls	r0, r1, #24
10015822:	d406      	bmi.n	10015832 <_printf_i+0x8e>
10015824:	0649      	lsls	r1, r1, #25
10015826:	d504      	bpl.n	10015832 <_printf_i+0x8e>
10015828:	1d11      	adds	r1, r2, #4
1001582a:	6019      	str	r1, [r3, #0]
1001582c:	2300      	movs	r3, #0
1001582e:	5ed5      	ldrsh	r5, [r2, r3]
10015830:	e002      	b.n	10015838 <_printf_i+0x94>
10015832:	1d11      	adds	r1, r2, #4
10015834:	6019      	str	r1, [r3, #0]
10015836:	6815      	ldr	r5, [r2, #0]
10015838:	2d00      	cmp	r5, #0
1001583a:	da3b      	bge.n	100158b4 <_printf_i+0x110>
1001583c:	232d      	movs	r3, #45	; 0x2d
1001583e:	9a04      	ldr	r2, [sp, #16]
10015840:	426d      	negs	r5, r5
10015842:	7013      	strb	r3, [r2, #0]
10015844:	e036      	b.n	100158b4 <_printf_i+0x110>
10015846:	6821      	ldr	r1, [r4, #0]
10015848:	681a      	ldr	r2, [r3, #0]
1001584a:	0608      	lsls	r0, r1, #24
1001584c:	d406      	bmi.n	1001585c <_printf_i+0xb8>
1001584e:	0649      	lsls	r1, r1, #25
10015850:	d504      	bpl.n	1001585c <_printf_i+0xb8>
10015852:	6815      	ldr	r5, [r2, #0]
10015854:	1d11      	adds	r1, r2, #4
10015856:	6019      	str	r1, [r3, #0]
10015858:	b2ad      	uxth	r5, r5
1001585a:	e002      	b.n	10015862 <_printf_i+0xbe>
1001585c:	1d11      	adds	r1, r2, #4
1001585e:	6019      	str	r1, [r3, #0]
10015860:	6815      	ldr	r5, [r2, #0]
10015862:	4b5f      	ldr	r3, [pc, #380]	; (100159e0 <_printf_i+0x23c>)
10015864:	7e22      	ldrb	r2, [r4, #24]
10015866:	9303      	str	r3, [sp, #12]
10015868:	2708      	movs	r7, #8
1001586a:	2a6f      	cmp	r2, #111	; 0x6f
1001586c:	d01d      	beq.n	100158aa <_printf_i+0x106>
1001586e:	270a      	movs	r7, #10
10015870:	e01b      	b.n	100158aa <_printf_i+0x106>
10015872:	0022      	movs	r2, r4
10015874:	2178      	movs	r1, #120	; 0x78
10015876:	3245      	adds	r2, #69	; 0x45
10015878:	7011      	strb	r1, [r2, #0]
1001587a:	4a5a      	ldr	r2, [pc, #360]	; (100159e4 <_printf_i+0x240>)
1001587c:	6819      	ldr	r1, [r3, #0]
1001587e:	9203      	str	r2, [sp, #12]
10015880:	1d08      	adds	r0, r1, #4
10015882:	6822      	ldr	r2, [r4, #0]
10015884:	6018      	str	r0, [r3, #0]
10015886:	680d      	ldr	r5, [r1, #0]
10015888:	0610      	lsls	r0, r2, #24
1001588a:	d402      	bmi.n	10015892 <_printf_i+0xee>
1001588c:	0650      	lsls	r0, r2, #25
1001588e:	d500      	bpl.n	10015892 <_printf_i+0xee>
10015890:	b2ad      	uxth	r5, r5
10015892:	07d3      	lsls	r3, r2, #31
10015894:	d502      	bpl.n	1001589c <_printf_i+0xf8>
10015896:	2320      	movs	r3, #32
10015898:	431a      	orrs	r2, r3
1001589a:	6022      	str	r2, [r4, #0]
1001589c:	2710      	movs	r7, #16
1001589e:	2d00      	cmp	r5, #0
100158a0:	d103      	bne.n	100158aa <_printf_i+0x106>
100158a2:	2320      	movs	r3, #32
100158a4:	6822      	ldr	r2, [r4, #0]
100158a6:	439a      	bics	r2, r3
100158a8:	6022      	str	r2, [r4, #0]
100158aa:	0023      	movs	r3, r4
100158ac:	2200      	movs	r2, #0
100158ae:	3343      	adds	r3, #67	; 0x43
100158b0:	701a      	strb	r2, [r3, #0]
100158b2:	e002      	b.n	100158ba <_printf_i+0x116>
100158b4:	270a      	movs	r7, #10
100158b6:	4b4a      	ldr	r3, [pc, #296]	; (100159e0 <_printf_i+0x23c>)
100158b8:	9303      	str	r3, [sp, #12]
100158ba:	6863      	ldr	r3, [r4, #4]
100158bc:	60a3      	str	r3, [r4, #8]
100158be:	2b00      	cmp	r3, #0
100158c0:	db09      	blt.n	100158d6 <_printf_i+0x132>
100158c2:	2204      	movs	r2, #4
100158c4:	6821      	ldr	r1, [r4, #0]
100158c6:	4391      	bics	r1, r2
100158c8:	6021      	str	r1, [r4, #0]
100158ca:	2d00      	cmp	r5, #0
100158cc:	d105      	bne.n	100158da <_printf_i+0x136>
100158ce:	9e04      	ldr	r6, [sp, #16]
100158d0:	2b00      	cmp	r3, #0
100158d2:	d011      	beq.n	100158f8 <_printf_i+0x154>
100158d4:	e07b      	b.n	100159ce <_printf_i+0x22a>
100158d6:	2d00      	cmp	r5, #0
100158d8:	d079      	beq.n	100159ce <_printf_i+0x22a>
100158da:	9e04      	ldr	r6, [sp, #16]
100158dc:	0028      	movs	r0, r5
100158de:	0039      	movs	r1, r7
100158e0:	f7fc fa9e 	bl	10011e20 <__aeabi_uidivmod>
100158e4:	9b03      	ldr	r3, [sp, #12]
100158e6:	3e01      	subs	r6, #1
100158e8:	5c5b      	ldrb	r3, [r3, r1]
100158ea:	0028      	movs	r0, r5
100158ec:	7033      	strb	r3, [r6, #0]
100158ee:	0039      	movs	r1, r7
100158f0:	f7fc fa10 	bl	10011d14 <__aeabi_uidiv>
100158f4:	1e05      	subs	r5, r0, #0
100158f6:	d1f1      	bne.n	100158dc <_printf_i+0x138>
100158f8:	2f08      	cmp	r7, #8
100158fa:	d109      	bne.n	10015910 <_printf_i+0x16c>
100158fc:	6823      	ldr	r3, [r4, #0]
100158fe:	07db      	lsls	r3, r3, #31
10015900:	d506      	bpl.n	10015910 <_printf_i+0x16c>
10015902:	6863      	ldr	r3, [r4, #4]
10015904:	6922      	ldr	r2, [r4, #16]
10015906:	4293      	cmp	r3, r2
10015908:	dc02      	bgt.n	10015910 <_printf_i+0x16c>
1001590a:	2330      	movs	r3, #48	; 0x30
1001590c:	3e01      	subs	r6, #1
1001590e:	7033      	strb	r3, [r6, #0]
10015910:	9b04      	ldr	r3, [sp, #16]
10015912:	1b9b      	subs	r3, r3, r6
10015914:	6123      	str	r3, [r4, #16]
10015916:	e02b      	b.n	10015970 <_printf_i+0x1cc>
10015918:	6809      	ldr	r1, [r1, #0]
1001591a:	681a      	ldr	r2, [r3, #0]
1001591c:	0608      	lsls	r0, r1, #24
1001591e:	d407      	bmi.n	10015930 <_printf_i+0x18c>
10015920:	0649      	lsls	r1, r1, #25
10015922:	d505      	bpl.n	10015930 <_printf_i+0x18c>
10015924:	1d11      	adds	r1, r2, #4
10015926:	6019      	str	r1, [r3, #0]
10015928:	6813      	ldr	r3, [r2, #0]
1001592a:	8aa2      	ldrh	r2, [r4, #20]
1001592c:	801a      	strh	r2, [r3, #0]
1001592e:	e004      	b.n	1001593a <_printf_i+0x196>
10015930:	1d11      	adds	r1, r2, #4
10015932:	6019      	str	r1, [r3, #0]
10015934:	6813      	ldr	r3, [r2, #0]
10015936:	6962      	ldr	r2, [r4, #20]
10015938:	601a      	str	r2, [r3, #0]
1001593a:	2300      	movs	r3, #0
1001593c:	9e04      	ldr	r6, [sp, #16]
1001593e:	6123      	str	r3, [r4, #16]
10015940:	e016      	b.n	10015970 <_printf_i+0x1cc>
10015942:	681a      	ldr	r2, [r3, #0]
10015944:	1d11      	adds	r1, r2, #4
10015946:	6019      	str	r1, [r3, #0]
10015948:	6816      	ldr	r6, [r2, #0]
1001594a:	2100      	movs	r1, #0
1001594c:	6862      	ldr	r2, [r4, #4]
1001594e:	0030      	movs	r0, r6
10015950:	f000 f92a 	bl	10015ba8 <memchr>
10015954:	2800      	cmp	r0, #0
10015956:	d001      	beq.n	1001595c <_printf_i+0x1b8>
10015958:	1b80      	subs	r0, r0, r6
1001595a:	6060      	str	r0, [r4, #4]
1001595c:	6863      	ldr	r3, [r4, #4]
1001595e:	e003      	b.n	10015968 <_printf_i+0x1c4>
10015960:	0026      	movs	r6, r4
10015962:	3642      	adds	r6, #66	; 0x42
10015964:	7032      	strb	r2, [r6, #0]
10015966:	2301      	movs	r3, #1
10015968:	6123      	str	r3, [r4, #16]
1001596a:	2300      	movs	r3, #0
1001596c:	9a04      	ldr	r2, [sp, #16]
1001596e:	7013      	strb	r3, [r2, #0]
10015970:	9b07      	ldr	r3, [sp, #28]
10015972:	aa09      	add	r2, sp, #36	; 0x24
10015974:	9300      	str	r3, [sp, #0]
10015976:	0021      	movs	r1, r4
10015978:	9b06      	ldr	r3, [sp, #24]
1001597a:	9805      	ldr	r0, [sp, #20]
1001597c:	f7ff fea4 	bl	100156c8 <_printf_common>
10015980:	1c43      	adds	r3, r0, #1
10015982:	d102      	bne.n	1001598a <_printf_i+0x1e6>
10015984:	2001      	movs	r0, #1
10015986:	4240      	negs	r0, r0
10015988:	e027      	b.n	100159da <_printf_i+0x236>
1001598a:	6923      	ldr	r3, [r4, #16]
1001598c:	0032      	movs	r2, r6
1001598e:	9906      	ldr	r1, [sp, #24]
10015990:	9805      	ldr	r0, [sp, #20]
10015992:	9d07      	ldr	r5, [sp, #28]
10015994:	47a8      	blx	r5
10015996:	1c43      	adds	r3, r0, #1
10015998:	d0f4      	beq.n	10015984 <_printf_i+0x1e0>
1001599a:	6823      	ldr	r3, [r4, #0]
1001599c:	2500      	movs	r5, #0
1001599e:	079b      	lsls	r3, r3, #30
100159a0:	d40f      	bmi.n	100159c2 <_printf_i+0x21e>
100159a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100159a4:	68e0      	ldr	r0, [r4, #12]
100159a6:	4298      	cmp	r0, r3
100159a8:	da17      	bge.n	100159da <_printf_i+0x236>
100159aa:	0018      	movs	r0, r3
100159ac:	e015      	b.n	100159da <_printf_i+0x236>
100159ae:	0022      	movs	r2, r4
100159b0:	2301      	movs	r3, #1
100159b2:	3219      	adds	r2, #25
100159b4:	9906      	ldr	r1, [sp, #24]
100159b6:	9805      	ldr	r0, [sp, #20]
100159b8:	9e07      	ldr	r6, [sp, #28]
100159ba:	47b0      	blx	r6
100159bc:	1c43      	adds	r3, r0, #1
100159be:	d0e1      	beq.n	10015984 <_printf_i+0x1e0>
100159c0:	3501      	adds	r5, #1
100159c2:	68e3      	ldr	r3, [r4, #12]
100159c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100159c6:	1a9b      	subs	r3, r3, r2
100159c8:	429d      	cmp	r5, r3
100159ca:	dbf0      	blt.n	100159ae <_printf_i+0x20a>
100159cc:	e7e9      	b.n	100159a2 <_printf_i+0x1fe>
100159ce:	0026      	movs	r6, r4
100159d0:	9b03      	ldr	r3, [sp, #12]
100159d2:	3642      	adds	r6, #66	; 0x42
100159d4:	781b      	ldrb	r3, [r3, #0]
100159d6:	7033      	strb	r3, [r6, #0]
100159d8:	e78e      	b.n	100158f8 <_printf_i+0x154>
100159da:	b00b      	add	sp, #44	; 0x2c
100159dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100159de:	46c0      	nop			; (mov r8, r8)
100159e0:	10016ba1 	.word	0x10016ba1
100159e4:	10016bb2 	.word	0x10016bb2

100159e8 <_putc_r>:
100159e8:	b570      	push	{r4, r5, r6, lr}
100159ea:	0006      	movs	r6, r0
100159ec:	000d      	movs	r5, r1
100159ee:	0014      	movs	r4, r2
100159f0:	2800      	cmp	r0, #0
100159f2:	d004      	beq.n	100159fe <_putc_r+0x16>
100159f4:	6983      	ldr	r3, [r0, #24]
100159f6:	2b00      	cmp	r3, #0
100159f8:	d101      	bne.n	100159fe <_putc_r+0x16>
100159fa:	f7ff fc29 	bl	10015250 <__sinit>
100159fe:	4b12      	ldr	r3, [pc, #72]	; (10015a48 <_putc_r+0x60>)
10015a00:	429c      	cmp	r4, r3
10015a02:	d101      	bne.n	10015a08 <_putc_r+0x20>
10015a04:	6874      	ldr	r4, [r6, #4]
10015a06:	e008      	b.n	10015a1a <_putc_r+0x32>
10015a08:	4b10      	ldr	r3, [pc, #64]	; (10015a4c <_putc_r+0x64>)
10015a0a:	429c      	cmp	r4, r3
10015a0c:	d101      	bne.n	10015a12 <_putc_r+0x2a>
10015a0e:	68b4      	ldr	r4, [r6, #8]
10015a10:	e003      	b.n	10015a1a <_putc_r+0x32>
10015a12:	4b0f      	ldr	r3, [pc, #60]	; (10015a50 <_putc_r+0x68>)
10015a14:	429c      	cmp	r4, r3
10015a16:	d100      	bne.n	10015a1a <_putc_r+0x32>
10015a18:	68f4      	ldr	r4, [r6, #12]
10015a1a:	68a3      	ldr	r3, [r4, #8]
10015a1c:	3b01      	subs	r3, #1
10015a1e:	60a3      	str	r3, [r4, #8]
10015a20:	2b00      	cmp	r3, #0
10015a22:	da05      	bge.n	10015a30 <_putc_r+0x48>
10015a24:	69a2      	ldr	r2, [r4, #24]
10015a26:	4293      	cmp	r3, r2
10015a28:	db08      	blt.n	10015a3c <_putc_r+0x54>
10015a2a:	b2eb      	uxtb	r3, r5
10015a2c:	2b0a      	cmp	r3, #10
10015a2e:	d005      	beq.n	10015a3c <_putc_r+0x54>
10015a30:	6823      	ldr	r3, [r4, #0]
10015a32:	b2e8      	uxtb	r0, r5
10015a34:	1c5a      	adds	r2, r3, #1
10015a36:	6022      	str	r2, [r4, #0]
10015a38:	701d      	strb	r5, [r3, #0]
10015a3a:	e004      	b.n	10015a46 <_putc_r+0x5e>
10015a3c:	0022      	movs	r2, r4
10015a3e:	0029      	movs	r1, r5
10015a40:	0030      	movs	r0, r6
10015a42:	f7ff fa43 	bl	10014ecc <__swbuf_r>
10015a46:	bd70      	pop	{r4, r5, r6, pc}
10015a48:	10016b30 	.word	0x10016b30
10015a4c:	10016b50 	.word	0x10016b50
10015a50:	10016b70 	.word	0x10016b70

10015a54 <__sread>:
10015a54:	b570      	push	{r4, r5, r6, lr}
10015a56:	000c      	movs	r4, r1
10015a58:	250e      	movs	r5, #14
10015a5a:	5f49      	ldrsh	r1, [r1, r5]
10015a5c:	f000 f8b0 	bl	10015bc0 <_read_r>
10015a60:	2800      	cmp	r0, #0
10015a62:	db03      	blt.n	10015a6c <__sread+0x18>
10015a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015a66:	181b      	adds	r3, r3, r0
10015a68:	6563      	str	r3, [r4, #84]	; 0x54
10015a6a:	e003      	b.n	10015a74 <__sread+0x20>
10015a6c:	89a2      	ldrh	r2, [r4, #12]
10015a6e:	4b02      	ldr	r3, [pc, #8]	; (10015a78 <__sread+0x24>)
10015a70:	4013      	ands	r3, r2
10015a72:	81a3      	strh	r3, [r4, #12]
10015a74:	bd70      	pop	{r4, r5, r6, pc}
10015a76:	46c0      	nop			; (mov r8, r8)
10015a78:	ffffefff 	.word	0xffffefff

10015a7c <__swrite>:
10015a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015a7e:	001f      	movs	r7, r3
10015a80:	898b      	ldrh	r3, [r1, #12]
10015a82:	0005      	movs	r5, r0
10015a84:	000c      	movs	r4, r1
10015a86:	0016      	movs	r6, r2
10015a88:	05db      	lsls	r3, r3, #23
10015a8a:	d505      	bpl.n	10015a98 <__swrite+0x1c>
10015a8c:	230e      	movs	r3, #14
10015a8e:	5ec9      	ldrsh	r1, [r1, r3]
10015a90:	2200      	movs	r2, #0
10015a92:	2302      	movs	r3, #2
10015a94:	f000 f874 	bl	10015b80 <_lseek_r>
10015a98:	89a2      	ldrh	r2, [r4, #12]
10015a9a:	4b05      	ldr	r3, [pc, #20]	; (10015ab0 <__swrite+0x34>)
10015a9c:	0028      	movs	r0, r5
10015a9e:	4013      	ands	r3, r2
10015aa0:	81a3      	strh	r3, [r4, #12]
10015aa2:	0032      	movs	r2, r6
10015aa4:	230e      	movs	r3, #14
10015aa6:	5ee1      	ldrsh	r1, [r4, r3]
10015aa8:	003b      	movs	r3, r7
10015aaa:	f000 f81f 	bl	10015aec <_write_r>
10015aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015ab0:	ffffefff 	.word	0xffffefff

10015ab4 <__sseek>:
10015ab4:	b570      	push	{r4, r5, r6, lr}
10015ab6:	000c      	movs	r4, r1
10015ab8:	250e      	movs	r5, #14
10015aba:	5f49      	ldrsh	r1, [r1, r5]
10015abc:	f000 f860 	bl	10015b80 <_lseek_r>
10015ac0:	89a3      	ldrh	r3, [r4, #12]
10015ac2:	1c42      	adds	r2, r0, #1
10015ac4:	d103      	bne.n	10015ace <__sseek+0x1a>
10015ac6:	4a05      	ldr	r2, [pc, #20]	; (10015adc <__sseek+0x28>)
10015ac8:	4013      	ands	r3, r2
10015aca:	81a3      	strh	r3, [r4, #12]
10015acc:	e004      	b.n	10015ad8 <__sseek+0x24>
10015ace:	2280      	movs	r2, #128	; 0x80
10015ad0:	0152      	lsls	r2, r2, #5
10015ad2:	4313      	orrs	r3, r2
10015ad4:	81a3      	strh	r3, [r4, #12]
10015ad6:	6560      	str	r0, [r4, #84]	; 0x54
10015ad8:	bd70      	pop	{r4, r5, r6, pc}
10015ada:	46c0      	nop			; (mov r8, r8)
10015adc:	ffffefff 	.word	0xffffefff

10015ae0 <__sclose>:
10015ae0:	b510      	push	{r4, lr}
10015ae2:	230e      	movs	r3, #14
10015ae4:	5ec9      	ldrsh	r1, [r1, r3]
10015ae6:	f000 f815 	bl	10015b14 <_close_r>
10015aea:	bd10      	pop	{r4, pc}

10015aec <_write_r>:
10015aec:	b570      	push	{r4, r5, r6, lr}
10015aee:	0005      	movs	r5, r0
10015af0:	0008      	movs	r0, r1
10015af2:	0011      	movs	r1, r2
10015af4:	2200      	movs	r2, #0
10015af6:	4c06      	ldr	r4, [pc, #24]	; (10015b10 <_write_r+0x24>)
10015af8:	6022      	str	r2, [r4, #0]
10015afa:	001a      	movs	r2, r3
10015afc:	f7f5 ff62 	bl	1000b9c4 <_write>
10015b00:	1c43      	adds	r3, r0, #1
10015b02:	d103      	bne.n	10015b0c <_write_r+0x20>
10015b04:	6823      	ldr	r3, [r4, #0]
10015b06:	2b00      	cmp	r3, #0
10015b08:	d000      	beq.n	10015b0c <_write_r+0x20>
10015b0a:	602b      	str	r3, [r5, #0]
10015b0c:	bd70      	pop	{r4, r5, r6, pc}
10015b0e:	46c0      	nop			; (mov r8, r8)
10015b10:	10019b74 	.word	0x10019b74

10015b14 <_close_r>:
10015b14:	2300      	movs	r3, #0
10015b16:	b570      	push	{r4, r5, r6, lr}
10015b18:	4c06      	ldr	r4, [pc, #24]	; (10015b34 <_close_r+0x20>)
10015b1a:	0005      	movs	r5, r0
10015b1c:	0008      	movs	r0, r1
10015b1e:	6023      	str	r3, [r4, #0]
10015b20:	f7f2 fc7e 	bl	10008420 <_close>
10015b24:	1c43      	adds	r3, r0, #1
10015b26:	d103      	bne.n	10015b30 <_close_r+0x1c>
10015b28:	6823      	ldr	r3, [r4, #0]
10015b2a:	2b00      	cmp	r3, #0
10015b2c:	d000      	beq.n	10015b30 <_close_r+0x1c>
10015b2e:	602b      	str	r3, [r5, #0]
10015b30:	bd70      	pop	{r4, r5, r6, pc}
10015b32:	46c0      	nop			; (mov r8, r8)
10015b34:	10019b74 	.word	0x10019b74

10015b38 <_fstat_r>:
10015b38:	2300      	movs	r3, #0
10015b3a:	b570      	push	{r4, r5, r6, lr}
10015b3c:	4c06      	ldr	r4, [pc, #24]	; (10015b58 <_fstat_r+0x20>)
10015b3e:	0005      	movs	r5, r0
10015b40:	0008      	movs	r0, r1
10015b42:	0011      	movs	r1, r2
10015b44:	6023      	str	r3, [r4, #0]
10015b46:	f7f2 fc6f 	bl	10008428 <_fstat>
10015b4a:	1c43      	adds	r3, r0, #1
10015b4c:	d103      	bne.n	10015b56 <_fstat_r+0x1e>
10015b4e:	6823      	ldr	r3, [r4, #0]
10015b50:	2b00      	cmp	r3, #0
10015b52:	d000      	beq.n	10015b56 <_fstat_r+0x1e>
10015b54:	602b      	str	r3, [r5, #0]
10015b56:	bd70      	pop	{r4, r5, r6, pc}
10015b58:	10019b74 	.word	0x10019b74

10015b5c <_isatty_r>:
10015b5c:	2300      	movs	r3, #0
10015b5e:	b570      	push	{r4, r5, r6, lr}
10015b60:	4c06      	ldr	r4, [pc, #24]	; (10015b7c <_isatty_r+0x20>)
10015b62:	0005      	movs	r5, r0
10015b64:	0008      	movs	r0, r1
10015b66:	6023      	str	r3, [r4, #0]
10015b68:	f7f2 fc64 	bl	10008434 <_isatty>
10015b6c:	1c43      	adds	r3, r0, #1
10015b6e:	d103      	bne.n	10015b78 <_isatty_r+0x1c>
10015b70:	6823      	ldr	r3, [r4, #0]
10015b72:	2b00      	cmp	r3, #0
10015b74:	d000      	beq.n	10015b78 <_isatty_r+0x1c>
10015b76:	602b      	str	r3, [r5, #0]
10015b78:	bd70      	pop	{r4, r5, r6, pc}
10015b7a:	46c0      	nop			; (mov r8, r8)
10015b7c:	10019b74 	.word	0x10019b74

10015b80 <_lseek_r>:
10015b80:	b570      	push	{r4, r5, r6, lr}
10015b82:	0005      	movs	r5, r0
10015b84:	0008      	movs	r0, r1
10015b86:	0011      	movs	r1, r2
10015b88:	2200      	movs	r2, #0
10015b8a:	4c06      	ldr	r4, [pc, #24]	; (10015ba4 <_lseek_r+0x24>)
10015b8c:	6022      	str	r2, [r4, #0]
10015b8e:	001a      	movs	r2, r3
10015b90:	f7f2 fc52 	bl	10008438 <_lseek>
10015b94:	1c43      	adds	r3, r0, #1
10015b96:	d103      	bne.n	10015ba0 <_lseek_r+0x20>
10015b98:	6823      	ldr	r3, [r4, #0]
10015b9a:	2b00      	cmp	r3, #0
10015b9c:	d000      	beq.n	10015ba0 <_lseek_r+0x20>
10015b9e:	602b      	str	r3, [r5, #0]
10015ba0:	bd70      	pop	{r4, r5, r6, pc}
10015ba2:	46c0      	nop			; (mov r8, r8)
10015ba4:	10019b74 	.word	0x10019b74

10015ba8 <memchr>:
10015ba8:	b2c9      	uxtb	r1, r1
10015baa:	1882      	adds	r2, r0, r2
10015bac:	4290      	cmp	r0, r2
10015bae:	d004      	beq.n	10015bba <memchr+0x12>
10015bb0:	7803      	ldrb	r3, [r0, #0]
10015bb2:	428b      	cmp	r3, r1
10015bb4:	d002      	beq.n	10015bbc <memchr+0x14>
10015bb6:	3001      	adds	r0, #1
10015bb8:	e7f8      	b.n	10015bac <memchr+0x4>
10015bba:	2000      	movs	r0, #0
10015bbc:	4770      	bx	lr
	...

10015bc0 <_read_r>:
10015bc0:	b570      	push	{r4, r5, r6, lr}
10015bc2:	0005      	movs	r5, r0
10015bc4:	0008      	movs	r0, r1
10015bc6:	0011      	movs	r1, r2
10015bc8:	2200      	movs	r2, #0
10015bca:	4c06      	ldr	r4, [pc, #24]	; (10015be4 <_read_r+0x24>)
10015bcc:	6022      	str	r2, [r4, #0]
10015bce:	001a      	movs	r2, r3
10015bd0:	f7f5 fed8 	bl	1000b984 <_read>
10015bd4:	1c43      	adds	r3, r0, #1
10015bd6:	d103      	bne.n	10015be0 <_read_r+0x20>
10015bd8:	6823      	ldr	r3, [r4, #0]
10015bda:	2b00      	cmp	r3, #0
10015bdc:	d000      	beq.n	10015be0 <_read_r+0x20>
10015bde:	602b      	str	r3, [r5, #0]
10015be0:	bd70      	pop	{r4, r5, r6, pc}
10015be2:	46c0      	nop			; (mov r8, r8)
10015be4:	10019b74 	.word	0x10019b74
10015be8:	6e6f6420 	.word	0x6e6f6420
10015bec:	00002165 	.word	0x00002165
10015bf0:	0000000d 	.word	0x0000000d
10015bf4:	3a4f2f54 	.word	0x3a4f2f54
10015bf8:	46464f20 	.word	0x46464f20
10015bfc:	00000000 	.word	0x00000000
10015c00:	736d735b 	.word	0x736d735b
10015c04:	656c625f 	.word	0x656c625f
10015c08:	776f705f 	.word	0x776f705f
10015c0c:	645f7265 	.word	0x645f7265
10015c10:	5d6e776f 	.word	0x5d6e776f
10015c14:	00000000 	.word	0x00000000
10015c18:	3a4f2f54 	.word	0x3a4f2f54
10015c1c:	30303520 	.word	0x30303520
10015c20:	736d2030 	.word	0x736d2030
10015c24:	00000000 	.word	0x00000000
10015c28:	736d735b 	.word	0x736d735b
10015c2c:	656c625f 	.word	0x656c625f
10015c30:	6961705f 	.word	0x6961705f
10015c34:	5f646572 	.word	0x5f646572
10015c38:	005d6e66 	.word	0x005d6e66
10015c3c:	736d735b 	.word	0x736d735b
10015c40:	656c625f 	.word	0x656c625f
10015c44:	7664615f 	.word	0x7664615f
10015c48:	69747265 	.word	0x69747265
10015c4c:	095d6573 	.word	0x095d6573
10015c50:	65766441 	.word	0x65766441
10015c54:	73697472 	.word	0x73697472
10015c58:	6e656d65 	.word	0x6e656d65
10015c5c:	61642074 	.word	0x61642074
10015c60:	73206174 	.word	0x73206174
10015c64:	66207465 	.word	0x66207465
10015c68:	656c6961 	.word	0x656c6961
10015c6c:	00002164 	.word	0x00002164
10015c70:	736d735b 	.word	0x736d735b
10015c74:	7265735f 	.word	0x7265735f
10015c78:	65636976 	.word	0x65636976
10015c7c:	7664615f 	.word	0x7664615f
10015c80:	69747265 	.word	0x69747265
10015c84:	095d6573 	.word	0x095d6573
10015c88:	20454c42 	.word	0x20454c42
10015c8c:	65766441 	.word	0x65766441
10015c90:	73697472 	.word	0x73697472
10015c94:	6e656d65 	.word	0x6e656d65
10015c98:	74732074 	.word	0x74732074
10015c9c:	20747261 	.word	0x20747261
10015ca0:	6c696166 	.word	0x6c696166
10015ca4:	203a6465 	.word	0x203a6465
10015ca8:	73616572 	.word	0x73616572
10015cac:	30206e6f 	.word	0x30206e6f
10015cb0:	00782578 	.word	0x00782578
10015cb4:	20642520 	.word	0x20642520
10015cb8:	454e4f47 	.word	0x454e4f47
10015cbc:	0000203f 	.word	0x0000203f
10015cc0:	3a4f2f54 	.word	0x3a4f2f54
10015cc4:	6d303220 	.word	0x6d303220
10015cc8:	00000073 	.word	0x00000073
10015ccc:	49544f4e 	.word	0x49544f4e
10015cd0:	41434946 	.word	0x41434946
10015cd4:	4e4f4954 	.word	0x4e4f4954
10015cd8:	52524520 	.word	0x52524520
10015cdc:	2121524f 	.word	0x2121524f
10015ce0:	00000000 	.word	0x00000000

10015ce4 <sms_ble_gap_cb>:
	...
10015cf0:	100085bd 00000000 100085d5 10008709     ................
	...
10015d08:	10008629 1000843d 00000000 00000000     )...=...........
	...

10015d30 <sms_ble_gatt_server_cb>:
10015d30:	10008459 100084cd 00000000 00000000     Y...............
	...
10015d58:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015d68:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10015d78:	656c6968 74657320 676e6974 20707520     hile setting up 
10015d88:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10015d98:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10015da8:	6c626f72 77206d65 656c6968 74657320     roblem while set
10015db8:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10015dc8:	65737520 75622072 6e6f7474 00000000      user button....
10015dd8:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10015de8:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
10015df8:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
10015e08:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10015e18:	5d736563 72655309 65636976 65642073     ces].Services de
10015e28:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10015e38:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
10015e48:	206d656c 6c696877 65732065 6e697474     lem while settin
10015e58:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10015e68:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10015e78:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10015e88:	7320656c 69747465 7520676e 4d492070     le setting up IM
10015e98:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10015ea8:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10015eb8:	73656369 6553095d 63697672 64207365     ices].Services d
10015ec8:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10015ed8:	73616572 30206e6f 00782578 74736564     reason 0x%x.dest
10015ee8:	25203a58 2520646c 2520646c 2f20646c     X: %ld %ld %ld /
10015ef8:	646c2520 646c2520 646c2520 00000000      %ld %ld %ld....
10015f08:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10015f18:	656e6966 7265735f 65636976 53095d73     fine_services].S
10015f28:	69767265 20736563 69666564 676e696e     ervices defining
10015f38:	69616620 2c64656c 61657220 206e6f73      failed, reason 
10015f48:	78257830 00000000 1000a9a4 1000a9b2     0x%x............
10015f58:	1000a9c0 1000a9ce 1000a9dc 1000a9ea     ................
10015f68:	1000a9f8 1000aa08 1000aa18 1000aa28     ............(...
10015f78:	1000aa38 1000aa48 1000aa58 1000aa68     8...H...X...h...
10015f88:	1000aa78 1000aa88 1000aa98 1000aaa8     x...............
10015f98:	1000aab8 1000aac8 1000aad8 1000aae8     ................
10015fa8:	1000aaf8 1000ab08 1000ab18 1000ab28     ............(...
10015fb8:	1000ab38 1000ab48 1000ab56 1000ab64     8...H...V...d...
10015fc8:	1000ab72 1000ab80 1000ab8e 1000ab9c     r...............
10015fd8:	1000abaa 1000abb8 1000abc8 1000abd8     ................
10015fe8:	1000abe8 1000abf8 1000ac08 1000ac18     ................
10015ff8:	1000ac28 1000ac38 1000ac48 1000ac58     (...8...H...X...
10016008:	1000ac68 1000ac78 1000ac88 1000ac98     h...x...........
10016018:	1000aca8 1000acb8 1000acc6 1000acd4     ................
10016028:	1000ad00 1000ad0e 1000ad1c 1000ad2a     ............*...
10016038:	1000ad38 1000ad46 1000ad54 1000ad62     8...F...T...b...
10016048:	1000ad70 1000ad7e 1000ad8c 1000ad9a     p...~...........
10016058:	1000ada8 1000adb6 1000adc4 1000add2     ................
10016068:	1000ade0 1000adee 1000adfc 1000ae0a     ................
10016078:	1000ae18 1000ae26 1000ae34 1000ae42     ....&...4...B...
10016088:	1000ae50 1000ae5e 1000ae6c 1000ae7a     P...^...l...z...
10016098:	1000ae88 1000ae96 1000aea4 1000aeb2     ................
100160a8:	1000aec0 1000aece 1000aedc 1000aeea     ................
100160b8:	1000aef8 1000af06 1000af14 1000af22     ............"...
100160c8:	1000af30 1000af3e 1000af4c 1000af5a     0...>...L...Z...
100160d8:	1000af68 1000af76 1000af84 1000af92     h...v...........
100160e8:	1000afa0 1000afae 1000afbc 1000afca     ................
100160f8:	1000afd8 1000afe6 1000b080 1000b0a8     ................
10016108:	1000b0d0 1000b0f8 1000b338 1000b128     ........8...(...
10016118:	1000b140 1000b1b8 1000b1d0 1000b158     @...........X...
10016128:	1000b170 1000b188 1000b1a0 1000b1e8     p...............
10016138:	1000b4ac 1000b4ac 1000b4ac 1000b4ac     ................
10016148:	1000b4ac 1000b4ac 1000b4ac 1000b4ac     ................
10016158:	1000b290 1000b2a8 1000b2c0 1000b34e     ............N...
10016168:	1000b218 1000b4ac 1000b4ac 1000b4ac     ................
10016178:	1000b4ac 1000b4ac 1000b4ac 1000b2d8     ................
10016188:	1000b2f0 1000b308 1000b320 1000b4ac     ........ .......
10016198:	1000b464 1000b47c 1000b4ac 1000b4ac     d...|...........
100161a8:	1000b37a 1000b390 1000b3a6 1000b3bc     z...............
100161b8:	1000b4ac 1000b4ac 1000b4ac 1000b4ac     ................
100161c8:	1000b4ac 1000b4ac 1000b4ac 1000b4ac     ................
100161d8:	1000b06c 1000b094 1000b0bc 1000b0e4     l...............
100161e8:	1000b110 1000b200 1000b230 1000b248     ........0...H...
100161f8:	1000b260 1000b278 1000b364 1000b3d2     `...x...d.......
10016208:	1000b44c 1000b494 1000bafc 1000bafe     L...............
10016218:	1000bae4 1000bae4 1000bae4 1000bafc     ................
10016228:	1000bae4 1000bae4 1000c342 1000c3b6     ........B.......
10016238:	1000c32a 1000c3bc 1000c330 1000c336     *.......0...6...
10016248:	1000c33c 34333231 00003635 efcdab00     <...123456......
10016258:	00efcdab                                ....

1001625c <ble_mgr_gatt_server_handle>:
	...
10016274:	1000ba19 1000ba7d 1000ba1d 00000000     ....}...........
10016284:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10016294:	00000000 65766441 73697472 20676e69     ....Advertising 
100162a4:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
100162b4:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
100162c4:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
100162d4:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
100162e4:	69766544 64206563 6f637369 63656e6e     Device disconnec
100162f4:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10016304:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10016314:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10016324:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10016334:	6c706d6f 64657465 63757320 73736563     ompleted success
10016344:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10016354:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10016364:	74707972 206e6f69 6f666e69 00000000     ryption info....
10016374:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10016384:	7320666f 206e6163 69766564 72206563     of scan device r
10016394:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
100163a4:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
100163b4:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
100163c4:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100163d4:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100163e4:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100163f4:	46207473 656c6961 00000064 72696150     st Failed...Pair
10016404:	20676e69 636f7270 72756465 6f632065     ing procedure co
10016414:	656c706d 20646574 63637573 66737365     mpleted successf
10016424:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10016434:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10016444:	726f7473 68742065 61702065 6e697269     store the pairin
10016454:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10016464:	4e206e6f 7320746f 74726174 00006465     on Not started..
10016474:	76616c53 65532065 69727563 52207974     Slave Security R
10016484:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10016494:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
100164a4:	71655220 74736575 41202d20 65687475      Request - Authe
100164b4:	6369746e 6f697461 6146206e 64656c69     ntication Failed
100164c4:	00000000 65746e45 68742072 61502065     ....Enter the Pa
100164d4:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100164e4:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100164f4:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10016504:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10016514:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10016524:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10016534:	206e6f28 6568746f 65442072 65636976     (on other Device
10016544:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10016554:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10016564:	74616546 20657275 20746f4e 70707573     Feature Not supp
10016574:	6574726f 00000064 65746e45 20646572     orted...Entered 
10016584:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10016594:	20676e69 6f666e69 74616d72 206e6f69     ing information 
100165a4:	7020666f 20726565 69766564 69206563     of peer device i
100165b4:	6f6e2073 76612074 616c6961 2e656c62     s not available.
100165c4:	00000000 61656c50 75206573 6961706e     ....Please unpai
100165d4:	68742072 65642065 65636976 6f726620     r the device fro
100165e4:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100165f4:	656c6962 65732029 6e697474 6d207367     bile) settings m
10016604:	20756e65 20646e61 72617473 61702074     enu and start pa
10016614:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10016624:	69747079 52206e6f 65757165 52207473     yption Request R
10016634:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10016644:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10016654:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10016664:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10016674:	09095d74 61656c50 63206573 6b636568     t]..Please check
10016684:	65687420 776f7020 61207265 6320646e      the power and c
10016694:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
100166a4:	65726177 6e6f6320 7463656e 0000726f     ware connector..
100166b4:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
100166c4:	6e206563 20656d61 20746573 6c696166     ce name set fail
100166d4:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
100166e4:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100166f4:	73736572 74656720 69616620 0064656c     ress get failed.
10016704:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10016714:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
10016724:	20656369 666e6f63 72756769 6f697461     ice configuratio
10016734:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10016744:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016754:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10016764:	72646441 20737365 6c696166 00006465     Address failed..
10016774:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10016784:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10016794:	65732065 69727563 72207974 65757165     e security reque
100167a4:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100167b4:	65746365 6f742064 65657020 65642072     ected to peer de
100167c4:	65636976 74697720 64612068 73657264     vice with addres
100167d4:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100167e4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100167f4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10016804:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10016814:	61522067 6d6f646e 64646120 73736572     g Random address
10016824:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10016834:	626d756e 6f207265 6f632066 63656e6e     number of connec
10016844:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10016854:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10016864:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10016874:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10016884:	53202d20 75746174 25203a73 00000064      - Status: %d...
10016894:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
100168a4:	73697472 6e656d65 61642074 73206174     rtisement data s
100168b4:	66207465 656c6961 00000064              et failed...

100168c0 <ble_mgr_gap_handle>:
100168c0:	1000ba15 1000bbf9 1000ba2d 1000ba55     ........-...U...
100168d0:	00000000 1000c6a5 1000baad 1000ba29     ............)...
100168e0:	1000bd99 1000bc79 1000bf99 1000bdb1     ....y...........
100168f0:	1000c0e9 1000c22d 1000bb35 1000c8e1     ....-...5.......
	...
1001690c:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
1001691c:	2055504d 696c6163 74617262 2e2e6465     MPU calibrated..
1001692c:	6962202e 76207361 65756c61 25203a73     . bias values: %
1001693c:	2520646c 2520646c 2f20646c 646c2520     ld %ld %ld / %ld
1001694c:	646c2520 646c2520 00000000 706d6f43      %ld %ld....Comp
1001695c:	20737361 20746f6e 65726568 002e2e2e     ass not here....
1001696c:	706d6f43 20737361 74696e69 696c6169     Compass initiali
1001697c:	2e64657a 63202e2e 62696c61 69746172     zed... calibrati
1001698c:	76206e6f 65756c61 25203a73 2520646c     on values: %ld %
1001699c:	2520646c 4100646c 6c656d74 726f4320     ld %ld.Atmel Cor
100169ac:	04022e70                                         p.

100169ae <CSWTCH.45>:
100169ae:	00100402                                         ...

100169b1 <CSWTCH.47>:
100169b1:	03010300 03030303 03030303 02020303              ...............

100169c0 <client_conf_uuid>:
100169c0:	29042902                                         .)

100169c2 <presentation_format_uuid>:
100169c2:	29012904                                         .)

100169c4 <user_desc_uuid>:
100169c4:	29032901                                         .)

100169c6 <server_conf_uuid>:
100169c6:	29002903                                         .)

100169c8 <extended_props_uuid>:
100169c8:	28022900                                         .)

100169ca <include_uuid>:
100169ca:	28032802                                         .(

100169cc <char_uuid>:
100169cc:	00002803 00776f70 00000000              .(..pow.....

100169d8 <TWO52>:
100169d8:	00000000 43300000 00000000 c3300000     ......0C......0.
100169e8:	10012306 1001222a 100122e8 100122c0     .#..*"..."..."..
100169f8:	100122e8 100122b4 100122e8 100122c0     ."..."..."..."..
10016a08:	1001222a 1001222a 100122b4 100122c0     *"..*"..."..."..
10016a18:	1001236c 1001236c 1001236c 100122ee     l#..l#..l#..."..
10016a28:	1001222a 1001222a 100122d4 100122be     *"..*"..."..."..
10016a38:	100122d4 100122b4 100122d4 100122be     ."..."..."..."..
10016a48:	1001222a 1001222a 100122b4 100122be     *"..*"..."..."..
10016a58:	1001236c 1001236c 1001236c 10012378     l#..l#..l#..x#..
10016a68:	10012664 100125c2 100125c2 100125c0     d&...%...%...%..
10016a78:	10012656 10012656 1001264c 100125c0     V&..V&..L&...%..
10016a88:	10012656 1001264c 10012656 100125c0     V&..L&..V&...%..
10016a98:	1001265c 1001265c 1001265c 100126e6     \&..\&..\&...&..
10016aa8:	10013414 100132e2 100133e8 100132d8     .4...2...3...2..
10016ab8:	100133e8 100133f2 100133e8 100132d8     .3...3...3...2..
10016ac8:	100132e2 100132e2 100133f2 100132d8     .2...2...3...2..
10016ad8:	100132ce 100132ce 100132ce 10013644     .2...2...2..D6..
10016ae8:	10013c5c 10013b1c 10013b1c 10013b1a     \<...;...;...;..
10016af8:	10013c34 10013c34 10013c26 10013b1a     4<..4<..&<...;..
10016b08:	10013c34 10013c26 10013c34 10013b1a     4<..&<..4<...;..
10016b18:	10013c3c 10013c3c 10013c3c 10013e3c     <<..<<..<<..<>..
10016b28:	00000043                                C...

10016b2c <_global_impure_ptr>:
10016b2c:	10016bf0                                .k..

10016b30 <__sf_fake_stdin>:
	...

10016b50 <__sf_fake_stdout>:
	...

10016b70 <__sf_fake_stderr>:
	...
10016b90:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10016ba0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10016bb0:	31300046 35343332 39383736 64636261     F.0123456789abcd
10016bc0:	00006665                                ef..

10016bc4 <_init>:
10016bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016bc6:	46c0      	nop			; (mov r8, r8)
10016bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016bca:	bc08      	pop	{r3}
10016bcc:	469e      	mov	lr, r3
10016bce:	4770      	bx	lr

10016bd0 <__init_array_start>:
10016bd0:	100080b1 	.word	0x100080b1

10016bd4 <_fini>:
10016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016bd6:	46c0      	nop			; (mov r8, r8)
10016bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016bda:	bc08      	pop	{r3}
10016bdc:	469e      	mov	lr, r3
10016bde:	4770      	bx	lr

10016be0 <__fini_array_start>:
10016be0:	10008089 	.word	0x10008089
