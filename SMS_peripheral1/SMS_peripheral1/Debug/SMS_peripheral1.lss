
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001132c  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  1001932c  1001932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002efc  100193a0  100193a0  000193a0  2**2
                  ALLOC
  3 .stack        00000804  1001c29c  1001c29c  000193a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000193a0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004be94  00000000  00000000  0001947c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000530d  00000000  00000000  00065310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a121  00000000  00000000  0006a61d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  0007473e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  000752be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c34a  00000000  00000000  00075dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001611a  00000000  00000000  00082148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014192e  00000000  00000000  00098262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d54  00000000  00000000  001d9b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001932c 	.word	0x1001932c
10008068:	1001932c 	.word	0x1001932c
1000806c:	100193a0 	.word	0x100193a0
10008070:	1001c29c 	.word	0x1001c29c
10008074:	100193a0 	.word	0x100193a0
10008078:	10019330 	.word	0x10019330
1000807c:	100193a4 	.word	0x100193a4
10008080:	10016651 	.word	0x10016651
10008084:	1000ec65 	.word	0x1000ec65

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100193a0 	.word	0x100193a0
100080a8:	00000000 	.word	0x00000000
100080ac:	1001932c 	.word	0x1001932c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100193a4 	.word	0x100193a4
100080dc:	1001932c 	.word	0x1001932c
100080e0:	1001932c 	.word	0x1001932c
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	100193bc 	.word	0x100193bc

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	100193bc 	.word	0x100193bc

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	100193bc 	.word	0x100193bc

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000c68d 	.word	0x1000c68d

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000c225 	.word	0x1000c225
10008388:	40003400 	.word	0x40003400
1000838c:	1000b7ad 	.word	0x1000b7ad

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	100193c0 	.word	0x100193c0
1000841c:	1001caa0 	.word	0x1001caa0

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <madgwick_quaternion_update>:
// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
void madgwick_quaternion_update(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
1000843c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000843e:	465f      	mov	r7, fp
10008440:	4656      	mov	r6, sl
10008442:	464d      	mov	r5, r9
10008444:	4644      	mov	r4, r8
10008446:	b4f0      	push	{r4, r5, r6, r7}
10008448:	b09f      	sub	sp, #124	; 0x7c
1000844a:	1c0e      	adds	r6, r1, #0
1000844c:	9202      	str	r2, [sp, #8]
1000844e:	930c      	str	r3, [sp, #48]	; 0x30
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
10008450:	4bfd      	ldr	r3, [pc, #1012]	; (10008848 <madgwick_quaternion_update+0x40c>)
10008452:	6819      	ldr	r1, [r3, #0]
10008454:	9105      	str	r1, [sp, #20]
	float _2q2 = 2.0 * q2;
10008456:	4bfd      	ldr	r3, [pc, #1012]	; (1000884c <madgwick_quaternion_update+0x410>)
10008458:	6819      	ldr	r1, [r3, #0]
1000845a:	9104      	str	r1, [sp, #16]
	float _2q3 = 2.0 * q3;
1000845c:	4bfc      	ldr	r3, [pc, #1008]	; (10008850 <madgwick_quaternion_update+0x414>)
1000845e:	6819      	ldr	r1, [r3, #0]
10008460:	9100      	str	r1, [sp, #0]
	float _2q4 = 2.0 * q4;
10008462:	4bfc      	ldr	r3, [pc, #1008]	; (10008854 <madgwick_quaternion_update+0x418>)
10008464:	6819      	ldr	r1, [r3, #0]
10008466:	9103      	str	r1, [sp, #12]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
10008468:	4cfb      	ldr	r4, [pc, #1004]	; (10008858 <madgwick_quaternion_update+0x41c>)
1000846a:	1c01      	adds	r1, r0, #0
1000846c:	9006      	str	r0, [sp, #24]
1000846e:	47a0      	blx	r4
10008470:	1c05      	adds	r5, r0, #0
10008472:	1c31      	adds	r1, r6, #0
10008474:	9607      	str	r6, [sp, #28]
10008476:	1c30      	adds	r0, r6, #0
10008478:	47a0      	blx	r4
1000847a:	1c06      	adds	r6, r0, #0
1000847c:	4ff7      	ldr	r7, [pc, #988]	; (1000885c <madgwick_quaternion_update+0x420>)
1000847e:	1c01      	adds	r1, r0, #0
10008480:	1c28      	adds	r0, r5, #0
10008482:	47b8      	blx	r7
10008484:	9008      	str	r0, [sp, #32]
10008486:	9b02      	ldr	r3, [sp, #8]
10008488:	1c19      	adds	r1, r3, #0
1000848a:	1c18      	adds	r0, r3, #0
1000848c:	47a0      	blx	r4
1000848e:	9009      	str	r0, [sp, #36]	; 0x24
10008490:	1c31      	adds	r1, r6, #0
10008492:	1c28      	adds	r0, r5, #0
10008494:	47b8      	blx	r7
10008496:	1c05      	adds	r5, r0, #0
10008498:	9909      	ldr	r1, [sp, #36]	; 0x24
1000849a:	1c28      	adds	r0, r5, #0
1000849c:	47b8      	blx	r7
1000849e:	4bf0      	ldr	r3, [pc, #960]	; (10008860 <madgwick_quaternion_update+0x424>)
100084a0:	4798      	blx	r3
100084a2:	1c04      	adds	r4, r0, #0
	if (norm == 0.0) return; // handle NaN
100084a4:	2100      	movs	r1, #0
100084a6:	4bef      	ldr	r3, [pc, #956]	; (10008864 <madgwick_quaternion_update+0x428>)
100084a8:	4798      	blx	r3
100084aa:	2800      	cmp	r0, #0
100084ac:	d000      	beq.n	100084b0 <madgwick_quaternion_update+0x74>
100084ae:	e3f2      	b.n	10008c96 <madgwick_quaternion_update+0x85a>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
100084b0:	4ee9      	ldr	r6, [pc, #932]	; (10008858 <madgwick_quaternion_update+0x41c>)
100084b2:	992a      	ldr	r1, [sp, #168]	; 0xa8
100084b4:	1c08      	adds	r0, r1, #0
100084b6:	47b0      	blx	r6
100084b8:	1c05      	adds	r5, r0, #0
100084ba:	992b      	ldr	r1, [sp, #172]	; 0xac
100084bc:	1c08      	adds	r0, r1, #0
100084be:	47b0      	blx	r6
100084c0:	4fe6      	ldr	r7, [pc, #920]	; (1000885c <madgwick_quaternion_update+0x420>)
100084c2:	9008      	str	r0, [sp, #32]
100084c4:	1c01      	adds	r1, r0, #0
100084c6:	1c28      	adds	r0, r5, #0
100084c8:	47b8      	blx	r7
100084ca:	9009      	str	r0, [sp, #36]	; 0x24
100084cc:	992c      	ldr	r1, [sp, #176]	; 0xb0
100084ce:	1c08      	adds	r0, r1, #0
100084d0:	47b0      	blx	r6
100084d2:	900a      	str	r0, [sp, #40]	; 0x28
100084d4:	9908      	ldr	r1, [sp, #32]
100084d6:	1c28      	adds	r0, r5, #0
100084d8:	47b8      	blx	r7
100084da:	1c05      	adds	r5, r0, #0
100084dc:	990a      	ldr	r1, [sp, #40]	; 0x28
100084de:	1c28      	adds	r0, r5, #0
100084e0:	47b8      	blx	r7
100084e2:	4bdf      	ldr	r3, [pc, #892]	; (10008860 <madgwick_quaternion_update+0x424>)
100084e4:	4798      	blx	r3
100084e6:	9008      	str	r0, [sp, #32]
	if (norm == 0.0f) return; // handle NaN
100084e8:	2100      	movs	r1, #0
100084ea:	4bde      	ldr	r3, [pc, #888]	; (10008864 <madgwick_quaternion_update+0x428>)
100084ec:	4798      	blx	r3
100084ee:	2800      	cmp	r0, #0
100084f0:	d000      	beq.n	100084f4 <madgwick_quaternion_update+0xb8>
100084f2:	e3d0      	b.n	10008c96 <madgwick_quaternion_update+0x85a>
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
100084f4:	4ed9      	ldr	r6, [pc, #868]	; (1000885c <madgwick_quaternion_update+0x420>)
100084f6:	9b05      	ldr	r3, [sp, #20]
100084f8:	1c19      	adds	r1, r3, #0
100084fa:	1c18      	adds	r0, r3, #0
100084fc:	47b0      	blx	r6
100084fe:	900e      	str	r0, [sp, #56]	; 0x38
	float _2q2 = 2.0 * q2;
10008500:	9a04      	ldr	r2, [sp, #16]
10008502:	1c11      	adds	r1, r2, #0
10008504:	1c10      	adds	r0, r2, #0
10008506:	47b0      	blx	r6
10008508:	9010      	str	r0, [sp, #64]	; 0x40
	float _2q3 = 2.0 * q3;
1000850a:	9b00      	ldr	r3, [sp, #0]
1000850c:	1c19      	adds	r1, r3, #0
1000850e:	1c18      	adds	r0, r3, #0
10008510:	47b0      	blx	r6
10008512:	9011      	str	r0, [sp, #68]	; 0x44
	float _2q4 = 2.0 * q4;
10008514:	9d03      	ldr	r5, [sp, #12]
10008516:	1c29      	adds	r1, r5, #0
10008518:	1c28      	adds	r0, r5, #0
1000851a:	47b0      	blx	r6
1000851c:	9019      	str	r0, [sp, #100]	; 0x64
	float _2q1q3 = 2.0f * q1 * q3;
	float _2q3q4 = 2.0f * q3 * q4;
	float q1q1 = q1 * q1;
1000851e:	4fce      	ldr	r7, [pc, #824]	; (10008858 <madgwick_quaternion_update+0x41c>)
10008520:	9b05      	ldr	r3, [sp, #20]
10008522:	1c19      	adds	r1, r3, #0
10008524:	1c18      	adds	r0, r3, #0
10008526:	47b8      	blx	r7
10008528:	9015      	str	r0, [sp, #84]	; 0x54
	float q1q2 = q1 * q2;
1000852a:	9904      	ldr	r1, [sp, #16]
1000852c:	9805      	ldr	r0, [sp, #20]
1000852e:	47b8      	blx	r7
10008530:	9017      	str	r0, [sp, #92]	; 0x5c
	float q1q3 = q1 * q3;
10008532:	9900      	ldr	r1, [sp, #0]
10008534:	9805      	ldr	r0, [sp, #20]
10008536:	47b8      	blx	r7
10008538:	901a      	str	r0, [sp, #104]	; 0x68
	float q1q4 = q1 * q4;
	float q2q2 = q2 * q2;
1000853a:	9a04      	ldr	r2, [sp, #16]
1000853c:	1c11      	adds	r1, r2, #0
1000853e:	1c10      	adds	r0, r2, #0
10008540:	47b8      	blx	r7
10008542:	9012      	str	r0, [sp, #72]	; 0x48
	float q2q3 = q2 * q3;
	float q2q4 = q2 * q4;
10008544:	1c29      	adds	r1, r5, #0
10008546:	9804      	ldr	r0, [sp, #16]
10008548:	47b8      	blx	r7
1000854a:	9013      	str	r0, [sp, #76]	; 0x4c
	float q3q3 = q3 * q3;
1000854c:	9b00      	ldr	r3, [sp, #0]
1000854e:	1c19      	adds	r1, r3, #0
10008550:	1c18      	adds	r0, r3, #0
10008552:	47b8      	blx	r7
10008554:	900f      	str	r0, [sp, #60]	; 0x3c
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;
10008556:	1c29      	adds	r1, r5, #0
10008558:	9503      	str	r5, [sp, #12]
1000855a:	1c28      	adds	r0, r5, #0
1000855c:	47b8      	blx	r7
1000855e:	9014      	str	r0, [sp, #80]	; 0x50

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
	if (norm == 0.0) return; // handle NaN
	norm = 1.0f/norm;
10008560:	4dc1      	ldr	r5, [pc, #772]	; (10008868 <madgwick_quaternion_update+0x42c>)
10008562:	1c21      	adds	r1, r4, #0
10008564:	20fe      	movs	r0, #254	; 0xfe
10008566:	0580      	lsls	r0, r0, #22
10008568:	47a8      	blx	r5
1000856a:	9018      	str	r0, [sp, #96]	; 0x60
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f/norm;
1000856c:	9908      	ldr	r1, [sp, #32]
1000856e:	20fe      	movs	r0, #254	; 0xfe
10008570:	0580      	lsls	r0, r0, #22
10008572:	47a8      	blx	r5
10008574:	1c04      	adds	r4, r0, #0
	mx *= norm;
10008576:	1c01      	adds	r1, r0, #0
10008578:	982a      	ldr	r0, [sp, #168]	; 0xa8
1000857a:	47b8      	blx	r7
1000857c:	9009      	str	r0, [sp, #36]	; 0x24
	my *= norm;
1000857e:	1c21      	adds	r1, r4, #0
10008580:	982b      	ldr	r0, [sp, #172]	; 0xac
10008582:	47b8      	blx	r7
10008584:	1c05      	adds	r5, r0, #0
	mz *= norm;
10008586:	1c21      	adds	r1, r4, #0
10008588:	982c      	ldr	r0, [sp, #176]	; 0xb0
1000858a:	47b8      	blx	r7
1000858c:	1c04      	adds	r4, r0, #0

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
1000858e:	9909      	ldr	r1, [sp, #36]	; 0x24
10008590:	980e      	ldr	r0, [sp, #56]	; 0x38
10008592:	47b8      	blx	r7
10008594:	9016      	str	r0, [sp, #88]	; 0x58
	_2q1my = 2.0f * q1 * my;
10008596:	950a      	str	r5, [sp, #40]	; 0x28
10008598:	1c29      	adds	r1, r5, #0
1000859a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1000859c:	1c28      	adds	r0, r5, #0
1000859e:	47b8      	blx	r7
100085a0:	901b      	str	r0, [sp, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
100085a2:	940d      	str	r4, [sp, #52]	; 0x34
100085a4:	1c21      	adds	r1, r4, #0
100085a6:	950e      	str	r5, [sp, #56]	; 0x38
100085a8:	1c28      	adds	r0, r5, #0
100085aa:	47b8      	blx	r7
100085ac:	901c      	str	r0, [sp, #112]	; 0x70
	_2q2mx = 2.0f * q2 * mx;
100085ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
100085b0:	1c21      	adds	r1, r4, #0
100085b2:	9810      	ldr	r0, [sp, #64]	; 0x40
100085b4:	47b8      	blx	r7
100085b6:	901d      	str	r0, [sp, #116]	; 0x74
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
100085b8:	9409      	str	r4, [sp, #36]	; 0x24
100085ba:	1c21      	adds	r1, r4, #0
100085bc:	9815      	ldr	r0, [sp, #84]	; 0x54
100085be:	47b8      	blx	r7
100085c0:	1c04      	adds	r4, r0, #0
100085c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
100085c4:	9803      	ldr	r0, [sp, #12]
100085c6:	47b8      	blx	r7
100085c8:	1c01      	adds	r1, r0, #0
100085ca:	4da8      	ldr	r5, [pc, #672]	; (1000886c <madgwick_quaternion_update+0x430>)
100085cc:	1c20      	adds	r0, r4, #0
100085ce:	47a8      	blx	r5
100085d0:	1c04      	adds	r4, r0, #0
100085d2:	991c      	ldr	r1, [sp, #112]	; 0x70
100085d4:	9800      	ldr	r0, [sp, #0]
100085d6:	47b8      	blx	r7
100085d8:	1c01      	adds	r1, r0, #0
100085da:	1c20      	adds	r0, r4, #0
100085dc:	47b0      	blx	r6
100085de:	1c04      	adds	r4, r0, #0
100085e0:	9909      	ldr	r1, [sp, #36]	; 0x24
100085e2:	9812      	ldr	r0, [sp, #72]	; 0x48
100085e4:	47b8      	blx	r7
100085e6:	1c01      	adds	r1, r0, #0
100085e8:	1c20      	adds	r0, r4, #0
100085ea:	47b0      	blx	r6
100085ec:	1c04      	adds	r4, r0, #0
100085ee:	990a      	ldr	r1, [sp, #40]	; 0x28
100085f0:	9810      	ldr	r0, [sp, #64]	; 0x40
100085f2:	47b8      	blx	r7
100085f4:	9900      	ldr	r1, [sp, #0]
100085f6:	47b8      	blx	r7
100085f8:	1c01      	adds	r1, r0, #0
100085fa:	1c20      	adds	r0, r4, #0
100085fc:	47b0      	blx	r6
100085fe:	1c04      	adds	r4, r0, #0
10008600:	990d      	ldr	r1, [sp, #52]	; 0x34
10008602:	9810      	ldr	r0, [sp, #64]	; 0x40
10008604:	47b8      	blx	r7
10008606:	9903      	ldr	r1, [sp, #12]
10008608:	47b8      	blx	r7
1000860a:	1c01      	adds	r1, r0, #0
1000860c:	1c20      	adds	r0, r4, #0
1000860e:	47b0      	blx	r6
10008610:	1c04      	adds	r4, r0, #0
10008612:	9909      	ldr	r1, [sp, #36]	; 0x24
10008614:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008616:	47b8      	blx	r7
10008618:	1c01      	adds	r1, r0, #0
1000861a:	1c20      	adds	r0, r4, #0
1000861c:	47a8      	blx	r5
1000861e:	1c04      	adds	r4, r0, #0
10008620:	9909      	ldr	r1, [sp, #36]	; 0x24
10008622:	9814      	ldr	r0, [sp, #80]	; 0x50
10008624:	47b8      	blx	r7
10008626:	1c01      	adds	r1, r0, #0
10008628:	1c20      	adds	r0, r4, #0
1000862a:	47a8      	blx	r5
1000862c:	9008      	str	r0, [sp, #32]
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
1000862e:	9916      	ldr	r1, [sp, #88]	; 0x58
10008630:	9803      	ldr	r0, [sp, #12]
10008632:	47b8      	blx	r7
10008634:	1c04      	adds	r4, r0, #0
10008636:	990a      	ldr	r1, [sp, #40]	; 0x28
10008638:	9815      	ldr	r0, [sp, #84]	; 0x54
1000863a:	47b8      	blx	r7
1000863c:	1c01      	adds	r1, r0, #0
1000863e:	1c20      	adds	r0, r4, #0
10008640:	47b0      	blx	r6
10008642:	1c04      	adds	r4, r0, #0
10008644:	991c      	ldr	r1, [sp, #112]	; 0x70
10008646:	9804      	ldr	r0, [sp, #16]
10008648:	47b8      	blx	r7
1000864a:	1c01      	adds	r1, r0, #0
1000864c:	1c20      	adds	r0, r4, #0
1000864e:	47a8      	blx	r5
10008650:	1c04      	adds	r4, r0, #0
10008652:	991d      	ldr	r1, [sp, #116]	; 0x74
10008654:	9800      	ldr	r0, [sp, #0]
10008656:	47b8      	blx	r7
10008658:	1c01      	adds	r1, r0, #0
1000865a:	1c20      	adds	r0, r4, #0
1000865c:	47b0      	blx	r6
1000865e:	1c04      	adds	r4, r0, #0
10008660:	990a      	ldr	r1, [sp, #40]	; 0x28
10008662:	9812      	ldr	r0, [sp, #72]	; 0x48
10008664:	47b8      	blx	r7
10008666:	1c01      	adds	r1, r0, #0
10008668:	1c20      	adds	r0, r4, #0
1000866a:	47a8      	blx	r5
1000866c:	1c04      	adds	r4, r0, #0
1000866e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008670:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008672:	47b8      	blx	r7
10008674:	1c01      	adds	r1, r0, #0
10008676:	1c20      	adds	r0, r4, #0
10008678:	47b0      	blx	r6
1000867a:	1c04      	adds	r4, r0, #0
1000867c:	990d      	ldr	r1, [sp, #52]	; 0x34
1000867e:	9811      	ldr	r0, [sp, #68]	; 0x44
10008680:	47b8      	blx	r7
10008682:	9903      	ldr	r1, [sp, #12]
10008684:	47b8      	blx	r7
10008686:	1c01      	adds	r1, r0, #0
10008688:	1c20      	adds	r0, r4, #0
1000868a:	47b0      	blx	r6
1000868c:	1c04      	adds	r4, r0, #0
1000868e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008690:	9814      	ldr	r0, [sp, #80]	; 0x50
10008692:	47b8      	blx	r7
10008694:	1c01      	adds	r1, r0, #0
10008696:	1c20      	adds	r0, r4, #0
10008698:	47a8      	blx	r5
1000869a:	1c04      	adds	r4, r0, #0
	_2bx = sqrtf(hx * hx + hy * hy);
1000869c:	9a08      	ldr	r2, [sp, #32]
1000869e:	1c11      	adds	r1, r2, #0
100086a0:	1c10      	adds	r0, r2, #0
100086a2:	47b8      	blx	r7
100086a4:	901c      	str	r0, [sp, #112]	; 0x70
100086a6:	9a08      	ldr	r2, [sp, #32]
100086a8:	1c11      	adds	r1, r2, #0
100086aa:	1c10      	adds	r0, r2, #0
100086ac:	47b8      	blx	r7
100086ae:	9008      	str	r0, [sp, #32]
100086b0:	1c21      	adds	r1, r4, #0
100086b2:	1c20      	adds	r0, r4, #0
100086b4:	47b8      	blx	r7
100086b6:	1c01      	adds	r1, r0, #0
100086b8:	9808      	ldr	r0, [sp, #32]
100086ba:	47b0      	blx	r6
100086bc:	4b68      	ldr	r3, [pc, #416]	; (10008860 <madgwick_quaternion_update+0x424>)
100086be:	4798      	blx	r3
100086c0:	9008      	str	r0, [sp, #32]
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
100086c2:	9c16      	ldr	r4, [sp, #88]	; 0x58
100086c4:	46a0      	mov	r8, r4
100086c6:	2480      	movs	r4, #128	; 0x80
100086c8:	0624      	lsls	r4, r4, #24
100086ca:	46a4      	mov	ip, r4
100086cc:	44e0      	add	r8, ip
100086ce:	4640      	mov	r0, r8
100086d0:	9900      	ldr	r1, [sp, #0]
100086d2:	47b8      	blx	r7
100086d4:	1c04      	adds	r4, r0, #0
100086d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
100086d8:	9804      	ldr	r0, [sp, #16]
100086da:	47b8      	blx	r7
100086dc:	1c01      	adds	r1, r0, #0
100086de:	1c20      	adds	r0, r4, #0
100086e0:	47b0      	blx	r6
100086e2:	1c04      	adds	r4, r0, #0
100086e4:	990d      	ldr	r1, [sp, #52]	; 0x34
100086e6:	9815      	ldr	r0, [sp, #84]	; 0x54
100086e8:	47b8      	blx	r7
100086ea:	1c01      	adds	r1, r0, #0
100086ec:	1c20      	adds	r0, r4, #0
100086ee:	47b0      	blx	r6
100086f0:	1c04      	adds	r4, r0, #0
100086f2:	991d      	ldr	r1, [sp, #116]	; 0x74
100086f4:	9803      	ldr	r0, [sp, #12]
100086f6:	47b8      	blx	r7
100086f8:	1c01      	adds	r1, r0, #0
100086fa:	1c20      	adds	r0, r4, #0
100086fc:	47b0      	blx	r6
100086fe:	1c04      	adds	r4, r0, #0
10008700:	990d      	ldr	r1, [sp, #52]	; 0x34
10008702:	9812      	ldr	r0, [sp, #72]	; 0x48
10008704:	47b8      	blx	r7
10008706:	1c01      	adds	r1, r0, #0
10008708:	1c20      	adds	r0, r4, #0
1000870a:	47a8      	blx	r5
1000870c:	1c04      	adds	r4, r0, #0
1000870e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008710:	9811      	ldr	r0, [sp, #68]	; 0x44
10008712:	47b8      	blx	r7
10008714:	9903      	ldr	r1, [sp, #12]
10008716:	47b8      	blx	r7
10008718:	1c01      	adds	r1, r0, #0
1000871a:	1c20      	adds	r0, r4, #0
1000871c:	47b0      	blx	r6
1000871e:	1c04      	adds	r4, r0, #0
10008720:	990d      	ldr	r1, [sp, #52]	; 0x34
10008722:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008724:	47b8      	blx	r7
10008726:	1c01      	adds	r1, r0, #0
10008728:	1c20      	adds	r0, r4, #0
1000872a:	47a8      	blx	r5
1000872c:	1c04      	adds	r4, r0, #0
1000872e:	990d      	ldr	r1, [sp, #52]	; 0x34
10008730:	9814      	ldr	r0, [sp, #80]	; 0x50
10008732:	47b8      	blx	r7
10008734:	1c01      	adds	r1, r0, #0
10008736:	1c20      	adds	r0, r4, #0
10008738:	47b0      	blx	r6
1000873a:	1c04      	adds	r4, r0, #0
	_4bx = 2.0f * _2bx;
	_4bz = 2.0f * _2bz;
1000873c:	1c01      	adds	r1, r0, #0
1000873e:	47b0      	blx	r6
10008740:	901b      	str	r0, [sp, #108]	; 0x6c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
10008742:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008744:	1c19      	adds	r1, r3, #0
10008746:	1c18      	adds	r0, r3, #0
10008748:	47b0      	blx	r6
1000874a:	9015      	str	r0, [sp, #84]	; 0x54
1000874c:	9900      	ldr	r1, [sp, #0]
1000874e:	980e      	ldr	r0, [sp, #56]	; 0x38
10008750:	47b8      	blx	r7
10008752:	1c01      	adds	r1, r0, #0
10008754:	9815      	ldr	r0, [sp, #84]	; 0x54
10008756:	47a8      	blx	r5
10008758:	9015      	str	r0, [sp, #84]	; 0x54
1000875a:	9918      	ldr	r1, [sp, #96]	; 0x60
1000875c:	9806      	ldr	r0, [sp, #24]
1000875e:	47b8      	blx	r7
10008760:	1c01      	adds	r1, r0, #0
10008762:	9815      	ldr	r0, [sp, #84]	; 0x54
10008764:	47a8      	blx	r5
10008766:	9015      	str	r0, [sp, #84]	; 0x54
10008768:	9903      	ldr	r1, [sp, #12]
1000876a:	9811      	ldr	r0, [sp, #68]	; 0x44
1000876c:	47b8      	blx	r7
1000876e:	9006      	str	r0, [sp, #24]
10008770:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10008772:	1c11      	adds	r1, r2, #0
10008774:	1c10      	adds	r0, r2, #0
10008776:	47b0      	blx	r6
10008778:	1c01      	adds	r1, r0, #0
1000877a:	9806      	ldr	r0, [sp, #24]
1000877c:	47b0      	blx	r6
1000877e:	9006      	str	r0, [sp, #24]
10008780:	9918      	ldr	r1, [sp, #96]	; 0x60
10008782:	9807      	ldr	r0, [sp, #28]
10008784:	47b8      	blx	r7
10008786:	1c01      	adds	r1, r0, #0
10008788:	9806      	ldr	r0, [sp, #24]
1000878a:	47a8      	blx	r5
1000878c:	9016      	str	r0, [sp, #88]	; 0x58
1000878e:	1c21      	adds	r1, r4, #0
10008790:	9800      	ldr	r0, [sp, #0]
10008792:	47b8      	blx	r7
10008794:	901c      	str	r0, [sp, #112]	; 0x70
10008796:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008798:	20fc      	movs	r0, #252	; 0xfc
1000879a:	0580      	lsls	r0, r0, #22
1000879c:	47a8      	blx	r5
1000879e:	9914      	ldr	r1, [sp, #80]	; 0x50
100087a0:	47a8      	blx	r5
100087a2:	9908      	ldr	r1, [sp, #32]
100087a4:	47b8      	blx	r7
100087a6:	9006      	str	r0, [sp, #24]
100087a8:	991a      	ldr	r1, [sp, #104]	; 0x68
100087aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
100087ac:	47a8      	blx	r5
100087ae:	1c21      	adds	r1, r4, #0
100087b0:	47b8      	blx	r7
100087b2:	1c01      	adds	r1, r0, #0
100087b4:	9806      	ldr	r0, [sp, #24]
100087b6:	47b0      	blx	r6
100087b8:	9909      	ldr	r1, [sp, #36]	; 0x24
100087ba:	47a8      	blx	r5
100087bc:	9009      	str	r0, [sp, #36]	; 0x24
100087be:	9b08      	ldr	r3, [sp, #32]
100087c0:	2280      	movs	r2, #128	; 0x80
100087c2:	0612      	lsls	r2, r2, #24
100087c4:	4694      	mov	ip, r2
100087c6:	4463      	add	r3, ip
100087c8:	9314      	str	r3, [sp, #80]	; 0x50
100087ca:	1c21      	adds	r1, r4, #0
100087cc:	9804      	ldr	r0, [sp, #16]
100087ce:	47b8      	blx	r7
100087d0:	901d      	str	r0, [sp, #116]	; 0x74
100087d2:	9900      	ldr	r1, [sp, #0]
100087d4:	9804      	ldr	r0, [sp, #16]
100087d6:	47b8      	blx	r7
100087d8:	9006      	str	r0, [sp, #24]
100087da:	9903      	ldr	r1, [sp, #12]
100087dc:	9805      	ldr	r0, [sp, #20]
100087de:	47b8      	blx	r7
100087e0:	1c01      	adds	r1, r0, #0
100087e2:	9806      	ldr	r0, [sp, #24]
100087e4:	47a8      	blx	r5
100087e6:	9908      	ldr	r1, [sp, #32]
100087e8:	47b8      	blx	r7
100087ea:	9006      	str	r0, [sp, #24]
100087ec:	9903      	ldr	r1, [sp, #12]
100087ee:	9800      	ldr	r0, [sp, #0]
100087f0:	47b8      	blx	r7
100087f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
100087f4:	47b0      	blx	r6
100087f6:	1c21      	adds	r1, r4, #0
100087f8:	47b8      	blx	r7
100087fa:	1c01      	adds	r1, r0, #0
100087fc:	9806      	ldr	r0, [sp, #24]
100087fe:	47b0      	blx	r6
10008800:	990a      	ldr	r1, [sp, #40]	; 0x28
10008802:	47a8      	blx	r5
10008804:	900a      	str	r0, [sp, #40]	; 0x28
10008806:	9908      	ldr	r1, [sp, #32]
10008808:	9800      	ldr	r0, [sp, #0]
1000880a:	47b8      	blx	r7
1000880c:	9007      	str	r0, [sp, #28]
1000880e:	9912      	ldr	r1, [sp, #72]	; 0x48
10008810:	20fc      	movs	r0, #252	; 0xfc
10008812:	0580      	lsls	r0, r0, #22
10008814:	47a8      	blx	r5
10008816:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008818:	47a8      	blx	r5
1000881a:	1c21      	adds	r1, r4, #0
1000881c:	47b8      	blx	r7
1000881e:	9006      	str	r0, [sp, #24]
10008820:	9913      	ldr	r1, [sp, #76]	; 0x4c
10008822:	981a      	ldr	r0, [sp, #104]	; 0x68
10008824:	47b0      	blx	r6
10008826:	9908      	ldr	r1, [sp, #32]
10008828:	47b8      	blx	r7
1000882a:	1c01      	adds	r1, r0, #0
1000882c:	9806      	ldr	r0, [sp, #24]
1000882e:	47b0      	blx	r6
10008830:	990d      	ldr	r1, [sp, #52]	; 0x34
10008832:	47a8      	blx	r5
10008834:	900d      	str	r0, [sp, #52]	; 0x34
10008836:	9911      	ldr	r1, [sp, #68]	; 0x44
10008838:	2380      	movs	r3, #128	; 0x80
1000883a:	061b      	lsls	r3, r3, #24
1000883c:	469c      	mov	ip, r3
1000883e:	4461      	add	r1, ip
10008840:	0008      	movs	r0, r1
10008842:	9915      	ldr	r1, [sp, #84]	; 0x54
10008844:	e014      	b.n	10008870 <madgwick_quaternion_update+0x434>
10008846:	46c0      	nop			; (mov r8, r8)
10008848:	1001932c 	.word	0x1001932c
1000884c:	100193c4 	.word	0x100193c4
10008850:	100193c8 	.word	0x100193c8
10008854:	100193cc 	.word	0x100193cc
10008858:	100141b9 	.word	0x100141b9
1000885c:	10013b39 	.word	0x10013b39
10008860:	1001266d 	.word	0x1001266d
10008864:	10013a19 	.word	0x10013a19
10008868:	10013e25 	.word	0x10013e25
1000886c:	100143e1 	.word	0x100143e1
10008870:	47b8      	blx	r7
10008872:	9006      	str	r0, [sp, #24]
10008874:	9916      	ldr	r1, [sp, #88]	; 0x58
10008876:	9810      	ldr	r0, [sp, #64]	; 0x40
10008878:	47b8      	blx	r7
1000887a:	1c01      	adds	r1, r0, #0
1000887c:	9806      	ldr	r0, [sp, #24]
1000887e:	47b0      	blx	r6
10008880:	9006      	str	r0, [sp, #24]
10008882:	9909      	ldr	r1, [sp, #36]	; 0x24
10008884:	981c      	ldr	r0, [sp, #112]	; 0x70
10008886:	47b8      	blx	r7
10008888:	1c01      	adds	r1, r0, #0
1000888a:	9806      	ldr	r0, [sp, #24]
1000888c:	47a8      	blx	r5
1000888e:	9006      	str	r0, [sp, #24]
10008890:	9914      	ldr	r1, [sp, #80]	; 0x50
10008892:	9803      	ldr	r0, [sp, #12]
10008894:	47b8      	blx	r7
10008896:	991d      	ldr	r1, [sp, #116]	; 0x74
10008898:	47b0      	blx	r6
1000889a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000889c:	47b8      	blx	r7
1000889e:	1c01      	adds	r1, r0, #0
100088a0:	9806      	ldr	r0, [sp, #24]
100088a2:	47b0      	blx	r6
100088a4:	9006      	str	r0, [sp, #24]
100088a6:	990d      	ldr	r1, [sp, #52]	; 0x34
100088a8:	9807      	ldr	r0, [sp, #28]
100088aa:	47b8      	blx	r7
100088ac:	1c01      	adds	r1, r0, #0
100088ae:	9806      	ldr	r0, [sp, #24]
100088b0:	47b0      	blx	r6
100088b2:	9006      	str	r0, [sp, #24]
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
100088b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
100088b6:	1c11      	adds	r1, r2, #0
100088b8:	1c10      	adds	r0, r2, #0
100088ba:	47b0      	blx	r6
100088bc:	1c01      	adds	r1, r0, #0
100088be:	20fe      	movs	r0, #254	; 0xfe
100088c0:	0580      	lsls	r0, r0, #22
100088c2:	47a8      	blx	r5
100088c4:	9012      	str	r0, [sp, #72]	; 0x48
100088c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100088c8:	1c19      	adds	r1, r3, #0
100088ca:	1c18      	adds	r0, r3, #0
100088cc:	47b0      	blx	r6
100088ce:	1c01      	adds	r1, r0, #0
100088d0:	9812      	ldr	r0, [sp, #72]	; 0x48
100088d2:	47a8      	blx	r5
100088d4:	900f      	str	r0, [sp, #60]	; 0x3c
100088d6:	9918      	ldr	r1, [sp, #96]	; 0x60
100088d8:	9802      	ldr	r0, [sp, #8]
100088da:	47b8      	blx	r7
100088dc:	1c01      	adds	r1, r0, #0
100088de:	980f      	ldr	r0, [sp, #60]	; 0x3c
100088e0:	47a8      	blx	r5
100088e2:	900f      	str	r0, [sp, #60]	; 0x3c
100088e4:	1c21      	adds	r1, r4, #0
100088e6:	9803      	ldr	r0, [sp, #12]
100088e8:	47b8      	blx	r7
100088ea:	9012      	str	r0, [sp, #72]	; 0x48
100088ec:	1c21      	adds	r1, r4, #0
100088ee:	9805      	ldr	r0, [sp, #20]
100088f0:	47b8      	blx	r7
100088f2:	9013      	str	r0, [sp, #76]	; 0x4c
100088f4:	9915      	ldr	r1, [sp, #84]	; 0x54
100088f6:	9819      	ldr	r0, [sp, #100]	; 0x64
100088f8:	47b8      	blx	r7
100088fa:	1c04      	adds	r4, r0, #0
100088fc:	9916      	ldr	r1, [sp, #88]	; 0x58
100088fe:	980e      	ldr	r0, [sp, #56]	; 0x38
10008900:	47b8      	blx	r7
10008902:	1c01      	adds	r1, r0, #0
10008904:	1c20      	adds	r0, r4, #0
10008906:	47b0      	blx	r6
10008908:	1c04      	adds	r4, r0, #0
1000890a:	2181      	movs	r1, #129	; 0x81
1000890c:	05c9      	lsls	r1, r1, #23
1000890e:	9804      	ldr	r0, [sp, #16]
10008910:	47b8      	blx	r7
10008912:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008914:	47b8      	blx	r7
10008916:	1c01      	adds	r1, r0, #0
10008918:	1c20      	adds	r0, r4, #0
1000891a:	47a8      	blx	r5
1000891c:	1c04      	adds	r4, r0, #0
1000891e:	9912      	ldr	r1, [sp, #72]	; 0x48
10008920:	9809      	ldr	r0, [sp, #36]	; 0x24
10008922:	47b8      	blx	r7
10008924:	1c01      	adds	r1, r0, #0
10008926:	1c20      	adds	r0, r4, #0
10008928:	47b0      	blx	r6
1000892a:	1c04      	adds	r4, r0, #0
1000892c:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000892e:	9807      	ldr	r0, [sp, #28]
10008930:	47b0      	blx	r6
10008932:	990a      	ldr	r1, [sp, #40]	; 0x28
10008934:	47b8      	blx	r7
10008936:	1c01      	adds	r1, r0, #0
10008938:	1c20      	adds	r0, r4, #0
1000893a:	47b0      	blx	r6
1000893c:	1c04      	adds	r4, r0, #0
1000893e:	9908      	ldr	r1, [sp, #32]
10008940:	9803      	ldr	r0, [sp, #12]
10008942:	47b8      	blx	r7
10008944:	9002      	str	r0, [sp, #8]
10008946:	991b      	ldr	r1, [sp, #108]	; 0x6c
10008948:	9804      	ldr	r0, [sp, #16]
1000894a:	47b8      	blx	r7
1000894c:	1c01      	adds	r1, r0, #0
1000894e:	9802      	ldr	r0, [sp, #8]
10008950:	47a8      	blx	r5
10008952:	990d      	ldr	r1, [sp, #52]	; 0x34
10008954:	47b8      	blx	r7
10008956:	1c01      	adds	r1, r0, #0
10008958:	1c20      	adds	r0, r4, #0
1000895a:	47b0      	blx	r6
1000895c:	9002      	str	r0, [sp, #8]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
1000895e:	9a08      	ldr	r2, [sp, #32]
10008960:	1c11      	adds	r1, r2, #0
10008962:	1c10      	adds	r0, r2, #0
10008964:	47b0      	blx	r6
10008966:	2380      	movs	r3, #128	; 0x80
10008968:	061b      	lsls	r3, r3, #24
1000896a:	18c4      	adds	r4, r0, r3
1000896c:	9908      	ldr	r1, [sp, #32]
1000896e:	9804      	ldr	r0, [sp, #16]
10008970:	47b8      	blx	r7
10008972:	9017      	str	r0, [sp, #92]	; 0x5c
10008974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008976:	2280      	movs	r2, #128	; 0x80
10008978:	0612      	lsls	r2, r2, #24
1000897a:	4694      	mov	ip, r2
1000897c:	4463      	add	r3, ip
1000897e:	0018      	movs	r0, r3
10008980:	9915      	ldr	r1, [sp, #84]	; 0x54
10008982:	47b8      	blx	r7
10008984:	9007      	str	r0, [sp, #28]
10008986:	9916      	ldr	r1, [sp, #88]	; 0x58
10008988:	9819      	ldr	r0, [sp, #100]	; 0x64
1000898a:	47b8      	blx	r7
1000898c:	1c01      	adds	r1, r0, #0
1000898e:	9807      	ldr	r0, [sp, #28]
10008990:	47b0      	blx	r6
10008992:	9007      	str	r0, [sp, #28]
10008994:	2181      	movs	r1, #129	; 0x81
10008996:	05c9      	lsls	r1, r1, #23
10008998:	9800      	ldr	r0, [sp, #0]
1000899a:	47b8      	blx	r7
1000899c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000899e:	47b8      	blx	r7
100089a0:	1c01      	adds	r1, r0, #0
100089a2:	9807      	ldr	r0, [sp, #28]
100089a4:	47a8      	blx	r5
100089a6:	9007      	str	r0, [sp, #28]
100089a8:	1c21      	adds	r1, r4, #0
100089aa:	9800      	ldr	r0, [sp, #0]
100089ac:	47b8      	blx	r7
100089ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
100089b0:	47a8      	blx	r5
100089b2:	9909      	ldr	r1, [sp, #36]	; 0x24
100089b4:	47b8      	blx	r7
100089b6:	1c01      	adds	r1, r0, #0
100089b8:	9807      	ldr	r0, [sp, #28]
100089ba:	47b0      	blx	r6
100089bc:	9007      	str	r0, [sp, #28]
100089be:	9917      	ldr	r1, [sp, #92]	; 0x5c
100089c0:	9812      	ldr	r0, [sp, #72]	; 0x48
100089c2:	47b0      	blx	r6
100089c4:	990a      	ldr	r1, [sp, #40]	; 0x28
100089c6:	47b8      	blx	r7
100089c8:	1c01      	adds	r1, r0, #0
100089ca:	9807      	ldr	r0, [sp, #28]
100089cc:	47b0      	blx	r6
100089ce:	9007      	str	r0, [sp, #28]
100089d0:	9908      	ldr	r1, [sp, #32]
100089d2:	9805      	ldr	r0, [sp, #20]
100089d4:	47b8      	blx	r7
100089d6:	9008      	str	r0, [sp, #32]
100089d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
100089da:	9800      	ldr	r0, [sp, #0]
100089dc:	47b8      	blx	r7
100089de:	1c01      	adds	r1, r0, #0
100089e0:	9808      	ldr	r0, [sp, #32]
100089e2:	47a8      	blx	r5
100089e4:	990d      	ldr	r1, [sp, #52]	; 0x34
100089e6:	47b8      	blx	r7
100089e8:	1c01      	adds	r1, r0, #0
100089ea:	9807      	ldr	r0, [sp, #28]
100089ec:	47b0      	blx	r6
100089ee:	9007      	str	r0, [sp, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
100089f0:	9915      	ldr	r1, [sp, #84]	; 0x54
100089f2:	9810      	ldr	r0, [sp, #64]	; 0x40
100089f4:	47b8      	blx	r7
100089f6:	1c05      	adds	r5, r0, #0
100089f8:	9916      	ldr	r1, [sp, #88]	; 0x58
100089fa:	9811      	ldr	r0, [sp, #68]	; 0x44
100089fc:	47b8      	blx	r7
100089fe:	1c01      	adds	r1, r0, #0
10008a00:	1c28      	adds	r0, r5, #0
10008a02:	47b0      	blx	r6
10008a04:	1c05      	adds	r5, r0, #0
10008a06:	1c21      	adds	r1, r4, #0
10008a08:	9803      	ldr	r0, [sp, #12]
10008a0a:	47b8      	blx	r7
10008a0c:	991d      	ldr	r1, [sp, #116]	; 0x74
10008a0e:	47b0      	blx	r6
10008a10:	9909      	ldr	r1, [sp, #36]	; 0x24
10008a12:	47b8      	blx	r7
10008a14:	1c01      	adds	r1, r0, #0
10008a16:	1c28      	adds	r0, r5, #0
10008a18:	47b0      	blx	r6
10008a1a:	1c04      	adds	r4, r0, #0
10008a1c:	9914      	ldr	r1, [sp, #80]	; 0x50
10008a1e:	9805      	ldr	r0, [sp, #20]
10008a20:	47b8      	blx	r7
10008a22:	991c      	ldr	r1, [sp, #112]	; 0x70
10008a24:	47b0      	blx	r6
10008a26:	990a      	ldr	r1, [sp, #40]	; 0x28
10008a28:	47b8      	blx	r7
10008a2a:	1c01      	adds	r1, r0, #0
10008a2c:	1c20      	adds	r0, r4, #0
10008a2e:	47b0      	blx	r6
10008a30:	1c04      	adds	r4, r0, #0
10008a32:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008a34:	980d      	ldr	r0, [sp, #52]	; 0x34
10008a36:	47b8      	blx	r7
10008a38:	1c01      	adds	r1, r0, #0
10008a3a:	1c20      	adds	r0, r4, #0
10008a3c:	47b0      	blx	r6
10008a3e:	9008      	str	r0, [sp, #32]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalize step magnitude
10008a40:	9c06      	ldr	r4, [sp, #24]
10008a42:	1c21      	adds	r1, r4, #0
10008a44:	1c20      	adds	r0, r4, #0
10008a46:	47b8      	blx	r7
10008a48:	1c04      	adds	r4, r0, #0
10008a4a:	9d02      	ldr	r5, [sp, #8]
10008a4c:	1c29      	adds	r1, r5, #0
10008a4e:	1c28      	adds	r0, r5, #0
10008a50:	47b8      	blx	r7
10008a52:	1c05      	adds	r5, r0, #0
10008a54:	1c01      	adds	r1, r0, #0
10008a56:	1c20      	adds	r0, r4, #0
10008a58:	47b0      	blx	r6
10008a5a:	9009      	str	r0, [sp, #36]	; 0x24
10008a5c:	9a07      	ldr	r2, [sp, #28]
10008a5e:	1c11      	adds	r1, r2, #0
10008a60:	1c10      	adds	r0, r2, #0
10008a62:	47b8      	blx	r7
10008a64:	1c01      	adds	r1, r0, #0
10008a66:	9809      	ldr	r0, [sp, #36]	; 0x24
10008a68:	47b0      	blx	r6
10008a6a:	9009      	str	r0, [sp, #36]	; 0x24
10008a6c:	1c29      	adds	r1, r5, #0
10008a6e:	1c20      	adds	r0, r4, #0
10008a70:	47b0      	blx	r6
10008a72:	1c05      	adds	r5, r0, #0
10008a74:	4c8b      	ldr	r4, [pc, #556]	; (10008ca4 <madgwick_quaternion_update+0x868>)
10008a76:	9a07      	ldr	r2, [sp, #28]
10008a78:	1c11      	adds	r1, r2, #0
10008a7a:	1c10      	adds	r0, r2, #0
10008a7c:	47a0      	blx	r4
10008a7e:	1c01      	adds	r1, r0, #0
10008a80:	4f89      	ldr	r7, [pc, #548]	; (10008ca8 <madgwick_quaternion_update+0x86c>)
10008a82:	1c28      	adds	r0, r5, #0
10008a84:	47b8      	blx	r7
10008a86:	1c05      	adds	r5, r0, #0
10008a88:	9b08      	ldr	r3, [sp, #32]
10008a8a:	1c19      	adds	r1, r3, #0
10008a8c:	1c18      	adds	r0, r3, #0
10008a8e:	47a0      	blx	r4
10008a90:	1c01      	adds	r1, r0, #0
10008a92:	1c28      	adds	r0, r5, #0
10008a94:	47b8      	blx	r7
10008a96:	4985      	ldr	r1, [pc, #532]	; (10008cac <madgwick_quaternion_update+0x870>)
10008a98:	4788      	blx	r1
10008a9a:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008a9c:	4d84      	ldr	r5, [pc, #528]	; (10008cb0 <madgwick_quaternion_update+0x874>)
10008a9e:	46a8      	mov	r8, r5
10008aa0:	20fe      	movs	r0, #254	; 0xfe
10008aa2:	0580      	lsls	r0, r0, #22
10008aa4:	47a8      	blx	r5
10008aa6:	9009      	str	r0, [sp, #36]	; 0x24
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - BETA * s2;
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - BETA * s3;
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - BETA * s4;

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
10008aa8:	9904      	ldr	r1, [sp, #16]
10008aaa:	2580      	movs	r5, #128	; 0x80
10008aac:	062d      	lsls	r5, r5, #24
10008aae:	46ac      	mov	ip, r5
10008ab0:	4461      	add	r1, ip
10008ab2:	0008      	movs	r0, r1
10008ab4:	990c      	ldr	r1, [sp, #48]	; 0x30
10008ab6:	47a0      	blx	r4
10008ab8:	1c05      	adds	r5, r0, #0
10008aba:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008abc:	9800      	ldr	r0, [sp, #0]
10008abe:	47a0      	blx	r4
10008ac0:	1c01      	adds	r1, r0, #0
10008ac2:	4e7c      	ldr	r6, [pc, #496]	; (10008cb4 <madgwick_quaternion_update+0x878>)
10008ac4:	1c28      	adds	r0, r5, #0
10008ac6:	47b0      	blx	r6
10008ac8:	1c05      	adds	r5, r0, #0
10008aca:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008acc:	9803      	ldr	r0, [sp, #12]
10008ace:	47a0      	blx	r4
10008ad0:	1c01      	adds	r1, r0, #0
10008ad2:	1c28      	adds	r0, r5, #0
10008ad4:	47b0      	blx	r6
10008ad6:	21fc      	movs	r1, #252	; 0xfc
10008ad8:	0589      	lsls	r1, r1, #22
10008ada:	47a0      	blx	r4
10008adc:	4d76      	ldr	r5, [pc, #472]	; (10008cb8 <madgwick_quaternion_update+0x87c>)
10008ade:	47a8      	blx	r5
10008ae0:	900a      	str	r0, [sp, #40]	; 0x28
10008ae2:	910b      	str	r1, [sp, #44]	; 0x2c
10008ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
10008ae6:	9806      	ldr	r0, [sp, #24]
10008ae8:	47a0      	blx	r4
10008aea:	47a8      	blx	r5
10008aec:	4b73      	ldr	r3, [pc, #460]	; (10008cbc <madgwick_quaternion_update+0x880>)
10008aee:	469a      	mov	sl, r3
10008af0:	4a73      	ldr	r2, [pc, #460]	; (10008cc0 <madgwick_quaternion_update+0x884>)
10008af2:	4b74      	ldr	r3, [pc, #464]	; (10008cc4 <madgwick_quaternion_update+0x888>)
10008af4:	47d0      	blx	sl
10008af6:	0002      	movs	r2, r0
10008af8:	000b      	movs	r3, r1
10008afa:	4973      	ldr	r1, [pc, #460]	; (10008cc8 <madgwick_quaternion_update+0x88c>)
10008afc:	468b      	mov	fp, r1
10008afe:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008b02:	47d8      	blx	fp
10008b04:	4b71      	ldr	r3, [pc, #452]	; (10008ccc <madgwick_quaternion_update+0x890>)
10008b06:	4699      	mov	r9, r3
10008b08:	4798      	blx	r3
10008b0a:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008b0c:	47a0      	blx	r4
10008b0e:	9905      	ldr	r1, [sp, #20]
10008b10:	47b8      	blx	r7
10008b12:	4b6f      	ldr	r3, [pc, #444]	; (10008cd0 <madgwick_quaternion_update+0x894>)
10008b14:	9006      	str	r0, [sp, #24]
10008b16:	6018      	str	r0, [r3, #0]
	q2 += qDot2 * deltat;
10008b18:	990c      	ldr	r1, [sp, #48]	; 0x30
10008b1a:	9805      	ldr	r0, [sp, #20]
10008b1c:	47a0      	blx	r4
10008b1e:	900a      	str	r0, [sp, #40]	; 0x28
10008b20:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008b22:	9800      	ldr	r0, [sp, #0]
10008b24:	47a0      	blx	r4
10008b26:	1c01      	adds	r1, r0, #0
10008b28:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b2a:	47b8      	blx	r7
10008b2c:	900a      	str	r0, [sp, #40]	; 0x28
10008b2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008b30:	9803      	ldr	r0, [sp, #12]
10008b32:	47a0      	blx	r4
10008b34:	1c01      	adds	r1, r0, #0
10008b36:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b38:	47b0      	blx	r6
10008b3a:	21fc      	movs	r1, #252	; 0xfc
10008b3c:	0589      	lsls	r1, r1, #22
10008b3e:	47a0      	blx	r4
10008b40:	47a8      	blx	r5
10008b42:	900a      	str	r0, [sp, #40]	; 0x28
10008b44:	910b      	str	r1, [sp, #44]	; 0x2c
10008b46:	9909      	ldr	r1, [sp, #36]	; 0x24
10008b48:	9802      	ldr	r0, [sp, #8]
10008b4a:	47a0      	blx	r4
10008b4c:	47a8      	blx	r5
10008b4e:	4a5c      	ldr	r2, [pc, #368]	; (10008cc0 <madgwick_quaternion_update+0x884>)
10008b50:	4b5c      	ldr	r3, [pc, #368]	; (10008cc4 <madgwick_quaternion_update+0x888>)
10008b52:	47d0      	blx	sl
10008b54:	0002      	movs	r2, r0
10008b56:	000b      	movs	r3, r1
10008b58:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008b5c:	47d8      	blx	fp
10008b5e:	47c8      	blx	r9
10008b60:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008b62:	47a0      	blx	r4
10008b64:	9904      	ldr	r1, [sp, #16]
10008b66:	47b8      	blx	r7
10008b68:	4b5a      	ldr	r3, [pc, #360]	; (10008cd4 <madgwick_quaternion_update+0x898>)
10008b6a:	9002      	str	r0, [sp, #8]
10008b6c:	6018      	str	r0, [r3, #0]
	q3 += qDot3 * deltat;
10008b6e:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008b70:	9805      	ldr	r0, [sp, #20]
10008b72:	47a0      	blx	r4
10008b74:	900a      	str	r0, [sp, #40]	; 0x28
10008b76:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008b78:	9804      	ldr	r0, [sp, #16]
10008b7a:	47a0      	blx	r4
10008b7c:	1c01      	adds	r1, r0, #0
10008b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b80:	47b0      	blx	r6
10008b82:	900a      	str	r0, [sp, #40]	; 0x28
10008b84:	990c      	ldr	r1, [sp, #48]	; 0x30
10008b86:	9803      	ldr	r0, [sp, #12]
10008b88:	47a0      	blx	r4
10008b8a:	1c01      	adds	r1, r0, #0
10008b8c:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b8e:	47b8      	blx	r7
10008b90:	21fc      	movs	r1, #252	; 0xfc
10008b92:	0589      	lsls	r1, r1, #22
10008b94:	47a0      	blx	r4
10008b96:	47a8      	blx	r5
10008b98:	900a      	str	r0, [sp, #40]	; 0x28
10008b9a:	910b      	str	r1, [sp, #44]	; 0x2c
10008b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
10008b9e:	9807      	ldr	r0, [sp, #28]
10008ba0:	47a0      	blx	r4
10008ba2:	47a8      	blx	r5
10008ba4:	4a46      	ldr	r2, [pc, #280]	; (10008cc0 <madgwick_quaternion_update+0x884>)
10008ba6:	4b47      	ldr	r3, [pc, #284]	; (10008cc4 <madgwick_quaternion_update+0x888>)
10008ba8:	47d0      	blx	sl
10008baa:	0002      	movs	r2, r0
10008bac:	000b      	movs	r3, r1
10008bae:	980a      	ldr	r0, [sp, #40]	; 0x28
10008bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008bb2:	47d8      	blx	fp
10008bb4:	47c8      	blx	r9
10008bb6:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008bb8:	47a0      	blx	r4
10008bba:	9900      	ldr	r1, [sp, #0]
10008bbc:	47b8      	blx	r7
10008bbe:	4b46      	ldr	r3, [pc, #280]	; (10008cd8 <madgwick_quaternion_update+0x89c>)
10008bc0:	9007      	str	r0, [sp, #28]
10008bc2:	6018      	str	r0, [r3, #0]
	q4 += qDot4 * deltat;
10008bc4:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008bc6:	9805      	ldr	r0, [sp, #20]
10008bc8:	47a0      	blx	r4
10008bca:	9005      	str	r0, [sp, #20]
10008bcc:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008bce:	9804      	ldr	r0, [sp, #16]
10008bd0:	47a0      	blx	r4
10008bd2:	1c01      	adds	r1, r0, #0
10008bd4:	9805      	ldr	r0, [sp, #20]
10008bd6:	47b8      	blx	r7
10008bd8:	9004      	str	r0, [sp, #16]
10008bda:	990c      	ldr	r1, [sp, #48]	; 0x30
10008bdc:	9800      	ldr	r0, [sp, #0]
10008bde:	47a0      	blx	r4
10008be0:	1c01      	adds	r1, r0, #0
10008be2:	9804      	ldr	r0, [sp, #16]
10008be4:	47b0      	blx	r6
10008be6:	21fc      	movs	r1, #252	; 0xfc
10008be8:	0589      	lsls	r1, r1, #22
10008bea:	47a0      	blx	r4
10008bec:	47a8      	blx	r5
10008bee:	9000      	str	r0, [sp, #0]
10008bf0:	9101      	str	r1, [sp, #4]
10008bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
10008bf4:	9808      	ldr	r0, [sp, #32]
10008bf6:	47a0      	blx	r4
10008bf8:	47a8      	blx	r5
10008bfa:	4a31      	ldr	r2, [pc, #196]	; (10008cc0 <madgwick_quaternion_update+0x884>)
10008bfc:	4b31      	ldr	r3, [pc, #196]	; (10008cc4 <madgwick_quaternion_update+0x888>)
10008bfe:	47d0      	blx	sl
10008c00:	0002      	movs	r2, r0
10008c02:	000b      	movs	r3, r1
10008c04:	9800      	ldr	r0, [sp, #0]
10008c06:	9901      	ldr	r1, [sp, #4]
10008c08:	47d8      	blx	fp
10008c0a:	47c8      	blx	r9
10008c0c:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008c0e:	47a0      	blx	r4
10008c10:	9903      	ldr	r1, [sp, #12]
10008c12:	47b8      	blx	r7
10008c14:	4b31      	ldr	r3, [pc, #196]	; (10008cdc <madgwick_quaternion_update+0x8a0>)
10008c16:	9000      	str	r0, [sp, #0]
10008c18:	6018      	str	r0, [r3, #0]
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalize quaternion
10008c1a:	9a06      	ldr	r2, [sp, #24]
10008c1c:	1c11      	adds	r1, r2, #0
10008c1e:	1c10      	adds	r0, r2, #0
10008c20:	47a0      	blx	r4
10008c22:	1c06      	adds	r6, r0, #0
10008c24:	9b02      	ldr	r3, [sp, #8]
10008c26:	1c19      	adds	r1, r3, #0
10008c28:	1c18      	adds	r0, r3, #0
10008c2a:	47a0      	blx	r4
10008c2c:	1c01      	adds	r1, r0, #0
10008c2e:	9003      	str	r0, [sp, #12]
10008c30:	1c30      	adds	r0, r6, #0
10008c32:	47b8      	blx	r7
10008c34:	1c05      	adds	r5, r0, #0
10008c36:	9807      	ldr	r0, [sp, #28]
10008c38:	1c01      	adds	r1, r0, #0
10008c3a:	47a0      	blx	r4
10008c3c:	9004      	str	r0, [sp, #16]
10008c3e:	1c01      	adds	r1, r0, #0
10008c40:	1c28      	adds	r0, r5, #0
10008c42:	47b8      	blx	r7
10008c44:	9005      	str	r0, [sp, #20]
10008c46:	9d00      	ldr	r5, [sp, #0]
10008c48:	1c29      	adds	r1, r5, #0
10008c4a:	1c28      	adds	r0, r5, #0
10008c4c:	47a0      	blx	r4
10008c4e:	1c05      	adds	r5, r0, #0
10008c50:	9903      	ldr	r1, [sp, #12]
10008c52:	1c30      	adds	r0, r6, #0
10008c54:	47b8      	blx	r7
10008c56:	1c06      	adds	r6, r0, #0
10008c58:	9904      	ldr	r1, [sp, #16]
10008c5a:	1c30      	adds	r0, r6, #0
10008c5c:	47b8      	blx	r7
10008c5e:	1c06      	adds	r6, r0, #0
10008c60:	1c29      	adds	r1, r5, #0
10008c62:	1c30      	adds	r0, r6, #0
10008c64:	47b8      	blx	r7
10008c66:	4911      	ldr	r1, [pc, #68]	; (10008cac <madgwick_quaternion_update+0x870>)
10008c68:	4788      	blx	r1
10008c6a:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008c6c:	20fe      	movs	r0, #254	; 0xfe
10008c6e:	0580      	lsls	r0, r0, #22
10008c70:	47c0      	blx	r8
10008c72:	1c05      	adds	r5, r0, #0
	imu_device.output.q[0] = q1 * norm;
10008c74:	4e1a      	ldr	r6, [pc, #104]	; (10008ce0 <madgwick_quaternion_update+0x8a4>)
10008c76:	1c01      	adds	r1, r0, #0
10008c78:	9806      	ldr	r0, [sp, #24]
10008c7a:	47a0      	blx	r4
10008c7c:	6670      	str	r0, [r6, #100]	; 0x64
	imu_device.output.q[1] = q2 * norm;
10008c7e:	1c29      	adds	r1, r5, #0
10008c80:	9802      	ldr	r0, [sp, #8]
10008c82:	47a0      	blx	r4
10008c84:	66b0      	str	r0, [r6, #104]	; 0x68
	imu_device.output.q[2] = q3 * norm;
10008c86:	1c29      	adds	r1, r5, #0
10008c88:	9807      	ldr	r0, [sp, #28]
10008c8a:	47a0      	blx	r4
10008c8c:	66f0      	str	r0, [r6, #108]	; 0x6c
	imu_device.output.q[3] = q4 * norm;
10008c8e:	1c29      	adds	r1, r5, #0
10008c90:	9800      	ldr	r0, [sp, #0]
10008c92:	47a0      	blx	r4
10008c94:	6730      	str	r0, [r6, #112]	; 0x70
	//DBG_LOG("Quaternions (x 10000): q1 %ld, q2 %ld, q3 %ld, q4 %ld", (uint32_t)(imu_device.output.q[0]*10000), (uint32_t)(imu_device.output.q[1] * 10000), (uint32_t)(imu_device.output.q[2] * 10000), (uint32_t)(imu_device.output.q[3] * 10000));
}
10008c96:	b01f      	add	sp, #124	; 0x7c
10008c98:	bc3c      	pop	{r2, r3, r4, r5}
10008c9a:	4690      	mov	r8, r2
10008c9c:	4699      	mov	r9, r3
10008c9e:	46a2      	mov	sl, r4
10008ca0:	46ab      	mov	fp, r5
10008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ca4:	100141b9 	.word	0x100141b9
10008ca8:	10013b39 	.word	0x10013b39
10008cac:	1001266d 	.word	0x1001266d
10008cb0:	10013e25 	.word	0x10013e25
10008cb4:	100143e1 	.word	0x100143e1
10008cb8:	10016449 	.word	0x10016449
10008cbc:	1001570d 	.word	0x1001570d
10008cc0:	a79ed7ed 	.word	0xa79ed7ed
10008cc4:	3fe358e1 	.word	0x3fe358e1
10008cc8:	10015c01 	.word	0x10015c01
10008ccc:	100164f1 	.word	0x100164f1
10008cd0:	1001932c 	.word	0x1001932c
10008cd4:	100193c4 	.word	0x100193c4
10008cd8:	100193c8 	.word	0x100193c8
10008cdc:	100193cc 	.word	0x100193cc
10008ce0:	1001afbc 	.word	0x1001afbc

10008ce4 <ahrs_calculation>:
	//mpu_device.output.roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
	//mpu_device.output.pitch *= 180.0f / PI;
	//mpu_device.output.yaw   *= 180.0f / PI;
	//mpu_device.output.yaw   -= 2.25; // Declination at Zurich, Switzerland is 2 degrees 14 minutes  on 2017-02-06
	//mpu_device.output.roll  *= 180.0f / PI;
10008ce4:	4770      	bx	lr
10008ce6:	46c0      	nop			; (mov r8, r8)

10008ce8 <sms_ble_pair_request_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10008ce8:	b510      	push	{r4, lr}
10008cea:	b082      	sub	sp, #8
	at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008cec:	4809      	ldr	r0, [pc, #36]	; (10008d14 <sms_ble_pair_request_fn+0x2c>)
10008cee:	4b0a      	ldr	r3, [pc, #40]	; (10008d18 <sms_ble_pair_request_fn+0x30>)
10008cf0:	4798      	blx	r3
10008cf2:	4b0a      	ldr	r3, [pc, #40]	; (10008d1c <sms_ble_pair_request_fn+0x34>)
10008cf4:	781a      	ldrb	r2, [r3, #0]
10008cf6:	b2d2      	uxtb	r2, r2
10008cf8:	4b09      	ldr	r3, [pc, #36]	; (10008d20 <sms_ble_pair_request_fn+0x38>)
10008cfa:	781b      	ldrb	r3, [r3, #0]
10008cfc:	b2db      	uxtb	r3, r3
10008cfe:	4909      	ldr	r1, [pc, #36]	; (10008d24 <sms_ble_pair_request_fn+0x3c>)
10008d00:	7808      	ldrb	r0, [r1, #0]
10008d02:	4909      	ldr	r1, [pc, #36]	; (10008d28 <sms_ble_pair_request_fn+0x40>)
10008d04:	7b49      	ldrb	r1, [r1, #13]
10008d06:	9000      	str	r0, [sp, #0]
10008d08:	4808      	ldr	r0, [pc, #32]	; (10008d2c <sms_ble_pair_request_fn+0x44>)
10008d0a:	4c09      	ldr	r4, [pc, #36]	; (10008d30 <sms_ble_pair_request_fn+0x48>)
10008d0c:	47a0      	blx	r4
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
10008d0e:	2000      	movs	r0, #0
10008d10:	b002      	add	sp, #8
10008d12:	bd10      	pop	{r4, pc}
10008d14:	10017888 	.word	0x10017888
10008d18:	10016949 	.word	0x10016949
10008d1c:	1001ae80 	.word	0x1001ae80
10008d20:	1001ae74 	.word	0x1001ae74
10008d24:	1001afa3 	.word	0x1001afa3
10008d28:	1001ae84 	.word	0x1001ae84
10008d2c:	1001788c 	.word	0x1001788c
10008d30:	10016829 	.word	0x10016829

10008d34 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008d34:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008d36:	4c0d      	ldr	r4, [pc, #52]	; (10008d6c <sms_ble_notification_confirmed_fn+0x38>)
10008d38:	7863      	ldrb	r3, [r4, #1]
10008d3a:	3b01      	subs	r3, #1
10008d3c:	b2db      	uxtb	r3, r3
10008d3e:	7063      	strb	r3, [r4, #1]
	//DBG_LOG("T/O: OFF");
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008d40:	2201      	movs	r2, #1
10008d42:	4252      	negs	r2, r2
10008d44:	4b0a      	ldr	r3, [pc, #40]	; (10008d70 <sms_ble_notification_confirmed_fn+0x3c>)
10008d46:	601a      	str	r2, [r3, #0]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10008d48:	2001      	movs	r0, #1
10008d4a:	4b0a      	ldr	r3, [pc, #40]	; (10008d74 <sms_ble_notification_confirmed_fn+0x40>)
10008d4c:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
10008d4e:	2200      	movs	r2, #0
10008d50:	4b09      	ldr	r3, [pc, #36]	; (10008d78 <sms_ble_notification_confirmed_fn+0x44>)
10008d52:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
10008d54:	2322      	movs	r3, #34	; 0x22
10008d56:	7023      	strb	r3, [r4, #0]
	//DBG_LOG_CONT_DEV(" done!");

	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	if(timer1_current_mode == TIMER1_MODE_NONE) {
10008d58:	4b08      	ldr	r3, [pc, #32]	; (10008d7c <sms_ble_notification_confirmed_fn+0x48>)
10008d5a:	781b      	ldrb	r3, [r3, #0]
10008d5c:	2b00      	cmp	r3, #0
10008d5e:	d102      	bne.n	10008d66 <sms_ble_notification_confirmed_fn+0x32>
		ulp_ready = true;
10008d60:	3201      	adds	r2, #1
10008d62:	4b07      	ldr	r3, [pc, #28]	; (10008d80 <sms_ble_notification_confirmed_fn+0x4c>)
10008d64:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
10008d66:	2000      	movs	r0, #0
10008d68:	bd10      	pop	{r4, pc}
10008d6a:	46c0      	nop			; (mov r8, r8)
10008d6c:	1001ae80 	.word	0x1001ae80
10008d70:	1001ae78 	.word	0x1001ae78
10008d74:	1000ae81 	.word	0x1000ae81
10008d78:	1001afa3 	.word	0x1001afa3
10008d7c:	1001ae74 	.word	0x1001ae74
10008d80:	1001ae7d 	.word	0x1001ae7d

10008d84 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10008d84:	b510      	push	{r4, lr}
	
	at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10008d86:	2001      	movs	r0, #1
10008d88:	4b08      	ldr	r3, [pc, #32]	; (10008dac <sms_ble_indication_confirmed_fn+0x28>)
10008d8a:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
10008d8c:	2200      	movs	r2, #0
10008d8e:	4b08      	ldr	r3, [pc, #32]	; (10008db0 <sms_ble_indication_confirmed_fn+0x2c>)
10008d90:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
10008d92:	3222      	adds	r2, #34	; 0x22
10008d94:	4b07      	ldr	r3, [pc, #28]	; (10008db4 <sms_ble_indication_confirmed_fn+0x30>)
10008d96:	701a      	strb	r2, [r3, #0]
	//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
	//sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
	
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	if(timer1_current_mode == TIMER1_MODE_NONE) {
10008d98:	4b07      	ldr	r3, [pc, #28]	; (10008db8 <sms_ble_indication_confirmed_fn+0x34>)
10008d9a:	781b      	ldrb	r3, [r3, #0]
10008d9c:	2b00      	cmp	r3, #0
10008d9e:	d102      	bne.n	10008da6 <sms_ble_indication_confirmed_fn+0x22>
		ulp_ready = true;
10008da0:	3a21      	subs	r2, #33	; 0x21
10008da2:	4b06      	ldr	r3, [pc, #24]	; (10008dbc <sms_ble_indication_confirmed_fn+0x38>)
10008da4:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
10008da6:	2000      	movs	r0, #0
10008da8:	bd10      	pop	{r4, pc}
10008daa:	46c0      	nop			; (mov r8, r8)
10008dac:	1000ae81 	.word	0x1000ae81
10008db0:	1001afa3 	.word	0x1001afa3
10008db4:	1001ae80 	.word	0x1001ae80
10008db8:	1001ae74 	.word	0x1001ae74
10008dbc:	1001ae7d 	.word	0x1001ae7d

10008dc0 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
10008dc0:	2300      	movs	r3, #0
10008dc2:	4a02      	ldr	r2, [pc, #8]	; (10008dcc <sms_ble_init_variables+0xc>)
10008dc4:	7013      	strb	r3, [r2, #0]
	sms_ble_send_cnt = 0;
10008dc6:	4a02      	ldr	r2, [pc, #8]	; (10008dd0 <sms_ble_init_variables+0x10>)
10008dc8:	8013      	strh	r3, [r2, #0]
}
10008dca:	4770      	bx	lr
10008dcc:	1001ae80 	.word	0x1001ae80
10008dd0:	1001b09c 	.word	0x1001b09c

10008dd4 <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
10008dd4:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008dd6:	482c      	ldr	r0, [pc, #176]	; (10008e88 <sms_ble_power_down+0xb4>)
10008dd8:	4b2c      	ldr	r3, [pc, #176]	; (10008e8c <sms_ble_power_down+0xb8>)
10008dda:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008ddc:	4b2c      	ldr	r3, [pc, #176]	; (10008e90 <sms_ble_power_down+0xbc>)
10008dde:	781b      	ldrb	r3, [r3, #0]
10008de0:	2b00      	cmp	r3, #0
10008de2:	d105      	bne.n	10008df0 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008de4:	2201      	movs	r2, #1
10008de6:	4b2b      	ldr	r3, [pc, #172]	; (10008e94 <sms_ble_power_down+0xc0>)
10008de8:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008dea:	4b2b      	ldr	r3, [pc, #172]	; (10008e98 <sms_ble_power_down+0xc4>)
10008dec:	4798      	blx	r3
10008dee:	e049      	b.n	10008e84 <sms_ble_power_down+0xb0>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008df0:	4b27      	ldr	r3, [pc, #156]	; (10008e90 <sms_ble_power_down+0xbc>)
10008df2:	781b      	ldrb	r3, [r3, #0]
10008df4:	b2db      	uxtb	r3, r3
10008df6:	2b21      	cmp	r3, #33	; 0x21
10008df8:	d030      	beq.n	10008e5c <sms_ble_power_down+0x88>
10008dfa:	d802      	bhi.n	10008e02 <sms_ble_power_down+0x2e>
10008dfc:	2b20      	cmp	r3, #32
10008dfe:	d005      	beq.n	10008e0c <sms_ble_power_down+0x38>
10008e00:	e037      	b.n	10008e72 <sms_ble_power_down+0x9e>
10008e02:	2b22      	cmp	r3, #34	; 0x22
10008e04:	d017      	beq.n	10008e36 <sms_ble_power_down+0x62>
10008e06:	2b23      	cmp	r3, #35	; 0x23
10008e08:	d01b      	beq.n	10008e42 <sms_ble_power_down+0x6e>
10008e0a:	e032      	b.n	10008e72 <sms_ble_power_down+0x9e>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10008e0c:	4823      	ldr	r0, [pc, #140]	; (10008e9c <sms_ble_power_down+0xc8>)
10008e0e:	4b24      	ldr	r3, [pc, #144]	; (10008ea0 <sms_ble_power_down+0xcc>)
10008e10:	4798      	blx	r3
10008e12:	4824      	ldr	r0, [pc, #144]	; (10008ea4 <sms_ble_power_down+0xd0>)
10008e14:	4b24      	ldr	r3, [pc, #144]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e16:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008e18:	4b24      	ldr	r3, [pc, #144]	; (10008eac <sms_ble_power_down+0xd8>)
10008e1a:	4798      	blx	r3
10008e1c:	2800      	cmp	r0, #0
10008e1e:	d003      	beq.n	10008e28 <sms_ble_power_down+0x54>
				DBG_LOG_CONT_DEV("failed!!!");
10008e20:	4823      	ldr	r0, [pc, #140]	; (10008eb0 <sms_ble_power_down+0xdc>)
10008e22:	4b21      	ldr	r3, [pc, #132]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e24:	4798      	blx	r3
10008e26:	e024      	b.n	10008e72 <sms_ble_power_down+0x9e>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
10008e28:	4822      	ldr	r0, [pc, #136]	; (10008eb4 <sms_ble_power_down+0xe0>)
10008e2a:	4b1f      	ldr	r3, [pc, #124]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e2c:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e2e:	2211      	movs	r2, #17
10008e30:	4b17      	ldr	r3, [pc, #92]	; (10008e90 <sms_ble_power_down+0xbc>)
10008e32:	701a      	strb	r2, [r3, #0]
10008e34:	e01d      	b.n	10008e72 <sms_ble_power_down+0x9e>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10008e36:	4819      	ldr	r0, [pc, #100]	; (10008e9c <sms_ble_power_down+0xc8>)
10008e38:	4b19      	ldr	r3, [pc, #100]	; (10008ea0 <sms_ble_power_down+0xcc>)
10008e3a:	4798      	blx	r3
10008e3c:	481e      	ldr	r0, [pc, #120]	; (10008eb8 <sms_ble_power_down+0xe4>)
10008e3e:	4b1a      	ldr	r3, [pc, #104]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e40:	4798      	blx	r3
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10008e42:	4816      	ldr	r0, [pc, #88]	; (10008e9c <sms_ble_power_down+0xc8>)
10008e44:	4b16      	ldr	r3, [pc, #88]	; (10008ea0 <sms_ble_power_down+0xcc>)
10008e46:	4798      	blx	r3
10008e48:	481c      	ldr	r0, [pc, #112]	; (10008ebc <sms_ble_power_down+0xe8>)
10008e4a:	4b17      	ldr	r3, [pc, #92]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e4c:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
10008e4e:	2100      	movs	r1, #0
10008e50:	232b      	movs	r3, #43	; 0x2b
10008e52:	4a1b      	ldr	r2, [pc, #108]	; (10008ec0 <sms_ble_power_down+0xec>)
10008e54:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008e56:	2000      	movs	r0, #0
10008e58:	4b1a      	ldr	r3, [pc, #104]	; (10008ec4 <sms_ble_power_down+0xf0>)
10008e5a:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10008e5c:	480f      	ldr	r0, [pc, #60]	; (10008e9c <sms_ble_power_down+0xc8>)
10008e5e:	4b10      	ldr	r3, [pc, #64]	; (10008ea0 <sms_ble_power_down+0xcc>)
10008e60:	4798      	blx	r3
10008e62:	4819      	ldr	r0, [pc, #100]	; (10008ec8 <sms_ble_power_down+0xf4>)
10008e64:	4b10      	ldr	r3, [pc, #64]	; (10008ea8 <sms_ble_power_down+0xd4>)
10008e66:	4798      	blx	r3
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008e68:	4b18      	ldr	r3, [pc, #96]	; (10008ecc <sms_ble_power_down+0xf8>)
10008e6a:	8818      	ldrh	r0, [r3, #0]
10008e6c:	2113      	movs	r1, #19
10008e6e:	4b18      	ldr	r3, [pc, #96]	; (10008ed0 <sms_ble_power_down+0xfc>)
10008e70:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e72:	2211      	movs	r2, #17
10008e74:	4b06      	ldr	r3, [pc, #24]	; (10008e90 <sms_ble_power_down+0xbc>)
10008e76:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10008e78:	3a0e      	subs	r2, #14
10008e7a:	4b16      	ldr	r3, [pc, #88]	; (10008ed4 <sms_ble_power_down+0x100>)
10008e7c:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008e7e:	2016      	movs	r0, #22
10008e80:	4b15      	ldr	r3, [pc, #84]	; (10008ed8 <sms_ble_power_down+0x104>)
10008e82:	4798      	blx	r3
	}
}
10008e84:	bd10      	pop	{r4, pc}
10008e86:	46c0      	nop			; (mov r8, r8)
10008e88:	100178dc 	.word	0x100178dc
10008e8c:	100097dd 	.word	0x100097dd
10008e90:	1001ae80 	.word	0x1001ae80
10008e94:	1001ae7d 	.word	0x1001ae7d
10008e98:	1000ea09 	.word	0x1000ea09
10008e9c:	10017888 	.word	0x10017888
10008ea0:	10016949 	.word	0x10016949
10008ea4:	100178f4 	.word	0x100178f4
10008ea8:	10016829 	.word	0x10016829
10008eac:	1000fc25 	.word	0x1000fc25
10008eb0:	10017948 	.word	0x10017948
10008eb4:	10017954 	.word	0x10017954
10008eb8:	1001795c 	.word	0x1001795c
10008ebc:	100179b4 	.word	0x100179b4
10008ec0:	1001af08 	.word	0x1001af08
10008ec4:	1000abc9 	.word	0x1000abc9
10008ec8:	100179e0 	.word	0x100179e0
10008ecc:	1001ae82 	.word	0x1001ae82
10008ed0:	1000fc51 	.word	0x1000fc51
10008ed4:	1001afa3 	.word	0x1001afa3
10008ed8:	1000a905 	.word	0x1000a905

10008edc <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008edc:	b510      	push	{r4, lr}
	at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008ede:	2211      	movs	r2, #17
10008ee0:	4b05      	ldr	r3, [pc, #20]	; (10008ef8 <sms_ble_adv_report_fn+0x1c>)
10008ee2:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10008ee4:	4805      	ldr	r0, [pc, #20]	; (10008efc <sms_ble_adv_report_fn+0x20>)
10008ee6:	4b06      	ldr	r3, [pc, #24]	; (10008f00 <sms_ble_adv_report_fn+0x24>)
10008ee8:	4798      	blx	r3
10008eea:	4806      	ldr	r0, [pc, #24]	; (10008f04 <sms_ble_adv_report_fn+0x28>)
10008eec:	4b06      	ldr	r3, [pc, #24]	; (10008f08 <sms_ble_adv_report_fn+0x2c>)
10008eee:	4798      	blx	r3
	//DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
	sms_ble_power_down();
10008ef0:	4b06      	ldr	r3, [pc, #24]	; (10008f0c <sms_ble_adv_report_fn+0x30>)
10008ef2:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10008ef4:	2000      	movs	r0, #0
10008ef6:	bd10      	pop	{r4, pc}
10008ef8:	1001ae80 	.word	0x1001ae80
10008efc:	10017888 	.word	0x10017888
10008f00:	10016949 	.word	0x10016949
10008f04:	10017a18 	.word	0x10017a18
10008f08:	10016829 	.word	0x10016829
10008f0c:	10008dd5 	.word	0x10008dd5

10008f10 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008f10:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008f12:	4b0c      	ldr	r3, [pc, #48]	; (10008f44 <sms_ble_connected_fn+0x34>)
10008f14:	781b      	ldrb	r3, [r3, #0]
10008f16:	2b20      	cmp	r3, #32
10008f18:	d110      	bne.n	10008f3c <sms_ble_connected_fn+0x2c>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		sms_ble_conn_handle = connected->handle;
10008f1a:	8902      	ldrh	r2, [r0, #8]
10008f1c:	4b0a      	ldr	r3, [pc, #40]	; (10008f48 <sms_ble_connected_fn+0x38>)
10008f1e:	801a      	strh	r2, [r3, #0]
		ble_instance.current_state = BLE_STATE_CONNECTED;
10008f20:	2221      	movs	r2, #33	; 0x21
10008f22:	4b08      	ldr	r3, [pc, #32]	; (10008f44 <sms_ble_connected_fn+0x34>)
10008f24:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10008f26:	4809      	ldr	r0, [pc, #36]	; (10008f4c <sms_ble_connected_fn+0x3c>)
10008f28:	4b09      	ldr	r3, [pc, #36]	; (10008f50 <sms_ble_connected_fn+0x40>)
10008f2a:	4798      	blx	r3
10008f2c:	4809      	ldr	r0, [pc, #36]	; (10008f54 <sms_ble_connected_fn+0x44>)
10008f2e:	4b0a      	ldr	r3, [pc, #40]	; (10008f58 <sms_ble_connected_fn+0x48>)
10008f30:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		//DBG_LOG("T/O: 5000 ms");
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10008f32:	22fa      	movs	r2, #250	; 0xfa
10008f34:	0052      	lsls	r2, r2, #1
10008f36:	4b09      	ldr	r3, [pc, #36]	; (10008f5c <sms_ble_connected_fn+0x4c>)
10008f38:	601a      	str	r2, [r3, #0]
10008f3a:	e001      	b.n	10008f40 <sms_ble_connected_fn+0x30>
	}
	else {
		sms_ble_power_down();
10008f3c:	4b08      	ldr	r3, [pc, #32]	; (10008f60 <sms_ble_connected_fn+0x50>)
10008f3e:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008f40:	2000      	movs	r0, #0
10008f42:	bd10      	pop	{r4, pc}
10008f44:	1001ae80 	.word	0x1001ae80
10008f48:	1001af96 	.word	0x1001af96
10008f4c:	10017888 	.word	0x10017888
10008f50:	10016949 	.word	0x10016949
10008f54:	10017a4c 	.word	0x10017a4c
10008f58:	10016829 	.word	0x10016829
10008f5c:	1001ae78 	.word	0x1001ae78
10008f60:	10008dd5 	.word	0x10008dd5

10008f64 <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008f64:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008f66:	4b12      	ldr	r3, [pc, #72]	; (10008fb0 <sms_ble_paired_fn+0x4c>)
10008f68:	781b      	ldrb	r3, [r3, #0]
10008f6a:	2b21      	cmp	r3, #33	; 0x21
10008f6c:	d11b      	bne.n	10008fa6 <sms_ble_paired_fn+0x42>
		ble_instance.current_state = BLE_STATE_PAIRED;
10008f6e:	2222      	movs	r2, #34	; 0x22
10008f70:	4b0f      	ldr	r3, [pc, #60]	; (10008fb0 <sms_ble_paired_fn+0x4c>)
10008f72:	701a      	strb	r2, [r3, #0]
		at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
		sms_monitor_get_states("[sms_ble_paired_fn]");
10008f74:	480f      	ldr	r0, [pc, #60]	; (10008fb4 <sms_ble_paired_fn+0x50>)
10008f76:	4b10      	ldr	r3, [pc, #64]	; (10008fb8 <sms_ble_paired_fn+0x54>)
10008f78:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		if(sms_imu_startup()) {
10008f7a:	4b10      	ldr	r3, [pc, #64]	; (10008fbc <sms_ble_paired_fn+0x58>)
10008f7c:	4798      	blx	r3
10008f7e:	2800      	cmp	r0, #0
10008f80:	d005      	beq.n	10008f8e <sms_ble_paired_fn+0x2a>
			DBG_LOG("Cannot start IMU");
10008f82:	480f      	ldr	r0, [pc, #60]	; (10008fc0 <sms_ble_paired_fn+0x5c>)
10008f84:	4b0f      	ldr	r3, [pc, #60]	; (10008fc4 <sms_ble_paired_fn+0x60>)
10008f86:	4798      	blx	r3
10008f88:	480f      	ldr	r0, [pc, #60]	; (10008fc8 <sms_ble_paired_fn+0x64>)
10008f8a:	4b10      	ldr	r3, [pc, #64]	; (10008fcc <sms_ble_paired_fn+0x68>)
10008f8c:	4798      	blx	r3
		}
		dualtimer_enable(DUALTIMER_TIMER1);
10008f8e:	2000      	movs	r0, #0
10008f90:	4b0f      	ldr	r3, [pc, #60]	; (10008fd0 <sms_ble_paired_fn+0x6c>)
10008f92:	4798      	blx	r3
		sms_sensors_interrupt_toggle(true, false);
10008f94:	2100      	movs	r1, #0
10008f96:	2001      	movs	r0, #1
10008f98:	4b0e      	ldr	r3, [pc, #56]	; (10008fd4 <sms_ble_paired_fn+0x70>)
10008f9a:	4798      	blx	r3

		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008f9c:	2201      	movs	r2, #1
10008f9e:	4252      	negs	r2, r2
10008fa0:	4b0d      	ldr	r3, [pc, #52]	; (10008fd8 <sms_ble_paired_fn+0x74>)
10008fa2:	601a      	str	r2, [r3, #0]
10008fa4:	e001      	b.n	10008faa <sms_ble_paired_fn+0x46>
	}
	else {
		sms_ble_power_down();
10008fa6:	4b0d      	ldr	r3, [pc, #52]	; (10008fdc <sms_ble_paired_fn+0x78>)
10008fa8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008faa:	2000      	movs	r0, #0
10008fac:	bd10      	pop	{r4, pc}
10008fae:	46c0      	nop			; (mov r8, r8)
10008fb0:	1001ae80 	.word	0x1001ae80
10008fb4:	10017a7c 	.word	0x10017a7c
10008fb8:	100097dd 	.word	0x100097dd
10008fbc:	1000a581 	.word	0x1000a581
10008fc0:	10017888 	.word	0x10017888
10008fc4:	10016949 	.word	0x10016949
10008fc8:	10017a90 	.word	0x10017a90
10008fcc:	10016829 	.word	0x10016829
10008fd0:	1000b26d 	.word	0x1000b26d
10008fd4:	1000abc9 	.word	0x1000abc9
10008fd8:	1001ae78 	.word	0x1001ae78
10008fdc:	10008dd5 	.word	0x10008dd5

10008fe0 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008fe0:	b510      	push	{r4, lr}
10008fe2:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008fe4:	2220      	movs	r2, #32
10008fe6:	4b17      	ldr	r3, [pc, #92]	; (10009044 <sms_ble_advertise+0x64>)
10008fe8:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008fea:	4b17      	ldr	r3, [pc, #92]	; (10009048 <sms_ble_advertise+0x68>)
10008fec:	4798      	blx	r3
10008fee:	1e04      	subs	r4, r0, #0
10008ff0:	d007      	beq.n	10009002 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008ff2:	4816      	ldr	r0, [pc, #88]	; (1000904c <sms_ble_advertise+0x6c>)
10008ff4:	4b16      	ldr	r3, [pc, #88]	; (10009050 <sms_ble_advertise+0x70>)
10008ff6:	4798      	blx	r3
10008ff8:	4816      	ldr	r0, [pc, #88]	; (10009054 <sms_ble_advertise+0x74>)
10008ffa:	4b17      	ldr	r3, [pc, #92]	; (10009058 <sms_ble_advertise+0x78>)
10008ffc:	4798      	blx	r3
		return status;
10008ffe:	0020      	movs	r0, r4
10009000:	e01e      	b.n	10009040 <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009002:	2300      	movs	r3, #0
10009004:	9302      	str	r3, [sp, #8]
10009006:	4b15      	ldr	r3, [pc, #84]	; (1000905c <sms_ble_advertise+0x7c>)
10009008:	9301      	str	r3, [sp, #4]
1000900a:	23c8      	movs	r3, #200	; 0xc8
1000900c:	00db      	lsls	r3, r3, #3
1000900e:	9300      	str	r3, [sp, #0]
10009010:	2300      	movs	r3, #0
10009012:	2200      	movs	r2, #0
10009014:	2101      	movs	r1, #1
10009016:	2000      	movs	r0, #0
10009018:	4c11      	ldr	r4, [pc, #68]	; (10009060 <sms_ble_advertise+0x80>)
1000901a:	47a0      	blx	r4
1000901c:	1e04      	subs	r4, r0, #0
1000901e:	d107      	bne.n	10009030 <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009020:	480a      	ldr	r0, [pc, #40]	; (1000904c <sms_ble_advertise+0x6c>)
10009022:	4b0b      	ldr	r3, [pc, #44]	; (10009050 <sms_ble_advertise+0x70>)
10009024:	4798      	blx	r3
10009026:	480f      	ldr	r0, [pc, #60]	; (10009064 <sms_ble_advertise+0x84>)
10009028:	4b0b      	ldr	r3, [pc, #44]	; (10009058 <sms_ble_advertise+0x78>)
1000902a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000902c:	2000      	movs	r0, #0
1000902e:	e007      	b.n	10009040 <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009030:	4806      	ldr	r0, [pc, #24]	; (1000904c <sms_ble_advertise+0x6c>)
10009032:	4b07      	ldr	r3, [pc, #28]	; (10009050 <sms_ble_advertise+0x70>)
10009034:	4798      	blx	r3
10009036:	0021      	movs	r1, r4
10009038:	480b      	ldr	r0, [pc, #44]	; (10009068 <sms_ble_advertise+0x88>)
1000903a:	4b07      	ldr	r3, [pc, #28]	; (10009058 <sms_ble_advertise+0x78>)
1000903c:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000903e:	20e2      	movs	r0, #226	; 0xe2
}
10009040:	b004      	add	sp, #16
10009042:	bd10      	pop	{r4, pc}
10009044:	1001ae80 	.word	0x1001ae80
10009048:	1000e051 	.word	0x1000e051
1000904c:	10017888 	.word	0x10017888
10009050:	10016949 	.word	0x10016949
10009054:	10017aa4 	.word	0x10017aa4
10009058:	10016829 	.word	0x10016829
1000905c:	0000028f 	.word	0x0000028f
10009060:	1000fae9 	.word	0x1000fae9
10009064:	10017ad8 	.word	0x10017ad8
10009068:	10017b08 	.word	0x10017b08

1000906c <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000906c:	b530      	push	{r4, r5, lr}
1000906e:	b083      	sub	sp, #12
10009070:	0005      	movs	r5, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
10009072:	4b1c      	ldr	r3, [pc, #112]	; (100090e4 <sms_ble_disconnected_fn+0x78>)
10009074:	781b      	ldrb	r3, [r3, #0]
10009076:	2b22      	cmp	r3, #34	; 0x22
10009078:	d10a      	bne.n	10009090 <sms_ble_disconnected_fn+0x24>
		pressure_device.state = PRESSURE_STATE_OFF;
1000907a:	2100      	movs	r1, #0
1000907c:	3309      	adds	r3, #9
1000907e:	4a1a      	ldr	r2, [pc, #104]	; (100090e8 <sms_ble_disconnected_fn+0x7c>)
10009080:	54d1      	strb	r1, [r2, r3]
		sms_sensors_interrupt_toggle(false, false);
10009082:	2000      	movs	r0, #0
10009084:	4b19      	ldr	r3, [pc, #100]	; (100090ec <sms_ble_disconnected_fn+0x80>)
10009086:	4798      	blx	r3
		sms_sensors_switch(false, false);
10009088:	2100      	movs	r1, #0
1000908a:	2000      	movs	r0, #0
1000908c:	4b18      	ldr	r3, [pc, #96]	; (100090f0 <sms_ble_disconnected_fn+0x84>)
1000908e:	4798      	blx	r3
	}
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009090:	4c14      	ldr	r4, [pc, #80]	; (100090e4 <sms_ble_disconnected_fn+0x78>)
10009092:	2311      	movs	r3, #17
10009094:	7023      	strb	r3, [r4, #0]
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10009096:	4817      	ldr	r0, [pc, #92]	; (100090f4 <sms_ble_disconnected_fn+0x88>)
10009098:	4b17      	ldr	r3, [pc, #92]	; (100090f8 <sms_ble_disconnected_fn+0x8c>)
1000909a:	4798      	blx	r3
1000909c:	7822      	ldrb	r2, [r4, #0]
1000909e:	b2d2      	uxtb	r2, r2
100090a0:	4b16      	ldr	r3, [pc, #88]	; (100090fc <sms_ble_disconnected_fn+0x90>)
100090a2:	781b      	ldrb	r3, [r3, #0]
100090a4:	b2db      	uxtb	r3, r3
100090a6:	4916      	ldr	r1, [pc, #88]	; (10009100 <sms_ble_disconnected_fn+0x94>)
100090a8:	7808      	ldrb	r0, [r1, #0]
100090aa:	4916      	ldr	r1, [pc, #88]	; (10009104 <sms_ble_disconnected_fn+0x98>)
100090ac:	7b49      	ldrb	r1, [r1, #13]
100090ae:	9000      	str	r0, [sp, #0]
100090b0:	4815      	ldr	r0, [pc, #84]	; (10009108 <sms_ble_disconnected_fn+0x9c>)
100090b2:	4c16      	ldr	r4, [pc, #88]	; (1000910c <sms_ble_disconnected_fn+0xa0>)
100090b4:	47a0      	blx	r4
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
100090b6:	78ab      	ldrb	r3, [r5, #2]
100090b8:	2b1a      	cmp	r3, #26
100090ba:	d00b      	beq.n	100090d4 <sms_ble_disconnected_fn+0x68>
100090bc:	b2da      	uxtb	r2, r3
100090be:	2a1a      	cmp	r2, #26
100090c0:	d804      	bhi.n	100090cc <sms_ble_disconnected_fn+0x60>
100090c2:	2b05      	cmp	r3, #5
100090c4:	d006      	beq.n	100090d4 <sms_ble_disconnected_fn+0x68>
100090c6:	2b08      	cmp	r3, #8
100090c8:	d107      	bne.n	100090da <sms_ble_disconnected_fn+0x6e>
100090ca:	e003      	b.n	100090d4 <sms_ble_disconnected_fn+0x68>
100090cc:	2b29      	cmp	r3, #41	; 0x29
100090ce:	d001      	beq.n	100090d4 <sms_ble_disconnected_fn+0x68>
100090d0:	2b3b      	cmp	r3, #59	; 0x3b
100090d2:	d102      	bne.n	100090da <sms_ble_disconnected_fn+0x6e>
		case AT_BLE_AUTH_FAILURE: //0x05
		case AT_BLE_SUPERVISION_TIMEOUT: //0x08
		case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		sms_ble_advertise();
100090d4:	4b0e      	ldr	r3, [pc, #56]	; (10009110 <sms_ble_disconnected_fn+0xa4>)
100090d6:	4798      	blx	r3
		break;
100090d8:	e001      	b.n	100090de <sms_ble_disconnected_fn+0x72>
		case AT_BLE_TERMINATED_BY_USER: // 0x13
		case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		default:
		sms_ble_power_down();
100090da:	4b0e      	ldr	r3, [pc, #56]	; (10009114 <sms_ble_disconnected_fn+0xa8>)
100090dc:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
100090de:	2000      	movs	r0, #0
100090e0:	b003      	add	sp, #12
100090e2:	bd30      	pop	{r4, r5, pc}
100090e4:	1001ae80 	.word	0x1001ae80
100090e8:	1001af08 	.word	0x1001af08
100090ec:	1000abc9 	.word	0x1000abc9
100090f0:	1000ac51 	.word	0x1000ac51
100090f4:	10017888 	.word	0x10017888
100090f8:	10016949 	.word	0x10016949
100090fc:	1001ae74 	.word	0x1001ae74
10009100:	1001afa3 	.word	0x1001afa3
10009104:	1001ae84 	.word	0x1001ae84
10009108:	10017b4c 	.word	0x10017b4c
1000910c:	10016829 	.word	0x10016829
10009110:	10008fe1 	.word	0x10008fe1
10009114:	10008dd5 	.word	0x10008dd5

10009118 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009118:	b570      	push	{r4, r5, r6, lr}
1000911a:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
1000911c:	2801      	cmp	r0, #1
1000911e:	d02e      	beq.n	1000917e <sms_ble_send_characteristic+0x66>
10009120:	2800      	cmp	r0, #0
10009122:	d002      	beq.n	1000912a <sms_ble_send_characteristic+0x12>
10009124:	2802      	cmp	r0, #2
10009126:	d040      	beq.n	100091aa <sms_ble_send_characteristic+0x92>
10009128:	e07a      	b.n	10009220 <sms_ble_send_characteristic+0x108>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
1000912a:	2300      	movs	r3, #0
1000912c:	466a      	mov	r2, sp
1000912e:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
10009130:	4b50      	ldr	r3, [pc, #320]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009132:	791b      	ldrb	r3, [r3, #4]
10009134:	2b00      	cmp	r3, #0
10009136:	d00a      	beq.n	1000914e <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10009138:	4b4e      	ldr	r3, [pc, #312]	; (10009274 <sms_ble_send_characteristic+0x15c>)
1000913a:	795a      	ldrb	r2, [r3, #5]
1000913c:	2300      	movs	r3, #0
1000913e:	2a7e      	cmp	r2, #126	; 0x7e
10009140:	d801      	bhi.n	10009146 <sms_ble_send_characteristic+0x2e>
10009142:	3201      	adds	r2, #1
10009144:	b2d3      	uxtb	r3, r2
10009146:	4a4b      	ldr	r2, [pc, #300]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009148:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000914a:	466a      	mov	r2, sp
1000914c:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000914e:	4b49      	ldr	r3, [pc, #292]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009150:	7a9b      	ldrb	r3, [r3, #10]
10009152:	2b00      	cmp	r3, #0
10009154:	d00f      	beq.n	10009176 <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10009156:	4b47      	ldr	r3, [pc, #284]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009158:	7adb      	ldrb	r3, [r3, #11]
1000915a:	2bff      	cmp	r3, #255	; 0xff
1000915c:	d002      	beq.n	10009164 <sms_ble_send_characteristic+0x4c>
1000915e:	3301      	adds	r3, #1
10009160:	b2db      	uxtb	r3, r3
10009162:	e000      	b.n	10009166 <sms_ble_send_characteristic+0x4e>
10009164:	2300      	movs	r3, #0
10009166:	4a43      	ldr	r2, [pc, #268]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009168:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000916a:	3b80      	subs	r3, #128	; 0x80
1000916c:	466a      	mov	r2, sp
1000916e:	7812      	ldrb	r2, [r2, #0]
10009170:	4313      	orrs	r3, r2
10009172:	466a      	mov	r2, sp
10009174:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009176:	4b3f      	ldr	r3, [pc, #252]	; (10009274 <sms_ble_send_characteristic+0x15c>)
10009178:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
1000917a:	2201      	movs	r2, #1
		break;
1000917c:	e052      	b.n	10009224 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
1000917e:	4a3e      	ldr	r2, [pc, #248]	; (10009278 <sms_ble_send_characteristic+0x160>)
10009180:	6a13      	ldr	r3, [r2, #32]
10009182:	1619      	asrs	r1, r3, #24
10009184:	4668      	mov	r0, sp
10009186:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10009188:	1419      	asrs	r1, r3, #16
1000918a:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000918c:	1219      	asrs	r1, r3, #8
1000918e:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10009190:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10009192:	69d3      	ldr	r3, [r2, #28]
10009194:	1619      	asrs	r1, r3, #24
10009196:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
10009198:	1419      	asrs	r1, r3, #16
1000919a:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
1000919c:	1219      	asrs	r1, r3, #8
1000919e:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
100091a0:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100091a2:	2340      	movs	r3, #64	; 0x40
100091a4:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
100091a6:	2208      	movs	r2, #8
		break;
100091a8:	e03c      	b.n	10009224 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
100091aa:	4c34      	ldr	r4, [pc, #208]	; (1000927c <sms_ble_send_characteristic+0x164>)
100091ac:	4e34      	ldr	r6, [pc, #208]	; (10009280 <sms_ble_send_characteristic+0x168>)
100091ae:	4935      	ldr	r1, [pc, #212]	; (10009284 <sms_ble_send_characteristic+0x16c>)
100091b0:	6e60      	ldr	r0, [r4, #100]	; 0x64
100091b2:	47b0      	blx	r6
100091b4:	4d34      	ldr	r5, [pc, #208]	; (10009288 <sms_ble_send_characteristic+0x170>)
100091b6:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
		send_val[0] = (uint8_t)(int_val & 0xff);
100091b8:	466b      	mov	r3, sp
100091ba:	7018      	strb	r0, [r3, #0]
		send_val[1] = (uint8_t)((int_val >> 8) & 0xff);
100091bc:	0a03      	lsrs	r3, r0, #8
100091be:	466a      	mov	r2, sp
100091c0:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 16) & 0xff);
100091c2:	0c03      	lsrs	r3, r0, #16
100091c4:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 24) & 0xff);
100091c6:	0e00      	lsrs	r0, r0, #24
100091c8:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
100091ca:	492e      	ldr	r1, [pc, #184]	; (10009284 <sms_ble_send_characteristic+0x16c>)
100091cc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
100091ce:	47b0      	blx	r6
100091d0:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
		send_val[4] = (uint8_t)(int_val & 0xff);
100091d2:	466b      	mov	r3, sp
100091d4:	7118      	strb	r0, [r3, #4]
		send_val[5] = (uint8_t)((int_val >> 8) & 0xff);
100091d6:	0a03      	lsrs	r3, r0, #8
100091d8:	466a      	mov	r2, sp
100091da:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 16) & 0xff);
100091dc:	0c03      	lsrs	r3, r0, #16
100091de:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 24) & 0xff);
100091e0:	0e00      	lsrs	r0, r0, #24
100091e2:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
100091e4:	4927      	ldr	r1, [pc, #156]	; (10009284 <sms_ble_send_characteristic+0x16c>)
100091e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100091e8:	47b0      	blx	r6
100091ea:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(int_val & 0xff);
100091ec:	466b      	mov	r3, sp
100091ee:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((int_val >> 8) & 0xff);
100091f0:	0a03      	lsrs	r3, r0, #8
100091f2:	466a      	mov	r2, sp
100091f4:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 16) & 0xff);
100091f6:	0c03      	lsrs	r3, r0, #16
100091f8:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 24) & 0xff);
100091fa:	0e00      	lsrs	r0, r0, #24
100091fc:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
100091fe:	4921      	ldr	r1, [pc, #132]	; (10009284 <sms_ble_send_characteristic+0x16c>)
10009200:	6f20      	ldr	r0, [r4, #112]	; 0x70
10009202:	47b0      	blx	r6
10009204:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(int_val & 0xff);
10009206:	466b      	mov	r3, sp
10009208:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((int_val >> 8) & 0xff);
1000920a:	0a03      	lsrs	r3, r0, #8
1000920c:	466a      	mov	r2, sp
1000920e:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 16) & 0xff);
10009210:	0c03      	lsrs	r3, r0, #16
10009212:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 24) & 0xff);
10009214:	0e00      	lsrs	r0, r0, #24
10009216:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10009218:	2398      	movs	r3, #152	; 0x98
1000921a:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
1000921c:	2210      	movs	r2, #16
		

		break;
1000921e:	e001      	b.n	10009224 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
10009220:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
10009222:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10009224:	b292      	uxth	r2, r2
10009226:	4669      	mov	r1, sp
10009228:	0028      	movs	r0, r5
1000922a:	4b18      	ldr	r3, [pc, #96]	; (1000928c <sms_ble_send_characteristic+0x174>)
1000922c:	4798      	blx	r3
1000922e:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
10009230:	d117      	bne.n	10009262 <sms_ble_send_characteristic+0x14a>
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		status = at_ble_notification_send(sms_connection_handle, val_handle);
10009232:	4b17      	ldr	r3, [pc, #92]	; (10009290 <sms_ble_send_characteristic+0x178>)
10009234:	8818      	ldrh	r0, [r3, #0]
10009236:	0029      	movs	r1, r5
10009238:	4b16      	ldr	r3, [pc, #88]	; (10009294 <sms_ble_send_characteristic+0x17c>)
1000923a:	4798      	blx	r3
1000923c:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000923e:	d10c      	bne.n	1000925a <sms_ble_send_characteristic+0x142>
			ble_instance.sending_queue++;
10009240:	4a15      	ldr	r2, [pc, #84]	; (10009298 <sms_ble_send_characteristic+0x180>)
10009242:	7853      	ldrb	r3, [r2, #1]
10009244:	3301      	adds	r3, #1
10009246:	b2db      	uxtb	r3, r3
10009248:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000924a:	4a14      	ldr	r2, [pc, #80]	; (1000929c <sms_ble_send_characteristic+0x184>)
1000924c:	8813      	ldrh	r3, [r2, #0]
1000924e:	3301      	adds	r3, #1
10009250:	8013      	strh	r3, [r2, #0]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
10009252:	2202      	movs	r2, #2
10009254:	4b12      	ldr	r3, [pc, #72]	; (100092a0 <sms_ble_send_characteristic+0x188>)
10009256:	601a      	str	r2, [r3, #0]
10009258:	e009      	b.n	1000926e <sms_ble_send_characteristic+0x156>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000925a:	4812      	ldr	r0, [pc, #72]	; (100092a4 <sms_ble_send_characteristic+0x18c>)
1000925c:	4b12      	ldr	r3, [pc, #72]	; (100092a8 <sms_ble_send_characteristic+0x190>)
1000925e:	4798      	blx	r3
10009260:	e005      	b.n	1000926e <sms_ble_send_characteristic+0x156>
		//DBG_LOG_DEV(" NOT gone? ");
		//#pragma TBD: handle sending error...
		//}
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
10009262:	4812      	ldr	r0, [pc, #72]	; (100092ac <sms_ble_send_characteristic+0x194>)
10009264:	4b12      	ldr	r3, [pc, #72]	; (100092b0 <sms_ble_send_characteristic+0x198>)
10009266:	4798      	blx	r3
10009268:	4812      	ldr	r0, [pc, #72]	; (100092b4 <sms_ble_send_characteristic+0x19c>)
1000926a:	4b0f      	ldr	r3, [pc, #60]	; (100092a8 <sms_ble_send_characteristic+0x190>)
1000926c:	4798      	blx	r3
	}
	return status;
}
1000926e:	0020      	movs	r0, r4
10009270:	b004      	add	sp, #16
10009272:	bd70      	pop	{r4, r5, r6, pc}
10009274:	1001ae84 	.word	0x1001ae84
10009278:	1001af08 	.word	0x1001af08
1000927c:	1001afbc 	.word	0x1001afbc
10009280:	100141b9 	.word	0x100141b9
10009284:	49742400 	.word	0x49742400
10009288:	10013acd 	.word	0x10013acd
1000928c:	100103cd 	.word	0x100103cd
10009290:	1001ae82 	.word	0x1001ae82
10009294:	1001056d 	.word	0x1001056d
10009298:	1001ae80 	.word	0x1001ae80
1000929c:	1001b09c 	.word	0x1001b09c
100092a0:	1001ae78 	.word	0x1001ae78
100092a4:	10017ba0 	.word	0x10017ba0
100092a8:	10016829 	.word	0x10016829
100092ac:	10017888 	.word	0x10017888
100092b0:	10016949 	.word	0x10016949
100092b4:	10017bb8 	.word	0x10017bb8

100092b8 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100092b8:	b510      	push	{r4, lr}
100092ba:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100092bc:	0001      	movs	r1, r0
100092be:	3112      	adds	r1, #18
100092c0:	2301      	movs	r3, #1
100092c2:	9301      	str	r3, [sp, #4]
100092c4:	0003      	movs	r3, r0
100092c6:	3314      	adds	r3, #20
100092c8:	9300      	str	r3, [sp, #0]
100092ca:	2300      	movs	r3, #0
100092cc:	2200      	movs	r2, #0
100092ce:	4c02      	ldr	r4, [pc, #8]	; (100092d8 <sms_ble_primary_service_define+0x20>)
100092d0:	47a0      	blx	r4
}
100092d2:	b002      	add	sp, #8
100092d4:	bd10      	pop	{r4, pc}
100092d6:	46c0      	nop			; (mov r8, r8)
100092d8:	100103ad 	.word	0x100103ad

100092dc <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100092dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100092de:	464f      	mov	r7, r9
100092e0:	4646      	mov	r6, r8
100092e2:	b4c0      	push	{r6, r7}
100092e4:	b083      	sub	sp, #12
100092e6:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
100092e8:	2801      	cmp	r0, #1
100092ea:	d010      	beq.n	1000930e <sms_ble_service_init+0x32>
100092ec:	2800      	cmp	r0, #0
100092ee:	d002      	beq.n	100092f6 <sms_ble_service_init+0x1a>
100092f0:	2802      	cmp	r0, #2
100092f2:	d019      	beq.n	10009328 <sms_ble_service_init+0x4c>
100092f4:	e025      	b.n	10009342 <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100092f6:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100092f8:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100092fa:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100092fc:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100092fe:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10009300:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10009302:	221c      	movs	r2, #28
10009304:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
10009306:	3a1b      	subs	r2, #27
10009308:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
1000930a:	4691      	mov	r9, r2
1000930c:	e023      	b.n	10009356 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000930e:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009310:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10009312:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10009314:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10009316:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10009318:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000931a:	221c      	movs	r2, #28
1000931c:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
1000931e:	3a14      	subs	r2, #20
10009320:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10009322:	3a06      	subs	r2, #6
10009324:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10009326:	e016      	b.n	10009356 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10009328:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000932a:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000932c:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000932e:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10009330:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10009332:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10009334:	221c      	movs	r2, #28
10009336:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10009338:	3a08      	subs	r2, #8
1000933a:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
1000933c:	3a11      	subs	r2, #17
1000933e:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10009340:	e009      	b.n	10009356 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10009342:	2300      	movs	r3, #0
10009344:	2400      	movs	r4, #0
10009346:	2500      	movs	r5, #0
10009348:	2600      	movs	r6, #0
1000934a:	2700      	movs	r7, #0
1000934c:	2000      	movs	r0, #0
1000934e:	2200      	movs	r2, #0
10009350:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10009352:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10009354:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10009356:	464a      	mov	r2, r9
10009358:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
1000935a:	2202      	movs	r2, #2
1000935c:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
1000935e:	4642      	mov	r2, r8
10009360:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10009362:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10009364:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10009366:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10009368:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
1000936a:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
1000936c:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
1000936e:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10009370:	2300      	movs	r3, #0
10009372:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10009374:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10009376:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10009378:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
1000937a:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
1000937c:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
1000937e:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10009380:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10009382:	2412      	movs	r4, #18
10009384:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10009386:	4662      	mov	r2, ip
10009388:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000938a:	466a      	mov	r2, sp
1000938c:	8892      	ldrh	r2, [r2, #4]
1000938e:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10009390:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10009392:	2011      	movs	r0, #17
10009394:	2234      	movs	r2, #52	; 0x34
10009396:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10009398:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
1000939a:	2200      	movs	r2, #0
1000939c:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
1000939e:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
100093a0:	3033      	adds	r0, #51	; 0x33
100093a2:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
100093a4:	3001      	adds	r0, #1
100093a6:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
100093a8:	3001      	adds	r0, #1
100093aa:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
100093ac:	2248      	movs	r2, #72	; 0x48
100093ae:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
100093b0:	3202      	adds	r2, #2
100093b2:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
100093b4:	3202      	adds	r2, #2
100093b6:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
100093b8:	640b      	str	r3, [r1, #64]	; 0x40
100093ba:	b003      	add	sp, #12
100093bc:	bc0c      	pop	{r2, r3}
100093be:	4690      	mov	r8, r2
100093c0:	4699      	mov	r9, r3
100093c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100093c4 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
100093c4:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
100093c6:	4b05      	ldr	r3, [pc, #20]	; (100093dc <sms_button_bt0_callback+0x18>)
100093c8:	2201      	movs	r2, #1
100093ca:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100093cc:	7858      	ldrb	r0, [r3, #1]
100093ce:	2300      	movs	r3, #0
100093d0:	2200      	movs	r2, #0
100093d2:	2102      	movs	r1, #2
100093d4:	4c02      	ldr	r4, [pc, #8]	; (100093e0 <sms_button_bt0_callback+0x1c>)
100093d6:	47a0      	blx	r4
}
100093d8:	bd10      	pop	{r4, pc}
100093da:	46c0      	nop			; (mov r8, r8)
100093dc:	1001ae84 	.word	0x1001ae84
100093e0:	1000e73d 	.word	0x1000e73d

100093e4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100093e4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100093e6:	4b05      	ldr	r3, [pc, #20]	; (100093fc <sms_button_bt1_callback+0x18>)
100093e8:	2201      	movs	r2, #1
100093ea:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100093ec:	79d8      	ldrb	r0, [r3, #7]
100093ee:	2300      	movs	r3, #0
100093f0:	2200      	movs	r2, #0
100093f2:	2102      	movs	r1, #2
100093f4:	4c02      	ldr	r4, [pc, #8]	; (10009400 <sms_button_bt1_callback+0x1c>)
100093f6:	47a0      	blx	r4
}
100093f8:	bd10      	pop	{r4, pc}
100093fa:	46c0      	nop			; (mov r8, r8)
100093fc:	1001ae84 	.word	0x1001ae84
10009400:	1000e73d 	.word	0x1000e73d

10009404 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10009404:	4b08      	ldr	r3, [pc, #32]	; (10009428 <sms_button_init_variables+0x24>)
10009406:	2200      	movs	r2, #0
10009408:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
1000940a:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000940c:	211f      	movs	r1, #31
1000940e:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10009410:	391e      	subs	r1, #30
10009412:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10009414:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10009416:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10009418:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000941a:	201d      	movs	r0, #29
1000941c:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
1000941e:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10009420:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10009422:	72da      	strb	r2, [r3, #11]
}
10009424:	4770      	bx	lr
10009426:	46c0      	nop			; (mov r8, r8)
10009428:	1001ae84 	.word	0x1001ae84

1000942c <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
1000942c:	b510      	push	{r4, lr}
1000942e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10009430:	ac01      	add	r4, sp, #4
10009432:	0020      	movs	r0, r4
10009434:	4b20      	ldr	r3, [pc, #128]	; (100094b8 <sms_button_gpio_init+0x8c>)
10009436:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009438:	2300      	movs	r3, #0
1000943a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000943c:	3302      	adds	r3, #2
1000943e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009440:	3b01      	subs	r3, #1
10009442:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10009444:	4b1d      	ldr	r3, [pc, #116]	; (100094bc <sms_button_gpio_init+0x90>)
10009446:	7858      	ldrb	r0, [r3, #1]
10009448:	0021      	movs	r1, r4
1000944a:	4b1d      	ldr	r3, [pc, #116]	; (100094c0 <sms_button_gpio_init+0x94>)
1000944c:	4798      	blx	r3
1000944e:	2800      	cmp	r0, #0
10009450:	d005      	beq.n	1000945e <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10009452:	481c      	ldr	r0, [pc, #112]	; (100094c4 <sms_button_gpio_init+0x98>)
10009454:	4b1c      	ldr	r3, [pc, #112]	; (100094c8 <sms_button_gpio_init+0x9c>)
10009456:	4798      	blx	r3
10009458:	481c      	ldr	r0, [pc, #112]	; (100094cc <sms_button_gpio_init+0xa0>)
1000945a:	4b1d      	ldr	r3, [pc, #116]	; (100094d0 <sms_button_gpio_init+0xa4>)
1000945c:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000945e:	ac01      	add	r4, sp, #4
10009460:	0020      	movs	r0, r4
10009462:	4b15      	ldr	r3, [pc, #84]	; (100094b8 <sms_button_gpio_init+0x8c>)
10009464:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009466:	2300      	movs	r3, #0
10009468:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000946a:	3302      	adds	r3, #2
1000946c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000946e:	3b01      	subs	r3, #1
10009470:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10009472:	4b12      	ldr	r3, [pc, #72]	; (100094bc <sms_button_gpio_init+0x90>)
10009474:	79d8      	ldrb	r0, [r3, #7]
10009476:	0021      	movs	r1, r4
10009478:	4b11      	ldr	r3, [pc, #68]	; (100094c0 <sms_button_gpio_init+0x94>)
1000947a:	4798      	blx	r3
1000947c:	2800      	cmp	r0, #0
1000947e:	d005      	beq.n	1000948c <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10009480:	4810      	ldr	r0, [pc, #64]	; (100094c4 <sms_button_gpio_init+0x98>)
10009482:	4b11      	ldr	r3, [pc, #68]	; (100094c8 <sms_button_gpio_init+0x9c>)
10009484:	4798      	blx	r3
10009486:	4813      	ldr	r0, [pc, #76]	; (100094d4 <sms_button_gpio_init+0xa8>)
10009488:	4b11      	ldr	r3, [pc, #68]	; (100094d0 <sms_button_gpio_init+0xa4>)
1000948a:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000948c:	ac01      	add	r4, sp, #4
1000948e:	0020      	movs	r0, r4
10009490:	4b09      	ldr	r3, [pc, #36]	; (100094b8 <sms_button_gpio_init+0x8c>)
10009492:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009494:	2300      	movs	r3, #0
10009496:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10009498:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000949a:	0021      	movs	r1, r4
1000949c:	2017      	movs	r0, #23
1000949e:	4b08      	ldr	r3, [pc, #32]	; (100094c0 <sms_button_gpio_init+0x94>)
100094a0:	4798      	blx	r3
100094a2:	2800      	cmp	r0, #0
100094a4:	d005      	beq.n	100094b2 <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
100094a6:	4807      	ldr	r0, [pc, #28]	; (100094c4 <sms_button_gpio_init+0x98>)
100094a8:	4b07      	ldr	r3, [pc, #28]	; (100094c8 <sms_button_gpio_init+0x9c>)
100094aa:	4798      	blx	r3
100094ac:	480a      	ldr	r0, [pc, #40]	; (100094d8 <sms_button_gpio_init+0xac>)
100094ae:	4b08      	ldr	r3, [pc, #32]	; (100094d0 <sms_button_gpio_init+0xa4>)
100094b0:	4798      	blx	r3
    }
}
100094b2:	b002      	add	sp, #8
100094b4:	bd10      	pop	{r4, pc}
100094b6:	46c0      	nop			; (mov r8, r8)
100094b8:	1000b509 	.word	0x1000b509
100094bc:	1001ae84 	.word	0x1001ae84
100094c0:	1000b519 	.word	0x1000b519
100094c4:	10017888 	.word	0x10017888
100094c8:	10016949 	.word	0x10016949
100094cc:	10017c38 	.word	0x10017c38
100094d0:	10016829 	.word	0x10016829
100094d4:	10017c70 	.word	0x10017c70
100094d8:	10017ca8 	.word	0x10017ca8

100094dc <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100094dc:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100094de:	4d05      	ldr	r5, [pc, #20]	; (100094f4 <sms_button_register_callbacks+0x18>)
100094e0:	7868      	ldrb	r0, [r5, #1]
100094e2:	2202      	movs	r2, #2
100094e4:	4904      	ldr	r1, [pc, #16]	; (100094f8 <sms_button_register_callbacks+0x1c>)
100094e6:	4c05      	ldr	r4, [pc, #20]	; (100094fc <sms_button_register_callbacks+0x20>)
100094e8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100094ea:	79e8      	ldrb	r0, [r5, #7]
100094ec:	2202      	movs	r2, #2
100094ee:	4904      	ldr	r1, [pc, #16]	; (10009500 <sms_button_register_callbacks+0x24>)
100094f0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100094f2:	bd70      	pop	{r4, r5, r6, pc}
100094f4:	1001ae84 	.word	0x1001ae84
100094f8:	100093c5 	.word	0x100093c5
100094fc:	1000b8f9 	.word	0x1000b8f9
10009500:	100093e5 	.word	0x100093e5

10009504 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10009504:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10009506:	201f      	movs	r0, #31
10009508:	4c08      	ldr	r4, [pc, #32]	; (1000952c <sms_button_get_state+0x28>)
1000950a:	47a0      	blx	r4
1000950c:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000950e:	201d      	movs	r0, #29
10009510:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10009512:	2d00      	cmp	r5, #0
10009514:	d004      	beq.n	10009520 <sms_button_get_state+0x1c>
10009516:	2303      	movs	r3, #3
10009518:	2800      	cmp	r0, #0
1000951a:	d104      	bne.n	10009526 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000951c:	3b02      	subs	r3, #2
1000951e:	e002      	b.n	10009526 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10009520:	1e43      	subs	r3, r0, #1
10009522:	4198      	sbcs	r0, r3
10009524:	0043      	lsls	r3, r0, #1
}
10009526:	0018      	movs	r0, r3
10009528:	bd70      	pop	{r4, r5, r6, pc}
1000952a:	46c0      	nop			; (mov r8, r8)
1000952c:	1000b6d1 	.word	0x1000b6d1

10009530 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009532:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10009534:	4c4a      	ldr	r4, [pc, #296]	; (10009660 <sms_button_fn+0x130>)
10009536:	7b63      	ldrb	r3, [r4, #13]
10009538:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000953a:	4b4a      	ldr	r3, [pc, #296]	; (10009664 <sms_button_fn+0x134>)
1000953c:	4798      	blx	r3
1000953e:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10009540:	2d00      	cmp	r5, #0
10009542:	d103      	bne.n	1000954c <sms_button_fn+0x1c>
10009544:	4848      	ldr	r0, [pc, #288]	; (10009668 <sms_button_fn+0x138>)
10009546:	4b49      	ldr	r3, [pc, #292]	; (1000966c <sms_button_fn+0x13c>)
10009548:	4798      	blx	r3
1000954a:	e004      	b.n	10009556 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000954c:	2d01      	cmp	r5, #1
1000954e:	d16e      	bne.n	1000962e <sms_button_fn+0xfe>
10009550:	4847      	ldr	r0, [pc, #284]	; (10009670 <sms_button_fn+0x140>)
10009552:	4b46      	ldr	r3, [pc, #280]	; (1000966c <sms_button_fn+0x13c>)
10009554:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10009556:	4b42      	ldr	r3, [pc, #264]	; (10009660 <sms_button_fn+0x130>)
10009558:	7b5b      	ldrb	r3, [r3, #13]
1000955a:	b2da      	uxtb	r2, r3
1000955c:	2a02      	cmp	r2, #2
1000955e:	d802      	bhi.n	10009566 <sms_button_fn+0x36>
10009560:	2b00      	cmp	r3, #0
10009562:	d059      	beq.n	10009618 <sms_button_fn+0xe8>
10009564:	e002      	b.n	1000956c <sms_button_fn+0x3c>
10009566:	2b03      	cmp	r3, #3
10009568:	d02f      	beq.n	100095ca <sms_button_fn+0x9a>
1000956a:	e063      	b.n	10009634 <sms_button_fn+0x104>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
1000956c:	4b41      	ldr	r3, [pc, #260]	; (10009674 <sms_button_fn+0x144>)
1000956e:	781b      	ldrb	r3, [r3, #0]
10009570:	b2db      	uxtb	r3, r3
10009572:	2b00      	cmp	r3, #0
10009574:	d003      	beq.n	1000957e <sms_button_fn+0x4e>
10009576:	3b22      	subs	r3, #34	; 0x22
10009578:	2b01      	cmp	r3, #1
1000957a:	d81d      	bhi.n	100095b8 <sms_button_fn+0x88>
1000957c:	e017      	b.n	100095ae <sms_button_fn+0x7e>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
1000957e:	483e      	ldr	r0, [pc, #248]	; (10009678 <sms_button_fn+0x148>)
10009580:	4b3e      	ldr	r3, [pc, #248]	; (1000967c <sms_button_fn+0x14c>)
10009582:	4798      	blx	r3
10009584:	483e      	ldr	r0, [pc, #248]	; (10009680 <sms_button_fn+0x150>)
10009586:	4b3f      	ldr	r3, [pc, #252]	; (10009684 <sms_button_fn+0x154>)
10009588:	4798      	blx	r3
1000958a:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
1000958c:	4f3e      	ldr	r7, [pc, #248]	; (10009688 <sms_button_fn+0x158>)
				if(sms_button_get_state() != button_instance.current_state) {
1000958e:	4e35      	ldr	r6, [pc, #212]	; (10009664 <sms_button_fn+0x134>)
10009590:	4d33      	ldr	r5, [pc, #204]	; (10009660 <sms_button_fn+0x130>)
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10009592:	20fa      	movs	r0, #250	; 0xfa
10009594:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10009596:	47b0      	blx	r6
10009598:	7b6b      	ldrb	r3, [r5, #13]
1000959a:	4283      	cmp	r3, r0
1000959c:	d14c      	bne.n	10009638 <sms_button_fn+0x108>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
1000959e:	483b      	ldr	r0, [pc, #236]	; (1000968c <sms_button_fn+0x15c>)
100095a0:	4b38      	ldr	r3, [pc, #224]	; (10009684 <sms_button_fn+0x154>)
100095a2:	4798      	blx	r3
100095a4:	3c01      	subs	r4, #1
100095a6:	b2e4      	uxtb	r4, r4
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
100095a8:	2c00      	cmp	r4, #0
100095aa:	d1f2      	bne.n	10009592 <sms_button_fn+0x62>
100095ac:	e048      	b.n	10009640 <sms_button_fn+0x110>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
100095ae:	2000      	movs	r0, #0
100095b0:	4b37      	ldr	r3, [pc, #220]	; (10009690 <sms_button_fn+0x160>)
100095b2:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100095b4:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
100095b6:	e052      	b.n	1000965e <sms_button_fn+0x12e>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
100095b8:	482f      	ldr	r0, [pc, #188]	; (10009678 <sms_button_fn+0x148>)
100095ba:	4b30      	ldr	r3, [pc, #192]	; (1000967c <sms_button_fn+0x14c>)
100095bc:	4798      	blx	r3
100095be:	4835      	ldr	r0, [pc, #212]	; (10009694 <sms_button_fn+0x164>)
100095c0:	4b30      	ldr	r3, [pc, #192]	; (10009684 <sms_button_fn+0x154>)
100095c2:	4798      	blx	r3
            return -1;
100095c4:	2001      	movs	r0, #1
100095c6:	4240      	negs	r0, r0
100095c8:	e049      	b.n	1000965e <sms_button_fn+0x12e>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100095ca:	4b2a      	ldr	r3, [pc, #168]	; (10009674 <sms_button_fn+0x144>)
100095cc:	781b      	ldrb	r3, [r3, #0]
100095ce:	2b00      	cmp	r3, #0
100095d0:	d10a      	bne.n	100095e8 <sms_button_fn+0xb8>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
100095d2:	4829      	ldr	r0, [pc, #164]	; (10009678 <sms_button_fn+0x148>)
100095d4:	4b29      	ldr	r3, [pc, #164]	; (1000967c <sms_button_fn+0x14c>)
100095d6:	4798      	blx	r3
100095d8:	482f      	ldr	r0, [pc, #188]	; (10009698 <sms_button_fn+0x168>)
100095da:	4b2a      	ldr	r3, [pc, #168]	; (10009684 <sms_button_fn+0x154>)
100095dc:	4798      	blx	r3
            ulp_ready = true;
100095de:	2201      	movs	r2, #1
100095e0:	4b2e      	ldr	r3, [pc, #184]	; (1000969c <sms_button_fn+0x16c>)
100095e2:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100095e4:	2000      	movs	r0, #0
100095e6:	e03a      	b.n	1000965e <sms_button_fn+0x12e>
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
100095e8:	4823      	ldr	r0, [pc, #140]	; (10009678 <sms_button_fn+0x148>)
100095ea:	4b24      	ldr	r3, [pc, #144]	; (1000967c <sms_button_fn+0x14c>)
100095ec:	4798      	blx	r3
100095ee:	482c      	ldr	r0, [pc, #176]	; (100096a0 <sms_button_fn+0x170>)
100095f0:	4b24      	ldr	r3, [pc, #144]	; (10009684 <sms_button_fn+0x154>)
100095f2:	4798      	blx	r3
100095f4:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
100095f6:	4f24      	ldr	r7, [pc, #144]	; (10009688 <sms_button_fn+0x158>)
				if(sms_button_get_state() != button_instance.current_state) {
100095f8:	4e1a      	ldr	r6, [pc, #104]	; (10009664 <sms_button_fn+0x134>)
100095fa:	4d19      	ldr	r5, [pc, #100]	; (10009660 <sms_button_fn+0x130>)
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
100095fc:	20fa      	movs	r0, #250	; 0xfa
100095fe:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10009600:	47b0      	blx	r6
10009602:	7b6b      	ldrb	r3, [r5, #13]
10009604:	4283      	cmp	r3, r0
10009606:	d119      	bne.n	1000963c <sms_button_fn+0x10c>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
10009608:	4820      	ldr	r0, [pc, #128]	; (1000968c <sms_button_fn+0x15c>)
1000960a:	4b1e      	ldr	r3, [pc, #120]	; (10009684 <sms_button_fn+0x154>)
1000960c:	4798      	blx	r3
1000960e:	3c01      	subs	r4, #1
10009610:	b2e4      	uxtb	r4, r4
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
10009612:	2c00      	cmp	r4, #0
10009614:	d1f2      	bne.n	100095fc <sms_button_fn+0xcc>
10009616:	e01b      	b.n	10009650 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
10009618:	4817      	ldr	r0, [pc, #92]	; (10009678 <sms_button_fn+0x148>)
1000961a:	4b18      	ldr	r3, [pc, #96]	; (1000967c <sms_button_fn+0x14c>)
1000961c:	4798      	blx	r3
1000961e:	4821      	ldr	r0, [pc, #132]	; (100096a4 <sms_button_fn+0x174>)
10009620:	4b18      	ldr	r3, [pc, #96]	; (10009684 <sms_button_fn+0x154>)
10009622:	4798      	blx	r3
        ulp_ready = true;
10009624:	2201      	movs	r2, #1
10009626:	4b1d      	ldr	r3, [pc, #116]	; (1000969c <sms_button_fn+0x16c>)
10009628:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000962a:	2000      	movs	r0, #0
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000962c:	e017      	b.n	1000965e <sms_button_fn+0x12e>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000962e:	2001      	movs	r0, #1
10009630:	4240      	negs	r0, r0
10009632:	e014      	b.n	1000965e <sms_button_fn+0x12e>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009634:	2000      	movs	r0, #0
10009636:	e012      	b.n	1000965e <sms_button_fn+0x12e>
10009638:	2000      	movs	r0, #0
1000963a:	e010      	b.n	1000965e <sms_button_fn+0x12e>
1000963c:	2000      	movs	r0, #0
1000963e:	e00e      	b.n	1000965e <sms_button_fn+0x12e>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				DBG_LOG("Start up now!");
10009640:	480d      	ldr	r0, [pc, #52]	; (10009678 <sms_button_fn+0x148>)
10009642:	4b0e      	ldr	r3, [pc, #56]	; (1000967c <sms_button_fn+0x14c>)
10009644:	4798      	blx	r3
10009646:	4818      	ldr	r0, [pc, #96]	; (100096a8 <sms_button_fn+0x178>)
10009648:	4b0e      	ldr	r3, [pc, #56]	; (10009684 <sms_button_fn+0x154>)
1000964a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000964c:	2000      	movs	r0, #0
1000964e:	e006      	b.n	1000965e <sms_button_fn+0x12e>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				DBG_LOG_DEV("Shut down now!");
10009650:	4809      	ldr	r0, [pc, #36]	; (10009678 <sms_button_fn+0x148>)
10009652:	4b0a      	ldr	r3, [pc, #40]	; (1000967c <sms_button_fn+0x14c>)
10009654:	4798      	blx	r3
10009656:	4815      	ldr	r0, [pc, #84]	; (100096ac <sms_button_fn+0x17c>)
10009658:	4b0a      	ldr	r3, [pc, #40]	; (10009684 <sms_button_fn+0x154>)
1000965a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000965c:	2000      	movs	r0, #0
}
1000965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009660:	1001ae84 	.word	0x1001ae84
10009664:	10009505 	.word	0x10009505
10009668:	10017cf0 	.word	0x10017cf0
1000966c:	100097dd 	.word	0x100097dd
10009670:	10017d04 	.word	0x10017d04
10009674:	1001ae80 	.word	0x1001ae80
10009678:	10017888 	.word	0x10017888
1000967c:	10016949 	.word	0x10016949
10009680:	10017d18 	.word	0x10017d18
10009684:	10016829 	.word	0x10016829
10009688:	1000ae8d 	.word	0x1000ae8d
1000968c:	10017d38 	.word	0x10017d38
10009690:	10009119 	.word	0x10009119
10009694:	10017d3c 	.word	0x10017d3c
10009698:	10017d64 	.word	0x10017d64
1000969c:	1001ae7d 	.word	0x1001ae7d
100096a0:	10017d88 	.word	0x10017d88
100096a4:	10017dac 	.word	0x10017dac
100096a8:	10017dc4 	.word	0x10017dc4
100096ac:	10017dd4 	.word	0x10017dd4

100096b0 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
100096b0:	b510      	push	{r4, lr}
100096b2:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
100096b4:	2800      	cmp	r0, #0
100096b6:	d104      	bne.n	100096c2 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
100096b8:	4b0c      	ldr	r3, [pc, #48]	; (100096ec <sms_button_toggle_callback+0x3c>)
100096ba:	7858      	ldrb	r0, [r3, #1]
100096bc:	4b0c      	ldr	r3, [pc, #48]	; (100096f0 <sms_button_toggle_callback+0x40>)
100096be:	4798      	blx	r3
100096c0:	e005      	b.n	100096ce <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
100096c2:	2801      	cmp	r0, #1
100096c4:	d103      	bne.n	100096ce <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
100096c6:	4b09      	ldr	r3, [pc, #36]	; (100096ec <sms_button_toggle_callback+0x3c>)
100096c8:	7858      	ldrb	r0, [r3, #1]
100096ca:	4b0a      	ldr	r3, [pc, #40]	; (100096f4 <sms_button_toggle_callback+0x44>)
100096cc:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
100096ce:	2c00      	cmp	r4, #0
100096d0:	d104      	bne.n	100096dc <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
100096d2:	4b06      	ldr	r3, [pc, #24]	; (100096ec <sms_button_toggle_callback+0x3c>)
100096d4:	79d8      	ldrb	r0, [r3, #7]
100096d6:	4b06      	ldr	r3, [pc, #24]	; (100096f0 <sms_button_toggle_callback+0x40>)
100096d8:	4798      	blx	r3
100096da:	e005      	b.n	100096e8 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
100096dc:	2c01      	cmp	r4, #1
100096de:	d103      	bne.n	100096e8 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
100096e0:	4b02      	ldr	r3, [pc, #8]	; (100096ec <sms_button_toggle_callback+0x3c>)
100096e2:	79d8      	ldrb	r0, [r3, #7]
100096e4:	4b03      	ldr	r3, [pc, #12]	; (100096f4 <sms_button_toggle_callback+0x44>)
100096e6:	4798      	blx	r3
    }
}
100096e8:	bd10      	pop	{r4, pc}
100096ea:	46c0      	nop			; (mov r8, r8)
100096ec:	1001ae84 	.word	0x1001ae84
100096f0:	1000b9c9 	.word	0x1000b9c9
100096f4:	1000ba25 	.word	0x1000ba25

100096f8 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
100096f8:	b510      	push	{r4, lr}
100096fa:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100096fc:	466b      	mov	r3, sp
100096fe:	1dda      	adds	r2, r3, #7
10009700:	2300      	movs	r3, #0
10009702:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10009704:	4c0d      	ldr	r4, [pc, #52]	; (1000973c <sms_button_define_services+0x44>)
10009706:	0021      	movs	r1, r4
10009708:	2000      	movs	r0, #0
1000970a:	4b0d      	ldr	r3, [pc, #52]	; (10009740 <sms_button_define_services+0x48>)
1000970c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000970e:	0020      	movs	r0, r4
10009710:	4b0c      	ldr	r3, [pc, #48]	; (10009744 <sms_button_define_services+0x4c>)
10009712:	4798      	blx	r3
10009714:	1e04      	subs	r4, r0, #0
10009716:	d007      	beq.n	10009728 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10009718:	480b      	ldr	r0, [pc, #44]	; (10009748 <sms_button_define_services+0x50>)
1000971a:	4b0c      	ldr	r3, [pc, #48]	; (1000974c <sms_button_define_services+0x54>)
1000971c:	4798      	blx	r3
1000971e:	0021      	movs	r1, r4
10009720:	480b      	ldr	r0, [pc, #44]	; (10009750 <sms_button_define_services+0x58>)
10009722:	4b0c      	ldr	r3, [pc, #48]	; (10009754 <sms_button_define_services+0x5c>)
10009724:	4798      	blx	r3
10009726:	e007      	b.n	10009738 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10009728:	4807      	ldr	r0, [pc, #28]	; (10009748 <sms_button_define_services+0x50>)
1000972a:	4b08      	ldr	r3, [pc, #32]	; (1000974c <sms_button_define_services+0x54>)
1000972c:	4798      	blx	r3
1000972e:	4b0a      	ldr	r3, [pc, #40]	; (10009758 <sms_button_define_services+0x60>)
10009730:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10009732:	480a      	ldr	r0, [pc, #40]	; (1000975c <sms_button_define_services+0x64>)
10009734:	4b07      	ldr	r3, [pc, #28]	; (10009754 <sms_button_define_services+0x5c>)
10009736:	4798      	blx	r3
    }
10009738:	b002      	add	sp, #8
1000973a:	bd10      	pop	{r4, pc}
1000973c:	1001ae94 	.word	0x1001ae94
10009740:	100092dd 	.word	0x100092dd
10009744:	100092b9 	.word	0x100092b9
10009748:	10017888 	.word	0x10017888
1000974c:	10016949 	.word	0x10016949
10009750:	10017de4 	.word	0x10017de4
10009754:	10016829 	.word	0x10016829
10009758:	1001ae84 	.word	0x1001ae84
1000975c:	10017e28 	.word	0x10017e28

10009760 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10009760:	b510      	push	{r4, lr}
10009762:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10009764:	ac01      	add	r4, sp, #4
10009766:	0020      	movs	r0, r4
10009768:	4b15      	ldr	r3, [pc, #84]	; (100097c0 <sms_monitor_configure_gpio+0x60>)
1000976a:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000976c:	2301      	movs	r3, #1
1000976e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10009770:	0021      	movs	r1, r4
10009772:	200e      	movs	r0, #14
10009774:	4b13      	ldr	r3, [pc, #76]	; (100097c4 <sms_monitor_configure_gpio+0x64>)
10009776:	4798      	blx	r3
10009778:	2800      	cmp	r0, #0
1000977a:	d005      	beq.n	10009788 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000977c:	4812      	ldr	r0, [pc, #72]	; (100097c8 <sms_monitor_configure_gpio+0x68>)
1000977e:	4b13      	ldr	r3, [pc, #76]	; (100097cc <sms_monitor_configure_gpio+0x6c>)
10009780:	4798      	blx	r3
10009782:	4813      	ldr	r0, [pc, #76]	; (100097d0 <sms_monitor_configure_gpio+0x70>)
10009784:	4b13      	ldr	r3, [pc, #76]	; (100097d4 <sms_monitor_configure_gpio+0x74>)
10009786:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10009788:	2100      	movs	r1, #0
1000978a:	200e      	movs	r0, #14
1000978c:	4b12      	ldr	r3, [pc, #72]	; (100097d8 <sms_monitor_configure_gpio+0x78>)
1000978e:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10009790:	ac01      	add	r4, sp, #4
10009792:	0020      	movs	r0, r4
10009794:	4b0a      	ldr	r3, [pc, #40]	; (100097c0 <sms_monitor_configure_gpio+0x60>)
10009796:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009798:	2301      	movs	r3, #1
1000979a:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000979c:	0021      	movs	r1, r4
1000979e:	200f      	movs	r0, #15
100097a0:	4b08      	ldr	r3, [pc, #32]	; (100097c4 <sms_monitor_configure_gpio+0x64>)
100097a2:	4798      	blx	r3
100097a4:	2800      	cmp	r0, #0
100097a6:	d005      	beq.n	100097b4 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
100097a8:	4807      	ldr	r0, [pc, #28]	; (100097c8 <sms_monitor_configure_gpio+0x68>)
100097aa:	4b08      	ldr	r3, [pc, #32]	; (100097cc <sms_monitor_configure_gpio+0x6c>)
100097ac:	4798      	blx	r3
100097ae:	4808      	ldr	r0, [pc, #32]	; (100097d0 <sms_monitor_configure_gpio+0x70>)
100097b0:	4b08      	ldr	r3, [pc, #32]	; (100097d4 <sms_monitor_configure_gpio+0x74>)
100097b2:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
100097b4:	2100      	movs	r1, #0
100097b6:	200f      	movs	r0, #15
100097b8:	4b07      	ldr	r3, [pc, #28]	; (100097d8 <sms_monitor_configure_gpio+0x78>)
100097ba:	4798      	blx	r3
}
100097bc:	b002      	add	sp, #8
100097be:	bd10      	pop	{r4, pc}
100097c0:	1000b509 	.word	0x1000b509
100097c4:	1000b519 	.word	0x1000b519
100097c8:	10017888 	.word	0x10017888
100097cc:	10016949 	.word	0x10016949
100097d0:	10017e70 	.word	0x10017e70
100097d4:	10016829 	.word	0x10016829
100097d8:	1000b721 	.word	0x1000b721

100097dc <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
100097dc:	b570      	push	{r4, r5, r6, lr}
100097de:	b084      	sub	sp, #16
100097e0:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
100097e2:	480c      	ldr	r0, [pc, #48]	; (10009814 <sms_monitor_get_states+0x38>)
100097e4:	4b0c      	ldr	r3, [pc, #48]	; (10009818 <sms_monitor_get_states+0x3c>)
100097e6:	4798      	blx	r3
100097e8:	4b0c      	ldr	r3, [pc, #48]	; (1000981c <sms_monitor_get_states+0x40>)
100097ea:	7819      	ldrb	r1, [r3, #0]
100097ec:	4b0c      	ldr	r3, [pc, #48]	; (10009820 <sms_monitor_get_states+0x44>)
100097ee:	7818      	ldrb	r0, [r3, #0]
100097f0:	4b0c      	ldr	r3, [pc, #48]	; (10009824 <sms_monitor_get_states+0x48>)
100097f2:	781d      	ldrb	r5, [r3, #0]
100097f4:	4b0c      	ldr	r3, [pc, #48]	; (10009828 <sms_monitor_get_states+0x4c>)
100097f6:	781e      	ldrb	r6, [r3, #0]
100097f8:	4a0c      	ldr	r2, [pc, #48]	; (1000982c <sms_monitor_get_states+0x50>)
100097fa:	7b53      	ldrb	r3, [r2, #13]
100097fc:	7b12      	ldrb	r2, [r2, #12]
100097fe:	9603      	str	r6, [sp, #12]
10009800:	9502      	str	r5, [sp, #8]
10009802:	9001      	str	r0, [sp, #4]
10009804:	9100      	str	r1, [sp, #0]
10009806:	0021      	movs	r1, r4
10009808:	4809      	ldr	r0, [pc, #36]	; (10009830 <sms_monitor_get_states+0x54>)
1000980a:	4c0a      	ldr	r4, [pc, #40]	; (10009834 <sms_monitor_get_states+0x58>)
1000980c:	47a0      	blx	r4
}
1000980e:	b004      	add	sp, #16
10009810:	bd70      	pop	{r4, r5, r6, pc}
10009812:	46c0      	nop			; (mov r8, r8)
10009814:	10017888 	.word	0x10017888
10009818:	10016949 	.word	0x10016949
1000981c:	1001ae80 	.word	0x1001ae80
10009820:	1001ae74 	.word	0x1001ae74
10009824:	1001afa3 	.word	0x1001afa3
10009828:	1001ae7c 	.word	0x1001ae7c
1000982c:	1001ae84 	.word	0x1001ae84
10009830:	10017e90 	.word	0x10017e90
10009834:	10016829 	.word	0x10016829

10009838 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009838:	b530      	push	{r4, r5, lr}
1000983a:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000983c:	2010      	movs	r0, #16
1000983e:	4c14      	ldr	r4, [pc, #80]	; (10009890 <sms_i2c_master_configure+0x58>)
10009840:	47a0      	blx	r4
10009842:	4b14      	ldr	r3, [pc, #80]	; (10009894 <sms_i2c_master_configure+0x5c>)
10009844:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009846:	2010      	movs	r0, #16
10009848:	47a0      	blx	r4
1000984a:	4b13      	ldr	r3, [pc, #76]	; (10009898 <sms_i2c_master_configure+0x60>)
1000984c:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000984e:	ac01      	add	r4, sp, #4
10009850:	0020      	movs	r0, r4
10009852:	4b12      	ldr	r3, [pc, #72]	; (1000989c <sms_i2c_master_configure+0x64>)
10009854:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10009856:	2303      	movs	r3, #3
10009858:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000985a:	331b      	adds	r3, #27
1000985c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000985e:	3b16      	subs	r3, #22
10009860:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10009862:	3301      	adds	r3, #1
10009864:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10009866:	3b07      	subs	r3, #7
10009868:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000986a:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000986c:	4d0c      	ldr	r5, [pc, #48]	; (100098a0 <sms_i2c_master_configure+0x68>)
1000986e:	4c0d      	ldr	r4, [pc, #52]	; (100098a4 <sms_i2c_master_configure+0x6c>)
10009870:	aa01      	add	r2, sp, #4
10009872:	490d      	ldr	r1, [pc, #52]	; (100098a8 <sms_i2c_master_configure+0x70>)
10009874:	0028      	movs	r0, r5
10009876:	47a0      	blx	r4
10009878:	2800      	cmp	r0, #0
1000987a:	d1f9      	bne.n	10009870 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000987c:	4b08      	ldr	r3, [pc, #32]	; (100098a0 <sms_i2c_master_configure+0x68>)
1000987e:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10009880:	2128      	movs	r1, #40	; 0x28
10009882:	5c53      	ldrb	r3, [r2, r1]
10009884:	07db      	lsls	r3, r3, #31
10009886:	d4fc      	bmi.n	10009882 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009888:	2301      	movs	r3, #1
1000988a:	7513      	strb	r3, [r2, #20]
}
1000988c:	b007      	add	sp, #28
1000988e:	bd30      	pop	{r4, r5, pc}
10009890:	1001669d 	.word	0x1001669d
10009894:	1001afa8 	.word	0x1001afa8
10009898:	1001af8c 	.word	0x1001af8c
1000989c:	10008305 	.word	0x10008305
100098a0:	1001af98 	.word	0x1001af98
100098a4:	1000831d 	.word	0x1000831d
100098a8:	40003000 	.word	0x40003000

100098ac <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
100098ae:	4c12      	ldr	r4, [pc, #72]	; (100098f8 <sms_i2c_master_write+0x4c>)
100098b0:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
100098b2:	1c50      	adds	r0, r2, #1
100098b4:	b2c0      	uxtb	r0, r0
100098b6:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100098b8:	6860      	ldr	r0, [r4, #4]
100098ba:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100098bc:	2a00      	cmp	r2, #0
100098be:	d00e      	beq.n	100098de <sms_i2c_master_write+0x32>
100098c0:	2000      	movs	r0, #0
100098c2:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100098c4:	5c18      	ldrb	r0, [r3, r0]
100098c6:	6865      	ldr	r5, [r4, #4]
100098c8:	5468      	strb	r0, [r5, r1]
100098ca:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100098cc:	b2c9      	uxtb	r1, r1
100098ce:	428a      	cmp	r2, r1
100098d0:	d8f7      	bhi.n	100098c2 <sms_i2c_master_write+0x16>
100098d2:	e004      	b.n	100098de <sms_i2c_master_write+0x32>
100098d4:	3c01      	subs	r4, #1
100098d6:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100098d8:	2c00      	cmp	r4, #0
100098da:	d104      	bne.n	100098e6 <sms_i2c_master_write+0x3a>
100098dc:	e009      	b.n	100098f2 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100098de:	4c07      	ldr	r4, [pc, #28]	; (100098fc <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100098e0:	4e05      	ldr	r6, [pc, #20]	; (100098f8 <sms_i2c_master_write+0x4c>)
100098e2:	4d07      	ldr	r5, [pc, #28]	; (10009900 <sms_i2c_master_write+0x54>)
100098e4:	4f07      	ldr	r7, [pc, #28]	; (10009904 <sms_i2c_master_write+0x58>)
100098e6:	0031      	movs	r1, r6
100098e8:	0028      	movs	r0, r5
100098ea:	47b8      	blx	r7
100098ec:	2800      	cmp	r0, #0
100098ee:	d1f1      	bne.n	100098d4 <sms_i2c_master_write+0x28>
100098f0:	e001      	b.n	100098f6 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100098f2:	2001      	movs	r0, #1
100098f4:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100098f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100098f8:	1001afa8 	.word	0x1001afa8
100098fc:	000003e9 	.word	0x000003e9
10009900:	1001af98 	.word	0x1001af98
10009904:	100083b5 	.word	0x100083b5

10009908 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10009908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000990a:	4647      	mov	r7, r8
1000990c:	b480      	push	{r7}
1000990e:	0017      	movs	r7, r2
10009910:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009912:	b280      	uxth	r0, r0
10009914:	4b1d      	ldr	r3, [pc, #116]	; (1000998c <sms_i2c_master_read+0x84>)
10009916:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10009918:	2201      	movs	r2, #1
1000991a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000991c:	685b      	ldr	r3, [r3, #4]
1000991e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009920:	4b1b      	ldr	r3, [pc, #108]	; (10009990 <sms_i2c_master_read+0x88>)
10009922:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10009924:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009926:	4c1b      	ldr	r4, [pc, #108]	; (10009994 <sms_i2c_master_read+0x8c>)
10009928:	4e18      	ldr	r6, [pc, #96]	; (1000998c <sms_i2c_master_read+0x84>)
1000992a:	4d1b      	ldr	r5, [pc, #108]	; (10009998 <sms_i2c_master_read+0x90>)
1000992c:	e003      	b.n	10009936 <sms_i2c_master_read+0x2e>
1000992e:	3c01      	subs	r4, #1
10009930:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009932:	2c00      	cmp	r4, #0
10009934:	d01f      	beq.n	10009976 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009936:	0031      	movs	r1, r6
10009938:	4818      	ldr	r0, [pc, #96]	; (1000999c <sms_i2c_master_read+0x94>)
1000993a:	47a8      	blx	r5
1000993c:	2800      	cmp	r0, #0
1000993e:	d1f6      	bne.n	1000992e <sms_i2c_master_read+0x26>
10009940:	4e14      	ldr	r6, [pc, #80]	; (10009994 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009942:	4d13      	ldr	r5, [pc, #76]	; (10009990 <sms_i2c_master_read+0x88>)
10009944:	4c16      	ldr	r4, [pc, #88]	; (100099a0 <sms_i2c_master_read+0x98>)
10009946:	e003      	b.n	10009950 <sms_i2c_master_read+0x48>
10009948:	3e01      	subs	r6, #1
1000994a:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000994c:	2e00      	cmp	r6, #0
1000994e:	d015      	beq.n	1000997c <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009950:	0029      	movs	r1, r5
10009952:	4812      	ldr	r0, [pc, #72]	; (1000999c <sms_i2c_master_read+0x94>)
10009954:	47a0      	blx	r4
10009956:	2800      	cmp	r0, #0
10009958:	d1f6      	bne.n	10009948 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000995a:	2f00      	cmp	r7, #0
1000995c:	d011      	beq.n	10009982 <sms_i2c_master_read+0x7a>
1000995e:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009960:	490b      	ldr	r1, [pc, #44]	; (10009990 <sms_i2c_master_read+0x88>)
10009962:	684a      	ldr	r2, [r1, #4]
10009964:	5cd2      	ldrb	r2, [r2, r3]
10009966:	4640      	mov	r0, r8
10009968:	54c2      	strb	r2, [r0, r3]
1000996a:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000996c:	b2da      	uxtb	r2, r3
1000996e:	4297      	cmp	r7, r2
10009970:	d8f7      	bhi.n	10009962 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10009972:	2000      	movs	r0, #0
10009974:	e006      	b.n	10009984 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009976:	2001      	movs	r0, #1
10009978:	4240      	negs	r0, r0
1000997a:	e003      	b.n	10009984 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000997c:	2001      	movs	r0, #1
1000997e:	4240      	negs	r0, r0
10009980:	e000      	b.n	10009984 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10009982:	2000      	movs	r0, #0
10009984:	bc04      	pop	{r2}
10009986:	4690      	mov	r8, r2
10009988:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000998a:	46c0      	nop			; (mov r8, r8)
1000998c:	1001afa8 	.word	0x1001afa8
10009990:	1001af8c 	.word	0x1001af8c
10009994:	000003e9 	.word	0x000003e9
10009998:	100083d9 	.word	0x100083d9
1000999c:	1001af98 	.word	0x1001af98
100099a0:	10008391 	.word	0x10008391

100099a4 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
100099a4:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
100099a6:	2380      	movs	r3, #128	; 0x80
100099a8:	4a06      	ldr	r2, [pc, #24]	; (100099c4 <sms_imu_interrupt_callback+0x20>)
100099aa:	5cd3      	ldrb	r3, [r2, r3]
100099ac:	2b00      	cmp	r3, #0
100099ae:	d008      	beq.n	100099c2 <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
100099b0:	2101      	movs	r1, #1
100099b2:	2381      	movs	r3, #129	; 0x81
100099b4:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
100099b6:	2300      	movs	r3, #0
100099b8:	2200      	movs	r2, #0
100099ba:	3101      	adds	r1, #1
100099bc:	201e      	movs	r0, #30
100099be:	4c02      	ldr	r4, [pc, #8]	; (100099c8 <sms_imu_interrupt_callback+0x24>)
100099c0:	47a0      	blx	r4
	}
}
100099c2:	bd10      	pop	{r4, pc}
100099c4:	1001afbc 	.word	0x1001afbc
100099c8:	1000e73d 	.word	0x1000e73d

100099cc <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
100099cc:	b510      	push	{r4, lr}
100099ce:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
100099d0:	ac01      	add	r4, sp, #4
100099d2:	0020      	movs	r0, r4
100099d4:	4b0a      	ldr	r3, [pc, #40]	; (10009a00 <sms_imu_configure_gpio+0x34>)
100099d6:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
100099d8:	2300      	movs	r3, #0
100099da:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
100099dc:	3302      	adds	r3, #2
100099de:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
100099e0:	3b01      	subs	r3, #1
100099e2:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
100099e4:	0021      	movs	r1, r4
100099e6:	201e      	movs	r0, #30
100099e8:	4b06      	ldr	r3, [pc, #24]	; (10009a04 <sms_imu_configure_gpio+0x38>)
100099ea:	4798      	blx	r3
100099ec:	2800      	cmp	r0, #0
100099ee:	d005      	beq.n	100099fc <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
100099f0:	4805      	ldr	r0, [pc, #20]	; (10009a08 <sms_imu_configure_gpio+0x3c>)
100099f2:	4b06      	ldr	r3, [pc, #24]	; (10009a0c <sms_imu_configure_gpio+0x40>)
100099f4:	4798      	blx	r3
100099f6:	4806      	ldr	r0, [pc, #24]	; (10009a10 <sms_imu_configure_gpio+0x44>)
100099f8:	4b06      	ldr	r3, [pc, #24]	; (10009a14 <sms_imu_configure_gpio+0x48>)
100099fa:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
100099fc:	b002      	add	sp, #8
100099fe:	bd10      	pop	{r4, pc}
10009a00:	1000b509 	.word	0x1000b509
10009a04:	1000b519 	.word	0x1000b519
10009a08:	10017888 	.word	0x10017888
10009a0c:	10016949 	.word	0x10016949
10009a10:	10017ed0 	.word	0x10017ed0
10009a14:	10016829 	.word	0x10016829

10009a18 <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
10009a18:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_MPU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
10009a1a:	2202      	movs	r2, #2
10009a1c:	4902      	ldr	r1, [pc, #8]	; (10009a28 <sms_imu_register_callbacks+0x10>)
10009a1e:	201e      	movs	r0, #30
10009a20:	4b02      	ldr	r3, [pc, #8]	; (10009a2c <sms_imu_register_callbacks+0x14>)
10009a22:	4798      	blx	r3
}
10009a24:	bd10      	pop	{r4, pc}
10009a26:	46c0      	nop			; (mov r8, r8)
10009a28:	100099a5 	.word	0x100099a5
10009a2c:	1000b8f9 	.word	0x1000b8f9

10009a30 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
10009a30:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009a32:	201e      	movs	r0, #30
10009a34:	4b03      	ldr	r3, [pc, #12]	; (10009a44 <sms_imu_enable_callback+0x14>)
10009a36:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
10009a38:	2101      	movs	r1, #1
10009a3a:	2380      	movs	r3, #128	; 0x80
10009a3c:	4a02      	ldr	r2, [pc, #8]	; (10009a48 <sms_imu_enable_callback+0x18>)
10009a3e:	54d1      	strb	r1, [r2, r3]
}
10009a40:	bd10      	pop	{r4, pc}
10009a42:	46c0      	nop			; (mov r8, r8)
10009a44:	1000b9c9 	.word	0x1000b9c9
10009a48:	1001afbc 	.word	0x1001afbc

10009a4c <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
10009a4c:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009a4e:	201e      	movs	r0, #30
10009a50:	4b03      	ldr	r3, [pc, #12]	; (10009a60 <sms_imu_disable_callback+0x14>)
10009a52:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
10009a54:	2100      	movs	r1, #0
10009a56:	2380      	movs	r3, #128	; 0x80
10009a58:	4a02      	ldr	r2, [pc, #8]	; (10009a64 <sms_imu_disable_callback+0x18>)
10009a5a:	54d1      	strb	r1, [r2, r3]
}
10009a5c:	bd10      	pop	{r4, pc}
10009a5e:	46c0      	nop			; (mov r8, r8)
10009a60:	1000ba25 	.word	0x1000ba25
10009a64:	1001afbc 	.word	0x1001afbc

10009a68 <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
10009a68:	b510      	push	{r4, lr}
10009a6a:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
10009a6c:	466b      	mov	r3, sp
10009a6e:	1dda      	adds	r2, r3, #7
10009a70:	2300      	movs	r3, #0
10009a72:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
10009a74:	4c0e      	ldr	r4, [pc, #56]	; (10009ab0 <sms_imu_define_services+0x48>)
10009a76:	0021      	movs	r1, r4
10009a78:	2002      	movs	r0, #2
10009a7a:	4b0e      	ldr	r3, [pc, #56]	; (10009ab4 <sms_imu_define_services+0x4c>)
10009a7c:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
10009a7e:	0020      	movs	r0, r4
10009a80:	4b0d      	ldr	r3, [pc, #52]	; (10009ab8 <sms_imu_define_services+0x50>)
10009a82:	4798      	blx	r3
10009a84:	1e04      	subs	r4, r0, #0
10009a86:	d007      	beq.n	10009a98 <sms_imu_define_services+0x30>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10009a88:	480c      	ldr	r0, [pc, #48]	; (10009abc <sms_imu_define_services+0x54>)
10009a8a:	4b0d      	ldr	r3, [pc, #52]	; (10009ac0 <sms_imu_define_services+0x58>)
10009a8c:	4798      	blx	r3
10009a8e:	0021      	movs	r1, r4
10009a90:	480c      	ldr	r0, [pc, #48]	; (10009ac4 <sms_imu_define_services+0x5c>)
10009a92:	4b0d      	ldr	r3, [pc, #52]	; (10009ac8 <sms_imu_define_services+0x60>)
10009a94:	4798      	blx	r3
10009a96:	e008      	b.n	10009aaa <sms_imu_define_services+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
10009a98:	4808      	ldr	r0, [pc, #32]	; (10009abc <sms_imu_define_services+0x54>)
10009a9a:	4b09      	ldr	r3, [pc, #36]	; (10009ac0 <sms_imu_define_services+0x58>)
10009a9c:	4798      	blx	r3
10009a9e:	2396      	movs	r3, #150	; 0x96
10009aa0:	4a0a      	ldr	r2, [pc, #40]	; (10009acc <sms_imu_define_services+0x64>)
10009aa2:	5ad1      	ldrh	r1, [r2, r3]
10009aa4:	480a      	ldr	r0, [pc, #40]	; (10009ad0 <sms_imu_define_services+0x68>)
10009aa6:	4b08      	ldr	r3, [pc, #32]	; (10009ac8 <sms_imu_define_services+0x60>)
10009aa8:	4798      	blx	r3
	}
}
10009aaa:	b002      	add	sp, #8
10009aac:	bd10      	pop	{r4, pc}
10009aae:	46c0      	nop			; (mov r8, r8)
10009ab0:	1001b040 	.word	0x1001b040
10009ab4:	100092dd 	.word	0x100092dd
10009ab8:	100092b9 	.word	0x100092b9
10009abc:	10017888 	.word	0x10017888
10009ac0:	10016949 	.word	0x10016949
10009ac4:	10017f10 	.word	0x10017f10
10009ac8:	10016829 	.word	0x10016829
10009acc:	1001afbc 	.word	0x1001afbc
10009ad0:	10017f50 	.word	0x10017f50

10009ad4 <read_accel_data>:
	}
	return 0;
}
/* Read accel data */
void read_accel_data(int16_t *destination)
{
10009ad4:	b530      	push	{r4, r5, lr}
10009ad6:	b083      	sub	sp, #12
10009ad8:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009ada:	466b      	mov	r3, sp
10009adc:	2206      	movs	r2, #6
10009ade:	213b      	movs	r1, #59	; 0x3b
10009ae0:	2069      	movs	r0, #105	; 0x69
10009ae2:	4d0c      	ldr	r5, [pc, #48]	; (10009b14 <read_accel_data+0x40>)
10009ae4:	47a8      	blx	r5
/* Read accel data */
void read_accel_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009ae6:	466b      	mov	r3, sp
10009ae8:	781b      	ldrb	r3, [r3, #0]
10009aea:	021b      	lsls	r3, r3, #8
10009aec:	466a      	mov	r2, sp
10009aee:	7852      	ldrb	r2, [r2, #1]
10009af0:	4313      	orrs	r3, r2
10009af2:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009af4:	466b      	mov	r3, sp
10009af6:	789b      	ldrb	r3, [r3, #2]
10009af8:	021b      	lsls	r3, r3, #8
10009afa:	466a      	mov	r2, sp
10009afc:	78d2      	ldrb	r2, [r2, #3]
10009afe:	4313      	orrs	r3, r2
10009b00:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
10009b02:	466b      	mov	r3, sp
10009b04:	791b      	ldrb	r3, [r3, #4]
10009b06:	021b      	lsls	r3, r3, #8
10009b08:	466a      	mov	r2, sp
10009b0a:	7952      	ldrb	r2, [r2, #5]
10009b0c:	4313      	orrs	r3, r2
10009b0e:	80a3      	strh	r3, [r4, #4]
}
10009b10:	b003      	add	sp, #12
10009b12:	bd30      	pop	{r4, r5, pc}
10009b14:	10009909 	.word	0x10009909

10009b18 <read_gyro_data>:
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
10009b18:	b530      	push	{r4, r5, lr}
10009b1a:	b083      	sub	sp, #12
10009b1c:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009b1e:	466b      	mov	r3, sp
10009b20:	2206      	movs	r2, #6
10009b22:	2143      	movs	r1, #67	; 0x43
10009b24:	2069      	movs	r0, #105	; 0x69
10009b26:	4d0c      	ldr	r5, [pc, #48]	; (10009b58 <read_gyro_data+0x40>)
10009b28:	47a8      	blx	r5
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009b2a:	466b      	mov	r3, sp
10009b2c:	781b      	ldrb	r3, [r3, #0]
10009b2e:	021b      	lsls	r3, r3, #8
10009b30:	466a      	mov	r2, sp
10009b32:	7852      	ldrb	r2, [r2, #1]
10009b34:	4313      	orrs	r3, r2
10009b36:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009b38:	466b      	mov	r3, sp
10009b3a:	789b      	ldrb	r3, [r3, #2]
10009b3c:	021b      	lsls	r3, r3, #8
10009b3e:	466a      	mov	r2, sp
10009b40:	78d2      	ldrb	r2, [r2, #3]
10009b42:	4313      	orrs	r3, r2
10009b44:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
10009b46:	466b      	mov	r3, sp
10009b48:	791b      	ldrb	r3, [r3, #4]
10009b4a:	021b      	lsls	r3, r3, #8
10009b4c:	466a      	mov	r2, sp
10009b4e:	7952      	ldrb	r2, [r2, #5]
10009b50:	4313      	orrs	r3, r2
10009b52:	80a3      	strh	r3, [r4, #4]
}
10009b54:	b003      	add	sp, #12
10009b56:	bd30      	pop	{r4, r5, pc}
10009b58:	10009909 	.word	0x10009909

10009b5c <get_Mres>:
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	switch(m_scale) {
10009b5c:	2800      	cmp	r0, #0
10009b5e:	d002      	beq.n	10009b66 <get_Mres+0xa>
10009b60:	2801      	cmp	r0, #1
10009b62:	d002      	beq.n	10009b6a <get_Mres+0xe>
10009b64:	e003      	b.n	10009b6e <get_Mres+0x12>
		case MFS_14BITS:
		retVal = 10.0 * 4912.0 / 8190.0;
10009b66:	4803      	ldr	r0, [pc, #12]	; (10009b74 <get_Mres+0x18>)
10009b68:	e002      	b.n	10009b70 <get_Mres+0x14>
		break;
		
		case MFS_16BITS:
		retVal = 10.0 * 4912.0 / 32760.0;
10009b6a:	4803      	ldr	r0, [pc, #12]	; (10009b78 <get_Mres+0x1c>)
		break;
10009b6c:	e000      	b.n	10009b70 <get_Mres+0x14>


/* Utility functions */
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
10009b6e:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
10009b70:	4770      	bx	lr
10009b72:	46c0      	nop			; (mov r8, r8)
10009b74:	40bfebff 	.word	0x40bfebff
10009b78:	3fbfebff 	.word	0x3fbfebff

10009b7c <get_Gres>:
{
	float retVal = 0;
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	switch(g_scale) {
10009b7c:	2801      	cmp	r0, #1
10009b7e:	d008      	beq.n	10009b92 <get_Gres+0x16>
10009b80:	2800      	cmp	r0, #0
10009b82:	d004      	beq.n	10009b8e <get_Gres+0x12>
10009b84:	2802      	cmp	r0, #2
10009b86:	d006      	beq.n	10009b96 <get_Gres+0x1a>
10009b88:	2803      	cmp	r0, #3
10009b8a:	d006      	beq.n	10009b9a <get_Gres+0x1e>
10009b8c:	e007      	b.n	10009b9e <get_Gres+0x22>
		case GFS_250DPS:
		retVal = 250.0 / 32768.0;
10009b8e:	4805      	ldr	r0, [pc, #20]	; (10009ba4 <get_Gres+0x28>)
10009b90:	e006      	b.n	10009ba0 <get_Gres+0x24>
		break;
		
		case GFS_500DPS:
		retVal = 500.0 / 32768.0;
10009b92:	4805      	ldr	r0, [pc, #20]	; (10009ba8 <get_Gres+0x2c>)
		break;
10009b94:	e004      	b.n	10009ba0 <get_Gres+0x24>
		
		case GFS_1000DPS:
		retVal = 1000.0 / 32768.0;
10009b96:	4805      	ldr	r0, [pc, #20]	; (10009bac <get_Gres+0x30>)
		break;
10009b98:	e002      	b.n	10009ba0 <get_Gres+0x24>
		
		case GFS_2000DPS:
		retVal = 2000.0 / 32768.0;
10009b9a:	4805      	ldr	r0, [pc, #20]	; (10009bb0 <get_Gres+0x34>)
		break;
10009b9c:	e000      	b.n	10009ba0 <get_Gres+0x24>
	}
	return retVal;
}
float get_Gres(uint8_t g_scale)
{
	float retVal = 0;
10009b9e:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
10009ba0:	4770      	bx	lr
10009ba2:	46c0      	nop			; (mov r8, r8)
10009ba4:	3bfa0000 	.word	0x3bfa0000
10009ba8:	3c7a0000 	.word	0x3c7a0000
10009bac:	3cfa0000 	.word	0x3cfa0000
10009bb0:	3d7a0000 	.word	0x3d7a0000

10009bb4 <get_Ares>:
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
	switch(a_scale) {
10009bb4:	2801      	cmp	r0, #1
10009bb6:	d009      	beq.n	10009bcc <get_Ares+0x18>
10009bb8:	2800      	cmp	r0, #0
10009bba:	d004      	beq.n	10009bc6 <get_Ares+0x12>
10009bbc:	2802      	cmp	r0, #2
10009bbe:	d008      	beq.n	10009bd2 <get_Ares+0x1e>
10009bc0:	2803      	cmp	r0, #3
10009bc2:	d009      	beq.n	10009bd8 <get_Ares+0x24>
10009bc4:	e00b      	b.n	10009bde <get_Ares+0x2a>
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
		retVal = 2.0/32768.0;
10009bc6:	20e2      	movs	r0, #226	; 0xe2
10009bc8:	0580      	lsls	r0, r0, #22
10009bca:	e009      	b.n	10009be0 <get_Ares+0x2c>
		break;
		case AFS_4G:
		retVal = 4.0/32768.0;
10009bcc:	20e4      	movs	r0, #228	; 0xe4
10009bce:	0580      	lsls	r0, r0, #22
		break;
10009bd0:	e006      	b.n	10009be0 <get_Ares+0x2c>
		case AFS_8G:
		retVal = 8.0/32768.0;
10009bd2:	20e6      	movs	r0, #230	; 0xe6
10009bd4:	0580      	lsls	r0, r0, #22
		break;
10009bd6:	e003      	b.n	10009be0 <get_Ares+0x2c>
		case AFS_16G:
		retVal = 16.0/32768.0;
10009bd8:	20e8      	movs	r0, #232	; 0xe8
10009bda:	0580      	lsls	r0, r0, #22
		break;
10009bdc:	e000      	b.n	10009be0 <get_Ares+0x2c>
	}
	return retVal;
}
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
10009bde:	2000      	movs	r0, #0
		case AFS_16G:
		retVal = 16.0/32768.0;
		break;
	}
	return retVal;
}
10009be0:	4770      	bx	lr
10009be2:	46c0      	nop			; (mov r8, r8)

10009be4 <writeByte>:


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10009be4:	b510      	push	{r4, lr}
10009be6:	b082      	sub	sp, #8
10009be8:	466b      	mov	r3, sp
10009bea:	3307      	adds	r3, #7
10009bec:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009bee:	2201      	movs	r2, #1
10009bf0:	4c01      	ldr	r4, [pc, #4]	; (10009bf8 <writeByte+0x14>)
10009bf2:	47a0      	blx	r4
}
10009bf4:	b002      	add	sp, #8
10009bf6:	bd10      	pop	{r4, pc}
10009bf8:	100098ad 	.word	0x100098ad

10009bfc <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
10009bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bfe:	465f      	mov	r7, fp
10009c00:	4656      	mov	r6, sl
10009c02:	464d      	mov	r5, r9
10009c04:	4644      	mov	r4, r8
10009c06:	b4f0      	push	{r4, r5, r6, r7}
10009c08:	b08f      	sub	sp, #60	; 0x3c
10009c0a:	9003      	str	r0, [sp, #12]
10009c0c:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009c0e:	2280      	movs	r2, #128	; 0x80
10009c10:	216b      	movs	r1, #107	; 0x6b
10009c12:	2069      	movs	r0, #105	; 0x69
10009c14:	4ccd      	ldr	r4, [pc, #820]	; (10009f4c <sms_imu_mpu_calibrate+0x350>)
10009c16:	47a0      	blx	r4
	delay_ms(100);
10009c18:	2064      	movs	r0, #100	; 0x64
10009c1a:	4dcd      	ldr	r5, [pc, #820]	; (10009f50 <sms_imu_mpu_calibrate+0x354>)
10009c1c:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009c1e:	2201      	movs	r2, #1
10009c20:	216b      	movs	r1, #107	; 0x6b
10009c22:	2069      	movs	r0, #105	; 0x69
10009c24:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009c26:	2200      	movs	r2, #0
10009c28:	216c      	movs	r1, #108	; 0x6c
10009c2a:	2069      	movs	r0, #105	; 0x69
10009c2c:	47a0      	blx	r4
	delay_ms(200);
10009c2e:	20c8      	movs	r0, #200	; 0xc8
10009c30:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009c32:	2200      	movs	r2, #0
10009c34:	2138      	movs	r1, #56	; 0x38
10009c36:	2069      	movs	r0, #105	; 0x69
10009c38:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009c3a:	2200      	movs	r2, #0
10009c3c:	2123      	movs	r1, #35	; 0x23
10009c3e:	2069      	movs	r0, #105	; 0x69
10009c40:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009c42:	2200      	movs	r2, #0
10009c44:	216b      	movs	r1, #107	; 0x6b
10009c46:	2069      	movs	r0, #105	; 0x69
10009c48:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009c4a:	2200      	movs	r2, #0
10009c4c:	2124      	movs	r1, #36	; 0x24
10009c4e:	2069      	movs	r0, #105	; 0x69
10009c50:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10009c52:	2200      	movs	r2, #0
10009c54:	216a      	movs	r1, #106	; 0x6a
10009c56:	2069      	movs	r0, #105	; 0x69
10009c58:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009c5a:	220c      	movs	r2, #12
10009c5c:	216a      	movs	r1, #106	; 0x6a
10009c5e:	2069      	movs	r0, #105	; 0x69
10009c60:	47a0      	blx	r4
	delay_ms(15);
10009c62:	200f      	movs	r0, #15
10009c64:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10009c66:	2201      	movs	r2, #1
10009c68:	211a      	movs	r1, #26
10009c6a:	2069      	movs	r0, #105	; 0x69
10009c6c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009c6e:	2200      	movs	r2, #0
10009c70:	2119      	movs	r1, #25
10009c72:	2069      	movs	r0, #105	; 0x69
10009c74:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10009c76:	2200      	movs	r2, #0
10009c78:	211b      	movs	r1, #27
10009c7a:	2069      	movs	r0, #105	; 0x69
10009c7c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009c7e:	2200      	movs	r2, #0
10009c80:	211c      	movs	r1, #28
10009c82:	2069      	movs	r0, #105	; 0x69
10009c84:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10009c86:	2240      	movs	r2, #64	; 0x40
10009c88:	216a      	movs	r1, #106	; 0x6a
10009c8a:	2069      	movs	r0, #105	; 0x69
10009c8c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10009c8e:	2278      	movs	r2, #120	; 0x78
10009c90:	2123      	movs	r1, #35	; 0x23
10009c92:	2069      	movs	r0, #105	; 0x69
10009c94:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10009c96:	2028      	movs	r0, #40	; 0x28
10009c98:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009c9a:	2200      	movs	r2, #0
10009c9c:	2123      	movs	r1, #35	; 0x23
10009c9e:	2069      	movs	r0, #105	; 0x69
10009ca0:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009ca2:	ac0b      	add	r4, sp, #44	; 0x2c
10009ca4:	0023      	movs	r3, r4
10009ca6:	2202      	movs	r2, #2
10009ca8:	2172      	movs	r1, #114	; 0x72
10009caa:	2069      	movs	r0, #105	; 0x69
10009cac:	4da9      	ldr	r5, [pc, #676]	; (10009f54 <sms_imu_mpu_calibrate+0x358>)
10009cae:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009cb0:	7820      	ldrb	r0, [r4, #0]
10009cb2:	0200      	lsls	r0, r0, #8
10009cb4:	7863      	ldrb	r3, [r4, #1]
10009cb6:	4318      	orrs	r0, r3
10009cb8:	210c      	movs	r1, #12
10009cba:	4ba7      	ldr	r3, [pc, #668]	; (10009f58 <sms_imu_mpu_calibrate+0x35c>)
10009cbc:	4798      	blx	r3
10009cbe:	b283      	uxth	r3, r0
10009cc0:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
10009cc2:	2b00      	cmp	r3, #0
10009cc4:	d042      	beq.n	10009d4c <sms_imu_mpu_calibrate+0x150>
10009cc6:	2300      	movs	r3, #0
10009cc8:	4698      	mov	r8, r3
10009cca:	2700      	movs	r7, #0
10009ccc:	469b      	mov	fp, r3
10009cce:	469a      	mov	sl, r3
10009cd0:	4699      	mov	r9, r3
10009cd2:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cd4:	ac0b      	add	r4, sp, #44	; 0x2c
10009cd6:	9301      	str	r3, [sp, #4]
10009cd8:	0023      	movs	r3, r4
10009cda:	220c      	movs	r2, #12
10009cdc:	2174      	movs	r1, #116	; 0x74
10009cde:	2069      	movs	r0, #105	; 0x69
10009ce0:	4e9c      	ldr	r6, [pc, #624]	; (10009f54 <sms_imu_mpu_calibrate+0x358>)
10009ce2:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10009ce4:	7823      	ldrb	r3, [r4, #0]
10009ce6:	021b      	lsls	r3, r3, #8
10009ce8:	7862      	ldrb	r2, [r4, #1]
10009cea:	4313      	orrs	r3, r2
10009cec:	b21b      	sxth	r3, r3
10009cee:	9a01      	ldr	r2, [sp, #4]
10009cf0:	4694      	mov	ip, r2
10009cf2:	449c      	add	ip, r3
10009cf4:	4663      	mov	r3, ip
10009cf6:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009cf8:	78a3      	ldrb	r3, [r4, #2]
10009cfa:	021b      	lsls	r3, r3, #8
10009cfc:	78e2      	ldrb	r2, [r4, #3]
10009cfe:	4313      	orrs	r3, r2
10009d00:	b21b      	sxth	r3, r3
10009d02:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10009d04:	7923      	ldrb	r3, [r4, #4]
10009d06:	021b      	lsls	r3, r3, #8
10009d08:	7962      	ldrb	r2, [r4, #5]
10009d0a:	4313      	orrs	r3, r2
10009d0c:	b21b      	sxth	r3, r3
10009d0e:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009d10:	79a3      	ldrb	r3, [r4, #6]
10009d12:	021b      	lsls	r3, r3, #8
10009d14:	79e2      	ldrb	r2, [r4, #7]
10009d16:	4313      	orrs	r3, r2
10009d18:	b21b      	sxth	r3, r3
10009d1a:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009d1c:	7a23      	ldrb	r3, [r4, #8]
10009d1e:	021b      	lsls	r3, r3, #8
10009d20:	7a62      	ldrb	r2, [r4, #9]
10009d22:	4313      	orrs	r3, r2
10009d24:	b21b      	sxth	r3, r3
10009d26:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009d28:	7aa3      	ldrb	r3, [r4, #10]
10009d2a:	021b      	lsls	r3, r3, #8
10009d2c:	7ae2      	ldrb	r2, [r4, #11]
10009d2e:	4313      	orrs	r3, r2
10009d30:	b21b      	sxth	r3, r3
10009d32:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009d34:	3501      	adds	r5, #1
10009d36:	b2ad      	uxth	r5, r5
10009d38:	9b02      	ldr	r3, [sp, #8]
10009d3a:	42ab      	cmp	r3, r5
10009d3c:	d1cc      	bne.n	10009cd8 <sms_imu_mpu_calibrate+0xdc>
10009d3e:	4653      	mov	r3, sl
10009d40:	46ba      	mov	sl, r7
10009d42:	465a      	mov	r2, fp
10009d44:	46e3      	mov	fp, ip
10009d46:	0016      	movs	r6, r2
10009d48:	001f      	movs	r7, r3
10009d4a:	e006      	b.n	10009d5a <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009d4c:	2300      	movs	r3, #0
10009d4e:	4698      	mov	r8, r3
10009d50:	2700      	movs	r7, #0
10009d52:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009d54:	469b      	mov	fp, r3
10009d56:	469a      	mov	sl, r3
10009d58:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009d5a:	4c80      	ldr	r4, [pc, #512]	; (10009f5c <sms_imu_mpu_calibrate+0x360>)
10009d5c:	9902      	ldr	r1, [sp, #8]
10009d5e:	4658      	mov	r0, fp
10009d60:	47a0      	blx	r4
10009d62:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009d64:	9b02      	ldr	r3, [sp, #8]
10009d66:	469b      	mov	fp, r3
10009d68:	0019      	movs	r1, r3
10009d6a:	4650      	mov	r0, sl
10009d6c:	47a0      	blx	r4
10009d6e:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009d70:	4659      	mov	r1, fp
10009d72:	4648      	mov	r0, r9
10009d74:	47a0      	blx	r4
10009d76:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009d78:	4659      	mov	r1, fp
10009d7a:	4640      	mov	r0, r8
10009d7c:	47a0      	blx	r4
10009d7e:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009d80:	4659      	mov	r1, fp
10009d82:	0038      	movs	r0, r7
10009d84:	47a0      	blx	r4
10009d86:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009d88:	4659      	mov	r1, fp
10009d8a:	0030      	movs	r0, r6
10009d8c:	47a0      	blx	r4
10009d8e:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
10009d90:	464b      	mov	r3, r9
10009d92:	2b00      	cmp	r3, #0
10009d94:	dd03      	ble.n	10009d9e <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009d96:	4b72      	ldr	r3, [pc, #456]	; (10009f60 <sms_imu_mpu_calibrate+0x364>)
10009d98:	469c      	mov	ip, r3
10009d9a:	44e1      	add	r9, ip
10009d9c:	e003      	b.n	10009da6 <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10009d9e:	2380      	movs	r3, #128	; 0x80
10009da0:	01db      	lsls	r3, r3, #7
10009da2:	469c      	mov	ip, r3
10009da4:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009da6:	9b01      	ldr	r3, [sp, #4]
10009da8:	4259      	negs	r1, r3
10009daa:	17ca      	asrs	r2, r1, #31
10009dac:	2303      	movs	r3, #3
10009dae:	401a      	ands	r2, r3
10009db0:	1852      	adds	r2, r2, r1
10009db2:	1091      	asrs	r1, r2, #2
10009db4:	1292      	asrs	r2, r2, #10
10009db6:	b2d2      	uxtb	r2, r2
10009db8:	ac0b      	add	r4, sp, #44	; 0x2c
10009dba:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009dbc:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10009dbe:	9902      	ldr	r1, [sp, #8]
10009dc0:	4248      	negs	r0, r1
10009dc2:	17c1      	asrs	r1, r0, #31
10009dc4:	4019      	ands	r1, r3
10009dc6:	1809      	adds	r1, r1, r0
10009dc8:	1088      	asrs	r0, r1, #2
10009dca:	1289      	asrs	r1, r1, #10
10009dcc:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10009dce:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10009dd0:	9e04      	ldr	r6, [sp, #16]
10009dd2:	4271      	negs	r1, r6
10009dd4:	17c8      	asrs	r0, r1, #31
10009dd6:	4003      	ands	r3, r0
10009dd8:	185b      	adds	r3, r3, r1
10009dda:	1099      	asrs	r1, r3, #2
10009ddc:	129b      	asrs	r3, r3, #10
10009dde:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10009de0:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10009de2:	2113      	movs	r1, #19
10009de4:	2069      	movs	r0, #105	; 0x69
10009de6:	4e59      	ldr	r6, [pc, #356]	; (10009f4c <sms_imu_mpu_calibrate+0x350>)
10009de8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009dea:	7862      	ldrb	r2, [r4, #1]
10009dec:	2114      	movs	r1, #20
10009dee:	2069      	movs	r0, #105	; 0x69
10009df0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009df2:	78a2      	ldrb	r2, [r4, #2]
10009df4:	2115      	movs	r1, #21
10009df6:	2069      	movs	r0, #105	; 0x69
10009df8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009dfa:	78e2      	ldrb	r2, [r4, #3]
10009dfc:	2116      	movs	r1, #22
10009dfe:	2069      	movs	r0, #105	; 0x69
10009e00:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009e02:	7922      	ldrb	r2, [r4, #4]
10009e04:	2117      	movs	r1, #23
10009e06:	2069      	movs	r0, #105	; 0x69
10009e08:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009e0a:	7962      	ldrb	r2, [r4, #5]
10009e0c:	2118      	movs	r1, #24
10009e0e:	2069      	movs	r0, #105	; 0x69
10009e10:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10009e12:	4f54      	ldr	r7, [pc, #336]	; (10009f64 <sms_imu_mpu_calibrate+0x368>)
10009e14:	9801      	ldr	r0, [sp, #4]
10009e16:	47b8      	blx	r7
10009e18:	4e53      	ldr	r6, [pc, #332]	; (10009f68 <sms_imu_mpu_calibrate+0x36c>)
10009e1a:	4954      	ldr	r1, [pc, #336]	; (10009f6c <sms_imu_mpu_calibrate+0x370>)
10009e1c:	47b0      	blx	r6
10009e1e:	9b03      	ldr	r3, [sp, #12]
10009e20:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009e22:	9802      	ldr	r0, [sp, #8]
10009e24:	47b8      	blx	r7
10009e26:	4951      	ldr	r1, [pc, #324]	; (10009f6c <sms_imu_mpu_calibrate+0x370>)
10009e28:	47b0      	blx	r6
10009e2a:	9b03      	ldr	r3, [sp, #12]
10009e2c:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009e2e:	9804      	ldr	r0, [sp, #16]
10009e30:	47b8      	blx	r7
10009e32:	494e      	ldr	r1, [pc, #312]	; (10009f6c <sms_imu_mpu_calibrate+0x370>)
10009e34:	47b0      	blx	r6
10009e36:	9b03      	ldr	r3, [sp, #12]
10009e38:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009e3a:	0023      	movs	r3, r4
10009e3c:	2202      	movs	r2, #2
10009e3e:	2177      	movs	r1, #119	; 0x77
10009e40:	2069      	movs	r0, #105	; 0x69
10009e42:	4e44      	ldr	r6, [pc, #272]	; (10009f54 <sms_imu_mpu_calibrate+0x358>)
10009e44:	46b0      	mov	r8, r6
10009e46:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009e48:	7827      	ldrb	r7, [r4, #0]
10009e4a:	023f      	lsls	r7, r7, #8
10009e4c:	7863      	ldrb	r3, [r4, #1]
10009e4e:	431f      	orrs	r7, r3
10009e50:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009e52:	0023      	movs	r3, r4
10009e54:	2202      	movs	r2, #2
10009e56:	217a      	movs	r1, #122	; 0x7a
10009e58:	2069      	movs	r0, #105	; 0x69
10009e5a:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009e5c:	7826      	ldrb	r6, [r4, #0]
10009e5e:	0236      	lsls	r6, r6, #8
10009e60:	7863      	ldrb	r3, [r4, #1]
10009e62:	431e      	orrs	r6, r3
10009e64:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009e66:	0023      	movs	r3, r4
10009e68:	2202      	movs	r2, #2
10009e6a:	217d      	movs	r1, #125	; 0x7d
10009e6c:	2069      	movs	r0, #105	; 0x69
10009e6e:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009e70:	7823      	ldrb	r3, [r4, #0]
10009e72:	021b      	lsls	r3, r3, #8
10009e74:	7861      	ldrb	r1, [r4, #1]
10009e76:	4319      	orrs	r1, r3
10009e78:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009e7a:	ab07      	add	r3, sp, #28
10009e7c:	2200      	movs	r2, #0
10009e7e:	701a      	strb	r2, [r3, #0]
10009e80:	705a      	strb	r2, [r3, #1]
10009e82:	709a      	strb	r2, [r3, #2]
10009e84:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10009e86:	2401      	movs	r4, #1
10009e88:	009a      	lsls	r2, r3, #2
10009e8a:	a808      	add	r0, sp, #32
10009e8c:	5812      	ldr	r2, [r2, r0]
10009e8e:	4222      	tst	r2, r4
10009e90:	d001      	beq.n	10009e96 <sms_imu_mpu_calibrate+0x29a>
10009e92:	aa07      	add	r2, sp, #28
10009e94:	549c      	strb	r4, [r3, r2]
10009e96:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009e98:	2b03      	cmp	r3, #3
10009e9a:	d1f5      	bne.n	10009e88 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009e9c:	17ea      	asrs	r2, r5, #31
10009e9e:	3304      	adds	r3, #4
10009ea0:	401a      	ands	r2, r3
10009ea2:	1952      	adds	r2, r2, r5
10009ea4:	10d2      	asrs	r2, r2, #3
10009ea6:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009ea8:	4652      	mov	r2, sl
10009eaa:	17d0      	asrs	r0, r2, #31
10009eac:	4018      	ands	r0, r3
10009eae:	4450      	add	r0, sl
10009eb0:	10c0      	asrs	r0, r0, #3
10009eb2:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009eb4:	464a      	mov	r2, r9
10009eb6:	17d2      	asrs	r2, r2, #31
10009eb8:	4013      	ands	r3, r2
10009eba:	444b      	add	r3, r9
10009ebc:	10da      	asrs	r2, r3, #3
10009ebe:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009ec0:	123a      	asrs	r2, r7, #8
10009ec2:	b2d2      	uxtb	r2, r2
10009ec4:	ac0b      	add	r4, sp, #44	; 0x2c
10009ec6:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009ec8:	a907      	add	r1, sp, #28
10009eca:	7808      	ldrb	r0, [r1, #0]
10009ecc:	4307      	orrs	r7, r0
10009ece:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009ed0:	1230      	asrs	r0, r6, #8
10009ed2:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009ed4:	7848      	ldrb	r0, [r1, #1]
10009ed6:	4306      	orrs	r6, r0
10009ed8:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009eda:	1218      	asrs	r0, r3, #8
10009edc:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009ede:	7889      	ldrb	r1, [r1, #2]
10009ee0:	430b      	orrs	r3, r1
10009ee2:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009ee4:	2177      	movs	r1, #119	; 0x77
10009ee6:	2069      	movs	r0, #105	; 0x69
10009ee8:	4e18      	ldr	r6, [pc, #96]	; (10009f4c <sms_imu_mpu_calibrate+0x350>)
10009eea:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009eec:	7862      	ldrb	r2, [r4, #1]
10009eee:	2178      	movs	r1, #120	; 0x78
10009ef0:	2069      	movs	r0, #105	; 0x69
10009ef2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009ef4:	78a2      	ldrb	r2, [r4, #2]
10009ef6:	217a      	movs	r1, #122	; 0x7a
10009ef8:	2069      	movs	r0, #105	; 0x69
10009efa:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009efc:	78e2      	ldrb	r2, [r4, #3]
10009efe:	217b      	movs	r1, #123	; 0x7b
10009f00:	2069      	movs	r0, #105	; 0x69
10009f02:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009f04:	7922      	ldrb	r2, [r4, #4]
10009f06:	217d      	movs	r1, #125	; 0x7d
10009f08:	2069      	movs	r0, #105	; 0x69
10009f0a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009f0c:	7962      	ldrb	r2, [r4, #5]
10009f0e:	217e      	movs	r1, #126	; 0x7e
10009f10:	2069      	movs	r0, #105	; 0x69
10009f12:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009f14:	4e13      	ldr	r6, [pc, #76]	; (10009f64 <sms_imu_mpu_calibrate+0x368>)
10009f16:	0028      	movs	r0, r5
10009f18:	47b0      	blx	r6
10009f1a:	4c15      	ldr	r4, [pc, #84]	; (10009f70 <sms_imu_mpu_calibrate+0x374>)
10009f1c:	21e2      	movs	r1, #226	; 0xe2
10009f1e:	0589      	lsls	r1, r1, #22
10009f20:	47a0      	blx	r4
10009f22:	9d05      	ldr	r5, [sp, #20]
10009f24:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009f26:	4650      	mov	r0, sl
10009f28:	47b0      	blx	r6
10009f2a:	21e2      	movs	r1, #226	; 0xe2
10009f2c:	0589      	lsls	r1, r1, #22
10009f2e:	47a0      	blx	r4
10009f30:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009f32:	4648      	mov	r0, r9
10009f34:	47b0      	blx	r6
10009f36:	21e2      	movs	r1, #226	; 0xe2
10009f38:	0589      	lsls	r1, r1, #22
10009f3a:	47a0      	blx	r4
10009f3c:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009f3e:	b00f      	add	sp, #60	; 0x3c
10009f40:	bc3c      	pop	{r2, r3, r4, r5}
10009f42:	4690      	mov	r8, r2
10009f44:	4699      	mov	r9, r3
10009f46:	46a2      	mov	sl, r4
10009f48:	46ab      	mov	fp, r5
10009f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f4c:	10009be5 	.word	0x10009be5
10009f50:	1000ae8d 	.word	0x1000ae8d
10009f54:	10009909 	.word	0x10009909
10009f58:	10013699 	.word	0x10013699
10009f5c:	100137ad 	.word	0x100137ad
10009f60:	ffffc000 	.word	0xffffc000
10009f64:	10014761 	.word	0x10014761
10009f68:	10013e25 	.word	0x10013e25
10009f6c:	43030000 	.word	0x43030000
10009f70:	100141b9 	.word	0x100141b9

10009f74 <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009f74:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f76:	465f      	mov	r7, fp
10009f78:	4656      	mov	r6, sl
10009f7a:	464d      	mov	r5, r9
10009f7c:	4644      	mov	r4, r8
10009f7e:	b4f0      	push	{r4, r5, r6, r7}
10009f80:	b083      	sub	sp, #12
10009f82:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009f84:	4c36      	ldr	r4, [pc, #216]	; (1000a060 <sms_imu_comp_initialize+0xec>)
10009f86:	2301      	movs	r3, #1
10009f88:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009f8a:	3301      	adds	r3, #1
10009f8c:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
10009f8e:	4b35      	ldr	r3, [pc, #212]	; (1000a064 <sms_imu_comp_initialize+0xf0>)
10009f90:	6363      	str	r3, [r4, #52]	; 0x34
	imu_device.config.mag_bias[1] = 120.0;
10009f92:	4b35      	ldr	r3, [pc, #212]	; (1000a068 <sms_imu_comp_initialize+0xf4>)
10009f94:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[2] = 125.0;
10009f96:	4b35      	ldr	r3, [pc, #212]	; (1000a06c <sms_imu_comp_initialize+0xf8>)
10009f98:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009f9a:	2200      	movs	r2, #0
10009f9c:	210a      	movs	r1, #10
10009f9e:	200c      	movs	r0, #12
10009fa0:	4e33      	ldr	r6, [pc, #204]	; (1000a070 <sms_imu_comp_initialize+0xfc>)
10009fa2:	47b0      	blx	r6
	delay_ms(10);
10009fa4:	200a      	movs	r0, #10
10009fa6:	4b33      	ldr	r3, [pc, #204]	; (1000a074 <sms_imu_comp_initialize+0x100>)
10009fa8:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009faa:	220f      	movs	r2, #15
10009fac:	210a      	movs	r1, #10
10009fae:	200c      	movs	r0, #12
10009fb0:	47b0      	blx	r6
	delay_ms(10);
10009fb2:	200a      	movs	r0, #10
10009fb4:	4b2f      	ldr	r3, [pc, #188]	; (1000a074 <sms_imu_comp_initialize+0x100>)
10009fb6:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009fb8:	af01      	add	r7, sp, #4
10009fba:	003b      	movs	r3, r7
10009fbc:	2203      	movs	r2, #3
10009fbe:	2110      	movs	r1, #16
10009fc0:	200c      	movs	r0, #12
10009fc2:	4d2d      	ldr	r5, [pc, #180]	; (1000a078 <sms_imu_comp_initialize+0x104>)
10009fc4:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009fc6:	7838      	ldrb	r0, [r7, #0]
10009fc8:	3880      	subs	r0, #128	; 0x80
10009fca:	4b2c      	ldr	r3, [pc, #176]	; (1000a07c <sms_imu_comp_initialize+0x108>)
10009fcc:	469b      	mov	fp, r3
10009fce:	4798      	blx	r3
10009fd0:	4b2b      	ldr	r3, [pc, #172]	; (1000a080 <sms_imu_comp_initialize+0x10c>)
10009fd2:	469a      	mov	sl, r3
10009fd4:	4798      	blx	r3
10009fd6:	2200      	movs	r2, #0
10009fd8:	4b2a      	ldr	r3, [pc, #168]	; (1000a084 <sms_imu_comp_initialize+0x110>)
10009fda:	4d2b      	ldr	r5, [pc, #172]	; (1000a088 <sms_imu_comp_initialize+0x114>)
10009fdc:	47a8      	blx	r5
10009fde:	2200      	movs	r2, #0
10009fe0:	4b2a      	ldr	r3, [pc, #168]	; (1000a08c <sms_imu_comp_initialize+0x118>)
10009fe2:	4d2b      	ldr	r5, [pc, #172]	; (1000a090 <sms_imu_comp_initialize+0x11c>)
10009fe4:	47a8      	blx	r5
10009fe6:	4b2b      	ldr	r3, [pc, #172]	; (1000a094 <sms_imu_comp_initialize+0x120>)
10009fe8:	4699      	mov	r9, r3
10009fea:	4798      	blx	r3
10009fec:	4643      	mov	r3, r8
10009fee:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009ff0:	7878      	ldrb	r0, [r7, #1]
10009ff2:	3880      	subs	r0, #128	; 0x80
10009ff4:	47d8      	blx	fp
10009ff6:	47d0      	blx	sl
10009ff8:	2200      	movs	r2, #0
10009ffa:	4b22      	ldr	r3, [pc, #136]	; (1000a084 <sms_imu_comp_initialize+0x110>)
10009ffc:	4d22      	ldr	r5, [pc, #136]	; (1000a088 <sms_imu_comp_initialize+0x114>)
10009ffe:	47a8      	blx	r5
1000a000:	2200      	movs	r2, #0
1000a002:	4b22      	ldr	r3, [pc, #136]	; (1000a08c <sms_imu_comp_initialize+0x118>)
1000a004:	4d22      	ldr	r5, [pc, #136]	; (1000a090 <sms_imu_comp_initialize+0x11c>)
1000a006:	47a8      	blx	r5
1000a008:	47c8      	blx	r9
1000a00a:	4643      	mov	r3, r8
1000a00c:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
1000a00e:	78b8      	ldrb	r0, [r7, #2]
1000a010:	3880      	subs	r0, #128	; 0x80
1000a012:	47d8      	blx	fp
1000a014:	47d0      	blx	sl
1000a016:	2200      	movs	r2, #0
1000a018:	4b1a      	ldr	r3, [pc, #104]	; (1000a084 <sms_imu_comp_initialize+0x110>)
1000a01a:	4d1b      	ldr	r5, [pc, #108]	; (1000a088 <sms_imu_comp_initialize+0x114>)
1000a01c:	47a8      	blx	r5
1000a01e:	2200      	movs	r2, #0
1000a020:	4b1a      	ldr	r3, [pc, #104]	; (1000a08c <sms_imu_comp_initialize+0x118>)
1000a022:	4d1b      	ldr	r5, [pc, #108]	; (1000a090 <sms_imu_comp_initialize+0x11c>)
1000a024:	47a8      	blx	r5
1000a026:	47c8      	blx	r9
1000a028:	4643      	mov	r3, r8
1000a02a:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
1000a02c:	2200      	movs	r2, #0
1000a02e:	210a      	movs	r1, #10
1000a030:	200c      	movs	r0, #12
1000a032:	47b0      	blx	r6
	delay_ms(10);
1000a034:	200a      	movs	r0, #10
1000a036:	4b0f      	ldr	r3, [pc, #60]	; (1000a074 <sms_imu_comp_initialize+0x100>)
1000a038:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
1000a03a:	78a2      	ldrb	r2, [r4, #2]
1000a03c:	0112      	lsls	r2, r2, #4
1000a03e:	78e3      	ldrb	r3, [r4, #3]
1000a040:	431a      	orrs	r2, r3
1000a042:	b2d2      	uxtb	r2, r2
1000a044:	210a      	movs	r1, #10
1000a046:	200c      	movs	r0, #12
1000a048:	47b0      	blx	r6
	delay_ms(10);
1000a04a:	200a      	movs	r0, #10
1000a04c:	4b09      	ldr	r3, [pc, #36]	; (1000a074 <sms_imu_comp_initialize+0x100>)
1000a04e:	4798      	blx	r3
}
1000a050:	b003      	add	sp, #12
1000a052:	bc3c      	pop	{r2, r3, r4, r5}
1000a054:	4690      	mov	r8, r2
1000a056:	4699      	mov	r9, r3
1000a058:	46a2      	mov	sl, r4
1000a05a:	46ab      	mov	fp, r5
1000a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a05e:	46c0      	nop			; (mov r8, r8)
1000a060:	1001afbc 	.word	0x1001afbc
1000a064:	43eb0000 	.word	0x43eb0000
1000a068:	42f00000 	.word	0x42f00000
1000a06c:	42fa0000 	.word	0x42fa0000
1000a070:	10009be5 	.word	0x10009be5
1000a074:	1000ae8d 	.word	0x1000ae8d
1000a078:	10009909 	.word	0x10009909
1000a07c:	10014761 	.word	0x10014761
1000a080:	10016449 	.word	0x10016449
1000a084:	3f700000 	.word	0x3f700000
1000a088:	1001570d 	.word	0x1001570d
1000a08c:	3ff00000 	.word	0x3ff00000
1000a090:	1001486d 	.word	0x1001486d
1000a094:	100164f1 	.word	0x100164f1

1000a098 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
1000a098:	b530      	push	{r4, r5, lr}
1000a09a:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
1000a09c:	ac01      	add	r4, sp, #4
1000a09e:	0023      	movs	r3, r4
1000a0a0:	2201      	movs	r2, #1
1000a0a2:	4d02      	ldr	r5, [pc, #8]	; (1000a0ac <readByte+0x14>)
1000a0a4:	47a8      	blx	r5
	return data[0];
1000a0a6:	7820      	ldrb	r0, [r4, #0]
}
1000a0a8:	b003      	add	sp, #12
1000a0aa:	bd30      	pop	{r4, r5, pc}
1000a0ac:	10009909 	.word	0x10009909

1000a0b0 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
1000a0b0:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
1000a0b2:	2100      	movs	r1, #0
1000a0b4:	200c      	movs	r0, #12
1000a0b6:	4b03      	ldr	r3, [pc, #12]	; (1000a0c4 <sms_imu_comp_check+0x14>)
1000a0b8:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
1000a0ba:	3848      	subs	r0, #72	; 0x48
1000a0bc:	1e43      	subs	r3, r0, #1
1000a0be:	4198      	sbcs	r0, r3
1000a0c0:	4240      	negs	r0, r0
}
1000a0c2:	bd10      	pop	{r4, pc}
1000a0c4:	1000a099 	.word	0x1000a099

1000a0c8 <sms_imu_mpu_initialize>:


/* Initialization functions... */
/* MPU */
void sms_imu_mpu_initialize(void)
{
1000a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	imu_device.config.a_scale = AFS_2G;
1000a0ca:	4f25      	ldr	r7, [pc, #148]	; (1000a160 <sms_imu_mpu_initialize+0x98>)
1000a0cc:	2300      	movs	r3, #0
1000a0ce:	703b      	strb	r3, [r7, #0]
	imu_device.config.g_scale = GFS_250DPS;
1000a0d0:	707b      	strb	r3, [r7, #1]
	imu_device.config.ahrs = false;
1000a0d2:	224c      	movs	r2, #76	; 0x4c
1000a0d4:	54bb      	strb	r3, [r7, r2]

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
1000a0d6:	2200      	movs	r2, #0
1000a0d8:	216b      	movs	r1, #107	; 0x6b
1000a0da:	2069      	movs	r0, #105	; 0x69
1000a0dc:	4c21      	ldr	r4, [pc, #132]	; (1000a164 <sms_imu_mpu_initialize+0x9c>)
1000a0de:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
1000a0e0:	2064      	movs	r0, #100	; 0x64
1000a0e2:	4d21      	ldr	r5, [pc, #132]	; (1000a168 <sms_imu_mpu_initialize+0xa0>)
1000a0e4:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
1000a0e6:	2201      	movs	r2, #1
1000a0e8:	216b      	movs	r1, #107	; 0x6b
1000a0ea:	2069      	movs	r0, #105	; 0x69
1000a0ec:	47a0      	blx	r4
	delay_ms(200);
1000a0ee:	20c8      	movs	r0, #200	; 0xc8
1000a0f0:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
1000a0f2:	2205      	movs	r2, #5
1000a0f4:	211a      	movs	r1, #26
1000a0f6:	2069      	movs	r0, #105	; 0x69
1000a0f8:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
1000a0fa:	2263      	movs	r2, #99	; 0x63
1000a0fc:	2119      	movs	r1, #25
1000a0fe:	2069      	movs	r0, #105	; 0x69
1000a100:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
1000a102:	211b      	movs	r1, #27
1000a104:	2069      	movs	r0, #105	; 0x69
1000a106:	4e19      	ldr	r6, [pc, #100]	; (1000a16c <sms_imu_mpu_initialize+0xa4>)
1000a108:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
1000a10a:	787a      	ldrb	r2, [r7, #1]
1000a10c:	00d2      	lsls	r2, r2, #3
1000a10e:	231a      	movs	r3, #26
1000a110:	4398      	bics	r0, r3
1000a112:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
1000a114:	b2d2      	uxtb	r2, r2
1000a116:	211b      	movs	r1, #27
1000a118:	2069      	movs	r0, #105	; 0x69
1000a11a:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
1000a11c:	211c      	movs	r1, #28
1000a11e:	2069      	movs	r0, #105	; 0x69
1000a120:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
1000a122:	783a      	ldrb	r2, [r7, #0]
1000a124:	00d2      	lsls	r2, r2, #3
1000a126:	2318      	movs	r3, #24
1000a128:	4398      	bics	r0, r3
1000a12a:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
1000a12c:	b2d2      	uxtb	r2, r2
1000a12e:	211c      	movs	r1, #28
1000a130:	2069      	movs	r0, #105	; 0x69
1000a132:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
1000a134:	211d      	movs	r1, #29
1000a136:	2069      	movs	r0, #105	; 0x69
1000a138:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
1000a13a:	23f0      	movs	r3, #240	; 0xf0
1000a13c:	0002      	movs	r2, r0
1000a13e:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
1000a140:	3bed      	subs	r3, #237	; 0xed
1000a142:	431a      	orrs	r2, r3
1000a144:	211d      	movs	r1, #29
1000a146:	2069      	movs	r0, #105	; 0x69
1000a148:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
1000a14a:	2212      	movs	r2, #18
1000a14c:	2137      	movs	r1, #55	; 0x37
1000a14e:	2069      	movs	r0, #105	; 0x69
1000a150:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
1000a152:	2201      	movs	r2, #1
1000a154:	2138      	movs	r1, #56	; 0x38
1000a156:	2069      	movs	r0, #105	; 0x69
1000a158:	47a0      	blx	r4
	delay_ms(100);
1000a15a:	2064      	movs	r0, #100	; 0x64
1000a15c:	47a8      	blx	r5
}
1000a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a160:	1001afbc 	.word	0x1001afbc
1000a164:	10009be5 	.word	0x10009be5
1000a168:	1000ae8d 	.word	0x1000ae8d
1000a16c:	1000a099 	.word	0x1000a099

1000a170 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
1000a170:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a172:	465f      	mov	r7, fp
1000a174:	4656      	mov	r6, sl
1000a176:	464d      	mov	r5, r9
1000a178:	4644      	mov	r4, r8
1000a17a:	b4f0      	push	{r4, r5, r6, r7}
1000a17c:	b09d      	sub	sp, #116	; 0x74
1000a17e:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
1000a180:	2206      	movs	r2, #6
1000a182:	2100      	movs	r1, #0
1000a184:	a81a      	add	r0, sp, #104	; 0x68
1000a186:	4ce0      	ldr	r4, [pc, #896]	; (1000a508 <sms_imu_selftest+0x398>)
1000a188:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000a18a:	220c      	movs	r2, #12
1000a18c:	2100      	movs	r1, #0
1000a18e:	a817      	add	r0, sp, #92	; 0x5c
1000a190:	47a0      	blx	r4
1000a192:	220c      	movs	r2, #12
1000a194:	2100      	movs	r1, #0
1000a196:	a814      	add	r0, sp, #80	; 0x50
1000a198:	47a0      	blx	r4
1000a19a:	220c      	movs	r2, #12
1000a19c:	2100      	movs	r1, #0
1000a19e:	a811      	add	r0, sp, #68	; 0x44
1000a1a0:	47a0      	blx	r4
1000a1a2:	220c      	movs	r2, #12
1000a1a4:	2100      	movs	r1, #0
1000a1a6:	a80e      	add	r0, sp, #56	; 0x38
1000a1a8:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000a1aa:	2200      	movs	r2, #0
1000a1ac:	2119      	movs	r1, #25
1000a1ae:	2069      	movs	r0, #105	; 0x69
1000a1b0:	4cd6      	ldr	r4, [pc, #856]	; (1000a50c <sms_imu_selftest+0x39c>)
1000a1b2:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
1000a1b4:	2202      	movs	r2, #2
1000a1b6:	211a      	movs	r1, #26
1000a1b8:	2069      	movs	r0, #105	; 0x69
1000a1ba:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000a1bc:	2200      	movs	r2, #0
1000a1be:	211b      	movs	r1, #27
1000a1c0:	2069      	movs	r0, #105	; 0x69
1000a1c2:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
1000a1c4:	2202      	movs	r2, #2
1000a1c6:	211d      	movs	r1, #29
1000a1c8:	2069      	movs	r0, #105	; 0x69
1000a1ca:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
1000a1cc:	2200      	movs	r2, #0
1000a1ce:	211c      	movs	r1, #28
1000a1d0:	2069      	movs	r0, #105	; 0x69
1000a1d2:	47a0      	blx	r4
1000a1d4:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a1d6:	ac1a      	add	r4, sp, #104	; 0x68
1000a1d8:	4ecd      	ldr	r6, [pc, #820]	; (1000a510 <sms_imu_selftest+0x3a0>)
1000a1da:	0023      	movs	r3, r4
1000a1dc:	2206      	movs	r2, #6
1000a1de:	213b      	movs	r1, #59	; 0x3b
1000a1e0:	2069      	movs	r0, #105	; 0x69
1000a1e2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a1e4:	7823      	ldrb	r3, [r4, #0]
1000a1e6:	021b      	lsls	r3, r3, #8
1000a1e8:	7862      	ldrb	r2, [r4, #1]
1000a1ea:	4313      	orrs	r3, r2
1000a1ec:	b21b      	sxth	r3, r3
1000a1ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000a1f0:	4694      	mov	ip, r2
1000a1f2:	4463      	add	r3, ip
1000a1f4:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a1f6:	78a3      	ldrb	r3, [r4, #2]
1000a1f8:	021b      	lsls	r3, r3, #8
1000a1fa:	78e2      	ldrb	r2, [r4, #3]
1000a1fc:	4313      	orrs	r3, r2
1000a1fe:	b21b      	sxth	r3, r3
1000a200:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000a202:	9200      	str	r2, [sp, #0]
1000a204:	4694      	mov	ip, r2
1000a206:	4463      	add	r3, ip
1000a208:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a20a:	7923      	ldrb	r3, [r4, #4]
1000a20c:	021b      	lsls	r3, r3, #8
1000a20e:	7962      	ldrb	r2, [r4, #5]
1000a210:	4313      	orrs	r3, r2
1000a212:	b21b      	sxth	r3, r3
1000a214:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a216:	9200      	str	r2, [sp, #0]
1000a218:	4694      	mov	ip, r2
1000a21a:	4463      	add	r3, ip
1000a21c:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a21e:	0023      	movs	r3, r4
1000a220:	2206      	movs	r2, #6
1000a222:	2143      	movs	r1, #67	; 0x43
1000a224:	2069      	movs	r0, #105	; 0x69
1000a226:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a228:	7823      	ldrb	r3, [r4, #0]
1000a22a:	021b      	lsls	r3, r3, #8
1000a22c:	7862      	ldrb	r2, [r4, #1]
1000a22e:	4313      	orrs	r3, r2
1000a230:	b21b      	sxth	r3, r3
1000a232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1000a234:	4694      	mov	ip, r2
1000a236:	4463      	add	r3, ip
1000a238:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a23a:	78a3      	ldrb	r3, [r4, #2]
1000a23c:	021b      	lsls	r3, r3, #8
1000a23e:	78e2      	ldrb	r2, [r4, #3]
1000a240:	4313      	orrs	r3, r2
1000a242:	b21b      	sxth	r3, r3
1000a244:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000a246:	9200      	str	r2, [sp, #0]
1000a248:	4694      	mov	ip, r2
1000a24a:	4463      	add	r3, ip
1000a24c:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a24e:	7923      	ldrb	r3, [r4, #4]
1000a250:	021b      	lsls	r3, r3, #8
1000a252:	7962      	ldrb	r2, [r4, #5]
1000a254:	4313      	orrs	r3, r2
1000a256:	b21b      	sxth	r3, r3
1000a258:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a25a:	9200      	str	r2, [sp, #0]
1000a25c:	4694      	mov	ip, r2
1000a25e:	4463      	add	r3, ip
1000a260:	9319      	str	r3, [sp, #100]	; 0x64
1000a262:	3d01      	subs	r5, #1
1000a264:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000a266:	2d00      	cmp	r5, #0
1000a268:	d1b7      	bne.n	1000a1da <sms_imu_selftest+0x6a>
1000a26a:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
1000a26c:	4ea9      	ldr	r6, [pc, #676]	; (1000a514 <sms_imu_selftest+0x3a4>)
1000a26e:	ad14      	add	r5, sp, #80	; 0x50
1000a270:	21c8      	movs	r1, #200	; 0xc8
1000a272:	5960      	ldr	r0, [r4, r5]
1000a274:	47b0      	blx	r6
1000a276:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000a278:	ad17      	add	r5, sp, #92	; 0x5c
1000a27a:	21c8      	movs	r1, #200	; 0xc8
1000a27c:	5960      	ldr	r0, [r4, r5]
1000a27e:	47b0      	blx	r6
1000a280:	5160      	str	r0, [r4, r5]
1000a282:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
1000a284:	2c0c      	cmp	r4, #12
1000a286:	d1f2      	bne.n	1000a26e <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000a288:	22e0      	movs	r2, #224	; 0xe0
1000a28a:	211c      	movs	r1, #28
1000a28c:	2069      	movs	r0, #105	; 0x69
1000a28e:	4c9f      	ldr	r4, [pc, #636]	; (1000a50c <sms_imu_selftest+0x39c>)
1000a290:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
1000a292:	22e0      	movs	r2, #224	; 0xe0
1000a294:	211c      	movs	r1, #28
1000a296:	2069      	movs	r0, #105	; 0x69
1000a298:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a29a:	2019      	movs	r0, #25
1000a29c:	4b9e      	ldr	r3, [pc, #632]	; (1000a518 <sms_imu_selftest+0x3a8>)
1000a29e:	4798      	blx	r3
1000a2a0:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a2a2:	ac1a      	add	r4, sp, #104	; 0x68
1000a2a4:	4e9a      	ldr	r6, [pc, #616]	; (1000a510 <sms_imu_selftest+0x3a0>)
1000a2a6:	0023      	movs	r3, r4
1000a2a8:	2206      	movs	r2, #6
1000a2aa:	213b      	movs	r1, #59	; 0x3b
1000a2ac:	2069      	movs	r0, #105	; 0x69
1000a2ae:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a2b0:	7823      	ldrb	r3, [r4, #0]
1000a2b2:	021b      	lsls	r3, r3, #8
1000a2b4:	7862      	ldrb	r2, [r4, #1]
1000a2b6:	4313      	orrs	r3, r2
1000a2b8:	b21b      	sxth	r3, r3
1000a2ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a2bc:	4694      	mov	ip, r2
1000a2be:	4463      	add	r3, ip
1000a2c0:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a2c2:	78a3      	ldrb	r3, [r4, #2]
1000a2c4:	021b      	lsls	r3, r3, #8
1000a2c6:	78e2      	ldrb	r2, [r4, #3]
1000a2c8:	4313      	orrs	r3, r2
1000a2ca:	b21b      	sxth	r3, r3
1000a2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a2ce:	9200      	str	r2, [sp, #0]
1000a2d0:	4694      	mov	ip, r2
1000a2d2:	4463      	add	r3, ip
1000a2d4:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a2d6:	7923      	ldrb	r3, [r4, #4]
1000a2d8:	021b      	lsls	r3, r3, #8
1000a2da:	7962      	ldrb	r2, [r4, #5]
1000a2dc:	4313      	orrs	r3, r2
1000a2de:	b21b      	sxth	r3, r3
1000a2e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a2e2:	9200      	str	r2, [sp, #0]
1000a2e4:	4694      	mov	ip, r2
1000a2e6:	4463      	add	r3, ip
1000a2e8:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a2ea:	0023      	movs	r3, r4
1000a2ec:	2206      	movs	r2, #6
1000a2ee:	2143      	movs	r1, #67	; 0x43
1000a2f0:	2069      	movs	r0, #105	; 0x69
1000a2f2:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a2f4:	7823      	ldrb	r3, [r4, #0]
1000a2f6:	021b      	lsls	r3, r3, #8
1000a2f8:	7862      	ldrb	r2, [r4, #1]
1000a2fa:	4313      	orrs	r3, r2
1000a2fc:	b21b      	sxth	r3, r3
1000a2fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a300:	4694      	mov	ip, r2
1000a302:	4463      	add	r3, ip
1000a304:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a306:	78a3      	ldrb	r3, [r4, #2]
1000a308:	021b      	lsls	r3, r3, #8
1000a30a:	78e2      	ldrb	r2, [r4, #3]
1000a30c:	4313      	orrs	r3, r2
1000a30e:	b21b      	sxth	r3, r3
1000a310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000a312:	9200      	str	r2, [sp, #0]
1000a314:	4694      	mov	ip, r2
1000a316:	4463      	add	r3, ip
1000a318:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a31a:	7923      	ldrb	r3, [r4, #4]
1000a31c:	021b      	lsls	r3, r3, #8
1000a31e:	7962      	ldrb	r2, [r4, #5]
1000a320:	4313      	orrs	r3, r2
1000a322:	b21b      	sxth	r3, r3
1000a324:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a326:	9200      	str	r2, [sp, #0]
1000a328:	4694      	mov	ip, r2
1000a32a:	4463      	add	r3, ip
1000a32c:	9310      	str	r3, [sp, #64]	; 0x40
1000a32e:	3d01      	subs	r5, #1
1000a330:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
1000a332:	2d00      	cmp	r5, #0
1000a334:	d1b7      	bne.n	1000a2a6 <sms_imu_selftest+0x136>
1000a336:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
1000a338:	4e76      	ldr	r6, [pc, #472]	; (1000a514 <sms_imu_selftest+0x3a4>)
1000a33a:	ad11      	add	r5, sp, #68	; 0x44
1000a33c:	21c8      	movs	r1, #200	; 0xc8
1000a33e:	5960      	ldr	r0, [r4, r5]
1000a340:	47b0      	blx	r6
1000a342:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
1000a344:	ad0e      	add	r5, sp, #56	; 0x38
1000a346:	21c8      	movs	r1, #200	; 0xc8
1000a348:	5960      	ldr	r0, [r4, r5]
1000a34a:	47b0      	blx	r6
1000a34c:	5160      	str	r0, [r4, r5]
1000a34e:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
1000a350:	2c0c      	cmp	r4, #12
1000a352:	d1f2      	bne.n	1000a33a <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
1000a354:	2200      	movs	r2, #0
1000a356:	211c      	movs	r1, #28
1000a358:	2069      	movs	r0, #105	; 0x69
1000a35a:	4c6c      	ldr	r4, [pc, #432]	; (1000a50c <sms_imu_selftest+0x39c>)
1000a35c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
1000a35e:	2200      	movs	r2, #0
1000a360:	211b      	movs	r1, #27
1000a362:	2069      	movs	r0, #105	; 0x69
1000a364:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a366:	2019      	movs	r0, #25
1000a368:	4b6b      	ldr	r3, [pc, #428]	; (1000a518 <sms_imu_selftest+0x3a8>)
1000a36a:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
1000a36c:	210d      	movs	r1, #13
1000a36e:	2069      	movs	r0, #105	; 0x69
1000a370:	4d6a      	ldr	r5, [pc, #424]	; (1000a51c <sms_imu_selftest+0x3ac>)
1000a372:	47a8      	blx	r5
1000a374:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
1000a376:	210e      	movs	r1, #14
1000a378:	2069      	movs	r0, #105	; 0x69
1000a37a:	47a8      	blx	r5
1000a37c:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
1000a37e:	210f      	movs	r1, #15
1000a380:	2069      	movs	r0, #105	; 0x69
1000a382:	47a8      	blx	r5
1000a384:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
1000a386:	2100      	movs	r1, #0
1000a388:	2069      	movs	r0, #105	; 0x69
1000a38a:	47a8      	blx	r5
1000a38c:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
1000a38e:	2101      	movs	r1, #1
1000a390:	2069      	movs	r0, #105	; 0x69
1000a392:	47a8      	blx	r5
1000a394:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
1000a396:	2102      	movs	r1, #2
1000a398:	2069      	movs	r0, #105	; 0x69
1000a39a:	47a8      	blx	r5
1000a39c:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
1000a39e:	4b60      	ldr	r3, [pc, #384]	; (1000a520 <sms_imu_selftest+0x3b0>)
1000a3a0:	469a      	mov	sl, r3
1000a3a2:	0020      	movs	r0, r4
1000a3a4:	4798      	blx	r3
1000a3a6:	4b5f      	ldr	r3, [pc, #380]	; (1000a524 <sms_imu_selftest+0x3b4>)
1000a3a8:	4699      	mov	r9, r3
1000a3aa:	4798      	blx	r3
1000a3ac:	4e5e      	ldr	r6, [pc, #376]	; (1000a528 <sms_imu_selftest+0x3b8>)
1000a3ae:	2200      	movs	r2, #0
1000a3b0:	4b5e      	ldr	r3, [pc, #376]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a3b2:	47b0      	blx	r6
1000a3b4:	0002      	movs	r2, r0
1000a3b6:	000b      	movs	r3, r1
1000a3b8:	485d      	ldr	r0, [pc, #372]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a3ba:	495e      	ldr	r1, [pc, #376]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a3bc:	4f5e      	ldr	r7, [pc, #376]	; (1000a538 <sms_imu_selftest+0x3c8>)
1000a3be:	47b8      	blx	r7
1000a3c0:	4d5e      	ldr	r5, [pc, #376]	; (1000a53c <sms_imu_selftest+0x3cc>)
1000a3c2:	2200      	movs	r2, #0
1000a3c4:	4b5e      	ldr	r3, [pc, #376]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a3c6:	47a8      	blx	r5
1000a3c8:	4c5e      	ldr	r4, [pc, #376]	; (1000a544 <sms_imu_selftest+0x3d4>)
1000a3ca:	47a0      	blx	r4
1000a3cc:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
1000a3ce:	9800      	ldr	r0, [sp, #0]
1000a3d0:	47d0      	blx	sl
1000a3d2:	47c8      	blx	r9
1000a3d4:	2200      	movs	r2, #0
1000a3d6:	4b55      	ldr	r3, [pc, #340]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a3d8:	47b0      	blx	r6
1000a3da:	0002      	movs	r2, r0
1000a3dc:	000b      	movs	r3, r1
1000a3de:	4854      	ldr	r0, [pc, #336]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a3e0:	4954      	ldr	r1, [pc, #336]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a3e2:	47b8      	blx	r7
1000a3e4:	2200      	movs	r2, #0
1000a3e6:	4b56      	ldr	r3, [pc, #344]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a3e8:	47a8      	blx	r5
1000a3ea:	47a0      	blx	r4
1000a3ec:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
1000a3ee:	9804      	ldr	r0, [sp, #16]
1000a3f0:	47d0      	blx	sl
1000a3f2:	47c8      	blx	r9
1000a3f4:	2200      	movs	r2, #0
1000a3f6:	4b4d      	ldr	r3, [pc, #308]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a3f8:	47b0      	blx	r6
1000a3fa:	0002      	movs	r2, r0
1000a3fc:	000b      	movs	r3, r1
1000a3fe:	484c      	ldr	r0, [pc, #304]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a400:	494c      	ldr	r1, [pc, #304]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a402:	47b8      	blx	r7
1000a404:	2200      	movs	r2, #0
1000a406:	4b4e      	ldr	r3, [pc, #312]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a408:	47a8      	blx	r5
1000a40a:	47a0      	blx	r4
1000a40c:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
1000a40e:	9805      	ldr	r0, [sp, #20]
1000a410:	47d0      	blx	sl
1000a412:	47c8      	blx	r9
1000a414:	2200      	movs	r2, #0
1000a416:	4b45      	ldr	r3, [pc, #276]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a418:	47b0      	blx	r6
1000a41a:	0002      	movs	r2, r0
1000a41c:	000b      	movs	r3, r1
1000a41e:	4844      	ldr	r0, [pc, #272]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a420:	4944      	ldr	r1, [pc, #272]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a422:	47b8      	blx	r7
1000a424:	2200      	movs	r2, #0
1000a426:	4b46      	ldr	r3, [pc, #280]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a428:	47a8      	blx	r5
1000a42a:	47a0      	blx	r4
1000a42c:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
1000a42e:	9806      	ldr	r0, [sp, #24]
1000a430:	47d0      	blx	sl
1000a432:	47c8      	blx	r9
1000a434:	2200      	movs	r2, #0
1000a436:	4b3d      	ldr	r3, [pc, #244]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a438:	47b0      	blx	r6
1000a43a:	0002      	movs	r2, r0
1000a43c:	000b      	movs	r3, r1
1000a43e:	483c      	ldr	r0, [pc, #240]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a440:	493c      	ldr	r1, [pc, #240]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a442:	47b8      	blx	r7
1000a444:	2200      	movs	r2, #0
1000a446:	4b3e      	ldr	r3, [pc, #248]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a448:	47a8      	blx	r5
1000a44a:	47a0      	blx	r4
1000a44c:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
1000a44e:	9807      	ldr	r0, [sp, #28]
1000a450:	47d0      	blx	sl
1000a452:	47c8      	blx	r9
1000a454:	2200      	movs	r2, #0
1000a456:	4b35      	ldr	r3, [pc, #212]	; (1000a52c <sms_imu_selftest+0x3bc>)
1000a458:	47b0      	blx	r6
1000a45a:	0002      	movs	r2, r0
1000a45c:	000b      	movs	r3, r1
1000a45e:	4834      	ldr	r0, [pc, #208]	; (1000a530 <sms_imu_selftest+0x3c0>)
1000a460:	4934      	ldr	r1, [pc, #208]	; (1000a534 <sms_imu_selftest+0x3c4>)
1000a462:	47b8      	blx	r7
1000a464:	2200      	movs	r2, #0
1000a466:	4b36      	ldr	r3, [pc, #216]	; (1000a540 <sms_imu_selftest+0x3d0>)
1000a468:	47a8      	blx	r5
1000a46a:	47a0      	blx	r4
1000a46c:	900d      	str	r0, [sp, #52]	; 0x34
1000a46e:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
1000a470:	4b35      	ldr	r3, [pc, #212]	; (1000a548 <sms_imu_selftest+0x3d8>)
1000a472:	4699      	mov	r9, r3
1000a474:	4d2b      	ldr	r5, [pc, #172]	; (1000a524 <sms_imu_selftest+0x3b4>)
1000a476:	4b31      	ldr	r3, [pc, #196]	; (1000a53c <sms_imu_selftest+0x3cc>)
1000a478:	4698      	mov	r8, r3
1000a47a:	4b34      	ldr	r3, [pc, #208]	; (1000a54c <sms_imu_selftest+0x3dc>)
1000a47c:	469a      	mov	sl, r3
1000a47e:	4f2a      	ldr	r7, [pc, #168]	; (1000a528 <sms_imu_selftest+0x3b8>)
1000a480:	4e30      	ldr	r6, [pc, #192]	; (1000a544 <sms_imu_selftest+0x3d4>)
1000a482:	ab11      	add	r3, sp, #68	; 0x44
1000a484:	58e3      	ldr	r3, [r4, r3]
1000a486:	aa14      	add	r2, sp, #80	; 0x50
1000a488:	58a0      	ldr	r0, [r4, r2]
1000a48a:	1a18      	subs	r0, r3, r0
1000a48c:	47c8      	blx	r9
1000a48e:	47a8      	blx	r5
1000a490:	2200      	movs	r2, #0
1000a492:	4b2f      	ldr	r3, [pc, #188]	; (1000a550 <sms_imu_selftest+0x3e0>)
1000a494:	47c0      	blx	r8
1000a496:	9000      	str	r0, [sp, #0]
1000a498:	9101      	str	r1, [sp, #4]
1000a49a:	ab08      	add	r3, sp, #32
1000a49c:	58e0      	ldr	r0, [r4, r3]
1000a49e:	47a8      	blx	r5
1000a4a0:	0002      	movs	r2, r0
1000a4a2:	000b      	movs	r3, r1
1000a4a4:	9800      	ldr	r0, [sp, #0]
1000a4a6:	9901      	ldr	r1, [sp, #4]
1000a4a8:	47d0      	blx	sl
1000a4aa:	2200      	movs	r2, #0
1000a4ac:	4b28      	ldr	r3, [pc, #160]	; (1000a550 <sms_imu_selftest+0x3e0>)
1000a4ae:	47b8      	blx	r7
1000a4b0:	47b0      	blx	r6
1000a4b2:	9b03      	ldr	r3, [sp, #12]
1000a4b4:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
1000a4b6:	469b      	mov	fp, r3
1000a4b8:	44a3      	add	fp, r4
1000a4ba:	ab0e      	add	r3, sp, #56	; 0x38
1000a4bc:	58e3      	ldr	r3, [r4, r3]
1000a4be:	aa17      	add	r2, sp, #92	; 0x5c
1000a4c0:	58a0      	ldr	r0, [r4, r2]
1000a4c2:	1a18      	subs	r0, r3, r0
1000a4c4:	47c8      	blx	r9
1000a4c6:	47a8      	blx	r5
1000a4c8:	2200      	movs	r2, #0
1000a4ca:	4b21      	ldr	r3, [pc, #132]	; (1000a550 <sms_imu_selftest+0x3e0>)
1000a4cc:	47c0      	blx	r8
1000a4ce:	9000      	str	r0, [sp, #0]
1000a4d0:	9101      	str	r1, [sp, #4]
1000a4d2:	0023      	movs	r3, r4
1000a4d4:	aa08      	add	r2, sp, #32
1000a4d6:	4694      	mov	ip, r2
1000a4d8:	4463      	add	r3, ip
1000a4da:	68d8      	ldr	r0, [r3, #12]
1000a4dc:	47a8      	blx	r5
1000a4de:	0002      	movs	r2, r0
1000a4e0:	000b      	movs	r3, r1
1000a4e2:	9800      	ldr	r0, [sp, #0]
1000a4e4:	9901      	ldr	r1, [sp, #4]
1000a4e6:	47d0      	blx	sl
1000a4e8:	2200      	movs	r2, #0
1000a4ea:	4b19      	ldr	r3, [pc, #100]	; (1000a550 <sms_imu_selftest+0x3e0>)
1000a4ec:	47b8      	blx	r7
1000a4ee:	47b0      	blx	r6
1000a4f0:	465b      	mov	r3, fp
1000a4f2:	60d8      	str	r0, [r3, #12]
1000a4f4:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000a4f6:	2c0c      	cmp	r4, #12
1000a4f8:	d1c3      	bne.n	1000a482 <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000a4fa:	b01d      	add	sp, #116	; 0x74
1000a4fc:	bc3c      	pop	{r2, r3, r4, r5}
1000a4fe:	4690      	mov	r8, r2
1000a500:	4699      	mov	r9, r3
1000a502:	46a2      	mov	sl, r4
1000a504:	46ab      	mov	fp, r5
1000a506:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a508:	100166e1 	.word	0x100166e1
1000a50c:	10009be5 	.word	0x10009be5
1000a510:	10009909 	.word	0x10009909
1000a514:	100137ad 	.word	0x100137ad
1000a518:	1000ae8d 	.word	0x1000ae8d
1000a51c:	1000a099 	.word	0x1000a099
1000a520:	100147f1 	.word	0x100147f1
1000a524:	10016449 	.word	0x10016449
1000a528:	10015c01 	.word	0x10015c01
1000a52c:	3ff00000 	.word	0x3ff00000
1000a530:	c28f5c29 	.word	0xc28f5c29
1000a534:	3ff028f5 	.word	0x3ff028f5
1000a538:	100122f5 	.word	0x100122f5
1000a53c:	1001570d 	.word	0x1001570d
1000a540:	40a47800 	.word	0x40a47800
1000a544:	100164f1 	.word	0x100164f1
1000a548:	10014761 	.word	0x10014761
1000a54c:	10014ec5 	.word	0x10014ec5
1000a550:	40590000 	.word	0x40590000

1000a554 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
1000a554:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000a556:	2175      	movs	r1, #117	; 0x75
1000a558:	2069      	movs	r0, #105	; 0x69
1000a55a:	4b06      	ldr	r3, [pc, #24]	; (1000a574 <sms_imu_mpu_check+0x20>)
1000a55c:	4798      	blx	r3
	if(c == 0x71) {
1000a55e:	2871      	cmp	r0, #113	; 0x71
1000a560:	d104      	bne.n	1000a56c <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
1000a562:	4805      	ldr	r0, [pc, #20]	; (1000a578 <sms_imu_mpu_check+0x24>)
1000a564:	4b05      	ldr	r3, [pc, #20]	; (1000a57c <sms_imu_mpu_check+0x28>)
1000a566:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000a568:	2000      	movs	r0, #0
1000a56a:	e001      	b.n	1000a570 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
1000a56c:	2001      	movs	r0, #1
1000a56e:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000a570:	bd10      	pop	{r4, pc}
1000a572:	46c0      	nop			; (mov r8, r8)
1000a574:	1000a099 	.word	0x1000a099
1000a578:	1001afc0 	.word	0x1001afc0
1000a57c:	1000a171 	.word	0x1000a171

1000a580 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
1000a580:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a582:	b087      	sub	sp, #28
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a584:	4b22      	ldr	r3, [pc, #136]	; (1000a610 <sms_imu_startup+0x90>)
1000a586:	4798      	blx	r3
1000a588:	2800      	cmp	r0, #0
1000a58a:	d139      	bne.n	1000a600 <sms_imu_startup+0x80>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
1000a58c:	4c21      	ldr	r4, [pc, #132]	; (1000a614 <sms_imu_startup+0x94>)
1000a58e:	0020      	movs	r0, r4
1000a590:	380c      	subs	r0, #12
1000a592:	0021      	movs	r1, r4
1000a594:	4b20      	ldr	r3, [pc, #128]	; (1000a618 <sms_imu_startup+0x98>)
1000a596:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
1000a598:	4820      	ldr	r0, [pc, #128]	; (1000a61c <sms_imu_startup+0x9c>)
1000a59a:	4b21      	ldr	r3, [pc, #132]	; (1000a620 <sms_imu_startup+0xa0>)
1000a59c:	4798      	blx	r3
1000a59e:	3c28      	subs	r4, #40	; 0x28
1000a5a0:	4e20      	ldr	r6, [pc, #128]	; (1000a624 <sms_imu_startup+0xa4>)
1000a5a2:	4921      	ldr	r1, [pc, #132]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
1000a5a6:	47b0      	blx	r6
1000a5a8:	4d20      	ldr	r5, [pc, #128]	; (1000a62c <sms_imu_startup+0xac>)
1000a5aa:	47a8      	blx	r5
1000a5ac:	0007      	movs	r7, r0
1000a5ae:	491e      	ldr	r1, [pc, #120]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5b0:	6a20      	ldr	r0, [r4, #32]
1000a5b2:	47b0      	blx	r6
1000a5b4:	47a8      	blx	r5
1000a5b6:	9004      	str	r0, [sp, #16]
1000a5b8:	491b      	ldr	r1, [pc, #108]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5ba:	69e0      	ldr	r0, [r4, #28]
1000a5bc:	47b0      	blx	r6
1000a5be:	47a8      	blx	r5
1000a5c0:	9005      	str	r0, [sp, #20]
1000a5c2:	4919      	ldr	r1, [pc, #100]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000a5c6:	47b0      	blx	r6
1000a5c8:	47a8      	blx	r5
1000a5ca:	9002      	str	r0, [sp, #8]
1000a5cc:	4916      	ldr	r1, [pc, #88]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000a5d0:	47b0      	blx	r6
1000a5d2:	47a8      	blx	r5
1000a5d4:	9001      	str	r0, [sp, #4]
1000a5d6:	4914      	ldr	r1, [pc, #80]	; (1000a628 <sms_imu_startup+0xa8>)
1000a5d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000a5da:	47b0      	blx	r6
1000a5dc:	47a8      	blx	r5
1000a5de:	9000      	str	r0, [sp, #0]
1000a5e0:	003b      	movs	r3, r7
1000a5e2:	9a04      	ldr	r2, [sp, #16]
1000a5e4:	9905      	ldr	r1, [sp, #20]
1000a5e6:	4812      	ldr	r0, [pc, #72]	; (1000a630 <sms_imu_startup+0xb0>)
1000a5e8:	4c12      	ldr	r4, [pc, #72]	; (1000a634 <sms_imu_startup+0xb4>)
1000a5ea:	47a0      	blx	r4
	sms_imu_mpu_initialize();
1000a5ec:	4b12      	ldr	r3, [pc, #72]	; (1000a638 <sms_imu_startup+0xb8>)
1000a5ee:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a5f0:	4b12      	ldr	r3, [pc, #72]	; (1000a63c <sms_imu_startup+0xbc>)
1000a5f2:	4798      	blx	r3
1000a5f4:	1e04      	subs	r4, r0, #0
1000a5f6:	d106      	bne.n	1000a606 <sms_imu_startup+0x86>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
1000a5f8:	4811      	ldr	r0, [pc, #68]	; (1000a640 <sms_imu_startup+0xc0>)
1000a5fa:	4b12      	ldr	r3, [pc, #72]	; (1000a644 <sms_imu_startup+0xc4>)
1000a5fc:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
1000a5fe:	e004      	b.n	1000a60a <sms_imu_startup+0x8a>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a600:	2401      	movs	r4, #1
1000a602:	4264      	negs	r4, r4
1000a604:	e001      	b.n	1000a60a <sms_imu_startup+0x8a>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a606:	2401      	movs	r4, #1
1000a608:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
1000a60a:	0020      	movs	r0, r4
1000a60c:	b007      	add	sp, #28
1000a60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a610:	1000a555 	.word	0x1000a555
1000a614:	1001afe4 	.word	0x1001afe4
1000a618:	10009bfd 	.word	0x10009bfd
1000a61c:	10017888 	.word	0x10017888
1000a620:	10016949 	.word	0x10016949
1000a624:	100141b9 	.word	0x100141b9
1000a628:	461c4000 	.word	0x461c4000
1000a62c:	10013acd 	.word	0x10013acd
1000a630:	10017f90 	.word	0x10017f90
1000a634:	10016829 	.word	0x10016829
1000a638:	1000a0c9 	.word	0x1000a0c9
1000a63c:	1000a0b1 	.word	0x1000a0b1
1000a640:	1001affc 	.word	0x1001affc
1000a644:	10009f75 	.word	0x10009f75

1000a648 <read_comp_data>:
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}
/* Read compass data */
void read_comp_data(int16_t *destination)
{
1000a648:	b530      	push	{r4, r5, lr}
1000a64a:	b083      	sub	sp, #12
1000a64c:	0004      	movs	r4, r0
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
1000a64e:	2102      	movs	r1, #2
1000a650:	200c      	movs	r0, #12
1000a652:	4b12      	ldr	r3, [pc, #72]	; (1000a69c <read_comp_data+0x54>)
1000a654:	4798      	blx	r3
1000a656:	07c3      	lsls	r3, r0, #31
1000a658:	d51e      	bpl.n	1000a698 <read_comp_data+0x50>
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a65a:	466b      	mov	r3, sp
1000a65c:	2207      	movs	r2, #7
1000a65e:	2103      	movs	r1, #3
1000a660:	200c      	movs	r0, #12
1000a662:	4d0f      	ldr	r5, [pc, #60]	; (1000a6a0 <read_comp_data+0x58>)
1000a664:	47a8      	blx	r5
{
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
		readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawData[6]; // End data read by reading ST2 register
		if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
1000a666:	466b      	mov	r3, sp
1000a668:	799b      	ldrb	r3, [r3, #6]
1000a66a:	071b      	lsls	r3, r3, #28
1000a66c:	d414      	bmi.n	1000a698 <read_comp_data+0x50>
			destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
1000a66e:	466b      	mov	r3, sp
1000a670:	785b      	ldrb	r3, [r3, #1]
1000a672:	021b      	lsls	r3, r3, #8
1000a674:	466a      	mov	r2, sp
1000a676:	7812      	ldrb	r2, [r2, #0]
1000a678:	4313      	orrs	r3, r2
1000a67a:	8023      	strh	r3, [r4, #0]
			destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
1000a67c:	466b      	mov	r3, sp
1000a67e:	78db      	ldrb	r3, [r3, #3]
1000a680:	021b      	lsls	r3, r3, #8
1000a682:	466a      	mov	r2, sp
1000a684:	7892      	ldrb	r2, [r2, #2]
1000a686:	4313      	orrs	r3, r2
1000a688:	8063      	strh	r3, [r4, #2]
			destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
1000a68a:	466b      	mov	r3, sp
1000a68c:	795b      	ldrb	r3, [r3, #5]
1000a68e:	021b      	lsls	r3, r3, #8
1000a690:	466a      	mov	r2, sp
1000a692:	7912      	ldrb	r2, [r2, #4]
1000a694:	4313      	orrs	r3, r2
1000a696:	80a3      	strh	r3, [r4, #4]
		}
	}
}
1000a698:	b003      	add	sp, #12
1000a69a:	bd30      	pop	{r4, r5, pc}
1000a69c:	1000a099 	.word	0x1000a099
1000a6a0:	10009909 	.word	0x10009909

1000a6a4 <sms_imu_poll_data>:


/* Data reading functions... */
/* Poll */
int sms_imu_poll_data(void)
{
1000a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6a6:	465f      	mov	r7, fp
1000a6a8:	4656      	mov	r6, sl
1000a6aa:	464d      	mov	r5, r9
1000a6ac:	4644      	mov	r4, r8
1000a6ae:	b4f0      	push	{r4, r5, r6, r7}
1000a6b0:	b08f      	sub	sp, #60	; 0x3c
	read_accel_data(imu_device.output.raw_accel);
1000a6b2:	4e5c      	ldr	r6, [pc, #368]	; (1000a824 <sms_imu_poll_data+0x180>)
1000a6b4:	0030      	movs	r0, r6
1000a6b6:	4b5c      	ldr	r3, [pc, #368]	; (1000a828 <sms_imu_poll_data+0x184>)
1000a6b8:	4798      	blx	r3
	float a_res = get_Ares(imu_device.config.a_scale);
1000a6ba:	3e56      	subs	r6, #86	; 0x56
1000a6bc:	7830      	ldrb	r0, [r6, #0]
1000a6be:	4b5b      	ldr	r3, [pc, #364]	; (1000a82c <sms_imu_poll_data+0x188>)
1000a6c0:	4798      	blx	r3
1000a6c2:	1c05      	adds	r5, r0, #0
	float ax = ((float)imu_device.output.raw_accel[0]) * a_res;
1000a6c4:	2356      	movs	r3, #86	; 0x56
1000a6c6:	5ef0      	ldrsh	r0, [r6, r3]
1000a6c8:	4c59      	ldr	r4, [pc, #356]	; (1000a830 <sms_imu_poll_data+0x18c>)
1000a6ca:	47a0      	blx	r4
1000a6cc:	4f59      	ldr	r7, [pc, #356]	; (1000a834 <sms_imu_poll_data+0x190>)
1000a6ce:	1c29      	adds	r1, r5, #0
1000a6d0:	47b8      	blx	r7
1000a6d2:	9008      	str	r0, [sp, #32]
	float ay = ((float)imu_device.output.raw_accel[1]) * a_res;
1000a6d4:	2358      	movs	r3, #88	; 0x58
1000a6d6:	5ef0      	ldrsh	r0, [r6, r3]
1000a6d8:	47a0      	blx	r4
1000a6da:	1c29      	adds	r1, r5, #0
1000a6dc:	47b8      	blx	r7
1000a6de:	9009      	str	r0, [sp, #36]	; 0x24
	float az = ((float)imu_device.output.raw_accel[2]) * a_res;
1000a6e0:	235a      	movs	r3, #90	; 0x5a
1000a6e2:	5ef0      	ldrsh	r0, [r6, r3]
1000a6e4:	47a0      	blx	r4
1000a6e6:	1c29      	adds	r1, r5, #0
1000a6e8:	47b8      	blx	r7
1000a6ea:	900a      	str	r0, [sp, #40]	; 0x28
	
	read_gyro_data(imu_device.output.raw_gyro);
1000a6ec:	0030      	movs	r0, r6
1000a6ee:	3050      	adds	r0, #80	; 0x50
1000a6f0:	4b51      	ldr	r3, [pc, #324]	; (1000a838 <sms_imu_poll_data+0x194>)
1000a6f2:	4798      	blx	r3
	float g_res = get_Gres(imu_device.config.g_scale);
1000a6f4:	7870      	ldrb	r0, [r6, #1]
1000a6f6:	4b51      	ldr	r3, [pc, #324]	; (1000a83c <sms_imu_poll_data+0x198>)
1000a6f8:	4798      	blx	r3
1000a6fa:	1c05      	adds	r5, r0, #0
	float gx = ((float)imu_device.output.raw_gyro[0]) * g_res;
1000a6fc:	2350      	movs	r3, #80	; 0x50
1000a6fe:	5ef0      	ldrsh	r0, [r6, r3]
1000a700:	47a0      	blx	r4
1000a702:	1c29      	adds	r1, r5, #0
1000a704:	47b8      	blx	r7
1000a706:	900b      	str	r0, [sp, #44]	; 0x2c
	float gy = ((float)imu_device.output.raw_gyro[1]) * g_res;
1000a708:	2352      	movs	r3, #82	; 0x52
1000a70a:	5ef0      	ldrsh	r0, [r6, r3]
1000a70c:	47a0      	blx	r4
1000a70e:	1c29      	adds	r1, r5, #0
1000a710:	47b8      	blx	r7
1000a712:	900c      	str	r0, [sp, #48]	; 0x30
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
1000a714:	2354      	movs	r3, #84	; 0x54
1000a716:	5ef0      	ldrsh	r0, [r6, r3]
1000a718:	47a0      	blx	r4
1000a71a:	1c29      	adds	r1, r5, #0
1000a71c:	47b8      	blx	r7
1000a71e:	900d      	str	r0, [sp, #52]	; 0x34
	
	read_comp_data(imu_device.output.raw_compass);
1000a720:	0030      	movs	r0, r6
1000a722:	305c      	adds	r0, #92	; 0x5c
1000a724:	4b46      	ldr	r3, [pc, #280]	; (1000a840 <sms_imu_poll_data+0x19c>)
1000a726:	4798      	blx	r3
	float m_res = get_Mres(imu_device.config.m_scale);
1000a728:	78b0      	ldrb	r0, [r6, #2]
1000a72a:	4b46      	ldr	r3, [pc, #280]	; (1000a844 <sms_imu_poll_data+0x1a0>)
1000a72c:	4798      	blx	r3
1000a72e:	1c05      	adds	r5, r0, #0
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
1000a730:	235c      	movs	r3, #92	; 0x5c
1000a732:	5ef0      	ldrsh	r0, [r6, r3]
1000a734:	47a0      	blx	r4
1000a736:	9507      	str	r5, [sp, #28]
1000a738:	1c29      	adds	r1, r5, #0
1000a73a:	47b8      	blx	r7
1000a73c:	6c31      	ldr	r1, [r6, #64]	; 0x40
1000a73e:	47b8      	blx	r7
1000a740:	4d41      	ldr	r5, [pc, #260]	; (1000a848 <sms_imu_poll_data+0x1a4>)
1000a742:	6b71      	ldr	r1, [r6, #52]	; 0x34
1000a744:	47a8      	blx	r5
1000a746:	4683      	mov	fp, r0
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
1000a748:	235e      	movs	r3, #94	; 0x5e
1000a74a:	5ef0      	ldrsh	r0, [r6, r3]
1000a74c:	47a0      	blx	r4
1000a74e:	9907      	ldr	r1, [sp, #28]
1000a750:	47b8      	blx	r7
1000a752:	6c71      	ldr	r1, [r6, #68]	; 0x44
1000a754:	47b8      	blx	r7
1000a756:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1000a758:	47a8      	blx	r5
1000a75a:	4681      	mov	r9, r0
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
1000a75c:	2360      	movs	r3, #96	; 0x60
1000a75e:	5ef0      	ldrsh	r0, [r6, r3]
1000a760:	47a0      	blx	r4
1000a762:	9907      	ldr	r1, [sp, #28]
1000a764:	47b8      	blx	r7
1000a766:	6cb1      	ldr	r1, [r6, #72]	; 0x48
1000a768:	47b8      	blx	r7
1000a76a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1000a76c:	47a8      	blx	r5
1000a76e:	4682      	mov	sl, r0
	
	static uint32_t last_time = 0;
	const uint32_t cnt_max = 0xffffffff/SMS_DUALTIMER_LOAD_US;
	uint32_t now = (uint32_t)(dualtimer_get_value(DUALTIMER_TIMER1)/SMS_DUALTIMER_LOAD_US);
1000a770:	2000      	movs	r0, #0
1000a772:	4b36      	ldr	r3, [pc, #216]	; (1000a84c <sms_imu_poll_data+0x1a8>)
1000a774:	4798      	blx	r3
1000a776:	211a      	movs	r1, #26
1000a778:	4b35      	ldr	r3, [pc, #212]	; (1000a850 <sms_imu_poll_data+0x1ac>)
1000a77a:	4798      	blx	r3
	uint32_t deltati = ((now < last_time) ? (last_time - now) : (cnt_max - now + last_time));
1000a77c:	4b35      	ldr	r3, [pc, #212]	; (1000a854 <sms_imu_poll_data+0x1b0>)
1000a77e:	681c      	ldr	r4, [r3, #0]
1000a780:	42a0      	cmp	r0, r4
1000a782:	d202      	bcs.n	1000a78a <sms_imu_poll_data+0xe6>
1000a784:	1a23      	subs	r3, r4, r0
1000a786:	4698      	mov	r8, r3
1000a788:	e004      	b.n	1000a794 <sms_imu_poll_data+0xf0>
1000a78a:	4b33      	ldr	r3, [pc, #204]	; (1000a858 <sms_imu_poll_data+0x1b4>)
1000a78c:	469c      	mov	ip, r3
1000a78e:	4464      	add	r4, ip
1000a790:	1a23      	subs	r3, r4, r0
1000a792:	4698      	mov	r8, r3
	last_time = now;
1000a794:	4b2f      	ldr	r3, [pc, #188]	; (1000a854 <sms_imu_poll_data+0x1b0>)
1000a796:	6018      	str	r0, [r3, #0]
	float deltatf = (float)deltati / 1000000.0;
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltat);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltatf);
1000a798:	4c30      	ldr	r4, [pc, #192]	; (1000a85c <sms_imu_poll_data+0x1b8>)
1000a79a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a79c:	47a0      	blx	r4
1000a79e:	4f30      	ldr	r7, [pc, #192]	; (1000a860 <sms_imu_poll_data+0x1bc>)
1000a7a0:	4a30      	ldr	r2, [pc, #192]	; (1000a864 <sms_imu_poll_data+0x1c0>)
1000a7a2:	4b31      	ldr	r3, [pc, #196]	; (1000a868 <sms_imu_poll_data+0x1c4>)
1000a7a4:	47b8      	blx	r7
1000a7a6:	4e31      	ldr	r6, [pc, #196]	; (1000a86c <sms_imu_poll_data+0x1c8>)
1000a7a8:	2200      	movs	r2, #0
1000a7aa:	4b31      	ldr	r3, [pc, #196]	; (1000a870 <sms_imu_poll_data+0x1cc>)
1000a7ac:	47b0      	blx	r6
1000a7ae:	4d31      	ldr	r5, [pc, #196]	; (1000a874 <sms_imu_poll_data+0x1d0>)
1000a7b0:	47a8      	blx	r5
1000a7b2:	9007      	str	r0, [sp, #28]
1000a7b4:	4640      	mov	r0, r8
1000a7b6:	4b30      	ldr	r3, [pc, #192]	; (1000a878 <sms_imu_poll_data+0x1d4>)
1000a7b8:	4798      	blx	r3
1000a7ba:	4930      	ldr	r1, [pc, #192]	; (1000a87c <sms_imu_poll_data+0x1d8>)
1000a7bc:	4b30      	ldr	r3, [pc, #192]	; (1000a880 <sms_imu_poll_data+0x1dc>)
1000a7be:	4798      	blx	r3
1000a7c0:	9005      	str	r0, [sp, #20]
1000a7c2:	4652      	mov	r2, sl
1000a7c4:	9204      	str	r2, [sp, #16]
1000a7c6:	465a      	mov	r2, fp
1000a7c8:	9203      	str	r2, [sp, #12]
1000a7ca:	464a      	mov	r2, r9
1000a7cc:	9202      	str	r2, [sp, #8]
1000a7ce:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a7d0:	47a0      	blx	r4
1000a7d2:	4a24      	ldr	r2, [pc, #144]	; (1000a864 <sms_imu_poll_data+0x1c0>)
1000a7d4:	4b24      	ldr	r3, [pc, #144]	; (1000a868 <sms_imu_poll_data+0x1c4>)
1000a7d6:	47b8      	blx	r7
1000a7d8:	2200      	movs	r2, #0
1000a7da:	4b25      	ldr	r3, [pc, #148]	; (1000a870 <sms_imu_poll_data+0x1cc>)
1000a7dc:	47b0      	blx	r6
1000a7de:	47a8      	blx	r5
1000a7e0:	9001      	str	r0, [sp, #4]
1000a7e2:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a7e4:	47a0      	blx	r4
1000a7e6:	4a1f      	ldr	r2, [pc, #124]	; (1000a864 <sms_imu_poll_data+0x1c0>)
1000a7e8:	4b1f      	ldr	r3, [pc, #124]	; (1000a868 <sms_imu_poll_data+0x1c4>)
1000a7ea:	47b8      	blx	r7
1000a7ec:	2200      	movs	r2, #0
1000a7ee:	4b20      	ldr	r3, [pc, #128]	; (1000a870 <sms_imu_poll_data+0x1cc>)
1000a7f0:	47b0      	blx	r6
1000a7f2:	47a8      	blx	r5
1000a7f4:	9000      	str	r0, [sp, #0]
1000a7f6:	9b07      	ldr	r3, [sp, #28]
1000a7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a7fa:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a7fc:	9808      	ldr	r0, [sp, #32]
1000a7fe:	4c21      	ldr	r4, [pc, #132]	; (1000a884 <sms_imu_poll_data+0x1e0>)
1000a800:	47a0      	blx	r4
	
	if(imu_device.config.ahrs) {
1000a802:	234c      	movs	r3, #76	; 0x4c
1000a804:	4a20      	ldr	r2, [pc, #128]	; (1000a888 <sms_imu_poll_data+0x1e4>)
1000a806:	5cd3      	ldrb	r3, [r2, r3]
1000a808:	2b00      	cmp	r3, #0
1000a80a:	d002      	beq.n	1000a812 <sms_imu_poll_data+0x16e>
		ahrs_calculation(imu_device.output.q);
1000a80c:	481f      	ldr	r0, [pc, #124]	; (1000a88c <sms_imu_poll_data+0x1e8>)
1000a80e:	4b20      	ldr	r3, [pc, #128]	; (1000a890 <sms_imu_poll_data+0x1ec>)
1000a810:	4798      	blx	r3
	}
	return 0;
}
1000a812:	2000      	movs	r0, #0
1000a814:	b00f      	add	sp, #60	; 0x3c
1000a816:	bc3c      	pop	{r2, r3, r4, r5}
1000a818:	4690      	mov	r8, r2
1000a81a:	4699      	mov	r9, r3
1000a81c:	46a2      	mov	sl, r4
1000a81e:	46ab      	mov	fp, r5
1000a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a822:	46c0      	nop			; (mov r8, r8)
1000a824:	1001b012 	.word	0x1001b012
1000a828:	10009ad5 	.word	0x10009ad5
1000a82c:	10009bb5 	.word	0x10009bb5
1000a830:	10014761 	.word	0x10014761
1000a834:	100141b9 	.word	0x100141b9
1000a838:	10009b19 	.word	0x10009b19
1000a83c:	10009b7d 	.word	0x10009b7d
1000a840:	1000a649 	.word	0x1000a649
1000a844:	10009b5d 	.word	0x10009b5d
1000a848:	100143e1 	.word	0x100143e1
1000a84c:	1000b231 	.word	0x1000b231
1000a850:	10013699 	.word	0x10013699
1000a854:	100193d0 	.word	0x100193d0
1000a858:	09d89d89 	.word	0x09d89d89
1000a85c:	10016449 	.word	0x10016449
1000a860:	1001570d 	.word	0x1001570d
1000a864:	54442d28 	.word	0x54442d28
1000a868:	400921fb 	.word	0x400921fb
1000a86c:	10014ec5 	.word	0x10014ec5
1000a870:	40668000 	.word	0x40668000
1000a874:	100164f1 	.word	0x100164f1
1000a878:	100147f1 	.word	0x100147f1
1000a87c:	49742400 	.word	0x49742400
1000a880:	10013e25 	.word	0x10013e25
1000a884:	1000843d 	.word	0x1000843d
1000a888:	1001afbc 	.word	0x1001afbc
1000a88c:	1001b020 	.word	0x1001b020
1000a890:	10008ce5 	.word	0x10008ce5

1000a894 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a894:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a896:	2100      	movs	r1, #0
1000a898:	4b01      	ldr	r3, [pc, #4]	; (1000a8a0 <sms_led_switch_on+0xc>)
1000a89a:	4798      	blx	r3
}
1000a89c:	bd10      	pop	{r4, pc}
1000a89e:	46c0      	nop			; (mov r8, r8)
1000a8a0:	1000b721 	.word	0x1000b721

1000a8a4 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a8a4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a8a6:	2101      	movs	r1, #1
1000a8a8:	4b01      	ldr	r3, [pc, #4]	; (1000a8b0 <sms_led_switch_off+0xc>)
1000a8aa:	4798      	blx	r3
}
1000a8ac:	bd10      	pop	{r4, pc}
1000a8ae:	46c0      	nop			; (mov r8, r8)
1000a8b0:	1000b721 	.word	0x1000b721

1000a8b4 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a8b4:	b510      	push	{r4, lr}
1000a8b6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a8b8:	ac01      	add	r4, sp, #4
1000a8ba:	0020      	movs	r0, r4
1000a8bc:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e8 <sms_led_gpio_init+0x34>)
1000a8be:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a8c0:	2301      	movs	r3, #1
1000a8c2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a8c4:	0021      	movs	r1, r4
1000a8c6:	2016      	movs	r0, #22
1000a8c8:	4b08      	ldr	r3, [pc, #32]	; (1000a8ec <sms_led_gpio_init+0x38>)
1000a8ca:	4798      	blx	r3
1000a8cc:	2800      	cmp	r0, #0
1000a8ce:	d005      	beq.n	1000a8dc <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000a8d0:	4807      	ldr	r0, [pc, #28]	; (1000a8f0 <sms_led_gpio_init+0x3c>)
1000a8d2:	4b08      	ldr	r3, [pc, #32]	; (1000a8f4 <sms_led_gpio_init+0x40>)
1000a8d4:	4798      	blx	r3
1000a8d6:	4808      	ldr	r0, [pc, #32]	; (1000a8f8 <sms_led_gpio_init+0x44>)
1000a8d8:	4b08      	ldr	r3, [pc, #32]	; (1000a8fc <sms_led_gpio_init+0x48>)
1000a8da:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a8dc:	2016      	movs	r0, #22
1000a8de:	4b08      	ldr	r3, [pc, #32]	; (1000a900 <sms_led_gpio_init+0x4c>)
1000a8e0:	4798      	blx	r3
}
1000a8e2:	b002      	add	sp, #8
1000a8e4:	bd10      	pop	{r4, pc}
1000a8e6:	46c0      	nop			; (mov r8, r8)
1000a8e8:	1000b509 	.word	0x1000b509
1000a8ec:	1000b519 	.word	0x1000b519
1000a8f0:	10017888 	.word	0x10017888
1000a8f4:	10016949 	.word	0x10016949
1000a8f8:	10017fcc 	.word	0x10017fcc
1000a8fc:	10016829 	.word	0x10016829
1000a900:	1000a8a5 	.word	0x1000a8a5

1000a904 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a904:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a906:	4b0c      	ldr	r3, [pc, #48]	; (1000a938 <sms_led_blink_start+0x34>)
1000a908:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a90a:	2200      	movs	r2, #0
1000a90c:	4b0b      	ldr	r3, [pc, #44]	; (1000a93c <sms_led_blink_start+0x38>)
1000a90e:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a910:	4b0b      	ldr	r3, [pc, #44]	; (1000a940 <sms_led_blink_start+0x3c>)
1000a912:	781b      	ldrb	r3, [r3, #0]
1000a914:	b2db      	uxtb	r3, r3
1000a916:	2b02      	cmp	r3, #2
1000a918:	d002      	beq.n	1000a920 <sms_led_blink_start+0x1c>
1000a91a:	2b03      	cmp	r3, #3
1000a91c:	d002      	beq.n	1000a924 <sms_led_blink_start+0x20>
1000a91e:	e004      	b.n	1000a92a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a920:	2164      	movs	r1, #100	; 0x64
1000a922:	e003      	b.n	1000a92c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a924:	21c8      	movs	r1, #200	; 0xc8
1000a926:	0049      	lsls	r1, r1, #1
        break;
1000a928:	e000      	b.n	1000a92c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a92a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a92c:	2201      	movs	r2, #1
1000a92e:	2001      	movs	r0, #1
1000a930:	4b04      	ldr	r3, [pc, #16]	; (1000a944 <sms_led_blink_start+0x40>)
1000a932:	4798      	blx	r3
}
1000a934:	bd10      	pop	{r4, pc}
1000a936:	46c0      	nop			; (mov r8, r8)
1000a938:	1000a895 	.word	0x1000a895
1000a93c:	1001b0a4 	.word	0x1001b0a4
1000a940:	1001afa3 	.word	0x1001afa3
1000a944:	1000ae21 	.word	0x1000ae21

1000a948 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000a948:	4b06      	ldr	r3, [pc, #24]	; (1000a964 <sms_pressure_init_variables+0x1c>)
1000a94a:	2200      	movs	r2, #0
1000a94c:	2125      	movs	r1, #37	; 0x25
1000a94e:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000a950:	3106      	adds	r1, #6
1000a952:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000a954:	3901      	subs	r1, #1
1000a956:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000a958:	3902      	subs	r1, #2
1000a95a:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000a95c:	3101      	adds	r1, #1
1000a95e:	545a      	strb	r2, [r3, r1]
}
1000a960:	4770      	bx	lr
1000a962:	46c0      	nop			; (mov r8, r8)
1000a964:	1001af08 	.word	0x1001af08

1000a968 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a968:	b510      	push	{r4, lr}
1000a96a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a96c:	4a05      	ldr	r2, [pc, #20]	; (1000a984 <sms_pressure_ms58_reset+0x1c>)
1000a96e:	231e      	movs	r3, #30
1000a970:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a972:	3b1d      	subs	r3, #29
1000a974:	9300      	str	r3, [sp, #0]
1000a976:	4b04      	ldr	r3, [pc, #16]	; (1000a988 <sms_pressure_ms58_reset+0x20>)
1000a978:	4904      	ldr	r1, [pc, #16]	; (1000a98c <sms_pressure_ms58_reset+0x24>)
1000a97a:	4805      	ldr	r0, [pc, #20]	; (1000a990 <sms_pressure_ms58_reset+0x28>)
1000a97c:	4c05      	ldr	r4, [pc, #20]	; (1000a994 <sms_pressure_ms58_reset+0x2c>)
1000a97e:	47a0      	blx	r4
}
1000a980:	b002      	add	sp, #8
1000a982:	bd10      	pop	{r4, pc}
1000a984:	1001aef8 	.word	0x1001aef8
1000a988:	1001aee4 	.word	0x1001aee4
1000a98c:	1001afa4 	.word	0x1001afa4
1000a990:	1001afb0 	.word	0x1001afb0
1000a994:	1000ad01 	.word	0x1000ad01

1000a998 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000a998:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a99a:	4657      	mov	r7, sl
1000a99c:	b480      	push	{r7}
1000a99e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a9a0:	4d37      	ldr	r5, [pc, #220]	; (1000aa80 <sms_pressure_ms58_read_prom+0xe8>)
1000a9a2:	23a2      	movs	r3, #162	; 0xa2
1000a9a4:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000a9a6:	2300      	movs	r3, #0
1000a9a8:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000a9aa:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a9ac:	4c35      	ldr	r4, [pc, #212]	; (1000aa84 <sms_pressure_ms58_read_prom+0xec>)
1000a9ae:	3303      	adds	r3, #3
1000a9b0:	469a      	mov	sl, r3
1000a9b2:	9300      	str	r3, [sp, #0]
1000a9b4:	0023      	movs	r3, r4
1000a9b6:	002a      	movs	r2, r5
1000a9b8:	4933      	ldr	r1, [pc, #204]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000a9ba:	4834      	ldr	r0, [pc, #208]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000a9bc:	4f34      	ldr	r7, [pc, #208]	; (1000aa90 <sms_pressure_ms58_read_prom+0xf8>)
1000a9be:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a9c0:	4e34      	ldr	r6, [pc, #208]	; (1000aa94 <sms_pressure_ms58_read_prom+0xfc>)
1000a9c2:	7863      	ldrb	r3, [r4, #1]
1000a9c4:	021b      	lsls	r3, r3, #8
1000a9c6:	78a2      	ldrb	r2, [r4, #2]
1000a9c8:	4313      	orrs	r3, r2
1000a9ca:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000a9cc:	23a4      	movs	r3, #164	; 0xa4
1000a9ce:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a9d0:	4653      	mov	r3, sl
1000a9d2:	9300      	str	r3, [sp, #0]
1000a9d4:	0023      	movs	r3, r4
1000a9d6:	002a      	movs	r2, r5
1000a9d8:	492b      	ldr	r1, [pc, #172]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000a9da:	482c      	ldr	r0, [pc, #176]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000a9dc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a9de:	7863      	ldrb	r3, [r4, #1]
1000a9e0:	021b      	lsls	r3, r3, #8
1000a9e2:	78a2      	ldrb	r2, [r4, #2]
1000a9e4:	4313      	orrs	r3, r2
1000a9e6:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000a9e8:	23a6      	movs	r3, #166	; 0xa6
1000a9ea:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a9ec:	4653      	mov	r3, sl
1000a9ee:	9300      	str	r3, [sp, #0]
1000a9f0:	0023      	movs	r3, r4
1000a9f2:	002a      	movs	r2, r5
1000a9f4:	4924      	ldr	r1, [pc, #144]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000a9f6:	4825      	ldr	r0, [pc, #148]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000a9f8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a9fa:	7863      	ldrb	r3, [r4, #1]
1000a9fc:	021b      	lsls	r3, r3, #8
1000a9fe:	78a2      	ldrb	r2, [r4, #2]
1000aa00:	4313      	orrs	r3, r2
1000aa02:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000aa04:	23a8      	movs	r3, #168	; 0xa8
1000aa06:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa08:	4653      	mov	r3, sl
1000aa0a:	9300      	str	r3, [sp, #0]
1000aa0c:	0023      	movs	r3, r4
1000aa0e:	002a      	movs	r2, r5
1000aa10:	491d      	ldr	r1, [pc, #116]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000aa12:	481e      	ldr	r0, [pc, #120]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000aa14:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa16:	7863      	ldrb	r3, [r4, #1]
1000aa18:	021b      	lsls	r3, r3, #8
1000aa1a:	78a2      	ldrb	r2, [r4, #2]
1000aa1c:	4313      	orrs	r3, r2
1000aa1e:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000aa20:	23aa      	movs	r3, #170	; 0xaa
1000aa22:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa24:	4653      	mov	r3, sl
1000aa26:	9300      	str	r3, [sp, #0]
1000aa28:	0023      	movs	r3, r4
1000aa2a:	002a      	movs	r2, r5
1000aa2c:	4916      	ldr	r1, [pc, #88]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000aa2e:	4817      	ldr	r0, [pc, #92]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000aa30:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa32:	7863      	ldrb	r3, [r4, #1]
1000aa34:	021b      	lsls	r3, r3, #8
1000aa36:	78a2      	ldrb	r2, [r4, #2]
1000aa38:	4313      	orrs	r3, r2
1000aa3a:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000aa3c:	23ac      	movs	r3, #172	; 0xac
1000aa3e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa40:	4653      	mov	r3, sl
1000aa42:	9300      	str	r3, [sp, #0]
1000aa44:	0023      	movs	r3, r4
1000aa46:	002a      	movs	r2, r5
1000aa48:	490f      	ldr	r1, [pc, #60]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000aa4a:	4810      	ldr	r0, [pc, #64]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000aa4c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa4e:	7863      	ldrb	r3, [r4, #1]
1000aa50:	021b      	lsls	r3, r3, #8
1000aa52:	78a2      	ldrb	r2, [r4, #2]
1000aa54:	4313      	orrs	r3, r2
1000aa56:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000aa58:	23ae      	movs	r3, #174	; 0xae
1000aa5a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa5c:	4653      	mov	r3, sl
1000aa5e:	9300      	str	r3, [sp, #0]
1000aa60:	0023      	movs	r3, r4
1000aa62:	002a      	movs	r2, r5
1000aa64:	4908      	ldr	r1, [pc, #32]	; (1000aa88 <sms_pressure_ms58_read_prom+0xf0>)
1000aa66:	4809      	ldr	r0, [pc, #36]	; (1000aa8c <sms_pressure_ms58_read_prom+0xf4>)
1000aa68:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa6a:	7863      	ldrb	r3, [r4, #1]
1000aa6c:	021b      	lsls	r3, r3, #8
1000aa6e:	78a2      	ldrb	r2, [r4, #2]
1000aa70:	4313      	orrs	r3, r2
1000aa72:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000aa74:	2000      	movs	r0, #0
1000aa76:	b002      	add	sp, #8
1000aa78:	bc04      	pop	{r2}
1000aa7a:	4692      	mov	sl, r2
1000aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa7e:	46c0      	nop			; (mov r8, r8)
1000aa80:	1001aef8 	.word	0x1001aef8
1000aa84:	1001aee4 	.word	0x1001aee4
1000aa88:	1001afa4 	.word	0x1001afa4
1000aa8c:	1001afb0 	.word	0x1001afb0
1000aa90:	1000ad01 	.word	0x1000ad01
1000aa94:	1001af08 	.word	0x1001af08

1000aa98 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000aa98:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000aa9a:	4b0a      	ldr	r3, [pc, #40]	; (1000aac4 <sms_pressure_init+0x2c>)
1000aa9c:	4798      	blx	r3
1000aa9e:	2800      	cmp	r0, #0
1000aaa0:	d10d      	bne.n	1000aabe <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000aaa2:	4b09      	ldr	r3, [pc, #36]	; (1000aac8 <sms_pressure_init+0x30>)
1000aaa4:	2201      	movs	r2, #1
1000aaa6:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000aaa8:	2402      	movs	r4, #2
1000aaaa:	2125      	movs	r1, #37	; 0x25
1000aaac:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000aaae:	3103      	adds	r1, #3
1000aab0:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000aab2:	2200      	movs	r2, #0
1000aab4:	3101      	adds	r1, #1
1000aab6:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000aab8:	3101      	adds	r1, #1
1000aaba:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000aabc:	e000      	b.n	1000aac0 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000aabe:	2010      	movs	r0, #16
}
1000aac0:	bd10      	pop	{r4, pc}
1000aac2:	46c0      	nop			; (mov r8, r8)
1000aac4:	1000a999 	.word	0x1000a999
1000aac8:	1001af08 	.word	0x1001af08

1000aacc <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000aacc:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000aace:	4817      	ldr	r0, [pc, #92]	; (1000ab2c <sms_pressure_startup+0x60>)
1000aad0:	4b17      	ldr	r3, [pc, #92]	; (1000ab30 <sms_pressure_startup+0x64>)
1000aad2:	4798      	blx	r3
1000aad4:	4817      	ldr	r0, [pc, #92]	; (1000ab34 <sms_pressure_startup+0x68>)
1000aad6:	4b18      	ldr	r3, [pc, #96]	; (1000ab38 <sms_pressure_startup+0x6c>)
1000aad8:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000aada:	2101      	movs	r1, #1
1000aadc:	2001      	movs	r0, #1
1000aade:	4b17      	ldr	r3, [pc, #92]	; (1000ab3c <sms_pressure_startup+0x70>)
1000aae0:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000aae2:	2101      	movs	r1, #1
1000aae4:	2325      	movs	r3, #37	; 0x25
1000aae6:	4a16      	ldr	r2, [pc, #88]	; (1000ab40 <sms_pressure_startup+0x74>)
1000aae8:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000aaea:	4b16      	ldr	r3, [pc, #88]	; (1000ab44 <sms_pressure_startup+0x78>)
1000aaec:	4798      	blx	r3
    delay_ms(3);
1000aaee:	2003      	movs	r0, #3
1000aaf0:	4b15      	ldr	r3, [pc, #84]	; (1000ab48 <sms_pressure_startup+0x7c>)
1000aaf2:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000aaf4:	4b15      	ldr	r3, [pc, #84]	; (1000ab4c <sms_pressure_startup+0x80>)
1000aaf6:	4798      	blx	r3
1000aaf8:	2800      	cmp	r0, #0
1000aafa:	d006      	beq.n	1000ab0a <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000aafc:	480b      	ldr	r0, [pc, #44]	; (1000ab2c <sms_pressure_startup+0x60>)
1000aafe:	4b0c      	ldr	r3, [pc, #48]	; (1000ab30 <sms_pressure_startup+0x64>)
1000ab00:	4798      	blx	r3
1000ab02:	4813      	ldr	r0, [pc, #76]	; (1000ab50 <sms_pressure_startup+0x84>)
1000ab04:	4b0c      	ldr	r3, [pc, #48]	; (1000ab38 <sms_pressure_startup+0x6c>)
1000ab06:	4798      	blx	r3
1000ab08:	e7fe      	b.n	1000ab08 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000ab0a:	4b0d      	ldr	r3, [pc, #52]	; (1000ab40 <sms_pressure_startup+0x74>)
1000ab0c:	2102      	movs	r1, #2
1000ab0e:	2225      	movs	r2, #37	; 0x25
1000ab10:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000ab12:	2401      	movs	r4, #1
1000ab14:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000ab16:	3a1e      	subs	r2, #30
1000ab18:	4b0e      	ldr	r3, [pc, #56]	; (1000ab54 <sms_pressure_startup+0x88>)
1000ab1a:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000ab1c:	3901      	subs	r1, #1
1000ab1e:	2001      	movs	r0, #1
1000ab20:	4b0d      	ldr	r3, [pc, #52]	; (1000ab58 <sms_pressure_startup+0x8c>)
1000ab22:	4798      	blx	r3
    
    ulp_ready = true;
1000ab24:	4b0d      	ldr	r3, [pc, #52]	; (1000ab5c <sms_pressure_startup+0x90>)
1000ab26:	701c      	strb	r4, [r3, #0]
}
1000ab28:	bd10      	pop	{r4, pc}
1000ab2a:	46c0      	nop			; (mov r8, r8)
1000ab2c:	10017888 	.word	0x10017888
1000ab30:	10016949 	.word	0x10016949
1000ab34:	10018040 	.word	0x10018040
1000ab38:	10016829 	.word	0x10016829
1000ab3c:	100096b1 	.word	0x100096b1
1000ab40:	1001af08 	.word	0x1001af08
1000ab44:	1000a969 	.word	0x1000a969
1000ab48:	1000ae8d 	.word	0x1000ae8d
1000ab4c:	1000aa99 	.word	0x1000aa99
1000ab50:	10018074 	.word	0x10018074
1000ab54:	1001ae7c 	.word	0x1001ae7c
1000ab58:	1000abc9 	.word	0x1000abc9
1000ab5c:	1001ae7d 	.word	0x1001ae7d

1000ab60 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000ab60:	b510      	push	{r4, lr}
1000ab62:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ab64:	466b      	mov	r3, sp
1000ab66:	1dda      	adds	r2, r3, #7
1000ab68:	2300      	movs	r3, #0
1000ab6a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000ab6c:	4c0d      	ldr	r4, [pc, #52]	; (1000aba4 <sms_pressure_define_services+0x44>)
1000ab6e:	0021      	movs	r1, r4
1000ab70:	2001      	movs	r0, #1
1000ab72:	4b0d      	ldr	r3, [pc, #52]	; (1000aba8 <sms_pressure_define_services+0x48>)
1000ab74:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000ab76:	0020      	movs	r0, r4
1000ab78:	4b0c      	ldr	r3, [pc, #48]	; (1000abac <sms_pressure_define_services+0x4c>)
1000ab7a:	4798      	blx	r3
1000ab7c:	1e04      	subs	r4, r0, #0
1000ab7e:	d007      	beq.n	1000ab90 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000ab80:	480b      	ldr	r0, [pc, #44]	; (1000abb0 <sms_pressure_define_services+0x50>)
1000ab82:	4b0c      	ldr	r3, [pc, #48]	; (1000abb4 <sms_pressure_define_services+0x54>)
1000ab84:	4798      	blx	r3
1000ab86:	0021      	movs	r1, r4
1000ab88:	480b      	ldr	r0, [pc, #44]	; (1000abb8 <sms_pressure_define_services+0x58>)
1000ab8a:	4b0c      	ldr	r3, [pc, #48]	; (1000abbc <sms_pressure_define_services+0x5c>)
1000ab8c:	4798      	blx	r3
1000ab8e:	e007      	b.n	1000aba0 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000ab90:	4807      	ldr	r0, [pc, #28]	; (1000abb0 <sms_pressure_define_services+0x50>)
1000ab92:	4b08      	ldr	r3, [pc, #32]	; (1000abb4 <sms_pressure_define_services+0x54>)
1000ab94:	4798      	blx	r3
1000ab96:	4b0a      	ldr	r3, [pc, #40]	; (1000abc0 <sms_pressure_define_services+0x60>)
1000ab98:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000ab9a:	480a      	ldr	r0, [pc, #40]	; (1000abc4 <sms_pressure_define_services+0x64>)
1000ab9c:	4b07      	ldr	r3, [pc, #28]	; (1000abbc <sms_pressure_define_services+0x5c>)
1000ab9e:	4798      	blx	r3
    }
1000aba0:	b002      	add	sp, #8
1000aba2:	bd10      	pop	{r4, pc}
1000aba4:	1001af34 	.word	0x1001af34
1000aba8:	100092dd 	.word	0x100092dd
1000abac:	100092b9 	.word	0x100092b9
1000abb0:	10017888 	.word	0x10017888
1000abb4:	10016949 	.word	0x10016949
1000abb8:	1001812c 	.word	0x1001812c
1000abbc:	10016829 	.word	0x10016829
1000abc0:	1001af08 	.word	0x1001af08
1000abc4:	10018174 	.word	0x10018174

1000abc8 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000abc8:	b510      	push	{r4, lr}
1000abca:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000abcc:	2800      	cmp	r0, #0
1000abce:	d006      	beq.n	1000abde <sms_sensors_interrupt_toggle+0x16>
        imu_device.state = IMU_STATE_ON;
1000abd0:	2102      	movs	r1, #2
1000abd2:	2383      	movs	r3, #131	; 0x83
1000abd4:	4a14      	ldr	r2, [pc, #80]	; (1000ac28 <sms_sensors_interrupt_toggle+0x60>)
1000abd6:	54d1      	strb	r1, [r2, r3]
        sms_imu_enable_callback();
1000abd8:	4b14      	ldr	r3, [pc, #80]	; (1000ac2c <sms_sensors_interrupt_toggle+0x64>)
1000abda:	4798      	blx	r3
1000abdc:	e005      	b.n	1000abea <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        imu_device.state = IMU_STATE_OFF;
1000abde:	2100      	movs	r1, #0
1000abe0:	2383      	movs	r3, #131	; 0x83
1000abe2:	4a11      	ldr	r2, [pc, #68]	; (1000ac28 <sms_sensors_interrupt_toggle+0x60>)
1000abe4:	54d1      	strb	r1, [r2, r3]
        sms_imu_disable_callback();
1000abe6:	4b12      	ldr	r3, [pc, #72]	; (1000ac30 <sms_sensors_interrupt_toggle+0x68>)
1000abe8:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000abea:	2c00      	cmp	r4, #0
1000abec:	d010      	beq.n	1000ac10 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000abee:	4b11      	ldr	r3, [pc, #68]	; (1000ac34 <sms_sensors_interrupt_toggle+0x6c>)
1000abf0:	2103      	movs	r1, #3
1000abf2:	2225      	movs	r2, #37	; 0x25
1000abf4:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000abf6:	3901      	subs	r1, #1
1000abf8:	3206      	adds	r2, #6
1000abfa:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000abfc:	2100      	movs	r1, #0
1000abfe:	480e      	ldr	r0, [pc, #56]	; (1000ac38 <sms_sensors_interrupt_toggle+0x70>)
1000ac00:	4b0e      	ldr	r3, [pc, #56]	; (1000ac3c <sms_sensors_interrupt_toggle+0x74>)
1000ac02:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000ac04:	4b0e      	ldr	r3, [pc, #56]	; (1000ac40 <sms_sensors_interrupt_toggle+0x78>)
1000ac06:	4798      	blx	r3
        sensors_active = true;
1000ac08:	2201      	movs	r2, #1
1000ac0a:	4b0e      	ldr	r3, [pc, #56]	; (1000ac44 <sms_sensors_interrupt_toggle+0x7c>)
1000ac0c:	701a      	strb	r2, [r3, #0]
1000ac0e:	e00a      	b.n	1000ac26 <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000ac10:	2102      	movs	r1, #2
1000ac12:	2325      	movs	r3, #37	; 0x25
1000ac14:	4a07      	ldr	r2, [pc, #28]	; (1000ac34 <sms_sensors_interrupt_toggle+0x6c>)
1000ac16:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000ac18:	4b0b      	ldr	r3, [pc, #44]	; (1000ac48 <sms_sensors_interrupt_toggle+0x80>)
1000ac1a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000ac1c:	4b0b      	ldr	r3, [pc, #44]	; (1000ac4c <sms_sensors_interrupt_toggle+0x84>)
1000ac1e:	4798      	blx	r3
        sensors_active = false;
1000ac20:	2200      	movs	r2, #0
1000ac22:	4b08      	ldr	r3, [pc, #32]	; (1000ac44 <sms_sensors_interrupt_toggle+0x7c>)
1000ac24:	701a      	strb	r2, [r3, #0]
    }
}
1000ac26:	bd10      	pop	{r4, pc}
1000ac28:	1001afbc 	.word	0x1001afbc
1000ac2c:	10009a31 	.word	0x10009a31
1000ac30:	10009a4d 	.word	0x10009a4d
1000ac34:	1001af08 	.word	0x1001af08
1000ac38:	000003d5 	.word	0x000003d5
1000ac3c:	1000ad65 	.word	0x1000ad65
1000ac40:	1000ad99 	.word	0x1000ad99
1000ac44:	1001af94 	.word	0x1001af94
1000ac48:	1000ad8d 	.word	0x1000ad8d
1000ac4c:	1000adb9 	.word	0x1000adb9

1000ac50 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000ac50:	b510      	push	{r4, lr}
1000ac52:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000ac54:	2800      	cmp	r0, #0
1000ac56:	d103      	bne.n	1000ac60 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000ac58:	2100      	movs	r1, #0
1000ac5a:	3006      	adds	r0, #6
1000ac5c:	4b07      	ldr	r3, [pc, #28]	; (1000ac7c <sms_sensors_switch+0x2c>)
1000ac5e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000ac60:	2c00      	cmp	r4, #0
1000ac62:	d006      	beq.n	1000ac72 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000ac64:	2101      	movs	r1, #1
1000ac66:	2325      	movs	r3, #37	; 0x25
1000ac68:	4a05      	ldr	r2, [pc, #20]	; (1000ac80 <sms_sensors_switch+0x30>)
1000ac6a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000ac6c:	4b05      	ldr	r3, [pc, #20]	; (1000ac84 <sms_sensors_switch+0x34>)
1000ac6e:	4798      	blx	r3
1000ac70:	e003      	b.n	1000ac7a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000ac72:	2100      	movs	r1, #0
1000ac74:	2007      	movs	r0, #7
1000ac76:	4b01      	ldr	r3, [pc, #4]	; (1000ac7c <sms_sensors_switch+0x2c>)
1000ac78:	4798      	blx	r3
    }
}
1000ac7a:	bd10      	pop	{r4, pc}
1000ac7c:	1000b721 	.word	0x1000b721
1000ac80:	1001af08 	.word	0x1001af08
1000ac84:	1000aacd 	.word	0x1000aacd

1000ac88 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000ac88:	b530      	push	{r4, r5, lr}
1000ac8a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000ac8c:	ac01      	add	r4, sp, #4
1000ac8e:	0020      	movs	r0, r4
1000ac90:	4b13      	ldr	r3, [pc, #76]	; (1000ace0 <sms_spi_master_configure+0x58>)
1000ac92:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000ac94:	2310      	movs	r3, #16
1000ac96:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000ac98:	0021      	movs	r1, r4
1000ac9a:	4812      	ldr	r0, [pc, #72]	; (1000ace4 <sms_spi_master_configure+0x5c>)
1000ac9c:	4b12      	ldr	r3, [pc, #72]	; (1000ace8 <sms_spi_master_configure+0x60>)
1000ac9e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000aca0:	ac02      	add	r4, sp, #8
1000aca2:	0020      	movs	r0, r4
1000aca4:	4b11      	ldr	r3, [pc, #68]	; (1000acec <sms_spi_master_configure+0x64>)
1000aca6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000aca8:	2368      	movs	r3, #104	; 0x68
1000acaa:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000acac:	2300      	movs	r3, #0
1000acae:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000acb0:	3311      	adds	r3, #17
1000acb2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000acb4:	3b0d      	subs	r3, #13
1000acb6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000acb8:	2213      	movs	r2, #19
1000acba:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000acbc:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000acbe:	3a14      	subs	r2, #20
1000acc0:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000acc2:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000acc4:	3213      	adds	r2, #19
1000acc6:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000acc8:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000acca:	4d09      	ldr	r5, [pc, #36]	; (1000acf0 <sms_spi_master_configure+0x68>)
1000accc:	0022      	movs	r2, r4
1000acce:	4909      	ldr	r1, [pc, #36]	; (1000acf4 <sms_spi_master_configure+0x6c>)
1000acd0:	0028      	movs	r0, r5
1000acd2:	4b09      	ldr	r3, [pc, #36]	; (1000acf8 <sms_spi_master_configure+0x70>)
1000acd4:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000acd6:	0028      	movs	r0, r5
1000acd8:	4b08      	ldr	r3, [pc, #32]	; (1000acfc <sms_spi_master_configure+0x74>)
1000acda:	4798      	blx	r3
}
1000acdc:	b00d      	add	sp, #52	; 0x34
1000acde:	bd30      	pop	{r4, r5, pc}
1000ace0:	1000aeb9 	.word	0x1000aeb9
1000ace4:	1001afa4 	.word	0x1001afa4
1000ace8:	1000aef1 	.word	0x1000aef1
1000acec:	1000aec5 	.word	0x1000aec5
1000acf0:	1001afb0 	.word	0x1001afb0
1000acf4:	40007000 	.word	0x40007000
1000acf8:	1000afc1 	.word	0x1000afc1
1000acfc:	1000af31 	.word	0x1000af31

1000ad00 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad02:	b083      	sub	sp, #12
1000ad04:	0004      	movs	r4, r0
1000ad06:	000d      	movs	r5, r1
1000ad08:	9200      	str	r2, [sp, #0]
1000ad0a:	9301      	str	r3, [sp, #4]
1000ad0c:	ab08      	add	r3, sp, #32
1000ad0e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000ad10:	2201      	movs	r2, #1
1000ad12:	4f08      	ldr	r7, [pc, #32]	; (1000ad34 <sms_spi_master_transceive+0x34>)
1000ad14:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000ad16:	0033      	movs	r3, r6
1000ad18:	9a01      	ldr	r2, [sp, #4]
1000ad1a:	9900      	ldr	r1, [sp, #0]
1000ad1c:	0020      	movs	r0, r4
1000ad1e:	4e06      	ldr	r6, [pc, #24]	; (1000ad38 <sms_spi_master_transceive+0x38>)
1000ad20:	47b0      	blx	r6
1000ad22:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000ad24:	2200      	movs	r2, #0
1000ad26:	0029      	movs	r1, r5
1000ad28:	0020      	movs	r0, r4
1000ad2a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000ad2c:	0030      	movs	r0, r6
1000ad2e:	b003      	add	sp, #12
1000ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad32:	46c0      	nop			; (mov r8, r8)
1000ad34:	1000b1a9 	.word	0x1000b1a9
1000ad38:	1000b125 	.word	0x1000b125

1000ad3c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000ad3c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000ad3e:	2328      	movs	r3, #40	; 0x28
1000ad40:	4a06      	ldr	r2, [pc, #24]	; (1000ad5c <sms_timer_aon_callback+0x20>)
1000ad42:	5cd3      	ldrb	r3, [r2, r3]
1000ad44:	2b00      	cmp	r3, #0
1000ad46:	d008      	beq.n	1000ad5a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000ad48:	2101      	movs	r1, #1
1000ad4a:	2329      	movs	r3, #41	; 0x29
1000ad4c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000ad4e:	2300      	movs	r3, #0
1000ad50:	2200      	movs	r2, #0
1000ad52:	3102      	adds	r1, #2
1000ad54:	2042      	movs	r0, #66	; 0x42
1000ad56:	4c02      	ldr	r4, [pc, #8]	; (1000ad60 <sms_timer_aon_callback+0x24>)
1000ad58:	47a0      	blx	r4
	}
}
1000ad5a:	bd10      	pop	{r4, pc}
1000ad5c:	1001af08 	.word	0x1001af08
1000ad60:	1000e73d 	.word	0x1000e73d

1000ad64 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000ad64:	b530      	push	{r4, r5, lr}
1000ad66:	b083      	sub	sp, #12
1000ad68:	0004      	movs	r4, r0
1000ad6a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000ad6c:	4668      	mov	r0, sp
1000ad6e:	4b05      	ldr	r3, [pc, #20]	; (1000ad84 <sms_timer_aon_init+0x20>)
1000ad70:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000ad72:	466b      	mov	r3, sp
1000ad74:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000ad76:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000ad78:	4668      	mov	r0, sp
1000ad7a:	4b03      	ldr	r3, [pc, #12]	; (1000ad88 <sms_timer_aon_init+0x24>)
1000ad7c:	4798      	blx	r3
}
1000ad7e:	b003      	add	sp, #12
1000ad80:	bd30      	pop	{r4, r5, pc}
1000ad82:	46c0      	nop			; (mov r8, r8)
1000ad84:	100080e9 	.word	0x100080e9
1000ad88:	1000815d 	.word	0x1000815d

1000ad8c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000ad8c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000ad8e:	4b01      	ldr	r3, [pc, #4]	; (1000ad94 <sms_timer_aon_disable+0x8>)
1000ad90:	4798      	blx	r3
}
1000ad92:	bd10      	pop	{r4, pc}
1000ad94:	100080f9 	.word	0x100080f9

1000ad98 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000ad98:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000ad9a:	4804      	ldr	r0, [pc, #16]	; (1000adac <sms_timer_aon_register_callback+0x14>)
1000ad9c:	4b04      	ldr	r3, [pc, #16]	; (1000adb0 <sms_timer_aon_register_callback+0x18>)
1000ad9e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ada0:	2280      	movs	r2, #128	; 0x80
1000ada2:	0512      	lsls	r2, r2, #20
1000ada4:	4b03      	ldr	r3, [pc, #12]	; (1000adb4 <sms_timer_aon_register_callback+0x1c>)
1000ada6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000ada8:	bd10      	pop	{r4, pc}
1000adaa:	46c0      	nop			; (mov r8, r8)
1000adac:	1000ad3d 	.word	0x1000ad3d
1000adb0:	10008145 	.word	0x10008145
1000adb4:	e000e100 	.word	0xe000e100

1000adb8 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000adb8:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000adba:	4b04      	ldr	r3, [pc, #16]	; (1000adcc <sms_timer_aon_unregister_callback+0x14>)
1000adbc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000adbe:	2180      	movs	r1, #128	; 0x80
1000adc0:	0509      	lsls	r1, r1, #20
1000adc2:	2380      	movs	r3, #128	; 0x80
1000adc4:	4a02      	ldr	r2, [pc, #8]	; (1000add0 <sms_timer_aon_unregister_callback+0x18>)
1000adc6:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000adc8:	bd10      	pop	{r4, pc}
1000adca:	46c0      	nop			; (mov r8, r8)
1000adcc:	10008151 	.word	0x10008151
1000add0:	e000e100 	.word	0xe000e100

1000add4 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000add4:	b510      	push	{r4, lr}
1000add6:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000add8:	ac01      	add	r4, sp, #4
1000adda:	0020      	movs	r0, r4
1000addc:	4b0c      	ldr	r3, [pc, #48]	; (1000ae10 <sms_dualtimer_init+0x3c>)
1000adde:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000ade0:	2301      	movs	r3, #1
1000ade2:	425b      	negs	r3, r3
1000ade4:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000ade6:	3302      	adds	r3, #2
1000ade8:	7063      	strb	r3, [r4, #1]
	//config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
	//config_dualtimer.timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config_dualtimer.timer1.interrup_enable = false;
1000adea:	2200      	movs	r2, #0
1000adec:	7122      	strb	r2, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000adee:	4909      	ldr	r1, [pc, #36]	; (1000ae14 <sms_dualtimer_init+0x40>)
1000adf0:	6161      	str	r1, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000adf2:	7362      	strb	r2, [r4, #13]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000adf4:	73e2      	strb	r2, [r4, #15]
	config_dualtimer.timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000adf6:	73a3      	strb	r3, [r4, #14]
	config_dualtimer.timer2.interrup_enable = true;
1000adf8:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000adfa:	0020      	movs	r0, r4
1000adfc:	4b06      	ldr	r3, [pc, #24]	; (1000ae18 <sms_dualtimer_init+0x44>)
1000adfe:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000ae00:	2000      	movs	r0, #0
1000ae02:	4c06      	ldr	r4, [pc, #24]	; (1000ae1c <sms_dualtimer_init+0x48>)
1000ae04:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000ae06:	2001      	movs	r0, #1
1000ae08:	47a0      	blx	r4
}
1000ae0a:	b008      	add	sp, #32
1000ae0c:	bd10      	pop	{r4, pc}
1000ae0e:	46c0      	nop			; (mov r8, r8)
1000ae10:	1000b20d 	.word	0x1000b20d
1000ae14:	00006590 	.word	0x00006590
1000ae18:	1000b2b5 	.word	0x1000b2b5
1000ae1c:	1000b291 	.word	0x1000b291

1000ae20 <sms_dualtimer_start>:
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000ae20:	b510      	push	{r4, lr}
1000ae22:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000ae24:	2801      	cmp	r0, #1
1000ae26:	d006      	beq.n	1000ae36 <sms_dualtimer_start+0x16>
1000ae28:	2800      	cmp	r0, #0
1000ae2a:	d002      	beq.n	1000ae32 <sms_dualtimer_start+0x12>
1000ae2c:	2802      	cmp	r0, #2
1000ae2e:	d004      	beq.n	1000ae3a <sms_dualtimer_start+0x1a>
1000ae30:	e005      	b.n	1000ae3e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000ae32:	221a      	movs	r2, #26
1000ae34:	e004      	b.n	1000ae40 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000ae36:	4a0c      	ldr	r2, [pc, #48]	; (1000ae68 <sms_dualtimer_start+0x48>)
        break;
1000ae38:	e002      	b.n	1000ae40 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000ae3a:	4a0c      	ldr	r2, [pc, #48]	; (1000ae6c <sms_dualtimer_start+0x4c>)
        break;
1000ae3c:	e000      	b.n	1000ae40 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000ae3e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000ae40:	2900      	cmp	r1, #0
1000ae42:	d100      	bne.n	1000ae46 <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000ae44:	3101      	adds	r1, #1
    }
    
    ulp_ready = false;
1000ae46:	2000      	movs	r0, #0
1000ae48:	4b09      	ldr	r3, [pc, #36]	; (1000ae70 <sms_dualtimer_start+0x50>)
1000ae4a:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000ae4c:	434a      	muls	r2, r1
1000ae4e:	2100      	movs	r1, #0
1000ae50:	0020      	movs	r0, r4
1000ae52:	4b08      	ldr	r3, [pc, #32]	; (1000ae74 <sms_dualtimer_start+0x54>)
1000ae54:	4798      	blx	r3
    dualtimer_enable(tmr);
1000ae56:	0020      	movs	r0, r4
1000ae58:	4b07      	ldr	r3, [pc, #28]	; (1000ae78 <sms_dualtimer_start+0x58>)
1000ae5a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae5c:	2280      	movs	r2, #128	; 0x80
1000ae5e:	01d2      	lsls	r2, r2, #7
1000ae60:	4b06      	ldr	r3, [pc, #24]	; (1000ae7c <sms_dualtimer_start+0x5c>)
1000ae62:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ae64:	bd10      	pop	{r4, pc}
1000ae66:	46c0      	nop			; (mov r8, r8)
1000ae68:	00006590 	.word	0x00006590
1000ae6c:	018cba80 	.word	0x018cba80
1000ae70:	1001ae7d 	.word	0x1001ae7d
1000ae74:	1000b245 	.word	0x1000b245
1000ae78:	1000b26d 	.word	0x1000b26d
1000ae7c:	e000e100 	.word	0xe000e100

1000ae80 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000ae80:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000ae82:	4b01      	ldr	r3, [pc, #4]	; (1000ae88 <sms_dualtimer_stop+0x8>)
1000ae84:	4798      	blx	r3
}
1000ae86:	bd10      	pop	{r4, pc}
1000ae88:	1000b291 	.word	0x1000b291

1000ae8c <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
1000ae8c:	b510      	push	{r4, lr}
1000ae8e:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000ae90:	2201      	movs	r2, #1
1000ae92:	2001      	movs	r0, #1
1000ae94:	4b05      	ldr	r3, [pc, #20]	; (1000aeac <delay_ms+0x20>)
1000ae96:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000ae98:	4c05      	ldr	r4, [pc, #20]	; (1000aeb0 <delay_ms+0x24>)
1000ae9a:	2001      	movs	r0, #1
1000ae9c:	47a0      	blx	r4
1000ae9e:	2800      	cmp	r0, #0
1000aea0:	d1fb      	bne.n	1000ae9a <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000aea2:	3001      	adds	r0, #1
1000aea4:	4b03      	ldr	r3, [pc, #12]	; (1000aeb4 <delay_ms+0x28>)
1000aea6:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000aea8:	bd10      	pop	{r4, pc}
1000aeaa:	46c0      	nop			; (mov r8, r8)
1000aeac:	1000ae21 	.word	0x1000ae21
1000aeb0:	1000b231 	.word	0x1000b231
1000aeb4:	1000b291 	.word	0x1000b291

1000aeb8 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000aeb8:	230c      	movs	r3, #12
1000aeba:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000aebc:	2300      	movs	r3, #0
1000aebe:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000aec0:	7083      	strb	r3, [r0, #2]
}
1000aec2:	4770      	bx	lr

1000aec4 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000aec4:	2301      	movs	r3, #1
1000aec6:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000aec8:	2300      	movs	r3, #0
1000aeca:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000aecc:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000aece:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000aed0:	3381      	adds	r3, #129	; 0x81
1000aed2:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000aed4:	3b77      	subs	r3, #119	; 0x77
1000aed6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000aed8:	3301      	adds	r3, #1
1000aeda:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000aedc:	3301      	adds	r3, #1
1000aede:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000aee0:	3301      	adds	r3, #1
1000aee2:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000aee4:	3b0b      	subs	r3, #11
1000aee6:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000aee8:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000aeea:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000aeec:	6243      	str	r3, [r0, #36]	; 0x24
};
1000aeee:	4770      	bx	lr

1000aef0 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000aef0:	b530      	push	{r4, r5, lr}
1000aef2:	b083      	sub	sp, #12
1000aef4:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000aef6:	780b      	ldrb	r3, [r1, #0]
1000aef8:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000aefa:	784b      	ldrb	r3, [r1, #1]
1000aefc:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000aefe:	788b      	ldrb	r3, [r1, #2]
1000af00:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000af02:	ad01      	add	r5, sp, #4
1000af04:	0028      	movs	r0, r5
1000af06:	4b07      	ldr	r3, [pc, #28]	; (1000af24 <spi_attach_slave+0x34>)
1000af08:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000af0a:	2301      	movs	r3, #1
1000af0c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000af0e:	7820      	ldrb	r0, [r4, #0]
1000af10:	0029      	movs	r1, r5
1000af12:	4b05      	ldr	r3, [pc, #20]	; (1000af28 <spi_attach_slave+0x38>)
1000af14:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000af16:	7820      	ldrb	r0, [r4, #0]
1000af18:	2101      	movs	r1, #1
1000af1a:	4b04      	ldr	r3, [pc, #16]	; (1000af2c <spi_attach_slave+0x3c>)
1000af1c:	4798      	blx	r3
}
1000af1e:	b003      	add	sp, #12
1000af20:	bd30      	pop	{r4, r5, pc}
1000af22:	46c0      	nop			; (mov r8, r8)
1000af24:	1000b509 	.word	0x1000b509
1000af28:	1000b519 	.word	0x1000b519
1000af2c:	1000b721 	.word	0x1000b721

1000af30 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000af30:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000af32:	2201      	movs	r2, #1
1000af34:	761a      	strb	r2, [r3, #24]
}
1000af36:	4770      	bx	lr

1000af38 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000af38:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000af3a:	2300      	movs	r3, #0
1000af3c:	6802      	ldr	r2, [r0, #0]
1000af3e:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000af40:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000af42:	4a0d      	ldr	r2, [pc, #52]	; (1000af78 <spi_disable+0x40>)
1000af44:	4293      	cmp	r3, r2
1000af46:	d109      	bne.n	1000af5c <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000af48:	2041      	movs	r0, #65	; 0x41
1000af4a:	4c0c      	ldr	r4, [pc, #48]	; (1000af7c <spi_disable+0x44>)
1000af4c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000af4e:	2026      	movs	r0, #38	; 0x26
1000af50:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000af52:	2038      	movs	r0, #56	; 0x38
1000af54:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000af56:	2001      	movs	r0, #1
1000af58:	47a0      	blx	r4
1000af5a:	e00b      	b.n	1000af74 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000af5c:	4a08      	ldr	r2, [pc, #32]	; (1000af80 <spi_disable+0x48>)
1000af5e:	4293      	cmp	r3, r2
1000af60:	d108      	bne.n	1000af74 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000af62:	2042      	movs	r0, #66	; 0x42
1000af64:	4c05      	ldr	r4, [pc, #20]	; (1000af7c <spi_disable+0x44>)
1000af66:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000af68:	2027      	movs	r0, #39	; 0x27
1000af6a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000af6c:	2039      	movs	r0, #57	; 0x39
1000af6e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000af70:	2002      	movs	r0, #2
1000af72:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000af74:	bd10      	pop	{r4, pc}
1000af76:	46c0      	nop			; (mov r8, r8)
1000af78:	40006000 	.word	0x40006000
1000af7c:	1000beb9 	.word	0x1000beb9
1000af80:	40007000 	.word	0x40007000

1000af84 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000af84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000af86:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000af88:	4b09      	ldr	r3, [pc, #36]	; (1000afb0 <spi_reset+0x2c>)
1000af8a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000af8c:	4b09      	ldr	r3, [pc, #36]	; (1000afb4 <spi_reset+0x30>)
1000af8e:	429c      	cmp	r4, r3
1000af90:	d105      	bne.n	1000af9e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000af92:	2001      	movs	r0, #1
1000af94:	4c08      	ldr	r4, [pc, #32]	; (1000afb8 <spi_reset+0x34>)
1000af96:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000af98:	2038      	movs	r0, #56	; 0x38
1000af9a:	47a0      	blx	r4
1000af9c:	e007      	b.n	1000afae <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000af9e:	4b07      	ldr	r3, [pc, #28]	; (1000afbc <spi_reset+0x38>)
1000afa0:	429c      	cmp	r4, r3
1000afa2:	d104      	bne.n	1000afae <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000afa4:	2002      	movs	r0, #2
1000afa6:	4c04      	ldr	r4, [pc, #16]	; (1000afb8 <spi_reset+0x34>)
1000afa8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000afaa:	2039      	movs	r0, #57	; 0x39
1000afac:	47a0      	blx	r4
	}
}
1000afae:	bd10      	pop	{r4, pc}
1000afb0:	1000af39 	.word	0x1000af39
1000afb4:	40006000 	.word	0x40006000
1000afb8:	1000c225 	.word	0x1000c225
1000afbc:	40007000 	.word	0x40007000

1000afc0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000afc2:	465f      	mov	r7, fp
1000afc4:	4646      	mov	r6, r8
1000afc6:	b4c0      	push	{r6, r7}
1000afc8:	b083      	sub	sp, #12
1000afca:	0006      	movs	r6, r0
1000afcc:	4688      	mov	r8, r1
1000afce:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000afd0:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000afd2:	7e0b      	ldrb	r3, [r1, #24]
1000afd4:	07db      	lsls	r3, r3, #31
1000afd6:	d501      	bpl.n	1000afdc <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000afd8:	2300      	movs	r3, #0
1000afda:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000afdc:	0030      	movs	r0, r6
1000afde:	4b4a      	ldr	r3, [pc, #296]	; (1000b108 <spi_init+0x148>)
1000afe0:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000afe2:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000afe4:	4a49      	ldr	r2, [pc, #292]	; (1000b10c <spi_init+0x14c>)
1000afe6:	4293      	cmp	r3, r2
1000afe8:	d109      	bne.n	1000affe <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000afea:	2041      	movs	r0, #65	; 0x41
1000afec:	4c48      	ldr	r4, [pc, #288]	; (1000b110 <spi_init+0x150>)
1000afee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000aff0:	2026      	movs	r0, #38	; 0x26
1000aff2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000aff4:	2038      	movs	r0, #56	; 0x38
1000aff6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000aff8:	2001      	movs	r0, #1
1000affa:	47a0      	blx	r4
1000affc:	e00b      	b.n	1000b016 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000affe:	4a45      	ldr	r2, [pc, #276]	; (1000b114 <spi_init+0x154>)
1000b000:	4293      	cmp	r3, r2
1000b002:	d108      	bne.n	1000b016 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b004:	2042      	movs	r0, #66	; 0x42
1000b006:	4c42      	ldr	r4, [pc, #264]	; (1000b110 <spi_init+0x150>)
1000b008:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b00a:	2027      	movs	r0, #39	; 0x27
1000b00c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b00e:	2039      	movs	r0, #57	; 0x39
1000b010:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b012:	2002      	movs	r0, #2
1000b014:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b016:	a801      	add	r0, sp, #4
1000b018:	4b3f      	ldr	r3, [pc, #252]	; (1000b118 <spi_init+0x158>)
1000b01a:	4798      	blx	r3
1000b01c:	002c      	movs	r4, r5
1000b01e:	3408      	adds	r4, #8
1000b020:	2318      	movs	r3, #24
1000b022:	469b      	mov	fp, r3
1000b024:	44ab      	add	fp, r5
1000b026:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b028:	6820      	ldr	r0, [r4, #0]
1000b02a:	1c43      	adds	r3, r0, #1
1000b02c:	d011      	beq.n	1000b052 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b02e:	782b      	ldrb	r3, [r5, #0]
1000b030:	2b01      	cmp	r3, #1
1000b032:	d102      	bne.n	1000b03a <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b034:	466a      	mov	r2, sp
1000b036:	7113      	strb	r3, [r2, #4]
1000b038:	e003      	b.n	1000b042 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b03a:	2b00      	cmp	r3, #0
1000b03c:	d101      	bne.n	1000b042 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b03e:	466a      	mov	r2, sp
1000b040:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b042:	b2c0      	uxtb	r0, r0
1000b044:	a901      	add	r1, sp, #4
1000b046:	4b35      	ldr	r3, [pc, #212]	; (1000b11c <spi_init+0x15c>)
1000b048:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b04a:	8a39      	ldrh	r1, [r7, #16]
1000b04c:	7838      	ldrb	r0, [r7, #0]
1000b04e:	4b34      	ldr	r3, [pc, #208]	; (1000b120 <spi_init+0x160>)
1000b050:	4798      	blx	r3
1000b052:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b054:	455c      	cmp	r4, fp
1000b056:	d1e6      	bne.n	1000b026 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b058:	78eb      	ldrb	r3, [r5, #3]
1000b05a:	4642      	mov	r2, r8
1000b05c:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b05e:	782b      	ldrb	r3, [r5, #0]
1000b060:	2b01      	cmp	r3, #1
1000b062:	d100      	bne.n	1000b066 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b064:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b066:	782b      	ldrb	r3, [r5, #0]
1000b068:	2b00      	cmp	r3, #0
1000b06a:	d101      	bne.n	1000b070 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b06c:	4642      	mov	r2, r8
1000b06e:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b070:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b072:	782a      	ldrb	r2, [r5, #0]
1000b074:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b076:	782a      	ldrb	r2, [r5, #0]
1000b078:	2a01      	cmp	r2, #1
1000b07a:	d101      	bne.n	1000b080 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b07c:	792a      	ldrb	r2, [r5, #4]
1000b07e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b080:	786a      	ldrb	r2, [r5, #1]
1000b082:	2a04      	cmp	r2, #4
1000b084:	d104      	bne.n	1000b090 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b086:	2124      	movs	r1, #36	; 0x24
1000b088:	5c58      	ldrb	r0, [r3, r1]
1000b08a:	4302      	orrs	r2, r0
1000b08c:	545a      	strb	r2, [r3, r1]
1000b08e:	e004      	b.n	1000b09a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b090:	2124      	movs	r1, #36	; 0x24
1000b092:	5c5a      	ldrb	r2, [r3, r1]
1000b094:	2004      	movs	r0, #4
1000b096:	4382      	bics	r2, r0
1000b098:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b09a:	78aa      	ldrb	r2, [r5, #2]
1000b09c:	2a01      	cmp	r2, #1
1000b09e:	d01a      	beq.n	1000b0d6 <spi_init+0x116>
1000b0a0:	2a00      	cmp	r2, #0
1000b0a2:	d004      	beq.n	1000b0ae <spi_init+0xee>
1000b0a4:	2a02      	cmp	r2, #2
1000b0a6:	d00c      	beq.n	1000b0c2 <spi_init+0x102>
1000b0a8:	2a03      	cmp	r2, #3
1000b0aa:	d01e      	beq.n	1000b0ea <spi_init+0x12a>
1000b0ac:	e026      	b.n	1000b0fc <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b0ae:	2224      	movs	r2, #36	; 0x24
1000b0b0:	5c99      	ldrb	r1, [r3, r2]
1000b0b2:	2002      	movs	r0, #2
1000b0b4:	4381      	bics	r1, r0
1000b0b6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b0b8:	5c99      	ldrb	r1, [r3, r2]
1000b0ba:	3801      	subs	r0, #1
1000b0bc:	4381      	bics	r1, r0
1000b0be:	5499      	strb	r1, [r3, r2]
1000b0c0:	e01c      	b.n	1000b0fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b0c2:	2224      	movs	r2, #36	; 0x24
1000b0c4:	5c98      	ldrb	r0, [r3, r2]
1000b0c6:	2102      	movs	r1, #2
1000b0c8:	4301      	orrs	r1, r0
1000b0ca:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b0cc:	5c99      	ldrb	r1, [r3, r2]
1000b0ce:	2001      	movs	r0, #1
1000b0d0:	4381      	bics	r1, r0
1000b0d2:	5499      	strb	r1, [r3, r2]
1000b0d4:	e012      	b.n	1000b0fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b0d6:	2224      	movs	r2, #36	; 0x24
1000b0d8:	5c99      	ldrb	r1, [r3, r2]
1000b0da:	2002      	movs	r0, #2
1000b0dc:	4381      	bics	r1, r0
1000b0de:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b0e0:	5c98      	ldrb	r0, [r3, r2]
1000b0e2:	2101      	movs	r1, #1
1000b0e4:	4301      	orrs	r1, r0
1000b0e6:	5499      	strb	r1, [r3, r2]
1000b0e8:	e008      	b.n	1000b0fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b0ea:	2224      	movs	r2, #36	; 0x24
1000b0ec:	5c98      	ldrb	r0, [r3, r2]
1000b0ee:	2102      	movs	r1, #2
1000b0f0:	4301      	orrs	r1, r0
1000b0f2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b0f4:	5c98      	ldrb	r0, [r3, r2]
1000b0f6:	2101      	movs	r1, #1
1000b0f8:	4301      	orrs	r1, r0
1000b0fa:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b0fc:	2000      	movs	r0, #0
1000b0fe:	b003      	add	sp, #12
1000b100:	bc0c      	pop	{r2, r3}
1000b102:	4690      	mov	r8, r2
1000b104:	469b      	mov	fp, r3
1000b106:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b108:	1000af85 	.word	0x1000af85
1000b10c:	40006000 	.word	0x40006000
1000b110:	1000bb5d 	.word	0x1000bb5d
1000b114:	40007000 	.word	0x40007000
1000b118:	1000b509 	.word	0x1000b509
1000b11c:	1000b519 	.word	0x1000b519
1000b120:	1000b7ad 	.word	0x1000b7ad

1000b124 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b124:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b126:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b128:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b12a:	2600      	movs	r6, #0
1000b12c:	466d      	mov	r5, sp
1000b12e:	71ee      	strb	r6, [r5, #7]
1000b130:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b132:	2c00      	cmp	r4, #0
1000b134:	d034      	beq.n	1000b1a0 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b136:	2900      	cmp	r1, #0
1000b138:	d104      	bne.n	1000b144 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b13a:	0029      	movs	r1, r5
1000b13c:	7980      	ldrb	r0, [r0, #6]
1000b13e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b140:	2701      	movs	r7, #1
1000b142:	e00b      	b.n	1000b15c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b144:	2a00      	cmp	r2, #0
1000b146:	d005      	beq.n	1000b154 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b148:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b14a:	2b00      	cmp	r3, #0
1000b14c:	d029      	beq.n	1000b1a2 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b14e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b150:	2700      	movs	r7, #0
1000b152:	e003      	b.n	1000b15c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b154:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b156:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b158:	466a      	mov	r2, sp
1000b15a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b15c:	2528      	movs	r5, #40	; 0x28
1000b15e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b160:	07c0      	lsls	r0, r0, #31
1000b162:	d4fc      	bmi.n	1000b15e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b164:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b166:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b168:	2b00      	cmp	r3, #0
1000b16a:	d014      	beq.n	1000b196 <spi_transceive_buffer_wait+0x72>
1000b16c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b16e:	4278      	negs	r0, r7
1000b170:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b172:	4270      	negs	r0, r6
1000b174:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b176:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b178:	07c0      	lsls	r0, r0, #31
1000b17a:	d5fc      	bpl.n	1000b176 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b17c:	7808      	ldrb	r0, [r1, #0]
1000b17e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b180:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b182:	07c0      	lsls	r0, r0, #31
1000b184:	d5fc      	bpl.n	1000b180 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b186:	7920      	ldrb	r0, [r4, #4]
1000b188:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b18a:	3501      	adds	r5, #1
1000b18c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b18e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b190:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b192:	42ab      	cmp	r3, r5
1000b194:	d1ef      	bne.n	1000b176 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b196:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b198:	06db      	lsls	r3, r3, #27
1000b19a:	d5fc      	bpl.n	1000b196 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b19c:	2000      	movs	r0, #0
1000b19e:	e000      	b.n	1000b1a2 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b1a0:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b1a2:	b003      	add	sp, #12
1000b1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1a6:	46c0      	nop			; (mov r8, r8)

1000b1a8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b1a8:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b1aa:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b1ac:	2a00      	cmp	r2, #0
1000b1ae:	d003      	beq.n	1000b1b8 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b1b0:	2100      	movs	r1, #0
1000b1b2:	4b04      	ldr	r3, [pc, #16]	; (1000b1c4 <spi_select_slave+0x1c>)
1000b1b4:	4798      	blx	r3
1000b1b6:	e002      	b.n	1000b1be <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b1b8:	2101      	movs	r1, #1
1000b1ba:	4b02      	ldr	r3, [pc, #8]	; (1000b1c4 <spi_select_slave+0x1c>)
1000b1bc:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b1be:	2000      	movs	r0, #0
1000b1c0:	bd10      	pop	{r4, pc}
1000b1c2:	46c0      	nop			; (mov r8, r8)
1000b1c4:	1000b721 	.word	0x1000b721

1000b1c8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b1c8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b1ca:	4b0d      	ldr	r3, [pc, #52]	; (1000b200 <dualtimer_isr_handler+0x38>)
1000b1cc:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b1ce:	2b00      	cmp	r3, #0
1000b1d0:	d007      	beq.n	1000b1e2 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b1d2:	2201      	movs	r2, #1
1000b1d4:	4b0a      	ldr	r3, [pc, #40]	; (1000b200 <dualtimer_isr_handler+0x38>)
1000b1d6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b1d8:	4b0a      	ldr	r3, [pc, #40]	; (1000b204 <dualtimer_isr_handler+0x3c>)
1000b1da:	681b      	ldr	r3, [r3, #0]
1000b1dc:	2b00      	cmp	r3, #0
1000b1de:	d000      	beq.n	1000b1e2 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b1e0:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b1e2:	2334      	movs	r3, #52	; 0x34
1000b1e4:	4a06      	ldr	r2, [pc, #24]	; (1000b200 <dualtimer_isr_handler+0x38>)
1000b1e6:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b1e8:	2b00      	cmp	r3, #0
1000b1ea:	d007      	beq.n	1000b1fc <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b1ec:	2101      	movs	r1, #1
1000b1ee:	232c      	movs	r3, #44	; 0x2c
1000b1f0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b1f2:	4b05      	ldr	r3, [pc, #20]	; (1000b208 <dualtimer_isr_handler+0x40>)
1000b1f4:	681b      	ldr	r3, [r3, #0]
1000b1f6:	2b00      	cmp	r3, #0
1000b1f8:	d000      	beq.n	1000b1fc <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b1fa:	4798      	blx	r3
	}
}
1000b1fc:	bd10      	pop	{r4, pc}
1000b1fe:	46c0      	nop			; (mov r8, r8)
1000b200:	40001000 	.word	0x40001000
1000b204:	100193d4 	.word	0x100193d4
1000b208:	100193d8 	.word	0x100193d8

1000b20c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b20c:	2301      	movs	r3, #1
1000b20e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b210:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b212:	2202      	movs	r2, #2
1000b214:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b216:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b218:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b21a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b21c:	2200      	movs	r2, #0
1000b21e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b220:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b222:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b224:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b226:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b228:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b22a:	7602      	strb	r2, [r0, #24]
}
1000b22c:	4770      	bx	lr
1000b22e:	46c0      	nop			; (mov r8, r8)

1000b230 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b230:	2800      	cmp	r0, #0
1000b232:	d102      	bne.n	1000b23a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000b234:	4b02      	ldr	r3, [pc, #8]	; (1000b240 <dualtimer_get_value+0x10>)
1000b236:	6858      	ldr	r0, [r3, #4]
1000b238:	e001      	b.n	1000b23e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000b23a:	4b01      	ldr	r3, [pc, #4]	; (1000b240 <dualtimer_get_value+0x10>)
1000b23c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000b23e:	4770      	bx	lr
1000b240:	40001000 	.word	0x40001000

1000b244 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b244:	2800      	cmp	r0, #0
1000b246:	d107      	bne.n	1000b258 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b248:	2900      	cmp	r1, #0
1000b24a:	d102      	bne.n	1000b252 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b24c:	4b06      	ldr	r3, [pc, #24]	; (1000b268 <dualtimer_set_counter+0x24>)
1000b24e:	601a      	str	r2, [r3, #0]
1000b250:	e009      	b.n	1000b266 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b252:	4b05      	ldr	r3, [pc, #20]	; (1000b268 <dualtimer_set_counter+0x24>)
1000b254:	619a      	str	r2, [r3, #24]
1000b256:	e006      	b.n	1000b266 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b258:	2900      	cmp	r1, #0
1000b25a:	d102      	bne.n	1000b262 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b25c:	4b02      	ldr	r3, [pc, #8]	; (1000b268 <dualtimer_set_counter+0x24>)
1000b25e:	621a      	str	r2, [r3, #32]
1000b260:	e001      	b.n	1000b266 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b262:	4b01      	ldr	r3, [pc, #4]	; (1000b268 <dualtimer_set_counter+0x24>)
1000b264:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b266:	4770      	bx	lr
1000b268:	40001000 	.word	0x40001000

1000b26c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b26c:	2800      	cmp	r0, #0
1000b26e:	d105      	bne.n	1000b27c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b270:	4a06      	ldr	r2, [pc, #24]	; (1000b28c <dualtimer_enable+0x20>)
1000b272:	7a11      	ldrb	r1, [r2, #8]
1000b274:	2380      	movs	r3, #128	; 0x80
1000b276:	430b      	orrs	r3, r1
1000b278:	7213      	strb	r3, [r2, #8]
1000b27a:	e005      	b.n	1000b288 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b27c:	4903      	ldr	r1, [pc, #12]	; (1000b28c <dualtimer_enable+0x20>)
1000b27e:	2228      	movs	r2, #40	; 0x28
1000b280:	5c88      	ldrb	r0, [r1, r2]
1000b282:	2380      	movs	r3, #128	; 0x80
1000b284:	4303      	orrs	r3, r0
1000b286:	548b      	strb	r3, [r1, r2]
	}
}
1000b288:	4770      	bx	lr
1000b28a:	46c0      	nop			; (mov r8, r8)
1000b28c:	40001000 	.word	0x40001000

1000b290 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b290:	2800      	cmp	r0, #0
1000b292:	d105      	bne.n	1000b2a0 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b294:	4a06      	ldr	r2, [pc, #24]	; (1000b2b0 <dualtimer_disable+0x20>)
1000b296:	7a11      	ldrb	r1, [r2, #8]
1000b298:	237f      	movs	r3, #127	; 0x7f
1000b29a:	400b      	ands	r3, r1
1000b29c:	7213      	strb	r3, [r2, #8]
1000b29e:	e005      	b.n	1000b2ac <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b2a0:	4903      	ldr	r1, [pc, #12]	; (1000b2b0 <dualtimer_disable+0x20>)
1000b2a2:	2228      	movs	r2, #40	; 0x28
1000b2a4:	5c88      	ldrb	r0, [r1, r2]
1000b2a6:	237f      	movs	r3, #127	; 0x7f
1000b2a8:	4003      	ands	r3, r0
1000b2aa:	548b      	strb	r3, [r1, r2]
	}
}
1000b2ac:	4770      	bx	lr
1000b2ae:	46c0      	nop			; (mov r8, r8)
1000b2b0:	40001000 	.word	0x40001000

1000b2b4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b2b4:	b570      	push	{r4, r5, r6, lr}
1000b2b6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b2b8:	2004      	movs	r0, #4
1000b2ba:	4b39      	ldr	r3, [pc, #228]	; (1000b3a0 <dualtimer_init+0xec>)
1000b2bc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b2be:	7823      	ldrb	r3, [r4, #0]
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	d102      	bne.n	1000b2ca <dualtimer_init+0x16>
1000b2c4:	7b23      	ldrb	r3, [r4, #12]
1000b2c6:	2b00      	cmp	r3, #0
1000b2c8:	d065      	beq.n	1000b396 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b2ca:	4936      	ldr	r1, [pc, #216]	; (1000b3a4 <dualtimer_init+0xf0>)
1000b2cc:	68ca      	ldr	r2, [r1, #12]
1000b2ce:	2320      	movs	r3, #32
1000b2d0:	4313      	orrs	r3, r2
1000b2d2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b2d4:	7e22      	ldrb	r2, [r4, #24]
1000b2d6:	698b      	ldr	r3, [r1, #24]
1000b2d8:	2003      	movs	r0, #3
1000b2da:	4002      	ands	r2, r0
1000b2dc:	0112      	lsls	r2, r2, #4
1000b2de:	302d      	adds	r0, #45	; 0x2d
1000b2e0:	4383      	bics	r3, r0
1000b2e2:	4313      	orrs	r3, r2
1000b2e4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b2e6:	7823      	ldrb	r3, [r4, #0]
1000b2e8:	2b00      	cmp	r3, #0
1000b2ea:	d026      	beq.n	1000b33a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b2ec:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b2ee:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b2f0:	2b00      	cmp	r3, #0
1000b2f2:	d003      	beq.n	1000b2fc <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b2f4:	3b02      	subs	r3, #2
1000b2f6:	425d      	negs	r5, r3
1000b2f8:	415d      	adcs	r5, r3
1000b2fa:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b2fc:	78a2      	ldrb	r2, [r4, #2]
1000b2fe:	0052      	lsls	r2, r2, #1
1000b300:	2502      	movs	r5, #2
1000b302:	402a      	ands	r2, r5
1000b304:	78e3      	ldrb	r3, [r4, #3]
1000b306:	009b      	lsls	r3, r3, #2
1000b308:	350a      	adds	r5, #10
1000b30a:	402b      	ands	r3, r5
1000b30c:	431a      	orrs	r2, r3
1000b30e:	0015      	movs	r5, r2
1000b310:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b312:	7923      	ldrb	r3, [r4, #4]
1000b314:	2b00      	cmp	r3, #0
1000b316:	d001      	beq.n	1000b31c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b318:	2320      	movs	r3, #32
1000b31a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b31c:	4b22      	ldr	r3, [pc, #136]	; (1000b3a8 <dualtimer_init+0xf4>)
1000b31e:	68a2      	ldr	r2, [r4, #8]
1000b320:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b322:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b324:	491f      	ldr	r1, [pc, #124]	; (1000b3a4 <dualtimer_init+0xf0>)
1000b326:	22c4      	movs	r2, #196	; 0xc4
1000b328:	0052      	lsls	r2, r2, #1
1000b32a:	5c88      	ldrb	r0, [r1, r2]
1000b32c:	2301      	movs	r3, #1
1000b32e:	4303      	orrs	r3, r0
1000b330:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b332:	2000      	movs	r0, #0
1000b334:	4b1d      	ldr	r3, [pc, #116]	; (1000b3ac <dualtimer_init+0xf8>)
1000b336:	4798      	blx	r3
1000b338:	e000      	b.n	1000b33c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b33a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b33c:	7b23      	ldrb	r3, [r4, #12]
1000b33e:	2b00      	cmp	r3, #0
1000b340:	d029      	beq.n	1000b396 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b342:	7b63      	ldrb	r3, [r4, #13]
1000b344:	2b00      	cmp	r3, #0
1000b346:	d005      	beq.n	1000b354 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b348:	2b01      	cmp	r3, #1
1000b34a:	d005      	beq.n	1000b358 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b34c:	2b02      	cmp	r3, #2
1000b34e:	d104      	bne.n	1000b35a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b350:	2540      	movs	r5, #64	; 0x40
1000b352:	e002      	b.n	1000b35a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b354:	2501      	movs	r5, #1
1000b356:	e000      	b.n	1000b35a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b358:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b35a:	7ba3      	ldrb	r3, [r4, #14]
1000b35c:	005b      	lsls	r3, r3, #1
1000b35e:	2102      	movs	r1, #2
1000b360:	4019      	ands	r1, r3
1000b362:	7be2      	ldrb	r2, [r4, #15]
1000b364:	0092      	lsls	r2, r2, #2
1000b366:	230c      	movs	r3, #12
1000b368:	4013      	ands	r3, r2
1000b36a:	430b      	orrs	r3, r1
1000b36c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b36e:	7c23      	ldrb	r3, [r4, #16]
1000b370:	2b00      	cmp	r3, #0
1000b372:	d001      	beq.n	1000b378 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b374:	2320      	movs	r3, #32
1000b376:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b378:	6962      	ldr	r2, [r4, #20]
1000b37a:	4b0b      	ldr	r3, [pc, #44]	; (1000b3a8 <dualtimer_init+0xf4>)
1000b37c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b37e:	2228      	movs	r2, #40	; 0x28
1000b380:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b382:	4908      	ldr	r1, [pc, #32]	; (1000b3a4 <dualtimer_init+0xf0>)
1000b384:	3261      	adds	r2, #97	; 0x61
1000b386:	32ff      	adds	r2, #255	; 0xff
1000b388:	5c88      	ldrb	r0, [r1, r2]
1000b38a:	2302      	movs	r3, #2
1000b38c:	4303      	orrs	r3, r0
1000b38e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b390:	2001      	movs	r0, #1
1000b392:	4b06      	ldr	r3, [pc, #24]	; (1000b3ac <dualtimer_init+0xf8>)
1000b394:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b396:	4906      	ldr	r1, [pc, #24]	; (1000b3b0 <dualtimer_init+0xfc>)
1000b398:	201e      	movs	r0, #30
1000b39a:	4b06      	ldr	r3, [pc, #24]	; (1000b3b4 <dualtimer_init+0x100>)
1000b39c:	4798      	blx	r3
}
1000b39e:	bd70      	pop	{r4, r5, r6, pc}
1000b3a0:	1000c225 	.word	0x1000c225
1000b3a4:	4000b000 	.word	0x4000b000
1000b3a8:	40001000 	.word	0x40001000
1000b3ac:	1000b26d 	.word	0x1000b26d
1000b3b0:	1000b1c9 	.word	0x1000b1c9
1000b3b4:	1000c68d 	.word	0x1000c68d

1000b3b8 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b3b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b3ba:	4b16      	ldr	r3, [pc, #88]	; (1000b414 <gpio_port0_isr_handler+0x5c>)
1000b3bc:	681d      	ldr	r5, [r3, #0]
1000b3be:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b3c0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b3c2:	07cb      	lsls	r3, r1, #31
1000b3c4:	d407      	bmi.n	1000b3d6 <gpio_port0_isr_handler+0x1e>
1000b3c6:	2301      	movs	r3, #1
1000b3c8:	2401      	movs	r4, #1
1000b3ca:	0018      	movs	r0, r3
1000b3cc:	0022      	movs	r2, r4
1000b3ce:	409a      	lsls	r2, r3
1000b3d0:	4211      	tst	r1, r2
1000b3d2:	d014      	beq.n	1000b3fe <gpio_port0_isr_handler+0x46>
1000b3d4:	e001      	b.n	1000b3da <gpio_port0_isr_handler+0x22>
1000b3d6:	2201      	movs	r2, #1
1000b3d8:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b3da:	b292      	uxth	r2, r2
1000b3dc:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b3de:	2346      	movs	r3, #70	; 0x46
1000b3e0:	4a0c      	ldr	r2, [pc, #48]	; (1000b414 <gpio_port0_isr_handler+0x5c>)
1000b3e2:	5ad3      	ldrh	r3, [r2, r3]
1000b3e4:	4103      	asrs	r3, r0
1000b3e6:	07db      	lsls	r3, r3, #31
1000b3e8:	d50c      	bpl.n	1000b404 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b3ea:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b3ec:	5ad3      	ldrh	r3, [r2, r3]
1000b3ee:	4103      	asrs	r3, r0
1000b3f0:	07db      	lsls	r3, r3, #31
1000b3f2:	d507      	bpl.n	1000b404 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b3f4:	0080      	lsls	r0, r0, #2
1000b3f6:	1810      	adds	r0, r2, r0
1000b3f8:	6843      	ldr	r3, [r0, #4]
1000b3fa:	4798      	blx	r3
1000b3fc:	e002      	b.n	1000b404 <gpio_port0_isr_handler+0x4c>
1000b3fe:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b400:	2b10      	cmp	r3, #16
1000b402:	d1e2      	bne.n	1000b3ca <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b404:	2180      	movs	r1, #128	; 0x80
1000b406:	0409      	lsls	r1, r1, #16
1000b408:	23c0      	movs	r3, #192	; 0xc0
1000b40a:	005b      	lsls	r3, r3, #1
1000b40c:	4a02      	ldr	r2, [pc, #8]	; (1000b418 <gpio_port0_isr_handler+0x60>)
1000b40e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b410:	bd70      	pop	{r4, r5, r6, pc}
1000b412:	46c0      	nop			; (mov r8, r8)
1000b414:	1001b0a8 	.word	0x1001b0a8
1000b418:	e000e100 	.word	0xe000e100

1000b41c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b41e:	4b18      	ldr	r3, [pc, #96]	; (1000b480 <gpio_port1_isr_handler+0x64>)
1000b420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b422:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b424:	b2b6      	uxth	r6, r6
1000b426:	0037      	movs	r7, r6
1000b428:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b42a:	0b76      	lsrs	r6, r6, #13
1000b42c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b42e:	4d14      	ldr	r5, [pc, #80]	; (1000b480 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b430:	2e00      	cmp	r6, #0
1000b432:	d001      	beq.n	1000b438 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b434:	4b13      	ldr	r3, [pc, #76]	; (1000b484 <gpio_port1_isr_handler+0x68>)
1000b436:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b438:	0022      	movs	r2, r4
1000b43a:	2301      	movs	r3, #1
1000b43c:	40a3      	lsls	r3, r4
1000b43e:	421f      	tst	r7, r3
1000b440:	d013      	beq.n	1000b46a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b442:	b29b      	uxth	r3, r3
1000b444:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b446:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b448:	238e      	movs	r3, #142	; 0x8e
1000b44a:	5aeb      	ldrh	r3, [r5, r3]
1000b44c:	4123      	asrs	r3, r4
1000b44e:	07db      	lsls	r3, r3, #31
1000b450:	d50b      	bpl.n	1000b46a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b452:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b454:	490a      	ldr	r1, [pc, #40]	; (1000b480 <gpio_port1_isr_handler+0x64>)
1000b456:	5acb      	ldrh	r3, [r1, r3]
1000b458:	4123      	asrs	r3, r4
1000b45a:	07db      	lsls	r3, r3, #31
1000b45c:	d505      	bpl.n	1000b46a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b45e:	3212      	adds	r2, #18
1000b460:	0092      	lsls	r2, r2, #2
1000b462:	188a      	adds	r2, r1, r2
1000b464:	6853      	ldr	r3, [r2, #4]
1000b466:	4798      	blx	r3
				break;
1000b468:	e002      	b.n	1000b470 <gpio_port1_isr_handler+0x54>
1000b46a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b46c:	2c10      	cmp	r4, #16
1000b46e:	d1df      	bne.n	1000b430 <gpio_port1_isr_handler+0x14>
1000b470:	2180      	movs	r1, #128	; 0x80
1000b472:	0449      	lsls	r1, r1, #17
1000b474:	23c0      	movs	r3, #192	; 0xc0
1000b476:	005b      	lsls	r3, r3, #1
1000b478:	4a03      	ldr	r2, [pc, #12]	; (1000b488 <gpio_port1_isr_handler+0x6c>)
1000b47a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b47e:	46c0      	nop			; (mov r8, r8)
1000b480:	1001b0a8 	.word	0x1001b0a8
1000b484:	0001bc51 	.word	0x0001bc51
1000b488:	e000e100 	.word	0xe000e100

1000b48c <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b48c:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b48e:	2390      	movs	r3, #144	; 0x90
1000b490:	4a1b      	ldr	r2, [pc, #108]	; (1000b500 <gpio_port2_isr_handler+0x74>)
1000b492:	58d2      	ldr	r2, [r2, r3]
1000b494:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b496:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b498:	04d9      	lsls	r1, r3, #19
1000b49a:	d414      	bmi.n	1000b4c6 <gpio_port2_isr_handler+0x3a>
1000b49c:	0499      	lsls	r1, r3, #18
1000b49e:	d40a      	bmi.n	1000b4b6 <gpio_port2_isr_handler+0x2a>
1000b4a0:	0459      	lsls	r1, r3, #17
1000b4a2:	d40c      	bmi.n	1000b4be <gpio_port2_isr_handler+0x32>
1000b4a4:	0bdb      	lsrs	r3, r3, #15
1000b4a6:	03db      	lsls	r3, r3, #15
1000b4a8:	b29b      	uxth	r3, r3
1000b4aa:	2b00      	cmp	r3, #0
1000b4ac:	d020      	beq.n	1000b4f0 <gpio_port2_isr_handler+0x64>
1000b4ae:	2380      	movs	r3, #128	; 0x80
1000b4b0:	021b      	lsls	r3, r3, #8
1000b4b2:	210f      	movs	r1, #15
1000b4b4:	e00a      	b.n	1000b4cc <gpio_port2_isr_handler+0x40>
1000b4b6:	2380      	movs	r3, #128	; 0x80
1000b4b8:	019b      	lsls	r3, r3, #6
1000b4ba:	210d      	movs	r1, #13
1000b4bc:	e006      	b.n	1000b4cc <gpio_port2_isr_handler+0x40>
1000b4be:	2380      	movs	r3, #128	; 0x80
1000b4c0:	01db      	lsls	r3, r3, #7
1000b4c2:	210e      	movs	r1, #14
1000b4c4:	e002      	b.n	1000b4cc <gpio_port2_isr_handler+0x40>
1000b4c6:	2380      	movs	r3, #128	; 0x80
1000b4c8:	015b      	lsls	r3, r3, #5
1000b4ca:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b4cc:	b29b      	uxth	r3, r3
1000b4ce:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b4d0:	23d6      	movs	r3, #214	; 0xd6
1000b4d2:	4a0b      	ldr	r2, [pc, #44]	; (1000b500 <gpio_port2_isr_handler+0x74>)
1000b4d4:	5ad3      	ldrh	r3, [r2, r3]
1000b4d6:	410b      	asrs	r3, r1
1000b4d8:	07db      	lsls	r3, r3, #31
1000b4da:	d509      	bpl.n	1000b4f0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b4dc:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b4de:	5ad3      	ldrh	r3, [r2, r3]
1000b4e0:	410b      	asrs	r3, r1
1000b4e2:	07db      	lsls	r3, r3, #31
1000b4e4:	d504      	bpl.n	1000b4f0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b4e6:	3124      	adds	r1, #36	; 0x24
1000b4e8:	0089      	lsls	r1, r1, #2
1000b4ea:	1851      	adds	r1, r2, r1
1000b4ec:	684b      	ldr	r3, [r1, #4]
1000b4ee:	4798      	blx	r3
1000b4f0:	2180      	movs	r1, #128	; 0x80
1000b4f2:	0489      	lsls	r1, r1, #18
1000b4f4:	23c0      	movs	r3, #192	; 0xc0
1000b4f6:	005b      	lsls	r3, r3, #1
1000b4f8:	4a02      	ldr	r2, [pc, #8]	; (1000b504 <gpio_port2_isr_handler+0x78>)
1000b4fa:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b4fc:	bd10      	pop	{r4, pc}
1000b4fe:	46c0      	nop			; (mov r8, r8)
1000b500:	1001b0a8 	.word	0x1001b0a8
1000b504:	e000e100 	.word	0xe000e100

1000b508 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b508:	2300      	movs	r3, #0
1000b50a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b50c:	2201      	movs	r2, #1
1000b50e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b510:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b512:	70c3      	strb	r3, [r0, #3]
}
1000b514:	4770      	bx	lr
1000b516:	46c0      	nop			; (mov r8, r8)

1000b518 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b518:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b51a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b51c:	2801      	cmp	r0, #1
1000b51e:	d800      	bhi.n	1000b522 <gpio_pin_set_config+0xa>
1000b520:	e0c8      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b522:	2807      	cmp	r0, #7
1000b524:	d809      	bhi.n	1000b53a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b526:	4d64      	ldr	r5, [pc, #400]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b528:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b52a:	3b10      	subs	r3, #16
1000b52c:	4003      	ands	r3, r0
1000b52e:	009b      	lsls	r3, r3, #2
1000b530:	2407      	movs	r4, #7
1000b532:	409c      	lsls	r4, r3
1000b534:	43a2      	bics	r2, r4
1000b536:	646a      	str	r2, [r5, #68]	; 0x44
1000b538:	e029      	b.n	1000b58e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b53a:	280f      	cmp	r0, #15
1000b53c:	d809      	bhi.n	1000b552 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b53e:	4d5e      	ldr	r5, [pc, #376]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b540:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b542:	2307      	movs	r3, #7
1000b544:	4003      	ands	r3, r0
1000b546:	009b      	lsls	r3, r3, #2
1000b548:	2407      	movs	r4, #7
1000b54a:	409c      	lsls	r4, r3
1000b54c:	43a2      	bics	r2, r4
1000b54e:	64aa      	str	r2, [r5, #72]	; 0x48
1000b550:	e01d      	b.n	1000b58e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b552:	2817      	cmp	r0, #23
1000b554:	d809      	bhi.n	1000b56a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b556:	4d58      	ldr	r5, [pc, #352]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b558:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b55a:	2307      	movs	r3, #7
1000b55c:	4003      	ands	r3, r0
1000b55e:	009b      	lsls	r3, r3, #2
1000b560:	2407      	movs	r4, #7
1000b562:	409c      	lsls	r4, r3
1000b564:	43a2      	bics	r2, r4
1000b566:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b568:	e011      	b.n	1000b58e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b56a:	0003      	movs	r3, r0
1000b56c:	3b2c      	subs	r3, #44	; 0x2c
1000b56e:	2b03      	cmp	r3, #3
1000b570:	d80d      	bhi.n	1000b58e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b572:	4d52      	ldr	r5, [pc, #328]	; (1000b6bc <gpio_pin_set_config+0x1a4>)
1000b574:	2482      	movs	r4, #130	; 0x82
1000b576:	00e4      	lsls	r4, r4, #3
1000b578:	5d2a      	ldrb	r2, [r5, r4]
1000b57a:	0712      	lsls	r2, r2, #28
1000b57c:	2601      	movs	r6, #1
1000b57e:	409e      	lsls	r6, r3
1000b580:	0f12      	lsrs	r2, r2, #28
1000b582:	5d2b      	ldrb	r3, [r5, r4]
1000b584:	43b2      	bics	r2, r6
1000b586:	260f      	movs	r6, #15
1000b588:	43b3      	bics	r3, r6
1000b58a:	4313      	orrs	r3, r2
1000b58c:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b58e:	0003      	movs	r3, r0
1000b590:	3b1d      	subs	r3, #29
1000b592:	2b02      	cmp	r3, #2
1000b594:	d829      	bhi.n	1000b5ea <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b596:	784b      	ldrb	r3, [r1, #1]
1000b598:	2b01      	cmp	r3, #1
1000b59a:	d108      	bne.n	1000b5ae <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b59c:	4d47      	ldr	r5, [pc, #284]	; (1000b6bc <gpio_pin_set_config+0x1a4>)
1000b59e:	7d2b      	ldrb	r3, [r5, #20]
1000b5a0:	241f      	movs	r4, #31
1000b5a2:	1a24      	subs	r4, r4, r0
1000b5a4:	2201      	movs	r2, #1
1000b5a6:	40a2      	lsls	r2, r4
1000b5a8:	4393      	bics	r3, r2
1000b5aa:	752b      	strb	r3, [r5, #20]
1000b5ac:	e008      	b.n	1000b5c0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b5ae:	4c43      	ldr	r4, [pc, #268]	; (1000b6bc <gpio_pin_set_config+0x1a4>)
1000b5b0:	7d25      	ldrb	r5, [r4, #20]
1000b5b2:	221f      	movs	r2, #31
1000b5b4:	1a12      	subs	r2, r2, r0
1000b5b6:	2301      	movs	r3, #1
1000b5b8:	4093      	lsls	r3, r2
1000b5ba:	432b      	orrs	r3, r5
1000b5bc:	b2db      	uxtb	r3, r3
1000b5be:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b5c0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b5c2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b5c4:	2a00      	cmp	r2, #0
1000b5c6:	d075      	beq.n	1000b6b4 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b5c8:	493c      	ldr	r1, [pc, #240]	; (1000b6bc <gpio_pin_set_config+0x1a4>)
1000b5ca:	880c      	ldrh	r4, [r1, #0]
1000b5cc:	221f      	movs	r2, #31
1000b5ce:	1a10      	subs	r0, r2, r0
1000b5d0:	0080      	lsls	r0, r0, #2
1000b5d2:	3301      	adds	r3, #1
1000b5d4:	4083      	lsls	r3, r0
1000b5d6:	4323      	orrs	r3, r4
1000b5d8:	b29b      	uxth	r3, r3
1000b5da:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b5dc:	4a38      	ldr	r2, [pc, #224]	; (1000b6c0 <gpio_pin_set_config+0x1a8>)
1000b5de:	7811      	ldrb	r1, [r2, #0]
1000b5e0:	2302      	movs	r3, #2
1000b5e2:	430b      	orrs	r3, r1
1000b5e4:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b5e6:	2300      	movs	r3, #0
1000b5e8:	e064      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b5ea:	780a      	ldrb	r2, [r1, #0]
1000b5ec:	2a00      	cmp	r2, #0
1000b5ee:	d140      	bne.n	1000b672 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b5f0:	280f      	cmp	r0, #15
1000b5f2:	d808      	bhi.n	1000b606 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b5f4:	2301      	movs	r3, #1
1000b5f6:	4083      	lsls	r3, r0
1000b5f8:	b29b      	uxth	r3, r3
1000b5fa:	4a32      	ldr	r2, [pc, #200]	; (1000b6c4 <gpio_pin_set_config+0x1ac>)
1000b5fc:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b5fe:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b600:	281f      	cmp	r0, #31
1000b602:	d857      	bhi.n	1000b6b4 <gpio_pin_set_config+0x19c>
1000b604:	e012      	b.n	1000b62c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b606:	281f      	cmp	r0, #31
1000b608:	d807      	bhi.n	1000b61a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b60a:	220f      	movs	r2, #15
1000b60c:	4002      	ands	r2, r0
1000b60e:	2301      	movs	r3, #1
1000b610:	4093      	lsls	r3, r2
1000b612:	b29b      	uxth	r3, r3
1000b614:	4a2c      	ldr	r2, [pc, #176]	; (1000b6c8 <gpio_pin_set_config+0x1b0>)
1000b616:	8293      	strh	r3, [r2, #20]
1000b618:	e008      	b.n	1000b62c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b61a:	230f      	movs	r3, #15
1000b61c:	4018      	ands	r0, r3
1000b61e:	3b0e      	subs	r3, #14
1000b620:	4083      	lsls	r3, r0
1000b622:	b29b      	uxth	r3, r3
1000b624:	4a29      	ldr	r2, [pc, #164]	; (1000b6cc <gpio_pin_set_config+0x1b4>)
1000b626:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b628:	2300      	movs	r3, #0
1000b62a:	e043      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b62c:	784b      	ldrb	r3, [r1, #1]
1000b62e:	2b01      	cmp	r3, #1
1000b630:	d00c      	beq.n	1000b64c <gpio_pin_set_config+0x134>
1000b632:	2b00      	cmp	r3, #0
1000b634:	d002      	beq.n	1000b63c <gpio_pin_set_config+0x124>
1000b636:	2b02      	cmp	r3, #2
1000b638:	d010      	beq.n	1000b65c <gpio_pin_set_config+0x144>
1000b63a:	e03a      	b.n	1000b6b2 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b63c:	491e      	ldr	r1, [pc, #120]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b63e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b640:	2301      	movs	r3, #1
1000b642:	4083      	lsls	r3, r0
1000b644:	4313      	orrs	r3, r2
1000b646:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b648:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b64a:	e033      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b64c:	491a      	ldr	r1, [pc, #104]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b64e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b650:	2201      	movs	r2, #1
1000b652:	4082      	lsls	r2, r0
1000b654:	4393      	bics	r3, r2
1000b656:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b658:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b65a:	e02b      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b65c:	4b16      	ldr	r3, [pc, #88]	; (1000b6b8 <gpio_pin_set_config+0x1a0>)
1000b65e:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b660:	2201      	movs	r2, #1
1000b662:	4082      	lsls	r2, r0
1000b664:	4311      	orrs	r1, r2
1000b666:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b668:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b66a:	4391      	bics	r1, r2
1000b66c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b66e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b670:	e020      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b672:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b674:	2a01      	cmp	r2, #1
1000b676:	d11d      	bne.n	1000b6b4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b678:	280f      	cmp	r0, #15
1000b67a:	d806      	bhi.n	1000b68a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b67c:	3301      	adds	r3, #1
1000b67e:	4083      	lsls	r3, r0
1000b680:	b29b      	uxth	r3, r3
1000b682:	4a10      	ldr	r2, [pc, #64]	; (1000b6c4 <gpio_pin_set_config+0x1ac>)
1000b684:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b686:	2300      	movs	r3, #0
1000b688:	e014      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b68a:	281f      	cmp	r0, #31
1000b68c:	d808      	bhi.n	1000b6a0 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b68e:	230f      	movs	r3, #15
1000b690:	4018      	ands	r0, r3
1000b692:	3b0e      	subs	r3, #14
1000b694:	4083      	lsls	r3, r0
1000b696:	b29b      	uxth	r3, r3
1000b698:	4a0b      	ldr	r2, [pc, #44]	; (1000b6c8 <gpio_pin_set_config+0x1b0>)
1000b69a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b69c:	2300      	movs	r3, #0
1000b69e:	e009      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b6a0:	230f      	movs	r3, #15
1000b6a2:	4018      	ands	r0, r3
1000b6a4:	3b0e      	subs	r3, #14
1000b6a6:	4083      	lsls	r3, r0
1000b6a8:	b29b      	uxth	r3, r3
1000b6aa:	4a08      	ldr	r2, [pc, #32]	; (1000b6cc <gpio_pin_set_config+0x1b4>)
1000b6ac:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6ae:	2300      	movs	r3, #0
1000b6b0:	e000      	b.n	1000b6b4 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b6b2:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b6b4:	0018      	movs	r0, r3
1000b6b6:	bd70      	pop	{r4, r5, r6, pc}
1000b6b8:	4000b000 	.word	0x4000b000
1000b6bc:	4000f000 	.word	0x4000f000
1000b6c0:	4000e000 	.word	0x4000e000
1000b6c4:	40010000 	.word	0x40010000
1000b6c8:	40011000 	.word	0x40011000
1000b6cc:	40013000 	.word	0x40013000

1000b6d0 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b6d0:	280f      	cmp	r0, #15
1000b6d2:	d806      	bhi.n	1000b6e2 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000b6d4:	4b0f      	ldr	r3, [pc, #60]	; (1000b714 <gpio_pin_get_input_level+0x44>)
1000b6d6:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000b6d8:	2301      	movs	r3, #1
1000b6da:	4083      	lsls	r3, r0
1000b6dc:	0018      	movs	r0, r3
1000b6de:	4008      	ands	r0, r1
1000b6e0:	e014      	b.n	1000b70c <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000b6e2:	281f      	cmp	r0, #31
1000b6e4:	d809      	bhi.n	1000b6fa <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000b6e6:	4b0c      	ldr	r3, [pc, #48]	; (1000b718 <gpio_pin_get_input_level+0x48>)
1000b6e8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b6ea:	230f      	movs	r3, #15
1000b6ec:	4003      	ands	r3, r0
1000b6ee:	001a      	movs	r2, r3
1000b6f0:	2301      	movs	r3, #1
1000b6f2:	4093      	lsls	r3, r2
1000b6f4:	0018      	movs	r0, r3
1000b6f6:	4008      	ands	r0, r1
1000b6f8:	e008      	b.n	1000b70c <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000b6fa:	4b08      	ldr	r3, [pc, #32]	; (1000b71c <gpio_pin_get_input_level+0x4c>)
1000b6fc:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b6fe:	230f      	movs	r3, #15
1000b700:	4003      	ands	r3, r0
1000b702:	001a      	movs	r2, r3
1000b704:	2301      	movs	r3, #1
1000b706:	4093      	lsls	r3, r2
1000b708:	0018      	movs	r0, r3
1000b70a:	4008      	ands	r0, r1
	}

	return regval;
1000b70c:	1e43      	subs	r3, r0, #1
1000b70e:	4198      	sbcs	r0, r3
1000b710:	b2c0      	uxtb	r0, r0
}
1000b712:	4770      	bx	lr
1000b714:	40010000 	.word	0x40010000
1000b718:	40011000 	.word	0x40011000
1000b71c:	40013000 	.word	0x40013000

1000b720 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b720:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b722:	280f      	cmp	r0, #15
1000b724:	d810      	bhi.n	1000b748 <gpio_pin_set_output_level+0x28>
		if(level) {
1000b726:	2900      	cmp	r1, #0
1000b728:	d007      	beq.n	1000b73a <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b72a:	4a1d      	ldr	r2, [pc, #116]	; (1000b7a0 <gpio_pin_set_output_level+0x80>)
1000b72c:	8891      	ldrh	r1, [r2, #4]
1000b72e:	2301      	movs	r3, #1
1000b730:	4083      	lsls	r3, r0
1000b732:	430b      	orrs	r3, r1
1000b734:	b29b      	uxth	r3, r3
1000b736:	8093      	strh	r3, [r2, #4]
1000b738:	e031      	b.n	1000b79e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b73a:	4919      	ldr	r1, [pc, #100]	; (1000b7a0 <gpio_pin_set_output_level+0x80>)
1000b73c:	888b      	ldrh	r3, [r1, #4]
1000b73e:	2201      	movs	r2, #1
1000b740:	4082      	lsls	r2, r0
1000b742:	4393      	bics	r3, r2
1000b744:	808b      	strh	r3, [r1, #4]
1000b746:	e02a      	b.n	1000b79e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b748:	281f      	cmp	r0, #31
1000b74a:	d814      	bhi.n	1000b776 <gpio_pin_set_output_level+0x56>
		if(level) {
1000b74c:	2900      	cmp	r1, #0
1000b74e:	d009      	beq.n	1000b764 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b750:	4914      	ldr	r1, [pc, #80]	; (1000b7a4 <gpio_pin_set_output_level+0x84>)
1000b752:	888c      	ldrh	r4, [r1, #4]
1000b754:	220f      	movs	r2, #15
1000b756:	4010      	ands	r0, r2
1000b758:	2301      	movs	r3, #1
1000b75a:	4083      	lsls	r3, r0
1000b75c:	4323      	orrs	r3, r4
1000b75e:	b29b      	uxth	r3, r3
1000b760:	808b      	strh	r3, [r1, #4]
1000b762:	e01c      	b.n	1000b79e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b764:	490f      	ldr	r1, [pc, #60]	; (1000b7a4 <gpio_pin_set_output_level+0x84>)
1000b766:	888b      	ldrh	r3, [r1, #4]
1000b768:	220f      	movs	r2, #15
1000b76a:	4010      	ands	r0, r2
1000b76c:	3a0e      	subs	r2, #14
1000b76e:	4082      	lsls	r2, r0
1000b770:	4393      	bics	r3, r2
1000b772:	808b      	strh	r3, [r1, #4]
1000b774:	e013      	b.n	1000b79e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b776:	2900      	cmp	r1, #0
1000b778:	d009      	beq.n	1000b78e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b77a:	490b      	ldr	r1, [pc, #44]	; (1000b7a8 <gpio_pin_set_output_level+0x88>)
1000b77c:	888c      	ldrh	r4, [r1, #4]
1000b77e:	220f      	movs	r2, #15
1000b780:	4010      	ands	r0, r2
1000b782:	2301      	movs	r3, #1
1000b784:	4083      	lsls	r3, r0
1000b786:	4323      	orrs	r3, r4
1000b788:	b29b      	uxth	r3, r3
1000b78a:	808b      	strh	r3, [r1, #4]
1000b78c:	e007      	b.n	1000b79e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b78e:	4906      	ldr	r1, [pc, #24]	; (1000b7a8 <gpio_pin_set_output_level+0x88>)
1000b790:	888b      	ldrh	r3, [r1, #4]
1000b792:	220f      	movs	r2, #15
1000b794:	4010      	ands	r0, r2
1000b796:	3a0e      	subs	r2, #14
1000b798:	4082      	lsls	r2, r0
1000b79a:	4393      	bics	r3, r2
1000b79c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b79e:	bd10      	pop	{r4, pc}
1000b7a0:	40010000 	.word	0x40010000
1000b7a4:	40011000 	.word	0x40011000
1000b7a8:	40013000 	.word	0x40013000

1000b7ac <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b7ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b7ae:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b7b0:	23ff      	movs	r3, #255	; 0xff
1000b7b2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b7b4:	2807      	cmp	r0, #7
1000b7b6:	d833      	bhi.n	1000b820 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b7b8:	4a4e      	ldr	r2, [pc, #312]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b7ba:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b7bc:	3bf8      	subs	r3, #248	; 0xf8
1000b7be:	4003      	ands	r3, r0
1000b7c0:	009b      	lsls	r3, r3, #2
1000b7c2:	2607      	movs	r6, #7
1000b7c4:	409e      	lsls	r6, r3
1000b7c6:	43b4      	bics	r4, r6
1000b7c8:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b7ca:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b7cc:	000e      	movs	r6, r1
1000b7ce:	409e      	lsls	r6, r3
1000b7d0:	0033      	movs	r3, r6
1000b7d2:	4323      	orrs	r3, r4
1000b7d4:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b7d6:	2901      	cmp	r1, #1
1000b7d8:	d000      	beq.n	1000b7dc <gpio_pinmux_cofiguration+0x30>
1000b7da:	e08a      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b7dc:	2803      	cmp	r0, #3
1000b7de:	d80f      	bhi.n	1000b800 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b7e0:	0011      	movs	r1, r2
1000b7e2:	22d0      	movs	r2, #208	; 0xd0
1000b7e4:	0052      	lsls	r2, r2, #1
1000b7e6:	588c      	ldr	r4, [r1, r2]
1000b7e8:	2303      	movs	r3, #3
1000b7ea:	4018      	ands	r0, r3
1000b7ec:	00c0      	lsls	r0, r0, #3
1000b7ee:	333c      	adds	r3, #60	; 0x3c
1000b7f0:	4083      	lsls	r3, r0
1000b7f2:	439c      	bics	r4, r3
1000b7f4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b7f6:	588b      	ldr	r3, [r1, r2]
1000b7f8:	4085      	lsls	r5, r0
1000b7fa:	431d      	orrs	r5, r3
1000b7fc:	508d      	str	r5, [r1, r2]
1000b7fe:	e078      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b800:	493c      	ldr	r1, [pc, #240]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b802:	22d2      	movs	r2, #210	; 0xd2
1000b804:	0052      	lsls	r2, r2, #1
1000b806:	588c      	ldr	r4, [r1, r2]
1000b808:	2303      	movs	r3, #3
1000b80a:	4018      	ands	r0, r3
1000b80c:	00c0      	lsls	r0, r0, #3
1000b80e:	333c      	adds	r3, #60	; 0x3c
1000b810:	4083      	lsls	r3, r0
1000b812:	439c      	bics	r4, r3
1000b814:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b816:	588b      	ldr	r3, [r1, r2]
1000b818:	4085      	lsls	r5, r0
1000b81a:	431d      	orrs	r5, r3
1000b81c:	508d      	str	r5, [r1, r2]
1000b81e:	e068      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b820:	280f      	cmp	r0, #15
1000b822:	d832      	bhi.n	1000b88a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b824:	4a33      	ldr	r2, [pc, #204]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b826:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b828:	2307      	movs	r3, #7
1000b82a:	4003      	ands	r3, r0
1000b82c:	009b      	lsls	r3, r3, #2
1000b82e:	2607      	movs	r6, #7
1000b830:	409e      	lsls	r6, r3
1000b832:	43b4      	bics	r4, r6
1000b834:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b836:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b838:	000e      	movs	r6, r1
1000b83a:	409e      	lsls	r6, r3
1000b83c:	0033      	movs	r3, r6
1000b83e:	4323      	orrs	r3, r4
1000b840:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b842:	2901      	cmp	r1, #1
1000b844:	d155      	bne.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b846:	280b      	cmp	r0, #11
1000b848:	d80f      	bhi.n	1000b86a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b84a:	0011      	movs	r1, r2
1000b84c:	22d4      	movs	r2, #212	; 0xd4
1000b84e:	0052      	lsls	r2, r2, #1
1000b850:	588c      	ldr	r4, [r1, r2]
1000b852:	2303      	movs	r3, #3
1000b854:	4018      	ands	r0, r3
1000b856:	00c0      	lsls	r0, r0, #3
1000b858:	333c      	adds	r3, #60	; 0x3c
1000b85a:	4083      	lsls	r3, r0
1000b85c:	439c      	bics	r4, r3
1000b85e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b860:	588b      	ldr	r3, [r1, r2]
1000b862:	4085      	lsls	r5, r0
1000b864:	431d      	orrs	r5, r3
1000b866:	508d      	str	r5, [r1, r2]
1000b868:	e043      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b86a:	4922      	ldr	r1, [pc, #136]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b86c:	22d6      	movs	r2, #214	; 0xd6
1000b86e:	0052      	lsls	r2, r2, #1
1000b870:	588c      	ldr	r4, [r1, r2]
1000b872:	2303      	movs	r3, #3
1000b874:	4018      	ands	r0, r3
1000b876:	00c0      	lsls	r0, r0, #3
1000b878:	333c      	adds	r3, #60	; 0x3c
1000b87a:	4083      	lsls	r3, r0
1000b87c:	439c      	bics	r4, r3
1000b87e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b880:	588b      	ldr	r3, [r1, r2]
1000b882:	4085      	lsls	r5, r0
1000b884:	431d      	orrs	r5, r3
1000b886:	508d      	str	r5, [r1, r2]
1000b888:	e033      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b88a:	2817      	cmp	r0, #23
1000b88c:	d831      	bhi.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b88e:	4a19      	ldr	r2, [pc, #100]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b890:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b892:	2307      	movs	r3, #7
1000b894:	4003      	ands	r3, r0
1000b896:	009b      	lsls	r3, r3, #2
1000b898:	2607      	movs	r6, #7
1000b89a:	409e      	lsls	r6, r3
1000b89c:	43b4      	bics	r4, r6
1000b89e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b8a0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b8a2:	000e      	movs	r6, r1
1000b8a4:	409e      	lsls	r6, r3
1000b8a6:	0033      	movs	r3, r6
1000b8a8:	4323      	orrs	r3, r4
1000b8aa:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b8ac:	2901      	cmp	r1, #1
1000b8ae:	d120      	bne.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b8b0:	2813      	cmp	r0, #19
1000b8b2:	d80f      	bhi.n	1000b8d4 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b8b4:	0011      	movs	r1, r2
1000b8b6:	22d8      	movs	r2, #216	; 0xd8
1000b8b8:	0052      	lsls	r2, r2, #1
1000b8ba:	588c      	ldr	r4, [r1, r2]
1000b8bc:	2303      	movs	r3, #3
1000b8be:	4018      	ands	r0, r3
1000b8c0:	00c0      	lsls	r0, r0, #3
1000b8c2:	333c      	adds	r3, #60	; 0x3c
1000b8c4:	4083      	lsls	r3, r0
1000b8c6:	439c      	bics	r4, r3
1000b8c8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b8ca:	588b      	ldr	r3, [r1, r2]
1000b8cc:	4085      	lsls	r5, r0
1000b8ce:	431d      	orrs	r5, r3
1000b8d0:	508d      	str	r5, [r1, r2]
1000b8d2:	e00e      	b.n	1000b8f2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b8d4:	4a07      	ldr	r2, [pc, #28]	; (1000b8f4 <gpio_pinmux_cofiguration+0x148>)
1000b8d6:	23da      	movs	r3, #218	; 0xda
1000b8d8:	005b      	lsls	r3, r3, #1
1000b8da:	58d1      	ldr	r1, [r2, r3]
1000b8dc:	2403      	movs	r4, #3
1000b8de:	4020      	ands	r0, r4
1000b8e0:	00c0      	lsls	r0, r0, #3
1000b8e2:	343c      	adds	r4, #60	; 0x3c
1000b8e4:	4084      	lsls	r4, r0
1000b8e6:	43a1      	bics	r1, r4
1000b8e8:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b8ea:	58d1      	ldr	r1, [r2, r3]
1000b8ec:	4085      	lsls	r5, r0
1000b8ee:	430d      	orrs	r5, r1
1000b8f0:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b8f2:	bd70      	pop	{r4, r5, r6, pc}
1000b8f4:	4000b000 	.word	0x4000b000

1000b8f8 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b8fa:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b8fc:	280f      	cmp	r0, #15
1000b8fe:	d904      	bls.n	1000b90a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b900:	241f      	movs	r4, #31
1000b902:	4284      	cmp	r4, r0
1000b904:	415b      	adcs	r3, r3
1000b906:	3c1d      	subs	r4, #29
1000b908:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b90a:	2a01      	cmp	r2, #1
1000b90c:	d016      	beq.n	1000b93c <gpio_register_callback+0x44>
1000b90e:	2a00      	cmp	r2, #0
1000b910:	d004      	beq.n	1000b91c <gpio_register_callback+0x24>
1000b912:	2a02      	cmp	r2, #2
1000b914:	d022      	beq.n	1000b95c <gpio_register_callback+0x64>
1000b916:	2a03      	cmp	r2, #3
1000b918:	d030      	beq.n	1000b97c <gpio_register_callback+0x84>
1000b91a:	e03e      	b.n	1000b99a <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b91c:	4e29      	ldr	r6, [pc, #164]	; (1000b9c4 <gpio_register_callback+0xcc>)
1000b91e:	00dc      	lsls	r4, r3, #3
1000b920:	18e2      	adds	r2, r4, r3
1000b922:	00d2      	lsls	r2, r2, #3
1000b924:	5997      	ldr	r7, [r2, r6]
1000b926:	250f      	movs	r5, #15
1000b928:	4005      	ands	r5, r0
1000b92a:	2201      	movs	r2, #1
1000b92c:	40aa      	lsls	r2, r5
1000b92e:	b292      	uxth	r2, r2
1000b930:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b932:	18e4      	adds	r4, r4, r3
1000b934:	00e4      	lsls	r4, r4, #3
1000b936:	59a4      	ldr	r4, [r4, r6]
1000b938:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b93a:	e02e      	b.n	1000b99a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b93c:	4e21      	ldr	r6, [pc, #132]	; (1000b9c4 <gpio_register_callback+0xcc>)
1000b93e:	00dc      	lsls	r4, r3, #3
1000b940:	18e2      	adds	r2, r4, r3
1000b942:	00d2      	lsls	r2, r2, #3
1000b944:	5997      	ldr	r7, [r2, r6]
1000b946:	250f      	movs	r5, #15
1000b948:	4005      	ands	r5, r0
1000b94a:	2201      	movs	r2, #1
1000b94c:	40aa      	lsls	r2, r5
1000b94e:	b292      	uxth	r2, r2
1000b950:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b952:	18e4      	adds	r4, r4, r3
1000b954:	00e4      	lsls	r4, r4, #3
1000b956:	59a4      	ldr	r4, [r4, r6]
1000b958:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b95a:	e01e      	b.n	1000b99a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b95c:	4e19      	ldr	r6, [pc, #100]	; (1000b9c4 <gpio_register_callback+0xcc>)
1000b95e:	00dc      	lsls	r4, r3, #3
1000b960:	18e2      	adds	r2, r4, r3
1000b962:	00d2      	lsls	r2, r2, #3
1000b964:	5997      	ldr	r7, [r2, r6]
1000b966:	250f      	movs	r5, #15
1000b968:	4005      	ands	r5, r0
1000b96a:	2201      	movs	r2, #1
1000b96c:	40aa      	lsls	r2, r5
1000b96e:	b292      	uxth	r2, r2
1000b970:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b972:	18e4      	adds	r4, r4, r3
1000b974:	00e4      	lsls	r4, r4, #3
1000b976:	59a4      	ldr	r4, [r4, r6]
1000b978:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b97a:	e00e      	b.n	1000b99a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b97c:	4e11      	ldr	r6, [pc, #68]	; (1000b9c4 <gpio_register_callback+0xcc>)
1000b97e:	00dc      	lsls	r4, r3, #3
1000b980:	18e2      	adds	r2, r4, r3
1000b982:	00d2      	lsls	r2, r2, #3
1000b984:	5997      	ldr	r7, [r2, r6]
1000b986:	250f      	movs	r5, #15
1000b988:	4005      	ands	r5, r0
1000b98a:	2201      	movs	r2, #1
1000b98c:	40aa      	lsls	r2, r5
1000b98e:	b292      	uxth	r2, r2
1000b990:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b992:	18e4      	adds	r4, r4, r3
1000b994:	00e4      	lsls	r4, r4, #3
1000b996:	59a4      	ldr	r4, [r4, r6]
1000b998:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b99a:	220f      	movs	r2, #15
1000b99c:	4010      	ands	r0, r2
1000b99e:	4c09      	ldr	r4, [pc, #36]	; (1000b9c4 <gpio_register_callback+0xcc>)
1000b9a0:	00dd      	lsls	r5, r3, #3
1000b9a2:	18ea      	adds	r2, r5, r3
1000b9a4:	0052      	lsls	r2, r2, #1
1000b9a6:	1812      	adds	r2, r2, r0
1000b9a8:	0092      	lsls	r2, r2, #2
1000b9aa:	18a2      	adds	r2, r4, r2
1000b9ac:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b9ae:	18ea      	adds	r2, r5, r3
1000b9b0:	00d2      	lsls	r2, r2, #3
1000b9b2:	18a2      	adds	r2, r4, r2
1000b9b4:	3244      	adds	r2, #68	; 0x44
1000b9b6:	2101      	movs	r1, #1
1000b9b8:	4081      	lsls	r1, r0
1000b9ba:	8813      	ldrh	r3, [r2, #0]
1000b9bc:	430b      	orrs	r3, r1
1000b9be:	8013      	strh	r3, [r2, #0]
}
1000b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9c2:	46c0      	nop			; (mov r8, r8)
1000b9c4:	1001b0a8 	.word	0x1001b0a8

1000b9c8 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000b9c8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b9ca:	280f      	cmp	r0, #15
1000b9cc:	d805      	bhi.n	1000b9da <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b9ce:	2280      	movs	r2, #128	; 0x80
1000b9d0:	0412      	lsls	r2, r2, #16
1000b9d2:	4b12      	ldr	r3, [pc, #72]	; (1000ba1c <gpio_enable_callback+0x54>)
1000b9d4:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000b9d6:	2200      	movs	r2, #0
1000b9d8:	e00c      	b.n	1000b9f4 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000b9da:	281f      	cmp	r0, #31
1000b9dc:	d805      	bhi.n	1000b9ea <gpio_enable_callback+0x22>
1000b9de:	2280      	movs	r2, #128	; 0x80
1000b9e0:	0452      	lsls	r2, r2, #17
1000b9e2:	4b0e      	ldr	r3, [pc, #56]	; (1000ba1c <gpio_enable_callback+0x54>)
1000b9e4:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000b9e6:	2201      	movs	r2, #1
1000b9e8:	e004      	b.n	1000b9f4 <gpio_enable_callback+0x2c>
1000b9ea:	2280      	movs	r2, #128	; 0x80
1000b9ec:	0492      	lsls	r2, r2, #18
1000b9ee:	4b0b      	ldr	r3, [pc, #44]	; (1000ba1c <gpio_enable_callback+0x54>)
1000b9f0:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000b9f2:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000b9f4:	230f      	movs	r3, #15
1000b9f6:	4018      	ands	r0, r3
1000b9f8:	2101      	movs	r1, #1
1000b9fa:	4081      	lsls	r1, r0
1000b9fc:	4c08      	ldr	r4, [pc, #32]	; (1000ba20 <gpio_enable_callback+0x58>)
1000b9fe:	00d5      	lsls	r5, r2, #3
1000ba00:	18ab      	adds	r3, r5, r2
1000ba02:	00db      	lsls	r3, r3, #3
1000ba04:	18e3      	adds	r3, r4, r3
1000ba06:	3346      	adds	r3, #70	; 0x46
1000ba08:	8818      	ldrh	r0, [r3, #0]
1000ba0a:	4308      	orrs	r0, r1
1000ba0c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000ba0e:	18aa      	adds	r2, r5, r2
1000ba10:	00d2      	lsls	r2, r2, #3
1000ba12:	5913      	ldr	r3, [r2, r4]
1000ba14:	b289      	uxth	r1, r1
1000ba16:	8419      	strh	r1, [r3, #32]
}
1000ba18:	bd30      	pop	{r4, r5, pc}
1000ba1a:	46c0      	nop			; (mov r8, r8)
1000ba1c:	e000e100 	.word	0xe000e100
1000ba20:	1001b0a8 	.word	0x1001b0a8

1000ba24 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000ba24:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000ba26:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ba28:	280f      	cmp	r0, #15
1000ba2a:	d904      	bls.n	1000ba36 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000ba2c:	221f      	movs	r2, #31
1000ba2e:	4282      	cmp	r2, r0
1000ba30:	415b      	adcs	r3, r3
1000ba32:	3a1d      	subs	r2, #29
1000ba34:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000ba36:	220f      	movs	r2, #15
1000ba38:	4010      	ands	r0, r2
1000ba3a:	2101      	movs	r1, #1
1000ba3c:	4081      	lsls	r1, r0
1000ba3e:	4c07      	ldr	r4, [pc, #28]	; (1000ba5c <gpio_disable_callback+0x38>)
1000ba40:	00dd      	lsls	r5, r3, #3
1000ba42:	18ea      	adds	r2, r5, r3
1000ba44:	00d2      	lsls	r2, r2, #3
1000ba46:	18a2      	adds	r2, r4, r2
1000ba48:	3246      	adds	r2, #70	; 0x46
1000ba4a:	8810      	ldrh	r0, [r2, #0]
1000ba4c:	4388      	bics	r0, r1
1000ba4e:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000ba50:	18eb      	adds	r3, r5, r3
1000ba52:	00db      	lsls	r3, r3, #3
1000ba54:	591b      	ldr	r3, [r3, r4]
1000ba56:	b289      	uxth	r1, r1
1000ba58:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000ba5a:	bd30      	pop	{r4, r5, pc}
1000ba5c:	1001b0a8 	.word	0x1001b0a8

1000ba60 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000ba60:	b510      	push	{r4, lr}
1000ba62:	4a11      	ldr	r2, [pc, #68]	; (1000baa8 <gpio_init+0x48>)
1000ba64:	0010      	movs	r0, r2
1000ba66:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000ba68:	2100      	movs	r1, #0
1000ba6a:	e007      	b.n	1000ba7c <gpio_init+0x1c>
1000ba6c:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000ba6e:	4293      	cmp	r3, r2
1000ba70:	d1fc      	bne.n	1000ba6c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000ba72:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000ba74:	8011      	strh	r1, [r2, #0]
1000ba76:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000ba78:	4282      	cmp	r2, r0
1000ba7a:	d002      	beq.n	1000ba82 <gpio_init+0x22>
1000ba7c:	0013      	movs	r3, r2
1000ba7e:	3b40      	subs	r3, #64	; 0x40
1000ba80:	e7f4      	b.n	1000ba6c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000ba82:	4b0a      	ldr	r3, [pc, #40]	; (1000baac <gpio_init+0x4c>)
1000ba84:	4a0a      	ldr	r2, [pc, #40]	; (1000bab0 <gpio_init+0x50>)
1000ba86:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000ba88:	4a0a      	ldr	r2, [pc, #40]	; (1000bab4 <gpio_init+0x54>)
1000ba8a:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000ba8c:	490a      	ldr	r1, [pc, #40]	; (1000bab8 <gpio_init+0x58>)
1000ba8e:	2290      	movs	r2, #144	; 0x90
1000ba90:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000ba92:	490a      	ldr	r1, [pc, #40]	; (1000babc <gpio_init+0x5c>)
1000ba94:	2027      	movs	r0, #39	; 0x27
1000ba96:	4c0a      	ldr	r4, [pc, #40]	; (1000bac0 <gpio_init+0x60>)
1000ba98:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000ba9a:	490a      	ldr	r1, [pc, #40]	; (1000bac4 <gpio_init+0x64>)
1000ba9c:	2028      	movs	r0, #40	; 0x28
1000ba9e:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000baa0:	4909      	ldr	r1, [pc, #36]	; (1000bac8 <gpio_init+0x68>)
1000baa2:	2029      	movs	r0, #41	; 0x29
1000baa4:	47a0      	blx	r4
}
1000baa6:	bd10      	pop	{r4, pc}
1000baa8:	1001b0ec 	.word	0x1001b0ec
1000baac:	1001b0a8 	.word	0x1001b0a8
1000bab0:	40010000 	.word	0x40010000
1000bab4:	40011000 	.word	0x40011000
1000bab8:	40013000 	.word	0x40013000
1000babc:	1000b3b9 	.word	0x1000b3b9
1000bac0:	1000c68d 	.word	0x1000c68d
1000bac4:	1000b41d 	.word	0x1000b41d
1000bac8:	1000b48d 	.word	0x1000b48d

1000bacc <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000bacc:	2801      	cmp	r0, #1
1000bace:	d00d      	beq.n	1000baec <system_clock_config+0x20>
1000bad0:	2800      	cmp	r0, #0
1000bad2:	d002      	beq.n	1000bada <system_clock_config+0xe>
1000bad4:	2802      	cmp	r0, #2
1000bad6:	d01c      	beq.n	1000bb12 <system_clock_config+0x46>
1000bad8:	e02e      	b.n	1000bb38 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bada:	4a18      	ldr	r2, [pc, #96]	; (1000bb3c <system_clock_config+0x70>)
1000badc:	6990      	ldr	r0, [r2, #24]
1000bade:	230c      	movs	r3, #12
1000bae0:	4303      	orrs	r3, r0
1000bae2:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000bae4:	4a16      	ldr	r2, [pc, #88]	; (1000bb40 <system_clock_config+0x74>)
1000bae6:	4b17      	ldr	r3, [pc, #92]	; (1000bb44 <system_clock_config+0x78>)
1000bae8:	601a      	str	r2, [r3, #0]
			break;
1000baea:	e01a      	b.n	1000bb22 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000baec:	4b13      	ldr	r3, [pc, #76]	; (1000bb3c <system_clock_config+0x70>)
1000baee:	6998      	ldr	r0, [r3, #24]
1000baf0:	2208      	movs	r2, #8
1000baf2:	4302      	orrs	r2, r0
1000baf4:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000baf6:	699a      	ldr	r2, [r3, #24]
1000baf8:	2004      	movs	r0, #4
1000bafa:	4382      	bics	r2, r0
1000bafc:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000bafe:	4a12      	ldr	r2, [pc, #72]	; (1000bb48 <system_clock_config+0x7c>)
1000bb00:	6853      	ldr	r3, [r2, #4]
1000bb02:	2080      	movs	r0, #128	; 0x80
1000bb04:	0300      	lsls	r0, r0, #12
1000bb06:	4303      	orrs	r3, r0
1000bb08:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000bb0a:	4a10      	ldr	r2, [pc, #64]	; (1000bb4c <system_clock_config+0x80>)
1000bb0c:	4b0d      	ldr	r3, [pc, #52]	; (1000bb44 <system_clock_config+0x78>)
1000bb0e:	601a      	str	r2, [r3, #0]
			break;
1000bb10:	e007      	b.n	1000bb22 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bb12:	4a0a      	ldr	r2, [pc, #40]	; (1000bb3c <system_clock_config+0x70>)
1000bb14:	6993      	ldr	r3, [r2, #24]
1000bb16:	200c      	movs	r0, #12
1000bb18:	4383      	bics	r3, r0
1000bb1a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000bb1c:	4a08      	ldr	r2, [pc, #32]	; (1000bb40 <system_clock_config+0x74>)
1000bb1e:	4b09      	ldr	r3, [pc, #36]	; (1000bb44 <system_clock_config+0x78>)
1000bb20:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bb22:	4b06      	ldr	r3, [pc, #24]	; (1000bb3c <system_clock_config+0x70>)
1000bb24:	699a      	ldr	r2, [r3, #24]
1000bb26:	2003      	movs	r0, #3
1000bb28:	4382      	bics	r2, r0
1000bb2a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bb2c:	699a      	ldr	r2, [r3, #24]
1000bb2e:	4001      	ands	r1, r0
1000bb30:	4311      	orrs	r1, r2
1000bb32:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000bb34:	2000      	movs	r0, #0
1000bb36:	e000      	b.n	1000bb3a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000bb38:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000bb3a:	4770      	bx	lr
1000bb3c:	4000b000 	.word	0x4000b000
1000bb40:	018cba80 	.word	0x018cba80
1000bb44:	1001b180 	.word	0x1001b180
1000bb48:	4000f000 	.word	0x4000f000
1000bb4c:	001e8480 	.word	0x001e8480

1000bb50 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000bb50:	4b01      	ldr	r3, [pc, #4]	; (1000bb58 <system_clock_get_value+0x8>)
1000bb52:	6818      	ldr	r0, [r3, #0]
}
1000bb54:	4770      	bx	lr
1000bb56:	46c0      	nop			; (mov r8, r8)
1000bb58:	1001b180 	.word	0x1001b180

1000bb5c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000bb5c:	b500      	push	{lr}
	switch (peripheral) {
1000bb5e:	2835      	cmp	r0, #53	; 0x35
1000bb60:	d900      	bls.n	1000bb64 <system_clock_peripheral_enable+0x8>
1000bb62:	e1a2      	b.n	1000beaa <system_clock_peripheral_enable+0x34e>
1000bb64:	0080      	lsls	r0, r0, #2
1000bb66:	4bd2      	ldr	r3, [pc, #840]	; (1000beb0 <system_clock_peripheral_enable+0x354>)
1000bb68:	581b      	ldr	r3, [r3, r0]
1000bb6a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb6c:	4ad1      	ldr	r2, [pc, #836]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bb6e:	68d1      	ldr	r1, [r2, #12]
1000bb70:	2302      	movs	r3, #2
1000bb72:	430b      	orrs	r3, r1
1000bb74:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb76:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bb78:	e198      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb7a:	4ace      	ldr	r2, [pc, #824]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bb7c:	68d1      	ldr	r1, [r2, #12]
1000bb7e:	2304      	movs	r3, #4
1000bb80:	430b      	orrs	r3, r1
1000bb82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bb86:	e191      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb88:	4aca      	ldr	r2, [pc, #808]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bb8a:	68d1      	ldr	r1, [r2, #12]
1000bb8c:	2308      	movs	r3, #8
1000bb8e:	430b      	orrs	r3, r1
1000bb90:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bb94:	e18a      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb96:	4ac7      	ldr	r2, [pc, #796]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bb98:	68d1      	ldr	r1, [r2, #12]
1000bb9a:	2310      	movs	r3, #16
1000bb9c:	430b      	orrs	r3, r1
1000bb9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bba2:	e183      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bba4:	4ac3      	ldr	r2, [pc, #780]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bba6:	68d1      	ldr	r1, [r2, #12]
1000bba8:	2320      	movs	r3, #32
1000bbaa:	430b      	orrs	r3, r1
1000bbac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bbb0:	e17c      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbb2:	4ac0      	ldr	r2, [pc, #768]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bbb4:	68d1      	ldr	r1, [r2, #12]
1000bbb6:	2380      	movs	r3, #128	; 0x80
1000bbb8:	430b      	orrs	r3, r1
1000bbba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bbbe:	e175      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbc0:	4abc      	ldr	r2, [pc, #752]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bbc2:	68d3      	ldr	r3, [r2, #12]
1000bbc4:	2180      	movs	r1, #128	; 0x80
1000bbc6:	0049      	lsls	r1, r1, #1
1000bbc8:	430b      	orrs	r3, r1
1000bbca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bbce:	e16d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbd0:	4ab8      	ldr	r2, [pc, #736]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bbd2:	68d3      	ldr	r3, [r2, #12]
1000bbd4:	2180      	movs	r1, #128	; 0x80
1000bbd6:	0109      	lsls	r1, r1, #4
1000bbd8:	430b      	orrs	r3, r1
1000bbda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bbde:	e165      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbe0:	4ab4      	ldr	r2, [pc, #720]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bbe2:	68d3      	ldr	r3, [r2, #12]
1000bbe4:	2180      	movs	r1, #128	; 0x80
1000bbe6:	0149      	lsls	r1, r1, #5
1000bbe8:	430b      	orrs	r3, r1
1000bbea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bbee:	e15d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbf0:	4ab0      	ldr	r2, [pc, #704]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bbf2:	68d3      	ldr	r3, [r2, #12]
1000bbf4:	2180      	movs	r1, #128	; 0x80
1000bbf6:	0189      	lsls	r1, r1, #6
1000bbf8:	430b      	orrs	r3, r1
1000bbfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bbfe:	e155      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc00:	4aac      	ldr	r2, [pc, #688]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc02:	68d3      	ldr	r3, [r2, #12]
1000bc04:	2180      	movs	r1, #128	; 0x80
1000bc06:	01c9      	lsls	r1, r1, #7
1000bc08:	430b      	orrs	r3, r1
1000bc0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bc0e:	e14d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc10:	4aa8      	ldr	r2, [pc, #672]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc12:	68d3      	ldr	r3, [r2, #12]
1000bc14:	2180      	movs	r1, #128	; 0x80
1000bc16:	0209      	lsls	r1, r1, #8
1000bc18:	430b      	orrs	r3, r1
1000bc1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bc1e:	e145      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc20:	4aa4      	ldr	r2, [pc, #656]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc22:	68d3      	ldr	r3, [r2, #12]
1000bc24:	2180      	movs	r1, #128	; 0x80
1000bc26:	0249      	lsls	r1, r1, #9
1000bc28:	430b      	orrs	r3, r1
1000bc2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bc2e:	e13d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc30:	4aa0      	ldr	r2, [pc, #640]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc32:	68d3      	ldr	r3, [r2, #12]
1000bc34:	2180      	movs	r1, #128	; 0x80
1000bc36:	0289      	lsls	r1, r1, #10
1000bc38:	430b      	orrs	r3, r1
1000bc3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bc3e:	e135      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc40:	4a9c      	ldr	r2, [pc, #624]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc42:	68d3      	ldr	r3, [r2, #12]
1000bc44:	2180      	movs	r1, #128	; 0x80
1000bc46:	02c9      	lsls	r1, r1, #11
1000bc48:	430b      	orrs	r3, r1
1000bc4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bc4e:	e12d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc50:	4a98      	ldr	r2, [pc, #608]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc52:	68d3      	ldr	r3, [r2, #12]
1000bc54:	2180      	movs	r1, #128	; 0x80
1000bc56:	0309      	lsls	r1, r1, #12
1000bc58:	430b      	orrs	r3, r1
1000bc5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bc5e:	e125      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc60:	4a94      	ldr	r2, [pc, #592]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc62:	68d3      	ldr	r3, [r2, #12]
1000bc64:	2180      	movs	r1, #128	; 0x80
1000bc66:	0349      	lsls	r1, r1, #13
1000bc68:	430b      	orrs	r3, r1
1000bc6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bc6e:	e11d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc70:	4a90      	ldr	r2, [pc, #576]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc72:	68d3      	ldr	r3, [r2, #12]
1000bc74:	2180      	movs	r1, #128	; 0x80
1000bc76:	0389      	lsls	r1, r1, #14
1000bc78:	430b      	orrs	r3, r1
1000bc7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bc7e:	e115      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc80:	4a8c      	ldr	r2, [pc, #560]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc82:	68d3      	ldr	r3, [r2, #12]
1000bc84:	2180      	movs	r1, #128	; 0x80
1000bc86:	03c9      	lsls	r1, r1, #15
1000bc88:	430b      	orrs	r3, r1
1000bc8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bc8e:	e10d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc90:	4a88      	ldr	r2, [pc, #544]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bc92:	68d3      	ldr	r3, [r2, #12]
1000bc94:	2180      	movs	r1, #128	; 0x80
1000bc96:	0409      	lsls	r1, r1, #16
1000bc98:	430b      	orrs	r3, r1
1000bc9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bc9e:	e105      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bca0:	4a84      	ldr	r2, [pc, #528]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bca2:	68d3      	ldr	r3, [r2, #12]
1000bca4:	2180      	movs	r1, #128	; 0x80
1000bca6:	0449      	lsls	r1, r1, #17
1000bca8:	430b      	orrs	r3, r1
1000bcaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bcae:	e0fd      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcb0:	4a80      	ldr	r2, [pc, #512]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bcb2:	68d3      	ldr	r3, [r2, #12]
1000bcb4:	2180      	movs	r1, #128	; 0x80
1000bcb6:	0489      	lsls	r1, r1, #18
1000bcb8:	430b      	orrs	r3, r1
1000bcba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bcbe:	e0f5      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcc0:	4a7c      	ldr	r2, [pc, #496]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bcc2:	68d3      	ldr	r3, [r2, #12]
1000bcc4:	2180      	movs	r1, #128	; 0x80
1000bcc6:	04c9      	lsls	r1, r1, #19
1000bcc8:	430b      	orrs	r3, r1
1000bcca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bcce:	e0ed      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcd0:	4a78      	ldr	r2, [pc, #480]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bcd2:	68d3      	ldr	r3, [r2, #12]
1000bcd4:	2180      	movs	r1, #128	; 0x80
1000bcd6:	0509      	lsls	r1, r1, #20
1000bcd8:	430b      	orrs	r3, r1
1000bcda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bcde:	e0e5      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bce0:	4a74      	ldr	r2, [pc, #464]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bce2:	68d3      	ldr	r3, [r2, #12]
1000bce4:	2180      	movs	r1, #128	; 0x80
1000bce6:	0549      	lsls	r1, r1, #21
1000bce8:	430b      	orrs	r3, r1
1000bcea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bcee:	e0dd      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcf0:	4a70      	ldr	r2, [pc, #448]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bcf2:	68d3      	ldr	r3, [r2, #12]
1000bcf4:	2180      	movs	r1, #128	; 0x80
1000bcf6:	0589      	lsls	r1, r1, #22
1000bcf8:	430b      	orrs	r3, r1
1000bcfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bcfe:	e0d5      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd00:	4a6c      	ldr	r2, [pc, #432]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd02:	68d3      	ldr	r3, [r2, #12]
1000bd04:	2180      	movs	r1, #128	; 0x80
1000bd06:	05c9      	lsls	r1, r1, #23
1000bd08:	430b      	orrs	r3, r1
1000bd0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bd0e:	e0cd      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd10:	4a68      	ldr	r2, [pc, #416]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd12:	6911      	ldr	r1, [r2, #16]
1000bd14:	2301      	movs	r3, #1
1000bd16:	430b      	orrs	r3, r1
1000bd18:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd1a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bd1c:	e0c6      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd1e:	4a65      	ldr	r2, [pc, #404]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd20:	6911      	ldr	r1, [r2, #16]
1000bd22:	2302      	movs	r3, #2
1000bd24:	430b      	orrs	r3, r1
1000bd26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bd2a:	e0bf      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd2c:	4a61      	ldr	r2, [pc, #388]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd2e:	6911      	ldr	r1, [r2, #16]
1000bd30:	2304      	movs	r3, #4
1000bd32:	430b      	orrs	r3, r1
1000bd34:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd36:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bd38:	e0b8      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd3a:	4a5e      	ldr	r2, [pc, #376]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd3c:	6911      	ldr	r1, [r2, #16]
1000bd3e:	2308      	movs	r3, #8
1000bd40:	430b      	orrs	r3, r1
1000bd42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bd46:	e0b1      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd48:	4a5a      	ldr	r2, [pc, #360]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd4a:	6911      	ldr	r1, [r2, #16]
1000bd4c:	2310      	movs	r3, #16
1000bd4e:	430b      	orrs	r3, r1
1000bd50:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd52:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bd54:	e0aa      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd56:	4a57      	ldr	r2, [pc, #348]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd58:	6911      	ldr	r1, [r2, #16]
1000bd5a:	2320      	movs	r3, #32
1000bd5c:	430b      	orrs	r3, r1
1000bd5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bd62:	e0a3      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd64:	4a53      	ldr	r2, [pc, #332]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd66:	6911      	ldr	r1, [r2, #16]
1000bd68:	2340      	movs	r3, #64	; 0x40
1000bd6a:	430b      	orrs	r3, r1
1000bd6c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bd70:	e09c      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd72:	4a50      	ldr	r2, [pc, #320]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd74:	6911      	ldr	r1, [r2, #16]
1000bd76:	2380      	movs	r3, #128	; 0x80
1000bd78:	430b      	orrs	r3, r1
1000bd7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bd7e:	e095      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd80:	4a4c      	ldr	r2, [pc, #304]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd82:	6913      	ldr	r3, [r2, #16]
1000bd84:	2180      	movs	r1, #128	; 0x80
1000bd86:	0049      	lsls	r1, r1, #1
1000bd88:	430b      	orrs	r3, r1
1000bd8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bd8e:	e08d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd90:	4a48      	ldr	r2, [pc, #288]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bd92:	6913      	ldr	r3, [r2, #16]
1000bd94:	2180      	movs	r1, #128	; 0x80
1000bd96:	0089      	lsls	r1, r1, #2
1000bd98:	430b      	orrs	r3, r1
1000bd9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bd9e:	e085      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bda0:	4a44      	ldr	r2, [pc, #272]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bda2:	6913      	ldr	r3, [r2, #16]
1000bda4:	2180      	movs	r1, #128	; 0x80
1000bda6:	00c9      	lsls	r1, r1, #3
1000bda8:	430b      	orrs	r3, r1
1000bdaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bdae:	e07d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bdb0:	4a40      	ldr	r2, [pc, #256]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bdb2:	6913      	ldr	r3, [r2, #16]
1000bdb4:	2180      	movs	r1, #128	; 0x80
1000bdb6:	0109      	lsls	r1, r1, #4
1000bdb8:	430b      	orrs	r3, r1
1000bdba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bdbe:	e075      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bdc0:	4a3c      	ldr	r2, [pc, #240]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bdc2:	6913      	ldr	r3, [r2, #16]
1000bdc4:	2180      	movs	r1, #128	; 0x80
1000bdc6:	0149      	lsls	r1, r1, #5
1000bdc8:	430b      	orrs	r3, r1
1000bdca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bdce:	e06d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bdd0:	4a38      	ldr	r2, [pc, #224]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bdd2:	6913      	ldr	r3, [r2, #16]
1000bdd4:	2180      	movs	r1, #128	; 0x80
1000bdd6:	0189      	lsls	r1, r1, #6
1000bdd8:	430b      	orrs	r3, r1
1000bdda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bddc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bdde:	e065      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bde0:	4a34      	ldr	r2, [pc, #208]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bde2:	6913      	ldr	r3, [r2, #16]
1000bde4:	2180      	movs	r1, #128	; 0x80
1000bde6:	01c9      	lsls	r1, r1, #7
1000bde8:	430b      	orrs	r3, r1
1000bdea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bdee:	e05d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bdf0:	4a30      	ldr	r2, [pc, #192]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000bdf2:	6913      	ldr	r3, [r2, #16]
1000bdf4:	2180      	movs	r1, #128	; 0x80
1000bdf6:	0209      	lsls	r1, r1, #8
1000bdf8:	430b      	orrs	r3, r1
1000bdfa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bdfe:	e055      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be00:	4a2c      	ldr	r2, [pc, #176]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be02:	6913      	ldr	r3, [r2, #16]
1000be04:	2180      	movs	r1, #128	; 0x80
1000be06:	0249      	lsls	r1, r1, #9
1000be08:	430b      	orrs	r3, r1
1000be0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000be0e:	e04d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be10:	4a28      	ldr	r2, [pc, #160]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be12:	6913      	ldr	r3, [r2, #16]
1000be14:	2180      	movs	r1, #128	; 0x80
1000be16:	0289      	lsls	r1, r1, #10
1000be18:	430b      	orrs	r3, r1
1000be1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000be1e:	e045      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be20:	4a24      	ldr	r2, [pc, #144]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be22:	6913      	ldr	r3, [r2, #16]
1000be24:	2180      	movs	r1, #128	; 0x80
1000be26:	02c9      	lsls	r1, r1, #11
1000be28:	430b      	orrs	r3, r1
1000be2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000be2e:	e03d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be30:	4a20      	ldr	r2, [pc, #128]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be32:	6913      	ldr	r3, [r2, #16]
1000be34:	2180      	movs	r1, #128	; 0x80
1000be36:	0309      	lsls	r1, r1, #12
1000be38:	430b      	orrs	r3, r1
1000be3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000be3e:	e035      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be40:	4a1c      	ldr	r2, [pc, #112]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be42:	6913      	ldr	r3, [r2, #16]
1000be44:	2180      	movs	r1, #128	; 0x80
1000be46:	0349      	lsls	r1, r1, #13
1000be48:	430b      	orrs	r3, r1
1000be4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000be4e:	e02d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be50:	4a18      	ldr	r2, [pc, #96]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be52:	6913      	ldr	r3, [r2, #16]
1000be54:	2180      	movs	r1, #128	; 0x80
1000be56:	0389      	lsls	r1, r1, #14
1000be58:	430b      	orrs	r3, r1
1000be5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000be5e:	e025      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be60:	4a14      	ldr	r2, [pc, #80]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be62:	6913      	ldr	r3, [r2, #16]
1000be64:	2180      	movs	r1, #128	; 0x80
1000be66:	03c9      	lsls	r1, r1, #15
1000be68:	430b      	orrs	r3, r1
1000be6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000be6e:	e01d      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be70:	4a10      	ldr	r2, [pc, #64]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be72:	6913      	ldr	r3, [r2, #16]
1000be74:	2180      	movs	r1, #128	; 0x80
1000be76:	0409      	lsls	r1, r1, #16
1000be78:	430b      	orrs	r3, r1
1000be7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000be7e:	e015      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000be80:	4a0c      	ldr	r2, [pc, #48]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be82:	7d11      	ldrb	r1, [r2, #20]
1000be84:	2301      	movs	r3, #1
1000be86:	430b      	orrs	r3, r1
1000be88:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000be8c:	e00e      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000be8e:	4a09      	ldr	r2, [pc, #36]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be90:	7d11      	ldrb	r1, [r2, #20]
1000be92:	2302      	movs	r3, #2
1000be94:	430b      	orrs	r3, r1
1000be96:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000be9a:	e007      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000be9c:	4a05      	ldr	r2, [pc, #20]	; (1000beb4 <system_clock_peripheral_enable+0x358>)
1000be9e:	7d11      	ldrb	r1, [r2, #20]
1000bea0:	2304      	movs	r3, #4
1000bea2:	430b      	orrs	r3, r1
1000bea4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bea8:	e000      	b.n	1000beac <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000beaa:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000beac:	bd00      	pop	{pc}
1000beae:	46c0      	nop			; (mov r8, r8)
1000beb0:	100181c0 	.word	0x100181c0
1000beb4:	4000b000 	.word	0x4000b000

1000beb8 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000beb8:	b500      	push	{lr}
	switch (peripheral) {
1000beba:	2835      	cmp	r0, #53	; 0x35
1000bebc:	d900      	bls.n	1000bec0 <system_clock_peripheral_disable+0x8>
1000bebe:	e17d      	b.n	1000c1bc <system_clock_peripheral_disable+0x304>
1000bec0:	0080      	lsls	r0, r0, #2
1000bec2:	4bbf      	ldr	r3, [pc, #764]	; (1000c1c0 <system_clock_peripheral_disable+0x308>)
1000bec4:	581b      	ldr	r3, [r3, r0]
1000bec6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bec8:	4abe      	ldr	r2, [pc, #760]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000beca:	68d3      	ldr	r3, [r2, #12]
1000becc:	2102      	movs	r1, #2
1000bece:	438b      	bics	r3, r1
1000bed0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bed4:	e173      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bed6:	4abb      	ldr	r2, [pc, #748]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bed8:	68d3      	ldr	r3, [r2, #12]
1000beda:	2104      	movs	r1, #4
1000bedc:	438b      	bics	r3, r1
1000bede:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bee2:	e16c      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bee4:	4ab7      	ldr	r2, [pc, #732]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bee6:	68d3      	ldr	r3, [r2, #12]
1000bee8:	2108      	movs	r1, #8
1000beea:	438b      	bics	r3, r1
1000beec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bef0:	e165      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bef2:	4ab4      	ldr	r2, [pc, #720]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bef4:	68d3      	ldr	r3, [r2, #12]
1000bef6:	2110      	movs	r1, #16
1000bef8:	438b      	bics	r3, r1
1000befa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000befc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000befe:	e15e      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf00:	4ab0      	ldr	r2, [pc, #704]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf02:	68d3      	ldr	r3, [r2, #12]
1000bf04:	2120      	movs	r1, #32
1000bf06:	438b      	bics	r3, r1
1000bf08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bf0c:	e157      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf0e:	4aad      	ldr	r2, [pc, #692]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf10:	68d3      	ldr	r3, [r2, #12]
1000bf12:	2180      	movs	r1, #128	; 0x80
1000bf14:	438b      	bics	r3, r1
1000bf16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bf1a:	e150      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf1c:	4aa9      	ldr	r2, [pc, #676]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf1e:	68d1      	ldr	r1, [r2, #12]
1000bf20:	4ba9      	ldr	r3, [pc, #676]	; (1000c1c8 <system_clock_peripheral_disable+0x310>)
1000bf22:	400b      	ands	r3, r1
1000bf24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bf28:	e149      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf2a:	4aa6      	ldr	r2, [pc, #664]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf2c:	68d1      	ldr	r1, [r2, #12]
1000bf2e:	4ba7      	ldr	r3, [pc, #668]	; (1000c1cc <system_clock_peripheral_disable+0x314>)
1000bf30:	400b      	ands	r3, r1
1000bf32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bf36:	e142      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf38:	4aa2      	ldr	r2, [pc, #648]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf3a:	68d1      	ldr	r1, [r2, #12]
1000bf3c:	4ba4      	ldr	r3, [pc, #656]	; (1000c1d0 <system_clock_peripheral_disable+0x318>)
1000bf3e:	400b      	ands	r3, r1
1000bf40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bf44:	e13b      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf46:	4a9f      	ldr	r2, [pc, #636]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf48:	68d1      	ldr	r1, [r2, #12]
1000bf4a:	4ba2      	ldr	r3, [pc, #648]	; (1000c1d4 <system_clock_peripheral_disable+0x31c>)
1000bf4c:	400b      	ands	r3, r1
1000bf4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bf52:	e134      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf54:	4a9b      	ldr	r2, [pc, #620]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf56:	68d1      	ldr	r1, [r2, #12]
1000bf58:	4b9f      	ldr	r3, [pc, #636]	; (1000c1d8 <system_clock_peripheral_disable+0x320>)
1000bf5a:	400b      	ands	r3, r1
1000bf5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bf60:	e12d      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf62:	4a98      	ldr	r2, [pc, #608]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf64:	68d1      	ldr	r1, [r2, #12]
1000bf66:	4b9d      	ldr	r3, [pc, #628]	; (1000c1dc <system_clock_peripheral_disable+0x324>)
1000bf68:	400b      	ands	r3, r1
1000bf6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bf6e:	e126      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf70:	4a94      	ldr	r2, [pc, #592]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf72:	68d1      	ldr	r1, [r2, #12]
1000bf74:	4b9a      	ldr	r3, [pc, #616]	; (1000c1e0 <system_clock_peripheral_disable+0x328>)
1000bf76:	400b      	ands	r3, r1
1000bf78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bf7c:	e11f      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf7e:	4a91      	ldr	r2, [pc, #580]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf80:	68d1      	ldr	r1, [r2, #12]
1000bf82:	4b98      	ldr	r3, [pc, #608]	; (1000c1e4 <system_clock_peripheral_disable+0x32c>)
1000bf84:	400b      	ands	r3, r1
1000bf86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bf8a:	e118      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf8c:	4a8d      	ldr	r2, [pc, #564]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf8e:	68d1      	ldr	r1, [r2, #12]
1000bf90:	4b95      	ldr	r3, [pc, #596]	; (1000c1e8 <system_clock_peripheral_disable+0x330>)
1000bf92:	400b      	ands	r3, r1
1000bf94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bf98:	e111      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bf9a:	4a8a      	ldr	r2, [pc, #552]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bf9c:	68d1      	ldr	r1, [r2, #12]
1000bf9e:	4b93      	ldr	r3, [pc, #588]	; (1000c1ec <system_clock_peripheral_disable+0x334>)
1000bfa0:	400b      	ands	r3, r1
1000bfa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bfa6:	e10a      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfa8:	4a86      	ldr	r2, [pc, #536]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bfaa:	68d1      	ldr	r1, [r2, #12]
1000bfac:	4b90      	ldr	r3, [pc, #576]	; (1000c1f0 <system_clock_peripheral_disable+0x338>)
1000bfae:	400b      	ands	r3, r1
1000bfb0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bfb4:	e103      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfb6:	4a83      	ldr	r2, [pc, #524]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bfb8:	68d1      	ldr	r1, [r2, #12]
1000bfba:	4b8e      	ldr	r3, [pc, #568]	; (1000c1f4 <system_clock_peripheral_disable+0x33c>)
1000bfbc:	400b      	ands	r3, r1
1000bfbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bfc2:	e0fc      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfc4:	4a7f      	ldr	r2, [pc, #508]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bfc6:	68d1      	ldr	r1, [r2, #12]
1000bfc8:	4b8b      	ldr	r3, [pc, #556]	; (1000c1f8 <system_clock_peripheral_disable+0x340>)
1000bfca:	400b      	ands	r3, r1
1000bfcc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bfd0:	e0f5      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfd2:	4a7c      	ldr	r2, [pc, #496]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bfd4:	68d1      	ldr	r1, [r2, #12]
1000bfd6:	4b89      	ldr	r3, [pc, #548]	; (1000c1fc <system_clock_peripheral_disable+0x344>)
1000bfd8:	400b      	ands	r3, r1
1000bfda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bfde:	e0ee      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfe0:	4a78      	ldr	r2, [pc, #480]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bfe2:	68d1      	ldr	r1, [r2, #12]
1000bfe4:	4b86      	ldr	r3, [pc, #536]	; (1000c200 <system_clock_peripheral_disable+0x348>)
1000bfe6:	400b      	ands	r3, r1
1000bfe8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bfec:	e0e7      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bfee:	4a75      	ldr	r2, [pc, #468]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bff0:	68d1      	ldr	r1, [r2, #12]
1000bff2:	4b84      	ldr	r3, [pc, #528]	; (1000c204 <system_clock_peripheral_disable+0x34c>)
1000bff4:	400b      	ands	r3, r1
1000bff6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bffa:	e0e0      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bffc:	4a71      	ldr	r2, [pc, #452]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000bffe:	68d1      	ldr	r1, [r2, #12]
1000c000:	4b81      	ldr	r3, [pc, #516]	; (1000c208 <system_clock_peripheral_disable+0x350>)
1000c002:	400b      	ands	r3, r1
1000c004:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c006:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c008:	e0d9      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c00a:	4a6e      	ldr	r2, [pc, #440]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c00c:	68d1      	ldr	r1, [r2, #12]
1000c00e:	4b7f      	ldr	r3, [pc, #508]	; (1000c20c <system_clock_peripheral_disable+0x354>)
1000c010:	400b      	ands	r3, r1
1000c012:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c014:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c016:	e0d2      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c018:	4a6a      	ldr	r2, [pc, #424]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c01a:	68d1      	ldr	r1, [r2, #12]
1000c01c:	4b7c      	ldr	r3, [pc, #496]	; (1000c210 <system_clock_peripheral_disable+0x358>)
1000c01e:	400b      	ands	r3, r1
1000c020:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c022:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c024:	e0cb      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c026:	4a67      	ldr	r2, [pc, #412]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c028:	68d1      	ldr	r1, [r2, #12]
1000c02a:	4b7a      	ldr	r3, [pc, #488]	; (1000c214 <system_clock_peripheral_disable+0x35c>)
1000c02c:	400b      	ands	r3, r1
1000c02e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c030:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c032:	e0c4      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c034:	4a63      	ldr	r2, [pc, #396]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c036:	68d1      	ldr	r1, [r2, #12]
1000c038:	4b77      	ldr	r3, [pc, #476]	; (1000c218 <system_clock_peripheral_disable+0x360>)
1000c03a:	400b      	ands	r3, r1
1000c03c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c03e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c040:	e0bd      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c042:	4a60      	ldr	r2, [pc, #384]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c044:	6913      	ldr	r3, [r2, #16]
1000c046:	2101      	movs	r1, #1
1000c048:	438b      	bics	r3, r1
1000c04a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c04c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c04e:	e0b6      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c050:	4a5c      	ldr	r2, [pc, #368]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c052:	6913      	ldr	r3, [r2, #16]
1000c054:	2102      	movs	r1, #2
1000c056:	438b      	bics	r3, r1
1000c058:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c05a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c05c:	e0af      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c05e:	4a59      	ldr	r2, [pc, #356]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c060:	6913      	ldr	r3, [r2, #16]
1000c062:	2104      	movs	r1, #4
1000c064:	438b      	bics	r3, r1
1000c066:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c068:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c06a:	e0a8      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c06c:	4a55      	ldr	r2, [pc, #340]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c06e:	6913      	ldr	r3, [r2, #16]
1000c070:	2108      	movs	r1, #8
1000c072:	438b      	bics	r3, r1
1000c074:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c076:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c078:	e0a1      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c07a:	4a52      	ldr	r2, [pc, #328]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c07c:	6913      	ldr	r3, [r2, #16]
1000c07e:	2110      	movs	r1, #16
1000c080:	438b      	bics	r3, r1
1000c082:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c084:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c086:	e09a      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c088:	4a4e      	ldr	r2, [pc, #312]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c08a:	6913      	ldr	r3, [r2, #16]
1000c08c:	2120      	movs	r1, #32
1000c08e:	438b      	bics	r3, r1
1000c090:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c092:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c094:	e093      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c096:	4a4b      	ldr	r2, [pc, #300]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c098:	6913      	ldr	r3, [r2, #16]
1000c09a:	2140      	movs	r1, #64	; 0x40
1000c09c:	438b      	bics	r3, r1
1000c09e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c0a2:	e08c      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0a4:	4a47      	ldr	r2, [pc, #284]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0a6:	6913      	ldr	r3, [r2, #16]
1000c0a8:	2180      	movs	r1, #128	; 0x80
1000c0aa:	438b      	bics	r3, r1
1000c0ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c0b0:	e085      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0b2:	4a44      	ldr	r2, [pc, #272]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0b4:	6911      	ldr	r1, [r2, #16]
1000c0b6:	4b44      	ldr	r3, [pc, #272]	; (1000c1c8 <system_clock_peripheral_disable+0x310>)
1000c0b8:	400b      	ands	r3, r1
1000c0ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c0be:	e07e      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0c0:	4a40      	ldr	r2, [pc, #256]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0c2:	6911      	ldr	r1, [r2, #16]
1000c0c4:	4b55      	ldr	r3, [pc, #340]	; (1000c21c <system_clock_peripheral_disable+0x364>)
1000c0c6:	400b      	ands	r3, r1
1000c0c8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c0cc:	e077      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0ce:	4a3d      	ldr	r2, [pc, #244]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0d0:	6911      	ldr	r1, [r2, #16]
1000c0d2:	4b53      	ldr	r3, [pc, #332]	; (1000c220 <system_clock_peripheral_disable+0x368>)
1000c0d4:	400b      	ands	r3, r1
1000c0d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c0da:	e070      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0dc:	4a39      	ldr	r2, [pc, #228]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0de:	6911      	ldr	r1, [r2, #16]
1000c0e0:	4b3a      	ldr	r3, [pc, #232]	; (1000c1cc <system_clock_peripheral_disable+0x314>)
1000c0e2:	400b      	ands	r3, r1
1000c0e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c0e8:	e069      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0ea:	4a36      	ldr	r2, [pc, #216]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0ec:	6911      	ldr	r1, [r2, #16]
1000c0ee:	4b38      	ldr	r3, [pc, #224]	; (1000c1d0 <system_clock_peripheral_disable+0x318>)
1000c0f0:	400b      	ands	r3, r1
1000c0f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c0f6:	e062      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c0f8:	4a32      	ldr	r2, [pc, #200]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c0fa:	6911      	ldr	r1, [r2, #16]
1000c0fc:	4b35      	ldr	r3, [pc, #212]	; (1000c1d4 <system_clock_peripheral_disable+0x31c>)
1000c0fe:	400b      	ands	r3, r1
1000c100:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c102:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c104:	e05b      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c106:	4a2f      	ldr	r2, [pc, #188]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c108:	6911      	ldr	r1, [r2, #16]
1000c10a:	4b33      	ldr	r3, [pc, #204]	; (1000c1d8 <system_clock_peripheral_disable+0x320>)
1000c10c:	400b      	ands	r3, r1
1000c10e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c110:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c112:	e054      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c114:	4a2b      	ldr	r2, [pc, #172]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c116:	6911      	ldr	r1, [r2, #16]
1000c118:	4b30      	ldr	r3, [pc, #192]	; (1000c1dc <system_clock_peripheral_disable+0x324>)
1000c11a:	400b      	ands	r3, r1
1000c11c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c11e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c120:	e04d      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c122:	4a28      	ldr	r2, [pc, #160]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c124:	6911      	ldr	r1, [r2, #16]
1000c126:	4b2e      	ldr	r3, [pc, #184]	; (1000c1e0 <system_clock_peripheral_disable+0x328>)
1000c128:	400b      	ands	r3, r1
1000c12a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c12c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c12e:	e046      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c130:	4a24      	ldr	r2, [pc, #144]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c132:	6911      	ldr	r1, [r2, #16]
1000c134:	4b2b      	ldr	r3, [pc, #172]	; (1000c1e4 <system_clock_peripheral_disable+0x32c>)
1000c136:	400b      	ands	r3, r1
1000c138:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c13a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c13c:	e03f      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c13e:	4a21      	ldr	r2, [pc, #132]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c140:	6911      	ldr	r1, [r2, #16]
1000c142:	4b29      	ldr	r3, [pc, #164]	; (1000c1e8 <system_clock_peripheral_disable+0x330>)
1000c144:	400b      	ands	r3, r1
1000c146:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c148:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c14a:	e038      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c14c:	4a1d      	ldr	r2, [pc, #116]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c14e:	6911      	ldr	r1, [r2, #16]
1000c150:	4b26      	ldr	r3, [pc, #152]	; (1000c1ec <system_clock_peripheral_disable+0x334>)
1000c152:	400b      	ands	r3, r1
1000c154:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c156:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c158:	e031      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c15a:	4a1a      	ldr	r2, [pc, #104]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c15c:	6911      	ldr	r1, [r2, #16]
1000c15e:	4b24      	ldr	r3, [pc, #144]	; (1000c1f0 <system_clock_peripheral_disable+0x338>)
1000c160:	400b      	ands	r3, r1
1000c162:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c164:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c166:	e02a      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c168:	4a16      	ldr	r2, [pc, #88]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c16a:	6911      	ldr	r1, [r2, #16]
1000c16c:	4b21      	ldr	r3, [pc, #132]	; (1000c1f4 <system_clock_peripheral_disable+0x33c>)
1000c16e:	400b      	ands	r3, r1
1000c170:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c172:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c174:	e023      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c176:	4a13      	ldr	r2, [pc, #76]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c178:	6911      	ldr	r1, [r2, #16]
1000c17a:	4b1f      	ldr	r3, [pc, #124]	; (1000c1f8 <system_clock_peripheral_disable+0x340>)
1000c17c:	400b      	ands	r3, r1
1000c17e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c180:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c182:	e01c      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c184:	4a0f      	ldr	r2, [pc, #60]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c186:	6911      	ldr	r1, [r2, #16]
1000c188:	4b1c      	ldr	r3, [pc, #112]	; (1000c1fc <system_clock_peripheral_disable+0x344>)
1000c18a:	400b      	ands	r3, r1
1000c18c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c18e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c190:	e015      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c192:	4a0c      	ldr	r2, [pc, #48]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c194:	7d13      	ldrb	r3, [r2, #20]
1000c196:	2101      	movs	r1, #1
1000c198:	438b      	bics	r3, r1
1000c19a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c19e:	e00e      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c1a0:	4a08      	ldr	r2, [pc, #32]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c1a2:	7d13      	ldrb	r3, [r2, #20]
1000c1a4:	2102      	movs	r1, #2
1000c1a6:	438b      	bics	r3, r1
1000c1a8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c1ac:	e007      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c1ae:	4a05      	ldr	r2, [pc, #20]	; (1000c1c4 <system_clock_peripheral_disable+0x30c>)
1000c1b0:	7d13      	ldrb	r3, [r2, #20]
1000c1b2:	2104      	movs	r1, #4
1000c1b4:	438b      	bics	r3, r1
1000c1b6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c1ba:	e000      	b.n	1000c1be <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c1bc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c1be:	bd00      	pop	{pc}
1000c1c0:	10018298 	.word	0x10018298
1000c1c4:	4000b000 	.word	0x4000b000
1000c1c8:	fffffeff 	.word	0xfffffeff
1000c1cc:	fffff7ff 	.word	0xfffff7ff
1000c1d0:	ffffefff 	.word	0xffffefff
1000c1d4:	ffffdfff 	.word	0xffffdfff
1000c1d8:	ffffbfff 	.word	0xffffbfff
1000c1dc:	ffff7fff 	.word	0xffff7fff
1000c1e0:	fffeffff 	.word	0xfffeffff
1000c1e4:	fffdffff 	.word	0xfffdffff
1000c1e8:	fffbffff 	.word	0xfffbffff
1000c1ec:	fff7ffff 	.word	0xfff7ffff
1000c1f0:	ffefffff 	.word	0xffefffff
1000c1f4:	ffdfffff 	.word	0xffdfffff
1000c1f8:	ffbfffff 	.word	0xffbfffff
1000c1fc:	ff7fffff 	.word	0xff7fffff
1000c200:	feffffff 	.word	0xfeffffff
1000c204:	fdffffff 	.word	0xfdffffff
1000c208:	fbffffff 	.word	0xfbffffff
1000c20c:	f7ffffff 	.word	0xf7ffffff
1000c210:	efffffff 	.word	0xefffffff
1000c214:	dfffffff 	.word	0xdfffffff
1000c218:	bfffffff 	.word	0xbfffffff
1000c21c:	fffffdff 	.word	0xfffffdff
1000c220:	fffffbff 	.word	0xfffffbff

1000c224 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c224:	b500      	push	{lr}
	switch (peripheral) {
1000c226:	2843      	cmp	r0, #67	; 0x43
1000c228:	d900      	bls.n	1000c22c <system_peripheral_reset+0x8>
1000c22a:	e223      	b.n	1000c674 <system_peripheral_reset+0x450>
1000c22c:	0080      	lsls	r0, r0, #2
1000c22e:	4be0      	ldr	r3, [pc, #896]	; (1000c5b0 <system_peripheral_reset+0x38c>)
1000c230:	581b      	ldr	r3, [r3, r0]
1000c232:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c234:	4bdf      	ldr	r3, [pc, #892]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c236:	6859      	ldr	r1, [r3, #4]
1000c238:	2202      	movs	r2, #2
1000c23a:	4391      	bics	r1, r2
1000c23c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c23e:	6859      	ldr	r1, [r3, #4]
1000c240:	430a      	orrs	r2, r1
1000c242:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c244:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c246:	e216      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c248:	4bda      	ldr	r3, [pc, #872]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c24a:	6859      	ldr	r1, [r3, #4]
1000c24c:	2204      	movs	r2, #4
1000c24e:	4391      	bics	r1, r2
1000c250:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c252:	6859      	ldr	r1, [r3, #4]
1000c254:	430a      	orrs	r2, r1
1000c256:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c258:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c25a:	e20c      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c25c:	4bd5      	ldr	r3, [pc, #852]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c25e:	6859      	ldr	r1, [r3, #4]
1000c260:	2208      	movs	r2, #8
1000c262:	4391      	bics	r1, r2
1000c264:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c266:	6859      	ldr	r1, [r3, #4]
1000c268:	430a      	orrs	r2, r1
1000c26a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c26c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c26e:	e202      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c270:	4bd0      	ldr	r3, [pc, #832]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c272:	6859      	ldr	r1, [r3, #4]
1000c274:	2210      	movs	r2, #16
1000c276:	4391      	bics	r1, r2
1000c278:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c27a:	6859      	ldr	r1, [r3, #4]
1000c27c:	430a      	orrs	r2, r1
1000c27e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c280:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c282:	e1f8      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c284:	4bcb      	ldr	r3, [pc, #812]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c286:	6859      	ldr	r1, [r3, #4]
1000c288:	2220      	movs	r2, #32
1000c28a:	4391      	bics	r1, r2
1000c28c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c28e:	6859      	ldr	r1, [r3, #4]
1000c290:	430a      	orrs	r2, r1
1000c292:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c294:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c296:	e1ee      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c298:	4bc6      	ldr	r3, [pc, #792]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c29a:	6859      	ldr	r1, [r3, #4]
1000c29c:	2240      	movs	r2, #64	; 0x40
1000c29e:	4391      	bics	r1, r2
1000c2a0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2a2:	6859      	ldr	r1, [r3, #4]
1000c2a4:	430a      	orrs	r2, r1
1000c2a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c2aa:	e1e4      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2ac:	4bc1      	ldr	r3, [pc, #772]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c2ae:	6859      	ldr	r1, [r3, #4]
1000c2b0:	2280      	movs	r2, #128	; 0x80
1000c2b2:	4391      	bics	r1, r2
1000c2b4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2b6:	6859      	ldr	r1, [r3, #4]
1000c2b8:	430a      	orrs	r2, r1
1000c2ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c2be:	e1da      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2c0:	4bbc      	ldr	r3, [pc, #752]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c2c2:	6859      	ldr	r1, [r3, #4]
1000c2c4:	4abc      	ldr	r2, [pc, #752]	; (1000c5b8 <system_peripheral_reset+0x394>)
1000c2c6:	400a      	ands	r2, r1
1000c2c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2ca:	685a      	ldr	r2, [r3, #4]
1000c2cc:	2180      	movs	r1, #128	; 0x80
1000c2ce:	0049      	lsls	r1, r1, #1
1000c2d0:	430a      	orrs	r2, r1
1000c2d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c2d6:	e1ce      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2d8:	4bb6      	ldr	r3, [pc, #728]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c2da:	6859      	ldr	r1, [r3, #4]
1000c2dc:	4ab7      	ldr	r2, [pc, #732]	; (1000c5bc <system_peripheral_reset+0x398>)
1000c2de:	400a      	ands	r2, r1
1000c2e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2e2:	685a      	ldr	r2, [r3, #4]
1000c2e4:	2180      	movs	r1, #128	; 0x80
1000c2e6:	0089      	lsls	r1, r1, #2
1000c2e8:	430a      	orrs	r2, r1
1000c2ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ec:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c2ee:	e1c2      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2f0:	4bb0      	ldr	r3, [pc, #704]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c2f2:	6859      	ldr	r1, [r3, #4]
1000c2f4:	4ab2      	ldr	r2, [pc, #712]	; (1000c5c0 <system_peripheral_reset+0x39c>)
1000c2f6:	400a      	ands	r2, r1
1000c2f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2fa:	685a      	ldr	r2, [r3, #4]
1000c2fc:	2180      	movs	r1, #128	; 0x80
1000c2fe:	00c9      	lsls	r1, r1, #3
1000c300:	430a      	orrs	r2, r1
1000c302:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c304:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c306:	e1b6      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c308:	4baa      	ldr	r3, [pc, #680]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c30a:	6859      	ldr	r1, [r3, #4]
1000c30c:	4aad      	ldr	r2, [pc, #692]	; (1000c5c4 <system_peripheral_reset+0x3a0>)
1000c30e:	400a      	ands	r2, r1
1000c310:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c312:	685a      	ldr	r2, [r3, #4]
1000c314:	2180      	movs	r1, #128	; 0x80
1000c316:	0109      	lsls	r1, r1, #4
1000c318:	430a      	orrs	r2, r1
1000c31a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c31c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c31e:	e1aa      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c320:	4ba4      	ldr	r3, [pc, #656]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c322:	6859      	ldr	r1, [r3, #4]
1000c324:	4aa8      	ldr	r2, [pc, #672]	; (1000c5c8 <system_peripheral_reset+0x3a4>)
1000c326:	400a      	ands	r2, r1
1000c328:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c32a:	685a      	ldr	r2, [r3, #4]
1000c32c:	2180      	movs	r1, #128	; 0x80
1000c32e:	0149      	lsls	r1, r1, #5
1000c330:	430a      	orrs	r2, r1
1000c332:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c334:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c336:	e19e      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c338:	4b9e      	ldr	r3, [pc, #632]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c33a:	6859      	ldr	r1, [r3, #4]
1000c33c:	4aa3      	ldr	r2, [pc, #652]	; (1000c5cc <system_peripheral_reset+0x3a8>)
1000c33e:	400a      	ands	r2, r1
1000c340:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c342:	685a      	ldr	r2, [r3, #4]
1000c344:	2180      	movs	r1, #128	; 0x80
1000c346:	0189      	lsls	r1, r1, #6
1000c348:	430a      	orrs	r2, r1
1000c34a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c34c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c34e:	e192      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c350:	4b98      	ldr	r3, [pc, #608]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c352:	6859      	ldr	r1, [r3, #4]
1000c354:	4a9e      	ldr	r2, [pc, #632]	; (1000c5d0 <system_peripheral_reset+0x3ac>)
1000c356:	400a      	ands	r2, r1
1000c358:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c35a:	685a      	ldr	r2, [r3, #4]
1000c35c:	2180      	movs	r1, #128	; 0x80
1000c35e:	01c9      	lsls	r1, r1, #7
1000c360:	430a      	orrs	r2, r1
1000c362:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c364:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c366:	e186      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c368:	4b92      	ldr	r3, [pc, #584]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c36a:	6859      	ldr	r1, [r3, #4]
1000c36c:	4a99      	ldr	r2, [pc, #612]	; (1000c5d4 <system_peripheral_reset+0x3b0>)
1000c36e:	400a      	ands	r2, r1
1000c370:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c372:	685a      	ldr	r2, [r3, #4]
1000c374:	2180      	movs	r1, #128	; 0x80
1000c376:	0209      	lsls	r1, r1, #8
1000c378:	430a      	orrs	r2, r1
1000c37a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c37c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c37e:	e17a      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c380:	4b8c      	ldr	r3, [pc, #560]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c382:	6859      	ldr	r1, [r3, #4]
1000c384:	4a94      	ldr	r2, [pc, #592]	; (1000c5d8 <system_peripheral_reset+0x3b4>)
1000c386:	400a      	ands	r2, r1
1000c388:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c38a:	685a      	ldr	r2, [r3, #4]
1000c38c:	2180      	movs	r1, #128	; 0x80
1000c38e:	0249      	lsls	r1, r1, #9
1000c390:	430a      	orrs	r2, r1
1000c392:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c394:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c396:	e16e      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c398:	4b86      	ldr	r3, [pc, #536]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c39a:	6859      	ldr	r1, [r3, #4]
1000c39c:	4a8f      	ldr	r2, [pc, #572]	; (1000c5dc <system_peripheral_reset+0x3b8>)
1000c39e:	400a      	ands	r2, r1
1000c3a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3a2:	685a      	ldr	r2, [r3, #4]
1000c3a4:	2180      	movs	r1, #128	; 0x80
1000c3a6:	0289      	lsls	r1, r1, #10
1000c3a8:	430a      	orrs	r2, r1
1000c3aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ac:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c3ae:	e162      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3b0:	4b80      	ldr	r3, [pc, #512]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c3b2:	6859      	ldr	r1, [r3, #4]
1000c3b4:	4a8a      	ldr	r2, [pc, #552]	; (1000c5e0 <system_peripheral_reset+0x3bc>)
1000c3b6:	400a      	ands	r2, r1
1000c3b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3ba:	685a      	ldr	r2, [r3, #4]
1000c3bc:	2180      	movs	r1, #128	; 0x80
1000c3be:	02c9      	lsls	r1, r1, #11
1000c3c0:	430a      	orrs	r2, r1
1000c3c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c3c6:	e156      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3c8:	4b7a      	ldr	r3, [pc, #488]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c3ca:	6859      	ldr	r1, [r3, #4]
1000c3cc:	4a85      	ldr	r2, [pc, #532]	; (1000c5e4 <system_peripheral_reset+0x3c0>)
1000c3ce:	400a      	ands	r2, r1
1000c3d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3d2:	685a      	ldr	r2, [r3, #4]
1000c3d4:	2180      	movs	r1, #128	; 0x80
1000c3d6:	0309      	lsls	r1, r1, #12
1000c3d8:	430a      	orrs	r2, r1
1000c3da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3dc:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c3de:	e14a      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3e0:	4b74      	ldr	r3, [pc, #464]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c3e2:	6859      	ldr	r1, [r3, #4]
1000c3e4:	4a80      	ldr	r2, [pc, #512]	; (1000c5e8 <system_peripheral_reset+0x3c4>)
1000c3e6:	400a      	ands	r2, r1
1000c3e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3ea:	685a      	ldr	r2, [r3, #4]
1000c3ec:	2180      	movs	r1, #128	; 0x80
1000c3ee:	0349      	lsls	r1, r1, #13
1000c3f0:	430a      	orrs	r2, r1
1000c3f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c3f6:	e13e      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3f8:	4b6e      	ldr	r3, [pc, #440]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c3fa:	6859      	ldr	r1, [r3, #4]
1000c3fc:	4a7b      	ldr	r2, [pc, #492]	; (1000c5ec <system_peripheral_reset+0x3c8>)
1000c3fe:	400a      	ands	r2, r1
1000c400:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c402:	685a      	ldr	r2, [r3, #4]
1000c404:	2180      	movs	r1, #128	; 0x80
1000c406:	0389      	lsls	r1, r1, #14
1000c408:	430a      	orrs	r2, r1
1000c40a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c40c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c40e:	e132      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c410:	4b68      	ldr	r3, [pc, #416]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c412:	6859      	ldr	r1, [r3, #4]
1000c414:	4a76      	ldr	r2, [pc, #472]	; (1000c5f0 <system_peripheral_reset+0x3cc>)
1000c416:	400a      	ands	r2, r1
1000c418:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c41a:	685a      	ldr	r2, [r3, #4]
1000c41c:	2180      	movs	r1, #128	; 0x80
1000c41e:	03c9      	lsls	r1, r1, #15
1000c420:	430a      	orrs	r2, r1
1000c422:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c424:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c426:	e126      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c428:	4b62      	ldr	r3, [pc, #392]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c42a:	6859      	ldr	r1, [r3, #4]
1000c42c:	4a71      	ldr	r2, [pc, #452]	; (1000c5f4 <system_peripheral_reset+0x3d0>)
1000c42e:	400a      	ands	r2, r1
1000c430:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c432:	685a      	ldr	r2, [r3, #4]
1000c434:	2180      	movs	r1, #128	; 0x80
1000c436:	0409      	lsls	r1, r1, #16
1000c438:	430a      	orrs	r2, r1
1000c43a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c43c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c43e:	e11a      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c440:	4b5c      	ldr	r3, [pc, #368]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c442:	6859      	ldr	r1, [r3, #4]
1000c444:	4a6c      	ldr	r2, [pc, #432]	; (1000c5f8 <system_peripheral_reset+0x3d4>)
1000c446:	400a      	ands	r2, r1
1000c448:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c44a:	685a      	ldr	r2, [r3, #4]
1000c44c:	2180      	movs	r1, #128	; 0x80
1000c44e:	0449      	lsls	r1, r1, #17
1000c450:	430a      	orrs	r2, r1
1000c452:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c454:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c456:	e10e      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c458:	4b56      	ldr	r3, [pc, #344]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c45a:	6859      	ldr	r1, [r3, #4]
1000c45c:	4a67      	ldr	r2, [pc, #412]	; (1000c5fc <system_peripheral_reset+0x3d8>)
1000c45e:	400a      	ands	r2, r1
1000c460:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c462:	685a      	ldr	r2, [r3, #4]
1000c464:	2180      	movs	r1, #128	; 0x80
1000c466:	0489      	lsls	r1, r1, #18
1000c468:	430a      	orrs	r2, r1
1000c46a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c46c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c46e:	e102      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c470:	4b50      	ldr	r3, [pc, #320]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c472:	6859      	ldr	r1, [r3, #4]
1000c474:	4a62      	ldr	r2, [pc, #392]	; (1000c600 <system_peripheral_reset+0x3dc>)
1000c476:	400a      	ands	r2, r1
1000c478:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c47a:	685a      	ldr	r2, [r3, #4]
1000c47c:	2180      	movs	r1, #128	; 0x80
1000c47e:	04c9      	lsls	r1, r1, #19
1000c480:	430a      	orrs	r2, r1
1000c482:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c484:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c486:	e0f6      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c488:	4b4a      	ldr	r3, [pc, #296]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c48a:	6859      	ldr	r1, [r3, #4]
1000c48c:	4a5d      	ldr	r2, [pc, #372]	; (1000c604 <system_peripheral_reset+0x3e0>)
1000c48e:	400a      	ands	r2, r1
1000c490:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c492:	685a      	ldr	r2, [r3, #4]
1000c494:	2180      	movs	r1, #128	; 0x80
1000c496:	0509      	lsls	r1, r1, #20
1000c498:	430a      	orrs	r2, r1
1000c49a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c49c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c49e:	e0ea      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4a0:	4b44      	ldr	r3, [pc, #272]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c4a2:	6859      	ldr	r1, [r3, #4]
1000c4a4:	4a58      	ldr	r2, [pc, #352]	; (1000c608 <system_peripheral_reset+0x3e4>)
1000c4a6:	400a      	ands	r2, r1
1000c4a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4aa:	685a      	ldr	r2, [r3, #4]
1000c4ac:	2180      	movs	r1, #128	; 0x80
1000c4ae:	0549      	lsls	r1, r1, #21
1000c4b0:	430a      	orrs	r2, r1
1000c4b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c4b6:	e0de      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4b8:	4b3e      	ldr	r3, [pc, #248]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c4ba:	6859      	ldr	r1, [r3, #4]
1000c4bc:	4a53      	ldr	r2, [pc, #332]	; (1000c60c <system_peripheral_reset+0x3e8>)
1000c4be:	400a      	ands	r2, r1
1000c4c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4c2:	685a      	ldr	r2, [r3, #4]
1000c4c4:	2180      	movs	r1, #128	; 0x80
1000c4c6:	0589      	lsls	r1, r1, #22
1000c4c8:	430a      	orrs	r2, r1
1000c4ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4cc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c4ce:	e0d2      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4d0:	4b38      	ldr	r3, [pc, #224]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c4d2:	6859      	ldr	r1, [r3, #4]
1000c4d4:	4a4e      	ldr	r2, [pc, #312]	; (1000c610 <system_peripheral_reset+0x3ec>)
1000c4d6:	400a      	ands	r2, r1
1000c4d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4da:	685a      	ldr	r2, [r3, #4]
1000c4dc:	2180      	movs	r1, #128	; 0x80
1000c4de:	05c9      	lsls	r1, r1, #23
1000c4e0:	430a      	orrs	r2, r1
1000c4e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c4e6:	e0c6      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4e8:	4a32      	ldr	r2, [pc, #200]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c4ea:	6853      	ldr	r3, [r2, #4]
1000c4ec:	005b      	lsls	r3, r3, #1
1000c4ee:	085b      	lsrs	r3, r3, #1
1000c4f0:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4f2:	6853      	ldr	r3, [r2, #4]
1000c4f4:	2180      	movs	r1, #128	; 0x80
1000c4f6:	0609      	lsls	r1, r1, #24
1000c4f8:	430b      	orrs	r3, r1
1000c4fa:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4fc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c4fe:	e0ba      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c500:	4b2c      	ldr	r3, [pc, #176]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c502:	891a      	ldrh	r2, [r3, #8]
1000c504:	2101      	movs	r1, #1
1000c506:	438a      	bics	r2, r1
1000c508:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c50a:	8919      	ldrh	r1, [r3, #8]
1000c50c:	2201      	movs	r2, #1
1000c50e:	430a      	orrs	r2, r1
1000c510:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c512:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c514:	e0af      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c516:	4b27      	ldr	r3, [pc, #156]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c518:	891a      	ldrh	r2, [r3, #8]
1000c51a:	2102      	movs	r1, #2
1000c51c:	438a      	bics	r2, r1
1000c51e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c520:	8919      	ldrh	r1, [r3, #8]
1000c522:	2202      	movs	r2, #2
1000c524:	430a      	orrs	r2, r1
1000c526:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c528:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c52a:	e0a4      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c52c:	4b21      	ldr	r3, [pc, #132]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c52e:	891a      	ldrh	r2, [r3, #8]
1000c530:	2104      	movs	r1, #4
1000c532:	438a      	bics	r2, r1
1000c534:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c536:	8919      	ldrh	r1, [r3, #8]
1000c538:	2204      	movs	r2, #4
1000c53a:	430a      	orrs	r2, r1
1000c53c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c53e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c540:	e099      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c542:	4b1c      	ldr	r3, [pc, #112]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c544:	891a      	ldrh	r2, [r3, #8]
1000c546:	2108      	movs	r1, #8
1000c548:	438a      	bics	r2, r1
1000c54a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c54c:	8919      	ldrh	r1, [r3, #8]
1000c54e:	2208      	movs	r2, #8
1000c550:	430a      	orrs	r2, r1
1000c552:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c554:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c556:	e08e      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c558:	4b16      	ldr	r3, [pc, #88]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c55a:	891a      	ldrh	r2, [r3, #8]
1000c55c:	2110      	movs	r1, #16
1000c55e:	438a      	bics	r2, r1
1000c560:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c562:	8919      	ldrh	r1, [r3, #8]
1000c564:	2210      	movs	r2, #16
1000c566:	430a      	orrs	r2, r1
1000c568:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c56a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c56c:	e083      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c56e:	4b11      	ldr	r3, [pc, #68]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c570:	891a      	ldrh	r2, [r3, #8]
1000c572:	2120      	movs	r1, #32
1000c574:	438a      	bics	r2, r1
1000c576:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c578:	8919      	ldrh	r1, [r3, #8]
1000c57a:	2220      	movs	r2, #32
1000c57c:	430a      	orrs	r2, r1
1000c57e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c580:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c582:	e078      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c584:	4b0b      	ldr	r3, [pc, #44]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c586:	891a      	ldrh	r2, [r3, #8]
1000c588:	2140      	movs	r1, #64	; 0x40
1000c58a:	438a      	bics	r2, r1
1000c58c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c58e:	8919      	ldrh	r1, [r3, #8]
1000c590:	2240      	movs	r2, #64	; 0x40
1000c592:	430a      	orrs	r2, r1
1000c594:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c596:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c598:	e06d      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c59a:	4b06      	ldr	r3, [pc, #24]	; (1000c5b4 <system_peripheral_reset+0x390>)
1000c59c:	891a      	ldrh	r2, [r3, #8]
1000c59e:	2180      	movs	r1, #128	; 0x80
1000c5a0:	438a      	bics	r2, r1
1000c5a2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5a4:	8919      	ldrh	r1, [r3, #8]
1000c5a6:	2280      	movs	r2, #128	; 0x80
1000c5a8:	430a      	orrs	r2, r1
1000c5aa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c5ae:	e062      	b.n	1000c676 <system_peripheral_reset+0x452>
1000c5b0:	10018370 	.word	0x10018370
1000c5b4:	4000b000 	.word	0x4000b000
1000c5b8:	fffffeff 	.word	0xfffffeff
1000c5bc:	fffffdff 	.word	0xfffffdff
1000c5c0:	fffffbff 	.word	0xfffffbff
1000c5c4:	fffff7ff 	.word	0xfffff7ff
1000c5c8:	ffffefff 	.word	0xffffefff
1000c5cc:	ffffdfff 	.word	0xffffdfff
1000c5d0:	ffffbfff 	.word	0xffffbfff
1000c5d4:	ffff7fff 	.word	0xffff7fff
1000c5d8:	fffeffff 	.word	0xfffeffff
1000c5dc:	fffdffff 	.word	0xfffdffff
1000c5e0:	fffbffff 	.word	0xfffbffff
1000c5e4:	fff7ffff 	.word	0xfff7ffff
1000c5e8:	ffefffff 	.word	0xffefffff
1000c5ec:	ffdfffff 	.word	0xffdfffff
1000c5f0:	ffbfffff 	.word	0xffbfffff
1000c5f4:	ff7fffff 	.word	0xff7fffff
1000c5f8:	feffffff 	.word	0xfeffffff
1000c5fc:	fdffffff 	.word	0xfdffffff
1000c600:	fbffffff 	.word	0xfbffffff
1000c604:	f7ffffff 	.word	0xf7ffffff
1000c608:	efffffff 	.word	0xefffffff
1000c60c:	dfffffff 	.word	0xdfffffff
1000c610:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c614:	4b18      	ldr	r3, [pc, #96]	; (1000c678 <system_peripheral_reset+0x454>)
1000c616:	8919      	ldrh	r1, [r3, #8]
1000c618:	4a18      	ldr	r2, [pc, #96]	; (1000c67c <system_peripheral_reset+0x458>)
1000c61a:	400a      	ands	r2, r1
1000c61c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c61e:	8919      	ldrh	r1, [r3, #8]
1000c620:	2280      	movs	r2, #128	; 0x80
1000c622:	0052      	lsls	r2, r2, #1
1000c624:	430a      	orrs	r2, r1
1000c626:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c628:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c62a:	e024      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c62c:	4b12      	ldr	r3, [pc, #72]	; (1000c678 <system_peripheral_reset+0x454>)
1000c62e:	8919      	ldrh	r1, [r3, #8]
1000c630:	4a13      	ldr	r2, [pc, #76]	; (1000c680 <system_peripheral_reset+0x45c>)
1000c632:	400a      	ands	r2, r1
1000c634:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c636:	8919      	ldrh	r1, [r3, #8]
1000c638:	2280      	movs	r2, #128	; 0x80
1000c63a:	0092      	lsls	r2, r2, #2
1000c63c:	430a      	orrs	r2, r1
1000c63e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c640:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c642:	e018      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c644:	4b0c      	ldr	r3, [pc, #48]	; (1000c678 <system_peripheral_reset+0x454>)
1000c646:	8919      	ldrh	r1, [r3, #8]
1000c648:	4a0e      	ldr	r2, [pc, #56]	; (1000c684 <system_peripheral_reset+0x460>)
1000c64a:	400a      	ands	r2, r1
1000c64c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c64e:	8919      	ldrh	r1, [r3, #8]
1000c650:	2280      	movs	r2, #128	; 0x80
1000c652:	00d2      	lsls	r2, r2, #3
1000c654:	430a      	orrs	r2, r1
1000c656:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c658:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c65a:	e00c      	b.n	1000c676 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c65c:	4b06      	ldr	r3, [pc, #24]	; (1000c678 <system_peripheral_reset+0x454>)
1000c65e:	8919      	ldrh	r1, [r3, #8]
1000c660:	4a09      	ldr	r2, [pc, #36]	; (1000c688 <system_peripheral_reset+0x464>)
1000c662:	400a      	ands	r2, r1
1000c664:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c666:	8919      	ldrh	r1, [r3, #8]
1000c668:	2280      	movs	r2, #128	; 0x80
1000c66a:	0112      	lsls	r2, r2, #4
1000c66c:	430a      	orrs	r2, r1
1000c66e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c670:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c672:	e000      	b.n	1000c676 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c674:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c676:	bd00      	pop	{pc}
1000c678:	4000b000 	.word	0x4000b000
1000c67c:	fffffeff 	.word	0xfffffeff
1000c680:	fffffdff 	.word	0xfffffdff
1000c684:	fffffbff 	.word	0xfffffbff
1000c688:	fffff7ff 	.word	0xfffff7ff

1000c68c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c68c:	2380      	movs	r3, #128	; 0x80
1000c68e:	04db      	lsls	r3, r3, #19
1000c690:	469c      	mov	ip, r3
1000c692:	4460      	add	r0, ip
1000c694:	0080      	lsls	r0, r0, #2
1000c696:	6001      	str	r1, [r0, #0]
}
1000c698:	4770      	bx	lr
1000c69a:	46c0      	nop			; (mov r8, r8)

1000c69c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c69c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c69e:	4b20      	ldr	r3, [pc, #128]	; (1000c720 <uart_rx0_isr_handler+0x84>)
1000c6a0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c6a2:	6823      	ldr	r3, [r4, #0]
1000c6a4:	7d1d      	ldrb	r5, [r3, #20]
1000c6a6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c6a8:	066a      	lsls	r2, r5, #25
1000c6aa:	d513      	bpl.n	1000c6d4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c6ac:	211e      	movs	r1, #30
1000c6ae:	2222      	movs	r2, #34	; 0x22
1000c6b0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c6b2:	7e1a      	ldrb	r2, [r3, #24]
1000c6b4:	3123      	adds	r1, #35	; 0x23
1000c6b6:	438a      	bics	r2, r1
1000c6b8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c6ba:	2321      	movs	r3, #33	; 0x21
1000c6bc:	5ce3      	ldrb	r3, [r4, r3]
1000c6be:	071b      	lsls	r3, r3, #28
1000c6c0:	d506      	bpl.n	1000c6d0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c6c2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c6c4:	5ce3      	ldrb	r3, [r4, r3]
1000c6c6:	071b      	lsls	r3, r3, #28
1000c6c8:	d502      	bpl.n	1000c6d0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c6ca:	0020      	movs	r0, r4
1000c6cc:	6923      	ldr	r3, [r4, #16]
1000c6ce:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c6d0:	6823      	ldr	r3, [r4, #0]
1000c6d2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c6d4:	07eb      	lsls	r3, r5, #31
1000c6d6:	d522      	bpl.n	1000c71e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c6d8:	6823      	ldr	r3, [r4, #0]
1000c6da:	7c1b      	ldrb	r3, [r3, #16]
1000c6dc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c6de:	6962      	ldr	r2, [r4, #20]
1000c6e0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c6e2:	6963      	ldr	r3, [r4, #20]
1000c6e4:	3301      	adds	r3, #1
1000c6e6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c6e8:	8ba3      	ldrh	r3, [r4, #28]
1000c6ea:	3b01      	subs	r3, #1
1000c6ec:	b29b      	uxth	r3, r3
1000c6ee:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c6f0:	8ba3      	ldrh	r3, [r4, #28]
1000c6f2:	b29b      	uxth	r3, r3
1000c6f4:	2b00      	cmp	r3, #0
1000c6f6:	d112      	bne.n	1000c71e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c6f8:	3321      	adds	r3, #33	; 0x21
1000c6fa:	5ce3      	ldrb	r3, [r4, r3]
1000c6fc:	075b      	lsls	r3, r3, #29
1000c6fe:	d50e      	bpl.n	1000c71e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c700:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c702:	5ce3      	ldrb	r3, [r4, r3]
1000c704:	075b      	lsls	r3, r3, #29
1000c706:	d50a      	bpl.n	1000c71e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c708:	2200      	movs	r2, #0
1000c70a:	2322      	movs	r3, #34	; 0x22
1000c70c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c70e:	6822      	ldr	r2, [r4, #0]
1000c710:	7e13      	ldrb	r3, [r2, #24]
1000c712:	2101      	movs	r1, #1
1000c714:	438b      	bics	r3, r1
1000c716:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c718:	68e3      	ldr	r3, [r4, #12]
1000c71a:	0020      	movs	r0, r4
1000c71c:	4798      	blx	r3
			}
		}
	}
}
1000c71e:	bd70      	pop	{r4, r5, r6, pc}
1000c720:	1001b184 	.word	0x1001b184

1000c724 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c724:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c726:	4b21      	ldr	r3, [pc, #132]	; (1000c7ac <uart_tx0_isr_handler+0x88>)
1000c728:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c72a:	6823      	ldr	r3, [r4, #0]
1000c72c:	791d      	ldrb	r5, [r3, #4]
1000c72e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c730:	07ea      	lsls	r2, r5, #31
1000c732:	d517      	bpl.n	1000c764 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c734:	69a2      	ldr	r2, [r4, #24]
1000c736:	7811      	ldrb	r1, [r2, #0]
1000c738:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c73a:	3201      	adds	r2, #1
1000c73c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c73e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c740:	8be3      	ldrh	r3, [r4, #30]
1000c742:	3b01      	subs	r3, #1
1000c744:	b29b      	uxth	r3, r3
1000c746:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c748:	8be3      	ldrh	r3, [r4, #30]
1000c74a:	b29b      	uxth	r3, r3
1000c74c:	2b00      	cmp	r3, #0
1000c74e:	d109      	bne.n	1000c764 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c750:	6822      	ldr	r2, [r4, #0]
1000c752:	7a13      	ldrb	r3, [r2, #8]
1000c754:	2101      	movs	r1, #1
1000c756:	438b      	bics	r3, r1
1000c758:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c75a:	6822      	ldr	r2, [r4, #0]
1000c75c:	7a11      	ldrb	r1, [r2, #8]
1000c75e:	2310      	movs	r3, #16
1000c760:	430b      	orrs	r3, r1
1000c762:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c764:	06eb      	lsls	r3, r5, #27
1000c766:	d512      	bpl.n	1000c78e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c768:	2321      	movs	r3, #33	; 0x21
1000c76a:	5ce3      	ldrb	r3, [r4, r3]
1000c76c:	07db      	lsls	r3, r3, #31
1000c76e:	d50e      	bpl.n	1000c78e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c770:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c772:	5ce3      	ldrb	r3, [r4, r3]
1000c774:	07db      	lsls	r3, r3, #31
1000c776:	d50a      	bpl.n	1000c78e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c778:	2200      	movs	r2, #0
1000c77a:	2322      	movs	r3, #34	; 0x22
1000c77c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c77e:	6822      	ldr	r2, [r4, #0]
1000c780:	7a13      	ldrb	r3, [r2, #8]
1000c782:	2110      	movs	r1, #16
1000c784:	438b      	bics	r3, r1
1000c786:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c788:	0020      	movs	r0, r4
1000c78a:	6863      	ldr	r3, [r4, #4]
1000c78c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c78e:	06ab      	lsls	r3, r5, #26
1000c790:	d50a      	bpl.n	1000c7a8 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c792:	2321      	movs	r3, #33	; 0x21
1000c794:	5ce3      	ldrb	r3, [r4, r3]
1000c796:	079b      	lsls	r3, r3, #30
1000c798:	d506      	bpl.n	1000c7a8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c79a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c79c:	5ce3      	ldrb	r3, [r4, r3]
1000c79e:	079b      	lsls	r3, r3, #30
1000c7a0:	d502      	bpl.n	1000c7a8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c7a2:	68a3      	ldr	r3, [r4, #8]
1000c7a4:	0020      	movs	r0, r4
1000c7a6:	4798      	blx	r3
		}

	}
}
1000c7a8:	bd70      	pop	{r4, r5, r6, pc}
1000c7aa:	46c0      	nop			; (mov r8, r8)
1000c7ac:	1001b184 	.word	0x1001b184

1000c7b0 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c7b0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c7b2:	4b20      	ldr	r3, [pc, #128]	; (1000c834 <uart_rx1_isr_handler+0x84>)
1000c7b4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c7b6:	6823      	ldr	r3, [r4, #0]
1000c7b8:	7d1d      	ldrb	r5, [r3, #20]
1000c7ba:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c7bc:	066a      	lsls	r2, r5, #25
1000c7be:	d513      	bpl.n	1000c7e8 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c7c0:	211e      	movs	r1, #30
1000c7c2:	2222      	movs	r2, #34	; 0x22
1000c7c4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c7c6:	7e1a      	ldrb	r2, [r3, #24]
1000c7c8:	3123      	adds	r1, #35	; 0x23
1000c7ca:	438a      	bics	r2, r1
1000c7cc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c7ce:	2321      	movs	r3, #33	; 0x21
1000c7d0:	5ce3      	ldrb	r3, [r4, r3]
1000c7d2:	071b      	lsls	r3, r3, #28
1000c7d4:	d506      	bpl.n	1000c7e4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c7d6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c7d8:	5ce3      	ldrb	r3, [r4, r3]
1000c7da:	071b      	lsls	r3, r3, #28
1000c7dc:	d502      	bpl.n	1000c7e4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c7de:	0020      	movs	r0, r4
1000c7e0:	6923      	ldr	r3, [r4, #16]
1000c7e2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c7e4:	6823      	ldr	r3, [r4, #0]
1000c7e6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c7e8:	07eb      	lsls	r3, r5, #31
1000c7ea:	d522      	bpl.n	1000c832 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c7ec:	6823      	ldr	r3, [r4, #0]
1000c7ee:	7c1b      	ldrb	r3, [r3, #16]
1000c7f0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c7f2:	6962      	ldr	r2, [r4, #20]
1000c7f4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c7f6:	6963      	ldr	r3, [r4, #20]
1000c7f8:	3301      	adds	r3, #1
1000c7fa:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c7fc:	8ba3      	ldrh	r3, [r4, #28]
1000c7fe:	3b01      	subs	r3, #1
1000c800:	b29b      	uxth	r3, r3
1000c802:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c804:	8ba3      	ldrh	r3, [r4, #28]
1000c806:	b29b      	uxth	r3, r3
1000c808:	2b00      	cmp	r3, #0
1000c80a:	d112      	bne.n	1000c832 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c80c:	3321      	adds	r3, #33	; 0x21
1000c80e:	5ce3      	ldrb	r3, [r4, r3]
1000c810:	075b      	lsls	r3, r3, #29
1000c812:	d50e      	bpl.n	1000c832 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c814:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c816:	5ce3      	ldrb	r3, [r4, r3]
1000c818:	075b      	lsls	r3, r3, #29
1000c81a:	d50a      	bpl.n	1000c832 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c81c:	2200      	movs	r2, #0
1000c81e:	2322      	movs	r3, #34	; 0x22
1000c820:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c822:	6822      	ldr	r2, [r4, #0]
1000c824:	7e13      	ldrb	r3, [r2, #24]
1000c826:	2101      	movs	r1, #1
1000c828:	438b      	bics	r3, r1
1000c82a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c82c:	68e3      	ldr	r3, [r4, #12]
1000c82e:	0020      	movs	r0, r4
1000c830:	4798      	blx	r3
			}
		}
	}
}
1000c832:	bd70      	pop	{r4, r5, r6, pc}
1000c834:	1001b184 	.word	0x1001b184

1000c838 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c838:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c83a:	4b21      	ldr	r3, [pc, #132]	; (1000c8c0 <uart_tx1_isr_handler+0x88>)
1000c83c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c83e:	6823      	ldr	r3, [r4, #0]
1000c840:	791d      	ldrb	r5, [r3, #4]
1000c842:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c844:	07ea      	lsls	r2, r5, #31
1000c846:	d517      	bpl.n	1000c878 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c848:	69a2      	ldr	r2, [r4, #24]
1000c84a:	7811      	ldrb	r1, [r2, #0]
1000c84c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c84e:	3201      	adds	r2, #1
1000c850:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c852:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c854:	8be3      	ldrh	r3, [r4, #30]
1000c856:	3b01      	subs	r3, #1
1000c858:	b29b      	uxth	r3, r3
1000c85a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c85c:	8be3      	ldrh	r3, [r4, #30]
1000c85e:	b29b      	uxth	r3, r3
1000c860:	2b00      	cmp	r3, #0
1000c862:	d109      	bne.n	1000c878 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c864:	6822      	ldr	r2, [r4, #0]
1000c866:	7a13      	ldrb	r3, [r2, #8]
1000c868:	2101      	movs	r1, #1
1000c86a:	438b      	bics	r3, r1
1000c86c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c86e:	6822      	ldr	r2, [r4, #0]
1000c870:	7a11      	ldrb	r1, [r2, #8]
1000c872:	2310      	movs	r3, #16
1000c874:	430b      	orrs	r3, r1
1000c876:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c878:	06eb      	lsls	r3, r5, #27
1000c87a:	d512      	bpl.n	1000c8a2 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c87c:	2321      	movs	r3, #33	; 0x21
1000c87e:	5ce3      	ldrb	r3, [r4, r3]
1000c880:	07db      	lsls	r3, r3, #31
1000c882:	d50e      	bpl.n	1000c8a2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c884:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c886:	5ce3      	ldrb	r3, [r4, r3]
1000c888:	07db      	lsls	r3, r3, #31
1000c88a:	d50a      	bpl.n	1000c8a2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c88c:	2200      	movs	r2, #0
1000c88e:	2322      	movs	r3, #34	; 0x22
1000c890:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c892:	6822      	ldr	r2, [r4, #0]
1000c894:	7a13      	ldrb	r3, [r2, #8]
1000c896:	2110      	movs	r1, #16
1000c898:	438b      	bics	r3, r1
1000c89a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c89c:	0020      	movs	r0, r4
1000c89e:	6863      	ldr	r3, [r4, #4]
1000c8a0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c8a2:	06ab      	lsls	r3, r5, #26
1000c8a4:	d50a      	bpl.n	1000c8bc <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c8a6:	2321      	movs	r3, #33	; 0x21
1000c8a8:	5ce3      	ldrb	r3, [r4, r3]
1000c8aa:	079b      	lsls	r3, r3, #30
1000c8ac:	d506      	bpl.n	1000c8bc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c8ae:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c8b0:	5ce3      	ldrb	r3, [r4, r3]
1000c8b2:	079b      	lsls	r3, r3, #30
1000c8b4:	d502      	bpl.n	1000c8bc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c8b6:	68a3      	ldr	r3, [r4, #8]
1000c8b8:	0020      	movs	r0, r4
1000c8ba:	4798      	blx	r3
		}

	}
}
1000c8bc:	bd70      	pop	{r4, r5, r6, pc}
1000c8be:	46c0      	nop			; (mov r8, r8)
1000c8c0:	1001b184 	.word	0x1001b184

1000c8c4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c8c4:	23e1      	movs	r3, #225	; 0xe1
1000c8c6:	025b      	lsls	r3, r3, #9
1000c8c8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c8ca:	2300      	movs	r3, #0
1000c8cc:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c8ce:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c8d0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c8d2:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c8d4:	3302      	adds	r3, #2
1000c8d6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c8d8:	2203      	movs	r2, #3
1000c8da:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c8dc:	3201      	adds	r2, #1
1000c8de:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c8e0:	3201      	adds	r2, #1
1000c8e2:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c8e4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c8e6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c8e8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c8ea:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c8ec:	4770      	bx	lr
1000c8ee:	46c0      	nop			; (mov r8, r8)

1000c8f0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c8f2:	464f      	mov	r7, r9
1000c8f4:	4646      	mov	r6, r8
1000c8f6:	b4c0      	push	{r6, r7}
1000c8f8:	0005      	movs	r5, r0
1000c8fa:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c8fc:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c8fe:	2300      	movs	r3, #0
1000c900:	6043      	str	r3, [r0, #4]
1000c902:	6083      	str	r3, [r0, #8]
1000c904:	60c3      	str	r3, [r0, #12]
1000c906:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c908:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c90a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c90c:	2200      	movs	r2, #0
1000c90e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c910:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c912:	3320      	adds	r3, #32
1000c914:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c916:	3301      	adds	r3, #1
1000c918:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c91a:	3301      	adds	r3, #1
1000c91c:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c91e:	4b55      	ldr	r3, [pc, #340]	; (1000ca74 <uart_init+0x184>)
1000c920:	4299      	cmp	r1, r3
1000c922:	d118      	bne.n	1000c956 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c924:	2009      	movs	r0, #9
1000c926:	4c54      	ldr	r4, [pc, #336]	; (1000ca78 <uart_init+0x188>)
1000c928:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c92a:	200a      	movs	r0, #10
1000c92c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c92e:	2009      	movs	r0, #9
1000c930:	4c52      	ldr	r4, [pc, #328]	; (1000ca7c <uart_init+0x18c>)
1000c932:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c934:	200a      	movs	r0, #10
1000c936:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c938:	4b51      	ldr	r3, [pc, #324]	; (1000ca80 <uart_init+0x190>)
1000c93a:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c93c:	4951      	ldr	r1, [pc, #324]	; (1000ca84 <uart_init+0x194>)
1000c93e:	2010      	movs	r0, #16
1000c940:	4c51      	ldr	r4, [pc, #324]	; (1000ca88 <uart_init+0x198>)
1000c942:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c944:	4951      	ldr	r1, [pc, #324]	; (1000ca8c <uart_init+0x19c>)
1000c946:	2011      	movs	r0, #17
1000c948:	47a0      	blx	r4
1000c94a:	4b51      	ldr	r3, [pc, #324]	; (1000ca90 <uart_init+0x1a0>)
1000c94c:	2201      	movs	r2, #1
1000c94e:	601a      	str	r2, [r3, #0]
1000c950:	3201      	adds	r2, #1
1000c952:	601a      	str	r2, [r3, #0]
1000c954:	e01a      	b.n	1000c98c <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c956:	4b4f      	ldr	r3, [pc, #316]	; (1000ca94 <uart_init+0x1a4>)
1000c958:	4299      	cmp	r1, r3
1000c95a:	d117      	bne.n	1000c98c <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c95c:	200b      	movs	r0, #11
1000c95e:	4c46      	ldr	r4, [pc, #280]	; (1000ca78 <uart_init+0x188>)
1000c960:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c962:	200c      	movs	r0, #12
1000c964:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c966:	200b      	movs	r0, #11
1000c968:	4c44      	ldr	r4, [pc, #272]	; (1000ca7c <uart_init+0x18c>)
1000c96a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c96c:	200c      	movs	r0, #12
1000c96e:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c970:	4b43      	ldr	r3, [pc, #268]	; (1000ca80 <uart_init+0x190>)
1000c972:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c974:	4948      	ldr	r1, [pc, #288]	; (1000ca98 <uart_init+0x1a8>)
1000c976:	2012      	movs	r0, #18
1000c978:	4c43      	ldr	r4, [pc, #268]	; (1000ca88 <uart_init+0x198>)
1000c97a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c97c:	4947      	ldr	r1, [pc, #284]	; (1000ca9c <uart_init+0x1ac>)
1000c97e:	2013      	movs	r0, #19
1000c980:	47a0      	blx	r4
1000c982:	4b43      	ldr	r3, [pc, #268]	; (1000ca90 <uart_init+0x1a0>)
1000c984:	2204      	movs	r2, #4
1000c986:	601a      	str	r2, [r3, #0]
1000c988:	3204      	adds	r2, #4
1000c98a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c98c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c98e:	2204      	movs	r2, #4
1000c990:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c992:	2b00      	cmp	r3, #0
1000c994:	d152      	bne.n	1000ca3c <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c996:	3302      	adds	r3, #2
1000c998:	4698      	mov	r8, r3
1000c99a:	e04f      	b.n	1000ca3c <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c99c:	8a31      	ldrh	r1, [r6, #16]
1000c99e:	ce01      	ldmia	r6!, {r0}
1000c9a0:	b2c0      	uxtb	r0, r0
1000c9a2:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c9a4:	3401      	adds	r4, #1
1000c9a6:	b2e4      	uxtb	r4, r4
1000c9a8:	4544      	cmp	r4, r8
1000c9aa:	d3f7      	bcc.n	1000c99c <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c9ac:	682b      	ldr	r3, [r5, #0]
1000c9ae:	7d1a      	ldrb	r2, [r3, #20]
1000c9b0:	07d2      	lsls	r2, r2, #31
1000c9b2:	d504      	bpl.n	1000c9be <uart_init+0xce>
1000c9b4:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c9b6:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c9b8:	7d1a      	ldrb	r2, [r3, #20]
1000c9ba:	420a      	tst	r2, r1
1000c9bc:	d1fb      	bne.n	1000c9b6 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c9be:	2100      	movs	r1, #0
1000c9c0:	2220      	movs	r2, #32
1000c9c2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c9c4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c9c6:	1e59      	subs	r1, r3, #1
1000c9c8:	418b      	sbcs	r3, r1
1000c9ca:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c9cc:	793b      	ldrb	r3, [r7, #4]
1000c9ce:	797a      	ldrb	r2, [r7, #5]
1000c9d0:	4313      	orrs	r3, r2
1000c9d2:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c9d4:	79ba      	ldrb	r2, [r7, #6]
1000c9d6:	2a02      	cmp	r2, #2
1000c9d8:	d00d      	beq.n	1000c9f6 <uart_init+0x106>
1000c9da:	b2d1      	uxtb	r1, r2
1000c9dc:	2902      	cmp	r1, #2
1000c9de:	d802      	bhi.n	1000c9e6 <uart_init+0xf6>
1000c9e0:	2a01      	cmp	r2, #1
1000c9e2:	d005      	beq.n	1000c9f0 <uart_init+0x100>
1000c9e4:	e00f      	b.n	1000ca06 <uart_init+0x116>
1000c9e6:	2a03      	cmp	r2, #3
1000c9e8:	d008      	beq.n	1000c9fc <uart_init+0x10c>
1000c9ea:	2a04      	cmp	r2, #4
1000c9ec:	d009      	beq.n	1000ca02 <uart_init+0x112>
1000c9ee:	e00a      	b.n	1000ca06 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c9f0:	2202      	movs	r2, #2
1000c9f2:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c9f4:	e007      	b.n	1000ca06 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c9f6:	2206      	movs	r2, #6
1000c9f8:	4313      	orrs	r3, r2
			break;
1000c9fa:	e004      	b.n	1000ca06 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c9fc:	220a      	movs	r2, #10
1000c9fe:	4313      	orrs	r3, r2
			break;
1000ca00:	e001      	b.n	1000ca06 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000ca02:	220e      	movs	r2, #14
1000ca04:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000ca06:	2220      	movs	r2, #32
1000ca08:	6829      	ldr	r1, [r5, #0]
1000ca0a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000ca0c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000ca0e:	4b24      	ldr	r3, [pc, #144]	; (1000caa0 <uart_init+0x1b0>)
1000ca10:	4798      	blx	r3
1000ca12:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000ca14:	0031      	movs	r1, r6
1000ca16:	4b23      	ldr	r3, [pc, #140]	; (1000caa4 <uart_init+0x1b4>)
1000ca18:	4798      	blx	r3
1000ca1a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000ca1c:	0400      	lsls	r0, r0, #16
1000ca1e:	0c00      	lsrs	r0, r0, #16
1000ca20:	4370      	muls	r0, r6
1000ca22:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000ca24:	0931      	lsrs	r1, r6, #4
1000ca26:	4288      	cmp	r0, r1
1000ca28:	d906      	bls.n	1000ca38 <uart_init+0x148>
1000ca2a:	2300      	movs	r3, #0
		i++;
1000ca2c:	3301      	adds	r3, #1
1000ca2e:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000ca30:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000ca32:	4288      	cmp	r0, r1
1000ca34:	d8fa      	bhi.n	1000ca2c <uart_init+0x13c>
1000ca36:	e007      	b.n	1000ca48 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000ca38:	2300      	movs	r3, #0
1000ca3a:	e005      	b.n	1000ca48 <uart_init+0x158>
1000ca3c:	003e      	movs	r6, r7
1000ca3e:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000ca40:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ca42:	4b19      	ldr	r3, [pc, #100]	; (1000caa8 <uart_init+0x1b8>)
1000ca44:	4699      	mov	r9, r3
1000ca46:	e7a9      	b.n	1000c99c <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000ca48:	2100      	movs	r1, #0
1000ca4a:	2028      	movs	r0, #40	; 0x28
1000ca4c:	682c      	ldr	r4, [r5, #0]
1000ca4e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000ca50:	3301      	adds	r3, #1
1000ca52:	071b      	lsls	r3, r3, #28
1000ca54:	0f5b      	lsrs	r3, r3, #29
1000ca56:	00d2      	lsls	r2, r2, #3
1000ca58:	4313      	orrs	r3, r2
1000ca5a:	b29b      	uxth	r3, r3
1000ca5c:	682a      	ldr	r2, [r5, #0]
1000ca5e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000ca60:	682b      	ldr	r3, [r5, #0]
1000ca62:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000ca64:	682b      	ldr	r3, [r5, #0]
1000ca66:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000ca68:	2000      	movs	r0, #0
1000ca6a:	bc0c      	pop	{r2, r3}
1000ca6c:	4690      	mov	r8, r2
1000ca6e:	4699      	mov	r9, r3
1000ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca72:	46c0      	nop			; (mov r8, r8)
1000ca74:	40004000 	.word	0x40004000
1000ca78:	1000c225 	.word	0x1000c225
1000ca7c:	1000bb5d 	.word	0x1000bb5d
1000ca80:	1001b184 	.word	0x1001b184
1000ca84:	1000c69d 	.word	0x1000c69d
1000ca88:	1000c68d 	.word	0x1000c68d
1000ca8c:	1000c725 	.word	0x1000c725
1000ca90:	e000e100 	.word	0xe000e100
1000ca94:	40005000 	.word	0x40005000
1000ca98:	1000c7b1 	.word	0x1000c7b1
1000ca9c:	1000c839 	.word	0x1000c839
1000caa0:	1000bb51 	.word	0x1000bb51
1000caa4:	10013699 	.word	0x10013699
1000caa8:	1000b7ad 	.word	0x1000b7ad

1000caac <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000caac:	6802      	ldr	r2, [r0, #0]
1000caae:	2001      	movs	r0, #1
1000cab0:	7913      	ldrb	r3, [r2, #4]
1000cab2:	4203      	tst	r3, r0
1000cab4:	d0fc      	beq.n	1000cab0 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000cab6:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000cab8:	2000      	movs	r0, #0
1000caba:	4770      	bx	lr

1000cabc <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000cabc:	6802      	ldr	r2, [r0, #0]
1000cabe:	2001      	movs	r0, #1
1000cac0:	7d13      	ldrb	r3, [r2, #20]
1000cac2:	4203      	tst	r3, r0
1000cac4:	d0fc      	beq.n	1000cac0 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000cac6:	7c13      	ldrb	r3, [r2, #16]
1000cac8:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000caca:	2000      	movs	r0, #0
1000cacc:	4770      	bx	lr
1000cace:	46c0      	nop			; (mov r8, r8)

1000cad0 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000cad0:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000cad2:	2a00      	cmp	r2, #0
1000cad4:	d00d      	beq.n	1000caf2 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000cad6:	330b      	adds	r3, #11
1000cad8:	5cc3      	ldrb	r3, [r0, r3]
1000cada:	b2db      	uxtb	r3, r3
1000cadc:	2b05      	cmp	r3, #5
1000cade:	d008      	beq.n	1000caf2 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000cae0:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000cae2:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000cae4:	2205      	movs	r2, #5
1000cae6:	2322      	movs	r3, #34	; 0x22
1000cae8:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000caea:	6803      	ldr	r3, [r0, #0]
1000caec:	3a04      	subs	r2, #4
1000caee:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000caf0:	2300      	movs	r3, #0
}
1000caf2:	0018      	movs	r0, r3
1000caf4:	4770      	bx	lr
1000caf6:	46c0      	nop			; (mov r8, r8)

1000caf8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000caf8:	0093      	lsls	r3, r2, #2
1000cafa:	18c3      	adds	r3, r0, r3
1000cafc:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000cafe:	2120      	movs	r1, #32
1000cb00:	2301      	movs	r3, #1
1000cb02:	4093      	lsls	r3, r2
1000cb04:	5c42      	ldrb	r2, [r0, r1]
1000cb06:	4313      	orrs	r3, r2
1000cb08:	5443      	strb	r3, [r0, r1]
}
1000cb0a:	4770      	bx	lr

1000cb0c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cb0c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000cb0e:	2221      	movs	r2, #33	; 0x21
1000cb10:	2301      	movs	r3, #1
1000cb12:	408b      	lsls	r3, r1
1000cb14:	5c84      	ldrb	r4, [r0, r2]
1000cb16:	4323      	orrs	r3, r4
1000cb18:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000cb1a:	2901      	cmp	r1, #1
1000cb1c:	d104      	bne.n	1000cb28 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cb1e:	6802      	ldr	r2, [r0, #0]
1000cb20:	7a11      	ldrb	r1, [r2, #8]
1000cb22:	2320      	movs	r3, #32
1000cb24:	430b      	orrs	r3, r1
1000cb26:	7213      	strb	r3, [r2, #8]
	}
}
1000cb28:	bd10      	pop	{r4, pc}
1000cb2a:	46c0      	nop			; (mov r8, r8)

1000cb2c <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cb2c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000cb2e:	2201      	movs	r2, #1
1000cb30:	408a      	lsls	r2, r1
1000cb32:	2421      	movs	r4, #33	; 0x21
1000cb34:	5d03      	ldrb	r3, [r0, r4]
1000cb36:	4393      	bics	r3, r2
1000cb38:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000cb3a:	2901      	cmp	r1, #1
1000cb3c:	d104      	bne.n	1000cb48 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cb3e:	6802      	ldr	r2, [r0, #0]
1000cb40:	7a13      	ldrb	r3, [r2, #8]
1000cb42:	311f      	adds	r1, #31
1000cb44:	438b      	bics	r3, r1
1000cb46:	7213      	strb	r3, [r2, #8]
	}

}
1000cb48:	bd10      	pop	{r4, pc}
1000cb4a:	46c0      	nop			; (mov r8, r8)

1000cb4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000cb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb4e:	4647      	mov	r7, r8
1000cb50:	b480      	push	{r7}
1000cb52:	000c      	movs	r4, r1
1000cb54:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000cb56:	2800      	cmp	r0, #0
1000cb58:	d10d      	bne.n	1000cb76 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000cb5a:	2a00      	cmp	r2, #0
1000cb5c:	dd0e      	ble.n	1000cb7c <_read+0x30>
1000cb5e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000cb60:	4e08      	ldr	r6, [pc, #32]	; (1000cb84 <_read+0x38>)
1000cb62:	4d09      	ldr	r5, [pc, #36]	; (1000cb88 <_read+0x3c>)
1000cb64:	6830      	ldr	r0, [r6, #0]
1000cb66:	0021      	movs	r1, r4
1000cb68:	682b      	ldr	r3, [r5, #0]
1000cb6a:	4798      	blx	r3
		ptr++;
1000cb6c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cb6e:	42a7      	cmp	r7, r4
1000cb70:	d1f8      	bne.n	1000cb64 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000cb72:	4640      	mov	r0, r8
1000cb74:	e003      	b.n	1000cb7e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000cb76:	2001      	movs	r0, #1
1000cb78:	4240      	negs	r0, r0
1000cb7a:	e000      	b.n	1000cb7e <_read+0x32>
	}

	for (; len > 0; --len) {
1000cb7c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000cb7e:	bc04      	pop	{r2}
1000cb80:	4690      	mov	r8, r2
1000cb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb84:	1001b194 	.word	0x1001b194
1000cb88:	1001b18c 	.word	0x1001b18c

1000cb8c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb8e:	4647      	mov	r7, r8
1000cb90:	b480      	push	{r7}
1000cb92:	000e      	movs	r6, r1
1000cb94:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cb96:	3801      	subs	r0, #1
1000cb98:	2802      	cmp	r0, #2
1000cb9a:	d811      	bhi.n	1000cbc0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000cb9c:	2a00      	cmp	r2, #0
1000cb9e:	d012      	beq.n	1000cbc6 <_write+0x3a>
1000cba0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000cba2:	4b0c      	ldr	r3, [pc, #48]	; (1000cbd4 <_write+0x48>)
1000cba4:	4698      	mov	r8, r3
1000cba6:	4f0c      	ldr	r7, [pc, #48]	; (1000cbd8 <_write+0x4c>)
1000cba8:	4643      	mov	r3, r8
1000cbaa:	6818      	ldr	r0, [r3, #0]
1000cbac:	5d31      	ldrb	r1, [r6, r4]
1000cbae:	683b      	ldr	r3, [r7, #0]
1000cbb0:	4798      	blx	r3
1000cbb2:	2800      	cmp	r0, #0
1000cbb4:	db09      	blt.n	1000cbca <_write+0x3e>
			return -1;
		}
		++nChars;
1000cbb6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000cbb8:	42a5      	cmp	r5, r4
1000cbba:	d1f5      	bne.n	1000cba8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000cbbc:	0020      	movs	r0, r4
1000cbbe:	e006      	b.n	1000cbce <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000cbc0:	2001      	movs	r0, #1
1000cbc2:	4240      	negs	r0, r0
1000cbc4:	e003      	b.n	1000cbce <_write+0x42>
	}

	for (; len != 0; --len) {
1000cbc6:	2000      	movs	r0, #0
1000cbc8:	e001      	b.n	1000cbce <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000cbca:	2001      	movs	r0, #1
1000cbcc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000cbce:	bc04      	pop	{r2}
1000cbd0:	4690      	mov	r8, r2
1000cbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbd4:	1001b194 	.word	0x1001b194
1000cbd8:	1001b190 	.word	0x1001b190

1000cbdc <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000cbdc:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000cbde:	4804      	ldr	r0, [pc, #16]	; (1000cbf0 <ble_undefined_event_handler+0x14>)
1000cbe0:	4b04      	ldr	r3, [pc, #16]	; (1000cbf4 <ble_undefined_event_handler+0x18>)
1000cbe2:	4798      	blx	r3
1000cbe4:	4804      	ldr	r0, [pc, #16]	; (1000cbf8 <ble_undefined_event_handler+0x1c>)
1000cbe6:	4b05      	ldr	r3, [pc, #20]	; (1000cbfc <ble_undefined_event_handler+0x20>)
1000cbe8:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000cbea:	2000      	movs	r0, #0
1000cbec:	bd10      	pop	{r4, pc}
1000cbee:	46c0      	nop			; (mov r8, r8)
1000cbf0:	10017888 	.word	0x10017888
1000cbf4:	10016949 	.word	0x10016949
1000cbf8:	100185e4 	.word	0x100185e4
1000cbfc:	10016829 	.word	0x10016829

1000cc00 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000cc00:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000cc02:	7800      	ldrb	r0, [r0, #0]
1000cc04:	2800      	cmp	r0, #0
1000cc06:	d006      	beq.n	1000cc16 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000cc08:	4803      	ldr	r0, [pc, #12]	; (1000cc18 <ble_scan_report_handler+0x18>)
1000cc0a:	4b04      	ldr	r3, [pc, #16]	; (1000cc1c <ble_scan_report_handler+0x1c>)
1000cc0c:	4798      	blx	r3
1000cc0e:	4804      	ldr	r0, [pc, #16]	; (1000cc20 <ble_scan_report_handler+0x20>)
1000cc10:	4b04      	ldr	r3, [pc, #16]	; (1000cc24 <ble_scan_report_handler+0x24>)
1000cc12:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000cc14:	20e2      	movs	r0, #226	; 0xe2
}
1000cc16:	bd10      	pop	{r4, pc}
1000cc18:	10017888 	.word	0x10017888
1000cc1c:	10016949 	.word	0x10016949
1000cc20:	10018600 	.word	0x10018600
1000cc24:	10016829 	.word	0x10016829

1000cc28 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000cc28:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000cc2a:	7800      	ldrb	r0, [r0, #0]
1000cc2c:	2800      	cmp	r0, #0
1000cc2e:	d006      	beq.n	1000cc3e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000cc30:	4803      	ldr	r0, [pc, #12]	; (1000cc40 <ble_adv_report_handler+0x18>)
1000cc32:	4b04      	ldr	r3, [pc, #16]	; (1000cc44 <ble_adv_report_handler+0x1c>)
1000cc34:	4798      	blx	r3
1000cc36:	4804      	ldr	r0, [pc, #16]	; (1000cc48 <ble_adv_report_handler+0x20>)
1000cc38:	4b04      	ldr	r3, [pc, #16]	; (1000cc4c <ble_adv_report_handler+0x24>)
1000cc3a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000cc3c:	20e2      	movs	r0, #226	; 0xe2
}
1000cc3e:	bd10      	pop	{r4, pc}
1000cc40:	10017888 	.word	0x10017888
1000cc44:	10016949 	.word	0x10016949
1000cc48:	10018614 	.word	0x10018614
1000cc4c:	10016829 	.word	0x10016829

1000cc50 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000cc50:	b510      	push	{r4, lr}
1000cc52:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000cc54:	4804      	ldr	r0, [pc, #16]	; (1000cc68 <ble_mtu_changed_indication_handler+0x18>)
1000cc56:	4b05      	ldr	r3, [pc, #20]	; (1000cc6c <ble_mtu_changed_indication_handler+0x1c>)
1000cc58:	4798      	blx	r3
1000cc5a:	8862      	ldrh	r2, [r4, #2]
1000cc5c:	8821      	ldrh	r1, [r4, #0]
1000cc5e:	4804      	ldr	r0, [pc, #16]	; (1000cc70 <ble_mtu_changed_indication_handler+0x20>)
1000cc60:	4b04      	ldr	r3, [pc, #16]	; (1000cc74 <ble_mtu_changed_indication_handler+0x24>)
1000cc62:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000cc64:	2000      	movs	r0, #0
1000cc66:	bd10      	pop	{r4, pc}
1000cc68:	10017888 	.word	0x10017888
1000cc6c:	10016949 	.word	0x10016949
1000cc70:	10018628 	.word	0x10018628
1000cc74:	10016829 	.word	0x10016829

1000cc78 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000cc78:	b570      	push	{r4, r5, r6, lr}
1000cc7a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000cc7c:	78c5      	ldrb	r5, [r0, #3]
1000cc7e:	2d00      	cmp	r5, #0
1000cc80:	d108      	bne.n	1000cc94 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000cc82:	480a      	ldr	r0, [pc, #40]	; (1000ccac <ble_mtu_changed_cmd_complete_handler+0x34>)
1000cc84:	4b0a      	ldr	r3, [pc, #40]	; (1000ccb0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000cc86:	4798      	blx	r3
1000cc88:	78a2      	ldrb	r2, [r4, #2]
1000cc8a:	8821      	ldrh	r1, [r4, #0]
1000cc8c:	4809      	ldr	r0, [pc, #36]	; (1000ccb4 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000cc8e:	4b0a      	ldr	r3, [pc, #40]	; (1000ccb8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000cc90:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000cc92:	e008      	b.n	1000cca6 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000cc94:	4805      	ldr	r0, [pc, #20]	; (1000ccac <ble_mtu_changed_cmd_complete_handler+0x34>)
1000cc96:	4b06      	ldr	r3, [pc, #24]	; (1000ccb0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000cc98:	4798      	blx	r3
1000cc9a:	78a2      	ldrb	r2, [r4, #2]
1000cc9c:	8821      	ldrh	r1, [r4, #0]
1000cc9e:	4807      	ldr	r0, [pc, #28]	; (1000ccbc <ble_mtu_changed_cmd_complete_handler+0x44>)
1000cca0:	4b05      	ldr	r3, [pc, #20]	; (1000ccb8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000cca2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000cca4:	25e2      	movs	r5, #226	; 0xe2
}
1000cca6:	0028      	movs	r0, r5
1000cca8:	bd70      	pop	{r4, r5, r6, pc}
1000ccaa:	46c0      	nop			; (mov r8, r8)
1000ccac:	10017888 	.word	0x10017888
1000ccb0:	10016949 	.word	0x10016949
1000ccb4:	10018660 	.word	0x10018660
1000ccb8:	10016829 	.word	0x10016829
1000ccbc:	10018690 	.word	0x10018690

1000ccc0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000ccc0:	b570      	push	{r4, r5, r6, lr}
1000ccc2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ccc4:	78c5      	ldrb	r5, [r0, #3]
1000ccc6:	2d00      	cmp	r5, #0
1000ccc8:	d108      	bne.n	1000ccdc <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000ccca:	480a      	ldr	r0, [pc, #40]	; (1000ccf4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000cccc:	4b0a      	ldr	r3, [pc, #40]	; (1000ccf8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000ccce:	4798      	blx	r3
1000ccd0:	78a2      	ldrb	r2, [r4, #2]
1000ccd2:	8821      	ldrh	r1, [r4, #0]
1000ccd4:	4809      	ldr	r0, [pc, #36]	; (1000ccfc <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000ccd6:	4b0a      	ldr	r3, [pc, #40]	; (1000cd00 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000ccd8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000ccda:	e008      	b.n	1000ccee <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000ccdc:	4805      	ldr	r0, [pc, #20]	; (1000ccf4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000ccde:	4b06      	ldr	r3, [pc, #24]	; (1000ccf8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000cce0:	4798      	blx	r3
1000cce2:	78a2      	ldrb	r2, [r4, #2]
1000cce4:	8821      	ldrh	r1, [r4, #0]
1000cce6:	4807      	ldr	r0, [pc, #28]	; (1000cd04 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000cce8:	4b05      	ldr	r3, [pc, #20]	; (1000cd00 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000ccea:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ccec:	25e2      	movs	r5, #226	; 0xe2
}
1000ccee:	0028      	movs	r0, r5
1000ccf0:	bd70      	pop	{r4, r5, r6, pc}
1000ccf2:	46c0      	nop			; (mov r8, r8)
1000ccf4:	10017888 	.word	0x10017888
1000ccf8:	10016949 	.word	0x10016949
1000ccfc:	100186c8 	.word	0x100186c8
1000cd00:	10016829 	.word	0x10016829
1000cd04:	10018704 	.word	0x10018704

1000cd08 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cd0a:	0006      	movs	r6, r0
1000cd0c:	4c1d      	ldr	r4, [pc, #116]	; (1000cd84 <ble_disconnected_state_handler+0x7c>)
1000cd0e:	239b      	movs	r3, #155	; 0x9b
1000cd10:	009b      	lsls	r3, r3, #2
1000cd12:	18e7      	adds	r7, r4, r3
1000cd14:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000cd16:	0023      	movs	r3, r4
1000cd18:	3b56      	subs	r3, #86	; 0x56
1000cd1a:	881a      	ldrh	r2, [r3, #0]
1000cd1c:	8833      	ldrh	r3, [r6, #0]
1000cd1e:	429a      	cmp	r2, r3
1000cd20:	d122      	bne.n	1000cd68 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000cd22:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000cd24:	2b05      	cmp	r3, #5
1000cd26:	d001      	beq.n	1000cd2c <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000cd28:	2b08      	cmp	r3, #8
1000cd2a:	d102      	bne.n	1000cd32 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000cd2c:	2301      	movs	r3, #1
1000cd2e:	702b      	strb	r3, [r5, #0]
1000cd30:	e01a      	b.n	1000cd68 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000cd32:	2b07      	cmp	r3, #7
1000cd34:	d80f      	bhi.n	1000cd56 <ble_disconnected_state_handler+0x4e>
1000cd36:	009b      	lsls	r3, r3, #2
1000cd38:	4a13      	ldr	r2, [pc, #76]	; (1000cd88 <ble_disconnected_state_handler+0x80>)
1000cd3a:	58d3      	ldr	r3, [r2, r3]
1000cd3c:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cd3e:	2300      	movs	r3, #0
1000cd40:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000cd42:	4b12      	ldr	r3, [pc, #72]	; (1000cd8c <ble_disconnected_state_handler+0x84>)
1000cd44:	781b      	ldrb	r3, [r3, #0]
1000cd46:	2b00      	cmp	r3, #0
1000cd48:	d00e      	beq.n	1000cd68 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000cd4a:	4a10      	ldr	r2, [pc, #64]	; (1000cd8c <ble_disconnected_state_handler+0x84>)
1000cd4c:	7813      	ldrb	r3, [r2, #0]
1000cd4e:	3b01      	subs	r3, #1
1000cd50:	b2db      	uxtb	r3, r3
1000cd52:	7013      	strb	r3, [r2, #0]
1000cd54:	e008      	b.n	1000cd68 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000cd56:	480e      	ldr	r0, [pc, #56]	; (1000cd90 <ble_disconnected_state_handler+0x88>)
1000cd58:	4b0e      	ldr	r3, [pc, #56]	; (1000cd94 <ble_disconnected_state_handler+0x8c>)
1000cd5a:	4798      	blx	r3
1000cd5c:	7829      	ldrb	r1, [r5, #0]
1000cd5e:	480e      	ldr	r0, [pc, #56]	; (1000cd98 <ble_disconnected_state_handler+0x90>)
1000cd60:	4b0e      	ldr	r3, [pc, #56]	; (1000cd9c <ble_disconnected_state_handler+0x94>)
1000cd62:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cd64:	2300      	movs	r3, #0
1000cd66:	702b      	strb	r3, [r5, #0]
1000cd68:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd6a:	42bc      	cmp	r4, r7
1000cd6c:	d1d2      	bne.n	1000cd14 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000cd6e:	4808      	ldr	r0, [pc, #32]	; (1000cd90 <ble_disconnected_state_handler+0x88>)
1000cd70:	4b08      	ldr	r3, [pc, #32]	; (1000cd94 <ble_disconnected_state_handler+0x8c>)
1000cd72:	4798      	blx	r3
1000cd74:	8832      	ldrh	r2, [r6, #0]
1000cd76:	78b1      	ldrb	r1, [r6, #2]
1000cd78:	4809      	ldr	r0, [pc, #36]	; (1000cda0 <ble_disconnected_state_handler+0x98>)
1000cd7a:	4b08      	ldr	r3, [pc, #32]	; (1000cd9c <ble_disconnected_state_handler+0x94>)
1000cd7c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000cd7e:	2000      	movs	r0, #0
1000cd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cd82:	46c0      	nop			; (mov r8, r8)
1000cd84:	1001b20e 	.word	0x1001b20e
1000cd88:	10018480 	.word	0x10018480
1000cd8c:	1001b41c 	.word	0x1001b41c
1000cd90:	10017888 	.word	0x10017888
1000cd94:	10016949 	.word	0x10016949
1000cd98:	10018740 	.word	0x10018740
1000cd9c:	10016829 	.word	0x10016829
1000cda0:	10018758 	.word	0x10018758

1000cda4 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000cda4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000cda6:	4804      	ldr	r0, [pc, #16]	; (1000cdb8 <ble_conn_param_update+0x14>)
1000cda8:	4b04      	ldr	r3, [pc, #16]	; (1000cdbc <ble_conn_param_update+0x18>)
1000cdaa:	4798      	blx	r3
1000cdac:	4804      	ldr	r0, [pc, #16]	; (1000cdc0 <ble_conn_param_update+0x1c>)
1000cdae:	4b05      	ldr	r3, [pc, #20]	; (1000cdc4 <ble_conn_param_update+0x20>)
1000cdb0:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000cdb2:	2000      	movs	r0, #0
1000cdb4:	bd10      	pop	{r4, pc}
1000cdb6:	46c0      	nop			; (mov r8, r8)
1000cdb8:	10017888 	.word	0x10017888
1000cdbc:	10016949 	.word	0x10016949
1000cdc0:	10018788 	.word	0x10018788
1000cdc4:	10016829 	.word	0x10016829

1000cdc8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cdca:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cdcc:	8801      	ldrh	r1, [r0, #0]
1000cdce:	4b28      	ldr	r3, [pc, #160]	; (1000ce70 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdd0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cdd2:	891a      	ldrh	r2, [r3, #8]
1000cdd4:	428a      	cmp	r2, r1
1000cdd6:	d104      	bne.n	1000cde2 <ble_encryption_status_change_handler+0x1a>
1000cdd8:	001a      	movs	r2, r3
1000cdda:	325e      	adds	r2, #94	; 0x5e
1000cddc:	7812      	ldrb	r2, [r2, #0]
1000cdde:	2a06      	cmp	r2, #6
1000cde0:	d02e      	beq.n	1000ce40 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cde2:	3401      	adds	r4, #1
1000cde4:	b2e4      	uxtb	r4, r4
1000cde6:	337c      	adds	r3, #124	; 0x7c
1000cde8:	2c05      	cmp	r4, #5
1000cdea:	d1f2      	bne.n	1000cdd2 <ble_encryption_status_change_handler+0xa>
1000cdec:	e039      	b.n	1000ce62 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000cdee:	4920      	ldr	r1, [pc, #128]	; (1000ce70 <ble_encryption_status_change_handler+0xa8>)
1000cdf0:	0163      	lsls	r3, r4, #5
1000cdf2:	1b1a      	subs	r2, r3, r4
1000cdf4:	0092      	lsls	r2, r2, #2
1000cdf6:	188a      	adds	r2, r1, r2
1000cdf8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000cdfa:	0014      	movs	r4, r2
1000cdfc:	345e      	adds	r4, #94	; 0x5e
1000cdfe:	2307      	movs	r3, #7
1000ce00:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000ce02:	481c      	ldr	r0, [pc, #112]	; (1000ce74 <ble_encryption_status_change_handler+0xac>)
1000ce04:	4b1c      	ldr	r3, [pc, #112]	; (1000ce78 <ble_encryption_status_change_handler+0xb0>)
1000ce06:	4798      	blx	r3
1000ce08:	481c      	ldr	r0, [pc, #112]	; (1000ce7c <ble_encryption_status_change_handler+0xb4>)
1000ce0a:	4b1d      	ldr	r3, [pc, #116]	; (1000ce80 <ble_encryption_status_change_handler+0xb8>)
1000ce0c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ce0e:	25e2      	movs	r5, #226	; 0xe2
1000ce10:	e02b      	b.n	1000ce6a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000ce12:	4818      	ldr	r0, [pc, #96]	; (1000ce74 <ble_encryption_status_change_handler+0xac>)
1000ce14:	4b18      	ldr	r3, [pc, #96]	; (1000ce78 <ble_encryption_status_change_handler+0xb0>)
1000ce16:	4798      	blx	r3
1000ce18:	481a      	ldr	r0, [pc, #104]	; (1000ce84 <ble_encryption_status_change_handler+0xbc>)
1000ce1a:	4b19      	ldr	r3, [pc, #100]	; (1000ce80 <ble_encryption_status_change_handler+0xb8>)
1000ce1c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000ce1e:	4914      	ldr	r1, [pc, #80]	; (1000ce70 <ble_encryption_status_change_handler+0xa8>)
1000ce20:	0163      	lsls	r3, r4, #5
1000ce22:	1b1a      	subs	r2, r3, r4
1000ce24:	0092      	lsls	r2, r2, #2
1000ce26:	188a      	adds	r2, r1, r2
1000ce28:	0010      	movs	r0, r2
1000ce2a:	305e      	adds	r0, #94	; 0x5e
1000ce2c:	2708      	movs	r7, #8
1000ce2e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000ce30:	78f0      	ldrb	r0, [r6, #3]
1000ce32:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000ce34:	78b2      	ldrb	r2, [r6, #2]
1000ce36:	1b1c      	subs	r4, r3, r4
1000ce38:	00a4      	lsls	r4, r4, #2
1000ce3a:	190c      	adds	r4, r1, r4
1000ce3c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000ce3e:	e014      	b.n	1000ce6a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000ce40:	78b5      	ldrb	r5, [r6, #2]
1000ce42:	2d00      	cmp	r5, #0
1000ce44:	d0e5      	beq.n	1000ce12 <ble_encryption_status_change_handler+0x4a>
1000ce46:	e7d2      	b.n	1000cdee <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000ce48:	4e0a      	ldr	r6, [pc, #40]	; (1000ce74 <ble_encryption_status_change_handler+0xac>)
1000ce4a:	0030      	movs	r0, r6
1000ce4c:	4d0a      	ldr	r5, [pc, #40]	; (1000ce78 <ble_encryption_status_change_handler+0xb0>)
1000ce4e:	47a8      	blx	r5
1000ce50:	480c      	ldr	r0, [pc, #48]	; (1000ce84 <ble_encryption_status_change_handler+0xbc>)
1000ce52:	4c0b      	ldr	r4, [pc, #44]	; (1000ce80 <ble_encryption_status_change_handler+0xb8>)
1000ce54:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000ce56:	0030      	movs	r0, r6
1000ce58:	47a8      	blx	r5
1000ce5a:	480b      	ldr	r0, [pc, #44]	; (1000ce88 <ble_encryption_status_change_handler+0xc0>)
1000ce5c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000ce5e:	25e2      	movs	r5, #226	; 0xe2
1000ce60:	e003      	b.n	1000ce6a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000ce62:	78b5      	ldrb	r5, [r6, #2]
1000ce64:	2d00      	cmp	r5, #0
1000ce66:	d1c2      	bne.n	1000cdee <ble_encryption_status_change_handler+0x26>
1000ce68:	e7ee      	b.n	1000ce48 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000ce6a:	0028      	movs	r0, r5
1000ce6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ce6e:	46c0      	nop			; (mov r8, r8)
1000ce70:	1001b1b0 	.word	0x1001b1b0
1000ce74:	10017888 	.word	0x10017888
1000ce78:	10016949 	.word	0x10016949
1000ce7c:	100187a4 	.word	0x100187a4
1000ce80:	10016829 	.word	0x10016829
1000ce84:	100187b8 	.word	0x100187b8
1000ce88:	100187dc 	.word	0x100187dc

1000ce8c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000ce8c:	b530      	push	{r4, r5, lr}
1000ce8e:	b085      	sub	sp, #20
1000ce90:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000ce92:	4b1f      	ldr	r3, [pc, #124]	; (1000cf10 <ble_scan_info_handler+0x84>)
1000ce94:	781b      	ldrb	r3, [r3, #0]
1000ce96:	b2db      	uxtb	r3, r3
1000ce98:	2b13      	cmp	r3, #19
1000ce9a:	d824      	bhi.n	1000cee6 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000ce9c:	4d1c      	ldr	r5, [pc, #112]	; (1000cf10 <ble_scan_info_handler+0x84>)
1000ce9e:	782b      	ldrb	r3, [r5, #0]
1000cea0:	b2db      	uxtb	r3, r3
1000cea2:	0098      	lsls	r0, r3, #2
1000cea4:	18c0      	adds	r0, r0, r3
1000cea6:	00c0      	lsls	r0, r0, #3
1000cea8:	18c3      	adds	r3, r0, r3
1000ceaa:	481a      	ldr	r0, [pc, #104]	; (1000cf14 <ble_scan_info_handler+0x88>)
1000ceac:	1818      	adds	r0, r3, r0
1000ceae:	2229      	movs	r2, #41	; 0x29
1000ceb0:	0021      	movs	r1, r4
1000ceb2:	4b19      	ldr	r3, [pc, #100]	; (1000cf18 <ble_scan_info_handler+0x8c>)
1000ceb4:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000ceb6:	4819      	ldr	r0, [pc, #100]	; (1000cf1c <ble_scan_info_handler+0x90>)
1000ceb8:	4b19      	ldr	r3, [pc, #100]	; (1000cf20 <ble_scan_info_handler+0x94>)
1000ceba:	4798      	blx	r3
1000cebc:	7829      	ldrb	r1, [r5, #0]
1000cebe:	b2c9      	uxtb	r1, r1
1000cec0:	79a3      	ldrb	r3, [r4, #6]
1000cec2:	79e2      	ldrb	r2, [r4, #7]
1000cec4:	78a0      	ldrb	r0, [r4, #2]
1000cec6:	9003      	str	r0, [sp, #12]
1000cec8:	78e0      	ldrb	r0, [r4, #3]
1000ceca:	9002      	str	r0, [sp, #8]
1000cecc:	7920      	ldrb	r0, [r4, #4]
1000cece:	9001      	str	r0, [sp, #4]
1000ced0:	7960      	ldrb	r0, [r4, #5]
1000ced2:	9000      	str	r0, [sp, #0]
1000ced4:	4813      	ldr	r0, [pc, #76]	; (1000cf24 <ble_scan_info_handler+0x98>)
1000ced6:	4c14      	ldr	r4, [pc, #80]	; (1000cf28 <ble_scan_info_handler+0x9c>)
1000ced8:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000ceda:	782b      	ldrb	r3, [r5, #0]
1000cedc:	3301      	adds	r3, #1
1000cede:	b2db      	uxtb	r3, r3
1000cee0:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000cee2:	2300      	movs	r3, #0
1000cee4:	e011      	b.n	1000cf0a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cee6:	480d      	ldr	r0, [pc, #52]	; (1000cf1c <ble_scan_info_handler+0x90>)
1000cee8:	4b0d      	ldr	r3, [pc, #52]	; (1000cf20 <ble_scan_info_handler+0x94>)
1000ceea:	4798      	blx	r3
1000ceec:	480f      	ldr	r0, [pc, #60]	; (1000cf2c <ble_scan_info_handler+0xa0>)
1000ceee:	4b0e      	ldr	r3, [pc, #56]	; (1000cf28 <ble_scan_info_handler+0x9c>)
1000cef0:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cef2:	4b0f      	ldr	r3, [pc, #60]	; (1000cf30 <ble_scan_info_handler+0xa4>)
1000cef4:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cef6:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cef8:	2800      	cmp	r0, #0
1000cefa:	d006      	beq.n	1000cf0a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000cefc:	4807      	ldr	r0, [pc, #28]	; (1000cf1c <ble_scan_info_handler+0x90>)
1000cefe:	4b08      	ldr	r3, [pc, #32]	; (1000cf20 <ble_scan_info_handler+0x94>)
1000cf00:	4798      	blx	r3
1000cf02:	480c      	ldr	r0, [pc, #48]	; (1000cf34 <ble_scan_info_handler+0xa8>)
1000cf04:	4b08      	ldr	r3, [pc, #32]	; (1000cf28 <ble_scan_info_handler+0x9c>)
1000cf06:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cf08:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000cf0a:	0018      	movs	r0, r3
1000cf0c:	b005      	add	sp, #20
1000cf0e:	bd30      	pop	{r4, r5, pc}
1000cf10:	10019cc0 	.word	0x10019cc0
1000cf14:	1001b494 	.word	0x1001b494
1000cf18:	100166cf 	.word	0x100166cf
1000cf1c:	10017888 	.word	0x10017888
1000cf20:	10016949 	.word	0x10016949
1000cf24:	10018804 	.word	0x10018804
1000cf28:	10016829 	.word	0x10016829
1000cf2c:	10018840 	.word	0x10018840
1000cf30:	1000fc31 	.word	0x1000fc31
1000cf34:	10018878 	.word	0x10018878

1000cf38 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf3a:	465f      	mov	r7, fp
1000cf3c:	4656      	mov	r6, sl
1000cf3e:	464d      	mov	r5, r9
1000cf40:	4644      	mov	r4, r8
1000cf42:	b4f0      	push	{r4, r5, r6, r7}
1000cf44:	b083      	sub	sp, #12
1000cf46:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cf48:	8841      	ldrh	r1, [r0, #2]
1000cf4a:	4b59      	ldr	r3, [pc, #356]	; (1000d0b0 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf4c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cf4e:	891a      	ldrh	r2, [r3, #8]
1000cf50:	428a      	cmp	r2, r1
1000cf52:	d105      	bne.n	1000cf60 <ble_pair_done_handler+0x28>
1000cf54:	001a      	movs	r2, r3
1000cf56:	325e      	adds	r2, #94	; 0x5e
1000cf58:	7812      	ldrb	r2, [r2, #0]
1000cf5a:	2a03      	cmp	r2, #3
1000cf5c:	d100      	bne.n	1000cf60 <ble_pair_done_handler+0x28>
1000cf5e:	e09a      	b.n	1000d096 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf60:	3401      	adds	r4, #1
1000cf62:	b2e4      	uxtb	r4, r4
1000cf64:	337c      	adds	r3, #124	; 0x7c
1000cf66:	2c05      	cmp	r4, #5
1000cf68:	d1f1      	bne.n	1000cf4e <ble_pair_done_handler+0x16>
1000cf6a:	e057      	b.n	1000d01c <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000cf6c:	7821      	ldrb	r1, [r4, #0]
1000cf6e:	0030      	movs	r0, r6
1000cf70:	47b8      	blx	r7
1000cf72:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000cf74:	454c      	cmp	r4, r9
1000cf76:	d1f9      	bne.n	1000cf6c <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000cf78:	484e      	ldr	r0, [pc, #312]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000cf7a:	4b4f      	ldr	r3, [pc, #316]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000cf7c:	4798      	blx	r3
1000cf7e:	484f      	ldr	r0, [pc, #316]	; (1000d0bc <ble_pair_done_handler+0x184>)
1000cf80:	4b4f      	ldr	r3, [pc, #316]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cf82:	4798      	blx	r3
1000cf84:	002e      	movs	r6, r5
1000cf86:	3622      	adds	r6, #34	; 0x22
1000cf88:	002c      	movs	r4, r5
1000cf8a:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000cf8c:	4f4c      	ldr	r7, [pc, #304]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cf8e:	7831      	ldrb	r1, [r6, #0]
1000cf90:	484c      	ldr	r0, [pc, #304]	; (1000d0c4 <ble_pair_done_handler+0x18c>)
1000cf92:	47b8      	blx	r7
1000cf94:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000cf96:	42a6      	cmp	r6, r4
1000cf98:	d1f9      	bne.n	1000cf8e <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000cf9a:	4846      	ldr	r0, [pc, #280]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000cf9c:	4b46      	ldr	r3, [pc, #280]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000cf9e:	4798      	blx	r3
1000cfa0:	4849      	ldr	r0, [pc, #292]	; (1000d0c8 <ble_pair_done_handler+0x190>)
1000cfa2:	4b47      	ldr	r3, [pc, #284]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cfa4:	4798      	blx	r3
1000cfa6:	3542      	adds	r5, #66	; 0x42
1000cfa8:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000cfaa:	4e46      	ldr	r6, [pc, #280]	; (1000d0c4 <ble_pair_done_handler+0x18c>)
1000cfac:	4d44      	ldr	r5, [pc, #272]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cfae:	7821      	ldrb	r1, [r4, #0]
1000cfb0:	0030      	movs	r0, r6
1000cfb2:	47a8      	blx	r5
1000cfb4:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000cfb6:	42bc      	cmp	r4, r7
1000cfb8:	d1f9      	bne.n	1000cfae <ble_pair_done_handler+0x76>
1000cfba:	e071      	b.n	1000d0a0 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000cfbc:	0163      	lsls	r3, r4, #5
1000cfbe:	1b1c      	subs	r4, r3, r4
1000cfc0:	00a4      	lsls	r4, r4, #2
1000cfc2:	4b3b      	ldr	r3, [pc, #236]	; (1000d0b0 <ble_pair_done_handler+0x178>)
1000cfc4:	191c      	adds	r4, r3, r4
1000cfc6:	345e      	adds	r4, #94	; 0x5e
1000cfc8:	7823      	ldrb	r3, [r4, #0]
1000cfca:	2b01      	cmp	r3, #1
1000cfcc:	d915      	bls.n	1000cffa <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000cfce:	4839      	ldr	r0, [pc, #228]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000cfd0:	4b39      	ldr	r3, [pc, #228]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000cfd2:	4798      	blx	r3
1000cfd4:	483d      	ldr	r0, [pc, #244]	; (1000d0cc <ble_pair_done_handler+0x194>)
1000cfd6:	4b3a      	ldr	r3, [pc, #232]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cfd8:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000cfda:	8868      	ldrh	r0, [r5, #2]
1000cfdc:	2113      	movs	r1, #19
1000cfde:	4b3c      	ldr	r3, [pc, #240]	; (1000d0d0 <ble_pair_done_handler+0x198>)
1000cfe0:	4798      	blx	r3
1000cfe2:	9001      	str	r0, [sp, #4]
1000cfe4:	2800      	cmp	r0, #0
1000cfe6:	d05b      	beq.n	1000d0a0 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000cfe8:	4832      	ldr	r0, [pc, #200]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000cfea:	4b33      	ldr	r3, [pc, #204]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000cfec:	4798      	blx	r3
1000cfee:	4839      	ldr	r0, [pc, #228]	; (1000d0d4 <ble_pair_done_handler+0x19c>)
1000cff0:	4b33      	ldr	r3, [pc, #204]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000cff2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cff4:	23e2      	movs	r3, #226	; 0xe2
1000cff6:	9301      	str	r3, [sp, #4]
1000cff8:	e052      	b.n	1000d0a0 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000cffa:	2300      	movs	r3, #0
1000cffc:	9301      	str	r3, [sp, #4]
1000cffe:	e04f      	b.n	1000d0a0 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d000:	4e2c      	ldr	r6, [pc, #176]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000d002:	0030      	movs	r0, r6
1000d004:	4d2c      	ldr	r5, [pc, #176]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000d006:	47a8      	blx	r5
1000d008:	4833      	ldr	r0, [pc, #204]	; (1000d0d8 <ble_pair_done_handler+0x1a0>)
1000d00a:	4c2d      	ldr	r4, [pc, #180]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000d00c:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d00e:	0030      	movs	r0, r6
1000d010:	47a8      	blx	r5
1000d012:	4832      	ldr	r0, [pc, #200]	; (1000d0dc <ble_pair_done_handler+0x1a4>)
1000d014:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d016:	23e2      	movs	r3, #226	; 0xe2
1000d018:	9301      	str	r3, [sp, #4]
1000d01a:	e041      	b.n	1000d0a0 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d01c:	792b      	ldrb	r3, [r5, #4]
1000d01e:	2b00      	cmp	r3, #0
1000d020:	d1cc      	bne.n	1000cfbc <ble_pair_done_handler+0x84>
1000d022:	e7ed      	b.n	1000d000 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d024:	4823      	ldr	r0, [pc, #140]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000d026:	4b24      	ldr	r3, [pc, #144]	; (1000d0b8 <ble_pair_done_handler+0x180>)
1000d028:	469b      	mov	fp, r3
1000d02a:	4798      	blx	r3
1000d02c:	482a      	ldr	r0, [pc, #168]	; (1000d0d8 <ble_pair_done_handler+0x1a0>)
1000d02e:	4b24      	ldr	r3, [pc, #144]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000d030:	469a      	mov	sl, r3
1000d032:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d034:	782a      	ldrb	r2, [r5, #0]
1000d036:	4b1e      	ldr	r3, [pc, #120]	; (1000d0b0 <ble_pair_done_handler+0x178>)
1000d038:	4698      	mov	r8, r3
1000d03a:	0167      	lsls	r7, r4, #5
1000d03c:	1b3b      	subs	r3, r7, r4
1000d03e:	009b      	lsls	r3, r3, #2
1000d040:	4443      	add	r3, r8
1000d042:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d044:	792a      	ldrb	r2, [r5, #4]
1000d046:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d048:	335e      	adds	r3, #94	; 0x5e
1000d04a:	2205      	movs	r2, #5
1000d04c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d04e:	1b38      	subs	r0, r7, r4
1000d050:	0080      	lsls	r0, r0, #2
1000d052:	4440      	add	r0, r8
1000d054:	3036      	adds	r0, #54	; 0x36
1000d056:	320b      	adds	r2, #11
1000d058:	0029      	movs	r1, r5
1000d05a:	3122      	adds	r1, #34	; 0x22
1000d05c:	4b20      	ldr	r3, [pc, #128]	; (1000d0e0 <ble_pair_done_handler+0x1a8>)
1000d05e:	4699      	mov	r9, r3
1000d060:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d062:	1b38      	subs	r0, r7, r4
1000d064:	0080      	lsls	r0, r0, #2
1000d066:	4440      	add	r0, r8
1000d068:	3046      	adds	r0, #70	; 0x46
1000d06a:	2217      	movs	r2, #23
1000d06c:	0029      	movs	r1, r5
1000d06e:	3132      	adds	r1, #50	; 0x32
1000d070:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d072:	1b38      	subs	r0, r7, r4
1000d074:	0080      	lsls	r0, r0, #2
1000d076:	4440      	add	r0, r8
1000d078:	301a      	adds	r0, #26
1000d07a:	1dac      	adds	r4, r5, #6
1000d07c:	221c      	movs	r2, #28
1000d07e:	0021      	movs	r1, r4
1000d080:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000d082:	480c      	ldr	r0, [pc, #48]	; (1000d0b4 <ble_pair_done_handler+0x17c>)
1000d084:	47d8      	blx	fp
1000d086:	4817      	ldr	r0, [pc, #92]	; (1000d0e4 <ble_pair_done_handler+0x1ac>)
1000d088:	47d0      	blx	sl
1000d08a:	2316      	movs	r3, #22
1000d08c:	4699      	mov	r9, r3
1000d08e:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d090:	4e0c      	ldr	r6, [pc, #48]	; (1000d0c4 <ble_pair_done_handler+0x18c>)
1000d092:	4f0b      	ldr	r7, [pc, #44]	; (1000d0c0 <ble_pair_done_handler+0x188>)
1000d094:	e76a      	b.n	1000cf6c <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d096:	792b      	ldrb	r3, [r5, #4]
1000d098:	9301      	str	r3, [sp, #4]
1000d09a:	2b00      	cmp	r3, #0
1000d09c:	d0c2      	beq.n	1000d024 <ble_pair_done_handler+0xec>
1000d09e:	e78d      	b.n	1000cfbc <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d0a0:	9801      	ldr	r0, [sp, #4]
1000d0a2:	b003      	add	sp, #12
1000d0a4:	bc3c      	pop	{r2, r3, r4, r5}
1000d0a6:	4690      	mov	r8, r2
1000d0a8:	4699      	mov	r9, r3
1000d0aa:	46a2      	mov	sl, r4
1000d0ac:	46ab      	mov	fp, r5
1000d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0b0:	1001b1b0 	.word	0x1001b1b0
1000d0b4:	10017888 	.word	0x10017888
1000d0b8:	10016949 	.word	0x10016949
1000d0bc:	1001889c 	.word	0x1001889c
1000d0c0:	10016829 	.word	0x10016829
1000d0c4:	10018890 	.word	0x10018890
1000d0c8:	100188a4 	.word	0x100188a4
1000d0cc:	100188ac 	.word	0x100188ac
1000d0d0:	1000fc51 	.word	0x1000fc51
1000d0d4:	100188cc 	.word	0x100188cc
1000d0d8:	100188e8 	.word	0x100188e8
1000d0dc:	10018914 	.word	0x10018914
1000d0e0:	100166cf 	.word	0x100166cf
1000d0e4:	10018944 	.word	0x10018944

1000d0e8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d0e8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d0ea:	8800      	ldrh	r0, [r0, #0]
1000d0ec:	2378      	movs	r3, #120	; 0x78
1000d0ee:	2201      	movs	r2, #1
1000d0f0:	2101      	movs	r1, #1
1000d0f2:	4c02      	ldr	r4, [pc, #8]	; (1000d0fc <ble_conn_param_update_req+0x14>)
1000d0f4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d0f6:	2000      	movs	r0, #0
1000d0f8:	bd10      	pop	{r4, pc}
1000d0fa:	46c0      	nop			; (mov r8, r8)
1000d0fc:	1000fc71 	.word	0x1000fc71

1000d100 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d100:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d102:	4657      	mov	r7, sl
1000d104:	464e      	mov	r6, r9
1000d106:	4645      	mov	r5, r8
1000d108:	b4e0      	push	{r5, r6, r7}
1000d10a:	b084      	sub	sp, #16
1000d10c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d10e:	2209      	movs	r2, #9
1000d110:	2100      	movs	r1, #0
1000d112:	a801      	add	r0, sp, #4
1000d114:	4b6a      	ldr	r3, [pc, #424]	; (1000d2c0 <ble_slave_security_request_handler+0x1c0>)
1000d116:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d118:	8825      	ldrh	r5, [r4, #0]
1000d11a:	496a      	ldr	r1, [pc, #424]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d11c:	000a      	movs	r2, r1
1000d11e:	2300      	movs	r3, #0
1000d120:	8910      	ldrh	r0, [r2, #8]
1000d122:	42a8      	cmp	r0, r5
1000d124:	d116      	bne.n	1000d154 <ble_slave_security_request_handler+0x54>
1000d126:	0010      	movs	r0, r2
1000d128:	305e      	adds	r0, #94	; 0x5e
1000d12a:	7800      	ldrb	r0, [r0, #0]
1000d12c:	2802      	cmp	r0, #2
1000d12e:	d111      	bne.n	1000d154 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d130:	4864      	ldr	r0, [pc, #400]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d132:	015a      	lsls	r2, r3, #5
1000d134:	1ad6      	subs	r6, r2, r3
1000d136:	00b6      	lsls	r6, r6, #2
1000d138:	1986      	adds	r6, r0, r6
1000d13a:	365e      	adds	r6, #94	; 0x5e
1000d13c:	2206      	movs	r2, #6
1000d13e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d140:	32f9      	adds	r2, #249	; 0xf9
1000d142:	4013      	ands	r3, r2
1000d144:	015a      	lsls	r2, r3, #5
1000d146:	1ad2      	subs	r2, r2, r3
1000d148:	0092      	lsls	r2, r2, #2
1000d14a:	1882      	adds	r2, r0, r2
1000d14c:	7d12      	ldrb	r2, [r2, #20]
1000d14e:	07d0      	lsls	r0, r2, #31
1000d150:	d405      	bmi.n	1000d15e <ble_slave_security_request_handler+0x5e>
1000d152:	e01b      	b.n	1000d18c <ble_slave_security_request_handler+0x8c>
1000d154:	3301      	adds	r3, #1
1000d156:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d158:	2b05      	cmp	r3, #5
1000d15a:	d1e1      	bne.n	1000d120 <ble_slave_security_request_handler+0x20>
1000d15c:	e01e      	b.n	1000d19c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d15e:	78e0      	ldrb	r0, [r4, #3]
1000d160:	2800      	cmp	r0, #0
1000d162:	d013      	beq.n	1000d18c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d164:	0159      	lsls	r1, r3, #5
1000d166:	1ac9      	subs	r1, r1, r3
1000d168:	008b      	lsls	r3, r1, #2
1000d16a:	4956      	ldr	r1, [pc, #344]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d16c:	18c9      	adds	r1, r1, r3
1000d16e:	311a      	adds	r1, #26
1000d170:	8820      	ldrh	r0, [r4, #0]
1000d172:	4b55      	ldr	r3, [pc, #340]	; (1000d2c8 <ble_slave_security_request_handler+0x1c8>)
1000d174:	4798      	blx	r3
1000d176:	2800      	cmp	r0, #0
1000d178:	d100      	bne.n	1000d17c <ble_slave_security_request_handler+0x7c>
1000d17a:	e09b      	b.n	1000d2b4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d17c:	4853      	ldr	r0, [pc, #332]	; (1000d2cc <ble_slave_security_request_handler+0x1cc>)
1000d17e:	4b54      	ldr	r3, [pc, #336]	; (1000d2d0 <ble_slave_security_request_handler+0x1d0>)
1000d180:	4798      	blx	r3
1000d182:	4854      	ldr	r0, [pc, #336]	; (1000d2d4 <ble_slave_security_request_handler+0x1d4>)
1000d184:	4b54      	ldr	r3, [pc, #336]	; (1000d2d8 <ble_slave_security_request_handler+0x1d8>)
1000d186:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d188:	20e2      	movs	r0, #226	; 0xe2
1000d18a:	e093      	b.n	1000d2b4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d18c:	015a      	lsls	r2, r3, #5
1000d18e:	1ad3      	subs	r3, r2, r3
1000d190:	009b      	lsls	r3, r3, #2
1000d192:	4a4c      	ldr	r2, [pc, #304]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d194:	18d3      	adds	r3, r2, r3
1000d196:	335e      	adds	r3, #94	; 0x5e
1000d198:	2202      	movs	r2, #2
1000d19a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d19c:	8825      	ldrh	r5, [r4, #0]
1000d19e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1a0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d1a2:	0016      	movs	r6, r2
1000d1a4:	8908      	ldrh	r0, [r1, #8]
1000d1a6:	42a8      	cmp	r0, r5
1000d1a8:	d10d      	bne.n	1000d1c6 <ble_slave_security_request_handler+0xc6>
1000d1aa:	0008      	movs	r0, r1
1000d1ac:	305e      	adds	r0, #94	; 0x5e
1000d1ae:	7800      	ldrb	r0, [r0, #0]
1000d1b0:	2802      	cmp	r0, #2
1000d1b2:	d108      	bne.n	1000d1c6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d1b4:	0152      	lsls	r2, r2, #5
1000d1b6:	1b92      	subs	r2, r2, r6
1000d1b8:	0096      	lsls	r6, r2, #2
1000d1ba:	4a42      	ldr	r2, [pc, #264]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d1bc:	1992      	adds	r2, r2, r6
1000d1be:	325e      	adds	r2, #94	; 0x5e
1000d1c0:	2103      	movs	r1, #3
1000d1c2:	7011      	strb	r1, [r2, #0]
			break;
1000d1c4:	e005      	b.n	1000d1d2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1c6:	3301      	adds	r3, #1
1000d1c8:	b2db      	uxtb	r3, r3
1000d1ca:	3201      	adds	r2, #1
1000d1cc:	317c      	adds	r1, #124	; 0x7c
1000d1ce:	2b05      	cmp	r3, #5
1000d1d0:	d1e7      	bne.n	1000d1a2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000d1d2:	aa01      	add	r2, sp, #4
1000d1d4:	78e1      	ldrb	r1, [r4, #3]
1000d1d6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000d1d8:	2101      	movs	r1, #1
1000d1da:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000d1dc:	3103      	adds	r1, #3
1000d1de:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d1e0:	001f      	movs	r7, r3
1000d1e2:	015a      	lsls	r2, r3, #5
1000d1e4:	1ad2      	subs	r2, r2, r3
1000d1e6:	0092      	lsls	r2, r2, #2
1000d1e8:	4936      	ldr	r1, [pc, #216]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d1ea:	5c52      	ldrb	r2, [r2, r1]
1000d1ec:	2a02      	cmp	r2, #2
1000d1ee:	d104      	bne.n	1000d1fa <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d1f0:	aa01      	add	r2, sp, #4
1000d1f2:	2103      	movs	r1, #3
1000d1f4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d1f6:	71d1      	strb	r1, [r2, #7]
1000d1f8:	e003      	b.n	1000d202 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d1fa:	aa01      	add	r2, sp, #4
1000d1fc:	2101      	movs	r1, #1
1000d1fe:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d200:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000d202:	aa01      	add	r2, sp, #4
1000d204:	2110      	movs	r1, #16
1000d206:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d208:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d20a:	017a      	lsls	r2, r7, #5
1000d20c:	1bd2      	subs	r2, r2, r7
1000d20e:	0092      	lsls	r2, r2, #2
1000d210:	492c      	ldr	r1, [pc, #176]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d212:	188a      	adds	r2, r1, r2
1000d214:	7e12      	ldrb	r2, [r2, #24]
1000d216:	2a40      	cmp	r2, #64	; 0x40
1000d218:	d134      	bne.n	1000d284 <ble_slave_security_request_handler+0x184>
1000d21a:	015a      	lsls	r2, r3, #5
1000d21c:	1ad3      	subs	r3, r2, r3
1000d21e:	009b      	lsls	r3, r3, #2
1000d220:	469a      	mov	sl, r3
1000d222:	001e      	movs	r6, r3
1000d224:	3660      	adds	r6, #96	; 0x60
1000d226:	1876      	adds	r6, r6, r1
1000d228:	4655      	mov	r5, sl
1000d22a:	3568      	adds	r5, #104	; 0x68
1000d22c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d22e:	4b2b      	ldr	r3, [pc, #172]	; (1000d2dc <ble_slave_security_request_handler+0x1dc>)
1000d230:	4699      	mov	r9, r3
1000d232:	230f      	movs	r3, #15
1000d234:	4698      	mov	r8, r3
1000d236:	47c8      	blx	r9
1000d238:	4643      	mov	r3, r8
1000d23a:	4018      	ands	r0, r3
1000d23c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d23e:	47c8      	blx	r9
1000d240:	4643      	mov	r3, r8
1000d242:	4018      	ands	r0, r3
1000d244:	74b0      	strb	r0, [r6, #18]
1000d246:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d248:	42ae      	cmp	r6, r5
1000d24a:	d1f4      	bne.n	1000d236 <ble_slave_security_request_handler+0x136>
1000d24c:	4656      	mov	r6, sl
1000d24e:	3670      	adds	r6, #112	; 0x70
1000d250:	4a1c      	ldr	r2, [pc, #112]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d252:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d254:	4b21      	ldr	r3, [pc, #132]	; (1000d2dc <ble_slave_security_request_handler+0x1dc>)
1000d256:	4699      	mov	r9, r3
1000d258:	230f      	movs	r3, #15
1000d25a:	4698      	mov	r8, r3
1000d25c:	47c8      	blx	r9
1000d25e:	4643      	mov	r3, r8
1000d260:	4018      	ands	r0, r3
1000d262:	7028      	strb	r0, [r5, #0]
1000d264:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d266:	42b5      	cmp	r5, r6
1000d268:	d1f8      	bne.n	1000d25c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d26a:	4b1c      	ldr	r3, [pc, #112]	; (1000d2dc <ble_slave_security_request_handler+0x1dc>)
1000d26c:	4798      	blx	r3
1000d26e:	017b      	lsls	r3, r7, #5
1000d270:	1bdb      	subs	r3, r3, r7
1000d272:	009b      	lsls	r3, r3, #2
1000d274:	4a13      	ldr	r2, [pc, #76]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d276:	18d3      	adds	r3, r2, r3
1000d278:	001a      	movs	r2, r3
1000d27a:	3270      	adds	r2, #112	; 0x70
1000d27c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d27e:	337a      	adds	r3, #122	; 0x7a
1000d280:	2210      	movs	r2, #16
1000d282:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d284:	017a      	lsls	r2, r7, #5
1000d286:	1bd7      	subs	r7, r2, r7
1000d288:	00bf      	lsls	r7, r7, #2
1000d28a:	3760      	adds	r7, #96	; 0x60
1000d28c:	4a0d      	ldr	r2, [pc, #52]	; (1000d2c4 <ble_slave_security_request_handler+0x1c4>)
1000d28e:	18ba      	adds	r2, r7, r2
1000d290:	8820      	ldrh	r0, [r4, #0]
1000d292:	2300      	movs	r3, #0
1000d294:	a901      	add	r1, sp, #4
1000d296:	4c12      	ldr	r4, [pc, #72]	; (1000d2e0 <ble_slave_security_request_handler+0x1e0>)
1000d298:	47a0      	blx	r4
1000d29a:	2800      	cmp	r0, #0
1000d29c:	d00a      	beq.n	1000d2b4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000d29e:	ab01      	add	r3, sp, #4
1000d2a0:	2200      	movs	r2, #0
1000d2a2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d2a4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000d2a6:	4809      	ldr	r0, [pc, #36]	; (1000d2cc <ble_slave_security_request_handler+0x1cc>)
1000d2a8:	4b09      	ldr	r3, [pc, #36]	; (1000d2d0 <ble_slave_security_request_handler+0x1d0>)
1000d2aa:	4798      	blx	r3
1000d2ac:	480d      	ldr	r0, [pc, #52]	; (1000d2e4 <ble_slave_security_request_handler+0x1e4>)
1000d2ae:	4b0a      	ldr	r3, [pc, #40]	; (1000d2d8 <ble_slave_security_request_handler+0x1d8>)
1000d2b0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d2b2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d2b4:	b004      	add	sp, #16
1000d2b6:	bc1c      	pop	{r2, r3, r4}
1000d2b8:	4690      	mov	r8, r2
1000d2ba:	4699      	mov	r9, r3
1000d2bc:	46a2      	mov	sl, r4
1000d2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2c0:	100166e1 	.word	0x100166e1
1000d2c4:	1001b1b0 	.word	0x1001b1b0
1000d2c8:	10010835 	.word	0x10010835
1000d2cc:	10017888 	.word	0x10017888
1000d2d0:	10016949 	.word	0x10016949
1000d2d4:	1001894c 	.word	0x1001894c
1000d2d8:	10016829 	.word	0x10016829
1000d2dc:	1001695d 	.word	0x1001695d
1000d2e0:	10010649 	.word	0x10010649
1000d2e4:	10018964 	.word	0x10018964

1000d2e8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000d2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2ea:	465f      	mov	r7, fp
1000d2ec:	4656      	mov	r6, sl
1000d2ee:	464d      	mov	r5, r9
1000d2f0:	4644      	mov	r4, r8
1000d2f2:	b4f0      	push	{r4, r5, r6, r7}
1000d2f4:	b085      	sub	sp, #20
1000d2f6:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d2f8:	8804      	ldrh	r4, [r0, #0]
1000d2fa:	4a54      	ldr	r2, [pc, #336]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d2fc:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2fe:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d300:	8910      	ldrh	r0, [r2, #8]
1000d302:	42a0      	cmp	r0, r4
1000d304:	d10d      	bne.n	1000d322 <ble_pair_request_handler+0x3a>
1000d306:	0010      	movs	r0, r2
1000d308:	305e      	adds	r0, #94	; 0x5e
1000d30a:	7800      	ldrb	r0, [r0, #0]
1000d30c:	2802      	cmp	r0, #2
1000d30e:	d108      	bne.n	1000d322 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d310:	014a      	lsls	r2, r1, #5
1000d312:	1a52      	subs	r2, r2, r1
1000d314:	0095      	lsls	r5, r2, #2
1000d316:	4a4d      	ldr	r2, [pc, #308]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d318:	1952      	adds	r2, r2, r5
1000d31a:	325e      	adds	r2, #94	; 0x5e
1000d31c:	2103      	movs	r1, #3
1000d31e:	7011      	strb	r1, [r2, #0]
			break;
1000d320:	e005      	b.n	1000d32e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d322:	3301      	adds	r3, #1
1000d324:	b2db      	uxtb	r3, r3
1000d326:	3101      	adds	r1, #1
1000d328:	327c      	adds	r2, #124	; 0x7c
1000d32a:	2b05      	cmp	r3, #5
1000d32c:	d1e8      	bne.n	1000d300 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d32e:	aa01      	add	r2, sp, #4
1000d330:	2100      	movs	r1, #0
1000d332:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d334:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d336:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d338:	2003      	movs	r0, #3
1000d33a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d33c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d33e:	001e      	movs	r6, r3
1000d340:	015a      	lsls	r2, r3, #5
1000d342:	1ad2      	subs	r2, r2, r3
1000d344:	0092      	lsls	r2, r2, #2
1000d346:	4941      	ldr	r1, [pc, #260]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d348:	5c52      	ldrb	r2, [r2, r1]
1000d34a:	2a02      	cmp	r2, #2
1000d34c:	d104      	bne.n	1000d358 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d34e:	aa01      	add	r2, sp, #4
1000d350:	2103      	movs	r1, #3
1000d352:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d354:	71d1      	strb	r1, [r2, #7]
1000d356:	e003      	b.n	1000d360 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d358:	aa01      	add	r2, sp, #4
1000d35a:	2101      	movs	r1, #1
1000d35c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d35e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d360:	aa01      	add	r2, sp, #4
1000d362:	2110      	movs	r1, #16
1000d364:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d366:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d368:	0172      	lsls	r2, r6, #5
1000d36a:	1b92      	subs	r2, r2, r6
1000d36c:	0092      	lsls	r2, r2, #2
1000d36e:	4937      	ldr	r1, [pc, #220]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d370:	188a      	adds	r2, r1, r2
1000d372:	7e12      	ldrb	r2, [r2, #24]
1000d374:	2a40      	cmp	r2, #64	; 0x40
1000d376:	d142      	bne.n	1000d3fe <ble_pair_request_handler+0x116>
1000d378:	015f      	lsls	r7, r3, #5
1000d37a:	1afb      	subs	r3, r7, r3
1000d37c:	009b      	lsls	r3, r3, #2
1000d37e:	469b      	mov	fp, r3
1000d380:	001c      	movs	r4, r3
1000d382:	3460      	adds	r4, #96	; 0x60
1000d384:	1864      	adds	r4, r4, r1
1000d386:	465d      	mov	r5, fp
1000d388:	3568      	adds	r5, #104	; 0x68
1000d38a:	186d      	adds	r5, r5, r1
1000d38c:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d38e:	4b30      	ldr	r3, [pc, #192]	; (1000d450 <ble_pair_request_handler+0x168>)
1000d390:	469a      	mov	sl, r3
1000d392:	230f      	movs	r3, #15
1000d394:	4699      	mov	r9, r3
1000d396:	47d0      	blx	sl
1000d398:	464b      	mov	r3, r9
1000d39a:	4018      	ands	r0, r3
1000d39c:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d39e:	47d0      	blx	sl
1000d3a0:	464b      	mov	r3, r9
1000d3a2:	4018      	ands	r0, r3
1000d3a4:	74b8      	strb	r0, [r7, #18]
1000d3a6:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d3a8:	42af      	cmp	r7, r5
1000d3aa:	d1f4      	bne.n	1000d396 <ble_pair_request_handler+0xae>
1000d3ac:	465b      	mov	r3, fp
1000d3ae:	3370      	adds	r3, #112	; 0x70
1000d3b0:	4f26      	ldr	r7, [pc, #152]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d3b2:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d3b4:	4b26      	ldr	r3, [pc, #152]	; (1000d450 <ble_pair_request_handler+0x168>)
1000d3b6:	469a      	mov	sl, r3
1000d3b8:	230f      	movs	r3, #15
1000d3ba:	4699      	mov	r9, r3
1000d3bc:	47d0      	blx	sl
1000d3be:	464b      	mov	r3, r9
1000d3c0:	4018      	ands	r0, r3
1000d3c2:	7028      	strb	r0, [r5, #0]
1000d3c4:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d3c6:	42bd      	cmp	r5, r7
1000d3c8:	d1f8      	bne.n	1000d3bc <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000d3ca:	4822      	ldr	r0, [pc, #136]	; (1000d454 <ble_pair_request_handler+0x16c>)
1000d3cc:	4b22      	ldr	r3, [pc, #136]	; (1000d458 <ble_pair_request_handler+0x170>)
1000d3ce:	4798      	blx	r3
1000d3d0:	4822      	ldr	r0, [pc, #136]	; (1000d45c <ble_pair_request_handler+0x174>)
1000d3d2:	4b23      	ldr	r3, [pc, #140]	; (1000d460 <ble_pair_request_handler+0x178>)
1000d3d4:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000d3d6:	4d22      	ldr	r5, [pc, #136]	; (1000d460 <ble_pair_request_handler+0x178>)
1000d3d8:	7821      	ldrb	r1, [r4, #0]
1000d3da:	4822      	ldr	r0, [pc, #136]	; (1000d464 <ble_pair_request_handler+0x17c>)
1000d3dc:	47a8      	blx	r5
1000d3de:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000d3e0:	42bc      	cmp	r4, r7
1000d3e2:	d1f9      	bne.n	1000d3d8 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d3e4:	4b1a      	ldr	r3, [pc, #104]	; (1000d450 <ble_pair_request_handler+0x168>)
1000d3e6:	4798      	blx	r3
1000d3e8:	0173      	lsls	r3, r6, #5
1000d3ea:	1b9b      	subs	r3, r3, r6
1000d3ec:	009b      	lsls	r3, r3, #2
1000d3ee:	4a17      	ldr	r2, [pc, #92]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d3f0:	18d3      	adds	r3, r2, r3
1000d3f2:	001a      	movs	r2, r3
1000d3f4:	3270      	adds	r2, #112	; 0x70
1000d3f6:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d3f8:	337a      	adds	r3, #122	; 0x7a
1000d3fa:	2210      	movs	r2, #16
1000d3fc:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000d3fe:	4815      	ldr	r0, [pc, #84]	; (1000d454 <ble_pair_request_handler+0x16c>)
1000d400:	4b15      	ldr	r3, [pc, #84]	; (1000d458 <ble_pair_request_handler+0x170>)
1000d402:	4798      	blx	r3
1000d404:	4818      	ldr	r0, [pc, #96]	; (1000d468 <ble_pair_request_handler+0x180>)
1000d406:	4b16      	ldr	r3, [pc, #88]	; (1000d460 <ble_pair_request_handler+0x178>)
1000d408:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d40a:	0173      	lsls	r3, r6, #5
1000d40c:	1b9b      	subs	r3, r3, r6
1000d40e:	009b      	lsls	r3, r3, #2
1000d410:	3360      	adds	r3, #96	; 0x60
1000d412:	4a0e      	ldr	r2, [pc, #56]	; (1000d44c <ble_pair_request_handler+0x164>)
1000d414:	189a      	adds	r2, r3, r2
1000d416:	4643      	mov	r3, r8
1000d418:	8818      	ldrh	r0, [r3, #0]
1000d41a:	2300      	movs	r3, #0
1000d41c:	a901      	add	r1, sp, #4
1000d41e:	4c13      	ldr	r4, [pc, #76]	; (1000d46c <ble_pair_request_handler+0x184>)
1000d420:	47a0      	blx	r4
1000d422:	2800      	cmp	r0, #0
1000d424:	d00a      	beq.n	1000d43c <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000d426:	ab01      	add	r3, sp, #4
1000d428:	2200      	movs	r2, #0
1000d42a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d42c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d42e:	4809      	ldr	r0, [pc, #36]	; (1000d454 <ble_pair_request_handler+0x16c>)
1000d430:	4b09      	ldr	r3, [pc, #36]	; (1000d458 <ble_pair_request_handler+0x170>)
1000d432:	4798      	blx	r3
1000d434:	480e      	ldr	r0, [pc, #56]	; (1000d470 <ble_pair_request_handler+0x188>)
1000d436:	4b0a      	ldr	r3, [pc, #40]	; (1000d460 <ble_pair_request_handler+0x178>)
1000d438:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d43a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d43c:	b005      	add	sp, #20
1000d43e:	bc3c      	pop	{r2, r3, r4, r5}
1000d440:	4690      	mov	r8, r2
1000d442:	4699      	mov	r9, r3
1000d444:	46a2      	mov	sl, r4
1000d446:	46ab      	mov	fp, r5
1000d448:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d44a:	46c0      	nop			; (mov r8, r8)
1000d44c:	1001b1b0 	.word	0x1001b1b0
1000d450:	1001695d 	.word	0x1001695d
1000d454:	10017888 	.word	0x10017888
1000d458:	10016949 	.word	0x10016949
1000d45c:	10018990 	.word	0x10018990
1000d460:	10016829 	.word	0x10016829
1000d464:	100189a0 	.word	0x100189a0
1000d468:	100189a8 	.word	0x100189a8
1000d46c:	10010649 	.word	0x10010649
1000d470:	100189c4 	.word	0x100189c4

1000d474 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d474:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d476:	b085      	sub	sp, #20
1000d478:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d47a:	2206      	movs	r2, #6
1000d47c:	493d      	ldr	r1, [pc, #244]	; (1000d574 <ble_pair_key_request_handler+0x100>)
1000d47e:	a802      	add	r0, sp, #8
1000d480:	4e3d      	ldr	r6, [pc, #244]	; (1000d578 <ble_pair_key_request_handler+0x104>)
1000d482:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d484:	ac01      	add	r4, sp, #4
1000d486:	2204      	movs	r2, #4
1000d488:	0029      	movs	r1, r5
1000d48a:	0020      	movs	r0, r4
1000d48c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d48e:	78e3      	ldrb	r3, [r4, #3]
1000d490:	2b00      	cmp	r3, #0
1000d492:	d162      	bne.n	1000d55a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d494:	4839      	ldr	r0, [pc, #228]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d496:	4b3a      	ldr	r3, [pc, #232]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d498:	4798      	blx	r3
1000d49a:	483a      	ldr	r0, [pc, #232]	; (1000d584 <ble_pair_key_request_handler+0x110>)
1000d49c:	4b3a      	ldr	r3, [pc, #232]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d49e:	4798      	blx	r3
1000d4a0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4a2:	4c3a      	ldr	r4, [pc, #232]	; (1000d58c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d4a4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4a6:	201e      	movs	r0, #30
1000d4a8:	47a0      	blx	r4
1000d4aa:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d4ac:	2b00      	cmp	r3, #0
1000d4ae:	d11a      	bne.n	1000d4e6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d4b0:	4f32      	ldr	r7, [pc, #200]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d4b2:	0038      	movs	r0, r7
1000d4b4:	4e32      	ldr	r6, [pc, #200]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d4b6:	47b0      	blx	r6
1000d4b8:	4835      	ldr	r0, [pc, #212]	; (1000d590 <ble_pair_key_request_handler+0x11c>)
1000d4ba:	4c33      	ldr	r4, [pc, #204]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d4bc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d4be:	0038      	movs	r0, r7
1000d4c0:	47b0      	blx	r6
1000d4c2:	4834      	ldr	r0, [pc, #208]	; (1000d594 <ble_pair_key_request_handler+0x120>)
1000d4c4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d4c6:	8828      	ldrh	r0, [r5, #0]
1000d4c8:	2113      	movs	r1, #19
1000d4ca:	4b33      	ldr	r3, [pc, #204]	; (1000d598 <ble_pair_key_request_handler+0x124>)
1000d4cc:	4798      	blx	r3
1000d4ce:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d4d0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d4d2:	2b00      	cmp	r3, #0
1000d4d4:	d04c      	beq.n	1000d570 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d4d6:	4829      	ldr	r0, [pc, #164]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d4d8:	4b29      	ldr	r3, [pc, #164]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d4da:	4798      	blx	r3
1000d4dc:	482f      	ldr	r0, [pc, #188]	; (1000d59c <ble_pair_key_request_handler+0x128>)
1000d4de:	4b2a      	ldr	r3, [pc, #168]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d4e0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d4e2:	20e2      	movs	r0, #226	; 0xe2
1000d4e4:	e044      	b.n	1000d570 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d4e6:	001a      	movs	r2, r3
1000d4e8:	3a30      	subs	r2, #48	; 0x30
1000d4ea:	2a09      	cmp	r2, #9
1000d4ec:	d8db      	bhi.n	1000d4a6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d4ee:	aa02      	add	r2, sp, #8
1000d4f0:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d4f2:	4038      	ands	r0, r7
1000d4f4:	4b2a      	ldr	r3, [pc, #168]	; (1000d5a0 <ble_pair_key_request_handler+0x12c>)
1000d4f6:	4798      	blx	r3
1000d4f8:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d4fa:	2e06      	cmp	r6, #6
1000d4fc:	d026      	beq.n	1000d54c <ble_pair_key_request_handler+0xd8>
1000d4fe:	e7d2      	b.n	1000d4a6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d500:	481e      	ldr	r0, [pc, #120]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d502:	4b1f      	ldr	r3, [pc, #124]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d504:	4798      	blx	r3
1000d506:	4827      	ldr	r0, [pc, #156]	; (1000d5a4 <ble_pair_key_request_handler+0x130>)
1000d508:	4b1f      	ldr	r3, [pc, #124]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d50a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d50c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d50e:	4e24      	ldr	r6, [pc, #144]	; (1000d5a0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d510:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d512:	5ce0      	ldrb	r0, [r4, r3]
1000d514:	47b0      	blx	r6
1000d516:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d518:	2c06      	cmp	r4, #6
1000d51a:	d1f9      	bne.n	1000d510 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d51c:	ab01      	add	r3, sp, #4
1000d51e:	7899      	ldrb	r1, [r3, #2]
1000d520:	8828      	ldrh	r0, [r5, #0]
1000d522:	aa02      	add	r2, sp, #8
1000d524:	4b20      	ldr	r3, [pc, #128]	; (1000d5a8 <ble_pair_key_request_handler+0x134>)
1000d526:	4798      	blx	r3
1000d528:	2800      	cmp	r0, #0
1000d52a:	d021      	beq.n	1000d570 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d52c:	4813      	ldr	r0, [pc, #76]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d52e:	4b14      	ldr	r3, [pc, #80]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d530:	4798      	blx	r3
1000d532:	481e      	ldr	r0, [pc, #120]	; (1000d5ac <ble_pair_key_request_handler+0x138>)
1000d534:	4b14      	ldr	r3, [pc, #80]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d536:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d538:	2000      	movs	r0, #0
1000d53a:	e019      	b.n	1000d570 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d53c:	480f      	ldr	r0, [pc, #60]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d53e:	4b10      	ldr	r3, [pc, #64]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d540:	4798      	blx	r3
1000d542:	481b      	ldr	r0, [pc, #108]	; (1000d5b0 <ble_pair_key_request_handler+0x13c>)
1000d544:	4b10      	ldr	r3, [pc, #64]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d546:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d548:	2000      	movs	r0, #0
1000d54a:	e011      	b.n	1000d570 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d54c:	480b      	ldr	r0, [pc, #44]	; (1000d57c <ble_pair_key_request_handler+0x108>)
1000d54e:	4b0c      	ldr	r3, [pc, #48]	; (1000d580 <ble_pair_key_request_handler+0x10c>)
1000d550:	4798      	blx	r3
1000d552:	4818      	ldr	r0, [pc, #96]	; (1000d5b4 <ble_pair_key_request_handler+0x140>)
1000d554:	4b0c      	ldr	r3, [pc, #48]	; (1000d588 <ble_pair_key_request_handler+0x114>)
1000d556:	4798      	blx	r3
1000d558:	e7d8      	b.n	1000d50c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d55a:	ab01      	add	r3, sp, #4
1000d55c:	885a      	ldrh	r2, [r3, #2]
1000d55e:	2380      	movs	r3, #128	; 0x80
1000d560:	005b      	lsls	r3, r3, #1
1000d562:	429a      	cmp	r2, r3
1000d564:	d0cc      	beq.n	1000d500 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d566:	ab01      	add	r3, sp, #4
1000d568:	789b      	ldrb	r3, [r3, #2]
1000d56a:	2b01      	cmp	r3, #1
1000d56c:	d0e6      	beq.n	1000d53c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d56e:	2000      	movs	r0, #0
}
1000d570:	b005      	add	sp, #20
1000d572:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d574:	100185ac 	.word	0x100185ac
1000d578:	100166cf 	.word	0x100166cf
1000d57c:	10017888 	.word	0x10017888
1000d580:	10016949 	.word	0x10016949
1000d584:	100189ec 	.word	0x100189ec
1000d588:	10016829 	.word	0x10016829
1000d58c:	1000e291 	.word	0x1000e291
1000d590:	10018a14 	.word	0x10018a14
1000d594:	10018a20 	.word	0x10018a20
1000d598:	1000fc51 	.word	0x1000fc51
1000d59c:	100188cc 	.word	0x100188cc
1000d5a0:	1001685d 	.word	0x1001685d
1000d5a4:	10018a34 	.word	0x10018a34
1000d5a8:	10010779 	.word	0x10010779
1000d5ac:	10018a6c 	.word	0x10018a6c
1000d5b0:	10018a84 	.word	0x10018a84
1000d5b4:	10018aa0 	.word	0x10018aa0

1000d5b8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5ba:	465f      	mov	r7, fp
1000d5bc:	4656      	mov	r6, sl
1000d5be:	464d      	mov	r5, r9
1000d5c0:	b4e0      	push	{r5, r6, r7}
1000d5c2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d5c4:	8800      	ldrh	r0, [r0, #0]
1000d5c6:	4b49      	ldr	r3, [pc, #292]	; (1000d6ec <ble_encryption_request_handler+0x134>)
1000d5c8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5ca:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d5cc:	8919      	ldrh	r1, [r3, #8]
1000d5ce:	4281      	cmp	r1, r0
1000d5d0:	d137      	bne.n	1000d642 <ble_encryption_request_handler+0x8a>
1000d5d2:	0019      	movs	r1, r3
1000d5d4:	315e      	adds	r1, #94	; 0x5e
1000d5d6:	7809      	ldrb	r1, [r1, #0]
1000d5d8:	2901      	cmp	r1, #1
1000d5da:	d932      	bls.n	1000d642 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d5dc:	4f43      	ldr	r7, [pc, #268]	; (1000d6ec <ble_encryption_request_handler+0x134>)
1000d5de:	0153      	lsls	r3, r2, #5
1000d5e0:	1a9d      	subs	r5, r3, r2
1000d5e2:	00ad      	lsls	r5, r5, #2
1000d5e4:	197d      	adds	r5, r7, r5
1000d5e6:	355e      	adds	r5, #94	; 0x5e
1000d5e8:	2306      	movs	r3, #6
1000d5ea:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000d5ec:	4840      	ldr	r0, [pc, #256]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d5ee:	4b41      	ldr	r3, [pc, #260]	; (1000d6f4 <ble_encryption_request_handler+0x13c>)
1000d5f0:	469a      	mov	sl, r3
1000d5f2:	4798      	blx	r3
1000d5f4:	8831      	ldrh	r1, [r6, #0]
1000d5f6:	4840      	ldr	r0, [pc, #256]	; (1000d6f8 <ble_encryption_request_handler+0x140>)
1000d5f8:	4b40      	ldr	r3, [pc, #256]	; (1000d6fc <ble_encryption_request_handler+0x144>)
1000d5fa:	4699      	mov	r9, r3
1000d5fc:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000d5fe:	483c      	ldr	r0, [pc, #240]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d600:	47d0      	blx	sl
1000d602:	0163      	lsls	r3, r4, #5
1000d604:	1b1b      	subs	r3, r3, r4
1000d606:	009b      	lsls	r3, r3, #2
1000d608:	18ff      	adds	r7, r7, r3
1000d60a:	2370      	movs	r3, #112	; 0x70
1000d60c:	469b      	mov	fp, r3
1000d60e:	44bb      	add	fp, r7
1000d610:	465b      	mov	r3, fp
1000d612:	8819      	ldrh	r1, [r3, #0]
1000d614:	483a      	ldr	r0, [pc, #232]	; (1000d700 <ble_encryption_request_handler+0x148>)
1000d616:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000d618:	4835      	ldr	r0, [pc, #212]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d61a:	47d0      	blx	sl
1000d61c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000d61e:	4839      	ldr	r0, [pc, #228]	; (1000d704 <ble_encryption_request_handler+0x14c>)
1000d620:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000d622:	4833      	ldr	r0, [pc, #204]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d624:	47d0      	blx	sl
1000d626:	8871      	ldrh	r1, [r6, #2]
1000d628:	4837      	ldr	r0, [pc, #220]	; (1000d708 <ble_encryption_request_handler+0x150>)
1000d62a:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000d62c:	4830      	ldr	r0, [pc, #192]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d62e:	47d0      	blx	sl
1000d630:	0021      	movs	r1, r4
1000d632:	4836      	ldr	r0, [pc, #216]	; (1000d70c <ble_encryption_request_handler+0x154>)
1000d634:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d636:	465b      	mov	r3, fp
1000d638:	881a      	ldrh	r2, [r3, #0]
1000d63a:	8873      	ldrh	r3, [r6, #2]
1000d63c:	429a      	cmp	r2, r3
1000d63e:	d12a      	bne.n	1000d696 <ble_encryption_request_handler+0xde>
1000d640:	e006      	b.n	1000d650 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d642:	3401      	adds	r4, #1
1000d644:	b2e4      	uxtb	r4, r4
1000d646:	3201      	adds	r2, #1
1000d648:	337c      	adds	r3, #124	; 0x7c
1000d64a:	2c05      	cmp	r4, #5
1000d64c:	d1be      	bne.n	1000d5cc <ble_encryption_request_handler+0x14>
1000d64e:	e022      	b.n	1000d696 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d650:	0161      	lsls	r1, r4, #5
1000d652:	1b09      	subs	r1, r1, r4
1000d654:	0089      	lsls	r1, r1, #2
1000d656:	4b25      	ldr	r3, [pc, #148]	; (1000d6ec <ble_encryption_request_handler+0x134>)
1000d658:	1859      	adds	r1, r3, r1
1000d65a:	3172      	adds	r1, #114	; 0x72
1000d65c:	1d30      	adds	r0, r6, #4
1000d65e:	2208      	movs	r2, #8
1000d660:	4b2b      	ldr	r3, [pc, #172]	; (1000d710 <ble_encryption_request_handler+0x158>)
1000d662:	4798      	blx	r3
1000d664:	2800      	cmp	r0, #0
1000d666:	d116      	bne.n	1000d696 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000d668:	4821      	ldr	r0, [pc, #132]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d66a:	4b22      	ldr	r3, [pc, #136]	; (1000d6f4 <ble_encryption_request_handler+0x13c>)
1000d66c:	4798      	blx	r3
1000d66e:	4829      	ldr	r0, [pc, #164]	; (1000d714 <ble_encryption_request_handler+0x15c>)
1000d670:	4b22      	ldr	r3, [pc, #136]	; (1000d6fc <ble_encryption_request_handler+0x144>)
1000d672:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d674:	0162      	lsls	r2, r4, #5
1000d676:	1b13      	subs	r3, r2, r4
1000d678:	009b      	lsls	r3, r3, #2
1000d67a:	3360      	adds	r3, #96	; 0x60
1000d67c:	491b      	ldr	r1, [pc, #108]	; (1000d6ec <ble_encryption_request_handler+0x134>)
1000d67e:	185b      	adds	r3, r3, r1
1000d680:	1b12      	subs	r2, r2, r4
1000d682:	0092      	lsls	r2, r2, #2
1000d684:	188a      	adds	r2, r1, r2
1000d686:	7d11      	ldrb	r1, [r2, #20]
1000d688:	8830      	ldrh	r0, [r6, #0]
1000d68a:	2201      	movs	r2, #1
1000d68c:	4c22      	ldr	r4, [pc, #136]	; (1000d718 <ble_encryption_request_handler+0x160>)
1000d68e:	47a0      	blx	r4
1000d690:	1e04      	subs	r4, r0, #0
1000d692:	d01e      	beq.n	1000d6d2 <ble_encryption_request_handler+0x11a>
1000d694:	e015      	b.n	1000d6c2 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d696:	4f16      	ldr	r7, [pc, #88]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d698:	0038      	movs	r0, r7
1000d69a:	4e16      	ldr	r6, [pc, #88]	; (1000d6f4 <ble_encryption_request_handler+0x13c>)
1000d69c:	47b0      	blx	r6
1000d69e:	481f      	ldr	r0, [pc, #124]	; (1000d71c <ble_encryption_request_handler+0x164>)
1000d6a0:	4d16      	ldr	r5, [pc, #88]	; (1000d6fc <ble_encryption_request_handler+0x144>)
1000d6a2:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d6a4:	0038      	movs	r0, r7
1000d6a6:	47b0      	blx	r6
1000d6a8:	481d      	ldr	r0, [pc, #116]	; (1000d720 <ble_encryption_request_handler+0x168>)
1000d6aa:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d6ac:	0163      	lsls	r3, r4, #5
1000d6ae:	1b1c      	subs	r4, r3, r4
1000d6b0:	00a4      	lsls	r4, r4, #2
1000d6b2:	4b0e      	ldr	r3, [pc, #56]	; (1000d6ec <ble_encryption_request_handler+0x134>)
1000d6b4:	191c      	adds	r4, r3, r4
1000d6b6:	8920      	ldrh	r0, [r4, #8]
1000d6b8:	2105      	movs	r1, #5
1000d6ba:	4b1a      	ldr	r3, [pc, #104]	; (1000d724 <ble_encryption_request_handler+0x16c>)
1000d6bc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d6be:	24e2      	movs	r4, #226	; 0xe2
1000d6c0:	e00d      	b.n	1000d6de <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d6c2:	480b      	ldr	r0, [pc, #44]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d6c4:	4b0b      	ldr	r3, [pc, #44]	; (1000d6f4 <ble_encryption_request_handler+0x13c>)
1000d6c6:	4798      	blx	r3
1000d6c8:	4817      	ldr	r0, [pc, #92]	; (1000d728 <ble_encryption_request_handler+0x170>)
1000d6ca:	4b0c      	ldr	r3, [pc, #48]	; (1000d6fc <ble_encryption_request_handler+0x144>)
1000d6cc:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d6ce:	2400      	movs	r4, #0
1000d6d0:	e005      	b.n	1000d6de <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000d6d2:	4807      	ldr	r0, [pc, #28]	; (1000d6f0 <ble_encryption_request_handler+0x138>)
1000d6d4:	4b07      	ldr	r3, [pc, #28]	; (1000d6f4 <ble_encryption_request_handler+0x13c>)
1000d6d6:	4798      	blx	r3
1000d6d8:	4814      	ldr	r0, [pc, #80]	; (1000d72c <ble_encryption_request_handler+0x174>)
1000d6da:	4b08      	ldr	r3, [pc, #32]	; (1000d6fc <ble_encryption_request_handler+0x144>)
1000d6dc:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000d6de:	0020      	movs	r0, r4
1000d6e0:	bc1c      	pop	{r2, r3, r4}
1000d6e2:	4691      	mov	r9, r2
1000d6e4:	469a      	mov	sl, r3
1000d6e6:	46a3      	mov	fp, r4
1000d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6ea:	46c0      	nop			; (mov r8, r8)
1000d6ec:	1001b1b0 	.word	0x1001b1b0
1000d6f0:	10017888 	.word	0x10017888
1000d6f4:	10016949 	.word	0x10016949
1000d6f8:	10018ab4 	.word	0x10018ab4
1000d6fc:	10016829 	.word	0x10016829
1000d700:	10018ae0 	.word	0x10018ae0
1000d704:	10018af4 	.word	0x10018af4
1000d708:	10018b08 	.word	0x10018b08
1000d70c:	10018b18 	.word	0x10018b18
1000d710:	100166b1 	.word	0x100166b1
1000d714:	10018b28 	.word	0x10018b28
1000d718:	100108ad 	.word	0x100108ad
1000d71c:	10018b3c 	.word	0x10018b3c
1000d720:	10018b74 	.word	0x10018b74
1000d724:	1000fc51 	.word	0x1000fc51
1000d728:	10018bcc 	.word	0x10018bcc
1000d72c:	10018bec 	.word	0x10018bec

1000d730 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d730:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d732:	2a00      	cmp	r2, #0
1000d734:	d047      	beq.n	1000d7c6 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d736:	2906      	cmp	r1, #6
1000d738:	d847      	bhi.n	1000d7ca <ble_mgr_events_callback_handler+0x9a>
1000d73a:	0089      	lsls	r1, r1, #2
1000d73c:	4b28      	ldr	r3, [pc, #160]	; (1000d7e0 <ble_mgr_events_callback_handler+0xb0>)
1000d73e:	585b      	ldr	r3, [r3, r1]
1000d740:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d742:	4b28      	ldr	r3, [pc, #160]	; (1000d7e4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d744:	2405      	movs	r4, #5
1000d746:	e00a      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d748:	4b27      	ldr	r3, [pc, #156]	; (1000d7e8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d74a:	2401      	movs	r4, #1
			}
			break;
1000d74c:	e007      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d74e:	4b27      	ldr	r3, [pc, #156]	; (1000d7ec <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d750:	2405      	movs	r4, #5
			}
			break;
1000d752:	e004      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d754:	4b26      	ldr	r3, [pc, #152]	; (1000d7f0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d756:	2401      	movs	r4, #1
			}
			break;
1000d758:	e001      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d75a:	4b26      	ldr	r3, [pc, #152]	; (1000d7f4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d75c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d75e:	2800      	cmp	r0, #0
1000d760:	d116      	bne.n	1000d790 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d762:	6819      	ldr	r1, [r3, #0]
1000d764:	2900      	cmp	r1, #0
1000d766:	d10b      	bne.n	1000d780 <ble_mgr_events_callback_handler+0x50>
1000d768:	e006      	b.n	1000d778 <ble_mgr_events_callback_handler+0x48>
1000d76a:	001d      	movs	r5, r3
1000d76c:	3304      	adds	r3, #4
1000d76e:	1f18      	subs	r0, r3, #4
1000d770:	6800      	ldr	r0, [r0, #0]
1000d772:	2800      	cmp	r0, #0
1000d774:	d106      	bne.n	1000d784 <ble_mgr_events_callback_handler+0x54>
1000d776:	e000      	b.n	1000d77a <ble_mgr_events_callback_handler+0x4a>
1000d778:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d77a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d77c:	2101      	movs	r1, #1
						break;
1000d77e:	e02c      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
1000d780:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d782:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d784:	3101      	adds	r1, #1
1000d786:	b2c9      	uxtb	r1, r1
1000d788:	42a1      	cmp	r1, r4
1000d78a:	d3ee      	bcc.n	1000d76a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d78c:	2100      	movs	r1, #0
1000d78e:	e024      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
1000d790:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d792:	2801      	cmp	r0, #1
1000d794:	d121      	bne.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d796:	6819      	ldr	r1, [r3, #0]
1000d798:	428a      	cmp	r2, r1
1000d79a:	d10c      	bne.n	1000d7b6 <ble_mgr_events_callback_handler+0x86>
1000d79c:	e006      	b.n	1000d7ac <ble_mgr_events_callback_handler+0x7c>
1000d79e:	001d      	movs	r5, r3
1000d7a0:	3304      	adds	r3, #4
1000d7a2:	1f18      	subs	r0, r3, #4
1000d7a4:	6800      	ldr	r0, [r0, #0]
1000d7a6:	4282      	cmp	r2, r0
1000d7a8:	d107      	bne.n	1000d7ba <ble_mgr_events_callback_handler+0x8a>
1000d7aa:	e000      	b.n	1000d7ae <ble_mgr_events_callback_handler+0x7e>
1000d7ac:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d7ae:	2300      	movs	r3, #0
1000d7b0:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d7b2:	2101      	movs	r1, #1
						break;
1000d7b4:	e011      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
1000d7b6:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d7b8:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d7ba:	3101      	adds	r1, #1
1000d7bc:	b2c9      	uxtb	r1, r1
1000d7be:	42a1      	cmp	r1, r4
1000d7c0:	d3ed      	bcc.n	1000d79e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d7c2:	2100      	movs	r1, #0
1000d7c4:	e009      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d7c6:	2100      	movs	r1, #0
1000d7c8:	e007      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d7ca:	2100      	movs	r1, #0
1000d7cc:	e005      	b.n	1000d7da <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d7ce:	4b0a      	ldr	r3, [pc, #40]	; (1000d7f8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d7d0:	2405      	movs	r4, #5
1000d7d2:	e7c4      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d7d4:	4b09      	ldr	r3, [pc, #36]	; (1000d7fc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d7d6:	2401      	movs	r4, #1
1000d7d8:	e7c1      	b.n	1000d75e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d7da:	0008      	movs	r0, r1
1000d7dc:	bd30      	pop	{r4, r5, pc}
1000d7de:	46c0      	nop			; (mov r8, r8)
1000d7e0:	100184a0 	.word	0x100184a0
1000d7e4:	1001b19c 	.word	0x1001b19c
1000d7e8:	1001b198 	.word	0x1001b198
1000d7ec:	1001b420 	.word	0x1001b420
1000d7f0:	1001b9d4 	.word	0x1001b9d4
1000d7f4:	1001b434 	.word	0x1001b434
1000d7f8:	1001b448 	.word	0x1001b448
1000d7fc:	1001b490 	.word	0x1001b490

1000d800 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d800:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d802:	465f      	mov	r7, fp
1000d804:	4656      	mov	r6, sl
1000d806:	464d      	mov	r5, r9
1000d808:	4644      	mov	r4, r8
1000d80a:	b4f0      	push	{r4, r5, r6, r7}
1000d80c:	b091      	sub	sp, #68	; 0x44
1000d80e:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d810:	2400      	movs	r4, #0
1000d812:	4b7e      	ldr	r3, [pc, #504]	; (1000da0c <ble_device_init+0x20c>)
1000d814:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d816:	2207      	movs	r2, #7
1000d818:	2100      	movs	r1, #0
1000d81a:	487d      	ldr	r0, [pc, #500]	; (1000da10 <ble_device_init+0x210>)
1000d81c:	4e7d      	ldr	r6, [pc, #500]	; (1000da14 <ble_device_init+0x214>)
1000d81e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d820:	2212      	movs	r2, #18
1000d822:	2100      	movs	r1, #0
1000d824:	487c      	ldr	r0, [pc, #496]	; (1000da18 <ble_device_init+0x218>)
1000d826:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d828:	4a7c      	ldr	r2, [pc, #496]	; (1000da1c <ble_device_init+0x21c>)
1000d82a:	2100      	movs	r1, #0
1000d82c:	487c      	ldr	r0, [pc, #496]	; (1000da20 <ble_device_init+0x220>)
1000d82e:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000d830:	4b7c      	ldr	r3, [pc, #496]	; (1000da24 <ble_device_init+0x224>)
1000d832:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d834:	22cd      	movs	r2, #205	; 0xcd
1000d836:	0092      	lsls	r2, r2, #2
1000d838:	2100      	movs	r1, #0
1000d83a:	487b      	ldr	r0, [pc, #492]	; (1000da28 <ble_device_init+0x228>)
1000d83c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000d83e:	4b7b      	ldr	r3, [pc, #492]	; (1000da2c <ble_device_init+0x22c>)
1000d840:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d842:	2283      	movs	r2, #131	; 0x83
1000d844:	0092      	lsls	r2, r2, #2
1000d846:	2100      	movs	r1, #0
1000d848:	4879      	ldr	r0, [pc, #484]	; (1000da30 <ble_device_init+0x230>)
1000d84a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d84c:	4b79      	ldr	r3, [pc, #484]	; (1000da34 <ble_device_init+0x234>)
1000d84e:	469b      	mov	fp, r3
1000d850:	2380      	movs	r3, #128	; 0x80
1000d852:	00db      	lsls	r3, r3, #3
1000d854:	469a      	mov	sl, r3
1000d856:	001a      	movs	r2, r3
1000d858:	2100      	movs	r1, #0
1000d85a:	4658      	mov	r0, fp
1000d85c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d85e:	4b76      	ldr	r3, [pc, #472]	; (1000da38 <ble_device_init+0x238>)
1000d860:	4699      	mov	r9, r3
1000d862:	2380      	movs	r3, #128	; 0x80
1000d864:	015b      	lsls	r3, r3, #5
1000d866:	4698      	mov	r8, r3
1000d868:	001a      	movs	r2, r3
1000d86a:	2100      	movs	r1, #0
1000d86c:	4648      	mov	r0, r9
1000d86e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d870:	4f72      	ldr	r7, [pc, #456]	; (1000da3c <ble_device_init+0x23c>)
1000d872:	221c      	movs	r2, #28
1000d874:	2100      	movs	r1, #0
1000d876:	0038      	movs	r0, r7
1000d878:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d87a:	465b      	mov	r3, fp
1000d87c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d87e:	4653      	mov	r3, sl
1000d880:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d882:	464b      	mov	r3, r9
1000d884:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d886:	4643      	mov	r3, r8
1000d888:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d88a:	4b6d      	ldr	r3, [pc, #436]	; (1000da40 <ble_device_init+0x240>)
1000d88c:	601c      	str	r4, [r3, #0]
1000d88e:	605c      	str	r4, [r3, #4]
1000d890:	609c      	str	r4, [r3, #8]
1000d892:	60dc      	str	r4, [r3, #12]
1000d894:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d896:	4b6b      	ldr	r3, [pc, #428]	; (1000da44 <ble_device_init+0x244>)
1000d898:	601c      	str	r4, [r3, #0]
1000d89a:	605c      	str	r4, [r3, #4]
1000d89c:	609c      	str	r4, [r3, #8]
1000d89e:	60dc      	str	r4, [r3, #12]
1000d8a0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d8a2:	4b69      	ldr	r3, [pc, #420]	; (1000da48 <ble_device_init+0x248>)
1000d8a4:	601c      	str	r4, [r3, #0]
1000d8a6:	605c      	str	r4, [r3, #4]
1000d8a8:	609c      	str	r4, [r3, #8]
1000d8aa:	60dc      	str	r4, [r3, #12]
1000d8ac:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d8ae:	4b67      	ldr	r3, [pc, #412]	; (1000da4c <ble_device_init+0x24c>)
1000d8b0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d8b2:	4b67      	ldr	r3, [pc, #412]	; (1000da50 <ble_device_init+0x250>)
1000d8b4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d8b6:	4b67      	ldr	r3, [pc, #412]	; (1000da54 <ble_device_init+0x254>)
1000d8b8:	601c      	str	r4, [r3, #0]
1000d8ba:	605c      	str	r4, [r3, #4]
1000d8bc:	609c      	str	r4, [r3, #8]
1000d8be:	60dc      	str	r4, [r3, #12]
1000d8c0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d8c2:	4b65      	ldr	r3, [pc, #404]	; (1000da58 <ble_device_init+0x258>)
1000d8c4:	601c      	str	r4, [r3, #0]
1000d8c6:	4c65      	ldr	r4, [pc, #404]	; (1000da5c <ble_device_init+0x25c>)
1000d8c8:	239b      	movs	r3, #155	; 0x9b
1000d8ca:	009b      	lsls	r3, r3, #2
1000d8cc:	4698      	mov	r8, r3
1000d8ce:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d8d0:	4f50      	ldr	r7, [pc, #320]	; (1000da14 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d8d2:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d8d4:	227c      	movs	r2, #124	; 0x7c
1000d8d6:	2100      	movs	r1, #0
1000d8d8:	0020      	movs	r0, r4
1000d8da:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d8dc:	0023      	movs	r3, r4
1000d8de:	335e      	adds	r3, #94	; 0x5e
1000d8e0:	2200      	movs	r2, #0
1000d8e2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d8e4:	7626      	strb	r6, [r4, #24]
1000d8e6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8e8:	45a0      	cmp	r8, r4
1000d8ea:	d1f3      	bne.n	1000d8d4 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d8ec:	4b5c      	ldr	r3, [pc, #368]	; (1000da60 <ble_device_init+0x260>)
1000d8ee:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d8f0:	4c52      	ldr	r4, [pc, #328]	; (1000da3c <ble_device_init+0x23c>)
1000d8f2:	4b4a      	ldr	r3, [pc, #296]	; (1000da1c <ble_device_init+0x21c>)
1000d8f4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d8f6:	4b4a      	ldr	r3, [pc, #296]	; (1000da20 <ble_device_init+0x220>)
1000d8f8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000d8fa:	485a      	ldr	r0, [pc, #360]	; (1000da64 <ble_device_init+0x264>)
1000d8fc:	4b5a      	ldr	r3, [pc, #360]	; (1000da68 <ble_device_init+0x268>)
1000d8fe:	4798      	blx	r3
1000d900:	485a      	ldr	r0, [pc, #360]	; (1000da6c <ble_device_init+0x26c>)
1000d902:	4b5b      	ldr	r3, [pc, #364]	; (1000da70 <ble_device_init+0x270>)
1000d904:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d906:	0020      	movs	r0, r4
1000d908:	4b5a      	ldr	r3, [pc, #360]	; (1000da74 <ble_device_init+0x274>)
1000d90a:	4798      	blx	r3
1000d90c:	2800      	cmp	r0, #0
1000d90e:	d00b      	beq.n	1000d928 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d910:	4e54      	ldr	r6, [pc, #336]	; (1000da64 <ble_device_init+0x264>)
1000d912:	0030      	movs	r0, r6
1000d914:	4d54      	ldr	r5, [pc, #336]	; (1000da68 <ble_device_init+0x268>)
1000d916:	47a8      	blx	r5
1000d918:	4857      	ldr	r0, [pc, #348]	; (1000da78 <ble_device_init+0x278>)
1000d91a:	4c55      	ldr	r4, [pc, #340]	; (1000da70 <ble_device_init+0x270>)
1000d91c:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d91e:	0030      	movs	r0, r6
1000d920:	47a8      	blx	r5
1000d922:	4856      	ldr	r0, [pc, #344]	; (1000da7c <ble_device_init+0x27c>)
1000d924:	47a0      	blx	r4
1000d926:	e7fe      	b.n	1000d926 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d928:	4a55      	ldr	r2, [pc, #340]	; (1000da80 <ble_device_init+0x280>)
1000d92a:	2100      	movs	r1, #0
1000d92c:	2000      	movs	r0, #0
1000d92e:	4c55      	ldr	r4, [pc, #340]	; (1000da84 <ble_device_init+0x284>)
1000d930:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d932:	4a55      	ldr	r2, [pc, #340]	; (1000da88 <ble_device_init+0x288>)
1000d934:	2102      	movs	r1, #2
1000d936:	2000      	movs	r0, #0
1000d938:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d93a:	2109      	movs	r1, #9
1000d93c:	4853      	ldr	r0, [pc, #332]	; (1000da8c <ble_device_init+0x28c>)
1000d93e:	4b54      	ldr	r3, [pc, #336]	; (1000da90 <ble_device_init+0x290>)
1000d940:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d942:	2800      	cmp	r0, #0
1000d944:	d005      	beq.n	1000d952 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000d946:	4847      	ldr	r0, [pc, #284]	; (1000da64 <ble_device_init+0x264>)
1000d948:	4b47      	ldr	r3, [pc, #284]	; (1000da68 <ble_device_init+0x268>)
1000d94a:	4798      	blx	r3
1000d94c:	4851      	ldr	r0, [pc, #324]	; (1000da94 <ble_device_init+0x294>)
1000d94e:	4b48      	ldr	r3, [pc, #288]	; (1000da70 <ble_device_init+0x270>)
1000d950:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d952:	2207      	movs	r2, #7
1000d954:	4950      	ldr	r1, [pc, #320]	; (1000da98 <ble_device_init+0x298>)
1000d956:	3108      	adds	r1, #8
1000d958:	a804      	add	r0, sp, #16
1000d95a:	4b50      	ldr	r3, [pc, #320]	; (1000da9c <ble_device_init+0x29c>)
1000d95c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d95e:	2226      	movs	r2, #38	; 0x26
1000d960:	2100      	movs	r1, #0
1000d962:	a806      	add	r0, sp, #24
1000d964:	4b2b      	ldr	r3, [pc, #172]	; (1000da14 <ble_device_init+0x214>)
1000d966:	4798      	blx	r3
	
	if (addr == NULL)
1000d968:	2d00      	cmp	r5, #0
1000d96a:	d10c      	bne.n	1000d986 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d96c:	a804      	add	r0, sp, #16
1000d96e:	4b4c      	ldr	r3, [pc, #304]	; (1000daa0 <ble_device_init+0x2a0>)
1000d970:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d972:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d974:	2800      	cmp	r0, #0
1000d976:	d006      	beq.n	1000d986 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d978:	483a      	ldr	r0, [pc, #232]	; (1000da64 <ble_device_init+0x264>)
1000d97a:	4b3b      	ldr	r3, [pc, #236]	; (1000da68 <ble_device_init+0x268>)
1000d97c:	4798      	blx	r3
1000d97e:	4849      	ldr	r0, [pc, #292]	; (1000daa4 <ble_device_init+0x2a4>)
1000d980:	4b3b      	ldr	r3, [pc, #236]	; (1000da70 <ble_device_init+0x270>)
1000d982:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d984:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000d986:	4837      	ldr	r0, [pc, #220]	; (1000da64 <ble_device_init+0x264>)
1000d988:	4b37      	ldr	r3, [pc, #220]	; (1000da68 <ble_device_init+0x268>)
1000d98a:	4798      	blx	r3
1000d98c:	792b      	ldrb	r3, [r5, #4]
1000d98e:	796a      	ldrb	r2, [r5, #5]
1000d990:	79a9      	ldrb	r1, [r5, #6]
1000d992:	7828      	ldrb	r0, [r5, #0]
1000d994:	9003      	str	r0, [sp, #12]
1000d996:	7868      	ldrb	r0, [r5, #1]
1000d998:	9002      	str	r0, [sp, #8]
1000d99a:	78a8      	ldrb	r0, [r5, #2]
1000d99c:	9001      	str	r0, [sp, #4]
1000d99e:	78e8      	ldrb	r0, [r5, #3]
1000d9a0:	9000      	str	r0, [sp, #0]
1000d9a2:	4841      	ldr	r0, [pc, #260]	; (1000daa8 <ble_device_init+0x2a8>)
1000d9a4:	4c32      	ldr	r4, [pc, #200]	; (1000da70 <ble_device_init+0x270>)
1000d9a6:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d9a8:	ac06      	add	r4, sp, #24
1000d9aa:	230a      	movs	r3, #10
1000d9ac:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d9ae:	4b3f      	ldr	r3, [pc, #252]	; (1000daac <ble_device_init+0x2ac>)
1000d9b0:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d9b2:	2207      	movs	r2, #7
1000d9b4:	0029      	movs	r1, r5
1000d9b6:	a807      	add	r0, sp, #28
1000d9b8:	4b38      	ldr	r3, [pc, #224]	; (1000da9c <ble_device_init+0x29c>)
1000d9ba:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d9bc:	2300      	movs	r3, #0
1000d9be:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d9c0:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d9c2:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d9c4:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d9c6:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d9c8:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d9ca:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d9cc:	2380      	movs	r3, #128	; 0x80
1000d9ce:	009b      	lsls	r3, r3, #2
1000d9d0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d9d2:	0020      	movs	r0, r4
1000d9d4:	4b36      	ldr	r3, [pc, #216]	; (1000dab0 <ble_device_init+0x2b0>)
1000d9d6:	4798      	blx	r3
1000d9d8:	2800      	cmp	r0, #0
1000d9da:	d005      	beq.n	1000d9e8 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d9dc:	4821      	ldr	r0, [pc, #132]	; (1000da64 <ble_device_init+0x264>)
1000d9de:	4b22      	ldr	r3, [pc, #136]	; (1000da68 <ble_device_init+0x268>)
1000d9e0:	4798      	blx	r3
1000d9e2:	4834      	ldr	r0, [pc, #208]	; (1000dab4 <ble_device_init+0x2b4>)
1000d9e4:	4b22      	ldr	r3, [pc, #136]	; (1000da70 <ble_device_init+0x270>)
1000d9e6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d9e8:	0028      	movs	r0, r5
1000d9ea:	4b33      	ldr	r3, [pc, #204]	; (1000dab8 <ble_device_init+0x2b8>)
1000d9ec:	4798      	blx	r3
1000d9ee:	2800      	cmp	r0, #0
1000d9f0:	d005      	beq.n	1000d9fe <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d9f2:	481c      	ldr	r0, [pc, #112]	; (1000da64 <ble_device_init+0x264>)
1000d9f4:	4b1c      	ldr	r3, [pc, #112]	; (1000da68 <ble_device_init+0x268>)
1000d9f6:	4798      	blx	r3
1000d9f8:	4830      	ldr	r0, [pc, #192]	; (1000dabc <ble_device_init+0x2bc>)
1000d9fa:	4b1d      	ldr	r3, [pc, #116]	; (1000da70 <ble_device_init+0x270>)
1000d9fc:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d9fe:	b011      	add	sp, #68	; 0x44
1000da00:	bc3c      	pop	{r2, r3, r4, r5}
1000da02:	4690      	mov	r8, r2
1000da04:	4699      	mov	r9, r3
1000da06:	46a2      	mov	sl, r4
1000da08:	46ab      	mov	fp, r5
1000da0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da0c:	10019cbc 	.word	0x10019cbc
1000da10:	10019cc4 	.word	0x10019cc4
1000da14:	100166e1 	.word	0x100166e1
1000da18:	1001b45c 	.word	0x1001b45c
1000da1c:	000004e2 	.word	0x000004e2
1000da20:	100197dc 	.word	0x100197dc
1000da24:	10019cc0 	.word	0x10019cc0
1000da28:	1001b494 	.word	0x1001b494
1000da2c:	1001b48c 	.word	0x1001b48c
1000da30:	1001b7c8 	.word	0x1001b7c8
1000da34:	100193dc 	.word	0x100193dc
1000da38:	10019ccc 	.word	0x10019ccc
1000da3c:	1001b470 	.word	0x1001b470
1000da40:	1001b434 	.word	0x1001b434
1000da44:	1001b448 	.word	0x1001b448
1000da48:	1001b19c 	.word	0x1001b19c
1000da4c:	1001b490 	.word	0x1001b490
1000da50:	1001b198 	.word	0x1001b198
1000da54:	1001b420 	.word	0x1001b420
1000da58:	1001b9d4 	.word	0x1001b9d4
1000da5c:	1001b1b0 	.word	0x1001b1b0
1000da60:	1001b41c 	.word	0x1001b41c
1000da64:	10017888 	.word	0x10017888
1000da68:	10016949 	.word	0x10016949
1000da6c:	10018c08 	.word	0x10018c08
1000da70:	10016829 	.word	0x10016829
1000da74:	1000f85d 	.word	0x1000f85d
1000da78:	10018c2c 	.word	0x10018c2c
1000da7c:	10018c58 	.word	0x10018c58
1000da80:	10019004 	.word	0x10019004
1000da84:	1000d731 	.word	0x1000d731
1000da88:	100185bc 	.word	0x100185bc
1000da8c:	10018ca0 	.word	0x10018ca0
1000da90:	1000f775 	.word	0x1000f775
1000da94:	10018cac 	.word	0x10018cac
1000da98:	100185ac 	.word	0x100185ac
1000da9c:	100166cf 	.word	0x100166cf
1000daa0:	1000f7a9 	.word	0x1000f7a9
1000daa4:	10018cc4 	.word	0x10018cc4
1000daa8:	10018cf0 	.word	0x10018cf0
1000daac:	00003a98 	.word	0x00003a98
1000dab0:	1000f7cd 	.word	0x1000f7cd
1000dab4:	10018d40 	.word	0x10018d40
1000dab8:	1000fa11 	.word	0x1000fa11
1000dabc:	10018d7c 	.word	0x10018d7c

1000dac0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000dac0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000dac2:	2200      	movs	r2, #0
1000dac4:	2100      	movs	r1, #0
1000dac6:	4b0a      	ldr	r3, [pc, #40]	; (1000daf0 <ble_send_slave_sec_request+0x30>)
1000dac8:	4798      	blx	r3
1000daca:	1e04      	subs	r4, r0, #0
1000dacc:	d106      	bne.n	1000dadc <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000dace:	4809      	ldr	r0, [pc, #36]	; (1000daf4 <ble_send_slave_sec_request+0x34>)
1000dad0:	4b09      	ldr	r3, [pc, #36]	; (1000daf8 <ble_send_slave_sec_request+0x38>)
1000dad2:	4798      	blx	r3
1000dad4:	4809      	ldr	r0, [pc, #36]	; (1000dafc <ble_send_slave_sec_request+0x3c>)
1000dad6:	4b0a      	ldr	r3, [pc, #40]	; (1000db00 <ble_send_slave_sec_request+0x40>)
1000dad8:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000dada:	e006      	b.n	1000daea <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000dadc:	4805      	ldr	r0, [pc, #20]	; (1000daf4 <ble_send_slave_sec_request+0x34>)
1000dade:	4b06      	ldr	r3, [pc, #24]	; (1000daf8 <ble_send_slave_sec_request+0x38>)
1000dae0:	4798      	blx	r3
1000dae2:	4808      	ldr	r0, [pc, #32]	; (1000db04 <ble_send_slave_sec_request+0x44>)
1000dae4:	4b06      	ldr	r3, [pc, #24]	; (1000db00 <ble_send_slave_sec_request+0x40>)
1000dae6:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000dae8:	24e2      	movs	r4, #226	; 0xe2
}
1000daea:	0020      	movs	r0, r4
1000daec:	bd10      	pop	{r4, pc}
1000daee:	46c0      	nop			; (mov r8, r8)
1000daf0:	100107f5 	.word	0x100107f5
1000daf4:	10017888 	.word	0x10017888
1000daf8:	10016949 	.word	0x10016949
1000dafc:	10018dcc 	.word	0x10018dcc
1000db00:	10016829 	.word	0x10016829
1000db04:	10018df0 	.word	0x10018df0

1000db08 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000db08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db0a:	465f      	mov	r7, fp
1000db0c:	464e      	mov	r6, r9
1000db0e:	4645      	mov	r5, r8
1000db10:	b4e0      	push	{r5, r6, r7}
1000db12:	b09a      	sub	sp, #104	; 0x68
1000db14:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000db16:	7a86      	ldrb	r6, [r0, #10]
1000db18:	2e00      	cmp	r6, #0
1000db1a:	d000      	beq.n	1000db1e <ble_connected_state_handler+0x16>
1000db1c:	e0cc      	b.n	1000dcb8 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000db1e:	4878      	ldr	r0, [pc, #480]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000db20:	4f78      	ldr	r7, [pc, #480]	; (1000dd04 <ble_connected_state_handler+0x1fc>)
1000db22:	47b8      	blx	r7
1000db24:	792b      	ldrb	r3, [r5, #4]
1000db26:	796a      	ldrb	r2, [r5, #5]
1000db28:	79a9      	ldrb	r1, [r5, #6]
1000db2a:	7868      	ldrb	r0, [r5, #1]
1000db2c:	9002      	str	r0, [sp, #8]
1000db2e:	78a8      	ldrb	r0, [r5, #2]
1000db30:	9001      	str	r0, [sp, #4]
1000db32:	78e8      	ldrb	r0, [r5, #3]
1000db34:	9000      	str	r0, [sp, #0]
1000db36:	4874      	ldr	r0, [pc, #464]	; (1000dd08 <ble_connected_state_handler+0x200>)
1000db38:	4c74      	ldr	r4, [pc, #464]	; (1000dd0c <ble_connected_state_handler+0x204>)
1000db3a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000db3c:	4870      	ldr	r0, [pc, #448]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000db3e:	47b8      	blx	r7
1000db40:	8929      	ldrh	r1, [r5, #8]
1000db42:	4873      	ldr	r0, [pc, #460]	; (1000dd10 <ble_connected_state_handler+0x208>)
1000db44:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000db46:	2212      	movs	r2, #18
1000db48:	0029      	movs	r1, r5
1000db4a:	4872      	ldr	r0, [pc, #456]	; (1000dd14 <ble_connected_state_handler+0x20c>)
1000db4c:	4b72      	ldr	r3, [pc, #456]	; (1000dd18 <ble_connected_state_handler+0x210>)
1000db4e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000db50:	9504      	str	r5, [sp, #16]
1000db52:	2207      	movs	r2, #7
1000db54:	0029      	movs	r1, r5
1000db56:	4871      	ldr	r0, [pc, #452]	; (1000dd1c <ble_connected_state_handler+0x214>)
1000db58:	4b71      	ldr	r3, [pc, #452]	; (1000dd20 <ble_connected_state_handler+0x218>)
1000db5a:	4798      	blx	r3
1000db5c:	2800      	cmp	r0, #0
1000db5e:	d100      	bne.n	1000db62 <ble_connected_state_handler+0x5a>
1000db60:	e0b3      	b.n	1000dcca <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000db62:	782b      	ldrb	r3, [r5, #0]
1000db64:	2b02      	cmp	r3, #2
1000db66:	d000      	beq.n	1000db6a <ble_connected_state_handler+0x62>
1000db68:	e0af      	b.n	1000dcca <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000db6a:	2250      	movs	r2, #80	; 0x50
1000db6c:	2100      	movs	r1, #0
1000db6e:	a806      	add	r0, sp, #24
1000db70:	4b6c      	ldr	r3, [pc, #432]	; (1000dd24 <ble_connected_state_handler+0x21c>)
1000db72:	4798      	blx	r3
1000db74:	4f6c      	ldr	r7, [pc, #432]	; (1000dd28 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000db76:	2300      	movs	r3, #0
1000db78:	e00b      	b.n	1000db92 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000db7a:	1c59      	adds	r1, r3, #1
1000db7c:	7814      	ldrb	r4, [r2, #0]
1000db7e:	a806      	add	r0, sp, #24
1000db80:	54c4      	strb	r4, [r0, r3]
1000db82:	3201      	adds	r2, #1
1000db84:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000db86:	42b3      	cmp	r3, r6
1000db88:	d1f7      	bne.n	1000db7a <ble_connected_state_handler+0x72>
1000db8a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000db8c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000db8e:	2b50      	cmp	r3, #80	; 0x50
1000db90:	d004      	beq.n	1000db9c <ble_connected_state_handler+0x94>
1000db92:	001e      	movs	r6, r3
1000db94:	3610      	adds	r6, #16
1000db96:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000db98:	003a      	movs	r2, r7
1000db9a:	e7ee      	b.n	1000db7a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000db9c:	aa06      	add	r2, sp, #24
1000db9e:	0029      	movs	r1, r5
1000dba0:	2005      	movs	r0, #5
1000dba2:	4b62      	ldr	r3, [pc, #392]	; (1000dd2c <ble_connected_state_handler+0x224>)
1000dba4:	4798      	blx	r3
1000dba6:	1e06      	subs	r6, r0, #0
1000dba8:	d106      	bne.n	1000dbb8 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000dbaa:	4855      	ldr	r0, [pc, #340]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000dbac:	4b55      	ldr	r3, [pc, #340]	; (1000dd04 <ble_connected_state_handler+0x1fc>)
1000dbae:	4798      	blx	r3
1000dbb0:	485f      	ldr	r0, [pc, #380]	; (1000dd30 <ble_connected_state_handler+0x228>)
1000dbb2:	4b56      	ldr	r3, [pc, #344]	; (1000dd0c <ble_connected_state_handler+0x204>)
1000dbb4:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000dbb6:	e09c      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000dbb8:	4851      	ldr	r0, [pc, #324]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000dbba:	4b52      	ldr	r3, [pc, #328]	; (1000dd04 <ble_connected_state_handler+0x1fc>)
1000dbbc:	4798      	blx	r3
1000dbbe:	485d      	ldr	r0, [pc, #372]	; (1000dd34 <ble_connected_state_handler+0x22c>)
1000dbc0:	4b52      	ldr	r3, [pc, #328]	; (1000dd0c <ble_connected_state_handler+0x204>)
1000dbc2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000dbc4:	26e2      	movs	r6, #226	; 0xe2
1000dbc6:	e094      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
1000dbc8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dbca:	9405      	str	r4, [sp, #20]
1000dbcc:	2207      	movs	r2, #7
1000dbce:	9904      	ldr	r1, [sp, #16]
1000dbd0:	4648      	mov	r0, r9
1000dbd2:	47d8      	blx	fp
1000dbd4:	2800      	cmp	r0, #0
1000dbd6:	d109      	bne.n	1000dbec <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dbd8:	9a05      	ldr	r2, [sp, #20]
1000dbda:	0153      	lsls	r3, r2, #5
1000dbdc:	1a9b      	subs	r3, r3, r2
1000dbde:	009a      	lsls	r2, r3, #2
1000dbe0:	4b55      	ldr	r3, [pc, #340]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dbe2:	189b      	adds	r3, r3, r2
1000dbe4:	335e      	adds	r3, #94	; 0x5e
1000dbe6:	2202      	movs	r2, #2
1000dbe8:	701a      	strb	r2, [r3, #0]
1000dbea:	e02b      	b.n	1000dc44 <ble_connected_state_handler+0x13c>
1000dbec:	3401      	adds	r4, #1
1000dbee:	237c      	movs	r3, #124	; 0x7c
1000dbf0:	469c      	mov	ip, r3
1000dbf2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbf4:	2c05      	cmp	r4, #5
1000dbf6:	d1e7      	bne.n	1000dbc8 <ble_connected_state_handler+0xc0>
1000dbf8:	e072      	b.n	1000dce0 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dbfa:	001c      	movs	r4, r3
1000dbfc:	7811      	ldrb	r1, [r2, #0]
1000dbfe:	2900      	cmp	r1, #0
1000dc00:	d11a      	bne.n	1000dc38 <ble_connected_state_handler+0x130>
1000dc02:	e001      	b.n	1000dc08 <ble_connected_state_handler+0x100>
1000dc04:	2400      	movs	r4, #0
1000dc06:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000dc08:	0163      	lsls	r3, r4, #5
1000dc0a:	4699      	mov	r9, r3
1000dc0c:	1b18      	subs	r0, r3, r4
1000dc0e:	0080      	lsls	r0, r0, #2
1000dc10:	4b49      	ldr	r3, [pc, #292]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dc12:	4698      	mov	r8, r3
1000dc14:	4440      	add	r0, r8
1000dc16:	2212      	movs	r2, #18
1000dc18:	0029      	movs	r1, r5
1000dc1a:	4b3f      	ldr	r3, [pc, #252]	; (1000dd18 <ble_connected_state_handler+0x210>)
1000dc1c:	4798      	blx	r3
						ble_device_count++;
1000dc1e:	4a47      	ldr	r2, [pc, #284]	; (1000dd3c <ble_connected_state_handler+0x234>)
1000dc20:	7813      	ldrb	r3, [r2, #0]
1000dc22:	3301      	adds	r3, #1
1000dc24:	b2db      	uxtb	r3, r3
1000dc26:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dc28:	464b      	mov	r3, r9
1000dc2a:	1b1b      	subs	r3, r3, r4
1000dc2c:	009b      	lsls	r3, r3, #2
1000dc2e:	4443      	add	r3, r8
1000dc30:	335e      	adds	r3, #94	; 0x5e
1000dc32:	2202      	movs	r2, #2
1000dc34:	701a      	strb	r2, [r3, #0]
						break;
1000dc36:	e005      	b.n	1000dc44 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc38:	1c79      	adds	r1, r7, #1
1000dc3a:	b2cf      	uxtb	r7, r1
1000dc3c:	3301      	adds	r3, #1
1000dc3e:	327c      	adds	r2, #124	; 0x7c
1000dc40:	2f05      	cmp	r7, #5
1000dc42:	d1da      	bne.n	1000dbfa <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dc44:	2207      	movs	r2, #7
1000dc46:	0029      	movs	r1, r5
1000dc48:	4834      	ldr	r0, [pc, #208]	; (1000dd1c <ble_connected_state_handler+0x214>)
1000dc4a:	4b35      	ldr	r3, [pc, #212]	; (1000dd20 <ble_connected_state_handler+0x218>)
1000dc4c:	4798      	blx	r3
1000dc4e:	2800      	cmp	r0, #0
1000dc50:	d10c      	bne.n	1000dc6c <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000dc52:	017b      	lsls	r3, r7, #5
1000dc54:	1bdb      	subs	r3, r3, r7
1000dc56:	009b      	lsls	r3, r3, #2
1000dc58:	4a37      	ldr	r2, [pc, #220]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dc5a:	18d3      	adds	r3, r2, r3
1000dc5c:	2205      	movs	r2, #5
1000dc5e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dc60:	3202      	adds	r2, #2
1000dc62:	2100      	movs	r1, #0
1000dc64:	482d      	ldr	r0, [pc, #180]	; (1000dd1c <ble_connected_state_handler+0x214>)
1000dc66:	4b2f      	ldr	r3, [pc, #188]	; (1000dd24 <ble_connected_state_handler+0x21c>)
1000dc68:	4798      	blx	r3
1000dc6a:	e042      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dc6c:	4b32      	ldr	r3, [pc, #200]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dc6e:	4698      	mov	r8, r3
1000dc70:	017c      	lsls	r4, r7, #5
1000dc72:	1be3      	subs	r3, r4, r7
1000dc74:	009b      	lsls	r3, r3, #2
1000dc76:	4443      	add	r3, r8
1000dc78:	220a      	movs	r2, #10
1000dc7a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dc7c:	3a03      	subs	r2, #3
1000dc7e:	2100      	movs	r1, #0
1000dc80:	4826      	ldr	r0, [pc, #152]	; (1000dd1c <ble_connected_state_handler+0x214>)
1000dc82:	4b28      	ldr	r3, [pc, #160]	; (1000dd24 <ble_connected_state_handler+0x21c>)
1000dc84:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dc86:	1be4      	subs	r4, r4, r7
1000dc88:	00a4      	lsls	r4, r4, #2
1000dc8a:	4444      	add	r4, r8
1000dc8c:	7ca3      	ldrb	r3, [r4, #18]
1000dc8e:	2b0a      	cmp	r3, #10
1000dc90:	d12f      	bne.n	1000dcf2 <ble_connected_state_handler+0x1ea>
1000dc92:	e00d      	b.n	1000dcb0 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000dc94:	481a      	ldr	r0, [pc, #104]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000dc96:	4b1b      	ldr	r3, [pc, #108]	; (1000dd04 <ble_connected_state_handler+0x1fc>)
1000dc98:	4798      	blx	r3
1000dc9a:	4b28      	ldr	r3, [pc, #160]	; (1000dd3c <ble_connected_state_handler+0x234>)
1000dc9c:	7819      	ldrb	r1, [r3, #0]
1000dc9e:	b2c9      	uxtb	r1, r1
1000dca0:	4827      	ldr	r0, [pc, #156]	; (1000dd40 <ble_connected_state_handler+0x238>)
1000dca2:	4b1a      	ldr	r3, [pc, #104]	; (1000dd0c <ble_connected_state_handler+0x204>)
1000dca4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000dca6:	8928      	ldrh	r0, [r5, #8]
1000dca8:	2113      	movs	r1, #19
1000dcaa:	4b26      	ldr	r3, [pc, #152]	; (1000dd44 <ble_connected_state_handler+0x23c>)
1000dcac:	4798      	blx	r3
1000dcae:	e020      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000dcb0:	8928      	ldrh	r0, [r5, #8]
1000dcb2:	4b25      	ldr	r3, [pc, #148]	; (1000dd48 <ble_connected_state_handler+0x240>)
1000dcb4:	4798      	blx	r3
1000dcb6:	e01c      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000dcb8:	4811      	ldr	r0, [pc, #68]	; (1000dd00 <ble_connected_state_handler+0x1f8>)
1000dcba:	4b12      	ldr	r3, [pc, #72]	; (1000dd04 <ble_connected_state_handler+0x1fc>)
1000dcbc:	4798      	blx	r3
1000dcbe:	7aa9      	ldrb	r1, [r5, #10]
1000dcc0:	4822      	ldr	r0, [pc, #136]	; (1000dd4c <ble_connected_state_handler+0x244>)
1000dcc2:	4b12      	ldr	r3, [pc, #72]	; (1000dd0c <ble_connected_state_handler+0x204>)
1000dcc4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000dcc6:	2600      	movs	r6, #0
1000dcc8:	e013      	b.n	1000dcf2 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000dcca:	4b1c      	ldr	r3, [pc, #112]	; (1000dd3c <ble_connected_state_handler+0x234>)
1000dccc:	781b      	ldrb	r3, [r3, #0]
1000dcce:	b2db      	uxtb	r3, r3
1000dcd0:	2b04      	cmp	r3, #4
1000dcd2:	d8df      	bhi.n	1000dc94 <ble_connected_state_handler+0x18c>
1000dcd4:	4b18      	ldr	r3, [pc, #96]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dcd6:	4699      	mov	r9, r3
1000dcd8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dcda:	4b11      	ldr	r3, [pc, #68]	; (1000dd20 <ble_connected_state_handler+0x218>)
1000dcdc:	469b      	mov	fp, r3
1000dcde:	e773      	b.n	1000dbc8 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dce0:	235e      	movs	r3, #94	; 0x5e
1000dce2:	4a15      	ldr	r2, [pc, #84]	; (1000dd38 <ble_connected_state_handler+0x230>)
1000dce4:	5cd3      	ldrb	r3, [r2, r3]
1000dce6:	2b00      	cmp	r3, #0
1000dce8:	d08c      	beq.n	1000dc04 <ble_connected_state_handler+0xfc>
1000dcea:	4a19      	ldr	r2, [pc, #100]	; (1000dd50 <ble_connected_state_handler+0x248>)
1000dcec:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dcee:	2701      	movs	r7, #1
1000dcf0:	e783      	b.n	1000dbfa <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000dcf2:	0030      	movs	r0, r6
1000dcf4:	b01a      	add	sp, #104	; 0x68
1000dcf6:	bc1c      	pop	{r2, r3, r4}
1000dcf8:	4690      	mov	r8, r2
1000dcfa:	4699      	mov	r9, r3
1000dcfc:	46a3      	mov	fp, r4
1000dcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd00:	10017888 	.word	0x10017888
1000dd04:	10016949 	.word	0x10016949
1000dd08:	10018e10 	.word	0x10018e10
1000dd0c:	10016829 	.word	0x10016829
1000dd10:	10018e54 	.word	0x10018e54
1000dd14:	1001b45c 	.word	0x1001b45c
1000dd18:	100166cf 	.word	0x100166cf
1000dd1c:	10019cc4 	.word	0x10019cc4
1000dd20:	100166b1 	.word	0x100166b1
1000dd24:	100166e1 	.word	0x100166e1
1000dd28:	1001b1f6 	.word	0x1001b1f6
1000dd2c:	1000fc7d 	.word	0x1000fc7d
1000dd30:	10018e6c 	.word	0x10018e6c
1000dd34:	10018e90 	.word	0x10018e90
1000dd38:	1001b1b0 	.word	0x1001b1b0
1000dd3c:	1001b41c 	.word	0x1001b41c
1000dd40:	10018eb4 	.word	0x10018eb4
1000dd44:	1000fc51 	.word	0x1000fc51
1000dd48:	1000dac1 	.word	0x1000dac1
1000dd4c:	10018ef0 	.word	0x10018ef0
1000dd50:	1001b28a 	.word	0x1001b28a

1000dd54 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000dd54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd56:	4647      	mov	r7, r8
1000dd58:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000dd5a:	7803      	ldrb	r3, [r0, #0]
1000dd5c:	2b00      	cmp	r3, #0
1000dd5e:	d152      	bne.n	1000de06 <ble_resolv_rand_addr_handler+0xb2>
1000dd60:	4d3e      	ldr	r5, [pc, #248]	; (1000de5c <ble_resolv_rand_addr_handler+0x108>)
1000dd62:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000dd64:	1c46      	adds	r6, r0, #1
1000dd66:	4f3e      	ldr	r7, [pc, #248]	; (1000de60 <ble_resolv_rand_addr_handler+0x10c>)
1000dd68:	2210      	movs	r2, #16
1000dd6a:	0029      	movs	r1, r5
1000dd6c:	0030      	movs	r0, r6
1000dd6e:	47b8      	blx	r7
1000dd70:	2800      	cmp	r0, #0
1000dd72:	d031      	beq.n	1000ddd8 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dd74:	3401      	adds	r4, #1
1000dd76:	b2e4      	uxtb	r4, r4
1000dd78:	357c      	adds	r5, #124	; 0x7c
1000dd7a:	2c05      	cmp	r4, #5
1000dd7c:	d1f4      	bne.n	1000dd68 <ble_resolv_rand_addr_handler+0x14>
1000dd7e:	e042      	b.n	1000de06 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dd80:	001d      	movs	r5, r3
1000dd82:	7811      	ldrb	r1, [r2, #0]
1000dd84:	2900      	cmp	r1, #0
1000dd86:	d11b      	bne.n	1000ddc0 <ble_resolv_rand_addr_handler+0x6c>
1000dd88:	e001      	b.n	1000dd8e <ble_resolv_rand_addr_handler+0x3a>
1000dd8a:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dd8c:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000dd8e:	4b35      	ldr	r3, [pc, #212]	; (1000de64 <ble_resolv_rand_addr_handler+0x110>)
1000dd90:	4698      	mov	r8, r3
1000dd92:	016e      	lsls	r6, r5, #5
1000dd94:	1b77      	subs	r7, r6, r5
1000dd96:	00bf      	lsls	r7, r7, #2
1000dd98:	4447      	add	r7, r8
1000dd9a:	2212      	movs	r2, #18
1000dd9c:	4932      	ldr	r1, [pc, #200]	; (1000de68 <ble_resolv_rand_addr_handler+0x114>)
1000dd9e:	0038      	movs	r0, r7
1000dda0:	4b32      	ldr	r3, [pc, #200]	; (1000de6c <ble_resolv_rand_addr_handler+0x118>)
1000dda2:	4798      	blx	r3
				ble_device_count++;
1000dda4:	4a32      	ldr	r2, [pc, #200]	; (1000de70 <ble_resolv_rand_addr_handler+0x11c>)
1000dda6:	7813      	ldrb	r3, [r2, #0]
1000dda8:	3301      	adds	r3, #1
1000ddaa:	b2db      	uxtb	r3, r3
1000ddac:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ddae:	375e      	adds	r7, #94	; 0x5e
1000ddb0:	2302      	movs	r3, #2
1000ddb2:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ddb4:	1b75      	subs	r5, r6, r5
1000ddb6:	00ad      	lsls	r5, r5, #2
1000ddb8:	4445      	add	r5, r8
1000ddba:	3308      	adds	r3, #8
1000ddbc:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000ddbe:	e031      	b.n	1000de24 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ddc0:	3401      	adds	r4, #1
1000ddc2:	b2e4      	uxtb	r4, r4
1000ddc4:	3301      	adds	r3, #1
1000ddc6:	327c      	adds	r2, #124	; 0x7c
1000ddc8:	2c05      	cmp	r4, #5
1000ddca:	d1d9      	bne.n	1000dd80 <ble_resolv_rand_addr_handler+0x2c>
1000ddcc:	e03a      	b.n	1000de44 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ddce:	4b26      	ldr	r3, [pc, #152]	; (1000de68 <ble_resolv_rand_addr_handler+0x114>)
1000ddd0:	8918      	ldrh	r0, [r3, #8]
1000ddd2:	4b28      	ldr	r3, [pc, #160]	; (1000de74 <ble_resolv_rand_addr_handler+0x120>)
1000ddd4:	4798      	blx	r3
1000ddd6:	e03c      	b.n	1000de52 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000ddd8:	4827      	ldr	r0, [pc, #156]	; (1000de78 <ble_resolv_rand_addr_handler+0x124>)
1000ddda:	4b28      	ldr	r3, [pc, #160]	; (1000de7c <ble_resolv_rand_addr_handler+0x128>)
1000dddc:	4798      	blx	r3
1000ddde:	4828      	ldr	r0, [pc, #160]	; (1000de80 <ble_resolv_rand_addr_handler+0x12c>)
1000dde0:	4b28      	ldr	r3, [pc, #160]	; (1000de84 <ble_resolv_rand_addr_handler+0x130>)
1000dde2:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dde4:	481f      	ldr	r0, [pc, #124]	; (1000de64 <ble_resolv_rand_addr_handler+0x110>)
1000dde6:	0163      	lsls	r3, r4, #5
1000dde8:	1b1a      	subs	r2, r3, r4
1000ddea:	0092      	lsls	r2, r2, #2
1000ddec:	1882      	adds	r2, r0, r2
1000ddee:	0011      	movs	r1, r2
1000ddf0:	315e      	adds	r1, #94	; 0x5e
1000ddf2:	2502      	movs	r5, #2
1000ddf4:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ddf6:	210a      	movs	r1, #10
1000ddf8:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ddfa:	0010      	movs	r0, r2
1000ddfc:	2212      	movs	r2, #18
1000ddfe:	491a      	ldr	r1, [pc, #104]	; (1000de68 <ble_resolv_rand_addr_handler+0x114>)
1000de00:	4b1a      	ldr	r3, [pc, #104]	; (1000de6c <ble_resolv_rand_addr_handler+0x118>)
1000de02:	4798      	blx	r3
1000de04:	e00e      	b.n	1000de24 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000de06:	481c      	ldr	r0, [pc, #112]	; (1000de78 <ble_resolv_rand_addr_handler+0x124>)
1000de08:	4b1c      	ldr	r3, [pc, #112]	; (1000de7c <ble_resolv_rand_addr_handler+0x128>)
1000de0a:	4798      	blx	r3
1000de0c:	481e      	ldr	r0, [pc, #120]	; (1000de88 <ble_resolv_rand_addr_handler+0x134>)
1000de0e:	4b1d      	ldr	r3, [pc, #116]	; (1000de84 <ble_resolv_rand_addr_handler+0x130>)
1000de10:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000de12:	235e      	movs	r3, #94	; 0x5e
1000de14:	4a13      	ldr	r2, [pc, #76]	; (1000de64 <ble_resolv_rand_addr_handler+0x110>)
1000de16:	5cd3      	ldrb	r3, [r2, r3]
1000de18:	2b00      	cmp	r3, #0
1000de1a:	d0b6      	beq.n	1000dd8a <ble_resolv_rand_addr_handler+0x36>
1000de1c:	4a1b      	ldr	r2, [pc, #108]	; (1000de8c <ble_resolv_rand_addr_handler+0x138>)
1000de1e:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de20:	2401      	movs	r4, #1
1000de22:	e7ad      	b.n	1000dd80 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000de24:	4814      	ldr	r0, [pc, #80]	; (1000de78 <ble_resolv_rand_addr_handler+0x124>)
1000de26:	4b15      	ldr	r3, [pc, #84]	; (1000de7c <ble_resolv_rand_addr_handler+0x128>)
1000de28:	4798      	blx	r3
1000de2a:	0021      	movs	r1, r4
1000de2c:	4818      	ldr	r0, [pc, #96]	; (1000de90 <ble_resolv_rand_addr_handler+0x13c>)
1000de2e:	4b15      	ldr	r3, [pc, #84]	; (1000de84 <ble_resolv_rand_addr_handler+0x130>)
1000de30:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000de32:	0163      	lsls	r3, r4, #5
1000de34:	1b1c      	subs	r4, r3, r4
1000de36:	00a4      	lsls	r4, r4, #2
1000de38:	4b0a      	ldr	r3, [pc, #40]	; (1000de64 <ble_resolv_rand_addr_handler+0x110>)
1000de3a:	191c      	adds	r4, r3, r4
1000de3c:	7ca3      	ldrb	r3, [r4, #18]
1000de3e:	2b0a      	cmp	r3, #10
1000de40:	d107      	bne.n	1000de52 <ble_resolv_rand_addr_handler+0xfe>
1000de42:	e7c4      	b.n	1000ddce <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000de44:	480c      	ldr	r0, [pc, #48]	; (1000de78 <ble_resolv_rand_addr_handler+0x124>)
1000de46:	4b0d      	ldr	r3, [pc, #52]	; (1000de7c <ble_resolv_rand_addr_handler+0x128>)
1000de48:	4798      	blx	r3
1000de4a:	2105      	movs	r1, #5
1000de4c:	4810      	ldr	r0, [pc, #64]	; (1000de90 <ble_resolv_rand_addr_handler+0x13c>)
1000de4e:	4b0d      	ldr	r3, [pc, #52]	; (1000de84 <ble_resolv_rand_addr_handler+0x130>)
1000de50:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000de52:	2000      	movs	r0, #0
1000de54:	bc04      	pop	{r2}
1000de56:	4690      	mov	r8, r2
1000de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de5a:	46c0      	nop			; (mov r8, r8)
1000de5c:	1001b1f6 	.word	0x1001b1f6
1000de60:	100166b1 	.word	0x100166b1
1000de64:	1001b1b0 	.word	0x1001b1b0
1000de68:	1001b45c 	.word	0x1001b45c
1000de6c:	100166cf 	.word	0x100166cf
1000de70:	1001b41c 	.word	0x1001b41c
1000de74:	1000dac1 	.word	0x1000dac1
1000de78:	10017888 	.word	0x10017888
1000de7c:	10016949 	.word	0x10016949
1000de80:	10018f18 	.word	0x10018f18
1000de84:	10016829 	.word	0x10016829
1000de88:	10018f30 	.word	0x10018f30
1000de8c:	1001b28a 	.word	0x1001b28a
1000de90:	10018f4c 	.word	0x10018f4c

1000de94 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000de96:	0004      	movs	r4, r0
1000de98:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000de9a:	4848      	ldr	r0, [pc, #288]	; (1000dfbc <ble_event_manager+0x128>)
1000de9c:	4b48      	ldr	r3, [pc, #288]	; (1000dfc0 <ble_event_manager+0x12c>)
1000de9e:	4798      	blx	r3
1000dea0:	0021      	movs	r1, r4
1000dea2:	4848      	ldr	r0, [pc, #288]	; (1000dfc4 <ble_event_manager+0x130>)
1000dea4:	4b48      	ldr	r3, [pc, #288]	; (1000dfc8 <ble_event_manager+0x134>)
1000dea6:	4798      	blx	r3
	switch(events)
1000dea8:	2c3b      	cmp	r4, #59	; 0x3b
1000deaa:	d879      	bhi.n	1000dfa0 <ble_event_manager+0x10c>
1000deac:	00a3      	lsls	r3, r4, #2
1000deae:	4a47      	ldr	r2, [pc, #284]	; (1000dfcc <ble_event_manager+0x138>)
1000deb0:	58d3      	ldr	r3, [r2, r3]
1000deb2:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000deb4:	00a4      	lsls	r4, r4, #2
1000deb6:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000deb8:	4f45      	ldr	r7, [pc, #276]	; (1000dfd0 <ble_event_manager+0x13c>)
1000deba:	59bb      	ldr	r3, [r7, r6]
1000debc:	2b00      	cmp	r3, #0
1000debe:	d004      	beq.n	1000deca <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dec0:	591b      	ldr	r3, [r3, r4]
1000dec2:	2b00      	cmp	r3, #0
1000dec4:	d001      	beq.n	1000deca <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000dec6:	0028      	movs	r0, r5
1000dec8:	4798      	blx	r3
1000deca:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000decc:	2e14      	cmp	r6, #20
1000dece:	d1f4      	bne.n	1000deba <ble_event_manager+0x26>
1000ded0:	e072      	b.n	1000dfb8 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ded2:	3c13      	subs	r4, #19
1000ded4:	b2e4      	uxtb	r4, r4
1000ded6:	00a4      	lsls	r4, r4, #2
1000ded8:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000deda:	4f3e      	ldr	r7, [pc, #248]	; (1000dfd4 <ble_event_manager+0x140>)
1000dedc:	59bb      	ldr	r3, [r7, r6]
1000dede:	2b00      	cmp	r3, #0
1000dee0:	d004      	beq.n	1000deec <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dee2:	591b      	ldr	r3, [r3, r4]
1000dee4:	2b00      	cmp	r3, #0
1000dee6:	d001      	beq.n	1000deec <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000dee8:	0028      	movs	r0, r5
1000deea:	4798      	blx	r3
1000deec:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000deee:	2e14      	cmp	r6, #20
1000def0:	d1f4      	bne.n	1000dedc <ble_event_manager+0x48>
1000def2:	e061      	b.n	1000dfb8 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000def4:	3c1d      	subs	r4, #29
1000def6:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000def8:	4830      	ldr	r0, [pc, #192]	; (1000dfbc <ble_event_manager+0x128>)
1000defa:	4b31      	ldr	r3, [pc, #196]	; (1000dfc0 <ble_event_manager+0x12c>)
1000defc:	4798      	blx	r3
1000defe:	0021      	movs	r1, r4
1000df00:	4835      	ldr	r0, [pc, #212]	; (1000dfd8 <ble_event_manager+0x144>)
1000df02:	4b31      	ldr	r3, [pc, #196]	; (1000dfc8 <ble_event_manager+0x134>)
1000df04:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df06:	00a4      	lsls	r4, r4, #2
1000df08:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000df0a:	4f34      	ldr	r7, [pc, #208]	; (1000dfdc <ble_event_manager+0x148>)
1000df0c:	59bb      	ldr	r3, [r7, r6]
1000df0e:	2b00      	cmp	r3, #0
1000df10:	d004      	beq.n	1000df1c <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df12:	591b      	ldr	r3, [r3, r4]
1000df14:	2b00      	cmp	r3, #0
1000df16:	d001      	beq.n	1000df1c <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000df18:	0028      	movs	r0, r5
1000df1a:	4798      	blx	r3
1000df1c:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000df1e:	2e14      	cmp	r6, #20
1000df20:	d1f4      	bne.n	1000df0c <ble_event_manager+0x78>
1000df22:	e049      	b.n	1000dfb8 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000df24:	3c27      	subs	r4, #39	; 0x27
1000df26:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000df28:	4b2d      	ldr	r3, [pc, #180]	; (1000dfe0 <ble_event_manager+0x14c>)
1000df2a:	681b      	ldr	r3, [r3, #0]
1000df2c:	2b00      	cmp	r3, #0
1000df2e:	d043      	beq.n	1000dfb8 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df30:	00a4      	lsls	r4, r4, #2
1000df32:	58e3      	ldr	r3, [r4, r3]
1000df34:	2b00      	cmp	r3, #0
1000df36:	d03f      	beq.n	1000dfb8 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000df38:	0028      	movs	r0, r5
1000df3a:	4798      	blx	r3
1000df3c:	e03c      	b.n	1000dfb8 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000df3e:	3c2d      	subs	r4, #45	; 0x2d
1000df40:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000df42:	4b28      	ldr	r3, [pc, #160]	; (1000dfe4 <ble_event_manager+0x150>)
1000df44:	681b      	ldr	r3, [r3, #0]
1000df46:	2b00      	cmp	r3, #0
1000df48:	d036      	beq.n	1000dfb8 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df4a:	00a4      	lsls	r4, r4, #2
1000df4c:	58e3      	ldr	r3, [r4, r3]
1000df4e:	2b00      	cmp	r3, #0
1000df50:	d032      	beq.n	1000dfb8 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000df52:	0028      	movs	r0, r5
1000df54:	4798      	blx	r3
1000df56:	e02f      	b.n	1000dfb8 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df58:	3c36      	subs	r4, #54	; 0x36
1000df5a:	b2e4      	uxtb	r4, r4
1000df5c:	00a4      	lsls	r4, r4, #2
1000df5e:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000df60:	4f21      	ldr	r7, [pc, #132]	; (1000dfe8 <ble_event_manager+0x154>)
1000df62:	59bb      	ldr	r3, [r7, r6]
1000df64:	2b00      	cmp	r3, #0
1000df66:	d004      	beq.n	1000df72 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df68:	591b      	ldr	r3, [r3, r4]
1000df6a:	2b00      	cmp	r3, #0
1000df6c:	d001      	beq.n	1000df72 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000df6e:	0028      	movs	r0, r5
1000df70:	4798      	blx	r3
1000df72:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000df74:	2e14      	cmp	r6, #20
1000df76:	d1f4      	bne.n	1000df62 <ble_event_manager+0xce>
1000df78:	e01e      	b.n	1000dfb8 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000df7a:	3c38      	subs	r4, #56	; 0x38
1000df7c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000df7e:	4b1b      	ldr	r3, [pc, #108]	; (1000dfec <ble_event_manager+0x158>)
1000df80:	681b      	ldr	r3, [r3, #0]
1000df82:	2b00      	cmp	r3, #0
1000df84:	d018      	beq.n	1000dfb8 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000df86:	00a4      	lsls	r4, r4, #2
1000df88:	58e3      	ldr	r3, [r4, r3]
1000df8a:	2b00      	cmp	r3, #0
1000df8c:	d014      	beq.n	1000dfb8 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000df8e:	0028      	movs	r0, r5
1000df90:	4798      	blx	r3
1000df92:	e011      	b.n	1000dfb8 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000df94:	4b16      	ldr	r3, [pc, #88]	; (1000dff0 <ble_event_manager+0x15c>)
1000df96:	681b      	ldr	r3, [r3, #0]
1000df98:	2b00      	cmp	r3, #0
1000df9a:	d00d      	beq.n	1000dfb8 <ble_event_manager+0x124>
			ble_user_event_cb();
1000df9c:	4798      	blx	r3
1000df9e:	e00b      	b.n	1000dfb8 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000dfa0:	4e06      	ldr	r6, [pc, #24]	; (1000dfbc <ble_event_manager+0x128>)
1000dfa2:	0030      	movs	r0, r6
1000dfa4:	4d06      	ldr	r5, [pc, #24]	; (1000dfc0 <ble_event_manager+0x12c>)
1000dfa6:	47a8      	blx	r5
1000dfa8:	0021      	movs	r1, r4
1000dfaa:	4812      	ldr	r0, [pc, #72]	; (1000dff4 <ble_event_manager+0x160>)
1000dfac:	4b06      	ldr	r3, [pc, #24]	; (1000dfc8 <ble_event_manager+0x134>)
1000dfae:	4798      	blx	r3
		DBG_LOG("\r\n");
1000dfb0:	0030      	movs	r0, r6
1000dfb2:	47a8      	blx	r5
1000dfb4:	0030      	movs	r0, r6
1000dfb6:	47a8      	blx	r5
	}
	break;		
	}
}
1000dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dfba:	46c0      	nop			; (mov r8, r8)
1000dfbc:	10017888 	.word	0x10017888
1000dfc0:	10016949 	.word	0x10016949
1000dfc4:	10018f5c 	.word	0x10018f5c
1000dfc8:	10016829 	.word	0x10016829
1000dfcc:	100184bc 	.word	0x100184bc
1000dfd0:	1001b434 	.word	0x1001b434
1000dfd4:	1001b448 	.word	0x1001b448
1000dfd8:	10018f6c 	.word	0x10018f6c
1000dfdc:	1001b19c 	.word	0x1001b19c
1000dfe0:	1001b490 	.word	0x1001b490
1000dfe4:	1001b198 	.word	0x1001b198
1000dfe8:	1001b420 	.word	0x1001b420
1000dfec:	1001b9d4 	.word	0x1001b9d4
1000dff0:	10019cbc 	.word	0x10019cbc
1000dff4:	10018f84 	.word	0x10018f84

1000dff8 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000dff8:	b570      	push	{r4, r5, r6, lr}
1000dffa:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000dffc:	4b0d      	ldr	r3, [pc, #52]	; (1000e034 <ble_event_task+0x3c>)
1000dffe:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e000:	2b01      	cmp	r3, #1
1000e002:	d101      	bne.n	1000e008 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e004:	4b0c      	ldr	r3, [pc, #48]	; (1000e038 <ble_event_task+0x40>)
1000e006:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e008:	0022      	movs	r2, r4
1000e00a:	490c      	ldr	r1, [pc, #48]	; (1000e03c <ble_event_task+0x44>)
1000e00c:	480c      	ldr	r0, [pc, #48]	; (1000e040 <ble_event_task+0x48>)
1000e00e:	4b0d      	ldr	r3, [pc, #52]	; (1000e044 <ble_event_task+0x4c>)
1000e010:	4798      	blx	r3
1000e012:	0004      	movs	r4, r0
1000e014:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e016:	4b07      	ldr	r3, [pc, #28]	; (1000e034 <ble_event_task+0x3c>)
1000e018:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e01a:	2b01      	cmp	r3, #1
1000e01c:	d101      	bne.n	1000e022 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e01e:	4b0a      	ldr	r3, [pc, #40]	; (1000e048 <ble_event_task+0x50>)
1000e020:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e022:	2d00      	cmp	r5, #0
1000e024:	d104      	bne.n	1000e030 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e026:	4b06      	ldr	r3, [pc, #24]	; (1000e040 <ble_event_task+0x48>)
1000e028:	7818      	ldrb	r0, [r3, #0]
1000e02a:	4904      	ldr	r1, [pc, #16]	; (1000e03c <ble_event_task+0x44>)
1000e02c:	4b07      	ldr	r3, [pc, #28]	; (1000e04c <ble_event_task+0x54>)
1000e02e:	4798      	blx	r3
    }
    
    return status;
}
1000e030:	0020      	movs	r0, r4
1000e032:	bd70      	pop	{r4, r5, r6, pc}
1000e034:	10019ccb 	.word	0x10019ccb
1000e038:	1000ea09 	.word	0x1000ea09
1000e03c:	1001b7c8 	.word	0x1001b7c8
1000e040:	1001b48c 	.word	0x1001b48c
1000e044:	1000f005 	.word	0x1000f005
1000e048:	1000e9e1 	.word	0x1000e9e1
1000e04c:	1000de95 	.word	0x1000de95

1000e050 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e050:	b510      	push	{r4, lr}
1000e052:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e054:	ac08      	add	r4, sp, #32
1000e056:	2203      	movs	r2, #3
1000e058:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e05a:	2302      	movs	r3, #2
1000e05c:	70a3      	strb	r3, [r4, #2]
1000e05e:	3316      	adds	r3, #22
1000e060:	70e3      	strb	r3, [r4, #3]
1000e062:	7122      	strb	r2, [r4, #4]
1000e064:	7163      	strb	r3, [r4, #5]
1000e066:	3201      	adds	r2, #1
1000e068:	71a2      	strb	r2, [r4, #6]
1000e06a:	71e3      	strb	r3, [r4, #7]
1000e06c:	320b      	adds	r2, #11
1000e06e:	7222      	strb	r2, [r4, #8]
1000e070:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e072:	3b0f      	subs	r3, #15
1000e074:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e076:	3a05      	subs	r2, #5
1000e078:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e07a:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e07c:	aa0b      	add	r2, sp, #44	; 0x2c
1000e07e:	4b16      	ldr	r3, [pc, #88]	; (1000e0d8 <ble_advertisement_data_set+0x88>)
1000e080:	cb03      	ldmia	r3!, {r0, r1}
1000e082:	c203      	stmia	r2!, {r0, r1}
1000e084:	781b      	ldrb	r3, [r3, #0]
1000e086:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000e088:	2300      	movs	r3, #0
1000e08a:	466a      	mov	r2, sp
1000e08c:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000e08e:	3315      	adds	r3, #21
1000e090:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000e092:	4812      	ldr	r0, [pc, #72]	; (1000e0dc <ble_advertisement_data_set+0x8c>)
1000e094:	4b12      	ldr	r3, [pc, #72]	; (1000e0e0 <ble_advertisement_data_set+0x90>)
1000e096:	4798      	blx	r3
1000e098:	4812      	ldr	r0, [pc, #72]	; (1000e0e4 <ble_advertisement_data_set+0x94>)
1000e09a:	4b13      	ldr	r3, [pc, #76]	; (1000e0e8 <ble_advertisement_data_set+0x98>)
1000e09c:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e09e:	2307      	movs	r3, #7
1000e0a0:	466a      	mov	r2, sp
1000e0a2:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e0a4:	33f8      	adds	r3, #248	; 0xf8
1000e0a6:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e0a8:	2206      	movs	r2, #6
1000e0aa:	4910      	ldr	r1, [pc, #64]	; (1000e0ec <ble_advertisement_data_set+0x9c>)
1000e0ac:	466b      	mov	r3, sp
1000e0ae:	1c98      	adds	r0, r3, #2
1000e0b0:	4b0f      	ldr	r3, [pc, #60]	; (1000e0f0 <ble_advertisement_data_set+0xa0>)
1000e0b2:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e0b4:	2308      	movs	r3, #8
1000e0b6:	466a      	mov	r2, sp
1000e0b8:	2115      	movs	r1, #21
1000e0ba:	0020      	movs	r0, r4
1000e0bc:	4c0d      	ldr	r4, [pc, #52]	; (1000e0f4 <ble_advertisement_data_set+0xa4>)
1000e0be:	47a0      	blx	r4
1000e0c0:	2800      	cmp	r0, #0
1000e0c2:	d005      	beq.n	1000e0d0 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000e0c4:	4805      	ldr	r0, [pc, #20]	; (1000e0dc <ble_advertisement_data_set+0x8c>)
1000e0c6:	4b06      	ldr	r3, [pc, #24]	; (1000e0e0 <ble_advertisement_data_set+0x90>)
1000e0c8:	4798      	blx	r3
1000e0ca:	480b      	ldr	r0, [pc, #44]	; (1000e0f8 <ble_advertisement_data_set+0xa8>)
1000e0cc:	4b06      	ldr	r3, [pc, #24]	; (1000e0e8 <ble_advertisement_data_set+0x98>)
1000e0ce:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000e0d0:	2000      	movs	r0, #0
1000e0d2:	b010      	add	sp, #64	; 0x40
1000e0d4:	bd10      	pop	{r4, pc}
1000e0d6:	46c0      	nop			; (mov r8, r8)
1000e0d8:	10018ca0 	.word	0x10018ca0
1000e0dc:	10017888 	.word	0x10017888
1000e0e0:	10016949 	.word	0x10016949
1000e0e4:	10018fa4 	.word	0x10018fa4
1000e0e8:	10016829 	.word	0x10016829
1000e0ec:	10018fd8 	.word	0x10018fd8
1000e0f0:	100166cf 	.word	0x100166cf
1000e0f4:	1000fa65 	.word	0x1000fa65
1000e0f8:	10018fe0 	.word	0x10018fe0

1000e0fc <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000e0fc:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000e0fe:	4b0e      	ldr	r3, [pc, #56]	; (1000e138 <uart_read_complete_callback+0x3c>)
1000e100:	781b      	ldrb	r3, [r3, #0]
1000e102:	2b01      	cmp	r3, #1
1000e104:	d10b      	bne.n	1000e11e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000e106:	2202      	movs	r2, #2
1000e108:	4b0b      	ldr	r3, [pc, #44]	; (1000e138 <uart_read_complete_callback+0x3c>)
1000e10a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000e10c:	4b0b      	ldr	r3, [pc, #44]	; (1000e13c <uart_read_complete_callback+0x40>)
1000e10e:	681b      	ldr	r3, [r3, #0]
1000e110:	2b00      	cmp	r3, #0
1000e112:	d110      	bne.n	1000e136 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000e114:	2102      	movs	r1, #2
1000e116:	480a      	ldr	r0, [pc, #40]	; (1000e140 <uart_read_complete_callback+0x44>)
1000e118:	4b0a      	ldr	r3, [pc, #40]	; (1000e144 <uart_read_complete_callback+0x48>)
1000e11a:	4798      	blx	r3
1000e11c:	e00b      	b.n	1000e136 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000e11e:	4b07      	ldr	r3, [pc, #28]	; (1000e13c <uart_read_complete_callback+0x40>)
1000e120:	681b      	ldr	r3, [r3, #0]
1000e122:	2b00      	cmp	r3, #0
1000e124:	d007      	beq.n	1000e136 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000e126:	4c08      	ldr	r4, [pc, #32]	; (1000e148 <uart_read_complete_callback+0x4c>)
1000e128:	7820      	ldrb	r0, [r4, #0]
1000e12a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e12c:	2201      	movs	r2, #1
1000e12e:	0021      	movs	r1, r4
1000e130:	4803      	ldr	r0, [pc, #12]	; (1000e140 <uart_read_complete_callback+0x44>)
1000e132:	4b06      	ldr	r3, [pc, #24]	; (1000e14c <uart_read_complete_callback+0x50>)
1000e134:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000e136:	bd10      	pop	{r4, pc}
1000e138:	1001acd0 	.word	0x1001acd0
1000e13c:	1001acd8 	.word	0x1001acd8
1000e140:	1001b9d8 	.word	0x1001b9d8
1000e144:	1000cb2d 	.word	0x1000cb2d
1000e148:	1001acd4 	.word	0x1001acd4
1000e14c:	1000cad1 	.word	0x1000cad1

1000e150 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000e150:	b570      	push	{r4, r5, r6, lr}
1000e152:	0006      	movs	r6, r0
1000e154:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e156:	4c03      	ldr	r4, [pc, #12]	; (1000e164 <usart_serial_getchar+0x14>)
1000e158:	0029      	movs	r1, r5
1000e15a:	0030      	movs	r0, r6
1000e15c:	47a0      	blx	r4
1000e15e:	2800      	cmp	r0, #0
1000e160:	d1fa      	bne.n	1000e158 <usart_serial_getchar+0x8>
}
1000e162:	bd70      	pop	{r4, r5, r6, pc}
1000e164:	1000cabd 	.word	0x1000cabd

1000e168 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e168:	b570      	push	{r4, r5, r6, lr}
1000e16a:	0006      	movs	r6, r0
1000e16c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e16e:	4c03      	ldr	r4, [pc, #12]	; (1000e17c <usart_serial_putchar+0x14>)
1000e170:	0029      	movs	r1, r5
1000e172:	0030      	movs	r0, r6
1000e174:	47a0      	blx	r4
1000e176:	2800      	cmp	r0, #0
1000e178:	d1fa      	bne.n	1000e170 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e17a:	bd70      	pop	{r4, r5, r6, pc}
1000e17c:	1000caad 	.word	0x1000caad

1000e180 <serial_console_init>:

void serial_console_init(void)
{
1000e180:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e182:	2100      	movs	r1, #0
1000e184:	2000      	movs	r0, #0
1000e186:	4b19      	ldr	r3, [pc, #100]	; (1000e1ec <serial_console_init+0x6c>)
1000e188:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e18a:	4c19      	ldr	r4, [pc, #100]	; (1000e1f0 <serial_console_init+0x70>)
1000e18c:	0020      	movs	r0, r4
1000e18e:	4b19      	ldr	r3, [pc, #100]	; (1000e1f4 <serial_console_init+0x74>)
1000e190:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e192:	23e1      	movs	r3, #225	; 0xe1
1000e194:	025b      	lsls	r3, r3, #9
1000e196:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e198:	2302      	movs	r3, #2
1000e19a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e19c:	2203      	movs	r2, #3
1000e19e:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e1a0:	3201      	adds	r2, #1
1000e1a2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e1a4:	3201      	adds	r2, #1
1000e1a6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e1a8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e1aa:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e1ac:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e1ae:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e1b0:	4d11      	ldr	r5, [pc, #68]	; (1000e1f8 <serial_console_init+0x78>)
1000e1b2:	4b12      	ldr	r3, [pc, #72]	; (1000e1fc <serial_console_init+0x7c>)
1000e1b4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e1b6:	4a12      	ldr	r2, [pc, #72]	; (1000e200 <serial_console_init+0x80>)
1000e1b8:	4b12      	ldr	r3, [pc, #72]	; (1000e204 <serial_console_init+0x84>)
1000e1ba:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e1bc:	4a12      	ldr	r2, [pc, #72]	; (1000e208 <serial_console_init+0x88>)
1000e1be:	4b13      	ldr	r3, [pc, #76]	; (1000e20c <serial_console_init+0x8c>)
1000e1c0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e1c2:	0022      	movs	r2, r4
1000e1c4:	4912      	ldr	r1, [pc, #72]	; (1000e210 <serial_console_init+0x90>)
1000e1c6:	0028      	movs	r0, r5
1000e1c8:	4b12      	ldr	r3, [pc, #72]	; (1000e214 <serial_console_init+0x94>)
1000e1ca:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000e1cc:	4e12      	ldr	r6, [pc, #72]	; (1000e218 <serial_console_init+0x98>)
1000e1ce:	6833      	ldr	r3, [r6, #0]
1000e1d0:	6898      	ldr	r0, [r3, #8]
1000e1d2:	2100      	movs	r1, #0
1000e1d4:	4c11      	ldr	r4, [pc, #68]	; (1000e21c <serial_console_init+0x9c>)
1000e1d6:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000e1d8:	6833      	ldr	r3, [r6, #0]
1000e1da:	6858      	ldr	r0, [r3, #4]
1000e1dc:	2100      	movs	r1, #0
1000e1de:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000e1e0:	2202      	movs	r2, #2
1000e1e2:	490f      	ldr	r1, [pc, #60]	; (1000e220 <serial_console_init+0xa0>)
1000e1e4:	0028      	movs	r0, r5
1000e1e6:	4b0f      	ldr	r3, [pc, #60]	; (1000e224 <serial_console_init+0xa4>)
1000e1e8:	4798      	blx	r3
}
1000e1ea:	bd70      	pop	{r4, r5, r6, pc}
1000e1ec:	1000bacd 	.word	0x1000bacd
1000e1f0:	1001b9fc 	.word	0x1001b9fc
1000e1f4:	1000c8c5 	.word	0x1000c8c5
1000e1f8:	1001b9d8 	.word	0x1001b9d8
1000e1fc:	1001b194 	.word	0x1001b194
1000e200:	1000e169 	.word	0x1000e169
1000e204:	1001b190 	.word	0x1001b190
1000e208:	1000e151 	.word	0x1000e151
1000e20c:	1001b18c 	.word	0x1001b18c
1000e210:	40004000 	.word	0x40004000
1000e214:	1000c8f1 	.word	0x1000c8f1
1000e218:	1001939c 	.word	0x1001939c
1000e21c:	100169f9 	.word	0x100169f9
1000e220:	1000e0fd 	.word	0x1000e0fd
1000e224:	1000caf9 	.word	0x1000caf9

1000e228 <_time_start>:

void _time_start(unsigned int sec)
{
1000e228:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e22a:	b083      	sub	sp, #12
1000e22c:	0005      	movs	r5, r0
	system_clock_get_value();
1000e22e:	4c0d      	ldr	r4, [pc, #52]	; (1000e264 <_time_start+0x3c>)
1000e230:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000e232:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000e234:	4f0c      	ldr	r7, [pc, #48]	; (1000e268 <_time_start+0x40>)
1000e236:	47b8      	blx	r7
1000e238:	4e0c      	ldr	r6, [pc, #48]	; (1000e26c <_time_start+0x44>)
1000e23a:	4a0d      	ldr	r2, [pc, #52]	; (1000e270 <_time_start+0x48>)
1000e23c:	4b0d      	ldr	r3, [pc, #52]	; (1000e274 <_time_start+0x4c>)
1000e23e:	47b0      	blx	r6
1000e240:	9000      	str	r0, [sp, #0]
1000e242:	9101      	str	r1, [sp, #4]
1000e244:	20fa      	movs	r0, #250	; 0xfa
1000e246:	0080      	lsls	r0, r0, #2
1000e248:	4368      	muls	r0, r5
1000e24a:	47b8      	blx	r7
1000e24c:	0002      	movs	r2, r0
1000e24e:	000b      	movs	r3, r1
1000e250:	9800      	ldr	r0, [sp, #0]
1000e252:	9901      	ldr	r1, [sp, #4]
1000e254:	47b0      	blx	r6
1000e256:	4b08      	ldr	r3, [pc, #32]	; (1000e278 <_time_start+0x50>)
1000e258:	4798      	blx	r3
1000e25a:	4b08      	ldr	r3, [pc, #32]	; (1000e27c <_time_start+0x54>)
1000e25c:	6018      	str	r0, [r3, #0]
}
1000e25e:	b003      	add	sp, #12
1000e260:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e262:	46c0      	nop			; (mov r8, r8)
1000e264:	1000bb51 	.word	0x1000bb51
1000e268:	100163d9 	.word	0x100163d9
1000e26c:	1001570d 	.word	0x1001570d
1000e270:	19feaec7 	.word	0x19feaec7
1000e274:	3f09d8ef 	.word	0x3f09d8ef
1000e278:	10013afd 	.word	0x10013afd
1000e27c:	1001accc 	.word	0x1001accc

1000e280 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000e280:	4b02      	ldr	r3, [pc, #8]	; (1000e28c <_time_done+0xc>)
1000e282:	681a      	ldr	r2, [r3, #0]
1000e284:	1e50      	subs	r0, r2, #1
1000e286:	6018      	str	r0, [r3, #0]
}
1000e288:	4770      	bx	lr
1000e28a:	46c0      	nop			; (mov r8, r8)
1000e28c:	1001accc 	.word	0x1001accc

1000e290 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000e290:	b570      	push	{r4, r5, r6, lr}
1000e292:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000e294:	2201      	movs	r2, #1
1000e296:	4b11      	ldr	r3, [pc, #68]	; (1000e2dc <getchar_b11_timeout+0x4c>)
1000e298:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000e29a:	4b11      	ldr	r3, [pc, #68]	; (1000e2e0 <getchar_b11_timeout+0x50>)
1000e29c:	681b      	ldr	r3, [r3, #0]
1000e29e:	2b00      	cmp	r3, #0
1000e2a0:	d103      	bne.n	1000e2aa <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000e2a2:	2102      	movs	r1, #2
1000e2a4:	480f      	ldr	r0, [pc, #60]	; (1000e2e4 <getchar_b11_timeout+0x54>)
1000e2a6:	4b10      	ldr	r3, [pc, #64]	; (1000e2e8 <getchar_b11_timeout+0x58>)
1000e2a8:	4798      	blx	r3

	_time_start(sec);
1000e2aa:	0020      	movs	r0, r4
1000e2ac:	4b0f      	ldr	r3, [pc, #60]	; (1000e2ec <getchar_b11_timeout+0x5c>)
1000e2ae:	4798      	blx	r3
	
	string_input[0] = 0;
1000e2b0:	490f      	ldr	r1, [pc, #60]	; (1000e2f0 <getchar_b11_timeout+0x60>)
1000e2b2:	2300      	movs	r3, #0
1000e2b4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e2b6:	2201      	movs	r2, #1
1000e2b8:	480a      	ldr	r0, [pc, #40]	; (1000e2e4 <getchar_b11_timeout+0x54>)
1000e2ba:	4b0e      	ldr	r3, [pc, #56]	; (1000e2f4 <getchar_b11_timeout+0x64>)
1000e2bc:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000e2be:	4c07      	ldr	r4, [pc, #28]	; (1000e2dc <getchar_b11_timeout+0x4c>)
1000e2c0:	4d0d      	ldr	r5, [pc, #52]	; (1000e2f8 <getchar_b11_timeout+0x68>)
1000e2c2:	7823      	ldrb	r3, [r4, #0]
1000e2c4:	2b02      	cmp	r3, #2
1000e2c6:	d002      	beq.n	1000e2ce <getchar_b11_timeout+0x3e>
1000e2c8:	47a8      	blx	r5
1000e2ca:	2800      	cmp	r0, #0
1000e2cc:	d1f9      	bne.n	1000e2c2 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000e2ce:	2200      	movs	r2, #0
1000e2d0:	4b02      	ldr	r3, [pc, #8]	; (1000e2dc <getchar_b11_timeout+0x4c>)
1000e2d2:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000e2d4:	4b06      	ldr	r3, [pc, #24]	; (1000e2f0 <getchar_b11_timeout+0x60>)
1000e2d6:	7818      	ldrb	r0, [r3, #0]
}
1000e2d8:	bd70      	pop	{r4, r5, r6, pc}
1000e2da:	46c0      	nop			; (mov r8, r8)
1000e2dc:	1001acd0 	.word	0x1001acd0
1000e2e0:	1001acd8 	.word	0x1001acd8
1000e2e4:	1001b9d8 	.word	0x1001b9d8
1000e2e8:	1000cb0d 	.word	0x1000cb0d
1000e2ec:	1000e229 	.word	0x1000e229
1000e2f0:	1001acd4 	.word	0x1001acd4
1000e2f4:	1000cad1 	.word	0x1000cad1
1000e2f8:	1000e281 	.word	0x1000e281

1000e2fc <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000e2fc:	4b02      	ldr	r3, [pc, #8]	; (1000e308 <platform_event_free+0xc>)
1000e2fe:	681a      	ldr	r2, [r3, #0]
1000e300:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000e302:	6018      	str	r0, [r3, #0]
}
1000e304:	4770      	bx	lr
1000e306:	46c0      	nop			; (mov r8, r8)
1000e308:	1001ace0 	.word	0x1001ace0

1000e30c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000e30c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000e30e:	4b0b      	ldr	r3, [pc, #44]	; (1000e33c <platform_event_post+0x30>)
1000e310:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000e312:	2c00      	cmp	r4, #0
1000e314:	d011      	beq.n	1000e33a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000e316:	6825      	ldr	r5, [r4, #0]
1000e318:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000e31a:	2300      	movs	r3, #0
1000e31c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000e31e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000e320:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000e322:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000e324:	4b06      	ldr	r3, [pc, #24]	; (1000e340 <platform_event_post+0x34>)
1000e326:	681a      	ldr	r2, [r3, #0]
1000e328:	2a00      	cmp	r2, #0
1000e32a:	d102      	bne.n	1000e332 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000e32c:	601c      	str	r4, [r3, #0]
1000e32e:	e004      	b.n	1000e33a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000e330:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000e332:	6813      	ldr	r3, [r2, #0]
1000e334:	2b00      	cmp	r3, #0
1000e336:	d1fb      	bne.n	1000e330 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000e338:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000e33a:	bd30      	pop	{r4, r5, pc}
1000e33c:	1001ace0 	.word	0x1001ace0
1000e340:	1001acdc 	.word	0x1001acdc

1000e344 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000e344:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000e346:	2300      	movs	r3, #0
1000e348:	4a06      	ldr	r2, [pc, #24]	; (1000e364 <platform_event_init+0x20>)
1000e34a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000e34c:	4a06      	ldr	r2, [pc, #24]	; (1000e368 <platform_event_init+0x24>)
1000e34e:	6013      	str	r3, [r2, #0]
1000e350:	4c06      	ldr	r4, [pc, #24]	; (1000e36c <platform_event_init+0x28>)
1000e352:	0026      	movs	r6, r4
1000e354:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000e356:	4d06      	ldr	r5, [pc, #24]	; (1000e370 <platform_event_init+0x2c>)
1000e358:	0020      	movs	r0, r4
1000e35a:	47a8      	blx	r5
1000e35c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000e35e:	42b4      	cmp	r4, r6
1000e360:	d1fa      	bne.n	1000e358 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000e362:	bd70      	pop	{r4, r5, r6, pc}
1000e364:	1001ace0 	.word	0x1001ace0
1000e368:	1001acdc 	.word	0x1001acdc
1000e36c:	1001ace4 	.word	0x1001ace4
1000e370:	1000e2fd 	.word	0x1000e2fd

1000e374 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000e374:	b570      	push	{r4, r5, r6, lr}
1000e376:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e378:	4b13      	ldr	r3, [pc, #76]	; (1000e3c8 <at_ke_msg_send+0x54>)
1000e37a:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000e37c:	4b13      	ldr	r3, [pc, #76]	; (1000e3cc <at_ke_msg_send+0x58>)
1000e37e:	681b      	ldr	r3, [r3, #0]
1000e380:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000e382:	2c0c      	cmp	r4, #12
1000e384:	d01f      	beq.n	1000e3c6 <at_ke_msg_send+0x52>
1000e386:	3c0c      	subs	r4, #12
1000e388:	88e3      	ldrh	r3, [r4, #6]
1000e38a:	2b05      	cmp	r3, #5
1000e38c:	d01b      	beq.n	1000e3c6 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000e38e:	07eb      	lsls	r3, r5, #31
1000e390:	d414      	bmi.n	1000e3bc <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000e392:	4b0f      	ldr	r3, [pc, #60]	; (1000e3d0 <at_ke_msg_send+0x5c>)
1000e394:	681b      	ldr	r3, [r3, #0]
1000e396:	2002      	movs	r0, #2
1000e398:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000e39a:	4b0e      	ldr	r3, [pc, #56]	; (1000e3d4 <at_ke_msg_send+0x60>)
1000e39c:	681b      	ldr	r3, [r3, #0]
1000e39e:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000e3a0:	4c0d      	ldr	r4, [pc, #52]	; (1000e3d8 <at_ke_msg_send+0x64>)
1000e3a2:	2003      	movs	r0, #3
1000e3a4:	6823      	ldr	r3, [r4, #0]
1000e3a6:	4798      	blx	r3
1000e3a8:	2800      	cmp	r0, #0
1000e3aa:	d1fa      	bne.n	1000e3a2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000e3ac:	4b0b      	ldr	r3, [pc, #44]	; (1000e3dc <at_ke_msg_send+0x68>)
1000e3ae:	681b      	ldr	r3, [r3, #0]
1000e3b0:	3002      	adds	r0, #2
1000e3b2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000e3b4:	2201      	movs	r2, #1
1000e3b6:	4b0a      	ldr	r3, [pc, #40]	; (1000e3e0 <at_ke_msg_send+0x6c>)
1000e3b8:	601a      	str	r2, [r3, #0]
1000e3ba:	e004      	b.n	1000e3c6 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000e3bc:	4b09      	ldr	r3, [pc, #36]	; (1000e3e4 <at_ke_msg_send+0x70>)
1000e3be:	6818      	ldr	r0, [r3, #0]
1000e3c0:	4b09      	ldr	r3, [pc, #36]	; (1000e3e8 <at_ke_msg_send+0x74>)
1000e3c2:	681b      	ldr	r3, [r3, #0]
1000e3c4:	4798      	blx	r3
		}
	}
}
1000e3c6:	bd70      	pop	{r4, r5, r6, pc}
1000e3c8:	4000b1ec 	.word	0x4000b1ec
1000e3cc:	1001ad8c 	.word	0x1001ad8c
1000e3d0:	1001ad84 	.word	0x1001ad84
1000e3d4:	1001ad98 	.word	0x1001ad98
1000e3d8:	1001ad6c 	.word	0x1001ad6c
1000e3dc:	1001ad74 	.word	0x1001ad74
1000e3e0:	4000b020 	.word	0x4000b020
1000e3e4:	1001ad78 	.word	0x1001ad78
1000e3e8:	1001ad68 	.word	0x1001ad68

1000e3ec <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000e3ec:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000e3ee:	4b06      	ldr	r3, [pc, #24]	; (1000e408 <samb11_plf_resume_callback+0x1c>)
1000e3f0:	4a06      	ldr	r2, [pc, #24]	; (1000e40c <samb11_plf_resume_callback+0x20>)
1000e3f2:	6819      	ldr	r1, [r3, #0]
1000e3f4:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000e3f6:	685a      	ldr	r2, [r3, #4]
1000e3f8:	4b05      	ldr	r3, [pc, #20]	; (1000e410 <samb11_plf_resume_callback+0x24>)
1000e3fa:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000e3fc:	4b05      	ldr	r3, [pc, #20]	; (1000e414 <samb11_plf_resume_callback+0x28>)
1000e3fe:	681b      	ldr	r3, [r3, #0]
1000e400:	2b00      	cmp	r3, #0
1000e402:	d000      	beq.n	1000e406 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000e404:	4798      	blx	r3
	}
}
1000e406:	bd10      	pop	{r4, pc}
1000e408:	1001ba24 	.word	0x1001ba24
1000e40c:	4000b00c 	.word	0x4000b00c
1000e410:	4000b010 	.word	0x4000b010
1000e414:	1001bd00 	.word	0x1001bd00

1000e418 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e418:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e41a:	2232      	movs	r2, #50	; 0x32
1000e41c:	2100      	movs	r1, #0
1000e41e:	480d      	ldr	r0, [pc, #52]	; (1000e454 <init_port_list+0x3c>)
1000e420:	4b0d      	ldr	r3, [pc, #52]	; (1000e458 <init_port_list+0x40>)
1000e422:	4798      	blx	r3
1000e424:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e426:	480b      	ldr	r0, [pc, #44]	; (1000e454 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000e428:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000e42a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e42c:	004a      	lsls	r2, r1, #1
1000e42e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000e430:	1882      	adds	r2, r0, r2
1000e432:	7853      	ldrb	r3, [r2, #1]
1000e434:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000e436:	b2db      	uxtb	r3, r3
1000e438:	43a3      	bics	r3, r4
1000e43a:	7053      	strb	r3, [r2, #1]
1000e43c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e43e:	2919      	cmp	r1, #25
1000e440:	d1f4      	bne.n	1000e42c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e442:	4b04      	ldr	r3, [pc, #16]	; (1000e454 <init_port_list+0x3c>)
1000e444:	785a      	ldrb	r2, [r3, #1]
1000e446:	3918      	subs	r1, #24
1000e448:	438a      	bics	r2, r1
1000e44a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e44c:	78da      	ldrb	r2, [r3, #3]
1000e44e:	438a      	bics	r2, r1
1000e450:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000e452:	bd70      	pop	{r4, r5, r6, pc}
1000e454:	1001ba40 	.word	0x1001ba40
1000e458:	100166e1 	.word	0x100166e1

1000e45c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e45c:	4a06      	ldr	r2, [pc, #24]	; (1000e478 <init_clock+0x1c>)
1000e45e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e460:	4b06      	ldr	r3, [pc, #24]	; (1000e47c <init_clock+0x20>)
1000e462:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e464:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000e466:	4a06      	ldr	r2, [pc, #24]	; (1000e480 <init_clock+0x24>)
1000e468:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e46a:	4906      	ldr	r1, [pc, #24]	; (1000e484 <init_clock+0x28>)
1000e46c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e46e:	4b06      	ldr	r3, [pc, #24]	; (1000e488 <init_clock+0x2c>)
1000e470:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e472:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000e474:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000e476:	4770      	bx	lr
1000e478:	4000b00c 	.word	0x4000b00c
1000e47c:	fffe0fd3 	.word	0xfffe0fd3
1000e480:	1001ba24 	.word	0x1001ba24
1000e484:	4000b010 	.word	0x4000b010
1000e488:	ffffe7c0 	.word	0xffffe7c0

1000e48c <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e48e:	4657      	mov	r7, sl
1000e490:	464e      	mov	r6, r9
1000e492:	4645      	mov	r5, r8
1000e494:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e496:	4b4f      	ldr	r3, [pc, #316]	; (1000e5d4 <platform_driver_init+0x148>)
1000e498:	781b      	ldrb	r3, [r3, #0]
1000e49a:	2b00      	cmp	r3, #0
1000e49c:	d004      	beq.n	1000e4a8 <platform_driver_init+0x1c>
1000e49e:	4b4d      	ldr	r3, [pc, #308]	; (1000e5d4 <platform_driver_init+0x148>)
1000e4a0:	781b      	ldrb	r3, [r3, #0]
1000e4a2:	2b01      	cmp	r3, #1
1000e4a4:	d100      	bne.n	1000e4a8 <platform_driver_init+0x1c>
1000e4a6:	e08c      	b.n	1000e5c2 <platform_driver_init+0x136>
		init_port_list();
1000e4a8:	4b4b      	ldr	r3, [pc, #300]	; (1000e5d8 <platform_driver_init+0x14c>)
1000e4aa:	4798      	blx	r3
		init_clock();
1000e4ac:	4b4b      	ldr	r3, [pc, #300]	; (1000e5dc <platform_driver_init+0x150>)
1000e4ae:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e4b0:	2300      	movs	r3, #0
1000e4b2:	4698      	mov	r8, r3
1000e4b4:	4b4a      	ldr	r3, [pc, #296]	; (1000e5e0 <platform_driver_init+0x154>)
1000e4b6:	4642      	mov	r2, r8
1000e4b8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e4ba:	4c4a      	ldr	r4, [pc, #296]	; (1000e5e4 <platform_driver_init+0x158>)
1000e4bc:	2380      	movs	r3, #128	; 0x80
1000e4be:	2280      	movs	r2, #128	; 0x80
1000e4c0:	0412      	lsls	r2, r2, #16
1000e4c2:	4692      	mov	sl, r2
1000e4c4:	50e2      	str	r2, [r4, r3]
1000e4c6:	2280      	movs	r2, #128	; 0x80
1000e4c8:	0452      	lsls	r2, r2, #17
1000e4ca:	4691      	mov	r9, r2
1000e4cc:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e4ce:	4d46      	ldr	r5, [pc, #280]	; (1000e5e8 <platform_driver_init+0x15c>)
1000e4d0:	4b46      	ldr	r3, [pc, #280]	; (1000e5ec <platform_driver_init+0x160>)
1000e4d2:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e4d4:	4b46      	ldr	r3, [pc, #280]	; (1000e5f0 <platform_driver_init+0x164>)
1000e4d6:	4a47      	ldr	r2, [pc, #284]	; (1000e5f4 <platform_driver_init+0x168>)
1000e4d8:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e4da:	4947      	ldr	r1, [pc, #284]	; (1000e5f8 <platform_driver_init+0x16c>)
1000e4dc:	4a47      	ldr	r2, [pc, #284]	; (1000e5fc <platform_driver_init+0x170>)
1000e4de:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e4e0:	4a47      	ldr	r2, [pc, #284]	; (1000e600 <platform_driver_init+0x174>)
1000e4e2:	6811      	ldr	r1, [r2, #0]
1000e4e4:	4a47      	ldr	r2, [pc, #284]	; (1000e604 <platform_driver_init+0x178>)
1000e4e6:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e4e8:	4a47      	ldr	r2, [pc, #284]	; (1000e608 <platform_driver_init+0x17c>)
1000e4ea:	6811      	ldr	r1, [r2, #0]
1000e4ec:	4a47      	ldr	r2, [pc, #284]	; (1000e60c <platform_driver_init+0x180>)
1000e4ee:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e4f0:	4947      	ldr	r1, [pc, #284]	; (1000e610 <platform_driver_init+0x184>)
1000e4f2:	4a48      	ldr	r2, [pc, #288]	; (1000e614 <platform_driver_init+0x188>)
1000e4f4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e4f6:	4948      	ldr	r1, [pc, #288]	; (1000e618 <platform_driver_init+0x18c>)
1000e4f8:	4a48      	ldr	r2, [pc, #288]	; (1000e61c <platform_driver_init+0x190>)
1000e4fa:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e4fc:	4f48      	ldr	r7, [pc, #288]	; (1000e620 <platform_driver_init+0x194>)
1000e4fe:	4a49      	ldr	r2, [pc, #292]	; (1000e624 <platform_driver_init+0x198>)
1000e500:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e502:	4949      	ldr	r1, [pc, #292]	; (1000e628 <platform_driver_init+0x19c>)
1000e504:	4a49      	ldr	r2, [pc, #292]	; (1000e62c <platform_driver_init+0x1a0>)
1000e506:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e508:	4949      	ldr	r1, [pc, #292]	; (1000e630 <platform_driver_init+0x1a4>)
1000e50a:	4a4a      	ldr	r2, [pc, #296]	; (1000e634 <platform_driver_init+0x1a8>)
1000e50c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e50e:	4e4a      	ldr	r6, [pc, #296]	; (1000e638 <platform_driver_init+0x1ac>)
1000e510:	4a4a      	ldr	r2, [pc, #296]	; (1000e63c <platform_driver_init+0x1b0>)
1000e512:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e514:	494a      	ldr	r1, [pc, #296]	; (1000e640 <platform_driver_init+0x1b4>)
1000e516:	4a4b      	ldr	r2, [pc, #300]	; (1000e644 <platform_driver_init+0x1b8>)
1000e518:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e51a:	494b      	ldr	r1, [pc, #300]	; (1000e648 <platform_driver_init+0x1bc>)
1000e51c:	4a4b      	ldr	r2, [pc, #300]	; (1000e64c <platform_driver_init+0x1c0>)
1000e51e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e520:	494b      	ldr	r1, [pc, #300]	; (1000e650 <platform_driver_init+0x1c4>)
1000e522:	4a4c      	ldr	r2, [pc, #304]	; (1000e654 <platform_driver_init+0x1c8>)
1000e524:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e526:	494c      	ldr	r1, [pc, #304]	; (1000e658 <platform_driver_init+0x1cc>)
1000e528:	4a4c      	ldr	r2, [pc, #304]	; (1000e65c <platform_driver_init+0x1d0>)
1000e52a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e52c:	494c      	ldr	r1, [pc, #304]	; (1000e660 <platform_driver_init+0x1d4>)
1000e52e:	4a4d      	ldr	r2, [pc, #308]	; (1000e664 <platform_driver_init+0x1d8>)
1000e530:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e532:	2028      	movs	r0, #40	; 0x28
1000e534:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e536:	494c      	ldr	r1, [pc, #304]	; (1000e668 <platform_driver_init+0x1dc>)
1000e538:	2028      	movs	r0, #40	; 0x28
1000e53a:	682b      	ldr	r3, [r5, #0]
1000e53c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e53e:	682b      	ldr	r3, [r5, #0]
1000e540:	494a      	ldr	r1, [pc, #296]	; (1000e66c <platform_driver_init+0x1e0>)
1000e542:	2027      	movs	r0, #39	; 0x27
1000e544:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e546:	4b4a      	ldr	r3, [pc, #296]	; (1000e670 <platform_driver_init+0x1e4>)
1000e548:	681a      	ldr	r2, [r3, #0]
1000e54a:	4b4a      	ldr	r3, [pc, #296]	; (1000e674 <platform_driver_init+0x1e8>)
1000e54c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e54e:	4a4a      	ldr	r2, [pc, #296]	; (1000e678 <platform_driver_init+0x1ec>)
1000e550:	4b4a      	ldr	r3, [pc, #296]	; (1000e67c <platform_driver_init+0x1f0>)
1000e552:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e554:	4a4a      	ldr	r2, [pc, #296]	; (1000e680 <platform_driver_init+0x1f4>)
1000e556:	4b4b      	ldr	r3, [pc, #300]	; (1000e684 <platform_driver_init+0x1f8>)
1000e558:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e55a:	4a4b      	ldr	r2, [pc, #300]	; (1000e688 <platform_driver_init+0x1fc>)
1000e55c:	4b4b      	ldr	r3, [pc, #300]	; (1000e68c <platform_driver_init+0x200>)
1000e55e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e560:	4a4b      	ldr	r2, [pc, #300]	; (1000e690 <platform_driver_init+0x204>)
1000e562:	4b4c      	ldr	r3, [pc, #304]	; (1000e694 <platform_driver_init+0x208>)
1000e564:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e566:	4a4c      	ldr	r2, [pc, #304]	; (1000e698 <platform_driver_init+0x20c>)
1000e568:	4b4c      	ldr	r3, [pc, #304]	; (1000e69c <platform_driver_init+0x210>)
1000e56a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e56c:	4a4c      	ldr	r2, [pc, #304]	; (1000e6a0 <platform_driver_init+0x214>)
1000e56e:	4b4d      	ldr	r3, [pc, #308]	; (1000e6a4 <platform_driver_init+0x218>)
1000e570:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e572:	4a4d      	ldr	r2, [pc, #308]	; (1000e6a8 <platform_driver_init+0x21c>)
1000e574:	4b4d      	ldr	r3, [pc, #308]	; (1000e6ac <platform_driver_init+0x220>)
1000e576:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e578:	22a0      	movs	r2, #160	; 0xa0
1000e57a:	0092      	lsls	r2, r2, #2
1000e57c:	2100      	movs	r1, #0
1000e57e:	484c      	ldr	r0, [pc, #304]	; (1000e6b0 <platform_driver_init+0x224>)
1000e580:	4b4c      	ldr	r3, [pc, #304]	; (1000e6b4 <platform_driver_init+0x228>)
1000e582:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e584:	2280      	movs	r2, #128	; 0x80
1000e586:	0092      	lsls	r2, r2, #2
1000e588:	4b4b      	ldr	r3, [pc, #300]	; (1000e6b8 <platform_driver_init+0x22c>)
1000e58a:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e58c:	4b4b      	ldr	r3, [pc, #300]	; (1000e6bc <platform_driver_init+0x230>)
1000e58e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e590:	4653      	mov	r3, sl
1000e592:	6023      	str	r3, [r4, #0]
1000e594:	464b      	mov	r3, r9
1000e596:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e598:	4b49      	ldr	r3, [pc, #292]	; (1000e6c0 <platform_driver_init+0x234>)
1000e59a:	4642      	mov	r2, r8
1000e59c:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e59e:	683b      	ldr	r3, [r7, #0]
1000e5a0:	4a48      	ldr	r2, [pc, #288]	; (1000e6c4 <platform_driver_init+0x238>)
1000e5a2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e5a4:	6833      	ldr	r3, [r6, #0]
1000e5a6:	4a48      	ldr	r2, [pc, #288]	; (1000e6c8 <platform_driver_init+0x23c>)
1000e5a8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e5aa:	2000      	movs	r0, #0
1000e5ac:	4c47      	ldr	r4, [pc, #284]	; (1000e6cc <platform_driver_init+0x240>)
1000e5ae:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e5b0:	2001      	movs	r0, #1
1000e5b2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e5b4:	2002      	movs	r0, #2
1000e5b6:	47a0      	blx	r4
		platform_initialized = 1;
1000e5b8:	2201      	movs	r2, #1
1000e5ba:	4b06      	ldr	r3, [pc, #24]	; (1000e5d4 <platform_driver_init+0x148>)
1000e5bc:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e5be:	2000      	movs	r0, #0
1000e5c0:	e003      	b.n	1000e5ca <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e5c2:	2201      	movs	r2, #1
1000e5c4:	4b03      	ldr	r3, [pc, #12]	; (1000e5d4 <platform_driver_init+0x148>)
1000e5c6:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e5c8:	2001      	movs	r0, #1
	}
	return status;
}
1000e5ca:	bc1c      	pop	{r2, r3, r4}
1000e5cc:	4690      	mov	r8, r2
1000e5ce:	4699      	mov	r9, r3
1000e5d0:	46a2      	mov	sl, r4
1000e5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5d4:	1001ad70 	.word	0x1001ad70
1000e5d8:	1000e419 	.word	0x1000e419
1000e5dc:	1000e45d 	.word	0x1000e45d
1000e5e0:	1001ad90 	.word	0x1001ad90
1000e5e4:	e000e100 	.word	0xe000e100
1000e5e8:	1001bcf4 	.word	0x1001bcf4
1000e5ec:	000007d7 	.word	0x000007d7
1000e5f0:	000007bd 	.word	0x000007bd
1000e5f4:	1001ba30 	.word	0x1001ba30
1000e5f8:	0001bc51 	.word	0x0001bc51
1000e5fc:	1001bcf8 	.word	0x1001bcf8
1000e600:	100400bc 	.word	0x100400bc
1000e604:	1001ad64 	.word	0x1001ad64
1000e608:	100400b8 	.word	0x100400b8
1000e60c:	1001ad60 	.word	0x1001ad60
1000e610:	0001b99f 	.word	0x0001b99f
1000e614:	1001ba2c 	.word	0x1001ba2c
1000e618:	0001b9db 	.word	0x0001b9db
1000e61c:	1001ba38 	.word	0x1001ba38
1000e620:	1001bd08 	.word	0x1001bd08
1000e624:	1004003c 	.word	0x1004003c
1000e628:	10041fc0 	.word	0x10041fc0
1000e62c:	1001ba3c 	.word	0x1001ba3c
1000e630:	10041fc4 	.word	0x10041fc4
1000e634:	1001bd04 	.word	0x1001bd04
1000e638:	1001bcfc 	.word	0x1001bcfc
1000e63c:	10041fd4 	.word	0x10041fd4
1000e640:	10041fd8 	.word	0x10041fd8
1000e644:	1001ba34 	.word	0x1001ba34
1000e648:	0001cbe9 	.word	0x0001cbe9
1000e64c:	1001ad84 	.word	0x1001ad84
1000e650:	0001cd8f 	.word	0x0001cd8f
1000e654:	1001ad74 	.word	0x1001ad74
1000e658:	0001cea3 	.word	0x0001cea3
1000e65c:	1001ad98 	.word	0x1001ad98
1000e660:	0001cbcf 	.word	0x0001cbcf
1000e664:	1001ad6c 	.word	0x1001ad6c
1000e668:	1000eb15 	.word	0x1000eb15
1000e66c:	1000eaa9 	.word	0x1000eaa9
1000e670:	100400e4 	.word	0x100400e4
1000e674:	1001ad8c 	.word	0x1001ad8c
1000e678:	00019fe9 	.word	0x00019fe9
1000e67c:	1001ad9c 	.word	0x1001ad9c
1000e680:	0001dbdd 	.word	0x0001dbdd
1000e684:	1001ad68 	.word	0x1001ad68
1000e688:	0001dc5b 	.word	0x0001dc5b
1000e68c:	1001ad7c 	.word	0x1001ad7c
1000e690:	100405ec 	.word	0x100405ec
1000e694:	1001ad78 	.word	0x1001ad78
1000e698:	0001d5e3 	.word	0x0001d5e3
1000e69c:	1001ad88 	.word	0x1001ad88
1000e6a0:	10040c20 	.word	0x10040c20
1000e6a4:	1001ada0 	.word	0x1001ada0
1000e6a8:	00019f09 	.word	0x00019f09
1000e6ac:	1001ad5c 	.word	0x1001ad5c
1000e6b0:	1001ba74 	.word	0x1001ba74
1000e6b4:	100166e1 	.word	0x100166e1
1000e6b8:	1001bd0c 	.word	0x1001bd0c
1000e6bc:	1000e345 	.word	0x1000e345
1000e6c0:	1001bd00 	.word	0x1001bd00
1000e6c4:	1000e3ed 	.word	0x1000e3ed
1000e6c8:	1000eb71 	.word	0x1000eb71
1000e6cc:	1000eb59 	.word	0x1000eb59

1000e6d0 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e6d0:	4b04      	ldr	r3, [pc, #16]	; (1000e6e4 <platform_register_ble_msg_handler+0x14>)
1000e6d2:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e6d4:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e6d6:	2a01      	cmp	r2, #1
1000e6d8:	d102      	bne.n	1000e6e0 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e6da:	4b03      	ldr	r3, [pc, #12]	; (1000e6e8 <platform_register_ble_msg_handler+0x18>)
1000e6dc:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e6de:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e6e0:	0018      	movs	r0, r3
1000e6e2:	4770      	bx	lr
1000e6e4:	1001ad70 	.word	0x1001ad70
1000e6e8:	1001ad90 	.word	0x1001ad90

1000e6ec <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e6ec:	b570      	push	{r4, r5, r6, lr}
1000e6ee:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e6f0:	4b0e      	ldr	r3, [pc, #56]	; (1000e72c <platform_interface_send+0x40>)
1000e6f2:	681b      	ldr	r3, [r3, #0]
1000e6f4:	2b00      	cmp	r3, #0
1000e6f6:	d002      	beq.n	1000e6fe <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e6f8:	8840      	ldrh	r0, [r0, #2]
1000e6fa:	4798      	blx	r3
1000e6fc:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e6fe:	88e3      	ldrh	r3, [r4, #6]
1000e700:	88a2      	ldrh	r2, [r4, #4]
1000e702:	8861      	ldrh	r1, [r4, #2]
1000e704:	8820      	ldrh	r0, [r4, #0]
1000e706:	4d0a      	ldr	r5, [pc, #40]	; (1000e730 <platform_interface_send+0x44>)
1000e708:	682d      	ldr	r5, [r5, #0]
1000e70a:	47a8      	blx	r5
1000e70c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e70e:	88e2      	ldrh	r2, [r4, #6]
1000e710:	2a00      	cmp	r2, #0
1000e712:	d102      	bne.n	1000e71a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e714:	4b07      	ldr	r3, [pc, #28]	; (1000e734 <platform_interface_send+0x48>)
1000e716:	4798      	blx	r3
1000e718:	e006      	b.n	1000e728 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e71a:	0021      	movs	r1, r4
1000e71c:	3108      	adds	r1, #8
1000e71e:	4b06      	ldr	r3, [pc, #24]	; (1000e738 <platform_interface_send+0x4c>)
1000e720:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e722:	0028      	movs	r0, r5
1000e724:	4b03      	ldr	r3, [pc, #12]	; (1000e734 <platform_interface_send+0x48>)
1000e726:	4798      	blx	r3
	}
}
1000e728:	bd70      	pop	{r4, r5, r6, pc}
1000e72a:	46c0      	nop			; (mov r8, r8)
1000e72c:	1001ad64 	.word	0x1001ad64
1000e730:	1001ad9c 	.word	0x1001ad9c
1000e734:	1000e375 	.word	0x1000e375
1000e738:	100166cf 	.word	0x100166cf

1000e73c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e73c:	b570      	push	{r4, r5, r6, lr}
1000e73e:	0015      	movs	r5, r2
1000e740:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e742:	020a      	lsls	r2, r1, #8
1000e744:	4302      	orrs	r2, r0
1000e746:	4b0a      	ldr	r3, [pc, #40]	; (1000e770 <send_plf_int_msg_ind+0x34>)
1000e748:	681e      	ldr	r6, [r3, #0]
1000e74a:	0023      	movs	r3, r4
1000e74c:	2105      	movs	r1, #5
1000e74e:	20a0      	movs	r0, #160	; 0xa0
1000e750:	00c0      	lsls	r0, r0, #3
1000e752:	47b0      	blx	r6
1000e754:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e756:	d00a      	beq.n	1000e76e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e758:	2c00      	cmp	r4, #0
1000e75a:	d005      	beq.n	1000e768 <send_plf_int_msg_ind+0x2c>
1000e75c:	2d00      	cmp	r5, #0
1000e75e:	d003      	beq.n	1000e768 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e760:	0022      	movs	r2, r4
1000e762:	0029      	movs	r1, r5
1000e764:	4b03      	ldr	r3, [pc, #12]	; (1000e774 <send_plf_int_msg_ind+0x38>)
1000e766:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e768:	0030      	movs	r0, r6
1000e76a:	4b03      	ldr	r3, [pc, #12]	; (1000e778 <send_plf_int_msg_ind+0x3c>)
1000e76c:	4798      	blx	r3
	}
}
1000e76e:	bd70      	pop	{r4, r5, r6, pc}
1000e770:	1001ad9c 	.word	0x1001ad9c
1000e774:	100166cf 	.word	0x100166cf
1000e778:	1000e375 	.word	0x1000e375

1000e77c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e77e:	465f      	mov	r7, fp
1000e780:	4656      	mov	r6, sl
1000e782:	464d      	mov	r5, r9
1000e784:	4644      	mov	r4, r8
1000e786:	b4f0      	push	{r4, r5, r6, r7}
1000e788:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e78a:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e78c:	2300      	movs	r3, #0
1000e78e:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e790:	1ce3      	adds	r3, r4, #3
1000e792:	d81c      	bhi.n	1000e7ce <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e794:	220d      	movs	r2, #13
1000e796:	2100      	movs	r1, #0
1000e798:	a802      	add	r0, sp, #8
1000e79a:	4b82      	ldr	r3, [pc, #520]	; (1000e9a4 <platform_event_wait+0x228>)
1000e79c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e79e:	2333      	movs	r3, #51	; 0x33
1000e7a0:	aa02      	add	r2, sp, #8
1000e7a2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e7a4:	3b30      	subs	r3, #48	; 0x30
1000e7a6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e7a8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e7aa:	3302      	adds	r3, #2
1000e7ac:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e7ae:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e7b0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e7b2:	0a23      	lsrs	r3, r4, #8
1000e7b4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e7b6:	0c23      	lsrs	r3, r4, #16
1000e7b8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e7ba:	0e24      	lsrs	r4, r4, #24
1000e7bc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e7be:	2301      	movs	r3, #1
1000e7c0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e7c2:	210d      	movs	r1, #13
1000e7c4:	0010      	movs	r0, r2
1000e7c6:	4b78      	ldr	r3, [pc, #480]	; (1000e9a8 <platform_event_wait+0x22c>)
1000e7c8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e7ca:	2301      	movs	r3, #1
1000e7cc:	4699      	mov	r9, r3
1000e7ce:	2400      	movs	r4, #0
1000e7d0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e7d2:	4f76      	ldr	r7, [pc, #472]	; (1000e9ac <platform_event_wait+0x230>)
1000e7d4:	4e76      	ldr	r6, [pc, #472]	; (1000e9b0 <platform_event_wait+0x234>)
1000e7d6:	4977      	ldr	r1, [pc, #476]	; (1000e9b4 <platform_event_wait+0x238>)
1000e7d8:	6838      	ldr	r0, [r7, #0]
1000e7da:	6833      	ldr	r3, [r6, #0]
1000e7dc:	4798      	blx	r3
1000e7de:	2800      	cmp	r0, #0
1000e7e0:	d000      	beq.n	1000e7e4 <platform_event_wait+0x68>
1000e7e2:	e088      	b.n	1000e8f6 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e7e4:	4b73      	ldr	r3, [pc, #460]	; (1000e9b4 <platform_event_wait+0x238>)
1000e7e6:	681c      	ldr	r4, [r3, #0]
1000e7e8:	88a3      	ldrh	r3, [r4, #4]
1000e7ea:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e7ec:	23cd      	movs	r3, #205	; 0xcd
1000e7ee:	009b      	lsls	r3, r3, #2
1000e7f0:	459a      	cmp	sl, r3
1000e7f2:	d100      	bne.n	1000e7f6 <platform_event_wait+0x7a>
1000e7f4:	e0c7      	b.n	1000e986 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e7f6:	8923      	ldrh	r3, [r4, #8]
1000e7f8:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e7fa:	8963      	ldrh	r3, [r4, #10]
1000e7fc:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e7fe:	464b      	mov	r3, r9
1000e800:	2b00      	cmp	r3, #0
1000e802:	d011      	beq.n	1000e828 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e804:	220d      	movs	r2, #13
1000e806:	2100      	movs	r1, #0
1000e808:	a802      	add	r0, sp, #8
1000e80a:	4b66      	ldr	r3, [pc, #408]	; (1000e9a4 <platform_event_wait+0x228>)
1000e80c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e80e:	2333      	movs	r3, #51	; 0x33
1000e810:	aa02      	add	r2, sp, #8
1000e812:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e814:	3b30      	subs	r3, #48	; 0x30
1000e816:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e818:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e81a:	3302      	adds	r3, #2
1000e81c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e81e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e820:	210d      	movs	r1, #13
1000e822:	0010      	movs	r0, r2
1000e824:	4b60      	ldr	r3, [pc, #384]	; (1000e9a8 <platform_event_wait+0x22c>)
1000e826:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e828:	23a0      	movs	r3, #160	; 0xa0
1000e82a:	00db      	lsls	r3, r3, #3
1000e82c:	459a      	cmp	sl, r3
1000e82e:	d121      	bne.n	1000e874 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e830:	4b61      	ldr	r3, [pc, #388]	; (1000e9b8 <platform_event_wait+0x23c>)
1000e832:	881b      	ldrh	r3, [r3, #0]
1000e834:	4443      	add	r3, r8
1000e836:	22a0      	movs	r2, #160	; 0xa0
1000e838:	0092      	lsls	r2, r2, #2
1000e83a:	4293      	cmp	r3, r2
1000e83c:	dd02      	ble.n	1000e844 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e83e:	3a80      	subs	r2, #128	; 0x80
1000e840:	4b5d      	ldr	r3, [pc, #372]	; (1000e9b8 <platform_event_wait+0x23c>)
1000e842:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e844:	4b5c      	ldr	r3, [pc, #368]	; (1000e9b8 <platform_event_wait+0x23c>)
1000e846:	469a      	mov	sl, r3
1000e848:	881d      	ldrh	r5, [r3, #0]
1000e84a:	4b5c      	ldr	r3, [pc, #368]	; (1000e9bc <platform_event_wait+0x240>)
1000e84c:	18ed      	adds	r5, r5, r3
1000e84e:	0021      	movs	r1, r4
1000e850:	310c      	adds	r1, #12
1000e852:	4642      	mov	r2, r8
1000e854:	0028      	movs	r0, r5
1000e856:	4b5a      	ldr	r3, [pc, #360]	; (1000e9c0 <platform_event_wait+0x244>)
1000e858:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e85a:	4642      	mov	r2, r8
1000e85c:	0029      	movs	r1, r5
1000e85e:	4658      	mov	r0, fp
1000e860:	4b58      	ldr	r3, [pc, #352]	; (1000e9c4 <platform_event_wait+0x248>)
1000e862:	4798      	blx	r3
				plf_event_buff_index += len;
1000e864:	4653      	mov	r3, sl
1000e866:	881b      	ldrh	r3, [r3, #0]
1000e868:	4443      	add	r3, r8
1000e86a:	4652      	mov	r2, sl
1000e86c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e86e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e870:	2502      	movs	r5, #2
1000e872:	e03a      	b.n	1000e8ea <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e874:	4b54      	ldr	r3, [pc, #336]	; (1000e9c8 <platform_event_wait+0x24c>)
1000e876:	681b      	ldr	r3, [r3, #0]
1000e878:	2b00      	cmp	r3, #0
1000e87a:	d032      	beq.n	1000e8e2 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e87c:	4b4d      	ldr	r3, [pc, #308]	; (1000e9b4 <platform_event_wait+0x238>)
1000e87e:	681a      	ldr	r2, [r3, #0]
1000e880:	8893      	ldrh	r3, [r2, #4]
1000e882:	21cd      	movs	r1, #205	; 0xcd
1000e884:	0089      	lsls	r1, r1, #2
1000e886:	428b      	cmp	r3, r1
1000e888:	d104      	bne.n	1000e894 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e88a:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e88c:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e88e:	2b00      	cmp	r3, #0
1000e890:	d02b      	beq.n	1000e8ea <platform_event_wait+0x16e>
1000e892:	e028      	b.n	1000e8e6 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e894:	4c4d      	ldr	r4, [pc, #308]	; (1000e9cc <platform_event_wait+0x250>)
1000e896:	4d49      	ldr	r5, [pc, #292]	; (1000e9bc <platform_event_wait+0x240>)
1000e898:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e89a:	702b      	strb	r3, [r5, #0]
1000e89c:	0a1b      	lsrs	r3, r3, #8
1000e89e:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e8a0:	8910      	ldrh	r0, [r2, #8]
1000e8a2:	4b4b      	ldr	r3, [pc, #300]	; (1000e9d0 <platform_event_wait+0x254>)
1000e8a4:	681b      	ldr	r3, [r3, #0]
1000e8a6:	4798      	blx	r3
1000e8a8:	7128      	strb	r0, [r5, #4]
1000e8aa:	0a00      	lsrs	r0, r0, #8
1000e8ac:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e8ae:	6820      	ldr	r0, [r4, #0]
1000e8b0:	4b40      	ldr	r3, [pc, #256]	; (1000e9b4 <platform_event_wait+0x238>)
1000e8b2:	681a      	ldr	r2, [r3, #0]
1000e8b4:	88d2      	ldrh	r2, [r2, #6]
1000e8b6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e8b8:	681d      	ldr	r5, [r3, #0]
1000e8ba:	896b      	ldrh	r3, [r5, #10]
1000e8bc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e8be:	3008      	adds	r0, #8
1000e8c0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e8c2:	896a      	ldrh	r2, [r5, #10]
1000e8c4:	2a00      	cmp	r2, #0
1000e8c6:	d003      	beq.n	1000e8d0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e8c8:	0029      	movs	r1, r5
1000e8ca:	310c      	adds	r1, #12
1000e8cc:	4b3c      	ldr	r3, [pc, #240]	; (1000e9c0 <platform_event_wait+0x244>)
1000e8ce:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e8d0:	8969      	ldrh	r1, [r5, #10]
1000e8d2:	3108      	adds	r1, #8
1000e8d4:	4b3c      	ldr	r3, [pc, #240]	; (1000e9c8 <platform_event_wait+0x24c>)
1000e8d6:	681b      	ldr	r3, [r3, #0]
1000e8d8:	4838      	ldr	r0, [pc, #224]	; (1000e9bc <platform_event_wait+0x240>)
1000e8da:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e8dc:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e8de:	2503      	movs	r5, #3
1000e8e0:	e003      	b.n	1000e8ea <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e8e2:	2400      	movs	r4, #0
1000e8e4:	e001      	b.n	1000e8ea <platform_event_wait+0x16e>
1000e8e6:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e8e8:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e8ea:	4b32      	ldr	r3, [pc, #200]	; (1000e9b4 <platform_event_wait+0x238>)
1000e8ec:	6818      	ldr	r0, [r3, #0]
1000e8ee:	4b39      	ldr	r3, [pc, #228]	; (1000e9d4 <platform_event_wait+0x258>)
1000e8f0:	681b      	ldr	r3, [r3, #0]
1000e8f2:	4798      	blx	r3
1000e8f4:	e000      	b.n	1000e8f8 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e8f6:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e8f8:	2c00      	cmp	r4, #0
1000e8fa:	d000      	beq.n	1000e8fe <platform_event_wait+0x182>
1000e8fc:	e76b      	b.n	1000e7d6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e8fe:	464b      	mov	r3, r9
1000e900:	2b00      	cmp	r3, #0
1000e902:	d046      	beq.n	1000e992 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e904:	4b29      	ldr	r3, [pc, #164]	; (1000e9ac <platform_event_wait+0x230>)
1000e906:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e908:	2e00      	cmp	r6, #0
1000e90a:	d104      	bne.n	1000e916 <platform_event_wait+0x19a>
1000e90c:	2300      	movs	r3, #0
1000e90e:	6a1c      	ldr	r4, [r3, #32]
1000e910:	2c00      	cmp	r4, #0
1000e912:	d131      	bne.n	1000e978 <platform_event_wait+0x1fc>
1000e914:	e03d      	b.n	1000e992 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e916:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e918:	2314      	movs	r3, #20
1000e91a:	469c      	mov	ip, r3
1000e91c:	44b4      	add	ip, r6
1000e91e:	4663      	mov	r3, ip
1000e920:	4660      	mov	r0, ip
1000e922:	9300      	str	r3, [sp, #0]
1000e924:	4b2c      	ldr	r3, [pc, #176]	; (1000e9d8 <platform_event_wait+0x25c>)
1000e926:	681b      	ldr	r3, [r3, #0]
1000e928:	4798      	blx	r3
	while(NULL != current)
1000e92a:	2c00      	cmp	r4, #0
1000e92c:	d01f      	beq.n	1000e96e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e92e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e930:	23cd      	movs	r3, #205	; 0xcd
1000e932:	009b      	lsls	r3, r3, #2
1000e934:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e936:	4b27      	ldr	r3, [pc, #156]	; (1000e9d4 <platform_event_wait+0x258>)
1000e938:	469a      	mov	sl, r3
1000e93a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e93c:	6803      	ldr	r3, [r0, #0]
1000e93e:	889b      	ldrh	r3, [r3, #4]
1000e940:	4543      	cmp	r3, r8
1000e942:	d110      	bne.n	1000e966 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e944:	2f00      	cmp	r7, #0
1000e946:	d006      	beq.n	1000e956 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e948:	6883      	ldr	r3, [r0, #8]
1000e94a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e94c:	4653      	mov	r3, sl
1000e94e:	681b      	ldr	r3, [r3, #0]
1000e950:	4798      	blx	r3
				current = prev->pstrNext;
1000e952:	68b8      	ldr	r0, [r7, #8]
1000e954:	e009      	b.n	1000e96a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e956:	6883      	ldr	r3, [r0, #8]
1000e958:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e95a:	4b1e      	ldr	r3, [pc, #120]	; (1000e9d4 <platform_event_wait+0x258>)
1000e95c:	681b      	ldr	r3, [r3, #0]
1000e95e:	9301      	str	r3, [sp, #4]
1000e960:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e962:	6a30      	ldr	r0, [r6, #32]
1000e964:	e001      	b.n	1000e96a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e966:	0007      	movs	r7, r0
1000e968:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e96a:	2800      	cmp	r0, #0
1000e96c:	d1e6      	bne.n	1000e93c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e96e:	4b1b      	ldr	r3, [pc, #108]	; (1000e9dc <platform_event_wait+0x260>)
1000e970:	681b      	ldr	r3, [r3, #0]
1000e972:	9800      	ldr	r0, [sp, #0]
1000e974:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e976:	e00c      	b.n	1000e992 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e978:	2314      	movs	r3, #20
1000e97a:	9300      	str	r3, [sp, #0]
1000e97c:	4b16      	ldr	r3, [pc, #88]	; (1000e9d8 <platform_event_wait+0x25c>)
1000e97e:	681b      	ldr	r3, [r3, #0]
1000e980:	2014      	movs	r0, #20
1000e982:	4798      	blx	r3
1000e984:	e7d3      	b.n	1000e92e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e986:	4b10      	ldr	r3, [pc, #64]	; (1000e9c8 <platform_event_wait+0x24c>)
1000e988:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e98a:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e98c:	2b00      	cmp	r3, #0
1000e98e:	d0ac      	beq.n	1000e8ea <platform_event_wait+0x16e>
1000e990:	e77b      	b.n	1000e88a <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e992:	0028      	movs	r0, r5
1000e994:	b007      	add	sp, #28
1000e996:	bc3c      	pop	{r2, r3, r4, r5}
1000e998:	4690      	mov	r8, r2
1000e99a:	4699      	mov	r9, r3
1000e99c:	46a2      	mov	sl, r4
1000e99e:	46ab      	mov	fp, r5
1000e9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9a2:	46c0      	nop			; (mov r8, r8)
1000e9a4:	100166e1 	.word	0x100166e1
1000e9a8:	1000e6ed 	.word	0x1000e6ed
1000e9ac:	1001ada0 	.word	0x1001ada0
1000e9b0:	1001ad88 	.word	0x1001ad88
1000e9b4:	1001ad94 	.word	0x1001ad94
1000e9b8:	1001bd0c 	.word	0x1001bd0c
1000e9bc:	1001ba74 	.word	0x1001ba74
1000e9c0:	100166cf 	.word	0x100166cf
1000e9c4:	1000e30d 	.word	0x1000e30d
1000e9c8:	1001ad90 	.word	0x1001ad90
1000e9cc:	1001ad80 	.word	0x1001ad80
1000e9d0:	1001ad60 	.word	0x1001ad60
1000e9d4:	1001ad5c 	.word	0x1001ad5c
1000e9d8:	1001ad7c 	.word	0x1001ad7c
1000e9dc:	1001ad68 	.word	0x1001ad68

1000e9e0 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e9e0:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e9e2:	4b03      	ldr	r3, [pc, #12]	; (1000e9f0 <acquire_sleep_lock+0x10>)
1000e9e4:	681b      	ldr	r3, [r3, #0]
1000e9e6:	2080      	movs	r0, #128	; 0x80
1000e9e8:	0200      	lsls	r0, r0, #8
1000e9ea:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e9ec:	2008      	movs	r0, #8
1000e9ee:	bd10      	pop	{r4, pc}
1000e9f0:	1001ba2c 	.word	0x1001ba2c

1000e9f4 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e9f4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e9f6:	4b03      	ldr	r3, [pc, #12]	; (1000ea04 <release_message_lock+0x10>)
1000e9f8:	681b      	ldr	r3, [r3, #0]
1000e9fa:	2080      	movs	r0, #128	; 0x80
1000e9fc:	01c0      	lsls	r0, r0, #7
1000e9fe:	4798      	blx	r3
	return status;
}
1000ea00:	2000      	movs	r0, #0
1000ea02:	bd10      	pop	{r4, pc}
1000ea04:	1001ba38 	.word	0x1001ba38

1000ea08 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ea08:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ea0a:	4c05      	ldr	r4, [pc, #20]	; (1000ea20 <release_sleep_lock+0x18>)
1000ea0c:	2080      	movs	r0, #128	; 0x80
1000ea0e:	01c0      	lsls	r0, r0, #7
1000ea10:	6823      	ldr	r3, [r4, #0]
1000ea12:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000ea14:	6823      	ldr	r3, [r4, #0]
1000ea16:	2080      	movs	r0, #128	; 0x80
1000ea18:	0200      	lsls	r0, r0, #8
1000ea1a:	4798      	blx	r3
	return status;
}
1000ea1c:	2000      	movs	r0, #0
1000ea1e:	bd10      	pop	{r4, pc}
1000ea20:	1001ba38 	.word	0x1001ba38

1000ea24 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000ea24:	2800      	cmp	r0, #0
1000ea26:	d003      	beq.n	1000ea30 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000ea28:	4b02      	ldr	r3, [pc, #8]	; (1000ea34 <register_resume_callback+0x10>)
1000ea2a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000ea2c:	2000      	movs	r0, #0
1000ea2e:	e000      	b.n	1000ea32 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000ea30:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000ea32:	4770      	bx	lr
1000ea34:	1001bd00 	.word	0x1001bd00

1000ea38 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000ea38:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ea3a:	4a18      	ldr	r2, [pc, #96]	; (1000ea9c <gpio1_combined_isr_handler+0x64>)
1000ea3c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ea3e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ea40:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ea42:	2180      	movs	r1, #128	; 0x80
1000ea44:	0209      	lsls	r1, r1, #8
1000ea46:	4301      	orrs	r1, r0
1000ea48:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ea4a:	0010      	movs	r0, r2
1000ea4c:	4d14      	ldr	r5, [pc, #80]	; (1000eaa0 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ea4e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ea50:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ea52:	05db      	lsls	r3, r3, #23
1000ea54:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ea56:	d011      	beq.n	1000ea7c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ea58:	b2db      	uxtb	r3, r3
1000ea5a:	4259      	negs	r1, r3
1000ea5c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000ea5e:	2b01      	cmp	r3, #1
1000ea60:	d006      	beq.n	1000ea70 <gpio1_combined_isr_handler+0x38>
1000ea62:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000ea64:	085b      	lsrs	r3, r3, #1
				index++;
1000ea66:	3101      	adds	r1, #1
1000ea68:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000ea6a:	2b01      	cmp	r3, #1
1000ea6c:	d1fa      	bne.n	1000ea64 <gpio1_combined_isr_handler+0x2c>
1000ea6e:	e000      	b.n	1000ea72 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ea70:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ea72:	0023      	movs	r3, r4
1000ea74:	408b      	lsls	r3, r1
1000ea76:	b29b      	uxth	r3, r3
1000ea78:	8703      	strh	r3, [r0, #56]	; 0x38
1000ea7a:	e003      	b.n	1000ea84 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ea7c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ea7e:	432b      	orrs	r3, r5
1000ea80:	b29b      	uxth	r3, r3
1000ea82:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000ea84:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ea86:	05db      	lsls	r3, r3, #23
1000ea88:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ea8a:	d1e2      	bne.n	1000ea52 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ea8c:	2180      	movs	r1, #128	; 0x80
1000ea8e:	0049      	lsls	r1, r1, #1
1000ea90:	3381      	adds	r3, #129	; 0x81
1000ea92:	33ff      	adds	r3, #255	; 0xff
1000ea94:	4a03      	ldr	r2, [pc, #12]	; (1000eaa4 <gpio1_combined_isr_handler+0x6c>)
1000ea96:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000ea98:	bd30      	pop	{r4, r5, pc}
1000ea9a:	46c0      	nop			; (mov r8, r8)
1000ea9c:	40011000 	.word	0x40011000
1000eaa0:	ffff8000 	.word	0xffff8000
1000eaa4:	e000e100 	.word	0xe000e100

1000eaa8 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000eaa8:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000eaaa:	4a17      	ldr	r2, [pc, #92]	; (1000eb08 <gpio0_combined_isr_handler+0x60>)
1000eaac:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000eaae:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000eab0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000eab2:	2180      	movs	r1, #128	; 0x80
1000eab4:	0209      	lsls	r1, r1, #8
1000eab6:	4301      	orrs	r1, r0
1000eab8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000eaba:	0010      	movs	r0, r2
1000eabc:	4d13      	ldr	r5, [pc, #76]	; (1000eb0c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000eabe:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000eac0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000eac2:	05db      	lsls	r3, r3, #23
1000eac4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000eac6:	d011      	beq.n	1000eaec <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000eac8:	b2db      	uxtb	r3, r3
1000eaca:	4259      	negs	r1, r3
1000eacc:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000eace:	2b01      	cmp	r3, #1
1000ead0:	d006      	beq.n	1000eae0 <gpio0_combined_isr_handler+0x38>
1000ead2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ead4:	085b      	lsrs	r3, r3, #1
				index++;
1000ead6:	3101      	adds	r1, #1
1000ead8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000eada:	2b01      	cmp	r3, #1
1000eadc:	d1fa      	bne.n	1000ead4 <gpio0_combined_isr_handler+0x2c>
1000eade:	e000      	b.n	1000eae2 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000eae0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000eae2:	0023      	movs	r3, r4
1000eae4:	408b      	lsls	r3, r1
1000eae6:	b29b      	uxth	r3, r3
1000eae8:	8703      	strh	r3, [r0, #56]	; 0x38
1000eaea:	e003      	b.n	1000eaf4 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000eaec:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000eaee:	432b      	orrs	r3, r5
1000eaf0:	b29b      	uxth	r3, r3
1000eaf2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000eaf4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000eaf6:	05db      	lsls	r3, r3, #23
1000eaf8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000eafa:	d1e2      	bne.n	1000eac2 <gpio0_combined_isr_handler+0x1a>
1000eafc:	2180      	movs	r1, #128	; 0x80
1000eafe:	3381      	adds	r3, #129	; 0x81
1000eb00:	33ff      	adds	r3, #255	; 0xff
1000eb02:	4a03      	ldr	r2, [pc, #12]	; (1000eb10 <gpio0_combined_isr_handler+0x68>)
1000eb04:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000eb06:	bd30      	pop	{r4, r5, pc}
1000eb08:	40010000 	.word	0x40010000
1000eb0c:	ffff8000 	.word	0xffff8000
1000eb10:	e000e100 	.word	0xe000e100

1000eb14 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000eb14:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000eb16:	4b0c      	ldr	r3, [pc, #48]	; (1000eb48 <PORT1_COMB_Handler+0x34>)
1000eb18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000eb1a:	0b5b      	lsrs	r3, r3, #13
1000eb1c:	d010      	beq.n	1000eb40 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000eb1e:	4b0b      	ldr	r3, [pc, #44]	; (1000eb4c <PORT1_COMB_Handler+0x38>)
1000eb20:	681b      	ldr	r3, [r3, #0]
1000eb22:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000eb24:	4a08      	ldr	r2, [pc, #32]	; (1000eb48 <PORT1_COMB_Handler+0x34>)
1000eb26:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000eb28:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000eb2a:	0b5b      	lsrs	r3, r3, #13
1000eb2c:	035b      	lsls	r3, r3, #13
1000eb2e:	430b      	orrs	r3, r1
1000eb30:	8713      	strh	r3, [r2, #56]	; 0x38
1000eb32:	2180      	movs	r1, #128	; 0x80
1000eb34:	0049      	lsls	r1, r1, #1
1000eb36:	23c0      	movs	r3, #192	; 0xc0
1000eb38:	005b      	lsls	r3, r3, #1
1000eb3a:	4a05      	ldr	r2, [pc, #20]	; (1000eb50 <PORT1_COMB_Handler+0x3c>)
1000eb3c:	50d1      	str	r1, [r2, r3]
1000eb3e:	e001      	b.n	1000eb44 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000eb40:	4b04      	ldr	r3, [pc, #16]	; (1000eb54 <PORT1_COMB_Handler+0x40>)
1000eb42:	4798      	blx	r3
	}
}
1000eb44:	bd10      	pop	{r4, pc}
1000eb46:	46c0      	nop			; (mov r8, r8)
1000eb48:	40011000 	.word	0x40011000
1000eb4c:	1001bcf8 	.word	0x1001bcf8
1000eb50:	e000e100 	.word	0xe000e100
1000eb54:	1000ea39 	.word	0x1000ea39

1000eb58 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000eb58:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000eb5a:	2802      	cmp	r0, #2
1000eb5c:	d804      	bhi.n	1000eb68 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000eb5e:	0080      	lsls	r0, r0, #2
1000eb60:	2200      	movs	r2, #0
1000eb62:	4b02      	ldr	r3, [pc, #8]	; (1000eb6c <wakeup_int_unregister_callback+0x14>)
1000eb64:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000eb66:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000eb68:	0018      	movs	r0, r3
1000eb6a:	4770      	bx	lr
1000eb6c:	1001bd10 	.word	0x1001bd10

1000eb70 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000eb70:	b510      	push	{r4, lr}
1000eb72:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000eb74:	7803      	ldrb	r3, [r0, #0]
1000eb76:	2b01      	cmp	r3, #1
1000eb78:	d108      	bne.n	1000eb8c <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000eb7a:	4b11      	ldr	r3, [pc, #68]	; (1000ebc0 <wakeup_active_event_callback+0x50>)
1000eb7c:	681b      	ldr	r3, [r3, #0]
1000eb7e:	2b00      	cmp	r3, #0
1000eb80:	d000      	beq.n	1000eb84 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000eb82:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000eb84:	23ff      	movs	r3, #255	; 0xff
1000eb86:	6822      	ldr	r2, [r4, #0]
1000eb88:	439a      	bics	r2, r3
1000eb8a:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000eb8c:	7863      	ldrb	r3, [r4, #1]
1000eb8e:	2b01      	cmp	r3, #1
1000eb90:	d108      	bne.n	1000eba4 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000eb92:	4b0b      	ldr	r3, [pc, #44]	; (1000ebc0 <wakeup_active_event_callback+0x50>)
1000eb94:	685b      	ldr	r3, [r3, #4]
1000eb96:	2b00      	cmp	r3, #0
1000eb98:	d000      	beq.n	1000eb9c <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000eb9a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000eb9c:	4b09      	ldr	r3, [pc, #36]	; (1000ebc4 <wakeup_active_event_callback+0x54>)
1000eb9e:	6822      	ldr	r2, [r4, #0]
1000eba0:	4013      	ands	r3, r2
1000eba2:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000eba4:	78a3      	ldrb	r3, [r4, #2]
1000eba6:	2b01      	cmp	r3, #1
1000eba8:	d108      	bne.n	1000ebbc <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000ebaa:	4b05      	ldr	r3, [pc, #20]	; (1000ebc0 <wakeup_active_event_callback+0x50>)
1000ebac:	689b      	ldr	r3, [r3, #8]
1000ebae:	2b00      	cmp	r3, #0
1000ebb0:	d000      	beq.n	1000ebb4 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000ebb2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000ebb4:	4b04      	ldr	r3, [pc, #16]	; (1000ebc8 <wakeup_active_event_callback+0x58>)
1000ebb6:	6822      	ldr	r2, [r4, #0]
1000ebb8:	4013      	ands	r3, r2
1000ebba:	6023      	str	r3, [r4, #0]
	}
}
1000ebbc:	bd10      	pop	{r4, pc}
1000ebbe:	46c0      	nop			; (mov r8, r8)
1000ebc0:	1001bd10 	.word	0x1001bd10
1000ebc4:	ffff00ff 	.word	0xffff00ff
1000ebc8:	ff00ffff 	.word	0xff00ffff

1000ebcc <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000ebcc:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000ebce:	4b09      	ldr	r3, [pc, #36]	; (1000ebf4 <resume_cb+0x28>)
1000ebd0:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000ebd2:	4b09      	ldr	r3, [pc, #36]	; (1000ebf8 <resume_cb+0x2c>)
1000ebd4:	4798      	blx	r3
	sms_dualtimer_init();
1000ebd6:	4b09      	ldr	r3, [pc, #36]	; (1000ebfc <resume_cb+0x30>)
1000ebd8:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000ebda:	4b09      	ldr	r3, [pc, #36]	; (1000ec00 <resume_cb+0x34>)
1000ebdc:	4798      	blx	r3
	sms_led_gpio_init();
1000ebde:	4b09      	ldr	r3, [pc, #36]	; (1000ec04 <resume_cb+0x38>)
1000ebe0:	4798      	blx	r3
	sms_spi_master_configure();
1000ebe2:	4b09      	ldr	r3, [pc, #36]	; (1000ec08 <resume_cb+0x3c>)
1000ebe4:	4798      	blx	r3
	sms_i2c_master_configure();
1000ebe6:	4b09      	ldr	r3, [pc, #36]	; (1000ec0c <resume_cb+0x40>)
1000ebe8:	4798      	blx	r3
	sms_imu_configure_gpio();
1000ebea:	4b09      	ldr	r3, [pc, #36]	; (1000ec10 <resume_cb+0x44>)
1000ebec:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000ebee:	4b09      	ldr	r3, [pc, #36]	; (1000ec14 <resume_cb+0x48>)
1000ebf0:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000ebf2:	bd10      	pop	{r4, pc}
1000ebf4:	1000e419 	.word	0x1000e419
1000ebf8:	1000e181 	.word	0x1000e181
1000ebfc:	1000add5 	.word	0x1000add5
1000ec00:	1000942d 	.word	0x1000942d
1000ec04:	1000a8b5 	.word	0x1000a8b5
1000ec08:	1000ac89 	.word	0x1000ac89
1000ec0c:	10009839 	.word	0x10009839
1000ec10:	100099cd 	.word	0x100099cd
1000ec14:	10009761 	.word	0x10009761

1000ec18 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000ec18:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000ec1a:	2300      	movs	r3, #0
1000ec1c:	4a09      	ldr	r2, [pc, #36]	; (1000ec44 <sms_init_variables+0x2c>)
1000ec1e:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000ec20:	4a09      	ldr	r2, [pc, #36]	; (1000ec48 <sms_init_variables+0x30>)
1000ec22:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000ec24:	2101      	movs	r1, #1
1000ec26:	4a09      	ldr	r2, [pc, #36]	; (1000ec4c <sms_init_variables+0x34>)
1000ec28:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000ec2a:	4a09      	ldr	r2, [pc, #36]	; (1000ec50 <sms_init_variables+0x38>)
1000ec2c:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000ec2e:	2201      	movs	r2, #1
1000ec30:	4252      	negs	r2, r2
1000ec32:	4b08      	ldr	r3, [pc, #32]	; (1000ec54 <sms_init_variables+0x3c>)
1000ec34:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000ec36:	4b08      	ldr	r3, [pc, #32]	; (1000ec58 <sms_init_variables+0x40>)
1000ec38:	4798      	blx	r3
	sms_button_init_variables();
1000ec3a:	4b08      	ldr	r3, [pc, #32]	; (1000ec5c <sms_init_variables+0x44>)
1000ec3c:	4798      	blx	r3
	sms_pressure_init_variables();
1000ec3e:	4b08      	ldr	r3, [pc, #32]	; (1000ec60 <sms_init_variables+0x48>)
1000ec40:	4798      	blx	r3
}
1000ec42:	bd10      	pop	{r4, pc}
1000ec44:	1001ae74 	.word	0x1001ae74
1000ec48:	1001afa3 	.word	0x1001afa3
1000ec4c:	1001ae7c 	.word	0x1001ae7c
1000ec50:	1001ae7d 	.word	0x1001ae7d
1000ec54:	1001ae78 	.word	0x1001ae78
1000ec58:	10008dc1 	.word	0x10008dc1
1000ec5c:	10009405 	.word	0x10009405
1000ec60:	1000a949 	.word	0x1000a949

1000ec64 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000ec66:	2210      	movs	r2, #16
1000ec68:	4b73      	ldr	r3, [pc, #460]	; (1000ee38 <main+0x1d4>)
1000ec6a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000ec6c:	4b73      	ldr	r3, [pc, #460]	; (1000ee3c <main+0x1d8>)
1000ec6e:	4798      	blx	r3
	gpio_init(); // GPIO
1000ec70:	4b73      	ldr	r3, [pc, #460]	; (1000ee40 <main+0x1dc>)
1000ec72:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000ec74:	4b73      	ldr	r3, [pc, #460]	; (1000ee44 <main+0x1e0>)
1000ec76:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000ec78:	4b73      	ldr	r3, [pc, #460]	; (1000ee48 <main+0x1e4>)
1000ec7a:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000ec7c:	4b73      	ldr	r3, [pc, #460]	; (1000ee4c <main+0x1e8>)
1000ec7e:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000ec80:	4b73      	ldr	r3, [pc, #460]	; (1000ee50 <main+0x1ec>)
1000ec82:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000ec84:	4b73      	ldr	r3, [pc, #460]	; (1000ee54 <main+0x1f0>)
1000ec86:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000ec88:	4b73      	ldr	r3, [pc, #460]	; (1000ee58 <main+0x1f4>)
1000ec8a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000ec8c:	4b73      	ldr	r3, [pc, #460]	; (1000ee5c <main+0x1f8>)
1000ec8e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000ec90:	4b73      	ldr	r3, [pc, #460]	; (1000ee60 <main+0x1fc>)
1000ec92:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000ec94:	4b73      	ldr	r3, [pc, #460]	; (1000ee64 <main+0x200>)
1000ec96:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000ec98:	4b73      	ldr	r3, [pc, #460]	; (1000ee68 <main+0x204>)
1000ec9a:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000ec9c:	2000      	movs	r0, #0
1000ec9e:	4b73      	ldr	r3, [pc, #460]	; (1000ee6c <main+0x208>)
1000eca0:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000eca2:	4b73      	ldr	r3, [pc, #460]	; (1000ee70 <main+0x20c>)
1000eca4:	4798      	blx	r3
	sms_pressure_define_services();
1000eca6:	4b73      	ldr	r3, [pc, #460]	; (1000ee74 <main+0x210>)
1000eca8:	4798      	blx	r3
	sms_imu_define_services();
1000ecaa:	4b73      	ldr	r3, [pc, #460]	; (1000ee78 <main+0x214>)
1000ecac:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000ecae:	4873      	ldr	r0, [pc, #460]	; (1000ee7c <main+0x218>)
1000ecb0:	4b73      	ldr	r3, [pc, #460]	; (1000ee80 <main+0x21c>)
1000ecb2:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000ecb4:	4b73      	ldr	r3, [pc, #460]	; (1000ee84 <main+0x220>)
1000ecb6:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000ecb8:	4b73      	ldr	r3, [pc, #460]	; (1000ee88 <main+0x224>)
1000ecba:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000ecbc:	4a73      	ldr	r2, [pc, #460]	; (1000ee8c <main+0x228>)
1000ecbe:	2100      	movs	r1, #0
1000ecc0:	2000      	movs	r0, #0
1000ecc2:	4c73      	ldr	r4, [pc, #460]	; (1000ee90 <main+0x22c>)
1000ecc4:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000ecc6:	4a73      	ldr	r2, [pc, #460]	; (1000ee94 <main+0x230>)
1000ecc8:	2102      	movs	r1, #2
1000ecca:	2000      	movs	r0, #0
1000eccc:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000ecce:	2100      	movs	r1, #0
1000ecd0:	2000      	movs	r0, #0
1000ecd2:	4b71      	ldr	r3, [pc, #452]	; (1000ee98 <main+0x234>)
1000ecd4:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ecd6:	4e71      	ldr	r6, [pc, #452]	; (1000ee9c <main+0x238>)
1000ecd8:	4c71      	ldr	r4, [pc, #452]	; (1000eea0 <main+0x23c>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000ecda:	4d72      	ldr	r5, [pc, #456]	; (1000eea4 <main+0x240>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ecdc:	6830      	ldr	r0, [r6, #0]
1000ecde:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000ece0:	2800      	cmp	r0, #0
1000ece2:	d000      	beq.n	1000ece6 <main+0x82>
1000ece4:	e08f      	b.n	1000ee06 <main+0x1a2>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000ece6:	4b70      	ldr	r3, [pc, #448]	; (1000eea8 <main+0x244>)
1000ece8:	78db      	ldrb	r3, [r3, #3]
1000ecea:	2b00      	cmp	r3, #0
1000ecec:	d013      	beq.n	1000ed16 <main+0xb2>
				button_instance.btn0.new_int = false;
1000ecee:	2200      	movs	r2, #0
1000ecf0:	4b6d      	ldr	r3, [pc, #436]	; (1000eea8 <main+0x244>)
1000ecf2:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000ecf4:	486b      	ldr	r0, [pc, #428]	; (1000eea4 <main+0x240>)
1000ecf6:	4b6d      	ldr	r3, [pc, #436]	; (1000eeac <main+0x248>)
1000ecf8:	4798      	blx	r3
1000ecfa:	486d      	ldr	r0, [pc, #436]	; (1000eeb0 <main+0x24c>)
1000ecfc:	4b6d      	ldr	r3, [pc, #436]	; (1000eeb4 <main+0x250>)
1000ecfe:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000ed00:	2000      	movs	r0, #0
1000ed02:	4b6d      	ldr	r3, [pc, #436]	; (1000eeb8 <main+0x254>)
1000ed04:	4798      	blx	r3
1000ed06:	2800      	cmp	r0, #0
1000ed08:	da05      	bge.n	1000ed16 <main+0xb2>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000ed0a:	4866      	ldr	r0, [pc, #408]	; (1000eea4 <main+0x240>)
1000ed0c:	4b67      	ldr	r3, [pc, #412]	; (1000eeac <main+0x248>)
1000ed0e:	4798      	blx	r3
1000ed10:	486a      	ldr	r0, [pc, #424]	; (1000eebc <main+0x258>)
1000ed12:	4b68      	ldr	r3, [pc, #416]	; (1000eeb4 <main+0x250>)
1000ed14:	4798      	blx	r3
				}
			}
			if(button_instance.btn1.new_int) {
1000ed16:	4b64      	ldr	r3, [pc, #400]	; (1000eea8 <main+0x244>)
1000ed18:	7a5b      	ldrb	r3, [r3, #9]
1000ed1a:	2b00      	cmp	r3, #0
1000ed1c:	d013      	beq.n	1000ed46 <main+0xe2>
				button_instance.btn1.new_int = false;
1000ed1e:	2200      	movs	r2, #0
1000ed20:	4b61      	ldr	r3, [pc, #388]	; (1000eea8 <main+0x244>)
1000ed22:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000ed24:	485f      	ldr	r0, [pc, #380]	; (1000eea4 <main+0x240>)
1000ed26:	4b61      	ldr	r3, [pc, #388]	; (1000eeac <main+0x248>)
1000ed28:	4798      	blx	r3
1000ed2a:	4865      	ldr	r0, [pc, #404]	; (1000eec0 <main+0x25c>)
1000ed2c:	4b61      	ldr	r3, [pc, #388]	; (1000eeb4 <main+0x250>)
1000ed2e:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000ed30:	2001      	movs	r0, #1
1000ed32:	4b61      	ldr	r3, [pc, #388]	; (1000eeb8 <main+0x254>)
1000ed34:	4798      	blx	r3
1000ed36:	2800      	cmp	r0, #0
1000ed38:	da05      	bge.n	1000ed46 <main+0xe2>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000ed3a:	485a      	ldr	r0, [pc, #360]	; (1000eea4 <main+0x240>)
1000ed3c:	4b5b      	ldr	r3, [pc, #364]	; (1000eeac <main+0x248>)
1000ed3e:	4798      	blx	r3
1000ed40:	485e      	ldr	r0, [pc, #376]	; (1000eebc <main+0x258>)
1000ed42:	4b5c      	ldr	r3, [pc, #368]	; (1000eeb4 <main+0x250>)
1000ed44:	4798      	blx	r3
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000ed46:	2381      	movs	r3, #129	; 0x81
1000ed48:	4a5e      	ldr	r2, [pc, #376]	; (1000eec4 <main+0x260>)
1000ed4a:	5cd3      	ldrb	r3, [r2, r3]
1000ed4c:	2b00      	cmp	r3, #0
1000ed4e:	d00f      	beq.n	1000ed70 <main+0x10c>
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000ed50:	2101      	movs	r1, #1
1000ed52:	200e      	movs	r0, #14
1000ed54:	4f5c      	ldr	r7, [pc, #368]	; (1000eec8 <main+0x264>)
1000ed56:	47b8      	blx	r7
				//DBG_LOG("MPU int (%ld)... ", cnt++);
				sms_imu_poll_data();
1000ed58:	4b5c      	ldr	r3, [pc, #368]	; (1000eecc <main+0x268>)
1000ed5a:	4798      	blx	r3
				
				imu_device.interrupt.new_gyro = false;
1000ed5c:	4b59      	ldr	r3, [pc, #356]	; (1000eec4 <main+0x260>)
1000ed5e:	2100      	movs	r1, #0
1000ed60:	2281      	movs	r2, #129	; 0x81
1000ed62:	5499      	strb	r1, [r3, r2]
				imu_device.interrupt.rts = true;
1000ed64:	3101      	adds	r1, #1
1000ed66:	3201      	adds	r2, #1
1000ed68:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000ed6a:	2100      	movs	r1, #0
1000ed6c:	200e      	movs	r0, #14
1000ed6e:	47b8      	blx	r7
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000ed70:	2329      	movs	r3, #41	; 0x29
1000ed72:	4a57      	ldr	r2, [pc, #348]	; (1000eed0 <main+0x26c>)
1000ed74:	5cd3      	ldrb	r3, [r2, r3]
1000ed76:	2b00      	cmp	r3, #0
1000ed78:	d002      	beq.n	1000ed80 <main+0x11c>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000ed7a:	2100      	movs	r1, #0
1000ed7c:	2329      	movs	r3, #41	; 0x29
1000ed7e:	54d1      	strb	r1, [r2, r3]
				//sms_dualtimer2_fn();
				//timer2_instance.new_int = false;
			//}
			
			/* Sending region */
			if(imu_device.interrupt.rts) {
1000ed80:	2382      	movs	r3, #130	; 0x82
1000ed82:	4a50      	ldr	r2, [pc, #320]	; (1000eec4 <main+0x260>)
1000ed84:	5cd3      	ldrb	r3, [r2, r3]
1000ed86:	2b00      	cmp	r3, #0
1000ed88:	d015      	beq.n	1000edb6 <main+0x152>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000ed8a:	2101      	movs	r1, #1
1000ed8c:	200f      	movs	r0, #15
1000ed8e:	4b4e      	ldr	r3, [pc, #312]	; (1000eec8 <main+0x264>)
1000ed90:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ed92:	4b29      	ldr	r3, [pc, #164]	; (1000ee38 <main+0x1d4>)
1000ed94:	785b      	ldrb	r3, [r3, #1]
1000ed96:	2b00      	cmp	r3, #0
1000ed98:	d103      	bne.n	1000eda2 <main+0x13e>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000ed9a:	2002      	movs	r0, #2
1000ed9c:	4b4d      	ldr	r3, [pc, #308]	; (1000eed4 <main+0x270>)
1000ed9e:	4798      	blx	r3
1000eda0:	e002      	b.n	1000eda8 <main+0x144>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000eda2:	484d      	ldr	r0, [pc, #308]	; (1000eed8 <main+0x274>)
1000eda4:	4b43      	ldr	r3, [pc, #268]	; (1000eeb4 <main+0x250>)
1000eda6:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000eda8:	2100      	movs	r1, #0
1000edaa:	2382      	movs	r3, #130	; 0x82
1000edac:	4a45      	ldr	r2, [pc, #276]	; (1000eec4 <main+0x260>)
1000edae:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000edb0:	200f      	movs	r0, #15
1000edb2:	4b45      	ldr	r3, [pc, #276]	; (1000eec8 <main+0x264>)
1000edb4:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000edb6:	232a      	movs	r3, #42	; 0x2a
1000edb8:	4a45      	ldr	r2, [pc, #276]	; (1000eed0 <main+0x26c>)
1000edba:	5cd3      	ldrb	r3, [r2, r3]
1000edbc:	2b00      	cmp	r3, #0
1000edbe:	d08d      	beq.n	1000ecdc <main+0x78>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000edc0:	4838      	ldr	r0, [pc, #224]	; (1000eea4 <main+0x240>)
1000edc2:	4b3a      	ldr	r3, [pc, #232]	; (1000eeac <main+0x248>)
1000edc4:	4798      	blx	r3
1000edc6:	2381      	movs	r3, #129	; 0x81
1000edc8:	4a3e      	ldr	r2, [pc, #248]	; (1000eec4 <main+0x260>)
1000edca:	5cd1      	ldrb	r1, [r2, r3]
1000edcc:	b2c9      	uxtb	r1, r1
1000edce:	4f1a      	ldr	r7, [pc, #104]	; (1000ee38 <main+0x1d4>)
1000edd0:	787a      	ldrb	r2, [r7, #1]
1000edd2:	b2d2      	uxtb	r2, r2
1000edd4:	4841      	ldr	r0, [pc, #260]	; (1000eedc <main+0x278>)
1000edd6:	4b37      	ldr	r3, [pc, #220]	; (1000eeb4 <main+0x250>)
1000edd8:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000edda:	2101      	movs	r1, #1
1000eddc:	200f      	movs	r0, #15
1000edde:	4b3a      	ldr	r3, [pc, #232]	; (1000eec8 <main+0x264>)
1000ede0:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ede2:	787b      	ldrb	r3, [r7, #1]
1000ede4:	2b00      	cmp	r3, #0
1000ede6:	d103      	bne.n	1000edf0 <main+0x18c>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000ede8:	2001      	movs	r0, #1
1000edea:	4b3a      	ldr	r3, [pc, #232]	; (1000eed4 <main+0x270>)
1000edec:	4798      	blx	r3
1000edee:	e002      	b.n	1000edf6 <main+0x192>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000edf0:	4839      	ldr	r0, [pc, #228]	; (1000eed8 <main+0x274>)
1000edf2:	4b30      	ldr	r3, [pc, #192]	; (1000eeb4 <main+0x250>)
1000edf4:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000edf6:	2100      	movs	r1, #0
1000edf8:	232a      	movs	r3, #42	; 0x2a
1000edfa:	4a35      	ldr	r2, [pc, #212]	; (1000eed0 <main+0x26c>)
1000edfc:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000edfe:	200f      	movs	r0, #15
1000ee00:	4b31      	ldr	r3, [pc, #196]	; (1000eec8 <main+0x264>)
1000ee02:	4798      	blx	r3
1000ee04:	e76a      	b.n	1000ecdc <main+0x78>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000ee06:	2845      	cmp	r0, #69	; 0x45
1000ee08:	d106      	bne.n	1000ee18 <main+0x1b4>
			DBG_LOG("GAP timeout");
1000ee0a:	4826      	ldr	r0, [pc, #152]	; (1000eea4 <main+0x240>)
1000ee0c:	4b27      	ldr	r3, [pc, #156]	; (1000eeac <main+0x248>)
1000ee0e:	4798      	blx	r3
1000ee10:	4833      	ldr	r0, [pc, #204]	; (1000eee0 <main+0x27c>)
1000ee12:	4b28      	ldr	r3, [pc, #160]	; (1000eeb4 <main+0x250>)
1000ee14:	4798      	blx	r3
1000ee16:	e761      	b.n	1000ecdc <main+0x78>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000ee18:	28d0      	cmp	r0, #208	; 0xd0
1000ee1a:	d106      	bne.n	1000ee2a <main+0x1c6>
			DBG_LOG("Event get timeout");
1000ee1c:	4821      	ldr	r0, [pc, #132]	; (1000eea4 <main+0x240>)
1000ee1e:	4b23      	ldr	r3, [pc, #140]	; (1000eeac <main+0x248>)
1000ee20:	4798      	blx	r3
1000ee22:	4830      	ldr	r0, [pc, #192]	; (1000eee4 <main+0x280>)
1000ee24:	4b23      	ldr	r3, [pc, #140]	; (1000eeb4 <main+0x250>)
1000ee26:	4798      	blx	r3
1000ee28:	e758      	b.n	1000ecdc <main+0x78>
		}
		else {
			DBG_LOG("BLE error occurred");
1000ee2a:	0028      	movs	r0, r5
1000ee2c:	4b1f      	ldr	r3, [pc, #124]	; (1000eeac <main+0x248>)
1000ee2e:	4798      	blx	r3
1000ee30:	482d      	ldr	r0, [pc, #180]	; (1000eee8 <main+0x284>)
1000ee32:	4b20      	ldr	r3, [pc, #128]	; (1000eeb4 <main+0x250>)
1000ee34:	4798      	blx	r3
1000ee36:	e751      	b.n	1000ecdc <main+0x78>
1000ee38:	1001ae80 	.word	0x1001ae80
1000ee3c:	1000e48d 	.word	0x1000e48d
1000ee40:	1000ba61 	.word	0x1000ba61
1000ee44:	1000e181 	.word	0x1000e181
1000ee48:	1000e9e1 	.word	0x1000e9e1
1000ee4c:	1000ec19 	.word	0x1000ec19
1000ee50:	1000add5 	.word	0x1000add5
1000ee54:	1000942d 	.word	0x1000942d
1000ee58:	1000a8b5 	.word	0x1000a8b5
1000ee5c:	10009839 	.word	0x10009839
1000ee60:	1000ac89 	.word	0x1000ac89
1000ee64:	100099cd 	.word	0x100099cd
1000ee68:	10009761 	.word	0x10009761
1000ee6c:	1000d801 	.word	0x1000d801
1000ee70:	100096f9 	.word	0x100096f9
1000ee74:	1000ab61 	.word	0x1000ab61
1000ee78:	10009a69 	.word	0x10009a69
1000ee7c:	1000ebcd 	.word	0x1000ebcd
1000ee80:	1000ea25 	.word	0x1000ea25
1000ee84:	100094dd 	.word	0x100094dd
1000ee88:	10009a19 	.word	0x10009a19
1000ee8c:	10017bc4 	.word	0x10017bc4
1000ee90:	1000d731 	.word	0x1000d731
1000ee94:	10017c10 	.word	0x10017c10
1000ee98:	100096b1 	.word	0x100096b1
1000ee9c:	1001ae78 	.word	0x1001ae78
1000eea0:	1000dff9 	.word	0x1000dff9
1000eea4:	10017888 	.word	0x10017888
1000eea8:	1001ae84 	.word	0x1001ae84
1000eeac:	10016949 	.word	0x10016949
1000eeb0:	10019050 	.word	0x10019050
1000eeb4:	10016829 	.word	0x10016829
1000eeb8:	10009531 	.word	0x10009531
1000eebc:	10019060 	.word	0x10019060
1000eec0:	1001907c 	.word	0x1001907c
1000eec4:	1001afbc 	.word	0x1001afbc
1000eec8:	1000b721 	.word	0x1000b721
1000eecc:	1000a6a5 	.word	0x1000a6a5
1000eed0:	1001af08 	.word	0x1001af08
1000eed4:	10009119 	.word	0x10009119
1000eed8:	1001908c 	.word	0x1001908c
1000eedc:	10019098 	.word	0x10019098
1000eee0:	100190b4 	.word	0x100190b4
1000eee4:	100190c0 	.word	0x100190c0
1000eee8:	100190d4 	.word	0x100190d4

1000eeec <internal_event_post>:
1000eeec:	b570      	push	{r4, r5, r6, lr}
1000eeee:	4d12      	ldr	r5, [pc, #72]	; (1000ef38 <internal_event_post+0x4c>)
1000eef0:	682c      	ldr	r4, [r5, #0]
1000eef2:	2c00      	cmp	r4, #0
1000eef4:	d014      	beq.n	1000ef20 <internal_event_post+0x34>
1000eef6:	6826      	ldr	r6, [r4, #0]
1000eef8:	60e2      	str	r2, [r4, #12]
1000eefa:	602e      	str	r6, [r5, #0]
1000eefc:	2500      	movs	r5, #0
1000eefe:	4a0f      	ldr	r2, [pc, #60]	; (1000ef3c <internal_event_post+0x50>)
1000ef00:	8123      	strh	r3, [r4, #8]
1000ef02:	6813      	ldr	r3, [r2, #0]
1000ef04:	6025      	str	r5, [r4, #0]
1000ef06:	80a0      	strh	r0, [r4, #4]
1000ef08:	80e1      	strh	r1, [r4, #6]
1000ef0a:	42ab      	cmp	r3, r5
1000ef0c:	d101      	bne.n	1000ef12 <internal_event_post+0x26>
1000ef0e:	6014      	str	r4, [r2, #0]
1000ef10:	e011      	b.n	1000ef36 <internal_event_post+0x4a>
1000ef12:	681a      	ldr	r2, [r3, #0]
1000ef14:	2a00      	cmp	r2, #0
1000ef16:	d001      	beq.n	1000ef1c <internal_event_post+0x30>
1000ef18:	1c13      	adds	r3, r2, #0
1000ef1a:	e7fa      	b.n	1000ef12 <internal_event_post+0x26>
1000ef1c:	601c      	str	r4, [r3, #0]
1000ef1e:	e00a      	b.n	1000ef36 <internal_event_post+0x4a>
1000ef20:	b2c4      	uxtb	r4, r0
1000ef22:	2c00      	cmp	r4, #0
1000ef24:	d107      	bne.n	1000ef36 <internal_event_post+0x4a>
1000ef26:	4c06      	ldr	r4, [pc, #24]	; (1000ef40 <internal_event_post+0x54>)
1000ef28:	60e2      	str	r2, [r4, #12]
1000ef2a:	2201      	movs	r2, #1
1000ef2c:	8123      	strh	r3, [r4, #8]
1000ef2e:	4b05      	ldr	r3, [pc, #20]	; (1000ef44 <internal_event_post+0x58>)
1000ef30:	80a0      	strh	r0, [r4, #4]
1000ef32:	80e1      	strh	r1, [r4, #6]
1000ef34:	701a      	strb	r2, [r3, #0]
1000ef36:	bd70      	pop	{r4, r5, r6, pc}
1000ef38:	1001adbc 	.word	0x1001adbc
1000ef3c:	1001adb8 	.word	0x1001adb8
1000ef40:	1001ada4 	.word	0x1001ada4
1000ef44:	1001adb4 	.word	0x1001adb4

1000ef48 <internal_event_init>:
1000ef48:	b510      	push	{r4, lr}
1000ef4a:	4b08      	ldr	r3, [pc, #32]	; (1000ef6c <internal_event_init+0x24>)
1000ef4c:	0900      	lsrs	r0, r0, #4
1000ef4e:	0100      	lsls	r0, r0, #4
1000ef50:	681a      	ldr	r2, [r3, #0]
1000ef52:	1808      	adds	r0, r1, r0
1000ef54:	4281      	cmp	r1, r0
1000ef56:	d003      	beq.n	1000ef60 <internal_event_init+0x18>
1000ef58:	600a      	str	r2, [r1, #0]
1000ef5a:	1c0a      	adds	r2, r1, #0
1000ef5c:	3110      	adds	r1, #16
1000ef5e:	e7f9      	b.n	1000ef54 <internal_event_init+0xc>
1000ef60:	601a      	str	r2, [r3, #0]
1000ef62:	2200      	movs	r2, #0
1000ef64:	4b02      	ldr	r3, [pc, #8]	; (1000ef70 <internal_event_init+0x28>)
1000ef66:	601a      	str	r2, [r3, #0]
1000ef68:	bd10      	pop	{r4, pc}
1000ef6a:	46c0      	nop			; (mov r8, r8)
1000ef6c:	1001adbc 	.word	0x1001adbc
1000ef70:	1001adb8 	.word	0x1001adb8

1000ef74 <special_events_handler>:
1000ef74:	b538      	push	{r3, r4, r5, lr}
1000ef76:	4c1b      	ldr	r4, [pc, #108]	; (1000efe4 <special_events_handler+0x70>)
1000ef78:	1c03      	adds	r3, r0, #0
1000ef7a:	8825      	ldrh	r5, [r4, #0]
1000ef7c:	1c08      	adds	r0, r1, #0
1000ef7e:	1c21      	adds	r1, r4, #0
1000ef80:	429d      	cmp	r5, r3
1000ef82:	d107      	bne.n	1000ef94 <special_events_handler+0x20>
1000ef84:	88a5      	ldrh	r5, [r4, #4]
1000ef86:	4285      	cmp	r5, r0
1000ef88:	d104      	bne.n	1000ef94 <special_events_handler+0x20>
1000ef8a:	2301      	movs	r3, #1
1000ef8c:	425b      	negs	r3, r3
1000ef8e:	8023      	strh	r3, [r4, #0]
1000ef90:	60a2      	str	r2, [r4, #8]
1000ef92:	e009      	b.n	1000efa8 <special_events_handler+0x34>
1000ef94:	884c      	ldrh	r4, [r1, #2]
1000ef96:	429c      	cmp	r4, r3
1000ef98:	d10a      	bne.n	1000efb0 <special_events_handler+0x3c>
1000ef9a:	888c      	ldrh	r4, [r1, #4]
1000ef9c:	4284      	cmp	r4, r0
1000ef9e:	d107      	bne.n	1000efb0 <special_events_handler+0x3c>
1000efa0:	2301      	movs	r3, #1
1000efa2:	425b      	negs	r3, r3
1000efa4:	804b      	strh	r3, [r1, #2]
1000efa6:	608a      	str	r2, [r1, #8]
1000efa8:	4b0f      	ldr	r3, [pc, #60]	; (1000efe8 <special_events_handler+0x74>)
1000efaa:	4798      	blx	r3
1000efac:	2001      	movs	r0, #1
1000efae:	e017      	b.n	1000efe0 <special_events_handler+0x6c>
1000efb0:	490e      	ldr	r1, [pc, #56]	; (1000efec <special_events_handler+0x78>)
1000efb2:	428b      	cmp	r3, r1
1000efb4:	d00e      	beq.n	1000efd4 <special_events_handler+0x60>
1000efb6:	490e      	ldr	r1, [pc, #56]	; (1000eff0 <special_events_handler+0x7c>)
1000efb8:	428b      	cmp	r3, r1
1000efba:	d007      	beq.n	1000efcc <special_events_handler+0x58>
1000efbc:	490d      	ldr	r1, [pc, #52]	; (1000eff4 <special_events_handler+0x80>)
1000efbe:	2000      	movs	r0, #0
1000efc0:	428b      	cmp	r3, r1
1000efc2:	d10d      	bne.n	1000efe0 <special_events_handler+0x6c>
1000efc4:	1c10      	adds	r0, r2, #0
1000efc6:	4b0c      	ldr	r3, [pc, #48]	; (1000eff8 <special_events_handler+0x84>)
1000efc8:	4798      	blx	r3
1000efca:	e7ef      	b.n	1000efac <special_events_handler+0x38>
1000efcc:	1c11      	adds	r1, r2, #0
1000efce:	4b0b      	ldr	r3, [pc, #44]	; (1000effc <special_events_handler+0x88>)
1000efd0:	2200      	movs	r2, #0
1000efd2:	e002      	b.n	1000efda <special_events_handler+0x66>
1000efd4:	1c11      	adds	r1, r2, #0
1000efd6:	2200      	movs	r2, #0
1000efd8:	4b09      	ldr	r3, [pc, #36]	; (1000f000 <special_events_handler+0x8c>)
1000efda:	4798      	blx	r3
1000efdc:	4243      	negs	r3, r0
1000efde:	4158      	adcs	r0, r3
1000efe0:	bd38      	pop	{r3, r4, r5, pc}
1000efe2:	46c0      	nop			; (mov r8, r8)
1000efe4:	1001bd1c 	.word	0x1001bd1c
1000efe8:	100109d1 	.word	0x100109d1
1000efec:	00000e13 	.word	0x00000e13
1000eff0:	00000e15 	.word	0x00000e15
1000eff4:	00000e01 	.word	0x00000e01
1000eff8:	10010d41 	.word	0x10010d41
1000effc:	10010f01 	.word	0x10010f01
1000f000:	10010fd9 	.word	0x10010fd9

1000f004 <at_ble_event_get>:
1000f004:	2300      	movs	r3, #0
1000f006:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f008:	b087      	sub	sp, #28
1000f00a:	9204      	str	r2, [sp, #16]
1000f00c:	7003      	strb	r3, [r0, #0]
1000f00e:	9b04      	ldr	r3, [sp, #16]
1000f010:	9003      	str	r0, [sp, #12]
1000f012:	3b01      	subs	r3, #1
1000f014:	1c0d      	adds	r5, r1, #0
1000f016:	9305      	str	r3, [sp, #20]
1000f018:	3303      	adds	r3, #3
1000f01a:	d802      	bhi.n	1000f022 <at_ble_event_get+0x1e>
1000f01c:	9804      	ldr	r0, [sp, #16]
1000f01e:	4bae      	ldr	r3, [pc, #696]	; (1000f2d8 <at_ble_event_get+0x2d4>)
1000f020:	4798      	blx	r3
1000f022:	9b05      	ldr	r3, [sp, #20]
1000f024:	4cad      	ldr	r4, [pc, #692]	; (1000f2dc <at_ble_event_get+0x2d8>)
1000f026:	3303      	adds	r3, #3
1000f028:	d902      	bls.n	1000f030 <at_ble_event_get+0x2c>
1000f02a:	2300      	movs	r3, #0
1000f02c:	9302      	str	r3, [sp, #8]
1000f02e:	e015      	b.n	1000f05c <at_ble_event_get+0x58>
1000f030:	2300      	movs	r3, #0
1000f032:	9302      	str	r3, [sp, #8]
1000f034:	6823      	ldr	r3, [r4, #0]
1000f036:	2b00      	cmp	r3, #0
1000f038:	d113      	bne.n	1000f062 <at_ble_event_get+0x5e>
1000f03a:	9b02      	ldr	r3, [sp, #8]
1000f03c:	2bd0      	cmp	r3, #208	; 0xd0
1000f03e:	d100      	bne.n	1000f042 <at_ble_event_get+0x3e>
1000f040:	e2da      	b.n	1000f5f8 <at_ble_event_get+0x5f4>
1000f042:	9804      	ldr	r0, [sp, #16]
1000f044:	4ba6      	ldr	r3, [pc, #664]	; (1000f2e0 <at_ble_event_get+0x2dc>)
1000f046:	4798      	blx	r3
1000f048:	9002      	str	r0, [sp, #8]
1000f04a:	2802      	cmp	r0, #2
1000f04c:	d1f2      	bne.n	1000f034 <at_ble_event_get+0x30>
1000f04e:	e03f      	b.n	1000f0d0 <at_ble_event_get+0xcc>
1000f050:	9804      	ldr	r0, [sp, #16]
1000f052:	4ba3      	ldr	r3, [pc, #652]	; (1000f2e0 <at_ble_event_get+0x2dc>)
1000f054:	4798      	blx	r3
1000f056:	9002      	str	r0, [sp, #8]
1000f058:	2802      	cmp	r0, #2
1000f05a:	d039      	beq.n	1000f0d0 <at_ble_event_get+0xcc>
1000f05c:	6823      	ldr	r3, [r4, #0]
1000f05e:	2b00      	cmp	r3, #0
1000f060:	d0f6      	beq.n	1000f050 <at_ble_event_get+0x4c>
1000f062:	9b02      	ldr	r3, [sp, #8]
1000f064:	2bd0      	cmp	r3, #208	; 0xd0
1000f066:	d100      	bne.n	1000f06a <at_ble_event_get+0x66>
1000f068:	e2c6      	b.n	1000f5f8 <at_ble_event_get+0x5f4>
1000f06a:	9b02      	ldr	r3, [sp, #8]
1000f06c:	3b03      	subs	r3, #3
1000f06e:	1e5a      	subs	r2, r3, #1
1000f070:	4193      	sbcs	r3, r2
1000f072:	9a02      	ldr	r2, [sp, #8]
1000f074:	425b      	negs	r3, r3
1000f076:	401a      	ands	r2, r3
1000f078:	6823      	ldr	r3, [r4, #0]
1000f07a:	9202      	str	r2, [sp, #8]
1000f07c:	2b00      	cmp	r3, #0
1000f07e:	d100      	bne.n	1000f082 <at_ble_event_get+0x7e>
1000f080:	e2c2      	b.n	1000f608 <at_ble_event_get+0x604>
1000f082:	681a      	ldr	r2, [r3, #0]
1000f084:	68de      	ldr	r6, [r3, #12]
1000f086:	6022      	str	r2, [r4, #0]
1000f088:	88da      	ldrh	r2, [r3, #6]
1000f08a:	9201      	str	r2, [sp, #4]
1000f08c:	4a95      	ldr	r2, [pc, #596]	; (1000f2e4 <at_ble_event_get+0x2e0>)
1000f08e:	889c      	ldrh	r4, [r3, #4]
1000f090:	6811      	ldr	r1, [r2, #0]
1000f092:	6013      	str	r3, [r2, #0]
1000f094:	6019      	str	r1, [r3, #0]
1000f096:	4b94      	ldr	r3, [pc, #592]	; (1000f2e8 <at_ble_event_get+0x2e4>)
1000f098:	781b      	ldrb	r3, [r3, #0]
1000f09a:	2b01      	cmp	r3, #1
1000f09c:	d10f      	bne.n	1000f0be <at_ble_event_get+0xba>
1000f09e:	4b93      	ldr	r3, [pc, #588]	; (1000f2ec <at_ble_event_get+0x2e8>)
1000f0a0:	4a92      	ldr	r2, [pc, #584]	; (1000f2ec <at_ble_event_get+0x2e8>)
1000f0a2:	8898      	ldrh	r0, [r3, #4]
1000f0a4:	88d9      	ldrh	r1, [r3, #6]
1000f0a6:	68d2      	ldr	r2, [r2, #12]
1000f0a8:	891b      	ldrh	r3, [r3, #8]
1000f0aa:	4f91      	ldr	r7, [pc, #580]	; (1000f2f0 <at_ble_event_get+0x2ec>)
1000f0ac:	47b8      	blx	r7
1000f0ae:	2210      	movs	r2, #16
1000f0b0:	4b90      	ldr	r3, [pc, #576]	; (1000f2f4 <at_ble_event_get+0x2f0>)
1000f0b2:	488e      	ldr	r0, [pc, #568]	; (1000f2ec <at_ble_event_get+0x2e8>)
1000f0b4:	2100      	movs	r1, #0
1000f0b6:	4798      	blx	r3
1000f0b8:	2300      	movs	r3, #0
1000f0ba:	4a8b      	ldr	r2, [pc, #556]	; (1000f2e8 <at_ble_event_get+0x2e4>)
1000f0bc:	7013      	strb	r3, [r2, #0]
1000f0be:	9b02      	ldr	r3, [sp, #8]
1000f0c0:	2b00      	cmp	r3, #0
1000f0c2:	d114      	bne.n	1000f0ee <at_ble_event_get+0xea>
1000f0c4:	4b8c      	ldr	r3, [pc, #560]	; (1000f2f8 <at_ble_event_get+0x2f4>)
1000f0c6:	429c      	cmp	r4, r3
1000f0c8:	d009      	beq.n	1000f0de <at_ble_event_get+0xda>
1000f0ca:	4b8c      	ldr	r3, [pc, #560]	; (1000f2fc <at_ble_event_get+0x2f8>)
1000f0cc:	429c      	cmp	r4, r3
1000f0ce:	d127      	bne.n	1000f120 <at_ble_event_get+0x11c>
1000f0d0:	233a      	movs	r3, #58	; 0x3a
1000f0d2:	9a03      	ldr	r2, [sp, #12]
1000f0d4:	7013      	strb	r3, [r2, #0]
1000f0d6:	2300      	movs	r3, #0
1000f0d8:	9302      	str	r3, [sp, #8]
1000f0da:	1c1d      	adds	r5, r3, #0
1000f0dc:	e007      	b.n	1000f0ee <at_ble_event_get+0xea>
1000f0de:	9b01      	ldr	r3, [sp, #4]
1000f0e0:	42a3      	cmp	r3, r4
1000f0e2:	d000      	beq.n	1000f0e6 <at_ble_event_get+0xe2>
1000f0e4:	e28a      	b.n	1000f5fc <at_ble_event_get+0x5f8>
1000f0e6:	2338      	movs	r3, #56	; 0x38
1000f0e8:	9a03      	ldr	r2, [sp, #12]
1000f0ea:	7013      	strb	r3, [r2, #0]
1000f0ec:	602e      	str	r6, [r5, #0]
1000f0ee:	9b03      	ldr	r3, [sp, #12]
1000f0f0:	781b      	ldrb	r3, [r3, #0]
1000f0f2:	2b3b      	cmp	r3, #59	; 0x3b
1000f0f4:	d101      	bne.n	1000f0fa <at_ble_event_get+0xf6>
1000f0f6:	4b82      	ldr	r3, [pc, #520]	; (1000f300 <at_ble_event_get+0x2fc>)
1000f0f8:	4798      	blx	r3
1000f0fa:	9b03      	ldr	r3, [sp, #12]
1000f0fc:	781b      	ldrb	r3, [r3, #0]
1000f0fe:	2b3b      	cmp	r3, #59	; 0x3b
1000f100:	d003      	beq.n	1000f10a <at_ble_event_get+0x106>
1000f102:	9b05      	ldr	r3, [sp, #20]
1000f104:	3303      	adds	r3, #3
1000f106:	d904      	bls.n	1000f112 <at_ble_event_get+0x10e>
1000f108:	e283      	b.n	1000f612 <at_ble_event_get+0x60e>
1000f10a:	9b02      	ldr	r3, [sp, #8]
1000f10c:	2b00      	cmp	r3, #0
1000f10e:	d088      	beq.n	1000f022 <at_ble_event_get+0x1e>
1000f110:	e7f7      	b.n	1000f102 <at_ble_event_get+0xfe>
1000f112:	9b02      	ldr	r3, [sp, #8]
1000f114:	2bd0      	cmp	r3, #208	; 0xd0
1000f116:	d100      	bne.n	1000f11a <at_ble_event_get+0x116>
1000f118:	e27b      	b.n	1000f612 <at_ble_event_get+0x60e>
1000f11a:	4b7a      	ldr	r3, [pc, #488]	; (1000f304 <at_ble_event_get+0x300>)
1000f11c:	4798      	blx	r3
1000f11e:	e278      	b.n	1000f612 <at_ble_event_get+0x60e>
1000f120:	9b01      	ldr	r3, [sp, #4]
1000f122:	2bbb      	cmp	r3, #187	; 0xbb
1000f124:	d125      	bne.n	1000f172 <at_ble_event_get+0x16e>
1000f126:	2cbb      	cmp	r4, #187	; 0xbb
1000f128:	d123      	bne.n	1000f172 <at_ble_event_get+0x16e>
1000f12a:	466b      	mov	r3, sp
1000f12c:	891b      	ldrh	r3, [r3, #8]
1000f12e:	80ab      	strh	r3, [r5, #4]
1000f130:	78b3      	ldrb	r3, [r6, #2]
1000f132:	7872      	ldrb	r2, [r6, #1]
1000f134:	78f0      	ldrb	r0, [r6, #3]
1000f136:	021b      	lsls	r3, r3, #8
1000f138:	4313      	orrs	r3, r2
1000f13a:	7971      	ldrb	r1, [r6, #5]
1000f13c:	7932      	ldrb	r2, [r6, #4]
1000f13e:	70a8      	strb	r0, [r5, #2]
1000f140:	4871      	ldr	r0, [pc, #452]	; (1000f308 <at_ble_event_get+0x304>)
1000f142:	802b      	strh	r3, [r5, #0]
1000f144:	4283      	cmp	r3, r0
1000f146:	d806      	bhi.n	1000f156 <at_ble_event_get+0x152>
1000f148:	4a70      	ldr	r2, [pc, #448]	; (1000f30c <at_ble_event_get+0x308>)
1000f14a:	4293      	cmp	r3, r2
1000f14c:	d20b      	bcs.n	1000f166 <at_ble_event_get+0x162>
1000f14e:	4a70      	ldr	r2, [pc, #448]	; (1000f310 <at_ble_event_get+0x30c>)
1000f150:	4293      	cmp	r3, r2
1000f152:	d008      	beq.n	1000f166 <at_ble_event_get+0x162>
1000f154:	e009      	b.n	1000f16a <at_ble_event_get+0x166>
1000f156:	486f      	ldr	r0, [pc, #444]	; (1000f314 <at_ble_event_get+0x310>)
1000f158:	4283      	cmp	r3, r0
1000f15a:	d106      	bne.n	1000f16a <at_ble_event_get+0x166>
1000f15c:	020b      	lsls	r3, r1, #8
1000f15e:	4313      	orrs	r3, r2
1000f160:	80ab      	strh	r3, [r5, #4]
1000f162:	2337      	movs	r3, #55	; 0x37
1000f164:	e002      	b.n	1000f16c <at_ble_event_get+0x168>
1000f166:	2336      	movs	r3, #54	; 0x36
1000f168:	e000      	b.n	1000f16c <at_ble_event_get+0x168>
1000f16a:	2300      	movs	r3, #0
1000f16c:	9a03      	ldr	r2, [sp, #12]
1000f16e:	7013      	strb	r3, [r2, #0]
1000f170:	e7bd      	b.n	1000f0ee <at_ble_event_get+0xea>
1000f172:	4b69      	ldr	r3, [pc, #420]	; (1000f318 <at_ble_event_get+0x314>)
1000f174:	429c      	cmp	r4, r3
1000f176:	d100      	bne.n	1000f17a <at_ble_event_get+0x176>
1000f178:	e144      	b.n	1000f404 <at_ble_event_get+0x400>
1000f17a:	d865      	bhi.n	1000f248 <at_ble_event_get+0x244>
1000f17c:	4b67      	ldr	r3, [pc, #412]	; (1000f31c <at_ble_event_get+0x318>)
1000f17e:	429c      	cmp	r4, r3
1000f180:	d100      	bne.n	1000f184 <at_ble_event_get+0x180>
1000f182:	e1d5      	b.n	1000f530 <at_ble_event_get+0x52c>
1000f184:	d82f      	bhi.n	1000f1e6 <at_ble_event_get+0x1e2>
1000f186:	4b66      	ldr	r3, [pc, #408]	; (1000f320 <at_ble_event_get+0x31c>)
1000f188:	429c      	cmp	r4, r3
1000f18a:	d100      	bne.n	1000f18e <at_ble_event_get+0x18a>
1000f18c:	e1e0      	b.n	1000f550 <at_ble_event_get+0x54c>
1000f18e:	d813      	bhi.n	1000f1b8 <at_ble_event_get+0x1b4>
1000f190:	4b64      	ldr	r3, [pc, #400]	; (1000f324 <at_ble_event_get+0x320>)
1000f192:	429c      	cmp	r4, r3
1000f194:	d100      	bne.n	1000f198 <at_ble_event_get+0x194>
1000f196:	e1a3      	b.n	1000f4e0 <at_ble_event_get+0x4dc>
1000f198:	d804      	bhi.n	1000f1a4 <at_ble_event_get+0x1a0>
1000f19a:	2638      	movs	r6, #56	; 0x38
1000f19c:	42b4      	cmp	r4, r6
1000f19e:	d100      	bne.n	1000f1a2 <at_ble_event_get+0x19e>
1000f1a0:	e225      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f1a2:	e117      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f1a4:	4b60      	ldr	r3, [pc, #384]	; (1000f328 <at_ble_event_get+0x324>)
1000f1a6:	429c      	cmp	r4, r3
1000f1a8:	d100      	bne.n	1000f1ac <at_ble_event_get+0x1a8>
1000f1aa:	e19f      	b.n	1000f4ec <at_ble_event_get+0x4e8>
1000f1ac:	33fe      	adds	r3, #254	; 0xfe
1000f1ae:	33ff      	adds	r3, #255	; 0xff
1000f1b0:	429c      	cmp	r4, r3
1000f1b2:	d100      	bne.n	1000f1b6 <at_ble_event_get+0x1b2>
1000f1b4:	e1d3      	b.n	1000f55e <at_ble_event_get+0x55a>
1000f1b6:	e10d      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f1b8:	4b5c      	ldr	r3, [pc, #368]	; (1000f32c <at_ble_event_get+0x328>)
1000f1ba:	429c      	cmp	r4, r3
1000f1bc:	d100      	bne.n	1000f1c0 <at_ble_event_get+0x1bc>
1000f1be:	e1a9      	b.n	1000f514 <at_ble_event_get+0x510>
1000f1c0:	d808      	bhi.n	1000f1d4 <at_ble_event_get+0x1d0>
1000f1c2:	4b5b      	ldr	r3, [pc, #364]	; (1000f330 <at_ble_event_get+0x32c>)
1000f1c4:	429c      	cmp	r4, r3
1000f1c6:	d100      	bne.n	1000f1ca <at_ble_event_get+0x1c6>
1000f1c8:	e196      	b.n	1000f4f8 <at_ble_event_get+0x4f4>
1000f1ca:	4b5a      	ldr	r3, [pc, #360]	; (1000f334 <at_ble_event_get+0x330>)
1000f1cc:	429c      	cmp	r4, r3
1000f1ce:	d100      	bne.n	1000f1d2 <at_ble_event_get+0x1ce>
1000f1d0:	e199      	b.n	1000f506 <at_ble_event_get+0x502>
1000f1d2:	e0ff      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f1d4:	4b58      	ldr	r3, [pc, #352]	; (1000f338 <at_ble_event_get+0x334>)
1000f1d6:	429c      	cmp	r4, r3
1000f1d8:	d100      	bne.n	1000f1dc <at_ble_event_get+0x1d8>
1000f1da:	e1a2      	b.n	1000f522 <at_ble_event_get+0x51e>
1000f1dc:	4b57      	ldr	r3, [pc, #348]	; (1000f33c <at_ble_event_get+0x338>)
1000f1de:	429c      	cmp	r4, r3
1000f1e0:	d100      	bne.n	1000f1e4 <at_ble_event_get+0x1e0>
1000f1e2:	e1d4      	b.n	1000f58e <at_ble_event_get+0x58a>
1000f1e4:	e0f6      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f1e6:	4b56      	ldr	r3, [pc, #344]	; (1000f340 <at_ble_event_get+0x33c>)
1000f1e8:	429c      	cmp	r4, r3
1000f1ea:	d100      	bne.n	1000f1ee <at_ble_event_get+0x1ea>
1000f1ec:	e1c8      	b.n	1000f580 <at_ble_event_get+0x57c>
1000f1ee:	d812      	bhi.n	1000f216 <at_ble_event_get+0x212>
1000f1f0:	4b54      	ldr	r3, [pc, #336]	; (1000f344 <at_ble_event_get+0x340>)
1000f1f2:	429c      	cmp	r4, r3
1000f1f4:	d100      	bne.n	1000f1f8 <at_ble_event_get+0x1f4>
1000f1f6:	e1d1      	b.n	1000f59c <at_ble_event_get+0x598>
1000f1f8:	d804      	bhi.n	1000f204 <at_ble_event_get+0x200>
1000f1fa:	4b53      	ldr	r3, [pc, #332]	; (1000f348 <at_ble_event_get+0x344>)
1000f1fc:	429c      	cmp	r4, r3
1000f1fe:	d100      	bne.n	1000f202 <at_ble_event_get+0x1fe>
1000f200:	e19b      	b.n	1000f53a <at_ble_event_get+0x536>
1000f202:	e0e7      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f204:	4b51      	ldr	r3, [pc, #324]	; (1000f34c <at_ble_event_get+0x348>)
1000f206:	429c      	cmp	r4, r3
1000f208:	d100      	bne.n	1000f20c <at_ble_event_get+0x208>
1000f20a:	e1ad      	b.n	1000f568 <at_ble_event_get+0x564>
1000f20c:	4b50      	ldr	r3, [pc, #320]	; (1000f350 <at_ble_event_get+0x34c>)
1000f20e:	429c      	cmp	r4, r3
1000f210:	d100      	bne.n	1000f214 <at_ble_event_get+0x210>
1000f212:	e1b0      	b.n	1000f576 <at_ble_event_get+0x572>
1000f214:	e0de      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f216:	4b4f      	ldr	r3, [pc, #316]	; (1000f354 <at_ble_event_get+0x350>)
1000f218:	429c      	cmp	r4, r3
1000f21a:	d100      	bne.n	1000f21e <at_ble_event_get+0x21a>
1000f21c:	e0e0      	b.n	1000f3e0 <at_ble_event_get+0x3dc>
1000f21e:	d809      	bhi.n	1000f234 <at_ble_event_get+0x230>
1000f220:	3b08      	subs	r3, #8
1000f222:	429c      	cmp	r4, r3
1000f224:	d100      	bne.n	1000f228 <at_ble_event_get+0x224>
1000f226:	e0d7      	b.n	1000f3d8 <at_ble_event_get+0x3d4>
1000f228:	4b4b      	ldr	r3, [pc, #300]	; (1000f358 <at_ble_event_get+0x354>)
1000f22a:	2639      	movs	r6, #57	; 0x39
1000f22c:	429c      	cmp	r4, r3
1000f22e:	d100      	bne.n	1000f232 <at_ble_event_get+0x22e>
1000f230:	e1dd      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f232:	e0cf      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f234:	23d1      	movs	r3, #209	; 0xd1
1000f236:	011b      	lsls	r3, r3, #4
1000f238:	429c      	cmp	r4, r3
1000f23a:	d100      	bne.n	1000f23e <at_ble_event_get+0x23a>
1000f23c:	e0d6      	b.n	1000f3ec <at_ble_event_get+0x3e8>
1000f23e:	4b47      	ldr	r3, [pc, #284]	; (1000f35c <at_ble_event_get+0x358>)
1000f240:	429c      	cmp	r4, r3
1000f242:	d100      	bne.n	1000f246 <at_ble_event_get+0x242>
1000f244:	e0d8      	b.n	1000f3f8 <at_ble_event_get+0x3f4>
1000f246:	e0c5      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f248:	4b45      	ldr	r3, [pc, #276]	; (1000f360 <at_ble_event_get+0x35c>)
1000f24a:	429c      	cmp	r4, r3
1000f24c:	d100      	bne.n	1000f250 <at_ble_event_get+0x24c>
1000f24e:	e117      	b.n	1000f480 <at_ble_event_get+0x47c>
1000f250:	d82e      	bhi.n	1000f2b0 <at_ble_event_get+0x2ac>
1000f252:	4b44      	ldr	r3, [pc, #272]	; (1000f364 <at_ble_event_get+0x360>)
1000f254:	429c      	cmp	r4, r3
1000f256:	d100      	bne.n	1000f25a <at_ble_event_get+0x256>
1000f258:	e13d      	b.n	1000f4d6 <at_ble_event_get+0x4d2>
1000f25a:	d812      	bhi.n	1000f282 <at_ble_event_get+0x27e>
1000f25c:	4b42      	ldr	r3, [pc, #264]	; (1000f368 <at_ble_event_get+0x364>)
1000f25e:	429c      	cmp	r4, r3
1000f260:	d100      	bne.n	1000f264 <at_ble_event_get+0x260>
1000f262:	e0e8      	b.n	1000f436 <at_ble_event_get+0x432>
1000f264:	d804      	bhi.n	1000f270 <at_ble_event_get+0x26c>
1000f266:	3b03      	subs	r3, #3
1000f268:	429c      	cmp	r4, r3
1000f26a:	d100      	bne.n	1000f26e <at_ble_event_get+0x26a>
1000f26c:	e0d0      	b.n	1000f410 <at_ble_event_get+0x40c>
1000f26e:	e0b1      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f270:	4b3e      	ldr	r3, [pc, #248]	; (1000f36c <at_ble_event_get+0x368>)
1000f272:	429c      	cmp	r4, r3
1000f274:	d100      	bne.n	1000f278 <at_ble_event_get+0x274>
1000f276:	e0d0      	b.n	1000f41a <at_ble_event_get+0x416>
1000f278:	4b3d      	ldr	r3, [pc, #244]	; (1000f370 <at_ble_event_get+0x36c>)
1000f27a:	429c      	cmp	r4, r3
1000f27c:	d100      	bne.n	1000f280 <at_ble_event_get+0x27c>
1000f27e:	e0f9      	b.n	1000f474 <at_ble_event_get+0x470>
1000f280:	e0a8      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f282:	4b3c      	ldr	r3, [pc, #240]	; (1000f374 <at_ble_event_get+0x370>)
1000f284:	429c      	cmp	r4, r3
1000f286:	d100      	bne.n	1000f28a <at_ble_event_get+0x286>
1000f288:	e0db      	b.n	1000f442 <at_ble_event_get+0x43e>
1000f28a:	d808      	bhi.n	1000f29e <at_ble_event_get+0x29a>
1000f28c:	4b3a      	ldr	r3, [pc, #232]	; (1000f378 <at_ble_event_get+0x374>)
1000f28e:	429c      	cmp	r4, r3
1000f290:	d100      	bne.n	1000f294 <at_ble_event_get+0x290>
1000f292:	e11b      	b.n	1000f4cc <at_ble_event_get+0x4c8>
1000f294:	4b39      	ldr	r3, [pc, #228]	; (1000f37c <at_ble_event_get+0x378>)
1000f296:	429c      	cmp	r4, r3
1000f298:	d100      	bne.n	1000f29c <at_ble_event_get+0x298>
1000f29a:	e0d8      	b.n	1000f44e <at_ble_event_get+0x44a>
1000f29c:	e09a      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f29e:	4b38      	ldr	r3, [pc, #224]	; (1000f380 <at_ble_event_get+0x37c>)
1000f2a0:	429c      	cmp	r4, r3
1000f2a2:	d100      	bne.n	1000f2a6 <at_ble_event_get+0x2a2>
1000f2a4:	e0d8      	b.n	1000f458 <at_ble_event_get+0x454>
1000f2a6:	4b37      	ldr	r3, [pc, #220]	; (1000f384 <at_ble_event_get+0x380>)
1000f2a8:	429c      	cmp	r4, r3
1000f2aa:	d100      	bne.n	1000f2ae <at_ble_event_get+0x2aa>
1000f2ac:	e0db      	b.n	1000f466 <at_ble_event_get+0x462>
1000f2ae:	e091      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f2b0:	4b35      	ldr	r3, [pc, #212]	; (1000f388 <at_ble_event_get+0x384>)
1000f2b2:	429c      	cmp	r4, r3
1000f2b4:	d100      	bne.n	1000f2b8 <at_ble_event_get+0x2b4>
1000f2b6:	e0f7      	b.n	1000f4a8 <at_ble_event_get+0x4a4>
1000f2b8:	d876      	bhi.n	1000f3a8 <at_ble_event_get+0x3a4>
1000f2ba:	4b34      	ldr	r3, [pc, #208]	; (1000f38c <at_ble_event_get+0x388>)
1000f2bc:	429c      	cmp	r4, r3
1000f2be:	d100      	bne.n	1000f2c2 <at_ble_event_get+0x2be>
1000f2c0:	e0f8      	b.n	1000f4b4 <at_ble_event_get+0x4b0>
1000f2c2:	d869      	bhi.n	1000f398 <at_ble_event_get+0x394>
1000f2c4:	4b32      	ldr	r3, [pc, #200]	; (1000f390 <at_ble_event_get+0x38c>)
1000f2c6:	429c      	cmp	r4, r3
1000f2c8:	d100      	bne.n	1000f2cc <at_ble_event_get+0x2c8>
1000f2ca:	e0e0      	b.n	1000f48e <at_ble_event_get+0x48a>
1000f2cc:	4b31      	ldr	r3, [pc, #196]	; (1000f394 <at_ble_event_get+0x390>)
1000f2ce:	429c      	cmp	r4, r3
1000f2d0:	d100      	bne.n	1000f2d4 <at_ble_event_get+0x2d0>
1000f2d2:	e0a9      	b.n	1000f428 <at_ble_event_get+0x424>
1000f2d4:	e07e      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f2d6:	46c0      	nop			; (mov r8, r8)
1000f2d8:	10010a09 	.word	0x10010a09
1000f2dc:	1001adb8 	.word	0x1001adb8
1000f2e0:	1000e77d 	.word	0x1000e77d
1000f2e4:	1001adbc 	.word	0x1001adbc
1000f2e8:	1001adb4 	.word	0x1001adb4
1000f2ec:	1001ada4 	.word	0x1001ada4
1000f2f0:	1000eeed 	.word	0x1000eeed
1000f2f4:	100166e1 	.word	0x100166e1
1000f2f8:	0000ffff 	.word	0x0000ffff
1000f2fc:	0000fffe 	.word	0x0000fffe
1000f300:	1000e9f5 	.word	0x1000e9f5
1000f304:	10010a0b 	.word	0x10010a0b
1000f308:	0000201e 	.word	0x0000201e
1000f30c:	0000201d 	.word	0x0000201d
1000f310:	00000c03 	.word	0x00000c03
1000f314:	0000201f 	.word	0x0000201f
1000f318:	00000d1c 	.word	0x00000d1c
1000f31c:	00000c0c 	.word	0x00000c0c
1000f320:	00000c02 	.word	0x00000c02
1000f324:	00000a02 	.word	0x00000a02
1000f328:	00000a03 	.word	0x00000a03
1000f32c:	00000c06 	.word	0x00000c06
1000f330:	00000c04 	.word	0x00000c04
1000f334:	00000c05 	.word	0x00000c05
1000f338:	00000c07 	.word	0x00000c07
1000f33c:	00000c09 	.word	0x00000c09
1000f340:	00000c17 	.word	0x00000c17
1000f344:	00000c12 	.word	0x00000c12
1000f348:	00000c0d 	.word	0x00000c0d
1000f34c:	00000c13 	.word	0x00000c13
1000f350:	00000c15 	.word	0x00000c15
1000f354:	00000d08 	.word	0x00000d08
1000f358:	00000d01 	.word	0x00000d01
1000f35c:	00000d15 	.word	0x00000d15
1000f360:	00000e1b 	.word	0x00000e1b
1000f364:	00000e0f 	.word	0x00000e0f
1000f368:	00000e03 	.word	0x00000e03
1000f36c:	00000e06 	.word	0x00000e06
1000f370:	00000e0a 	.word	0x00000e0a
1000f374:	00000e15 	.word	0x00000e15
1000f378:	00000e11 	.word	0x00000e11
1000f37c:	00000e13 	.word	0x00000e13
1000f380:	00000e17 	.word	0x00000e17
1000f384:	00000e19 	.word	0x00000e19
1000f388:	00000e27 	.word	0x00000e27
1000f38c:	00000e21 	.word	0x00000e21
1000f390:	00000e1c 	.word	0x00000e1c
1000f394:	00000e1d 	.word	0x00000e1d
1000f398:	4b9f      	ldr	r3, [pc, #636]	; (1000f618 <at_ble_event_get+0x614>)
1000f39a:	429c      	cmp	r4, r3
1000f39c:	d07e      	beq.n	1000f49c <at_ble_event_get+0x498>
1000f39e:	4b9f      	ldr	r3, [pc, #636]	; (1000f61c <at_ble_event_get+0x618>)
1000f3a0:	429c      	cmp	r4, r3
1000f3a2:	d100      	bne.n	1000f3a6 <at_ble_event_get+0x3a2>
1000f3a4:	e08c      	b.n	1000f4c0 <at_ble_event_get+0x4bc>
1000f3a6:	e015      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f3a8:	4b9d      	ldr	r3, [pc, #628]	; (1000f620 <at_ble_event_get+0x61c>)
1000f3aa:	429c      	cmp	r4, r3
1000f3ac:	d100      	bne.n	1000f3b0 <at_ble_event_get+0x3ac>
1000f3ae:	e10a      	b.n	1000f5c6 <at_ble_event_get+0x5c2>
1000f3b0:	d808      	bhi.n	1000f3c4 <at_ble_event_get+0x3c0>
1000f3b2:	4b9c      	ldr	r3, [pc, #624]	; (1000f624 <at_ble_event_get+0x620>)
1000f3b4:	429c      	cmp	r4, r3
1000f3b6:	d100      	bne.n	1000f3ba <at_ble_event_get+0x3b6>
1000f3b8:	e0f7      	b.n	1000f5aa <at_ble_event_get+0x5a6>
1000f3ba:	4b9b      	ldr	r3, [pc, #620]	; (1000f628 <at_ble_event_get+0x624>)
1000f3bc:	429c      	cmp	r4, r3
1000f3be:	d100      	bne.n	1000f3c2 <at_ble_event_get+0x3be>
1000f3c0:	e0fa      	b.n	1000f5b8 <at_ble_event_get+0x5b4>
1000f3c2:	e007      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f3c4:	4b99      	ldr	r3, [pc, #612]	; (1000f62c <at_ble_event_get+0x628>)
1000f3c6:	429c      	cmp	r4, r3
1000f3c8:	d100      	bne.n	1000f3cc <at_ble_event_get+0x3c8>
1000f3ca:	e103      	b.n	1000f5d4 <at_ble_event_get+0x5d0>
1000f3cc:	4b98      	ldr	r3, [pc, #608]	; (1000f630 <at_ble_event_get+0x62c>)
1000f3ce:	429c      	cmp	r4, r3
1000f3d0:	d100      	bne.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f3d2:	e106      	b.n	1000f5e2 <at_ble_event_get+0x5de>
1000f3d4:	2600      	movs	r6, #0
1000f3d6:	e10a      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f3d8:	1c30      	adds	r0, r6, #0
1000f3da:	1c29      	adds	r1, r5, #0
1000f3dc:	4b95      	ldr	r3, [pc, #596]	; (1000f634 <at_ble_event_get+0x630>)
1000f3de:	e014      	b.n	1000f40a <at_ble_event_get+0x406>
1000f3e0:	1c30      	adds	r0, r6, #0
1000f3e2:	1c29      	adds	r1, r5, #0
1000f3e4:	4b94      	ldr	r3, [pc, #592]	; (1000f638 <at_ble_event_get+0x634>)
1000f3e6:	4798      	blx	r3
1000f3e8:	2604      	movs	r6, #4
1000f3ea:	e100      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f3ec:	1c30      	adds	r0, r6, #0
1000f3ee:	1c29      	adds	r1, r5, #0
1000f3f0:	4b92      	ldr	r3, [pc, #584]	; (1000f63c <at_ble_event_get+0x638>)
1000f3f2:	4798      	blx	r3
1000f3f4:	2601      	movs	r6, #1
1000f3f6:	e0fa      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f3f8:	1c30      	adds	r0, r6, #0
1000f3fa:	1c29      	adds	r1, r5, #0
1000f3fc:	4b90      	ldr	r3, [pc, #576]	; (1000f640 <at_ble_event_get+0x63c>)
1000f3fe:	4798      	blx	r3
1000f400:	260f      	movs	r6, #15
1000f402:	e0f4      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f404:	1c30      	adds	r0, r6, #0
1000f406:	1c29      	adds	r1, r5, #0
1000f408:	4b8e      	ldr	r3, [pc, #568]	; (1000f644 <at_ble_event_get+0x640>)
1000f40a:	4798      	blx	r3
1000f40c:	1c06      	adds	r6, r0, #0
1000f40e:	e0ee      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f410:	9801      	ldr	r0, [sp, #4]
1000f412:	1c31      	adds	r1, r6, #0
1000f414:	1c2a      	adds	r2, r5, #0
1000f416:	4b8c      	ldr	r3, [pc, #560]	; (1000f648 <at_ble_event_get+0x644>)
1000f418:	e017      	b.n	1000f44a <at_ble_event_get+0x446>
1000f41a:	1c31      	adds	r1, r6, #0
1000f41c:	9801      	ldr	r0, [sp, #4]
1000f41e:	1c2a      	adds	r2, r5, #0
1000f420:	4b8a      	ldr	r3, [pc, #552]	; (1000f64c <at_ble_event_get+0x648>)
1000f422:	4798      	blx	r3
1000f424:	2611      	movs	r6, #17
1000f426:	e0e2      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f428:	1c31      	adds	r1, r6, #0
1000f42a:	9801      	ldr	r0, [sp, #4]
1000f42c:	1c2a      	adds	r2, r5, #0
1000f42e:	4b88      	ldr	r3, [pc, #544]	; (1000f650 <at_ble_event_get+0x64c>)
1000f430:	4798      	blx	r3
1000f432:	2612      	movs	r6, #18
1000f434:	e0db      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f436:	1c30      	adds	r0, r6, #0
1000f438:	1c29      	adds	r1, r5, #0
1000f43a:	4b86      	ldr	r3, [pc, #536]	; (1000f654 <at_ble_event_get+0x650>)
1000f43c:	4798      	blx	r3
1000f43e:	2606      	movs	r6, #6
1000f440:	e0d5      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f442:	1c31      	adds	r1, r6, #0
1000f444:	1c2a      	adds	r2, r5, #0
1000f446:	9801      	ldr	r0, [sp, #4]
1000f448:	4b83      	ldr	r3, [pc, #524]	; (1000f658 <at_ble_event_get+0x654>)
1000f44a:	4798      	blx	r3
1000f44c:	e7de      	b.n	1000f40c <at_ble_event_get+0x408>
1000f44e:	9801      	ldr	r0, [sp, #4]
1000f450:	1c31      	adds	r1, r6, #0
1000f452:	1c2a      	adds	r2, r5, #0
1000f454:	4b81      	ldr	r3, [pc, #516]	; (1000f65c <at_ble_event_get+0x658>)
1000f456:	e7f8      	b.n	1000f44a <at_ble_event_get+0x446>
1000f458:	1c31      	adds	r1, r6, #0
1000f45a:	9801      	ldr	r0, [sp, #4]
1000f45c:	1c2a      	adds	r2, r5, #0
1000f45e:	4b80      	ldr	r3, [pc, #512]	; (1000f660 <at_ble_event_get+0x65c>)
1000f460:	4798      	blx	r3
1000f462:	260d      	movs	r6, #13
1000f464:	e0c3      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f466:	1c31      	adds	r1, r6, #0
1000f468:	9801      	ldr	r0, [sp, #4]
1000f46a:	1c2a      	adds	r2, r5, #0
1000f46c:	4b7d      	ldr	r3, [pc, #500]	; (1000f664 <at_ble_event_get+0x660>)
1000f46e:	4798      	blx	r3
1000f470:	260e      	movs	r6, #14
1000f472:	e0bc      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f474:	9801      	ldr	r0, [sp, #4]
1000f476:	1c31      	adds	r1, r6, #0
1000f478:	1c2a      	adds	r2, r5, #0
1000f47a:	4b7b      	ldr	r3, [pc, #492]	; (1000f668 <at_ble_event_get+0x664>)
1000f47c:	4798      	blx	r3
1000f47e:	e084      	b.n	1000f58a <at_ble_event_get+0x586>
1000f480:	1c31      	adds	r1, r6, #0
1000f482:	9801      	ldr	r0, [sp, #4]
1000f484:	1c2a      	adds	r2, r5, #0
1000f486:	4b79      	ldr	r3, [pc, #484]	; (1000f66c <at_ble_event_get+0x668>)
1000f488:	4798      	blx	r3
1000f48a:	260b      	movs	r6, #11
1000f48c:	e0af      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f48e:	1c31      	adds	r1, r6, #0
1000f490:	9801      	ldr	r0, [sp, #4]
1000f492:	1c2a      	adds	r2, r5, #0
1000f494:	4b76      	ldr	r3, [pc, #472]	; (1000f670 <at_ble_event_get+0x66c>)
1000f496:	4798      	blx	r3
1000f498:	2610      	movs	r6, #16
1000f49a:	e0a8      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f49c:	1c30      	adds	r0, r6, #0
1000f49e:	1c29      	adds	r1, r5, #0
1000f4a0:	4b74      	ldr	r3, [pc, #464]	; (1000f674 <at_ble_event_get+0x670>)
1000f4a2:	4798      	blx	r3
1000f4a4:	2628      	movs	r6, #40	; 0x28
1000f4a6:	e0a2      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4a8:	1c30      	adds	r0, r6, #0
1000f4aa:	1c29      	adds	r1, r5, #0
1000f4ac:	4b72      	ldr	r3, [pc, #456]	; (1000f678 <at_ble_event_get+0x674>)
1000f4ae:	4798      	blx	r3
1000f4b0:	2629      	movs	r6, #41	; 0x29
1000f4b2:	e09c      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4b4:	1c30      	adds	r0, r6, #0
1000f4b6:	1c29      	adds	r1, r5, #0
1000f4b8:	4b70      	ldr	r3, [pc, #448]	; (1000f67c <at_ble_event_get+0x678>)
1000f4ba:	4798      	blx	r3
1000f4bc:	2627      	movs	r6, #39	; 0x27
1000f4be:	e096      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4c0:	1c30      	adds	r0, r6, #0
1000f4c2:	1c29      	adds	r1, r5, #0
1000f4c4:	4b6e      	ldr	r3, [pc, #440]	; (1000f680 <at_ble_event_get+0x67c>)
1000f4c6:	4798      	blx	r3
1000f4c8:	262a      	movs	r6, #42	; 0x2a
1000f4ca:	e090      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4cc:	9801      	ldr	r0, [sp, #4]
1000f4ce:	1c31      	adds	r1, r6, #0
1000f4d0:	1c2a      	adds	r2, r5, #0
1000f4d2:	4b6c      	ldr	r3, [pc, #432]	; (1000f684 <at_ble_event_get+0x680>)
1000f4d4:	e7b9      	b.n	1000f44a <at_ble_event_get+0x446>
1000f4d6:	9801      	ldr	r0, [sp, #4]
1000f4d8:	1c31      	adds	r1, r6, #0
1000f4da:	1c2a      	adds	r2, r5, #0
1000f4dc:	4b6a      	ldr	r3, [pc, #424]	; (1000f688 <at_ble_event_get+0x684>)
1000f4de:	e7b4      	b.n	1000f44a <at_ble_event_get+0x446>
1000f4e0:	1c30      	adds	r0, r6, #0
1000f4e2:	1c29      	adds	r1, r5, #0
1000f4e4:	4b69      	ldr	r3, [pc, #420]	; (1000f68c <at_ble_event_get+0x688>)
1000f4e6:	4798      	blx	r3
1000f4e8:	262b      	movs	r6, #43	; 0x2b
1000f4ea:	e080      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4ec:	1c30      	adds	r0, r6, #0
1000f4ee:	1c29      	adds	r1, r5, #0
1000f4f0:	4b67      	ldr	r3, [pc, #412]	; (1000f690 <at_ble_event_get+0x68c>)
1000f4f2:	4798      	blx	r3
1000f4f4:	262c      	movs	r6, #44	; 0x2c
1000f4f6:	e07a      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f4f8:	1c31      	adds	r1, r6, #0
1000f4fa:	9801      	ldr	r0, [sp, #4]
1000f4fc:	1c2a      	adds	r2, r5, #0
1000f4fe:	4b65      	ldr	r3, [pc, #404]	; (1000f694 <at_ble_event_get+0x690>)
1000f500:	4798      	blx	r3
1000f502:	2613      	movs	r6, #19
1000f504:	e073      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f506:	1c31      	adds	r1, r6, #0
1000f508:	9801      	ldr	r0, [sp, #4]
1000f50a:	1c2a      	adds	r2, r5, #0
1000f50c:	4b62      	ldr	r3, [pc, #392]	; (1000f698 <at_ble_event_get+0x694>)
1000f50e:	4798      	blx	r3
1000f510:	2614      	movs	r6, #20
1000f512:	e06c      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f514:	1c31      	adds	r1, r6, #0
1000f516:	9801      	ldr	r0, [sp, #4]
1000f518:	1c2a      	adds	r2, r5, #0
1000f51a:	4b60      	ldr	r3, [pc, #384]	; (1000f69c <at_ble_event_get+0x698>)
1000f51c:	4798      	blx	r3
1000f51e:	2615      	movs	r6, #21
1000f520:	e065      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f522:	1c31      	adds	r1, r6, #0
1000f524:	9801      	ldr	r0, [sp, #4]
1000f526:	1c2a      	adds	r2, r5, #0
1000f528:	4b5d      	ldr	r3, [pc, #372]	; (1000f6a0 <at_ble_event_get+0x69c>)
1000f52a:	4798      	blx	r3
1000f52c:	2616      	movs	r6, #22
1000f52e:	e05e      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f530:	9801      	ldr	r0, [sp, #4]
1000f532:	1c31      	adds	r1, r6, #0
1000f534:	1c2a      	adds	r2, r5, #0
1000f536:	4b5b      	ldr	r3, [pc, #364]	; (1000f6a4 <at_ble_event_get+0x6a0>)
1000f538:	e787      	b.n	1000f44a <at_ble_event_get+0x446>
1000f53a:	1c31      	adds	r1, r6, #0
1000f53c:	9801      	ldr	r0, [sp, #4]
1000f53e:	1c2a      	adds	r2, r5, #0
1000f540:	4b58      	ldr	r3, [pc, #352]	; (1000f6a4 <at_ble_event_get+0x6a0>)
1000f542:	4798      	blx	r3
1000f544:	88a9      	ldrh	r1, [r5, #4]
1000f546:	1c06      	adds	r6, r0, #0
1000f548:	4b57      	ldr	r3, [pc, #348]	; (1000f6a8 <at_ble_event_get+0x6a4>)
1000f54a:	8828      	ldrh	r0, [r5, #0]
1000f54c:	4798      	blx	r3
1000f54e:	e04e      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f550:	1c31      	adds	r1, r6, #0
1000f552:	9801      	ldr	r0, [sp, #4]
1000f554:	1c2a      	adds	r2, r5, #0
1000f556:	4b55      	ldr	r3, [pc, #340]	; (1000f6ac <at_ble_event_get+0x6a8>)
1000f558:	4798      	blx	r3
1000f55a:	2623      	movs	r6, #35	; 0x23
1000f55c:	e047      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f55e:	9801      	ldr	r0, [sp, #4]
1000f560:	1c31      	adds	r1, r6, #0
1000f562:	1c2a      	adds	r2, r5, #0
1000f564:	4b52      	ldr	r3, [pc, #328]	; (1000f6b0 <at_ble_event_get+0x6ac>)
1000f566:	e770      	b.n	1000f44a <at_ble_event_get+0x446>
1000f568:	9b01      	ldr	r3, [sp, #4]
1000f56a:	1c30      	adds	r0, r6, #0
1000f56c:	0a1f      	lsrs	r7, r3, #8
1000f56e:	802f      	strh	r7, [r5, #0]
1000f570:	1c29      	adds	r1, r5, #0
1000f572:	4b50      	ldr	r3, [pc, #320]	; (1000f6b4 <at_ble_event_get+0x6b0>)
1000f574:	e749      	b.n	1000f40a <at_ble_event_get+0x406>
1000f576:	9801      	ldr	r0, [sp, #4]
1000f578:	1c31      	adds	r1, r6, #0
1000f57a:	1c2a      	adds	r2, r5, #0
1000f57c:	4b4e      	ldr	r3, [pc, #312]	; (1000f6b8 <at_ble_event_get+0x6b4>)
1000f57e:	e764      	b.n	1000f44a <at_ble_event_get+0x446>
1000f580:	1c30      	adds	r0, r6, #0
1000f582:	1c29      	adds	r1, r5, #0
1000f584:	9a01      	ldr	r2, [sp, #4]
1000f586:	4b4d      	ldr	r3, [pc, #308]	; (1000f6bc <at_ble_event_get+0x6b8>)
1000f588:	4798      	blx	r3
1000f58a:	263b      	movs	r6, #59	; 0x3b
1000f58c:	e02f      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f58e:	1c31      	adds	r1, r6, #0
1000f590:	9801      	ldr	r0, [sp, #4]
1000f592:	1c2a      	adds	r2, r5, #0
1000f594:	4b4a      	ldr	r3, [pc, #296]	; (1000f6c0 <at_ble_event_get+0x6bc>)
1000f596:	4798      	blx	r3
1000f598:	2618      	movs	r6, #24
1000f59a:	e028      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f59c:	1c31      	adds	r1, r6, #0
1000f59e:	9801      	ldr	r0, [sp, #4]
1000f5a0:	1c2a      	adds	r2, r5, #0
1000f5a2:	4b48      	ldr	r3, [pc, #288]	; (1000f6c4 <at_ble_event_get+0x6c0>)
1000f5a4:	4798      	blx	r3
1000f5a6:	2620      	movs	r6, #32
1000f5a8:	e021      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f5aa:	1c31      	adds	r1, r6, #0
1000f5ac:	9801      	ldr	r0, [sp, #4]
1000f5ae:	1c2a      	adds	r2, r5, #0
1000f5b0:	4b45      	ldr	r3, [pc, #276]	; (1000f6c8 <at_ble_event_get+0x6c4>)
1000f5b2:	4798      	blx	r3
1000f5b4:	2633      	movs	r6, #51	; 0x33
1000f5b6:	e01a      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f5b8:	1c31      	adds	r1, r6, #0
1000f5ba:	9801      	ldr	r0, [sp, #4]
1000f5bc:	1c2a      	adds	r2, r5, #0
1000f5be:	4b43      	ldr	r3, [pc, #268]	; (1000f6cc <at_ble_event_get+0x6c8>)
1000f5c0:	4798      	blx	r3
1000f5c2:	2630      	movs	r6, #48	; 0x30
1000f5c4:	e013      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f5c6:	1c31      	adds	r1, r6, #0
1000f5c8:	9801      	ldr	r0, [sp, #4]
1000f5ca:	1c2a      	adds	r2, r5, #0
1000f5cc:	4b40      	ldr	r3, [pc, #256]	; (1000f6d0 <at_ble_event_get+0x6cc>)
1000f5ce:	4798      	blx	r3
1000f5d0:	2634      	movs	r6, #52	; 0x34
1000f5d2:	e00c      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f5d4:	1c31      	adds	r1, r6, #0
1000f5d6:	9801      	ldr	r0, [sp, #4]
1000f5d8:	1c2a      	adds	r2, r5, #0
1000f5da:	4b3e      	ldr	r3, [pc, #248]	; (1000f6d4 <at_ble_event_get+0x6d0>)
1000f5dc:	4798      	blx	r3
1000f5de:	2635      	movs	r6, #53	; 0x35
1000f5e0:	e005      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f5e2:	1c31      	adds	r1, r6, #0
1000f5e4:	9801      	ldr	r0, [sp, #4]
1000f5e6:	1c2a      	adds	r2, r5, #0
1000f5e8:	4b3b      	ldr	r3, [pc, #236]	; (1000f6d8 <at_ble_event_get+0x6d4>)
1000f5ea:	4798      	blx	r3
1000f5ec:	2632      	movs	r6, #50	; 0x32
1000f5ee:	9b03      	ldr	r3, [sp, #12]
1000f5f0:	701e      	strb	r6, [r3, #0]
1000f5f2:	2300      	movs	r3, #0
1000f5f4:	9302      	str	r3, [sp, #8]
1000f5f6:	e57a      	b.n	1000f0ee <at_ble_event_get+0xea>
1000f5f8:	23d0      	movs	r3, #208	; 0xd0
1000f5fa:	e7fb      	b.n	1000f5f4 <at_ble_event_get+0x5f0>
1000f5fc:	9b01      	ldr	r3, [sp, #4]
1000f5fe:	9e02      	ldr	r6, [sp, #8]
1000f600:	2bbb      	cmp	r3, #187	; 0xbb
1000f602:	d000      	beq.n	1000f606 <at_ble_event_get+0x602>
1000f604:	e6e6      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f606:	e7f2      	b.n	1000f5ee <at_ble_event_get+0x5ea>
1000f608:	9b02      	ldr	r3, [sp, #8]
1000f60a:	2b00      	cmp	r3, #0
1000f60c:	d000      	beq.n	1000f610 <at_ble_event_get+0x60c>
1000f60e:	e56e      	b.n	1000f0ee <at_ble_event_get+0xea>
1000f610:	e6e0      	b.n	1000f3d4 <at_ble_event_get+0x3d0>
1000f612:	9802      	ldr	r0, [sp, #8]
1000f614:	b007      	add	sp, #28
1000f616:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f618:	00000e22 	.word	0x00000e22
1000f61c:	00000e25 	.word	0x00000e25
1000f620:	00001b05 	.word	0x00001b05
1000f624:	00001b01 	.word	0x00001b01
1000f628:	00001b03 	.word	0x00001b03
1000f62c:	00001b06 	.word	0x00001b06
1000f630:	00001b08 	.word	0x00001b08
1000f634:	10011835 	.word	0x10011835
1000f638:	10011819 	.word	0x10011819
1000f63c:	10011ab5 	.word	0x10011ab5
1000f640:	10011ba5 	.word	0x10011ba5
1000f644:	10011bc9 	.word	0x10011bc9
1000f648:	10010bad 	.word	0x10010bad
1000f64c:	1001142d 	.word	0x1001142d
1000f650:	100114a9 	.word	0x100114a9
1000f654:	10010e65 	.word	0x10010e65
1000f658:	10010f01 	.word	0x10010f01
1000f65c:	10010fd9 	.word	0x10010fd9
1000f660:	10011261 	.word	0x10011261
1000f664:	10011301 	.word	0x10011301
1000f668:	100113b9 	.word	0x100113b9
1000f66c:	100113e1 	.word	0x100113e1
1000f670:	100113f7 	.word	0x100113f7
1000f674:	100114c1 	.word	0x100114c1
1000f678:	100114ef 	.word	0x100114ef
1000f67c:	10011505 	.word	0x10011505
1000f680:	1001152f 	.word	0x1001152f
1000f684:	1001135d 	.word	0x1001135d
1000f688:	10011387 	.word	0x10011387
1000f68c:	100105ed 	.word	0x100105ed
1000f690:	10010619 	.word	0x10010619
1000f694:	10011de9 	.word	0x10011de9
1000f698:	10011e25 	.word	0x10011e25
1000f69c:	10011e6d 	.word	0x10011e6d
1000f6a0:	10011eb1 	.word	0x10011eb1
1000f6a4:	10011ee5 	.word	0x10011ee5
1000f6a8:	10011da9 	.word	0x10011da9
1000f6ac:	10011fb1 	.word	0x10011fb1
1000f6b0:	10011f39 	.word	0x10011f39
1000f6b4:	100104d1 	.word	0x100104d1
1000f6b8:	1001053d 	.word	0x1001053d
1000f6bc:	10010501 	.word	0x10010501
1000f6c0:	10011fc1 	.word	0x10011fc1
1000f6c4:	10012001 	.word	0x10012001
1000f6c8:	100122c9 	.word	0x100122c9
1000f6cc:	100122d3 	.word	0x100122d3
1000f6d0:	100122d9 	.word	0x100122d9
1000f6d4:	100122df 	.word	0x100122df
1000f6d8:	100122eb 	.word	0x100122eb

1000f6dc <internal_event_flush>:
1000f6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6de:	490e      	ldr	r1, [pc, #56]	; (1000f718 <internal_event_flush+0x3c>)
1000f6e0:	2400      	movs	r4, #0
1000f6e2:	680b      	ldr	r3, [r1, #0]
1000f6e4:	1c0f      	adds	r7, r1, #0
1000f6e6:	1c1e      	adds	r6, r3, #0
1000f6e8:	4a0c      	ldr	r2, [pc, #48]	; (1000f71c <internal_event_flush+0x40>)
1000f6ea:	6815      	ldr	r5, [r2, #0]
1000f6ec:	9201      	str	r2, [sp, #4]
1000f6ee:	2b00      	cmp	r3, #0
1000f6f0:	d00e      	beq.n	1000f710 <internal_event_flush+0x34>
1000f6f2:	889a      	ldrh	r2, [r3, #4]
1000f6f4:	6819      	ldr	r1, [r3, #0]
1000f6f6:	4282      	cmp	r2, r0
1000f6f8:	d107      	bne.n	1000f70a <internal_event_flush+0x2e>
1000f6fa:	2c00      	cmp	r4, #0
1000f6fc:	d001      	beq.n	1000f702 <internal_event_flush+0x26>
1000f6fe:	6021      	str	r1, [r4, #0]
1000f700:	e000      	b.n	1000f704 <internal_event_flush+0x28>
1000f702:	1c0e      	adds	r6, r1, #0
1000f704:	601d      	str	r5, [r3, #0]
1000f706:	1c1d      	adds	r5, r3, #0
1000f708:	1c23      	adds	r3, r4, #0
1000f70a:	1c1c      	adds	r4, r3, #0
1000f70c:	1c0b      	adds	r3, r1, #0
1000f70e:	e7ee      	b.n	1000f6ee <internal_event_flush+0x12>
1000f710:	9b01      	ldr	r3, [sp, #4]
1000f712:	603e      	str	r6, [r7, #0]
1000f714:	601d      	str	r5, [r3, #0]
1000f716:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f718:	1001adb8 	.word	0x1001adb8
1000f71c:	1001adbc 	.word	0x1001adbc

1000f720 <internal_conn_flush>:
1000f720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f722:	4a12      	ldr	r2, [pc, #72]	; (1000f76c <internal_conn_flush+0x4c>)
1000f724:	9000      	str	r0, [sp, #0]
1000f726:	6813      	ldr	r3, [r2, #0]
1000f728:	4811      	ldr	r0, [pc, #68]	; (1000f770 <internal_conn_flush+0x50>)
1000f72a:	1c1f      	adds	r7, r3, #0
1000f72c:	2100      	movs	r1, #0
1000f72e:	4684      	mov	ip, r0
1000f730:	6804      	ldr	r4, [r0, #0]
1000f732:	9201      	str	r2, [sp, #4]
1000f734:	2b00      	cmp	r3, #0
1000f736:	d014      	beq.n	1000f762 <internal_conn_flush+0x42>
1000f738:	88d8      	ldrh	r0, [r3, #6]
1000f73a:	9a00      	ldr	r2, [sp, #0]
1000f73c:	681d      	ldr	r5, [r3, #0]
1000f73e:	0a06      	lsrs	r6, r0, #8
1000f740:	4296      	cmp	r6, r2
1000f742:	d10b      	bne.n	1000f75c <internal_conn_flush+0x3c>
1000f744:	26fd      	movs	r6, #253	; 0xfd
1000f746:	4006      	ands	r6, r0
1000f748:	2e0c      	cmp	r6, #12
1000f74a:	d107      	bne.n	1000f75c <internal_conn_flush+0x3c>
1000f74c:	2900      	cmp	r1, #0
1000f74e:	d001      	beq.n	1000f754 <internal_conn_flush+0x34>
1000f750:	600d      	str	r5, [r1, #0]
1000f752:	e000      	b.n	1000f756 <internal_conn_flush+0x36>
1000f754:	1c2f      	adds	r7, r5, #0
1000f756:	601c      	str	r4, [r3, #0]
1000f758:	1c1c      	adds	r4, r3, #0
1000f75a:	1c0b      	adds	r3, r1, #0
1000f75c:	1c19      	adds	r1, r3, #0
1000f75e:	1c2b      	adds	r3, r5, #0
1000f760:	e7e8      	b.n	1000f734 <internal_conn_flush+0x14>
1000f762:	9b01      	ldr	r3, [sp, #4]
1000f764:	601f      	str	r7, [r3, #0]
1000f766:	4663      	mov	r3, ip
1000f768:	601c      	str	r4, [r3, #0]
1000f76a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f76c:	1001adb8 	.word	0x1001adb8
1000f770:	1001adbc 	.word	0x1001adbc

1000f774 <at_ble_device_name_set>:
1000f774:	b530      	push	{r4, r5, lr}
1000f776:	23cf      	movs	r3, #207	; 0xcf
1000f778:	2800      	cmp	r0, #0
1000f77a:	d010      	beq.n	1000f79e <at_ble_device_name_set+0x2a>
1000f77c:	1e4a      	subs	r2, r1, #1
1000f77e:	2a1f      	cmp	r2, #31
1000f780:	d80d      	bhi.n	1000f79e <at_ble_device_name_set+0x2a>
1000f782:	4a08      	ldr	r2, [pc, #32]	; (1000f7a4 <at_ble_device_name_set+0x30>)
1000f784:	1c13      	adds	r3, r2, #0
1000f786:	33aa      	adds	r3, #170	; 0xaa
1000f788:	8019      	strh	r1, [r3, #0]
1000f78a:	2300      	movs	r3, #0
1000f78c:	1c1c      	adds	r4, r3, #0
1000f78e:	5cc5      	ldrb	r5, [r0, r3]
1000f790:	34ac      	adds	r4, #172	; 0xac
1000f792:	3301      	adds	r3, #1
1000f794:	5515      	strb	r5, [r2, r4]
1000f796:	b2dc      	uxtb	r4, r3
1000f798:	428c      	cmp	r4, r1
1000f79a:	d3f7      	bcc.n	1000f78c <at_ble_device_name_set+0x18>
1000f79c:	2300      	movs	r3, #0
1000f79e:	1c18      	adds	r0, r3, #0
1000f7a0:	bd30      	pop	{r4, r5, pc}
1000f7a2:	46c0      	nop			; (mov r8, r8)
1000f7a4:	1001bdba 	.word	0x1001bdba

1000f7a8 <at_ble_addr_get>:
1000f7a8:	b510      	push	{r4, lr}
1000f7aa:	1c04      	adds	r4, r0, #0
1000f7ac:	20cf      	movs	r0, #207	; 0xcf
1000f7ae:	2c00      	cmp	r4, #0
1000f7b0:	d006      	beq.n	1000f7c0 <at_ble_addr_get+0x18>
1000f7b2:	4b04      	ldr	r3, [pc, #16]	; (1000f7c4 <at_ble_addr_get+0x1c>)
1000f7b4:	38ce      	subs	r0, #206	; 0xce
1000f7b6:	1c21      	adds	r1, r4, #0
1000f7b8:	4798      	blx	r3
1000f7ba:	4b03      	ldr	r3, [pc, #12]	; (1000f7c8 <at_ble_addr_get+0x20>)
1000f7bc:	791b      	ldrb	r3, [r3, #4]
1000f7be:	7023      	strb	r3, [r4, #0]
1000f7c0:	bd10      	pop	{r4, pc}
1000f7c2:	46c0      	nop			; (mov r8, r8)
1000f7c4:	100116c9 	.word	0x100116c9
1000f7c8:	1001bdba 	.word	0x1001bdba

1000f7cc <at_ble_set_dev_config>:
1000f7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7ce:	7906      	ldrb	r6, [r0, #4]
1000f7d0:	b089      	sub	sp, #36	; 0x24
1000f7d2:	25cf      	movs	r5, #207	; 0xcf
1000f7d4:	2e03      	cmp	r6, #3
1000f7d6:	d838      	bhi.n	1000f84a <at_ble_set_dev_config+0x7e>
1000f7d8:	7803      	ldrb	r3, [r0, #0]
1000f7da:	3511      	adds	r5, #17
1000f7dc:	2b0f      	cmp	r3, #15
1000f7de:	d834      	bhi.n	1000f84a <at_ble_set_dev_config+0x7e>
1000f7e0:	2380      	movs	r3, #128	; 0x80
1000f7e2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f7e4:	3d11      	subs	r5, #17
1000f7e6:	009b      	lsls	r3, r3, #2
1000f7e8:	429f      	cmp	r7, r3
1000f7ea:	d82e      	bhi.n	1000f84a <at_ble_set_dev_config+0x7e>
1000f7ec:	7fc5      	ldrb	r5, [r0, #31]
1000f7ee:	7f83      	ldrb	r3, [r0, #30]
1000f7f0:	01ad      	lsls	r5, r5, #6
1000f7f2:	015b      	lsls	r3, r3, #5
1000f7f4:	431d      	orrs	r5, r3
1000f7f6:	7ec3      	ldrb	r3, [r0, #27]
1000f7f8:	431d      	orrs	r5, r3
1000f7fa:	7f43      	ldrb	r3, [r0, #29]
1000f7fc:	011b      	lsls	r3, r3, #4
1000f7fe:	431d      	orrs	r5, r3
1000f800:	7f03      	ldrb	r3, [r0, #28]
1000f802:	009b      	lsls	r3, r3, #2
1000f804:	431d      	orrs	r5, r3
1000f806:	4b12      	ldr	r3, [pc, #72]	; (1000f850 <at_ble_set_dev_config+0x84>)
1000f808:	b2ed      	uxtb	r5, r5
1000f80a:	711e      	strb	r6, [r3, #4]
1000f80c:	7903      	ldrb	r3, [r0, #4]
1000f80e:	3b02      	subs	r3, #2
1000f810:	2b01      	cmp	r3, #1
1000f812:	d801      	bhi.n	1000f818 <at_ble_set_dev_config+0x4c>
1000f814:	2302      	movs	r3, #2
1000f816:	7103      	strb	r3, [r0, #4]
1000f818:	1c04      	adds	r4, r0, #0
1000f81a:	1c23      	adds	r3, r4, #0
1000f81c:	330b      	adds	r3, #11
1000f81e:	8861      	ldrh	r1, [r4, #2]
1000f820:	9307      	str	r3, [sp, #28]
1000f822:	7923      	ldrb	r3, [r4, #4]
1000f824:	7800      	ldrb	r0, [r0, #0]
1000f826:	9300      	str	r3, [sp, #0]
1000f828:	9501      	str	r5, [sp, #4]
1000f82a:	8c25      	ldrh	r5, [r4, #32]
1000f82c:	1d62      	adds	r2, r4, #5
1000f82e:	9502      	str	r5, [sp, #8]
1000f830:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f832:	9b07      	ldr	r3, [sp, #28]
1000f834:	9503      	str	r5, [sp, #12]
1000f836:	9704      	str	r7, [sp, #16]
1000f838:	4d06      	ldr	r5, [pc, #24]	; (1000f854 <at_ble_set_dev_config+0x88>)
1000f83a:	47a8      	blx	r5
1000f83c:	7126      	strb	r6, [r4, #4]
1000f83e:	1c05      	adds	r5, r0, #0
1000f840:	1c21      	adds	r1, r4, #0
1000f842:	4803      	ldr	r0, [pc, #12]	; (1000f850 <at_ble_set_dev_config+0x84>)
1000f844:	2226      	movs	r2, #38	; 0x26
1000f846:	4b04      	ldr	r3, [pc, #16]	; (1000f858 <at_ble_set_dev_config+0x8c>)
1000f848:	4798      	blx	r3
1000f84a:	1c28      	adds	r0, r5, #0
1000f84c:	b009      	add	sp, #36	; 0x24
1000f84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f850:	1001bdba 	.word	0x1001bdba
1000f854:	100115c1 	.word	0x100115c1
1000f858:	100166cf 	.word	0x100166cf

1000f85c <at_ble_init>:
1000f85c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f85e:	b087      	sub	sp, #28
1000f860:	af03      	add	r7, sp, #12
1000f862:	4954      	ldr	r1, [pc, #336]	; (1000f9b4 <at_ble_init+0x158>)
1000f864:	220b      	movs	r2, #11
1000f866:	4b54      	ldr	r3, [pc, #336]	; (1000f9b8 <at_ble_init+0x15c>)
1000f868:	1c04      	adds	r4, r0, #0
1000f86a:	1c38      	adds	r0, r7, #0
1000f86c:	4798      	blx	r3
1000f86e:	2205      	movs	r2, #5
1000f870:	4b52      	ldr	r3, [pc, #328]	; (1000f9bc <at_ble_init+0x160>)
1000f872:	2640      	movs	r6, #64	; 0x40
1000f874:	801a      	strh	r2, [r3, #0]
1000f876:	2300      	movs	r3, #0
1000f878:	4a51      	ldr	r2, [pc, #324]	; (1000f9c0 <at_ble_init+0x164>)
1000f87a:	6013      	str	r3, [r2, #0]
1000f87c:	4a51      	ldr	r2, [pc, #324]	; (1000f9c4 <at_ble_init+0x168>)
1000f87e:	7013      	strb	r3, [r2, #0]
1000f880:	4a51      	ldr	r2, [pc, #324]	; (1000f9c8 <at_ble_init+0x16c>)
1000f882:	7013      	strb	r3, [r2, #0]
1000f884:	4b51      	ldr	r3, [pc, #324]	; (1000f9cc <at_ble_init+0x170>)
1000f886:	4798      	blx	r3
1000f888:	4b51      	ldr	r3, [pc, #324]	; (1000f9d0 <at_ble_init+0x174>)
1000f88a:	4798      	blx	r3
1000f88c:	4b51      	ldr	r3, [pc, #324]	; (1000f9d4 <at_ble_init+0x178>)
1000f88e:	4798      	blx	r3
1000f890:	4b51      	ldr	r3, [pc, #324]	; (1000f9d8 <at_ble_init+0x17c>)
1000f892:	4798      	blx	r3
1000f894:	2c00      	cmp	r4, #0
1000f896:	d100      	bne.n	1000f89a <at_ble_init+0x3e>
1000f898:	e089      	b.n	1000f9ae <at_ble_init+0x152>
1000f89a:	68a3      	ldr	r3, [r4, #8]
1000f89c:	2b00      	cmp	r3, #0
1000f89e:	d100      	bne.n	1000f8a2 <at_ble_init+0x46>
1000f8a0:	e085      	b.n	1000f9ae <at_ble_init+0x152>
1000f8a2:	6923      	ldr	r3, [r4, #16]
1000f8a4:	2b00      	cmp	r3, #0
1000f8a6:	d100      	bne.n	1000f8aa <at_ble_init+0x4e>
1000f8a8:	e081      	b.n	1000f9ae <at_ble_init+0x152>
1000f8aa:	6820      	ldr	r0, [r4, #0]
1000f8ac:	2800      	cmp	r0, #0
1000f8ae:	d102      	bne.n	1000f8b6 <at_ble_init+0x5a>
1000f8b0:	6863      	ldr	r3, [r4, #4]
1000f8b2:	2b00      	cmp	r3, #0
1000f8b4:	d17b      	bne.n	1000f9ae <at_ble_init+0x152>
1000f8b6:	4b49      	ldr	r3, [pc, #292]	; (1000f9dc <at_ble_init+0x180>)
1000f8b8:	6861      	ldr	r1, [r4, #4]
1000f8ba:	4798      	blx	r3
1000f8bc:	4b48      	ldr	r3, [pc, #288]	; (1000f9e0 <at_ble_init+0x184>)
1000f8be:	4798      	blx	r3
1000f8c0:	2801      	cmp	r0, #1
1000f8c2:	d901      	bls.n	1000f8c8 <at_ble_init+0x6c>
1000f8c4:	26e2      	movs	r6, #226	; 0xe2
1000f8c6:	e072      	b.n	1000f9ae <at_ble_init+0x152>
1000f8c8:	4846      	ldr	r0, [pc, #280]	; (1000f9e4 <at_ble_init+0x188>)
1000f8ca:	4b47      	ldr	r3, [pc, #284]	; (1000f9e8 <at_ble_init+0x18c>)
1000f8cc:	4798      	blx	r3
1000f8ce:	2800      	cmp	r0, #0
1000f8d0:	d1f8      	bne.n	1000f8c4 <at_ble_init+0x68>
1000f8d2:	1c20      	adds	r0, r4, #0
1000f8d4:	4b45      	ldr	r3, [pc, #276]	; (1000f9ec <at_ble_init+0x190>)
1000f8d6:	4798      	blx	r3
1000f8d8:	68e0      	ldr	r0, [r4, #12]
1000f8da:	68a1      	ldr	r1, [r4, #8]
1000f8dc:	4b44      	ldr	r3, [pc, #272]	; (1000f9f0 <at_ble_init+0x194>)
1000f8de:	4798      	blx	r3
1000f8e0:	466b      	mov	r3, sp
1000f8e2:	2201      	movs	r2, #1
1000f8e4:	1cdc      	adds	r4, r3, #3
1000f8e6:	1c20      	adds	r0, r4, #0
1000f8e8:	a901      	add	r1, sp, #4
1000f8ea:	4252      	negs	r2, r2
1000f8ec:	4b41      	ldr	r3, [pc, #260]	; (1000f9f4 <at_ble_init+0x198>)
1000f8ee:	4798      	blx	r3
1000f8f0:	2800      	cmp	r0, #0
1000f8f2:	d102      	bne.n	1000f8fa <at_ble_init+0x9e>
1000f8f4:	7823      	ldrb	r3, [r4, #0]
1000f8f6:	2b39      	cmp	r3, #57	; 0x39
1000f8f8:	d1f2      	bne.n	1000f8e0 <at_ble_init+0x84>
1000f8fa:	4b3f      	ldr	r3, [pc, #252]	; (1000f9f8 <at_ble_init+0x19c>)
1000f8fc:	4798      	blx	r3
1000f8fe:	1e06      	subs	r6, r0, #0
1000f900:	d155      	bne.n	1000f9ae <at_ble_init+0x152>
1000f902:	1c03      	adds	r3, r0, #0
1000f904:	2101      	movs	r1, #1
1000f906:	4a3d      	ldr	r2, [pc, #244]	; (1000f9fc <at_ble_init+0x1a0>)
1000f908:	4249      	negs	r1, r1
1000f90a:	189a      	adds	r2, r3, r2
1000f90c:	3312      	adds	r3, #18
1000f90e:	8151      	strh	r1, [r2, #10]
1000f910:	2b90      	cmp	r3, #144	; 0x90
1000f912:	d1f7      	bne.n	1000f904 <at_ble_init+0xa8>
1000f914:	4c3a      	ldr	r4, [pc, #232]	; (1000fa00 <at_ble_init+0x1a4>)
1000f916:	3b81      	subs	r3, #129	; 0x81
1000f918:	7023      	strb	r3, [r4, #0]
1000f91a:	4b3a      	ldr	r3, [pc, #232]	; (1000fa04 <at_ble_init+0x1a8>)
1000f91c:	4a3a      	ldr	r2, [pc, #232]	; (1000fa08 <at_ble_init+0x1ac>)
1000f91e:	8063      	strh	r3, [r4, #2]
1000f920:	2300      	movs	r3, #0
1000f922:	7123      	strb	r3, [r4, #4]
1000f924:	3301      	adds	r3, #1
1000f926:	1e58      	subs	r0, r3, #1
1000f928:	0119      	lsls	r1, r3, #4
1000f92a:	4301      	orrs	r1, r0
1000f92c:	3302      	adds	r3, #2
1000f92e:	7011      	strb	r1, [r2, #0]
1000f930:	3201      	adds	r2, #1
1000f932:	2b21      	cmp	r3, #33	; 0x21
1000f934:	d1f7      	bne.n	1000f926 <at_ble_init+0xca>
1000f936:	33e0      	adds	r3, #224	; 0xe0
1000f938:	33ff      	adds	r3, #255	; 0xff
1000f93a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f93c:	1c23      	adds	r3, r4, #0
1000f93e:	2500      	movs	r5, #0
1000f940:	3373      	adds	r3, #115	; 0x73
1000f942:	701d      	strb	r5, [r3, #0]
1000f944:	1c23      	adds	r3, r4, #0
1000f946:	3372      	adds	r3, #114	; 0x72
1000f948:	701d      	strb	r5, [r3, #0]
1000f94a:	1c23      	adds	r3, r4, #0
1000f94c:	3376      	adds	r3, #118	; 0x76
1000f94e:	701d      	strb	r5, [r3, #0]
1000f950:	1c23      	adds	r3, r4, #0
1000f952:	33cc      	adds	r3, #204	; 0xcc
1000f954:	801d      	strh	r5, [r3, #0]
1000f956:	1c22      	adds	r2, r4, #0
1000f958:	23a0      	movs	r3, #160	; 0xa0
1000f95a:	32d0      	adds	r2, #208	; 0xd0
1000f95c:	005b      	lsls	r3, r3, #1
1000f95e:	8013      	strh	r3, [r2, #0]
1000f960:	1c22      	adds	r2, r4, #0
1000f962:	32ce      	adds	r2, #206	; 0xce
1000f964:	8013      	strh	r3, [r2, #0]
1000f966:	1c23      	adds	r3, r4, #0
1000f968:	33d2      	adds	r3, #210	; 0xd2
1000f96a:	801d      	strh	r5, [r3, #0]
1000f96c:	22fa      	movs	r2, #250	; 0xfa
1000f96e:	1c23      	adds	r3, r4, #0
1000f970:	0052      	lsls	r2, r2, #1
1000f972:	33d4      	adds	r3, #212	; 0xd4
1000f974:	801a      	strh	r2, [r3, #0]
1000f976:	1c23      	adds	r3, r4, #0
1000f978:	33d6      	adds	r3, #214	; 0xd6
1000f97a:	701d      	strb	r5, [r3, #0]
1000f97c:	1c20      	adds	r0, r4, #0
1000f97e:	4b23      	ldr	r3, [pc, #140]	; (1000fa0c <at_ble_init+0x1b0>)
1000f980:	76e5      	strb	r5, [r4, #27]
1000f982:	7725      	strb	r5, [r4, #28]
1000f984:	7765      	strb	r5, [r4, #29]
1000f986:	77a5      	strb	r5, [r4, #30]
1000f988:	77e5      	strb	r5, [r4, #31]
1000f98a:	8425      	strh	r5, [r4, #32]
1000f98c:	8465      	strh	r5, [r4, #34]	; 0x22
1000f98e:	4798      	blx	r3
1000f990:	1c23      	adds	r3, r4, #0
1000f992:	2207      	movs	r2, #7
1000f994:	3374      	adds	r3, #116	; 0x74
1000f996:	701a      	strb	r2, [r3, #0]
1000f998:	1c23      	adds	r3, r4, #0
1000f99a:	3204      	adds	r2, #4
1000f99c:	33aa      	adds	r3, #170	; 0xaa
1000f99e:	801a      	strh	r2, [r3, #0]
1000f9a0:	1c2b      	adds	r3, r5, #0
1000f9a2:	5d7a      	ldrb	r2, [r7, r5]
1000f9a4:	33ac      	adds	r3, #172	; 0xac
1000f9a6:	3501      	adds	r5, #1
1000f9a8:	54e2      	strb	r2, [r4, r3]
1000f9aa:	2d0b      	cmp	r5, #11
1000f9ac:	d1f8      	bne.n	1000f9a0 <at_ble_init+0x144>
1000f9ae:	1c30      	adds	r0, r6, #0
1000f9b0:	b007      	add	sp, #28
1000f9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f9b4:	100190e7 	.word	0x100190e7
1000f9b8:	100166cf 	.word	0x100166cf
1000f9bc:	1001bd28 	.word	0x1001bd28
1000f9c0:	1001ae68 	.word	0x1001ae68
1000f9c4:	1001adc8 	.word	0x1001adc8
1000f9c8:	10019330 	.word	0x10019330
1000f9cc:	10012011 	.word	0x10012011
1000f9d0:	1000fccd 	.word	0x1000fccd
1000f9d4:	1001032d 	.word	0x1001032d
1000f9d8:	100105e1 	.word	0x100105e1
1000f9dc:	10010369 	.word	0x10010369
1000f9e0:	1000e48d 	.word	0x1000e48d
1000f9e4:	100108e1 	.word	0x100108e1
1000f9e8:	1000e6d1 	.word	0x1000e6d1
1000f9ec:	10010989 	.word	0x10010989
1000f9f0:	1000ef49 	.word	0x1000ef49
1000f9f4:	1000f005 	.word	0x1000f005
1000f9f8:	10011551 	.word	0x10011551
1000f9fc:	1001bd2a 	.word	0x1001bd2a
1000fa00:	1001bdba 	.word	0x1001bdba
1000fa04:	00003a98 	.word	0x00003a98
1000fa08:	1001bdc5 	.word	0x1001bdc5
1000fa0c:	1000f7cd 	.word	0x1000f7cd

1000fa10 <at_ble_addr_set>:
1000fa10:	b538      	push	{r3, r4, r5, lr}
1000fa12:	1c45      	adds	r5, r0, #1
1000fa14:	1c03      	adds	r3, r0, #0
1000fa16:	20cf      	movs	r0, #207	; 0xcf
1000fa18:	2d00      	cmp	r5, #0
1000fa1a:	d018      	beq.n	1000fa4e <at_ble_addr_set+0x3e>
1000fa1c:	781a      	ldrb	r2, [r3, #0]
1000fa1e:	2a03      	cmp	r2, #3
1000fa20:	d815      	bhi.n	1000fa4e <at_ble_addr_set+0x3e>
1000fa22:	2a01      	cmp	r2, #1
1000fa24:	d102      	bne.n	1000fa2c <at_ble_addr_set+0x1c>
1000fa26:	785a      	ldrb	r2, [r3, #1]
1000fa28:	2a00      	cmp	r2, #0
1000fa2a:	d010      	beq.n	1000fa4e <at_ble_addr_set+0x3e>
1000fa2c:	1c1c      	adds	r4, r3, #0
1000fa2e:	1c29      	adds	r1, r5, #0
1000fa30:	2206      	movs	r2, #6
1000fa32:	4b07      	ldr	r3, [pc, #28]	; (1000fa50 <at_ble_addr_set+0x40>)
1000fa34:	4807      	ldr	r0, [pc, #28]	; (1000fa54 <at_ble_addr_set+0x44>)
1000fa36:	4798      	blx	r3
1000fa38:	7823      	ldrb	r3, [r4, #0]
1000fa3a:	4807      	ldr	r0, [pc, #28]	; (1000fa58 <at_ble_addr_set+0x48>)
1000fa3c:	7103      	strb	r3, [r0, #4]
1000fa3e:	4b07      	ldr	r3, [pc, #28]	; (1000fa5c <at_ble_addr_set+0x4c>)
1000fa40:	4798      	blx	r3
1000fa42:	7823      	ldrb	r3, [r4, #0]
1000fa44:	2b00      	cmp	r3, #0
1000fa46:	d102      	bne.n	1000fa4e <at_ble_addr_set+0x3e>
1000fa48:	1c28      	adds	r0, r5, #0
1000fa4a:	4b05      	ldr	r3, [pc, #20]	; (1000fa60 <at_ble_addr_set+0x50>)
1000fa4c:	4798      	blx	r3
1000fa4e:	bd38      	pop	{r3, r4, r5, pc}
1000fa50:	100166cf 	.word	0x100166cf
1000fa54:	1001bdbf 	.word	0x1001bdbf
1000fa58:	1001bdba 	.word	0x1001bdba
1000fa5c:	1000f7cd 	.word	0x1000f7cd
1000fa60:	10010a0d 	.word	0x10010a0d

1000fa64 <at_ble_adv_data_set>:
1000fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa66:	4684      	mov	ip, r0
1000fa68:	1c0f      	adds	r7, r1, #0
1000fa6a:	1c16      	adds	r6, r2, #0
1000fa6c:	1c1c      	adds	r4, r3, #0
1000fa6e:	2800      	cmp	r0, #0
1000fa70:	d102      	bne.n	1000fa78 <at_ble_adv_data_set+0x14>
1000fa72:	20e2      	movs	r0, #226	; 0xe2
1000fa74:	2a00      	cmp	r2, #0
1000fa76:	d02b      	beq.n	1000fad0 <at_ble_adv_data_set+0x6c>
1000fa78:	20cf      	movs	r0, #207	; 0xcf
1000fa7a:	2f1f      	cmp	r7, #31
1000fa7c:	d828      	bhi.n	1000fad0 <at_ble_adv_data_set+0x6c>
1000fa7e:	2c1f      	cmp	r4, #31
1000fa80:	d826      	bhi.n	1000fad0 <at_ble_adv_data_set+0x6c>
1000fa82:	4663      	mov	r3, ip
1000fa84:	2b00      	cmp	r3, #0
1000fa86:	d00e      	beq.n	1000faa6 <at_ble_adv_data_set+0x42>
1000fa88:	4812      	ldr	r0, [pc, #72]	; (1000fad4 <at_ble_adv_data_set+0x70>)
1000fa8a:	4d13      	ldr	r5, [pc, #76]	; (1000fad8 <at_ble_adv_data_set+0x74>)
1000fa8c:	2f00      	cmp	r7, #0
1000fa8e:	d104      	bne.n	1000fa9a <at_ble_adv_data_set+0x36>
1000fa90:	1c39      	adds	r1, r7, #0
1000fa92:	221f      	movs	r2, #31
1000fa94:	4b11      	ldr	r3, [pc, #68]	; (1000fadc <at_ble_adv_data_set+0x78>)
1000fa96:	4798      	blx	r3
1000fa98:	e003      	b.n	1000faa2 <at_ble_adv_data_set+0x3e>
1000fa9a:	4661      	mov	r1, ip
1000fa9c:	1c3a      	adds	r2, r7, #0
1000fa9e:	4b10      	ldr	r3, [pc, #64]	; (1000fae0 <at_ble_adv_data_set+0x7c>)
1000faa0:	4798      	blx	r3
1000faa2:	3572      	adds	r5, #114	; 0x72
1000faa4:	702f      	strb	r7, [r5, #0]
1000faa6:	1e30      	subs	r0, r6, #0
1000faa8:	d012      	beq.n	1000fad0 <at_ble_adv_data_set+0x6c>
1000faaa:	4d0b      	ldr	r5, [pc, #44]	; (1000fad8 <at_ble_adv_data_set+0x74>)
1000faac:	480d      	ldr	r0, [pc, #52]	; (1000fae4 <at_ble_adv_data_set+0x80>)
1000faae:	2c00      	cmp	r4, #0
1000fab0:	d107      	bne.n	1000fac2 <at_ble_adv_data_set+0x5e>
1000fab2:	1c21      	adds	r1, r4, #0
1000fab4:	221f      	movs	r2, #31
1000fab6:	4b09      	ldr	r3, [pc, #36]	; (1000fadc <at_ble_adv_data_set+0x78>)
1000fab8:	3573      	adds	r5, #115	; 0x73
1000faba:	4798      	blx	r3
1000fabc:	702c      	strb	r4, [r5, #0]
1000fabe:	1c20      	adds	r0, r4, #0
1000fac0:	e006      	b.n	1000fad0 <at_ble_adv_data_set+0x6c>
1000fac2:	1c31      	adds	r1, r6, #0
1000fac4:	1c22      	adds	r2, r4, #0
1000fac6:	4b06      	ldr	r3, [pc, #24]	; (1000fae0 <at_ble_adv_data_set+0x7c>)
1000fac8:	4798      	blx	r3
1000faca:	2000      	movs	r0, #0
1000facc:	3573      	adds	r5, #115	; 0x73
1000face:	702c      	strb	r4, [r5, #0]
1000fad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fad2:	46c0      	nop			; (mov r8, r8)
1000fad4:	1001bdee 	.word	0x1001bdee
1000fad8:	1001bdba 	.word	0x1001bdba
1000fadc:	100166e1 	.word	0x100166e1
1000fae0:	100166cf 	.word	0x100166cf
1000fae4:	1001be0d 	.word	0x1001be0d

1000fae8 <at_ble_adv_start>:
1000fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000faea:	b091      	sub	sp, #68	; 0x44
1000faec:	1c1f      	adds	r7, r3, #0
1000faee:	ab16      	add	r3, sp, #88	; 0x58
1000faf0:	881d      	ldrh	r5, [r3, #0]
1000faf2:	ab17      	add	r3, sp, #92	; 0x5c
1000faf4:	881b      	ldrh	r3, [r3, #0]
1000faf6:	910d      	str	r1, [sp, #52]	; 0x34
1000faf8:	930e      	str	r3, [sp, #56]	; 0x38
1000fafa:	ab18      	add	r3, sp, #96	; 0x60
1000fafc:	781b      	ldrb	r3, [r3, #0]
1000fafe:	1c04      	adds	r4, r0, #0
1000fb00:	930f      	str	r3, [sp, #60]	; 0x3c
1000fb02:	4b42      	ldr	r3, [pc, #264]	; (1000fc0c <at_ble_adv_start+0x124>)
1000fb04:	1c16      	adds	r6, r2, #0
1000fb06:	3373      	adds	r3, #115	; 0x73
1000fb08:	781b      	ldrb	r3, [r3, #0]
1000fb0a:	20cf      	movs	r0, #207	; 0xcf
1000fb0c:	930c      	str	r3, [sp, #48]	; 0x30
1000fb0e:	2c01      	cmp	r4, #1
1000fb10:	d103      	bne.n	1000fb1a <at_ble_adv_start+0x32>
1000fb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000fb14:	2b00      	cmp	r3, #0
1000fb16:	d176      	bne.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb18:	e024      	b.n	1000fb64 <at_ble_adv_start+0x7c>
1000fb1a:	2c04      	cmp	r4, #4
1000fb1c:	d873      	bhi.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb1e:	2380      	movs	r3, #128	; 0x80
1000fb20:	01db      	lsls	r3, r3, #7
1000fb22:	429d      	cmp	r5, r3
1000fb24:	d86f      	bhi.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb26:	2c00      	cmp	r4, #0
1000fb28:	d102      	bne.n	1000fb30 <at_ble_adv_start+0x48>
1000fb2a:	2d1f      	cmp	r5, #31
1000fb2c:	d96b      	bls.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb2e:	e003      	b.n	1000fb38 <at_ble_adv_start+0x50>
1000fb30:	2d9f      	cmp	r5, #159	; 0x9f
1000fb32:	d801      	bhi.n	1000fb38 <at_ble_adv_start+0x50>
1000fb34:	2c01      	cmp	r4, #1
1000fb36:	d166      	bne.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb38:	2f00      	cmp	r7, #0
1000fb3a:	d009      	beq.n	1000fb50 <at_ble_adv_start+0x68>
1000fb3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fb3e:	20cf      	movs	r0, #207	; 0xcf
1000fb40:	3b01      	subs	r3, #1
1000fb42:	2b01      	cmp	r3, #1
1000fb44:	d95f      	bls.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb46:	2c01      	cmp	r4, #1
1000fb48:	d102      	bne.n	1000fb50 <at_ble_adv_start+0x68>
1000fb4a:	2d00      	cmp	r5, #0
1000fb4c:	d100      	bne.n	1000fb50 <at_ble_adv_start+0x68>
1000fb4e:	3520      	adds	r5, #32
1000fb50:	4b2f      	ldr	r3, [pc, #188]	; (1000fc10 <at_ble_adv_start+0x128>)
1000fb52:	4798      	blx	r3
1000fb54:	1c01      	adds	r1, r0, #0
1000fb56:	2e00      	cmp	r6, #0
1000fb58:	d043      	beq.n	1000fbe2 <at_ble_adv_start+0xfa>
1000fb5a:	7833      	ldrb	r3, [r6, #0]
1000fb5c:	1e60      	subs	r0, r4, #1
1000fb5e:	2b00      	cmp	r3, #0
1000fb60:	d109      	bne.n	1000fb76 <at_ble_adv_start+0x8e>
1000fb62:	e03b      	b.n	1000fbdc <at_ble_adv_start+0xf4>
1000fb64:	2380      	movs	r3, #128	; 0x80
1000fb66:	01db      	lsls	r3, r3, #7
1000fb68:	429d      	cmp	r5, r3
1000fb6a:	d84c      	bhi.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb6c:	2e00      	cmp	r6, #0
1000fb6e:	d04a      	beq.n	1000fc06 <at_ble_adv_start+0x11e>
1000fb70:	2f00      	cmp	r7, #0
1000fb72:	d1e3      	bne.n	1000fb3c <at_ble_adv_start+0x54>
1000fb74:	e02b      	b.n	1000fbce <at_ble_adv_start+0xe6>
1000fb76:	2301      	movs	r3, #1
1000fb78:	2803      	cmp	r0, #3
1000fb7a:	d93a      	bls.n	1000fbf2 <at_ble_adv_start+0x10a>
1000fb7c:	200d      	movs	r0, #13
1000fb7e:	1c72      	adds	r2, r6, #1
1000fb80:	e002      	b.n	1000fb88 <at_ble_adv_start+0xa0>
1000fb82:	200e      	movs	r0, #14
1000fb84:	1e32      	subs	r2, r6, #0
1000fb86:	d1fa      	bne.n	1000fb7e <at_ble_adv_start+0x96>
1000fb88:	4c20      	ldr	r4, [pc, #128]	; (1000fc0c <at_ble_adv_start+0x124>)
1000fb8a:	3474      	adds	r4, #116	; 0x74
1000fb8c:	7826      	ldrb	r6, [r4, #0]
1000fb8e:	2407      	movs	r4, #7
1000fb90:	2e00      	cmp	r6, #0
1000fb92:	d000      	beq.n	1000fb96 <at_ble_adv_start+0xae>
1000fb94:	1c34      	adds	r4, r6, #0
1000fb96:	9200      	str	r2, [sp, #0]
1000fb98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000fb9a:	9403      	str	r4, [sp, #12]
1000fb9c:	9204      	str	r2, [sp, #16]
1000fb9e:	4a1b      	ldr	r2, [pc, #108]	; (1000fc0c <at_ble_adv_start+0x124>)
1000fba0:	9501      	str	r5, [sp, #4]
1000fba2:	9502      	str	r5, [sp, #8]
1000fba4:	9705      	str	r7, [sp, #20]
1000fba6:	3272      	adds	r2, #114	; 0x72
1000fba8:	7812      	ldrb	r2, [r2, #0]
1000fbaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000fbac:	9206      	str	r2, [sp, #24]
1000fbae:	4a19      	ldr	r2, [pc, #100]	; (1000fc14 <at_ble_adv_start+0x12c>)
1000fbb0:	9207      	str	r2, [sp, #28]
1000fbb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000fbb4:	9208      	str	r2, [sp, #32]
1000fbb6:	4a18      	ldr	r2, [pc, #96]	; (1000fc18 <at_ble_adv_start+0x130>)
1000fbb8:	9209      	str	r2, [sp, #36]	; 0x24
1000fbba:	2264      	movs	r2, #100	; 0x64
1000fbbc:	4362      	muls	r2, r4
1000fbbe:	b292      	uxth	r2, r2
1000fbc0:	920a      	str	r2, [sp, #40]	; 0x28
1000fbc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000fbc4:	4c15      	ldr	r4, [pc, #84]	; (1000fc1c <at_ble_adv_start+0x134>)
1000fbc6:	920b      	str	r2, [sp, #44]	; 0x2c
1000fbc8:	4a15      	ldr	r2, [pc, #84]	; (1000fc20 <at_ble_adv_start+0x138>)
1000fbca:	47a0      	blx	r4
1000fbcc:	e01b      	b.n	1000fc06 <at_ble_adv_start+0x11e>
1000fbce:	2d00      	cmp	r5, #0
1000fbd0:	d1be      	bne.n	1000fb50 <at_ble_adv_start+0x68>
1000fbd2:	4b0f      	ldr	r3, [pc, #60]	; (1000fc10 <at_ble_adv_start+0x128>)
1000fbd4:	4798      	blx	r3
1000fbd6:	2520      	movs	r5, #32
1000fbd8:	1c01      	adds	r1, r0, #0
1000fbda:	e7be      	b.n	1000fb5a <at_ble_adv_start+0x72>
1000fbdc:	2803      	cmp	r0, #3
1000fbde:	d8cd      	bhi.n	1000fb7c <at_ble_adv_start+0x94>
1000fbe0:	e006      	b.n	1000fbf0 <at_ble_adv_start+0x108>
1000fbe2:	1e60      	subs	r0, r4, #1
1000fbe4:	2803      	cmp	r0, #3
1000fbe6:	d903      	bls.n	1000fbf0 <at_ble_adv_start+0x108>
1000fbe8:	1c33      	adds	r3, r6, #0
1000fbea:	200d      	movs	r0, #13
1000fbec:	1c32      	adds	r2, r6, #0
1000fbee:	e7cb      	b.n	1000fb88 <at_ble_adv_start+0xa0>
1000fbf0:	2300      	movs	r3, #0
1000fbf2:	f003 fd3d 	bl	10013670 <__gnu_thumb1_case_sqi>
1000fbf6:	06c6      	.short	0x06c6
1000fbf8:	0204      	.short	0x0204
1000fbfa:	200f      	movs	r0, #15
1000fbfc:	e7c2      	b.n	1000fb84 <at_ble_adv_start+0x9c>
1000fbfe:	2200      	movs	r2, #0
1000fc00:	920c      	str	r2, [sp, #48]	; 0x30
1000fc02:	200c      	movs	r0, #12
1000fc04:	e7be      	b.n	1000fb84 <at_ble_adv_start+0x9c>
1000fc06:	b011      	add	sp, #68	; 0x44
1000fc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc0a:	46c0      	nop			; (mov r8, r8)
1000fc0c:	1001bdba 	.word	0x1001bdba
1000fc10:	10011a9d 	.word	0x10011a9d
1000fc14:	1001bdee 	.word	0x1001bdee
1000fc18:	1001be0d 	.word	0x1001be0d
1000fc1c:	1001197d 	.word	0x1001197d
1000fc20:	00003a98 	.word	0x00003a98

1000fc24 <at_ble_adv_stop>:
1000fc24:	b508      	push	{r3, lr}
1000fc26:	4b01      	ldr	r3, [pc, #4]	; (1000fc2c <at_ble_adv_stop+0x8>)
1000fc28:	4798      	blx	r3
1000fc2a:	bd08      	pop	{r3, pc}
1000fc2c:	100117a9 	.word	0x100117a9

1000fc30 <at_ble_scan_stop>:
1000fc30:	b510      	push	{r4, lr}
1000fc32:	4b05      	ldr	r3, [pc, #20]	; (1000fc48 <at_ble_scan_stop+0x18>)
1000fc34:	4798      	blx	r3
1000fc36:	1e04      	subs	r4, r0, #0
1000fc38:	d103      	bne.n	1000fc42 <at_ble_scan_stop+0x12>
1000fc3a:	20d1      	movs	r0, #209	; 0xd1
1000fc3c:	4b03      	ldr	r3, [pc, #12]	; (1000fc4c <at_ble_scan_stop+0x1c>)
1000fc3e:	0100      	lsls	r0, r0, #4
1000fc40:	4798      	blx	r3
1000fc42:	1c20      	adds	r0, r4, #0
1000fc44:	bd10      	pop	{r4, pc}
1000fc46:	46c0      	nop			; (mov r8, r8)
1000fc48:	100117a9 	.word	0x100117a9
1000fc4c:	1000f6dd 	.word	0x1000f6dd

1000fc50 <at_ble_disconnect>:
1000fc50:	b538      	push	{r3, r4, r5, lr}
1000fc52:	1c04      	adds	r4, r0, #0
1000fc54:	4b04      	ldr	r3, [pc, #16]	; (1000fc68 <at_ble_disconnect+0x18>)
1000fc56:	1c08      	adds	r0, r1, #0
1000fc58:	1c21      	adds	r1, r4, #0
1000fc5a:	4798      	blx	r3
1000fc5c:	1c05      	adds	r5, r0, #0
1000fc5e:	4b03      	ldr	r3, [pc, #12]	; (1000fc6c <at_ble_disconnect+0x1c>)
1000fc60:	1c20      	adds	r0, r4, #0
1000fc62:	4798      	blx	r3
1000fc64:	1c28      	adds	r0, r5, #0
1000fc66:	bd38      	pop	{r3, r4, r5, pc}
1000fc68:	10010e21 	.word	0x10010e21
1000fc6c:	1000f721 	.word	0x1000f721

1000fc70 <at_ble_conn_update_reply>:
1000fc70:	b510      	push	{r4, lr}
1000fc72:	4c01      	ldr	r4, [pc, #4]	; (1000fc78 <at_ble_conn_update_reply+0x8>)
1000fc74:	47a0      	blx	r4
1000fc76:	bd10      	pop	{r4, pc}
1000fc78:	10011311 	.word	0x10011311

1000fc7c <at_ble_random_address_resolve>:
1000fc7c:	b510      	push	{r4, lr}
1000fc7e:	23cf      	movs	r3, #207	; 0xcf
1000fc80:	2800      	cmp	r0, #0
1000fc82:	d00a      	beq.n	1000fc9a <at_ble_random_address_resolve+0x1e>
1000fc84:	2900      	cmp	r1, #0
1000fc86:	d008      	beq.n	1000fc9a <at_ble_random_address_resolve+0x1e>
1000fc88:	2a00      	cmp	r2, #0
1000fc8a:	d006      	beq.n	1000fc9a <at_ble_random_address_resolve+0x1e>
1000fc8c:	780c      	ldrb	r4, [r1, #0]
1000fc8e:	2c02      	cmp	r4, #2
1000fc90:	d103      	bne.n	1000fc9a <at_ble_random_address_resolve+0x1e>
1000fc92:	4b03      	ldr	r3, [pc, #12]	; (1000fca0 <at_ble_random_address_resolve+0x24>)
1000fc94:	3101      	adds	r1, #1
1000fc96:	4798      	blx	r3
1000fc98:	2300      	movs	r3, #0
1000fc9a:	1c18      	adds	r0, r3, #0
1000fc9c:	bd10      	pop	{r4, pc}
1000fc9e:	46c0      	nop			; (mov r8, r8)
1000fca0:	10011b3d 	.word	0x10011b3d

1000fca4 <at_ble_uuid_type2len>:
1000fca4:	23cf      	movs	r3, #207	; 0xcf
1000fca6:	2802      	cmp	r0, #2
1000fca8:	d801      	bhi.n	1000fcae <at_ble_uuid_type2len+0xa>
1000fcaa:	4b02      	ldr	r3, [pc, #8]	; (1000fcb4 <at_ble_uuid_type2len+0x10>)
1000fcac:	5c1b      	ldrb	r3, [r3, r0]
1000fcae:	1c18      	adds	r0, r3, #0
1000fcb0:	4770      	bx	lr
1000fcb2:	46c0      	nop			; (mov r8, r8)
1000fcb4:	100190f2 	.word	0x100190f2

1000fcb8 <at_ble_uuid_len2type>:
1000fcb8:	1e83      	subs	r3, r0, #2
1000fcba:	b2db      	uxtb	r3, r3
1000fcbc:	2003      	movs	r0, #3
1000fcbe:	2b0e      	cmp	r3, #14
1000fcc0:	d801      	bhi.n	1000fcc6 <at_ble_uuid_len2type+0xe>
1000fcc2:	4a01      	ldr	r2, [pc, #4]	; (1000fcc8 <at_ble_uuid_len2type+0x10>)
1000fcc4:	5cd0      	ldrb	r0, [r2, r3]
1000fcc6:	4770      	bx	lr
1000fcc8:	100190f5 	.word	0x100190f5

1000fccc <init_gatt_client_module>:
1000fccc:	2200      	movs	r2, #0
1000fcce:	4b01      	ldr	r3, [pc, #4]	; (1000fcd4 <init_gatt_client_module+0x8>)
1000fcd0:	801a      	strh	r2, [r3, #0]
1000fcd2:	4770      	bx	lr
1000fcd4:	1001adc0 	.word	0x1001adc0

1000fcd8 <db_searchATT>:
1000fcd8:	b570      	push	{r4, r5, r6, lr}
1000fcda:	1c05      	adds	r5, r0, #0
1000fcdc:	2400      	movs	r4, #0
1000fcde:	4b0c      	ldr	r3, [pc, #48]	; (1000fd10 <db_searchATT+0x38>)
1000fce0:	6819      	ldr	r1, [r3, #0]
1000fce2:	4b0c      	ldr	r3, [pc, #48]	; (1000fd14 <db_searchATT+0x3c>)
1000fce4:	681e      	ldr	r6, [r3, #0]
1000fce6:	428c      	cmp	r4, r1
1000fce8:	dc10      	bgt.n	1000fd0c <db_searchATT+0x34>
1000fcea:	200c      	movs	r0, #12
1000fcec:	1863      	adds	r3, r4, r1
1000fcee:	0fda      	lsrs	r2, r3, #31
1000fcf0:	18d3      	adds	r3, r2, r3
1000fcf2:	1c02      	adds	r2, r0, #0
1000fcf4:	105b      	asrs	r3, r3, #1
1000fcf6:	435a      	muls	r2, r3
1000fcf8:	18b0      	adds	r0, r6, r2
1000fcfa:	8802      	ldrh	r2, [r0, #0]
1000fcfc:	42aa      	cmp	r2, r5
1000fcfe:	d201      	bcs.n	1000fd04 <db_searchATT+0x2c>
1000fd00:	1e59      	subs	r1, r3, #1
1000fd02:	e7f0      	b.n	1000fce6 <db_searchATT+0xe>
1000fd04:	42aa      	cmp	r2, r5
1000fd06:	d902      	bls.n	1000fd0e <db_searchATT+0x36>
1000fd08:	1c5c      	adds	r4, r3, #1
1000fd0a:	e7ec      	b.n	1000fce6 <db_searchATT+0xe>
1000fd0c:	2000      	movs	r0, #0
1000fd0e:	bd70      	pop	{r4, r5, r6, pc}
1000fd10:	1001add4 	.word	0x1001add4
1000fd14:	1001adcc 	.word	0x1001adcc

1000fd18 <att_permissions>:
1000fd18:	b530      	push	{r4, r5, lr}
1000fd1a:	2403      	movs	r4, #3
1000fd1c:	1c05      	adds	r5, r0, #0
1000fd1e:	2301      	movs	r3, #1
1000fd20:	4025      	ands	r5, r4
1000fd22:	42a5      	cmp	r5, r4
1000fd24:	d009      	beq.n	1000fd3a <att_permissions+0x22>
1000fd26:	1c23      	adds	r3, r4, #0
1000fd28:	1924      	adds	r4, r4, r4
1000fd2a:	4220      	tst	r0, r4
1000fd2c:	d105      	bne.n	1000fd3a <att_permissions+0x22>
1000fd2e:	3b02      	subs	r3, #2
1000fd30:	4218      	tst	r0, r3
1000fd32:	d102      	bne.n	1000fd3a <att_permissions+0x22>
1000fd34:	1e4b      	subs	r3, r1, #1
1000fd36:	4199      	sbcs	r1, r3
1000fd38:	b28b      	uxth	r3, r1
1000fd3a:	2130      	movs	r1, #48	; 0x30
1000fd3c:	4001      	ands	r1, r0
1000fd3e:	2930      	cmp	r1, #48	; 0x30
1000fd40:	d007      	beq.n	1000fd52 <att_permissions+0x3a>
1000fd42:	0641      	lsls	r1, r0, #25
1000fd44:	d401      	bmi.n	1000fd4a <att_permissions+0x32>
1000fd46:	0681      	lsls	r1, r0, #26
1000fd48:	d501      	bpl.n	1000fd4e <att_permissions+0x36>
1000fd4a:	4807      	ldr	r0, [pc, #28]	; (1000fd68 <att_permissions+0x50>)
1000fd4c:	e009      	b.n	1000fd62 <att_permissions+0x4a>
1000fd4e:	06c1      	lsls	r1, r0, #27
1000fd50:	d501      	bpl.n	1000fd56 <att_permissions+0x3e>
1000fd52:	4806      	ldr	r0, [pc, #24]	; (1000fd6c <att_permissions+0x54>)
1000fd54:	e005      	b.n	1000fd62 <att_permissions+0x4a>
1000fd56:	2a00      	cmp	r2, #0
1000fd58:	d001      	beq.n	1000fd5e <att_permissions+0x46>
1000fd5a:	2204      	movs	r2, #4
1000fd5c:	4313      	orrs	r3, r2
1000fd5e:	2080      	movs	r0, #128	; 0x80
1000fd60:	0180      	lsls	r0, r0, #6
1000fd62:	4318      	orrs	r0, r3
1000fd64:	bd30      	pop	{r4, r5, pc}
1000fd66:	46c0      	nop			; (mov r8, r8)
1000fd68:	0000200c 	.word	0x0000200c
1000fd6c:	00002004 	.word	0x00002004

1000fd70 <char_permissions>:
1000fd70:	b530      	push	{r4, r5, lr}
1000fd72:	2300      	movs	r3, #0
1000fd74:	0784      	lsls	r4, r0, #30
1000fd76:	d503      	bpl.n	1000fd80 <char_permissions+0x10>
1000fd78:	3301      	adds	r3, #1
1000fd7a:	4219      	tst	r1, r3
1000fd7c:	d100      	bne.n	1000fd80 <char_permissions+0x10>
1000fd7e:	3302      	adds	r3, #2
1000fd80:	0704      	lsls	r4, r0, #28
1000fd82:	d508      	bpl.n	1000fd96 <char_permissions+0x26>
1000fd84:	06cc      	lsls	r4, r1, #27
1000fd86:	d501      	bpl.n	1000fd8c <char_permissions+0x1c>
1000fd88:	2404      	movs	r4, #4
1000fd8a:	e000      	b.n	1000fd8e <char_permissions+0x1e>
1000fd8c:	240c      	movs	r4, #12
1000fd8e:	4323      	orrs	r3, r4
1000fd90:	2480      	movs	r4, #128	; 0x80
1000fd92:	01a4      	lsls	r4, r4, #6
1000fd94:	4323      	orrs	r3, r4
1000fd96:	0684      	lsls	r4, r0, #26
1000fd98:	d506      	bpl.n	1000fda8 <char_permissions+0x38>
1000fd9a:	2406      	movs	r4, #6
1000fd9c:	4221      	tst	r1, r4
1000fd9e:	d101      	bne.n	1000fda4 <char_permissions+0x34>
1000fda0:	340a      	adds	r4, #10
1000fda2:	e000      	b.n	1000fda6 <char_permissions+0x36>
1000fda4:	2430      	movs	r4, #48	; 0x30
1000fda6:	4323      	orrs	r3, r4
1000fda8:	06c4      	lsls	r4, r0, #27
1000fdaa:	d506      	bpl.n	1000fdba <char_permissions+0x4a>
1000fdac:	2406      	movs	r4, #6
1000fdae:	4221      	tst	r1, r4
1000fdb0:	d101      	bne.n	1000fdb6 <char_permissions+0x46>
1000fdb2:	343a      	adds	r4, #58	; 0x3a
1000fdb4:	e000      	b.n	1000fdb8 <char_permissions+0x48>
1000fdb6:	24c0      	movs	r4, #192	; 0xc0
1000fdb8:	4323      	orrs	r3, r4
1000fdba:	2480      	movs	r4, #128	; 0x80
1000fdbc:	0064      	lsls	r4, r4, #1
1000fdbe:	4220      	tst	r0, r4
1000fdc0:	d000      	beq.n	1000fdc4 <char_permissions+0x54>
1000fdc2:	4323      	orrs	r3, r4
1000fdc4:	07c4      	lsls	r4, r0, #31
1000fdc6:	d502      	bpl.n	1000fdce <char_permissions+0x5e>
1000fdc8:	2480      	movs	r4, #128	; 0x80
1000fdca:	00a4      	lsls	r4, r4, #2
1000fdcc:	4323      	orrs	r3, r4
1000fdce:	2404      	movs	r4, #4
1000fdd0:	4220      	tst	r0, r4
1000fdd2:	d006      	beq.n	1000fde2 <char_permissions+0x72>
1000fdd4:	06cd      	lsls	r5, r1, #27
1000fdd6:	d400      	bmi.n	1000fdda <char_permissions+0x6a>
1000fdd8:	240c      	movs	r4, #12
1000fdda:	4323      	orrs	r3, r4
1000fddc:	2480      	movs	r4, #128	; 0x80
1000fdde:	0124      	lsls	r4, r4, #4
1000fde0:	4323      	orrs	r3, r4
1000fde2:	0644      	lsls	r4, r0, #25
1000fde4:	d501      	bpl.n	1000fdea <char_permissions+0x7a>
1000fde6:	4c08      	ldr	r4, [pc, #32]	; (1000fe08 <char_permissions+0x98>)
1000fde8:	4323      	orrs	r3, r4
1000fdea:	0600      	lsls	r0, r0, #24
1000fdec:	d507      	bpl.n	1000fdfe <char_permissions+0x8e>
1000fdee:	2004      	movs	r0, #4
1000fdf0:	06c9      	lsls	r1, r1, #27
1000fdf2:	d400      	bmi.n	1000fdf6 <char_permissions+0x86>
1000fdf4:	200c      	movs	r0, #12
1000fdf6:	4303      	orrs	r3, r0
1000fdf8:	2084      	movs	r0, #132	; 0x84
1000fdfa:	0180      	lsls	r0, r0, #6
1000fdfc:	4303      	orrs	r3, r0
1000fdfe:	0390      	lsls	r0, r2, #14
1000fe00:	4303      	orrs	r3, r0
1000fe02:	b298      	uxth	r0, r3
1000fe04:	bd30      	pop	{r4, r5, pc}
1000fe06:	46c0      	nop			; (mov r8, r8)
1000fe08:	00001004 	.word	0x00001004

1000fe0c <presentation_format_define>:
1000fe0c:	b507      	push	{r0, r1, r2, lr}
1000fe0e:	466a      	mov	r2, sp
1000fe10:	780b      	ldrb	r3, [r1, #0]
1000fe12:	7013      	strb	r3, [r2, #0]
1000fe14:	784b      	ldrb	r3, [r1, #1]
1000fe16:	7053      	strb	r3, [r2, #1]
1000fe18:	884b      	ldrh	r3, [r1, #2]
1000fe1a:	7093      	strb	r3, [r2, #2]
1000fe1c:	0a1b      	lsrs	r3, r3, #8
1000fe1e:	70d3      	strb	r3, [r2, #3]
1000fe20:	790b      	ldrb	r3, [r1, #4]
1000fe22:	7113      	strb	r3, [r2, #4]
1000fe24:	88cb      	ldrh	r3, [r1, #6]
1000fe26:	2107      	movs	r1, #7
1000fe28:	7153      	strb	r3, [r2, #5]
1000fe2a:	0a1b      	lsrs	r3, r3, #8
1000fe2c:	7193      	strb	r3, [r2, #6]
1000fe2e:	4b01      	ldr	r3, [pc, #4]	; (1000fe34 <presentation_format_define+0x28>)
1000fe30:	4798      	blx	r3
1000fe32:	bd0e      	pop	{r1, r2, r3, pc}
1000fe34:	100121a1 	.word	0x100121a1

1000fe38 <db_addATT>:
1000fe38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe3a:	4c29      	ldr	r4, [pc, #164]	; (1000fee0 <db_addATT+0xa8>)
1000fe3c:	1c1d      	adds	r5, r3, #0
1000fe3e:	6823      	ldr	r3, [r4, #0]
1000fe40:	9001      	str	r0, [sp, #4]
1000fe42:	26d3      	movs	r6, #211	; 0xd3
1000fe44:	2b00      	cmp	r3, #0
1000fe46:	d048      	beq.n	1000feda <db_addATT+0xa2>
1000fe48:	1c1e      	adds	r6, r3, #0
1000fe4a:	3e0c      	subs	r6, #12
1000fe4c:	6026      	str	r6, [r4, #0]
1000fe4e:	2900      	cmp	r1, #0
1000fe50:	d005      	beq.n	1000fe5e <db_addATT+0x26>
1000fe52:	4f24      	ldr	r7, [pc, #144]	; (1000fee4 <db_addATT+0xac>)
1000fe54:	46bc      	mov	ip, r7
1000fe56:	4660      	mov	r0, ip
1000fe58:	683f      	ldr	r7, [r7, #0]
1000fe5a:	18bf      	adds	r7, r7, r2
1000fe5c:	6007      	str	r7, [r0, #0]
1000fe5e:	4821      	ldr	r0, [pc, #132]	; (1000fee4 <db_addATT+0xac>)
1000fe60:	6807      	ldr	r7, [r0, #0]
1000fe62:	4684      	mov	ip, r0
1000fe64:	42be      	cmp	r6, r7
1000fe66:	d932      	bls.n	1000fece <db_addATT+0x96>
1000fe68:	4668      	mov	r0, sp
1000fe6a:	8880      	ldrh	r0, [r0, #4]
1000fe6c:	3b0c      	subs	r3, #12
1000fe6e:	8018      	strh	r0, [r3, #0]
1000fe70:	6823      	ldr	r3, [r4, #0]
1000fe72:	2900      	cmp	r1, #0
1000fe74:	d009      	beq.n	1000fe8a <db_addATT+0x52>
1000fe76:	2a00      	cmp	r2, #0
1000fe78:	d007      	beq.n	1000fe8a <db_addATT+0x52>
1000fe7a:	4660      	mov	r0, ip
1000fe7c:	6800      	ldr	r0, [r0, #0]
1000fe7e:	809a      	strh	r2, [r3, #4]
1000fe80:	1a80      	subs	r0, r0, r2
1000fe82:	6098      	str	r0, [r3, #8]
1000fe84:	4b18      	ldr	r3, [pc, #96]	; (1000fee8 <db_addATT+0xb0>)
1000fe86:	4798      	blx	r3
1000fe88:	e002      	b.n	1000fe90 <db_addATT+0x58>
1000fe8a:	2100      	movs	r1, #0
1000fe8c:	809a      	strh	r2, [r3, #4]
1000fe8e:	6099      	str	r1, [r3, #8]
1000fe90:	2300      	movs	r3, #0
1000fe92:	6822      	ldr	r2, [r4, #0]
1000fe94:	7093      	strb	r3, [r2, #2]
1000fe96:	3303      	adds	r3, #3
1000fe98:	402b      	ands	r3, r5
1000fe9a:	2b03      	cmp	r3, #3
1000fe9c:	d001      	beq.n	1000fea2 <db_addATT+0x6a>
1000fe9e:	076b      	lsls	r3, r5, #29
1000fea0:	d504      	bpl.n	1000feac <db_addATT+0x74>
1000fea2:	2101      	movs	r1, #1
1000fea4:	6822      	ldr	r2, [r4, #0]
1000fea6:	7893      	ldrb	r3, [r2, #2]
1000fea8:	430b      	orrs	r3, r1
1000feaa:	7093      	strb	r3, [r2, #2]
1000feac:	2330      	movs	r3, #48	; 0x30
1000feae:	402b      	ands	r3, r5
1000feb0:	2b30      	cmp	r3, #48	; 0x30
1000feb2:	d001      	beq.n	1000feb8 <db_addATT+0x80>
1000feb4:	066b      	lsls	r3, r5, #25
1000feb6:	d504      	bpl.n	1000fec2 <db_addATT+0x8a>
1000feb8:	2102      	movs	r1, #2
1000feba:	6822      	ldr	r2, [r4, #0]
1000febc:	7893      	ldrb	r3, [r2, #2]
1000febe:	430b      	orrs	r3, r1
1000fec0:	7093      	strb	r3, [r2, #2]
1000fec2:	4a0a      	ldr	r2, [pc, #40]	; (1000feec <db_addATT+0xb4>)
1000fec4:	2600      	movs	r6, #0
1000fec6:	6813      	ldr	r3, [r2, #0]
1000fec8:	3301      	adds	r3, #1
1000feca:	6013      	str	r3, [r2, #0]
1000fecc:	e005      	b.n	1000feda <db_addATT+0xa2>
1000fece:	6023      	str	r3, [r4, #0]
1000fed0:	2611      	movs	r6, #17
1000fed2:	2900      	cmp	r1, #0
1000fed4:	d001      	beq.n	1000feda <db_addATT+0xa2>
1000fed6:	1aba      	subs	r2, r7, r2
1000fed8:	6002      	str	r2, [r0, #0]
1000feda:	1c30      	adds	r0, r6, #0
1000fedc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fede:	46c0      	nop			; (mov r8, r8)
1000fee0:	1001adcc 	.word	0x1001adcc
1000fee4:	1001add0 	.word	0x1001add0
1000fee8:	100166cf 	.word	0x100166cf
1000feec:	1001add4 	.word	0x1001add4

1000fef0 <user_description_define>:
1000fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fef2:	1c05      	adds	r5, r0, #0
1000fef4:	20cf      	movs	r0, #207	; 0xcf
1000fef6:	2a00      	cmp	r2, #0
1000fef8:	d01c      	beq.n	1000ff34 <user_description_define+0x44>
1000fefa:	1c14      	adds	r4, r2, #0
1000fefc:	2203      	movs	r2, #3
1000fefe:	1c1e      	adds	r6, r3, #0
1000ff00:	400a      	ands	r2, r1
1000ff02:	1c0b      	adds	r3, r1, #0
1000ff04:	3a03      	subs	r2, #3
1000ff06:	4251      	negs	r1, r2
1000ff08:	4151      	adcs	r1, r2
1000ff0a:	075a      	lsls	r2, r3, #29
1000ff0c:	0fd2      	lsrs	r2, r2, #31
1000ff0e:	430a      	orrs	r2, r1
1000ff10:	03d2      	lsls	r2, r2, #15
1000ff12:	4f09      	ldr	r7, [pc, #36]	; (1000ff38 <user_description_define+0x48>)
1000ff14:	1c28      	adds	r0, r5, #0
1000ff16:	2a00      	cmp	r2, #0
1000ff18:	d003      	beq.n	1000ff22 <user_description_define+0x32>
1000ff1a:	1c21      	adds	r1, r4, #0
1000ff1c:	1c32      	adds	r2, r6, #0
1000ff1e:	47b8      	blx	r7
1000ff20:	e008      	b.n	1000ff34 <user_description_define+0x44>
1000ff22:	1c11      	adds	r1, r2, #0
1000ff24:	47b8      	blx	r7
1000ff26:	2800      	cmp	r0, #0
1000ff28:	d104      	bne.n	1000ff34 <user_description_define+0x44>
1000ff2a:	1c28      	adds	r0, r5, #0
1000ff2c:	1c31      	adds	r1, r6, #0
1000ff2e:	1c22      	adds	r2, r4, #0
1000ff30:	4b02      	ldr	r3, [pc, #8]	; (1000ff3c <user_description_define+0x4c>)
1000ff32:	4798      	blx	r3
1000ff34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ff36:	46c0      	nop			; (mov r8, r8)
1000ff38:	1000fe39 	.word	0x1000fe39
1000ff3c:	100121a1 	.word	0x100121a1

1000ff40 <at_ble_read_authorize_reply.part.1>:
1000ff40:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ff42:	4b09      	ldr	r3, [pc, #36]	; (1000ff68 <at_ble_read_authorize_reply.part.1+0x28>)
1000ff44:	1c05      	adds	r5, r0, #0
1000ff46:	1c08      	adds	r0, r1, #0
1000ff48:	1c0c      	adds	r4, r1, #0
1000ff4a:	4798      	blx	r3
1000ff4c:	2800      	cmp	r0, #0
1000ff4e:	d009      	beq.n	1000ff64 <at_ble_read_authorize_reply.part.1+0x24>
1000ff50:	6882      	ldr	r2, [r0, #8]
1000ff52:	2a00      	cmp	r2, #0
1000ff54:	d006      	beq.n	1000ff64 <at_ble_read_authorize_reply.part.1+0x24>
1000ff56:	8883      	ldrh	r3, [r0, #4]
1000ff58:	1c29      	adds	r1, r5, #0
1000ff5a:	9200      	str	r2, [sp, #0]
1000ff5c:	1c20      	adds	r0, r4, #0
1000ff5e:	2200      	movs	r2, #0
1000ff60:	4c02      	ldr	r4, [pc, #8]	; (1000ff6c <at_ble_read_authorize_reply.part.1+0x2c>)
1000ff62:	47a0      	blx	r4
1000ff64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ff66:	46c0      	nop			; (mov r8, r8)
1000ff68:	1000fcd9 	.word	0x1000fcd9
1000ff6c:	10011c39 	.word	0x10011c39

1000ff70 <internal_at_ble_service_define>:
1000ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff72:	b08b      	sub	sp, #44	; 0x2c
1000ff74:	9306      	str	r3, [sp, #24]
1000ff76:	ab10      	add	r3, sp, #64	; 0x40
1000ff78:	9202      	str	r2, [sp, #8]
1000ff7a:	cb04      	ldmia	r3!, {r2}
1000ff7c:	1c05      	adds	r5, r0, #0
1000ff7e:	881b      	ldrh	r3, [r3, #0]
1000ff80:	9105      	str	r1, [sp, #20]
1000ff82:	9303      	str	r3, [sp, #12]
1000ff84:	ab12      	add	r3, sp, #72	; 0x48
1000ff86:	781b      	ldrb	r3, [r3, #0]
1000ff88:	20cf      	movs	r0, #207	; 0xcf
1000ff8a:	9304      	str	r3, [sp, #16]
1000ff8c:	2d00      	cmp	r5, #0
1000ff8e:	d100      	bne.n	1000ff92 <internal_at_ble_service_define+0x22>
1000ff90:	e1ca      	b.n	10010328 <internal_at_ble_service_define+0x3b8>
1000ff92:	2900      	cmp	r1, #0
1000ff94:	d100      	bne.n	1000ff98 <internal_at_ble_service_define+0x28>
1000ff96:	e1c7      	b.n	10010328 <internal_at_ble_service_define+0x3b8>
1000ff98:	2a00      	cmp	r2, #0
1000ff9a:	d100      	bne.n	1000ff9e <internal_at_ble_service_define+0x2e>
1000ff9c:	e1c4      	b.n	10010328 <internal_at_ble_service_define+0x3b8>
1000ff9e:	9b03      	ldr	r3, [sp, #12]
1000ffa0:	2b00      	cmp	r3, #0
1000ffa2:	d100      	bne.n	1000ffa6 <internal_at_ble_service_define+0x36>
1000ffa4:	e1c0      	b.n	10010328 <internal_at_ble_service_define+0x3b8>
1000ffa6:	4bc9      	ldr	r3, [pc, #804]	; (100102cc <internal_at_ble_service_define+0x35c>)
1000ffa8:	3004      	adds	r0, #4
1000ffaa:	681e      	ldr	r6, [r3, #0]
1000ffac:	2e00      	cmp	r6, #0
1000ffae:	d100      	bne.n	1000ffb2 <internal_at_ble_service_define+0x42>
1000ffb0:	e1ba      	b.n	10010328 <internal_at_ble_service_define+0x3b8>
1000ffb2:	2400      	movs	r4, #0
1000ffb4:	4bc6      	ldr	r3, [pc, #792]	; (100102d0 <internal_at_ble_service_define+0x360>)
1000ffb6:	8034      	strh	r4, [r6, #0]
1000ffb8:	881b      	ldrh	r3, [r3, #0]
1000ffba:	1db7      	adds	r7, r6, #6
1000ffbc:	1c21      	adds	r1, r4, #0
1000ffbe:	2210      	movs	r2, #16
1000ffc0:	8073      	strh	r3, [r6, #2]
1000ffc2:	1c38      	adds	r0, r7, #0
1000ffc4:	4bc3      	ldr	r3, [pc, #780]	; (100102d4 <internal_at_ble_service_define+0x364>)
1000ffc6:	4798      	blx	r3
1000ffc8:	7828      	ldrb	r0, [r5, #0]
1000ffca:	4bc3      	ldr	r3, [pc, #780]	; (100102d8 <internal_at_ble_service_define+0x368>)
1000ffcc:	4798      	blx	r3
1000ffce:	1c69      	adds	r1, r5, #1
1000ffd0:	1c02      	adds	r2, r0, #0
1000ffd2:	4bc2      	ldr	r3, [pc, #776]	; (100102dc <internal_at_ble_service_define+0x36c>)
1000ffd4:	1c38      	adds	r0, r7, #0
1000ffd6:	4798      	blx	r3
1000ffd8:	2204      	movs	r2, #4
1000ffda:	782b      	ldrb	r3, [r5, #0]
1000ffdc:	9d02      	ldr	r5, [sp, #8]
1000ffde:	011b      	lsls	r3, r3, #4
1000ffe0:	4313      	orrs	r3, r2
1000ffe2:	9a04      	ldr	r2, [sp, #16]
1000ffe4:	7174      	strb	r4, [r6, #5]
1000ffe6:	0192      	lsls	r2, r2, #6
1000ffe8:	4313      	orrs	r3, r2
1000ffea:	7133      	strb	r3, [r6, #4]
1000ffec:	2316      	movs	r3, #22
1000ffee:	9a06      	ldr	r2, [sp, #24]
1000fff0:	3512      	adds	r5, #18
1000fff2:	4353      	muls	r3, r2
1000fff4:	9a02      	ldr	r2, [sp, #8]
1000fff6:	3312      	adds	r3, #18
1000fff8:	18d7      	adds	r7, r2, r3
1000fffa:	42bd      	cmp	r5, r7
1000fffc:	d00f      	beq.n	1001001e <internal_at_ble_service_define+0xae>
1000fffe:	4bb8      	ldr	r3, [pc, #736]	; (100102e0 <internal_at_ble_service_define+0x370>)
10010000:	8829      	ldrh	r1, [r5, #0]
10010002:	9300      	str	r3, [sp, #0]
10010004:	230e      	movs	r3, #14
10010006:	aa06      	add	r2, sp, #24
10010008:	189b      	adds	r3, r3, r2
1001000a:	9301      	str	r3, [sp, #4]
1001000c:	4cb5      	ldr	r4, [pc, #724]	; (100102e4 <internal_at_ble_service_define+0x374>)
1001000e:	1c30      	adds	r0, r6, #0
10010010:	2201      	movs	r2, #1
10010012:	2302      	movs	r3, #2
10010014:	47a0      	blx	r4
10010016:	3516      	adds	r5, #22
10010018:	1e04      	subs	r4, r0, #0
1001001a:	d0ee      	beq.n	1000fffa <internal_at_ble_service_define+0x8a>
1001001c:	e183      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
1001001e:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010020:	2300      	movs	r3, #0
10010022:	3714      	adds	r7, #20
10010024:	1c3d      	adds	r5, r7, #0
10010026:	9302      	str	r3, [sp, #8]
10010028:	9b02      	ldr	r3, [sp, #8]
1001002a:	9a03      	ldr	r2, [sp, #12]
1001002c:	4293      	cmp	r3, r2
1001002e:	db00      	blt.n	10010032 <internal_at_ble_service_define+0xc2>
10010030:	e0bf      	b.n	100101b2 <internal_at_ble_service_define+0x242>
10010032:	4bad      	ldr	r3, [pc, #692]	; (100102e8 <internal_at_ble_service_define+0x378>)
10010034:	aa06      	add	r2, sp, #24
10010036:	9300      	str	r3, [sp, #0]
10010038:	230e      	movs	r3, #14
1001003a:	189b      	adds	r3, r3, r2
1001003c:	9301      	str	r3, [sp, #4]
1001003e:	4ca9      	ldr	r4, [pc, #676]	; (100102e4 <internal_at_ble_service_define+0x374>)
10010040:	1c30      	adds	r0, r6, #0
10010042:	2104      	movs	r1, #4
10010044:	2201      	movs	r2, #1
10010046:	2302      	movs	r3, #2
10010048:	47a0      	blx	r4
1001004a:	1e04      	subs	r4, r0, #0
1001004c:	d000      	beq.n	10010050 <internal_at_ble_service_define+0xe0>
1001004e:	e16a      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
10010050:	1c2b      	adds	r3, r5, #0
10010052:	3b12      	subs	r3, #18
10010054:	7b2c      	ldrb	r4, [r5, #12]
10010056:	781b      	ldrb	r3, [r3, #0]
10010058:	1c21      	adds	r1, r4, #0
1001005a:	1c1a      	adds	r2, r3, #0
1001005c:	9304      	str	r3, [sp, #16]
1001005e:	8828      	ldrh	r0, [r5, #0]
10010060:	4ba2      	ldr	r3, [pc, #648]	; (100102ec <internal_at_ble_service_define+0x37c>)
10010062:	4798      	blx	r3
10010064:	2303      	movs	r3, #3
10010066:	4023      	ands	r3, r4
10010068:	3b03      	subs	r3, #3
1001006a:	4259      	negs	r1, r3
1001006c:	4159      	adcs	r1, r3
1001006e:	2301      	movs	r3, #1
10010070:	08a4      	lsrs	r4, r4, #2
10010072:	401c      	ands	r4, r3
10010074:	430c      	orrs	r4, r1
10010076:	896b      	ldrh	r3, [r5, #10]
10010078:	03e4      	lsls	r4, r4, #15
1001007a:	431c      	orrs	r4, r3
1001007c:	9007      	str	r0, [sp, #28]
1001007e:	4b96      	ldr	r3, [pc, #600]	; (100102d8 <internal_at_ble_service_define+0x368>)
10010080:	9804      	ldr	r0, [sp, #16]
10010082:	4798      	blx	r3
10010084:	1c2a      	adds	r2, r5, #0
10010086:	3a11      	subs	r2, #17
10010088:	9200      	str	r2, [sp, #0]
1001008a:	3a03      	subs	r2, #3
1001008c:	1c03      	adds	r3, r0, #0
1001008e:	9201      	str	r2, [sp, #4]
10010090:	1c21      	adds	r1, r4, #0
10010092:	1c30      	adds	r0, r6, #0
10010094:	4c93      	ldr	r4, [pc, #588]	; (100102e4 <internal_at_ble_service_define+0x374>)
10010096:	9a07      	ldr	r2, [sp, #28]
10010098:	47a0      	blx	r4
1001009a:	1e04      	subs	r4, r0, #0
1001009c:	d000      	beq.n	100100a0 <internal_at_ble_service_define+0x130>
1001009e:	e142      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
100100a0:	22c0      	movs	r2, #192	; 0xc0
100100a2:	882b      	ldrh	r3, [r5, #0]
100100a4:	0052      	lsls	r2, r2, #1
100100a6:	4213      	tst	r3, r2
100100a8:	d104      	bne.n	100100b4 <internal_at_ble_service_define+0x144>
100100aa:	8aab      	ldrh	r3, [r5, #20]
100100ac:	9304      	str	r3, [sp, #16]
100100ae:	2b00      	cmp	r3, #0
100100b0:	d116      	bne.n	100100e0 <internal_at_ble_service_define+0x170>
100100b2:	e03a      	b.n	1001012a <internal_at_ble_service_define+0x1ba>
100100b4:	2201      	movs	r2, #1
100100b6:	09d9      	lsrs	r1, r3, #7
100100b8:	4011      	ands	r1, r2
100100ba:	05db      	lsls	r3, r3, #23
100100bc:	d501      	bpl.n	100100c2 <internal_at_ble_service_define+0x152>
100100be:	2302      	movs	r3, #2
100100c0:	4319      	orrs	r1, r3
100100c2:	4b8b      	ldr	r3, [pc, #556]	; (100102f0 <internal_at_ble_service_define+0x380>)
100100c4:	aa06      	add	r2, sp, #24
100100c6:	9300      	str	r3, [sp, #0]
100100c8:	230e      	movs	r3, #14
100100ca:	189b      	adds	r3, r3, r2
100100cc:	9301      	str	r3, [sp, #4]
100100ce:	4c85      	ldr	r4, [pc, #532]	; (100102e4 <internal_at_ble_service_define+0x374>)
100100d0:	0209      	lsls	r1, r1, #8
100100d2:	1c30      	adds	r0, r6, #0
100100d4:	2201      	movs	r2, #1
100100d6:	2302      	movs	r3, #2
100100d8:	47a0      	blx	r4
100100da:	1e04      	subs	r4, r0, #0
100100dc:	d0e5      	beq.n	100100aa <internal_at_ble_service_define+0x13a>
100100de:	e122      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
100100e0:	2380      	movs	r3, #128	; 0x80
100100e2:	882a      	ldrh	r2, [r5, #0]
100100e4:	7f2c      	ldrb	r4, [r5, #28]
100100e6:	005b      	lsls	r3, r3, #1
100100e8:	401a      	ands	r2, r3
100100ea:	1c20      	adds	r0, r4, #0
100100ec:	2101      	movs	r1, #1
100100ee:	2a00      	cmp	r2, #0
100100f0:	d000      	beq.n	100100f4 <internal_at_ble_service_define+0x184>
100100f2:	1c0a      	adds	r2, r1, #0
100100f4:	4b7f      	ldr	r3, [pc, #508]	; (100102f4 <internal_at_ble_service_define+0x384>)
100100f6:	4798      	blx	r3
100100f8:	2203      	movs	r2, #3
100100fa:	4022      	ands	r2, r4
100100fc:	3a03      	subs	r2, #3
100100fe:	4251      	negs	r1, r2
10010100:	4151      	adcs	r1, r2
10010102:	4b7d      	ldr	r3, [pc, #500]	; (100102f8 <internal_at_ble_service_define+0x388>)
10010104:	1c0a      	adds	r2, r1, #0
10010106:	9300      	str	r3, [sp, #0]
10010108:	1c2b      	adds	r3, r5, #0
1001010a:	0764      	lsls	r4, r4, #29
1001010c:	0fe4      	lsrs	r4, r4, #31
1001010e:	4322      	orrs	r2, r4
10010110:	03d2      	lsls	r2, r2, #15
10010112:	4310      	orrs	r0, r2
10010114:	3320      	adds	r3, #32
10010116:	b282      	uxth	r2, r0
10010118:	9301      	str	r3, [sp, #4]
1001011a:	4c72      	ldr	r4, [pc, #456]	; (100102e4 <internal_at_ble_service_define+0x374>)
1001011c:	1c30      	adds	r0, r6, #0
1001011e:	9904      	ldr	r1, [sp, #16]
10010120:	2302      	movs	r3, #2
10010122:	47a0      	blx	r4
10010124:	1e04      	subs	r4, r0, #0
10010126:	d000      	beq.n	1001012a <internal_at_ble_service_define+0x1ba>
10010128:	e0fd      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
1001012a:	2101      	movs	r1, #1
1001012c:	882b      	ldrh	r3, [r5, #0]
1001012e:	420b      	tst	r3, r1
10010130:	d011      	beq.n	10010156 <internal_at_ble_service_define+0x1e6>
10010132:	7fa8      	ldrb	r0, [r5, #30]
10010134:	4b6f      	ldr	r3, [pc, #444]	; (100102f4 <internal_at_ble_service_define+0x384>)
10010136:	2200      	movs	r2, #0
10010138:	4798      	blx	r3
1001013a:	4b70      	ldr	r3, [pc, #448]	; (100102fc <internal_at_ble_service_define+0x38c>)
1001013c:	1c02      	adds	r2, r0, #0
1001013e:	9300      	str	r3, [sp, #0]
10010140:	1c2b      	adds	r3, r5, #0
10010142:	3324      	adds	r3, #36	; 0x24
10010144:	9301      	str	r3, [sp, #4]
10010146:	4c67      	ldr	r4, [pc, #412]	; (100102e4 <internal_at_ble_service_define+0x374>)
10010148:	1c30      	adds	r0, r6, #0
1001014a:	496d      	ldr	r1, [pc, #436]	; (10010300 <internal_at_ble_service_define+0x390>)
1001014c:	2302      	movs	r3, #2
1001014e:	47a0      	blx	r4
10010150:	1e04      	subs	r4, r0, #0
10010152:	d000      	beq.n	10010156 <internal_at_ble_service_define+0x1e6>
10010154:	e0e7      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
10010156:	2330      	movs	r3, #48	; 0x30
10010158:	882a      	ldrh	r2, [r5, #0]
1001015a:	421a      	tst	r2, r3
1001015c:	d012      	beq.n	10010184 <internal_at_ble_service_define+0x214>
1001015e:	2101      	movs	r1, #1
10010160:	7f68      	ldrb	r0, [r5, #29]
10010162:	1c0a      	adds	r2, r1, #0
10010164:	4b63      	ldr	r3, [pc, #396]	; (100102f4 <internal_at_ble_service_define+0x384>)
10010166:	4798      	blx	r3
10010168:	4b66      	ldr	r3, [pc, #408]	; (10010304 <internal_at_ble_service_define+0x394>)
1001016a:	1c02      	adds	r2, r0, #0
1001016c:	9300      	str	r3, [sp, #0]
1001016e:	1c2b      	adds	r3, r5, #0
10010170:	3322      	adds	r3, #34	; 0x22
10010172:	9301      	str	r3, [sp, #4]
10010174:	4c5b      	ldr	r4, [pc, #364]	; (100102e4 <internal_at_ble_service_define+0x374>)
10010176:	1c30      	adds	r0, r6, #0
10010178:	4961      	ldr	r1, [pc, #388]	; (10010300 <internal_at_ble_service_define+0x390>)
1001017a:	2302      	movs	r3, #2
1001017c:	47a0      	blx	r4
1001017e:	1e04      	subs	r4, r0, #0
10010180:	d000      	beq.n	10010184 <internal_at_ble_service_define+0x214>
10010182:	e0d0      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
10010184:	69ab      	ldr	r3, [r5, #24]
10010186:	2b00      	cmp	r3, #0
10010188:	d00e      	beq.n	100101a8 <internal_at_ble_service_define+0x238>
1001018a:	4b5f      	ldr	r3, [pc, #380]	; (10010308 <internal_at_ble_service_define+0x398>)
1001018c:	aa06      	add	r2, sp, #24
1001018e:	9300      	str	r3, [sp, #0]
10010190:	230e      	movs	r3, #14
10010192:	189b      	adds	r3, r3, r2
10010194:	9301      	str	r3, [sp, #4]
10010196:	4c53      	ldr	r4, [pc, #332]	; (100102e4 <internal_at_ble_service_define+0x374>)
10010198:	1c30      	adds	r0, r6, #0
1001019a:	2107      	movs	r1, #7
1001019c:	2201      	movs	r2, #1
1001019e:	2302      	movs	r3, #2
100101a0:	47a0      	blx	r4
100101a2:	1e04      	subs	r4, r0, #0
100101a4:	d000      	beq.n	100101a8 <internal_at_ble_service_define+0x238>
100101a6:	e0be      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
100101a8:	9b02      	ldr	r3, [sp, #8]
100101aa:	353c      	adds	r5, #60	; 0x3c
100101ac:	3301      	adds	r3, #1
100101ae:	9302      	str	r3, [sp, #8]
100101b0:	e73a      	b.n	10010028 <internal_at_ble_service_define+0xb8>
100101b2:	1c30      	adds	r0, r6, #0
100101b4:	4b55      	ldr	r3, [pc, #340]	; (1001030c <internal_at_ble_service_define+0x39c>)
100101b6:	4798      	blx	r3
100101b8:	1e04      	subs	r4, r0, #0
100101ba:	d000      	beq.n	100101be <internal_at_ble_service_define+0x24e>
100101bc:	e0b3      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
100101be:	8833      	ldrh	r3, [r6, #0]
100101c0:	9a05      	ldr	r2, [sp, #20]
100101c2:	8013      	strh	r3, [r2, #0]
100101c4:	8836      	ldrh	r6, [r6, #0]
100101c6:	9b06      	ldr	r3, [sp, #24]
100101c8:	9a03      	ldr	r2, [sp, #12]
100101ca:	18f6      	adds	r6, r6, r3
100101cc:	b2b3      	uxth	r3, r6
100101ce:	9302      	str	r3, [sp, #8]
100101d0:	233c      	movs	r3, #60	; 0x3c
100101d2:	4353      	muls	r3, r2
100101d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
100101d6:	3314      	adds	r3, #20
100101d8:	18d3      	adds	r3, r2, r3
100101da:	9304      	str	r3, [sp, #16]
100101dc:	9b04      	ldr	r3, [sp, #16]
100101de:	429f      	cmp	r7, r3
100101e0:	d100      	bne.n	100101e4 <internal_at_ble_service_define+0x274>
100101e2:	e0a0      	b.n	10010326 <internal_at_ble_service_define+0x3b6>
100101e4:	9b02      	ldr	r3, [sp, #8]
100101e6:	1c9d      	adds	r5, r3, #2
100101e8:	1c3b      	adds	r3, r7, #0
100101ea:	b2ad      	uxth	r5, r5
100101ec:	3b14      	subs	r3, #20
100101ee:	801d      	strh	r5, [r3, #0]
100101f0:	9303      	str	r3, [sp, #12]
100101f2:	893b      	ldrh	r3, [r7, #8]
100101f4:	2b00      	cmp	r3, #0
100101f6:	d108      	bne.n	1001020a <internal_at_ble_service_define+0x29a>
100101f8:	23c0      	movs	r3, #192	; 0xc0
100101fa:	883a      	ldrh	r2, [r7, #0]
100101fc:	005b      	lsls	r3, r3, #1
100101fe:	421a      	tst	r2, r3
10010200:	d026      	beq.n	10010250 <internal_at_ble_service_define+0x2e0>
10010202:	9e02      	ldr	r6, [sp, #8]
10010204:	3603      	adds	r6, #3
10010206:	b2b5      	uxth	r5, r6
10010208:	e022      	b.n	10010250 <internal_at_ble_service_define+0x2e0>
1001020a:	2103      	movs	r1, #3
1001020c:	7b3b      	ldrb	r3, [r7, #12]
1001020e:	4019      	ands	r1, r3
10010210:	3903      	subs	r1, #3
10010212:	424a      	negs	r2, r1
10010214:	414a      	adcs	r2, r1
10010216:	0759      	lsls	r1, r3, #29
10010218:	0fc9      	lsrs	r1, r1, #31
1001021a:	4311      	orrs	r1, r2
1001021c:	03c9      	lsls	r1, r1, #15
1001021e:	897a      	ldrh	r2, [r7, #10]
10010220:	2900      	cmp	r1, #0
10010222:	d007      	beq.n	10010234 <internal_at_ble_service_define+0x2c4>
10010224:	6879      	ldr	r1, [r7, #4]
10010226:	2900      	cmp	r1, #0
10010228:	d100      	bne.n	1001022c <internal_at_ble_service_define+0x2bc>
1001022a:	4939      	ldr	r1, [pc, #228]	; (10010310 <internal_at_ble_service_define+0x3a0>)
1001022c:	1c28      	adds	r0, r5, #0
1001022e:	4e39      	ldr	r6, [pc, #228]	; (10010314 <internal_at_ble_service_define+0x3a4>)
10010230:	47b0      	blx	r6
10010232:	e00a      	b.n	1001024a <internal_at_ble_service_define+0x2da>
10010234:	1c28      	adds	r0, r5, #0
10010236:	4e37      	ldr	r6, [pc, #220]	; (10010314 <internal_at_ble_service_define+0x3a4>)
10010238:	47b0      	blx	r6
1001023a:	2800      	cmp	r0, #0
1001023c:	d172      	bne.n	10010324 <internal_at_ble_service_define+0x3b4>
1001023e:	9b03      	ldr	r3, [sp, #12]
10010240:	8939      	ldrh	r1, [r7, #8]
10010242:	8818      	ldrh	r0, [r3, #0]
10010244:	687a      	ldr	r2, [r7, #4]
10010246:	4b34      	ldr	r3, [pc, #208]	; (10010318 <internal_at_ble_service_define+0x3a8>)
10010248:	4798      	blx	r3
1001024a:	2800      	cmp	r0, #0
1001024c:	d0d4      	beq.n	100101f8 <internal_at_ble_service_define+0x288>
1001024e:	e069      	b.n	10010324 <internal_at_ble_service_define+0x3b4>
10010250:	8abb      	ldrh	r3, [r7, #20]
10010252:	2b00      	cmp	r3, #0
10010254:	d00a      	beq.n	1001026c <internal_at_ble_service_define+0x2fc>
10010256:	3501      	adds	r5, #1
10010258:	b2ad      	uxth	r5, r5
1001025a:	843d      	strh	r5, [r7, #32]
1001025c:	7f39      	ldrb	r1, [r7, #28]
1001025e:	8afb      	ldrh	r3, [r7, #22]
10010260:	1c28      	adds	r0, r5, #0
10010262:	693a      	ldr	r2, [r7, #16]
10010264:	4e2d      	ldr	r6, [pc, #180]	; (1001031c <internal_at_ble_service_define+0x3ac>)
10010266:	47b0      	blx	r6
10010268:	2800      	cmp	r0, #0
1001026a:	d15b      	bne.n	10010324 <internal_at_ble_service_define+0x3b4>
1001026c:	883b      	ldrh	r3, [r7, #0]
1001026e:	07db      	lsls	r3, r3, #31
10010270:	d50d      	bpl.n	1001028e <internal_at_ble_service_define+0x31e>
10010272:	2200      	movs	r2, #0
10010274:	3501      	adds	r5, #1
10010276:	b2ad      	uxth	r5, r5
10010278:	a909      	add	r1, sp, #36	; 0x24
1001027a:	84bd      	strh	r5, [r7, #36]	; 0x24
1001027c:	7fbb      	ldrb	r3, [r7, #30]
1001027e:	1c28      	adds	r0, r5, #0
10010280:	700a      	strb	r2, [r1, #0]
10010282:	704a      	strb	r2, [r1, #1]
10010284:	4e23      	ldr	r6, [pc, #140]	; (10010314 <internal_at_ble_service_define+0x3a4>)
10010286:	3202      	adds	r2, #2
10010288:	47b0      	blx	r6
1001028a:	2800      	cmp	r0, #0
1001028c:	d14a      	bne.n	10010324 <internal_at_ble_service_define+0x3b4>
1001028e:	2330      	movs	r3, #48	; 0x30
10010290:	883a      	ldrh	r2, [r7, #0]
10010292:	421a      	tst	r2, r3
10010294:	d00d      	beq.n	100102b2 <internal_at_ble_service_define+0x342>
10010296:	2200      	movs	r2, #0
10010298:	3501      	adds	r5, #1
1001029a:	b2ad      	uxth	r5, r5
1001029c:	a909      	add	r1, sp, #36	; 0x24
1001029e:	847d      	strh	r5, [r7, #34]	; 0x22
100102a0:	7f7b      	ldrb	r3, [r7, #29]
100102a2:	1c28      	adds	r0, r5, #0
100102a4:	700a      	strb	r2, [r1, #0]
100102a6:	704a      	strb	r2, [r1, #1]
100102a8:	4e1a      	ldr	r6, [pc, #104]	; (10010314 <internal_at_ble_service_define+0x3a4>)
100102aa:	3202      	adds	r2, #2
100102ac:	47b0      	blx	r6
100102ae:	2800      	cmp	r0, #0
100102b0:	d138      	bne.n	10010324 <internal_at_ble_service_define+0x3b4>
100102b2:	69b9      	ldr	r1, [r7, #24]
100102b4:	2900      	cmp	r1, #0
100102b6:	d006      	beq.n	100102c6 <internal_at_ble_service_define+0x356>
100102b8:	3501      	adds	r5, #1
100102ba:	b2ad      	uxth	r5, r5
100102bc:	1c28      	adds	r0, r5, #0
100102be:	4b18      	ldr	r3, [pc, #96]	; (10010320 <internal_at_ble_service_define+0x3b0>)
100102c0:	4798      	blx	r3
100102c2:	2800      	cmp	r0, #0
100102c4:	d12e      	bne.n	10010324 <internal_at_ble_service_define+0x3b4>
100102c6:	373c      	adds	r7, #60	; 0x3c
100102c8:	9502      	str	r5, [sp, #8]
100102ca:	e787      	b.n	100101dc <internal_at_ble_service_define+0x26c>
100102cc:	1001addc 	.word	0x1001addc
100102d0:	1001bd28 	.word	0x1001bd28
100102d4:	100166e1 	.word	0x100166e1
100102d8:	1000fca5 	.word	0x1000fca5
100102dc:	100166cf 	.word	0x100166cf
100102e0:	1001910e 	.word	0x1001910e
100102e4:	10012131 	.word	0x10012131
100102e8:	10019110 	.word	0x10019110
100102ec:	1000fd71 	.word	0x1000fd71
100102f0:	1001910c 	.word	0x1001910c
100102f4:	1000fd19 	.word	0x1000fd19
100102f8:	10019108 	.word	0x10019108
100102fc:	1001910a 	.word	0x1001910a
10010300:	00008002 	.word	0x00008002
10010304:	10019104 	.word	0x10019104
10010308:	10019106 	.word	0x10019106
1001030c:	10012025 	.word	0x10012025
10010310:	1001adc8 	.word	0x1001adc8
10010314:	1000fe39 	.word	0x1000fe39
10010318:	100121a1 	.word	0x100121a1
1001031c:	1000fef1 	.word	0x1000fef1
10010320:	1000fe0d 	.word	0x1000fe0d
10010324:	1c04      	adds	r4, r0, #0
10010326:	1c20      	adds	r0, r4, #0
10010328:	b00b      	add	sp, #44	; 0x2c
1001032a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001032c <initi_gatt_server_module>:
1001032c:	2300      	movs	r3, #0
1001032e:	4a07      	ldr	r2, [pc, #28]	; (1001034c <initi_gatt_server_module+0x20>)
10010330:	7013      	strb	r3, [r2, #0]
10010332:	4a07      	ldr	r2, [pc, #28]	; (10010350 <initi_gatt_server_module+0x24>)
10010334:	6013      	str	r3, [r2, #0]
10010336:	4a07      	ldr	r2, [pc, #28]	; (10010354 <initi_gatt_server_module+0x28>)
10010338:	6013      	str	r3, [r2, #0]
1001033a:	4a07      	ldr	r2, [pc, #28]	; (10010358 <initi_gatt_server_module+0x2c>)
1001033c:	6013      	str	r3, [r2, #0]
1001033e:	4a07      	ldr	r2, [pc, #28]	; (1001035c <initi_gatt_server_module+0x30>)
10010340:	6013      	str	r3, [r2, #0]
10010342:	4a07      	ldr	r2, [pc, #28]	; (10010360 <initi_gatt_server_module+0x34>)
10010344:	6013      	str	r3, [r2, #0]
10010346:	4a07      	ldr	r2, [pc, #28]	; (10010364 <initi_gatt_server_module+0x38>)
10010348:	6013      	str	r3, [r2, #0]
1001034a:	4770      	bx	lr
1001034c:	1001adc8 	.word	0x1001adc8
10010350:	1001add8 	.word	0x1001add8
10010354:	1001add4 	.word	0x1001add4
10010358:	1001adc4 	.word	0x1001adc4
1001035c:	1001add0 	.word	0x1001add0
10010360:	1001adcc 	.word	0x1001adcc
10010364:	1001addc 	.word	0x1001addc

10010368 <db_init>:
10010368:	4b0a      	ldr	r3, [pc, #40]	; (10010394 <db_init+0x2c>)
1001036a:	4a0b      	ldr	r2, [pc, #44]	; (10010398 <db_init+0x30>)
1001036c:	6018      	str	r0, [r3, #0]
1001036e:	084b      	lsrs	r3, r1, #1
10010370:	6013      	str	r3, [r2, #0]
10010372:	4a0a      	ldr	r2, [pc, #40]	; (1001039c <db_init+0x34>)
10010374:	18c3      	adds	r3, r0, r3
10010376:	6013      	str	r3, [r2, #0]
10010378:	4a09      	ldr	r2, [pc, #36]	; (100103a0 <db_init+0x38>)
1001037a:	1841      	adds	r1, r0, r1
1001037c:	6013      	str	r3, [r2, #0]
1001037e:	2303      	movs	r3, #3
10010380:	2200      	movs	r2, #0
10010382:	3103      	adds	r1, #3
10010384:	4399      	bics	r1, r3
10010386:	4b07      	ldr	r3, [pc, #28]	; (100103a4 <db_init+0x3c>)
10010388:	3904      	subs	r1, #4
1001038a:	6019      	str	r1, [r3, #0]
1001038c:	4b06      	ldr	r3, [pc, #24]	; (100103a8 <db_init+0x40>)
1001038e:	601a      	str	r2, [r3, #0]
10010390:	4770      	bx	lr
10010392:	46c0      	nop			; (mov r8, r8)
10010394:	1001addc 	.word	0x1001addc
10010398:	1001add8 	.word	0x1001add8
1001039c:	1001adc4 	.word	0x1001adc4
100103a0:	1001add0 	.word	0x1001add0
100103a4:	1001adcc 	.word	0x1001adcc
100103a8:	1001add4 	.word	0x1001add4

100103ac <at_ble_primary_service_define>:
100103ac:	b530      	push	{r4, r5, lr}
100103ae:	b085      	sub	sp, #20
100103b0:	ac08      	add	r4, sp, #32
100103b2:	cc20      	ldmia	r4!, {r5}
100103b4:	8824      	ldrh	r4, [r4, #0]
100103b6:	9500      	str	r5, [sp, #0]
100103b8:	9401      	str	r4, [sp, #4]
100103ba:	2401      	movs	r4, #1
100103bc:	9402      	str	r4, [sp, #8]
100103be:	4c02      	ldr	r4, [pc, #8]	; (100103c8 <at_ble_primary_service_define+0x1c>)
100103c0:	47a0      	blx	r4
100103c2:	b005      	add	sp, #20
100103c4:	bd30      	pop	{r4, r5, pc}
100103c6:	46c0      	nop			; (mov r8, r8)
100103c8:	1000ff71 	.word	0x1000ff71

100103cc <at_ble_characteristic_value_set>:
100103cc:	b570      	push	{r4, r5, r6, lr}
100103ce:	4b0b      	ldr	r3, [pc, #44]	; (100103fc <at_ble_characteristic_value_set+0x30>)
100103d0:	1c06      	adds	r6, r0, #0
100103d2:	1c0c      	adds	r4, r1, #0
100103d4:	1c15      	adds	r5, r2, #0
100103d6:	4798      	blx	r3
100103d8:	2800      	cmp	r0, #0
100103da:	d008      	beq.n	100103ee <at_ble_characteristic_value_set+0x22>
100103dc:	6880      	ldr	r0, [r0, #8]
100103de:	2800      	cmp	r0, #0
100103e0:	d005      	beq.n	100103ee <at_ble_characteristic_value_set+0x22>
100103e2:	1c21      	adds	r1, r4, #0
100103e4:	1c2a      	adds	r2, r5, #0
100103e6:	4b06      	ldr	r3, [pc, #24]	; (10010400 <at_ble_characteristic_value_set+0x34>)
100103e8:	4798      	blx	r3
100103ea:	2000      	movs	r0, #0
100103ec:	e004      	b.n	100103f8 <at_ble_characteristic_value_set+0x2c>
100103ee:	1c30      	adds	r0, r6, #0
100103f0:	1c29      	adds	r1, r5, #0
100103f2:	1c22      	adds	r2, r4, #0
100103f4:	4b03      	ldr	r3, [pc, #12]	; (10010404 <at_ble_characteristic_value_set+0x38>)
100103f6:	4798      	blx	r3
100103f8:	bd70      	pop	{r4, r5, r6, pc}
100103fa:	46c0      	nop			; (mov r8, r8)
100103fc:	1000fcd9 	.word	0x1000fcd9
10010400:	100166cf 	.word	0x100166cf
10010404:	100121a1 	.word	0x100121a1

10010408 <at_ble_characteristic_value_get>:
10010408:	b570      	push	{r4, r5, r6, lr}
1001040a:	4b0c      	ldr	r3, [pc, #48]	; (1001043c <at_ble_characteristic_value_get+0x34>)
1001040c:	1c06      	adds	r6, r0, #0
1001040e:	1c0c      	adds	r4, r1, #0
10010410:	1c15      	adds	r5, r2, #0
10010412:	4798      	blx	r3
10010414:	2800      	cmp	r0, #0
10010416:	d00b      	beq.n	10010430 <at_ble_characteristic_value_get+0x28>
10010418:	6883      	ldr	r3, [r0, #8]
1001041a:	2b00      	cmp	r3, #0
1001041c:	d008      	beq.n	10010430 <at_ble_characteristic_value_get+0x28>
1001041e:	8883      	ldrh	r3, [r0, #4]
10010420:	802b      	strh	r3, [r5, #0]
10010422:	8882      	ldrh	r2, [r0, #4]
10010424:	6881      	ldr	r1, [r0, #8]
10010426:	4b06      	ldr	r3, [pc, #24]	; (10010440 <at_ble_characteristic_value_get+0x38>)
10010428:	1c20      	adds	r0, r4, #0
1001042a:	4798      	blx	r3
1001042c:	2000      	movs	r0, #0
1001042e:	e004      	b.n	1001043a <at_ble_characteristic_value_get+0x32>
10010430:	1c30      	adds	r0, r6, #0
10010432:	1c29      	adds	r1, r5, #0
10010434:	1c22      	adds	r2, r4, #0
10010436:	4b03      	ldr	r3, [pc, #12]	; (10010444 <at_ble_characteristic_value_get+0x3c>)
10010438:	4798      	blx	r3
1001043a:	bd70      	pop	{r4, r5, r6, pc}
1001043c:	1000fcd9 	.word	0x1000fcd9
10010440:	100166cf 	.word	0x100166cf
10010444:	1001222d 	.word	0x1001222d

10010448 <at_ble_write_authorize_reply>:
10010448:	b5f0      	push	{r4, r5, r6, r7, lr}
1001044a:	b085      	sub	sp, #20
1001044c:	1c04      	adds	r4, r0, #0
1001044e:	9101      	str	r1, [sp, #4]
10010450:	2900      	cmp	r1, #0
10010452:	d128      	bne.n	100104a6 <at_ble_write_authorize_reply+0x5e>
10010454:	8843      	ldrh	r3, [r0, #2]
10010456:	1c27      	adds	r7, r4, #0
10010458:	9300      	str	r3, [sp, #0]
1001045a:	1c18      	adds	r0, r3, #0
1001045c:	4b16      	ldr	r3, [pc, #88]	; (100104b8 <at_ble_write_authorize_reply+0x70>)
1001045e:	4798      	blx	r3
10010460:	3708      	adds	r7, #8
10010462:	2800      	cmp	r0, #0
10010464:	d009      	beq.n	1001047a <at_ble_write_authorize_reply+0x32>
10010466:	6880      	ldr	r0, [r0, #8]
10010468:	2800      	cmp	r0, #0
1001046a:	d006      	beq.n	1001047a <at_ble_write_authorize_reply+0x32>
1001046c:	88a3      	ldrh	r3, [r4, #4]
1001046e:	88e2      	ldrh	r2, [r4, #6]
10010470:	18c0      	adds	r0, r0, r3
10010472:	1c39      	adds	r1, r7, #0
10010474:	4b11      	ldr	r3, [pc, #68]	; (100104bc <at_ble_write_authorize_reply+0x74>)
10010476:	4798      	blx	r3
10010478:	e015      	b.n	100104a6 <at_ble_write_authorize_reply+0x5e>
1001047a:	ab02      	add	r3, sp, #8
1001047c:	1d9e      	adds	r6, r3, #6
1001047e:	2300      	movs	r3, #0
10010480:	4d0f      	ldr	r5, [pc, #60]	; (100104c0 <at_ble_write_authorize_reply+0x78>)
10010482:	8033      	strh	r3, [r6, #0]
10010484:	6829      	ldr	r1, [r5, #0]
10010486:	1c32      	adds	r2, r6, #0
10010488:	4b0e      	ldr	r3, [pc, #56]	; (100104c4 <at_ble_write_authorize_reply+0x7c>)
1001048a:	9800      	ldr	r0, [sp, #0]
1001048c:	4798      	blx	r3
1001048e:	682b      	ldr	r3, [r5, #0]
10010490:	88a0      	ldrh	r0, [r4, #4]
10010492:	88e2      	ldrh	r2, [r4, #6]
10010494:	1818      	adds	r0, r3, r0
10010496:	1c39      	adds	r1, r7, #0
10010498:	4b08      	ldr	r3, [pc, #32]	; (100104bc <at_ble_write_authorize_reply+0x74>)
1001049a:	4798      	blx	r3
1001049c:	8860      	ldrh	r0, [r4, #2]
1001049e:	8832      	ldrh	r2, [r6, #0]
100104a0:	6829      	ldr	r1, [r5, #0]
100104a2:	4b09      	ldr	r3, [pc, #36]	; (100104c8 <at_ble_write_authorize_reply+0x80>)
100104a4:	4798      	blx	r3
100104a6:	8860      	ldrh	r0, [r4, #2]
100104a8:	8821      	ldrh	r1, [r4, #0]
100104aa:	9a01      	ldr	r2, [sp, #4]
100104ac:	4b07      	ldr	r3, [pc, #28]	; (100104cc <at_ble_write_authorize_reply+0x84>)
100104ae:	4798      	blx	r3
100104b0:	2000      	movs	r0, #0
100104b2:	b005      	add	sp, #20
100104b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104b6:	46c0      	nop			; (mov r8, r8)
100104b8:	1000fcd9 	.word	0x1000fcd9
100104bc:	100166cf 	.word	0x100166cf
100104c0:	10019334 	.word	0x10019334
100104c4:	10010409 	.word	0x10010409
100104c8:	100103cd 	.word	0x100103cd
100104cc:	10011ca5 	.word	0x10011ca5

100104d0 <gatts_handle_read_req>:
100104d0:	b538      	push	{r3, r4, r5, lr}
100104d2:	1c0c      	adds	r4, r1, #0
100104d4:	4b07      	ldr	r3, [pc, #28]	; (100104f4 <gatts_handle_read_req+0x24>)
100104d6:	4798      	blx	r3
100104d8:	8865      	ldrh	r5, [r4, #2]
100104da:	4b07      	ldr	r3, [pc, #28]	; (100104f8 <gatts_handle_read_req+0x28>)
100104dc:	1c28      	adds	r0, r5, #0
100104de:	4798      	blx	r3
100104e0:	7883      	ldrb	r3, [r0, #2]
100104e2:	2026      	movs	r0, #38	; 0x26
100104e4:	07db      	lsls	r3, r3, #31
100104e6:	d404      	bmi.n	100104f2 <gatts_handle_read_req+0x22>
100104e8:	8820      	ldrh	r0, [r4, #0]
100104ea:	1c29      	adds	r1, r5, #0
100104ec:	4b03      	ldr	r3, [pc, #12]	; (100104fc <gatts_handle_read_req+0x2c>)
100104ee:	4798      	blx	r3
100104f0:	203b      	movs	r0, #59	; 0x3b
100104f2:	bd38      	pop	{r3, r4, r5, pc}
100104f4:	10011be9 	.word	0x10011be9
100104f8:	1000fcd9 	.word	0x1000fcd9
100104fc:	1000ff41 	.word	0x1000ff41

10010500 <gatts_handle_att_info_req>:
10010500:	b538      	push	{r3, r4, r5, lr}
10010502:	1c0d      	adds	r5, r1, #0
10010504:	4b0a      	ldr	r3, [pc, #40]	; (10010530 <gatts_handle_att_info_req+0x30>)
10010506:	1c14      	adds	r4, r2, #0
10010508:	4798      	blx	r3
1001050a:	882d      	ldrh	r5, [r5, #0]
1001050c:	4b09      	ldr	r3, [pc, #36]	; (10010534 <gatts_handle_att_info_req+0x34>)
1001050e:	1c28      	adds	r0, r5, #0
10010510:	4798      	blx	r3
10010512:	0a22      	lsrs	r2, r4, #8
10010514:	1c03      	adds	r3, r0, #0
10010516:	4c08      	ldr	r4, [pc, #32]	; (10010538 <gatts_handle_att_info_req+0x38>)
10010518:	b291      	uxth	r1, r2
1001051a:	2800      	cmp	r0, #0
1001051c:	d003      	beq.n	10010526 <gatts_handle_att_info_req+0x26>
1001051e:	8882      	ldrh	r2, [r0, #4]
10010520:	2300      	movs	r3, #0
10010522:	1c28      	adds	r0, r5, #0
10010524:	e001      	b.n	1001052a <gatts_handle_att_info_req+0x2a>
10010526:	1c28      	adds	r0, r5, #0
10010528:	2201      	movs	r2, #1
1001052a:	47a0      	blx	r4
1001052c:	203b      	movs	r0, #59	; 0x3b
1001052e:	bd38      	pop	{r3, r4, r5, pc}
10010530:	10011c2d 	.word	0x10011c2d
10010534:	1000fcd9 	.word	0x1000fcd9
10010538:	10011ce9 	.word	0x10011ce9

1001053c <gatts_handle_write_req>:
1001053c:	b510      	push	{r4, lr}
1001053e:	1c14      	adds	r4, r2, #0
10010540:	4b07      	ldr	r3, [pc, #28]	; (10010560 <gatts_handle_write_req+0x24>)
10010542:	4798      	blx	r3
10010544:	4b07      	ldr	r3, [pc, #28]	; (10010564 <gatts_handle_write_req+0x28>)
10010546:	8860      	ldrh	r0, [r4, #2]
10010548:	4798      	blx	r3
1001054a:	2302      	movs	r3, #2
1001054c:	7881      	ldrb	r1, [r0, #2]
1001054e:	2022      	movs	r0, #34	; 0x22
10010550:	4019      	ands	r1, r3
10010552:	d103      	bne.n	1001055c <gatts_handle_write_req+0x20>
10010554:	1c20      	adds	r0, r4, #0
10010556:	4b04      	ldr	r3, [pc, #16]	; (10010568 <gatts_handle_write_req+0x2c>)
10010558:	4798      	blx	r3
1001055a:	201f      	movs	r0, #31
1001055c:	bd10      	pop	{r4, pc}
1001055e:	46c0      	nop			; (mov r8, r8)
10010560:	10011bf5 	.word	0x10011bf5
10010564:	1000fcd9 	.word	0x1000fcd9
10010568:	10010449 	.word	0x10010449

1001056c <at_ble_notification_send>:
1001056c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001056e:	4d17      	ldr	r5, [pc, #92]	; (100105cc <at_ble_notification_send+0x60>)
10010570:	4c17      	ldr	r4, [pc, #92]	; (100105d0 <at_ble_notification_send+0x64>)
10010572:	682a      	ldr	r2, [r5, #0]
10010574:	44a5      	add	sp, r4
10010576:	23d2      	movs	r3, #210	; 0xd2
10010578:	2a04      	cmp	r2, #4
1001057a:	d822      	bhi.n	100105c2 <at_ble_notification_send+0x56>
1001057c:	1c06      	adds	r6, r0, #0
1001057e:	4b15      	ldr	r3, [pc, #84]	; (100105d4 <at_ble_notification_send+0x68>)
10010580:	1c08      	adds	r0, r1, #0
10010582:	1c0c      	adds	r4, r1, #0
10010584:	4798      	blx	r3
10010586:	2800      	cmp	r0, #0
10010588:	d008      	beq.n	1001059c <at_ble_notification_send+0x30>
1001058a:	6883      	ldr	r3, [r0, #8]
1001058c:	2b00      	cmp	r3, #0
1001058e:	d005      	beq.n	1001059c <at_ble_notification_send+0x30>
10010590:	8882      	ldrh	r2, [r0, #4]
10010592:	1c21      	adds	r1, r4, #0
10010594:	9200      	str	r2, [sp, #0]
10010596:	2012      	movs	r0, #18
10010598:	1c32      	adds	r2, r6, #0
1001059a:	e00c      	b.n	100105b6 <at_ble_notification_send+0x4a>
1001059c:	270e      	movs	r7, #14
1001059e:	446f      	add	r7, sp
100105a0:	1c39      	adds	r1, r7, #0
100105a2:	aa04      	add	r2, sp, #16
100105a4:	4b0c      	ldr	r3, [pc, #48]	; (100105d8 <at_ble_notification_send+0x6c>)
100105a6:	1c20      	adds	r0, r4, #0
100105a8:	4798      	blx	r3
100105aa:	2012      	movs	r0, #18
100105ac:	1c21      	adds	r1, r4, #0
100105ae:	1c32      	adds	r2, r6, #0
100105b0:	883b      	ldrh	r3, [r7, #0]
100105b2:	9300      	str	r3, [sp, #0]
100105b4:	ab04      	add	r3, sp, #16
100105b6:	4c09      	ldr	r4, [pc, #36]	; (100105dc <at_ble_notification_send+0x70>)
100105b8:	47a0      	blx	r4
100105ba:	682b      	ldr	r3, [r5, #0]
100105bc:	3301      	adds	r3, #1
100105be:	602b      	str	r3, [r5, #0]
100105c0:	2300      	movs	r3, #0
100105c2:	1c18      	adds	r0, r3, #0
100105c4:	2385      	movs	r3, #133	; 0x85
100105c6:	009b      	lsls	r3, r3, #2
100105c8:	449d      	add	sp, r3
100105ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105cc:	1001ae68 	.word	0x1001ae68
100105d0:	fffffdec 	.word	0xfffffdec
100105d4:	1000fcd9 	.word	0x1000fcd9
100105d8:	1001222d 	.word	0x1001222d
100105dc:	10011d31 	.word	0x10011d31

100105e0 <init_l2cc_task_module>:
100105e0:	220a      	movs	r2, #10
100105e2:	4b01      	ldr	r3, [pc, #4]	; (100105e8 <init_l2cc_task_module+0x8>)
100105e4:	701a      	strb	r2, [r3, #0]
100105e6:	4770      	bx	lr
100105e8:	10019330 	.word	0x10019330

100105ec <l2cc_data_send_rsp_handler>:
100105ec:	b510      	push	{r4, lr}
100105ee:	7802      	ldrb	r2, [r0, #0]
100105f0:	700a      	strb	r2, [r1, #0]
100105f2:	7883      	ldrb	r3, [r0, #2]
100105f4:	7844      	ldrb	r4, [r0, #1]
100105f6:	021b      	lsls	r3, r3, #8
100105f8:	4323      	orrs	r3, r4
100105fa:	804b      	strh	r3, [r1, #2]
100105fc:	7903      	ldrb	r3, [r0, #4]
100105fe:	78c0      	ldrb	r0, [r0, #3]
10010600:	021b      	lsls	r3, r3, #8
10010602:	4303      	orrs	r3, r0
10010604:	808b      	strh	r3, [r1, #4]
10010606:	2a00      	cmp	r2, #0
10010608:	d103      	bne.n	10010612 <l2cc_data_send_rsp_handler+0x26>
1001060a:	4a02      	ldr	r2, [pc, #8]	; (10010614 <l2cc_data_send_rsp_handler+0x28>)
1001060c:	7813      	ldrb	r3, [r2, #0]
1001060e:	3301      	adds	r3, #1
10010610:	7013      	strb	r3, [r2, #0]
10010612:	bd10      	pop	{r4, pc}
10010614:	10019330 	.word	0x10019330

10010618 <l2cc_data_received_handler>:
10010618:	b508      	push	{r3, lr}
1001061a:	1c03      	adds	r3, r0, #0
1001061c:	7842      	ldrb	r2, [r0, #1]
1001061e:	7800      	ldrb	r0, [r0, #0]
10010620:	0212      	lsls	r2, r2, #8
10010622:	4302      	orrs	r2, r0
10010624:	800a      	strh	r2, [r1, #0]
10010626:	78da      	ldrb	r2, [r3, #3]
10010628:	7898      	ldrb	r0, [r3, #2]
1001062a:	0212      	lsls	r2, r2, #8
1001062c:	4302      	orrs	r2, r0
1001062e:	804a      	strh	r2, [r1, #2]
10010630:	795a      	ldrb	r2, [r3, #5]
10010632:	7918      	ldrb	r0, [r3, #4]
10010634:	0212      	lsls	r2, r2, #8
10010636:	4302      	orrs	r2, r0
10010638:	808a      	strh	r2, [r1, #4]
1001063a:	1d88      	adds	r0, r1, #6
1001063c:	1d99      	adds	r1, r3, #6
1001063e:	4b01      	ldr	r3, [pc, #4]	; (10010644 <l2cc_data_received_handler+0x2c>)
10010640:	4798      	blx	r3
10010642:	bd08      	pop	{r3, pc}
10010644:	100166cf 	.word	0x100166cf

10010648 <at_ble_authenticate>:
10010648:	b5f0      	push	{r4, r5, r6, r7, lr}
1001064a:	1c0c      	adds	r4, r1, #0
1001064c:	211f      	movs	r1, #31
1001064e:	b08b      	sub	sp, #44	; 0x2c
10010650:	9307      	str	r3, [sp, #28]
10010652:	ab02      	add	r3, sp, #8
10010654:	18c9      	adds	r1, r1, r3
10010656:	230f      	movs	r3, #15
10010658:	700b      	strb	r3, [r1, #0]
1001065a:	4b40      	ldr	r3, [pc, #256]	; (1001075c <at_ble_authenticate+0x114>)
1001065c:	1c05      	adds	r5, r0, #0
1001065e:	1c16      	adds	r6, r2, #0
10010660:	4798      	blx	r3
10010662:	1c07      	adds	r7, r0, #0
10010664:	2001      	movs	r0, #1
10010666:	2f07      	cmp	r7, #7
10010668:	d875      	bhi.n	10010756 <at_ble_authenticate+0x10e>
1001066a:	2c00      	cmp	r4, #0
1001066c:	d113      	bne.n	10010696 <at_ble_authenticate+0x4e>
1001066e:	2312      	movs	r3, #18
10010670:	435f      	muls	r7, r3
10010672:	4b3b      	ldr	r3, [pc, #236]	; (10010760 <at_ble_authenticate+0x118>)
10010674:	5cfb      	ldrb	r3, [r7, r3]
10010676:	4283      	cmp	r3, r0
10010678:	d001      	beq.n	1001067e <at_ble_authenticate+0x36>
1001067a:	20cf      	movs	r0, #207	; 0xcf
1001067c:	e06b      	b.n	10010756 <at_ble_authenticate+0x10e>
1001067e:	9504      	str	r5, [sp, #16]
10010680:	9400      	str	r4, [sp, #0]
10010682:	9401      	str	r4, [sp, #4]
10010684:	9402      	str	r4, [sp, #8]
10010686:	9403      	str	r4, [sp, #12]
10010688:	1c20      	adds	r0, r4, #0
1001068a:	1c21      	adds	r1, r4, #0
1001068c:	1c22      	adds	r2, r4, #0
1001068e:	1c23      	adds	r3, r4, #0
10010690:	4d34      	ldr	r5, [pc, #208]	; (10010764 <at_ble_authenticate+0x11c>)
10010692:	47a8      	blx	r5
10010694:	e05e      	b.n	10010754 <at_ble_authenticate+0x10c>
10010696:	7922      	ldrb	r2, [r4, #4]
10010698:	2a06      	cmp	r2, #6
1001069a:	d9ee      	bls.n	1001067a <at_ble_authenticate+0x32>
1001069c:	7963      	ldrb	r3, [r4, #5]
1001069e:	2b10      	cmp	r3, #16
100106a0:	d8eb      	bhi.n	1001067a <at_ble_authenticate+0x32>
100106a2:	429a      	cmp	r2, r3
100106a4:	d8e9      	bhi.n	1001067a <at_ble_authenticate+0x32>
100106a6:	7a23      	ldrb	r3, [r4, #8]
100106a8:	2b04      	cmp	r3, #4
100106aa:	d8e6      	bhi.n	1001067a <at_ble_authenticate+0x32>
100106ac:	79a3      	ldrb	r3, [r4, #6]
100106ae:	2b07      	cmp	r3, #7
100106b0:	d8e3      	bhi.n	1001067a <at_ble_authenticate+0x32>
100106b2:	79e3      	ldrb	r3, [r4, #7]
100106b4:	2b07      	cmp	r3, #7
100106b6:	d8e0      	bhi.n	1001067a <at_ble_authenticate+0x32>
100106b8:	78a3      	ldrb	r3, [r4, #2]
100106ba:	2b00      	cmp	r3, #0
100106bc:	d006      	beq.n	100106cc <at_ble_authenticate+0x84>
100106be:	2e00      	cmp	r6, #0
100106c0:	d0db      	beq.n	1001067a <at_ble_authenticate+0x32>
100106c2:	4829      	ldr	r0, [pc, #164]	; (10010768 <at_ble_authenticate+0x120>)
100106c4:	1c31      	adds	r1, r6, #0
100106c6:	221c      	movs	r2, #28
100106c8:	4b28      	ldr	r3, [pc, #160]	; (1001076c <at_ble_authenticate+0x124>)
100106ca:	4798      	blx	r3
100106cc:	9b07      	ldr	r3, [sp, #28]
100106ce:	2b00      	cmp	r3, #0
100106d0:	d005      	beq.n	100106de <at_ble_authenticate+0x96>
100106d2:	4827      	ldr	r0, [pc, #156]	; (10010770 <at_ble_authenticate+0x128>)
100106d4:	1c19      	adds	r1, r3, #0
100106d6:	309a      	adds	r0, #154	; 0x9a
100106d8:	2210      	movs	r2, #16
100106da:	4b24      	ldr	r3, [pc, #144]	; (1001076c <at_ble_authenticate+0x124>)
100106dc:	4798      	blx	r3
100106de:	7863      	ldrb	r3, [r4, #1]
100106e0:	78a2      	ldrb	r2, [r4, #2]
100106e2:	009b      	lsls	r3, r3, #2
100106e4:	4313      	orrs	r3, r2
100106e6:	2212      	movs	r2, #18
100106e8:	4357      	muls	r7, r2
100106ea:	4a1d      	ldr	r2, [pc, #116]	; (10010760 <at_ble_authenticate+0x118>)
100106ec:	b2db      	uxtb	r3, r3
100106ee:	5cba      	ldrb	r2, [r7, r2]
100106f0:	2a00      	cmp	r2, #0
100106f2:	d116      	bne.n	10010722 <at_ble_authenticate+0xda>
100106f4:	79a0      	ldrb	r0, [r4, #6]
100106f6:	0742      	lsls	r2, r0, #29
100106f8:	d502      	bpl.n	10010700 <at_ble_authenticate+0xb8>
100106fa:	9a07      	ldr	r2, [sp, #28]
100106fc:	2a00      	cmp	r2, #0
100106fe:	d0bc      	beq.n	1001067a <at_ble_authenticate+0x32>
10010700:	07c2      	lsls	r2, r0, #31
10010702:	d501      	bpl.n	10010708 <at_ble_authenticate+0xc0>
10010704:	2e00      	cmp	r6, #0
10010706:	d0b8      	beq.n	1001067a <at_ble_authenticate+0x32>
10010708:	7966      	ldrb	r6, [r4, #5]
1001070a:	7821      	ldrb	r1, [r4, #0]
1001070c:	78e2      	ldrb	r2, [r4, #3]
1001070e:	9600      	str	r6, [sp, #0]
10010710:	9001      	str	r0, [sp, #4]
10010712:	79e0      	ldrb	r0, [r4, #7]
10010714:	9002      	str	r0, [sp, #8]
10010716:	7a20      	ldrb	r0, [r4, #8]
10010718:	4c16      	ldr	r4, [pc, #88]	; (10010774 <at_ble_authenticate+0x12c>)
1001071a:	9003      	str	r0, [sp, #12]
1001071c:	1c28      	adds	r0, r5, #0
1001071e:	47a0      	blx	r4
10010720:	e018      	b.n	10010754 <at_ble_authenticate+0x10c>
10010722:	2a01      	cmp	r2, #1
10010724:	d1a9      	bne.n	1001067a <at_ble_authenticate+0x32>
10010726:	79e0      	ldrb	r0, [r4, #7]
10010728:	0742      	lsls	r2, r0, #29
1001072a:	d502      	bpl.n	10010732 <at_ble_authenticate+0xea>
1001072c:	9a07      	ldr	r2, [sp, #28]
1001072e:	2a00      	cmp	r2, #0
10010730:	d0a3      	beq.n	1001067a <at_ble_authenticate+0x32>
10010732:	07c2      	lsls	r2, r0, #31
10010734:	d501      	bpl.n	1001073a <at_ble_authenticate+0xf2>
10010736:	2e00      	cmp	r6, #0
10010738:	d09f      	beq.n	1001067a <at_ble_authenticate+0x32>
1001073a:	7966      	ldrb	r6, [r4, #5]
1001073c:	7821      	ldrb	r1, [r4, #0]
1001073e:	78e2      	ldrb	r2, [r4, #3]
10010740:	9600      	str	r6, [sp, #0]
10010742:	79a6      	ldrb	r6, [r4, #6]
10010744:	9002      	str	r0, [sp, #8]
10010746:	9601      	str	r6, [sp, #4]
10010748:	7a20      	ldrb	r0, [r4, #8]
1001074a:	9504      	str	r5, [sp, #16]
1001074c:	9003      	str	r0, [sp, #12]
1001074e:	4c05      	ldr	r4, [pc, #20]	; (10010764 <at_ble_authenticate+0x11c>)
10010750:	2001      	movs	r0, #1
10010752:	47a0      	blx	r4
10010754:	2000      	movs	r0, #0
10010756:	b00b      	add	sp, #44	; 0x2c
10010758:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001075a:	46c0      	nop			; (mov r8, r8)
1001075c:	10010b49 	.word	0x10010b49
10010760:	1001bd2a 	.word	0x1001bd2a
10010764:	100110b9 	.word	0x100110b9
10010768:	1001be38 	.word	0x1001be38
1001076c:	100166cf 	.word	0x100166cf
10010770:	1001bdba 	.word	0x1001bdba
10010774:	10010e99 	.word	0x10010e99

10010778 <at_ble_pair_key_reply>:
10010778:	b5f0      	push	{r4, r5, r6, r7, lr}
1001077a:	b085      	sub	sp, #20
1001077c:	1c05      	adds	r5, r0, #0
1001077e:	1c0c      	adds	r4, r1, #0
10010780:	1c16      	adds	r6, r2, #0
10010782:	2100      	movs	r1, #0
10010784:	4668      	mov	r0, sp
10010786:	2210      	movs	r2, #16
10010788:	4b18      	ldr	r3, [pc, #96]	; (100107ec <at_ble_pair_key_reply+0x74>)
1001078a:	4798      	blx	r3
1001078c:	2101      	movs	r1, #1
1001078e:	2e00      	cmp	r6, #0
10010790:	d101      	bne.n	10010796 <at_ble_pair_key_reply+0x1e>
10010792:	1c31      	adds	r1, r6, #0
10010794:	466e      	mov	r6, sp
10010796:	2c00      	cmp	r4, #0
10010798:	d116      	bne.n	100107c8 <at_ble_pair_key_reply+0x50>
1001079a:	2701      	movs	r7, #1
1001079c:	1c23      	adds	r3, r4, #0
1001079e:	1d70      	adds	r0, r6, #5
100107a0:	3e01      	subs	r6, #1
100107a2:	7802      	ldrb	r2, [r0, #0]
100107a4:	3801      	subs	r0, #1
100107a6:	3a30      	subs	r2, #48	; 0x30
100107a8:	437a      	muls	r2, r7
100107aa:	189b      	adds	r3, r3, r2
100107ac:	220a      	movs	r2, #10
100107ae:	4357      	muls	r7, r2
100107b0:	42b0      	cmp	r0, r6
100107b2:	d1f6      	bne.n	100107a2 <at_ble_pair_key_reply+0x2a>
100107b4:	466a      	mov	r2, sp
100107b6:	4668      	mov	r0, sp
100107b8:	7013      	strb	r3, [r2, #0]
100107ba:	0a1a      	lsrs	r2, r3, #8
100107bc:	7042      	strb	r2, [r0, #1]
100107be:	0c1a      	lsrs	r2, r3, #16
100107c0:	0e1b      	lsrs	r3, r3, #24
100107c2:	7082      	strb	r2, [r0, #2]
100107c4:	70c3      	strb	r3, [r0, #3]
100107c6:	e009      	b.n	100107dc <at_ble_pair_key_reply+0x64>
100107c8:	20cf      	movs	r0, #207	; 0xcf
100107ca:	2c01      	cmp	r4, #1
100107cc:	d10c      	bne.n	100107e8 <at_ble_pair_key_reply+0x70>
100107ce:	2300      	movs	r3, #0
100107d0:	4668      	mov	r0, sp
100107d2:	5cf2      	ldrb	r2, [r6, r3]
100107d4:	54c2      	strb	r2, [r0, r3]
100107d6:	3301      	adds	r3, #1
100107d8:	2b10      	cmp	r3, #16
100107da:	d1f9      	bne.n	100107d0 <at_ble_pair_key_reply+0x58>
100107dc:	2004      	movs	r0, #4
100107de:	466a      	mov	r2, sp
100107e0:	1c2b      	adds	r3, r5, #0
100107e2:	4c03      	ldr	r4, [pc, #12]	; (100107f0 <at_ble_pair_key_reply+0x78>)
100107e4:	47a0      	blx	r4
100107e6:	2000      	movs	r0, #0
100107e8:	b005      	add	sp, #20
100107ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107ec:	100166e1 	.word	0x100166e1
100107f0:	10011135 	.word	0x10011135

100107f4 <at_ble_send_slave_sec_request>:
100107f4:	b570      	push	{r4, r5, r6, lr}
100107f6:	4b0c      	ldr	r3, [pc, #48]	; (10010828 <at_ble_send_slave_sec_request+0x34>)
100107f8:	1c0e      	adds	r6, r1, #0
100107fa:	2100      	movs	r1, #0
100107fc:	1c05      	adds	r5, r0, #0
100107fe:	1c14      	adds	r4, r2, #0
10010800:	4798      	blx	r3
10010802:	2301      	movs	r3, #1
10010804:	2807      	cmp	r0, #7
10010806:	d80d      	bhi.n	10010824 <at_ble_send_slave_sec_request+0x30>
10010808:	3311      	adds	r3, #17
1001080a:	4358      	muls	r0, r3
1001080c:	4b07      	ldr	r3, [pc, #28]	; (1001082c <at_ble_send_slave_sec_request+0x38>)
1001080e:	5cc2      	ldrb	r2, [r0, r3]
10010810:	23e0      	movs	r3, #224	; 0xe0
10010812:	2a01      	cmp	r2, #1
10010814:	d106      	bne.n	10010824 <at_ble_send_slave_sec_request+0x30>
10010816:	00b1      	lsls	r1, r6, #2
10010818:	430c      	orrs	r4, r1
1001081a:	4b05      	ldr	r3, [pc, #20]	; (10010830 <at_ble_send_slave_sec_request+0x3c>)
1001081c:	b2e1      	uxtb	r1, r4
1001081e:	1c28      	adds	r0, r5, #0
10010820:	4798      	blx	r3
10010822:	2300      	movs	r3, #0
10010824:	1c18      	adds	r0, r3, #0
10010826:	bd70      	pop	{r4, r5, r6, pc}
10010828:	10010b49 	.word	0x10010b49
1001082c:	1001bd2a 	.word	0x1001bd2a
10010830:	10011185 	.word	0x10011185

10010834 <at_ble_encryption_start>:
10010834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010836:	23cf      	movs	r3, #207	; 0xcf
10010838:	2900      	cmp	r1, #0
1001083a:	d02b      	beq.n	10010894 <at_ble_encryption_start+0x60>
1001083c:	2a05      	cmp	r2, #5
1001083e:	d829      	bhi.n	10010894 <at_ble_encryption_start+0x60>
10010840:	2701      	movs	r7, #1
10010842:	1c3d      	adds	r5, r7, #0
10010844:	2433      	movs	r4, #51	; 0x33
10010846:	4095      	lsls	r5, r2
10010848:	4225      	tst	r5, r4
1001084a:	d023      	beq.n	10010894 <at_ble_encryption_start+0x60>
1001084c:	7e8c      	ldrb	r4, [r1, #26]
1001084e:	3c07      	subs	r4, #7
10010850:	2c09      	cmp	r4, #9
10010852:	d81f      	bhi.n	10010894 <at_ble_encryption_start+0x60>
10010854:	4b10      	ldr	r3, [pc, #64]	; (10010898 <at_ble_encryption_start+0x64>)
10010856:	1c0c      	adds	r4, r1, #0
10010858:	2100      	movs	r1, #0
1001085a:	1c15      	adds	r5, r2, #0
1001085c:	1c06      	adds	r6, r0, #0
1001085e:	4798      	blx	r3
10010860:	1c3b      	adds	r3, r7, #0
10010862:	2807      	cmp	r0, #7
10010864:	d816      	bhi.n	10010894 <at_ble_encryption_start+0x60>
10010866:	2312      	movs	r3, #18
10010868:	4358      	muls	r0, r3
1001086a:	4b0c      	ldr	r3, [pc, #48]	; (1001089c <at_ble_encryption_start+0x68>)
1001086c:	5cc7      	ldrb	r7, [r0, r3]
1001086e:	23e0      	movs	r3, #224	; 0xe0
10010870:	2f00      	cmp	r7, #0
10010872:	d10f      	bne.n	10010894 <at_ble_encryption_start+0x60>
10010874:	1c21      	adds	r1, r4, #0
10010876:	221c      	movs	r2, #28
10010878:	4b09      	ldr	r3, [pc, #36]	; (100108a0 <at_ble_encryption_start+0x6c>)
1001087a:	480a      	ldr	r0, [pc, #40]	; (100108a4 <at_ble_encryption_start+0x70>)
1001087c:	4798      	blx	r3
1001087e:	1c23      	adds	r3, r4, #0
10010880:	7ea1      	ldrb	r1, [r4, #26]
10010882:	8a22      	ldrh	r2, [r4, #16]
10010884:	3312      	adds	r3, #18
10010886:	9100      	str	r1, [sp, #0]
10010888:	9501      	str	r5, [sp, #4]
1001088a:	1c21      	adds	r1, r4, #0
1001088c:	1c30      	adds	r0, r6, #0
1001088e:	4c06      	ldr	r4, [pc, #24]	; (100108a8 <at_ble_encryption_start+0x74>)
10010890:	47a0      	blx	r4
10010892:	1c3b      	adds	r3, r7, #0
10010894:	1c18      	adds	r0, r3, #0
10010896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010898:	10010b49 	.word	0x10010b49
1001089c:	1001bd2a 	.word	0x1001bd2a
100108a0:	100166cf 	.word	0x100166cf
100108a4:	1001be38 	.word	0x1001be38
100108a8:	100111c5 	.word	0x100111c5

100108ac <at_ble_encryption_request_reply>:
100108ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
100108ae:	24cf      	movs	r4, #207	; 0xcf
100108b0:	2b00      	cmp	r3, #0
100108b2:	d011      	beq.n	100108d8 <at_ble_encryption_request_reply+0x2c>
100108b4:	2a00      	cmp	r2, #0
100108b6:	d00a      	beq.n	100108ce <at_ble_encryption_request_reply+0x22>
100108b8:	2905      	cmp	r1, #5
100108ba:	d80d      	bhi.n	100108d8 <at_ble_encryption_request_reply+0x2c>
100108bc:	2501      	movs	r5, #1
100108be:	2633      	movs	r6, #51	; 0x33
100108c0:	408d      	lsls	r5, r1
100108c2:	4235      	tst	r5, r6
100108c4:	d008      	beq.n	100108d8 <at_ble_encryption_request_reply+0x2c>
100108c6:	7e9d      	ldrb	r5, [r3, #26]
100108c8:	3d07      	subs	r5, #7
100108ca:	2d09      	cmp	r5, #9
100108cc:	d804      	bhi.n	100108d8 <at_ble_encryption_request_reply+0x2c>
100108ce:	7e9c      	ldrb	r4, [r3, #26]
100108d0:	9400      	str	r4, [sp, #0]
100108d2:	4c02      	ldr	r4, [pc, #8]	; (100108dc <at_ble_encryption_request_reply+0x30>)
100108d4:	47a0      	blx	r4
100108d6:	2400      	movs	r4, #0
100108d8:	1c20      	adds	r0, r4, #0
100108da:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100108dc:	10011281 	.word	0x10011281

100108e0 <rx_callback>:
100108e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100108e2:	8883      	ldrh	r3, [r0, #4]
100108e4:	1c01      	adds	r1, r0, #0
100108e6:	9301      	str	r3, [sp, #4]
100108e8:	88c5      	ldrh	r5, [r0, #6]
100108ea:	8806      	ldrh	r6, [r0, #0]
100108ec:	2d00      	cmp	r5, #0
100108ee:	d10f      	bne.n	10010910 <rx_callback+0x30>
100108f0:	1c19      	adds	r1, r3, #0
100108f2:	1c30      	adds	r0, r6, #0
100108f4:	4b19      	ldr	r3, [pc, #100]	; (1001095c <rx_callback+0x7c>)
100108f6:	1c2a      	adds	r2, r5, #0
100108f8:	4798      	blx	r3
100108fa:	1e03      	subs	r3, r0, #0
100108fc:	d105      	bne.n	1001090a <rx_callback+0x2a>
100108fe:	1c30      	adds	r0, r6, #0
10010900:	9901      	ldr	r1, [sp, #4]
10010902:	1c1a      	adds	r2, r3, #0
10010904:	4c16      	ldr	r4, [pc, #88]	; (10010960 <rx_callback+0x80>)
10010906:	47a0      	blx	r4
10010908:	e027      	b.n	1001095a <rx_callback+0x7a>
1001090a:	4b16      	ldr	r3, [pc, #88]	; (10010964 <rx_callback+0x84>)
1001090c:	4798      	blx	r3
1001090e:	e024      	b.n	1001095a <rx_callback+0x7a>
10010910:	4c15      	ldr	r4, [pc, #84]	; (10010968 <rx_callback+0x88>)
10010912:	4a16      	ldr	r2, [pc, #88]	; (1001096c <rx_callback+0x8c>)
10010914:	6823      	ldr	r3, [r4, #0]
10010916:	6812      	ldr	r2, [r2, #0]
10010918:	18eb      	adds	r3, r5, r3
1001091a:	4293      	cmp	r3, r2
1001091c:	d901      	bls.n	10010922 <rx_callback+0x42>
1001091e:	2300      	movs	r3, #0
10010920:	6023      	str	r3, [r4, #0]
10010922:	4f13      	ldr	r7, [pc, #76]	; (10010970 <rx_callback+0x90>)
10010924:	6822      	ldr	r2, [r4, #0]
10010926:	683b      	ldr	r3, [r7, #0]
10010928:	3108      	adds	r1, #8
1001092a:	1898      	adds	r0, r3, r2
1001092c:	1c2a      	adds	r2, r5, #0
1001092e:	4b11      	ldr	r3, [pc, #68]	; (10010974 <rx_callback+0x94>)
10010930:	4798      	blx	r3
10010932:	683b      	ldr	r3, [r7, #0]
10010934:	6822      	ldr	r2, [r4, #0]
10010936:	1c30      	adds	r0, r6, #0
10010938:	189a      	adds	r2, r3, r2
1001093a:	9901      	ldr	r1, [sp, #4]
1001093c:	4b07      	ldr	r3, [pc, #28]	; (1001095c <rx_callback+0x7c>)
1001093e:	4798      	blx	r3
10010940:	2800      	cmp	r0, #0
10010942:	d1e2      	bne.n	1001090a <rx_callback+0x2a>
10010944:	6823      	ldr	r3, [r4, #0]
10010946:	683a      	ldr	r2, [r7, #0]
10010948:	1c30      	adds	r0, r6, #0
1001094a:	18d2      	adds	r2, r2, r3
1001094c:	9901      	ldr	r1, [sp, #4]
1001094e:	1c2b      	adds	r3, r5, #0
10010950:	4e03      	ldr	r6, [pc, #12]	; (10010960 <rx_callback+0x80>)
10010952:	47b0      	blx	r6
10010954:	6823      	ldr	r3, [r4, #0]
10010956:	18ed      	adds	r5, r5, r3
10010958:	6025      	str	r5, [r4, #0]
1001095a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001095c:	1000ef75 	.word	0x1000ef75
10010960:	1000eeed 	.word	0x1000eeed
10010964:	1000e9f5 	.word	0x1000e9f5
10010968:	1001be94 	.word	0x1001be94
1001096c:	1001ade4 	.word	0x1001ade4
10010970:	1001ade0 	.word	0x1001ade0
10010974:	100166cf 	.word	0x100166cf

10010978 <interface_send>:
10010978:	b508      	push	{r3, lr}
1001097a:	4b02      	ldr	r3, [pc, #8]	; (10010984 <interface_send+0xc>)
1001097c:	4798      	blx	r3
1001097e:	2000      	movs	r0, #0
10010980:	bd08      	pop	{r3, pc}
10010982:	46c0      	nop			; (mov r8, r8)
10010984:	1000e6ed 	.word	0x1000e6ed

10010988 <interface_init>:
10010988:	2280      	movs	r2, #128	; 0x80
1001098a:	b510      	push	{r4, lr}
1001098c:	2100      	movs	r1, #0
1001098e:	1c04      	adds	r4, r0, #0
10010990:	0092      	lsls	r2, r2, #2
10010992:	4b08      	ldr	r3, [pc, #32]	; (100109b4 <interface_init+0x2c>)
10010994:	4808      	ldr	r0, [pc, #32]	; (100109b8 <interface_init+0x30>)
10010996:	4798      	blx	r3
10010998:	2200      	movs	r2, #0
1001099a:	4b08      	ldr	r3, [pc, #32]	; (100109bc <interface_init+0x34>)
1001099c:	601a      	str	r2, [r3, #0]
1001099e:	4a08      	ldr	r2, [pc, #32]	; (100109c0 <interface_init+0x38>)
100109a0:	4b08      	ldr	r3, [pc, #32]	; (100109c4 <interface_init+0x3c>)
100109a2:	601a      	str	r2, [r3, #0]
100109a4:	4b08      	ldr	r3, [pc, #32]	; (100109c8 <interface_init+0x40>)
100109a6:	6922      	ldr	r2, [r4, #16]
100109a8:	601a      	str	r2, [r3, #0]
100109aa:	6962      	ldr	r2, [r4, #20]
100109ac:	4b07      	ldr	r3, [pc, #28]	; (100109cc <interface_init+0x44>)
100109ae:	601a      	str	r2, [r3, #0]
100109b0:	bd10      	pop	{r4, pc}
100109b2:	46c0      	nop			; (mov r8, r8)
100109b4:	100166e1 	.word	0x100166e1
100109b8:	1001c098 	.word	0x1001c098
100109bc:	1001be94 	.word	0x1001be94
100109c0:	1001be98 	.word	0x1001be98
100109c4:	10019334 	.word	0x10019334
100109c8:	1001ade0 	.word	0x1001ade0
100109cc:	1001ade4 	.word	0x1001ade4

100109d0 <platform_cmd_cmpl_signal>:
100109d0:	2201      	movs	r2, #1
100109d2:	4b01      	ldr	r3, [pc, #4]	; (100109d8 <platform_cmd_cmpl_signal+0x8>)
100109d4:	601a      	str	r2, [r3, #0]
100109d6:	4770      	bx	lr
100109d8:	1001ade8 	.word	0x1001ade8

100109dc <platform_cmd_cmpl_wait>:
100109dc:	b510      	push	{r4, lr}
100109de:	1c04      	adds	r4, r0, #0
100109e0:	4b07      	ldr	r3, [pc, #28]	; (10010a00 <platform_cmd_cmpl_wait+0x24>)
100109e2:	681a      	ldr	r2, [r3, #0]
100109e4:	2a01      	cmp	r2, #1
100109e6:	d003      	beq.n	100109f0 <platform_cmd_cmpl_wait+0x14>
100109e8:	4b06      	ldr	r3, [pc, #24]	; (10010a04 <platform_cmd_cmpl_wait+0x28>)
100109ea:	2000      	movs	r0, #0
100109ec:	4798      	blx	r3
100109ee:	e7f7      	b.n	100109e0 <platform_cmd_cmpl_wait+0x4>
100109f0:	6819      	ldr	r1, [r3, #0]
100109f2:	2901      	cmp	r1, #1
100109f4:	d102      	bne.n	100109fc <platform_cmd_cmpl_wait+0x20>
100109f6:	2200      	movs	r2, #0
100109f8:	601a      	str	r2, [r3, #0]
100109fa:	e000      	b.n	100109fe <platform_cmd_cmpl_wait+0x22>
100109fc:	7022      	strb	r2, [r4, #0]
100109fe:	bd10      	pop	{r4, pc}
10010a00:	1001ade8 	.word	0x1001ade8
10010a04:	1000e77d 	.word	0x1000e77d

10010a08 <start_timer>:
10010a08:	4770      	bx	lr

10010a0a <stop_timer>:
10010a0a:	4770      	bx	lr

10010a0c <dbg_le_set_bd_addr_req_handler>:
10010a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010a0e:	466b      	mov	r3, sp
10010a10:	1dde      	adds	r6, r3, #7
10010a12:	2300      	movs	r3, #0
10010a14:	7033      	strb	r3, [r6, #0]
10010a16:	230f      	movs	r3, #15
10010a18:	4c13      	ldr	r4, [pc, #76]	; (10010a68 <dbg_le_set_bd_addr_req_handler+0x5c>)
10010a1a:	2703      	movs	r7, #3
10010a1c:	7023      	strb	r3, [r4, #0]
10010a1e:	2300      	movs	r3, #0
10010a20:	70e3      	strb	r3, [r4, #3]
10010a22:	4b12      	ldr	r3, [pc, #72]	; (10010a6c <dbg_le_set_bd_addr_req_handler+0x60>)
10010a24:	1c01      	adds	r1, r0, #0
10010a26:	881a      	ldrh	r2, [r3, #0]
10010a28:	881b      	ldrh	r3, [r3, #0]
10010a2a:	7122      	strb	r2, [r4, #4]
10010a2c:	0a1b      	lsrs	r3, r3, #8
10010a2e:	2206      	movs	r2, #6
10010a30:	7163      	strb	r3, [r4, #5]
10010a32:	480f      	ldr	r0, [pc, #60]	; (10010a70 <dbg_le_set_bd_addr_req_handler+0x64>)
10010a34:	4b0f      	ldr	r3, [pc, #60]	; (10010a74 <dbg_le_set_bd_addr_req_handler+0x68>)
10010a36:	7067      	strb	r7, [r4, #1]
10010a38:	70a7      	strb	r7, [r4, #2]
10010a3a:	4798      	blx	r3
10010a3c:	4d0e      	ldr	r5, [pc, #56]	; (10010a78 <dbg_le_set_bd_addr_req_handler+0x6c>)
10010a3e:	4b0f      	ldr	r3, [pc, #60]	; (10010a7c <dbg_le_set_bd_addr_req_handler+0x70>)
10010a40:	210e      	movs	r1, #14
10010a42:	802b      	strh	r3, [r5, #0]
10010a44:	2306      	movs	r3, #6
10010a46:	71a3      	strb	r3, [r4, #6]
10010a48:	2300      	movs	r3, #0
10010a4a:	1c20      	adds	r0, r4, #0
10010a4c:	71e3      	strb	r3, [r4, #7]
10010a4e:	4b0c      	ldr	r3, [pc, #48]	; (10010a80 <dbg_le_set_bd_addr_req_handler+0x74>)
10010a50:	80af      	strh	r7, [r5, #4]
10010a52:	4798      	blx	r3
10010a54:	1c30      	adds	r0, r6, #0
10010a56:	4b0b      	ldr	r3, [pc, #44]	; (10010a84 <dbg_le_set_bd_addr_req_handler+0x78>)
10010a58:	4798      	blx	r3
10010a5a:	7833      	ldrb	r3, [r6, #0]
10010a5c:	20e2      	movs	r0, #226	; 0xe2
10010a5e:	2b00      	cmp	r3, #0
10010a60:	d101      	bne.n	10010a66 <dbg_le_set_bd_addr_req_handler+0x5a>
10010a62:	68ab      	ldr	r3, [r5, #8]
10010a64:	7818      	ldrb	r0, [r3, #0]
10010a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010a68:	1001c098 	.word	0x1001c098
10010a6c:	1001bd28 	.word	0x1001bd28
10010a70:	1001c0a0 	.word	0x1001c0a0
10010a74:	100166cf 	.word	0x100166cf
10010a78:	1001bd1c 	.word	0x1001bd1c
10010a7c:	00000329 	.word	0x00000329
10010a80:	10010979 	.word	0x10010979
10010a84:	100109dd 	.word	0x100109dd

10010a88 <gapc_get_dev_info_cfm.constprop.1>:
10010a88:	b538      	push	{r3, r4, r5, lr}
10010a8a:	230b      	movs	r3, #11
10010a8c:	4c27      	ldr	r4, [pc, #156]	; (10010b2c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10010a8e:	7023      	strb	r3, [r4, #0]
10010a90:	3303      	adds	r3, #3
10010a92:	7063      	strb	r3, [r4, #1]
10010a94:	3329      	adds	r3, #41	; 0x29
10010a96:	70a3      	strb	r3, [r4, #2]
10010a98:	4b25      	ldr	r3, [pc, #148]	; (10010b30 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10010a9a:	70e1      	strb	r1, [r4, #3]
10010a9c:	881a      	ldrh	r2, [r3, #0]
10010a9e:	881b      	ldrh	r3, [r3, #0]
10010aa0:	7122      	strb	r2, [r4, #4]
10010aa2:	0a1b      	lsrs	r3, r3, #8
10010aa4:	7163      	strb	r3, [r4, #5]
10010aa6:	2300      	movs	r3, #0
10010aa8:	7220      	strb	r0, [r4, #8]
10010aaa:	7263      	strb	r3, [r4, #9]
10010aac:	2801      	cmp	r0, #1
10010aae:	d02b      	beq.n	10010b08 <gapc_get_dev_info_cfm.constprop.1+0x80>
10010ab0:	4298      	cmp	r0, r3
10010ab2:	d01b      	beq.n	10010aec <gapc_get_dev_info_cfm.constprop.1+0x64>
10010ab4:	2802      	cmp	r0, #2
10010ab6:	d12f      	bne.n	10010b18 <gapc_get_dev_info_cfm.constprop.1+0x90>
10010ab8:	4b1e      	ldr	r3, [pc, #120]	; (10010b34 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010aba:	2112      	movs	r1, #18
10010abc:	1c1a      	adds	r2, r3, #0
10010abe:	32ce      	adds	r2, #206	; 0xce
10010ac0:	8812      	ldrh	r2, [r2, #0]
10010ac2:	72a2      	strb	r2, [r4, #10]
10010ac4:	0a12      	lsrs	r2, r2, #8
10010ac6:	72e2      	strb	r2, [r4, #11]
10010ac8:	1c1a      	adds	r2, r3, #0
10010aca:	32d0      	adds	r2, #208	; 0xd0
10010acc:	8812      	ldrh	r2, [r2, #0]
10010ace:	7322      	strb	r2, [r4, #12]
10010ad0:	0a12      	lsrs	r2, r2, #8
10010ad2:	7362      	strb	r2, [r4, #13]
10010ad4:	1c1a      	adds	r2, r3, #0
10010ad6:	32d2      	adds	r2, #210	; 0xd2
10010ad8:	8812      	ldrh	r2, [r2, #0]
10010ada:	33d4      	adds	r3, #212	; 0xd4
10010adc:	73a2      	strb	r2, [r4, #14]
10010ade:	0a12      	lsrs	r2, r2, #8
10010ae0:	73e2      	strb	r2, [r4, #15]
10010ae2:	881b      	ldrh	r3, [r3, #0]
10010ae4:	7423      	strb	r3, [r4, #16]
10010ae6:	0a1b      	lsrs	r3, r3, #8
10010ae8:	7463      	strb	r3, [r4, #17]
10010aea:	e016      	b.n	10010b1a <gapc_get_dev_info_cfm.constprop.1+0x92>
10010aec:	4b11      	ldr	r3, [pc, #68]	; (10010b34 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010aee:	4912      	ldr	r1, [pc, #72]	; (10010b38 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010af0:	33aa      	adds	r3, #170	; 0xaa
10010af2:	881d      	ldrh	r5, [r3, #0]
10010af4:	4811      	ldr	r0, [pc, #68]	; (10010b3c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010af6:	0a2b      	lsrs	r3, r5, #8
10010af8:	72a5      	strb	r5, [r4, #10]
10010afa:	72e3      	strb	r3, [r4, #11]
10010afc:	1c2a      	adds	r2, r5, #0
10010afe:	4b10      	ldr	r3, [pc, #64]	; (10010b40 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010b00:	350c      	adds	r5, #12
10010b02:	4798      	blx	r3
10010b04:	b2a9      	uxth	r1, r5
10010b06:	e008      	b.n	10010b1a <gapc_get_dev_info_cfm.constprop.1+0x92>
10010b08:	4b0a      	ldr	r3, [pc, #40]	; (10010b34 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010b0a:	210c      	movs	r1, #12
10010b0c:	33cc      	adds	r3, #204	; 0xcc
10010b0e:	881b      	ldrh	r3, [r3, #0]
10010b10:	72a3      	strb	r3, [r4, #10]
10010b12:	0a1b      	lsrs	r3, r3, #8
10010b14:	72e3      	strb	r3, [r4, #11]
10010b16:	e000      	b.n	10010b1a <gapc_get_dev_info_cfm.constprop.1+0x92>
10010b18:	210a      	movs	r1, #10
10010b1a:	1c0b      	adds	r3, r1, #0
10010b1c:	3b08      	subs	r3, #8
10010b1e:	71a3      	strb	r3, [r4, #6]
10010b20:	121b      	asrs	r3, r3, #8
10010b22:	71e3      	strb	r3, [r4, #7]
10010b24:	1c20      	adds	r0, r4, #0
10010b26:	4b07      	ldr	r3, [pc, #28]	; (10010b44 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010b28:	4798      	blx	r3
10010b2a:	bd38      	pop	{r3, r4, r5, pc}
10010b2c:	1001c098 	.word	0x1001c098
10010b30:	1001bd28 	.word	0x1001bd28
10010b34:	1001bdba 	.word	0x1001bdba
10010b38:	1001be66 	.word	0x1001be66
10010b3c:	1001c0a4 	.word	0x1001c0a4
10010b40:	100166cf 	.word	0x100166cf
10010b44:	10010979 	.word	0x10010979

10010b48 <check_ConnData_idx_role>:
10010b48:	4b0c      	ldr	r3, [pc, #48]	; (10010b7c <check_ConnData_idx_role+0x34>)
10010b4a:	b570      	push	{r4, r5, r6, lr}
10010b4c:	1c04      	adds	r4, r0, #0
10010b4e:	2008      	movs	r0, #8
10010b50:	429c      	cmp	r4, r3
10010b52:	d011      	beq.n	10010b78 <check_ConnData_idx_role+0x30>
10010b54:	2300      	movs	r3, #0
10010b56:	2212      	movs	r2, #18
10010b58:	435a      	muls	r2, r3
10010b5a:	4d09      	ldr	r5, [pc, #36]	; (10010b80 <check_ConnData_idx_role+0x38>)
10010b5c:	b2d8      	uxtb	r0, r3
10010b5e:	1956      	adds	r6, r2, r5
10010b60:	8976      	ldrh	r6, [r6, #10]
10010b62:	42a6      	cmp	r6, r4
10010b64:	d104      	bne.n	10010b70 <check_ConnData_idx_role+0x28>
10010b66:	2900      	cmp	r1, #0
10010b68:	d006      	beq.n	10010b78 <check_ConnData_idx_role+0x30>
10010b6a:	5d53      	ldrb	r3, [r2, r5]
10010b6c:	700b      	strb	r3, [r1, #0]
10010b6e:	e003      	b.n	10010b78 <check_ConnData_idx_role+0x30>
10010b70:	3301      	adds	r3, #1
10010b72:	2b08      	cmp	r3, #8
10010b74:	d1ef      	bne.n	10010b56 <check_ConnData_idx_role+0xe>
10010b76:	1c18      	adds	r0, r3, #0
10010b78:	bd70      	pop	{r4, r5, r6, pc}
10010b7a:	46c0      	nop			; (mov r8, r8)
10010b7c:	0000ffff 	.word	0x0000ffff
10010b80:	1001bd2a 	.word	0x1001bd2a

10010b84 <check_ConnData_emptyEntry>:
10010b84:	2300      	movs	r3, #0
10010b86:	2212      	movs	r2, #18
10010b88:	435a      	muls	r2, r3
10010b8a:	4906      	ldr	r1, [pc, #24]	; (10010ba4 <check_ConnData_emptyEntry+0x20>)
10010b8c:	b2d8      	uxtb	r0, r3
10010b8e:	1852      	adds	r2, r2, r1
10010b90:	8951      	ldrh	r1, [r2, #10]
10010b92:	4a05      	ldr	r2, [pc, #20]	; (10010ba8 <check_ConnData_emptyEntry+0x24>)
10010b94:	4291      	cmp	r1, r2
10010b96:	d003      	beq.n	10010ba0 <check_ConnData_emptyEntry+0x1c>
10010b98:	3301      	adds	r3, #1
10010b9a:	2b08      	cmp	r3, #8
10010b9c:	d1f3      	bne.n	10010b86 <check_ConnData_emptyEntry+0x2>
10010b9e:	1c18      	adds	r0, r3, #0
10010ba0:	4770      	bx	lr
10010ba2:	46c0      	nop			; (mov r8, r8)
10010ba4:	1001bd2a 	.word	0x1001bd2a
10010ba8:	0000ffff 	.word	0x0000ffff

10010bac <gapc_cmp_evt>:
10010bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010bae:	780b      	ldrb	r3, [r1, #0]
10010bb0:	1c05      	adds	r5, r0, #0
10010bb2:	1e58      	subs	r0, r3, #1
10010bb4:	784e      	ldrb	r6, [r1, #1]
10010bb6:	280f      	cmp	r0, #15
10010bb8:	d85a      	bhi.n	10010c70 <gapc_cmp_evt+0xc4>
10010bba:	1c14      	adds	r4, r2, #0
10010bbc:	f002 fd62 	bl	10013684 <__gnu_thumb1_case_uqi>
10010bc0:	5858440a 	.word	0x5858440a
10010bc4:	4b584444 	.word	0x4b584444
10010bc8:	0825122d 	.word	0x0825122d
10010bcc:	3e395858 	.word	0x3e395858
10010bd0:	203b      	movs	r0, #59	; 0x3b
10010bd2:	e04e      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010bd4:	203b      	movs	r0, #59	; 0x3b
10010bd6:	2e00      	cmp	r6, #0
10010bd8:	d04b      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010bda:	0a2d      	lsrs	r5, r5, #8
10010bdc:	8015      	strh	r5, [r2, #0]
10010bde:	7096      	strb	r6, [r2, #2]
10010be0:	3835      	subs	r0, #53	; 0x35
10010be2:	e046      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010be4:	466b      	mov	r3, sp
10010be6:	1ddf      	adds	r7, r3, #7
10010be8:	2301      	movs	r3, #1
10010bea:	0a2d      	lsrs	r5, r5, #8
10010bec:	703b      	strb	r3, [r7, #0]
10010bee:	1c28      	adds	r0, r5, #0
10010bf0:	1c39      	adds	r1, r7, #0
10010bf2:	4b20      	ldr	r3, [pc, #128]	; (10010c74 <gapc_cmp_evt+0xc8>)
10010bf4:	4798      	blx	r3
10010bf6:	2807      	cmp	r0, #7
10010bf8:	d803      	bhi.n	10010c02 <gapc_cmp_evt+0x56>
10010bfa:	783b      	ldrb	r3, [r7, #0]
10010bfc:	203b      	movs	r0, #59	; 0x3b
10010bfe:	2b00      	cmp	r3, #0
10010c00:	d037      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c02:	8065      	strh	r5, [r4, #2]
10010c04:	7126      	strb	r6, [r4, #4]
10010c06:	2009      	movs	r0, #9
10010c08:	e033      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c0a:	203b      	movs	r0, #59	; 0x3b
10010c0c:	2e00      	cmp	r6, #0
10010c0e:	d030      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c10:	0a2d      	lsrs	r5, r5, #8
10010c12:	8015      	strh	r5, [r2, #0]
10010c14:	7096      	strb	r6, [r2, #2]
10010c16:	382d      	subs	r0, #45	; 0x2d
10010c18:	e02b      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c1a:	203b      	movs	r0, #59	; 0x3b
10010c1c:	2e00      	cmp	r6, #0
10010c1e:	d028      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c20:	2300      	movs	r3, #0
10010c22:	0a2d      	lsrs	r5, r5, #8
10010c24:	8015      	strh	r5, [r2, #0]
10010c26:	7096      	strb	r6, [r2, #2]
10010c28:	8093      	strh	r3, [r2, #4]
10010c2a:	80d3      	strh	r3, [r2, #6]
10010c2c:	8113      	strh	r3, [r2, #8]
10010c2e:	3834      	subs	r0, #52	; 0x34
10010c30:	e01f      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c32:	203b      	movs	r0, #59	; 0x3b
10010c34:	2e00      	cmp	r6, #0
10010c36:	d01c      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c38:	7216      	strb	r6, [r2, #8]
10010c3a:	e003      	b.n	10010c44 <gapc_cmp_evt+0x98>
10010c3c:	203b      	movs	r0, #59	; 0x3b
10010c3e:	2e00      	cmp	r6, #0
10010c40:	d017      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c42:	7116      	strb	r6, [r2, #4]
10010c44:	3812      	subs	r0, #18
10010c46:	e014      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c48:	203b      	movs	r0, #59	; 0x3b
10010c4a:	2e00      	cmp	r6, #0
10010c4c:	d011      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c4e:	7093      	strb	r3, [r2, #2]
10010c50:	70d6      	strb	r6, [r2, #3]
10010c52:	382a      	subs	r0, #42	; 0x2a
10010c54:	e00d      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c56:	203b      	movs	r0, #59	; 0x3b
10010c58:	2e00      	cmp	r6, #0
10010c5a:	d00a      	beq.n	10010c72 <gapc_cmp_evt+0xc6>
10010c5c:	0a2d      	lsrs	r5, r5, #8
10010c5e:	7016      	strb	r6, [r2, #0]
10010c60:	8055      	strh	r5, [r2, #2]
10010c62:	1d10      	adds	r0, r2, #4
10010c64:	2100      	movs	r1, #0
10010c66:	2205      	movs	r2, #5
10010c68:	4b03      	ldr	r3, [pc, #12]	; (10010c78 <gapc_cmp_evt+0xcc>)
10010c6a:	4798      	blx	r3
10010c6c:	2012      	movs	r0, #18
10010c6e:	e000      	b.n	10010c72 <gapc_cmp_evt+0xc6>
10010c70:	2000      	movs	r0, #0
10010c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010c74:	10010b49 	.word	0x10010b49
10010c78:	100166e1 	.word	0x100166e1

10010c7c <gapc_connection_cfm_handler>:
10010c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c7e:	b085      	sub	sp, #20
10010c80:	1c1d      	adds	r5, r3, #0
10010c82:	ab0a      	add	r3, sp, #40	; 0x28
10010c84:	781b      	ldrb	r3, [r3, #0]
10010c86:	9201      	str	r2, [sp, #4]
10010c88:	9302      	str	r3, [sp, #8]
10010c8a:	ab0b      	add	r3, sp, #44	; 0x2c
10010c8c:	781b      	ldrb	r3, [r3, #0]
10010c8e:	1c07      	adds	r7, r0, #0
10010c90:	9303      	str	r3, [sp, #12]
10010c92:	ab0c      	add	r3, sp, #48	; 0x30
10010c94:	881a      	ldrh	r2, [r3, #0]
10010c96:	2302      	movs	r3, #2
10010c98:	1c0e      	adds	r6, r1, #0
10010c9a:	4c23      	ldr	r4, [pc, #140]	; (10010d28 <gapc_connection_cfm_handler+0xac>)
10010c9c:	1c39      	adds	r1, r7, #0
10010c9e:	7023      	strb	r3, [r4, #0]
10010ca0:	330c      	adds	r3, #12
10010ca2:	7063      	strb	r3, [r4, #1]
10010ca4:	70a3      	strb	r3, [r4, #2]
10010ca6:	4b21      	ldr	r3, [pc, #132]	; (10010d2c <gapc_connection_cfm_handler+0xb0>)
10010ca8:	70e2      	strb	r2, [r4, #3]
10010caa:	881a      	ldrh	r2, [r3, #0]
10010cac:	881b      	ldrh	r3, [r3, #0]
10010cae:	7122      	strb	r2, [r4, #4]
10010cb0:	0a1b      	lsrs	r3, r3, #8
10010cb2:	4f1f      	ldr	r7, [pc, #124]	; (10010d30 <gapc_connection_cfm_handler+0xb4>)
10010cb4:	2210      	movs	r2, #16
10010cb6:	481f      	ldr	r0, [pc, #124]	; (10010d34 <gapc_connection_cfm_handler+0xb8>)
10010cb8:	7163      	strb	r3, [r4, #5]
10010cba:	47b8      	blx	r7
10010cbc:	0a33      	lsrs	r3, r6, #8
10010cbe:	7626      	strb	r6, [r4, #24]
10010cc0:	7663      	strb	r3, [r4, #25]
10010cc2:	9901      	ldr	r1, [sp, #4]
10010cc4:	0c33      	lsrs	r3, r6, #16
10010cc6:	2210      	movs	r2, #16
10010cc8:	0e36      	lsrs	r6, r6, #24
10010cca:	481b      	ldr	r0, [pc, #108]	; (10010d38 <gapc_connection_cfm_handler+0xbc>)
10010ccc:	76a3      	strb	r3, [r4, #26]
10010cce:	76e6      	strb	r6, [r4, #27]
10010cd0:	47b8      	blx	r7
10010cd2:	1c23      	adds	r3, r4, #0
10010cd4:	332c      	adds	r3, #44	; 0x2c
10010cd6:	701d      	strb	r5, [r3, #0]
10010cd8:	1c23      	adds	r3, r4, #0
10010cda:	0a2a      	lsrs	r2, r5, #8
10010cdc:	332d      	adds	r3, #45	; 0x2d
10010cde:	701a      	strb	r2, [r3, #0]
10010ce0:	1c23      	adds	r3, r4, #0
10010ce2:	0c2a      	lsrs	r2, r5, #16
10010ce4:	332e      	adds	r3, #46	; 0x2e
10010ce6:	701a      	strb	r2, [r3, #0]
10010ce8:	1c23      	adds	r3, r4, #0
10010cea:	0e2d      	lsrs	r5, r5, #24
10010cec:	332f      	adds	r3, #47	; 0x2f
10010cee:	466a      	mov	r2, sp
10010cf0:	701d      	strb	r5, [r3, #0]
10010cf2:	1c23      	adds	r3, r4, #0
10010cf4:	7a12      	ldrb	r2, [r2, #8]
10010cf6:	3330      	adds	r3, #48	; 0x30
10010cf8:	701a      	strb	r2, [r3, #0]
10010cfa:	1c23      	adds	r3, r4, #0
10010cfc:	2500      	movs	r5, #0
10010cfe:	3331      	adds	r3, #49	; 0x31
10010d00:	466a      	mov	r2, sp
10010d02:	701d      	strb	r5, [r3, #0]
10010d04:	1c23      	adds	r3, r4, #0
10010d06:	7b12      	ldrb	r2, [r2, #12]
10010d08:	3332      	adds	r3, #50	; 0x32
10010d0a:	701a      	strb	r2, [r3, #0]
10010d0c:	1c23      	adds	r3, r4, #0
10010d0e:	3333      	adds	r3, #51	; 0x33
10010d10:	701d      	strb	r5, [r3, #0]
10010d12:	232c      	movs	r3, #44	; 0x2c
10010d14:	1c20      	adds	r0, r4, #0
10010d16:	71a3      	strb	r3, [r4, #6]
10010d18:	2134      	movs	r1, #52	; 0x34
10010d1a:	4b08      	ldr	r3, [pc, #32]	; (10010d3c <gapc_connection_cfm_handler+0xc0>)
10010d1c:	71e5      	strb	r5, [r4, #7]
10010d1e:	4798      	blx	r3
10010d20:	1c28      	adds	r0, r5, #0
10010d22:	b005      	add	sp, #20
10010d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d26:	46c0      	nop			; (mov r8, r8)
10010d28:	1001c098 	.word	0x1001c098
10010d2c:	1001bd28 	.word	0x1001bd28
10010d30:	100166cf 	.word	0x100166cf
10010d34:	1001c0a0 	.word	0x1001c0a0
10010d38:	1001c0b4 	.word	0x1001c0b4
10010d3c:	10010979 	.word	0x10010979

10010d40 <gapc_con_req_ind>:
10010d40:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d42:	7845      	ldrb	r5, [r0, #1]
10010d44:	7803      	ldrb	r3, [r0, #0]
10010d46:	4c30      	ldr	r4, [pc, #192]	; (10010e08 <gapc_con_req_ind+0xc8>)
10010d48:	022d      	lsls	r5, r5, #8
10010d4a:	431d      	orrs	r5, r3
10010d4c:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010d4e:	78c3      	ldrb	r3, [r0, #3]
10010d50:	7882      	ldrb	r2, [r0, #2]
10010d52:	b08b      	sub	sp, #44	; 0x2c
10010d54:	021b      	lsls	r3, r3, #8
10010d56:	431a      	orrs	r2, r3
10010d58:	466b      	mov	r3, sp
10010d5a:	9205      	str	r2, [sp, #20]
10010d5c:	8a9b      	ldrh	r3, [r3, #20]
10010d5e:	2120      	movs	r1, #32
10010d60:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010d62:	7943      	ldrb	r3, [r0, #5]
10010d64:	7902      	ldrb	r2, [r0, #4]
10010d66:	021b      	lsls	r3, r3, #8
10010d68:	431a      	orrs	r2, r3
10010d6a:	466b      	mov	r3, sp
10010d6c:	9206      	str	r2, [sp, #24]
10010d6e:	8b1b      	ldrh	r3, [r3, #24]
10010d70:	1c06      	adds	r6, r0, #0
10010d72:	8623      	strh	r3, [r4, #48]	; 0x30
10010d74:	79c3      	ldrb	r3, [r0, #7]
10010d76:	7982      	ldrb	r2, [r0, #6]
10010d78:	021b      	lsls	r3, r3, #8
10010d7a:	431a      	orrs	r2, r3
10010d7c:	466b      	mov	r3, sp
10010d7e:	9207      	str	r2, [sp, #28]
10010d80:	466a      	mov	r2, sp
10010d82:	8b9b      	ldrh	r3, [r3, #28]
10010d84:	1852      	adds	r2, r2, r1
10010d86:	8663      	strh	r3, [r4, #50]	; 0x32
10010d88:	7a43      	ldrb	r3, [r0, #9]
10010d8a:	1c01      	adds	r1, r0, #0
10010d8c:	9308      	str	r3, [sp, #32]
10010d8e:	1c23      	adds	r3, r4, #0
10010d90:	7812      	ldrb	r2, [r2, #0]
10010d92:	3377      	adds	r3, #119	; 0x77
10010d94:	3478      	adds	r4, #120	; 0x78
10010d96:	701a      	strb	r2, [r3, #0]
10010d98:	310a      	adds	r1, #10
10010d9a:	2206      	movs	r2, #6
10010d9c:	4b1b      	ldr	r3, [pc, #108]	; (10010e0c <gapc_con_req_ind+0xcc>)
10010d9e:	1c20      	adds	r0, r4, #0
10010da0:	4798      	blx	r3
10010da2:	7c33      	ldrb	r3, [r6, #16]
10010da4:	9309      	str	r3, [sp, #36]	; 0x24
10010da6:	4b1a      	ldr	r3, [pc, #104]	; (10010e10 <gapc_con_req_ind+0xd0>)
10010da8:	4798      	blx	r3
10010daa:	4e1a      	ldr	r6, [pc, #104]	; (10010e14 <gapc_con_req_ind+0xd4>)
10010dac:	1e07      	subs	r7, r0, #0
10010dae:	2f07      	cmp	r7, #7
10010db0:	d81b      	bhi.n	10010dea <gapc_con_req_ind+0xaa>
10010db2:	2312      	movs	r3, #18
10010db4:	4343      	muls	r3, r0
10010db6:	18f0      	adds	r0, r6, r3
10010db8:	8145      	strh	r5, [r0, #10]
10010dba:	4669      	mov	r1, sp
10010dbc:	2524      	movs	r5, #36	; 0x24
10010dbe:	1949      	adds	r1, r1, r5
10010dc0:	7809      	ldrb	r1, [r1, #0]
10010dc2:	2206      	movs	r2, #6
10010dc4:	54f1      	strb	r1, [r6, r3]
10010dc6:	2120      	movs	r1, #32
10010dc8:	466b      	mov	r3, sp
10010dca:	185b      	adds	r3, r3, r1
10010dcc:	781b      	ldrb	r3, [r3, #0]
10010dce:	1c21      	adds	r1, r4, #0
10010dd0:	7043      	strb	r3, [r0, #1]
10010dd2:	466b      	mov	r3, sp
10010dd4:	8a9b      	ldrh	r3, [r3, #20]
10010dd6:	3002      	adds	r0, #2
10010dd8:	8143      	strh	r3, [r0, #10]
10010dda:	466b      	mov	r3, sp
10010ddc:	8b1b      	ldrh	r3, [r3, #24]
10010dde:	8183      	strh	r3, [r0, #12]
10010de0:	466b      	mov	r3, sp
10010de2:	8b9b      	ldrh	r3, [r3, #28]
10010de4:	81c3      	strh	r3, [r0, #14]
10010de6:	4b09      	ldr	r3, [pc, #36]	; (10010e0c <gapc_con_req_ind+0xcc>)
10010de8:	4798      	blx	r3
10010dea:	2112      	movs	r1, #18
10010dec:	2300      	movs	r3, #0
10010dee:	434f      	muls	r7, r1
10010df0:	9300      	str	r3, [sp, #0]
10010df2:	9301      	str	r3, [sp, #4]
10010df4:	19f6      	adds	r6, r6, r7
10010df6:	8971      	ldrh	r1, [r6, #10]
10010df8:	4a07      	ldr	r2, [pc, #28]	; (10010e18 <gapc_con_req_ind+0xd8>)
10010dfa:	9102      	str	r1, [sp, #8]
10010dfc:	1c10      	adds	r0, r2, #0
10010dfe:	1c19      	adds	r1, r3, #0
10010e00:	4c06      	ldr	r4, [pc, #24]	; (10010e1c <gapc_con_req_ind+0xdc>)
10010e02:	47a0      	blx	r4
10010e04:	b00b      	add	sp, #44	; 0x2c
10010e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e08:	1001bdba 	.word	0x1001bdba
10010e0c:	100166cf 	.word	0x100166cf
10010e10:	10010b85 	.word	0x10010b85
10010e14:	1001bd2a 	.word	0x1001bd2a
10010e18:	1001adec 	.word	0x1001adec
10010e1c:	10010c7d 	.word	0x10010c7d

10010e20 <gapc_disconnect_cmd_handler>:
10010e20:	2204      	movs	r2, #4
10010e22:	b510      	push	{r4, lr}
10010e24:	4b0c      	ldr	r3, [pc, #48]	; (10010e58 <gapc_disconnect_cmd_handler+0x38>)
10010e26:	2400      	movs	r4, #0
10010e28:	701a      	strb	r2, [r3, #0]
10010e2a:	320a      	adds	r2, #10
10010e2c:	705a      	strb	r2, [r3, #1]
10010e2e:	709a      	strb	r2, [r3, #2]
10010e30:	4a0a      	ldr	r2, [pc, #40]	; (10010e5c <gapc_disconnect_cmd_handler+0x3c>)
10010e32:	70d9      	strb	r1, [r3, #3]
10010e34:	8811      	ldrh	r1, [r2, #0]
10010e36:	8812      	ldrh	r2, [r2, #0]
10010e38:	7119      	strb	r1, [r3, #4]
10010e3a:	0a12      	lsrs	r2, r2, #8
10010e3c:	715a      	strb	r2, [r3, #5]
10010e3e:	2201      	movs	r2, #1
10010e40:	721a      	strb	r2, [r3, #8]
10010e42:	1892      	adds	r2, r2, r2
10010e44:	7258      	strb	r0, [r3, #9]
10010e46:	719a      	strb	r2, [r3, #6]
10010e48:	71dc      	strb	r4, [r3, #7]
10010e4a:	1c18      	adds	r0, r3, #0
10010e4c:	210a      	movs	r1, #10
10010e4e:	4b04      	ldr	r3, [pc, #16]	; (10010e60 <gapc_disconnect_cmd_handler+0x40>)
10010e50:	4798      	blx	r3
10010e52:	1c20      	adds	r0, r4, #0
10010e54:	bd10      	pop	{r4, pc}
10010e56:	46c0      	nop			; (mov r8, r8)
10010e58:	1001c098 	.word	0x1001c098
10010e5c:	1001bd28 	.word	0x1001bd28
10010e60:	10010979 	.word	0x10010979

10010e64 <gapc_disconnect_ind>:
10010e64:	1c02      	adds	r2, r0, #0
10010e66:	b508      	push	{r3, lr}
10010e68:	7843      	ldrb	r3, [r0, #1]
10010e6a:	7800      	ldrb	r0, [r0, #0]
10010e6c:	021b      	lsls	r3, r3, #8
10010e6e:	4318      	orrs	r0, r3
10010e70:	8008      	strh	r0, [r1, #0]
10010e72:	7893      	ldrb	r3, [r2, #2]
10010e74:	708b      	strb	r3, [r1, #2]
10010e76:	2100      	movs	r1, #0
10010e78:	4b05      	ldr	r3, [pc, #20]	; (10010e90 <gapc_disconnect_ind+0x2c>)
10010e7a:	4798      	blx	r3
10010e7c:	2807      	cmp	r0, #7
10010e7e:	d806      	bhi.n	10010e8e <gapc_disconnect_ind+0x2a>
10010e80:	2312      	movs	r3, #18
10010e82:	4358      	muls	r0, r3
10010e84:	4b03      	ldr	r3, [pc, #12]	; (10010e94 <gapc_disconnect_ind+0x30>)
10010e86:	1818      	adds	r0, r3, r0
10010e88:	2301      	movs	r3, #1
10010e8a:	425b      	negs	r3, r3
10010e8c:	8143      	strh	r3, [r0, #10]
10010e8e:	bd08      	pop	{r3, pc}
10010e90:	10010b49 	.word	0x10010b49
10010e94:	1001bd2a 	.word	0x1001bd2a

10010e98 <gapc_bond_cmd_handler>:
10010e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010e9a:	9300      	str	r3, [sp, #0]
10010e9c:	2312      	movs	r3, #18
10010e9e:	1c04      	adds	r4, r0, #0
10010ea0:	a808      	add	r0, sp, #32
10010ea2:	7807      	ldrb	r7, [r0, #0]
10010ea4:	a809      	add	r0, sp, #36	; 0x24
10010ea6:	7806      	ldrb	r6, [r0, #0]
10010ea8:	a80a      	add	r0, sp, #40	; 0x28
10010eaa:	7805      	ldrb	r5, [r0, #0]
10010eac:	a80b      	add	r0, sp, #44	; 0x2c
10010eae:	7800      	ldrb	r0, [r0, #0]
10010eb0:	9001      	str	r0, [sp, #4]
10010eb2:	4810      	ldr	r0, [pc, #64]	; (10010ef4 <gapc_bond_cmd_handler+0x5c>)
10010eb4:	7003      	strb	r3, [r0, #0]
10010eb6:	230e      	movs	r3, #14
10010eb8:	70c4      	strb	r4, [r0, #3]
10010eba:	4c0f      	ldr	r4, [pc, #60]	; (10010ef8 <gapc_bond_cmd_handler+0x60>)
10010ebc:	7043      	strb	r3, [r0, #1]
10010ebe:	7083      	strb	r3, [r0, #2]
10010ec0:	8823      	ldrh	r3, [r4, #0]
10010ec2:	8824      	ldrh	r4, [r4, #0]
10010ec4:	7103      	strb	r3, [r0, #4]
10010ec6:	466b      	mov	r3, sp
10010ec8:	781b      	ldrb	r3, [r3, #0]
10010eca:	0a24      	lsrs	r4, r4, #8
10010ecc:	72c3      	strb	r3, [r0, #11]
10010ece:	466b      	mov	r3, sp
10010ed0:	791b      	ldrb	r3, [r3, #4]
10010ed2:	7144      	strb	r4, [r0, #5]
10010ed4:	73c3      	strb	r3, [r0, #15]
10010ed6:	2308      	movs	r3, #8
10010ed8:	7183      	strb	r3, [r0, #6]
10010eda:	2300      	movs	r3, #0
10010edc:	240a      	movs	r4, #10
10010ede:	7241      	strb	r1, [r0, #9]
10010ee0:	71c3      	strb	r3, [r0, #7]
10010ee2:	2110      	movs	r1, #16
10010ee4:	4b05      	ldr	r3, [pc, #20]	; (10010efc <gapc_bond_cmd_handler+0x64>)
10010ee6:	7307      	strb	r7, [r0, #12]
10010ee8:	7346      	strb	r6, [r0, #13]
10010eea:	7385      	strb	r5, [r0, #14]
10010eec:	7204      	strb	r4, [r0, #8]
10010eee:	7282      	strb	r2, [r0, #10]
10010ef0:	4798      	blx	r3
10010ef2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010ef4:	1001c098 	.word	0x1001c098
10010ef8:	1001bd28 	.word	0x1001bd28
10010efc:	10010979 	.word	0x10010979

10010f00 <gapc_bond_ind>:
10010f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f02:	780e      	ldrb	r6, [r1, #0]
10010f04:	1c03      	adds	r3, r0, #0
10010f06:	1eb0      	subs	r0, r6, #2
10010f08:	2805      	cmp	r0, #5
10010f0a:	d85d      	bhi.n	10010fc8 <gapc_bond_ind+0xc8>
10010f0c:	1c15      	adds	r5, r2, #0
10010f0e:	1c0c      	adds	r4, r1, #0
10010f10:	f002 fbb8 	bl	10013684 <__gnu_thumb1_case_uqi>
10010f14:	2f5a030d 	.word	0x2f5a030d
10010f18:	4740      	.short	0x4740
10010f1a:	2009      	movs	r0, #9
10010f1c:	2a00      	cmp	r2, #0
10010f1e:	d054      	beq.n	10010fca <gapc_bond_ind+0xca>
10010f20:	0a1b      	lsrs	r3, r3, #8
10010f22:	8053      	strh	r3, [r2, #2]
10010f24:	788b      	ldrb	r3, [r1, #2]
10010f26:	4829      	ldr	r0, [pc, #164]	; (10010fcc <gapc_bond_ind+0xcc>)
10010f28:	7113      	strb	r3, [r2, #4]
10010f2a:	2100      	movs	r1, #0
10010f2c:	e01c      	b.n	10010f68 <gapc_bond_ind+0x68>
10010f2e:	2009      	movs	r0, #9
10010f30:	2a00      	cmp	r2, #0
10010f32:	d04a      	beq.n	10010fca <gapc_bond_ind+0xca>
10010f34:	4c25      	ldr	r4, [pc, #148]	; (10010fcc <gapc_bond_ind+0xcc>)
10010f36:	0a1b      	lsrs	r3, r3, #8
10010f38:	8053      	strh	r3, [r2, #2]
10010f3a:	788b      	ldrb	r3, [r1, #2]
10010f3c:	2700      	movs	r7, #0
10010f3e:	1c10      	adds	r0, r2, #0
10010f40:	1c21      	adds	r1, r4, #0
10010f42:	7013      	strb	r3, [r2, #0]
10010f44:	4e22      	ldr	r6, [pc, #136]	; (10010fd0 <gapc_bond_ind+0xd0>)
10010f46:	7117      	strb	r7, [r2, #4]
10010f48:	312e      	adds	r1, #46	; 0x2e
10010f4a:	2217      	movs	r2, #23
10010f4c:	3032      	adds	r0, #50	; 0x32
10010f4e:	47b0      	blx	r6
10010f50:	1c28      	adds	r0, r5, #0
10010f52:	1c21      	adds	r1, r4, #0
10010f54:	2210      	movs	r2, #16
10010f56:	311e      	adds	r1, #30
10010f58:	3022      	adds	r0, #34	; 0x22
10010f5a:	47b0      	blx	r6
10010f5c:	1ca1      	adds	r1, r4, #2
10010f5e:	1da8      	adds	r0, r5, #6
10010f60:	221c      	movs	r2, #28
10010f62:	47b0      	blx	r6
10010f64:	1c20      	adds	r0, r4, #0
10010f66:	1c39      	adds	r1, r7, #0
10010f68:	2246      	movs	r2, #70	; 0x46
10010f6a:	4b1a      	ldr	r3, [pc, #104]	; (10010fd4 <gapc_bond_ind+0xd4>)
10010f6c:	4798      	blx	r3
10010f6e:	2009      	movs	r0, #9
10010f70:	e02b      	b.n	10010fca <gapc_bond_ind+0xca>
10010f72:	4d16      	ldr	r5, [pc, #88]	; (10010fcc <gapc_bond_ind+0xcc>)
10010f74:	3102      	adds	r1, #2
10010f76:	1c28      	adds	r0, r5, #0
10010f78:	2210      	movs	r2, #16
10010f7a:	4e15      	ldr	r6, [pc, #84]	; (10010fd0 <gapc_bond_ind+0xd0>)
10010f7c:	302e      	adds	r0, #46	; 0x2e
10010f7e:	47b0      	blx	r6
10010f80:	1c28      	adds	r0, r5, #0
10010f82:	1c21      	adds	r1, r4, #0
10010f84:	303f      	adds	r0, #63	; 0x3f
10010f86:	3112      	adds	r1, #18
10010f88:	2206      	movs	r2, #6
10010f8a:	47b0      	blx	r6
10010f8c:	7e23      	ldrb	r3, [r4, #24]
10010f8e:	353e      	adds	r5, #62	; 0x3e
10010f90:	702b      	strb	r3, [r5, #0]
10010f92:	e019      	b.n	10010fc8 <gapc_bond_ind+0xc8>
10010f94:	480d      	ldr	r0, [pc, #52]	; (10010fcc <gapc_bond_ind+0xcc>)
10010f96:	3102      	adds	r1, #2
10010f98:	2210      	movs	r2, #16
10010f9a:	4b0d      	ldr	r3, [pc, #52]	; (10010fd0 <gapc_bond_ind+0xd0>)
10010f9c:	301e      	adds	r0, #30
10010f9e:	4798      	blx	r3
10010fa0:	e012      	b.n	10010fc8 <gapc_bond_ind+0xc8>
10010fa2:	4d0a      	ldr	r5, [pc, #40]	; (10010fcc <gapc_bond_ind+0xcc>)
10010fa4:	3102      	adds	r1, #2
10010fa6:	2210      	movs	r2, #16
10010fa8:	4e09      	ldr	r6, [pc, #36]	; (10010fd0 <gapc_bond_ind+0xd0>)
10010faa:	1ca8      	adds	r0, r5, #2
10010fac:	47b0      	blx	r6
10010fae:	1c28      	adds	r0, r5, #0
10010fb0:	1c21      	adds	r1, r4, #0
10010fb2:	7ce3      	ldrb	r3, [r4, #19]
10010fb4:	7ca2      	ldrb	r2, [r4, #18]
10010fb6:	021b      	lsls	r3, r3, #8
10010fb8:	4313      	orrs	r3, r2
10010fba:	3014      	adds	r0, #20
10010fbc:	3114      	adds	r1, #20
10010fbe:	2208      	movs	r2, #8
10010fc0:	826b      	strh	r3, [r5, #18]
10010fc2:	47b0      	blx	r6
10010fc4:	7f23      	ldrb	r3, [r4, #28]
10010fc6:	772b      	strb	r3, [r5, #28]
10010fc8:	2000      	movs	r0, #0
10010fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010fcc:	1001ae1c 	.word	0x1001ae1c
10010fd0:	100166cf 	.word	0x100166cf
10010fd4:	100166e1 	.word	0x100166e1

10010fd8 <gapc_bond_req_ind>:
10010fd8:	b570      	push	{r4, r5, r6, lr}
10010fda:	780c      	ldrb	r4, [r1, #0]
10010fdc:	1c03      	adds	r3, r0, #0
10010fde:	7849      	ldrb	r1, [r1, #1]
10010fe0:	2c07      	cmp	r4, #7
10010fe2:	d85c      	bhi.n	1001109e <gapc_bond_req_ind+0xc6>
10010fe4:	1c20      	adds	r0, r4, #0
10010fe6:	f002 fb4d 	bl	10013684 <__gnu_thumb1_case_uqi>
10010fea:	5a04      	.short	0x5a04
10010fec:	5a0b5a5a 	.word	0x5a0b5a5a
10010ff0:	1f1f      	.short	0x1f1f
10010ff2:	200a      	movs	r0, #10
10010ff4:	2a00      	cmp	r2, #0
10010ff6:	d053      	beq.n	100110a0 <gapc_bond_req_ind+0xc8>
10010ff8:	0a1b      	lsrs	r3, r3, #8
10010ffa:	8013      	strh	r3, [r2, #0]
10010ffc:	7091      	strb	r1, [r2, #2]
10010ffe:	e04f      	b.n	100110a0 <gapc_bond_req_ind+0xc8>
10011000:	2a00      	cmp	r2, #0
10011002:	d00b      	beq.n	1001101c <gapc_bond_req_ind+0x44>
10011004:	0a1b      	lsrs	r3, r3, #8
10011006:	8013      	strh	r3, [r2, #0]
10011008:	2900      	cmp	r1, #0
1001100a:	d102      	bne.n	10011012 <gapc_bond_req_ind+0x3a>
1001100c:	2301      	movs	r3, #1
1001100e:	7093      	strb	r3, [r2, #2]
10011010:	e004      	b.n	1001101c <gapc_bond_req_ind+0x44>
10011012:	2300      	movs	r3, #0
10011014:	7093      	strb	r3, [r2, #2]
10011016:	2902      	cmp	r1, #2
10011018:	d102      	bne.n	10011020 <gapc_bond_req_ind+0x48>
1001101a:	70d3      	strb	r3, [r2, #3]
1001101c:	200c      	movs	r0, #12
1001101e:	e03f      	b.n	100110a0 <gapc_bond_req_ind+0xc8>
10011020:	2901      	cmp	r1, #1
10011022:	d1fb      	bne.n	1001101c <gapc_bond_req_ind+0x44>
10011024:	70d1      	strb	r1, [r2, #3]
10011026:	e7f9      	b.n	1001101c <gapc_bond_req_ind+0x44>
10011028:	2214      	movs	r2, #20
1001102a:	481e      	ldr	r0, [pc, #120]	; (100110a4 <gapc_bond_req_ind+0xcc>)
1001102c:	0a1b      	lsrs	r3, r3, #8
1001102e:	70c3      	strb	r3, [r0, #3]
10011030:	4b1d      	ldr	r3, [pc, #116]	; (100110a8 <gapc_bond_req_ind+0xd0>)
10011032:	7002      	strb	r2, [r0, #0]
10011034:	3a06      	subs	r2, #6
10011036:	7042      	strb	r2, [r0, #1]
10011038:	7082      	strb	r2, [r0, #2]
1001103a:	881a      	ldrh	r2, [r3, #0]
1001103c:	881b      	ldrh	r3, [r3, #0]
1001103e:	4e1b      	ldr	r6, [pc, #108]	; (100110ac <gapc_bond_req_ind+0xd4>)
10011040:	0a1b      	lsrs	r3, r3, #8
10011042:	7143      	strb	r3, [r0, #5]
10011044:	2301      	movs	r3, #1
10011046:	7102      	strb	r2, [r0, #4]
10011048:	7204      	strb	r4, [r0, #8]
1001104a:	7243      	strb	r3, [r0, #9]
1001104c:	1c05      	adds	r5, r0, #0
1001104e:	1c31      	adds	r1, r6, #0
10011050:	300a      	adds	r0, #10
10011052:	2c07      	cmp	r4, #7
10011054:	d116      	bne.n	10011084 <gapc_bond_req_ind+0xac>
10011056:	317e      	adds	r1, #126	; 0x7e
10011058:	2210      	movs	r2, #16
1001105a:	4c15      	ldr	r4, [pc, #84]	; (100110b0 <gapc_bond_req_ind+0xd8>)
1001105c:	47a0      	blx	r4
1001105e:	1c33      	adds	r3, r6, #0
10011060:	1c31      	adds	r1, r6, #0
10011062:	1c28      	adds	r0, r5, #0
10011064:	338e      	adds	r3, #142	; 0x8e
10011066:	881b      	ldrh	r3, [r3, #0]
10011068:	3190      	adds	r1, #144	; 0x90
1001106a:	76ab      	strb	r3, [r5, #26]
1001106c:	2208      	movs	r2, #8
1001106e:	0a1b      	lsrs	r3, r3, #8
10011070:	301c      	adds	r0, #28
10011072:	76eb      	strb	r3, [r5, #27]
10011074:	47a0      	blx	r4
10011076:	1c31      	adds	r1, r6, #0
10011078:	3198      	adds	r1, #152	; 0x98
1001107a:	780a      	ldrb	r2, [r1, #0]
1001107c:	1d6b      	adds	r3, r5, #5
1001107e:	77da      	strb	r2, [r3, #31]
10011080:	2125      	movs	r1, #37	; 0x25
10011082:	e004      	b.n	1001108e <gapc_bond_req_ind+0xb6>
10011084:	319a      	adds	r1, #154	; 0x9a
10011086:	2210      	movs	r2, #16
10011088:	4b09      	ldr	r3, [pc, #36]	; (100110b0 <gapc_bond_req_ind+0xd8>)
1001108a:	4798      	blx	r3
1001108c:	211a      	movs	r1, #26
1001108e:	1c0b      	adds	r3, r1, #0
10011090:	2400      	movs	r4, #0
10011092:	3b08      	subs	r3, #8
10011094:	71ab      	strb	r3, [r5, #6]
10011096:	1c28      	adds	r0, r5, #0
10011098:	4b06      	ldr	r3, [pc, #24]	; (100110b4 <gapc_bond_req_ind+0xdc>)
1001109a:	71ec      	strb	r4, [r5, #7]
1001109c:	4798      	blx	r3
1001109e:	2000      	movs	r0, #0
100110a0:	bd70      	pop	{r4, r5, r6, pc}
100110a2:	46c0      	nop			; (mov r8, r8)
100110a4:	1001c098 	.word	0x1001c098
100110a8:	1001bd28 	.word	0x1001bd28
100110ac:	1001bdba 	.word	0x1001bdba
100110b0:	100166cf 	.word	0x100166cf
100110b4:	10010979 	.word	0x10010979

100110b8 <gapc_bond_cfm_handler_pair_resp>:
100110b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100110ba:	b085      	sub	sp, #20
100110bc:	1c07      	adds	r7, r0, #0
100110be:	a80a      	add	r0, sp, #40	; 0x28
100110c0:	7806      	ldrb	r6, [r0, #0]
100110c2:	a80b      	add	r0, sp, #44	; 0x2c
100110c4:	7805      	ldrb	r5, [r0, #0]
100110c6:	a80c      	add	r0, sp, #48	; 0x30
100110c8:	7800      	ldrb	r0, [r0, #0]
100110ca:	2414      	movs	r4, #20
100110cc:	9002      	str	r0, [sp, #8]
100110ce:	a80d      	add	r0, sp, #52	; 0x34
100110d0:	7800      	ldrb	r0, [r0, #0]
100110d2:	9301      	str	r3, [sp, #4]
100110d4:	9003      	str	r0, [sp, #12]
100110d6:	a80e      	add	r0, sp, #56	; 0x38
100110d8:	8800      	ldrh	r0, [r0, #0]
100110da:	4684      	mov	ip, r0
100110dc:	4812      	ldr	r0, [pc, #72]	; (10011128 <gapc_bond_cfm_handler_pair_resp+0x70>)
100110de:	7004      	strb	r4, [r0, #0]
100110e0:	3c06      	subs	r4, #6
100110e2:	7044      	strb	r4, [r0, #1]
100110e4:	7084      	strb	r4, [r0, #2]
100110e6:	4664      	mov	r4, ip
100110e8:	70c4      	strb	r4, [r0, #3]
100110ea:	4c10      	ldr	r4, [pc, #64]	; (1001112c <gapc_bond_cfm_handler_pair_resp+0x74>)
100110ec:	7247      	strb	r7, [r0, #9]
100110ee:	8823      	ldrh	r3, [r4, #0]
100110f0:	8824      	ldrh	r4, [r4, #0]
100110f2:	7103      	strb	r3, [r0, #4]
100110f4:	466b      	mov	r3, sp
100110f6:	791b      	ldrb	r3, [r3, #4]
100110f8:	0a24      	lsrs	r4, r4, #8
100110fa:	7303      	strb	r3, [r0, #12]
100110fc:	466b      	mov	r3, sp
100110fe:	7a1b      	ldrb	r3, [r3, #8]
10011100:	7144      	strb	r4, [r0, #5]
10011102:	73c3      	strb	r3, [r0, #15]
10011104:	466b      	mov	r3, sp
10011106:	7b1b      	ldrb	r3, [r3, #12]
10011108:	2401      	movs	r4, #1
1001110a:	7403      	strb	r3, [r0, #16]
1001110c:	2309      	movs	r3, #9
1001110e:	7183      	strb	r3, [r0, #6]
10011110:	2300      	movs	r3, #0
10011112:	7204      	strb	r4, [r0, #8]
10011114:	7281      	strb	r1, [r0, #10]
10011116:	72c2      	strb	r2, [r0, #11]
10011118:	7346      	strb	r6, [r0, #13]
1001111a:	7385      	strb	r5, [r0, #14]
1001111c:	71c3      	strb	r3, [r0, #7]
1001111e:	2111      	movs	r1, #17
10011120:	4b03      	ldr	r3, [pc, #12]	; (10011130 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011122:	4798      	blx	r3
10011124:	b005      	add	sp, #20
10011126:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011128:	1001c098 	.word	0x1001c098
1001112c:	1001bd28 	.word	0x1001bd28
10011130:	10010979 	.word	0x10010979

10011134 <gapc_bond_cfm_handler_key_exch>:
10011134:	b538      	push	{r3, r4, r5, lr}
10011136:	2514      	movs	r5, #20
10011138:	4c0d      	ldr	r4, [pc, #52]	; (10011170 <gapc_bond_cfm_handler_key_exch+0x3c>)
1001113a:	70e3      	strb	r3, [r4, #3]
1001113c:	4b0d      	ldr	r3, [pc, #52]	; (10011174 <gapc_bond_cfm_handler_key_exch+0x40>)
1001113e:	7025      	strb	r5, [r4, #0]
10011140:	3d06      	subs	r5, #6
10011142:	7065      	strb	r5, [r4, #1]
10011144:	70a5      	strb	r5, [r4, #2]
10011146:	881d      	ldrh	r5, [r3, #0]
10011148:	881b      	ldrh	r3, [r3, #0]
1001114a:	7220      	strb	r0, [r4, #8]
1001114c:	0a1b      	lsrs	r3, r3, #8
1001114e:	7163      	strb	r3, [r4, #5]
10011150:	7261      	strb	r1, [r4, #9]
10011152:	4b09      	ldr	r3, [pc, #36]	; (10011178 <gapc_bond_cfm_handler_key_exch+0x44>)
10011154:	1c11      	adds	r1, r2, #0
10011156:	4809      	ldr	r0, [pc, #36]	; (1001117c <gapc_bond_cfm_handler_key_exch+0x48>)
10011158:	2210      	movs	r2, #16
1001115a:	7125      	strb	r5, [r4, #4]
1001115c:	4798      	blx	r3
1001115e:	2312      	movs	r3, #18
10011160:	71a3      	strb	r3, [r4, #6]
10011162:	2300      	movs	r3, #0
10011164:	1c20      	adds	r0, r4, #0
10011166:	71e3      	strb	r3, [r4, #7]
10011168:	211a      	movs	r1, #26
1001116a:	4b05      	ldr	r3, [pc, #20]	; (10011180 <gapc_bond_cfm_handler_key_exch+0x4c>)
1001116c:	4798      	blx	r3
1001116e:	bd38      	pop	{r3, r4, r5, pc}
10011170:	1001c098 	.word	0x1001c098
10011174:	1001bd28 	.word	0x1001bd28
10011178:	100166cf 	.word	0x100166cf
1001117c:	1001c0a2 	.word	0x1001c0a2
10011180:	10010979 	.word	0x10010979

10011184 <gapc_security_cmd_handler>:
10011184:	221a      	movs	r2, #26
10011186:	b508      	push	{r3, lr}
10011188:	4b0b      	ldr	r3, [pc, #44]	; (100111b8 <gapc_security_cmd_handler+0x34>)
1001118a:	701a      	strb	r2, [r3, #0]
1001118c:	3a0c      	subs	r2, #12
1001118e:	705a      	strb	r2, [r3, #1]
10011190:	709a      	strb	r2, [r3, #2]
10011192:	4a0a      	ldr	r2, [pc, #40]	; (100111bc <gapc_security_cmd_handler+0x38>)
10011194:	70d8      	strb	r0, [r3, #3]
10011196:	8810      	ldrh	r0, [r2, #0]
10011198:	8812      	ldrh	r2, [r2, #0]
1001119a:	7118      	strb	r0, [r3, #4]
1001119c:	0a12      	lsrs	r2, r2, #8
1001119e:	715a      	strb	r2, [r3, #5]
100111a0:	220c      	movs	r2, #12
100111a2:	721a      	strb	r2, [r3, #8]
100111a4:	3a0a      	subs	r2, #10
100111a6:	719a      	strb	r2, [r3, #6]
100111a8:	2200      	movs	r2, #0
100111aa:	7259      	strb	r1, [r3, #9]
100111ac:	71da      	strb	r2, [r3, #7]
100111ae:	1c18      	adds	r0, r3, #0
100111b0:	210a      	movs	r1, #10
100111b2:	4b03      	ldr	r3, [pc, #12]	; (100111c0 <gapc_security_cmd_handler+0x3c>)
100111b4:	4798      	blx	r3
100111b6:	bd08      	pop	{r3, pc}
100111b8:	1001c098 	.word	0x1001c098
100111bc:	1001bd28 	.word	0x1001bd28
100111c0:	10010979 	.word	0x10010979

100111c4 <gapc_encrypt_cmd_handler>:
100111c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100111c6:	2500      	movs	r5, #0
100111c8:	b089      	sub	sp, #36	; 0x24
100111ca:	9306      	str	r3, [sp, #24]
100111cc:	ab0e      	add	r3, sp, #56	; 0x38
100111ce:	781b      	ldrb	r3, [r3, #0]
100111d0:	1c17      	adds	r7, r2, #0
100111d2:	9307      	str	r3, [sp, #28]
100111d4:	ab0f      	add	r3, sp, #60	; 0x3c
100111d6:	781b      	ldrb	r3, [r3, #0]
100111d8:	4a19      	ldr	r2, [pc, #100]	; (10011240 <gapc_encrypt_cmd_handler+0x7c>)
100111da:	1c06      	adds	r6, r0, #0
100111dc:	9105      	str	r1, [sp, #20]
100111de:	9300      	str	r3, [sp, #0]
100111e0:	9002      	str	r0, [sp, #8]
100111e2:	1c29      	adds	r1, r5, #0
100111e4:	1c2b      	adds	r3, r5, #0
100111e6:	9501      	str	r5, [sp, #4]
100111e8:	1c10      	adds	r0, r2, #0
100111ea:	4c16      	ldr	r4, [pc, #88]	; (10011244 <gapc_encrypt_cmd_handler+0x80>)
100111ec:	47a0      	blx	r4
100111ee:	2316      	movs	r3, #22
100111f0:	4c15      	ldr	r4, [pc, #84]	; (10011248 <gapc_encrypt_cmd_handler+0x84>)
100111f2:	9905      	ldr	r1, [sp, #20]
100111f4:	7023      	strb	r3, [r4, #0]
100111f6:	3b08      	subs	r3, #8
100111f8:	7063      	strb	r3, [r4, #1]
100111fa:	70a3      	strb	r3, [r4, #2]
100111fc:	4b13      	ldr	r3, [pc, #76]	; (1001124c <gapc_encrypt_cmd_handler+0x88>)
100111fe:	70e6      	strb	r6, [r4, #3]
10011200:	881a      	ldrh	r2, [r3, #0]
10011202:	881b      	ldrh	r3, [r3, #0]
10011204:	7122      	strb	r2, [r4, #4]
10011206:	0a1b      	lsrs	r3, r3, #8
10011208:	7163      	strb	r3, [r4, #5]
1001120a:	230b      	movs	r3, #11
1001120c:	4e10      	ldr	r6, [pc, #64]	; (10011250 <gapc_encrypt_cmd_handler+0x8c>)
1001120e:	2210      	movs	r2, #16
10011210:	4810      	ldr	r0, [pc, #64]	; (10011254 <gapc_encrypt_cmd_handler+0x90>)
10011212:	7223      	strb	r3, [r4, #8]
10011214:	7265      	strb	r5, [r4, #9]
10011216:	47b0      	blx	r6
10011218:	0a3b      	lsrs	r3, r7, #8
1001121a:	9906      	ldr	r1, [sp, #24]
1001121c:	2208      	movs	r2, #8
1001121e:	480e      	ldr	r0, [pc, #56]	; (10011258 <gapc_encrypt_cmd_handler+0x94>)
10011220:	76e3      	strb	r3, [r4, #27]
10011222:	76a7      	strb	r7, [r4, #26]
10011224:	47b0      	blx	r6
10011226:	466a      	mov	r2, sp
10011228:	7f12      	ldrb	r2, [r2, #28]
1001122a:	1d63      	adds	r3, r4, #5
1001122c:	77da      	strb	r2, [r3, #31]
1001122e:	231d      	movs	r3, #29
10011230:	1c20      	adds	r0, r4, #0
10011232:	71a3      	strb	r3, [r4, #6]
10011234:	2125      	movs	r1, #37	; 0x25
10011236:	4b09      	ldr	r3, [pc, #36]	; (1001125c <gapc_encrypt_cmd_handler+0x98>)
10011238:	71e5      	strb	r5, [r4, #7]
1001123a:	4798      	blx	r3
1001123c:	b009      	add	sp, #36	; 0x24
1001123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011240:	1001adfc 	.word	0x1001adfc
10011244:	10010c7d 	.word	0x10010c7d
10011248:	1001c098 	.word	0x1001c098
1001124c:	1001bd28 	.word	0x1001bd28
10011250:	100166cf 	.word	0x100166cf
10011254:	1001c0a2 	.word	0x1001c0a2
10011258:	1001c0b4 	.word	0x1001c0b4
1001125c:	10010979 	.word	0x10010979

10011260 <gapc_encrypt_req_ind>:
10011260:	b508      	push	{r3, lr}
10011262:	0a00      	lsrs	r0, r0, #8
10011264:	8010      	strh	r0, [r2, #0]
10011266:	784b      	ldrb	r3, [r1, #1]
10011268:	7808      	ldrb	r0, [r1, #0]
1001126a:	021b      	lsls	r3, r3, #8
1001126c:	4303      	orrs	r3, r0
1001126e:	8053      	strh	r3, [r2, #2]
10011270:	1d10      	adds	r0, r2, #4
10011272:	3102      	adds	r1, #2
10011274:	2208      	movs	r2, #8
10011276:	4b01      	ldr	r3, [pc, #4]	; (1001127c <gapc_encrypt_req_ind+0x1c>)
10011278:	4798      	blx	r3
1001127a:	bd08      	pop	{r3, pc}
1001127c:	100166cf 	.word	0x100166cf

10011280 <gapc_encrypt_cfm_handler>:
10011280:	b5f0      	push	{r4, r5, r6, r7, lr}
10011282:	2500      	movs	r5, #0
10011284:	b087      	sub	sp, #28
10011286:	9304      	str	r3, [sp, #16]
10011288:	ab0c      	add	r3, sp, #48	; 0x30
1001128a:	781b      	ldrb	r3, [r3, #0]
1001128c:	1c17      	adds	r7, r2, #0
1001128e:	4a15      	ldr	r2, [pc, #84]	; (100112e4 <gapc_encrypt_cfm_handler+0x64>)
10011290:	1c06      	adds	r6, r0, #0
10011292:	9305      	str	r3, [sp, #20]
10011294:	9100      	str	r1, [sp, #0]
10011296:	9002      	str	r0, [sp, #8]
10011298:	1c29      	adds	r1, r5, #0
1001129a:	1c2b      	adds	r3, r5, #0
1001129c:	9501      	str	r5, [sp, #4]
1001129e:	1c10      	adds	r0, r2, #0
100112a0:	4c11      	ldr	r4, [pc, #68]	; (100112e8 <gapc_encrypt_cfm_handler+0x68>)
100112a2:	47a0      	blx	r4
100112a4:	2318      	movs	r3, #24
100112a6:	4c11      	ldr	r4, [pc, #68]	; (100112ec <gapc_encrypt_cfm_handler+0x6c>)
100112a8:	9904      	ldr	r1, [sp, #16]
100112aa:	7023      	strb	r3, [r4, #0]
100112ac:	3b0a      	subs	r3, #10
100112ae:	7063      	strb	r3, [r4, #1]
100112b0:	70a3      	strb	r3, [r4, #2]
100112b2:	4b0f      	ldr	r3, [pc, #60]	; (100112f0 <gapc_encrypt_cfm_handler+0x70>)
100112b4:	480f      	ldr	r0, [pc, #60]	; (100112f4 <gapc_encrypt_cfm_handler+0x74>)
100112b6:	881a      	ldrh	r2, [r3, #0]
100112b8:	881b      	ldrh	r3, [r3, #0]
100112ba:	7122      	strb	r2, [r4, #4]
100112bc:	0a1b      	lsrs	r3, r3, #8
100112be:	7163      	strb	r3, [r4, #5]
100112c0:	2210      	movs	r2, #16
100112c2:	4b0d      	ldr	r3, [pc, #52]	; (100112f8 <gapc_encrypt_cfm_handler+0x78>)
100112c4:	70e6      	strb	r6, [r4, #3]
100112c6:	7227      	strb	r7, [r4, #8]
100112c8:	4798      	blx	r3
100112ca:	466b      	mov	r3, sp
100112cc:	7d1b      	ldrb	r3, [r3, #20]
100112ce:	1c20      	adds	r0, r4, #0
100112d0:	7663      	strb	r3, [r4, #25]
100112d2:	2312      	movs	r3, #18
100112d4:	211a      	movs	r1, #26
100112d6:	71a3      	strb	r3, [r4, #6]
100112d8:	4b08      	ldr	r3, [pc, #32]	; (100112fc <gapc_encrypt_cfm_handler+0x7c>)
100112da:	71e5      	strb	r5, [r4, #7]
100112dc:	4798      	blx	r3
100112de:	b007      	add	sp, #28
100112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112e2:	46c0      	nop			; (mov r8, r8)
100112e4:	1001ae0c 	.word	0x1001ae0c
100112e8:	10010c7d 	.word	0x10010c7d
100112ec:	1001c098 	.word	0x1001c098
100112f0:	1001bd28 	.word	0x1001bd28
100112f4:	1001c0a1 	.word	0x1001c0a1
100112f8:	100166cf 	.word	0x100166cf
100112fc:	10010979 	.word	0x10010979

10011300 <gapc_encrypt_ind>:
10011300:	780b      	ldrb	r3, [r1, #0]
10011302:	0a00      	lsrs	r0, r0, #8
10011304:	70d3      	strb	r3, [r2, #3]
10011306:	2300      	movs	r3, #0
10011308:	8010      	strh	r0, [r2, #0]
1001130a:	7093      	strb	r3, [r2, #2]
1001130c:	4770      	bx	lr
	...

10011310 <gapc_param_update_cfm_handler>:
10011310:	b538      	push	{r3, r4, r5, lr}
10011312:	2410      	movs	r4, #16
10011314:	1c05      	adds	r5, r0, #0
10011316:	480e      	ldr	r0, [pc, #56]	; (10011350 <gapc_param_update_cfm_handler+0x40>)
10011318:	7004      	strb	r4, [r0, #0]
1001131a:	3c02      	subs	r4, #2
1001131c:	7044      	strb	r4, [r0, #1]
1001131e:	7084      	strb	r4, [r0, #2]
10011320:	4c0c      	ldr	r4, [pc, #48]	; (10011354 <gapc_param_update_cfm_handler+0x44>)
10011322:	70c5      	strb	r5, [r0, #3]
10011324:	8825      	ldrh	r5, [r4, #0]
10011326:	8824      	ldrh	r4, [r4, #0]
10011328:	72c3      	strb	r3, [r0, #11]
1001132a:	0a1b      	lsrs	r3, r3, #8
1001132c:	0a24      	lsrs	r4, r4, #8
1001132e:	7303      	strb	r3, [r0, #12]
10011330:	2305      	movs	r3, #5
10011332:	7144      	strb	r4, [r0, #5]
10011334:	2400      	movs	r4, #0
10011336:	7201      	strb	r1, [r0, #8]
10011338:	7242      	strb	r2, [r0, #9]
1001133a:	7183      	strb	r3, [r0, #6]
1001133c:	0a12      	lsrs	r2, r2, #8
1001133e:	210d      	movs	r1, #13
10011340:	4b05      	ldr	r3, [pc, #20]	; (10011358 <gapc_param_update_cfm_handler+0x48>)
10011342:	7105      	strb	r5, [r0, #4]
10011344:	7282      	strb	r2, [r0, #10]
10011346:	71c4      	strb	r4, [r0, #7]
10011348:	4798      	blx	r3
1001134a:	1c20      	adds	r0, r4, #0
1001134c:	bd38      	pop	{r3, r4, r5, pc}
1001134e:	46c0      	nop			; (mov r8, r8)
10011350:	1001c098 	.word	0x1001c098
10011354:	1001bd28 	.word	0x1001bd28
10011358:	10010979 	.word	0x10010979

1001135c <gapc_param_updated_ind>:
1001135c:	2300      	movs	r3, #0
1001135e:	0a00      	lsrs	r0, r0, #8
10011360:	8010      	strh	r0, [r2, #0]
10011362:	7093      	strb	r3, [r2, #2]
10011364:	784b      	ldrb	r3, [r1, #1]
10011366:	7808      	ldrb	r0, [r1, #0]
10011368:	021b      	lsls	r3, r3, #8
1001136a:	4303      	orrs	r3, r0
1001136c:	8093      	strh	r3, [r2, #4]
1001136e:	78cb      	ldrb	r3, [r1, #3]
10011370:	7888      	ldrb	r0, [r1, #2]
10011372:	021b      	lsls	r3, r3, #8
10011374:	4303      	orrs	r3, r0
10011376:	80d3      	strh	r3, [r2, #6]
10011378:	794b      	ldrb	r3, [r1, #5]
1001137a:	7909      	ldrb	r1, [r1, #4]
1001137c:	021b      	lsls	r3, r3, #8
1001137e:	430b      	orrs	r3, r1
10011380:	2007      	movs	r0, #7
10011382:	8113      	strh	r3, [r2, #8]
10011384:	4770      	bx	lr

10011386 <gapc_param_updated_req_ind>:
10011386:	0a00      	lsrs	r0, r0, #8
10011388:	8010      	strh	r0, [r2, #0]
1001138a:	784b      	ldrb	r3, [r1, #1]
1001138c:	7808      	ldrb	r0, [r1, #0]
1001138e:	021b      	lsls	r3, r3, #8
10011390:	4303      	orrs	r3, r0
10011392:	8053      	strh	r3, [r2, #2]
10011394:	78cb      	ldrb	r3, [r1, #3]
10011396:	7888      	ldrb	r0, [r1, #2]
10011398:	021b      	lsls	r3, r3, #8
1001139a:	4303      	orrs	r3, r0
1001139c:	8093      	strh	r3, [r2, #4]
1001139e:	794b      	ldrb	r3, [r1, #5]
100113a0:	7908      	ldrb	r0, [r1, #4]
100113a2:	021b      	lsls	r3, r3, #8
100113a4:	4303      	orrs	r3, r0
100113a6:	80d3      	strh	r3, [r2, #6]
100113a8:	79cb      	ldrb	r3, [r1, #7]
100113aa:	7989      	ldrb	r1, [r1, #6]
100113ac:	021b      	lsls	r3, r3, #8
100113ae:	430b      	orrs	r3, r1
100113b0:	2008      	movs	r0, #8
100113b2:	8113      	strh	r3, [r2, #8]
100113b4:	4770      	bx	lr
	...

100113b8 <gapc_dev_info_req_ind_handler>:
100113b8:	b508      	push	{r3, lr}
100113ba:	1c0b      	adds	r3, r1, #0
100113bc:	0a01      	lsrs	r1, r0, #8
100113be:	8011      	strh	r1, [r2, #0]
100113c0:	7818      	ldrb	r0, [r3, #0]
100113c2:	7090      	strb	r0, [r2, #2]
100113c4:	2800      	cmp	r0, #0
100113c6:	d104      	bne.n	100113d2 <gapc_dev_info_req_ind_handler+0x1a>
100113c8:	4b03      	ldr	r3, [pc, #12]	; (100113d8 <gapc_dev_info_req_ind_handler+0x20>)
100113ca:	33aa      	adds	r3, #170	; 0xaa
100113cc:	881b      	ldrh	r3, [r3, #0]
100113ce:	2b00      	cmp	r3, #0
100113d0:	d001      	beq.n	100113d6 <gapc_dev_info_req_ind_handler+0x1e>
100113d2:	4b02      	ldr	r3, [pc, #8]	; (100113dc <gapc_dev_info_req_ind_handler+0x24>)
100113d4:	4798      	blx	r3
100113d6:	bd08      	pop	{r3, pc}
100113d8:	1001bdba 	.word	0x1001bdba
100113dc:	10010a89 	.word	0x10010a89

100113e0 <gapc_sec_req_ind>:
100113e0:	0a00      	lsrs	r0, r0, #8
100113e2:	8010      	strh	r0, [r2, #0]
100113e4:	7809      	ldrb	r1, [r1, #0]
100113e6:	2301      	movs	r3, #1
100113e8:	1c08      	adds	r0, r1, #0
100113ea:	0889      	lsrs	r1, r1, #2
100113ec:	4018      	ands	r0, r3
100113ee:	400b      	ands	r3, r1
100113f0:	70d0      	strb	r0, [r2, #3]
100113f2:	7113      	strb	r3, [r2, #4]
100113f4:	4770      	bx	lr

100113f6 <gapc_sign_counter_ind_handler>:
100113f6:	0a00      	lsrs	r0, r0, #8
100113f8:	8010      	strh	r0, [r2, #0]
100113fa:	784b      	ldrb	r3, [r1, #1]
100113fc:	0218      	lsls	r0, r3, #8
100113fe:	788b      	ldrb	r3, [r1, #2]
10011400:	041b      	lsls	r3, r3, #16
10011402:	4303      	orrs	r3, r0
10011404:	7808      	ldrb	r0, [r1, #0]
10011406:	4303      	orrs	r3, r0
10011408:	78c8      	ldrb	r0, [r1, #3]
1001140a:	0600      	lsls	r0, r0, #24
1001140c:	4303      	orrs	r3, r0
1001140e:	6053      	str	r3, [r2, #4]
10011410:	794b      	ldrb	r3, [r1, #5]
10011412:	0218      	lsls	r0, r3, #8
10011414:	798b      	ldrb	r3, [r1, #6]
10011416:	041b      	lsls	r3, r3, #16
10011418:	4303      	orrs	r3, r0
1001141a:	7908      	ldrb	r0, [r1, #4]
1001141c:	79c9      	ldrb	r1, [r1, #7]
1001141e:	4303      	orrs	r3, r0
10011420:	0609      	lsls	r1, r1, #24
10011422:	430b      	orrs	r3, r1
10011424:	2000      	movs	r0, #0
10011426:	6093      	str	r3, [r2, #8]
10011428:	4770      	bx	lr
	...

1001142c <gapc_peer_att_info_ind_handler>:
1001142c:	b510      	push	{r4, lr}
1001142e:	0a00      	lsrs	r0, r0, #8
10011430:	8010      	strh	r0, [r2, #0]
10011432:	7808      	ldrb	r0, [r1, #0]
10011434:	7090      	strb	r0, [r2, #2]
10011436:	788b      	ldrb	r3, [r1, #2]
10011438:	784c      	ldrb	r4, [r1, #1]
1001143a:	021b      	lsls	r3, r3, #8
1001143c:	4323      	orrs	r3, r4
1001143e:	8093      	strh	r3, [r2, #4]
10011440:	2801      	cmp	r0, #1
10011442:	d027      	beq.n	10011494 <gapc_peer_att_info_ind_handler+0x68>
10011444:	2800      	cmp	r0, #0
10011446:	d017      	beq.n	10011478 <gapc_peer_att_info_ind_handler+0x4c>
10011448:	2802      	cmp	r0, #2
1001144a:	d12a      	bne.n	100114a2 <gapc_peer_att_info_ind_handler+0x76>
1001144c:	790b      	ldrb	r3, [r1, #4]
1001144e:	78c8      	ldrb	r0, [r1, #3]
10011450:	021b      	lsls	r3, r3, #8
10011452:	4303      	orrs	r3, r0
10011454:	8113      	strh	r3, [r2, #8]
10011456:	798b      	ldrb	r3, [r1, #6]
10011458:	7948      	ldrb	r0, [r1, #5]
1001145a:	021b      	lsls	r3, r3, #8
1001145c:	4303      	orrs	r3, r0
1001145e:	80d3      	strh	r3, [r2, #6]
10011460:	7a0b      	ldrb	r3, [r1, #8]
10011462:	79c8      	ldrb	r0, [r1, #7]
10011464:	021b      	lsls	r3, r3, #8
10011466:	4303      	orrs	r3, r0
10011468:	8193      	strh	r3, [r2, #12]
1001146a:	7a8b      	ldrb	r3, [r1, #10]
1001146c:	7a49      	ldrb	r1, [r1, #9]
1001146e:	021b      	lsls	r3, r3, #8
10011470:	430b      	orrs	r3, r1
10011472:	8153      	strh	r3, [r2, #10]
10011474:	2306      	movs	r3, #6
10011476:	e013      	b.n	100114a0 <gapc_peer_att_info_ind_handler+0x74>
10011478:	1c14      	adds	r4, r2, #0
1001147a:	1c20      	adds	r0, r4, #0
1001147c:	790a      	ldrb	r2, [r1, #4]
1001147e:	78cb      	ldrb	r3, [r1, #3]
10011480:	0212      	lsls	r2, r2, #8
10011482:	431a      	orrs	r2, r3
10011484:	80e2      	strh	r2, [r4, #6]
10011486:	4b07      	ldr	r3, [pc, #28]	; (100114a4 <gapc_peer_att_info_ind_handler+0x78>)
10011488:	3008      	adds	r0, #8
1001148a:	3105      	adds	r1, #5
1001148c:	4798      	blx	r3
1001148e:	2302      	movs	r3, #2
10011490:	70a3      	strb	r3, [r4, #2]
10011492:	e006      	b.n	100114a2 <gapc_peer_att_info_ind_handler+0x76>
10011494:	790b      	ldrb	r3, [r1, #4]
10011496:	78c9      	ldrb	r1, [r1, #3]
10011498:	021b      	lsls	r3, r3, #8
1001149a:	430b      	orrs	r3, r1
1001149c:	80d3      	strh	r3, [r2, #6]
1001149e:	2305      	movs	r3, #5
100114a0:	7093      	strb	r3, [r2, #2]
100114a2:	bd10      	pop	{r4, pc}
100114a4:	100166cf 	.word	0x100166cf

100114a8 <gapc_con_channel_map_ind_handler>:
100114a8:	b508      	push	{r3, lr}
100114aa:	2300      	movs	r3, #0
100114ac:	0a00      	lsrs	r0, r0, #8
100114ae:	7013      	strb	r3, [r2, #0]
100114b0:	8050      	strh	r0, [r2, #2]
100114b2:	4b02      	ldr	r3, [pc, #8]	; (100114bc <gapc_con_channel_map_ind_handler+0x14>)
100114b4:	1d10      	adds	r0, r2, #4
100114b6:	2205      	movs	r2, #5
100114b8:	4798      	blx	r3
100114ba:	bd08      	pop	{r3, pc}
100114bc:	100166cf 	.word	0x100166cf

100114c0 <gapc_lecb_connected>:
100114c0:	7843      	ldrb	r3, [r0, #1]
100114c2:	7802      	ldrb	r2, [r0, #0]
100114c4:	021b      	lsls	r3, r3, #8
100114c6:	4313      	orrs	r3, r2
100114c8:	800b      	strh	r3, [r1, #0]
100114ca:	78c3      	ldrb	r3, [r0, #3]
100114cc:	7882      	ldrb	r2, [r0, #2]
100114ce:	021b      	lsls	r3, r3, #8
100114d0:	4313      	orrs	r3, r2
100114d2:	804b      	strh	r3, [r1, #2]
100114d4:	7943      	ldrb	r3, [r0, #5]
100114d6:	7902      	ldrb	r2, [r0, #4]
100114d8:	021b      	lsls	r3, r3, #8
100114da:	4313      	orrs	r3, r2
100114dc:	808b      	strh	r3, [r1, #4]
100114de:	79c3      	ldrb	r3, [r0, #7]
100114e0:	7982      	ldrb	r2, [r0, #6]
100114e2:	021b      	lsls	r3, r3, #8
100114e4:	4313      	orrs	r3, r2
100114e6:	80cb      	strh	r3, [r1, #6]
100114e8:	2300      	movs	r3, #0
100114ea:	720b      	strb	r3, [r1, #8]
100114ec:	4770      	bx	lr

100114ee <gapc_lecb_disconnected>:
100114ee:	7843      	ldrb	r3, [r0, #1]
100114f0:	7802      	ldrb	r2, [r0, #0]
100114f2:	021b      	lsls	r3, r3, #8
100114f4:	4313      	orrs	r3, r2
100114f6:	800b      	strh	r3, [r1, #0]
100114f8:	78c3      	ldrb	r3, [r0, #3]
100114fa:	7882      	ldrb	r2, [r0, #2]
100114fc:	021b      	lsls	r3, r3, #8
100114fe:	4313      	orrs	r3, r2
10011500:	804b      	strh	r3, [r1, #2]
10011502:	4770      	bx	lr

10011504 <gapc_lecb_connect_req_ind>:
10011504:	7843      	ldrb	r3, [r0, #1]
10011506:	7802      	ldrb	r2, [r0, #0]
10011508:	021b      	lsls	r3, r3, #8
1001150a:	4313      	orrs	r3, r2
1001150c:	800b      	strh	r3, [r1, #0]
1001150e:	78c3      	ldrb	r3, [r0, #3]
10011510:	7882      	ldrb	r2, [r0, #2]
10011512:	021b      	lsls	r3, r3, #8
10011514:	4313      	orrs	r3, r2
10011516:	804b      	strh	r3, [r1, #2]
10011518:	7943      	ldrb	r3, [r0, #5]
1001151a:	7902      	ldrb	r2, [r0, #4]
1001151c:	021b      	lsls	r3, r3, #8
1001151e:	4313      	orrs	r3, r2
10011520:	808b      	strh	r3, [r1, #4]
10011522:	79c3      	ldrb	r3, [r0, #7]
10011524:	7982      	ldrb	r2, [r0, #6]
10011526:	021b      	lsls	r3, r3, #8
10011528:	4313      	orrs	r3, r2
1001152a:	80cb      	strh	r3, [r1, #6]
1001152c:	4770      	bx	lr

1001152e <gapc_lecb_add_credit_resp_handler>:
1001152e:	7843      	ldrb	r3, [r0, #1]
10011530:	7802      	ldrb	r2, [r0, #0]
10011532:	021b      	lsls	r3, r3, #8
10011534:	4313      	orrs	r3, r2
10011536:	800b      	strh	r3, [r1, #0]
10011538:	78c3      	ldrb	r3, [r0, #3]
1001153a:	7882      	ldrb	r2, [r0, #2]
1001153c:	021b      	lsls	r3, r3, #8
1001153e:	4313      	orrs	r3, r2
10011540:	804b      	strh	r3, [r1, #2]
10011542:	7943      	ldrb	r3, [r0, #5]
10011544:	7902      	ldrb	r2, [r0, #4]
10011546:	021b      	lsls	r3, r3, #8
10011548:	4313      	orrs	r3, r2
1001154a:	808b      	strh	r3, [r1, #4]
1001154c:	4770      	bx	lr
	...

10011550 <gapm_reset_req_handler>:
10011550:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011552:	466b      	mov	r3, sp
10011554:	4915      	ldr	r1, [pc, #84]	; (100115ac <gapm_reset_req_handler+0x5c>)
10011556:	4816      	ldr	r0, [pc, #88]	; (100115b0 <gapm_reset_req_handler+0x60>)
10011558:	880c      	ldrh	r4, [r1, #0]
1001155a:	8809      	ldrh	r1, [r1, #0]
1001155c:	1ddd      	adds	r5, r3, #7
1001155e:	0a09      	lsrs	r1, r1, #8
10011560:	2300      	movs	r3, #0
10011562:	2202      	movs	r2, #2
10011564:	7141      	strb	r1, [r0, #5]
10011566:	26d0      	movs	r6, #208	; 0xd0
10011568:	2101      	movs	r1, #1
1001156a:	7104      	strb	r4, [r0, #4]
1001156c:	4c11      	ldr	r4, [pc, #68]	; (100115b4 <gapm_reset_req_handler+0x64>)
1001156e:	702b      	strb	r3, [r5, #0]
10011570:	7002      	strb	r2, [r0, #0]
10011572:	70c3      	strb	r3, [r0, #3]
10011574:	320b      	adds	r2, #11
10011576:	7201      	strb	r1, [r0, #8]
10011578:	7181      	strb	r1, [r0, #6]
1001157a:	71c3      	strb	r3, [r0, #7]
1001157c:	3108      	adds	r1, #8
1001157e:	4b0e      	ldr	r3, [pc, #56]	; (100115b8 <gapm_reset_req_handler+0x68>)
10011580:	0136      	lsls	r6, r6, #4
10011582:	7042      	strb	r2, [r0, #1]
10011584:	7082      	strb	r2, [r0, #2]
10011586:	80a2      	strh	r2, [r4, #4]
10011588:	8026      	strh	r6, [r4, #0]
1001158a:	4798      	blx	r3
1001158c:	1c28      	adds	r0, r5, #0
1001158e:	4b0b      	ldr	r3, [pc, #44]	; (100115bc <gapm_reset_req_handler+0x6c>)
10011590:	4798      	blx	r3
10011592:	782b      	ldrb	r3, [r5, #0]
10011594:	20e2      	movs	r0, #226	; 0xe2
10011596:	2b00      	cmp	r3, #0
10011598:	d106      	bne.n	100115a8 <gapm_reset_req_handler+0x58>
1001159a:	68a3      	ldr	r3, [r4, #8]
1001159c:	20e2      	movs	r0, #226	; 0xe2
1001159e:	781a      	ldrb	r2, [r3, #0]
100115a0:	785b      	ldrb	r3, [r3, #1]
100115a2:	2a01      	cmp	r2, #1
100115a4:	d100      	bne.n	100115a8 <gapm_reset_req_handler+0x58>
100115a6:	1c18      	adds	r0, r3, #0
100115a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100115aa:	46c0      	nop			; (mov r8, r8)
100115ac:	1001bd28 	.word	0x1001bd28
100115b0:	1001c098 	.word	0x1001c098
100115b4:	1001bd1c 	.word	0x1001bd1c
100115b8:	10010979 	.word	0x10010979
100115bc:	100109dd 	.word	0x100109dd

100115c0 <gapm_set_dev_config_cmd_handler>:
100115c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100115c2:	b089      	sub	sp, #36	; 0x24
100115c4:	9303      	str	r3, [sp, #12]
100115c6:	ab0e      	add	r3, sp, #56	; 0x38
100115c8:	781b      	ldrb	r3, [r3, #0]
100115ca:	4c37      	ldr	r4, [pc, #220]	; (100116a8 <gapm_set_dev_config_cmd_handler+0xe8>)
100115cc:	9304      	str	r3, [sp, #16]
100115ce:	ab0f      	add	r3, sp, #60	; 0x3c
100115d0:	781b      	ldrb	r3, [r3, #0]
100115d2:	270d      	movs	r7, #13
100115d4:	9305      	str	r3, [sp, #20]
100115d6:	ab10      	add	r3, sp, #64	; 0x40
100115d8:	881b      	ldrh	r3, [r3, #0]
100115da:	72a1      	strb	r1, [r4, #10]
100115dc:	9300      	str	r3, [sp, #0]
100115de:	ab11      	add	r3, sp, #68	; 0x44
100115e0:	881b      	ldrh	r3, [r3, #0]
100115e2:	0a09      	lsrs	r1, r1, #8
100115e4:	9301      	str	r3, [sp, #4]
100115e6:	ab12      	add	r3, sp, #72	; 0x48
100115e8:	881b      	ldrh	r3, [r3, #0]
100115ea:	7260      	strb	r0, [r4, #9]
100115ec:	9302      	str	r3, [sp, #8]
100115ee:	ab06      	add	r3, sp, #24
100115f0:	1dde      	adds	r6, r3, #7
100115f2:	2300      	movs	r3, #0
100115f4:	7033      	strb	r3, [r6, #0]
100115f6:	2304      	movs	r3, #4
100115f8:	7023      	strb	r3, [r4, #0]
100115fa:	2300      	movs	r3, #0
100115fc:	70e3      	strb	r3, [r4, #3]
100115fe:	4b2b      	ldr	r3, [pc, #172]	; (100116ac <gapm_set_dev_config_cmd_handler+0xec>)
10011600:	72e1      	strb	r1, [r4, #11]
10011602:	881d      	ldrh	r5, [r3, #0]
10011604:	881b      	ldrh	r3, [r3, #0]
10011606:	1c11      	adds	r1, r2, #0
10011608:	0a1b      	lsrs	r3, r3, #8
1001160a:	7163      	strb	r3, [r4, #5]
1001160c:	2303      	movs	r3, #3
1001160e:	7125      	strb	r5, [r4, #4]
10011610:	2206      	movs	r2, #6
10011612:	4d27      	ldr	r5, [pc, #156]	; (100116b0 <gapm_set_dev_config_cmd_handler+0xf0>)
10011614:	4827      	ldr	r0, [pc, #156]	; (100116b4 <gapm_set_dev_config_cmd_handler+0xf4>)
10011616:	7223      	strb	r3, [r4, #8]
10011618:	7067      	strb	r7, [r4, #1]
1001161a:	70a7      	strb	r7, [r4, #2]
1001161c:	47a8      	blx	r5
1001161e:	9903      	ldr	r1, [sp, #12]
10011620:	2210      	movs	r2, #16
10011622:	4825      	ldr	r0, [pc, #148]	; (100116b8 <gapm_set_dev_config_cmd_handler+0xf8>)
10011624:	47a8      	blx	r5
10011626:	466a      	mov	r2, sp
10011628:	7c12      	ldrb	r2, [r2, #16]
1001162a:	1ce3      	adds	r3, r4, #3
1001162c:	77da      	strb	r2, [r3, #31]
1001162e:	466a      	mov	r2, sp
10011630:	7d12      	ldrb	r2, [r2, #20]
10011632:	1d23      	adds	r3, r4, #4
10011634:	77da      	strb	r2, [r3, #31]
10011636:	466a      	mov	r2, sp
10011638:	7812      	ldrb	r2, [r2, #0]
1001163a:	1d63      	adds	r3, r4, #5
1001163c:	77da      	strb	r2, [r3, #31]
1001163e:	9b00      	ldr	r3, [sp, #0]
10011640:	1da2      	adds	r2, r4, #6
10011642:	0a1b      	lsrs	r3, r3, #8
10011644:	77d3      	strb	r3, [r2, #31]
10011646:	466a      	mov	r2, sp
10011648:	7912      	ldrb	r2, [r2, #4]
1001164a:	1de3      	adds	r3, r4, #7
1001164c:	77da      	strb	r2, [r3, #31]
1001164e:	1c22      	adds	r2, r4, #0
10011650:	9b01      	ldr	r3, [sp, #4]
10011652:	3208      	adds	r2, #8
10011654:	0a1b      	lsrs	r3, r3, #8
10011656:	77d3      	strb	r3, [r2, #31]
10011658:	466a      	mov	r2, sp
1001165a:	1c23      	adds	r3, r4, #0
1001165c:	7a12      	ldrb	r2, [r2, #8]
1001165e:	3328      	adds	r3, #40	; 0x28
10011660:	701a      	strb	r2, [r3, #0]
10011662:	1c22      	adds	r2, r4, #0
10011664:	9b02      	ldr	r3, [sp, #8]
10011666:	3229      	adds	r2, #41	; 0x29
10011668:	0a1b      	lsrs	r3, r3, #8
1001166a:	7013      	strb	r3, [r2, #0]
1001166c:	23d0      	movs	r3, #208	; 0xd0
1001166e:	4d13      	ldr	r5, [pc, #76]	; (100116bc <gapm_set_dev_config_cmd_handler+0xfc>)
10011670:	011b      	lsls	r3, r3, #4
10011672:	802b      	strh	r3, [r5, #0]
10011674:	2322      	movs	r3, #34	; 0x22
10011676:	71a3      	strb	r3, [r4, #6]
10011678:	2300      	movs	r3, #0
1001167a:	212a      	movs	r1, #42	; 0x2a
1001167c:	71e3      	strb	r3, [r4, #7]
1001167e:	1c20      	adds	r0, r4, #0
10011680:	4b0f      	ldr	r3, [pc, #60]	; (100116c0 <gapm_set_dev_config_cmd_handler+0x100>)
10011682:	80af      	strh	r7, [r5, #4]
10011684:	4798      	blx	r3
10011686:	1c30      	adds	r0, r6, #0
10011688:	4b0e      	ldr	r3, [pc, #56]	; (100116c4 <gapm_set_dev_config_cmd_handler+0x104>)
1001168a:	4798      	blx	r3
1001168c:	7833      	ldrb	r3, [r6, #0]
1001168e:	20e2      	movs	r0, #226	; 0xe2
10011690:	2b00      	cmp	r3, #0
10011692:	d106      	bne.n	100116a2 <gapm_set_dev_config_cmd_handler+0xe2>
10011694:	68ab      	ldr	r3, [r5, #8]
10011696:	20e2      	movs	r0, #226	; 0xe2
10011698:	781a      	ldrb	r2, [r3, #0]
1001169a:	785b      	ldrb	r3, [r3, #1]
1001169c:	2a03      	cmp	r2, #3
1001169e:	d100      	bne.n	100116a2 <gapm_set_dev_config_cmd_handler+0xe2>
100116a0:	1c18      	adds	r0, r3, #0
100116a2:	b009      	add	sp, #36	; 0x24
100116a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100116a6:	46c0      	nop			; (mov r8, r8)
100116a8:	1001c098 	.word	0x1001c098
100116ac:	1001bd28 	.word	0x1001bd28
100116b0:	100166cf 	.word	0x100166cf
100116b4:	1001c0a4 	.word	0x1001c0a4
100116b8:	1001c0aa 	.word	0x1001c0aa
100116bc:	1001bd1c 	.word	0x1001bd1c
100116c0:	10010979 	.word	0x10010979
100116c4:	100109dd 	.word	0x100109dd

100116c8 <gapm_get_dev_config_cmd_handler>:
100116c8:	4684      	mov	ip, r0
100116ca:	4663      	mov	r3, ip
100116cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100116ce:	b085      	sub	sp, #20
100116d0:	9100      	str	r1, [sp, #0]
100116d2:	20cf      	movs	r0, #207	; 0xcf
100116d4:	2b01      	cmp	r3, #1
100116d6:	d854      	bhi.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
100116d8:	2900      	cmp	r1, #0
100116da:	d052      	beq.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
100116dc:	2200      	movs	r2, #0
100116de:	492a      	ldr	r1, [pc, #168]	; (10011788 <gapm_get_dev_config_cmd_handler+0xc0>)
100116e0:	ab02      	add	r3, sp, #8
100116e2:	880c      	ldrh	r4, [r1, #0]
100116e4:	8809      	ldrh	r1, [r1, #0]
100116e6:	1d9f      	adds	r7, r3, #6
100116e8:	719a      	strb	r2, [r3, #6]
100116ea:	4b28      	ldr	r3, [pc, #160]	; (1001178c <gapm_get_dev_config_cmd_handler+0xc4>)
100116ec:	0a09      	lsrs	r1, r1, #8
100116ee:	250d      	movs	r5, #13
100116f0:	2606      	movs	r6, #6
100116f2:	7159      	strb	r1, [r3, #5]
100116f4:	4661      	mov	r1, ip
100116f6:	701e      	strb	r6, [r3, #0]
100116f8:	705d      	strb	r5, [r3, #1]
100116fa:	709d      	strb	r5, [r3, #2]
100116fc:	70da      	strb	r2, [r3, #3]
100116fe:	711c      	strb	r4, [r3, #4]
10011700:	2901      	cmp	r1, #1
10011702:	d13e      	bne.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
10011704:	21d0      	movs	r1, #208	; 0xd0
10011706:	4c22      	ldr	r4, [pc, #136]	; (10011790 <gapm_get_dev_config_cmd_handler+0xc8>)
10011708:	0109      	lsls	r1, r1, #4
1001170a:	8061      	strh	r1, [r4, #2]
1001170c:	4921      	ldr	r1, [pc, #132]	; (10011794 <gapm_get_dev_config_cmd_handler+0xcc>)
1001170e:	71da      	strb	r2, [r3, #7]
10011710:	8021      	strh	r1, [r4, #0]
10011712:	4661      	mov	r1, ip
10011714:	721e      	strb	r6, [r3, #8]
10011716:	7199      	strb	r1, [r3, #6]
10011718:	1c18      	adds	r0, r3, #0
1001171a:	2109      	movs	r1, #9
1001171c:	4b1e      	ldr	r3, [pc, #120]	; (10011798 <gapm_get_dev_config_cmd_handler+0xd0>)
1001171e:	80a5      	strh	r5, [r4, #4]
10011720:	4798      	blx	r3
10011722:	1c38      	adds	r0, r7, #0
10011724:	4b1d      	ldr	r3, [pc, #116]	; (1001179c <gapm_get_dev_config_cmd_handler+0xd4>)
10011726:	4798      	blx	r3
10011728:	783b      	ldrb	r3, [r7, #0]
1001172a:	20e2      	movs	r0, #226	; 0xe2
1001172c:	9301      	str	r3, [sp, #4]
1001172e:	2b00      	cmp	r3, #0
10011730:	d127      	bne.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
10011732:	8821      	ldrh	r1, [r4, #0]
10011734:	4a1a      	ldr	r2, [pc, #104]	; (100117a0 <gapm_get_dev_config_cmd_handler+0xd8>)
10011736:	68a7      	ldr	r7, [r4, #8]
10011738:	3b01      	subs	r3, #1
1001173a:	4291      	cmp	r1, r2
1001173c:	d001      	beq.n	10011742 <gapm_get_dev_config_cmd_handler+0x7a>
1001173e:	8023      	strh	r3, [r4, #0]
10011740:	e01a      	b.n	10011778 <gapm_get_dev_config_cmd_handler+0xb0>
10011742:	8063      	strh	r3, [r4, #2]
10011744:	9b00      	ldr	r3, [sp, #0]
10011746:	1c39      	adds	r1, r7, #0
10011748:	1c58      	adds	r0, r3, #1
1001174a:	1c32      	adds	r2, r6, #0
1001174c:	4b15      	ldr	r3, [pc, #84]	; (100117a4 <gapm_get_dev_config_cmd_handler+0xdc>)
1001174e:	4798      	blx	r3
10011750:	79bb      	ldrb	r3, [r7, #6]
10011752:	9a00      	ldr	r2, [sp, #0]
10011754:	7013      	strb	r3, [r2, #0]
10011756:	23d0      	movs	r3, #208	; 0xd0
10011758:	011b      	lsls	r3, r3, #4
1001175a:	8023      	strh	r3, [r4, #0]
1001175c:	ab02      	add	r3, sp, #8
1001175e:	80a5      	strh	r5, [r4, #4]
10011760:	1ddd      	adds	r5, r3, #7
10011762:	466b      	mov	r3, sp
10011764:	791b      	ldrb	r3, [r3, #4]
10011766:	1c28      	adds	r0, r5, #0
10011768:	702b      	strb	r3, [r5, #0]
1001176a:	4b0c      	ldr	r3, [pc, #48]	; (1001179c <gapm_get_dev_config_cmd_handler+0xd4>)
1001176c:	4798      	blx	r3
1001176e:	782b      	ldrb	r3, [r5, #0]
10011770:	20d0      	movs	r0, #208	; 0xd0
10011772:	2b00      	cmp	r3, #0
10011774:	d105      	bne.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
10011776:	68a7      	ldr	r7, [r4, #8]
10011778:	783b      	ldrb	r3, [r7, #0]
1001177a:	7878      	ldrb	r0, [r7, #1]
1001177c:	2b06      	cmp	r3, #6
1001177e:	d000      	beq.n	10011782 <gapm_get_dev_config_cmd_handler+0xba>
10011780:	20e2      	movs	r0, #226	; 0xe2
10011782:	b005      	add	sp, #20
10011784:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011786:	46c0      	nop			; (mov r8, r8)
10011788:	1001bd28 	.word	0x1001bd28
1001178c:	1001c098 	.word	0x1001c098
10011790:	1001bd1c 	.word	0x1001bd1c
10011794:	00000d08 	.word	0x00000d08
10011798:	10010979 	.word	0x10010979
1001179c:	100109dd 	.word	0x100109dd
100117a0:	0000ffff 	.word	0x0000ffff
100117a4:	100166cf 	.word	0x100166cf

100117a8 <gapm_cancel_cmd_handler>:
100117a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
100117aa:	4916      	ldr	r1, [pc, #88]	; (10011804 <gapm_cancel_cmd_handler+0x5c>)
100117ac:	4816      	ldr	r0, [pc, #88]	; (10011808 <gapm_cancel_cmd_handler+0x60>)
100117ae:	880c      	ldrh	r4, [r1, #0]
100117b0:	8809      	ldrh	r1, [r1, #0]
100117b2:	466b      	mov	r3, sp
100117b4:	0a09      	lsrs	r1, r1, #8
100117b6:	7141      	strb	r1, [r0, #5]
100117b8:	2102      	movs	r1, #2
100117ba:	2203      	movs	r2, #3
100117bc:	7201      	strb	r1, [r0, #8]
100117be:	21d0      	movs	r1, #208	; 0xd0
100117c0:	1ddd      	adds	r5, r3, #7
100117c2:	2300      	movs	r3, #0
100117c4:	7104      	strb	r4, [r0, #4]
100117c6:	4c11      	ldr	r4, [pc, #68]	; (1001180c <gapm_cancel_cmd_handler+0x64>)
100117c8:	7002      	strb	r2, [r0, #0]
100117ca:	0109      	lsls	r1, r1, #4
100117cc:	320a      	adds	r2, #10
100117ce:	702b      	strb	r3, [r5, #0]
100117d0:	7042      	strb	r2, [r0, #1]
100117d2:	7082      	strb	r2, [r0, #2]
100117d4:	70c3      	strb	r3, [r0, #3]
100117d6:	8021      	strh	r1, [r4, #0]
100117d8:	80a2      	strh	r2, [r4, #4]
100117da:	71c3      	strb	r3, [r0, #7]
100117dc:	3a0c      	subs	r2, #12
100117de:	2109      	movs	r1, #9
100117e0:	4b0b      	ldr	r3, [pc, #44]	; (10011810 <gapm_cancel_cmd_handler+0x68>)
100117e2:	7182      	strb	r2, [r0, #6]
100117e4:	4798      	blx	r3
100117e6:	1c28      	adds	r0, r5, #0
100117e8:	4b0a      	ldr	r3, [pc, #40]	; (10011814 <gapm_cancel_cmd_handler+0x6c>)
100117ea:	4798      	blx	r3
100117ec:	7828      	ldrb	r0, [r5, #0]
100117ee:	2800      	cmp	r0, #0
100117f0:	d001      	beq.n	100117f6 <gapm_cancel_cmd_handler+0x4e>
100117f2:	20e2      	movs	r0, #226	; 0xe2
100117f4:	e004      	b.n	10011800 <gapm_cancel_cmd_handler+0x58>
100117f6:	68a3      	ldr	r3, [r4, #8]
100117f8:	785b      	ldrb	r3, [r3, #1]
100117fa:	2b44      	cmp	r3, #68	; 0x44
100117fc:	d000      	beq.n	10011800 <gapm_cancel_cmd_handler+0x58>
100117fe:	1c18      	adds	r0, r3, #0
10011800:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011802:	46c0      	nop			; (mov r8, r8)
10011804:	1001bd28 	.word	0x1001bd28
10011808:	1001c098 	.word	0x1001c098
1001180c:	1001bd1c 	.word	0x1001bd1c
10011810:	10010979 	.word	0x10010979
10011814:	100109dd 	.word	0x100109dd

10011818 <gapm_dev_bdaddr_ind_handler>:
10011818:	b538      	push	{r3, r4, r5, lr}
1001181a:	1c05      	adds	r5, r0, #0
1001181c:	1c0c      	adds	r4, r1, #0
1001181e:	1c48      	adds	r0, r1, #1
10011820:	2206      	movs	r2, #6
10011822:	1c29      	adds	r1, r5, #0
10011824:	4b02      	ldr	r3, [pc, #8]	; (10011830 <gapm_dev_bdaddr_ind_handler+0x18>)
10011826:	4798      	blx	r3
10011828:	79ab      	ldrb	r3, [r5, #6]
1001182a:	2000      	movs	r0, #0
1001182c:	7023      	strb	r3, [r4, #0]
1001182e:	bd38      	pop	{r3, r4, r5, pc}
10011830:	100166cf 	.word	0x100166cf

10011834 <gapm_cmp_evt>:
10011834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011836:	7803      	ldrb	r3, [r0, #0]
10011838:	7845      	ldrb	r5, [r0, #1]
1001183a:	3b0c      	subs	r3, #12
1001183c:	1e18      	subs	r0, r3, #0
1001183e:	280b      	cmp	r0, #11
10011840:	d900      	bls.n	10011844 <gapm_cmp_evt+0x10>
10011842:	e08d      	b.n	10011960 <gapm_cmp_evt+0x12c>
10011844:	1c0c      	adds	r4, r1, #0
10011846:	f001 ff1d 	bl	10013684 <__gnu_thumb1_case_uqi>
1001184a:	1952      	.short	0x1952
1001184c:	068b1919 	.word	0x068b1919
10011850:	8b595906 	.word	0x8b595906
10011854:	0d8b      	.short	0x0d8b
10011856:	2300      	movs	r3, #0
10011858:	2d45      	cmp	r5, #69	; 0x45
1001185a:	d000      	beq.n	1001185e <gapm_cmp_evt+0x2a>
1001185c:	1c2b      	adds	r3, r5, #0
1001185e:	7023      	strb	r3, [r4, #0]
10011860:	2002      	movs	r0, #2
10011862:	e07e      	b.n	10011962 <gapm_cmp_evt+0x12e>
10011864:	203b      	movs	r0, #59	; 0x3b
10011866:	2d00      	cmp	r5, #0
10011868:	d100      	bne.n	1001186c <gapm_cmp_evt+0x38>
1001186a:	e07a      	b.n	10011962 <gapm_cmp_evt+0x12e>
1001186c:	700d      	strb	r5, [r1, #0]
1001186e:	1c48      	adds	r0, r1, #1
10011870:	2210      	movs	r2, #16
10011872:	2100      	movs	r1, #0
10011874:	4b3b      	ldr	r3, [pc, #236]	; (10011964 <gapm_cmp_evt+0x130>)
10011876:	4798      	blx	r3
10011878:	200f      	movs	r0, #15
1001187a:	e072      	b.n	10011962 <gapm_cmp_evt+0x12e>
1001187c:	2d00      	cmp	r5, #0
1001187e:	d134      	bne.n	100118ea <gapm_cmp_evt+0xb6>
10011880:	4b39      	ldr	r3, [pc, #228]	; (10011968 <gapm_cmp_evt+0x134>)
10011882:	4798      	blx	r3
10011884:	1e43      	subs	r3, r0, #1
10011886:	b2db      	uxtb	r3, r3
10011888:	1c28      	adds	r0, r5, #0
1001188a:	2b06      	cmp	r3, #6
1001188c:	d869      	bhi.n	10011962 <gapm_cmp_evt+0x12e>
1001188e:	466b      	mov	r3, sp
10011890:	4e36      	ldr	r6, [pc, #216]	; (1001196c <gapm_cmp_evt+0x138>)
10011892:	1dd9      	adds	r1, r3, #7
10011894:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011896:	4b36      	ldr	r3, [pc, #216]	; (10011970 <gapm_cmp_evt+0x13c>)
10011898:	4798      	blx	r3
1001189a:	2312      	movs	r3, #18
1001189c:	4358      	muls	r0, r3
1001189e:	4935      	ldr	r1, [pc, #212]	; (10011974 <gapm_cmp_evt+0x140>)
100118a0:	1809      	adds	r1, r1, r0
100118a2:	1c0b      	adds	r3, r1, #0
100118a4:	894a      	ldrh	r2, [r1, #10]
100118a6:	3308      	adds	r3, #8
100118a8:	8122      	strh	r2, [r4, #8]
100118aa:	784f      	ldrb	r7, [r1, #1]
100118ac:	72a5      	strb	r5, [r4, #10]
100118ae:	7027      	strb	r7, [r4, #0]
100118b0:	898a      	ldrh	r2, [r1, #12]
100118b2:	1c60      	adds	r0, r4, #1
100118b4:	81a2      	strh	r2, [r4, #12]
100118b6:	88db      	ldrh	r3, [r3, #6]
100118b8:	3102      	adds	r1, #2
100118ba:	81e3      	strh	r3, [r4, #14]
100118bc:	89cb      	ldrh	r3, [r1, #14]
100118be:	2206      	movs	r2, #6
100118c0:	8223      	strh	r3, [r4, #16]
100118c2:	4b2d      	ldr	r3, [pc, #180]	; (10011978 <gapm_cmp_evt+0x144>)
100118c4:	4798      	blx	r3
100118c6:	2f00      	cmp	r7, #0
100118c8:	d00a      	beq.n	100118e0 <gapm_cmp_evt+0xac>
100118ca:	79a3      	ldrb	r3, [r4, #6]
100118cc:	223f      	movs	r2, #63	; 0x3f
100118ce:	1c19      	adds	r1, r3, #0
100118d0:	3501      	adds	r5, #1
100118d2:	4391      	bics	r1, r2
100118d4:	29c0      	cmp	r1, #192	; 0xc0
100118d6:	d003      	beq.n	100118e0 <gapm_cmp_evt+0xac>
100118d8:	065b      	lsls	r3, r3, #25
100118da:	0fdb      	lsrs	r3, r3, #31
100118dc:	3502      	adds	r5, #2
100118de:	1aed      	subs	r5, r5, r3
100118e0:	2301      	movs	r3, #1
100118e2:	425b      	negs	r3, r3
100118e4:	7025      	strb	r5, [r4, #0]
100118e6:	85b3      	strh	r3, [r6, #44]	; 0x2c
100118e8:	e038      	b.n	1001195c <gapm_cmp_evt+0x128>
100118ea:	700d      	strb	r5, [r1, #0]
100118ec:	e004      	b.n	100118f8 <gapm_cmp_evt+0xc4>
100118ee:	2300      	movs	r3, #0
100118f0:	2d45      	cmp	r5, #69	; 0x45
100118f2:	d000      	beq.n	100118f6 <gapm_cmp_evt+0xc2>
100118f4:	1c2b      	adds	r3, r5, #0
100118f6:	7023      	strb	r3, [r4, #0]
100118f8:	2003      	movs	r0, #3
100118fa:	e032      	b.n	10011962 <gapm_cmp_evt+0x12e>
100118fc:	4e1b      	ldr	r6, [pc, #108]	; (1001196c <gapm_cmp_evt+0x138>)
100118fe:	2100      	movs	r1, #0
10011900:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011902:	4b1b      	ldr	r3, [pc, #108]	; (10011970 <gapm_cmp_evt+0x13c>)
10011904:	4798      	blx	r3
10011906:	2807      	cmp	r0, #7
10011908:	d818      	bhi.n	1001193c <gapm_cmp_evt+0x108>
1001190a:	2301      	movs	r3, #1
1001190c:	425b      	negs	r3, r3
1001190e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011910:	3313      	adds	r3, #19
10011912:	4358      	muls	r0, r3
10011914:	4917      	ldr	r1, [pc, #92]	; (10011974 <gapm_cmp_evt+0x140>)
10011916:	1809      	adds	r1, r1, r0
10011918:	1c0b      	adds	r3, r1, #0
1001191a:	894a      	ldrh	r2, [r1, #10]
1001191c:	3308      	adds	r3, #8
1001191e:	8122      	strh	r2, [r4, #8]
10011920:	784a      	ldrb	r2, [r1, #1]
10011922:	72a5      	strb	r5, [r4, #10]
10011924:	7022      	strb	r2, [r4, #0]
10011926:	898a      	ldrh	r2, [r1, #12]
10011928:	1c60      	adds	r0, r4, #1
1001192a:	81a2      	strh	r2, [r4, #12]
1001192c:	88db      	ldrh	r3, [r3, #6]
1001192e:	3102      	adds	r1, #2
10011930:	81e3      	strh	r3, [r4, #14]
10011932:	89cb      	ldrh	r3, [r1, #14]
10011934:	2206      	movs	r2, #6
10011936:	8223      	strh	r3, [r4, #16]
10011938:	4b0f      	ldr	r3, [pc, #60]	; (10011978 <gapm_cmp_evt+0x144>)
1001193a:	4798      	blx	r3
1001193c:	2200      	movs	r2, #0
1001193e:	7823      	ldrb	r3, [r4, #0]
10011940:	4293      	cmp	r3, r2
10011942:	d00a      	beq.n	1001195a <gapm_cmp_evt+0x126>
10011944:	79a3      	ldrb	r3, [r4, #6]
10011946:	323f      	adds	r2, #63	; 0x3f
10011948:	1c19      	adds	r1, r3, #0
1001194a:	4391      	bics	r1, r2
1001194c:	3a3e      	subs	r2, #62	; 0x3e
1001194e:	29c0      	cmp	r1, #192	; 0xc0
10011950:	d003      	beq.n	1001195a <gapm_cmp_evt+0x126>
10011952:	065b      	lsls	r3, r3, #25
10011954:	0fdb      	lsrs	r3, r3, #31
10011956:	3202      	adds	r2, #2
10011958:	1ad2      	subs	r2, r2, r3
1001195a:	7022      	strb	r2, [r4, #0]
1001195c:	2005      	movs	r0, #5
1001195e:	e000      	b.n	10011962 <gapm_cmp_evt+0x12e>
10011960:	2000      	movs	r0, #0
10011962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011964:	100166e1 	.word	0x100166e1
10011968:	10010b85 	.word	0x10010b85
1001196c:	1001bdba 	.word	0x1001bdba
10011970:	10010b49 	.word	0x10010b49
10011974:	1001bd2a 	.word	0x1001bd2a
10011978:	100166cf 	.word	0x100166cf

1001197c <gapm_start_adv_cmd_handler>:
1001197c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001197e:	b089      	sub	sp, #36	; 0x24
10011980:	9303      	str	r3, [sp, #12]
10011982:	ab0e      	add	r3, sp, #56	; 0x38
10011984:	9102      	str	r1, [sp, #8]
10011986:	cb02      	ldmia	r3!, {r1}
10011988:	aa08      	add	r2, sp, #32
1001198a:	881b      	ldrh	r3, [r3, #0]
1001198c:	4e3c      	ldr	r6, [pc, #240]	; (10011a80 <gapm_start_adv_cmd_handler+0x104>)
1001198e:	9300      	str	r3, [sp, #0]
10011990:	ab10      	add	r3, sp, #64	; 0x40
10011992:	881b      	ldrh	r3, [r3, #0]
10011994:	240d      	movs	r4, #13
10011996:	469c      	mov	ip, r3
10011998:	ab11      	add	r3, sp, #68	; 0x44
1001199a:	781b      	ldrb	r3, [r3, #0]
1001199c:	9304      	str	r3, [sp, #16]
1001199e:	ab12      	add	r3, sp, #72	; 0x48
100119a0:	781b      	ldrb	r3, [r3, #0]
100119a2:	9305      	str	r3, [sp, #20]
100119a4:	ab13      	add	r3, sp, #76	; 0x4c
100119a6:	781b      	ldrb	r3, [r3, #0]
100119a8:	9306      	str	r3, [sp, #24]
100119aa:	ab14      	add	r3, sp, #80	; 0x50
100119ac:	781b      	ldrb	r3, [r3, #0]
100119ae:	9301      	str	r3, [sp, #4]
100119b0:	2319      	movs	r3, #25
100119b2:	189b      	adds	r3, r3, r2
100119b4:	7fdd      	ldrb	r5, [r3, #31]
100119b6:	ab18      	add	r3, sp, #96	; 0x60
100119b8:	881f      	ldrh	r7, [r3, #0]
100119ba:	ab19      	add	r3, sp, #100	; 0x64
100119bc:	781b      	ldrb	r3, [r3, #0]
100119be:	8832      	ldrh	r2, [r6, #0]
100119c0:	9307      	str	r3, [sp, #28]
100119c2:	4b30      	ldr	r3, [pc, #192]	; (10011a84 <gapm_start_adv_cmd_handler+0x108>)
100119c4:	8836      	ldrh	r6, [r6, #0]
100119c6:	711a      	strb	r2, [r3, #4]
100119c8:	466a      	mov	r2, sp
100119ca:	7a12      	ldrb	r2, [r2, #8]
100119cc:	701c      	strb	r4, [r3, #0]
100119ce:	705c      	strb	r4, [r3, #1]
100119d0:	709c      	strb	r4, [r3, #2]
100119d2:	725a      	strb	r2, [r3, #9]
100119d4:	2400      	movs	r4, #0
100119d6:	466a      	mov	r2, sp
100119d8:	0a36      	lsrs	r6, r6, #8
100119da:	70dc      	strb	r4, [r3, #3]
100119dc:	7218      	strb	r0, [r3, #8]
100119de:	729c      	strb	r4, [r3, #10]
100119e0:	715e      	strb	r6, [r3, #5]
100119e2:	72dc      	strb	r4, [r3, #11]
100119e4:	7812      	ldrb	r2, [r2, #0]
100119e6:	380e      	subs	r0, #14
100119e8:	731a      	strb	r2, [r3, #12]
100119ea:	9a00      	ldr	r2, [sp, #0]
100119ec:	0a14      	lsrs	r4, r2, #8
100119ee:	4662      	mov	r2, ip
100119f0:	739a      	strb	r2, [r3, #14]
100119f2:	4662      	mov	r2, ip
100119f4:	735c      	strb	r4, [r3, #13]
100119f6:	0a14      	lsrs	r4, r2, #8
100119f8:	466a      	mov	r2, sp
100119fa:	7c12      	ldrb	r2, [r2, #16]
100119fc:	73dc      	strb	r4, [r3, #15]
100119fe:	741a      	strb	r2, [r3, #16]
10011a00:	1c1c      	adds	r4, r3, #0
10011a02:	2801      	cmp	r0, #1
10011a04:	d809      	bhi.n	10011a1a <gapm_start_adv_cmd_handler+0x9e>
10011a06:	2900      	cmp	r1, #0
10011a08:	d003      	beq.n	10011a12 <gapm_start_adv_cmd_handler+0x96>
10011a0a:	481f      	ldr	r0, [pc, #124]	; (10011a88 <gapm_start_adv_cmd_handler+0x10c>)
10011a0c:	2206      	movs	r2, #6
10011a0e:	4b1f      	ldr	r3, [pc, #124]	; (10011a8c <gapm_start_adv_cmd_handler+0x110>)
10011a10:	4798      	blx	r3
10011a12:	466b      	mov	r3, sp
10011a14:	7b1b      	ldrb	r3, [r3, #12]
10011a16:	75e3      	strb	r3, [r4, #23]
10011a18:	e014      	b.n	10011a44 <gapm_start_adv_cmd_handler+0xc8>
10011a1a:	466b      	mov	r3, sp
10011a1c:	7d1b      	ldrb	r3, [r3, #20]
10011a1e:	9915      	ldr	r1, [sp, #84]	; 0x54
10011a20:	7463      	strb	r3, [r4, #17]
10011a22:	466b      	mov	r3, sp
10011a24:	7e1b      	ldrb	r3, [r3, #24]
10011a26:	9a01      	ldr	r2, [sp, #4]
10011a28:	74a3      	strb	r3, [r4, #18]
10011a2a:	466b      	mov	r3, sp
10011a2c:	791b      	ldrb	r3, [r3, #4]
10011a2e:	4818      	ldr	r0, [pc, #96]	; (10011a90 <gapm_start_adv_cmd_handler+0x114>)
10011a30:	4e16      	ldr	r6, [pc, #88]	; (10011a8c <gapm_start_adv_cmd_handler+0x110>)
10011a32:	74e3      	strb	r3, [r4, #19]
10011a34:	47b0      	blx	r6
10011a36:	1c23      	adds	r3, r4, #0
10011a38:	4816      	ldr	r0, [pc, #88]	; (10011a94 <gapm_start_adv_cmd_handler+0x118>)
10011a3a:	3330      	adds	r3, #48	; 0x30
10011a3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011a3e:	1c2a      	adds	r2, r5, #0
10011a40:	701d      	strb	r5, [r3, #0]
10011a42:	47b0      	blx	r6
10011a44:	1c22      	adds	r2, r4, #0
10011a46:	23a5      	movs	r3, #165	; 0xa5
10011a48:	3250      	adds	r2, #80	; 0x50
10011a4a:	7013      	strb	r3, [r2, #0]
10011a4c:	1c22      	adds	r2, r4, #0
10011a4e:	3251      	adds	r2, #81	; 0x51
10011a50:	7013      	strb	r3, [r2, #0]
10011a52:	1c23      	adds	r3, r4, #0
10011a54:	1c22      	adds	r2, r4, #0
10011a56:	3352      	adds	r3, #82	; 0x52
10011a58:	701f      	strb	r7, [r3, #0]
10011a5a:	3253      	adds	r2, #83	; 0x53
10011a5c:	0a3b      	lsrs	r3, r7, #8
10011a5e:	7013      	strb	r3, [r2, #0]
10011a60:	466a      	mov	r2, sp
10011a62:	1c23      	adds	r3, r4, #0
10011a64:	7f12      	ldrb	r2, [r2, #28]
10011a66:	3354      	adds	r3, #84	; 0x54
10011a68:	701a      	strb	r2, [r3, #0]
10011a6a:	234d      	movs	r3, #77	; 0x4d
10011a6c:	2500      	movs	r5, #0
10011a6e:	71a3      	strb	r3, [r4, #6]
10011a70:	1c20      	adds	r0, r4, #0
10011a72:	2155      	movs	r1, #85	; 0x55
10011a74:	4b08      	ldr	r3, [pc, #32]	; (10011a98 <gapm_start_adv_cmd_handler+0x11c>)
10011a76:	71e5      	strb	r5, [r4, #7]
10011a78:	4798      	blx	r3
10011a7a:	1c28      	adds	r0, r5, #0
10011a7c:	b009      	add	sp, #36	; 0x24
10011a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a80:	1001bd28 	.word	0x1001bd28
10011a84:	1001c098 	.word	0x1001c098
10011a88:	1001c0a9 	.word	0x1001c0a9
10011a8c:	100166cf 	.word	0x100166cf
10011a90:	1001c0ac 	.word	0x1001c0ac
10011a94:	1001c0c9 	.word	0x1001c0c9
10011a98:	10010979 	.word	0x10010979

10011a9c <get_gap_local_addr_type>:
10011a9c:	4b04      	ldr	r3, [pc, #16]	; (10011ab0 <get_gap_local_addr_type+0x14>)
10011a9e:	2001      	movs	r0, #1
10011aa0:	791b      	ldrb	r3, [r3, #4]
10011aa2:	2b02      	cmp	r3, #2
10011aa4:	d003      	beq.n	10011aae <get_gap_local_addr_type+0x12>
10011aa6:	3b03      	subs	r3, #3
10011aa8:	4258      	negs	r0, r3
10011aaa:	4158      	adcs	r0, r3
10011aac:	0040      	lsls	r0, r0, #1
10011aae:	4770      	bx	lr
10011ab0:	1001bdba 	.word	0x1001bdba

10011ab4 <gapm_adv_report_evt_handler>:
10011ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ab6:	7843      	ldrb	r3, [r0, #1]
10011ab8:	1c05      	adds	r5, r0, #0
10011aba:	9301      	str	r3, [sp, #4]
10011abc:	466b      	mov	r3, sp
10011abe:	1c0c      	adds	r4, r1, #0
10011ac0:	791b      	ldrb	r3, [r3, #4]
10011ac2:	7806      	ldrb	r6, [r0, #0]
10011ac4:	2206      	movs	r2, #6
10011ac6:	704b      	strb	r3, [r1, #1]
10011ac8:	1c88      	adds	r0, r1, #2
10011aca:	4f1b      	ldr	r7, [pc, #108]	; (10011b38 <gapm_adv_report_evt_handler+0x84>)
10011acc:	1ca9      	adds	r1, r5, #2
10011ace:	47b8      	blx	r7
10011ad0:	1c20      	adds	r0, r4, #0
10011ad2:	1c29      	adds	r1, r5, #0
10011ad4:	7a2a      	ldrb	r2, [r5, #8]
10011ad6:	3008      	adds	r0, #8
10011ad8:	77c2      	strb	r2, [r0, #31]
10011ada:	3109      	adds	r1, #9
10011adc:	3528      	adds	r5, #40	; 0x28
10011ade:	47b8      	blx	r7
10011ae0:	782b      	ldrb	r3, [r5, #0]
10011ae2:	b25a      	sxtb	r2, r3
10011ae4:	2a00      	cmp	r2, #0
10011ae6:	da01      	bge.n	10011aec <gapm_adv_report_evt_handler+0x38>
10011ae8:	3301      	adds	r3, #1
10011aea:	b2db      	uxtb	r3, r3
10011aec:	1c22      	adds	r2, r4, #0
10011aee:	3228      	adds	r2, #40	; 0x28
10011af0:	7013      	strb	r3, [r2, #0]
10011af2:	2200      	movs	r2, #0
10011af4:	9b01      	ldr	r3, [sp, #4]
10011af6:	4293      	cmp	r3, r2
10011af8:	d00a      	beq.n	10011b10 <gapm_adv_report_evt_handler+0x5c>
10011afa:	79e3      	ldrb	r3, [r4, #7]
10011afc:	323f      	adds	r2, #63	; 0x3f
10011afe:	1c19      	adds	r1, r3, #0
10011b00:	4391      	bics	r1, r2
10011b02:	3a3e      	subs	r2, #62	; 0x3e
10011b04:	29c0      	cmp	r1, #192	; 0xc0
10011b06:	d003      	beq.n	10011b10 <gapm_adv_report_evt_handler+0x5c>
10011b08:	065b      	lsls	r3, r3, #25
10011b0a:	0fdb      	lsrs	r3, r3, #31
10011b0c:	3202      	adds	r2, #2
10011b0e:	1ad2      	subs	r2, r2, r3
10011b10:	7062      	strb	r2, [r4, #1]
10011b12:	2e04      	cmp	r6, #4
10011b14:	d80f      	bhi.n	10011b36 <gapm_adv_report_evt_handler+0x82>
10011b16:	1c30      	adds	r0, r6, #0
10011b18:	f001 fdb4 	bl	10013684 <__gnu_thumb1_case_uqi>
10011b1c:	09070503 	.word	0x09070503
10011b20:	0b          	.byte	0x0b
10011b21:	00          	.byte	0x00
10011b22:	2300      	movs	r3, #0
10011b24:	e006      	b.n	10011b34 <gapm_adv_report_evt_handler+0x80>
10011b26:	2301      	movs	r3, #1
10011b28:	e004      	b.n	10011b34 <gapm_adv_report_evt_handler+0x80>
10011b2a:	2302      	movs	r3, #2
10011b2c:	e002      	b.n	10011b34 <gapm_adv_report_evt_handler+0x80>
10011b2e:	2303      	movs	r3, #3
10011b30:	e000      	b.n	10011b34 <gapm_adv_report_evt_handler+0x80>
10011b32:	2305      	movs	r3, #5
10011b34:	7023      	strb	r3, [r4, #0]
10011b36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011b38:	100166cf 	.word	0x100166cf

10011b3c <gapm_resolv_addr_cmd_handler>:
10011b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011b3e:	2314      	movs	r3, #20
10011b40:	4c12      	ldr	r4, [pc, #72]	; (10011b8c <gapm_resolv_addr_cmd_handler+0x50>)
10011b42:	1c17      	adds	r7, r2, #0
10011b44:	7023      	strb	r3, [r4, #0]
10011b46:	3b07      	subs	r3, #7
10011b48:	7063      	strb	r3, [r4, #1]
10011b4a:	70a3      	strb	r3, [r4, #2]
10011b4c:	2300      	movs	r3, #0
10011b4e:	70e3      	strb	r3, [r4, #3]
10011b50:	4b0f      	ldr	r3, [pc, #60]	; (10011b90 <gapm_resolv_addr_cmd_handler+0x54>)
10011b52:	1c05      	adds	r5, r0, #0
10011b54:	881a      	ldrh	r2, [r3, #0]
10011b56:	881b      	ldrh	r3, [r3, #0]
10011b58:	4e0e      	ldr	r6, [pc, #56]	; (10011b94 <gapm_resolv_addr_cmd_handler+0x58>)
10011b5a:	0a1b      	lsrs	r3, r3, #8
10011b5c:	7163      	strb	r3, [r4, #5]
10011b5e:	2317      	movs	r3, #23
10011b60:	012d      	lsls	r5, r5, #4
10011b62:	7122      	strb	r2, [r4, #4]
10011b64:	7260      	strb	r0, [r4, #9]
10011b66:	2206      	movs	r2, #6
10011b68:	480b      	ldr	r0, [pc, #44]	; (10011b98 <gapm_resolv_addr_cmd_handler+0x5c>)
10011b6a:	7223      	strb	r3, [r4, #8]
10011b6c:	47b0      	blx	r6
10011b6e:	1c39      	adds	r1, r7, #0
10011b70:	1c2a      	adds	r2, r5, #0
10011b72:	480a      	ldr	r0, [pc, #40]	; (10011b9c <gapm_resolv_addr_cmd_handler+0x60>)
10011b74:	47b0      	blx	r6
10011b76:	1c29      	adds	r1, r5, #0
10011b78:	3110      	adds	r1, #16
10011b7a:	1c0b      	adds	r3, r1, #0
10011b7c:	3b08      	subs	r3, #8
10011b7e:	71a3      	strb	r3, [r4, #6]
10011b80:	121b      	asrs	r3, r3, #8
10011b82:	71e3      	strb	r3, [r4, #7]
10011b84:	1c20      	adds	r0, r4, #0
10011b86:	4b06      	ldr	r3, [pc, #24]	; (10011ba0 <gapm_resolv_addr_cmd_handler+0x64>)
10011b88:	4798      	blx	r3
10011b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011b8c:	1001c098 	.word	0x1001c098
10011b90:	1001bd28 	.word	0x1001bd28
10011b94:	100166cf 	.word	0x100166cf
10011b98:	1001c0a2 	.word	0x1001c0a2
10011b9c:	1001c0a8 	.word	0x1001c0a8
10011ba0:	10010979 	.word	0x10010979

10011ba4 <gapm_addr_solved_ind_handler>:
10011ba4:	b570      	push	{r4, r5, r6, lr}
10011ba6:	1c04      	adds	r4, r0, #0
10011ba8:	1c08      	adds	r0, r1, #0
10011baa:	1c0d      	adds	r5, r1, #0
10011bac:	4e05      	ldr	r6, [pc, #20]	; (10011bc4 <gapm_addr_solved_ind_handler+0x20>)
10011bae:	1c21      	adds	r1, r4, #0
10011bb0:	2206      	movs	r2, #6
10011bb2:	3011      	adds	r0, #17
10011bb4:	47b0      	blx	r6
10011bb6:	1c68      	adds	r0, r5, #1
10011bb8:	1da1      	adds	r1, r4, #6
10011bba:	2210      	movs	r2, #16
10011bbc:	47b0      	blx	r6
10011bbe:	2300      	movs	r3, #0
10011bc0:	702b      	strb	r3, [r5, #0]
10011bc2:	bd70      	pop	{r4, r5, r6, pc}
10011bc4:	100166cf 	.word	0x100166cf

10011bc8 <gapm_profile_added_ind_handler>:
10011bc8:	b510      	push	{r4, lr}
10011bca:	7843      	ldrb	r3, [r0, #1]
10011bcc:	7902      	ldrb	r2, [r0, #4]
10011bce:	7944      	ldrb	r4, [r0, #5]
10011bd0:	7800      	ldrb	r0, [r0, #0]
10011bd2:	021b      	lsls	r3, r3, #8
10011bd4:	4303      	orrs	r3, r0
10011bd6:	2b1b      	cmp	r3, #27
10011bd8:	d104      	bne.n	10011be4 <gapm_profile_added_ind_handler+0x1c>
10011bda:	2300      	movs	r3, #0
10011bdc:	700b      	strb	r3, [r1, #0]
10011bde:	0223      	lsls	r3, r4, #8
10011be0:	4313      	orrs	r3, r2
10011be2:	804b      	strh	r3, [r1, #2]
10011be4:	203b      	movs	r0, #59	; 0x3b
10011be6:	bd10      	pop	{r4, pc}

10011be8 <gattc_read_req_ind_parser>:
10011be8:	7843      	ldrb	r3, [r0, #1]
10011bea:	7802      	ldrb	r2, [r0, #0]
10011bec:	021b      	lsls	r3, r3, #8
10011bee:	4313      	orrs	r3, r2
10011bf0:	804b      	strh	r3, [r1, #2]
10011bf2:	4770      	bx	lr

10011bf4 <gattc_write_req_ind_parser>:
10011bf4:	b508      	push	{r3, lr}
10011bf6:	1c13      	adds	r3, r2, #0
10011bf8:	0a00      	lsrs	r0, r0, #8
10011bfa:	8010      	strh	r0, [r2, #0]
10011bfc:	784a      	ldrb	r2, [r1, #1]
10011bfe:	7808      	ldrb	r0, [r1, #0]
10011c00:	0212      	lsls	r2, r2, #8
10011c02:	4302      	orrs	r2, r0
10011c04:	805a      	strh	r2, [r3, #2]
10011c06:	78ca      	ldrb	r2, [r1, #3]
10011c08:	7888      	ldrb	r0, [r1, #2]
10011c0a:	0212      	lsls	r2, r2, #8
10011c0c:	4302      	orrs	r2, r0
10011c0e:	809a      	strh	r2, [r3, #4]
10011c10:	794a      	ldrb	r2, [r1, #5]
10011c12:	7908      	ldrb	r0, [r1, #4]
10011c14:	0212      	lsls	r2, r2, #8
10011c16:	4302      	orrs	r2, r0
10011c18:	80da      	strh	r2, [r3, #6]
10011c1a:	3308      	adds	r3, #8
10011c1c:	1c18      	adds	r0, r3, #0
10011c1e:	3106      	adds	r1, #6
10011c20:	4b01      	ldr	r3, [pc, #4]	; (10011c28 <gattc_write_req_ind_parser+0x34>)
10011c22:	4798      	blx	r3
10011c24:	bd08      	pop	{r3, pc}
10011c26:	46c0      	nop			; (mov r8, r8)
10011c28:	100166cf 	.word	0x100166cf

10011c2c <gattc_att_info_req_parser>:
10011c2c:	7843      	ldrb	r3, [r0, #1]
10011c2e:	7802      	ldrb	r2, [r0, #0]
10011c30:	021b      	lsls	r3, r3, #8
10011c32:	4313      	orrs	r3, r2
10011c34:	800b      	strh	r3, [r1, #0]
10011c36:	4770      	bx	lr

10011c38 <gattc_read_cfm>:
10011c38:	b538      	push	{r3, r4, r5, lr}
10011c3a:	2514      	movs	r5, #20
10011c3c:	1c1c      	adds	r4, r3, #0
10011c3e:	4b14      	ldr	r3, [pc, #80]	; (10011c90 <gattc_read_cfm+0x58>)
10011c40:	70d9      	strb	r1, [r3, #3]
10011c42:	4914      	ldr	r1, [pc, #80]	; (10011c94 <gattc_read_cfm+0x5c>)
10011c44:	701d      	strb	r5, [r3, #0]
10011c46:	3d08      	subs	r5, #8
10011c48:	705d      	strb	r5, [r3, #1]
10011c4a:	709d      	strb	r5, [r3, #2]
10011c4c:	880d      	ldrh	r5, [r1, #0]
10011c4e:	8809      	ldrh	r1, [r1, #0]
10011c50:	7218      	strb	r0, [r3, #8]
10011c52:	0a09      	lsrs	r1, r1, #8
10011c54:	7159      	strb	r1, [r3, #5]
10011c56:	0a00      	lsrs	r0, r0, #8
10011c58:	0a21      	lsrs	r1, r4, #8
10011c5a:	711d      	strb	r5, [r3, #4]
10011c5c:	7258      	strb	r0, [r3, #9]
10011c5e:	729c      	strb	r4, [r3, #10]
10011c60:	72d9      	strb	r1, [r3, #11]
10011c62:	731a      	strb	r2, [r3, #12]
10011c64:	1c1d      	adds	r5, r3, #0
10011c66:	2c00      	cmp	r4, #0
10011c68:	d007      	beq.n	10011c7a <gattc_read_cfm+0x42>
10011c6a:	9904      	ldr	r1, [sp, #16]
10011c6c:	1c22      	adds	r2, r4, #0
10011c6e:	480a      	ldr	r0, [pc, #40]	; (10011c98 <gattc_read_cfm+0x60>)
10011c70:	4b0a      	ldr	r3, [pc, #40]	; (10011c9c <gattc_read_cfm+0x64>)
10011c72:	340d      	adds	r4, #13
10011c74:	4798      	blx	r3
10011c76:	b2a1      	uxth	r1, r4
10011c78:	e001      	b.n	10011c7e <gattc_read_cfm+0x46>
10011c7a:	210e      	movs	r1, #14
10011c7c:	735c      	strb	r4, [r3, #13]
10011c7e:	1c0b      	adds	r3, r1, #0
10011c80:	3b08      	subs	r3, #8
10011c82:	71ab      	strb	r3, [r5, #6]
10011c84:	121b      	asrs	r3, r3, #8
10011c86:	71eb      	strb	r3, [r5, #7]
10011c88:	1c28      	adds	r0, r5, #0
10011c8a:	4b05      	ldr	r3, [pc, #20]	; (10011ca0 <gattc_read_cfm+0x68>)
10011c8c:	4798      	blx	r3
10011c8e:	bd38      	pop	{r3, r4, r5, pc}
10011c90:	1001c098 	.word	0x1001c098
10011c94:	1001bd28 	.word	0x1001bd28
10011c98:	1001c0a5 	.word	0x1001c0a5
10011c9c:	100166cf 	.word	0x100166cf
10011ca0:	10010979 	.word	0x10010979

10011ca4 <gattc_write_cfm>:
10011ca4:	4b0d      	ldr	r3, [pc, #52]	; (10011cdc <gattc_write_cfm+0x38>)
10011ca6:	b510      	push	{r4, lr}
10011ca8:	729a      	strb	r2, [r3, #10]
10011caa:	2203      	movs	r2, #3
10011cac:	2416      	movs	r4, #22
10011cae:	719a      	strb	r2, [r3, #6]
10011cb0:	2200      	movs	r2, #0
10011cb2:	70d9      	strb	r1, [r3, #3]
10011cb4:	490a      	ldr	r1, [pc, #40]	; (10011ce0 <gattc_write_cfm+0x3c>)
10011cb6:	701c      	strb	r4, [r3, #0]
10011cb8:	3c0a      	subs	r4, #10
10011cba:	705c      	strb	r4, [r3, #1]
10011cbc:	709c      	strb	r4, [r3, #2]
10011cbe:	880c      	ldrh	r4, [r1, #0]
10011cc0:	8809      	ldrh	r1, [r1, #0]
10011cc2:	7218      	strb	r0, [r3, #8]
10011cc4:	0a09      	lsrs	r1, r1, #8
10011cc6:	0a00      	lsrs	r0, r0, #8
10011cc8:	711c      	strb	r4, [r3, #4]
10011cca:	7159      	strb	r1, [r3, #5]
10011ccc:	7258      	strb	r0, [r3, #9]
10011cce:	71da      	strb	r2, [r3, #7]
10011cd0:	1c18      	adds	r0, r3, #0
10011cd2:	210b      	movs	r1, #11
10011cd4:	4b03      	ldr	r3, [pc, #12]	; (10011ce4 <gattc_write_cfm+0x40>)
10011cd6:	4798      	blx	r3
10011cd8:	bd10      	pop	{r4, pc}
10011cda:	46c0      	nop			; (mov r8, r8)
10011cdc:	1001c098 	.word	0x1001c098
10011ce0:	1001bd28 	.word	0x1001bd28
10011ce4:	10010979 	.word	0x10010979

10011ce8 <gattc_att_info_cfm>:
10011ce8:	b538      	push	{r3, r4, r5, lr}
10011cea:	4c0e      	ldr	r4, [pc, #56]	; (10011d24 <gattc_att_info_cfm+0x3c>)
10011cec:	2518      	movs	r5, #24
10011cee:	7323      	strb	r3, [r4, #12]
10011cf0:	2305      	movs	r3, #5
10011cf2:	71a3      	strb	r3, [r4, #6]
10011cf4:	2300      	movs	r3, #0
10011cf6:	70e1      	strb	r1, [r4, #3]
10011cf8:	490b      	ldr	r1, [pc, #44]	; (10011d28 <gattc_att_info_cfm+0x40>)
10011cfa:	7025      	strb	r5, [r4, #0]
10011cfc:	3d0c      	subs	r5, #12
10011cfe:	7065      	strb	r5, [r4, #1]
10011d00:	70a5      	strb	r5, [r4, #2]
10011d02:	880d      	ldrh	r5, [r1, #0]
10011d04:	8809      	ldrh	r1, [r1, #0]
10011d06:	7220      	strb	r0, [r4, #8]
10011d08:	0a09      	lsrs	r1, r1, #8
10011d0a:	0a00      	lsrs	r0, r0, #8
10011d0c:	7161      	strb	r1, [r4, #5]
10011d0e:	7260      	strb	r0, [r4, #9]
10011d10:	72a2      	strb	r2, [r4, #10]
10011d12:	71e3      	strb	r3, [r4, #7]
10011d14:	0a12      	lsrs	r2, r2, #8
10011d16:	1c20      	adds	r0, r4, #0
10011d18:	210d      	movs	r1, #13
10011d1a:	4b04      	ldr	r3, [pc, #16]	; (10011d2c <gattc_att_info_cfm+0x44>)
10011d1c:	7125      	strb	r5, [r4, #4]
10011d1e:	72e2      	strb	r2, [r4, #11]
10011d20:	4798      	blx	r3
10011d22:	bd38      	pop	{r3, r4, r5, pc}
10011d24:	1001c098 	.word	0x1001c098
10011d28:	1001bd28 	.word	0x1001bd28
10011d2c:	10010979 	.word	0x10010979

10011d30 <gattc_send_evt_cmd_handler>:
10011d30:	b570      	push	{r4, r5, r6, lr}
10011d32:	2610      	movs	r6, #16
10011d34:	ac04      	add	r4, sp, #16
10011d36:	8825      	ldrh	r5, [r4, #0]
10011d38:	4c15      	ldr	r4, [pc, #84]	; (10011d90 <gattc_send_evt_cmd_handler+0x60>)
10011d3a:	70e2      	strb	r2, [r4, #3]
10011d3c:	4a15      	ldr	r2, [pc, #84]	; (10011d94 <gattc_send_evt_cmd_handler+0x64>)
10011d3e:	7026      	strb	r6, [r4, #0]
10011d40:	3e04      	subs	r6, #4
10011d42:	7066      	strb	r6, [r4, #1]
10011d44:	70a6      	strb	r6, [r4, #2]
10011d46:	8816      	ldrh	r6, [r2, #0]
10011d48:	8812      	ldrh	r2, [r2, #0]
10011d4a:	7220      	strb	r0, [r4, #8]
10011d4c:	0a12      	lsrs	r2, r2, #8
10011d4e:	7162      	strb	r2, [r4, #5]
10011d50:	4a11      	ldr	r2, [pc, #68]	; (10011d98 <gattc_send_evt_cmd_handler+0x68>)
10011d52:	7321      	strb	r1, [r4, #12]
10011d54:	8812      	ldrh	r2, [r2, #0]
10011d56:	73a5      	strb	r5, [r4, #14]
10011d58:	3201      	adds	r2, #1
10011d5a:	7262      	strb	r2, [r4, #9]
10011d5c:	1212      	asrs	r2, r2, #8
10011d5e:	72a2      	strb	r2, [r4, #10]
10011d60:	2200      	movs	r2, #0
10011d62:	72e2      	strb	r2, [r4, #11]
10011d64:	0a0a      	lsrs	r2, r1, #8
10011d66:	7362      	strb	r2, [r4, #13]
10011d68:	0a2a      	lsrs	r2, r5, #8
10011d6a:	73e2      	strb	r2, [r4, #15]
10011d6c:	1c19      	adds	r1, r3, #0
10011d6e:	1c2a      	adds	r2, r5, #0
10011d70:	4b0a      	ldr	r3, [pc, #40]	; (10011d9c <gattc_send_evt_cmd_handler+0x6c>)
10011d72:	3510      	adds	r5, #16
10011d74:	480a      	ldr	r0, [pc, #40]	; (10011da0 <gattc_send_evt_cmd_handler+0x70>)
10011d76:	7126      	strb	r6, [r4, #4]
10011d78:	4798      	blx	r3
10011d7a:	b2a9      	uxth	r1, r5
10011d7c:	1c0b      	adds	r3, r1, #0
10011d7e:	3b08      	subs	r3, #8
10011d80:	71a3      	strb	r3, [r4, #6]
10011d82:	121b      	asrs	r3, r3, #8
10011d84:	71e3      	strb	r3, [r4, #7]
10011d86:	1c20      	adds	r0, r4, #0
10011d88:	4b06      	ldr	r3, [pc, #24]	; (10011da4 <gattc_send_evt_cmd_handler+0x74>)
10011d8a:	4798      	blx	r3
10011d8c:	bd70      	pop	{r4, r5, r6, pc}
10011d8e:	46c0      	nop			; (mov r8, r8)
10011d90:	1001c098 	.word	0x1001c098
10011d94:	1001bd28 	.word	0x1001bd28
10011d98:	1001ae64 	.word	0x1001ae64
10011d9c:	100166cf 	.word	0x100166cf
10011da0:	1001c0a8 	.word	0x1001c0a8
10011da4:	10010979 	.word	0x10010979

10011da8 <gattc_event_cfm_handler>:
10011da8:	220e      	movs	r2, #14
10011daa:	b508      	push	{r3, lr}
10011dac:	4b0b      	ldr	r3, [pc, #44]	; (10011ddc <gattc_event_cfm_handler+0x34>)
10011dae:	701a      	strb	r2, [r3, #0]
10011db0:	3a02      	subs	r2, #2
10011db2:	705a      	strb	r2, [r3, #1]
10011db4:	709a      	strb	r2, [r3, #2]
10011db6:	4a0a      	ldr	r2, [pc, #40]	; (10011de0 <gattc_event_cfm_handler+0x38>)
10011db8:	70d8      	strb	r0, [r3, #3]
10011dba:	8810      	ldrh	r0, [r2, #0]
10011dbc:	8812      	ldrh	r2, [r2, #0]
10011dbe:	7219      	strb	r1, [r3, #8]
10011dc0:	0a12      	lsrs	r2, r2, #8
10011dc2:	715a      	strb	r2, [r3, #5]
10011dc4:	2202      	movs	r2, #2
10011dc6:	719a      	strb	r2, [r3, #6]
10011dc8:	2200      	movs	r2, #0
10011dca:	0a09      	lsrs	r1, r1, #8
10011dcc:	7118      	strb	r0, [r3, #4]
10011dce:	7259      	strb	r1, [r3, #9]
10011dd0:	71da      	strb	r2, [r3, #7]
10011dd2:	1c18      	adds	r0, r3, #0
10011dd4:	210a      	movs	r1, #10
10011dd6:	4b03      	ldr	r3, [pc, #12]	; (10011de4 <gattc_event_cfm_handler+0x3c>)
10011dd8:	4798      	blx	r3
10011dda:	bd08      	pop	{r3, pc}
10011ddc:	1001c098 	.word	0x1001c098
10011de0:	1001bd28 	.word	0x1001bd28
10011de4:	10010979 	.word	0x10010979

10011de8 <gattc_disc_svc_ind_parser>:
10011de8:	b570      	push	{r4, r5, r6, lr}
10011dea:	1c15      	adds	r5, r2, #0
10011dec:	0a00      	lsrs	r0, r0, #8
10011dee:	8010      	strh	r0, [r2, #0]
10011df0:	784b      	ldrb	r3, [r1, #1]
10011df2:	780a      	ldrb	r2, [r1, #0]
10011df4:	021b      	lsls	r3, r3, #8
10011df6:	4313      	orrs	r3, r2
10011df8:	806b      	strh	r3, [r5, #2]
10011dfa:	78cb      	ldrb	r3, [r1, #3]
10011dfc:	788a      	ldrb	r2, [r1, #2]
10011dfe:	021b      	lsls	r3, r3, #8
10011e00:	4313      	orrs	r3, r2
10011e02:	80ab      	strh	r3, [r5, #4]
10011e04:	790e      	ldrb	r6, [r1, #4]
10011e06:	4b05      	ldr	r3, [pc, #20]	; (10011e1c <gattc_disc_svc_ind_parser+0x34>)
10011e08:	1c30      	adds	r0, r6, #0
10011e0a:	1c0c      	adds	r4, r1, #0
10011e0c:	4798      	blx	r3
10011e0e:	1c32      	adds	r2, r6, #0
10011e10:	71a8      	strb	r0, [r5, #6]
10011e12:	1d61      	adds	r1, r4, #5
10011e14:	1de8      	adds	r0, r5, #7
10011e16:	4b02      	ldr	r3, [pc, #8]	; (10011e20 <gattc_disc_svc_ind_parser+0x38>)
10011e18:	4798      	blx	r3
10011e1a:	bd70      	pop	{r4, r5, r6, pc}
10011e1c:	1000fcb9 	.word	0x1000fcb9
10011e20:	100166cf 	.word	0x100166cf

10011e24 <gattc_disc_svc_incl_ind_parser>:
10011e24:	b570      	push	{r4, r5, r6, lr}
10011e26:	1c15      	adds	r5, r2, #0
10011e28:	0a00      	lsrs	r0, r0, #8
10011e2a:	8010      	strh	r0, [r2, #0]
10011e2c:	784b      	ldrb	r3, [r1, #1]
10011e2e:	780a      	ldrb	r2, [r1, #0]
10011e30:	021b      	lsls	r3, r3, #8
10011e32:	4313      	orrs	r3, r2
10011e34:	806b      	strh	r3, [r5, #2]
10011e36:	78cb      	ldrb	r3, [r1, #3]
10011e38:	788a      	ldrb	r2, [r1, #2]
10011e3a:	021b      	lsls	r3, r3, #8
10011e3c:	4313      	orrs	r3, r2
10011e3e:	80ab      	strh	r3, [r5, #4]
10011e40:	794b      	ldrb	r3, [r1, #5]
10011e42:	790a      	ldrb	r2, [r1, #4]
10011e44:	021b      	lsls	r3, r3, #8
10011e46:	4313      	orrs	r3, r2
10011e48:	80eb      	strh	r3, [r5, #6]
10011e4a:	798e      	ldrb	r6, [r1, #6]
10011e4c:	4b05      	ldr	r3, [pc, #20]	; (10011e64 <gattc_disc_svc_incl_ind_parser+0x40>)
10011e4e:	1c30      	adds	r0, r6, #0
10011e50:	1c0c      	adds	r4, r1, #0
10011e52:	4798      	blx	r3
10011e54:	7228      	strb	r0, [r5, #8]
10011e56:	1c28      	adds	r0, r5, #0
10011e58:	1c32      	adds	r2, r6, #0
10011e5a:	1de1      	adds	r1, r4, #7
10011e5c:	4b02      	ldr	r3, [pc, #8]	; (10011e68 <gattc_disc_svc_incl_ind_parser+0x44>)
10011e5e:	3009      	adds	r0, #9
10011e60:	4798      	blx	r3
10011e62:	bd70      	pop	{r4, r5, r6, pc}
10011e64:	1000fcb9 	.word	0x1000fcb9
10011e68:	100166cf 	.word	0x100166cf

10011e6c <gattc_disc_char_ind_parser>:
10011e6c:	b570      	push	{r4, r5, r6, lr}
10011e6e:	1c15      	adds	r5, r2, #0
10011e70:	0a00      	lsrs	r0, r0, #8
10011e72:	8010      	strh	r0, [r2, #0]
10011e74:	784b      	ldrb	r3, [r1, #1]
10011e76:	780a      	ldrb	r2, [r1, #0]
10011e78:	021b      	lsls	r3, r3, #8
10011e7a:	4313      	orrs	r3, r2
10011e7c:	806b      	strh	r3, [r5, #2]
10011e7e:	78cb      	ldrb	r3, [r1, #3]
10011e80:	788a      	ldrb	r2, [r1, #2]
10011e82:	021b      	lsls	r3, r3, #8
10011e84:	4313      	orrs	r3, r2
10011e86:	80ab      	strh	r3, [r5, #4]
10011e88:	790b      	ldrb	r3, [r1, #4]
10011e8a:	1c0c      	adds	r4, r1, #0
10011e8c:	71ab      	strb	r3, [r5, #6]
10011e8e:	794e      	ldrb	r6, [r1, #5]
10011e90:	4b05      	ldr	r3, [pc, #20]	; (10011ea8 <gattc_disc_char_ind_parser+0x3c>)
10011e92:	1c30      	adds	r0, r6, #0
10011e94:	4798      	blx	r3
10011e96:	71e8      	strb	r0, [r5, #7]
10011e98:	1c28      	adds	r0, r5, #0
10011e9a:	1c32      	adds	r2, r6, #0
10011e9c:	1da1      	adds	r1, r4, #6
10011e9e:	4b03      	ldr	r3, [pc, #12]	; (10011eac <gattc_disc_char_ind_parser+0x40>)
10011ea0:	3008      	adds	r0, #8
10011ea2:	4798      	blx	r3
10011ea4:	bd70      	pop	{r4, r5, r6, pc}
10011ea6:	46c0      	nop			; (mov r8, r8)
10011ea8:	1000fcb9 	.word	0x1000fcb9
10011eac:	100166cf 	.word	0x100166cf

10011eb0 <gattc_disc_char_desc_ind_parser>:
10011eb0:	b570      	push	{r4, r5, r6, lr}
10011eb2:	1c15      	adds	r5, r2, #0
10011eb4:	0a00      	lsrs	r0, r0, #8
10011eb6:	8010      	strh	r0, [r2, #0]
10011eb8:	784b      	ldrb	r3, [r1, #1]
10011eba:	780a      	ldrb	r2, [r1, #0]
10011ebc:	021b      	lsls	r3, r3, #8
10011ebe:	4313      	orrs	r3, r2
10011ec0:	806b      	strh	r3, [r5, #2]
10011ec2:	788e      	ldrb	r6, [r1, #2]
10011ec4:	4b05      	ldr	r3, [pc, #20]	; (10011edc <gattc_disc_char_desc_ind_parser+0x2c>)
10011ec6:	1c30      	adds	r0, r6, #0
10011ec8:	1c0c      	adds	r4, r1, #0
10011eca:	4798      	blx	r3
10011ecc:	1c32      	adds	r2, r6, #0
10011ece:	7128      	strb	r0, [r5, #4]
10011ed0:	1ce1      	adds	r1, r4, #3
10011ed2:	1d68      	adds	r0, r5, #5
10011ed4:	4b02      	ldr	r3, [pc, #8]	; (10011ee0 <gattc_disc_char_desc_ind_parser+0x30>)
10011ed6:	4798      	blx	r3
10011ed8:	bd70      	pop	{r4, r5, r6, pc}
10011eda:	46c0      	nop			; (mov r8, r8)
10011edc:	1000fcb9 	.word	0x1000fcb9
10011ee0:	100166cf 	.word	0x100166cf

10011ee4 <gattc_event_ind_and_notification_parser>:
10011ee4:	b510      	push	{r4, lr}
10011ee6:	780c      	ldrb	r4, [r1, #0]
10011ee8:	1c13      	adds	r3, r2, #0
10011eea:	2c12      	cmp	r4, #18
10011eec:	d10e      	bne.n	10011f0c <gattc_event_ind_and_notification_parser+0x28>
10011eee:	0a00      	lsrs	r0, r0, #8
10011ef0:	8010      	strh	r0, [r2, #0]
10011ef2:	788a      	ldrb	r2, [r1, #2]
10011ef4:	709a      	strb	r2, [r3, #2]
10011ef6:	7948      	ldrb	r0, [r1, #5]
10011ef8:	790c      	ldrb	r4, [r1, #4]
10011efa:	0200      	lsls	r0, r0, #8
10011efc:	4320      	orrs	r0, r4
10011efe:	8098      	strh	r0, [r3, #4]
10011f00:	3106      	adds	r1, #6
10011f02:	1d98      	adds	r0, r3, #6
10011f04:	4b0b      	ldr	r3, [pc, #44]	; (10011f34 <gattc_event_ind_and_notification_parser+0x50>)
10011f06:	4798      	blx	r3
10011f08:	221b      	movs	r2, #27
10011f0a:	e010      	b.n	10011f2e <gattc_event_ind_and_notification_parser+0x4a>
10011f0c:	2200      	movs	r2, #0
10011f0e:	2c13      	cmp	r4, #19
10011f10:	d10d      	bne.n	10011f2e <gattc_event_ind_and_notification_parser+0x4a>
10011f12:	0a00      	lsrs	r0, r0, #8
10011f14:	8018      	strh	r0, [r3, #0]
10011f16:	788a      	ldrb	r2, [r1, #2]
10011f18:	709a      	strb	r2, [r3, #2]
10011f1a:	7908      	ldrb	r0, [r1, #4]
10011f1c:	78cc      	ldrb	r4, [r1, #3]
10011f1e:	0200      	lsls	r0, r0, #8
10011f20:	4320      	orrs	r0, r4
10011f22:	8098      	strh	r0, [r3, #4]
10011f24:	3106      	adds	r1, #6
10011f26:	1d98      	adds	r0, r3, #6
10011f28:	4b02      	ldr	r3, [pc, #8]	; (10011f34 <gattc_event_ind_and_notification_parser+0x50>)
10011f2a:	4798      	blx	r3
10011f2c:	221c      	movs	r2, #28
10011f2e:	1c10      	adds	r0, r2, #0
10011f30:	bd10      	pop	{r4, pc}
10011f32:	46c0      	nop			; (mov r8, r8)
10011f34:	100166cf 	.word	0x100166cf

10011f38 <gattc_complete_evt_handler>:
10011f38:	b500      	push	{lr}
10011f3a:	0a00      	lsrs	r0, r0, #8
10011f3c:	8010      	strh	r0, [r2, #0]
10011f3e:	7808      	ldrb	r0, [r1, #0]
10011f40:	7090      	strb	r0, [r2, #2]
10011f42:	784b      	ldrb	r3, [r1, #1]
10011f44:	3801      	subs	r0, #1
10011f46:	70d3      	strb	r3, [r2, #3]
10011f48:	2813      	cmp	r0, #19
10011f4a:	d82c      	bhi.n	10011fa6 <gattc_complete_evt_handler+0x6e>
10011f4c:	f001 fb9a 	bl	10013684 <__gnu_thumb1_case_uqi>
10011f50:	0a0a0a0c 	.word	0x0a0a0a0c
10011f54:	210a0a0a 	.word	0x210a0a0a
10011f58:	111f2121 	.word	0x111f2121
10011f5c:	2b111111 	.word	0x2b111111
10011f60:	2919132b 	.word	0x2919132b
10011f64:	2017      	movs	r0, #23
10011f66:	e01f      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f68:	2024      	movs	r0, #36	; 0x24
10011f6a:	2b00      	cmp	r3, #0
10011f6c:	d11c      	bne.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f6e:	3017      	adds	r0, #23
10011f70:	e01a      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f72:	2025      	movs	r0, #37	; 0x25
10011f74:	e018      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f76:	4a0d      	ldr	r2, [pc, #52]	; (10011fac <gattc_complete_evt_handler+0x74>)
10011f78:	201d      	movs	r0, #29
10011f7a:	6813      	ldr	r3, [r2, #0]
10011f7c:	3b01      	subs	r3, #1
10011f7e:	6013      	str	r3, [r2, #0]
10011f80:	e012      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f82:	4a0a      	ldr	r2, [pc, #40]	; (10011fac <gattc_complete_evt_handler+0x74>)
10011f84:	201e      	movs	r0, #30
10011f86:	6813      	ldr	r3, [r2, #0]
10011f88:	3b01      	subs	r3, #1
10011f8a:	6013      	str	r3, [r2, #0]
10011f8c:	e00c      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f8e:	2019      	movs	r0, #25
10011f90:	e00a      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f92:	203b      	movs	r0, #59	; 0x3b
10011f94:	2b00      	cmp	r3, #0
10011f96:	d007      	beq.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011f98:	2182      	movs	r1, #130	; 0x82
10011f9a:	0089      	lsls	r1, r1, #2
10011f9c:	5453      	strb	r3, [r2, r1]
10011f9e:	3823      	subs	r0, #35	; 0x23
10011fa0:	e002      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011fa2:	2021      	movs	r0, #33	; 0x21
10011fa4:	e000      	b.n	10011fa8 <gattc_complete_evt_handler+0x70>
10011fa6:	2000      	movs	r0, #0
10011fa8:	bd00      	pop	{pc}
10011faa:	46c0      	nop			; (mov r8, r8)
10011fac:	1001ae68 	.word	0x1001ae68

10011fb0 <gattc_event_mtu_changed_ind_parser>:
10011fb0:	0a00      	lsrs	r0, r0, #8
10011fb2:	8010      	strh	r0, [r2, #0]
10011fb4:	784b      	ldrb	r3, [r1, #1]
10011fb6:	7809      	ldrb	r1, [r1, #0]
10011fb8:	021b      	lsls	r3, r3, #8
10011fba:	430b      	orrs	r3, r1
10011fbc:	8053      	strh	r3, [r2, #2]
10011fbe:	4770      	bx	lr

10011fc0 <gattc_read_ind_parser>:
10011fc0:	0a00      	lsrs	r0, r0, #8
10011fc2:	b508      	push	{r3, lr}
10011fc4:	8010      	strh	r0, [r2, #0]
10011fc6:	1c13      	adds	r3, r2, #0
10011fc8:	2282      	movs	r2, #130	; 0x82
10011fca:	2000      	movs	r0, #0
10011fcc:	0092      	lsls	r2, r2, #2
10011fce:	5498      	strb	r0, [r3, r2]
10011fd0:	784a      	ldrb	r2, [r1, #1]
10011fd2:	7808      	ldrb	r0, [r1, #0]
10011fd4:	0212      	lsls	r2, r2, #8
10011fd6:	4302      	orrs	r2, r0
10011fd8:	805a      	strh	r2, [r3, #2]
10011fda:	78ca      	ldrb	r2, [r1, #3]
10011fdc:	7888      	ldrb	r0, [r1, #2]
10011fde:	0212      	lsls	r2, r2, #8
10011fe0:	4302      	orrs	r2, r0
10011fe2:	80da      	strh	r2, [r3, #6]
10011fe4:	794a      	ldrb	r2, [r1, #5]
10011fe6:	7908      	ldrb	r0, [r1, #4]
10011fe8:	0212      	lsls	r2, r2, #8
10011fea:	4302      	orrs	r2, r0
10011fec:	809a      	strh	r2, [r3, #4]
10011fee:	3308      	adds	r3, #8
10011ff0:	1c18      	adds	r0, r3, #0
10011ff2:	3106      	adds	r1, #6
10011ff4:	4b01      	ldr	r3, [pc, #4]	; (10011ffc <gattc_read_ind_parser+0x3c>)
10011ff6:	4798      	blx	r3
10011ff8:	bd08      	pop	{r3, pc}
10011ffa:	46c0      	nop			; (mov r8, r8)
10011ffc:	100166cf 	.word	0x100166cf

10012000 <gattc_svc_changed_cfg_ind_parser>:
10012000:	0a00      	lsrs	r0, r0, #8
10012002:	8010      	strh	r0, [r2, #0]
10012004:	784b      	ldrb	r3, [r1, #1]
10012006:	7809      	ldrb	r1, [r1, #0]
10012008:	021b      	lsls	r3, r3, #8
1001200a:	430b      	orrs	r3, r1
1001200c:	8053      	strh	r3, [r2, #2]
1001200e:	4770      	bx	lr

10012010 <init_gattc_task_module>:
10012010:	2300      	movs	r3, #0
10012012:	4a02      	ldr	r2, [pc, #8]	; (1001201c <init_gattc_task_module+0xc>)
10012014:	8013      	strh	r3, [r2, #0]
10012016:	4a02      	ldr	r2, [pc, #8]	; (10012020 <init_gattc_task_module+0x10>)
10012018:	8013      	strh	r3, [r2, #0]
1001201a:	4770      	bx	lr
1001201c:	1001ae62 	.word	0x1001ae62
10012020:	1001ae64 	.word	0x1001ae64

10012024 <gattm_add_svc_req_handler>:
10012024:	2200      	movs	r2, #0
10012026:	210b      	movs	r1, #11
10012028:	b5f0      	push	{r4, r5, r6, r7, lr}
1001202a:	1c04      	adds	r4, r0, #0
1001202c:	7943      	ldrb	r3, [r0, #5]
1001202e:	b085      	sub	sp, #20
10012030:	9301      	str	r3, [sp, #4]
10012032:	ab02      	add	r3, sp, #8
10012034:	71da      	strb	r2, [r3, #7]
10012036:	4b37      	ldr	r3, [pc, #220]	; (10012114 <gattm_add_svc_req_handler+0xf0>)
10012038:	7059      	strb	r1, [r3, #1]
1001203a:	7099      	strb	r1, [r3, #2]
1001203c:	4936      	ldr	r1, [pc, #216]	; (10012118 <gattm_add_svc_req_handler+0xf4>)
1001203e:	701a      	strb	r2, [r3, #0]
10012040:	8808      	ldrh	r0, [r1, #0]
10012042:	8809      	ldrh	r1, [r1, #0]
10012044:	70da      	strb	r2, [r3, #3]
10012046:	0a09      	lsrs	r1, r1, #8
10012048:	7118      	strb	r0, [r3, #4]
1001204a:	7159      	strb	r1, [r3, #5]
1001204c:	8821      	ldrh	r1, [r4, #0]
1001204e:	7219      	strb	r1, [r3, #8]
10012050:	8821      	ldrh	r1, [r4, #0]
10012052:	0a09      	lsrs	r1, r1, #8
10012054:	7259      	strb	r1, [r3, #9]
10012056:	8861      	ldrh	r1, [r4, #2]
10012058:	7299      	strb	r1, [r3, #10]
1001205a:	8861      	ldrh	r1, [r4, #2]
1001205c:	0a09      	lsrs	r1, r1, #8
1001205e:	72d9      	strb	r1, [r3, #11]
10012060:	7921      	ldrb	r1, [r4, #4]
10012062:	7319      	strb	r1, [r3, #12]
10012064:	4669      	mov	r1, sp
10012066:	7909      	ldrb	r1, [r1, #4]
10012068:	7359      	strb	r1, [r3, #13]
1001206a:	18a1      	adds	r1, r4, r2
1001206c:	7988      	ldrb	r0, [r1, #6]
1001206e:	1899      	adds	r1, r3, r2
10012070:	3201      	adds	r2, #1
10012072:	7388      	strb	r0, [r1, #14]
10012074:	2a10      	cmp	r2, #16
10012076:	d1f8      	bne.n	1001206a <gattm_add_svc_req_handler+0x46>
10012078:	1c27      	adds	r7, r4, #0
1001207a:	2300      	movs	r3, #0
1001207c:	251e      	movs	r5, #30
1001207e:	3716      	adds	r7, #22
10012080:	9300      	str	r3, [sp, #0]
10012082:	9b00      	ldr	r3, [sp, #0]
10012084:	9a01      	ldr	r2, [sp, #4]
10012086:	4e23      	ldr	r6, [pc, #140]	; (10012114 <gattm_add_svc_req_handler+0xf0>)
10012088:	4293      	cmp	r3, r2
1001208a:	da21      	bge.n	100120d0 <gattm_add_svc_req_handler+0xac>
1001208c:	1c39      	adds	r1, r7, #0
1001208e:	1970      	adds	r0, r6, r5
10012090:	2210      	movs	r2, #16
10012092:	4b22      	ldr	r3, [pc, #136]	; (1001211c <gattm_add_svc_req_handler+0xf8>)
10012094:	4798      	blx	r3
10012096:	1c2b      	adds	r3, r5, #0
10012098:	8a3a      	ldrh	r2, [r7, #16]
1001209a:	3310      	adds	r3, #16
1001209c:	b29b      	uxth	r3, r3
1001209e:	54f2      	strb	r2, [r6, r3]
100120a0:	1c2b      	adds	r3, r5, #0
100120a2:	8a3a      	ldrh	r2, [r7, #16]
100120a4:	3311      	adds	r3, #17
100120a6:	b29b      	uxth	r3, r3
100120a8:	0a12      	lsrs	r2, r2, #8
100120aa:	54f2      	strb	r2, [r6, r3]
100120ac:	1c2a      	adds	r2, r5, #0
100120ae:	1c2b      	adds	r3, r5, #0
100120b0:	8a79      	ldrh	r1, [r7, #18]
100120b2:	3212      	adds	r2, #18
100120b4:	b292      	uxth	r2, r2
100120b6:	54b1      	strb	r1, [r6, r2]
100120b8:	8a7a      	ldrh	r2, [r7, #18]
100120ba:	3313      	adds	r3, #19
100120bc:	b29b      	uxth	r3, r3
100120be:	0a12      	lsrs	r2, r2, #8
100120c0:	54f2      	strb	r2, [r6, r3]
100120c2:	9b00      	ldr	r3, [sp, #0]
100120c4:	3514      	adds	r5, #20
100120c6:	3301      	adds	r3, #1
100120c8:	b2ad      	uxth	r5, r5
100120ca:	9300      	str	r3, [sp, #0]
100120cc:	3714      	adds	r7, #20
100120ce:	e7d8      	b.n	10012082 <gattm_add_svc_req_handler+0x5e>
100120d0:	2114      	movs	r1, #20
100120d2:	4d13      	ldr	r5, [pc, #76]	; (10012120 <gattm_add_svc_req_handler+0xfc>)
100120d4:	4b13      	ldr	r3, [pc, #76]	; (10012124 <gattm_add_svc_req_handler+0x100>)
100120d6:	4351      	muls	r1, r2
100120d8:	802b      	strh	r3, [r5, #0]
100120da:	230b      	movs	r3, #11
100120dc:	311e      	adds	r1, #30
100120de:	80ab      	strh	r3, [r5, #4]
100120e0:	1c0b      	adds	r3, r1, #0
100120e2:	3b08      	subs	r3, #8
100120e4:	71b3      	strb	r3, [r6, #6]
100120e6:	121b      	asrs	r3, r3, #8
100120e8:	71f3      	strb	r3, [r6, #7]
100120ea:	1c30      	adds	r0, r6, #0
100120ec:	4b0e      	ldr	r3, [pc, #56]	; (10012128 <gattm_add_svc_req_handler+0x104>)
100120ee:	4798      	blx	r3
100120f0:	ab02      	add	r3, sp, #8
100120f2:	1dde      	adds	r6, r3, #7
100120f4:	1c30      	adds	r0, r6, #0
100120f6:	4b0d      	ldr	r3, [pc, #52]	; (1001212c <gattm_add_svc_req_handler+0x108>)
100120f8:	4798      	blx	r3
100120fa:	7833      	ldrb	r3, [r6, #0]
100120fc:	20e2      	movs	r0, #226	; 0xe2
100120fe:	2b00      	cmp	r3, #0
10012100:	d106      	bne.n	10012110 <gattm_add_svc_req_handler+0xec>
10012102:	68aa      	ldr	r2, [r5, #8]
10012104:	7853      	ldrb	r3, [r2, #1]
10012106:	7811      	ldrb	r1, [r2, #0]
10012108:	021b      	lsls	r3, r3, #8
1001210a:	430b      	orrs	r3, r1
1001210c:	8023      	strh	r3, [r4, #0]
1001210e:	7890      	ldrb	r0, [r2, #2]
10012110:	b005      	add	sp, #20
10012112:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012114:	1001c098 	.word	0x1001c098
10012118:	1001bd28 	.word	0x1001bd28
1001211c:	100166cf 	.word	0x100166cf
10012120:	1001bd1c 	.word	0x1001bd1c
10012124:	00000b01 	.word	0x00000b01
10012128:	10010979 	.word	0x10010979
1001212c:	100109dd 	.word	0x100109dd

10012130 <gattm_add_attribute_req_handler>:
10012130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012132:	1c1f      	adds	r7, r3, #0
10012134:	4b16      	ldr	r3, [pc, #88]	; (10012190 <gattm_add_attribute_req_handler+0x60>)
10012136:	9100      	str	r1, [sp, #0]
10012138:	9201      	str	r2, [sp, #4]
1001213a:	1c05      	adds	r5, r0, #0
1001213c:	7946      	ldrb	r6, [r0, #5]
1001213e:	6818      	ldr	r0, [r3, #0]
10012140:	2114      	movs	r1, #20
10012142:	4b14      	ldr	r3, [pc, #80]	; (10012194 <gattm_add_attribute_req_handler+0x64>)
10012144:	382a      	subs	r0, #42	; 0x2a
10012146:	4798      	blx	r3
10012148:	2311      	movs	r3, #17
1001214a:	4286      	cmp	r6, r0
1001214c:	d21e      	bcs.n	1001218c <gattm_add_attribute_req_handler+0x5c>
1001214e:	2414      	movs	r4, #20
10012150:	4366      	muls	r6, r4
10012152:	19a8      	adds	r0, r5, r6
10012154:	2100      	movs	r1, #0
10012156:	2210      	movs	r2, #16
10012158:	4b0f      	ldr	r3, [pc, #60]	; (10012198 <gattm_add_attribute_req_handler+0x68>)
1001215a:	3016      	adds	r0, #22
1001215c:	4798      	blx	r3
1001215e:	7968      	ldrb	r0, [r5, #5]
10012160:	1c3a      	adds	r2, r7, #0
10012162:	4360      	muls	r0, r4
10012164:	1828      	adds	r0, r5, r0
10012166:	4b0d      	ldr	r3, [pc, #52]	; (1001219c <gattm_add_attribute_req_handler+0x6c>)
10012168:	3016      	adds	r0, #22
1001216a:	9908      	ldr	r1, [sp, #32]
1001216c:	4798      	blx	r3
1001216e:	466a      	mov	r2, sp
10012170:	796b      	ldrb	r3, [r5, #5]
10012172:	8812      	ldrh	r2, [r2, #0]
10012174:	435c      	muls	r4, r3
10012176:	192c      	adds	r4, r5, r4
10012178:	8522      	strh	r2, [r4, #40]	; 0x28
1001217a:	466a      	mov	r2, sp
1001217c:	8892      	ldrh	r2, [r2, #4]
1001217e:	84e2      	strh	r2, [r4, #38]	; 0x26
10012180:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012182:	8013      	strh	r3, [r2, #0]
10012184:	796b      	ldrb	r3, [r5, #5]
10012186:	3301      	adds	r3, #1
10012188:	716b      	strb	r3, [r5, #5]
1001218a:	2300      	movs	r3, #0
1001218c:	1c18      	adds	r0, r3, #0
1001218e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012190:	1001add8 	.word	0x1001add8
10012194:	10013699 	.word	0x10013699
10012198:	100166e1 	.word	0x100166e1
1001219c:	100166cf 	.word	0x100166cf

100121a0 <gattm_att_set_value_req_handler>:
100121a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100121a2:	466b      	mov	r3, sp
100121a4:	1dde      	adds	r6, r3, #7
100121a6:	2300      	movs	r3, #0
100121a8:	1c0d      	adds	r5, r1, #0
100121aa:	210c      	movs	r1, #12
100121ac:	270b      	movs	r7, #11
100121ae:	4c17      	ldr	r4, [pc, #92]	; (1001220c <gattm_att_set_value_req_handler+0x6c>)
100121b0:	7033      	strb	r3, [r6, #0]
100121b2:	70e3      	strb	r3, [r4, #3]
100121b4:	4b16      	ldr	r3, [pc, #88]	; (10012210 <gattm_att_set_value_req_handler+0x70>)
100121b6:	7021      	strb	r1, [r4, #0]
100121b8:	8819      	ldrh	r1, [r3, #0]
100121ba:	881b      	ldrh	r3, [r3, #0]
100121bc:	7220      	strb	r0, [r4, #8]
100121be:	0a1b      	lsrs	r3, r3, #8
100121c0:	7163      	strb	r3, [r4, #5]
100121c2:	0a00      	lsrs	r0, r0, #8
100121c4:	0a2b      	lsrs	r3, r5, #8
100121c6:	7121      	strb	r1, [r4, #4]
100121c8:	7260      	strb	r0, [r4, #9]
100121ca:	1c11      	adds	r1, r2, #0
100121cc:	72a5      	strb	r5, [r4, #10]
100121ce:	1c2a      	adds	r2, r5, #0
100121d0:	72e3      	strb	r3, [r4, #11]
100121d2:	350c      	adds	r5, #12
100121d4:	4b0f      	ldr	r3, [pc, #60]	; (10012214 <gattm_att_set_value_req_handler+0x74>)
100121d6:	4810      	ldr	r0, [pc, #64]	; (10012218 <gattm_att_set_value_req_handler+0x78>)
100121d8:	7067      	strb	r7, [r4, #1]
100121da:	70a7      	strb	r7, [r4, #2]
100121dc:	4798      	blx	r3
100121de:	b2a9      	uxth	r1, r5
100121e0:	4b0e      	ldr	r3, [pc, #56]	; (1001221c <gattm_att_set_value_req_handler+0x7c>)
100121e2:	4d0f      	ldr	r5, [pc, #60]	; (10012220 <gattm_att_set_value_req_handler+0x80>)
100121e4:	1c20      	adds	r0, r4, #0
100121e6:	802b      	strh	r3, [r5, #0]
100121e8:	1c0b      	adds	r3, r1, #0
100121ea:	3b08      	subs	r3, #8
100121ec:	71a3      	strb	r3, [r4, #6]
100121ee:	121b      	asrs	r3, r3, #8
100121f0:	71e3      	strb	r3, [r4, #7]
100121f2:	4b0c      	ldr	r3, [pc, #48]	; (10012224 <gattm_att_set_value_req_handler+0x84>)
100121f4:	80af      	strh	r7, [r5, #4]
100121f6:	4798      	blx	r3
100121f8:	1c30      	adds	r0, r6, #0
100121fa:	4b0b      	ldr	r3, [pc, #44]	; (10012228 <gattm_att_set_value_req_handler+0x88>)
100121fc:	4798      	blx	r3
100121fe:	7833      	ldrb	r3, [r6, #0]
10012200:	20e2      	movs	r0, #226	; 0xe2
10012202:	2b00      	cmp	r3, #0
10012204:	d101      	bne.n	1001220a <gattm_att_set_value_req_handler+0x6a>
10012206:	68ab      	ldr	r3, [r5, #8]
10012208:	7898      	ldrb	r0, [r3, #2]
1001220a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001220c:	1001c098 	.word	0x1001c098
10012210:	1001bd28 	.word	0x1001bd28
10012214:	100166cf 	.word	0x100166cf
10012218:	1001c0a4 	.word	0x1001c0a4
1001221c:	00000b0d 	.word	0x00000b0d
10012220:	1001bd1c 	.word	0x1001bd1c
10012224:	10010979 	.word	0x10010979
10012228:	100109dd 	.word	0x100109dd

1001222c <gattm_att_get_value_req_handler>:
1001222c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001222e:	b085      	sub	sp, #20
10012230:	9201      	str	r2, [sp, #4]
10012232:	220a      	movs	r2, #10
10012234:	1c04      	adds	r4, r0, #0
10012236:	481d      	ldr	r0, [pc, #116]	; (100122ac <gattm_att_get_value_req_handler+0x80>)
10012238:	ab02      	add	r3, sp, #8
1001223a:	1dde      	adds	r6, r3, #7
1001223c:	7002      	strb	r2, [r0, #0]
1001223e:	2300      	movs	r3, #0
10012240:	220b      	movs	r2, #11
10012242:	4d1b      	ldr	r5, [pc, #108]	; (100122b0 <gattm_att_get_value_req_handler+0x84>)
10012244:	1c0f      	adds	r7, r1, #0
10012246:	8829      	ldrh	r1, [r5, #0]
10012248:	882d      	ldrh	r5, [r5, #0]
1001224a:	7101      	strb	r1, [r0, #4]
1001224c:	0a2d      	lsrs	r5, r5, #8
1001224e:	7145      	strb	r5, [r0, #5]
10012250:	0a25      	lsrs	r5, r4, #8
10012252:	7245      	strb	r5, [r0, #9]
10012254:	4917      	ldr	r1, [pc, #92]	; (100122b4 <gattm_att_get_value_req_handler+0x88>)
10012256:	4d18      	ldr	r5, [pc, #96]	; (100122b8 <gattm_att_get_value_req_handler+0x8c>)
10012258:	7033      	strb	r3, [r6, #0]
1001225a:	7042      	strb	r2, [r0, #1]
1001225c:	7082      	strb	r2, [r0, #2]
1001225e:	70c3      	strb	r3, [r0, #3]
10012260:	8029      	strh	r1, [r5, #0]
10012262:	80aa      	strh	r2, [r5, #4]
10012264:	71c3      	strb	r3, [r0, #7]
10012266:	3a09      	subs	r2, #9
10012268:	210a      	movs	r1, #10
1001226a:	4b14      	ldr	r3, [pc, #80]	; (100122bc <gattm_att_get_value_req_handler+0x90>)
1001226c:	7182      	strb	r2, [r0, #6]
1001226e:	7204      	strb	r4, [r0, #8]
10012270:	4798      	blx	r3
10012272:	1c30      	adds	r0, r6, #0
10012274:	4b12      	ldr	r3, [pc, #72]	; (100122c0 <gattm_att_get_value_req_handler+0x94>)
10012276:	4798      	blx	r3
10012278:	7833      	ldrb	r3, [r6, #0]
1001227a:	20e2      	movs	r0, #226	; 0xe2
1001227c:	2b00      	cmp	r3, #0
1001227e:	d112      	bne.n	100122a6 <gattm_att_get_value_req_handler+0x7a>
10012280:	68a9      	ldr	r1, [r5, #8]
10012282:	9801      	ldr	r0, [sp, #4]
10012284:	784d      	ldrb	r5, [r1, #1]
10012286:	780b      	ldrb	r3, [r1, #0]
10012288:	78ca      	ldrb	r2, [r1, #3]
1001228a:	022d      	lsls	r5, r5, #8
1001228c:	431d      	orrs	r5, r3
1001228e:	788b      	ldrb	r3, [r1, #2]
10012290:	0212      	lsls	r2, r2, #8
10012292:	431a      	orrs	r2, r3
10012294:	803a      	strh	r2, [r7, #0]
10012296:	790e      	ldrb	r6, [r1, #4]
10012298:	4b0a      	ldr	r3, [pc, #40]	; (100122c4 <gattm_att_get_value_req_handler+0x98>)
1001229a:	3105      	adds	r1, #5
1001229c:	4798      	blx	r3
1001229e:	20e2      	movs	r0, #226	; 0xe2
100122a0:	42ac      	cmp	r4, r5
100122a2:	d100      	bne.n	100122a6 <gattm_att_get_value_req_handler+0x7a>
100122a4:	1c30      	adds	r0, r6, #0
100122a6:	b005      	add	sp, #20
100122a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122aa:	46c0      	nop			; (mov r8, r8)
100122ac:	1001c098 	.word	0x1001c098
100122b0:	1001bd28 	.word	0x1001bd28
100122b4:	00000b0b 	.word	0x00000b0b
100122b8:	1001bd1c 	.word	0x1001bd1c
100122bc:	10010979 	.word	0x10010979
100122c0:	100109dd 	.word	0x100109dd
100122c4:	100166cf 	.word	0x100166cf

100122c8 <htpt_enable_rsp_handler>:
100122c8:	780b      	ldrb	r3, [r1, #0]
100122ca:	7013      	strb	r3, [r2, #0]
100122cc:	784b      	ldrb	r3, [r1, #1]
100122ce:	7053      	strb	r3, [r2, #1]
100122d0:	4770      	bx	lr

100122d2 <htpt_temp_send_rsp_handler>:
100122d2:	780b      	ldrb	r3, [r1, #0]
100122d4:	7013      	strb	r3, [r2, #0]
100122d6:	4770      	bx	lr

100122d8 <htpt_meas_intv_upd_rsp_handler>:
100122d8:	780b      	ldrb	r3, [r1, #0]
100122da:	7013      	strb	r3, [r2, #0]
100122dc:	4770      	bx	lr

100122de <htpt_meas_intv_chg_req_ind_handler>:
100122de:	78cb      	ldrb	r3, [r1, #3]
100122e0:	7889      	ldrb	r1, [r1, #2]
100122e2:	021b      	lsls	r3, r3, #8
100122e4:	430b      	orrs	r3, r1
100122e6:	8013      	strh	r3, [r2, #0]
100122e8:	4770      	bx	lr

100122ea <htpt_cfg_indntf_ind_handler>:
100122ea:	780b      	ldrb	r3, [r1, #0]
100122ec:	7013      	strb	r3, [r2, #0]
100122ee:	784b      	ldrb	r3, [r1, #1]
100122f0:	7053      	strb	r3, [r2, #1]
100122f2:	4770      	bx	lr

100122f4 <pow>:
100122f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100122f6:	465f      	mov	r7, fp
100122f8:	464d      	mov	r5, r9
100122fa:	4656      	mov	r6, sl
100122fc:	4644      	mov	r4, r8
100122fe:	b4f0      	push	{r4, r5, r6, r7}
10012300:	b091      	sub	sp, #68	; 0x44
10012302:	001f      	movs	r7, r3
10012304:	0004      	movs	r4, r0
10012306:	000d      	movs	r5, r1
10012308:	0016      	movs	r6, r2
1001230a:	f000 fa01 	bl	10012710 <__ieee754_pow>
1001230e:	4bcf      	ldr	r3, [pc, #828]	; (1001264c <pow+0x358>)
10012310:	9002      	str	r0, [sp, #8]
10012312:	9103      	str	r1, [sp, #12]
10012314:	469b      	mov	fp, r3
10012316:	781b      	ldrb	r3, [r3, #0]
10012318:	b25b      	sxtb	r3, r3
1001231a:	4699      	mov	r9, r3
1001231c:	3301      	adds	r3, #1
1001231e:	d04f      	beq.n	100123c0 <pow+0xcc>
10012320:	0032      	movs	r2, r6
10012322:	003b      	movs	r3, r7
10012324:	0030      	movs	r0, r6
10012326:	0039      	movs	r1, r7
10012328:	f003 ffbe 	bl	100162a8 <__aeabi_dcmpun>
1001232c:	9000      	str	r0, [sp, #0]
1001232e:	2800      	cmp	r0, #0
10012330:	d146      	bne.n	100123c0 <pow+0xcc>
10012332:	0022      	movs	r2, r4
10012334:	002b      	movs	r3, r5
10012336:	0020      	movs	r0, r4
10012338:	0029      	movs	r1, r5
1001233a:	f003 ffb5 	bl	100162a8 <__aeabi_dcmpun>
1001233e:	2200      	movs	r2, #0
10012340:	4682      	mov	sl, r0
10012342:	2800      	cmp	r0, #0
10012344:	d134      	bne.n	100123b0 <pow+0xbc>
10012346:	2300      	movs	r3, #0
10012348:	0020      	movs	r0, r4
1001234a:	0029      	movs	r1, r5
1001234c:	f001 fb2a 	bl	100139a4 <__aeabi_dcmpeq>
10012350:	2800      	cmp	r0, #0
10012352:	d03a      	beq.n	100123ca <pow+0xd6>
10012354:	2200      	movs	r2, #0
10012356:	2300      	movs	r3, #0
10012358:	0030      	movs	r0, r6
1001235a:	0039      	movs	r1, r7
1001235c:	f001 fb22 	bl	100139a4 <__aeabi_dcmpeq>
10012360:	9005      	str	r0, [sp, #20]
10012362:	2800      	cmp	r0, #0
10012364:	d100      	bne.n	10012368 <pow+0x74>
10012366:	e074      	b.n	10012452 <pow+0x15e>
10012368:	ab06      	add	r3, sp, #24
1001236a:	4698      	mov	r8, r3
1001236c:	2301      	movs	r3, #1
1001236e:	4642      	mov	r2, r8
10012370:	9306      	str	r3, [sp, #24]
10012372:	4bb7      	ldr	r3, [pc, #732]	; (10012650 <pow+0x35c>)
10012374:	6053      	str	r3, [r2, #4]
10012376:	4643      	mov	r3, r8
10012378:	4652      	mov	r2, sl
1001237a:	609c      	str	r4, [r3, #8]
1001237c:	60dd      	str	r5, [r3, #12]
1001237e:	621a      	str	r2, [r3, #32]
10012380:	611e      	str	r6, [r3, #16]
10012382:	615f      	str	r7, [r3, #20]
10012384:	4642      	mov	r2, r8
10012386:	2300      	movs	r3, #0
10012388:	2400      	movs	r4, #0
1001238a:	6193      	str	r3, [r2, #24]
1001238c:	61d4      	str	r4, [r2, #28]
1001238e:	464b      	mov	r3, r9
10012390:	2b00      	cmp	r3, #0
10012392:	d100      	bne.n	10012396 <pow+0xa2>
10012394:	e094      	b.n	100124c0 <pow+0x1cc>
10012396:	2300      	movs	r3, #0
10012398:	4cae      	ldr	r4, [pc, #696]	; (10012654 <pow+0x360>)
1001239a:	9300      	str	r3, [sp, #0]
1001239c:	9401      	str	r4, [sp, #4]
1001239e:	9800      	ldr	r0, [sp, #0]
100123a0:	9901      	ldr	r1, [sp, #4]
100123a2:	b011      	add	sp, #68	; 0x44
100123a4:	bc3c      	pop	{r2, r3, r4, r5}
100123a6:	4690      	mov	r8, r2
100123a8:	4699      	mov	r9, r3
100123aa:	46a2      	mov	sl, r4
100123ac:	46ab      	mov	fp, r5
100123ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100123b0:	2300      	movs	r3, #0
100123b2:	0030      	movs	r0, r6
100123b4:	0039      	movs	r1, r7
100123b6:	f001 faf5 	bl	100139a4 <__aeabi_dcmpeq>
100123ba:	2800      	cmp	r0, #0
100123bc:	d000      	beq.n	100123c0 <pow+0xcc>
100123be:	e0eb      	b.n	10012598 <pow+0x2a4>
100123c0:	9b02      	ldr	r3, [sp, #8]
100123c2:	9c03      	ldr	r4, [sp, #12]
100123c4:	9300      	str	r3, [sp, #0]
100123c6:	9401      	str	r4, [sp, #4]
100123c8:	e7e9      	b.n	1001239e <pow+0xaa>
100123ca:	9802      	ldr	r0, [sp, #8]
100123cc:	9903      	ldr	r1, [sp, #12]
100123ce:	f001 f82b 	bl	10013428 <finite>
100123d2:	4681      	mov	r9, r0
100123d4:	2800      	cmp	r0, #0
100123d6:	d100      	bne.n	100123da <pow+0xe6>
100123d8:	e086      	b.n	100124e8 <pow+0x1f4>
100123da:	9802      	ldr	r0, [sp, #8]
100123dc:	9903      	ldr	r1, [sp, #12]
100123de:	2200      	movs	r2, #0
100123e0:	2300      	movs	r3, #0
100123e2:	f001 fadf 	bl	100139a4 <__aeabi_dcmpeq>
100123e6:	2800      	cmp	r0, #0
100123e8:	d0ea      	beq.n	100123c0 <pow+0xcc>
100123ea:	0020      	movs	r0, r4
100123ec:	0029      	movs	r1, r5
100123ee:	f001 f81b 	bl	10013428 <finite>
100123f2:	9a02      	ldr	r2, [sp, #8]
100123f4:	9b03      	ldr	r3, [sp, #12]
100123f6:	9200      	str	r2, [sp, #0]
100123f8:	9301      	str	r3, [sp, #4]
100123fa:	2800      	cmp	r0, #0
100123fc:	d0cf      	beq.n	1001239e <pow+0xaa>
100123fe:	0030      	movs	r0, r6
10012400:	0039      	movs	r1, r7
10012402:	f001 f811 	bl	10013428 <finite>
10012406:	9a02      	ldr	r2, [sp, #8]
10012408:	9b03      	ldr	r3, [sp, #12]
1001240a:	9200      	str	r2, [sp, #0]
1001240c:	9301      	str	r3, [sp, #4]
1001240e:	2800      	cmp	r0, #0
10012410:	d0c5      	beq.n	1001239e <pow+0xaa>
10012412:	ab06      	add	r3, sp, #24
10012414:	4698      	mov	r8, r3
10012416:	2304      	movs	r3, #4
10012418:	4642      	mov	r2, r8
1001241a:	9306      	str	r3, [sp, #24]
1001241c:	4b8c      	ldr	r3, [pc, #560]	; (10012650 <pow+0x35c>)
1001241e:	6094      	str	r4, [r2, #8]
10012420:	60d5      	str	r5, [r2, #12]
10012422:	6053      	str	r3, [r2, #4]
10012424:	2300      	movs	r3, #0
10012426:	2400      	movs	r4, #0
10012428:	6213      	str	r3, [r2, #32]
1001242a:	2300      	movs	r3, #0
1001242c:	6193      	str	r3, [r2, #24]
1001242e:	61d4      	str	r4, [r2, #28]
10012430:	465b      	mov	r3, fp
10012432:	781b      	ldrb	r3, [r3, #0]
10012434:	6116      	str	r6, [r2, #16]
10012436:	6157      	str	r7, [r2, #20]
10012438:	b25b      	sxtb	r3, r3
1001243a:	2b02      	cmp	r3, #2
1001243c:	d004      	beq.n	10012448 <pow+0x154>
1001243e:	4640      	mov	r0, r8
10012440:	f000 fffc 	bl	1001343c <matherr>
10012444:	2800      	cmp	r0, #0
10012446:	d140      	bne.n	100124ca <pow+0x1d6>
10012448:	f004 f8fc 	bl	10016644 <__errno>
1001244c:	2322      	movs	r3, #34	; 0x22
1001244e:	6003      	str	r3, [r0, #0]
10012450:	e03b      	b.n	100124ca <pow+0x1d6>
10012452:	0030      	movs	r0, r6
10012454:	0039      	movs	r1, r7
10012456:	f000 ffe7 	bl	10013428 <finite>
1001245a:	9a02      	ldr	r2, [sp, #8]
1001245c:	9b03      	ldr	r3, [sp, #12]
1001245e:	9200      	str	r2, [sp, #0]
10012460:	9301      	str	r3, [sp, #4]
10012462:	2800      	cmp	r0, #0
10012464:	d09b      	beq.n	1001239e <pow+0xaa>
10012466:	2200      	movs	r2, #0
10012468:	2300      	movs	r3, #0
1001246a:	0030      	movs	r0, r6
1001246c:	0039      	movs	r1, r7
1001246e:	f001 fa9f 	bl	100139b0 <__aeabi_dcmplt>
10012472:	2800      	cmp	r0, #0
10012474:	d100      	bne.n	10012478 <pow+0x184>
10012476:	e792      	b.n	1001239e <pow+0xaa>
10012478:	ab06      	add	r3, sp, #24
1001247a:	4698      	mov	r8, r3
1001247c:	2301      	movs	r3, #1
1001247e:	4642      	mov	r2, r8
10012480:	9306      	str	r3, [sp, #24]
10012482:	4b73      	ldr	r3, [pc, #460]	; (10012650 <pow+0x35c>)
10012484:	6053      	str	r3, [r2, #4]
10012486:	4643      	mov	r3, r8
10012488:	9a05      	ldr	r2, [sp, #20]
1001248a:	609c      	str	r4, [r3, #8]
1001248c:	60dd      	str	r5, [r3, #12]
1001248e:	621a      	str	r2, [r3, #32]
10012490:	611e      	str	r6, [r3, #16]
10012492:	615f      	str	r7, [r3, #20]
10012494:	465b      	mov	r3, fp
10012496:	781b      	ldrb	r3, [r3, #0]
10012498:	b25b      	sxtb	r3, r3
1001249a:	2b00      	cmp	r3, #0
1001249c:	d00b      	beq.n	100124b6 <pow+0x1c2>
1001249e:	2000      	movs	r0, #0
100124a0:	4642      	mov	r2, r8
100124a2:	496d      	ldr	r1, [pc, #436]	; (10012658 <pow+0x364>)
100124a4:	6190      	str	r0, [r2, #24]
100124a6:	61d1      	str	r1, [r2, #28]
100124a8:	2b02      	cmp	r3, #2
100124aa:	d109      	bne.n	100124c0 <pow+0x1cc>
100124ac:	f004 f8ca 	bl	10016644 <__errno>
100124b0:	2321      	movs	r3, #33	; 0x21
100124b2:	6003      	str	r3, [r0, #0]
100124b4:	e009      	b.n	100124ca <pow+0x1d6>
100124b6:	4642      	mov	r2, r8
100124b8:	2300      	movs	r3, #0
100124ba:	2400      	movs	r4, #0
100124bc:	6193      	str	r3, [r2, #24]
100124be:	61d4      	str	r4, [r2, #28]
100124c0:	4640      	mov	r0, r8
100124c2:	f000 ffbb 	bl	1001343c <matherr>
100124c6:	2800      	cmp	r0, #0
100124c8:	d0f0      	beq.n	100124ac <pow+0x1b8>
100124ca:	4643      	mov	r3, r8
100124cc:	6a1b      	ldr	r3, [r3, #32]
100124ce:	2b00      	cmp	r3, #0
100124d0:	d004      	beq.n	100124dc <pow+0x1e8>
100124d2:	f004 f8b7 	bl	10016644 <__errno>
100124d6:	4643      	mov	r3, r8
100124d8:	6a1b      	ldr	r3, [r3, #32]
100124da:	6003      	str	r3, [r0, #0]
100124dc:	4643      	mov	r3, r8
100124de:	69dc      	ldr	r4, [r3, #28]
100124e0:	699b      	ldr	r3, [r3, #24]
100124e2:	9300      	str	r3, [sp, #0]
100124e4:	9401      	str	r4, [sp, #4]
100124e6:	e75a      	b.n	1001239e <pow+0xaa>
100124e8:	0020      	movs	r0, r4
100124ea:	0029      	movs	r1, r5
100124ec:	f000 ff9c 	bl	10013428 <finite>
100124f0:	2800      	cmp	r0, #0
100124f2:	d100      	bne.n	100124f6 <pow+0x202>
100124f4:	e771      	b.n	100123da <pow+0xe6>
100124f6:	0030      	movs	r0, r6
100124f8:	0039      	movs	r1, r7
100124fa:	f000 ff95 	bl	10013428 <finite>
100124fe:	2800      	cmp	r0, #0
10012500:	d100      	bne.n	10012504 <pow+0x210>
10012502:	e76a      	b.n	100123da <pow+0xe6>
10012504:	9802      	ldr	r0, [sp, #8]
10012506:	9903      	ldr	r1, [sp, #12]
10012508:	000b      	movs	r3, r1
1001250a:	0002      	movs	r2, r0
1001250c:	f003 fecc 	bl	100162a8 <__aeabi_dcmpun>
10012510:	ab06      	add	r3, sp, #24
10012512:	4698      	mov	r8, r3
10012514:	2800      	cmp	r0, #0
10012516:	d17a      	bne.n	1001260e <pow+0x31a>
10012518:	2303      	movs	r3, #3
1001251a:	4642      	mov	r2, r8
1001251c:	9306      	str	r3, [sp, #24]
1001251e:	4b4c      	ldr	r3, [pc, #304]	; (10012650 <pow+0x35c>)
10012520:	6210      	str	r0, [r2, #32]
10012522:	6053      	str	r3, [r2, #4]
10012524:	465b      	mov	r3, fp
10012526:	781b      	ldrb	r3, [r3, #0]
10012528:	6094      	str	r4, [r2, #8]
1001252a:	60d5      	str	r5, [r2, #12]
1001252c:	b25b      	sxtb	r3, r3
1001252e:	6116      	str	r6, [r2, #16]
10012530:	6157      	str	r7, [r2, #20]
10012532:	4699      	mov	r9, r3
10012534:	2b00      	cmp	r3, #0
10012536:	d148      	bne.n	100125ca <pow+0x2d6>
10012538:	22e0      	movs	r2, #224	; 0xe0
1001253a:	4641      	mov	r1, r8
1001253c:	4b47      	ldr	r3, [pc, #284]	; (1001265c <pow+0x368>)
1001253e:	0612      	lsls	r2, r2, #24
10012540:	618a      	str	r2, [r1, #24]
10012542:	61cb      	str	r3, [r1, #28]
10012544:	0020      	movs	r0, r4
10012546:	2200      	movs	r2, #0
10012548:	2300      	movs	r3, #0
1001254a:	0029      	movs	r1, r5
1001254c:	f001 fa30 	bl	100139b0 <__aeabi_dcmplt>
10012550:	2800      	cmp	r0, #0
10012552:	d100      	bne.n	10012556 <pow+0x262>
10012554:	e773      	b.n	1001243e <pow+0x14a>
10012556:	2200      	movs	r2, #0
10012558:	4b41      	ldr	r3, [pc, #260]	; (10012660 <pow+0x36c>)
1001255a:	0030      	movs	r0, r6
1001255c:	0039      	movs	r1, r7
1001255e:	f003 f8d5 	bl	1001570c <__aeabi_dmul>
10012562:	0004      	movs	r4, r0
10012564:	000d      	movs	r5, r1
10012566:	f000 ff71 	bl	1001344c <rint>
1001256a:	0002      	movs	r2, r0
1001256c:	000b      	movs	r3, r1
1001256e:	0020      	movs	r0, r4
10012570:	0029      	movs	r1, r5
10012572:	f001 fa17 	bl	100139a4 <__aeabi_dcmpeq>
10012576:	2800      	cmp	r0, #0
10012578:	d105      	bne.n	10012586 <pow+0x292>
1001257a:	22e0      	movs	r2, #224	; 0xe0
1001257c:	4b39      	ldr	r3, [pc, #228]	; (10012664 <pow+0x370>)
1001257e:	0612      	lsls	r2, r2, #24
10012580:	4641      	mov	r1, r8
10012582:	618a      	str	r2, [r1, #24]
10012584:	61cb      	str	r3, [r1, #28]
10012586:	465b      	mov	r3, fp
10012588:	781b      	ldrb	r3, [r3, #0]
1001258a:	b25b      	sxtb	r3, r3
1001258c:	4699      	mov	r9, r3
1001258e:	464b      	mov	r3, r9
10012590:	2b02      	cmp	r3, #2
10012592:	d000      	beq.n	10012596 <pow+0x2a2>
10012594:	e753      	b.n	1001243e <pow+0x14a>
10012596:	e757      	b.n	10012448 <pow+0x154>
10012598:	ab06      	add	r3, sp, #24
1001259a:	4698      	mov	r8, r3
1001259c:	2301      	movs	r3, #1
1001259e:	4642      	mov	r2, r8
100125a0:	9306      	str	r3, [sp, #24]
100125a2:	4b2b      	ldr	r3, [pc, #172]	; (10012650 <pow+0x35c>)
100125a4:	6053      	str	r3, [r2, #4]
100125a6:	4643      	mov	r3, r8
100125a8:	609c      	str	r4, [r3, #8]
100125aa:	60dd      	str	r5, [r3, #12]
100125ac:	2400      	movs	r4, #0
100125ae:	9a00      	ldr	r2, [sp, #0]
100125b0:	4d28      	ldr	r5, [pc, #160]	; (10012654 <pow+0x360>)
100125b2:	621a      	str	r2, [r3, #32]
100125b4:	611e      	str	r6, [r3, #16]
100125b6:	615f      	str	r7, [r3, #20]
100125b8:	619c      	str	r4, [r3, #24]
100125ba:	61dd      	str	r5, [r3, #28]
100125bc:	464b      	mov	r3, r9
100125be:	9400      	str	r4, [sp, #0]
100125c0:	9501      	str	r5, [sp, #4]
100125c2:	2b02      	cmp	r3, #2
100125c4:	d000      	beq.n	100125c8 <pow+0x2d4>
100125c6:	e77b      	b.n	100124c0 <pow+0x1cc>
100125c8:	e6e9      	b.n	1001239e <pow+0xaa>
100125ca:	2200      	movs	r2, #0
100125cc:	4641      	mov	r1, r8
100125ce:	4b26      	ldr	r3, [pc, #152]	; (10012668 <pow+0x374>)
100125d0:	0020      	movs	r0, r4
100125d2:	618a      	str	r2, [r1, #24]
100125d4:	61cb      	str	r3, [r1, #28]
100125d6:	2200      	movs	r2, #0
100125d8:	2300      	movs	r3, #0
100125da:	0029      	movs	r1, r5
100125dc:	f001 f9e8 	bl	100139b0 <__aeabi_dcmplt>
100125e0:	2800      	cmp	r0, #0
100125e2:	d0d4      	beq.n	1001258e <pow+0x29a>
100125e4:	2200      	movs	r2, #0
100125e6:	4b1e      	ldr	r3, [pc, #120]	; (10012660 <pow+0x36c>)
100125e8:	0030      	movs	r0, r6
100125ea:	0039      	movs	r1, r7
100125ec:	f003 f88e 	bl	1001570c <__aeabi_dmul>
100125f0:	0004      	movs	r4, r0
100125f2:	000d      	movs	r5, r1
100125f4:	f000 ff2a 	bl	1001344c <rint>
100125f8:	0002      	movs	r2, r0
100125fa:	000b      	movs	r3, r1
100125fc:	0020      	movs	r0, r4
100125fe:	0029      	movs	r1, r5
10012600:	f001 f9d0 	bl	100139a4 <__aeabi_dcmpeq>
10012604:	2800      	cmp	r0, #0
10012606:	d1be      	bne.n	10012586 <pow+0x292>
10012608:	2200      	movs	r2, #0
1001260a:	4b13      	ldr	r3, [pc, #76]	; (10012658 <pow+0x364>)
1001260c:	e7b8      	b.n	10012580 <pow+0x28c>
1001260e:	2301      	movs	r3, #1
10012610:	4642      	mov	r2, r8
10012612:	9306      	str	r3, [sp, #24]
10012614:	4b0e      	ldr	r3, [pc, #56]	; (10012650 <pow+0x35c>)
10012616:	6053      	str	r3, [r2, #4]
10012618:	4643      	mov	r3, r8
1001261a:	464a      	mov	r2, r9
1001261c:	609c      	str	r4, [r3, #8]
1001261e:	60dd      	str	r5, [r3, #12]
10012620:	621a      	str	r2, [r3, #32]
10012622:	611e      	str	r6, [r3, #16]
10012624:	615f      	str	r7, [r3, #20]
10012626:	2400      	movs	r4, #0
10012628:	465b      	mov	r3, fp
1001262a:	571c      	ldrsb	r4, [r3, r4]
1001262c:	2c00      	cmp	r4, #0
1001262e:	d100      	bne.n	10012632 <pow+0x33e>
10012630:	e741      	b.n	100124b6 <pow+0x1c2>
10012632:	2300      	movs	r3, #0
10012634:	2200      	movs	r2, #0
10012636:	0019      	movs	r1, r3
10012638:	0010      	movs	r0, r2
1001263a:	f002 fc43 	bl	10014ec4 <__aeabi_ddiv>
1001263e:	4643      	mov	r3, r8
10012640:	6198      	str	r0, [r3, #24]
10012642:	61d9      	str	r1, [r3, #28]
10012644:	2c02      	cmp	r4, #2
10012646:	d100      	bne.n	1001264a <pow+0x356>
10012648:	e730      	b.n	100124ac <pow+0x1b8>
1001264a:	e739      	b.n	100124c0 <pow+0x1cc>
1001264c:	10019338 	.word	0x10019338
10012650:	10019114 	.word	0x10019114
10012654:	3ff00000 	.word	0x3ff00000
10012658:	fff00000 	.word	0xfff00000
1001265c:	47efffff 	.word	0x47efffff
10012660:	3fe00000 	.word	0x3fe00000
10012664:	c7efffff 	.word	0xc7efffff
10012668:	7ff00000 	.word	0x7ff00000

1001266c <sqrtf>:
1001266c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001266e:	2600      	movs	r6, #0
10012670:	b08d      	sub	sp, #52	; 0x34
10012672:	1c04      	adds	r4, r0, #0
10012674:	f000 fe78 	bl	10013368 <__ieee754_sqrtf>
10012678:	4b23      	ldr	r3, [pc, #140]	; (10012708 <sqrtf+0x9c>)
1001267a:	1c05      	adds	r5, r0, #0
1001267c:	579e      	ldrsb	r6, [r3, r6]
1001267e:	1c73      	adds	r3, r6, #1
10012680:	d00b      	beq.n	1001269a <sqrtf+0x2e>
10012682:	1c21      	adds	r1, r4, #0
10012684:	1c20      	adds	r0, r4, #0
10012686:	f002 f831 	bl	100146ec <__aeabi_fcmpun>
1001268a:	1e07      	subs	r7, r0, #0
1001268c:	d105      	bne.n	1001269a <sqrtf+0x2e>
1001268e:	2100      	movs	r1, #0
10012690:	1c20      	adds	r0, r4, #0
10012692:	f001 f9c7 	bl	10013a24 <__aeabi_fcmplt>
10012696:	2800      	cmp	r0, #0
10012698:	d102      	bne.n	100126a0 <sqrtf+0x34>
1001269a:	1c28      	adds	r0, r5, #0
1001269c:	b00d      	add	sp, #52	; 0x34
1001269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126a0:	2301      	movs	r3, #1
100126a2:	9302      	str	r3, [sp, #8]
100126a4:	4b19      	ldr	r3, [pc, #100]	; (1001270c <sqrtf+0xa0>)
100126a6:	1c20      	adds	r0, r4, #0
100126a8:	9303      	str	r3, [sp, #12]
100126aa:	970a      	str	r7, [sp, #40]	; 0x28
100126ac:	f003 fecc 	bl	10016448 <__aeabi_f2d>
100126b0:	2200      	movs	r2, #0
100126b2:	9006      	str	r0, [sp, #24]
100126b4:	9107      	str	r1, [sp, #28]
100126b6:	9004      	str	r0, [sp, #16]
100126b8:	9105      	str	r1, [sp, #20]
100126ba:	2300      	movs	r3, #0
100126bc:	2e00      	cmp	r6, #0
100126be:	d014      	beq.n	100126ea <sqrtf+0x7e>
100126c0:	0010      	movs	r0, r2
100126c2:	0019      	movs	r1, r3
100126c4:	f002 fbfe 	bl	10014ec4 <__aeabi_ddiv>
100126c8:	9008      	str	r0, [sp, #32]
100126ca:	9109      	str	r1, [sp, #36]	; 0x24
100126cc:	2e02      	cmp	r6, #2
100126ce:	d10e      	bne.n	100126ee <sqrtf+0x82>
100126d0:	f003 ffb8 	bl	10016644 <__errno>
100126d4:	2321      	movs	r3, #33	; 0x21
100126d6:	6003      	str	r3, [r0, #0]
100126d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100126da:	9301      	str	r3, [sp, #4]
100126dc:	2b00      	cmp	r3, #0
100126de:	d10c      	bne.n	100126fa <sqrtf+0x8e>
100126e0:	9808      	ldr	r0, [sp, #32]
100126e2:	9909      	ldr	r1, [sp, #36]	; 0x24
100126e4:	f003 ff04 	bl	100164f0 <__aeabi_d2f>
100126e8:	e7d8      	b.n	1001269c <sqrtf+0x30>
100126ea:	9208      	str	r2, [sp, #32]
100126ec:	9309      	str	r3, [sp, #36]	; 0x24
100126ee:	a802      	add	r0, sp, #8
100126f0:	f000 fea4 	bl	1001343c <matherr>
100126f4:	2800      	cmp	r0, #0
100126f6:	d1ef      	bne.n	100126d8 <sqrtf+0x6c>
100126f8:	e7ea      	b.n	100126d0 <sqrtf+0x64>
100126fa:	f003 ffa3 	bl	10016644 <__errno>
100126fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012700:	9301      	str	r3, [sp, #4]
10012702:	6003      	str	r3, [r0, #0]
10012704:	e7ec      	b.n	100126e0 <sqrtf+0x74>
10012706:	46c0      	nop			; (mov r8, r8)
10012708:	10019338 	.word	0x10019338
1001270c:	10019118 	.word	0x10019118

10012710 <__ieee754_pow>:
10012710:	b5f0      	push	{r4, r5, r6, r7, lr}
10012712:	4656      	mov	r6, sl
10012714:	464d      	mov	r5, r9
10012716:	4644      	mov	r4, r8
10012718:	465f      	mov	r7, fp
1001271a:	b4f0      	push	{r4, r5, r6, r7}
1001271c:	001c      	movs	r4, r3
1001271e:	0013      	movs	r3, r2
10012720:	0067      	lsls	r7, r4, #1
10012722:	b091      	sub	sp, #68	; 0x44
10012724:	087f      	lsrs	r7, r7, #1
10012726:	9300      	str	r3, [sp, #0]
10012728:	9401      	str	r4, [sp, #4]
1001272a:	0006      	movs	r6, r0
1001272c:	000d      	movs	r5, r1
1001272e:	4680      	mov	r8, r0
10012730:	4689      	mov	r9, r1
10012732:	46a2      	mov	sl, r4
10012734:	433b      	orrs	r3, r7
10012736:	d032      	beq.n	1001279e <__ieee754_pow+0x8e>
10012738:	4b6e      	ldr	r3, [pc, #440]	; (100128f4 <__ieee754_pow+0x1e4>)
1001273a:	006c      	lsls	r4, r5, #1
1001273c:	0864      	lsrs	r4, r4, #1
1001273e:	429c      	cmp	r4, r3
10012740:	dc29      	bgt.n	10012796 <__ieee754_pow+0x86>
10012742:	d026      	beq.n	10012792 <__ieee754_pow+0x82>
10012744:	429f      	cmp	r7, r3
10012746:	dc26      	bgt.n	10012796 <__ieee754_pow+0x86>
10012748:	4b6a      	ldr	r3, [pc, #424]	; (100128f4 <__ieee754_pow+0x1e4>)
1001274a:	429f      	cmp	r7, r3
1001274c:	d100      	bne.n	10012750 <__ieee754_pow+0x40>
1001274e:	e089      	b.n	10012864 <__ieee754_pow+0x154>
10012750:	2300      	movs	r3, #0
10012752:	469b      	mov	fp, r3
10012754:	464b      	mov	r3, r9
10012756:	2b00      	cmp	r3, #0
10012758:	da00      	bge.n	1001275c <__ieee754_pow+0x4c>
1001275a:	e087      	b.n	1001286c <__ieee754_pow+0x15c>
1001275c:	2a00      	cmp	r2, #0
1001275e:	d12f      	bne.n	100127c0 <__ieee754_pow+0xb0>
10012760:	4b64      	ldr	r3, [pc, #400]	; (100128f4 <__ieee754_pow+0x1e4>)
10012762:	429f      	cmp	r7, r3
10012764:	d100      	bne.n	10012768 <__ieee754_pow+0x58>
10012766:	e09f      	b.n	100128a8 <__ieee754_pow+0x198>
10012768:	4b63      	ldr	r3, [pc, #396]	; (100128f8 <__ieee754_pow+0x1e8>)
1001276a:	429f      	cmp	r7, r3
1001276c:	d05d      	beq.n	1001282a <__ieee754_pow+0x11a>
1001276e:	2380      	movs	r3, #128	; 0x80
10012770:	05db      	lsls	r3, r3, #23
10012772:	459a      	cmp	sl, r3
10012774:	d101      	bne.n	1001277a <__ieee754_pow+0x6a>
10012776:	f000 fbc1 	bl	10012efc <__ieee754_pow+0x7ec>
1001277a:	4b60      	ldr	r3, [pc, #384]	; (100128fc <__ieee754_pow+0x1ec>)
1001277c:	459a      	cmp	sl, r3
1001277e:	d11f      	bne.n	100127c0 <__ieee754_pow+0xb0>
10012780:	464b      	mov	r3, r9
10012782:	2b00      	cmp	r3, #0
10012784:	db1c      	blt.n	100127c0 <__ieee754_pow+0xb0>
10012786:	0030      	movs	r0, r6
10012788:	0029      	movs	r1, r5
1001278a:	f000 fcf7 	bl	1001317c <__ieee754_sqrt>
1001278e:	0006      	movs	r6, r0
10012790:	e007      	b.n	100127a2 <__ieee754_pow+0x92>
10012792:	2800      	cmp	r0, #0
10012794:	d00d      	beq.n	100127b2 <__ieee754_pow+0xa2>
10012796:	4b5a      	ldr	r3, [pc, #360]	; (10012900 <__ieee754_pow+0x1f0>)
10012798:	18e0      	adds	r0, r4, r3
1001279a:	4330      	orrs	r0, r6
1001279c:	d10b      	bne.n	100127b6 <__ieee754_pow+0xa6>
1001279e:	2600      	movs	r6, #0
100127a0:	4955      	ldr	r1, [pc, #340]	; (100128f8 <__ieee754_pow+0x1e8>)
100127a2:	0030      	movs	r0, r6
100127a4:	b011      	add	sp, #68	; 0x44
100127a6:	bc3c      	pop	{r2, r3, r4, r5}
100127a8:	4690      	mov	r8, r2
100127aa:	4699      	mov	r9, r3
100127ac:	46a2      	mov	sl, r4
100127ae:	46ab      	mov	fp, r5
100127b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100127b2:	42a7      	cmp	r7, r4
100127b4:	ddc8      	ble.n	10012748 <__ieee754_pow+0x38>
100127b6:	4853      	ldr	r0, [pc, #332]	; (10012904 <__ieee754_pow+0x1f4>)
100127b8:	f000 fe42 	bl	10013440 <nan>
100127bc:	0006      	movs	r6, r0
100127be:	e7f0      	b.n	100127a2 <__ieee754_pow+0x92>
100127c0:	0030      	movs	r0, r6
100127c2:	0029      	movs	r1, r5
100127c4:	f000 fe2c 	bl	10013420 <fabs>
100127c8:	4643      	mov	r3, r8
100127ca:	2b00      	cmp	r3, #0
100127cc:	d01d      	beq.n	1001280a <__ieee754_pow+0xfa>
100127ce:	0feb      	lsrs	r3, r5, #31
100127d0:	3b01      	subs	r3, #1
100127d2:	4698      	mov	r8, r3
100127d4:	465b      	mov	r3, fp
100127d6:	4642      	mov	r2, r8
100127d8:	4313      	orrs	r3, r2
100127da:	d079      	beq.n	100128d0 <__ieee754_pow+0x1c0>
100127dc:	4b4a      	ldr	r3, [pc, #296]	; (10012908 <__ieee754_pow+0x1f8>)
100127de:	429f      	cmp	r7, r3
100127e0:	dc00      	bgt.n	100127e4 <__ieee754_pow+0xd4>
100127e2:	e09f      	b.n	10012924 <__ieee754_pow+0x214>
100127e4:	4b49      	ldr	r3, [pc, #292]	; (1001290c <__ieee754_pow+0x1fc>)
100127e6:	429f      	cmp	r7, r3
100127e8:	dc01      	bgt.n	100127ee <__ieee754_pow+0xde>
100127ea:	f000 fbce 	bl	10012f8a <__ieee754_pow+0x87a>
100127ee:	4b48      	ldr	r3, [pc, #288]	; (10012910 <__ieee754_pow+0x200>)
100127f0:	429c      	cmp	r4, r3
100127f2:	dd79      	ble.n	100128e8 <__ieee754_pow+0x1d8>
100127f4:	4653      	mov	r3, sl
100127f6:	2b00      	cmp	r3, #0
100127f8:	dd79      	ble.n	100128ee <__ieee754_pow+0x1de>
100127fa:	4a46      	ldr	r2, [pc, #280]	; (10012914 <__ieee754_pow+0x204>)
100127fc:	4b46      	ldr	r3, [pc, #280]	; (10012918 <__ieee754_pow+0x208>)
100127fe:	0010      	movs	r0, r2
10012800:	0019      	movs	r1, r3
10012802:	f002 ff83 	bl	1001570c <__aeabi_dmul>
10012806:	0006      	movs	r6, r0
10012808:	e7cb      	b.n	100127a2 <__ieee754_pow+0x92>
1001280a:	2c00      	cmp	r4, #0
1001280c:	d004      	beq.n	10012818 <__ieee754_pow+0x108>
1001280e:	4a3a      	ldr	r2, [pc, #232]	; (100128f8 <__ieee754_pow+0x1e8>)
10012810:	00ab      	lsls	r3, r5, #2
10012812:	089b      	lsrs	r3, r3, #2
10012814:	4293      	cmp	r3, r2
10012816:	d1da      	bne.n	100127ce <__ieee754_pow+0xbe>
10012818:	4653      	mov	r3, sl
1001281a:	2b00      	cmp	r3, #0
1001281c:	da00      	bge.n	10012820 <__ieee754_pow+0x110>
1001281e:	e3ad      	b.n	10012f7c <__ieee754_pow+0x86c>
10012820:	464b      	mov	r3, r9
10012822:	2b00      	cmp	r3, #0
10012824:	db0d      	blt.n	10012842 <__ieee754_pow+0x132>
10012826:	0006      	movs	r6, r0
10012828:	e7bb      	b.n	100127a2 <__ieee754_pow+0x92>
1001282a:	4653      	mov	r3, sl
1001282c:	0029      	movs	r1, r5
1001282e:	2b00      	cmp	r3, #0
10012830:	dab7      	bge.n	100127a2 <__ieee754_pow+0x92>
10012832:	0032      	movs	r2, r6
10012834:	002b      	movs	r3, r5
10012836:	2000      	movs	r0, #0
10012838:	492f      	ldr	r1, [pc, #188]	; (100128f8 <__ieee754_pow+0x1e8>)
1001283a:	f002 fb43 	bl	10014ec4 <__aeabi_ddiv>
1001283e:	0006      	movs	r6, r0
10012840:	e7af      	b.n	100127a2 <__ieee754_pow+0x92>
10012842:	4b2f      	ldr	r3, [pc, #188]	; (10012900 <__ieee754_pow+0x1f0>)
10012844:	469c      	mov	ip, r3
10012846:	465b      	mov	r3, fp
10012848:	4464      	add	r4, ip
1001284a:	431c      	orrs	r4, r3
1001284c:	d101      	bne.n	10012852 <__ieee754_pow+0x142>
1001284e:	f000 fc2b 	bl	100130a8 <__ieee754_pow+0x998>
10012852:	465b      	mov	r3, fp
10012854:	0006      	movs	r6, r0
10012856:	2b01      	cmp	r3, #1
10012858:	d1a3      	bne.n	100127a2 <__ieee754_pow+0x92>
1001285a:	2380      	movs	r3, #128	; 0x80
1001285c:	061b      	lsls	r3, r3, #24
1001285e:	469c      	mov	ip, r3
10012860:	4461      	add	r1, ip
10012862:	e79e      	b.n	100127a2 <__ieee754_pow+0x92>
10012864:	2a00      	cmp	r2, #0
10012866:	d100      	bne.n	1001286a <__ieee754_pow+0x15a>
10012868:	e772      	b.n	10012750 <__ieee754_pow+0x40>
1001286a:	e794      	b.n	10012796 <__ieee754_pow+0x86>
1001286c:	4b2b      	ldr	r3, [pc, #172]	; (1001291c <__ieee754_pow+0x20c>)
1001286e:	429f      	cmp	r7, r3
10012870:	dc2b      	bgt.n	100128ca <__ieee754_pow+0x1ba>
10012872:	4b27      	ldr	r3, [pc, #156]	; (10012910 <__ieee754_pow+0x200>)
10012874:	429f      	cmp	r7, r3
10012876:	dc00      	bgt.n	1001287a <__ieee754_pow+0x16a>
10012878:	e770      	b.n	1001275c <__ieee754_pow+0x4c>
1001287a:	4929      	ldr	r1, [pc, #164]	; (10012920 <__ieee754_pow+0x210>)
1001287c:	153b      	asrs	r3, r7, #20
1001287e:	468c      	mov	ip, r1
10012880:	4463      	add	r3, ip
10012882:	2b14      	cmp	r3, #20
10012884:	dc01      	bgt.n	1001288a <__ieee754_pow+0x17a>
10012886:	f000 fbf2 	bl	1001306e <__ieee754_pow+0x95e>
1001288a:	2134      	movs	r1, #52	; 0x34
1001288c:	1acb      	subs	r3, r1, r3
1001288e:	9900      	ldr	r1, [sp, #0]
10012890:	40d9      	lsrs	r1, r3
10012892:	0008      	movs	r0, r1
10012894:	4098      	lsls	r0, r3
10012896:	4282      	cmp	r2, r0
10012898:	d000      	beq.n	1001289c <__ieee754_pow+0x18c>
1001289a:	e75f      	b.n	1001275c <__ieee754_pow+0x4c>
1001289c:	2301      	movs	r3, #1
1001289e:	4019      	ands	r1, r3
100128a0:	3301      	adds	r3, #1
100128a2:	1a5b      	subs	r3, r3, r1
100128a4:	469b      	mov	fp, r3
100128a6:	e759      	b.n	1001275c <__ieee754_pow+0x4c>
100128a8:	4b15      	ldr	r3, [pc, #84]	; (10012900 <__ieee754_pow+0x1f0>)
100128aa:	18e0      	adds	r0, r4, r3
100128ac:	4306      	orrs	r6, r0
100128ae:	d100      	bne.n	100128b2 <__ieee754_pow+0x1a2>
100128b0:	e775      	b.n	1001279e <__ieee754_pow+0x8e>
100128b2:	4b17      	ldr	r3, [pc, #92]	; (10012910 <__ieee754_pow+0x200>)
100128b4:	429c      	cmp	r4, r3
100128b6:	dc00      	bgt.n	100128ba <__ieee754_pow+0x1aa>
100128b8:	e351      	b.n	10012f5e <__ieee754_pow+0x84e>
100128ba:	4653      	mov	r3, sl
100128bc:	2b00      	cmp	r3, #0
100128be:	db16      	blt.n	100128ee <__ieee754_pow+0x1de>
100128c0:	9b00      	ldr	r3, [sp, #0]
100128c2:	9c01      	ldr	r4, [sp, #4]
100128c4:	001e      	movs	r6, r3
100128c6:	0021      	movs	r1, r4
100128c8:	e76b      	b.n	100127a2 <__ieee754_pow+0x92>
100128ca:	2302      	movs	r3, #2
100128cc:	469b      	mov	fp, r3
100128ce:	e745      	b.n	1001275c <__ieee754_pow+0x4c>
100128d0:	0032      	movs	r2, r6
100128d2:	002b      	movs	r3, r5
100128d4:	0030      	movs	r0, r6
100128d6:	0029      	movs	r1, r5
100128d8:	f003 f992 	bl	10015c00 <__aeabi_dsub>
100128dc:	0002      	movs	r2, r0
100128de:	000b      	movs	r3, r1
100128e0:	f002 faf0 	bl	10014ec4 <__aeabi_ddiv>
100128e4:	0006      	movs	r6, r0
100128e6:	e75c      	b.n	100127a2 <__ieee754_pow+0x92>
100128e8:	4653      	mov	r3, sl
100128ea:	2b00      	cmp	r3, #0
100128ec:	db85      	blt.n	100127fa <__ieee754_pow+0xea>
100128ee:	2600      	movs	r6, #0
100128f0:	2100      	movs	r1, #0
100128f2:	e756      	b.n	100127a2 <__ieee754_pow+0x92>
100128f4:	7ff00000 	.word	0x7ff00000
100128f8:	3ff00000 	.word	0x3ff00000
100128fc:	3fe00000 	.word	0x3fe00000
10012900:	c0100000 	.word	0xc0100000
10012904:	10018898 	.word	0x10018898
10012908:	41e00000 	.word	0x41e00000
1001290c:	43f00000 	.word	0x43f00000
10012910:	3fefffff 	.word	0x3fefffff
10012914:	8800759c 	.word	0x8800759c
10012918:	7e37e43c 	.word	0x7e37e43c
1001291c:	433fffff 	.word	0x433fffff
10012920:	fffffc01 	.word	0xfffffc01
10012924:	4be8      	ldr	r3, [pc, #928]	; (10012cc8 <__ieee754_pow+0x5b8>)
10012926:	2200      	movs	r2, #0
10012928:	429c      	cmp	r4, r3
1001292a:	dc06      	bgt.n	1001293a <__ieee754_pow+0x22a>
1001292c:	2200      	movs	r2, #0
1001292e:	4be7      	ldr	r3, [pc, #924]	; (10012ccc <__ieee754_pow+0x5bc>)
10012930:	f002 feec 	bl	1001570c <__aeabi_dmul>
10012934:	2235      	movs	r2, #53	; 0x35
10012936:	000c      	movs	r4, r1
10012938:	4252      	negs	r2, r2
1001293a:	4de5      	ldr	r5, [pc, #916]	; (10012cd0 <__ieee754_pow+0x5c0>)
1001293c:	1523      	asrs	r3, r4, #20
1001293e:	46ac      	mov	ip, r5
10012940:	4463      	add	r3, ip
10012942:	4699      	mov	r9, r3
10012944:	0324      	lsls	r4, r4, #12
10012946:	4de3      	ldr	r5, [pc, #908]	; (10012cd4 <__ieee754_pow+0x5c4>)
10012948:	4be3      	ldr	r3, [pc, #908]	; (10012cd8 <__ieee754_pow+0x5c8>)
1001294a:	0b24      	lsrs	r4, r4, #12
1001294c:	4491      	add	r9, r2
1001294e:	4325      	orrs	r5, r4
10012950:	429c      	cmp	r4, r3
10012952:	dd09      	ble.n	10012968 <__ieee754_pow+0x258>
10012954:	4be1      	ldr	r3, [pc, #900]	; (10012cdc <__ieee754_pow+0x5cc>)
10012956:	429c      	cmp	r4, r3
10012958:	dc00      	bgt.n	1001295c <__ieee754_pow+0x24c>
1001295a:	e3a9      	b.n	100130b0 <__ieee754_pow+0x9a0>
1001295c:	2301      	movs	r3, #1
1001295e:	469c      	mov	ip, r3
10012960:	4bdf      	ldr	r3, [pc, #892]	; (10012ce0 <__ieee754_pow+0x5d0>)
10012962:	44e1      	add	r9, ip
10012964:	469c      	mov	ip, r3
10012966:	4465      	add	r5, ip
10012968:	2300      	movs	r3, #0
1001296a:	2400      	movs	r4, #0
1001296c:	2200      	movs	r2, #0
1001296e:	9308      	str	r3, [sp, #32]
10012970:	9409      	str	r4, [sp, #36]	; 0x24
10012972:	930c      	str	r3, [sp, #48]	; 0x30
10012974:	940d      	str	r4, [sp, #52]	; 0x34
10012976:	2400      	movs	r4, #0
10012978:	4bd6      	ldr	r3, [pc, #856]	; (10012cd4 <__ieee754_pow+0x5c4>)
1001297a:	9206      	str	r2, [sp, #24]
1001297c:	9307      	str	r3, [sp, #28]
1001297e:	9a06      	ldr	r2, [sp, #24]
10012980:	9b07      	ldr	r3, [sp, #28]
10012982:	0029      	movs	r1, r5
10012984:	900a      	str	r0, [sp, #40]	; 0x28
10012986:	910b      	str	r1, [sp, #44]	; 0x2c
10012988:	f003 f93a 	bl	10015c00 <__aeabi_dsub>
1001298c:	9a06      	ldr	r2, [sp, #24]
1001298e:	9b07      	ldr	r3, [sp, #28]
10012990:	0006      	movs	r6, r0
10012992:	000f      	movs	r7, r1
10012994:	980a      	ldr	r0, [sp, #40]	; 0x28
10012996:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012998:	f001 ff68 	bl	1001486c <__aeabi_dadd>
1001299c:	0002      	movs	r2, r0
1001299e:	000b      	movs	r3, r1
100129a0:	2000      	movs	r0, #0
100129a2:	49cc      	ldr	r1, [pc, #816]	; (10012cd4 <__ieee754_pow+0x5c4>)
100129a4:	f002 fa8e 	bl	10014ec4 <__aeabi_ddiv>
100129a8:	000a      	movs	r2, r1
100129aa:	0001      	movs	r1, r0
100129ac:	0013      	movs	r3, r2
100129ae:	910e      	str	r1, [sp, #56]	; 0x38
100129b0:	920f      	str	r2, [sp, #60]	; 0x3c
100129b2:	0002      	movs	r2, r0
100129b4:	0039      	movs	r1, r7
100129b6:	0030      	movs	r0, r6
100129b8:	f002 fea8 	bl	1001570c <__aeabi_dmul>
100129bc:	000a      	movs	r2, r1
100129be:	0001      	movs	r1, r0
100129c0:	2080      	movs	r0, #128	; 0x80
100129c2:	9104      	str	r1, [sp, #16]
100129c4:	9205      	str	r2, [sp, #20]
100129c6:	0013      	movs	r3, r2
100129c8:	2200      	movs	r2, #0
100129ca:	2180      	movs	r1, #128	; 0x80
100129cc:	0300      	lsls	r0, r0, #12
100129ce:	4684      	mov	ip, r0
100129d0:	9202      	str	r2, [sp, #8]
100129d2:	9303      	str	r3, [sp, #12]
100129d4:	2200      	movs	r2, #0
100129d6:	0589      	lsls	r1, r1, #22
100129d8:	106d      	asrs	r5, r5, #1
100129da:	430d      	orrs	r5, r1
100129dc:	4465      	add	r5, ip
100129de:	192b      	adds	r3, r5, r4
100129e0:	9802      	ldr	r0, [sp, #8]
100129e2:	9903      	ldr	r1, [sp, #12]
100129e4:	0014      	movs	r4, r2
100129e6:	001d      	movs	r5, r3
100129e8:	f002 fe90 	bl	1001570c <__aeabi_dmul>
100129ec:	0002      	movs	r2, r0
100129ee:	000b      	movs	r3, r1
100129f0:	0030      	movs	r0, r6
100129f2:	0039      	movs	r1, r7
100129f4:	f003 f904 	bl	10015c00 <__aeabi_dsub>
100129f8:	9a06      	ldr	r2, [sp, #24]
100129fa:	9b07      	ldr	r3, [sp, #28]
100129fc:	0006      	movs	r6, r0
100129fe:	000f      	movs	r7, r1
10012a00:	0020      	movs	r0, r4
10012a02:	0029      	movs	r1, r5
10012a04:	f003 f8fc 	bl	10015c00 <__aeabi_dsub>
10012a08:	0002      	movs	r2, r0
10012a0a:	000b      	movs	r3, r1
10012a0c:	980a      	ldr	r0, [sp, #40]	; 0x28
10012a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012a10:	f003 f8f6 	bl	10015c00 <__aeabi_dsub>
10012a14:	9a02      	ldr	r2, [sp, #8]
10012a16:	9b03      	ldr	r3, [sp, #12]
10012a18:	f002 fe78 	bl	1001570c <__aeabi_dmul>
10012a1c:	0002      	movs	r2, r0
10012a1e:	000b      	movs	r3, r1
10012a20:	0030      	movs	r0, r6
10012a22:	0039      	movs	r1, r7
10012a24:	f003 f8ec 	bl	10015c00 <__aeabi_dsub>
10012a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012a2c:	f002 fe6e 	bl	1001570c <__aeabi_dmul>
10012a30:	9d04      	ldr	r5, [sp, #16]
10012a32:	9e05      	ldr	r6, [sp, #20]
10012a34:	9006      	str	r0, [sp, #24]
10012a36:	9107      	str	r1, [sp, #28]
10012a38:	002a      	movs	r2, r5
10012a3a:	0033      	movs	r3, r6
10012a3c:	0028      	movs	r0, r5
10012a3e:	0031      	movs	r1, r6
10012a40:	f002 fe64 	bl	1001570c <__aeabi_dmul>
10012a44:	0006      	movs	r6, r0
10012a46:	000f      	movs	r7, r1
10012a48:	4aa6      	ldr	r2, [pc, #664]	; (10012ce4 <__ieee754_pow+0x5d4>)
10012a4a:	4ba7      	ldr	r3, [pc, #668]	; (10012ce8 <__ieee754_pow+0x5d8>)
10012a4c:	f002 fe5e 	bl	1001570c <__aeabi_dmul>
10012a50:	4aa6      	ldr	r2, [pc, #664]	; (10012cec <__ieee754_pow+0x5dc>)
10012a52:	4ba7      	ldr	r3, [pc, #668]	; (10012cf0 <__ieee754_pow+0x5e0>)
10012a54:	f001 ff0a 	bl	1001486c <__aeabi_dadd>
10012a58:	0032      	movs	r2, r6
10012a5a:	003b      	movs	r3, r7
10012a5c:	f002 fe56 	bl	1001570c <__aeabi_dmul>
10012a60:	4aa4      	ldr	r2, [pc, #656]	; (10012cf4 <__ieee754_pow+0x5e4>)
10012a62:	4ba5      	ldr	r3, [pc, #660]	; (10012cf8 <__ieee754_pow+0x5e8>)
10012a64:	f001 ff02 	bl	1001486c <__aeabi_dadd>
10012a68:	0032      	movs	r2, r6
10012a6a:	003b      	movs	r3, r7
10012a6c:	f002 fe4e 	bl	1001570c <__aeabi_dmul>
10012a70:	4aa2      	ldr	r2, [pc, #648]	; (10012cfc <__ieee754_pow+0x5ec>)
10012a72:	4ba3      	ldr	r3, [pc, #652]	; (10012d00 <__ieee754_pow+0x5f0>)
10012a74:	f001 fefa 	bl	1001486c <__aeabi_dadd>
10012a78:	0032      	movs	r2, r6
10012a7a:	003b      	movs	r3, r7
10012a7c:	f002 fe46 	bl	1001570c <__aeabi_dmul>
10012a80:	4aa0      	ldr	r2, [pc, #640]	; (10012d04 <__ieee754_pow+0x5f4>)
10012a82:	4ba1      	ldr	r3, [pc, #644]	; (10012d08 <__ieee754_pow+0x5f8>)
10012a84:	f001 fef2 	bl	1001486c <__aeabi_dadd>
10012a88:	0032      	movs	r2, r6
10012a8a:	003b      	movs	r3, r7
10012a8c:	f002 fe3e 	bl	1001570c <__aeabi_dmul>
10012a90:	4a9e      	ldr	r2, [pc, #632]	; (10012d0c <__ieee754_pow+0x5fc>)
10012a92:	4b9f      	ldr	r3, [pc, #636]	; (10012d10 <__ieee754_pow+0x600>)
10012a94:	f001 feea 	bl	1001486c <__aeabi_dadd>
10012a98:	0032      	movs	r2, r6
10012a9a:	0004      	movs	r4, r0
10012a9c:	000d      	movs	r5, r1
10012a9e:	003b      	movs	r3, r7
10012aa0:	0030      	movs	r0, r6
10012aa2:	0039      	movs	r1, r7
10012aa4:	f002 fe32 	bl	1001570c <__aeabi_dmul>
10012aa8:	0002      	movs	r2, r0
10012aaa:	000b      	movs	r3, r1
10012aac:	0020      	movs	r0, r4
10012aae:	0029      	movs	r1, r5
10012ab0:	f002 fe2c 	bl	1001570c <__aeabi_dmul>
10012ab4:	9e02      	ldr	r6, [sp, #8]
10012ab6:	9f03      	ldr	r7, [sp, #12]
10012ab8:	0004      	movs	r4, r0
10012aba:	000d      	movs	r5, r1
10012abc:	9804      	ldr	r0, [sp, #16]
10012abe:	9905      	ldr	r1, [sp, #20]
10012ac0:	0032      	movs	r2, r6
10012ac2:	003b      	movs	r3, r7
10012ac4:	f001 fed2 	bl	1001486c <__aeabi_dadd>
10012ac8:	9a06      	ldr	r2, [sp, #24]
10012aca:	9b07      	ldr	r3, [sp, #28]
10012acc:	f002 fe1e 	bl	1001570c <__aeabi_dmul>
10012ad0:	0022      	movs	r2, r4
10012ad2:	002b      	movs	r3, r5
10012ad4:	f001 feca 	bl	1001486c <__aeabi_dadd>
10012ad8:	0032      	movs	r2, r6
10012ada:	900a      	str	r0, [sp, #40]	; 0x28
10012adc:	910b      	str	r1, [sp, #44]	; 0x2c
10012ade:	003b      	movs	r3, r7
10012ae0:	0030      	movs	r0, r6
10012ae2:	0039      	movs	r1, r7
10012ae4:	9602      	str	r6, [sp, #8]
10012ae6:	9703      	str	r7, [sp, #12]
10012ae8:	f002 fe10 	bl	1001570c <__aeabi_dmul>
10012aec:	2200      	movs	r2, #0
10012aee:	4b89      	ldr	r3, [pc, #548]	; (10012d14 <__ieee754_pow+0x604>)
10012af0:	0004      	movs	r4, r0
10012af2:	000d      	movs	r5, r1
10012af4:	f001 feba 	bl	1001486c <__aeabi_dadd>
10012af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10012afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012afc:	f001 feb6 	bl	1001486c <__aeabi_dadd>
10012b00:	2600      	movs	r6, #0
10012b02:	000f      	movs	r7, r1
10012b04:	0032      	movs	r2, r6
10012b06:	000b      	movs	r3, r1
10012b08:	9802      	ldr	r0, [sp, #8]
10012b0a:	9903      	ldr	r1, [sp, #12]
10012b0c:	f002 fdfe 	bl	1001570c <__aeabi_dmul>
10012b10:	2200      	movs	r2, #0
10012b12:	9002      	str	r0, [sp, #8]
10012b14:	9103      	str	r1, [sp, #12]
10012b16:	4b7f      	ldr	r3, [pc, #508]	; (10012d14 <__ieee754_pow+0x604>)
10012b18:	0030      	movs	r0, r6
10012b1a:	0039      	movs	r1, r7
10012b1c:	f003 f870 	bl	10015c00 <__aeabi_dsub>
10012b20:	0022      	movs	r2, r4
10012b22:	002b      	movs	r3, r5
10012b24:	f003 f86c 	bl	10015c00 <__aeabi_dsub>
10012b28:	0002      	movs	r2, r0
10012b2a:	000b      	movs	r3, r1
10012b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
10012b2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012b30:	f003 f866 	bl	10015c00 <__aeabi_dsub>
10012b34:	9a04      	ldr	r2, [sp, #16]
10012b36:	9b05      	ldr	r3, [sp, #20]
10012b38:	f002 fde8 	bl	1001570c <__aeabi_dmul>
10012b3c:	0032      	movs	r2, r6
10012b3e:	0004      	movs	r4, r0
10012b40:	000d      	movs	r5, r1
10012b42:	9806      	ldr	r0, [sp, #24]
10012b44:	9907      	ldr	r1, [sp, #28]
10012b46:	003b      	movs	r3, r7
10012b48:	f002 fde0 	bl	1001570c <__aeabi_dmul>
10012b4c:	0002      	movs	r2, r0
10012b4e:	000b      	movs	r3, r1
10012b50:	0020      	movs	r0, r4
10012b52:	0029      	movs	r1, r5
10012b54:	f001 fe8a 	bl	1001486c <__aeabi_dadd>
10012b58:	0004      	movs	r4, r0
10012b5a:	000d      	movs	r5, r1
10012b5c:	0002      	movs	r2, r0
10012b5e:	000b      	movs	r3, r1
10012b60:	9802      	ldr	r0, [sp, #8]
10012b62:	9903      	ldr	r1, [sp, #12]
10012b64:	f001 fe82 	bl	1001486c <__aeabi_dadd>
10012b68:	2600      	movs	r6, #0
10012b6a:	22e0      	movs	r2, #224	; 0xe0
10012b6c:	4b6a      	ldr	r3, [pc, #424]	; (10012d18 <__ieee754_pow+0x608>)
10012b6e:	0612      	lsls	r2, r2, #24
10012b70:	0030      	movs	r0, r6
10012b72:	000f      	movs	r7, r1
10012b74:	f002 fdca 	bl	1001570c <__aeabi_dmul>
10012b78:	9a02      	ldr	r2, [sp, #8]
10012b7a:	9b03      	ldr	r3, [sp, #12]
10012b7c:	9004      	str	r0, [sp, #16]
10012b7e:	9105      	str	r1, [sp, #20]
10012b80:	0030      	movs	r0, r6
10012b82:	0039      	movs	r1, r7
10012b84:	f003 f83c 	bl	10015c00 <__aeabi_dsub>
10012b88:	0002      	movs	r2, r0
10012b8a:	000b      	movs	r3, r1
10012b8c:	0020      	movs	r0, r4
10012b8e:	0029      	movs	r1, r5
10012b90:	f003 f836 	bl	10015c00 <__aeabi_dsub>
10012b94:	4a61      	ldr	r2, [pc, #388]	; (10012d1c <__ieee754_pow+0x60c>)
10012b96:	4b60      	ldr	r3, [pc, #384]	; (10012d18 <__ieee754_pow+0x608>)
10012b98:	f002 fdb8 	bl	1001570c <__aeabi_dmul>
10012b9c:	4a60      	ldr	r2, [pc, #384]	; (10012d20 <__ieee754_pow+0x610>)
10012b9e:	0004      	movs	r4, r0
10012ba0:	000d      	movs	r5, r1
10012ba2:	4b60      	ldr	r3, [pc, #384]	; (10012d24 <__ieee754_pow+0x614>)
10012ba4:	0030      	movs	r0, r6
10012ba6:	0039      	movs	r1, r7
10012ba8:	f002 fdb0 	bl	1001570c <__aeabi_dmul>
10012bac:	0002      	movs	r2, r0
10012bae:	000b      	movs	r3, r1
10012bb0:	0020      	movs	r0, r4
10012bb2:	0029      	movs	r1, r5
10012bb4:	f001 fe5a 	bl	1001486c <__aeabi_dadd>
10012bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012bbc:	f001 fe56 	bl	1001486c <__aeabi_dadd>
10012bc0:	0006      	movs	r6, r0
10012bc2:	4648      	mov	r0, r9
10012bc4:	000f      	movs	r7, r1
10012bc6:	f003 fbc5 	bl	10016354 <__aeabi_i2d>
10012bca:	0004      	movs	r4, r0
10012bcc:	000d      	movs	r5, r1
10012bce:	9804      	ldr	r0, [sp, #16]
10012bd0:	9905      	ldr	r1, [sp, #20]
10012bd2:	0032      	movs	r2, r6
10012bd4:	003b      	movs	r3, r7
10012bd6:	f001 fe49 	bl	1001486c <__aeabi_dadd>
10012bda:	9a08      	ldr	r2, [sp, #32]
10012bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012bde:	f001 fe45 	bl	1001486c <__aeabi_dadd>
10012be2:	0022      	movs	r2, r4
10012be4:	002b      	movs	r3, r5
10012be6:	f001 fe41 	bl	1001486c <__aeabi_dadd>
10012bea:	2000      	movs	r0, #0
10012bec:	0022      	movs	r2, r4
10012bee:	002b      	movs	r3, r5
10012bf0:	9002      	str	r0, [sp, #8]
10012bf2:	9103      	str	r1, [sp, #12]
10012bf4:	f003 f804 	bl	10015c00 <__aeabi_dsub>
10012bf8:	9a08      	ldr	r2, [sp, #32]
10012bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012bfc:	f003 f800 	bl	10015c00 <__aeabi_dsub>
10012c00:	9a04      	ldr	r2, [sp, #16]
10012c02:	9b05      	ldr	r3, [sp, #20]
10012c04:	f002 fffc 	bl	10015c00 <__aeabi_dsub>
10012c08:	0002      	movs	r2, r0
10012c0a:	000b      	movs	r3, r1
10012c0c:	0030      	movs	r0, r6
10012c0e:	0039      	movs	r1, r7
10012c10:	f002 fff6 	bl	10015c00 <__aeabi_dsub>
10012c14:	9004      	str	r0, [sp, #16]
10012c16:	9105      	str	r1, [sp, #20]
10012c18:	465b      	mov	r3, fp
10012c1a:	4642      	mov	r2, r8
10012c1c:	3b01      	subs	r3, #1
10012c1e:	4313      	orrs	r3, r2
10012c20:	d100      	bne.n	10012c24 <__ieee754_pow+0x514>
10012c22:	e197      	b.n	10012f54 <__ieee754_pow+0x844>
10012c24:	2300      	movs	r3, #0
10012c26:	4c2b      	ldr	r4, [pc, #172]	; (10012cd4 <__ieee754_pow+0x5c4>)
10012c28:	9306      	str	r3, [sp, #24]
10012c2a:	9407      	str	r4, [sp, #28]
10012c2c:	9800      	ldr	r0, [sp, #0]
10012c2e:	9901      	ldr	r1, [sp, #4]
10012c30:	2600      	movs	r6, #0
10012c32:	000b      	movs	r3, r1
10012c34:	0032      	movs	r2, r6
10012c36:	000f      	movs	r7, r1
10012c38:	f002 ffe2 	bl	10015c00 <__aeabi_dsub>
10012c3c:	9a02      	ldr	r2, [sp, #8]
10012c3e:	9b03      	ldr	r3, [sp, #12]
10012c40:	f002 fd64 	bl	1001570c <__aeabi_dmul>
10012c44:	9a00      	ldr	r2, [sp, #0]
10012c46:	9b01      	ldr	r3, [sp, #4]
10012c48:	0004      	movs	r4, r0
10012c4a:	000d      	movs	r5, r1
10012c4c:	9804      	ldr	r0, [sp, #16]
10012c4e:	9905      	ldr	r1, [sp, #20]
10012c50:	f002 fd5c 	bl	1001570c <__aeabi_dmul>
10012c54:	0002      	movs	r2, r0
10012c56:	000b      	movs	r3, r1
10012c58:	0020      	movs	r0, r4
10012c5a:	0029      	movs	r1, r5
10012c5c:	f001 fe06 	bl	1001486c <__aeabi_dadd>
10012c60:	0004      	movs	r4, r0
10012c62:	000d      	movs	r5, r1
10012c64:	9802      	ldr	r0, [sp, #8]
10012c66:	9903      	ldr	r1, [sp, #12]
10012c68:	003b      	movs	r3, r7
10012c6a:	0032      	movs	r2, r6
10012c6c:	9404      	str	r4, [sp, #16]
10012c6e:	9505      	str	r5, [sp, #20]
10012c70:	f002 fd4c 	bl	1001570c <__aeabi_dmul>
10012c74:	9000      	str	r0, [sp, #0]
10012c76:	9101      	str	r1, [sp, #4]
10012c78:	000b      	movs	r3, r1
10012c7a:	0002      	movs	r2, r0
10012c7c:	0029      	movs	r1, r5
10012c7e:	0020      	movs	r0, r4
10012c80:	f001 fdf4 	bl	1001486c <__aeabi_dadd>
10012c84:	4b28      	ldr	r3, [pc, #160]	; (10012d28 <__ieee754_pow+0x618>)
10012c86:	4681      	mov	r9, r0
10012c88:	1e0f      	subs	r7, r1, #0
10012c8a:	468a      	mov	sl, r1
10012c8c:	429f      	cmp	r7, r3
10012c8e:	dc00      	bgt.n	10012c92 <__ieee754_pow+0x582>
10012c90:	e13c      	b.n	10012f0c <__ieee754_pow+0x7fc>
10012c92:	4b26      	ldr	r3, [pc, #152]	; (10012d2c <__ieee754_pow+0x61c>)
10012c94:	18cb      	adds	r3, r1, r3
10012c96:	4303      	orrs	r3, r0
10012c98:	d000      	beq.n	10012c9c <__ieee754_pow+0x58c>
10012c9a:	e1db      	b.n	10013054 <__ieee754_pow+0x944>
10012c9c:	9804      	ldr	r0, [sp, #16]
10012c9e:	9905      	ldr	r1, [sp, #20]
10012ca0:	4a23      	ldr	r2, [pc, #140]	; (10012d30 <__ieee754_pow+0x620>)
10012ca2:	4b24      	ldr	r3, [pc, #144]	; (10012d34 <__ieee754_pow+0x624>)
10012ca4:	f001 fde2 	bl	1001486c <__aeabi_dadd>
10012ca8:	9a00      	ldr	r2, [sp, #0]
10012caa:	9b01      	ldr	r3, [sp, #4]
10012cac:	0004      	movs	r4, r0
10012cae:	000d      	movs	r5, r1
10012cb0:	4648      	mov	r0, r9
10012cb2:	0039      	movs	r1, r7
10012cb4:	f002 ffa4 	bl	10015c00 <__aeabi_dsub>
10012cb8:	0002      	movs	r2, r0
10012cba:	000b      	movs	r3, r1
10012cbc:	0020      	movs	r0, r4
10012cbe:	0029      	movs	r1, r5
10012cc0:	f000 fe8a 	bl	100139d8 <__aeabi_dcmpgt>
10012cc4:	003e      	movs	r6, r7
10012cc6:	e037      	b.n	10012d38 <__ieee754_pow+0x628>
10012cc8:	000fffff 	.word	0x000fffff
10012ccc:	43400000 	.word	0x43400000
10012cd0:	fffffc01 	.word	0xfffffc01
10012cd4:	3ff00000 	.word	0x3ff00000
10012cd8:	0003988e 	.word	0x0003988e
10012cdc:	000bb679 	.word	0x000bb679
10012ce0:	fff00000 	.word	0xfff00000
10012ce4:	4a454eef 	.word	0x4a454eef
10012ce8:	3fca7e28 	.word	0x3fca7e28
10012cec:	93c9db65 	.word	0x93c9db65
10012cf0:	3fcd864a 	.word	0x3fcd864a
10012cf4:	a91d4101 	.word	0xa91d4101
10012cf8:	3fd17460 	.word	0x3fd17460
10012cfc:	518f264d 	.word	0x518f264d
10012d00:	3fd55555 	.word	0x3fd55555
10012d04:	db6fabff 	.word	0xdb6fabff
10012d08:	3fdb6db6 	.word	0x3fdb6db6
10012d0c:	33333303 	.word	0x33333303
10012d10:	3fe33333 	.word	0x3fe33333
10012d14:	40080000 	.word	0x40080000
10012d18:	3feec709 	.word	0x3feec709
10012d1c:	dc3a03fd 	.word	0xdc3a03fd
10012d20:	145b01f5 	.word	0x145b01f5
10012d24:	be3e2fe0 	.word	0xbe3e2fe0
10012d28:	408fffff 	.word	0x408fffff
10012d2c:	bf700000 	.word	0xbf700000
10012d30:	652b82fe 	.word	0x652b82fe
10012d34:	3c971547 	.word	0x3c971547
10012d38:	2800      	cmp	r0, #0
10012d3a:	d000      	beq.n	10012d3e <__ieee754_pow+0x62e>
10012d3c:	e18a      	b.n	10013054 <__ieee754_pow+0x944>
10012d3e:	2280      	movs	r2, #128	; 0x80
10012d40:	4be7      	ldr	r3, [pc, #924]	; (100130e0 <__ieee754_pow+0x9d0>)
10012d42:	0352      	lsls	r2, r2, #13
10012d44:	469c      	mov	ip, r3
10012d46:	0013      	movs	r3, r2
10012d48:	1536      	asrs	r6, r6, #20
10012d4a:	4466      	add	r6, ip
10012d4c:	4133      	asrs	r3, r6
10012d4e:	49e5      	ldr	r1, [pc, #916]	; (100130e4 <__ieee754_pow+0x9d4>)
10012d50:	19db      	adds	r3, r3, r7
10012d52:	005e      	lsls	r6, r3, #1
10012d54:	001c      	movs	r4, r3
10012d56:	031b      	lsls	r3, r3, #12
10012d58:	468c      	mov	ip, r1
10012d5a:	0b1b      	lsrs	r3, r3, #12
10012d5c:	4313      	orrs	r3, r2
10012d5e:	2214      	movs	r2, #20
10012d60:	0d76      	lsrs	r6, r6, #21
10012d62:	4fe1      	ldr	r7, [pc, #900]	; (100130e8 <__ieee754_pow+0x9d8>)
10012d64:	4466      	add	r6, ip
10012d66:	4137      	asrs	r7, r6
10012d68:	1b96      	subs	r6, r2, r6
10012d6a:	4133      	asrs	r3, r6
10012d6c:	4698      	mov	r8, r3
10012d6e:	4653      	mov	r3, sl
10012d70:	43bc      	bics	r4, r7
10012d72:	2000      	movs	r0, #0
10012d74:	0021      	movs	r1, r4
10012d76:	2b00      	cmp	r3, #0
10012d78:	da00      	bge.n	10012d7c <__ieee754_pow+0x66c>
10012d7a:	e1a9      	b.n	100130d0 <__ieee754_pow+0x9c0>
10012d7c:	0002      	movs	r2, r0
10012d7e:	000b      	movs	r3, r1
10012d80:	9800      	ldr	r0, [sp, #0]
10012d82:	9901      	ldr	r1, [sp, #4]
10012d84:	f002 ff3c 	bl	10015c00 <__aeabi_dsub>
10012d88:	000b      	movs	r3, r1
10012d8a:	9000      	str	r0, [sp, #0]
10012d8c:	9101      	str	r1, [sp, #4]
10012d8e:	0002      	movs	r2, r0
10012d90:	9804      	ldr	r0, [sp, #16]
10012d92:	9905      	ldr	r1, [sp, #20]
10012d94:	f001 fd6a 	bl	1001486c <__aeabi_dadd>
10012d98:	4643      	mov	r3, r8
10012d9a:	051b      	lsls	r3, r3, #20
10012d9c:	4699      	mov	r9, r3
10012d9e:	2000      	movs	r0, #0
10012da0:	2200      	movs	r2, #0
10012da2:	4bd2      	ldr	r3, [pc, #840]	; (100130ec <__ieee754_pow+0x9dc>)
10012da4:	0006      	movs	r6, r0
10012da6:	000f      	movs	r7, r1
10012da8:	f002 fcb0 	bl	1001570c <__aeabi_dmul>
10012dac:	9a00      	ldr	r2, [sp, #0]
10012dae:	9b01      	ldr	r3, [sp, #4]
10012db0:	9002      	str	r0, [sp, #8]
10012db2:	9103      	str	r1, [sp, #12]
10012db4:	0030      	movs	r0, r6
10012db6:	0039      	movs	r1, r7
10012db8:	f002 ff22 	bl	10015c00 <__aeabi_dsub>
10012dbc:	0002      	movs	r2, r0
10012dbe:	000b      	movs	r3, r1
10012dc0:	9804      	ldr	r0, [sp, #16]
10012dc2:	9905      	ldr	r1, [sp, #20]
10012dc4:	f002 ff1c 	bl	10015c00 <__aeabi_dsub>
10012dc8:	4ac9      	ldr	r2, [pc, #804]	; (100130f0 <__ieee754_pow+0x9e0>)
10012dca:	4bca      	ldr	r3, [pc, #808]	; (100130f4 <__ieee754_pow+0x9e4>)
10012dcc:	f002 fc9e 	bl	1001570c <__aeabi_dmul>
10012dd0:	4ac9      	ldr	r2, [pc, #804]	; (100130f8 <__ieee754_pow+0x9e8>)
10012dd2:	0004      	movs	r4, r0
10012dd4:	000d      	movs	r5, r1
10012dd6:	4bc9      	ldr	r3, [pc, #804]	; (100130fc <__ieee754_pow+0x9ec>)
10012dd8:	0030      	movs	r0, r6
10012dda:	0039      	movs	r1, r7
10012ddc:	f002 fc96 	bl	1001570c <__aeabi_dmul>
10012de0:	0002      	movs	r2, r0
10012de2:	000b      	movs	r3, r1
10012de4:	0020      	movs	r0, r4
10012de6:	0029      	movs	r1, r5
10012de8:	f001 fd40 	bl	1001486c <__aeabi_dadd>
10012dec:	0004      	movs	r4, r0
10012dee:	000d      	movs	r5, r1
10012df0:	0002      	movs	r2, r0
10012df2:	000b      	movs	r3, r1
10012df4:	9802      	ldr	r0, [sp, #8]
10012df6:	9903      	ldr	r1, [sp, #12]
10012df8:	f001 fd38 	bl	1001486c <__aeabi_dadd>
10012dfc:	9a02      	ldr	r2, [sp, #8]
10012dfe:	9b03      	ldr	r3, [sp, #12]
10012e00:	0006      	movs	r6, r0
10012e02:	000f      	movs	r7, r1
10012e04:	f002 fefc 	bl	10015c00 <__aeabi_dsub>
10012e08:	0002      	movs	r2, r0
10012e0a:	000b      	movs	r3, r1
10012e0c:	0020      	movs	r0, r4
10012e0e:	0029      	movs	r1, r5
10012e10:	f002 fef6 	bl	10015c00 <__aeabi_dsub>
10012e14:	0032      	movs	r2, r6
10012e16:	9000      	str	r0, [sp, #0]
10012e18:	9101      	str	r1, [sp, #4]
10012e1a:	003b      	movs	r3, r7
10012e1c:	0030      	movs	r0, r6
10012e1e:	0039      	movs	r1, r7
10012e20:	f002 fc74 	bl	1001570c <__aeabi_dmul>
10012e24:	0004      	movs	r4, r0
10012e26:	000d      	movs	r5, r1
10012e28:	4ab5      	ldr	r2, [pc, #724]	; (10013100 <__ieee754_pow+0x9f0>)
10012e2a:	4bb6      	ldr	r3, [pc, #728]	; (10013104 <__ieee754_pow+0x9f4>)
10012e2c:	f002 fc6e 	bl	1001570c <__aeabi_dmul>
10012e30:	4ab5      	ldr	r2, [pc, #724]	; (10013108 <__ieee754_pow+0x9f8>)
10012e32:	4bb6      	ldr	r3, [pc, #728]	; (1001310c <__ieee754_pow+0x9fc>)
10012e34:	f002 fee4 	bl	10015c00 <__aeabi_dsub>
10012e38:	0022      	movs	r2, r4
10012e3a:	002b      	movs	r3, r5
10012e3c:	f002 fc66 	bl	1001570c <__aeabi_dmul>
10012e40:	4ab3      	ldr	r2, [pc, #716]	; (10013110 <__ieee754_pow+0xa00>)
10012e42:	4bb4      	ldr	r3, [pc, #720]	; (10013114 <__ieee754_pow+0xa04>)
10012e44:	f001 fd12 	bl	1001486c <__aeabi_dadd>
10012e48:	0022      	movs	r2, r4
10012e4a:	002b      	movs	r3, r5
10012e4c:	f002 fc5e 	bl	1001570c <__aeabi_dmul>
10012e50:	4ab1      	ldr	r2, [pc, #708]	; (10013118 <__ieee754_pow+0xa08>)
10012e52:	4bb2      	ldr	r3, [pc, #712]	; (1001311c <__ieee754_pow+0xa0c>)
10012e54:	f002 fed4 	bl	10015c00 <__aeabi_dsub>
10012e58:	0022      	movs	r2, r4
10012e5a:	002b      	movs	r3, r5
10012e5c:	f002 fc56 	bl	1001570c <__aeabi_dmul>
10012e60:	4aaf      	ldr	r2, [pc, #700]	; (10013120 <__ieee754_pow+0xa10>)
10012e62:	4bb0      	ldr	r3, [pc, #704]	; (10013124 <__ieee754_pow+0xa14>)
10012e64:	f001 fd02 	bl	1001486c <__aeabi_dadd>
10012e68:	0022      	movs	r2, r4
10012e6a:	002b      	movs	r3, r5
10012e6c:	f002 fc4e 	bl	1001570c <__aeabi_dmul>
10012e70:	0002      	movs	r2, r0
10012e72:	000b      	movs	r3, r1
10012e74:	0030      	movs	r0, r6
10012e76:	0039      	movs	r1, r7
10012e78:	f002 fec2 	bl	10015c00 <__aeabi_dsub>
10012e7c:	0004      	movs	r4, r0
10012e7e:	000d      	movs	r5, r1
10012e80:	0002      	movs	r2, r0
10012e82:	000b      	movs	r3, r1
10012e84:	0030      	movs	r0, r6
10012e86:	0039      	movs	r1, r7
10012e88:	f002 fc40 	bl	1001570c <__aeabi_dmul>
10012e8c:	2380      	movs	r3, #128	; 0x80
10012e8e:	9002      	str	r0, [sp, #8]
10012e90:	9103      	str	r1, [sp, #12]
10012e92:	2200      	movs	r2, #0
10012e94:	05db      	lsls	r3, r3, #23
10012e96:	0020      	movs	r0, r4
10012e98:	0029      	movs	r1, r5
10012e9a:	f002 feb1 	bl	10015c00 <__aeabi_dsub>
10012e9e:	0002      	movs	r2, r0
10012ea0:	000b      	movs	r3, r1
10012ea2:	9802      	ldr	r0, [sp, #8]
10012ea4:	9903      	ldr	r1, [sp, #12]
10012ea6:	f002 f80d 	bl	10014ec4 <__aeabi_ddiv>
10012eaa:	9a00      	ldr	r2, [sp, #0]
10012eac:	9b01      	ldr	r3, [sp, #4]
10012eae:	0004      	movs	r4, r0
10012eb0:	000d      	movs	r5, r1
10012eb2:	0030      	movs	r0, r6
10012eb4:	0039      	movs	r1, r7
10012eb6:	f002 fc29 	bl	1001570c <__aeabi_dmul>
10012eba:	9a00      	ldr	r2, [sp, #0]
10012ebc:	9b01      	ldr	r3, [sp, #4]
10012ebe:	f001 fcd5 	bl	1001486c <__aeabi_dadd>
10012ec2:	0002      	movs	r2, r0
10012ec4:	000b      	movs	r3, r1
10012ec6:	0020      	movs	r0, r4
10012ec8:	0029      	movs	r1, r5
10012eca:	f002 fe99 	bl	10015c00 <__aeabi_dsub>
10012ece:	0032      	movs	r2, r6
10012ed0:	003b      	movs	r3, r7
10012ed2:	f002 fe95 	bl	10015c00 <__aeabi_dsub>
10012ed6:	0002      	movs	r2, r0
10012ed8:	000b      	movs	r3, r1
10012eda:	2000      	movs	r0, #0
10012edc:	4992      	ldr	r1, [pc, #584]	; (10013128 <__ieee754_pow+0xa18>)
10012ede:	f002 fe8f 	bl	10015c00 <__aeabi_dsub>
10012ee2:	464b      	mov	r3, r9
10012ee4:	185b      	adds	r3, r3, r1
10012ee6:	151a      	asrs	r2, r3, #20
10012ee8:	2a00      	cmp	r2, #0
10012eea:	dc00      	bgt.n	10012eee <__ieee754_pow+0x7de>
10012eec:	e0f4      	b.n	100130d8 <__ieee754_pow+0x9c8>
10012eee:	0019      	movs	r1, r3
10012ef0:	9a06      	ldr	r2, [sp, #24]
10012ef2:	9b07      	ldr	r3, [sp, #28]
10012ef4:	f002 fc0a 	bl	1001570c <__aeabi_dmul>
10012ef8:	0006      	movs	r6, r0
10012efa:	e452      	b.n	100127a2 <__ieee754_pow+0x92>
10012efc:	0032      	movs	r2, r6
10012efe:	0030      	movs	r0, r6
10012f00:	002b      	movs	r3, r5
10012f02:	0029      	movs	r1, r5
10012f04:	f002 fc02 	bl	1001570c <__aeabi_dmul>
10012f08:	0006      	movs	r6, r0
10012f0a:	e44a      	b.n	100127a2 <__ieee754_pow+0x92>
10012f0c:	4b87      	ldr	r3, [pc, #540]	; (1001312c <__ieee754_pow+0xa1c>)
10012f0e:	004e      	lsls	r6, r1, #1
10012f10:	0876      	lsrs	r6, r6, #1
10012f12:	429e      	cmp	r6, r3
10012f14:	dc00      	bgt.n	10012f18 <__ieee754_pow+0x808>
10012f16:	e0bf      	b.n	10013098 <__ieee754_pow+0x988>
10012f18:	4b85      	ldr	r3, [pc, #532]	; (10013130 <__ieee754_pow+0xa20>)
10012f1a:	18cb      	adds	r3, r1, r3
10012f1c:	4303      	orrs	r3, r0
10012f1e:	d10c      	bne.n	10012f3a <__ieee754_pow+0x82a>
10012f20:	9a00      	ldr	r2, [sp, #0]
10012f22:	9b01      	ldr	r3, [sp, #4]
10012f24:	f002 fe6c 	bl	10015c00 <__aeabi_dsub>
10012f28:	0002      	movs	r2, r0
10012f2a:	000b      	movs	r3, r1
10012f2c:	9804      	ldr	r0, [sp, #16]
10012f2e:	9905      	ldr	r1, [sp, #20]
10012f30:	f000 fd48 	bl	100139c4 <__aeabi_dcmple>
10012f34:	2800      	cmp	r0, #0
10012f36:	d100      	bne.n	10012f3a <__ieee754_pow+0x82a>
10012f38:	e701      	b.n	10012d3e <__ieee754_pow+0x62e>
10012f3a:	9806      	ldr	r0, [sp, #24]
10012f3c:	9907      	ldr	r1, [sp, #28]
10012f3e:	4a7d      	ldr	r2, [pc, #500]	; (10013134 <__ieee754_pow+0xa24>)
10012f40:	4b7d      	ldr	r3, [pc, #500]	; (10013138 <__ieee754_pow+0xa28>)
10012f42:	f002 fbe3 	bl	1001570c <__aeabi_dmul>
10012f46:	4a7b      	ldr	r2, [pc, #492]	; (10013134 <__ieee754_pow+0xa24>)
10012f48:	4b7b      	ldr	r3, [pc, #492]	; (10013138 <__ieee754_pow+0xa28>)
10012f4a:	f002 fbdf 	bl	1001570c <__aeabi_dmul>
10012f4e:	0006      	movs	r6, r0
10012f50:	f7ff fc27 	bl	100127a2 <__ieee754_pow+0x92>
10012f54:	2300      	movs	r3, #0
10012f56:	4c79      	ldr	r4, [pc, #484]	; (1001313c <__ieee754_pow+0xa2c>)
10012f58:	9306      	str	r3, [sp, #24]
10012f5a:	9407      	str	r4, [sp, #28]
10012f5c:	e666      	b.n	10012c2c <__ieee754_pow+0x51c>
10012f5e:	4653      	mov	r3, sl
10012f60:	2b00      	cmp	r3, #0
10012f62:	db00      	blt.n	10012f66 <__ieee754_pow+0x856>
10012f64:	e4c3      	b.n	100128ee <__ieee754_pow+0x1de>
10012f66:	9b00      	ldr	r3, [sp, #0]
10012f68:	9c01      	ldr	r4, [sp, #4]
10012f6a:	2280      	movs	r2, #128	; 0x80
10012f6c:	0612      	lsls	r2, r2, #24
10012f6e:	001e      	movs	r6, r3
10012f70:	4694      	mov	ip, r2
10012f72:	0023      	movs	r3, r4
10012f74:	4463      	add	r3, ip
10012f76:	0019      	movs	r1, r3
10012f78:	f7ff fc13 	bl	100127a2 <__ieee754_pow+0x92>
10012f7c:	0002      	movs	r2, r0
10012f7e:	000b      	movs	r3, r1
10012f80:	2000      	movs	r0, #0
10012f82:	4969      	ldr	r1, [pc, #420]	; (10013128 <__ieee754_pow+0xa18>)
10012f84:	f001 ff9e 	bl	10014ec4 <__aeabi_ddiv>
10012f88:	e44a      	b.n	10012820 <__ieee754_pow+0x110>
10012f8a:	4b6d      	ldr	r3, [pc, #436]	; (10013140 <__ieee754_pow+0xa30>)
10012f8c:	429c      	cmp	r4, r3
10012f8e:	dc00      	bgt.n	10012f92 <__ieee754_pow+0x882>
10012f90:	e4aa      	b.n	100128e8 <__ieee754_pow+0x1d8>
10012f92:	4b65      	ldr	r3, [pc, #404]	; (10013128 <__ieee754_pow+0xa18>)
10012f94:	429c      	cmp	r4, r3
10012f96:	dd01      	ble.n	10012f9c <__ieee754_pow+0x88c>
10012f98:	f7ff fc2c 	bl	100127f4 <__ieee754_pow+0xe4>
10012f9c:	2200      	movs	r2, #0
10012f9e:	4b62      	ldr	r3, [pc, #392]	; (10013128 <__ieee754_pow+0xa18>)
10012fa0:	f002 fe2e 	bl	10015c00 <__aeabi_dsub>
10012fa4:	22c0      	movs	r2, #192	; 0xc0
10012fa6:	4b67      	ldr	r3, [pc, #412]	; (10013144 <__ieee754_pow+0xa34>)
10012fa8:	05d2      	lsls	r2, r2, #23
10012faa:	0004      	movs	r4, r0
10012fac:	000d      	movs	r5, r1
10012fae:	f002 fbad 	bl	1001570c <__aeabi_dmul>
10012fb2:	4a65      	ldr	r2, [pc, #404]	; (10013148 <__ieee754_pow+0xa38>)
10012fb4:	0006      	movs	r6, r0
10012fb6:	000f      	movs	r7, r1
10012fb8:	4b64      	ldr	r3, [pc, #400]	; (1001314c <__ieee754_pow+0xa3c>)
10012fba:	0020      	movs	r0, r4
10012fbc:	0029      	movs	r1, r5
10012fbe:	f002 fba5 	bl	1001570c <__aeabi_dmul>
10012fc2:	2200      	movs	r2, #0
10012fc4:	9002      	str	r0, [sp, #8]
10012fc6:	9103      	str	r1, [sp, #12]
10012fc8:	4b61      	ldr	r3, [pc, #388]	; (10013150 <__ieee754_pow+0xa40>)
10012fca:	0020      	movs	r0, r4
10012fcc:	0029      	movs	r1, r5
10012fce:	f002 fb9d 	bl	1001570c <__aeabi_dmul>
10012fd2:	0002      	movs	r2, r0
10012fd4:	000b      	movs	r3, r1
10012fd6:	485f      	ldr	r0, [pc, #380]	; (10013154 <__ieee754_pow+0xa44>)
10012fd8:	495f      	ldr	r1, [pc, #380]	; (10013158 <__ieee754_pow+0xa48>)
10012fda:	f002 fe11 	bl	10015c00 <__aeabi_dsub>
10012fde:	0022      	movs	r2, r4
10012fe0:	002b      	movs	r3, r5
10012fe2:	f002 fb93 	bl	1001570c <__aeabi_dmul>
10012fe6:	0002      	movs	r2, r0
10012fe8:	000b      	movs	r3, r1
10012fea:	2000      	movs	r0, #0
10012fec:	495b      	ldr	r1, [pc, #364]	; (1001315c <__ieee754_pow+0xa4c>)
10012fee:	f002 fe07 	bl	10015c00 <__aeabi_dsub>
10012ff2:	0022      	movs	r2, r4
10012ff4:	9004      	str	r0, [sp, #16]
10012ff6:	9105      	str	r1, [sp, #20]
10012ff8:	002b      	movs	r3, r5
10012ffa:	0020      	movs	r0, r4
10012ffc:	0029      	movs	r1, r5
10012ffe:	f002 fb85 	bl	1001570c <__aeabi_dmul>
10013002:	0002      	movs	r2, r0
10013004:	000b      	movs	r3, r1
10013006:	9804      	ldr	r0, [sp, #16]
10013008:	9905      	ldr	r1, [sp, #20]
1001300a:	f002 fb7f 	bl	1001570c <__aeabi_dmul>
1001300e:	4a54      	ldr	r2, [pc, #336]	; (10013160 <__ieee754_pow+0xa50>)
10013010:	4b4c      	ldr	r3, [pc, #304]	; (10013144 <__ieee754_pow+0xa34>)
10013012:	f002 fb7b 	bl	1001570c <__aeabi_dmul>
10013016:	0002      	movs	r2, r0
10013018:	000b      	movs	r3, r1
1001301a:	9802      	ldr	r0, [sp, #8]
1001301c:	9903      	ldr	r1, [sp, #12]
1001301e:	f002 fdef 	bl	10015c00 <__aeabi_dsub>
10013022:	0002      	movs	r2, r0
10013024:	000b      	movs	r3, r1
10013026:	0004      	movs	r4, r0
10013028:	000d      	movs	r5, r1
1001302a:	0030      	movs	r0, r6
1001302c:	0039      	movs	r1, r7
1001302e:	f001 fc1d 	bl	1001486c <__aeabi_dadd>
10013032:	2200      	movs	r2, #0
10013034:	0010      	movs	r0, r2
10013036:	003b      	movs	r3, r7
10013038:	0032      	movs	r2, r6
1001303a:	9002      	str	r0, [sp, #8]
1001303c:	9103      	str	r1, [sp, #12]
1001303e:	f002 fddf 	bl	10015c00 <__aeabi_dsub>
10013042:	0002      	movs	r2, r0
10013044:	000b      	movs	r3, r1
10013046:	0020      	movs	r0, r4
10013048:	0029      	movs	r1, r5
1001304a:	f002 fdd9 	bl	10015c00 <__aeabi_dsub>
1001304e:	9004      	str	r0, [sp, #16]
10013050:	9105      	str	r1, [sp, #20]
10013052:	e5e1      	b.n	10012c18 <__ieee754_pow+0x508>
10013054:	4a43      	ldr	r2, [pc, #268]	; (10013164 <__ieee754_pow+0xa54>)
10013056:	4b44      	ldr	r3, [pc, #272]	; (10013168 <__ieee754_pow+0xa58>)
10013058:	9806      	ldr	r0, [sp, #24]
1001305a:	9907      	ldr	r1, [sp, #28]
1001305c:	f002 fb56 	bl	1001570c <__aeabi_dmul>
10013060:	4a40      	ldr	r2, [pc, #256]	; (10013164 <__ieee754_pow+0xa54>)
10013062:	4b41      	ldr	r3, [pc, #260]	; (10013168 <__ieee754_pow+0xa58>)
10013064:	f002 fb52 	bl	1001570c <__aeabi_dmul>
10013068:	0006      	movs	r6, r0
1001306a:	f7ff fb9a 	bl	100127a2 <__ieee754_pow+0x92>
1001306e:	2a00      	cmp	r2, #0
10013070:	d001      	beq.n	10013076 <__ieee754_pow+0x966>
10013072:	f7ff fba5 	bl	100127c0 <__ieee754_pow+0xb0>
10013076:	3214      	adds	r2, #20
10013078:	1ad3      	subs	r3, r2, r3
1001307a:	003a      	movs	r2, r7
1001307c:	411a      	asrs	r2, r3
1001307e:	0011      	movs	r1, r2
10013080:	4099      	lsls	r1, r3
10013082:	428f      	cmp	r7, r1
10013084:	d001      	beq.n	1001308a <__ieee754_pow+0x97a>
10013086:	f7ff fb6f 	bl	10012768 <__ieee754_pow+0x58>
1001308a:	2301      	movs	r3, #1
1001308c:	4013      	ands	r3, r2
1001308e:	2202      	movs	r2, #2
10013090:	1ad3      	subs	r3, r2, r3
10013092:	469b      	mov	fp, r3
10013094:	f7ff fb68 	bl	10012768 <__ieee754_pow+0x58>
10013098:	4b30      	ldr	r3, [pc, #192]	; (1001315c <__ieee754_pow+0xa4c>)
1001309a:	429e      	cmp	r6, r3
1001309c:	dd00      	ble.n	100130a0 <__ieee754_pow+0x990>
1001309e:	e64e      	b.n	10012d3e <__ieee754_pow+0x62e>
100130a0:	2300      	movs	r3, #0
100130a2:	4699      	mov	r9, r3
100130a4:	4698      	mov	r8, r3
100130a6:	e67a      	b.n	10012d9e <__ieee754_pow+0x68e>
100130a8:	0002      	movs	r2, r0
100130aa:	000b      	movs	r3, r1
100130ac:	f7ff fc14 	bl	100128d8 <__ieee754_pow+0x1c8>
100130b0:	2380      	movs	r3, #128	; 0x80
100130b2:	4c2e      	ldr	r4, [pc, #184]	; (1001316c <__ieee754_pow+0xa5c>)
100130b4:	05db      	lsls	r3, r3, #23
100130b6:	9308      	str	r3, [sp, #32]
100130b8:	9409      	str	r4, [sp, #36]	; 0x24
100130ba:	4b2d      	ldr	r3, [pc, #180]	; (10013170 <__ieee754_pow+0xa60>)
100130bc:	4c2d      	ldr	r4, [pc, #180]	; (10013174 <__ieee754_pow+0xa64>)
100130be:	2200      	movs	r2, #0
100130c0:	930c      	str	r3, [sp, #48]	; 0x30
100130c2:	940d      	str	r4, [sp, #52]	; 0x34
100130c4:	2480      	movs	r4, #128	; 0x80
100130c6:	4b2c      	ldr	r3, [pc, #176]	; (10013178 <__ieee754_pow+0xa68>)
100130c8:	02e4      	lsls	r4, r4, #11
100130ca:	9206      	str	r2, [sp, #24]
100130cc:	9307      	str	r3, [sp, #28]
100130ce:	e456      	b.n	1001297e <__ieee754_pow+0x26e>
100130d0:	4643      	mov	r3, r8
100130d2:	425b      	negs	r3, r3
100130d4:	4698      	mov	r8, r3
100130d6:	e651      	b.n	10012d7c <__ieee754_pow+0x66c>
100130d8:	4642      	mov	r2, r8
100130da:	f000 fa59 	bl	10013590 <scalbn>
100130de:	e707      	b.n	10012ef0 <__ieee754_pow+0x7e0>
100130e0:	fffffc02 	.word	0xfffffc02
100130e4:	fffffc01 	.word	0xfffffc01
100130e8:	000fffff 	.word	0x000fffff
100130ec:	3fe62e43 	.word	0x3fe62e43
100130f0:	fefa39ef 	.word	0xfefa39ef
100130f4:	3fe62e42 	.word	0x3fe62e42
100130f8:	0ca86c39 	.word	0x0ca86c39
100130fc:	be205c61 	.word	0xbe205c61
10013100:	72bea4d0 	.word	0x72bea4d0
10013104:	3e663769 	.word	0x3e663769
10013108:	c5d26bf1 	.word	0xc5d26bf1
1001310c:	3ebbbd41 	.word	0x3ebbbd41
10013110:	af25de2c 	.word	0xaf25de2c
10013114:	3f11566a 	.word	0x3f11566a
10013118:	16bebd93 	.word	0x16bebd93
1001311c:	3f66c16c 	.word	0x3f66c16c
10013120:	5555553e 	.word	0x5555553e
10013124:	3fc55555 	.word	0x3fc55555
10013128:	3ff00000 	.word	0x3ff00000
1001312c:	4090cbff 	.word	0x4090cbff
10013130:	3f6f3400 	.word	0x3f6f3400
10013134:	c2f8f359 	.word	0xc2f8f359
10013138:	01a56e1f 	.word	0x01a56e1f
1001313c:	bff00000 	.word	0xbff00000
10013140:	3feffffe 	.word	0x3feffffe
10013144:	3ff71547 	.word	0x3ff71547
10013148:	f85ddf44 	.word	0xf85ddf44
1001314c:	3e54ae0b 	.word	0x3e54ae0b
10013150:	3fd00000 	.word	0x3fd00000
10013154:	55555555 	.word	0x55555555
10013158:	3fd55555 	.word	0x3fd55555
1001315c:	3fe00000 	.word	0x3fe00000
10013160:	652b82fe 	.word	0x652b82fe
10013164:	8800759c 	.word	0x8800759c
10013168:	7e37e43c 	.word	0x7e37e43c
1001316c:	3fe2b803 	.word	0x3fe2b803
10013170:	43cfd006 	.word	0x43cfd006
10013174:	3e4cfdeb 	.word	0x3e4cfdeb
10013178:	3ff80000 	.word	0x3ff80000

1001317c <__ieee754_sqrt>:
1001317c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001317e:	4656      	mov	r6, sl
10013180:	464d      	mov	r5, r9
10013182:	4644      	mov	r4, r8
10013184:	465f      	mov	r7, fp
10013186:	4b75      	ldr	r3, [pc, #468]	; (1001335c <__ieee754_sqrt+0x1e0>)
10013188:	b4f0      	push	{r4, r5, r6, r7}
1001318a:	000a      	movs	r2, r1
1001318c:	000d      	movs	r5, r1
1001318e:	0019      	movs	r1, r3
10013190:	b083      	sub	sp, #12
10013192:	0006      	movs	r6, r0
10013194:	0004      	movs	r4, r0
10013196:	4029      	ands	r1, r5
10013198:	4299      	cmp	r1, r3
1001319a:	d100      	bne.n	1001319e <__ieee754_sqrt+0x22>
1001319c:	e0ba      	b.n	10013314 <__ieee754_sqrt+0x198>
1001319e:	2d00      	cmp	r5, #0
100131a0:	dc00      	bgt.n	100131a4 <__ieee754_sqrt+0x28>
100131a2:	e094      	b.n	100132ce <__ieee754_sqrt+0x152>
100131a4:	152d      	asrs	r5, r5, #20
100131a6:	d100      	bne.n	100131aa <__ieee754_sqrt+0x2e>
100131a8:	e0a3      	b.n	100132f2 <__ieee754_sqrt+0x176>
100131aa:	4b6d      	ldr	r3, [pc, #436]	; (10013360 <__ieee754_sqrt+0x1e4>)
100131ac:	0312      	lsls	r2, r2, #12
100131ae:	469c      	mov	ip, r3
100131b0:	2380      	movs	r3, #128	; 0x80
100131b2:	0b12      	lsrs	r2, r2, #12
100131b4:	035b      	lsls	r3, r3, #13
100131b6:	4465      	add	r5, ip
100131b8:	431a      	orrs	r2, r3
100131ba:	07eb      	lsls	r3, r5, #31
100131bc:	d500      	bpl.n	100131c0 <__ieee754_sqrt+0x44>
100131be:	e081      	b.n	100132c4 <__ieee754_sqrt+0x148>
100131c0:	106b      	asrs	r3, r5, #1
100131c2:	4698      	mov	r8, r3
100131c4:	0fe3      	lsrs	r3, r4, #31
100131c6:	189b      	adds	r3, r3, r2
100131c8:	189b      	adds	r3, r3, r2
100131ca:	2280      	movs	r2, #128	; 0x80
100131cc:	2116      	movs	r1, #22
100131ce:	2600      	movs	r6, #0
100131d0:	2700      	movs	r7, #0
100131d2:	0064      	lsls	r4, r4, #1
100131d4:	0392      	lsls	r2, r2, #14
100131d6:	18b8      	adds	r0, r7, r2
100131d8:	4298      	cmp	r0, r3
100131da:	dc02      	bgt.n	100131e2 <__ieee754_sqrt+0x66>
100131dc:	1887      	adds	r7, r0, r2
100131de:	1a1b      	subs	r3, r3, r0
100131e0:	18b6      	adds	r6, r6, r2
100131e2:	0fe0      	lsrs	r0, r4, #31
100131e4:	005b      	lsls	r3, r3, #1
100131e6:	3901      	subs	r1, #1
100131e8:	181b      	adds	r3, r3, r0
100131ea:	0064      	lsls	r4, r4, #1
100131ec:	0852      	lsrs	r2, r2, #1
100131ee:	2900      	cmp	r1, #0
100131f0:	d1f1      	bne.n	100131d6 <__ieee754_sqrt+0x5a>
100131f2:	2200      	movs	r2, #0
100131f4:	9201      	str	r2, [sp, #4]
100131f6:	4694      	mov	ip, r2
100131f8:	2280      	movs	r2, #128	; 0x80
100131fa:	0612      	lsls	r2, r2, #24
100131fc:	2020      	movs	r0, #32
100131fe:	4691      	mov	r9, r2
10013200:	e009      	b.n	10013216 <__ieee754_sqrt+0x9a>
10013202:	429f      	cmp	r7, r3
10013204:	d041      	beq.n	1001328a <__ieee754_sqrt+0x10e>
10013206:	0fe1      	lsrs	r1, r4, #31
10013208:	18c9      	adds	r1, r1, r3
1001320a:	3801      	subs	r0, #1
1001320c:	18cb      	adds	r3, r1, r3
1001320e:	0064      	lsls	r4, r4, #1
10013210:	0852      	lsrs	r2, r2, #1
10013212:	2800      	cmp	r0, #0
10013214:	d01e      	beq.n	10013254 <__ieee754_sqrt+0xd8>
10013216:	4661      	mov	r1, ip
10013218:	1851      	adds	r1, r2, r1
1001321a:	429f      	cmp	r7, r3
1001321c:	daf1      	bge.n	10013202 <__ieee754_sqrt+0x86>
1001321e:	188d      	adds	r5, r1, r2
10013220:	46ac      	mov	ip, r5
10013222:	0fcd      	lsrs	r5, r1, #31
10013224:	07ed      	lsls	r5, r5, #31
10013226:	46ba      	mov	sl, r7
10013228:	454d      	cmp	r5, r9
1001322a:	d039      	beq.n	100132a0 <__ieee754_sqrt+0x124>
1001322c:	1bdb      	subs	r3, r3, r7
1001322e:	428c      	cmp	r4, r1
10013230:	41bf      	sbcs	r7, r7
10013232:	427f      	negs	r7, r7
10013234:	1bdb      	subs	r3, r3, r7
10013236:	1a64      	subs	r4, r4, r1
10013238:	9901      	ldr	r1, [sp, #4]
1001323a:	3801      	subs	r0, #1
1001323c:	468b      	mov	fp, r1
1001323e:	4493      	add	fp, r2
10013240:	4659      	mov	r1, fp
10013242:	9101      	str	r1, [sp, #4]
10013244:	0fe1      	lsrs	r1, r4, #31
10013246:	18c9      	adds	r1, r1, r3
10013248:	4657      	mov	r7, sl
1001324a:	18cb      	adds	r3, r1, r3
1001324c:	0064      	lsls	r4, r4, #1
1001324e:	0852      	lsrs	r2, r2, #1
10013250:	2800      	cmp	r0, #0
10013252:	d1e0      	bne.n	10013216 <__ieee754_sqrt+0x9a>
10013254:	4323      	orrs	r3, r4
10013256:	d12b      	bne.n	100132b0 <__ieee754_sqrt+0x134>
10013258:	9b01      	ldr	r3, [sp, #4]
1001325a:	085b      	lsrs	r3, r3, #1
1001325c:	4941      	ldr	r1, [pc, #260]	; (10013364 <__ieee754_sqrt+0x1e8>)
1001325e:	1072      	asrs	r2, r6, #1
10013260:	468c      	mov	ip, r1
10013262:	4462      	add	r2, ip
10013264:	07f1      	lsls	r1, r6, #31
10013266:	d502      	bpl.n	1001326e <__ieee754_sqrt+0xf2>
10013268:	2180      	movs	r1, #128	; 0x80
1001326a:	0609      	lsls	r1, r1, #24
1001326c:	430b      	orrs	r3, r1
1001326e:	4641      	mov	r1, r8
10013270:	0509      	lsls	r1, r1, #20
10013272:	188d      	adds	r5, r1, r2
10013274:	001e      	movs	r6, r3
10013276:	002f      	movs	r7, r5
10013278:	0030      	movs	r0, r6
1001327a:	0039      	movs	r1, r7
1001327c:	b003      	add	sp, #12
1001327e:	bc3c      	pop	{r2, r3, r4, r5}
10013280:	4690      	mov	r8, r2
10013282:	4699      	mov	r9, r3
10013284:	46a2      	mov	sl, r4
10013286:	46ab      	mov	fp, r5
10013288:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001328a:	42a1      	cmp	r1, r4
1001328c:	d80e      	bhi.n	100132ac <__ieee754_sqrt+0x130>
1001328e:	188d      	adds	r5, r1, r2
10013290:	46ac      	mov	ip, r5
10013292:	0fcd      	lsrs	r5, r1, #31
10013294:	07ed      	lsls	r5, r5, #31
10013296:	454d      	cmp	r5, r9
10013298:	d048      	beq.n	1001332c <__ieee754_sqrt+0x1b0>
1001329a:	469a      	mov	sl, r3
1001329c:	2300      	movs	r3, #0
1001329e:	e7ca      	b.n	10013236 <__ieee754_sqrt+0xba>
100132a0:	4665      	mov	r5, ip
100132a2:	2d00      	cmp	r5, #0
100132a4:	dbc2      	blt.n	1001322c <__ieee754_sqrt+0xb0>
100132a6:	1c7d      	adds	r5, r7, #1
100132a8:	46aa      	mov	sl, r5
100132aa:	e7bf      	b.n	1001322c <__ieee754_sqrt+0xb0>
100132ac:	003b      	movs	r3, r7
100132ae:	e7aa      	b.n	10013206 <__ieee754_sqrt+0x8a>
100132b0:	9b01      	ldr	r3, [sp, #4]
100132b2:	3301      	adds	r3, #1
100132b4:	d03e      	beq.n	10013334 <__ieee754_sqrt+0x1b8>
100132b6:	9a01      	ldr	r2, [sp, #4]
100132b8:	2301      	movs	r3, #1
100132ba:	4694      	mov	ip, r2
100132bc:	4013      	ands	r3, r2
100132be:	4463      	add	r3, ip
100132c0:	085b      	lsrs	r3, r3, #1
100132c2:	e7cb      	b.n	1001325c <__ieee754_sqrt+0xe0>
100132c4:	0fe3      	lsrs	r3, r4, #31
100132c6:	0052      	lsls	r2, r2, #1
100132c8:	189a      	adds	r2, r3, r2
100132ca:	0064      	lsls	r4, r4, #1
100132cc:	e778      	b.n	100131c0 <__ieee754_sqrt+0x44>
100132ce:	006b      	lsls	r3, r5, #1
100132d0:	085b      	lsrs	r3, r3, #1
100132d2:	4303      	orrs	r3, r0
100132d4:	002f      	movs	r7, r5
100132d6:	2b00      	cmp	r3, #0
100132d8:	d0ce      	beq.n	10013278 <__ieee754_sqrt+0xfc>
100132da:	2500      	movs	r5, #0
100132dc:	2a00      	cmp	r2, #0
100132de:	d131      	bne.n	10013344 <__ieee754_sqrt+0x1c8>
100132e0:	0ae2      	lsrs	r2, r4, #11
100132e2:	3d15      	subs	r5, #21
100132e4:	0564      	lsls	r4, r4, #21
100132e6:	2a00      	cmp	r2, #0
100132e8:	d0fa      	beq.n	100132e0 <__ieee754_sqrt+0x164>
100132ea:	2380      	movs	r3, #128	; 0x80
100132ec:	035b      	lsls	r3, r3, #13
100132ee:	421a      	tst	r2, r3
100132f0:	d123      	bne.n	1001333a <__ieee754_sqrt+0x1be>
100132f2:	2080      	movs	r0, #128	; 0x80
100132f4:	2300      	movs	r3, #0
100132f6:	0340      	lsls	r0, r0, #13
100132f8:	e000      	b.n	100132fc <__ieee754_sqrt+0x180>
100132fa:	000b      	movs	r3, r1
100132fc:	0052      	lsls	r2, r2, #1
100132fe:	1c59      	adds	r1, r3, #1
10013300:	4202      	tst	r2, r0
10013302:	d0fa      	beq.n	100132fa <__ieee754_sqrt+0x17e>
10013304:	2020      	movs	r0, #32
10013306:	1a40      	subs	r0, r0, r1
10013308:	1aed      	subs	r5, r5, r3
1001330a:	0023      	movs	r3, r4
1001330c:	40c3      	lsrs	r3, r0
1001330e:	408c      	lsls	r4, r1
10013310:	431a      	orrs	r2, r3
10013312:	e74a      	b.n	100131aa <__ieee754_sqrt+0x2e>
10013314:	0002      	movs	r2, r0
10013316:	002b      	movs	r3, r5
10013318:	0029      	movs	r1, r5
1001331a:	f002 f9f7 	bl	1001570c <__aeabi_dmul>
1001331e:	0032      	movs	r2, r6
10013320:	002b      	movs	r3, r5
10013322:	f001 faa3 	bl	1001486c <__aeabi_dadd>
10013326:	0006      	movs	r6, r0
10013328:	000f      	movs	r7, r1
1001332a:	e7a5      	b.n	10013278 <__ieee754_sqrt+0xfc>
1001332c:	4665      	mov	r5, ip
1001332e:	2d00      	cmp	r5, #0
10013330:	dab9      	bge.n	100132a6 <__ieee754_sqrt+0x12a>
10013332:	e7b2      	b.n	1001329a <__ieee754_sqrt+0x11e>
10013334:	3601      	adds	r6, #1
10013336:	2300      	movs	r3, #0
10013338:	e790      	b.n	1001325c <__ieee754_sqrt+0xe0>
1001333a:	2301      	movs	r3, #1
1001333c:	2020      	movs	r0, #32
1001333e:	425b      	negs	r3, r3
10013340:	2100      	movs	r1, #0
10013342:	e7e1      	b.n	10013308 <__ieee754_sqrt+0x18c>
10013344:	003b      	movs	r3, r7
10013346:	0002      	movs	r2, r0
10013348:	0039      	movs	r1, r7
1001334a:	f002 fc59 	bl	10015c00 <__aeabi_dsub>
1001334e:	0002      	movs	r2, r0
10013350:	000b      	movs	r3, r1
10013352:	f001 fdb7 	bl	10014ec4 <__aeabi_ddiv>
10013356:	0006      	movs	r6, r0
10013358:	000f      	movs	r7, r1
1001335a:	e78d      	b.n	10013278 <__ieee754_sqrt+0xfc>
1001335c:	7ff00000 	.word	0x7ff00000
10013360:	fffffc01 	.word	0xfffffc01
10013364:	3fe00000 	.word	0x3fe00000

10013368 <__ieee754_sqrtf>:
10013368:	492b      	ldr	r1, [pc, #172]	; (10013418 <__ieee754_sqrtf+0xb0>)
1001336a:	0042      	lsls	r2, r0, #1
1001336c:	b570      	push	{r4, r5, r6, lr}
1001336e:	0003      	movs	r3, r0
10013370:	1c04      	adds	r4, r0, #0
10013372:	0852      	lsrs	r2, r2, #1
10013374:	428a      	cmp	r2, r1
10013376:	d83a      	bhi.n	100133ee <__ieee754_sqrtf+0x86>
10013378:	2a00      	cmp	r2, #0
1001337a:	d037      	beq.n	100133ec <__ieee754_sqrtf+0x84>
1001337c:	2800      	cmp	r0, #0
1001337e:	db3f      	blt.n	10013400 <__ieee754_sqrtf+0x98>
10013380:	4926      	ldr	r1, [pc, #152]	; (1001341c <__ieee754_sqrtf+0xb4>)
10013382:	15c0      	asrs	r0, r0, #23
10013384:	428a      	cmp	r2, r1
10013386:	d80b      	bhi.n	100133a0 <__ieee754_sqrtf+0x38>
10013388:	3101      	adds	r1, #1
1001338a:	4221      	tst	r1, r4
1001338c:	d13f      	bne.n	1001340e <__ieee754_sqrtf+0xa6>
1001338e:	2200      	movs	r2, #0
10013390:	000c      	movs	r4, r1
10013392:	e000      	b.n	10013396 <__ieee754_sqrtf+0x2e>
10013394:	000a      	movs	r2, r1
10013396:	005b      	lsls	r3, r3, #1
10013398:	1c51      	adds	r1, r2, #1
1001339a:	4223      	tst	r3, r4
1001339c:	d0fa      	beq.n	10013394 <__ieee754_sqrtf+0x2c>
1001339e:	1a80      	subs	r0, r0, r2
100133a0:	2280      	movs	r2, #128	; 0x80
100133a2:	025b      	lsls	r3, r3, #9
100133a4:	0a5b      	lsrs	r3, r3, #9
100133a6:	0412      	lsls	r2, r2, #16
100133a8:	387f      	subs	r0, #127	; 0x7f
100133aa:	4313      	orrs	r3, r2
100133ac:	07c2      	lsls	r2, r0, #31
100133ae:	d425      	bmi.n	100133fc <__ieee754_sqrtf+0x94>
100133b0:	2280      	movs	r2, #128	; 0x80
100133b2:	2119      	movs	r1, #25
100133b4:	2500      	movs	r5, #0
100133b6:	2600      	movs	r6, #0
100133b8:	1040      	asrs	r0, r0, #1
100133ba:	005b      	lsls	r3, r3, #1
100133bc:	0452      	lsls	r2, r2, #17
100133be:	18b4      	adds	r4, r6, r2
100133c0:	429c      	cmp	r4, r3
100133c2:	dc02      	bgt.n	100133ca <__ieee754_sqrtf+0x62>
100133c4:	18a6      	adds	r6, r4, r2
100133c6:	1b1b      	subs	r3, r3, r4
100133c8:	18ad      	adds	r5, r5, r2
100133ca:	3901      	subs	r1, #1
100133cc:	005b      	lsls	r3, r3, #1
100133ce:	0852      	lsrs	r2, r2, #1
100133d0:	2900      	cmp	r1, #0
100133d2:	d1f4      	bne.n	100133be <__ieee754_sqrtf+0x56>
100133d4:	2b00      	cmp	r3, #0
100133d6:	d002      	beq.n	100133de <__ieee754_sqrtf+0x76>
100133d8:	2301      	movs	r3, #1
100133da:	402b      	ands	r3, r5
100133dc:	18ed      	adds	r5, r5, r3
100133de:	23fc      	movs	r3, #252	; 0xfc
100133e0:	059b      	lsls	r3, r3, #22
100133e2:	469c      	mov	ip, r3
100133e4:	106d      	asrs	r5, r5, #1
100133e6:	4465      	add	r5, ip
100133e8:	05c0      	lsls	r0, r0, #23
100133ea:	1940      	adds	r0, r0, r5
100133ec:	bd70      	pop	{r4, r5, r6, pc}
100133ee:	1c01      	adds	r1, r0, #0
100133f0:	f000 fee2 	bl	100141b8 <__aeabi_fmul>
100133f4:	1c21      	adds	r1, r4, #0
100133f6:	f000 fb9f 	bl	10013b38 <__aeabi_fadd>
100133fa:	e7f7      	b.n	100133ec <__ieee754_sqrtf+0x84>
100133fc:	005b      	lsls	r3, r3, #1
100133fe:	e7d7      	b.n	100133b0 <__ieee754_sqrtf+0x48>
10013400:	1c01      	adds	r1, r0, #0
10013402:	f000 ffed 	bl	100143e0 <__aeabi_fsub>
10013406:	1c01      	adds	r1, r0, #0
10013408:	f000 fd0c 	bl	10013e24 <__aeabi_fdiv>
1001340c:	e7ee      	b.n	100133ec <__ieee754_sqrtf+0x84>
1001340e:	2201      	movs	r2, #1
10013410:	4252      	negs	r2, r2
10013412:	1a80      	subs	r0, r0, r2
10013414:	e7c4      	b.n	100133a0 <__ieee754_sqrtf+0x38>
10013416:	46c0      	nop			; (mov r8, r8)
10013418:	7f7fffff 	.word	0x7f7fffff
1001341c:	007fffff 	.word	0x007fffff

10013420 <fabs>:
10013420:	0049      	lsls	r1, r1, #1
10013422:	084b      	lsrs	r3, r1, #1
10013424:	0019      	movs	r1, r3
10013426:	4770      	bx	lr

10013428 <finite>:
10013428:	4b03      	ldr	r3, [pc, #12]	; (10013438 <finite+0x10>)
1001342a:	0048      	lsls	r0, r1, #1
1001342c:	469c      	mov	ip, r3
1001342e:	0840      	lsrs	r0, r0, #1
10013430:	4460      	add	r0, ip
10013432:	0fc0      	lsrs	r0, r0, #31
10013434:	4770      	bx	lr
10013436:	46c0      	nop			; (mov r8, r8)
10013438:	80100000 	.word	0x80100000

1001343c <matherr>:
1001343c:	2000      	movs	r0, #0
1001343e:	4770      	bx	lr

10013440 <nan>:
10013440:	2000      	movs	r0, #0
10013442:	4901      	ldr	r1, [pc, #4]	; (10013448 <nan+0x8>)
10013444:	4770      	bx	lr
10013446:	46c0      	nop			; (mov r8, r8)
10013448:	7ff80000 	.word	0x7ff80000

1001344c <rint>:
1001344c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001344e:	4647      	mov	r7, r8
10013450:	b480      	push	{r7}
10013452:	0fcb      	lsrs	r3, r1, #31
10013454:	4698      	mov	r8, r3
10013456:	4c4a      	ldr	r4, [pc, #296]	; (10013580 <rint+0x134>)
10013458:	004b      	lsls	r3, r1, #1
1001345a:	0d5b      	lsrs	r3, r3, #21
1001345c:	191e      	adds	r6, r3, r4
1001345e:	b082      	sub	sp, #8
10013460:	0007      	movs	r7, r0
10013462:	000a      	movs	r2, r1
10013464:	2e13      	cmp	r6, #19
10013466:	dc35      	bgt.n	100134d4 <rint+0x88>
10013468:	2e00      	cmp	r6, #0
1001346a:	db57      	blt.n	1001351c <rint+0xd0>
1001346c:	4b45      	ldr	r3, [pc, #276]	; (10013584 <rint+0x138>)
1001346e:	0004      	movs	r4, r0
10013470:	4133      	asrs	r3, r6
10013472:	001f      	movs	r7, r3
10013474:	400f      	ands	r7, r1
10013476:	4307      	orrs	r7, r0
10013478:	000d      	movs	r5, r1
1001347a:	2f00      	cmp	r7, #0
1001347c:	d024      	beq.n	100134c8 <rint+0x7c>
1001347e:	085b      	lsrs	r3, r3, #1
10013480:	001c      	movs	r4, r3
10013482:	400c      	ands	r4, r1
10013484:	4320      	orrs	r0, r4
10013486:	2700      	movs	r7, #0
10013488:	2800      	cmp	r0, #0
1001348a:	d007      	beq.n	1001349c <rint+0x50>
1001348c:	2e13      	cmp	r6, #19
1001348e:	d100      	bne.n	10013492 <rint+0x46>
10013490:	e072      	b.n	10013578 <rint+0x12c>
10013492:	2280      	movs	r2, #128	; 0x80
10013494:	02d2      	lsls	r2, r2, #11
10013496:	4132      	asrs	r2, r6
10013498:	4399      	bics	r1, r3
1001349a:	430a      	orrs	r2, r1
1001349c:	4643      	mov	r3, r8
1001349e:	00de      	lsls	r6, r3, #3
100134a0:	4b39      	ldr	r3, [pc, #228]	; (10013588 <rint+0x13c>)
100134a2:	0011      	movs	r1, r2
100134a4:	199e      	adds	r6, r3, r6
100134a6:	6834      	ldr	r4, [r6, #0]
100134a8:	6875      	ldr	r5, [r6, #4]
100134aa:	0038      	movs	r0, r7
100134ac:	0022      	movs	r2, r4
100134ae:	002b      	movs	r3, r5
100134b0:	f001 f9dc 	bl	1001486c <__aeabi_dadd>
100134b4:	9000      	str	r0, [sp, #0]
100134b6:	9101      	str	r1, [sp, #4]
100134b8:	9800      	ldr	r0, [sp, #0]
100134ba:	9901      	ldr	r1, [sp, #4]
100134bc:	0022      	movs	r2, r4
100134be:	002b      	movs	r3, r5
100134c0:	f002 fb9e 	bl	10015c00 <__aeabi_dsub>
100134c4:	0004      	movs	r4, r0
100134c6:	000d      	movs	r5, r1
100134c8:	0020      	movs	r0, r4
100134ca:	0029      	movs	r1, r5
100134cc:	b002      	add	sp, #8
100134ce:	bc04      	pop	{r2}
100134d0:	4690      	mov	r8, r2
100134d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100134d4:	2e33      	cmp	r6, #51	; 0x33
100134d6:	dd0c      	ble.n	100134f2 <rint+0xa6>
100134d8:	2380      	movs	r3, #128	; 0x80
100134da:	0004      	movs	r4, r0
100134dc:	000d      	movs	r5, r1
100134de:	00db      	lsls	r3, r3, #3
100134e0:	429e      	cmp	r6, r3
100134e2:	d1f1      	bne.n	100134c8 <rint+0x7c>
100134e4:	0002      	movs	r2, r0
100134e6:	000b      	movs	r3, r1
100134e8:	f001 f9c0 	bl	1001486c <__aeabi_dadd>
100134ec:	0004      	movs	r4, r0
100134ee:	000d      	movs	r5, r1
100134f0:	e7ea      	b.n	100134c8 <rint+0x7c>
100134f2:	4c26      	ldr	r4, [pc, #152]	; (1001358c <rint+0x140>)
100134f4:	000d      	movs	r5, r1
100134f6:	46a4      	mov	ip, r4
100134f8:	2401      	movs	r4, #1
100134fa:	4463      	add	r3, ip
100134fc:	4264      	negs	r4, r4
100134fe:	40dc      	lsrs	r4, r3
10013500:	46a4      	mov	ip, r4
10013502:	4661      	mov	r1, ip
10013504:	0004      	movs	r4, r0
10013506:	4201      	tst	r1, r0
10013508:	d0de      	beq.n	100134c8 <rint+0x7c>
1001350a:	0849      	lsrs	r1, r1, #1
1001350c:	4201      	tst	r1, r0
1001350e:	d0c5      	beq.n	1001349c <rint+0x50>
10013510:	2780      	movs	r7, #128	; 0x80
10013512:	05ff      	lsls	r7, r7, #23
10013514:	411f      	asrs	r7, r3
10013516:	4388      	bics	r0, r1
10013518:	4307      	orrs	r7, r0
1001351a:	e7bf      	b.n	1001349c <rint+0x50>
1001351c:	004b      	lsls	r3, r1, #1
1001351e:	085b      	lsrs	r3, r3, #1
10013520:	4303      	orrs	r3, r0
10013522:	0004      	movs	r4, r0
10013524:	000d      	movs	r5, r1
10013526:	2b00      	cmp	r3, #0
10013528:	d0ce      	beq.n	100134c8 <rint+0x7c>
1001352a:	030b      	lsls	r3, r1, #12
1001352c:	0b1b      	lsrs	r3, r3, #12
1001352e:	4303      	orrs	r3, r0
10013530:	425a      	negs	r2, r3
10013532:	4313      	orrs	r3, r2
10013534:	2280      	movs	r2, #128	; 0x80
10013536:	0b1b      	lsrs	r3, r3, #12
10013538:	0312      	lsls	r2, r2, #12
1001353a:	4013      	ands	r3, r2
1001353c:	0c4a      	lsrs	r2, r1, #17
1001353e:	0452      	lsls	r2, r2, #17
10013540:	4313      	orrs	r3, r2
10013542:	0019      	movs	r1, r3
10013544:	4643      	mov	r3, r8
10013546:	4a10      	ldr	r2, [pc, #64]	; (10013588 <rint+0x13c>)
10013548:	00db      	lsls	r3, r3, #3
1001354a:	18d3      	adds	r3, r2, r3
1001354c:	681c      	ldr	r4, [r3, #0]
1001354e:	685d      	ldr	r5, [r3, #4]
10013550:	0022      	movs	r2, r4
10013552:	002b      	movs	r3, r5
10013554:	f001 f98a 	bl	1001486c <__aeabi_dadd>
10013558:	9000      	str	r0, [sp, #0]
1001355a:	9101      	str	r1, [sp, #4]
1001355c:	9800      	ldr	r0, [sp, #0]
1001355e:	9901      	ldr	r1, [sp, #4]
10013560:	0022      	movs	r2, r4
10013562:	002b      	movs	r3, r5
10013564:	f002 fb4c 	bl	10015c00 <__aeabi_dsub>
10013568:	4642      	mov	r2, r8
1001356a:	004b      	lsls	r3, r1, #1
1001356c:	085b      	lsrs	r3, r3, #1
1001356e:	07d6      	lsls	r6, r2, #31
10013570:	4333      	orrs	r3, r6
10013572:	0004      	movs	r4, r0
10013574:	001d      	movs	r5, r3
10013576:	e7a7      	b.n	100134c8 <rint+0x7c>
10013578:	2780      	movs	r7, #128	; 0x80
1001357a:	063f      	lsls	r7, r7, #24
1001357c:	e789      	b.n	10013492 <rint+0x46>
1001357e:	46c0      	nop			; (mov r8, r8)
10013580:	fffffc01 	.word	0xfffffc01
10013584:	000fffff 	.word	0x000fffff
10013588:	10019120 	.word	0x10019120
1001358c:	fffffbed 	.word	0xfffffbed

10013590 <scalbn>:
10013590:	004b      	lsls	r3, r1, #1
10013592:	b570      	push	{r4, r5, r6, lr}
10013594:	0d5b      	lsrs	r3, r3, #21
10013596:	0014      	movs	r4, r2
10013598:	000a      	movs	r2, r1
1001359a:	2b00      	cmp	r3, #0
1001359c:	d11a      	bne.n	100135d4 <scalbn+0x44>
1001359e:	004b      	lsls	r3, r1, #1
100135a0:	085b      	lsrs	r3, r3, #1
100135a2:	4303      	orrs	r3, r0
100135a4:	d015      	beq.n	100135d2 <scalbn+0x42>
100135a6:	2200      	movs	r2, #0
100135a8:	4b22      	ldr	r3, [pc, #136]	; (10013634 <scalbn+0xa4>)
100135aa:	f002 f8af 	bl	1001570c <__aeabi_dmul>
100135ae:	4b22      	ldr	r3, [pc, #136]	; (10013638 <scalbn+0xa8>)
100135b0:	000a      	movs	r2, r1
100135b2:	429c      	cmp	r4, r3
100135b4:	db22      	blt.n	100135fc <scalbn+0x6c>
100135b6:	004b      	lsls	r3, r1, #1
100135b8:	0d5b      	lsrs	r3, r3, #21
100135ba:	3b36      	subs	r3, #54	; 0x36
100135bc:	4d1f      	ldr	r5, [pc, #124]	; (1001363c <scalbn+0xac>)
100135be:	18e3      	adds	r3, r4, r3
100135c0:	42ab      	cmp	r3, r5
100135c2:	dc20      	bgt.n	10013606 <scalbn+0x76>
100135c4:	2b00      	cmp	r3, #0
100135c6:	dd0d      	ble.n	100135e4 <scalbn+0x54>
100135c8:	4c1d      	ldr	r4, [pc, #116]	; (10013640 <scalbn+0xb0>)
100135ca:	051b      	lsls	r3, r3, #20
100135cc:	4022      	ands	r2, r4
100135ce:	431a      	orrs	r2, r3
100135d0:	0011      	movs	r1, r2
100135d2:	bd70      	pop	{r4, r5, r6, pc}
100135d4:	4d1b      	ldr	r5, [pc, #108]	; (10013644 <scalbn+0xb4>)
100135d6:	42ab      	cmp	r3, r5
100135d8:	d1f0      	bne.n	100135bc <scalbn+0x2c>
100135da:	0002      	movs	r2, r0
100135dc:	000b      	movs	r3, r1
100135de:	f001 f945 	bl	1001486c <__aeabi_dadd>
100135e2:	e7f6      	b.n	100135d2 <scalbn+0x42>
100135e4:	001d      	movs	r5, r3
100135e6:	3535      	adds	r5, #53	; 0x35
100135e8:	da18      	bge.n	1001361c <scalbn+0x8c>
100135ea:	4b17      	ldr	r3, [pc, #92]	; (10013648 <scalbn+0xb8>)
100135ec:	0002      	movs	r2, r0
100135ee:	429c      	cmp	r4, r3
100135f0:	dc0a      	bgt.n	10013608 <scalbn+0x78>
100135f2:	000b      	movs	r3, r1
100135f4:	4815      	ldr	r0, [pc, #84]	; (1001364c <scalbn+0xbc>)
100135f6:	4916      	ldr	r1, [pc, #88]	; (10013650 <scalbn+0xc0>)
100135f8:	f000 f832 	bl	10013660 <copysign>
100135fc:	4a13      	ldr	r2, [pc, #76]	; (1001364c <scalbn+0xbc>)
100135fe:	4b14      	ldr	r3, [pc, #80]	; (10013650 <scalbn+0xc0>)
10013600:	f002 f884 	bl	1001570c <__aeabi_dmul>
10013604:	e7e5      	b.n	100135d2 <scalbn+0x42>
10013606:	0002      	movs	r2, r0
10013608:	000b      	movs	r3, r1
1001360a:	4812      	ldr	r0, [pc, #72]	; (10013654 <scalbn+0xc4>)
1001360c:	4912      	ldr	r1, [pc, #72]	; (10013658 <scalbn+0xc8>)
1001360e:	f000 f827 	bl	10013660 <copysign>
10013612:	4a10      	ldr	r2, [pc, #64]	; (10013654 <scalbn+0xc4>)
10013614:	4b10      	ldr	r3, [pc, #64]	; (10013658 <scalbn+0xc8>)
10013616:	f002 f879 	bl	1001570c <__aeabi_dmul>
1001361a:	e7da      	b.n	100135d2 <scalbn+0x42>
1001361c:	4c08      	ldr	r4, [pc, #32]	; (10013640 <scalbn+0xb0>)
1001361e:	3336      	adds	r3, #54	; 0x36
10013620:	4022      	ands	r2, r4
10013622:	051b      	lsls	r3, r3, #20
10013624:	4313      	orrs	r3, r2
10013626:	0019      	movs	r1, r3
10013628:	2200      	movs	r2, #0
1001362a:	4b0c      	ldr	r3, [pc, #48]	; (1001365c <scalbn+0xcc>)
1001362c:	f002 f86e 	bl	1001570c <__aeabi_dmul>
10013630:	e7cf      	b.n	100135d2 <scalbn+0x42>
10013632:	46c0      	nop			; (mov r8, r8)
10013634:	43500000 	.word	0x43500000
10013638:	ffff3cb0 	.word	0xffff3cb0
1001363c:	000007fe 	.word	0x000007fe
10013640:	800fffff 	.word	0x800fffff
10013644:	000007ff 	.word	0x000007ff
10013648:	0000c350 	.word	0x0000c350
1001364c:	c2f8f359 	.word	0xc2f8f359
10013650:	01a56e1f 	.word	0x01a56e1f
10013654:	8800759c 	.word	0x8800759c
10013658:	7e37e43c 	.word	0x7e37e43c
1001365c:	3c900000 	.word	0x3c900000

10013660 <copysign>:
10013660:	b530      	push	{r4, r5, lr}
10013662:	004a      	lsls	r2, r1, #1
10013664:	0fdb      	lsrs	r3, r3, #31
10013666:	07db      	lsls	r3, r3, #31
10013668:	0852      	lsrs	r2, r2, #1
1001366a:	431a      	orrs	r2, r3
1001366c:	0011      	movs	r1, r2
1001366e:	bd30      	pop	{r4, r5, pc}

10013670 <__gnu_thumb1_case_sqi>:
10013670:	b402      	push	{r1}
10013672:	4671      	mov	r1, lr
10013674:	0849      	lsrs	r1, r1, #1
10013676:	0049      	lsls	r1, r1, #1
10013678:	5609      	ldrsb	r1, [r1, r0]
1001367a:	0049      	lsls	r1, r1, #1
1001367c:	448e      	add	lr, r1
1001367e:	bc02      	pop	{r1}
10013680:	4770      	bx	lr
10013682:	46c0      	nop			; (mov r8, r8)

10013684 <__gnu_thumb1_case_uqi>:
10013684:	b402      	push	{r1}
10013686:	4671      	mov	r1, lr
10013688:	0849      	lsrs	r1, r1, #1
1001368a:	0049      	lsls	r1, r1, #1
1001368c:	5c09      	ldrb	r1, [r1, r0]
1001368e:	0049      	lsls	r1, r1, #1
10013690:	448e      	add	lr, r1
10013692:	bc02      	pop	{r1}
10013694:	4770      	bx	lr
10013696:	46c0      	nop			; (mov r8, r8)

10013698 <__aeabi_uidiv>:
10013698:	2200      	movs	r2, #0
1001369a:	0843      	lsrs	r3, r0, #1
1001369c:	428b      	cmp	r3, r1
1001369e:	d374      	bcc.n	1001378a <__aeabi_uidiv+0xf2>
100136a0:	0903      	lsrs	r3, r0, #4
100136a2:	428b      	cmp	r3, r1
100136a4:	d35f      	bcc.n	10013766 <__aeabi_uidiv+0xce>
100136a6:	0a03      	lsrs	r3, r0, #8
100136a8:	428b      	cmp	r3, r1
100136aa:	d344      	bcc.n	10013736 <__aeabi_uidiv+0x9e>
100136ac:	0b03      	lsrs	r3, r0, #12
100136ae:	428b      	cmp	r3, r1
100136b0:	d328      	bcc.n	10013704 <__aeabi_uidiv+0x6c>
100136b2:	0c03      	lsrs	r3, r0, #16
100136b4:	428b      	cmp	r3, r1
100136b6:	d30d      	bcc.n	100136d4 <__aeabi_uidiv+0x3c>
100136b8:	22ff      	movs	r2, #255	; 0xff
100136ba:	0209      	lsls	r1, r1, #8
100136bc:	ba12      	rev	r2, r2
100136be:	0c03      	lsrs	r3, r0, #16
100136c0:	428b      	cmp	r3, r1
100136c2:	d302      	bcc.n	100136ca <__aeabi_uidiv+0x32>
100136c4:	1212      	asrs	r2, r2, #8
100136c6:	0209      	lsls	r1, r1, #8
100136c8:	d065      	beq.n	10013796 <__aeabi_uidiv+0xfe>
100136ca:	0b03      	lsrs	r3, r0, #12
100136cc:	428b      	cmp	r3, r1
100136ce:	d319      	bcc.n	10013704 <__aeabi_uidiv+0x6c>
100136d0:	e000      	b.n	100136d4 <__aeabi_uidiv+0x3c>
100136d2:	0a09      	lsrs	r1, r1, #8
100136d4:	0bc3      	lsrs	r3, r0, #15
100136d6:	428b      	cmp	r3, r1
100136d8:	d301      	bcc.n	100136de <__aeabi_uidiv+0x46>
100136da:	03cb      	lsls	r3, r1, #15
100136dc:	1ac0      	subs	r0, r0, r3
100136de:	4152      	adcs	r2, r2
100136e0:	0b83      	lsrs	r3, r0, #14
100136e2:	428b      	cmp	r3, r1
100136e4:	d301      	bcc.n	100136ea <__aeabi_uidiv+0x52>
100136e6:	038b      	lsls	r3, r1, #14
100136e8:	1ac0      	subs	r0, r0, r3
100136ea:	4152      	adcs	r2, r2
100136ec:	0b43      	lsrs	r3, r0, #13
100136ee:	428b      	cmp	r3, r1
100136f0:	d301      	bcc.n	100136f6 <__aeabi_uidiv+0x5e>
100136f2:	034b      	lsls	r3, r1, #13
100136f4:	1ac0      	subs	r0, r0, r3
100136f6:	4152      	adcs	r2, r2
100136f8:	0b03      	lsrs	r3, r0, #12
100136fa:	428b      	cmp	r3, r1
100136fc:	d301      	bcc.n	10013702 <__aeabi_uidiv+0x6a>
100136fe:	030b      	lsls	r3, r1, #12
10013700:	1ac0      	subs	r0, r0, r3
10013702:	4152      	adcs	r2, r2
10013704:	0ac3      	lsrs	r3, r0, #11
10013706:	428b      	cmp	r3, r1
10013708:	d301      	bcc.n	1001370e <__aeabi_uidiv+0x76>
1001370a:	02cb      	lsls	r3, r1, #11
1001370c:	1ac0      	subs	r0, r0, r3
1001370e:	4152      	adcs	r2, r2
10013710:	0a83      	lsrs	r3, r0, #10
10013712:	428b      	cmp	r3, r1
10013714:	d301      	bcc.n	1001371a <__aeabi_uidiv+0x82>
10013716:	028b      	lsls	r3, r1, #10
10013718:	1ac0      	subs	r0, r0, r3
1001371a:	4152      	adcs	r2, r2
1001371c:	0a43      	lsrs	r3, r0, #9
1001371e:	428b      	cmp	r3, r1
10013720:	d301      	bcc.n	10013726 <__aeabi_uidiv+0x8e>
10013722:	024b      	lsls	r3, r1, #9
10013724:	1ac0      	subs	r0, r0, r3
10013726:	4152      	adcs	r2, r2
10013728:	0a03      	lsrs	r3, r0, #8
1001372a:	428b      	cmp	r3, r1
1001372c:	d301      	bcc.n	10013732 <__aeabi_uidiv+0x9a>
1001372e:	020b      	lsls	r3, r1, #8
10013730:	1ac0      	subs	r0, r0, r3
10013732:	4152      	adcs	r2, r2
10013734:	d2cd      	bcs.n	100136d2 <__aeabi_uidiv+0x3a>
10013736:	09c3      	lsrs	r3, r0, #7
10013738:	428b      	cmp	r3, r1
1001373a:	d301      	bcc.n	10013740 <__aeabi_uidiv+0xa8>
1001373c:	01cb      	lsls	r3, r1, #7
1001373e:	1ac0      	subs	r0, r0, r3
10013740:	4152      	adcs	r2, r2
10013742:	0983      	lsrs	r3, r0, #6
10013744:	428b      	cmp	r3, r1
10013746:	d301      	bcc.n	1001374c <__aeabi_uidiv+0xb4>
10013748:	018b      	lsls	r3, r1, #6
1001374a:	1ac0      	subs	r0, r0, r3
1001374c:	4152      	adcs	r2, r2
1001374e:	0943      	lsrs	r3, r0, #5
10013750:	428b      	cmp	r3, r1
10013752:	d301      	bcc.n	10013758 <__aeabi_uidiv+0xc0>
10013754:	014b      	lsls	r3, r1, #5
10013756:	1ac0      	subs	r0, r0, r3
10013758:	4152      	adcs	r2, r2
1001375a:	0903      	lsrs	r3, r0, #4
1001375c:	428b      	cmp	r3, r1
1001375e:	d301      	bcc.n	10013764 <__aeabi_uidiv+0xcc>
10013760:	010b      	lsls	r3, r1, #4
10013762:	1ac0      	subs	r0, r0, r3
10013764:	4152      	adcs	r2, r2
10013766:	08c3      	lsrs	r3, r0, #3
10013768:	428b      	cmp	r3, r1
1001376a:	d301      	bcc.n	10013770 <__aeabi_uidiv+0xd8>
1001376c:	00cb      	lsls	r3, r1, #3
1001376e:	1ac0      	subs	r0, r0, r3
10013770:	4152      	adcs	r2, r2
10013772:	0883      	lsrs	r3, r0, #2
10013774:	428b      	cmp	r3, r1
10013776:	d301      	bcc.n	1001377c <__aeabi_uidiv+0xe4>
10013778:	008b      	lsls	r3, r1, #2
1001377a:	1ac0      	subs	r0, r0, r3
1001377c:	4152      	adcs	r2, r2
1001377e:	0843      	lsrs	r3, r0, #1
10013780:	428b      	cmp	r3, r1
10013782:	d301      	bcc.n	10013788 <__aeabi_uidiv+0xf0>
10013784:	004b      	lsls	r3, r1, #1
10013786:	1ac0      	subs	r0, r0, r3
10013788:	4152      	adcs	r2, r2
1001378a:	1a41      	subs	r1, r0, r1
1001378c:	d200      	bcs.n	10013790 <__aeabi_uidiv+0xf8>
1001378e:	4601      	mov	r1, r0
10013790:	4152      	adcs	r2, r2
10013792:	4610      	mov	r0, r2
10013794:	4770      	bx	lr
10013796:	e7ff      	b.n	10013798 <__aeabi_uidiv+0x100>
10013798:	b501      	push	{r0, lr}
1001379a:	2000      	movs	r0, #0
1001379c:	f000 f8f0 	bl	10013980 <__aeabi_idiv0>
100137a0:	bd02      	pop	{r1, pc}
100137a2:	46c0      	nop			; (mov r8, r8)

100137a4 <__aeabi_uidivmod>:
100137a4:	2900      	cmp	r1, #0
100137a6:	d0f7      	beq.n	10013798 <__aeabi_uidiv+0x100>
100137a8:	e776      	b.n	10013698 <__aeabi_uidiv>
100137aa:	4770      	bx	lr

100137ac <__aeabi_idiv>:
100137ac:	4603      	mov	r3, r0
100137ae:	430b      	orrs	r3, r1
100137b0:	d47f      	bmi.n	100138b2 <__aeabi_idiv+0x106>
100137b2:	2200      	movs	r2, #0
100137b4:	0843      	lsrs	r3, r0, #1
100137b6:	428b      	cmp	r3, r1
100137b8:	d374      	bcc.n	100138a4 <__aeabi_idiv+0xf8>
100137ba:	0903      	lsrs	r3, r0, #4
100137bc:	428b      	cmp	r3, r1
100137be:	d35f      	bcc.n	10013880 <__aeabi_idiv+0xd4>
100137c0:	0a03      	lsrs	r3, r0, #8
100137c2:	428b      	cmp	r3, r1
100137c4:	d344      	bcc.n	10013850 <__aeabi_idiv+0xa4>
100137c6:	0b03      	lsrs	r3, r0, #12
100137c8:	428b      	cmp	r3, r1
100137ca:	d328      	bcc.n	1001381e <__aeabi_idiv+0x72>
100137cc:	0c03      	lsrs	r3, r0, #16
100137ce:	428b      	cmp	r3, r1
100137d0:	d30d      	bcc.n	100137ee <__aeabi_idiv+0x42>
100137d2:	22ff      	movs	r2, #255	; 0xff
100137d4:	0209      	lsls	r1, r1, #8
100137d6:	ba12      	rev	r2, r2
100137d8:	0c03      	lsrs	r3, r0, #16
100137da:	428b      	cmp	r3, r1
100137dc:	d302      	bcc.n	100137e4 <__aeabi_idiv+0x38>
100137de:	1212      	asrs	r2, r2, #8
100137e0:	0209      	lsls	r1, r1, #8
100137e2:	d065      	beq.n	100138b0 <__aeabi_idiv+0x104>
100137e4:	0b03      	lsrs	r3, r0, #12
100137e6:	428b      	cmp	r3, r1
100137e8:	d319      	bcc.n	1001381e <__aeabi_idiv+0x72>
100137ea:	e000      	b.n	100137ee <__aeabi_idiv+0x42>
100137ec:	0a09      	lsrs	r1, r1, #8
100137ee:	0bc3      	lsrs	r3, r0, #15
100137f0:	428b      	cmp	r3, r1
100137f2:	d301      	bcc.n	100137f8 <__aeabi_idiv+0x4c>
100137f4:	03cb      	lsls	r3, r1, #15
100137f6:	1ac0      	subs	r0, r0, r3
100137f8:	4152      	adcs	r2, r2
100137fa:	0b83      	lsrs	r3, r0, #14
100137fc:	428b      	cmp	r3, r1
100137fe:	d301      	bcc.n	10013804 <__aeabi_idiv+0x58>
10013800:	038b      	lsls	r3, r1, #14
10013802:	1ac0      	subs	r0, r0, r3
10013804:	4152      	adcs	r2, r2
10013806:	0b43      	lsrs	r3, r0, #13
10013808:	428b      	cmp	r3, r1
1001380a:	d301      	bcc.n	10013810 <__aeabi_idiv+0x64>
1001380c:	034b      	lsls	r3, r1, #13
1001380e:	1ac0      	subs	r0, r0, r3
10013810:	4152      	adcs	r2, r2
10013812:	0b03      	lsrs	r3, r0, #12
10013814:	428b      	cmp	r3, r1
10013816:	d301      	bcc.n	1001381c <__aeabi_idiv+0x70>
10013818:	030b      	lsls	r3, r1, #12
1001381a:	1ac0      	subs	r0, r0, r3
1001381c:	4152      	adcs	r2, r2
1001381e:	0ac3      	lsrs	r3, r0, #11
10013820:	428b      	cmp	r3, r1
10013822:	d301      	bcc.n	10013828 <__aeabi_idiv+0x7c>
10013824:	02cb      	lsls	r3, r1, #11
10013826:	1ac0      	subs	r0, r0, r3
10013828:	4152      	adcs	r2, r2
1001382a:	0a83      	lsrs	r3, r0, #10
1001382c:	428b      	cmp	r3, r1
1001382e:	d301      	bcc.n	10013834 <__aeabi_idiv+0x88>
10013830:	028b      	lsls	r3, r1, #10
10013832:	1ac0      	subs	r0, r0, r3
10013834:	4152      	adcs	r2, r2
10013836:	0a43      	lsrs	r3, r0, #9
10013838:	428b      	cmp	r3, r1
1001383a:	d301      	bcc.n	10013840 <__aeabi_idiv+0x94>
1001383c:	024b      	lsls	r3, r1, #9
1001383e:	1ac0      	subs	r0, r0, r3
10013840:	4152      	adcs	r2, r2
10013842:	0a03      	lsrs	r3, r0, #8
10013844:	428b      	cmp	r3, r1
10013846:	d301      	bcc.n	1001384c <__aeabi_idiv+0xa0>
10013848:	020b      	lsls	r3, r1, #8
1001384a:	1ac0      	subs	r0, r0, r3
1001384c:	4152      	adcs	r2, r2
1001384e:	d2cd      	bcs.n	100137ec <__aeabi_idiv+0x40>
10013850:	09c3      	lsrs	r3, r0, #7
10013852:	428b      	cmp	r3, r1
10013854:	d301      	bcc.n	1001385a <__aeabi_idiv+0xae>
10013856:	01cb      	lsls	r3, r1, #7
10013858:	1ac0      	subs	r0, r0, r3
1001385a:	4152      	adcs	r2, r2
1001385c:	0983      	lsrs	r3, r0, #6
1001385e:	428b      	cmp	r3, r1
10013860:	d301      	bcc.n	10013866 <__aeabi_idiv+0xba>
10013862:	018b      	lsls	r3, r1, #6
10013864:	1ac0      	subs	r0, r0, r3
10013866:	4152      	adcs	r2, r2
10013868:	0943      	lsrs	r3, r0, #5
1001386a:	428b      	cmp	r3, r1
1001386c:	d301      	bcc.n	10013872 <__aeabi_idiv+0xc6>
1001386e:	014b      	lsls	r3, r1, #5
10013870:	1ac0      	subs	r0, r0, r3
10013872:	4152      	adcs	r2, r2
10013874:	0903      	lsrs	r3, r0, #4
10013876:	428b      	cmp	r3, r1
10013878:	d301      	bcc.n	1001387e <__aeabi_idiv+0xd2>
1001387a:	010b      	lsls	r3, r1, #4
1001387c:	1ac0      	subs	r0, r0, r3
1001387e:	4152      	adcs	r2, r2
10013880:	08c3      	lsrs	r3, r0, #3
10013882:	428b      	cmp	r3, r1
10013884:	d301      	bcc.n	1001388a <__aeabi_idiv+0xde>
10013886:	00cb      	lsls	r3, r1, #3
10013888:	1ac0      	subs	r0, r0, r3
1001388a:	4152      	adcs	r2, r2
1001388c:	0883      	lsrs	r3, r0, #2
1001388e:	428b      	cmp	r3, r1
10013890:	d301      	bcc.n	10013896 <__aeabi_idiv+0xea>
10013892:	008b      	lsls	r3, r1, #2
10013894:	1ac0      	subs	r0, r0, r3
10013896:	4152      	adcs	r2, r2
10013898:	0843      	lsrs	r3, r0, #1
1001389a:	428b      	cmp	r3, r1
1001389c:	d301      	bcc.n	100138a2 <__aeabi_idiv+0xf6>
1001389e:	004b      	lsls	r3, r1, #1
100138a0:	1ac0      	subs	r0, r0, r3
100138a2:	4152      	adcs	r2, r2
100138a4:	1a41      	subs	r1, r0, r1
100138a6:	d200      	bcs.n	100138aa <__aeabi_idiv+0xfe>
100138a8:	4601      	mov	r1, r0
100138aa:	4152      	adcs	r2, r2
100138ac:	4610      	mov	r0, r2
100138ae:	4770      	bx	lr
100138b0:	e05d      	b.n	1001396e <__aeabi_idiv+0x1c2>
100138b2:	0fca      	lsrs	r2, r1, #31
100138b4:	d000      	beq.n	100138b8 <__aeabi_idiv+0x10c>
100138b6:	4249      	negs	r1, r1
100138b8:	1003      	asrs	r3, r0, #32
100138ba:	d300      	bcc.n	100138be <__aeabi_idiv+0x112>
100138bc:	4240      	negs	r0, r0
100138be:	4053      	eors	r3, r2
100138c0:	2200      	movs	r2, #0
100138c2:	469c      	mov	ip, r3
100138c4:	0903      	lsrs	r3, r0, #4
100138c6:	428b      	cmp	r3, r1
100138c8:	d32d      	bcc.n	10013926 <__aeabi_idiv+0x17a>
100138ca:	0a03      	lsrs	r3, r0, #8
100138cc:	428b      	cmp	r3, r1
100138ce:	d312      	bcc.n	100138f6 <__aeabi_idiv+0x14a>
100138d0:	22fc      	movs	r2, #252	; 0xfc
100138d2:	0189      	lsls	r1, r1, #6
100138d4:	ba12      	rev	r2, r2
100138d6:	0a03      	lsrs	r3, r0, #8
100138d8:	428b      	cmp	r3, r1
100138da:	d30c      	bcc.n	100138f6 <__aeabi_idiv+0x14a>
100138dc:	0189      	lsls	r1, r1, #6
100138de:	1192      	asrs	r2, r2, #6
100138e0:	428b      	cmp	r3, r1
100138e2:	d308      	bcc.n	100138f6 <__aeabi_idiv+0x14a>
100138e4:	0189      	lsls	r1, r1, #6
100138e6:	1192      	asrs	r2, r2, #6
100138e8:	428b      	cmp	r3, r1
100138ea:	d304      	bcc.n	100138f6 <__aeabi_idiv+0x14a>
100138ec:	0189      	lsls	r1, r1, #6
100138ee:	d03a      	beq.n	10013966 <__aeabi_idiv+0x1ba>
100138f0:	1192      	asrs	r2, r2, #6
100138f2:	e000      	b.n	100138f6 <__aeabi_idiv+0x14a>
100138f4:	0989      	lsrs	r1, r1, #6
100138f6:	09c3      	lsrs	r3, r0, #7
100138f8:	428b      	cmp	r3, r1
100138fa:	d301      	bcc.n	10013900 <__aeabi_idiv+0x154>
100138fc:	01cb      	lsls	r3, r1, #7
100138fe:	1ac0      	subs	r0, r0, r3
10013900:	4152      	adcs	r2, r2
10013902:	0983      	lsrs	r3, r0, #6
10013904:	428b      	cmp	r3, r1
10013906:	d301      	bcc.n	1001390c <__aeabi_idiv+0x160>
10013908:	018b      	lsls	r3, r1, #6
1001390a:	1ac0      	subs	r0, r0, r3
1001390c:	4152      	adcs	r2, r2
1001390e:	0943      	lsrs	r3, r0, #5
10013910:	428b      	cmp	r3, r1
10013912:	d301      	bcc.n	10013918 <__aeabi_idiv+0x16c>
10013914:	014b      	lsls	r3, r1, #5
10013916:	1ac0      	subs	r0, r0, r3
10013918:	4152      	adcs	r2, r2
1001391a:	0903      	lsrs	r3, r0, #4
1001391c:	428b      	cmp	r3, r1
1001391e:	d301      	bcc.n	10013924 <__aeabi_idiv+0x178>
10013920:	010b      	lsls	r3, r1, #4
10013922:	1ac0      	subs	r0, r0, r3
10013924:	4152      	adcs	r2, r2
10013926:	08c3      	lsrs	r3, r0, #3
10013928:	428b      	cmp	r3, r1
1001392a:	d301      	bcc.n	10013930 <__aeabi_idiv+0x184>
1001392c:	00cb      	lsls	r3, r1, #3
1001392e:	1ac0      	subs	r0, r0, r3
10013930:	4152      	adcs	r2, r2
10013932:	0883      	lsrs	r3, r0, #2
10013934:	428b      	cmp	r3, r1
10013936:	d301      	bcc.n	1001393c <__aeabi_idiv+0x190>
10013938:	008b      	lsls	r3, r1, #2
1001393a:	1ac0      	subs	r0, r0, r3
1001393c:	4152      	adcs	r2, r2
1001393e:	d2d9      	bcs.n	100138f4 <__aeabi_idiv+0x148>
10013940:	0843      	lsrs	r3, r0, #1
10013942:	428b      	cmp	r3, r1
10013944:	d301      	bcc.n	1001394a <__aeabi_idiv+0x19e>
10013946:	004b      	lsls	r3, r1, #1
10013948:	1ac0      	subs	r0, r0, r3
1001394a:	4152      	adcs	r2, r2
1001394c:	1a41      	subs	r1, r0, r1
1001394e:	d200      	bcs.n	10013952 <__aeabi_idiv+0x1a6>
10013950:	4601      	mov	r1, r0
10013952:	4663      	mov	r3, ip
10013954:	4152      	adcs	r2, r2
10013956:	105b      	asrs	r3, r3, #1
10013958:	4610      	mov	r0, r2
1001395a:	d301      	bcc.n	10013960 <__aeabi_idiv+0x1b4>
1001395c:	4240      	negs	r0, r0
1001395e:	2b00      	cmp	r3, #0
10013960:	d500      	bpl.n	10013964 <__aeabi_idiv+0x1b8>
10013962:	4249      	negs	r1, r1
10013964:	4770      	bx	lr
10013966:	4663      	mov	r3, ip
10013968:	105b      	asrs	r3, r3, #1
1001396a:	d300      	bcc.n	1001396e <__aeabi_idiv+0x1c2>
1001396c:	4240      	negs	r0, r0
1001396e:	b501      	push	{r0, lr}
10013970:	2000      	movs	r0, #0
10013972:	f000 f805 	bl	10013980 <__aeabi_idiv0>
10013976:	bd02      	pop	{r1, pc}

10013978 <__aeabi_idivmod>:
10013978:	2900      	cmp	r1, #0
1001397a:	d0f8      	beq.n	1001396e <__aeabi_idiv+0x1c2>
1001397c:	e716      	b.n	100137ac <__aeabi_idiv>
1001397e:	4770      	bx	lr

10013980 <__aeabi_idiv0>:
10013980:	4770      	bx	lr
10013982:	46c0      	nop			; (mov r8, r8)

10013984 <__aeabi_cdrcmple>:
10013984:	4684      	mov	ip, r0
10013986:	1c10      	adds	r0, r2, #0
10013988:	4662      	mov	r2, ip
1001398a:	468c      	mov	ip, r1
1001398c:	1c19      	adds	r1, r3, #0
1001398e:	4663      	mov	r3, ip
10013990:	e000      	b.n	10013994 <__aeabi_cdcmpeq>
10013992:	46c0      	nop			; (mov r8, r8)

10013994 <__aeabi_cdcmpeq>:
10013994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013996:	f001 fe4f 	bl	10015638 <__ledf2>
1001399a:	2800      	cmp	r0, #0
1001399c:	d401      	bmi.n	100139a2 <__aeabi_cdcmpeq+0xe>
1001399e:	2100      	movs	r1, #0
100139a0:	42c8      	cmn	r0, r1
100139a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100139a4 <__aeabi_dcmpeq>:
100139a4:	b510      	push	{r4, lr}
100139a6:	f001 fda3 	bl	100154f0 <__eqdf2>
100139aa:	4240      	negs	r0, r0
100139ac:	3001      	adds	r0, #1
100139ae:	bd10      	pop	{r4, pc}

100139b0 <__aeabi_dcmplt>:
100139b0:	b510      	push	{r4, lr}
100139b2:	f001 fe41 	bl	10015638 <__ledf2>
100139b6:	2800      	cmp	r0, #0
100139b8:	db01      	blt.n	100139be <__aeabi_dcmplt+0xe>
100139ba:	2000      	movs	r0, #0
100139bc:	bd10      	pop	{r4, pc}
100139be:	2001      	movs	r0, #1
100139c0:	bd10      	pop	{r4, pc}
100139c2:	46c0      	nop			; (mov r8, r8)

100139c4 <__aeabi_dcmple>:
100139c4:	b510      	push	{r4, lr}
100139c6:	f001 fe37 	bl	10015638 <__ledf2>
100139ca:	2800      	cmp	r0, #0
100139cc:	dd01      	ble.n	100139d2 <__aeabi_dcmple+0xe>
100139ce:	2000      	movs	r0, #0
100139d0:	bd10      	pop	{r4, pc}
100139d2:	2001      	movs	r0, #1
100139d4:	bd10      	pop	{r4, pc}
100139d6:	46c0      	nop			; (mov r8, r8)

100139d8 <__aeabi_dcmpgt>:
100139d8:	b510      	push	{r4, lr}
100139da:	f001 fdc9 	bl	10015570 <__gedf2>
100139de:	2800      	cmp	r0, #0
100139e0:	dc01      	bgt.n	100139e6 <__aeabi_dcmpgt+0xe>
100139e2:	2000      	movs	r0, #0
100139e4:	bd10      	pop	{r4, pc}
100139e6:	2001      	movs	r0, #1
100139e8:	bd10      	pop	{r4, pc}
100139ea:	46c0      	nop			; (mov r8, r8)

100139ec <__aeabi_dcmpge>:
100139ec:	b510      	push	{r4, lr}
100139ee:	f001 fdbf 	bl	10015570 <__gedf2>
100139f2:	2800      	cmp	r0, #0
100139f4:	da01      	bge.n	100139fa <__aeabi_dcmpge+0xe>
100139f6:	2000      	movs	r0, #0
100139f8:	bd10      	pop	{r4, pc}
100139fa:	2001      	movs	r0, #1
100139fc:	bd10      	pop	{r4, pc}
100139fe:	46c0      	nop			; (mov r8, r8)

10013a00 <__aeabi_cfrcmple>:
10013a00:	4684      	mov	ip, r0
10013a02:	1c08      	adds	r0, r1, #0
10013a04:	4661      	mov	r1, ip
10013a06:	e7ff      	b.n	10013a08 <__aeabi_cfcmpeq>

10013a08 <__aeabi_cfcmpeq>:
10013a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013a0a:	f000 fb91 	bl	10014130 <__lesf2>
10013a0e:	2800      	cmp	r0, #0
10013a10:	d401      	bmi.n	10013a16 <__aeabi_cfcmpeq+0xe>
10013a12:	2100      	movs	r1, #0
10013a14:	42c8      	cmn	r0, r1
10013a16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013a18 <__aeabi_fcmpeq>:
10013a18:	b510      	push	{r4, lr}
10013a1a:	f000 fb1d 	bl	10014058 <__eqsf2>
10013a1e:	4240      	negs	r0, r0
10013a20:	3001      	adds	r0, #1
10013a22:	bd10      	pop	{r4, pc}

10013a24 <__aeabi_fcmplt>:
10013a24:	b510      	push	{r4, lr}
10013a26:	f000 fb83 	bl	10014130 <__lesf2>
10013a2a:	2800      	cmp	r0, #0
10013a2c:	db01      	blt.n	10013a32 <__aeabi_fcmplt+0xe>
10013a2e:	2000      	movs	r0, #0
10013a30:	bd10      	pop	{r4, pc}
10013a32:	2001      	movs	r0, #1
10013a34:	bd10      	pop	{r4, pc}
10013a36:	46c0      	nop			; (mov r8, r8)

10013a38 <__aeabi_fcmple>:
10013a38:	b510      	push	{r4, lr}
10013a3a:	f000 fb79 	bl	10014130 <__lesf2>
10013a3e:	2800      	cmp	r0, #0
10013a40:	dd01      	ble.n	10013a46 <__aeabi_fcmple+0xe>
10013a42:	2000      	movs	r0, #0
10013a44:	bd10      	pop	{r4, pc}
10013a46:	2001      	movs	r0, #1
10013a48:	bd10      	pop	{r4, pc}
10013a4a:	46c0      	nop			; (mov r8, r8)

10013a4c <__aeabi_fcmpgt>:
10013a4c:	b510      	push	{r4, lr}
10013a4e:	f000 fb2b 	bl	100140a8 <__gesf2>
10013a52:	2800      	cmp	r0, #0
10013a54:	dc01      	bgt.n	10013a5a <__aeabi_fcmpgt+0xe>
10013a56:	2000      	movs	r0, #0
10013a58:	bd10      	pop	{r4, pc}
10013a5a:	2001      	movs	r0, #1
10013a5c:	bd10      	pop	{r4, pc}
10013a5e:	46c0      	nop			; (mov r8, r8)

10013a60 <__aeabi_fcmpge>:
10013a60:	b510      	push	{r4, lr}
10013a62:	f000 fb21 	bl	100140a8 <__gesf2>
10013a66:	2800      	cmp	r0, #0
10013a68:	da01      	bge.n	10013a6e <__aeabi_fcmpge+0xe>
10013a6a:	2000      	movs	r0, #0
10013a6c:	bd10      	pop	{r4, pc}
10013a6e:	2001      	movs	r0, #1
10013a70:	bd10      	pop	{r4, pc}
10013a72:	46c0      	nop			; (mov r8, r8)

10013a74 <__aeabi_lmul>:
10013a74:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a76:	464f      	mov	r7, r9
10013a78:	4646      	mov	r6, r8
10013a7a:	b4c0      	push	{r6, r7}
10013a7c:	0416      	lsls	r6, r2, #16
10013a7e:	0c36      	lsrs	r6, r6, #16
10013a80:	4699      	mov	r9, r3
10013a82:	0033      	movs	r3, r6
10013a84:	0405      	lsls	r5, r0, #16
10013a86:	0c2c      	lsrs	r4, r5, #16
10013a88:	0c07      	lsrs	r7, r0, #16
10013a8a:	0c15      	lsrs	r5, r2, #16
10013a8c:	4363      	muls	r3, r4
10013a8e:	437e      	muls	r6, r7
10013a90:	436f      	muls	r7, r5
10013a92:	4365      	muls	r5, r4
10013a94:	0c1c      	lsrs	r4, r3, #16
10013a96:	19ad      	adds	r5, r5, r6
10013a98:	1964      	adds	r4, r4, r5
10013a9a:	469c      	mov	ip, r3
10013a9c:	42a6      	cmp	r6, r4
10013a9e:	d903      	bls.n	10013aa8 <__aeabi_lmul+0x34>
10013aa0:	2380      	movs	r3, #128	; 0x80
10013aa2:	025b      	lsls	r3, r3, #9
10013aa4:	4698      	mov	r8, r3
10013aa6:	4447      	add	r7, r8
10013aa8:	4663      	mov	r3, ip
10013aaa:	0c25      	lsrs	r5, r4, #16
10013aac:	19ef      	adds	r7, r5, r7
10013aae:	041d      	lsls	r5, r3, #16
10013ab0:	464b      	mov	r3, r9
10013ab2:	434a      	muls	r2, r1
10013ab4:	4343      	muls	r3, r0
10013ab6:	0c2d      	lsrs	r5, r5, #16
10013ab8:	0424      	lsls	r4, r4, #16
10013aba:	1964      	adds	r4, r4, r5
10013abc:	1899      	adds	r1, r3, r2
10013abe:	19c9      	adds	r1, r1, r7
10013ac0:	0020      	movs	r0, r4
10013ac2:	bc0c      	pop	{r2, r3}
10013ac4:	4690      	mov	r8, r2
10013ac6:	4699      	mov	r9, r3
10013ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013aca:	46c0      	nop			; (mov r8, r8)

10013acc <__aeabi_f2uiz>:
10013acc:	219e      	movs	r1, #158	; 0x9e
10013ace:	b510      	push	{r4, lr}
10013ad0:	05c9      	lsls	r1, r1, #23
10013ad2:	1c04      	adds	r4, r0, #0
10013ad4:	f7ff ffc4 	bl	10013a60 <__aeabi_fcmpge>
10013ad8:	2800      	cmp	r0, #0
10013ada:	d103      	bne.n	10013ae4 <__aeabi_f2uiz+0x18>
10013adc:	1c20      	adds	r0, r4, #0
10013ade:	f000 fe1d 	bl	1001471c <__aeabi_f2iz>
10013ae2:	bd10      	pop	{r4, pc}
10013ae4:	219e      	movs	r1, #158	; 0x9e
10013ae6:	1c20      	adds	r0, r4, #0
10013ae8:	05c9      	lsls	r1, r1, #23
10013aea:	f000 fc79 	bl	100143e0 <__aeabi_fsub>
10013aee:	f000 fe15 	bl	1001471c <__aeabi_f2iz>
10013af2:	2380      	movs	r3, #128	; 0x80
10013af4:	061b      	lsls	r3, r3, #24
10013af6:	469c      	mov	ip, r3
10013af8:	4460      	add	r0, ip
10013afa:	e7f2      	b.n	10013ae2 <__aeabi_f2uiz+0x16>

10013afc <__aeabi_d2uiz>:
10013afc:	b570      	push	{r4, r5, r6, lr}
10013afe:	2200      	movs	r2, #0
10013b00:	4b0c      	ldr	r3, [pc, #48]	; (10013b34 <__aeabi_d2uiz+0x38>)
10013b02:	0004      	movs	r4, r0
10013b04:	000d      	movs	r5, r1
10013b06:	f7ff ff71 	bl	100139ec <__aeabi_dcmpge>
10013b0a:	2800      	cmp	r0, #0
10013b0c:	d104      	bne.n	10013b18 <__aeabi_d2uiz+0x1c>
10013b0e:	0020      	movs	r0, r4
10013b10:	0029      	movs	r1, r5
10013b12:	f002 fbe9 	bl	100162e8 <__aeabi_d2iz>
10013b16:	bd70      	pop	{r4, r5, r6, pc}
10013b18:	4b06      	ldr	r3, [pc, #24]	; (10013b34 <__aeabi_d2uiz+0x38>)
10013b1a:	2200      	movs	r2, #0
10013b1c:	0020      	movs	r0, r4
10013b1e:	0029      	movs	r1, r5
10013b20:	f002 f86e 	bl	10015c00 <__aeabi_dsub>
10013b24:	f002 fbe0 	bl	100162e8 <__aeabi_d2iz>
10013b28:	2380      	movs	r3, #128	; 0x80
10013b2a:	061b      	lsls	r3, r3, #24
10013b2c:	469c      	mov	ip, r3
10013b2e:	4460      	add	r0, ip
10013b30:	e7f1      	b.n	10013b16 <__aeabi_d2uiz+0x1a>
10013b32:	46c0      	nop			; (mov r8, r8)
10013b34:	41e00000 	.word	0x41e00000

10013b38 <__aeabi_fadd>:
10013b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013b3a:	024a      	lsls	r2, r1, #9
10013b3c:	0243      	lsls	r3, r0, #9
10013b3e:	0044      	lsls	r4, r0, #1
10013b40:	004e      	lsls	r6, r1, #1
10013b42:	0fc5      	lsrs	r5, r0, #31
10013b44:	0e24      	lsrs	r4, r4, #24
10013b46:	0028      	movs	r0, r5
10013b48:	099b      	lsrs	r3, r3, #6
10013b4a:	0e36      	lsrs	r6, r6, #24
10013b4c:	0fc9      	lsrs	r1, r1, #31
10013b4e:	0992      	lsrs	r2, r2, #6
10013b50:	428d      	cmp	r5, r1
10013b52:	d059      	beq.n	10013c08 <__aeabi_fadd+0xd0>
10013b54:	1ba0      	subs	r0, r4, r6
10013b56:	2800      	cmp	r0, #0
10013b58:	dc00      	bgt.n	10013b5c <__aeabi_fadd+0x24>
10013b5a:	e08d      	b.n	10013c78 <__aeabi_fadd+0x140>
10013b5c:	2e00      	cmp	r6, #0
10013b5e:	d11a      	bne.n	10013b96 <__aeabi_fadd+0x5e>
10013b60:	2a00      	cmp	r2, #0
10013b62:	d000      	beq.n	10013b66 <__aeabi_fadd+0x2e>
10013b64:	e079      	b.n	10013c5a <__aeabi_fadd+0x122>
10013b66:	075a      	lsls	r2, r3, #29
10013b68:	d004      	beq.n	10013b74 <__aeabi_fadd+0x3c>
10013b6a:	220f      	movs	r2, #15
10013b6c:	401a      	ands	r2, r3
10013b6e:	2a04      	cmp	r2, #4
10013b70:	d000      	beq.n	10013b74 <__aeabi_fadd+0x3c>
10013b72:	3304      	adds	r3, #4
10013b74:	015a      	lsls	r2, r3, #5
10013b76:	d538      	bpl.n	10013bea <__aeabi_fadd+0xb2>
10013b78:	3401      	adds	r4, #1
10013b7a:	2cff      	cmp	r4, #255	; 0xff
10013b7c:	d100      	bne.n	10013b80 <__aeabi_fadd+0x48>
10013b7e:	e089      	b.n	10013c94 <__aeabi_fadd+0x15c>
10013b80:	0028      	movs	r0, r5
10013b82:	019b      	lsls	r3, r3, #6
10013b84:	0a5b      	lsrs	r3, r3, #9
10013b86:	b2e4      	uxtb	r4, r4
10013b88:	025b      	lsls	r3, r3, #9
10013b8a:	05e4      	lsls	r4, r4, #23
10013b8c:	0a5b      	lsrs	r3, r3, #9
10013b8e:	4323      	orrs	r3, r4
10013b90:	07c0      	lsls	r0, r0, #31
10013b92:	4318      	orrs	r0, r3
10013b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013b96:	2cff      	cmp	r4, #255	; 0xff
10013b98:	d0e5      	beq.n	10013b66 <__aeabi_fadd+0x2e>
10013b9a:	2180      	movs	r1, #128	; 0x80
10013b9c:	04c9      	lsls	r1, r1, #19
10013b9e:	430a      	orrs	r2, r1
10013ba0:	281b      	cmp	r0, #27
10013ba2:	dd00      	ble.n	10013ba6 <__aeabi_fadd+0x6e>
10013ba4:	e089      	b.n	10013cba <__aeabi_fadd+0x182>
10013ba6:	0016      	movs	r6, r2
10013ba8:	2120      	movs	r1, #32
10013baa:	40c6      	lsrs	r6, r0
10013bac:	1a08      	subs	r0, r1, r0
10013bae:	4082      	lsls	r2, r0
10013bb0:	1e51      	subs	r1, r2, #1
10013bb2:	418a      	sbcs	r2, r1
10013bb4:	4332      	orrs	r2, r6
10013bb6:	1a9b      	subs	r3, r3, r2
10013bb8:	015a      	lsls	r2, r3, #5
10013bba:	d514      	bpl.n	10013be6 <__aeabi_fadd+0xae>
10013bbc:	019b      	lsls	r3, r3, #6
10013bbe:	099e      	lsrs	r6, r3, #6
10013bc0:	0030      	movs	r0, r6
10013bc2:	f002 fd21 	bl	10016608 <__clzsi2>
10013bc6:	3805      	subs	r0, #5
10013bc8:	4086      	lsls	r6, r0
10013bca:	4284      	cmp	r4, r0
10013bcc:	dc65      	bgt.n	10013c9a <__aeabi_fadd+0x162>
10013bce:	1b04      	subs	r4, r0, r4
10013bd0:	0033      	movs	r3, r6
10013bd2:	2020      	movs	r0, #32
10013bd4:	3401      	adds	r4, #1
10013bd6:	40e3      	lsrs	r3, r4
10013bd8:	1b04      	subs	r4, r0, r4
10013bda:	40a6      	lsls	r6, r4
10013bdc:	1e72      	subs	r2, r6, #1
10013bde:	4196      	sbcs	r6, r2
10013be0:	2400      	movs	r4, #0
10013be2:	4333      	orrs	r3, r6
10013be4:	e7bf      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013be6:	075a      	lsls	r2, r3, #29
10013be8:	d1bf      	bne.n	10013b6a <__aeabi_fadd+0x32>
10013bea:	08df      	lsrs	r7, r3, #3
10013bec:	0028      	movs	r0, r5
10013bee:	2cff      	cmp	r4, #255	; 0xff
10013bf0:	d12f      	bne.n	10013c52 <__aeabi_fadd+0x11a>
10013bf2:	2f00      	cmp	r7, #0
10013bf4:	d100      	bne.n	10013bf8 <__aeabi_fadd+0xc0>
10013bf6:	e087      	b.n	10013d08 <__aeabi_fadd+0x1d0>
10013bf8:	2280      	movs	r2, #128	; 0x80
10013bfa:	03d2      	lsls	r2, r2, #15
10013bfc:	0013      	movs	r3, r2
10013bfe:	433b      	orrs	r3, r7
10013c00:	025b      	lsls	r3, r3, #9
10013c02:	0a5b      	lsrs	r3, r3, #9
10013c04:	24ff      	movs	r4, #255	; 0xff
10013c06:	e7bf      	b.n	10013b88 <__aeabi_fadd+0x50>
10013c08:	1ba1      	subs	r1, r4, r6
10013c0a:	2900      	cmp	r1, #0
10013c0c:	dd49      	ble.n	10013ca2 <__aeabi_fadd+0x16a>
10013c0e:	2e00      	cmp	r6, #0
10013c10:	d029      	beq.n	10013c66 <__aeabi_fadd+0x12e>
10013c12:	2cff      	cmp	r4, #255	; 0xff
10013c14:	d0a7      	beq.n	10013b66 <__aeabi_fadd+0x2e>
10013c16:	2680      	movs	r6, #128	; 0x80
10013c18:	04f6      	lsls	r6, r6, #19
10013c1a:	4332      	orrs	r2, r6
10013c1c:	291b      	cmp	r1, #27
10013c1e:	dd00      	ble.n	10013c22 <__aeabi_fadd+0xea>
10013c20:	e08d      	b.n	10013d3e <__aeabi_fadd+0x206>
10013c22:	0017      	movs	r7, r2
10013c24:	2620      	movs	r6, #32
10013c26:	40cf      	lsrs	r7, r1
10013c28:	1a71      	subs	r1, r6, r1
10013c2a:	408a      	lsls	r2, r1
10013c2c:	1e51      	subs	r1, r2, #1
10013c2e:	418a      	sbcs	r2, r1
10013c30:	433a      	orrs	r2, r7
10013c32:	189b      	adds	r3, r3, r2
10013c34:	015a      	lsls	r2, r3, #5
10013c36:	d5d6      	bpl.n	10013be6 <__aeabi_fadd+0xae>
10013c38:	3401      	adds	r4, #1
10013c3a:	2cff      	cmp	r4, #255	; 0xff
10013c3c:	d064      	beq.n	10013d08 <__aeabi_fadd+0x1d0>
10013c3e:	2201      	movs	r2, #1
10013c40:	4976      	ldr	r1, [pc, #472]	; (10013e1c <__aeabi_fadd+0x2e4>)
10013c42:	401a      	ands	r2, r3
10013c44:	085b      	lsrs	r3, r3, #1
10013c46:	400b      	ands	r3, r1
10013c48:	4313      	orrs	r3, r2
10013c4a:	e78c      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013c4c:	1e03      	subs	r3, r0, #0
10013c4e:	d1ca      	bne.n	10013be6 <__aeabi_fadd+0xae>
10013c50:	2000      	movs	r0, #0
10013c52:	027b      	lsls	r3, r7, #9
10013c54:	0a5b      	lsrs	r3, r3, #9
10013c56:	b2e4      	uxtb	r4, r4
10013c58:	e796      	b.n	10013b88 <__aeabi_fadd+0x50>
10013c5a:	3801      	subs	r0, #1
10013c5c:	2800      	cmp	r0, #0
10013c5e:	d0aa      	beq.n	10013bb6 <__aeabi_fadd+0x7e>
10013c60:	2cff      	cmp	r4, #255	; 0xff
10013c62:	d19d      	bne.n	10013ba0 <__aeabi_fadd+0x68>
10013c64:	e77f      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013c66:	2a00      	cmp	r2, #0
10013c68:	d100      	bne.n	10013c6c <__aeabi_fadd+0x134>
10013c6a:	e77c      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013c6c:	3901      	subs	r1, #1
10013c6e:	2900      	cmp	r1, #0
10013c70:	d0df      	beq.n	10013c32 <__aeabi_fadd+0xfa>
10013c72:	2cff      	cmp	r4, #255	; 0xff
10013c74:	d1d2      	bne.n	10013c1c <__aeabi_fadd+0xe4>
10013c76:	e776      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013c78:	2800      	cmp	r0, #0
10013c7a:	d120      	bne.n	10013cbe <__aeabi_fadd+0x186>
10013c7c:	1c60      	adds	r0, r4, #1
10013c7e:	b2c0      	uxtb	r0, r0
10013c80:	2801      	cmp	r0, #1
10013c82:	dd53      	ble.n	10013d2c <__aeabi_fadd+0x1f4>
10013c84:	2780      	movs	r7, #128	; 0x80
10013c86:	1a9e      	subs	r6, r3, r2
10013c88:	04ff      	lsls	r7, r7, #19
10013c8a:	4037      	ands	r7, r6
10013c8c:	d02f      	beq.n	10013cee <__aeabi_fadd+0x1b6>
10013c8e:	1ad6      	subs	r6, r2, r3
10013c90:	000d      	movs	r5, r1
10013c92:	e795      	b.n	10013bc0 <__aeabi_fadd+0x88>
10013c94:	0028      	movs	r0, r5
10013c96:	2300      	movs	r3, #0
10013c98:	e776      	b.n	10013b88 <__aeabi_fadd+0x50>
10013c9a:	4b61      	ldr	r3, [pc, #388]	; (10013e20 <__aeabi_fadd+0x2e8>)
10013c9c:	1a24      	subs	r4, r4, r0
10013c9e:	4033      	ands	r3, r6
10013ca0:	e761      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013ca2:	2900      	cmp	r1, #0
10013ca4:	d14d      	bne.n	10013d42 <__aeabi_fadd+0x20a>
10013ca6:	1c61      	adds	r1, r4, #1
10013ca8:	b2ce      	uxtb	r6, r1
10013caa:	2e01      	cmp	r6, #1
10013cac:	dd2f      	ble.n	10013d0e <__aeabi_fadd+0x1d6>
10013cae:	29ff      	cmp	r1, #255	; 0xff
10013cb0:	d02a      	beq.n	10013d08 <__aeabi_fadd+0x1d0>
10013cb2:	189b      	adds	r3, r3, r2
10013cb4:	085b      	lsrs	r3, r3, #1
10013cb6:	000c      	movs	r4, r1
10013cb8:	e755      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013cba:	2201      	movs	r2, #1
10013cbc:	e77b      	b.n	10013bb6 <__aeabi_fadd+0x7e>
10013cbe:	2c00      	cmp	r4, #0
10013cc0:	d11b      	bne.n	10013cfa <__aeabi_fadd+0x1c2>
10013cc2:	2b00      	cmp	r3, #0
10013cc4:	d05b      	beq.n	10013d7e <__aeabi_fadd+0x246>
10013cc6:	43c0      	mvns	r0, r0
10013cc8:	2800      	cmp	r0, #0
10013cca:	d00c      	beq.n	10013ce6 <__aeabi_fadd+0x1ae>
10013ccc:	2eff      	cmp	r6, #255	; 0xff
10013cce:	d07e      	beq.n	10013dce <__aeabi_fadd+0x296>
10013cd0:	281b      	cmp	r0, #27
10013cd2:	dd00      	ble.n	10013cd6 <__aeabi_fadd+0x19e>
10013cd4:	e092      	b.n	10013dfc <__aeabi_fadd+0x2c4>
10013cd6:	001d      	movs	r5, r3
10013cd8:	2420      	movs	r4, #32
10013cda:	40c5      	lsrs	r5, r0
10013cdc:	1a20      	subs	r0, r4, r0
10013cde:	4083      	lsls	r3, r0
10013ce0:	1e58      	subs	r0, r3, #1
10013ce2:	4183      	sbcs	r3, r0
10013ce4:	432b      	orrs	r3, r5
10013ce6:	1ad3      	subs	r3, r2, r3
10013ce8:	0034      	movs	r4, r6
10013cea:	000d      	movs	r5, r1
10013cec:	e764      	b.n	10013bb8 <__aeabi_fadd+0x80>
10013cee:	2e00      	cmp	r6, #0
10013cf0:	d000      	beq.n	10013cf4 <__aeabi_fadd+0x1bc>
10013cf2:	e765      	b.n	10013bc0 <__aeabi_fadd+0x88>
10013cf4:	2000      	movs	r0, #0
10013cf6:	2400      	movs	r4, #0
10013cf8:	e7ab      	b.n	10013c52 <__aeabi_fadd+0x11a>
10013cfa:	2eff      	cmp	r6, #255	; 0xff
10013cfc:	d067      	beq.n	10013dce <__aeabi_fadd+0x296>
10013cfe:	2480      	movs	r4, #128	; 0x80
10013d00:	04e4      	lsls	r4, r4, #19
10013d02:	4240      	negs	r0, r0
10013d04:	4323      	orrs	r3, r4
10013d06:	e7e3      	b.n	10013cd0 <__aeabi_fadd+0x198>
10013d08:	24ff      	movs	r4, #255	; 0xff
10013d0a:	2300      	movs	r3, #0
10013d0c:	e73c      	b.n	10013b88 <__aeabi_fadd+0x50>
10013d0e:	2c00      	cmp	r4, #0
10013d10:	d161      	bne.n	10013dd6 <__aeabi_fadd+0x29e>
10013d12:	2b00      	cmp	r3, #0
10013d14:	d07e      	beq.n	10013e14 <__aeabi_fadd+0x2dc>
10013d16:	2a00      	cmp	r2, #0
10013d18:	d100      	bne.n	10013d1c <__aeabi_fadd+0x1e4>
10013d1a:	e724      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d1c:	189b      	adds	r3, r3, r2
10013d1e:	015a      	lsls	r2, r3, #5
10013d20:	d400      	bmi.n	10013d24 <__aeabi_fadd+0x1ec>
10013d22:	e760      	b.n	10013be6 <__aeabi_fadd+0xae>
10013d24:	4a3e      	ldr	r2, [pc, #248]	; (10013e20 <__aeabi_fadd+0x2e8>)
10013d26:	000c      	movs	r4, r1
10013d28:	4013      	ands	r3, r2
10013d2a:	e71c      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d2c:	2c00      	cmp	r4, #0
10013d2e:	d11e      	bne.n	10013d6e <__aeabi_fadd+0x236>
10013d30:	2b00      	cmp	r3, #0
10013d32:	d12f      	bne.n	10013d94 <__aeabi_fadd+0x25c>
10013d34:	2a00      	cmp	r2, #0
10013d36:	d066      	beq.n	10013e06 <__aeabi_fadd+0x2ce>
10013d38:	0013      	movs	r3, r2
10013d3a:	000d      	movs	r5, r1
10013d3c:	e713      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d3e:	2201      	movs	r2, #1
10013d40:	e777      	b.n	10013c32 <__aeabi_fadd+0xfa>
10013d42:	2c00      	cmp	r4, #0
10013d44:	d11f      	bne.n	10013d86 <__aeabi_fadd+0x24e>
10013d46:	2b00      	cmp	r3, #0
10013d48:	d05a      	beq.n	10013e00 <__aeabi_fadd+0x2c8>
10013d4a:	43c9      	mvns	r1, r1
10013d4c:	2900      	cmp	r1, #0
10013d4e:	d00b      	beq.n	10013d68 <__aeabi_fadd+0x230>
10013d50:	2eff      	cmp	r6, #255	; 0xff
10013d52:	d050      	beq.n	10013df6 <__aeabi_fadd+0x2be>
10013d54:	291b      	cmp	r1, #27
10013d56:	dc5f      	bgt.n	10013e18 <__aeabi_fadd+0x2e0>
10013d58:	001f      	movs	r7, r3
10013d5a:	2420      	movs	r4, #32
10013d5c:	40cf      	lsrs	r7, r1
10013d5e:	1a61      	subs	r1, r4, r1
10013d60:	408b      	lsls	r3, r1
10013d62:	1e59      	subs	r1, r3, #1
10013d64:	418b      	sbcs	r3, r1
10013d66:	433b      	orrs	r3, r7
10013d68:	189b      	adds	r3, r3, r2
10013d6a:	0034      	movs	r4, r6
10013d6c:	e762      	b.n	10013c34 <__aeabi_fadd+0xfc>
10013d6e:	2b00      	cmp	r3, #0
10013d70:	d11c      	bne.n	10013dac <__aeabi_fadd+0x274>
10013d72:	2a00      	cmp	r2, #0
10013d74:	d04a      	beq.n	10013e0c <__aeabi_fadd+0x2d4>
10013d76:	0013      	movs	r3, r2
10013d78:	000d      	movs	r5, r1
10013d7a:	24ff      	movs	r4, #255	; 0xff
10013d7c:	e6f3      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d7e:	0013      	movs	r3, r2
10013d80:	0034      	movs	r4, r6
10013d82:	000d      	movs	r5, r1
10013d84:	e6ef      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d86:	2eff      	cmp	r6, #255	; 0xff
10013d88:	d035      	beq.n	10013df6 <__aeabi_fadd+0x2be>
10013d8a:	2480      	movs	r4, #128	; 0x80
10013d8c:	04e4      	lsls	r4, r4, #19
10013d8e:	4249      	negs	r1, r1
10013d90:	4323      	orrs	r3, r4
10013d92:	e7df      	b.n	10013d54 <__aeabi_fadd+0x21c>
10013d94:	2a00      	cmp	r2, #0
10013d96:	d100      	bne.n	10013d9a <__aeabi_fadd+0x262>
10013d98:	e6e5      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013d9a:	2780      	movs	r7, #128	; 0x80
10013d9c:	1a98      	subs	r0, r3, r2
10013d9e:	04ff      	lsls	r7, r7, #19
10013da0:	4007      	ands	r7, r0
10013da2:	d100      	bne.n	10013da6 <__aeabi_fadd+0x26e>
10013da4:	e752      	b.n	10013c4c <__aeabi_fadd+0x114>
10013da6:	1ad3      	subs	r3, r2, r3
10013da8:	000d      	movs	r5, r1
10013daa:	e6dc      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013dac:	24ff      	movs	r4, #255	; 0xff
10013dae:	2a00      	cmp	r2, #0
10013db0:	d100      	bne.n	10013db4 <__aeabi_fadd+0x27c>
10013db2:	e6d8      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013db4:	2080      	movs	r0, #128	; 0x80
10013db6:	08db      	lsrs	r3, r3, #3
10013db8:	03c0      	lsls	r0, r0, #15
10013dba:	4203      	tst	r3, r0
10013dbc:	d004      	beq.n	10013dc8 <__aeabi_fadd+0x290>
10013dbe:	08d2      	lsrs	r2, r2, #3
10013dc0:	4202      	tst	r2, r0
10013dc2:	d101      	bne.n	10013dc8 <__aeabi_fadd+0x290>
10013dc4:	0013      	movs	r3, r2
10013dc6:	000d      	movs	r5, r1
10013dc8:	00db      	lsls	r3, r3, #3
10013dca:	24ff      	movs	r4, #255	; 0xff
10013dcc:	e6cb      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013dce:	0013      	movs	r3, r2
10013dd0:	24ff      	movs	r4, #255	; 0xff
10013dd2:	000d      	movs	r5, r1
10013dd4:	e6c7      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013dd6:	2b00      	cmp	r3, #0
10013dd8:	d00d      	beq.n	10013df6 <__aeabi_fadd+0x2be>
10013dda:	24ff      	movs	r4, #255	; 0xff
10013ddc:	2a00      	cmp	r2, #0
10013dde:	d100      	bne.n	10013de2 <__aeabi_fadd+0x2aa>
10013de0:	e6c1      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013de2:	2180      	movs	r1, #128	; 0x80
10013de4:	08db      	lsrs	r3, r3, #3
10013de6:	03c9      	lsls	r1, r1, #15
10013de8:	420b      	tst	r3, r1
10013dea:	d0ed      	beq.n	10013dc8 <__aeabi_fadd+0x290>
10013dec:	08d2      	lsrs	r2, r2, #3
10013dee:	420a      	tst	r2, r1
10013df0:	d1ea      	bne.n	10013dc8 <__aeabi_fadd+0x290>
10013df2:	0013      	movs	r3, r2
10013df4:	e7e8      	b.n	10013dc8 <__aeabi_fadd+0x290>
10013df6:	0013      	movs	r3, r2
10013df8:	24ff      	movs	r4, #255	; 0xff
10013dfa:	e6b4      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013dfc:	2301      	movs	r3, #1
10013dfe:	e772      	b.n	10013ce6 <__aeabi_fadd+0x1ae>
10013e00:	0013      	movs	r3, r2
10013e02:	0034      	movs	r4, r6
10013e04:	e6af      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013e06:	2700      	movs	r7, #0
10013e08:	2000      	movs	r0, #0
10013e0a:	e722      	b.n	10013c52 <__aeabi_fadd+0x11a>
10013e0c:	2780      	movs	r7, #128	; 0x80
10013e0e:	2000      	movs	r0, #0
10013e10:	03ff      	lsls	r7, r7, #15
10013e12:	e6f1      	b.n	10013bf8 <__aeabi_fadd+0xc0>
10013e14:	0013      	movs	r3, r2
10013e16:	e6a6      	b.n	10013b66 <__aeabi_fadd+0x2e>
10013e18:	2301      	movs	r3, #1
10013e1a:	e7a5      	b.n	10013d68 <__aeabi_fadd+0x230>
10013e1c:	7dffffff 	.word	0x7dffffff
10013e20:	fbffffff 	.word	0xfbffffff

10013e24 <__aeabi_fdiv>:
10013e24:	b5f0      	push	{r4, r5, r6, r7, lr}
10013e26:	4656      	mov	r6, sl
10013e28:	4644      	mov	r4, r8
10013e2a:	465f      	mov	r7, fp
10013e2c:	464d      	mov	r5, r9
10013e2e:	b4f0      	push	{r4, r5, r6, r7}
10013e30:	0244      	lsls	r4, r0, #9
10013e32:	0046      	lsls	r6, r0, #1
10013e34:	0fc7      	lsrs	r7, r0, #31
10013e36:	b083      	sub	sp, #12
10013e38:	4688      	mov	r8, r1
10013e3a:	0a65      	lsrs	r5, r4, #9
10013e3c:	0e36      	lsrs	r6, r6, #24
10013e3e:	46ba      	mov	sl, r7
10013e40:	d03d      	beq.n	10013ebe <__aeabi_fdiv+0x9a>
10013e42:	2eff      	cmp	r6, #255	; 0xff
10013e44:	d022      	beq.n	10013e8c <__aeabi_fdiv+0x68>
10013e46:	2300      	movs	r3, #0
10013e48:	00ec      	lsls	r4, r5, #3
10013e4a:	2580      	movs	r5, #128	; 0x80
10013e4c:	4699      	mov	r9, r3
10013e4e:	469b      	mov	fp, r3
10013e50:	04ed      	lsls	r5, r5, #19
10013e52:	4325      	orrs	r5, r4
10013e54:	3e7f      	subs	r6, #127	; 0x7f
10013e56:	4643      	mov	r3, r8
10013e58:	025c      	lsls	r4, r3, #9
10013e5a:	0058      	lsls	r0, r3, #1
10013e5c:	0fdb      	lsrs	r3, r3, #31
10013e5e:	0a64      	lsrs	r4, r4, #9
10013e60:	0e00      	lsrs	r0, r0, #24
10013e62:	4698      	mov	r8, r3
10013e64:	d036      	beq.n	10013ed4 <__aeabi_fdiv+0xb0>
10013e66:	28ff      	cmp	r0, #255	; 0xff
10013e68:	d030      	beq.n	10013ecc <__aeabi_fdiv+0xa8>
10013e6a:	2380      	movs	r3, #128	; 0x80
10013e6c:	2100      	movs	r1, #0
10013e6e:	00e4      	lsls	r4, r4, #3
10013e70:	04db      	lsls	r3, r3, #19
10013e72:	431c      	orrs	r4, r3
10013e74:	387f      	subs	r0, #127	; 0x7f
10013e76:	1a30      	subs	r0, r6, r0
10013e78:	9001      	str	r0, [sp, #4]
10013e7a:	4648      	mov	r0, r9
10013e7c:	4642      	mov	r2, r8
10013e7e:	4308      	orrs	r0, r1
10013e80:	4e72      	ldr	r6, [pc, #456]	; (1001404c <__aeabi_fdiv+0x228>)
10013e82:	0080      	lsls	r0, r0, #2
10013e84:	5830      	ldr	r0, [r6, r0]
10013e86:	407a      	eors	r2, r7
10013e88:	0013      	movs	r3, r2
10013e8a:	4687      	mov	pc, r0
10013e8c:	2d00      	cmp	r5, #0
10013e8e:	d144      	bne.n	10013f1a <__aeabi_fdiv+0xf6>
10013e90:	2308      	movs	r3, #8
10013e92:	4699      	mov	r9, r3
10013e94:	3b06      	subs	r3, #6
10013e96:	469b      	mov	fp, r3
10013e98:	e7dd      	b.n	10013e56 <__aeabi_fdiv+0x32>
10013e9a:	2201      	movs	r2, #1
10013e9c:	20ff      	movs	r0, #255	; 0xff
10013e9e:	2400      	movs	r4, #0
10013ea0:	401a      	ands	r2, r3
10013ea2:	0264      	lsls	r4, r4, #9
10013ea4:	05c3      	lsls	r3, r0, #23
10013ea6:	0a64      	lsrs	r4, r4, #9
10013ea8:	07d2      	lsls	r2, r2, #31
10013eaa:	431c      	orrs	r4, r3
10013eac:	4314      	orrs	r4, r2
10013eae:	0020      	movs	r0, r4
10013eb0:	b003      	add	sp, #12
10013eb2:	bc3c      	pop	{r2, r3, r4, r5}
10013eb4:	4690      	mov	r8, r2
10013eb6:	4699      	mov	r9, r3
10013eb8:	46a2      	mov	sl, r4
10013eba:	46ab      	mov	fp, r5
10013ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ebe:	2d00      	cmp	r5, #0
10013ec0:	d120      	bne.n	10013f04 <__aeabi_fdiv+0xe0>
10013ec2:	2304      	movs	r3, #4
10013ec4:	4699      	mov	r9, r3
10013ec6:	3b03      	subs	r3, #3
10013ec8:	469b      	mov	fp, r3
10013eca:	e7c4      	b.n	10013e56 <__aeabi_fdiv+0x32>
10013ecc:	2c00      	cmp	r4, #0
10013ece:	d117      	bne.n	10013f00 <__aeabi_fdiv+0xdc>
10013ed0:	2102      	movs	r1, #2
10013ed2:	e002      	b.n	10013eda <__aeabi_fdiv+0xb6>
10013ed4:	2c00      	cmp	r4, #0
10013ed6:	d10a      	bne.n	10013eee <__aeabi_fdiv+0xca>
10013ed8:	2101      	movs	r1, #1
10013eda:	1a32      	subs	r2, r6, r0
10013edc:	9201      	str	r2, [sp, #4]
10013ede:	464a      	mov	r2, r9
10013ee0:	4643      	mov	r3, r8
10013ee2:	430a      	orrs	r2, r1
10013ee4:	485a      	ldr	r0, [pc, #360]	; (10014050 <__aeabi_fdiv+0x22c>)
10013ee6:	0092      	lsls	r2, r2, #2
10013ee8:	5882      	ldr	r2, [r0, r2]
10013eea:	407b      	eors	r3, r7
10013eec:	4697      	mov	pc, r2
10013eee:	0020      	movs	r0, r4
10013ef0:	f002 fb8a 	bl	10016608 <__clzsi2>
10013ef4:	1f43      	subs	r3, r0, #5
10013ef6:	3076      	adds	r0, #118	; 0x76
10013ef8:	409c      	lsls	r4, r3
10013efa:	4240      	negs	r0, r0
10013efc:	2100      	movs	r1, #0
10013efe:	e7ba      	b.n	10013e76 <__aeabi_fdiv+0x52>
10013f00:	2103      	movs	r1, #3
10013f02:	e7b8      	b.n	10013e76 <__aeabi_fdiv+0x52>
10013f04:	0028      	movs	r0, r5
10013f06:	f002 fb7f 	bl	10016608 <__clzsi2>
10013f0a:	1f43      	subs	r3, r0, #5
10013f0c:	409d      	lsls	r5, r3
10013f0e:	2300      	movs	r3, #0
10013f10:	3076      	adds	r0, #118	; 0x76
10013f12:	4246      	negs	r6, r0
10013f14:	4699      	mov	r9, r3
10013f16:	469b      	mov	fp, r3
10013f18:	e79d      	b.n	10013e56 <__aeabi_fdiv+0x32>
10013f1a:	230c      	movs	r3, #12
10013f1c:	4699      	mov	r9, r3
10013f1e:	3b09      	subs	r3, #9
10013f20:	469b      	mov	fp, r3
10013f22:	e798      	b.n	10013e56 <__aeabi_fdiv+0x32>
10013f24:	2480      	movs	r4, #128	; 0x80
10013f26:	2200      	movs	r2, #0
10013f28:	03e4      	lsls	r4, r4, #15
10013f2a:	20ff      	movs	r0, #255	; 0xff
10013f2c:	e7b9      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013f2e:	2400      	movs	r4, #0
10013f30:	46c2      	mov	sl, r8
10013f32:	468b      	mov	fp, r1
10013f34:	465a      	mov	r2, fp
10013f36:	4653      	mov	r3, sl
10013f38:	2a02      	cmp	r2, #2
10013f3a:	d0ae      	beq.n	10013e9a <__aeabi_fdiv+0x76>
10013f3c:	2a03      	cmp	r2, #3
10013f3e:	d07d      	beq.n	1001403c <__aeabi_fdiv+0x218>
10013f40:	2a01      	cmp	r2, #1
10013f42:	d131      	bne.n	10013fa8 <__aeabi_fdiv+0x184>
10013f44:	2201      	movs	r2, #1
10013f46:	2000      	movs	r0, #0
10013f48:	401a      	ands	r2, r3
10013f4a:	2400      	movs	r4, #0
10013f4c:	e7a9      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013f4e:	2201      	movs	r2, #1
10013f50:	1a10      	subs	r0, r2, r0
10013f52:	281b      	cmp	r0, #27
10013f54:	dd56      	ble.n	10014004 <__aeabi_fdiv+0x1e0>
10013f56:	401a      	ands	r2, r3
10013f58:	2000      	movs	r0, #0
10013f5a:	2400      	movs	r4, #0
10013f5c:	e7a1      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013f5e:	2380      	movs	r3, #128	; 0x80
10013f60:	03db      	lsls	r3, r3, #15
10013f62:	421d      	tst	r5, r3
10013f64:	d14b      	bne.n	10013ffe <__aeabi_fdiv+0x1da>
10013f66:	2380      	movs	r3, #128	; 0x80
10013f68:	03db      	lsls	r3, r3, #15
10013f6a:	432b      	orrs	r3, r5
10013f6c:	025c      	lsls	r4, r3, #9
10013f6e:	0a64      	lsrs	r4, r4, #9
10013f70:	003a      	movs	r2, r7
10013f72:	20ff      	movs	r0, #255	; 0xff
10013f74:	e795      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013f76:	016d      	lsls	r5, r5, #5
10013f78:	0160      	lsls	r0, r4, #5
10013f7a:	4285      	cmp	r5, r0
10013f7c:	d230      	bcs.n	10013fe0 <__aeabi_fdiv+0x1bc>
10013f7e:	9a01      	ldr	r2, [sp, #4]
10013f80:	2400      	movs	r4, #0
10013f82:	3a01      	subs	r2, #1
10013f84:	9201      	str	r2, [sp, #4]
10013f86:	221b      	movs	r2, #27
10013f88:	2701      	movs	r7, #1
10013f8a:	0029      	movs	r1, r5
10013f8c:	0064      	lsls	r4, r4, #1
10013f8e:	006d      	lsls	r5, r5, #1
10013f90:	2900      	cmp	r1, #0
10013f92:	db01      	blt.n	10013f98 <__aeabi_fdiv+0x174>
10013f94:	42a8      	cmp	r0, r5
10013f96:	d801      	bhi.n	10013f9c <__aeabi_fdiv+0x178>
10013f98:	1a2d      	subs	r5, r5, r0
10013f9a:	433c      	orrs	r4, r7
10013f9c:	3a01      	subs	r2, #1
10013f9e:	2a00      	cmp	r2, #0
10013fa0:	d1f3      	bne.n	10013f8a <__aeabi_fdiv+0x166>
10013fa2:	1e6a      	subs	r2, r5, #1
10013fa4:	4195      	sbcs	r5, r2
10013fa6:	432c      	orrs	r4, r5
10013fa8:	9801      	ldr	r0, [sp, #4]
10013faa:	307f      	adds	r0, #127	; 0x7f
10013fac:	2800      	cmp	r0, #0
10013fae:	ddce      	ble.n	10013f4e <__aeabi_fdiv+0x12a>
10013fb0:	0762      	lsls	r2, r4, #29
10013fb2:	d004      	beq.n	10013fbe <__aeabi_fdiv+0x19a>
10013fb4:	220f      	movs	r2, #15
10013fb6:	4022      	ands	r2, r4
10013fb8:	2a04      	cmp	r2, #4
10013fba:	d000      	beq.n	10013fbe <__aeabi_fdiv+0x19a>
10013fbc:	3404      	adds	r4, #4
10013fbe:	0122      	lsls	r2, r4, #4
10013fc0:	d503      	bpl.n	10013fca <__aeabi_fdiv+0x1a6>
10013fc2:	4a24      	ldr	r2, [pc, #144]	; (10014054 <__aeabi_fdiv+0x230>)
10013fc4:	9801      	ldr	r0, [sp, #4]
10013fc6:	4014      	ands	r4, r2
10013fc8:	3080      	adds	r0, #128	; 0x80
10013fca:	28fe      	cmp	r0, #254	; 0xfe
10013fcc:	dd00      	ble.n	10013fd0 <__aeabi_fdiv+0x1ac>
10013fce:	e764      	b.n	10013e9a <__aeabi_fdiv+0x76>
10013fd0:	2201      	movs	r2, #1
10013fd2:	01a4      	lsls	r4, r4, #6
10013fd4:	0a64      	lsrs	r4, r4, #9
10013fd6:	b2c0      	uxtb	r0, r0
10013fd8:	401a      	ands	r2, r3
10013fda:	e762      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013fdc:	002c      	movs	r4, r5
10013fde:	e7a9      	b.n	10013f34 <__aeabi_fdiv+0x110>
10013fe0:	1a2d      	subs	r5, r5, r0
10013fe2:	221a      	movs	r2, #26
10013fe4:	2401      	movs	r4, #1
10013fe6:	e7cf      	b.n	10013f88 <__aeabi_fdiv+0x164>
10013fe8:	026b      	lsls	r3, r5, #9
10013fea:	d5bc      	bpl.n	10013f66 <__aeabi_fdiv+0x142>
10013fec:	2400      	movs	r4, #0
10013fee:	2380      	movs	r3, #128	; 0x80
10013ff0:	03db      	lsls	r3, r3, #15
10013ff2:	431c      	orrs	r4, r3
10013ff4:	0264      	lsls	r4, r4, #9
10013ff6:	0a64      	lsrs	r4, r4, #9
10013ff8:	4642      	mov	r2, r8
10013ffa:	20ff      	movs	r0, #255	; 0xff
10013ffc:	e751      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10013ffe:	421c      	tst	r4, r3
10014000:	d1b3      	bne.n	10013f6a <__aeabi_fdiv+0x146>
10014002:	e7f4      	b.n	10013fee <__aeabi_fdiv+0x1ca>
10014004:	0021      	movs	r1, r4
10014006:	2220      	movs	r2, #32
10014008:	40c1      	lsrs	r1, r0
1001400a:	1a10      	subs	r0, r2, r0
1001400c:	4084      	lsls	r4, r0
1001400e:	1e62      	subs	r2, r4, #1
10014010:	4194      	sbcs	r4, r2
10014012:	430c      	orrs	r4, r1
10014014:	0762      	lsls	r2, r4, #29
10014016:	d004      	beq.n	10014022 <__aeabi_fdiv+0x1fe>
10014018:	220f      	movs	r2, #15
1001401a:	4022      	ands	r2, r4
1001401c:	2a04      	cmp	r2, #4
1001401e:	d000      	beq.n	10014022 <__aeabi_fdiv+0x1fe>
10014020:	3404      	adds	r4, #4
10014022:	0162      	lsls	r2, r4, #5
10014024:	d504      	bpl.n	10014030 <__aeabi_fdiv+0x20c>
10014026:	2201      	movs	r2, #1
10014028:	2001      	movs	r0, #1
1001402a:	401a      	ands	r2, r3
1001402c:	2400      	movs	r4, #0
1001402e:	e738      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
10014030:	2201      	movs	r2, #1
10014032:	01a4      	lsls	r4, r4, #6
10014034:	0a64      	lsrs	r4, r4, #9
10014036:	401a      	ands	r2, r3
10014038:	2000      	movs	r0, #0
1001403a:	e732      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
1001403c:	2380      	movs	r3, #128	; 0x80
1001403e:	03db      	lsls	r3, r3, #15
10014040:	431c      	orrs	r4, r3
10014042:	0264      	lsls	r4, r4, #9
10014044:	0a64      	lsrs	r4, r4, #9
10014046:	4652      	mov	r2, sl
10014048:	20ff      	movs	r0, #255	; 0xff
1001404a:	e72a      	b.n	10013ea2 <__aeabi_fdiv+0x7e>
1001404c:	10019130 	.word	0x10019130
10014050:	10019170 	.word	0x10019170
10014054:	f7ffffff 	.word	0xf7ffffff

10014058 <__eqsf2>:
10014058:	0243      	lsls	r3, r0, #9
1001405a:	b570      	push	{r4, r5, r6, lr}
1001405c:	0042      	lsls	r2, r0, #1
1001405e:	004c      	lsls	r4, r1, #1
10014060:	0a5d      	lsrs	r5, r3, #9
10014062:	0fc3      	lsrs	r3, r0, #31
10014064:	0248      	lsls	r0, r1, #9
10014066:	0e12      	lsrs	r2, r2, #24
10014068:	0a46      	lsrs	r6, r0, #9
1001406a:	0e24      	lsrs	r4, r4, #24
1001406c:	0fc9      	lsrs	r1, r1, #31
1001406e:	2aff      	cmp	r2, #255	; 0xff
10014070:	d00f      	beq.n	10014092 <__eqsf2+0x3a>
10014072:	2cff      	cmp	r4, #255	; 0xff
10014074:	d011      	beq.n	1001409a <__eqsf2+0x42>
10014076:	2001      	movs	r0, #1
10014078:	42a2      	cmp	r2, r4
1001407a:	d000      	beq.n	1001407e <__eqsf2+0x26>
1001407c:	bd70      	pop	{r4, r5, r6, pc}
1001407e:	42b5      	cmp	r5, r6
10014080:	d1fc      	bne.n	1001407c <__eqsf2+0x24>
10014082:	428b      	cmp	r3, r1
10014084:	d00d      	beq.n	100140a2 <__eqsf2+0x4a>
10014086:	2a00      	cmp	r2, #0
10014088:	d1f8      	bne.n	1001407c <__eqsf2+0x24>
1001408a:	0028      	movs	r0, r5
1001408c:	1e43      	subs	r3, r0, #1
1001408e:	4198      	sbcs	r0, r3
10014090:	e7f4      	b.n	1001407c <__eqsf2+0x24>
10014092:	2001      	movs	r0, #1
10014094:	2d00      	cmp	r5, #0
10014096:	d1f1      	bne.n	1001407c <__eqsf2+0x24>
10014098:	e7eb      	b.n	10014072 <__eqsf2+0x1a>
1001409a:	2001      	movs	r0, #1
1001409c:	2e00      	cmp	r6, #0
1001409e:	d1ed      	bne.n	1001407c <__eqsf2+0x24>
100140a0:	e7e9      	b.n	10014076 <__eqsf2+0x1e>
100140a2:	2000      	movs	r0, #0
100140a4:	e7ea      	b.n	1001407c <__eqsf2+0x24>
100140a6:	46c0      	nop			; (mov r8, r8)

100140a8 <__gesf2>:
100140a8:	0243      	lsls	r3, r0, #9
100140aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100140ac:	0042      	lsls	r2, r0, #1
100140ae:	0a5d      	lsrs	r5, r3, #9
100140b0:	0fc3      	lsrs	r3, r0, #31
100140b2:	0248      	lsls	r0, r1, #9
100140b4:	0a44      	lsrs	r4, r0, #9
100140b6:	0048      	lsls	r0, r1, #1
100140b8:	0e12      	lsrs	r2, r2, #24
100140ba:	0e00      	lsrs	r0, r0, #24
100140bc:	0fc9      	lsrs	r1, r1, #31
100140be:	2aff      	cmp	r2, #255	; 0xff
100140c0:	d01f      	beq.n	10014102 <__gesf2+0x5a>
100140c2:	28ff      	cmp	r0, #255	; 0xff
100140c4:	d022      	beq.n	1001410c <__gesf2+0x64>
100140c6:	2a00      	cmp	r2, #0
100140c8:	d109      	bne.n	100140de <__gesf2+0x36>
100140ca:	426e      	negs	r6, r5
100140cc:	416e      	adcs	r6, r5
100140ce:	2800      	cmp	r0, #0
100140d0:	d10f      	bne.n	100140f2 <__gesf2+0x4a>
100140d2:	2c00      	cmp	r4, #0
100140d4:	d10d      	bne.n	100140f2 <__gesf2+0x4a>
100140d6:	2000      	movs	r0, #0
100140d8:	2d00      	cmp	r5, #0
100140da:	d009      	beq.n	100140f0 <__gesf2+0x48>
100140dc:	e005      	b.n	100140ea <__gesf2+0x42>
100140de:	2800      	cmp	r0, #0
100140e0:	d101      	bne.n	100140e6 <__gesf2+0x3e>
100140e2:	2c00      	cmp	r4, #0
100140e4:	d001      	beq.n	100140ea <__gesf2+0x42>
100140e6:	428b      	cmp	r3, r1
100140e8:	d013      	beq.n	10014112 <__gesf2+0x6a>
100140ea:	4258      	negs	r0, r3
100140ec:	2301      	movs	r3, #1
100140ee:	4318      	orrs	r0, r3
100140f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100140f2:	2e00      	cmp	r6, #0
100140f4:	d0f7      	beq.n	100140e6 <__gesf2+0x3e>
100140f6:	4248      	negs	r0, r1
100140f8:	4141      	adcs	r1, r0
100140fa:	2001      	movs	r0, #1
100140fc:	4249      	negs	r1, r1
100140fe:	4308      	orrs	r0, r1
10014100:	e7f6      	b.n	100140f0 <__gesf2+0x48>
10014102:	2d00      	cmp	r5, #0
10014104:	d0dd      	beq.n	100140c2 <__gesf2+0x1a>
10014106:	2002      	movs	r0, #2
10014108:	4240      	negs	r0, r0
1001410a:	e7f1      	b.n	100140f0 <__gesf2+0x48>
1001410c:	2c00      	cmp	r4, #0
1001410e:	d0da      	beq.n	100140c6 <__gesf2+0x1e>
10014110:	e7f9      	b.n	10014106 <__gesf2+0x5e>
10014112:	4282      	cmp	r2, r0
10014114:	dce9      	bgt.n	100140ea <__gesf2+0x42>
10014116:	db04      	blt.n	10014122 <__gesf2+0x7a>
10014118:	42a5      	cmp	r5, r4
1001411a:	d8e6      	bhi.n	100140ea <__gesf2+0x42>
1001411c:	2000      	movs	r0, #0
1001411e:	42a5      	cmp	r5, r4
10014120:	d2e6      	bcs.n	100140f0 <__gesf2+0x48>
10014122:	4258      	negs	r0, r3
10014124:	4143      	adcs	r3, r0
10014126:	2001      	movs	r0, #1
10014128:	425b      	negs	r3, r3
1001412a:	4318      	orrs	r0, r3
1001412c:	e7e0      	b.n	100140f0 <__gesf2+0x48>
1001412e:	46c0      	nop			; (mov r8, r8)

10014130 <__lesf2>:
10014130:	0243      	lsls	r3, r0, #9
10014132:	b5f0      	push	{r4, r5, r6, r7, lr}
10014134:	0042      	lsls	r2, r0, #1
10014136:	004c      	lsls	r4, r1, #1
10014138:	0a5e      	lsrs	r6, r3, #9
1001413a:	0fc3      	lsrs	r3, r0, #31
1001413c:	0248      	lsls	r0, r1, #9
1001413e:	0e12      	lsrs	r2, r2, #24
10014140:	0a45      	lsrs	r5, r0, #9
10014142:	0e24      	lsrs	r4, r4, #24
10014144:	0fc9      	lsrs	r1, r1, #31
10014146:	2aff      	cmp	r2, #255	; 0xff
10014148:	d017      	beq.n	1001417a <__lesf2+0x4a>
1001414a:	2cff      	cmp	r4, #255	; 0xff
1001414c:	d019      	beq.n	10014182 <__lesf2+0x52>
1001414e:	2a00      	cmp	r2, #0
10014150:	d10b      	bne.n	1001416a <__lesf2+0x3a>
10014152:	4270      	negs	r0, r6
10014154:	4170      	adcs	r0, r6
10014156:	2c00      	cmp	r4, #0
10014158:	d017      	beq.n	1001418a <__lesf2+0x5a>
1001415a:	2800      	cmp	r0, #0
1001415c:	d007      	beq.n	1001416e <__lesf2+0x3e>
1001415e:	4248      	negs	r0, r1
10014160:	4141      	adcs	r1, r0
10014162:	2001      	movs	r0, #1
10014164:	4249      	negs	r1, r1
10014166:	4308      	orrs	r0, r1
10014168:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001416a:	2c00      	cmp	r4, #0
1001416c:	d013      	beq.n	10014196 <__lesf2+0x66>
1001416e:	428b      	cmp	r3, r1
10014170:	d014      	beq.n	1001419c <__lesf2+0x6c>
10014172:	4258      	negs	r0, r3
10014174:	2301      	movs	r3, #1
10014176:	4318      	orrs	r0, r3
10014178:	e7f6      	b.n	10014168 <__lesf2+0x38>
1001417a:	2002      	movs	r0, #2
1001417c:	2e00      	cmp	r6, #0
1001417e:	d1f3      	bne.n	10014168 <__lesf2+0x38>
10014180:	e7e3      	b.n	1001414a <__lesf2+0x1a>
10014182:	2002      	movs	r0, #2
10014184:	2d00      	cmp	r5, #0
10014186:	d1ef      	bne.n	10014168 <__lesf2+0x38>
10014188:	e7e1      	b.n	1001414e <__lesf2+0x1e>
1001418a:	2d00      	cmp	r5, #0
1001418c:	d1e5      	bne.n	1001415a <__lesf2+0x2a>
1001418e:	2000      	movs	r0, #0
10014190:	2e00      	cmp	r6, #0
10014192:	d0e9      	beq.n	10014168 <__lesf2+0x38>
10014194:	e7ed      	b.n	10014172 <__lesf2+0x42>
10014196:	2d00      	cmp	r5, #0
10014198:	d1e9      	bne.n	1001416e <__lesf2+0x3e>
1001419a:	e7ea      	b.n	10014172 <__lesf2+0x42>
1001419c:	42a2      	cmp	r2, r4
1001419e:	dce8      	bgt.n	10014172 <__lesf2+0x42>
100141a0:	db04      	blt.n	100141ac <__lesf2+0x7c>
100141a2:	42ae      	cmp	r6, r5
100141a4:	d8e5      	bhi.n	10014172 <__lesf2+0x42>
100141a6:	2000      	movs	r0, #0
100141a8:	42ae      	cmp	r6, r5
100141aa:	d2dd      	bcs.n	10014168 <__lesf2+0x38>
100141ac:	4258      	negs	r0, r3
100141ae:	4143      	adcs	r3, r0
100141b0:	2001      	movs	r0, #1
100141b2:	425b      	negs	r3, r3
100141b4:	4318      	orrs	r0, r3
100141b6:	e7d7      	b.n	10014168 <__lesf2+0x38>

100141b8 <__aeabi_fmul>:
100141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100141ba:	4657      	mov	r7, sl
100141bc:	464e      	mov	r6, r9
100141be:	4645      	mov	r5, r8
100141c0:	0043      	lsls	r3, r0, #1
100141c2:	b4e0      	push	{r5, r6, r7}
100141c4:	0246      	lsls	r6, r0, #9
100141c6:	4688      	mov	r8, r1
100141c8:	0a76      	lsrs	r6, r6, #9
100141ca:	0e1f      	lsrs	r7, r3, #24
100141cc:	0fc4      	lsrs	r4, r0, #31
100141ce:	2f00      	cmp	r7, #0
100141d0:	d047      	beq.n	10014262 <__aeabi_fmul+0xaa>
100141d2:	2fff      	cmp	r7, #255	; 0xff
100141d4:	d025      	beq.n	10014222 <__aeabi_fmul+0x6a>
100141d6:	2300      	movs	r3, #0
100141d8:	2580      	movs	r5, #128	; 0x80
100141da:	469a      	mov	sl, r3
100141dc:	4699      	mov	r9, r3
100141de:	00f6      	lsls	r6, r6, #3
100141e0:	04ed      	lsls	r5, r5, #19
100141e2:	432e      	orrs	r6, r5
100141e4:	3f7f      	subs	r7, #127	; 0x7f
100141e6:	4643      	mov	r3, r8
100141e8:	4642      	mov	r2, r8
100141ea:	025d      	lsls	r5, r3, #9
100141ec:	0fd2      	lsrs	r2, r2, #31
100141ee:	005b      	lsls	r3, r3, #1
100141f0:	0a6d      	lsrs	r5, r5, #9
100141f2:	0e1b      	lsrs	r3, r3, #24
100141f4:	4690      	mov	r8, r2
100141f6:	d040      	beq.n	1001427a <__aeabi_fmul+0xc2>
100141f8:	2bff      	cmp	r3, #255	; 0xff
100141fa:	d039      	beq.n	10014270 <__aeabi_fmul+0xb8>
100141fc:	2280      	movs	r2, #128	; 0x80
100141fe:	2000      	movs	r0, #0
10014200:	00ed      	lsls	r5, r5, #3
10014202:	04d2      	lsls	r2, r2, #19
10014204:	4315      	orrs	r5, r2
10014206:	3b7f      	subs	r3, #127	; 0x7f
10014208:	18fb      	adds	r3, r7, r3
1001420a:	4642      	mov	r2, r8
1001420c:	4657      	mov	r7, sl
1001420e:	1c59      	adds	r1, r3, #1
10014210:	4062      	eors	r2, r4
10014212:	468c      	mov	ip, r1
10014214:	4307      	orrs	r7, r0
10014216:	2f0f      	cmp	r7, #15
10014218:	d85c      	bhi.n	100142d4 <__aeabi_fmul+0x11c>
1001421a:	496f      	ldr	r1, [pc, #444]	; (100143d8 <__aeabi_fmul+0x220>)
1001421c:	00bf      	lsls	r7, r7, #2
1001421e:	59c9      	ldr	r1, [r1, r7]
10014220:	468f      	mov	pc, r1
10014222:	2e00      	cmp	r6, #0
10014224:	d145      	bne.n	100142b2 <__aeabi_fmul+0xfa>
10014226:	2308      	movs	r3, #8
10014228:	469a      	mov	sl, r3
1001422a:	3b06      	subs	r3, #6
1001422c:	4699      	mov	r9, r3
1001422e:	e7da      	b.n	100141e6 <__aeabi_fmul+0x2e>
10014230:	4642      	mov	r2, r8
10014232:	2802      	cmp	r0, #2
10014234:	d02d      	beq.n	10014292 <__aeabi_fmul+0xda>
10014236:	2803      	cmp	r0, #3
10014238:	d100      	bne.n	1001423c <__aeabi_fmul+0x84>
1001423a:	e0c3      	b.n	100143c4 <__aeabi_fmul+0x20c>
1001423c:	2801      	cmp	r0, #1
1001423e:	d000      	beq.n	10014242 <__aeabi_fmul+0x8a>
10014240:	e0a2      	b.n	10014388 <__aeabi_fmul+0x1d0>
10014242:	2500      	movs	r5, #0
10014244:	2600      	movs	r6, #0
10014246:	4002      	ands	r2, r0
10014248:	b2d4      	uxtb	r4, r2
1001424a:	0276      	lsls	r6, r6, #9
1001424c:	05ed      	lsls	r5, r5, #23
1001424e:	0a76      	lsrs	r6, r6, #9
10014250:	432e      	orrs	r6, r5
10014252:	07e4      	lsls	r4, r4, #31
10014254:	4326      	orrs	r6, r4
10014256:	0030      	movs	r0, r6
10014258:	bc1c      	pop	{r2, r3, r4}
1001425a:	4690      	mov	r8, r2
1001425c:	4699      	mov	r9, r3
1001425e:	46a2      	mov	sl, r4
10014260:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014262:	2e00      	cmp	r6, #0
10014264:	d11a      	bne.n	1001429c <__aeabi_fmul+0xe4>
10014266:	2304      	movs	r3, #4
10014268:	469a      	mov	sl, r3
1001426a:	3b03      	subs	r3, #3
1001426c:	4699      	mov	r9, r3
1001426e:	e7ba      	b.n	100141e6 <__aeabi_fmul+0x2e>
10014270:	002a      	movs	r2, r5
10014272:	1e51      	subs	r1, r2, #1
10014274:	418a      	sbcs	r2, r1
10014276:	1c90      	adds	r0, r2, #2
10014278:	e7c6      	b.n	10014208 <__aeabi_fmul+0x50>
1001427a:	2001      	movs	r0, #1
1001427c:	2d00      	cmp	r5, #0
1001427e:	d0c3      	beq.n	10014208 <__aeabi_fmul+0x50>
10014280:	0028      	movs	r0, r5
10014282:	f002 f9c1 	bl	10016608 <__clzsi2>
10014286:	1f43      	subs	r3, r0, #5
10014288:	3076      	adds	r0, #118	; 0x76
1001428a:	409d      	lsls	r5, r3
1001428c:	4243      	negs	r3, r0
1001428e:	2000      	movs	r0, #0
10014290:	e7ba      	b.n	10014208 <__aeabi_fmul+0x50>
10014292:	2401      	movs	r4, #1
10014294:	25ff      	movs	r5, #255	; 0xff
10014296:	4014      	ands	r4, r2
10014298:	2600      	movs	r6, #0
1001429a:	e7d6      	b.n	1001424a <__aeabi_fmul+0x92>
1001429c:	0030      	movs	r0, r6
1001429e:	f002 f9b3 	bl	10016608 <__clzsi2>
100142a2:	1f43      	subs	r3, r0, #5
100142a4:	409e      	lsls	r6, r3
100142a6:	2300      	movs	r3, #0
100142a8:	3076      	adds	r0, #118	; 0x76
100142aa:	4247      	negs	r7, r0
100142ac:	469a      	mov	sl, r3
100142ae:	4699      	mov	r9, r3
100142b0:	e799      	b.n	100141e6 <__aeabi_fmul+0x2e>
100142b2:	230c      	movs	r3, #12
100142b4:	469a      	mov	sl, r3
100142b6:	3b09      	subs	r3, #9
100142b8:	4699      	mov	r9, r3
100142ba:	e794      	b.n	100141e6 <__aeabi_fmul+0x2e>
100142bc:	2680      	movs	r6, #128	; 0x80
100142be:	2400      	movs	r4, #0
100142c0:	03f6      	lsls	r6, r6, #15
100142c2:	25ff      	movs	r5, #255	; 0xff
100142c4:	e7c1      	b.n	1001424a <__aeabi_fmul+0x92>
100142c6:	0035      	movs	r5, r6
100142c8:	4648      	mov	r0, r9
100142ca:	e7b2      	b.n	10014232 <__aeabi_fmul+0x7a>
100142cc:	0035      	movs	r5, r6
100142ce:	0022      	movs	r2, r4
100142d0:	4648      	mov	r0, r9
100142d2:	e7ae      	b.n	10014232 <__aeabi_fmul+0x7a>
100142d4:	0429      	lsls	r1, r5, #16
100142d6:	0c09      	lsrs	r1, r1, #16
100142d8:	0008      	movs	r0, r1
100142da:	0c37      	lsrs	r7, r6, #16
100142dc:	0436      	lsls	r6, r6, #16
100142de:	0c36      	lsrs	r6, r6, #16
100142e0:	0c2c      	lsrs	r4, r5, #16
100142e2:	4379      	muls	r1, r7
100142e4:	4370      	muls	r0, r6
100142e6:	4367      	muls	r7, r4
100142e8:	4374      	muls	r4, r6
100142ea:	0c06      	lsrs	r6, r0, #16
100142ec:	1864      	adds	r4, r4, r1
100142ee:	1936      	adds	r6, r6, r4
100142f0:	42b1      	cmp	r1, r6
100142f2:	d903      	bls.n	100142fc <__aeabi_fmul+0x144>
100142f4:	2180      	movs	r1, #128	; 0x80
100142f6:	0249      	lsls	r1, r1, #9
100142f8:	4688      	mov	r8, r1
100142fa:	4447      	add	r7, r8
100142fc:	0400      	lsls	r0, r0, #16
100142fe:	0c00      	lsrs	r0, r0, #16
10014300:	0431      	lsls	r1, r6, #16
10014302:	1809      	adds	r1, r1, r0
10014304:	018d      	lsls	r5, r1, #6
10014306:	1e68      	subs	r0, r5, #1
10014308:	4185      	sbcs	r5, r0
1001430a:	0e89      	lsrs	r1, r1, #26
1001430c:	4329      	orrs	r1, r5
1001430e:	0c35      	lsrs	r5, r6, #16
10014310:	19ed      	adds	r5, r5, r7
10014312:	01ad      	lsls	r5, r5, #6
10014314:	430d      	orrs	r5, r1
10014316:	0129      	lsls	r1, r5, #4
10014318:	d504      	bpl.n	10014324 <__aeabi_fmul+0x16c>
1001431a:	2301      	movs	r3, #1
1001431c:	0869      	lsrs	r1, r5, #1
1001431e:	401d      	ands	r5, r3
10014320:	4663      	mov	r3, ip
10014322:	430d      	orrs	r5, r1
10014324:	0019      	movs	r1, r3
10014326:	317f      	adds	r1, #127	; 0x7f
10014328:	2900      	cmp	r1, #0
1001432a:	dd25      	ble.n	10014378 <__aeabi_fmul+0x1c0>
1001432c:	0768      	lsls	r0, r5, #29
1001432e:	d004      	beq.n	1001433a <__aeabi_fmul+0x182>
10014330:	200f      	movs	r0, #15
10014332:	4028      	ands	r0, r5
10014334:	2804      	cmp	r0, #4
10014336:	d000      	beq.n	1001433a <__aeabi_fmul+0x182>
10014338:	3504      	adds	r5, #4
1001433a:	0128      	lsls	r0, r5, #4
1001433c:	d503      	bpl.n	10014346 <__aeabi_fmul+0x18e>
1001433e:	4927      	ldr	r1, [pc, #156]	; (100143dc <__aeabi_fmul+0x224>)
10014340:	3380      	adds	r3, #128	; 0x80
10014342:	400d      	ands	r5, r1
10014344:	0019      	movs	r1, r3
10014346:	29fe      	cmp	r1, #254	; 0xfe
10014348:	dca3      	bgt.n	10014292 <__aeabi_fmul+0xda>
1001434a:	2401      	movs	r4, #1
1001434c:	01ad      	lsls	r5, r5, #6
1001434e:	0a6e      	lsrs	r6, r5, #9
10014350:	4014      	ands	r4, r2
10014352:	b2cd      	uxtb	r5, r1
10014354:	e779      	b.n	1001424a <__aeabi_fmul+0x92>
10014356:	2080      	movs	r0, #128	; 0x80
10014358:	03c0      	lsls	r0, r0, #15
1001435a:	4206      	tst	r6, r0
1001435c:	d007      	beq.n	1001436e <__aeabi_fmul+0x1b6>
1001435e:	4205      	tst	r5, r0
10014360:	d105      	bne.n	1001436e <__aeabi_fmul+0x1b6>
10014362:	4328      	orrs	r0, r5
10014364:	0246      	lsls	r6, r0, #9
10014366:	0a76      	lsrs	r6, r6, #9
10014368:	4644      	mov	r4, r8
1001436a:	25ff      	movs	r5, #255	; 0xff
1001436c:	e76d      	b.n	1001424a <__aeabi_fmul+0x92>
1001436e:	4306      	orrs	r6, r0
10014370:	0276      	lsls	r6, r6, #9
10014372:	0a76      	lsrs	r6, r6, #9
10014374:	25ff      	movs	r5, #255	; 0xff
10014376:	e768      	b.n	1001424a <__aeabi_fmul+0x92>
10014378:	2401      	movs	r4, #1
1001437a:	1a61      	subs	r1, r4, r1
1001437c:	291b      	cmp	r1, #27
1001437e:	dd05      	ble.n	1001438c <__aeabi_fmul+0x1d4>
10014380:	4014      	ands	r4, r2
10014382:	2500      	movs	r5, #0
10014384:	2600      	movs	r6, #0
10014386:	e760      	b.n	1001424a <__aeabi_fmul+0x92>
10014388:	4663      	mov	r3, ip
1001438a:	e7cb      	b.n	10014324 <__aeabi_fmul+0x16c>
1001438c:	002e      	movs	r6, r5
1001438e:	2320      	movs	r3, #32
10014390:	40ce      	lsrs	r6, r1
10014392:	1a59      	subs	r1, r3, r1
10014394:	408d      	lsls	r5, r1
10014396:	1e6b      	subs	r3, r5, #1
10014398:	419d      	sbcs	r5, r3
1001439a:	432e      	orrs	r6, r5
1001439c:	0773      	lsls	r3, r6, #29
1001439e:	d004      	beq.n	100143aa <__aeabi_fmul+0x1f2>
100143a0:	230f      	movs	r3, #15
100143a2:	4033      	ands	r3, r6
100143a4:	2b04      	cmp	r3, #4
100143a6:	d000      	beq.n	100143aa <__aeabi_fmul+0x1f2>
100143a8:	3604      	adds	r6, #4
100143aa:	0173      	lsls	r3, r6, #5
100143ac:	d504      	bpl.n	100143b8 <__aeabi_fmul+0x200>
100143ae:	2401      	movs	r4, #1
100143b0:	2501      	movs	r5, #1
100143b2:	4014      	ands	r4, r2
100143b4:	2600      	movs	r6, #0
100143b6:	e748      	b.n	1001424a <__aeabi_fmul+0x92>
100143b8:	2401      	movs	r4, #1
100143ba:	01b6      	lsls	r6, r6, #6
100143bc:	0a76      	lsrs	r6, r6, #9
100143be:	4014      	ands	r4, r2
100143c0:	2500      	movs	r5, #0
100143c2:	e742      	b.n	1001424a <__aeabi_fmul+0x92>
100143c4:	2680      	movs	r6, #128	; 0x80
100143c6:	2401      	movs	r4, #1
100143c8:	03f6      	lsls	r6, r6, #15
100143ca:	432e      	orrs	r6, r5
100143cc:	0276      	lsls	r6, r6, #9
100143ce:	0a76      	lsrs	r6, r6, #9
100143d0:	4014      	ands	r4, r2
100143d2:	25ff      	movs	r5, #255	; 0xff
100143d4:	e739      	b.n	1001424a <__aeabi_fmul+0x92>
100143d6:	46c0      	nop			; (mov r8, r8)
100143d8:	100191b0 	.word	0x100191b0
100143dc:	f7ffffff 	.word	0xf7ffffff

100143e0 <__aeabi_fsub>:
100143e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100143e2:	024a      	lsls	r2, r1, #9
100143e4:	004e      	lsls	r6, r1, #1
100143e6:	0243      	lsls	r3, r0, #9
100143e8:	0044      	lsls	r4, r0, #1
100143ea:	0e24      	lsrs	r4, r4, #24
100143ec:	0fc5      	lsrs	r5, r0, #31
100143ee:	099b      	lsrs	r3, r3, #6
100143f0:	0e36      	lsrs	r6, r6, #24
100143f2:	0fc9      	lsrs	r1, r1, #31
100143f4:	0992      	lsrs	r2, r2, #6
100143f6:	2eff      	cmp	r6, #255	; 0xff
100143f8:	d100      	bne.n	100143fc <__aeabi_fsub+0x1c>
100143fa:	e083      	b.n	10014504 <__aeabi_fsub+0x124>
100143fc:	2001      	movs	r0, #1
100143fe:	4041      	eors	r1, r0
10014400:	1ba0      	subs	r0, r4, r6
10014402:	42a9      	cmp	r1, r5
10014404:	d05c      	beq.n	100144c0 <__aeabi_fsub+0xe0>
10014406:	2800      	cmp	r0, #0
10014408:	dc00      	bgt.n	1001440c <__aeabi_fsub+0x2c>
1001440a:	e095      	b.n	10014538 <__aeabi_fsub+0x158>
1001440c:	2e00      	cmp	r6, #0
1001440e:	d11c      	bne.n	1001444a <__aeabi_fsub+0x6a>
10014410:	2a00      	cmp	r2, #0
10014412:	d000      	beq.n	10014416 <__aeabi_fsub+0x36>
10014414:	e081      	b.n	1001451a <__aeabi_fsub+0x13a>
10014416:	075a      	lsls	r2, r3, #29
10014418:	d004      	beq.n	10014424 <__aeabi_fsub+0x44>
1001441a:	220f      	movs	r2, #15
1001441c:	401a      	ands	r2, r3
1001441e:	2a04      	cmp	r2, #4
10014420:	d000      	beq.n	10014424 <__aeabi_fsub+0x44>
10014422:	3304      	adds	r3, #4
10014424:	015a      	lsls	r2, r3, #5
10014426:	d53b      	bpl.n	100144a0 <__aeabi_fsub+0xc0>
10014428:	3401      	adds	r4, #1
1001442a:	2cff      	cmp	r4, #255	; 0xff
1001442c:	d100      	bne.n	10014430 <__aeabi_fsub+0x50>
1001442e:	e091      	b.n	10014554 <__aeabi_fsub+0x174>
10014430:	2001      	movs	r0, #1
10014432:	019b      	lsls	r3, r3, #6
10014434:	0a5b      	lsrs	r3, r3, #9
10014436:	b2e4      	uxtb	r4, r4
10014438:	4005      	ands	r5, r0
1001443a:	025b      	lsls	r3, r3, #9
1001443c:	05e4      	lsls	r4, r4, #23
1001443e:	0a5b      	lsrs	r3, r3, #9
10014440:	07ed      	lsls	r5, r5, #31
10014442:	4323      	orrs	r3, r4
10014444:	432b      	orrs	r3, r5
10014446:	0018      	movs	r0, r3
10014448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001444a:	2cff      	cmp	r4, #255	; 0xff
1001444c:	d0e3      	beq.n	10014416 <__aeabi_fsub+0x36>
1001444e:	2180      	movs	r1, #128	; 0x80
10014450:	04c9      	lsls	r1, r1, #19
10014452:	430a      	orrs	r2, r1
10014454:	281b      	cmp	r0, #27
10014456:	dd00      	ble.n	1001445a <__aeabi_fsub+0x7a>
10014458:	e090      	b.n	1001457c <__aeabi_fsub+0x19c>
1001445a:	0016      	movs	r6, r2
1001445c:	2120      	movs	r1, #32
1001445e:	40c6      	lsrs	r6, r0
10014460:	1a08      	subs	r0, r1, r0
10014462:	4082      	lsls	r2, r0
10014464:	1e51      	subs	r1, r2, #1
10014466:	418a      	sbcs	r2, r1
10014468:	4332      	orrs	r2, r6
1001446a:	1a9b      	subs	r3, r3, r2
1001446c:	015a      	lsls	r2, r3, #5
1001446e:	d515      	bpl.n	1001449c <__aeabi_fsub+0xbc>
10014470:	019b      	lsls	r3, r3, #6
10014472:	099e      	lsrs	r6, r3, #6
10014474:	0030      	movs	r0, r6
10014476:	f002 f8c7 	bl	10016608 <__clzsi2>
1001447a:	3805      	subs	r0, #5
1001447c:	4086      	lsls	r6, r0
1001447e:	4284      	cmp	r4, r0
10014480:	dc6c      	bgt.n	1001455c <__aeabi_fsub+0x17c>
10014482:	1b04      	subs	r4, r0, r4
10014484:	0033      	movs	r3, r6
10014486:	2020      	movs	r0, #32
10014488:	3401      	adds	r4, #1
1001448a:	40e3      	lsrs	r3, r4
1001448c:	1b04      	subs	r4, r0, r4
1001448e:	40a6      	lsls	r6, r4
10014490:	1e72      	subs	r2, r6, #1
10014492:	4196      	sbcs	r6, r2
10014494:	2400      	movs	r4, #0
10014496:	4333      	orrs	r3, r6
10014498:	e7bd      	b.n	10014416 <__aeabi_fsub+0x36>
1001449a:	000d      	movs	r5, r1
1001449c:	075a      	lsls	r2, r3, #29
1001449e:	d1bc      	bne.n	1001441a <__aeabi_fsub+0x3a>
100144a0:	08df      	lsrs	r7, r3, #3
100144a2:	2301      	movs	r3, #1
100144a4:	401d      	ands	r5, r3
100144a6:	2cff      	cmp	r4, #255	; 0xff
100144a8:	d133      	bne.n	10014512 <__aeabi_fsub+0x132>
100144aa:	2f00      	cmp	r7, #0
100144ac:	d100      	bne.n	100144b0 <__aeabi_fsub+0xd0>
100144ae:	e090      	b.n	100145d2 <__aeabi_fsub+0x1f2>
100144b0:	2280      	movs	r2, #128	; 0x80
100144b2:	03d2      	lsls	r2, r2, #15
100144b4:	0013      	movs	r3, r2
100144b6:	433b      	orrs	r3, r7
100144b8:	025b      	lsls	r3, r3, #9
100144ba:	0a5b      	lsrs	r3, r3, #9
100144bc:	24ff      	movs	r4, #255	; 0xff
100144be:	e7bc      	b.n	1001443a <__aeabi_fsub+0x5a>
100144c0:	2800      	cmp	r0, #0
100144c2:	dd4f      	ble.n	10014564 <__aeabi_fsub+0x184>
100144c4:	2e00      	cmp	r6, #0
100144c6:	d02e      	beq.n	10014526 <__aeabi_fsub+0x146>
100144c8:	2cff      	cmp	r4, #255	; 0xff
100144ca:	d0a4      	beq.n	10014416 <__aeabi_fsub+0x36>
100144cc:	2580      	movs	r5, #128	; 0x80
100144ce:	04ed      	lsls	r5, r5, #19
100144d0:	432a      	orrs	r2, r5
100144d2:	281b      	cmp	r0, #27
100144d4:	dd00      	ble.n	100144d8 <__aeabi_fsub+0xf8>
100144d6:	e097      	b.n	10014608 <__aeabi_fsub+0x228>
100144d8:	0016      	movs	r6, r2
100144da:	2520      	movs	r5, #32
100144dc:	40c6      	lsrs	r6, r0
100144de:	1a28      	subs	r0, r5, r0
100144e0:	4082      	lsls	r2, r0
100144e2:	1e50      	subs	r0, r2, #1
100144e4:	4182      	sbcs	r2, r0
100144e6:	4332      	orrs	r2, r6
100144e8:	189b      	adds	r3, r3, r2
100144ea:	015a      	lsls	r2, r3, #5
100144ec:	d5d5      	bpl.n	1001449a <__aeabi_fsub+0xba>
100144ee:	3401      	adds	r4, #1
100144f0:	2cff      	cmp	r4, #255	; 0xff
100144f2:	d06d      	beq.n	100145d0 <__aeabi_fsub+0x1f0>
100144f4:	2201      	movs	r2, #1
100144f6:	487b      	ldr	r0, [pc, #492]	; (100146e4 <__aeabi_fsub+0x304>)
100144f8:	401a      	ands	r2, r3
100144fa:	085b      	lsrs	r3, r3, #1
100144fc:	4003      	ands	r3, r0
100144fe:	4313      	orrs	r3, r2
10014500:	000d      	movs	r5, r1
10014502:	e788      	b.n	10014416 <__aeabi_fsub+0x36>
10014504:	2a00      	cmp	r2, #0
10014506:	d000      	beq.n	1001450a <__aeabi_fsub+0x12a>
10014508:	e77a      	b.n	10014400 <__aeabi_fsub+0x20>
1001450a:	e777      	b.n	100143fc <__aeabi_fsub+0x1c>
1001450c:	1e03      	subs	r3, r0, #0
1001450e:	d1c5      	bne.n	1001449c <__aeabi_fsub+0xbc>
10014510:	2500      	movs	r5, #0
10014512:	027b      	lsls	r3, r7, #9
10014514:	0a5b      	lsrs	r3, r3, #9
10014516:	b2e4      	uxtb	r4, r4
10014518:	e78f      	b.n	1001443a <__aeabi_fsub+0x5a>
1001451a:	3801      	subs	r0, #1
1001451c:	2800      	cmp	r0, #0
1001451e:	d0a4      	beq.n	1001446a <__aeabi_fsub+0x8a>
10014520:	2cff      	cmp	r4, #255	; 0xff
10014522:	d197      	bne.n	10014454 <__aeabi_fsub+0x74>
10014524:	e777      	b.n	10014416 <__aeabi_fsub+0x36>
10014526:	2a00      	cmp	r2, #0
10014528:	d100      	bne.n	1001452c <__aeabi_fsub+0x14c>
1001452a:	e774      	b.n	10014416 <__aeabi_fsub+0x36>
1001452c:	3801      	subs	r0, #1
1001452e:	2800      	cmp	r0, #0
10014530:	d0da      	beq.n	100144e8 <__aeabi_fsub+0x108>
10014532:	2cff      	cmp	r4, #255	; 0xff
10014534:	d1cd      	bne.n	100144d2 <__aeabi_fsub+0xf2>
10014536:	e76e      	b.n	10014416 <__aeabi_fsub+0x36>
10014538:	2800      	cmp	r0, #0
1001453a:	d121      	bne.n	10014580 <__aeabi_fsub+0x1a0>
1001453c:	1c60      	adds	r0, r4, #1
1001453e:	b2c0      	uxtb	r0, r0
10014540:	2801      	cmp	r0, #1
10014542:	dd58      	ble.n	100145f6 <__aeabi_fsub+0x216>
10014544:	2780      	movs	r7, #128	; 0x80
10014546:	1a9e      	subs	r6, r3, r2
10014548:	04ff      	lsls	r7, r7, #19
1001454a:	4037      	ands	r7, r6
1001454c:	d02f      	beq.n	100145ae <__aeabi_fsub+0x1ce>
1001454e:	1ad6      	subs	r6, r2, r3
10014550:	000d      	movs	r5, r1
10014552:	e78f      	b.n	10014474 <__aeabi_fsub+0x94>
10014554:	2301      	movs	r3, #1
10014556:	401d      	ands	r5, r3
10014558:	2300      	movs	r3, #0
1001455a:	e76e      	b.n	1001443a <__aeabi_fsub+0x5a>
1001455c:	4b62      	ldr	r3, [pc, #392]	; (100146e8 <__aeabi_fsub+0x308>)
1001455e:	1a24      	subs	r4, r4, r0
10014560:	4033      	ands	r3, r6
10014562:	e758      	b.n	10014416 <__aeabi_fsub+0x36>
10014564:	2800      	cmp	r0, #0
10014566:	d151      	bne.n	1001460c <__aeabi_fsub+0x22c>
10014568:	1c60      	adds	r0, r4, #1
1001456a:	b2c6      	uxtb	r6, r0
1001456c:	2e01      	cmp	r6, #1
1001456e:	dd33      	ble.n	100145d8 <__aeabi_fsub+0x1f8>
10014570:	28ff      	cmp	r0, #255	; 0xff
10014572:	d02d      	beq.n	100145d0 <__aeabi_fsub+0x1f0>
10014574:	189b      	adds	r3, r3, r2
10014576:	085b      	lsrs	r3, r3, #1
10014578:	0004      	movs	r4, r0
1001457a:	e74c      	b.n	10014416 <__aeabi_fsub+0x36>
1001457c:	2201      	movs	r2, #1
1001457e:	e774      	b.n	1001446a <__aeabi_fsub+0x8a>
10014580:	2c00      	cmp	r4, #0
10014582:	d01a      	beq.n	100145ba <__aeabi_fsub+0x1da>
10014584:	2eff      	cmp	r6, #255	; 0xff
10014586:	d01f      	beq.n	100145c8 <__aeabi_fsub+0x1e8>
10014588:	2480      	movs	r4, #128	; 0x80
1001458a:	04e4      	lsls	r4, r4, #19
1001458c:	4240      	negs	r0, r0
1001458e:	4323      	orrs	r3, r4
10014590:	281b      	cmp	r0, #27
10014592:	dd00      	ble.n	10014596 <__aeabi_fsub+0x1b6>
10014594:	e096      	b.n	100146c4 <__aeabi_fsub+0x2e4>
10014596:	001d      	movs	r5, r3
10014598:	2420      	movs	r4, #32
1001459a:	40c5      	lsrs	r5, r0
1001459c:	1a20      	subs	r0, r4, r0
1001459e:	4083      	lsls	r3, r0
100145a0:	1e58      	subs	r0, r3, #1
100145a2:	4183      	sbcs	r3, r0
100145a4:	432b      	orrs	r3, r5
100145a6:	1ad3      	subs	r3, r2, r3
100145a8:	0034      	movs	r4, r6
100145aa:	000d      	movs	r5, r1
100145ac:	e75e      	b.n	1001446c <__aeabi_fsub+0x8c>
100145ae:	2e00      	cmp	r6, #0
100145b0:	d000      	beq.n	100145b4 <__aeabi_fsub+0x1d4>
100145b2:	e75f      	b.n	10014474 <__aeabi_fsub+0x94>
100145b4:	2500      	movs	r5, #0
100145b6:	2400      	movs	r4, #0
100145b8:	e7ab      	b.n	10014512 <__aeabi_fsub+0x132>
100145ba:	2b00      	cmp	r3, #0
100145bc:	d044      	beq.n	10014648 <__aeabi_fsub+0x268>
100145be:	43c0      	mvns	r0, r0
100145c0:	2800      	cmp	r0, #0
100145c2:	d0f0      	beq.n	100145a6 <__aeabi_fsub+0x1c6>
100145c4:	2eff      	cmp	r6, #255	; 0xff
100145c6:	d1e3      	bne.n	10014590 <__aeabi_fsub+0x1b0>
100145c8:	0013      	movs	r3, r2
100145ca:	24ff      	movs	r4, #255	; 0xff
100145cc:	000d      	movs	r5, r1
100145ce:	e722      	b.n	10014416 <__aeabi_fsub+0x36>
100145d0:	000d      	movs	r5, r1
100145d2:	24ff      	movs	r4, #255	; 0xff
100145d4:	2300      	movs	r3, #0
100145d6:	e730      	b.n	1001443a <__aeabi_fsub+0x5a>
100145d8:	2c00      	cmp	r4, #0
100145da:	d15d      	bne.n	10014698 <__aeabi_fsub+0x2b8>
100145dc:	2b00      	cmp	r3, #0
100145de:	d07d      	beq.n	100146dc <__aeabi_fsub+0x2fc>
100145e0:	2a00      	cmp	r2, #0
100145e2:	d100      	bne.n	100145e6 <__aeabi_fsub+0x206>
100145e4:	e717      	b.n	10014416 <__aeabi_fsub+0x36>
100145e6:	189b      	adds	r3, r3, r2
100145e8:	015a      	lsls	r2, r3, #5
100145ea:	d400      	bmi.n	100145ee <__aeabi_fsub+0x20e>
100145ec:	e756      	b.n	1001449c <__aeabi_fsub+0xbc>
100145ee:	4a3e      	ldr	r2, [pc, #248]	; (100146e8 <__aeabi_fsub+0x308>)
100145f0:	0004      	movs	r4, r0
100145f2:	4013      	ands	r3, r2
100145f4:	e70f      	b.n	10014416 <__aeabi_fsub+0x36>
100145f6:	2c00      	cmp	r4, #0
100145f8:	d11e      	bne.n	10014638 <__aeabi_fsub+0x258>
100145fa:	2b00      	cmp	r3, #0
100145fc:	d12f      	bne.n	1001465e <__aeabi_fsub+0x27e>
100145fe:	2a00      	cmp	r2, #0
10014600:	d065      	beq.n	100146ce <__aeabi_fsub+0x2ee>
10014602:	0013      	movs	r3, r2
10014604:	000d      	movs	r5, r1
10014606:	e706      	b.n	10014416 <__aeabi_fsub+0x36>
10014608:	2201      	movs	r2, #1
1001460a:	e76d      	b.n	100144e8 <__aeabi_fsub+0x108>
1001460c:	2c00      	cmp	r4, #0
1001460e:	d11f      	bne.n	10014650 <__aeabi_fsub+0x270>
10014610:	2b00      	cmp	r3, #0
10014612:	d059      	beq.n	100146c8 <__aeabi_fsub+0x2e8>
10014614:	43c0      	mvns	r0, r0
10014616:	2800      	cmp	r0, #0
10014618:	d00b      	beq.n	10014632 <__aeabi_fsub+0x252>
1001461a:	2eff      	cmp	r6, #255	; 0xff
1001461c:	d04f      	beq.n	100146be <__aeabi_fsub+0x2de>
1001461e:	281b      	cmp	r0, #27
10014620:	dc5e      	bgt.n	100146e0 <__aeabi_fsub+0x300>
10014622:	001d      	movs	r5, r3
10014624:	2420      	movs	r4, #32
10014626:	40c5      	lsrs	r5, r0
10014628:	1a20      	subs	r0, r4, r0
1001462a:	4083      	lsls	r3, r0
1001462c:	1e58      	subs	r0, r3, #1
1001462e:	4183      	sbcs	r3, r0
10014630:	432b      	orrs	r3, r5
10014632:	189b      	adds	r3, r3, r2
10014634:	0034      	movs	r4, r6
10014636:	e758      	b.n	100144ea <__aeabi_fsub+0x10a>
10014638:	2b00      	cmp	r3, #0
1001463a:	d11c      	bne.n	10014676 <__aeabi_fsub+0x296>
1001463c:	2a00      	cmp	r2, #0
1001463e:	d049      	beq.n	100146d4 <__aeabi_fsub+0x2f4>
10014640:	0013      	movs	r3, r2
10014642:	000d      	movs	r5, r1
10014644:	24ff      	movs	r4, #255	; 0xff
10014646:	e6e6      	b.n	10014416 <__aeabi_fsub+0x36>
10014648:	0013      	movs	r3, r2
1001464a:	0034      	movs	r4, r6
1001464c:	000d      	movs	r5, r1
1001464e:	e6e2      	b.n	10014416 <__aeabi_fsub+0x36>
10014650:	2eff      	cmp	r6, #255	; 0xff
10014652:	d034      	beq.n	100146be <__aeabi_fsub+0x2de>
10014654:	2480      	movs	r4, #128	; 0x80
10014656:	04e4      	lsls	r4, r4, #19
10014658:	4240      	negs	r0, r0
1001465a:	4323      	orrs	r3, r4
1001465c:	e7df      	b.n	1001461e <__aeabi_fsub+0x23e>
1001465e:	2a00      	cmp	r2, #0
10014660:	d100      	bne.n	10014664 <__aeabi_fsub+0x284>
10014662:	e6d8      	b.n	10014416 <__aeabi_fsub+0x36>
10014664:	2780      	movs	r7, #128	; 0x80
10014666:	1a98      	subs	r0, r3, r2
10014668:	04ff      	lsls	r7, r7, #19
1001466a:	4007      	ands	r7, r0
1001466c:	d100      	bne.n	10014670 <__aeabi_fsub+0x290>
1001466e:	e74d      	b.n	1001450c <__aeabi_fsub+0x12c>
10014670:	1ad3      	subs	r3, r2, r3
10014672:	000d      	movs	r5, r1
10014674:	e6cf      	b.n	10014416 <__aeabi_fsub+0x36>
10014676:	24ff      	movs	r4, #255	; 0xff
10014678:	2a00      	cmp	r2, #0
1001467a:	d100      	bne.n	1001467e <__aeabi_fsub+0x29e>
1001467c:	e6cb      	b.n	10014416 <__aeabi_fsub+0x36>
1001467e:	2080      	movs	r0, #128	; 0x80
10014680:	08db      	lsrs	r3, r3, #3
10014682:	03c0      	lsls	r0, r0, #15
10014684:	4203      	tst	r3, r0
10014686:	d004      	beq.n	10014692 <__aeabi_fsub+0x2b2>
10014688:	08d2      	lsrs	r2, r2, #3
1001468a:	4202      	tst	r2, r0
1001468c:	d101      	bne.n	10014692 <__aeabi_fsub+0x2b2>
1001468e:	0013      	movs	r3, r2
10014690:	000d      	movs	r5, r1
10014692:	00db      	lsls	r3, r3, #3
10014694:	24ff      	movs	r4, #255	; 0xff
10014696:	e6be      	b.n	10014416 <__aeabi_fsub+0x36>
10014698:	2b00      	cmp	r3, #0
1001469a:	d010      	beq.n	100146be <__aeabi_fsub+0x2de>
1001469c:	24ff      	movs	r4, #255	; 0xff
1001469e:	2a00      	cmp	r2, #0
100146a0:	d100      	bne.n	100146a4 <__aeabi_fsub+0x2c4>
100146a2:	e6b8      	b.n	10014416 <__aeabi_fsub+0x36>
100146a4:	2080      	movs	r0, #128	; 0x80
100146a6:	08db      	lsrs	r3, r3, #3
100146a8:	03c0      	lsls	r0, r0, #15
100146aa:	4203      	tst	r3, r0
100146ac:	d003      	beq.n	100146b6 <__aeabi_fsub+0x2d6>
100146ae:	08d2      	lsrs	r2, r2, #3
100146b0:	4202      	tst	r2, r0
100146b2:	d100      	bne.n	100146b6 <__aeabi_fsub+0x2d6>
100146b4:	0013      	movs	r3, r2
100146b6:	00db      	lsls	r3, r3, #3
100146b8:	000d      	movs	r5, r1
100146ba:	24ff      	movs	r4, #255	; 0xff
100146bc:	e6ab      	b.n	10014416 <__aeabi_fsub+0x36>
100146be:	0013      	movs	r3, r2
100146c0:	24ff      	movs	r4, #255	; 0xff
100146c2:	e6a8      	b.n	10014416 <__aeabi_fsub+0x36>
100146c4:	2301      	movs	r3, #1
100146c6:	e76e      	b.n	100145a6 <__aeabi_fsub+0x1c6>
100146c8:	0013      	movs	r3, r2
100146ca:	0034      	movs	r4, r6
100146cc:	e6a3      	b.n	10014416 <__aeabi_fsub+0x36>
100146ce:	2700      	movs	r7, #0
100146d0:	2500      	movs	r5, #0
100146d2:	e71e      	b.n	10014512 <__aeabi_fsub+0x132>
100146d4:	2780      	movs	r7, #128	; 0x80
100146d6:	2500      	movs	r5, #0
100146d8:	03ff      	lsls	r7, r7, #15
100146da:	e6e9      	b.n	100144b0 <__aeabi_fsub+0xd0>
100146dc:	0013      	movs	r3, r2
100146de:	e69a      	b.n	10014416 <__aeabi_fsub+0x36>
100146e0:	2301      	movs	r3, #1
100146e2:	e7a6      	b.n	10014632 <__aeabi_fsub+0x252>
100146e4:	7dffffff 	.word	0x7dffffff
100146e8:	fbffffff 	.word	0xfbffffff

100146ec <__aeabi_fcmpun>:
100146ec:	0243      	lsls	r3, r0, #9
100146ee:	0a5a      	lsrs	r2, r3, #9
100146f0:	0040      	lsls	r0, r0, #1
100146f2:	024b      	lsls	r3, r1, #9
100146f4:	0049      	lsls	r1, r1, #1
100146f6:	0e00      	lsrs	r0, r0, #24
100146f8:	0a5b      	lsrs	r3, r3, #9
100146fa:	0e09      	lsrs	r1, r1, #24
100146fc:	28ff      	cmp	r0, #255	; 0xff
100146fe:	d003      	beq.n	10014708 <__aeabi_fcmpun+0x1c>
10014700:	2000      	movs	r0, #0
10014702:	29ff      	cmp	r1, #255	; 0xff
10014704:	d006      	beq.n	10014714 <__aeabi_fcmpun+0x28>
10014706:	4770      	bx	lr
10014708:	38fe      	subs	r0, #254	; 0xfe
1001470a:	2a00      	cmp	r2, #0
1001470c:	d1fb      	bne.n	10014706 <__aeabi_fcmpun+0x1a>
1001470e:	2000      	movs	r0, #0
10014710:	29ff      	cmp	r1, #255	; 0xff
10014712:	d1f8      	bne.n	10014706 <__aeabi_fcmpun+0x1a>
10014714:	0018      	movs	r0, r3
10014716:	1e43      	subs	r3, r0, #1
10014718:	4198      	sbcs	r0, r3
1001471a:	e7f4      	b.n	10014706 <__aeabi_fcmpun+0x1a>

1001471c <__aeabi_f2iz>:
1001471c:	0243      	lsls	r3, r0, #9
1001471e:	0a59      	lsrs	r1, r3, #9
10014720:	0043      	lsls	r3, r0, #1
10014722:	0fc2      	lsrs	r2, r0, #31
10014724:	0e1b      	lsrs	r3, r3, #24
10014726:	2000      	movs	r0, #0
10014728:	2b7e      	cmp	r3, #126	; 0x7e
1001472a:	dd0e      	ble.n	1001474a <__aeabi_f2iz+0x2e>
1001472c:	2b9d      	cmp	r3, #157	; 0x9d
1001472e:	dc0d      	bgt.n	1001474c <__aeabi_f2iz+0x30>
10014730:	2080      	movs	r0, #128	; 0x80
10014732:	0400      	lsls	r0, r0, #16
10014734:	4301      	orrs	r1, r0
10014736:	2b95      	cmp	r3, #149	; 0x95
10014738:	dc0b      	bgt.n	10014752 <__aeabi_f2iz+0x36>
1001473a:	2096      	movs	r0, #150	; 0x96
1001473c:	1ac3      	subs	r3, r0, r3
1001473e:	40d9      	lsrs	r1, r3
10014740:	000b      	movs	r3, r1
10014742:	4258      	negs	r0, r3
10014744:	2a00      	cmp	r2, #0
10014746:	d100      	bne.n	1001474a <__aeabi_f2iz+0x2e>
10014748:	0018      	movs	r0, r3
1001474a:	4770      	bx	lr
1001474c:	4b03      	ldr	r3, [pc, #12]	; (1001475c <__aeabi_f2iz+0x40>)
1001474e:	18d0      	adds	r0, r2, r3
10014750:	e7fb      	b.n	1001474a <__aeabi_f2iz+0x2e>
10014752:	3b96      	subs	r3, #150	; 0x96
10014754:	4099      	lsls	r1, r3
10014756:	000b      	movs	r3, r1
10014758:	e7f3      	b.n	10014742 <__aeabi_f2iz+0x26>
1001475a:	46c0      	nop			; (mov r8, r8)
1001475c:	7fffffff 	.word	0x7fffffff

10014760 <__aeabi_i2f>:
10014760:	b570      	push	{r4, r5, r6, lr}
10014762:	2800      	cmp	r0, #0
10014764:	d030      	beq.n	100147c8 <__aeabi_i2f+0x68>
10014766:	17c3      	asrs	r3, r0, #31
10014768:	18c5      	adds	r5, r0, r3
1001476a:	405d      	eors	r5, r3
1001476c:	0fc4      	lsrs	r4, r0, #31
1001476e:	0028      	movs	r0, r5
10014770:	f001 ff4a 	bl	10016608 <__clzsi2>
10014774:	239e      	movs	r3, #158	; 0x9e
10014776:	1a1b      	subs	r3, r3, r0
10014778:	2b96      	cmp	r3, #150	; 0x96
1001477a:	dc0d      	bgt.n	10014798 <__aeabi_i2f+0x38>
1001477c:	2296      	movs	r2, #150	; 0x96
1001477e:	1ad2      	subs	r2, r2, r3
10014780:	4095      	lsls	r5, r2
10014782:	026a      	lsls	r2, r5, #9
10014784:	0a52      	lsrs	r2, r2, #9
10014786:	b2d8      	uxtb	r0, r3
10014788:	0252      	lsls	r2, r2, #9
1001478a:	05c0      	lsls	r0, r0, #23
1001478c:	0a52      	lsrs	r2, r2, #9
1001478e:	07e4      	lsls	r4, r4, #31
10014790:	4302      	orrs	r2, r0
10014792:	4322      	orrs	r2, r4
10014794:	0010      	movs	r0, r2
10014796:	bd70      	pop	{r4, r5, r6, pc}
10014798:	2b99      	cmp	r3, #153	; 0x99
1001479a:	dc19      	bgt.n	100147d0 <__aeabi_i2f+0x70>
1001479c:	2299      	movs	r2, #153	; 0x99
1001479e:	1ad2      	subs	r2, r2, r3
100147a0:	4095      	lsls	r5, r2
100147a2:	4a12      	ldr	r2, [pc, #72]	; (100147ec <__aeabi_i2f+0x8c>)
100147a4:	402a      	ands	r2, r5
100147a6:	0769      	lsls	r1, r5, #29
100147a8:	d004      	beq.n	100147b4 <__aeabi_i2f+0x54>
100147aa:	210f      	movs	r1, #15
100147ac:	400d      	ands	r5, r1
100147ae:	2d04      	cmp	r5, #4
100147b0:	d000      	beq.n	100147b4 <__aeabi_i2f+0x54>
100147b2:	3204      	adds	r2, #4
100147b4:	0151      	lsls	r1, r2, #5
100147b6:	d503      	bpl.n	100147c0 <__aeabi_i2f+0x60>
100147b8:	4b0c      	ldr	r3, [pc, #48]	; (100147ec <__aeabi_i2f+0x8c>)
100147ba:	401a      	ands	r2, r3
100147bc:	239f      	movs	r3, #159	; 0x9f
100147be:	1a1b      	subs	r3, r3, r0
100147c0:	0192      	lsls	r2, r2, #6
100147c2:	0a52      	lsrs	r2, r2, #9
100147c4:	b2d8      	uxtb	r0, r3
100147c6:	e7df      	b.n	10014788 <__aeabi_i2f+0x28>
100147c8:	2400      	movs	r4, #0
100147ca:	2000      	movs	r0, #0
100147cc:	2200      	movs	r2, #0
100147ce:	e7db      	b.n	10014788 <__aeabi_i2f+0x28>
100147d0:	2205      	movs	r2, #5
100147d2:	002e      	movs	r6, r5
100147d4:	1a12      	subs	r2, r2, r0
100147d6:	21b9      	movs	r1, #185	; 0xb9
100147d8:	40d6      	lsrs	r6, r2
100147da:	002a      	movs	r2, r5
100147dc:	1ac9      	subs	r1, r1, r3
100147de:	408a      	lsls	r2, r1
100147e0:	1e55      	subs	r5, r2, #1
100147e2:	41aa      	sbcs	r2, r5
100147e4:	0035      	movs	r5, r6
100147e6:	4315      	orrs	r5, r2
100147e8:	e7db      	b.n	100147a2 <__aeabi_i2f+0x42>
100147ea:	46c0      	nop			; (mov r8, r8)
100147ec:	fbffffff 	.word	0xfbffffff

100147f0 <__aeabi_ui2f>:
100147f0:	b570      	push	{r4, r5, r6, lr}
100147f2:	1e04      	subs	r4, r0, #0
100147f4:	d028      	beq.n	10014848 <__aeabi_ui2f+0x58>
100147f6:	f001 ff07 	bl	10016608 <__clzsi2>
100147fa:	239e      	movs	r3, #158	; 0x9e
100147fc:	1a1b      	subs	r3, r3, r0
100147fe:	2b96      	cmp	r3, #150	; 0x96
10014800:	dc0a      	bgt.n	10014818 <__aeabi_ui2f+0x28>
10014802:	2296      	movs	r2, #150	; 0x96
10014804:	1ad2      	subs	r2, r2, r3
10014806:	4094      	lsls	r4, r2
10014808:	0262      	lsls	r2, r4, #9
1001480a:	0a52      	lsrs	r2, r2, #9
1001480c:	b2d8      	uxtb	r0, r3
1001480e:	0252      	lsls	r2, r2, #9
10014810:	0a52      	lsrs	r2, r2, #9
10014812:	05c0      	lsls	r0, r0, #23
10014814:	4310      	orrs	r0, r2
10014816:	bd70      	pop	{r4, r5, r6, pc}
10014818:	2b99      	cmp	r3, #153	; 0x99
1001481a:	dc18      	bgt.n	1001484e <__aeabi_ui2f+0x5e>
1001481c:	2299      	movs	r2, #153	; 0x99
1001481e:	1ad2      	subs	r2, r2, r3
10014820:	4094      	lsls	r4, r2
10014822:	4a11      	ldr	r2, [pc, #68]	; (10014868 <__aeabi_ui2f+0x78>)
10014824:	4022      	ands	r2, r4
10014826:	0761      	lsls	r1, r4, #29
10014828:	d004      	beq.n	10014834 <__aeabi_ui2f+0x44>
1001482a:	210f      	movs	r1, #15
1001482c:	400c      	ands	r4, r1
1001482e:	2c04      	cmp	r4, #4
10014830:	d000      	beq.n	10014834 <__aeabi_ui2f+0x44>
10014832:	3204      	adds	r2, #4
10014834:	0151      	lsls	r1, r2, #5
10014836:	d503      	bpl.n	10014840 <__aeabi_ui2f+0x50>
10014838:	4b0b      	ldr	r3, [pc, #44]	; (10014868 <__aeabi_ui2f+0x78>)
1001483a:	401a      	ands	r2, r3
1001483c:	239f      	movs	r3, #159	; 0x9f
1001483e:	1a1b      	subs	r3, r3, r0
10014840:	0192      	lsls	r2, r2, #6
10014842:	0a52      	lsrs	r2, r2, #9
10014844:	b2d8      	uxtb	r0, r3
10014846:	e7e2      	b.n	1001480e <__aeabi_ui2f+0x1e>
10014848:	2000      	movs	r0, #0
1001484a:	2200      	movs	r2, #0
1001484c:	e7df      	b.n	1001480e <__aeabi_ui2f+0x1e>
1001484e:	2205      	movs	r2, #5
10014850:	0025      	movs	r5, r4
10014852:	1a12      	subs	r2, r2, r0
10014854:	21b9      	movs	r1, #185	; 0xb9
10014856:	40d5      	lsrs	r5, r2
10014858:	0022      	movs	r2, r4
1001485a:	1ac9      	subs	r1, r1, r3
1001485c:	408a      	lsls	r2, r1
1001485e:	1e54      	subs	r4, r2, #1
10014860:	41a2      	sbcs	r2, r4
10014862:	002c      	movs	r4, r5
10014864:	4314      	orrs	r4, r2
10014866:	e7dc      	b.n	10014822 <__aeabi_ui2f+0x32>
10014868:	fbffffff 	.word	0xfbffffff

1001486c <__aeabi_dadd>:
1001486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001486e:	4656      	mov	r6, sl
10014870:	465f      	mov	r7, fp
10014872:	464d      	mov	r5, r9
10014874:	4644      	mov	r4, r8
10014876:	b4f0      	push	{r4, r5, r6, r7}
10014878:	000f      	movs	r7, r1
1001487a:	0ffd      	lsrs	r5, r7, #31
1001487c:	46aa      	mov	sl, r5
1001487e:	0309      	lsls	r1, r1, #12
10014880:	007c      	lsls	r4, r7, #1
10014882:	002e      	movs	r6, r5
10014884:	005f      	lsls	r7, r3, #1
10014886:	0f45      	lsrs	r5, r0, #29
10014888:	0a49      	lsrs	r1, r1, #9
1001488a:	0d7f      	lsrs	r7, r7, #21
1001488c:	4329      	orrs	r1, r5
1001488e:	00c5      	lsls	r5, r0, #3
10014890:	0318      	lsls	r0, r3, #12
10014892:	46bc      	mov	ip, r7
10014894:	0a40      	lsrs	r0, r0, #9
10014896:	0f57      	lsrs	r7, r2, #29
10014898:	0d64      	lsrs	r4, r4, #21
1001489a:	0fdb      	lsrs	r3, r3, #31
1001489c:	4338      	orrs	r0, r7
1001489e:	00d2      	lsls	r2, r2, #3
100148a0:	459a      	cmp	sl, r3
100148a2:	d100      	bne.n	100148a6 <__aeabi_dadd+0x3a>
100148a4:	e0aa      	b.n	100149fc <__aeabi_dadd+0x190>
100148a6:	4666      	mov	r6, ip
100148a8:	1ba6      	subs	r6, r4, r6
100148aa:	2e00      	cmp	r6, #0
100148ac:	dc00      	bgt.n	100148b0 <__aeabi_dadd+0x44>
100148ae:	e0ff      	b.n	10014ab0 <__aeabi_dadd+0x244>
100148b0:	4663      	mov	r3, ip
100148b2:	2b00      	cmp	r3, #0
100148b4:	d139      	bne.n	1001492a <__aeabi_dadd+0xbe>
100148b6:	0003      	movs	r3, r0
100148b8:	4313      	orrs	r3, r2
100148ba:	d000      	beq.n	100148be <__aeabi_dadd+0x52>
100148bc:	e0d9      	b.n	10014a72 <__aeabi_dadd+0x206>
100148be:	076b      	lsls	r3, r5, #29
100148c0:	d009      	beq.n	100148d6 <__aeabi_dadd+0x6a>
100148c2:	230f      	movs	r3, #15
100148c4:	402b      	ands	r3, r5
100148c6:	2b04      	cmp	r3, #4
100148c8:	d005      	beq.n	100148d6 <__aeabi_dadd+0x6a>
100148ca:	1d2b      	adds	r3, r5, #4
100148cc:	42ab      	cmp	r3, r5
100148ce:	41ad      	sbcs	r5, r5
100148d0:	426d      	negs	r5, r5
100148d2:	1949      	adds	r1, r1, r5
100148d4:	001d      	movs	r5, r3
100148d6:	020b      	lsls	r3, r1, #8
100148d8:	d400      	bmi.n	100148dc <__aeabi_dadd+0x70>
100148da:	e082      	b.n	100149e2 <__aeabi_dadd+0x176>
100148dc:	4bca      	ldr	r3, [pc, #808]	; (10014c08 <__aeabi_dadd+0x39c>)
100148de:	3401      	adds	r4, #1
100148e0:	429c      	cmp	r4, r3
100148e2:	d100      	bne.n	100148e6 <__aeabi_dadd+0x7a>
100148e4:	e0fe      	b.n	10014ae4 <__aeabi_dadd+0x278>
100148e6:	000a      	movs	r2, r1
100148e8:	4656      	mov	r6, sl
100148ea:	4bc8      	ldr	r3, [pc, #800]	; (10014c0c <__aeabi_dadd+0x3a0>)
100148ec:	08ed      	lsrs	r5, r5, #3
100148ee:	401a      	ands	r2, r3
100148f0:	0750      	lsls	r0, r2, #29
100148f2:	0564      	lsls	r4, r4, #21
100148f4:	0252      	lsls	r2, r2, #9
100148f6:	4305      	orrs	r5, r0
100148f8:	0b12      	lsrs	r2, r2, #12
100148fa:	0d64      	lsrs	r4, r4, #21
100148fc:	2100      	movs	r1, #0
100148fe:	0312      	lsls	r2, r2, #12
10014900:	0d0b      	lsrs	r3, r1, #20
10014902:	051b      	lsls	r3, r3, #20
10014904:	0564      	lsls	r4, r4, #21
10014906:	0b12      	lsrs	r2, r2, #12
10014908:	431a      	orrs	r2, r3
1001490a:	0863      	lsrs	r3, r4, #1
1001490c:	4cc0      	ldr	r4, [pc, #768]	; (10014c10 <__aeabi_dadd+0x3a4>)
1001490e:	07f6      	lsls	r6, r6, #31
10014910:	4014      	ands	r4, r2
10014912:	431c      	orrs	r4, r3
10014914:	0064      	lsls	r4, r4, #1
10014916:	0864      	lsrs	r4, r4, #1
10014918:	4334      	orrs	r4, r6
1001491a:	0028      	movs	r0, r5
1001491c:	0021      	movs	r1, r4
1001491e:	bc3c      	pop	{r2, r3, r4, r5}
10014920:	4690      	mov	r8, r2
10014922:	4699      	mov	r9, r3
10014924:	46a2      	mov	sl, r4
10014926:	46ab      	mov	fp, r5
10014928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001492a:	4bb7      	ldr	r3, [pc, #732]	; (10014c08 <__aeabi_dadd+0x39c>)
1001492c:	429c      	cmp	r4, r3
1001492e:	d0c6      	beq.n	100148be <__aeabi_dadd+0x52>
10014930:	2380      	movs	r3, #128	; 0x80
10014932:	041b      	lsls	r3, r3, #16
10014934:	4318      	orrs	r0, r3
10014936:	2e38      	cmp	r6, #56	; 0x38
10014938:	dd00      	ble.n	1001493c <__aeabi_dadd+0xd0>
1001493a:	e0eb      	b.n	10014b14 <__aeabi_dadd+0x2a8>
1001493c:	2e1f      	cmp	r6, #31
1001493e:	dd00      	ble.n	10014942 <__aeabi_dadd+0xd6>
10014940:	e11e      	b.n	10014b80 <__aeabi_dadd+0x314>
10014942:	2320      	movs	r3, #32
10014944:	1b9b      	subs	r3, r3, r6
10014946:	469c      	mov	ip, r3
10014948:	0003      	movs	r3, r0
1001494a:	4667      	mov	r7, ip
1001494c:	40bb      	lsls	r3, r7
1001494e:	4698      	mov	r8, r3
10014950:	0013      	movs	r3, r2
10014952:	4647      	mov	r7, r8
10014954:	40f3      	lsrs	r3, r6
10014956:	433b      	orrs	r3, r7
10014958:	4667      	mov	r7, ip
1001495a:	40ba      	lsls	r2, r7
1001495c:	1e57      	subs	r7, r2, #1
1001495e:	41ba      	sbcs	r2, r7
10014960:	4313      	orrs	r3, r2
10014962:	0002      	movs	r2, r0
10014964:	40f2      	lsrs	r2, r6
10014966:	1aeb      	subs	r3, r5, r3
10014968:	429d      	cmp	r5, r3
1001496a:	41b6      	sbcs	r6, r6
1001496c:	001d      	movs	r5, r3
1001496e:	1a8a      	subs	r2, r1, r2
10014970:	4276      	negs	r6, r6
10014972:	1b91      	subs	r1, r2, r6
10014974:	020b      	lsls	r3, r1, #8
10014976:	d531      	bpl.n	100149dc <__aeabi_dadd+0x170>
10014978:	024a      	lsls	r2, r1, #9
1001497a:	0a56      	lsrs	r6, r2, #9
1001497c:	2e00      	cmp	r6, #0
1001497e:	d100      	bne.n	10014982 <__aeabi_dadd+0x116>
10014980:	e0b4      	b.n	10014aec <__aeabi_dadd+0x280>
10014982:	0030      	movs	r0, r6
10014984:	f001 fe40 	bl	10016608 <__clzsi2>
10014988:	0003      	movs	r3, r0
1001498a:	3b08      	subs	r3, #8
1001498c:	2b1f      	cmp	r3, #31
1001498e:	dd00      	ble.n	10014992 <__aeabi_dadd+0x126>
10014990:	e0b5      	b.n	10014afe <__aeabi_dadd+0x292>
10014992:	2220      	movs	r2, #32
10014994:	0029      	movs	r1, r5
10014996:	1ad2      	subs	r2, r2, r3
10014998:	40d1      	lsrs	r1, r2
1001499a:	409e      	lsls	r6, r3
1001499c:	000a      	movs	r2, r1
1001499e:	409d      	lsls	r5, r3
100149a0:	4332      	orrs	r2, r6
100149a2:	429c      	cmp	r4, r3
100149a4:	dd00      	ble.n	100149a8 <__aeabi_dadd+0x13c>
100149a6:	e0b1      	b.n	10014b0c <__aeabi_dadd+0x2a0>
100149a8:	1b1c      	subs	r4, r3, r4
100149aa:	1c63      	adds	r3, r4, #1
100149ac:	2b1f      	cmp	r3, #31
100149ae:	dd00      	ble.n	100149b2 <__aeabi_dadd+0x146>
100149b0:	e0d5      	b.n	10014b5e <__aeabi_dadd+0x2f2>
100149b2:	2120      	movs	r1, #32
100149b4:	0014      	movs	r4, r2
100149b6:	0028      	movs	r0, r5
100149b8:	1ac9      	subs	r1, r1, r3
100149ba:	408c      	lsls	r4, r1
100149bc:	40d8      	lsrs	r0, r3
100149be:	408d      	lsls	r5, r1
100149c0:	4304      	orrs	r4, r0
100149c2:	40da      	lsrs	r2, r3
100149c4:	1e68      	subs	r0, r5, #1
100149c6:	4185      	sbcs	r5, r0
100149c8:	0011      	movs	r1, r2
100149ca:	4325      	orrs	r5, r4
100149cc:	2400      	movs	r4, #0
100149ce:	e776      	b.n	100148be <__aeabi_dadd+0x52>
100149d0:	4641      	mov	r1, r8
100149d2:	4331      	orrs	r1, r6
100149d4:	d100      	bne.n	100149d8 <__aeabi_dadd+0x16c>
100149d6:	e234      	b.n	10014e42 <__aeabi_dadd+0x5d6>
100149d8:	0031      	movs	r1, r6
100149da:	4645      	mov	r5, r8
100149dc:	076b      	lsls	r3, r5, #29
100149de:	d000      	beq.n	100149e2 <__aeabi_dadd+0x176>
100149e0:	e76f      	b.n	100148c2 <__aeabi_dadd+0x56>
100149e2:	4656      	mov	r6, sl
100149e4:	0748      	lsls	r0, r1, #29
100149e6:	08ed      	lsrs	r5, r5, #3
100149e8:	08c9      	lsrs	r1, r1, #3
100149ea:	4305      	orrs	r5, r0
100149ec:	4b86      	ldr	r3, [pc, #536]	; (10014c08 <__aeabi_dadd+0x39c>)
100149ee:	429c      	cmp	r4, r3
100149f0:	d035      	beq.n	10014a5e <__aeabi_dadd+0x1f2>
100149f2:	030a      	lsls	r2, r1, #12
100149f4:	0564      	lsls	r4, r4, #21
100149f6:	0b12      	lsrs	r2, r2, #12
100149f8:	0d64      	lsrs	r4, r4, #21
100149fa:	e77f      	b.n	100148fc <__aeabi_dadd+0x90>
100149fc:	4663      	mov	r3, ip
100149fe:	1ae3      	subs	r3, r4, r3
10014a00:	469b      	mov	fp, r3
10014a02:	2b00      	cmp	r3, #0
10014a04:	dc00      	bgt.n	10014a08 <__aeabi_dadd+0x19c>
10014a06:	e08b      	b.n	10014b20 <__aeabi_dadd+0x2b4>
10014a08:	4667      	mov	r7, ip
10014a0a:	2f00      	cmp	r7, #0
10014a0c:	d03c      	beq.n	10014a88 <__aeabi_dadd+0x21c>
10014a0e:	4f7e      	ldr	r7, [pc, #504]	; (10014c08 <__aeabi_dadd+0x39c>)
10014a10:	42bc      	cmp	r4, r7
10014a12:	d100      	bne.n	10014a16 <__aeabi_dadd+0x1aa>
10014a14:	e753      	b.n	100148be <__aeabi_dadd+0x52>
10014a16:	2780      	movs	r7, #128	; 0x80
10014a18:	043f      	lsls	r7, r7, #16
10014a1a:	4338      	orrs	r0, r7
10014a1c:	465b      	mov	r3, fp
10014a1e:	2b38      	cmp	r3, #56	; 0x38
10014a20:	dc00      	bgt.n	10014a24 <__aeabi_dadd+0x1b8>
10014a22:	e0f7      	b.n	10014c14 <__aeabi_dadd+0x3a8>
10014a24:	4302      	orrs	r2, r0
10014a26:	1e50      	subs	r0, r2, #1
10014a28:	4182      	sbcs	r2, r0
10014a2a:	2000      	movs	r0, #0
10014a2c:	b2d2      	uxtb	r2, r2
10014a2e:	1953      	adds	r3, r2, r5
10014a30:	1842      	adds	r2, r0, r1
10014a32:	42ab      	cmp	r3, r5
10014a34:	4189      	sbcs	r1, r1
10014a36:	001d      	movs	r5, r3
10014a38:	4249      	negs	r1, r1
10014a3a:	1889      	adds	r1, r1, r2
10014a3c:	020b      	lsls	r3, r1, #8
10014a3e:	d5cd      	bpl.n	100149dc <__aeabi_dadd+0x170>
10014a40:	4b71      	ldr	r3, [pc, #452]	; (10014c08 <__aeabi_dadd+0x39c>)
10014a42:	3401      	adds	r4, #1
10014a44:	429c      	cmp	r4, r3
10014a46:	d100      	bne.n	10014a4a <__aeabi_dadd+0x1de>
10014a48:	e13d      	b.n	10014cc6 <__aeabi_dadd+0x45a>
10014a4a:	2001      	movs	r0, #1
10014a4c:	4a6f      	ldr	r2, [pc, #444]	; (10014c0c <__aeabi_dadd+0x3a0>)
10014a4e:	086b      	lsrs	r3, r5, #1
10014a50:	400a      	ands	r2, r1
10014a52:	4028      	ands	r0, r5
10014a54:	4318      	orrs	r0, r3
10014a56:	07d5      	lsls	r5, r2, #31
10014a58:	4305      	orrs	r5, r0
10014a5a:	0851      	lsrs	r1, r2, #1
10014a5c:	e72f      	b.n	100148be <__aeabi_dadd+0x52>
10014a5e:	002b      	movs	r3, r5
10014a60:	430b      	orrs	r3, r1
10014a62:	d100      	bne.n	10014a66 <__aeabi_dadd+0x1fa>
10014a64:	e1cb      	b.n	10014dfe <__aeabi_dadd+0x592>
10014a66:	2380      	movs	r3, #128	; 0x80
10014a68:	031b      	lsls	r3, r3, #12
10014a6a:	430b      	orrs	r3, r1
10014a6c:	031a      	lsls	r2, r3, #12
10014a6e:	0b12      	lsrs	r2, r2, #12
10014a70:	e744      	b.n	100148fc <__aeabi_dadd+0x90>
10014a72:	3e01      	subs	r6, #1
10014a74:	2e00      	cmp	r6, #0
10014a76:	d16d      	bne.n	10014b54 <__aeabi_dadd+0x2e8>
10014a78:	1aae      	subs	r6, r5, r2
10014a7a:	42b5      	cmp	r5, r6
10014a7c:	419b      	sbcs	r3, r3
10014a7e:	1a09      	subs	r1, r1, r0
10014a80:	425b      	negs	r3, r3
10014a82:	1ac9      	subs	r1, r1, r3
10014a84:	0035      	movs	r5, r6
10014a86:	e775      	b.n	10014974 <__aeabi_dadd+0x108>
10014a88:	0007      	movs	r7, r0
10014a8a:	4317      	orrs	r7, r2
10014a8c:	d100      	bne.n	10014a90 <__aeabi_dadd+0x224>
10014a8e:	e716      	b.n	100148be <__aeabi_dadd+0x52>
10014a90:	2301      	movs	r3, #1
10014a92:	425b      	negs	r3, r3
10014a94:	469c      	mov	ip, r3
10014a96:	44e3      	add	fp, ip
10014a98:	465b      	mov	r3, fp
10014a9a:	2b00      	cmp	r3, #0
10014a9c:	d000      	beq.n	10014aa0 <__aeabi_dadd+0x234>
10014a9e:	e0e0      	b.n	10014c62 <__aeabi_dadd+0x3f6>
10014aa0:	18aa      	adds	r2, r5, r2
10014aa2:	42aa      	cmp	r2, r5
10014aa4:	419b      	sbcs	r3, r3
10014aa6:	1809      	adds	r1, r1, r0
10014aa8:	425b      	negs	r3, r3
10014aaa:	1859      	adds	r1, r3, r1
10014aac:	0015      	movs	r5, r2
10014aae:	e7c5      	b.n	10014a3c <__aeabi_dadd+0x1d0>
10014ab0:	2e00      	cmp	r6, #0
10014ab2:	d175      	bne.n	10014ba0 <__aeabi_dadd+0x334>
10014ab4:	1c66      	adds	r6, r4, #1
10014ab6:	0576      	lsls	r6, r6, #21
10014ab8:	0d76      	lsrs	r6, r6, #21
10014aba:	2e01      	cmp	r6, #1
10014abc:	dc00      	bgt.n	10014ac0 <__aeabi_dadd+0x254>
10014abe:	e0f3      	b.n	10014ca8 <__aeabi_dadd+0x43c>
10014ac0:	1aae      	subs	r6, r5, r2
10014ac2:	46b0      	mov	r8, r6
10014ac4:	4545      	cmp	r5, r8
10014ac6:	41bf      	sbcs	r7, r7
10014ac8:	1a0e      	subs	r6, r1, r0
10014aca:	427f      	negs	r7, r7
10014acc:	1bf6      	subs	r6, r6, r7
10014ace:	0237      	lsls	r7, r6, #8
10014ad0:	d400      	bmi.n	10014ad4 <__aeabi_dadd+0x268>
10014ad2:	e08f      	b.n	10014bf4 <__aeabi_dadd+0x388>
10014ad4:	1b55      	subs	r5, r2, r5
10014ad6:	42aa      	cmp	r2, r5
10014ad8:	41b6      	sbcs	r6, r6
10014ada:	1a41      	subs	r1, r0, r1
10014adc:	4276      	negs	r6, r6
10014ade:	1b8e      	subs	r6, r1, r6
10014ae0:	469a      	mov	sl, r3
10014ae2:	e74b      	b.n	1001497c <__aeabi_dadd+0x110>
10014ae4:	4656      	mov	r6, sl
10014ae6:	2200      	movs	r2, #0
10014ae8:	2500      	movs	r5, #0
10014aea:	e707      	b.n	100148fc <__aeabi_dadd+0x90>
10014aec:	0028      	movs	r0, r5
10014aee:	f001 fd8b 	bl	10016608 <__clzsi2>
10014af2:	3020      	adds	r0, #32
10014af4:	0003      	movs	r3, r0
10014af6:	3b08      	subs	r3, #8
10014af8:	2b1f      	cmp	r3, #31
10014afa:	dc00      	bgt.n	10014afe <__aeabi_dadd+0x292>
10014afc:	e749      	b.n	10014992 <__aeabi_dadd+0x126>
10014afe:	002a      	movs	r2, r5
10014b00:	3828      	subs	r0, #40	; 0x28
10014b02:	4082      	lsls	r2, r0
10014b04:	2500      	movs	r5, #0
10014b06:	429c      	cmp	r4, r3
10014b08:	dc00      	bgt.n	10014b0c <__aeabi_dadd+0x2a0>
10014b0a:	e74d      	b.n	100149a8 <__aeabi_dadd+0x13c>
10014b0c:	493f      	ldr	r1, [pc, #252]	; (10014c0c <__aeabi_dadd+0x3a0>)
10014b0e:	1ae4      	subs	r4, r4, r3
10014b10:	4011      	ands	r1, r2
10014b12:	e6d4      	b.n	100148be <__aeabi_dadd+0x52>
10014b14:	4302      	orrs	r2, r0
10014b16:	1e50      	subs	r0, r2, #1
10014b18:	4182      	sbcs	r2, r0
10014b1a:	b2d3      	uxtb	r3, r2
10014b1c:	2200      	movs	r2, #0
10014b1e:	e722      	b.n	10014966 <__aeabi_dadd+0xfa>
10014b20:	2b00      	cmp	r3, #0
10014b22:	d000      	beq.n	10014b26 <__aeabi_dadd+0x2ba>
10014b24:	e0f3      	b.n	10014d0e <__aeabi_dadd+0x4a2>
10014b26:	1c63      	adds	r3, r4, #1
10014b28:	469c      	mov	ip, r3
10014b2a:	055b      	lsls	r3, r3, #21
10014b2c:	0d5b      	lsrs	r3, r3, #21
10014b2e:	2b01      	cmp	r3, #1
10014b30:	dc00      	bgt.n	10014b34 <__aeabi_dadd+0x2c8>
10014b32:	e09f      	b.n	10014c74 <__aeabi_dadd+0x408>
10014b34:	4b34      	ldr	r3, [pc, #208]	; (10014c08 <__aeabi_dadd+0x39c>)
10014b36:	459c      	cmp	ip, r3
10014b38:	d100      	bne.n	10014b3c <__aeabi_dadd+0x2d0>
10014b3a:	e0c3      	b.n	10014cc4 <__aeabi_dadd+0x458>
10014b3c:	18aa      	adds	r2, r5, r2
10014b3e:	1809      	adds	r1, r1, r0
10014b40:	42aa      	cmp	r2, r5
10014b42:	4180      	sbcs	r0, r0
10014b44:	4240      	negs	r0, r0
10014b46:	1841      	adds	r1, r0, r1
10014b48:	07cd      	lsls	r5, r1, #31
10014b4a:	0852      	lsrs	r2, r2, #1
10014b4c:	4315      	orrs	r5, r2
10014b4e:	0849      	lsrs	r1, r1, #1
10014b50:	4664      	mov	r4, ip
10014b52:	e6b4      	b.n	100148be <__aeabi_dadd+0x52>
10014b54:	4b2c      	ldr	r3, [pc, #176]	; (10014c08 <__aeabi_dadd+0x39c>)
10014b56:	429c      	cmp	r4, r3
10014b58:	d000      	beq.n	10014b5c <__aeabi_dadd+0x2f0>
10014b5a:	e6ec      	b.n	10014936 <__aeabi_dadd+0xca>
10014b5c:	e6af      	b.n	100148be <__aeabi_dadd+0x52>
10014b5e:	0011      	movs	r1, r2
10014b60:	3c1f      	subs	r4, #31
10014b62:	40e1      	lsrs	r1, r4
10014b64:	000c      	movs	r4, r1
10014b66:	2b20      	cmp	r3, #32
10014b68:	d100      	bne.n	10014b6c <__aeabi_dadd+0x300>
10014b6a:	e07f      	b.n	10014c6c <__aeabi_dadd+0x400>
10014b6c:	2140      	movs	r1, #64	; 0x40
10014b6e:	1acb      	subs	r3, r1, r3
10014b70:	409a      	lsls	r2, r3
10014b72:	4315      	orrs	r5, r2
10014b74:	1e6a      	subs	r2, r5, #1
10014b76:	4195      	sbcs	r5, r2
10014b78:	2100      	movs	r1, #0
10014b7a:	4325      	orrs	r5, r4
10014b7c:	2400      	movs	r4, #0
10014b7e:	e72d      	b.n	100149dc <__aeabi_dadd+0x170>
10014b80:	0033      	movs	r3, r6
10014b82:	0007      	movs	r7, r0
10014b84:	3b20      	subs	r3, #32
10014b86:	40df      	lsrs	r7, r3
10014b88:	003b      	movs	r3, r7
10014b8a:	2e20      	cmp	r6, #32
10014b8c:	d070      	beq.n	10014c70 <__aeabi_dadd+0x404>
10014b8e:	2740      	movs	r7, #64	; 0x40
10014b90:	1bbe      	subs	r6, r7, r6
10014b92:	40b0      	lsls	r0, r6
10014b94:	4302      	orrs	r2, r0
10014b96:	1e50      	subs	r0, r2, #1
10014b98:	4182      	sbcs	r2, r0
10014b9a:	4313      	orrs	r3, r2
10014b9c:	2200      	movs	r2, #0
10014b9e:	e6e2      	b.n	10014966 <__aeabi_dadd+0xfa>
10014ba0:	2c00      	cmp	r4, #0
10014ba2:	d04f      	beq.n	10014c44 <__aeabi_dadd+0x3d8>
10014ba4:	4c18      	ldr	r4, [pc, #96]	; (10014c08 <__aeabi_dadd+0x39c>)
10014ba6:	45a4      	cmp	ip, r4
10014ba8:	d100      	bne.n	10014bac <__aeabi_dadd+0x340>
10014baa:	e0ab      	b.n	10014d04 <__aeabi_dadd+0x498>
10014bac:	2480      	movs	r4, #128	; 0x80
10014bae:	0424      	lsls	r4, r4, #16
10014bb0:	4276      	negs	r6, r6
10014bb2:	4321      	orrs	r1, r4
10014bb4:	2e38      	cmp	r6, #56	; 0x38
10014bb6:	dd00      	ble.n	10014bba <__aeabi_dadd+0x34e>
10014bb8:	e0df      	b.n	10014d7a <__aeabi_dadd+0x50e>
10014bba:	2e1f      	cmp	r6, #31
10014bbc:	dd00      	ble.n	10014bc0 <__aeabi_dadd+0x354>
10014bbe:	e143      	b.n	10014e48 <__aeabi_dadd+0x5dc>
10014bc0:	2720      	movs	r7, #32
10014bc2:	1bbc      	subs	r4, r7, r6
10014bc4:	46a1      	mov	r9, r4
10014bc6:	000c      	movs	r4, r1
10014bc8:	464f      	mov	r7, r9
10014bca:	40bc      	lsls	r4, r7
10014bcc:	46a0      	mov	r8, r4
10014bce:	002c      	movs	r4, r5
10014bd0:	4647      	mov	r7, r8
10014bd2:	40f4      	lsrs	r4, r6
10014bd4:	433c      	orrs	r4, r7
10014bd6:	464f      	mov	r7, r9
10014bd8:	40bd      	lsls	r5, r7
10014bda:	1e6f      	subs	r7, r5, #1
10014bdc:	41bd      	sbcs	r5, r7
10014bde:	40f1      	lsrs	r1, r6
10014be0:	432c      	orrs	r4, r5
10014be2:	1b15      	subs	r5, r2, r4
10014be4:	42aa      	cmp	r2, r5
10014be6:	4192      	sbcs	r2, r2
10014be8:	1a41      	subs	r1, r0, r1
10014bea:	4252      	negs	r2, r2
10014bec:	1a89      	subs	r1, r1, r2
10014bee:	4664      	mov	r4, ip
10014bf0:	469a      	mov	sl, r3
10014bf2:	e6bf      	b.n	10014974 <__aeabi_dadd+0x108>
10014bf4:	4641      	mov	r1, r8
10014bf6:	4645      	mov	r5, r8
10014bf8:	4331      	orrs	r1, r6
10014bfa:	d000      	beq.n	10014bfe <__aeabi_dadd+0x392>
10014bfc:	e6be      	b.n	1001497c <__aeabi_dadd+0x110>
10014bfe:	2600      	movs	r6, #0
10014c00:	2400      	movs	r4, #0
10014c02:	2500      	movs	r5, #0
10014c04:	e6f2      	b.n	100149ec <__aeabi_dadd+0x180>
10014c06:	46c0      	nop			; (mov r8, r8)
10014c08:	000007ff 	.word	0x000007ff
10014c0c:	ff7fffff 	.word	0xff7fffff
10014c10:	800fffff 	.word	0x800fffff
10014c14:	2b1f      	cmp	r3, #31
10014c16:	dc59      	bgt.n	10014ccc <__aeabi_dadd+0x460>
10014c18:	2720      	movs	r7, #32
10014c1a:	1aff      	subs	r7, r7, r3
10014c1c:	46bc      	mov	ip, r7
10014c1e:	0007      	movs	r7, r0
10014c20:	4663      	mov	r3, ip
10014c22:	409f      	lsls	r7, r3
10014c24:	465b      	mov	r3, fp
10014c26:	46b9      	mov	r9, r7
10014c28:	0017      	movs	r7, r2
10014c2a:	40df      	lsrs	r7, r3
10014c2c:	46b8      	mov	r8, r7
10014c2e:	464f      	mov	r7, r9
10014c30:	4643      	mov	r3, r8
10014c32:	431f      	orrs	r7, r3
10014c34:	4663      	mov	r3, ip
10014c36:	409a      	lsls	r2, r3
10014c38:	1e53      	subs	r3, r2, #1
10014c3a:	419a      	sbcs	r2, r3
10014c3c:	465b      	mov	r3, fp
10014c3e:	433a      	orrs	r2, r7
10014c40:	40d8      	lsrs	r0, r3
10014c42:	e6f4      	b.n	10014a2e <__aeabi_dadd+0x1c2>
10014c44:	000c      	movs	r4, r1
10014c46:	432c      	orrs	r4, r5
10014c48:	d05c      	beq.n	10014d04 <__aeabi_dadd+0x498>
10014c4a:	43f6      	mvns	r6, r6
10014c4c:	2e00      	cmp	r6, #0
10014c4e:	d155      	bne.n	10014cfc <__aeabi_dadd+0x490>
10014c50:	1b55      	subs	r5, r2, r5
10014c52:	42aa      	cmp	r2, r5
10014c54:	41a4      	sbcs	r4, r4
10014c56:	1a41      	subs	r1, r0, r1
10014c58:	4264      	negs	r4, r4
10014c5a:	1b09      	subs	r1, r1, r4
10014c5c:	469a      	mov	sl, r3
10014c5e:	4664      	mov	r4, ip
10014c60:	e688      	b.n	10014974 <__aeabi_dadd+0x108>
10014c62:	4f96      	ldr	r7, [pc, #600]	; (10014ebc <__aeabi_dadd+0x650>)
10014c64:	42bc      	cmp	r4, r7
10014c66:	d000      	beq.n	10014c6a <__aeabi_dadd+0x3fe>
10014c68:	e6d8      	b.n	10014a1c <__aeabi_dadd+0x1b0>
10014c6a:	e628      	b.n	100148be <__aeabi_dadd+0x52>
10014c6c:	2200      	movs	r2, #0
10014c6e:	e780      	b.n	10014b72 <__aeabi_dadd+0x306>
10014c70:	2000      	movs	r0, #0
10014c72:	e78f      	b.n	10014b94 <__aeabi_dadd+0x328>
10014c74:	000b      	movs	r3, r1
10014c76:	432b      	orrs	r3, r5
10014c78:	2c00      	cmp	r4, #0
10014c7a:	d000      	beq.n	10014c7e <__aeabi_dadd+0x412>
10014c7c:	e0c2      	b.n	10014e04 <__aeabi_dadd+0x598>
10014c7e:	2b00      	cmp	r3, #0
10014c80:	d100      	bne.n	10014c84 <__aeabi_dadd+0x418>
10014c82:	e101      	b.n	10014e88 <__aeabi_dadd+0x61c>
10014c84:	0003      	movs	r3, r0
10014c86:	4313      	orrs	r3, r2
10014c88:	d100      	bne.n	10014c8c <__aeabi_dadd+0x420>
10014c8a:	e618      	b.n	100148be <__aeabi_dadd+0x52>
10014c8c:	18ab      	adds	r3, r5, r2
10014c8e:	42ab      	cmp	r3, r5
10014c90:	41b6      	sbcs	r6, r6
10014c92:	1809      	adds	r1, r1, r0
10014c94:	4276      	negs	r6, r6
10014c96:	1871      	adds	r1, r6, r1
10014c98:	020a      	lsls	r2, r1, #8
10014c9a:	d400      	bmi.n	10014c9e <__aeabi_dadd+0x432>
10014c9c:	e109      	b.n	10014eb2 <__aeabi_dadd+0x646>
10014c9e:	4a88      	ldr	r2, [pc, #544]	; (10014ec0 <__aeabi_dadd+0x654>)
10014ca0:	001d      	movs	r5, r3
10014ca2:	4011      	ands	r1, r2
10014ca4:	4664      	mov	r4, ip
10014ca6:	e60a      	b.n	100148be <__aeabi_dadd+0x52>
10014ca8:	2c00      	cmp	r4, #0
10014caa:	d15b      	bne.n	10014d64 <__aeabi_dadd+0x4f8>
10014cac:	000e      	movs	r6, r1
10014cae:	432e      	orrs	r6, r5
10014cb0:	d000      	beq.n	10014cb4 <__aeabi_dadd+0x448>
10014cb2:	e08a      	b.n	10014dca <__aeabi_dadd+0x55e>
10014cb4:	0001      	movs	r1, r0
10014cb6:	4311      	orrs	r1, r2
10014cb8:	d100      	bne.n	10014cbc <__aeabi_dadd+0x450>
10014cba:	e0c2      	b.n	10014e42 <__aeabi_dadd+0x5d6>
10014cbc:	0001      	movs	r1, r0
10014cbe:	0015      	movs	r5, r2
10014cc0:	469a      	mov	sl, r3
10014cc2:	e5fc      	b.n	100148be <__aeabi_dadd+0x52>
10014cc4:	4664      	mov	r4, ip
10014cc6:	2100      	movs	r1, #0
10014cc8:	2500      	movs	r5, #0
10014cca:	e68f      	b.n	100149ec <__aeabi_dadd+0x180>
10014ccc:	2320      	movs	r3, #32
10014cce:	425b      	negs	r3, r3
10014cd0:	469c      	mov	ip, r3
10014cd2:	44dc      	add	ip, fp
10014cd4:	4663      	mov	r3, ip
10014cd6:	0007      	movs	r7, r0
10014cd8:	40df      	lsrs	r7, r3
10014cda:	465b      	mov	r3, fp
10014cdc:	46bc      	mov	ip, r7
10014cde:	2b20      	cmp	r3, #32
10014ce0:	d100      	bne.n	10014ce4 <__aeabi_dadd+0x478>
10014ce2:	e0ac      	b.n	10014e3e <__aeabi_dadd+0x5d2>
10014ce4:	2340      	movs	r3, #64	; 0x40
10014ce6:	465f      	mov	r7, fp
10014ce8:	1bdb      	subs	r3, r3, r7
10014cea:	4098      	lsls	r0, r3
10014cec:	4302      	orrs	r2, r0
10014cee:	1e50      	subs	r0, r2, #1
10014cf0:	4182      	sbcs	r2, r0
10014cf2:	4663      	mov	r3, ip
10014cf4:	4313      	orrs	r3, r2
10014cf6:	001a      	movs	r2, r3
10014cf8:	2000      	movs	r0, #0
10014cfa:	e698      	b.n	10014a2e <__aeabi_dadd+0x1c2>
10014cfc:	4c6f      	ldr	r4, [pc, #444]	; (10014ebc <__aeabi_dadd+0x650>)
10014cfe:	45a4      	cmp	ip, r4
10014d00:	d000      	beq.n	10014d04 <__aeabi_dadd+0x498>
10014d02:	e757      	b.n	10014bb4 <__aeabi_dadd+0x348>
10014d04:	0001      	movs	r1, r0
10014d06:	0015      	movs	r5, r2
10014d08:	4664      	mov	r4, ip
10014d0a:	469a      	mov	sl, r3
10014d0c:	e5d7      	b.n	100148be <__aeabi_dadd+0x52>
10014d0e:	2c00      	cmp	r4, #0
10014d10:	d139      	bne.n	10014d86 <__aeabi_dadd+0x51a>
10014d12:	000c      	movs	r4, r1
10014d14:	432c      	orrs	r4, r5
10014d16:	d06e      	beq.n	10014df6 <__aeabi_dadd+0x58a>
10014d18:	43db      	mvns	r3, r3
10014d1a:	2b00      	cmp	r3, #0
10014d1c:	d01a      	beq.n	10014d54 <__aeabi_dadd+0x4e8>
10014d1e:	4c67      	ldr	r4, [pc, #412]	; (10014ebc <__aeabi_dadd+0x650>)
10014d20:	45a4      	cmp	ip, r4
10014d22:	d068      	beq.n	10014df6 <__aeabi_dadd+0x58a>
10014d24:	2b38      	cmp	r3, #56	; 0x38
10014d26:	dd00      	ble.n	10014d2a <__aeabi_dadd+0x4be>
10014d28:	e0a4      	b.n	10014e74 <__aeabi_dadd+0x608>
10014d2a:	2b1f      	cmp	r3, #31
10014d2c:	dd00      	ble.n	10014d30 <__aeabi_dadd+0x4c4>
10014d2e:	e0ae      	b.n	10014e8e <__aeabi_dadd+0x622>
10014d30:	2420      	movs	r4, #32
10014d32:	000f      	movs	r7, r1
10014d34:	1ae4      	subs	r4, r4, r3
10014d36:	40a7      	lsls	r7, r4
10014d38:	46b9      	mov	r9, r7
10014d3a:	002f      	movs	r7, r5
10014d3c:	40df      	lsrs	r7, r3
10014d3e:	46b8      	mov	r8, r7
10014d40:	46a3      	mov	fp, r4
10014d42:	464f      	mov	r7, r9
10014d44:	4644      	mov	r4, r8
10014d46:	4327      	orrs	r7, r4
10014d48:	465c      	mov	r4, fp
10014d4a:	40a5      	lsls	r5, r4
10014d4c:	1e6c      	subs	r4, r5, #1
10014d4e:	41a5      	sbcs	r5, r4
10014d50:	40d9      	lsrs	r1, r3
10014d52:	433d      	orrs	r5, r7
10014d54:	18ad      	adds	r5, r5, r2
10014d56:	4295      	cmp	r5, r2
10014d58:	419b      	sbcs	r3, r3
10014d5a:	1809      	adds	r1, r1, r0
10014d5c:	425b      	negs	r3, r3
10014d5e:	1859      	adds	r1, r3, r1
10014d60:	4664      	mov	r4, ip
10014d62:	e66b      	b.n	10014a3c <__aeabi_dadd+0x1d0>
10014d64:	000c      	movs	r4, r1
10014d66:	432c      	orrs	r4, r5
10014d68:	d115      	bne.n	10014d96 <__aeabi_dadd+0x52a>
10014d6a:	0001      	movs	r1, r0
10014d6c:	4311      	orrs	r1, r2
10014d6e:	d07b      	beq.n	10014e68 <__aeabi_dadd+0x5fc>
10014d70:	0001      	movs	r1, r0
10014d72:	0015      	movs	r5, r2
10014d74:	469a      	mov	sl, r3
10014d76:	4c51      	ldr	r4, [pc, #324]	; (10014ebc <__aeabi_dadd+0x650>)
10014d78:	e5a1      	b.n	100148be <__aeabi_dadd+0x52>
10014d7a:	430d      	orrs	r5, r1
10014d7c:	1e69      	subs	r1, r5, #1
10014d7e:	418d      	sbcs	r5, r1
10014d80:	2100      	movs	r1, #0
10014d82:	b2ec      	uxtb	r4, r5
10014d84:	e72d      	b.n	10014be2 <__aeabi_dadd+0x376>
10014d86:	4c4d      	ldr	r4, [pc, #308]	; (10014ebc <__aeabi_dadd+0x650>)
10014d88:	45a4      	cmp	ip, r4
10014d8a:	d034      	beq.n	10014df6 <__aeabi_dadd+0x58a>
10014d8c:	2480      	movs	r4, #128	; 0x80
10014d8e:	0424      	lsls	r4, r4, #16
10014d90:	425b      	negs	r3, r3
10014d92:	4321      	orrs	r1, r4
10014d94:	e7c6      	b.n	10014d24 <__aeabi_dadd+0x4b8>
10014d96:	0004      	movs	r4, r0
10014d98:	4314      	orrs	r4, r2
10014d9a:	d04e      	beq.n	10014e3a <__aeabi_dadd+0x5ce>
10014d9c:	08ed      	lsrs	r5, r5, #3
10014d9e:	074c      	lsls	r4, r1, #29
10014da0:	432c      	orrs	r4, r5
10014da2:	2580      	movs	r5, #128	; 0x80
10014da4:	08c9      	lsrs	r1, r1, #3
10014da6:	032d      	lsls	r5, r5, #12
10014da8:	4229      	tst	r1, r5
10014daa:	d008      	beq.n	10014dbe <__aeabi_dadd+0x552>
10014dac:	08c6      	lsrs	r6, r0, #3
10014dae:	422e      	tst	r6, r5
10014db0:	d105      	bne.n	10014dbe <__aeabi_dadd+0x552>
10014db2:	08d2      	lsrs	r2, r2, #3
10014db4:	0741      	lsls	r1, r0, #29
10014db6:	4311      	orrs	r1, r2
10014db8:	000c      	movs	r4, r1
10014dba:	469a      	mov	sl, r3
10014dbc:	0031      	movs	r1, r6
10014dbe:	0f62      	lsrs	r2, r4, #29
10014dc0:	00c9      	lsls	r1, r1, #3
10014dc2:	00e5      	lsls	r5, r4, #3
10014dc4:	4311      	orrs	r1, r2
10014dc6:	4c3d      	ldr	r4, [pc, #244]	; (10014ebc <__aeabi_dadd+0x650>)
10014dc8:	e579      	b.n	100148be <__aeabi_dadd+0x52>
10014dca:	0006      	movs	r6, r0
10014dcc:	4316      	orrs	r6, r2
10014dce:	d100      	bne.n	10014dd2 <__aeabi_dadd+0x566>
10014dd0:	e575      	b.n	100148be <__aeabi_dadd+0x52>
10014dd2:	1aae      	subs	r6, r5, r2
10014dd4:	46b0      	mov	r8, r6
10014dd6:	4545      	cmp	r5, r8
10014dd8:	41bf      	sbcs	r7, r7
10014dda:	1a0e      	subs	r6, r1, r0
10014ddc:	427f      	negs	r7, r7
10014dde:	1bf6      	subs	r6, r6, r7
10014de0:	0237      	lsls	r7, r6, #8
10014de2:	d400      	bmi.n	10014de6 <__aeabi_dadd+0x57a>
10014de4:	e5f4      	b.n	100149d0 <__aeabi_dadd+0x164>
10014de6:	1b55      	subs	r5, r2, r5
10014de8:	42aa      	cmp	r2, r5
10014dea:	41b6      	sbcs	r6, r6
10014dec:	1a41      	subs	r1, r0, r1
10014dee:	4276      	negs	r6, r6
10014df0:	1b89      	subs	r1, r1, r6
10014df2:	469a      	mov	sl, r3
10014df4:	e563      	b.n	100148be <__aeabi_dadd+0x52>
10014df6:	0001      	movs	r1, r0
10014df8:	0015      	movs	r5, r2
10014dfa:	4664      	mov	r4, ip
10014dfc:	e55f      	b.n	100148be <__aeabi_dadd+0x52>
10014dfe:	2200      	movs	r2, #0
10014e00:	2500      	movs	r5, #0
10014e02:	e57b      	b.n	100148fc <__aeabi_dadd+0x90>
10014e04:	2b00      	cmp	r3, #0
10014e06:	d03b      	beq.n	10014e80 <__aeabi_dadd+0x614>
10014e08:	0003      	movs	r3, r0
10014e0a:	4313      	orrs	r3, r2
10014e0c:	d015      	beq.n	10014e3a <__aeabi_dadd+0x5ce>
10014e0e:	08ed      	lsrs	r5, r5, #3
10014e10:	074b      	lsls	r3, r1, #29
10014e12:	432b      	orrs	r3, r5
10014e14:	2580      	movs	r5, #128	; 0x80
10014e16:	08c9      	lsrs	r1, r1, #3
10014e18:	032d      	lsls	r5, r5, #12
10014e1a:	4229      	tst	r1, r5
10014e1c:	d007      	beq.n	10014e2e <__aeabi_dadd+0x5c2>
10014e1e:	08c4      	lsrs	r4, r0, #3
10014e20:	422c      	tst	r4, r5
10014e22:	d104      	bne.n	10014e2e <__aeabi_dadd+0x5c2>
10014e24:	0741      	lsls	r1, r0, #29
10014e26:	000b      	movs	r3, r1
10014e28:	0021      	movs	r1, r4
10014e2a:	08d2      	lsrs	r2, r2, #3
10014e2c:	4313      	orrs	r3, r2
10014e2e:	00c9      	lsls	r1, r1, #3
10014e30:	0f5a      	lsrs	r2, r3, #29
10014e32:	4311      	orrs	r1, r2
10014e34:	00dd      	lsls	r5, r3, #3
10014e36:	4c21      	ldr	r4, [pc, #132]	; (10014ebc <__aeabi_dadd+0x650>)
10014e38:	e541      	b.n	100148be <__aeabi_dadd+0x52>
10014e3a:	4c20      	ldr	r4, [pc, #128]	; (10014ebc <__aeabi_dadd+0x650>)
10014e3c:	e53f      	b.n	100148be <__aeabi_dadd+0x52>
10014e3e:	2000      	movs	r0, #0
10014e40:	e754      	b.n	10014cec <__aeabi_dadd+0x480>
10014e42:	2600      	movs	r6, #0
10014e44:	2500      	movs	r5, #0
10014e46:	e5d1      	b.n	100149ec <__aeabi_dadd+0x180>
10014e48:	0034      	movs	r4, r6
10014e4a:	000f      	movs	r7, r1
10014e4c:	3c20      	subs	r4, #32
10014e4e:	40e7      	lsrs	r7, r4
10014e50:	003c      	movs	r4, r7
10014e52:	2e20      	cmp	r6, #32
10014e54:	d02b      	beq.n	10014eae <__aeabi_dadd+0x642>
10014e56:	2740      	movs	r7, #64	; 0x40
10014e58:	1bbe      	subs	r6, r7, r6
10014e5a:	40b1      	lsls	r1, r6
10014e5c:	430d      	orrs	r5, r1
10014e5e:	1e69      	subs	r1, r5, #1
10014e60:	418d      	sbcs	r5, r1
10014e62:	2100      	movs	r1, #0
10014e64:	432c      	orrs	r4, r5
10014e66:	e6bc      	b.n	10014be2 <__aeabi_dadd+0x376>
10014e68:	2180      	movs	r1, #128	; 0x80
10014e6a:	2600      	movs	r6, #0
10014e6c:	0309      	lsls	r1, r1, #12
10014e6e:	4c13      	ldr	r4, [pc, #76]	; (10014ebc <__aeabi_dadd+0x650>)
10014e70:	2500      	movs	r5, #0
10014e72:	e5bb      	b.n	100149ec <__aeabi_dadd+0x180>
10014e74:	430d      	orrs	r5, r1
10014e76:	1e69      	subs	r1, r5, #1
10014e78:	418d      	sbcs	r5, r1
10014e7a:	2100      	movs	r1, #0
10014e7c:	b2ed      	uxtb	r5, r5
10014e7e:	e769      	b.n	10014d54 <__aeabi_dadd+0x4e8>
10014e80:	0001      	movs	r1, r0
10014e82:	0015      	movs	r5, r2
10014e84:	4c0d      	ldr	r4, [pc, #52]	; (10014ebc <__aeabi_dadd+0x650>)
10014e86:	e51a      	b.n	100148be <__aeabi_dadd+0x52>
10014e88:	0001      	movs	r1, r0
10014e8a:	0015      	movs	r5, r2
10014e8c:	e517      	b.n	100148be <__aeabi_dadd+0x52>
10014e8e:	001c      	movs	r4, r3
10014e90:	000f      	movs	r7, r1
10014e92:	3c20      	subs	r4, #32
10014e94:	40e7      	lsrs	r7, r4
10014e96:	003c      	movs	r4, r7
10014e98:	2b20      	cmp	r3, #32
10014e9a:	d00c      	beq.n	10014eb6 <__aeabi_dadd+0x64a>
10014e9c:	2740      	movs	r7, #64	; 0x40
10014e9e:	1afb      	subs	r3, r7, r3
10014ea0:	4099      	lsls	r1, r3
10014ea2:	430d      	orrs	r5, r1
10014ea4:	1e69      	subs	r1, r5, #1
10014ea6:	418d      	sbcs	r5, r1
10014ea8:	2100      	movs	r1, #0
10014eaa:	4325      	orrs	r5, r4
10014eac:	e752      	b.n	10014d54 <__aeabi_dadd+0x4e8>
10014eae:	2100      	movs	r1, #0
10014eb0:	e7d4      	b.n	10014e5c <__aeabi_dadd+0x5f0>
10014eb2:	001d      	movs	r5, r3
10014eb4:	e592      	b.n	100149dc <__aeabi_dadd+0x170>
10014eb6:	2100      	movs	r1, #0
10014eb8:	e7f3      	b.n	10014ea2 <__aeabi_dadd+0x636>
10014eba:	46c0      	nop			; (mov r8, r8)
10014ebc:	000007ff 	.word	0x000007ff
10014ec0:	ff7fffff 	.word	0xff7fffff

10014ec4 <__aeabi_ddiv>:
10014ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
10014ec6:	4656      	mov	r6, sl
10014ec8:	464d      	mov	r5, r9
10014eca:	4644      	mov	r4, r8
10014ecc:	465f      	mov	r7, fp
10014ece:	b4f0      	push	{r4, r5, r6, r7}
10014ed0:	001d      	movs	r5, r3
10014ed2:	030e      	lsls	r6, r1, #12
10014ed4:	004c      	lsls	r4, r1, #1
10014ed6:	0fcb      	lsrs	r3, r1, #31
10014ed8:	b087      	sub	sp, #28
10014eda:	0007      	movs	r7, r0
10014edc:	4692      	mov	sl, r2
10014ede:	4681      	mov	r9, r0
10014ee0:	0b36      	lsrs	r6, r6, #12
10014ee2:	0d64      	lsrs	r4, r4, #21
10014ee4:	4698      	mov	r8, r3
10014ee6:	d06a      	beq.n	10014fbe <__aeabi_ddiv+0xfa>
10014ee8:	4b6d      	ldr	r3, [pc, #436]	; (100150a0 <__aeabi_ddiv+0x1dc>)
10014eea:	429c      	cmp	r4, r3
10014eec:	d035      	beq.n	10014f5a <__aeabi_ddiv+0x96>
10014eee:	2280      	movs	r2, #128	; 0x80
10014ef0:	0f43      	lsrs	r3, r0, #29
10014ef2:	0412      	lsls	r2, r2, #16
10014ef4:	4313      	orrs	r3, r2
10014ef6:	00f6      	lsls	r6, r6, #3
10014ef8:	431e      	orrs	r6, r3
10014efa:	00c3      	lsls	r3, r0, #3
10014efc:	4699      	mov	r9, r3
10014efe:	4b69      	ldr	r3, [pc, #420]	; (100150a4 <__aeabi_ddiv+0x1e0>)
10014f00:	2700      	movs	r7, #0
10014f02:	469c      	mov	ip, r3
10014f04:	2300      	movs	r3, #0
10014f06:	4464      	add	r4, ip
10014f08:	9302      	str	r3, [sp, #8]
10014f0a:	032b      	lsls	r3, r5, #12
10014f0c:	0068      	lsls	r0, r5, #1
10014f0e:	0b1b      	lsrs	r3, r3, #12
10014f10:	0fed      	lsrs	r5, r5, #31
10014f12:	4651      	mov	r1, sl
10014f14:	469b      	mov	fp, r3
10014f16:	0d40      	lsrs	r0, r0, #21
10014f18:	9500      	str	r5, [sp, #0]
10014f1a:	d100      	bne.n	10014f1e <__aeabi_ddiv+0x5a>
10014f1c:	e078      	b.n	10015010 <__aeabi_ddiv+0x14c>
10014f1e:	4b60      	ldr	r3, [pc, #384]	; (100150a0 <__aeabi_ddiv+0x1dc>)
10014f20:	4298      	cmp	r0, r3
10014f22:	d06c      	beq.n	10014ffe <__aeabi_ddiv+0x13a>
10014f24:	465b      	mov	r3, fp
10014f26:	00da      	lsls	r2, r3, #3
10014f28:	0f4b      	lsrs	r3, r1, #29
10014f2a:	2180      	movs	r1, #128	; 0x80
10014f2c:	0409      	lsls	r1, r1, #16
10014f2e:	430b      	orrs	r3, r1
10014f30:	4313      	orrs	r3, r2
10014f32:	469b      	mov	fp, r3
10014f34:	4653      	mov	r3, sl
10014f36:	00d9      	lsls	r1, r3, #3
10014f38:	4b5a      	ldr	r3, [pc, #360]	; (100150a4 <__aeabi_ddiv+0x1e0>)
10014f3a:	469c      	mov	ip, r3
10014f3c:	2300      	movs	r3, #0
10014f3e:	4460      	add	r0, ip
10014f40:	4642      	mov	r2, r8
10014f42:	1a20      	subs	r0, r4, r0
10014f44:	406a      	eors	r2, r5
10014f46:	4692      	mov	sl, r2
10014f48:	9001      	str	r0, [sp, #4]
10014f4a:	431f      	orrs	r7, r3
10014f4c:	2f0f      	cmp	r7, #15
10014f4e:	d900      	bls.n	10014f52 <__aeabi_ddiv+0x8e>
10014f50:	e0b0      	b.n	100150b4 <__aeabi_ddiv+0x1f0>
10014f52:	4855      	ldr	r0, [pc, #340]	; (100150a8 <__aeabi_ddiv+0x1e4>)
10014f54:	00bf      	lsls	r7, r7, #2
10014f56:	59c0      	ldr	r0, [r0, r7]
10014f58:	4687      	mov	pc, r0
10014f5a:	4337      	orrs	r7, r6
10014f5c:	d000      	beq.n	10014f60 <__aeabi_ddiv+0x9c>
10014f5e:	e088      	b.n	10015072 <__aeabi_ddiv+0x1ae>
10014f60:	2300      	movs	r3, #0
10014f62:	4699      	mov	r9, r3
10014f64:	3302      	adds	r3, #2
10014f66:	2708      	movs	r7, #8
10014f68:	2600      	movs	r6, #0
10014f6a:	9302      	str	r3, [sp, #8]
10014f6c:	e7cd      	b.n	10014f0a <__aeabi_ddiv+0x46>
10014f6e:	4643      	mov	r3, r8
10014f70:	46b3      	mov	fp, r6
10014f72:	4649      	mov	r1, r9
10014f74:	9300      	str	r3, [sp, #0]
10014f76:	9b02      	ldr	r3, [sp, #8]
10014f78:	9a00      	ldr	r2, [sp, #0]
10014f7a:	4692      	mov	sl, r2
10014f7c:	2b02      	cmp	r3, #2
10014f7e:	d000      	beq.n	10014f82 <__aeabi_ddiv+0xbe>
10014f80:	e1bf      	b.n	10015302 <__aeabi_ddiv+0x43e>
10014f82:	2100      	movs	r1, #0
10014f84:	4653      	mov	r3, sl
10014f86:	2201      	movs	r2, #1
10014f88:	2600      	movs	r6, #0
10014f8a:	4689      	mov	r9, r1
10014f8c:	401a      	ands	r2, r3
10014f8e:	4b44      	ldr	r3, [pc, #272]	; (100150a0 <__aeabi_ddiv+0x1dc>)
10014f90:	2100      	movs	r1, #0
10014f92:	0336      	lsls	r6, r6, #12
10014f94:	0d0c      	lsrs	r4, r1, #20
10014f96:	0524      	lsls	r4, r4, #20
10014f98:	0b36      	lsrs	r6, r6, #12
10014f9a:	4326      	orrs	r6, r4
10014f9c:	4c43      	ldr	r4, [pc, #268]	; (100150ac <__aeabi_ddiv+0x1e8>)
10014f9e:	051b      	lsls	r3, r3, #20
10014fa0:	4026      	ands	r6, r4
10014fa2:	431e      	orrs	r6, r3
10014fa4:	0076      	lsls	r6, r6, #1
10014fa6:	07d2      	lsls	r2, r2, #31
10014fa8:	0876      	lsrs	r6, r6, #1
10014faa:	4316      	orrs	r6, r2
10014fac:	4648      	mov	r0, r9
10014fae:	0031      	movs	r1, r6
10014fb0:	b007      	add	sp, #28
10014fb2:	bc3c      	pop	{r2, r3, r4, r5}
10014fb4:	4690      	mov	r8, r2
10014fb6:	4699      	mov	r9, r3
10014fb8:	46a2      	mov	sl, r4
10014fba:	46ab      	mov	fp, r5
10014fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014fbe:	0033      	movs	r3, r6
10014fc0:	4303      	orrs	r3, r0
10014fc2:	d04f      	beq.n	10015064 <__aeabi_ddiv+0x1a0>
10014fc4:	2e00      	cmp	r6, #0
10014fc6:	d100      	bne.n	10014fca <__aeabi_ddiv+0x106>
10014fc8:	e1bc      	b.n	10015344 <__aeabi_ddiv+0x480>
10014fca:	0030      	movs	r0, r6
10014fcc:	f001 fb1c 	bl	10016608 <__clzsi2>
10014fd0:	0003      	movs	r3, r0
10014fd2:	3b0b      	subs	r3, #11
10014fd4:	2b1c      	cmp	r3, #28
10014fd6:	dd00      	ble.n	10014fda <__aeabi_ddiv+0x116>
10014fd8:	e1ad      	b.n	10015336 <__aeabi_ddiv+0x472>
10014fda:	221d      	movs	r2, #29
10014fdc:	0001      	movs	r1, r0
10014fde:	1ad3      	subs	r3, r2, r3
10014fe0:	3908      	subs	r1, #8
10014fe2:	003a      	movs	r2, r7
10014fe4:	408f      	lsls	r7, r1
10014fe6:	408e      	lsls	r6, r1
10014fe8:	40da      	lsrs	r2, r3
10014fea:	46b9      	mov	r9, r7
10014fec:	4316      	orrs	r6, r2
10014fee:	4b30      	ldr	r3, [pc, #192]	; (100150b0 <__aeabi_ddiv+0x1ec>)
10014ff0:	2700      	movs	r7, #0
10014ff2:	469c      	mov	ip, r3
10014ff4:	2300      	movs	r3, #0
10014ff6:	4460      	add	r0, ip
10014ff8:	4244      	negs	r4, r0
10014ffa:	9302      	str	r3, [sp, #8]
10014ffc:	e785      	b.n	10014f0a <__aeabi_ddiv+0x46>
10014ffe:	4653      	mov	r3, sl
10015000:	465a      	mov	r2, fp
10015002:	4313      	orrs	r3, r2
10015004:	d12c      	bne.n	10015060 <__aeabi_ddiv+0x19c>
10015006:	2300      	movs	r3, #0
10015008:	2100      	movs	r1, #0
1001500a:	469b      	mov	fp, r3
1001500c:	3302      	adds	r3, #2
1001500e:	e797      	b.n	10014f40 <__aeabi_ddiv+0x7c>
10015010:	430b      	orrs	r3, r1
10015012:	d020      	beq.n	10015056 <__aeabi_ddiv+0x192>
10015014:	465b      	mov	r3, fp
10015016:	2b00      	cmp	r3, #0
10015018:	d100      	bne.n	1001501c <__aeabi_ddiv+0x158>
1001501a:	e19e      	b.n	1001535a <__aeabi_ddiv+0x496>
1001501c:	4658      	mov	r0, fp
1001501e:	f001 faf3 	bl	10016608 <__clzsi2>
10015022:	0003      	movs	r3, r0
10015024:	3b0b      	subs	r3, #11
10015026:	2b1c      	cmp	r3, #28
10015028:	dd00      	ble.n	1001502c <__aeabi_ddiv+0x168>
1001502a:	e18f      	b.n	1001534c <__aeabi_ddiv+0x488>
1001502c:	0002      	movs	r2, r0
1001502e:	4659      	mov	r1, fp
10015030:	3a08      	subs	r2, #8
10015032:	4091      	lsls	r1, r2
10015034:	468b      	mov	fp, r1
10015036:	211d      	movs	r1, #29
10015038:	1acb      	subs	r3, r1, r3
1001503a:	4651      	mov	r1, sl
1001503c:	40d9      	lsrs	r1, r3
1001503e:	000b      	movs	r3, r1
10015040:	4659      	mov	r1, fp
10015042:	430b      	orrs	r3, r1
10015044:	4651      	mov	r1, sl
10015046:	469b      	mov	fp, r3
10015048:	4091      	lsls	r1, r2
1001504a:	4b19      	ldr	r3, [pc, #100]	; (100150b0 <__aeabi_ddiv+0x1ec>)
1001504c:	469c      	mov	ip, r3
1001504e:	4460      	add	r0, ip
10015050:	4240      	negs	r0, r0
10015052:	2300      	movs	r3, #0
10015054:	e774      	b.n	10014f40 <__aeabi_ddiv+0x7c>
10015056:	2300      	movs	r3, #0
10015058:	2100      	movs	r1, #0
1001505a:	469b      	mov	fp, r3
1001505c:	3301      	adds	r3, #1
1001505e:	e76f      	b.n	10014f40 <__aeabi_ddiv+0x7c>
10015060:	2303      	movs	r3, #3
10015062:	e76d      	b.n	10014f40 <__aeabi_ddiv+0x7c>
10015064:	2300      	movs	r3, #0
10015066:	4699      	mov	r9, r3
10015068:	3301      	adds	r3, #1
1001506a:	2704      	movs	r7, #4
1001506c:	2600      	movs	r6, #0
1001506e:	9302      	str	r3, [sp, #8]
10015070:	e74b      	b.n	10014f0a <__aeabi_ddiv+0x46>
10015072:	2303      	movs	r3, #3
10015074:	270c      	movs	r7, #12
10015076:	9302      	str	r3, [sp, #8]
10015078:	e747      	b.n	10014f0a <__aeabi_ddiv+0x46>
1001507a:	2201      	movs	r2, #1
1001507c:	1ad5      	subs	r5, r2, r3
1001507e:	2d38      	cmp	r5, #56	; 0x38
10015080:	dc00      	bgt.n	10015084 <__aeabi_ddiv+0x1c0>
10015082:	e1b0      	b.n	100153e6 <__aeabi_ddiv+0x522>
10015084:	4653      	mov	r3, sl
10015086:	401a      	ands	r2, r3
10015088:	2100      	movs	r1, #0
1001508a:	2300      	movs	r3, #0
1001508c:	2600      	movs	r6, #0
1001508e:	4689      	mov	r9, r1
10015090:	e77e      	b.n	10014f90 <__aeabi_ddiv+0xcc>
10015092:	2300      	movs	r3, #0
10015094:	2680      	movs	r6, #128	; 0x80
10015096:	4699      	mov	r9, r3
10015098:	2200      	movs	r2, #0
1001509a:	0336      	lsls	r6, r6, #12
1001509c:	4b00      	ldr	r3, [pc, #0]	; (100150a0 <__aeabi_ddiv+0x1dc>)
1001509e:	e777      	b.n	10014f90 <__aeabi_ddiv+0xcc>
100150a0:	000007ff 	.word	0x000007ff
100150a4:	fffffc01 	.word	0xfffffc01
100150a8:	100191f0 	.word	0x100191f0
100150ac:	800fffff 	.word	0x800fffff
100150b0:	000003f3 	.word	0x000003f3
100150b4:	455e      	cmp	r6, fp
100150b6:	d900      	bls.n	100150ba <__aeabi_ddiv+0x1f6>
100150b8:	e172      	b.n	100153a0 <__aeabi_ddiv+0x4dc>
100150ba:	d100      	bne.n	100150be <__aeabi_ddiv+0x1fa>
100150bc:	e16d      	b.n	1001539a <__aeabi_ddiv+0x4d6>
100150be:	9b01      	ldr	r3, [sp, #4]
100150c0:	464d      	mov	r5, r9
100150c2:	3b01      	subs	r3, #1
100150c4:	9301      	str	r3, [sp, #4]
100150c6:	2300      	movs	r3, #0
100150c8:	0034      	movs	r4, r6
100150ca:	9302      	str	r3, [sp, #8]
100150cc:	465b      	mov	r3, fp
100150ce:	021e      	lsls	r6, r3, #8
100150d0:	0e0b      	lsrs	r3, r1, #24
100150d2:	431e      	orrs	r6, r3
100150d4:	020b      	lsls	r3, r1, #8
100150d6:	9303      	str	r3, [sp, #12]
100150d8:	0c33      	lsrs	r3, r6, #16
100150da:	4699      	mov	r9, r3
100150dc:	0433      	lsls	r3, r6, #16
100150de:	0c1b      	lsrs	r3, r3, #16
100150e0:	4649      	mov	r1, r9
100150e2:	0020      	movs	r0, r4
100150e4:	9300      	str	r3, [sp, #0]
100150e6:	f7fe fad7 	bl	10013698 <__aeabi_uidiv>
100150ea:	9b00      	ldr	r3, [sp, #0]
100150ec:	0037      	movs	r7, r6
100150ee:	4343      	muls	r3, r0
100150f0:	0006      	movs	r6, r0
100150f2:	4649      	mov	r1, r9
100150f4:	0020      	movs	r0, r4
100150f6:	4698      	mov	r8, r3
100150f8:	f7fe fb54 	bl	100137a4 <__aeabi_uidivmod>
100150fc:	0c2c      	lsrs	r4, r5, #16
100150fe:	0409      	lsls	r1, r1, #16
10015100:	430c      	orrs	r4, r1
10015102:	45a0      	cmp	r8, r4
10015104:	d909      	bls.n	1001511a <__aeabi_ddiv+0x256>
10015106:	19e4      	adds	r4, r4, r7
10015108:	1e73      	subs	r3, r6, #1
1001510a:	42a7      	cmp	r7, r4
1001510c:	d900      	bls.n	10015110 <__aeabi_ddiv+0x24c>
1001510e:	e15c      	b.n	100153ca <__aeabi_ddiv+0x506>
10015110:	45a0      	cmp	r8, r4
10015112:	d800      	bhi.n	10015116 <__aeabi_ddiv+0x252>
10015114:	e159      	b.n	100153ca <__aeabi_ddiv+0x506>
10015116:	3e02      	subs	r6, #2
10015118:	19e4      	adds	r4, r4, r7
1001511a:	4643      	mov	r3, r8
1001511c:	1ae4      	subs	r4, r4, r3
1001511e:	4649      	mov	r1, r9
10015120:	0020      	movs	r0, r4
10015122:	f7fe fab9 	bl	10013698 <__aeabi_uidiv>
10015126:	0003      	movs	r3, r0
10015128:	9a00      	ldr	r2, [sp, #0]
1001512a:	4680      	mov	r8, r0
1001512c:	4353      	muls	r3, r2
1001512e:	4649      	mov	r1, r9
10015130:	0020      	movs	r0, r4
10015132:	469b      	mov	fp, r3
10015134:	f7fe fb36 	bl	100137a4 <__aeabi_uidivmod>
10015138:	042a      	lsls	r2, r5, #16
1001513a:	0409      	lsls	r1, r1, #16
1001513c:	0c12      	lsrs	r2, r2, #16
1001513e:	430a      	orrs	r2, r1
10015140:	4593      	cmp	fp, r2
10015142:	d90d      	bls.n	10015160 <__aeabi_ddiv+0x29c>
10015144:	4643      	mov	r3, r8
10015146:	19d2      	adds	r2, r2, r7
10015148:	3b01      	subs	r3, #1
1001514a:	4297      	cmp	r7, r2
1001514c:	d900      	bls.n	10015150 <__aeabi_ddiv+0x28c>
1001514e:	e13a      	b.n	100153c6 <__aeabi_ddiv+0x502>
10015150:	4593      	cmp	fp, r2
10015152:	d800      	bhi.n	10015156 <__aeabi_ddiv+0x292>
10015154:	e137      	b.n	100153c6 <__aeabi_ddiv+0x502>
10015156:	2302      	movs	r3, #2
10015158:	425b      	negs	r3, r3
1001515a:	469c      	mov	ip, r3
1001515c:	19d2      	adds	r2, r2, r7
1001515e:	44e0      	add	r8, ip
10015160:	465b      	mov	r3, fp
10015162:	1ad2      	subs	r2, r2, r3
10015164:	4643      	mov	r3, r8
10015166:	0436      	lsls	r6, r6, #16
10015168:	4333      	orrs	r3, r6
1001516a:	469b      	mov	fp, r3
1001516c:	9903      	ldr	r1, [sp, #12]
1001516e:	0c18      	lsrs	r0, r3, #16
10015170:	0c0b      	lsrs	r3, r1, #16
10015172:	001d      	movs	r5, r3
10015174:	9305      	str	r3, [sp, #20]
10015176:	0409      	lsls	r1, r1, #16
10015178:	465b      	mov	r3, fp
1001517a:	0c09      	lsrs	r1, r1, #16
1001517c:	000c      	movs	r4, r1
1001517e:	041b      	lsls	r3, r3, #16
10015180:	0c1b      	lsrs	r3, r3, #16
10015182:	4344      	muls	r4, r0
10015184:	9104      	str	r1, [sp, #16]
10015186:	4359      	muls	r1, r3
10015188:	436b      	muls	r3, r5
1001518a:	4368      	muls	r0, r5
1001518c:	191b      	adds	r3, r3, r4
1001518e:	0c0d      	lsrs	r5, r1, #16
10015190:	18eb      	adds	r3, r5, r3
10015192:	429c      	cmp	r4, r3
10015194:	d903      	bls.n	1001519e <__aeabi_ddiv+0x2da>
10015196:	2480      	movs	r4, #128	; 0x80
10015198:	0264      	lsls	r4, r4, #9
1001519a:	46a4      	mov	ip, r4
1001519c:	4460      	add	r0, ip
1001519e:	0c1c      	lsrs	r4, r3, #16
100151a0:	0409      	lsls	r1, r1, #16
100151a2:	041b      	lsls	r3, r3, #16
100151a4:	0c09      	lsrs	r1, r1, #16
100151a6:	1820      	adds	r0, r4, r0
100151a8:	185d      	adds	r5, r3, r1
100151aa:	4282      	cmp	r2, r0
100151ac:	d200      	bcs.n	100151b0 <__aeabi_ddiv+0x2ec>
100151ae:	e0de      	b.n	1001536e <__aeabi_ddiv+0x4aa>
100151b0:	d100      	bne.n	100151b4 <__aeabi_ddiv+0x2f0>
100151b2:	e0d7      	b.n	10015364 <__aeabi_ddiv+0x4a0>
100151b4:	1a16      	subs	r6, r2, r0
100151b6:	9b02      	ldr	r3, [sp, #8]
100151b8:	469c      	mov	ip, r3
100151ba:	1b5d      	subs	r5, r3, r5
100151bc:	45ac      	cmp	ip, r5
100151be:	419b      	sbcs	r3, r3
100151c0:	425b      	negs	r3, r3
100151c2:	1af6      	subs	r6, r6, r3
100151c4:	42b7      	cmp	r7, r6
100151c6:	d100      	bne.n	100151ca <__aeabi_ddiv+0x306>
100151c8:	e106      	b.n	100153d8 <__aeabi_ddiv+0x514>
100151ca:	4649      	mov	r1, r9
100151cc:	0030      	movs	r0, r6
100151ce:	f7fe fa63 	bl	10013698 <__aeabi_uidiv>
100151d2:	9b00      	ldr	r3, [sp, #0]
100151d4:	0004      	movs	r4, r0
100151d6:	4343      	muls	r3, r0
100151d8:	4649      	mov	r1, r9
100151da:	0030      	movs	r0, r6
100151dc:	4698      	mov	r8, r3
100151de:	f7fe fae1 	bl	100137a4 <__aeabi_uidivmod>
100151e2:	0c2e      	lsrs	r6, r5, #16
100151e4:	0409      	lsls	r1, r1, #16
100151e6:	430e      	orrs	r6, r1
100151e8:	45b0      	cmp	r8, r6
100151ea:	d909      	bls.n	10015200 <__aeabi_ddiv+0x33c>
100151ec:	19f6      	adds	r6, r6, r7
100151ee:	1e63      	subs	r3, r4, #1
100151f0:	42b7      	cmp	r7, r6
100151f2:	d900      	bls.n	100151f6 <__aeabi_ddiv+0x332>
100151f4:	e0f3      	b.n	100153de <__aeabi_ddiv+0x51a>
100151f6:	45b0      	cmp	r8, r6
100151f8:	d800      	bhi.n	100151fc <__aeabi_ddiv+0x338>
100151fa:	e0f0      	b.n	100153de <__aeabi_ddiv+0x51a>
100151fc:	3c02      	subs	r4, #2
100151fe:	19f6      	adds	r6, r6, r7
10015200:	4643      	mov	r3, r8
10015202:	1af3      	subs	r3, r6, r3
10015204:	4649      	mov	r1, r9
10015206:	0018      	movs	r0, r3
10015208:	9302      	str	r3, [sp, #8]
1001520a:	f7fe fa45 	bl	10013698 <__aeabi_uidiv>
1001520e:	9b00      	ldr	r3, [sp, #0]
10015210:	0006      	movs	r6, r0
10015212:	4343      	muls	r3, r0
10015214:	4649      	mov	r1, r9
10015216:	9802      	ldr	r0, [sp, #8]
10015218:	4698      	mov	r8, r3
1001521a:	f7fe fac3 	bl	100137a4 <__aeabi_uidivmod>
1001521e:	042d      	lsls	r5, r5, #16
10015220:	0409      	lsls	r1, r1, #16
10015222:	0c2d      	lsrs	r5, r5, #16
10015224:	430d      	orrs	r5, r1
10015226:	45a8      	cmp	r8, r5
10015228:	d909      	bls.n	1001523e <__aeabi_ddiv+0x37a>
1001522a:	19ed      	adds	r5, r5, r7
1001522c:	1e73      	subs	r3, r6, #1
1001522e:	42af      	cmp	r7, r5
10015230:	d900      	bls.n	10015234 <__aeabi_ddiv+0x370>
10015232:	e0d6      	b.n	100153e2 <__aeabi_ddiv+0x51e>
10015234:	45a8      	cmp	r8, r5
10015236:	d800      	bhi.n	1001523a <__aeabi_ddiv+0x376>
10015238:	e0d3      	b.n	100153e2 <__aeabi_ddiv+0x51e>
1001523a:	3e02      	subs	r6, #2
1001523c:	19ed      	adds	r5, r5, r7
1001523e:	0424      	lsls	r4, r4, #16
10015240:	0021      	movs	r1, r4
10015242:	4643      	mov	r3, r8
10015244:	4331      	orrs	r1, r6
10015246:	9e04      	ldr	r6, [sp, #16]
10015248:	9a05      	ldr	r2, [sp, #20]
1001524a:	0030      	movs	r0, r6
1001524c:	1aed      	subs	r5, r5, r3
1001524e:	040b      	lsls	r3, r1, #16
10015250:	0c0c      	lsrs	r4, r1, #16
10015252:	0c1b      	lsrs	r3, r3, #16
10015254:	4358      	muls	r0, r3
10015256:	4366      	muls	r6, r4
10015258:	4353      	muls	r3, r2
1001525a:	4354      	muls	r4, r2
1001525c:	199a      	adds	r2, r3, r6
1001525e:	0c03      	lsrs	r3, r0, #16
10015260:	189b      	adds	r3, r3, r2
10015262:	429e      	cmp	r6, r3
10015264:	d903      	bls.n	1001526e <__aeabi_ddiv+0x3aa>
10015266:	2280      	movs	r2, #128	; 0x80
10015268:	0252      	lsls	r2, r2, #9
1001526a:	4694      	mov	ip, r2
1001526c:	4464      	add	r4, ip
1001526e:	0c1a      	lsrs	r2, r3, #16
10015270:	0400      	lsls	r0, r0, #16
10015272:	041b      	lsls	r3, r3, #16
10015274:	0c00      	lsrs	r0, r0, #16
10015276:	1914      	adds	r4, r2, r4
10015278:	181b      	adds	r3, r3, r0
1001527a:	42a5      	cmp	r5, r4
1001527c:	d350      	bcc.n	10015320 <__aeabi_ddiv+0x45c>
1001527e:	d04d      	beq.n	1001531c <__aeabi_ddiv+0x458>
10015280:	2301      	movs	r3, #1
10015282:	4319      	orrs	r1, r3
10015284:	4a96      	ldr	r2, [pc, #600]	; (100154e0 <__aeabi_ddiv+0x61c>)
10015286:	9b01      	ldr	r3, [sp, #4]
10015288:	4694      	mov	ip, r2
1001528a:	4463      	add	r3, ip
1001528c:	2b00      	cmp	r3, #0
1001528e:	dc00      	bgt.n	10015292 <__aeabi_ddiv+0x3ce>
10015290:	e6f3      	b.n	1001507a <__aeabi_ddiv+0x1b6>
10015292:	074a      	lsls	r2, r1, #29
10015294:	d009      	beq.n	100152aa <__aeabi_ddiv+0x3e6>
10015296:	220f      	movs	r2, #15
10015298:	400a      	ands	r2, r1
1001529a:	2a04      	cmp	r2, #4
1001529c:	d005      	beq.n	100152aa <__aeabi_ddiv+0x3e6>
1001529e:	1d0a      	adds	r2, r1, #4
100152a0:	428a      	cmp	r2, r1
100152a2:	4189      	sbcs	r1, r1
100152a4:	4249      	negs	r1, r1
100152a6:	448b      	add	fp, r1
100152a8:	0011      	movs	r1, r2
100152aa:	465a      	mov	r2, fp
100152ac:	01d2      	lsls	r2, r2, #7
100152ae:	d508      	bpl.n	100152c2 <__aeabi_ddiv+0x3fe>
100152b0:	465a      	mov	r2, fp
100152b2:	4b8c      	ldr	r3, [pc, #560]	; (100154e4 <__aeabi_ddiv+0x620>)
100152b4:	401a      	ands	r2, r3
100152b6:	4693      	mov	fp, r2
100152b8:	2280      	movs	r2, #128	; 0x80
100152ba:	00d2      	lsls	r2, r2, #3
100152bc:	4694      	mov	ip, r2
100152be:	9b01      	ldr	r3, [sp, #4]
100152c0:	4463      	add	r3, ip
100152c2:	4a89      	ldr	r2, [pc, #548]	; (100154e8 <__aeabi_ddiv+0x624>)
100152c4:	4293      	cmp	r3, r2
100152c6:	dd00      	ble.n	100152ca <__aeabi_ddiv+0x406>
100152c8:	e65b      	b.n	10014f82 <__aeabi_ddiv+0xbe>
100152ca:	465a      	mov	r2, fp
100152cc:	08c9      	lsrs	r1, r1, #3
100152ce:	0750      	lsls	r0, r2, #29
100152d0:	4308      	orrs	r0, r1
100152d2:	0256      	lsls	r6, r2, #9
100152d4:	4651      	mov	r1, sl
100152d6:	2201      	movs	r2, #1
100152d8:	055b      	lsls	r3, r3, #21
100152da:	4681      	mov	r9, r0
100152dc:	0b36      	lsrs	r6, r6, #12
100152de:	0d5b      	lsrs	r3, r3, #21
100152e0:	400a      	ands	r2, r1
100152e2:	e655      	b.n	10014f90 <__aeabi_ddiv+0xcc>
100152e4:	2380      	movs	r3, #128	; 0x80
100152e6:	031b      	lsls	r3, r3, #12
100152e8:	421e      	tst	r6, r3
100152ea:	d011      	beq.n	10015310 <__aeabi_ddiv+0x44c>
100152ec:	465a      	mov	r2, fp
100152ee:	421a      	tst	r2, r3
100152f0:	d10e      	bne.n	10015310 <__aeabi_ddiv+0x44c>
100152f2:	465e      	mov	r6, fp
100152f4:	431e      	orrs	r6, r3
100152f6:	0336      	lsls	r6, r6, #12
100152f8:	0b36      	lsrs	r6, r6, #12
100152fa:	002a      	movs	r2, r5
100152fc:	4689      	mov	r9, r1
100152fe:	4b7b      	ldr	r3, [pc, #492]	; (100154ec <__aeabi_ddiv+0x628>)
10015300:	e646      	b.n	10014f90 <__aeabi_ddiv+0xcc>
10015302:	2b03      	cmp	r3, #3
10015304:	d100      	bne.n	10015308 <__aeabi_ddiv+0x444>
10015306:	e0e1      	b.n	100154cc <__aeabi_ddiv+0x608>
10015308:	2b01      	cmp	r3, #1
1001530a:	d1bb      	bne.n	10015284 <__aeabi_ddiv+0x3c0>
1001530c:	401a      	ands	r2, r3
1001530e:	e6bb      	b.n	10015088 <__aeabi_ddiv+0x1c4>
10015310:	431e      	orrs	r6, r3
10015312:	0336      	lsls	r6, r6, #12
10015314:	0b36      	lsrs	r6, r6, #12
10015316:	4642      	mov	r2, r8
10015318:	4b74      	ldr	r3, [pc, #464]	; (100154ec <__aeabi_ddiv+0x628>)
1001531a:	e639      	b.n	10014f90 <__aeabi_ddiv+0xcc>
1001531c:	2b00      	cmp	r3, #0
1001531e:	d0b1      	beq.n	10015284 <__aeabi_ddiv+0x3c0>
10015320:	197d      	adds	r5, r7, r5
10015322:	1e4a      	subs	r2, r1, #1
10015324:	42af      	cmp	r7, r5
10015326:	d952      	bls.n	100153ce <__aeabi_ddiv+0x50a>
10015328:	0011      	movs	r1, r2
1001532a:	42a5      	cmp	r5, r4
1001532c:	d1a8      	bne.n	10015280 <__aeabi_ddiv+0x3bc>
1001532e:	9a03      	ldr	r2, [sp, #12]
10015330:	429a      	cmp	r2, r3
10015332:	d1a5      	bne.n	10015280 <__aeabi_ddiv+0x3bc>
10015334:	e7a6      	b.n	10015284 <__aeabi_ddiv+0x3c0>
10015336:	0003      	movs	r3, r0
10015338:	003e      	movs	r6, r7
1001533a:	3b28      	subs	r3, #40	; 0x28
1001533c:	409e      	lsls	r6, r3
1001533e:	2300      	movs	r3, #0
10015340:	4699      	mov	r9, r3
10015342:	e654      	b.n	10014fee <__aeabi_ddiv+0x12a>
10015344:	f001 f960 	bl	10016608 <__clzsi2>
10015348:	3020      	adds	r0, #32
1001534a:	e641      	b.n	10014fd0 <__aeabi_ddiv+0x10c>
1001534c:	0003      	movs	r3, r0
1001534e:	4652      	mov	r2, sl
10015350:	3b28      	subs	r3, #40	; 0x28
10015352:	409a      	lsls	r2, r3
10015354:	2100      	movs	r1, #0
10015356:	4693      	mov	fp, r2
10015358:	e677      	b.n	1001504a <__aeabi_ddiv+0x186>
1001535a:	4650      	mov	r0, sl
1001535c:	f001 f954 	bl	10016608 <__clzsi2>
10015360:	3020      	adds	r0, #32
10015362:	e65e      	b.n	10015022 <__aeabi_ddiv+0x15e>
10015364:	9b02      	ldr	r3, [sp, #8]
10015366:	2600      	movs	r6, #0
10015368:	42ab      	cmp	r3, r5
1001536a:	d300      	bcc.n	1001536e <__aeabi_ddiv+0x4aa>
1001536c:	e723      	b.n	100151b6 <__aeabi_ddiv+0x2f2>
1001536e:	9e03      	ldr	r6, [sp, #12]
10015370:	9902      	ldr	r1, [sp, #8]
10015372:	46b4      	mov	ip, r6
10015374:	4461      	add	r1, ip
10015376:	4688      	mov	r8, r1
10015378:	45b0      	cmp	r8, r6
1001537a:	41b6      	sbcs	r6, r6
1001537c:	465b      	mov	r3, fp
1001537e:	4276      	negs	r6, r6
10015380:	19f6      	adds	r6, r6, r7
10015382:	18b2      	adds	r2, r6, r2
10015384:	3b01      	subs	r3, #1
10015386:	9102      	str	r1, [sp, #8]
10015388:	4297      	cmp	r7, r2
1001538a:	d213      	bcs.n	100153b4 <__aeabi_ddiv+0x4f0>
1001538c:	4290      	cmp	r0, r2
1001538e:	d84f      	bhi.n	10015430 <__aeabi_ddiv+0x56c>
10015390:	d100      	bne.n	10015394 <__aeabi_ddiv+0x4d0>
10015392:	e08e      	b.n	100154b2 <__aeabi_ddiv+0x5ee>
10015394:	1a16      	subs	r6, r2, r0
10015396:	469b      	mov	fp, r3
10015398:	e70d      	b.n	100151b6 <__aeabi_ddiv+0x2f2>
1001539a:	4589      	cmp	r9, r1
1001539c:	d200      	bcs.n	100153a0 <__aeabi_ddiv+0x4dc>
1001539e:	e68e      	b.n	100150be <__aeabi_ddiv+0x1fa>
100153a0:	0874      	lsrs	r4, r6, #1
100153a2:	464b      	mov	r3, r9
100153a4:	07f6      	lsls	r6, r6, #31
100153a6:	0035      	movs	r5, r6
100153a8:	085b      	lsrs	r3, r3, #1
100153aa:	431d      	orrs	r5, r3
100153ac:	464b      	mov	r3, r9
100153ae:	07db      	lsls	r3, r3, #31
100153b0:	9302      	str	r3, [sp, #8]
100153b2:	e68b      	b.n	100150cc <__aeabi_ddiv+0x208>
100153b4:	4297      	cmp	r7, r2
100153b6:	d1ed      	bne.n	10015394 <__aeabi_ddiv+0x4d0>
100153b8:	9903      	ldr	r1, [sp, #12]
100153ba:	9c02      	ldr	r4, [sp, #8]
100153bc:	42a1      	cmp	r1, r4
100153be:	d9e5      	bls.n	1001538c <__aeabi_ddiv+0x4c8>
100153c0:	1a3e      	subs	r6, r7, r0
100153c2:	469b      	mov	fp, r3
100153c4:	e6f7      	b.n	100151b6 <__aeabi_ddiv+0x2f2>
100153c6:	4698      	mov	r8, r3
100153c8:	e6ca      	b.n	10015160 <__aeabi_ddiv+0x29c>
100153ca:	001e      	movs	r6, r3
100153cc:	e6a5      	b.n	1001511a <__aeabi_ddiv+0x256>
100153ce:	42ac      	cmp	r4, r5
100153d0:	d83e      	bhi.n	10015450 <__aeabi_ddiv+0x58c>
100153d2:	d074      	beq.n	100154be <__aeabi_ddiv+0x5fa>
100153d4:	0011      	movs	r1, r2
100153d6:	e753      	b.n	10015280 <__aeabi_ddiv+0x3bc>
100153d8:	2101      	movs	r1, #1
100153da:	4249      	negs	r1, r1
100153dc:	e752      	b.n	10015284 <__aeabi_ddiv+0x3c0>
100153de:	001c      	movs	r4, r3
100153e0:	e70e      	b.n	10015200 <__aeabi_ddiv+0x33c>
100153e2:	001e      	movs	r6, r3
100153e4:	e72b      	b.n	1001523e <__aeabi_ddiv+0x37a>
100153e6:	2d1f      	cmp	r5, #31
100153e8:	dc3c      	bgt.n	10015464 <__aeabi_ddiv+0x5a0>
100153ea:	2320      	movs	r3, #32
100153ec:	000a      	movs	r2, r1
100153ee:	4658      	mov	r0, fp
100153f0:	1b5b      	subs	r3, r3, r5
100153f2:	4098      	lsls	r0, r3
100153f4:	40ea      	lsrs	r2, r5
100153f6:	4099      	lsls	r1, r3
100153f8:	4302      	orrs	r2, r0
100153fa:	1e48      	subs	r0, r1, #1
100153fc:	4181      	sbcs	r1, r0
100153fe:	465e      	mov	r6, fp
10015400:	4311      	orrs	r1, r2
10015402:	40ee      	lsrs	r6, r5
10015404:	074b      	lsls	r3, r1, #29
10015406:	d009      	beq.n	1001541c <__aeabi_ddiv+0x558>
10015408:	230f      	movs	r3, #15
1001540a:	400b      	ands	r3, r1
1001540c:	2b04      	cmp	r3, #4
1001540e:	d005      	beq.n	1001541c <__aeabi_ddiv+0x558>
10015410:	000b      	movs	r3, r1
10015412:	1d19      	adds	r1, r3, #4
10015414:	4299      	cmp	r1, r3
10015416:	419b      	sbcs	r3, r3
10015418:	425b      	negs	r3, r3
1001541a:	18f6      	adds	r6, r6, r3
1001541c:	0233      	lsls	r3, r6, #8
1001541e:	d53c      	bpl.n	1001549a <__aeabi_ddiv+0x5d6>
10015420:	4653      	mov	r3, sl
10015422:	2201      	movs	r2, #1
10015424:	2100      	movs	r1, #0
10015426:	401a      	ands	r2, r3
10015428:	2600      	movs	r6, #0
1001542a:	2301      	movs	r3, #1
1001542c:	4689      	mov	r9, r1
1001542e:	e5af      	b.n	10014f90 <__aeabi_ddiv+0xcc>
10015430:	2302      	movs	r3, #2
10015432:	425b      	negs	r3, r3
10015434:	469c      	mov	ip, r3
10015436:	9c03      	ldr	r4, [sp, #12]
10015438:	44e3      	add	fp, ip
1001543a:	46a4      	mov	ip, r4
1001543c:	9b02      	ldr	r3, [sp, #8]
1001543e:	4463      	add	r3, ip
10015440:	4698      	mov	r8, r3
10015442:	45a0      	cmp	r8, r4
10015444:	41b6      	sbcs	r6, r6
10015446:	4276      	negs	r6, r6
10015448:	19f6      	adds	r6, r6, r7
1001544a:	9302      	str	r3, [sp, #8]
1001544c:	18b2      	adds	r2, r6, r2
1001544e:	e6b1      	b.n	100151b4 <__aeabi_ddiv+0x2f0>
10015450:	9803      	ldr	r0, [sp, #12]
10015452:	1e8a      	subs	r2, r1, #2
10015454:	0041      	lsls	r1, r0, #1
10015456:	4281      	cmp	r1, r0
10015458:	41b6      	sbcs	r6, r6
1001545a:	4276      	negs	r6, r6
1001545c:	19f6      	adds	r6, r6, r7
1001545e:	19ad      	adds	r5, r5, r6
10015460:	9103      	str	r1, [sp, #12]
10015462:	e761      	b.n	10015328 <__aeabi_ddiv+0x464>
10015464:	221f      	movs	r2, #31
10015466:	4252      	negs	r2, r2
10015468:	1ad3      	subs	r3, r2, r3
1001546a:	465a      	mov	r2, fp
1001546c:	40da      	lsrs	r2, r3
1001546e:	0013      	movs	r3, r2
10015470:	2d20      	cmp	r5, #32
10015472:	d029      	beq.n	100154c8 <__aeabi_ddiv+0x604>
10015474:	2240      	movs	r2, #64	; 0x40
10015476:	4658      	mov	r0, fp
10015478:	1b55      	subs	r5, r2, r5
1001547a:	40a8      	lsls	r0, r5
1001547c:	4301      	orrs	r1, r0
1001547e:	1e48      	subs	r0, r1, #1
10015480:	4181      	sbcs	r1, r0
10015482:	2007      	movs	r0, #7
10015484:	430b      	orrs	r3, r1
10015486:	4018      	ands	r0, r3
10015488:	2600      	movs	r6, #0
1001548a:	2800      	cmp	r0, #0
1001548c:	d009      	beq.n	100154a2 <__aeabi_ddiv+0x5de>
1001548e:	220f      	movs	r2, #15
10015490:	2600      	movs	r6, #0
10015492:	401a      	ands	r2, r3
10015494:	0019      	movs	r1, r3
10015496:	2a04      	cmp	r2, #4
10015498:	d1bb      	bne.n	10015412 <__aeabi_ddiv+0x54e>
1001549a:	000b      	movs	r3, r1
1001549c:	0770      	lsls	r0, r6, #29
1001549e:	0276      	lsls	r6, r6, #9
100154a0:	0b36      	lsrs	r6, r6, #12
100154a2:	08db      	lsrs	r3, r3, #3
100154a4:	4303      	orrs	r3, r0
100154a6:	4699      	mov	r9, r3
100154a8:	2201      	movs	r2, #1
100154aa:	4653      	mov	r3, sl
100154ac:	401a      	ands	r2, r3
100154ae:	2300      	movs	r3, #0
100154b0:	e56e      	b.n	10014f90 <__aeabi_ddiv+0xcc>
100154b2:	9902      	ldr	r1, [sp, #8]
100154b4:	428d      	cmp	r5, r1
100154b6:	d8bb      	bhi.n	10015430 <__aeabi_ddiv+0x56c>
100154b8:	469b      	mov	fp, r3
100154ba:	2600      	movs	r6, #0
100154bc:	e67b      	b.n	100151b6 <__aeabi_ddiv+0x2f2>
100154be:	9803      	ldr	r0, [sp, #12]
100154c0:	4298      	cmp	r0, r3
100154c2:	d3c5      	bcc.n	10015450 <__aeabi_ddiv+0x58c>
100154c4:	0011      	movs	r1, r2
100154c6:	e732      	b.n	1001532e <__aeabi_ddiv+0x46a>
100154c8:	2000      	movs	r0, #0
100154ca:	e7d7      	b.n	1001547c <__aeabi_ddiv+0x5b8>
100154cc:	2680      	movs	r6, #128	; 0x80
100154ce:	465b      	mov	r3, fp
100154d0:	0336      	lsls	r6, r6, #12
100154d2:	431e      	orrs	r6, r3
100154d4:	0336      	lsls	r6, r6, #12
100154d6:	0b36      	lsrs	r6, r6, #12
100154d8:	9a00      	ldr	r2, [sp, #0]
100154da:	4689      	mov	r9, r1
100154dc:	4b03      	ldr	r3, [pc, #12]	; (100154ec <__aeabi_ddiv+0x628>)
100154de:	e557      	b.n	10014f90 <__aeabi_ddiv+0xcc>
100154e0:	000003ff 	.word	0x000003ff
100154e4:	feffffff 	.word	0xfeffffff
100154e8:	000007fe 	.word	0x000007fe
100154ec:	000007ff 	.word	0x000007ff

100154f0 <__eqdf2>:
100154f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100154f2:	465f      	mov	r7, fp
100154f4:	4656      	mov	r6, sl
100154f6:	464d      	mov	r5, r9
100154f8:	4644      	mov	r4, r8
100154fa:	b4f0      	push	{r4, r5, r6, r7}
100154fc:	031f      	lsls	r7, r3, #12
100154fe:	005c      	lsls	r4, r3, #1
10015500:	0fdb      	lsrs	r3, r3, #31
10015502:	469a      	mov	sl, r3
10015504:	4b19      	ldr	r3, [pc, #100]	; (1001556c <__eqdf2+0x7c>)
10015506:	030e      	lsls	r6, r1, #12
10015508:	004d      	lsls	r5, r1, #1
1001550a:	0fc9      	lsrs	r1, r1, #31
1001550c:	4680      	mov	r8, r0
1001550e:	0b36      	lsrs	r6, r6, #12
10015510:	0d6d      	lsrs	r5, r5, #21
10015512:	468b      	mov	fp, r1
10015514:	4691      	mov	r9, r2
10015516:	0b3f      	lsrs	r7, r7, #12
10015518:	0d64      	lsrs	r4, r4, #21
1001551a:	429d      	cmp	r5, r3
1001551c:	d019      	beq.n	10015552 <__eqdf2+0x62>
1001551e:	4b13      	ldr	r3, [pc, #76]	; (1001556c <__eqdf2+0x7c>)
10015520:	429c      	cmp	r4, r3
10015522:	d01b      	beq.n	1001555c <__eqdf2+0x6c>
10015524:	2301      	movs	r3, #1
10015526:	42a5      	cmp	r5, r4
10015528:	d006      	beq.n	10015538 <__eqdf2+0x48>
1001552a:	0018      	movs	r0, r3
1001552c:	bc3c      	pop	{r2, r3, r4, r5}
1001552e:	4690      	mov	r8, r2
10015530:	4699      	mov	r9, r3
10015532:	46a2      	mov	sl, r4
10015534:	46ab      	mov	fp, r5
10015536:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015538:	42be      	cmp	r6, r7
1001553a:	d1f6      	bne.n	1001552a <__eqdf2+0x3a>
1001553c:	45c8      	cmp	r8, r9
1001553e:	d1f4      	bne.n	1001552a <__eqdf2+0x3a>
10015540:	45d3      	cmp	fp, sl
10015542:	d010      	beq.n	10015566 <__eqdf2+0x76>
10015544:	2d00      	cmp	r5, #0
10015546:	d1f0      	bne.n	1001552a <__eqdf2+0x3a>
10015548:	4330      	orrs	r0, r6
1001554a:	0003      	movs	r3, r0
1001554c:	1e5a      	subs	r2, r3, #1
1001554e:	4193      	sbcs	r3, r2
10015550:	e7eb      	b.n	1001552a <__eqdf2+0x3a>
10015552:	0031      	movs	r1, r6
10015554:	2301      	movs	r3, #1
10015556:	4301      	orrs	r1, r0
10015558:	d1e7      	bne.n	1001552a <__eqdf2+0x3a>
1001555a:	e7e0      	b.n	1001551e <__eqdf2+0x2e>
1001555c:	433a      	orrs	r2, r7
1001555e:	2301      	movs	r3, #1
10015560:	2a00      	cmp	r2, #0
10015562:	d1e2      	bne.n	1001552a <__eqdf2+0x3a>
10015564:	e7de      	b.n	10015524 <__eqdf2+0x34>
10015566:	2300      	movs	r3, #0
10015568:	e7df      	b.n	1001552a <__eqdf2+0x3a>
1001556a:	46c0      	nop			; (mov r8, r8)
1001556c:	000007ff 	.word	0x000007ff

10015570 <__gedf2>:
10015570:	b5f0      	push	{r4, r5, r6, r7, lr}
10015572:	465f      	mov	r7, fp
10015574:	4644      	mov	r4, r8
10015576:	4656      	mov	r6, sl
10015578:	464d      	mov	r5, r9
1001557a:	b4f0      	push	{r4, r5, r6, r7}
1001557c:	031f      	lsls	r7, r3, #12
1001557e:	0b3c      	lsrs	r4, r7, #12
10015580:	4f2c      	ldr	r7, [pc, #176]	; (10015634 <__gedf2+0xc4>)
10015582:	030e      	lsls	r6, r1, #12
10015584:	004d      	lsls	r5, r1, #1
10015586:	46a3      	mov	fp, r4
10015588:	005c      	lsls	r4, r3, #1
1001558a:	4684      	mov	ip, r0
1001558c:	0b36      	lsrs	r6, r6, #12
1001558e:	0d6d      	lsrs	r5, r5, #21
10015590:	0fc9      	lsrs	r1, r1, #31
10015592:	4690      	mov	r8, r2
10015594:	0d64      	lsrs	r4, r4, #21
10015596:	0fdb      	lsrs	r3, r3, #31
10015598:	42bd      	cmp	r5, r7
1001559a:	d02b      	beq.n	100155f4 <__gedf2+0x84>
1001559c:	4f25      	ldr	r7, [pc, #148]	; (10015634 <__gedf2+0xc4>)
1001559e:	42bc      	cmp	r4, r7
100155a0:	d02e      	beq.n	10015600 <__gedf2+0x90>
100155a2:	2d00      	cmp	r5, #0
100155a4:	d10e      	bne.n	100155c4 <__gedf2+0x54>
100155a6:	4330      	orrs	r0, r6
100155a8:	0007      	movs	r7, r0
100155aa:	4681      	mov	r9, r0
100155ac:	4278      	negs	r0, r7
100155ae:	4178      	adcs	r0, r7
100155b0:	2c00      	cmp	r4, #0
100155b2:	d117      	bne.n	100155e4 <__gedf2+0x74>
100155b4:	465f      	mov	r7, fp
100155b6:	433a      	orrs	r2, r7
100155b8:	d114      	bne.n	100155e4 <__gedf2+0x74>
100155ba:	464b      	mov	r3, r9
100155bc:	2000      	movs	r0, #0
100155be:	2b00      	cmp	r3, #0
100155c0:	d00a      	beq.n	100155d8 <__gedf2+0x68>
100155c2:	e006      	b.n	100155d2 <__gedf2+0x62>
100155c4:	2c00      	cmp	r4, #0
100155c6:	d102      	bne.n	100155ce <__gedf2+0x5e>
100155c8:	4658      	mov	r0, fp
100155ca:	4302      	orrs	r2, r0
100155cc:	d001      	beq.n	100155d2 <__gedf2+0x62>
100155ce:	4299      	cmp	r1, r3
100155d0:	d01a      	beq.n	10015608 <__gedf2+0x98>
100155d2:	2301      	movs	r3, #1
100155d4:	4248      	negs	r0, r1
100155d6:	4318      	orrs	r0, r3
100155d8:	bc3c      	pop	{r2, r3, r4, r5}
100155da:	4690      	mov	r8, r2
100155dc:	4699      	mov	r9, r3
100155de:	46a2      	mov	sl, r4
100155e0:	46ab      	mov	fp, r5
100155e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100155e4:	2800      	cmp	r0, #0
100155e6:	d0f2      	beq.n	100155ce <__gedf2+0x5e>
100155e8:	4258      	negs	r0, r3
100155ea:	4158      	adcs	r0, r3
100155ec:	2201      	movs	r2, #1
100155ee:	4240      	negs	r0, r0
100155f0:	4310      	orrs	r0, r2
100155f2:	e7f1      	b.n	100155d8 <__gedf2+0x68>
100155f4:	0037      	movs	r7, r6
100155f6:	4307      	orrs	r7, r0
100155f8:	d0d0      	beq.n	1001559c <__gedf2+0x2c>
100155fa:	2002      	movs	r0, #2
100155fc:	4240      	negs	r0, r0
100155fe:	e7eb      	b.n	100155d8 <__gedf2+0x68>
10015600:	465f      	mov	r7, fp
10015602:	4317      	orrs	r7, r2
10015604:	d0cd      	beq.n	100155a2 <__gedf2+0x32>
10015606:	e7f8      	b.n	100155fa <__gedf2+0x8a>
10015608:	42a5      	cmp	r5, r4
1001560a:	dce2      	bgt.n	100155d2 <__gedf2+0x62>
1001560c:	db05      	blt.n	1001561a <__gedf2+0xaa>
1001560e:	455e      	cmp	r6, fp
10015610:	d8df      	bhi.n	100155d2 <__gedf2+0x62>
10015612:	d008      	beq.n	10015626 <__gedf2+0xb6>
10015614:	2000      	movs	r0, #0
10015616:	455e      	cmp	r6, fp
10015618:	d2de      	bcs.n	100155d8 <__gedf2+0x68>
1001561a:	4248      	negs	r0, r1
1001561c:	4148      	adcs	r0, r1
1001561e:	2301      	movs	r3, #1
10015620:	4240      	negs	r0, r0
10015622:	4318      	orrs	r0, r3
10015624:	e7d8      	b.n	100155d8 <__gedf2+0x68>
10015626:	45c4      	cmp	ip, r8
10015628:	d8d3      	bhi.n	100155d2 <__gedf2+0x62>
1001562a:	2000      	movs	r0, #0
1001562c:	45c4      	cmp	ip, r8
1001562e:	d3f4      	bcc.n	1001561a <__gedf2+0xaa>
10015630:	e7d2      	b.n	100155d8 <__gedf2+0x68>
10015632:	46c0      	nop			; (mov r8, r8)
10015634:	000007ff 	.word	0x000007ff

10015638 <__ledf2>:
10015638:	b5f0      	push	{r4, r5, r6, r7, lr}
1001563a:	465f      	mov	r7, fp
1001563c:	464d      	mov	r5, r9
1001563e:	4644      	mov	r4, r8
10015640:	4656      	mov	r6, sl
10015642:	b4f0      	push	{r4, r5, r6, r7}
10015644:	031c      	lsls	r4, r3, #12
10015646:	0b24      	lsrs	r4, r4, #12
10015648:	46a4      	mov	ip, r4
1001564a:	4c2f      	ldr	r4, [pc, #188]	; (10015708 <__ledf2+0xd0>)
1001564c:	030f      	lsls	r7, r1, #12
1001564e:	004d      	lsls	r5, r1, #1
10015650:	005e      	lsls	r6, r3, #1
10015652:	0fc9      	lsrs	r1, r1, #31
10015654:	4680      	mov	r8, r0
10015656:	0b3f      	lsrs	r7, r7, #12
10015658:	0d6d      	lsrs	r5, r5, #21
1001565a:	468b      	mov	fp, r1
1001565c:	4691      	mov	r9, r2
1001565e:	0d76      	lsrs	r6, r6, #21
10015660:	0fdb      	lsrs	r3, r3, #31
10015662:	42a5      	cmp	r5, r4
10015664:	d020      	beq.n	100156a8 <__ledf2+0x70>
10015666:	4c28      	ldr	r4, [pc, #160]	; (10015708 <__ledf2+0xd0>)
10015668:	42a6      	cmp	r6, r4
1001566a:	d022      	beq.n	100156b2 <__ledf2+0x7a>
1001566c:	2d00      	cmp	r5, #0
1001566e:	d112      	bne.n	10015696 <__ledf2+0x5e>
10015670:	4338      	orrs	r0, r7
10015672:	4244      	negs	r4, r0
10015674:	4144      	adcs	r4, r0
10015676:	2e00      	cmp	r6, #0
10015678:	d020      	beq.n	100156bc <__ledf2+0x84>
1001567a:	2c00      	cmp	r4, #0
1001567c:	d00d      	beq.n	1001569a <__ledf2+0x62>
1001567e:	425c      	negs	r4, r3
10015680:	4163      	adcs	r3, r4
10015682:	2401      	movs	r4, #1
10015684:	425b      	negs	r3, r3
10015686:	431c      	orrs	r4, r3
10015688:	0020      	movs	r0, r4
1001568a:	bc3c      	pop	{r2, r3, r4, r5}
1001568c:	4690      	mov	r8, r2
1001568e:	4699      	mov	r9, r3
10015690:	46a2      	mov	sl, r4
10015692:	46ab      	mov	fp, r5
10015694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015696:	2e00      	cmp	r6, #0
10015698:	d017      	beq.n	100156ca <__ledf2+0x92>
1001569a:	455b      	cmp	r3, fp
1001569c:	d019      	beq.n	100156d2 <__ledf2+0x9a>
1001569e:	465b      	mov	r3, fp
100156a0:	425c      	negs	r4, r3
100156a2:	2301      	movs	r3, #1
100156a4:	431c      	orrs	r4, r3
100156a6:	e7ef      	b.n	10015688 <__ledf2+0x50>
100156a8:	0039      	movs	r1, r7
100156aa:	2402      	movs	r4, #2
100156ac:	4301      	orrs	r1, r0
100156ae:	d1eb      	bne.n	10015688 <__ledf2+0x50>
100156b0:	e7d9      	b.n	10015666 <__ledf2+0x2e>
100156b2:	4661      	mov	r1, ip
100156b4:	2402      	movs	r4, #2
100156b6:	4311      	orrs	r1, r2
100156b8:	d1e6      	bne.n	10015688 <__ledf2+0x50>
100156ba:	e7d7      	b.n	1001566c <__ledf2+0x34>
100156bc:	4661      	mov	r1, ip
100156be:	430a      	orrs	r2, r1
100156c0:	d1db      	bne.n	1001567a <__ledf2+0x42>
100156c2:	2400      	movs	r4, #0
100156c4:	2800      	cmp	r0, #0
100156c6:	d0df      	beq.n	10015688 <__ledf2+0x50>
100156c8:	e7e9      	b.n	1001569e <__ledf2+0x66>
100156ca:	4661      	mov	r1, ip
100156cc:	430a      	orrs	r2, r1
100156ce:	d1e4      	bne.n	1001569a <__ledf2+0x62>
100156d0:	e7e5      	b.n	1001569e <__ledf2+0x66>
100156d2:	42b5      	cmp	r5, r6
100156d4:	dd03      	ble.n	100156de <__ledf2+0xa6>
100156d6:	2201      	movs	r2, #1
100156d8:	425c      	negs	r4, r3
100156da:	4314      	orrs	r4, r2
100156dc:	e7d4      	b.n	10015688 <__ledf2+0x50>
100156de:	42b5      	cmp	r5, r6
100156e0:	dbcd      	blt.n	1001567e <__ledf2+0x46>
100156e2:	4567      	cmp	r7, ip
100156e4:	d8db      	bhi.n	1001569e <__ledf2+0x66>
100156e6:	d009      	beq.n	100156fc <__ledf2+0xc4>
100156e8:	2400      	movs	r4, #0
100156ea:	4567      	cmp	r7, ip
100156ec:	d2cc      	bcs.n	10015688 <__ledf2+0x50>
100156ee:	4659      	mov	r1, fp
100156f0:	424c      	negs	r4, r1
100156f2:	4161      	adcs	r1, r4
100156f4:	2401      	movs	r4, #1
100156f6:	4249      	negs	r1, r1
100156f8:	430c      	orrs	r4, r1
100156fa:	e7c5      	b.n	10015688 <__ledf2+0x50>
100156fc:	45c8      	cmp	r8, r9
100156fe:	d8ce      	bhi.n	1001569e <__ledf2+0x66>
10015700:	2400      	movs	r4, #0
10015702:	45c8      	cmp	r8, r9
10015704:	d3f3      	bcc.n	100156ee <__ledf2+0xb6>
10015706:	e7bf      	b.n	10015688 <__ledf2+0x50>
10015708:	000007ff 	.word	0x000007ff

1001570c <__aeabi_dmul>:
1001570c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001570e:	465f      	mov	r7, fp
10015710:	4656      	mov	r6, sl
10015712:	464d      	mov	r5, r9
10015714:	4644      	mov	r4, r8
10015716:	b4f0      	push	{r4, r5, r6, r7}
10015718:	030d      	lsls	r5, r1, #12
1001571a:	4699      	mov	r9, r3
1001571c:	004e      	lsls	r6, r1, #1
1001571e:	0b2b      	lsrs	r3, r5, #12
10015720:	b087      	sub	sp, #28
10015722:	0007      	movs	r7, r0
10015724:	4692      	mov	sl, r2
10015726:	4680      	mov	r8, r0
10015728:	469b      	mov	fp, r3
1001572a:	0d76      	lsrs	r6, r6, #21
1001572c:	0fcc      	lsrs	r4, r1, #31
1001572e:	2e00      	cmp	r6, #0
10015730:	d069      	beq.n	10015806 <__aeabi_dmul+0xfa>
10015732:	4b6d      	ldr	r3, [pc, #436]	; (100158e8 <__aeabi_dmul+0x1dc>)
10015734:	429e      	cmp	r6, r3
10015736:	d035      	beq.n	100157a4 <__aeabi_dmul+0x98>
10015738:	465b      	mov	r3, fp
1001573a:	2280      	movs	r2, #128	; 0x80
1001573c:	00dd      	lsls	r5, r3, #3
1001573e:	0412      	lsls	r2, r2, #16
10015740:	0f43      	lsrs	r3, r0, #29
10015742:	4313      	orrs	r3, r2
10015744:	432b      	orrs	r3, r5
10015746:	469b      	mov	fp, r3
10015748:	00c3      	lsls	r3, r0, #3
1001574a:	4698      	mov	r8, r3
1001574c:	4b67      	ldr	r3, [pc, #412]	; (100158ec <__aeabi_dmul+0x1e0>)
1001574e:	2700      	movs	r7, #0
10015750:	469c      	mov	ip, r3
10015752:	2300      	movs	r3, #0
10015754:	4466      	add	r6, ip
10015756:	9301      	str	r3, [sp, #4]
10015758:	464a      	mov	r2, r9
1001575a:	0315      	lsls	r5, r2, #12
1001575c:	0050      	lsls	r0, r2, #1
1001575e:	0fd2      	lsrs	r2, r2, #31
10015760:	4653      	mov	r3, sl
10015762:	0b2d      	lsrs	r5, r5, #12
10015764:	0d40      	lsrs	r0, r0, #21
10015766:	4691      	mov	r9, r2
10015768:	d100      	bne.n	1001576c <__aeabi_dmul+0x60>
1001576a:	e076      	b.n	1001585a <__aeabi_dmul+0x14e>
1001576c:	4a5e      	ldr	r2, [pc, #376]	; (100158e8 <__aeabi_dmul+0x1dc>)
1001576e:	4290      	cmp	r0, r2
10015770:	d06c      	beq.n	1001584c <__aeabi_dmul+0x140>
10015772:	2280      	movs	r2, #128	; 0x80
10015774:	0f5b      	lsrs	r3, r3, #29
10015776:	0412      	lsls	r2, r2, #16
10015778:	4313      	orrs	r3, r2
1001577a:	4a5c      	ldr	r2, [pc, #368]	; (100158ec <__aeabi_dmul+0x1e0>)
1001577c:	00ed      	lsls	r5, r5, #3
1001577e:	4694      	mov	ip, r2
10015780:	431d      	orrs	r5, r3
10015782:	4653      	mov	r3, sl
10015784:	2200      	movs	r2, #0
10015786:	00db      	lsls	r3, r3, #3
10015788:	4460      	add	r0, ip
1001578a:	4649      	mov	r1, r9
1001578c:	1836      	adds	r6, r6, r0
1001578e:	1c70      	adds	r0, r6, #1
10015790:	4061      	eors	r1, r4
10015792:	9002      	str	r0, [sp, #8]
10015794:	4317      	orrs	r7, r2
10015796:	2f0f      	cmp	r7, #15
10015798:	d900      	bls.n	1001579c <__aeabi_dmul+0x90>
1001579a:	e0af      	b.n	100158fc <__aeabi_dmul+0x1f0>
1001579c:	4854      	ldr	r0, [pc, #336]	; (100158f0 <__aeabi_dmul+0x1e4>)
1001579e:	00bf      	lsls	r7, r7, #2
100157a0:	59c7      	ldr	r7, [r0, r7]
100157a2:	46bf      	mov	pc, r7
100157a4:	465b      	mov	r3, fp
100157a6:	431f      	orrs	r7, r3
100157a8:	d000      	beq.n	100157ac <__aeabi_dmul+0xa0>
100157aa:	e088      	b.n	100158be <__aeabi_dmul+0x1b2>
100157ac:	2300      	movs	r3, #0
100157ae:	469b      	mov	fp, r3
100157b0:	4698      	mov	r8, r3
100157b2:	3302      	adds	r3, #2
100157b4:	2708      	movs	r7, #8
100157b6:	9301      	str	r3, [sp, #4]
100157b8:	e7ce      	b.n	10015758 <__aeabi_dmul+0x4c>
100157ba:	4649      	mov	r1, r9
100157bc:	2a02      	cmp	r2, #2
100157be:	d06a      	beq.n	10015896 <__aeabi_dmul+0x18a>
100157c0:	2a03      	cmp	r2, #3
100157c2:	d100      	bne.n	100157c6 <__aeabi_dmul+0xba>
100157c4:	e209      	b.n	10015bda <__aeabi_dmul+0x4ce>
100157c6:	2a01      	cmp	r2, #1
100157c8:	d000      	beq.n	100157cc <__aeabi_dmul+0xc0>
100157ca:	e1bb      	b.n	10015b44 <__aeabi_dmul+0x438>
100157cc:	4011      	ands	r1, r2
100157ce:	2200      	movs	r2, #0
100157d0:	2300      	movs	r3, #0
100157d2:	2500      	movs	r5, #0
100157d4:	4690      	mov	r8, r2
100157d6:	b2cc      	uxtb	r4, r1
100157d8:	2100      	movs	r1, #0
100157da:	032d      	lsls	r5, r5, #12
100157dc:	0d0a      	lsrs	r2, r1, #20
100157de:	0512      	lsls	r2, r2, #20
100157e0:	0b2d      	lsrs	r5, r5, #12
100157e2:	4315      	orrs	r5, r2
100157e4:	4a43      	ldr	r2, [pc, #268]	; (100158f4 <__aeabi_dmul+0x1e8>)
100157e6:	051b      	lsls	r3, r3, #20
100157e8:	4015      	ands	r5, r2
100157ea:	431d      	orrs	r5, r3
100157ec:	006d      	lsls	r5, r5, #1
100157ee:	07e4      	lsls	r4, r4, #31
100157f0:	086d      	lsrs	r5, r5, #1
100157f2:	4325      	orrs	r5, r4
100157f4:	4640      	mov	r0, r8
100157f6:	0029      	movs	r1, r5
100157f8:	b007      	add	sp, #28
100157fa:	bc3c      	pop	{r2, r3, r4, r5}
100157fc:	4690      	mov	r8, r2
100157fe:	4699      	mov	r9, r3
10015800:	46a2      	mov	sl, r4
10015802:	46ab      	mov	fp, r5
10015804:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015806:	4303      	orrs	r3, r0
10015808:	d052      	beq.n	100158b0 <__aeabi_dmul+0x1a4>
1001580a:	465b      	mov	r3, fp
1001580c:	2b00      	cmp	r3, #0
1001580e:	d100      	bne.n	10015812 <__aeabi_dmul+0x106>
10015810:	e18a      	b.n	10015b28 <__aeabi_dmul+0x41c>
10015812:	4658      	mov	r0, fp
10015814:	f000 fef8 	bl	10016608 <__clzsi2>
10015818:	0003      	movs	r3, r0
1001581a:	3b0b      	subs	r3, #11
1001581c:	2b1c      	cmp	r3, #28
1001581e:	dd00      	ble.n	10015822 <__aeabi_dmul+0x116>
10015820:	e17b      	b.n	10015b1a <__aeabi_dmul+0x40e>
10015822:	221d      	movs	r2, #29
10015824:	1ad3      	subs	r3, r2, r3
10015826:	003a      	movs	r2, r7
10015828:	0001      	movs	r1, r0
1001582a:	465d      	mov	r5, fp
1001582c:	40da      	lsrs	r2, r3
1001582e:	3908      	subs	r1, #8
10015830:	408d      	lsls	r5, r1
10015832:	0013      	movs	r3, r2
10015834:	408f      	lsls	r7, r1
10015836:	432b      	orrs	r3, r5
10015838:	469b      	mov	fp, r3
1001583a:	46b8      	mov	r8, r7
1001583c:	4b2e      	ldr	r3, [pc, #184]	; (100158f8 <__aeabi_dmul+0x1ec>)
1001583e:	2700      	movs	r7, #0
10015840:	469c      	mov	ip, r3
10015842:	2300      	movs	r3, #0
10015844:	4460      	add	r0, ip
10015846:	4246      	negs	r6, r0
10015848:	9301      	str	r3, [sp, #4]
1001584a:	e785      	b.n	10015758 <__aeabi_dmul+0x4c>
1001584c:	4652      	mov	r2, sl
1001584e:	432a      	orrs	r2, r5
10015850:	d12c      	bne.n	100158ac <__aeabi_dmul+0x1a0>
10015852:	2500      	movs	r5, #0
10015854:	2300      	movs	r3, #0
10015856:	2202      	movs	r2, #2
10015858:	e797      	b.n	1001578a <__aeabi_dmul+0x7e>
1001585a:	4652      	mov	r2, sl
1001585c:	432a      	orrs	r2, r5
1001585e:	d021      	beq.n	100158a4 <__aeabi_dmul+0x198>
10015860:	2d00      	cmp	r5, #0
10015862:	d100      	bne.n	10015866 <__aeabi_dmul+0x15a>
10015864:	e154      	b.n	10015b10 <__aeabi_dmul+0x404>
10015866:	0028      	movs	r0, r5
10015868:	f000 fece 	bl	10016608 <__clzsi2>
1001586c:	0003      	movs	r3, r0
1001586e:	3b0b      	subs	r3, #11
10015870:	2b1c      	cmp	r3, #28
10015872:	dd00      	ble.n	10015876 <__aeabi_dmul+0x16a>
10015874:	e146      	b.n	10015b04 <__aeabi_dmul+0x3f8>
10015876:	211d      	movs	r1, #29
10015878:	1acb      	subs	r3, r1, r3
1001587a:	4651      	mov	r1, sl
1001587c:	0002      	movs	r2, r0
1001587e:	40d9      	lsrs	r1, r3
10015880:	4653      	mov	r3, sl
10015882:	3a08      	subs	r2, #8
10015884:	4095      	lsls	r5, r2
10015886:	4093      	lsls	r3, r2
10015888:	430d      	orrs	r5, r1
1001588a:	4a1b      	ldr	r2, [pc, #108]	; (100158f8 <__aeabi_dmul+0x1ec>)
1001588c:	4694      	mov	ip, r2
1001588e:	4460      	add	r0, ip
10015890:	4240      	negs	r0, r0
10015892:	2200      	movs	r2, #0
10015894:	e779      	b.n	1001578a <__aeabi_dmul+0x7e>
10015896:	2401      	movs	r4, #1
10015898:	2200      	movs	r2, #0
1001589a:	400c      	ands	r4, r1
1001589c:	4b12      	ldr	r3, [pc, #72]	; (100158e8 <__aeabi_dmul+0x1dc>)
1001589e:	2500      	movs	r5, #0
100158a0:	4690      	mov	r8, r2
100158a2:	e799      	b.n	100157d8 <__aeabi_dmul+0xcc>
100158a4:	2500      	movs	r5, #0
100158a6:	2300      	movs	r3, #0
100158a8:	2201      	movs	r2, #1
100158aa:	e76e      	b.n	1001578a <__aeabi_dmul+0x7e>
100158ac:	2203      	movs	r2, #3
100158ae:	e76c      	b.n	1001578a <__aeabi_dmul+0x7e>
100158b0:	2300      	movs	r3, #0
100158b2:	469b      	mov	fp, r3
100158b4:	4698      	mov	r8, r3
100158b6:	3301      	adds	r3, #1
100158b8:	2704      	movs	r7, #4
100158ba:	9301      	str	r3, [sp, #4]
100158bc:	e74c      	b.n	10015758 <__aeabi_dmul+0x4c>
100158be:	2303      	movs	r3, #3
100158c0:	270c      	movs	r7, #12
100158c2:	9301      	str	r3, [sp, #4]
100158c4:	e748      	b.n	10015758 <__aeabi_dmul+0x4c>
100158c6:	2300      	movs	r3, #0
100158c8:	2580      	movs	r5, #128	; 0x80
100158ca:	4698      	mov	r8, r3
100158cc:	2400      	movs	r4, #0
100158ce:	032d      	lsls	r5, r5, #12
100158d0:	4b05      	ldr	r3, [pc, #20]	; (100158e8 <__aeabi_dmul+0x1dc>)
100158d2:	e781      	b.n	100157d8 <__aeabi_dmul+0xcc>
100158d4:	465d      	mov	r5, fp
100158d6:	4643      	mov	r3, r8
100158d8:	9a01      	ldr	r2, [sp, #4]
100158da:	e76f      	b.n	100157bc <__aeabi_dmul+0xb0>
100158dc:	465d      	mov	r5, fp
100158de:	4643      	mov	r3, r8
100158e0:	0021      	movs	r1, r4
100158e2:	9a01      	ldr	r2, [sp, #4]
100158e4:	e76a      	b.n	100157bc <__aeabi_dmul+0xb0>
100158e6:	46c0      	nop			; (mov r8, r8)
100158e8:	000007ff 	.word	0x000007ff
100158ec:	fffffc01 	.word	0xfffffc01
100158f0:	10019230 	.word	0x10019230
100158f4:	800fffff 	.word	0x800fffff
100158f8:	000003f3 	.word	0x000003f3
100158fc:	4642      	mov	r2, r8
100158fe:	0c12      	lsrs	r2, r2, #16
10015900:	4691      	mov	r9, r2
10015902:	0c1a      	lsrs	r2, r3, #16
10015904:	4694      	mov	ip, r2
10015906:	4642      	mov	r2, r8
10015908:	0417      	lsls	r7, r2, #16
1001590a:	464a      	mov	r2, r9
1001590c:	041b      	lsls	r3, r3, #16
1001590e:	0c1b      	lsrs	r3, r3, #16
10015910:	435a      	muls	r2, r3
10015912:	4660      	mov	r0, ip
10015914:	4690      	mov	r8, r2
10015916:	464a      	mov	r2, r9
10015918:	4342      	muls	r2, r0
1001591a:	0010      	movs	r0, r2
1001591c:	9203      	str	r2, [sp, #12]
1001591e:	4662      	mov	r2, ip
10015920:	001c      	movs	r4, r3
10015922:	0c3f      	lsrs	r7, r7, #16
10015924:	437a      	muls	r2, r7
10015926:	437c      	muls	r4, r7
10015928:	4442      	add	r2, r8
1001592a:	9201      	str	r2, [sp, #4]
1001592c:	0c22      	lsrs	r2, r4, #16
1001592e:	4692      	mov	sl, r2
10015930:	9a01      	ldr	r2, [sp, #4]
10015932:	4452      	add	r2, sl
10015934:	4590      	cmp	r8, r2
10015936:	d906      	bls.n	10015946 <__aeabi_dmul+0x23a>
10015938:	4682      	mov	sl, r0
1001593a:	2080      	movs	r0, #128	; 0x80
1001593c:	0240      	lsls	r0, r0, #9
1001593e:	4680      	mov	r8, r0
10015940:	44c2      	add	sl, r8
10015942:	4650      	mov	r0, sl
10015944:	9003      	str	r0, [sp, #12]
10015946:	0c10      	lsrs	r0, r2, #16
10015948:	9004      	str	r0, [sp, #16]
1001594a:	4648      	mov	r0, r9
1001594c:	0424      	lsls	r4, r4, #16
1001594e:	0c24      	lsrs	r4, r4, #16
10015950:	0412      	lsls	r2, r2, #16
10015952:	1912      	adds	r2, r2, r4
10015954:	9205      	str	r2, [sp, #20]
10015956:	0c2a      	lsrs	r2, r5, #16
10015958:	042d      	lsls	r5, r5, #16
1001595a:	0c2d      	lsrs	r5, r5, #16
1001595c:	4368      	muls	r0, r5
1001595e:	002c      	movs	r4, r5
10015960:	4682      	mov	sl, r0
10015962:	4648      	mov	r0, r9
10015964:	437c      	muls	r4, r7
10015966:	4350      	muls	r0, r2
10015968:	4681      	mov	r9, r0
1001596a:	0c20      	lsrs	r0, r4, #16
1001596c:	4680      	mov	r8, r0
1001596e:	4357      	muls	r7, r2
10015970:	4457      	add	r7, sl
10015972:	4447      	add	r7, r8
10015974:	45ba      	cmp	sl, r7
10015976:	d903      	bls.n	10015980 <__aeabi_dmul+0x274>
10015978:	2080      	movs	r0, #128	; 0x80
1001597a:	0240      	lsls	r0, r0, #9
1001597c:	4680      	mov	r8, r0
1001597e:	44c1      	add	r9, r8
10015980:	0c38      	lsrs	r0, r7, #16
10015982:	043f      	lsls	r7, r7, #16
10015984:	46b8      	mov	r8, r7
10015986:	4448      	add	r0, r9
10015988:	0424      	lsls	r4, r4, #16
1001598a:	0c24      	lsrs	r4, r4, #16
1001598c:	9001      	str	r0, [sp, #4]
1001598e:	9804      	ldr	r0, [sp, #16]
10015990:	44a0      	add	r8, r4
10015992:	4440      	add	r0, r8
10015994:	9004      	str	r0, [sp, #16]
10015996:	4658      	mov	r0, fp
10015998:	0c00      	lsrs	r0, r0, #16
1001599a:	4681      	mov	r9, r0
1001599c:	4658      	mov	r0, fp
1001599e:	0404      	lsls	r4, r0, #16
100159a0:	0c20      	lsrs	r0, r4, #16
100159a2:	4682      	mov	sl, r0
100159a4:	0007      	movs	r7, r0
100159a6:	4648      	mov	r0, r9
100159a8:	435f      	muls	r7, r3
100159aa:	464c      	mov	r4, r9
100159ac:	4343      	muls	r3, r0
100159ae:	4660      	mov	r0, ip
100159b0:	4360      	muls	r0, r4
100159b2:	4664      	mov	r4, ip
100159b4:	4683      	mov	fp, r0
100159b6:	4650      	mov	r0, sl
100159b8:	4344      	muls	r4, r0
100159ba:	0c38      	lsrs	r0, r7, #16
100159bc:	4684      	mov	ip, r0
100159be:	18e4      	adds	r4, r4, r3
100159c0:	4464      	add	r4, ip
100159c2:	42a3      	cmp	r3, r4
100159c4:	d903      	bls.n	100159ce <__aeabi_dmul+0x2c2>
100159c6:	2380      	movs	r3, #128	; 0x80
100159c8:	025b      	lsls	r3, r3, #9
100159ca:	469c      	mov	ip, r3
100159cc:	44e3      	add	fp, ip
100159ce:	4648      	mov	r0, r9
100159d0:	043f      	lsls	r7, r7, #16
100159d2:	0c23      	lsrs	r3, r4, #16
100159d4:	0c3f      	lsrs	r7, r7, #16
100159d6:	0424      	lsls	r4, r4, #16
100159d8:	19e4      	adds	r4, r4, r7
100159da:	4657      	mov	r7, sl
100159dc:	4368      	muls	r0, r5
100159de:	436f      	muls	r7, r5
100159e0:	4684      	mov	ip, r0
100159e2:	464d      	mov	r5, r9
100159e4:	4650      	mov	r0, sl
100159e6:	4355      	muls	r5, r2
100159e8:	4342      	muls	r2, r0
100159ea:	0c38      	lsrs	r0, r7, #16
100159ec:	4681      	mov	r9, r0
100159ee:	4462      	add	r2, ip
100159f0:	444a      	add	r2, r9
100159f2:	445b      	add	r3, fp
100159f4:	4594      	cmp	ip, r2
100159f6:	d903      	bls.n	10015a00 <__aeabi_dmul+0x2f4>
100159f8:	2080      	movs	r0, #128	; 0x80
100159fa:	0240      	lsls	r0, r0, #9
100159fc:	4684      	mov	ip, r0
100159fe:	4465      	add	r5, ip
10015a00:	9803      	ldr	r0, [sp, #12]
10015a02:	043f      	lsls	r7, r7, #16
10015a04:	4683      	mov	fp, r0
10015a06:	9804      	ldr	r0, [sp, #16]
10015a08:	0c3f      	lsrs	r7, r7, #16
10015a0a:	4684      	mov	ip, r0
10015a0c:	44e3      	add	fp, ip
10015a0e:	45c3      	cmp	fp, r8
10015a10:	4180      	sbcs	r0, r0
10015a12:	4240      	negs	r0, r0
10015a14:	4682      	mov	sl, r0
10015a16:	0410      	lsls	r0, r2, #16
10015a18:	4684      	mov	ip, r0
10015a1a:	9801      	ldr	r0, [sp, #4]
10015a1c:	4467      	add	r7, ip
10015a1e:	4684      	mov	ip, r0
10015a20:	4467      	add	r7, ip
10015a22:	44a3      	add	fp, r4
10015a24:	46bc      	mov	ip, r7
10015a26:	45a3      	cmp	fp, r4
10015a28:	41a4      	sbcs	r4, r4
10015a2a:	4699      	mov	r9, r3
10015a2c:	44d4      	add	ip, sl
10015a2e:	4264      	negs	r4, r4
10015a30:	4287      	cmp	r7, r0
10015a32:	41bf      	sbcs	r7, r7
10015a34:	45d4      	cmp	ip, sl
10015a36:	4180      	sbcs	r0, r0
10015a38:	44e1      	add	r9, ip
10015a3a:	46a0      	mov	r8, r4
10015a3c:	4599      	cmp	r9, r3
10015a3e:	419b      	sbcs	r3, r3
10015a40:	427f      	negs	r7, r7
10015a42:	4240      	negs	r0, r0
10015a44:	44c8      	add	r8, r9
10015a46:	4307      	orrs	r7, r0
10015a48:	0c12      	lsrs	r2, r2, #16
10015a4a:	18ba      	adds	r2, r7, r2
10015a4c:	45a0      	cmp	r8, r4
10015a4e:	41a4      	sbcs	r4, r4
10015a50:	425f      	negs	r7, r3
10015a52:	003b      	movs	r3, r7
10015a54:	4264      	negs	r4, r4
10015a56:	4323      	orrs	r3, r4
10015a58:	18d7      	adds	r7, r2, r3
10015a5a:	4643      	mov	r3, r8
10015a5c:	197d      	adds	r5, r7, r5
10015a5e:	0ddb      	lsrs	r3, r3, #23
10015a60:	026d      	lsls	r5, r5, #9
10015a62:	431d      	orrs	r5, r3
10015a64:	465b      	mov	r3, fp
10015a66:	025a      	lsls	r2, r3, #9
10015a68:	9b05      	ldr	r3, [sp, #20]
10015a6a:	431a      	orrs	r2, r3
10015a6c:	1e53      	subs	r3, r2, #1
10015a6e:	419a      	sbcs	r2, r3
10015a70:	465b      	mov	r3, fp
10015a72:	0ddb      	lsrs	r3, r3, #23
10015a74:	431a      	orrs	r2, r3
10015a76:	4643      	mov	r3, r8
10015a78:	025b      	lsls	r3, r3, #9
10015a7a:	4313      	orrs	r3, r2
10015a7c:	01ea      	lsls	r2, r5, #7
10015a7e:	d507      	bpl.n	10015a90 <__aeabi_dmul+0x384>
10015a80:	2201      	movs	r2, #1
10015a82:	085c      	lsrs	r4, r3, #1
10015a84:	4013      	ands	r3, r2
10015a86:	4323      	orrs	r3, r4
10015a88:	07ea      	lsls	r2, r5, #31
10015a8a:	9e02      	ldr	r6, [sp, #8]
10015a8c:	4313      	orrs	r3, r2
10015a8e:	086d      	lsrs	r5, r5, #1
10015a90:	4a57      	ldr	r2, [pc, #348]	; (10015bf0 <__aeabi_dmul+0x4e4>)
10015a92:	18b2      	adds	r2, r6, r2
10015a94:	2a00      	cmp	r2, #0
10015a96:	dd4b      	ble.n	10015b30 <__aeabi_dmul+0x424>
10015a98:	0758      	lsls	r0, r3, #29
10015a9a:	d009      	beq.n	10015ab0 <__aeabi_dmul+0x3a4>
10015a9c:	200f      	movs	r0, #15
10015a9e:	4018      	ands	r0, r3
10015aa0:	2804      	cmp	r0, #4
10015aa2:	d005      	beq.n	10015ab0 <__aeabi_dmul+0x3a4>
10015aa4:	1d18      	adds	r0, r3, #4
10015aa6:	4298      	cmp	r0, r3
10015aa8:	419b      	sbcs	r3, r3
10015aaa:	425b      	negs	r3, r3
10015aac:	18ed      	adds	r5, r5, r3
10015aae:	0003      	movs	r3, r0
10015ab0:	01e8      	lsls	r0, r5, #7
10015ab2:	d504      	bpl.n	10015abe <__aeabi_dmul+0x3b2>
10015ab4:	4a4f      	ldr	r2, [pc, #316]	; (10015bf4 <__aeabi_dmul+0x4e8>)
10015ab6:	4015      	ands	r5, r2
10015ab8:	2280      	movs	r2, #128	; 0x80
10015aba:	00d2      	lsls	r2, r2, #3
10015abc:	18b2      	adds	r2, r6, r2
10015abe:	484e      	ldr	r0, [pc, #312]	; (10015bf8 <__aeabi_dmul+0x4ec>)
10015ac0:	4282      	cmp	r2, r0
10015ac2:	dd00      	ble.n	10015ac6 <__aeabi_dmul+0x3ba>
10015ac4:	e6e7      	b.n	10015896 <__aeabi_dmul+0x18a>
10015ac6:	2401      	movs	r4, #1
10015ac8:	08db      	lsrs	r3, r3, #3
10015aca:	0768      	lsls	r0, r5, #29
10015acc:	4318      	orrs	r0, r3
10015ace:	026d      	lsls	r5, r5, #9
10015ad0:	0553      	lsls	r3, r2, #21
10015ad2:	4680      	mov	r8, r0
10015ad4:	0b2d      	lsrs	r5, r5, #12
10015ad6:	0d5b      	lsrs	r3, r3, #21
10015ad8:	400c      	ands	r4, r1
10015ada:	e67d      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015adc:	2280      	movs	r2, #128	; 0x80
10015ade:	4659      	mov	r1, fp
10015ae0:	0312      	lsls	r2, r2, #12
10015ae2:	4211      	tst	r1, r2
10015ae4:	d008      	beq.n	10015af8 <__aeabi_dmul+0x3ec>
10015ae6:	4215      	tst	r5, r2
10015ae8:	d106      	bne.n	10015af8 <__aeabi_dmul+0x3ec>
10015aea:	4315      	orrs	r5, r2
10015aec:	032d      	lsls	r5, r5, #12
10015aee:	4698      	mov	r8, r3
10015af0:	0b2d      	lsrs	r5, r5, #12
10015af2:	464c      	mov	r4, r9
10015af4:	4b41      	ldr	r3, [pc, #260]	; (10015bfc <__aeabi_dmul+0x4f0>)
10015af6:	e66f      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015af8:	465d      	mov	r5, fp
10015afa:	4315      	orrs	r5, r2
10015afc:	032d      	lsls	r5, r5, #12
10015afe:	0b2d      	lsrs	r5, r5, #12
10015b00:	4b3e      	ldr	r3, [pc, #248]	; (10015bfc <__aeabi_dmul+0x4f0>)
10015b02:	e669      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015b04:	0003      	movs	r3, r0
10015b06:	4655      	mov	r5, sl
10015b08:	3b28      	subs	r3, #40	; 0x28
10015b0a:	409d      	lsls	r5, r3
10015b0c:	2300      	movs	r3, #0
10015b0e:	e6bc      	b.n	1001588a <__aeabi_dmul+0x17e>
10015b10:	4650      	mov	r0, sl
10015b12:	f000 fd79 	bl	10016608 <__clzsi2>
10015b16:	3020      	adds	r0, #32
10015b18:	e6a8      	b.n	1001586c <__aeabi_dmul+0x160>
10015b1a:	0003      	movs	r3, r0
10015b1c:	3b28      	subs	r3, #40	; 0x28
10015b1e:	409f      	lsls	r7, r3
10015b20:	2300      	movs	r3, #0
10015b22:	46bb      	mov	fp, r7
10015b24:	4698      	mov	r8, r3
10015b26:	e689      	b.n	1001583c <__aeabi_dmul+0x130>
10015b28:	f000 fd6e 	bl	10016608 <__clzsi2>
10015b2c:	3020      	adds	r0, #32
10015b2e:	e673      	b.n	10015818 <__aeabi_dmul+0x10c>
10015b30:	2401      	movs	r4, #1
10015b32:	1aa6      	subs	r6, r4, r2
10015b34:	2e38      	cmp	r6, #56	; 0x38
10015b36:	dd07      	ble.n	10015b48 <__aeabi_dmul+0x43c>
10015b38:	2200      	movs	r2, #0
10015b3a:	400c      	ands	r4, r1
10015b3c:	2300      	movs	r3, #0
10015b3e:	2500      	movs	r5, #0
10015b40:	4690      	mov	r8, r2
10015b42:	e649      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015b44:	9e02      	ldr	r6, [sp, #8]
10015b46:	e7a3      	b.n	10015a90 <__aeabi_dmul+0x384>
10015b48:	2e1f      	cmp	r6, #31
10015b4a:	dc20      	bgt.n	10015b8e <__aeabi_dmul+0x482>
10015b4c:	2220      	movs	r2, #32
10015b4e:	002c      	movs	r4, r5
10015b50:	0018      	movs	r0, r3
10015b52:	1b92      	subs	r2, r2, r6
10015b54:	40f0      	lsrs	r0, r6
10015b56:	4094      	lsls	r4, r2
10015b58:	4093      	lsls	r3, r2
10015b5a:	4304      	orrs	r4, r0
10015b5c:	1e58      	subs	r0, r3, #1
10015b5e:	4183      	sbcs	r3, r0
10015b60:	431c      	orrs	r4, r3
10015b62:	40f5      	lsrs	r5, r6
10015b64:	0763      	lsls	r3, r4, #29
10015b66:	d009      	beq.n	10015b7c <__aeabi_dmul+0x470>
10015b68:	230f      	movs	r3, #15
10015b6a:	4023      	ands	r3, r4
10015b6c:	2b04      	cmp	r3, #4
10015b6e:	d005      	beq.n	10015b7c <__aeabi_dmul+0x470>
10015b70:	0023      	movs	r3, r4
10015b72:	1d1c      	adds	r4, r3, #4
10015b74:	429c      	cmp	r4, r3
10015b76:	4192      	sbcs	r2, r2
10015b78:	4252      	negs	r2, r2
10015b7a:	18ad      	adds	r5, r5, r2
10015b7c:	022b      	lsls	r3, r5, #8
10015b7e:	d51f      	bpl.n	10015bc0 <__aeabi_dmul+0x4b4>
10015b80:	2401      	movs	r4, #1
10015b82:	2200      	movs	r2, #0
10015b84:	400c      	ands	r4, r1
10015b86:	2301      	movs	r3, #1
10015b88:	2500      	movs	r5, #0
10015b8a:	4690      	mov	r8, r2
10015b8c:	e624      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015b8e:	201f      	movs	r0, #31
10015b90:	002c      	movs	r4, r5
10015b92:	4240      	negs	r0, r0
10015b94:	1a82      	subs	r2, r0, r2
10015b96:	40d4      	lsrs	r4, r2
10015b98:	2e20      	cmp	r6, #32
10015b9a:	d01c      	beq.n	10015bd6 <__aeabi_dmul+0x4ca>
10015b9c:	2240      	movs	r2, #64	; 0x40
10015b9e:	1b96      	subs	r6, r2, r6
10015ba0:	40b5      	lsls	r5, r6
10015ba2:	432b      	orrs	r3, r5
10015ba4:	1e58      	subs	r0, r3, #1
10015ba6:	4183      	sbcs	r3, r0
10015ba8:	2007      	movs	r0, #7
10015baa:	4323      	orrs	r3, r4
10015bac:	4018      	ands	r0, r3
10015bae:	2500      	movs	r5, #0
10015bb0:	2800      	cmp	r0, #0
10015bb2:	d009      	beq.n	10015bc8 <__aeabi_dmul+0x4bc>
10015bb4:	220f      	movs	r2, #15
10015bb6:	2500      	movs	r5, #0
10015bb8:	401a      	ands	r2, r3
10015bba:	001c      	movs	r4, r3
10015bbc:	2a04      	cmp	r2, #4
10015bbe:	d1d8      	bne.n	10015b72 <__aeabi_dmul+0x466>
10015bc0:	0023      	movs	r3, r4
10015bc2:	0768      	lsls	r0, r5, #29
10015bc4:	026d      	lsls	r5, r5, #9
10015bc6:	0b2d      	lsrs	r5, r5, #12
10015bc8:	2401      	movs	r4, #1
10015bca:	08db      	lsrs	r3, r3, #3
10015bcc:	4303      	orrs	r3, r0
10015bce:	4698      	mov	r8, r3
10015bd0:	400c      	ands	r4, r1
10015bd2:	2300      	movs	r3, #0
10015bd4:	e600      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015bd6:	2500      	movs	r5, #0
10015bd8:	e7e3      	b.n	10015ba2 <__aeabi_dmul+0x496>
10015bda:	2280      	movs	r2, #128	; 0x80
10015bdc:	2401      	movs	r4, #1
10015bde:	0312      	lsls	r2, r2, #12
10015be0:	4315      	orrs	r5, r2
10015be2:	032d      	lsls	r5, r5, #12
10015be4:	4698      	mov	r8, r3
10015be6:	0b2d      	lsrs	r5, r5, #12
10015be8:	400c      	ands	r4, r1
10015bea:	4b04      	ldr	r3, [pc, #16]	; (10015bfc <__aeabi_dmul+0x4f0>)
10015bec:	e5f4      	b.n	100157d8 <__aeabi_dmul+0xcc>
10015bee:	46c0      	nop			; (mov r8, r8)
10015bf0:	000003ff 	.word	0x000003ff
10015bf4:	feffffff 	.word	0xfeffffff
10015bf8:	000007fe 	.word	0x000007fe
10015bfc:	000007ff 	.word	0x000007ff

10015c00 <__aeabi_dsub>:
10015c00:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c02:	4657      	mov	r7, sl
10015c04:	464e      	mov	r6, r9
10015c06:	4645      	mov	r5, r8
10015c08:	b4e0      	push	{r5, r6, r7}
10015c0a:	000e      	movs	r6, r1
10015c0c:	0011      	movs	r1, r2
10015c0e:	0ff2      	lsrs	r2, r6, #31
10015c10:	4692      	mov	sl, r2
10015c12:	00c5      	lsls	r5, r0, #3
10015c14:	0f42      	lsrs	r2, r0, #29
10015c16:	0318      	lsls	r0, r3, #12
10015c18:	0337      	lsls	r7, r6, #12
10015c1a:	0074      	lsls	r4, r6, #1
10015c1c:	0a40      	lsrs	r0, r0, #9
10015c1e:	0f4e      	lsrs	r6, r1, #29
10015c20:	0a7f      	lsrs	r7, r7, #9
10015c22:	4330      	orrs	r0, r6
10015c24:	4ecf      	ldr	r6, [pc, #828]	; (10015f64 <__aeabi_dsub+0x364>)
10015c26:	4317      	orrs	r7, r2
10015c28:	005a      	lsls	r2, r3, #1
10015c2a:	0d64      	lsrs	r4, r4, #21
10015c2c:	0d52      	lsrs	r2, r2, #21
10015c2e:	0fdb      	lsrs	r3, r3, #31
10015c30:	00c9      	lsls	r1, r1, #3
10015c32:	42b2      	cmp	r2, r6
10015c34:	d100      	bne.n	10015c38 <__aeabi_dsub+0x38>
10015c36:	e0e5      	b.n	10015e04 <__aeabi_dsub+0x204>
10015c38:	2601      	movs	r6, #1
10015c3a:	4073      	eors	r3, r6
10015c3c:	1aa6      	subs	r6, r4, r2
10015c3e:	46b4      	mov	ip, r6
10015c40:	4553      	cmp	r3, sl
10015c42:	d100      	bne.n	10015c46 <__aeabi_dsub+0x46>
10015c44:	e0af      	b.n	10015da6 <__aeabi_dsub+0x1a6>
10015c46:	2e00      	cmp	r6, #0
10015c48:	dc00      	bgt.n	10015c4c <__aeabi_dsub+0x4c>
10015c4a:	e10d      	b.n	10015e68 <__aeabi_dsub+0x268>
10015c4c:	2a00      	cmp	r2, #0
10015c4e:	d13a      	bne.n	10015cc6 <__aeabi_dsub+0xc6>
10015c50:	0003      	movs	r3, r0
10015c52:	430b      	orrs	r3, r1
10015c54:	d000      	beq.n	10015c58 <__aeabi_dsub+0x58>
10015c56:	e0e4      	b.n	10015e22 <__aeabi_dsub+0x222>
10015c58:	076b      	lsls	r3, r5, #29
10015c5a:	d009      	beq.n	10015c70 <__aeabi_dsub+0x70>
10015c5c:	230f      	movs	r3, #15
10015c5e:	402b      	ands	r3, r5
10015c60:	2b04      	cmp	r3, #4
10015c62:	d005      	beq.n	10015c70 <__aeabi_dsub+0x70>
10015c64:	1d2b      	adds	r3, r5, #4
10015c66:	42ab      	cmp	r3, r5
10015c68:	41ad      	sbcs	r5, r5
10015c6a:	426d      	negs	r5, r5
10015c6c:	197f      	adds	r7, r7, r5
10015c6e:	001d      	movs	r5, r3
10015c70:	023b      	lsls	r3, r7, #8
10015c72:	d400      	bmi.n	10015c76 <__aeabi_dsub+0x76>
10015c74:	e088      	b.n	10015d88 <__aeabi_dsub+0x188>
10015c76:	4bbb      	ldr	r3, [pc, #748]	; (10015f64 <__aeabi_dsub+0x364>)
10015c78:	3401      	adds	r4, #1
10015c7a:	429c      	cmp	r4, r3
10015c7c:	d100      	bne.n	10015c80 <__aeabi_dsub+0x80>
10015c7e:	e110      	b.n	10015ea2 <__aeabi_dsub+0x2a2>
10015c80:	003a      	movs	r2, r7
10015c82:	4bb9      	ldr	r3, [pc, #740]	; (10015f68 <__aeabi_dsub+0x368>)
10015c84:	4651      	mov	r1, sl
10015c86:	401a      	ands	r2, r3
10015c88:	2301      	movs	r3, #1
10015c8a:	0750      	lsls	r0, r2, #29
10015c8c:	08ed      	lsrs	r5, r5, #3
10015c8e:	0252      	lsls	r2, r2, #9
10015c90:	0564      	lsls	r4, r4, #21
10015c92:	4305      	orrs	r5, r0
10015c94:	0b12      	lsrs	r2, r2, #12
10015c96:	0d64      	lsrs	r4, r4, #21
10015c98:	400b      	ands	r3, r1
10015c9a:	2100      	movs	r1, #0
10015c9c:	0028      	movs	r0, r5
10015c9e:	0312      	lsls	r2, r2, #12
10015ca0:	0d0d      	lsrs	r5, r1, #20
10015ca2:	0b12      	lsrs	r2, r2, #12
10015ca4:	0564      	lsls	r4, r4, #21
10015ca6:	052d      	lsls	r5, r5, #20
10015ca8:	4315      	orrs	r5, r2
10015caa:	0862      	lsrs	r2, r4, #1
10015cac:	4caf      	ldr	r4, [pc, #700]	; (10015f6c <__aeabi_dsub+0x36c>)
10015cae:	07db      	lsls	r3, r3, #31
10015cb0:	402c      	ands	r4, r5
10015cb2:	4314      	orrs	r4, r2
10015cb4:	0064      	lsls	r4, r4, #1
10015cb6:	0864      	lsrs	r4, r4, #1
10015cb8:	431c      	orrs	r4, r3
10015cba:	0021      	movs	r1, r4
10015cbc:	bc1c      	pop	{r2, r3, r4}
10015cbe:	4690      	mov	r8, r2
10015cc0:	4699      	mov	r9, r3
10015cc2:	46a2      	mov	sl, r4
10015cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015cc6:	4ba7      	ldr	r3, [pc, #668]	; (10015f64 <__aeabi_dsub+0x364>)
10015cc8:	429c      	cmp	r4, r3
10015cca:	d0c5      	beq.n	10015c58 <__aeabi_dsub+0x58>
10015ccc:	2380      	movs	r3, #128	; 0x80
10015cce:	041b      	lsls	r3, r3, #16
10015cd0:	4318      	orrs	r0, r3
10015cd2:	4663      	mov	r3, ip
10015cd4:	2b38      	cmp	r3, #56	; 0x38
10015cd6:	dd00      	ble.n	10015cda <__aeabi_dsub+0xda>
10015cd8:	e0fd      	b.n	10015ed6 <__aeabi_dsub+0x2d6>
10015cda:	2b1f      	cmp	r3, #31
10015cdc:	dd00      	ble.n	10015ce0 <__aeabi_dsub+0xe0>
10015cde:	e130      	b.n	10015f42 <__aeabi_dsub+0x342>
10015ce0:	4662      	mov	r2, ip
10015ce2:	2320      	movs	r3, #32
10015ce4:	1a9b      	subs	r3, r3, r2
10015ce6:	0002      	movs	r2, r0
10015ce8:	409a      	lsls	r2, r3
10015cea:	4666      	mov	r6, ip
10015cec:	4690      	mov	r8, r2
10015cee:	000a      	movs	r2, r1
10015cf0:	4099      	lsls	r1, r3
10015cf2:	40f2      	lsrs	r2, r6
10015cf4:	4646      	mov	r6, r8
10015cf6:	1e4b      	subs	r3, r1, #1
10015cf8:	4199      	sbcs	r1, r3
10015cfa:	4332      	orrs	r2, r6
10015cfc:	4311      	orrs	r1, r2
10015cfe:	4663      	mov	r3, ip
10015d00:	0002      	movs	r2, r0
10015d02:	40da      	lsrs	r2, r3
10015d04:	1a69      	subs	r1, r5, r1
10015d06:	428d      	cmp	r5, r1
10015d08:	419b      	sbcs	r3, r3
10015d0a:	000d      	movs	r5, r1
10015d0c:	1aba      	subs	r2, r7, r2
10015d0e:	425b      	negs	r3, r3
10015d10:	1ad7      	subs	r7, r2, r3
10015d12:	023b      	lsls	r3, r7, #8
10015d14:	d535      	bpl.n	10015d82 <__aeabi_dsub+0x182>
10015d16:	027a      	lsls	r2, r7, #9
10015d18:	0a53      	lsrs	r3, r2, #9
10015d1a:	4698      	mov	r8, r3
10015d1c:	4643      	mov	r3, r8
10015d1e:	2b00      	cmp	r3, #0
10015d20:	d100      	bne.n	10015d24 <__aeabi_dsub+0x124>
10015d22:	e0c4      	b.n	10015eae <__aeabi_dsub+0x2ae>
10015d24:	4640      	mov	r0, r8
10015d26:	f000 fc6f 	bl	10016608 <__clzsi2>
10015d2a:	0003      	movs	r3, r0
10015d2c:	3b08      	subs	r3, #8
10015d2e:	2b1f      	cmp	r3, #31
10015d30:	dd00      	ble.n	10015d34 <__aeabi_dsub+0x134>
10015d32:	e0c5      	b.n	10015ec0 <__aeabi_dsub+0x2c0>
10015d34:	2220      	movs	r2, #32
10015d36:	0029      	movs	r1, r5
10015d38:	1ad2      	subs	r2, r2, r3
10015d3a:	4647      	mov	r7, r8
10015d3c:	40d1      	lsrs	r1, r2
10015d3e:	409f      	lsls	r7, r3
10015d40:	000a      	movs	r2, r1
10015d42:	409d      	lsls	r5, r3
10015d44:	433a      	orrs	r2, r7
10015d46:	429c      	cmp	r4, r3
10015d48:	dd00      	ble.n	10015d4c <__aeabi_dsub+0x14c>
10015d4a:	e0c0      	b.n	10015ece <__aeabi_dsub+0x2ce>
10015d4c:	1b1c      	subs	r4, r3, r4
10015d4e:	1c63      	adds	r3, r4, #1
10015d50:	2b1f      	cmp	r3, #31
10015d52:	dd00      	ble.n	10015d56 <__aeabi_dsub+0x156>
10015d54:	e0e4      	b.n	10015f20 <__aeabi_dsub+0x320>
10015d56:	2120      	movs	r1, #32
10015d58:	0014      	movs	r4, r2
10015d5a:	0028      	movs	r0, r5
10015d5c:	1ac9      	subs	r1, r1, r3
10015d5e:	40d8      	lsrs	r0, r3
10015d60:	408c      	lsls	r4, r1
10015d62:	408d      	lsls	r5, r1
10015d64:	4304      	orrs	r4, r0
10015d66:	40da      	lsrs	r2, r3
10015d68:	1e68      	subs	r0, r5, #1
10015d6a:	4185      	sbcs	r5, r0
10015d6c:	0017      	movs	r7, r2
10015d6e:	4325      	orrs	r5, r4
10015d70:	2400      	movs	r4, #0
10015d72:	e771      	b.n	10015c58 <__aeabi_dsub+0x58>
10015d74:	4642      	mov	r2, r8
10015d76:	4663      	mov	r3, ip
10015d78:	431a      	orrs	r2, r3
10015d7a:	d100      	bne.n	10015d7e <__aeabi_dsub+0x17e>
10015d7c:	e24c      	b.n	10016218 <__aeabi_dsub+0x618>
10015d7e:	4667      	mov	r7, ip
10015d80:	4645      	mov	r5, r8
10015d82:	076b      	lsls	r3, r5, #29
10015d84:	d000      	beq.n	10015d88 <__aeabi_dsub+0x188>
10015d86:	e769      	b.n	10015c5c <__aeabi_dsub+0x5c>
10015d88:	2301      	movs	r3, #1
10015d8a:	4651      	mov	r1, sl
10015d8c:	0778      	lsls	r0, r7, #29
10015d8e:	08ed      	lsrs	r5, r5, #3
10015d90:	08fa      	lsrs	r2, r7, #3
10015d92:	400b      	ands	r3, r1
10015d94:	4305      	orrs	r5, r0
10015d96:	4973      	ldr	r1, [pc, #460]	; (10015f64 <__aeabi_dsub+0x364>)
10015d98:	428c      	cmp	r4, r1
10015d9a:	d038      	beq.n	10015e0e <__aeabi_dsub+0x20e>
10015d9c:	0312      	lsls	r2, r2, #12
10015d9e:	0564      	lsls	r4, r4, #21
10015da0:	0b12      	lsrs	r2, r2, #12
10015da2:	0d64      	lsrs	r4, r4, #21
10015da4:	e779      	b.n	10015c9a <__aeabi_dsub+0x9a>
10015da6:	2e00      	cmp	r6, #0
10015da8:	dc00      	bgt.n	10015dac <__aeabi_dsub+0x1ac>
10015daa:	e09a      	b.n	10015ee2 <__aeabi_dsub+0x2e2>
10015dac:	2a00      	cmp	r2, #0
10015dae:	d047      	beq.n	10015e40 <__aeabi_dsub+0x240>
10015db0:	4a6c      	ldr	r2, [pc, #432]	; (10015f64 <__aeabi_dsub+0x364>)
10015db2:	4294      	cmp	r4, r2
10015db4:	d100      	bne.n	10015db8 <__aeabi_dsub+0x1b8>
10015db6:	e74f      	b.n	10015c58 <__aeabi_dsub+0x58>
10015db8:	2280      	movs	r2, #128	; 0x80
10015dba:	0412      	lsls	r2, r2, #16
10015dbc:	4310      	orrs	r0, r2
10015dbe:	4662      	mov	r2, ip
10015dc0:	2a38      	cmp	r2, #56	; 0x38
10015dc2:	dc00      	bgt.n	10015dc6 <__aeabi_dsub+0x1c6>
10015dc4:	e108      	b.n	10015fd8 <__aeabi_dsub+0x3d8>
10015dc6:	4301      	orrs	r1, r0
10015dc8:	1e48      	subs	r0, r1, #1
10015dca:	4181      	sbcs	r1, r0
10015dcc:	2200      	movs	r2, #0
10015dce:	b2c9      	uxtb	r1, r1
10015dd0:	1949      	adds	r1, r1, r5
10015dd2:	19d2      	adds	r2, r2, r7
10015dd4:	42a9      	cmp	r1, r5
10015dd6:	41bf      	sbcs	r7, r7
10015dd8:	000d      	movs	r5, r1
10015dda:	427f      	negs	r7, r7
10015ddc:	18bf      	adds	r7, r7, r2
10015dde:	023a      	lsls	r2, r7, #8
10015de0:	d400      	bmi.n	10015de4 <__aeabi_dsub+0x1e4>
10015de2:	e142      	b.n	1001606a <__aeabi_dsub+0x46a>
10015de4:	4a5f      	ldr	r2, [pc, #380]	; (10015f64 <__aeabi_dsub+0x364>)
10015de6:	3401      	adds	r4, #1
10015de8:	4294      	cmp	r4, r2
10015dea:	d100      	bne.n	10015dee <__aeabi_dsub+0x1ee>
10015dec:	e14e      	b.n	1001608c <__aeabi_dsub+0x48c>
10015dee:	2001      	movs	r0, #1
10015df0:	4a5d      	ldr	r2, [pc, #372]	; (10015f68 <__aeabi_dsub+0x368>)
10015df2:	0869      	lsrs	r1, r5, #1
10015df4:	403a      	ands	r2, r7
10015df6:	4028      	ands	r0, r5
10015df8:	4308      	orrs	r0, r1
10015dfa:	07d5      	lsls	r5, r2, #31
10015dfc:	4305      	orrs	r5, r0
10015dfe:	0857      	lsrs	r7, r2, #1
10015e00:	469a      	mov	sl, r3
10015e02:	e729      	b.n	10015c58 <__aeabi_dsub+0x58>
10015e04:	0006      	movs	r6, r0
10015e06:	430e      	orrs	r6, r1
10015e08:	d000      	beq.n	10015e0c <__aeabi_dsub+0x20c>
10015e0a:	e717      	b.n	10015c3c <__aeabi_dsub+0x3c>
10015e0c:	e714      	b.n	10015c38 <__aeabi_dsub+0x38>
10015e0e:	0029      	movs	r1, r5
10015e10:	4311      	orrs	r1, r2
10015e12:	d100      	bne.n	10015e16 <__aeabi_dsub+0x216>
10015e14:	e1f9      	b.n	1001620a <__aeabi_dsub+0x60a>
10015e16:	2180      	movs	r1, #128	; 0x80
10015e18:	0309      	lsls	r1, r1, #12
10015e1a:	430a      	orrs	r2, r1
10015e1c:	0312      	lsls	r2, r2, #12
10015e1e:	0b12      	lsrs	r2, r2, #12
10015e20:	e73b      	b.n	10015c9a <__aeabi_dsub+0x9a>
10015e22:	2301      	movs	r3, #1
10015e24:	425b      	negs	r3, r3
10015e26:	4698      	mov	r8, r3
10015e28:	44c4      	add	ip, r8
10015e2a:	4663      	mov	r3, ip
10015e2c:	2b00      	cmp	r3, #0
10015e2e:	d172      	bne.n	10015f16 <__aeabi_dsub+0x316>
10015e30:	1a69      	subs	r1, r5, r1
10015e32:	428d      	cmp	r5, r1
10015e34:	419b      	sbcs	r3, r3
10015e36:	1a3f      	subs	r7, r7, r0
10015e38:	425b      	negs	r3, r3
10015e3a:	1aff      	subs	r7, r7, r3
10015e3c:	000d      	movs	r5, r1
10015e3e:	e768      	b.n	10015d12 <__aeabi_dsub+0x112>
10015e40:	0002      	movs	r2, r0
10015e42:	430a      	orrs	r2, r1
10015e44:	d100      	bne.n	10015e48 <__aeabi_dsub+0x248>
10015e46:	e707      	b.n	10015c58 <__aeabi_dsub+0x58>
10015e48:	2201      	movs	r2, #1
10015e4a:	4252      	negs	r2, r2
10015e4c:	4690      	mov	r8, r2
10015e4e:	44c4      	add	ip, r8
10015e50:	4662      	mov	r2, ip
10015e52:	2a00      	cmp	r2, #0
10015e54:	d000      	beq.n	10015e58 <__aeabi_dsub+0x258>
10015e56:	e0e6      	b.n	10016026 <__aeabi_dsub+0x426>
10015e58:	1869      	adds	r1, r5, r1
10015e5a:	42a9      	cmp	r1, r5
10015e5c:	41b6      	sbcs	r6, r6
10015e5e:	183f      	adds	r7, r7, r0
10015e60:	4276      	negs	r6, r6
10015e62:	19f7      	adds	r7, r6, r7
10015e64:	000d      	movs	r5, r1
10015e66:	e7ba      	b.n	10015dde <__aeabi_dsub+0x1de>
10015e68:	2e00      	cmp	r6, #0
10015e6a:	d000      	beq.n	10015e6e <__aeabi_dsub+0x26e>
10015e6c:	e080      	b.n	10015f70 <__aeabi_dsub+0x370>
10015e6e:	1c62      	adds	r2, r4, #1
10015e70:	0552      	lsls	r2, r2, #21
10015e72:	0d52      	lsrs	r2, r2, #21
10015e74:	2a01      	cmp	r2, #1
10015e76:	dc00      	bgt.n	10015e7a <__aeabi_dsub+0x27a>
10015e78:	e0f9      	b.n	1001606e <__aeabi_dsub+0x46e>
10015e7a:	1a6a      	subs	r2, r5, r1
10015e7c:	4691      	mov	r9, r2
10015e7e:	454d      	cmp	r5, r9
10015e80:	41b6      	sbcs	r6, r6
10015e82:	1a3a      	subs	r2, r7, r0
10015e84:	4276      	negs	r6, r6
10015e86:	1b92      	subs	r2, r2, r6
10015e88:	4690      	mov	r8, r2
10015e8a:	0212      	lsls	r2, r2, #8
10015e8c:	d400      	bmi.n	10015e90 <__aeabi_dsub+0x290>
10015e8e:	e099      	b.n	10015fc4 <__aeabi_dsub+0x3c4>
10015e90:	1b4d      	subs	r5, r1, r5
10015e92:	42a9      	cmp	r1, r5
10015e94:	4189      	sbcs	r1, r1
10015e96:	1bc7      	subs	r7, r0, r7
10015e98:	4249      	negs	r1, r1
10015e9a:	1a7a      	subs	r2, r7, r1
10015e9c:	4690      	mov	r8, r2
10015e9e:	469a      	mov	sl, r3
10015ea0:	e73c      	b.n	10015d1c <__aeabi_dsub+0x11c>
10015ea2:	4652      	mov	r2, sl
10015ea4:	2301      	movs	r3, #1
10015ea6:	2500      	movs	r5, #0
10015ea8:	4013      	ands	r3, r2
10015eaa:	2200      	movs	r2, #0
10015eac:	e6f5      	b.n	10015c9a <__aeabi_dsub+0x9a>
10015eae:	0028      	movs	r0, r5
10015eb0:	f000 fbaa 	bl	10016608 <__clzsi2>
10015eb4:	3020      	adds	r0, #32
10015eb6:	0003      	movs	r3, r0
10015eb8:	3b08      	subs	r3, #8
10015eba:	2b1f      	cmp	r3, #31
10015ebc:	dc00      	bgt.n	10015ec0 <__aeabi_dsub+0x2c0>
10015ebe:	e739      	b.n	10015d34 <__aeabi_dsub+0x134>
10015ec0:	002a      	movs	r2, r5
10015ec2:	3828      	subs	r0, #40	; 0x28
10015ec4:	4082      	lsls	r2, r0
10015ec6:	2500      	movs	r5, #0
10015ec8:	429c      	cmp	r4, r3
10015eca:	dc00      	bgt.n	10015ece <__aeabi_dsub+0x2ce>
10015ecc:	e73e      	b.n	10015d4c <__aeabi_dsub+0x14c>
10015ece:	4f26      	ldr	r7, [pc, #152]	; (10015f68 <__aeabi_dsub+0x368>)
10015ed0:	1ae4      	subs	r4, r4, r3
10015ed2:	4017      	ands	r7, r2
10015ed4:	e6c0      	b.n	10015c58 <__aeabi_dsub+0x58>
10015ed6:	4301      	orrs	r1, r0
10015ed8:	1e48      	subs	r0, r1, #1
10015eda:	4181      	sbcs	r1, r0
10015edc:	2200      	movs	r2, #0
10015ede:	b2c9      	uxtb	r1, r1
10015ee0:	e710      	b.n	10015d04 <__aeabi_dsub+0x104>
10015ee2:	2e00      	cmp	r6, #0
10015ee4:	d000      	beq.n	10015ee8 <__aeabi_dsub+0x2e8>
10015ee6:	e0f1      	b.n	100160cc <__aeabi_dsub+0x4cc>
10015ee8:	1c62      	adds	r2, r4, #1
10015eea:	4694      	mov	ip, r2
10015eec:	0552      	lsls	r2, r2, #21
10015eee:	0d52      	lsrs	r2, r2, #21
10015ef0:	2a01      	cmp	r2, #1
10015ef2:	dc00      	bgt.n	10015ef6 <__aeabi_dsub+0x2f6>
10015ef4:	e0a0      	b.n	10016038 <__aeabi_dsub+0x438>
10015ef6:	4a1b      	ldr	r2, [pc, #108]	; (10015f64 <__aeabi_dsub+0x364>)
10015ef8:	4594      	cmp	ip, r2
10015efa:	d100      	bne.n	10015efe <__aeabi_dsub+0x2fe>
10015efc:	e0c5      	b.n	1001608a <__aeabi_dsub+0x48a>
10015efe:	1869      	adds	r1, r5, r1
10015f00:	42a9      	cmp	r1, r5
10015f02:	4192      	sbcs	r2, r2
10015f04:	183f      	adds	r7, r7, r0
10015f06:	4252      	negs	r2, r2
10015f08:	19d2      	adds	r2, r2, r7
10015f0a:	0849      	lsrs	r1, r1, #1
10015f0c:	07d5      	lsls	r5, r2, #31
10015f0e:	430d      	orrs	r5, r1
10015f10:	0857      	lsrs	r7, r2, #1
10015f12:	4664      	mov	r4, ip
10015f14:	e6a0      	b.n	10015c58 <__aeabi_dsub+0x58>
10015f16:	4b13      	ldr	r3, [pc, #76]	; (10015f64 <__aeabi_dsub+0x364>)
10015f18:	429c      	cmp	r4, r3
10015f1a:	d000      	beq.n	10015f1e <__aeabi_dsub+0x31e>
10015f1c:	e6d9      	b.n	10015cd2 <__aeabi_dsub+0xd2>
10015f1e:	e69b      	b.n	10015c58 <__aeabi_dsub+0x58>
10015f20:	0011      	movs	r1, r2
10015f22:	3c1f      	subs	r4, #31
10015f24:	40e1      	lsrs	r1, r4
10015f26:	000c      	movs	r4, r1
10015f28:	2b20      	cmp	r3, #32
10015f2a:	d100      	bne.n	10015f2e <__aeabi_dsub+0x32e>
10015f2c:	e080      	b.n	10016030 <__aeabi_dsub+0x430>
10015f2e:	2140      	movs	r1, #64	; 0x40
10015f30:	1acb      	subs	r3, r1, r3
10015f32:	409a      	lsls	r2, r3
10015f34:	4315      	orrs	r5, r2
10015f36:	1e6a      	subs	r2, r5, #1
10015f38:	4195      	sbcs	r5, r2
10015f3a:	2700      	movs	r7, #0
10015f3c:	4325      	orrs	r5, r4
10015f3e:	2400      	movs	r4, #0
10015f40:	e71f      	b.n	10015d82 <__aeabi_dsub+0x182>
10015f42:	4663      	mov	r3, ip
10015f44:	0002      	movs	r2, r0
10015f46:	3b20      	subs	r3, #32
10015f48:	40da      	lsrs	r2, r3
10015f4a:	4663      	mov	r3, ip
10015f4c:	2b20      	cmp	r3, #32
10015f4e:	d071      	beq.n	10016034 <__aeabi_dsub+0x434>
10015f50:	2340      	movs	r3, #64	; 0x40
10015f52:	4666      	mov	r6, ip
10015f54:	1b9b      	subs	r3, r3, r6
10015f56:	4098      	lsls	r0, r3
10015f58:	4301      	orrs	r1, r0
10015f5a:	1e48      	subs	r0, r1, #1
10015f5c:	4181      	sbcs	r1, r0
10015f5e:	4311      	orrs	r1, r2
10015f60:	2200      	movs	r2, #0
10015f62:	e6cf      	b.n	10015d04 <__aeabi_dsub+0x104>
10015f64:	000007ff 	.word	0x000007ff
10015f68:	ff7fffff 	.word	0xff7fffff
10015f6c:	800fffff 	.word	0x800fffff
10015f70:	2c00      	cmp	r4, #0
10015f72:	d048      	beq.n	10016006 <__aeabi_dsub+0x406>
10015f74:	4cca      	ldr	r4, [pc, #808]	; (100162a0 <__aeabi_dsub+0x6a0>)
10015f76:	42a2      	cmp	r2, r4
10015f78:	d100      	bne.n	10015f7c <__aeabi_dsub+0x37c>
10015f7a:	e0a2      	b.n	100160c2 <__aeabi_dsub+0x4c2>
10015f7c:	4274      	negs	r4, r6
10015f7e:	46a1      	mov	r9, r4
10015f80:	2480      	movs	r4, #128	; 0x80
10015f82:	0424      	lsls	r4, r4, #16
10015f84:	4327      	orrs	r7, r4
10015f86:	464c      	mov	r4, r9
10015f88:	2c38      	cmp	r4, #56	; 0x38
10015f8a:	dd00      	ble.n	10015f8e <__aeabi_dsub+0x38e>
10015f8c:	e0db      	b.n	10016146 <__aeabi_dsub+0x546>
10015f8e:	2c1f      	cmp	r4, #31
10015f90:	dd00      	ble.n	10015f94 <__aeabi_dsub+0x394>
10015f92:	e144      	b.n	1001621e <__aeabi_dsub+0x61e>
10015f94:	464e      	mov	r6, r9
10015f96:	2420      	movs	r4, #32
10015f98:	1ba4      	subs	r4, r4, r6
10015f9a:	003e      	movs	r6, r7
10015f9c:	40a6      	lsls	r6, r4
10015f9e:	46a2      	mov	sl, r4
10015fa0:	46b0      	mov	r8, r6
10015fa2:	464c      	mov	r4, r9
10015fa4:	002e      	movs	r6, r5
10015fa6:	40e6      	lsrs	r6, r4
10015fa8:	46b4      	mov	ip, r6
10015faa:	4646      	mov	r6, r8
10015fac:	4664      	mov	r4, ip
10015fae:	4326      	orrs	r6, r4
10015fb0:	4654      	mov	r4, sl
10015fb2:	40a5      	lsls	r5, r4
10015fb4:	1e6c      	subs	r4, r5, #1
10015fb6:	41a5      	sbcs	r5, r4
10015fb8:	0034      	movs	r4, r6
10015fba:	432c      	orrs	r4, r5
10015fbc:	464d      	mov	r5, r9
10015fbe:	40ef      	lsrs	r7, r5
10015fc0:	1b0d      	subs	r5, r1, r4
10015fc2:	e028      	b.n	10016016 <__aeabi_dsub+0x416>
10015fc4:	464a      	mov	r2, r9
10015fc6:	4643      	mov	r3, r8
10015fc8:	464d      	mov	r5, r9
10015fca:	431a      	orrs	r2, r3
10015fcc:	d000      	beq.n	10015fd0 <__aeabi_dsub+0x3d0>
10015fce:	e6a5      	b.n	10015d1c <__aeabi_dsub+0x11c>
10015fd0:	2300      	movs	r3, #0
10015fd2:	2400      	movs	r4, #0
10015fd4:	2500      	movs	r5, #0
10015fd6:	e6de      	b.n	10015d96 <__aeabi_dsub+0x196>
10015fd8:	2a1f      	cmp	r2, #31
10015fda:	dc5a      	bgt.n	10016092 <__aeabi_dsub+0x492>
10015fdc:	4666      	mov	r6, ip
10015fde:	2220      	movs	r2, #32
10015fe0:	1b92      	subs	r2, r2, r6
10015fe2:	0006      	movs	r6, r0
10015fe4:	4096      	lsls	r6, r2
10015fe6:	4691      	mov	r9, r2
10015fe8:	46b0      	mov	r8, r6
10015fea:	4662      	mov	r2, ip
10015fec:	000e      	movs	r6, r1
10015fee:	40d6      	lsrs	r6, r2
10015ff0:	4642      	mov	r2, r8
10015ff2:	4316      	orrs	r6, r2
10015ff4:	464a      	mov	r2, r9
10015ff6:	4091      	lsls	r1, r2
10015ff8:	1e4a      	subs	r2, r1, #1
10015ffa:	4191      	sbcs	r1, r2
10015ffc:	0002      	movs	r2, r0
10015ffe:	4660      	mov	r0, ip
10016000:	4331      	orrs	r1, r6
10016002:	40c2      	lsrs	r2, r0
10016004:	e6e4      	b.n	10015dd0 <__aeabi_dsub+0x1d0>
10016006:	003c      	movs	r4, r7
10016008:	432c      	orrs	r4, r5
1001600a:	d05a      	beq.n	100160c2 <__aeabi_dsub+0x4c2>
1001600c:	43f4      	mvns	r4, r6
1001600e:	46a1      	mov	r9, r4
10016010:	2c00      	cmp	r4, #0
10016012:	d152      	bne.n	100160ba <__aeabi_dsub+0x4ba>
10016014:	1b4d      	subs	r5, r1, r5
10016016:	42a9      	cmp	r1, r5
10016018:	4189      	sbcs	r1, r1
1001601a:	1bc7      	subs	r7, r0, r7
1001601c:	4249      	negs	r1, r1
1001601e:	1a7f      	subs	r7, r7, r1
10016020:	0014      	movs	r4, r2
10016022:	469a      	mov	sl, r3
10016024:	e675      	b.n	10015d12 <__aeabi_dsub+0x112>
10016026:	4a9e      	ldr	r2, [pc, #632]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016028:	4294      	cmp	r4, r2
1001602a:	d000      	beq.n	1001602e <__aeabi_dsub+0x42e>
1001602c:	e6c7      	b.n	10015dbe <__aeabi_dsub+0x1be>
1001602e:	e613      	b.n	10015c58 <__aeabi_dsub+0x58>
10016030:	2200      	movs	r2, #0
10016032:	e77f      	b.n	10015f34 <__aeabi_dsub+0x334>
10016034:	2000      	movs	r0, #0
10016036:	e78f      	b.n	10015f58 <__aeabi_dsub+0x358>
10016038:	2c00      	cmp	r4, #0
1001603a:	d000      	beq.n	1001603e <__aeabi_dsub+0x43e>
1001603c:	e0c8      	b.n	100161d0 <__aeabi_dsub+0x5d0>
1001603e:	003b      	movs	r3, r7
10016040:	432b      	orrs	r3, r5
10016042:	d100      	bne.n	10016046 <__aeabi_dsub+0x446>
10016044:	e10f      	b.n	10016266 <__aeabi_dsub+0x666>
10016046:	0003      	movs	r3, r0
10016048:	430b      	orrs	r3, r1
1001604a:	d100      	bne.n	1001604e <__aeabi_dsub+0x44e>
1001604c:	e604      	b.n	10015c58 <__aeabi_dsub+0x58>
1001604e:	1869      	adds	r1, r5, r1
10016050:	42a9      	cmp	r1, r5
10016052:	419b      	sbcs	r3, r3
10016054:	183f      	adds	r7, r7, r0
10016056:	425b      	negs	r3, r3
10016058:	19df      	adds	r7, r3, r7
1001605a:	023b      	lsls	r3, r7, #8
1001605c:	d400      	bmi.n	10016060 <__aeabi_dsub+0x460>
1001605e:	e11a      	b.n	10016296 <__aeabi_dsub+0x696>
10016060:	4b90      	ldr	r3, [pc, #576]	; (100162a4 <__aeabi_dsub+0x6a4>)
10016062:	000d      	movs	r5, r1
10016064:	401f      	ands	r7, r3
10016066:	4664      	mov	r4, ip
10016068:	e5f6      	b.n	10015c58 <__aeabi_dsub+0x58>
1001606a:	469a      	mov	sl, r3
1001606c:	e689      	b.n	10015d82 <__aeabi_dsub+0x182>
1001606e:	003a      	movs	r2, r7
10016070:	432a      	orrs	r2, r5
10016072:	2c00      	cmp	r4, #0
10016074:	d15c      	bne.n	10016130 <__aeabi_dsub+0x530>
10016076:	2a00      	cmp	r2, #0
10016078:	d175      	bne.n	10016166 <__aeabi_dsub+0x566>
1001607a:	0002      	movs	r2, r0
1001607c:	430a      	orrs	r2, r1
1001607e:	d100      	bne.n	10016082 <__aeabi_dsub+0x482>
10016080:	e0ca      	b.n	10016218 <__aeabi_dsub+0x618>
10016082:	0007      	movs	r7, r0
10016084:	000d      	movs	r5, r1
10016086:	469a      	mov	sl, r3
10016088:	e5e6      	b.n	10015c58 <__aeabi_dsub+0x58>
1001608a:	4664      	mov	r4, ip
1001608c:	2200      	movs	r2, #0
1001608e:	2500      	movs	r5, #0
10016090:	e681      	b.n	10015d96 <__aeabi_dsub+0x196>
10016092:	4662      	mov	r2, ip
10016094:	0006      	movs	r6, r0
10016096:	3a20      	subs	r2, #32
10016098:	40d6      	lsrs	r6, r2
1001609a:	4662      	mov	r2, ip
1001609c:	46b0      	mov	r8, r6
1001609e:	2a20      	cmp	r2, #32
100160a0:	d100      	bne.n	100160a4 <__aeabi_dsub+0x4a4>
100160a2:	e0b7      	b.n	10016214 <__aeabi_dsub+0x614>
100160a4:	2240      	movs	r2, #64	; 0x40
100160a6:	4666      	mov	r6, ip
100160a8:	1b92      	subs	r2, r2, r6
100160aa:	4090      	lsls	r0, r2
100160ac:	4301      	orrs	r1, r0
100160ae:	4642      	mov	r2, r8
100160b0:	1e48      	subs	r0, r1, #1
100160b2:	4181      	sbcs	r1, r0
100160b4:	4311      	orrs	r1, r2
100160b6:	2200      	movs	r2, #0
100160b8:	e68a      	b.n	10015dd0 <__aeabi_dsub+0x1d0>
100160ba:	4c79      	ldr	r4, [pc, #484]	; (100162a0 <__aeabi_dsub+0x6a0>)
100160bc:	42a2      	cmp	r2, r4
100160be:	d000      	beq.n	100160c2 <__aeabi_dsub+0x4c2>
100160c0:	e761      	b.n	10015f86 <__aeabi_dsub+0x386>
100160c2:	0007      	movs	r7, r0
100160c4:	000d      	movs	r5, r1
100160c6:	0014      	movs	r4, r2
100160c8:	469a      	mov	sl, r3
100160ca:	e5c5      	b.n	10015c58 <__aeabi_dsub+0x58>
100160cc:	2c00      	cmp	r4, #0
100160ce:	d141      	bne.n	10016154 <__aeabi_dsub+0x554>
100160d0:	003c      	movs	r4, r7
100160d2:	432c      	orrs	r4, r5
100160d4:	d078      	beq.n	100161c8 <__aeabi_dsub+0x5c8>
100160d6:	43f4      	mvns	r4, r6
100160d8:	46a1      	mov	r9, r4
100160da:	2c00      	cmp	r4, #0
100160dc:	d020      	beq.n	10016120 <__aeabi_dsub+0x520>
100160de:	4c70      	ldr	r4, [pc, #448]	; (100162a0 <__aeabi_dsub+0x6a0>)
100160e0:	42a2      	cmp	r2, r4
100160e2:	d071      	beq.n	100161c8 <__aeabi_dsub+0x5c8>
100160e4:	464c      	mov	r4, r9
100160e6:	2c38      	cmp	r4, #56	; 0x38
100160e8:	dd00      	ble.n	100160ec <__aeabi_dsub+0x4ec>
100160ea:	e0b2      	b.n	10016252 <__aeabi_dsub+0x652>
100160ec:	2c1f      	cmp	r4, #31
100160ee:	dd00      	ble.n	100160f2 <__aeabi_dsub+0x4f2>
100160f0:	e0bc      	b.n	1001626c <__aeabi_dsub+0x66c>
100160f2:	2620      	movs	r6, #32
100160f4:	1b34      	subs	r4, r6, r4
100160f6:	46a2      	mov	sl, r4
100160f8:	003c      	movs	r4, r7
100160fa:	4656      	mov	r6, sl
100160fc:	40b4      	lsls	r4, r6
100160fe:	464e      	mov	r6, r9
10016100:	46a0      	mov	r8, r4
10016102:	002c      	movs	r4, r5
10016104:	40f4      	lsrs	r4, r6
10016106:	46a4      	mov	ip, r4
10016108:	4644      	mov	r4, r8
1001610a:	4666      	mov	r6, ip
1001610c:	4334      	orrs	r4, r6
1001610e:	46a4      	mov	ip, r4
10016110:	4654      	mov	r4, sl
10016112:	40a5      	lsls	r5, r4
10016114:	4664      	mov	r4, ip
10016116:	1e6e      	subs	r6, r5, #1
10016118:	41b5      	sbcs	r5, r6
1001611a:	4325      	orrs	r5, r4
1001611c:	464c      	mov	r4, r9
1001611e:	40e7      	lsrs	r7, r4
10016120:	186d      	adds	r5, r5, r1
10016122:	428d      	cmp	r5, r1
10016124:	4189      	sbcs	r1, r1
10016126:	183f      	adds	r7, r7, r0
10016128:	4249      	negs	r1, r1
1001612a:	19cf      	adds	r7, r1, r7
1001612c:	0014      	movs	r4, r2
1001612e:	e656      	b.n	10015dde <__aeabi_dsub+0x1de>
10016130:	2a00      	cmp	r2, #0
10016132:	d12f      	bne.n	10016194 <__aeabi_dsub+0x594>
10016134:	0002      	movs	r2, r0
10016136:	430a      	orrs	r2, r1
10016138:	d100      	bne.n	1001613c <__aeabi_dsub+0x53c>
1001613a:	e084      	b.n	10016246 <__aeabi_dsub+0x646>
1001613c:	0007      	movs	r7, r0
1001613e:	000d      	movs	r5, r1
10016140:	469a      	mov	sl, r3
10016142:	4c57      	ldr	r4, [pc, #348]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016144:	e588      	b.n	10015c58 <__aeabi_dsub+0x58>
10016146:	433d      	orrs	r5, r7
10016148:	1e6f      	subs	r7, r5, #1
1001614a:	41bd      	sbcs	r5, r7
1001614c:	b2ec      	uxtb	r4, r5
1001614e:	2700      	movs	r7, #0
10016150:	1b0d      	subs	r5, r1, r4
10016152:	e760      	b.n	10016016 <__aeabi_dsub+0x416>
10016154:	4c52      	ldr	r4, [pc, #328]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016156:	42a2      	cmp	r2, r4
10016158:	d036      	beq.n	100161c8 <__aeabi_dsub+0x5c8>
1001615a:	4274      	negs	r4, r6
1001615c:	2680      	movs	r6, #128	; 0x80
1001615e:	0436      	lsls	r6, r6, #16
10016160:	46a1      	mov	r9, r4
10016162:	4337      	orrs	r7, r6
10016164:	e7be      	b.n	100160e4 <__aeabi_dsub+0x4e4>
10016166:	0002      	movs	r2, r0
10016168:	430a      	orrs	r2, r1
1001616a:	d100      	bne.n	1001616e <__aeabi_dsub+0x56e>
1001616c:	e574      	b.n	10015c58 <__aeabi_dsub+0x58>
1001616e:	1a6a      	subs	r2, r5, r1
10016170:	4690      	mov	r8, r2
10016172:	4545      	cmp	r5, r8
10016174:	41b6      	sbcs	r6, r6
10016176:	1a3a      	subs	r2, r7, r0
10016178:	4276      	negs	r6, r6
1001617a:	1b92      	subs	r2, r2, r6
1001617c:	4694      	mov	ip, r2
1001617e:	0212      	lsls	r2, r2, #8
10016180:	d400      	bmi.n	10016184 <__aeabi_dsub+0x584>
10016182:	e5f7      	b.n	10015d74 <__aeabi_dsub+0x174>
10016184:	1b4d      	subs	r5, r1, r5
10016186:	42a9      	cmp	r1, r5
10016188:	4189      	sbcs	r1, r1
1001618a:	1bc7      	subs	r7, r0, r7
1001618c:	4249      	negs	r1, r1
1001618e:	1a7f      	subs	r7, r7, r1
10016190:	469a      	mov	sl, r3
10016192:	e561      	b.n	10015c58 <__aeabi_dsub+0x58>
10016194:	0002      	movs	r2, r0
10016196:	430a      	orrs	r2, r1
10016198:	d03a      	beq.n	10016210 <__aeabi_dsub+0x610>
1001619a:	08ed      	lsrs	r5, r5, #3
1001619c:	077c      	lsls	r4, r7, #29
1001619e:	432c      	orrs	r4, r5
100161a0:	2580      	movs	r5, #128	; 0x80
100161a2:	08fa      	lsrs	r2, r7, #3
100161a4:	032d      	lsls	r5, r5, #12
100161a6:	422a      	tst	r2, r5
100161a8:	d008      	beq.n	100161bc <__aeabi_dsub+0x5bc>
100161aa:	08c7      	lsrs	r7, r0, #3
100161ac:	422f      	tst	r7, r5
100161ae:	d105      	bne.n	100161bc <__aeabi_dsub+0x5bc>
100161b0:	0745      	lsls	r5, r0, #29
100161b2:	002c      	movs	r4, r5
100161b4:	003a      	movs	r2, r7
100161b6:	469a      	mov	sl, r3
100161b8:	08c9      	lsrs	r1, r1, #3
100161ba:	430c      	orrs	r4, r1
100161bc:	0f67      	lsrs	r7, r4, #29
100161be:	00d2      	lsls	r2, r2, #3
100161c0:	00e5      	lsls	r5, r4, #3
100161c2:	4317      	orrs	r7, r2
100161c4:	4c36      	ldr	r4, [pc, #216]	; (100162a0 <__aeabi_dsub+0x6a0>)
100161c6:	e547      	b.n	10015c58 <__aeabi_dsub+0x58>
100161c8:	0007      	movs	r7, r0
100161ca:	000d      	movs	r5, r1
100161cc:	0014      	movs	r4, r2
100161ce:	e543      	b.n	10015c58 <__aeabi_dsub+0x58>
100161d0:	003a      	movs	r2, r7
100161d2:	432a      	orrs	r2, r5
100161d4:	d043      	beq.n	1001625e <__aeabi_dsub+0x65e>
100161d6:	0002      	movs	r2, r0
100161d8:	430a      	orrs	r2, r1
100161da:	d019      	beq.n	10016210 <__aeabi_dsub+0x610>
100161dc:	08ed      	lsrs	r5, r5, #3
100161de:	077c      	lsls	r4, r7, #29
100161e0:	432c      	orrs	r4, r5
100161e2:	2580      	movs	r5, #128	; 0x80
100161e4:	08fa      	lsrs	r2, r7, #3
100161e6:	032d      	lsls	r5, r5, #12
100161e8:	422a      	tst	r2, r5
100161ea:	d007      	beq.n	100161fc <__aeabi_dsub+0x5fc>
100161ec:	08c6      	lsrs	r6, r0, #3
100161ee:	422e      	tst	r6, r5
100161f0:	d104      	bne.n	100161fc <__aeabi_dsub+0x5fc>
100161f2:	0747      	lsls	r7, r0, #29
100161f4:	003c      	movs	r4, r7
100161f6:	0032      	movs	r2, r6
100161f8:	08c9      	lsrs	r1, r1, #3
100161fa:	430c      	orrs	r4, r1
100161fc:	00d7      	lsls	r7, r2, #3
100161fe:	0f62      	lsrs	r2, r4, #29
10016200:	00e5      	lsls	r5, r4, #3
10016202:	4317      	orrs	r7, r2
10016204:	469a      	mov	sl, r3
10016206:	4c26      	ldr	r4, [pc, #152]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016208:	e526      	b.n	10015c58 <__aeabi_dsub+0x58>
1001620a:	2200      	movs	r2, #0
1001620c:	2500      	movs	r5, #0
1001620e:	e544      	b.n	10015c9a <__aeabi_dsub+0x9a>
10016210:	4c23      	ldr	r4, [pc, #140]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016212:	e521      	b.n	10015c58 <__aeabi_dsub+0x58>
10016214:	2000      	movs	r0, #0
10016216:	e749      	b.n	100160ac <__aeabi_dsub+0x4ac>
10016218:	2300      	movs	r3, #0
1001621a:	2500      	movs	r5, #0
1001621c:	e5bb      	b.n	10015d96 <__aeabi_dsub+0x196>
1001621e:	464c      	mov	r4, r9
10016220:	003e      	movs	r6, r7
10016222:	3c20      	subs	r4, #32
10016224:	40e6      	lsrs	r6, r4
10016226:	464c      	mov	r4, r9
10016228:	46b4      	mov	ip, r6
1001622a:	2c20      	cmp	r4, #32
1001622c:	d031      	beq.n	10016292 <__aeabi_dsub+0x692>
1001622e:	2440      	movs	r4, #64	; 0x40
10016230:	464e      	mov	r6, r9
10016232:	1ba6      	subs	r6, r4, r6
10016234:	40b7      	lsls	r7, r6
10016236:	433d      	orrs	r5, r7
10016238:	1e6c      	subs	r4, r5, #1
1001623a:	41a5      	sbcs	r5, r4
1001623c:	4664      	mov	r4, ip
1001623e:	432c      	orrs	r4, r5
10016240:	2700      	movs	r7, #0
10016242:	1b0d      	subs	r5, r1, r4
10016244:	e6e7      	b.n	10016016 <__aeabi_dsub+0x416>
10016246:	2280      	movs	r2, #128	; 0x80
10016248:	2300      	movs	r3, #0
1001624a:	0312      	lsls	r2, r2, #12
1001624c:	4c14      	ldr	r4, [pc, #80]	; (100162a0 <__aeabi_dsub+0x6a0>)
1001624e:	2500      	movs	r5, #0
10016250:	e5a1      	b.n	10015d96 <__aeabi_dsub+0x196>
10016252:	433d      	orrs	r5, r7
10016254:	1e6f      	subs	r7, r5, #1
10016256:	41bd      	sbcs	r5, r7
10016258:	2700      	movs	r7, #0
1001625a:	b2ed      	uxtb	r5, r5
1001625c:	e760      	b.n	10016120 <__aeabi_dsub+0x520>
1001625e:	0007      	movs	r7, r0
10016260:	000d      	movs	r5, r1
10016262:	4c0f      	ldr	r4, [pc, #60]	; (100162a0 <__aeabi_dsub+0x6a0>)
10016264:	e4f8      	b.n	10015c58 <__aeabi_dsub+0x58>
10016266:	0007      	movs	r7, r0
10016268:	000d      	movs	r5, r1
1001626a:	e4f5      	b.n	10015c58 <__aeabi_dsub+0x58>
1001626c:	464e      	mov	r6, r9
1001626e:	003c      	movs	r4, r7
10016270:	3e20      	subs	r6, #32
10016272:	40f4      	lsrs	r4, r6
10016274:	46a0      	mov	r8, r4
10016276:	464c      	mov	r4, r9
10016278:	2c20      	cmp	r4, #32
1001627a:	d00e      	beq.n	1001629a <__aeabi_dsub+0x69a>
1001627c:	2440      	movs	r4, #64	; 0x40
1001627e:	464e      	mov	r6, r9
10016280:	1ba4      	subs	r4, r4, r6
10016282:	40a7      	lsls	r7, r4
10016284:	433d      	orrs	r5, r7
10016286:	1e6f      	subs	r7, r5, #1
10016288:	41bd      	sbcs	r5, r7
1001628a:	4644      	mov	r4, r8
1001628c:	2700      	movs	r7, #0
1001628e:	4325      	orrs	r5, r4
10016290:	e746      	b.n	10016120 <__aeabi_dsub+0x520>
10016292:	2700      	movs	r7, #0
10016294:	e7cf      	b.n	10016236 <__aeabi_dsub+0x636>
10016296:	000d      	movs	r5, r1
10016298:	e573      	b.n	10015d82 <__aeabi_dsub+0x182>
1001629a:	2700      	movs	r7, #0
1001629c:	e7f2      	b.n	10016284 <__aeabi_dsub+0x684>
1001629e:	46c0      	nop			; (mov r8, r8)
100162a0:	000007ff 	.word	0x000007ff
100162a4:	ff7fffff 	.word	0xff7fffff

100162a8 <__aeabi_dcmpun>:
100162a8:	b570      	push	{r4, r5, r6, lr}
100162aa:	4e0e      	ldr	r6, [pc, #56]	; (100162e4 <__aeabi_dcmpun+0x3c>)
100162ac:	030c      	lsls	r4, r1, #12
100162ae:	031d      	lsls	r5, r3, #12
100162b0:	0049      	lsls	r1, r1, #1
100162b2:	005b      	lsls	r3, r3, #1
100162b4:	0b24      	lsrs	r4, r4, #12
100162b6:	0d49      	lsrs	r1, r1, #21
100162b8:	0b2d      	lsrs	r5, r5, #12
100162ba:	0d5b      	lsrs	r3, r3, #21
100162bc:	42b1      	cmp	r1, r6
100162be:	d004      	beq.n	100162ca <__aeabi_dcmpun+0x22>
100162c0:	4908      	ldr	r1, [pc, #32]	; (100162e4 <__aeabi_dcmpun+0x3c>)
100162c2:	2000      	movs	r0, #0
100162c4:	428b      	cmp	r3, r1
100162c6:	d008      	beq.n	100162da <__aeabi_dcmpun+0x32>
100162c8:	bd70      	pop	{r4, r5, r6, pc}
100162ca:	4304      	orrs	r4, r0
100162cc:	2001      	movs	r0, #1
100162ce:	2c00      	cmp	r4, #0
100162d0:	d1fa      	bne.n	100162c8 <__aeabi_dcmpun+0x20>
100162d2:	4904      	ldr	r1, [pc, #16]	; (100162e4 <__aeabi_dcmpun+0x3c>)
100162d4:	2000      	movs	r0, #0
100162d6:	428b      	cmp	r3, r1
100162d8:	d1f6      	bne.n	100162c8 <__aeabi_dcmpun+0x20>
100162da:	4315      	orrs	r5, r2
100162dc:	0028      	movs	r0, r5
100162de:	1e45      	subs	r5, r0, #1
100162e0:	41a8      	sbcs	r0, r5
100162e2:	e7f1      	b.n	100162c8 <__aeabi_dcmpun+0x20>
100162e4:	000007ff 	.word	0x000007ff

100162e8 <__aeabi_d2iz>:
100162e8:	030b      	lsls	r3, r1, #12
100162ea:	b530      	push	{r4, r5, lr}
100162ec:	4d13      	ldr	r5, [pc, #76]	; (1001633c <__aeabi_d2iz+0x54>)
100162ee:	0b1a      	lsrs	r2, r3, #12
100162f0:	004b      	lsls	r3, r1, #1
100162f2:	0d5b      	lsrs	r3, r3, #21
100162f4:	0fc9      	lsrs	r1, r1, #31
100162f6:	2400      	movs	r4, #0
100162f8:	42ab      	cmp	r3, r5
100162fa:	dd11      	ble.n	10016320 <__aeabi_d2iz+0x38>
100162fc:	4c10      	ldr	r4, [pc, #64]	; (10016340 <__aeabi_d2iz+0x58>)
100162fe:	42a3      	cmp	r3, r4
10016300:	dc10      	bgt.n	10016324 <__aeabi_d2iz+0x3c>
10016302:	2480      	movs	r4, #128	; 0x80
10016304:	0364      	lsls	r4, r4, #13
10016306:	4322      	orrs	r2, r4
10016308:	4c0e      	ldr	r4, [pc, #56]	; (10016344 <__aeabi_d2iz+0x5c>)
1001630a:	1ae4      	subs	r4, r4, r3
1001630c:	2c1f      	cmp	r4, #31
1001630e:	dd0c      	ble.n	1001632a <__aeabi_d2iz+0x42>
10016310:	480d      	ldr	r0, [pc, #52]	; (10016348 <__aeabi_d2iz+0x60>)
10016312:	1ac3      	subs	r3, r0, r3
10016314:	40da      	lsrs	r2, r3
10016316:	0013      	movs	r3, r2
10016318:	425c      	negs	r4, r3
1001631a:	2900      	cmp	r1, #0
1001631c:	d100      	bne.n	10016320 <__aeabi_d2iz+0x38>
1001631e:	001c      	movs	r4, r3
10016320:	0020      	movs	r0, r4
10016322:	bd30      	pop	{r4, r5, pc}
10016324:	4b09      	ldr	r3, [pc, #36]	; (1001634c <__aeabi_d2iz+0x64>)
10016326:	18cc      	adds	r4, r1, r3
10016328:	e7fa      	b.n	10016320 <__aeabi_d2iz+0x38>
1001632a:	40e0      	lsrs	r0, r4
1001632c:	4c08      	ldr	r4, [pc, #32]	; (10016350 <__aeabi_d2iz+0x68>)
1001632e:	46a4      	mov	ip, r4
10016330:	4463      	add	r3, ip
10016332:	409a      	lsls	r2, r3
10016334:	0013      	movs	r3, r2
10016336:	4303      	orrs	r3, r0
10016338:	e7ee      	b.n	10016318 <__aeabi_d2iz+0x30>
1001633a:	46c0      	nop			; (mov r8, r8)
1001633c:	000003fe 	.word	0x000003fe
10016340:	0000041d 	.word	0x0000041d
10016344:	00000433 	.word	0x00000433
10016348:	00000413 	.word	0x00000413
1001634c:	7fffffff 	.word	0x7fffffff
10016350:	fffffbed 	.word	0xfffffbed

10016354 <__aeabi_i2d>:
10016354:	b570      	push	{r4, r5, r6, lr}
10016356:	2800      	cmp	r0, #0
10016358:	d030      	beq.n	100163bc <__aeabi_i2d+0x68>
1001635a:	17c3      	asrs	r3, r0, #31
1001635c:	18c4      	adds	r4, r0, r3
1001635e:	405c      	eors	r4, r3
10016360:	0fc5      	lsrs	r5, r0, #31
10016362:	0020      	movs	r0, r4
10016364:	f000 f950 	bl	10016608 <__clzsi2>
10016368:	4b17      	ldr	r3, [pc, #92]	; (100163c8 <__aeabi_i2d+0x74>)
1001636a:	4a18      	ldr	r2, [pc, #96]	; (100163cc <__aeabi_i2d+0x78>)
1001636c:	1a1b      	subs	r3, r3, r0
1001636e:	1ad2      	subs	r2, r2, r3
10016370:	2a1f      	cmp	r2, #31
10016372:	dd18      	ble.n	100163a6 <__aeabi_i2d+0x52>
10016374:	4a16      	ldr	r2, [pc, #88]	; (100163d0 <__aeabi_i2d+0x7c>)
10016376:	1ad2      	subs	r2, r2, r3
10016378:	4094      	lsls	r4, r2
1001637a:	2200      	movs	r2, #0
1001637c:	0324      	lsls	r4, r4, #12
1001637e:	055b      	lsls	r3, r3, #21
10016380:	0b24      	lsrs	r4, r4, #12
10016382:	0d5b      	lsrs	r3, r3, #21
10016384:	2100      	movs	r1, #0
10016386:	0010      	movs	r0, r2
10016388:	0324      	lsls	r4, r4, #12
1001638a:	0d0a      	lsrs	r2, r1, #20
1001638c:	0512      	lsls	r2, r2, #20
1001638e:	0b24      	lsrs	r4, r4, #12
10016390:	4314      	orrs	r4, r2
10016392:	4a10      	ldr	r2, [pc, #64]	; (100163d4 <__aeabi_i2d+0x80>)
10016394:	051b      	lsls	r3, r3, #20
10016396:	4014      	ands	r4, r2
10016398:	431c      	orrs	r4, r3
1001639a:	0064      	lsls	r4, r4, #1
1001639c:	07ed      	lsls	r5, r5, #31
1001639e:	0864      	lsrs	r4, r4, #1
100163a0:	432c      	orrs	r4, r5
100163a2:	0021      	movs	r1, r4
100163a4:	bd70      	pop	{r4, r5, r6, pc}
100163a6:	0021      	movs	r1, r4
100163a8:	4091      	lsls	r1, r2
100163aa:	000a      	movs	r2, r1
100163ac:	210b      	movs	r1, #11
100163ae:	1a08      	subs	r0, r1, r0
100163b0:	40c4      	lsrs	r4, r0
100163b2:	055b      	lsls	r3, r3, #21
100163b4:	0324      	lsls	r4, r4, #12
100163b6:	0b24      	lsrs	r4, r4, #12
100163b8:	0d5b      	lsrs	r3, r3, #21
100163ba:	e7e3      	b.n	10016384 <__aeabi_i2d+0x30>
100163bc:	2500      	movs	r5, #0
100163be:	2300      	movs	r3, #0
100163c0:	2400      	movs	r4, #0
100163c2:	2200      	movs	r2, #0
100163c4:	e7de      	b.n	10016384 <__aeabi_i2d+0x30>
100163c6:	46c0      	nop			; (mov r8, r8)
100163c8:	0000041e 	.word	0x0000041e
100163cc:	00000433 	.word	0x00000433
100163d0:	00000413 	.word	0x00000413
100163d4:	800fffff 	.word	0x800fffff

100163d8 <__aeabi_ui2d>:
100163d8:	b570      	push	{r4, r5, r6, lr}
100163da:	1e05      	subs	r5, r0, #0
100163dc:	d028      	beq.n	10016430 <__aeabi_ui2d+0x58>
100163de:	f000 f913 	bl	10016608 <__clzsi2>
100163e2:	4b15      	ldr	r3, [pc, #84]	; (10016438 <__aeabi_ui2d+0x60>)
100163e4:	4a15      	ldr	r2, [pc, #84]	; (1001643c <__aeabi_ui2d+0x64>)
100163e6:	1a1b      	subs	r3, r3, r0
100163e8:	1ad2      	subs	r2, r2, r3
100163ea:	2a1f      	cmp	r2, #31
100163ec:	dd16      	ble.n	1001641c <__aeabi_ui2d+0x44>
100163ee:	002c      	movs	r4, r5
100163f0:	4a13      	ldr	r2, [pc, #76]	; (10016440 <__aeabi_ui2d+0x68>)
100163f2:	2500      	movs	r5, #0
100163f4:	1ad2      	subs	r2, r2, r3
100163f6:	4094      	lsls	r4, r2
100163f8:	055a      	lsls	r2, r3, #21
100163fa:	0324      	lsls	r4, r4, #12
100163fc:	0b24      	lsrs	r4, r4, #12
100163fe:	0d52      	lsrs	r2, r2, #21
10016400:	2100      	movs	r1, #0
10016402:	0324      	lsls	r4, r4, #12
10016404:	0d0b      	lsrs	r3, r1, #20
10016406:	0b24      	lsrs	r4, r4, #12
10016408:	051b      	lsls	r3, r3, #20
1001640a:	4323      	orrs	r3, r4
1001640c:	4c0d      	ldr	r4, [pc, #52]	; (10016444 <__aeabi_ui2d+0x6c>)
1001640e:	0512      	lsls	r2, r2, #20
10016410:	4023      	ands	r3, r4
10016412:	4313      	orrs	r3, r2
10016414:	005b      	lsls	r3, r3, #1
10016416:	0028      	movs	r0, r5
10016418:	0859      	lsrs	r1, r3, #1
1001641a:	bd70      	pop	{r4, r5, r6, pc}
1001641c:	210b      	movs	r1, #11
1001641e:	002c      	movs	r4, r5
10016420:	1a08      	subs	r0, r1, r0
10016422:	40c4      	lsrs	r4, r0
10016424:	4095      	lsls	r5, r2
10016426:	0324      	lsls	r4, r4, #12
10016428:	055a      	lsls	r2, r3, #21
1001642a:	0b24      	lsrs	r4, r4, #12
1001642c:	0d52      	lsrs	r2, r2, #21
1001642e:	e7e7      	b.n	10016400 <__aeabi_ui2d+0x28>
10016430:	2200      	movs	r2, #0
10016432:	2400      	movs	r4, #0
10016434:	e7e4      	b.n	10016400 <__aeabi_ui2d+0x28>
10016436:	46c0      	nop			; (mov r8, r8)
10016438:	0000041e 	.word	0x0000041e
1001643c:	00000433 	.word	0x00000433
10016440:	00000413 	.word	0x00000413
10016444:	800fffff 	.word	0x800fffff

10016448 <__aeabi_f2d>:
10016448:	0042      	lsls	r2, r0, #1
1001644a:	0e12      	lsrs	r2, r2, #24
1001644c:	1c51      	adds	r1, r2, #1
1001644e:	0243      	lsls	r3, r0, #9
10016450:	b2c9      	uxtb	r1, r1
10016452:	b570      	push	{r4, r5, r6, lr}
10016454:	0a5d      	lsrs	r5, r3, #9
10016456:	0fc4      	lsrs	r4, r0, #31
10016458:	2901      	cmp	r1, #1
1001645a:	dd15      	ble.n	10016488 <__aeabi_f2d+0x40>
1001645c:	21e0      	movs	r1, #224	; 0xe0
1001645e:	0089      	lsls	r1, r1, #2
10016460:	468c      	mov	ip, r1
10016462:	076d      	lsls	r5, r5, #29
10016464:	0b1b      	lsrs	r3, r3, #12
10016466:	4462      	add	r2, ip
10016468:	2100      	movs	r1, #0
1001646a:	0028      	movs	r0, r5
1001646c:	0d0d      	lsrs	r5, r1, #20
1001646e:	052d      	lsls	r5, r5, #20
10016470:	432b      	orrs	r3, r5
10016472:	4d1c      	ldr	r5, [pc, #112]	; (100164e4 <__aeabi_f2d+0x9c>)
10016474:	0552      	lsls	r2, r2, #21
10016476:	402b      	ands	r3, r5
10016478:	0852      	lsrs	r2, r2, #1
1001647a:	4313      	orrs	r3, r2
1001647c:	005b      	lsls	r3, r3, #1
1001647e:	07e4      	lsls	r4, r4, #31
10016480:	085b      	lsrs	r3, r3, #1
10016482:	4323      	orrs	r3, r4
10016484:	0019      	movs	r1, r3
10016486:	bd70      	pop	{r4, r5, r6, pc}
10016488:	2a00      	cmp	r2, #0
1001648a:	d115      	bne.n	100164b8 <__aeabi_f2d+0x70>
1001648c:	2d00      	cmp	r5, #0
1001648e:	d01f      	beq.n	100164d0 <__aeabi_f2d+0x88>
10016490:	0028      	movs	r0, r5
10016492:	f000 f8b9 	bl	10016608 <__clzsi2>
10016496:	280a      	cmp	r0, #10
10016498:	dc1d      	bgt.n	100164d6 <__aeabi_f2d+0x8e>
1001649a:	230b      	movs	r3, #11
1001649c:	002a      	movs	r2, r5
1001649e:	1a1b      	subs	r3, r3, r0
100164a0:	40da      	lsrs	r2, r3
100164a2:	0013      	movs	r3, r2
100164a4:	0002      	movs	r2, r0
100164a6:	3215      	adds	r2, #21
100164a8:	4095      	lsls	r5, r2
100164aa:	4a0f      	ldr	r2, [pc, #60]	; (100164e8 <__aeabi_f2d+0xa0>)
100164ac:	031b      	lsls	r3, r3, #12
100164ae:	1a12      	subs	r2, r2, r0
100164b0:	0552      	lsls	r2, r2, #21
100164b2:	0b1b      	lsrs	r3, r3, #12
100164b4:	0d52      	lsrs	r2, r2, #21
100164b6:	e7d7      	b.n	10016468 <__aeabi_f2d+0x20>
100164b8:	2d00      	cmp	r5, #0
100164ba:	d006      	beq.n	100164ca <__aeabi_f2d+0x82>
100164bc:	2280      	movs	r2, #128	; 0x80
100164be:	0b1b      	lsrs	r3, r3, #12
100164c0:	0312      	lsls	r2, r2, #12
100164c2:	4313      	orrs	r3, r2
100164c4:	076d      	lsls	r5, r5, #29
100164c6:	4a09      	ldr	r2, [pc, #36]	; (100164ec <__aeabi_f2d+0xa4>)
100164c8:	e7ce      	b.n	10016468 <__aeabi_f2d+0x20>
100164ca:	4a08      	ldr	r2, [pc, #32]	; (100164ec <__aeabi_f2d+0xa4>)
100164cc:	2300      	movs	r3, #0
100164ce:	e7cb      	b.n	10016468 <__aeabi_f2d+0x20>
100164d0:	2200      	movs	r2, #0
100164d2:	2300      	movs	r3, #0
100164d4:	e7c8      	b.n	10016468 <__aeabi_f2d+0x20>
100164d6:	0003      	movs	r3, r0
100164d8:	3b0b      	subs	r3, #11
100164da:	409d      	lsls	r5, r3
100164dc:	002b      	movs	r3, r5
100164de:	2500      	movs	r5, #0
100164e0:	e7e3      	b.n	100164aa <__aeabi_f2d+0x62>
100164e2:	46c0      	nop			; (mov r8, r8)
100164e4:	800fffff 	.word	0x800fffff
100164e8:	00000389 	.word	0x00000389
100164ec:	000007ff 	.word	0x000007ff

100164f0 <__aeabi_d2f>:
100164f0:	004b      	lsls	r3, r1, #1
100164f2:	b570      	push	{r4, r5, r6, lr}
100164f4:	0d5e      	lsrs	r6, r3, #21
100164f6:	030c      	lsls	r4, r1, #12
100164f8:	1c75      	adds	r5, r6, #1
100164fa:	0a64      	lsrs	r4, r4, #9
100164fc:	0f42      	lsrs	r2, r0, #29
100164fe:	056d      	lsls	r5, r5, #21
10016500:	4322      	orrs	r2, r4
10016502:	0fc9      	lsrs	r1, r1, #31
10016504:	00c4      	lsls	r4, r0, #3
10016506:	0d6d      	lsrs	r5, r5, #21
10016508:	2d01      	cmp	r5, #1
1001650a:	dd2a      	ble.n	10016562 <__aeabi_d2f+0x72>
1001650c:	4b3b      	ldr	r3, [pc, #236]	; (100165fc <__aeabi_d2f+0x10c>)
1001650e:	18f3      	adds	r3, r6, r3
10016510:	2bfe      	cmp	r3, #254	; 0xfe
10016512:	dc1a      	bgt.n	1001654a <__aeabi_d2f+0x5a>
10016514:	2b00      	cmp	r3, #0
10016516:	dd42      	ble.n	1001659e <__aeabi_d2f+0xae>
10016518:	0180      	lsls	r0, r0, #6
1001651a:	1e45      	subs	r5, r0, #1
1001651c:	41a8      	sbcs	r0, r5
1001651e:	00d2      	lsls	r2, r2, #3
10016520:	4310      	orrs	r0, r2
10016522:	0f62      	lsrs	r2, r4, #29
10016524:	4302      	orrs	r2, r0
10016526:	0750      	lsls	r0, r2, #29
10016528:	d004      	beq.n	10016534 <__aeabi_d2f+0x44>
1001652a:	200f      	movs	r0, #15
1001652c:	4010      	ands	r0, r2
1001652e:	2804      	cmp	r0, #4
10016530:	d000      	beq.n	10016534 <__aeabi_d2f+0x44>
10016532:	3204      	adds	r2, #4
10016534:	2080      	movs	r0, #128	; 0x80
10016536:	04c0      	lsls	r0, r0, #19
10016538:	4010      	ands	r0, r2
1001653a:	d021      	beq.n	10016580 <__aeabi_d2f+0x90>
1001653c:	3301      	adds	r3, #1
1001653e:	2bff      	cmp	r3, #255	; 0xff
10016540:	d003      	beq.n	1001654a <__aeabi_d2f+0x5a>
10016542:	0192      	lsls	r2, r2, #6
10016544:	0a52      	lsrs	r2, r2, #9
10016546:	b2db      	uxtb	r3, r3
10016548:	e001      	b.n	1001654e <__aeabi_d2f+0x5e>
1001654a:	23ff      	movs	r3, #255	; 0xff
1001654c:	2200      	movs	r2, #0
1001654e:	0252      	lsls	r2, r2, #9
10016550:	0a52      	lsrs	r2, r2, #9
10016552:	05db      	lsls	r3, r3, #23
10016554:	4313      	orrs	r3, r2
10016556:	005b      	lsls	r3, r3, #1
10016558:	07c9      	lsls	r1, r1, #31
1001655a:	085b      	lsrs	r3, r3, #1
1001655c:	430b      	orrs	r3, r1
1001655e:	0018      	movs	r0, r3
10016560:	bd70      	pop	{r4, r5, r6, pc}
10016562:	2e00      	cmp	r6, #0
10016564:	d007      	beq.n	10016576 <__aeabi_d2f+0x86>
10016566:	4314      	orrs	r4, r2
10016568:	d0ef      	beq.n	1001654a <__aeabi_d2f+0x5a>
1001656a:	2080      	movs	r0, #128	; 0x80
1001656c:	00d2      	lsls	r2, r2, #3
1001656e:	0480      	lsls	r0, r0, #18
10016570:	4302      	orrs	r2, r0
10016572:	23ff      	movs	r3, #255	; 0xff
10016574:	e7d7      	b.n	10016526 <__aeabi_d2f+0x36>
10016576:	4322      	orrs	r2, r4
10016578:	2300      	movs	r3, #0
1001657a:	2a00      	cmp	r2, #0
1001657c:	d003      	beq.n	10016586 <__aeabi_d2f+0x96>
1001657e:	2205      	movs	r2, #5
10016580:	08d2      	lsrs	r2, r2, #3
10016582:	2bff      	cmp	r3, #255	; 0xff
10016584:	d003      	beq.n	1001658e <__aeabi_d2f+0x9e>
10016586:	0252      	lsls	r2, r2, #9
10016588:	0a52      	lsrs	r2, r2, #9
1001658a:	b2db      	uxtb	r3, r3
1001658c:	e7df      	b.n	1001654e <__aeabi_d2f+0x5e>
1001658e:	2a00      	cmp	r2, #0
10016590:	d032      	beq.n	100165f8 <__aeabi_d2f+0x108>
10016592:	2080      	movs	r0, #128	; 0x80
10016594:	03c0      	lsls	r0, r0, #15
10016596:	4302      	orrs	r2, r0
10016598:	0252      	lsls	r2, r2, #9
1001659a:	0a52      	lsrs	r2, r2, #9
1001659c:	e7d7      	b.n	1001654e <__aeabi_d2f+0x5e>
1001659e:	0018      	movs	r0, r3
100165a0:	3017      	adds	r0, #23
100165a2:	db14      	blt.n	100165ce <__aeabi_d2f+0xde>
100165a4:	2080      	movs	r0, #128	; 0x80
100165a6:	0400      	lsls	r0, r0, #16
100165a8:	4302      	orrs	r2, r0
100165aa:	201e      	movs	r0, #30
100165ac:	1ac0      	subs	r0, r0, r3
100165ae:	281f      	cmp	r0, #31
100165b0:	dc0f      	bgt.n	100165d2 <__aeabi_d2f+0xe2>
100165b2:	0025      	movs	r5, r4
100165b4:	4b12      	ldr	r3, [pc, #72]	; (10016600 <__aeabi_d2f+0x110>)
100165b6:	18f3      	adds	r3, r6, r3
100165b8:	409d      	lsls	r5, r3
100165ba:	1e6e      	subs	r6, r5, #1
100165bc:	41b5      	sbcs	r5, r6
100165be:	409a      	lsls	r2, r3
100165c0:	002b      	movs	r3, r5
100165c2:	4313      	orrs	r3, r2
100165c4:	0022      	movs	r2, r4
100165c6:	40c2      	lsrs	r2, r0
100165c8:	431a      	orrs	r2, r3
100165ca:	2300      	movs	r3, #0
100165cc:	e7ab      	b.n	10016526 <__aeabi_d2f+0x36>
100165ce:	2300      	movs	r3, #0
100165d0:	e7d5      	b.n	1001657e <__aeabi_d2f+0x8e>
100165d2:	2502      	movs	r5, #2
100165d4:	426d      	negs	r5, r5
100165d6:	1aeb      	subs	r3, r5, r3
100165d8:	0015      	movs	r5, r2
100165da:	40dd      	lsrs	r5, r3
100165dc:	2820      	cmp	r0, #32
100165de:	d009      	beq.n	100165f4 <__aeabi_d2f+0x104>
100165e0:	4b08      	ldr	r3, [pc, #32]	; (10016604 <__aeabi_d2f+0x114>)
100165e2:	18f3      	adds	r3, r6, r3
100165e4:	409a      	lsls	r2, r3
100165e6:	4314      	orrs	r4, r2
100165e8:	1e62      	subs	r2, r4, #1
100165ea:	4194      	sbcs	r4, r2
100165ec:	0022      	movs	r2, r4
100165ee:	2300      	movs	r3, #0
100165f0:	432a      	orrs	r2, r5
100165f2:	e798      	b.n	10016526 <__aeabi_d2f+0x36>
100165f4:	2200      	movs	r2, #0
100165f6:	e7f6      	b.n	100165e6 <__aeabi_d2f+0xf6>
100165f8:	2200      	movs	r2, #0
100165fa:	e7a8      	b.n	1001654e <__aeabi_d2f+0x5e>
100165fc:	fffffc80 	.word	0xfffffc80
10016600:	fffffc82 	.word	0xfffffc82
10016604:	fffffca2 	.word	0xfffffca2

10016608 <__clzsi2>:
10016608:	211c      	movs	r1, #28
1001660a:	2301      	movs	r3, #1
1001660c:	041b      	lsls	r3, r3, #16
1001660e:	4298      	cmp	r0, r3
10016610:	d301      	bcc.n	10016616 <__clzsi2+0xe>
10016612:	0c00      	lsrs	r0, r0, #16
10016614:	3910      	subs	r1, #16
10016616:	0a1b      	lsrs	r3, r3, #8
10016618:	4298      	cmp	r0, r3
1001661a:	d301      	bcc.n	10016620 <__clzsi2+0x18>
1001661c:	0a00      	lsrs	r0, r0, #8
1001661e:	3908      	subs	r1, #8
10016620:	091b      	lsrs	r3, r3, #4
10016622:	4298      	cmp	r0, r3
10016624:	d301      	bcc.n	1001662a <__clzsi2+0x22>
10016626:	0900      	lsrs	r0, r0, #4
10016628:	3904      	subs	r1, #4
1001662a:	a202      	add	r2, pc, #8	; (adr r2, 10016634 <__clzsi2+0x2c>)
1001662c:	5c10      	ldrb	r0, [r2, r0]
1001662e:	1840      	adds	r0, r0, r1
10016630:	4770      	bx	lr
10016632:	46c0      	nop			; (mov r8, r8)
10016634:	02020304 	.word	0x02020304
10016638:	01010101 	.word	0x01010101
	...

10016644 <__errno>:
10016644:	4b01      	ldr	r3, [pc, #4]	; (1001664c <__errno+0x8>)
10016646:	6818      	ldr	r0, [r3, #0]
10016648:	4770      	bx	lr
1001664a:	46c0      	nop			; (mov r8, r8)
1001664c:	1001939c 	.word	0x1001939c

10016650 <__libc_init_array>:
10016650:	4b0e      	ldr	r3, [pc, #56]	; (1001668c <__libc_init_array+0x3c>)
10016652:	b570      	push	{r4, r5, r6, lr}
10016654:	2500      	movs	r5, #0
10016656:	001e      	movs	r6, r3
10016658:	4c0d      	ldr	r4, [pc, #52]	; (10016690 <__libc_init_array+0x40>)
1001665a:	1ae4      	subs	r4, r4, r3
1001665c:	10a4      	asrs	r4, r4, #2
1001665e:	42a5      	cmp	r5, r4
10016660:	d004      	beq.n	1001666c <__libc_init_array+0x1c>
10016662:	00ab      	lsls	r3, r5, #2
10016664:	58f3      	ldr	r3, [r6, r3]
10016666:	4798      	blx	r3
10016668:	3501      	adds	r5, #1
1001666a:	e7f8      	b.n	1001665e <__libc_init_array+0xe>
1001666c:	f002 fe4e 	bl	1001930c <_init>
10016670:	4b08      	ldr	r3, [pc, #32]	; (10016694 <__libc_init_array+0x44>)
10016672:	2500      	movs	r5, #0
10016674:	001e      	movs	r6, r3
10016676:	4c08      	ldr	r4, [pc, #32]	; (10016698 <__libc_init_array+0x48>)
10016678:	1ae4      	subs	r4, r4, r3
1001667a:	10a4      	asrs	r4, r4, #2
1001667c:	42a5      	cmp	r5, r4
1001667e:	d004      	beq.n	1001668a <__libc_init_array+0x3a>
10016680:	00ab      	lsls	r3, r5, #2
10016682:	58f3      	ldr	r3, [r6, r3]
10016684:	4798      	blx	r3
10016686:	3501      	adds	r5, #1
10016688:	e7f8      	b.n	1001667c <__libc_init_array+0x2c>
1001668a:	bd70      	pop	{r4, r5, r6, pc}
1001668c:	10019318 	.word	0x10019318
10016690:	10019318 	.word	0x10019318
10016694:	10019318 	.word	0x10019318
10016698:	1001931c 	.word	0x1001931c

1001669c <malloc>:
1001669c:	b510      	push	{r4, lr}
1001669e:	4b03      	ldr	r3, [pc, #12]	; (100166ac <malloc+0x10>)
100166a0:	0001      	movs	r1, r0
100166a2:	6818      	ldr	r0, [r3, #0]
100166a4:	f000 f86a 	bl	1001677c <_malloc_r>
100166a8:	bd10      	pop	{r4, pc}
100166aa:	46c0      	nop			; (mov r8, r8)
100166ac:	1001939c 	.word	0x1001939c

100166b0 <memcmp>:
100166b0:	b530      	push	{r4, r5, lr}
100166b2:	2400      	movs	r4, #0
100166b4:	42a2      	cmp	r2, r4
100166b6:	d008      	beq.n	100166ca <memcmp+0x1a>
100166b8:	5d03      	ldrb	r3, [r0, r4]
100166ba:	1c65      	adds	r5, r4, #1
100166bc:	5d0c      	ldrb	r4, [r1, r4]
100166be:	42a3      	cmp	r3, r4
100166c0:	d001      	beq.n	100166c6 <memcmp+0x16>
100166c2:	1b18      	subs	r0, r3, r4
100166c4:	e002      	b.n	100166cc <memcmp+0x1c>
100166c6:	002c      	movs	r4, r5
100166c8:	e7f4      	b.n	100166b4 <memcmp+0x4>
100166ca:	2000      	movs	r0, #0
100166cc:	bd30      	pop	{r4, r5, pc}

100166ce <memcpy>:
100166ce:	2300      	movs	r3, #0
100166d0:	b510      	push	{r4, lr}
100166d2:	429a      	cmp	r2, r3
100166d4:	d003      	beq.n	100166de <memcpy+0x10>
100166d6:	5ccc      	ldrb	r4, [r1, r3]
100166d8:	54c4      	strb	r4, [r0, r3]
100166da:	3301      	adds	r3, #1
100166dc:	e7f9      	b.n	100166d2 <memcpy+0x4>
100166de:	bd10      	pop	{r4, pc}

100166e0 <memset>:
100166e0:	0003      	movs	r3, r0
100166e2:	1882      	adds	r2, r0, r2
100166e4:	4293      	cmp	r3, r2
100166e6:	d002      	beq.n	100166ee <memset+0xe>
100166e8:	7019      	strb	r1, [r3, #0]
100166ea:	3301      	adds	r3, #1
100166ec:	e7fa      	b.n	100166e4 <memset+0x4>
100166ee:	4770      	bx	lr

100166f0 <_free_r>:
100166f0:	b530      	push	{r4, r5, lr}
100166f2:	2900      	cmp	r1, #0
100166f4:	d03e      	beq.n	10016774 <_free_r+0x84>
100166f6:	3904      	subs	r1, #4
100166f8:	680b      	ldr	r3, [r1, #0]
100166fa:	2b00      	cmp	r3, #0
100166fc:	da00      	bge.n	10016700 <_free_r+0x10>
100166fe:	18c9      	adds	r1, r1, r3
10016700:	4a1d      	ldr	r2, [pc, #116]	; (10016778 <_free_r+0x88>)
10016702:	6813      	ldr	r3, [r2, #0]
10016704:	0014      	movs	r4, r2
10016706:	2b00      	cmp	r3, #0
10016708:	d102      	bne.n	10016710 <_free_r+0x20>
1001670a:	604b      	str	r3, [r1, #4]
1001670c:	6011      	str	r1, [r2, #0]
1001670e:	e031      	b.n	10016774 <_free_r+0x84>
10016710:	428b      	cmp	r3, r1
10016712:	d90d      	bls.n	10016730 <_free_r+0x40>
10016714:	680a      	ldr	r2, [r1, #0]
10016716:	1888      	adds	r0, r1, r2
10016718:	4283      	cmp	r3, r0
1001671a:	d103      	bne.n	10016724 <_free_r+0x34>
1001671c:	6818      	ldr	r0, [r3, #0]
1001671e:	685b      	ldr	r3, [r3, #4]
10016720:	1882      	adds	r2, r0, r2
10016722:	600a      	str	r2, [r1, #0]
10016724:	604b      	str	r3, [r1, #4]
10016726:	6021      	str	r1, [r4, #0]
10016728:	e024      	b.n	10016774 <_free_r+0x84>
1001672a:	428a      	cmp	r2, r1
1001672c:	d803      	bhi.n	10016736 <_free_r+0x46>
1001672e:	0013      	movs	r3, r2
10016730:	685a      	ldr	r2, [r3, #4]
10016732:	2a00      	cmp	r2, #0
10016734:	d1f9      	bne.n	1001672a <_free_r+0x3a>
10016736:	681d      	ldr	r5, [r3, #0]
10016738:	195c      	adds	r4, r3, r5
1001673a:	428c      	cmp	r4, r1
1001673c:	d10b      	bne.n	10016756 <_free_r+0x66>
1001673e:	6809      	ldr	r1, [r1, #0]
10016740:	1869      	adds	r1, r5, r1
10016742:	1858      	adds	r0, r3, r1
10016744:	6019      	str	r1, [r3, #0]
10016746:	4282      	cmp	r2, r0
10016748:	d114      	bne.n	10016774 <_free_r+0x84>
1001674a:	6810      	ldr	r0, [r2, #0]
1001674c:	6852      	ldr	r2, [r2, #4]
1001674e:	1841      	adds	r1, r0, r1
10016750:	6019      	str	r1, [r3, #0]
10016752:	605a      	str	r2, [r3, #4]
10016754:	e00e      	b.n	10016774 <_free_r+0x84>
10016756:	428c      	cmp	r4, r1
10016758:	d902      	bls.n	10016760 <_free_r+0x70>
1001675a:	230c      	movs	r3, #12
1001675c:	6003      	str	r3, [r0, #0]
1001675e:	e009      	b.n	10016774 <_free_r+0x84>
10016760:	6808      	ldr	r0, [r1, #0]
10016762:	180c      	adds	r4, r1, r0
10016764:	42a2      	cmp	r2, r4
10016766:	d103      	bne.n	10016770 <_free_r+0x80>
10016768:	6814      	ldr	r4, [r2, #0]
1001676a:	6852      	ldr	r2, [r2, #4]
1001676c:	1820      	adds	r0, r4, r0
1001676e:	6008      	str	r0, [r1, #0]
10016770:	604a      	str	r2, [r1, #4]
10016772:	6059      	str	r1, [r3, #4]
10016774:	bd30      	pop	{r4, r5, pc}
10016776:	46c0      	nop			; (mov r8, r8)
10016778:	1001ae70 	.word	0x1001ae70

1001677c <_malloc_r>:
1001677c:	2303      	movs	r3, #3
1001677e:	b570      	push	{r4, r5, r6, lr}
10016780:	1ccd      	adds	r5, r1, #3
10016782:	439d      	bics	r5, r3
10016784:	3508      	adds	r5, #8
10016786:	0006      	movs	r6, r0
10016788:	2d0c      	cmp	r5, #12
1001678a:	d201      	bcs.n	10016790 <_malloc_r+0x14>
1001678c:	250c      	movs	r5, #12
1001678e:	e005      	b.n	1001679c <_malloc_r+0x20>
10016790:	2d00      	cmp	r5, #0
10016792:	da03      	bge.n	1001679c <_malloc_r+0x20>
10016794:	230c      	movs	r3, #12
10016796:	2000      	movs	r0, #0
10016798:	6033      	str	r3, [r6, #0]
1001679a:	e040      	b.n	1001681e <_malloc_r+0xa2>
1001679c:	42a9      	cmp	r1, r5
1001679e:	d8f9      	bhi.n	10016794 <_malloc_r+0x18>
100167a0:	4b1f      	ldr	r3, [pc, #124]	; (10016820 <_malloc_r+0xa4>)
100167a2:	681c      	ldr	r4, [r3, #0]
100167a4:	001a      	movs	r2, r3
100167a6:	0021      	movs	r1, r4
100167a8:	2900      	cmp	r1, #0
100167aa:	d013      	beq.n	100167d4 <_malloc_r+0x58>
100167ac:	680b      	ldr	r3, [r1, #0]
100167ae:	1b5b      	subs	r3, r3, r5
100167b0:	d40d      	bmi.n	100167ce <_malloc_r+0x52>
100167b2:	2b0b      	cmp	r3, #11
100167b4:	d902      	bls.n	100167bc <_malloc_r+0x40>
100167b6:	600b      	str	r3, [r1, #0]
100167b8:	18cc      	adds	r4, r1, r3
100167ba:	e01e      	b.n	100167fa <_malloc_r+0x7e>
100167bc:	428c      	cmp	r4, r1
100167be:	d102      	bne.n	100167c6 <_malloc_r+0x4a>
100167c0:	6863      	ldr	r3, [r4, #4]
100167c2:	6013      	str	r3, [r2, #0]
100167c4:	e01a      	b.n	100167fc <_malloc_r+0x80>
100167c6:	684b      	ldr	r3, [r1, #4]
100167c8:	6063      	str	r3, [r4, #4]
100167ca:	000c      	movs	r4, r1
100167cc:	e016      	b.n	100167fc <_malloc_r+0x80>
100167ce:	000c      	movs	r4, r1
100167d0:	6849      	ldr	r1, [r1, #4]
100167d2:	e7e9      	b.n	100167a8 <_malloc_r+0x2c>
100167d4:	4c13      	ldr	r4, [pc, #76]	; (10016824 <_malloc_r+0xa8>)
100167d6:	6823      	ldr	r3, [r4, #0]
100167d8:	2b00      	cmp	r3, #0
100167da:	d103      	bne.n	100167e4 <_malloc_r+0x68>
100167dc:	0030      	movs	r0, r6
100167de:	f000 f8f9 	bl	100169d4 <_sbrk_r>
100167e2:	6020      	str	r0, [r4, #0]
100167e4:	0029      	movs	r1, r5
100167e6:	0030      	movs	r0, r6
100167e8:	f000 f8f4 	bl	100169d4 <_sbrk_r>
100167ec:	1c43      	adds	r3, r0, #1
100167ee:	d0d1      	beq.n	10016794 <_malloc_r+0x18>
100167f0:	2303      	movs	r3, #3
100167f2:	1cc4      	adds	r4, r0, #3
100167f4:	439c      	bics	r4, r3
100167f6:	42a0      	cmp	r0, r4
100167f8:	d10a      	bne.n	10016810 <_malloc_r+0x94>
100167fa:	6025      	str	r5, [r4, #0]
100167fc:	0020      	movs	r0, r4
100167fe:	2207      	movs	r2, #7
10016800:	300b      	adds	r0, #11
10016802:	1d23      	adds	r3, r4, #4
10016804:	4390      	bics	r0, r2
10016806:	1ac3      	subs	r3, r0, r3
10016808:	d009      	beq.n	1001681e <_malloc_r+0xa2>
1001680a:	425a      	negs	r2, r3
1001680c:	50e2      	str	r2, [r4, r3]
1001680e:	e006      	b.n	1001681e <_malloc_r+0xa2>
10016810:	1a21      	subs	r1, r4, r0
10016812:	0030      	movs	r0, r6
10016814:	f000 f8de 	bl	100169d4 <_sbrk_r>
10016818:	1c43      	adds	r3, r0, #1
1001681a:	d1ee      	bne.n	100167fa <_malloc_r+0x7e>
1001681c:	e7ba      	b.n	10016794 <_malloc_r+0x18>
1001681e:	bd70      	pop	{r4, r5, r6, pc}
10016820:	1001ae70 	.word	0x1001ae70
10016824:	1001ae6c 	.word	0x1001ae6c

10016828 <iprintf>:
10016828:	b40f      	push	{r0, r1, r2, r3}
1001682a:	4b0b      	ldr	r3, [pc, #44]	; (10016858 <iprintf+0x30>)
1001682c:	b513      	push	{r0, r1, r4, lr}
1001682e:	681c      	ldr	r4, [r3, #0]
10016830:	2c00      	cmp	r4, #0
10016832:	d005      	beq.n	10016840 <iprintf+0x18>
10016834:	69a3      	ldr	r3, [r4, #24]
10016836:	2b00      	cmp	r3, #0
10016838:	d102      	bne.n	10016840 <iprintf+0x18>
1001683a:	0020      	movs	r0, r4
1001683c:	f000 fb58 	bl	10016ef0 <__sinit>
10016840:	ab05      	add	r3, sp, #20
10016842:	9a04      	ldr	r2, [sp, #16]
10016844:	68a1      	ldr	r1, [r4, #8]
10016846:	0020      	movs	r0, r4
10016848:	9301      	str	r3, [sp, #4]
1001684a:	f000 fc71 	bl	10017130 <_vfiprintf_r>
1001684e:	bc16      	pop	{r1, r2, r4}
10016850:	bc08      	pop	{r3}
10016852:	b004      	add	sp, #16
10016854:	4718      	bx	r3
10016856:	46c0      	nop			; (mov r8, r8)
10016858:	1001939c 	.word	0x1001939c

1001685c <putchar>:
1001685c:	4b08      	ldr	r3, [pc, #32]	; (10016880 <putchar+0x24>)
1001685e:	b570      	push	{r4, r5, r6, lr}
10016860:	681c      	ldr	r4, [r3, #0]
10016862:	0005      	movs	r5, r0
10016864:	2c00      	cmp	r4, #0
10016866:	d005      	beq.n	10016874 <putchar+0x18>
10016868:	69a3      	ldr	r3, [r4, #24]
1001686a:	2b00      	cmp	r3, #0
1001686c:	d102      	bne.n	10016874 <putchar+0x18>
1001686e:	0020      	movs	r0, r4
10016870:	f000 fb3e 	bl	10016ef0 <__sinit>
10016874:	0029      	movs	r1, r5
10016876:	68a2      	ldr	r2, [r4, #8]
10016878:	0020      	movs	r0, r4
1001687a:	f000 ff05 	bl	10017688 <_putc_r>
1001687e:	bd70      	pop	{r4, r5, r6, pc}
10016880:	1001939c 	.word	0x1001939c

10016884 <_puts_r>:
10016884:	b570      	push	{r4, r5, r6, lr}
10016886:	0005      	movs	r5, r0
10016888:	000e      	movs	r6, r1
1001688a:	2800      	cmp	r0, #0
1001688c:	d004      	beq.n	10016898 <_puts_r+0x14>
1001688e:	6983      	ldr	r3, [r0, #24]
10016890:	2b00      	cmp	r3, #0
10016892:	d101      	bne.n	10016898 <_puts_r+0x14>
10016894:	f000 fb2c 	bl	10016ef0 <__sinit>
10016898:	69ab      	ldr	r3, [r5, #24]
1001689a:	68ac      	ldr	r4, [r5, #8]
1001689c:	2b00      	cmp	r3, #0
1001689e:	d102      	bne.n	100168a6 <_puts_r+0x22>
100168a0:	0028      	movs	r0, r5
100168a2:	f000 fb25 	bl	10016ef0 <__sinit>
100168a6:	4b25      	ldr	r3, [pc, #148]	; (1001693c <_puts_r+0xb8>)
100168a8:	429c      	cmp	r4, r3
100168aa:	d101      	bne.n	100168b0 <_puts_r+0x2c>
100168ac:	686c      	ldr	r4, [r5, #4]
100168ae:	e008      	b.n	100168c2 <_puts_r+0x3e>
100168b0:	4b23      	ldr	r3, [pc, #140]	; (10016940 <_puts_r+0xbc>)
100168b2:	429c      	cmp	r4, r3
100168b4:	d101      	bne.n	100168ba <_puts_r+0x36>
100168b6:	68ac      	ldr	r4, [r5, #8]
100168b8:	e003      	b.n	100168c2 <_puts_r+0x3e>
100168ba:	4b22      	ldr	r3, [pc, #136]	; (10016944 <_puts_r+0xc0>)
100168bc:	429c      	cmp	r4, r3
100168be:	d100      	bne.n	100168c2 <_puts_r+0x3e>
100168c0:	68ec      	ldr	r4, [r5, #12]
100168c2:	89a3      	ldrh	r3, [r4, #12]
100168c4:	071b      	lsls	r3, r3, #28
100168c6:	d502      	bpl.n	100168ce <_puts_r+0x4a>
100168c8:	6923      	ldr	r3, [r4, #16]
100168ca:	2b00      	cmp	r3, #0
100168cc:	d111      	bne.n	100168f2 <_puts_r+0x6e>
100168ce:	0021      	movs	r1, r4
100168d0:	0028      	movs	r0, r5
100168d2:	f000 f9a3 	bl	10016c1c <__swsetup_r>
100168d6:	2800      	cmp	r0, #0
100168d8:	d00b      	beq.n	100168f2 <_puts_r+0x6e>
100168da:	2001      	movs	r0, #1
100168dc:	4240      	negs	r0, r0
100168de:	e02b      	b.n	10016938 <_puts_r+0xb4>
100168e0:	3b01      	subs	r3, #1
100168e2:	3601      	adds	r6, #1
100168e4:	60a3      	str	r3, [r4, #8]
100168e6:	2b00      	cmp	r3, #0
100168e8:	db08      	blt.n	100168fc <_puts_r+0x78>
100168ea:	6823      	ldr	r3, [r4, #0]
100168ec:	1c5a      	adds	r2, r3, #1
100168ee:	6022      	str	r2, [r4, #0]
100168f0:	7019      	strb	r1, [r3, #0]
100168f2:	7831      	ldrb	r1, [r6, #0]
100168f4:	68a3      	ldr	r3, [r4, #8]
100168f6:	2900      	cmp	r1, #0
100168f8:	d1f2      	bne.n	100168e0 <_puts_r+0x5c>
100168fa:	e00b      	b.n	10016914 <_puts_r+0x90>
100168fc:	69a2      	ldr	r2, [r4, #24]
100168fe:	4293      	cmp	r3, r2
10016900:	db01      	blt.n	10016906 <_puts_r+0x82>
10016902:	290a      	cmp	r1, #10
10016904:	d1f1      	bne.n	100168ea <_puts_r+0x66>
10016906:	0022      	movs	r2, r4
10016908:	0028      	movs	r0, r5
1001690a:	f000 f92f 	bl	10016b6c <__swbuf_r>
1001690e:	1c43      	adds	r3, r0, #1
10016910:	d1ef      	bne.n	100168f2 <_puts_r+0x6e>
10016912:	e7e2      	b.n	100168da <_puts_r+0x56>
10016914:	3b01      	subs	r3, #1
10016916:	60a3      	str	r3, [r4, #8]
10016918:	2b00      	cmp	r3, #0
1001691a:	da08      	bge.n	1001692e <_puts_r+0xaa>
1001691c:	0022      	movs	r2, r4
1001691e:	310a      	adds	r1, #10
10016920:	0028      	movs	r0, r5
10016922:	f000 f923 	bl	10016b6c <__swbuf_r>
10016926:	1c43      	adds	r3, r0, #1
10016928:	d0d7      	beq.n	100168da <_puts_r+0x56>
1001692a:	200a      	movs	r0, #10
1001692c:	e004      	b.n	10016938 <_puts_r+0xb4>
1001692e:	200a      	movs	r0, #10
10016930:	6823      	ldr	r3, [r4, #0]
10016932:	1c5a      	adds	r2, r3, #1
10016934:	6022      	str	r2, [r4, #0]
10016936:	7018      	strb	r0, [r3, #0]
10016938:	bd70      	pop	{r4, r5, r6, pc}
1001693a:	46c0      	nop			; (mov r8, r8)
1001693c:	10019278 	.word	0x10019278
10016940:	10019298 	.word	0x10019298
10016944:	100192b8 	.word	0x100192b8

10016948 <puts>:
10016948:	b510      	push	{r4, lr}
1001694a:	4b03      	ldr	r3, [pc, #12]	; (10016958 <puts+0x10>)
1001694c:	0001      	movs	r1, r0
1001694e:	6818      	ldr	r0, [r3, #0]
10016950:	f7ff ff98 	bl	10016884 <_puts_r>
10016954:	bd10      	pop	{r4, pc}
10016956:	46c0      	nop			; (mov r8, r8)
10016958:	1001939c 	.word	0x1001939c

1001695c <rand>:
1001695c:	4b15      	ldr	r3, [pc, #84]	; (100169b4 <rand+0x58>)
1001695e:	b510      	push	{r4, lr}
10016960:	681c      	ldr	r4, [r3, #0]
10016962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10016964:	2b00      	cmp	r3, #0
10016966:	d115      	bne.n	10016994 <rand+0x38>
10016968:	2018      	movs	r0, #24
1001696a:	f7ff fe97 	bl	1001669c <malloc>
1001696e:	4b12      	ldr	r3, [pc, #72]	; (100169b8 <rand+0x5c>)
10016970:	63a0      	str	r0, [r4, #56]	; 0x38
10016972:	8003      	strh	r3, [r0, #0]
10016974:	4b11      	ldr	r3, [pc, #68]	; (100169bc <rand+0x60>)
10016976:	2201      	movs	r2, #1
10016978:	8043      	strh	r3, [r0, #2]
1001697a:	4b11      	ldr	r3, [pc, #68]	; (100169c0 <rand+0x64>)
1001697c:	8083      	strh	r3, [r0, #4]
1001697e:	4b11      	ldr	r3, [pc, #68]	; (100169c4 <rand+0x68>)
10016980:	80c3      	strh	r3, [r0, #6]
10016982:	4b11      	ldr	r3, [pc, #68]	; (100169c8 <rand+0x6c>)
10016984:	8103      	strh	r3, [r0, #8]
10016986:	2305      	movs	r3, #5
10016988:	8143      	strh	r3, [r0, #10]
1001698a:	3306      	adds	r3, #6
1001698c:	8183      	strh	r3, [r0, #12]
1001698e:	2300      	movs	r3, #0
10016990:	6102      	str	r2, [r0, #16]
10016992:	6143      	str	r3, [r0, #20]
10016994:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10016996:	4a0d      	ldr	r2, [pc, #52]	; (100169cc <rand+0x70>)
10016998:	6920      	ldr	r0, [r4, #16]
1001699a:	6961      	ldr	r1, [r4, #20]
1001699c:	4b0c      	ldr	r3, [pc, #48]	; (100169d0 <rand+0x74>)
1001699e:	f7fd f869 	bl	10013a74 <__aeabi_lmul>
100169a2:	2201      	movs	r2, #1
100169a4:	2300      	movs	r3, #0
100169a6:	1880      	adds	r0, r0, r2
100169a8:	4159      	adcs	r1, r3
100169aa:	6120      	str	r0, [r4, #16]
100169ac:	6161      	str	r1, [r4, #20]
100169ae:	0048      	lsls	r0, r1, #1
100169b0:	0840      	lsrs	r0, r0, #1
100169b2:	bd10      	pop	{r4, pc}
100169b4:	1001939c 	.word	0x1001939c
100169b8:	0000330e 	.word	0x0000330e
100169bc:	ffffabcd 	.word	0xffffabcd
100169c0:	00001234 	.word	0x00001234
100169c4:	ffffe66d 	.word	0xffffe66d
100169c8:	ffffdeec 	.word	0xffffdeec
100169cc:	4c957f2d 	.word	0x4c957f2d
100169d0:	5851f42d 	.word	0x5851f42d

100169d4 <_sbrk_r>:
100169d4:	2300      	movs	r3, #0
100169d6:	b570      	push	{r4, r5, r6, lr}
100169d8:	4c06      	ldr	r4, [pc, #24]	; (100169f4 <_sbrk_r+0x20>)
100169da:	0005      	movs	r5, r0
100169dc:	0008      	movs	r0, r1
100169de:	6023      	str	r3, [r4, #0]
100169e0:	f7f1 fd0c 	bl	100083fc <_sbrk>
100169e4:	1c43      	adds	r3, r0, #1
100169e6:	d103      	bne.n	100169f0 <_sbrk_r+0x1c>
100169e8:	6823      	ldr	r3, [r4, #0]
100169ea:	2b00      	cmp	r3, #0
100169ec:	d000      	beq.n	100169f0 <_sbrk_r+0x1c>
100169ee:	602b      	str	r3, [r5, #0]
100169f0:	bd70      	pop	{r4, r5, r6, pc}
100169f2:	46c0      	nop			; (mov r8, r8)
100169f4:	1001c298 	.word	0x1001c298

100169f8 <setbuf>:
100169f8:	424a      	negs	r2, r1
100169fa:	414a      	adcs	r2, r1
100169fc:	2380      	movs	r3, #128	; 0x80
100169fe:	b510      	push	{r4, lr}
10016a00:	0052      	lsls	r2, r2, #1
10016a02:	00db      	lsls	r3, r3, #3
10016a04:	f000 f802 	bl	10016a0c <setvbuf>
10016a08:	bd10      	pop	{r4, pc}
	...

10016a0c <setvbuf>:
10016a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016a0e:	001d      	movs	r5, r3
10016a10:	4b51      	ldr	r3, [pc, #324]	; (10016b58 <setvbuf+0x14c>)
10016a12:	b085      	sub	sp, #20
10016a14:	681e      	ldr	r6, [r3, #0]
10016a16:	0004      	movs	r4, r0
10016a18:	000f      	movs	r7, r1
10016a1a:	9200      	str	r2, [sp, #0]
10016a1c:	2e00      	cmp	r6, #0
10016a1e:	d005      	beq.n	10016a2c <setvbuf+0x20>
10016a20:	69b3      	ldr	r3, [r6, #24]
10016a22:	2b00      	cmp	r3, #0
10016a24:	d102      	bne.n	10016a2c <setvbuf+0x20>
10016a26:	0030      	movs	r0, r6
10016a28:	f000 fa62 	bl	10016ef0 <__sinit>
10016a2c:	4b4b      	ldr	r3, [pc, #300]	; (10016b5c <setvbuf+0x150>)
10016a2e:	429c      	cmp	r4, r3
10016a30:	d101      	bne.n	10016a36 <setvbuf+0x2a>
10016a32:	6874      	ldr	r4, [r6, #4]
10016a34:	e008      	b.n	10016a48 <setvbuf+0x3c>
10016a36:	4b4a      	ldr	r3, [pc, #296]	; (10016b60 <setvbuf+0x154>)
10016a38:	429c      	cmp	r4, r3
10016a3a:	d101      	bne.n	10016a40 <setvbuf+0x34>
10016a3c:	68b4      	ldr	r4, [r6, #8]
10016a3e:	e003      	b.n	10016a48 <setvbuf+0x3c>
10016a40:	4b48      	ldr	r3, [pc, #288]	; (10016b64 <setvbuf+0x158>)
10016a42:	429c      	cmp	r4, r3
10016a44:	d100      	bne.n	10016a48 <setvbuf+0x3c>
10016a46:	68f4      	ldr	r4, [r6, #12]
10016a48:	9b00      	ldr	r3, [sp, #0]
10016a4a:	2b02      	cmp	r3, #2
10016a4c:	d005      	beq.n	10016a5a <setvbuf+0x4e>
10016a4e:	2b01      	cmp	r3, #1
10016a50:	d900      	bls.n	10016a54 <setvbuf+0x48>
10016a52:	e07c      	b.n	10016b4e <setvbuf+0x142>
10016a54:	2d00      	cmp	r5, #0
10016a56:	da00      	bge.n	10016a5a <setvbuf+0x4e>
10016a58:	e079      	b.n	10016b4e <setvbuf+0x142>
10016a5a:	0021      	movs	r1, r4
10016a5c:	0030      	movs	r0, r6
10016a5e:	f000 f9d9 	bl	10016e14 <_fflush_r>
10016a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016a64:	2900      	cmp	r1, #0
10016a66:	d008      	beq.n	10016a7a <setvbuf+0x6e>
10016a68:	0023      	movs	r3, r4
10016a6a:	3344      	adds	r3, #68	; 0x44
10016a6c:	4299      	cmp	r1, r3
10016a6e:	d002      	beq.n	10016a76 <setvbuf+0x6a>
10016a70:	0030      	movs	r0, r6
10016a72:	f7ff fe3d 	bl	100166f0 <_free_r>
10016a76:	2300      	movs	r3, #0
10016a78:	6363      	str	r3, [r4, #52]	; 0x34
10016a7a:	2300      	movs	r3, #0
10016a7c:	61a3      	str	r3, [r4, #24]
10016a7e:	6063      	str	r3, [r4, #4]
10016a80:	89a3      	ldrh	r3, [r4, #12]
10016a82:	061b      	lsls	r3, r3, #24
10016a84:	d503      	bpl.n	10016a8e <setvbuf+0x82>
10016a86:	6921      	ldr	r1, [r4, #16]
10016a88:	0030      	movs	r0, r6
10016a8a:	f7ff fe31 	bl	100166f0 <_free_r>
10016a8e:	89a2      	ldrh	r2, [r4, #12]
10016a90:	4b35      	ldr	r3, [pc, #212]	; (10016b68 <setvbuf+0x15c>)
10016a92:	4013      	ands	r3, r2
10016a94:	81a3      	strh	r3, [r4, #12]
10016a96:	9b00      	ldr	r3, [sp, #0]
10016a98:	2b02      	cmp	r3, #2
10016a9a:	d021      	beq.n	10016ae0 <setvbuf+0xd4>
10016a9c:	ab03      	add	r3, sp, #12
10016a9e:	aa02      	add	r2, sp, #8
10016aa0:	0021      	movs	r1, r4
10016aa2:	0030      	movs	r0, r6
10016aa4:	f000 fab8 	bl	10017018 <__swhatbuf_r>
10016aa8:	89a3      	ldrh	r3, [r4, #12]
10016aaa:	4318      	orrs	r0, r3
10016aac:	81a0      	strh	r0, [r4, #12]
10016aae:	2d00      	cmp	r5, #0
10016ab0:	d101      	bne.n	10016ab6 <setvbuf+0xaa>
10016ab2:	9d02      	ldr	r5, [sp, #8]
10016ab4:	e001      	b.n	10016aba <setvbuf+0xae>
10016ab6:	2f00      	cmp	r7, #0
10016ab8:	d125      	bne.n	10016b06 <setvbuf+0xfa>
10016aba:	0028      	movs	r0, r5
10016abc:	f7ff fdee 	bl	1001669c <malloc>
10016ac0:	9501      	str	r5, [sp, #4]
10016ac2:	1e07      	subs	r7, r0, #0
10016ac4:	d11a      	bne.n	10016afc <setvbuf+0xf0>
10016ac6:	9b02      	ldr	r3, [sp, #8]
10016ac8:	9301      	str	r3, [sp, #4]
10016aca:	42ab      	cmp	r3, r5
10016acc:	d102      	bne.n	10016ad4 <setvbuf+0xc8>
10016ace:	2001      	movs	r0, #1
10016ad0:	4240      	negs	r0, r0
10016ad2:	e006      	b.n	10016ae2 <setvbuf+0xd6>
10016ad4:	9801      	ldr	r0, [sp, #4]
10016ad6:	f7ff fde1 	bl	1001669c <malloc>
10016ada:	1e07      	subs	r7, r0, #0
10016adc:	d10e      	bne.n	10016afc <setvbuf+0xf0>
10016ade:	e7f6      	b.n	10016ace <setvbuf+0xc2>
10016ae0:	2000      	movs	r0, #0
10016ae2:	2202      	movs	r2, #2
10016ae4:	89a3      	ldrh	r3, [r4, #12]
10016ae6:	4313      	orrs	r3, r2
10016ae8:	81a3      	strh	r3, [r4, #12]
10016aea:	2300      	movs	r3, #0
10016aec:	60a3      	str	r3, [r4, #8]
10016aee:	0023      	movs	r3, r4
10016af0:	3347      	adds	r3, #71	; 0x47
10016af2:	6023      	str	r3, [r4, #0]
10016af4:	6123      	str	r3, [r4, #16]
10016af6:	2301      	movs	r3, #1
10016af8:	6163      	str	r3, [r4, #20]
10016afa:	e02a      	b.n	10016b52 <setvbuf+0x146>
10016afc:	2280      	movs	r2, #128	; 0x80
10016afe:	89a3      	ldrh	r3, [r4, #12]
10016b00:	9d01      	ldr	r5, [sp, #4]
10016b02:	4313      	orrs	r3, r2
10016b04:	81a3      	strh	r3, [r4, #12]
10016b06:	69b3      	ldr	r3, [r6, #24]
10016b08:	2b00      	cmp	r3, #0
10016b0a:	d102      	bne.n	10016b12 <setvbuf+0x106>
10016b0c:	0030      	movs	r0, r6
10016b0e:	f000 f9ef 	bl	10016ef0 <__sinit>
10016b12:	9b00      	ldr	r3, [sp, #0]
10016b14:	2b01      	cmp	r3, #1
10016b16:	d103      	bne.n	10016b20 <setvbuf+0x114>
10016b18:	89a3      	ldrh	r3, [r4, #12]
10016b1a:	9a00      	ldr	r2, [sp, #0]
10016b1c:	431a      	orrs	r2, r3
10016b1e:	81a2      	strh	r2, [r4, #12]
10016b20:	2308      	movs	r3, #8
10016b22:	89a2      	ldrh	r2, [r4, #12]
10016b24:	6027      	str	r7, [r4, #0]
10016b26:	4013      	ands	r3, r2
10016b28:	6127      	str	r7, [r4, #16]
10016b2a:	6165      	str	r5, [r4, #20]
10016b2c:	1e18      	subs	r0, r3, #0
10016b2e:	d00c      	beq.n	10016b4a <setvbuf+0x13e>
10016b30:	2301      	movs	r3, #1
10016b32:	401a      	ands	r2, r3
10016b34:	2300      	movs	r3, #0
10016b36:	1e10      	subs	r0, r2, #0
10016b38:	4298      	cmp	r0, r3
10016b3a:	d004      	beq.n	10016b46 <setvbuf+0x13a>
10016b3c:	426d      	negs	r5, r5
10016b3e:	60a3      	str	r3, [r4, #8]
10016b40:	61a5      	str	r5, [r4, #24]
10016b42:	0018      	movs	r0, r3
10016b44:	e005      	b.n	10016b52 <setvbuf+0x146>
10016b46:	60a5      	str	r5, [r4, #8]
10016b48:	e003      	b.n	10016b52 <setvbuf+0x146>
10016b4a:	60a3      	str	r3, [r4, #8]
10016b4c:	e001      	b.n	10016b52 <setvbuf+0x146>
10016b4e:	2001      	movs	r0, #1
10016b50:	4240      	negs	r0, r0
10016b52:	b005      	add	sp, #20
10016b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016b56:	46c0      	nop			; (mov r8, r8)
10016b58:	1001939c 	.word	0x1001939c
10016b5c:	10019278 	.word	0x10019278
10016b60:	10019298 	.word	0x10019298
10016b64:	100192b8 	.word	0x100192b8
10016b68:	fffff35c 	.word	0xfffff35c

10016b6c <__swbuf_r>:
10016b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016b6e:	0005      	movs	r5, r0
10016b70:	000f      	movs	r7, r1
10016b72:	0014      	movs	r4, r2
10016b74:	2800      	cmp	r0, #0
10016b76:	d004      	beq.n	10016b82 <__swbuf_r+0x16>
10016b78:	6983      	ldr	r3, [r0, #24]
10016b7a:	2b00      	cmp	r3, #0
10016b7c:	d101      	bne.n	10016b82 <__swbuf_r+0x16>
10016b7e:	f000 f9b7 	bl	10016ef0 <__sinit>
10016b82:	4b23      	ldr	r3, [pc, #140]	; (10016c10 <__swbuf_r+0xa4>)
10016b84:	429c      	cmp	r4, r3
10016b86:	d101      	bne.n	10016b8c <__swbuf_r+0x20>
10016b88:	686c      	ldr	r4, [r5, #4]
10016b8a:	e008      	b.n	10016b9e <__swbuf_r+0x32>
10016b8c:	4b21      	ldr	r3, [pc, #132]	; (10016c14 <__swbuf_r+0xa8>)
10016b8e:	429c      	cmp	r4, r3
10016b90:	d101      	bne.n	10016b96 <__swbuf_r+0x2a>
10016b92:	68ac      	ldr	r4, [r5, #8]
10016b94:	e003      	b.n	10016b9e <__swbuf_r+0x32>
10016b96:	4b20      	ldr	r3, [pc, #128]	; (10016c18 <__swbuf_r+0xac>)
10016b98:	429c      	cmp	r4, r3
10016b9a:	d100      	bne.n	10016b9e <__swbuf_r+0x32>
10016b9c:	68ec      	ldr	r4, [r5, #12]
10016b9e:	69a3      	ldr	r3, [r4, #24]
10016ba0:	60a3      	str	r3, [r4, #8]
10016ba2:	89a3      	ldrh	r3, [r4, #12]
10016ba4:	071b      	lsls	r3, r3, #28
10016ba6:	d50a      	bpl.n	10016bbe <__swbuf_r+0x52>
10016ba8:	6923      	ldr	r3, [r4, #16]
10016baa:	2b00      	cmp	r3, #0
10016bac:	d007      	beq.n	10016bbe <__swbuf_r+0x52>
10016bae:	6823      	ldr	r3, [r4, #0]
10016bb0:	6922      	ldr	r2, [r4, #16]
10016bb2:	b2fe      	uxtb	r6, r7
10016bb4:	1a98      	subs	r0, r3, r2
10016bb6:	6963      	ldr	r3, [r4, #20]
10016bb8:	4298      	cmp	r0, r3
10016bba:	db0f      	blt.n	10016bdc <__swbuf_r+0x70>
10016bbc:	e008      	b.n	10016bd0 <__swbuf_r+0x64>
10016bbe:	0021      	movs	r1, r4
10016bc0:	0028      	movs	r0, r5
10016bc2:	f000 f82b 	bl	10016c1c <__swsetup_r>
10016bc6:	2800      	cmp	r0, #0
10016bc8:	d0f1      	beq.n	10016bae <__swbuf_r+0x42>
10016bca:	2001      	movs	r0, #1
10016bcc:	4240      	negs	r0, r0
10016bce:	e01d      	b.n	10016c0c <__swbuf_r+0xa0>
10016bd0:	0021      	movs	r1, r4
10016bd2:	0028      	movs	r0, r5
10016bd4:	f000 f91e 	bl	10016e14 <_fflush_r>
10016bd8:	2800      	cmp	r0, #0
10016bda:	d1f6      	bne.n	10016bca <__swbuf_r+0x5e>
10016bdc:	68a3      	ldr	r3, [r4, #8]
10016bde:	3001      	adds	r0, #1
10016be0:	3b01      	subs	r3, #1
10016be2:	60a3      	str	r3, [r4, #8]
10016be4:	6823      	ldr	r3, [r4, #0]
10016be6:	1c5a      	adds	r2, r3, #1
10016be8:	6022      	str	r2, [r4, #0]
10016bea:	701f      	strb	r7, [r3, #0]
10016bec:	6963      	ldr	r3, [r4, #20]
10016bee:	4298      	cmp	r0, r3
10016bf0:	d005      	beq.n	10016bfe <__swbuf_r+0x92>
10016bf2:	89a3      	ldrh	r3, [r4, #12]
10016bf4:	0030      	movs	r0, r6
10016bf6:	07db      	lsls	r3, r3, #31
10016bf8:	d508      	bpl.n	10016c0c <__swbuf_r+0xa0>
10016bfa:	2e0a      	cmp	r6, #10
10016bfc:	d106      	bne.n	10016c0c <__swbuf_r+0xa0>
10016bfe:	0021      	movs	r1, r4
10016c00:	0028      	movs	r0, r5
10016c02:	f000 f907 	bl	10016e14 <_fflush_r>
10016c06:	2800      	cmp	r0, #0
10016c08:	d1df      	bne.n	10016bca <__swbuf_r+0x5e>
10016c0a:	0030      	movs	r0, r6
10016c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016c0e:	46c0      	nop			; (mov r8, r8)
10016c10:	10019278 	.word	0x10019278
10016c14:	10019298 	.word	0x10019298
10016c18:	100192b8 	.word	0x100192b8

10016c1c <__swsetup_r>:
10016c1c:	4b36      	ldr	r3, [pc, #216]	; (10016cf8 <__swsetup_r+0xdc>)
10016c1e:	b570      	push	{r4, r5, r6, lr}
10016c20:	681d      	ldr	r5, [r3, #0]
10016c22:	0006      	movs	r6, r0
10016c24:	000c      	movs	r4, r1
10016c26:	2d00      	cmp	r5, #0
10016c28:	d005      	beq.n	10016c36 <__swsetup_r+0x1a>
10016c2a:	69ab      	ldr	r3, [r5, #24]
10016c2c:	2b00      	cmp	r3, #0
10016c2e:	d102      	bne.n	10016c36 <__swsetup_r+0x1a>
10016c30:	0028      	movs	r0, r5
10016c32:	f000 f95d 	bl	10016ef0 <__sinit>
10016c36:	4b31      	ldr	r3, [pc, #196]	; (10016cfc <__swsetup_r+0xe0>)
10016c38:	429c      	cmp	r4, r3
10016c3a:	d101      	bne.n	10016c40 <__swsetup_r+0x24>
10016c3c:	686c      	ldr	r4, [r5, #4]
10016c3e:	e008      	b.n	10016c52 <__swsetup_r+0x36>
10016c40:	4b2f      	ldr	r3, [pc, #188]	; (10016d00 <__swsetup_r+0xe4>)
10016c42:	429c      	cmp	r4, r3
10016c44:	d101      	bne.n	10016c4a <__swsetup_r+0x2e>
10016c46:	68ac      	ldr	r4, [r5, #8]
10016c48:	e003      	b.n	10016c52 <__swsetup_r+0x36>
10016c4a:	4b2e      	ldr	r3, [pc, #184]	; (10016d04 <__swsetup_r+0xe8>)
10016c4c:	429c      	cmp	r4, r3
10016c4e:	d100      	bne.n	10016c52 <__swsetup_r+0x36>
10016c50:	68ec      	ldr	r4, [r5, #12]
10016c52:	220c      	movs	r2, #12
10016c54:	5ea3      	ldrsh	r3, [r4, r2]
10016c56:	b29a      	uxth	r2, r3
10016c58:	0711      	lsls	r1, r2, #28
10016c5a:	d423      	bmi.n	10016ca4 <__swsetup_r+0x88>
10016c5c:	06d1      	lsls	r1, r2, #27
10016c5e:	d407      	bmi.n	10016c70 <__swsetup_r+0x54>
10016c60:	2209      	movs	r2, #9
10016c62:	2001      	movs	r0, #1
10016c64:	6032      	str	r2, [r6, #0]
10016c66:	3237      	adds	r2, #55	; 0x37
10016c68:	4313      	orrs	r3, r2
10016c6a:	81a3      	strh	r3, [r4, #12]
10016c6c:	4240      	negs	r0, r0
10016c6e:	e042      	b.n	10016cf6 <__swsetup_r+0xda>
10016c70:	0753      	lsls	r3, r2, #29
10016c72:	d513      	bpl.n	10016c9c <__swsetup_r+0x80>
10016c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016c76:	2900      	cmp	r1, #0
10016c78:	d008      	beq.n	10016c8c <__swsetup_r+0x70>
10016c7a:	0023      	movs	r3, r4
10016c7c:	3344      	adds	r3, #68	; 0x44
10016c7e:	4299      	cmp	r1, r3
10016c80:	d002      	beq.n	10016c88 <__swsetup_r+0x6c>
10016c82:	0030      	movs	r0, r6
10016c84:	f7ff fd34 	bl	100166f0 <_free_r>
10016c88:	2300      	movs	r3, #0
10016c8a:	6363      	str	r3, [r4, #52]	; 0x34
10016c8c:	2224      	movs	r2, #36	; 0x24
10016c8e:	89a3      	ldrh	r3, [r4, #12]
10016c90:	4393      	bics	r3, r2
10016c92:	81a3      	strh	r3, [r4, #12]
10016c94:	2300      	movs	r3, #0
10016c96:	6063      	str	r3, [r4, #4]
10016c98:	6923      	ldr	r3, [r4, #16]
10016c9a:	6023      	str	r3, [r4, #0]
10016c9c:	2208      	movs	r2, #8
10016c9e:	89a3      	ldrh	r3, [r4, #12]
10016ca0:	4313      	orrs	r3, r2
10016ca2:	81a3      	strh	r3, [r4, #12]
10016ca4:	6923      	ldr	r3, [r4, #16]
10016ca6:	2b00      	cmp	r3, #0
10016ca8:	d10b      	bne.n	10016cc2 <__swsetup_r+0xa6>
10016caa:	23a0      	movs	r3, #160	; 0xa0
10016cac:	89a2      	ldrh	r2, [r4, #12]
10016cae:	009b      	lsls	r3, r3, #2
10016cb0:	4013      	ands	r3, r2
10016cb2:	2280      	movs	r2, #128	; 0x80
10016cb4:	0092      	lsls	r2, r2, #2
10016cb6:	4293      	cmp	r3, r2
10016cb8:	d003      	beq.n	10016cc2 <__swsetup_r+0xa6>
10016cba:	0021      	movs	r1, r4
10016cbc:	0030      	movs	r0, r6
10016cbe:	f000 f9d1 	bl	10017064 <__smakebuf_r>
10016cc2:	2301      	movs	r3, #1
10016cc4:	89a2      	ldrh	r2, [r4, #12]
10016cc6:	4013      	ands	r3, r2
10016cc8:	d005      	beq.n	10016cd6 <__swsetup_r+0xba>
10016cca:	2300      	movs	r3, #0
10016ccc:	60a3      	str	r3, [r4, #8]
10016cce:	6963      	ldr	r3, [r4, #20]
10016cd0:	425b      	negs	r3, r3
10016cd2:	61a3      	str	r3, [r4, #24]
10016cd4:	e003      	b.n	10016cde <__swsetup_r+0xc2>
10016cd6:	0792      	lsls	r2, r2, #30
10016cd8:	d400      	bmi.n	10016cdc <__swsetup_r+0xc0>
10016cda:	6963      	ldr	r3, [r4, #20]
10016cdc:	60a3      	str	r3, [r4, #8]
10016cde:	2000      	movs	r0, #0
10016ce0:	6923      	ldr	r3, [r4, #16]
10016ce2:	4283      	cmp	r3, r0
10016ce4:	d107      	bne.n	10016cf6 <__swsetup_r+0xda>
10016ce6:	220c      	movs	r2, #12
10016ce8:	5ea3      	ldrsh	r3, [r4, r2]
10016cea:	061a      	lsls	r2, r3, #24
10016cec:	d503      	bpl.n	10016cf6 <__swsetup_r+0xda>
10016cee:	2240      	movs	r2, #64	; 0x40
10016cf0:	4313      	orrs	r3, r2
10016cf2:	81a3      	strh	r3, [r4, #12]
10016cf4:	3801      	subs	r0, #1
10016cf6:	bd70      	pop	{r4, r5, r6, pc}
10016cf8:	1001939c 	.word	0x1001939c
10016cfc:	10019278 	.word	0x10019278
10016d00:	10019298 	.word	0x10019298
10016d04:	100192b8 	.word	0x100192b8

10016d08 <__sflush_r>:
10016d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016d0a:	898a      	ldrh	r2, [r1, #12]
10016d0c:	0005      	movs	r5, r0
10016d0e:	000c      	movs	r4, r1
10016d10:	0713      	lsls	r3, r2, #28
10016d12:	d45a      	bmi.n	10016dca <__sflush_r+0xc2>
10016d14:	684b      	ldr	r3, [r1, #4]
10016d16:	2b00      	cmp	r3, #0
10016d18:	dc02      	bgt.n	10016d20 <__sflush_r+0x18>
10016d1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10016d1c:	2b00      	cmp	r3, #0
10016d1e:	dd19      	ble.n	10016d54 <__sflush_r+0x4c>
10016d20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016d22:	2f00      	cmp	r7, #0
10016d24:	d016      	beq.n	10016d54 <__sflush_r+0x4c>
10016d26:	2300      	movs	r3, #0
10016d28:	682e      	ldr	r6, [r5, #0]
10016d2a:	602b      	str	r3, [r5, #0]
10016d2c:	2380      	movs	r3, #128	; 0x80
10016d2e:	015b      	lsls	r3, r3, #5
10016d30:	401a      	ands	r2, r3
10016d32:	d001      	beq.n	10016d38 <__sflush_r+0x30>
10016d34:	6d60      	ldr	r0, [r4, #84]	; 0x54
10016d36:	e014      	b.n	10016d62 <__sflush_r+0x5a>
10016d38:	2301      	movs	r3, #1
10016d3a:	6a21      	ldr	r1, [r4, #32]
10016d3c:	0028      	movs	r0, r5
10016d3e:	47b8      	blx	r7
10016d40:	1c43      	adds	r3, r0, #1
10016d42:	d10e      	bne.n	10016d62 <__sflush_r+0x5a>
10016d44:	682b      	ldr	r3, [r5, #0]
10016d46:	2b00      	cmp	r3, #0
10016d48:	d00b      	beq.n	10016d62 <__sflush_r+0x5a>
10016d4a:	2b1d      	cmp	r3, #29
10016d4c:	d001      	beq.n	10016d52 <__sflush_r+0x4a>
10016d4e:	2b16      	cmp	r3, #22
10016d50:	d102      	bne.n	10016d58 <__sflush_r+0x50>
10016d52:	602e      	str	r6, [r5, #0]
10016d54:	2000      	movs	r0, #0
10016d56:	e05a      	b.n	10016e0e <__sflush_r+0x106>
10016d58:	2240      	movs	r2, #64	; 0x40
10016d5a:	89a3      	ldrh	r3, [r4, #12]
10016d5c:	4313      	orrs	r3, r2
10016d5e:	81a3      	strh	r3, [r4, #12]
10016d60:	e055      	b.n	10016e0e <__sflush_r+0x106>
10016d62:	89a3      	ldrh	r3, [r4, #12]
10016d64:	075b      	lsls	r3, r3, #29
10016d66:	d506      	bpl.n	10016d76 <__sflush_r+0x6e>
10016d68:	6863      	ldr	r3, [r4, #4]
10016d6a:	1ac0      	subs	r0, r0, r3
10016d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10016d6e:	2b00      	cmp	r3, #0
10016d70:	d001      	beq.n	10016d76 <__sflush_r+0x6e>
10016d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
10016d74:	1ac0      	subs	r0, r0, r3
10016d76:	2300      	movs	r3, #0
10016d78:	0002      	movs	r2, r0
10016d7a:	6a21      	ldr	r1, [r4, #32]
10016d7c:	0028      	movs	r0, r5
10016d7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016d80:	47b8      	blx	r7
10016d82:	89a3      	ldrh	r3, [r4, #12]
10016d84:	1c42      	adds	r2, r0, #1
10016d86:	d106      	bne.n	10016d96 <__sflush_r+0x8e>
10016d88:	6829      	ldr	r1, [r5, #0]
10016d8a:	291d      	cmp	r1, #29
10016d8c:	d83a      	bhi.n	10016e04 <__sflush_r+0xfc>
10016d8e:	4a20      	ldr	r2, [pc, #128]	; (10016e10 <__sflush_r+0x108>)
10016d90:	40ca      	lsrs	r2, r1
10016d92:	07d2      	lsls	r2, r2, #31
10016d94:	d536      	bpl.n	10016e04 <__sflush_r+0xfc>
10016d96:	2200      	movs	r2, #0
10016d98:	6062      	str	r2, [r4, #4]
10016d9a:	6922      	ldr	r2, [r4, #16]
10016d9c:	6022      	str	r2, [r4, #0]
10016d9e:	04db      	lsls	r3, r3, #19
10016da0:	d505      	bpl.n	10016dae <__sflush_r+0xa6>
10016da2:	1c43      	adds	r3, r0, #1
10016da4:	d102      	bne.n	10016dac <__sflush_r+0xa4>
10016da6:	682b      	ldr	r3, [r5, #0]
10016da8:	2b00      	cmp	r3, #0
10016daa:	d100      	bne.n	10016dae <__sflush_r+0xa6>
10016dac:	6560      	str	r0, [r4, #84]	; 0x54
10016dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016db0:	602e      	str	r6, [r5, #0]
10016db2:	2900      	cmp	r1, #0
10016db4:	d0ce      	beq.n	10016d54 <__sflush_r+0x4c>
10016db6:	0023      	movs	r3, r4
10016db8:	3344      	adds	r3, #68	; 0x44
10016dba:	4299      	cmp	r1, r3
10016dbc:	d002      	beq.n	10016dc4 <__sflush_r+0xbc>
10016dbe:	0028      	movs	r0, r5
10016dc0:	f7ff fc96 	bl	100166f0 <_free_r>
10016dc4:	2000      	movs	r0, #0
10016dc6:	6360      	str	r0, [r4, #52]	; 0x34
10016dc8:	e021      	b.n	10016e0e <__sflush_r+0x106>
10016dca:	690f      	ldr	r7, [r1, #16]
10016dcc:	2f00      	cmp	r7, #0
10016dce:	d0c1      	beq.n	10016d54 <__sflush_r+0x4c>
10016dd0:	680b      	ldr	r3, [r1, #0]
10016dd2:	600f      	str	r7, [r1, #0]
10016dd4:	1bdb      	subs	r3, r3, r7
10016dd6:	9301      	str	r3, [sp, #4]
10016dd8:	2300      	movs	r3, #0
10016dda:	0792      	lsls	r2, r2, #30
10016ddc:	d100      	bne.n	10016de0 <__sflush_r+0xd8>
10016dde:	694b      	ldr	r3, [r1, #20]
10016de0:	60a3      	str	r3, [r4, #8]
10016de2:	e003      	b.n	10016dec <__sflush_r+0xe4>
10016de4:	9b01      	ldr	r3, [sp, #4]
10016de6:	183f      	adds	r7, r7, r0
10016de8:	1a1b      	subs	r3, r3, r0
10016dea:	9301      	str	r3, [sp, #4]
10016dec:	9b01      	ldr	r3, [sp, #4]
10016dee:	2b00      	cmp	r3, #0
10016df0:	ddb0      	ble.n	10016d54 <__sflush_r+0x4c>
10016df2:	9b01      	ldr	r3, [sp, #4]
10016df4:	003a      	movs	r2, r7
10016df6:	6a21      	ldr	r1, [r4, #32]
10016df8:	0028      	movs	r0, r5
10016dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016dfc:	47b0      	blx	r6
10016dfe:	2800      	cmp	r0, #0
10016e00:	dcf0      	bgt.n	10016de4 <__sflush_r+0xdc>
10016e02:	89a3      	ldrh	r3, [r4, #12]
10016e04:	2240      	movs	r2, #64	; 0x40
10016e06:	2001      	movs	r0, #1
10016e08:	4313      	orrs	r3, r2
10016e0a:	81a3      	strh	r3, [r4, #12]
10016e0c:	4240      	negs	r0, r0
10016e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016e10:	20400001 	.word	0x20400001

10016e14 <_fflush_r>:
10016e14:	690b      	ldr	r3, [r1, #16]
10016e16:	b570      	push	{r4, r5, r6, lr}
10016e18:	0005      	movs	r5, r0
10016e1a:	000c      	movs	r4, r1
10016e1c:	2b00      	cmp	r3, #0
10016e1e:	d101      	bne.n	10016e24 <_fflush_r+0x10>
10016e20:	2000      	movs	r0, #0
10016e22:	e01c      	b.n	10016e5e <_fflush_r+0x4a>
10016e24:	2800      	cmp	r0, #0
10016e26:	d004      	beq.n	10016e32 <_fflush_r+0x1e>
10016e28:	6983      	ldr	r3, [r0, #24]
10016e2a:	2b00      	cmp	r3, #0
10016e2c:	d101      	bne.n	10016e32 <_fflush_r+0x1e>
10016e2e:	f000 f85f 	bl	10016ef0 <__sinit>
10016e32:	4b0b      	ldr	r3, [pc, #44]	; (10016e60 <_fflush_r+0x4c>)
10016e34:	429c      	cmp	r4, r3
10016e36:	d101      	bne.n	10016e3c <_fflush_r+0x28>
10016e38:	686c      	ldr	r4, [r5, #4]
10016e3a:	e008      	b.n	10016e4e <_fflush_r+0x3a>
10016e3c:	4b09      	ldr	r3, [pc, #36]	; (10016e64 <_fflush_r+0x50>)
10016e3e:	429c      	cmp	r4, r3
10016e40:	d101      	bne.n	10016e46 <_fflush_r+0x32>
10016e42:	68ac      	ldr	r4, [r5, #8]
10016e44:	e003      	b.n	10016e4e <_fflush_r+0x3a>
10016e46:	4b08      	ldr	r3, [pc, #32]	; (10016e68 <_fflush_r+0x54>)
10016e48:	429c      	cmp	r4, r3
10016e4a:	d100      	bne.n	10016e4e <_fflush_r+0x3a>
10016e4c:	68ec      	ldr	r4, [r5, #12]
10016e4e:	220c      	movs	r2, #12
10016e50:	5ea3      	ldrsh	r3, [r4, r2]
10016e52:	2b00      	cmp	r3, #0
10016e54:	d0e4      	beq.n	10016e20 <_fflush_r+0xc>
10016e56:	0021      	movs	r1, r4
10016e58:	0028      	movs	r0, r5
10016e5a:	f7ff ff55 	bl	10016d08 <__sflush_r>
10016e5e:	bd70      	pop	{r4, r5, r6, pc}
10016e60:	10019278 	.word	0x10019278
10016e64:	10019298 	.word	0x10019298
10016e68:	100192b8 	.word	0x100192b8

10016e6c <_cleanup_r>:
10016e6c:	b510      	push	{r4, lr}
10016e6e:	4902      	ldr	r1, [pc, #8]	; (10016e78 <_cleanup_r+0xc>)
10016e70:	f000 f8b0 	bl	10016fd4 <_fwalk_reent>
10016e74:	bd10      	pop	{r4, pc}
10016e76:	46c0      	nop			; (mov r8, r8)
10016e78:	10016e15 	.word	0x10016e15

10016e7c <std.isra.0>:
10016e7c:	2300      	movs	r3, #0
10016e7e:	b510      	push	{r4, lr}
10016e80:	0004      	movs	r4, r0
10016e82:	6003      	str	r3, [r0, #0]
10016e84:	6043      	str	r3, [r0, #4]
10016e86:	6083      	str	r3, [r0, #8]
10016e88:	8181      	strh	r1, [r0, #12]
10016e8a:	6643      	str	r3, [r0, #100]	; 0x64
10016e8c:	81c2      	strh	r2, [r0, #14]
10016e8e:	6103      	str	r3, [r0, #16]
10016e90:	6143      	str	r3, [r0, #20]
10016e92:	6183      	str	r3, [r0, #24]
10016e94:	0019      	movs	r1, r3
10016e96:	2208      	movs	r2, #8
10016e98:	305c      	adds	r0, #92	; 0x5c
10016e9a:	f7ff fc21 	bl	100166e0 <memset>
10016e9e:	4b05      	ldr	r3, [pc, #20]	; (10016eb4 <std.isra.0+0x38>)
10016ea0:	6224      	str	r4, [r4, #32]
10016ea2:	6263      	str	r3, [r4, #36]	; 0x24
10016ea4:	4b04      	ldr	r3, [pc, #16]	; (10016eb8 <std.isra.0+0x3c>)
10016ea6:	62a3      	str	r3, [r4, #40]	; 0x28
10016ea8:	4b04      	ldr	r3, [pc, #16]	; (10016ebc <std.isra.0+0x40>)
10016eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
10016eac:	4b04      	ldr	r3, [pc, #16]	; (10016ec0 <std.isra.0+0x44>)
10016eae:	6323      	str	r3, [r4, #48]	; 0x30
10016eb0:	bd10      	pop	{r4, pc}
10016eb2:	46c0      	nop			; (mov r8, r8)
10016eb4:	100176f5 	.word	0x100176f5
10016eb8:	1001771d 	.word	0x1001771d
10016ebc:	10017755 	.word	0x10017755
10016ec0:	10017781 	.word	0x10017781

10016ec4 <__sfmoreglue>:
10016ec4:	b570      	push	{r4, r5, r6, lr}
10016ec6:	2568      	movs	r5, #104	; 0x68
10016ec8:	1e4b      	subs	r3, r1, #1
10016eca:	435d      	muls	r5, r3
10016ecc:	000e      	movs	r6, r1
10016ece:	0029      	movs	r1, r5
10016ed0:	3174      	adds	r1, #116	; 0x74
10016ed2:	f7ff fc53 	bl	1001677c <_malloc_r>
10016ed6:	1e04      	subs	r4, r0, #0
10016ed8:	d008      	beq.n	10016eec <__sfmoreglue+0x28>
10016eda:	2100      	movs	r1, #0
10016edc:	002a      	movs	r2, r5
10016ede:	6001      	str	r1, [r0, #0]
10016ee0:	6046      	str	r6, [r0, #4]
10016ee2:	300c      	adds	r0, #12
10016ee4:	60a0      	str	r0, [r4, #8]
10016ee6:	3268      	adds	r2, #104	; 0x68
10016ee8:	f7ff fbfa 	bl	100166e0 <memset>
10016eec:	0020      	movs	r0, r4
10016eee:	bd70      	pop	{r4, r5, r6, pc}

10016ef0 <__sinit>:
10016ef0:	6983      	ldr	r3, [r0, #24]
10016ef2:	b513      	push	{r0, r1, r4, lr}
10016ef4:	0004      	movs	r4, r0
10016ef6:	2b00      	cmp	r3, #0
10016ef8:	d128      	bne.n	10016f4c <__sinit+0x5c>
10016efa:	6483      	str	r3, [r0, #72]	; 0x48
10016efc:	64c3      	str	r3, [r0, #76]	; 0x4c
10016efe:	6503      	str	r3, [r0, #80]	; 0x50
10016f00:	4b13      	ldr	r3, [pc, #76]	; (10016f50 <__sinit+0x60>)
10016f02:	4a14      	ldr	r2, [pc, #80]	; (10016f54 <__sinit+0x64>)
10016f04:	681b      	ldr	r3, [r3, #0]
10016f06:	6282      	str	r2, [r0, #40]	; 0x28
10016f08:	9301      	str	r3, [sp, #4]
10016f0a:	4298      	cmp	r0, r3
10016f0c:	d101      	bne.n	10016f12 <__sinit+0x22>
10016f0e:	2301      	movs	r3, #1
10016f10:	6183      	str	r3, [r0, #24]
10016f12:	0020      	movs	r0, r4
10016f14:	f000 f820 	bl	10016f58 <__sfp>
10016f18:	6060      	str	r0, [r4, #4]
10016f1a:	0020      	movs	r0, r4
10016f1c:	f000 f81c 	bl	10016f58 <__sfp>
10016f20:	60a0      	str	r0, [r4, #8]
10016f22:	0020      	movs	r0, r4
10016f24:	f000 f818 	bl	10016f58 <__sfp>
10016f28:	2200      	movs	r2, #0
10016f2a:	60e0      	str	r0, [r4, #12]
10016f2c:	2104      	movs	r1, #4
10016f2e:	6860      	ldr	r0, [r4, #4]
10016f30:	f7ff ffa4 	bl	10016e7c <std.isra.0>
10016f34:	2201      	movs	r2, #1
10016f36:	2109      	movs	r1, #9
10016f38:	68a0      	ldr	r0, [r4, #8]
10016f3a:	f7ff ff9f 	bl	10016e7c <std.isra.0>
10016f3e:	2202      	movs	r2, #2
10016f40:	2112      	movs	r1, #18
10016f42:	68e0      	ldr	r0, [r4, #12]
10016f44:	f7ff ff9a 	bl	10016e7c <std.isra.0>
10016f48:	2301      	movs	r3, #1
10016f4a:	61a3      	str	r3, [r4, #24]
10016f4c:	bd13      	pop	{r0, r1, r4, pc}
10016f4e:	46c0      	nop			; (mov r8, r8)
10016f50:	10019274 	.word	0x10019274
10016f54:	10016e6d 	.word	0x10016e6d

10016f58 <__sfp>:
10016f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016f5a:	4b1d      	ldr	r3, [pc, #116]	; (10016fd0 <__sfp+0x78>)
10016f5c:	0006      	movs	r6, r0
10016f5e:	681d      	ldr	r5, [r3, #0]
10016f60:	69ab      	ldr	r3, [r5, #24]
10016f62:	2b00      	cmp	r3, #0
10016f64:	d102      	bne.n	10016f6c <__sfp+0x14>
10016f66:	0028      	movs	r0, r5
10016f68:	f7ff ffc2 	bl	10016ef0 <__sinit>
10016f6c:	3548      	adds	r5, #72	; 0x48
10016f6e:	68ac      	ldr	r4, [r5, #8]
10016f70:	686b      	ldr	r3, [r5, #4]
10016f72:	3b01      	subs	r3, #1
10016f74:	d405      	bmi.n	10016f82 <__sfp+0x2a>
10016f76:	220c      	movs	r2, #12
10016f78:	5ea7      	ldrsh	r7, [r4, r2]
10016f7a:	2f00      	cmp	r7, #0
10016f7c:	d010      	beq.n	10016fa0 <__sfp+0x48>
10016f7e:	3468      	adds	r4, #104	; 0x68
10016f80:	e7f7      	b.n	10016f72 <__sfp+0x1a>
10016f82:	682b      	ldr	r3, [r5, #0]
10016f84:	2b00      	cmp	r3, #0
10016f86:	d001      	beq.n	10016f8c <__sfp+0x34>
10016f88:	682d      	ldr	r5, [r5, #0]
10016f8a:	e7f0      	b.n	10016f6e <__sfp+0x16>
10016f8c:	2104      	movs	r1, #4
10016f8e:	0030      	movs	r0, r6
10016f90:	f7ff ff98 	bl	10016ec4 <__sfmoreglue>
10016f94:	6028      	str	r0, [r5, #0]
10016f96:	2800      	cmp	r0, #0
10016f98:	d1f6      	bne.n	10016f88 <__sfp+0x30>
10016f9a:	230c      	movs	r3, #12
10016f9c:	6033      	str	r3, [r6, #0]
10016f9e:	e016      	b.n	10016fce <__sfp+0x76>
10016fa0:	2301      	movs	r3, #1
10016fa2:	0020      	movs	r0, r4
10016fa4:	425b      	negs	r3, r3
10016fa6:	81e3      	strh	r3, [r4, #14]
10016fa8:	3302      	adds	r3, #2
10016faa:	81a3      	strh	r3, [r4, #12]
10016fac:	6667      	str	r7, [r4, #100]	; 0x64
10016fae:	6027      	str	r7, [r4, #0]
10016fb0:	60a7      	str	r7, [r4, #8]
10016fb2:	6067      	str	r7, [r4, #4]
10016fb4:	6127      	str	r7, [r4, #16]
10016fb6:	6167      	str	r7, [r4, #20]
10016fb8:	61a7      	str	r7, [r4, #24]
10016fba:	305c      	adds	r0, #92	; 0x5c
10016fbc:	2208      	movs	r2, #8
10016fbe:	0039      	movs	r1, r7
10016fc0:	f7ff fb8e 	bl	100166e0 <memset>
10016fc4:	0020      	movs	r0, r4
10016fc6:	6367      	str	r7, [r4, #52]	; 0x34
10016fc8:	63a7      	str	r7, [r4, #56]	; 0x38
10016fca:	64a7      	str	r7, [r4, #72]	; 0x48
10016fcc:	64e7      	str	r7, [r4, #76]	; 0x4c
10016fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016fd0:	10019274 	.word	0x10019274

10016fd4 <_fwalk_reent>:
10016fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016fd6:	0004      	movs	r4, r0
10016fd8:	0007      	movs	r7, r0
10016fda:	2600      	movs	r6, #0
10016fdc:	9101      	str	r1, [sp, #4]
10016fde:	3448      	adds	r4, #72	; 0x48
10016fe0:	2c00      	cmp	r4, #0
10016fe2:	d016      	beq.n	10017012 <_fwalk_reent+0x3e>
10016fe4:	6863      	ldr	r3, [r4, #4]
10016fe6:	68a5      	ldr	r5, [r4, #8]
10016fe8:	9300      	str	r3, [sp, #0]
10016fea:	9b00      	ldr	r3, [sp, #0]
10016fec:	3b01      	subs	r3, #1
10016fee:	9300      	str	r3, [sp, #0]
10016ff0:	d40d      	bmi.n	1001700e <_fwalk_reent+0x3a>
10016ff2:	89ab      	ldrh	r3, [r5, #12]
10016ff4:	2b01      	cmp	r3, #1
10016ff6:	d908      	bls.n	1001700a <_fwalk_reent+0x36>
10016ff8:	220e      	movs	r2, #14
10016ffa:	5eab      	ldrsh	r3, [r5, r2]
10016ffc:	3301      	adds	r3, #1
10016ffe:	d004      	beq.n	1001700a <_fwalk_reent+0x36>
10017000:	0029      	movs	r1, r5
10017002:	0038      	movs	r0, r7
10017004:	9b01      	ldr	r3, [sp, #4]
10017006:	4798      	blx	r3
10017008:	4306      	orrs	r6, r0
1001700a:	3568      	adds	r5, #104	; 0x68
1001700c:	e7ed      	b.n	10016fea <_fwalk_reent+0x16>
1001700e:	6824      	ldr	r4, [r4, #0]
10017010:	e7e6      	b.n	10016fe0 <_fwalk_reent+0xc>
10017012:	0030      	movs	r0, r6
10017014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10017018 <__swhatbuf_r>:
10017018:	b570      	push	{r4, r5, r6, lr}
1001701a:	000e      	movs	r6, r1
1001701c:	001d      	movs	r5, r3
1001701e:	230e      	movs	r3, #14
10017020:	5ec9      	ldrsh	r1, [r1, r3]
10017022:	b090      	sub	sp, #64	; 0x40
10017024:	0014      	movs	r4, r2
10017026:	2900      	cmp	r1, #0
10017028:	da06      	bge.n	10017038 <__swhatbuf_r+0x20>
1001702a:	2300      	movs	r3, #0
1001702c:	602b      	str	r3, [r5, #0]
1001702e:	89b3      	ldrh	r3, [r6, #12]
10017030:	061b      	lsls	r3, r3, #24
10017032:	d50f      	bpl.n	10017054 <__swhatbuf_r+0x3c>
10017034:	2340      	movs	r3, #64	; 0x40
10017036:	e00f      	b.n	10017058 <__swhatbuf_r+0x40>
10017038:	aa01      	add	r2, sp, #4
1001703a:	f000 fbcd 	bl	100177d8 <_fstat_r>
1001703e:	2800      	cmp	r0, #0
10017040:	dbf3      	blt.n	1001702a <__swhatbuf_r+0x12>
10017042:	23f0      	movs	r3, #240	; 0xf0
10017044:	9a02      	ldr	r2, [sp, #8]
10017046:	021b      	lsls	r3, r3, #8
10017048:	4013      	ands	r3, r2
1001704a:	4a05      	ldr	r2, [pc, #20]	; (10017060 <__swhatbuf_r+0x48>)
1001704c:	189b      	adds	r3, r3, r2
1001704e:	425a      	negs	r2, r3
10017050:	4153      	adcs	r3, r2
10017052:	602b      	str	r3, [r5, #0]
10017054:	2380      	movs	r3, #128	; 0x80
10017056:	00db      	lsls	r3, r3, #3
10017058:	2000      	movs	r0, #0
1001705a:	6023      	str	r3, [r4, #0]
1001705c:	b010      	add	sp, #64	; 0x40
1001705e:	bd70      	pop	{r4, r5, r6, pc}
10017060:	ffffe000 	.word	0xffffe000

10017064 <__smakebuf_r>:
10017064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017066:	2602      	movs	r6, #2
10017068:	898b      	ldrh	r3, [r1, #12]
1001706a:	0005      	movs	r5, r0
1001706c:	000c      	movs	r4, r1
1001706e:	4233      	tst	r3, r6
10017070:	d110      	bne.n	10017094 <__smakebuf_r+0x30>
10017072:	ab01      	add	r3, sp, #4
10017074:	466a      	mov	r2, sp
10017076:	f7ff ffcf 	bl	10017018 <__swhatbuf_r>
1001707a:	9900      	ldr	r1, [sp, #0]
1001707c:	0007      	movs	r7, r0
1001707e:	0028      	movs	r0, r5
10017080:	f7ff fb7c 	bl	1001677c <_malloc_r>
10017084:	2800      	cmp	r0, #0
10017086:	d10c      	bne.n	100170a2 <__smakebuf_r+0x3e>
10017088:	220c      	movs	r2, #12
1001708a:	5ea3      	ldrsh	r3, [r4, r2]
1001708c:	059a      	lsls	r2, r3, #22
1001708e:	d423      	bmi.n	100170d8 <__smakebuf_r+0x74>
10017090:	4333      	orrs	r3, r6
10017092:	81a3      	strh	r3, [r4, #12]
10017094:	0023      	movs	r3, r4
10017096:	3347      	adds	r3, #71	; 0x47
10017098:	6023      	str	r3, [r4, #0]
1001709a:	6123      	str	r3, [r4, #16]
1001709c:	2301      	movs	r3, #1
1001709e:	6163      	str	r3, [r4, #20]
100170a0:	e01a      	b.n	100170d8 <__smakebuf_r+0x74>
100170a2:	2280      	movs	r2, #128	; 0x80
100170a4:	4b0d      	ldr	r3, [pc, #52]	; (100170dc <__smakebuf_r+0x78>)
100170a6:	62ab      	str	r3, [r5, #40]	; 0x28
100170a8:	89a3      	ldrh	r3, [r4, #12]
100170aa:	6020      	str	r0, [r4, #0]
100170ac:	4313      	orrs	r3, r2
100170ae:	81a3      	strh	r3, [r4, #12]
100170b0:	9b00      	ldr	r3, [sp, #0]
100170b2:	6120      	str	r0, [r4, #16]
100170b4:	6163      	str	r3, [r4, #20]
100170b6:	9b01      	ldr	r3, [sp, #4]
100170b8:	2b00      	cmp	r3, #0
100170ba:	d00a      	beq.n	100170d2 <__smakebuf_r+0x6e>
100170bc:	230e      	movs	r3, #14
100170be:	5ee1      	ldrsh	r1, [r4, r3]
100170c0:	0028      	movs	r0, r5
100170c2:	f000 fb9b 	bl	100177fc <_isatty_r>
100170c6:	2800      	cmp	r0, #0
100170c8:	d003      	beq.n	100170d2 <__smakebuf_r+0x6e>
100170ca:	2201      	movs	r2, #1
100170cc:	89a3      	ldrh	r3, [r4, #12]
100170ce:	4313      	orrs	r3, r2
100170d0:	81a3      	strh	r3, [r4, #12]
100170d2:	89a3      	ldrh	r3, [r4, #12]
100170d4:	431f      	orrs	r7, r3
100170d6:	81a7      	strh	r7, [r4, #12]
100170d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100170da:	46c0      	nop			; (mov r8, r8)
100170dc:	10016e6d 	.word	0x10016e6d

100170e0 <__sfputc_r>:
100170e0:	6893      	ldr	r3, [r2, #8]
100170e2:	b510      	push	{r4, lr}
100170e4:	3b01      	subs	r3, #1
100170e6:	6093      	str	r3, [r2, #8]
100170e8:	2b00      	cmp	r3, #0
100170ea:	da05      	bge.n	100170f8 <__sfputc_r+0x18>
100170ec:	6994      	ldr	r4, [r2, #24]
100170ee:	42a3      	cmp	r3, r4
100170f0:	db08      	blt.n	10017104 <__sfputc_r+0x24>
100170f2:	b2cb      	uxtb	r3, r1
100170f4:	2b0a      	cmp	r3, #10
100170f6:	d005      	beq.n	10017104 <__sfputc_r+0x24>
100170f8:	6813      	ldr	r3, [r2, #0]
100170fa:	1c58      	adds	r0, r3, #1
100170fc:	6010      	str	r0, [r2, #0]
100170fe:	7019      	strb	r1, [r3, #0]
10017100:	b2c8      	uxtb	r0, r1
10017102:	e001      	b.n	10017108 <__sfputc_r+0x28>
10017104:	f7ff fd32 	bl	10016b6c <__swbuf_r>
10017108:	bd10      	pop	{r4, pc}

1001710a <__sfputs_r>:
1001710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001710c:	0006      	movs	r6, r0
1001710e:	000f      	movs	r7, r1
10017110:	0014      	movs	r4, r2
10017112:	18d5      	adds	r5, r2, r3
10017114:	42ac      	cmp	r4, r5
10017116:	d008      	beq.n	1001712a <__sfputs_r+0x20>
10017118:	7821      	ldrb	r1, [r4, #0]
1001711a:	003a      	movs	r2, r7
1001711c:	0030      	movs	r0, r6
1001711e:	f7ff ffdf 	bl	100170e0 <__sfputc_r>
10017122:	3401      	adds	r4, #1
10017124:	1c43      	adds	r3, r0, #1
10017126:	d1f5      	bne.n	10017114 <__sfputs_r+0xa>
10017128:	e000      	b.n	1001712c <__sfputs_r+0x22>
1001712a:	2000      	movs	r0, #0
1001712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10017130 <_vfiprintf_r>:
10017130:	b5f0      	push	{r4, r5, r6, r7, lr}
10017132:	b09f      	sub	sp, #124	; 0x7c
10017134:	0006      	movs	r6, r0
10017136:	000f      	movs	r7, r1
10017138:	9202      	str	r2, [sp, #8]
1001713a:	9305      	str	r3, [sp, #20]
1001713c:	2800      	cmp	r0, #0
1001713e:	d004      	beq.n	1001714a <_vfiprintf_r+0x1a>
10017140:	6983      	ldr	r3, [r0, #24]
10017142:	2b00      	cmp	r3, #0
10017144:	d101      	bne.n	1001714a <_vfiprintf_r+0x1a>
10017146:	f7ff fed3 	bl	10016ef0 <__sinit>
1001714a:	4b7f      	ldr	r3, [pc, #508]	; (10017348 <_vfiprintf_r+0x218>)
1001714c:	429f      	cmp	r7, r3
1001714e:	d101      	bne.n	10017154 <_vfiprintf_r+0x24>
10017150:	6877      	ldr	r7, [r6, #4]
10017152:	e008      	b.n	10017166 <_vfiprintf_r+0x36>
10017154:	4b7d      	ldr	r3, [pc, #500]	; (1001734c <_vfiprintf_r+0x21c>)
10017156:	429f      	cmp	r7, r3
10017158:	d101      	bne.n	1001715e <_vfiprintf_r+0x2e>
1001715a:	68b7      	ldr	r7, [r6, #8]
1001715c:	e003      	b.n	10017166 <_vfiprintf_r+0x36>
1001715e:	4b7c      	ldr	r3, [pc, #496]	; (10017350 <_vfiprintf_r+0x220>)
10017160:	429f      	cmp	r7, r3
10017162:	d100      	bne.n	10017166 <_vfiprintf_r+0x36>
10017164:	68f7      	ldr	r7, [r6, #12]
10017166:	89bb      	ldrh	r3, [r7, #12]
10017168:	071b      	lsls	r3, r3, #28
1001716a:	d50a      	bpl.n	10017182 <_vfiprintf_r+0x52>
1001716c:	693b      	ldr	r3, [r7, #16]
1001716e:	2b00      	cmp	r3, #0
10017170:	d007      	beq.n	10017182 <_vfiprintf_r+0x52>
10017172:	2300      	movs	r3, #0
10017174:	ad06      	add	r5, sp, #24
10017176:	616b      	str	r3, [r5, #20]
10017178:	3320      	adds	r3, #32
1001717a:	766b      	strb	r3, [r5, #25]
1001717c:	3310      	adds	r3, #16
1001717e:	76ab      	strb	r3, [r5, #26]
10017180:	e03d      	b.n	100171fe <_vfiprintf_r+0xce>
10017182:	0039      	movs	r1, r7
10017184:	0030      	movs	r0, r6
10017186:	f7ff fd49 	bl	10016c1c <__swsetup_r>
1001718a:	2800      	cmp	r0, #0
1001718c:	d0f1      	beq.n	10017172 <_vfiprintf_r+0x42>
1001718e:	2001      	movs	r0, #1
10017190:	4240      	negs	r0, r0
10017192:	e0d6      	b.n	10017342 <_vfiprintf_r+0x212>
10017194:	9a05      	ldr	r2, [sp, #20]
10017196:	1d11      	adds	r1, r2, #4
10017198:	6812      	ldr	r2, [r2, #0]
1001719a:	9105      	str	r1, [sp, #20]
1001719c:	2a00      	cmp	r2, #0
1001719e:	da00      	bge.n	100171a2 <_vfiprintf_r+0x72>
100171a0:	e07f      	b.n	100172a2 <_vfiprintf_r+0x172>
100171a2:	9209      	str	r2, [sp, #36]	; 0x24
100171a4:	3401      	adds	r4, #1
100171a6:	7823      	ldrb	r3, [r4, #0]
100171a8:	2b2e      	cmp	r3, #46	; 0x2e
100171aa:	d100      	bne.n	100171ae <_vfiprintf_r+0x7e>
100171ac:	e08d      	b.n	100172ca <_vfiprintf_r+0x19a>
100171ae:	7821      	ldrb	r1, [r4, #0]
100171b0:	2203      	movs	r2, #3
100171b2:	4868      	ldr	r0, [pc, #416]	; (10017354 <_vfiprintf_r+0x224>)
100171b4:	f000 fb48 	bl	10017848 <memchr>
100171b8:	2800      	cmp	r0, #0
100171ba:	d007      	beq.n	100171cc <_vfiprintf_r+0x9c>
100171bc:	4b65      	ldr	r3, [pc, #404]	; (10017354 <_vfiprintf_r+0x224>)
100171be:	682a      	ldr	r2, [r5, #0]
100171c0:	1ac0      	subs	r0, r0, r3
100171c2:	2340      	movs	r3, #64	; 0x40
100171c4:	4083      	lsls	r3, r0
100171c6:	4313      	orrs	r3, r2
100171c8:	602b      	str	r3, [r5, #0]
100171ca:	3401      	adds	r4, #1
100171cc:	7821      	ldrb	r1, [r4, #0]
100171ce:	1c63      	adds	r3, r4, #1
100171d0:	2206      	movs	r2, #6
100171d2:	4861      	ldr	r0, [pc, #388]	; (10017358 <_vfiprintf_r+0x228>)
100171d4:	9302      	str	r3, [sp, #8]
100171d6:	7629      	strb	r1, [r5, #24]
100171d8:	f000 fb36 	bl	10017848 <memchr>
100171dc:	2800      	cmp	r0, #0
100171de:	d100      	bne.n	100171e2 <_vfiprintf_r+0xb2>
100171e0:	e09d      	b.n	1001731e <_vfiprintf_r+0x1ee>
100171e2:	4b5e      	ldr	r3, [pc, #376]	; (1001735c <_vfiprintf_r+0x22c>)
100171e4:	2b00      	cmp	r3, #0
100171e6:	d000      	beq.n	100171ea <_vfiprintf_r+0xba>
100171e8:	e090      	b.n	1001730c <_vfiprintf_r+0x1dc>
100171ea:	2207      	movs	r2, #7
100171ec:	9b05      	ldr	r3, [sp, #20]
100171ee:	3307      	adds	r3, #7
100171f0:	4393      	bics	r3, r2
100171f2:	3308      	adds	r3, #8
100171f4:	9305      	str	r3, [sp, #20]
100171f6:	696b      	ldr	r3, [r5, #20]
100171f8:	9a03      	ldr	r2, [sp, #12]
100171fa:	189b      	adds	r3, r3, r2
100171fc:	616b      	str	r3, [r5, #20]
100171fe:	9c02      	ldr	r4, [sp, #8]
10017200:	7823      	ldrb	r3, [r4, #0]
10017202:	2b00      	cmp	r3, #0
10017204:	d104      	bne.n	10017210 <_vfiprintf_r+0xe0>
10017206:	9b02      	ldr	r3, [sp, #8]
10017208:	1ae3      	subs	r3, r4, r3
1001720a:	9304      	str	r3, [sp, #16]
1001720c:	d012      	beq.n	10017234 <_vfiprintf_r+0x104>
1001720e:	e003      	b.n	10017218 <_vfiprintf_r+0xe8>
10017210:	2b25      	cmp	r3, #37	; 0x25
10017212:	d0f8      	beq.n	10017206 <_vfiprintf_r+0xd6>
10017214:	3401      	adds	r4, #1
10017216:	e7f3      	b.n	10017200 <_vfiprintf_r+0xd0>
10017218:	9b04      	ldr	r3, [sp, #16]
1001721a:	9a02      	ldr	r2, [sp, #8]
1001721c:	0039      	movs	r1, r7
1001721e:	0030      	movs	r0, r6
10017220:	f7ff ff73 	bl	1001710a <__sfputs_r>
10017224:	1c43      	adds	r3, r0, #1
10017226:	d100      	bne.n	1001722a <_vfiprintf_r+0xfa>
10017228:	e086      	b.n	10017338 <_vfiprintf_r+0x208>
1001722a:	696a      	ldr	r2, [r5, #20]
1001722c:	9b04      	ldr	r3, [sp, #16]
1001722e:	4694      	mov	ip, r2
10017230:	4463      	add	r3, ip
10017232:	616b      	str	r3, [r5, #20]
10017234:	7823      	ldrb	r3, [r4, #0]
10017236:	2b00      	cmp	r3, #0
10017238:	d07e      	beq.n	10017338 <_vfiprintf_r+0x208>
1001723a:	2201      	movs	r2, #1
1001723c:	2300      	movs	r3, #0
1001723e:	4252      	negs	r2, r2
10017240:	606a      	str	r2, [r5, #4]
10017242:	a902      	add	r1, sp, #8
10017244:	3254      	adds	r2, #84	; 0x54
10017246:	1852      	adds	r2, r2, r1
10017248:	3401      	adds	r4, #1
1001724a:	602b      	str	r3, [r5, #0]
1001724c:	60eb      	str	r3, [r5, #12]
1001724e:	60ab      	str	r3, [r5, #8]
10017250:	7013      	strb	r3, [r2, #0]
10017252:	65ab      	str	r3, [r5, #88]	; 0x58
10017254:	7821      	ldrb	r1, [r4, #0]
10017256:	2205      	movs	r2, #5
10017258:	4841      	ldr	r0, [pc, #260]	; (10017360 <_vfiprintf_r+0x230>)
1001725a:	f000 faf5 	bl	10017848 <memchr>
1001725e:	2800      	cmp	r0, #0
10017260:	d008      	beq.n	10017274 <_vfiprintf_r+0x144>
10017262:	4b3f      	ldr	r3, [pc, #252]	; (10017360 <_vfiprintf_r+0x230>)
10017264:	682a      	ldr	r2, [r5, #0]
10017266:	1ac0      	subs	r0, r0, r3
10017268:	2301      	movs	r3, #1
1001726a:	4083      	lsls	r3, r0
1001726c:	4313      	orrs	r3, r2
1001726e:	602b      	str	r3, [r5, #0]
10017270:	3401      	adds	r4, #1
10017272:	e7ef      	b.n	10017254 <_vfiprintf_r+0x124>
10017274:	682b      	ldr	r3, [r5, #0]
10017276:	06da      	lsls	r2, r3, #27
10017278:	d504      	bpl.n	10017284 <_vfiprintf_r+0x154>
1001727a:	2253      	movs	r2, #83	; 0x53
1001727c:	2120      	movs	r1, #32
1001727e:	a802      	add	r0, sp, #8
10017280:	1812      	adds	r2, r2, r0
10017282:	7011      	strb	r1, [r2, #0]
10017284:	071a      	lsls	r2, r3, #28
10017286:	d504      	bpl.n	10017292 <_vfiprintf_r+0x162>
10017288:	2253      	movs	r2, #83	; 0x53
1001728a:	212b      	movs	r1, #43	; 0x2b
1001728c:	a802      	add	r0, sp, #8
1001728e:	1812      	adds	r2, r2, r0
10017290:	7011      	strb	r1, [r2, #0]
10017292:	7822      	ldrb	r2, [r4, #0]
10017294:	2a2a      	cmp	r2, #42	; 0x2a
10017296:	d100      	bne.n	1001729a <_vfiprintf_r+0x16a>
10017298:	e77c      	b.n	10017194 <_vfiprintf_r+0x64>
1001729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001729c:	2000      	movs	r0, #0
1001729e:	210a      	movs	r1, #10
100172a0:	e005      	b.n	100172ae <_vfiprintf_r+0x17e>
100172a2:	4252      	negs	r2, r2
100172a4:	60ea      	str	r2, [r5, #12]
100172a6:	2202      	movs	r2, #2
100172a8:	4313      	orrs	r3, r2
100172aa:	602b      	str	r3, [r5, #0]
100172ac:	e77a      	b.n	100171a4 <_vfiprintf_r+0x74>
100172ae:	7822      	ldrb	r2, [r4, #0]
100172b0:	3a30      	subs	r2, #48	; 0x30
100172b2:	2a09      	cmp	r2, #9
100172b4:	d804      	bhi.n	100172c0 <_vfiprintf_r+0x190>
100172b6:	434b      	muls	r3, r1
100172b8:	3401      	adds	r4, #1
100172ba:	189b      	adds	r3, r3, r2
100172bc:	2001      	movs	r0, #1
100172be:	e7f6      	b.n	100172ae <_vfiprintf_r+0x17e>
100172c0:	2800      	cmp	r0, #0
100172c2:	d100      	bne.n	100172c6 <_vfiprintf_r+0x196>
100172c4:	e76f      	b.n	100171a6 <_vfiprintf_r+0x76>
100172c6:	9309      	str	r3, [sp, #36]	; 0x24
100172c8:	e76d      	b.n	100171a6 <_vfiprintf_r+0x76>
100172ca:	7863      	ldrb	r3, [r4, #1]
100172cc:	2b2a      	cmp	r3, #42	; 0x2a
100172ce:	d10a      	bne.n	100172e6 <_vfiprintf_r+0x1b6>
100172d0:	9b05      	ldr	r3, [sp, #20]
100172d2:	3402      	adds	r4, #2
100172d4:	1d1a      	adds	r2, r3, #4
100172d6:	681b      	ldr	r3, [r3, #0]
100172d8:	9205      	str	r2, [sp, #20]
100172da:	2b00      	cmp	r3, #0
100172dc:	da01      	bge.n	100172e2 <_vfiprintf_r+0x1b2>
100172de:	2301      	movs	r3, #1
100172e0:	425b      	negs	r3, r3
100172e2:	9307      	str	r3, [sp, #28]
100172e4:	e763      	b.n	100171ae <_vfiprintf_r+0x7e>
100172e6:	2300      	movs	r3, #0
100172e8:	200a      	movs	r0, #10
100172ea:	001a      	movs	r2, r3
100172ec:	3401      	adds	r4, #1
100172ee:	606b      	str	r3, [r5, #4]
100172f0:	7821      	ldrb	r1, [r4, #0]
100172f2:	3930      	subs	r1, #48	; 0x30
100172f4:	2909      	cmp	r1, #9
100172f6:	d804      	bhi.n	10017302 <_vfiprintf_r+0x1d2>
100172f8:	4342      	muls	r2, r0
100172fa:	3401      	adds	r4, #1
100172fc:	1852      	adds	r2, r2, r1
100172fe:	2301      	movs	r3, #1
10017300:	e7f6      	b.n	100172f0 <_vfiprintf_r+0x1c0>
10017302:	2b00      	cmp	r3, #0
10017304:	d100      	bne.n	10017308 <_vfiprintf_r+0x1d8>
10017306:	e752      	b.n	100171ae <_vfiprintf_r+0x7e>
10017308:	9207      	str	r2, [sp, #28]
1001730a:	e750      	b.n	100171ae <_vfiprintf_r+0x7e>
1001730c:	ab05      	add	r3, sp, #20
1001730e:	9300      	str	r3, [sp, #0]
10017310:	003a      	movs	r2, r7
10017312:	4b14      	ldr	r3, [pc, #80]	; (10017364 <_vfiprintf_r+0x234>)
10017314:	0029      	movs	r1, r5
10017316:	0030      	movs	r0, r6
10017318:	e000      	b.n	1001731c <_vfiprintf_r+0x1ec>
1001731a:	bf00      	nop
1001731c:	e007      	b.n	1001732e <_vfiprintf_r+0x1fe>
1001731e:	ab05      	add	r3, sp, #20
10017320:	9300      	str	r3, [sp, #0]
10017322:	003a      	movs	r2, r7
10017324:	4b0f      	ldr	r3, [pc, #60]	; (10017364 <_vfiprintf_r+0x234>)
10017326:	0029      	movs	r1, r5
10017328:	0030      	movs	r0, r6
1001732a:	f000 f88b 	bl	10017444 <_printf_i>
1001732e:	9003      	str	r0, [sp, #12]
10017330:	9b03      	ldr	r3, [sp, #12]
10017332:	3301      	adds	r3, #1
10017334:	d000      	beq.n	10017338 <_vfiprintf_r+0x208>
10017336:	e75e      	b.n	100171f6 <_vfiprintf_r+0xc6>
10017338:	89bb      	ldrh	r3, [r7, #12]
1001733a:	065b      	lsls	r3, r3, #25
1001733c:	d500      	bpl.n	10017340 <_vfiprintf_r+0x210>
1001733e:	e726      	b.n	1001718e <_vfiprintf_r+0x5e>
10017340:	980b      	ldr	r0, [sp, #44]	; 0x2c
10017342:	b01f      	add	sp, #124	; 0x7c
10017344:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017346:	46c0      	nop			; (mov r8, r8)
10017348:	10019278 	.word	0x10019278
1001734c:	10019298 	.word	0x10019298
10017350:	100192b8 	.word	0x100192b8
10017354:	100192de 	.word	0x100192de
10017358:	100192e2 	.word	0x100192e2
1001735c:	00000000 	.word	0x00000000
10017360:	100192d8 	.word	0x100192d8
10017364:	1001710b 	.word	0x1001710b

10017368 <_printf_common>:
10017368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001736a:	0017      	movs	r7, r2
1001736c:	9301      	str	r3, [sp, #4]
1001736e:	688a      	ldr	r2, [r1, #8]
10017370:	690b      	ldr	r3, [r1, #16]
10017372:	9000      	str	r0, [sp, #0]
10017374:	000c      	movs	r4, r1
10017376:	4293      	cmp	r3, r2
10017378:	da00      	bge.n	1001737c <_printf_common+0x14>
1001737a:	0013      	movs	r3, r2
1001737c:	0022      	movs	r2, r4
1001737e:	603b      	str	r3, [r7, #0]
10017380:	3243      	adds	r2, #67	; 0x43
10017382:	7812      	ldrb	r2, [r2, #0]
10017384:	2a00      	cmp	r2, #0
10017386:	d001      	beq.n	1001738c <_printf_common+0x24>
10017388:	3301      	adds	r3, #1
1001738a:	603b      	str	r3, [r7, #0]
1001738c:	6823      	ldr	r3, [r4, #0]
1001738e:	069b      	lsls	r3, r3, #26
10017390:	d502      	bpl.n	10017398 <_printf_common+0x30>
10017392:	683b      	ldr	r3, [r7, #0]
10017394:	3302      	adds	r3, #2
10017396:	603b      	str	r3, [r7, #0]
10017398:	2506      	movs	r5, #6
1001739a:	6823      	ldr	r3, [r4, #0]
1001739c:	401d      	ands	r5, r3
1001739e:	d01e      	beq.n	100173de <_printf_common+0x76>
100173a0:	0023      	movs	r3, r4
100173a2:	3343      	adds	r3, #67	; 0x43
100173a4:	781b      	ldrb	r3, [r3, #0]
100173a6:	1e5a      	subs	r2, r3, #1
100173a8:	4193      	sbcs	r3, r2
100173aa:	6822      	ldr	r2, [r4, #0]
100173ac:	0692      	lsls	r2, r2, #26
100173ae:	d51c      	bpl.n	100173ea <_printf_common+0x82>
100173b0:	2030      	movs	r0, #48	; 0x30
100173b2:	18e1      	adds	r1, r4, r3
100173b4:	3143      	adds	r1, #67	; 0x43
100173b6:	7008      	strb	r0, [r1, #0]
100173b8:	0021      	movs	r1, r4
100173ba:	1c5a      	adds	r2, r3, #1
100173bc:	3145      	adds	r1, #69	; 0x45
100173be:	7809      	ldrb	r1, [r1, #0]
100173c0:	18a2      	adds	r2, r4, r2
100173c2:	3243      	adds	r2, #67	; 0x43
100173c4:	3302      	adds	r3, #2
100173c6:	7011      	strb	r1, [r2, #0]
100173c8:	e00f      	b.n	100173ea <_printf_common+0x82>
100173ca:	0022      	movs	r2, r4
100173cc:	2301      	movs	r3, #1
100173ce:	3219      	adds	r2, #25
100173d0:	9901      	ldr	r1, [sp, #4]
100173d2:	9800      	ldr	r0, [sp, #0]
100173d4:	9e08      	ldr	r6, [sp, #32]
100173d6:	47b0      	blx	r6
100173d8:	1c43      	adds	r3, r0, #1
100173da:	d00e      	beq.n	100173fa <_printf_common+0x92>
100173dc:	3501      	adds	r5, #1
100173de:	68e3      	ldr	r3, [r4, #12]
100173e0:	683a      	ldr	r2, [r7, #0]
100173e2:	1a9b      	subs	r3, r3, r2
100173e4:	429d      	cmp	r5, r3
100173e6:	dbf0      	blt.n	100173ca <_printf_common+0x62>
100173e8:	e7da      	b.n	100173a0 <_printf_common+0x38>
100173ea:	0022      	movs	r2, r4
100173ec:	9901      	ldr	r1, [sp, #4]
100173ee:	3243      	adds	r2, #67	; 0x43
100173f0:	9800      	ldr	r0, [sp, #0]
100173f2:	9d08      	ldr	r5, [sp, #32]
100173f4:	47a8      	blx	r5
100173f6:	1c43      	adds	r3, r0, #1
100173f8:	d102      	bne.n	10017400 <_printf_common+0x98>
100173fa:	2001      	movs	r0, #1
100173fc:	4240      	negs	r0, r0
100173fe:	e020      	b.n	10017442 <_printf_common+0xda>
10017400:	2306      	movs	r3, #6
10017402:	6820      	ldr	r0, [r4, #0]
10017404:	68e1      	ldr	r1, [r4, #12]
10017406:	683a      	ldr	r2, [r7, #0]
10017408:	4003      	ands	r3, r0
1001740a:	2500      	movs	r5, #0
1001740c:	2b04      	cmp	r3, #4
1001740e:	d103      	bne.n	10017418 <_printf_common+0xb0>
10017410:	1a8d      	subs	r5, r1, r2
10017412:	43eb      	mvns	r3, r5
10017414:	17db      	asrs	r3, r3, #31
10017416:	401d      	ands	r5, r3
10017418:	68a3      	ldr	r3, [r4, #8]
1001741a:	6922      	ldr	r2, [r4, #16]
1001741c:	4293      	cmp	r3, r2
1001741e:	dd01      	ble.n	10017424 <_printf_common+0xbc>
10017420:	1a9b      	subs	r3, r3, r2
10017422:	18ed      	adds	r5, r5, r3
10017424:	2700      	movs	r7, #0
10017426:	42bd      	cmp	r5, r7
10017428:	d00a      	beq.n	10017440 <_printf_common+0xd8>
1001742a:	0022      	movs	r2, r4
1001742c:	2301      	movs	r3, #1
1001742e:	321a      	adds	r2, #26
10017430:	9901      	ldr	r1, [sp, #4]
10017432:	9800      	ldr	r0, [sp, #0]
10017434:	9e08      	ldr	r6, [sp, #32]
10017436:	47b0      	blx	r6
10017438:	1c43      	adds	r3, r0, #1
1001743a:	d0de      	beq.n	100173fa <_printf_common+0x92>
1001743c:	3701      	adds	r7, #1
1001743e:	e7f2      	b.n	10017426 <_printf_common+0xbe>
10017440:	2000      	movs	r0, #0
10017442:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10017444 <_printf_i>:
10017444:	b5f0      	push	{r4, r5, r6, r7, lr}
10017446:	b08b      	sub	sp, #44	; 0x2c
10017448:	9206      	str	r2, [sp, #24]
1001744a:	000a      	movs	r2, r1
1001744c:	3243      	adds	r2, #67	; 0x43
1001744e:	9307      	str	r3, [sp, #28]
10017450:	9005      	str	r0, [sp, #20]
10017452:	9204      	str	r2, [sp, #16]
10017454:	7e0a      	ldrb	r2, [r1, #24]
10017456:	000c      	movs	r4, r1
10017458:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001745a:	2a6e      	cmp	r2, #110	; 0x6e
1001745c:	d100      	bne.n	10017460 <_printf_i+0x1c>
1001745e:	e0ab      	b.n	100175b8 <_printf_i+0x174>
10017460:	d811      	bhi.n	10017486 <_printf_i+0x42>
10017462:	2a63      	cmp	r2, #99	; 0x63
10017464:	d022      	beq.n	100174ac <_printf_i+0x68>
10017466:	d809      	bhi.n	1001747c <_printf_i+0x38>
10017468:	2a00      	cmp	r2, #0
1001746a:	d100      	bne.n	1001746e <_printf_i+0x2a>
1001746c:	e0b5      	b.n	100175da <_printf_i+0x196>
1001746e:	2a58      	cmp	r2, #88	; 0x58
10017470:	d000      	beq.n	10017474 <_printf_i+0x30>
10017472:	e0c5      	b.n	10017600 <_printf_i+0x1bc>
10017474:	3145      	adds	r1, #69	; 0x45
10017476:	700a      	strb	r2, [r1, #0]
10017478:	4a81      	ldr	r2, [pc, #516]	; (10017680 <_printf_i+0x23c>)
1001747a:	e04f      	b.n	1001751c <_printf_i+0xd8>
1001747c:	2a64      	cmp	r2, #100	; 0x64
1001747e:	d01d      	beq.n	100174bc <_printf_i+0x78>
10017480:	2a69      	cmp	r2, #105	; 0x69
10017482:	d01b      	beq.n	100174bc <_printf_i+0x78>
10017484:	e0bc      	b.n	10017600 <_printf_i+0x1bc>
10017486:	2a73      	cmp	r2, #115	; 0x73
10017488:	d100      	bne.n	1001748c <_printf_i+0x48>
1001748a:	e0aa      	b.n	100175e2 <_printf_i+0x19e>
1001748c:	d809      	bhi.n	100174a2 <_printf_i+0x5e>
1001748e:	2a6f      	cmp	r2, #111	; 0x6f
10017490:	d029      	beq.n	100174e6 <_printf_i+0xa2>
10017492:	2a70      	cmp	r2, #112	; 0x70
10017494:	d000      	beq.n	10017498 <_printf_i+0x54>
10017496:	e0b3      	b.n	10017600 <_printf_i+0x1bc>
10017498:	2220      	movs	r2, #32
1001749a:	6809      	ldr	r1, [r1, #0]
1001749c:	430a      	orrs	r2, r1
1001749e:	6022      	str	r2, [r4, #0]
100174a0:	e037      	b.n	10017512 <_printf_i+0xce>
100174a2:	2a75      	cmp	r2, #117	; 0x75
100174a4:	d01f      	beq.n	100174e6 <_printf_i+0xa2>
100174a6:	2a78      	cmp	r2, #120	; 0x78
100174a8:	d033      	beq.n	10017512 <_printf_i+0xce>
100174aa:	e0a9      	b.n	10017600 <_printf_i+0x1bc>
100174ac:	000e      	movs	r6, r1
100174ae:	681a      	ldr	r2, [r3, #0]
100174b0:	3642      	adds	r6, #66	; 0x42
100174b2:	1d11      	adds	r1, r2, #4
100174b4:	6019      	str	r1, [r3, #0]
100174b6:	6813      	ldr	r3, [r2, #0]
100174b8:	7033      	strb	r3, [r6, #0]
100174ba:	e0a4      	b.n	10017606 <_printf_i+0x1c2>
100174bc:	6821      	ldr	r1, [r4, #0]
100174be:	681a      	ldr	r2, [r3, #0]
100174c0:	0608      	lsls	r0, r1, #24
100174c2:	d406      	bmi.n	100174d2 <_printf_i+0x8e>
100174c4:	0649      	lsls	r1, r1, #25
100174c6:	d504      	bpl.n	100174d2 <_printf_i+0x8e>
100174c8:	1d11      	adds	r1, r2, #4
100174ca:	6019      	str	r1, [r3, #0]
100174cc:	2300      	movs	r3, #0
100174ce:	5ed5      	ldrsh	r5, [r2, r3]
100174d0:	e002      	b.n	100174d8 <_printf_i+0x94>
100174d2:	1d11      	adds	r1, r2, #4
100174d4:	6019      	str	r1, [r3, #0]
100174d6:	6815      	ldr	r5, [r2, #0]
100174d8:	2d00      	cmp	r5, #0
100174da:	da3b      	bge.n	10017554 <_printf_i+0x110>
100174dc:	232d      	movs	r3, #45	; 0x2d
100174de:	9a04      	ldr	r2, [sp, #16]
100174e0:	426d      	negs	r5, r5
100174e2:	7013      	strb	r3, [r2, #0]
100174e4:	e036      	b.n	10017554 <_printf_i+0x110>
100174e6:	6821      	ldr	r1, [r4, #0]
100174e8:	681a      	ldr	r2, [r3, #0]
100174ea:	0608      	lsls	r0, r1, #24
100174ec:	d406      	bmi.n	100174fc <_printf_i+0xb8>
100174ee:	0649      	lsls	r1, r1, #25
100174f0:	d504      	bpl.n	100174fc <_printf_i+0xb8>
100174f2:	6815      	ldr	r5, [r2, #0]
100174f4:	1d11      	adds	r1, r2, #4
100174f6:	6019      	str	r1, [r3, #0]
100174f8:	b2ad      	uxth	r5, r5
100174fa:	e002      	b.n	10017502 <_printf_i+0xbe>
100174fc:	1d11      	adds	r1, r2, #4
100174fe:	6019      	str	r1, [r3, #0]
10017500:	6815      	ldr	r5, [r2, #0]
10017502:	4b5f      	ldr	r3, [pc, #380]	; (10017680 <_printf_i+0x23c>)
10017504:	7e22      	ldrb	r2, [r4, #24]
10017506:	9303      	str	r3, [sp, #12]
10017508:	2708      	movs	r7, #8
1001750a:	2a6f      	cmp	r2, #111	; 0x6f
1001750c:	d01d      	beq.n	1001754a <_printf_i+0x106>
1001750e:	270a      	movs	r7, #10
10017510:	e01b      	b.n	1001754a <_printf_i+0x106>
10017512:	0022      	movs	r2, r4
10017514:	2178      	movs	r1, #120	; 0x78
10017516:	3245      	adds	r2, #69	; 0x45
10017518:	7011      	strb	r1, [r2, #0]
1001751a:	4a5a      	ldr	r2, [pc, #360]	; (10017684 <_printf_i+0x240>)
1001751c:	6819      	ldr	r1, [r3, #0]
1001751e:	9203      	str	r2, [sp, #12]
10017520:	1d08      	adds	r0, r1, #4
10017522:	6822      	ldr	r2, [r4, #0]
10017524:	6018      	str	r0, [r3, #0]
10017526:	680d      	ldr	r5, [r1, #0]
10017528:	0610      	lsls	r0, r2, #24
1001752a:	d402      	bmi.n	10017532 <_printf_i+0xee>
1001752c:	0650      	lsls	r0, r2, #25
1001752e:	d500      	bpl.n	10017532 <_printf_i+0xee>
10017530:	b2ad      	uxth	r5, r5
10017532:	07d3      	lsls	r3, r2, #31
10017534:	d502      	bpl.n	1001753c <_printf_i+0xf8>
10017536:	2320      	movs	r3, #32
10017538:	431a      	orrs	r2, r3
1001753a:	6022      	str	r2, [r4, #0]
1001753c:	2710      	movs	r7, #16
1001753e:	2d00      	cmp	r5, #0
10017540:	d103      	bne.n	1001754a <_printf_i+0x106>
10017542:	2320      	movs	r3, #32
10017544:	6822      	ldr	r2, [r4, #0]
10017546:	439a      	bics	r2, r3
10017548:	6022      	str	r2, [r4, #0]
1001754a:	0023      	movs	r3, r4
1001754c:	2200      	movs	r2, #0
1001754e:	3343      	adds	r3, #67	; 0x43
10017550:	701a      	strb	r2, [r3, #0]
10017552:	e002      	b.n	1001755a <_printf_i+0x116>
10017554:	270a      	movs	r7, #10
10017556:	4b4a      	ldr	r3, [pc, #296]	; (10017680 <_printf_i+0x23c>)
10017558:	9303      	str	r3, [sp, #12]
1001755a:	6863      	ldr	r3, [r4, #4]
1001755c:	60a3      	str	r3, [r4, #8]
1001755e:	2b00      	cmp	r3, #0
10017560:	db09      	blt.n	10017576 <_printf_i+0x132>
10017562:	2204      	movs	r2, #4
10017564:	6821      	ldr	r1, [r4, #0]
10017566:	4391      	bics	r1, r2
10017568:	6021      	str	r1, [r4, #0]
1001756a:	2d00      	cmp	r5, #0
1001756c:	d105      	bne.n	1001757a <_printf_i+0x136>
1001756e:	9e04      	ldr	r6, [sp, #16]
10017570:	2b00      	cmp	r3, #0
10017572:	d011      	beq.n	10017598 <_printf_i+0x154>
10017574:	e07b      	b.n	1001766e <_printf_i+0x22a>
10017576:	2d00      	cmp	r5, #0
10017578:	d079      	beq.n	1001766e <_printf_i+0x22a>
1001757a:	9e04      	ldr	r6, [sp, #16]
1001757c:	0028      	movs	r0, r5
1001757e:	0039      	movs	r1, r7
10017580:	f7fc f910 	bl	100137a4 <__aeabi_uidivmod>
10017584:	9b03      	ldr	r3, [sp, #12]
10017586:	3e01      	subs	r6, #1
10017588:	5c5b      	ldrb	r3, [r3, r1]
1001758a:	0028      	movs	r0, r5
1001758c:	7033      	strb	r3, [r6, #0]
1001758e:	0039      	movs	r1, r7
10017590:	f7fc f882 	bl	10013698 <__aeabi_uidiv>
10017594:	1e05      	subs	r5, r0, #0
10017596:	d1f1      	bne.n	1001757c <_printf_i+0x138>
10017598:	2f08      	cmp	r7, #8
1001759a:	d109      	bne.n	100175b0 <_printf_i+0x16c>
1001759c:	6823      	ldr	r3, [r4, #0]
1001759e:	07db      	lsls	r3, r3, #31
100175a0:	d506      	bpl.n	100175b0 <_printf_i+0x16c>
100175a2:	6863      	ldr	r3, [r4, #4]
100175a4:	6922      	ldr	r2, [r4, #16]
100175a6:	4293      	cmp	r3, r2
100175a8:	dc02      	bgt.n	100175b0 <_printf_i+0x16c>
100175aa:	2330      	movs	r3, #48	; 0x30
100175ac:	3e01      	subs	r6, #1
100175ae:	7033      	strb	r3, [r6, #0]
100175b0:	9b04      	ldr	r3, [sp, #16]
100175b2:	1b9b      	subs	r3, r3, r6
100175b4:	6123      	str	r3, [r4, #16]
100175b6:	e02b      	b.n	10017610 <_printf_i+0x1cc>
100175b8:	6809      	ldr	r1, [r1, #0]
100175ba:	681a      	ldr	r2, [r3, #0]
100175bc:	0608      	lsls	r0, r1, #24
100175be:	d407      	bmi.n	100175d0 <_printf_i+0x18c>
100175c0:	0649      	lsls	r1, r1, #25
100175c2:	d505      	bpl.n	100175d0 <_printf_i+0x18c>
100175c4:	1d11      	adds	r1, r2, #4
100175c6:	6019      	str	r1, [r3, #0]
100175c8:	6813      	ldr	r3, [r2, #0]
100175ca:	8aa2      	ldrh	r2, [r4, #20]
100175cc:	801a      	strh	r2, [r3, #0]
100175ce:	e004      	b.n	100175da <_printf_i+0x196>
100175d0:	1d11      	adds	r1, r2, #4
100175d2:	6019      	str	r1, [r3, #0]
100175d4:	6813      	ldr	r3, [r2, #0]
100175d6:	6962      	ldr	r2, [r4, #20]
100175d8:	601a      	str	r2, [r3, #0]
100175da:	2300      	movs	r3, #0
100175dc:	9e04      	ldr	r6, [sp, #16]
100175de:	6123      	str	r3, [r4, #16]
100175e0:	e016      	b.n	10017610 <_printf_i+0x1cc>
100175e2:	681a      	ldr	r2, [r3, #0]
100175e4:	1d11      	adds	r1, r2, #4
100175e6:	6019      	str	r1, [r3, #0]
100175e8:	6816      	ldr	r6, [r2, #0]
100175ea:	2100      	movs	r1, #0
100175ec:	6862      	ldr	r2, [r4, #4]
100175ee:	0030      	movs	r0, r6
100175f0:	f000 f92a 	bl	10017848 <memchr>
100175f4:	2800      	cmp	r0, #0
100175f6:	d001      	beq.n	100175fc <_printf_i+0x1b8>
100175f8:	1b80      	subs	r0, r0, r6
100175fa:	6060      	str	r0, [r4, #4]
100175fc:	6863      	ldr	r3, [r4, #4]
100175fe:	e003      	b.n	10017608 <_printf_i+0x1c4>
10017600:	0026      	movs	r6, r4
10017602:	3642      	adds	r6, #66	; 0x42
10017604:	7032      	strb	r2, [r6, #0]
10017606:	2301      	movs	r3, #1
10017608:	6123      	str	r3, [r4, #16]
1001760a:	2300      	movs	r3, #0
1001760c:	9a04      	ldr	r2, [sp, #16]
1001760e:	7013      	strb	r3, [r2, #0]
10017610:	9b07      	ldr	r3, [sp, #28]
10017612:	aa09      	add	r2, sp, #36	; 0x24
10017614:	9300      	str	r3, [sp, #0]
10017616:	0021      	movs	r1, r4
10017618:	9b06      	ldr	r3, [sp, #24]
1001761a:	9805      	ldr	r0, [sp, #20]
1001761c:	f7ff fea4 	bl	10017368 <_printf_common>
10017620:	1c43      	adds	r3, r0, #1
10017622:	d102      	bne.n	1001762a <_printf_i+0x1e6>
10017624:	2001      	movs	r0, #1
10017626:	4240      	negs	r0, r0
10017628:	e027      	b.n	1001767a <_printf_i+0x236>
1001762a:	6923      	ldr	r3, [r4, #16]
1001762c:	0032      	movs	r2, r6
1001762e:	9906      	ldr	r1, [sp, #24]
10017630:	9805      	ldr	r0, [sp, #20]
10017632:	9d07      	ldr	r5, [sp, #28]
10017634:	47a8      	blx	r5
10017636:	1c43      	adds	r3, r0, #1
10017638:	d0f4      	beq.n	10017624 <_printf_i+0x1e0>
1001763a:	6823      	ldr	r3, [r4, #0]
1001763c:	2500      	movs	r5, #0
1001763e:	079b      	lsls	r3, r3, #30
10017640:	d40f      	bmi.n	10017662 <_printf_i+0x21e>
10017642:	9b09      	ldr	r3, [sp, #36]	; 0x24
10017644:	68e0      	ldr	r0, [r4, #12]
10017646:	4298      	cmp	r0, r3
10017648:	da17      	bge.n	1001767a <_printf_i+0x236>
1001764a:	0018      	movs	r0, r3
1001764c:	e015      	b.n	1001767a <_printf_i+0x236>
1001764e:	0022      	movs	r2, r4
10017650:	2301      	movs	r3, #1
10017652:	3219      	adds	r2, #25
10017654:	9906      	ldr	r1, [sp, #24]
10017656:	9805      	ldr	r0, [sp, #20]
10017658:	9e07      	ldr	r6, [sp, #28]
1001765a:	47b0      	blx	r6
1001765c:	1c43      	adds	r3, r0, #1
1001765e:	d0e1      	beq.n	10017624 <_printf_i+0x1e0>
10017660:	3501      	adds	r5, #1
10017662:	68e3      	ldr	r3, [r4, #12]
10017664:	9a09      	ldr	r2, [sp, #36]	; 0x24
10017666:	1a9b      	subs	r3, r3, r2
10017668:	429d      	cmp	r5, r3
1001766a:	dbf0      	blt.n	1001764e <_printf_i+0x20a>
1001766c:	e7e9      	b.n	10017642 <_printf_i+0x1fe>
1001766e:	0026      	movs	r6, r4
10017670:	9b03      	ldr	r3, [sp, #12]
10017672:	3642      	adds	r6, #66	; 0x42
10017674:	781b      	ldrb	r3, [r3, #0]
10017676:	7033      	strb	r3, [r6, #0]
10017678:	e78e      	b.n	10017598 <_printf_i+0x154>
1001767a:	b00b      	add	sp, #44	; 0x2c
1001767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001767e:	46c0      	nop			; (mov r8, r8)
10017680:	100192e9 	.word	0x100192e9
10017684:	100192fa 	.word	0x100192fa

10017688 <_putc_r>:
10017688:	b570      	push	{r4, r5, r6, lr}
1001768a:	0006      	movs	r6, r0
1001768c:	000d      	movs	r5, r1
1001768e:	0014      	movs	r4, r2
10017690:	2800      	cmp	r0, #0
10017692:	d004      	beq.n	1001769e <_putc_r+0x16>
10017694:	6983      	ldr	r3, [r0, #24]
10017696:	2b00      	cmp	r3, #0
10017698:	d101      	bne.n	1001769e <_putc_r+0x16>
1001769a:	f7ff fc29 	bl	10016ef0 <__sinit>
1001769e:	4b12      	ldr	r3, [pc, #72]	; (100176e8 <_putc_r+0x60>)
100176a0:	429c      	cmp	r4, r3
100176a2:	d101      	bne.n	100176a8 <_putc_r+0x20>
100176a4:	6874      	ldr	r4, [r6, #4]
100176a6:	e008      	b.n	100176ba <_putc_r+0x32>
100176a8:	4b10      	ldr	r3, [pc, #64]	; (100176ec <_putc_r+0x64>)
100176aa:	429c      	cmp	r4, r3
100176ac:	d101      	bne.n	100176b2 <_putc_r+0x2a>
100176ae:	68b4      	ldr	r4, [r6, #8]
100176b0:	e003      	b.n	100176ba <_putc_r+0x32>
100176b2:	4b0f      	ldr	r3, [pc, #60]	; (100176f0 <_putc_r+0x68>)
100176b4:	429c      	cmp	r4, r3
100176b6:	d100      	bne.n	100176ba <_putc_r+0x32>
100176b8:	68f4      	ldr	r4, [r6, #12]
100176ba:	68a3      	ldr	r3, [r4, #8]
100176bc:	3b01      	subs	r3, #1
100176be:	60a3      	str	r3, [r4, #8]
100176c0:	2b00      	cmp	r3, #0
100176c2:	da05      	bge.n	100176d0 <_putc_r+0x48>
100176c4:	69a2      	ldr	r2, [r4, #24]
100176c6:	4293      	cmp	r3, r2
100176c8:	db08      	blt.n	100176dc <_putc_r+0x54>
100176ca:	b2eb      	uxtb	r3, r5
100176cc:	2b0a      	cmp	r3, #10
100176ce:	d005      	beq.n	100176dc <_putc_r+0x54>
100176d0:	6823      	ldr	r3, [r4, #0]
100176d2:	b2e8      	uxtb	r0, r5
100176d4:	1c5a      	adds	r2, r3, #1
100176d6:	6022      	str	r2, [r4, #0]
100176d8:	701d      	strb	r5, [r3, #0]
100176da:	e004      	b.n	100176e6 <_putc_r+0x5e>
100176dc:	0022      	movs	r2, r4
100176de:	0029      	movs	r1, r5
100176e0:	0030      	movs	r0, r6
100176e2:	f7ff fa43 	bl	10016b6c <__swbuf_r>
100176e6:	bd70      	pop	{r4, r5, r6, pc}
100176e8:	10019278 	.word	0x10019278
100176ec:	10019298 	.word	0x10019298
100176f0:	100192b8 	.word	0x100192b8

100176f4 <__sread>:
100176f4:	b570      	push	{r4, r5, r6, lr}
100176f6:	000c      	movs	r4, r1
100176f8:	250e      	movs	r5, #14
100176fa:	5f49      	ldrsh	r1, [r1, r5]
100176fc:	f000 f8b0 	bl	10017860 <_read_r>
10017700:	2800      	cmp	r0, #0
10017702:	db03      	blt.n	1001770c <__sread+0x18>
10017704:	6d63      	ldr	r3, [r4, #84]	; 0x54
10017706:	181b      	adds	r3, r3, r0
10017708:	6563      	str	r3, [r4, #84]	; 0x54
1001770a:	e003      	b.n	10017714 <__sread+0x20>
1001770c:	89a2      	ldrh	r2, [r4, #12]
1001770e:	4b02      	ldr	r3, [pc, #8]	; (10017718 <__sread+0x24>)
10017710:	4013      	ands	r3, r2
10017712:	81a3      	strh	r3, [r4, #12]
10017714:	bd70      	pop	{r4, r5, r6, pc}
10017716:	46c0      	nop			; (mov r8, r8)
10017718:	ffffefff 	.word	0xffffefff

1001771c <__swrite>:
1001771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001771e:	001f      	movs	r7, r3
10017720:	898b      	ldrh	r3, [r1, #12]
10017722:	0005      	movs	r5, r0
10017724:	000c      	movs	r4, r1
10017726:	0016      	movs	r6, r2
10017728:	05db      	lsls	r3, r3, #23
1001772a:	d505      	bpl.n	10017738 <__swrite+0x1c>
1001772c:	230e      	movs	r3, #14
1001772e:	5ec9      	ldrsh	r1, [r1, r3]
10017730:	2200      	movs	r2, #0
10017732:	2302      	movs	r3, #2
10017734:	f000 f874 	bl	10017820 <_lseek_r>
10017738:	89a2      	ldrh	r2, [r4, #12]
1001773a:	4b05      	ldr	r3, [pc, #20]	; (10017750 <__swrite+0x34>)
1001773c:	0028      	movs	r0, r5
1001773e:	4013      	ands	r3, r2
10017740:	81a3      	strh	r3, [r4, #12]
10017742:	0032      	movs	r2, r6
10017744:	230e      	movs	r3, #14
10017746:	5ee1      	ldrsh	r1, [r4, r3]
10017748:	003b      	movs	r3, r7
1001774a:	f000 f81f 	bl	1001778c <_write_r>
1001774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017750:	ffffefff 	.word	0xffffefff

10017754 <__sseek>:
10017754:	b570      	push	{r4, r5, r6, lr}
10017756:	000c      	movs	r4, r1
10017758:	250e      	movs	r5, #14
1001775a:	5f49      	ldrsh	r1, [r1, r5]
1001775c:	f000 f860 	bl	10017820 <_lseek_r>
10017760:	89a3      	ldrh	r3, [r4, #12]
10017762:	1c42      	adds	r2, r0, #1
10017764:	d103      	bne.n	1001776e <__sseek+0x1a>
10017766:	4a05      	ldr	r2, [pc, #20]	; (1001777c <__sseek+0x28>)
10017768:	4013      	ands	r3, r2
1001776a:	81a3      	strh	r3, [r4, #12]
1001776c:	e004      	b.n	10017778 <__sseek+0x24>
1001776e:	2280      	movs	r2, #128	; 0x80
10017770:	0152      	lsls	r2, r2, #5
10017772:	4313      	orrs	r3, r2
10017774:	81a3      	strh	r3, [r4, #12]
10017776:	6560      	str	r0, [r4, #84]	; 0x54
10017778:	bd70      	pop	{r4, r5, r6, pc}
1001777a:	46c0      	nop			; (mov r8, r8)
1001777c:	ffffefff 	.word	0xffffefff

10017780 <__sclose>:
10017780:	b510      	push	{r4, lr}
10017782:	230e      	movs	r3, #14
10017784:	5ec9      	ldrsh	r1, [r1, r3]
10017786:	f000 f815 	bl	100177b4 <_close_r>
1001778a:	bd10      	pop	{r4, pc}

1001778c <_write_r>:
1001778c:	b570      	push	{r4, r5, r6, lr}
1001778e:	0005      	movs	r5, r0
10017790:	0008      	movs	r0, r1
10017792:	0011      	movs	r1, r2
10017794:	2200      	movs	r2, #0
10017796:	4c06      	ldr	r4, [pc, #24]	; (100177b0 <_write_r+0x24>)
10017798:	6022      	str	r2, [r4, #0]
1001779a:	001a      	movs	r2, r3
1001779c:	f7f5 f9f6 	bl	1000cb8c <_write>
100177a0:	1c43      	adds	r3, r0, #1
100177a2:	d103      	bne.n	100177ac <_write_r+0x20>
100177a4:	6823      	ldr	r3, [r4, #0]
100177a6:	2b00      	cmp	r3, #0
100177a8:	d000      	beq.n	100177ac <_write_r+0x20>
100177aa:	602b      	str	r3, [r5, #0]
100177ac:	bd70      	pop	{r4, r5, r6, pc}
100177ae:	46c0      	nop			; (mov r8, r8)
100177b0:	1001c298 	.word	0x1001c298

100177b4 <_close_r>:
100177b4:	2300      	movs	r3, #0
100177b6:	b570      	push	{r4, r5, r6, lr}
100177b8:	4c06      	ldr	r4, [pc, #24]	; (100177d4 <_close_r+0x20>)
100177ba:	0005      	movs	r5, r0
100177bc:	0008      	movs	r0, r1
100177be:	6023      	str	r3, [r4, #0]
100177c0:	f7f0 fe2e 	bl	10008420 <_close>
100177c4:	1c43      	adds	r3, r0, #1
100177c6:	d103      	bne.n	100177d0 <_close_r+0x1c>
100177c8:	6823      	ldr	r3, [r4, #0]
100177ca:	2b00      	cmp	r3, #0
100177cc:	d000      	beq.n	100177d0 <_close_r+0x1c>
100177ce:	602b      	str	r3, [r5, #0]
100177d0:	bd70      	pop	{r4, r5, r6, pc}
100177d2:	46c0      	nop			; (mov r8, r8)
100177d4:	1001c298 	.word	0x1001c298

100177d8 <_fstat_r>:
100177d8:	2300      	movs	r3, #0
100177da:	b570      	push	{r4, r5, r6, lr}
100177dc:	4c06      	ldr	r4, [pc, #24]	; (100177f8 <_fstat_r+0x20>)
100177de:	0005      	movs	r5, r0
100177e0:	0008      	movs	r0, r1
100177e2:	0011      	movs	r1, r2
100177e4:	6023      	str	r3, [r4, #0]
100177e6:	f7f0 fe1f 	bl	10008428 <_fstat>
100177ea:	1c43      	adds	r3, r0, #1
100177ec:	d103      	bne.n	100177f6 <_fstat_r+0x1e>
100177ee:	6823      	ldr	r3, [r4, #0]
100177f0:	2b00      	cmp	r3, #0
100177f2:	d000      	beq.n	100177f6 <_fstat_r+0x1e>
100177f4:	602b      	str	r3, [r5, #0]
100177f6:	bd70      	pop	{r4, r5, r6, pc}
100177f8:	1001c298 	.word	0x1001c298

100177fc <_isatty_r>:
100177fc:	2300      	movs	r3, #0
100177fe:	b570      	push	{r4, r5, r6, lr}
10017800:	4c06      	ldr	r4, [pc, #24]	; (1001781c <_isatty_r+0x20>)
10017802:	0005      	movs	r5, r0
10017804:	0008      	movs	r0, r1
10017806:	6023      	str	r3, [r4, #0]
10017808:	f7f0 fe14 	bl	10008434 <_isatty>
1001780c:	1c43      	adds	r3, r0, #1
1001780e:	d103      	bne.n	10017818 <_isatty_r+0x1c>
10017810:	6823      	ldr	r3, [r4, #0]
10017812:	2b00      	cmp	r3, #0
10017814:	d000      	beq.n	10017818 <_isatty_r+0x1c>
10017816:	602b      	str	r3, [r5, #0]
10017818:	bd70      	pop	{r4, r5, r6, pc}
1001781a:	46c0      	nop			; (mov r8, r8)
1001781c:	1001c298 	.word	0x1001c298

10017820 <_lseek_r>:
10017820:	b570      	push	{r4, r5, r6, lr}
10017822:	0005      	movs	r5, r0
10017824:	0008      	movs	r0, r1
10017826:	0011      	movs	r1, r2
10017828:	2200      	movs	r2, #0
1001782a:	4c06      	ldr	r4, [pc, #24]	; (10017844 <_lseek_r+0x24>)
1001782c:	6022      	str	r2, [r4, #0]
1001782e:	001a      	movs	r2, r3
10017830:	f7f0 fe02 	bl	10008438 <_lseek>
10017834:	1c43      	adds	r3, r0, #1
10017836:	d103      	bne.n	10017840 <_lseek_r+0x20>
10017838:	6823      	ldr	r3, [r4, #0]
1001783a:	2b00      	cmp	r3, #0
1001783c:	d000      	beq.n	10017840 <_lseek_r+0x20>
1001783e:	602b      	str	r3, [r5, #0]
10017840:	bd70      	pop	{r4, r5, r6, pc}
10017842:	46c0      	nop			; (mov r8, r8)
10017844:	1001c298 	.word	0x1001c298

10017848 <memchr>:
10017848:	b2c9      	uxtb	r1, r1
1001784a:	1882      	adds	r2, r0, r2
1001784c:	4290      	cmp	r0, r2
1001784e:	d004      	beq.n	1001785a <memchr+0x12>
10017850:	7803      	ldrb	r3, [r0, #0]
10017852:	428b      	cmp	r3, r1
10017854:	d002      	beq.n	1001785c <memchr+0x14>
10017856:	3001      	adds	r0, #1
10017858:	e7f8      	b.n	1001784c <memchr+0x4>
1001785a:	2000      	movs	r0, #0
1001785c:	4770      	bx	lr
	...

10017860 <_read_r>:
10017860:	b570      	push	{r4, r5, r6, lr}
10017862:	0005      	movs	r5, r0
10017864:	0008      	movs	r0, r1
10017866:	0011      	movs	r1, r2
10017868:	2200      	movs	r2, #0
1001786a:	4c06      	ldr	r4, [pc, #24]	; (10017884 <_read_r+0x24>)
1001786c:	6022      	str	r2, [r4, #0]
1001786e:	001a      	movs	r2, r3
10017870:	f7f5 f96c 	bl	1000cb4c <_read>
10017874:	1c43      	adds	r3, r0, #1
10017876:	d103      	bne.n	10017880 <_read_r+0x20>
10017878:	6823      	ldr	r3, [r4, #0]
1001787a:	2b00      	cmp	r3, #0
1001787c:	d000      	beq.n	10017880 <_read_r+0x20>
1001787e:	602b      	str	r3, [r5, #0]
10017880:	bd70      	pop	{r4, r5, r6, pc}
10017882:	46c0      	nop			; (mov r8, r8)
10017884:	1001c298 	.word	0x1001c298
10017888:	0000000d 	.word	0x0000000d
1001788c:	736d735b 	.word	0x736d735b
10017890:	656c625f 	.word	0x656c625f
10017894:	6961705f 	.word	0x6961705f
10017898:	65725f72 	.word	0x65725f72
1001789c:	73657571 	.word	0x73657571
100178a0:	6e665f74 	.word	0x6e665f74
100178a4:	6150095d 	.word	0x6150095d
100178a8:	6e697269 	.word	0x6e697269
100178ac:	65722067 	.word	0x65722067
100178b0:	73657571 	.word	0x73657571
100178b4:	2e2e2e74 	.word	0x2e2e2e74
100178b8:	656e4220 	.word	0x656e4220
100178bc:	64252077 	.word	0x64252077
100178c0:	4c42202c 	.word	0x4c42202c
100178c4:	78302045 	.word	0x78302045
100178c8:	78323025 	.word	0x78323025
100178cc:	3154202c 	.word	0x3154202c
100178d0:	2c642520 	.word	0x2c642520
100178d4:	20325420 	.word	0x20325420
100178d8:	00006425 	.word	0x00006425
100178dc:	736d735b 	.word	0x736d735b
100178e0:	656c625f 	.word	0x656c625f
100178e4:	776f705f 	.word	0x776f705f
100178e8:	645f7265 	.word	0x645f7265
100178ec:	5d6e776f 	.word	0x5d6e776f
100178f0:	00000000 	.word	0x00000000
100178f4:	736d735b 	.word	0x736d735b
100178f8:	656c625f 	.word	0x656c625f
100178fc:	776f705f 	.word	0x776f705f
10017900:	645f7265 	.word	0x645f7265
10017904:	5d6e776f 	.word	0x5d6e776f
10017908:	6f745309 	.word	0x6f745309
1001790c:	6e697070 	.word	0x6e697070
10017910:	6f632067 	.word	0x6f632067
10017914:	6e616d6d 	.word	0x6e616d6d
10017918:	65722064 	.word	0x65722064
1001791c:	76696563 	.word	0x76696563
10017920:	64206465 	.word	0x64206465
10017924:	6e697275 	.word	0x6e697275
10017928:	64612067 	.word	0x64612067
1001792c:	74726576 	.word	0x74726576
10017930:	6d657369 	.word	0x6d657369
10017934:	2e746e65 	.word	0x2e746e65
10017938:	6f745320 	.word	0x6f745320
1001793c:	6e697070 	.word	0x6e697070
10017940:	2e2e2e67 	.word	0x2e2e2e67
10017944:	00000020 	.word	0x00000020
10017948:	6c696166 	.word	0x6c696166
1001794c:	21216465 	.word	0x21216465
10017950:	00000021 	.word	0x00000021
10017954:	656e6f64 	.word	0x656e6f64
10017958:	00000021 	.word	0x00000021
1001795c:	736d735b 	.word	0x736d735b
10017960:	656c625f 	.word	0x656c625f
10017964:	776f705f 	.word	0x776f705f
10017968:	645f7265 	.word	0x645f7265
1001796c:	5d6e776f 	.word	0x5d6e776f
10017970:	65440909 	.word	0x65440909
10017974:	65636976 	.word	0x65636976
10017978:	69617020 	.word	0x69617020
1001797c:	2e646572 	.word	0x2e646572
10017980:	64202e2e 	.word	0x64202e2e
10017984:	62617369 	.word	0x62617369
10017988:	676e696c 	.word	0x676e696c
1001798c:	746e6920 	.word	0x746e6920
10017990:	75727265 	.word	0x75727265
10017994:	20737470 	.word	0x20737470
10017998:	77732026 	.word	0x77732026
1001799c:	68637469 	.word	0x68637469
100179a0:	20676e69 	.word	0x20676e69
100179a4:	6e776f64 	.word	0x6e776f64
100179a8:	6e657320 	.word	0x6e657320
100179ac:	73726f73 	.word	0x73726f73
100179b0:	00000000 	.word	0x00000000
100179b4:	736d735b 	.word	0x736d735b
100179b8:	656c625f 	.word	0x656c625f
100179bc:	776f705f 	.word	0x776f705f
100179c0:	645f7265 	.word	0x645f7265
100179c4:	5d6e776f 	.word	0x5d6e776f
100179c8:	75430909 	.word	0x75430909
100179cc:	6e657272 	.word	0x6e657272
100179d0:	20796c74 	.word	0x20796c74
100179d4:	69646e69 	.word	0x69646e69
100179d8:	69746163 	.word	0x69746163
100179dc:	0000676e 	.word	0x0000676e
100179e0:	736d735b 	.word	0x736d735b
100179e4:	656c625f 	.word	0x656c625f
100179e8:	776f705f 	.word	0x776f705f
100179ec:	645f7265 	.word	0x645f7265
100179f0:	5d6e776f 	.word	0x5d6e776f
100179f4:	65440909 	.word	0x65440909
100179f8:	65636976 	.word	0x65636976
100179fc:	6e6f6320 	.word	0x6e6f6320
10017a00:	7463656e 	.word	0x7463656e
10017a04:	2e2e6465 	.word	0x2e2e6465
10017a08:	6964202e 	.word	0x6964202e
10017a0c:	6e6f6373 	.word	0x6e6f6373
10017a10:	7463656e 	.word	0x7463656e
10017a14:	00676e69 	.word	0x00676e69
10017a18:	736d735b 	.word	0x736d735b
10017a1c:	656c625f 	.word	0x656c625f
10017a20:	7664615f 	.word	0x7664615f
10017a24:	7065725f 	.word	0x7065725f
10017a28:	5f74726f 	.word	0x5f74726f
10017a2c:	095d6e66 	.word	0x095d6e66
10017a30:	65766441 	.word	0x65766441
10017a34:	73697472 	.word	0x73697472
10017a38:	6e656d65 	.word	0x6e656d65
10017a3c:	69742074 	.word	0x69742074
10017a40:	756f656d 	.word	0x756f656d
10017a44:	2e2e2e74 	.word	0x2e2e2e74
10017a48:	00000000 	.word	0x00000000
10017a4c:	736d735b 	.word	0x736d735b
10017a50:	656c625f 	.word	0x656c625f
10017a54:	6e6f635f 	.word	0x6e6f635f
10017a58:	7463656e 	.word	0x7463656e
10017a5c:	665f6465 	.word	0x665f6465
10017a60:	09095d6e 	.word	0x09095d6e
10017a64:	69766544 	.word	0x69766544
10017a68:	20736563 	.word	0x20736563
10017a6c:	6e6e6f63 	.word	0x6e6e6f63
10017a70:	65746365 	.word	0x65746365
10017a74:	2e2e2e64 	.word	0x2e2e2e64
10017a78:	00000000 	.word	0x00000000
10017a7c:	736d735b 	.word	0x736d735b
10017a80:	656c625f 	.word	0x656c625f
10017a84:	6961705f 	.word	0x6961705f
10017a88:	5f646572 	.word	0x5f646572
10017a8c:	005d6e66 	.word	0x005d6e66
10017a90:	6e6e6143 	.word	0x6e6e6143
10017a94:	7320746f 	.word	0x7320746f
10017a98:	74726174 	.word	0x74726174
10017a9c:	554d4920 	.word	0x554d4920
10017aa0:	00000000 	.word	0x00000000
10017aa4:	736d735b 	.word	0x736d735b
10017aa8:	656c625f 	.word	0x656c625f
10017aac:	7664615f 	.word	0x7664615f
10017ab0:	69747265 	.word	0x69747265
10017ab4:	095d6573 	.word	0x095d6573
10017ab8:	65766441 	.word	0x65766441
10017abc:	73697472 	.word	0x73697472
10017ac0:	6e656d65 	.word	0x6e656d65
10017ac4:	61642074 	.word	0x61642074
10017ac8:	73206174 	.word	0x73206174
10017acc:	66207465 	.word	0x66207465
10017ad0:	656c6961 	.word	0x656c6961
10017ad4:	00002164 	.word	0x00002164
10017ad8:	736d735b 	.word	0x736d735b
10017adc:	656c625f 	.word	0x656c625f
10017ae0:	7664615f 	.word	0x7664615f
10017ae4:	69747265 	.word	0x69747265
10017ae8:	095d6573 	.word	0x095d6573
10017aec:	454c4209 	.word	0x454c4209
10017af0:	61745320 	.word	0x61745320
10017af4:	64657472 	.word	0x64657472
10017af8:	76644120 	.word	0x76644120
10017afc:	69747265 	.word	0x69747265
10017b00:	656d6573 	.word	0x656d6573
10017b04:	0000746e 	.word	0x0000746e
10017b08:	736d735b 	.word	0x736d735b
10017b0c:	7265735f 	.word	0x7265735f
10017b10:	65636976 	.word	0x65636976
10017b14:	7664615f 	.word	0x7664615f
10017b18:	69747265 	.word	0x69747265
10017b1c:	095d6573 	.word	0x095d6573
10017b20:	20454c42 	.word	0x20454c42
10017b24:	65766441 	.word	0x65766441
10017b28:	73697472 	.word	0x73697472
10017b2c:	6e656d65 	.word	0x6e656d65
10017b30:	74732074 	.word	0x74732074
10017b34:	20747261 	.word	0x20747261
10017b38:	6c696166 	.word	0x6c696166
10017b3c:	203a6465 	.word	0x203a6465
10017b40:	73616572 	.word	0x73616572
10017b44:	30206e6f 	.word	0x30206e6f
10017b48:	00782578 	.word	0x00782578
10017b4c:	736d735b 	.word	0x736d735b
10017b50:	656c625f 	.word	0x656c625f
10017b54:	7369645f 	.word	0x7369645f
10017b58:	6e6e6f63 	.word	0x6e6e6f63
10017b5c:	65746365 	.word	0x65746365
10017b60:	6e665f64 	.word	0x6e665f64
10017b64:	6550095d 	.word	0x6550095d
10017b68:	64207265 	.word	0x64207265
10017b6c:	6f637369 	.word	0x6f637369
10017b70:	63656e6e 	.word	0x63656e6e
10017b74:	2e646574 	.word	0x2e646574
10017b78:	42202e2e 	.word	0x42202e2e
10017b7c:	2077656e 	.word	0x2077656e
10017b80:	202c6425 	.word	0x202c6425
10017b84:	20454c42 	.word	0x20454c42
10017b88:	30257830 	.word	0x30257830
10017b8c:	202c7832 	.word	0x202c7832
10017b90:	25203154 	.word	0x25203154
10017b94:	54202c64 	.word	0x54202c64
10017b98:	64252032 	.word	0x64252032
10017b9c:	00000000 	.word	0x00000000
10017ba0:	49544f4e 	.word	0x49544f4e
10017ba4:	41434946 	.word	0x41434946
10017ba8:	4e4f4954 	.word	0x4e4f4954
10017bac:	52524520 	.word	0x52524520
10017bb0:	2121524f 	.word	0x2121524f
10017bb4:	00000000 	.word	0x00000000
10017bb8:	544f4e20 	.word	0x544f4e20
10017bbc:	74657320 	.word	0x74657320
10017bc0:	0000203f 	.word	0x0000203f

10017bc4 <sms_ble_gap_cb>:
	...
10017bd0:	10008edd 00000000 10008f11 1000906d     ............m...
	...
10017be8:	10008f65 10008ce9 00000000 00000000     e...............
	...

10017c10 <sms_ble_gatt_server_cb>:
10017c10:	10008d35 10008d85 00000000 00000000     5...............
	...
10017c38:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017c48:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10017c58:	656c6968 74657320 676e6974 20707520     hile setting up 
10017c68:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10017c78:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10017c88:	6c626f72 77206d65 656c6968 74657320     roblem while set
10017c98:	676e6974 20707520 74747562 00316e6f     ting up button1.
10017ca8:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017cb8:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10017cc8:	656c6968 74657320 676e6974 20707520     hile setting up 
10017cd8:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10017ce8:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10017cf8:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10017d08:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10017d18:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10017d28:	61570909 676e696b 20707520 00000000     ..Waking up ....
10017d38:	0000202e 736d735b 7475625f 5f6e6f74     . ..[sms_button_
10017d48:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10017d58:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10017d68:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10017d78:	73752074 73206465 65746174 002e2e2e     t used state....
10017d88:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10017d98:	68530909 69747475 6420676e 206e776f     ..Shutting down 
10017da8:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10017db8:	095d6e66 6f4e0909 0000656e 72617453     fn]...None..Star
10017dc8:	70752074 776f6e20 00000021 74756853     t up now!...Shut
10017dd8:	776f6420 6f6e206e 00002177 736d735b      down now!..[sms
10017de8:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10017df8:	69767265 5d736563 72655309 65636976     ervices].Service
10017e08:	65642073 696e6966 6620676e 656c6961     s defining faile
10017e18:	72202c64 6f736165 7830206e 00007825     d, reason 0x%x..
10017e28:	736d735b 7475625f 5f6e6f74 69666564     [sms_button_defi
10017e38:	735f656e 69767265 5d736563 72655309     ne_services].Ser
10017e48:	65636976 65642073 656e6966 53202c64     vices defined, S
10017e58:	6220534d 6f747475 6168206e 656c646e     MS button handle
10017e68:	6425203a 00000000 626f7250 206d656c     : %d....Problem 
10017e78:	6c696877 65732065 6e697474 70672067     while setting gp
10017e88:	70206f69 00006e69 2e2e7325 4209092e     io pin..%s.....B
10017e98:	6572702d 64252076 2d42202c 20727563     -prev %d, B-cur 
10017ea8:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
10017eb8:	25203154 54202c64 64252032 4d53202c     T1 %d, T2 %d, SM
10017ec8:	64252053 00000000 736d735b 756d695f     S %d....[sms_imu
10017ed8:	6e6f635f 75676966 675f6572 5d6f6970     _configure_gpio]
10017ee8:	6f725009 6d656c62 69687720 7320656c     .Problem while s
10017ef8:	69747465 7520676e 4d492070 52442055     etting up IMU DR
10017f08:	70205944 00006e69 736d735b 75706d5f     DY pin..[sms_mpu
10017f18:	6665645f 5f656e69 76726573 73656369     _define_services
10017f28:	6553095d 63697672 64207365 6e696665     ].Services defin
10017f38:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10017f48:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
10017f58:	6665645f 5f656e69 76726573 73656369     _define_services
10017f68:	6553095d 63697672 64207365 6e696665     ].Services defin
10017f78:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
10017f88:	203a656c 00006425 2055504d 696c6163     le: %d..MPU cali
10017f98:	74617262 2e2e6465 6962202e 76207361     brated... bias v
10017fa8:	65756c61 25203a73 2520646c 2520646c     alues: %ld %ld %
10017fb8:	2f20646c 646c2520 646c2520 646c2520     ld / %ld %ld %ld
10017fc8:	00000000 736d735b 64656c5f 6970675f     ....[sms_led_gpi
10017fd8:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
10017fe8:	6c696877 65732065 6e697474 70752067     while setting up
10017ff8:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
10018008:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
10018018:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10018028:	20656c69 74746573 20676e69 56207075     ile setting up V
10018038:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10018048:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10018058:	72617453 676e6974 65727020 72757373     Starting pressur
10018068:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10018078:	6572705f 72757373 74735f65 75747261     _pressure_startu
10018088:	09095d70 69614609 2064656c 69206f74     p]...Failed to i
10018098:	6974696e 7a696c61 72702065 75737365     nitialize pressu
100180a8:	64206572 63697665 00000065 736d735b     re device...[sms
100180b8:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
100180c8:	75636c61 6574616c 6574205d 7265706d     alculate] temper
100180d8:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
100180e8:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
100180f8:	6572705f 72757373 736d5f65 705f3835     _pressure_ms58_p
10018108:	5f6c6c6f 61746164 7270205d 656c626f     oll_data] proble
10018118:	6572206d 6e696461 736d2067 64203835     m reading ms58 d
10018128:	00617461 736d735b 6572705f 72757373     ata.[sms_pressur
10018138:	65645f65 656e6966 7265735f 65636976     e_define_service
10018148:	53095d73 69767265 20736563 69666564     s].Services defi
10018158:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10018168:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10018178:	6572705f 72757373 65645f65 656e6966     _pressure_define
10018188:	7265735f 65636976 53095d73 69767265     _services].Servi
10018198:	20736563 69666564 2c64656e 534d5320     ces defined, SMS
100181a8:	65727020 72757373 61682065 656c646e      pressure handle
100181b8:	6425203a 00000000 1000bb6c 1000bb7a     : %d....l...z...
100181c8:	1000bb88 1000bb96 1000bba4 1000bbb2     ................
100181d8:	1000bbc0 1000bbd0 1000bbe0 1000bbf0     ................
100181e8:	1000bc00 1000bc10 1000bc20 1000bc30     ........ ...0...
100181f8:	1000bc40 1000bc50 1000bc60 1000bc70     @...P...`...p...
10018208:	1000bc80 1000bc90 1000bca0 1000bcb0     ................
10018218:	1000bcc0 1000bcd0 1000bce0 1000bcf0     ................
10018228:	1000bd00 1000bd10 1000bd1e 1000bd2c     ............,...
10018238:	1000bd3a 1000bd48 1000bd56 1000bd64     :...H...V...d...
10018248:	1000bd72 1000bd80 1000bd90 1000bda0     r...............
10018258:	1000bdb0 1000bdc0 1000bdd0 1000bde0     ................
10018268:	1000bdf0 1000be00 1000be10 1000be20     ............ ...
10018278:	1000be30 1000be40 1000be50 1000be60     0...@...P...`...
10018288:	1000be70 1000be80 1000be8e 1000be9c     p...............
10018298:	1000bec8 1000bed6 1000bee4 1000bef2     ................
100182a8:	1000bf00 1000bf0e 1000bf1c 1000bf2a     ............*...
100182b8:	1000bf38 1000bf46 1000bf54 1000bf62     8...F...T...b...
100182c8:	1000bf70 1000bf7e 1000bf8c 1000bf9a     p...~...........
100182d8:	1000bfa8 1000bfb6 1000bfc4 1000bfd2     ................
100182e8:	1000bfe0 1000bfee 1000bffc 1000c00a     ................
100182f8:	1000c018 1000c026 1000c034 1000c042     ....&...4...B...
10018308:	1000c050 1000c05e 1000c06c 1000c07a     P...^...l...z...
10018318:	1000c088 1000c096 1000c0a4 1000c0b2     ................
10018328:	1000c0c0 1000c0ce 1000c0dc 1000c0ea     ................
10018338:	1000c0f8 1000c106 1000c114 1000c122     ............"...
10018348:	1000c130 1000c13e 1000c14c 1000c15a     0...>...L...Z...
10018358:	1000c168 1000c176 1000c184 1000c192     h...v...........
10018368:	1000c1a0 1000c1ae 1000c248 1000c270     ........H...p...
10018378:	1000c298 1000c2c0 1000c500 1000c2f0     ................
10018388:	1000c308 1000c380 1000c398 1000c320     ............ ...
10018398:	1000c338 1000c350 1000c368 1000c3b0     8...P...h.......
100183a8:	1000c674 1000c674 1000c674 1000c674     t...t...t...t...
100183b8:	1000c674 1000c674 1000c674 1000c674     t...t...t...t...
100183c8:	1000c458 1000c470 1000c488 1000c516     X...p...........
100183d8:	1000c3e0 1000c674 1000c674 1000c674     ....t...t...t...
100183e8:	1000c674 1000c674 1000c674 1000c4a0     t...t...t.......
100183f8:	1000c4b8 1000c4d0 1000c4e8 1000c674     ............t...
10018408:	1000c62c 1000c644 1000c674 1000c674     ,...D...t...t...
10018418:	1000c542 1000c558 1000c56e 1000c584     B...X...n.......
10018428:	1000c674 1000c674 1000c674 1000c674     t...t...t...t...
10018438:	1000c674 1000c674 1000c674 1000c674     t...t...t...t...
10018448:	1000c234 1000c25c 1000c284 1000c2ac     4...\...........
10018458:	1000c2d8 1000c3c8 1000c3f8 1000c410     ................
10018468:	1000c428 1000c440 1000c52c 1000c59a     (...@...,.......
10018478:	1000c614 1000c65c 1000cd56 1000cd68     ....\...V...h...
10018488:	1000cd3e 1000cd3e 1000cd3e 1000cd56     >...>...>...V...
10018498:	1000cd3e 1000cd3e 1000d75a 1000d7ce     >...>...Z.......
100184a8:	1000d742 1000d7d4 1000d748 1000d74e     B.......H...N...
100184b8:	1000d754 1000deb4 1000deb4 1000deb4     T...............
100184c8:	1000deb4 1000deb4 1000deb4 1000deb4     ................
100184d8:	1000deb4 1000deb4 1000deb4 1000deb4     ................
100184e8:	1000deb4 1000deb4 1000deb4 1000deb4     ................
100184f8:	1000deb4 1000deb4 1000deb4 1000deb4     ................
10018508:	1000ded2 1000ded2 1000ded2 1000ded2     ................
10018518:	1000ded2 1000ded2 1000ded2 1000ded2     ................
10018528:	1000ded2 1000ded2 1000def4 1000def4     ................
10018538:	1000def4 1000def4 1000def4 1000def4     ................
10018548:	1000def4 1000def4 1000def4 1000def4     ................
10018558:	1000df24 1000df24 1000df24 1000df24     $...$...$...$...
10018568:	1000df24 1000df24 1000df3e 1000df3e     $...$...>...>...
10018578:	1000df3e 1000df3e 1000df3e 1000df3e     >...>...>...>...
10018588:	1000df3e 1000df3e 1000df3e 1000df58     >...>...>...X...
10018598:	1000df58 1000df7a 1000df7a 1000df94     X...z...z.......
100185a8:	1000df7a 34333231 00003635 efcdab00     z...123456......
100185b8:	00efcdab                                ....

100185bc <ble_mgr_gatt_server_handle>:
	...
100185d4:	1000cc51 1000cc79 1000ccc1 00000000     Q...y...........
100185e4:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100185f4:	65636552 64657669 00000000 6e616353     Received....Scan
10018604:	676e696e 61662020 64656c69 00000000     ning  failed....
10018614:	65766441 73697472 20676e69 6c696166     Advertising fail
10018624:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10018634:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10018644:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10018654:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10018664:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10018674:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10018684:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10018694:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100186a4:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100186b4:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100186c4:	00000064 72616843 69725720 43206574     d...Char Write C
100186d4:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100186e4:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100186f4:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10018704:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10018714:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10018724:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10018734:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10018744:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10018754:	00000000 69766544 64206563 6f637369     ....Device disco
10018764:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10018774:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10018784:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10018794:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100187a4:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100187b4:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100187c4:	6c706d6f 64657465 63757320 73736563     ompleted success
100187d4:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100187e4:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100187f4:	74707972 206e6f69 6f666e69 00000000     ryption info....
10018804:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10018814:	64612064 73657264 255b2073 20205d64     d address [%d]  
10018824:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10018834:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10018844:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10018854:	206e6163 69766564 72206563 68636165     can device reach
10018864:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10018874:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10018884:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10018894:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100188a4:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100188b4:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100188c4:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100188d4:	52207463 65757165 46207473 656c6961     ct Request Faile
100188e4:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100188f4:	72756465 6f632065 656c706d 20646574     edure completed 
10018904:	63637573 66737365 796c6c75 00000000     successfully....
10018914:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10018924:	646e756f 206f7420 726f7473 68742065     ound to store th
10018934:	61702065 6e697269 6e692067 00006f66     e pairing info..
10018944:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10018954:	4e206e6f 7320746f 74726174 00006465     on Not started..
10018964:	76616c53 65532065 69727563 52207974     Slave Security R
10018974:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10018984:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10018994:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100189a4:	00205832 646e6553 20676e69 72696170     2X .Sending pair
100189b4:	20676e69 70736572 65736e6f 00000000     ing response....
100189c4:	72696150 71655220 74736575 41202d20     Pair Request - A
100189d4:	65687475 6369746e 6f697461 6146206e     uthentication Fa
100189e4:	64656c69 00000000 65746e45 68742072     iled....Enter th
100189f4:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10018a04:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10018a14:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10018a24:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10018a34:	61656c50 45206573 7265746e 65687420     Please Enter the
10018a44:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10018a54:	65646f63 206e6f28 6568746f 65442072     code(on other De
10018a64:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10018a74:	70657220 6620796c 656c6961 00000064      reply failed...
10018a84:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10018a94:	70707573 6574726f 00000064 65746e45     supported...Ente
10018aa4:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10018ab4:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10018ac4:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10018ad4:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10018ae4:	76656420 20656369 76696465 00782520      device ediv %x.
10018af4:	72656570 76656420 20656369 76696465     peer device ediv
10018b04:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10018b14:	00782520 20656854 65646e69 73692078      %x.The index is
10018b24:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10018b34:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10018b44:	6f666e69 74616d72 206e6f69 7020666f     information of p
10018b54:	20726565 69766564 69206563 6f6e2073     eer device is no
10018b64:	76612074 616c6961 2e656c62 00000000     t available.....
10018b74:	61656c50 75206573 6961706e 68742072     Please unpair th
10018b84:	65642065 65636976 6f726620 6570206d     e device from pe
10018b94:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10018ba4:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10018bb4:	20646e61 72617473 61702074 6e697269     and start pairin
10018bc4:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10018bd4:	52206e6f 65757165 52207473 796c7065     on Request Reply
10018be4:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10018bf4:	52206e6f 65757165 52207473 796c7065     on Request Reply
10018c04:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10018c14:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10018c24:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10018c34:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10018c44:	7a696c61 6f697461 6166206e 64656c69     alization failed
10018c54:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10018c64:	61656c50 63206573 6b636568 65687420     Please check the
10018c74:	776f7020 61207265 6320646e 656e6e6f      power and conne
10018c84:	6f697463 202f206e 64726168 65726177     ction / hardware
10018c94:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10018ca4:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10018cb4:	20656d61 20746573 6c696166 00006465     ame set failed..
10018cc4:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10018cd4:	5d676966 44420909 64646120 73736572     fig]..BD address
10018ce4:	74656720 69616620 0064656c 656c625b      get failed.[ble
10018cf4:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018d04:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10018d14:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10018d24:	25583230 2c583230 64644120 73736572     02X%02X, Address
10018d34:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10018d44:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018d54:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10018d64:	666e6f63 72756769 6f697461 6166206e     configuration fa
10018d74:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10018d84:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10018d94:	454c4220 76654420 20656369 72646441      BLE Device Addr
10018da4:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10018db4:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10018dc4:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10018dd4:	69727563 72207974 65757165 73207473     curity request s
10018de4:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10018df4:	65732065 69727563 72207974 65757165     e security reque
10018e04:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10018e14:	65746365 6f742064 65657020 65642072     ected to peer de
10018e24:	65636976 74697720 64612068 73657264     vice with addres
10018e34:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10018e44:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10018e54:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10018e64:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10018e74:	61522067 6d6f646e 64646120 73736572     g Random address
10018e84:	63757320 73736563 00002a2a 6f736552      success**..Reso
10018e94:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10018ea4:	73736572 69616620 2a64656c 0000002a     ress failed**...
10018eb4:	2078614d 626d756e 6f207265 6f632066     Max number of co
10018ec4:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10018ed4:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10018ee4:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10018ef4:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10018f04:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10018f14:	00000064 23232323 23232323 65442323     d...##########De
10018f24:	65636976 756f4620 0000646e 23232323     vice Found..####
10018f34:	23232323 65442323 65636976 746f4e20     ######Device Not
10018f44:	756f4620 0000646e 69766544 69206563      Found..Device i
10018f54:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10018f64:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10018f74:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10018f84:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10018f94:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10018fa4:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018fb4:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018fc4:	69666963 61642063 65206174 6c62616e     cific data enabl
10018fd4:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
10018fe4:	65766441 73697472 6e656d65 61642074     Advertisement da
10018ff4:	73206174 66207465 656c6961 00000064     ta set failed...

10019004 <ble_mgr_gap_handle>:
10019004:	1000cbdd 1000ce8d 1000cc01 1000cc29     ............)...
10019014:	00000000 1000db09 1000cd09 1000cda5     ................
10019024:	1000d0e9 1000cf39 1000d2e9 1000d101     ....9...........
10019034:	1000d475 1000d5b9 1000cdc9 1000dd55     u...........U...
	...
10019050:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10019060:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
10019070:	5f6e6f74 29286e66 00000000 316e7442     ton_fn()....Btn1
10019080:	746e6920 202e2e2e 00000000 73756c66      int... ....flus
10019090:	676e6968 00000021 73657250 65732073     hing!...Press se
100190a0:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
100190b0:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
100190c0:	6e657645 65672074 69742074 756f656d     Event get timeou
100190d0:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
100190e0:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
100190f0:	04022e70                                         p.

100190f2 <CSWTCH.45>:
100190f2:	00100402                                         ...

100190f5 <CSWTCH.47>:
100190f5:	03010300 03030303 03030303 02020303              ...............

10019104 <client_conf_uuid>:
10019104:	29042902                                         .)

10019106 <presentation_format_uuid>:
10019106:	29012904                                         .)

10019108 <user_desc_uuid>:
10019108:	29032901                                         .)

1001910a <server_conf_uuid>:
1001910a:	29002903                                         .)

1001910c <extended_props_uuid>:
1001910c:	28022900                                         .)

1001910e <include_uuid>:
1001910e:	28032802                                         .(

10019110 <char_uuid>:
10019110:	00002803 00776f70 74727173 00000066     .(..pow.sqrtf...

10019120 <TWO52>:
10019120:	00000000 43300000 00000000 c3300000     ......0C......0.
10019130:	10013f76 10013e9a 10013f58 10013f30     v?...>..X?..0?..
10019140:	10013f58 10013f24 10013f58 10013f30     X?..$?..X?..0?..
10019150:	10013e9a 10013e9a 10013f24 10013f30     .>...>..$?..0?..
10019160:	10013fdc 10013fdc 10013fdc 10013f5e     .?...?...?..^?..
10019170:	10013e9a 10013e9a 10013f44 10013f2e     .>...>..D?...?..
10019180:	10013f44 10013f24 10013f44 10013f2e     D?..$?..D?...?..
10019190:	10013e9a 10013e9a 10013f24 10013f2e     .>...>..$?...?..
100191a0:	10013fdc 10013fdc 10013fdc 10013fe8     .?...?...?...?..
100191b0:	100142d4 10014232 10014232 10014230     .B..2B..2B..0B..
100191c0:	100142c6 100142c6 100142bc 10014230     .B...B...B..0B..
100191d0:	100142c6 100142bc 100142c6 10014230     .B...B...B..0B..
100191e0:	100142cc 100142cc 100142cc 10014356     .B...B...B..VC..
100191f0:	100150b4 10014f82 10015088 10014f78     .P...O...P..xO..
10019200:	10015088 10015092 10015088 10014f78     .P...P...P..xO..
10019210:	10014f82 10014f82 10015092 10014f78     .O...O...P..xO..
10019220:	10014f6e 10014f6e 10014f6e 100152e4     nO..nO..nO...R..
10019230:	100158fc 100157bc 100157bc 100157ba     .X...W...W...W..
10019240:	100158d4 100158d4 100158c6 100157ba     .X...X...X...W..
10019250:	100158d4 100158c6 100158d4 100157ba     .X...X...X...W..
10019260:	100158dc 100158dc 100158dc 10015adc     .X...X...X...Z..
10019270:	00000043                                C...

10019274 <_global_impure_ptr>:
10019274:	1001933c                                <...

10019278 <__sf_fake_stdin>:
	...

10019298 <__sf_fake_stdout>:
	...

100192b8 <__sf_fake_stderr>:
	...
100192d8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100192e8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100192f8:	31300046 35343332 39383736 64636261     F.0123456789abcd
10019308:	00006665                                ef..

1001930c <_init>:
1001930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001930e:	46c0      	nop			; (mov r8, r8)
10019310:	bcf8      	pop	{r3, r4, r5, r6, r7}
10019312:	bc08      	pop	{r3}
10019314:	469e      	mov	lr, r3
10019316:	4770      	bx	lr

10019318 <__init_array_start>:
10019318:	100080b1 	.word	0x100080b1

1001931c <_fini>:
1001931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001931e:	46c0      	nop			; (mov r8, r8)
10019320:	bcf8      	pop	{r3, r4, r5, r6, r7}
10019322:	bc08      	pop	{r3}
10019324:	469e      	mov	lr, r3
10019326:	4770      	bx	lr

10019328 <__fini_array_start>:
10019328:	10008089 	.word	0x10008089
