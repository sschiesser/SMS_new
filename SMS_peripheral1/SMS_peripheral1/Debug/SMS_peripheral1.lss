
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010334  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  10018334  10018334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef0  100183a4  100183a4  000183a4  2**2
                  ALLOC
  3 .stack        00000804  1001b294  1001b294  000183a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000183a4  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000183cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bf4c  00000000  00000000  00018480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005319  00000000  00000000  000643cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a160  00000000  00000000  000696e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b78  00000000  00000000  00073845  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b38  00000000  00000000  000743bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c32c  00000000  00000000  00074ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001611b  00000000  00000000  00081221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001417d0  00000000  00000000  0009733c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c9c  00000000  00000000  001d8b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018334 	.word	0x10018334
10008068:	10018334 	.word	0x10018334
1000806c:	100183a4 	.word	0x100183a4
10008070:	1001b294 	.word	0x1001b294
10008074:	100183a4 	.word	0x100183a4
10008078:	10018338 	.word	0x10018338
1000807c:	100183a8 	.word	0x100183a8
10008080:	10015641 	.word	0x10015641
10008084:	1000e061 	.word	0x1000e061

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100183a4 	.word	0x100183a4
100080a8:	00000000 	.word	0x00000000
100080ac:	10018334 	.word	0x10018334

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100183a8 	.word	0x100183a8
100080dc:	10018334 	.word	0x10018334
100080e0:	10018334 	.word	0x10018334
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_get_current_value>:
 *
 * \retval Current value
 */
uint32_t aon_sleep_timer_get_current_value(void)
{
	return AON_SLEEP_TIMER0->CURRENT_COUNT_VALUE.reg;
10008118:	4b01      	ldr	r3, [pc, #4]	; (10008120 <aon_sleep_timer_get_current_value+0x8>)
1000811a:	68d8      	ldr	r0, [r3, #12]
}
1000811c:	4770      	bx	lr
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	4000d000 	.word	0x4000d000

10008124 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008124:	4a02      	ldr	r2, [pc, #8]	; (10008130 <aon_sleep_timer_clear_interrup+0xc>)
10008126:	6811      	ldr	r1, [r2, #0]
10008128:	2310      	movs	r3, #16
1000812a:	430b      	orrs	r3, r1
1000812c:	6013      	str	r3, [r2, #0]
}
1000812e:	4770      	bx	lr
10008130:	4000d000 	.word	0x4000d000

10008134 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008134:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008136:	4b04      	ldr	r3, [pc, #16]	; (10008148 <aon_sleep_timer_isr_handler+0x14>)
10008138:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000813a:	4b04      	ldr	r3, [pc, #16]	; (1000814c <aon_sleep_timer_isr_handler+0x18>)
1000813c:	681b      	ldr	r3, [r3, #0]
1000813e:	2b00      	cmp	r3, #0
10008140:	d000      	beq.n	10008144 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008142:	4798      	blx	r3
	}
}
10008144:	bd10      	pop	{r4, pc}
10008146:	46c0      	nop			; (mov r8, r8)
10008148:	10008125 	.word	0x10008125
1000814c:	100183c0 	.word	0x100183c0

10008150 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008150:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_register_callback+0x8>)
10008152:	6018      	str	r0, [r3, #0]
}
10008154:	4770      	bx	lr
10008156:	46c0      	nop			; (mov r8, r8)
10008158:	100183c0 	.word	0x100183c0

1000815c <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
1000815c:	2200      	movs	r2, #0
1000815e:	4b01      	ldr	r3, [pc, #4]	; (10008164 <aon_sleep_timer_unregister_callback+0x8>)
10008160:	601a      	str	r2, [r3, #0]
}
10008162:	4770      	bx	lr
10008164:	100183c0 	.word	0x100183c0

10008168 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
10008168:	b5f0      	push	{r4, r5, r6, r7, lr}
1000816a:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
1000816c:	2200      	movs	r2, #0
1000816e:	4b29      	ldr	r3, [pc, #164]	; (10008214 <aon_sleep_timer_init+0xac>)
10008170:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008172:	7803      	ldrb	r3, [r0, #0]
10008174:	2b02      	cmp	r3, #2
10008176:	d105      	bne.n	10008184 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008178:	4a26      	ldr	r2, [pc, #152]	; (10008214 <aon_sleep_timer_init+0xac>)
1000817a:	7b11      	ldrb	r1, [r2, #12]
1000817c:	3301      	adds	r3, #1
1000817e:	430b      	orrs	r3, r1
10008180:	7313      	strb	r3, [r2, #12]
10008182:	e005      	b.n	10008190 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008184:	2b01      	cmp	r3, #1
10008186:	d103      	bne.n	10008190 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008188:	4a22      	ldr	r2, [pc, #136]	; (10008214 <aon_sleep_timer_init+0xac>)
1000818a:	7b11      	ldrb	r1, [r2, #12]
1000818c:	430b      	orrs	r3, r1
1000818e:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008190:	4b21      	ldr	r3, [pc, #132]	; (10008218 <aon_sleep_timer_init+0xb0>)
10008192:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008194:	0053      	lsls	r3, r2, #1
10008196:	d01f      	beq.n	100081d8 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	4d1f      	ldr	r5, [pc, #124]	; (10008218 <aon_sleep_timer_init+0xb0>)
1000819a:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000819c:	262c      	movs	r6, #44	; 0x2c
1000819e:	36ff      	adds	r6, #255	; 0xff
100081a0:	2180      	movs	r1, #128	; 0x80
100081a2:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081a4:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
100081a6:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
100081a8:	9701      	str	r7, [sp, #4]
100081aa:	9b01      	ldr	r3, [sp, #4]
100081ac:	42b3      	cmp	r3, r6
100081ae:	d806      	bhi.n	100081be <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081b0:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081b2:	9b01      	ldr	r3, [sp, #4]
100081b4:	3301      	adds	r3, #1
100081b6:	9301      	str	r3, [sp, #4]
100081b8:	9b01      	ldr	r3, [sp, #4]
100081ba:	42b3      	cmp	r3, r6
100081bc:	d9f8      	bls.n	100081b0 <aon_sleep_timer_init+0x48>
100081be:	7844      	ldrb	r4, [r0, #1]
100081c0:	000b      	movs	r3, r1
100081c2:	2c00      	cmp	r4, #0
100081c4:	d103      	bne.n	100081ce <aon_sleep_timer_init+0x66>
100081c6:	2380      	movs	r3, #128	; 0x80
100081c8:	009b      	lsls	r3, r3, #2
100081ca:	e000      	b.n	100081ce <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081cc:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081ce:	4213      	tst	r3, r2
100081d0:	d1fc      	bne.n	100081cc <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081d2:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081d4:	0053      	lsls	r3, r2, #1
100081d6:	d1e5      	bne.n	100081a4 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081d8:	7843      	ldrb	r3, [r0, #1]
100081da:	2b00      	cmp	r3, #0
100081dc:	d105      	bne.n	100081ea <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0e      	ldr	r3, [pc, #56]	; (10008218 <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081e4:	2201      	movs	r2, #1
100081e6:	601a      	str	r2, [r3, #0]
100081e8:	e004      	b.n	100081f4 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081ea:	4b0b      	ldr	r3, [pc, #44]	; (10008218 <aon_sleep_timer_init+0xb0>)
100081ec:	6842      	ldr	r2, [r0, #4]
100081ee:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081f0:	2202      	movs	r2, #2
100081f2:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081f4:	7843      	ldrb	r3, [r0, #1]
100081f6:	2b01      	cmp	r3, #1
100081f8:	d106      	bne.n	10008208 <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081fa:	4907      	ldr	r1, [pc, #28]	; (10008218 <aon_sleep_timer_init+0xb0>)
100081fc:	22e0      	movs	r2, #224	; 0xe0
100081fe:	01d2      	lsls	r2, r2, #7
10008200:	680b      	ldr	r3, [r1, #0]
10008202:	4013      	ands	r3, r2
10008204:	4293      	cmp	r3, r2
10008206:	d1fb      	bne.n	10008200 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008208:	4904      	ldr	r1, [pc, #16]	; (1000821c <aon_sleep_timer_init+0xb4>)
1000820a:	202b      	movs	r0, #43	; 0x2b
1000820c:	4b04      	ldr	r3, [pc, #16]	; (10008220 <aon_sleep_timer_init+0xb8>)
1000820e:	4798      	blx	r3
}
10008210:	b003      	add	sp, #12
10008212:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008214:	4000e000 	.word	0x4000e000
10008218:	4000d000 	.word	0x4000d000
1000821c:	10008135 	.word	0x10008135
10008220:	1000ba89 	.word	0x1000ba89

10008224 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008224:	b5f0      	push	{r4, r5, r6, r7, lr}
10008226:	4657      	mov	r7, sl
10008228:	464e      	mov	r6, r9
1000822a:	4645      	mov	r5, r8
1000822c:	b4e0      	push	{r5, r6, r7}
1000822e:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008230:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008232:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008234:	2d00      	cmp	r5, #0
10008236:	d033      	beq.n	100082a0 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
10008238:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000823a:	2428      	movs	r4, #40	; 0x28
1000823c:	5d1a      	ldrb	r2, [r3, r4]
1000823e:	07d2      	lsls	r2, r2, #31
10008240:	d4fc      	bmi.n	1000823c <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008242:	2201      	movs	r2, #1
10008244:	2434      	movs	r4, #52	; 0x34
10008246:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008248:	3c14      	subs	r4, #20
1000824a:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000824c:	880a      	ldrh	r2, [r1, #0]
1000824e:	0052      	lsls	r2, r2, #1
10008250:	2402      	movs	r4, #2
10008252:	34ff      	adds	r4, #255	; 0xff
10008254:	4322      	orrs	r2, r4
10008256:	b292      	uxth	r2, r2
10008258:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000825a:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
1000825c:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000825e:	4222      	tst	r2, r4
10008260:	d0fc      	beq.n	1000825c <_i2c_master_read_packet+0x38>
10008262:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008264:	1e6c      	subs	r4, r5, #1
10008266:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008268:	2420      	movs	r4, #32
1000826a:	46a1      	mov	r9, r4
1000826c:	2400      	movs	r4, #0
1000826e:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008270:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008272:	7944      	ldrb	r4, [r0, #5]
10008274:	2c00      	cmp	r4, #0
10008276:	d104      	bne.n	10008282 <_i2c_master_read_packet+0x5e>
10008278:	4562      	cmp	r2, ip
1000827a:	d102      	bne.n	10008282 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000827c:	464c      	mov	r4, r9
1000827e:	4647      	mov	r7, r8
10008280:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008282:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008284:	4234      	tst	r4, r6
10008286:	d008      	beq.n	1000829a <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
10008288:	1c54      	adds	r4, r2, #1
1000828a:	46a2      	mov	sl, r4
1000828c:	791f      	ldrb	r7, [r3, #4]
1000828e:	684c      	ldr	r4, [r1, #4]
10008290:	54a7      	strb	r7, [r4, r2]
10008292:	4652      	mov	r2, sl
10008294:	466c      	mov	r4, sp
10008296:	80e2      	strh	r2, [r4, #6]
10008298:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000829a:	42aa      	cmp	r2, r5
1000829c:	d3e9      	bcc.n	10008272 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
1000829e:	2300      	movs	r3, #0
}
100082a0:	0018      	movs	r0, r3
100082a2:	b002      	add	sp, #8
100082a4:	bc1c      	pop	{r2, r3, r4}
100082a6:	4690      	mov	r8, r2
100082a8:	4699      	mov	r9, r3
100082aa:	46a2      	mov	sl, r4
100082ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082ae:	46c0      	nop			; (mov r8, r8)

100082b0 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100082b2:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082b4:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082b6:	884e      	ldrh	r6, [r1, #2]
100082b8:	2428      	movs	r4, #40	; 0x28
100082ba:	5d13      	ldrb	r3, [r2, r4]
100082bc:	07db      	lsls	r3, r3, #31
100082be:	d4fc      	bmi.n	100082ba <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082c0:	2301      	movs	r3, #1
100082c2:	2434      	movs	r4, #52	; 0x34
100082c4:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082c6:	3c14      	subs	r4, #20
100082c8:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082ca:	880b      	ldrh	r3, [r1, #0]
100082cc:	005b      	lsls	r3, r3, #1
100082ce:	34e0      	adds	r4, #224	; 0xe0
100082d0:	4323      	orrs	r3, r4
100082d2:	b29b      	uxth	r3, r3
100082d4:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082d6:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d8:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082da:	7a13      	ldrb	r3, [r2, #8]
100082dc:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082de:	421d      	tst	r5, r3
100082e0:	d004      	beq.n	100082ec <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082e2:	1c67      	adds	r7, r4, #1
100082e4:	6848      	ldr	r0, [r1, #4]
100082e6:	5d04      	ldrb	r4, [r0, r4]
100082e8:	8014      	strh	r4, [r2, #0]
100082ea:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082ec:	42b4      	cmp	r4, r6
100082ee:	d3f4      	bcc.n	100082da <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082f0:	06db      	lsls	r3, r3, #27
100082f2:	d403      	bmi.n	100082fc <_i2c_master_write_packet+0x4c>
100082f4:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082f6:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082f8:	420b      	tst	r3, r1
100082fa:	d0fc      	beq.n	100082f6 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082fc:	4663      	mov	r3, ip
100082fe:	795b      	ldrb	r3, [r3, #5]
10008300:	2b00      	cmp	r3, #0
10008302:	d102      	bne.n	1000830a <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008304:	2100      	movs	r1, #0
10008306:	3320      	adds	r3, #32
10008308:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
1000830a:	2000      	movs	r0, #0
1000830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000830e:	46c0      	nop			; (mov r8, r8)

10008310 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008310:	2303      	movs	r3, #3
10008312:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008314:	330d      	adds	r3, #13
10008316:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008318:	3b08      	subs	r3, #8
1000831a:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000831c:	3301      	adds	r3, #1
1000831e:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008320:	3b07      	subs	r3, #7
10008322:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008324:	6103      	str	r3, [r0, #16]
}
10008326:	4770      	bx	lr

10008328 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008328:	b570      	push	{r4, r5, r6, lr}
1000832a:	0004      	movs	r4, r0
1000832c:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000832e:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008330:	2800      	cmp	r0, #0
10008332:	d026      	beq.n	10008382 <i2c_master_init+0x5a>
10008334:	2a00      	cmp	r2, #0
10008336:	d026      	beq.n	10008386 <i2c_master_init+0x5e>
10008338:	2228      	movs	r2, #40	; 0x28
1000833a:	5c8b      	ldrb	r3, [r1, r2]
1000833c:	07db      	lsls	r3, r3, #31
1000833e:	d4fc      	bmi.n	1000833a <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008340:	2300      	movs	r3, #0
10008342:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008344:	6823      	ldr	r3, [r4, #0]
10008346:	4a11      	ldr	r2, [pc, #68]	; (1000838c <i2c_master_init+0x64>)
10008348:	4293      	cmp	r3, r2
1000834a:	d103      	bne.n	10008354 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000834c:	2003      	movs	r0, #3
1000834e:	4b10      	ldr	r3, [pc, #64]	; (10008390 <i2c_master_init+0x68>)
10008350:	4798      	blx	r3
10008352:	e006      	b.n	10008362 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008354:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
10008356:	4a0f      	ldr	r2, [pc, #60]	; (10008394 <i2c_master_init+0x6c>)
10008358:	4293      	cmp	r3, r2
1000835a:	d115      	bne.n	10008388 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000835c:	3002      	adds	r0, #2
1000835e:	4b0c      	ldr	r3, [pc, #48]	; (10008390 <i2c_master_init+0x68>)
10008360:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008362:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008364:	8929      	ldrh	r1, [r5, #8]
10008366:	7928      	ldrb	r0, [r5, #4]
10008368:	4e0b      	ldr	r6, [pc, #44]	; (10008398 <i2c_master_init+0x70>)
1000836a:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000836c:	8a29      	ldrh	r1, [r5, #16]
1000836e:	7b28      	ldrb	r0, [r5, #12]
10008370:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008372:	782b      	ldrb	r3, [r5, #0]
10008374:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008376:	886b      	ldrh	r3, [r5, #2]
10008378:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000837a:	2301      	movs	r3, #1
1000837c:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000837e:	2000      	movs	r0, #0
10008380:	e002      	b.n	10008388 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008382:	2017      	movs	r0, #23
10008384:	e000      	b.n	10008388 <i2c_master_init+0x60>
10008386:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008388:	bd70      	pop	{r4, r5, r6, pc}
1000838a:	46c0      	nop			; (mov r8, r8)
1000838c:	40003000 	.word	0x40003000
10008390:	1000b621 	.word	0x1000b621
10008394:	40003400 	.word	0x40003400
10008398:	1000aba9 	.word	0x1000aba9

1000839c <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000839c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000839e:	2800      	cmp	r0, #0
100083a0:	d008      	beq.n	100083b4 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083a2:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083a4:	2900      	cmp	r1, #0
100083a6:	d006      	beq.n	100083b6 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083a8:	2300      	movs	r3, #0
100083aa:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083ac:	4b03      	ldr	r3, [pc, #12]	; (100083bc <i2c_master_read_packet_wait+0x20>)
100083ae:	4798      	blx	r3
100083b0:	0003      	movs	r3, r0
100083b2:	e000      	b.n	100083b6 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083b4:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083b6:	0018      	movs	r0, r3
100083b8:	bd10      	pop	{r4, pc}
100083ba:	46c0      	nop			; (mov r8, r8)
100083bc:	10008225 	.word	0x10008225

100083c0 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083c0:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083c2:	2800      	cmp	r0, #0
100083c4:	d008      	beq.n	100083d8 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083c6:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083c8:	2900      	cmp	r1, #0
100083ca:	d006      	beq.n	100083da <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083cc:	2300      	movs	r3, #0
100083ce:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083d0:	4b03      	ldr	r3, [pc, #12]	; (100083e0 <i2c_master_write_packet_wait+0x20>)
100083d2:	4798      	blx	r3
100083d4:	0003      	movs	r3, r0
100083d6:	e000      	b.n	100083da <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083d8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083da:	0018      	movs	r0, r3
100083dc:	bd10      	pop	{r4, pc}
100083de:	46c0      	nop			; (mov r8, r8)
100083e0:	100082b1 	.word	0x100082b1

100083e4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083e4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e6:	2800      	cmp	r0, #0
100083e8:	d008      	beq.n	100083fc <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ea:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083ec:	2900      	cmp	r1, #0
100083ee:	d006      	beq.n	100083fe <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083f0:	3b16      	subs	r3, #22
100083f2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083f4:	4b03      	ldr	r3, [pc, #12]	; (10008404 <i2c_master_write_packet_wait_no_stop+0x20>)
100083f6:	4798      	blx	r3
100083f8:	0003      	movs	r3, r0
100083fa:	e000      	b.n	100083fe <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083fc:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083fe:	0018      	movs	r0, r3
10008400:	bd10      	pop	{r4, pc}
10008402:	46c0      	nop			; (mov r8, r8)
10008404:	100082b1 	.word	0x100082b1

10008408 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10008408:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000840a:	4a06      	ldr	r2, [pc, #24]	; (10008424 <_sbrk+0x1c>)
1000840c:	6812      	ldr	r2, [r2, #0]
1000840e:	2a00      	cmp	r2, #0
10008410:	d102      	bne.n	10008418 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008412:	4905      	ldr	r1, [pc, #20]	; (10008428 <_sbrk+0x20>)
10008414:	4a03      	ldr	r2, [pc, #12]	; (10008424 <_sbrk+0x1c>)
10008416:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10008418:	4a02      	ldr	r2, [pc, #8]	; (10008424 <_sbrk+0x1c>)
1000841a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000841c:	18c3      	adds	r3, r0, r3
1000841e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008420:	4770      	bx	lr
10008422:	46c0      	nop			; (mov r8, r8)
10008424:	100183c4 	.word	0x100183c4
10008428:	1001ba98 	.word	0x1001ba98

1000842c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000842c:	2001      	movs	r0, #1
1000842e:	4240      	negs	r0, r0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008434:	2380      	movs	r3, #128	; 0x80
10008436:	019b      	lsls	r3, r3, #6
10008438:	604b      	str	r3, [r1, #4]

	return 0;
}
1000843a:	2000      	movs	r0, #0
1000843c:	4770      	bx	lr
1000843e:	46c0      	nop			; (mov r8, r8)

10008440 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008440:	2001      	movs	r0, #1
10008442:	4770      	bx	lr

10008444 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008444:	2000      	movs	r0, #0
10008446:	4770      	bx	lr

10008448 <sms_ble_pair_request_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10008448:	b510      	push	{r4, lr}
1000844a:	b082      	sub	sp, #8
	at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000844c:	4809      	ldr	r0, [pc, #36]	; (10008474 <sms_ble_pair_request_fn+0x2c>)
1000844e:	4b0a      	ldr	r3, [pc, #40]	; (10008478 <sms_ble_pair_request_fn+0x30>)
10008450:	4798      	blx	r3
10008452:	4b0a      	ldr	r3, [pc, #40]	; (1000847c <sms_ble_pair_request_fn+0x34>)
10008454:	781a      	ldrb	r2, [r3, #0]
10008456:	b2d2      	uxtb	r2, r2
10008458:	4b09      	ldr	r3, [pc, #36]	; (10008480 <sms_ble_pair_request_fn+0x38>)
1000845a:	781b      	ldrb	r3, [r3, #0]
1000845c:	b2db      	uxtb	r3, r3
1000845e:	4909      	ldr	r1, [pc, #36]	; (10008484 <sms_ble_pair_request_fn+0x3c>)
10008460:	7808      	ldrb	r0, [r1, #0]
10008462:	4909      	ldr	r1, [pc, #36]	; (10008488 <sms_ble_pair_request_fn+0x40>)
10008464:	7b49      	ldrb	r1, [r1, #13]
10008466:	9000      	str	r0, [sp, #0]
10008468:	4808      	ldr	r0, [pc, #32]	; (1000848c <sms_ble_pair_request_fn+0x44>)
1000846a:	4c09      	ldr	r4, [pc, #36]	; (10008490 <sms_ble_pair_request_fn+0x48>)
1000846c:	47a0      	blx	r4
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
1000846e:	2000      	movs	r0, #0
10008470:	b002      	add	sp, #8
10008472:	bd10      	pop	{r4, pc}
10008474:	10016878 	.word	0x10016878
10008478:	10015939 	.word	0x10015939
1000847c:	10019e78 	.word	0x10019e78
10008480:	10019e6c 	.word	0x10019e6c
10008484:	10019f9b 	.word	0x10019f9b
10008488:	10019e7c 	.word	0x10019e7c
1000848c:	1001687c 	.word	0x1001687c
10008490:	10015819 	.word	0x10015819

10008494 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008494:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008496:	4c0d      	ldr	r4, [pc, #52]	; (100084cc <sms_ble_notification_confirmed_fn+0x38>)
10008498:	7863      	ldrb	r3, [r4, #1]
1000849a:	3b01      	subs	r3, #1
1000849c:	b2db      	uxtb	r3, r3
1000849e:	7063      	strb	r3, [r4, #1]
	//DBG_LOG("T/O: OFF");
	sms_ble_timeout = BLE_TIMEOUT_OFF;
100084a0:	2201      	movs	r2, #1
100084a2:	4252      	negs	r2, r2
100084a4:	4b0a      	ldr	r3, [pc, #40]	; (100084d0 <sms_ble_notification_confirmed_fn+0x3c>)
100084a6:	601a      	str	r2, [r3, #0]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
100084a8:	2001      	movs	r0, #1
100084aa:	4b0a      	ldr	r3, [pc, #40]	; (100084d4 <sms_ble_notification_confirmed_fn+0x40>)
100084ac:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
100084ae:	2200      	movs	r2, #0
100084b0:	4b09      	ldr	r3, [pc, #36]	; (100084d8 <sms_ble_notification_confirmed_fn+0x44>)
100084b2:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
100084b4:	2322      	movs	r3, #34	; 0x22
100084b6:	7023      	strb	r3, [r4, #0]
	//DBG_LOG_CONT_DEV(" done!");

	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	if(timer1_current_mode == TIMER1_MODE_NONE) {
100084b8:	4b08      	ldr	r3, [pc, #32]	; (100084dc <sms_ble_notification_confirmed_fn+0x48>)
100084ba:	781b      	ldrb	r3, [r3, #0]
100084bc:	2b00      	cmp	r3, #0
100084be:	d102      	bne.n	100084c6 <sms_ble_notification_confirmed_fn+0x32>
		ulp_ready = true;
100084c0:	3201      	adds	r2, #1
100084c2:	4b07      	ldr	r3, [pc, #28]	; (100084e0 <sms_ble_notification_confirmed_fn+0x4c>)
100084c4:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
100084c6:	2000      	movs	r0, #0
100084c8:	bd10      	pop	{r4, pc}
100084ca:	46c0      	nop			; (mov r8, r8)
100084cc:	10019e78 	.word	0x10019e78
100084d0:	10019e70 	.word	0x10019e70
100084d4:	1000a27d 	.word	0x1000a27d
100084d8:	10019f9b 	.word	0x10019f9b
100084dc:	10019e6c 	.word	0x10019e6c
100084e0:	10019e75 	.word	0x10019e75

100084e4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084e4:	b510      	push	{r4, lr}
	
	at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
100084e6:	2001      	movs	r0, #1
100084e8:	4b08      	ldr	r3, [pc, #32]	; (1000850c <sms_ble_indication_confirmed_fn+0x28>)
100084ea:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
100084ec:	2200      	movs	r2, #0
100084ee:	4b08      	ldr	r3, [pc, #32]	; (10008510 <sms_ble_indication_confirmed_fn+0x2c>)
100084f0:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
100084f2:	3222      	adds	r2, #34	; 0x22
100084f4:	4b07      	ldr	r3, [pc, #28]	; (10008514 <sms_ble_indication_confirmed_fn+0x30>)
100084f6:	701a      	strb	r2, [r3, #0]
	//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
	//sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
	
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	if(timer1_current_mode == TIMER1_MODE_NONE) {
100084f8:	4b07      	ldr	r3, [pc, #28]	; (10008518 <sms_ble_indication_confirmed_fn+0x34>)
100084fa:	781b      	ldrb	r3, [r3, #0]
100084fc:	2b00      	cmp	r3, #0
100084fe:	d102      	bne.n	10008506 <sms_ble_indication_confirmed_fn+0x22>
		ulp_ready = true;
10008500:	3a21      	subs	r2, #33	; 0x21
10008502:	4b06      	ldr	r3, [pc, #24]	; (1000851c <sms_ble_indication_confirmed_fn+0x38>)
10008504:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
10008506:	2000      	movs	r0, #0
10008508:	bd10      	pop	{r4, pc}
1000850a:	46c0      	nop			; (mov r8, r8)
1000850c:	1000a27d 	.word	0x1000a27d
10008510:	10019f9b 	.word	0x10019f9b
10008514:	10019e78 	.word	0x10019e78
10008518:	10019e6c 	.word	0x10019e6c
1000851c:	10019e75 	.word	0x10019e75

10008520 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
10008520:	2300      	movs	r3, #0
10008522:	4a02      	ldr	r2, [pc, #8]	; (1000852c <sms_ble_init_variables+0xc>)
10008524:	7013      	strb	r3, [r2, #0]
	sms_ble_send_cnt = 0;
10008526:	4a02      	ldr	r2, [pc, #8]	; (10008530 <sms_ble_init_variables+0x10>)
10008528:	8013      	strh	r3, [r2, #0]
}
1000852a:	4770      	bx	lr
1000852c:	10019e78 	.word	0x10019e78
10008530:	1001a094 	.word	0x1001a094

10008534 <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
10008534:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008536:	482c      	ldr	r0, [pc, #176]	; (100085e8 <sms_ble_power_down+0xb4>)
10008538:	4b2c      	ldr	r3, [pc, #176]	; (100085ec <sms_ble_power_down+0xb8>)
1000853a:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000853c:	4b2c      	ldr	r3, [pc, #176]	; (100085f0 <sms_ble_power_down+0xbc>)
1000853e:	781b      	ldrb	r3, [r3, #0]
10008540:	2b00      	cmp	r3, #0
10008542:	d105      	bne.n	10008550 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008544:	2201      	movs	r2, #1
10008546:	4b2b      	ldr	r3, [pc, #172]	; (100085f4 <sms_ble_power_down+0xc0>)
10008548:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
1000854a:	4b2b      	ldr	r3, [pc, #172]	; (100085f8 <sms_ble_power_down+0xc4>)
1000854c:	4798      	blx	r3
1000854e:	e049      	b.n	100085e4 <sms_ble_power_down+0xb0>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008550:	4b27      	ldr	r3, [pc, #156]	; (100085f0 <sms_ble_power_down+0xbc>)
10008552:	781b      	ldrb	r3, [r3, #0]
10008554:	b2db      	uxtb	r3, r3
10008556:	2b21      	cmp	r3, #33	; 0x21
10008558:	d030      	beq.n	100085bc <sms_ble_power_down+0x88>
1000855a:	d802      	bhi.n	10008562 <sms_ble_power_down+0x2e>
1000855c:	2b20      	cmp	r3, #32
1000855e:	d005      	beq.n	1000856c <sms_ble_power_down+0x38>
10008560:	e037      	b.n	100085d2 <sms_ble_power_down+0x9e>
10008562:	2b22      	cmp	r3, #34	; 0x22
10008564:	d017      	beq.n	10008596 <sms_ble_power_down+0x62>
10008566:	2b23      	cmp	r3, #35	; 0x23
10008568:	d01b      	beq.n	100085a2 <sms_ble_power_down+0x6e>
1000856a:	e032      	b.n	100085d2 <sms_ble_power_down+0x9e>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
1000856c:	4823      	ldr	r0, [pc, #140]	; (100085fc <sms_ble_power_down+0xc8>)
1000856e:	4b24      	ldr	r3, [pc, #144]	; (10008600 <sms_ble_power_down+0xcc>)
10008570:	4798      	blx	r3
10008572:	4824      	ldr	r0, [pc, #144]	; (10008604 <sms_ble_power_down+0xd0>)
10008574:	4b24      	ldr	r3, [pc, #144]	; (10008608 <sms_ble_power_down+0xd4>)
10008576:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008578:	4b24      	ldr	r3, [pc, #144]	; (1000860c <sms_ble_power_down+0xd8>)
1000857a:	4798      	blx	r3
1000857c:	2800      	cmp	r0, #0
1000857e:	d003      	beq.n	10008588 <sms_ble_power_down+0x54>
				DBG_LOG_CONT_DEV("failed!!!");
10008580:	4823      	ldr	r0, [pc, #140]	; (10008610 <sms_ble_power_down+0xdc>)
10008582:	4b21      	ldr	r3, [pc, #132]	; (10008608 <sms_ble_power_down+0xd4>)
10008584:	4798      	blx	r3
10008586:	e024      	b.n	100085d2 <sms_ble_power_down+0x9e>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
10008588:	4822      	ldr	r0, [pc, #136]	; (10008614 <sms_ble_power_down+0xe0>)
1000858a:	4b1f      	ldr	r3, [pc, #124]	; (10008608 <sms_ble_power_down+0xd4>)
1000858c:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000858e:	2211      	movs	r2, #17
10008590:	4b17      	ldr	r3, [pc, #92]	; (100085f0 <sms_ble_power_down+0xbc>)
10008592:	701a      	strb	r2, [r3, #0]
10008594:	e01d      	b.n	100085d2 <sms_ble_power_down+0x9e>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10008596:	4819      	ldr	r0, [pc, #100]	; (100085fc <sms_ble_power_down+0xc8>)
10008598:	4b19      	ldr	r3, [pc, #100]	; (10008600 <sms_ble_power_down+0xcc>)
1000859a:	4798      	blx	r3
1000859c:	481e      	ldr	r0, [pc, #120]	; (10008618 <sms_ble_power_down+0xe4>)
1000859e:	4b1a      	ldr	r3, [pc, #104]	; (10008608 <sms_ble_power_down+0xd4>)
100085a0:	4798      	blx	r3
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
100085a2:	4816      	ldr	r0, [pc, #88]	; (100085fc <sms_ble_power_down+0xc8>)
100085a4:	4b16      	ldr	r3, [pc, #88]	; (10008600 <sms_ble_power_down+0xcc>)
100085a6:	4798      	blx	r3
100085a8:	481c      	ldr	r0, [pc, #112]	; (1000861c <sms_ble_power_down+0xe8>)
100085aa:	4b17      	ldr	r3, [pc, #92]	; (10008608 <sms_ble_power_down+0xd4>)
100085ac:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
100085ae:	2100      	movs	r1, #0
100085b0:	232b      	movs	r3, #43	; 0x2b
100085b2:	4a1b      	ldr	r2, [pc, #108]	; (10008620 <sms_ble_power_down+0xec>)
100085b4:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
100085b6:	2000      	movs	r0, #0
100085b8:	4b1a      	ldr	r3, [pc, #104]	; (10008624 <sms_ble_power_down+0xf0>)
100085ba:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
100085bc:	480f      	ldr	r0, [pc, #60]	; (100085fc <sms_ble_power_down+0xc8>)
100085be:	4b10      	ldr	r3, [pc, #64]	; (10008600 <sms_ble_power_down+0xcc>)
100085c0:	4798      	blx	r3
100085c2:	4819      	ldr	r0, [pc, #100]	; (10008628 <sms_ble_power_down+0xf4>)
100085c4:	4b10      	ldr	r3, [pc, #64]	; (10008608 <sms_ble_power_down+0xd4>)
100085c6:	4798      	blx	r3
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
100085c8:	4b18      	ldr	r3, [pc, #96]	; (1000862c <sms_ble_power_down+0xf8>)
100085ca:	8818      	ldrh	r0, [r3, #0]
100085cc:	2113      	movs	r1, #19
100085ce:	4b18      	ldr	r3, [pc, #96]	; (10008630 <sms_ble_power_down+0xfc>)
100085d0:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085d2:	2211      	movs	r2, #17
100085d4:	4b06      	ldr	r3, [pc, #24]	; (100085f0 <sms_ble_power_down+0xbc>)
100085d6:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100085d8:	3a0e      	subs	r2, #14
100085da:	4b16      	ldr	r3, [pc, #88]	; (10008634 <sms_ble_power_down+0x100>)
100085dc:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
100085de:	2016      	movs	r0, #22
100085e0:	4b15      	ldr	r3, [pc, #84]	; (10008638 <sms_ble_power_down+0x104>)
100085e2:	4798      	blx	r3
	}
}
100085e4:	bd10      	pop	{r4, pc}
100085e6:	46c0      	nop			; (mov r8, r8)
100085e8:	100168cc 	.word	0x100168cc
100085ec:	10008f3d 	.word	0x10008f3d
100085f0:	10019e78 	.word	0x10019e78
100085f4:	10019e75 	.word	0x10019e75
100085f8:	1000de05 	.word	0x1000de05
100085fc:	10016878 	.word	0x10016878
10008600:	10015939 	.word	0x10015939
10008604:	100168e4 	.word	0x100168e4
10008608:	10015819 	.word	0x10015819
1000860c:	1000f08d 	.word	0x1000f08d
10008610:	10016938 	.word	0x10016938
10008614:	10016944 	.word	0x10016944
10008618:	1001694c 	.word	0x1001694c
1000861c:	100169a4 	.word	0x100169a4
10008620:	10019f00 	.word	0x10019f00
10008624:	10009fcd 	.word	0x10009fcd
10008628:	100169d0 	.word	0x100169d0
1000862c:	10019e7a 	.word	0x10019e7a
10008630:	1000f0b9 	.word	0x1000f0b9
10008634:	10019f9b 	.word	0x10019f9b
10008638:	10009d09 	.word	0x10009d09

1000863c <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000863c:	b510      	push	{r4, lr}
	at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000863e:	2211      	movs	r2, #17
10008640:	4b05      	ldr	r3, [pc, #20]	; (10008658 <sms_ble_adv_report_fn+0x1c>)
10008642:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10008644:	4805      	ldr	r0, [pc, #20]	; (1000865c <sms_ble_adv_report_fn+0x20>)
10008646:	4b06      	ldr	r3, [pc, #24]	; (10008660 <sms_ble_adv_report_fn+0x24>)
10008648:	4798      	blx	r3
1000864a:	4806      	ldr	r0, [pc, #24]	; (10008664 <sms_ble_adv_report_fn+0x28>)
1000864c:	4b06      	ldr	r3, [pc, #24]	; (10008668 <sms_ble_adv_report_fn+0x2c>)
1000864e:	4798      	blx	r3
	//DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
	sms_ble_power_down();
10008650:	4b06      	ldr	r3, [pc, #24]	; (1000866c <sms_ble_adv_report_fn+0x30>)
10008652:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10008654:	2000      	movs	r0, #0
10008656:	bd10      	pop	{r4, pc}
10008658:	10019e78 	.word	0x10019e78
1000865c:	10016878 	.word	0x10016878
10008660:	10015939 	.word	0x10015939
10008664:	10016a08 	.word	0x10016a08
10008668:	10015819 	.word	0x10015819
1000866c:	10008535 	.word	0x10008535

10008670 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008670:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008672:	4b0c      	ldr	r3, [pc, #48]	; (100086a4 <sms_ble_connected_fn+0x34>)
10008674:	781b      	ldrb	r3, [r3, #0]
10008676:	2b20      	cmp	r3, #32
10008678:	d110      	bne.n	1000869c <sms_ble_connected_fn+0x2c>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		sms_ble_conn_handle = connected->handle;
1000867a:	8902      	ldrh	r2, [r0, #8]
1000867c:	4b0a      	ldr	r3, [pc, #40]	; (100086a8 <sms_ble_connected_fn+0x38>)
1000867e:	801a      	strh	r2, [r3, #0]
		ble_instance.current_state = BLE_STATE_CONNECTED;
10008680:	2221      	movs	r2, #33	; 0x21
10008682:	4b08      	ldr	r3, [pc, #32]	; (100086a4 <sms_ble_connected_fn+0x34>)
10008684:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10008686:	4809      	ldr	r0, [pc, #36]	; (100086ac <sms_ble_connected_fn+0x3c>)
10008688:	4b09      	ldr	r3, [pc, #36]	; (100086b0 <sms_ble_connected_fn+0x40>)
1000868a:	4798      	blx	r3
1000868c:	4809      	ldr	r0, [pc, #36]	; (100086b4 <sms_ble_connected_fn+0x44>)
1000868e:	4b0a      	ldr	r3, [pc, #40]	; (100086b8 <sms_ble_connected_fn+0x48>)
10008690:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		//DBG_LOG("T/O: 5000 ms");
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10008692:	22fa      	movs	r2, #250	; 0xfa
10008694:	0052      	lsls	r2, r2, #1
10008696:	4b09      	ldr	r3, [pc, #36]	; (100086bc <sms_ble_connected_fn+0x4c>)
10008698:	601a      	str	r2, [r3, #0]
1000869a:	e001      	b.n	100086a0 <sms_ble_connected_fn+0x30>
	}
	else {
		sms_ble_power_down();
1000869c:	4b08      	ldr	r3, [pc, #32]	; (100086c0 <sms_ble_connected_fn+0x50>)
1000869e:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
100086a0:	2000      	movs	r0, #0
100086a2:	bd10      	pop	{r4, pc}
100086a4:	10019e78 	.word	0x10019e78
100086a8:	10019f8e 	.word	0x10019f8e
100086ac:	10016878 	.word	0x10016878
100086b0:	10015939 	.word	0x10015939
100086b4:	10016a3c 	.word	0x10016a3c
100086b8:	10015819 	.word	0x10015819
100086bc:	10019e70 	.word	0x10019e70
100086c0:	10008535 	.word	0x10008535

100086c4 <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
100086c4:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
100086c6:	4b12      	ldr	r3, [pc, #72]	; (10008710 <sms_ble_paired_fn+0x4c>)
100086c8:	781b      	ldrb	r3, [r3, #0]
100086ca:	2b21      	cmp	r3, #33	; 0x21
100086cc:	d11b      	bne.n	10008706 <sms_ble_paired_fn+0x42>
		ble_instance.current_state = BLE_STATE_PAIRED;
100086ce:	2222      	movs	r2, #34	; 0x22
100086d0:	4b0f      	ldr	r3, [pc, #60]	; (10008710 <sms_ble_paired_fn+0x4c>)
100086d2:	701a      	strb	r2, [r3, #0]
		at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
		sms_monitor_get_states("[sms_ble_paired_fn]");
100086d4:	480f      	ldr	r0, [pc, #60]	; (10008714 <sms_ble_paired_fn+0x50>)
100086d6:	4b10      	ldr	r3, [pc, #64]	; (10008718 <sms_ble_paired_fn+0x54>)
100086d8:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		if(sms_imu_startup()) {
100086da:	4b10      	ldr	r3, [pc, #64]	; (1000871c <sms_ble_paired_fn+0x58>)
100086dc:	4798      	blx	r3
100086de:	2800      	cmp	r0, #0
100086e0:	d005      	beq.n	100086ee <sms_ble_paired_fn+0x2a>
			DBG_LOG("Cannot start IMU");
100086e2:	480f      	ldr	r0, [pc, #60]	; (10008720 <sms_ble_paired_fn+0x5c>)
100086e4:	4b0f      	ldr	r3, [pc, #60]	; (10008724 <sms_ble_paired_fn+0x60>)
100086e6:	4798      	blx	r3
100086e8:	480f      	ldr	r0, [pc, #60]	; (10008728 <sms_ble_paired_fn+0x64>)
100086ea:	4b10      	ldr	r3, [pc, #64]	; (1000872c <sms_ble_paired_fn+0x68>)
100086ec:	4798      	blx	r3
		}
		dualtimer_enable(DUALTIMER_TIMER1);
100086ee:	2000      	movs	r0, #0
100086f0:	4b0f      	ldr	r3, [pc, #60]	; (10008730 <sms_ble_paired_fn+0x6c>)
100086f2:	4798      	blx	r3
		sms_sensors_interrupt_toggle(true, false);
100086f4:	2100      	movs	r1, #0
100086f6:	2001      	movs	r0, #1
100086f8:	4b0e      	ldr	r3, [pc, #56]	; (10008734 <sms_ble_paired_fn+0x70>)
100086fa:	4798      	blx	r3

		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		sms_ble_timeout = BLE_TIMEOUT_OFF;
100086fc:	2201      	movs	r2, #1
100086fe:	4252      	negs	r2, r2
10008700:	4b0d      	ldr	r3, [pc, #52]	; (10008738 <sms_ble_paired_fn+0x74>)
10008702:	601a      	str	r2, [r3, #0]
10008704:	e001      	b.n	1000870a <sms_ble_paired_fn+0x46>
	}
	else {
		sms_ble_power_down();
10008706:	4b0d      	ldr	r3, [pc, #52]	; (1000873c <sms_ble_paired_fn+0x78>)
10008708:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000870a:	2000      	movs	r0, #0
1000870c:	bd10      	pop	{r4, pc}
1000870e:	46c0      	nop			; (mov r8, r8)
10008710:	10019e78 	.word	0x10019e78
10008714:	10016a6c 	.word	0x10016a6c
10008718:	10008f3d 	.word	0x10008f3d
1000871c:	10009bd1 	.word	0x10009bd1
10008720:	10016878 	.word	0x10016878
10008724:	10015939 	.word	0x10015939
10008728:	10016a80 	.word	0x10016a80
1000872c:	10015819 	.word	0x10015819
10008730:	1000a669 	.word	0x1000a669
10008734:	10009fcd 	.word	0x10009fcd
10008738:	10019e70 	.word	0x10019e70
1000873c:	10008535 	.word	0x10008535

10008740 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008740:	b510      	push	{r4, lr}
10008742:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008744:	2220      	movs	r2, #32
10008746:	4b17      	ldr	r3, [pc, #92]	; (100087a4 <sms_ble_advertise+0x64>)
10008748:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000874a:	4b17      	ldr	r3, [pc, #92]	; (100087a8 <sms_ble_advertise+0x68>)
1000874c:	4798      	blx	r3
1000874e:	1e04      	subs	r4, r0, #0
10008750:	d007      	beq.n	10008762 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008752:	4816      	ldr	r0, [pc, #88]	; (100087ac <sms_ble_advertise+0x6c>)
10008754:	4b16      	ldr	r3, [pc, #88]	; (100087b0 <sms_ble_advertise+0x70>)
10008756:	4798      	blx	r3
10008758:	4816      	ldr	r0, [pc, #88]	; (100087b4 <sms_ble_advertise+0x74>)
1000875a:	4b17      	ldr	r3, [pc, #92]	; (100087b8 <sms_ble_advertise+0x78>)
1000875c:	4798      	blx	r3
		return status;
1000875e:	0020      	movs	r0, r4
10008760:	e01e      	b.n	100087a0 <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008762:	2300      	movs	r3, #0
10008764:	9302      	str	r3, [sp, #8]
10008766:	4b15      	ldr	r3, [pc, #84]	; (100087bc <sms_ble_advertise+0x7c>)
10008768:	9301      	str	r3, [sp, #4]
1000876a:	23c8      	movs	r3, #200	; 0xc8
1000876c:	00db      	lsls	r3, r3, #3
1000876e:	9300      	str	r3, [sp, #0]
10008770:	2300      	movs	r3, #0
10008772:	2200      	movs	r2, #0
10008774:	2101      	movs	r1, #1
10008776:	2000      	movs	r0, #0
10008778:	4c11      	ldr	r4, [pc, #68]	; (100087c0 <sms_ble_advertise+0x80>)
1000877a:	47a0      	blx	r4
1000877c:	1e04      	subs	r4, r0, #0
1000877e:	d107      	bne.n	10008790 <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10008780:	480a      	ldr	r0, [pc, #40]	; (100087ac <sms_ble_advertise+0x6c>)
10008782:	4b0b      	ldr	r3, [pc, #44]	; (100087b0 <sms_ble_advertise+0x70>)
10008784:	4798      	blx	r3
10008786:	480f      	ldr	r0, [pc, #60]	; (100087c4 <sms_ble_advertise+0x84>)
10008788:	4b0b      	ldr	r3, [pc, #44]	; (100087b8 <sms_ble_advertise+0x78>)
1000878a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000878c:	2000      	movs	r0, #0
1000878e:	e007      	b.n	100087a0 <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10008790:	4806      	ldr	r0, [pc, #24]	; (100087ac <sms_ble_advertise+0x6c>)
10008792:	4b07      	ldr	r3, [pc, #28]	; (100087b0 <sms_ble_advertise+0x70>)
10008794:	4798      	blx	r3
10008796:	0021      	movs	r1, r4
10008798:	480b      	ldr	r0, [pc, #44]	; (100087c8 <sms_ble_advertise+0x88>)
1000879a:	4b07      	ldr	r3, [pc, #28]	; (100087b8 <sms_ble_advertise+0x78>)
1000879c:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000879e:	20e2      	movs	r0, #226	; 0xe2
}
100087a0:	b004      	add	sp, #16
100087a2:	bd10      	pop	{r4, pc}
100087a4:	10019e78 	.word	0x10019e78
100087a8:	1000d44d 	.word	0x1000d44d
100087ac:	10016878 	.word	0x10016878
100087b0:	10015939 	.word	0x10015939
100087b4:	10016a94 	.word	0x10016a94
100087b8:	10015819 	.word	0x10015819
100087bc:	0000028f 	.word	0x0000028f
100087c0:	1000ef51 	.word	0x1000ef51
100087c4:	10016ac8 	.word	0x10016ac8
100087c8:	10016af8 	.word	0x10016af8

100087cc <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
100087cc:	b530      	push	{r4, r5, lr}
100087ce:	b083      	sub	sp, #12
100087d0:	0005      	movs	r5, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
100087d2:	4b1c      	ldr	r3, [pc, #112]	; (10008844 <sms_ble_disconnected_fn+0x78>)
100087d4:	781b      	ldrb	r3, [r3, #0]
100087d6:	2b22      	cmp	r3, #34	; 0x22
100087d8:	d10a      	bne.n	100087f0 <sms_ble_disconnected_fn+0x24>
		pressure_device.state = PRESSURE_STATE_OFF;
100087da:	2100      	movs	r1, #0
100087dc:	3309      	adds	r3, #9
100087de:	4a1a      	ldr	r2, [pc, #104]	; (10008848 <sms_ble_disconnected_fn+0x7c>)
100087e0:	54d1      	strb	r1, [r2, r3]
		sms_sensors_interrupt_toggle(false, false);
100087e2:	2000      	movs	r0, #0
100087e4:	4b19      	ldr	r3, [pc, #100]	; (1000884c <sms_ble_disconnected_fn+0x80>)
100087e6:	4798      	blx	r3
		sms_sensors_switch(false, false);
100087e8:	2100      	movs	r1, #0
100087ea:	2000      	movs	r0, #0
100087ec:	4b18      	ldr	r3, [pc, #96]	; (10008850 <sms_ble_disconnected_fn+0x84>)
100087ee:	4798      	blx	r3
	}
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
100087f0:	4c14      	ldr	r4, [pc, #80]	; (10008844 <sms_ble_disconnected_fn+0x78>)
100087f2:	2311      	movs	r3, #17
100087f4:	7023      	strb	r3, [r4, #0]
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
100087f6:	4817      	ldr	r0, [pc, #92]	; (10008854 <sms_ble_disconnected_fn+0x88>)
100087f8:	4b17      	ldr	r3, [pc, #92]	; (10008858 <sms_ble_disconnected_fn+0x8c>)
100087fa:	4798      	blx	r3
100087fc:	7822      	ldrb	r2, [r4, #0]
100087fe:	b2d2      	uxtb	r2, r2
10008800:	4b16      	ldr	r3, [pc, #88]	; (1000885c <sms_ble_disconnected_fn+0x90>)
10008802:	781b      	ldrb	r3, [r3, #0]
10008804:	b2db      	uxtb	r3, r3
10008806:	4916      	ldr	r1, [pc, #88]	; (10008860 <sms_ble_disconnected_fn+0x94>)
10008808:	7808      	ldrb	r0, [r1, #0]
1000880a:	4916      	ldr	r1, [pc, #88]	; (10008864 <sms_ble_disconnected_fn+0x98>)
1000880c:	7b49      	ldrb	r1, [r1, #13]
1000880e:	9000      	str	r0, [sp, #0]
10008810:	4815      	ldr	r0, [pc, #84]	; (10008868 <sms_ble_disconnected_fn+0x9c>)
10008812:	4c16      	ldr	r4, [pc, #88]	; (1000886c <sms_ble_disconnected_fn+0xa0>)
10008814:	47a0      	blx	r4
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
10008816:	78ab      	ldrb	r3, [r5, #2]
10008818:	2b1a      	cmp	r3, #26
1000881a:	d00b      	beq.n	10008834 <sms_ble_disconnected_fn+0x68>
1000881c:	b2da      	uxtb	r2, r3
1000881e:	2a1a      	cmp	r2, #26
10008820:	d804      	bhi.n	1000882c <sms_ble_disconnected_fn+0x60>
10008822:	2b05      	cmp	r3, #5
10008824:	d006      	beq.n	10008834 <sms_ble_disconnected_fn+0x68>
10008826:	2b08      	cmp	r3, #8
10008828:	d107      	bne.n	1000883a <sms_ble_disconnected_fn+0x6e>
1000882a:	e003      	b.n	10008834 <sms_ble_disconnected_fn+0x68>
1000882c:	2b29      	cmp	r3, #41	; 0x29
1000882e:	d001      	beq.n	10008834 <sms_ble_disconnected_fn+0x68>
10008830:	2b3b      	cmp	r3, #59	; 0x3b
10008832:	d102      	bne.n	1000883a <sms_ble_disconnected_fn+0x6e>
		case AT_BLE_AUTH_FAILURE: //0x05
		case AT_BLE_SUPERVISION_TIMEOUT: //0x08
		case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		sms_ble_advertise();
10008834:	4b0e      	ldr	r3, [pc, #56]	; (10008870 <sms_ble_disconnected_fn+0xa4>)
10008836:	4798      	blx	r3
		break;
10008838:	e001      	b.n	1000883e <sms_ble_disconnected_fn+0x72>
		case AT_BLE_TERMINATED_BY_USER: // 0x13
		case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		default:
		sms_ble_power_down();
1000883a:	4b0e      	ldr	r3, [pc, #56]	; (10008874 <sms_ble_disconnected_fn+0xa8>)
1000883c:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
1000883e:	2000      	movs	r0, #0
10008840:	b003      	add	sp, #12
10008842:	bd30      	pop	{r4, r5, pc}
10008844:	10019e78 	.word	0x10019e78
10008848:	10019f00 	.word	0x10019f00
1000884c:	10009fcd 	.word	0x10009fcd
10008850:	1000a051 	.word	0x1000a051
10008854:	10016878 	.word	0x10016878
10008858:	10015939 	.word	0x10015939
1000885c:	10019e6c 	.word	0x10019e6c
10008860:	10019f9b 	.word	0x10019f9b
10008864:	10019e7c 	.word	0x10019e7c
10008868:	10016b3c 	.word	0x10016b3c
1000886c:	10015819 	.word	0x10015819
10008870:	10008741 	.word	0x10008741
10008874:	10008535 	.word	0x10008535

10008878 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008878:	b570      	push	{r4, r5, r6, lr}
1000887a:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
1000887c:	2801      	cmp	r0, #1
1000887e:	d02e      	beq.n	100088de <sms_ble_send_characteristic+0x66>
10008880:	2800      	cmp	r0, #0
10008882:	d002      	beq.n	1000888a <sms_ble_send_characteristic+0x12>
10008884:	2802      	cmp	r0, #2
10008886:	d040      	beq.n	1000890a <sms_ble_send_characteristic+0x92>
10008888:	e07a      	b.n	10008980 <sms_ble_send_characteristic+0x108>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
1000888a:	2300      	movs	r3, #0
1000888c:	466a      	mov	r2, sp
1000888e:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
10008890:	4b50      	ldr	r3, [pc, #320]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
10008892:	791b      	ldrb	r3, [r3, #4]
10008894:	2b00      	cmp	r3, #0
10008896:	d00a      	beq.n	100088ae <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008898:	4b4e      	ldr	r3, [pc, #312]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
1000889a:	795a      	ldrb	r2, [r3, #5]
1000889c:	2300      	movs	r3, #0
1000889e:	2a7e      	cmp	r2, #126	; 0x7e
100088a0:	d801      	bhi.n	100088a6 <sms_ble_send_characteristic+0x2e>
100088a2:	3201      	adds	r2, #1
100088a4:	b2d3      	uxtb	r3, r2
100088a6:	4a4b      	ldr	r2, [pc, #300]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
100088a8:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
100088aa:	466a      	mov	r2, sp
100088ac:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
100088ae:	4b49      	ldr	r3, [pc, #292]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
100088b0:	7a9b      	ldrb	r3, [r3, #10]
100088b2:	2b00      	cmp	r3, #0
100088b4:	d00f      	beq.n	100088d6 <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
100088b6:	4b47      	ldr	r3, [pc, #284]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
100088b8:	7adb      	ldrb	r3, [r3, #11]
100088ba:	2bff      	cmp	r3, #255	; 0xff
100088bc:	d002      	beq.n	100088c4 <sms_ble_send_characteristic+0x4c>
100088be:	3301      	adds	r3, #1
100088c0:	b2db      	uxtb	r3, r3
100088c2:	e000      	b.n	100088c6 <sms_ble_send_characteristic+0x4e>
100088c4:	2300      	movs	r3, #0
100088c6:	4a43      	ldr	r2, [pc, #268]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
100088c8:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
100088ca:	3b80      	subs	r3, #128	; 0x80
100088cc:	466a      	mov	r2, sp
100088ce:	7812      	ldrb	r2, [r2, #0]
100088d0:	4313      	orrs	r3, r2
100088d2:	466a      	mov	r2, sp
100088d4:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
100088d6:	4b3f      	ldr	r3, [pc, #252]	; (100089d4 <sms_ble_send_characteristic+0x15c>)
100088d8:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
100088da:	2201      	movs	r2, #1
		break;
100088dc:	e052      	b.n	10008984 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
100088de:	4a3e      	ldr	r2, [pc, #248]	; (100089d8 <sms_ble_send_characteristic+0x160>)
100088e0:	6a13      	ldr	r3, [r2, #32]
100088e2:	1619      	asrs	r1, r3, #24
100088e4:	4668      	mov	r0, sp
100088e6:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
100088e8:	1419      	asrs	r1, r3, #16
100088ea:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
100088ec:	1219      	asrs	r1, r3, #8
100088ee:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
100088f0:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
100088f2:	69d3      	ldr	r3, [r2, #28]
100088f4:	1619      	asrs	r1, r3, #24
100088f6:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
100088f8:	1419      	asrs	r1, r3, #16
100088fa:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
100088fc:	1219      	asrs	r1, r3, #8
100088fe:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10008900:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10008902:	2340      	movs	r3, #64	; 0x40
10008904:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
10008906:	2208      	movs	r2, #8
		break;
10008908:	e03c      	b.n	10008984 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
1000890a:	4c34      	ldr	r4, [pc, #208]	; (100089dc <sms_ble_send_characteristic+0x164>)
1000890c:	4e34      	ldr	r6, [pc, #208]	; (100089e0 <sms_ble_send_characteristic+0x168>)
1000890e:	4935      	ldr	r1, [pc, #212]	; (100089e4 <sms_ble_send_characteristic+0x16c>)
10008910:	6e60      	ldr	r0, [r4, #100]	; 0x64
10008912:	47b0      	blx	r6
10008914:	4d34      	ldr	r5, [pc, #208]	; (100089e8 <sms_ble_send_characteristic+0x170>)
10008916:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
		send_val[0] = (uint8_t)(int_val & 0xff);
10008918:	466b      	mov	r3, sp
1000891a:	7018      	strb	r0, [r3, #0]
		send_val[1] = (uint8_t)((int_val >> 8) & 0xff);
1000891c:	0a03      	lsrs	r3, r0, #8
1000891e:	466a      	mov	r2, sp
10008920:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 16) & 0xff);
10008922:	0c03      	lsrs	r3, r0, #16
10008924:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 24) & 0xff);
10008926:	0e00      	lsrs	r0, r0, #24
10008928:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
1000892a:	492e      	ldr	r1, [pc, #184]	; (100089e4 <sms_ble_send_characteristic+0x16c>)
1000892c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
1000892e:	47b0      	blx	r6
10008930:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
		send_val[4] = (uint8_t)(int_val & 0xff);
10008932:	466b      	mov	r3, sp
10008934:	7118      	strb	r0, [r3, #4]
		send_val[5] = (uint8_t)((int_val >> 8) & 0xff);
10008936:	0a03      	lsrs	r3, r0, #8
10008938:	466a      	mov	r2, sp
1000893a:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 16) & 0xff);
1000893c:	0c03      	lsrs	r3, r0, #16
1000893e:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 24) & 0xff);
10008940:	0e00      	lsrs	r0, r0, #24
10008942:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
10008944:	4927      	ldr	r1, [pc, #156]	; (100089e4 <sms_ble_send_characteristic+0x16c>)
10008946:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10008948:	47b0      	blx	r6
1000894a:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(int_val & 0xff);
1000894c:	466b      	mov	r3, sp
1000894e:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((int_val >> 8) & 0xff);
10008950:	0a03      	lsrs	r3, r0, #8
10008952:	466a      	mov	r2, sp
10008954:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 16) & 0xff);
10008956:	0c03      	lsrs	r3, r0, #16
10008958:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 24) & 0xff);
1000895a:	0e00      	lsrs	r0, r0, #24
1000895c:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
1000895e:	4921      	ldr	r1, [pc, #132]	; (100089e4 <sms_ble_send_characteristic+0x16c>)
10008960:	6f20      	ldr	r0, [r4, #112]	; 0x70
10008962:	47b0      	blx	r6
10008964:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(int_val & 0xff);
10008966:	466b      	mov	r3, sp
10008968:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((int_val >> 8) & 0xff);
1000896a:	0a03      	lsrs	r3, r0, #8
1000896c:	466a      	mov	r2, sp
1000896e:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 16) & 0xff);
10008970:	0c03      	lsrs	r3, r0, #16
10008972:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 24) & 0xff);
10008974:	0e00      	lsrs	r0, r0, #24
10008976:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10008978:	2398      	movs	r3, #152	; 0x98
1000897a:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
1000897c:	2210      	movs	r2, #16
		

		break;
1000897e:	e001      	b.n	10008984 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
10008980:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
10008982:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008984:	b292      	uxth	r2, r2
10008986:	4669      	mov	r1, sp
10008988:	0028      	movs	r0, r5
1000898a:	4b18      	ldr	r3, [pc, #96]	; (100089ec <sms_ble_send_characteristic+0x174>)
1000898c:	4798      	blx	r3
1000898e:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
10008990:	d117      	bne.n	100089c2 <sms_ble_send_characteristic+0x14a>
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		status = at_ble_notification_send(sms_connection_handle, val_handle);
10008992:	4b17      	ldr	r3, [pc, #92]	; (100089f0 <sms_ble_send_characteristic+0x178>)
10008994:	8818      	ldrh	r0, [r3, #0]
10008996:	0029      	movs	r1, r5
10008998:	4b16      	ldr	r3, [pc, #88]	; (100089f4 <sms_ble_send_characteristic+0x17c>)
1000899a:	4798      	blx	r3
1000899c:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000899e:	d10c      	bne.n	100089ba <sms_ble_send_characteristic+0x142>
			ble_instance.sending_queue++;
100089a0:	4a15      	ldr	r2, [pc, #84]	; (100089f8 <sms_ble_send_characteristic+0x180>)
100089a2:	7853      	ldrb	r3, [r2, #1]
100089a4:	3301      	adds	r3, #1
100089a6:	b2db      	uxtb	r3, r3
100089a8:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
100089aa:	4a14      	ldr	r2, [pc, #80]	; (100089fc <sms_ble_send_characteristic+0x184>)
100089ac:	8813      	ldrh	r3, [r2, #0]
100089ae:	3301      	adds	r3, #1
100089b0:	8013      	strh	r3, [r2, #0]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
100089b2:	2202      	movs	r2, #2
100089b4:	4b12      	ldr	r3, [pc, #72]	; (10008a00 <sms_ble_send_characteristic+0x188>)
100089b6:	601a      	str	r2, [r3, #0]
100089b8:	e009      	b.n	100089ce <sms_ble_send_characteristic+0x156>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
100089ba:	4812      	ldr	r0, [pc, #72]	; (10008a04 <sms_ble_send_characteristic+0x18c>)
100089bc:	4b12      	ldr	r3, [pc, #72]	; (10008a08 <sms_ble_send_characteristic+0x190>)
100089be:	4798      	blx	r3
100089c0:	e005      	b.n	100089ce <sms_ble_send_characteristic+0x156>
		//DBG_LOG_DEV(" NOT gone? ");
		//#pragma TBD: handle sending error...
		//}
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
100089c2:	4812      	ldr	r0, [pc, #72]	; (10008a0c <sms_ble_send_characteristic+0x194>)
100089c4:	4b12      	ldr	r3, [pc, #72]	; (10008a10 <sms_ble_send_characteristic+0x198>)
100089c6:	4798      	blx	r3
100089c8:	4812      	ldr	r0, [pc, #72]	; (10008a14 <sms_ble_send_characteristic+0x19c>)
100089ca:	4b0f      	ldr	r3, [pc, #60]	; (10008a08 <sms_ble_send_characteristic+0x190>)
100089cc:	4798      	blx	r3
	}
	return status;
}
100089ce:	0020      	movs	r0, r4
100089d0:	b004      	add	sp, #16
100089d2:	bd70      	pop	{r4, r5, r6, pc}
100089d4:	10019e7c 	.word	0x10019e7c
100089d8:	10019f00 	.word	0x10019f00
100089dc:	10019fb4 	.word	0x10019fb4
100089e0:	100131d9 	.word	0x100131d9
100089e4:	49742400 	.word	0x49742400
100089e8:	10012dd9 	.word	0x10012dd9
100089ec:	1000f835 	.word	0x1000f835
100089f0:	10019e7a 	.word	0x10019e7a
100089f4:	1000f9d5 	.word	0x1000f9d5
100089f8:	10019e78 	.word	0x10019e78
100089fc:	1001a094 	.word	0x1001a094
10008a00:	10019e70 	.word	0x10019e70
10008a04:	10016b90 	.word	0x10016b90
10008a08:	10015819 	.word	0x10015819
10008a0c:	10016878 	.word	0x10016878
10008a10:	10015939 	.word	0x10015939
10008a14:	10016ba8 	.word	0x10016ba8

10008a18 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008a18:	b510      	push	{r4, lr}
10008a1a:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10008a1c:	0001      	movs	r1, r0
10008a1e:	3112      	adds	r1, #18
10008a20:	2301      	movs	r3, #1
10008a22:	9301      	str	r3, [sp, #4]
10008a24:	0003      	movs	r3, r0
10008a26:	3314      	adds	r3, #20
10008a28:	9300      	str	r3, [sp, #0]
10008a2a:	2300      	movs	r3, #0
10008a2c:	2200      	movs	r2, #0
10008a2e:	4c02      	ldr	r4, [pc, #8]	; (10008a38 <sms_ble_primary_service_define+0x20>)
10008a30:	47a0      	blx	r4
}
10008a32:	b002      	add	sp, #8
10008a34:	bd10      	pop	{r4, pc}
10008a36:	46c0      	nop			; (mov r8, r8)
10008a38:	1000f815 	.word	0x1000f815

10008a3c <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10008a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a3e:	464f      	mov	r7, r9
10008a40:	4646      	mov	r6, r8
10008a42:	b4c0      	push	{r6, r7}
10008a44:	b083      	sub	sp, #12
10008a46:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
10008a48:	2801      	cmp	r0, #1
10008a4a:	d010      	beq.n	10008a6e <sms_ble_service_init+0x32>
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d002      	beq.n	10008a56 <sms_ble_service_init+0x1a>
10008a50:	2802      	cmp	r0, #2
10008a52:	d019      	beq.n	10008a88 <sms_ble_service_init+0x4c>
10008a54:	e025      	b.n	10008aa2 <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
10008a56:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
10008a58:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10008a5a:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
10008a5c:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
10008a5e:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10008a60:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10008a62:	221c      	movs	r2, #28
10008a64:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
10008a66:	3a1b      	subs	r2, #27
10008a68:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
10008a6a:	4691      	mov	r9, r2
10008a6c:	e023      	b.n	10008ab6 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008a6e:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008a70:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008a72:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008a74:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008a76:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008a78:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008a7a:	221c      	movs	r2, #28
10008a7c:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
10008a7e:	3a14      	subs	r2, #20
10008a80:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10008a82:	3a06      	subs	r2, #6
10008a84:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10008a86:	e016      	b.n	10008ab6 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10008a88:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
10008a8a:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10008a8c:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
10008a8e:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008a90:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008a92:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008a94:	221c      	movs	r2, #28
10008a96:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10008a98:	3a08      	subs	r2, #8
10008a9a:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
10008a9c:	3a11      	subs	r2, #17
10008a9e:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10008aa0:	e009      	b.n	10008ab6 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10008aa2:	2300      	movs	r3, #0
10008aa4:	2400      	movs	r4, #0
10008aa6:	2500      	movs	r5, #0
10008aa8:	2600      	movs	r6, #0
10008aaa:	2700      	movs	r7, #0
10008aac:	2000      	movs	r0, #0
10008aae:	2200      	movs	r2, #0
10008ab0:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10008ab2:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10008ab4:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10008ab6:	464a      	mov	r2, r9
10008ab8:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
10008aba:	2202      	movs	r2, #2
10008abc:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
10008abe:	4642      	mov	r2, r8
10008ac0:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10008ac2:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10008ac4:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10008ac6:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10008ac8:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
10008aca:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
10008acc:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
10008ace:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10008ad0:	2300      	movs	r3, #0
10008ad2:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10008ad4:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10008ad6:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10008ad8:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
10008ada:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
10008adc:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
10008ade:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10008ae0:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008ae2:	2412      	movs	r4, #18
10008ae4:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10008ae6:	4662      	mov	r2, ip
10008ae8:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008aea:	466a      	mov	r2, sp
10008aec:	8892      	ldrh	r2, [r2, #4]
10008aee:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008af0:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008af2:	2011      	movs	r0, #17
10008af4:	2234      	movs	r2, #52	; 0x34
10008af6:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10008af8:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
10008afa:	2200      	movs	r2, #0
10008afc:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
10008afe:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008b00:	3033      	adds	r0, #51	; 0x33
10008b02:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008b04:	3001      	adds	r0, #1
10008b06:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008b08:	3001      	adds	r0, #1
10008b0a:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
10008b0c:	2248      	movs	r2, #72	; 0x48
10008b0e:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
10008b10:	3202      	adds	r2, #2
10008b12:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
10008b14:	3202      	adds	r2, #2
10008b16:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
10008b18:	640b      	str	r3, [r1, #64]	; 0x40
10008b1a:	b003      	add	sp, #12
10008b1c:	bc0c      	pop	{r2, r3}
10008b1e:	4690      	mov	r8, r2
10008b20:	4699      	mov	r9, r3
10008b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008b24 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008b24:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008b26:	4b05      	ldr	r3, [pc, #20]	; (10008b3c <sms_button_bt0_callback+0x18>)
10008b28:	2201      	movs	r2, #1
10008b2a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008b2c:	7858      	ldrb	r0, [r3, #1]
10008b2e:	2300      	movs	r3, #0
10008b30:	2200      	movs	r2, #0
10008b32:	2102      	movs	r1, #2
10008b34:	4c02      	ldr	r4, [pc, #8]	; (10008b40 <sms_button_bt0_callback+0x1c>)
10008b36:	47a0      	blx	r4
}
10008b38:	bd10      	pop	{r4, pc}
10008b3a:	46c0      	nop			; (mov r8, r8)
10008b3c:	10019e7c 	.word	0x10019e7c
10008b40:	1000db39 	.word	0x1000db39

10008b44 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008b44:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008b46:	4b05      	ldr	r3, [pc, #20]	; (10008b5c <sms_button_bt1_callback+0x18>)
10008b48:	2201      	movs	r2, #1
10008b4a:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008b4c:	79d8      	ldrb	r0, [r3, #7]
10008b4e:	2300      	movs	r3, #0
10008b50:	2200      	movs	r2, #0
10008b52:	2102      	movs	r1, #2
10008b54:	4c02      	ldr	r4, [pc, #8]	; (10008b60 <sms_button_bt1_callback+0x1c>)
10008b56:	47a0      	blx	r4
}
10008b58:	bd10      	pop	{r4, pc}
10008b5a:	46c0      	nop			; (mov r8, r8)
10008b5c:	10019e7c 	.word	0x10019e7c
10008b60:	1000db39 	.word	0x1000db39

10008b64 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008b64:	4b08      	ldr	r3, [pc, #32]	; (10008b88 <sms_button_init_variables+0x24>)
10008b66:	2200      	movs	r2, #0
10008b68:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008b6a:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008b6c:	211f      	movs	r1, #31
10008b6e:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008b70:	391e      	subs	r1, #30
10008b72:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008b74:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008b76:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008b78:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008b7a:	201d      	movs	r0, #29
10008b7c:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008b7e:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008b80:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008b82:	72da      	strb	r2, [r3, #11]
}
10008b84:	4770      	bx	lr
10008b86:	46c0      	nop			; (mov r8, r8)
10008b88:	10019e7c 	.word	0x10019e7c

10008b8c <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008b8c:	b510      	push	{r4, lr}
10008b8e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b90:	ac01      	add	r4, sp, #4
10008b92:	0020      	movs	r0, r4
10008b94:	4b20      	ldr	r3, [pc, #128]	; (10008c18 <sms_button_gpio_init+0x8c>)
10008b96:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b98:	2300      	movs	r3, #0
10008b9a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b9c:	3302      	adds	r3, #2
10008b9e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008ba0:	3b01      	subs	r3, #1
10008ba2:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008ba4:	4b1d      	ldr	r3, [pc, #116]	; (10008c1c <sms_button_gpio_init+0x90>)
10008ba6:	7858      	ldrb	r0, [r3, #1]
10008ba8:	0021      	movs	r1, r4
10008baa:	4b1d      	ldr	r3, [pc, #116]	; (10008c20 <sms_button_gpio_init+0x94>)
10008bac:	4798      	blx	r3
10008bae:	2800      	cmp	r0, #0
10008bb0:	d005      	beq.n	10008bbe <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008bb2:	481c      	ldr	r0, [pc, #112]	; (10008c24 <sms_button_gpio_init+0x98>)
10008bb4:	4b1c      	ldr	r3, [pc, #112]	; (10008c28 <sms_button_gpio_init+0x9c>)
10008bb6:	4798      	blx	r3
10008bb8:	481c      	ldr	r0, [pc, #112]	; (10008c2c <sms_button_gpio_init+0xa0>)
10008bba:	4b1d      	ldr	r3, [pc, #116]	; (10008c30 <sms_button_gpio_init+0xa4>)
10008bbc:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008bbe:	ac01      	add	r4, sp, #4
10008bc0:	0020      	movs	r0, r4
10008bc2:	4b15      	ldr	r3, [pc, #84]	; (10008c18 <sms_button_gpio_init+0x8c>)
10008bc4:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008bc6:	2300      	movs	r3, #0
10008bc8:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008bca:	3302      	adds	r3, #2
10008bcc:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008bce:	3b01      	subs	r3, #1
10008bd0:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008bd2:	4b12      	ldr	r3, [pc, #72]	; (10008c1c <sms_button_gpio_init+0x90>)
10008bd4:	79d8      	ldrb	r0, [r3, #7]
10008bd6:	0021      	movs	r1, r4
10008bd8:	4b11      	ldr	r3, [pc, #68]	; (10008c20 <sms_button_gpio_init+0x94>)
10008bda:	4798      	blx	r3
10008bdc:	2800      	cmp	r0, #0
10008bde:	d005      	beq.n	10008bec <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008be0:	4810      	ldr	r0, [pc, #64]	; (10008c24 <sms_button_gpio_init+0x98>)
10008be2:	4b11      	ldr	r3, [pc, #68]	; (10008c28 <sms_button_gpio_init+0x9c>)
10008be4:	4798      	blx	r3
10008be6:	4813      	ldr	r0, [pc, #76]	; (10008c34 <sms_button_gpio_init+0xa8>)
10008be8:	4b11      	ldr	r3, [pc, #68]	; (10008c30 <sms_button_gpio_init+0xa4>)
10008bea:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008bec:	ac01      	add	r4, sp, #4
10008bee:	0020      	movs	r0, r4
10008bf0:	4b09      	ldr	r3, [pc, #36]	; (10008c18 <sms_button_gpio_init+0x8c>)
10008bf2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008bf4:	2300      	movs	r3, #0
10008bf6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008bf8:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008bfa:	0021      	movs	r1, r4
10008bfc:	2017      	movs	r0, #23
10008bfe:	4b08      	ldr	r3, [pc, #32]	; (10008c20 <sms_button_gpio_init+0x94>)
10008c00:	4798      	blx	r3
10008c02:	2800      	cmp	r0, #0
10008c04:	d005      	beq.n	10008c12 <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008c06:	4807      	ldr	r0, [pc, #28]	; (10008c24 <sms_button_gpio_init+0x98>)
10008c08:	4b07      	ldr	r3, [pc, #28]	; (10008c28 <sms_button_gpio_init+0x9c>)
10008c0a:	4798      	blx	r3
10008c0c:	480a      	ldr	r0, [pc, #40]	; (10008c38 <sms_button_gpio_init+0xac>)
10008c0e:	4b08      	ldr	r3, [pc, #32]	; (10008c30 <sms_button_gpio_init+0xa4>)
10008c10:	4798      	blx	r3
    }
}
10008c12:	b002      	add	sp, #8
10008c14:	bd10      	pop	{r4, pc}
10008c16:	46c0      	nop			; (mov r8, r8)
10008c18:	1000a905 	.word	0x1000a905
10008c1c:	10019e7c 	.word	0x10019e7c
10008c20:	1000a915 	.word	0x1000a915
10008c24:	10016878 	.word	0x10016878
10008c28:	10015939 	.word	0x10015939
10008c2c:	10016c28 	.word	0x10016c28
10008c30:	10015819 	.word	0x10015819
10008c34:	10016c60 	.word	0x10016c60
10008c38:	10016c98 	.word	0x10016c98

10008c3c <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008c3c:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008c3e:	4d05      	ldr	r5, [pc, #20]	; (10008c54 <sms_button_register_callbacks+0x18>)
10008c40:	7868      	ldrb	r0, [r5, #1]
10008c42:	2202      	movs	r2, #2
10008c44:	4904      	ldr	r1, [pc, #16]	; (10008c58 <sms_button_register_callbacks+0x1c>)
10008c46:	4c05      	ldr	r4, [pc, #20]	; (10008c5c <sms_button_register_callbacks+0x20>)
10008c48:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008c4a:	79e8      	ldrb	r0, [r5, #7]
10008c4c:	2202      	movs	r2, #2
10008c4e:	4904      	ldr	r1, [pc, #16]	; (10008c60 <sms_button_register_callbacks+0x24>)
10008c50:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008c52:	bd70      	pop	{r4, r5, r6, pc}
10008c54:	10019e7c 	.word	0x10019e7c
10008c58:	10008b25 	.word	0x10008b25
10008c5c:	1000acf5 	.word	0x1000acf5
10008c60:	10008b45 	.word	0x10008b45

10008c64 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008c64:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008c66:	201f      	movs	r0, #31
10008c68:	4c08      	ldr	r4, [pc, #32]	; (10008c8c <sms_button_get_state+0x28>)
10008c6a:	47a0      	blx	r4
10008c6c:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008c6e:	201d      	movs	r0, #29
10008c70:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008c72:	2d00      	cmp	r5, #0
10008c74:	d004      	beq.n	10008c80 <sms_button_get_state+0x1c>
10008c76:	2303      	movs	r3, #3
10008c78:	2800      	cmp	r0, #0
10008c7a:	d104      	bne.n	10008c86 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008c7c:	3b02      	subs	r3, #2
10008c7e:	e002      	b.n	10008c86 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008c80:	1e43      	subs	r3, r0, #1
10008c82:	4198      	sbcs	r0, r3
10008c84:	0043      	lsls	r3, r0, #1
}
10008c86:	0018      	movs	r0, r3
10008c88:	bd70      	pop	{r4, r5, r6, pc}
10008c8a:	46c0      	nop			; (mov r8, r8)
10008c8c:	1000aacd 	.word	0x1000aacd

10008c90 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008c92:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10008c94:	4c4a      	ldr	r4, [pc, #296]	; (10008dc0 <sms_button_fn+0x130>)
10008c96:	7b63      	ldrb	r3, [r4, #13]
10008c98:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008c9a:	4b4a      	ldr	r3, [pc, #296]	; (10008dc4 <sms_button_fn+0x134>)
10008c9c:	4798      	blx	r3
10008c9e:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008ca0:	2d00      	cmp	r5, #0
10008ca2:	d103      	bne.n	10008cac <sms_button_fn+0x1c>
10008ca4:	4848      	ldr	r0, [pc, #288]	; (10008dc8 <sms_button_fn+0x138>)
10008ca6:	4b49      	ldr	r3, [pc, #292]	; (10008dcc <sms_button_fn+0x13c>)
10008ca8:	4798      	blx	r3
10008caa:	e004      	b.n	10008cb6 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008cac:	2d01      	cmp	r5, #1
10008cae:	d16e      	bne.n	10008d8e <sms_button_fn+0xfe>
10008cb0:	4847      	ldr	r0, [pc, #284]	; (10008dd0 <sms_button_fn+0x140>)
10008cb2:	4b46      	ldr	r3, [pc, #280]	; (10008dcc <sms_button_fn+0x13c>)
10008cb4:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10008cb6:	4b42      	ldr	r3, [pc, #264]	; (10008dc0 <sms_button_fn+0x130>)
10008cb8:	7b5b      	ldrb	r3, [r3, #13]
10008cba:	b2da      	uxtb	r2, r3
10008cbc:	2a02      	cmp	r2, #2
10008cbe:	d802      	bhi.n	10008cc6 <sms_button_fn+0x36>
10008cc0:	2b00      	cmp	r3, #0
10008cc2:	d059      	beq.n	10008d78 <sms_button_fn+0xe8>
10008cc4:	e002      	b.n	10008ccc <sms_button_fn+0x3c>
10008cc6:	2b03      	cmp	r3, #3
10008cc8:	d02f      	beq.n	10008d2a <sms_button_fn+0x9a>
10008cca:	e063      	b.n	10008d94 <sms_button_fn+0x104>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008ccc:	4b41      	ldr	r3, [pc, #260]	; (10008dd4 <sms_button_fn+0x144>)
10008cce:	781b      	ldrb	r3, [r3, #0]
10008cd0:	b2db      	uxtb	r3, r3
10008cd2:	2b00      	cmp	r3, #0
10008cd4:	d003      	beq.n	10008cde <sms_button_fn+0x4e>
10008cd6:	3b22      	subs	r3, #34	; 0x22
10008cd8:	2b01      	cmp	r3, #1
10008cda:	d81d      	bhi.n	10008d18 <sms_button_fn+0x88>
10008cdc:	e017      	b.n	10008d0e <sms_button_fn+0x7e>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
10008cde:	483e      	ldr	r0, [pc, #248]	; (10008dd8 <sms_button_fn+0x148>)
10008ce0:	4b3e      	ldr	r3, [pc, #248]	; (10008ddc <sms_button_fn+0x14c>)
10008ce2:	4798      	blx	r3
10008ce4:	483e      	ldr	r0, [pc, #248]	; (10008de0 <sms_button_fn+0x150>)
10008ce6:	4b3f      	ldr	r3, [pc, #252]	; (10008de4 <sms_button_fn+0x154>)
10008ce8:	4798      	blx	r3
10008cea:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008cec:	4f3e      	ldr	r7, [pc, #248]	; (10008de8 <sms_button_fn+0x158>)
				if(sms_button_get_state() != button_instance.current_state) {
10008cee:	4e35      	ldr	r6, [pc, #212]	; (10008dc4 <sms_button_fn+0x134>)
10008cf0:	4d33      	ldr	r5, [pc, #204]	; (10008dc0 <sms_button_fn+0x130>)
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008cf2:	20fa      	movs	r0, #250	; 0xfa
10008cf4:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008cf6:	47b0      	blx	r6
10008cf8:	7b6b      	ldrb	r3, [r5, #13]
10008cfa:	4283      	cmp	r3, r0
10008cfc:	d14c      	bne.n	10008d98 <sms_button_fn+0x108>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
10008cfe:	483b      	ldr	r0, [pc, #236]	; (10008dec <sms_button_fn+0x15c>)
10008d00:	4b38      	ldr	r3, [pc, #224]	; (10008de4 <sms_button_fn+0x154>)
10008d02:	4798      	blx	r3
10008d04:	3c01      	subs	r4, #1
10008d06:	b2e4      	uxtb	r4, r4
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
10008d08:	2c00      	cmp	r4, #0
10008d0a:	d1f2      	bne.n	10008cf2 <sms_button_fn+0x62>
10008d0c:	e048      	b.n	10008da0 <sms_button_fn+0x110>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008d0e:	2000      	movs	r0, #0
10008d10:	4b37      	ldr	r3, [pc, #220]	; (10008df0 <sms_button_fn+0x160>)
10008d12:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d14:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008d16:	e052      	b.n	10008dbe <sms_button_fn+0x12e>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
10008d18:	482f      	ldr	r0, [pc, #188]	; (10008dd8 <sms_button_fn+0x148>)
10008d1a:	4b30      	ldr	r3, [pc, #192]	; (10008ddc <sms_button_fn+0x14c>)
10008d1c:	4798      	blx	r3
10008d1e:	4835      	ldr	r0, [pc, #212]	; (10008df4 <sms_button_fn+0x164>)
10008d20:	4b30      	ldr	r3, [pc, #192]	; (10008de4 <sms_button_fn+0x154>)
10008d22:	4798      	blx	r3
            return -1;
10008d24:	2001      	movs	r0, #1
10008d26:	4240      	negs	r0, r0
10008d28:	e049      	b.n	10008dbe <sms_button_fn+0x12e>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008d2a:	4b2a      	ldr	r3, [pc, #168]	; (10008dd4 <sms_button_fn+0x144>)
10008d2c:	781b      	ldrb	r3, [r3, #0]
10008d2e:	2b00      	cmp	r3, #0
10008d30:	d10a      	bne.n	10008d48 <sms_button_fn+0xb8>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
10008d32:	4829      	ldr	r0, [pc, #164]	; (10008dd8 <sms_button_fn+0x148>)
10008d34:	4b29      	ldr	r3, [pc, #164]	; (10008ddc <sms_button_fn+0x14c>)
10008d36:	4798      	blx	r3
10008d38:	482f      	ldr	r0, [pc, #188]	; (10008df8 <sms_button_fn+0x168>)
10008d3a:	4b2a      	ldr	r3, [pc, #168]	; (10008de4 <sms_button_fn+0x154>)
10008d3c:	4798      	blx	r3
            ulp_ready = true;
10008d3e:	2201      	movs	r2, #1
10008d40:	4b2e      	ldr	r3, [pc, #184]	; (10008dfc <sms_button_fn+0x16c>)
10008d42:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d44:	2000      	movs	r0, #0
10008d46:	e03a      	b.n	10008dbe <sms_button_fn+0x12e>
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
10008d48:	4823      	ldr	r0, [pc, #140]	; (10008dd8 <sms_button_fn+0x148>)
10008d4a:	4b24      	ldr	r3, [pc, #144]	; (10008ddc <sms_button_fn+0x14c>)
10008d4c:	4798      	blx	r3
10008d4e:	482c      	ldr	r0, [pc, #176]	; (10008e00 <sms_button_fn+0x170>)
10008d50:	4b24      	ldr	r3, [pc, #144]	; (10008de4 <sms_button_fn+0x154>)
10008d52:	4798      	blx	r3
10008d54:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008d56:	4f24      	ldr	r7, [pc, #144]	; (10008de8 <sms_button_fn+0x158>)
				if(sms_button_get_state() != button_instance.current_state) {
10008d58:	4e1a      	ldr	r6, [pc, #104]	; (10008dc4 <sms_button_fn+0x134>)
10008d5a:	4d19      	ldr	r5, [pc, #100]	; (10008dc0 <sms_button_fn+0x130>)
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008d5c:	20fa      	movs	r0, #250	; 0xfa
10008d5e:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008d60:	47b0      	blx	r6
10008d62:	7b6b      	ldrb	r3, [r5, #13]
10008d64:	4283      	cmp	r3, r0
10008d66:	d119      	bne.n	10008d9c <sms_button_fn+0x10c>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
10008d68:	4820      	ldr	r0, [pc, #128]	; (10008dec <sms_button_fn+0x15c>)
10008d6a:	4b1e      	ldr	r3, [pc, #120]	; (10008de4 <sms_button_fn+0x154>)
10008d6c:	4798      	blx	r3
10008d6e:	3c01      	subs	r4, #1
10008d70:	b2e4      	uxtb	r4, r4
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
10008d72:	2c00      	cmp	r4, #0
10008d74:	d1f2      	bne.n	10008d5c <sms_button_fn+0xcc>
10008d76:	e01b      	b.n	10008db0 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
10008d78:	4817      	ldr	r0, [pc, #92]	; (10008dd8 <sms_button_fn+0x148>)
10008d7a:	4b18      	ldr	r3, [pc, #96]	; (10008ddc <sms_button_fn+0x14c>)
10008d7c:	4798      	blx	r3
10008d7e:	4821      	ldr	r0, [pc, #132]	; (10008e04 <sms_button_fn+0x174>)
10008d80:	4b18      	ldr	r3, [pc, #96]	; (10008de4 <sms_button_fn+0x154>)
10008d82:	4798      	blx	r3
        ulp_ready = true;
10008d84:	2201      	movs	r2, #1
10008d86:	4b1d      	ldr	r3, [pc, #116]	; (10008dfc <sms_button_fn+0x16c>)
10008d88:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d8a:	2000      	movs	r0, #0
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008d8c:	e017      	b.n	10008dbe <sms_button_fn+0x12e>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008d8e:	2001      	movs	r0, #1
10008d90:	4240      	negs	r0, r0
10008d92:	e014      	b.n	10008dbe <sms_button_fn+0x12e>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d94:	2000      	movs	r0, #0
10008d96:	e012      	b.n	10008dbe <sms_button_fn+0x12e>
10008d98:	2000      	movs	r0, #0
10008d9a:	e010      	b.n	10008dbe <sms_button_fn+0x12e>
10008d9c:	2000      	movs	r0, #0
10008d9e:	e00e      	b.n	10008dbe <sms_button_fn+0x12e>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				DBG_LOG("Start up now!");
10008da0:	480d      	ldr	r0, [pc, #52]	; (10008dd8 <sms_button_fn+0x148>)
10008da2:	4b0e      	ldr	r3, [pc, #56]	; (10008ddc <sms_button_fn+0x14c>)
10008da4:	4798      	blx	r3
10008da6:	4818      	ldr	r0, [pc, #96]	; (10008e08 <sms_button_fn+0x178>)
10008da8:	4b0e      	ldr	r3, [pc, #56]	; (10008de4 <sms_button_fn+0x154>)
10008daa:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008dac:	2000      	movs	r0, #0
10008dae:	e006      	b.n	10008dbe <sms_button_fn+0x12e>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				DBG_LOG_DEV("Shut down now!");
10008db0:	4809      	ldr	r0, [pc, #36]	; (10008dd8 <sms_button_fn+0x148>)
10008db2:	4b0a      	ldr	r3, [pc, #40]	; (10008ddc <sms_button_fn+0x14c>)
10008db4:	4798      	blx	r3
10008db6:	4815      	ldr	r0, [pc, #84]	; (10008e0c <sms_button_fn+0x17c>)
10008db8:	4b0a      	ldr	r3, [pc, #40]	; (10008de4 <sms_button_fn+0x154>)
10008dba:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008dbc:	2000      	movs	r0, #0
}
10008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008dc0:	10019e7c 	.word	0x10019e7c
10008dc4:	10008c65 	.word	0x10008c65
10008dc8:	10016ce0 	.word	0x10016ce0
10008dcc:	10008f3d 	.word	0x10008f3d
10008dd0:	10016cf4 	.word	0x10016cf4
10008dd4:	10019e78 	.word	0x10019e78
10008dd8:	10016878 	.word	0x10016878
10008ddc:	10015939 	.word	0x10015939
10008de0:	10016d08 	.word	0x10016d08
10008de4:	10015819 	.word	0x10015819
10008de8:	1000a289 	.word	0x1000a289
10008dec:	10016d28 	.word	0x10016d28
10008df0:	10008879 	.word	0x10008879
10008df4:	10016d2c 	.word	0x10016d2c
10008df8:	10016d54 	.word	0x10016d54
10008dfc:	10019e75 	.word	0x10019e75
10008e00:	10016d78 	.word	0x10016d78
10008e04:	10016d9c 	.word	0x10016d9c
10008e08:	10016db4 	.word	0x10016db4
10008e0c:	10016dc4 	.word	0x10016dc4

10008e10 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008e10:	b510      	push	{r4, lr}
10008e12:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008e14:	2800      	cmp	r0, #0
10008e16:	d104      	bne.n	10008e22 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008e18:	4b0c      	ldr	r3, [pc, #48]	; (10008e4c <sms_button_toggle_callback+0x3c>)
10008e1a:	7858      	ldrb	r0, [r3, #1]
10008e1c:	4b0c      	ldr	r3, [pc, #48]	; (10008e50 <sms_button_toggle_callback+0x40>)
10008e1e:	4798      	blx	r3
10008e20:	e005      	b.n	10008e2e <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008e22:	2801      	cmp	r0, #1
10008e24:	d103      	bne.n	10008e2e <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008e26:	4b09      	ldr	r3, [pc, #36]	; (10008e4c <sms_button_toggle_callback+0x3c>)
10008e28:	7858      	ldrb	r0, [r3, #1]
10008e2a:	4b0a      	ldr	r3, [pc, #40]	; (10008e54 <sms_button_toggle_callback+0x44>)
10008e2c:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008e2e:	2c00      	cmp	r4, #0
10008e30:	d104      	bne.n	10008e3c <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008e32:	4b06      	ldr	r3, [pc, #24]	; (10008e4c <sms_button_toggle_callback+0x3c>)
10008e34:	79d8      	ldrb	r0, [r3, #7]
10008e36:	4b06      	ldr	r3, [pc, #24]	; (10008e50 <sms_button_toggle_callback+0x40>)
10008e38:	4798      	blx	r3
10008e3a:	e005      	b.n	10008e48 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008e3c:	2c01      	cmp	r4, #1
10008e3e:	d103      	bne.n	10008e48 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008e40:	4b02      	ldr	r3, [pc, #8]	; (10008e4c <sms_button_toggle_callback+0x3c>)
10008e42:	79d8      	ldrb	r0, [r3, #7]
10008e44:	4b03      	ldr	r3, [pc, #12]	; (10008e54 <sms_button_toggle_callback+0x44>)
10008e46:	4798      	blx	r3
    }
}
10008e48:	bd10      	pop	{r4, pc}
10008e4a:	46c0      	nop			; (mov r8, r8)
10008e4c:	10019e7c 	.word	0x10019e7c
10008e50:	1000adc5 	.word	0x1000adc5
10008e54:	1000ae21 	.word	0x1000ae21

10008e58 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008e58:	b510      	push	{r4, lr}
10008e5a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e5c:	466b      	mov	r3, sp
10008e5e:	1dda      	adds	r2, r3, #7
10008e60:	2300      	movs	r3, #0
10008e62:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008e64:	4c0d      	ldr	r4, [pc, #52]	; (10008e9c <sms_button_define_services+0x44>)
10008e66:	0021      	movs	r1, r4
10008e68:	2000      	movs	r0, #0
10008e6a:	4b0d      	ldr	r3, [pc, #52]	; (10008ea0 <sms_button_define_services+0x48>)
10008e6c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008e6e:	0020      	movs	r0, r4
10008e70:	4b0c      	ldr	r3, [pc, #48]	; (10008ea4 <sms_button_define_services+0x4c>)
10008e72:	4798      	blx	r3
10008e74:	1e04      	subs	r4, r0, #0
10008e76:	d007      	beq.n	10008e88 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008e78:	480b      	ldr	r0, [pc, #44]	; (10008ea8 <sms_button_define_services+0x50>)
10008e7a:	4b0c      	ldr	r3, [pc, #48]	; (10008eac <sms_button_define_services+0x54>)
10008e7c:	4798      	blx	r3
10008e7e:	0021      	movs	r1, r4
10008e80:	480b      	ldr	r0, [pc, #44]	; (10008eb0 <sms_button_define_services+0x58>)
10008e82:	4b0c      	ldr	r3, [pc, #48]	; (10008eb4 <sms_button_define_services+0x5c>)
10008e84:	4798      	blx	r3
10008e86:	e007      	b.n	10008e98 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008e88:	4807      	ldr	r0, [pc, #28]	; (10008ea8 <sms_button_define_services+0x50>)
10008e8a:	4b08      	ldr	r3, [pc, #32]	; (10008eac <sms_button_define_services+0x54>)
10008e8c:	4798      	blx	r3
10008e8e:	4b0a      	ldr	r3, [pc, #40]	; (10008eb8 <sms_button_define_services+0x60>)
10008e90:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008e92:	480a      	ldr	r0, [pc, #40]	; (10008ebc <sms_button_define_services+0x64>)
10008e94:	4b07      	ldr	r3, [pc, #28]	; (10008eb4 <sms_button_define_services+0x5c>)
10008e96:	4798      	blx	r3
    }
10008e98:	b002      	add	sp, #8
10008e9a:	bd10      	pop	{r4, pc}
10008e9c:	10019e8c 	.word	0x10019e8c
10008ea0:	10008a3d 	.word	0x10008a3d
10008ea4:	10008a19 	.word	0x10008a19
10008ea8:	10016878 	.word	0x10016878
10008eac:	10015939 	.word	0x10015939
10008eb0:	10016dd4 	.word	0x10016dd4
10008eb4:	10015819 	.word	0x10015819
10008eb8:	10019e7c 	.word	0x10019e7c
10008ebc:	10016e18 	.word	0x10016e18

10008ec0 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008ec0:	b510      	push	{r4, lr}
10008ec2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008ec4:	ac01      	add	r4, sp, #4
10008ec6:	0020      	movs	r0, r4
10008ec8:	4b15      	ldr	r3, [pc, #84]	; (10008f20 <sms_monitor_configure_gpio+0x60>)
10008eca:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008ecc:	2301      	movs	r3, #1
10008ece:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008ed0:	0021      	movs	r1, r4
10008ed2:	200e      	movs	r0, #14
10008ed4:	4b13      	ldr	r3, [pc, #76]	; (10008f24 <sms_monitor_configure_gpio+0x64>)
10008ed6:	4798      	blx	r3
10008ed8:	2800      	cmp	r0, #0
10008eda:	d005      	beq.n	10008ee8 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008edc:	4812      	ldr	r0, [pc, #72]	; (10008f28 <sms_monitor_configure_gpio+0x68>)
10008ede:	4b13      	ldr	r3, [pc, #76]	; (10008f2c <sms_monitor_configure_gpio+0x6c>)
10008ee0:	4798      	blx	r3
10008ee2:	4813      	ldr	r0, [pc, #76]	; (10008f30 <sms_monitor_configure_gpio+0x70>)
10008ee4:	4b13      	ldr	r3, [pc, #76]	; (10008f34 <sms_monitor_configure_gpio+0x74>)
10008ee6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008ee8:	2100      	movs	r1, #0
10008eea:	200e      	movs	r0, #14
10008eec:	4b12      	ldr	r3, [pc, #72]	; (10008f38 <sms_monitor_configure_gpio+0x78>)
10008eee:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008ef0:	ac01      	add	r4, sp, #4
10008ef2:	0020      	movs	r0, r4
10008ef4:	4b0a      	ldr	r3, [pc, #40]	; (10008f20 <sms_monitor_configure_gpio+0x60>)
10008ef6:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008ef8:	2301      	movs	r3, #1
10008efa:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008efc:	0021      	movs	r1, r4
10008efe:	200f      	movs	r0, #15
10008f00:	4b08      	ldr	r3, [pc, #32]	; (10008f24 <sms_monitor_configure_gpio+0x64>)
10008f02:	4798      	blx	r3
10008f04:	2800      	cmp	r0, #0
10008f06:	d005      	beq.n	10008f14 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008f08:	4807      	ldr	r0, [pc, #28]	; (10008f28 <sms_monitor_configure_gpio+0x68>)
10008f0a:	4b08      	ldr	r3, [pc, #32]	; (10008f2c <sms_monitor_configure_gpio+0x6c>)
10008f0c:	4798      	blx	r3
10008f0e:	4808      	ldr	r0, [pc, #32]	; (10008f30 <sms_monitor_configure_gpio+0x70>)
10008f10:	4b08      	ldr	r3, [pc, #32]	; (10008f34 <sms_monitor_configure_gpio+0x74>)
10008f12:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008f14:	2100      	movs	r1, #0
10008f16:	200f      	movs	r0, #15
10008f18:	4b07      	ldr	r3, [pc, #28]	; (10008f38 <sms_monitor_configure_gpio+0x78>)
10008f1a:	4798      	blx	r3
}
10008f1c:	b002      	add	sp, #8
10008f1e:	bd10      	pop	{r4, pc}
10008f20:	1000a905 	.word	0x1000a905
10008f24:	1000a915 	.word	0x1000a915
10008f28:	10016878 	.word	0x10016878
10008f2c:	10015939 	.word	0x10015939
10008f30:	10016e60 	.word	0x10016e60
10008f34:	10015819 	.word	0x10015819
10008f38:	1000ab1d 	.word	0x1000ab1d

10008f3c <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008f3c:	b570      	push	{r4, r5, r6, lr}
10008f3e:	b084      	sub	sp, #16
10008f40:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008f42:	480c      	ldr	r0, [pc, #48]	; (10008f74 <sms_monitor_get_states+0x38>)
10008f44:	4b0c      	ldr	r3, [pc, #48]	; (10008f78 <sms_monitor_get_states+0x3c>)
10008f46:	4798      	blx	r3
10008f48:	4b0c      	ldr	r3, [pc, #48]	; (10008f7c <sms_monitor_get_states+0x40>)
10008f4a:	7819      	ldrb	r1, [r3, #0]
10008f4c:	4b0c      	ldr	r3, [pc, #48]	; (10008f80 <sms_monitor_get_states+0x44>)
10008f4e:	7818      	ldrb	r0, [r3, #0]
10008f50:	4b0c      	ldr	r3, [pc, #48]	; (10008f84 <sms_monitor_get_states+0x48>)
10008f52:	781d      	ldrb	r5, [r3, #0]
10008f54:	4b0c      	ldr	r3, [pc, #48]	; (10008f88 <sms_monitor_get_states+0x4c>)
10008f56:	781e      	ldrb	r6, [r3, #0]
10008f58:	4a0c      	ldr	r2, [pc, #48]	; (10008f8c <sms_monitor_get_states+0x50>)
10008f5a:	7b53      	ldrb	r3, [r2, #13]
10008f5c:	7b12      	ldrb	r2, [r2, #12]
10008f5e:	9603      	str	r6, [sp, #12]
10008f60:	9502      	str	r5, [sp, #8]
10008f62:	9001      	str	r0, [sp, #4]
10008f64:	9100      	str	r1, [sp, #0]
10008f66:	0021      	movs	r1, r4
10008f68:	4809      	ldr	r0, [pc, #36]	; (10008f90 <sms_monitor_get_states+0x54>)
10008f6a:	4c0a      	ldr	r4, [pc, #40]	; (10008f94 <sms_monitor_get_states+0x58>)
10008f6c:	47a0      	blx	r4
}
10008f6e:	b004      	add	sp, #16
10008f70:	bd70      	pop	{r4, r5, r6, pc}
10008f72:	46c0      	nop			; (mov r8, r8)
10008f74:	10016878 	.word	0x10016878
10008f78:	10015939 	.word	0x10015939
10008f7c:	10019e78 	.word	0x10019e78
10008f80:	10019e6c 	.word	0x10019e6c
10008f84:	10019f9b 	.word	0x10019f9b
10008f88:	10019e74 	.word	0x10019e74
10008f8c:	10019e7c 	.word	0x10019e7c
10008f90:	10016e80 	.word	0x10016e80
10008f94:	10015819 	.word	0x10015819

10008f98 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008f98:	b530      	push	{r4, r5, lr}
10008f9a:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008f9c:	2010      	movs	r0, #16
10008f9e:	4c14      	ldr	r4, [pc, #80]	; (10008ff0 <sms_i2c_master_configure+0x58>)
10008fa0:	47a0      	blx	r4
10008fa2:	4b14      	ldr	r3, [pc, #80]	; (10008ff4 <sms_i2c_master_configure+0x5c>)
10008fa4:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008fa6:	2010      	movs	r0, #16
10008fa8:	47a0      	blx	r4
10008faa:	4b13      	ldr	r3, [pc, #76]	; (10008ff8 <sms_i2c_master_configure+0x60>)
10008fac:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008fae:	ac01      	add	r4, sp, #4
10008fb0:	0020      	movs	r0, r4
10008fb2:	4b12      	ldr	r3, [pc, #72]	; (10008ffc <sms_i2c_master_configure+0x64>)
10008fb4:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008fb6:	2303      	movs	r3, #3
10008fb8:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008fba:	331b      	adds	r3, #27
10008fbc:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008fbe:	3b16      	subs	r3, #22
10008fc0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008fc2:	3301      	adds	r3, #1
10008fc4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008fc6:	3b07      	subs	r3, #7
10008fc8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008fca:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008fcc:	4d0c      	ldr	r5, [pc, #48]	; (10009000 <sms_i2c_master_configure+0x68>)
10008fce:	4c0d      	ldr	r4, [pc, #52]	; (10009004 <sms_i2c_master_configure+0x6c>)
10008fd0:	aa01      	add	r2, sp, #4
10008fd2:	490d      	ldr	r1, [pc, #52]	; (10009008 <sms_i2c_master_configure+0x70>)
10008fd4:	0028      	movs	r0, r5
10008fd6:	47a0      	blx	r4
10008fd8:	2800      	cmp	r0, #0
10008fda:	d1f9      	bne.n	10008fd0 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008fdc:	4b08      	ldr	r3, [pc, #32]	; (10009000 <sms_i2c_master_configure+0x68>)
10008fde:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008fe0:	2128      	movs	r1, #40	; 0x28
10008fe2:	5c53      	ldrb	r3, [r2, r1]
10008fe4:	07db      	lsls	r3, r3, #31
10008fe6:	d4fc      	bmi.n	10008fe2 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008fe8:	2301      	movs	r3, #1
10008fea:	7513      	strb	r3, [r2, #20]
}
10008fec:	b007      	add	sp, #28
10008fee:	bd30      	pop	{r4, r5, pc}
10008ff0:	1001568d 	.word	0x1001568d
10008ff4:	10019fa0 	.word	0x10019fa0
10008ff8:	10019f84 	.word	0x10019f84
10008ffc:	10008311 	.word	0x10008311
10009000:	10019f90 	.word	0x10019f90
10009004:	10008329 	.word	0x10008329
10009008:	40003000 	.word	0x40003000

1000900c <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000900e:	4c12      	ldr	r4, [pc, #72]	; (10009058 <sms_i2c_master_write+0x4c>)
10009010:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10009012:	1c50      	adds	r0, r2, #1
10009014:	b2c0      	uxtb	r0, r0
10009016:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009018:	6860      	ldr	r0, [r4, #4]
1000901a:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000901c:	2a00      	cmp	r2, #0
1000901e:	d00e      	beq.n	1000903e <sms_i2c_master_write+0x32>
10009020:	2000      	movs	r0, #0
10009022:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10009024:	5c18      	ldrb	r0, [r3, r0]
10009026:	6865      	ldr	r5, [r4, #4]
10009028:	5468      	strb	r0, [r5, r1]
1000902a:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000902c:	b2c9      	uxtb	r1, r1
1000902e:	428a      	cmp	r2, r1
10009030:	d8f7      	bhi.n	10009022 <sms_i2c_master_write+0x16>
10009032:	e004      	b.n	1000903e <sms_i2c_master_write+0x32>
10009034:	3c01      	subs	r4, #1
10009036:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10009038:	2c00      	cmp	r4, #0
1000903a:	d104      	bne.n	10009046 <sms_i2c_master_write+0x3a>
1000903c:	e009      	b.n	10009052 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000903e:	4c07      	ldr	r4, [pc, #28]	; (1000905c <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009040:	4e05      	ldr	r6, [pc, #20]	; (10009058 <sms_i2c_master_write+0x4c>)
10009042:	4d07      	ldr	r5, [pc, #28]	; (10009060 <sms_i2c_master_write+0x54>)
10009044:	4f07      	ldr	r7, [pc, #28]	; (10009064 <sms_i2c_master_write+0x58>)
10009046:	0031      	movs	r1, r6
10009048:	0028      	movs	r0, r5
1000904a:	47b8      	blx	r7
1000904c:	2800      	cmp	r0, #0
1000904e:	d1f1      	bne.n	10009034 <sms_i2c_master_write+0x28>
10009050:	e001      	b.n	10009056 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10009052:	2001      	movs	r0, #1
10009054:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009058:	10019fa0 	.word	0x10019fa0
1000905c:	000003e9 	.word	0x000003e9
10009060:	10019f90 	.word	0x10019f90
10009064:	100083c1 	.word	0x100083c1

10009068 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10009068:	b5f0      	push	{r4, r5, r6, r7, lr}
1000906a:	4647      	mov	r7, r8
1000906c:	b480      	push	{r7}
1000906e:	0017      	movs	r7, r2
10009070:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009072:	b280      	uxth	r0, r0
10009074:	4b1d      	ldr	r3, [pc, #116]	; (100090ec <sms_i2c_master_read+0x84>)
10009076:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10009078:	2201      	movs	r2, #1
1000907a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000907c:	685b      	ldr	r3, [r3, #4]
1000907e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009080:	4b1b      	ldr	r3, [pc, #108]	; (100090f0 <sms_i2c_master_read+0x88>)
10009082:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10009084:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009086:	4c1b      	ldr	r4, [pc, #108]	; (100090f4 <sms_i2c_master_read+0x8c>)
10009088:	4e18      	ldr	r6, [pc, #96]	; (100090ec <sms_i2c_master_read+0x84>)
1000908a:	4d1b      	ldr	r5, [pc, #108]	; (100090f8 <sms_i2c_master_read+0x90>)
1000908c:	e003      	b.n	10009096 <sms_i2c_master_read+0x2e>
1000908e:	3c01      	subs	r4, #1
10009090:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009092:	2c00      	cmp	r4, #0
10009094:	d01f      	beq.n	100090d6 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009096:	0031      	movs	r1, r6
10009098:	4818      	ldr	r0, [pc, #96]	; (100090fc <sms_i2c_master_read+0x94>)
1000909a:	47a8      	blx	r5
1000909c:	2800      	cmp	r0, #0
1000909e:	d1f6      	bne.n	1000908e <sms_i2c_master_read+0x26>
100090a0:	4e14      	ldr	r6, [pc, #80]	; (100090f4 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100090a2:	4d13      	ldr	r5, [pc, #76]	; (100090f0 <sms_i2c_master_read+0x88>)
100090a4:	4c16      	ldr	r4, [pc, #88]	; (10009100 <sms_i2c_master_read+0x98>)
100090a6:	e003      	b.n	100090b0 <sms_i2c_master_read+0x48>
100090a8:	3e01      	subs	r6, #1
100090aa:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100090ac:	2e00      	cmp	r6, #0
100090ae:	d015      	beq.n	100090dc <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100090b0:	0029      	movs	r1, r5
100090b2:	4812      	ldr	r0, [pc, #72]	; (100090fc <sms_i2c_master_read+0x94>)
100090b4:	47a0      	blx	r4
100090b6:	2800      	cmp	r0, #0
100090b8:	d1f6      	bne.n	100090a8 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100090ba:	2f00      	cmp	r7, #0
100090bc:	d011      	beq.n	100090e2 <sms_i2c_master_read+0x7a>
100090be:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
100090c0:	490b      	ldr	r1, [pc, #44]	; (100090f0 <sms_i2c_master_read+0x88>)
100090c2:	684a      	ldr	r2, [r1, #4]
100090c4:	5cd2      	ldrb	r2, [r2, r3]
100090c6:	4640      	mov	r0, r8
100090c8:	54c2      	strb	r2, [r0, r3]
100090ca:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100090cc:	b2da      	uxtb	r2, r3
100090ce:	4297      	cmp	r7, r2
100090d0:	d8f7      	bhi.n	100090c2 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100090d2:	2000      	movs	r0, #0
100090d4:	e006      	b.n	100090e4 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100090d6:	2001      	movs	r0, #1
100090d8:	4240      	negs	r0, r0
100090da:	e003      	b.n	100090e4 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100090dc:	2001      	movs	r0, #1
100090de:	4240      	negs	r0, r0
100090e0:	e000      	b.n	100090e4 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100090e2:	2000      	movs	r0, #0
100090e4:	bc04      	pop	{r2}
100090e6:	4690      	mov	r8, r2
100090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090ea:	46c0      	nop			; (mov r8, r8)
100090ec:	10019fa0 	.word	0x10019fa0
100090f0:	10019f84 	.word	0x10019f84
100090f4:	000003e9 	.word	0x000003e9
100090f8:	100083e5 	.word	0x100083e5
100090fc:	10019f90 	.word	0x10019f90
10009100:	1000839d 	.word	0x1000839d

10009104 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
10009104:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
10009106:	2380      	movs	r3, #128	; 0x80
10009108:	4a06      	ldr	r2, [pc, #24]	; (10009124 <sms_imu_interrupt_callback+0x20>)
1000910a:	5cd3      	ldrb	r3, [r2, r3]
1000910c:	2b00      	cmp	r3, #0
1000910e:	d008      	beq.n	10009122 <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009110:	2101      	movs	r1, #1
10009112:	2381      	movs	r3, #129	; 0x81
10009114:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10009116:	2300      	movs	r3, #0
10009118:	2200      	movs	r2, #0
1000911a:	3101      	adds	r1, #1
1000911c:	201e      	movs	r0, #30
1000911e:	4c02      	ldr	r4, [pc, #8]	; (10009128 <sms_imu_interrupt_callback+0x24>)
10009120:	47a0      	blx	r4
	}
}
10009122:	bd10      	pop	{r4, pc}
10009124:	10019fb4 	.word	0x10019fb4
10009128:	1000db39 	.word	0x1000db39

1000912c <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
1000912c:	b510      	push	{r4, lr}
1000912e:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
10009130:	ac01      	add	r4, sp, #4
10009132:	0020      	movs	r0, r4
10009134:	4b0a      	ldr	r3, [pc, #40]	; (10009160 <sms_imu_configure_gpio+0x34>)
10009136:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009138:	2300      	movs	r3, #0
1000913a:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000913c:	3302      	adds	r3, #2
1000913e:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
10009140:	3b01      	subs	r3, #1
10009142:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10009144:	0021      	movs	r1, r4
10009146:	201e      	movs	r0, #30
10009148:	4b06      	ldr	r3, [pc, #24]	; (10009164 <sms_imu_configure_gpio+0x38>)
1000914a:	4798      	blx	r3
1000914c:	2800      	cmp	r0, #0
1000914e:	d005      	beq.n	1000915c <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009150:	4805      	ldr	r0, [pc, #20]	; (10009168 <sms_imu_configure_gpio+0x3c>)
10009152:	4b06      	ldr	r3, [pc, #24]	; (1000916c <sms_imu_configure_gpio+0x40>)
10009154:	4798      	blx	r3
10009156:	4806      	ldr	r0, [pc, #24]	; (10009170 <sms_imu_configure_gpio+0x44>)
10009158:	4b06      	ldr	r3, [pc, #24]	; (10009174 <sms_imu_configure_gpio+0x48>)
1000915a:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
1000915c:	b002      	add	sp, #8
1000915e:	bd10      	pop	{r4, pc}
10009160:	1000a905 	.word	0x1000a905
10009164:	1000a915 	.word	0x1000a915
10009168:	10016878 	.word	0x10016878
1000916c:	10015939 	.word	0x10015939
10009170:	10016ec0 	.word	0x10016ec0
10009174:	10015819 	.word	0x10015819

10009178 <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
10009178:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_MPU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
1000917a:	2202      	movs	r2, #2
1000917c:	4902      	ldr	r1, [pc, #8]	; (10009188 <sms_imu_register_callbacks+0x10>)
1000917e:	201e      	movs	r0, #30
10009180:	4b02      	ldr	r3, [pc, #8]	; (1000918c <sms_imu_register_callbacks+0x14>)
10009182:	4798      	blx	r3
}
10009184:	bd10      	pop	{r4, pc}
10009186:	46c0      	nop			; (mov r8, r8)
10009188:	10009105 	.word	0x10009105
1000918c:	1000acf5 	.word	0x1000acf5

10009190 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
10009190:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009192:	201e      	movs	r0, #30
10009194:	4b03      	ldr	r3, [pc, #12]	; (100091a4 <sms_imu_enable_callback+0x14>)
10009196:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
10009198:	2101      	movs	r1, #1
1000919a:	2380      	movs	r3, #128	; 0x80
1000919c:	4a02      	ldr	r2, [pc, #8]	; (100091a8 <sms_imu_enable_callback+0x18>)
1000919e:	54d1      	strb	r1, [r2, r3]
}
100091a0:	bd10      	pop	{r4, pc}
100091a2:	46c0      	nop			; (mov r8, r8)
100091a4:	1000adc5 	.word	0x1000adc5
100091a8:	10019fb4 	.word	0x10019fb4

100091ac <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
100091ac:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
100091ae:	201e      	movs	r0, #30
100091b0:	4b03      	ldr	r3, [pc, #12]	; (100091c0 <sms_imu_disable_callback+0x14>)
100091b2:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
100091b4:	2100      	movs	r1, #0
100091b6:	2380      	movs	r3, #128	; 0x80
100091b8:	4a02      	ldr	r2, [pc, #8]	; (100091c4 <sms_imu_disable_callback+0x18>)
100091ba:	54d1      	strb	r1, [r2, r3]
}
100091bc:	bd10      	pop	{r4, pc}
100091be:	46c0      	nop			; (mov r8, r8)
100091c0:	1000ae21 	.word	0x1000ae21
100091c4:	10019fb4 	.word	0x10019fb4

100091c8 <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
100091c8:	b510      	push	{r4, lr}
100091ca:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
100091cc:	466b      	mov	r3, sp
100091ce:	1dda      	adds	r2, r3, #7
100091d0:	2300      	movs	r3, #0
100091d2:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
100091d4:	4c0e      	ldr	r4, [pc, #56]	; (10009210 <sms_imu_define_services+0x48>)
100091d6:	0021      	movs	r1, r4
100091d8:	2002      	movs	r0, #2
100091da:	4b0e      	ldr	r3, [pc, #56]	; (10009214 <sms_imu_define_services+0x4c>)
100091dc:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
100091de:	0020      	movs	r0, r4
100091e0:	4b0d      	ldr	r3, [pc, #52]	; (10009218 <sms_imu_define_services+0x50>)
100091e2:	4798      	blx	r3
100091e4:	1e04      	subs	r4, r0, #0
100091e6:	d007      	beq.n	100091f8 <sms_imu_define_services+0x30>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
100091e8:	480c      	ldr	r0, [pc, #48]	; (1000921c <sms_imu_define_services+0x54>)
100091ea:	4b0d      	ldr	r3, [pc, #52]	; (10009220 <sms_imu_define_services+0x58>)
100091ec:	4798      	blx	r3
100091ee:	0021      	movs	r1, r4
100091f0:	480c      	ldr	r0, [pc, #48]	; (10009224 <sms_imu_define_services+0x5c>)
100091f2:	4b0d      	ldr	r3, [pc, #52]	; (10009228 <sms_imu_define_services+0x60>)
100091f4:	4798      	blx	r3
100091f6:	e008      	b.n	1000920a <sms_imu_define_services+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
100091f8:	4808      	ldr	r0, [pc, #32]	; (1000921c <sms_imu_define_services+0x54>)
100091fa:	4b09      	ldr	r3, [pc, #36]	; (10009220 <sms_imu_define_services+0x58>)
100091fc:	4798      	blx	r3
100091fe:	2396      	movs	r3, #150	; 0x96
10009200:	4a0a      	ldr	r2, [pc, #40]	; (1000922c <sms_imu_define_services+0x64>)
10009202:	5ad1      	ldrh	r1, [r2, r3]
10009204:	480a      	ldr	r0, [pc, #40]	; (10009230 <sms_imu_define_services+0x68>)
10009206:	4b08      	ldr	r3, [pc, #32]	; (10009228 <sms_imu_define_services+0x60>)
10009208:	4798      	blx	r3
	}
}
1000920a:	b002      	add	sp, #8
1000920c:	bd10      	pop	{r4, pc}
1000920e:	46c0      	nop			; (mov r8, r8)
10009210:	1001a038 	.word	0x1001a038
10009214:	10008a3d 	.word	0x10008a3d
10009218:	10008a19 	.word	0x10008a19
1000921c:	10016878 	.word	0x10016878
10009220:	10015939 	.word	0x10015939
10009224:	10016f00 	.word	0x10016f00
10009228:	10015819 	.word	0x10015819
1000922c:	10019fb4 	.word	0x10019fb4
10009230:	10016f40 	.word	0x10016f40

10009234 <writeByte>:
}


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10009234:	b510      	push	{r4, lr}
10009236:	b082      	sub	sp, #8
10009238:	466b      	mov	r3, sp
1000923a:	3307      	adds	r3, #7
1000923c:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
1000923e:	2201      	movs	r2, #1
10009240:	4c01      	ldr	r4, [pc, #4]	; (10009248 <writeByte+0x14>)
10009242:	47a0      	blx	r4
}
10009244:	b002      	add	sp, #8
10009246:	bd10      	pop	{r4, pc}
10009248:	1000900d 	.word	0x1000900d

1000924c <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
1000924c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000924e:	465f      	mov	r7, fp
10009250:	4656      	mov	r6, sl
10009252:	464d      	mov	r5, r9
10009254:	4644      	mov	r4, r8
10009256:	b4f0      	push	{r4, r5, r6, r7}
10009258:	b08f      	sub	sp, #60	; 0x3c
1000925a:	9003      	str	r0, [sp, #12]
1000925c:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
1000925e:	2280      	movs	r2, #128	; 0x80
10009260:	216b      	movs	r1, #107	; 0x6b
10009262:	2069      	movs	r0, #105	; 0x69
10009264:	4ccd      	ldr	r4, [pc, #820]	; (1000959c <sms_imu_mpu_calibrate+0x350>)
10009266:	47a0      	blx	r4
	delay_ms(100);
10009268:	2064      	movs	r0, #100	; 0x64
1000926a:	4dcd      	ldr	r5, [pc, #820]	; (100095a0 <sms_imu_mpu_calibrate+0x354>)
1000926c:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
1000926e:	2201      	movs	r2, #1
10009270:	216b      	movs	r1, #107	; 0x6b
10009272:	2069      	movs	r0, #105	; 0x69
10009274:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009276:	2200      	movs	r2, #0
10009278:	216c      	movs	r1, #108	; 0x6c
1000927a:	2069      	movs	r0, #105	; 0x69
1000927c:	47a0      	blx	r4
	delay_ms(200);
1000927e:	20c8      	movs	r0, #200	; 0xc8
10009280:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009282:	2200      	movs	r2, #0
10009284:	2138      	movs	r1, #56	; 0x38
10009286:	2069      	movs	r0, #105	; 0x69
10009288:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
1000928a:	2200      	movs	r2, #0
1000928c:	2123      	movs	r1, #35	; 0x23
1000928e:	2069      	movs	r0, #105	; 0x69
10009290:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009292:	2200      	movs	r2, #0
10009294:	216b      	movs	r1, #107	; 0x6b
10009296:	2069      	movs	r0, #105	; 0x69
10009298:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
1000929a:	2200      	movs	r2, #0
1000929c:	2124      	movs	r1, #36	; 0x24
1000929e:	2069      	movs	r0, #105	; 0x69
100092a0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
100092a2:	2200      	movs	r2, #0
100092a4:	216a      	movs	r1, #106	; 0x6a
100092a6:	2069      	movs	r0, #105	; 0x69
100092a8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
100092aa:	220c      	movs	r2, #12
100092ac:	216a      	movs	r1, #106	; 0x6a
100092ae:	2069      	movs	r0, #105	; 0x69
100092b0:	47a0      	blx	r4
	delay_ms(15);
100092b2:	200f      	movs	r0, #15
100092b4:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
100092b6:	2201      	movs	r2, #1
100092b8:	211a      	movs	r1, #26
100092ba:	2069      	movs	r0, #105	; 0x69
100092bc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
100092be:	2200      	movs	r2, #0
100092c0:	2119      	movs	r1, #25
100092c2:	2069      	movs	r0, #105	; 0x69
100092c4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
100092c6:	2200      	movs	r2, #0
100092c8:	211b      	movs	r1, #27
100092ca:	2069      	movs	r0, #105	; 0x69
100092cc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
100092ce:	2200      	movs	r2, #0
100092d0:	211c      	movs	r1, #28
100092d2:	2069      	movs	r0, #105	; 0x69
100092d4:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
100092d6:	2240      	movs	r2, #64	; 0x40
100092d8:	216a      	movs	r1, #106	; 0x6a
100092da:	2069      	movs	r0, #105	; 0x69
100092dc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
100092de:	2278      	movs	r2, #120	; 0x78
100092e0:	2123      	movs	r1, #35	; 0x23
100092e2:	2069      	movs	r0, #105	; 0x69
100092e4:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
100092e6:	2028      	movs	r0, #40	; 0x28
100092e8:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
100092ea:	2200      	movs	r2, #0
100092ec:	2123      	movs	r1, #35	; 0x23
100092ee:	2069      	movs	r0, #105	; 0x69
100092f0:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100092f2:	ac0b      	add	r4, sp, #44	; 0x2c
100092f4:	0023      	movs	r3, r4
100092f6:	2202      	movs	r2, #2
100092f8:	2172      	movs	r1, #114	; 0x72
100092fa:	2069      	movs	r0, #105	; 0x69
100092fc:	4da9      	ldr	r5, [pc, #676]	; (100095a4 <sms_imu_mpu_calibrate+0x358>)
100092fe:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009300:	7820      	ldrb	r0, [r4, #0]
10009302:	0200      	lsls	r0, r0, #8
10009304:	7863      	ldrb	r3, [r4, #1]
10009306:	4318      	orrs	r0, r3
10009308:	210c      	movs	r1, #12
1000930a:	4ba7      	ldr	r3, [pc, #668]	; (100095a8 <sms_imu_mpu_calibrate+0x35c>)
1000930c:	4798      	blx	r3
1000930e:	b283      	uxth	r3, r0
10009310:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
10009312:	2b00      	cmp	r3, #0
10009314:	d042      	beq.n	1000939c <sms_imu_mpu_calibrate+0x150>
10009316:	2300      	movs	r3, #0
10009318:	4698      	mov	r8, r3
1000931a:	2700      	movs	r7, #0
1000931c:	469b      	mov	fp, r3
1000931e:	469a      	mov	sl, r3
10009320:	4699      	mov	r9, r3
10009322:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009324:	ac0b      	add	r4, sp, #44	; 0x2c
10009326:	9301      	str	r3, [sp, #4]
10009328:	0023      	movs	r3, r4
1000932a:	220c      	movs	r2, #12
1000932c:	2174      	movs	r1, #116	; 0x74
1000932e:	2069      	movs	r0, #105	; 0x69
10009330:	4e9c      	ldr	r6, [pc, #624]	; (100095a4 <sms_imu_mpu_calibrate+0x358>)
10009332:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10009334:	7823      	ldrb	r3, [r4, #0]
10009336:	021b      	lsls	r3, r3, #8
10009338:	7862      	ldrb	r2, [r4, #1]
1000933a:	4313      	orrs	r3, r2
1000933c:	b21b      	sxth	r3, r3
1000933e:	9a01      	ldr	r2, [sp, #4]
10009340:	4694      	mov	ip, r2
10009342:	449c      	add	ip, r3
10009344:	4663      	mov	r3, ip
10009346:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009348:	78a3      	ldrb	r3, [r4, #2]
1000934a:	021b      	lsls	r3, r3, #8
1000934c:	78e2      	ldrb	r2, [r4, #3]
1000934e:	4313      	orrs	r3, r2
10009350:	b21b      	sxth	r3, r3
10009352:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10009354:	7923      	ldrb	r3, [r4, #4]
10009356:	021b      	lsls	r3, r3, #8
10009358:	7962      	ldrb	r2, [r4, #5]
1000935a:	4313      	orrs	r3, r2
1000935c:	b21b      	sxth	r3, r3
1000935e:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009360:	79a3      	ldrb	r3, [r4, #6]
10009362:	021b      	lsls	r3, r3, #8
10009364:	79e2      	ldrb	r2, [r4, #7]
10009366:	4313      	orrs	r3, r2
10009368:	b21b      	sxth	r3, r3
1000936a:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
1000936c:	7a23      	ldrb	r3, [r4, #8]
1000936e:	021b      	lsls	r3, r3, #8
10009370:	7a62      	ldrb	r2, [r4, #9]
10009372:	4313      	orrs	r3, r2
10009374:	b21b      	sxth	r3, r3
10009376:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009378:	7aa3      	ldrb	r3, [r4, #10]
1000937a:	021b      	lsls	r3, r3, #8
1000937c:	7ae2      	ldrb	r2, [r4, #11]
1000937e:	4313      	orrs	r3, r2
10009380:	b21b      	sxth	r3, r3
10009382:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009384:	3501      	adds	r5, #1
10009386:	b2ad      	uxth	r5, r5
10009388:	9b02      	ldr	r3, [sp, #8]
1000938a:	42ab      	cmp	r3, r5
1000938c:	d1cc      	bne.n	10009328 <sms_imu_mpu_calibrate+0xdc>
1000938e:	4653      	mov	r3, sl
10009390:	46ba      	mov	sl, r7
10009392:	465a      	mov	r2, fp
10009394:	46e3      	mov	fp, ip
10009396:	0016      	movs	r6, r2
10009398:	001f      	movs	r7, r3
1000939a:	e006      	b.n	100093aa <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
1000939c:	2300      	movs	r3, #0
1000939e:	4698      	mov	r8, r3
100093a0:	2700      	movs	r7, #0
100093a2:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
100093a4:	469b      	mov	fp, r3
100093a6:	469a      	mov	sl, r3
100093a8:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
100093aa:	4c80      	ldr	r4, [pc, #512]	; (100095ac <sms_imu_mpu_calibrate+0x360>)
100093ac:	9902      	ldr	r1, [sp, #8]
100093ae:	4658      	mov	r0, fp
100093b0:	47a0      	blx	r4
100093b2:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
100093b4:	9b02      	ldr	r3, [sp, #8]
100093b6:	469b      	mov	fp, r3
100093b8:	0019      	movs	r1, r3
100093ba:	4650      	mov	r0, sl
100093bc:	47a0      	blx	r4
100093be:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
100093c0:	4659      	mov	r1, fp
100093c2:	4648      	mov	r0, r9
100093c4:	47a0      	blx	r4
100093c6:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
100093c8:	4659      	mov	r1, fp
100093ca:	4640      	mov	r0, r8
100093cc:	47a0      	blx	r4
100093ce:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
100093d0:	4659      	mov	r1, fp
100093d2:	0038      	movs	r0, r7
100093d4:	47a0      	blx	r4
100093d6:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
100093d8:	4659      	mov	r1, fp
100093da:	0030      	movs	r0, r6
100093dc:	47a0      	blx	r4
100093de:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
100093e0:	464b      	mov	r3, r9
100093e2:	2b00      	cmp	r3, #0
100093e4:	dd03      	ble.n	100093ee <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
100093e6:	4b72      	ldr	r3, [pc, #456]	; (100095b0 <sms_imu_mpu_calibrate+0x364>)
100093e8:	469c      	mov	ip, r3
100093ea:	44e1      	add	r9, ip
100093ec:	e003      	b.n	100093f6 <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
100093ee:	2380      	movs	r3, #128	; 0x80
100093f0:	01db      	lsls	r3, r3, #7
100093f2:	469c      	mov	ip, r3
100093f4:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
100093f6:	9b01      	ldr	r3, [sp, #4]
100093f8:	4259      	negs	r1, r3
100093fa:	17ca      	asrs	r2, r1, #31
100093fc:	2303      	movs	r3, #3
100093fe:	401a      	ands	r2, r3
10009400:	1852      	adds	r2, r2, r1
10009402:	1091      	asrs	r1, r2, #2
10009404:	1292      	asrs	r2, r2, #10
10009406:	b2d2      	uxtb	r2, r2
10009408:	ac0b      	add	r4, sp, #44	; 0x2c
1000940a:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
1000940c:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
1000940e:	9902      	ldr	r1, [sp, #8]
10009410:	4248      	negs	r0, r1
10009412:	17c1      	asrs	r1, r0, #31
10009414:	4019      	ands	r1, r3
10009416:	1809      	adds	r1, r1, r0
10009418:	1088      	asrs	r0, r1, #2
1000941a:	1289      	asrs	r1, r1, #10
1000941c:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
1000941e:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10009420:	9e04      	ldr	r6, [sp, #16]
10009422:	4271      	negs	r1, r6
10009424:	17c8      	asrs	r0, r1, #31
10009426:	4003      	ands	r3, r0
10009428:	185b      	adds	r3, r3, r1
1000942a:	1099      	asrs	r1, r3, #2
1000942c:	129b      	asrs	r3, r3, #10
1000942e:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10009430:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10009432:	2113      	movs	r1, #19
10009434:	2069      	movs	r0, #105	; 0x69
10009436:	4e59      	ldr	r6, [pc, #356]	; (1000959c <sms_imu_mpu_calibrate+0x350>)
10009438:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
1000943a:	7862      	ldrb	r2, [r4, #1]
1000943c:	2114      	movs	r1, #20
1000943e:	2069      	movs	r0, #105	; 0x69
10009440:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009442:	78a2      	ldrb	r2, [r4, #2]
10009444:	2115      	movs	r1, #21
10009446:	2069      	movs	r0, #105	; 0x69
10009448:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
1000944a:	78e2      	ldrb	r2, [r4, #3]
1000944c:	2116      	movs	r1, #22
1000944e:	2069      	movs	r0, #105	; 0x69
10009450:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009452:	7922      	ldrb	r2, [r4, #4]
10009454:	2117      	movs	r1, #23
10009456:	2069      	movs	r0, #105	; 0x69
10009458:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
1000945a:	7962      	ldrb	r2, [r4, #5]
1000945c:	2118      	movs	r1, #24
1000945e:	2069      	movs	r0, #105	; 0x69
10009460:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10009462:	4f54      	ldr	r7, [pc, #336]	; (100095b4 <sms_imu_mpu_calibrate+0x368>)
10009464:	9801      	ldr	r0, [sp, #4]
10009466:	47b8      	blx	r7
10009468:	4e53      	ldr	r6, [pc, #332]	; (100095b8 <sms_imu_mpu_calibrate+0x36c>)
1000946a:	4954      	ldr	r1, [pc, #336]	; (100095bc <sms_imu_mpu_calibrate+0x370>)
1000946c:	47b0      	blx	r6
1000946e:	9b03      	ldr	r3, [sp, #12]
10009470:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009472:	9802      	ldr	r0, [sp, #8]
10009474:	47b8      	blx	r7
10009476:	4951      	ldr	r1, [pc, #324]	; (100095bc <sms_imu_mpu_calibrate+0x370>)
10009478:	47b0      	blx	r6
1000947a:	9b03      	ldr	r3, [sp, #12]
1000947c:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
1000947e:	9804      	ldr	r0, [sp, #16]
10009480:	47b8      	blx	r7
10009482:	494e      	ldr	r1, [pc, #312]	; (100095bc <sms_imu_mpu_calibrate+0x370>)
10009484:	47b0      	blx	r6
10009486:	9b03      	ldr	r3, [sp, #12]
10009488:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000948a:	0023      	movs	r3, r4
1000948c:	2202      	movs	r2, #2
1000948e:	2177      	movs	r1, #119	; 0x77
10009490:	2069      	movs	r0, #105	; 0x69
10009492:	4e44      	ldr	r6, [pc, #272]	; (100095a4 <sms_imu_mpu_calibrate+0x358>)
10009494:	46b0      	mov	r8, r6
10009496:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009498:	7827      	ldrb	r7, [r4, #0]
1000949a:	023f      	lsls	r7, r7, #8
1000949c:	7863      	ldrb	r3, [r4, #1]
1000949e:	431f      	orrs	r7, r3
100094a0:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100094a2:	0023      	movs	r3, r4
100094a4:	2202      	movs	r2, #2
100094a6:	217a      	movs	r1, #122	; 0x7a
100094a8:	2069      	movs	r0, #105	; 0x69
100094aa:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100094ac:	7826      	ldrb	r6, [r4, #0]
100094ae:	0236      	lsls	r6, r6, #8
100094b0:	7863      	ldrb	r3, [r4, #1]
100094b2:	431e      	orrs	r6, r3
100094b4:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100094b6:	0023      	movs	r3, r4
100094b8:	2202      	movs	r2, #2
100094ba:	217d      	movs	r1, #125	; 0x7d
100094bc:	2069      	movs	r0, #105	; 0x69
100094be:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100094c0:	7823      	ldrb	r3, [r4, #0]
100094c2:	021b      	lsls	r3, r3, #8
100094c4:	7861      	ldrb	r1, [r4, #1]
100094c6:	4319      	orrs	r1, r3
100094c8:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
100094ca:	ab07      	add	r3, sp, #28
100094cc:	2200      	movs	r2, #0
100094ce:	701a      	strb	r2, [r3, #0]
100094d0:	705a      	strb	r2, [r3, #1]
100094d2:	709a      	strb	r2, [r3, #2]
100094d4:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
100094d6:	2401      	movs	r4, #1
100094d8:	009a      	lsls	r2, r3, #2
100094da:	a808      	add	r0, sp, #32
100094dc:	5812      	ldr	r2, [r2, r0]
100094de:	4222      	tst	r2, r4
100094e0:	d001      	beq.n	100094e6 <sms_imu_mpu_calibrate+0x29a>
100094e2:	aa07      	add	r2, sp, #28
100094e4:	549c      	strb	r4, [r3, r2]
100094e6:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
100094e8:	2b03      	cmp	r3, #3
100094ea:	d1f5      	bne.n	100094d8 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
100094ec:	17ea      	asrs	r2, r5, #31
100094ee:	3304      	adds	r3, #4
100094f0:	401a      	ands	r2, r3
100094f2:	1952      	adds	r2, r2, r5
100094f4:	10d2      	asrs	r2, r2, #3
100094f6:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
100094f8:	4652      	mov	r2, sl
100094fa:	17d0      	asrs	r0, r2, #31
100094fc:	4018      	ands	r0, r3
100094fe:	4450      	add	r0, sl
10009500:	10c0      	asrs	r0, r0, #3
10009502:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009504:	464a      	mov	r2, r9
10009506:	17d2      	asrs	r2, r2, #31
10009508:	4013      	ands	r3, r2
1000950a:	444b      	add	r3, r9
1000950c:	10da      	asrs	r2, r3, #3
1000950e:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009510:	123a      	asrs	r2, r7, #8
10009512:	b2d2      	uxtb	r2, r2
10009514:	ac0b      	add	r4, sp, #44	; 0x2c
10009516:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009518:	a907      	add	r1, sp, #28
1000951a:	7808      	ldrb	r0, [r1, #0]
1000951c:	4307      	orrs	r7, r0
1000951e:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009520:	1230      	asrs	r0, r6, #8
10009522:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009524:	7848      	ldrb	r0, [r1, #1]
10009526:	4306      	orrs	r6, r0
10009528:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
1000952a:	1218      	asrs	r0, r3, #8
1000952c:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000952e:	7889      	ldrb	r1, [r1, #2]
10009530:	430b      	orrs	r3, r1
10009532:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009534:	2177      	movs	r1, #119	; 0x77
10009536:	2069      	movs	r0, #105	; 0x69
10009538:	4e18      	ldr	r6, [pc, #96]	; (1000959c <sms_imu_mpu_calibrate+0x350>)
1000953a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
1000953c:	7862      	ldrb	r2, [r4, #1]
1000953e:	2178      	movs	r1, #120	; 0x78
10009540:	2069      	movs	r0, #105	; 0x69
10009542:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009544:	78a2      	ldrb	r2, [r4, #2]
10009546:	217a      	movs	r1, #122	; 0x7a
10009548:	2069      	movs	r0, #105	; 0x69
1000954a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
1000954c:	78e2      	ldrb	r2, [r4, #3]
1000954e:	217b      	movs	r1, #123	; 0x7b
10009550:	2069      	movs	r0, #105	; 0x69
10009552:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009554:	7922      	ldrb	r2, [r4, #4]
10009556:	217d      	movs	r1, #125	; 0x7d
10009558:	2069      	movs	r0, #105	; 0x69
1000955a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
1000955c:	7962      	ldrb	r2, [r4, #5]
1000955e:	217e      	movs	r1, #126	; 0x7e
10009560:	2069      	movs	r0, #105	; 0x69
10009562:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009564:	4e13      	ldr	r6, [pc, #76]	; (100095b4 <sms_imu_mpu_calibrate+0x368>)
10009566:	0028      	movs	r0, r5
10009568:	47b0      	blx	r6
1000956a:	4c15      	ldr	r4, [pc, #84]	; (100095c0 <sms_imu_mpu_calibrate+0x374>)
1000956c:	21e2      	movs	r1, #226	; 0xe2
1000956e:	0589      	lsls	r1, r1, #22
10009570:	47a0      	blx	r4
10009572:	9d05      	ldr	r5, [sp, #20]
10009574:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009576:	4650      	mov	r0, sl
10009578:	47b0      	blx	r6
1000957a:	21e2      	movs	r1, #226	; 0xe2
1000957c:	0589      	lsls	r1, r1, #22
1000957e:	47a0      	blx	r4
10009580:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009582:	4648      	mov	r0, r9
10009584:	47b0      	blx	r6
10009586:	21e2      	movs	r1, #226	; 0xe2
10009588:	0589      	lsls	r1, r1, #22
1000958a:	47a0      	blx	r4
1000958c:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
1000958e:	b00f      	add	sp, #60	; 0x3c
10009590:	bc3c      	pop	{r2, r3, r4, r5}
10009592:	4690      	mov	r8, r2
10009594:	4699      	mov	r9, r3
10009596:	46a2      	mov	sl, r4
10009598:	46ab      	mov	fp, r5
1000959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000959c:	10009235 	.word	0x10009235
100095a0:	1000a289 	.word	0x1000a289
100095a4:	10009069 	.word	0x10009069
100095a8:	100129a5 	.word	0x100129a5
100095ac:	10012ab9 	.word	0x10012ab9
100095b0:	ffffc000 	.word	0xffffc000
100095b4:	10013751 	.word	0x10013751
100095b8:	10012e45 	.word	0x10012e45
100095bc:	43030000 	.word	0x43030000
100095c0:	100131d9 	.word	0x100131d9

100095c4 <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
100095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100095c6:	465f      	mov	r7, fp
100095c8:	4656      	mov	r6, sl
100095ca:	464d      	mov	r5, r9
100095cc:	4644      	mov	r4, r8
100095ce:	b4f0      	push	{r4, r5, r6, r7}
100095d0:	b083      	sub	sp, #12
100095d2:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
100095d4:	4c36      	ldr	r4, [pc, #216]	; (100096b0 <sms_imu_comp_initialize+0xec>)
100095d6:	2301      	movs	r3, #1
100095d8:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
100095da:	3301      	adds	r3, #1
100095dc:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
100095de:	4b35      	ldr	r3, [pc, #212]	; (100096b4 <sms_imu_comp_initialize+0xf0>)
100095e0:	6363      	str	r3, [r4, #52]	; 0x34
	imu_device.config.mag_bias[1] = 120.0;
100095e2:	4b35      	ldr	r3, [pc, #212]	; (100096b8 <sms_imu_comp_initialize+0xf4>)
100095e4:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[2] = 125.0;
100095e6:	4b35      	ldr	r3, [pc, #212]	; (100096bc <sms_imu_comp_initialize+0xf8>)
100095e8:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
100095ea:	2200      	movs	r2, #0
100095ec:	210a      	movs	r1, #10
100095ee:	200c      	movs	r0, #12
100095f0:	4e33      	ldr	r6, [pc, #204]	; (100096c0 <sms_imu_comp_initialize+0xfc>)
100095f2:	47b0      	blx	r6
	delay_ms(10);
100095f4:	200a      	movs	r0, #10
100095f6:	4b33      	ldr	r3, [pc, #204]	; (100096c4 <sms_imu_comp_initialize+0x100>)
100095f8:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
100095fa:	220f      	movs	r2, #15
100095fc:	210a      	movs	r1, #10
100095fe:	200c      	movs	r0, #12
10009600:	47b0      	blx	r6
	delay_ms(10);
10009602:	200a      	movs	r0, #10
10009604:	4b2f      	ldr	r3, [pc, #188]	; (100096c4 <sms_imu_comp_initialize+0x100>)
10009606:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009608:	af01      	add	r7, sp, #4
1000960a:	003b      	movs	r3, r7
1000960c:	2203      	movs	r2, #3
1000960e:	2110      	movs	r1, #16
10009610:	200c      	movs	r0, #12
10009612:	4d2d      	ldr	r5, [pc, #180]	; (100096c8 <sms_imu_comp_initialize+0x104>)
10009614:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009616:	7838      	ldrb	r0, [r7, #0]
10009618:	3880      	subs	r0, #128	; 0x80
1000961a:	4b2c      	ldr	r3, [pc, #176]	; (100096cc <sms_imu_comp_initialize+0x108>)
1000961c:	469b      	mov	fp, r3
1000961e:	4798      	blx	r3
10009620:	4b2b      	ldr	r3, [pc, #172]	; (100096d0 <sms_imu_comp_initialize+0x10c>)
10009622:	469a      	mov	sl, r3
10009624:	4798      	blx	r3
10009626:	2200      	movs	r2, #0
10009628:	4b2a      	ldr	r3, [pc, #168]	; (100096d4 <sms_imu_comp_initialize+0x110>)
1000962a:	4d2b      	ldr	r5, [pc, #172]	; (100096d8 <sms_imu_comp_initialize+0x114>)
1000962c:	47a8      	blx	r5
1000962e:	2200      	movs	r2, #0
10009630:	4b2a      	ldr	r3, [pc, #168]	; (100096dc <sms_imu_comp_initialize+0x118>)
10009632:	4d2b      	ldr	r5, [pc, #172]	; (100096e0 <sms_imu_comp_initialize+0x11c>)
10009634:	47a8      	blx	r5
10009636:	4b2b      	ldr	r3, [pc, #172]	; (100096e4 <sms_imu_comp_initialize+0x120>)
10009638:	4699      	mov	r9, r3
1000963a:	4798      	blx	r3
1000963c:	4643      	mov	r3, r8
1000963e:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009640:	7878      	ldrb	r0, [r7, #1]
10009642:	3880      	subs	r0, #128	; 0x80
10009644:	47d8      	blx	fp
10009646:	47d0      	blx	sl
10009648:	2200      	movs	r2, #0
1000964a:	4b22      	ldr	r3, [pc, #136]	; (100096d4 <sms_imu_comp_initialize+0x110>)
1000964c:	4d22      	ldr	r5, [pc, #136]	; (100096d8 <sms_imu_comp_initialize+0x114>)
1000964e:	47a8      	blx	r5
10009650:	2200      	movs	r2, #0
10009652:	4b22      	ldr	r3, [pc, #136]	; (100096dc <sms_imu_comp_initialize+0x118>)
10009654:	4d22      	ldr	r5, [pc, #136]	; (100096e0 <sms_imu_comp_initialize+0x11c>)
10009656:	47a8      	blx	r5
10009658:	47c8      	blx	r9
1000965a:	4643      	mov	r3, r8
1000965c:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
1000965e:	78b8      	ldrb	r0, [r7, #2]
10009660:	3880      	subs	r0, #128	; 0x80
10009662:	47d8      	blx	fp
10009664:	47d0      	blx	sl
10009666:	2200      	movs	r2, #0
10009668:	4b1a      	ldr	r3, [pc, #104]	; (100096d4 <sms_imu_comp_initialize+0x110>)
1000966a:	4d1b      	ldr	r5, [pc, #108]	; (100096d8 <sms_imu_comp_initialize+0x114>)
1000966c:	47a8      	blx	r5
1000966e:	2200      	movs	r2, #0
10009670:	4b1a      	ldr	r3, [pc, #104]	; (100096dc <sms_imu_comp_initialize+0x118>)
10009672:	4d1b      	ldr	r5, [pc, #108]	; (100096e0 <sms_imu_comp_initialize+0x11c>)
10009674:	47a8      	blx	r5
10009676:	47c8      	blx	r9
10009678:	4643      	mov	r3, r8
1000967a:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
1000967c:	2200      	movs	r2, #0
1000967e:	210a      	movs	r1, #10
10009680:	200c      	movs	r0, #12
10009682:	47b0      	blx	r6
	delay_ms(10);
10009684:	200a      	movs	r0, #10
10009686:	4b0f      	ldr	r3, [pc, #60]	; (100096c4 <sms_imu_comp_initialize+0x100>)
10009688:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
1000968a:	78a2      	ldrb	r2, [r4, #2]
1000968c:	0112      	lsls	r2, r2, #4
1000968e:	78e3      	ldrb	r3, [r4, #3]
10009690:	431a      	orrs	r2, r3
10009692:	b2d2      	uxtb	r2, r2
10009694:	210a      	movs	r1, #10
10009696:	200c      	movs	r0, #12
10009698:	47b0      	blx	r6
	delay_ms(10);
1000969a:	200a      	movs	r0, #10
1000969c:	4b09      	ldr	r3, [pc, #36]	; (100096c4 <sms_imu_comp_initialize+0x100>)
1000969e:	4798      	blx	r3
}
100096a0:	b003      	add	sp, #12
100096a2:	bc3c      	pop	{r2, r3, r4, r5}
100096a4:	4690      	mov	r8, r2
100096a6:	4699      	mov	r9, r3
100096a8:	46a2      	mov	sl, r4
100096aa:	46ab      	mov	fp, r5
100096ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096ae:	46c0      	nop			; (mov r8, r8)
100096b0:	10019fb4 	.word	0x10019fb4
100096b4:	43eb0000 	.word	0x43eb0000
100096b8:	42f00000 	.word	0x42f00000
100096bc:	42fa0000 	.word	0x42fa0000
100096c0:	10009235 	.word	0x10009235
100096c4:	1000a289 	.word	0x1000a289
100096c8:	10009069 	.word	0x10009069
100096cc:	10013751 	.word	0x10013751
100096d0:	10015439 	.word	0x10015439
100096d4:	3f700000 	.word	0x3f700000
100096d8:	100146fd 	.word	0x100146fd
100096dc:	3ff00000 	.word	0x3ff00000
100096e0:	1001385d 	.word	0x1001385d
100096e4:	100154e1 	.word	0x100154e1

100096e8 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
100096e8:	b530      	push	{r4, r5, lr}
100096ea:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
100096ec:	ac01      	add	r4, sp, #4
100096ee:	0023      	movs	r3, r4
100096f0:	2201      	movs	r2, #1
100096f2:	4d02      	ldr	r5, [pc, #8]	; (100096fc <readByte+0x14>)
100096f4:	47a8      	blx	r5
	return data[0];
100096f6:	7820      	ldrb	r0, [r4, #0]
}
100096f8:	b003      	add	sp, #12
100096fa:	bd30      	pop	{r4, r5, pc}
100096fc:	10009069 	.word	0x10009069

10009700 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009700:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009702:	2100      	movs	r1, #0
10009704:	200c      	movs	r0, #12
10009706:	4b03      	ldr	r3, [pc, #12]	; (10009714 <sms_imu_comp_check+0x14>)
10009708:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
1000970a:	3848      	subs	r0, #72	; 0x48
1000970c:	1e43      	subs	r3, r0, #1
1000970e:	4198      	sbcs	r0, r3
10009710:	4240      	negs	r0, r0
}
10009712:	bd10      	pop	{r4, pc}
10009714:	100096e9 	.word	0x100096e9

10009718 <sms_imu_mpu_initialize>:


/* Initialization functions... */
/* MPU */
void sms_imu_mpu_initialize(void)
{
10009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	imu_device.config.a_scale = AFS_2G;
1000971a:	4f25      	ldr	r7, [pc, #148]	; (100097b0 <sms_imu_mpu_initialize+0x98>)
1000971c:	2300      	movs	r3, #0
1000971e:	703b      	strb	r3, [r7, #0]
	imu_device.config.g_scale = GFS_250DPS;
10009720:	707b      	strb	r3, [r7, #1]
	imu_device.config.ahrs = false;
10009722:	224c      	movs	r2, #76	; 0x4c
10009724:	54bb      	strb	r3, [r7, r2]

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009726:	2200      	movs	r2, #0
10009728:	216b      	movs	r1, #107	; 0x6b
1000972a:	2069      	movs	r0, #105	; 0x69
1000972c:	4c21      	ldr	r4, [pc, #132]	; (100097b4 <sms_imu_mpu_initialize+0x9c>)
1000972e:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
10009730:	2064      	movs	r0, #100	; 0x64
10009732:	4d21      	ldr	r5, [pc, #132]	; (100097b8 <sms_imu_mpu_initialize+0xa0>)
10009734:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009736:	2201      	movs	r2, #1
10009738:	216b      	movs	r1, #107	; 0x6b
1000973a:	2069      	movs	r0, #105	; 0x69
1000973c:	47a0      	blx	r4
	delay_ms(200);
1000973e:	20c8      	movs	r0, #200	; 0xc8
10009740:	47a8      	blx	r5
	// Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	 writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
10009742:	2203      	movs	r2, #3
10009744:	211a      	movs	r1, #26
10009746:	2069      	movs	r0, #105	; 0x69
10009748:	47a0      	blx	r4
	//writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
1000974a:	220a      	movs	r2, #10
1000974c:	2119      	movs	r1, #25
1000974e:	2069      	movs	r0, #105	; 0x69
10009750:	47a0      	blx	r4
	// // determined inset in CONFIG above
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
10009752:	211b      	movs	r1, #27
10009754:	2069      	movs	r0, #105	; 0x69
10009756:	4e19      	ldr	r6, [pc, #100]	; (100097bc <sms_imu_mpu_initialize+0xa4>)
10009758:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
1000975a:	787a      	ldrb	r2, [r7, #1]
1000975c:	00d2      	lsls	r2, r2, #3
1000975e:	231a      	movs	r3, #26
10009760:	4398      	bics	r0, r3
10009762:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009764:	b2d2      	uxtb	r2, r2
10009766:	211b      	movs	r1, #27
10009768:	2069      	movs	r0, #105	; 0x69
1000976a:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
1000976c:	211c      	movs	r1, #28
1000976e:	2069      	movs	r0, #105	; 0x69
10009770:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009772:	783a      	ldrb	r2, [r7, #0]
10009774:	00d2      	lsls	r2, r2, #3
10009776:	2318      	movs	r3, #24
10009778:	4398      	bics	r0, r3
1000977a:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
1000977c:	b2d2      	uxtb	r2, r2
1000977e:	211c      	movs	r1, #28
10009780:	2069      	movs	r0, #105	; 0x69
10009782:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009784:	211d      	movs	r1, #29
10009786:	2069      	movs	r0, #105	; 0x69
10009788:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
1000978a:	23f0      	movs	r3, #240	; 0xf0
1000978c:	0002      	movs	r2, r0
1000978e:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009790:	3bed      	subs	r3, #237	; 0xed
10009792:	431a      	orrs	r2, r3
10009794:	211d      	movs	r1, #29
10009796:	2069      	movs	r0, #105	; 0x69
10009798:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
1000979a:	2212      	movs	r2, #18
1000979c:	2137      	movs	r1, #55	; 0x37
1000979e:	2069      	movs	r0, #105	; 0x69
100097a0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
100097a2:	2201      	movs	r2, #1
100097a4:	2138      	movs	r1, #56	; 0x38
100097a6:	2069      	movs	r0, #105	; 0x69
100097a8:	47a0      	blx	r4
	delay_ms(100);
100097aa:	2064      	movs	r0, #100	; 0x64
100097ac:	47a8      	blx	r5
}
100097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100097b0:	10019fb4 	.word	0x10019fb4
100097b4:	10009235 	.word	0x10009235
100097b8:	1000a289 	.word	0x1000a289
100097bc:	100096e9 	.word	0x100096e9

100097c0 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
100097c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100097c2:	465f      	mov	r7, fp
100097c4:	4656      	mov	r6, sl
100097c6:	464d      	mov	r5, r9
100097c8:	4644      	mov	r4, r8
100097ca:	b4f0      	push	{r4, r5, r6, r7}
100097cc:	b09d      	sub	sp, #116	; 0x74
100097ce:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
100097d0:	2206      	movs	r2, #6
100097d2:	2100      	movs	r1, #0
100097d4:	a81a      	add	r0, sp, #104	; 0x68
100097d6:	4ce0      	ldr	r4, [pc, #896]	; (10009b58 <sms_imu_selftest+0x398>)
100097d8:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
100097da:	220c      	movs	r2, #12
100097dc:	2100      	movs	r1, #0
100097de:	a817      	add	r0, sp, #92	; 0x5c
100097e0:	47a0      	blx	r4
100097e2:	220c      	movs	r2, #12
100097e4:	2100      	movs	r1, #0
100097e6:	a814      	add	r0, sp, #80	; 0x50
100097e8:	47a0      	blx	r4
100097ea:	220c      	movs	r2, #12
100097ec:	2100      	movs	r1, #0
100097ee:	a811      	add	r0, sp, #68	; 0x44
100097f0:	47a0      	blx	r4
100097f2:	220c      	movs	r2, #12
100097f4:	2100      	movs	r1, #0
100097f6:	a80e      	add	r0, sp, #56	; 0x38
100097f8:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
100097fa:	2200      	movs	r2, #0
100097fc:	2119      	movs	r1, #25
100097fe:	2069      	movs	r0, #105	; 0x69
10009800:	4cd6      	ldr	r4, [pc, #856]	; (10009b5c <sms_imu_selftest+0x39c>)
10009802:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009804:	2202      	movs	r2, #2
10009806:	211a      	movs	r1, #26
10009808:	2069      	movs	r0, #105	; 0x69
1000980a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000980c:	2200      	movs	r2, #0
1000980e:	211b      	movs	r1, #27
10009810:	2069      	movs	r0, #105	; 0x69
10009812:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009814:	2202      	movs	r2, #2
10009816:	211d      	movs	r1, #29
10009818:	2069      	movs	r0, #105	; 0x69
1000981a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
1000981c:	2200      	movs	r2, #0
1000981e:	211c      	movs	r1, #28
10009820:	2069      	movs	r0, #105	; 0x69
10009822:	47a0      	blx	r4
10009824:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009826:	ac1a      	add	r4, sp, #104	; 0x68
10009828:	4ecd      	ldr	r6, [pc, #820]	; (10009b60 <sms_imu_selftest+0x3a0>)
1000982a:	0023      	movs	r3, r4
1000982c:	2206      	movs	r2, #6
1000982e:	213b      	movs	r1, #59	; 0x3b
10009830:	2069      	movs	r0, #105	; 0x69
10009832:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009834:	7823      	ldrb	r3, [r4, #0]
10009836:	021b      	lsls	r3, r3, #8
10009838:	7862      	ldrb	r2, [r4, #1]
1000983a:	4313      	orrs	r3, r2
1000983c:	b21b      	sxth	r3, r3
1000983e:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009840:	4694      	mov	ip, r2
10009842:	4463      	add	r3, ip
10009844:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009846:	78a3      	ldrb	r3, [r4, #2]
10009848:	021b      	lsls	r3, r3, #8
1000984a:	78e2      	ldrb	r2, [r4, #3]
1000984c:	4313      	orrs	r3, r2
1000984e:	b21b      	sxth	r3, r3
10009850:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009852:	9200      	str	r2, [sp, #0]
10009854:	4694      	mov	ip, r2
10009856:	4463      	add	r3, ip
10009858:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000985a:	7923      	ldrb	r3, [r4, #4]
1000985c:	021b      	lsls	r3, r3, #8
1000985e:	7962      	ldrb	r2, [r4, #5]
10009860:	4313      	orrs	r3, r2
10009862:	b21b      	sxth	r3, r3
10009864:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009866:	9200      	str	r2, [sp, #0]
10009868:	4694      	mov	ip, r2
1000986a:	4463      	add	r3, ip
1000986c:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000986e:	0023      	movs	r3, r4
10009870:	2206      	movs	r2, #6
10009872:	2143      	movs	r1, #67	; 0x43
10009874:	2069      	movs	r0, #105	; 0x69
10009876:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009878:	7823      	ldrb	r3, [r4, #0]
1000987a:	021b      	lsls	r3, r3, #8
1000987c:	7862      	ldrb	r2, [r4, #1]
1000987e:	4313      	orrs	r3, r2
10009880:	b21b      	sxth	r3, r3
10009882:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009884:	4694      	mov	ip, r2
10009886:	4463      	add	r3, ip
10009888:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000988a:	78a3      	ldrb	r3, [r4, #2]
1000988c:	021b      	lsls	r3, r3, #8
1000988e:	78e2      	ldrb	r2, [r4, #3]
10009890:	4313      	orrs	r3, r2
10009892:	b21b      	sxth	r3, r3
10009894:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009896:	9200      	str	r2, [sp, #0]
10009898:	4694      	mov	ip, r2
1000989a:	4463      	add	r3, ip
1000989c:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000989e:	7923      	ldrb	r3, [r4, #4]
100098a0:	021b      	lsls	r3, r3, #8
100098a2:	7962      	ldrb	r2, [r4, #5]
100098a4:	4313      	orrs	r3, r2
100098a6:	b21b      	sxth	r3, r3
100098a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
100098aa:	9200      	str	r2, [sp, #0]
100098ac:	4694      	mov	ip, r2
100098ae:	4463      	add	r3, ip
100098b0:	9319      	str	r3, [sp, #100]	; 0x64
100098b2:	3d01      	subs	r5, #1
100098b4:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
100098b6:	2d00      	cmp	r5, #0
100098b8:	d1b7      	bne.n	1000982a <sms_imu_selftest+0x6a>
100098ba:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
100098bc:	4ea9      	ldr	r6, [pc, #676]	; (10009b64 <sms_imu_selftest+0x3a4>)
100098be:	ad14      	add	r5, sp, #80	; 0x50
100098c0:	21c8      	movs	r1, #200	; 0xc8
100098c2:	5960      	ldr	r0, [r4, r5]
100098c4:	47b0      	blx	r6
100098c6:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
100098c8:	ad17      	add	r5, sp, #92	; 0x5c
100098ca:	21c8      	movs	r1, #200	; 0xc8
100098cc:	5960      	ldr	r0, [r4, r5]
100098ce:	47b0      	blx	r6
100098d0:	5160      	str	r0, [r4, r5]
100098d2:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
100098d4:	2c0c      	cmp	r4, #12
100098d6:	d1f2      	bne.n	100098be <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
100098d8:	22e0      	movs	r2, #224	; 0xe0
100098da:	211c      	movs	r1, #28
100098dc:	2069      	movs	r0, #105	; 0x69
100098de:	4c9f      	ldr	r4, [pc, #636]	; (10009b5c <sms_imu_selftest+0x39c>)
100098e0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
100098e2:	22e0      	movs	r2, #224	; 0xe0
100098e4:	211c      	movs	r1, #28
100098e6:	2069      	movs	r0, #105	; 0x69
100098e8:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100098ea:	2019      	movs	r0, #25
100098ec:	4b9e      	ldr	r3, [pc, #632]	; (10009b68 <sms_imu_selftest+0x3a8>)
100098ee:	4798      	blx	r3
100098f0:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098f2:	ac1a      	add	r4, sp, #104	; 0x68
100098f4:	4e9a      	ldr	r6, [pc, #616]	; (10009b60 <sms_imu_selftest+0x3a0>)
100098f6:	0023      	movs	r3, r4
100098f8:	2206      	movs	r2, #6
100098fa:	213b      	movs	r1, #59	; 0x3b
100098fc:	2069      	movs	r0, #105	; 0x69
100098fe:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009900:	7823      	ldrb	r3, [r4, #0]
10009902:	021b      	lsls	r3, r3, #8
10009904:	7862      	ldrb	r2, [r4, #1]
10009906:	4313      	orrs	r3, r2
10009908:	b21b      	sxth	r3, r3
1000990a:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000990c:	4694      	mov	ip, r2
1000990e:	4463      	add	r3, ip
10009910:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009912:	78a3      	ldrb	r3, [r4, #2]
10009914:	021b      	lsls	r3, r3, #8
10009916:	78e2      	ldrb	r2, [r4, #3]
10009918:	4313      	orrs	r3, r2
1000991a:	b21b      	sxth	r3, r3
1000991c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000991e:	9200      	str	r2, [sp, #0]
10009920:	4694      	mov	ip, r2
10009922:	4463      	add	r3, ip
10009924:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009926:	7923      	ldrb	r3, [r4, #4]
10009928:	021b      	lsls	r3, r3, #8
1000992a:	7962      	ldrb	r2, [r4, #5]
1000992c:	4313      	orrs	r3, r2
1000992e:	b21b      	sxth	r3, r3
10009930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009932:	9200      	str	r2, [sp, #0]
10009934:	4694      	mov	ip, r2
10009936:	4463      	add	r3, ip
10009938:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000993a:	0023      	movs	r3, r4
1000993c:	2206      	movs	r2, #6
1000993e:	2143      	movs	r1, #67	; 0x43
10009940:	2069      	movs	r0, #105	; 0x69
10009942:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009944:	7823      	ldrb	r3, [r4, #0]
10009946:	021b      	lsls	r3, r3, #8
10009948:	7862      	ldrb	r2, [r4, #1]
1000994a:	4313      	orrs	r3, r2
1000994c:	b21b      	sxth	r3, r3
1000994e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009950:	4694      	mov	ip, r2
10009952:	4463      	add	r3, ip
10009954:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009956:	78a3      	ldrb	r3, [r4, #2]
10009958:	021b      	lsls	r3, r3, #8
1000995a:	78e2      	ldrb	r2, [r4, #3]
1000995c:	4313      	orrs	r3, r2
1000995e:	b21b      	sxth	r3, r3
10009960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009962:	9200      	str	r2, [sp, #0]
10009964:	4694      	mov	ip, r2
10009966:	4463      	add	r3, ip
10009968:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000996a:	7923      	ldrb	r3, [r4, #4]
1000996c:	021b      	lsls	r3, r3, #8
1000996e:	7962      	ldrb	r2, [r4, #5]
10009970:	4313      	orrs	r3, r2
10009972:	b21b      	sxth	r3, r3
10009974:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009976:	9200      	str	r2, [sp, #0]
10009978:	4694      	mov	ip, r2
1000997a:	4463      	add	r3, ip
1000997c:	9310      	str	r3, [sp, #64]	; 0x40
1000997e:	3d01      	subs	r5, #1
10009980:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009982:	2d00      	cmp	r5, #0
10009984:	d1b7      	bne.n	100098f6 <sms_imu_selftest+0x136>
10009986:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009988:	4e76      	ldr	r6, [pc, #472]	; (10009b64 <sms_imu_selftest+0x3a4>)
1000998a:	ad11      	add	r5, sp, #68	; 0x44
1000998c:	21c8      	movs	r1, #200	; 0xc8
1000998e:	5960      	ldr	r0, [r4, r5]
10009990:	47b0      	blx	r6
10009992:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009994:	ad0e      	add	r5, sp, #56	; 0x38
10009996:	21c8      	movs	r1, #200	; 0xc8
10009998:	5960      	ldr	r0, [r4, r5]
1000999a:	47b0      	blx	r6
1000999c:	5160      	str	r0, [r4, r5]
1000999e:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
100099a0:	2c0c      	cmp	r4, #12
100099a2:	d1f2      	bne.n	1000998a <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
100099a4:	2200      	movs	r2, #0
100099a6:	211c      	movs	r1, #28
100099a8:	2069      	movs	r0, #105	; 0x69
100099aa:	4c6c      	ldr	r4, [pc, #432]	; (10009b5c <sms_imu_selftest+0x39c>)
100099ac:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
100099ae:	2200      	movs	r2, #0
100099b0:	211b      	movs	r1, #27
100099b2:	2069      	movs	r0, #105	; 0x69
100099b4:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100099b6:	2019      	movs	r0, #25
100099b8:	4b6b      	ldr	r3, [pc, #428]	; (10009b68 <sms_imu_selftest+0x3a8>)
100099ba:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
100099bc:	210d      	movs	r1, #13
100099be:	2069      	movs	r0, #105	; 0x69
100099c0:	4d6a      	ldr	r5, [pc, #424]	; (10009b6c <sms_imu_selftest+0x3ac>)
100099c2:	47a8      	blx	r5
100099c4:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
100099c6:	210e      	movs	r1, #14
100099c8:	2069      	movs	r0, #105	; 0x69
100099ca:	47a8      	blx	r5
100099cc:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
100099ce:	210f      	movs	r1, #15
100099d0:	2069      	movs	r0, #105	; 0x69
100099d2:	47a8      	blx	r5
100099d4:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
100099d6:	2100      	movs	r1, #0
100099d8:	2069      	movs	r0, #105	; 0x69
100099da:	47a8      	blx	r5
100099dc:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
100099de:	2101      	movs	r1, #1
100099e0:	2069      	movs	r0, #105	; 0x69
100099e2:	47a8      	blx	r5
100099e4:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
100099e6:	2102      	movs	r1, #2
100099e8:	2069      	movs	r0, #105	; 0x69
100099ea:	47a8      	blx	r5
100099ec:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
100099ee:	4b60      	ldr	r3, [pc, #384]	; (10009b70 <sms_imu_selftest+0x3b0>)
100099f0:	469a      	mov	sl, r3
100099f2:	0020      	movs	r0, r4
100099f4:	4798      	blx	r3
100099f6:	4b5f      	ldr	r3, [pc, #380]	; (10009b74 <sms_imu_selftest+0x3b4>)
100099f8:	4699      	mov	r9, r3
100099fa:	4798      	blx	r3
100099fc:	4e5e      	ldr	r6, [pc, #376]	; (10009b78 <sms_imu_selftest+0x3b8>)
100099fe:	2200      	movs	r2, #0
10009a00:	4b5e      	ldr	r3, [pc, #376]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a02:	47b0      	blx	r6
10009a04:	0002      	movs	r2, r0
10009a06:	000b      	movs	r3, r1
10009a08:	485d      	ldr	r0, [pc, #372]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a0a:	495e      	ldr	r1, [pc, #376]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a0c:	4f5e      	ldr	r7, [pc, #376]	; (10009b88 <sms_imu_selftest+0x3c8>)
10009a0e:	47b8      	blx	r7
10009a10:	4d5e      	ldr	r5, [pc, #376]	; (10009b8c <sms_imu_selftest+0x3cc>)
10009a12:	2200      	movs	r2, #0
10009a14:	4b5e      	ldr	r3, [pc, #376]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a16:	47a8      	blx	r5
10009a18:	4c5e      	ldr	r4, [pc, #376]	; (10009b94 <sms_imu_selftest+0x3d4>)
10009a1a:	47a0      	blx	r4
10009a1c:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009a1e:	9800      	ldr	r0, [sp, #0]
10009a20:	47d0      	blx	sl
10009a22:	47c8      	blx	r9
10009a24:	2200      	movs	r2, #0
10009a26:	4b55      	ldr	r3, [pc, #340]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a28:	47b0      	blx	r6
10009a2a:	0002      	movs	r2, r0
10009a2c:	000b      	movs	r3, r1
10009a2e:	4854      	ldr	r0, [pc, #336]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a30:	4954      	ldr	r1, [pc, #336]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a32:	47b8      	blx	r7
10009a34:	2200      	movs	r2, #0
10009a36:	4b56      	ldr	r3, [pc, #344]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a38:	47a8      	blx	r5
10009a3a:	47a0      	blx	r4
10009a3c:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009a3e:	9804      	ldr	r0, [sp, #16]
10009a40:	47d0      	blx	sl
10009a42:	47c8      	blx	r9
10009a44:	2200      	movs	r2, #0
10009a46:	4b4d      	ldr	r3, [pc, #308]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a48:	47b0      	blx	r6
10009a4a:	0002      	movs	r2, r0
10009a4c:	000b      	movs	r3, r1
10009a4e:	484c      	ldr	r0, [pc, #304]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a50:	494c      	ldr	r1, [pc, #304]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a52:	47b8      	blx	r7
10009a54:	2200      	movs	r2, #0
10009a56:	4b4e      	ldr	r3, [pc, #312]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a58:	47a8      	blx	r5
10009a5a:	47a0      	blx	r4
10009a5c:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009a5e:	9805      	ldr	r0, [sp, #20]
10009a60:	47d0      	blx	sl
10009a62:	47c8      	blx	r9
10009a64:	2200      	movs	r2, #0
10009a66:	4b45      	ldr	r3, [pc, #276]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a68:	47b0      	blx	r6
10009a6a:	0002      	movs	r2, r0
10009a6c:	000b      	movs	r3, r1
10009a6e:	4844      	ldr	r0, [pc, #272]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a70:	4944      	ldr	r1, [pc, #272]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a72:	47b8      	blx	r7
10009a74:	2200      	movs	r2, #0
10009a76:	4b46      	ldr	r3, [pc, #280]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a78:	47a8      	blx	r5
10009a7a:	47a0      	blx	r4
10009a7c:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009a7e:	9806      	ldr	r0, [sp, #24]
10009a80:	47d0      	blx	sl
10009a82:	47c8      	blx	r9
10009a84:	2200      	movs	r2, #0
10009a86:	4b3d      	ldr	r3, [pc, #244]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a88:	47b0      	blx	r6
10009a8a:	0002      	movs	r2, r0
10009a8c:	000b      	movs	r3, r1
10009a8e:	483c      	ldr	r0, [pc, #240]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a90:	493c      	ldr	r1, [pc, #240]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a92:	47b8      	blx	r7
10009a94:	2200      	movs	r2, #0
10009a96:	4b3e      	ldr	r3, [pc, #248]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a98:	47a8      	blx	r5
10009a9a:	47a0      	blx	r4
10009a9c:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009a9e:	9807      	ldr	r0, [sp, #28]
10009aa0:	47d0      	blx	sl
10009aa2:	47c8      	blx	r9
10009aa4:	2200      	movs	r2, #0
10009aa6:	4b35      	ldr	r3, [pc, #212]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009aa8:	47b0      	blx	r6
10009aaa:	0002      	movs	r2, r0
10009aac:	000b      	movs	r3, r1
10009aae:	4834      	ldr	r0, [pc, #208]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009ab0:	4934      	ldr	r1, [pc, #208]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009ab2:	47b8      	blx	r7
10009ab4:	2200      	movs	r2, #0
10009ab6:	4b36      	ldr	r3, [pc, #216]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009ab8:	47a8      	blx	r5
10009aba:	47a0      	blx	r4
10009abc:	900d      	str	r0, [sp, #52]	; 0x34
10009abe:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009ac0:	4b35      	ldr	r3, [pc, #212]	; (10009b98 <sms_imu_selftest+0x3d8>)
10009ac2:	4699      	mov	r9, r3
10009ac4:	4d2b      	ldr	r5, [pc, #172]	; (10009b74 <sms_imu_selftest+0x3b4>)
10009ac6:	4b31      	ldr	r3, [pc, #196]	; (10009b8c <sms_imu_selftest+0x3cc>)
10009ac8:	4698      	mov	r8, r3
10009aca:	4b34      	ldr	r3, [pc, #208]	; (10009b9c <sms_imu_selftest+0x3dc>)
10009acc:	469a      	mov	sl, r3
10009ace:	4f2a      	ldr	r7, [pc, #168]	; (10009b78 <sms_imu_selftest+0x3b8>)
10009ad0:	4e30      	ldr	r6, [pc, #192]	; (10009b94 <sms_imu_selftest+0x3d4>)
10009ad2:	ab11      	add	r3, sp, #68	; 0x44
10009ad4:	58e3      	ldr	r3, [r4, r3]
10009ad6:	aa14      	add	r2, sp, #80	; 0x50
10009ad8:	58a0      	ldr	r0, [r4, r2]
10009ada:	1a18      	subs	r0, r3, r0
10009adc:	47c8      	blx	r9
10009ade:	47a8      	blx	r5
10009ae0:	2200      	movs	r2, #0
10009ae2:	4b2f      	ldr	r3, [pc, #188]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009ae4:	47c0      	blx	r8
10009ae6:	9000      	str	r0, [sp, #0]
10009ae8:	9101      	str	r1, [sp, #4]
10009aea:	ab08      	add	r3, sp, #32
10009aec:	58e0      	ldr	r0, [r4, r3]
10009aee:	47a8      	blx	r5
10009af0:	0002      	movs	r2, r0
10009af2:	000b      	movs	r3, r1
10009af4:	9800      	ldr	r0, [sp, #0]
10009af6:	9901      	ldr	r1, [sp, #4]
10009af8:	47d0      	blx	sl
10009afa:	2200      	movs	r2, #0
10009afc:	4b28      	ldr	r3, [pc, #160]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009afe:	47b8      	blx	r7
10009b00:	47b0      	blx	r6
10009b02:	9b03      	ldr	r3, [sp, #12]
10009b04:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009b06:	469b      	mov	fp, r3
10009b08:	44a3      	add	fp, r4
10009b0a:	ab0e      	add	r3, sp, #56	; 0x38
10009b0c:	58e3      	ldr	r3, [r4, r3]
10009b0e:	aa17      	add	r2, sp, #92	; 0x5c
10009b10:	58a0      	ldr	r0, [r4, r2]
10009b12:	1a18      	subs	r0, r3, r0
10009b14:	47c8      	blx	r9
10009b16:	47a8      	blx	r5
10009b18:	2200      	movs	r2, #0
10009b1a:	4b21      	ldr	r3, [pc, #132]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009b1c:	47c0      	blx	r8
10009b1e:	9000      	str	r0, [sp, #0]
10009b20:	9101      	str	r1, [sp, #4]
10009b22:	0023      	movs	r3, r4
10009b24:	aa08      	add	r2, sp, #32
10009b26:	4694      	mov	ip, r2
10009b28:	4463      	add	r3, ip
10009b2a:	68d8      	ldr	r0, [r3, #12]
10009b2c:	47a8      	blx	r5
10009b2e:	0002      	movs	r2, r0
10009b30:	000b      	movs	r3, r1
10009b32:	9800      	ldr	r0, [sp, #0]
10009b34:	9901      	ldr	r1, [sp, #4]
10009b36:	47d0      	blx	sl
10009b38:	2200      	movs	r2, #0
10009b3a:	4b19      	ldr	r3, [pc, #100]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009b3c:	47b8      	blx	r7
10009b3e:	47b0      	blx	r6
10009b40:	465b      	mov	r3, fp
10009b42:	60d8      	str	r0, [r3, #12]
10009b44:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
10009b46:	2c0c      	cmp	r4, #12
10009b48:	d1c3      	bne.n	10009ad2 <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
10009b4a:	b01d      	add	sp, #116	; 0x74
10009b4c:	bc3c      	pop	{r2, r3, r4, r5}
10009b4e:	4690      	mov	r8, r2
10009b50:	4699      	mov	r9, r3
10009b52:	46a2      	mov	sl, r4
10009b54:	46ab      	mov	fp, r5
10009b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b58:	100156d1 	.word	0x100156d1
10009b5c:	10009235 	.word	0x10009235
10009b60:	10009069 	.word	0x10009069
10009b64:	10012ab9 	.word	0x10012ab9
10009b68:	1000a289 	.word	0x1000a289
10009b6c:	100096e9 	.word	0x100096e9
10009b70:	100137e1 	.word	0x100137e1
10009b74:	10015439 	.word	0x10015439
10009b78:	10014bf1 	.word	0x10014bf1
10009b7c:	3ff00000 	.word	0x3ff00000
10009b80:	c28f5c29 	.word	0xc28f5c29
10009b84:	3ff028f5 	.word	0x3ff028f5
10009b88:	1001175d 	.word	0x1001175d
10009b8c:	100146fd 	.word	0x100146fd
10009b90:	40a47800 	.word	0x40a47800
10009b94:	100154e1 	.word	0x100154e1
10009b98:	10013751 	.word	0x10013751
10009b9c:	10013eb5 	.word	0x10013eb5
10009ba0:	40590000 	.word	0x40590000

10009ba4 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
10009ba4:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
10009ba6:	2175      	movs	r1, #117	; 0x75
10009ba8:	2069      	movs	r0, #105	; 0x69
10009baa:	4b06      	ldr	r3, [pc, #24]	; (10009bc4 <sms_imu_mpu_check+0x20>)
10009bac:	4798      	blx	r3
	if(c == 0x71) {
10009bae:	2871      	cmp	r0, #113	; 0x71
10009bb0:	d104      	bne.n	10009bbc <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
10009bb2:	4805      	ldr	r0, [pc, #20]	; (10009bc8 <sms_imu_mpu_check+0x24>)
10009bb4:	4b05      	ldr	r3, [pc, #20]	; (10009bcc <sms_imu_mpu_check+0x28>)
10009bb6:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
10009bb8:	2000      	movs	r0, #0
10009bba:	e001      	b.n	10009bc0 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
10009bbc:	2001      	movs	r0, #1
10009bbe:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009bc0:	bd10      	pop	{r4, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	100096e9 	.word	0x100096e9
10009bc8:	10019fb8 	.word	0x10019fb8
10009bcc:	100097c1 	.word	0x100097c1

10009bd0 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
10009bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bd2:	b087      	sub	sp, #28
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009bd4:	4b22      	ldr	r3, [pc, #136]	; (10009c60 <sms_imu_startup+0x90>)
10009bd6:	4798      	blx	r3
10009bd8:	2800      	cmp	r0, #0
10009bda:	d139      	bne.n	10009c50 <sms_imu_startup+0x80>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
10009bdc:	4c21      	ldr	r4, [pc, #132]	; (10009c64 <sms_imu_startup+0x94>)
10009bde:	0020      	movs	r0, r4
10009be0:	380c      	subs	r0, #12
10009be2:	0021      	movs	r1, r4
10009be4:	4b20      	ldr	r3, [pc, #128]	; (10009c68 <sms_imu_startup+0x98>)
10009be6:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
10009be8:	4820      	ldr	r0, [pc, #128]	; (10009c6c <sms_imu_startup+0x9c>)
10009bea:	4b21      	ldr	r3, [pc, #132]	; (10009c70 <sms_imu_startup+0xa0>)
10009bec:	4798      	blx	r3
10009bee:	3c28      	subs	r4, #40	; 0x28
10009bf0:	4e20      	ldr	r6, [pc, #128]	; (10009c74 <sms_imu_startup+0xa4>)
10009bf2:	4921      	ldr	r1, [pc, #132]	; (10009c78 <sms_imu_startup+0xa8>)
10009bf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
10009bf6:	47b0      	blx	r6
10009bf8:	4d20      	ldr	r5, [pc, #128]	; (10009c7c <sms_imu_startup+0xac>)
10009bfa:	47a8      	blx	r5
10009bfc:	0007      	movs	r7, r0
10009bfe:	491e      	ldr	r1, [pc, #120]	; (10009c78 <sms_imu_startup+0xa8>)
10009c00:	6a20      	ldr	r0, [r4, #32]
10009c02:	47b0      	blx	r6
10009c04:	47a8      	blx	r5
10009c06:	9004      	str	r0, [sp, #16]
10009c08:	491b      	ldr	r1, [pc, #108]	; (10009c78 <sms_imu_startup+0xa8>)
10009c0a:	69e0      	ldr	r0, [r4, #28]
10009c0c:	47b0      	blx	r6
10009c0e:	47a8      	blx	r5
10009c10:	9005      	str	r0, [sp, #20]
10009c12:	4919      	ldr	r1, [pc, #100]	; (10009c78 <sms_imu_startup+0xa8>)
10009c14:	6b20      	ldr	r0, [r4, #48]	; 0x30
10009c16:	47b0      	blx	r6
10009c18:	47a8      	blx	r5
10009c1a:	9002      	str	r0, [sp, #8]
10009c1c:	4916      	ldr	r1, [pc, #88]	; (10009c78 <sms_imu_startup+0xa8>)
10009c1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
10009c20:	47b0      	blx	r6
10009c22:	47a8      	blx	r5
10009c24:	9001      	str	r0, [sp, #4]
10009c26:	4914      	ldr	r1, [pc, #80]	; (10009c78 <sms_imu_startup+0xa8>)
10009c28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
10009c2a:	47b0      	blx	r6
10009c2c:	47a8      	blx	r5
10009c2e:	9000      	str	r0, [sp, #0]
10009c30:	003b      	movs	r3, r7
10009c32:	9a04      	ldr	r2, [sp, #16]
10009c34:	9905      	ldr	r1, [sp, #20]
10009c36:	4812      	ldr	r0, [pc, #72]	; (10009c80 <sms_imu_startup+0xb0>)
10009c38:	4c12      	ldr	r4, [pc, #72]	; (10009c84 <sms_imu_startup+0xb4>)
10009c3a:	47a0      	blx	r4
	sms_imu_mpu_initialize();
10009c3c:	4b12      	ldr	r3, [pc, #72]	; (10009c88 <sms_imu_startup+0xb8>)
10009c3e:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c40:	4b12      	ldr	r3, [pc, #72]	; (10009c8c <sms_imu_startup+0xbc>)
10009c42:	4798      	blx	r3
10009c44:	1e04      	subs	r4, r0, #0
10009c46:	d106      	bne.n	10009c56 <sms_imu_startup+0x86>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
10009c48:	4811      	ldr	r0, [pc, #68]	; (10009c90 <sms_imu_startup+0xc0>)
10009c4a:	4b12      	ldr	r3, [pc, #72]	; (10009c94 <sms_imu_startup+0xc4>)
10009c4c:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
10009c4e:	e004      	b.n	10009c5a <sms_imu_startup+0x8a>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009c50:	2401      	movs	r4, #1
10009c52:	4264      	negs	r4, r4
10009c54:	e001      	b.n	10009c5a <sms_imu_startup+0x8a>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c56:	2401      	movs	r4, #1
10009c58:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
10009c5a:	0020      	movs	r0, r4
10009c5c:	b007      	add	sp, #28
10009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c60:	10009ba5 	.word	0x10009ba5
10009c64:	10019fdc 	.word	0x10019fdc
10009c68:	1000924d 	.word	0x1000924d
10009c6c:	10016878 	.word	0x10016878
10009c70:	10015939 	.word	0x10015939
10009c74:	100131d9 	.word	0x100131d9
10009c78:	461c4000 	.word	0x461c4000
10009c7c:	10012dd9 	.word	0x10012dd9
10009c80:	10016f80 	.word	0x10016f80
10009c84:	10015819 	.word	0x10015819
10009c88:	10009719 	.word	0x10009719
10009c8c:	10009701 	.word	0x10009701
10009c90:	10019ff4 	.word	0x10019ff4
10009c94:	100095c5 	.word	0x100095c5

10009c98 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10009c98:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009c9a:	2100      	movs	r1, #0
10009c9c:	4b01      	ldr	r3, [pc, #4]	; (10009ca4 <sms_led_switch_on+0xc>)
10009c9e:	4798      	blx	r3
}
10009ca0:	bd10      	pop	{r4, pc}
10009ca2:	46c0      	nop			; (mov r8, r8)
10009ca4:	1000ab1d 	.word	0x1000ab1d

10009ca8 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009ca8:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009caa:	2101      	movs	r1, #1
10009cac:	4b01      	ldr	r3, [pc, #4]	; (10009cb4 <sms_led_switch_off+0xc>)
10009cae:	4798      	blx	r3
}
10009cb0:	bd10      	pop	{r4, pc}
10009cb2:	46c0      	nop			; (mov r8, r8)
10009cb4:	1000ab1d 	.word	0x1000ab1d

10009cb8 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009cb8:	b510      	push	{r4, lr}
10009cba:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009cbc:	ac01      	add	r4, sp, #4
10009cbe:	0020      	movs	r0, r4
10009cc0:	4b0a      	ldr	r3, [pc, #40]	; (10009cec <sms_led_gpio_init+0x34>)
10009cc2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009cc4:	2301      	movs	r3, #1
10009cc6:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009cc8:	0021      	movs	r1, r4
10009cca:	2016      	movs	r0, #22
10009ccc:	4b08      	ldr	r3, [pc, #32]	; (10009cf0 <sms_led_gpio_init+0x38>)
10009cce:	4798      	blx	r3
10009cd0:	2800      	cmp	r0, #0
10009cd2:	d005      	beq.n	10009ce0 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009cd4:	4807      	ldr	r0, [pc, #28]	; (10009cf4 <sms_led_gpio_init+0x3c>)
10009cd6:	4b08      	ldr	r3, [pc, #32]	; (10009cf8 <sms_led_gpio_init+0x40>)
10009cd8:	4798      	blx	r3
10009cda:	4808      	ldr	r0, [pc, #32]	; (10009cfc <sms_led_gpio_init+0x44>)
10009cdc:	4b08      	ldr	r3, [pc, #32]	; (10009d00 <sms_led_gpio_init+0x48>)
10009cde:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10009ce0:	2016      	movs	r0, #22
10009ce2:	4b08      	ldr	r3, [pc, #32]	; (10009d04 <sms_led_gpio_init+0x4c>)
10009ce4:	4798      	blx	r3
}
10009ce6:	b002      	add	sp, #8
10009ce8:	bd10      	pop	{r4, pc}
10009cea:	46c0      	nop			; (mov r8, r8)
10009cec:	1000a905 	.word	0x1000a905
10009cf0:	1000a915 	.word	0x1000a915
10009cf4:	10016878 	.word	0x10016878
10009cf8:	10015939 	.word	0x10015939
10009cfc:	10016fbc 	.word	0x10016fbc
10009d00:	10015819 	.word	0x10015819
10009d04:	10009ca9 	.word	0x10009ca9

10009d08 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009d08:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009d0a:	4b0c      	ldr	r3, [pc, #48]	; (10009d3c <sms_led_blink_start+0x34>)
10009d0c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10009d0e:	2200      	movs	r2, #0
10009d10:	4b0b      	ldr	r3, [pc, #44]	; (10009d40 <sms_led_blink_start+0x38>)
10009d12:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009d14:	4b0b      	ldr	r3, [pc, #44]	; (10009d44 <sms_led_blink_start+0x3c>)
10009d16:	781b      	ldrb	r3, [r3, #0]
10009d18:	b2db      	uxtb	r3, r3
10009d1a:	2b02      	cmp	r3, #2
10009d1c:	d002      	beq.n	10009d24 <sms_led_blink_start+0x1c>
10009d1e:	2b03      	cmp	r3, #3
10009d20:	d002      	beq.n	10009d28 <sms_led_blink_start+0x20>
10009d22:	e004      	b.n	10009d2e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009d24:	2164      	movs	r1, #100	; 0x64
10009d26:	e003      	b.n	10009d30 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10009d28:	21c8      	movs	r1, #200	; 0xc8
10009d2a:	0049      	lsls	r1, r1, #1
        break;
10009d2c:	e000      	b.n	10009d30 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10009d2e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009d30:	2201      	movs	r2, #1
10009d32:	2001      	movs	r0, #1
10009d34:	4b04      	ldr	r3, [pc, #16]	; (10009d48 <sms_led_blink_start+0x40>)
10009d36:	4798      	blx	r3
}
10009d38:	bd10      	pop	{r4, pc}
10009d3a:	46c0      	nop			; (mov r8, r8)
10009d3c:	10009c99 	.word	0x10009c99
10009d40:	1001a09c 	.word	0x1001a09c
10009d44:	10019f9b 	.word	0x10019f9b
10009d48:	1000a21d 	.word	0x1000a21d

10009d4c <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
10009d4c:	4b06      	ldr	r3, [pc, #24]	; (10009d68 <sms_pressure_init_variables+0x1c>)
10009d4e:	2200      	movs	r2, #0
10009d50:	2125      	movs	r1, #37	; 0x25
10009d52:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
10009d54:	3106      	adds	r1, #6
10009d56:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
10009d58:	3901      	subs	r1, #1
10009d5a:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
10009d5c:	3902      	subs	r1, #2
10009d5e:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
10009d60:	3101      	adds	r1, #1
10009d62:	545a      	strb	r2, [r3, r1]
}
10009d64:	4770      	bx	lr
10009d66:	46c0      	nop			; (mov r8, r8)
10009d68:	10019f00 	.word	0x10019f00

10009d6c <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10009d6c:	b510      	push	{r4, lr}
10009d6e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10009d70:	4a05      	ldr	r2, [pc, #20]	; (10009d88 <sms_pressure_ms58_reset+0x1c>)
10009d72:	231e      	movs	r3, #30
10009d74:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10009d76:	3b1d      	subs	r3, #29
10009d78:	9300      	str	r3, [sp, #0]
10009d7a:	4b04      	ldr	r3, [pc, #16]	; (10009d8c <sms_pressure_ms58_reset+0x20>)
10009d7c:	4904      	ldr	r1, [pc, #16]	; (10009d90 <sms_pressure_ms58_reset+0x24>)
10009d7e:	4805      	ldr	r0, [pc, #20]	; (10009d94 <sms_pressure_ms58_reset+0x28>)
10009d80:	4c05      	ldr	r4, [pc, #20]	; (10009d98 <sms_pressure_ms58_reset+0x2c>)
10009d82:	47a0      	blx	r4
}
10009d84:	b002      	add	sp, #8
10009d86:	bd10      	pop	{r4, pc}
10009d88:	10019ef0 	.word	0x10019ef0
10009d8c:	10019edc 	.word	0x10019edc
10009d90:	10019f9c 	.word	0x10019f9c
10009d94:	10019fa8 	.word	0x10019fa8
10009d98:	1000a101 	.word	0x1000a101

10009d9c <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d9e:	4657      	mov	r7, sl
10009da0:	b480      	push	{r7}
10009da2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009da4:	4d37      	ldr	r5, [pc, #220]	; (10009e84 <sms_pressure_ms58_read_prom+0xe8>)
10009da6:	23a2      	movs	r3, #162	; 0xa2
10009da8:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
10009daa:	2300      	movs	r3, #0
10009dac:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
10009dae:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009db0:	4c35      	ldr	r4, [pc, #212]	; (10009e88 <sms_pressure_ms58_read_prom+0xec>)
10009db2:	3303      	adds	r3, #3
10009db4:	469a      	mov	sl, r3
10009db6:	9300      	str	r3, [sp, #0]
10009db8:	0023      	movs	r3, r4
10009dba:	002a      	movs	r2, r5
10009dbc:	4933      	ldr	r1, [pc, #204]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009dbe:	4834      	ldr	r0, [pc, #208]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009dc0:	4f34      	ldr	r7, [pc, #208]	; (10009e94 <sms_pressure_ms58_read_prom+0xf8>)
10009dc2:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009dc4:	4e34      	ldr	r6, [pc, #208]	; (10009e98 <sms_pressure_ms58_read_prom+0xfc>)
10009dc6:	7863      	ldrb	r3, [r4, #1]
10009dc8:	021b      	lsls	r3, r3, #8
10009dca:	78a2      	ldrb	r2, [r4, #2]
10009dcc:	4313      	orrs	r3, r2
10009dce:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009dd0:	23a4      	movs	r3, #164	; 0xa4
10009dd2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009dd4:	4653      	mov	r3, sl
10009dd6:	9300      	str	r3, [sp, #0]
10009dd8:	0023      	movs	r3, r4
10009dda:	002a      	movs	r2, r5
10009ddc:	492b      	ldr	r1, [pc, #172]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009dde:	482c      	ldr	r0, [pc, #176]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009de0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009de2:	7863      	ldrb	r3, [r4, #1]
10009de4:	021b      	lsls	r3, r3, #8
10009de6:	78a2      	ldrb	r2, [r4, #2]
10009de8:	4313      	orrs	r3, r2
10009dea:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009dec:	23a6      	movs	r3, #166	; 0xa6
10009dee:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009df0:	4653      	mov	r3, sl
10009df2:	9300      	str	r3, [sp, #0]
10009df4:	0023      	movs	r3, r4
10009df6:	002a      	movs	r2, r5
10009df8:	4924      	ldr	r1, [pc, #144]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009dfa:	4825      	ldr	r0, [pc, #148]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009dfc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009dfe:	7863      	ldrb	r3, [r4, #1]
10009e00:	021b      	lsls	r3, r3, #8
10009e02:	78a2      	ldrb	r2, [r4, #2]
10009e04:	4313      	orrs	r3, r2
10009e06:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009e08:	23a8      	movs	r3, #168	; 0xa8
10009e0a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009e0c:	4653      	mov	r3, sl
10009e0e:	9300      	str	r3, [sp, #0]
10009e10:	0023      	movs	r3, r4
10009e12:	002a      	movs	r2, r5
10009e14:	491d      	ldr	r1, [pc, #116]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009e16:	481e      	ldr	r0, [pc, #120]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009e18:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e1a:	7863      	ldrb	r3, [r4, #1]
10009e1c:	021b      	lsls	r3, r3, #8
10009e1e:	78a2      	ldrb	r2, [r4, #2]
10009e20:	4313      	orrs	r3, r2
10009e22:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009e24:	23aa      	movs	r3, #170	; 0xaa
10009e26:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009e28:	4653      	mov	r3, sl
10009e2a:	9300      	str	r3, [sp, #0]
10009e2c:	0023      	movs	r3, r4
10009e2e:	002a      	movs	r2, r5
10009e30:	4916      	ldr	r1, [pc, #88]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009e32:	4817      	ldr	r0, [pc, #92]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009e34:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e36:	7863      	ldrb	r3, [r4, #1]
10009e38:	021b      	lsls	r3, r3, #8
10009e3a:	78a2      	ldrb	r2, [r4, #2]
10009e3c:	4313      	orrs	r3, r2
10009e3e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009e40:	23ac      	movs	r3, #172	; 0xac
10009e42:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009e44:	4653      	mov	r3, sl
10009e46:	9300      	str	r3, [sp, #0]
10009e48:	0023      	movs	r3, r4
10009e4a:	002a      	movs	r2, r5
10009e4c:	490f      	ldr	r1, [pc, #60]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009e4e:	4810      	ldr	r0, [pc, #64]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009e50:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e52:	7863      	ldrb	r3, [r4, #1]
10009e54:	021b      	lsls	r3, r3, #8
10009e56:	78a2      	ldrb	r2, [r4, #2]
10009e58:	4313      	orrs	r3, r2
10009e5a:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009e5c:	23ae      	movs	r3, #174	; 0xae
10009e5e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009e60:	4653      	mov	r3, sl
10009e62:	9300      	str	r3, [sp, #0]
10009e64:	0023      	movs	r3, r4
10009e66:	002a      	movs	r2, r5
10009e68:	4908      	ldr	r1, [pc, #32]	; (10009e8c <sms_pressure_ms58_read_prom+0xf0>)
10009e6a:	4809      	ldr	r0, [pc, #36]	; (10009e90 <sms_pressure_ms58_read_prom+0xf4>)
10009e6c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e6e:	7863      	ldrb	r3, [r4, #1]
10009e70:	021b      	lsls	r3, r3, #8
10009e72:	78a2      	ldrb	r2, [r4, #2]
10009e74:	4313      	orrs	r3, r2
10009e76:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
10009e78:	2000      	movs	r0, #0
10009e7a:	b002      	add	sp, #8
10009e7c:	bc04      	pop	{r2}
10009e7e:	4692      	mov	sl, r2
10009e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e82:	46c0      	nop			; (mov r8, r8)
10009e84:	10019ef0 	.word	0x10019ef0
10009e88:	10019edc 	.word	0x10019edc
10009e8c:	10019f9c 	.word	0x10019f9c
10009e90:	10019fa8 	.word	0x10019fa8
10009e94:	1000a101 	.word	0x1000a101
10009e98:	10019f00 	.word	0x10019f00

10009e9c <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009e9c:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
10009e9e:	4b0a      	ldr	r3, [pc, #40]	; (10009ec8 <sms_pressure_init+0x2c>)
10009ea0:	4798      	blx	r3
10009ea2:	2800      	cmp	r0, #0
10009ea4:	d10d      	bne.n	10009ec2 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
10009ea6:	4b09      	ldr	r3, [pc, #36]	; (10009ecc <sms_pressure_init+0x30>)
10009ea8:	2201      	movs	r2, #1
10009eaa:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009eac:	2402      	movs	r4, #2
10009eae:	2125      	movs	r1, #37	; 0x25
10009eb0:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
10009eb2:	3103      	adds	r1, #3
10009eb4:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
10009eb6:	2200      	movs	r2, #0
10009eb8:	3101      	adds	r1, #1
10009eba:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009ebc:	3101      	adds	r1, #1
10009ebe:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
10009ec0:	e000      	b.n	10009ec4 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
10009ec2:	2010      	movs	r0, #16
}
10009ec4:	bd10      	pop	{r4, pc}
10009ec6:	46c0      	nop			; (mov r8, r8)
10009ec8:	10009d9d 	.word	0x10009d9d
10009ecc:	10019f00 	.word	0x10019f00

10009ed0 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
10009ed0:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009ed2:	4817      	ldr	r0, [pc, #92]	; (10009f30 <sms_pressure_startup+0x60>)
10009ed4:	4b17      	ldr	r3, [pc, #92]	; (10009f34 <sms_pressure_startup+0x64>)
10009ed6:	4798      	blx	r3
10009ed8:	4817      	ldr	r0, [pc, #92]	; (10009f38 <sms_pressure_startup+0x68>)
10009eda:	4b18      	ldr	r3, [pc, #96]	; (10009f3c <sms_pressure_startup+0x6c>)
10009edc:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
10009ede:	2101      	movs	r1, #1
10009ee0:	2001      	movs	r0, #1
10009ee2:	4b17      	ldr	r3, [pc, #92]	; (10009f40 <sms_pressure_startup+0x70>)
10009ee4:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009ee6:	2101      	movs	r1, #1
10009ee8:	2325      	movs	r3, #37	; 0x25
10009eea:	4a16      	ldr	r2, [pc, #88]	; (10009f44 <sms_pressure_startup+0x74>)
10009eec:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
10009eee:	4b16      	ldr	r3, [pc, #88]	; (10009f48 <sms_pressure_startup+0x78>)
10009ef0:	4798      	blx	r3
    delay_ms(3);
10009ef2:	2003      	movs	r0, #3
10009ef4:	4b15      	ldr	r3, [pc, #84]	; (10009f4c <sms_pressure_startup+0x7c>)
10009ef6:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
10009ef8:	4b15      	ldr	r3, [pc, #84]	; (10009f50 <sms_pressure_startup+0x80>)
10009efa:	4798      	blx	r3
10009efc:	2800      	cmp	r0, #0
10009efe:	d006      	beq.n	10009f0e <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
10009f00:	480b      	ldr	r0, [pc, #44]	; (10009f30 <sms_pressure_startup+0x60>)
10009f02:	4b0c      	ldr	r3, [pc, #48]	; (10009f34 <sms_pressure_startup+0x64>)
10009f04:	4798      	blx	r3
10009f06:	4813      	ldr	r0, [pc, #76]	; (10009f54 <sms_pressure_startup+0x84>)
10009f08:	4b0c      	ldr	r3, [pc, #48]	; (10009f3c <sms_pressure_startup+0x6c>)
10009f0a:	4798      	blx	r3
10009f0c:	e7fe      	b.n	10009f0c <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
10009f0e:	4b0d      	ldr	r3, [pc, #52]	; (10009f44 <sms_pressure_startup+0x74>)
10009f10:	2102      	movs	r1, #2
10009f12:	2225      	movs	r2, #37	; 0x25
10009f14:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
10009f16:	2401      	movs	r4, #1
10009f18:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
10009f1a:	3a1e      	subs	r2, #30
10009f1c:	4b0e      	ldr	r3, [pc, #56]	; (10009f58 <sms_pressure_startup+0x88>)
10009f1e:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009f20:	3901      	subs	r1, #1
10009f22:	2001      	movs	r0, #1
10009f24:	4b0d      	ldr	r3, [pc, #52]	; (10009f5c <sms_pressure_startup+0x8c>)
10009f26:	4798      	blx	r3
    
    ulp_ready = true;
10009f28:	4b0d      	ldr	r3, [pc, #52]	; (10009f60 <sms_pressure_startup+0x90>)
10009f2a:	701c      	strb	r4, [r3, #0]
}
10009f2c:	bd10      	pop	{r4, pc}
10009f2e:	46c0      	nop			; (mov r8, r8)
10009f30:	10016878 	.word	0x10016878
10009f34:	10015939 	.word	0x10015939
10009f38:	10017030 	.word	0x10017030
10009f3c:	10015819 	.word	0x10015819
10009f40:	10008e11 	.word	0x10008e11
10009f44:	10019f00 	.word	0x10019f00
10009f48:	10009d6d 	.word	0x10009d6d
10009f4c:	1000a289 	.word	0x1000a289
10009f50:	10009e9d 	.word	0x10009e9d
10009f54:	10017064 	.word	0x10017064
10009f58:	10019e74 	.word	0x10019e74
10009f5c:	10009fcd 	.word	0x10009fcd
10009f60:	10019e75 	.word	0x10019e75

10009f64 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
10009f64:	b510      	push	{r4, lr}
10009f66:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009f68:	466b      	mov	r3, sp
10009f6a:	1dda      	adds	r2, r3, #7
10009f6c:	2300      	movs	r3, #0
10009f6e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009f70:	4c0d      	ldr	r4, [pc, #52]	; (10009fa8 <sms_pressure_define_services+0x44>)
10009f72:	0021      	movs	r1, r4
10009f74:	2001      	movs	r0, #1
10009f76:	4b0d      	ldr	r3, [pc, #52]	; (10009fac <sms_pressure_define_services+0x48>)
10009f78:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009f7a:	0020      	movs	r0, r4
10009f7c:	4b0c      	ldr	r3, [pc, #48]	; (10009fb0 <sms_pressure_define_services+0x4c>)
10009f7e:	4798      	blx	r3
10009f80:	1e04      	subs	r4, r0, #0
10009f82:	d007      	beq.n	10009f94 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009f84:	480b      	ldr	r0, [pc, #44]	; (10009fb4 <sms_pressure_define_services+0x50>)
10009f86:	4b0c      	ldr	r3, [pc, #48]	; (10009fb8 <sms_pressure_define_services+0x54>)
10009f88:	4798      	blx	r3
10009f8a:	0021      	movs	r1, r4
10009f8c:	480b      	ldr	r0, [pc, #44]	; (10009fbc <sms_pressure_define_services+0x58>)
10009f8e:	4b0c      	ldr	r3, [pc, #48]	; (10009fc0 <sms_pressure_define_services+0x5c>)
10009f90:	4798      	blx	r3
10009f92:	e007      	b.n	10009fa4 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009f94:	4807      	ldr	r0, [pc, #28]	; (10009fb4 <sms_pressure_define_services+0x50>)
10009f96:	4b08      	ldr	r3, [pc, #32]	; (10009fb8 <sms_pressure_define_services+0x54>)
10009f98:	4798      	blx	r3
10009f9a:	4b0a      	ldr	r3, [pc, #40]	; (10009fc4 <sms_pressure_define_services+0x60>)
10009f9c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009f9e:	480a      	ldr	r0, [pc, #40]	; (10009fc8 <sms_pressure_define_services+0x64>)
10009fa0:	4b07      	ldr	r3, [pc, #28]	; (10009fc0 <sms_pressure_define_services+0x5c>)
10009fa2:	4798      	blx	r3
    }
10009fa4:	b002      	add	sp, #8
10009fa6:	bd10      	pop	{r4, pc}
10009fa8:	10019f2c 	.word	0x10019f2c
10009fac:	10008a3d 	.word	0x10008a3d
10009fb0:	10008a19 	.word	0x10008a19
10009fb4:	10016878 	.word	0x10016878
10009fb8:	10015939 	.word	0x10015939
10009fbc:	1001711c 	.word	0x1001711c
10009fc0:	10015819 	.word	0x10015819
10009fc4:	10019f00 	.word	0x10019f00
10009fc8:	10017164 	.word	0x10017164

10009fcc <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009fcc:	b510      	push	{r4, lr}
10009fce:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009fd0:	2800      	cmp	r0, #0
10009fd2:	d006      	beq.n	10009fe2 <sms_sensors_interrupt_toggle+0x16>
        imu_device.state = IMU_STATE_ON;
10009fd4:	2102      	movs	r1, #2
10009fd6:	2383      	movs	r3, #131	; 0x83
10009fd8:	4a14      	ldr	r2, [pc, #80]	; (1000a02c <sms_sensors_interrupt_toggle+0x60>)
10009fda:	54d1      	strb	r1, [r2, r3]
        sms_imu_enable_callback();
10009fdc:	4b14      	ldr	r3, [pc, #80]	; (1000a030 <sms_sensors_interrupt_toggle+0x64>)
10009fde:	4798      	blx	r3
10009fe0:	e005      	b.n	10009fee <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        imu_device.state = IMU_STATE_OFF;
10009fe2:	2100      	movs	r1, #0
10009fe4:	2383      	movs	r3, #131	; 0x83
10009fe6:	4a11      	ldr	r2, [pc, #68]	; (1000a02c <sms_sensors_interrupt_toggle+0x60>)
10009fe8:	54d1      	strb	r1, [r2, r3]
        sms_imu_disable_callback();
10009fea:	4b12      	ldr	r3, [pc, #72]	; (1000a034 <sms_sensors_interrupt_toggle+0x68>)
10009fec:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009fee:	2c00      	cmp	r4, #0
10009ff0:	d010      	beq.n	1000a014 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
10009ff2:	4b11      	ldr	r3, [pc, #68]	; (1000a038 <sms_sensors_interrupt_toggle+0x6c>)
10009ff4:	2103      	movs	r1, #3
10009ff6:	2225      	movs	r2, #37	; 0x25
10009ff8:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009ffa:	3901      	subs	r1, #1
10009ffc:	3206      	adds	r2, #6
10009ffe:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a000:	2100      	movs	r1, #0
1000a002:	2064      	movs	r0, #100	; 0x64
1000a004:	4b0d      	ldr	r3, [pc, #52]	; (1000a03c <sms_sensors_interrupt_toggle+0x70>)
1000a006:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a008:	4b0d      	ldr	r3, [pc, #52]	; (1000a040 <sms_sensors_interrupt_toggle+0x74>)
1000a00a:	4798      	blx	r3
        sensors_active = true;
1000a00c:	2201      	movs	r2, #1
1000a00e:	4b0d      	ldr	r3, [pc, #52]	; (1000a044 <sms_sensors_interrupt_toggle+0x78>)
1000a010:	701a      	strb	r2, [r3, #0]
1000a012:	e00a      	b.n	1000a02a <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000a014:	2102      	movs	r1, #2
1000a016:	2325      	movs	r3, #37	; 0x25
1000a018:	4a07      	ldr	r2, [pc, #28]	; (1000a038 <sms_sensors_interrupt_toggle+0x6c>)
1000a01a:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000a01c:	4b0a      	ldr	r3, [pc, #40]	; (1000a048 <sms_sensors_interrupt_toggle+0x7c>)
1000a01e:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000a020:	4b0a      	ldr	r3, [pc, #40]	; (1000a04c <sms_sensors_interrupt_toggle+0x80>)
1000a022:	4798      	blx	r3
        sensors_active = false;
1000a024:	2200      	movs	r2, #0
1000a026:	4b07      	ldr	r3, [pc, #28]	; (1000a044 <sms_sensors_interrupt_toggle+0x78>)
1000a028:	701a      	strb	r2, [r3, #0]
    }
}
1000a02a:	bd10      	pop	{r4, pc}
1000a02c:	10019fb4 	.word	0x10019fb4
1000a030:	10009191 	.word	0x10009191
1000a034:	100091ad 	.word	0x100091ad
1000a038:	10019f00 	.word	0x10019f00
1000a03c:	1000a15d 	.word	0x1000a15d
1000a040:	1000a195 	.word	0x1000a195
1000a044:	10019f8c 	.word	0x10019f8c
1000a048:	1000a189 	.word	0x1000a189
1000a04c:	1000a1b5 	.word	0x1000a1b5

1000a050 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a050:	b510      	push	{r4, lr}
1000a052:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a054:	2800      	cmp	r0, #0
1000a056:	d103      	bne.n	1000a060 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000a058:	2100      	movs	r1, #0
1000a05a:	3006      	adds	r0, #6
1000a05c:	4b07      	ldr	r3, [pc, #28]	; (1000a07c <sms_sensors_switch+0x2c>)
1000a05e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000a060:	2c00      	cmp	r4, #0
1000a062:	d006      	beq.n	1000a072 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000a064:	2101      	movs	r1, #1
1000a066:	2325      	movs	r3, #37	; 0x25
1000a068:	4a05      	ldr	r2, [pc, #20]	; (1000a080 <sms_sensors_switch+0x30>)
1000a06a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000a06c:	4b05      	ldr	r3, [pc, #20]	; (1000a084 <sms_sensors_switch+0x34>)
1000a06e:	4798      	blx	r3
1000a070:	e003      	b.n	1000a07a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000a072:	2100      	movs	r1, #0
1000a074:	2007      	movs	r0, #7
1000a076:	4b01      	ldr	r3, [pc, #4]	; (1000a07c <sms_sensors_switch+0x2c>)
1000a078:	4798      	blx	r3
    }
}
1000a07a:	bd10      	pop	{r4, pc}
1000a07c:	1000ab1d 	.word	0x1000ab1d
1000a080:	10019f00 	.word	0x10019f00
1000a084:	10009ed1 	.word	0x10009ed1

1000a088 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a088:	b530      	push	{r4, r5, lr}
1000a08a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a08c:	ac01      	add	r4, sp, #4
1000a08e:	0020      	movs	r0, r4
1000a090:	4b13      	ldr	r3, [pc, #76]	; (1000a0e0 <sms_spi_master_configure+0x58>)
1000a092:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a094:	2310      	movs	r3, #16
1000a096:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a098:	0021      	movs	r1, r4
1000a09a:	4812      	ldr	r0, [pc, #72]	; (1000a0e4 <sms_spi_master_configure+0x5c>)
1000a09c:	4b12      	ldr	r3, [pc, #72]	; (1000a0e8 <sms_spi_master_configure+0x60>)
1000a09e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a0a0:	ac02      	add	r4, sp, #8
1000a0a2:	0020      	movs	r0, r4
1000a0a4:	4b11      	ldr	r3, [pc, #68]	; (1000a0ec <sms_spi_master_configure+0x64>)
1000a0a6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a0a8:	2368      	movs	r3, #104	; 0x68
1000a0aa:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a0ac:	2300      	movs	r3, #0
1000a0ae:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a0b0:	3311      	adds	r3, #17
1000a0b2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a0b4:	3b0d      	subs	r3, #13
1000a0b6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a0b8:	2213      	movs	r2, #19
1000a0ba:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a0bc:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a0be:	3a14      	subs	r2, #20
1000a0c0:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a0c2:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a0c4:	3213      	adds	r2, #19
1000a0c6:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a0c8:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a0ca:	4d09      	ldr	r5, [pc, #36]	; (1000a0f0 <sms_spi_master_configure+0x68>)
1000a0cc:	0022      	movs	r2, r4
1000a0ce:	4909      	ldr	r1, [pc, #36]	; (1000a0f4 <sms_spi_master_configure+0x6c>)
1000a0d0:	0028      	movs	r0, r5
1000a0d2:	4b09      	ldr	r3, [pc, #36]	; (1000a0f8 <sms_spi_master_configure+0x70>)
1000a0d4:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a0d6:	0028      	movs	r0, r5
1000a0d8:	4b08      	ldr	r3, [pc, #32]	; (1000a0fc <sms_spi_master_configure+0x74>)
1000a0da:	4798      	blx	r3
}
1000a0dc:	b00d      	add	sp, #52	; 0x34
1000a0de:	bd30      	pop	{r4, r5, pc}
1000a0e0:	1000a2b5 	.word	0x1000a2b5
1000a0e4:	10019f9c 	.word	0x10019f9c
1000a0e8:	1000a2ed 	.word	0x1000a2ed
1000a0ec:	1000a2c1 	.word	0x1000a2c1
1000a0f0:	10019fa8 	.word	0x10019fa8
1000a0f4:	40007000 	.word	0x40007000
1000a0f8:	1000a3bd 	.word	0x1000a3bd
1000a0fc:	1000a32d 	.word	0x1000a32d

1000a100 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a100:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a102:	b083      	sub	sp, #12
1000a104:	0004      	movs	r4, r0
1000a106:	000d      	movs	r5, r1
1000a108:	9200      	str	r2, [sp, #0]
1000a10a:	9301      	str	r3, [sp, #4]
1000a10c:	ab08      	add	r3, sp, #32
1000a10e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a110:	2201      	movs	r2, #1
1000a112:	4f08      	ldr	r7, [pc, #32]	; (1000a134 <sms_spi_master_transceive+0x34>)
1000a114:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a116:	0033      	movs	r3, r6
1000a118:	9a01      	ldr	r2, [sp, #4]
1000a11a:	9900      	ldr	r1, [sp, #0]
1000a11c:	0020      	movs	r0, r4
1000a11e:	4e06      	ldr	r6, [pc, #24]	; (1000a138 <sms_spi_master_transceive+0x38>)
1000a120:	47b0      	blx	r6
1000a122:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a124:	2200      	movs	r2, #0
1000a126:	0029      	movs	r1, r5
1000a128:	0020      	movs	r0, r4
1000a12a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a12c:	0030      	movs	r0, r6
1000a12e:	b003      	add	sp, #12
1000a130:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a132:	46c0      	nop			; (mov r8, r8)
1000a134:	1000a5a5 	.word	0x1000a5a5
1000a138:	1000a521 	.word	0x1000a521

1000a13c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a13c:	b510      	push	{r4, lr}
    //if(pressure_device.int_enabled) {
		pressure_device.new_int = true;
1000a13e:	2101      	movs	r1, #1
1000a140:	2329      	movs	r3, #41	; 0x29
1000a142:	4a04      	ldr	r2, [pc, #16]	; (1000a154 <sms_timer_aon_callback+0x18>)
1000a144:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a146:	2300      	movs	r3, #0
1000a148:	2200      	movs	r2, #0
1000a14a:	3102      	adds	r1, #2
1000a14c:	2042      	movs	r0, #66	; 0x42
1000a14e:	4c02      	ldr	r4, [pc, #8]	; (1000a158 <sms_timer_aon_callback+0x1c>)
1000a150:	47a0      	blx	r4
	//}
}
1000a152:	bd10      	pop	{r4, pc}
1000a154:	10019f00 	.word	0x10019f00
1000a158:	1000db39 	.word	0x1000db39

1000a15c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt_ms, enum aon_sleep_timer_mode cnt_mode)
{
1000a15c:	b530      	push	{r4, r5, lr}
1000a15e:	b083      	sub	sp, #12
1000a160:	0004      	movs	r4, r0
1000a162:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a164:	4668      	mov	r0, sp
1000a166:	4b06      	ldr	r3, [pc, #24]	; (1000a180 <sms_timer_aon_init+0x24>)
1000a168:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a16a:	466b      	mov	r3, sp
1000a16c:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt_ms * SMS_TIMER_AON_LOAD_1MS;
1000a16e:	0163      	lsls	r3, r4, #5
1000a170:	191c      	adds	r4, r3, r4
1000a172:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a174:	4668      	mov	r0, sp
1000a176:	4b03      	ldr	r3, [pc, #12]	; (1000a184 <sms_timer_aon_init+0x28>)
1000a178:	4798      	blx	r3
}
1000a17a:	b003      	add	sp, #12
1000a17c:	bd30      	pop	{r4, r5, pc}
1000a17e:	46c0      	nop			; (mov r8, r8)
1000a180:	100080e9 	.word	0x100080e9
1000a184:	10008169 	.word	0x10008169

1000a188 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a188:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a18a:	4b01      	ldr	r3, [pc, #4]	; (1000a190 <sms_timer_aon_disable+0x8>)
1000a18c:	4798      	blx	r3
}
1000a18e:	bd10      	pop	{r4, pc}
1000a190:	100080f9 	.word	0x100080f9

1000a194 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a194:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a196:	4804      	ldr	r0, [pc, #16]	; (1000a1a8 <sms_timer_aon_register_callback+0x14>)
1000a198:	4b04      	ldr	r3, [pc, #16]	; (1000a1ac <sms_timer_aon_register_callback+0x18>)
1000a19a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a19c:	2280      	movs	r2, #128	; 0x80
1000a19e:	0512      	lsls	r2, r2, #20
1000a1a0:	4b03      	ldr	r3, [pc, #12]	; (1000a1b0 <sms_timer_aon_register_callback+0x1c>)
1000a1a2:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a1a4:	bd10      	pop	{r4, pc}
1000a1a6:	46c0      	nop			; (mov r8, r8)
1000a1a8:	1000a13d 	.word	0x1000a13d
1000a1ac:	10008151 	.word	0x10008151
1000a1b0:	e000e100 	.word	0xe000e100

1000a1b4 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a1b4:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a1b6:	4b04      	ldr	r3, [pc, #16]	; (1000a1c8 <sms_timer_aon_unregister_callback+0x14>)
1000a1b8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a1ba:	2180      	movs	r1, #128	; 0x80
1000a1bc:	0509      	lsls	r1, r1, #20
1000a1be:	2380      	movs	r3, #128	; 0x80
1000a1c0:	4a02      	ldr	r2, [pc, #8]	; (1000a1cc <sms_timer_aon_unregister_callback+0x18>)
1000a1c2:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a1c4:	bd10      	pop	{r4, pc}
1000a1c6:	46c0      	nop			; (mov r8, r8)
1000a1c8:	1000815d 	.word	0x1000815d
1000a1cc:	e000e100 	.word	0xe000e100

1000a1d0 <sms_dualtimer_init>:
//{
//}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a1d0:	b510      	push	{r4, lr}
1000a1d2:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a1d4:	ac01      	add	r4, sp, #4
1000a1d6:	0020      	movs	r0, r4
1000a1d8:	4b0c      	ldr	r3, [pc, #48]	; (1000a20c <sms_dualtimer_init+0x3c>)
1000a1da:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000a1dc:	2301      	movs	r3, #1
1000a1de:	425b      	negs	r3, r3
1000a1e0:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a1e2:	3302      	adds	r3, #2
1000a1e4:	7063      	strb	r3, [r4, #1]
	//config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
	//config_dualtimer.timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config_dualtimer.timer1.interrup_enable = false;
1000a1e6:	2200      	movs	r2, #0
1000a1e8:	7122      	strb	r2, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000a1ea:	4909      	ldr	r1, [pc, #36]	; (1000a210 <sms_dualtimer_init+0x40>)
1000a1ec:	6161      	str	r1, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a1ee:	7362      	strb	r2, [r4, #13]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a1f0:	73e2      	strb	r2, [r4, #15]
	config_dualtimer.timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a1f2:	73a3      	strb	r3, [r4, #14]
	config_dualtimer.timer2.interrup_enable = true;
1000a1f4:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000a1f6:	0020      	movs	r0, r4
1000a1f8:	4b06      	ldr	r3, [pc, #24]	; (1000a214 <sms_dualtimer_init+0x44>)
1000a1fa:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a1fc:	2000      	movs	r0, #0
1000a1fe:	4c06      	ldr	r4, [pc, #24]	; (1000a218 <sms_dualtimer_init+0x48>)
1000a200:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a202:	2001      	movs	r0, #1
1000a204:	47a0      	blx	r4
}
1000a206:	b008      	add	sp, #32
1000a208:	bd10      	pop	{r4, pc}
1000a20a:	46c0      	nop			; (mov r8, r8)
1000a20c:	1000a609 	.word	0x1000a609
1000a210:	00006590 	.word	0x00006590
1000a214:	1000a6b1 	.word	0x1000a6b1
1000a218:	1000a68d 	.word	0x1000a68d

1000a21c <sms_dualtimer_start>:
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a21c:	b510      	push	{r4, lr}
1000a21e:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a220:	2801      	cmp	r0, #1
1000a222:	d006      	beq.n	1000a232 <sms_dualtimer_start+0x16>
1000a224:	2800      	cmp	r0, #0
1000a226:	d002      	beq.n	1000a22e <sms_dualtimer_start+0x12>
1000a228:	2802      	cmp	r0, #2
1000a22a:	d004      	beq.n	1000a236 <sms_dualtimer_start+0x1a>
1000a22c:	e005      	b.n	1000a23a <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a22e:	221a      	movs	r2, #26
1000a230:	e004      	b.n	1000a23c <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a232:	4a0c      	ldr	r2, [pc, #48]	; (1000a264 <sms_dualtimer_start+0x48>)
        break;
1000a234:	e002      	b.n	1000a23c <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a236:	4a0c      	ldr	r2, [pc, #48]	; (1000a268 <sms_dualtimer_start+0x4c>)
        break;
1000a238:	e000      	b.n	1000a23c <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a23a:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a23c:	2900      	cmp	r1, #0
1000a23e:	d100      	bne.n	1000a242 <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000a240:	3101      	adds	r1, #1
    }
    
    ulp_ready = false;
1000a242:	2000      	movs	r0, #0
1000a244:	4b09      	ldr	r3, [pc, #36]	; (1000a26c <sms_dualtimer_start+0x50>)
1000a246:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a248:	434a      	muls	r2, r1
1000a24a:	2100      	movs	r1, #0
1000a24c:	0020      	movs	r0, r4
1000a24e:	4b08      	ldr	r3, [pc, #32]	; (1000a270 <sms_dualtimer_start+0x54>)
1000a250:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a252:	0020      	movs	r0, r4
1000a254:	4b07      	ldr	r3, [pc, #28]	; (1000a274 <sms_dualtimer_start+0x58>)
1000a256:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a258:	2280      	movs	r2, #128	; 0x80
1000a25a:	01d2      	lsls	r2, r2, #7
1000a25c:	4b06      	ldr	r3, [pc, #24]	; (1000a278 <sms_dualtimer_start+0x5c>)
1000a25e:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a260:	bd10      	pop	{r4, pc}
1000a262:	46c0      	nop			; (mov r8, r8)
1000a264:	00006590 	.word	0x00006590
1000a268:	018cba80 	.word	0x018cba80
1000a26c:	10019e75 	.word	0x10019e75
1000a270:	1000a641 	.word	0x1000a641
1000a274:	1000a669 	.word	0x1000a669
1000a278:	e000e100 	.word	0xe000e100

1000a27c <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a27c:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a27e:	4b01      	ldr	r3, [pc, #4]	; (1000a284 <sms_dualtimer_stop+0x8>)
1000a280:	4798      	blx	r3
}
1000a282:	bd10      	pop	{r4, pc}
1000a284:	1000a68d 	.word	0x1000a68d

1000a288 <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
1000a288:	b510      	push	{r4, lr}
1000a28a:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a28c:	2201      	movs	r2, #1
1000a28e:	2001      	movs	r0, #1
1000a290:	4b05      	ldr	r3, [pc, #20]	; (1000a2a8 <delay_ms+0x20>)
1000a292:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000a294:	4c05      	ldr	r4, [pc, #20]	; (1000a2ac <delay_ms+0x24>)
1000a296:	2001      	movs	r0, #1
1000a298:	47a0      	blx	r4
1000a29a:	2800      	cmp	r0, #0
1000a29c:	d1fb      	bne.n	1000a296 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a29e:	3001      	adds	r0, #1
1000a2a0:	4b03      	ldr	r3, [pc, #12]	; (1000a2b0 <delay_ms+0x28>)
1000a2a2:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000a2a4:	bd10      	pop	{r4, pc}
1000a2a6:	46c0      	nop			; (mov r8, r8)
1000a2a8:	1000a21d 	.word	0x1000a21d
1000a2ac:	1000a62d 	.word	0x1000a62d
1000a2b0:	1000a68d 	.word	0x1000a68d

1000a2b4 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a2b4:	230c      	movs	r3, #12
1000a2b6:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a2b8:	2300      	movs	r3, #0
1000a2ba:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a2bc:	7083      	strb	r3, [r0, #2]
}
1000a2be:	4770      	bx	lr

1000a2c0 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a2c0:	2301      	movs	r3, #1
1000a2c2:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a2c4:	2300      	movs	r3, #0
1000a2c6:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a2c8:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a2ca:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a2cc:	3381      	adds	r3, #129	; 0x81
1000a2ce:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a2d0:	3b77      	subs	r3, #119	; 0x77
1000a2d2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a2d4:	3301      	adds	r3, #1
1000a2d6:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a2d8:	3301      	adds	r3, #1
1000a2da:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a2dc:	3301      	adds	r3, #1
1000a2de:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a2e0:	3b0b      	subs	r3, #11
1000a2e2:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a2e4:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a2e6:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a2e8:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a2ea:	4770      	bx	lr

1000a2ec <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a2ec:	b530      	push	{r4, r5, lr}
1000a2ee:	b083      	sub	sp, #12
1000a2f0:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a2f2:	780b      	ldrb	r3, [r1, #0]
1000a2f4:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a2f6:	784b      	ldrb	r3, [r1, #1]
1000a2f8:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a2fa:	788b      	ldrb	r3, [r1, #2]
1000a2fc:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a2fe:	ad01      	add	r5, sp, #4
1000a300:	0028      	movs	r0, r5
1000a302:	4b07      	ldr	r3, [pc, #28]	; (1000a320 <spi_attach_slave+0x34>)
1000a304:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a306:	2301      	movs	r3, #1
1000a308:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a30a:	7820      	ldrb	r0, [r4, #0]
1000a30c:	0029      	movs	r1, r5
1000a30e:	4b05      	ldr	r3, [pc, #20]	; (1000a324 <spi_attach_slave+0x38>)
1000a310:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a312:	7820      	ldrb	r0, [r4, #0]
1000a314:	2101      	movs	r1, #1
1000a316:	4b04      	ldr	r3, [pc, #16]	; (1000a328 <spi_attach_slave+0x3c>)
1000a318:	4798      	blx	r3
}
1000a31a:	b003      	add	sp, #12
1000a31c:	bd30      	pop	{r4, r5, pc}
1000a31e:	46c0      	nop			; (mov r8, r8)
1000a320:	1000a905 	.word	0x1000a905
1000a324:	1000a915 	.word	0x1000a915
1000a328:	1000ab1d 	.word	0x1000ab1d

1000a32c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a32c:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a32e:	2201      	movs	r2, #1
1000a330:	761a      	strb	r2, [r3, #24]
}
1000a332:	4770      	bx	lr

1000a334 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a334:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a336:	2300      	movs	r3, #0
1000a338:	6802      	ldr	r2, [r0, #0]
1000a33a:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a33c:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a33e:	4a0d      	ldr	r2, [pc, #52]	; (1000a374 <spi_disable+0x40>)
1000a340:	4293      	cmp	r3, r2
1000a342:	d109      	bne.n	1000a358 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a344:	2041      	movs	r0, #65	; 0x41
1000a346:	4c0c      	ldr	r4, [pc, #48]	; (1000a378 <spi_disable+0x44>)
1000a348:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a34a:	2026      	movs	r0, #38	; 0x26
1000a34c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a34e:	2038      	movs	r0, #56	; 0x38
1000a350:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a352:	2001      	movs	r0, #1
1000a354:	47a0      	blx	r4
1000a356:	e00b      	b.n	1000a370 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a358:	4a08      	ldr	r2, [pc, #32]	; (1000a37c <spi_disable+0x48>)
1000a35a:	4293      	cmp	r3, r2
1000a35c:	d108      	bne.n	1000a370 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a35e:	2042      	movs	r0, #66	; 0x42
1000a360:	4c05      	ldr	r4, [pc, #20]	; (1000a378 <spi_disable+0x44>)
1000a362:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a364:	2027      	movs	r0, #39	; 0x27
1000a366:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a368:	2039      	movs	r0, #57	; 0x39
1000a36a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a36c:	2002      	movs	r0, #2
1000a36e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a370:	bd10      	pop	{r4, pc}
1000a372:	46c0      	nop			; (mov r8, r8)
1000a374:	40006000 	.word	0x40006000
1000a378:	1000b2b5 	.word	0x1000b2b5
1000a37c:	40007000 	.word	0x40007000

1000a380 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a380:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a382:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a384:	4b09      	ldr	r3, [pc, #36]	; (1000a3ac <spi_reset+0x2c>)
1000a386:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a388:	4b09      	ldr	r3, [pc, #36]	; (1000a3b0 <spi_reset+0x30>)
1000a38a:	429c      	cmp	r4, r3
1000a38c:	d105      	bne.n	1000a39a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a38e:	2001      	movs	r0, #1
1000a390:	4c08      	ldr	r4, [pc, #32]	; (1000a3b4 <spi_reset+0x34>)
1000a392:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a394:	2038      	movs	r0, #56	; 0x38
1000a396:	47a0      	blx	r4
1000a398:	e007      	b.n	1000a3aa <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a39a:	4b07      	ldr	r3, [pc, #28]	; (1000a3b8 <spi_reset+0x38>)
1000a39c:	429c      	cmp	r4, r3
1000a39e:	d104      	bne.n	1000a3aa <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a3a0:	2002      	movs	r0, #2
1000a3a2:	4c04      	ldr	r4, [pc, #16]	; (1000a3b4 <spi_reset+0x34>)
1000a3a4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a3a6:	2039      	movs	r0, #57	; 0x39
1000a3a8:	47a0      	blx	r4
	}
}
1000a3aa:	bd10      	pop	{r4, pc}
1000a3ac:	1000a335 	.word	0x1000a335
1000a3b0:	40006000 	.word	0x40006000
1000a3b4:	1000b621 	.word	0x1000b621
1000a3b8:	40007000 	.word	0x40007000

1000a3bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3be:	465f      	mov	r7, fp
1000a3c0:	4646      	mov	r6, r8
1000a3c2:	b4c0      	push	{r6, r7}
1000a3c4:	b083      	sub	sp, #12
1000a3c6:	0006      	movs	r6, r0
1000a3c8:	4688      	mov	r8, r1
1000a3ca:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a3cc:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a3ce:	7e0b      	ldrb	r3, [r1, #24]
1000a3d0:	07db      	lsls	r3, r3, #31
1000a3d2:	d501      	bpl.n	1000a3d8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a3d4:	2300      	movs	r3, #0
1000a3d6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a3d8:	0030      	movs	r0, r6
1000a3da:	4b4a      	ldr	r3, [pc, #296]	; (1000a504 <spi_init+0x148>)
1000a3dc:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a3de:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a3e0:	4a49      	ldr	r2, [pc, #292]	; (1000a508 <spi_init+0x14c>)
1000a3e2:	4293      	cmp	r3, r2
1000a3e4:	d109      	bne.n	1000a3fa <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a3e6:	2041      	movs	r0, #65	; 0x41
1000a3e8:	4c48      	ldr	r4, [pc, #288]	; (1000a50c <spi_init+0x150>)
1000a3ea:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a3ec:	2026      	movs	r0, #38	; 0x26
1000a3ee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a3f0:	2038      	movs	r0, #56	; 0x38
1000a3f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a3f4:	2001      	movs	r0, #1
1000a3f6:	47a0      	blx	r4
1000a3f8:	e00b      	b.n	1000a412 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a3fa:	4a45      	ldr	r2, [pc, #276]	; (1000a510 <spi_init+0x154>)
1000a3fc:	4293      	cmp	r3, r2
1000a3fe:	d108      	bne.n	1000a412 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a400:	2042      	movs	r0, #66	; 0x42
1000a402:	4c42      	ldr	r4, [pc, #264]	; (1000a50c <spi_init+0x150>)
1000a404:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a406:	2027      	movs	r0, #39	; 0x27
1000a408:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a40a:	2039      	movs	r0, #57	; 0x39
1000a40c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a40e:	2002      	movs	r0, #2
1000a410:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a412:	a801      	add	r0, sp, #4
1000a414:	4b3f      	ldr	r3, [pc, #252]	; (1000a514 <spi_init+0x158>)
1000a416:	4798      	blx	r3
1000a418:	002c      	movs	r4, r5
1000a41a:	3408      	adds	r4, #8
1000a41c:	2318      	movs	r3, #24
1000a41e:	469b      	mov	fp, r3
1000a420:	44ab      	add	fp, r5
1000a422:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a424:	6820      	ldr	r0, [r4, #0]
1000a426:	1c43      	adds	r3, r0, #1
1000a428:	d011      	beq.n	1000a44e <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a42a:	782b      	ldrb	r3, [r5, #0]
1000a42c:	2b01      	cmp	r3, #1
1000a42e:	d102      	bne.n	1000a436 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a430:	466a      	mov	r2, sp
1000a432:	7113      	strb	r3, [r2, #4]
1000a434:	e003      	b.n	1000a43e <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a436:	2b00      	cmp	r3, #0
1000a438:	d101      	bne.n	1000a43e <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a43a:	466a      	mov	r2, sp
1000a43c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a43e:	b2c0      	uxtb	r0, r0
1000a440:	a901      	add	r1, sp, #4
1000a442:	4b35      	ldr	r3, [pc, #212]	; (1000a518 <spi_init+0x15c>)
1000a444:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a446:	8a39      	ldrh	r1, [r7, #16]
1000a448:	7838      	ldrb	r0, [r7, #0]
1000a44a:	4b34      	ldr	r3, [pc, #208]	; (1000a51c <spi_init+0x160>)
1000a44c:	4798      	blx	r3
1000a44e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a450:	455c      	cmp	r4, fp
1000a452:	d1e6      	bne.n	1000a422 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a454:	78eb      	ldrb	r3, [r5, #3]
1000a456:	4642      	mov	r2, r8
1000a458:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a45a:	782b      	ldrb	r3, [r5, #0]
1000a45c:	2b01      	cmp	r3, #1
1000a45e:	d100      	bne.n	1000a462 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a460:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a462:	782b      	ldrb	r3, [r5, #0]
1000a464:	2b00      	cmp	r3, #0
1000a466:	d101      	bne.n	1000a46c <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a468:	4642      	mov	r2, r8
1000a46a:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a46c:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a46e:	782a      	ldrb	r2, [r5, #0]
1000a470:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a472:	782a      	ldrb	r2, [r5, #0]
1000a474:	2a01      	cmp	r2, #1
1000a476:	d101      	bne.n	1000a47c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a478:	792a      	ldrb	r2, [r5, #4]
1000a47a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a47c:	786a      	ldrb	r2, [r5, #1]
1000a47e:	2a04      	cmp	r2, #4
1000a480:	d104      	bne.n	1000a48c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a482:	2124      	movs	r1, #36	; 0x24
1000a484:	5c58      	ldrb	r0, [r3, r1]
1000a486:	4302      	orrs	r2, r0
1000a488:	545a      	strb	r2, [r3, r1]
1000a48a:	e004      	b.n	1000a496 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a48c:	2124      	movs	r1, #36	; 0x24
1000a48e:	5c5a      	ldrb	r2, [r3, r1]
1000a490:	2004      	movs	r0, #4
1000a492:	4382      	bics	r2, r0
1000a494:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a496:	78aa      	ldrb	r2, [r5, #2]
1000a498:	2a01      	cmp	r2, #1
1000a49a:	d01a      	beq.n	1000a4d2 <spi_init+0x116>
1000a49c:	2a00      	cmp	r2, #0
1000a49e:	d004      	beq.n	1000a4aa <spi_init+0xee>
1000a4a0:	2a02      	cmp	r2, #2
1000a4a2:	d00c      	beq.n	1000a4be <spi_init+0x102>
1000a4a4:	2a03      	cmp	r2, #3
1000a4a6:	d01e      	beq.n	1000a4e6 <spi_init+0x12a>
1000a4a8:	e026      	b.n	1000a4f8 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a4aa:	2224      	movs	r2, #36	; 0x24
1000a4ac:	5c99      	ldrb	r1, [r3, r2]
1000a4ae:	2002      	movs	r0, #2
1000a4b0:	4381      	bics	r1, r0
1000a4b2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a4b4:	5c99      	ldrb	r1, [r3, r2]
1000a4b6:	3801      	subs	r0, #1
1000a4b8:	4381      	bics	r1, r0
1000a4ba:	5499      	strb	r1, [r3, r2]
1000a4bc:	e01c      	b.n	1000a4f8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a4be:	2224      	movs	r2, #36	; 0x24
1000a4c0:	5c98      	ldrb	r0, [r3, r2]
1000a4c2:	2102      	movs	r1, #2
1000a4c4:	4301      	orrs	r1, r0
1000a4c6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a4c8:	5c99      	ldrb	r1, [r3, r2]
1000a4ca:	2001      	movs	r0, #1
1000a4cc:	4381      	bics	r1, r0
1000a4ce:	5499      	strb	r1, [r3, r2]
1000a4d0:	e012      	b.n	1000a4f8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a4d2:	2224      	movs	r2, #36	; 0x24
1000a4d4:	5c99      	ldrb	r1, [r3, r2]
1000a4d6:	2002      	movs	r0, #2
1000a4d8:	4381      	bics	r1, r0
1000a4da:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a4dc:	5c98      	ldrb	r0, [r3, r2]
1000a4de:	2101      	movs	r1, #1
1000a4e0:	4301      	orrs	r1, r0
1000a4e2:	5499      	strb	r1, [r3, r2]
1000a4e4:	e008      	b.n	1000a4f8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a4e6:	2224      	movs	r2, #36	; 0x24
1000a4e8:	5c98      	ldrb	r0, [r3, r2]
1000a4ea:	2102      	movs	r1, #2
1000a4ec:	4301      	orrs	r1, r0
1000a4ee:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a4f0:	5c98      	ldrb	r0, [r3, r2]
1000a4f2:	2101      	movs	r1, #1
1000a4f4:	4301      	orrs	r1, r0
1000a4f6:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a4f8:	2000      	movs	r0, #0
1000a4fa:	b003      	add	sp, #12
1000a4fc:	bc0c      	pop	{r2, r3}
1000a4fe:	4690      	mov	r8, r2
1000a500:	469b      	mov	fp, r3
1000a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a504:	1000a381 	.word	0x1000a381
1000a508:	40006000 	.word	0x40006000
1000a50c:	1000af59 	.word	0x1000af59
1000a510:	40007000 	.word	0x40007000
1000a514:	1000a905 	.word	0x1000a905
1000a518:	1000a915 	.word	0x1000a915
1000a51c:	1000aba9 	.word	0x1000aba9

1000a520 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a520:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a522:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a524:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a526:	2600      	movs	r6, #0
1000a528:	466d      	mov	r5, sp
1000a52a:	71ee      	strb	r6, [r5, #7]
1000a52c:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a52e:	2c00      	cmp	r4, #0
1000a530:	d034      	beq.n	1000a59c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a532:	2900      	cmp	r1, #0
1000a534:	d104      	bne.n	1000a540 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a536:	0029      	movs	r1, r5
1000a538:	7980      	ldrb	r0, [r0, #6]
1000a53a:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a53c:	2701      	movs	r7, #1
1000a53e:	e00b      	b.n	1000a558 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a540:	2a00      	cmp	r2, #0
1000a542:	d005      	beq.n	1000a550 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a544:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a546:	2b00      	cmp	r3, #0
1000a548:	d029      	beq.n	1000a59e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a54a:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a54c:	2700      	movs	r7, #0
1000a54e:	e003      	b.n	1000a558 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a550:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a552:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a554:	466a      	mov	r2, sp
1000a556:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a558:	2528      	movs	r5, #40	; 0x28
1000a55a:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a55c:	07c0      	lsls	r0, r0, #31
1000a55e:	d4fc      	bmi.n	1000a55a <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a560:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a562:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a564:	2b00      	cmp	r3, #0
1000a566:	d014      	beq.n	1000a592 <spi_transceive_buffer_wait+0x72>
1000a568:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a56a:	4278      	negs	r0, r7
1000a56c:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a56e:	4270      	negs	r0, r6
1000a570:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a572:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a574:	07c0      	lsls	r0, r0, #31
1000a576:	d5fc      	bpl.n	1000a572 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a578:	7808      	ldrb	r0, [r1, #0]
1000a57a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a57c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a57e:	07c0      	lsls	r0, r0, #31
1000a580:	d5fc      	bpl.n	1000a57c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a582:	7920      	ldrb	r0, [r4, #4]
1000a584:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a586:	3501      	adds	r5, #1
1000a588:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a58a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a58c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a58e:	42ab      	cmp	r3, r5
1000a590:	d1ef      	bne.n	1000a572 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a592:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a594:	06db      	lsls	r3, r3, #27
1000a596:	d5fc      	bpl.n	1000a592 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a598:	2000      	movs	r0, #0
1000a59a:	e000      	b.n	1000a59e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a59c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a59e:	b003      	add	sp, #12
1000a5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5a2:	46c0      	nop			; (mov r8, r8)

1000a5a4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a5a4:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a5a6:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a5a8:	2a00      	cmp	r2, #0
1000a5aa:	d003      	beq.n	1000a5b4 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a5ac:	2100      	movs	r1, #0
1000a5ae:	4b04      	ldr	r3, [pc, #16]	; (1000a5c0 <spi_select_slave+0x1c>)
1000a5b0:	4798      	blx	r3
1000a5b2:	e002      	b.n	1000a5ba <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a5b4:	2101      	movs	r1, #1
1000a5b6:	4b02      	ldr	r3, [pc, #8]	; (1000a5c0 <spi_select_slave+0x1c>)
1000a5b8:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a5ba:	2000      	movs	r0, #0
1000a5bc:	bd10      	pop	{r4, pc}
1000a5be:	46c0      	nop			; (mov r8, r8)
1000a5c0:	1000ab1d 	.word	0x1000ab1d

1000a5c4 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a5c4:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a5c6:	4b0d      	ldr	r3, [pc, #52]	; (1000a5fc <dualtimer_isr_handler+0x38>)
1000a5c8:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a5ca:	2b00      	cmp	r3, #0
1000a5cc:	d007      	beq.n	1000a5de <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a5ce:	2201      	movs	r2, #1
1000a5d0:	4b0a      	ldr	r3, [pc, #40]	; (1000a5fc <dualtimer_isr_handler+0x38>)
1000a5d2:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a5d4:	4b0a      	ldr	r3, [pc, #40]	; (1000a600 <dualtimer_isr_handler+0x3c>)
1000a5d6:	681b      	ldr	r3, [r3, #0]
1000a5d8:	2b00      	cmp	r3, #0
1000a5da:	d000      	beq.n	1000a5de <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a5dc:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a5de:	2334      	movs	r3, #52	; 0x34
1000a5e0:	4a06      	ldr	r2, [pc, #24]	; (1000a5fc <dualtimer_isr_handler+0x38>)
1000a5e2:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a5e4:	2b00      	cmp	r3, #0
1000a5e6:	d007      	beq.n	1000a5f8 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a5e8:	2101      	movs	r1, #1
1000a5ea:	232c      	movs	r3, #44	; 0x2c
1000a5ec:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a5ee:	4b05      	ldr	r3, [pc, #20]	; (1000a604 <dualtimer_isr_handler+0x40>)
1000a5f0:	681b      	ldr	r3, [r3, #0]
1000a5f2:	2b00      	cmp	r3, #0
1000a5f4:	d000      	beq.n	1000a5f8 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a5f6:	4798      	blx	r3
	}
}
1000a5f8:	bd10      	pop	{r4, pc}
1000a5fa:	46c0      	nop			; (mov r8, r8)
1000a5fc:	40001000 	.word	0x40001000
1000a600:	100183c8 	.word	0x100183c8
1000a604:	100183cc 	.word	0x100183cc

1000a608 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a608:	2301      	movs	r3, #1
1000a60a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a60c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a60e:	2202      	movs	r2, #2
1000a610:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a612:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a614:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a616:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a618:	2200      	movs	r2, #0
1000a61a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a61c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a61e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a620:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a622:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a624:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a626:	7602      	strb	r2, [r0, #24]
}
1000a628:	4770      	bx	lr
1000a62a:	46c0      	nop			; (mov r8, r8)

1000a62c <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a62c:	2800      	cmp	r0, #0
1000a62e:	d102      	bne.n	1000a636 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a630:	4b02      	ldr	r3, [pc, #8]	; (1000a63c <dualtimer_get_value+0x10>)
1000a632:	6858      	ldr	r0, [r3, #4]
1000a634:	e001      	b.n	1000a63a <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a636:	4b01      	ldr	r3, [pc, #4]	; (1000a63c <dualtimer_get_value+0x10>)
1000a638:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a63a:	4770      	bx	lr
1000a63c:	40001000 	.word	0x40001000

1000a640 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a640:	2800      	cmp	r0, #0
1000a642:	d107      	bne.n	1000a654 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a644:	2900      	cmp	r1, #0
1000a646:	d102      	bne.n	1000a64e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a648:	4b06      	ldr	r3, [pc, #24]	; (1000a664 <dualtimer_set_counter+0x24>)
1000a64a:	601a      	str	r2, [r3, #0]
1000a64c:	e009      	b.n	1000a662 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a64e:	4b05      	ldr	r3, [pc, #20]	; (1000a664 <dualtimer_set_counter+0x24>)
1000a650:	619a      	str	r2, [r3, #24]
1000a652:	e006      	b.n	1000a662 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a654:	2900      	cmp	r1, #0
1000a656:	d102      	bne.n	1000a65e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a658:	4b02      	ldr	r3, [pc, #8]	; (1000a664 <dualtimer_set_counter+0x24>)
1000a65a:	621a      	str	r2, [r3, #32]
1000a65c:	e001      	b.n	1000a662 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a65e:	4b01      	ldr	r3, [pc, #4]	; (1000a664 <dualtimer_set_counter+0x24>)
1000a660:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a662:	4770      	bx	lr
1000a664:	40001000 	.word	0x40001000

1000a668 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a668:	2800      	cmp	r0, #0
1000a66a:	d105      	bne.n	1000a678 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a66c:	4a06      	ldr	r2, [pc, #24]	; (1000a688 <dualtimer_enable+0x20>)
1000a66e:	7a11      	ldrb	r1, [r2, #8]
1000a670:	2380      	movs	r3, #128	; 0x80
1000a672:	430b      	orrs	r3, r1
1000a674:	7213      	strb	r3, [r2, #8]
1000a676:	e005      	b.n	1000a684 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a678:	4903      	ldr	r1, [pc, #12]	; (1000a688 <dualtimer_enable+0x20>)
1000a67a:	2228      	movs	r2, #40	; 0x28
1000a67c:	5c88      	ldrb	r0, [r1, r2]
1000a67e:	2380      	movs	r3, #128	; 0x80
1000a680:	4303      	orrs	r3, r0
1000a682:	548b      	strb	r3, [r1, r2]
	}
}
1000a684:	4770      	bx	lr
1000a686:	46c0      	nop			; (mov r8, r8)
1000a688:	40001000 	.word	0x40001000

1000a68c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a68c:	2800      	cmp	r0, #0
1000a68e:	d105      	bne.n	1000a69c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a690:	4a06      	ldr	r2, [pc, #24]	; (1000a6ac <dualtimer_disable+0x20>)
1000a692:	7a11      	ldrb	r1, [r2, #8]
1000a694:	237f      	movs	r3, #127	; 0x7f
1000a696:	400b      	ands	r3, r1
1000a698:	7213      	strb	r3, [r2, #8]
1000a69a:	e005      	b.n	1000a6a8 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a69c:	4903      	ldr	r1, [pc, #12]	; (1000a6ac <dualtimer_disable+0x20>)
1000a69e:	2228      	movs	r2, #40	; 0x28
1000a6a0:	5c88      	ldrb	r0, [r1, r2]
1000a6a2:	237f      	movs	r3, #127	; 0x7f
1000a6a4:	4003      	ands	r3, r0
1000a6a6:	548b      	strb	r3, [r1, r2]
	}
}
1000a6a8:	4770      	bx	lr
1000a6aa:	46c0      	nop			; (mov r8, r8)
1000a6ac:	40001000 	.word	0x40001000

1000a6b0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a6b0:	b570      	push	{r4, r5, r6, lr}
1000a6b2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a6b4:	2004      	movs	r0, #4
1000a6b6:	4b39      	ldr	r3, [pc, #228]	; (1000a79c <dualtimer_init+0xec>)
1000a6b8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a6ba:	7823      	ldrb	r3, [r4, #0]
1000a6bc:	2b00      	cmp	r3, #0
1000a6be:	d102      	bne.n	1000a6c6 <dualtimer_init+0x16>
1000a6c0:	7b23      	ldrb	r3, [r4, #12]
1000a6c2:	2b00      	cmp	r3, #0
1000a6c4:	d065      	beq.n	1000a792 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a6c6:	4936      	ldr	r1, [pc, #216]	; (1000a7a0 <dualtimer_init+0xf0>)
1000a6c8:	68ca      	ldr	r2, [r1, #12]
1000a6ca:	2320      	movs	r3, #32
1000a6cc:	4313      	orrs	r3, r2
1000a6ce:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a6d0:	7e22      	ldrb	r2, [r4, #24]
1000a6d2:	698b      	ldr	r3, [r1, #24]
1000a6d4:	2003      	movs	r0, #3
1000a6d6:	4002      	ands	r2, r0
1000a6d8:	0112      	lsls	r2, r2, #4
1000a6da:	302d      	adds	r0, #45	; 0x2d
1000a6dc:	4383      	bics	r3, r0
1000a6de:	4313      	orrs	r3, r2
1000a6e0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a6e2:	7823      	ldrb	r3, [r4, #0]
1000a6e4:	2b00      	cmp	r3, #0
1000a6e6:	d026      	beq.n	1000a736 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a6e8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a6ea:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a6ec:	2b00      	cmp	r3, #0
1000a6ee:	d003      	beq.n	1000a6f8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a6f0:	3b02      	subs	r3, #2
1000a6f2:	425d      	negs	r5, r3
1000a6f4:	415d      	adcs	r5, r3
1000a6f6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a6f8:	78a2      	ldrb	r2, [r4, #2]
1000a6fa:	0052      	lsls	r2, r2, #1
1000a6fc:	2502      	movs	r5, #2
1000a6fe:	402a      	ands	r2, r5
1000a700:	78e3      	ldrb	r3, [r4, #3]
1000a702:	009b      	lsls	r3, r3, #2
1000a704:	350a      	adds	r5, #10
1000a706:	402b      	ands	r3, r5
1000a708:	431a      	orrs	r2, r3
1000a70a:	0015      	movs	r5, r2
1000a70c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a70e:	7923      	ldrb	r3, [r4, #4]
1000a710:	2b00      	cmp	r3, #0
1000a712:	d001      	beq.n	1000a718 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a714:	2320      	movs	r3, #32
1000a716:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a718:	4b22      	ldr	r3, [pc, #136]	; (1000a7a4 <dualtimer_init+0xf4>)
1000a71a:	68a2      	ldr	r2, [r4, #8]
1000a71c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a71e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a720:	491f      	ldr	r1, [pc, #124]	; (1000a7a0 <dualtimer_init+0xf0>)
1000a722:	22c4      	movs	r2, #196	; 0xc4
1000a724:	0052      	lsls	r2, r2, #1
1000a726:	5c88      	ldrb	r0, [r1, r2]
1000a728:	2301      	movs	r3, #1
1000a72a:	4303      	orrs	r3, r0
1000a72c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a72e:	2000      	movs	r0, #0
1000a730:	4b1d      	ldr	r3, [pc, #116]	; (1000a7a8 <dualtimer_init+0xf8>)
1000a732:	4798      	blx	r3
1000a734:	e000      	b.n	1000a738 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a736:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a738:	7b23      	ldrb	r3, [r4, #12]
1000a73a:	2b00      	cmp	r3, #0
1000a73c:	d029      	beq.n	1000a792 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a73e:	7b63      	ldrb	r3, [r4, #13]
1000a740:	2b00      	cmp	r3, #0
1000a742:	d005      	beq.n	1000a750 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a744:	2b01      	cmp	r3, #1
1000a746:	d005      	beq.n	1000a754 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a748:	2b02      	cmp	r3, #2
1000a74a:	d104      	bne.n	1000a756 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a74c:	2540      	movs	r5, #64	; 0x40
1000a74e:	e002      	b.n	1000a756 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a750:	2501      	movs	r5, #1
1000a752:	e000      	b.n	1000a756 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a754:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a756:	7ba3      	ldrb	r3, [r4, #14]
1000a758:	005b      	lsls	r3, r3, #1
1000a75a:	2102      	movs	r1, #2
1000a75c:	4019      	ands	r1, r3
1000a75e:	7be2      	ldrb	r2, [r4, #15]
1000a760:	0092      	lsls	r2, r2, #2
1000a762:	230c      	movs	r3, #12
1000a764:	4013      	ands	r3, r2
1000a766:	430b      	orrs	r3, r1
1000a768:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a76a:	7c23      	ldrb	r3, [r4, #16]
1000a76c:	2b00      	cmp	r3, #0
1000a76e:	d001      	beq.n	1000a774 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a770:	2320      	movs	r3, #32
1000a772:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a774:	6962      	ldr	r2, [r4, #20]
1000a776:	4b0b      	ldr	r3, [pc, #44]	; (1000a7a4 <dualtimer_init+0xf4>)
1000a778:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a77a:	2228      	movs	r2, #40	; 0x28
1000a77c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a77e:	4908      	ldr	r1, [pc, #32]	; (1000a7a0 <dualtimer_init+0xf0>)
1000a780:	3261      	adds	r2, #97	; 0x61
1000a782:	32ff      	adds	r2, #255	; 0xff
1000a784:	5c88      	ldrb	r0, [r1, r2]
1000a786:	2302      	movs	r3, #2
1000a788:	4303      	orrs	r3, r0
1000a78a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a78c:	2001      	movs	r0, #1
1000a78e:	4b06      	ldr	r3, [pc, #24]	; (1000a7a8 <dualtimer_init+0xf8>)
1000a790:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a792:	4906      	ldr	r1, [pc, #24]	; (1000a7ac <dualtimer_init+0xfc>)
1000a794:	201e      	movs	r0, #30
1000a796:	4b06      	ldr	r3, [pc, #24]	; (1000a7b0 <dualtimer_init+0x100>)
1000a798:	4798      	blx	r3
}
1000a79a:	bd70      	pop	{r4, r5, r6, pc}
1000a79c:	1000b621 	.word	0x1000b621
1000a7a0:	4000b000 	.word	0x4000b000
1000a7a4:	40001000 	.word	0x40001000
1000a7a8:	1000a669 	.word	0x1000a669
1000a7ac:	1000a5c5 	.word	0x1000a5c5
1000a7b0:	1000ba89 	.word	0x1000ba89

1000a7b4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a7b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a7b6:	4b16      	ldr	r3, [pc, #88]	; (1000a810 <gpio_port0_isr_handler+0x5c>)
1000a7b8:	681d      	ldr	r5, [r3, #0]
1000a7ba:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a7bc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a7be:	07cb      	lsls	r3, r1, #31
1000a7c0:	d407      	bmi.n	1000a7d2 <gpio_port0_isr_handler+0x1e>
1000a7c2:	2301      	movs	r3, #1
1000a7c4:	2401      	movs	r4, #1
1000a7c6:	0018      	movs	r0, r3
1000a7c8:	0022      	movs	r2, r4
1000a7ca:	409a      	lsls	r2, r3
1000a7cc:	4211      	tst	r1, r2
1000a7ce:	d014      	beq.n	1000a7fa <gpio_port0_isr_handler+0x46>
1000a7d0:	e001      	b.n	1000a7d6 <gpio_port0_isr_handler+0x22>
1000a7d2:	2201      	movs	r2, #1
1000a7d4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a7d6:	b292      	uxth	r2, r2
1000a7d8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a7da:	2346      	movs	r3, #70	; 0x46
1000a7dc:	4a0c      	ldr	r2, [pc, #48]	; (1000a810 <gpio_port0_isr_handler+0x5c>)
1000a7de:	5ad3      	ldrh	r3, [r2, r3]
1000a7e0:	4103      	asrs	r3, r0
1000a7e2:	07db      	lsls	r3, r3, #31
1000a7e4:	d50c      	bpl.n	1000a800 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a7e6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a7e8:	5ad3      	ldrh	r3, [r2, r3]
1000a7ea:	4103      	asrs	r3, r0
1000a7ec:	07db      	lsls	r3, r3, #31
1000a7ee:	d507      	bpl.n	1000a800 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a7f0:	0080      	lsls	r0, r0, #2
1000a7f2:	1810      	adds	r0, r2, r0
1000a7f4:	6843      	ldr	r3, [r0, #4]
1000a7f6:	4798      	blx	r3
1000a7f8:	e002      	b.n	1000a800 <gpio_port0_isr_handler+0x4c>
1000a7fa:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a7fc:	2b10      	cmp	r3, #16
1000a7fe:	d1e2      	bne.n	1000a7c6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a800:	2180      	movs	r1, #128	; 0x80
1000a802:	0409      	lsls	r1, r1, #16
1000a804:	23c0      	movs	r3, #192	; 0xc0
1000a806:	005b      	lsls	r3, r3, #1
1000a808:	4a02      	ldr	r2, [pc, #8]	; (1000a814 <gpio_port0_isr_handler+0x60>)
1000a80a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a80c:	bd70      	pop	{r4, r5, r6, pc}
1000a80e:	46c0      	nop			; (mov r8, r8)
1000a810:	1001a0a0 	.word	0x1001a0a0
1000a814:	e000e100 	.word	0xe000e100

1000a818 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a81a:	4b18      	ldr	r3, [pc, #96]	; (1000a87c <gpio_port1_isr_handler+0x64>)
1000a81c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a81e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a820:	b2b6      	uxth	r6, r6
1000a822:	0037      	movs	r7, r6
1000a824:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a826:	0b76      	lsrs	r6, r6, #13
1000a828:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a82a:	4d14      	ldr	r5, [pc, #80]	; (1000a87c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a82c:	2e00      	cmp	r6, #0
1000a82e:	d001      	beq.n	1000a834 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a830:	4b13      	ldr	r3, [pc, #76]	; (1000a880 <gpio_port1_isr_handler+0x68>)
1000a832:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a834:	0022      	movs	r2, r4
1000a836:	2301      	movs	r3, #1
1000a838:	40a3      	lsls	r3, r4
1000a83a:	421f      	tst	r7, r3
1000a83c:	d013      	beq.n	1000a866 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a83e:	b29b      	uxth	r3, r3
1000a840:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a842:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a844:	238e      	movs	r3, #142	; 0x8e
1000a846:	5aeb      	ldrh	r3, [r5, r3]
1000a848:	4123      	asrs	r3, r4
1000a84a:	07db      	lsls	r3, r3, #31
1000a84c:	d50b      	bpl.n	1000a866 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a84e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a850:	490a      	ldr	r1, [pc, #40]	; (1000a87c <gpio_port1_isr_handler+0x64>)
1000a852:	5acb      	ldrh	r3, [r1, r3]
1000a854:	4123      	asrs	r3, r4
1000a856:	07db      	lsls	r3, r3, #31
1000a858:	d505      	bpl.n	1000a866 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a85a:	3212      	adds	r2, #18
1000a85c:	0092      	lsls	r2, r2, #2
1000a85e:	188a      	adds	r2, r1, r2
1000a860:	6853      	ldr	r3, [r2, #4]
1000a862:	4798      	blx	r3
				break;
1000a864:	e002      	b.n	1000a86c <gpio_port1_isr_handler+0x54>
1000a866:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a868:	2c10      	cmp	r4, #16
1000a86a:	d1df      	bne.n	1000a82c <gpio_port1_isr_handler+0x14>
1000a86c:	2180      	movs	r1, #128	; 0x80
1000a86e:	0449      	lsls	r1, r1, #17
1000a870:	23c0      	movs	r3, #192	; 0xc0
1000a872:	005b      	lsls	r3, r3, #1
1000a874:	4a03      	ldr	r2, [pc, #12]	; (1000a884 <gpio_port1_isr_handler+0x6c>)
1000a876:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a87a:	46c0      	nop			; (mov r8, r8)
1000a87c:	1001a0a0 	.word	0x1001a0a0
1000a880:	0001bc51 	.word	0x0001bc51
1000a884:	e000e100 	.word	0xe000e100

1000a888 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a888:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a88a:	2390      	movs	r3, #144	; 0x90
1000a88c:	4a1b      	ldr	r2, [pc, #108]	; (1000a8fc <gpio_port2_isr_handler+0x74>)
1000a88e:	58d2      	ldr	r2, [r2, r3]
1000a890:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a892:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a894:	04d9      	lsls	r1, r3, #19
1000a896:	d414      	bmi.n	1000a8c2 <gpio_port2_isr_handler+0x3a>
1000a898:	0499      	lsls	r1, r3, #18
1000a89a:	d40a      	bmi.n	1000a8b2 <gpio_port2_isr_handler+0x2a>
1000a89c:	0459      	lsls	r1, r3, #17
1000a89e:	d40c      	bmi.n	1000a8ba <gpio_port2_isr_handler+0x32>
1000a8a0:	0bdb      	lsrs	r3, r3, #15
1000a8a2:	03db      	lsls	r3, r3, #15
1000a8a4:	b29b      	uxth	r3, r3
1000a8a6:	2b00      	cmp	r3, #0
1000a8a8:	d020      	beq.n	1000a8ec <gpio_port2_isr_handler+0x64>
1000a8aa:	2380      	movs	r3, #128	; 0x80
1000a8ac:	021b      	lsls	r3, r3, #8
1000a8ae:	210f      	movs	r1, #15
1000a8b0:	e00a      	b.n	1000a8c8 <gpio_port2_isr_handler+0x40>
1000a8b2:	2380      	movs	r3, #128	; 0x80
1000a8b4:	019b      	lsls	r3, r3, #6
1000a8b6:	210d      	movs	r1, #13
1000a8b8:	e006      	b.n	1000a8c8 <gpio_port2_isr_handler+0x40>
1000a8ba:	2380      	movs	r3, #128	; 0x80
1000a8bc:	01db      	lsls	r3, r3, #7
1000a8be:	210e      	movs	r1, #14
1000a8c0:	e002      	b.n	1000a8c8 <gpio_port2_isr_handler+0x40>
1000a8c2:	2380      	movs	r3, #128	; 0x80
1000a8c4:	015b      	lsls	r3, r3, #5
1000a8c6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8c8:	b29b      	uxth	r3, r3
1000a8ca:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a8cc:	23d6      	movs	r3, #214	; 0xd6
1000a8ce:	4a0b      	ldr	r2, [pc, #44]	; (1000a8fc <gpio_port2_isr_handler+0x74>)
1000a8d0:	5ad3      	ldrh	r3, [r2, r3]
1000a8d2:	410b      	asrs	r3, r1
1000a8d4:	07db      	lsls	r3, r3, #31
1000a8d6:	d509      	bpl.n	1000a8ec <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a8d8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a8da:	5ad3      	ldrh	r3, [r2, r3]
1000a8dc:	410b      	asrs	r3, r1
1000a8de:	07db      	lsls	r3, r3, #31
1000a8e0:	d504      	bpl.n	1000a8ec <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a8e2:	3124      	adds	r1, #36	; 0x24
1000a8e4:	0089      	lsls	r1, r1, #2
1000a8e6:	1851      	adds	r1, r2, r1
1000a8e8:	684b      	ldr	r3, [r1, #4]
1000a8ea:	4798      	blx	r3
1000a8ec:	2180      	movs	r1, #128	; 0x80
1000a8ee:	0489      	lsls	r1, r1, #18
1000a8f0:	23c0      	movs	r3, #192	; 0xc0
1000a8f2:	005b      	lsls	r3, r3, #1
1000a8f4:	4a02      	ldr	r2, [pc, #8]	; (1000a900 <gpio_port2_isr_handler+0x78>)
1000a8f6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a8f8:	bd10      	pop	{r4, pc}
1000a8fa:	46c0      	nop			; (mov r8, r8)
1000a8fc:	1001a0a0 	.word	0x1001a0a0
1000a900:	e000e100 	.word	0xe000e100

1000a904 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a904:	2300      	movs	r3, #0
1000a906:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a908:	2201      	movs	r2, #1
1000a90a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a90c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a90e:	70c3      	strb	r3, [r0, #3]
}
1000a910:	4770      	bx	lr
1000a912:	46c0      	nop			; (mov r8, r8)

1000a914 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a914:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a916:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a918:	2801      	cmp	r0, #1
1000a91a:	d800      	bhi.n	1000a91e <gpio_pin_set_config+0xa>
1000a91c:	e0c8      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a91e:	2807      	cmp	r0, #7
1000a920:	d809      	bhi.n	1000a936 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a922:	4d64      	ldr	r5, [pc, #400]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000a924:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a926:	3b10      	subs	r3, #16
1000a928:	4003      	ands	r3, r0
1000a92a:	009b      	lsls	r3, r3, #2
1000a92c:	2407      	movs	r4, #7
1000a92e:	409c      	lsls	r4, r3
1000a930:	43a2      	bics	r2, r4
1000a932:	646a      	str	r2, [r5, #68]	; 0x44
1000a934:	e029      	b.n	1000a98a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a936:	280f      	cmp	r0, #15
1000a938:	d809      	bhi.n	1000a94e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a93a:	4d5e      	ldr	r5, [pc, #376]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000a93c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a93e:	2307      	movs	r3, #7
1000a940:	4003      	ands	r3, r0
1000a942:	009b      	lsls	r3, r3, #2
1000a944:	2407      	movs	r4, #7
1000a946:	409c      	lsls	r4, r3
1000a948:	43a2      	bics	r2, r4
1000a94a:	64aa      	str	r2, [r5, #72]	; 0x48
1000a94c:	e01d      	b.n	1000a98a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a94e:	2817      	cmp	r0, #23
1000a950:	d809      	bhi.n	1000a966 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a952:	4d58      	ldr	r5, [pc, #352]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000a954:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a956:	2307      	movs	r3, #7
1000a958:	4003      	ands	r3, r0
1000a95a:	009b      	lsls	r3, r3, #2
1000a95c:	2407      	movs	r4, #7
1000a95e:	409c      	lsls	r4, r3
1000a960:	43a2      	bics	r2, r4
1000a962:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a964:	e011      	b.n	1000a98a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a966:	0003      	movs	r3, r0
1000a968:	3b2c      	subs	r3, #44	; 0x2c
1000a96a:	2b03      	cmp	r3, #3
1000a96c:	d80d      	bhi.n	1000a98a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a96e:	4d52      	ldr	r5, [pc, #328]	; (1000aab8 <gpio_pin_set_config+0x1a4>)
1000a970:	2482      	movs	r4, #130	; 0x82
1000a972:	00e4      	lsls	r4, r4, #3
1000a974:	5d2a      	ldrb	r2, [r5, r4]
1000a976:	0712      	lsls	r2, r2, #28
1000a978:	2601      	movs	r6, #1
1000a97a:	409e      	lsls	r6, r3
1000a97c:	0f12      	lsrs	r2, r2, #28
1000a97e:	5d2b      	ldrb	r3, [r5, r4]
1000a980:	43b2      	bics	r2, r6
1000a982:	260f      	movs	r6, #15
1000a984:	43b3      	bics	r3, r6
1000a986:	4313      	orrs	r3, r2
1000a988:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a98a:	0003      	movs	r3, r0
1000a98c:	3b1d      	subs	r3, #29
1000a98e:	2b02      	cmp	r3, #2
1000a990:	d829      	bhi.n	1000a9e6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a992:	784b      	ldrb	r3, [r1, #1]
1000a994:	2b01      	cmp	r3, #1
1000a996:	d108      	bne.n	1000a9aa <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a998:	4d47      	ldr	r5, [pc, #284]	; (1000aab8 <gpio_pin_set_config+0x1a4>)
1000a99a:	7d2b      	ldrb	r3, [r5, #20]
1000a99c:	241f      	movs	r4, #31
1000a99e:	1a24      	subs	r4, r4, r0
1000a9a0:	2201      	movs	r2, #1
1000a9a2:	40a2      	lsls	r2, r4
1000a9a4:	4393      	bics	r3, r2
1000a9a6:	752b      	strb	r3, [r5, #20]
1000a9a8:	e008      	b.n	1000a9bc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a9aa:	4c43      	ldr	r4, [pc, #268]	; (1000aab8 <gpio_pin_set_config+0x1a4>)
1000a9ac:	7d25      	ldrb	r5, [r4, #20]
1000a9ae:	221f      	movs	r2, #31
1000a9b0:	1a12      	subs	r2, r2, r0
1000a9b2:	2301      	movs	r3, #1
1000a9b4:	4093      	lsls	r3, r2
1000a9b6:	432b      	orrs	r3, r5
1000a9b8:	b2db      	uxtb	r3, r3
1000a9ba:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a9bc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a9be:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a9c0:	2a00      	cmp	r2, #0
1000a9c2:	d075      	beq.n	1000aab0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a9c4:	493c      	ldr	r1, [pc, #240]	; (1000aab8 <gpio_pin_set_config+0x1a4>)
1000a9c6:	880c      	ldrh	r4, [r1, #0]
1000a9c8:	221f      	movs	r2, #31
1000a9ca:	1a10      	subs	r0, r2, r0
1000a9cc:	0080      	lsls	r0, r0, #2
1000a9ce:	3301      	adds	r3, #1
1000a9d0:	4083      	lsls	r3, r0
1000a9d2:	4323      	orrs	r3, r4
1000a9d4:	b29b      	uxth	r3, r3
1000a9d6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a9d8:	4a38      	ldr	r2, [pc, #224]	; (1000aabc <gpio_pin_set_config+0x1a8>)
1000a9da:	7811      	ldrb	r1, [r2, #0]
1000a9dc:	2302      	movs	r3, #2
1000a9de:	430b      	orrs	r3, r1
1000a9e0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a9e2:	2300      	movs	r3, #0
1000a9e4:	e064      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a9e6:	780a      	ldrb	r2, [r1, #0]
1000a9e8:	2a00      	cmp	r2, #0
1000a9ea:	d140      	bne.n	1000aa6e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a9ec:	280f      	cmp	r0, #15
1000a9ee:	d808      	bhi.n	1000aa02 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a9f0:	2301      	movs	r3, #1
1000a9f2:	4083      	lsls	r3, r0
1000a9f4:	b29b      	uxth	r3, r3
1000a9f6:	4a32      	ldr	r2, [pc, #200]	; (1000aac0 <gpio_pin_set_config+0x1ac>)
1000a9f8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a9fa:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a9fc:	281f      	cmp	r0, #31
1000a9fe:	d857      	bhi.n	1000aab0 <gpio_pin_set_config+0x19c>
1000aa00:	e012      	b.n	1000aa28 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000aa02:	281f      	cmp	r0, #31
1000aa04:	d807      	bhi.n	1000aa16 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aa06:	220f      	movs	r2, #15
1000aa08:	4002      	ands	r2, r0
1000aa0a:	2301      	movs	r3, #1
1000aa0c:	4093      	lsls	r3, r2
1000aa0e:	b29b      	uxth	r3, r3
1000aa10:	4a2c      	ldr	r2, [pc, #176]	; (1000aac4 <gpio_pin_set_config+0x1b0>)
1000aa12:	8293      	strh	r3, [r2, #20]
1000aa14:	e008      	b.n	1000aa28 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aa16:	230f      	movs	r3, #15
1000aa18:	4018      	ands	r0, r3
1000aa1a:	3b0e      	subs	r3, #14
1000aa1c:	4083      	lsls	r3, r0
1000aa1e:	b29b      	uxth	r3, r3
1000aa20:	4a29      	ldr	r2, [pc, #164]	; (1000aac8 <gpio_pin_set_config+0x1b4>)
1000aa22:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa24:	2300      	movs	r3, #0
1000aa26:	e043      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000aa28:	784b      	ldrb	r3, [r1, #1]
1000aa2a:	2b01      	cmp	r3, #1
1000aa2c:	d00c      	beq.n	1000aa48 <gpio_pin_set_config+0x134>
1000aa2e:	2b00      	cmp	r3, #0
1000aa30:	d002      	beq.n	1000aa38 <gpio_pin_set_config+0x124>
1000aa32:	2b02      	cmp	r3, #2
1000aa34:	d010      	beq.n	1000aa58 <gpio_pin_set_config+0x144>
1000aa36:	e03a      	b.n	1000aaae <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000aa38:	491e      	ldr	r1, [pc, #120]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000aa3a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000aa3c:	2301      	movs	r3, #1
1000aa3e:	4083      	lsls	r3, r0
1000aa40:	4313      	orrs	r3, r2
1000aa42:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa44:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000aa46:	e033      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000aa48:	491a      	ldr	r1, [pc, #104]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000aa4a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000aa4c:	2201      	movs	r2, #1
1000aa4e:	4082      	lsls	r2, r0
1000aa50:	4393      	bics	r3, r2
1000aa52:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa54:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000aa56:	e02b      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000aa58:	4b16      	ldr	r3, [pc, #88]	; (1000aab4 <gpio_pin_set_config+0x1a0>)
1000aa5a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000aa5c:	2201      	movs	r2, #1
1000aa5e:	4082      	lsls	r2, r0
1000aa60:	4311      	orrs	r1, r2
1000aa62:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000aa64:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000aa66:	4391      	bics	r1, r2
1000aa68:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa6a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000aa6c:	e020      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa6e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000aa70:	2a01      	cmp	r2, #1
1000aa72:	d11d      	bne.n	1000aab0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000aa74:	280f      	cmp	r0, #15
1000aa76:	d806      	bhi.n	1000aa86 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000aa78:	3301      	adds	r3, #1
1000aa7a:	4083      	lsls	r3, r0
1000aa7c:	b29b      	uxth	r3, r3
1000aa7e:	4a10      	ldr	r2, [pc, #64]	; (1000aac0 <gpio_pin_set_config+0x1ac>)
1000aa80:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa82:	2300      	movs	r3, #0
1000aa84:	e014      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000aa86:	281f      	cmp	r0, #31
1000aa88:	d808      	bhi.n	1000aa9c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000aa8a:	230f      	movs	r3, #15
1000aa8c:	4018      	ands	r0, r3
1000aa8e:	3b0e      	subs	r3, #14
1000aa90:	4083      	lsls	r3, r0
1000aa92:	b29b      	uxth	r3, r3
1000aa94:	4a0b      	ldr	r2, [pc, #44]	; (1000aac4 <gpio_pin_set_config+0x1b0>)
1000aa96:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa98:	2300      	movs	r3, #0
1000aa9a:	e009      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000aa9c:	230f      	movs	r3, #15
1000aa9e:	4018      	ands	r0, r3
1000aaa0:	3b0e      	subs	r3, #14
1000aaa2:	4083      	lsls	r3, r0
1000aaa4:	b29b      	uxth	r3, r3
1000aaa6:	4a08      	ldr	r2, [pc, #32]	; (1000aac8 <gpio_pin_set_config+0x1b4>)
1000aaa8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aaaa:	2300      	movs	r3, #0
1000aaac:	e000      	b.n	1000aab0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000aaae:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000aab0:	0018      	movs	r0, r3
1000aab2:	bd70      	pop	{r4, r5, r6, pc}
1000aab4:	4000b000 	.word	0x4000b000
1000aab8:	4000f000 	.word	0x4000f000
1000aabc:	4000e000 	.word	0x4000e000
1000aac0:	40010000 	.word	0x40010000
1000aac4:	40011000 	.word	0x40011000
1000aac8:	40013000 	.word	0x40013000

1000aacc <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000aacc:	280f      	cmp	r0, #15
1000aace:	d806      	bhi.n	1000aade <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000aad0:	4b0f      	ldr	r3, [pc, #60]	; (1000ab10 <gpio_pin_get_input_level+0x44>)
1000aad2:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000aad4:	2301      	movs	r3, #1
1000aad6:	4083      	lsls	r3, r0
1000aad8:	0018      	movs	r0, r3
1000aada:	4008      	ands	r0, r1
1000aadc:	e014      	b.n	1000ab08 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000aade:	281f      	cmp	r0, #31
1000aae0:	d809      	bhi.n	1000aaf6 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000aae2:	4b0c      	ldr	r3, [pc, #48]	; (1000ab14 <gpio_pin_get_input_level+0x48>)
1000aae4:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000aae6:	230f      	movs	r3, #15
1000aae8:	4003      	ands	r3, r0
1000aaea:	001a      	movs	r2, r3
1000aaec:	2301      	movs	r3, #1
1000aaee:	4093      	lsls	r3, r2
1000aaf0:	0018      	movs	r0, r3
1000aaf2:	4008      	ands	r0, r1
1000aaf4:	e008      	b.n	1000ab08 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000aaf6:	4b08      	ldr	r3, [pc, #32]	; (1000ab18 <gpio_pin_get_input_level+0x4c>)
1000aaf8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000aafa:	230f      	movs	r3, #15
1000aafc:	4003      	ands	r3, r0
1000aafe:	001a      	movs	r2, r3
1000ab00:	2301      	movs	r3, #1
1000ab02:	4093      	lsls	r3, r2
1000ab04:	0018      	movs	r0, r3
1000ab06:	4008      	ands	r0, r1
	}

	return regval;
1000ab08:	1e43      	subs	r3, r0, #1
1000ab0a:	4198      	sbcs	r0, r3
1000ab0c:	b2c0      	uxtb	r0, r0
}
1000ab0e:	4770      	bx	lr
1000ab10:	40010000 	.word	0x40010000
1000ab14:	40011000 	.word	0x40011000
1000ab18:	40013000 	.word	0x40013000

1000ab1c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000ab1c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000ab1e:	280f      	cmp	r0, #15
1000ab20:	d810      	bhi.n	1000ab44 <gpio_pin_set_output_level+0x28>
		if(level) {
1000ab22:	2900      	cmp	r1, #0
1000ab24:	d007      	beq.n	1000ab36 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000ab26:	4a1d      	ldr	r2, [pc, #116]	; (1000ab9c <gpio_pin_set_output_level+0x80>)
1000ab28:	8891      	ldrh	r1, [r2, #4]
1000ab2a:	2301      	movs	r3, #1
1000ab2c:	4083      	lsls	r3, r0
1000ab2e:	430b      	orrs	r3, r1
1000ab30:	b29b      	uxth	r3, r3
1000ab32:	8093      	strh	r3, [r2, #4]
1000ab34:	e031      	b.n	1000ab9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000ab36:	4919      	ldr	r1, [pc, #100]	; (1000ab9c <gpio_pin_set_output_level+0x80>)
1000ab38:	888b      	ldrh	r3, [r1, #4]
1000ab3a:	2201      	movs	r2, #1
1000ab3c:	4082      	lsls	r2, r0
1000ab3e:	4393      	bics	r3, r2
1000ab40:	808b      	strh	r3, [r1, #4]
1000ab42:	e02a      	b.n	1000ab9a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000ab44:	281f      	cmp	r0, #31
1000ab46:	d814      	bhi.n	1000ab72 <gpio_pin_set_output_level+0x56>
		if(level) {
1000ab48:	2900      	cmp	r1, #0
1000ab4a:	d009      	beq.n	1000ab60 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ab4c:	4914      	ldr	r1, [pc, #80]	; (1000aba0 <gpio_pin_set_output_level+0x84>)
1000ab4e:	888c      	ldrh	r4, [r1, #4]
1000ab50:	220f      	movs	r2, #15
1000ab52:	4010      	ands	r0, r2
1000ab54:	2301      	movs	r3, #1
1000ab56:	4083      	lsls	r3, r0
1000ab58:	4323      	orrs	r3, r4
1000ab5a:	b29b      	uxth	r3, r3
1000ab5c:	808b      	strh	r3, [r1, #4]
1000ab5e:	e01c      	b.n	1000ab9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ab60:	490f      	ldr	r1, [pc, #60]	; (1000aba0 <gpio_pin_set_output_level+0x84>)
1000ab62:	888b      	ldrh	r3, [r1, #4]
1000ab64:	220f      	movs	r2, #15
1000ab66:	4010      	ands	r0, r2
1000ab68:	3a0e      	subs	r2, #14
1000ab6a:	4082      	lsls	r2, r0
1000ab6c:	4393      	bics	r3, r2
1000ab6e:	808b      	strh	r3, [r1, #4]
1000ab70:	e013      	b.n	1000ab9a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000ab72:	2900      	cmp	r1, #0
1000ab74:	d009      	beq.n	1000ab8a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ab76:	490b      	ldr	r1, [pc, #44]	; (1000aba4 <gpio_pin_set_output_level+0x88>)
1000ab78:	888c      	ldrh	r4, [r1, #4]
1000ab7a:	220f      	movs	r2, #15
1000ab7c:	4010      	ands	r0, r2
1000ab7e:	2301      	movs	r3, #1
1000ab80:	4083      	lsls	r3, r0
1000ab82:	4323      	orrs	r3, r4
1000ab84:	b29b      	uxth	r3, r3
1000ab86:	808b      	strh	r3, [r1, #4]
1000ab88:	e007      	b.n	1000ab9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ab8a:	4906      	ldr	r1, [pc, #24]	; (1000aba4 <gpio_pin_set_output_level+0x88>)
1000ab8c:	888b      	ldrh	r3, [r1, #4]
1000ab8e:	220f      	movs	r2, #15
1000ab90:	4010      	ands	r0, r2
1000ab92:	3a0e      	subs	r2, #14
1000ab94:	4082      	lsls	r2, r0
1000ab96:	4393      	bics	r3, r2
1000ab98:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000ab9a:	bd10      	pop	{r4, pc}
1000ab9c:	40010000 	.word	0x40010000
1000aba0:	40011000 	.word	0x40011000
1000aba4:	40013000 	.word	0x40013000

1000aba8 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000aba8:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000abaa:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000abac:	23ff      	movs	r3, #255	; 0xff
1000abae:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000abb0:	2807      	cmp	r0, #7
1000abb2:	d833      	bhi.n	1000ac1c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000abb4:	4a4e      	ldr	r2, [pc, #312]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000abb6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000abb8:	3bf8      	subs	r3, #248	; 0xf8
1000abba:	4003      	ands	r3, r0
1000abbc:	009b      	lsls	r3, r3, #2
1000abbe:	2607      	movs	r6, #7
1000abc0:	409e      	lsls	r6, r3
1000abc2:	43b4      	bics	r4, r6
1000abc4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000abc6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000abc8:	000e      	movs	r6, r1
1000abca:	409e      	lsls	r6, r3
1000abcc:	0033      	movs	r3, r6
1000abce:	4323      	orrs	r3, r4
1000abd0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000abd2:	2901      	cmp	r1, #1
1000abd4:	d000      	beq.n	1000abd8 <gpio_pinmux_cofiguration+0x30>
1000abd6:	e08a      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000abd8:	2803      	cmp	r0, #3
1000abda:	d80f      	bhi.n	1000abfc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000abdc:	0011      	movs	r1, r2
1000abde:	22d0      	movs	r2, #208	; 0xd0
1000abe0:	0052      	lsls	r2, r2, #1
1000abe2:	588c      	ldr	r4, [r1, r2]
1000abe4:	2303      	movs	r3, #3
1000abe6:	4018      	ands	r0, r3
1000abe8:	00c0      	lsls	r0, r0, #3
1000abea:	333c      	adds	r3, #60	; 0x3c
1000abec:	4083      	lsls	r3, r0
1000abee:	439c      	bics	r4, r3
1000abf0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000abf2:	588b      	ldr	r3, [r1, r2]
1000abf4:	4085      	lsls	r5, r0
1000abf6:	431d      	orrs	r5, r3
1000abf8:	508d      	str	r5, [r1, r2]
1000abfa:	e078      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000abfc:	493c      	ldr	r1, [pc, #240]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000abfe:	22d2      	movs	r2, #210	; 0xd2
1000ac00:	0052      	lsls	r2, r2, #1
1000ac02:	588c      	ldr	r4, [r1, r2]
1000ac04:	2303      	movs	r3, #3
1000ac06:	4018      	ands	r0, r3
1000ac08:	00c0      	lsls	r0, r0, #3
1000ac0a:	333c      	adds	r3, #60	; 0x3c
1000ac0c:	4083      	lsls	r3, r0
1000ac0e:	439c      	bics	r4, r3
1000ac10:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ac12:	588b      	ldr	r3, [r1, r2]
1000ac14:	4085      	lsls	r5, r0
1000ac16:	431d      	orrs	r5, r3
1000ac18:	508d      	str	r5, [r1, r2]
1000ac1a:	e068      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000ac1c:	280f      	cmp	r0, #15
1000ac1e:	d832      	bhi.n	1000ac86 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ac20:	4a33      	ldr	r2, [pc, #204]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000ac22:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ac24:	2307      	movs	r3, #7
1000ac26:	4003      	ands	r3, r0
1000ac28:	009b      	lsls	r3, r3, #2
1000ac2a:	2607      	movs	r6, #7
1000ac2c:	409e      	lsls	r6, r3
1000ac2e:	43b4      	bics	r4, r6
1000ac30:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ac32:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ac34:	000e      	movs	r6, r1
1000ac36:	409e      	lsls	r6, r3
1000ac38:	0033      	movs	r3, r6
1000ac3a:	4323      	orrs	r3, r4
1000ac3c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ac3e:	2901      	cmp	r1, #1
1000ac40:	d155      	bne.n	1000acee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000ac42:	280b      	cmp	r0, #11
1000ac44:	d80f      	bhi.n	1000ac66 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ac46:	0011      	movs	r1, r2
1000ac48:	22d4      	movs	r2, #212	; 0xd4
1000ac4a:	0052      	lsls	r2, r2, #1
1000ac4c:	588c      	ldr	r4, [r1, r2]
1000ac4e:	2303      	movs	r3, #3
1000ac50:	4018      	ands	r0, r3
1000ac52:	00c0      	lsls	r0, r0, #3
1000ac54:	333c      	adds	r3, #60	; 0x3c
1000ac56:	4083      	lsls	r3, r0
1000ac58:	439c      	bics	r4, r3
1000ac5a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ac5c:	588b      	ldr	r3, [r1, r2]
1000ac5e:	4085      	lsls	r5, r0
1000ac60:	431d      	orrs	r5, r3
1000ac62:	508d      	str	r5, [r1, r2]
1000ac64:	e043      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ac66:	4922      	ldr	r1, [pc, #136]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000ac68:	22d6      	movs	r2, #214	; 0xd6
1000ac6a:	0052      	lsls	r2, r2, #1
1000ac6c:	588c      	ldr	r4, [r1, r2]
1000ac6e:	2303      	movs	r3, #3
1000ac70:	4018      	ands	r0, r3
1000ac72:	00c0      	lsls	r0, r0, #3
1000ac74:	333c      	adds	r3, #60	; 0x3c
1000ac76:	4083      	lsls	r3, r0
1000ac78:	439c      	bics	r4, r3
1000ac7a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ac7c:	588b      	ldr	r3, [r1, r2]
1000ac7e:	4085      	lsls	r5, r0
1000ac80:	431d      	orrs	r5, r3
1000ac82:	508d      	str	r5, [r1, r2]
1000ac84:	e033      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ac86:	2817      	cmp	r0, #23
1000ac88:	d831      	bhi.n	1000acee <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ac8a:	4a19      	ldr	r2, [pc, #100]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000ac8c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ac8e:	2307      	movs	r3, #7
1000ac90:	4003      	ands	r3, r0
1000ac92:	009b      	lsls	r3, r3, #2
1000ac94:	2607      	movs	r6, #7
1000ac96:	409e      	lsls	r6, r3
1000ac98:	43b4      	bics	r4, r6
1000ac9a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ac9c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ac9e:	000e      	movs	r6, r1
1000aca0:	409e      	lsls	r6, r3
1000aca2:	0033      	movs	r3, r6
1000aca4:	4323      	orrs	r3, r4
1000aca6:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000aca8:	2901      	cmp	r1, #1
1000acaa:	d120      	bne.n	1000acee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000acac:	2813      	cmp	r0, #19
1000acae:	d80f      	bhi.n	1000acd0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000acb0:	0011      	movs	r1, r2
1000acb2:	22d8      	movs	r2, #216	; 0xd8
1000acb4:	0052      	lsls	r2, r2, #1
1000acb6:	588c      	ldr	r4, [r1, r2]
1000acb8:	2303      	movs	r3, #3
1000acba:	4018      	ands	r0, r3
1000acbc:	00c0      	lsls	r0, r0, #3
1000acbe:	333c      	adds	r3, #60	; 0x3c
1000acc0:	4083      	lsls	r3, r0
1000acc2:	439c      	bics	r4, r3
1000acc4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000acc6:	588b      	ldr	r3, [r1, r2]
1000acc8:	4085      	lsls	r5, r0
1000acca:	431d      	orrs	r5, r3
1000accc:	508d      	str	r5, [r1, r2]
1000acce:	e00e      	b.n	1000acee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000acd0:	4a07      	ldr	r2, [pc, #28]	; (1000acf0 <gpio_pinmux_cofiguration+0x148>)
1000acd2:	23da      	movs	r3, #218	; 0xda
1000acd4:	005b      	lsls	r3, r3, #1
1000acd6:	58d1      	ldr	r1, [r2, r3]
1000acd8:	2403      	movs	r4, #3
1000acda:	4020      	ands	r0, r4
1000acdc:	00c0      	lsls	r0, r0, #3
1000acde:	343c      	adds	r4, #60	; 0x3c
1000ace0:	4084      	lsls	r4, r0
1000ace2:	43a1      	bics	r1, r4
1000ace4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ace6:	58d1      	ldr	r1, [r2, r3]
1000ace8:	4085      	lsls	r5, r0
1000acea:	430d      	orrs	r5, r1
1000acec:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000acee:	bd70      	pop	{r4, r5, r6, pc}
1000acf0:	4000b000 	.word	0x4000b000

1000acf4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000acf6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000acf8:	280f      	cmp	r0, #15
1000acfa:	d904      	bls.n	1000ad06 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000acfc:	241f      	movs	r4, #31
1000acfe:	4284      	cmp	r4, r0
1000ad00:	415b      	adcs	r3, r3
1000ad02:	3c1d      	subs	r4, #29
1000ad04:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000ad06:	2a01      	cmp	r2, #1
1000ad08:	d016      	beq.n	1000ad38 <gpio_register_callback+0x44>
1000ad0a:	2a00      	cmp	r2, #0
1000ad0c:	d004      	beq.n	1000ad18 <gpio_register_callback+0x24>
1000ad0e:	2a02      	cmp	r2, #2
1000ad10:	d022      	beq.n	1000ad58 <gpio_register_callback+0x64>
1000ad12:	2a03      	cmp	r2, #3
1000ad14:	d030      	beq.n	1000ad78 <gpio_register_callback+0x84>
1000ad16:	e03e      	b.n	1000ad96 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ad18:	4e29      	ldr	r6, [pc, #164]	; (1000adc0 <gpio_register_callback+0xcc>)
1000ad1a:	00dc      	lsls	r4, r3, #3
1000ad1c:	18e2      	adds	r2, r4, r3
1000ad1e:	00d2      	lsls	r2, r2, #3
1000ad20:	5997      	ldr	r7, [r2, r6]
1000ad22:	250f      	movs	r5, #15
1000ad24:	4005      	ands	r5, r0
1000ad26:	2201      	movs	r2, #1
1000ad28:	40aa      	lsls	r2, r5
1000ad2a:	b292      	uxth	r2, r2
1000ad2c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000ad2e:	18e4      	adds	r4, r4, r3
1000ad30:	00e4      	lsls	r4, r4, #3
1000ad32:	59a4      	ldr	r4, [r4, r6]
1000ad34:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000ad36:	e02e      	b.n	1000ad96 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ad38:	4e21      	ldr	r6, [pc, #132]	; (1000adc0 <gpio_register_callback+0xcc>)
1000ad3a:	00dc      	lsls	r4, r3, #3
1000ad3c:	18e2      	adds	r2, r4, r3
1000ad3e:	00d2      	lsls	r2, r2, #3
1000ad40:	5997      	ldr	r7, [r2, r6]
1000ad42:	250f      	movs	r5, #15
1000ad44:	4005      	ands	r5, r0
1000ad46:	2201      	movs	r2, #1
1000ad48:	40aa      	lsls	r2, r5
1000ad4a:	b292      	uxth	r2, r2
1000ad4c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ad4e:	18e4      	adds	r4, r4, r3
1000ad50:	00e4      	lsls	r4, r4, #3
1000ad52:	59a4      	ldr	r4, [r4, r6]
1000ad54:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ad56:	e01e      	b.n	1000ad96 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ad58:	4e19      	ldr	r6, [pc, #100]	; (1000adc0 <gpio_register_callback+0xcc>)
1000ad5a:	00dc      	lsls	r4, r3, #3
1000ad5c:	18e2      	adds	r2, r4, r3
1000ad5e:	00d2      	lsls	r2, r2, #3
1000ad60:	5997      	ldr	r7, [r2, r6]
1000ad62:	250f      	movs	r5, #15
1000ad64:	4005      	ands	r5, r0
1000ad66:	2201      	movs	r2, #1
1000ad68:	40aa      	lsls	r2, r5
1000ad6a:	b292      	uxth	r2, r2
1000ad6c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ad6e:	18e4      	adds	r4, r4, r3
1000ad70:	00e4      	lsls	r4, r4, #3
1000ad72:	59a4      	ldr	r4, [r4, r6]
1000ad74:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ad76:	e00e      	b.n	1000ad96 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ad78:	4e11      	ldr	r6, [pc, #68]	; (1000adc0 <gpio_register_callback+0xcc>)
1000ad7a:	00dc      	lsls	r4, r3, #3
1000ad7c:	18e2      	adds	r2, r4, r3
1000ad7e:	00d2      	lsls	r2, r2, #3
1000ad80:	5997      	ldr	r7, [r2, r6]
1000ad82:	250f      	movs	r5, #15
1000ad84:	4005      	ands	r5, r0
1000ad86:	2201      	movs	r2, #1
1000ad88:	40aa      	lsls	r2, r5
1000ad8a:	b292      	uxth	r2, r2
1000ad8c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000ad8e:	18e4      	adds	r4, r4, r3
1000ad90:	00e4      	lsls	r4, r4, #3
1000ad92:	59a4      	ldr	r4, [r4, r6]
1000ad94:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ad96:	220f      	movs	r2, #15
1000ad98:	4010      	ands	r0, r2
1000ad9a:	4c09      	ldr	r4, [pc, #36]	; (1000adc0 <gpio_register_callback+0xcc>)
1000ad9c:	00dd      	lsls	r5, r3, #3
1000ad9e:	18ea      	adds	r2, r5, r3
1000ada0:	0052      	lsls	r2, r2, #1
1000ada2:	1812      	adds	r2, r2, r0
1000ada4:	0092      	lsls	r2, r2, #2
1000ada6:	18a2      	adds	r2, r4, r2
1000ada8:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000adaa:	18ea      	adds	r2, r5, r3
1000adac:	00d2      	lsls	r2, r2, #3
1000adae:	18a2      	adds	r2, r4, r2
1000adb0:	3244      	adds	r2, #68	; 0x44
1000adb2:	2101      	movs	r1, #1
1000adb4:	4081      	lsls	r1, r0
1000adb6:	8813      	ldrh	r3, [r2, #0]
1000adb8:	430b      	orrs	r3, r1
1000adba:	8013      	strh	r3, [r2, #0]
}
1000adbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000adbe:	46c0      	nop			; (mov r8, r8)
1000adc0:	1001a0a0 	.word	0x1001a0a0

1000adc4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000adc4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000adc6:	280f      	cmp	r0, #15
1000adc8:	d805      	bhi.n	1000add6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000adca:	2280      	movs	r2, #128	; 0x80
1000adcc:	0412      	lsls	r2, r2, #16
1000adce:	4b12      	ldr	r3, [pc, #72]	; (1000ae18 <gpio_enable_callback+0x54>)
1000add0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000add2:	2200      	movs	r2, #0
1000add4:	e00c      	b.n	1000adf0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000add6:	281f      	cmp	r0, #31
1000add8:	d805      	bhi.n	1000ade6 <gpio_enable_callback+0x22>
1000adda:	2280      	movs	r2, #128	; 0x80
1000addc:	0452      	lsls	r2, r2, #17
1000adde:	4b0e      	ldr	r3, [pc, #56]	; (1000ae18 <gpio_enable_callback+0x54>)
1000ade0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000ade2:	2201      	movs	r2, #1
1000ade4:	e004      	b.n	1000adf0 <gpio_enable_callback+0x2c>
1000ade6:	2280      	movs	r2, #128	; 0x80
1000ade8:	0492      	lsls	r2, r2, #18
1000adea:	4b0b      	ldr	r3, [pc, #44]	; (1000ae18 <gpio_enable_callback+0x54>)
1000adec:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000adee:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000adf0:	230f      	movs	r3, #15
1000adf2:	4018      	ands	r0, r3
1000adf4:	2101      	movs	r1, #1
1000adf6:	4081      	lsls	r1, r0
1000adf8:	4c08      	ldr	r4, [pc, #32]	; (1000ae1c <gpio_enable_callback+0x58>)
1000adfa:	00d5      	lsls	r5, r2, #3
1000adfc:	18ab      	adds	r3, r5, r2
1000adfe:	00db      	lsls	r3, r3, #3
1000ae00:	18e3      	adds	r3, r4, r3
1000ae02:	3346      	adds	r3, #70	; 0x46
1000ae04:	8818      	ldrh	r0, [r3, #0]
1000ae06:	4308      	orrs	r0, r1
1000ae08:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000ae0a:	18aa      	adds	r2, r5, r2
1000ae0c:	00d2      	lsls	r2, r2, #3
1000ae0e:	5913      	ldr	r3, [r2, r4]
1000ae10:	b289      	uxth	r1, r1
1000ae12:	8419      	strh	r1, [r3, #32]
}
1000ae14:	bd30      	pop	{r4, r5, pc}
1000ae16:	46c0      	nop			; (mov r8, r8)
1000ae18:	e000e100 	.word	0xe000e100
1000ae1c:	1001a0a0 	.word	0x1001a0a0

1000ae20 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000ae20:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000ae22:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ae24:	280f      	cmp	r0, #15
1000ae26:	d904      	bls.n	1000ae32 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000ae28:	221f      	movs	r2, #31
1000ae2a:	4282      	cmp	r2, r0
1000ae2c:	415b      	adcs	r3, r3
1000ae2e:	3a1d      	subs	r2, #29
1000ae30:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000ae32:	220f      	movs	r2, #15
1000ae34:	4010      	ands	r0, r2
1000ae36:	2101      	movs	r1, #1
1000ae38:	4081      	lsls	r1, r0
1000ae3a:	4c07      	ldr	r4, [pc, #28]	; (1000ae58 <gpio_disable_callback+0x38>)
1000ae3c:	00dd      	lsls	r5, r3, #3
1000ae3e:	18ea      	adds	r2, r5, r3
1000ae40:	00d2      	lsls	r2, r2, #3
1000ae42:	18a2      	adds	r2, r4, r2
1000ae44:	3246      	adds	r2, #70	; 0x46
1000ae46:	8810      	ldrh	r0, [r2, #0]
1000ae48:	4388      	bics	r0, r1
1000ae4a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000ae4c:	18eb      	adds	r3, r5, r3
1000ae4e:	00db      	lsls	r3, r3, #3
1000ae50:	591b      	ldr	r3, [r3, r4]
1000ae52:	b289      	uxth	r1, r1
1000ae54:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000ae56:	bd30      	pop	{r4, r5, pc}
1000ae58:	1001a0a0 	.word	0x1001a0a0

1000ae5c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000ae5c:	b510      	push	{r4, lr}
1000ae5e:	4a11      	ldr	r2, [pc, #68]	; (1000aea4 <gpio_init+0x48>)
1000ae60:	0010      	movs	r0, r2
1000ae62:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000ae64:	2100      	movs	r1, #0
1000ae66:	e007      	b.n	1000ae78 <gpio_init+0x1c>
1000ae68:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000ae6a:	4293      	cmp	r3, r2
1000ae6c:	d1fc      	bne.n	1000ae68 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000ae6e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000ae70:	8011      	strh	r1, [r2, #0]
1000ae72:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000ae74:	4282      	cmp	r2, r0
1000ae76:	d002      	beq.n	1000ae7e <gpio_init+0x22>
1000ae78:	0013      	movs	r3, r2
1000ae7a:	3b40      	subs	r3, #64	; 0x40
1000ae7c:	e7f4      	b.n	1000ae68 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000ae7e:	4b0a      	ldr	r3, [pc, #40]	; (1000aea8 <gpio_init+0x4c>)
1000ae80:	4a0a      	ldr	r2, [pc, #40]	; (1000aeac <gpio_init+0x50>)
1000ae82:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000ae84:	4a0a      	ldr	r2, [pc, #40]	; (1000aeb0 <gpio_init+0x54>)
1000ae86:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000ae88:	490a      	ldr	r1, [pc, #40]	; (1000aeb4 <gpio_init+0x58>)
1000ae8a:	2290      	movs	r2, #144	; 0x90
1000ae8c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000ae8e:	490a      	ldr	r1, [pc, #40]	; (1000aeb8 <gpio_init+0x5c>)
1000ae90:	2027      	movs	r0, #39	; 0x27
1000ae92:	4c0a      	ldr	r4, [pc, #40]	; (1000aebc <gpio_init+0x60>)
1000ae94:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000ae96:	490a      	ldr	r1, [pc, #40]	; (1000aec0 <gpio_init+0x64>)
1000ae98:	2028      	movs	r0, #40	; 0x28
1000ae9a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000ae9c:	4909      	ldr	r1, [pc, #36]	; (1000aec4 <gpio_init+0x68>)
1000ae9e:	2029      	movs	r0, #41	; 0x29
1000aea0:	47a0      	blx	r4
}
1000aea2:	bd10      	pop	{r4, pc}
1000aea4:	1001a0e4 	.word	0x1001a0e4
1000aea8:	1001a0a0 	.word	0x1001a0a0
1000aeac:	40010000 	.word	0x40010000
1000aeb0:	40011000 	.word	0x40011000
1000aeb4:	40013000 	.word	0x40013000
1000aeb8:	1000a7b5 	.word	0x1000a7b5
1000aebc:	1000ba89 	.word	0x1000ba89
1000aec0:	1000a819 	.word	0x1000a819
1000aec4:	1000a889 	.word	0x1000a889

1000aec8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000aec8:	2801      	cmp	r0, #1
1000aeca:	d00d      	beq.n	1000aee8 <system_clock_config+0x20>
1000aecc:	2800      	cmp	r0, #0
1000aece:	d002      	beq.n	1000aed6 <system_clock_config+0xe>
1000aed0:	2802      	cmp	r0, #2
1000aed2:	d01c      	beq.n	1000af0e <system_clock_config+0x46>
1000aed4:	e02e      	b.n	1000af34 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000aed6:	4a18      	ldr	r2, [pc, #96]	; (1000af38 <system_clock_config+0x70>)
1000aed8:	6990      	ldr	r0, [r2, #24]
1000aeda:	230c      	movs	r3, #12
1000aedc:	4303      	orrs	r3, r0
1000aede:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000aee0:	4a16      	ldr	r2, [pc, #88]	; (1000af3c <system_clock_config+0x74>)
1000aee2:	4b17      	ldr	r3, [pc, #92]	; (1000af40 <system_clock_config+0x78>)
1000aee4:	601a      	str	r2, [r3, #0]
			break;
1000aee6:	e01a      	b.n	1000af1e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000aee8:	4b13      	ldr	r3, [pc, #76]	; (1000af38 <system_clock_config+0x70>)
1000aeea:	6998      	ldr	r0, [r3, #24]
1000aeec:	2208      	movs	r2, #8
1000aeee:	4302      	orrs	r2, r0
1000aef0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000aef2:	699a      	ldr	r2, [r3, #24]
1000aef4:	2004      	movs	r0, #4
1000aef6:	4382      	bics	r2, r0
1000aef8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000aefa:	4a12      	ldr	r2, [pc, #72]	; (1000af44 <system_clock_config+0x7c>)
1000aefc:	6853      	ldr	r3, [r2, #4]
1000aefe:	2080      	movs	r0, #128	; 0x80
1000af00:	0300      	lsls	r0, r0, #12
1000af02:	4303      	orrs	r3, r0
1000af04:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000af06:	4a10      	ldr	r2, [pc, #64]	; (1000af48 <system_clock_config+0x80>)
1000af08:	4b0d      	ldr	r3, [pc, #52]	; (1000af40 <system_clock_config+0x78>)
1000af0a:	601a      	str	r2, [r3, #0]
			break;
1000af0c:	e007      	b.n	1000af1e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000af0e:	4a0a      	ldr	r2, [pc, #40]	; (1000af38 <system_clock_config+0x70>)
1000af10:	6993      	ldr	r3, [r2, #24]
1000af12:	200c      	movs	r0, #12
1000af14:	4383      	bics	r3, r0
1000af16:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000af18:	4a08      	ldr	r2, [pc, #32]	; (1000af3c <system_clock_config+0x74>)
1000af1a:	4b09      	ldr	r3, [pc, #36]	; (1000af40 <system_clock_config+0x78>)
1000af1c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000af1e:	4b06      	ldr	r3, [pc, #24]	; (1000af38 <system_clock_config+0x70>)
1000af20:	699a      	ldr	r2, [r3, #24]
1000af22:	2003      	movs	r0, #3
1000af24:	4382      	bics	r2, r0
1000af26:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000af28:	699a      	ldr	r2, [r3, #24]
1000af2a:	4001      	ands	r1, r0
1000af2c:	4311      	orrs	r1, r2
1000af2e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000af30:	2000      	movs	r0, #0
1000af32:	e000      	b.n	1000af36 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000af34:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000af36:	4770      	bx	lr
1000af38:	4000b000 	.word	0x4000b000
1000af3c:	018cba80 	.word	0x018cba80
1000af40:	1001a178 	.word	0x1001a178
1000af44:	4000f000 	.word	0x4000f000
1000af48:	001e8480 	.word	0x001e8480

1000af4c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000af4c:	4b01      	ldr	r3, [pc, #4]	; (1000af54 <system_clock_get_value+0x8>)
1000af4e:	6818      	ldr	r0, [r3, #0]
}
1000af50:	4770      	bx	lr
1000af52:	46c0      	nop			; (mov r8, r8)
1000af54:	1001a178 	.word	0x1001a178

1000af58 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000af58:	b500      	push	{lr}
	switch (peripheral) {
1000af5a:	2835      	cmp	r0, #53	; 0x35
1000af5c:	d900      	bls.n	1000af60 <system_clock_peripheral_enable+0x8>
1000af5e:	e1a2      	b.n	1000b2a6 <system_clock_peripheral_enable+0x34e>
1000af60:	0080      	lsls	r0, r0, #2
1000af62:	4bd2      	ldr	r3, [pc, #840]	; (1000b2ac <system_clock_peripheral_enable+0x354>)
1000af64:	581b      	ldr	r3, [r3, r0]
1000af66:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af68:	4ad1      	ldr	r2, [pc, #836]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000af6a:	68d1      	ldr	r1, [r2, #12]
1000af6c:	2302      	movs	r3, #2
1000af6e:	430b      	orrs	r3, r1
1000af70:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af72:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000af74:	e198      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af76:	4ace      	ldr	r2, [pc, #824]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000af78:	68d1      	ldr	r1, [r2, #12]
1000af7a:	2304      	movs	r3, #4
1000af7c:	430b      	orrs	r3, r1
1000af7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000af82:	e191      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af84:	4aca      	ldr	r2, [pc, #808]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000af86:	68d1      	ldr	r1, [r2, #12]
1000af88:	2308      	movs	r3, #8
1000af8a:	430b      	orrs	r3, r1
1000af8c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000af90:	e18a      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af92:	4ac7      	ldr	r2, [pc, #796]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000af94:	68d1      	ldr	r1, [r2, #12]
1000af96:	2310      	movs	r3, #16
1000af98:	430b      	orrs	r3, r1
1000af9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000af9e:	e183      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afa0:	4ac3      	ldr	r2, [pc, #780]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afa2:	68d1      	ldr	r1, [r2, #12]
1000afa4:	2320      	movs	r3, #32
1000afa6:	430b      	orrs	r3, r1
1000afa8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000afac:	e17c      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afae:	4ac0      	ldr	r2, [pc, #768]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afb0:	68d1      	ldr	r1, [r2, #12]
1000afb2:	2380      	movs	r3, #128	; 0x80
1000afb4:	430b      	orrs	r3, r1
1000afb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000afba:	e175      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afbc:	4abc      	ldr	r2, [pc, #752]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afbe:	68d3      	ldr	r3, [r2, #12]
1000afc0:	2180      	movs	r1, #128	; 0x80
1000afc2:	0049      	lsls	r1, r1, #1
1000afc4:	430b      	orrs	r3, r1
1000afc6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000afca:	e16d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afcc:	4ab8      	ldr	r2, [pc, #736]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afce:	68d3      	ldr	r3, [r2, #12]
1000afd0:	2180      	movs	r1, #128	; 0x80
1000afd2:	0109      	lsls	r1, r1, #4
1000afd4:	430b      	orrs	r3, r1
1000afd6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000afda:	e165      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afdc:	4ab4      	ldr	r2, [pc, #720]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afde:	68d3      	ldr	r3, [r2, #12]
1000afe0:	2180      	movs	r1, #128	; 0x80
1000afe2:	0149      	lsls	r1, r1, #5
1000afe4:	430b      	orrs	r3, r1
1000afe6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000afea:	e15d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000afec:	4ab0      	ldr	r2, [pc, #704]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000afee:	68d3      	ldr	r3, [r2, #12]
1000aff0:	2180      	movs	r1, #128	; 0x80
1000aff2:	0189      	lsls	r1, r1, #6
1000aff4:	430b      	orrs	r3, r1
1000aff6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000affa:	e155      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000affc:	4aac      	ldr	r2, [pc, #688]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000affe:	68d3      	ldr	r3, [r2, #12]
1000b000:	2180      	movs	r1, #128	; 0x80
1000b002:	01c9      	lsls	r1, r1, #7
1000b004:	430b      	orrs	r3, r1
1000b006:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b008:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b00a:	e14d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b00c:	4aa8      	ldr	r2, [pc, #672]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b00e:	68d3      	ldr	r3, [r2, #12]
1000b010:	2180      	movs	r1, #128	; 0x80
1000b012:	0209      	lsls	r1, r1, #8
1000b014:	430b      	orrs	r3, r1
1000b016:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b018:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b01a:	e145      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b01c:	4aa4      	ldr	r2, [pc, #656]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b01e:	68d3      	ldr	r3, [r2, #12]
1000b020:	2180      	movs	r1, #128	; 0x80
1000b022:	0249      	lsls	r1, r1, #9
1000b024:	430b      	orrs	r3, r1
1000b026:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b028:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b02a:	e13d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b02c:	4aa0      	ldr	r2, [pc, #640]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b02e:	68d3      	ldr	r3, [r2, #12]
1000b030:	2180      	movs	r1, #128	; 0x80
1000b032:	0289      	lsls	r1, r1, #10
1000b034:	430b      	orrs	r3, r1
1000b036:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b038:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b03a:	e135      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b03c:	4a9c      	ldr	r2, [pc, #624]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b03e:	68d3      	ldr	r3, [r2, #12]
1000b040:	2180      	movs	r1, #128	; 0x80
1000b042:	02c9      	lsls	r1, r1, #11
1000b044:	430b      	orrs	r3, r1
1000b046:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b048:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b04a:	e12d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b04c:	4a98      	ldr	r2, [pc, #608]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b04e:	68d3      	ldr	r3, [r2, #12]
1000b050:	2180      	movs	r1, #128	; 0x80
1000b052:	0309      	lsls	r1, r1, #12
1000b054:	430b      	orrs	r3, r1
1000b056:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b058:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b05a:	e125      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b05c:	4a94      	ldr	r2, [pc, #592]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b05e:	68d3      	ldr	r3, [r2, #12]
1000b060:	2180      	movs	r1, #128	; 0x80
1000b062:	0349      	lsls	r1, r1, #13
1000b064:	430b      	orrs	r3, r1
1000b066:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b068:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b06a:	e11d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b06c:	4a90      	ldr	r2, [pc, #576]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b06e:	68d3      	ldr	r3, [r2, #12]
1000b070:	2180      	movs	r1, #128	; 0x80
1000b072:	0389      	lsls	r1, r1, #14
1000b074:	430b      	orrs	r3, r1
1000b076:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b078:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b07a:	e115      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b07c:	4a8c      	ldr	r2, [pc, #560]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b07e:	68d3      	ldr	r3, [r2, #12]
1000b080:	2180      	movs	r1, #128	; 0x80
1000b082:	03c9      	lsls	r1, r1, #15
1000b084:	430b      	orrs	r3, r1
1000b086:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b088:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b08a:	e10d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b08c:	4a88      	ldr	r2, [pc, #544]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b08e:	68d3      	ldr	r3, [r2, #12]
1000b090:	2180      	movs	r1, #128	; 0x80
1000b092:	0409      	lsls	r1, r1, #16
1000b094:	430b      	orrs	r3, r1
1000b096:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b098:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b09a:	e105      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b09c:	4a84      	ldr	r2, [pc, #528]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b09e:	68d3      	ldr	r3, [r2, #12]
1000b0a0:	2180      	movs	r1, #128	; 0x80
1000b0a2:	0449      	lsls	r1, r1, #17
1000b0a4:	430b      	orrs	r3, r1
1000b0a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b0aa:	e0fd      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ac:	4a80      	ldr	r2, [pc, #512]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0ae:	68d3      	ldr	r3, [r2, #12]
1000b0b0:	2180      	movs	r1, #128	; 0x80
1000b0b2:	0489      	lsls	r1, r1, #18
1000b0b4:	430b      	orrs	r3, r1
1000b0b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b0ba:	e0f5      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0bc:	4a7c      	ldr	r2, [pc, #496]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0be:	68d3      	ldr	r3, [r2, #12]
1000b0c0:	2180      	movs	r1, #128	; 0x80
1000b0c2:	04c9      	lsls	r1, r1, #19
1000b0c4:	430b      	orrs	r3, r1
1000b0c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b0ca:	e0ed      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0cc:	4a78      	ldr	r2, [pc, #480]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0ce:	68d3      	ldr	r3, [r2, #12]
1000b0d0:	2180      	movs	r1, #128	; 0x80
1000b0d2:	0509      	lsls	r1, r1, #20
1000b0d4:	430b      	orrs	r3, r1
1000b0d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b0da:	e0e5      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0dc:	4a74      	ldr	r2, [pc, #464]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0de:	68d3      	ldr	r3, [r2, #12]
1000b0e0:	2180      	movs	r1, #128	; 0x80
1000b0e2:	0549      	lsls	r1, r1, #21
1000b0e4:	430b      	orrs	r3, r1
1000b0e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b0ea:	e0dd      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ec:	4a70      	ldr	r2, [pc, #448]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0ee:	68d3      	ldr	r3, [r2, #12]
1000b0f0:	2180      	movs	r1, #128	; 0x80
1000b0f2:	0589      	lsls	r1, r1, #22
1000b0f4:	430b      	orrs	r3, r1
1000b0f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b0fa:	e0d5      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0fc:	4a6c      	ldr	r2, [pc, #432]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b0fe:	68d3      	ldr	r3, [r2, #12]
1000b100:	2180      	movs	r1, #128	; 0x80
1000b102:	05c9      	lsls	r1, r1, #23
1000b104:	430b      	orrs	r3, r1
1000b106:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b108:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b10a:	e0cd      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b10c:	4a68      	ldr	r2, [pc, #416]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b10e:	6911      	ldr	r1, [r2, #16]
1000b110:	2301      	movs	r3, #1
1000b112:	430b      	orrs	r3, r1
1000b114:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b116:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b118:	e0c6      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b11a:	4a65      	ldr	r2, [pc, #404]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b11c:	6911      	ldr	r1, [r2, #16]
1000b11e:	2302      	movs	r3, #2
1000b120:	430b      	orrs	r3, r1
1000b122:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b124:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b126:	e0bf      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b128:	4a61      	ldr	r2, [pc, #388]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b12a:	6911      	ldr	r1, [r2, #16]
1000b12c:	2304      	movs	r3, #4
1000b12e:	430b      	orrs	r3, r1
1000b130:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b132:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b134:	e0b8      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b136:	4a5e      	ldr	r2, [pc, #376]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b138:	6911      	ldr	r1, [r2, #16]
1000b13a:	2308      	movs	r3, #8
1000b13c:	430b      	orrs	r3, r1
1000b13e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b140:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b142:	e0b1      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b144:	4a5a      	ldr	r2, [pc, #360]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b146:	6911      	ldr	r1, [r2, #16]
1000b148:	2310      	movs	r3, #16
1000b14a:	430b      	orrs	r3, r1
1000b14c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b14e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b150:	e0aa      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b152:	4a57      	ldr	r2, [pc, #348]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b154:	6911      	ldr	r1, [r2, #16]
1000b156:	2320      	movs	r3, #32
1000b158:	430b      	orrs	r3, r1
1000b15a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b15c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b15e:	e0a3      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b160:	4a53      	ldr	r2, [pc, #332]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b162:	6911      	ldr	r1, [r2, #16]
1000b164:	2340      	movs	r3, #64	; 0x40
1000b166:	430b      	orrs	r3, r1
1000b168:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b16a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b16c:	e09c      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b16e:	4a50      	ldr	r2, [pc, #320]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b170:	6911      	ldr	r1, [r2, #16]
1000b172:	2380      	movs	r3, #128	; 0x80
1000b174:	430b      	orrs	r3, r1
1000b176:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b178:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b17a:	e095      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b17c:	4a4c      	ldr	r2, [pc, #304]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b17e:	6913      	ldr	r3, [r2, #16]
1000b180:	2180      	movs	r1, #128	; 0x80
1000b182:	0049      	lsls	r1, r1, #1
1000b184:	430b      	orrs	r3, r1
1000b186:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b188:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b18a:	e08d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b18c:	4a48      	ldr	r2, [pc, #288]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b18e:	6913      	ldr	r3, [r2, #16]
1000b190:	2180      	movs	r1, #128	; 0x80
1000b192:	0089      	lsls	r1, r1, #2
1000b194:	430b      	orrs	r3, r1
1000b196:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b198:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b19a:	e085      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b19c:	4a44      	ldr	r2, [pc, #272]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b19e:	6913      	ldr	r3, [r2, #16]
1000b1a0:	2180      	movs	r1, #128	; 0x80
1000b1a2:	00c9      	lsls	r1, r1, #3
1000b1a4:	430b      	orrs	r3, r1
1000b1a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b1aa:	e07d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1ac:	4a40      	ldr	r2, [pc, #256]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1ae:	6913      	ldr	r3, [r2, #16]
1000b1b0:	2180      	movs	r1, #128	; 0x80
1000b1b2:	0109      	lsls	r1, r1, #4
1000b1b4:	430b      	orrs	r3, r1
1000b1b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b1ba:	e075      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1bc:	4a3c      	ldr	r2, [pc, #240]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1be:	6913      	ldr	r3, [r2, #16]
1000b1c0:	2180      	movs	r1, #128	; 0x80
1000b1c2:	0149      	lsls	r1, r1, #5
1000b1c4:	430b      	orrs	r3, r1
1000b1c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b1ca:	e06d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1cc:	4a38      	ldr	r2, [pc, #224]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1ce:	6913      	ldr	r3, [r2, #16]
1000b1d0:	2180      	movs	r1, #128	; 0x80
1000b1d2:	0189      	lsls	r1, r1, #6
1000b1d4:	430b      	orrs	r3, r1
1000b1d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b1da:	e065      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1dc:	4a34      	ldr	r2, [pc, #208]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1de:	6913      	ldr	r3, [r2, #16]
1000b1e0:	2180      	movs	r1, #128	; 0x80
1000b1e2:	01c9      	lsls	r1, r1, #7
1000b1e4:	430b      	orrs	r3, r1
1000b1e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b1ea:	e05d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1ec:	4a30      	ldr	r2, [pc, #192]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1ee:	6913      	ldr	r3, [r2, #16]
1000b1f0:	2180      	movs	r1, #128	; 0x80
1000b1f2:	0209      	lsls	r1, r1, #8
1000b1f4:	430b      	orrs	r3, r1
1000b1f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b1fa:	e055      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1fc:	4a2c      	ldr	r2, [pc, #176]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b1fe:	6913      	ldr	r3, [r2, #16]
1000b200:	2180      	movs	r1, #128	; 0x80
1000b202:	0249      	lsls	r1, r1, #9
1000b204:	430b      	orrs	r3, r1
1000b206:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b20a:	e04d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b20c:	4a28      	ldr	r2, [pc, #160]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b20e:	6913      	ldr	r3, [r2, #16]
1000b210:	2180      	movs	r1, #128	; 0x80
1000b212:	0289      	lsls	r1, r1, #10
1000b214:	430b      	orrs	r3, r1
1000b216:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b21a:	e045      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b21c:	4a24      	ldr	r2, [pc, #144]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b21e:	6913      	ldr	r3, [r2, #16]
1000b220:	2180      	movs	r1, #128	; 0x80
1000b222:	02c9      	lsls	r1, r1, #11
1000b224:	430b      	orrs	r3, r1
1000b226:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b228:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b22a:	e03d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b22c:	4a20      	ldr	r2, [pc, #128]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b22e:	6913      	ldr	r3, [r2, #16]
1000b230:	2180      	movs	r1, #128	; 0x80
1000b232:	0309      	lsls	r1, r1, #12
1000b234:	430b      	orrs	r3, r1
1000b236:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b238:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b23a:	e035      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b23c:	4a1c      	ldr	r2, [pc, #112]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b23e:	6913      	ldr	r3, [r2, #16]
1000b240:	2180      	movs	r1, #128	; 0x80
1000b242:	0349      	lsls	r1, r1, #13
1000b244:	430b      	orrs	r3, r1
1000b246:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b248:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b24a:	e02d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b24c:	4a18      	ldr	r2, [pc, #96]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b24e:	6913      	ldr	r3, [r2, #16]
1000b250:	2180      	movs	r1, #128	; 0x80
1000b252:	0389      	lsls	r1, r1, #14
1000b254:	430b      	orrs	r3, r1
1000b256:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b258:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b25a:	e025      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b25c:	4a14      	ldr	r2, [pc, #80]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b25e:	6913      	ldr	r3, [r2, #16]
1000b260:	2180      	movs	r1, #128	; 0x80
1000b262:	03c9      	lsls	r1, r1, #15
1000b264:	430b      	orrs	r3, r1
1000b266:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b26a:	e01d      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b26c:	4a10      	ldr	r2, [pc, #64]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b26e:	6913      	ldr	r3, [r2, #16]
1000b270:	2180      	movs	r1, #128	; 0x80
1000b272:	0409      	lsls	r1, r1, #16
1000b274:	430b      	orrs	r3, r1
1000b276:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b27a:	e015      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b27c:	4a0c      	ldr	r2, [pc, #48]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b27e:	7d11      	ldrb	r1, [r2, #20]
1000b280:	2301      	movs	r3, #1
1000b282:	430b      	orrs	r3, r1
1000b284:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b286:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b288:	e00e      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b28a:	4a09      	ldr	r2, [pc, #36]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b28c:	7d11      	ldrb	r1, [r2, #20]
1000b28e:	2302      	movs	r3, #2
1000b290:	430b      	orrs	r3, r1
1000b292:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b294:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b296:	e007      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b298:	4a05      	ldr	r2, [pc, #20]	; (1000b2b0 <system_clock_peripheral_enable+0x358>)
1000b29a:	7d11      	ldrb	r1, [r2, #20]
1000b29c:	2304      	movs	r3, #4
1000b29e:	430b      	orrs	r3, r1
1000b2a0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b2a4:	e000      	b.n	1000b2a8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b2a6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b2a8:	bd00      	pop	{pc}
1000b2aa:	46c0      	nop			; (mov r8, r8)
1000b2ac:	100171b0 	.word	0x100171b0
1000b2b0:	4000b000 	.word	0x4000b000

1000b2b4 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b2b4:	b500      	push	{lr}
	switch (peripheral) {
1000b2b6:	2835      	cmp	r0, #53	; 0x35
1000b2b8:	d900      	bls.n	1000b2bc <system_clock_peripheral_disable+0x8>
1000b2ba:	e17d      	b.n	1000b5b8 <system_clock_peripheral_disable+0x304>
1000b2bc:	0080      	lsls	r0, r0, #2
1000b2be:	4bbf      	ldr	r3, [pc, #764]	; (1000b5bc <system_clock_peripheral_disable+0x308>)
1000b2c0:	581b      	ldr	r3, [r3, r0]
1000b2c2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2c4:	4abe      	ldr	r2, [pc, #760]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b2c6:	68d3      	ldr	r3, [r2, #12]
1000b2c8:	2102      	movs	r1, #2
1000b2ca:	438b      	bics	r3, r1
1000b2cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ce:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b2d0:	e173      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2d2:	4abb      	ldr	r2, [pc, #748]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b2d4:	68d3      	ldr	r3, [r2, #12]
1000b2d6:	2104      	movs	r1, #4
1000b2d8:	438b      	bics	r3, r1
1000b2da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b2de:	e16c      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2e0:	4ab7      	ldr	r2, [pc, #732]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b2e2:	68d3      	ldr	r3, [r2, #12]
1000b2e4:	2108      	movs	r1, #8
1000b2e6:	438b      	bics	r3, r1
1000b2e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b2ec:	e165      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2ee:	4ab4      	ldr	r2, [pc, #720]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b2f0:	68d3      	ldr	r3, [r2, #12]
1000b2f2:	2110      	movs	r1, #16
1000b2f4:	438b      	bics	r3, r1
1000b2f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b2fa:	e15e      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2fc:	4ab0      	ldr	r2, [pc, #704]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b2fe:	68d3      	ldr	r3, [r2, #12]
1000b300:	2120      	movs	r1, #32
1000b302:	438b      	bics	r3, r1
1000b304:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b306:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b308:	e157      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b30a:	4aad      	ldr	r2, [pc, #692]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b30c:	68d3      	ldr	r3, [r2, #12]
1000b30e:	2180      	movs	r1, #128	; 0x80
1000b310:	438b      	bics	r3, r1
1000b312:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b316:	e150      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b318:	4aa9      	ldr	r2, [pc, #676]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b31a:	68d1      	ldr	r1, [r2, #12]
1000b31c:	4ba9      	ldr	r3, [pc, #676]	; (1000b5c4 <system_clock_peripheral_disable+0x310>)
1000b31e:	400b      	ands	r3, r1
1000b320:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b322:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b324:	e149      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b326:	4aa6      	ldr	r2, [pc, #664]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b328:	68d1      	ldr	r1, [r2, #12]
1000b32a:	4ba7      	ldr	r3, [pc, #668]	; (1000b5c8 <system_clock_peripheral_disable+0x314>)
1000b32c:	400b      	ands	r3, r1
1000b32e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b332:	e142      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b334:	4aa2      	ldr	r2, [pc, #648]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b336:	68d1      	ldr	r1, [r2, #12]
1000b338:	4ba4      	ldr	r3, [pc, #656]	; (1000b5cc <system_clock_peripheral_disable+0x318>)
1000b33a:	400b      	ands	r3, r1
1000b33c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b33e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b340:	e13b      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b342:	4a9f      	ldr	r2, [pc, #636]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b344:	68d1      	ldr	r1, [r2, #12]
1000b346:	4ba2      	ldr	r3, [pc, #648]	; (1000b5d0 <system_clock_peripheral_disable+0x31c>)
1000b348:	400b      	ands	r3, r1
1000b34a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b34c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b34e:	e134      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b350:	4a9b      	ldr	r2, [pc, #620]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b352:	68d1      	ldr	r1, [r2, #12]
1000b354:	4b9f      	ldr	r3, [pc, #636]	; (1000b5d4 <system_clock_peripheral_disable+0x320>)
1000b356:	400b      	ands	r3, r1
1000b358:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b35a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b35c:	e12d      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b35e:	4a98      	ldr	r2, [pc, #608]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b360:	68d1      	ldr	r1, [r2, #12]
1000b362:	4b9d      	ldr	r3, [pc, #628]	; (1000b5d8 <system_clock_peripheral_disable+0x324>)
1000b364:	400b      	ands	r3, r1
1000b366:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b36a:	e126      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b36c:	4a94      	ldr	r2, [pc, #592]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b36e:	68d1      	ldr	r1, [r2, #12]
1000b370:	4b9a      	ldr	r3, [pc, #616]	; (1000b5dc <system_clock_peripheral_disable+0x328>)
1000b372:	400b      	ands	r3, r1
1000b374:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b376:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b378:	e11f      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b37a:	4a91      	ldr	r2, [pc, #580]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b37c:	68d1      	ldr	r1, [r2, #12]
1000b37e:	4b98      	ldr	r3, [pc, #608]	; (1000b5e0 <system_clock_peripheral_disable+0x32c>)
1000b380:	400b      	ands	r3, r1
1000b382:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b386:	e118      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b388:	4a8d      	ldr	r2, [pc, #564]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b38a:	68d1      	ldr	r1, [r2, #12]
1000b38c:	4b95      	ldr	r3, [pc, #596]	; (1000b5e4 <system_clock_peripheral_disable+0x330>)
1000b38e:	400b      	ands	r3, r1
1000b390:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b392:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b394:	e111      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b396:	4a8a      	ldr	r2, [pc, #552]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b398:	68d1      	ldr	r1, [r2, #12]
1000b39a:	4b93      	ldr	r3, [pc, #588]	; (1000b5e8 <system_clock_peripheral_disable+0x334>)
1000b39c:	400b      	ands	r3, r1
1000b39e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b3a2:	e10a      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3a4:	4a86      	ldr	r2, [pc, #536]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3a6:	68d1      	ldr	r1, [r2, #12]
1000b3a8:	4b90      	ldr	r3, [pc, #576]	; (1000b5ec <system_clock_peripheral_disable+0x338>)
1000b3aa:	400b      	ands	r3, r1
1000b3ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b3b0:	e103      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3b2:	4a83      	ldr	r2, [pc, #524]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3b4:	68d1      	ldr	r1, [r2, #12]
1000b3b6:	4b8e      	ldr	r3, [pc, #568]	; (1000b5f0 <system_clock_peripheral_disable+0x33c>)
1000b3b8:	400b      	ands	r3, r1
1000b3ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b3be:	e0fc      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3c0:	4a7f      	ldr	r2, [pc, #508]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3c2:	68d1      	ldr	r1, [r2, #12]
1000b3c4:	4b8b      	ldr	r3, [pc, #556]	; (1000b5f4 <system_clock_peripheral_disable+0x340>)
1000b3c6:	400b      	ands	r3, r1
1000b3c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b3cc:	e0f5      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3ce:	4a7c      	ldr	r2, [pc, #496]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3d0:	68d1      	ldr	r1, [r2, #12]
1000b3d2:	4b89      	ldr	r3, [pc, #548]	; (1000b5f8 <system_clock_peripheral_disable+0x344>)
1000b3d4:	400b      	ands	r3, r1
1000b3d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b3da:	e0ee      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3dc:	4a78      	ldr	r2, [pc, #480]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3de:	68d1      	ldr	r1, [r2, #12]
1000b3e0:	4b86      	ldr	r3, [pc, #536]	; (1000b5fc <system_clock_peripheral_disable+0x348>)
1000b3e2:	400b      	ands	r3, r1
1000b3e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b3e8:	e0e7      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3ea:	4a75      	ldr	r2, [pc, #468]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3ec:	68d1      	ldr	r1, [r2, #12]
1000b3ee:	4b84      	ldr	r3, [pc, #528]	; (1000b600 <system_clock_peripheral_disable+0x34c>)
1000b3f0:	400b      	ands	r3, r1
1000b3f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b3f6:	e0e0      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3f8:	4a71      	ldr	r2, [pc, #452]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b3fa:	68d1      	ldr	r1, [r2, #12]
1000b3fc:	4b81      	ldr	r3, [pc, #516]	; (1000b604 <system_clock_peripheral_disable+0x350>)
1000b3fe:	400b      	ands	r3, r1
1000b400:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b402:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b404:	e0d9      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b406:	4a6e      	ldr	r2, [pc, #440]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b408:	68d1      	ldr	r1, [r2, #12]
1000b40a:	4b7f      	ldr	r3, [pc, #508]	; (1000b608 <system_clock_peripheral_disable+0x354>)
1000b40c:	400b      	ands	r3, r1
1000b40e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b410:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b412:	e0d2      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b414:	4a6a      	ldr	r2, [pc, #424]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b416:	68d1      	ldr	r1, [r2, #12]
1000b418:	4b7c      	ldr	r3, [pc, #496]	; (1000b60c <system_clock_peripheral_disable+0x358>)
1000b41a:	400b      	ands	r3, r1
1000b41c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b41e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b420:	e0cb      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b422:	4a67      	ldr	r2, [pc, #412]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b424:	68d1      	ldr	r1, [r2, #12]
1000b426:	4b7a      	ldr	r3, [pc, #488]	; (1000b610 <system_clock_peripheral_disable+0x35c>)
1000b428:	400b      	ands	r3, r1
1000b42a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b42c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b42e:	e0c4      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b430:	4a63      	ldr	r2, [pc, #396]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b432:	68d1      	ldr	r1, [r2, #12]
1000b434:	4b77      	ldr	r3, [pc, #476]	; (1000b614 <system_clock_peripheral_disable+0x360>)
1000b436:	400b      	ands	r3, r1
1000b438:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b43a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b43c:	e0bd      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b43e:	4a60      	ldr	r2, [pc, #384]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b440:	6913      	ldr	r3, [r2, #16]
1000b442:	2101      	movs	r1, #1
1000b444:	438b      	bics	r3, r1
1000b446:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b448:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b44a:	e0b6      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b44c:	4a5c      	ldr	r2, [pc, #368]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b44e:	6913      	ldr	r3, [r2, #16]
1000b450:	2102      	movs	r1, #2
1000b452:	438b      	bics	r3, r1
1000b454:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b456:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b458:	e0af      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b45a:	4a59      	ldr	r2, [pc, #356]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b45c:	6913      	ldr	r3, [r2, #16]
1000b45e:	2104      	movs	r1, #4
1000b460:	438b      	bics	r3, r1
1000b462:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b464:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b466:	e0a8      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b468:	4a55      	ldr	r2, [pc, #340]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b46a:	6913      	ldr	r3, [r2, #16]
1000b46c:	2108      	movs	r1, #8
1000b46e:	438b      	bics	r3, r1
1000b470:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b472:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b474:	e0a1      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b476:	4a52      	ldr	r2, [pc, #328]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b478:	6913      	ldr	r3, [r2, #16]
1000b47a:	2110      	movs	r1, #16
1000b47c:	438b      	bics	r3, r1
1000b47e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b480:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b482:	e09a      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b484:	4a4e      	ldr	r2, [pc, #312]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b486:	6913      	ldr	r3, [r2, #16]
1000b488:	2120      	movs	r1, #32
1000b48a:	438b      	bics	r3, r1
1000b48c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b48e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b490:	e093      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b492:	4a4b      	ldr	r2, [pc, #300]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b494:	6913      	ldr	r3, [r2, #16]
1000b496:	2140      	movs	r1, #64	; 0x40
1000b498:	438b      	bics	r3, r1
1000b49a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b49c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b49e:	e08c      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4a0:	4a47      	ldr	r2, [pc, #284]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4a2:	6913      	ldr	r3, [r2, #16]
1000b4a4:	2180      	movs	r1, #128	; 0x80
1000b4a6:	438b      	bics	r3, r1
1000b4a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b4ac:	e085      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4ae:	4a44      	ldr	r2, [pc, #272]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4b0:	6911      	ldr	r1, [r2, #16]
1000b4b2:	4b44      	ldr	r3, [pc, #272]	; (1000b5c4 <system_clock_peripheral_disable+0x310>)
1000b4b4:	400b      	ands	r3, r1
1000b4b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b4ba:	e07e      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4bc:	4a40      	ldr	r2, [pc, #256]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4be:	6911      	ldr	r1, [r2, #16]
1000b4c0:	4b55      	ldr	r3, [pc, #340]	; (1000b618 <system_clock_peripheral_disable+0x364>)
1000b4c2:	400b      	ands	r3, r1
1000b4c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b4c8:	e077      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4ca:	4a3d      	ldr	r2, [pc, #244]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4cc:	6911      	ldr	r1, [r2, #16]
1000b4ce:	4b53      	ldr	r3, [pc, #332]	; (1000b61c <system_clock_peripheral_disable+0x368>)
1000b4d0:	400b      	ands	r3, r1
1000b4d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b4d6:	e070      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4d8:	4a39      	ldr	r2, [pc, #228]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4da:	6911      	ldr	r1, [r2, #16]
1000b4dc:	4b3a      	ldr	r3, [pc, #232]	; (1000b5c8 <system_clock_peripheral_disable+0x314>)
1000b4de:	400b      	ands	r3, r1
1000b4e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b4e4:	e069      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4e6:	4a36      	ldr	r2, [pc, #216]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4e8:	6911      	ldr	r1, [r2, #16]
1000b4ea:	4b38      	ldr	r3, [pc, #224]	; (1000b5cc <system_clock_peripheral_disable+0x318>)
1000b4ec:	400b      	ands	r3, r1
1000b4ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b4f2:	e062      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b4f4:	4a32      	ldr	r2, [pc, #200]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b4f6:	6911      	ldr	r1, [r2, #16]
1000b4f8:	4b35      	ldr	r3, [pc, #212]	; (1000b5d0 <system_clock_peripheral_disable+0x31c>)
1000b4fa:	400b      	ands	r3, r1
1000b4fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b500:	e05b      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b502:	4a2f      	ldr	r2, [pc, #188]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b504:	6911      	ldr	r1, [r2, #16]
1000b506:	4b33      	ldr	r3, [pc, #204]	; (1000b5d4 <system_clock_peripheral_disable+0x320>)
1000b508:	400b      	ands	r3, r1
1000b50a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b50c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b50e:	e054      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b510:	4a2b      	ldr	r2, [pc, #172]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b512:	6911      	ldr	r1, [r2, #16]
1000b514:	4b30      	ldr	r3, [pc, #192]	; (1000b5d8 <system_clock_peripheral_disable+0x324>)
1000b516:	400b      	ands	r3, r1
1000b518:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b51a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b51c:	e04d      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b51e:	4a28      	ldr	r2, [pc, #160]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b520:	6911      	ldr	r1, [r2, #16]
1000b522:	4b2e      	ldr	r3, [pc, #184]	; (1000b5dc <system_clock_peripheral_disable+0x328>)
1000b524:	400b      	ands	r3, r1
1000b526:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b528:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b52a:	e046      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b52c:	4a24      	ldr	r2, [pc, #144]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b52e:	6911      	ldr	r1, [r2, #16]
1000b530:	4b2b      	ldr	r3, [pc, #172]	; (1000b5e0 <system_clock_peripheral_disable+0x32c>)
1000b532:	400b      	ands	r3, r1
1000b534:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b536:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b538:	e03f      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b53a:	4a21      	ldr	r2, [pc, #132]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b53c:	6911      	ldr	r1, [r2, #16]
1000b53e:	4b29      	ldr	r3, [pc, #164]	; (1000b5e4 <system_clock_peripheral_disable+0x330>)
1000b540:	400b      	ands	r3, r1
1000b542:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b544:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b546:	e038      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b548:	4a1d      	ldr	r2, [pc, #116]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b54a:	6911      	ldr	r1, [r2, #16]
1000b54c:	4b26      	ldr	r3, [pc, #152]	; (1000b5e8 <system_clock_peripheral_disable+0x334>)
1000b54e:	400b      	ands	r3, r1
1000b550:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b552:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b554:	e031      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b556:	4a1a      	ldr	r2, [pc, #104]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b558:	6911      	ldr	r1, [r2, #16]
1000b55a:	4b24      	ldr	r3, [pc, #144]	; (1000b5ec <system_clock_peripheral_disable+0x338>)
1000b55c:	400b      	ands	r3, r1
1000b55e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b560:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b562:	e02a      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b564:	4a16      	ldr	r2, [pc, #88]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b566:	6911      	ldr	r1, [r2, #16]
1000b568:	4b21      	ldr	r3, [pc, #132]	; (1000b5f0 <system_clock_peripheral_disable+0x33c>)
1000b56a:	400b      	ands	r3, r1
1000b56c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b56e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b570:	e023      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b572:	4a13      	ldr	r2, [pc, #76]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b574:	6911      	ldr	r1, [r2, #16]
1000b576:	4b1f      	ldr	r3, [pc, #124]	; (1000b5f4 <system_clock_peripheral_disable+0x340>)
1000b578:	400b      	ands	r3, r1
1000b57a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b57c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b57e:	e01c      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b580:	4a0f      	ldr	r2, [pc, #60]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b582:	6911      	ldr	r1, [r2, #16]
1000b584:	4b1c      	ldr	r3, [pc, #112]	; (1000b5f8 <system_clock_peripheral_disable+0x344>)
1000b586:	400b      	ands	r3, r1
1000b588:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b58a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b58c:	e015      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b58e:	4a0c      	ldr	r2, [pc, #48]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b590:	7d13      	ldrb	r3, [r2, #20]
1000b592:	2101      	movs	r1, #1
1000b594:	438b      	bics	r3, r1
1000b596:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b598:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b59a:	e00e      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b59c:	4a08      	ldr	r2, [pc, #32]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b59e:	7d13      	ldrb	r3, [r2, #20]
1000b5a0:	2102      	movs	r1, #2
1000b5a2:	438b      	bics	r3, r1
1000b5a4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b5a8:	e007      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b5aa:	4a05      	ldr	r2, [pc, #20]	; (1000b5c0 <system_clock_peripheral_disable+0x30c>)
1000b5ac:	7d13      	ldrb	r3, [r2, #20]
1000b5ae:	2104      	movs	r1, #4
1000b5b0:	438b      	bics	r3, r1
1000b5b2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b5b6:	e000      	b.n	1000b5ba <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b5b8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b5ba:	bd00      	pop	{pc}
1000b5bc:	10017288 	.word	0x10017288
1000b5c0:	4000b000 	.word	0x4000b000
1000b5c4:	fffffeff 	.word	0xfffffeff
1000b5c8:	fffff7ff 	.word	0xfffff7ff
1000b5cc:	ffffefff 	.word	0xffffefff
1000b5d0:	ffffdfff 	.word	0xffffdfff
1000b5d4:	ffffbfff 	.word	0xffffbfff
1000b5d8:	ffff7fff 	.word	0xffff7fff
1000b5dc:	fffeffff 	.word	0xfffeffff
1000b5e0:	fffdffff 	.word	0xfffdffff
1000b5e4:	fffbffff 	.word	0xfffbffff
1000b5e8:	fff7ffff 	.word	0xfff7ffff
1000b5ec:	ffefffff 	.word	0xffefffff
1000b5f0:	ffdfffff 	.word	0xffdfffff
1000b5f4:	ffbfffff 	.word	0xffbfffff
1000b5f8:	ff7fffff 	.word	0xff7fffff
1000b5fc:	feffffff 	.word	0xfeffffff
1000b600:	fdffffff 	.word	0xfdffffff
1000b604:	fbffffff 	.word	0xfbffffff
1000b608:	f7ffffff 	.word	0xf7ffffff
1000b60c:	efffffff 	.word	0xefffffff
1000b610:	dfffffff 	.word	0xdfffffff
1000b614:	bfffffff 	.word	0xbfffffff
1000b618:	fffffdff 	.word	0xfffffdff
1000b61c:	fffffbff 	.word	0xfffffbff

1000b620 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b620:	b500      	push	{lr}
	switch (peripheral) {
1000b622:	2843      	cmp	r0, #67	; 0x43
1000b624:	d900      	bls.n	1000b628 <system_peripheral_reset+0x8>
1000b626:	e223      	b.n	1000ba70 <system_peripheral_reset+0x450>
1000b628:	0080      	lsls	r0, r0, #2
1000b62a:	4be0      	ldr	r3, [pc, #896]	; (1000b9ac <system_peripheral_reset+0x38c>)
1000b62c:	581b      	ldr	r3, [r3, r0]
1000b62e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b630:	4bdf      	ldr	r3, [pc, #892]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b632:	6859      	ldr	r1, [r3, #4]
1000b634:	2202      	movs	r2, #2
1000b636:	4391      	bics	r1, r2
1000b638:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b63a:	6859      	ldr	r1, [r3, #4]
1000b63c:	430a      	orrs	r2, r1
1000b63e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b640:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b642:	e216      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b644:	4bda      	ldr	r3, [pc, #872]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b646:	6859      	ldr	r1, [r3, #4]
1000b648:	2204      	movs	r2, #4
1000b64a:	4391      	bics	r1, r2
1000b64c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b64e:	6859      	ldr	r1, [r3, #4]
1000b650:	430a      	orrs	r2, r1
1000b652:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b654:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b656:	e20c      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b658:	4bd5      	ldr	r3, [pc, #852]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b65a:	6859      	ldr	r1, [r3, #4]
1000b65c:	2208      	movs	r2, #8
1000b65e:	4391      	bics	r1, r2
1000b660:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b662:	6859      	ldr	r1, [r3, #4]
1000b664:	430a      	orrs	r2, r1
1000b666:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b668:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b66a:	e202      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b66c:	4bd0      	ldr	r3, [pc, #832]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b66e:	6859      	ldr	r1, [r3, #4]
1000b670:	2210      	movs	r2, #16
1000b672:	4391      	bics	r1, r2
1000b674:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b676:	6859      	ldr	r1, [r3, #4]
1000b678:	430a      	orrs	r2, r1
1000b67a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b67c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b67e:	e1f8      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b680:	4bcb      	ldr	r3, [pc, #812]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b682:	6859      	ldr	r1, [r3, #4]
1000b684:	2220      	movs	r2, #32
1000b686:	4391      	bics	r1, r2
1000b688:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b68a:	6859      	ldr	r1, [r3, #4]
1000b68c:	430a      	orrs	r2, r1
1000b68e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b690:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b692:	e1ee      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b694:	4bc6      	ldr	r3, [pc, #792]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b696:	6859      	ldr	r1, [r3, #4]
1000b698:	2240      	movs	r2, #64	; 0x40
1000b69a:	4391      	bics	r1, r2
1000b69c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b69e:	6859      	ldr	r1, [r3, #4]
1000b6a0:	430a      	orrs	r2, r1
1000b6a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b6a6:	e1e4      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6a8:	4bc1      	ldr	r3, [pc, #772]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b6aa:	6859      	ldr	r1, [r3, #4]
1000b6ac:	2280      	movs	r2, #128	; 0x80
1000b6ae:	4391      	bics	r1, r2
1000b6b0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6b2:	6859      	ldr	r1, [r3, #4]
1000b6b4:	430a      	orrs	r2, r1
1000b6b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6b8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b6ba:	e1da      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6bc:	4bbc      	ldr	r3, [pc, #752]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b6be:	6859      	ldr	r1, [r3, #4]
1000b6c0:	4abc      	ldr	r2, [pc, #752]	; (1000b9b4 <system_peripheral_reset+0x394>)
1000b6c2:	400a      	ands	r2, r1
1000b6c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6c6:	685a      	ldr	r2, [r3, #4]
1000b6c8:	2180      	movs	r1, #128	; 0x80
1000b6ca:	0049      	lsls	r1, r1, #1
1000b6cc:	430a      	orrs	r2, r1
1000b6ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6d0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b6d2:	e1ce      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6d4:	4bb6      	ldr	r3, [pc, #728]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b6d6:	6859      	ldr	r1, [r3, #4]
1000b6d8:	4ab7      	ldr	r2, [pc, #732]	; (1000b9b8 <system_peripheral_reset+0x398>)
1000b6da:	400a      	ands	r2, r1
1000b6dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6de:	685a      	ldr	r2, [r3, #4]
1000b6e0:	2180      	movs	r1, #128	; 0x80
1000b6e2:	0089      	lsls	r1, r1, #2
1000b6e4:	430a      	orrs	r2, r1
1000b6e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6e8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b6ea:	e1c2      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6ec:	4bb0      	ldr	r3, [pc, #704]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b6ee:	6859      	ldr	r1, [r3, #4]
1000b6f0:	4ab2      	ldr	r2, [pc, #712]	; (1000b9bc <system_peripheral_reset+0x39c>)
1000b6f2:	400a      	ands	r2, r1
1000b6f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6f6:	685a      	ldr	r2, [r3, #4]
1000b6f8:	2180      	movs	r1, #128	; 0x80
1000b6fa:	00c9      	lsls	r1, r1, #3
1000b6fc:	430a      	orrs	r2, r1
1000b6fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b700:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b702:	e1b6      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b704:	4baa      	ldr	r3, [pc, #680]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b706:	6859      	ldr	r1, [r3, #4]
1000b708:	4aad      	ldr	r2, [pc, #692]	; (1000b9c0 <system_peripheral_reset+0x3a0>)
1000b70a:	400a      	ands	r2, r1
1000b70c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b70e:	685a      	ldr	r2, [r3, #4]
1000b710:	2180      	movs	r1, #128	; 0x80
1000b712:	0109      	lsls	r1, r1, #4
1000b714:	430a      	orrs	r2, r1
1000b716:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b718:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b71a:	e1aa      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b71c:	4ba4      	ldr	r3, [pc, #656]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b71e:	6859      	ldr	r1, [r3, #4]
1000b720:	4aa8      	ldr	r2, [pc, #672]	; (1000b9c4 <system_peripheral_reset+0x3a4>)
1000b722:	400a      	ands	r2, r1
1000b724:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b726:	685a      	ldr	r2, [r3, #4]
1000b728:	2180      	movs	r1, #128	; 0x80
1000b72a:	0149      	lsls	r1, r1, #5
1000b72c:	430a      	orrs	r2, r1
1000b72e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b730:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b732:	e19e      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b734:	4b9e      	ldr	r3, [pc, #632]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b736:	6859      	ldr	r1, [r3, #4]
1000b738:	4aa3      	ldr	r2, [pc, #652]	; (1000b9c8 <system_peripheral_reset+0x3a8>)
1000b73a:	400a      	ands	r2, r1
1000b73c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b73e:	685a      	ldr	r2, [r3, #4]
1000b740:	2180      	movs	r1, #128	; 0x80
1000b742:	0189      	lsls	r1, r1, #6
1000b744:	430a      	orrs	r2, r1
1000b746:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b748:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b74a:	e192      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b74c:	4b98      	ldr	r3, [pc, #608]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b74e:	6859      	ldr	r1, [r3, #4]
1000b750:	4a9e      	ldr	r2, [pc, #632]	; (1000b9cc <system_peripheral_reset+0x3ac>)
1000b752:	400a      	ands	r2, r1
1000b754:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b756:	685a      	ldr	r2, [r3, #4]
1000b758:	2180      	movs	r1, #128	; 0x80
1000b75a:	01c9      	lsls	r1, r1, #7
1000b75c:	430a      	orrs	r2, r1
1000b75e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b760:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b762:	e186      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b764:	4b92      	ldr	r3, [pc, #584]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b766:	6859      	ldr	r1, [r3, #4]
1000b768:	4a99      	ldr	r2, [pc, #612]	; (1000b9d0 <system_peripheral_reset+0x3b0>)
1000b76a:	400a      	ands	r2, r1
1000b76c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b76e:	685a      	ldr	r2, [r3, #4]
1000b770:	2180      	movs	r1, #128	; 0x80
1000b772:	0209      	lsls	r1, r1, #8
1000b774:	430a      	orrs	r2, r1
1000b776:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b778:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b77a:	e17a      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b77c:	4b8c      	ldr	r3, [pc, #560]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b77e:	6859      	ldr	r1, [r3, #4]
1000b780:	4a94      	ldr	r2, [pc, #592]	; (1000b9d4 <system_peripheral_reset+0x3b4>)
1000b782:	400a      	ands	r2, r1
1000b784:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b786:	685a      	ldr	r2, [r3, #4]
1000b788:	2180      	movs	r1, #128	; 0x80
1000b78a:	0249      	lsls	r1, r1, #9
1000b78c:	430a      	orrs	r2, r1
1000b78e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b790:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b792:	e16e      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b794:	4b86      	ldr	r3, [pc, #536]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b796:	6859      	ldr	r1, [r3, #4]
1000b798:	4a8f      	ldr	r2, [pc, #572]	; (1000b9d8 <system_peripheral_reset+0x3b8>)
1000b79a:	400a      	ands	r2, r1
1000b79c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b79e:	685a      	ldr	r2, [r3, #4]
1000b7a0:	2180      	movs	r1, #128	; 0x80
1000b7a2:	0289      	lsls	r1, r1, #10
1000b7a4:	430a      	orrs	r2, r1
1000b7a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7a8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b7aa:	e162      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7ac:	4b80      	ldr	r3, [pc, #512]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b7ae:	6859      	ldr	r1, [r3, #4]
1000b7b0:	4a8a      	ldr	r2, [pc, #552]	; (1000b9dc <system_peripheral_reset+0x3bc>)
1000b7b2:	400a      	ands	r2, r1
1000b7b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7b6:	685a      	ldr	r2, [r3, #4]
1000b7b8:	2180      	movs	r1, #128	; 0x80
1000b7ba:	02c9      	lsls	r1, r1, #11
1000b7bc:	430a      	orrs	r2, r1
1000b7be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7c0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b7c2:	e156      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7c4:	4b7a      	ldr	r3, [pc, #488]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b7c6:	6859      	ldr	r1, [r3, #4]
1000b7c8:	4a85      	ldr	r2, [pc, #532]	; (1000b9e0 <system_peripheral_reset+0x3c0>)
1000b7ca:	400a      	ands	r2, r1
1000b7cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7ce:	685a      	ldr	r2, [r3, #4]
1000b7d0:	2180      	movs	r1, #128	; 0x80
1000b7d2:	0309      	lsls	r1, r1, #12
1000b7d4:	430a      	orrs	r2, r1
1000b7d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7d8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b7da:	e14a      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7dc:	4b74      	ldr	r3, [pc, #464]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b7de:	6859      	ldr	r1, [r3, #4]
1000b7e0:	4a80      	ldr	r2, [pc, #512]	; (1000b9e4 <system_peripheral_reset+0x3c4>)
1000b7e2:	400a      	ands	r2, r1
1000b7e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7e6:	685a      	ldr	r2, [r3, #4]
1000b7e8:	2180      	movs	r1, #128	; 0x80
1000b7ea:	0349      	lsls	r1, r1, #13
1000b7ec:	430a      	orrs	r2, r1
1000b7ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7f0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b7f2:	e13e      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7f4:	4b6e      	ldr	r3, [pc, #440]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b7f6:	6859      	ldr	r1, [r3, #4]
1000b7f8:	4a7b      	ldr	r2, [pc, #492]	; (1000b9e8 <system_peripheral_reset+0x3c8>)
1000b7fa:	400a      	ands	r2, r1
1000b7fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7fe:	685a      	ldr	r2, [r3, #4]
1000b800:	2180      	movs	r1, #128	; 0x80
1000b802:	0389      	lsls	r1, r1, #14
1000b804:	430a      	orrs	r2, r1
1000b806:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b808:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b80a:	e132      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b80c:	4b68      	ldr	r3, [pc, #416]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b80e:	6859      	ldr	r1, [r3, #4]
1000b810:	4a76      	ldr	r2, [pc, #472]	; (1000b9ec <system_peripheral_reset+0x3cc>)
1000b812:	400a      	ands	r2, r1
1000b814:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b816:	685a      	ldr	r2, [r3, #4]
1000b818:	2180      	movs	r1, #128	; 0x80
1000b81a:	03c9      	lsls	r1, r1, #15
1000b81c:	430a      	orrs	r2, r1
1000b81e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b820:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b822:	e126      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b824:	4b62      	ldr	r3, [pc, #392]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b826:	6859      	ldr	r1, [r3, #4]
1000b828:	4a71      	ldr	r2, [pc, #452]	; (1000b9f0 <system_peripheral_reset+0x3d0>)
1000b82a:	400a      	ands	r2, r1
1000b82c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b82e:	685a      	ldr	r2, [r3, #4]
1000b830:	2180      	movs	r1, #128	; 0x80
1000b832:	0409      	lsls	r1, r1, #16
1000b834:	430a      	orrs	r2, r1
1000b836:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b838:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b83a:	e11a      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b83c:	4b5c      	ldr	r3, [pc, #368]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b83e:	6859      	ldr	r1, [r3, #4]
1000b840:	4a6c      	ldr	r2, [pc, #432]	; (1000b9f4 <system_peripheral_reset+0x3d4>)
1000b842:	400a      	ands	r2, r1
1000b844:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b846:	685a      	ldr	r2, [r3, #4]
1000b848:	2180      	movs	r1, #128	; 0x80
1000b84a:	0449      	lsls	r1, r1, #17
1000b84c:	430a      	orrs	r2, r1
1000b84e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b850:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b852:	e10e      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b854:	4b56      	ldr	r3, [pc, #344]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b856:	6859      	ldr	r1, [r3, #4]
1000b858:	4a67      	ldr	r2, [pc, #412]	; (1000b9f8 <system_peripheral_reset+0x3d8>)
1000b85a:	400a      	ands	r2, r1
1000b85c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b85e:	685a      	ldr	r2, [r3, #4]
1000b860:	2180      	movs	r1, #128	; 0x80
1000b862:	0489      	lsls	r1, r1, #18
1000b864:	430a      	orrs	r2, r1
1000b866:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b868:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b86a:	e102      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b86c:	4b50      	ldr	r3, [pc, #320]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b86e:	6859      	ldr	r1, [r3, #4]
1000b870:	4a62      	ldr	r2, [pc, #392]	; (1000b9fc <system_peripheral_reset+0x3dc>)
1000b872:	400a      	ands	r2, r1
1000b874:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b876:	685a      	ldr	r2, [r3, #4]
1000b878:	2180      	movs	r1, #128	; 0x80
1000b87a:	04c9      	lsls	r1, r1, #19
1000b87c:	430a      	orrs	r2, r1
1000b87e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b880:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b882:	e0f6      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b884:	4b4a      	ldr	r3, [pc, #296]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b886:	6859      	ldr	r1, [r3, #4]
1000b888:	4a5d      	ldr	r2, [pc, #372]	; (1000ba00 <system_peripheral_reset+0x3e0>)
1000b88a:	400a      	ands	r2, r1
1000b88c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b88e:	685a      	ldr	r2, [r3, #4]
1000b890:	2180      	movs	r1, #128	; 0x80
1000b892:	0509      	lsls	r1, r1, #20
1000b894:	430a      	orrs	r2, r1
1000b896:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b898:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b89a:	e0ea      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b89c:	4b44      	ldr	r3, [pc, #272]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b89e:	6859      	ldr	r1, [r3, #4]
1000b8a0:	4a58      	ldr	r2, [pc, #352]	; (1000ba04 <system_peripheral_reset+0x3e4>)
1000b8a2:	400a      	ands	r2, r1
1000b8a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8a6:	685a      	ldr	r2, [r3, #4]
1000b8a8:	2180      	movs	r1, #128	; 0x80
1000b8aa:	0549      	lsls	r1, r1, #21
1000b8ac:	430a      	orrs	r2, r1
1000b8ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8b0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b8b2:	e0de      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8b4:	4b3e      	ldr	r3, [pc, #248]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b8b6:	6859      	ldr	r1, [r3, #4]
1000b8b8:	4a53      	ldr	r2, [pc, #332]	; (1000ba08 <system_peripheral_reset+0x3e8>)
1000b8ba:	400a      	ands	r2, r1
1000b8bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8be:	685a      	ldr	r2, [r3, #4]
1000b8c0:	2180      	movs	r1, #128	; 0x80
1000b8c2:	0589      	lsls	r1, r1, #22
1000b8c4:	430a      	orrs	r2, r1
1000b8c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8c8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b8ca:	e0d2      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8cc:	4b38      	ldr	r3, [pc, #224]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b8ce:	6859      	ldr	r1, [r3, #4]
1000b8d0:	4a4e      	ldr	r2, [pc, #312]	; (1000ba0c <system_peripheral_reset+0x3ec>)
1000b8d2:	400a      	ands	r2, r1
1000b8d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8d6:	685a      	ldr	r2, [r3, #4]
1000b8d8:	2180      	movs	r1, #128	; 0x80
1000b8da:	05c9      	lsls	r1, r1, #23
1000b8dc:	430a      	orrs	r2, r1
1000b8de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8e0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b8e2:	e0c6      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8e4:	4a32      	ldr	r2, [pc, #200]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b8e6:	6853      	ldr	r3, [r2, #4]
1000b8e8:	005b      	lsls	r3, r3, #1
1000b8ea:	085b      	lsrs	r3, r3, #1
1000b8ec:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8ee:	6853      	ldr	r3, [r2, #4]
1000b8f0:	2180      	movs	r1, #128	; 0x80
1000b8f2:	0609      	lsls	r1, r1, #24
1000b8f4:	430b      	orrs	r3, r1
1000b8f6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8f8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b8fa:	e0ba      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b8fc:	4b2c      	ldr	r3, [pc, #176]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b8fe:	891a      	ldrh	r2, [r3, #8]
1000b900:	2101      	movs	r1, #1
1000b902:	438a      	bics	r2, r1
1000b904:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b906:	8919      	ldrh	r1, [r3, #8]
1000b908:	2201      	movs	r2, #1
1000b90a:	430a      	orrs	r2, r1
1000b90c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b90e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b910:	e0af      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b912:	4b27      	ldr	r3, [pc, #156]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b914:	891a      	ldrh	r2, [r3, #8]
1000b916:	2102      	movs	r1, #2
1000b918:	438a      	bics	r2, r1
1000b91a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b91c:	8919      	ldrh	r1, [r3, #8]
1000b91e:	2202      	movs	r2, #2
1000b920:	430a      	orrs	r2, r1
1000b922:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b924:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b926:	e0a4      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b928:	4b21      	ldr	r3, [pc, #132]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b92a:	891a      	ldrh	r2, [r3, #8]
1000b92c:	2104      	movs	r1, #4
1000b92e:	438a      	bics	r2, r1
1000b930:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b932:	8919      	ldrh	r1, [r3, #8]
1000b934:	2204      	movs	r2, #4
1000b936:	430a      	orrs	r2, r1
1000b938:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b93a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b93c:	e099      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b93e:	4b1c      	ldr	r3, [pc, #112]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b940:	891a      	ldrh	r2, [r3, #8]
1000b942:	2108      	movs	r1, #8
1000b944:	438a      	bics	r2, r1
1000b946:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b948:	8919      	ldrh	r1, [r3, #8]
1000b94a:	2208      	movs	r2, #8
1000b94c:	430a      	orrs	r2, r1
1000b94e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b950:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b952:	e08e      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b954:	4b16      	ldr	r3, [pc, #88]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b956:	891a      	ldrh	r2, [r3, #8]
1000b958:	2110      	movs	r1, #16
1000b95a:	438a      	bics	r2, r1
1000b95c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b95e:	8919      	ldrh	r1, [r3, #8]
1000b960:	2210      	movs	r2, #16
1000b962:	430a      	orrs	r2, r1
1000b964:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b966:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b968:	e083      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b96a:	4b11      	ldr	r3, [pc, #68]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b96c:	891a      	ldrh	r2, [r3, #8]
1000b96e:	2120      	movs	r1, #32
1000b970:	438a      	bics	r2, r1
1000b972:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b974:	8919      	ldrh	r1, [r3, #8]
1000b976:	2220      	movs	r2, #32
1000b978:	430a      	orrs	r2, r1
1000b97a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b97c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b97e:	e078      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b980:	4b0b      	ldr	r3, [pc, #44]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b982:	891a      	ldrh	r2, [r3, #8]
1000b984:	2140      	movs	r1, #64	; 0x40
1000b986:	438a      	bics	r2, r1
1000b988:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b98a:	8919      	ldrh	r1, [r3, #8]
1000b98c:	2240      	movs	r2, #64	; 0x40
1000b98e:	430a      	orrs	r2, r1
1000b990:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b992:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b994:	e06d      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b996:	4b06      	ldr	r3, [pc, #24]	; (1000b9b0 <system_peripheral_reset+0x390>)
1000b998:	891a      	ldrh	r2, [r3, #8]
1000b99a:	2180      	movs	r1, #128	; 0x80
1000b99c:	438a      	bics	r2, r1
1000b99e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b9a0:	8919      	ldrh	r1, [r3, #8]
1000b9a2:	2280      	movs	r2, #128	; 0x80
1000b9a4:	430a      	orrs	r2, r1
1000b9a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b9aa:	e062      	b.n	1000ba72 <system_peripheral_reset+0x452>
1000b9ac:	10017360 	.word	0x10017360
1000b9b0:	4000b000 	.word	0x4000b000
1000b9b4:	fffffeff 	.word	0xfffffeff
1000b9b8:	fffffdff 	.word	0xfffffdff
1000b9bc:	fffffbff 	.word	0xfffffbff
1000b9c0:	fffff7ff 	.word	0xfffff7ff
1000b9c4:	ffffefff 	.word	0xffffefff
1000b9c8:	ffffdfff 	.word	0xffffdfff
1000b9cc:	ffffbfff 	.word	0xffffbfff
1000b9d0:	ffff7fff 	.word	0xffff7fff
1000b9d4:	fffeffff 	.word	0xfffeffff
1000b9d8:	fffdffff 	.word	0xfffdffff
1000b9dc:	fffbffff 	.word	0xfffbffff
1000b9e0:	fff7ffff 	.word	0xfff7ffff
1000b9e4:	ffefffff 	.word	0xffefffff
1000b9e8:	ffdfffff 	.word	0xffdfffff
1000b9ec:	ffbfffff 	.word	0xffbfffff
1000b9f0:	ff7fffff 	.word	0xff7fffff
1000b9f4:	feffffff 	.word	0xfeffffff
1000b9f8:	fdffffff 	.word	0xfdffffff
1000b9fc:	fbffffff 	.word	0xfbffffff
1000ba00:	f7ffffff 	.word	0xf7ffffff
1000ba04:	efffffff 	.word	0xefffffff
1000ba08:	dfffffff 	.word	0xdfffffff
1000ba0c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba10:	4b18      	ldr	r3, [pc, #96]	; (1000ba74 <system_peripheral_reset+0x454>)
1000ba12:	8919      	ldrh	r1, [r3, #8]
1000ba14:	4a18      	ldr	r2, [pc, #96]	; (1000ba78 <system_peripheral_reset+0x458>)
1000ba16:	400a      	ands	r2, r1
1000ba18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba1a:	8919      	ldrh	r1, [r3, #8]
1000ba1c:	2280      	movs	r2, #128	; 0x80
1000ba1e:	0052      	lsls	r2, r2, #1
1000ba20:	430a      	orrs	r2, r1
1000ba22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000ba26:	e024      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba28:	4b12      	ldr	r3, [pc, #72]	; (1000ba74 <system_peripheral_reset+0x454>)
1000ba2a:	8919      	ldrh	r1, [r3, #8]
1000ba2c:	4a13      	ldr	r2, [pc, #76]	; (1000ba7c <system_peripheral_reset+0x45c>)
1000ba2e:	400a      	ands	r2, r1
1000ba30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba32:	8919      	ldrh	r1, [r3, #8]
1000ba34:	2280      	movs	r2, #128	; 0x80
1000ba36:	0092      	lsls	r2, r2, #2
1000ba38:	430a      	orrs	r2, r1
1000ba3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ba3e:	e018      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba40:	4b0c      	ldr	r3, [pc, #48]	; (1000ba74 <system_peripheral_reset+0x454>)
1000ba42:	8919      	ldrh	r1, [r3, #8]
1000ba44:	4a0e      	ldr	r2, [pc, #56]	; (1000ba80 <system_peripheral_reset+0x460>)
1000ba46:	400a      	ands	r2, r1
1000ba48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba4a:	8919      	ldrh	r1, [r3, #8]
1000ba4c:	2280      	movs	r2, #128	; 0x80
1000ba4e:	00d2      	lsls	r2, r2, #3
1000ba50:	430a      	orrs	r2, r1
1000ba52:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba54:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ba56:	e00c      	b.n	1000ba72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba58:	4b06      	ldr	r3, [pc, #24]	; (1000ba74 <system_peripheral_reset+0x454>)
1000ba5a:	8919      	ldrh	r1, [r3, #8]
1000ba5c:	4a09      	ldr	r2, [pc, #36]	; (1000ba84 <system_peripheral_reset+0x464>)
1000ba5e:	400a      	ands	r2, r1
1000ba60:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba62:	8919      	ldrh	r1, [r3, #8]
1000ba64:	2280      	movs	r2, #128	; 0x80
1000ba66:	0112      	lsls	r2, r2, #4
1000ba68:	430a      	orrs	r2, r1
1000ba6a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba6c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000ba6e:	e000      	b.n	1000ba72 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ba70:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ba72:	bd00      	pop	{pc}
1000ba74:	4000b000 	.word	0x4000b000
1000ba78:	fffffeff 	.word	0xfffffeff
1000ba7c:	fffffdff 	.word	0xfffffdff
1000ba80:	fffffbff 	.word	0xfffffbff
1000ba84:	fffff7ff 	.word	0xfffff7ff

1000ba88 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000ba88:	2380      	movs	r3, #128	; 0x80
1000ba8a:	04db      	lsls	r3, r3, #19
1000ba8c:	469c      	mov	ip, r3
1000ba8e:	4460      	add	r0, ip
1000ba90:	0080      	lsls	r0, r0, #2
1000ba92:	6001      	str	r1, [r0, #0]
}
1000ba94:	4770      	bx	lr
1000ba96:	46c0      	nop			; (mov r8, r8)

1000ba98 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ba98:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ba9a:	4b20      	ldr	r3, [pc, #128]	; (1000bb1c <uart_rx0_isr_handler+0x84>)
1000ba9c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ba9e:	6823      	ldr	r3, [r4, #0]
1000baa0:	7d1d      	ldrb	r5, [r3, #20]
1000baa2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000baa4:	066a      	lsls	r2, r5, #25
1000baa6:	d513      	bpl.n	1000bad0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000baa8:	211e      	movs	r1, #30
1000baaa:	2222      	movs	r2, #34	; 0x22
1000baac:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000baae:	7e1a      	ldrb	r2, [r3, #24]
1000bab0:	3123      	adds	r1, #35	; 0x23
1000bab2:	438a      	bics	r2, r1
1000bab4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bab6:	2321      	movs	r3, #33	; 0x21
1000bab8:	5ce3      	ldrb	r3, [r4, r3]
1000baba:	071b      	lsls	r3, r3, #28
1000babc:	d506      	bpl.n	1000bacc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000babe:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bac0:	5ce3      	ldrb	r3, [r4, r3]
1000bac2:	071b      	lsls	r3, r3, #28
1000bac4:	d502      	bpl.n	1000bacc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bac6:	0020      	movs	r0, r4
1000bac8:	6923      	ldr	r3, [r4, #16]
1000baca:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bacc:	6823      	ldr	r3, [r4, #0]
1000bace:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bad0:	07eb      	lsls	r3, r5, #31
1000bad2:	d522      	bpl.n	1000bb1a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bad4:	6823      	ldr	r3, [r4, #0]
1000bad6:	7c1b      	ldrb	r3, [r3, #16]
1000bad8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bada:	6962      	ldr	r2, [r4, #20]
1000badc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bade:	6963      	ldr	r3, [r4, #20]
1000bae0:	3301      	adds	r3, #1
1000bae2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bae4:	8ba3      	ldrh	r3, [r4, #28]
1000bae6:	3b01      	subs	r3, #1
1000bae8:	b29b      	uxth	r3, r3
1000baea:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000baec:	8ba3      	ldrh	r3, [r4, #28]
1000baee:	b29b      	uxth	r3, r3
1000baf0:	2b00      	cmp	r3, #0
1000baf2:	d112      	bne.n	1000bb1a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000baf4:	3321      	adds	r3, #33	; 0x21
1000baf6:	5ce3      	ldrb	r3, [r4, r3]
1000baf8:	075b      	lsls	r3, r3, #29
1000bafa:	d50e      	bpl.n	1000bb1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bafc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bafe:	5ce3      	ldrb	r3, [r4, r3]
1000bb00:	075b      	lsls	r3, r3, #29
1000bb02:	d50a      	bpl.n	1000bb1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bb04:	2200      	movs	r2, #0
1000bb06:	2322      	movs	r3, #34	; 0x22
1000bb08:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bb0a:	6822      	ldr	r2, [r4, #0]
1000bb0c:	7e13      	ldrb	r3, [r2, #24]
1000bb0e:	2101      	movs	r1, #1
1000bb10:	438b      	bics	r3, r1
1000bb12:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bb14:	68e3      	ldr	r3, [r4, #12]
1000bb16:	0020      	movs	r0, r4
1000bb18:	4798      	blx	r3
			}
		}
	}
}
1000bb1a:	bd70      	pop	{r4, r5, r6, pc}
1000bb1c:	1001a17c 	.word	0x1001a17c

1000bb20 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000bb20:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bb22:	4b21      	ldr	r3, [pc, #132]	; (1000bba8 <uart_tx0_isr_handler+0x88>)
1000bb24:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bb26:	6823      	ldr	r3, [r4, #0]
1000bb28:	791d      	ldrb	r5, [r3, #4]
1000bb2a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bb2c:	07ea      	lsls	r2, r5, #31
1000bb2e:	d517      	bpl.n	1000bb60 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bb30:	69a2      	ldr	r2, [r4, #24]
1000bb32:	7811      	ldrb	r1, [r2, #0]
1000bb34:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bb36:	3201      	adds	r2, #1
1000bb38:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bb3a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bb3c:	8be3      	ldrh	r3, [r4, #30]
1000bb3e:	3b01      	subs	r3, #1
1000bb40:	b29b      	uxth	r3, r3
1000bb42:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bb44:	8be3      	ldrh	r3, [r4, #30]
1000bb46:	b29b      	uxth	r3, r3
1000bb48:	2b00      	cmp	r3, #0
1000bb4a:	d109      	bne.n	1000bb60 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bb4c:	6822      	ldr	r2, [r4, #0]
1000bb4e:	7a13      	ldrb	r3, [r2, #8]
1000bb50:	2101      	movs	r1, #1
1000bb52:	438b      	bics	r3, r1
1000bb54:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bb56:	6822      	ldr	r2, [r4, #0]
1000bb58:	7a11      	ldrb	r1, [r2, #8]
1000bb5a:	2310      	movs	r3, #16
1000bb5c:	430b      	orrs	r3, r1
1000bb5e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bb60:	06eb      	lsls	r3, r5, #27
1000bb62:	d512      	bpl.n	1000bb8a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bb64:	2321      	movs	r3, #33	; 0x21
1000bb66:	5ce3      	ldrb	r3, [r4, r3]
1000bb68:	07db      	lsls	r3, r3, #31
1000bb6a:	d50e      	bpl.n	1000bb8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bb6c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bb6e:	5ce3      	ldrb	r3, [r4, r3]
1000bb70:	07db      	lsls	r3, r3, #31
1000bb72:	d50a      	bpl.n	1000bb8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bb74:	2200      	movs	r2, #0
1000bb76:	2322      	movs	r3, #34	; 0x22
1000bb78:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bb7a:	6822      	ldr	r2, [r4, #0]
1000bb7c:	7a13      	ldrb	r3, [r2, #8]
1000bb7e:	2110      	movs	r1, #16
1000bb80:	438b      	bics	r3, r1
1000bb82:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bb84:	0020      	movs	r0, r4
1000bb86:	6863      	ldr	r3, [r4, #4]
1000bb88:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bb8a:	06ab      	lsls	r3, r5, #26
1000bb8c:	d50a      	bpl.n	1000bba4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bb8e:	2321      	movs	r3, #33	; 0x21
1000bb90:	5ce3      	ldrb	r3, [r4, r3]
1000bb92:	079b      	lsls	r3, r3, #30
1000bb94:	d506      	bpl.n	1000bba4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bb96:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bb98:	5ce3      	ldrb	r3, [r4, r3]
1000bb9a:	079b      	lsls	r3, r3, #30
1000bb9c:	d502      	bpl.n	1000bba4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bb9e:	68a3      	ldr	r3, [r4, #8]
1000bba0:	0020      	movs	r0, r4
1000bba2:	4798      	blx	r3
		}

	}
}
1000bba4:	bd70      	pop	{r4, r5, r6, pc}
1000bba6:	46c0      	nop			; (mov r8, r8)
1000bba8:	1001a17c 	.word	0x1001a17c

1000bbac <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000bbac:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bbae:	4b20      	ldr	r3, [pc, #128]	; (1000bc30 <uart_rx1_isr_handler+0x84>)
1000bbb0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bbb2:	6823      	ldr	r3, [r4, #0]
1000bbb4:	7d1d      	ldrb	r5, [r3, #20]
1000bbb6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bbb8:	066a      	lsls	r2, r5, #25
1000bbba:	d513      	bpl.n	1000bbe4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bbbc:	211e      	movs	r1, #30
1000bbbe:	2222      	movs	r2, #34	; 0x22
1000bbc0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bbc2:	7e1a      	ldrb	r2, [r3, #24]
1000bbc4:	3123      	adds	r1, #35	; 0x23
1000bbc6:	438a      	bics	r2, r1
1000bbc8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bbca:	2321      	movs	r3, #33	; 0x21
1000bbcc:	5ce3      	ldrb	r3, [r4, r3]
1000bbce:	071b      	lsls	r3, r3, #28
1000bbd0:	d506      	bpl.n	1000bbe0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bbd2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bbd4:	5ce3      	ldrb	r3, [r4, r3]
1000bbd6:	071b      	lsls	r3, r3, #28
1000bbd8:	d502      	bpl.n	1000bbe0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bbda:	0020      	movs	r0, r4
1000bbdc:	6923      	ldr	r3, [r4, #16]
1000bbde:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bbe0:	6823      	ldr	r3, [r4, #0]
1000bbe2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bbe4:	07eb      	lsls	r3, r5, #31
1000bbe6:	d522      	bpl.n	1000bc2e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bbe8:	6823      	ldr	r3, [r4, #0]
1000bbea:	7c1b      	ldrb	r3, [r3, #16]
1000bbec:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bbee:	6962      	ldr	r2, [r4, #20]
1000bbf0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bbf2:	6963      	ldr	r3, [r4, #20]
1000bbf4:	3301      	adds	r3, #1
1000bbf6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bbf8:	8ba3      	ldrh	r3, [r4, #28]
1000bbfa:	3b01      	subs	r3, #1
1000bbfc:	b29b      	uxth	r3, r3
1000bbfe:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bc00:	8ba3      	ldrh	r3, [r4, #28]
1000bc02:	b29b      	uxth	r3, r3
1000bc04:	2b00      	cmp	r3, #0
1000bc06:	d112      	bne.n	1000bc2e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc08:	3321      	adds	r3, #33	; 0x21
1000bc0a:	5ce3      	ldrb	r3, [r4, r3]
1000bc0c:	075b      	lsls	r3, r3, #29
1000bc0e:	d50e      	bpl.n	1000bc2e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bc10:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc12:	5ce3      	ldrb	r3, [r4, r3]
1000bc14:	075b      	lsls	r3, r3, #29
1000bc16:	d50a      	bpl.n	1000bc2e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bc18:	2200      	movs	r2, #0
1000bc1a:	2322      	movs	r3, #34	; 0x22
1000bc1c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bc1e:	6822      	ldr	r2, [r4, #0]
1000bc20:	7e13      	ldrb	r3, [r2, #24]
1000bc22:	2101      	movs	r1, #1
1000bc24:	438b      	bics	r3, r1
1000bc26:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bc28:	68e3      	ldr	r3, [r4, #12]
1000bc2a:	0020      	movs	r0, r4
1000bc2c:	4798      	blx	r3
			}
		}
	}
}
1000bc2e:	bd70      	pop	{r4, r5, r6, pc}
1000bc30:	1001a17c 	.word	0x1001a17c

1000bc34 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bc34:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bc36:	4b21      	ldr	r3, [pc, #132]	; (1000bcbc <uart_tx1_isr_handler+0x88>)
1000bc38:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bc3a:	6823      	ldr	r3, [r4, #0]
1000bc3c:	791d      	ldrb	r5, [r3, #4]
1000bc3e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bc40:	07ea      	lsls	r2, r5, #31
1000bc42:	d517      	bpl.n	1000bc74 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bc44:	69a2      	ldr	r2, [r4, #24]
1000bc46:	7811      	ldrb	r1, [r2, #0]
1000bc48:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bc4a:	3201      	adds	r2, #1
1000bc4c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bc4e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bc50:	8be3      	ldrh	r3, [r4, #30]
1000bc52:	3b01      	subs	r3, #1
1000bc54:	b29b      	uxth	r3, r3
1000bc56:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bc58:	8be3      	ldrh	r3, [r4, #30]
1000bc5a:	b29b      	uxth	r3, r3
1000bc5c:	2b00      	cmp	r3, #0
1000bc5e:	d109      	bne.n	1000bc74 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc60:	6822      	ldr	r2, [r4, #0]
1000bc62:	7a13      	ldrb	r3, [r2, #8]
1000bc64:	2101      	movs	r1, #1
1000bc66:	438b      	bics	r3, r1
1000bc68:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bc6a:	6822      	ldr	r2, [r4, #0]
1000bc6c:	7a11      	ldrb	r1, [r2, #8]
1000bc6e:	2310      	movs	r3, #16
1000bc70:	430b      	orrs	r3, r1
1000bc72:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bc74:	06eb      	lsls	r3, r5, #27
1000bc76:	d512      	bpl.n	1000bc9e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc78:	2321      	movs	r3, #33	; 0x21
1000bc7a:	5ce3      	ldrb	r3, [r4, r3]
1000bc7c:	07db      	lsls	r3, r3, #31
1000bc7e:	d50e      	bpl.n	1000bc9e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bc80:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc82:	5ce3      	ldrb	r3, [r4, r3]
1000bc84:	07db      	lsls	r3, r3, #31
1000bc86:	d50a      	bpl.n	1000bc9e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bc88:	2200      	movs	r2, #0
1000bc8a:	2322      	movs	r3, #34	; 0x22
1000bc8c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc8e:	6822      	ldr	r2, [r4, #0]
1000bc90:	7a13      	ldrb	r3, [r2, #8]
1000bc92:	2110      	movs	r1, #16
1000bc94:	438b      	bics	r3, r1
1000bc96:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bc98:	0020      	movs	r0, r4
1000bc9a:	6863      	ldr	r3, [r4, #4]
1000bc9c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bc9e:	06ab      	lsls	r3, r5, #26
1000bca0:	d50a      	bpl.n	1000bcb8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bca2:	2321      	movs	r3, #33	; 0x21
1000bca4:	5ce3      	ldrb	r3, [r4, r3]
1000bca6:	079b      	lsls	r3, r3, #30
1000bca8:	d506      	bpl.n	1000bcb8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bcaa:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bcac:	5ce3      	ldrb	r3, [r4, r3]
1000bcae:	079b      	lsls	r3, r3, #30
1000bcb0:	d502      	bpl.n	1000bcb8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bcb2:	68a3      	ldr	r3, [r4, #8]
1000bcb4:	0020      	movs	r0, r4
1000bcb6:	4798      	blx	r3
		}

	}
}
1000bcb8:	bd70      	pop	{r4, r5, r6, pc}
1000bcba:	46c0      	nop			; (mov r8, r8)
1000bcbc:	1001a17c 	.word	0x1001a17c

1000bcc0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000bcc0:	23e1      	movs	r3, #225	; 0xe1
1000bcc2:	025b      	lsls	r3, r3, #9
1000bcc4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000bcc6:	2300      	movs	r3, #0
1000bcc8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000bcca:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000bccc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000bcce:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000bcd0:	3302      	adds	r3, #2
1000bcd2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000bcd4:	2203      	movs	r2, #3
1000bcd6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000bcd8:	3201      	adds	r2, #1
1000bcda:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000bcdc:	3201      	adds	r2, #1
1000bcde:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000bce0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000bce2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000bce4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000bce6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000bce8:	4770      	bx	lr
1000bcea:	46c0      	nop			; (mov r8, r8)

1000bcec <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bcee:	464f      	mov	r7, r9
1000bcf0:	4646      	mov	r6, r8
1000bcf2:	b4c0      	push	{r6, r7}
1000bcf4:	0005      	movs	r5, r0
1000bcf6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000bcf8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000bcfa:	2300      	movs	r3, #0
1000bcfc:	6043      	str	r3, [r0, #4]
1000bcfe:	6083      	str	r3, [r0, #8]
1000bd00:	60c3      	str	r3, [r0, #12]
1000bd02:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000bd04:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000bd06:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000bd08:	2200      	movs	r2, #0
1000bd0a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000bd0c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000bd0e:	3320      	adds	r3, #32
1000bd10:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000bd12:	3301      	adds	r3, #1
1000bd14:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000bd16:	3301      	adds	r3, #1
1000bd18:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000bd1a:	4b55      	ldr	r3, [pc, #340]	; (1000be70 <uart_init+0x184>)
1000bd1c:	4299      	cmp	r1, r3
1000bd1e:	d118      	bne.n	1000bd52 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000bd20:	2009      	movs	r0, #9
1000bd22:	4c54      	ldr	r4, [pc, #336]	; (1000be74 <uart_init+0x188>)
1000bd24:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000bd26:	200a      	movs	r0, #10
1000bd28:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000bd2a:	2009      	movs	r0, #9
1000bd2c:	4c52      	ldr	r4, [pc, #328]	; (1000be78 <uart_init+0x18c>)
1000bd2e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000bd30:	200a      	movs	r0, #10
1000bd32:	47a0      	blx	r4
		_uart_instances[0] = module;
1000bd34:	4b51      	ldr	r3, [pc, #324]	; (1000be7c <uart_init+0x190>)
1000bd36:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000bd38:	4951      	ldr	r1, [pc, #324]	; (1000be80 <uart_init+0x194>)
1000bd3a:	2010      	movs	r0, #16
1000bd3c:	4c51      	ldr	r4, [pc, #324]	; (1000be84 <uart_init+0x198>)
1000bd3e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000bd40:	4951      	ldr	r1, [pc, #324]	; (1000be88 <uart_init+0x19c>)
1000bd42:	2011      	movs	r0, #17
1000bd44:	47a0      	blx	r4
1000bd46:	4b51      	ldr	r3, [pc, #324]	; (1000be8c <uart_init+0x1a0>)
1000bd48:	2201      	movs	r2, #1
1000bd4a:	601a      	str	r2, [r3, #0]
1000bd4c:	3201      	adds	r2, #1
1000bd4e:	601a      	str	r2, [r3, #0]
1000bd50:	e01a      	b.n	1000bd88 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000bd52:	4b4f      	ldr	r3, [pc, #316]	; (1000be90 <uart_init+0x1a4>)
1000bd54:	4299      	cmp	r1, r3
1000bd56:	d117      	bne.n	1000bd88 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000bd58:	200b      	movs	r0, #11
1000bd5a:	4c46      	ldr	r4, [pc, #280]	; (1000be74 <uart_init+0x188>)
1000bd5c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000bd5e:	200c      	movs	r0, #12
1000bd60:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000bd62:	200b      	movs	r0, #11
1000bd64:	4c44      	ldr	r4, [pc, #272]	; (1000be78 <uart_init+0x18c>)
1000bd66:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000bd68:	200c      	movs	r0, #12
1000bd6a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000bd6c:	4b43      	ldr	r3, [pc, #268]	; (1000be7c <uart_init+0x190>)
1000bd6e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000bd70:	4948      	ldr	r1, [pc, #288]	; (1000be94 <uart_init+0x1a8>)
1000bd72:	2012      	movs	r0, #18
1000bd74:	4c43      	ldr	r4, [pc, #268]	; (1000be84 <uart_init+0x198>)
1000bd76:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000bd78:	4947      	ldr	r1, [pc, #284]	; (1000be98 <uart_init+0x1ac>)
1000bd7a:	2013      	movs	r0, #19
1000bd7c:	47a0      	blx	r4
1000bd7e:	4b43      	ldr	r3, [pc, #268]	; (1000be8c <uart_init+0x1a0>)
1000bd80:	2204      	movs	r2, #4
1000bd82:	601a      	str	r2, [r3, #0]
1000bd84:	3204      	adds	r2, #4
1000bd86:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bd88:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000bd8a:	2204      	movs	r2, #4
1000bd8c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bd8e:	2b00      	cmp	r3, #0
1000bd90:	d152      	bne.n	1000be38 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000bd92:	3302      	adds	r3, #2
1000bd94:	4698      	mov	r8, r3
1000bd96:	e04f      	b.n	1000be38 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bd98:	8a31      	ldrh	r1, [r6, #16]
1000bd9a:	ce01      	ldmia	r6!, {r0}
1000bd9c:	b2c0      	uxtb	r0, r0
1000bd9e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000bda0:	3401      	adds	r4, #1
1000bda2:	b2e4      	uxtb	r4, r4
1000bda4:	4544      	cmp	r4, r8
1000bda6:	d3f7      	bcc.n	1000bd98 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bda8:	682b      	ldr	r3, [r5, #0]
1000bdaa:	7d1a      	ldrb	r2, [r3, #20]
1000bdac:	07d2      	lsls	r2, r2, #31
1000bdae:	d504      	bpl.n	1000bdba <uart_init+0xce>
1000bdb0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000bdb2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bdb4:	7d1a      	ldrb	r2, [r3, #20]
1000bdb6:	420a      	tst	r2, r1
1000bdb8:	d1fb      	bne.n	1000bdb2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000bdba:	2100      	movs	r1, #0
1000bdbc:	2220      	movs	r2, #32
1000bdbe:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000bdc0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000bdc2:	1e59      	subs	r1, r3, #1
1000bdc4:	418b      	sbcs	r3, r1
1000bdc6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000bdc8:	793b      	ldrb	r3, [r7, #4]
1000bdca:	797a      	ldrb	r2, [r7, #5]
1000bdcc:	4313      	orrs	r3, r2
1000bdce:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bdd0:	79ba      	ldrb	r2, [r7, #6]
1000bdd2:	2a02      	cmp	r2, #2
1000bdd4:	d00d      	beq.n	1000bdf2 <uart_init+0x106>
1000bdd6:	b2d1      	uxtb	r1, r2
1000bdd8:	2902      	cmp	r1, #2
1000bdda:	d802      	bhi.n	1000bde2 <uart_init+0xf6>
1000bddc:	2a01      	cmp	r2, #1
1000bdde:	d005      	beq.n	1000bdec <uart_init+0x100>
1000bde0:	e00f      	b.n	1000be02 <uart_init+0x116>
1000bde2:	2a03      	cmp	r2, #3
1000bde4:	d008      	beq.n	1000bdf8 <uart_init+0x10c>
1000bde6:	2a04      	cmp	r2, #4
1000bde8:	d009      	beq.n	1000bdfe <uart_init+0x112>
1000bdea:	e00a      	b.n	1000be02 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bdec:	2202      	movs	r2, #2
1000bdee:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000bdf0:	e007      	b.n	1000be02 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000bdf2:	2206      	movs	r2, #6
1000bdf4:	4313      	orrs	r3, r2
			break;
1000bdf6:	e004      	b.n	1000be02 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bdf8:	220a      	movs	r2, #10
1000bdfa:	4313      	orrs	r3, r2
			break;
1000bdfc:	e001      	b.n	1000be02 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bdfe:	220e      	movs	r2, #14
1000be00:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000be02:	2220      	movs	r2, #32
1000be04:	6829      	ldr	r1, [r5, #0]
1000be06:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000be08:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000be0a:	4b24      	ldr	r3, [pc, #144]	; (1000be9c <uart_init+0x1b0>)
1000be0c:	4798      	blx	r3
1000be0e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000be10:	0031      	movs	r1, r6
1000be12:	4b23      	ldr	r3, [pc, #140]	; (1000bea0 <uart_init+0x1b4>)
1000be14:	4798      	blx	r3
1000be16:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000be18:	0400      	lsls	r0, r0, #16
1000be1a:	0c00      	lsrs	r0, r0, #16
1000be1c:	4370      	muls	r0, r6
1000be1e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000be20:	0931      	lsrs	r1, r6, #4
1000be22:	4288      	cmp	r0, r1
1000be24:	d906      	bls.n	1000be34 <uart_init+0x148>
1000be26:	2300      	movs	r3, #0
		i++;
1000be28:	3301      	adds	r3, #1
1000be2a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000be2c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000be2e:	4288      	cmp	r0, r1
1000be30:	d8fa      	bhi.n	1000be28 <uart_init+0x13c>
1000be32:	e007      	b.n	1000be44 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000be34:	2300      	movs	r3, #0
1000be36:	e005      	b.n	1000be44 <uart_init+0x158>
1000be38:	003e      	movs	r6, r7
1000be3a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000be3c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000be3e:	4b19      	ldr	r3, [pc, #100]	; (1000bea4 <uart_init+0x1b8>)
1000be40:	4699      	mov	r9, r3
1000be42:	e7a9      	b.n	1000bd98 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000be44:	2100      	movs	r1, #0
1000be46:	2028      	movs	r0, #40	; 0x28
1000be48:	682c      	ldr	r4, [r5, #0]
1000be4a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000be4c:	3301      	adds	r3, #1
1000be4e:	071b      	lsls	r3, r3, #28
1000be50:	0f5b      	lsrs	r3, r3, #29
1000be52:	00d2      	lsls	r2, r2, #3
1000be54:	4313      	orrs	r3, r2
1000be56:	b29b      	uxth	r3, r3
1000be58:	682a      	ldr	r2, [r5, #0]
1000be5a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000be5c:	682b      	ldr	r3, [r5, #0]
1000be5e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000be60:	682b      	ldr	r3, [r5, #0]
1000be62:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000be64:	2000      	movs	r0, #0
1000be66:	bc0c      	pop	{r2, r3}
1000be68:	4690      	mov	r8, r2
1000be6a:	4699      	mov	r9, r3
1000be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000be6e:	46c0      	nop			; (mov r8, r8)
1000be70:	40004000 	.word	0x40004000
1000be74:	1000b621 	.word	0x1000b621
1000be78:	1000af59 	.word	0x1000af59
1000be7c:	1001a17c 	.word	0x1001a17c
1000be80:	1000ba99 	.word	0x1000ba99
1000be84:	1000ba89 	.word	0x1000ba89
1000be88:	1000bb21 	.word	0x1000bb21
1000be8c:	e000e100 	.word	0xe000e100
1000be90:	40005000 	.word	0x40005000
1000be94:	1000bbad 	.word	0x1000bbad
1000be98:	1000bc35 	.word	0x1000bc35
1000be9c:	1000af4d 	.word	0x1000af4d
1000bea0:	100129a5 	.word	0x100129a5
1000bea4:	1000aba9 	.word	0x1000aba9

1000bea8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bea8:	6802      	ldr	r2, [r0, #0]
1000beaa:	2001      	movs	r0, #1
1000beac:	7913      	ldrb	r3, [r2, #4]
1000beae:	4203      	tst	r3, r0
1000beb0:	d0fc      	beq.n	1000beac <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000beb2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000beb4:	2000      	movs	r0, #0
1000beb6:	4770      	bx	lr

1000beb8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000beb8:	6802      	ldr	r2, [r0, #0]
1000beba:	2001      	movs	r0, #1
1000bebc:	7d13      	ldrb	r3, [r2, #20]
1000bebe:	4203      	tst	r3, r0
1000bec0:	d0fc      	beq.n	1000bebc <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bec2:	7c13      	ldrb	r3, [r2, #16]
1000bec4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bec6:	2000      	movs	r0, #0
1000bec8:	4770      	bx	lr
1000beca:	46c0      	nop			; (mov r8, r8)

1000becc <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000becc:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bece:	2a00      	cmp	r2, #0
1000bed0:	d00d      	beq.n	1000beee <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bed2:	330b      	adds	r3, #11
1000bed4:	5cc3      	ldrb	r3, [r0, r3]
1000bed6:	b2db      	uxtb	r3, r3
1000bed8:	2b05      	cmp	r3, #5
1000beda:	d008      	beq.n	1000beee <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bedc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bede:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bee0:	2205      	movs	r2, #5
1000bee2:	2322      	movs	r3, #34	; 0x22
1000bee4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bee6:	6803      	ldr	r3, [r0, #0]
1000bee8:	3a04      	subs	r2, #4
1000beea:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000beec:	2300      	movs	r3, #0
}
1000beee:	0018      	movs	r0, r3
1000bef0:	4770      	bx	lr
1000bef2:	46c0      	nop			; (mov r8, r8)

1000bef4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000bef4:	0093      	lsls	r3, r2, #2
1000bef6:	18c3      	adds	r3, r0, r3
1000bef8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000befa:	2120      	movs	r1, #32
1000befc:	2301      	movs	r3, #1
1000befe:	4093      	lsls	r3, r2
1000bf00:	5c42      	ldrb	r2, [r0, r1]
1000bf02:	4313      	orrs	r3, r2
1000bf04:	5443      	strb	r3, [r0, r1]
}
1000bf06:	4770      	bx	lr

1000bf08 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bf08:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000bf0a:	2221      	movs	r2, #33	; 0x21
1000bf0c:	2301      	movs	r3, #1
1000bf0e:	408b      	lsls	r3, r1
1000bf10:	5c84      	ldrb	r4, [r0, r2]
1000bf12:	4323      	orrs	r3, r4
1000bf14:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000bf16:	2901      	cmp	r1, #1
1000bf18:	d104      	bne.n	1000bf24 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bf1a:	6802      	ldr	r2, [r0, #0]
1000bf1c:	7a11      	ldrb	r1, [r2, #8]
1000bf1e:	2320      	movs	r3, #32
1000bf20:	430b      	orrs	r3, r1
1000bf22:	7213      	strb	r3, [r2, #8]
	}
}
1000bf24:	bd10      	pop	{r4, pc}
1000bf26:	46c0      	nop			; (mov r8, r8)

1000bf28 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bf28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bf2a:	2201      	movs	r2, #1
1000bf2c:	408a      	lsls	r2, r1
1000bf2e:	2421      	movs	r4, #33	; 0x21
1000bf30:	5d03      	ldrb	r3, [r0, r4]
1000bf32:	4393      	bics	r3, r2
1000bf34:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000bf36:	2901      	cmp	r1, #1
1000bf38:	d104      	bne.n	1000bf44 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bf3a:	6802      	ldr	r2, [r0, #0]
1000bf3c:	7a13      	ldrb	r3, [r2, #8]
1000bf3e:	311f      	adds	r1, #31
1000bf40:	438b      	bics	r3, r1
1000bf42:	7213      	strb	r3, [r2, #8]
	}

}
1000bf44:	bd10      	pop	{r4, pc}
1000bf46:	46c0      	nop			; (mov r8, r8)

1000bf48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf4a:	4647      	mov	r7, r8
1000bf4c:	b480      	push	{r7}
1000bf4e:	000c      	movs	r4, r1
1000bf50:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000bf52:	2800      	cmp	r0, #0
1000bf54:	d10d      	bne.n	1000bf72 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000bf56:	2a00      	cmp	r2, #0
1000bf58:	dd0e      	ble.n	1000bf78 <_read+0x30>
1000bf5a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000bf5c:	4e08      	ldr	r6, [pc, #32]	; (1000bf80 <_read+0x38>)
1000bf5e:	4d09      	ldr	r5, [pc, #36]	; (1000bf84 <_read+0x3c>)
1000bf60:	6830      	ldr	r0, [r6, #0]
1000bf62:	0021      	movs	r1, r4
1000bf64:	682b      	ldr	r3, [r5, #0]
1000bf66:	4798      	blx	r3
		ptr++;
1000bf68:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000bf6a:	42a7      	cmp	r7, r4
1000bf6c:	d1f8      	bne.n	1000bf60 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000bf6e:	4640      	mov	r0, r8
1000bf70:	e003      	b.n	1000bf7a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000bf72:	2001      	movs	r0, #1
1000bf74:	4240      	negs	r0, r0
1000bf76:	e000      	b.n	1000bf7a <_read+0x32>
	}

	for (; len > 0; --len) {
1000bf78:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000bf7a:	bc04      	pop	{r2}
1000bf7c:	4690      	mov	r8, r2
1000bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf80:	1001a18c 	.word	0x1001a18c
1000bf84:	1001a184 	.word	0x1001a184

1000bf88 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf8a:	4647      	mov	r7, r8
1000bf8c:	b480      	push	{r7}
1000bf8e:	000e      	movs	r6, r1
1000bf90:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000bf92:	3801      	subs	r0, #1
1000bf94:	2802      	cmp	r0, #2
1000bf96:	d811      	bhi.n	1000bfbc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000bf98:	2a00      	cmp	r2, #0
1000bf9a:	d012      	beq.n	1000bfc2 <_write+0x3a>
1000bf9c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000bf9e:	4b0c      	ldr	r3, [pc, #48]	; (1000bfd0 <_write+0x48>)
1000bfa0:	4698      	mov	r8, r3
1000bfa2:	4f0c      	ldr	r7, [pc, #48]	; (1000bfd4 <_write+0x4c>)
1000bfa4:	4643      	mov	r3, r8
1000bfa6:	6818      	ldr	r0, [r3, #0]
1000bfa8:	5d31      	ldrb	r1, [r6, r4]
1000bfaa:	683b      	ldr	r3, [r7, #0]
1000bfac:	4798      	blx	r3
1000bfae:	2800      	cmp	r0, #0
1000bfb0:	db09      	blt.n	1000bfc6 <_write+0x3e>
			return -1;
		}
		++nChars;
1000bfb2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000bfb4:	42a5      	cmp	r5, r4
1000bfb6:	d1f5      	bne.n	1000bfa4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000bfb8:	0020      	movs	r0, r4
1000bfba:	e006      	b.n	1000bfca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000bfbc:	2001      	movs	r0, #1
1000bfbe:	4240      	negs	r0, r0
1000bfc0:	e003      	b.n	1000bfca <_write+0x42>
	}

	for (; len != 0; --len) {
1000bfc2:	2000      	movs	r0, #0
1000bfc4:	e001      	b.n	1000bfca <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000bfc6:	2001      	movs	r0, #1
1000bfc8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000bfca:	bc04      	pop	{r2}
1000bfcc:	4690      	mov	r8, r2
1000bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfd0:	1001a18c 	.word	0x1001a18c
1000bfd4:	1001a188 	.word	0x1001a188

1000bfd8 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000bfd8:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000bfda:	4804      	ldr	r0, [pc, #16]	; (1000bfec <ble_undefined_event_handler+0x14>)
1000bfdc:	4b04      	ldr	r3, [pc, #16]	; (1000bff0 <ble_undefined_event_handler+0x18>)
1000bfde:	4798      	blx	r3
1000bfe0:	4804      	ldr	r0, [pc, #16]	; (1000bff4 <ble_undefined_event_handler+0x1c>)
1000bfe2:	4b05      	ldr	r3, [pc, #20]	; (1000bff8 <ble_undefined_event_handler+0x20>)
1000bfe4:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000bfe6:	2000      	movs	r0, #0
1000bfe8:	bd10      	pop	{r4, pc}
1000bfea:	46c0      	nop			; (mov r8, r8)
1000bfec:	10016878 	.word	0x10016878
1000bff0:	10015939 	.word	0x10015939
1000bff4:	100175d4 	.word	0x100175d4
1000bff8:	10015819 	.word	0x10015819

1000bffc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000bffc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000bffe:	7800      	ldrb	r0, [r0, #0]
1000c000:	2800      	cmp	r0, #0
1000c002:	d006      	beq.n	1000c012 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c004:	4803      	ldr	r0, [pc, #12]	; (1000c014 <ble_scan_report_handler+0x18>)
1000c006:	4b04      	ldr	r3, [pc, #16]	; (1000c018 <ble_scan_report_handler+0x1c>)
1000c008:	4798      	blx	r3
1000c00a:	4804      	ldr	r0, [pc, #16]	; (1000c01c <ble_scan_report_handler+0x20>)
1000c00c:	4b04      	ldr	r3, [pc, #16]	; (1000c020 <ble_scan_report_handler+0x24>)
1000c00e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c010:	20e2      	movs	r0, #226	; 0xe2
}
1000c012:	bd10      	pop	{r4, pc}
1000c014:	10016878 	.word	0x10016878
1000c018:	10015939 	.word	0x10015939
1000c01c:	100175f0 	.word	0x100175f0
1000c020:	10015819 	.word	0x10015819

1000c024 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c024:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c026:	7800      	ldrb	r0, [r0, #0]
1000c028:	2800      	cmp	r0, #0
1000c02a:	d006      	beq.n	1000c03a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c02c:	4803      	ldr	r0, [pc, #12]	; (1000c03c <ble_adv_report_handler+0x18>)
1000c02e:	4b04      	ldr	r3, [pc, #16]	; (1000c040 <ble_adv_report_handler+0x1c>)
1000c030:	4798      	blx	r3
1000c032:	4804      	ldr	r0, [pc, #16]	; (1000c044 <ble_adv_report_handler+0x20>)
1000c034:	4b04      	ldr	r3, [pc, #16]	; (1000c048 <ble_adv_report_handler+0x24>)
1000c036:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c038:	20e2      	movs	r0, #226	; 0xe2
}
1000c03a:	bd10      	pop	{r4, pc}
1000c03c:	10016878 	.word	0x10016878
1000c040:	10015939 	.word	0x10015939
1000c044:	10017604 	.word	0x10017604
1000c048:	10015819 	.word	0x10015819

1000c04c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c04c:	b510      	push	{r4, lr}
1000c04e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c050:	4804      	ldr	r0, [pc, #16]	; (1000c064 <ble_mtu_changed_indication_handler+0x18>)
1000c052:	4b05      	ldr	r3, [pc, #20]	; (1000c068 <ble_mtu_changed_indication_handler+0x1c>)
1000c054:	4798      	blx	r3
1000c056:	8862      	ldrh	r2, [r4, #2]
1000c058:	8821      	ldrh	r1, [r4, #0]
1000c05a:	4804      	ldr	r0, [pc, #16]	; (1000c06c <ble_mtu_changed_indication_handler+0x20>)
1000c05c:	4b04      	ldr	r3, [pc, #16]	; (1000c070 <ble_mtu_changed_indication_handler+0x24>)
1000c05e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c060:	2000      	movs	r0, #0
1000c062:	bd10      	pop	{r4, pc}
1000c064:	10016878 	.word	0x10016878
1000c068:	10015939 	.word	0x10015939
1000c06c:	10017618 	.word	0x10017618
1000c070:	10015819 	.word	0x10015819

1000c074 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c074:	b570      	push	{r4, r5, r6, lr}
1000c076:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c078:	78c5      	ldrb	r5, [r0, #3]
1000c07a:	2d00      	cmp	r5, #0
1000c07c:	d108      	bne.n	1000c090 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c07e:	480a      	ldr	r0, [pc, #40]	; (1000c0a8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c080:	4b0a      	ldr	r3, [pc, #40]	; (1000c0ac <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c082:	4798      	blx	r3
1000c084:	78a2      	ldrb	r2, [r4, #2]
1000c086:	8821      	ldrh	r1, [r4, #0]
1000c088:	4809      	ldr	r0, [pc, #36]	; (1000c0b0 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000c08a:	4b0a      	ldr	r3, [pc, #40]	; (1000c0b4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c08c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c08e:	e008      	b.n	1000c0a2 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c090:	4805      	ldr	r0, [pc, #20]	; (1000c0a8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c092:	4b06      	ldr	r3, [pc, #24]	; (1000c0ac <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c094:	4798      	blx	r3
1000c096:	78a2      	ldrb	r2, [r4, #2]
1000c098:	8821      	ldrh	r1, [r4, #0]
1000c09a:	4807      	ldr	r0, [pc, #28]	; (1000c0b8 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000c09c:	4b05      	ldr	r3, [pc, #20]	; (1000c0b4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c09e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c0a0:	25e2      	movs	r5, #226	; 0xe2
}
1000c0a2:	0028      	movs	r0, r5
1000c0a4:	bd70      	pop	{r4, r5, r6, pc}
1000c0a6:	46c0      	nop			; (mov r8, r8)
1000c0a8:	10016878 	.word	0x10016878
1000c0ac:	10015939 	.word	0x10015939
1000c0b0:	10017650 	.word	0x10017650
1000c0b4:	10015819 	.word	0x10015819
1000c0b8:	10017680 	.word	0x10017680

1000c0bc <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c0bc:	b570      	push	{r4, r5, r6, lr}
1000c0be:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c0c0:	78c5      	ldrb	r5, [r0, #3]
1000c0c2:	2d00      	cmp	r5, #0
1000c0c4:	d108      	bne.n	1000c0d8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c0c6:	480a      	ldr	r0, [pc, #40]	; (1000c0f0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c0c8:	4b0a      	ldr	r3, [pc, #40]	; (1000c0f4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c0ca:	4798      	blx	r3
1000c0cc:	78a2      	ldrb	r2, [r4, #2]
1000c0ce:	8821      	ldrh	r1, [r4, #0]
1000c0d0:	4809      	ldr	r0, [pc, #36]	; (1000c0f8 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000c0d2:	4b0a      	ldr	r3, [pc, #40]	; (1000c0fc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c0d4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c0d6:	e008      	b.n	1000c0ea <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c0d8:	4805      	ldr	r0, [pc, #20]	; (1000c0f0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c0da:	4b06      	ldr	r3, [pc, #24]	; (1000c0f4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c0dc:	4798      	blx	r3
1000c0de:	78a2      	ldrb	r2, [r4, #2]
1000c0e0:	8821      	ldrh	r1, [r4, #0]
1000c0e2:	4807      	ldr	r0, [pc, #28]	; (1000c100 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000c0e4:	4b05      	ldr	r3, [pc, #20]	; (1000c0fc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c0e6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c0e8:	25e2      	movs	r5, #226	; 0xe2
}
1000c0ea:	0028      	movs	r0, r5
1000c0ec:	bd70      	pop	{r4, r5, r6, pc}
1000c0ee:	46c0      	nop			; (mov r8, r8)
1000c0f0:	10016878 	.word	0x10016878
1000c0f4:	10015939 	.word	0x10015939
1000c0f8:	100176b8 	.word	0x100176b8
1000c0fc:	10015819 	.word	0x10015819
1000c100:	100176f4 	.word	0x100176f4

1000c104 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c106:	0006      	movs	r6, r0
1000c108:	4c1d      	ldr	r4, [pc, #116]	; (1000c180 <ble_disconnected_state_handler+0x7c>)
1000c10a:	239b      	movs	r3, #155	; 0x9b
1000c10c:	009b      	lsls	r3, r3, #2
1000c10e:	18e7      	adds	r7, r4, r3
1000c110:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c112:	0023      	movs	r3, r4
1000c114:	3b56      	subs	r3, #86	; 0x56
1000c116:	881a      	ldrh	r2, [r3, #0]
1000c118:	8833      	ldrh	r3, [r6, #0]
1000c11a:	429a      	cmp	r2, r3
1000c11c:	d122      	bne.n	1000c164 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c11e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c120:	2b05      	cmp	r3, #5
1000c122:	d001      	beq.n	1000c128 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c124:	2b08      	cmp	r3, #8
1000c126:	d102      	bne.n	1000c12e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c128:	2301      	movs	r3, #1
1000c12a:	702b      	strb	r3, [r5, #0]
1000c12c:	e01a      	b.n	1000c164 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c12e:	2b07      	cmp	r3, #7
1000c130:	d80f      	bhi.n	1000c152 <ble_disconnected_state_handler+0x4e>
1000c132:	009b      	lsls	r3, r3, #2
1000c134:	4a13      	ldr	r2, [pc, #76]	; (1000c184 <ble_disconnected_state_handler+0x80>)
1000c136:	58d3      	ldr	r3, [r2, r3]
1000c138:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c13a:	2300      	movs	r3, #0
1000c13c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c13e:	4b12      	ldr	r3, [pc, #72]	; (1000c188 <ble_disconnected_state_handler+0x84>)
1000c140:	781b      	ldrb	r3, [r3, #0]
1000c142:	2b00      	cmp	r3, #0
1000c144:	d00e      	beq.n	1000c164 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c146:	4a10      	ldr	r2, [pc, #64]	; (1000c188 <ble_disconnected_state_handler+0x84>)
1000c148:	7813      	ldrb	r3, [r2, #0]
1000c14a:	3b01      	subs	r3, #1
1000c14c:	b2db      	uxtb	r3, r3
1000c14e:	7013      	strb	r3, [r2, #0]
1000c150:	e008      	b.n	1000c164 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c152:	480e      	ldr	r0, [pc, #56]	; (1000c18c <ble_disconnected_state_handler+0x88>)
1000c154:	4b0e      	ldr	r3, [pc, #56]	; (1000c190 <ble_disconnected_state_handler+0x8c>)
1000c156:	4798      	blx	r3
1000c158:	7829      	ldrb	r1, [r5, #0]
1000c15a:	480e      	ldr	r0, [pc, #56]	; (1000c194 <ble_disconnected_state_handler+0x90>)
1000c15c:	4b0e      	ldr	r3, [pc, #56]	; (1000c198 <ble_disconnected_state_handler+0x94>)
1000c15e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c160:	2300      	movs	r3, #0
1000c162:	702b      	strb	r3, [r5, #0]
1000c164:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c166:	42bc      	cmp	r4, r7
1000c168:	d1d2      	bne.n	1000c110 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c16a:	4808      	ldr	r0, [pc, #32]	; (1000c18c <ble_disconnected_state_handler+0x88>)
1000c16c:	4b08      	ldr	r3, [pc, #32]	; (1000c190 <ble_disconnected_state_handler+0x8c>)
1000c16e:	4798      	blx	r3
1000c170:	8832      	ldrh	r2, [r6, #0]
1000c172:	78b1      	ldrb	r1, [r6, #2]
1000c174:	4809      	ldr	r0, [pc, #36]	; (1000c19c <ble_disconnected_state_handler+0x98>)
1000c176:	4b08      	ldr	r3, [pc, #32]	; (1000c198 <ble_disconnected_state_handler+0x94>)
1000c178:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c17a:	2000      	movs	r0, #0
1000c17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c17e:	46c0      	nop			; (mov r8, r8)
1000c180:	1001a206 	.word	0x1001a206
1000c184:	10017470 	.word	0x10017470
1000c188:	1001a414 	.word	0x1001a414
1000c18c:	10016878 	.word	0x10016878
1000c190:	10015939 	.word	0x10015939
1000c194:	10017730 	.word	0x10017730
1000c198:	10015819 	.word	0x10015819
1000c19c:	10017748 	.word	0x10017748

1000c1a0 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c1a0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c1a2:	4804      	ldr	r0, [pc, #16]	; (1000c1b4 <ble_conn_param_update+0x14>)
1000c1a4:	4b04      	ldr	r3, [pc, #16]	; (1000c1b8 <ble_conn_param_update+0x18>)
1000c1a6:	4798      	blx	r3
1000c1a8:	4804      	ldr	r0, [pc, #16]	; (1000c1bc <ble_conn_param_update+0x1c>)
1000c1aa:	4b05      	ldr	r3, [pc, #20]	; (1000c1c0 <ble_conn_param_update+0x20>)
1000c1ac:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c1ae:	2000      	movs	r0, #0
1000c1b0:	bd10      	pop	{r4, pc}
1000c1b2:	46c0      	nop			; (mov r8, r8)
1000c1b4:	10016878 	.word	0x10016878
1000c1b8:	10015939 	.word	0x10015939
1000c1bc:	10017778 	.word	0x10017778
1000c1c0:	10015819 	.word	0x10015819

1000c1c4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c1c6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c1c8:	8801      	ldrh	r1, [r0, #0]
1000c1ca:	4b28      	ldr	r3, [pc, #160]	; (1000c26c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1cc:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c1ce:	891a      	ldrh	r2, [r3, #8]
1000c1d0:	428a      	cmp	r2, r1
1000c1d2:	d104      	bne.n	1000c1de <ble_encryption_status_change_handler+0x1a>
1000c1d4:	001a      	movs	r2, r3
1000c1d6:	325e      	adds	r2, #94	; 0x5e
1000c1d8:	7812      	ldrb	r2, [r2, #0]
1000c1da:	2a06      	cmp	r2, #6
1000c1dc:	d02e      	beq.n	1000c23c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1de:	3401      	adds	r4, #1
1000c1e0:	b2e4      	uxtb	r4, r4
1000c1e2:	337c      	adds	r3, #124	; 0x7c
1000c1e4:	2c05      	cmp	r4, #5
1000c1e6:	d1f2      	bne.n	1000c1ce <ble_encryption_status_change_handler+0xa>
1000c1e8:	e039      	b.n	1000c25e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c1ea:	4920      	ldr	r1, [pc, #128]	; (1000c26c <ble_encryption_status_change_handler+0xa8>)
1000c1ec:	0163      	lsls	r3, r4, #5
1000c1ee:	1b1a      	subs	r2, r3, r4
1000c1f0:	0092      	lsls	r2, r2, #2
1000c1f2:	188a      	adds	r2, r1, r2
1000c1f4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c1f6:	0014      	movs	r4, r2
1000c1f8:	345e      	adds	r4, #94	; 0x5e
1000c1fa:	2307      	movs	r3, #7
1000c1fc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c1fe:	481c      	ldr	r0, [pc, #112]	; (1000c270 <ble_encryption_status_change_handler+0xac>)
1000c200:	4b1c      	ldr	r3, [pc, #112]	; (1000c274 <ble_encryption_status_change_handler+0xb0>)
1000c202:	4798      	blx	r3
1000c204:	481c      	ldr	r0, [pc, #112]	; (1000c278 <ble_encryption_status_change_handler+0xb4>)
1000c206:	4b1d      	ldr	r3, [pc, #116]	; (1000c27c <ble_encryption_status_change_handler+0xb8>)
1000c208:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c20a:	25e2      	movs	r5, #226	; 0xe2
1000c20c:	e02b      	b.n	1000c266 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c20e:	4818      	ldr	r0, [pc, #96]	; (1000c270 <ble_encryption_status_change_handler+0xac>)
1000c210:	4b18      	ldr	r3, [pc, #96]	; (1000c274 <ble_encryption_status_change_handler+0xb0>)
1000c212:	4798      	blx	r3
1000c214:	481a      	ldr	r0, [pc, #104]	; (1000c280 <ble_encryption_status_change_handler+0xbc>)
1000c216:	4b19      	ldr	r3, [pc, #100]	; (1000c27c <ble_encryption_status_change_handler+0xb8>)
1000c218:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c21a:	4914      	ldr	r1, [pc, #80]	; (1000c26c <ble_encryption_status_change_handler+0xa8>)
1000c21c:	0163      	lsls	r3, r4, #5
1000c21e:	1b1a      	subs	r2, r3, r4
1000c220:	0092      	lsls	r2, r2, #2
1000c222:	188a      	adds	r2, r1, r2
1000c224:	0010      	movs	r0, r2
1000c226:	305e      	adds	r0, #94	; 0x5e
1000c228:	2708      	movs	r7, #8
1000c22a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c22c:	78f0      	ldrb	r0, [r6, #3]
1000c22e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c230:	78b2      	ldrb	r2, [r6, #2]
1000c232:	1b1c      	subs	r4, r3, r4
1000c234:	00a4      	lsls	r4, r4, #2
1000c236:	190c      	adds	r4, r1, r4
1000c238:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c23a:	e014      	b.n	1000c266 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c23c:	78b5      	ldrb	r5, [r6, #2]
1000c23e:	2d00      	cmp	r5, #0
1000c240:	d0e5      	beq.n	1000c20e <ble_encryption_status_change_handler+0x4a>
1000c242:	e7d2      	b.n	1000c1ea <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c244:	4e0a      	ldr	r6, [pc, #40]	; (1000c270 <ble_encryption_status_change_handler+0xac>)
1000c246:	0030      	movs	r0, r6
1000c248:	4d0a      	ldr	r5, [pc, #40]	; (1000c274 <ble_encryption_status_change_handler+0xb0>)
1000c24a:	47a8      	blx	r5
1000c24c:	480c      	ldr	r0, [pc, #48]	; (1000c280 <ble_encryption_status_change_handler+0xbc>)
1000c24e:	4c0b      	ldr	r4, [pc, #44]	; (1000c27c <ble_encryption_status_change_handler+0xb8>)
1000c250:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c252:	0030      	movs	r0, r6
1000c254:	47a8      	blx	r5
1000c256:	480b      	ldr	r0, [pc, #44]	; (1000c284 <ble_encryption_status_change_handler+0xc0>)
1000c258:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c25a:	25e2      	movs	r5, #226	; 0xe2
1000c25c:	e003      	b.n	1000c266 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c25e:	78b5      	ldrb	r5, [r6, #2]
1000c260:	2d00      	cmp	r5, #0
1000c262:	d1c2      	bne.n	1000c1ea <ble_encryption_status_change_handler+0x26>
1000c264:	e7ee      	b.n	1000c244 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c266:	0028      	movs	r0, r5
1000c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c26a:	46c0      	nop			; (mov r8, r8)
1000c26c:	1001a1a8 	.word	0x1001a1a8
1000c270:	10016878 	.word	0x10016878
1000c274:	10015939 	.word	0x10015939
1000c278:	10017794 	.word	0x10017794
1000c27c:	10015819 	.word	0x10015819
1000c280:	100177a8 	.word	0x100177a8
1000c284:	100177cc 	.word	0x100177cc

1000c288 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c288:	b530      	push	{r4, r5, lr}
1000c28a:	b085      	sub	sp, #20
1000c28c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c28e:	4b1f      	ldr	r3, [pc, #124]	; (1000c30c <ble_scan_info_handler+0x84>)
1000c290:	781b      	ldrb	r3, [r3, #0]
1000c292:	b2db      	uxtb	r3, r3
1000c294:	2b13      	cmp	r3, #19
1000c296:	d824      	bhi.n	1000c2e2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c298:	4d1c      	ldr	r5, [pc, #112]	; (1000c30c <ble_scan_info_handler+0x84>)
1000c29a:	782b      	ldrb	r3, [r5, #0]
1000c29c:	b2db      	uxtb	r3, r3
1000c29e:	0098      	lsls	r0, r3, #2
1000c2a0:	18c0      	adds	r0, r0, r3
1000c2a2:	00c0      	lsls	r0, r0, #3
1000c2a4:	18c3      	adds	r3, r0, r3
1000c2a6:	481a      	ldr	r0, [pc, #104]	; (1000c310 <ble_scan_info_handler+0x88>)
1000c2a8:	1818      	adds	r0, r3, r0
1000c2aa:	2229      	movs	r2, #41	; 0x29
1000c2ac:	0021      	movs	r1, r4
1000c2ae:	4b19      	ldr	r3, [pc, #100]	; (1000c314 <ble_scan_info_handler+0x8c>)
1000c2b0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c2b2:	4819      	ldr	r0, [pc, #100]	; (1000c318 <ble_scan_info_handler+0x90>)
1000c2b4:	4b19      	ldr	r3, [pc, #100]	; (1000c31c <ble_scan_info_handler+0x94>)
1000c2b6:	4798      	blx	r3
1000c2b8:	7829      	ldrb	r1, [r5, #0]
1000c2ba:	b2c9      	uxtb	r1, r1
1000c2bc:	79a3      	ldrb	r3, [r4, #6]
1000c2be:	79e2      	ldrb	r2, [r4, #7]
1000c2c0:	78a0      	ldrb	r0, [r4, #2]
1000c2c2:	9003      	str	r0, [sp, #12]
1000c2c4:	78e0      	ldrb	r0, [r4, #3]
1000c2c6:	9002      	str	r0, [sp, #8]
1000c2c8:	7920      	ldrb	r0, [r4, #4]
1000c2ca:	9001      	str	r0, [sp, #4]
1000c2cc:	7960      	ldrb	r0, [r4, #5]
1000c2ce:	9000      	str	r0, [sp, #0]
1000c2d0:	4813      	ldr	r0, [pc, #76]	; (1000c320 <ble_scan_info_handler+0x98>)
1000c2d2:	4c14      	ldr	r4, [pc, #80]	; (1000c324 <ble_scan_info_handler+0x9c>)
1000c2d4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c2d6:	782b      	ldrb	r3, [r5, #0]
1000c2d8:	3301      	adds	r3, #1
1000c2da:	b2db      	uxtb	r3, r3
1000c2dc:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000c2de:	2300      	movs	r3, #0
1000c2e0:	e011      	b.n	1000c306 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c2e2:	480d      	ldr	r0, [pc, #52]	; (1000c318 <ble_scan_info_handler+0x90>)
1000c2e4:	4b0d      	ldr	r3, [pc, #52]	; (1000c31c <ble_scan_info_handler+0x94>)
1000c2e6:	4798      	blx	r3
1000c2e8:	480f      	ldr	r0, [pc, #60]	; (1000c328 <ble_scan_info_handler+0xa0>)
1000c2ea:	4b0e      	ldr	r3, [pc, #56]	; (1000c324 <ble_scan_info_handler+0x9c>)
1000c2ec:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c2ee:	4b0f      	ldr	r3, [pc, #60]	; (1000c32c <ble_scan_info_handler+0xa4>)
1000c2f0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c2f2:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c2f4:	2800      	cmp	r0, #0
1000c2f6:	d006      	beq.n	1000c306 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000c2f8:	4807      	ldr	r0, [pc, #28]	; (1000c318 <ble_scan_info_handler+0x90>)
1000c2fa:	4b08      	ldr	r3, [pc, #32]	; (1000c31c <ble_scan_info_handler+0x94>)
1000c2fc:	4798      	blx	r3
1000c2fe:	480c      	ldr	r0, [pc, #48]	; (1000c330 <ble_scan_info_handler+0xa8>)
1000c300:	4b08      	ldr	r3, [pc, #32]	; (1000c324 <ble_scan_info_handler+0x9c>)
1000c302:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c304:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c306:	0018      	movs	r0, r3
1000c308:	b005      	add	sp, #20
1000c30a:	bd30      	pop	{r4, r5, pc}
1000c30c:	10018cb4 	.word	0x10018cb4
1000c310:	1001a48c 	.word	0x1001a48c
1000c314:	100156bf 	.word	0x100156bf
1000c318:	10016878 	.word	0x10016878
1000c31c:	10015939 	.word	0x10015939
1000c320:	100177f4 	.word	0x100177f4
1000c324:	10015819 	.word	0x10015819
1000c328:	10017830 	.word	0x10017830
1000c32c:	1000f099 	.word	0x1000f099
1000c330:	10017868 	.word	0x10017868

1000c334 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c334:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c336:	465f      	mov	r7, fp
1000c338:	4656      	mov	r6, sl
1000c33a:	464d      	mov	r5, r9
1000c33c:	4644      	mov	r4, r8
1000c33e:	b4f0      	push	{r4, r5, r6, r7}
1000c340:	b083      	sub	sp, #12
1000c342:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c344:	8841      	ldrh	r1, [r0, #2]
1000c346:	4b59      	ldr	r3, [pc, #356]	; (1000c4ac <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c348:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c34a:	891a      	ldrh	r2, [r3, #8]
1000c34c:	428a      	cmp	r2, r1
1000c34e:	d105      	bne.n	1000c35c <ble_pair_done_handler+0x28>
1000c350:	001a      	movs	r2, r3
1000c352:	325e      	adds	r2, #94	; 0x5e
1000c354:	7812      	ldrb	r2, [r2, #0]
1000c356:	2a03      	cmp	r2, #3
1000c358:	d100      	bne.n	1000c35c <ble_pair_done_handler+0x28>
1000c35a:	e09a      	b.n	1000c492 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c35c:	3401      	adds	r4, #1
1000c35e:	b2e4      	uxtb	r4, r4
1000c360:	337c      	adds	r3, #124	; 0x7c
1000c362:	2c05      	cmp	r4, #5
1000c364:	d1f1      	bne.n	1000c34a <ble_pair_done_handler+0x16>
1000c366:	e057      	b.n	1000c418 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c368:	7821      	ldrb	r1, [r4, #0]
1000c36a:	0030      	movs	r0, r6
1000c36c:	47b8      	blx	r7
1000c36e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000c370:	454c      	cmp	r4, r9
1000c372:	d1f9      	bne.n	1000c368 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000c374:	484e      	ldr	r0, [pc, #312]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c376:	4b4f      	ldr	r3, [pc, #316]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c378:	4798      	blx	r3
1000c37a:	484f      	ldr	r0, [pc, #316]	; (1000c4b8 <ble_pair_done_handler+0x184>)
1000c37c:	4b4f      	ldr	r3, [pc, #316]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c37e:	4798      	blx	r3
1000c380:	002e      	movs	r6, r5
1000c382:	3622      	adds	r6, #34	; 0x22
1000c384:	002c      	movs	r4, r5
1000c386:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000c388:	4f4c      	ldr	r7, [pc, #304]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c38a:	7831      	ldrb	r1, [r6, #0]
1000c38c:	484c      	ldr	r0, [pc, #304]	; (1000c4c0 <ble_pair_done_handler+0x18c>)
1000c38e:	47b8      	blx	r7
1000c390:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000c392:	42a6      	cmp	r6, r4
1000c394:	d1f9      	bne.n	1000c38a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000c396:	4846      	ldr	r0, [pc, #280]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c398:	4b46      	ldr	r3, [pc, #280]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c39a:	4798      	blx	r3
1000c39c:	4849      	ldr	r0, [pc, #292]	; (1000c4c4 <ble_pair_done_handler+0x190>)
1000c39e:	4b47      	ldr	r3, [pc, #284]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c3a0:	4798      	blx	r3
1000c3a2:	3542      	adds	r5, #66	; 0x42
1000c3a4:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000c3a6:	4e46      	ldr	r6, [pc, #280]	; (1000c4c0 <ble_pair_done_handler+0x18c>)
1000c3a8:	4d44      	ldr	r5, [pc, #272]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c3aa:	7821      	ldrb	r1, [r4, #0]
1000c3ac:	0030      	movs	r0, r6
1000c3ae:	47a8      	blx	r5
1000c3b0:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c3b2:	42bc      	cmp	r4, r7
1000c3b4:	d1f9      	bne.n	1000c3aa <ble_pair_done_handler+0x76>
1000c3b6:	e071      	b.n	1000c49c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c3b8:	0163      	lsls	r3, r4, #5
1000c3ba:	1b1c      	subs	r4, r3, r4
1000c3bc:	00a4      	lsls	r4, r4, #2
1000c3be:	4b3b      	ldr	r3, [pc, #236]	; (1000c4ac <ble_pair_done_handler+0x178>)
1000c3c0:	191c      	adds	r4, r3, r4
1000c3c2:	345e      	adds	r4, #94	; 0x5e
1000c3c4:	7823      	ldrb	r3, [r4, #0]
1000c3c6:	2b01      	cmp	r3, #1
1000c3c8:	d915      	bls.n	1000c3f6 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c3ca:	4839      	ldr	r0, [pc, #228]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c3cc:	4b39      	ldr	r3, [pc, #228]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c3ce:	4798      	blx	r3
1000c3d0:	483d      	ldr	r0, [pc, #244]	; (1000c4c8 <ble_pair_done_handler+0x194>)
1000c3d2:	4b3a      	ldr	r3, [pc, #232]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c3d4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c3d6:	8868      	ldrh	r0, [r5, #2]
1000c3d8:	2113      	movs	r1, #19
1000c3da:	4b3c      	ldr	r3, [pc, #240]	; (1000c4cc <ble_pair_done_handler+0x198>)
1000c3dc:	4798      	blx	r3
1000c3de:	9001      	str	r0, [sp, #4]
1000c3e0:	2800      	cmp	r0, #0
1000c3e2:	d05b      	beq.n	1000c49c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c3e4:	4832      	ldr	r0, [pc, #200]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c3e6:	4b33      	ldr	r3, [pc, #204]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c3e8:	4798      	blx	r3
1000c3ea:	4839      	ldr	r0, [pc, #228]	; (1000c4d0 <ble_pair_done_handler+0x19c>)
1000c3ec:	4b33      	ldr	r3, [pc, #204]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c3ee:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c3f0:	23e2      	movs	r3, #226	; 0xe2
1000c3f2:	9301      	str	r3, [sp, #4]
1000c3f4:	e052      	b.n	1000c49c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c3f6:	2300      	movs	r3, #0
1000c3f8:	9301      	str	r3, [sp, #4]
1000c3fa:	e04f      	b.n	1000c49c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c3fc:	4e2c      	ldr	r6, [pc, #176]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c3fe:	0030      	movs	r0, r6
1000c400:	4d2c      	ldr	r5, [pc, #176]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c402:	47a8      	blx	r5
1000c404:	4833      	ldr	r0, [pc, #204]	; (1000c4d4 <ble_pair_done_handler+0x1a0>)
1000c406:	4c2d      	ldr	r4, [pc, #180]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c408:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c40a:	0030      	movs	r0, r6
1000c40c:	47a8      	blx	r5
1000c40e:	4832      	ldr	r0, [pc, #200]	; (1000c4d8 <ble_pair_done_handler+0x1a4>)
1000c410:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c412:	23e2      	movs	r3, #226	; 0xe2
1000c414:	9301      	str	r3, [sp, #4]
1000c416:	e041      	b.n	1000c49c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c418:	792b      	ldrb	r3, [r5, #4]
1000c41a:	2b00      	cmp	r3, #0
1000c41c:	d1cc      	bne.n	1000c3b8 <ble_pair_done_handler+0x84>
1000c41e:	e7ed      	b.n	1000c3fc <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c420:	4823      	ldr	r0, [pc, #140]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c422:	4b24      	ldr	r3, [pc, #144]	; (1000c4b4 <ble_pair_done_handler+0x180>)
1000c424:	469b      	mov	fp, r3
1000c426:	4798      	blx	r3
1000c428:	482a      	ldr	r0, [pc, #168]	; (1000c4d4 <ble_pair_done_handler+0x1a0>)
1000c42a:	4b24      	ldr	r3, [pc, #144]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c42c:	469a      	mov	sl, r3
1000c42e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c430:	782a      	ldrb	r2, [r5, #0]
1000c432:	4b1e      	ldr	r3, [pc, #120]	; (1000c4ac <ble_pair_done_handler+0x178>)
1000c434:	4698      	mov	r8, r3
1000c436:	0167      	lsls	r7, r4, #5
1000c438:	1b3b      	subs	r3, r7, r4
1000c43a:	009b      	lsls	r3, r3, #2
1000c43c:	4443      	add	r3, r8
1000c43e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c440:	792a      	ldrb	r2, [r5, #4]
1000c442:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c444:	335e      	adds	r3, #94	; 0x5e
1000c446:	2205      	movs	r2, #5
1000c448:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c44a:	1b38      	subs	r0, r7, r4
1000c44c:	0080      	lsls	r0, r0, #2
1000c44e:	4440      	add	r0, r8
1000c450:	3036      	adds	r0, #54	; 0x36
1000c452:	320b      	adds	r2, #11
1000c454:	0029      	movs	r1, r5
1000c456:	3122      	adds	r1, #34	; 0x22
1000c458:	4b20      	ldr	r3, [pc, #128]	; (1000c4dc <ble_pair_done_handler+0x1a8>)
1000c45a:	4699      	mov	r9, r3
1000c45c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c45e:	1b38      	subs	r0, r7, r4
1000c460:	0080      	lsls	r0, r0, #2
1000c462:	4440      	add	r0, r8
1000c464:	3046      	adds	r0, #70	; 0x46
1000c466:	2217      	movs	r2, #23
1000c468:	0029      	movs	r1, r5
1000c46a:	3132      	adds	r1, #50	; 0x32
1000c46c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c46e:	1b38      	subs	r0, r7, r4
1000c470:	0080      	lsls	r0, r0, #2
1000c472:	4440      	add	r0, r8
1000c474:	301a      	adds	r0, #26
1000c476:	1dac      	adds	r4, r5, #6
1000c478:	221c      	movs	r2, #28
1000c47a:	0021      	movs	r1, r4
1000c47c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c47e:	480c      	ldr	r0, [pc, #48]	; (1000c4b0 <ble_pair_done_handler+0x17c>)
1000c480:	47d8      	blx	fp
1000c482:	4817      	ldr	r0, [pc, #92]	; (1000c4e0 <ble_pair_done_handler+0x1ac>)
1000c484:	47d0      	blx	sl
1000c486:	2316      	movs	r3, #22
1000c488:	4699      	mov	r9, r3
1000c48a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c48c:	4e0c      	ldr	r6, [pc, #48]	; (1000c4c0 <ble_pair_done_handler+0x18c>)
1000c48e:	4f0b      	ldr	r7, [pc, #44]	; (1000c4bc <ble_pair_done_handler+0x188>)
1000c490:	e76a      	b.n	1000c368 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c492:	792b      	ldrb	r3, [r5, #4]
1000c494:	9301      	str	r3, [sp, #4]
1000c496:	2b00      	cmp	r3, #0
1000c498:	d0c2      	beq.n	1000c420 <ble_pair_done_handler+0xec>
1000c49a:	e78d      	b.n	1000c3b8 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c49c:	9801      	ldr	r0, [sp, #4]
1000c49e:	b003      	add	sp, #12
1000c4a0:	bc3c      	pop	{r2, r3, r4, r5}
1000c4a2:	4690      	mov	r8, r2
1000c4a4:	4699      	mov	r9, r3
1000c4a6:	46a2      	mov	sl, r4
1000c4a8:	46ab      	mov	fp, r5
1000c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c4ac:	1001a1a8 	.word	0x1001a1a8
1000c4b0:	10016878 	.word	0x10016878
1000c4b4:	10015939 	.word	0x10015939
1000c4b8:	1001788c 	.word	0x1001788c
1000c4bc:	10015819 	.word	0x10015819
1000c4c0:	10017880 	.word	0x10017880
1000c4c4:	10017894 	.word	0x10017894
1000c4c8:	1001789c 	.word	0x1001789c
1000c4cc:	1000f0b9 	.word	0x1000f0b9
1000c4d0:	100178bc 	.word	0x100178bc
1000c4d4:	100178d8 	.word	0x100178d8
1000c4d8:	10017904 	.word	0x10017904
1000c4dc:	100156bf 	.word	0x100156bf
1000c4e0:	10017934 	.word	0x10017934

1000c4e4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c4e4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c4e6:	8800      	ldrh	r0, [r0, #0]
1000c4e8:	2378      	movs	r3, #120	; 0x78
1000c4ea:	2201      	movs	r2, #1
1000c4ec:	2101      	movs	r1, #1
1000c4ee:	4c02      	ldr	r4, [pc, #8]	; (1000c4f8 <ble_conn_param_update_req+0x14>)
1000c4f0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c4f2:	2000      	movs	r0, #0
1000c4f4:	bd10      	pop	{r4, pc}
1000c4f6:	46c0      	nop			; (mov r8, r8)
1000c4f8:	1000f0d9 	.word	0x1000f0d9

1000c4fc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4fe:	4657      	mov	r7, sl
1000c500:	464e      	mov	r6, r9
1000c502:	4645      	mov	r5, r8
1000c504:	b4e0      	push	{r5, r6, r7}
1000c506:	b084      	sub	sp, #16
1000c508:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c50a:	2209      	movs	r2, #9
1000c50c:	2100      	movs	r1, #0
1000c50e:	a801      	add	r0, sp, #4
1000c510:	4b6a      	ldr	r3, [pc, #424]	; (1000c6bc <ble_slave_security_request_handler+0x1c0>)
1000c512:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c514:	8825      	ldrh	r5, [r4, #0]
1000c516:	496a      	ldr	r1, [pc, #424]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c518:	000a      	movs	r2, r1
1000c51a:	2300      	movs	r3, #0
1000c51c:	8910      	ldrh	r0, [r2, #8]
1000c51e:	42a8      	cmp	r0, r5
1000c520:	d116      	bne.n	1000c550 <ble_slave_security_request_handler+0x54>
1000c522:	0010      	movs	r0, r2
1000c524:	305e      	adds	r0, #94	; 0x5e
1000c526:	7800      	ldrb	r0, [r0, #0]
1000c528:	2802      	cmp	r0, #2
1000c52a:	d111      	bne.n	1000c550 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c52c:	4864      	ldr	r0, [pc, #400]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c52e:	015a      	lsls	r2, r3, #5
1000c530:	1ad6      	subs	r6, r2, r3
1000c532:	00b6      	lsls	r6, r6, #2
1000c534:	1986      	adds	r6, r0, r6
1000c536:	365e      	adds	r6, #94	; 0x5e
1000c538:	2206      	movs	r2, #6
1000c53a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c53c:	32f9      	adds	r2, #249	; 0xf9
1000c53e:	4013      	ands	r3, r2
1000c540:	015a      	lsls	r2, r3, #5
1000c542:	1ad2      	subs	r2, r2, r3
1000c544:	0092      	lsls	r2, r2, #2
1000c546:	1882      	adds	r2, r0, r2
1000c548:	7d12      	ldrb	r2, [r2, #20]
1000c54a:	07d0      	lsls	r0, r2, #31
1000c54c:	d405      	bmi.n	1000c55a <ble_slave_security_request_handler+0x5e>
1000c54e:	e01b      	b.n	1000c588 <ble_slave_security_request_handler+0x8c>
1000c550:	3301      	adds	r3, #1
1000c552:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c554:	2b05      	cmp	r3, #5
1000c556:	d1e1      	bne.n	1000c51c <ble_slave_security_request_handler+0x20>
1000c558:	e01e      	b.n	1000c598 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c55a:	78e0      	ldrb	r0, [r4, #3]
1000c55c:	2800      	cmp	r0, #0
1000c55e:	d013      	beq.n	1000c588 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c560:	0159      	lsls	r1, r3, #5
1000c562:	1ac9      	subs	r1, r1, r3
1000c564:	008b      	lsls	r3, r1, #2
1000c566:	4956      	ldr	r1, [pc, #344]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c568:	18c9      	adds	r1, r1, r3
1000c56a:	311a      	adds	r1, #26
1000c56c:	8820      	ldrh	r0, [r4, #0]
1000c56e:	4b55      	ldr	r3, [pc, #340]	; (1000c6c4 <ble_slave_security_request_handler+0x1c8>)
1000c570:	4798      	blx	r3
1000c572:	2800      	cmp	r0, #0
1000c574:	d100      	bne.n	1000c578 <ble_slave_security_request_handler+0x7c>
1000c576:	e09b      	b.n	1000c6b0 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c578:	4853      	ldr	r0, [pc, #332]	; (1000c6c8 <ble_slave_security_request_handler+0x1cc>)
1000c57a:	4b54      	ldr	r3, [pc, #336]	; (1000c6cc <ble_slave_security_request_handler+0x1d0>)
1000c57c:	4798      	blx	r3
1000c57e:	4854      	ldr	r0, [pc, #336]	; (1000c6d0 <ble_slave_security_request_handler+0x1d4>)
1000c580:	4b54      	ldr	r3, [pc, #336]	; (1000c6d4 <ble_slave_security_request_handler+0x1d8>)
1000c582:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c584:	20e2      	movs	r0, #226	; 0xe2
1000c586:	e093      	b.n	1000c6b0 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c588:	015a      	lsls	r2, r3, #5
1000c58a:	1ad3      	subs	r3, r2, r3
1000c58c:	009b      	lsls	r3, r3, #2
1000c58e:	4a4c      	ldr	r2, [pc, #304]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c590:	18d3      	adds	r3, r2, r3
1000c592:	335e      	adds	r3, #94	; 0x5e
1000c594:	2202      	movs	r2, #2
1000c596:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c598:	8825      	ldrh	r5, [r4, #0]
1000c59a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c59c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c59e:	0016      	movs	r6, r2
1000c5a0:	8908      	ldrh	r0, [r1, #8]
1000c5a2:	42a8      	cmp	r0, r5
1000c5a4:	d10d      	bne.n	1000c5c2 <ble_slave_security_request_handler+0xc6>
1000c5a6:	0008      	movs	r0, r1
1000c5a8:	305e      	adds	r0, #94	; 0x5e
1000c5aa:	7800      	ldrb	r0, [r0, #0]
1000c5ac:	2802      	cmp	r0, #2
1000c5ae:	d108      	bne.n	1000c5c2 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c5b0:	0152      	lsls	r2, r2, #5
1000c5b2:	1b92      	subs	r2, r2, r6
1000c5b4:	0096      	lsls	r6, r2, #2
1000c5b6:	4a42      	ldr	r2, [pc, #264]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c5b8:	1992      	adds	r2, r2, r6
1000c5ba:	325e      	adds	r2, #94	; 0x5e
1000c5bc:	2103      	movs	r1, #3
1000c5be:	7011      	strb	r1, [r2, #0]
			break;
1000c5c0:	e005      	b.n	1000c5ce <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5c2:	3301      	adds	r3, #1
1000c5c4:	b2db      	uxtb	r3, r3
1000c5c6:	3201      	adds	r2, #1
1000c5c8:	317c      	adds	r1, #124	; 0x7c
1000c5ca:	2b05      	cmp	r3, #5
1000c5cc:	d1e7      	bne.n	1000c59e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c5ce:	aa01      	add	r2, sp, #4
1000c5d0:	78e1      	ldrb	r1, [r4, #3]
1000c5d2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c5d4:	2101      	movs	r1, #1
1000c5d6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c5d8:	3103      	adds	r1, #3
1000c5da:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c5dc:	001f      	movs	r7, r3
1000c5de:	015a      	lsls	r2, r3, #5
1000c5e0:	1ad2      	subs	r2, r2, r3
1000c5e2:	0092      	lsls	r2, r2, #2
1000c5e4:	4936      	ldr	r1, [pc, #216]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c5e6:	5c52      	ldrb	r2, [r2, r1]
1000c5e8:	2a02      	cmp	r2, #2
1000c5ea:	d104      	bne.n	1000c5f6 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c5ec:	aa01      	add	r2, sp, #4
1000c5ee:	2103      	movs	r1, #3
1000c5f0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c5f2:	71d1      	strb	r1, [r2, #7]
1000c5f4:	e003      	b.n	1000c5fe <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c5f6:	aa01      	add	r2, sp, #4
1000c5f8:	2101      	movs	r1, #1
1000c5fa:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c5fc:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c5fe:	aa01      	add	r2, sp, #4
1000c600:	2110      	movs	r1, #16
1000c602:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c604:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c606:	017a      	lsls	r2, r7, #5
1000c608:	1bd2      	subs	r2, r2, r7
1000c60a:	0092      	lsls	r2, r2, #2
1000c60c:	492c      	ldr	r1, [pc, #176]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c60e:	188a      	adds	r2, r1, r2
1000c610:	7e12      	ldrb	r2, [r2, #24]
1000c612:	2a40      	cmp	r2, #64	; 0x40
1000c614:	d134      	bne.n	1000c680 <ble_slave_security_request_handler+0x184>
1000c616:	015a      	lsls	r2, r3, #5
1000c618:	1ad3      	subs	r3, r2, r3
1000c61a:	009b      	lsls	r3, r3, #2
1000c61c:	469a      	mov	sl, r3
1000c61e:	001e      	movs	r6, r3
1000c620:	3660      	adds	r6, #96	; 0x60
1000c622:	1876      	adds	r6, r6, r1
1000c624:	4655      	mov	r5, sl
1000c626:	3568      	adds	r5, #104	; 0x68
1000c628:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c62a:	4b2b      	ldr	r3, [pc, #172]	; (1000c6d8 <ble_slave_security_request_handler+0x1dc>)
1000c62c:	4699      	mov	r9, r3
1000c62e:	230f      	movs	r3, #15
1000c630:	4698      	mov	r8, r3
1000c632:	47c8      	blx	r9
1000c634:	4643      	mov	r3, r8
1000c636:	4018      	ands	r0, r3
1000c638:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c63a:	47c8      	blx	r9
1000c63c:	4643      	mov	r3, r8
1000c63e:	4018      	ands	r0, r3
1000c640:	74b0      	strb	r0, [r6, #18]
1000c642:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c644:	42ae      	cmp	r6, r5
1000c646:	d1f4      	bne.n	1000c632 <ble_slave_security_request_handler+0x136>
1000c648:	4656      	mov	r6, sl
1000c64a:	3670      	adds	r6, #112	; 0x70
1000c64c:	4a1c      	ldr	r2, [pc, #112]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c64e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c650:	4b21      	ldr	r3, [pc, #132]	; (1000c6d8 <ble_slave_security_request_handler+0x1dc>)
1000c652:	4699      	mov	r9, r3
1000c654:	230f      	movs	r3, #15
1000c656:	4698      	mov	r8, r3
1000c658:	47c8      	blx	r9
1000c65a:	4643      	mov	r3, r8
1000c65c:	4018      	ands	r0, r3
1000c65e:	7028      	strb	r0, [r5, #0]
1000c660:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c662:	42b5      	cmp	r5, r6
1000c664:	d1f8      	bne.n	1000c658 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c666:	4b1c      	ldr	r3, [pc, #112]	; (1000c6d8 <ble_slave_security_request_handler+0x1dc>)
1000c668:	4798      	blx	r3
1000c66a:	017b      	lsls	r3, r7, #5
1000c66c:	1bdb      	subs	r3, r3, r7
1000c66e:	009b      	lsls	r3, r3, #2
1000c670:	4a13      	ldr	r2, [pc, #76]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c672:	18d3      	adds	r3, r2, r3
1000c674:	001a      	movs	r2, r3
1000c676:	3270      	adds	r2, #112	; 0x70
1000c678:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c67a:	337a      	adds	r3, #122	; 0x7a
1000c67c:	2210      	movs	r2, #16
1000c67e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c680:	017a      	lsls	r2, r7, #5
1000c682:	1bd7      	subs	r7, r2, r7
1000c684:	00bf      	lsls	r7, r7, #2
1000c686:	3760      	adds	r7, #96	; 0x60
1000c688:	4a0d      	ldr	r2, [pc, #52]	; (1000c6c0 <ble_slave_security_request_handler+0x1c4>)
1000c68a:	18ba      	adds	r2, r7, r2
1000c68c:	8820      	ldrh	r0, [r4, #0]
1000c68e:	2300      	movs	r3, #0
1000c690:	a901      	add	r1, sp, #4
1000c692:	4c12      	ldr	r4, [pc, #72]	; (1000c6dc <ble_slave_security_request_handler+0x1e0>)
1000c694:	47a0      	blx	r4
1000c696:	2800      	cmp	r0, #0
1000c698:	d00a      	beq.n	1000c6b0 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c69a:	ab01      	add	r3, sp, #4
1000c69c:	2200      	movs	r2, #0
1000c69e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c6a0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c6a2:	4809      	ldr	r0, [pc, #36]	; (1000c6c8 <ble_slave_security_request_handler+0x1cc>)
1000c6a4:	4b09      	ldr	r3, [pc, #36]	; (1000c6cc <ble_slave_security_request_handler+0x1d0>)
1000c6a6:	4798      	blx	r3
1000c6a8:	480d      	ldr	r0, [pc, #52]	; (1000c6e0 <ble_slave_security_request_handler+0x1e4>)
1000c6aa:	4b0a      	ldr	r3, [pc, #40]	; (1000c6d4 <ble_slave_security_request_handler+0x1d8>)
1000c6ac:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c6ae:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c6b0:	b004      	add	sp, #16
1000c6b2:	bc1c      	pop	{r2, r3, r4}
1000c6b4:	4690      	mov	r8, r2
1000c6b6:	4699      	mov	r9, r3
1000c6b8:	46a2      	mov	sl, r4
1000c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6bc:	100156d1 	.word	0x100156d1
1000c6c0:	1001a1a8 	.word	0x1001a1a8
1000c6c4:	1000fc9d 	.word	0x1000fc9d
1000c6c8:	10016878 	.word	0x10016878
1000c6cc:	10015939 	.word	0x10015939
1000c6d0:	1001793c 	.word	0x1001793c
1000c6d4:	10015819 	.word	0x10015819
1000c6d8:	1001594d 	.word	0x1001594d
1000c6dc:	1000fab1 	.word	0x1000fab1
1000c6e0:	10017954 	.word	0x10017954

1000c6e4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6e6:	465f      	mov	r7, fp
1000c6e8:	4656      	mov	r6, sl
1000c6ea:	464d      	mov	r5, r9
1000c6ec:	4644      	mov	r4, r8
1000c6ee:	b4f0      	push	{r4, r5, r6, r7}
1000c6f0:	b085      	sub	sp, #20
1000c6f2:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6f4:	8804      	ldrh	r4, [r0, #0]
1000c6f6:	4a54      	ldr	r2, [pc, #336]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c6f8:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c6fa:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6fc:	8910      	ldrh	r0, [r2, #8]
1000c6fe:	42a0      	cmp	r0, r4
1000c700:	d10d      	bne.n	1000c71e <ble_pair_request_handler+0x3a>
1000c702:	0010      	movs	r0, r2
1000c704:	305e      	adds	r0, #94	; 0x5e
1000c706:	7800      	ldrb	r0, [r0, #0]
1000c708:	2802      	cmp	r0, #2
1000c70a:	d108      	bne.n	1000c71e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c70c:	014a      	lsls	r2, r1, #5
1000c70e:	1a52      	subs	r2, r2, r1
1000c710:	0095      	lsls	r5, r2, #2
1000c712:	4a4d      	ldr	r2, [pc, #308]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c714:	1952      	adds	r2, r2, r5
1000c716:	325e      	adds	r2, #94	; 0x5e
1000c718:	2103      	movs	r1, #3
1000c71a:	7011      	strb	r1, [r2, #0]
			break;
1000c71c:	e005      	b.n	1000c72a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c71e:	3301      	adds	r3, #1
1000c720:	b2db      	uxtb	r3, r3
1000c722:	3101      	adds	r1, #1
1000c724:	327c      	adds	r2, #124	; 0x7c
1000c726:	2b05      	cmp	r3, #5
1000c728:	d1e8      	bne.n	1000c6fc <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c72a:	aa01      	add	r2, sp, #4
1000c72c:	2100      	movs	r1, #0
1000c72e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c730:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c732:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c734:	2003      	movs	r0, #3
1000c736:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c738:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c73a:	001e      	movs	r6, r3
1000c73c:	015a      	lsls	r2, r3, #5
1000c73e:	1ad2      	subs	r2, r2, r3
1000c740:	0092      	lsls	r2, r2, #2
1000c742:	4941      	ldr	r1, [pc, #260]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c744:	5c52      	ldrb	r2, [r2, r1]
1000c746:	2a02      	cmp	r2, #2
1000c748:	d104      	bne.n	1000c754 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c74a:	aa01      	add	r2, sp, #4
1000c74c:	2103      	movs	r1, #3
1000c74e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c750:	71d1      	strb	r1, [r2, #7]
1000c752:	e003      	b.n	1000c75c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c754:	aa01      	add	r2, sp, #4
1000c756:	2101      	movs	r1, #1
1000c758:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c75a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c75c:	aa01      	add	r2, sp, #4
1000c75e:	2110      	movs	r1, #16
1000c760:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c762:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c764:	0172      	lsls	r2, r6, #5
1000c766:	1b92      	subs	r2, r2, r6
1000c768:	0092      	lsls	r2, r2, #2
1000c76a:	4937      	ldr	r1, [pc, #220]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c76c:	188a      	adds	r2, r1, r2
1000c76e:	7e12      	ldrb	r2, [r2, #24]
1000c770:	2a40      	cmp	r2, #64	; 0x40
1000c772:	d142      	bne.n	1000c7fa <ble_pair_request_handler+0x116>
1000c774:	015f      	lsls	r7, r3, #5
1000c776:	1afb      	subs	r3, r7, r3
1000c778:	009b      	lsls	r3, r3, #2
1000c77a:	469b      	mov	fp, r3
1000c77c:	001c      	movs	r4, r3
1000c77e:	3460      	adds	r4, #96	; 0x60
1000c780:	1864      	adds	r4, r4, r1
1000c782:	465d      	mov	r5, fp
1000c784:	3568      	adds	r5, #104	; 0x68
1000c786:	186d      	adds	r5, r5, r1
1000c788:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c78a:	4b30      	ldr	r3, [pc, #192]	; (1000c84c <ble_pair_request_handler+0x168>)
1000c78c:	469a      	mov	sl, r3
1000c78e:	230f      	movs	r3, #15
1000c790:	4699      	mov	r9, r3
1000c792:	47d0      	blx	sl
1000c794:	464b      	mov	r3, r9
1000c796:	4018      	ands	r0, r3
1000c798:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c79a:	47d0      	blx	sl
1000c79c:	464b      	mov	r3, r9
1000c79e:	4018      	ands	r0, r3
1000c7a0:	74b8      	strb	r0, [r7, #18]
1000c7a2:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c7a4:	42af      	cmp	r7, r5
1000c7a6:	d1f4      	bne.n	1000c792 <ble_pair_request_handler+0xae>
1000c7a8:	465b      	mov	r3, fp
1000c7aa:	3370      	adds	r3, #112	; 0x70
1000c7ac:	4f26      	ldr	r7, [pc, #152]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c7ae:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c7b0:	4b26      	ldr	r3, [pc, #152]	; (1000c84c <ble_pair_request_handler+0x168>)
1000c7b2:	469a      	mov	sl, r3
1000c7b4:	230f      	movs	r3, #15
1000c7b6:	4699      	mov	r9, r3
1000c7b8:	47d0      	blx	sl
1000c7ba:	464b      	mov	r3, r9
1000c7bc:	4018      	ands	r0, r3
1000c7be:	7028      	strb	r0, [r5, #0]
1000c7c0:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c7c2:	42bd      	cmp	r5, r7
1000c7c4:	d1f8      	bne.n	1000c7b8 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c7c6:	4822      	ldr	r0, [pc, #136]	; (1000c850 <ble_pair_request_handler+0x16c>)
1000c7c8:	4b22      	ldr	r3, [pc, #136]	; (1000c854 <ble_pair_request_handler+0x170>)
1000c7ca:	4798      	blx	r3
1000c7cc:	4822      	ldr	r0, [pc, #136]	; (1000c858 <ble_pair_request_handler+0x174>)
1000c7ce:	4b23      	ldr	r3, [pc, #140]	; (1000c85c <ble_pair_request_handler+0x178>)
1000c7d0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c7d2:	4d22      	ldr	r5, [pc, #136]	; (1000c85c <ble_pair_request_handler+0x178>)
1000c7d4:	7821      	ldrb	r1, [r4, #0]
1000c7d6:	4822      	ldr	r0, [pc, #136]	; (1000c860 <ble_pair_request_handler+0x17c>)
1000c7d8:	47a8      	blx	r5
1000c7da:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c7dc:	42bc      	cmp	r4, r7
1000c7de:	d1f9      	bne.n	1000c7d4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c7e0:	4b1a      	ldr	r3, [pc, #104]	; (1000c84c <ble_pair_request_handler+0x168>)
1000c7e2:	4798      	blx	r3
1000c7e4:	0173      	lsls	r3, r6, #5
1000c7e6:	1b9b      	subs	r3, r3, r6
1000c7e8:	009b      	lsls	r3, r3, #2
1000c7ea:	4a17      	ldr	r2, [pc, #92]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c7ec:	18d3      	adds	r3, r2, r3
1000c7ee:	001a      	movs	r2, r3
1000c7f0:	3270      	adds	r2, #112	; 0x70
1000c7f2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c7f4:	337a      	adds	r3, #122	; 0x7a
1000c7f6:	2210      	movs	r2, #16
1000c7f8:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c7fa:	4815      	ldr	r0, [pc, #84]	; (1000c850 <ble_pair_request_handler+0x16c>)
1000c7fc:	4b15      	ldr	r3, [pc, #84]	; (1000c854 <ble_pair_request_handler+0x170>)
1000c7fe:	4798      	blx	r3
1000c800:	4818      	ldr	r0, [pc, #96]	; (1000c864 <ble_pair_request_handler+0x180>)
1000c802:	4b16      	ldr	r3, [pc, #88]	; (1000c85c <ble_pair_request_handler+0x178>)
1000c804:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c806:	0173      	lsls	r3, r6, #5
1000c808:	1b9b      	subs	r3, r3, r6
1000c80a:	009b      	lsls	r3, r3, #2
1000c80c:	3360      	adds	r3, #96	; 0x60
1000c80e:	4a0e      	ldr	r2, [pc, #56]	; (1000c848 <ble_pair_request_handler+0x164>)
1000c810:	189a      	adds	r2, r3, r2
1000c812:	4643      	mov	r3, r8
1000c814:	8818      	ldrh	r0, [r3, #0]
1000c816:	2300      	movs	r3, #0
1000c818:	a901      	add	r1, sp, #4
1000c81a:	4c13      	ldr	r4, [pc, #76]	; (1000c868 <ble_pair_request_handler+0x184>)
1000c81c:	47a0      	blx	r4
1000c81e:	2800      	cmp	r0, #0
1000c820:	d00a      	beq.n	1000c838 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c822:	ab01      	add	r3, sp, #4
1000c824:	2200      	movs	r2, #0
1000c826:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c828:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c82a:	4809      	ldr	r0, [pc, #36]	; (1000c850 <ble_pair_request_handler+0x16c>)
1000c82c:	4b09      	ldr	r3, [pc, #36]	; (1000c854 <ble_pair_request_handler+0x170>)
1000c82e:	4798      	blx	r3
1000c830:	480e      	ldr	r0, [pc, #56]	; (1000c86c <ble_pair_request_handler+0x188>)
1000c832:	4b0a      	ldr	r3, [pc, #40]	; (1000c85c <ble_pair_request_handler+0x178>)
1000c834:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c836:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c838:	b005      	add	sp, #20
1000c83a:	bc3c      	pop	{r2, r3, r4, r5}
1000c83c:	4690      	mov	r8, r2
1000c83e:	4699      	mov	r9, r3
1000c840:	46a2      	mov	sl, r4
1000c842:	46ab      	mov	fp, r5
1000c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c846:	46c0      	nop			; (mov r8, r8)
1000c848:	1001a1a8 	.word	0x1001a1a8
1000c84c:	1001594d 	.word	0x1001594d
1000c850:	10016878 	.word	0x10016878
1000c854:	10015939 	.word	0x10015939
1000c858:	10017980 	.word	0x10017980
1000c85c:	10015819 	.word	0x10015819
1000c860:	10017990 	.word	0x10017990
1000c864:	10017998 	.word	0x10017998
1000c868:	1000fab1 	.word	0x1000fab1
1000c86c:	100179b4 	.word	0x100179b4

1000c870 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c870:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c872:	b085      	sub	sp, #20
1000c874:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c876:	2206      	movs	r2, #6
1000c878:	493d      	ldr	r1, [pc, #244]	; (1000c970 <ble_pair_key_request_handler+0x100>)
1000c87a:	a802      	add	r0, sp, #8
1000c87c:	4e3d      	ldr	r6, [pc, #244]	; (1000c974 <ble_pair_key_request_handler+0x104>)
1000c87e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c880:	ac01      	add	r4, sp, #4
1000c882:	2204      	movs	r2, #4
1000c884:	0029      	movs	r1, r5
1000c886:	0020      	movs	r0, r4
1000c888:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c88a:	78e3      	ldrb	r3, [r4, #3]
1000c88c:	2b00      	cmp	r3, #0
1000c88e:	d162      	bne.n	1000c956 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c890:	4839      	ldr	r0, [pc, #228]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c892:	4b3a      	ldr	r3, [pc, #232]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c894:	4798      	blx	r3
1000c896:	483a      	ldr	r0, [pc, #232]	; (1000c980 <ble_pair_key_request_handler+0x110>)
1000c898:	4b3a      	ldr	r3, [pc, #232]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c89a:	4798      	blx	r3
1000c89c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c89e:	4c3a      	ldr	r4, [pc, #232]	; (1000c988 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c8a0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c8a2:	201e      	movs	r0, #30
1000c8a4:	47a0      	blx	r4
1000c8a6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c8a8:	2b00      	cmp	r3, #0
1000c8aa:	d11a      	bne.n	1000c8e2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c8ac:	4f32      	ldr	r7, [pc, #200]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c8ae:	0038      	movs	r0, r7
1000c8b0:	4e32      	ldr	r6, [pc, #200]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c8b2:	47b0      	blx	r6
1000c8b4:	4835      	ldr	r0, [pc, #212]	; (1000c98c <ble_pair_key_request_handler+0x11c>)
1000c8b6:	4c33      	ldr	r4, [pc, #204]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c8b8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c8ba:	0038      	movs	r0, r7
1000c8bc:	47b0      	blx	r6
1000c8be:	4834      	ldr	r0, [pc, #208]	; (1000c990 <ble_pair_key_request_handler+0x120>)
1000c8c0:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c8c2:	8828      	ldrh	r0, [r5, #0]
1000c8c4:	2113      	movs	r1, #19
1000c8c6:	4b33      	ldr	r3, [pc, #204]	; (1000c994 <ble_pair_key_request_handler+0x124>)
1000c8c8:	4798      	blx	r3
1000c8ca:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c8cc:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c8ce:	2b00      	cmp	r3, #0
1000c8d0:	d04c      	beq.n	1000c96c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c8d2:	4829      	ldr	r0, [pc, #164]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c8d4:	4b29      	ldr	r3, [pc, #164]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c8d6:	4798      	blx	r3
1000c8d8:	482f      	ldr	r0, [pc, #188]	; (1000c998 <ble_pair_key_request_handler+0x128>)
1000c8da:	4b2a      	ldr	r3, [pc, #168]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c8dc:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c8de:	20e2      	movs	r0, #226	; 0xe2
1000c8e0:	e044      	b.n	1000c96c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c8e2:	001a      	movs	r2, r3
1000c8e4:	3a30      	subs	r2, #48	; 0x30
1000c8e6:	2a09      	cmp	r2, #9
1000c8e8:	d8db      	bhi.n	1000c8a2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c8ea:	aa02      	add	r2, sp, #8
1000c8ec:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c8ee:	4038      	ands	r0, r7
1000c8f0:	4b2a      	ldr	r3, [pc, #168]	; (1000c99c <ble_pair_key_request_handler+0x12c>)
1000c8f2:	4798      	blx	r3
1000c8f4:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c8f6:	2e06      	cmp	r6, #6
1000c8f8:	d026      	beq.n	1000c948 <ble_pair_key_request_handler+0xd8>
1000c8fa:	e7d2      	b.n	1000c8a2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c8fc:	481e      	ldr	r0, [pc, #120]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c8fe:	4b1f      	ldr	r3, [pc, #124]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c900:	4798      	blx	r3
1000c902:	4827      	ldr	r0, [pc, #156]	; (1000c9a0 <ble_pair_key_request_handler+0x130>)
1000c904:	4b1f      	ldr	r3, [pc, #124]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c906:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c908:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c90a:	4e24      	ldr	r6, [pc, #144]	; (1000c99c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c90c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c90e:	5ce0      	ldrb	r0, [r4, r3]
1000c910:	47b0      	blx	r6
1000c912:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c914:	2c06      	cmp	r4, #6
1000c916:	d1f9      	bne.n	1000c90c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c918:	ab01      	add	r3, sp, #4
1000c91a:	7899      	ldrb	r1, [r3, #2]
1000c91c:	8828      	ldrh	r0, [r5, #0]
1000c91e:	aa02      	add	r2, sp, #8
1000c920:	4b20      	ldr	r3, [pc, #128]	; (1000c9a4 <ble_pair_key_request_handler+0x134>)
1000c922:	4798      	blx	r3
1000c924:	2800      	cmp	r0, #0
1000c926:	d021      	beq.n	1000c96c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c928:	4813      	ldr	r0, [pc, #76]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c92a:	4b14      	ldr	r3, [pc, #80]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c92c:	4798      	blx	r3
1000c92e:	481e      	ldr	r0, [pc, #120]	; (1000c9a8 <ble_pair_key_request_handler+0x138>)
1000c930:	4b14      	ldr	r3, [pc, #80]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c932:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c934:	2000      	movs	r0, #0
1000c936:	e019      	b.n	1000c96c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c938:	480f      	ldr	r0, [pc, #60]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c93a:	4b10      	ldr	r3, [pc, #64]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c93c:	4798      	blx	r3
1000c93e:	481b      	ldr	r0, [pc, #108]	; (1000c9ac <ble_pair_key_request_handler+0x13c>)
1000c940:	4b10      	ldr	r3, [pc, #64]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c942:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c944:	2000      	movs	r0, #0
1000c946:	e011      	b.n	1000c96c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c948:	480b      	ldr	r0, [pc, #44]	; (1000c978 <ble_pair_key_request_handler+0x108>)
1000c94a:	4b0c      	ldr	r3, [pc, #48]	; (1000c97c <ble_pair_key_request_handler+0x10c>)
1000c94c:	4798      	blx	r3
1000c94e:	4818      	ldr	r0, [pc, #96]	; (1000c9b0 <ble_pair_key_request_handler+0x140>)
1000c950:	4b0c      	ldr	r3, [pc, #48]	; (1000c984 <ble_pair_key_request_handler+0x114>)
1000c952:	4798      	blx	r3
1000c954:	e7d8      	b.n	1000c908 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c956:	ab01      	add	r3, sp, #4
1000c958:	885a      	ldrh	r2, [r3, #2]
1000c95a:	2380      	movs	r3, #128	; 0x80
1000c95c:	005b      	lsls	r3, r3, #1
1000c95e:	429a      	cmp	r2, r3
1000c960:	d0cc      	beq.n	1000c8fc <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c962:	ab01      	add	r3, sp, #4
1000c964:	789b      	ldrb	r3, [r3, #2]
1000c966:	2b01      	cmp	r3, #1
1000c968:	d0e6      	beq.n	1000c938 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c96a:	2000      	movs	r0, #0
}
1000c96c:	b005      	add	sp, #20
1000c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c970:	1001759c 	.word	0x1001759c
1000c974:	100156bf 	.word	0x100156bf
1000c978:	10016878 	.word	0x10016878
1000c97c:	10015939 	.word	0x10015939
1000c980:	100179dc 	.word	0x100179dc
1000c984:	10015819 	.word	0x10015819
1000c988:	1000d68d 	.word	0x1000d68d
1000c98c:	10017a04 	.word	0x10017a04
1000c990:	10017a10 	.word	0x10017a10
1000c994:	1000f0b9 	.word	0x1000f0b9
1000c998:	100178bc 	.word	0x100178bc
1000c99c:	1001584d 	.word	0x1001584d
1000c9a0:	10017a24 	.word	0x10017a24
1000c9a4:	1000fbe1 	.word	0x1000fbe1
1000c9a8:	10017a5c 	.word	0x10017a5c
1000c9ac:	10017a74 	.word	0x10017a74
1000c9b0:	10017a90 	.word	0x10017a90

1000c9b4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9b6:	465f      	mov	r7, fp
1000c9b8:	4656      	mov	r6, sl
1000c9ba:	464d      	mov	r5, r9
1000c9bc:	b4e0      	push	{r5, r6, r7}
1000c9be:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c9c0:	8800      	ldrh	r0, [r0, #0]
1000c9c2:	4b49      	ldr	r3, [pc, #292]	; (1000cae8 <ble_encryption_request_handler+0x134>)
1000c9c4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c9c6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c9c8:	8919      	ldrh	r1, [r3, #8]
1000c9ca:	4281      	cmp	r1, r0
1000c9cc:	d137      	bne.n	1000ca3e <ble_encryption_request_handler+0x8a>
1000c9ce:	0019      	movs	r1, r3
1000c9d0:	315e      	adds	r1, #94	; 0x5e
1000c9d2:	7809      	ldrb	r1, [r1, #0]
1000c9d4:	2901      	cmp	r1, #1
1000c9d6:	d932      	bls.n	1000ca3e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c9d8:	4f43      	ldr	r7, [pc, #268]	; (1000cae8 <ble_encryption_request_handler+0x134>)
1000c9da:	0153      	lsls	r3, r2, #5
1000c9dc:	1a9d      	subs	r5, r3, r2
1000c9de:	00ad      	lsls	r5, r5, #2
1000c9e0:	197d      	adds	r5, r7, r5
1000c9e2:	355e      	adds	r5, #94	; 0x5e
1000c9e4:	2306      	movs	r3, #6
1000c9e6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000c9e8:	4840      	ldr	r0, [pc, #256]	; (1000caec <ble_encryption_request_handler+0x138>)
1000c9ea:	4b41      	ldr	r3, [pc, #260]	; (1000caf0 <ble_encryption_request_handler+0x13c>)
1000c9ec:	469a      	mov	sl, r3
1000c9ee:	4798      	blx	r3
1000c9f0:	8831      	ldrh	r1, [r6, #0]
1000c9f2:	4840      	ldr	r0, [pc, #256]	; (1000caf4 <ble_encryption_request_handler+0x140>)
1000c9f4:	4b40      	ldr	r3, [pc, #256]	; (1000caf8 <ble_encryption_request_handler+0x144>)
1000c9f6:	4699      	mov	r9, r3
1000c9f8:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000c9fa:	483c      	ldr	r0, [pc, #240]	; (1000caec <ble_encryption_request_handler+0x138>)
1000c9fc:	47d0      	blx	sl
1000c9fe:	0163      	lsls	r3, r4, #5
1000ca00:	1b1b      	subs	r3, r3, r4
1000ca02:	009b      	lsls	r3, r3, #2
1000ca04:	18ff      	adds	r7, r7, r3
1000ca06:	2370      	movs	r3, #112	; 0x70
1000ca08:	469b      	mov	fp, r3
1000ca0a:	44bb      	add	fp, r7
1000ca0c:	465b      	mov	r3, fp
1000ca0e:	8819      	ldrh	r1, [r3, #0]
1000ca10:	483a      	ldr	r0, [pc, #232]	; (1000cafc <ble_encryption_request_handler+0x148>)
1000ca12:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000ca14:	4835      	ldr	r0, [pc, #212]	; (1000caec <ble_encryption_request_handler+0x138>)
1000ca16:	47d0      	blx	sl
1000ca18:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000ca1a:	4839      	ldr	r0, [pc, #228]	; (1000cb00 <ble_encryption_request_handler+0x14c>)
1000ca1c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000ca1e:	4833      	ldr	r0, [pc, #204]	; (1000caec <ble_encryption_request_handler+0x138>)
1000ca20:	47d0      	blx	sl
1000ca22:	8871      	ldrh	r1, [r6, #2]
1000ca24:	4837      	ldr	r0, [pc, #220]	; (1000cb04 <ble_encryption_request_handler+0x150>)
1000ca26:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000ca28:	4830      	ldr	r0, [pc, #192]	; (1000caec <ble_encryption_request_handler+0x138>)
1000ca2a:	47d0      	blx	sl
1000ca2c:	0021      	movs	r1, r4
1000ca2e:	4836      	ldr	r0, [pc, #216]	; (1000cb08 <ble_encryption_request_handler+0x154>)
1000ca30:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000ca32:	465b      	mov	r3, fp
1000ca34:	881a      	ldrh	r2, [r3, #0]
1000ca36:	8873      	ldrh	r3, [r6, #2]
1000ca38:	429a      	cmp	r2, r3
1000ca3a:	d12a      	bne.n	1000ca92 <ble_encryption_request_handler+0xde>
1000ca3c:	e006      	b.n	1000ca4c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ca3e:	3401      	adds	r4, #1
1000ca40:	b2e4      	uxtb	r4, r4
1000ca42:	3201      	adds	r2, #1
1000ca44:	337c      	adds	r3, #124	; 0x7c
1000ca46:	2c05      	cmp	r4, #5
1000ca48:	d1be      	bne.n	1000c9c8 <ble_encryption_request_handler+0x14>
1000ca4a:	e022      	b.n	1000ca92 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000ca4c:	0161      	lsls	r1, r4, #5
1000ca4e:	1b09      	subs	r1, r1, r4
1000ca50:	0089      	lsls	r1, r1, #2
1000ca52:	4b25      	ldr	r3, [pc, #148]	; (1000cae8 <ble_encryption_request_handler+0x134>)
1000ca54:	1859      	adds	r1, r3, r1
1000ca56:	3172      	adds	r1, #114	; 0x72
1000ca58:	1d30      	adds	r0, r6, #4
1000ca5a:	2208      	movs	r2, #8
1000ca5c:	4b2b      	ldr	r3, [pc, #172]	; (1000cb0c <ble_encryption_request_handler+0x158>)
1000ca5e:	4798      	blx	r3
1000ca60:	2800      	cmp	r0, #0
1000ca62:	d116      	bne.n	1000ca92 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000ca64:	4821      	ldr	r0, [pc, #132]	; (1000caec <ble_encryption_request_handler+0x138>)
1000ca66:	4b22      	ldr	r3, [pc, #136]	; (1000caf0 <ble_encryption_request_handler+0x13c>)
1000ca68:	4798      	blx	r3
1000ca6a:	4829      	ldr	r0, [pc, #164]	; (1000cb10 <ble_encryption_request_handler+0x15c>)
1000ca6c:	4b22      	ldr	r3, [pc, #136]	; (1000caf8 <ble_encryption_request_handler+0x144>)
1000ca6e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000ca70:	0162      	lsls	r2, r4, #5
1000ca72:	1b13      	subs	r3, r2, r4
1000ca74:	009b      	lsls	r3, r3, #2
1000ca76:	3360      	adds	r3, #96	; 0x60
1000ca78:	491b      	ldr	r1, [pc, #108]	; (1000cae8 <ble_encryption_request_handler+0x134>)
1000ca7a:	185b      	adds	r3, r3, r1
1000ca7c:	1b12      	subs	r2, r2, r4
1000ca7e:	0092      	lsls	r2, r2, #2
1000ca80:	188a      	adds	r2, r1, r2
1000ca82:	7d11      	ldrb	r1, [r2, #20]
1000ca84:	8830      	ldrh	r0, [r6, #0]
1000ca86:	2201      	movs	r2, #1
1000ca88:	4c22      	ldr	r4, [pc, #136]	; (1000cb14 <ble_encryption_request_handler+0x160>)
1000ca8a:	47a0      	blx	r4
1000ca8c:	1e04      	subs	r4, r0, #0
1000ca8e:	d01e      	beq.n	1000cace <ble_encryption_request_handler+0x11a>
1000ca90:	e015      	b.n	1000cabe <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000ca92:	4f16      	ldr	r7, [pc, #88]	; (1000caec <ble_encryption_request_handler+0x138>)
1000ca94:	0038      	movs	r0, r7
1000ca96:	4e16      	ldr	r6, [pc, #88]	; (1000caf0 <ble_encryption_request_handler+0x13c>)
1000ca98:	47b0      	blx	r6
1000ca9a:	481f      	ldr	r0, [pc, #124]	; (1000cb18 <ble_encryption_request_handler+0x164>)
1000ca9c:	4d16      	ldr	r5, [pc, #88]	; (1000caf8 <ble_encryption_request_handler+0x144>)
1000ca9e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000caa0:	0038      	movs	r0, r7
1000caa2:	47b0      	blx	r6
1000caa4:	481d      	ldr	r0, [pc, #116]	; (1000cb1c <ble_encryption_request_handler+0x168>)
1000caa6:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000caa8:	0163      	lsls	r3, r4, #5
1000caaa:	1b1c      	subs	r4, r3, r4
1000caac:	00a4      	lsls	r4, r4, #2
1000caae:	4b0e      	ldr	r3, [pc, #56]	; (1000cae8 <ble_encryption_request_handler+0x134>)
1000cab0:	191c      	adds	r4, r3, r4
1000cab2:	8920      	ldrh	r0, [r4, #8]
1000cab4:	2105      	movs	r1, #5
1000cab6:	4b1a      	ldr	r3, [pc, #104]	; (1000cb20 <ble_encryption_request_handler+0x16c>)
1000cab8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000caba:	24e2      	movs	r4, #226	; 0xe2
1000cabc:	e00d      	b.n	1000cada <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000cabe:	480b      	ldr	r0, [pc, #44]	; (1000caec <ble_encryption_request_handler+0x138>)
1000cac0:	4b0b      	ldr	r3, [pc, #44]	; (1000caf0 <ble_encryption_request_handler+0x13c>)
1000cac2:	4798      	blx	r3
1000cac4:	4817      	ldr	r0, [pc, #92]	; (1000cb24 <ble_encryption_request_handler+0x170>)
1000cac6:	4b0c      	ldr	r3, [pc, #48]	; (1000caf8 <ble_encryption_request_handler+0x144>)
1000cac8:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000caca:	2400      	movs	r4, #0
1000cacc:	e005      	b.n	1000cada <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000cace:	4807      	ldr	r0, [pc, #28]	; (1000caec <ble_encryption_request_handler+0x138>)
1000cad0:	4b07      	ldr	r3, [pc, #28]	; (1000caf0 <ble_encryption_request_handler+0x13c>)
1000cad2:	4798      	blx	r3
1000cad4:	4814      	ldr	r0, [pc, #80]	; (1000cb28 <ble_encryption_request_handler+0x174>)
1000cad6:	4b08      	ldr	r3, [pc, #32]	; (1000caf8 <ble_encryption_request_handler+0x144>)
1000cad8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000cada:	0020      	movs	r0, r4
1000cadc:	bc1c      	pop	{r2, r3, r4}
1000cade:	4691      	mov	r9, r2
1000cae0:	469a      	mov	sl, r3
1000cae2:	46a3      	mov	fp, r4
1000cae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cae6:	46c0      	nop			; (mov r8, r8)
1000cae8:	1001a1a8 	.word	0x1001a1a8
1000caec:	10016878 	.word	0x10016878
1000caf0:	10015939 	.word	0x10015939
1000caf4:	10017aa4 	.word	0x10017aa4
1000caf8:	10015819 	.word	0x10015819
1000cafc:	10017ad0 	.word	0x10017ad0
1000cb00:	10017ae4 	.word	0x10017ae4
1000cb04:	10017af8 	.word	0x10017af8
1000cb08:	10017b08 	.word	0x10017b08
1000cb0c:	100156a1 	.word	0x100156a1
1000cb10:	10017b18 	.word	0x10017b18
1000cb14:	1000fd15 	.word	0x1000fd15
1000cb18:	10017b2c 	.word	0x10017b2c
1000cb1c:	10017b64 	.word	0x10017b64
1000cb20:	1000f0b9 	.word	0x1000f0b9
1000cb24:	10017bbc 	.word	0x10017bbc
1000cb28:	10017bdc 	.word	0x10017bdc

1000cb2c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000cb2c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000cb2e:	2a00      	cmp	r2, #0
1000cb30:	d047      	beq.n	1000cbc2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000cb32:	2906      	cmp	r1, #6
1000cb34:	d847      	bhi.n	1000cbc6 <ble_mgr_events_callback_handler+0x9a>
1000cb36:	0089      	lsls	r1, r1, #2
1000cb38:	4b28      	ldr	r3, [pc, #160]	; (1000cbdc <ble_mgr_events_callback_handler+0xb0>)
1000cb3a:	585b      	ldr	r3, [r3, r1]
1000cb3c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000cb3e:	4b28      	ldr	r3, [pc, #160]	; (1000cbe0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000cb40:	2405      	movs	r4, #5
1000cb42:	e00a      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000cb44:	4b27      	ldr	r3, [pc, #156]	; (1000cbe4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000cb46:	2401      	movs	r4, #1
			}
			break;
1000cb48:	e007      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000cb4a:	4b27      	ldr	r3, [pc, #156]	; (1000cbe8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000cb4c:	2405      	movs	r4, #5
			}
			break;
1000cb4e:	e004      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000cb50:	4b26      	ldr	r3, [pc, #152]	; (1000cbec <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000cb52:	2401      	movs	r4, #1
			}
			break;
1000cb54:	e001      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000cb56:	4b26      	ldr	r3, [pc, #152]	; (1000cbf0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000cb58:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000cb5a:	2800      	cmp	r0, #0
1000cb5c:	d116      	bne.n	1000cb8c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cb5e:	6819      	ldr	r1, [r3, #0]
1000cb60:	2900      	cmp	r1, #0
1000cb62:	d10b      	bne.n	1000cb7c <ble_mgr_events_callback_handler+0x50>
1000cb64:	e006      	b.n	1000cb74 <ble_mgr_events_callback_handler+0x48>
1000cb66:	001d      	movs	r5, r3
1000cb68:	3304      	adds	r3, #4
1000cb6a:	1f18      	subs	r0, r3, #4
1000cb6c:	6800      	ldr	r0, [r0, #0]
1000cb6e:	2800      	cmp	r0, #0
1000cb70:	d106      	bne.n	1000cb80 <ble_mgr_events_callback_handler+0x54>
1000cb72:	e000      	b.n	1000cb76 <ble_mgr_events_callback_handler+0x4a>
1000cb74:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000cb76:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000cb78:	2101      	movs	r1, #1
						break;
1000cb7a:	e02c      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
1000cb7c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cb7e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cb80:	3101      	adds	r1, #1
1000cb82:	b2c9      	uxtb	r1, r1
1000cb84:	42a1      	cmp	r1, r4
1000cb86:	d3ee      	bcc.n	1000cb66 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cb88:	2100      	movs	r1, #0
1000cb8a:	e024      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
1000cb8c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000cb8e:	2801      	cmp	r0, #1
1000cb90:	d121      	bne.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cb92:	6819      	ldr	r1, [r3, #0]
1000cb94:	428a      	cmp	r2, r1
1000cb96:	d10c      	bne.n	1000cbb2 <ble_mgr_events_callback_handler+0x86>
1000cb98:	e006      	b.n	1000cba8 <ble_mgr_events_callback_handler+0x7c>
1000cb9a:	001d      	movs	r5, r3
1000cb9c:	3304      	adds	r3, #4
1000cb9e:	1f18      	subs	r0, r3, #4
1000cba0:	6800      	ldr	r0, [r0, #0]
1000cba2:	4282      	cmp	r2, r0
1000cba4:	d107      	bne.n	1000cbb6 <ble_mgr_events_callback_handler+0x8a>
1000cba6:	e000      	b.n	1000cbaa <ble_mgr_events_callback_handler+0x7e>
1000cba8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000cbaa:	2300      	movs	r3, #0
1000cbac:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000cbae:	2101      	movs	r1, #1
						break;
1000cbb0:	e011      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
1000cbb2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cbb4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cbb6:	3101      	adds	r1, #1
1000cbb8:	b2c9      	uxtb	r1, r1
1000cbba:	42a1      	cmp	r1, r4
1000cbbc:	d3ed      	bcc.n	1000cb9a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cbbe:	2100      	movs	r1, #0
1000cbc0:	e009      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000cbc2:	2100      	movs	r1, #0
1000cbc4:	e007      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000cbc6:	2100      	movs	r1, #0
1000cbc8:	e005      	b.n	1000cbd6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000cbca:	4b0a      	ldr	r3, [pc, #40]	; (1000cbf4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000cbcc:	2405      	movs	r4, #5
1000cbce:	e7c4      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000cbd0:	4b09      	ldr	r3, [pc, #36]	; (1000cbf8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000cbd2:	2401      	movs	r4, #1
1000cbd4:	e7c1      	b.n	1000cb5a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000cbd6:	0008      	movs	r0, r1
1000cbd8:	bd30      	pop	{r4, r5, pc}
1000cbda:	46c0      	nop			; (mov r8, r8)
1000cbdc:	10017490 	.word	0x10017490
1000cbe0:	1001a194 	.word	0x1001a194
1000cbe4:	1001a190 	.word	0x1001a190
1000cbe8:	1001a418 	.word	0x1001a418
1000cbec:	1001a9cc 	.word	0x1001a9cc
1000cbf0:	1001a42c 	.word	0x1001a42c
1000cbf4:	1001a440 	.word	0x1001a440
1000cbf8:	1001a488 	.word	0x1001a488

1000cbfc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cbfe:	465f      	mov	r7, fp
1000cc00:	4656      	mov	r6, sl
1000cc02:	464d      	mov	r5, r9
1000cc04:	4644      	mov	r4, r8
1000cc06:	b4f0      	push	{r4, r5, r6, r7}
1000cc08:	b091      	sub	sp, #68	; 0x44
1000cc0a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000cc0c:	2400      	movs	r4, #0
1000cc0e:	4b7e      	ldr	r3, [pc, #504]	; (1000ce08 <ble_device_init+0x20c>)
1000cc10:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cc12:	2207      	movs	r2, #7
1000cc14:	2100      	movs	r1, #0
1000cc16:	487d      	ldr	r0, [pc, #500]	; (1000ce0c <ble_device_init+0x210>)
1000cc18:	4e7d      	ldr	r6, [pc, #500]	; (1000ce10 <ble_device_init+0x214>)
1000cc1a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000cc1c:	2212      	movs	r2, #18
1000cc1e:	2100      	movs	r1, #0
1000cc20:	487c      	ldr	r0, [pc, #496]	; (1000ce14 <ble_device_init+0x218>)
1000cc22:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000cc24:	4a7c      	ldr	r2, [pc, #496]	; (1000ce18 <ble_device_init+0x21c>)
1000cc26:	2100      	movs	r1, #0
1000cc28:	487c      	ldr	r0, [pc, #496]	; (1000ce1c <ble_device_init+0x220>)
1000cc2a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000cc2c:	4b7c      	ldr	r3, [pc, #496]	; (1000ce20 <ble_device_init+0x224>)
1000cc2e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000cc30:	22cd      	movs	r2, #205	; 0xcd
1000cc32:	0092      	lsls	r2, r2, #2
1000cc34:	2100      	movs	r1, #0
1000cc36:	487b      	ldr	r0, [pc, #492]	; (1000ce24 <ble_device_init+0x228>)
1000cc38:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000cc3a:	4b7b      	ldr	r3, [pc, #492]	; (1000ce28 <ble_device_init+0x22c>)
1000cc3c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cc3e:	2283      	movs	r2, #131	; 0x83
1000cc40:	0092      	lsls	r2, r2, #2
1000cc42:	2100      	movs	r1, #0
1000cc44:	4879      	ldr	r0, [pc, #484]	; (1000ce2c <ble_device_init+0x230>)
1000cc46:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000cc48:	4b79      	ldr	r3, [pc, #484]	; (1000ce30 <ble_device_init+0x234>)
1000cc4a:	469b      	mov	fp, r3
1000cc4c:	2380      	movs	r3, #128	; 0x80
1000cc4e:	00db      	lsls	r3, r3, #3
1000cc50:	469a      	mov	sl, r3
1000cc52:	001a      	movs	r2, r3
1000cc54:	2100      	movs	r1, #0
1000cc56:	4658      	mov	r0, fp
1000cc58:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cc5a:	4b76      	ldr	r3, [pc, #472]	; (1000ce34 <ble_device_init+0x238>)
1000cc5c:	4699      	mov	r9, r3
1000cc5e:	2380      	movs	r3, #128	; 0x80
1000cc60:	015b      	lsls	r3, r3, #5
1000cc62:	4698      	mov	r8, r3
1000cc64:	001a      	movs	r2, r3
1000cc66:	2100      	movs	r1, #0
1000cc68:	4648      	mov	r0, r9
1000cc6a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cc6c:	4f72      	ldr	r7, [pc, #456]	; (1000ce38 <ble_device_init+0x23c>)
1000cc6e:	221c      	movs	r2, #28
1000cc70:	2100      	movs	r1, #0
1000cc72:	0038      	movs	r0, r7
1000cc74:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cc76:	465b      	mov	r3, fp
1000cc78:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cc7a:	4653      	mov	r3, sl
1000cc7c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cc7e:	464b      	mov	r3, r9
1000cc80:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cc82:	4643      	mov	r3, r8
1000cc84:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cc86:	4b6d      	ldr	r3, [pc, #436]	; (1000ce3c <ble_device_init+0x240>)
1000cc88:	601c      	str	r4, [r3, #0]
1000cc8a:	605c      	str	r4, [r3, #4]
1000cc8c:	609c      	str	r4, [r3, #8]
1000cc8e:	60dc      	str	r4, [r3, #12]
1000cc90:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cc92:	4b6b      	ldr	r3, [pc, #428]	; (1000ce40 <ble_device_init+0x244>)
1000cc94:	601c      	str	r4, [r3, #0]
1000cc96:	605c      	str	r4, [r3, #4]
1000cc98:	609c      	str	r4, [r3, #8]
1000cc9a:	60dc      	str	r4, [r3, #12]
1000cc9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cc9e:	4b69      	ldr	r3, [pc, #420]	; (1000ce44 <ble_device_init+0x248>)
1000cca0:	601c      	str	r4, [r3, #0]
1000cca2:	605c      	str	r4, [r3, #4]
1000cca4:	609c      	str	r4, [r3, #8]
1000cca6:	60dc      	str	r4, [r3, #12]
1000cca8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000ccaa:	4b67      	ldr	r3, [pc, #412]	; (1000ce48 <ble_device_init+0x24c>)
1000ccac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000ccae:	4b67      	ldr	r3, [pc, #412]	; (1000ce4c <ble_device_init+0x250>)
1000ccb0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000ccb2:	4b67      	ldr	r3, [pc, #412]	; (1000ce50 <ble_device_init+0x254>)
1000ccb4:	601c      	str	r4, [r3, #0]
1000ccb6:	605c      	str	r4, [r3, #4]
1000ccb8:	609c      	str	r4, [r3, #8]
1000ccba:	60dc      	str	r4, [r3, #12]
1000ccbc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000ccbe:	4b65      	ldr	r3, [pc, #404]	; (1000ce54 <ble_device_init+0x258>)
1000ccc0:	601c      	str	r4, [r3, #0]
1000ccc2:	4c65      	ldr	r4, [pc, #404]	; (1000ce58 <ble_device_init+0x25c>)
1000ccc4:	239b      	movs	r3, #155	; 0x9b
1000ccc6:	009b      	lsls	r3, r3, #2
1000ccc8:	4698      	mov	r8, r3
1000ccca:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cccc:	4f50      	ldr	r7, [pc, #320]	; (1000ce10 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000ccce:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000ccd0:	227c      	movs	r2, #124	; 0x7c
1000ccd2:	2100      	movs	r1, #0
1000ccd4:	0020      	movs	r0, r4
1000ccd6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ccd8:	0023      	movs	r3, r4
1000ccda:	335e      	adds	r3, #94	; 0x5e
1000ccdc:	2200      	movs	r2, #0
1000ccde:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cce0:	7626      	strb	r6, [r4, #24]
1000cce2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cce4:	45a0      	cmp	r8, r4
1000cce6:	d1f3      	bne.n	1000ccd0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cce8:	4b5c      	ldr	r3, [pc, #368]	; (1000ce5c <ble_device_init+0x260>)
1000ccea:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000ccec:	4c52      	ldr	r4, [pc, #328]	; (1000ce38 <ble_device_init+0x23c>)
1000ccee:	4b4a      	ldr	r3, [pc, #296]	; (1000ce18 <ble_device_init+0x21c>)
1000ccf0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000ccf2:	4b4a      	ldr	r3, [pc, #296]	; (1000ce1c <ble_device_init+0x220>)
1000ccf4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000ccf6:	485a      	ldr	r0, [pc, #360]	; (1000ce60 <ble_device_init+0x264>)
1000ccf8:	4b5a      	ldr	r3, [pc, #360]	; (1000ce64 <ble_device_init+0x268>)
1000ccfa:	4798      	blx	r3
1000ccfc:	485a      	ldr	r0, [pc, #360]	; (1000ce68 <ble_device_init+0x26c>)
1000ccfe:	4b5b      	ldr	r3, [pc, #364]	; (1000ce6c <ble_device_init+0x270>)
1000cd00:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000cd02:	0020      	movs	r0, r4
1000cd04:	4b5a      	ldr	r3, [pc, #360]	; (1000ce70 <ble_device_init+0x274>)
1000cd06:	4798      	blx	r3
1000cd08:	2800      	cmp	r0, #0
1000cd0a:	d00b      	beq.n	1000cd24 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000cd0c:	4e54      	ldr	r6, [pc, #336]	; (1000ce60 <ble_device_init+0x264>)
1000cd0e:	0030      	movs	r0, r6
1000cd10:	4d54      	ldr	r5, [pc, #336]	; (1000ce64 <ble_device_init+0x268>)
1000cd12:	47a8      	blx	r5
1000cd14:	4857      	ldr	r0, [pc, #348]	; (1000ce74 <ble_device_init+0x278>)
1000cd16:	4c55      	ldr	r4, [pc, #340]	; (1000ce6c <ble_device_init+0x270>)
1000cd18:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000cd1a:	0030      	movs	r0, r6
1000cd1c:	47a8      	blx	r5
1000cd1e:	4856      	ldr	r0, [pc, #344]	; (1000ce78 <ble_device_init+0x27c>)
1000cd20:	47a0      	blx	r4
1000cd22:	e7fe      	b.n	1000cd22 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000cd24:	4a55      	ldr	r2, [pc, #340]	; (1000ce7c <ble_device_init+0x280>)
1000cd26:	2100      	movs	r1, #0
1000cd28:	2000      	movs	r0, #0
1000cd2a:	4c55      	ldr	r4, [pc, #340]	; (1000ce80 <ble_device_init+0x284>)
1000cd2c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000cd2e:	4a55      	ldr	r2, [pc, #340]	; (1000ce84 <ble_device_init+0x288>)
1000cd30:	2102      	movs	r1, #2
1000cd32:	2000      	movs	r0, #0
1000cd34:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000cd36:	2109      	movs	r1, #9
1000cd38:	4853      	ldr	r0, [pc, #332]	; (1000ce88 <ble_device_init+0x28c>)
1000cd3a:	4b54      	ldr	r3, [pc, #336]	; (1000ce8c <ble_device_init+0x290>)
1000cd3c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000cd3e:	2800      	cmp	r0, #0
1000cd40:	d005      	beq.n	1000cd4e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000cd42:	4847      	ldr	r0, [pc, #284]	; (1000ce60 <ble_device_init+0x264>)
1000cd44:	4b47      	ldr	r3, [pc, #284]	; (1000ce64 <ble_device_init+0x268>)
1000cd46:	4798      	blx	r3
1000cd48:	4851      	ldr	r0, [pc, #324]	; (1000ce90 <ble_device_init+0x294>)
1000cd4a:	4b48      	ldr	r3, [pc, #288]	; (1000ce6c <ble_device_init+0x270>)
1000cd4c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000cd4e:	2207      	movs	r2, #7
1000cd50:	4950      	ldr	r1, [pc, #320]	; (1000ce94 <ble_device_init+0x298>)
1000cd52:	3108      	adds	r1, #8
1000cd54:	a804      	add	r0, sp, #16
1000cd56:	4b50      	ldr	r3, [pc, #320]	; (1000ce98 <ble_device_init+0x29c>)
1000cd58:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000cd5a:	2226      	movs	r2, #38	; 0x26
1000cd5c:	2100      	movs	r1, #0
1000cd5e:	a806      	add	r0, sp, #24
1000cd60:	4b2b      	ldr	r3, [pc, #172]	; (1000ce10 <ble_device_init+0x214>)
1000cd62:	4798      	blx	r3
	
	if (addr == NULL)
1000cd64:	2d00      	cmp	r5, #0
1000cd66:	d10c      	bne.n	1000cd82 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cd68:	a804      	add	r0, sp, #16
1000cd6a:	4b4c      	ldr	r3, [pc, #304]	; (1000ce9c <ble_device_init+0x2a0>)
1000cd6c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cd6e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cd70:	2800      	cmp	r0, #0
1000cd72:	d006      	beq.n	1000cd82 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000cd74:	483a      	ldr	r0, [pc, #232]	; (1000ce60 <ble_device_init+0x264>)
1000cd76:	4b3b      	ldr	r3, [pc, #236]	; (1000ce64 <ble_device_init+0x268>)
1000cd78:	4798      	blx	r3
1000cd7a:	4849      	ldr	r0, [pc, #292]	; (1000cea0 <ble_device_init+0x2a4>)
1000cd7c:	4b3b      	ldr	r3, [pc, #236]	; (1000ce6c <ble_device_init+0x270>)
1000cd7e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cd80:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000cd82:	4837      	ldr	r0, [pc, #220]	; (1000ce60 <ble_device_init+0x264>)
1000cd84:	4b37      	ldr	r3, [pc, #220]	; (1000ce64 <ble_device_init+0x268>)
1000cd86:	4798      	blx	r3
1000cd88:	792b      	ldrb	r3, [r5, #4]
1000cd8a:	796a      	ldrb	r2, [r5, #5]
1000cd8c:	79a9      	ldrb	r1, [r5, #6]
1000cd8e:	7828      	ldrb	r0, [r5, #0]
1000cd90:	9003      	str	r0, [sp, #12]
1000cd92:	7868      	ldrb	r0, [r5, #1]
1000cd94:	9002      	str	r0, [sp, #8]
1000cd96:	78a8      	ldrb	r0, [r5, #2]
1000cd98:	9001      	str	r0, [sp, #4]
1000cd9a:	78e8      	ldrb	r0, [r5, #3]
1000cd9c:	9000      	str	r0, [sp, #0]
1000cd9e:	4841      	ldr	r0, [pc, #260]	; (1000cea4 <ble_device_init+0x2a8>)
1000cda0:	4c32      	ldr	r4, [pc, #200]	; (1000ce6c <ble_device_init+0x270>)
1000cda2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000cda4:	ac06      	add	r4, sp, #24
1000cda6:	230a      	movs	r3, #10
1000cda8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000cdaa:	4b3f      	ldr	r3, [pc, #252]	; (1000cea8 <ble_device_init+0x2ac>)
1000cdac:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000cdae:	2207      	movs	r2, #7
1000cdb0:	0029      	movs	r1, r5
1000cdb2:	a807      	add	r0, sp, #28
1000cdb4:	4b38      	ldr	r3, [pc, #224]	; (1000ce98 <ble_device_init+0x29c>)
1000cdb6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000cdb8:	2300      	movs	r3, #0
1000cdba:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000cdbc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000cdbe:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000cdc0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000cdc2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000cdc4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000cdc6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000cdc8:	2380      	movs	r3, #128	; 0x80
1000cdca:	009b      	lsls	r3, r3, #2
1000cdcc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000cdce:	0020      	movs	r0, r4
1000cdd0:	4b36      	ldr	r3, [pc, #216]	; (1000ceac <ble_device_init+0x2b0>)
1000cdd2:	4798      	blx	r3
1000cdd4:	2800      	cmp	r0, #0
1000cdd6:	d005      	beq.n	1000cde4 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000cdd8:	4821      	ldr	r0, [pc, #132]	; (1000ce60 <ble_device_init+0x264>)
1000cdda:	4b22      	ldr	r3, [pc, #136]	; (1000ce64 <ble_device_init+0x268>)
1000cddc:	4798      	blx	r3
1000cdde:	4834      	ldr	r0, [pc, #208]	; (1000ceb0 <ble_device_init+0x2b4>)
1000cde0:	4b22      	ldr	r3, [pc, #136]	; (1000ce6c <ble_device_init+0x270>)
1000cde2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000cde4:	0028      	movs	r0, r5
1000cde6:	4b33      	ldr	r3, [pc, #204]	; (1000ceb4 <ble_device_init+0x2b8>)
1000cde8:	4798      	blx	r3
1000cdea:	2800      	cmp	r0, #0
1000cdec:	d005      	beq.n	1000cdfa <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000cdee:	481c      	ldr	r0, [pc, #112]	; (1000ce60 <ble_device_init+0x264>)
1000cdf0:	4b1c      	ldr	r3, [pc, #112]	; (1000ce64 <ble_device_init+0x268>)
1000cdf2:	4798      	blx	r3
1000cdf4:	4830      	ldr	r0, [pc, #192]	; (1000ceb8 <ble_device_init+0x2bc>)
1000cdf6:	4b1d      	ldr	r3, [pc, #116]	; (1000ce6c <ble_device_init+0x270>)
1000cdf8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000cdfa:	b011      	add	sp, #68	; 0x44
1000cdfc:	bc3c      	pop	{r2, r3, r4, r5}
1000cdfe:	4690      	mov	r8, r2
1000ce00:	4699      	mov	r9, r3
1000ce02:	46a2      	mov	sl, r4
1000ce04:	46ab      	mov	fp, r5
1000ce06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce08:	10018cb0 	.word	0x10018cb0
1000ce0c:	10018cb8 	.word	0x10018cb8
1000ce10:	100156d1 	.word	0x100156d1
1000ce14:	1001a454 	.word	0x1001a454
1000ce18:	000004e2 	.word	0x000004e2
1000ce1c:	100187d0 	.word	0x100187d0
1000ce20:	10018cb4 	.word	0x10018cb4
1000ce24:	1001a48c 	.word	0x1001a48c
1000ce28:	1001a484 	.word	0x1001a484
1000ce2c:	1001a7c0 	.word	0x1001a7c0
1000ce30:	100183d0 	.word	0x100183d0
1000ce34:	10018cc0 	.word	0x10018cc0
1000ce38:	1001a468 	.word	0x1001a468
1000ce3c:	1001a42c 	.word	0x1001a42c
1000ce40:	1001a440 	.word	0x1001a440
1000ce44:	1001a194 	.word	0x1001a194
1000ce48:	1001a488 	.word	0x1001a488
1000ce4c:	1001a190 	.word	0x1001a190
1000ce50:	1001a418 	.word	0x1001a418
1000ce54:	1001a9cc 	.word	0x1001a9cc
1000ce58:	1001a1a8 	.word	0x1001a1a8
1000ce5c:	1001a414 	.word	0x1001a414
1000ce60:	10016878 	.word	0x10016878
1000ce64:	10015939 	.word	0x10015939
1000ce68:	10017bf8 	.word	0x10017bf8
1000ce6c:	10015819 	.word	0x10015819
1000ce70:	1000ecc5 	.word	0x1000ecc5
1000ce74:	10017c1c 	.word	0x10017c1c
1000ce78:	10017c48 	.word	0x10017c48
1000ce7c:	10017ff4 	.word	0x10017ff4
1000ce80:	1000cb2d 	.word	0x1000cb2d
1000ce84:	100175ac 	.word	0x100175ac
1000ce88:	10017c90 	.word	0x10017c90
1000ce8c:	1000ebdd 	.word	0x1000ebdd
1000ce90:	10017c9c 	.word	0x10017c9c
1000ce94:	1001759c 	.word	0x1001759c
1000ce98:	100156bf 	.word	0x100156bf
1000ce9c:	1000ec11 	.word	0x1000ec11
1000cea0:	10017cb4 	.word	0x10017cb4
1000cea4:	10017ce0 	.word	0x10017ce0
1000cea8:	00003a98 	.word	0x00003a98
1000ceac:	1000ec35 	.word	0x1000ec35
1000ceb0:	10017d30 	.word	0x10017d30
1000ceb4:	1000ee79 	.word	0x1000ee79
1000ceb8:	10017d6c 	.word	0x10017d6c

1000cebc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cebc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cebe:	2200      	movs	r2, #0
1000cec0:	2100      	movs	r1, #0
1000cec2:	4b0a      	ldr	r3, [pc, #40]	; (1000ceec <ble_send_slave_sec_request+0x30>)
1000cec4:	4798      	blx	r3
1000cec6:	1e04      	subs	r4, r0, #0
1000cec8:	d106      	bne.n	1000ced8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000ceca:	4809      	ldr	r0, [pc, #36]	; (1000cef0 <ble_send_slave_sec_request+0x34>)
1000cecc:	4b09      	ldr	r3, [pc, #36]	; (1000cef4 <ble_send_slave_sec_request+0x38>)
1000cece:	4798      	blx	r3
1000ced0:	4809      	ldr	r0, [pc, #36]	; (1000cef8 <ble_send_slave_sec_request+0x3c>)
1000ced2:	4b0a      	ldr	r3, [pc, #40]	; (1000cefc <ble_send_slave_sec_request+0x40>)
1000ced4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000ced6:	e006      	b.n	1000cee6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000ced8:	4805      	ldr	r0, [pc, #20]	; (1000cef0 <ble_send_slave_sec_request+0x34>)
1000ceda:	4b06      	ldr	r3, [pc, #24]	; (1000cef4 <ble_send_slave_sec_request+0x38>)
1000cedc:	4798      	blx	r3
1000cede:	4808      	ldr	r0, [pc, #32]	; (1000cf00 <ble_send_slave_sec_request+0x44>)
1000cee0:	4b06      	ldr	r3, [pc, #24]	; (1000cefc <ble_send_slave_sec_request+0x40>)
1000cee2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cee4:	24e2      	movs	r4, #226	; 0xe2
}
1000cee6:	0020      	movs	r0, r4
1000cee8:	bd10      	pop	{r4, pc}
1000ceea:	46c0      	nop			; (mov r8, r8)
1000ceec:	1000fc5d 	.word	0x1000fc5d
1000cef0:	10016878 	.word	0x10016878
1000cef4:	10015939 	.word	0x10015939
1000cef8:	10017dbc 	.word	0x10017dbc
1000cefc:	10015819 	.word	0x10015819
1000cf00:	10017de0 	.word	0x10017de0

1000cf04 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cf04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf06:	465f      	mov	r7, fp
1000cf08:	464e      	mov	r6, r9
1000cf0a:	4645      	mov	r5, r8
1000cf0c:	b4e0      	push	{r5, r6, r7}
1000cf0e:	b09a      	sub	sp, #104	; 0x68
1000cf10:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000cf12:	7a86      	ldrb	r6, [r0, #10]
1000cf14:	2e00      	cmp	r6, #0
1000cf16:	d000      	beq.n	1000cf1a <ble_connected_state_handler+0x16>
1000cf18:	e0cc      	b.n	1000d0b4 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000cf1a:	4878      	ldr	r0, [pc, #480]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000cf1c:	4f78      	ldr	r7, [pc, #480]	; (1000d100 <ble_connected_state_handler+0x1fc>)
1000cf1e:	47b8      	blx	r7
1000cf20:	792b      	ldrb	r3, [r5, #4]
1000cf22:	796a      	ldrb	r2, [r5, #5]
1000cf24:	79a9      	ldrb	r1, [r5, #6]
1000cf26:	7868      	ldrb	r0, [r5, #1]
1000cf28:	9002      	str	r0, [sp, #8]
1000cf2a:	78a8      	ldrb	r0, [r5, #2]
1000cf2c:	9001      	str	r0, [sp, #4]
1000cf2e:	78e8      	ldrb	r0, [r5, #3]
1000cf30:	9000      	str	r0, [sp, #0]
1000cf32:	4874      	ldr	r0, [pc, #464]	; (1000d104 <ble_connected_state_handler+0x200>)
1000cf34:	4c74      	ldr	r4, [pc, #464]	; (1000d108 <ble_connected_state_handler+0x204>)
1000cf36:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000cf38:	4870      	ldr	r0, [pc, #448]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000cf3a:	47b8      	blx	r7
1000cf3c:	8929      	ldrh	r1, [r5, #8]
1000cf3e:	4873      	ldr	r0, [pc, #460]	; (1000d10c <ble_connected_state_handler+0x208>)
1000cf40:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000cf42:	2212      	movs	r2, #18
1000cf44:	0029      	movs	r1, r5
1000cf46:	4872      	ldr	r0, [pc, #456]	; (1000d110 <ble_connected_state_handler+0x20c>)
1000cf48:	4b72      	ldr	r3, [pc, #456]	; (1000d114 <ble_connected_state_handler+0x210>)
1000cf4a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cf4c:	9504      	str	r5, [sp, #16]
1000cf4e:	2207      	movs	r2, #7
1000cf50:	0029      	movs	r1, r5
1000cf52:	4871      	ldr	r0, [pc, #452]	; (1000d118 <ble_connected_state_handler+0x214>)
1000cf54:	4b71      	ldr	r3, [pc, #452]	; (1000d11c <ble_connected_state_handler+0x218>)
1000cf56:	4798      	blx	r3
1000cf58:	2800      	cmp	r0, #0
1000cf5a:	d100      	bne.n	1000cf5e <ble_connected_state_handler+0x5a>
1000cf5c:	e0b3      	b.n	1000d0c6 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000cf5e:	782b      	ldrb	r3, [r5, #0]
1000cf60:	2b02      	cmp	r3, #2
1000cf62:	d000      	beq.n	1000cf66 <ble_connected_state_handler+0x62>
1000cf64:	e0af      	b.n	1000d0c6 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000cf66:	2250      	movs	r2, #80	; 0x50
1000cf68:	2100      	movs	r1, #0
1000cf6a:	a806      	add	r0, sp, #24
1000cf6c:	4b6c      	ldr	r3, [pc, #432]	; (1000d120 <ble_connected_state_handler+0x21c>)
1000cf6e:	4798      	blx	r3
1000cf70:	4f6c      	ldr	r7, [pc, #432]	; (1000d124 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000cf72:	2300      	movs	r3, #0
1000cf74:	e00b      	b.n	1000cf8e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000cf76:	1c59      	adds	r1, r3, #1
1000cf78:	7814      	ldrb	r4, [r2, #0]
1000cf7a:	a806      	add	r0, sp, #24
1000cf7c:	54c4      	strb	r4, [r0, r3]
1000cf7e:	3201      	adds	r2, #1
1000cf80:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000cf82:	42b3      	cmp	r3, r6
1000cf84:	d1f7      	bne.n	1000cf76 <ble_connected_state_handler+0x72>
1000cf86:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000cf88:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000cf8a:	2b50      	cmp	r3, #80	; 0x50
1000cf8c:	d004      	beq.n	1000cf98 <ble_connected_state_handler+0x94>
1000cf8e:	001e      	movs	r6, r3
1000cf90:	3610      	adds	r6, #16
1000cf92:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cf94:	003a      	movs	r2, r7
1000cf96:	e7ee      	b.n	1000cf76 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000cf98:	aa06      	add	r2, sp, #24
1000cf9a:	0029      	movs	r1, r5
1000cf9c:	2005      	movs	r0, #5
1000cf9e:	4b62      	ldr	r3, [pc, #392]	; (1000d128 <ble_connected_state_handler+0x224>)
1000cfa0:	4798      	blx	r3
1000cfa2:	1e06      	subs	r6, r0, #0
1000cfa4:	d106      	bne.n	1000cfb4 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000cfa6:	4855      	ldr	r0, [pc, #340]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000cfa8:	4b55      	ldr	r3, [pc, #340]	; (1000d100 <ble_connected_state_handler+0x1fc>)
1000cfaa:	4798      	blx	r3
1000cfac:	485f      	ldr	r0, [pc, #380]	; (1000d12c <ble_connected_state_handler+0x228>)
1000cfae:	4b56      	ldr	r3, [pc, #344]	; (1000d108 <ble_connected_state_handler+0x204>)
1000cfb0:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000cfb2:	e09c      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000cfb4:	4851      	ldr	r0, [pc, #324]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000cfb6:	4b52      	ldr	r3, [pc, #328]	; (1000d100 <ble_connected_state_handler+0x1fc>)
1000cfb8:	4798      	blx	r3
1000cfba:	485d      	ldr	r0, [pc, #372]	; (1000d130 <ble_connected_state_handler+0x22c>)
1000cfbc:	4b52      	ldr	r3, [pc, #328]	; (1000d108 <ble_connected_state_handler+0x204>)
1000cfbe:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000cfc0:	26e2      	movs	r6, #226	; 0xe2
1000cfc2:	e094      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
1000cfc4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cfc6:	9405      	str	r4, [sp, #20]
1000cfc8:	2207      	movs	r2, #7
1000cfca:	9904      	ldr	r1, [sp, #16]
1000cfcc:	4648      	mov	r0, r9
1000cfce:	47d8      	blx	fp
1000cfd0:	2800      	cmp	r0, #0
1000cfd2:	d109      	bne.n	1000cfe8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cfd4:	9a05      	ldr	r2, [sp, #20]
1000cfd6:	0153      	lsls	r3, r2, #5
1000cfd8:	1a9b      	subs	r3, r3, r2
1000cfda:	009a      	lsls	r2, r3, #2
1000cfdc:	4b55      	ldr	r3, [pc, #340]	; (1000d134 <ble_connected_state_handler+0x230>)
1000cfde:	189b      	adds	r3, r3, r2
1000cfe0:	335e      	adds	r3, #94	; 0x5e
1000cfe2:	2202      	movs	r2, #2
1000cfe4:	701a      	strb	r2, [r3, #0]
1000cfe6:	e02b      	b.n	1000d040 <ble_connected_state_handler+0x13c>
1000cfe8:	3401      	adds	r4, #1
1000cfea:	237c      	movs	r3, #124	; 0x7c
1000cfec:	469c      	mov	ip, r3
1000cfee:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cff0:	2c05      	cmp	r4, #5
1000cff2:	d1e7      	bne.n	1000cfc4 <ble_connected_state_handler+0xc0>
1000cff4:	e072      	b.n	1000d0dc <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cff6:	001c      	movs	r4, r3
1000cff8:	7811      	ldrb	r1, [r2, #0]
1000cffa:	2900      	cmp	r1, #0
1000cffc:	d11a      	bne.n	1000d034 <ble_connected_state_handler+0x130>
1000cffe:	e001      	b.n	1000d004 <ble_connected_state_handler+0x100>
1000d000:	2400      	movs	r4, #0
1000d002:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d004:	0163      	lsls	r3, r4, #5
1000d006:	4699      	mov	r9, r3
1000d008:	1b18      	subs	r0, r3, r4
1000d00a:	0080      	lsls	r0, r0, #2
1000d00c:	4b49      	ldr	r3, [pc, #292]	; (1000d134 <ble_connected_state_handler+0x230>)
1000d00e:	4698      	mov	r8, r3
1000d010:	4440      	add	r0, r8
1000d012:	2212      	movs	r2, #18
1000d014:	0029      	movs	r1, r5
1000d016:	4b3f      	ldr	r3, [pc, #252]	; (1000d114 <ble_connected_state_handler+0x210>)
1000d018:	4798      	blx	r3
						ble_device_count++;
1000d01a:	4a47      	ldr	r2, [pc, #284]	; (1000d138 <ble_connected_state_handler+0x234>)
1000d01c:	7813      	ldrb	r3, [r2, #0]
1000d01e:	3301      	adds	r3, #1
1000d020:	b2db      	uxtb	r3, r3
1000d022:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d024:	464b      	mov	r3, r9
1000d026:	1b1b      	subs	r3, r3, r4
1000d028:	009b      	lsls	r3, r3, #2
1000d02a:	4443      	add	r3, r8
1000d02c:	335e      	adds	r3, #94	; 0x5e
1000d02e:	2202      	movs	r2, #2
1000d030:	701a      	strb	r2, [r3, #0]
						break;
1000d032:	e005      	b.n	1000d040 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d034:	1c79      	adds	r1, r7, #1
1000d036:	b2cf      	uxtb	r7, r1
1000d038:	3301      	adds	r3, #1
1000d03a:	327c      	adds	r2, #124	; 0x7c
1000d03c:	2f05      	cmp	r7, #5
1000d03e:	d1da      	bne.n	1000cff6 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d040:	2207      	movs	r2, #7
1000d042:	0029      	movs	r1, r5
1000d044:	4834      	ldr	r0, [pc, #208]	; (1000d118 <ble_connected_state_handler+0x214>)
1000d046:	4b35      	ldr	r3, [pc, #212]	; (1000d11c <ble_connected_state_handler+0x218>)
1000d048:	4798      	blx	r3
1000d04a:	2800      	cmp	r0, #0
1000d04c:	d10c      	bne.n	1000d068 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d04e:	017b      	lsls	r3, r7, #5
1000d050:	1bdb      	subs	r3, r3, r7
1000d052:	009b      	lsls	r3, r3, #2
1000d054:	4a37      	ldr	r2, [pc, #220]	; (1000d134 <ble_connected_state_handler+0x230>)
1000d056:	18d3      	adds	r3, r2, r3
1000d058:	2205      	movs	r2, #5
1000d05a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d05c:	3202      	adds	r2, #2
1000d05e:	2100      	movs	r1, #0
1000d060:	482d      	ldr	r0, [pc, #180]	; (1000d118 <ble_connected_state_handler+0x214>)
1000d062:	4b2f      	ldr	r3, [pc, #188]	; (1000d120 <ble_connected_state_handler+0x21c>)
1000d064:	4798      	blx	r3
1000d066:	e042      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d068:	4b32      	ldr	r3, [pc, #200]	; (1000d134 <ble_connected_state_handler+0x230>)
1000d06a:	4698      	mov	r8, r3
1000d06c:	017c      	lsls	r4, r7, #5
1000d06e:	1be3      	subs	r3, r4, r7
1000d070:	009b      	lsls	r3, r3, #2
1000d072:	4443      	add	r3, r8
1000d074:	220a      	movs	r2, #10
1000d076:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d078:	3a03      	subs	r2, #3
1000d07a:	2100      	movs	r1, #0
1000d07c:	4826      	ldr	r0, [pc, #152]	; (1000d118 <ble_connected_state_handler+0x214>)
1000d07e:	4b28      	ldr	r3, [pc, #160]	; (1000d120 <ble_connected_state_handler+0x21c>)
1000d080:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d082:	1be4      	subs	r4, r4, r7
1000d084:	00a4      	lsls	r4, r4, #2
1000d086:	4444      	add	r4, r8
1000d088:	7ca3      	ldrb	r3, [r4, #18]
1000d08a:	2b0a      	cmp	r3, #10
1000d08c:	d12f      	bne.n	1000d0ee <ble_connected_state_handler+0x1ea>
1000d08e:	e00d      	b.n	1000d0ac <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d090:	481a      	ldr	r0, [pc, #104]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000d092:	4b1b      	ldr	r3, [pc, #108]	; (1000d100 <ble_connected_state_handler+0x1fc>)
1000d094:	4798      	blx	r3
1000d096:	4b28      	ldr	r3, [pc, #160]	; (1000d138 <ble_connected_state_handler+0x234>)
1000d098:	7819      	ldrb	r1, [r3, #0]
1000d09a:	b2c9      	uxtb	r1, r1
1000d09c:	4827      	ldr	r0, [pc, #156]	; (1000d13c <ble_connected_state_handler+0x238>)
1000d09e:	4b1a      	ldr	r3, [pc, #104]	; (1000d108 <ble_connected_state_handler+0x204>)
1000d0a0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d0a2:	8928      	ldrh	r0, [r5, #8]
1000d0a4:	2113      	movs	r1, #19
1000d0a6:	4b26      	ldr	r3, [pc, #152]	; (1000d140 <ble_connected_state_handler+0x23c>)
1000d0a8:	4798      	blx	r3
1000d0aa:	e020      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d0ac:	8928      	ldrh	r0, [r5, #8]
1000d0ae:	4b25      	ldr	r3, [pc, #148]	; (1000d144 <ble_connected_state_handler+0x240>)
1000d0b0:	4798      	blx	r3
1000d0b2:	e01c      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d0b4:	4811      	ldr	r0, [pc, #68]	; (1000d0fc <ble_connected_state_handler+0x1f8>)
1000d0b6:	4b12      	ldr	r3, [pc, #72]	; (1000d100 <ble_connected_state_handler+0x1fc>)
1000d0b8:	4798      	blx	r3
1000d0ba:	7aa9      	ldrb	r1, [r5, #10]
1000d0bc:	4822      	ldr	r0, [pc, #136]	; (1000d148 <ble_connected_state_handler+0x244>)
1000d0be:	4b12      	ldr	r3, [pc, #72]	; (1000d108 <ble_connected_state_handler+0x204>)
1000d0c0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d0c2:	2600      	movs	r6, #0
1000d0c4:	e013      	b.n	1000d0ee <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d0c6:	4b1c      	ldr	r3, [pc, #112]	; (1000d138 <ble_connected_state_handler+0x234>)
1000d0c8:	781b      	ldrb	r3, [r3, #0]
1000d0ca:	b2db      	uxtb	r3, r3
1000d0cc:	2b04      	cmp	r3, #4
1000d0ce:	d8df      	bhi.n	1000d090 <ble_connected_state_handler+0x18c>
1000d0d0:	4b18      	ldr	r3, [pc, #96]	; (1000d134 <ble_connected_state_handler+0x230>)
1000d0d2:	4699      	mov	r9, r3
1000d0d4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d0d6:	4b11      	ldr	r3, [pc, #68]	; (1000d11c <ble_connected_state_handler+0x218>)
1000d0d8:	469b      	mov	fp, r3
1000d0da:	e773      	b.n	1000cfc4 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d0dc:	235e      	movs	r3, #94	; 0x5e
1000d0de:	4a15      	ldr	r2, [pc, #84]	; (1000d134 <ble_connected_state_handler+0x230>)
1000d0e0:	5cd3      	ldrb	r3, [r2, r3]
1000d0e2:	2b00      	cmp	r3, #0
1000d0e4:	d08c      	beq.n	1000d000 <ble_connected_state_handler+0xfc>
1000d0e6:	4a19      	ldr	r2, [pc, #100]	; (1000d14c <ble_connected_state_handler+0x248>)
1000d0e8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0ea:	2701      	movs	r7, #1
1000d0ec:	e783      	b.n	1000cff6 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d0ee:	0030      	movs	r0, r6
1000d0f0:	b01a      	add	sp, #104	; 0x68
1000d0f2:	bc1c      	pop	{r2, r3, r4}
1000d0f4:	4690      	mov	r8, r2
1000d0f6:	4699      	mov	r9, r3
1000d0f8:	46a3      	mov	fp, r4
1000d0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0fc:	10016878 	.word	0x10016878
1000d100:	10015939 	.word	0x10015939
1000d104:	10017e00 	.word	0x10017e00
1000d108:	10015819 	.word	0x10015819
1000d10c:	10017e44 	.word	0x10017e44
1000d110:	1001a454 	.word	0x1001a454
1000d114:	100156bf 	.word	0x100156bf
1000d118:	10018cb8 	.word	0x10018cb8
1000d11c:	100156a1 	.word	0x100156a1
1000d120:	100156d1 	.word	0x100156d1
1000d124:	1001a1ee 	.word	0x1001a1ee
1000d128:	1000f0e5 	.word	0x1000f0e5
1000d12c:	10017e5c 	.word	0x10017e5c
1000d130:	10017e80 	.word	0x10017e80
1000d134:	1001a1a8 	.word	0x1001a1a8
1000d138:	1001a414 	.word	0x1001a414
1000d13c:	10017ea4 	.word	0x10017ea4
1000d140:	1000f0b9 	.word	0x1000f0b9
1000d144:	1000cebd 	.word	0x1000cebd
1000d148:	10017ee0 	.word	0x10017ee0
1000d14c:	1001a282 	.word	0x1001a282

1000d150 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d150:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d152:	4647      	mov	r7, r8
1000d154:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d156:	7803      	ldrb	r3, [r0, #0]
1000d158:	2b00      	cmp	r3, #0
1000d15a:	d152      	bne.n	1000d202 <ble_resolv_rand_addr_handler+0xb2>
1000d15c:	4d3e      	ldr	r5, [pc, #248]	; (1000d258 <ble_resolv_rand_addr_handler+0x108>)
1000d15e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d160:	1c46      	adds	r6, r0, #1
1000d162:	4f3e      	ldr	r7, [pc, #248]	; (1000d25c <ble_resolv_rand_addr_handler+0x10c>)
1000d164:	2210      	movs	r2, #16
1000d166:	0029      	movs	r1, r5
1000d168:	0030      	movs	r0, r6
1000d16a:	47b8      	blx	r7
1000d16c:	2800      	cmp	r0, #0
1000d16e:	d031      	beq.n	1000d1d4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d170:	3401      	adds	r4, #1
1000d172:	b2e4      	uxtb	r4, r4
1000d174:	357c      	adds	r5, #124	; 0x7c
1000d176:	2c05      	cmp	r4, #5
1000d178:	d1f4      	bne.n	1000d164 <ble_resolv_rand_addr_handler+0x14>
1000d17a:	e042      	b.n	1000d202 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d17c:	001d      	movs	r5, r3
1000d17e:	7811      	ldrb	r1, [r2, #0]
1000d180:	2900      	cmp	r1, #0
1000d182:	d11b      	bne.n	1000d1bc <ble_resolv_rand_addr_handler+0x6c>
1000d184:	e001      	b.n	1000d18a <ble_resolv_rand_addr_handler+0x3a>
1000d186:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d188:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d18a:	4b35      	ldr	r3, [pc, #212]	; (1000d260 <ble_resolv_rand_addr_handler+0x110>)
1000d18c:	4698      	mov	r8, r3
1000d18e:	016e      	lsls	r6, r5, #5
1000d190:	1b77      	subs	r7, r6, r5
1000d192:	00bf      	lsls	r7, r7, #2
1000d194:	4447      	add	r7, r8
1000d196:	2212      	movs	r2, #18
1000d198:	4932      	ldr	r1, [pc, #200]	; (1000d264 <ble_resolv_rand_addr_handler+0x114>)
1000d19a:	0038      	movs	r0, r7
1000d19c:	4b32      	ldr	r3, [pc, #200]	; (1000d268 <ble_resolv_rand_addr_handler+0x118>)
1000d19e:	4798      	blx	r3
				ble_device_count++;
1000d1a0:	4a32      	ldr	r2, [pc, #200]	; (1000d26c <ble_resolv_rand_addr_handler+0x11c>)
1000d1a2:	7813      	ldrb	r3, [r2, #0]
1000d1a4:	3301      	adds	r3, #1
1000d1a6:	b2db      	uxtb	r3, r3
1000d1a8:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d1aa:	375e      	adds	r7, #94	; 0x5e
1000d1ac:	2302      	movs	r3, #2
1000d1ae:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d1b0:	1b75      	subs	r5, r6, r5
1000d1b2:	00ad      	lsls	r5, r5, #2
1000d1b4:	4445      	add	r5, r8
1000d1b6:	3308      	adds	r3, #8
1000d1b8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d1ba:	e031      	b.n	1000d220 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1bc:	3401      	adds	r4, #1
1000d1be:	b2e4      	uxtb	r4, r4
1000d1c0:	3301      	adds	r3, #1
1000d1c2:	327c      	adds	r2, #124	; 0x7c
1000d1c4:	2c05      	cmp	r4, #5
1000d1c6:	d1d9      	bne.n	1000d17c <ble_resolv_rand_addr_handler+0x2c>
1000d1c8:	e03a      	b.n	1000d240 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d1ca:	4b26      	ldr	r3, [pc, #152]	; (1000d264 <ble_resolv_rand_addr_handler+0x114>)
1000d1cc:	8918      	ldrh	r0, [r3, #8]
1000d1ce:	4b28      	ldr	r3, [pc, #160]	; (1000d270 <ble_resolv_rand_addr_handler+0x120>)
1000d1d0:	4798      	blx	r3
1000d1d2:	e03c      	b.n	1000d24e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d1d4:	4827      	ldr	r0, [pc, #156]	; (1000d274 <ble_resolv_rand_addr_handler+0x124>)
1000d1d6:	4b28      	ldr	r3, [pc, #160]	; (1000d278 <ble_resolv_rand_addr_handler+0x128>)
1000d1d8:	4798      	blx	r3
1000d1da:	4828      	ldr	r0, [pc, #160]	; (1000d27c <ble_resolv_rand_addr_handler+0x12c>)
1000d1dc:	4b28      	ldr	r3, [pc, #160]	; (1000d280 <ble_resolv_rand_addr_handler+0x130>)
1000d1de:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d1e0:	481f      	ldr	r0, [pc, #124]	; (1000d260 <ble_resolv_rand_addr_handler+0x110>)
1000d1e2:	0163      	lsls	r3, r4, #5
1000d1e4:	1b1a      	subs	r2, r3, r4
1000d1e6:	0092      	lsls	r2, r2, #2
1000d1e8:	1882      	adds	r2, r0, r2
1000d1ea:	0011      	movs	r1, r2
1000d1ec:	315e      	adds	r1, #94	; 0x5e
1000d1ee:	2502      	movs	r5, #2
1000d1f0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d1f2:	210a      	movs	r1, #10
1000d1f4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d1f6:	0010      	movs	r0, r2
1000d1f8:	2212      	movs	r2, #18
1000d1fa:	491a      	ldr	r1, [pc, #104]	; (1000d264 <ble_resolv_rand_addr_handler+0x114>)
1000d1fc:	4b1a      	ldr	r3, [pc, #104]	; (1000d268 <ble_resolv_rand_addr_handler+0x118>)
1000d1fe:	4798      	blx	r3
1000d200:	e00e      	b.n	1000d220 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000d202:	481c      	ldr	r0, [pc, #112]	; (1000d274 <ble_resolv_rand_addr_handler+0x124>)
1000d204:	4b1c      	ldr	r3, [pc, #112]	; (1000d278 <ble_resolv_rand_addr_handler+0x128>)
1000d206:	4798      	blx	r3
1000d208:	481e      	ldr	r0, [pc, #120]	; (1000d284 <ble_resolv_rand_addr_handler+0x134>)
1000d20a:	4b1d      	ldr	r3, [pc, #116]	; (1000d280 <ble_resolv_rand_addr_handler+0x130>)
1000d20c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d20e:	235e      	movs	r3, #94	; 0x5e
1000d210:	4a13      	ldr	r2, [pc, #76]	; (1000d260 <ble_resolv_rand_addr_handler+0x110>)
1000d212:	5cd3      	ldrb	r3, [r2, r3]
1000d214:	2b00      	cmp	r3, #0
1000d216:	d0b6      	beq.n	1000d186 <ble_resolv_rand_addr_handler+0x36>
1000d218:	4a1b      	ldr	r2, [pc, #108]	; (1000d288 <ble_resolv_rand_addr_handler+0x138>)
1000d21a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d21c:	2401      	movs	r4, #1
1000d21e:	e7ad      	b.n	1000d17c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d220:	4814      	ldr	r0, [pc, #80]	; (1000d274 <ble_resolv_rand_addr_handler+0x124>)
1000d222:	4b15      	ldr	r3, [pc, #84]	; (1000d278 <ble_resolv_rand_addr_handler+0x128>)
1000d224:	4798      	blx	r3
1000d226:	0021      	movs	r1, r4
1000d228:	4818      	ldr	r0, [pc, #96]	; (1000d28c <ble_resolv_rand_addr_handler+0x13c>)
1000d22a:	4b15      	ldr	r3, [pc, #84]	; (1000d280 <ble_resolv_rand_addr_handler+0x130>)
1000d22c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d22e:	0163      	lsls	r3, r4, #5
1000d230:	1b1c      	subs	r4, r3, r4
1000d232:	00a4      	lsls	r4, r4, #2
1000d234:	4b0a      	ldr	r3, [pc, #40]	; (1000d260 <ble_resolv_rand_addr_handler+0x110>)
1000d236:	191c      	adds	r4, r3, r4
1000d238:	7ca3      	ldrb	r3, [r4, #18]
1000d23a:	2b0a      	cmp	r3, #10
1000d23c:	d107      	bne.n	1000d24e <ble_resolv_rand_addr_handler+0xfe>
1000d23e:	e7c4      	b.n	1000d1ca <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d240:	480c      	ldr	r0, [pc, #48]	; (1000d274 <ble_resolv_rand_addr_handler+0x124>)
1000d242:	4b0d      	ldr	r3, [pc, #52]	; (1000d278 <ble_resolv_rand_addr_handler+0x128>)
1000d244:	4798      	blx	r3
1000d246:	2105      	movs	r1, #5
1000d248:	4810      	ldr	r0, [pc, #64]	; (1000d28c <ble_resolv_rand_addr_handler+0x13c>)
1000d24a:	4b0d      	ldr	r3, [pc, #52]	; (1000d280 <ble_resolv_rand_addr_handler+0x130>)
1000d24c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d24e:	2000      	movs	r0, #0
1000d250:	bc04      	pop	{r2}
1000d252:	4690      	mov	r8, r2
1000d254:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d256:	46c0      	nop			; (mov r8, r8)
1000d258:	1001a1ee 	.word	0x1001a1ee
1000d25c:	100156a1 	.word	0x100156a1
1000d260:	1001a1a8 	.word	0x1001a1a8
1000d264:	1001a454 	.word	0x1001a454
1000d268:	100156bf 	.word	0x100156bf
1000d26c:	1001a414 	.word	0x1001a414
1000d270:	1000cebd 	.word	0x1000cebd
1000d274:	10016878 	.word	0x10016878
1000d278:	10015939 	.word	0x10015939
1000d27c:	10017f08 	.word	0x10017f08
1000d280:	10015819 	.word	0x10015819
1000d284:	10017f20 	.word	0x10017f20
1000d288:	1001a282 	.word	0x1001a282
1000d28c:	10017f3c 	.word	0x10017f3c

1000d290 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d292:	0004      	movs	r4, r0
1000d294:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000d296:	4848      	ldr	r0, [pc, #288]	; (1000d3b8 <ble_event_manager+0x128>)
1000d298:	4b48      	ldr	r3, [pc, #288]	; (1000d3bc <ble_event_manager+0x12c>)
1000d29a:	4798      	blx	r3
1000d29c:	0021      	movs	r1, r4
1000d29e:	4848      	ldr	r0, [pc, #288]	; (1000d3c0 <ble_event_manager+0x130>)
1000d2a0:	4b48      	ldr	r3, [pc, #288]	; (1000d3c4 <ble_event_manager+0x134>)
1000d2a2:	4798      	blx	r3
	switch(events)
1000d2a4:	2c3b      	cmp	r4, #59	; 0x3b
1000d2a6:	d879      	bhi.n	1000d39c <ble_event_manager+0x10c>
1000d2a8:	00a3      	lsls	r3, r4, #2
1000d2aa:	4a47      	ldr	r2, [pc, #284]	; (1000d3c8 <ble_event_manager+0x138>)
1000d2ac:	58d3      	ldr	r3, [r2, r3]
1000d2ae:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d2b0:	00a4      	lsls	r4, r4, #2
1000d2b2:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d2b4:	4f45      	ldr	r7, [pc, #276]	; (1000d3cc <ble_event_manager+0x13c>)
1000d2b6:	59bb      	ldr	r3, [r7, r6]
1000d2b8:	2b00      	cmp	r3, #0
1000d2ba:	d004      	beq.n	1000d2c6 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d2bc:	591b      	ldr	r3, [r3, r4]
1000d2be:	2b00      	cmp	r3, #0
1000d2c0:	d001      	beq.n	1000d2c6 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000d2c2:	0028      	movs	r0, r5
1000d2c4:	4798      	blx	r3
1000d2c6:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d2c8:	2e14      	cmp	r6, #20
1000d2ca:	d1f4      	bne.n	1000d2b6 <ble_event_manager+0x26>
1000d2cc:	e072      	b.n	1000d3b4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d2ce:	3c13      	subs	r4, #19
1000d2d0:	b2e4      	uxtb	r4, r4
1000d2d2:	00a4      	lsls	r4, r4, #2
1000d2d4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d2d6:	4f3e      	ldr	r7, [pc, #248]	; (1000d3d0 <ble_event_manager+0x140>)
1000d2d8:	59bb      	ldr	r3, [r7, r6]
1000d2da:	2b00      	cmp	r3, #0
1000d2dc:	d004      	beq.n	1000d2e8 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d2de:	591b      	ldr	r3, [r3, r4]
1000d2e0:	2b00      	cmp	r3, #0
1000d2e2:	d001      	beq.n	1000d2e8 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000d2e4:	0028      	movs	r0, r5
1000d2e6:	4798      	blx	r3
1000d2e8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d2ea:	2e14      	cmp	r6, #20
1000d2ec:	d1f4      	bne.n	1000d2d8 <ble_event_manager+0x48>
1000d2ee:	e061      	b.n	1000d3b4 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000d2f0:	3c1d      	subs	r4, #29
1000d2f2:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000d2f4:	4830      	ldr	r0, [pc, #192]	; (1000d3b8 <ble_event_manager+0x128>)
1000d2f6:	4b31      	ldr	r3, [pc, #196]	; (1000d3bc <ble_event_manager+0x12c>)
1000d2f8:	4798      	blx	r3
1000d2fa:	0021      	movs	r1, r4
1000d2fc:	4835      	ldr	r0, [pc, #212]	; (1000d3d4 <ble_event_manager+0x144>)
1000d2fe:	4b31      	ldr	r3, [pc, #196]	; (1000d3c4 <ble_event_manager+0x134>)
1000d300:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d302:	00a4      	lsls	r4, r4, #2
1000d304:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d306:	4f34      	ldr	r7, [pc, #208]	; (1000d3d8 <ble_event_manager+0x148>)
1000d308:	59bb      	ldr	r3, [r7, r6]
1000d30a:	2b00      	cmp	r3, #0
1000d30c:	d004      	beq.n	1000d318 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d30e:	591b      	ldr	r3, [r3, r4]
1000d310:	2b00      	cmp	r3, #0
1000d312:	d001      	beq.n	1000d318 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000d314:	0028      	movs	r0, r5
1000d316:	4798      	blx	r3
1000d318:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d31a:	2e14      	cmp	r6, #20
1000d31c:	d1f4      	bne.n	1000d308 <ble_event_manager+0x78>
1000d31e:	e049      	b.n	1000d3b4 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d320:	3c27      	subs	r4, #39	; 0x27
1000d322:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d324:	4b2d      	ldr	r3, [pc, #180]	; (1000d3dc <ble_event_manager+0x14c>)
1000d326:	681b      	ldr	r3, [r3, #0]
1000d328:	2b00      	cmp	r3, #0
1000d32a:	d043      	beq.n	1000d3b4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d32c:	00a4      	lsls	r4, r4, #2
1000d32e:	58e3      	ldr	r3, [r4, r3]
1000d330:	2b00      	cmp	r3, #0
1000d332:	d03f      	beq.n	1000d3b4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d334:	0028      	movs	r0, r5
1000d336:	4798      	blx	r3
1000d338:	e03c      	b.n	1000d3b4 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d33a:	3c2d      	subs	r4, #45	; 0x2d
1000d33c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d33e:	4b28      	ldr	r3, [pc, #160]	; (1000d3e0 <ble_event_manager+0x150>)
1000d340:	681b      	ldr	r3, [r3, #0]
1000d342:	2b00      	cmp	r3, #0
1000d344:	d036      	beq.n	1000d3b4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d346:	00a4      	lsls	r4, r4, #2
1000d348:	58e3      	ldr	r3, [r4, r3]
1000d34a:	2b00      	cmp	r3, #0
1000d34c:	d032      	beq.n	1000d3b4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d34e:	0028      	movs	r0, r5
1000d350:	4798      	blx	r3
1000d352:	e02f      	b.n	1000d3b4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d354:	3c36      	subs	r4, #54	; 0x36
1000d356:	b2e4      	uxtb	r4, r4
1000d358:	00a4      	lsls	r4, r4, #2
1000d35a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d35c:	4f21      	ldr	r7, [pc, #132]	; (1000d3e4 <ble_event_manager+0x154>)
1000d35e:	59bb      	ldr	r3, [r7, r6]
1000d360:	2b00      	cmp	r3, #0
1000d362:	d004      	beq.n	1000d36e <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d364:	591b      	ldr	r3, [r3, r4]
1000d366:	2b00      	cmp	r3, #0
1000d368:	d001      	beq.n	1000d36e <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000d36a:	0028      	movs	r0, r5
1000d36c:	4798      	blx	r3
1000d36e:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d370:	2e14      	cmp	r6, #20
1000d372:	d1f4      	bne.n	1000d35e <ble_event_manager+0xce>
1000d374:	e01e      	b.n	1000d3b4 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d376:	3c38      	subs	r4, #56	; 0x38
1000d378:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d37a:	4b1b      	ldr	r3, [pc, #108]	; (1000d3e8 <ble_event_manager+0x158>)
1000d37c:	681b      	ldr	r3, [r3, #0]
1000d37e:	2b00      	cmp	r3, #0
1000d380:	d018      	beq.n	1000d3b4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d382:	00a4      	lsls	r4, r4, #2
1000d384:	58e3      	ldr	r3, [r4, r3]
1000d386:	2b00      	cmp	r3, #0
1000d388:	d014      	beq.n	1000d3b4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d38a:	0028      	movs	r0, r5
1000d38c:	4798      	blx	r3
1000d38e:	e011      	b.n	1000d3b4 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d390:	4b16      	ldr	r3, [pc, #88]	; (1000d3ec <ble_event_manager+0x15c>)
1000d392:	681b      	ldr	r3, [r3, #0]
1000d394:	2b00      	cmp	r3, #0
1000d396:	d00d      	beq.n	1000d3b4 <ble_event_manager+0x124>
			ble_user_event_cb();
1000d398:	4798      	blx	r3
1000d39a:	e00b      	b.n	1000d3b4 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000d39c:	4e06      	ldr	r6, [pc, #24]	; (1000d3b8 <ble_event_manager+0x128>)
1000d39e:	0030      	movs	r0, r6
1000d3a0:	4d06      	ldr	r5, [pc, #24]	; (1000d3bc <ble_event_manager+0x12c>)
1000d3a2:	47a8      	blx	r5
1000d3a4:	0021      	movs	r1, r4
1000d3a6:	4812      	ldr	r0, [pc, #72]	; (1000d3f0 <ble_event_manager+0x160>)
1000d3a8:	4b06      	ldr	r3, [pc, #24]	; (1000d3c4 <ble_event_manager+0x134>)
1000d3aa:	4798      	blx	r3
		DBG_LOG("\r\n");
1000d3ac:	0030      	movs	r0, r6
1000d3ae:	47a8      	blx	r5
1000d3b0:	0030      	movs	r0, r6
1000d3b2:	47a8      	blx	r5
	}
	break;		
	}
}
1000d3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d3b6:	46c0      	nop			; (mov r8, r8)
1000d3b8:	10016878 	.word	0x10016878
1000d3bc:	10015939 	.word	0x10015939
1000d3c0:	10017f4c 	.word	0x10017f4c
1000d3c4:	10015819 	.word	0x10015819
1000d3c8:	100174ac 	.word	0x100174ac
1000d3cc:	1001a42c 	.word	0x1001a42c
1000d3d0:	1001a440 	.word	0x1001a440
1000d3d4:	10017f5c 	.word	0x10017f5c
1000d3d8:	1001a194 	.word	0x1001a194
1000d3dc:	1001a488 	.word	0x1001a488
1000d3e0:	1001a190 	.word	0x1001a190
1000d3e4:	1001a418 	.word	0x1001a418
1000d3e8:	1001a9cc 	.word	0x1001a9cc
1000d3ec:	10018cb0 	.word	0x10018cb0
1000d3f0:	10017f74 	.word	0x10017f74

1000d3f4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000d3f4:	b570      	push	{r4, r5, r6, lr}
1000d3f6:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d3f8:	4b0d      	ldr	r3, [pc, #52]	; (1000d430 <ble_event_task+0x3c>)
1000d3fa:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d3fc:	2b01      	cmp	r3, #1
1000d3fe:	d101      	bne.n	1000d404 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000d400:	4b0c      	ldr	r3, [pc, #48]	; (1000d434 <ble_event_task+0x40>)
1000d402:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000d404:	0022      	movs	r2, r4
1000d406:	490c      	ldr	r1, [pc, #48]	; (1000d438 <ble_event_task+0x44>)
1000d408:	480c      	ldr	r0, [pc, #48]	; (1000d43c <ble_event_task+0x48>)
1000d40a:	4b0d      	ldr	r3, [pc, #52]	; (1000d440 <ble_event_task+0x4c>)
1000d40c:	4798      	blx	r3
1000d40e:	0004      	movs	r4, r0
1000d410:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d412:	4b07      	ldr	r3, [pc, #28]	; (1000d430 <ble_event_task+0x3c>)
1000d414:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d416:	2b01      	cmp	r3, #1
1000d418:	d101      	bne.n	1000d41e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000d41a:	4b0a      	ldr	r3, [pc, #40]	; (1000d444 <ble_event_task+0x50>)
1000d41c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000d41e:	2d00      	cmp	r5, #0
1000d420:	d104      	bne.n	1000d42c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000d422:	4b06      	ldr	r3, [pc, #24]	; (1000d43c <ble_event_task+0x48>)
1000d424:	7818      	ldrb	r0, [r3, #0]
1000d426:	4904      	ldr	r1, [pc, #16]	; (1000d438 <ble_event_task+0x44>)
1000d428:	4b07      	ldr	r3, [pc, #28]	; (1000d448 <ble_event_task+0x54>)
1000d42a:	4798      	blx	r3
    }
    
    return status;
}
1000d42c:	0020      	movs	r0, r4
1000d42e:	bd70      	pop	{r4, r5, r6, pc}
1000d430:	10018cbf 	.word	0x10018cbf
1000d434:	1000de05 	.word	0x1000de05
1000d438:	1001a7c0 	.word	0x1001a7c0
1000d43c:	1001a484 	.word	0x1001a484
1000d440:	1000e46d 	.word	0x1000e46d
1000d444:	1000dddd 	.word	0x1000dddd
1000d448:	1000d291 	.word	0x1000d291

1000d44c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d44c:	b510      	push	{r4, lr}
1000d44e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d450:	ac08      	add	r4, sp, #32
1000d452:	2203      	movs	r2, #3
1000d454:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d456:	2302      	movs	r3, #2
1000d458:	70a3      	strb	r3, [r4, #2]
1000d45a:	3316      	adds	r3, #22
1000d45c:	70e3      	strb	r3, [r4, #3]
1000d45e:	7122      	strb	r2, [r4, #4]
1000d460:	7163      	strb	r3, [r4, #5]
1000d462:	3201      	adds	r2, #1
1000d464:	71a2      	strb	r2, [r4, #6]
1000d466:	71e3      	strb	r3, [r4, #7]
1000d468:	320b      	adds	r2, #11
1000d46a:	7222      	strb	r2, [r4, #8]
1000d46c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d46e:	3b0f      	subs	r3, #15
1000d470:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d472:	3a05      	subs	r2, #5
1000d474:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d476:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d478:	aa0b      	add	r2, sp, #44	; 0x2c
1000d47a:	4b16      	ldr	r3, [pc, #88]	; (1000d4d4 <ble_advertisement_data_set+0x88>)
1000d47c:	cb03      	ldmia	r3!, {r0, r1}
1000d47e:	c203      	stmia	r2!, {r0, r1}
1000d480:	781b      	ldrb	r3, [r3, #0]
1000d482:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000d484:	2300      	movs	r3, #0
1000d486:	466a      	mov	r2, sp
1000d488:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000d48a:	3315      	adds	r3, #21
1000d48c:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000d48e:	4812      	ldr	r0, [pc, #72]	; (1000d4d8 <ble_advertisement_data_set+0x8c>)
1000d490:	4b12      	ldr	r3, [pc, #72]	; (1000d4dc <ble_advertisement_data_set+0x90>)
1000d492:	4798      	blx	r3
1000d494:	4812      	ldr	r0, [pc, #72]	; (1000d4e0 <ble_advertisement_data_set+0x94>)
1000d496:	4b13      	ldr	r3, [pc, #76]	; (1000d4e4 <ble_advertisement_data_set+0x98>)
1000d498:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d49a:	2307      	movs	r3, #7
1000d49c:	466a      	mov	r2, sp
1000d49e:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d4a0:	33f8      	adds	r3, #248	; 0xf8
1000d4a2:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d4a4:	2206      	movs	r2, #6
1000d4a6:	4910      	ldr	r1, [pc, #64]	; (1000d4e8 <ble_advertisement_data_set+0x9c>)
1000d4a8:	466b      	mov	r3, sp
1000d4aa:	1c98      	adds	r0, r3, #2
1000d4ac:	4b0f      	ldr	r3, [pc, #60]	; (1000d4ec <ble_advertisement_data_set+0xa0>)
1000d4ae:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d4b0:	2308      	movs	r3, #8
1000d4b2:	466a      	mov	r2, sp
1000d4b4:	2115      	movs	r1, #21
1000d4b6:	0020      	movs	r0, r4
1000d4b8:	4c0d      	ldr	r4, [pc, #52]	; (1000d4f0 <ble_advertisement_data_set+0xa4>)
1000d4ba:	47a0      	blx	r4
1000d4bc:	2800      	cmp	r0, #0
1000d4be:	d005      	beq.n	1000d4cc <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d4c0:	4805      	ldr	r0, [pc, #20]	; (1000d4d8 <ble_advertisement_data_set+0x8c>)
1000d4c2:	4b06      	ldr	r3, [pc, #24]	; (1000d4dc <ble_advertisement_data_set+0x90>)
1000d4c4:	4798      	blx	r3
1000d4c6:	480b      	ldr	r0, [pc, #44]	; (1000d4f4 <ble_advertisement_data_set+0xa8>)
1000d4c8:	4b06      	ldr	r3, [pc, #24]	; (1000d4e4 <ble_advertisement_data_set+0x98>)
1000d4ca:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d4cc:	2000      	movs	r0, #0
1000d4ce:	b010      	add	sp, #64	; 0x40
1000d4d0:	bd10      	pop	{r4, pc}
1000d4d2:	46c0      	nop			; (mov r8, r8)
1000d4d4:	10017c90 	.word	0x10017c90
1000d4d8:	10016878 	.word	0x10016878
1000d4dc:	10015939 	.word	0x10015939
1000d4e0:	10017f94 	.word	0x10017f94
1000d4e4:	10015819 	.word	0x10015819
1000d4e8:	10017fc8 	.word	0x10017fc8
1000d4ec:	100156bf 	.word	0x100156bf
1000d4f0:	1000eecd 	.word	0x1000eecd
1000d4f4:	10017fd0 	.word	0x10017fd0

1000d4f8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d4f8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d4fa:	4b0e      	ldr	r3, [pc, #56]	; (1000d534 <uart_read_complete_callback+0x3c>)
1000d4fc:	781b      	ldrb	r3, [r3, #0]
1000d4fe:	2b01      	cmp	r3, #1
1000d500:	d10b      	bne.n	1000d51a <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d502:	2202      	movs	r2, #2
1000d504:	4b0b      	ldr	r3, [pc, #44]	; (1000d534 <uart_read_complete_callback+0x3c>)
1000d506:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d508:	4b0b      	ldr	r3, [pc, #44]	; (1000d538 <uart_read_complete_callback+0x40>)
1000d50a:	681b      	ldr	r3, [r3, #0]
1000d50c:	2b00      	cmp	r3, #0
1000d50e:	d110      	bne.n	1000d532 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d510:	2102      	movs	r1, #2
1000d512:	480a      	ldr	r0, [pc, #40]	; (1000d53c <uart_read_complete_callback+0x44>)
1000d514:	4b0a      	ldr	r3, [pc, #40]	; (1000d540 <uart_read_complete_callback+0x48>)
1000d516:	4798      	blx	r3
1000d518:	e00b      	b.n	1000d532 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d51a:	4b07      	ldr	r3, [pc, #28]	; (1000d538 <uart_read_complete_callback+0x40>)
1000d51c:	681b      	ldr	r3, [r3, #0]
1000d51e:	2b00      	cmp	r3, #0
1000d520:	d007      	beq.n	1000d532 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d522:	4c08      	ldr	r4, [pc, #32]	; (1000d544 <uart_read_complete_callback+0x4c>)
1000d524:	7820      	ldrb	r0, [r4, #0]
1000d526:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d528:	2201      	movs	r2, #1
1000d52a:	0021      	movs	r1, r4
1000d52c:	4803      	ldr	r0, [pc, #12]	; (1000d53c <uart_read_complete_callback+0x44>)
1000d52e:	4b06      	ldr	r3, [pc, #24]	; (1000d548 <uart_read_complete_callback+0x50>)
1000d530:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d532:	bd10      	pop	{r4, pc}
1000d534:	10019cc4 	.word	0x10019cc4
1000d538:	10019ccc 	.word	0x10019ccc
1000d53c:	1001a9d0 	.word	0x1001a9d0
1000d540:	1000bf29 	.word	0x1000bf29
1000d544:	10019cc8 	.word	0x10019cc8
1000d548:	1000becd 	.word	0x1000becd

1000d54c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d54c:	b570      	push	{r4, r5, r6, lr}
1000d54e:	0006      	movs	r6, r0
1000d550:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d552:	4c03      	ldr	r4, [pc, #12]	; (1000d560 <usart_serial_getchar+0x14>)
1000d554:	0029      	movs	r1, r5
1000d556:	0030      	movs	r0, r6
1000d558:	47a0      	blx	r4
1000d55a:	2800      	cmp	r0, #0
1000d55c:	d1fa      	bne.n	1000d554 <usart_serial_getchar+0x8>
}
1000d55e:	bd70      	pop	{r4, r5, r6, pc}
1000d560:	1000beb9 	.word	0x1000beb9

1000d564 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d564:	b570      	push	{r4, r5, r6, lr}
1000d566:	0006      	movs	r6, r0
1000d568:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d56a:	4c03      	ldr	r4, [pc, #12]	; (1000d578 <usart_serial_putchar+0x14>)
1000d56c:	0029      	movs	r1, r5
1000d56e:	0030      	movs	r0, r6
1000d570:	47a0      	blx	r4
1000d572:	2800      	cmp	r0, #0
1000d574:	d1fa      	bne.n	1000d56c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d576:	bd70      	pop	{r4, r5, r6, pc}
1000d578:	1000bea9 	.word	0x1000bea9

1000d57c <serial_console_init>:

void serial_console_init(void)
{
1000d57c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d57e:	2100      	movs	r1, #0
1000d580:	2000      	movs	r0, #0
1000d582:	4b19      	ldr	r3, [pc, #100]	; (1000d5e8 <serial_console_init+0x6c>)
1000d584:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d586:	4c19      	ldr	r4, [pc, #100]	; (1000d5ec <serial_console_init+0x70>)
1000d588:	0020      	movs	r0, r4
1000d58a:	4b19      	ldr	r3, [pc, #100]	; (1000d5f0 <serial_console_init+0x74>)
1000d58c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d58e:	23e1      	movs	r3, #225	; 0xe1
1000d590:	025b      	lsls	r3, r3, #9
1000d592:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d594:	2302      	movs	r3, #2
1000d596:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d598:	2203      	movs	r2, #3
1000d59a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d59c:	3201      	adds	r2, #1
1000d59e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d5a0:	3201      	adds	r2, #1
1000d5a2:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d5a4:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d5a6:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d5a8:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d5aa:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d5ac:	4d11      	ldr	r5, [pc, #68]	; (1000d5f4 <serial_console_init+0x78>)
1000d5ae:	4b12      	ldr	r3, [pc, #72]	; (1000d5f8 <serial_console_init+0x7c>)
1000d5b0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d5b2:	4a12      	ldr	r2, [pc, #72]	; (1000d5fc <serial_console_init+0x80>)
1000d5b4:	4b12      	ldr	r3, [pc, #72]	; (1000d600 <serial_console_init+0x84>)
1000d5b6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d5b8:	4a12      	ldr	r2, [pc, #72]	; (1000d604 <serial_console_init+0x88>)
1000d5ba:	4b13      	ldr	r3, [pc, #76]	; (1000d608 <serial_console_init+0x8c>)
1000d5bc:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d5be:	0022      	movs	r2, r4
1000d5c0:	4912      	ldr	r1, [pc, #72]	; (1000d60c <serial_console_init+0x90>)
1000d5c2:	0028      	movs	r0, r5
1000d5c4:	4b12      	ldr	r3, [pc, #72]	; (1000d610 <serial_console_init+0x94>)
1000d5c6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d5c8:	4e12      	ldr	r6, [pc, #72]	; (1000d614 <serial_console_init+0x98>)
1000d5ca:	6833      	ldr	r3, [r6, #0]
1000d5cc:	6898      	ldr	r0, [r3, #8]
1000d5ce:	2100      	movs	r1, #0
1000d5d0:	4c11      	ldr	r4, [pc, #68]	; (1000d618 <serial_console_init+0x9c>)
1000d5d2:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d5d4:	6833      	ldr	r3, [r6, #0]
1000d5d6:	6858      	ldr	r0, [r3, #4]
1000d5d8:	2100      	movs	r1, #0
1000d5da:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d5dc:	2202      	movs	r2, #2
1000d5de:	490f      	ldr	r1, [pc, #60]	; (1000d61c <serial_console_init+0xa0>)
1000d5e0:	0028      	movs	r0, r5
1000d5e2:	4b0f      	ldr	r3, [pc, #60]	; (1000d620 <serial_console_init+0xa4>)
1000d5e4:	4798      	blx	r3
}
1000d5e6:	bd70      	pop	{r4, r5, r6, pc}
1000d5e8:	1000aec9 	.word	0x1000aec9
1000d5ec:	1001a9f4 	.word	0x1001a9f4
1000d5f0:	1000bcc1 	.word	0x1000bcc1
1000d5f4:	1001a9d0 	.word	0x1001a9d0
1000d5f8:	1001a18c 	.word	0x1001a18c
1000d5fc:	1000d565 	.word	0x1000d565
1000d600:	1001a188 	.word	0x1001a188
1000d604:	1000d54d 	.word	0x1000d54d
1000d608:	1001a184 	.word	0x1001a184
1000d60c:	40004000 	.word	0x40004000
1000d610:	1000bced 	.word	0x1000bced
1000d614:	100183a0 	.word	0x100183a0
1000d618:	100159e9 	.word	0x100159e9
1000d61c:	1000d4f9 	.word	0x1000d4f9
1000d620:	1000bef5 	.word	0x1000bef5

1000d624 <_time_start>:

void _time_start(unsigned int sec)
{
1000d624:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d626:	b083      	sub	sp, #12
1000d628:	0005      	movs	r5, r0
	system_clock_get_value();
1000d62a:	4c0d      	ldr	r4, [pc, #52]	; (1000d660 <_time_start+0x3c>)
1000d62c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d62e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d630:	4f0c      	ldr	r7, [pc, #48]	; (1000d664 <_time_start+0x40>)
1000d632:	47b8      	blx	r7
1000d634:	4e0c      	ldr	r6, [pc, #48]	; (1000d668 <_time_start+0x44>)
1000d636:	4a0d      	ldr	r2, [pc, #52]	; (1000d66c <_time_start+0x48>)
1000d638:	4b0d      	ldr	r3, [pc, #52]	; (1000d670 <_time_start+0x4c>)
1000d63a:	47b0      	blx	r6
1000d63c:	9000      	str	r0, [sp, #0]
1000d63e:	9101      	str	r1, [sp, #4]
1000d640:	20fa      	movs	r0, #250	; 0xfa
1000d642:	0080      	lsls	r0, r0, #2
1000d644:	4368      	muls	r0, r5
1000d646:	47b8      	blx	r7
1000d648:	0002      	movs	r2, r0
1000d64a:	000b      	movs	r3, r1
1000d64c:	9800      	ldr	r0, [sp, #0]
1000d64e:	9901      	ldr	r1, [sp, #4]
1000d650:	47b0      	blx	r6
1000d652:	4b08      	ldr	r3, [pc, #32]	; (1000d674 <_time_start+0x50>)
1000d654:	4798      	blx	r3
1000d656:	4b08      	ldr	r3, [pc, #32]	; (1000d678 <_time_start+0x54>)
1000d658:	6018      	str	r0, [r3, #0]
}
1000d65a:	b003      	add	sp, #12
1000d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d65e:	46c0      	nop			; (mov r8, r8)
1000d660:	1000af4d 	.word	0x1000af4d
1000d664:	100153c9 	.word	0x100153c9
1000d668:	100146fd 	.word	0x100146fd
1000d66c:	19feaec7 	.word	0x19feaec7
1000d670:	3f09d8ef 	.word	0x3f09d8ef
1000d674:	10012e09 	.word	0x10012e09
1000d678:	10019cc0 	.word	0x10019cc0

1000d67c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d67c:	4b02      	ldr	r3, [pc, #8]	; (1000d688 <_time_done+0xc>)
1000d67e:	681a      	ldr	r2, [r3, #0]
1000d680:	1e50      	subs	r0, r2, #1
1000d682:	6018      	str	r0, [r3, #0]
}
1000d684:	4770      	bx	lr
1000d686:	46c0      	nop			; (mov r8, r8)
1000d688:	10019cc0 	.word	0x10019cc0

1000d68c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d68c:	b570      	push	{r4, r5, r6, lr}
1000d68e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d690:	2201      	movs	r2, #1
1000d692:	4b11      	ldr	r3, [pc, #68]	; (1000d6d8 <getchar_b11_timeout+0x4c>)
1000d694:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d696:	4b11      	ldr	r3, [pc, #68]	; (1000d6dc <getchar_b11_timeout+0x50>)
1000d698:	681b      	ldr	r3, [r3, #0]
1000d69a:	2b00      	cmp	r3, #0
1000d69c:	d103      	bne.n	1000d6a6 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d69e:	2102      	movs	r1, #2
1000d6a0:	480f      	ldr	r0, [pc, #60]	; (1000d6e0 <getchar_b11_timeout+0x54>)
1000d6a2:	4b10      	ldr	r3, [pc, #64]	; (1000d6e4 <getchar_b11_timeout+0x58>)
1000d6a4:	4798      	blx	r3

	_time_start(sec);
1000d6a6:	0020      	movs	r0, r4
1000d6a8:	4b0f      	ldr	r3, [pc, #60]	; (1000d6e8 <getchar_b11_timeout+0x5c>)
1000d6aa:	4798      	blx	r3
	
	string_input[0] = 0;
1000d6ac:	490f      	ldr	r1, [pc, #60]	; (1000d6ec <getchar_b11_timeout+0x60>)
1000d6ae:	2300      	movs	r3, #0
1000d6b0:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d6b2:	2201      	movs	r2, #1
1000d6b4:	480a      	ldr	r0, [pc, #40]	; (1000d6e0 <getchar_b11_timeout+0x54>)
1000d6b6:	4b0e      	ldr	r3, [pc, #56]	; (1000d6f0 <getchar_b11_timeout+0x64>)
1000d6b8:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d6ba:	4c07      	ldr	r4, [pc, #28]	; (1000d6d8 <getchar_b11_timeout+0x4c>)
1000d6bc:	4d0d      	ldr	r5, [pc, #52]	; (1000d6f4 <getchar_b11_timeout+0x68>)
1000d6be:	7823      	ldrb	r3, [r4, #0]
1000d6c0:	2b02      	cmp	r3, #2
1000d6c2:	d002      	beq.n	1000d6ca <getchar_b11_timeout+0x3e>
1000d6c4:	47a8      	blx	r5
1000d6c6:	2800      	cmp	r0, #0
1000d6c8:	d1f9      	bne.n	1000d6be <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d6ca:	2200      	movs	r2, #0
1000d6cc:	4b02      	ldr	r3, [pc, #8]	; (1000d6d8 <getchar_b11_timeout+0x4c>)
1000d6ce:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d6d0:	4b06      	ldr	r3, [pc, #24]	; (1000d6ec <getchar_b11_timeout+0x60>)
1000d6d2:	7818      	ldrb	r0, [r3, #0]
}
1000d6d4:	bd70      	pop	{r4, r5, r6, pc}
1000d6d6:	46c0      	nop			; (mov r8, r8)
1000d6d8:	10019cc4 	.word	0x10019cc4
1000d6dc:	10019ccc 	.word	0x10019ccc
1000d6e0:	1001a9d0 	.word	0x1001a9d0
1000d6e4:	1000bf09 	.word	0x1000bf09
1000d6e8:	1000d625 	.word	0x1000d625
1000d6ec:	10019cc8 	.word	0x10019cc8
1000d6f0:	1000becd 	.word	0x1000becd
1000d6f4:	1000d67d 	.word	0x1000d67d

1000d6f8 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d6f8:	4b02      	ldr	r3, [pc, #8]	; (1000d704 <platform_event_free+0xc>)
1000d6fa:	681a      	ldr	r2, [r3, #0]
1000d6fc:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d6fe:	6018      	str	r0, [r3, #0]
}
1000d700:	4770      	bx	lr
1000d702:	46c0      	nop			; (mov r8, r8)
1000d704:	10019cd4 	.word	0x10019cd4

1000d708 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d708:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d70a:	4b0b      	ldr	r3, [pc, #44]	; (1000d738 <platform_event_post+0x30>)
1000d70c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d70e:	2c00      	cmp	r4, #0
1000d710:	d011      	beq.n	1000d736 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d712:	6825      	ldr	r5, [r4, #0]
1000d714:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d716:	2300      	movs	r3, #0
1000d718:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d71a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d71c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d71e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d720:	4b06      	ldr	r3, [pc, #24]	; (1000d73c <platform_event_post+0x34>)
1000d722:	681a      	ldr	r2, [r3, #0]
1000d724:	2a00      	cmp	r2, #0
1000d726:	d102      	bne.n	1000d72e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d728:	601c      	str	r4, [r3, #0]
1000d72a:	e004      	b.n	1000d736 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d72c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d72e:	6813      	ldr	r3, [r2, #0]
1000d730:	2b00      	cmp	r3, #0
1000d732:	d1fb      	bne.n	1000d72c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d734:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d736:	bd30      	pop	{r4, r5, pc}
1000d738:	10019cd4 	.word	0x10019cd4
1000d73c:	10019cd0 	.word	0x10019cd0

1000d740 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d740:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d742:	2300      	movs	r3, #0
1000d744:	4a06      	ldr	r2, [pc, #24]	; (1000d760 <platform_event_init+0x20>)
1000d746:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d748:	4a06      	ldr	r2, [pc, #24]	; (1000d764 <platform_event_init+0x24>)
1000d74a:	6013      	str	r3, [r2, #0]
1000d74c:	4c06      	ldr	r4, [pc, #24]	; (1000d768 <platform_event_init+0x28>)
1000d74e:	0026      	movs	r6, r4
1000d750:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d752:	4d06      	ldr	r5, [pc, #24]	; (1000d76c <platform_event_init+0x2c>)
1000d754:	0020      	movs	r0, r4
1000d756:	47a8      	blx	r5
1000d758:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d75a:	42b4      	cmp	r4, r6
1000d75c:	d1fa      	bne.n	1000d754 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d75e:	bd70      	pop	{r4, r5, r6, pc}
1000d760:	10019cd4 	.word	0x10019cd4
1000d764:	10019cd0 	.word	0x10019cd0
1000d768:	10019cd8 	.word	0x10019cd8
1000d76c:	1000d6f9 	.word	0x1000d6f9

1000d770 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d770:	b570      	push	{r4, r5, r6, lr}
1000d772:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d774:	4b13      	ldr	r3, [pc, #76]	; (1000d7c4 <at_ke_msg_send+0x54>)
1000d776:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d778:	4b13      	ldr	r3, [pc, #76]	; (1000d7c8 <at_ke_msg_send+0x58>)
1000d77a:	681b      	ldr	r3, [r3, #0]
1000d77c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d77e:	2c0c      	cmp	r4, #12
1000d780:	d01f      	beq.n	1000d7c2 <at_ke_msg_send+0x52>
1000d782:	3c0c      	subs	r4, #12
1000d784:	88e3      	ldrh	r3, [r4, #6]
1000d786:	2b05      	cmp	r3, #5
1000d788:	d01b      	beq.n	1000d7c2 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d78a:	07eb      	lsls	r3, r5, #31
1000d78c:	d414      	bmi.n	1000d7b8 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d78e:	4b0f      	ldr	r3, [pc, #60]	; (1000d7cc <at_ke_msg_send+0x5c>)
1000d790:	681b      	ldr	r3, [r3, #0]
1000d792:	2002      	movs	r0, #2
1000d794:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d796:	4b0e      	ldr	r3, [pc, #56]	; (1000d7d0 <at_ke_msg_send+0x60>)
1000d798:	681b      	ldr	r3, [r3, #0]
1000d79a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d79c:	4c0d      	ldr	r4, [pc, #52]	; (1000d7d4 <at_ke_msg_send+0x64>)
1000d79e:	2003      	movs	r0, #3
1000d7a0:	6823      	ldr	r3, [r4, #0]
1000d7a2:	4798      	blx	r3
1000d7a4:	2800      	cmp	r0, #0
1000d7a6:	d1fa      	bne.n	1000d79e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d7a8:	4b0b      	ldr	r3, [pc, #44]	; (1000d7d8 <at_ke_msg_send+0x68>)
1000d7aa:	681b      	ldr	r3, [r3, #0]
1000d7ac:	3002      	adds	r0, #2
1000d7ae:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d7b0:	2201      	movs	r2, #1
1000d7b2:	4b0a      	ldr	r3, [pc, #40]	; (1000d7dc <at_ke_msg_send+0x6c>)
1000d7b4:	601a      	str	r2, [r3, #0]
1000d7b6:	e004      	b.n	1000d7c2 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d7b8:	4b09      	ldr	r3, [pc, #36]	; (1000d7e0 <at_ke_msg_send+0x70>)
1000d7ba:	6818      	ldr	r0, [r3, #0]
1000d7bc:	4b09      	ldr	r3, [pc, #36]	; (1000d7e4 <at_ke_msg_send+0x74>)
1000d7be:	681b      	ldr	r3, [r3, #0]
1000d7c0:	4798      	blx	r3
		}
	}
}
1000d7c2:	bd70      	pop	{r4, r5, r6, pc}
1000d7c4:	4000b1ec 	.word	0x4000b1ec
1000d7c8:	10019d80 	.word	0x10019d80
1000d7cc:	10019d78 	.word	0x10019d78
1000d7d0:	10019d8c 	.word	0x10019d8c
1000d7d4:	10019d60 	.word	0x10019d60
1000d7d8:	10019d68 	.word	0x10019d68
1000d7dc:	4000b020 	.word	0x4000b020
1000d7e0:	10019d6c 	.word	0x10019d6c
1000d7e4:	10019d5c 	.word	0x10019d5c

1000d7e8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d7e8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d7ea:	4b06      	ldr	r3, [pc, #24]	; (1000d804 <samb11_plf_resume_callback+0x1c>)
1000d7ec:	4a06      	ldr	r2, [pc, #24]	; (1000d808 <samb11_plf_resume_callback+0x20>)
1000d7ee:	6819      	ldr	r1, [r3, #0]
1000d7f0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d7f2:	685a      	ldr	r2, [r3, #4]
1000d7f4:	4b05      	ldr	r3, [pc, #20]	; (1000d80c <samb11_plf_resume_callback+0x24>)
1000d7f6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d7f8:	4b05      	ldr	r3, [pc, #20]	; (1000d810 <samb11_plf_resume_callback+0x28>)
1000d7fa:	681b      	ldr	r3, [r3, #0]
1000d7fc:	2b00      	cmp	r3, #0
1000d7fe:	d000      	beq.n	1000d802 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d800:	4798      	blx	r3
	}
}
1000d802:	bd10      	pop	{r4, pc}
1000d804:	1001aa1c 	.word	0x1001aa1c
1000d808:	4000b00c 	.word	0x4000b00c
1000d80c:	4000b010 	.word	0x4000b010
1000d810:	1001acf8 	.word	0x1001acf8

1000d814 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d814:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d816:	2232      	movs	r2, #50	; 0x32
1000d818:	2100      	movs	r1, #0
1000d81a:	480d      	ldr	r0, [pc, #52]	; (1000d850 <init_port_list+0x3c>)
1000d81c:	4b0d      	ldr	r3, [pc, #52]	; (1000d854 <init_port_list+0x40>)
1000d81e:	4798      	blx	r3
1000d820:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d822:	480b      	ldr	r0, [pc, #44]	; (1000d850 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d824:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d826:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d828:	004a      	lsls	r2, r1, #1
1000d82a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d82c:	1882      	adds	r2, r0, r2
1000d82e:	7853      	ldrb	r3, [r2, #1]
1000d830:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d832:	b2db      	uxtb	r3, r3
1000d834:	43a3      	bics	r3, r4
1000d836:	7053      	strb	r3, [r2, #1]
1000d838:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d83a:	2919      	cmp	r1, #25
1000d83c:	d1f4      	bne.n	1000d828 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d83e:	4b04      	ldr	r3, [pc, #16]	; (1000d850 <init_port_list+0x3c>)
1000d840:	785a      	ldrb	r2, [r3, #1]
1000d842:	3918      	subs	r1, #24
1000d844:	438a      	bics	r2, r1
1000d846:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d848:	78da      	ldrb	r2, [r3, #3]
1000d84a:	438a      	bics	r2, r1
1000d84c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d84e:	bd70      	pop	{r4, r5, r6, pc}
1000d850:	1001aa38 	.word	0x1001aa38
1000d854:	100156d1 	.word	0x100156d1

1000d858 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d858:	4a06      	ldr	r2, [pc, #24]	; (1000d874 <init_clock+0x1c>)
1000d85a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d85c:	4b06      	ldr	r3, [pc, #24]	; (1000d878 <init_clock+0x20>)
1000d85e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d860:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d862:	4a06      	ldr	r2, [pc, #24]	; (1000d87c <init_clock+0x24>)
1000d864:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d866:	4906      	ldr	r1, [pc, #24]	; (1000d880 <init_clock+0x28>)
1000d868:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d86a:	4b06      	ldr	r3, [pc, #24]	; (1000d884 <init_clock+0x2c>)
1000d86c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d86e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d870:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d872:	4770      	bx	lr
1000d874:	4000b00c 	.word	0x4000b00c
1000d878:	fffe0fd3 	.word	0xfffe0fd3
1000d87c:	1001aa1c 	.word	0x1001aa1c
1000d880:	4000b010 	.word	0x4000b010
1000d884:	ffffe7c0 	.word	0xffffe7c0

1000d888 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d888:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d88a:	4657      	mov	r7, sl
1000d88c:	464e      	mov	r6, r9
1000d88e:	4645      	mov	r5, r8
1000d890:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d892:	4b4f      	ldr	r3, [pc, #316]	; (1000d9d0 <platform_driver_init+0x148>)
1000d894:	781b      	ldrb	r3, [r3, #0]
1000d896:	2b00      	cmp	r3, #0
1000d898:	d004      	beq.n	1000d8a4 <platform_driver_init+0x1c>
1000d89a:	4b4d      	ldr	r3, [pc, #308]	; (1000d9d0 <platform_driver_init+0x148>)
1000d89c:	781b      	ldrb	r3, [r3, #0]
1000d89e:	2b01      	cmp	r3, #1
1000d8a0:	d100      	bne.n	1000d8a4 <platform_driver_init+0x1c>
1000d8a2:	e08c      	b.n	1000d9be <platform_driver_init+0x136>
		init_port_list();
1000d8a4:	4b4b      	ldr	r3, [pc, #300]	; (1000d9d4 <platform_driver_init+0x14c>)
1000d8a6:	4798      	blx	r3
		init_clock();
1000d8a8:	4b4b      	ldr	r3, [pc, #300]	; (1000d9d8 <platform_driver_init+0x150>)
1000d8aa:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d8ac:	2300      	movs	r3, #0
1000d8ae:	4698      	mov	r8, r3
1000d8b0:	4b4a      	ldr	r3, [pc, #296]	; (1000d9dc <platform_driver_init+0x154>)
1000d8b2:	4642      	mov	r2, r8
1000d8b4:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d8b6:	4c4a      	ldr	r4, [pc, #296]	; (1000d9e0 <platform_driver_init+0x158>)
1000d8b8:	2380      	movs	r3, #128	; 0x80
1000d8ba:	2280      	movs	r2, #128	; 0x80
1000d8bc:	0412      	lsls	r2, r2, #16
1000d8be:	4692      	mov	sl, r2
1000d8c0:	50e2      	str	r2, [r4, r3]
1000d8c2:	2280      	movs	r2, #128	; 0x80
1000d8c4:	0452      	lsls	r2, r2, #17
1000d8c6:	4691      	mov	r9, r2
1000d8c8:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d8ca:	4d46      	ldr	r5, [pc, #280]	; (1000d9e4 <platform_driver_init+0x15c>)
1000d8cc:	4b46      	ldr	r3, [pc, #280]	; (1000d9e8 <platform_driver_init+0x160>)
1000d8ce:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d8d0:	4b46      	ldr	r3, [pc, #280]	; (1000d9ec <platform_driver_init+0x164>)
1000d8d2:	4a47      	ldr	r2, [pc, #284]	; (1000d9f0 <platform_driver_init+0x168>)
1000d8d4:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d8d6:	4947      	ldr	r1, [pc, #284]	; (1000d9f4 <platform_driver_init+0x16c>)
1000d8d8:	4a47      	ldr	r2, [pc, #284]	; (1000d9f8 <platform_driver_init+0x170>)
1000d8da:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d8dc:	4a47      	ldr	r2, [pc, #284]	; (1000d9fc <platform_driver_init+0x174>)
1000d8de:	6811      	ldr	r1, [r2, #0]
1000d8e0:	4a47      	ldr	r2, [pc, #284]	; (1000da00 <platform_driver_init+0x178>)
1000d8e2:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d8e4:	4a47      	ldr	r2, [pc, #284]	; (1000da04 <platform_driver_init+0x17c>)
1000d8e6:	6811      	ldr	r1, [r2, #0]
1000d8e8:	4a47      	ldr	r2, [pc, #284]	; (1000da08 <platform_driver_init+0x180>)
1000d8ea:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d8ec:	4947      	ldr	r1, [pc, #284]	; (1000da0c <platform_driver_init+0x184>)
1000d8ee:	4a48      	ldr	r2, [pc, #288]	; (1000da10 <platform_driver_init+0x188>)
1000d8f0:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d8f2:	4948      	ldr	r1, [pc, #288]	; (1000da14 <platform_driver_init+0x18c>)
1000d8f4:	4a48      	ldr	r2, [pc, #288]	; (1000da18 <platform_driver_init+0x190>)
1000d8f6:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d8f8:	4f48      	ldr	r7, [pc, #288]	; (1000da1c <platform_driver_init+0x194>)
1000d8fa:	4a49      	ldr	r2, [pc, #292]	; (1000da20 <platform_driver_init+0x198>)
1000d8fc:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d8fe:	4949      	ldr	r1, [pc, #292]	; (1000da24 <platform_driver_init+0x19c>)
1000d900:	4a49      	ldr	r2, [pc, #292]	; (1000da28 <platform_driver_init+0x1a0>)
1000d902:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d904:	4949      	ldr	r1, [pc, #292]	; (1000da2c <platform_driver_init+0x1a4>)
1000d906:	4a4a      	ldr	r2, [pc, #296]	; (1000da30 <platform_driver_init+0x1a8>)
1000d908:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d90a:	4e4a      	ldr	r6, [pc, #296]	; (1000da34 <platform_driver_init+0x1ac>)
1000d90c:	4a4a      	ldr	r2, [pc, #296]	; (1000da38 <platform_driver_init+0x1b0>)
1000d90e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d910:	494a      	ldr	r1, [pc, #296]	; (1000da3c <platform_driver_init+0x1b4>)
1000d912:	4a4b      	ldr	r2, [pc, #300]	; (1000da40 <platform_driver_init+0x1b8>)
1000d914:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d916:	494b      	ldr	r1, [pc, #300]	; (1000da44 <platform_driver_init+0x1bc>)
1000d918:	4a4b      	ldr	r2, [pc, #300]	; (1000da48 <platform_driver_init+0x1c0>)
1000d91a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d91c:	494b      	ldr	r1, [pc, #300]	; (1000da4c <platform_driver_init+0x1c4>)
1000d91e:	4a4c      	ldr	r2, [pc, #304]	; (1000da50 <platform_driver_init+0x1c8>)
1000d920:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d922:	494c      	ldr	r1, [pc, #304]	; (1000da54 <platform_driver_init+0x1cc>)
1000d924:	4a4c      	ldr	r2, [pc, #304]	; (1000da58 <platform_driver_init+0x1d0>)
1000d926:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d928:	494c      	ldr	r1, [pc, #304]	; (1000da5c <platform_driver_init+0x1d4>)
1000d92a:	4a4d      	ldr	r2, [pc, #308]	; (1000da60 <platform_driver_init+0x1d8>)
1000d92c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d92e:	2028      	movs	r0, #40	; 0x28
1000d930:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d932:	494c      	ldr	r1, [pc, #304]	; (1000da64 <platform_driver_init+0x1dc>)
1000d934:	2028      	movs	r0, #40	; 0x28
1000d936:	682b      	ldr	r3, [r5, #0]
1000d938:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d93a:	682b      	ldr	r3, [r5, #0]
1000d93c:	494a      	ldr	r1, [pc, #296]	; (1000da68 <platform_driver_init+0x1e0>)
1000d93e:	2027      	movs	r0, #39	; 0x27
1000d940:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d942:	4b4a      	ldr	r3, [pc, #296]	; (1000da6c <platform_driver_init+0x1e4>)
1000d944:	681a      	ldr	r2, [r3, #0]
1000d946:	4b4a      	ldr	r3, [pc, #296]	; (1000da70 <platform_driver_init+0x1e8>)
1000d948:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d94a:	4a4a      	ldr	r2, [pc, #296]	; (1000da74 <platform_driver_init+0x1ec>)
1000d94c:	4b4a      	ldr	r3, [pc, #296]	; (1000da78 <platform_driver_init+0x1f0>)
1000d94e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d950:	4a4a      	ldr	r2, [pc, #296]	; (1000da7c <platform_driver_init+0x1f4>)
1000d952:	4b4b      	ldr	r3, [pc, #300]	; (1000da80 <platform_driver_init+0x1f8>)
1000d954:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d956:	4a4b      	ldr	r2, [pc, #300]	; (1000da84 <platform_driver_init+0x1fc>)
1000d958:	4b4b      	ldr	r3, [pc, #300]	; (1000da88 <platform_driver_init+0x200>)
1000d95a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d95c:	4a4b      	ldr	r2, [pc, #300]	; (1000da8c <platform_driver_init+0x204>)
1000d95e:	4b4c      	ldr	r3, [pc, #304]	; (1000da90 <platform_driver_init+0x208>)
1000d960:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d962:	4a4c      	ldr	r2, [pc, #304]	; (1000da94 <platform_driver_init+0x20c>)
1000d964:	4b4c      	ldr	r3, [pc, #304]	; (1000da98 <platform_driver_init+0x210>)
1000d966:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d968:	4a4c      	ldr	r2, [pc, #304]	; (1000da9c <platform_driver_init+0x214>)
1000d96a:	4b4d      	ldr	r3, [pc, #308]	; (1000daa0 <platform_driver_init+0x218>)
1000d96c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d96e:	4a4d      	ldr	r2, [pc, #308]	; (1000daa4 <platform_driver_init+0x21c>)
1000d970:	4b4d      	ldr	r3, [pc, #308]	; (1000daa8 <platform_driver_init+0x220>)
1000d972:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d974:	22a0      	movs	r2, #160	; 0xa0
1000d976:	0092      	lsls	r2, r2, #2
1000d978:	2100      	movs	r1, #0
1000d97a:	484c      	ldr	r0, [pc, #304]	; (1000daac <platform_driver_init+0x224>)
1000d97c:	4b4c      	ldr	r3, [pc, #304]	; (1000dab0 <platform_driver_init+0x228>)
1000d97e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d980:	2280      	movs	r2, #128	; 0x80
1000d982:	0092      	lsls	r2, r2, #2
1000d984:	4b4b      	ldr	r3, [pc, #300]	; (1000dab4 <platform_driver_init+0x22c>)
1000d986:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d988:	4b4b      	ldr	r3, [pc, #300]	; (1000dab8 <platform_driver_init+0x230>)
1000d98a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d98c:	4653      	mov	r3, sl
1000d98e:	6023      	str	r3, [r4, #0]
1000d990:	464b      	mov	r3, r9
1000d992:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d994:	4b49      	ldr	r3, [pc, #292]	; (1000dabc <platform_driver_init+0x234>)
1000d996:	4642      	mov	r2, r8
1000d998:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d99a:	683b      	ldr	r3, [r7, #0]
1000d99c:	4a48      	ldr	r2, [pc, #288]	; (1000dac0 <platform_driver_init+0x238>)
1000d99e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d9a0:	6833      	ldr	r3, [r6, #0]
1000d9a2:	4a48      	ldr	r2, [pc, #288]	; (1000dac4 <platform_driver_init+0x23c>)
1000d9a4:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d9a6:	2000      	movs	r0, #0
1000d9a8:	4c47      	ldr	r4, [pc, #284]	; (1000dac8 <platform_driver_init+0x240>)
1000d9aa:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d9ac:	2001      	movs	r0, #1
1000d9ae:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d9b0:	2002      	movs	r0, #2
1000d9b2:	47a0      	blx	r4
		platform_initialized = 1;
1000d9b4:	2201      	movs	r2, #1
1000d9b6:	4b06      	ldr	r3, [pc, #24]	; (1000d9d0 <platform_driver_init+0x148>)
1000d9b8:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d9ba:	2000      	movs	r0, #0
1000d9bc:	e003      	b.n	1000d9c6 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d9be:	2201      	movs	r2, #1
1000d9c0:	4b03      	ldr	r3, [pc, #12]	; (1000d9d0 <platform_driver_init+0x148>)
1000d9c2:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d9c4:	2001      	movs	r0, #1
	}
	return status;
}
1000d9c6:	bc1c      	pop	{r2, r3, r4}
1000d9c8:	4690      	mov	r8, r2
1000d9ca:	4699      	mov	r9, r3
1000d9cc:	46a2      	mov	sl, r4
1000d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9d0:	10019d64 	.word	0x10019d64
1000d9d4:	1000d815 	.word	0x1000d815
1000d9d8:	1000d859 	.word	0x1000d859
1000d9dc:	10019d84 	.word	0x10019d84
1000d9e0:	e000e100 	.word	0xe000e100
1000d9e4:	1001acec 	.word	0x1001acec
1000d9e8:	000007d7 	.word	0x000007d7
1000d9ec:	000007bd 	.word	0x000007bd
1000d9f0:	1001aa28 	.word	0x1001aa28
1000d9f4:	0001bc51 	.word	0x0001bc51
1000d9f8:	1001acf0 	.word	0x1001acf0
1000d9fc:	100400bc 	.word	0x100400bc
1000da00:	10019d58 	.word	0x10019d58
1000da04:	100400b8 	.word	0x100400b8
1000da08:	10019d54 	.word	0x10019d54
1000da0c:	0001b99f 	.word	0x0001b99f
1000da10:	1001aa24 	.word	0x1001aa24
1000da14:	0001b9db 	.word	0x0001b9db
1000da18:	1001aa30 	.word	0x1001aa30
1000da1c:	1001ad00 	.word	0x1001ad00
1000da20:	1004003c 	.word	0x1004003c
1000da24:	10041fc0 	.word	0x10041fc0
1000da28:	1001aa34 	.word	0x1001aa34
1000da2c:	10041fc4 	.word	0x10041fc4
1000da30:	1001acfc 	.word	0x1001acfc
1000da34:	1001acf4 	.word	0x1001acf4
1000da38:	10041fd4 	.word	0x10041fd4
1000da3c:	10041fd8 	.word	0x10041fd8
1000da40:	1001aa2c 	.word	0x1001aa2c
1000da44:	0001cbe9 	.word	0x0001cbe9
1000da48:	10019d78 	.word	0x10019d78
1000da4c:	0001cd8f 	.word	0x0001cd8f
1000da50:	10019d68 	.word	0x10019d68
1000da54:	0001cea3 	.word	0x0001cea3
1000da58:	10019d8c 	.word	0x10019d8c
1000da5c:	0001cbcf 	.word	0x0001cbcf
1000da60:	10019d60 	.word	0x10019d60
1000da64:	1000df11 	.word	0x1000df11
1000da68:	1000dea5 	.word	0x1000dea5
1000da6c:	100400e4 	.word	0x100400e4
1000da70:	10019d80 	.word	0x10019d80
1000da74:	00019fe9 	.word	0x00019fe9
1000da78:	10019d90 	.word	0x10019d90
1000da7c:	0001dbdd 	.word	0x0001dbdd
1000da80:	10019d5c 	.word	0x10019d5c
1000da84:	0001dc5b 	.word	0x0001dc5b
1000da88:	10019d70 	.word	0x10019d70
1000da8c:	100405ec 	.word	0x100405ec
1000da90:	10019d6c 	.word	0x10019d6c
1000da94:	0001d5e3 	.word	0x0001d5e3
1000da98:	10019d7c 	.word	0x10019d7c
1000da9c:	10040c20 	.word	0x10040c20
1000daa0:	10019d94 	.word	0x10019d94
1000daa4:	00019f09 	.word	0x00019f09
1000daa8:	10019d50 	.word	0x10019d50
1000daac:	1001aa6c 	.word	0x1001aa6c
1000dab0:	100156d1 	.word	0x100156d1
1000dab4:	1001ad04 	.word	0x1001ad04
1000dab8:	1000d741 	.word	0x1000d741
1000dabc:	1001acf8 	.word	0x1001acf8
1000dac0:	1000d7e9 	.word	0x1000d7e9
1000dac4:	1000df6d 	.word	0x1000df6d
1000dac8:	1000df55 	.word	0x1000df55

1000dacc <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dacc:	4b04      	ldr	r3, [pc, #16]	; (1000dae0 <platform_register_ble_msg_handler+0x14>)
1000dace:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000dad0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dad2:	2a01      	cmp	r2, #1
1000dad4:	d102      	bne.n	1000dadc <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000dad6:	4b03      	ldr	r3, [pc, #12]	; (1000dae4 <platform_register_ble_msg_handler+0x18>)
1000dad8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000dada:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000dadc:	0018      	movs	r0, r3
1000dade:	4770      	bx	lr
1000dae0:	10019d64 	.word	0x10019d64
1000dae4:	10019d84 	.word	0x10019d84

1000dae8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000dae8:	b570      	push	{r4, r5, r6, lr}
1000daea:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000daec:	4b0e      	ldr	r3, [pc, #56]	; (1000db28 <platform_interface_send+0x40>)
1000daee:	681b      	ldr	r3, [r3, #0]
1000daf0:	2b00      	cmp	r3, #0
1000daf2:	d002      	beq.n	1000dafa <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000daf4:	8840      	ldrh	r0, [r0, #2]
1000daf6:	4798      	blx	r3
1000daf8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000dafa:	88e3      	ldrh	r3, [r4, #6]
1000dafc:	88a2      	ldrh	r2, [r4, #4]
1000dafe:	8861      	ldrh	r1, [r4, #2]
1000db00:	8820      	ldrh	r0, [r4, #0]
1000db02:	4d0a      	ldr	r5, [pc, #40]	; (1000db2c <platform_interface_send+0x44>)
1000db04:	682d      	ldr	r5, [r5, #0]
1000db06:	47a8      	blx	r5
1000db08:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000db0a:	88e2      	ldrh	r2, [r4, #6]
1000db0c:	2a00      	cmp	r2, #0
1000db0e:	d102      	bne.n	1000db16 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000db10:	4b07      	ldr	r3, [pc, #28]	; (1000db30 <platform_interface_send+0x48>)
1000db12:	4798      	blx	r3
1000db14:	e006      	b.n	1000db24 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000db16:	0021      	movs	r1, r4
1000db18:	3108      	adds	r1, #8
1000db1a:	4b06      	ldr	r3, [pc, #24]	; (1000db34 <platform_interface_send+0x4c>)
1000db1c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000db1e:	0028      	movs	r0, r5
1000db20:	4b03      	ldr	r3, [pc, #12]	; (1000db30 <platform_interface_send+0x48>)
1000db22:	4798      	blx	r3
	}
}
1000db24:	bd70      	pop	{r4, r5, r6, pc}
1000db26:	46c0      	nop			; (mov r8, r8)
1000db28:	10019d58 	.word	0x10019d58
1000db2c:	10019d90 	.word	0x10019d90
1000db30:	1000d771 	.word	0x1000d771
1000db34:	100156bf 	.word	0x100156bf

1000db38 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000db38:	b570      	push	{r4, r5, r6, lr}
1000db3a:	0015      	movs	r5, r2
1000db3c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000db3e:	020a      	lsls	r2, r1, #8
1000db40:	4302      	orrs	r2, r0
1000db42:	4b0a      	ldr	r3, [pc, #40]	; (1000db6c <send_plf_int_msg_ind+0x34>)
1000db44:	681e      	ldr	r6, [r3, #0]
1000db46:	0023      	movs	r3, r4
1000db48:	2105      	movs	r1, #5
1000db4a:	20a0      	movs	r0, #160	; 0xa0
1000db4c:	00c0      	lsls	r0, r0, #3
1000db4e:	47b0      	blx	r6
1000db50:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000db52:	d00a      	beq.n	1000db6a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000db54:	2c00      	cmp	r4, #0
1000db56:	d005      	beq.n	1000db64 <send_plf_int_msg_ind+0x2c>
1000db58:	2d00      	cmp	r5, #0
1000db5a:	d003      	beq.n	1000db64 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000db5c:	0022      	movs	r2, r4
1000db5e:	0029      	movs	r1, r5
1000db60:	4b03      	ldr	r3, [pc, #12]	; (1000db70 <send_plf_int_msg_ind+0x38>)
1000db62:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000db64:	0030      	movs	r0, r6
1000db66:	4b03      	ldr	r3, [pc, #12]	; (1000db74 <send_plf_int_msg_ind+0x3c>)
1000db68:	4798      	blx	r3
	}
}
1000db6a:	bd70      	pop	{r4, r5, r6, pc}
1000db6c:	10019d90 	.word	0x10019d90
1000db70:	100156bf 	.word	0x100156bf
1000db74:	1000d771 	.word	0x1000d771

1000db78 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000db78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db7a:	465f      	mov	r7, fp
1000db7c:	4656      	mov	r6, sl
1000db7e:	464d      	mov	r5, r9
1000db80:	4644      	mov	r4, r8
1000db82:	b4f0      	push	{r4, r5, r6, r7}
1000db84:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000db86:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000db88:	2300      	movs	r3, #0
1000db8a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000db8c:	1ce3      	adds	r3, r4, #3
1000db8e:	d81c      	bhi.n	1000dbca <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000db90:	220d      	movs	r2, #13
1000db92:	2100      	movs	r1, #0
1000db94:	a802      	add	r0, sp, #8
1000db96:	4b82      	ldr	r3, [pc, #520]	; (1000dda0 <platform_event_wait+0x228>)
1000db98:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000db9a:	2333      	movs	r3, #51	; 0x33
1000db9c:	aa02      	add	r2, sp, #8
1000db9e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dba0:	3b30      	subs	r3, #48	; 0x30
1000dba2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dba4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dba6:	3302      	adds	r3, #2
1000dba8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dbaa:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000dbac:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000dbae:	0a23      	lsrs	r3, r4, #8
1000dbb0:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000dbb2:	0c23      	lsrs	r3, r4, #16
1000dbb4:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000dbb6:	0e24      	lsrs	r4, r4, #24
1000dbb8:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000dbba:	2301      	movs	r3, #1
1000dbbc:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000dbbe:	210d      	movs	r1, #13
1000dbc0:	0010      	movs	r0, r2
1000dbc2:	4b78      	ldr	r3, [pc, #480]	; (1000dda4 <platform_event_wait+0x22c>)
1000dbc4:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000dbc6:	2301      	movs	r3, #1
1000dbc8:	4699      	mov	r9, r3
1000dbca:	2400      	movs	r4, #0
1000dbcc:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000dbce:	4f76      	ldr	r7, [pc, #472]	; (1000dda8 <platform_event_wait+0x230>)
1000dbd0:	4e76      	ldr	r6, [pc, #472]	; (1000ddac <platform_event_wait+0x234>)
1000dbd2:	4977      	ldr	r1, [pc, #476]	; (1000ddb0 <platform_event_wait+0x238>)
1000dbd4:	6838      	ldr	r0, [r7, #0]
1000dbd6:	6833      	ldr	r3, [r6, #0]
1000dbd8:	4798      	blx	r3
1000dbda:	2800      	cmp	r0, #0
1000dbdc:	d000      	beq.n	1000dbe0 <platform_event_wait+0x68>
1000dbde:	e088      	b.n	1000dcf2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000dbe0:	4b73      	ldr	r3, [pc, #460]	; (1000ddb0 <platform_event_wait+0x238>)
1000dbe2:	681c      	ldr	r4, [r3, #0]
1000dbe4:	88a3      	ldrh	r3, [r4, #4]
1000dbe6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dbe8:	23cd      	movs	r3, #205	; 0xcd
1000dbea:	009b      	lsls	r3, r3, #2
1000dbec:	459a      	cmp	sl, r3
1000dbee:	d100      	bne.n	1000dbf2 <platform_event_wait+0x7a>
1000dbf0:	e0c7      	b.n	1000dd82 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000dbf2:	8923      	ldrh	r3, [r4, #8]
1000dbf4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000dbf6:	8963      	ldrh	r3, [r4, #10]
1000dbf8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dbfa:	464b      	mov	r3, r9
1000dbfc:	2b00      	cmp	r3, #0
1000dbfe:	d011      	beq.n	1000dc24 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000dc00:	220d      	movs	r2, #13
1000dc02:	2100      	movs	r1, #0
1000dc04:	a802      	add	r0, sp, #8
1000dc06:	4b66      	ldr	r3, [pc, #408]	; (1000dda0 <platform_event_wait+0x228>)
1000dc08:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000dc0a:	2333      	movs	r3, #51	; 0x33
1000dc0c:	aa02      	add	r2, sp, #8
1000dc0e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dc10:	3b30      	subs	r3, #48	; 0x30
1000dc12:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dc14:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dc16:	3302      	adds	r3, #2
1000dc18:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dc1a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000dc1c:	210d      	movs	r1, #13
1000dc1e:	0010      	movs	r0, r2
1000dc20:	4b60      	ldr	r3, [pc, #384]	; (1000dda4 <platform_event_wait+0x22c>)
1000dc22:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000dc24:	23a0      	movs	r3, #160	; 0xa0
1000dc26:	00db      	lsls	r3, r3, #3
1000dc28:	459a      	cmp	sl, r3
1000dc2a:	d121      	bne.n	1000dc70 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000dc2c:	4b61      	ldr	r3, [pc, #388]	; (1000ddb4 <platform_event_wait+0x23c>)
1000dc2e:	881b      	ldrh	r3, [r3, #0]
1000dc30:	4443      	add	r3, r8
1000dc32:	22a0      	movs	r2, #160	; 0xa0
1000dc34:	0092      	lsls	r2, r2, #2
1000dc36:	4293      	cmp	r3, r2
1000dc38:	dd02      	ble.n	1000dc40 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dc3a:	3a80      	subs	r2, #128	; 0x80
1000dc3c:	4b5d      	ldr	r3, [pc, #372]	; (1000ddb4 <platform_event_wait+0x23c>)
1000dc3e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000dc40:	4b5c      	ldr	r3, [pc, #368]	; (1000ddb4 <platform_event_wait+0x23c>)
1000dc42:	469a      	mov	sl, r3
1000dc44:	881d      	ldrh	r5, [r3, #0]
1000dc46:	4b5c      	ldr	r3, [pc, #368]	; (1000ddb8 <platform_event_wait+0x240>)
1000dc48:	18ed      	adds	r5, r5, r3
1000dc4a:	0021      	movs	r1, r4
1000dc4c:	310c      	adds	r1, #12
1000dc4e:	4642      	mov	r2, r8
1000dc50:	0028      	movs	r0, r5
1000dc52:	4b5a      	ldr	r3, [pc, #360]	; (1000ddbc <platform_event_wait+0x244>)
1000dc54:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000dc56:	4642      	mov	r2, r8
1000dc58:	0029      	movs	r1, r5
1000dc5a:	4658      	mov	r0, fp
1000dc5c:	4b58      	ldr	r3, [pc, #352]	; (1000ddc0 <platform_event_wait+0x248>)
1000dc5e:	4798      	blx	r3
				plf_event_buff_index += len;
1000dc60:	4653      	mov	r3, sl
1000dc62:	881b      	ldrh	r3, [r3, #0]
1000dc64:	4443      	add	r3, r8
1000dc66:	4652      	mov	r2, sl
1000dc68:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dc6a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000dc6c:	2502      	movs	r5, #2
1000dc6e:	e03a      	b.n	1000dce6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dc70:	4b54      	ldr	r3, [pc, #336]	; (1000ddc4 <platform_event_wait+0x24c>)
1000dc72:	681b      	ldr	r3, [r3, #0]
1000dc74:	2b00      	cmp	r3, #0
1000dc76:	d032      	beq.n	1000dcde <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000dc78:	4b4d      	ldr	r3, [pc, #308]	; (1000ddb0 <platform_event_wait+0x238>)
1000dc7a:	681a      	ldr	r2, [r3, #0]
1000dc7c:	8893      	ldrh	r3, [r2, #4]
1000dc7e:	21cd      	movs	r1, #205	; 0xcd
1000dc80:	0089      	lsls	r1, r1, #2
1000dc82:	428b      	cmp	r3, r1
1000dc84:	d104      	bne.n	1000dc90 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000dc86:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000dc88:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000dc8a:	2b00      	cmp	r3, #0
1000dc8c:	d02b      	beq.n	1000dce6 <platform_event_wait+0x16e>
1000dc8e:	e028      	b.n	1000dce2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000dc90:	4c4d      	ldr	r4, [pc, #308]	; (1000ddc8 <platform_event_wait+0x250>)
1000dc92:	4d49      	ldr	r5, [pc, #292]	; (1000ddb8 <platform_event_wait+0x240>)
1000dc94:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000dc96:	702b      	strb	r3, [r5, #0]
1000dc98:	0a1b      	lsrs	r3, r3, #8
1000dc9a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000dc9c:	8910      	ldrh	r0, [r2, #8]
1000dc9e:	4b4b      	ldr	r3, [pc, #300]	; (1000ddcc <platform_event_wait+0x254>)
1000dca0:	681b      	ldr	r3, [r3, #0]
1000dca2:	4798      	blx	r3
1000dca4:	7128      	strb	r0, [r5, #4]
1000dca6:	0a00      	lsrs	r0, r0, #8
1000dca8:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000dcaa:	6820      	ldr	r0, [r4, #0]
1000dcac:	4b40      	ldr	r3, [pc, #256]	; (1000ddb0 <platform_event_wait+0x238>)
1000dcae:	681a      	ldr	r2, [r3, #0]
1000dcb0:	88d2      	ldrh	r2, [r2, #6]
1000dcb2:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000dcb4:	681d      	ldr	r5, [r3, #0]
1000dcb6:	896b      	ldrh	r3, [r5, #10]
1000dcb8:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000dcba:	3008      	adds	r0, #8
1000dcbc:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000dcbe:	896a      	ldrh	r2, [r5, #10]
1000dcc0:	2a00      	cmp	r2, #0
1000dcc2:	d003      	beq.n	1000dccc <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000dcc4:	0029      	movs	r1, r5
1000dcc6:	310c      	adds	r1, #12
1000dcc8:	4b3c      	ldr	r3, [pc, #240]	; (1000ddbc <platform_event_wait+0x244>)
1000dcca:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000dccc:	8969      	ldrh	r1, [r5, #10]
1000dcce:	3108      	adds	r1, #8
1000dcd0:	4b3c      	ldr	r3, [pc, #240]	; (1000ddc4 <platform_event_wait+0x24c>)
1000dcd2:	681b      	ldr	r3, [r3, #0]
1000dcd4:	4838      	ldr	r0, [pc, #224]	; (1000ddb8 <platform_event_wait+0x240>)
1000dcd6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dcd8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000dcda:	2503      	movs	r5, #3
1000dcdc:	e003      	b.n	1000dce6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dcde:	2400      	movs	r4, #0
1000dce0:	e001      	b.n	1000dce6 <platform_event_wait+0x16e>
1000dce2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000dce4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000dce6:	4b32      	ldr	r3, [pc, #200]	; (1000ddb0 <platform_event_wait+0x238>)
1000dce8:	6818      	ldr	r0, [r3, #0]
1000dcea:	4b39      	ldr	r3, [pc, #228]	; (1000ddd0 <platform_event_wait+0x258>)
1000dcec:	681b      	ldr	r3, [r3, #0]
1000dcee:	4798      	blx	r3
1000dcf0:	e000      	b.n	1000dcf4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000dcf2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000dcf4:	2c00      	cmp	r4, #0
1000dcf6:	d000      	beq.n	1000dcfa <platform_event_wait+0x182>
1000dcf8:	e76b      	b.n	1000dbd2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000dcfa:	464b      	mov	r3, r9
1000dcfc:	2b00      	cmp	r3, #0
1000dcfe:	d046      	beq.n	1000dd8e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000dd00:	4b29      	ldr	r3, [pc, #164]	; (1000dda8 <platform_event_wait+0x230>)
1000dd02:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000dd04:	2e00      	cmp	r6, #0
1000dd06:	d104      	bne.n	1000dd12 <platform_event_wait+0x19a>
1000dd08:	2300      	movs	r3, #0
1000dd0a:	6a1c      	ldr	r4, [r3, #32]
1000dd0c:	2c00      	cmp	r4, #0
1000dd0e:	d131      	bne.n	1000dd74 <platform_event_wait+0x1fc>
1000dd10:	e03d      	b.n	1000dd8e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000dd12:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000dd14:	2314      	movs	r3, #20
1000dd16:	469c      	mov	ip, r3
1000dd18:	44b4      	add	ip, r6
1000dd1a:	4663      	mov	r3, ip
1000dd1c:	4660      	mov	r0, ip
1000dd1e:	9300      	str	r3, [sp, #0]
1000dd20:	4b2c      	ldr	r3, [pc, #176]	; (1000ddd4 <platform_event_wait+0x25c>)
1000dd22:	681b      	ldr	r3, [r3, #0]
1000dd24:	4798      	blx	r3
	while(NULL != current)
1000dd26:	2c00      	cmp	r4, #0
1000dd28:	d01f      	beq.n	1000dd6a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000dd2a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000dd2c:	23cd      	movs	r3, #205	; 0xcd
1000dd2e:	009b      	lsls	r3, r3, #2
1000dd30:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000dd32:	4b27      	ldr	r3, [pc, #156]	; (1000ddd0 <platform_event_wait+0x258>)
1000dd34:	469a      	mov	sl, r3
1000dd36:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000dd38:	6803      	ldr	r3, [r0, #0]
1000dd3a:	889b      	ldrh	r3, [r3, #4]
1000dd3c:	4543      	cmp	r3, r8
1000dd3e:	d110      	bne.n	1000dd62 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000dd40:	2f00      	cmp	r7, #0
1000dd42:	d006      	beq.n	1000dd52 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000dd44:	6883      	ldr	r3, [r0, #8]
1000dd46:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000dd48:	4653      	mov	r3, sl
1000dd4a:	681b      	ldr	r3, [r3, #0]
1000dd4c:	4798      	blx	r3
				current = prev->pstrNext;
1000dd4e:	68b8      	ldr	r0, [r7, #8]
1000dd50:	e009      	b.n	1000dd66 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000dd52:	6883      	ldr	r3, [r0, #8]
1000dd54:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000dd56:	4b1e      	ldr	r3, [pc, #120]	; (1000ddd0 <platform_event_wait+0x258>)
1000dd58:	681b      	ldr	r3, [r3, #0]
1000dd5a:	9301      	str	r3, [sp, #4]
1000dd5c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000dd5e:	6a30      	ldr	r0, [r6, #32]
1000dd60:	e001      	b.n	1000dd66 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000dd62:	0007      	movs	r7, r0
1000dd64:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000dd66:	2800      	cmp	r0, #0
1000dd68:	d1e6      	bne.n	1000dd38 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000dd6a:	4b1b      	ldr	r3, [pc, #108]	; (1000ddd8 <platform_event_wait+0x260>)
1000dd6c:	681b      	ldr	r3, [r3, #0]
1000dd6e:	9800      	ldr	r0, [sp, #0]
1000dd70:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000dd72:	e00c      	b.n	1000dd8e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000dd74:	2314      	movs	r3, #20
1000dd76:	9300      	str	r3, [sp, #0]
1000dd78:	4b16      	ldr	r3, [pc, #88]	; (1000ddd4 <platform_event_wait+0x25c>)
1000dd7a:	681b      	ldr	r3, [r3, #0]
1000dd7c:	2014      	movs	r0, #20
1000dd7e:	4798      	blx	r3
1000dd80:	e7d3      	b.n	1000dd2a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dd82:	4b10      	ldr	r3, [pc, #64]	; (1000ddc4 <platform_event_wait+0x24c>)
1000dd84:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dd86:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dd88:	2b00      	cmp	r3, #0
1000dd8a:	d0ac      	beq.n	1000dce6 <platform_event_wait+0x16e>
1000dd8c:	e77b      	b.n	1000dc86 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000dd8e:	0028      	movs	r0, r5
1000dd90:	b007      	add	sp, #28
1000dd92:	bc3c      	pop	{r2, r3, r4, r5}
1000dd94:	4690      	mov	r8, r2
1000dd96:	4699      	mov	r9, r3
1000dd98:	46a2      	mov	sl, r4
1000dd9a:	46ab      	mov	fp, r5
1000dd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd9e:	46c0      	nop			; (mov r8, r8)
1000dda0:	100156d1 	.word	0x100156d1
1000dda4:	1000dae9 	.word	0x1000dae9
1000dda8:	10019d94 	.word	0x10019d94
1000ddac:	10019d7c 	.word	0x10019d7c
1000ddb0:	10019d88 	.word	0x10019d88
1000ddb4:	1001ad04 	.word	0x1001ad04
1000ddb8:	1001aa6c 	.word	0x1001aa6c
1000ddbc:	100156bf 	.word	0x100156bf
1000ddc0:	1000d709 	.word	0x1000d709
1000ddc4:	10019d84 	.word	0x10019d84
1000ddc8:	10019d74 	.word	0x10019d74
1000ddcc:	10019d54 	.word	0x10019d54
1000ddd0:	10019d50 	.word	0x10019d50
1000ddd4:	10019d70 	.word	0x10019d70
1000ddd8:	10019d5c 	.word	0x10019d5c

1000dddc <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000dddc:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ddde:	4b03      	ldr	r3, [pc, #12]	; (1000ddec <acquire_sleep_lock+0x10>)
1000dde0:	681b      	ldr	r3, [r3, #0]
1000dde2:	2080      	movs	r0, #128	; 0x80
1000dde4:	0200      	lsls	r0, r0, #8
1000dde6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000dde8:	2008      	movs	r0, #8
1000ddea:	bd10      	pop	{r4, pc}
1000ddec:	1001aa24 	.word	0x1001aa24

1000ddf0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ddf0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ddf2:	4b03      	ldr	r3, [pc, #12]	; (1000de00 <release_message_lock+0x10>)
1000ddf4:	681b      	ldr	r3, [r3, #0]
1000ddf6:	2080      	movs	r0, #128	; 0x80
1000ddf8:	01c0      	lsls	r0, r0, #7
1000ddfa:	4798      	blx	r3
	return status;
}
1000ddfc:	2000      	movs	r0, #0
1000ddfe:	bd10      	pop	{r4, pc}
1000de00:	1001aa30 	.word	0x1001aa30

1000de04 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000de04:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000de06:	4c05      	ldr	r4, [pc, #20]	; (1000de1c <release_sleep_lock+0x18>)
1000de08:	2080      	movs	r0, #128	; 0x80
1000de0a:	01c0      	lsls	r0, r0, #7
1000de0c:	6823      	ldr	r3, [r4, #0]
1000de0e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000de10:	6823      	ldr	r3, [r4, #0]
1000de12:	2080      	movs	r0, #128	; 0x80
1000de14:	0200      	lsls	r0, r0, #8
1000de16:	4798      	blx	r3
	return status;
}
1000de18:	2000      	movs	r0, #0
1000de1a:	bd10      	pop	{r4, pc}
1000de1c:	1001aa30 	.word	0x1001aa30

1000de20 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000de20:	2800      	cmp	r0, #0
1000de22:	d003      	beq.n	1000de2c <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000de24:	4b02      	ldr	r3, [pc, #8]	; (1000de30 <register_resume_callback+0x10>)
1000de26:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000de28:	2000      	movs	r0, #0
1000de2a:	e000      	b.n	1000de2e <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000de2c:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000de2e:	4770      	bx	lr
1000de30:	1001acf8 	.word	0x1001acf8

1000de34 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000de34:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000de36:	4a18      	ldr	r2, [pc, #96]	; (1000de98 <gpio1_combined_isr_handler+0x64>)
1000de38:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000de3a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000de3c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000de3e:	2180      	movs	r1, #128	; 0x80
1000de40:	0209      	lsls	r1, r1, #8
1000de42:	4301      	orrs	r1, r0
1000de44:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000de46:	0010      	movs	r0, r2
1000de48:	4d14      	ldr	r5, [pc, #80]	; (1000de9c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000de4a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000de4c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000de4e:	05db      	lsls	r3, r3, #23
1000de50:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000de52:	d011      	beq.n	1000de78 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000de54:	b2db      	uxtb	r3, r3
1000de56:	4259      	negs	r1, r3
1000de58:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000de5a:	2b01      	cmp	r3, #1
1000de5c:	d006      	beq.n	1000de6c <gpio1_combined_isr_handler+0x38>
1000de5e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000de60:	085b      	lsrs	r3, r3, #1
				index++;
1000de62:	3101      	adds	r1, #1
1000de64:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000de66:	2b01      	cmp	r3, #1
1000de68:	d1fa      	bne.n	1000de60 <gpio1_combined_isr_handler+0x2c>
1000de6a:	e000      	b.n	1000de6e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000de6c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000de6e:	0023      	movs	r3, r4
1000de70:	408b      	lsls	r3, r1
1000de72:	b29b      	uxth	r3, r3
1000de74:	8703      	strh	r3, [r0, #56]	; 0x38
1000de76:	e003      	b.n	1000de80 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000de78:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000de7a:	432b      	orrs	r3, r5
1000de7c:	b29b      	uxth	r3, r3
1000de7e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000de80:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000de82:	05db      	lsls	r3, r3, #23
1000de84:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000de86:	d1e2      	bne.n	1000de4e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000de88:	2180      	movs	r1, #128	; 0x80
1000de8a:	0049      	lsls	r1, r1, #1
1000de8c:	3381      	adds	r3, #129	; 0x81
1000de8e:	33ff      	adds	r3, #255	; 0xff
1000de90:	4a03      	ldr	r2, [pc, #12]	; (1000dea0 <gpio1_combined_isr_handler+0x6c>)
1000de92:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000de94:	bd30      	pop	{r4, r5, pc}
1000de96:	46c0      	nop			; (mov r8, r8)
1000de98:	40011000 	.word	0x40011000
1000de9c:	ffff8000 	.word	0xffff8000
1000dea0:	e000e100 	.word	0xe000e100

1000dea4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000dea4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000dea6:	4a17      	ldr	r2, [pc, #92]	; (1000df04 <gpio0_combined_isr_handler+0x60>)
1000dea8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000deaa:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000deac:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000deae:	2180      	movs	r1, #128	; 0x80
1000deb0:	0209      	lsls	r1, r1, #8
1000deb2:	4301      	orrs	r1, r0
1000deb4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000deb6:	0010      	movs	r0, r2
1000deb8:	4d13      	ldr	r5, [pc, #76]	; (1000df08 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000deba:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000debc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000debe:	05db      	lsls	r3, r3, #23
1000dec0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000dec2:	d011      	beq.n	1000dee8 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000dec4:	b2db      	uxtb	r3, r3
1000dec6:	4259      	negs	r1, r3
1000dec8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000deca:	2b01      	cmp	r3, #1
1000decc:	d006      	beq.n	1000dedc <gpio0_combined_isr_handler+0x38>
1000dece:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ded0:	085b      	lsrs	r3, r3, #1
				index++;
1000ded2:	3101      	adds	r1, #1
1000ded4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ded6:	2b01      	cmp	r3, #1
1000ded8:	d1fa      	bne.n	1000ded0 <gpio0_combined_isr_handler+0x2c>
1000deda:	e000      	b.n	1000dede <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dedc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dede:	0023      	movs	r3, r4
1000dee0:	408b      	lsls	r3, r1
1000dee2:	b29b      	uxth	r3, r3
1000dee4:	8703      	strh	r3, [r0, #56]	; 0x38
1000dee6:	e003      	b.n	1000def0 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dee8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000deea:	432b      	orrs	r3, r5
1000deec:	b29b      	uxth	r3, r3
1000deee:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000def0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000def2:	05db      	lsls	r3, r3, #23
1000def4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000def6:	d1e2      	bne.n	1000debe <gpio0_combined_isr_handler+0x1a>
1000def8:	2180      	movs	r1, #128	; 0x80
1000defa:	3381      	adds	r3, #129	; 0x81
1000defc:	33ff      	adds	r3, #255	; 0xff
1000defe:	4a03      	ldr	r2, [pc, #12]	; (1000df0c <gpio0_combined_isr_handler+0x68>)
1000df00:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000df02:	bd30      	pop	{r4, r5, pc}
1000df04:	40010000 	.word	0x40010000
1000df08:	ffff8000 	.word	0xffff8000
1000df0c:	e000e100 	.word	0xe000e100

1000df10 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000df10:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000df12:	4b0c      	ldr	r3, [pc, #48]	; (1000df44 <PORT1_COMB_Handler+0x34>)
1000df14:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000df16:	0b5b      	lsrs	r3, r3, #13
1000df18:	d010      	beq.n	1000df3c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000df1a:	4b0b      	ldr	r3, [pc, #44]	; (1000df48 <PORT1_COMB_Handler+0x38>)
1000df1c:	681b      	ldr	r3, [r3, #0]
1000df1e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000df20:	4a08      	ldr	r2, [pc, #32]	; (1000df44 <PORT1_COMB_Handler+0x34>)
1000df22:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000df24:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000df26:	0b5b      	lsrs	r3, r3, #13
1000df28:	035b      	lsls	r3, r3, #13
1000df2a:	430b      	orrs	r3, r1
1000df2c:	8713      	strh	r3, [r2, #56]	; 0x38
1000df2e:	2180      	movs	r1, #128	; 0x80
1000df30:	0049      	lsls	r1, r1, #1
1000df32:	23c0      	movs	r3, #192	; 0xc0
1000df34:	005b      	lsls	r3, r3, #1
1000df36:	4a05      	ldr	r2, [pc, #20]	; (1000df4c <PORT1_COMB_Handler+0x3c>)
1000df38:	50d1      	str	r1, [r2, r3]
1000df3a:	e001      	b.n	1000df40 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000df3c:	4b04      	ldr	r3, [pc, #16]	; (1000df50 <PORT1_COMB_Handler+0x40>)
1000df3e:	4798      	blx	r3
	}
}
1000df40:	bd10      	pop	{r4, pc}
1000df42:	46c0      	nop			; (mov r8, r8)
1000df44:	40011000 	.word	0x40011000
1000df48:	1001acf0 	.word	0x1001acf0
1000df4c:	e000e100 	.word	0xe000e100
1000df50:	1000de35 	.word	0x1000de35

1000df54 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000df54:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000df56:	2802      	cmp	r0, #2
1000df58:	d804      	bhi.n	1000df64 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000df5a:	0080      	lsls	r0, r0, #2
1000df5c:	2200      	movs	r2, #0
1000df5e:	4b02      	ldr	r3, [pc, #8]	; (1000df68 <wakeup_int_unregister_callback+0x14>)
1000df60:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000df62:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000df64:	0018      	movs	r0, r3
1000df66:	4770      	bx	lr
1000df68:	1001ad08 	.word	0x1001ad08

1000df6c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000df6c:	b510      	push	{r4, lr}
1000df6e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000df70:	7803      	ldrb	r3, [r0, #0]
1000df72:	2b01      	cmp	r3, #1
1000df74:	d108      	bne.n	1000df88 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000df76:	4b11      	ldr	r3, [pc, #68]	; (1000dfbc <wakeup_active_event_callback+0x50>)
1000df78:	681b      	ldr	r3, [r3, #0]
1000df7a:	2b00      	cmp	r3, #0
1000df7c:	d000      	beq.n	1000df80 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000df7e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000df80:	23ff      	movs	r3, #255	; 0xff
1000df82:	6822      	ldr	r2, [r4, #0]
1000df84:	439a      	bics	r2, r3
1000df86:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000df88:	7863      	ldrb	r3, [r4, #1]
1000df8a:	2b01      	cmp	r3, #1
1000df8c:	d108      	bne.n	1000dfa0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000df8e:	4b0b      	ldr	r3, [pc, #44]	; (1000dfbc <wakeup_active_event_callback+0x50>)
1000df90:	685b      	ldr	r3, [r3, #4]
1000df92:	2b00      	cmp	r3, #0
1000df94:	d000      	beq.n	1000df98 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000df96:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000df98:	4b09      	ldr	r3, [pc, #36]	; (1000dfc0 <wakeup_active_event_callback+0x54>)
1000df9a:	6822      	ldr	r2, [r4, #0]
1000df9c:	4013      	ands	r3, r2
1000df9e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000dfa0:	78a3      	ldrb	r3, [r4, #2]
1000dfa2:	2b01      	cmp	r3, #1
1000dfa4:	d108      	bne.n	1000dfb8 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000dfa6:	4b05      	ldr	r3, [pc, #20]	; (1000dfbc <wakeup_active_event_callback+0x50>)
1000dfa8:	689b      	ldr	r3, [r3, #8]
1000dfaa:	2b00      	cmp	r3, #0
1000dfac:	d000      	beq.n	1000dfb0 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000dfae:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000dfb0:	4b04      	ldr	r3, [pc, #16]	; (1000dfc4 <wakeup_active_event_callback+0x58>)
1000dfb2:	6822      	ldr	r2, [r4, #0]
1000dfb4:	4013      	ands	r3, r2
1000dfb6:	6023      	str	r3, [r4, #0]
	}
}
1000dfb8:	bd10      	pop	{r4, pc}
1000dfba:	46c0      	nop			; (mov r8, r8)
1000dfbc:	1001ad08 	.word	0x1001ad08
1000dfc0:	ffff00ff 	.word	0xffff00ff
1000dfc4:	ff00ffff 	.word	0xff00ffff

1000dfc8 <resume_cb>:
	sms_button_init_variables();
	sms_pressure_init_variables();
}

static void resume_cb(void)
{
1000dfc8:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000dfca:	4b09      	ldr	r3, [pc, #36]	; (1000dff0 <resume_cb+0x28>)
1000dfcc:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000dfce:	4b09      	ldr	r3, [pc, #36]	; (1000dff4 <resume_cb+0x2c>)
1000dfd0:	4798      	blx	r3
	sms_dualtimer_init();
1000dfd2:	4b09      	ldr	r3, [pc, #36]	; (1000dff8 <resume_cb+0x30>)
1000dfd4:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000dfd6:	4b09      	ldr	r3, [pc, #36]	; (1000dffc <resume_cb+0x34>)
1000dfd8:	4798      	blx	r3
	sms_led_gpio_init();
1000dfda:	4b09      	ldr	r3, [pc, #36]	; (1000e000 <resume_cb+0x38>)
1000dfdc:	4798      	blx	r3
	sms_spi_master_configure();
1000dfde:	4b09      	ldr	r3, [pc, #36]	; (1000e004 <resume_cb+0x3c>)
1000dfe0:	4798      	blx	r3
	sms_i2c_master_configure();
1000dfe2:	4b09      	ldr	r3, [pc, #36]	; (1000e008 <resume_cb+0x40>)
1000dfe4:	4798      	blx	r3
	sms_imu_configure_gpio();
1000dfe6:	4b09      	ldr	r3, [pc, #36]	; (1000e00c <resume_cb+0x44>)
1000dfe8:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000dfea:	4b09      	ldr	r3, [pc, #36]	; (1000e010 <resume_cb+0x48>)
1000dfec:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000dfee:	bd10      	pop	{r4, pc}
1000dff0:	1000d815 	.word	0x1000d815
1000dff4:	1000d57d 	.word	0x1000d57d
1000dff8:	1000a1d1 	.word	0x1000a1d1
1000dffc:	10008b8d 	.word	0x10008b8d
1000e000:	10009cb9 	.word	0x10009cb9
1000e004:	1000a089 	.word	0x1000a089
1000e008:	10008f99 	.word	0x10008f99
1000e00c:	1000912d 	.word	0x1000912d
1000e010:	10008ec1 	.word	0x10008ec1

1000e014 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e014:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000e016:	2300      	movs	r3, #0
1000e018:	4a09      	ldr	r2, [pc, #36]	; (1000e040 <sms_init_variables+0x2c>)
1000e01a:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000e01c:	4a09      	ldr	r2, [pc, #36]	; (1000e044 <sms_init_variables+0x30>)
1000e01e:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e020:	2101      	movs	r1, #1
1000e022:	4a09      	ldr	r2, [pc, #36]	; (1000e048 <sms_init_variables+0x34>)
1000e024:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000e026:	4a09      	ldr	r2, [pc, #36]	; (1000e04c <sms_init_variables+0x38>)
1000e028:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000e02a:	2201      	movs	r2, #1
1000e02c:	4252      	negs	r2, r2
1000e02e:	4b08      	ldr	r3, [pc, #32]	; (1000e050 <sms_init_variables+0x3c>)
1000e030:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000e032:	4b08      	ldr	r3, [pc, #32]	; (1000e054 <sms_init_variables+0x40>)
1000e034:	4798      	blx	r3
	sms_button_init_variables();
1000e036:	4b08      	ldr	r3, [pc, #32]	; (1000e058 <sms_init_variables+0x44>)
1000e038:	4798      	blx	r3
	sms_pressure_init_variables();
1000e03a:	4b08      	ldr	r3, [pc, #32]	; (1000e05c <sms_init_variables+0x48>)
1000e03c:	4798      	blx	r3
}
1000e03e:	bd10      	pop	{r4, pc}
1000e040:	10019e6c 	.word	0x10019e6c
1000e044:	10019f9b 	.word	0x10019f9b
1000e048:	10019e74 	.word	0x10019e74
1000e04c:	10019e75 	.word	0x10019e75
1000e050:	10019e70 	.word	0x10019e70
1000e054:	10008521 	.word	0x10008521
1000e058:	10008b65 	.word	0x10008b65
1000e05c:	10009d4d 	.word	0x10009d4d

1000e060 <main>:
	sms_monitor_configure_gpio();
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

int main(void)
{
1000e060:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e062:	4647      	mov	r7, r8
1000e064:	b480      	push	{r7}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e066:	2210      	movs	r2, #16
1000e068:	4b85      	ldr	r3, [pc, #532]	; (1000e280 <main+0x220>)
1000e06a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e06c:	4b85      	ldr	r3, [pc, #532]	; (1000e284 <main+0x224>)
1000e06e:	4798      	blx	r3
	gpio_init(); // GPIO
1000e070:	4b85      	ldr	r3, [pc, #532]	; (1000e288 <main+0x228>)
1000e072:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e074:	4b85      	ldr	r3, [pc, #532]	; (1000e28c <main+0x22c>)
1000e076:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e078:	4b85      	ldr	r3, [pc, #532]	; (1000e290 <main+0x230>)
1000e07a:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e07c:	4b85      	ldr	r3, [pc, #532]	; (1000e294 <main+0x234>)
1000e07e:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e080:	4b85      	ldr	r3, [pc, #532]	; (1000e298 <main+0x238>)
1000e082:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000e084:	4b85      	ldr	r3, [pc, #532]	; (1000e29c <main+0x23c>)
1000e086:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000e088:	4b85      	ldr	r3, [pc, #532]	; (1000e2a0 <main+0x240>)
1000e08a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000e08c:	4b85      	ldr	r3, [pc, #532]	; (1000e2a4 <main+0x244>)
1000e08e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000e090:	4b85      	ldr	r3, [pc, #532]	; (1000e2a8 <main+0x248>)
1000e092:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000e094:	4b85      	ldr	r3, [pc, #532]	; (1000e2ac <main+0x24c>)
1000e096:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000e098:	4b85      	ldr	r3, [pc, #532]	; (1000e2b0 <main+0x250>)
1000e09a:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e09c:	2000      	movs	r0, #0
1000e09e:	4b85      	ldr	r3, [pc, #532]	; (1000e2b4 <main+0x254>)
1000e0a0:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e0a2:	4b85      	ldr	r3, [pc, #532]	; (1000e2b8 <main+0x258>)
1000e0a4:	4798      	blx	r3
	sms_pressure_define_services();
1000e0a6:	4b85      	ldr	r3, [pc, #532]	; (1000e2bc <main+0x25c>)
1000e0a8:	4798      	blx	r3
	sms_imu_define_services();
1000e0aa:	4b85      	ldr	r3, [pc, #532]	; (1000e2c0 <main+0x260>)
1000e0ac:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e0ae:	4885      	ldr	r0, [pc, #532]	; (1000e2c4 <main+0x264>)
1000e0b0:	4b85      	ldr	r3, [pc, #532]	; (1000e2c8 <main+0x268>)
1000e0b2:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e0b4:	4b85      	ldr	r3, [pc, #532]	; (1000e2cc <main+0x26c>)
1000e0b6:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000e0b8:	4b85      	ldr	r3, [pc, #532]	; (1000e2d0 <main+0x270>)
1000e0ba:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e0bc:	4a85      	ldr	r2, [pc, #532]	; (1000e2d4 <main+0x274>)
1000e0be:	2100      	movs	r1, #0
1000e0c0:	2000      	movs	r0, #0
1000e0c2:	4c85      	ldr	r4, [pc, #532]	; (1000e2d8 <main+0x278>)
1000e0c4:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e0c6:	4a85      	ldr	r2, [pc, #532]	; (1000e2dc <main+0x27c>)
1000e0c8:	2102      	movs	r1, #2
1000e0ca:	2000      	movs	r0, #0
1000e0cc:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e0ce:	2100      	movs	r1, #0
1000e0d0:	2000      	movs	r0, #0
1000e0d2:	4b83      	ldr	r3, [pc, #524]	; (1000e2e0 <main+0x280>)
1000e0d4:	4798      	blx	r3
	
	/* Goto sleep
	* ---------- */
	//sms_ble_power_down();

	sms_imu_startup();
1000e0d6:	4b83      	ldr	r3, [pc, #524]	; (1000e2e4 <main+0x284>)
1000e0d8:	4798      	blx	r3
	sms_sensors_interrupt_toggle(true, false);
1000e0da:	2100      	movs	r1, #0
1000e0dc:	2001      	movs	r0, #1
1000e0de:	4b82      	ldr	r3, [pc, #520]	; (1000e2e8 <main+0x288>)
1000e0e0:	4798      	blx	r3
	sms_timer_aon_init(145, AON_SLEEP_TIMER_RELOAD_MODE);
1000e0e2:	2100      	movs	r1, #0
1000e0e4:	2091      	movs	r0, #145	; 0x91
1000e0e6:	4b81      	ldr	r3, [pc, #516]	; (1000e2ec <main+0x28c>)
1000e0e8:	4798      	blx	r3
	sms_timer_aon_register_callback();
1000e0ea:	4b81      	ldr	r3, [pc, #516]	; (1000e2f0 <main+0x290>)
1000e0ec:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000e0ee:	4e81      	ldr	r6, [pc, #516]	; (1000e2f4 <main+0x294>)
1000e0f0:	4c81      	ldr	r4, [pc, #516]	; (1000e2f8 <main+0x298>)
1000e0f2:	6830      	ldr	r0, [r6, #0]
1000e0f4:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000e0f6:	2800      	cmp	r0, #0
1000e0f8:	d000      	beq.n	1000e0fc <main+0x9c>
1000e0fa:	e0a7      	b.n	1000e24c <main+0x1ec>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000e0fc:	4b7f      	ldr	r3, [pc, #508]	; (1000e2fc <main+0x29c>)
1000e0fe:	78db      	ldrb	r3, [r3, #3]
1000e100:	2b00      	cmp	r3, #0
1000e102:	d013      	beq.n	1000e12c <main+0xcc>
				button_instance.btn0.new_int = false;
1000e104:	2200      	movs	r2, #0
1000e106:	4b7d      	ldr	r3, [pc, #500]	; (1000e2fc <main+0x29c>)
1000e108:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000e10a:	487d      	ldr	r0, [pc, #500]	; (1000e300 <main+0x2a0>)
1000e10c:	4b7d      	ldr	r3, [pc, #500]	; (1000e304 <main+0x2a4>)
1000e10e:	4798      	blx	r3
1000e110:	487d      	ldr	r0, [pc, #500]	; (1000e308 <main+0x2a8>)
1000e112:	4b7e      	ldr	r3, [pc, #504]	; (1000e30c <main+0x2ac>)
1000e114:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e116:	2000      	movs	r0, #0
1000e118:	4b7d      	ldr	r3, [pc, #500]	; (1000e310 <main+0x2b0>)
1000e11a:	4798      	blx	r3
1000e11c:	2800      	cmp	r0, #0
1000e11e:	da05      	bge.n	1000e12c <main+0xcc>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e120:	4877      	ldr	r0, [pc, #476]	; (1000e300 <main+0x2a0>)
1000e122:	4b78      	ldr	r3, [pc, #480]	; (1000e304 <main+0x2a4>)
1000e124:	4798      	blx	r3
1000e126:	487b      	ldr	r0, [pc, #492]	; (1000e314 <main+0x2b4>)
1000e128:	4b78      	ldr	r3, [pc, #480]	; (1000e30c <main+0x2ac>)
1000e12a:	4798      	blx	r3
				}
			}
			if(button_instance.btn1.new_int) {
1000e12c:	4b73      	ldr	r3, [pc, #460]	; (1000e2fc <main+0x29c>)
1000e12e:	7a5b      	ldrb	r3, [r3, #9]
1000e130:	2b00      	cmp	r3, #0
1000e132:	d013      	beq.n	1000e15c <main+0xfc>
				button_instance.btn1.new_int = false;
1000e134:	2200      	movs	r2, #0
1000e136:	4b71      	ldr	r3, [pc, #452]	; (1000e2fc <main+0x29c>)
1000e138:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000e13a:	4871      	ldr	r0, [pc, #452]	; (1000e300 <main+0x2a0>)
1000e13c:	4b71      	ldr	r3, [pc, #452]	; (1000e304 <main+0x2a4>)
1000e13e:	4798      	blx	r3
1000e140:	4875      	ldr	r0, [pc, #468]	; (1000e318 <main+0x2b8>)
1000e142:	4b72      	ldr	r3, [pc, #456]	; (1000e30c <main+0x2ac>)
1000e144:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e146:	2001      	movs	r0, #1
1000e148:	4b71      	ldr	r3, [pc, #452]	; (1000e310 <main+0x2b0>)
1000e14a:	4798      	blx	r3
1000e14c:	2800      	cmp	r0, #0
1000e14e:	da05      	bge.n	1000e15c <main+0xfc>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e150:	486b      	ldr	r0, [pc, #428]	; (1000e300 <main+0x2a0>)
1000e152:	4b6c      	ldr	r3, [pc, #432]	; (1000e304 <main+0x2a4>)
1000e154:	4798      	blx	r3
1000e156:	486f      	ldr	r0, [pc, #444]	; (1000e314 <main+0x2b4>)
1000e158:	4b6c      	ldr	r3, [pc, #432]	; (1000e30c <main+0x2ac>)
1000e15a:	4798      	blx	r3
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000e15c:	2381      	movs	r3, #129	; 0x81
1000e15e:	4a6f      	ldr	r2, [pc, #444]	; (1000e31c <main+0x2bc>)
1000e160:	5cd3      	ldrb	r3, [r2, r3]
1000e162:	2b00      	cmp	r3, #0
1000e164:	d01f      	beq.n	1000e1a6 <main+0x146>
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
				//DBG_LOG("MPU int (%ld)... ", cnt++);
				//sms_imu_poll_data();
				static uint32_t past = 0;
				const uint32_t cnt_max = 145 * SMS_TIMER_AON_LOAD_1MS / SMS_TIMER_AON_LOAD_100US;
				uint32_t now = aon_sleep_timer_get_current_value()/SMS_TIMER_AON_LOAD_100US;
1000e166:	4b6e      	ldr	r3, [pc, #440]	; (1000e320 <main+0x2c0>)
1000e168:	4798      	blx	r3
1000e16a:	2103      	movs	r1, #3
1000e16c:	4b6d      	ldr	r3, [pc, #436]	; (1000e324 <main+0x2c4>)
1000e16e:	4798      	blx	r3
1000e170:	4680      	mov	r8, r0
				uint32_t delta = ((now < past) ? (past - now) : (cnt_max - now + past));
1000e172:	4b6d      	ldr	r3, [pc, #436]	; (1000e328 <main+0x2c8>)
1000e174:	681b      	ldr	r3, [r3, #0]
1000e176:	4298      	cmp	r0, r3
1000e178:	d201      	bcs.n	1000e17e <main+0x11e>
1000e17a:	1a1f      	subs	r7, r3, r0
1000e17c:	e003      	b.n	1000e186 <main+0x126>
1000e17e:	4a6b      	ldr	r2, [pc, #428]	; (1000e32c <main+0x2cc>)
1000e180:	4694      	mov	ip, r2
1000e182:	4463      	add	r3, ip
1000e184:	1a1f      	subs	r7, r3, r0
				DBG_LOG("past: %lu, now: %lu, delta: %lu", past, now, delta);
1000e186:	485e      	ldr	r0, [pc, #376]	; (1000e300 <main+0x2a0>)
1000e188:	4b5e      	ldr	r3, [pc, #376]	; (1000e304 <main+0x2a4>)
1000e18a:	4798      	blx	r3
1000e18c:	4d66      	ldr	r5, [pc, #408]	; (1000e328 <main+0x2c8>)
1000e18e:	003b      	movs	r3, r7
1000e190:	4642      	mov	r2, r8
1000e192:	6829      	ldr	r1, [r5, #0]
1000e194:	4866      	ldr	r0, [pc, #408]	; (1000e330 <main+0x2d0>)
1000e196:	4f5d      	ldr	r7, [pc, #372]	; (1000e30c <main+0x2ac>)
1000e198:	47b8      	blx	r7
				past = now;
1000e19a:	4643      	mov	r3, r8
1000e19c:	602b      	str	r3, [r5, #0]
				imu_device.interrupt.new_gyro = false;
1000e19e:	2100      	movs	r1, #0
1000e1a0:	2381      	movs	r3, #129	; 0x81
1000e1a2:	4a5e      	ldr	r2, [pc, #376]	; (1000e31c <main+0x2bc>)
1000e1a4:	54d1      	strb	r1, [r2, r3]
				//imu_device.interrupt.rts = true;
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000e1a6:	2329      	movs	r3, #41	; 0x29
1000e1a8:	4a62      	ldr	r2, [pc, #392]	; (1000e334 <main+0x2d4>)
1000e1aa:	5cd3      	ldrb	r3, [r2, r3]
1000e1ac:	2b00      	cmp	r3, #0
1000e1ae:	d009      	beq.n	1000e1c4 <main+0x164>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e1b0:	2101      	movs	r1, #1
1000e1b2:	200f      	movs	r0, #15
1000e1b4:	4f60      	ldr	r7, [pc, #384]	; (1000e338 <main+0x2d8>)
1000e1b6:	47b8      	blx	r7
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000e1b8:	2100      	movs	r1, #0
1000e1ba:	2329      	movs	r3, #41	; 0x29
1000e1bc:	4a5d      	ldr	r2, [pc, #372]	; (1000e334 <main+0x2d4>)
1000e1be:	54d1      	strb	r1, [r2, r3]
				//pressure_device.rts = true;
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e1c0:	200f      	movs	r0, #15
1000e1c2:	47b8      	blx	r7
			//sms_dualtimer2_fn();
			//timer2_instance.new_int = false;
			//}
			
			/* Sending region */
			if(imu_device.interrupt.rts) {
1000e1c4:	2382      	movs	r3, #130	; 0x82
1000e1c6:	4a55      	ldr	r2, [pc, #340]	; (1000e31c <main+0x2bc>)
1000e1c8:	5cd3      	ldrb	r3, [r2, r3]
1000e1ca:	2b00      	cmp	r3, #0
1000e1cc:	d015      	beq.n	1000e1fa <main+0x19a>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e1ce:	2101      	movs	r1, #1
1000e1d0:	200f      	movs	r0, #15
1000e1d2:	4b59      	ldr	r3, [pc, #356]	; (1000e338 <main+0x2d8>)
1000e1d4:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e1d6:	4b2a      	ldr	r3, [pc, #168]	; (1000e280 <main+0x220>)
1000e1d8:	785b      	ldrb	r3, [r3, #1]
1000e1da:	2b00      	cmp	r3, #0
1000e1dc:	d103      	bne.n	1000e1e6 <main+0x186>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e1de:	2002      	movs	r0, #2
1000e1e0:	4b56      	ldr	r3, [pc, #344]	; (1000e33c <main+0x2dc>)
1000e1e2:	4798      	blx	r3
1000e1e4:	e002      	b.n	1000e1ec <main+0x18c>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e1e6:	4856      	ldr	r0, [pc, #344]	; (1000e340 <main+0x2e0>)
1000e1e8:	4b48      	ldr	r3, [pc, #288]	; (1000e30c <main+0x2ac>)
1000e1ea:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000e1ec:	2100      	movs	r1, #0
1000e1ee:	2382      	movs	r3, #130	; 0x82
1000e1f0:	4a4a      	ldr	r2, [pc, #296]	; (1000e31c <main+0x2bc>)
1000e1f2:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e1f4:	200f      	movs	r0, #15
1000e1f6:	4b50      	ldr	r3, [pc, #320]	; (1000e338 <main+0x2d8>)
1000e1f8:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000e1fa:	232a      	movs	r3, #42	; 0x2a
1000e1fc:	4a4d      	ldr	r2, [pc, #308]	; (1000e334 <main+0x2d4>)
1000e1fe:	5cd3      	ldrb	r3, [r2, r3]
1000e200:	2b00      	cmp	r3, #0
1000e202:	d100      	bne.n	1000e206 <main+0x1a6>
1000e204:	e775      	b.n	1000e0f2 <main+0x92>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e206:	483e      	ldr	r0, [pc, #248]	; (1000e300 <main+0x2a0>)
1000e208:	4b3e      	ldr	r3, [pc, #248]	; (1000e304 <main+0x2a4>)
1000e20a:	4798      	blx	r3
1000e20c:	2381      	movs	r3, #129	; 0x81
1000e20e:	4a43      	ldr	r2, [pc, #268]	; (1000e31c <main+0x2bc>)
1000e210:	5cd1      	ldrb	r1, [r2, r3]
1000e212:	b2c9      	uxtb	r1, r1
1000e214:	4f1a      	ldr	r7, [pc, #104]	; (1000e280 <main+0x220>)
1000e216:	787a      	ldrb	r2, [r7, #1]
1000e218:	b2d2      	uxtb	r2, r2
1000e21a:	484a      	ldr	r0, [pc, #296]	; (1000e344 <main+0x2e4>)
1000e21c:	4b3b      	ldr	r3, [pc, #236]	; (1000e30c <main+0x2ac>)
1000e21e:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e220:	2101      	movs	r1, #1
1000e222:	200f      	movs	r0, #15
1000e224:	4b44      	ldr	r3, [pc, #272]	; (1000e338 <main+0x2d8>)
1000e226:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e228:	787b      	ldrb	r3, [r7, #1]
1000e22a:	2b00      	cmp	r3, #0
1000e22c:	d103      	bne.n	1000e236 <main+0x1d6>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e22e:	2001      	movs	r0, #1
1000e230:	4b42      	ldr	r3, [pc, #264]	; (1000e33c <main+0x2dc>)
1000e232:	4798      	blx	r3
1000e234:	e002      	b.n	1000e23c <main+0x1dc>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e236:	4842      	ldr	r0, [pc, #264]	; (1000e340 <main+0x2e0>)
1000e238:	4b34      	ldr	r3, [pc, #208]	; (1000e30c <main+0x2ac>)
1000e23a:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000e23c:	2100      	movs	r1, #0
1000e23e:	232a      	movs	r3, #42	; 0x2a
1000e240:	4a3c      	ldr	r2, [pc, #240]	; (1000e334 <main+0x2d4>)
1000e242:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e244:	200f      	movs	r0, #15
1000e246:	4b3c      	ldr	r3, [pc, #240]	; (1000e338 <main+0x2d8>)
1000e248:	4798      	blx	r3
1000e24a:	e752      	b.n	1000e0f2 <main+0x92>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000e24c:	2845      	cmp	r0, #69	; 0x45
1000e24e:	d106      	bne.n	1000e25e <main+0x1fe>
			DBG_LOG("GAP timeout");
1000e250:	482b      	ldr	r0, [pc, #172]	; (1000e300 <main+0x2a0>)
1000e252:	4b2c      	ldr	r3, [pc, #176]	; (1000e304 <main+0x2a4>)
1000e254:	4798      	blx	r3
1000e256:	483c      	ldr	r0, [pc, #240]	; (1000e348 <main+0x2e8>)
1000e258:	4b2c      	ldr	r3, [pc, #176]	; (1000e30c <main+0x2ac>)
1000e25a:	4798      	blx	r3
1000e25c:	e749      	b.n	1000e0f2 <main+0x92>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000e25e:	28d0      	cmp	r0, #208	; 0xd0
1000e260:	d106      	bne.n	1000e270 <main+0x210>
			DBG_LOG("Event get timeout");
1000e262:	4827      	ldr	r0, [pc, #156]	; (1000e300 <main+0x2a0>)
1000e264:	4b27      	ldr	r3, [pc, #156]	; (1000e304 <main+0x2a4>)
1000e266:	4798      	blx	r3
1000e268:	4838      	ldr	r0, [pc, #224]	; (1000e34c <main+0x2ec>)
1000e26a:	4b28      	ldr	r3, [pc, #160]	; (1000e30c <main+0x2ac>)
1000e26c:	4798      	blx	r3
1000e26e:	e740      	b.n	1000e0f2 <main+0x92>
		}
		else {
			DBG_LOG("BLE error occurred");
1000e270:	4823      	ldr	r0, [pc, #140]	; (1000e300 <main+0x2a0>)
1000e272:	4b24      	ldr	r3, [pc, #144]	; (1000e304 <main+0x2a4>)
1000e274:	4798      	blx	r3
1000e276:	4836      	ldr	r0, [pc, #216]	; (1000e350 <main+0x2f0>)
1000e278:	4b24      	ldr	r3, [pc, #144]	; (1000e30c <main+0x2ac>)
1000e27a:	4798      	blx	r3
1000e27c:	e739      	b.n	1000e0f2 <main+0x92>
1000e27e:	46c0      	nop			; (mov r8, r8)
1000e280:	10019e78 	.word	0x10019e78
1000e284:	1000d889 	.word	0x1000d889
1000e288:	1000ae5d 	.word	0x1000ae5d
1000e28c:	1000d57d 	.word	0x1000d57d
1000e290:	1000dddd 	.word	0x1000dddd
1000e294:	1000e015 	.word	0x1000e015
1000e298:	1000a1d1 	.word	0x1000a1d1
1000e29c:	10008b8d 	.word	0x10008b8d
1000e2a0:	10009cb9 	.word	0x10009cb9
1000e2a4:	10008f99 	.word	0x10008f99
1000e2a8:	1000a089 	.word	0x1000a089
1000e2ac:	1000912d 	.word	0x1000912d
1000e2b0:	10008ec1 	.word	0x10008ec1
1000e2b4:	1000cbfd 	.word	0x1000cbfd
1000e2b8:	10008e59 	.word	0x10008e59
1000e2bc:	10009f65 	.word	0x10009f65
1000e2c0:	100091c9 	.word	0x100091c9
1000e2c4:	1000dfc9 	.word	0x1000dfc9
1000e2c8:	1000de21 	.word	0x1000de21
1000e2cc:	10008c3d 	.word	0x10008c3d
1000e2d0:	10009179 	.word	0x10009179
1000e2d4:	10016bb4 	.word	0x10016bb4
1000e2d8:	1000cb2d 	.word	0x1000cb2d
1000e2dc:	10016c00 	.word	0x10016c00
1000e2e0:	10008e11 	.word	0x10008e11
1000e2e4:	10009bd1 	.word	0x10009bd1
1000e2e8:	10009fcd 	.word	0x10009fcd
1000e2ec:	1000a15d 	.word	0x1000a15d
1000e2f0:	1000a195 	.word	0x1000a195
1000e2f4:	10019e70 	.word	0x10019e70
1000e2f8:	1000d3f5 	.word	0x1000d3f5
1000e2fc:	10019e7c 	.word	0x10019e7c
1000e300:	10016878 	.word	0x10016878
1000e304:	10015939 	.word	0x10015939
1000e308:	10018040 	.word	0x10018040
1000e30c:	10015819 	.word	0x10015819
1000e310:	10008c91 	.word	0x10008c91
1000e314:	10018050 	.word	0x10018050
1000e318:	1001806c 	.word	0x1001806c
1000e31c:	10019fb4 	.word	0x10019fb4
1000e320:	10008119 	.word	0x10008119
1000e324:	100129a5 	.word	0x100129a5
1000e328:	10019d98 	.word	0x10019d98
1000e32c:	0000063b 	.word	0x0000063b
1000e330:	1001807c 	.word	0x1001807c
1000e334:	10019f00 	.word	0x10019f00
1000e338:	1000ab1d 	.word	0x1000ab1d
1000e33c:	10008879 	.word	0x10008879
1000e340:	1001809c 	.word	0x1001809c
1000e344:	100180a8 	.word	0x100180a8
1000e348:	100180c4 	.word	0x100180c4
1000e34c:	100180d0 	.word	0x100180d0
1000e350:	100180e4 	.word	0x100180e4

1000e354 <internal_event_post>:
1000e354:	b570      	push	{r4, r5, r6, lr}
1000e356:	4d12      	ldr	r5, [pc, #72]	; (1000e3a0 <internal_event_post+0x4c>)
1000e358:	682c      	ldr	r4, [r5, #0]
1000e35a:	2c00      	cmp	r4, #0
1000e35c:	d014      	beq.n	1000e388 <internal_event_post+0x34>
1000e35e:	6826      	ldr	r6, [r4, #0]
1000e360:	60e2      	str	r2, [r4, #12]
1000e362:	602e      	str	r6, [r5, #0]
1000e364:	2500      	movs	r5, #0
1000e366:	4a0f      	ldr	r2, [pc, #60]	; (1000e3a4 <internal_event_post+0x50>)
1000e368:	8123      	strh	r3, [r4, #8]
1000e36a:	6813      	ldr	r3, [r2, #0]
1000e36c:	6025      	str	r5, [r4, #0]
1000e36e:	80a0      	strh	r0, [r4, #4]
1000e370:	80e1      	strh	r1, [r4, #6]
1000e372:	42ab      	cmp	r3, r5
1000e374:	d101      	bne.n	1000e37a <internal_event_post+0x26>
1000e376:	6014      	str	r4, [r2, #0]
1000e378:	e011      	b.n	1000e39e <internal_event_post+0x4a>
1000e37a:	681a      	ldr	r2, [r3, #0]
1000e37c:	2a00      	cmp	r2, #0
1000e37e:	d001      	beq.n	1000e384 <internal_event_post+0x30>
1000e380:	1c13      	adds	r3, r2, #0
1000e382:	e7fa      	b.n	1000e37a <internal_event_post+0x26>
1000e384:	601c      	str	r4, [r3, #0]
1000e386:	e00a      	b.n	1000e39e <internal_event_post+0x4a>
1000e388:	b2c4      	uxtb	r4, r0
1000e38a:	2c00      	cmp	r4, #0
1000e38c:	d107      	bne.n	1000e39e <internal_event_post+0x4a>
1000e38e:	4c06      	ldr	r4, [pc, #24]	; (1000e3a8 <internal_event_post+0x54>)
1000e390:	60e2      	str	r2, [r4, #12]
1000e392:	2201      	movs	r2, #1
1000e394:	8123      	strh	r3, [r4, #8]
1000e396:	4b05      	ldr	r3, [pc, #20]	; (1000e3ac <internal_event_post+0x58>)
1000e398:	80a0      	strh	r0, [r4, #4]
1000e39a:	80e1      	strh	r1, [r4, #6]
1000e39c:	701a      	strb	r2, [r3, #0]
1000e39e:	bd70      	pop	{r4, r5, r6, pc}
1000e3a0:	10019db4 	.word	0x10019db4
1000e3a4:	10019db0 	.word	0x10019db0
1000e3a8:	10019d9c 	.word	0x10019d9c
1000e3ac:	10019dac 	.word	0x10019dac

1000e3b0 <internal_event_init>:
1000e3b0:	b510      	push	{r4, lr}
1000e3b2:	4b08      	ldr	r3, [pc, #32]	; (1000e3d4 <internal_event_init+0x24>)
1000e3b4:	0900      	lsrs	r0, r0, #4
1000e3b6:	0100      	lsls	r0, r0, #4
1000e3b8:	681a      	ldr	r2, [r3, #0]
1000e3ba:	1808      	adds	r0, r1, r0
1000e3bc:	4281      	cmp	r1, r0
1000e3be:	d003      	beq.n	1000e3c8 <internal_event_init+0x18>
1000e3c0:	600a      	str	r2, [r1, #0]
1000e3c2:	1c0a      	adds	r2, r1, #0
1000e3c4:	3110      	adds	r1, #16
1000e3c6:	e7f9      	b.n	1000e3bc <internal_event_init+0xc>
1000e3c8:	601a      	str	r2, [r3, #0]
1000e3ca:	2200      	movs	r2, #0
1000e3cc:	4b02      	ldr	r3, [pc, #8]	; (1000e3d8 <internal_event_init+0x28>)
1000e3ce:	601a      	str	r2, [r3, #0]
1000e3d0:	bd10      	pop	{r4, pc}
1000e3d2:	46c0      	nop			; (mov r8, r8)
1000e3d4:	10019db4 	.word	0x10019db4
1000e3d8:	10019db0 	.word	0x10019db0

1000e3dc <special_events_handler>:
1000e3dc:	b538      	push	{r3, r4, r5, lr}
1000e3de:	4c1b      	ldr	r4, [pc, #108]	; (1000e44c <special_events_handler+0x70>)
1000e3e0:	1c03      	adds	r3, r0, #0
1000e3e2:	8825      	ldrh	r5, [r4, #0]
1000e3e4:	1c08      	adds	r0, r1, #0
1000e3e6:	1c21      	adds	r1, r4, #0
1000e3e8:	429d      	cmp	r5, r3
1000e3ea:	d107      	bne.n	1000e3fc <special_events_handler+0x20>
1000e3ec:	88a5      	ldrh	r5, [r4, #4]
1000e3ee:	4285      	cmp	r5, r0
1000e3f0:	d104      	bne.n	1000e3fc <special_events_handler+0x20>
1000e3f2:	2301      	movs	r3, #1
1000e3f4:	425b      	negs	r3, r3
1000e3f6:	8023      	strh	r3, [r4, #0]
1000e3f8:	60a2      	str	r2, [r4, #8]
1000e3fa:	e009      	b.n	1000e410 <special_events_handler+0x34>
1000e3fc:	884c      	ldrh	r4, [r1, #2]
1000e3fe:	429c      	cmp	r4, r3
1000e400:	d10a      	bne.n	1000e418 <special_events_handler+0x3c>
1000e402:	888c      	ldrh	r4, [r1, #4]
1000e404:	4284      	cmp	r4, r0
1000e406:	d107      	bne.n	1000e418 <special_events_handler+0x3c>
1000e408:	2301      	movs	r3, #1
1000e40a:	425b      	negs	r3, r3
1000e40c:	804b      	strh	r3, [r1, #2]
1000e40e:	608a      	str	r2, [r1, #8]
1000e410:	4b0f      	ldr	r3, [pc, #60]	; (1000e450 <special_events_handler+0x74>)
1000e412:	4798      	blx	r3
1000e414:	2001      	movs	r0, #1
1000e416:	e017      	b.n	1000e448 <special_events_handler+0x6c>
1000e418:	490e      	ldr	r1, [pc, #56]	; (1000e454 <special_events_handler+0x78>)
1000e41a:	428b      	cmp	r3, r1
1000e41c:	d00e      	beq.n	1000e43c <special_events_handler+0x60>
1000e41e:	490e      	ldr	r1, [pc, #56]	; (1000e458 <special_events_handler+0x7c>)
1000e420:	428b      	cmp	r3, r1
1000e422:	d007      	beq.n	1000e434 <special_events_handler+0x58>
1000e424:	490d      	ldr	r1, [pc, #52]	; (1000e45c <special_events_handler+0x80>)
1000e426:	2000      	movs	r0, #0
1000e428:	428b      	cmp	r3, r1
1000e42a:	d10d      	bne.n	1000e448 <special_events_handler+0x6c>
1000e42c:	1c10      	adds	r0, r2, #0
1000e42e:	4b0c      	ldr	r3, [pc, #48]	; (1000e460 <special_events_handler+0x84>)
1000e430:	4798      	blx	r3
1000e432:	e7ef      	b.n	1000e414 <special_events_handler+0x38>
1000e434:	1c11      	adds	r1, r2, #0
1000e436:	4b0b      	ldr	r3, [pc, #44]	; (1000e464 <special_events_handler+0x88>)
1000e438:	2200      	movs	r2, #0
1000e43a:	e002      	b.n	1000e442 <special_events_handler+0x66>
1000e43c:	1c11      	adds	r1, r2, #0
1000e43e:	2200      	movs	r2, #0
1000e440:	4b09      	ldr	r3, [pc, #36]	; (1000e468 <special_events_handler+0x8c>)
1000e442:	4798      	blx	r3
1000e444:	4243      	negs	r3, r0
1000e446:	4158      	adcs	r0, r3
1000e448:	bd38      	pop	{r3, r4, r5, pc}
1000e44a:	46c0      	nop			; (mov r8, r8)
1000e44c:	1001ad14 	.word	0x1001ad14
1000e450:	1000fe39 	.word	0x1000fe39
1000e454:	00000e13 	.word	0x00000e13
1000e458:	00000e15 	.word	0x00000e15
1000e45c:	00000e01 	.word	0x00000e01
1000e460:	100101a9 	.word	0x100101a9
1000e464:	10010369 	.word	0x10010369
1000e468:	10010441 	.word	0x10010441

1000e46c <at_ble_event_get>:
1000e46c:	2300      	movs	r3, #0
1000e46e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e470:	b087      	sub	sp, #28
1000e472:	9204      	str	r2, [sp, #16]
1000e474:	7003      	strb	r3, [r0, #0]
1000e476:	9b04      	ldr	r3, [sp, #16]
1000e478:	9003      	str	r0, [sp, #12]
1000e47a:	3b01      	subs	r3, #1
1000e47c:	1c0d      	adds	r5, r1, #0
1000e47e:	9305      	str	r3, [sp, #20]
1000e480:	3303      	adds	r3, #3
1000e482:	d802      	bhi.n	1000e48a <at_ble_event_get+0x1e>
1000e484:	9804      	ldr	r0, [sp, #16]
1000e486:	4bae      	ldr	r3, [pc, #696]	; (1000e740 <at_ble_event_get+0x2d4>)
1000e488:	4798      	blx	r3
1000e48a:	9b05      	ldr	r3, [sp, #20]
1000e48c:	4cad      	ldr	r4, [pc, #692]	; (1000e744 <at_ble_event_get+0x2d8>)
1000e48e:	3303      	adds	r3, #3
1000e490:	d902      	bls.n	1000e498 <at_ble_event_get+0x2c>
1000e492:	2300      	movs	r3, #0
1000e494:	9302      	str	r3, [sp, #8]
1000e496:	e015      	b.n	1000e4c4 <at_ble_event_get+0x58>
1000e498:	2300      	movs	r3, #0
1000e49a:	9302      	str	r3, [sp, #8]
1000e49c:	6823      	ldr	r3, [r4, #0]
1000e49e:	2b00      	cmp	r3, #0
1000e4a0:	d113      	bne.n	1000e4ca <at_ble_event_get+0x5e>
1000e4a2:	9b02      	ldr	r3, [sp, #8]
1000e4a4:	2bd0      	cmp	r3, #208	; 0xd0
1000e4a6:	d100      	bne.n	1000e4aa <at_ble_event_get+0x3e>
1000e4a8:	e2da      	b.n	1000ea60 <at_ble_event_get+0x5f4>
1000e4aa:	9804      	ldr	r0, [sp, #16]
1000e4ac:	4ba6      	ldr	r3, [pc, #664]	; (1000e748 <at_ble_event_get+0x2dc>)
1000e4ae:	4798      	blx	r3
1000e4b0:	9002      	str	r0, [sp, #8]
1000e4b2:	2802      	cmp	r0, #2
1000e4b4:	d1f2      	bne.n	1000e49c <at_ble_event_get+0x30>
1000e4b6:	e03f      	b.n	1000e538 <at_ble_event_get+0xcc>
1000e4b8:	9804      	ldr	r0, [sp, #16]
1000e4ba:	4ba3      	ldr	r3, [pc, #652]	; (1000e748 <at_ble_event_get+0x2dc>)
1000e4bc:	4798      	blx	r3
1000e4be:	9002      	str	r0, [sp, #8]
1000e4c0:	2802      	cmp	r0, #2
1000e4c2:	d039      	beq.n	1000e538 <at_ble_event_get+0xcc>
1000e4c4:	6823      	ldr	r3, [r4, #0]
1000e4c6:	2b00      	cmp	r3, #0
1000e4c8:	d0f6      	beq.n	1000e4b8 <at_ble_event_get+0x4c>
1000e4ca:	9b02      	ldr	r3, [sp, #8]
1000e4cc:	2bd0      	cmp	r3, #208	; 0xd0
1000e4ce:	d100      	bne.n	1000e4d2 <at_ble_event_get+0x66>
1000e4d0:	e2c6      	b.n	1000ea60 <at_ble_event_get+0x5f4>
1000e4d2:	9b02      	ldr	r3, [sp, #8]
1000e4d4:	3b03      	subs	r3, #3
1000e4d6:	1e5a      	subs	r2, r3, #1
1000e4d8:	4193      	sbcs	r3, r2
1000e4da:	9a02      	ldr	r2, [sp, #8]
1000e4dc:	425b      	negs	r3, r3
1000e4de:	401a      	ands	r2, r3
1000e4e0:	6823      	ldr	r3, [r4, #0]
1000e4e2:	9202      	str	r2, [sp, #8]
1000e4e4:	2b00      	cmp	r3, #0
1000e4e6:	d100      	bne.n	1000e4ea <at_ble_event_get+0x7e>
1000e4e8:	e2c2      	b.n	1000ea70 <at_ble_event_get+0x604>
1000e4ea:	681a      	ldr	r2, [r3, #0]
1000e4ec:	68de      	ldr	r6, [r3, #12]
1000e4ee:	6022      	str	r2, [r4, #0]
1000e4f0:	88da      	ldrh	r2, [r3, #6]
1000e4f2:	9201      	str	r2, [sp, #4]
1000e4f4:	4a95      	ldr	r2, [pc, #596]	; (1000e74c <at_ble_event_get+0x2e0>)
1000e4f6:	889c      	ldrh	r4, [r3, #4]
1000e4f8:	6811      	ldr	r1, [r2, #0]
1000e4fa:	6013      	str	r3, [r2, #0]
1000e4fc:	6019      	str	r1, [r3, #0]
1000e4fe:	4b94      	ldr	r3, [pc, #592]	; (1000e750 <at_ble_event_get+0x2e4>)
1000e500:	781b      	ldrb	r3, [r3, #0]
1000e502:	2b01      	cmp	r3, #1
1000e504:	d10f      	bne.n	1000e526 <at_ble_event_get+0xba>
1000e506:	4b93      	ldr	r3, [pc, #588]	; (1000e754 <at_ble_event_get+0x2e8>)
1000e508:	4a92      	ldr	r2, [pc, #584]	; (1000e754 <at_ble_event_get+0x2e8>)
1000e50a:	8898      	ldrh	r0, [r3, #4]
1000e50c:	88d9      	ldrh	r1, [r3, #6]
1000e50e:	68d2      	ldr	r2, [r2, #12]
1000e510:	891b      	ldrh	r3, [r3, #8]
1000e512:	4f91      	ldr	r7, [pc, #580]	; (1000e758 <at_ble_event_get+0x2ec>)
1000e514:	47b8      	blx	r7
1000e516:	2210      	movs	r2, #16
1000e518:	4b90      	ldr	r3, [pc, #576]	; (1000e75c <at_ble_event_get+0x2f0>)
1000e51a:	488e      	ldr	r0, [pc, #568]	; (1000e754 <at_ble_event_get+0x2e8>)
1000e51c:	2100      	movs	r1, #0
1000e51e:	4798      	blx	r3
1000e520:	2300      	movs	r3, #0
1000e522:	4a8b      	ldr	r2, [pc, #556]	; (1000e750 <at_ble_event_get+0x2e4>)
1000e524:	7013      	strb	r3, [r2, #0]
1000e526:	9b02      	ldr	r3, [sp, #8]
1000e528:	2b00      	cmp	r3, #0
1000e52a:	d114      	bne.n	1000e556 <at_ble_event_get+0xea>
1000e52c:	4b8c      	ldr	r3, [pc, #560]	; (1000e760 <at_ble_event_get+0x2f4>)
1000e52e:	429c      	cmp	r4, r3
1000e530:	d009      	beq.n	1000e546 <at_ble_event_get+0xda>
1000e532:	4b8c      	ldr	r3, [pc, #560]	; (1000e764 <at_ble_event_get+0x2f8>)
1000e534:	429c      	cmp	r4, r3
1000e536:	d127      	bne.n	1000e588 <at_ble_event_get+0x11c>
1000e538:	233a      	movs	r3, #58	; 0x3a
1000e53a:	9a03      	ldr	r2, [sp, #12]
1000e53c:	7013      	strb	r3, [r2, #0]
1000e53e:	2300      	movs	r3, #0
1000e540:	9302      	str	r3, [sp, #8]
1000e542:	1c1d      	adds	r5, r3, #0
1000e544:	e007      	b.n	1000e556 <at_ble_event_get+0xea>
1000e546:	9b01      	ldr	r3, [sp, #4]
1000e548:	42a3      	cmp	r3, r4
1000e54a:	d000      	beq.n	1000e54e <at_ble_event_get+0xe2>
1000e54c:	e28a      	b.n	1000ea64 <at_ble_event_get+0x5f8>
1000e54e:	2338      	movs	r3, #56	; 0x38
1000e550:	9a03      	ldr	r2, [sp, #12]
1000e552:	7013      	strb	r3, [r2, #0]
1000e554:	602e      	str	r6, [r5, #0]
1000e556:	9b03      	ldr	r3, [sp, #12]
1000e558:	781b      	ldrb	r3, [r3, #0]
1000e55a:	2b3b      	cmp	r3, #59	; 0x3b
1000e55c:	d101      	bne.n	1000e562 <at_ble_event_get+0xf6>
1000e55e:	4b82      	ldr	r3, [pc, #520]	; (1000e768 <at_ble_event_get+0x2fc>)
1000e560:	4798      	blx	r3
1000e562:	9b03      	ldr	r3, [sp, #12]
1000e564:	781b      	ldrb	r3, [r3, #0]
1000e566:	2b3b      	cmp	r3, #59	; 0x3b
1000e568:	d003      	beq.n	1000e572 <at_ble_event_get+0x106>
1000e56a:	9b05      	ldr	r3, [sp, #20]
1000e56c:	3303      	adds	r3, #3
1000e56e:	d904      	bls.n	1000e57a <at_ble_event_get+0x10e>
1000e570:	e283      	b.n	1000ea7a <at_ble_event_get+0x60e>
1000e572:	9b02      	ldr	r3, [sp, #8]
1000e574:	2b00      	cmp	r3, #0
1000e576:	d088      	beq.n	1000e48a <at_ble_event_get+0x1e>
1000e578:	e7f7      	b.n	1000e56a <at_ble_event_get+0xfe>
1000e57a:	9b02      	ldr	r3, [sp, #8]
1000e57c:	2bd0      	cmp	r3, #208	; 0xd0
1000e57e:	d100      	bne.n	1000e582 <at_ble_event_get+0x116>
1000e580:	e27b      	b.n	1000ea7a <at_ble_event_get+0x60e>
1000e582:	4b7a      	ldr	r3, [pc, #488]	; (1000e76c <at_ble_event_get+0x300>)
1000e584:	4798      	blx	r3
1000e586:	e278      	b.n	1000ea7a <at_ble_event_get+0x60e>
1000e588:	9b01      	ldr	r3, [sp, #4]
1000e58a:	2bbb      	cmp	r3, #187	; 0xbb
1000e58c:	d125      	bne.n	1000e5da <at_ble_event_get+0x16e>
1000e58e:	2cbb      	cmp	r4, #187	; 0xbb
1000e590:	d123      	bne.n	1000e5da <at_ble_event_get+0x16e>
1000e592:	466b      	mov	r3, sp
1000e594:	891b      	ldrh	r3, [r3, #8]
1000e596:	80ab      	strh	r3, [r5, #4]
1000e598:	78b3      	ldrb	r3, [r6, #2]
1000e59a:	7872      	ldrb	r2, [r6, #1]
1000e59c:	78f0      	ldrb	r0, [r6, #3]
1000e59e:	021b      	lsls	r3, r3, #8
1000e5a0:	4313      	orrs	r3, r2
1000e5a2:	7971      	ldrb	r1, [r6, #5]
1000e5a4:	7932      	ldrb	r2, [r6, #4]
1000e5a6:	70a8      	strb	r0, [r5, #2]
1000e5a8:	4871      	ldr	r0, [pc, #452]	; (1000e770 <at_ble_event_get+0x304>)
1000e5aa:	802b      	strh	r3, [r5, #0]
1000e5ac:	4283      	cmp	r3, r0
1000e5ae:	d806      	bhi.n	1000e5be <at_ble_event_get+0x152>
1000e5b0:	4a70      	ldr	r2, [pc, #448]	; (1000e774 <at_ble_event_get+0x308>)
1000e5b2:	4293      	cmp	r3, r2
1000e5b4:	d20b      	bcs.n	1000e5ce <at_ble_event_get+0x162>
1000e5b6:	4a70      	ldr	r2, [pc, #448]	; (1000e778 <at_ble_event_get+0x30c>)
1000e5b8:	4293      	cmp	r3, r2
1000e5ba:	d008      	beq.n	1000e5ce <at_ble_event_get+0x162>
1000e5bc:	e009      	b.n	1000e5d2 <at_ble_event_get+0x166>
1000e5be:	486f      	ldr	r0, [pc, #444]	; (1000e77c <at_ble_event_get+0x310>)
1000e5c0:	4283      	cmp	r3, r0
1000e5c2:	d106      	bne.n	1000e5d2 <at_ble_event_get+0x166>
1000e5c4:	020b      	lsls	r3, r1, #8
1000e5c6:	4313      	orrs	r3, r2
1000e5c8:	80ab      	strh	r3, [r5, #4]
1000e5ca:	2337      	movs	r3, #55	; 0x37
1000e5cc:	e002      	b.n	1000e5d4 <at_ble_event_get+0x168>
1000e5ce:	2336      	movs	r3, #54	; 0x36
1000e5d0:	e000      	b.n	1000e5d4 <at_ble_event_get+0x168>
1000e5d2:	2300      	movs	r3, #0
1000e5d4:	9a03      	ldr	r2, [sp, #12]
1000e5d6:	7013      	strb	r3, [r2, #0]
1000e5d8:	e7bd      	b.n	1000e556 <at_ble_event_get+0xea>
1000e5da:	4b69      	ldr	r3, [pc, #420]	; (1000e780 <at_ble_event_get+0x314>)
1000e5dc:	429c      	cmp	r4, r3
1000e5de:	d100      	bne.n	1000e5e2 <at_ble_event_get+0x176>
1000e5e0:	e144      	b.n	1000e86c <at_ble_event_get+0x400>
1000e5e2:	d865      	bhi.n	1000e6b0 <at_ble_event_get+0x244>
1000e5e4:	4b67      	ldr	r3, [pc, #412]	; (1000e784 <at_ble_event_get+0x318>)
1000e5e6:	429c      	cmp	r4, r3
1000e5e8:	d100      	bne.n	1000e5ec <at_ble_event_get+0x180>
1000e5ea:	e1d5      	b.n	1000e998 <at_ble_event_get+0x52c>
1000e5ec:	d82f      	bhi.n	1000e64e <at_ble_event_get+0x1e2>
1000e5ee:	4b66      	ldr	r3, [pc, #408]	; (1000e788 <at_ble_event_get+0x31c>)
1000e5f0:	429c      	cmp	r4, r3
1000e5f2:	d100      	bne.n	1000e5f6 <at_ble_event_get+0x18a>
1000e5f4:	e1e0      	b.n	1000e9b8 <at_ble_event_get+0x54c>
1000e5f6:	d813      	bhi.n	1000e620 <at_ble_event_get+0x1b4>
1000e5f8:	4b64      	ldr	r3, [pc, #400]	; (1000e78c <at_ble_event_get+0x320>)
1000e5fa:	429c      	cmp	r4, r3
1000e5fc:	d100      	bne.n	1000e600 <at_ble_event_get+0x194>
1000e5fe:	e1a3      	b.n	1000e948 <at_ble_event_get+0x4dc>
1000e600:	d804      	bhi.n	1000e60c <at_ble_event_get+0x1a0>
1000e602:	2638      	movs	r6, #56	; 0x38
1000e604:	42b4      	cmp	r4, r6
1000e606:	d100      	bne.n	1000e60a <at_ble_event_get+0x19e>
1000e608:	e225      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e60a:	e117      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e60c:	4b60      	ldr	r3, [pc, #384]	; (1000e790 <at_ble_event_get+0x324>)
1000e60e:	429c      	cmp	r4, r3
1000e610:	d100      	bne.n	1000e614 <at_ble_event_get+0x1a8>
1000e612:	e19f      	b.n	1000e954 <at_ble_event_get+0x4e8>
1000e614:	33fe      	adds	r3, #254	; 0xfe
1000e616:	33ff      	adds	r3, #255	; 0xff
1000e618:	429c      	cmp	r4, r3
1000e61a:	d100      	bne.n	1000e61e <at_ble_event_get+0x1b2>
1000e61c:	e1d3      	b.n	1000e9c6 <at_ble_event_get+0x55a>
1000e61e:	e10d      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e620:	4b5c      	ldr	r3, [pc, #368]	; (1000e794 <at_ble_event_get+0x328>)
1000e622:	429c      	cmp	r4, r3
1000e624:	d100      	bne.n	1000e628 <at_ble_event_get+0x1bc>
1000e626:	e1a9      	b.n	1000e97c <at_ble_event_get+0x510>
1000e628:	d808      	bhi.n	1000e63c <at_ble_event_get+0x1d0>
1000e62a:	4b5b      	ldr	r3, [pc, #364]	; (1000e798 <at_ble_event_get+0x32c>)
1000e62c:	429c      	cmp	r4, r3
1000e62e:	d100      	bne.n	1000e632 <at_ble_event_get+0x1c6>
1000e630:	e196      	b.n	1000e960 <at_ble_event_get+0x4f4>
1000e632:	4b5a      	ldr	r3, [pc, #360]	; (1000e79c <at_ble_event_get+0x330>)
1000e634:	429c      	cmp	r4, r3
1000e636:	d100      	bne.n	1000e63a <at_ble_event_get+0x1ce>
1000e638:	e199      	b.n	1000e96e <at_ble_event_get+0x502>
1000e63a:	e0ff      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e63c:	4b58      	ldr	r3, [pc, #352]	; (1000e7a0 <at_ble_event_get+0x334>)
1000e63e:	429c      	cmp	r4, r3
1000e640:	d100      	bne.n	1000e644 <at_ble_event_get+0x1d8>
1000e642:	e1a2      	b.n	1000e98a <at_ble_event_get+0x51e>
1000e644:	4b57      	ldr	r3, [pc, #348]	; (1000e7a4 <at_ble_event_get+0x338>)
1000e646:	429c      	cmp	r4, r3
1000e648:	d100      	bne.n	1000e64c <at_ble_event_get+0x1e0>
1000e64a:	e1d4      	b.n	1000e9f6 <at_ble_event_get+0x58a>
1000e64c:	e0f6      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e64e:	4b56      	ldr	r3, [pc, #344]	; (1000e7a8 <at_ble_event_get+0x33c>)
1000e650:	429c      	cmp	r4, r3
1000e652:	d100      	bne.n	1000e656 <at_ble_event_get+0x1ea>
1000e654:	e1c8      	b.n	1000e9e8 <at_ble_event_get+0x57c>
1000e656:	d812      	bhi.n	1000e67e <at_ble_event_get+0x212>
1000e658:	4b54      	ldr	r3, [pc, #336]	; (1000e7ac <at_ble_event_get+0x340>)
1000e65a:	429c      	cmp	r4, r3
1000e65c:	d100      	bne.n	1000e660 <at_ble_event_get+0x1f4>
1000e65e:	e1d1      	b.n	1000ea04 <at_ble_event_get+0x598>
1000e660:	d804      	bhi.n	1000e66c <at_ble_event_get+0x200>
1000e662:	4b53      	ldr	r3, [pc, #332]	; (1000e7b0 <at_ble_event_get+0x344>)
1000e664:	429c      	cmp	r4, r3
1000e666:	d100      	bne.n	1000e66a <at_ble_event_get+0x1fe>
1000e668:	e19b      	b.n	1000e9a2 <at_ble_event_get+0x536>
1000e66a:	e0e7      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e66c:	4b51      	ldr	r3, [pc, #324]	; (1000e7b4 <at_ble_event_get+0x348>)
1000e66e:	429c      	cmp	r4, r3
1000e670:	d100      	bne.n	1000e674 <at_ble_event_get+0x208>
1000e672:	e1ad      	b.n	1000e9d0 <at_ble_event_get+0x564>
1000e674:	4b50      	ldr	r3, [pc, #320]	; (1000e7b8 <at_ble_event_get+0x34c>)
1000e676:	429c      	cmp	r4, r3
1000e678:	d100      	bne.n	1000e67c <at_ble_event_get+0x210>
1000e67a:	e1b0      	b.n	1000e9de <at_ble_event_get+0x572>
1000e67c:	e0de      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e67e:	4b4f      	ldr	r3, [pc, #316]	; (1000e7bc <at_ble_event_get+0x350>)
1000e680:	429c      	cmp	r4, r3
1000e682:	d100      	bne.n	1000e686 <at_ble_event_get+0x21a>
1000e684:	e0e0      	b.n	1000e848 <at_ble_event_get+0x3dc>
1000e686:	d809      	bhi.n	1000e69c <at_ble_event_get+0x230>
1000e688:	3b08      	subs	r3, #8
1000e68a:	429c      	cmp	r4, r3
1000e68c:	d100      	bne.n	1000e690 <at_ble_event_get+0x224>
1000e68e:	e0d7      	b.n	1000e840 <at_ble_event_get+0x3d4>
1000e690:	4b4b      	ldr	r3, [pc, #300]	; (1000e7c0 <at_ble_event_get+0x354>)
1000e692:	2639      	movs	r6, #57	; 0x39
1000e694:	429c      	cmp	r4, r3
1000e696:	d100      	bne.n	1000e69a <at_ble_event_get+0x22e>
1000e698:	e1dd      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e69a:	e0cf      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e69c:	23d1      	movs	r3, #209	; 0xd1
1000e69e:	011b      	lsls	r3, r3, #4
1000e6a0:	429c      	cmp	r4, r3
1000e6a2:	d100      	bne.n	1000e6a6 <at_ble_event_get+0x23a>
1000e6a4:	e0d6      	b.n	1000e854 <at_ble_event_get+0x3e8>
1000e6a6:	4b47      	ldr	r3, [pc, #284]	; (1000e7c4 <at_ble_event_get+0x358>)
1000e6a8:	429c      	cmp	r4, r3
1000e6aa:	d100      	bne.n	1000e6ae <at_ble_event_get+0x242>
1000e6ac:	e0d8      	b.n	1000e860 <at_ble_event_get+0x3f4>
1000e6ae:	e0c5      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e6b0:	4b45      	ldr	r3, [pc, #276]	; (1000e7c8 <at_ble_event_get+0x35c>)
1000e6b2:	429c      	cmp	r4, r3
1000e6b4:	d100      	bne.n	1000e6b8 <at_ble_event_get+0x24c>
1000e6b6:	e117      	b.n	1000e8e8 <at_ble_event_get+0x47c>
1000e6b8:	d82e      	bhi.n	1000e718 <at_ble_event_get+0x2ac>
1000e6ba:	4b44      	ldr	r3, [pc, #272]	; (1000e7cc <at_ble_event_get+0x360>)
1000e6bc:	429c      	cmp	r4, r3
1000e6be:	d100      	bne.n	1000e6c2 <at_ble_event_get+0x256>
1000e6c0:	e13d      	b.n	1000e93e <at_ble_event_get+0x4d2>
1000e6c2:	d812      	bhi.n	1000e6ea <at_ble_event_get+0x27e>
1000e6c4:	4b42      	ldr	r3, [pc, #264]	; (1000e7d0 <at_ble_event_get+0x364>)
1000e6c6:	429c      	cmp	r4, r3
1000e6c8:	d100      	bne.n	1000e6cc <at_ble_event_get+0x260>
1000e6ca:	e0e8      	b.n	1000e89e <at_ble_event_get+0x432>
1000e6cc:	d804      	bhi.n	1000e6d8 <at_ble_event_get+0x26c>
1000e6ce:	3b03      	subs	r3, #3
1000e6d0:	429c      	cmp	r4, r3
1000e6d2:	d100      	bne.n	1000e6d6 <at_ble_event_get+0x26a>
1000e6d4:	e0d0      	b.n	1000e878 <at_ble_event_get+0x40c>
1000e6d6:	e0b1      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e6d8:	4b3e      	ldr	r3, [pc, #248]	; (1000e7d4 <at_ble_event_get+0x368>)
1000e6da:	429c      	cmp	r4, r3
1000e6dc:	d100      	bne.n	1000e6e0 <at_ble_event_get+0x274>
1000e6de:	e0d0      	b.n	1000e882 <at_ble_event_get+0x416>
1000e6e0:	4b3d      	ldr	r3, [pc, #244]	; (1000e7d8 <at_ble_event_get+0x36c>)
1000e6e2:	429c      	cmp	r4, r3
1000e6e4:	d100      	bne.n	1000e6e8 <at_ble_event_get+0x27c>
1000e6e6:	e0f9      	b.n	1000e8dc <at_ble_event_get+0x470>
1000e6e8:	e0a8      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e6ea:	4b3c      	ldr	r3, [pc, #240]	; (1000e7dc <at_ble_event_get+0x370>)
1000e6ec:	429c      	cmp	r4, r3
1000e6ee:	d100      	bne.n	1000e6f2 <at_ble_event_get+0x286>
1000e6f0:	e0db      	b.n	1000e8aa <at_ble_event_get+0x43e>
1000e6f2:	d808      	bhi.n	1000e706 <at_ble_event_get+0x29a>
1000e6f4:	4b3a      	ldr	r3, [pc, #232]	; (1000e7e0 <at_ble_event_get+0x374>)
1000e6f6:	429c      	cmp	r4, r3
1000e6f8:	d100      	bne.n	1000e6fc <at_ble_event_get+0x290>
1000e6fa:	e11b      	b.n	1000e934 <at_ble_event_get+0x4c8>
1000e6fc:	4b39      	ldr	r3, [pc, #228]	; (1000e7e4 <at_ble_event_get+0x378>)
1000e6fe:	429c      	cmp	r4, r3
1000e700:	d100      	bne.n	1000e704 <at_ble_event_get+0x298>
1000e702:	e0d8      	b.n	1000e8b6 <at_ble_event_get+0x44a>
1000e704:	e09a      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e706:	4b38      	ldr	r3, [pc, #224]	; (1000e7e8 <at_ble_event_get+0x37c>)
1000e708:	429c      	cmp	r4, r3
1000e70a:	d100      	bne.n	1000e70e <at_ble_event_get+0x2a2>
1000e70c:	e0d8      	b.n	1000e8c0 <at_ble_event_get+0x454>
1000e70e:	4b37      	ldr	r3, [pc, #220]	; (1000e7ec <at_ble_event_get+0x380>)
1000e710:	429c      	cmp	r4, r3
1000e712:	d100      	bne.n	1000e716 <at_ble_event_get+0x2aa>
1000e714:	e0db      	b.n	1000e8ce <at_ble_event_get+0x462>
1000e716:	e091      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e718:	4b35      	ldr	r3, [pc, #212]	; (1000e7f0 <at_ble_event_get+0x384>)
1000e71a:	429c      	cmp	r4, r3
1000e71c:	d100      	bne.n	1000e720 <at_ble_event_get+0x2b4>
1000e71e:	e0f7      	b.n	1000e910 <at_ble_event_get+0x4a4>
1000e720:	d876      	bhi.n	1000e810 <at_ble_event_get+0x3a4>
1000e722:	4b34      	ldr	r3, [pc, #208]	; (1000e7f4 <at_ble_event_get+0x388>)
1000e724:	429c      	cmp	r4, r3
1000e726:	d100      	bne.n	1000e72a <at_ble_event_get+0x2be>
1000e728:	e0f8      	b.n	1000e91c <at_ble_event_get+0x4b0>
1000e72a:	d869      	bhi.n	1000e800 <at_ble_event_get+0x394>
1000e72c:	4b32      	ldr	r3, [pc, #200]	; (1000e7f8 <at_ble_event_get+0x38c>)
1000e72e:	429c      	cmp	r4, r3
1000e730:	d100      	bne.n	1000e734 <at_ble_event_get+0x2c8>
1000e732:	e0e0      	b.n	1000e8f6 <at_ble_event_get+0x48a>
1000e734:	4b31      	ldr	r3, [pc, #196]	; (1000e7fc <at_ble_event_get+0x390>)
1000e736:	429c      	cmp	r4, r3
1000e738:	d100      	bne.n	1000e73c <at_ble_event_get+0x2d0>
1000e73a:	e0a9      	b.n	1000e890 <at_ble_event_get+0x424>
1000e73c:	e07e      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e73e:	46c0      	nop			; (mov r8, r8)
1000e740:	1000fe71 	.word	0x1000fe71
1000e744:	10019db0 	.word	0x10019db0
1000e748:	1000db79 	.word	0x1000db79
1000e74c:	10019db4 	.word	0x10019db4
1000e750:	10019dac 	.word	0x10019dac
1000e754:	10019d9c 	.word	0x10019d9c
1000e758:	1000e355 	.word	0x1000e355
1000e75c:	100156d1 	.word	0x100156d1
1000e760:	0000ffff 	.word	0x0000ffff
1000e764:	0000fffe 	.word	0x0000fffe
1000e768:	1000ddf1 	.word	0x1000ddf1
1000e76c:	1000fe73 	.word	0x1000fe73
1000e770:	0000201e 	.word	0x0000201e
1000e774:	0000201d 	.word	0x0000201d
1000e778:	00000c03 	.word	0x00000c03
1000e77c:	0000201f 	.word	0x0000201f
1000e780:	00000d1c 	.word	0x00000d1c
1000e784:	00000c0c 	.word	0x00000c0c
1000e788:	00000c02 	.word	0x00000c02
1000e78c:	00000a02 	.word	0x00000a02
1000e790:	00000a03 	.word	0x00000a03
1000e794:	00000c06 	.word	0x00000c06
1000e798:	00000c04 	.word	0x00000c04
1000e79c:	00000c05 	.word	0x00000c05
1000e7a0:	00000c07 	.word	0x00000c07
1000e7a4:	00000c09 	.word	0x00000c09
1000e7a8:	00000c17 	.word	0x00000c17
1000e7ac:	00000c12 	.word	0x00000c12
1000e7b0:	00000c0d 	.word	0x00000c0d
1000e7b4:	00000c13 	.word	0x00000c13
1000e7b8:	00000c15 	.word	0x00000c15
1000e7bc:	00000d08 	.word	0x00000d08
1000e7c0:	00000d01 	.word	0x00000d01
1000e7c4:	00000d15 	.word	0x00000d15
1000e7c8:	00000e1b 	.word	0x00000e1b
1000e7cc:	00000e0f 	.word	0x00000e0f
1000e7d0:	00000e03 	.word	0x00000e03
1000e7d4:	00000e06 	.word	0x00000e06
1000e7d8:	00000e0a 	.word	0x00000e0a
1000e7dc:	00000e15 	.word	0x00000e15
1000e7e0:	00000e11 	.word	0x00000e11
1000e7e4:	00000e13 	.word	0x00000e13
1000e7e8:	00000e17 	.word	0x00000e17
1000e7ec:	00000e19 	.word	0x00000e19
1000e7f0:	00000e27 	.word	0x00000e27
1000e7f4:	00000e21 	.word	0x00000e21
1000e7f8:	00000e1c 	.word	0x00000e1c
1000e7fc:	00000e1d 	.word	0x00000e1d
1000e800:	4b9f      	ldr	r3, [pc, #636]	; (1000ea80 <at_ble_event_get+0x614>)
1000e802:	429c      	cmp	r4, r3
1000e804:	d07e      	beq.n	1000e904 <at_ble_event_get+0x498>
1000e806:	4b9f      	ldr	r3, [pc, #636]	; (1000ea84 <at_ble_event_get+0x618>)
1000e808:	429c      	cmp	r4, r3
1000e80a:	d100      	bne.n	1000e80e <at_ble_event_get+0x3a2>
1000e80c:	e08c      	b.n	1000e928 <at_ble_event_get+0x4bc>
1000e80e:	e015      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e810:	4b9d      	ldr	r3, [pc, #628]	; (1000ea88 <at_ble_event_get+0x61c>)
1000e812:	429c      	cmp	r4, r3
1000e814:	d100      	bne.n	1000e818 <at_ble_event_get+0x3ac>
1000e816:	e10a      	b.n	1000ea2e <at_ble_event_get+0x5c2>
1000e818:	d808      	bhi.n	1000e82c <at_ble_event_get+0x3c0>
1000e81a:	4b9c      	ldr	r3, [pc, #624]	; (1000ea8c <at_ble_event_get+0x620>)
1000e81c:	429c      	cmp	r4, r3
1000e81e:	d100      	bne.n	1000e822 <at_ble_event_get+0x3b6>
1000e820:	e0f7      	b.n	1000ea12 <at_ble_event_get+0x5a6>
1000e822:	4b9b      	ldr	r3, [pc, #620]	; (1000ea90 <at_ble_event_get+0x624>)
1000e824:	429c      	cmp	r4, r3
1000e826:	d100      	bne.n	1000e82a <at_ble_event_get+0x3be>
1000e828:	e0fa      	b.n	1000ea20 <at_ble_event_get+0x5b4>
1000e82a:	e007      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000e82c:	4b99      	ldr	r3, [pc, #612]	; (1000ea94 <at_ble_event_get+0x628>)
1000e82e:	429c      	cmp	r4, r3
1000e830:	d100      	bne.n	1000e834 <at_ble_event_get+0x3c8>
1000e832:	e103      	b.n	1000ea3c <at_ble_event_get+0x5d0>
1000e834:	4b98      	ldr	r3, [pc, #608]	; (1000ea98 <at_ble_event_get+0x62c>)
1000e836:	429c      	cmp	r4, r3
1000e838:	d100      	bne.n	1000e83c <at_ble_event_get+0x3d0>
1000e83a:	e106      	b.n	1000ea4a <at_ble_event_get+0x5de>
1000e83c:	2600      	movs	r6, #0
1000e83e:	e10a      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e840:	1c30      	adds	r0, r6, #0
1000e842:	1c29      	adds	r1, r5, #0
1000e844:	4b95      	ldr	r3, [pc, #596]	; (1000ea9c <at_ble_event_get+0x630>)
1000e846:	e014      	b.n	1000e872 <at_ble_event_get+0x406>
1000e848:	1c30      	adds	r0, r6, #0
1000e84a:	1c29      	adds	r1, r5, #0
1000e84c:	4b94      	ldr	r3, [pc, #592]	; (1000eaa0 <at_ble_event_get+0x634>)
1000e84e:	4798      	blx	r3
1000e850:	2604      	movs	r6, #4
1000e852:	e100      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e854:	1c30      	adds	r0, r6, #0
1000e856:	1c29      	adds	r1, r5, #0
1000e858:	4b92      	ldr	r3, [pc, #584]	; (1000eaa4 <at_ble_event_get+0x638>)
1000e85a:	4798      	blx	r3
1000e85c:	2601      	movs	r6, #1
1000e85e:	e0fa      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e860:	1c30      	adds	r0, r6, #0
1000e862:	1c29      	adds	r1, r5, #0
1000e864:	4b90      	ldr	r3, [pc, #576]	; (1000eaa8 <at_ble_event_get+0x63c>)
1000e866:	4798      	blx	r3
1000e868:	260f      	movs	r6, #15
1000e86a:	e0f4      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e86c:	1c30      	adds	r0, r6, #0
1000e86e:	1c29      	adds	r1, r5, #0
1000e870:	4b8e      	ldr	r3, [pc, #568]	; (1000eaac <at_ble_event_get+0x640>)
1000e872:	4798      	blx	r3
1000e874:	1c06      	adds	r6, r0, #0
1000e876:	e0ee      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e878:	9801      	ldr	r0, [sp, #4]
1000e87a:	1c31      	adds	r1, r6, #0
1000e87c:	1c2a      	adds	r2, r5, #0
1000e87e:	4b8c      	ldr	r3, [pc, #560]	; (1000eab0 <at_ble_event_get+0x644>)
1000e880:	e017      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e882:	1c31      	adds	r1, r6, #0
1000e884:	9801      	ldr	r0, [sp, #4]
1000e886:	1c2a      	adds	r2, r5, #0
1000e888:	4b8a      	ldr	r3, [pc, #552]	; (1000eab4 <at_ble_event_get+0x648>)
1000e88a:	4798      	blx	r3
1000e88c:	2611      	movs	r6, #17
1000e88e:	e0e2      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e890:	1c31      	adds	r1, r6, #0
1000e892:	9801      	ldr	r0, [sp, #4]
1000e894:	1c2a      	adds	r2, r5, #0
1000e896:	4b88      	ldr	r3, [pc, #544]	; (1000eab8 <at_ble_event_get+0x64c>)
1000e898:	4798      	blx	r3
1000e89a:	2612      	movs	r6, #18
1000e89c:	e0db      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e89e:	1c30      	adds	r0, r6, #0
1000e8a0:	1c29      	adds	r1, r5, #0
1000e8a2:	4b86      	ldr	r3, [pc, #536]	; (1000eabc <at_ble_event_get+0x650>)
1000e8a4:	4798      	blx	r3
1000e8a6:	2606      	movs	r6, #6
1000e8a8:	e0d5      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e8aa:	1c31      	adds	r1, r6, #0
1000e8ac:	1c2a      	adds	r2, r5, #0
1000e8ae:	9801      	ldr	r0, [sp, #4]
1000e8b0:	4b83      	ldr	r3, [pc, #524]	; (1000eac0 <at_ble_event_get+0x654>)
1000e8b2:	4798      	blx	r3
1000e8b4:	e7de      	b.n	1000e874 <at_ble_event_get+0x408>
1000e8b6:	9801      	ldr	r0, [sp, #4]
1000e8b8:	1c31      	adds	r1, r6, #0
1000e8ba:	1c2a      	adds	r2, r5, #0
1000e8bc:	4b81      	ldr	r3, [pc, #516]	; (1000eac4 <at_ble_event_get+0x658>)
1000e8be:	e7f8      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e8c0:	1c31      	adds	r1, r6, #0
1000e8c2:	9801      	ldr	r0, [sp, #4]
1000e8c4:	1c2a      	adds	r2, r5, #0
1000e8c6:	4b80      	ldr	r3, [pc, #512]	; (1000eac8 <at_ble_event_get+0x65c>)
1000e8c8:	4798      	blx	r3
1000e8ca:	260d      	movs	r6, #13
1000e8cc:	e0c3      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e8ce:	1c31      	adds	r1, r6, #0
1000e8d0:	9801      	ldr	r0, [sp, #4]
1000e8d2:	1c2a      	adds	r2, r5, #0
1000e8d4:	4b7d      	ldr	r3, [pc, #500]	; (1000eacc <at_ble_event_get+0x660>)
1000e8d6:	4798      	blx	r3
1000e8d8:	260e      	movs	r6, #14
1000e8da:	e0bc      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e8dc:	9801      	ldr	r0, [sp, #4]
1000e8de:	1c31      	adds	r1, r6, #0
1000e8e0:	1c2a      	adds	r2, r5, #0
1000e8e2:	4b7b      	ldr	r3, [pc, #492]	; (1000ead0 <at_ble_event_get+0x664>)
1000e8e4:	4798      	blx	r3
1000e8e6:	e084      	b.n	1000e9f2 <at_ble_event_get+0x586>
1000e8e8:	1c31      	adds	r1, r6, #0
1000e8ea:	9801      	ldr	r0, [sp, #4]
1000e8ec:	1c2a      	adds	r2, r5, #0
1000e8ee:	4b79      	ldr	r3, [pc, #484]	; (1000ead4 <at_ble_event_get+0x668>)
1000e8f0:	4798      	blx	r3
1000e8f2:	260b      	movs	r6, #11
1000e8f4:	e0af      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e8f6:	1c31      	adds	r1, r6, #0
1000e8f8:	9801      	ldr	r0, [sp, #4]
1000e8fa:	1c2a      	adds	r2, r5, #0
1000e8fc:	4b76      	ldr	r3, [pc, #472]	; (1000ead8 <at_ble_event_get+0x66c>)
1000e8fe:	4798      	blx	r3
1000e900:	2610      	movs	r6, #16
1000e902:	e0a8      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e904:	1c30      	adds	r0, r6, #0
1000e906:	1c29      	adds	r1, r5, #0
1000e908:	4b74      	ldr	r3, [pc, #464]	; (1000eadc <at_ble_event_get+0x670>)
1000e90a:	4798      	blx	r3
1000e90c:	2628      	movs	r6, #40	; 0x28
1000e90e:	e0a2      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e910:	1c30      	adds	r0, r6, #0
1000e912:	1c29      	adds	r1, r5, #0
1000e914:	4b72      	ldr	r3, [pc, #456]	; (1000eae0 <at_ble_event_get+0x674>)
1000e916:	4798      	blx	r3
1000e918:	2629      	movs	r6, #41	; 0x29
1000e91a:	e09c      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e91c:	1c30      	adds	r0, r6, #0
1000e91e:	1c29      	adds	r1, r5, #0
1000e920:	4b70      	ldr	r3, [pc, #448]	; (1000eae4 <at_ble_event_get+0x678>)
1000e922:	4798      	blx	r3
1000e924:	2627      	movs	r6, #39	; 0x27
1000e926:	e096      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e928:	1c30      	adds	r0, r6, #0
1000e92a:	1c29      	adds	r1, r5, #0
1000e92c:	4b6e      	ldr	r3, [pc, #440]	; (1000eae8 <at_ble_event_get+0x67c>)
1000e92e:	4798      	blx	r3
1000e930:	262a      	movs	r6, #42	; 0x2a
1000e932:	e090      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e934:	9801      	ldr	r0, [sp, #4]
1000e936:	1c31      	adds	r1, r6, #0
1000e938:	1c2a      	adds	r2, r5, #0
1000e93a:	4b6c      	ldr	r3, [pc, #432]	; (1000eaec <at_ble_event_get+0x680>)
1000e93c:	e7b9      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e93e:	9801      	ldr	r0, [sp, #4]
1000e940:	1c31      	adds	r1, r6, #0
1000e942:	1c2a      	adds	r2, r5, #0
1000e944:	4b6a      	ldr	r3, [pc, #424]	; (1000eaf0 <at_ble_event_get+0x684>)
1000e946:	e7b4      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e948:	1c30      	adds	r0, r6, #0
1000e94a:	1c29      	adds	r1, r5, #0
1000e94c:	4b69      	ldr	r3, [pc, #420]	; (1000eaf4 <at_ble_event_get+0x688>)
1000e94e:	4798      	blx	r3
1000e950:	262b      	movs	r6, #43	; 0x2b
1000e952:	e080      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e954:	1c30      	adds	r0, r6, #0
1000e956:	1c29      	adds	r1, r5, #0
1000e958:	4b67      	ldr	r3, [pc, #412]	; (1000eaf8 <at_ble_event_get+0x68c>)
1000e95a:	4798      	blx	r3
1000e95c:	262c      	movs	r6, #44	; 0x2c
1000e95e:	e07a      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e960:	1c31      	adds	r1, r6, #0
1000e962:	9801      	ldr	r0, [sp, #4]
1000e964:	1c2a      	adds	r2, r5, #0
1000e966:	4b65      	ldr	r3, [pc, #404]	; (1000eafc <at_ble_event_get+0x690>)
1000e968:	4798      	blx	r3
1000e96a:	2613      	movs	r6, #19
1000e96c:	e073      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e96e:	1c31      	adds	r1, r6, #0
1000e970:	9801      	ldr	r0, [sp, #4]
1000e972:	1c2a      	adds	r2, r5, #0
1000e974:	4b62      	ldr	r3, [pc, #392]	; (1000eb00 <at_ble_event_get+0x694>)
1000e976:	4798      	blx	r3
1000e978:	2614      	movs	r6, #20
1000e97a:	e06c      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e97c:	1c31      	adds	r1, r6, #0
1000e97e:	9801      	ldr	r0, [sp, #4]
1000e980:	1c2a      	adds	r2, r5, #0
1000e982:	4b60      	ldr	r3, [pc, #384]	; (1000eb04 <at_ble_event_get+0x698>)
1000e984:	4798      	blx	r3
1000e986:	2615      	movs	r6, #21
1000e988:	e065      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e98a:	1c31      	adds	r1, r6, #0
1000e98c:	9801      	ldr	r0, [sp, #4]
1000e98e:	1c2a      	adds	r2, r5, #0
1000e990:	4b5d      	ldr	r3, [pc, #372]	; (1000eb08 <at_ble_event_get+0x69c>)
1000e992:	4798      	blx	r3
1000e994:	2616      	movs	r6, #22
1000e996:	e05e      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e998:	9801      	ldr	r0, [sp, #4]
1000e99a:	1c31      	adds	r1, r6, #0
1000e99c:	1c2a      	adds	r2, r5, #0
1000e99e:	4b5b      	ldr	r3, [pc, #364]	; (1000eb0c <at_ble_event_get+0x6a0>)
1000e9a0:	e787      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e9a2:	1c31      	adds	r1, r6, #0
1000e9a4:	9801      	ldr	r0, [sp, #4]
1000e9a6:	1c2a      	adds	r2, r5, #0
1000e9a8:	4b58      	ldr	r3, [pc, #352]	; (1000eb0c <at_ble_event_get+0x6a0>)
1000e9aa:	4798      	blx	r3
1000e9ac:	88a9      	ldrh	r1, [r5, #4]
1000e9ae:	1c06      	adds	r6, r0, #0
1000e9b0:	4b57      	ldr	r3, [pc, #348]	; (1000eb10 <at_ble_event_get+0x6a4>)
1000e9b2:	8828      	ldrh	r0, [r5, #0]
1000e9b4:	4798      	blx	r3
1000e9b6:	e04e      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e9b8:	1c31      	adds	r1, r6, #0
1000e9ba:	9801      	ldr	r0, [sp, #4]
1000e9bc:	1c2a      	adds	r2, r5, #0
1000e9be:	4b55      	ldr	r3, [pc, #340]	; (1000eb14 <at_ble_event_get+0x6a8>)
1000e9c0:	4798      	blx	r3
1000e9c2:	2623      	movs	r6, #35	; 0x23
1000e9c4:	e047      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e9c6:	9801      	ldr	r0, [sp, #4]
1000e9c8:	1c31      	adds	r1, r6, #0
1000e9ca:	1c2a      	adds	r2, r5, #0
1000e9cc:	4b52      	ldr	r3, [pc, #328]	; (1000eb18 <at_ble_event_get+0x6ac>)
1000e9ce:	e770      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e9d0:	9b01      	ldr	r3, [sp, #4]
1000e9d2:	1c30      	adds	r0, r6, #0
1000e9d4:	0a1f      	lsrs	r7, r3, #8
1000e9d6:	802f      	strh	r7, [r5, #0]
1000e9d8:	1c29      	adds	r1, r5, #0
1000e9da:	4b50      	ldr	r3, [pc, #320]	; (1000eb1c <at_ble_event_get+0x6b0>)
1000e9dc:	e749      	b.n	1000e872 <at_ble_event_get+0x406>
1000e9de:	9801      	ldr	r0, [sp, #4]
1000e9e0:	1c31      	adds	r1, r6, #0
1000e9e2:	1c2a      	adds	r2, r5, #0
1000e9e4:	4b4e      	ldr	r3, [pc, #312]	; (1000eb20 <at_ble_event_get+0x6b4>)
1000e9e6:	e764      	b.n	1000e8b2 <at_ble_event_get+0x446>
1000e9e8:	1c30      	adds	r0, r6, #0
1000e9ea:	1c29      	adds	r1, r5, #0
1000e9ec:	9a01      	ldr	r2, [sp, #4]
1000e9ee:	4b4d      	ldr	r3, [pc, #308]	; (1000eb24 <at_ble_event_get+0x6b8>)
1000e9f0:	4798      	blx	r3
1000e9f2:	263b      	movs	r6, #59	; 0x3b
1000e9f4:	e02f      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000e9f6:	1c31      	adds	r1, r6, #0
1000e9f8:	9801      	ldr	r0, [sp, #4]
1000e9fa:	1c2a      	adds	r2, r5, #0
1000e9fc:	4b4a      	ldr	r3, [pc, #296]	; (1000eb28 <at_ble_event_get+0x6bc>)
1000e9fe:	4798      	blx	r3
1000ea00:	2618      	movs	r6, #24
1000ea02:	e028      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea04:	1c31      	adds	r1, r6, #0
1000ea06:	9801      	ldr	r0, [sp, #4]
1000ea08:	1c2a      	adds	r2, r5, #0
1000ea0a:	4b48      	ldr	r3, [pc, #288]	; (1000eb2c <at_ble_event_get+0x6c0>)
1000ea0c:	4798      	blx	r3
1000ea0e:	2620      	movs	r6, #32
1000ea10:	e021      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea12:	1c31      	adds	r1, r6, #0
1000ea14:	9801      	ldr	r0, [sp, #4]
1000ea16:	1c2a      	adds	r2, r5, #0
1000ea18:	4b45      	ldr	r3, [pc, #276]	; (1000eb30 <at_ble_event_get+0x6c4>)
1000ea1a:	4798      	blx	r3
1000ea1c:	2633      	movs	r6, #51	; 0x33
1000ea1e:	e01a      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea20:	1c31      	adds	r1, r6, #0
1000ea22:	9801      	ldr	r0, [sp, #4]
1000ea24:	1c2a      	adds	r2, r5, #0
1000ea26:	4b43      	ldr	r3, [pc, #268]	; (1000eb34 <at_ble_event_get+0x6c8>)
1000ea28:	4798      	blx	r3
1000ea2a:	2630      	movs	r6, #48	; 0x30
1000ea2c:	e013      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea2e:	1c31      	adds	r1, r6, #0
1000ea30:	9801      	ldr	r0, [sp, #4]
1000ea32:	1c2a      	adds	r2, r5, #0
1000ea34:	4b40      	ldr	r3, [pc, #256]	; (1000eb38 <at_ble_event_get+0x6cc>)
1000ea36:	4798      	blx	r3
1000ea38:	2634      	movs	r6, #52	; 0x34
1000ea3a:	e00c      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea3c:	1c31      	adds	r1, r6, #0
1000ea3e:	9801      	ldr	r0, [sp, #4]
1000ea40:	1c2a      	adds	r2, r5, #0
1000ea42:	4b3e      	ldr	r3, [pc, #248]	; (1000eb3c <at_ble_event_get+0x6d0>)
1000ea44:	4798      	blx	r3
1000ea46:	2635      	movs	r6, #53	; 0x35
1000ea48:	e005      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea4a:	1c31      	adds	r1, r6, #0
1000ea4c:	9801      	ldr	r0, [sp, #4]
1000ea4e:	1c2a      	adds	r2, r5, #0
1000ea50:	4b3b      	ldr	r3, [pc, #236]	; (1000eb40 <at_ble_event_get+0x6d4>)
1000ea52:	4798      	blx	r3
1000ea54:	2632      	movs	r6, #50	; 0x32
1000ea56:	9b03      	ldr	r3, [sp, #12]
1000ea58:	701e      	strb	r6, [r3, #0]
1000ea5a:	2300      	movs	r3, #0
1000ea5c:	9302      	str	r3, [sp, #8]
1000ea5e:	e57a      	b.n	1000e556 <at_ble_event_get+0xea>
1000ea60:	23d0      	movs	r3, #208	; 0xd0
1000ea62:	e7fb      	b.n	1000ea5c <at_ble_event_get+0x5f0>
1000ea64:	9b01      	ldr	r3, [sp, #4]
1000ea66:	9e02      	ldr	r6, [sp, #8]
1000ea68:	2bbb      	cmp	r3, #187	; 0xbb
1000ea6a:	d000      	beq.n	1000ea6e <at_ble_event_get+0x602>
1000ea6c:	e6e6      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000ea6e:	e7f2      	b.n	1000ea56 <at_ble_event_get+0x5ea>
1000ea70:	9b02      	ldr	r3, [sp, #8]
1000ea72:	2b00      	cmp	r3, #0
1000ea74:	d000      	beq.n	1000ea78 <at_ble_event_get+0x60c>
1000ea76:	e56e      	b.n	1000e556 <at_ble_event_get+0xea>
1000ea78:	e6e0      	b.n	1000e83c <at_ble_event_get+0x3d0>
1000ea7a:	9802      	ldr	r0, [sp, #8]
1000ea7c:	b007      	add	sp, #28
1000ea7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea80:	00000e22 	.word	0x00000e22
1000ea84:	00000e25 	.word	0x00000e25
1000ea88:	00001b05 	.word	0x00001b05
1000ea8c:	00001b01 	.word	0x00001b01
1000ea90:	00001b03 	.word	0x00001b03
1000ea94:	00001b06 	.word	0x00001b06
1000ea98:	00001b08 	.word	0x00001b08
1000ea9c:	10010c9d 	.word	0x10010c9d
1000eaa0:	10010c81 	.word	0x10010c81
1000eaa4:	10010f1d 	.word	0x10010f1d
1000eaa8:	1001100d 	.word	0x1001100d
1000eaac:	10011031 	.word	0x10011031
1000eab0:	10010015 	.word	0x10010015
1000eab4:	10010895 	.word	0x10010895
1000eab8:	10010911 	.word	0x10010911
1000eabc:	100102cd 	.word	0x100102cd
1000eac0:	10010369 	.word	0x10010369
1000eac4:	10010441 	.word	0x10010441
1000eac8:	100106c9 	.word	0x100106c9
1000eacc:	10010769 	.word	0x10010769
1000ead0:	10010821 	.word	0x10010821
1000ead4:	10010849 	.word	0x10010849
1000ead8:	1001085f 	.word	0x1001085f
1000eadc:	10010929 	.word	0x10010929
1000eae0:	10010957 	.word	0x10010957
1000eae4:	1001096d 	.word	0x1001096d
1000eae8:	10010997 	.word	0x10010997
1000eaec:	100107c5 	.word	0x100107c5
1000eaf0:	100107ef 	.word	0x100107ef
1000eaf4:	1000fa55 	.word	0x1000fa55
1000eaf8:	1000fa81 	.word	0x1000fa81
1000eafc:	10011251 	.word	0x10011251
1000eb00:	1001128d 	.word	0x1001128d
1000eb04:	100112d5 	.word	0x100112d5
1000eb08:	10011319 	.word	0x10011319
1000eb0c:	1001134d 	.word	0x1001134d
1000eb10:	10011211 	.word	0x10011211
1000eb14:	10011419 	.word	0x10011419
1000eb18:	100113a1 	.word	0x100113a1
1000eb1c:	1000f939 	.word	0x1000f939
1000eb20:	1000f9a5 	.word	0x1000f9a5
1000eb24:	1000f969 	.word	0x1000f969
1000eb28:	10011429 	.word	0x10011429
1000eb2c:	10011469 	.word	0x10011469
1000eb30:	10011731 	.word	0x10011731
1000eb34:	1001173b 	.word	0x1001173b
1000eb38:	10011741 	.word	0x10011741
1000eb3c:	10011747 	.word	0x10011747
1000eb40:	10011753 	.word	0x10011753

1000eb44 <internal_event_flush>:
1000eb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eb46:	490e      	ldr	r1, [pc, #56]	; (1000eb80 <internal_event_flush+0x3c>)
1000eb48:	2400      	movs	r4, #0
1000eb4a:	680b      	ldr	r3, [r1, #0]
1000eb4c:	1c0f      	adds	r7, r1, #0
1000eb4e:	1c1e      	adds	r6, r3, #0
1000eb50:	4a0c      	ldr	r2, [pc, #48]	; (1000eb84 <internal_event_flush+0x40>)
1000eb52:	6815      	ldr	r5, [r2, #0]
1000eb54:	9201      	str	r2, [sp, #4]
1000eb56:	2b00      	cmp	r3, #0
1000eb58:	d00e      	beq.n	1000eb78 <internal_event_flush+0x34>
1000eb5a:	889a      	ldrh	r2, [r3, #4]
1000eb5c:	6819      	ldr	r1, [r3, #0]
1000eb5e:	4282      	cmp	r2, r0
1000eb60:	d107      	bne.n	1000eb72 <internal_event_flush+0x2e>
1000eb62:	2c00      	cmp	r4, #0
1000eb64:	d001      	beq.n	1000eb6a <internal_event_flush+0x26>
1000eb66:	6021      	str	r1, [r4, #0]
1000eb68:	e000      	b.n	1000eb6c <internal_event_flush+0x28>
1000eb6a:	1c0e      	adds	r6, r1, #0
1000eb6c:	601d      	str	r5, [r3, #0]
1000eb6e:	1c1d      	adds	r5, r3, #0
1000eb70:	1c23      	adds	r3, r4, #0
1000eb72:	1c1c      	adds	r4, r3, #0
1000eb74:	1c0b      	adds	r3, r1, #0
1000eb76:	e7ee      	b.n	1000eb56 <internal_event_flush+0x12>
1000eb78:	9b01      	ldr	r3, [sp, #4]
1000eb7a:	603e      	str	r6, [r7, #0]
1000eb7c:	601d      	str	r5, [r3, #0]
1000eb7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000eb80:	10019db0 	.word	0x10019db0
1000eb84:	10019db4 	.word	0x10019db4

1000eb88 <internal_conn_flush>:
1000eb88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eb8a:	4a12      	ldr	r2, [pc, #72]	; (1000ebd4 <internal_conn_flush+0x4c>)
1000eb8c:	9000      	str	r0, [sp, #0]
1000eb8e:	6813      	ldr	r3, [r2, #0]
1000eb90:	4811      	ldr	r0, [pc, #68]	; (1000ebd8 <internal_conn_flush+0x50>)
1000eb92:	1c1f      	adds	r7, r3, #0
1000eb94:	2100      	movs	r1, #0
1000eb96:	4684      	mov	ip, r0
1000eb98:	6804      	ldr	r4, [r0, #0]
1000eb9a:	9201      	str	r2, [sp, #4]
1000eb9c:	2b00      	cmp	r3, #0
1000eb9e:	d014      	beq.n	1000ebca <internal_conn_flush+0x42>
1000eba0:	88d8      	ldrh	r0, [r3, #6]
1000eba2:	9a00      	ldr	r2, [sp, #0]
1000eba4:	681d      	ldr	r5, [r3, #0]
1000eba6:	0a06      	lsrs	r6, r0, #8
1000eba8:	4296      	cmp	r6, r2
1000ebaa:	d10b      	bne.n	1000ebc4 <internal_conn_flush+0x3c>
1000ebac:	26fd      	movs	r6, #253	; 0xfd
1000ebae:	4006      	ands	r6, r0
1000ebb0:	2e0c      	cmp	r6, #12
1000ebb2:	d107      	bne.n	1000ebc4 <internal_conn_flush+0x3c>
1000ebb4:	2900      	cmp	r1, #0
1000ebb6:	d001      	beq.n	1000ebbc <internal_conn_flush+0x34>
1000ebb8:	600d      	str	r5, [r1, #0]
1000ebba:	e000      	b.n	1000ebbe <internal_conn_flush+0x36>
1000ebbc:	1c2f      	adds	r7, r5, #0
1000ebbe:	601c      	str	r4, [r3, #0]
1000ebc0:	1c1c      	adds	r4, r3, #0
1000ebc2:	1c0b      	adds	r3, r1, #0
1000ebc4:	1c19      	adds	r1, r3, #0
1000ebc6:	1c2b      	adds	r3, r5, #0
1000ebc8:	e7e8      	b.n	1000eb9c <internal_conn_flush+0x14>
1000ebca:	9b01      	ldr	r3, [sp, #4]
1000ebcc:	601f      	str	r7, [r3, #0]
1000ebce:	4663      	mov	r3, ip
1000ebd0:	601c      	str	r4, [r3, #0]
1000ebd2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ebd4:	10019db0 	.word	0x10019db0
1000ebd8:	10019db4 	.word	0x10019db4

1000ebdc <at_ble_device_name_set>:
1000ebdc:	b530      	push	{r4, r5, lr}
1000ebde:	23cf      	movs	r3, #207	; 0xcf
1000ebe0:	2800      	cmp	r0, #0
1000ebe2:	d010      	beq.n	1000ec06 <at_ble_device_name_set+0x2a>
1000ebe4:	1e4a      	subs	r2, r1, #1
1000ebe6:	2a1f      	cmp	r2, #31
1000ebe8:	d80d      	bhi.n	1000ec06 <at_ble_device_name_set+0x2a>
1000ebea:	4a08      	ldr	r2, [pc, #32]	; (1000ec0c <at_ble_device_name_set+0x30>)
1000ebec:	1c13      	adds	r3, r2, #0
1000ebee:	33aa      	adds	r3, #170	; 0xaa
1000ebf0:	8019      	strh	r1, [r3, #0]
1000ebf2:	2300      	movs	r3, #0
1000ebf4:	1c1c      	adds	r4, r3, #0
1000ebf6:	5cc5      	ldrb	r5, [r0, r3]
1000ebf8:	34ac      	adds	r4, #172	; 0xac
1000ebfa:	3301      	adds	r3, #1
1000ebfc:	5515      	strb	r5, [r2, r4]
1000ebfe:	b2dc      	uxtb	r4, r3
1000ec00:	428c      	cmp	r4, r1
1000ec02:	d3f7      	bcc.n	1000ebf4 <at_ble_device_name_set+0x18>
1000ec04:	2300      	movs	r3, #0
1000ec06:	1c18      	adds	r0, r3, #0
1000ec08:	bd30      	pop	{r4, r5, pc}
1000ec0a:	46c0      	nop			; (mov r8, r8)
1000ec0c:	1001adb2 	.word	0x1001adb2

1000ec10 <at_ble_addr_get>:
1000ec10:	b510      	push	{r4, lr}
1000ec12:	1c04      	adds	r4, r0, #0
1000ec14:	20cf      	movs	r0, #207	; 0xcf
1000ec16:	2c00      	cmp	r4, #0
1000ec18:	d006      	beq.n	1000ec28 <at_ble_addr_get+0x18>
1000ec1a:	4b04      	ldr	r3, [pc, #16]	; (1000ec2c <at_ble_addr_get+0x1c>)
1000ec1c:	38ce      	subs	r0, #206	; 0xce
1000ec1e:	1c21      	adds	r1, r4, #0
1000ec20:	4798      	blx	r3
1000ec22:	4b03      	ldr	r3, [pc, #12]	; (1000ec30 <at_ble_addr_get+0x20>)
1000ec24:	791b      	ldrb	r3, [r3, #4]
1000ec26:	7023      	strb	r3, [r4, #0]
1000ec28:	bd10      	pop	{r4, pc}
1000ec2a:	46c0      	nop			; (mov r8, r8)
1000ec2c:	10010b31 	.word	0x10010b31
1000ec30:	1001adb2 	.word	0x1001adb2

1000ec34 <at_ble_set_dev_config>:
1000ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec36:	7906      	ldrb	r6, [r0, #4]
1000ec38:	b089      	sub	sp, #36	; 0x24
1000ec3a:	25cf      	movs	r5, #207	; 0xcf
1000ec3c:	2e03      	cmp	r6, #3
1000ec3e:	d838      	bhi.n	1000ecb2 <at_ble_set_dev_config+0x7e>
1000ec40:	7803      	ldrb	r3, [r0, #0]
1000ec42:	3511      	adds	r5, #17
1000ec44:	2b0f      	cmp	r3, #15
1000ec46:	d834      	bhi.n	1000ecb2 <at_ble_set_dev_config+0x7e>
1000ec48:	2380      	movs	r3, #128	; 0x80
1000ec4a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000ec4c:	3d11      	subs	r5, #17
1000ec4e:	009b      	lsls	r3, r3, #2
1000ec50:	429f      	cmp	r7, r3
1000ec52:	d82e      	bhi.n	1000ecb2 <at_ble_set_dev_config+0x7e>
1000ec54:	7fc5      	ldrb	r5, [r0, #31]
1000ec56:	7f83      	ldrb	r3, [r0, #30]
1000ec58:	01ad      	lsls	r5, r5, #6
1000ec5a:	015b      	lsls	r3, r3, #5
1000ec5c:	431d      	orrs	r5, r3
1000ec5e:	7ec3      	ldrb	r3, [r0, #27]
1000ec60:	431d      	orrs	r5, r3
1000ec62:	7f43      	ldrb	r3, [r0, #29]
1000ec64:	011b      	lsls	r3, r3, #4
1000ec66:	431d      	orrs	r5, r3
1000ec68:	7f03      	ldrb	r3, [r0, #28]
1000ec6a:	009b      	lsls	r3, r3, #2
1000ec6c:	431d      	orrs	r5, r3
1000ec6e:	4b12      	ldr	r3, [pc, #72]	; (1000ecb8 <at_ble_set_dev_config+0x84>)
1000ec70:	b2ed      	uxtb	r5, r5
1000ec72:	711e      	strb	r6, [r3, #4]
1000ec74:	7903      	ldrb	r3, [r0, #4]
1000ec76:	3b02      	subs	r3, #2
1000ec78:	2b01      	cmp	r3, #1
1000ec7a:	d801      	bhi.n	1000ec80 <at_ble_set_dev_config+0x4c>
1000ec7c:	2302      	movs	r3, #2
1000ec7e:	7103      	strb	r3, [r0, #4]
1000ec80:	1c04      	adds	r4, r0, #0
1000ec82:	1c23      	adds	r3, r4, #0
1000ec84:	330b      	adds	r3, #11
1000ec86:	8861      	ldrh	r1, [r4, #2]
1000ec88:	9307      	str	r3, [sp, #28]
1000ec8a:	7923      	ldrb	r3, [r4, #4]
1000ec8c:	7800      	ldrb	r0, [r0, #0]
1000ec8e:	9300      	str	r3, [sp, #0]
1000ec90:	9501      	str	r5, [sp, #4]
1000ec92:	8c25      	ldrh	r5, [r4, #32]
1000ec94:	1d62      	adds	r2, r4, #5
1000ec96:	9502      	str	r5, [sp, #8]
1000ec98:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ec9a:	9b07      	ldr	r3, [sp, #28]
1000ec9c:	9503      	str	r5, [sp, #12]
1000ec9e:	9704      	str	r7, [sp, #16]
1000eca0:	4d06      	ldr	r5, [pc, #24]	; (1000ecbc <at_ble_set_dev_config+0x88>)
1000eca2:	47a8      	blx	r5
1000eca4:	7126      	strb	r6, [r4, #4]
1000eca6:	1c05      	adds	r5, r0, #0
1000eca8:	1c21      	adds	r1, r4, #0
1000ecaa:	4803      	ldr	r0, [pc, #12]	; (1000ecb8 <at_ble_set_dev_config+0x84>)
1000ecac:	2226      	movs	r2, #38	; 0x26
1000ecae:	4b04      	ldr	r3, [pc, #16]	; (1000ecc0 <at_ble_set_dev_config+0x8c>)
1000ecb0:	4798      	blx	r3
1000ecb2:	1c28      	adds	r0, r5, #0
1000ecb4:	b009      	add	sp, #36	; 0x24
1000ecb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecb8:	1001adb2 	.word	0x1001adb2
1000ecbc:	10010a29 	.word	0x10010a29
1000ecc0:	100156bf 	.word	0x100156bf

1000ecc4 <at_ble_init>:
1000ecc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecc6:	b087      	sub	sp, #28
1000ecc8:	af03      	add	r7, sp, #12
1000ecca:	4954      	ldr	r1, [pc, #336]	; (1000ee1c <at_ble_init+0x158>)
1000eccc:	220b      	movs	r2, #11
1000ecce:	4b54      	ldr	r3, [pc, #336]	; (1000ee20 <at_ble_init+0x15c>)
1000ecd0:	1c04      	adds	r4, r0, #0
1000ecd2:	1c38      	adds	r0, r7, #0
1000ecd4:	4798      	blx	r3
1000ecd6:	2205      	movs	r2, #5
1000ecd8:	4b52      	ldr	r3, [pc, #328]	; (1000ee24 <at_ble_init+0x160>)
1000ecda:	2640      	movs	r6, #64	; 0x40
1000ecdc:	801a      	strh	r2, [r3, #0]
1000ecde:	2300      	movs	r3, #0
1000ece0:	4a51      	ldr	r2, [pc, #324]	; (1000ee28 <at_ble_init+0x164>)
1000ece2:	6013      	str	r3, [r2, #0]
1000ece4:	4a51      	ldr	r2, [pc, #324]	; (1000ee2c <at_ble_init+0x168>)
1000ece6:	7013      	strb	r3, [r2, #0]
1000ece8:	4a51      	ldr	r2, [pc, #324]	; (1000ee30 <at_ble_init+0x16c>)
1000ecea:	7013      	strb	r3, [r2, #0]
1000ecec:	4b51      	ldr	r3, [pc, #324]	; (1000ee34 <at_ble_init+0x170>)
1000ecee:	4798      	blx	r3
1000ecf0:	4b51      	ldr	r3, [pc, #324]	; (1000ee38 <at_ble_init+0x174>)
1000ecf2:	4798      	blx	r3
1000ecf4:	4b51      	ldr	r3, [pc, #324]	; (1000ee3c <at_ble_init+0x178>)
1000ecf6:	4798      	blx	r3
1000ecf8:	4b51      	ldr	r3, [pc, #324]	; (1000ee40 <at_ble_init+0x17c>)
1000ecfa:	4798      	blx	r3
1000ecfc:	2c00      	cmp	r4, #0
1000ecfe:	d100      	bne.n	1000ed02 <at_ble_init+0x3e>
1000ed00:	e089      	b.n	1000ee16 <at_ble_init+0x152>
1000ed02:	68a3      	ldr	r3, [r4, #8]
1000ed04:	2b00      	cmp	r3, #0
1000ed06:	d100      	bne.n	1000ed0a <at_ble_init+0x46>
1000ed08:	e085      	b.n	1000ee16 <at_ble_init+0x152>
1000ed0a:	6923      	ldr	r3, [r4, #16]
1000ed0c:	2b00      	cmp	r3, #0
1000ed0e:	d100      	bne.n	1000ed12 <at_ble_init+0x4e>
1000ed10:	e081      	b.n	1000ee16 <at_ble_init+0x152>
1000ed12:	6820      	ldr	r0, [r4, #0]
1000ed14:	2800      	cmp	r0, #0
1000ed16:	d102      	bne.n	1000ed1e <at_ble_init+0x5a>
1000ed18:	6863      	ldr	r3, [r4, #4]
1000ed1a:	2b00      	cmp	r3, #0
1000ed1c:	d17b      	bne.n	1000ee16 <at_ble_init+0x152>
1000ed1e:	4b49      	ldr	r3, [pc, #292]	; (1000ee44 <at_ble_init+0x180>)
1000ed20:	6861      	ldr	r1, [r4, #4]
1000ed22:	4798      	blx	r3
1000ed24:	4b48      	ldr	r3, [pc, #288]	; (1000ee48 <at_ble_init+0x184>)
1000ed26:	4798      	blx	r3
1000ed28:	2801      	cmp	r0, #1
1000ed2a:	d901      	bls.n	1000ed30 <at_ble_init+0x6c>
1000ed2c:	26e2      	movs	r6, #226	; 0xe2
1000ed2e:	e072      	b.n	1000ee16 <at_ble_init+0x152>
1000ed30:	4846      	ldr	r0, [pc, #280]	; (1000ee4c <at_ble_init+0x188>)
1000ed32:	4b47      	ldr	r3, [pc, #284]	; (1000ee50 <at_ble_init+0x18c>)
1000ed34:	4798      	blx	r3
1000ed36:	2800      	cmp	r0, #0
1000ed38:	d1f8      	bne.n	1000ed2c <at_ble_init+0x68>
1000ed3a:	1c20      	adds	r0, r4, #0
1000ed3c:	4b45      	ldr	r3, [pc, #276]	; (1000ee54 <at_ble_init+0x190>)
1000ed3e:	4798      	blx	r3
1000ed40:	68e0      	ldr	r0, [r4, #12]
1000ed42:	68a1      	ldr	r1, [r4, #8]
1000ed44:	4b44      	ldr	r3, [pc, #272]	; (1000ee58 <at_ble_init+0x194>)
1000ed46:	4798      	blx	r3
1000ed48:	466b      	mov	r3, sp
1000ed4a:	2201      	movs	r2, #1
1000ed4c:	1cdc      	adds	r4, r3, #3
1000ed4e:	1c20      	adds	r0, r4, #0
1000ed50:	a901      	add	r1, sp, #4
1000ed52:	4252      	negs	r2, r2
1000ed54:	4b41      	ldr	r3, [pc, #260]	; (1000ee5c <at_ble_init+0x198>)
1000ed56:	4798      	blx	r3
1000ed58:	2800      	cmp	r0, #0
1000ed5a:	d102      	bne.n	1000ed62 <at_ble_init+0x9e>
1000ed5c:	7823      	ldrb	r3, [r4, #0]
1000ed5e:	2b39      	cmp	r3, #57	; 0x39
1000ed60:	d1f2      	bne.n	1000ed48 <at_ble_init+0x84>
1000ed62:	4b3f      	ldr	r3, [pc, #252]	; (1000ee60 <at_ble_init+0x19c>)
1000ed64:	4798      	blx	r3
1000ed66:	1e06      	subs	r6, r0, #0
1000ed68:	d155      	bne.n	1000ee16 <at_ble_init+0x152>
1000ed6a:	1c03      	adds	r3, r0, #0
1000ed6c:	2101      	movs	r1, #1
1000ed6e:	4a3d      	ldr	r2, [pc, #244]	; (1000ee64 <at_ble_init+0x1a0>)
1000ed70:	4249      	negs	r1, r1
1000ed72:	189a      	adds	r2, r3, r2
1000ed74:	3312      	adds	r3, #18
1000ed76:	8151      	strh	r1, [r2, #10]
1000ed78:	2b90      	cmp	r3, #144	; 0x90
1000ed7a:	d1f7      	bne.n	1000ed6c <at_ble_init+0xa8>
1000ed7c:	4c3a      	ldr	r4, [pc, #232]	; (1000ee68 <at_ble_init+0x1a4>)
1000ed7e:	3b81      	subs	r3, #129	; 0x81
1000ed80:	7023      	strb	r3, [r4, #0]
1000ed82:	4b3a      	ldr	r3, [pc, #232]	; (1000ee6c <at_ble_init+0x1a8>)
1000ed84:	4a3a      	ldr	r2, [pc, #232]	; (1000ee70 <at_ble_init+0x1ac>)
1000ed86:	8063      	strh	r3, [r4, #2]
1000ed88:	2300      	movs	r3, #0
1000ed8a:	7123      	strb	r3, [r4, #4]
1000ed8c:	3301      	adds	r3, #1
1000ed8e:	1e58      	subs	r0, r3, #1
1000ed90:	0119      	lsls	r1, r3, #4
1000ed92:	4301      	orrs	r1, r0
1000ed94:	3302      	adds	r3, #2
1000ed96:	7011      	strb	r1, [r2, #0]
1000ed98:	3201      	adds	r2, #1
1000ed9a:	2b21      	cmp	r3, #33	; 0x21
1000ed9c:	d1f7      	bne.n	1000ed8e <at_ble_init+0xca>
1000ed9e:	33e0      	adds	r3, #224	; 0xe0
1000eda0:	33ff      	adds	r3, #255	; 0xff
1000eda2:	84a3      	strh	r3, [r4, #36]	; 0x24
1000eda4:	1c23      	adds	r3, r4, #0
1000eda6:	2500      	movs	r5, #0
1000eda8:	3373      	adds	r3, #115	; 0x73
1000edaa:	701d      	strb	r5, [r3, #0]
1000edac:	1c23      	adds	r3, r4, #0
1000edae:	3372      	adds	r3, #114	; 0x72
1000edb0:	701d      	strb	r5, [r3, #0]
1000edb2:	1c23      	adds	r3, r4, #0
1000edb4:	3376      	adds	r3, #118	; 0x76
1000edb6:	701d      	strb	r5, [r3, #0]
1000edb8:	1c23      	adds	r3, r4, #0
1000edba:	33cc      	adds	r3, #204	; 0xcc
1000edbc:	801d      	strh	r5, [r3, #0]
1000edbe:	1c22      	adds	r2, r4, #0
1000edc0:	23a0      	movs	r3, #160	; 0xa0
1000edc2:	32d0      	adds	r2, #208	; 0xd0
1000edc4:	005b      	lsls	r3, r3, #1
1000edc6:	8013      	strh	r3, [r2, #0]
1000edc8:	1c22      	adds	r2, r4, #0
1000edca:	32ce      	adds	r2, #206	; 0xce
1000edcc:	8013      	strh	r3, [r2, #0]
1000edce:	1c23      	adds	r3, r4, #0
1000edd0:	33d2      	adds	r3, #210	; 0xd2
1000edd2:	801d      	strh	r5, [r3, #0]
1000edd4:	22fa      	movs	r2, #250	; 0xfa
1000edd6:	1c23      	adds	r3, r4, #0
1000edd8:	0052      	lsls	r2, r2, #1
1000edda:	33d4      	adds	r3, #212	; 0xd4
1000eddc:	801a      	strh	r2, [r3, #0]
1000edde:	1c23      	adds	r3, r4, #0
1000ede0:	33d6      	adds	r3, #214	; 0xd6
1000ede2:	701d      	strb	r5, [r3, #0]
1000ede4:	1c20      	adds	r0, r4, #0
1000ede6:	4b23      	ldr	r3, [pc, #140]	; (1000ee74 <at_ble_init+0x1b0>)
1000ede8:	76e5      	strb	r5, [r4, #27]
1000edea:	7725      	strb	r5, [r4, #28]
1000edec:	7765      	strb	r5, [r4, #29]
1000edee:	77a5      	strb	r5, [r4, #30]
1000edf0:	77e5      	strb	r5, [r4, #31]
1000edf2:	8425      	strh	r5, [r4, #32]
1000edf4:	8465      	strh	r5, [r4, #34]	; 0x22
1000edf6:	4798      	blx	r3
1000edf8:	1c23      	adds	r3, r4, #0
1000edfa:	2207      	movs	r2, #7
1000edfc:	3374      	adds	r3, #116	; 0x74
1000edfe:	701a      	strb	r2, [r3, #0]
1000ee00:	1c23      	adds	r3, r4, #0
1000ee02:	3204      	adds	r2, #4
1000ee04:	33aa      	adds	r3, #170	; 0xaa
1000ee06:	801a      	strh	r2, [r3, #0]
1000ee08:	1c2b      	adds	r3, r5, #0
1000ee0a:	5d7a      	ldrb	r2, [r7, r5]
1000ee0c:	33ac      	adds	r3, #172	; 0xac
1000ee0e:	3501      	adds	r5, #1
1000ee10:	54e2      	strb	r2, [r4, r3]
1000ee12:	2d0b      	cmp	r5, #11
1000ee14:	d1f8      	bne.n	1000ee08 <at_ble_init+0x144>
1000ee16:	1c30      	adds	r0, r6, #0
1000ee18:	b007      	add	sp, #28
1000ee1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee1c:	100180f7 	.word	0x100180f7
1000ee20:	100156bf 	.word	0x100156bf
1000ee24:	1001ad20 	.word	0x1001ad20
1000ee28:	10019e60 	.word	0x10019e60
1000ee2c:	10019dc0 	.word	0x10019dc0
1000ee30:	10018334 	.word	0x10018334
1000ee34:	10011479 	.word	0x10011479
1000ee38:	1000f135 	.word	0x1000f135
1000ee3c:	1000f795 	.word	0x1000f795
1000ee40:	1000fa49 	.word	0x1000fa49
1000ee44:	1000f7d1 	.word	0x1000f7d1
1000ee48:	1000d889 	.word	0x1000d889
1000ee4c:	1000fd49 	.word	0x1000fd49
1000ee50:	1000dacd 	.word	0x1000dacd
1000ee54:	1000fdf1 	.word	0x1000fdf1
1000ee58:	1000e3b1 	.word	0x1000e3b1
1000ee5c:	1000e46d 	.word	0x1000e46d
1000ee60:	100109b9 	.word	0x100109b9
1000ee64:	1001ad22 	.word	0x1001ad22
1000ee68:	1001adb2 	.word	0x1001adb2
1000ee6c:	00003a98 	.word	0x00003a98
1000ee70:	1001adbd 	.word	0x1001adbd
1000ee74:	1000ec35 	.word	0x1000ec35

1000ee78 <at_ble_addr_set>:
1000ee78:	b538      	push	{r3, r4, r5, lr}
1000ee7a:	1c45      	adds	r5, r0, #1
1000ee7c:	1c03      	adds	r3, r0, #0
1000ee7e:	20cf      	movs	r0, #207	; 0xcf
1000ee80:	2d00      	cmp	r5, #0
1000ee82:	d018      	beq.n	1000eeb6 <at_ble_addr_set+0x3e>
1000ee84:	781a      	ldrb	r2, [r3, #0]
1000ee86:	2a03      	cmp	r2, #3
1000ee88:	d815      	bhi.n	1000eeb6 <at_ble_addr_set+0x3e>
1000ee8a:	2a01      	cmp	r2, #1
1000ee8c:	d102      	bne.n	1000ee94 <at_ble_addr_set+0x1c>
1000ee8e:	785a      	ldrb	r2, [r3, #1]
1000ee90:	2a00      	cmp	r2, #0
1000ee92:	d010      	beq.n	1000eeb6 <at_ble_addr_set+0x3e>
1000ee94:	1c1c      	adds	r4, r3, #0
1000ee96:	1c29      	adds	r1, r5, #0
1000ee98:	2206      	movs	r2, #6
1000ee9a:	4b07      	ldr	r3, [pc, #28]	; (1000eeb8 <at_ble_addr_set+0x40>)
1000ee9c:	4807      	ldr	r0, [pc, #28]	; (1000eebc <at_ble_addr_set+0x44>)
1000ee9e:	4798      	blx	r3
1000eea0:	7823      	ldrb	r3, [r4, #0]
1000eea2:	4807      	ldr	r0, [pc, #28]	; (1000eec0 <at_ble_addr_set+0x48>)
1000eea4:	7103      	strb	r3, [r0, #4]
1000eea6:	4b07      	ldr	r3, [pc, #28]	; (1000eec4 <at_ble_addr_set+0x4c>)
1000eea8:	4798      	blx	r3
1000eeaa:	7823      	ldrb	r3, [r4, #0]
1000eeac:	2b00      	cmp	r3, #0
1000eeae:	d102      	bne.n	1000eeb6 <at_ble_addr_set+0x3e>
1000eeb0:	1c28      	adds	r0, r5, #0
1000eeb2:	4b05      	ldr	r3, [pc, #20]	; (1000eec8 <at_ble_addr_set+0x50>)
1000eeb4:	4798      	blx	r3
1000eeb6:	bd38      	pop	{r3, r4, r5, pc}
1000eeb8:	100156bf 	.word	0x100156bf
1000eebc:	1001adb7 	.word	0x1001adb7
1000eec0:	1001adb2 	.word	0x1001adb2
1000eec4:	1000ec35 	.word	0x1000ec35
1000eec8:	1000fe75 	.word	0x1000fe75

1000eecc <at_ble_adv_data_set>:
1000eecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eece:	4684      	mov	ip, r0
1000eed0:	1c0f      	adds	r7, r1, #0
1000eed2:	1c16      	adds	r6, r2, #0
1000eed4:	1c1c      	adds	r4, r3, #0
1000eed6:	2800      	cmp	r0, #0
1000eed8:	d102      	bne.n	1000eee0 <at_ble_adv_data_set+0x14>
1000eeda:	20e2      	movs	r0, #226	; 0xe2
1000eedc:	2a00      	cmp	r2, #0
1000eede:	d02b      	beq.n	1000ef38 <at_ble_adv_data_set+0x6c>
1000eee0:	20cf      	movs	r0, #207	; 0xcf
1000eee2:	2f1f      	cmp	r7, #31
1000eee4:	d828      	bhi.n	1000ef38 <at_ble_adv_data_set+0x6c>
1000eee6:	2c1f      	cmp	r4, #31
1000eee8:	d826      	bhi.n	1000ef38 <at_ble_adv_data_set+0x6c>
1000eeea:	4663      	mov	r3, ip
1000eeec:	2b00      	cmp	r3, #0
1000eeee:	d00e      	beq.n	1000ef0e <at_ble_adv_data_set+0x42>
1000eef0:	4812      	ldr	r0, [pc, #72]	; (1000ef3c <at_ble_adv_data_set+0x70>)
1000eef2:	4d13      	ldr	r5, [pc, #76]	; (1000ef40 <at_ble_adv_data_set+0x74>)
1000eef4:	2f00      	cmp	r7, #0
1000eef6:	d104      	bne.n	1000ef02 <at_ble_adv_data_set+0x36>
1000eef8:	1c39      	adds	r1, r7, #0
1000eefa:	221f      	movs	r2, #31
1000eefc:	4b11      	ldr	r3, [pc, #68]	; (1000ef44 <at_ble_adv_data_set+0x78>)
1000eefe:	4798      	blx	r3
1000ef00:	e003      	b.n	1000ef0a <at_ble_adv_data_set+0x3e>
1000ef02:	4661      	mov	r1, ip
1000ef04:	1c3a      	adds	r2, r7, #0
1000ef06:	4b10      	ldr	r3, [pc, #64]	; (1000ef48 <at_ble_adv_data_set+0x7c>)
1000ef08:	4798      	blx	r3
1000ef0a:	3572      	adds	r5, #114	; 0x72
1000ef0c:	702f      	strb	r7, [r5, #0]
1000ef0e:	1e30      	subs	r0, r6, #0
1000ef10:	d012      	beq.n	1000ef38 <at_ble_adv_data_set+0x6c>
1000ef12:	4d0b      	ldr	r5, [pc, #44]	; (1000ef40 <at_ble_adv_data_set+0x74>)
1000ef14:	480d      	ldr	r0, [pc, #52]	; (1000ef4c <at_ble_adv_data_set+0x80>)
1000ef16:	2c00      	cmp	r4, #0
1000ef18:	d107      	bne.n	1000ef2a <at_ble_adv_data_set+0x5e>
1000ef1a:	1c21      	adds	r1, r4, #0
1000ef1c:	221f      	movs	r2, #31
1000ef1e:	4b09      	ldr	r3, [pc, #36]	; (1000ef44 <at_ble_adv_data_set+0x78>)
1000ef20:	3573      	adds	r5, #115	; 0x73
1000ef22:	4798      	blx	r3
1000ef24:	702c      	strb	r4, [r5, #0]
1000ef26:	1c20      	adds	r0, r4, #0
1000ef28:	e006      	b.n	1000ef38 <at_ble_adv_data_set+0x6c>
1000ef2a:	1c31      	adds	r1, r6, #0
1000ef2c:	1c22      	adds	r2, r4, #0
1000ef2e:	4b06      	ldr	r3, [pc, #24]	; (1000ef48 <at_ble_adv_data_set+0x7c>)
1000ef30:	4798      	blx	r3
1000ef32:	2000      	movs	r0, #0
1000ef34:	3573      	adds	r5, #115	; 0x73
1000ef36:	702c      	strb	r4, [r5, #0]
1000ef38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef3a:	46c0      	nop			; (mov r8, r8)
1000ef3c:	1001ade6 	.word	0x1001ade6
1000ef40:	1001adb2 	.word	0x1001adb2
1000ef44:	100156d1 	.word	0x100156d1
1000ef48:	100156bf 	.word	0x100156bf
1000ef4c:	1001ae05 	.word	0x1001ae05

1000ef50 <at_ble_adv_start>:
1000ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef52:	b091      	sub	sp, #68	; 0x44
1000ef54:	1c1f      	adds	r7, r3, #0
1000ef56:	ab16      	add	r3, sp, #88	; 0x58
1000ef58:	881d      	ldrh	r5, [r3, #0]
1000ef5a:	ab17      	add	r3, sp, #92	; 0x5c
1000ef5c:	881b      	ldrh	r3, [r3, #0]
1000ef5e:	910d      	str	r1, [sp, #52]	; 0x34
1000ef60:	930e      	str	r3, [sp, #56]	; 0x38
1000ef62:	ab18      	add	r3, sp, #96	; 0x60
1000ef64:	781b      	ldrb	r3, [r3, #0]
1000ef66:	1c04      	adds	r4, r0, #0
1000ef68:	930f      	str	r3, [sp, #60]	; 0x3c
1000ef6a:	4b42      	ldr	r3, [pc, #264]	; (1000f074 <at_ble_adv_start+0x124>)
1000ef6c:	1c16      	adds	r6, r2, #0
1000ef6e:	3373      	adds	r3, #115	; 0x73
1000ef70:	781b      	ldrb	r3, [r3, #0]
1000ef72:	20cf      	movs	r0, #207	; 0xcf
1000ef74:	930c      	str	r3, [sp, #48]	; 0x30
1000ef76:	2c01      	cmp	r4, #1
1000ef78:	d103      	bne.n	1000ef82 <at_ble_adv_start+0x32>
1000ef7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000ef7c:	2b00      	cmp	r3, #0
1000ef7e:	d176      	bne.n	1000f06e <at_ble_adv_start+0x11e>
1000ef80:	e024      	b.n	1000efcc <at_ble_adv_start+0x7c>
1000ef82:	2c04      	cmp	r4, #4
1000ef84:	d873      	bhi.n	1000f06e <at_ble_adv_start+0x11e>
1000ef86:	2380      	movs	r3, #128	; 0x80
1000ef88:	01db      	lsls	r3, r3, #7
1000ef8a:	429d      	cmp	r5, r3
1000ef8c:	d86f      	bhi.n	1000f06e <at_ble_adv_start+0x11e>
1000ef8e:	2c00      	cmp	r4, #0
1000ef90:	d102      	bne.n	1000ef98 <at_ble_adv_start+0x48>
1000ef92:	2d1f      	cmp	r5, #31
1000ef94:	d96b      	bls.n	1000f06e <at_ble_adv_start+0x11e>
1000ef96:	e003      	b.n	1000efa0 <at_ble_adv_start+0x50>
1000ef98:	2d9f      	cmp	r5, #159	; 0x9f
1000ef9a:	d801      	bhi.n	1000efa0 <at_ble_adv_start+0x50>
1000ef9c:	2c01      	cmp	r4, #1
1000ef9e:	d166      	bne.n	1000f06e <at_ble_adv_start+0x11e>
1000efa0:	2f00      	cmp	r7, #0
1000efa2:	d009      	beq.n	1000efb8 <at_ble_adv_start+0x68>
1000efa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000efa6:	20cf      	movs	r0, #207	; 0xcf
1000efa8:	3b01      	subs	r3, #1
1000efaa:	2b01      	cmp	r3, #1
1000efac:	d95f      	bls.n	1000f06e <at_ble_adv_start+0x11e>
1000efae:	2c01      	cmp	r4, #1
1000efb0:	d102      	bne.n	1000efb8 <at_ble_adv_start+0x68>
1000efb2:	2d00      	cmp	r5, #0
1000efb4:	d100      	bne.n	1000efb8 <at_ble_adv_start+0x68>
1000efb6:	3520      	adds	r5, #32
1000efb8:	4b2f      	ldr	r3, [pc, #188]	; (1000f078 <at_ble_adv_start+0x128>)
1000efba:	4798      	blx	r3
1000efbc:	1c01      	adds	r1, r0, #0
1000efbe:	2e00      	cmp	r6, #0
1000efc0:	d043      	beq.n	1000f04a <at_ble_adv_start+0xfa>
1000efc2:	7833      	ldrb	r3, [r6, #0]
1000efc4:	1e60      	subs	r0, r4, #1
1000efc6:	2b00      	cmp	r3, #0
1000efc8:	d109      	bne.n	1000efde <at_ble_adv_start+0x8e>
1000efca:	e03b      	b.n	1000f044 <at_ble_adv_start+0xf4>
1000efcc:	2380      	movs	r3, #128	; 0x80
1000efce:	01db      	lsls	r3, r3, #7
1000efd0:	429d      	cmp	r5, r3
1000efd2:	d84c      	bhi.n	1000f06e <at_ble_adv_start+0x11e>
1000efd4:	2e00      	cmp	r6, #0
1000efd6:	d04a      	beq.n	1000f06e <at_ble_adv_start+0x11e>
1000efd8:	2f00      	cmp	r7, #0
1000efda:	d1e3      	bne.n	1000efa4 <at_ble_adv_start+0x54>
1000efdc:	e02b      	b.n	1000f036 <at_ble_adv_start+0xe6>
1000efde:	2301      	movs	r3, #1
1000efe0:	2803      	cmp	r0, #3
1000efe2:	d93a      	bls.n	1000f05a <at_ble_adv_start+0x10a>
1000efe4:	200d      	movs	r0, #13
1000efe6:	1c72      	adds	r2, r6, #1
1000efe8:	e002      	b.n	1000eff0 <at_ble_adv_start+0xa0>
1000efea:	200e      	movs	r0, #14
1000efec:	1e32      	subs	r2, r6, #0
1000efee:	d1fa      	bne.n	1000efe6 <at_ble_adv_start+0x96>
1000eff0:	4c20      	ldr	r4, [pc, #128]	; (1000f074 <at_ble_adv_start+0x124>)
1000eff2:	3474      	adds	r4, #116	; 0x74
1000eff4:	7826      	ldrb	r6, [r4, #0]
1000eff6:	2407      	movs	r4, #7
1000eff8:	2e00      	cmp	r6, #0
1000effa:	d000      	beq.n	1000effe <at_ble_adv_start+0xae>
1000effc:	1c34      	adds	r4, r6, #0
1000effe:	9200      	str	r2, [sp, #0]
1000f000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f002:	9403      	str	r4, [sp, #12]
1000f004:	9204      	str	r2, [sp, #16]
1000f006:	4a1b      	ldr	r2, [pc, #108]	; (1000f074 <at_ble_adv_start+0x124>)
1000f008:	9501      	str	r5, [sp, #4]
1000f00a:	9502      	str	r5, [sp, #8]
1000f00c:	9705      	str	r7, [sp, #20]
1000f00e:	3272      	adds	r2, #114	; 0x72
1000f010:	7812      	ldrb	r2, [r2, #0]
1000f012:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f014:	9206      	str	r2, [sp, #24]
1000f016:	4a19      	ldr	r2, [pc, #100]	; (1000f07c <at_ble_adv_start+0x12c>)
1000f018:	9207      	str	r2, [sp, #28]
1000f01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f01c:	9208      	str	r2, [sp, #32]
1000f01e:	4a18      	ldr	r2, [pc, #96]	; (1000f080 <at_ble_adv_start+0x130>)
1000f020:	9209      	str	r2, [sp, #36]	; 0x24
1000f022:	2264      	movs	r2, #100	; 0x64
1000f024:	4362      	muls	r2, r4
1000f026:	b292      	uxth	r2, r2
1000f028:	920a      	str	r2, [sp, #40]	; 0x28
1000f02a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f02c:	4c15      	ldr	r4, [pc, #84]	; (1000f084 <at_ble_adv_start+0x134>)
1000f02e:	920b      	str	r2, [sp, #44]	; 0x2c
1000f030:	4a15      	ldr	r2, [pc, #84]	; (1000f088 <at_ble_adv_start+0x138>)
1000f032:	47a0      	blx	r4
1000f034:	e01b      	b.n	1000f06e <at_ble_adv_start+0x11e>
1000f036:	2d00      	cmp	r5, #0
1000f038:	d1be      	bne.n	1000efb8 <at_ble_adv_start+0x68>
1000f03a:	4b0f      	ldr	r3, [pc, #60]	; (1000f078 <at_ble_adv_start+0x128>)
1000f03c:	4798      	blx	r3
1000f03e:	2520      	movs	r5, #32
1000f040:	1c01      	adds	r1, r0, #0
1000f042:	e7be      	b.n	1000efc2 <at_ble_adv_start+0x72>
1000f044:	2803      	cmp	r0, #3
1000f046:	d8cd      	bhi.n	1000efe4 <at_ble_adv_start+0x94>
1000f048:	e006      	b.n	1000f058 <at_ble_adv_start+0x108>
1000f04a:	1e60      	subs	r0, r4, #1
1000f04c:	2803      	cmp	r0, #3
1000f04e:	d903      	bls.n	1000f058 <at_ble_adv_start+0x108>
1000f050:	1c33      	adds	r3, r6, #0
1000f052:	200d      	movs	r0, #13
1000f054:	1c32      	adds	r2, r6, #0
1000f056:	e7cb      	b.n	1000eff0 <at_ble_adv_start+0xa0>
1000f058:	2300      	movs	r3, #0
1000f05a:	f003 fc8f 	bl	1001297c <__gnu_thumb1_case_sqi>
1000f05e:	06c6      	.short	0x06c6
1000f060:	0204      	.short	0x0204
1000f062:	200f      	movs	r0, #15
1000f064:	e7c2      	b.n	1000efec <at_ble_adv_start+0x9c>
1000f066:	2200      	movs	r2, #0
1000f068:	920c      	str	r2, [sp, #48]	; 0x30
1000f06a:	200c      	movs	r0, #12
1000f06c:	e7be      	b.n	1000efec <at_ble_adv_start+0x9c>
1000f06e:	b011      	add	sp, #68	; 0x44
1000f070:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f072:	46c0      	nop			; (mov r8, r8)
1000f074:	1001adb2 	.word	0x1001adb2
1000f078:	10010f05 	.word	0x10010f05
1000f07c:	1001ade6 	.word	0x1001ade6
1000f080:	1001ae05 	.word	0x1001ae05
1000f084:	10010de5 	.word	0x10010de5
1000f088:	00003a98 	.word	0x00003a98

1000f08c <at_ble_adv_stop>:
1000f08c:	b508      	push	{r3, lr}
1000f08e:	4b01      	ldr	r3, [pc, #4]	; (1000f094 <at_ble_adv_stop+0x8>)
1000f090:	4798      	blx	r3
1000f092:	bd08      	pop	{r3, pc}
1000f094:	10010c11 	.word	0x10010c11

1000f098 <at_ble_scan_stop>:
1000f098:	b510      	push	{r4, lr}
1000f09a:	4b05      	ldr	r3, [pc, #20]	; (1000f0b0 <at_ble_scan_stop+0x18>)
1000f09c:	4798      	blx	r3
1000f09e:	1e04      	subs	r4, r0, #0
1000f0a0:	d103      	bne.n	1000f0aa <at_ble_scan_stop+0x12>
1000f0a2:	20d1      	movs	r0, #209	; 0xd1
1000f0a4:	4b03      	ldr	r3, [pc, #12]	; (1000f0b4 <at_ble_scan_stop+0x1c>)
1000f0a6:	0100      	lsls	r0, r0, #4
1000f0a8:	4798      	blx	r3
1000f0aa:	1c20      	adds	r0, r4, #0
1000f0ac:	bd10      	pop	{r4, pc}
1000f0ae:	46c0      	nop			; (mov r8, r8)
1000f0b0:	10010c11 	.word	0x10010c11
1000f0b4:	1000eb45 	.word	0x1000eb45

1000f0b8 <at_ble_disconnect>:
1000f0b8:	b538      	push	{r3, r4, r5, lr}
1000f0ba:	1c04      	adds	r4, r0, #0
1000f0bc:	4b04      	ldr	r3, [pc, #16]	; (1000f0d0 <at_ble_disconnect+0x18>)
1000f0be:	1c08      	adds	r0, r1, #0
1000f0c0:	1c21      	adds	r1, r4, #0
1000f0c2:	4798      	blx	r3
1000f0c4:	1c05      	adds	r5, r0, #0
1000f0c6:	4b03      	ldr	r3, [pc, #12]	; (1000f0d4 <at_ble_disconnect+0x1c>)
1000f0c8:	1c20      	adds	r0, r4, #0
1000f0ca:	4798      	blx	r3
1000f0cc:	1c28      	adds	r0, r5, #0
1000f0ce:	bd38      	pop	{r3, r4, r5, pc}
1000f0d0:	10010289 	.word	0x10010289
1000f0d4:	1000eb89 	.word	0x1000eb89

1000f0d8 <at_ble_conn_update_reply>:
1000f0d8:	b510      	push	{r4, lr}
1000f0da:	4c01      	ldr	r4, [pc, #4]	; (1000f0e0 <at_ble_conn_update_reply+0x8>)
1000f0dc:	47a0      	blx	r4
1000f0de:	bd10      	pop	{r4, pc}
1000f0e0:	10010779 	.word	0x10010779

1000f0e4 <at_ble_random_address_resolve>:
1000f0e4:	b510      	push	{r4, lr}
1000f0e6:	23cf      	movs	r3, #207	; 0xcf
1000f0e8:	2800      	cmp	r0, #0
1000f0ea:	d00a      	beq.n	1000f102 <at_ble_random_address_resolve+0x1e>
1000f0ec:	2900      	cmp	r1, #0
1000f0ee:	d008      	beq.n	1000f102 <at_ble_random_address_resolve+0x1e>
1000f0f0:	2a00      	cmp	r2, #0
1000f0f2:	d006      	beq.n	1000f102 <at_ble_random_address_resolve+0x1e>
1000f0f4:	780c      	ldrb	r4, [r1, #0]
1000f0f6:	2c02      	cmp	r4, #2
1000f0f8:	d103      	bne.n	1000f102 <at_ble_random_address_resolve+0x1e>
1000f0fa:	4b03      	ldr	r3, [pc, #12]	; (1000f108 <at_ble_random_address_resolve+0x24>)
1000f0fc:	3101      	adds	r1, #1
1000f0fe:	4798      	blx	r3
1000f100:	2300      	movs	r3, #0
1000f102:	1c18      	adds	r0, r3, #0
1000f104:	bd10      	pop	{r4, pc}
1000f106:	46c0      	nop			; (mov r8, r8)
1000f108:	10010fa5 	.word	0x10010fa5

1000f10c <at_ble_uuid_type2len>:
1000f10c:	23cf      	movs	r3, #207	; 0xcf
1000f10e:	2802      	cmp	r0, #2
1000f110:	d801      	bhi.n	1000f116 <at_ble_uuid_type2len+0xa>
1000f112:	4b02      	ldr	r3, [pc, #8]	; (1000f11c <at_ble_uuid_type2len+0x10>)
1000f114:	5c1b      	ldrb	r3, [r3, r0]
1000f116:	1c18      	adds	r0, r3, #0
1000f118:	4770      	bx	lr
1000f11a:	46c0      	nop			; (mov r8, r8)
1000f11c:	10018102 	.word	0x10018102

1000f120 <at_ble_uuid_len2type>:
1000f120:	1e83      	subs	r3, r0, #2
1000f122:	b2db      	uxtb	r3, r3
1000f124:	2003      	movs	r0, #3
1000f126:	2b0e      	cmp	r3, #14
1000f128:	d801      	bhi.n	1000f12e <at_ble_uuid_len2type+0xe>
1000f12a:	4a01      	ldr	r2, [pc, #4]	; (1000f130 <at_ble_uuid_len2type+0x10>)
1000f12c:	5cd0      	ldrb	r0, [r2, r3]
1000f12e:	4770      	bx	lr
1000f130:	10018105 	.word	0x10018105

1000f134 <init_gatt_client_module>:
1000f134:	2200      	movs	r2, #0
1000f136:	4b01      	ldr	r3, [pc, #4]	; (1000f13c <init_gatt_client_module+0x8>)
1000f138:	801a      	strh	r2, [r3, #0]
1000f13a:	4770      	bx	lr
1000f13c:	10019db8 	.word	0x10019db8

1000f140 <db_searchATT>:
1000f140:	b570      	push	{r4, r5, r6, lr}
1000f142:	1c05      	adds	r5, r0, #0
1000f144:	2400      	movs	r4, #0
1000f146:	4b0c      	ldr	r3, [pc, #48]	; (1000f178 <db_searchATT+0x38>)
1000f148:	6819      	ldr	r1, [r3, #0]
1000f14a:	4b0c      	ldr	r3, [pc, #48]	; (1000f17c <db_searchATT+0x3c>)
1000f14c:	681e      	ldr	r6, [r3, #0]
1000f14e:	428c      	cmp	r4, r1
1000f150:	dc10      	bgt.n	1000f174 <db_searchATT+0x34>
1000f152:	200c      	movs	r0, #12
1000f154:	1863      	adds	r3, r4, r1
1000f156:	0fda      	lsrs	r2, r3, #31
1000f158:	18d3      	adds	r3, r2, r3
1000f15a:	1c02      	adds	r2, r0, #0
1000f15c:	105b      	asrs	r3, r3, #1
1000f15e:	435a      	muls	r2, r3
1000f160:	18b0      	adds	r0, r6, r2
1000f162:	8802      	ldrh	r2, [r0, #0]
1000f164:	42aa      	cmp	r2, r5
1000f166:	d201      	bcs.n	1000f16c <db_searchATT+0x2c>
1000f168:	1e59      	subs	r1, r3, #1
1000f16a:	e7f0      	b.n	1000f14e <db_searchATT+0xe>
1000f16c:	42aa      	cmp	r2, r5
1000f16e:	d902      	bls.n	1000f176 <db_searchATT+0x36>
1000f170:	1c5c      	adds	r4, r3, #1
1000f172:	e7ec      	b.n	1000f14e <db_searchATT+0xe>
1000f174:	2000      	movs	r0, #0
1000f176:	bd70      	pop	{r4, r5, r6, pc}
1000f178:	10019dcc 	.word	0x10019dcc
1000f17c:	10019dc4 	.word	0x10019dc4

1000f180 <att_permissions>:
1000f180:	b530      	push	{r4, r5, lr}
1000f182:	2403      	movs	r4, #3
1000f184:	1c05      	adds	r5, r0, #0
1000f186:	2301      	movs	r3, #1
1000f188:	4025      	ands	r5, r4
1000f18a:	42a5      	cmp	r5, r4
1000f18c:	d009      	beq.n	1000f1a2 <att_permissions+0x22>
1000f18e:	1c23      	adds	r3, r4, #0
1000f190:	1924      	adds	r4, r4, r4
1000f192:	4220      	tst	r0, r4
1000f194:	d105      	bne.n	1000f1a2 <att_permissions+0x22>
1000f196:	3b02      	subs	r3, #2
1000f198:	4218      	tst	r0, r3
1000f19a:	d102      	bne.n	1000f1a2 <att_permissions+0x22>
1000f19c:	1e4b      	subs	r3, r1, #1
1000f19e:	4199      	sbcs	r1, r3
1000f1a0:	b28b      	uxth	r3, r1
1000f1a2:	2130      	movs	r1, #48	; 0x30
1000f1a4:	4001      	ands	r1, r0
1000f1a6:	2930      	cmp	r1, #48	; 0x30
1000f1a8:	d007      	beq.n	1000f1ba <att_permissions+0x3a>
1000f1aa:	0641      	lsls	r1, r0, #25
1000f1ac:	d401      	bmi.n	1000f1b2 <att_permissions+0x32>
1000f1ae:	0681      	lsls	r1, r0, #26
1000f1b0:	d501      	bpl.n	1000f1b6 <att_permissions+0x36>
1000f1b2:	4807      	ldr	r0, [pc, #28]	; (1000f1d0 <att_permissions+0x50>)
1000f1b4:	e009      	b.n	1000f1ca <att_permissions+0x4a>
1000f1b6:	06c1      	lsls	r1, r0, #27
1000f1b8:	d501      	bpl.n	1000f1be <att_permissions+0x3e>
1000f1ba:	4806      	ldr	r0, [pc, #24]	; (1000f1d4 <att_permissions+0x54>)
1000f1bc:	e005      	b.n	1000f1ca <att_permissions+0x4a>
1000f1be:	2a00      	cmp	r2, #0
1000f1c0:	d001      	beq.n	1000f1c6 <att_permissions+0x46>
1000f1c2:	2204      	movs	r2, #4
1000f1c4:	4313      	orrs	r3, r2
1000f1c6:	2080      	movs	r0, #128	; 0x80
1000f1c8:	0180      	lsls	r0, r0, #6
1000f1ca:	4318      	orrs	r0, r3
1000f1cc:	bd30      	pop	{r4, r5, pc}
1000f1ce:	46c0      	nop			; (mov r8, r8)
1000f1d0:	0000200c 	.word	0x0000200c
1000f1d4:	00002004 	.word	0x00002004

1000f1d8 <char_permissions>:
1000f1d8:	b530      	push	{r4, r5, lr}
1000f1da:	2300      	movs	r3, #0
1000f1dc:	0784      	lsls	r4, r0, #30
1000f1de:	d503      	bpl.n	1000f1e8 <char_permissions+0x10>
1000f1e0:	3301      	adds	r3, #1
1000f1e2:	4219      	tst	r1, r3
1000f1e4:	d100      	bne.n	1000f1e8 <char_permissions+0x10>
1000f1e6:	3302      	adds	r3, #2
1000f1e8:	0704      	lsls	r4, r0, #28
1000f1ea:	d508      	bpl.n	1000f1fe <char_permissions+0x26>
1000f1ec:	06cc      	lsls	r4, r1, #27
1000f1ee:	d501      	bpl.n	1000f1f4 <char_permissions+0x1c>
1000f1f0:	2404      	movs	r4, #4
1000f1f2:	e000      	b.n	1000f1f6 <char_permissions+0x1e>
1000f1f4:	240c      	movs	r4, #12
1000f1f6:	4323      	orrs	r3, r4
1000f1f8:	2480      	movs	r4, #128	; 0x80
1000f1fa:	01a4      	lsls	r4, r4, #6
1000f1fc:	4323      	orrs	r3, r4
1000f1fe:	0684      	lsls	r4, r0, #26
1000f200:	d506      	bpl.n	1000f210 <char_permissions+0x38>
1000f202:	2406      	movs	r4, #6
1000f204:	4221      	tst	r1, r4
1000f206:	d101      	bne.n	1000f20c <char_permissions+0x34>
1000f208:	340a      	adds	r4, #10
1000f20a:	e000      	b.n	1000f20e <char_permissions+0x36>
1000f20c:	2430      	movs	r4, #48	; 0x30
1000f20e:	4323      	orrs	r3, r4
1000f210:	06c4      	lsls	r4, r0, #27
1000f212:	d506      	bpl.n	1000f222 <char_permissions+0x4a>
1000f214:	2406      	movs	r4, #6
1000f216:	4221      	tst	r1, r4
1000f218:	d101      	bne.n	1000f21e <char_permissions+0x46>
1000f21a:	343a      	adds	r4, #58	; 0x3a
1000f21c:	e000      	b.n	1000f220 <char_permissions+0x48>
1000f21e:	24c0      	movs	r4, #192	; 0xc0
1000f220:	4323      	orrs	r3, r4
1000f222:	2480      	movs	r4, #128	; 0x80
1000f224:	0064      	lsls	r4, r4, #1
1000f226:	4220      	tst	r0, r4
1000f228:	d000      	beq.n	1000f22c <char_permissions+0x54>
1000f22a:	4323      	orrs	r3, r4
1000f22c:	07c4      	lsls	r4, r0, #31
1000f22e:	d502      	bpl.n	1000f236 <char_permissions+0x5e>
1000f230:	2480      	movs	r4, #128	; 0x80
1000f232:	00a4      	lsls	r4, r4, #2
1000f234:	4323      	orrs	r3, r4
1000f236:	2404      	movs	r4, #4
1000f238:	4220      	tst	r0, r4
1000f23a:	d006      	beq.n	1000f24a <char_permissions+0x72>
1000f23c:	06cd      	lsls	r5, r1, #27
1000f23e:	d400      	bmi.n	1000f242 <char_permissions+0x6a>
1000f240:	240c      	movs	r4, #12
1000f242:	4323      	orrs	r3, r4
1000f244:	2480      	movs	r4, #128	; 0x80
1000f246:	0124      	lsls	r4, r4, #4
1000f248:	4323      	orrs	r3, r4
1000f24a:	0644      	lsls	r4, r0, #25
1000f24c:	d501      	bpl.n	1000f252 <char_permissions+0x7a>
1000f24e:	4c08      	ldr	r4, [pc, #32]	; (1000f270 <char_permissions+0x98>)
1000f250:	4323      	orrs	r3, r4
1000f252:	0600      	lsls	r0, r0, #24
1000f254:	d507      	bpl.n	1000f266 <char_permissions+0x8e>
1000f256:	2004      	movs	r0, #4
1000f258:	06c9      	lsls	r1, r1, #27
1000f25a:	d400      	bmi.n	1000f25e <char_permissions+0x86>
1000f25c:	200c      	movs	r0, #12
1000f25e:	4303      	orrs	r3, r0
1000f260:	2084      	movs	r0, #132	; 0x84
1000f262:	0180      	lsls	r0, r0, #6
1000f264:	4303      	orrs	r3, r0
1000f266:	0390      	lsls	r0, r2, #14
1000f268:	4303      	orrs	r3, r0
1000f26a:	b298      	uxth	r0, r3
1000f26c:	bd30      	pop	{r4, r5, pc}
1000f26e:	46c0      	nop			; (mov r8, r8)
1000f270:	00001004 	.word	0x00001004

1000f274 <presentation_format_define>:
1000f274:	b507      	push	{r0, r1, r2, lr}
1000f276:	466a      	mov	r2, sp
1000f278:	780b      	ldrb	r3, [r1, #0]
1000f27a:	7013      	strb	r3, [r2, #0]
1000f27c:	784b      	ldrb	r3, [r1, #1]
1000f27e:	7053      	strb	r3, [r2, #1]
1000f280:	884b      	ldrh	r3, [r1, #2]
1000f282:	7093      	strb	r3, [r2, #2]
1000f284:	0a1b      	lsrs	r3, r3, #8
1000f286:	70d3      	strb	r3, [r2, #3]
1000f288:	790b      	ldrb	r3, [r1, #4]
1000f28a:	7113      	strb	r3, [r2, #4]
1000f28c:	88cb      	ldrh	r3, [r1, #6]
1000f28e:	2107      	movs	r1, #7
1000f290:	7153      	strb	r3, [r2, #5]
1000f292:	0a1b      	lsrs	r3, r3, #8
1000f294:	7193      	strb	r3, [r2, #6]
1000f296:	4b01      	ldr	r3, [pc, #4]	; (1000f29c <presentation_format_define+0x28>)
1000f298:	4798      	blx	r3
1000f29a:	bd0e      	pop	{r1, r2, r3, pc}
1000f29c:	10011609 	.word	0x10011609

1000f2a0 <db_addATT>:
1000f2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f2a2:	4c29      	ldr	r4, [pc, #164]	; (1000f348 <db_addATT+0xa8>)
1000f2a4:	1c1d      	adds	r5, r3, #0
1000f2a6:	6823      	ldr	r3, [r4, #0]
1000f2a8:	9001      	str	r0, [sp, #4]
1000f2aa:	26d3      	movs	r6, #211	; 0xd3
1000f2ac:	2b00      	cmp	r3, #0
1000f2ae:	d048      	beq.n	1000f342 <db_addATT+0xa2>
1000f2b0:	1c1e      	adds	r6, r3, #0
1000f2b2:	3e0c      	subs	r6, #12
1000f2b4:	6026      	str	r6, [r4, #0]
1000f2b6:	2900      	cmp	r1, #0
1000f2b8:	d005      	beq.n	1000f2c6 <db_addATT+0x26>
1000f2ba:	4f24      	ldr	r7, [pc, #144]	; (1000f34c <db_addATT+0xac>)
1000f2bc:	46bc      	mov	ip, r7
1000f2be:	4660      	mov	r0, ip
1000f2c0:	683f      	ldr	r7, [r7, #0]
1000f2c2:	18bf      	adds	r7, r7, r2
1000f2c4:	6007      	str	r7, [r0, #0]
1000f2c6:	4821      	ldr	r0, [pc, #132]	; (1000f34c <db_addATT+0xac>)
1000f2c8:	6807      	ldr	r7, [r0, #0]
1000f2ca:	4684      	mov	ip, r0
1000f2cc:	42be      	cmp	r6, r7
1000f2ce:	d932      	bls.n	1000f336 <db_addATT+0x96>
1000f2d0:	4668      	mov	r0, sp
1000f2d2:	8880      	ldrh	r0, [r0, #4]
1000f2d4:	3b0c      	subs	r3, #12
1000f2d6:	8018      	strh	r0, [r3, #0]
1000f2d8:	6823      	ldr	r3, [r4, #0]
1000f2da:	2900      	cmp	r1, #0
1000f2dc:	d009      	beq.n	1000f2f2 <db_addATT+0x52>
1000f2de:	2a00      	cmp	r2, #0
1000f2e0:	d007      	beq.n	1000f2f2 <db_addATT+0x52>
1000f2e2:	4660      	mov	r0, ip
1000f2e4:	6800      	ldr	r0, [r0, #0]
1000f2e6:	809a      	strh	r2, [r3, #4]
1000f2e8:	1a80      	subs	r0, r0, r2
1000f2ea:	6098      	str	r0, [r3, #8]
1000f2ec:	4b18      	ldr	r3, [pc, #96]	; (1000f350 <db_addATT+0xb0>)
1000f2ee:	4798      	blx	r3
1000f2f0:	e002      	b.n	1000f2f8 <db_addATT+0x58>
1000f2f2:	2100      	movs	r1, #0
1000f2f4:	809a      	strh	r2, [r3, #4]
1000f2f6:	6099      	str	r1, [r3, #8]
1000f2f8:	2300      	movs	r3, #0
1000f2fa:	6822      	ldr	r2, [r4, #0]
1000f2fc:	7093      	strb	r3, [r2, #2]
1000f2fe:	3303      	adds	r3, #3
1000f300:	402b      	ands	r3, r5
1000f302:	2b03      	cmp	r3, #3
1000f304:	d001      	beq.n	1000f30a <db_addATT+0x6a>
1000f306:	076b      	lsls	r3, r5, #29
1000f308:	d504      	bpl.n	1000f314 <db_addATT+0x74>
1000f30a:	2101      	movs	r1, #1
1000f30c:	6822      	ldr	r2, [r4, #0]
1000f30e:	7893      	ldrb	r3, [r2, #2]
1000f310:	430b      	orrs	r3, r1
1000f312:	7093      	strb	r3, [r2, #2]
1000f314:	2330      	movs	r3, #48	; 0x30
1000f316:	402b      	ands	r3, r5
1000f318:	2b30      	cmp	r3, #48	; 0x30
1000f31a:	d001      	beq.n	1000f320 <db_addATT+0x80>
1000f31c:	066b      	lsls	r3, r5, #25
1000f31e:	d504      	bpl.n	1000f32a <db_addATT+0x8a>
1000f320:	2102      	movs	r1, #2
1000f322:	6822      	ldr	r2, [r4, #0]
1000f324:	7893      	ldrb	r3, [r2, #2]
1000f326:	430b      	orrs	r3, r1
1000f328:	7093      	strb	r3, [r2, #2]
1000f32a:	4a0a      	ldr	r2, [pc, #40]	; (1000f354 <db_addATT+0xb4>)
1000f32c:	2600      	movs	r6, #0
1000f32e:	6813      	ldr	r3, [r2, #0]
1000f330:	3301      	adds	r3, #1
1000f332:	6013      	str	r3, [r2, #0]
1000f334:	e005      	b.n	1000f342 <db_addATT+0xa2>
1000f336:	6023      	str	r3, [r4, #0]
1000f338:	2611      	movs	r6, #17
1000f33a:	2900      	cmp	r1, #0
1000f33c:	d001      	beq.n	1000f342 <db_addATT+0xa2>
1000f33e:	1aba      	subs	r2, r7, r2
1000f340:	6002      	str	r2, [r0, #0]
1000f342:	1c30      	adds	r0, r6, #0
1000f344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f346:	46c0      	nop			; (mov r8, r8)
1000f348:	10019dc4 	.word	0x10019dc4
1000f34c:	10019dc8 	.word	0x10019dc8
1000f350:	100156bf 	.word	0x100156bf
1000f354:	10019dcc 	.word	0x10019dcc

1000f358 <user_description_define>:
1000f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f35a:	1c05      	adds	r5, r0, #0
1000f35c:	20cf      	movs	r0, #207	; 0xcf
1000f35e:	2a00      	cmp	r2, #0
1000f360:	d01c      	beq.n	1000f39c <user_description_define+0x44>
1000f362:	1c14      	adds	r4, r2, #0
1000f364:	2203      	movs	r2, #3
1000f366:	1c1e      	adds	r6, r3, #0
1000f368:	400a      	ands	r2, r1
1000f36a:	1c0b      	adds	r3, r1, #0
1000f36c:	3a03      	subs	r2, #3
1000f36e:	4251      	negs	r1, r2
1000f370:	4151      	adcs	r1, r2
1000f372:	075a      	lsls	r2, r3, #29
1000f374:	0fd2      	lsrs	r2, r2, #31
1000f376:	430a      	orrs	r2, r1
1000f378:	03d2      	lsls	r2, r2, #15
1000f37a:	4f09      	ldr	r7, [pc, #36]	; (1000f3a0 <user_description_define+0x48>)
1000f37c:	1c28      	adds	r0, r5, #0
1000f37e:	2a00      	cmp	r2, #0
1000f380:	d003      	beq.n	1000f38a <user_description_define+0x32>
1000f382:	1c21      	adds	r1, r4, #0
1000f384:	1c32      	adds	r2, r6, #0
1000f386:	47b8      	blx	r7
1000f388:	e008      	b.n	1000f39c <user_description_define+0x44>
1000f38a:	1c11      	adds	r1, r2, #0
1000f38c:	47b8      	blx	r7
1000f38e:	2800      	cmp	r0, #0
1000f390:	d104      	bne.n	1000f39c <user_description_define+0x44>
1000f392:	1c28      	adds	r0, r5, #0
1000f394:	1c31      	adds	r1, r6, #0
1000f396:	1c22      	adds	r2, r4, #0
1000f398:	4b02      	ldr	r3, [pc, #8]	; (1000f3a4 <user_description_define+0x4c>)
1000f39a:	4798      	blx	r3
1000f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f39e:	46c0      	nop			; (mov r8, r8)
1000f3a0:	1000f2a1 	.word	0x1000f2a1
1000f3a4:	10011609 	.word	0x10011609

1000f3a8 <at_ble_read_authorize_reply.part.1>:
1000f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f3aa:	4b09      	ldr	r3, [pc, #36]	; (1000f3d0 <at_ble_read_authorize_reply.part.1+0x28>)
1000f3ac:	1c05      	adds	r5, r0, #0
1000f3ae:	1c08      	adds	r0, r1, #0
1000f3b0:	1c0c      	adds	r4, r1, #0
1000f3b2:	4798      	blx	r3
1000f3b4:	2800      	cmp	r0, #0
1000f3b6:	d009      	beq.n	1000f3cc <at_ble_read_authorize_reply.part.1+0x24>
1000f3b8:	6882      	ldr	r2, [r0, #8]
1000f3ba:	2a00      	cmp	r2, #0
1000f3bc:	d006      	beq.n	1000f3cc <at_ble_read_authorize_reply.part.1+0x24>
1000f3be:	8883      	ldrh	r3, [r0, #4]
1000f3c0:	1c29      	adds	r1, r5, #0
1000f3c2:	9200      	str	r2, [sp, #0]
1000f3c4:	1c20      	adds	r0, r4, #0
1000f3c6:	2200      	movs	r2, #0
1000f3c8:	4c02      	ldr	r4, [pc, #8]	; (1000f3d4 <at_ble_read_authorize_reply.part.1+0x2c>)
1000f3ca:	47a0      	blx	r4
1000f3cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f3ce:	46c0      	nop			; (mov r8, r8)
1000f3d0:	1000f141 	.word	0x1000f141
1000f3d4:	100110a1 	.word	0x100110a1

1000f3d8 <internal_at_ble_service_define>:
1000f3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3da:	b08b      	sub	sp, #44	; 0x2c
1000f3dc:	9306      	str	r3, [sp, #24]
1000f3de:	ab10      	add	r3, sp, #64	; 0x40
1000f3e0:	9202      	str	r2, [sp, #8]
1000f3e2:	cb04      	ldmia	r3!, {r2}
1000f3e4:	1c05      	adds	r5, r0, #0
1000f3e6:	881b      	ldrh	r3, [r3, #0]
1000f3e8:	9105      	str	r1, [sp, #20]
1000f3ea:	9303      	str	r3, [sp, #12]
1000f3ec:	ab12      	add	r3, sp, #72	; 0x48
1000f3ee:	781b      	ldrb	r3, [r3, #0]
1000f3f0:	20cf      	movs	r0, #207	; 0xcf
1000f3f2:	9304      	str	r3, [sp, #16]
1000f3f4:	2d00      	cmp	r5, #0
1000f3f6:	d100      	bne.n	1000f3fa <internal_at_ble_service_define+0x22>
1000f3f8:	e1ca      	b.n	1000f790 <internal_at_ble_service_define+0x3b8>
1000f3fa:	2900      	cmp	r1, #0
1000f3fc:	d100      	bne.n	1000f400 <internal_at_ble_service_define+0x28>
1000f3fe:	e1c7      	b.n	1000f790 <internal_at_ble_service_define+0x3b8>
1000f400:	2a00      	cmp	r2, #0
1000f402:	d100      	bne.n	1000f406 <internal_at_ble_service_define+0x2e>
1000f404:	e1c4      	b.n	1000f790 <internal_at_ble_service_define+0x3b8>
1000f406:	9b03      	ldr	r3, [sp, #12]
1000f408:	2b00      	cmp	r3, #0
1000f40a:	d100      	bne.n	1000f40e <internal_at_ble_service_define+0x36>
1000f40c:	e1c0      	b.n	1000f790 <internal_at_ble_service_define+0x3b8>
1000f40e:	4bc9      	ldr	r3, [pc, #804]	; (1000f734 <internal_at_ble_service_define+0x35c>)
1000f410:	3004      	adds	r0, #4
1000f412:	681e      	ldr	r6, [r3, #0]
1000f414:	2e00      	cmp	r6, #0
1000f416:	d100      	bne.n	1000f41a <internal_at_ble_service_define+0x42>
1000f418:	e1ba      	b.n	1000f790 <internal_at_ble_service_define+0x3b8>
1000f41a:	2400      	movs	r4, #0
1000f41c:	4bc6      	ldr	r3, [pc, #792]	; (1000f738 <internal_at_ble_service_define+0x360>)
1000f41e:	8034      	strh	r4, [r6, #0]
1000f420:	881b      	ldrh	r3, [r3, #0]
1000f422:	1db7      	adds	r7, r6, #6
1000f424:	1c21      	adds	r1, r4, #0
1000f426:	2210      	movs	r2, #16
1000f428:	8073      	strh	r3, [r6, #2]
1000f42a:	1c38      	adds	r0, r7, #0
1000f42c:	4bc3      	ldr	r3, [pc, #780]	; (1000f73c <internal_at_ble_service_define+0x364>)
1000f42e:	4798      	blx	r3
1000f430:	7828      	ldrb	r0, [r5, #0]
1000f432:	4bc3      	ldr	r3, [pc, #780]	; (1000f740 <internal_at_ble_service_define+0x368>)
1000f434:	4798      	blx	r3
1000f436:	1c69      	adds	r1, r5, #1
1000f438:	1c02      	adds	r2, r0, #0
1000f43a:	4bc2      	ldr	r3, [pc, #776]	; (1000f744 <internal_at_ble_service_define+0x36c>)
1000f43c:	1c38      	adds	r0, r7, #0
1000f43e:	4798      	blx	r3
1000f440:	2204      	movs	r2, #4
1000f442:	782b      	ldrb	r3, [r5, #0]
1000f444:	9d02      	ldr	r5, [sp, #8]
1000f446:	011b      	lsls	r3, r3, #4
1000f448:	4313      	orrs	r3, r2
1000f44a:	9a04      	ldr	r2, [sp, #16]
1000f44c:	7174      	strb	r4, [r6, #5]
1000f44e:	0192      	lsls	r2, r2, #6
1000f450:	4313      	orrs	r3, r2
1000f452:	7133      	strb	r3, [r6, #4]
1000f454:	2316      	movs	r3, #22
1000f456:	9a06      	ldr	r2, [sp, #24]
1000f458:	3512      	adds	r5, #18
1000f45a:	4353      	muls	r3, r2
1000f45c:	9a02      	ldr	r2, [sp, #8]
1000f45e:	3312      	adds	r3, #18
1000f460:	18d7      	adds	r7, r2, r3
1000f462:	42bd      	cmp	r5, r7
1000f464:	d00f      	beq.n	1000f486 <internal_at_ble_service_define+0xae>
1000f466:	4bb8      	ldr	r3, [pc, #736]	; (1000f748 <internal_at_ble_service_define+0x370>)
1000f468:	8829      	ldrh	r1, [r5, #0]
1000f46a:	9300      	str	r3, [sp, #0]
1000f46c:	230e      	movs	r3, #14
1000f46e:	aa06      	add	r2, sp, #24
1000f470:	189b      	adds	r3, r3, r2
1000f472:	9301      	str	r3, [sp, #4]
1000f474:	4cb5      	ldr	r4, [pc, #724]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f476:	1c30      	adds	r0, r6, #0
1000f478:	2201      	movs	r2, #1
1000f47a:	2302      	movs	r3, #2
1000f47c:	47a0      	blx	r4
1000f47e:	3516      	adds	r5, #22
1000f480:	1e04      	subs	r4, r0, #0
1000f482:	d0ee      	beq.n	1000f462 <internal_at_ble_service_define+0x8a>
1000f484:	e183      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f486:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f488:	2300      	movs	r3, #0
1000f48a:	3714      	adds	r7, #20
1000f48c:	1c3d      	adds	r5, r7, #0
1000f48e:	9302      	str	r3, [sp, #8]
1000f490:	9b02      	ldr	r3, [sp, #8]
1000f492:	9a03      	ldr	r2, [sp, #12]
1000f494:	4293      	cmp	r3, r2
1000f496:	db00      	blt.n	1000f49a <internal_at_ble_service_define+0xc2>
1000f498:	e0bf      	b.n	1000f61a <internal_at_ble_service_define+0x242>
1000f49a:	4bad      	ldr	r3, [pc, #692]	; (1000f750 <internal_at_ble_service_define+0x378>)
1000f49c:	aa06      	add	r2, sp, #24
1000f49e:	9300      	str	r3, [sp, #0]
1000f4a0:	230e      	movs	r3, #14
1000f4a2:	189b      	adds	r3, r3, r2
1000f4a4:	9301      	str	r3, [sp, #4]
1000f4a6:	4ca9      	ldr	r4, [pc, #676]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f4a8:	1c30      	adds	r0, r6, #0
1000f4aa:	2104      	movs	r1, #4
1000f4ac:	2201      	movs	r2, #1
1000f4ae:	2302      	movs	r3, #2
1000f4b0:	47a0      	blx	r4
1000f4b2:	1e04      	subs	r4, r0, #0
1000f4b4:	d000      	beq.n	1000f4b8 <internal_at_ble_service_define+0xe0>
1000f4b6:	e16a      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f4b8:	1c2b      	adds	r3, r5, #0
1000f4ba:	3b12      	subs	r3, #18
1000f4bc:	7b2c      	ldrb	r4, [r5, #12]
1000f4be:	781b      	ldrb	r3, [r3, #0]
1000f4c0:	1c21      	adds	r1, r4, #0
1000f4c2:	1c1a      	adds	r2, r3, #0
1000f4c4:	9304      	str	r3, [sp, #16]
1000f4c6:	8828      	ldrh	r0, [r5, #0]
1000f4c8:	4ba2      	ldr	r3, [pc, #648]	; (1000f754 <internal_at_ble_service_define+0x37c>)
1000f4ca:	4798      	blx	r3
1000f4cc:	2303      	movs	r3, #3
1000f4ce:	4023      	ands	r3, r4
1000f4d0:	3b03      	subs	r3, #3
1000f4d2:	4259      	negs	r1, r3
1000f4d4:	4159      	adcs	r1, r3
1000f4d6:	2301      	movs	r3, #1
1000f4d8:	08a4      	lsrs	r4, r4, #2
1000f4da:	401c      	ands	r4, r3
1000f4dc:	430c      	orrs	r4, r1
1000f4de:	896b      	ldrh	r3, [r5, #10]
1000f4e0:	03e4      	lsls	r4, r4, #15
1000f4e2:	431c      	orrs	r4, r3
1000f4e4:	9007      	str	r0, [sp, #28]
1000f4e6:	4b96      	ldr	r3, [pc, #600]	; (1000f740 <internal_at_ble_service_define+0x368>)
1000f4e8:	9804      	ldr	r0, [sp, #16]
1000f4ea:	4798      	blx	r3
1000f4ec:	1c2a      	adds	r2, r5, #0
1000f4ee:	3a11      	subs	r2, #17
1000f4f0:	9200      	str	r2, [sp, #0]
1000f4f2:	3a03      	subs	r2, #3
1000f4f4:	1c03      	adds	r3, r0, #0
1000f4f6:	9201      	str	r2, [sp, #4]
1000f4f8:	1c21      	adds	r1, r4, #0
1000f4fa:	1c30      	adds	r0, r6, #0
1000f4fc:	4c93      	ldr	r4, [pc, #588]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f4fe:	9a07      	ldr	r2, [sp, #28]
1000f500:	47a0      	blx	r4
1000f502:	1e04      	subs	r4, r0, #0
1000f504:	d000      	beq.n	1000f508 <internal_at_ble_service_define+0x130>
1000f506:	e142      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f508:	22c0      	movs	r2, #192	; 0xc0
1000f50a:	882b      	ldrh	r3, [r5, #0]
1000f50c:	0052      	lsls	r2, r2, #1
1000f50e:	4213      	tst	r3, r2
1000f510:	d104      	bne.n	1000f51c <internal_at_ble_service_define+0x144>
1000f512:	8aab      	ldrh	r3, [r5, #20]
1000f514:	9304      	str	r3, [sp, #16]
1000f516:	2b00      	cmp	r3, #0
1000f518:	d116      	bne.n	1000f548 <internal_at_ble_service_define+0x170>
1000f51a:	e03a      	b.n	1000f592 <internal_at_ble_service_define+0x1ba>
1000f51c:	2201      	movs	r2, #1
1000f51e:	09d9      	lsrs	r1, r3, #7
1000f520:	4011      	ands	r1, r2
1000f522:	05db      	lsls	r3, r3, #23
1000f524:	d501      	bpl.n	1000f52a <internal_at_ble_service_define+0x152>
1000f526:	2302      	movs	r3, #2
1000f528:	4319      	orrs	r1, r3
1000f52a:	4b8b      	ldr	r3, [pc, #556]	; (1000f758 <internal_at_ble_service_define+0x380>)
1000f52c:	aa06      	add	r2, sp, #24
1000f52e:	9300      	str	r3, [sp, #0]
1000f530:	230e      	movs	r3, #14
1000f532:	189b      	adds	r3, r3, r2
1000f534:	9301      	str	r3, [sp, #4]
1000f536:	4c85      	ldr	r4, [pc, #532]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f538:	0209      	lsls	r1, r1, #8
1000f53a:	1c30      	adds	r0, r6, #0
1000f53c:	2201      	movs	r2, #1
1000f53e:	2302      	movs	r3, #2
1000f540:	47a0      	blx	r4
1000f542:	1e04      	subs	r4, r0, #0
1000f544:	d0e5      	beq.n	1000f512 <internal_at_ble_service_define+0x13a>
1000f546:	e122      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f548:	2380      	movs	r3, #128	; 0x80
1000f54a:	882a      	ldrh	r2, [r5, #0]
1000f54c:	7f2c      	ldrb	r4, [r5, #28]
1000f54e:	005b      	lsls	r3, r3, #1
1000f550:	401a      	ands	r2, r3
1000f552:	1c20      	adds	r0, r4, #0
1000f554:	2101      	movs	r1, #1
1000f556:	2a00      	cmp	r2, #0
1000f558:	d000      	beq.n	1000f55c <internal_at_ble_service_define+0x184>
1000f55a:	1c0a      	adds	r2, r1, #0
1000f55c:	4b7f      	ldr	r3, [pc, #508]	; (1000f75c <internal_at_ble_service_define+0x384>)
1000f55e:	4798      	blx	r3
1000f560:	2203      	movs	r2, #3
1000f562:	4022      	ands	r2, r4
1000f564:	3a03      	subs	r2, #3
1000f566:	4251      	negs	r1, r2
1000f568:	4151      	adcs	r1, r2
1000f56a:	4b7d      	ldr	r3, [pc, #500]	; (1000f760 <internal_at_ble_service_define+0x388>)
1000f56c:	1c0a      	adds	r2, r1, #0
1000f56e:	9300      	str	r3, [sp, #0]
1000f570:	1c2b      	adds	r3, r5, #0
1000f572:	0764      	lsls	r4, r4, #29
1000f574:	0fe4      	lsrs	r4, r4, #31
1000f576:	4322      	orrs	r2, r4
1000f578:	03d2      	lsls	r2, r2, #15
1000f57a:	4310      	orrs	r0, r2
1000f57c:	3320      	adds	r3, #32
1000f57e:	b282      	uxth	r2, r0
1000f580:	9301      	str	r3, [sp, #4]
1000f582:	4c72      	ldr	r4, [pc, #456]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f584:	1c30      	adds	r0, r6, #0
1000f586:	9904      	ldr	r1, [sp, #16]
1000f588:	2302      	movs	r3, #2
1000f58a:	47a0      	blx	r4
1000f58c:	1e04      	subs	r4, r0, #0
1000f58e:	d000      	beq.n	1000f592 <internal_at_ble_service_define+0x1ba>
1000f590:	e0fd      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f592:	2101      	movs	r1, #1
1000f594:	882b      	ldrh	r3, [r5, #0]
1000f596:	420b      	tst	r3, r1
1000f598:	d011      	beq.n	1000f5be <internal_at_ble_service_define+0x1e6>
1000f59a:	7fa8      	ldrb	r0, [r5, #30]
1000f59c:	4b6f      	ldr	r3, [pc, #444]	; (1000f75c <internal_at_ble_service_define+0x384>)
1000f59e:	2200      	movs	r2, #0
1000f5a0:	4798      	blx	r3
1000f5a2:	4b70      	ldr	r3, [pc, #448]	; (1000f764 <internal_at_ble_service_define+0x38c>)
1000f5a4:	1c02      	adds	r2, r0, #0
1000f5a6:	9300      	str	r3, [sp, #0]
1000f5a8:	1c2b      	adds	r3, r5, #0
1000f5aa:	3324      	adds	r3, #36	; 0x24
1000f5ac:	9301      	str	r3, [sp, #4]
1000f5ae:	4c67      	ldr	r4, [pc, #412]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f5b0:	1c30      	adds	r0, r6, #0
1000f5b2:	496d      	ldr	r1, [pc, #436]	; (1000f768 <internal_at_ble_service_define+0x390>)
1000f5b4:	2302      	movs	r3, #2
1000f5b6:	47a0      	blx	r4
1000f5b8:	1e04      	subs	r4, r0, #0
1000f5ba:	d000      	beq.n	1000f5be <internal_at_ble_service_define+0x1e6>
1000f5bc:	e0e7      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f5be:	2330      	movs	r3, #48	; 0x30
1000f5c0:	882a      	ldrh	r2, [r5, #0]
1000f5c2:	421a      	tst	r2, r3
1000f5c4:	d012      	beq.n	1000f5ec <internal_at_ble_service_define+0x214>
1000f5c6:	2101      	movs	r1, #1
1000f5c8:	7f68      	ldrb	r0, [r5, #29]
1000f5ca:	1c0a      	adds	r2, r1, #0
1000f5cc:	4b63      	ldr	r3, [pc, #396]	; (1000f75c <internal_at_ble_service_define+0x384>)
1000f5ce:	4798      	blx	r3
1000f5d0:	4b66      	ldr	r3, [pc, #408]	; (1000f76c <internal_at_ble_service_define+0x394>)
1000f5d2:	1c02      	adds	r2, r0, #0
1000f5d4:	9300      	str	r3, [sp, #0]
1000f5d6:	1c2b      	adds	r3, r5, #0
1000f5d8:	3322      	adds	r3, #34	; 0x22
1000f5da:	9301      	str	r3, [sp, #4]
1000f5dc:	4c5b      	ldr	r4, [pc, #364]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f5de:	1c30      	adds	r0, r6, #0
1000f5e0:	4961      	ldr	r1, [pc, #388]	; (1000f768 <internal_at_ble_service_define+0x390>)
1000f5e2:	2302      	movs	r3, #2
1000f5e4:	47a0      	blx	r4
1000f5e6:	1e04      	subs	r4, r0, #0
1000f5e8:	d000      	beq.n	1000f5ec <internal_at_ble_service_define+0x214>
1000f5ea:	e0d0      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f5ec:	69ab      	ldr	r3, [r5, #24]
1000f5ee:	2b00      	cmp	r3, #0
1000f5f0:	d00e      	beq.n	1000f610 <internal_at_ble_service_define+0x238>
1000f5f2:	4b5f      	ldr	r3, [pc, #380]	; (1000f770 <internal_at_ble_service_define+0x398>)
1000f5f4:	aa06      	add	r2, sp, #24
1000f5f6:	9300      	str	r3, [sp, #0]
1000f5f8:	230e      	movs	r3, #14
1000f5fa:	189b      	adds	r3, r3, r2
1000f5fc:	9301      	str	r3, [sp, #4]
1000f5fe:	4c53      	ldr	r4, [pc, #332]	; (1000f74c <internal_at_ble_service_define+0x374>)
1000f600:	1c30      	adds	r0, r6, #0
1000f602:	2107      	movs	r1, #7
1000f604:	2201      	movs	r2, #1
1000f606:	2302      	movs	r3, #2
1000f608:	47a0      	blx	r4
1000f60a:	1e04      	subs	r4, r0, #0
1000f60c:	d000      	beq.n	1000f610 <internal_at_ble_service_define+0x238>
1000f60e:	e0be      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f610:	9b02      	ldr	r3, [sp, #8]
1000f612:	353c      	adds	r5, #60	; 0x3c
1000f614:	3301      	adds	r3, #1
1000f616:	9302      	str	r3, [sp, #8]
1000f618:	e73a      	b.n	1000f490 <internal_at_ble_service_define+0xb8>
1000f61a:	1c30      	adds	r0, r6, #0
1000f61c:	4b55      	ldr	r3, [pc, #340]	; (1000f774 <internal_at_ble_service_define+0x39c>)
1000f61e:	4798      	blx	r3
1000f620:	1e04      	subs	r4, r0, #0
1000f622:	d000      	beq.n	1000f626 <internal_at_ble_service_define+0x24e>
1000f624:	e0b3      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f626:	8833      	ldrh	r3, [r6, #0]
1000f628:	9a05      	ldr	r2, [sp, #20]
1000f62a:	8013      	strh	r3, [r2, #0]
1000f62c:	8836      	ldrh	r6, [r6, #0]
1000f62e:	9b06      	ldr	r3, [sp, #24]
1000f630:	9a03      	ldr	r2, [sp, #12]
1000f632:	18f6      	adds	r6, r6, r3
1000f634:	b2b3      	uxth	r3, r6
1000f636:	9302      	str	r3, [sp, #8]
1000f638:	233c      	movs	r3, #60	; 0x3c
1000f63a:	4353      	muls	r3, r2
1000f63c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f63e:	3314      	adds	r3, #20
1000f640:	18d3      	adds	r3, r2, r3
1000f642:	9304      	str	r3, [sp, #16]
1000f644:	9b04      	ldr	r3, [sp, #16]
1000f646:	429f      	cmp	r7, r3
1000f648:	d100      	bne.n	1000f64c <internal_at_ble_service_define+0x274>
1000f64a:	e0a0      	b.n	1000f78e <internal_at_ble_service_define+0x3b6>
1000f64c:	9b02      	ldr	r3, [sp, #8]
1000f64e:	1c9d      	adds	r5, r3, #2
1000f650:	1c3b      	adds	r3, r7, #0
1000f652:	b2ad      	uxth	r5, r5
1000f654:	3b14      	subs	r3, #20
1000f656:	801d      	strh	r5, [r3, #0]
1000f658:	9303      	str	r3, [sp, #12]
1000f65a:	893b      	ldrh	r3, [r7, #8]
1000f65c:	2b00      	cmp	r3, #0
1000f65e:	d108      	bne.n	1000f672 <internal_at_ble_service_define+0x29a>
1000f660:	23c0      	movs	r3, #192	; 0xc0
1000f662:	883a      	ldrh	r2, [r7, #0]
1000f664:	005b      	lsls	r3, r3, #1
1000f666:	421a      	tst	r2, r3
1000f668:	d026      	beq.n	1000f6b8 <internal_at_ble_service_define+0x2e0>
1000f66a:	9e02      	ldr	r6, [sp, #8]
1000f66c:	3603      	adds	r6, #3
1000f66e:	b2b5      	uxth	r5, r6
1000f670:	e022      	b.n	1000f6b8 <internal_at_ble_service_define+0x2e0>
1000f672:	2103      	movs	r1, #3
1000f674:	7b3b      	ldrb	r3, [r7, #12]
1000f676:	4019      	ands	r1, r3
1000f678:	3903      	subs	r1, #3
1000f67a:	424a      	negs	r2, r1
1000f67c:	414a      	adcs	r2, r1
1000f67e:	0759      	lsls	r1, r3, #29
1000f680:	0fc9      	lsrs	r1, r1, #31
1000f682:	4311      	orrs	r1, r2
1000f684:	03c9      	lsls	r1, r1, #15
1000f686:	897a      	ldrh	r2, [r7, #10]
1000f688:	2900      	cmp	r1, #0
1000f68a:	d007      	beq.n	1000f69c <internal_at_ble_service_define+0x2c4>
1000f68c:	6879      	ldr	r1, [r7, #4]
1000f68e:	2900      	cmp	r1, #0
1000f690:	d100      	bne.n	1000f694 <internal_at_ble_service_define+0x2bc>
1000f692:	4939      	ldr	r1, [pc, #228]	; (1000f778 <internal_at_ble_service_define+0x3a0>)
1000f694:	1c28      	adds	r0, r5, #0
1000f696:	4e39      	ldr	r6, [pc, #228]	; (1000f77c <internal_at_ble_service_define+0x3a4>)
1000f698:	47b0      	blx	r6
1000f69a:	e00a      	b.n	1000f6b2 <internal_at_ble_service_define+0x2da>
1000f69c:	1c28      	adds	r0, r5, #0
1000f69e:	4e37      	ldr	r6, [pc, #220]	; (1000f77c <internal_at_ble_service_define+0x3a4>)
1000f6a0:	47b0      	blx	r6
1000f6a2:	2800      	cmp	r0, #0
1000f6a4:	d172      	bne.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f6a6:	9b03      	ldr	r3, [sp, #12]
1000f6a8:	8939      	ldrh	r1, [r7, #8]
1000f6aa:	8818      	ldrh	r0, [r3, #0]
1000f6ac:	687a      	ldr	r2, [r7, #4]
1000f6ae:	4b34      	ldr	r3, [pc, #208]	; (1000f780 <internal_at_ble_service_define+0x3a8>)
1000f6b0:	4798      	blx	r3
1000f6b2:	2800      	cmp	r0, #0
1000f6b4:	d0d4      	beq.n	1000f660 <internal_at_ble_service_define+0x288>
1000f6b6:	e069      	b.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f6b8:	8abb      	ldrh	r3, [r7, #20]
1000f6ba:	2b00      	cmp	r3, #0
1000f6bc:	d00a      	beq.n	1000f6d4 <internal_at_ble_service_define+0x2fc>
1000f6be:	3501      	adds	r5, #1
1000f6c0:	b2ad      	uxth	r5, r5
1000f6c2:	843d      	strh	r5, [r7, #32]
1000f6c4:	7f39      	ldrb	r1, [r7, #28]
1000f6c6:	8afb      	ldrh	r3, [r7, #22]
1000f6c8:	1c28      	adds	r0, r5, #0
1000f6ca:	693a      	ldr	r2, [r7, #16]
1000f6cc:	4e2d      	ldr	r6, [pc, #180]	; (1000f784 <internal_at_ble_service_define+0x3ac>)
1000f6ce:	47b0      	blx	r6
1000f6d0:	2800      	cmp	r0, #0
1000f6d2:	d15b      	bne.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f6d4:	883b      	ldrh	r3, [r7, #0]
1000f6d6:	07db      	lsls	r3, r3, #31
1000f6d8:	d50d      	bpl.n	1000f6f6 <internal_at_ble_service_define+0x31e>
1000f6da:	2200      	movs	r2, #0
1000f6dc:	3501      	adds	r5, #1
1000f6de:	b2ad      	uxth	r5, r5
1000f6e0:	a909      	add	r1, sp, #36	; 0x24
1000f6e2:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f6e4:	7fbb      	ldrb	r3, [r7, #30]
1000f6e6:	1c28      	adds	r0, r5, #0
1000f6e8:	700a      	strb	r2, [r1, #0]
1000f6ea:	704a      	strb	r2, [r1, #1]
1000f6ec:	4e23      	ldr	r6, [pc, #140]	; (1000f77c <internal_at_ble_service_define+0x3a4>)
1000f6ee:	3202      	adds	r2, #2
1000f6f0:	47b0      	blx	r6
1000f6f2:	2800      	cmp	r0, #0
1000f6f4:	d14a      	bne.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f6f6:	2330      	movs	r3, #48	; 0x30
1000f6f8:	883a      	ldrh	r2, [r7, #0]
1000f6fa:	421a      	tst	r2, r3
1000f6fc:	d00d      	beq.n	1000f71a <internal_at_ble_service_define+0x342>
1000f6fe:	2200      	movs	r2, #0
1000f700:	3501      	adds	r5, #1
1000f702:	b2ad      	uxth	r5, r5
1000f704:	a909      	add	r1, sp, #36	; 0x24
1000f706:	847d      	strh	r5, [r7, #34]	; 0x22
1000f708:	7f7b      	ldrb	r3, [r7, #29]
1000f70a:	1c28      	adds	r0, r5, #0
1000f70c:	700a      	strb	r2, [r1, #0]
1000f70e:	704a      	strb	r2, [r1, #1]
1000f710:	4e1a      	ldr	r6, [pc, #104]	; (1000f77c <internal_at_ble_service_define+0x3a4>)
1000f712:	3202      	adds	r2, #2
1000f714:	47b0      	blx	r6
1000f716:	2800      	cmp	r0, #0
1000f718:	d138      	bne.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f71a:	69b9      	ldr	r1, [r7, #24]
1000f71c:	2900      	cmp	r1, #0
1000f71e:	d006      	beq.n	1000f72e <internal_at_ble_service_define+0x356>
1000f720:	3501      	adds	r5, #1
1000f722:	b2ad      	uxth	r5, r5
1000f724:	1c28      	adds	r0, r5, #0
1000f726:	4b18      	ldr	r3, [pc, #96]	; (1000f788 <internal_at_ble_service_define+0x3b0>)
1000f728:	4798      	blx	r3
1000f72a:	2800      	cmp	r0, #0
1000f72c:	d12e      	bne.n	1000f78c <internal_at_ble_service_define+0x3b4>
1000f72e:	373c      	adds	r7, #60	; 0x3c
1000f730:	9502      	str	r5, [sp, #8]
1000f732:	e787      	b.n	1000f644 <internal_at_ble_service_define+0x26c>
1000f734:	10019dd4 	.word	0x10019dd4
1000f738:	1001ad20 	.word	0x1001ad20
1000f73c:	100156d1 	.word	0x100156d1
1000f740:	1000f10d 	.word	0x1000f10d
1000f744:	100156bf 	.word	0x100156bf
1000f748:	1001811e 	.word	0x1001811e
1000f74c:	10011599 	.word	0x10011599
1000f750:	10018120 	.word	0x10018120
1000f754:	1000f1d9 	.word	0x1000f1d9
1000f758:	1001811c 	.word	0x1001811c
1000f75c:	1000f181 	.word	0x1000f181
1000f760:	10018118 	.word	0x10018118
1000f764:	1001811a 	.word	0x1001811a
1000f768:	00008002 	.word	0x00008002
1000f76c:	10018114 	.word	0x10018114
1000f770:	10018116 	.word	0x10018116
1000f774:	1001148d 	.word	0x1001148d
1000f778:	10019dc0 	.word	0x10019dc0
1000f77c:	1000f2a1 	.word	0x1000f2a1
1000f780:	10011609 	.word	0x10011609
1000f784:	1000f359 	.word	0x1000f359
1000f788:	1000f275 	.word	0x1000f275
1000f78c:	1c04      	adds	r4, r0, #0
1000f78e:	1c20      	adds	r0, r4, #0
1000f790:	b00b      	add	sp, #44	; 0x2c
1000f792:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f794 <initi_gatt_server_module>:
1000f794:	2300      	movs	r3, #0
1000f796:	4a07      	ldr	r2, [pc, #28]	; (1000f7b4 <initi_gatt_server_module+0x20>)
1000f798:	7013      	strb	r3, [r2, #0]
1000f79a:	4a07      	ldr	r2, [pc, #28]	; (1000f7b8 <initi_gatt_server_module+0x24>)
1000f79c:	6013      	str	r3, [r2, #0]
1000f79e:	4a07      	ldr	r2, [pc, #28]	; (1000f7bc <initi_gatt_server_module+0x28>)
1000f7a0:	6013      	str	r3, [r2, #0]
1000f7a2:	4a07      	ldr	r2, [pc, #28]	; (1000f7c0 <initi_gatt_server_module+0x2c>)
1000f7a4:	6013      	str	r3, [r2, #0]
1000f7a6:	4a07      	ldr	r2, [pc, #28]	; (1000f7c4 <initi_gatt_server_module+0x30>)
1000f7a8:	6013      	str	r3, [r2, #0]
1000f7aa:	4a07      	ldr	r2, [pc, #28]	; (1000f7c8 <initi_gatt_server_module+0x34>)
1000f7ac:	6013      	str	r3, [r2, #0]
1000f7ae:	4a07      	ldr	r2, [pc, #28]	; (1000f7cc <initi_gatt_server_module+0x38>)
1000f7b0:	6013      	str	r3, [r2, #0]
1000f7b2:	4770      	bx	lr
1000f7b4:	10019dc0 	.word	0x10019dc0
1000f7b8:	10019dd0 	.word	0x10019dd0
1000f7bc:	10019dcc 	.word	0x10019dcc
1000f7c0:	10019dbc 	.word	0x10019dbc
1000f7c4:	10019dc8 	.word	0x10019dc8
1000f7c8:	10019dc4 	.word	0x10019dc4
1000f7cc:	10019dd4 	.word	0x10019dd4

1000f7d0 <db_init>:
1000f7d0:	4b0a      	ldr	r3, [pc, #40]	; (1000f7fc <db_init+0x2c>)
1000f7d2:	4a0b      	ldr	r2, [pc, #44]	; (1000f800 <db_init+0x30>)
1000f7d4:	6018      	str	r0, [r3, #0]
1000f7d6:	084b      	lsrs	r3, r1, #1
1000f7d8:	6013      	str	r3, [r2, #0]
1000f7da:	4a0a      	ldr	r2, [pc, #40]	; (1000f804 <db_init+0x34>)
1000f7dc:	18c3      	adds	r3, r0, r3
1000f7de:	6013      	str	r3, [r2, #0]
1000f7e0:	4a09      	ldr	r2, [pc, #36]	; (1000f808 <db_init+0x38>)
1000f7e2:	1841      	adds	r1, r0, r1
1000f7e4:	6013      	str	r3, [r2, #0]
1000f7e6:	2303      	movs	r3, #3
1000f7e8:	2200      	movs	r2, #0
1000f7ea:	3103      	adds	r1, #3
1000f7ec:	4399      	bics	r1, r3
1000f7ee:	4b07      	ldr	r3, [pc, #28]	; (1000f80c <db_init+0x3c>)
1000f7f0:	3904      	subs	r1, #4
1000f7f2:	6019      	str	r1, [r3, #0]
1000f7f4:	4b06      	ldr	r3, [pc, #24]	; (1000f810 <db_init+0x40>)
1000f7f6:	601a      	str	r2, [r3, #0]
1000f7f8:	4770      	bx	lr
1000f7fa:	46c0      	nop			; (mov r8, r8)
1000f7fc:	10019dd4 	.word	0x10019dd4
1000f800:	10019dd0 	.word	0x10019dd0
1000f804:	10019dbc 	.word	0x10019dbc
1000f808:	10019dc8 	.word	0x10019dc8
1000f80c:	10019dc4 	.word	0x10019dc4
1000f810:	10019dcc 	.word	0x10019dcc

1000f814 <at_ble_primary_service_define>:
1000f814:	b530      	push	{r4, r5, lr}
1000f816:	b085      	sub	sp, #20
1000f818:	ac08      	add	r4, sp, #32
1000f81a:	cc20      	ldmia	r4!, {r5}
1000f81c:	8824      	ldrh	r4, [r4, #0]
1000f81e:	9500      	str	r5, [sp, #0]
1000f820:	9401      	str	r4, [sp, #4]
1000f822:	2401      	movs	r4, #1
1000f824:	9402      	str	r4, [sp, #8]
1000f826:	4c02      	ldr	r4, [pc, #8]	; (1000f830 <at_ble_primary_service_define+0x1c>)
1000f828:	47a0      	blx	r4
1000f82a:	b005      	add	sp, #20
1000f82c:	bd30      	pop	{r4, r5, pc}
1000f82e:	46c0      	nop			; (mov r8, r8)
1000f830:	1000f3d9 	.word	0x1000f3d9

1000f834 <at_ble_characteristic_value_set>:
1000f834:	b570      	push	{r4, r5, r6, lr}
1000f836:	4b0b      	ldr	r3, [pc, #44]	; (1000f864 <at_ble_characteristic_value_set+0x30>)
1000f838:	1c06      	adds	r6, r0, #0
1000f83a:	1c0c      	adds	r4, r1, #0
1000f83c:	1c15      	adds	r5, r2, #0
1000f83e:	4798      	blx	r3
1000f840:	2800      	cmp	r0, #0
1000f842:	d008      	beq.n	1000f856 <at_ble_characteristic_value_set+0x22>
1000f844:	6880      	ldr	r0, [r0, #8]
1000f846:	2800      	cmp	r0, #0
1000f848:	d005      	beq.n	1000f856 <at_ble_characteristic_value_set+0x22>
1000f84a:	1c21      	adds	r1, r4, #0
1000f84c:	1c2a      	adds	r2, r5, #0
1000f84e:	4b06      	ldr	r3, [pc, #24]	; (1000f868 <at_ble_characteristic_value_set+0x34>)
1000f850:	4798      	blx	r3
1000f852:	2000      	movs	r0, #0
1000f854:	e004      	b.n	1000f860 <at_ble_characteristic_value_set+0x2c>
1000f856:	1c30      	adds	r0, r6, #0
1000f858:	1c29      	adds	r1, r5, #0
1000f85a:	1c22      	adds	r2, r4, #0
1000f85c:	4b03      	ldr	r3, [pc, #12]	; (1000f86c <at_ble_characteristic_value_set+0x38>)
1000f85e:	4798      	blx	r3
1000f860:	bd70      	pop	{r4, r5, r6, pc}
1000f862:	46c0      	nop			; (mov r8, r8)
1000f864:	1000f141 	.word	0x1000f141
1000f868:	100156bf 	.word	0x100156bf
1000f86c:	10011609 	.word	0x10011609

1000f870 <at_ble_characteristic_value_get>:
1000f870:	b570      	push	{r4, r5, r6, lr}
1000f872:	4b0c      	ldr	r3, [pc, #48]	; (1000f8a4 <at_ble_characteristic_value_get+0x34>)
1000f874:	1c06      	adds	r6, r0, #0
1000f876:	1c0c      	adds	r4, r1, #0
1000f878:	1c15      	adds	r5, r2, #0
1000f87a:	4798      	blx	r3
1000f87c:	2800      	cmp	r0, #0
1000f87e:	d00b      	beq.n	1000f898 <at_ble_characteristic_value_get+0x28>
1000f880:	6883      	ldr	r3, [r0, #8]
1000f882:	2b00      	cmp	r3, #0
1000f884:	d008      	beq.n	1000f898 <at_ble_characteristic_value_get+0x28>
1000f886:	8883      	ldrh	r3, [r0, #4]
1000f888:	802b      	strh	r3, [r5, #0]
1000f88a:	8882      	ldrh	r2, [r0, #4]
1000f88c:	6881      	ldr	r1, [r0, #8]
1000f88e:	4b06      	ldr	r3, [pc, #24]	; (1000f8a8 <at_ble_characteristic_value_get+0x38>)
1000f890:	1c20      	adds	r0, r4, #0
1000f892:	4798      	blx	r3
1000f894:	2000      	movs	r0, #0
1000f896:	e004      	b.n	1000f8a2 <at_ble_characteristic_value_get+0x32>
1000f898:	1c30      	adds	r0, r6, #0
1000f89a:	1c29      	adds	r1, r5, #0
1000f89c:	1c22      	adds	r2, r4, #0
1000f89e:	4b03      	ldr	r3, [pc, #12]	; (1000f8ac <at_ble_characteristic_value_get+0x3c>)
1000f8a0:	4798      	blx	r3
1000f8a2:	bd70      	pop	{r4, r5, r6, pc}
1000f8a4:	1000f141 	.word	0x1000f141
1000f8a8:	100156bf 	.word	0x100156bf
1000f8ac:	10011695 	.word	0x10011695

1000f8b0 <at_ble_write_authorize_reply>:
1000f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8b2:	b085      	sub	sp, #20
1000f8b4:	1c04      	adds	r4, r0, #0
1000f8b6:	9101      	str	r1, [sp, #4]
1000f8b8:	2900      	cmp	r1, #0
1000f8ba:	d128      	bne.n	1000f90e <at_ble_write_authorize_reply+0x5e>
1000f8bc:	8843      	ldrh	r3, [r0, #2]
1000f8be:	1c27      	adds	r7, r4, #0
1000f8c0:	9300      	str	r3, [sp, #0]
1000f8c2:	1c18      	adds	r0, r3, #0
1000f8c4:	4b16      	ldr	r3, [pc, #88]	; (1000f920 <at_ble_write_authorize_reply+0x70>)
1000f8c6:	4798      	blx	r3
1000f8c8:	3708      	adds	r7, #8
1000f8ca:	2800      	cmp	r0, #0
1000f8cc:	d009      	beq.n	1000f8e2 <at_ble_write_authorize_reply+0x32>
1000f8ce:	6880      	ldr	r0, [r0, #8]
1000f8d0:	2800      	cmp	r0, #0
1000f8d2:	d006      	beq.n	1000f8e2 <at_ble_write_authorize_reply+0x32>
1000f8d4:	88a3      	ldrh	r3, [r4, #4]
1000f8d6:	88e2      	ldrh	r2, [r4, #6]
1000f8d8:	18c0      	adds	r0, r0, r3
1000f8da:	1c39      	adds	r1, r7, #0
1000f8dc:	4b11      	ldr	r3, [pc, #68]	; (1000f924 <at_ble_write_authorize_reply+0x74>)
1000f8de:	4798      	blx	r3
1000f8e0:	e015      	b.n	1000f90e <at_ble_write_authorize_reply+0x5e>
1000f8e2:	ab02      	add	r3, sp, #8
1000f8e4:	1d9e      	adds	r6, r3, #6
1000f8e6:	2300      	movs	r3, #0
1000f8e8:	4d0f      	ldr	r5, [pc, #60]	; (1000f928 <at_ble_write_authorize_reply+0x78>)
1000f8ea:	8033      	strh	r3, [r6, #0]
1000f8ec:	6829      	ldr	r1, [r5, #0]
1000f8ee:	1c32      	adds	r2, r6, #0
1000f8f0:	4b0e      	ldr	r3, [pc, #56]	; (1000f92c <at_ble_write_authorize_reply+0x7c>)
1000f8f2:	9800      	ldr	r0, [sp, #0]
1000f8f4:	4798      	blx	r3
1000f8f6:	682b      	ldr	r3, [r5, #0]
1000f8f8:	88a0      	ldrh	r0, [r4, #4]
1000f8fa:	88e2      	ldrh	r2, [r4, #6]
1000f8fc:	1818      	adds	r0, r3, r0
1000f8fe:	1c39      	adds	r1, r7, #0
1000f900:	4b08      	ldr	r3, [pc, #32]	; (1000f924 <at_ble_write_authorize_reply+0x74>)
1000f902:	4798      	blx	r3
1000f904:	8860      	ldrh	r0, [r4, #2]
1000f906:	8832      	ldrh	r2, [r6, #0]
1000f908:	6829      	ldr	r1, [r5, #0]
1000f90a:	4b09      	ldr	r3, [pc, #36]	; (1000f930 <at_ble_write_authorize_reply+0x80>)
1000f90c:	4798      	blx	r3
1000f90e:	8860      	ldrh	r0, [r4, #2]
1000f910:	8821      	ldrh	r1, [r4, #0]
1000f912:	9a01      	ldr	r2, [sp, #4]
1000f914:	4b07      	ldr	r3, [pc, #28]	; (1000f934 <at_ble_write_authorize_reply+0x84>)
1000f916:	4798      	blx	r3
1000f918:	2000      	movs	r0, #0
1000f91a:	b005      	add	sp, #20
1000f91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f91e:	46c0      	nop			; (mov r8, r8)
1000f920:	1000f141 	.word	0x1000f141
1000f924:	100156bf 	.word	0x100156bf
1000f928:	10018338 	.word	0x10018338
1000f92c:	1000f871 	.word	0x1000f871
1000f930:	1000f835 	.word	0x1000f835
1000f934:	1001110d 	.word	0x1001110d

1000f938 <gatts_handle_read_req>:
1000f938:	b538      	push	{r3, r4, r5, lr}
1000f93a:	1c0c      	adds	r4, r1, #0
1000f93c:	4b07      	ldr	r3, [pc, #28]	; (1000f95c <gatts_handle_read_req+0x24>)
1000f93e:	4798      	blx	r3
1000f940:	8865      	ldrh	r5, [r4, #2]
1000f942:	4b07      	ldr	r3, [pc, #28]	; (1000f960 <gatts_handle_read_req+0x28>)
1000f944:	1c28      	adds	r0, r5, #0
1000f946:	4798      	blx	r3
1000f948:	7883      	ldrb	r3, [r0, #2]
1000f94a:	2026      	movs	r0, #38	; 0x26
1000f94c:	07db      	lsls	r3, r3, #31
1000f94e:	d404      	bmi.n	1000f95a <gatts_handle_read_req+0x22>
1000f950:	8820      	ldrh	r0, [r4, #0]
1000f952:	1c29      	adds	r1, r5, #0
1000f954:	4b03      	ldr	r3, [pc, #12]	; (1000f964 <gatts_handle_read_req+0x2c>)
1000f956:	4798      	blx	r3
1000f958:	203b      	movs	r0, #59	; 0x3b
1000f95a:	bd38      	pop	{r3, r4, r5, pc}
1000f95c:	10011051 	.word	0x10011051
1000f960:	1000f141 	.word	0x1000f141
1000f964:	1000f3a9 	.word	0x1000f3a9

1000f968 <gatts_handle_att_info_req>:
1000f968:	b538      	push	{r3, r4, r5, lr}
1000f96a:	1c0d      	adds	r5, r1, #0
1000f96c:	4b0a      	ldr	r3, [pc, #40]	; (1000f998 <gatts_handle_att_info_req+0x30>)
1000f96e:	1c14      	adds	r4, r2, #0
1000f970:	4798      	blx	r3
1000f972:	882d      	ldrh	r5, [r5, #0]
1000f974:	4b09      	ldr	r3, [pc, #36]	; (1000f99c <gatts_handle_att_info_req+0x34>)
1000f976:	1c28      	adds	r0, r5, #0
1000f978:	4798      	blx	r3
1000f97a:	0a22      	lsrs	r2, r4, #8
1000f97c:	1c03      	adds	r3, r0, #0
1000f97e:	4c08      	ldr	r4, [pc, #32]	; (1000f9a0 <gatts_handle_att_info_req+0x38>)
1000f980:	b291      	uxth	r1, r2
1000f982:	2800      	cmp	r0, #0
1000f984:	d003      	beq.n	1000f98e <gatts_handle_att_info_req+0x26>
1000f986:	8882      	ldrh	r2, [r0, #4]
1000f988:	2300      	movs	r3, #0
1000f98a:	1c28      	adds	r0, r5, #0
1000f98c:	e001      	b.n	1000f992 <gatts_handle_att_info_req+0x2a>
1000f98e:	1c28      	adds	r0, r5, #0
1000f990:	2201      	movs	r2, #1
1000f992:	47a0      	blx	r4
1000f994:	203b      	movs	r0, #59	; 0x3b
1000f996:	bd38      	pop	{r3, r4, r5, pc}
1000f998:	10011095 	.word	0x10011095
1000f99c:	1000f141 	.word	0x1000f141
1000f9a0:	10011151 	.word	0x10011151

1000f9a4 <gatts_handle_write_req>:
1000f9a4:	b510      	push	{r4, lr}
1000f9a6:	1c14      	adds	r4, r2, #0
1000f9a8:	4b07      	ldr	r3, [pc, #28]	; (1000f9c8 <gatts_handle_write_req+0x24>)
1000f9aa:	4798      	blx	r3
1000f9ac:	4b07      	ldr	r3, [pc, #28]	; (1000f9cc <gatts_handle_write_req+0x28>)
1000f9ae:	8860      	ldrh	r0, [r4, #2]
1000f9b0:	4798      	blx	r3
1000f9b2:	2302      	movs	r3, #2
1000f9b4:	7881      	ldrb	r1, [r0, #2]
1000f9b6:	2022      	movs	r0, #34	; 0x22
1000f9b8:	4019      	ands	r1, r3
1000f9ba:	d103      	bne.n	1000f9c4 <gatts_handle_write_req+0x20>
1000f9bc:	1c20      	adds	r0, r4, #0
1000f9be:	4b04      	ldr	r3, [pc, #16]	; (1000f9d0 <gatts_handle_write_req+0x2c>)
1000f9c0:	4798      	blx	r3
1000f9c2:	201f      	movs	r0, #31
1000f9c4:	bd10      	pop	{r4, pc}
1000f9c6:	46c0      	nop			; (mov r8, r8)
1000f9c8:	1001105d 	.word	0x1001105d
1000f9cc:	1000f141 	.word	0x1000f141
1000f9d0:	1000f8b1 	.word	0x1000f8b1

1000f9d4 <at_ble_notification_send>:
1000f9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9d6:	4d17      	ldr	r5, [pc, #92]	; (1000fa34 <at_ble_notification_send+0x60>)
1000f9d8:	4c17      	ldr	r4, [pc, #92]	; (1000fa38 <at_ble_notification_send+0x64>)
1000f9da:	682a      	ldr	r2, [r5, #0]
1000f9dc:	44a5      	add	sp, r4
1000f9de:	23d2      	movs	r3, #210	; 0xd2
1000f9e0:	2a04      	cmp	r2, #4
1000f9e2:	d822      	bhi.n	1000fa2a <at_ble_notification_send+0x56>
1000f9e4:	1c06      	adds	r6, r0, #0
1000f9e6:	4b15      	ldr	r3, [pc, #84]	; (1000fa3c <at_ble_notification_send+0x68>)
1000f9e8:	1c08      	adds	r0, r1, #0
1000f9ea:	1c0c      	adds	r4, r1, #0
1000f9ec:	4798      	blx	r3
1000f9ee:	2800      	cmp	r0, #0
1000f9f0:	d008      	beq.n	1000fa04 <at_ble_notification_send+0x30>
1000f9f2:	6883      	ldr	r3, [r0, #8]
1000f9f4:	2b00      	cmp	r3, #0
1000f9f6:	d005      	beq.n	1000fa04 <at_ble_notification_send+0x30>
1000f9f8:	8882      	ldrh	r2, [r0, #4]
1000f9fa:	1c21      	adds	r1, r4, #0
1000f9fc:	9200      	str	r2, [sp, #0]
1000f9fe:	2012      	movs	r0, #18
1000fa00:	1c32      	adds	r2, r6, #0
1000fa02:	e00c      	b.n	1000fa1e <at_ble_notification_send+0x4a>
1000fa04:	270e      	movs	r7, #14
1000fa06:	446f      	add	r7, sp
1000fa08:	1c39      	adds	r1, r7, #0
1000fa0a:	aa04      	add	r2, sp, #16
1000fa0c:	4b0c      	ldr	r3, [pc, #48]	; (1000fa40 <at_ble_notification_send+0x6c>)
1000fa0e:	1c20      	adds	r0, r4, #0
1000fa10:	4798      	blx	r3
1000fa12:	2012      	movs	r0, #18
1000fa14:	1c21      	adds	r1, r4, #0
1000fa16:	1c32      	adds	r2, r6, #0
1000fa18:	883b      	ldrh	r3, [r7, #0]
1000fa1a:	9300      	str	r3, [sp, #0]
1000fa1c:	ab04      	add	r3, sp, #16
1000fa1e:	4c09      	ldr	r4, [pc, #36]	; (1000fa44 <at_ble_notification_send+0x70>)
1000fa20:	47a0      	blx	r4
1000fa22:	682b      	ldr	r3, [r5, #0]
1000fa24:	3301      	adds	r3, #1
1000fa26:	602b      	str	r3, [r5, #0]
1000fa28:	2300      	movs	r3, #0
1000fa2a:	1c18      	adds	r0, r3, #0
1000fa2c:	2385      	movs	r3, #133	; 0x85
1000fa2e:	009b      	lsls	r3, r3, #2
1000fa30:	449d      	add	sp, r3
1000fa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa34:	10019e60 	.word	0x10019e60
1000fa38:	fffffdec 	.word	0xfffffdec
1000fa3c:	1000f141 	.word	0x1000f141
1000fa40:	10011695 	.word	0x10011695
1000fa44:	10011199 	.word	0x10011199

1000fa48 <init_l2cc_task_module>:
1000fa48:	220a      	movs	r2, #10
1000fa4a:	4b01      	ldr	r3, [pc, #4]	; (1000fa50 <init_l2cc_task_module+0x8>)
1000fa4c:	701a      	strb	r2, [r3, #0]
1000fa4e:	4770      	bx	lr
1000fa50:	10018334 	.word	0x10018334

1000fa54 <l2cc_data_send_rsp_handler>:
1000fa54:	b510      	push	{r4, lr}
1000fa56:	7802      	ldrb	r2, [r0, #0]
1000fa58:	700a      	strb	r2, [r1, #0]
1000fa5a:	7883      	ldrb	r3, [r0, #2]
1000fa5c:	7844      	ldrb	r4, [r0, #1]
1000fa5e:	021b      	lsls	r3, r3, #8
1000fa60:	4323      	orrs	r3, r4
1000fa62:	804b      	strh	r3, [r1, #2]
1000fa64:	7903      	ldrb	r3, [r0, #4]
1000fa66:	78c0      	ldrb	r0, [r0, #3]
1000fa68:	021b      	lsls	r3, r3, #8
1000fa6a:	4303      	orrs	r3, r0
1000fa6c:	808b      	strh	r3, [r1, #4]
1000fa6e:	2a00      	cmp	r2, #0
1000fa70:	d103      	bne.n	1000fa7a <l2cc_data_send_rsp_handler+0x26>
1000fa72:	4a02      	ldr	r2, [pc, #8]	; (1000fa7c <l2cc_data_send_rsp_handler+0x28>)
1000fa74:	7813      	ldrb	r3, [r2, #0]
1000fa76:	3301      	adds	r3, #1
1000fa78:	7013      	strb	r3, [r2, #0]
1000fa7a:	bd10      	pop	{r4, pc}
1000fa7c:	10018334 	.word	0x10018334

1000fa80 <l2cc_data_received_handler>:
1000fa80:	b508      	push	{r3, lr}
1000fa82:	1c03      	adds	r3, r0, #0
1000fa84:	7842      	ldrb	r2, [r0, #1]
1000fa86:	7800      	ldrb	r0, [r0, #0]
1000fa88:	0212      	lsls	r2, r2, #8
1000fa8a:	4302      	orrs	r2, r0
1000fa8c:	800a      	strh	r2, [r1, #0]
1000fa8e:	78da      	ldrb	r2, [r3, #3]
1000fa90:	7898      	ldrb	r0, [r3, #2]
1000fa92:	0212      	lsls	r2, r2, #8
1000fa94:	4302      	orrs	r2, r0
1000fa96:	804a      	strh	r2, [r1, #2]
1000fa98:	795a      	ldrb	r2, [r3, #5]
1000fa9a:	7918      	ldrb	r0, [r3, #4]
1000fa9c:	0212      	lsls	r2, r2, #8
1000fa9e:	4302      	orrs	r2, r0
1000faa0:	808a      	strh	r2, [r1, #4]
1000faa2:	1d88      	adds	r0, r1, #6
1000faa4:	1d99      	adds	r1, r3, #6
1000faa6:	4b01      	ldr	r3, [pc, #4]	; (1000faac <l2cc_data_received_handler+0x2c>)
1000faa8:	4798      	blx	r3
1000faaa:	bd08      	pop	{r3, pc}
1000faac:	100156bf 	.word	0x100156bf

1000fab0 <at_ble_authenticate>:
1000fab0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fab2:	1c0c      	adds	r4, r1, #0
1000fab4:	211f      	movs	r1, #31
1000fab6:	b08b      	sub	sp, #44	; 0x2c
1000fab8:	9307      	str	r3, [sp, #28]
1000faba:	ab02      	add	r3, sp, #8
1000fabc:	18c9      	adds	r1, r1, r3
1000fabe:	230f      	movs	r3, #15
1000fac0:	700b      	strb	r3, [r1, #0]
1000fac2:	4b40      	ldr	r3, [pc, #256]	; (1000fbc4 <at_ble_authenticate+0x114>)
1000fac4:	1c05      	adds	r5, r0, #0
1000fac6:	1c16      	adds	r6, r2, #0
1000fac8:	4798      	blx	r3
1000faca:	1c07      	adds	r7, r0, #0
1000facc:	2001      	movs	r0, #1
1000face:	2f07      	cmp	r7, #7
1000fad0:	d875      	bhi.n	1000fbbe <at_ble_authenticate+0x10e>
1000fad2:	2c00      	cmp	r4, #0
1000fad4:	d113      	bne.n	1000fafe <at_ble_authenticate+0x4e>
1000fad6:	2312      	movs	r3, #18
1000fad8:	435f      	muls	r7, r3
1000fada:	4b3b      	ldr	r3, [pc, #236]	; (1000fbc8 <at_ble_authenticate+0x118>)
1000fadc:	5cfb      	ldrb	r3, [r7, r3]
1000fade:	4283      	cmp	r3, r0
1000fae0:	d001      	beq.n	1000fae6 <at_ble_authenticate+0x36>
1000fae2:	20cf      	movs	r0, #207	; 0xcf
1000fae4:	e06b      	b.n	1000fbbe <at_ble_authenticate+0x10e>
1000fae6:	9504      	str	r5, [sp, #16]
1000fae8:	9400      	str	r4, [sp, #0]
1000faea:	9401      	str	r4, [sp, #4]
1000faec:	9402      	str	r4, [sp, #8]
1000faee:	9403      	str	r4, [sp, #12]
1000faf0:	1c20      	adds	r0, r4, #0
1000faf2:	1c21      	adds	r1, r4, #0
1000faf4:	1c22      	adds	r2, r4, #0
1000faf6:	1c23      	adds	r3, r4, #0
1000faf8:	4d34      	ldr	r5, [pc, #208]	; (1000fbcc <at_ble_authenticate+0x11c>)
1000fafa:	47a8      	blx	r5
1000fafc:	e05e      	b.n	1000fbbc <at_ble_authenticate+0x10c>
1000fafe:	7922      	ldrb	r2, [r4, #4]
1000fb00:	2a06      	cmp	r2, #6
1000fb02:	d9ee      	bls.n	1000fae2 <at_ble_authenticate+0x32>
1000fb04:	7963      	ldrb	r3, [r4, #5]
1000fb06:	2b10      	cmp	r3, #16
1000fb08:	d8eb      	bhi.n	1000fae2 <at_ble_authenticate+0x32>
1000fb0a:	429a      	cmp	r2, r3
1000fb0c:	d8e9      	bhi.n	1000fae2 <at_ble_authenticate+0x32>
1000fb0e:	7a23      	ldrb	r3, [r4, #8]
1000fb10:	2b04      	cmp	r3, #4
1000fb12:	d8e6      	bhi.n	1000fae2 <at_ble_authenticate+0x32>
1000fb14:	79a3      	ldrb	r3, [r4, #6]
1000fb16:	2b07      	cmp	r3, #7
1000fb18:	d8e3      	bhi.n	1000fae2 <at_ble_authenticate+0x32>
1000fb1a:	79e3      	ldrb	r3, [r4, #7]
1000fb1c:	2b07      	cmp	r3, #7
1000fb1e:	d8e0      	bhi.n	1000fae2 <at_ble_authenticate+0x32>
1000fb20:	78a3      	ldrb	r3, [r4, #2]
1000fb22:	2b00      	cmp	r3, #0
1000fb24:	d006      	beq.n	1000fb34 <at_ble_authenticate+0x84>
1000fb26:	2e00      	cmp	r6, #0
1000fb28:	d0db      	beq.n	1000fae2 <at_ble_authenticate+0x32>
1000fb2a:	4829      	ldr	r0, [pc, #164]	; (1000fbd0 <at_ble_authenticate+0x120>)
1000fb2c:	1c31      	adds	r1, r6, #0
1000fb2e:	221c      	movs	r2, #28
1000fb30:	4b28      	ldr	r3, [pc, #160]	; (1000fbd4 <at_ble_authenticate+0x124>)
1000fb32:	4798      	blx	r3
1000fb34:	9b07      	ldr	r3, [sp, #28]
1000fb36:	2b00      	cmp	r3, #0
1000fb38:	d005      	beq.n	1000fb46 <at_ble_authenticate+0x96>
1000fb3a:	4827      	ldr	r0, [pc, #156]	; (1000fbd8 <at_ble_authenticate+0x128>)
1000fb3c:	1c19      	adds	r1, r3, #0
1000fb3e:	309a      	adds	r0, #154	; 0x9a
1000fb40:	2210      	movs	r2, #16
1000fb42:	4b24      	ldr	r3, [pc, #144]	; (1000fbd4 <at_ble_authenticate+0x124>)
1000fb44:	4798      	blx	r3
1000fb46:	7863      	ldrb	r3, [r4, #1]
1000fb48:	78a2      	ldrb	r2, [r4, #2]
1000fb4a:	009b      	lsls	r3, r3, #2
1000fb4c:	4313      	orrs	r3, r2
1000fb4e:	2212      	movs	r2, #18
1000fb50:	4357      	muls	r7, r2
1000fb52:	4a1d      	ldr	r2, [pc, #116]	; (1000fbc8 <at_ble_authenticate+0x118>)
1000fb54:	b2db      	uxtb	r3, r3
1000fb56:	5cba      	ldrb	r2, [r7, r2]
1000fb58:	2a00      	cmp	r2, #0
1000fb5a:	d116      	bne.n	1000fb8a <at_ble_authenticate+0xda>
1000fb5c:	79a0      	ldrb	r0, [r4, #6]
1000fb5e:	0742      	lsls	r2, r0, #29
1000fb60:	d502      	bpl.n	1000fb68 <at_ble_authenticate+0xb8>
1000fb62:	9a07      	ldr	r2, [sp, #28]
1000fb64:	2a00      	cmp	r2, #0
1000fb66:	d0bc      	beq.n	1000fae2 <at_ble_authenticate+0x32>
1000fb68:	07c2      	lsls	r2, r0, #31
1000fb6a:	d501      	bpl.n	1000fb70 <at_ble_authenticate+0xc0>
1000fb6c:	2e00      	cmp	r6, #0
1000fb6e:	d0b8      	beq.n	1000fae2 <at_ble_authenticate+0x32>
1000fb70:	7966      	ldrb	r6, [r4, #5]
1000fb72:	7821      	ldrb	r1, [r4, #0]
1000fb74:	78e2      	ldrb	r2, [r4, #3]
1000fb76:	9600      	str	r6, [sp, #0]
1000fb78:	9001      	str	r0, [sp, #4]
1000fb7a:	79e0      	ldrb	r0, [r4, #7]
1000fb7c:	9002      	str	r0, [sp, #8]
1000fb7e:	7a20      	ldrb	r0, [r4, #8]
1000fb80:	4c16      	ldr	r4, [pc, #88]	; (1000fbdc <at_ble_authenticate+0x12c>)
1000fb82:	9003      	str	r0, [sp, #12]
1000fb84:	1c28      	adds	r0, r5, #0
1000fb86:	47a0      	blx	r4
1000fb88:	e018      	b.n	1000fbbc <at_ble_authenticate+0x10c>
1000fb8a:	2a01      	cmp	r2, #1
1000fb8c:	d1a9      	bne.n	1000fae2 <at_ble_authenticate+0x32>
1000fb8e:	79e0      	ldrb	r0, [r4, #7]
1000fb90:	0742      	lsls	r2, r0, #29
1000fb92:	d502      	bpl.n	1000fb9a <at_ble_authenticate+0xea>
1000fb94:	9a07      	ldr	r2, [sp, #28]
1000fb96:	2a00      	cmp	r2, #0
1000fb98:	d0a3      	beq.n	1000fae2 <at_ble_authenticate+0x32>
1000fb9a:	07c2      	lsls	r2, r0, #31
1000fb9c:	d501      	bpl.n	1000fba2 <at_ble_authenticate+0xf2>
1000fb9e:	2e00      	cmp	r6, #0
1000fba0:	d09f      	beq.n	1000fae2 <at_ble_authenticate+0x32>
1000fba2:	7966      	ldrb	r6, [r4, #5]
1000fba4:	7821      	ldrb	r1, [r4, #0]
1000fba6:	78e2      	ldrb	r2, [r4, #3]
1000fba8:	9600      	str	r6, [sp, #0]
1000fbaa:	79a6      	ldrb	r6, [r4, #6]
1000fbac:	9002      	str	r0, [sp, #8]
1000fbae:	9601      	str	r6, [sp, #4]
1000fbb0:	7a20      	ldrb	r0, [r4, #8]
1000fbb2:	9504      	str	r5, [sp, #16]
1000fbb4:	9003      	str	r0, [sp, #12]
1000fbb6:	4c05      	ldr	r4, [pc, #20]	; (1000fbcc <at_ble_authenticate+0x11c>)
1000fbb8:	2001      	movs	r0, #1
1000fbba:	47a0      	blx	r4
1000fbbc:	2000      	movs	r0, #0
1000fbbe:	b00b      	add	sp, #44	; 0x2c
1000fbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fbc2:	46c0      	nop			; (mov r8, r8)
1000fbc4:	1000ffb1 	.word	0x1000ffb1
1000fbc8:	1001ad22 	.word	0x1001ad22
1000fbcc:	10010521 	.word	0x10010521
1000fbd0:	1001ae30 	.word	0x1001ae30
1000fbd4:	100156bf 	.word	0x100156bf
1000fbd8:	1001adb2 	.word	0x1001adb2
1000fbdc:	10010301 	.word	0x10010301

1000fbe0 <at_ble_pair_key_reply>:
1000fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbe2:	b085      	sub	sp, #20
1000fbe4:	1c05      	adds	r5, r0, #0
1000fbe6:	1c0c      	adds	r4, r1, #0
1000fbe8:	1c16      	adds	r6, r2, #0
1000fbea:	2100      	movs	r1, #0
1000fbec:	4668      	mov	r0, sp
1000fbee:	2210      	movs	r2, #16
1000fbf0:	4b18      	ldr	r3, [pc, #96]	; (1000fc54 <at_ble_pair_key_reply+0x74>)
1000fbf2:	4798      	blx	r3
1000fbf4:	2101      	movs	r1, #1
1000fbf6:	2e00      	cmp	r6, #0
1000fbf8:	d101      	bne.n	1000fbfe <at_ble_pair_key_reply+0x1e>
1000fbfa:	1c31      	adds	r1, r6, #0
1000fbfc:	466e      	mov	r6, sp
1000fbfe:	2c00      	cmp	r4, #0
1000fc00:	d116      	bne.n	1000fc30 <at_ble_pair_key_reply+0x50>
1000fc02:	2701      	movs	r7, #1
1000fc04:	1c23      	adds	r3, r4, #0
1000fc06:	1d70      	adds	r0, r6, #5
1000fc08:	3e01      	subs	r6, #1
1000fc0a:	7802      	ldrb	r2, [r0, #0]
1000fc0c:	3801      	subs	r0, #1
1000fc0e:	3a30      	subs	r2, #48	; 0x30
1000fc10:	437a      	muls	r2, r7
1000fc12:	189b      	adds	r3, r3, r2
1000fc14:	220a      	movs	r2, #10
1000fc16:	4357      	muls	r7, r2
1000fc18:	42b0      	cmp	r0, r6
1000fc1a:	d1f6      	bne.n	1000fc0a <at_ble_pair_key_reply+0x2a>
1000fc1c:	466a      	mov	r2, sp
1000fc1e:	4668      	mov	r0, sp
1000fc20:	7013      	strb	r3, [r2, #0]
1000fc22:	0a1a      	lsrs	r2, r3, #8
1000fc24:	7042      	strb	r2, [r0, #1]
1000fc26:	0c1a      	lsrs	r2, r3, #16
1000fc28:	0e1b      	lsrs	r3, r3, #24
1000fc2a:	7082      	strb	r2, [r0, #2]
1000fc2c:	70c3      	strb	r3, [r0, #3]
1000fc2e:	e009      	b.n	1000fc44 <at_ble_pair_key_reply+0x64>
1000fc30:	20cf      	movs	r0, #207	; 0xcf
1000fc32:	2c01      	cmp	r4, #1
1000fc34:	d10c      	bne.n	1000fc50 <at_ble_pair_key_reply+0x70>
1000fc36:	2300      	movs	r3, #0
1000fc38:	4668      	mov	r0, sp
1000fc3a:	5cf2      	ldrb	r2, [r6, r3]
1000fc3c:	54c2      	strb	r2, [r0, r3]
1000fc3e:	3301      	adds	r3, #1
1000fc40:	2b10      	cmp	r3, #16
1000fc42:	d1f9      	bne.n	1000fc38 <at_ble_pair_key_reply+0x58>
1000fc44:	2004      	movs	r0, #4
1000fc46:	466a      	mov	r2, sp
1000fc48:	1c2b      	adds	r3, r5, #0
1000fc4a:	4c03      	ldr	r4, [pc, #12]	; (1000fc58 <at_ble_pair_key_reply+0x78>)
1000fc4c:	47a0      	blx	r4
1000fc4e:	2000      	movs	r0, #0
1000fc50:	b005      	add	sp, #20
1000fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc54:	100156d1 	.word	0x100156d1
1000fc58:	1001059d 	.word	0x1001059d

1000fc5c <at_ble_send_slave_sec_request>:
1000fc5c:	b570      	push	{r4, r5, r6, lr}
1000fc5e:	4b0c      	ldr	r3, [pc, #48]	; (1000fc90 <at_ble_send_slave_sec_request+0x34>)
1000fc60:	1c0e      	adds	r6, r1, #0
1000fc62:	2100      	movs	r1, #0
1000fc64:	1c05      	adds	r5, r0, #0
1000fc66:	1c14      	adds	r4, r2, #0
1000fc68:	4798      	blx	r3
1000fc6a:	2301      	movs	r3, #1
1000fc6c:	2807      	cmp	r0, #7
1000fc6e:	d80d      	bhi.n	1000fc8c <at_ble_send_slave_sec_request+0x30>
1000fc70:	3311      	adds	r3, #17
1000fc72:	4358      	muls	r0, r3
1000fc74:	4b07      	ldr	r3, [pc, #28]	; (1000fc94 <at_ble_send_slave_sec_request+0x38>)
1000fc76:	5cc2      	ldrb	r2, [r0, r3]
1000fc78:	23e0      	movs	r3, #224	; 0xe0
1000fc7a:	2a01      	cmp	r2, #1
1000fc7c:	d106      	bne.n	1000fc8c <at_ble_send_slave_sec_request+0x30>
1000fc7e:	00b1      	lsls	r1, r6, #2
1000fc80:	430c      	orrs	r4, r1
1000fc82:	4b05      	ldr	r3, [pc, #20]	; (1000fc98 <at_ble_send_slave_sec_request+0x3c>)
1000fc84:	b2e1      	uxtb	r1, r4
1000fc86:	1c28      	adds	r0, r5, #0
1000fc88:	4798      	blx	r3
1000fc8a:	2300      	movs	r3, #0
1000fc8c:	1c18      	adds	r0, r3, #0
1000fc8e:	bd70      	pop	{r4, r5, r6, pc}
1000fc90:	1000ffb1 	.word	0x1000ffb1
1000fc94:	1001ad22 	.word	0x1001ad22
1000fc98:	100105ed 	.word	0x100105ed

1000fc9c <at_ble_encryption_start>:
1000fc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fc9e:	23cf      	movs	r3, #207	; 0xcf
1000fca0:	2900      	cmp	r1, #0
1000fca2:	d02b      	beq.n	1000fcfc <at_ble_encryption_start+0x60>
1000fca4:	2a05      	cmp	r2, #5
1000fca6:	d829      	bhi.n	1000fcfc <at_ble_encryption_start+0x60>
1000fca8:	2701      	movs	r7, #1
1000fcaa:	1c3d      	adds	r5, r7, #0
1000fcac:	2433      	movs	r4, #51	; 0x33
1000fcae:	4095      	lsls	r5, r2
1000fcb0:	4225      	tst	r5, r4
1000fcb2:	d023      	beq.n	1000fcfc <at_ble_encryption_start+0x60>
1000fcb4:	7e8c      	ldrb	r4, [r1, #26]
1000fcb6:	3c07      	subs	r4, #7
1000fcb8:	2c09      	cmp	r4, #9
1000fcba:	d81f      	bhi.n	1000fcfc <at_ble_encryption_start+0x60>
1000fcbc:	4b10      	ldr	r3, [pc, #64]	; (1000fd00 <at_ble_encryption_start+0x64>)
1000fcbe:	1c0c      	adds	r4, r1, #0
1000fcc0:	2100      	movs	r1, #0
1000fcc2:	1c15      	adds	r5, r2, #0
1000fcc4:	1c06      	adds	r6, r0, #0
1000fcc6:	4798      	blx	r3
1000fcc8:	1c3b      	adds	r3, r7, #0
1000fcca:	2807      	cmp	r0, #7
1000fccc:	d816      	bhi.n	1000fcfc <at_ble_encryption_start+0x60>
1000fcce:	2312      	movs	r3, #18
1000fcd0:	4358      	muls	r0, r3
1000fcd2:	4b0c      	ldr	r3, [pc, #48]	; (1000fd04 <at_ble_encryption_start+0x68>)
1000fcd4:	5cc7      	ldrb	r7, [r0, r3]
1000fcd6:	23e0      	movs	r3, #224	; 0xe0
1000fcd8:	2f00      	cmp	r7, #0
1000fcda:	d10f      	bne.n	1000fcfc <at_ble_encryption_start+0x60>
1000fcdc:	1c21      	adds	r1, r4, #0
1000fcde:	221c      	movs	r2, #28
1000fce0:	4b09      	ldr	r3, [pc, #36]	; (1000fd08 <at_ble_encryption_start+0x6c>)
1000fce2:	480a      	ldr	r0, [pc, #40]	; (1000fd0c <at_ble_encryption_start+0x70>)
1000fce4:	4798      	blx	r3
1000fce6:	1c23      	adds	r3, r4, #0
1000fce8:	7ea1      	ldrb	r1, [r4, #26]
1000fcea:	8a22      	ldrh	r2, [r4, #16]
1000fcec:	3312      	adds	r3, #18
1000fcee:	9100      	str	r1, [sp, #0]
1000fcf0:	9501      	str	r5, [sp, #4]
1000fcf2:	1c21      	adds	r1, r4, #0
1000fcf4:	1c30      	adds	r0, r6, #0
1000fcf6:	4c06      	ldr	r4, [pc, #24]	; (1000fd10 <at_ble_encryption_start+0x74>)
1000fcf8:	47a0      	blx	r4
1000fcfa:	1c3b      	adds	r3, r7, #0
1000fcfc:	1c18      	adds	r0, r3, #0
1000fcfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fd00:	1000ffb1 	.word	0x1000ffb1
1000fd04:	1001ad22 	.word	0x1001ad22
1000fd08:	100156bf 	.word	0x100156bf
1000fd0c:	1001ae30 	.word	0x1001ae30
1000fd10:	1001062d 	.word	0x1001062d

1000fd14 <at_ble_encryption_request_reply>:
1000fd14:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fd16:	24cf      	movs	r4, #207	; 0xcf
1000fd18:	2b00      	cmp	r3, #0
1000fd1a:	d011      	beq.n	1000fd40 <at_ble_encryption_request_reply+0x2c>
1000fd1c:	2a00      	cmp	r2, #0
1000fd1e:	d00a      	beq.n	1000fd36 <at_ble_encryption_request_reply+0x22>
1000fd20:	2905      	cmp	r1, #5
1000fd22:	d80d      	bhi.n	1000fd40 <at_ble_encryption_request_reply+0x2c>
1000fd24:	2501      	movs	r5, #1
1000fd26:	2633      	movs	r6, #51	; 0x33
1000fd28:	408d      	lsls	r5, r1
1000fd2a:	4235      	tst	r5, r6
1000fd2c:	d008      	beq.n	1000fd40 <at_ble_encryption_request_reply+0x2c>
1000fd2e:	7e9d      	ldrb	r5, [r3, #26]
1000fd30:	3d07      	subs	r5, #7
1000fd32:	2d09      	cmp	r5, #9
1000fd34:	d804      	bhi.n	1000fd40 <at_ble_encryption_request_reply+0x2c>
1000fd36:	7e9c      	ldrb	r4, [r3, #26]
1000fd38:	9400      	str	r4, [sp, #0]
1000fd3a:	4c02      	ldr	r4, [pc, #8]	; (1000fd44 <at_ble_encryption_request_reply+0x30>)
1000fd3c:	47a0      	blx	r4
1000fd3e:	2400      	movs	r4, #0
1000fd40:	1c20      	adds	r0, r4, #0
1000fd42:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fd44:	100106e9 	.word	0x100106e9

1000fd48 <rx_callback>:
1000fd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd4a:	8883      	ldrh	r3, [r0, #4]
1000fd4c:	1c01      	adds	r1, r0, #0
1000fd4e:	9301      	str	r3, [sp, #4]
1000fd50:	88c5      	ldrh	r5, [r0, #6]
1000fd52:	8806      	ldrh	r6, [r0, #0]
1000fd54:	2d00      	cmp	r5, #0
1000fd56:	d10f      	bne.n	1000fd78 <rx_callback+0x30>
1000fd58:	1c19      	adds	r1, r3, #0
1000fd5a:	1c30      	adds	r0, r6, #0
1000fd5c:	4b19      	ldr	r3, [pc, #100]	; (1000fdc4 <rx_callback+0x7c>)
1000fd5e:	1c2a      	adds	r2, r5, #0
1000fd60:	4798      	blx	r3
1000fd62:	1e03      	subs	r3, r0, #0
1000fd64:	d105      	bne.n	1000fd72 <rx_callback+0x2a>
1000fd66:	1c30      	adds	r0, r6, #0
1000fd68:	9901      	ldr	r1, [sp, #4]
1000fd6a:	1c1a      	adds	r2, r3, #0
1000fd6c:	4c16      	ldr	r4, [pc, #88]	; (1000fdc8 <rx_callback+0x80>)
1000fd6e:	47a0      	blx	r4
1000fd70:	e027      	b.n	1000fdc2 <rx_callback+0x7a>
1000fd72:	4b16      	ldr	r3, [pc, #88]	; (1000fdcc <rx_callback+0x84>)
1000fd74:	4798      	blx	r3
1000fd76:	e024      	b.n	1000fdc2 <rx_callback+0x7a>
1000fd78:	4c15      	ldr	r4, [pc, #84]	; (1000fdd0 <rx_callback+0x88>)
1000fd7a:	4a16      	ldr	r2, [pc, #88]	; (1000fdd4 <rx_callback+0x8c>)
1000fd7c:	6823      	ldr	r3, [r4, #0]
1000fd7e:	6812      	ldr	r2, [r2, #0]
1000fd80:	18eb      	adds	r3, r5, r3
1000fd82:	4293      	cmp	r3, r2
1000fd84:	d901      	bls.n	1000fd8a <rx_callback+0x42>
1000fd86:	2300      	movs	r3, #0
1000fd88:	6023      	str	r3, [r4, #0]
1000fd8a:	4f13      	ldr	r7, [pc, #76]	; (1000fdd8 <rx_callback+0x90>)
1000fd8c:	6822      	ldr	r2, [r4, #0]
1000fd8e:	683b      	ldr	r3, [r7, #0]
1000fd90:	3108      	adds	r1, #8
1000fd92:	1898      	adds	r0, r3, r2
1000fd94:	1c2a      	adds	r2, r5, #0
1000fd96:	4b11      	ldr	r3, [pc, #68]	; (1000fddc <rx_callback+0x94>)
1000fd98:	4798      	blx	r3
1000fd9a:	683b      	ldr	r3, [r7, #0]
1000fd9c:	6822      	ldr	r2, [r4, #0]
1000fd9e:	1c30      	adds	r0, r6, #0
1000fda0:	189a      	adds	r2, r3, r2
1000fda2:	9901      	ldr	r1, [sp, #4]
1000fda4:	4b07      	ldr	r3, [pc, #28]	; (1000fdc4 <rx_callback+0x7c>)
1000fda6:	4798      	blx	r3
1000fda8:	2800      	cmp	r0, #0
1000fdaa:	d1e2      	bne.n	1000fd72 <rx_callback+0x2a>
1000fdac:	6823      	ldr	r3, [r4, #0]
1000fdae:	683a      	ldr	r2, [r7, #0]
1000fdb0:	1c30      	adds	r0, r6, #0
1000fdb2:	18d2      	adds	r2, r2, r3
1000fdb4:	9901      	ldr	r1, [sp, #4]
1000fdb6:	1c2b      	adds	r3, r5, #0
1000fdb8:	4e03      	ldr	r6, [pc, #12]	; (1000fdc8 <rx_callback+0x80>)
1000fdba:	47b0      	blx	r6
1000fdbc:	6823      	ldr	r3, [r4, #0]
1000fdbe:	18ed      	adds	r5, r5, r3
1000fdc0:	6025      	str	r5, [r4, #0]
1000fdc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fdc4:	1000e3dd 	.word	0x1000e3dd
1000fdc8:	1000e355 	.word	0x1000e355
1000fdcc:	1000ddf1 	.word	0x1000ddf1
1000fdd0:	1001ae8c 	.word	0x1001ae8c
1000fdd4:	10019ddc 	.word	0x10019ddc
1000fdd8:	10019dd8 	.word	0x10019dd8
1000fddc:	100156bf 	.word	0x100156bf

1000fde0 <interface_send>:
1000fde0:	b508      	push	{r3, lr}
1000fde2:	4b02      	ldr	r3, [pc, #8]	; (1000fdec <interface_send+0xc>)
1000fde4:	4798      	blx	r3
1000fde6:	2000      	movs	r0, #0
1000fde8:	bd08      	pop	{r3, pc}
1000fdea:	46c0      	nop			; (mov r8, r8)
1000fdec:	1000dae9 	.word	0x1000dae9

1000fdf0 <interface_init>:
1000fdf0:	2280      	movs	r2, #128	; 0x80
1000fdf2:	b510      	push	{r4, lr}
1000fdf4:	2100      	movs	r1, #0
1000fdf6:	1c04      	adds	r4, r0, #0
1000fdf8:	0092      	lsls	r2, r2, #2
1000fdfa:	4b08      	ldr	r3, [pc, #32]	; (1000fe1c <interface_init+0x2c>)
1000fdfc:	4808      	ldr	r0, [pc, #32]	; (1000fe20 <interface_init+0x30>)
1000fdfe:	4798      	blx	r3
1000fe00:	2200      	movs	r2, #0
1000fe02:	4b08      	ldr	r3, [pc, #32]	; (1000fe24 <interface_init+0x34>)
1000fe04:	601a      	str	r2, [r3, #0]
1000fe06:	4a08      	ldr	r2, [pc, #32]	; (1000fe28 <interface_init+0x38>)
1000fe08:	4b08      	ldr	r3, [pc, #32]	; (1000fe2c <interface_init+0x3c>)
1000fe0a:	601a      	str	r2, [r3, #0]
1000fe0c:	4b08      	ldr	r3, [pc, #32]	; (1000fe30 <interface_init+0x40>)
1000fe0e:	6922      	ldr	r2, [r4, #16]
1000fe10:	601a      	str	r2, [r3, #0]
1000fe12:	6962      	ldr	r2, [r4, #20]
1000fe14:	4b07      	ldr	r3, [pc, #28]	; (1000fe34 <interface_init+0x44>)
1000fe16:	601a      	str	r2, [r3, #0]
1000fe18:	bd10      	pop	{r4, pc}
1000fe1a:	46c0      	nop			; (mov r8, r8)
1000fe1c:	100156d1 	.word	0x100156d1
1000fe20:	1001b090 	.word	0x1001b090
1000fe24:	1001ae8c 	.word	0x1001ae8c
1000fe28:	1001ae90 	.word	0x1001ae90
1000fe2c:	10018338 	.word	0x10018338
1000fe30:	10019dd8 	.word	0x10019dd8
1000fe34:	10019ddc 	.word	0x10019ddc

1000fe38 <platform_cmd_cmpl_signal>:
1000fe38:	2201      	movs	r2, #1
1000fe3a:	4b01      	ldr	r3, [pc, #4]	; (1000fe40 <platform_cmd_cmpl_signal+0x8>)
1000fe3c:	601a      	str	r2, [r3, #0]
1000fe3e:	4770      	bx	lr
1000fe40:	10019de0 	.word	0x10019de0

1000fe44 <platform_cmd_cmpl_wait>:
1000fe44:	b510      	push	{r4, lr}
1000fe46:	1c04      	adds	r4, r0, #0
1000fe48:	4b07      	ldr	r3, [pc, #28]	; (1000fe68 <platform_cmd_cmpl_wait+0x24>)
1000fe4a:	681a      	ldr	r2, [r3, #0]
1000fe4c:	2a01      	cmp	r2, #1
1000fe4e:	d003      	beq.n	1000fe58 <platform_cmd_cmpl_wait+0x14>
1000fe50:	4b06      	ldr	r3, [pc, #24]	; (1000fe6c <platform_cmd_cmpl_wait+0x28>)
1000fe52:	2000      	movs	r0, #0
1000fe54:	4798      	blx	r3
1000fe56:	e7f7      	b.n	1000fe48 <platform_cmd_cmpl_wait+0x4>
1000fe58:	6819      	ldr	r1, [r3, #0]
1000fe5a:	2901      	cmp	r1, #1
1000fe5c:	d102      	bne.n	1000fe64 <platform_cmd_cmpl_wait+0x20>
1000fe5e:	2200      	movs	r2, #0
1000fe60:	601a      	str	r2, [r3, #0]
1000fe62:	e000      	b.n	1000fe66 <platform_cmd_cmpl_wait+0x22>
1000fe64:	7022      	strb	r2, [r4, #0]
1000fe66:	bd10      	pop	{r4, pc}
1000fe68:	10019de0 	.word	0x10019de0
1000fe6c:	1000db79 	.word	0x1000db79

1000fe70 <start_timer>:
1000fe70:	4770      	bx	lr

1000fe72 <stop_timer>:
1000fe72:	4770      	bx	lr

1000fe74 <dbg_le_set_bd_addr_req_handler>:
1000fe74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe76:	466b      	mov	r3, sp
1000fe78:	1dde      	adds	r6, r3, #7
1000fe7a:	2300      	movs	r3, #0
1000fe7c:	7033      	strb	r3, [r6, #0]
1000fe7e:	230f      	movs	r3, #15
1000fe80:	4c13      	ldr	r4, [pc, #76]	; (1000fed0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000fe82:	2703      	movs	r7, #3
1000fe84:	7023      	strb	r3, [r4, #0]
1000fe86:	2300      	movs	r3, #0
1000fe88:	70e3      	strb	r3, [r4, #3]
1000fe8a:	4b12      	ldr	r3, [pc, #72]	; (1000fed4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000fe8c:	1c01      	adds	r1, r0, #0
1000fe8e:	881a      	ldrh	r2, [r3, #0]
1000fe90:	881b      	ldrh	r3, [r3, #0]
1000fe92:	7122      	strb	r2, [r4, #4]
1000fe94:	0a1b      	lsrs	r3, r3, #8
1000fe96:	2206      	movs	r2, #6
1000fe98:	7163      	strb	r3, [r4, #5]
1000fe9a:	480f      	ldr	r0, [pc, #60]	; (1000fed8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000fe9c:	4b0f      	ldr	r3, [pc, #60]	; (1000fedc <dbg_le_set_bd_addr_req_handler+0x68>)
1000fe9e:	7067      	strb	r7, [r4, #1]
1000fea0:	70a7      	strb	r7, [r4, #2]
1000fea2:	4798      	blx	r3
1000fea4:	4d0e      	ldr	r5, [pc, #56]	; (1000fee0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000fea6:	4b0f      	ldr	r3, [pc, #60]	; (1000fee4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000fea8:	210e      	movs	r1, #14
1000feaa:	802b      	strh	r3, [r5, #0]
1000feac:	2306      	movs	r3, #6
1000feae:	71a3      	strb	r3, [r4, #6]
1000feb0:	2300      	movs	r3, #0
1000feb2:	1c20      	adds	r0, r4, #0
1000feb4:	71e3      	strb	r3, [r4, #7]
1000feb6:	4b0c      	ldr	r3, [pc, #48]	; (1000fee8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000feb8:	80af      	strh	r7, [r5, #4]
1000feba:	4798      	blx	r3
1000febc:	1c30      	adds	r0, r6, #0
1000febe:	4b0b      	ldr	r3, [pc, #44]	; (1000feec <dbg_le_set_bd_addr_req_handler+0x78>)
1000fec0:	4798      	blx	r3
1000fec2:	7833      	ldrb	r3, [r6, #0]
1000fec4:	20e2      	movs	r0, #226	; 0xe2
1000fec6:	2b00      	cmp	r3, #0
1000fec8:	d101      	bne.n	1000fece <dbg_le_set_bd_addr_req_handler+0x5a>
1000feca:	68ab      	ldr	r3, [r5, #8]
1000fecc:	7818      	ldrb	r0, [r3, #0]
1000fece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fed0:	1001b090 	.word	0x1001b090
1000fed4:	1001ad20 	.word	0x1001ad20
1000fed8:	1001b098 	.word	0x1001b098
1000fedc:	100156bf 	.word	0x100156bf
1000fee0:	1001ad14 	.word	0x1001ad14
1000fee4:	00000329 	.word	0x00000329
1000fee8:	1000fde1 	.word	0x1000fde1
1000feec:	1000fe45 	.word	0x1000fe45

1000fef0 <gapc_get_dev_info_cfm.constprop.1>:
1000fef0:	b538      	push	{r3, r4, r5, lr}
1000fef2:	230b      	movs	r3, #11
1000fef4:	4c27      	ldr	r4, [pc, #156]	; (1000ff94 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000fef6:	7023      	strb	r3, [r4, #0]
1000fef8:	3303      	adds	r3, #3
1000fefa:	7063      	strb	r3, [r4, #1]
1000fefc:	3329      	adds	r3, #41	; 0x29
1000fefe:	70a3      	strb	r3, [r4, #2]
1000ff00:	4b25      	ldr	r3, [pc, #148]	; (1000ff98 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000ff02:	70e1      	strb	r1, [r4, #3]
1000ff04:	881a      	ldrh	r2, [r3, #0]
1000ff06:	881b      	ldrh	r3, [r3, #0]
1000ff08:	7122      	strb	r2, [r4, #4]
1000ff0a:	0a1b      	lsrs	r3, r3, #8
1000ff0c:	7163      	strb	r3, [r4, #5]
1000ff0e:	2300      	movs	r3, #0
1000ff10:	7220      	strb	r0, [r4, #8]
1000ff12:	7263      	strb	r3, [r4, #9]
1000ff14:	2801      	cmp	r0, #1
1000ff16:	d02b      	beq.n	1000ff70 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000ff18:	4298      	cmp	r0, r3
1000ff1a:	d01b      	beq.n	1000ff54 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000ff1c:	2802      	cmp	r0, #2
1000ff1e:	d12f      	bne.n	1000ff80 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000ff20:	4b1e      	ldr	r3, [pc, #120]	; (1000ff9c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ff22:	2112      	movs	r1, #18
1000ff24:	1c1a      	adds	r2, r3, #0
1000ff26:	32ce      	adds	r2, #206	; 0xce
1000ff28:	8812      	ldrh	r2, [r2, #0]
1000ff2a:	72a2      	strb	r2, [r4, #10]
1000ff2c:	0a12      	lsrs	r2, r2, #8
1000ff2e:	72e2      	strb	r2, [r4, #11]
1000ff30:	1c1a      	adds	r2, r3, #0
1000ff32:	32d0      	adds	r2, #208	; 0xd0
1000ff34:	8812      	ldrh	r2, [r2, #0]
1000ff36:	7322      	strb	r2, [r4, #12]
1000ff38:	0a12      	lsrs	r2, r2, #8
1000ff3a:	7362      	strb	r2, [r4, #13]
1000ff3c:	1c1a      	adds	r2, r3, #0
1000ff3e:	32d2      	adds	r2, #210	; 0xd2
1000ff40:	8812      	ldrh	r2, [r2, #0]
1000ff42:	33d4      	adds	r3, #212	; 0xd4
1000ff44:	73a2      	strb	r2, [r4, #14]
1000ff46:	0a12      	lsrs	r2, r2, #8
1000ff48:	73e2      	strb	r2, [r4, #15]
1000ff4a:	881b      	ldrh	r3, [r3, #0]
1000ff4c:	7423      	strb	r3, [r4, #16]
1000ff4e:	0a1b      	lsrs	r3, r3, #8
1000ff50:	7463      	strb	r3, [r4, #17]
1000ff52:	e016      	b.n	1000ff82 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ff54:	4b11      	ldr	r3, [pc, #68]	; (1000ff9c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ff56:	4912      	ldr	r1, [pc, #72]	; (1000ffa0 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000ff58:	33aa      	adds	r3, #170	; 0xaa
1000ff5a:	881d      	ldrh	r5, [r3, #0]
1000ff5c:	4811      	ldr	r0, [pc, #68]	; (1000ffa4 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000ff5e:	0a2b      	lsrs	r3, r5, #8
1000ff60:	72a5      	strb	r5, [r4, #10]
1000ff62:	72e3      	strb	r3, [r4, #11]
1000ff64:	1c2a      	adds	r2, r5, #0
1000ff66:	4b10      	ldr	r3, [pc, #64]	; (1000ffa8 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000ff68:	350c      	adds	r5, #12
1000ff6a:	4798      	blx	r3
1000ff6c:	b2a9      	uxth	r1, r5
1000ff6e:	e008      	b.n	1000ff82 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ff70:	4b0a      	ldr	r3, [pc, #40]	; (1000ff9c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ff72:	210c      	movs	r1, #12
1000ff74:	33cc      	adds	r3, #204	; 0xcc
1000ff76:	881b      	ldrh	r3, [r3, #0]
1000ff78:	72a3      	strb	r3, [r4, #10]
1000ff7a:	0a1b      	lsrs	r3, r3, #8
1000ff7c:	72e3      	strb	r3, [r4, #11]
1000ff7e:	e000      	b.n	1000ff82 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ff80:	210a      	movs	r1, #10
1000ff82:	1c0b      	adds	r3, r1, #0
1000ff84:	3b08      	subs	r3, #8
1000ff86:	71a3      	strb	r3, [r4, #6]
1000ff88:	121b      	asrs	r3, r3, #8
1000ff8a:	71e3      	strb	r3, [r4, #7]
1000ff8c:	1c20      	adds	r0, r4, #0
1000ff8e:	4b07      	ldr	r3, [pc, #28]	; (1000ffac <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000ff90:	4798      	blx	r3
1000ff92:	bd38      	pop	{r3, r4, r5, pc}
1000ff94:	1001b090 	.word	0x1001b090
1000ff98:	1001ad20 	.word	0x1001ad20
1000ff9c:	1001adb2 	.word	0x1001adb2
1000ffa0:	1001ae5e 	.word	0x1001ae5e
1000ffa4:	1001b09c 	.word	0x1001b09c
1000ffa8:	100156bf 	.word	0x100156bf
1000ffac:	1000fde1 	.word	0x1000fde1

1000ffb0 <check_ConnData_idx_role>:
1000ffb0:	4b0c      	ldr	r3, [pc, #48]	; (1000ffe4 <check_ConnData_idx_role+0x34>)
1000ffb2:	b570      	push	{r4, r5, r6, lr}
1000ffb4:	1c04      	adds	r4, r0, #0
1000ffb6:	2008      	movs	r0, #8
1000ffb8:	429c      	cmp	r4, r3
1000ffba:	d011      	beq.n	1000ffe0 <check_ConnData_idx_role+0x30>
1000ffbc:	2300      	movs	r3, #0
1000ffbe:	2212      	movs	r2, #18
1000ffc0:	435a      	muls	r2, r3
1000ffc2:	4d09      	ldr	r5, [pc, #36]	; (1000ffe8 <check_ConnData_idx_role+0x38>)
1000ffc4:	b2d8      	uxtb	r0, r3
1000ffc6:	1956      	adds	r6, r2, r5
1000ffc8:	8976      	ldrh	r6, [r6, #10]
1000ffca:	42a6      	cmp	r6, r4
1000ffcc:	d104      	bne.n	1000ffd8 <check_ConnData_idx_role+0x28>
1000ffce:	2900      	cmp	r1, #0
1000ffd0:	d006      	beq.n	1000ffe0 <check_ConnData_idx_role+0x30>
1000ffd2:	5d53      	ldrb	r3, [r2, r5]
1000ffd4:	700b      	strb	r3, [r1, #0]
1000ffd6:	e003      	b.n	1000ffe0 <check_ConnData_idx_role+0x30>
1000ffd8:	3301      	adds	r3, #1
1000ffda:	2b08      	cmp	r3, #8
1000ffdc:	d1ef      	bne.n	1000ffbe <check_ConnData_idx_role+0xe>
1000ffde:	1c18      	adds	r0, r3, #0
1000ffe0:	bd70      	pop	{r4, r5, r6, pc}
1000ffe2:	46c0      	nop			; (mov r8, r8)
1000ffe4:	0000ffff 	.word	0x0000ffff
1000ffe8:	1001ad22 	.word	0x1001ad22

1000ffec <check_ConnData_emptyEntry>:
1000ffec:	2300      	movs	r3, #0
1000ffee:	2212      	movs	r2, #18
1000fff0:	435a      	muls	r2, r3
1000fff2:	4906      	ldr	r1, [pc, #24]	; (1001000c <check_ConnData_emptyEntry+0x20>)
1000fff4:	b2d8      	uxtb	r0, r3
1000fff6:	1852      	adds	r2, r2, r1
1000fff8:	8951      	ldrh	r1, [r2, #10]
1000fffa:	4a05      	ldr	r2, [pc, #20]	; (10010010 <check_ConnData_emptyEntry+0x24>)
1000fffc:	4291      	cmp	r1, r2
1000fffe:	d003      	beq.n	10010008 <check_ConnData_emptyEntry+0x1c>
10010000:	3301      	adds	r3, #1
10010002:	2b08      	cmp	r3, #8
10010004:	d1f3      	bne.n	1000ffee <check_ConnData_emptyEntry+0x2>
10010006:	1c18      	adds	r0, r3, #0
10010008:	4770      	bx	lr
1001000a:	46c0      	nop			; (mov r8, r8)
1001000c:	1001ad22 	.word	0x1001ad22
10010010:	0000ffff 	.word	0x0000ffff

10010014 <gapc_cmp_evt>:
10010014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010016:	780b      	ldrb	r3, [r1, #0]
10010018:	1c05      	adds	r5, r0, #0
1001001a:	1e58      	subs	r0, r3, #1
1001001c:	784e      	ldrb	r6, [r1, #1]
1001001e:	280f      	cmp	r0, #15
10010020:	d85a      	bhi.n	100100d8 <gapc_cmp_evt+0xc4>
10010022:	1c14      	adds	r4, r2, #0
10010024:	f002 fcb4 	bl	10012990 <__gnu_thumb1_case_uqi>
10010028:	5858440a 	.word	0x5858440a
1001002c:	4b584444 	.word	0x4b584444
10010030:	0825122d 	.word	0x0825122d
10010034:	3e395858 	.word	0x3e395858
10010038:	203b      	movs	r0, #59	; 0x3b
1001003a:	e04e      	b.n	100100da <gapc_cmp_evt+0xc6>
1001003c:	203b      	movs	r0, #59	; 0x3b
1001003e:	2e00      	cmp	r6, #0
10010040:	d04b      	beq.n	100100da <gapc_cmp_evt+0xc6>
10010042:	0a2d      	lsrs	r5, r5, #8
10010044:	8015      	strh	r5, [r2, #0]
10010046:	7096      	strb	r6, [r2, #2]
10010048:	3835      	subs	r0, #53	; 0x35
1001004a:	e046      	b.n	100100da <gapc_cmp_evt+0xc6>
1001004c:	466b      	mov	r3, sp
1001004e:	1ddf      	adds	r7, r3, #7
10010050:	2301      	movs	r3, #1
10010052:	0a2d      	lsrs	r5, r5, #8
10010054:	703b      	strb	r3, [r7, #0]
10010056:	1c28      	adds	r0, r5, #0
10010058:	1c39      	adds	r1, r7, #0
1001005a:	4b20      	ldr	r3, [pc, #128]	; (100100dc <gapc_cmp_evt+0xc8>)
1001005c:	4798      	blx	r3
1001005e:	2807      	cmp	r0, #7
10010060:	d803      	bhi.n	1001006a <gapc_cmp_evt+0x56>
10010062:	783b      	ldrb	r3, [r7, #0]
10010064:	203b      	movs	r0, #59	; 0x3b
10010066:	2b00      	cmp	r3, #0
10010068:	d037      	beq.n	100100da <gapc_cmp_evt+0xc6>
1001006a:	8065      	strh	r5, [r4, #2]
1001006c:	7126      	strb	r6, [r4, #4]
1001006e:	2009      	movs	r0, #9
10010070:	e033      	b.n	100100da <gapc_cmp_evt+0xc6>
10010072:	203b      	movs	r0, #59	; 0x3b
10010074:	2e00      	cmp	r6, #0
10010076:	d030      	beq.n	100100da <gapc_cmp_evt+0xc6>
10010078:	0a2d      	lsrs	r5, r5, #8
1001007a:	8015      	strh	r5, [r2, #0]
1001007c:	7096      	strb	r6, [r2, #2]
1001007e:	382d      	subs	r0, #45	; 0x2d
10010080:	e02b      	b.n	100100da <gapc_cmp_evt+0xc6>
10010082:	203b      	movs	r0, #59	; 0x3b
10010084:	2e00      	cmp	r6, #0
10010086:	d028      	beq.n	100100da <gapc_cmp_evt+0xc6>
10010088:	2300      	movs	r3, #0
1001008a:	0a2d      	lsrs	r5, r5, #8
1001008c:	8015      	strh	r5, [r2, #0]
1001008e:	7096      	strb	r6, [r2, #2]
10010090:	8093      	strh	r3, [r2, #4]
10010092:	80d3      	strh	r3, [r2, #6]
10010094:	8113      	strh	r3, [r2, #8]
10010096:	3834      	subs	r0, #52	; 0x34
10010098:	e01f      	b.n	100100da <gapc_cmp_evt+0xc6>
1001009a:	203b      	movs	r0, #59	; 0x3b
1001009c:	2e00      	cmp	r6, #0
1001009e:	d01c      	beq.n	100100da <gapc_cmp_evt+0xc6>
100100a0:	7216      	strb	r6, [r2, #8]
100100a2:	e003      	b.n	100100ac <gapc_cmp_evt+0x98>
100100a4:	203b      	movs	r0, #59	; 0x3b
100100a6:	2e00      	cmp	r6, #0
100100a8:	d017      	beq.n	100100da <gapc_cmp_evt+0xc6>
100100aa:	7116      	strb	r6, [r2, #4]
100100ac:	3812      	subs	r0, #18
100100ae:	e014      	b.n	100100da <gapc_cmp_evt+0xc6>
100100b0:	203b      	movs	r0, #59	; 0x3b
100100b2:	2e00      	cmp	r6, #0
100100b4:	d011      	beq.n	100100da <gapc_cmp_evt+0xc6>
100100b6:	7093      	strb	r3, [r2, #2]
100100b8:	70d6      	strb	r6, [r2, #3]
100100ba:	382a      	subs	r0, #42	; 0x2a
100100bc:	e00d      	b.n	100100da <gapc_cmp_evt+0xc6>
100100be:	203b      	movs	r0, #59	; 0x3b
100100c0:	2e00      	cmp	r6, #0
100100c2:	d00a      	beq.n	100100da <gapc_cmp_evt+0xc6>
100100c4:	0a2d      	lsrs	r5, r5, #8
100100c6:	7016      	strb	r6, [r2, #0]
100100c8:	8055      	strh	r5, [r2, #2]
100100ca:	1d10      	adds	r0, r2, #4
100100cc:	2100      	movs	r1, #0
100100ce:	2205      	movs	r2, #5
100100d0:	4b03      	ldr	r3, [pc, #12]	; (100100e0 <gapc_cmp_evt+0xcc>)
100100d2:	4798      	blx	r3
100100d4:	2012      	movs	r0, #18
100100d6:	e000      	b.n	100100da <gapc_cmp_evt+0xc6>
100100d8:	2000      	movs	r0, #0
100100da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100100dc:	1000ffb1 	.word	0x1000ffb1
100100e0:	100156d1 	.word	0x100156d1

100100e4 <gapc_connection_cfm_handler>:
100100e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100100e6:	b085      	sub	sp, #20
100100e8:	1c1d      	adds	r5, r3, #0
100100ea:	ab0a      	add	r3, sp, #40	; 0x28
100100ec:	781b      	ldrb	r3, [r3, #0]
100100ee:	9201      	str	r2, [sp, #4]
100100f0:	9302      	str	r3, [sp, #8]
100100f2:	ab0b      	add	r3, sp, #44	; 0x2c
100100f4:	781b      	ldrb	r3, [r3, #0]
100100f6:	1c07      	adds	r7, r0, #0
100100f8:	9303      	str	r3, [sp, #12]
100100fa:	ab0c      	add	r3, sp, #48	; 0x30
100100fc:	881a      	ldrh	r2, [r3, #0]
100100fe:	2302      	movs	r3, #2
10010100:	1c0e      	adds	r6, r1, #0
10010102:	4c23      	ldr	r4, [pc, #140]	; (10010190 <gapc_connection_cfm_handler+0xac>)
10010104:	1c39      	adds	r1, r7, #0
10010106:	7023      	strb	r3, [r4, #0]
10010108:	330c      	adds	r3, #12
1001010a:	7063      	strb	r3, [r4, #1]
1001010c:	70a3      	strb	r3, [r4, #2]
1001010e:	4b21      	ldr	r3, [pc, #132]	; (10010194 <gapc_connection_cfm_handler+0xb0>)
10010110:	70e2      	strb	r2, [r4, #3]
10010112:	881a      	ldrh	r2, [r3, #0]
10010114:	881b      	ldrh	r3, [r3, #0]
10010116:	7122      	strb	r2, [r4, #4]
10010118:	0a1b      	lsrs	r3, r3, #8
1001011a:	4f1f      	ldr	r7, [pc, #124]	; (10010198 <gapc_connection_cfm_handler+0xb4>)
1001011c:	2210      	movs	r2, #16
1001011e:	481f      	ldr	r0, [pc, #124]	; (1001019c <gapc_connection_cfm_handler+0xb8>)
10010120:	7163      	strb	r3, [r4, #5]
10010122:	47b8      	blx	r7
10010124:	0a33      	lsrs	r3, r6, #8
10010126:	7626      	strb	r6, [r4, #24]
10010128:	7663      	strb	r3, [r4, #25]
1001012a:	9901      	ldr	r1, [sp, #4]
1001012c:	0c33      	lsrs	r3, r6, #16
1001012e:	2210      	movs	r2, #16
10010130:	0e36      	lsrs	r6, r6, #24
10010132:	481b      	ldr	r0, [pc, #108]	; (100101a0 <gapc_connection_cfm_handler+0xbc>)
10010134:	76a3      	strb	r3, [r4, #26]
10010136:	76e6      	strb	r6, [r4, #27]
10010138:	47b8      	blx	r7
1001013a:	1c23      	adds	r3, r4, #0
1001013c:	332c      	adds	r3, #44	; 0x2c
1001013e:	701d      	strb	r5, [r3, #0]
10010140:	1c23      	adds	r3, r4, #0
10010142:	0a2a      	lsrs	r2, r5, #8
10010144:	332d      	adds	r3, #45	; 0x2d
10010146:	701a      	strb	r2, [r3, #0]
10010148:	1c23      	adds	r3, r4, #0
1001014a:	0c2a      	lsrs	r2, r5, #16
1001014c:	332e      	adds	r3, #46	; 0x2e
1001014e:	701a      	strb	r2, [r3, #0]
10010150:	1c23      	adds	r3, r4, #0
10010152:	0e2d      	lsrs	r5, r5, #24
10010154:	332f      	adds	r3, #47	; 0x2f
10010156:	466a      	mov	r2, sp
10010158:	701d      	strb	r5, [r3, #0]
1001015a:	1c23      	adds	r3, r4, #0
1001015c:	7a12      	ldrb	r2, [r2, #8]
1001015e:	3330      	adds	r3, #48	; 0x30
10010160:	701a      	strb	r2, [r3, #0]
10010162:	1c23      	adds	r3, r4, #0
10010164:	2500      	movs	r5, #0
10010166:	3331      	adds	r3, #49	; 0x31
10010168:	466a      	mov	r2, sp
1001016a:	701d      	strb	r5, [r3, #0]
1001016c:	1c23      	adds	r3, r4, #0
1001016e:	7b12      	ldrb	r2, [r2, #12]
10010170:	3332      	adds	r3, #50	; 0x32
10010172:	701a      	strb	r2, [r3, #0]
10010174:	1c23      	adds	r3, r4, #0
10010176:	3333      	adds	r3, #51	; 0x33
10010178:	701d      	strb	r5, [r3, #0]
1001017a:	232c      	movs	r3, #44	; 0x2c
1001017c:	1c20      	adds	r0, r4, #0
1001017e:	71a3      	strb	r3, [r4, #6]
10010180:	2134      	movs	r1, #52	; 0x34
10010182:	4b08      	ldr	r3, [pc, #32]	; (100101a4 <gapc_connection_cfm_handler+0xc0>)
10010184:	71e5      	strb	r5, [r4, #7]
10010186:	4798      	blx	r3
10010188:	1c28      	adds	r0, r5, #0
1001018a:	b005      	add	sp, #20
1001018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001018e:	46c0      	nop			; (mov r8, r8)
10010190:	1001b090 	.word	0x1001b090
10010194:	1001ad20 	.word	0x1001ad20
10010198:	100156bf 	.word	0x100156bf
1001019c:	1001b098 	.word	0x1001b098
100101a0:	1001b0ac 	.word	0x1001b0ac
100101a4:	1000fde1 	.word	0x1000fde1

100101a8 <gapc_con_req_ind>:
100101a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100101aa:	7845      	ldrb	r5, [r0, #1]
100101ac:	7803      	ldrb	r3, [r0, #0]
100101ae:	4c30      	ldr	r4, [pc, #192]	; (10010270 <gapc_con_req_ind+0xc8>)
100101b0:	022d      	lsls	r5, r5, #8
100101b2:	431d      	orrs	r5, r3
100101b4:	85a5      	strh	r5, [r4, #44]	; 0x2c
100101b6:	78c3      	ldrb	r3, [r0, #3]
100101b8:	7882      	ldrb	r2, [r0, #2]
100101ba:	b08b      	sub	sp, #44	; 0x2c
100101bc:	021b      	lsls	r3, r3, #8
100101be:	431a      	orrs	r2, r3
100101c0:	466b      	mov	r3, sp
100101c2:	9205      	str	r2, [sp, #20]
100101c4:	8a9b      	ldrh	r3, [r3, #20]
100101c6:	2120      	movs	r1, #32
100101c8:	85e3      	strh	r3, [r4, #46]	; 0x2e
100101ca:	7943      	ldrb	r3, [r0, #5]
100101cc:	7902      	ldrb	r2, [r0, #4]
100101ce:	021b      	lsls	r3, r3, #8
100101d0:	431a      	orrs	r2, r3
100101d2:	466b      	mov	r3, sp
100101d4:	9206      	str	r2, [sp, #24]
100101d6:	8b1b      	ldrh	r3, [r3, #24]
100101d8:	1c06      	adds	r6, r0, #0
100101da:	8623      	strh	r3, [r4, #48]	; 0x30
100101dc:	79c3      	ldrb	r3, [r0, #7]
100101de:	7982      	ldrb	r2, [r0, #6]
100101e0:	021b      	lsls	r3, r3, #8
100101e2:	431a      	orrs	r2, r3
100101e4:	466b      	mov	r3, sp
100101e6:	9207      	str	r2, [sp, #28]
100101e8:	466a      	mov	r2, sp
100101ea:	8b9b      	ldrh	r3, [r3, #28]
100101ec:	1852      	adds	r2, r2, r1
100101ee:	8663      	strh	r3, [r4, #50]	; 0x32
100101f0:	7a43      	ldrb	r3, [r0, #9]
100101f2:	1c01      	adds	r1, r0, #0
100101f4:	9308      	str	r3, [sp, #32]
100101f6:	1c23      	adds	r3, r4, #0
100101f8:	7812      	ldrb	r2, [r2, #0]
100101fa:	3377      	adds	r3, #119	; 0x77
100101fc:	3478      	adds	r4, #120	; 0x78
100101fe:	701a      	strb	r2, [r3, #0]
10010200:	310a      	adds	r1, #10
10010202:	2206      	movs	r2, #6
10010204:	4b1b      	ldr	r3, [pc, #108]	; (10010274 <gapc_con_req_ind+0xcc>)
10010206:	1c20      	adds	r0, r4, #0
10010208:	4798      	blx	r3
1001020a:	7c33      	ldrb	r3, [r6, #16]
1001020c:	9309      	str	r3, [sp, #36]	; 0x24
1001020e:	4b1a      	ldr	r3, [pc, #104]	; (10010278 <gapc_con_req_ind+0xd0>)
10010210:	4798      	blx	r3
10010212:	4e1a      	ldr	r6, [pc, #104]	; (1001027c <gapc_con_req_ind+0xd4>)
10010214:	1e07      	subs	r7, r0, #0
10010216:	2f07      	cmp	r7, #7
10010218:	d81b      	bhi.n	10010252 <gapc_con_req_ind+0xaa>
1001021a:	2312      	movs	r3, #18
1001021c:	4343      	muls	r3, r0
1001021e:	18f0      	adds	r0, r6, r3
10010220:	8145      	strh	r5, [r0, #10]
10010222:	4669      	mov	r1, sp
10010224:	2524      	movs	r5, #36	; 0x24
10010226:	1949      	adds	r1, r1, r5
10010228:	7809      	ldrb	r1, [r1, #0]
1001022a:	2206      	movs	r2, #6
1001022c:	54f1      	strb	r1, [r6, r3]
1001022e:	2120      	movs	r1, #32
10010230:	466b      	mov	r3, sp
10010232:	185b      	adds	r3, r3, r1
10010234:	781b      	ldrb	r3, [r3, #0]
10010236:	1c21      	adds	r1, r4, #0
10010238:	7043      	strb	r3, [r0, #1]
1001023a:	466b      	mov	r3, sp
1001023c:	8a9b      	ldrh	r3, [r3, #20]
1001023e:	3002      	adds	r0, #2
10010240:	8143      	strh	r3, [r0, #10]
10010242:	466b      	mov	r3, sp
10010244:	8b1b      	ldrh	r3, [r3, #24]
10010246:	8183      	strh	r3, [r0, #12]
10010248:	466b      	mov	r3, sp
1001024a:	8b9b      	ldrh	r3, [r3, #28]
1001024c:	81c3      	strh	r3, [r0, #14]
1001024e:	4b09      	ldr	r3, [pc, #36]	; (10010274 <gapc_con_req_ind+0xcc>)
10010250:	4798      	blx	r3
10010252:	2112      	movs	r1, #18
10010254:	2300      	movs	r3, #0
10010256:	434f      	muls	r7, r1
10010258:	9300      	str	r3, [sp, #0]
1001025a:	9301      	str	r3, [sp, #4]
1001025c:	19f6      	adds	r6, r6, r7
1001025e:	8971      	ldrh	r1, [r6, #10]
10010260:	4a07      	ldr	r2, [pc, #28]	; (10010280 <gapc_con_req_ind+0xd8>)
10010262:	9102      	str	r1, [sp, #8]
10010264:	1c10      	adds	r0, r2, #0
10010266:	1c19      	adds	r1, r3, #0
10010268:	4c06      	ldr	r4, [pc, #24]	; (10010284 <gapc_con_req_ind+0xdc>)
1001026a:	47a0      	blx	r4
1001026c:	b00b      	add	sp, #44	; 0x2c
1001026e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010270:	1001adb2 	.word	0x1001adb2
10010274:	100156bf 	.word	0x100156bf
10010278:	1000ffed 	.word	0x1000ffed
1001027c:	1001ad22 	.word	0x1001ad22
10010280:	10019de4 	.word	0x10019de4
10010284:	100100e5 	.word	0x100100e5

10010288 <gapc_disconnect_cmd_handler>:
10010288:	2204      	movs	r2, #4
1001028a:	b510      	push	{r4, lr}
1001028c:	4b0c      	ldr	r3, [pc, #48]	; (100102c0 <gapc_disconnect_cmd_handler+0x38>)
1001028e:	2400      	movs	r4, #0
10010290:	701a      	strb	r2, [r3, #0]
10010292:	320a      	adds	r2, #10
10010294:	705a      	strb	r2, [r3, #1]
10010296:	709a      	strb	r2, [r3, #2]
10010298:	4a0a      	ldr	r2, [pc, #40]	; (100102c4 <gapc_disconnect_cmd_handler+0x3c>)
1001029a:	70d9      	strb	r1, [r3, #3]
1001029c:	8811      	ldrh	r1, [r2, #0]
1001029e:	8812      	ldrh	r2, [r2, #0]
100102a0:	7119      	strb	r1, [r3, #4]
100102a2:	0a12      	lsrs	r2, r2, #8
100102a4:	715a      	strb	r2, [r3, #5]
100102a6:	2201      	movs	r2, #1
100102a8:	721a      	strb	r2, [r3, #8]
100102aa:	1892      	adds	r2, r2, r2
100102ac:	7258      	strb	r0, [r3, #9]
100102ae:	719a      	strb	r2, [r3, #6]
100102b0:	71dc      	strb	r4, [r3, #7]
100102b2:	1c18      	adds	r0, r3, #0
100102b4:	210a      	movs	r1, #10
100102b6:	4b04      	ldr	r3, [pc, #16]	; (100102c8 <gapc_disconnect_cmd_handler+0x40>)
100102b8:	4798      	blx	r3
100102ba:	1c20      	adds	r0, r4, #0
100102bc:	bd10      	pop	{r4, pc}
100102be:	46c0      	nop			; (mov r8, r8)
100102c0:	1001b090 	.word	0x1001b090
100102c4:	1001ad20 	.word	0x1001ad20
100102c8:	1000fde1 	.word	0x1000fde1

100102cc <gapc_disconnect_ind>:
100102cc:	1c02      	adds	r2, r0, #0
100102ce:	b508      	push	{r3, lr}
100102d0:	7843      	ldrb	r3, [r0, #1]
100102d2:	7800      	ldrb	r0, [r0, #0]
100102d4:	021b      	lsls	r3, r3, #8
100102d6:	4318      	orrs	r0, r3
100102d8:	8008      	strh	r0, [r1, #0]
100102da:	7893      	ldrb	r3, [r2, #2]
100102dc:	708b      	strb	r3, [r1, #2]
100102de:	2100      	movs	r1, #0
100102e0:	4b05      	ldr	r3, [pc, #20]	; (100102f8 <gapc_disconnect_ind+0x2c>)
100102e2:	4798      	blx	r3
100102e4:	2807      	cmp	r0, #7
100102e6:	d806      	bhi.n	100102f6 <gapc_disconnect_ind+0x2a>
100102e8:	2312      	movs	r3, #18
100102ea:	4358      	muls	r0, r3
100102ec:	4b03      	ldr	r3, [pc, #12]	; (100102fc <gapc_disconnect_ind+0x30>)
100102ee:	1818      	adds	r0, r3, r0
100102f0:	2301      	movs	r3, #1
100102f2:	425b      	negs	r3, r3
100102f4:	8143      	strh	r3, [r0, #10]
100102f6:	bd08      	pop	{r3, pc}
100102f8:	1000ffb1 	.word	0x1000ffb1
100102fc:	1001ad22 	.word	0x1001ad22

10010300 <gapc_bond_cmd_handler>:
10010300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010302:	9300      	str	r3, [sp, #0]
10010304:	2312      	movs	r3, #18
10010306:	1c04      	adds	r4, r0, #0
10010308:	a808      	add	r0, sp, #32
1001030a:	7807      	ldrb	r7, [r0, #0]
1001030c:	a809      	add	r0, sp, #36	; 0x24
1001030e:	7806      	ldrb	r6, [r0, #0]
10010310:	a80a      	add	r0, sp, #40	; 0x28
10010312:	7805      	ldrb	r5, [r0, #0]
10010314:	a80b      	add	r0, sp, #44	; 0x2c
10010316:	7800      	ldrb	r0, [r0, #0]
10010318:	9001      	str	r0, [sp, #4]
1001031a:	4810      	ldr	r0, [pc, #64]	; (1001035c <gapc_bond_cmd_handler+0x5c>)
1001031c:	7003      	strb	r3, [r0, #0]
1001031e:	230e      	movs	r3, #14
10010320:	70c4      	strb	r4, [r0, #3]
10010322:	4c0f      	ldr	r4, [pc, #60]	; (10010360 <gapc_bond_cmd_handler+0x60>)
10010324:	7043      	strb	r3, [r0, #1]
10010326:	7083      	strb	r3, [r0, #2]
10010328:	8823      	ldrh	r3, [r4, #0]
1001032a:	8824      	ldrh	r4, [r4, #0]
1001032c:	7103      	strb	r3, [r0, #4]
1001032e:	466b      	mov	r3, sp
10010330:	781b      	ldrb	r3, [r3, #0]
10010332:	0a24      	lsrs	r4, r4, #8
10010334:	72c3      	strb	r3, [r0, #11]
10010336:	466b      	mov	r3, sp
10010338:	791b      	ldrb	r3, [r3, #4]
1001033a:	7144      	strb	r4, [r0, #5]
1001033c:	73c3      	strb	r3, [r0, #15]
1001033e:	2308      	movs	r3, #8
10010340:	7183      	strb	r3, [r0, #6]
10010342:	2300      	movs	r3, #0
10010344:	240a      	movs	r4, #10
10010346:	7241      	strb	r1, [r0, #9]
10010348:	71c3      	strb	r3, [r0, #7]
1001034a:	2110      	movs	r1, #16
1001034c:	4b05      	ldr	r3, [pc, #20]	; (10010364 <gapc_bond_cmd_handler+0x64>)
1001034e:	7307      	strb	r7, [r0, #12]
10010350:	7346      	strb	r6, [r0, #13]
10010352:	7385      	strb	r5, [r0, #14]
10010354:	7204      	strb	r4, [r0, #8]
10010356:	7282      	strb	r2, [r0, #10]
10010358:	4798      	blx	r3
1001035a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001035c:	1001b090 	.word	0x1001b090
10010360:	1001ad20 	.word	0x1001ad20
10010364:	1000fde1 	.word	0x1000fde1

10010368 <gapc_bond_ind>:
10010368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001036a:	780e      	ldrb	r6, [r1, #0]
1001036c:	1c03      	adds	r3, r0, #0
1001036e:	1eb0      	subs	r0, r6, #2
10010370:	2805      	cmp	r0, #5
10010372:	d85d      	bhi.n	10010430 <gapc_bond_ind+0xc8>
10010374:	1c15      	adds	r5, r2, #0
10010376:	1c0c      	adds	r4, r1, #0
10010378:	f002 fb0a 	bl	10012990 <__gnu_thumb1_case_uqi>
1001037c:	2f5a030d 	.word	0x2f5a030d
10010380:	4740      	.short	0x4740
10010382:	2009      	movs	r0, #9
10010384:	2a00      	cmp	r2, #0
10010386:	d054      	beq.n	10010432 <gapc_bond_ind+0xca>
10010388:	0a1b      	lsrs	r3, r3, #8
1001038a:	8053      	strh	r3, [r2, #2]
1001038c:	788b      	ldrb	r3, [r1, #2]
1001038e:	4829      	ldr	r0, [pc, #164]	; (10010434 <gapc_bond_ind+0xcc>)
10010390:	7113      	strb	r3, [r2, #4]
10010392:	2100      	movs	r1, #0
10010394:	e01c      	b.n	100103d0 <gapc_bond_ind+0x68>
10010396:	2009      	movs	r0, #9
10010398:	2a00      	cmp	r2, #0
1001039a:	d04a      	beq.n	10010432 <gapc_bond_ind+0xca>
1001039c:	4c25      	ldr	r4, [pc, #148]	; (10010434 <gapc_bond_ind+0xcc>)
1001039e:	0a1b      	lsrs	r3, r3, #8
100103a0:	8053      	strh	r3, [r2, #2]
100103a2:	788b      	ldrb	r3, [r1, #2]
100103a4:	2700      	movs	r7, #0
100103a6:	1c10      	adds	r0, r2, #0
100103a8:	1c21      	adds	r1, r4, #0
100103aa:	7013      	strb	r3, [r2, #0]
100103ac:	4e22      	ldr	r6, [pc, #136]	; (10010438 <gapc_bond_ind+0xd0>)
100103ae:	7117      	strb	r7, [r2, #4]
100103b0:	312e      	adds	r1, #46	; 0x2e
100103b2:	2217      	movs	r2, #23
100103b4:	3032      	adds	r0, #50	; 0x32
100103b6:	47b0      	blx	r6
100103b8:	1c28      	adds	r0, r5, #0
100103ba:	1c21      	adds	r1, r4, #0
100103bc:	2210      	movs	r2, #16
100103be:	311e      	adds	r1, #30
100103c0:	3022      	adds	r0, #34	; 0x22
100103c2:	47b0      	blx	r6
100103c4:	1ca1      	adds	r1, r4, #2
100103c6:	1da8      	adds	r0, r5, #6
100103c8:	221c      	movs	r2, #28
100103ca:	47b0      	blx	r6
100103cc:	1c20      	adds	r0, r4, #0
100103ce:	1c39      	adds	r1, r7, #0
100103d0:	2246      	movs	r2, #70	; 0x46
100103d2:	4b1a      	ldr	r3, [pc, #104]	; (1001043c <gapc_bond_ind+0xd4>)
100103d4:	4798      	blx	r3
100103d6:	2009      	movs	r0, #9
100103d8:	e02b      	b.n	10010432 <gapc_bond_ind+0xca>
100103da:	4d16      	ldr	r5, [pc, #88]	; (10010434 <gapc_bond_ind+0xcc>)
100103dc:	3102      	adds	r1, #2
100103de:	1c28      	adds	r0, r5, #0
100103e0:	2210      	movs	r2, #16
100103e2:	4e15      	ldr	r6, [pc, #84]	; (10010438 <gapc_bond_ind+0xd0>)
100103e4:	302e      	adds	r0, #46	; 0x2e
100103e6:	47b0      	blx	r6
100103e8:	1c28      	adds	r0, r5, #0
100103ea:	1c21      	adds	r1, r4, #0
100103ec:	303f      	adds	r0, #63	; 0x3f
100103ee:	3112      	adds	r1, #18
100103f0:	2206      	movs	r2, #6
100103f2:	47b0      	blx	r6
100103f4:	7e23      	ldrb	r3, [r4, #24]
100103f6:	353e      	adds	r5, #62	; 0x3e
100103f8:	702b      	strb	r3, [r5, #0]
100103fa:	e019      	b.n	10010430 <gapc_bond_ind+0xc8>
100103fc:	480d      	ldr	r0, [pc, #52]	; (10010434 <gapc_bond_ind+0xcc>)
100103fe:	3102      	adds	r1, #2
10010400:	2210      	movs	r2, #16
10010402:	4b0d      	ldr	r3, [pc, #52]	; (10010438 <gapc_bond_ind+0xd0>)
10010404:	301e      	adds	r0, #30
10010406:	4798      	blx	r3
10010408:	e012      	b.n	10010430 <gapc_bond_ind+0xc8>
1001040a:	4d0a      	ldr	r5, [pc, #40]	; (10010434 <gapc_bond_ind+0xcc>)
1001040c:	3102      	adds	r1, #2
1001040e:	2210      	movs	r2, #16
10010410:	4e09      	ldr	r6, [pc, #36]	; (10010438 <gapc_bond_ind+0xd0>)
10010412:	1ca8      	adds	r0, r5, #2
10010414:	47b0      	blx	r6
10010416:	1c28      	adds	r0, r5, #0
10010418:	1c21      	adds	r1, r4, #0
1001041a:	7ce3      	ldrb	r3, [r4, #19]
1001041c:	7ca2      	ldrb	r2, [r4, #18]
1001041e:	021b      	lsls	r3, r3, #8
10010420:	4313      	orrs	r3, r2
10010422:	3014      	adds	r0, #20
10010424:	3114      	adds	r1, #20
10010426:	2208      	movs	r2, #8
10010428:	826b      	strh	r3, [r5, #18]
1001042a:	47b0      	blx	r6
1001042c:	7f23      	ldrb	r3, [r4, #28]
1001042e:	772b      	strb	r3, [r5, #28]
10010430:	2000      	movs	r0, #0
10010432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010434:	10019e14 	.word	0x10019e14
10010438:	100156bf 	.word	0x100156bf
1001043c:	100156d1 	.word	0x100156d1

10010440 <gapc_bond_req_ind>:
10010440:	b570      	push	{r4, r5, r6, lr}
10010442:	780c      	ldrb	r4, [r1, #0]
10010444:	1c03      	adds	r3, r0, #0
10010446:	7849      	ldrb	r1, [r1, #1]
10010448:	2c07      	cmp	r4, #7
1001044a:	d85c      	bhi.n	10010506 <gapc_bond_req_ind+0xc6>
1001044c:	1c20      	adds	r0, r4, #0
1001044e:	f002 fa9f 	bl	10012990 <__gnu_thumb1_case_uqi>
10010452:	5a04      	.short	0x5a04
10010454:	5a0b5a5a 	.word	0x5a0b5a5a
10010458:	1f1f      	.short	0x1f1f
1001045a:	200a      	movs	r0, #10
1001045c:	2a00      	cmp	r2, #0
1001045e:	d053      	beq.n	10010508 <gapc_bond_req_ind+0xc8>
10010460:	0a1b      	lsrs	r3, r3, #8
10010462:	8013      	strh	r3, [r2, #0]
10010464:	7091      	strb	r1, [r2, #2]
10010466:	e04f      	b.n	10010508 <gapc_bond_req_ind+0xc8>
10010468:	2a00      	cmp	r2, #0
1001046a:	d00b      	beq.n	10010484 <gapc_bond_req_ind+0x44>
1001046c:	0a1b      	lsrs	r3, r3, #8
1001046e:	8013      	strh	r3, [r2, #0]
10010470:	2900      	cmp	r1, #0
10010472:	d102      	bne.n	1001047a <gapc_bond_req_ind+0x3a>
10010474:	2301      	movs	r3, #1
10010476:	7093      	strb	r3, [r2, #2]
10010478:	e004      	b.n	10010484 <gapc_bond_req_ind+0x44>
1001047a:	2300      	movs	r3, #0
1001047c:	7093      	strb	r3, [r2, #2]
1001047e:	2902      	cmp	r1, #2
10010480:	d102      	bne.n	10010488 <gapc_bond_req_ind+0x48>
10010482:	70d3      	strb	r3, [r2, #3]
10010484:	200c      	movs	r0, #12
10010486:	e03f      	b.n	10010508 <gapc_bond_req_ind+0xc8>
10010488:	2901      	cmp	r1, #1
1001048a:	d1fb      	bne.n	10010484 <gapc_bond_req_ind+0x44>
1001048c:	70d1      	strb	r1, [r2, #3]
1001048e:	e7f9      	b.n	10010484 <gapc_bond_req_ind+0x44>
10010490:	2214      	movs	r2, #20
10010492:	481e      	ldr	r0, [pc, #120]	; (1001050c <gapc_bond_req_ind+0xcc>)
10010494:	0a1b      	lsrs	r3, r3, #8
10010496:	70c3      	strb	r3, [r0, #3]
10010498:	4b1d      	ldr	r3, [pc, #116]	; (10010510 <gapc_bond_req_ind+0xd0>)
1001049a:	7002      	strb	r2, [r0, #0]
1001049c:	3a06      	subs	r2, #6
1001049e:	7042      	strb	r2, [r0, #1]
100104a0:	7082      	strb	r2, [r0, #2]
100104a2:	881a      	ldrh	r2, [r3, #0]
100104a4:	881b      	ldrh	r3, [r3, #0]
100104a6:	4e1b      	ldr	r6, [pc, #108]	; (10010514 <gapc_bond_req_ind+0xd4>)
100104a8:	0a1b      	lsrs	r3, r3, #8
100104aa:	7143      	strb	r3, [r0, #5]
100104ac:	2301      	movs	r3, #1
100104ae:	7102      	strb	r2, [r0, #4]
100104b0:	7204      	strb	r4, [r0, #8]
100104b2:	7243      	strb	r3, [r0, #9]
100104b4:	1c05      	adds	r5, r0, #0
100104b6:	1c31      	adds	r1, r6, #0
100104b8:	300a      	adds	r0, #10
100104ba:	2c07      	cmp	r4, #7
100104bc:	d116      	bne.n	100104ec <gapc_bond_req_ind+0xac>
100104be:	317e      	adds	r1, #126	; 0x7e
100104c0:	2210      	movs	r2, #16
100104c2:	4c15      	ldr	r4, [pc, #84]	; (10010518 <gapc_bond_req_ind+0xd8>)
100104c4:	47a0      	blx	r4
100104c6:	1c33      	adds	r3, r6, #0
100104c8:	1c31      	adds	r1, r6, #0
100104ca:	1c28      	adds	r0, r5, #0
100104cc:	338e      	adds	r3, #142	; 0x8e
100104ce:	881b      	ldrh	r3, [r3, #0]
100104d0:	3190      	adds	r1, #144	; 0x90
100104d2:	76ab      	strb	r3, [r5, #26]
100104d4:	2208      	movs	r2, #8
100104d6:	0a1b      	lsrs	r3, r3, #8
100104d8:	301c      	adds	r0, #28
100104da:	76eb      	strb	r3, [r5, #27]
100104dc:	47a0      	blx	r4
100104de:	1c31      	adds	r1, r6, #0
100104e0:	3198      	adds	r1, #152	; 0x98
100104e2:	780a      	ldrb	r2, [r1, #0]
100104e4:	1d6b      	adds	r3, r5, #5
100104e6:	77da      	strb	r2, [r3, #31]
100104e8:	2125      	movs	r1, #37	; 0x25
100104ea:	e004      	b.n	100104f6 <gapc_bond_req_ind+0xb6>
100104ec:	319a      	adds	r1, #154	; 0x9a
100104ee:	2210      	movs	r2, #16
100104f0:	4b09      	ldr	r3, [pc, #36]	; (10010518 <gapc_bond_req_ind+0xd8>)
100104f2:	4798      	blx	r3
100104f4:	211a      	movs	r1, #26
100104f6:	1c0b      	adds	r3, r1, #0
100104f8:	2400      	movs	r4, #0
100104fa:	3b08      	subs	r3, #8
100104fc:	71ab      	strb	r3, [r5, #6]
100104fe:	1c28      	adds	r0, r5, #0
10010500:	4b06      	ldr	r3, [pc, #24]	; (1001051c <gapc_bond_req_ind+0xdc>)
10010502:	71ec      	strb	r4, [r5, #7]
10010504:	4798      	blx	r3
10010506:	2000      	movs	r0, #0
10010508:	bd70      	pop	{r4, r5, r6, pc}
1001050a:	46c0      	nop			; (mov r8, r8)
1001050c:	1001b090 	.word	0x1001b090
10010510:	1001ad20 	.word	0x1001ad20
10010514:	1001adb2 	.word	0x1001adb2
10010518:	100156bf 	.word	0x100156bf
1001051c:	1000fde1 	.word	0x1000fde1

10010520 <gapc_bond_cfm_handler_pair_resp>:
10010520:	b5f0      	push	{r4, r5, r6, r7, lr}
10010522:	b085      	sub	sp, #20
10010524:	1c07      	adds	r7, r0, #0
10010526:	a80a      	add	r0, sp, #40	; 0x28
10010528:	7806      	ldrb	r6, [r0, #0]
1001052a:	a80b      	add	r0, sp, #44	; 0x2c
1001052c:	7805      	ldrb	r5, [r0, #0]
1001052e:	a80c      	add	r0, sp, #48	; 0x30
10010530:	7800      	ldrb	r0, [r0, #0]
10010532:	2414      	movs	r4, #20
10010534:	9002      	str	r0, [sp, #8]
10010536:	a80d      	add	r0, sp, #52	; 0x34
10010538:	7800      	ldrb	r0, [r0, #0]
1001053a:	9301      	str	r3, [sp, #4]
1001053c:	9003      	str	r0, [sp, #12]
1001053e:	a80e      	add	r0, sp, #56	; 0x38
10010540:	8800      	ldrh	r0, [r0, #0]
10010542:	4684      	mov	ip, r0
10010544:	4812      	ldr	r0, [pc, #72]	; (10010590 <gapc_bond_cfm_handler_pair_resp+0x70>)
10010546:	7004      	strb	r4, [r0, #0]
10010548:	3c06      	subs	r4, #6
1001054a:	7044      	strb	r4, [r0, #1]
1001054c:	7084      	strb	r4, [r0, #2]
1001054e:	4664      	mov	r4, ip
10010550:	70c4      	strb	r4, [r0, #3]
10010552:	4c10      	ldr	r4, [pc, #64]	; (10010594 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010554:	7247      	strb	r7, [r0, #9]
10010556:	8823      	ldrh	r3, [r4, #0]
10010558:	8824      	ldrh	r4, [r4, #0]
1001055a:	7103      	strb	r3, [r0, #4]
1001055c:	466b      	mov	r3, sp
1001055e:	791b      	ldrb	r3, [r3, #4]
10010560:	0a24      	lsrs	r4, r4, #8
10010562:	7303      	strb	r3, [r0, #12]
10010564:	466b      	mov	r3, sp
10010566:	7a1b      	ldrb	r3, [r3, #8]
10010568:	7144      	strb	r4, [r0, #5]
1001056a:	73c3      	strb	r3, [r0, #15]
1001056c:	466b      	mov	r3, sp
1001056e:	7b1b      	ldrb	r3, [r3, #12]
10010570:	2401      	movs	r4, #1
10010572:	7403      	strb	r3, [r0, #16]
10010574:	2309      	movs	r3, #9
10010576:	7183      	strb	r3, [r0, #6]
10010578:	2300      	movs	r3, #0
1001057a:	7204      	strb	r4, [r0, #8]
1001057c:	7281      	strb	r1, [r0, #10]
1001057e:	72c2      	strb	r2, [r0, #11]
10010580:	7346      	strb	r6, [r0, #13]
10010582:	7385      	strb	r5, [r0, #14]
10010584:	71c3      	strb	r3, [r0, #7]
10010586:	2111      	movs	r1, #17
10010588:	4b03      	ldr	r3, [pc, #12]	; (10010598 <gapc_bond_cfm_handler_pair_resp+0x78>)
1001058a:	4798      	blx	r3
1001058c:	b005      	add	sp, #20
1001058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010590:	1001b090 	.word	0x1001b090
10010594:	1001ad20 	.word	0x1001ad20
10010598:	1000fde1 	.word	0x1000fde1

1001059c <gapc_bond_cfm_handler_key_exch>:
1001059c:	b538      	push	{r3, r4, r5, lr}
1001059e:	2514      	movs	r5, #20
100105a0:	4c0d      	ldr	r4, [pc, #52]	; (100105d8 <gapc_bond_cfm_handler_key_exch+0x3c>)
100105a2:	70e3      	strb	r3, [r4, #3]
100105a4:	4b0d      	ldr	r3, [pc, #52]	; (100105dc <gapc_bond_cfm_handler_key_exch+0x40>)
100105a6:	7025      	strb	r5, [r4, #0]
100105a8:	3d06      	subs	r5, #6
100105aa:	7065      	strb	r5, [r4, #1]
100105ac:	70a5      	strb	r5, [r4, #2]
100105ae:	881d      	ldrh	r5, [r3, #0]
100105b0:	881b      	ldrh	r3, [r3, #0]
100105b2:	7220      	strb	r0, [r4, #8]
100105b4:	0a1b      	lsrs	r3, r3, #8
100105b6:	7163      	strb	r3, [r4, #5]
100105b8:	7261      	strb	r1, [r4, #9]
100105ba:	4b09      	ldr	r3, [pc, #36]	; (100105e0 <gapc_bond_cfm_handler_key_exch+0x44>)
100105bc:	1c11      	adds	r1, r2, #0
100105be:	4809      	ldr	r0, [pc, #36]	; (100105e4 <gapc_bond_cfm_handler_key_exch+0x48>)
100105c0:	2210      	movs	r2, #16
100105c2:	7125      	strb	r5, [r4, #4]
100105c4:	4798      	blx	r3
100105c6:	2312      	movs	r3, #18
100105c8:	71a3      	strb	r3, [r4, #6]
100105ca:	2300      	movs	r3, #0
100105cc:	1c20      	adds	r0, r4, #0
100105ce:	71e3      	strb	r3, [r4, #7]
100105d0:	211a      	movs	r1, #26
100105d2:	4b05      	ldr	r3, [pc, #20]	; (100105e8 <gapc_bond_cfm_handler_key_exch+0x4c>)
100105d4:	4798      	blx	r3
100105d6:	bd38      	pop	{r3, r4, r5, pc}
100105d8:	1001b090 	.word	0x1001b090
100105dc:	1001ad20 	.word	0x1001ad20
100105e0:	100156bf 	.word	0x100156bf
100105e4:	1001b09a 	.word	0x1001b09a
100105e8:	1000fde1 	.word	0x1000fde1

100105ec <gapc_security_cmd_handler>:
100105ec:	221a      	movs	r2, #26
100105ee:	b508      	push	{r3, lr}
100105f0:	4b0b      	ldr	r3, [pc, #44]	; (10010620 <gapc_security_cmd_handler+0x34>)
100105f2:	701a      	strb	r2, [r3, #0]
100105f4:	3a0c      	subs	r2, #12
100105f6:	705a      	strb	r2, [r3, #1]
100105f8:	709a      	strb	r2, [r3, #2]
100105fa:	4a0a      	ldr	r2, [pc, #40]	; (10010624 <gapc_security_cmd_handler+0x38>)
100105fc:	70d8      	strb	r0, [r3, #3]
100105fe:	8810      	ldrh	r0, [r2, #0]
10010600:	8812      	ldrh	r2, [r2, #0]
10010602:	7118      	strb	r0, [r3, #4]
10010604:	0a12      	lsrs	r2, r2, #8
10010606:	715a      	strb	r2, [r3, #5]
10010608:	220c      	movs	r2, #12
1001060a:	721a      	strb	r2, [r3, #8]
1001060c:	3a0a      	subs	r2, #10
1001060e:	719a      	strb	r2, [r3, #6]
10010610:	2200      	movs	r2, #0
10010612:	7259      	strb	r1, [r3, #9]
10010614:	71da      	strb	r2, [r3, #7]
10010616:	1c18      	adds	r0, r3, #0
10010618:	210a      	movs	r1, #10
1001061a:	4b03      	ldr	r3, [pc, #12]	; (10010628 <gapc_security_cmd_handler+0x3c>)
1001061c:	4798      	blx	r3
1001061e:	bd08      	pop	{r3, pc}
10010620:	1001b090 	.word	0x1001b090
10010624:	1001ad20 	.word	0x1001ad20
10010628:	1000fde1 	.word	0x1000fde1

1001062c <gapc_encrypt_cmd_handler>:
1001062c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001062e:	2500      	movs	r5, #0
10010630:	b089      	sub	sp, #36	; 0x24
10010632:	9306      	str	r3, [sp, #24]
10010634:	ab0e      	add	r3, sp, #56	; 0x38
10010636:	781b      	ldrb	r3, [r3, #0]
10010638:	1c17      	adds	r7, r2, #0
1001063a:	9307      	str	r3, [sp, #28]
1001063c:	ab0f      	add	r3, sp, #60	; 0x3c
1001063e:	781b      	ldrb	r3, [r3, #0]
10010640:	4a19      	ldr	r2, [pc, #100]	; (100106a8 <gapc_encrypt_cmd_handler+0x7c>)
10010642:	1c06      	adds	r6, r0, #0
10010644:	9105      	str	r1, [sp, #20]
10010646:	9300      	str	r3, [sp, #0]
10010648:	9002      	str	r0, [sp, #8]
1001064a:	1c29      	adds	r1, r5, #0
1001064c:	1c2b      	adds	r3, r5, #0
1001064e:	9501      	str	r5, [sp, #4]
10010650:	1c10      	adds	r0, r2, #0
10010652:	4c16      	ldr	r4, [pc, #88]	; (100106ac <gapc_encrypt_cmd_handler+0x80>)
10010654:	47a0      	blx	r4
10010656:	2316      	movs	r3, #22
10010658:	4c15      	ldr	r4, [pc, #84]	; (100106b0 <gapc_encrypt_cmd_handler+0x84>)
1001065a:	9905      	ldr	r1, [sp, #20]
1001065c:	7023      	strb	r3, [r4, #0]
1001065e:	3b08      	subs	r3, #8
10010660:	7063      	strb	r3, [r4, #1]
10010662:	70a3      	strb	r3, [r4, #2]
10010664:	4b13      	ldr	r3, [pc, #76]	; (100106b4 <gapc_encrypt_cmd_handler+0x88>)
10010666:	70e6      	strb	r6, [r4, #3]
10010668:	881a      	ldrh	r2, [r3, #0]
1001066a:	881b      	ldrh	r3, [r3, #0]
1001066c:	7122      	strb	r2, [r4, #4]
1001066e:	0a1b      	lsrs	r3, r3, #8
10010670:	7163      	strb	r3, [r4, #5]
10010672:	230b      	movs	r3, #11
10010674:	4e10      	ldr	r6, [pc, #64]	; (100106b8 <gapc_encrypt_cmd_handler+0x8c>)
10010676:	2210      	movs	r2, #16
10010678:	4810      	ldr	r0, [pc, #64]	; (100106bc <gapc_encrypt_cmd_handler+0x90>)
1001067a:	7223      	strb	r3, [r4, #8]
1001067c:	7265      	strb	r5, [r4, #9]
1001067e:	47b0      	blx	r6
10010680:	0a3b      	lsrs	r3, r7, #8
10010682:	9906      	ldr	r1, [sp, #24]
10010684:	2208      	movs	r2, #8
10010686:	480e      	ldr	r0, [pc, #56]	; (100106c0 <gapc_encrypt_cmd_handler+0x94>)
10010688:	76e3      	strb	r3, [r4, #27]
1001068a:	76a7      	strb	r7, [r4, #26]
1001068c:	47b0      	blx	r6
1001068e:	466a      	mov	r2, sp
10010690:	7f12      	ldrb	r2, [r2, #28]
10010692:	1d63      	adds	r3, r4, #5
10010694:	77da      	strb	r2, [r3, #31]
10010696:	231d      	movs	r3, #29
10010698:	1c20      	adds	r0, r4, #0
1001069a:	71a3      	strb	r3, [r4, #6]
1001069c:	2125      	movs	r1, #37	; 0x25
1001069e:	4b09      	ldr	r3, [pc, #36]	; (100106c4 <gapc_encrypt_cmd_handler+0x98>)
100106a0:	71e5      	strb	r5, [r4, #7]
100106a2:	4798      	blx	r3
100106a4:	b009      	add	sp, #36	; 0x24
100106a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106a8:	10019df4 	.word	0x10019df4
100106ac:	100100e5 	.word	0x100100e5
100106b0:	1001b090 	.word	0x1001b090
100106b4:	1001ad20 	.word	0x1001ad20
100106b8:	100156bf 	.word	0x100156bf
100106bc:	1001b09a 	.word	0x1001b09a
100106c0:	1001b0ac 	.word	0x1001b0ac
100106c4:	1000fde1 	.word	0x1000fde1

100106c8 <gapc_encrypt_req_ind>:
100106c8:	b508      	push	{r3, lr}
100106ca:	0a00      	lsrs	r0, r0, #8
100106cc:	8010      	strh	r0, [r2, #0]
100106ce:	784b      	ldrb	r3, [r1, #1]
100106d0:	7808      	ldrb	r0, [r1, #0]
100106d2:	021b      	lsls	r3, r3, #8
100106d4:	4303      	orrs	r3, r0
100106d6:	8053      	strh	r3, [r2, #2]
100106d8:	1d10      	adds	r0, r2, #4
100106da:	3102      	adds	r1, #2
100106dc:	2208      	movs	r2, #8
100106de:	4b01      	ldr	r3, [pc, #4]	; (100106e4 <gapc_encrypt_req_ind+0x1c>)
100106e0:	4798      	blx	r3
100106e2:	bd08      	pop	{r3, pc}
100106e4:	100156bf 	.word	0x100156bf

100106e8 <gapc_encrypt_cfm_handler>:
100106e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100106ea:	2500      	movs	r5, #0
100106ec:	b087      	sub	sp, #28
100106ee:	9304      	str	r3, [sp, #16]
100106f0:	ab0c      	add	r3, sp, #48	; 0x30
100106f2:	781b      	ldrb	r3, [r3, #0]
100106f4:	1c17      	adds	r7, r2, #0
100106f6:	4a15      	ldr	r2, [pc, #84]	; (1001074c <gapc_encrypt_cfm_handler+0x64>)
100106f8:	1c06      	adds	r6, r0, #0
100106fa:	9305      	str	r3, [sp, #20]
100106fc:	9100      	str	r1, [sp, #0]
100106fe:	9002      	str	r0, [sp, #8]
10010700:	1c29      	adds	r1, r5, #0
10010702:	1c2b      	adds	r3, r5, #0
10010704:	9501      	str	r5, [sp, #4]
10010706:	1c10      	adds	r0, r2, #0
10010708:	4c11      	ldr	r4, [pc, #68]	; (10010750 <gapc_encrypt_cfm_handler+0x68>)
1001070a:	47a0      	blx	r4
1001070c:	2318      	movs	r3, #24
1001070e:	4c11      	ldr	r4, [pc, #68]	; (10010754 <gapc_encrypt_cfm_handler+0x6c>)
10010710:	9904      	ldr	r1, [sp, #16]
10010712:	7023      	strb	r3, [r4, #0]
10010714:	3b0a      	subs	r3, #10
10010716:	7063      	strb	r3, [r4, #1]
10010718:	70a3      	strb	r3, [r4, #2]
1001071a:	4b0f      	ldr	r3, [pc, #60]	; (10010758 <gapc_encrypt_cfm_handler+0x70>)
1001071c:	480f      	ldr	r0, [pc, #60]	; (1001075c <gapc_encrypt_cfm_handler+0x74>)
1001071e:	881a      	ldrh	r2, [r3, #0]
10010720:	881b      	ldrh	r3, [r3, #0]
10010722:	7122      	strb	r2, [r4, #4]
10010724:	0a1b      	lsrs	r3, r3, #8
10010726:	7163      	strb	r3, [r4, #5]
10010728:	2210      	movs	r2, #16
1001072a:	4b0d      	ldr	r3, [pc, #52]	; (10010760 <gapc_encrypt_cfm_handler+0x78>)
1001072c:	70e6      	strb	r6, [r4, #3]
1001072e:	7227      	strb	r7, [r4, #8]
10010730:	4798      	blx	r3
10010732:	466b      	mov	r3, sp
10010734:	7d1b      	ldrb	r3, [r3, #20]
10010736:	1c20      	adds	r0, r4, #0
10010738:	7663      	strb	r3, [r4, #25]
1001073a:	2312      	movs	r3, #18
1001073c:	211a      	movs	r1, #26
1001073e:	71a3      	strb	r3, [r4, #6]
10010740:	4b08      	ldr	r3, [pc, #32]	; (10010764 <gapc_encrypt_cfm_handler+0x7c>)
10010742:	71e5      	strb	r5, [r4, #7]
10010744:	4798      	blx	r3
10010746:	b007      	add	sp, #28
10010748:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001074a:	46c0      	nop			; (mov r8, r8)
1001074c:	10019e04 	.word	0x10019e04
10010750:	100100e5 	.word	0x100100e5
10010754:	1001b090 	.word	0x1001b090
10010758:	1001ad20 	.word	0x1001ad20
1001075c:	1001b099 	.word	0x1001b099
10010760:	100156bf 	.word	0x100156bf
10010764:	1000fde1 	.word	0x1000fde1

10010768 <gapc_encrypt_ind>:
10010768:	780b      	ldrb	r3, [r1, #0]
1001076a:	0a00      	lsrs	r0, r0, #8
1001076c:	70d3      	strb	r3, [r2, #3]
1001076e:	2300      	movs	r3, #0
10010770:	8010      	strh	r0, [r2, #0]
10010772:	7093      	strb	r3, [r2, #2]
10010774:	4770      	bx	lr
	...

10010778 <gapc_param_update_cfm_handler>:
10010778:	b538      	push	{r3, r4, r5, lr}
1001077a:	2410      	movs	r4, #16
1001077c:	1c05      	adds	r5, r0, #0
1001077e:	480e      	ldr	r0, [pc, #56]	; (100107b8 <gapc_param_update_cfm_handler+0x40>)
10010780:	7004      	strb	r4, [r0, #0]
10010782:	3c02      	subs	r4, #2
10010784:	7044      	strb	r4, [r0, #1]
10010786:	7084      	strb	r4, [r0, #2]
10010788:	4c0c      	ldr	r4, [pc, #48]	; (100107bc <gapc_param_update_cfm_handler+0x44>)
1001078a:	70c5      	strb	r5, [r0, #3]
1001078c:	8825      	ldrh	r5, [r4, #0]
1001078e:	8824      	ldrh	r4, [r4, #0]
10010790:	72c3      	strb	r3, [r0, #11]
10010792:	0a1b      	lsrs	r3, r3, #8
10010794:	0a24      	lsrs	r4, r4, #8
10010796:	7303      	strb	r3, [r0, #12]
10010798:	2305      	movs	r3, #5
1001079a:	7144      	strb	r4, [r0, #5]
1001079c:	2400      	movs	r4, #0
1001079e:	7201      	strb	r1, [r0, #8]
100107a0:	7242      	strb	r2, [r0, #9]
100107a2:	7183      	strb	r3, [r0, #6]
100107a4:	0a12      	lsrs	r2, r2, #8
100107a6:	210d      	movs	r1, #13
100107a8:	4b05      	ldr	r3, [pc, #20]	; (100107c0 <gapc_param_update_cfm_handler+0x48>)
100107aa:	7105      	strb	r5, [r0, #4]
100107ac:	7282      	strb	r2, [r0, #10]
100107ae:	71c4      	strb	r4, [r0, #7]
100107b0:	4798      	blx	r3
100107b2:	1c20      	adds	r0, r4, #0
100107b4:	bd38      	pop	{r3, r4, r5, pc}
100107b6:	46c0      	nop			; (mov r8, r8)
100107b8:	1001b090 	.word	0x1001b090
100107bc:	1001ad20 	.word	0x1001ad20
100107c0:	1000fde1 	.word	0x1000fde1

100107c4 <gapc_param_updated_ind>:
100107c4:	2300      	movs	r3, #0
100107c6:	0a00      	lsrs	r0, r0, #8
100107c8:	8010      	strh	r0, [r2, #0]
100107ca:	7093      	strb	r3, [r2, #2]
100107cc:	784b      	ldrb	r3, [r1, #1]
100107ce:	7808      	ldrb	r0, [r1, #0]
100107d0:	021b      	lsls	r3, r3, #8
100107d2:	4303      	orrs	r3, r0
100107d4:	8093      	strh	r3, [r2, #4]
100107d6:	78cb      	ldrb	r3, [r1, #3]
100107d8:	7888      	ldrb	r0, [r1, #2]
100107da:	021b      	lsls	r3, r3, #8
100107dc:	4303      	orrs	r3, r0
100107de:	80d3      	strh	r3, [r2, #6]
100107e0:	794b      	ldrb	r3, [r1, #5]
100107e2:	7909      	ldrb	r1, [r1, #4]
100107e4:	021b      	lsls	r3, r3, #8
100107e6:	430b      	orrs	r3, r1
100107e8:	2007      	movs	r0, #7
100107ea:	8113      	strh	r3, [r2, #8]
100107ec:	4770      	bx	lr

100107ee <gapc_param_updated_req_ind>:
100107ee:	0a00      	lsrs	r0, r0, #8
100107f0:	8010      	strh	r0, [r2, #0]
100107f2:	784b      	ldrb	r3, [r1, #1]
100107f4:	7808      	ldrb	r0, [r1, #0]
100107f6:	021b      	lsls	r3, r3, #8
100107f8:	4303      	orrs	r3, r0
100107fa:	8053      	strh	r3, [r2, #2]
100107fc:	78cb      	ldrb	r3, [r1, #3]
100107fe:	7888      	ldrb	r0, [r1, #2]
10010800:	021b      	lsls	r3, r3, #8
10010802:	4303      	orrs	r3, r0
10010804:	8093      	strh	r3, [r2, #4]
10010806:	794b      	ldrb	r3, [r1, #5]
10010808:	7908      	ldrb	r0, [r1, #4]
1001080a:	021b      	lsls	r3, r3, #8
1001080c:	4303      	orrs	r3, r0
1001080e:	80d3      	strh	r3, [r2, #6]
10010810:	79cb      	ldrb	r3, [r1, #7]
10010812:	7989      	ldrb	r1, [r1, #6]
10010814:	021b      	lsls	r3, r3, #8
10010816:	430b      	orrs	r3, r1
10010818:	2008      	movs	r0, #8
1001081a:	8113      	strh	r3, [r2, #8]
1001081c:	4770      	bx	lr
	...

10010820 <gapc_dev_info_req_ind_handler>:
10010820:	b508      	push	{r3, lr}
10010822:	1c0b      	adds	r3, r1, #0
10010824:	0a01      	lsrs	r1, r0, #8
10010826:	8011      	strh	r1, [r2, #0]
10010828:	7818      	ldrb	r0, [r3, #0]
1001082a:	7090      	strb	r0, [r2, #2]
1001082c:	2800      	cmp	r0, #0
1001082e:	d104      	bne.n	1001083a <gapc_dev_info_req_ind_handler+0x1a>
10010830:	4b03      	ldr	r3, [pc, #12]	; (10010840 <gapc_dev_info_req_ind_handler+0x20>)
10010832:	33aa      	adds	r3, #170	; 0xaa
10010834:	881b      	ldrh	r3, [r3, #0]
10010836:	2b00      	cmp	r3, #0
10010838:	d001      	beq.n	1001083e <gapc_dev_info_req_ind_handler+0x1e>
1001083a:	4b02      	ldr	r3, [pc, #8]	; (10010844 <gapc_dev_info_req_ind_handler+0x24>)
1001083c:	4798      	blx	r3
1001083e:	bd08      	pop	{r3, pc}
10010840:	1001adb2 	.word	0x1001adb2
10010844:	1000fef1 	.word	0x1000fef1

10010848 <gapc_sec_req_ind>:
10010848:	0a00      	lsrs	r0, r0, #8
1001084a:	8010      	strh	r0, [r2, #0]
1001084c:	7809      	ldrb	r1, [r1, #0]
1001084e:	2301      	movs	r3, #1
10010850:	1c08      	adds	r0, r1, #0
10010852:	0889      	lsrs	r1, r1, #2
10010854:	4018      	ands	r0, r3
10010856:	400b      	ands	r3, r1
10010858:	70d0      	strb	r0, [r2, #3]
1001085a:	7113      	strb	r3, [r2, #4]
1001085c:	4770      	bx	lr

1001085e <gapc_sign_counter_ind_handler>:
1001085e:	0a00      	lsrs	r0, r0, #8
10010860:	8010      	strh	r0, [r2, #0]
10010862:	784b      	ldrb	r3, [r1, #1]
10010864:	0218      	lsls	r0, r3, #8
10010866:	788b      	ldrb	r3, [r1, #2]
10010868:	041b      	lsls	r3, r3, #16
1001086a:	4303      	orrs	r3, r0
1001086c:	7808      	ldrb	r0, [r1, #0]
1001086e:	4303      	orrs	r3, r0
10010870:	78c8      	ldrb	r0, [r1, #3]
10010872:	0600      	lsls	r0, r0, #24
10010874:	4303      	orrs	r3, r0
10010876:	6053      	str	r3, [r2, #4]
10010878:	794b      	ldrb	r3, [r1, #5]
1001087a:	0218      	lsls	r0, r3, #8
1001087c:	798b      	ldrb	r3, [r1, #6]
1001087e:	041b      	lsls	r3, r3, #16
10010880:	4303      	orrs	r3, r0
10010882:	7908      	ldrb	r0, [r1, #4]
10010884:	79c9      	ldrb	r1, [r1, #7]
10010886:	4303      	orrs	r3, r0
10010888:	0609      	lsls	r1, r1, #24
1001088a:	430b      	orrs	r3, r1
1001088c:	2000      	movs	r0, #0
1001088e:	6093      	str	r3, [r2, #8]
10010890:	4770      	bx	lr
	...

10010894 <gapc_peer_att_info_ind_handler>:
10010894:	b510      	push	{r4, lr}
10010896:	0a00      	lsrs	r0, r0, #8
10010898:	8010      	strh	r0, [r2, #0]
1001089a:	7808      	ldrb	r0, [r1, #0]
1001089c:	7090      	strb	r0, [r2, #2]
1001089e:	788b      	ldrb	r3, [r1, #2]
100108a0:	784c      	ldrb	r4, [r1, #1]
100108a2:	021b      	lsls	r3, r3, #8
100108a4:	4323      	orrs	r3, r4
100108a6:	8093      	strh	r3, [r2, #4]
100108a8:	2801      	cmp	r0, #1
100108aa:	d027      	beq.n	100108fc <gapc_peer_att_info_ind_handler+0x68>
100108ac:	2800      	cmp	r0, #0
100108ae:	d017      	beq.n	100108e0 <gapc_peer_att_info_ind_handler+0x4c>
100108b0:	2802      	cmp	r0, #2
100108b2:	d12a      	bne.n	1001090a <gapc_peer_att_info_ind_handler+0x76>
100108b4:	790b      	ldrb	r3, [r1, #4]
100108b6:	78c8      	ldrb	r0, [r1, #3]
100108b8:	021b      	lsls	r3, r3, #8
100108ba:	4303      	orrs	r3, r0
100108bc:	8113      	strh	r3, [r2, #8]
100108be:	798b      	ldrb	r3, [r1, #6]
100108c0:	7948      	ldrb	r0, [r1, #5]
100108c2:	021b      	lsls	r3, r3, #8
100108c4:	4303      	orrs	r3, r0
100108c6:	80d3      	strh	r3, [r2, #6]
100108c8:	7a0b      	ldrb	r3, [r1, #8]
100108ca:	79c8      	ldrb	r0, [r1, #7]
100108cc:	021b      	lsls	r3, r3, #8
100108ce:	4303      	orrs	r3, r0
100108d0:	8193      	strh	r3, [r2, #12]
100108d2:	7a8b      	ldrb	r3, [r1, #10]
100108d4:	7a49      	ldrb	r1, [r1, #9]
100108d6:	021b      	lsls	r3, r3, #8
100108d8:	430b      	orrs	r3, r1
100108da:	8153      	strh	r3, [r2, #10]
100108dc:	2306      	movs	r3, #6
100108de:	e013      	b.n	10010908 <gapc_peer_att_info_ind_handler+0x74>
100108e0:	1c14      	adds	r4, r2, #0
100108e2:	1c20      	adds	r0, r4, #0
100108e4:	790a      	ldrb	r2, [r1, #4]
100108e6:	78cb      	ldrb	r3, [r1, #3]
100108e8:	0212      	lsls	r2, r2, #8
100108ea:	431a      	orrs	r2, r3
100108ec:	80e2      	strh	r2, [r4, #6]
100108ee:	4b07      	ldr	r3, [pc, #28]	; (1001090c <gapc_peer_att_info_ind_handler+0x78>)
100108f0:	3008      	adds	r0, #8
100108f2:	3105      	adds	r1, #5
100108f4:	4798      	blx	r3
100108f6:	2302      	movs	r3, #2
100108f8:	70a3      	strb	r3, [r4, #2]
100108fa:	e006      	b.n	1001090a <gapc_peer_att_info_ind_handler+0x76>
100108fc:	790b      	ldrb	r3, [r1, #4]
100108fe:	78c9      	ldrb	r1, [r1, #3]
10010900:	021b      	lsls	r3, r3, #8
10010902:	430b      	orrs	r3, r1
10010904:	80d3      	strh	r3, [r2, #6]
10010906:	2305      	movs	r3, #5
10010908:	7093      	strb	r3, [r2, #2]
1001090a:	bd10      	pop	{r4, pc}
1001090c:	100156bf 	.word	0x100156bf

10010910 <gapc_con_channel_map_ind_handler>:
10010910:	b508      	push	{r3, lr}
10010912:	2300      	movs	r3, #0
10010914:	0a00      	lsrs	r0, r0, #8
10010916:	7013      	strb	r3, [r2, #0]
10010918:	8050      	strh	r0, [r2, #2]
1001091a:	4b02      	ldr	r3, [pc, #8]	; (10010924 <gapc_con_channel_map_ind_handler+0x14>)
1001091c:	1d10      	adds	r0, r2, #4
1001091e:	2205      	movs	r2, #5
10010920:	4798      	blx	r3
10010922:	bd08      	pop	{r3, pc}
10010924:	100156bf 	.word	0x100156bf

10010928 <gapc_lecb_connected>:
10010928:	7843      	ldrb	r3, [r0, #1]
1001092a:	7802      	ldrb	r2, [r0, #0]
1001092c:	021b      	lsls	r3, r3, #8
1001092e:	4313      	orrs	r3, r2
10010930:	800b      	strh	r3, [r1, #0]
10010932:	78c3      	ldrb	r3, [r0, #3]
10010934:	7882      	ldrb	r2, [r0, #2]
10010936:	021b      	lsls	r3, r3, #8
10010938:	4313      	orrs	r3, r2
1001093a:	804b      	strh	r3, [r1, #2]
1001093c:	7943      	ldrb	r3, [r0, #5]
1001093e:	7902      	ldrb	r2, [r0, #4]
10010940:	021b      	lsls	r3, r3, #8
10010942:	4313      	orrs	r3, r2
10010944:	808b      	strh	r3, [r1, #4]
10010946:	79c3      	ldrb	r3, [r0, #7]
10010948:	7982      	ldrb	r2, [r0, #6]
1001094a:	021b      	lsls	r3, r3, #8
1001094c:	4313      	orrs	r3, r2
1001094e:	80cb      	strh	r3, [r1, #6]
10010950:	2300      	movs	r3, #0
10010952:	720b      	strb	r3, [r1, #8]
10010954:	4770      	bx	lr

10010956 <gapc_lecb_disconnected>:
10010956:	7843      	ldrb	r3, [r0, #1]
10010958:	7802      	ldrb	r2, [r0, #0]
1001095a:	021b      	lsls	r3, r3, #8
1001095c:	4313      	orrs	r3, r2
1001095e:	800b      	strh	r3, [r1, #0]
10010960:	78c3      	ldrb	r3, [r0, #3]
10010962:	7882      	ldrb	r2, [r0, #2]
10010964:	021b      	lsls	r3, r3, #8
10010966:	4313      	orrs	r3, r2
10010968:	804b      	strh	r3, [r1, #2]
1001096a:	4770      	bx	lr

1001096c <gapc_lecb_connect_req_ind>:
1001096c:	7843      	ldrb	r3, [r0, #1]
1001096e:	7802      	ldrb	r2, [r0, #0]
10010970:	021b      	lsls	r3, r3, #8
10010972:	4313      	orrs	r3, r2
10010974:	800b      	strh	r3, [r1, #0]
10010976:	78c3      	ldrb	r3, [r0, #3]
10010978:	7882      	ldrb	r2, [r0, #2]
1001097a:	021b      	lsls	r3, r3, #8
1001097c:	4313      	orrs	r3, r2
1001097e:	804b      	strh	r3, [r1, #2]
10010980:	7943      	ldrb	r3, [r0, #5]
10010982:	7902      	ldrb	r2, [r0, #4]
10010984:	021b      	lsls	r3, r3, #8
10010986:	4313      	orrs	r3, r2
10010988:	808b      	strh	r3, [r1, #4]
1001098a:	79c3      	ldrb	r3, [r0, #7]
1001098c:	7982      	ldrb	r2, [r0, #6]
1001098e:	021b      	lsls	r3, r3, #8
10010990:	4313      	orrs	r3, r2
10010992:	80cb      	strh	r3, [r1, #6]
10010994:	4770      	bx	lr

10010996 <gapc_lecb_add_credit_resp_handler>:
10010996:	7843      	ldrb	r3, [r0, #1]
10010998:	7802      	ldrb	r2, [r0, #0]
1001099a:	021b      	lsls	r3, r3, #8
1001099c:	4313      	orrs	r3, r2
1001099e:	800b      	strh	r3, [r1, #0]
100109a0:	78c3      	ldrb	r3, [r0, #3]
100109a2:	7882      	ldrb	r2, [r0, #2]
100109a4:	021b      	lsls	r3, r3, #8
100109a6:	4313      	orrs	r3, r2
100109a8:	804b      	strh	r3, [r1, #2]
100109aa:	7943      	ldrb	r3, [r0, #5]
100109ac:	7902      	ldrb	r2, [r0, #4]
100109ae:	021b      	lsls	r3, r3, #8
100109b0:	4313      	orrs	r3, r2
100109b2:	808b      	strh	r3, [r1, #4]
100109b4:	4770      	bx	lr
	...

100109b8 <gapm_reset_req_handler>:
100109b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
100109ba:	466b      	mov	r3, sp
100109bc:	4915      	ldr	r1, [pc, #84]	; (10010a14 <gapm_reset_req_handler+0x5c>)
100109be:	4816      	ldr	r0, [pc, #88]	; (10010a18 <gapm_reset_req_handler+0x60>)
100109c0:	880c      	ldrh	r4, [r1, #0]
100109c2:	8809      	ldrh	r1, [r1, #0]
100109c4:	1ddd      	adds	r5, r3, #7
100109c6:	0a09      	lsrs	r1, r1, #8
100109c8:	2300      	movs	r3, #0
100109ca:	2202      	movs	r2, #2
100109cc:	7141      	strb	r1, [r0, #5]
100109ce:	26d0      	movs	r6, #208	; 0xd0
100109d0:	2101      	movs	r1, #1
100109d2:	7104      	strb	r4, [r0, #4]
100109d4:	4c11      	ldr	r4, [pc, #68]	; (10010a1c <gapm_reset_req_handler+0x64>)
100109d6:	702b      	strb	r3, [r5, #0]
100109d8:	7002      	strb	r2, [r0, #0]
100109da:	70c3      	strb	r3, [r0, #3]
100109dc:	320b      	adds	r2, #11
100109de:	7201      	strb	r1, [r0, #8]
100109e0:	7181      	strb	r1, [r0, #6]
100109e2:	71c3      	strb	r3, [r0, #7]
100109e4:	3108      	adds	r1, #8
100109e6:	4b0e      	ldr	r3, [pc, #56]	; (10010a20 <gapm_reset_req_handler+0x68>)
100109e8:	0136      	lsls	r6, r6, #4
100109ea:	7042      	strb	r2, [r0, #1]
100109ec:	7082      	strb	r2, [r0, #2]
100109ee:	80a2      	strh	r2, [r4, #4]
100109f0:	8026      	strh	r6, [r4, #0]
100109f2:	4798      	blx	r3
100109f4:	1c28      	adds	r0, r5, #0
100109f6:	4b0b      	ldr	r3, [pc, #44]	; (10010a24 <gapm_reset_req_handler+0x6c>)
100109f8:	4798      	blx	r3
100109fa:	782b      	ldrb	r3, [r5, #0]
100109fc:	20e2      	movs	r0, #226	; 0xe2
100109fe:	2b00      	cmp	r3, #0
10010a00:	d106      	bne.n	10010a10 <gapm_reset_req_handler+0x58>
10010a02:	68a3      	ldr	r3, [r4, #8]
10010a04:	20e2      	movs	r0, #226	; 0xe2
10010a06:	781a      	ldrb	r2, [r3, #0]
10010a08:	785b      	ldrb	r3, [r3, #1]
10010a0a:	2a01      	cmp	r2, #1
10010a0c:	d100      	bne.n	10010a10 <gapm_reset_req_handler+0x58>
10010a0e:	1c18      	adds	r0, r3, #0
10010a10:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010a12:	46c0      	nop			; (mov r8, r8)
10010a14:	1001ad20 	.word	0x1001ad20
10010a18:	1001b090 	.word	0x1001b090
10010a1c:	1001ad14 	.word	0x1001ad14
10010a20:	1000fde1 	.word	0x1000fde1
10010a24:	1000fe45 	.word	0x1000fe45

10010a28 <gapm_set_dev_config_cmd_handler>:
10010a28:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a2a:	b089      	sub	sp, #36	; 0x24
10010a2c:	9303      	str	r3, [sp, #12]
10010a2e:	ab0e      	add	r3, sp, #56	; 0x38
10010a30:	781b      	ldrb	r3, [r3, #0]
10010a32:	4c37      	ldr	r4, [pc, #220]	; (10010b10 <gapm_set_dev_config_cmd_handler+0xe8>)
10010a34:	9304      	str	r3, [sp, #16]
10010a36:	ab0f      	add	r3, sp, #60	; 0x3c
10010a38:	781b      	ldrb	r3, [r3, #0]
10010a3a:	270d      	movs	r7, #13
10010a3c:	9305      	str	r3, [sp, #20]
10010a3e:	ab10      	add	r3, sp, #64	; 0x40
10010a40:	881b      	ldrh	r3, [r3, #0]
10010a42:	72a1      	strb	r1, [r4, #10]
10010a44:	9300      	str	r3, [sp, #0]
10010a46:	ab11      	add	r3, sp, #68	; 0x44
10010a48:	881b      	ldrh	r3, [r3, #0]
10010a4a:	0a09      	lsrs	r1, r1, #8
10010a4c:	9301      	str	r3, [sp, #4]
10010a4e:	ab12      	add	r3, sp, #72	; 0x48
10010a50:	881b      	ldrh	r3, [r3, #0]
10010a52:	7260      	strb	r0, [r4, #9]
10010a54:	9302      	str	r3, [sp, #8]
10010a56:	ab06      	add	r3, sp, #24
10010a58:	1dde      	adds	r6, r3, #7
10010a5a:	2300      	movs	r3, #0
10010a5c:	7033      	strb	r3, [r6, #0]
10010a5e:	2304      	movs	r3, #4
10010a60:	7023      	strb	r3, [r4, #0]
10010a62:	2300      	movs	r3, #0
10010a64:	70e3      	strb	r3, [r4, #3]
10010a66:	4b2b      	ldr	r3, [pc, #172]	; (10010b14 <gapm_set_dev_config_cmd_handler+0xec>)
10010a68:	72e1      	strb	r1, [r4, #11]
10010a6a:	881d      	ldrh	r5, [r3, #0]
10010a6c:	881b      	ldrh	r3, [r3, #0]
10010a6e:	1c11      	adds	r1, r2, #0
10010a70:	0a1b      	lsrs	r3, r3, #8
10010a72:	7163      	strb	r3, [r4, #5]
10010a74:	2303      	movs	r3, #3
10010a76:	7125      	strb	r5, [r4, #4]
10010a78:	2206      	movs	r2, #6
10010a7a:	4d27      	ldr	r5, [pc, #156]	; (10010b18 <gapm_set_dev_config_cmd_handler+0xf0>)
10010a7c:	4827      	ldr	r0, [pc, #156]	; (10010b1c <gapm_set_dev_config_cmd_handler+0xf4>)
10010a7e:	7223      	strb	r3, [r4, #8]
10010a80:	7067      	strb	r7, [r4, #1]
10010a82:	70a7      	strb	r7, [r4, #2]
10010a84:	47a8      	blx	r5
10010a86:	9903      	ldr	r1, [sp, #12]
10010a88:	2210      	movs	r2, #16
10010a8a:	4825      	ldr	r0, [pc, #148]	; (10010b20 <gapm_set_dev_config_cmd_handler+0xf8>)
10010a8c:	47a8      	blx	r5
10010a8e:	466a      	mov	r2, sp
10010a90:	7c12      	ldrb	r2, [r2, #16]
10010a92:	1ce3      	adds	r3, r4, #3
10010a94:	77da      	strb	r2, [r3, #31]
10010a96:	466a      	mov	r2, sp
10010a98:	7d12      	ldrb	r2, [r2, #20]
10010a9a:	1d23      	adds	r3, r4, #4
10010a9c:	77da      	strb	r2, [r3, #31]
10010a9e:	466a      	mov	r2, sp
10010aa0:	7812      	ldrb	r2, [r2, #0]
10010aa2:	1d63      	adds	r3, r4, #5
10010aa4:	77da      	strb	r2, [r3, #31]
10010aa6:	9b00      	ldr	r3, [sp, #0]
10010aa8:	1da2      	adds	r2, r4, #6
10010aaa:	0a1b      	lsrs	r3, r3, #8
10010aac:	77d3      	strb	r3, [r2, #31]
10010aae:	466a      	mov	r2, sp
10010ab0:	7912      	ldrb	r2, [r2, #4]
10010ab2:	1de3      	adds	r3, r4, #7
10010ab4:	77da      	strb	r2, [r3, #31]
10010ab6:	1c22      	adds	r2, r4, #0
10010ab8:	9b01      	ldr	r3, [sp, #4]
10010aba:	3208      	adds	r2, #8
10010abc:	0a1b      	lsrs	r3, r3, #8
10010abe:	77d3      	strb	r3, [r2, #31]
10010ac0:	466a      	mov	r2, sp
10010ac2:	1c23      	adds	r3, r4, #0
10010ac4:	7a12      	ldrb	r2, [r2, #8]
10010ac6:	3328      	adds	r3, #40	; 0x28
10010ac8:	701a      	strb	r2, [r3, #0]
10010aca:	1c22      	adds	r2, r4, #0
10010acc:	9b02      	ldr	r3, [sp, #8]
10010ace:	3229      	adds	r2, #41	; 0x29
10010ad0:	0a1b      	lsrs	r3, r3, #8
10010ad2:	7013      	strb	r3, [r2, #0]
10010ad4:	23d0      	movs	r3, #208	; 0xd0
10010ad6:	4d13      	ldr	r5, [pc, #76]	; (10010b24 <gapm_set_dev_config_cmd_handler+0xfc>)
10010ad8:	011b      	lsls	r3, r3, #4
10010ada:	802b      	strh	r3, [r5, #0]
10010adc:	2322      	movs	r3, #34	; 0x22
10010ade:	71a3      	strb	r3, [r4, #6]
10010ae0:	2300      	movs	r3, #0
10010ae2:	212a      	movs	r1, #42	; 0x2a
10010ae4:	71e3      	strb	r3, [r4, #7]
10010ae6:	1c20      	adds	r0, r4, #0
10010ae8:	4b0f      	ldr	r3, [pc, #60]	; (10010b28 <gapm_set_dev_config_cmd_handler+0x100>)
10010aea:	80af      	strh	r7, [r5, #4]
10010aec:	4798      	blx	r3
10010aee:	1c30      	adds	r0, r6, #0
10010af0:	4b0e      	ldr	r3, [pc, #56]	; (10010b2c <gapm_set_dev_config_cmd_handler+0x104>)
10010af2:	4798      	blx	r3
10010af4:	7833      	ldrb	r3, [r6, #0]
10010af6:	20e2      	movs	r0, #226	; 0xe2
10010af8:	2b00      	cmp	r3, #0
10010afa:	d106      	bne.n	10010b0a <gapm_set_dev_config_cmd_handler+0xe2>
10010afc:	68ab      	ldr	r3, [r5, #8]
10010afe:	20e2      	movs	r0, #226	; 0xe2
10010b00:	781a      	ldrb	r2, [r3, #0]
10010b02:	785b      	ldrb	r3, [r3, #1]
10010b04:	2a03      	cmp	r2, #3
10010b06:	d100      	bne.n	10010b0a <gapm_set_dev_config_cmd_handler+0xe2>
10010b08:	1c18      	adds	r0, r3, #0
10010b0a:	b009      	add	sp, #36	; 0x24
10010b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b0e:	46c0      	nop			; (mov r8, r8)
10010b10:	1001b090 	.word	0x1001b090
10010b14:	1001ad20 	.word	0x1001ad20
10010b18:	100156bf 	.word	0x100156bf
10010b1c:	1001b09c 	.word	0x1001b09c
10010b20:	1001b0a2 	.word	0x1001b0a2
10010b24:	1001ad14 	.word	0x1001ad14
10010b28:	1000fde1 	.word	0x1000fde1
10010b2c:	1000fe45 	.word	0x1000fe45

10010b30 <gapm_get_dev_config_cmd_handler>:
10010b30:	4684      	mov	ip, r0
10010b32:	4663      	mov	r3, ip
10010b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b36:	b085      	sub	sp, #20
10010b38:	9100      	str	r1, [sp, #0]
10010b3a:	20cf      	movs	r0, #207	; 0xcf
10010b3c:	2b01      	cmp	r3, #1
10010b3e:	d854      	bhi.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010b40:	2900      	cmp	r1, #0
10010b42:	d052      	beq.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010b44:	2200      	movs	r2, #0
10010b46:	492a      	ldr	r1, [pc, #168]	; (10010bf0 <gapm_get_dev_config_cmd_handler+0xc0>)
10010b48:	ab02      	add	r3, sp, #8
10010b4a:	880c      	ldrh	r4, [r1, #0]
10010b4c:	8809      	ldrh	r1, [r1, #0]
10010b4e:	1d9f      	adds	r7, r3, #6
10010b50:	719a      	strb	r2, [r3, #6]
10010b52:	4b28      	ldr	r3, [pc, #160]	; (10010bf4 <gapm_get_dev_config_cmd_handler+0xc4>)
10010b54:	0a09      	lsrs	r1, r1, #8
10010b56:	250d      	movs	r5, #13
10010b58:	2606      	movs	r6, #6
10010b5a:	7159      	strb	r1, [r3, #5]
10010b5c:	4661      	mov	r1, ip
10010b5e:	701e      	strb	r6, [r3, #0]
10010b60:	705d      	strb	r5, [r3, #1]
10010b62:	709d      	strb	r5, [r3, #2]
10010b64:	70da      	strb	r2, [r3, #3]
10010b66:	711c      	strb	r4, [r3, #4]
10010b68:	2901      	cmp	r1, #1
10010b6a:	d13e      	bne.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010b6c:	21d0      	movs	r1, #208	; 0xd0
10010b6e:	4c22      	ldr	r4, [pc, #136]	; (10010bf8 <gapm_get_dev_config_cmd_handler+0xc8>)
10010b70:	0109      	lsls	r1, r1, #4
10010b72:	8061      	strh	r1, [r4, #2]
10010b74:	4921      	ldr	r1, [pc, #132]	; (10010bfc <gapm_get_dev_config_cmd_handler+0xcc>)
10010b76:	71da      	strb	r2, [r3, #7]
10010b78:	8021      	strh	r1, [r4, #0]
10010b7a:	4661      	mov	r1, ip
10010b7c:	721e      	strb	r6, [r3, #8]
10010b7e:	7199      	strb	r1, [r3, #6]
10010b80:	1c18      	adds	r0, r3, #0
10010b82:	2109      	movs	r1, #9
10010b84:	4b1e      	ldr	r3, [pc, #120]	; (10010c00 <gapm_get_dev_config_cmd_handler+0xd0>)
10010b86:	80a5      	strh	r5, [r4, #4]
10010b88:	4798      	blx	r3
10010b8a:	1c38      	adds	r0, r7, #0
10010b8c:	4b1d      	ldr	r3, [pc, #116]	; (10010c04 <gapm_get_dev_config_cmd_handler+0xd4>)
10010b8e:	4798      	blx	r3
10010b90:	783b      	ldrb	r3, [r7, #0]
10010b92:	20e2      	movs	r0, #226	; 0xe2
10010b94:	9301      	str	r3, [sp, #4]
10010b96:	2b00      	cmp	r3, #0
10010b98:	d127      	bne.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010b9a:	8821      	ldrh	r1, [r4, #0]
10010b9c:	4a1a      	ldr	r2, [pc, #104]	; (10010c08 <gapm_get_dev_config_cmd_handler+0xd8>)
10010b9e:	68a7      	ldr	r7, [r4, #8]
10010ba0:	3b01      	subs	r3, #1
10010ba2:	4291      	cmp	r1, r2
10010ba4:	d001      	beq.n	10010baa <gapm_get_dev_config_cmd_handler+0x7a>
10010ba6:	8023      	strh	r3, [r4, #0]
10010ba8:	e01a      	b.n	10010be0 <gapm_get_dev_config_cmd_handler+0xb0>
10010baa:	8063      	strh	r3, [r4, #2]
10010bac:	9b00      	ldr	r3, [sp, #0]
10010bae:	1c39      	adds	r1, r7, #0
10010bb0:	1c58      	adds	r0, r3, #1
10010bb2:	1c32      	adds	r2, r6, #0
10010bb4:	4b15      	ldr	r3, [pc, #84]	; (10010c0c <gapm_get_dev_config_cmd_handler+0xdc>)
10010bb6:	4798      	blx	r3
10010bb8:	79bb      	ldrb	r3, [r7, #6]
10010bba:	9a00      	ldr	r2, [sp, #0]
10010bbc:	7013      	strb	r3, [r2, #0]
10010bbe:	23d0      	movs	r3, #208	; 0xd0
10010bc0:	011b      	lsls	r3, r3, #4
10010bc2:	8023      	strh	r3, [r4, #0]
10010bc4:	ab02      	add	r3, sp, #8
10010bc6:	80a5      	strh	r5, [r4, #4]
10010bc8:	1ddd      	adds	r5, r3, #7
10010bca:	466b      	mov	r3, sp
10010bcc:	791b      	ldrb	r3, [r3, #4]
10010bce:	1c28      	adds	r0, r5, #0
10010bd0:	702b      	strb	r3, [r5, #0]
10010bd2:	4b0c      	ldr	r3, [pc, #48]	; (10010c04 <gapm_get_dev_config_cmd_handler+0xd4>)
10010bd4:	4798      	blx	r3
10010bd6:	782b      	ldrb	r3, [r5, #0]
10010bd8:	20d0      	movs	r0, #208	; 0xd0
10010bda:	2b00      	cmp	r3, #0
10010bdc:	d105      	bne.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010bde:	68a7      	ldr	r7, [r4, #8]
10010be0:	783b      	ldrb	r3, [r7, #0]
10010be2:	7878      	ldrb	r0, [r7, #1]
10010be4:	2b06      	cmp	r3, #6
10010be6:	d000      	beq.n	10010bea <gapm_get_dev_config_cmd_handler+0xba>
10010be8:	20e2      	movs	r0, #226	; 0xe2
10010bea:	b005      	add	sp, #20
10010bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bee:	46c0      	nop			; (mov r8, r8)
10010bf0:	1001ad20 	.word	0x1001ad20
10010bf4:	1001b090 	.word	0x1001b090
10010bf8:	1001ad14 	.word	0x1001ad14
10010bfc:	00000d08 	.word	0x00000d08
10010c00:	1000fde1 	.word	0x1000fde1
10010c04:	1000fe45 	.word	0x1000fe45
10010c08:	0000ffff 	.word	0x0000ffff
10010c0c:	100156bf 	.word	0x100156bf

10010c10 <gapm_cancel_cmd_handler>:
10010c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010c12:	4916      	ldr	r1, [pc, #88]	; (10010c6c <gapm_cancel_cmd_handler+0x5c>)
10010c14:	4816      	ldr	r0, [pc, #88]	; (10010c70 <gapm_cancel_cmd_handler+0x60>)
10010c16:	880c      	ldrh	r4, [r1, #0]
10010c18:	8809      	ldrh	r1, [r1, #0]
10010c1a:	466b      	mov	r3, sp
10010c1c:	0a09      	lsrs	r1, r1, #8
10010c1e:	7141      	strb	r1, [r0, #5]
10010c20:	2102      	movs	r1, #2
10010c22:	2203      	movs	r2, #3
10010c24:	7201      	strb	r1, [r0, #8]
10010c26:	21d0      	movs	r1, #208	; 0xd0
10010c28:	1ddd      	adds	r5, r3, #7
10010c2a:	2300      	movs	r3, #0
10010c2c:	7104      	strb	r4, [r0, #4]
10010c2e:	4c11      	ldr	r4, [pc, #68]	; (10010c74 <gapm_cancel_cmd_handler+0x64>)
10010c30:	7002      	strb	r2, [r0, #0]
10010c32:	0109      	lsls	r1, r1, #4
10010c34:	320a      	adds	r2, #10
10010c36:	702b      	strb	r3, [r5, #0]
10010c38:	7042      	strb	r2, [r0, #1]
10010c3a:	7082      	strb	r2, [r0, #2]
10010c3c:	70c3      	strb	r3, [r0, #3]
10010c3e:	8021      	strh	r1, [r4, #0]
10010c40:	80a2      	strh	r2, [r4, #4]
10010c42:	71c3      	strb	r3, [r0, #7]
10010c44:	3a0c      	subs	r2, #12
10010c46:	2109      	movs	r1, #9
10010c48:	4b0b      	ldr	r3, [pc, #44]	; (10010c78 <gapm_cancel_cmd_handler+0x68>)
10010c4a:	7182      	strb	r2, [r0, #6]
10010c4c:	4798      	blx	r3
10010c4e:	1c28      	adds	r0, r5, #0
10010c50:	4b0a      	ldr	r3, [pc, #40]	; (10010c7c <gapm_cancel_cmd_handler+0x6c>)
10010c52:	4798      	blx	r3
10010c54:	7828      	ldrb	r0, [r5, #0]
10010c56:	2800      	cmp	r0, #0
10010c58:	d001      	beq.n	10010c5e <gapm_cancel_cmd_handler+0x4e>
10010c5a:	20e2      	movs	r0, #226	; 0xe2
10010c5c:	e004      	b.n	10010c68 <gapm_cancel_cmd_handler+0x58>
10010c5e:	68a3      	ldr	r3, [r4, #8]
10010c60:	785b      	ldrb	r3, [r3, #1]
10010c62:	2b44      	cmp	r3, #68	; 0x44
10010c64:	d000      	beq.n	10010c68 <gapm_cancel_cmd_handler+0x58>
10010c66:	1c18      	adds	r0, r3, #0
10010c68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010c6a:	46c0      	nop			; (mov r8, r8)
10010c6c:	1001ad20 	.word	0x1001ad20
10010c70:	1001b090 	.word	0x1001b090
10010c74:	1001ad14 	.word	0x1001ad14
10010c78:	1000fde1 	.word	0x1000fde1
10010c7c:	1000fe45 	.word	0x1000fe45

10010c80 <gapm_dev_bdaddr_ind_handler>:
10010c80:	b538      	push	{r3, r4, r5, lr}
10010c82:	1c05      	adds	r5, r0, #0
10010c84:	1c0c      	adds	r4, r1, #0
10010c86:	1c48      	adds	r0, r1, #1
10010c88:	2206      	movs	r2, #6
10010c8a:	1c29      	adds	r1, r5, #0
10010c8c:	4b02      	ldr	r3, [pc, #8]	; (10010c98 <gapm_dev_bdaddr_ind_handler+0x18>)
10010c8e:	4798      	blx	r3
10010c90:	79ab      	ldrb	r3, [r5, #6]
10010c92:	2000      	movs	r0, #0
10010c94:	7023      	strb	r3, [r4, #0]
10010c96:	bd38      	pop	{r3, r4, r5, pc}
10010c98:	100156bf 	.word	0x100156bf

10010c9c <gapm_cmp_evt>:
10010c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c9e:	7803      	ldrb	r3, [r0, #0]
10010ca0:	7845      	ldrb	r5, [r0, #1]
10010ca2:	3b0c      	subs	r3, #12
10010ca4:	1e18      	subs	r0, r3, #0
10010ca6:	280b      	cmp	r0, #11
10010ca8:	d900      	bls.n	10010cac <gapm_cmp_evt+0x10>
10010caa:	e08d      	b.n	10010dc8 <gapm_cmp_evt+0x12c>
10010cac:	1c0c      	adds	r4, r1, #0
10010cae:	f001 fe6f 	bl	10012990 <__gnu_thumb1_case_uqi>
10010cb2:	1952      	.short	0x1952
10010cb4:	068b1919 	.word	0x068b1919
10010cb8:	8b595906 	.word	0x8b595906
10010cbc:	0d8b      	.short	0x0d8b
10010cbe:	2300      	movs	r3, #0
10010cc0:	2d45      	cmp	r5, #69	; 0x45
10010cc2:	d000      	beq.n	10010cc6 <gapm_cmp_evt+0x2a>
10010cc4:	1c2b      	adds	r3, r5, #0
10010cc6:	7023      	strb	r3, [r4, #0]
10010cc8:	2002      	movs	r0, #2
10010cca:	e07e      	b.n	10010dca <gapm_cmp_evt+0x12e>
10010ccc:	203b      	movs	r0, #59	; 0x3b
10010cce:	2d00      	cmp	r5, #0
10010cd0:	d100      	bne.n	10010cd4 <gapm_cmp_evt+0x38>
10010cd2:	e07a      	b.n	10010dca <gapm_cmp_evt+0x12e>
10010cd4:	700d      	strb	r5, [r1, #0]
10010cd6:	1c48      	adds	r0, r1, #1
10010cd8:	2210      	movs	r2, #16
10010cda:	2100      	movs	r1, #0
10010cdc:	4b3b      	ldr	r3, [pc, #236]	; (10010dcc <gapm_cmp_evt+0x130>)
10010cde:	4798      	blx	r3
10010ce0:	200f      	movs	r0, #15
10010ce2:	e072      	b.n	10010dca <gapm_cmp_evt+0x12e>
10010ce4:	2d00      	cmp	r5, #0
10010ce6:	d134      	bne.n	10010d52 <gapm_cmp_evt+0xb6>
10010ce8:	4b39      	ldr	r3, [pc, #228]	; (10010dd0 <gapm_cmp_evt+0x134>)
10010cea:	4798      	blx	r3
10010cec:	1e43      	subs	r3, r0, #1
10010cee:	b2db      	uxtb	r3, r3
10010cf0:	1c28      	adds	r0, r5, #0
10010cf2:	2b06      	cmp	r3, #6
10010cf4:	d869      	bhi.n	10010dca <gapm_cmp_evt+0x12e>
10010cf6:	466b      	mov	r3, sp
10010cf8:	4e36      	ldr	r6, [pc, #216]	; (10010dd4 <gapm_cmp_evt+0x138>)
10010cfa:	1dd9      	adds	r1, r3, #7
10010cfc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010cfe:	4b36      	ldr	r3, [pc, #216]	; (10010dd8 <gapm_cmp_evt+0x13c>)
10010d00:	4798      	blx	r3
10010d02:	2312      	movs	r3, #18
10010d04:	4358      	muls	r0, r3
10010d06:	4935      	ldr	r1, [pc, #212]	; (10010ddc <gapm_cmp_evt+0x140>)
10010d08:	1809      	adds	r1, r1, r0
10010d0a:	1c0b      	adds	r3, r1, #0
10010d0c:	894a      	ldrh	r2, [r1, #10]
10010d0e:	3308      	adds	r3, #8
10010d10:	8122      	strh	r2, [r4, #8]
10010d12:	784f      	ldrb	r7, [r1, #1]
10010d14:	72a5      	strb	r5, [r4, #10]
10010d16:	7027      	strb	r7, [r4, #0]
10010d18:	898a      	ldrh	r2, [r1, #12]
10010d1a:	1c60      	adds	r0, r4, #1
10010d1c:	81a2      	strh	r2, [r4, #12]
10010d1e:	88db      	ldrh	r3, [r3, #6]
10010d20:	3102      	adds	r1, #2
10010d22:	81e3      	strh	r3, [r4, #14]
10010d24:	89cb      	ldrh	r3, [r1, #14]
10010d26:	2206      	movs	r2, #6
10010d28:	8223      	strh	r3, [r4, #16]
10010d2a:	4b2d      	ldr	r3, [pc, #180]	; (10010de0 <gapm_cmp_evt+0x144>)
10010d2c:	4798      	blx	r3
10010d2e:	2f00      	cmp	r7, #0
10010d30:	d00a      	beq.n	10010d48 <gapm_cmp_evt+0xac>
10010d32:	79a3      	ldrb	r3, [r4, #6]
10010d34:	223f      	movs	r2, #63	; 0x3f
10010d36:	1c19      	adds	r1, r3, #0
10010d38:	3501      	adds	r5, #1
10010d3a:	4391      	bics	r1, r2
10010d3c:	29c0      	cmp	r1, #192	; 0xc0
10010d3e:	d003      	beq.n	10010d48 <gapm_cmp_evt+0xac>
10010d40:	065b      	lsls	r3, r3, #25
10010d42:	0fdb      	lsrs	r3, r3, #31
10010d44:	3502      	adds	r5, #2
10010d46:	1aed      	subs	r5, r5, r3
10010d48:	2301      	movs	r3, #1
10010d4a:	425b      	negs	r3, r3
10010d4c:	7025      	strb	r5, [r4, #0]
10010d4e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010d50:	e038      	b.n	10010dc4 <gapm_cmp_evt+0x128>
10010d52:	700d      	strb	r5, [r1, #0]
10010d54:	e004      	b.n	10010d60 <gapm_cmp_evt+0xc4>
10010d56:	2300      	movs	r3, #0
10010d58:	2d45      	cmp	r5, #69	; 0x45
10010d5a:	d000      	beq.n	10010d5e <gapm_cmp_evt+0xc2>
10010d5c:	1c2b      	adds	r3, r5, #0
10010d5e:	7023      	strb	r3, [r4, #0]
10010d60:	2003      	movs	r0, #3
10010d62:	e032      	b.n	10010dca <gapm_cmp_evt+0x12e>
10010d64:	4e1b      	ldr	r6, [pc, #108]	; (10010dd4 <gapm_cmp_evt+0x138>)
10010d66:	2100      	movs	r1, #0
10010d68:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010d6a:	4b1b      	ldr	r3, [pc, #108]	; (10010dd8 <gapm_cmp_evt+0x13c>)
10010d6c:	4798      	blx	r3
10010d6e:	2807      	cmp	r0, #7
10010d70:	d818      	bhi.n	10010da4 <gapm_cmp_evt+0x108>
10010d72:	2301      	movs	r3, #1
10010d74:	425b      	negs	r3, r3
10010d76:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010d78:	3313      	adds	r3, #19
10010d7a:	4358      	muls	r0, r3
10010d7c:	4917      	ldr	r1, [pc, #92]	; (10010ddc <gapm_cmp_evt+0x140>)
10010d7e:	1809      	adds	r1, r1, r0
10010d80:	1c0b      	adds	r3, r1, #0
10010d82:	894a      	ldrh	r2, [r1, #10]
10010d84:	3308      	adds	r3, #8
10010d86:	8122      	strh	r2, [r4, #8]
10010d88:	784a      	ldrb	r2, [r1, #1]
10010d8a:	72a5      	strb	r5, [r4, #10]
10010d8c:	7022      	strb	r2, [r4, #0]
10010d8e:	898a      	ldrh	r2, [r1, #12]
10010d90:	1c60      	adds	r0, r4, #1
10010d92:	81a2      	strh	r2, [r4, #12]
10010d94:	88db      	ldrh	r3, [r3, #6]
10010d96:	3102      	adds	r1, #2
10010d98:	81e3      	strh	r3, [r4, #14]
10010d9a:	89cb      	ldrh	r3, [r1, #14]
10010d9c:	2206      	movs	r2, #6
10010d9e:	8223      	strh	r3, [r4, #16]
10010da0:	4b0f      	ldr	r3, [pc, #60]	; (10010de0 <gapm_cmp_evt+0x144>)
10010da2:	4798      	blx	r3
10010da4:	2200      	movs	r2, #0
10010da6:	7823      	ldrb	r3, [r4, #0]
10010da8:	4293      	cmp	r3, r2
10010daa:	d00a      	beq.n	10010dc2 <gapm_cmp_evt+0x126>
10010dac:	79a3      	ldrb	r3, [r4, #6]
10010dae:	323f      	adds	r2, #63	; 0x3f
10010db0:	1c19      	adds	r1, r3, #0
10010db2:	4391      	bics	r1, r2
10010db4:	3a3e      	subs	r2, #62	; 0x3e
10010db6:	29c0      	cmp	r1, #192	; 0xc0
10010db8:	d003      	beq.n	10010dc2 <gapm_cmp_evt+0x126>
10010dba:	065b      	lsls	r3, r3, #25
10010dbc:	0fdb      	lsrs	r3, r3, #31
10010dbe:	3202      	adds	r2, #2
10010dc0:	1ad2      	subs	r2, r2, r3
10010dc2:	7022      	strb	r2, [r4, #0]
10010dc4:	2005      	movs	r0, #5
10010dc6:	e000      	b.n	10010dca <gapm_cmp_evt+0x12e>
10010dc8:	2000      	movs	r0, #0
10010dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010dcc:	100156d1 	.word	0x100156d1
10010dd0:	1000ffed 	.word	0x1000ffed
10010dd4:	1001adb2 	.word	0x1001adb2
10010dd8:	1000ffb1 	.word	0x1000ffb1
10010ddc:	1001ad22 	.word	0x1001ad22
10010de0:	100156bf 	.word	0x100156bf

10010de4 <gapm_start_adv_cmd_handler>:
10010de4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010de6:	b089      	sub	sp, #36	; 0x24
10010de8:	9303      	str	r3, [sp, #12]
10010dea:	ab0e      	add	r3, sp, #56	; 0x38
10010dec:	9102      	str	r1, [sp, #8]
10010dee:	cb02      	ldmia	r3!, {r1}
10010df0:	aa08      	add	r2, sp, #32
10010df2:	881b      	ldrh	r3, [r3, #0]
10010df4:	4e3c      	ldr	r6, [pc, #240]	; (10010ee8 <gapm_start_adv_cmd_handler+0x104>)
10010df6:	9300      	str	r3, [sp, #0]
10010df8:	ab10      	add	r3, sp, #64	; 0x40
10010dfa:	881b      	ldrh	r3, [r3, #0]
10010dfc:	240d      	movs	r4, #13
10010dfe:	469c      	mov	ip, r3
10010e00:	ab11      	add	r3, sp, #68	; 0x44
10010e02:	781b      	ldrb	r3, [r3, #0]
10010e04:	9304      	str	r3, [sp, #16]
10010e06:	ab12      	add	r3, sp, #72	; 0x48
10010e08:	781b      	ldrb	r3, [r3, #0]
10010e0a:	9305      	str	r3, [sp, #20]
10010e0c:	ab13      	add	r3, sp, #76	; 0x4c
10010e0e:	781b      	ldrb	r3, [r3, #0]
10010e10:	9306      	str	r3, [sp, #24]
10010e12:	ab14      	add	r3, sp, #80	; 0x50
10010e14:	781b      	ldrb	r3, [r3, #0]
10010e16:	9301      	str	r3, [sp, #4]
10010e18:	2319      	movs	r3, #25
10010e1a:	189b      	adds	r3, r3, r2
10010e1c:	7fdd      	ldrb	r5, [r3, #31]
10010e1e:	ab18      	add	r3, sp, #96	; 0x60
10010e20:	881f      	ldrh	r7, [r3, #0]
10010e22:	ab19      	add	r3, sp, #100	; 0x64
10010e24:	781b      	ldrb	r3, [r3, #0]
10010e26:	8832      	ldrh	r2, [r6, #0]
10010e28:	9307      	str	r3, [sp, #28]
10010e2a:	4b30      	ldr	r3, [pc, #192]	; (10010eec <gapm_start_adv_cmd_handler+0x108>)
10010e2c:	8836      	ldrh	r6, [r6, #0]
10010e2e:	711a      	strb	r2, [r3, #4]
10010e30:	466a      	mov	r2, sp
10010e32:	7a12      	ldrb	r2, [r2, #8]
10010e34:	701c      	strb	r4, [r3, #0]
10010e36:	705c      	strb	r4, [r3, #1]
10010e38:	709c      	strb	r4, [r3, #2]
10010e3a:	725a      	strb	r2, [r3, #9]
10010e3c:	2400      	movs	r4, #0
10010e3e:	466a      	mov	r2, sp
10010e40:	0a36      	lsrs	r6, r6, #8
10010e42:	70dc      	strb	r4, [r3, #3]
10010e44:	7218      	strb	r0, [r3, #8]
10010e46:	729c      	strb	r4, [r3, #10]
10010e48:	715e      	strb	r6, [r3, #5]
10010e4a:	72dc      	strb	r4, [r3, #11]
10010e4c:	7812      	ldrb	r2, [r2, #0]
10010e4e:	380e      	subs	r0, #14
10010e50:	731a      	strb	r2, [r3, #12]
10010e52:	9a00      	ldr	r2, [sp, #0]
10010e54:	0a14      	lsrs	r4, r2, #8
10010e56:	4662      	mov	r2, ip
10010e58:	739a      	strb	r2, [r3, #14]
10010e5a:	4662      	mov	r2, ip
10010e5c:	735c      	strb	r4, [r3, #13]
10010e5e:	0a14      	lsrs	r4, r2, #8
10010e60:	466a      	mov	r2, sp
10010e62:	7c12      	ldrb	r2, [r2, #16]
10010e64:	73dc      	strb	r4, [r3, #15]
10010e66:	741a      	strb	r2, [r3, #16]
10010e68:	1c1c      	adds	r4, r3, #0
10010e6a:	2801      	cmp	r0, #1
10010e6c:	d809      	bhi.n	10010e82 <gapm_start_adv_cmd_handler+0x9e>
10010e6e:	2900      	cmp	r1, #0
10010e70:	d003      	beq.n	10010e7a <gapm_start_adv_cmd_handler+0x96>
10010e72:	481f      	ldr	r0, [pc, #124]	; (10010ef0 <gapm_start_adv_cmd_handler+0x10c>)
10010e74:	2206      	movs	r2, #6
10010e76:	4b1f      	ldr	r3, [pc, #124]	; (10010ef4 <gapm_start_adv_cmd_handler+0x110>)
10010e78:	4798      	blx	r3
10010e7a:	466b      	mov	r3, sp
10010e7c:	7b1b      	ldrb	r3, [r3, #12]
10010e7e:	75e3      	strb	r3, [r4, #23]
10010e80:	e014      	b.n	10010eac <gapm_start_adv_cmd_handler+0xc8>
10010e82:	466b      	mov	r3, sp
10010e84:	7d1b      	ldrb	r3, [r3, #20]
10010e86:	9915      	ldr	r1, [sp, #84]	; 0x54
10010e88:	7463      	strb	r3, [r4, #17]
10010e8a:	466b      	mov	r3, sp
10010e8c:	7e1b      	ldrb	r3, [r3, #24]
10010e8e:	9a01      	ldr	r2, [sp, #4]
10010e90:	74a3      	strb	r3, [r4, #18]
10010e92:	466b      	mov	r3, sp
10010e94:	791b      	ldrb	r3, [r3, #4]
10010e96:	4818      	ldr	r0, [pc, #96]	; (10010ef8 <gapm_start_adv_cmd_handler+0x114>)
10010e98:	4e16      	ldr	r6, [pc, #88]	; (10010ef4 <gapm_start_adv_cmd_handler+0x110>)
10010e9a:	74e3      	strb	r3, [r4, #19]
10010e9c:	47b0      	blx	r6
10010e9e:	1c23      	adds	r3, r4, #0
10010ea0:	4816      	ldr	r0, [pc, #88]	; (10010efc <gapm_start_adv_cmd_handler+0x118>)
10010ea2:	3330      	adds	r3, #48	; 0x30
10010ea4:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010ea6:	1c2a      	adds	r2, r5, #0
10010ea8:	701d      	strb	r5, [r3, #0]
10010eaa:	47b0      	blx	r6
10010eac:	1c22      	adds	r2, r4, #0
10010eae:	23a5      	movs	r3, #165	; 0xa5
10010eb0:	3250      	adds	r2, #80	; 0x50
10010eb2:	7013      	strb	r3, [r2, #0]
10010eb4:	1c22      	adds	r2, r4, #0
10010eb6:	3251      	adds	r2, #81	; 0x51
10010eb8:	7013      	strb	r3, [r2, #0]
10010eba:	1c23      	adds	r3, r4, #0
10010ebc:	1c22      	adds	r2, r4, #0
10010ebe:	3352      	adds	r3, #82	; 0x52
10010ec0:	701f      	strb	r7, [r3, #0]
10010ec2:	3253      	adds	r2, #83	; 0x53
10010ec4:	0a3b      	lsrs	r3, r7, #8
10010ec6:	7013      	strb	r3, [r2, #0]
10010ec8:	466a      	mov	r2, sp
10010eca:	1c23      	adds	r3, r4, #0
10010ecc:	7f12      	ldrb	r2, [r2, #28]
10010ece:	3354      	adds	r3, #84	; 0x54
10010ed0:	701a      	strb	r2, [r3, #0]
10010ed2:	234d      	movs	r3, #77	; 0x4d
10010ed4:	2500      	movs	r5, #0
10010ed6:	71a3      	strb	r3, [r4, #6]
10010ed8:	1c20      	adds	r0, r4, #0
10010eda:	2155      	movs	r1, #85	; 0x55
10010edc:	4b08      	ldr	r3, [pc, #32]	; (10010f00 <gapm_start_adv_cmd_handler+0x11c>)
10010ede:	71e5      	strb	r5, [r4, #7]
10010ee0:	4798      	blx	r3
10010ee2:	1c28      	adds	r0, r5, #0
10010ee4:	b009      	add	sp, #36	; 0x24
10010ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ee8:	1001ad20 	.word	0x1001ad20
10010eec:	1001b090 	.word	0x1001b090
10010ef0:	1001b0a1 	.word	0x1001b0a1
10010ef4:	100156bf 	.word	0x100156bf
10010ef8:	1001b0a4 	.word	0x1001b0a4
10010efc:	1001b0c1 	.word	0x1001b0c1
10010f00:	1000fde1 	.word	0x1000fde1

10010f04 <get_gap_local_addr_type>:
10010f04:	4b04      	ldr	r3, [pc, #16]	; (10010f18 <get_gap_local_addr_type+0x14>)
10010f06:	2001      	movs	r0, #1
10010f08:	791b      	ldrb	r3, [r3, #4]
10010f0a:	2b02      	cmp	r3, #2
10010f0c:	d003      	beq.n	10010f16 <get_gap_local_addr_type+0x12>
10010f0e:	3b03      	subs	r3, #3
10010f10:	4258      	negs	r0, r3
10010f12:	4158      	adcs	r0, r3
10010f14:	0040      	lsls	r0, r0, #1
10010f16:	4770      	bx	lr
10010f18:	1001adb2 	.word	0x1001adb2

10010f1c <gapm_adv_report_evt_handler>:
10010f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010f1e:	7843      	ldrb	r3, [r0, #1]
10010f20:	1c05      	adds	r5, r0, #0
10010f22:	9301      	str	r3, [sp, #4]
10010f24:	466b      	mov	r3, sp
10010f26:	1c0c      	adds	r4, r1, #0
10010f28:	791b      	ldrb	r3, [r3, #4]
10010f2a:	7806      	ldrb	r6, [r0, #0]
10010f2c:	2206      	movs	r2, #6
10010f2e:	704b      	strb	r3, [r1, #1]
10010f30:	1c88      	adds	r0, r1, #2
10010f32:	4f1b      	ldr	r7, [pc, #108]	; (10010fa0 <gapm_adv_report_evt_handler+0x84>)
10010f34:	1ca9      	adds	r1, r5, #2
10010f36:	47b8      	blx	r7
10010f38:	1c20      	adds	r0, r4, #0
10010f3a:	1c29      	adds	r1, r5, #0
10010f3c:	7a2a      	ldrb	r2, [r5, #8]
10010f3e:	3008      	adds	r0, #8
10010f40:	77c2      	strb	r2, [r0, #31]
10010f42:	3109      	adds	r1, #9
10010f44:	3528      	adds	r5, #40	; 0x28
10010f46:	47b8      	blx	r7
10010f48:	782b      	ldrb	r3, [r5, #0]
10010f4a:	b25a      	sxtb	r2, r3
10010f4c:	2a00      	cmp	r2, #0
10010f4e:	da01      	bge.n	10010f54 <gapm_adv_report_evt_handler+0x38>
10010f50:	3301      	adds	r3, #1
10010f52:	b2db      	uxtb	r3, r3
10010f54:	1c22      	adds	r2, r4, #0
10010f56:	3228      	adds	r2, #40	; 0x28
10010f58:	7013      	strb	r3, [r2, #0]
10010f5a:	2200      	movs	r2, #0
10010f5c:	9b01      	ldr	r3, [sp, #4]
10010f5e:	4293      	cmp	r3, r2
10010f60:	d00a      	beq.n	10010f78 <gapm_adv_report_evt_handler+0x5c>
10010f62:	79e3      	ldrb	r3, [r4, #7]
10010f64:	323f      	adds	r2, #63	; 0x3f
10010f66:	1c19      	adds	r1, r3, #0
10010f68:	4391      	bics	r1, r2
10010f6a:	3a3e      	subs	r2, #62	; 0x3e
10010f6c:	29c0      	cmp	r1, #192	; 0xc0
10010f6e:	d003      	beq.n	10010f78 <gapm_adv_report_evt_handler+0x5c>
10010f70:	065b      	lsls	r3, r3, #25
10010f72:	0fdb      	lsrs	r3, r3, #31
10010f74:	3202      	adds	r2, #2
10010f76:	1ad2      	subs	r2, r2, r3
10010f78:	7062      	strb	r2, [r4, #1]
10010f7a:	2e04      	cmp	r6, #4
10010f7c:	d80f      	bhi.n	10010f9e <gapm_adv_report_evt_handler+0x82>
10010f7e:	1c30      	adds	r0, r6, #0
10010f80:	f001 fd06 	bl	10012990 <__gnu_thumb1_case_uqi>
10010f84:	09070503 	.word	0x09070503
10010f88:	0b          	.byte	0x0b
10010f89:	00          	.byte	0x00
10010f8a:	2300      	movs	r3, #0
10010f8c:	e006      	b.n	10010f9c <gapm_adv_report_evt_handler+0x80>
10010f8e:	2301      	movs	r3, #1
10010f90:	e004      	b.n	10010f9c <gapm_adv_report_evt_handler+0x80>
10010f92:	2302      	movs	r3, #2
10010f94:	e002      	b.n	10010f9c <gapm_adv_report_evt_handler+0x80>
10010f96:	2303      	movs	r3, #3
10010f98:	e000      	b.n	10010f9c <gapm_adv_report_evt_handler+0x80>
10010f9a:	2305      	movs	r3, #5
10010f9c:	7023      	strb	r3, [r4, #0]
10010f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010fa0:	100156bf 	.word	0x100156bf

10010fa4 <gapm_resolv_addr_cmd_handler>:
10010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010fa6:	2314      	movs	r3, #20
10010fa8:	4c12      	ldr	r4, [pc, #72]	; (10010ff4 <gapm_resolv_addr_cmd_handler+0x50>)
10010faa:	1c17      	adds	r7, r2, #0
10010fac:	7023      	strb	r3, [r4, #0]
10010fae:	3b07      	subs	r3, #7
10010fb0:	7063      	strb	r3, [r4, #1]
10010fb2:	70a3      	strb	r3, [r4, #2]
10010fb4:	2300      	movs	r3, #0
10010fb6:	70e3      	strb	r3, [r4, #3]
10010fb8:	4b0f      	ldr	r3, [pc, #60]	; (10010ff8 <gapm_resolv_addr_cmd_handler+0x54>)
10010fba:	1c05      	adds	r5, r0, #0
10010fbc:	881a      	ldrh	r2, [r3, #0]
10010fbe:	881b      	ldrh	r3, [r3, #0]
10010fc0:	4e0e      	ldr	r6, [pc, #56]	; (10010ffc <gapm_resolv_addr_cmd_handler+0x58>)
10010fc2:	0a1b      	lsrs	r3, r3, #8
10010fc4:	7163      	strb	r3, [r4, #5]
10010fc6:	2317      	movs	r3, #23
10010fc8:	012d      	lsls	r5, r5, #4
10010fca:	7122      	strb	r2, [r4, #4]
10010fcc:	7260      	strb	r0, [r4, #9]
10010fce:	2206      	movs	r2, #6
10010fd0:	480b      	ldr	r0, [pc, #44]	; (10011000 <gapm_resolv_addr_cmd_handler+0x5c>)
10010fd2:	7223      	strb	r3, [r4, #8]
10010fd4:	47b0      	blx	r6
10010fd6:	1c39      	adds	r1, r7, #0
10010fd8:	1c2a      	adds	r2, r5, #0
10010fda:	480a      	ldr	r0, [pc, #40]	; (10011004 <gapm_resolv_addr_cmd_handler+0x60>)
10010fdc:	47b0      	blx	r6
10010fde:	1c29      	adds	r1, r5, #0
10010fe0:	3110      	adds	r1, #16
10010fe2:	1c0b      	adds	r3, r1, #0
10010fe4:	3b08      	subs	r3, #8
10010fe6:	71a3      	strb	r3, [r4, #6]
10010fe8:	121b      	asrs	r3, r3, #8
10010fea:	71e3      	strb	r3, [r4, #7]
10010fec:	1c20      	adds	r0, r4, #0
10010fee:	4b06      	ldr	r3, [pc, #24]	; (10011008 <gapm_resolv_addr_cmd_handler+0x64>)
10010ff0:	4798      	blx	r3
10010ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ff4:	1001b090 	.word	0x1001b090
10010ff8:	1001ad20 	.word	0x1001ad20
10010ffc:	100156bf 	.word	0x100156bf
10011000:	1001b09a 	.word	0x1001b09a
10011004:	1001b0a0 	.word	0x1001b0a0
10011008:	1000fde1 	.word	0x1000fde1

1001100c <gapm_addr_solved_ind_handler>:
1001100c:	b570      	push	{r4, r5, r6, lr}
1001100e:	1c04      	adds	r4, r0, #0
10011010:	1c08      	adds	r0, r1, #0
10011012:	1c0d      	adds	r5, r1, #0
10011014:	4e05      	ldr	r6, [pc, #20]	; (1001102c <gapm_addr_solved_ind_handler+0x20>)
10011016:	1c21      	adds	r1, r4, #0
10011018:	2206      	movs	r2, #6
1001101a:	3011      	adds	r0, #17
1001101c:	47b0      	blx	r6
1001101e:	1c68      	adds	r0, r5, #1
10011020:	1da1      	adds	r1, r4, #6
10011022:	2210      	movs	r2, #16
10011024:	47b0      	blx	r6
10011026:	2300      	movs	r3, #0
10011028:	702b      	strb	r3, [r5, #0]
1001102a:	bd70      	pop	{r4, r5, r6, pc}
1001102c:	100156bf 	.word	0x100156bf

10011030 <gapm_profile_added_ind_handler>:
10011030:	b510      	push	{r4, lr}
10011032:	7843      	ldrb	r3, [r0, #1]
10011034:	7902      	ldrb	r2, [r0, #4]
10011036:	7944      	ldrb	r4, [r0, #5]
10011038:	7800      	ldrb	r0, [r0, #0]
1001103a:	021b      	lsls	r3, r3, #8
1001103c:	4303      	orrs	r3, r0
1001103e:	2b1b      	cmp	r3, #27
10011040:	d104      	bne.n	1001104c <gapm_profile_added_ind_handler+0x1c>
10011042:	2300      	movs	r3, #0
10011044:	700b      	strb	r3, [r1, #0]
10011046:	0223      	lsls	r3, r4, #8
10011048:	4313      	orrs	r3, r2
1001104a:	804b      	strh	r3, [r1, #2]
1001104c:	203b      	movs	r0, #59	; 0x3b
1001104e:	bd10      	pop	{r4, pc}

10011050 <gattc_read_req_ind_parser>:
10011050:	7843      	ldrb	r3, [r0, #1]
10011052:	7802      	ldrb	r2, [r0, #0]
10011054:	021b      	lsls	r3, r3, #8
10011056:	4313      	orrs	r3, r2
10011058:	804b      	strh	r3, [r1, #2]
1001105a:	4770      	bx	lr

1001105c <gattc_write_req_ind_parser>:
1001105c:	b508      	push	{r3, lr}
1001105e:	1c13      	adds	r3, r2, #0
10011060:	0a00      	lsrs	r0, r0, #8
10011062:	8010      	strh	r0, [r2, #0]
10011064:	784a      	ldrb	r2, [r1, #1]
10011066:	7808      	ldrb	r0, [r1, #0]
10011068:	0212      	lsls	r2, r2, #8
1001106a:	4302      	orrs	r2, r0
1001106c:	805a      	strh	r2, [r3, #2]
1001106e:	78ca      	ldrb	r2, [r1, #3]
10011070:	7888      	ldrb	r0, [r1, #2]
10011072:	0212      	lsls	r2, r2, #8
10011074:	4302      	orrs	r2, r0
10011076:	809a      	strh	r2, [r3, #4]
10011078:	794a      	ldrb	r2, [r1, #5]
1001107a:	7908      	ldrb	r0, [r1, #4]
1001107c:	0212      	lsls	r2, r2, #8
1001107e:	4302      	orrs	r2, r0
10011080:	80da      	strh	r2, [r3, #6]
10011082:	3308      	adds	r3, #8
10011084:	1c18      	adds	r0, r3, #0
10011086:	3106      	adds	r1, #6
10011088:	4b01      	ldr	r3, [pc, #4]	; (10011090 <gattc_write_req_ind_parser+0x34>)
1001108a:	4798      	blx	r3
1001108c:	bd08      	pop	{r3, pc}
1001108e:	46c0      	nop			; (mov r8, r8)
10011090:	100156bf 	.word	0x100156bf

10011094 <gattc_att_info_req_parser>:
10011094:	7843      	ldrb	r3, [r0, #1]
10011096:	7802      	ldrb	r2, [r0, #0]
10011098:	021b      	lsls	r3, r3, #8
1001109a:	4313      	orrs	r3, r2
1001109c:	800b      	strh	r3, [r1, #0]
1001109e:	4770      	bx	lr

100110a0 <gattc_read_cfm>:
100110a0:	b538      	push	{r3, r4, r5, lr}
100110a2:	2514      	movs	r5, #20
100110a4:	1c1c      	adds	r4, r3, #0
100110a6:	4b14      	ldr	r3, [pc, #80]	; (100110f8 <gattc_read_cfm+0x58>)
100110a8:	70d9      	strb	r1, [r3, #3]
100110aa:	4914      	ldr	r1, [pc, #80]	; (100110fc <gattc_read_cfm+0x5c>)
100110ac:	701d      	strb	r5, [r3, #0]
100110ae:	3d08      	subs	r5, #8
100110b0:	705d      	strb	r5, [r3, #1]
100110b2:	709d      	strb	r5, [r3, #2]
100110b4:	880d      	ldrh	r5, [r1, #0]
100110b6:	8809      	ldrh	r1, [r1, #0]
100110b8:	7218      	strb	r0, [r3, #8]
100110ba:	0a09      	lsrs	r1, r1, #8
100110bc:	7159      	strb	r1, [r3, #5]
100110be:	0a00      	lsrs	r0, r0, #8
100110c0:	0a21      	lsrs	r1, r4, #8
100110c2:	711d      	strb	r5, [r3, #4]
100110c4:	7258      	strb	r0, [r3, #9]
100110c6:	729c      	strb	r4, [r3, #10]
100110c8:	72d9      	strb	r1, [r3, #11]
100110ca:	731a      	strb	r2, [r3, #12]
100110cc:	1c1d      	adds	r5, r3, #0
100110ce:	2c00      	cmp	r4, #0
100110d0:	d007      	beq.n	100110e2 <gattc_read_cfm+0x42>
100110d2:	9904      	ldr	r1, [sp, #16]
100110d4:	1c22      	adds	r2, r4, #0
100110d6:	480a      	ldr	r0, [pc, #40]	; (10011100 <gattc_read_cfm+0x60>)
100110d8:	4b0a      	ldr	r3, [pc, #40]	; (10011104 <gattc_read_cfm+0x64>)
100110da:	340d      	adds	r4, #13
100110dc:	4798      	blx	r3
100110de:	b2a1      	uxth	r1, r4
100110e0:	e001      	b.n	100110e6 <gattc_read_cfm+0x46>
100110e2:	210e      	movs	r1, #14
100110e4:	735c      	strb	r4, [r3, #13]
100110e6:	1c0b      	adds	r3, r1, #0
100110e8:	3b08      	subs	r3, #8
100110ea:	71ab      	strb	r3, [r5, #6]
100110ec:	121b      	asrs	r3, r3, #8
100110ee:	71eb      	strb	r3, [r5, #7]
100110f0:	1c28      	adds	r0, r5, #0
100110f2:	4b05      	ldr	r3, [pc, #20]	; (10011108 <gattc_read_cfm+0x68>)
100110f4:	4798      	blx	r3
100110f6:	bd38      	pop	{r3, r4, r5, pc}
100110f8:	1001b090 	.word	0x1001b090
100110fc:	1001ad20 	.word	0x1001ad20
10011100:	1001b09d 	.word	0x1001b09d
10011104:	100156bf 	.word	0x100156bf
10011108:	1000fde1 	.word	0x1000fde1

1001110c <gattc_write_cfm>:
1001110c:	4b0d      	ldr	r3, [pc, #52]	; (10011144 <gattc_write_cfm+0x38>)
1001110e:	b510      	push	{r4, lr}
10011110:	729a      	strb	r2, [r3, #10]
10011112:	2203      	movs	r2, #3
10011114:	2416      	movs	r4, #22
10011116:	719a      	strb	r2, [r3, #6]
10011118:	2200      	movs	r2, #0
1001111a:	70d9      	strb	r1, [r3, #3]
1001111c:	490a      	ldr	r1, [pc, #40]	; (10011148 <gattc_write_cfm+0x3c>)
1001111e:	701c      	strb	r4, [r3, #0]
10011120:	3c0a      	subs	r4, #10
10011122:	705c      	strb	r4, [r3, #1]
10011124:	709c      	strb	r4, [r3, #2]
10011126:	880c      	ldrh	r4, [r1, #0]
10011128:	8809      	ldrh	r1, [r1, #0]
1001112a:	7218      	strb	r0, [r3, #8]
1001112c:	0a09      	lsrs	r1, r1, #8
1001112e:	0a00      	lsrs	r0, r0, #8
10011130:	711c      	strb	r4, [r3, #4]
10011132:	7159      	strb	r1, [r3, #5]
10011134:	7258      	strb	r0, [r3, #9]
10011136:	71da      	strb	r2, [r3, #7]
10011138:	1c18      	adds	r0, r3, #0
1001113a:	210b      	movs	r1, #11
1001113c:	4b03      	ldr	r3, [pc, #12]	; (1001114c <gattc_write_cfm+0x40>)
1001113e:	4798      	blx	r3
10011140:	bd10      	pop	{r4, pc}
10011142:	46c0      	nop			; (mov r8, r8)
10011144:	1001b090 	.word	0x1001b090
10011148:	1001ad20 	.word	0x1001ad20
1001114c:	1000fde1 	.word	0x1000fde1

10011150 <gattc_att_info_cfm>:
10011150:	b538      	push	{r3, r4, r5, lr}
10011152:	4c0e      	ldr	r4, [pc, #56]	; (1001118c <gattc_att_info_cfm+0x3c>)
10011154:	2518      	movs	r5, #24
10011156:	7323      	strb	r3, [r4, #12]
10011158:	2305      	movs	r3, #5
1001115a:	71a3      	strb	r3, [r4, #6]
1001115c:	2300      	movs	r3, #0
1001115e:	70e1      	strb	r1, [r4, #3]
10011160:	490b      	ldr	r1, [pc, #44]	; (10011190 <gattc_att_info_cfm+0x40>)
10011162:	7025      	strb	r5, [r4, #0]
10011164:	3d0c      	subs	r5, #12
10011166:	7065      	strb	r5, [r4, #1]
10011168:	70a5      	strb	r5, [r4, #2]
1001116a:	880d      	ldrh	r5, [r1, #0]
1001116c:	8809      	ldrh	r1, [r1, #0]
1001116e:	7220      	strb	r0, [r4, #8]
10011170:	0a09      	lsrs	r1, r1, #8
10011172:	0a00      	lsrs	r0, r0, #8
10011174:	7161      	strb	r1, [r4, #5]
10011176:	7260      	strb	r0, [r4, #9]
10011178:	72a2      	strb	r2, [r4, #10]
1001117a:	71e3      	strb	r3, [r4, #7]
1001117c:	0a12      	lsrs	r2, r2, #8
1001117e:	1c20      	adds	r0, r4, #0
10011180:	210d      	movs	r1, #13
10011182:	4b04      	ldr	r3, [pc, #16]	; (10011194 <gattc_att_info_cfm+0x44>)
10011184:	7125      	strb	r5, [r4, #4]
10011186:	72e2      	strb	r2, [r4, #11]
10011188:	4798      	blx	r3
1001118a:	bd38      	pop	{r3, r4, r5, pc}
1001118c:	1001b090 	.word	0x1001b090
10011190:	1001ad20 	.word	0x1001ad20
10011194:	1000fde1 	.word	0x1000fde1

10011198 <gattc_send_evt_cmd_handler>:
10011198:	b570      	push	{r4, r5, r6, lr}
1001119a:	2610      	movs	r6, #16
1001119c:	ac04      	add	r4, sp, #16
1001119e:	8825      	ldrh	r5, [r4, #0]
100111a0:	4c15      	ldr	r4, [pc, #84]	; (100111f8 <gattc_send_evt_cmd_handler+0x60>)
100111a2:	70e2      	strb	r2, [r4, #3]
100111a4:	4a15      	ldr	r2, [pc, #84]	; (100111fc <gattc_send_evt_cmd_handler+0x64>)
100111a6:	7026      	strb	r6, [r4, #0]
100111a8:	3e04      	subs	r6, #4
100111aa:	7066      	strb	r6, [r4, #1]
100111ac:	70a6      	strb	r6, [r4, #2]
100111ae:	8816      	ldrh	r6, [r2, #0]
100111b0:	8812      	ldrh	r2, [r2, #0]
100111b2:	7220      	strb	r0, [r4, #8]
100111b4:	0a12      	lsrs	r2, r2, #8
100111b6:	7162      	strb	r2, [r4, #5]
100111b8:	4a11      	ldr	r2, [pc, #68]	; (10011200 <gattc_send_evt_cmd_handler+0x68>)
100111ba:	7321      	strb	r1, [r4, #12]
100111bc:	8812      	ldrh	r2, [r2, #0]
100111be:	73a5      	strb	r5, [r4, #14]
100111c0:	3201      	adds	r2, #1
100111c2:	7262      	strb	r2, [r4, #9]
100111c4:	1212      	asrs	r2, r2, #8
100111c6:	72a2      	strb	r2, [r4, #10]
100111c8:	2200      	movs	r2, #0
100111ca:	72e2      	strb	r2, [r4, #11]
100111cc:	0a0a      	lsrs	r2, r1, #8
100111ce:	7362      	strb	r2, [r4, #13]
100111d0:	0a2a      	lsrs	r2, r5, #8
100111d2:	73e2      	strb	r2, [r4, #15]
100111d4:	1c19      	adds	r1, r3, #0
100111d6:	1c2a      	adds	r2, r5, #0
100111d8:	4b0a      	ldr	r3, [pc, #40]	; (10011204 <gattc_send_evt_cmd_handler+0x6c>)
100111da:	3510      	adds	r5, #16
100111dc:	480a      	ldr	r0, [pc, #40]	; (10011208 <gattc_send_evt_cmd_handler+0x70>)
100111de:	7126      	strb	r6, [r4, #4]
100111e0:	4798      	blx	r3
100111e2:	b2a9      	uxth	r1, r5
100111e4:	1c0b      	adds	r3, r1, #0
100111e6:	3b08      	subs	r3, #8
100111e8:	71a3      	strb	r3, [r4, #6]
100111ea:	121b      	asrs	r3, r3, #8
100111ec:	71e3      	strb	r3, [r4, #7]
100111ee:	1c20      	adds	r0, r4, #0
100111f0:	4b06      	ldr	r3, [pc, #24]	; (1001120c <gattc_send_evt_cmd_handler+0x74>)
100111f2:	4798      	blx	r3
100111f4:	bd70      	pop	{r4, r5, r6, pc}
100111f6:	46c0      	nop			; (mov r8, r8)
100111f8:	1001b090 	.word	0x1001b090
100111fc:	1001ad20 	.word	0x1001ad20
10011200:	10019e5c 	.word	0x10019e5c
10011204:	100156bf 	.word	0x100156bf
10011208:	1001b0a0 	.word	0x1001b0a0
1001120c:	1000fde1 	.word	0x1000fde1

10011210 <gattc_event_cfm_handler>:
10011210:	220e      	movs	r2, #14
10011212:	b508      	push	{r3, lr}
10011214:	4b0b      	ldr	r3, [pc, #44]	; (10011244 <gattc_event_cfm_handler+0x34>)
10011216:	701a      	strb	r2, [r3, #0]
10011218:	3a02      	subs	r2, #2
1001121a:	705a      	strb	r2, [r3, #1]
1001121c:	709a      	strb	r2, [r3, #2]
1001121e:	4a0a      	ldr	r2, [pc, #40]	; (10011248 <gattc_event_cfm_handler+0x38>)
10011220:	70d8      	strb	r0, [r3, #3]
10011222:	8810      	ldrh	r0, [r2, #0]
10011224:	8812      	ldrh	r2, [r2, #0]
10011226:	7219      	strb	r1, [r3, #8]
10011228:	0a12      	lsrs	r2, r2, #8
1001122a:	715a      	strb	r2, [r3, #5]
1001122c:	2202      	movs	r2, #2
1001122e:	719a      	strb	r2, [r3, #6]
10011230:	2200      	movs	r2, #0
10011232:	0a09      	lsrs	r1, r1, #8
10011234:	7118      	strb	r0, [r3, #4]
10011236:	7259      	strb	r1, [r3, #9]
10011238:	71da      	strb	r2, [r3, #7]
1001123a:	1c18      	adds	r0, r3, #0
1001123c:	210a      	movs	r1, #10
1001123e:	4b03      	ldr	r3, [pc, #12]	; (1001124c <gattc_event_cfm_handler+0x3c>)
10011240:	4798      	blx	r3
10011242:	bd08      	pop	{r3, pc}
10011244:	1001b090 	.word	0x1001b090
10011248:	1001ad20 	.word	0x1001ad20
1001124c:	1000fde1 	.word	0x1000fde1

10011250 <gattc_disc_svc_ind_parser>:
10011250:	b570      	push	{r4, r5, r6, lr}
10011252:	1c15      	adds	r5, r2, #0
10011254:	0a00      	lsrs	r0, r0, #8
10011256:	8010      	strh	r0, [r2, #0]
10011258:	784b      	ldrb	r3, [r1, #1]
1001125a:	780a      	ldrb	r2, [r1, #0]
1001125c:	021b      	lsls	r3, r3, #8
1001125e:	4313      	orrs	r3, r2
10011260:	806b      	strh	r3, [r5, #2]
10011262:	78cb      	ldrb	r3, [r1, #3]
10011264:	788a      	ldrb	r2, [r1, #2]
10011266:	021b      	lsls	r3, r3, #8
10011268:	4313      	orrs	r3, r2
1001126a:	80ab      	strh	r3, [r5, #4]
1001126c:	790e      	ldrb	r6, [r1, #4]
1001126e:	4b05      	ldr	r3, [pc, #20]	; (10011284 <gattc_disc_svc_ind_parser+0x34>)
10011270:	1c30      	adds	r0, r6, #0
10011272:	1c0c      	adds	r4, r1, #0
10011274:	4798      	blx	r3
10011276:	1c32      	adds	r2, r6, #0
10011278:	71a8      	strb	r0, [r5, #6]
1001127a:	1d61      	adds	r1, r4, #5
1001127c:	1de8      	adds	r0, r5, #7
1001127e:	4b02      	ldr	r3, [pc, #8]	; (10011288 <gattc_disc_svc_ind_parser+0x38>)
10011280:	4798      	blx	r3
10011282:	bd70      	pop	{r4, r5, r6, pc}
10011284:	1000f121 	.word	0x1000f121
10011288:	100156bf 	.word	0x100156bf

1001128c <gattc_disc_svc_incl_ind_parser>:
1001128c:	b570      	push	{r4, r5, r6, lr}
1001128e:	1c15      	adds	r5, r2, #0
10011290:	0a00      	lsrs	r0, r0, #8
10011292:	8010      	strh	r0, [r2, #0]
10011294:	784b      	ldrb	r3, [r1, #1]
10011296:	780a      	ldrb	r2, [r1, #0]
10011298:	021b      	lsls	r3, r3, #8
1001129a:	4313      	orrs	r3, r2
1001129c:	806b      	strh	r3, [r5, #2]
1001129e:	78cb      	ldrb	r3, [r1, #3]
100112a0:	788a      	ldrb	r2, [r1, #2]
100112a2:	021b      	lsls	r3, r3, #8
100112a4:	4313      	orrs	r3, r2
100112a6:	80ab      	strh	r3, [r5, #4]
100112a8:	794b      	ldrb	r3, [r1, #5]
100112aa:	790a      	ldrb	r2, [r1, #4]
100112ac:	021b      	lsls	r3, r3, #8
100112ae:	4313      	orrs	r3, r2
100112b0:	80eb      	strh	r3, [r5, #6]
100112b2:	798e      	ldrb	r6, [r1, #6]
100112b4:	4b05      	ldr	r3, [pc, #20]	; (100112cc <gattc_disc_svc_incl_ind_parser+0x40>)
100112b6:	1c30      	adds	r0, r6, #0
100112b8:	1c0c      	adds	r4, r1, #0
100112ba:	4798      	blx	r3
100112bc:	7228      	strb	r0, [r5, #8]
100112be:	1c28      	adds	r0, r5, #0
100112c0:	1c32      	adds	r2, r6, #0
100112c2:	1de1      	adds	r1, r4, #7
100112c4:	4b02      	ldr	r3, [pc, #8]	; (100112d0 <gattc_disc_svc_incl_ind_parser+0x44>)
100112c6:	3009      	adds	r0, #9
100112c8:	4798      	blx	r3
100112ca:	bd70      	pop	{r4, r5, r6, pc}
100112cc:	1000f121 	.word	0x1000f121
100112d0:	100156bf 	.word	0x100156bf

100112d4 <gattc_disc_char_ind_parser>:
100112d4:	b570      	push	{r4, r5, r6, lr}
100112d6:	1c15      	adds	r5, r2, #0
100112d8:	0a00      	lsrs	r0, r0, #8
100112da:	8010      	strh	r0, [r2, #0]
100112dc:	784b      	ldrb	r3, [r1, #1]
100112de:	780a      	ldrb	r2, [r1, #0]
100112e0:	021b      	lsls	r3, r3, #8
100112e2:	4313      	orrs	r3, r2
100112e4:	806b      	strh	r3, [r5, #2]
100112e6:	78cb      	ldrb	r3, [r1, #3]
100112e8:	788a      	ldrb	r2, [r1, #2]
100112ea:	021b      	lsls	r3, r3, #8
100112ec:	4313      	orrs	r3, r2
100112ee:	80ab      	strh	r3, [r5, #4]
100112f0:	790b      	ldrb	r3, [r1, #4]
100112f2:	1c0c      	adds	r4, r1, #0
100112f4:	71ab      	strb	r3, [r5, #6]
100112f6:	794e      	ldrb	r6, [r1, #5]
100112f8:	4b05      	ldr	r3, [pc, #20]	; (10011310 <gattc_disc_char_ind_parser+0x3c>)
100112fa:	1c30      	adds	r0, r6, #0
100112fc:	4798      	blx	r3
100112fe:	71e8      	strb	r0, [r5, #7]
10011300:	1c28      	adds	r0, r5, #0
10011302:	1c32      	adds	r2, r6, #0
10011304:	1da1      	adds	r1, r4, #6
10011306:	4b03      	ldr	r3, [pc, #12]	; (10011314 <gattc_disc_char_ind_parser+0x40>)
10011308:	3008      	adds	r0, #8
1001130a:	4798      	blx	r3
1001130c:	bd70      	pop	{r4, r5, r6, pc}
1001130e:	46c0      	nop			; (mov r8, r8)
10011310:	1000f121 	.word	0x1000f121
10011314:	100156bf 	.word	0x100156bf

10011318 <gattc_disc_char_desc_ind_parser>:
10011318:	b570      	push	{r4, r5, r6, lr}
1001131a:	1c15      	adds	r5, r2, #0
1001131c:	0a00      	lsrs	r0, r0, #8
1001131e:	8010      	strh	r0, [r2, #0]
10011320:	784b      	ldrb	r3, [r1, #1]
10011322:	780a      	ldrb	r2, [r1, #0]
10011324:	021b      	lsls	r3, r3, #8
10011326:	4313      	orrs	r3, r2
10011328:	806b      	strh	r3, [r5, #2]
1001132a:	788e      	ldrb	r6, [r1, #2]
1001132c:	4b05      	ldr	r3, [pc, #20]	; (10011344 <gattc_disc_char_desc_ind_parser+0x2c>)
1001132e:	1c30      	adds	r0, r6, #0
10011330:	1c0c      	adds	r4, r1, #0
10011332:	4798      	blx	r3
10011334:	1c32      	adds	r2, r6, #0
10011336:	7128      	strb	r0, [r5, #4]
10011338:	1ce1      	adds	r1, r4, #3
1001133a:	1d68      	adds	r0, r5, #5
1001133c:	4b02      	ldr	r3, [pc, #8]	; (10011348 <gattc_disc_char_desc_ind_parser+0x30>)
1001133e:	4798      	blx	r3
10011340:	bd70      	pop	{r4, r5, r6, pc}
10011342:	46c0      	nop			; (mov r8, r8)
10011344:	1000f121 	.word	0x1000f121
10011348:	100156bf 	.word	0x100156bf

1001134c <gattc_event_ind_and_notification_parser>:
1001134c:	b510      	push	{r4, lr}
1001134e:	780c      	ldrb	r4, [r1, #0]
10011350:	1c13      	adds	r3, r2, #0
10011352:	2c12      	cmp	r4, #18
10011354:	d10e      	bne.n	10011374 <gattc_event_ind_and_notification_parser+0x28>
10011356:	0a00      	lsrs	r0, r0, #8
10011358:	8010      	strh	r0, [r2, #0]
1001135a:	788a      	ldrb	r2, [r1, #2]
1001135c:	709a      	strb	r2, [r3, #2]
1001135e:	7948      	ldrb	r0, [r1, #5]
10011360:	790c      	ldrb	r4, [r1, #4]
10011362:	0200      	lsls	r0, r0, #8
10011364:	4320      	orrs	r0, r4
10011366:	8098      	strh	r0, [r3, #4]
10011368:	3106      	adds	r1, #6
1001136a:	1d98      	adds	r0, r3, #6
1001136c:	4b0b      	ldr	r3, [pc, #44]	; (1001139c <gattc_event_ind_and_notification_parser+0x50>)
1001136e:	4798      	blx	r3
10011370:	221b      	movs	r2, #27
10011372:	e010      	b.n	10011396 <gattc_event_ind_and_notification_parser+0x4a>
10011374:	2200      	movs	r2, #0
10011376:	2c13      	cmp	r4, #19
10011378:	d10d      	bne.n	10011396 <gattc_event_ind_and_notification_parser+0x4a>
1001137a:	0a00      	lsrs	r0, r0, #8
1001137c:	8018      	strh	r0, [r3, #0]
1001137e:	788a      	ldrb	r2, [r1, #2]
10011380:	709a      	strb	r2, [r3, #2]
10011382:	7908      	ldrb	r0, [r1, #4]
10011384:	78cc      	ldrb	r4, [r1, #3]
10011386:	0200      	lsls	r0, r0, #8
10011388:	4320      	orrs	r0, r4
1001138a:	8098      	strh	r0, [r3, #4]
1001138c:	3106      	adds	r1, #6
1001138e:	1d98      	adds	r0, r3, #6
10011390:	4b02      	ldr	r3, [pc, #8]	; (1001139c <gattc_event_ind_and_notification_parser+0x50>)
10011392:	4798      	blx	r3
10011394:	221c      	movs	r2, #28
10011396:	1c10      	adds	r0, r2, #0
10011398:	bd10      	pop	{r4, pc}
1001139a:	46c0      	nop			; (mov r8, r8)
1001139c:	100156bf 	.word	0x100156bf

100113a0 <gattc_complete_evt_handler>:
100113a0:	b500      	push	{lr}
100113a2:	0a00      	lsrs	r0, r0, #8
100113a4:	8010      	strh	r0, [r2, #0]
100113a6:	7808      	ldrb	r0, [r1, #0]
100113a8:	7090      	strb	r0, [r2, #2]
100113aa:	784b      	ldrb	r3, [r1, #1]
100113ac:	3801      	subs	r0, #1
100113ae:	70d3      	strb	r3, [r2, #3]
100113b0:	2813      	cmp	r0, #19
100113b2:	d82c      	bhi.n	1001140e <gattc_complete_evt_handler+0x6e>
100113b4:	f001 faec 	bl	10012990 <__gnu_thumb1_case_uqi>
100113b8:	0a0a0a0c 	.word	0x0a0a0a0c
100113bc:	210a0a0a 	.word	0x210a0a0a
100113c0:	111f2121 	.word	0x111f2121
100113c4:	2b111111 	.word	0x2b111111
100113c8:	2919132b 	.word	0x2919132b
100113cc:	2017      	movs	r0, #23
100113ce:	e01f      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113d0:	2024      	movs	r0, #36	; 0x24
100113d2:	2b00      	cmp	r3, #0
100113d4:	d11c      	bne.n	10011410 <gattc_complete_evt_handler+0x70>
100113d6:	3017      	adds	r0, #23
100113d8:	e01a      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113da:	2025      	movs	r0, #37	; 0x25
100113dc:	e018      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113de:	4a0d      	ldr	r2, [pc, #52]	; (10011414 <gattc_complete_evt_handler+0x74>)
100113e0:	201d      	movs	r0, #29
100113e2:	6813      	ldr	r3, [r2, #0]
100113e4:	3b01      	subs	r3, #1
100113e6:	6013      	str	r3, [r2, #0]
100113e8:	e012      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113ea:	4a0a      	ldr	r2, [pc, #40]	; (10011414 <gattc_complete_evt_handler+0x74>)
100113ec:	201e      	movs	r0, #30
100113ee:	6813      	ldr	r3, [r2, #0]
100113f0:	3b01      	subs	r3, #1
100113f2:	6013      	str	r3, [r2, #0]
100113f4:	e00c      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113f6:	2019      	movs	r0, #25
100113f8:	e00a      	b.n	10011410 <gattc_complete_evt_handler+0x70>
100113fa:	203b      	movs	r0, #59	; 0x3b
100113fc:	2b00      	cmp	r3, #0
100113fe:	d007      	beq.n	10011410 <gattc_complete_evt_handler+0x70>
10011400:	2182      	movs	r1, #130	; 0x82
10011402:	0089      	lsls	r1, r1, #2
10011404:	5453      	strb	r3, [r2, r1]
10011406:	3823      	subs	r0, #35	; 0x23
10011408:	e002      	b.n	10011410 <gattc_complete_evt_handler+0x70>
1001140a:	2021      	movs	r0, #33	; 0x21
1001140c:	e000      	b.n	10011410 <gattc_complete_evt_handler+0x70>
1001140e:	2000      	movs	r0, #0
10011410:	bd00      	pop	{pc}
10011412:	46c0      	nop			; (mov r8, r8)
10011414:	10019e60 	.word	0x10019e60

10011418 <gattc_event_mtu_changed_ind_parser>:
10011418:	0a00      	lsrs	r0, r0, #8
1001141a:	8010      	strh	r0, [r2, #0]
1001141c:	784b      	ldrb	r3, [r1, #1]
1001141e:	7809      	ldrb	r1, [r1, #0]
10011420:	021b      	lsls	r3, r3, #8
10011422:	430b      	orrs	r3, r1
10011424:	8053      	strh	r3, [r2, #2]
10011426:	4770      	bx	lr

10011428 <gattc_read_ind_parser>:
10011428:	0a00      	lsrs	r0, r0, #8
1001142a:	b508      	push	{r3, lr}
1001142c:	8010      	strh	r0, [r2, #0]
1001142e:	1c13      	adds	r3, r2, #0
10011430:	2282      	movs	r2, #130	; 0x82
10011432:	2000      	movs	r0, #0
10011434:	0092      	lsls	r2, r2, #2
10011436:	5498      	strb	r0, [r3, r2]
10011438:	784a      	ldrb	r2, [r1, #1]
1001143a:	7808      	ldrb	r0, [r1, #0]
1001143c:	0212      	lsls	r2, r2, #8
1001143e:	4302      	orrs	r2, r0
10011440:	805a      	strh	r2, [r3, #2]
10011442:	78ca      	ldrb	r2, [r1, #3]
10011444:	7888      	ldrb	r0, [r1, #2]
10011446:	0212      	lsls	r2, r2, #8
10011448:	4302      	orrs	r2, r0
1001144a:	80da      	strh	r2, [r3, #6]
1001144c:	794a      	ldrb	r2, [r1, #5]
1001144e:	7908      	ldrb	r0, [r1, #4]
10011450:	0212      	lsls	r2, r2, #8
10011452:	4302      	orrs	r2, r0
10011454:	809a      	strh	r2, [r3, #4]
10011456:	3308      	adds	r3, #8
10011458:	1c18      	adds	r0, r3, #0
1001145a:	3106      	adds	r1, #6
1001145c:	4b01      	ldr	r3, [pc, #4]	; (10011464 <gattc_read_ind_parser+0x3c>)
1001145e:	4798      	blx	r3
10011460:	bd08      	pop	{r3, pc}
10011462:	46c0      	nop			; (mov r8, r8)
10011464:	100156bf 	.word	0x100156bf

10011468 <gattc_svc_changed_cfg_ind_parser>:
10011468:	0a00      	lsrs	r0, r0, #8
1001146a:	8010      	strh	r0, [r2, #0]
1001146c:	784b      	ldrb	r3, [r1, #1]
1001146e:	7809      	ldrb	r1, [r1, #0]
10011470:	021b      	lsls	r3, r3, #8
10011472:	430b      	orrs	r3, r1
10011474:	8053      	strh	r3, [r2, #2]
10011476:	4770      	bx	lr

10011478 <init_gattc_task_module>:
10011478:	2300      	movs	r3, #0
1001147a:	4a02      	ldr	r2, [pc, #8]	; (10011484 <init_gattc_task_module+0xc>)
1001147c:	8013      	strh	r3, [r2, #0]
1001147e:	4a02      	ldr	r2, [pc, #8]	; (10011488 <init_gattc_task_module+0x10>)
10011480:	8013      	strh	r3, [r2, #0]
10011482:	4770      	bx	lr
10011484:	10019e5a 	.word	0x10019e5a
10011488:	10019e5c 	.word	0x10019e5c

1001148c <gattm_add_svc_req_handler>:
1001148c:	2200      	movs	r2, #0
1001148e:	210b      	movs	r1, #11
10011490:	b5f0      	push	{r4, r5, r6, r7, lr}
10011492:	1c04      	adds	r4, r0, #0
10011494:	7943      	ldrb	r3, [r0, #5]
10011496:	b085      	sub	sp, #20
10011498:	9301      	str	r3, [sp, #4]
1001149a:	ab02      	add	r3, sp, #8
1001149c:	71da      	strb	r2, [r3, #7]
1001149e:	4b37      	ldr	r3, [pc, #220]	; (1001157c <gattm_add_svc_req_handler+0xf0>)
100114a0:	7059      	strb	r1, [r3, #1]
100114a2:	7099      	strb	r1, [r3, #2]
100114a4:	4936      	ldr	r1, [pc, #216]	; (10011580 <gattm_add_svc_req_handler+0xf4>)
100114a6:	701a      	strb	r2, [r3, #0]
100114a8:	8808      	ldrh	r0, [r1, #0]
100114aa:	8809      	ldrh	r1, [r1, #0]
100114ac:	70da      	strb	r2, [r3, #3]
100114ae:	0a09      	lsrs	r1, r1, #8
100114b0:	7118      	strb	r0, [r3, #4]
100114b2:	7159      	strb	r1, [r3, #5]
100114b4:	8821      	ldrh	r1, [r4, #0]
100114b6:	7219      	strb	r1, [r3, #8]
100114b8:	8821      	ldrh	r1, [r4, #0]
100114ba:	0a09      	lsrs	r1, r1, #8
100114bc:	7259      	strb	r1, [r3, #9]
100114be:	8861      	ldrh	r1, [r4, #2]
100114c0:	7299      	strb	r1, [r3, #10]
100114c2:	8861      	ldrh	r1, [r4, #2]
100114c4:	0a09      	lsrs	r1, r1, #8
100114c6:	72d9      	strb	r1, [r3, #11]
100114c8:	7921      	ldrb	r1, [r4, #4]
100114ca:	7319      	strb	r1, [r3, #12]
100114cc:	4669      	mov	r1, sp
100114ce:	7909      	ldrb	r1, [r1, #4]
100114d0:	7359      	strb	r1, [r3, #13]
100114d2:	18a1      	adds	r1, r4, r2
100114d4:	7988      	ldrb	r0, [r1, #6]
100114d6:	1899      	adds	r1, r3, r2
100114d8:	3201      	adds	r2, #1
100114da:	7388      	strb	r0, [r1, #14]
100114dc:	2a10      	cmp	r2, #16
100114de:	d1f8      	bne.n	100114d2 <gattm_add_svc_req_handler+0x46>
100114e0:	1c27      	adds	r7, r4, #0
100114e2:	2300      	movs	r3, #0
100114e4:	251e      	movs	r5, #30
100114e6:	3716      	adds	r7, #22
100114e8:	9300      	str	r3, [sp, #0]
100114ea:	9b00      	ldr	r3, [sp, #0]
100114ec:	9a01      	ldr	r2, [sp, #4]
100114ee:	4e23      	ldr	r6, [pc, #140]	; (1001157c <gattm_add_svc_req_handler+0xf0>)
100114f0:	4293      	cmp	r3, r2
100114f2:	da21      	bge.n	10011538 <gattm_add_svc_req_handler+0xac>
100114f4:	1c39      	adds	r1, r7, #0
100114f6:	1970      	adds	r0, r6, r5
100114f8:	2210      	movs	r2, #16
100114fa:	4b22      	ldr	r3, [pc, #136]	; (10011584 <gattm_add_svc_req_handler+0xf8>)
100114fc:	4798      	blx	r3
100114fe:	1c2b      	adds	r3, r5, #0
10011500:	8a3a      	ldrh	r2, [r7, #16]
10011502:	3310      	adds	r3, #16
10011504:	b29b      	uxth	r3, r3
10011506:	54f2      	strb	r2, [r6, r3]
10011508:	1c2b      	adds	r3, r5, #0
1001150a:	8a3a      	ldrh	r2, [r7, #16]
1001150c:	3311      	adds	r3, #17
1001150e:	b29b      	uxth	r3, r3
10011510:	0a12      	lsrs	r2, r2, #8
10011512:	54f2      	strb	r2, [r6, r3]
10011514:	1c2a      	adds	r2, r5, #0
10011516:	1c2b      	adds	r3, r5, #0
10011518:	8a79      	ldrh	r1, [r7, #18]
1001151a:	3212      	adds	r2, #18
1001151c:	b292      	uxth	r2, r2
1001151e:	54b1      	strb	r1, [r6, r2]
10011520:	8a7a      	ldrh	r2, [r7, #18]
10011522:	3313      	adds	r3, #19
10011524:	b29b      	uxth	r3, r3
10011526:	0a12      	lsrs	r2, r2, #8
10011528:	54f2      	strb	r2, [r6, r3]
1001152a:	9b00      	ldr	r3, [sp, #0]
1001152c:	3514      	adds	r5, #20
1001152e:	3301      	adds	r3, #1
10011530:	b2ad      	uxth	r5, r5
10011532:	9300      	str	r3, [sp, #0]
10011534:	3714      	adds	r7, #20
10011536:	e7d8      	b.n	100114ea <gattm_add_svc_req_handler+0x5e>
10011538:	2114      	movs	r1, #20
1001153a:	4d13      	ldr	r5, [pc, #76]	; (10011588 <gattm_add_svc_req_handler+0xfc>)
1001153c:	4b13      	ldr	r3, [pc, #76]	; (1001158c <gattm_add_svc_req_handler+0x100>)
1001153e:	4351      	muls	r1, r2
10011540:	802b      	strh	r3, [r5, #0]
10011542:	230b      	movs	r3, #11
10011544:	311e      	adds	r1, #30
10011546:	80ab      	strh	r3, [r5, #4]
10011548:	1c0b      	adds	r3, r1, #0
1001154a:	3b08      	subs	r3, #8
1001154c:	71b3      	strb	r3, [r6, #6]
1001154e:	121b      	asrs	r3, r3, #8
10011550:	71f3      	strb	r3, [r6, #7]
10011552:	1c30      	adds	r0, r6, #0
10011554:	4b0e      	ldr	r3, [pc, #56]	; (10011590 <gattm_add_svc_req_handler+0x104>)
10011556:	4798      	blx	r3
10011558:	ab02      	add	r3, sp, #8
1001155a:	1dde      	adds	r6, r3, #7
1001155c:	1c30      	adds	r0, r6, #0
1001155e:	4b0d      	ldr	r3, [pc, #52]	; (10011594 <gattm_add_svc_req_handler+0x108>)
10011560:	4798      	blx	r3
10011562:	7833      	ldrb	r3, [r6, #0]
10011564:	20e2      	movs	r0, #226	; 0xe2
10011566:	2b00      	cmp	r3, #0
10011568:	d106      	bne.n	10011578 <gattm_add_svc_req_handler+0xec>
1001156a:	68aa      	ldr	r2, [r5, #8]
1001156c:	7853      	ldrb	r3, [r2, #1]
1001156e:	7811      	ldrb	r1, [r2, #0]
10011570:	021b      	lsls	r3, r3, #8
10011572:	430b      	orrs	r3, r1
10011574:	8023      	strh	r3, [r4, #0]
10011576:	7890      	ldrb	r0, [r2, #2]
10011578:	b005      	add	sp, #20
1001157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001157c:	1001b090 	.word	0x1001b090
10011580:	1001ad20 	.word	0x1001ad20
10011584:	100156bf 	.word	0x100156bf
10011588:	1001ad14 	.word	0x1001ad14
1001158c:	00000b01 	.word	0x00000b01
10011590:	1000fde1 	.word	0x1000fde1
10011594:	1000fe45 	.word	0x1000fe45

10011598 <gattm_add_attribute_req_handler>:
10011598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001159a:	1c1f      	adds	r7, r3, #0
1001159c:	4b16      	ldr	r3, [pc, #88]	; (100115f8 <gattm_add_attribute_req_handler+0x60>)
1001159e:	9100      	str	r1, [sp, #0]
100115a0:	9201      	str	r2, [sp, #4]
100115a2:	1c05      	adds	r5, r0, #0
100115a4:	7946      	ldrb	r6, [r0, #5]
100115a6:	6818      	ldr	r0, [r3, #0]
100115a8:	2114      	movs	r1, #20
100115aa:	4b14      	ldr	r3, [pc, #80]	; (100115fc <gattm_add_attribute_req_handler+0x64>)
100115ac:	382a      	subs	r0, #42	; 0x2a
100115ae:	4798      	blx	r3
100115b0:	2311      	movs	r3, #17
100115b2:	4286      	cmp	r6, r0
100115b4:	d21e      	bcs.n	100115f4 <gattm_add_attribute_req_handler+0x5c>
100115b6:	2414      	movs	r4, #20
100115b8:	4366      	muls	r6, r4
100115ba:	19a8      	adds	r0, r5, r6
100115bc:	2100      	movs	r1, #0
100115be:	2210      	movs	r2, #16
100115c0:	4b0f      	ldr	r3, [pc, #60]	; (10011600 <gattm_add_attribute_req_handler+0x68>)
100115c2:	3016      	adds	r0, #22
100115c4:	4798      	blx	r3
100115c6:	7968      	ldrb	r0, [r5, #5]
100115c8:	1c3a      	adds	r2, r7, #0
100115ca:	4360      	muls	r0, r4
100115cc:	1828      	adds	r0, r5, r0
100115ce:	4b0d      	ldr	r3, [pc, #52]	; (10011604 <gattm_add_attribute_req_handler+0x6c>)
100115d0:	3016      	adds	r0, #22
100115d2:	9908      	ldr	r1, [sp, #32]
100115d4:	4798      	blx	r3
100115d6:	466a      	mov	r2, sp
100115d8:	796b      	ldrb	r3, [r5, #5]
100115da:	8812      	ldrh	r2, [r2, #0]
100115dc:	435c      	muls	r4, r3
100115de:	192c      	adds	r4, r5, r4
100115e0:	8522      	strh	r2, [r4, #40]	; 0x28
100115e2:	466a      	mov	r2, sp
100115e4:	8892      	ldrh	r2, [r2, #4]
100115e6:	84e2      	strh	r2, [r4, #38]	; 0x26
100115e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100115ea:	8013      	strh	r3, [r2, #0]
100115ec:	796b      	ldrb	r3, [r5, #5]
100115ee:	3301      	adds	r3, #1
100115f0:	716b      	strb	r3, [r5, #5]
100115f2:	2300      	movs	r3, #0
100115f4:	1c18      	adds	r0, r3, #0
100115f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100115f8:	10019dd0 	.word	0x10019dd0
100115fc:	100129a5 	.word	0x100129a5
10011600:	100156d1 	.word	0x100156d1
10011604:	100156bf 	.word	0x100156bf

10011608 <gattm_att_set_value_req_handler>:
10011608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001160a:	466b      	mov	r3, sp
1001160c:	1dde      	adds	r6, r3, #7
1001160e:	2300      	movs	r3, #0
10011610:	1c0d      	adds	r5, r1, #0
10011612:	210c      	movs	r1, #12
10011614:	270b      	movs	r7, #11
10011616:	4c17      	ldr	r4, [pc, #92]	; (10011674 <gattm_att_set_value_req_handler+0x6c>)
10011618:	7033      	strb	r3, [r6, #0]
1001161a:	70e3      	strb	r3, [r4, #3]
1001161c:	4b16      	ldr	r3, [pc, #88]	; (10011678 <gattm_att_set_value_req_handler+0x70>)
1001161e:	7021      	strb	r1, [r4, #0]
10011620:	8819      	ldrh	r1, [r3, #0]
10011622:	881b      	ldrh	r3, [r3, #0]
10011624:	7220      	strb	r0, [r4, #8]
10011626:	0a1b      	lsrs	r3, r3, #8
10011628:	7163      	strb	r3, [r4, #5]
1001162a:	0a00      	lsrs	r0, r0, #8
1001162c:	0a2b      	lsrs	r3, r5, #8
1001162e:	7121      	strb	r1, [r4, #4]
10011630:	7260      	strb	r0, [r4, #9]
10011632:	1c11      	adds	r1, r2, #0
10011634:	72a5      	strb	r5, [r4, #10]
10011636:	1c2a      	adds	r2, r5, #0
10011638:	72e3      	strb	r3, [r4, #11]
1001163a:	350c      	adds	r5, #12
1001163c:	4b0f      	ldr	r3, [pc, #60]	; (1001167c <gattm_att_set_value_req_handler+0x74>)
1001163e:	4810      	ldr	r0, [pc, #64]	; (10011680 <gattm_att_set_value_req_handler+0x78>)
10011640:	7067      	strb	r7, [r4, #1]
10011642:	70a7      	strb	r7, [r4, #2]
10011644:	4798      	blx	r3
10011646:	b2a9      	uxth	r1, r5
10011648:	4b0e      	ldr	r3, [pc, #56]	; (10011684 <gattm_att_set_value_req_handler+0x7c>)
1001164a:	4d0f      	ldr	r5, [pc, #60]	; (10011688 <gattm_att_set_value_req_handler+0x80>)
1001164c:	1c20      	adds	r0, r4, #0
1001164e:	802b      	strh	r3, [r5, #0]
10011650:	1c0b      	adds	r3, r1, #0
10011652:	3b08      	subs	r3, #8
10011654:	71a3      	strb	r3, [r4, #6]
10011656:	121b      	asrs	r3, r3, #8
10011658:	71e3      	strb	r3, [r4, #7]
1001165a:	4b0c      	ldr	r3, [pc, #48]	; (1001168c <gattm_att_set_value_req_handler+0x84>)
1001165c:	80af      	strh	r7, [r5, #4]
1001165e:	4798      	blx	r3
10011660:	1c30      	adds	r0, r6, #0
10011662:	4b0b      	ldr	r3, [pc, #44]	; (10011690 <gattm_att_set_value_req_handler+0x88>)
10011664:	4798      	blx	r3
10011666:	7833      	ldrb	r3, [r6, #0]
10011668:	20e2      	movs	r0, #226	; 0xe2
1001166a:	2b00      	cmp	r3, #0
1001166c:	d101      	bne.n	10011672 <gattm_att_set_value_req_handler+0x6a>
1001166e:	68ab      	ldr	r3, [r5, #8]
10011670:	7898      	ldrb	r0, [r3, #2]
10011672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011674:	1001b090 	.word	0x1001b090
10011678:	1001ad20 	.word	0x1001ad20
1001167c:	100156bf 	.word	0x100156bf
10011680:	1001b09c 	.word	0x1001b09c
10011684:	00000b0d 	.word	0x00000b0d
10011688:	1001ad14 	.word	0x1001ad14
1001168c:	1000fde1 	.word	0x1000fde1
10011690:	1000fe45 	.word	0x1000fe45

10011694 <gattm_att_get_value_req_handler>:
10011694:	b5f0      	push	{r4, r5, r6, r7, lr}
10011696:	b085      	sub	sp, #20
10011698:	9201      	str	r2, [sp, #4]
1001169a:	220a      	movs	r2, #10
1001169c:	1c04      	adds	r4, r0, #0
1001169e:	481d      	ldr	r0, [pc, #116]	; (10011714 <gattm_att_get_value_req_handler+0x80>)
100116a0:	ab02      	add	r3, sp, #8
100116a2:	1dde      	adds	r6, r3, #7
100116a4:	7002      	strb	r2, [r0, #0]
100116a6:	2300      	movs	r3, #0
100116a8:	220b      	movs	r2, #11
100116aa:	4d1b      	ldr	r5, [pc, #108]	; (10011718 <gattm_att_get_value_req_handler+0x84>)
100116ac:	1c0f      	adds	r7, r1, #0
100116ae:	8829      	ldrh	r1, [r5, #0]
100116b0:	882d      	ldrh	r5, [r5, #0]
100116b2:	7101      	strb	r1, [r0, #4]
100116b4:	0a2d      	lsrs	r5, r5, #8
100116b6:	7145      	strb	r5, [r0, #5]
100116b8:	0a25      	lsrs	r5, r4, #8
100116ba:	7245      	strb	r5, [r0, #9]
100116bc:	4917      	ldr	r1, [pc, #92]	; (1001171c <gattm_att_get_value_req_handler+0x88>)
100116be:	4d18      	ldr	r5, [pc, #96]	; (10011720 <gattm_att_get_value_req_handler+0x8c>)
100116c0:	7033      	strb	r3, [r6, #0]
100116c2:	7042      	strb	r2, [r0, #1]
100116c4:	7082      	strb	r2, [r0, #2]
100116c6:	70c3      	strb	r3, [r0, #3]
100116c8:	8029      	strh	r1, [r5, #0]
100116ca:	80aa      	strh	r2, [r5, #4]
100116cc:	71c3      	strb	r3, [r0, #7]
100116ce:	3a09      	subs	r2, #9
100116d0:	210a      	movs	r1, #10
100116d2:	4b14      	ldr	r3, [pc, #80]	; (10011724 <gattm_att_get_value_req_handler+0x90>)
100116d4:	7182      	strb	r2, [r0, #6]
100116d6:	7204      	strb	r4, [r0, #8]
100116d8:	4798      	blx	r3
100116da:	1c30      	adds	r0, r6, #0
100116dc:	4b12      	ldr	r3, [pc, #72]	; (10011728 <gattm_att_get_value_req_handler+0x94>)
100116de:	4798      	blx	r3
100116e0:	7833      	ldrb	r3, [r6, #0]
100116e2:	20e2      	movs	r0, #226	; 0xe2
100116e4:	2b00      	cmp	r3, #0
100116e6:	d112      	bne.n	1001170e <gattm_att_get_value_req_handler+0x7a>
100116e8:	68a9      	ldr	r1, [r5, #8]
100116ea:	9801      	ldr	r0, [sp, #4]
100116ec:	784d      	ldrb	r5, [r1, #1]
100116ee:	780b      	ldrb	r3, [r1, #0]
100116f0:	78ca      	ldrb	r2, [r1, #3]
100116f2:	022d      	lsls	r5, r5, #8
100116f4:	431d      	orrs	r5, r3
100116f6:	788b      	ldrb	r3, [r1, #2]
100116f8:	0212      	lsls	r2, r2, #8
100116fa:	431a      	orrs	r2, r3
100116fc:	803a      	strh	r2, [r7, #0]
100116fe:	790e      	ldrb	r6, [r1, #4]
10011700:	4b0a      	ldr	r3, [pc, #40]	; (1001172c <gattm_att_get_value_req_handler+0x98>)
10011702:	3105      	adds	r1, #5
10011704:	4798      	blx	r3
10011706:	20e2      	movs	r0, #226	; 0xe2
10011708:	42ac      	cmp	r4, r5
1001170a:	d100      	bne.n	1001170e <gattm_att_get_value_req_handler+0x7a>
1001170c:	1c30      	adds	r0, r6, #0
1001170e:	b005      	add	sp, #20
10011710:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011712:	46c0      	nop			; (mov r8, r8)
10011714:	1001b090 	.word	0x1001b090
10011718:	1001ad20 	.word	0x1001ad20
1001171c:	00000b0b 	.word	0x00000b0b
10011720:	1001ad14 	.word	0x1001ad14
10011724:	1000fde1 	.word	0x1000fde1
10011728:	1000fe45 	.word	0x1000fe45
1001172c:	100156bf 	.word	0x100156bf

10011730 <htpt_enable_rsp_handler>:
10011730:	780b      	ldrb	r3, [r1, #0]
10011732:	7013      	strb	r3, [r2, #0]
10011734:	784b      	ldrb	r3, [r1, #1]
10011736:	7053      	strb	r3, [r2, #1]
10011738:	4770      	bx	lr

1001173a <htpt_temp_send_rsp_handler>:
1001173a:	780b      	ldrb	r3, [r1, #0]
1001173c:	7013      	strb	r3, [r2, #0]
1001173e:	4770      	bx	lr

10011740 <htpt_meas_intv_upd_rsp_handler>:
10011740:	780b      	ldrb	r3, [r1, #0]
10011742:	7013      	strb	r3, [r2, #0]
10011744:	4770      	bx	lr

10011746 <htpt_meas_intv_chg_req_ind_handler>:
10011746:	78cb      	ldrb	r3, [r1, #3]
10011748:	7889      	ldrb	r1, [r1, #2]
1001174a:	021b      	lsls	r3, r3, #8
1001174c:	430b      	orrs	r3, r1
1001174e:	8013      	strh	r3, [r2, #0]
10011750:	4770      	bx	lr

10011752 <htpt_cfg_indntf_ind_handler>:
10011752:	780b      	ldrb	r3, [r1, #0]
10011754:	7013      	strb	r3, [r2, #0]
10011756:	784b      	ldrb	r3, [r1, #1]
10011758:	7053      	strb	r3, [r2, #1]
1001175a:	4770      	bx	lr

1001175c <pow>:
1001175c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001175e:	465f      	mov	r7, fp
10011760:	464d      	mov	r5, r9
10011762:	4656      	mov	r6, sl
10011764:	4644      	mov	r4, r8
10011766:	b4f0      	push	{r4, r5, r6, r7}
10011768:	b091      	sub	sp, #68	; 0x44
1001176a:	001f      	movs	r7, r3
1001176c:	0004      	movs	r4, r0
1001176e:	000d      	movs	r5, r1
10011770:	0016      	movs	r6, r2
10011772:	f000 f9af 	bl	10011ad4 <__ieee754_pow>
10011776:	4bcf      	ldr	r3, [pc, #828]	; (10011ab4 <pow+0x358>)
10011778:	9002      	str	r0, [sp, #8]
1001177a:	9103      	str	r1, [sp, #12]
1001177c:	469b      	mov	fp, r3
1001177e:	781b      	ldrb	r3, [r3, #0]
10011780:	b25b      	sxtb	r3, r3
10011782:	4699      	mov	r9, r3
10011784:	3301      	adds	r3, #1
10011786:	d04f      	beq.n	10011828 <pow+0xcc>
10011788:	0032      	movs	r2, r6
1001178a:	003b      	movs	r3, r7
1001178c:	0030      	movs	r0, r6
1001178e:	0039      	movs	r1, r7
10011790:	f003 fd82 	bl	10015298 <__aeabi_dcmpun>
10011794:	9000      	str	r0, [sp, #0]
10011796:	2800      	cmp	r0, #0
10011798:	d146      	bne.n	10011828 <pow+0xcc>
1001179a:	0022      	movs	r2, r4
1001179c:	002b      	movs	r3, r5
1001179e:	0020      	movs	r0, r4
100117a0:	0029      	movs	r1, r5
100117a2:	f003 fd79 	bl	10015298 <__aeabi_dcmpun>
100117a6:	2200      	movs	r2, #0
100117a8:	4682      	mov	sl, r0
100117aa:	2800      	cmp	r0, #0
100117ac:	d134      	bne.n	10011818 <pow+0xbc>
100117ae:	2300      	movs	r3, #0
100117b0:	0020      	movs	r0, r4
100117b2:	0029      	movs	r1, r5
100117b4:	f001 fa7c 	bl	10012cb0 <__aeabi_dcmpeq>
100117b8:	2800      	cmp	r0, #0
100117ba:	d03a      	beq.n	10011832 <pow+0xd6>
100117bc:	2200      	movs	r2, #0
100117be:	2300      	movs	r3, #0
100117c0:	0030      	movs	r0, r6
100117c2:	0039      	movs	r1, r7
100117c4:	f001 fa74 	bl	10012cb0 <__aeabi_dcmpeq>
100117c8:	9005      	str	r0, [sp, #20]
100117ca:	2800      	cmp	r0, #0
100117cc:	d100      	bne.n	100117d0 <pow+0x74>
100117ce:	e074      	b.n	100118ba <pow+0x15e>
100117d0:	ab06      	add	r3, sp, #24
100117d2:	4698      	mov	r8, r3
100117d4:	2301      	movs	r3, #1
100117d6:	4642      	mov	r2, r8
100117d8:	9306      	str	r3, [sp, #24]
100117da:	4bb7      	ldr	r3, [pc, #732]	; (10011ab8 <pow+0x35c>)
100117dc:	6053      	str	r3, [r2, #4]
100117de:	4643      	mov	r3, r8
100117e0:	4652      	mov	r2, sl
100117e2:	609c      	str	r4, [r3, #8]
100117e4:	60dd      	str	r5, [r3, #12]
100117e6:	621a      	str	r2, [r3, #32]
100117e8:	611e      	str	r6, [r3, #16]
100117ea:	615f      	str	r7, [r3, #20]
100117ec:	4642      	mov	r2, r8
100117ee:	2300      	movs	r3, #0
100117f0:	2400      	movs	r4, #0
100117f2:	6193      	str	r3, [r2, #24]
100117f4:	61d4      	str	r4, [r2, #28]
100117f6:	464b      	mov	r3, r9
100117f8:	2b00      	cmp	r3, #0
100117fa:	d100      	bne.n	100117fe <pow+0xa2>
100117fc:	e094      	b.n	10011928 <pow+0x1cc>
100117fe:	2300      	movs	r3, #0
10011800:	4cae      	ldr	r4, [pc, #696]	; (10011abc <pow+0x360>)
10011802:	9300      	str	r3, [sp, #0]
10011804:	9401      	str	r4, [sp, #4]
10011806:	9800      	ldr	r0, [sp, #0]
10011808:	9901      	ldr	r1, [sp, #4]
1001180a:	b011      	add	sp, #68	; 0x44
1001180c:	bc3c      	pop	{r2, r3, r4, r5}
1001180e:	4690      	mov	r8, r2
10011810:	4699      	mov	r9, r3
10011812:	46a2      	mov	sl, r4
10011814:	46ab      	mov	fp, r5
10011816:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011818:	2300      	movs	r3, #0
1001181a:	0030      	movs	r0, r6
1001181c:	0039      	movs	r1, r7
1001181e:	f001 fa47 	bl	10012cb0 <__aeabi_dcmpeq>
10011822:	2800      	cmp	r0, #0
10011824:	d000      	beq.n	10011828 <pow+0xcc>
10011826:	e0eb      	b.n	10011a00 <pow+0x2a4>
10011828:	9b02      	ldr	r3, [sp, #8]
1001182a:	9c03      	ldr	r4, [sp, #12]
1001182c:	9300      	str	r3, [sp, #0]
1001182e:	9401      	str	r4, [sp, #4]
10011830:	e7e9      	b.n	10011806 <pow+0xaa>
10011832:	9802      	ldr	r0, [sp, #8]
10011834:	9903      	ldr	r1, [sp, #12]
10011836:	f000 ff7d 	bl	10012734 <finite>
1001183a:	4681      	mov	r9, r0
1001183c:	2800      	cmp	r0, #0
1001183e:	d100      	bne.n	10011842 <pow+0xe6>
10011840:	e086      	b.n	10011950 <pow+0x1f4>
10011842:	9802      	ldr	r0, [sp, #8]
10011844:	9903      	ldr	r1, [sp, #12]
10011846:	2200      	movs	r2, #0
10011848:	2300      	movs	r3, #0
1001184a:	f001 fa31 	bl	10012cb0 <__aeabi_dcmpeq>
1001184e:	2800      	cmp	r0, #0
10011850:	d0ea      	beq.n	10011828 <pow+0xcc>
10011852:	0020      	movs	r0, r4
10011854:	0029      	movs	r1, r5
10011856:	f000 ff6d 	bl	10012734 <finite>
1001185a:	9a02      	ldr	r2, [sp, #8]
1001185c:	9b03      	ldr	r3, [sp, #12]
1001185e:	9200      	str	r2, [sp, #0]
10011860:	9301      	str	r3, [sp, #4]
10011862:	2800      	cmp	r0, #0
10011864:	d0cf      	beq.n	10011806 <pow+0xaa>
10011866:	0030      	movs	r0, r6
10011868:	0039      	movs	r1, r7
1001186a:	f000 ff63 	bl	10012734 <finite>
1001186e:	9a02      	ldr	r2, [sp, #8]
10011870:	9b03      	ldr	r3, [sp, #12]
10011872:	9200      	str	r2, [sp, #0]
10011874:	9301      	str	r3, [sp, #4]
10011876:	2800      	cmp	r0, #0
10011878:	d0c5      	beq.n	10011806 <pow+0xaa>
1001187a:	ab06      	add	r3, sp, #24
1001187c:	4698      	mov	r8, r3
1001187e:	2304      	movs	r3, #4
10011880:	4642      	mov	r2, r8
10011882:	9306      	str	r3, [sp, #24]
10011884:	4b8c      	ldr	r3, [pc, #560]	; (10011ab8 <pow+0x35c>)
10011886:	6094      	str	r4, [r2, #8]
10011888:	60d5      	str	r5, [r2, #12]
1001188a:	6053      	str	r3, [r2, #4]
1001188c:	2300      	movs	r3, #0
1001188e:	2400      	movs	r4, #0
10011890:	6213      	str	r3, [r2, #32]
10011892:	2300      	movs	r3, #0
10011894:	6193      	str	r3, [r2, #24]
10011896:	61d4      	str	r4, [r2, #28]
10011898:	465b      	mov	r3, fp
1001189a:	781b      	ldrb	r3, [r3, #0]
1001189c:	6116      	str	r6, [r2, #16]
1001189e:	6157      	str	r7, [r2, #20]
100118a0:	b25b      	sxtb	r3, r3
100118a2:	2b02      	cmp	r3, #2
100118a4:	d004      	beq.n	100118b0 <pow+0x154>
100118a6:	4640      	mov	r0, r8
100118a8:	f000 ff4e 	bl	10012748 <matherr>
100118ac:	2800      	cmp	r0, #0
100118ae:	d140      	bne.n	10011932 <pow+0x1d6>
100118b0:	f003 fec0 	bl	10015634 <__errno>
100118b4:	2322      	movs	r3, #34	; 0x22
100118b6:	6003      	str	r3, [r0, #0]
100118b8:	e03b      	b.n	10011932 <pow+0x1d6>
100118ba:	0030      	movs	r0, r6
100118bc:	0039      	movs	r1, r7
100118be:	f000 ff39 	bl	10012734 <finite>
100118c2:	9a02      	ldr	r2, [sp, #8]
100118c4:	9b03      	ldr	r3, [sp, #12]
100118c6:	9200      	str	r2, [sp, #0]
100118c8:	9301      	str	r3, [sp, #4]
100118ca:	2800      	cmp	r0, #0
100118cc:	d09b      	beq.n	10011806 <pow+0xaa>
100118ce:	2200      	movs	r2, #0
100118d0:	2300      	movs	r3, #0
100118d2:	0030      	movs	r0, r6
100118d4:	0039      	movs	r1, r7
100118d6:	f001 f9f1 	bl	10012cbc <__aeabi_dcmplt>
100118da:	2800      	cmp	r0, #0
100118dc:	d100      	bne.n	100118e0 <pow+0x184>
100118de:	e792      	b.n	10011806 <pow+0xaa>
100118e0:	ab06      	add	r3, sp, #24
100118e2:	4698      	mov	r8, r3
100118e4:	2301      	movs	r3, #1
100118e6:	4642      	mov	r2, r8
100118e8:	9306      	str	r3, [sp, #24]
100118ea:	4b73      	ldr	r3, [pc, #460]	; (10011ab8 <pow+0x35c>)
100118ec:	6053      	str	r3, [r2, #4]
100118ee:	4643      	mov	r3, r8
100118f0:	9a05      	ldr	r2, [sp, #20]
100118f2:	609c      	str	r4, [r3, #8]
100118f4:	60dd      	str	r5, [r3, #12]
100118f6:	621a      	str	r2, [r3, #32]
100118f8:	611e      	str	r6, [r3, #16]
100118fa:	615f      	str	r7, [r3, #20]
100118fc:	465b      	mov	r3, fp
100118fe:	781b      	ldrb	r3, [r3, #0]
10011900:	b25b      	sxtb	r3, r3
10011902:	2b00      	cmp	r3, #0
10011904:	d00b      	beq.n	1001191e <pow+0x1c2>
10011906:	2000      	movs	r0, #0
10011908:	4642      	mov	r2, r8
1001190a:	496d      	ldr	r1, [pc, #436]	; (10011ac0 <pow+0x364>)
1001190c:	6190      	str	r0, [r2, #24]
1001190e:	61d1      	str	r1, [r2, #28]
10011910:	2b02      	cmp	r3, #2
10011912:	d109      	bne.n	10011928 <pow+0x1cc>
10011914:	f003 fe8e 	bl	10015634 <__errno>
10011918:	2321      	movs	r3, #33	; 0x21
1001191a:	6003      	str	r3, [r0, #0]
1001191c:	e009      	b.n	10011932 <pow+0x1d6>
1001191e:	4642      	mov	r2, r8
10011920:	2300      	movs	r3, #0
10011922:	2400      	movs	r4, #0
10011924:	6193      	str	r3, [r2, #24]
10011926:	61d4      	str	r4, [r2, #28]
10011928:	4640      	mov	r0, r8
1001192a:	f000 ff0d 	bl	10012748 <matherr>
1001192e:	2800      	cmp	r0, #0
10011930:	d0f0      	beq.n	10011914 <pow+0x1b8>
10011932:	4643      	mov	r3, r8
10011934:	6a1b      	ldr	r3, [r3, #32]
10011936:	2b00      	cmp	r3, #0
10011938:	d004      	beq.n	10011944 <pow+0x1e8>
1001193a:	f003 fe7b 	bl	10015634 <__errno>
1001193e:	4643      	mov	r3, r8
10011940:	6a1b      	ldr	r3, [r3, #32]
10011942:	6003      	str	r3, [r0, #0]
10011944:	4643      	mov	r3, r8
10011946:	69dc      	ldr	r4, [r3, #28]
10011948:	699b      	ldr	r3, [r3, #24]
1001194a:	9300      	str	r3, [sp, #0]
1001194c:	9401      	str	r4, [sp, #4]
1001194e:	e75a      	b.n	10011806 <pow+0xaa>
10011950:	0020      	movs	r0, r4
10011952:	0029      	movs	r1, r5
10011954:	f000 feee 	bl	10012734 <finite>
10011958:	2800      	cmp	r0, #0
1001195a:	d100      	bne.n	1001195e <pow+0x202>
1001195c:	e771      	b.n	10011842 <pow+0xe6>
1001195e:	0030      	movs	r0, r6
10011960:	0039      	movs	r1, r7
10011962:	f000 fee7 	bl	10012734 <finite>
10011966:	2800      	cmp	r0, #0
10011968:	d100      	bne.n	1001196c <pow+0x210>
1001196a:	e76a      	b.n	10011842 <pow+0xe6>
1001196c:	9802      	ldr	r0, [sp, #8]
1001196e:	9903      	ldr	r1, [sp, #12]
10011970:	000b      	movs	r3, r1
10011972:	0002      	movs	r2, r0
10011974:	f003 fc90 	bl	10015298 <__aeabi_dcmpun>
10011978:	ab06      	add	r3, sp, #24
1001197a:	4698      	mov	r8, r3
1001197c:	2800      	cmp	r0, #0
1001197e:	d17a      	bne.n	10011a76 <pow+0x31a>
10011980:	2303      	movs	r3, #3
10011982:	4642      	mov	r2, r8
10011984:	9306      	str	r3, [sp, #24]
10011986:	4b4c      	ldr	r3, [pc, #304]	; (10011ab8 <pow+0x35c>)
10011988:	6210      	str	r0, [r2, #32]
1001198a:	6053      	str	r3, [r2, #4]
1001198c:	465b      	mov	r3, fp
1001198e:	781b      	ldrb	r3, [r3, #0]
10011990:	6094      	str	r4, [r2, #8]
10011992:	60d5      	str	r5, [r2, #12]
10011994:	b25b      	sxtb	r3, r3
10011996:	6116      	str	r6, [r2, #16]
10011998:	6157      	str	r7, [r2, #20]
1001199a:	4699      	mov	r9, r3
1001199c:	2b00      	cmp	r3, #0
1001199e:	d148      	bne.n	10011a32 <pow+0x2d6>
100119a0:	22e0      	movs	r2, #224	; 0xe0
100119a2:	4641      	mov	r1, r8
100119a4:	4b47      	ldr	r3, [pc, #284]	; (10011ac4 <pow+0x368>)
100119a6:	0612      	lsls	r2, r2, #24
100119a8:	618a      	str	r2, [r1, #24]
100119aa:	61cb      	str	r3, [r1, #28]
100119ac:	0020      	movs	r0, r4
100119ae:	2200      	movs	r2, #0
100119b0:	2300      	movs	r3, #0
100119b2:	0029      	movs	r1, r5
100119b4:	f001 f982 	bl	10012cbc <__aeabi_dcmplt>
100119b8:	2800      	cmp	r0, #0
100119ba:	d100      	bne.n	100119be <pow+0x262>
100119bc:	e773      	b.n	100118a6 <pow+0x14a>
100119be:	2200      	movs	r2, #0
100119c0:	4b41      	ldr	r3, [pc, #260]	; (10011ac8 <pow+0x36c>)
100119c2:	0030      	movs	r0, r6
100119c4:	0039      	movs	r1, r7
100119c6:	f002 fe99 	bl	100146fc <__aeabi_dmul>
100119ca:	0004      	movs	r4, r0
100119cc:	000d      	movs	r5, r1
100119ce:	f000 fec3 	bl	10012758 <rint>
100119d2:	0002      	movs	r2, r0
100119d4:	000b      	movs	r3, r1
100119d6:	0020      	movs	r0, r4
100119d8:	0029      	movs	r1, r5
100119da:	f001 f969 	bl	10012cb0 <__aeabi_dcmpeq>
100119de:	2800      	cmp	r0, #0
100119e0:	d105      	bne.n	100119ee <pow+0x292>
100119e2:	22e0      	movs	r2, #224	; 0xe0
100119e4:	4b39      	ldr	r3, [pc, #228]	; (10011acc <pow+0x370>)
100119e6:	0612      	lsls	r2, r2, #24
100119e8:	4641      	mov	r1, r8
100119ea:	618a      	str	r2, [r1, #24]
100119ec:	61cb      	str	r3, [r1, #28]
100119ee:	465b      	mov	r3, fp
100119f0:	781b      	ldrb	r3, [r3, #0]
100119f2:	b25b      	sxtb	r3, r3
100119f4:	4699      	mov	r9, r3
100119f6:	464b      	mov	r3, r9
100119f8:	2b02      	cmp	r3, #2
100119fa:	d000      	beq.n	100119fe <pow+0x2a2>
100119fc:	e753      	b.n	100118a6 <pow+0x14a>
100119fe:	e757      	b.n	100118b0 <pow+0x154>
10011a00:	ab06      	add	r3, sp, #24
10011a02:	4698      	mov	r8, r3
10011a04:	2301      	movs	r3, #1
10011a06:	4642      	mov	r2, r8
10011a08:	9306      	str	r3, [sp, #24]
10011a0a:	4b2b      	ldr	r3, [pc, #172]	; (10011ab8 <pow+0x35c>)
10011a0c:	6053      	str	r3, [r2, #4]
10011a0e:	4643      	mov	r3, r8
10011a10:	609c      	str	r4, [r3, #8]
10011a12:	60dd      	str	r5, [r3, #12]
10011a14:	2400      	movs	r4, #0
10011a16:	9a00      	ldr	r2, [sp, #0]
10011a18:	4d28      	ldr	r5, [pc, #160]	; (10011abc <pow+0x360>)
10011a1a:	621a      	str	r2, [r3, #32]
10011a1c:	611e      	str	r6, [r3, #16]
10011a1e:	615f      	str	r7, [r3, #20]
10011a20:	619c      	str	r4, [r3, #24]
10011a22:	61dd      	str	r5, [r3, #28]
10011a24:	464b      	mov	r3, r9
10011a26:	9400      	str	r4, [sp, #0]
10011a28:	9501      	str	r5, [sp, #4]
10011a2a:	2b02      	cmp	r3, #2
10011a2c:	d000      	beq.n	10011a30 <pow+0x2d4>
10011a2e:	e77b      	b.n	10011928 <pow+0x1cc>
10011a30:	e6e9      	b.n	10011806 <pow+0xaa>
10011a32:	2200      	movs	r2, #0
10011a34:	4641      	mov	r1, r8
10011a36:	4b26      	ldr	r3, [pc, #152]	; (10011ad0 <pow+0x374>)
10011a38:	0020      	movs	r0, r4
10011a3a:	618a      	str	r2, [r1, #24]
10011a3c:	61cb      	str	r3, [r1, #28]
10011a3e:	2200      	movs	r2, #0
10011a40:	2300      	movs	r3, #0
10011a42:	0029      	movs	r1, r5
10011a44:	f001 f93a 	bl	10012cbc <__aeabi_dcmplt>
10011a48:	2800      	cmp	r0, #0
10011a4a:	d0d4      	beq.n	100119f6 <pow+0x29a>
10011a4c:	2200      	movs	r2, #0
10011a4e:	4b1e      	ldr	r3, [pc, #120]	; (10011ac8 <pow+0x36c>)
10011a50:	0030      	movs	r0, r6
10011a52:	0039      	movs	r1, r7
10011a54:	f002 fe52 	bl	100146fc <__aeabi_dmul>
10011a58:	0004      	movs	r4, r0
10011a5a:	000d      	movs	r5, r1
10011a5c:	f000 fe7c 	bl	10012758 <rint>
10011a60:	0002      	movs	r2, r0
10011a62:	000b      	movs	r3, r1
10011a64:	0020      	movs	r0, r4
10011a66:	0029      	movs	r1, r5
10011a68:	f001 f922 	bl	10012cb0 <__aeabi_dcmpeq>
10011a6c:	2800      	cmp	r0, #0
10011a6e:	d1be      	bne.n	100119ee <pow+0x292>
10011a70:	2200      	movs	r2, #0
10011a72:	4b13      	ldr	r3, [pc, #76]	; (10011ac0 <pow+0x364>)
10011a74:	e7b8      	b.n	100119e8 <pow+0x28c>
10011a76:	2301      	movs	r3, #1
10011a78:	4642      	mov	r2, r8
10011a7a:	9306      	str	r3, [sp, #24]
10011a7c:	4b0e      	ldr	r3, [pc, #56]	; (10011ab8 <pow+0x35c>)
10011a7e:	6053      	str	r3, [r2, #4]
10011a80:	4643      	mov	r3, r8
10011a82:	464a      	mov	r2, r9
10011a84:	609c      	str	r4, [r3, #8]
10011a86:	60dd      	str	r5, [r3, #12]
10011a88:	621a      	str	r2, [r3, #32]
10011a8a:	611e      	str	r6, [r3, #16]
10011a8c:	615f      	str	r7, [r3, #20]
10011a8e:	2400      	movs	r4, #0
10011a90:	465b      	mov	r3, fp
10011a92:	571c      	ldrsb	r4, [r3, r4]
10011a94:	2c00      	cmp	r4, #0
10011a96:	d100      	bne.n	10011a9a <pow+0x33e>
10011a98:	e741      	b.n	1001191e <pow+0x1c2>
10011a9a:	2300      	movs	r3, #0
10011a9c:	2200      	movs	r2, #0
10011a9e:	0019      	movs	r1, r3
10011aa0:	0010      	movs	r0, r2
10011aa2:	f002 fa07 	bl	10013eb4 <__aeabi_ddiv>
10011aa6:	4643      	mov	r3, r8
10011aa8:	6198      	str	r0, [r3, #24]
10011aaa:	61d9      	str	r1, [r3, #28]
10011aac:	2c02      	cmp	r4, #2
10011aae:	d100      	bne.n	10011ab2 <pow+0x356>
10011ab0:	e730      	b.n	10011914 <pow+0x1b8>
10011ab2:	e739      	b.n	10011928 <pow+0x1cc>
10011ab4:	1001833c 	.word	0x1001833c
10011ab8:	10018124 	.word	0x10018124
10011abc:	3ff00000 	.word	0x3ff00000
10011ac0:	fff00000 	.word	0xfff00000
10011ac4:	47efffff 	.word	0x47efffff
10011ac8:	3fe00000 	.word	0x3fe00000
10011acc:	c7efffff 	.word	0xc7efffff
10011ad0:	7ff00000 	.word	0x7ff00000

10011ad4 <__ieee754_pow>:
10011ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ad6:	4656      	mov	r6, sl
10011ad8:	464d      	mov	r5, r9
10011ada:	4644      	mov	r4, r8
10011adc:	465f      	mov	r7, fp
10011ade:	b4f0      	push	{r4, r5, r6, r7}
10011ae0:	001c      	movs	r4, r3
10011ae2:	0013      	movs	r3, r2
10011ae4:	0067      	lsls	r7, r4, #1
10011ae6:	b091      	sub	sp, #68	; 0x44
10011ae8:	087f      	lsrs	r7, r7, #1
10011aea:	9300      	str	r3, [sp, #0]
10011aec:	9401      	str	r4, [sp, #4]
10011aee:	0006      	movs	r6, r0
10011af0:	000d      	movs	r5, r1
10011af2:	4680      	mov	r8, r0
10011af4:	4689      	mov	r9, r1
10011af6:	46a2      	mov	sl, r4
10011af8:	433b      	orrs	r3, r7
10011afa:	d032      	beq.n	10011b62 <__ieee754_pow+0x8e>
10011afc:	4b6e      	ldr	r3, [pc, #440]	; (10011cb8 <__ieee754_pow+0x1e4>)
10011afe:	006c      	lsls	r4, r5, #1
10011b00:	0864      	lsrs	r4, r4, #1
10011b02:	429c      	cmp	r4, r3
10011b04:	dc29      	bgt.n	10011b5a <__ieee754_pow+0x86>
10011b06:	d026      	beq.n	10011b56 <__ieee754_pow+0x82>
10011b08:	429f      	cmp	r7, r3
10011b0a:	dc26      	bgt.n	10011b5a <__ieee754_pow+0x86>
10011b0c:	4b6a      	ldr	r3, [pc, #424]	; (10011cb8 <__ieee754_pow+0x1e4>)
10011b0e:	429f      	cmp	r7, r3
10011b10:	d100      	bne.n	10011b14 <__ieee754_pow+0x40>
10011b12:	e089      	b.n	10011c28 <__ieee754_pow+0x154>
10011b14:	2300      	movs	r3, #0
10011b16:	469b      	mov	fp, r3
10011b18:	464b      	mov	r3, r9
10011b1a:	2b00      	cmp	r3, #0
10011b1c:	da00      	bge.n	10011b20 <__ieee754_pow+0x4c>
10011b1e:	e087      	b.n	10011c30 <__ieee754_pow+0x15c>
10011b20:	2a00      	cmp	r2, #0
10011b22:	d12f      	bne.n	10011b84 <__ieee754_pow+0xb0>
10011b24:	4b64      	ldr	r3, [pc, #400]	; (10011cb8 <__ieee754_pow+0x1e4>)
10011b26:	429f      	cmp	r7, r3
10011b28:	d100      	bne.n	10011b2c <__ieee754_pow+0x58>
10011b2a:	e09f      	b.n	10011c6c <__ieee754_pow+0x198>
10011b2c:	4b63      	ldr	r3, [pc, #396]	; (10011cbc <__ieee754_pow+0x1e8>)
10011b2e:	429f      	cmp	r7, r3
10011b30:	d05d      	beq.n	10011bee <__ieee754_pow+0x11a>
10011b32:	2380      	movs	r3, #128	; 0x80
10011b34:	05db      	lsls	r3, r3, #23
10011b36:	459a      	cmp	sl, r3
10011b38:	d101      	bne.n	10011b3e <__ieee754_pow+0x6a>
10011b3a:	f000 fbc1 	bl	100122c0 <__ieee754_pow+0x7ec>
10011b3e:	4b60      	ldr	r3, [pc, #384]	; (10011cc0 <__ieee754_pow+0x1ec>)
10011b40:	459a      	cmp	sl, r3
10011b42:	d11f      	bne.n	10011b84 <__ieee754_pow+0xb0>
10011b44:	464b      	mov	r3, r9
10011b46:	2b00      	cmp	r3, #0
10011b48:	db1c      	blt.n	10011b84 <__ieee754_pow+0xb0>
10011b4a:	0030      	movs	r0, r6
10011b4c:	0029      	movs	r1, r5
10011b4e:	f000 fcf7 	bl	10012540 <__ieee754_sqrt>
10011b52:	0006      	movs	r6, r0
10011b54:	e007      	b.n	10011b66 <__ieee754_pow+0x92>
10011b56:	2800      	cmp	r0, #0
10011b58:	d00d      	beq.n	10011b76 <__ieee754_pow+0xa2>
10011b5a:	4b5a      	ldr	r3, [pc, #360]	; (10011cc4 <__ieee754_pow+0x1f0>)
10011b5c:	18e0      	adds	r0, r4, r3
10011b5e:	4330      	orrs	r0, r6
10011b60:	d10b      	bne.n	10011b7a <__ieee754_pow+0xa6>
10011b62:	2600      	movs	r6, #0
10011b64:	4955      	ldr	r1, [pc, #340]	; (10011cbc <__ieee754_pow+0x1e8>)
10011b66:	0030      	movs	r0, r6
10011b68:	b011      	add	sp, #68	; 0x44
10011b6a:	bc3c      	pop	{r2, r3, r4, r5}
10011b6c:	4690      	mov	r8, r2
10011b6e:	4699      	mov	r9, r3
10011b70:	46a2      	mov	sl, r4
10011b72:	46ab      	mov	fp, r5
10011b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b76:	42a7      	cmp	r7, r4
10011b78:	ddc8      	ble.n	10011b0c <__ieee754_pow+0x38>
10011b7a:	4853      	ldr	r0, [pc, #332]	; (10011cc8 <__ieee754_pow+0x1f4>)
10011b7c:	f000 fde6 	bl	1001274c <nan>
10011b80:	0006      	movs	r6, r0
10011b82:	e7f0      	b.n	10011b66 <__ieee754_pow+0x92>
10011b84:	0030      	movs	r0, r6
10011b86:	0029      	movs	r1, r5
10011b88:	f000 fdd0 	bl	1001272c <fabs>
10011b8c:	4643      	mov	r3, r8
10011b8e:	2b00      	cmp	r3, #0
10011b90:	d01d      	beq.n	10011bce <__ieee754_pow+0xfa>
10011b92:	0feb      	lsrs	r3, r5, #31
10011b94:	3b01      	subs	r3, #1
10011b96:	4698      	mov	r8, r3
10011b98:	465b      	mov	r3, fp
10011b9a:	4642      	mov	r2, r8
10011b9c:	4313      	orrs	r3, r2
10011b9e:	d079      	beq.n	10011c94 <__ieee754_pow+0x1c0>
10011ba0:	4b4a      	ldr	r3, [pc, #296]	; (10011ccc <__ieee754_pow+0x1f8>)
10011ba2:	429f      	cmp	r7, r3
10011ba4:	dc00      	bgt.n	10011ba8 <__ieee754_pow+0xd4>
10011ba6:	e09f      	b.n	10011ce8 <__ieee754_pow+0x214>
10011ba8:	4b49      	ldr	r3, [pc, #292]	; (10011cd0 <__ieee754_pow+0x1fc>)
10011baa:	429f      	cmp	r7, r3
10011bac:	dc01      	bgt.n	10011bb2 <__ieee754_pow+0xde>
10011bae:	f000 fbce 	bl	1001234e <__ieee754_pow+0x87a>
10011bb2:	4b48      	ldr	r3, [pc, #288]	; (10011cd4 <__ieee754_pow+0x200>)
10011bb4:	429c      	cmp	r4, r3
10011bb6:	dd79      	ble.n	10011cac <__ieee754_pow+0x1d8>
10011bb8:	4653      	mov	r3, sl
10011bba:	2b00      	cmp	r3, #0
10011bbc:	dd79      	ble.n	10011cb2 <__ieee754_pow+0x1de>
10011bbe:	4a46      	ldr	r2, [pc, #280]	; (10011cd8 <__ieee754_pow+0x204>)
10011bc0:	4b46      	ldr	r3, [pc, #280]	; (10011cdc <__ieee754_pow+0x208>)
10011bc2:	0010      	movs	r0, r2
10011bc4:	0019      	movs	r1, r3
10011bc6:	f002 fd99 	bl	100146fc <__aeabi_dmul>
10011bca:	0006      	movs	r6, r0
10011bcc:	e7cb      	b.n	10011b66 <__ieee754_pow+0x92>
10011bce:	2c00      	cmp	r4, #0
10011bd0:	d004      	beq.n	10011bdc <__ieee754_pow+0x108>
10011bd2:	4a3a      	ldr	r2, [pc, #232]	; (10011cbc <__ieee754_pow+0x1e8>)
10011bd4:	00ab      	lsls	r3, r5, #2
10011bd6:	089b      	lsrs	r3, r3, #2
10011bd8:	4293      	cmp	r3, r2
10011bda:	d1da      	bne.n	10011b92 <__ieee754_pow+0xbe>
10011bdc:	4653      	mov	r3, sl
10011bde:	2b00      	cmp	r3, #0
10011be0:	da00      	bge.n	10011be4 <__ieee754_pow+0x110>
10011be2:	e3ad      	b.n	10012340 <__ieee754_pow+0x86c>
10011be4:	464b      	mov	r3, r9
10011be6:	2b00      	cmp	r3, #0
10011be8:	db0d      	blt.n	10011c06 <__ieee754_pow+0x132>
10011bea:	0006      	movs	r6, r0
10011bec:	e7bb      	b.n	10011b66 <__ieee754_pow+0x92>
10011bee:	4653      	mov	r3, sl
10011bf0:	0029      	movs	r1, r5
10011bf2:	2b00      	cmp	r3, #0
10011bf4:	dab7      	bge.n	10011b66 <__ieee754_pow+0x92>
10011bf6:	0032      	movs	r2, r6
10011bf8:	002b      	movs	r3, r5
10011bfa:	2000      	movs	r0, #0
10011bfc:	492f      	ldr	r1, [pc, #188]	; (10011cbc <__ieee754_pow+0x1e8>)
10011bfe:	f002 f959 	bl	10013eb4 <__aeabi_ddiv>
10011c02:	0006      	movs	r6, r0
10011c04:	e7af      	b.n	10011b66 <__ieee754_pow+0x92>
10011c06:	4b2f      	ldr	r3, [pc, #188]	; (10011cc4 <__ieee754_pow+0x1f0>)
10011c08:	469c      	mov	ip, r3
10011c0a:	465b      	mov	r3, fp
10011c0c:	4464      	add	r4, ip
10011c0e:	431c      	orrs	r4, r3
10011c10:	d101      	bne.n	10011c16 <__ieee754_pow+0x142>
10011c12:	f000 fc2b 	bl	1001246c <__ieee754_pow+0x998>
10011c16:	465b      	mov	r3, fp
10011c18:	0006      	movs	r6, r0
10011c1a:	2b01      	cmp	r3, #1
10011c1c:	d1a3      	bne.n	10011b66 <__ieee754_pow+0x92>
10011c1e:	2380      	movs	r3, #128	; 0x80
10011c20:	061b      	lsls	r3, r3, #24
10011c22:	469c      	mov	ip, r3
10011c24:	4461      	add	r1, ip
10011c26:	e79e      	b.n	10011b66 <__ieee754_pow+0x92>
10011c28:	2a00      	cmp	r2, #0
10011c2a:	d100      	bne.n	10011c2e <__ieee754_pow+0x15a>
10011c2c:	e772      	b.n	10011b14 <__ieee754_pow+0x40>
10011c2e:	e794      	b.n	10011b5a <__ieee754_pow+0x86>
10011c30:	4b2b      	ldr	r3, [pc, #172]	; (10011ce0 <__ieee754_pow+0x20c>)
10011c32:	429f      	cmp	r7, r3
10011c34:	dc2b      	bgt.n	10011c8e <__ieee754_pow+0x1ba>
10011c36:	4b27      	ldr	r3, [pc, #156]	; (10011cd4 <__ieee754_pow+0x200>)
10011c38:	429f      	cmp	r7, r3
10011c3a:	dc00      	bgt.n	10011c3e <__ieee754_pow+0x16a>
10011c3c:	e770      	b.n	10011b20 <__ieee754_pow+0x4c>
10011c3e:	4929      	ldr	r1, [pc, #164]	; (10011ce4 <__ieee754_pow+0x210>)
10011c40:	153b      	asrs	r3, r7, #20
10011c42:	468c      	mov	ip, r1
10011c44:	4463      	add	r3, ip
10011c46:	2b14      	cmp	r3, #20
10011c48:	dc01      	bgt.n	10011c4e <__ieee754_pow+0x17a>
10011c4a:	f000 fbf2 	bl	10012432 <__ieee754_pow+0x95e>
10011c4e:	2134      	movs	r1, #52	; 0x34
10011c50:	1acb      	subs	r3, r1, r3
10011c52:	9900      	ldr	r1, [sp, #0]
10011c54:	40d9      	lsrs	r1, r3
10011c56:	0008      	movs	r0, r1
10011c58:	4098      	lsls	r0, r3
10011c5a:	4282      	cmp	r2, r0
10011c5c:	d000      	beq.n	10011c60 <__ieee754_pow+0x18c>
10011c5e:	e75f      	b.n	10011b20 <__ieee754_pow+0x4c>
10011c60:	2301      	movs	r3, #1
10011c62:	4019      	ands	r1, r3
10011c64:	3301      	adds	r3, #1
10011c66:	1a5b      	subs	r3, r3, r1
10011c68:	469b      	mov	fp, r3
10011c6a:	e759      	b.n	10011b20 <__ieee754_pow+0x4c>
10011c6c:	4b15      	ldr	r3, [pc, #84]	; (10011cc4 <__ieee754_pow+0x1f0>)
10011c6e:	18e0      	adds	r0, r4, r3
10011c70:	4306      	orrs	r6, r0
10011c72:	d100      	bne.n	10011c76 <__ieee754_pow+0x1a2>
10011c74:	e775      	b.n	10011b62 <__ieee754_pow+0x8e>
10011c76:	4b17      	ldr	r3, [pc, #92]	; (10011cd4 <__ieee754_pow+0x200>)
10011c78:	429c      	cmp	r4, r3
10011c7a:	dc00      	bgt.n	10011c7e <__ieee754_pow+0x1aa>
10011c7c:	e351      	b.n	10012322 <__ieee754_pow+0x84e>
10011c7e:	4653      	mov	r3, sl
10011c80:	2b00      	cmp	r3, #0
10011c82:	db16      	blt.n	10011cb2 <__ieee754_pow+0x1de>
10011c84:	9b00      	ldr	r3, [sp, #0]
10011c86:	9c01      	ldr	r4, [sp, #4]
10011c88:	001e      	movs	r6, r3
10011c8a:	0021      	movs	r1, r4
10011c8c:	e76b      	b.n	10011b66 <__ieee754_pow+0x92>
10011c8e:	2302      	movs	r3, #2
10011c90:	469b      	mov	fp, r3
10011c92:	e745      	b.n	10011b20 <__ieee754_pow+0x4c>
10011c94:	0032      	movs	r2, r6
10011c96:	002b      	movs	r3, r5
10011c98:	0030      	movs	r0, r6
10011c9a:	0029      	movs	r1, r5
10011c9c:	f002 ffa8 	bl	10014bf0 <__aeabi_dsub>
10011ca0:	0002      	movs	r2, r0
10011ca2:	000b      	movs	r3, r1
10011ca4:	f002 f906 	bl	10013eb4 <__aeabi_ddiv>
10011ca8:	0006      	movs	r6, r0
10011caa:	e75c      	b.n	10011b66 <__ieee754_pow+0x92>
10011cac:	4653      	mov	r3, sl
10011cae:	2b00      	cmp	r3, #0
10011cb0:	db85      	blt.n	10011bbe <__ieee754_pow+0xea>
10011cb2:	2600      	movs	r6, #0
10011cb4:	2100      	movs	r1, #0
10011cb6:	e756      	b.n	10011b66 <__ieee754_pow+0x92>
10011cb8:	7ff00000 	.word	0x7ff00000
10011cbc:	3ff00000 	.word	0x3ff00000
10011cc0:	3fe00000 	.word	0x3fe00000
10011cc4:	c0100000 	.word	0xc0100000
10011cc8:	10017888 	.word	0x10017888
10011ccc:	41e00000 	.word	0x41e00000
10011cd0:	43f00000 	.word	0x43f00000
10011cd4:	3fefffff 	.word	0x3fefffff
10011cd8:	8800759c 	.word	0x8800759c
10011cdc:	7e37e43c 	.word	0x7e37e43c
10011ce0:	433fffff 	.word	0x433fffff
10011ce4:	fffffc01 	.word	0xfffffc01
10011ce8:	4be8      	ldr	r3, [pc, #928]	; (1001208c <__ieee754_pow+0x5b8>)
10011cea:	2200      	movs	r2, #0
10011cec:	429c      	cmp	r4, r3
10011cee:	dc06      	bgt.n	10011cfe <__ieee754_pow+0x22a>
10011cf0:	2200      	movs	r2, #0
10011cf2:	4be7      	ldr	r3, [pc, #924]	; (10012090 <__ieee754_pow+0x5bc>)
10011cf4:	f002 fd02 	bl	100146fc <__aeabi_dmul>
10011cf8:	2235      	movs	r2, #53	; 0x35
10011cfa:	000c      	movs	r4, r1
10011cfc:	4252      	negs	r2, r2
10011cfe:	4de5      	ldr	r5, [pc, #916]	; (10012094 <__ieee754_pow+0x5c0>)
10011d00:	1523      	asrs	r3, r4, #20
10011d02:	46ac      	mov	ip, r5
10011d04:	4463      	add	r3, ip
10011d06:	4699      	mov	r9, r3
10011d08:	0324      	lsls	r4, r4, #12
10011d0a:	4de3      	ldr	r5, [pc, #908]	; (10012098 <__ieee754_pow+0x5c4>)
10011d0c:	4be3      	ldr	r3, [pc, #908]	; (1001209c <__ieee754_pow+0x5c8>)
10011d0e:	0b24      	lsrs	r4, r4, #12
10011d10:	4491      	add	r9, r2
10011d12:	4325      	orrs	r5, r4
10011d14:	429c      	cmp	r4, r3
10011d16:	dd09      	ble.n	10011d2c <__ieee754_pow+0x258>
10011d18:	4be1      	ldr	r3, [pc, #900]	; (100120a0 <__ieee754_pow+0x5cc>)
10011d1a:	429c      	cmp	r4, r3
10011d1c:	dc00      	bgt.n	10011d20 <__ieee754_pow+0x24c>
10011d1e:	e3a9      	b.n	10012474 <__ieee754_pow+0x9a0>
10011d20:	2301      	movs	r3, #1
10011d22:	469c      	mov	ip, r3
10011d24:	4bdf      	ldr	r3, [pc, #892]	; (100120a4 <__ieee754_pow+0x5d0>)
10011d26:	44e1      	add	r9, ip
10011d28:	469c      	mov	ip, r3
10011d2a:	4465      	add	r5, ip
10011d2c:	2300      	movs	r3, #0
10011d2e:	2400      	movs	r4, #0
10011d30:	2200      	movs	r2, #0
10011d32:	9308      	str	r3, [sp, #32]
10011d34:	9409      	str	r4, [sp, #36]	; 0x24
10011d36:	930c      	str	r3, [sp, #48]	; 0x30
10011d38:	940d      	str	r4, [sp, #52]	; 0x34
10011d3a:	2400      	movs	r4, #0
10011d3c:	4bd6      	ldr	r3, [pc, #856]	; (10012098 <__ieee754_pow+0x5c4>)
10011d3e:	9206      	str	r2, [sp, #24]
10011d40:	9307      	str	r3, [sp, #28]
10011d42:	9a06      	ldr	r2, [sp, #24]
10011d44:	9b07      	ldr	r3, [sp, #28]
10011d46:	0029      	movs	r1, r5
10011d48:	900a      	str	r0, [sp, #40]	; 0x28
10011d4a:	910b      	str	r1, [sp, #44]	; 0x2c
10011d4c:	f002 ff50 	bl	10014bf0 <__aeabi_dsub>
10011d50:	9a06      	ldr	r2, [sp, #24]
10011d52:	9b07      	ldr	r3, [sp, #28]
10011d54:	0006      	movs	r6, r0
10011d56:	000f      	movs	r7, r1
10011d58:	980a      	ldr	r0, [sp, #40]	; 0x28
10011d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011d5c:	f001 fd7e 	bl	1001385c <__aeabi_dadd>
10011d60:	0002      	movs	r2, r0
10011d62:	000b      	movs	r3, r1
10011d64:	2000      	movs	r0, #0
10011d66:	49cc      	ldr	r1, [pc, #816]	; (10012098 <__ieee754_pow+0x5c4>)
10011d68:	f002 f8a4 	bl	10013eb4 <__aeabi_ddiv>
10011d6c:	000a      	movs	r2, r1
10011d6e:	0001      	movs	r1, r0
10011d70:	0013      	movs	r3, r2
10011d72:	910e      	str	r1, [sp, #56]	; 0x38
10011d74:	920f      	str	r2, [sp, #60]	; 0x3c
10011d76:	0002      	movs	r2, r0
10011d78:	0039      	movs	r1, r7
10011d7a:	0030      	movs	r0, r6
10011d7c:	f002 fcbe 	bl	100146fc <__aeabi_dmul>
10011d80:	000a      	movs	r2, r1
10011d82:	0001      	movs	r1, r0
10011d84:	2080      	movs	r0, #128	; 0x80
10011d86:	9104      	str	r1, [sp, #16]
10011d88:	9205      	str	r2, [sp, #20]
10011d8a:	0013      	movs	r3, r2
10011d8c:	2200      	movs	r2, #0
10011d8e:	2180      	movs	r1, #128	; 0x80
10011d90:	0300      	lsls	r0, r0, #12
10011d92:	4684      	mov	ip, r0
10011d94:	9202      	str	r2, [sp, #8]
10011d96:	9303      	str	r3, [sp, #12]
10011d98:	2200      	movs	r2, #0
10011d9a:	0589      	lsls	r1, r1, #22
10011d9c:	106d      	asrs	r5, r5, #1
10011d9e:	430d      	orrs	r5, r1
10011da0:	4465      	add	r5, ip
10011da2:	192b      	adds	r3, r5, r4
10011da4:	9802      	ldr	r0, [sp, #8]
10011da6:	9903      	ldr	r1, [sp, #12]
10011da8:	0014      	movs	r4, r2
10011daa:	001d      	movs	r5, r3
10011dac:	f002 fca6 	bl	100146fc <__aeabi_dmul>
10011db0:	0002      	movs	r2, r0
10011db2:	000b      	movs	r3, r1
10011db4:	0030      	movs	r0, r6
10011db6:	0039      	movs	r1, r7
10011db8:	f002 ff1a 	bl	10014bf0 <__aeabi_dsub>
10011dbc:	9a06      	ldr	r2, [sp, #24]
10011dbe:	9b07      	ldr	r3, [sp, #28]
10011dc0:	0006      	movs	r6, r0
10011dc2:	000f      	movs	r7, r1
10011dc4:	0020      	movs	r0, r4
10011dc6:	0029      	movs	r1, r5
10011dc8:	f002 ff12 	bl	10014bf0 <__aeabi_dsub>
10011dcc:	0002      	movs	r2, r0
10011dce:	000b      	movs	r3, r1
10011dd0:	980a      	ldr	r0, [sp, #40]	; 0x28
10011dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011dd4:	f002 ff0c 	bl	10014bf0 <__aeabi_dsub>
10011dd8:	9a02      	ldr	r2, [sp, #8]
10011dda:	9b03      	ldr	r3, [sp, #12]
10011ddc:	f002 fc8e 	bl	100146fc <__aeabi_dmul>
10011de0:	0002      	movs	r2, r0
10011de2:	000b      	movs	r3, r1
10011de4:	0030      	movs	r0, r6
10011de6:	0039      	movs	r1, r7
10011de8:	f002 ff02 	bl	10014bf0 <__aeabi_dsub>
10011dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011df0:	f002 fc84 	bl	100146fc <__aeabi_dmul>
10011df4:	9d04      	ldr	r5, [sp, #16]
10011df6:	9e05      	ldr	r6, [sp, #20]
10011df8:	9006      	str	r0, [sp, #24]
10011dfa:	9107      	str	r1, [sp, #28]
10011dfc:	002a      	movs	r2, r5
10011dfe:	0033      	movs	r3, r6
10011e00:	0028      	movs	r0, r5
10011e02:	0031      	movs	r1, r6
10011e04:	f002 fc7a 	bl	100146fc <__aeabi_dmul>
10011e08:	0006      	movs	r6, r0
10011e0a:	000f      	movs	r7, r1
10011e0c:	4aa6      	ldr	r2, [pc, #664]	; (100120a8 <__ieee754_pow+0x5d4>)
10011e0e:	4ba7      	ldr	r3, [pc, #668]	; (100120ac <__ieee754_pow+0x5d8>)
10011e10:	f002 fc74 	bl	100146fc <__aeabi_dmul>
10011e14:	4aa6      	ldr	r2, [pc, #664]	; (100120b0 <__ieee754_pow+0x5dc>)
10011e16:	4ba7      	ldr	r3, [pc, #668]	; (100120b4 <__ieee754_pow+0x5e0>)
10011e18:	f001 fd20 	bl	1001385c <__aeabi_dadd>
10011e1c:	0032      	movs	r2, r6
10011e1e:	003b      	movs	r3, r7
10011e20:	f002 fc6c 	bl	100146fc <__aeabi_dmul>
10011e24:	4aa4      	ldr	r2, [pc, #656]	; (100120b8 <__ieee754_pow+0x5e4>)
10011e26:	4ba5      	ldr	r3, [pc, #660]	; (100120bc <__ieee754_pow+0x5e8>)
10011e28:	f001 fd18 	bl	1001385c <__aeabi_dadd>
10011e2c:	0032      	movs	r2, r6
10011e2e:	003b      	movs	r3, r7
10011e30:	f002 fc64 	bl	100146fc <__aeabi_dmul>
10011e34:	4aa2      	ldr	r2, [pc, #648]	; (100120c0 <__ieee754_pow+0x5ec>)
10011e36:	4ba3      	ldr	r3, [pc, #652]	; (100120c4 <__ieee754_pow+0x5f0>)
10011e38:	f001 fd10 	bl	1001385c <__aeabi_dadd>
10011e3c:	0032      	movs	r2, r6
10011e3e:	003b      	movs	r3, r7
10011e40:	f002 fc5c 	bl	100146fc <__aeabi_dmul>
10011e44:	4aa0      	ldr	r2, [pc, #640]	; (100120c8 <__ieee754_pow+0x5f4>)
10011e46:	4ba1      	ldr	r3, [pc, #644]	; (100120cc <__ieee754_pow+0x5f8>)
10011e48:	f001 fd08 	bl	1001385c <__aeabi_dadd>
10011e4c:	0032      	movs	r2, r6
10011e4e:	003b      	movs	r3, r7
10011e50:	f002 fc54 	bl	100146fc <__aeabi_dmul>
10011e54:	4a9e      	ldr	r2, [pc, #632]	; (100120d0 <__ieee754_pow+0x5fc>)
10011e56:	4b9f      	ldr	r3, [pc, #636]	; (100120d4 <__ieee754_pow+0x600>)
10011e58:	f001 fd00 	bl	1001385c <__aeabi_dadd>
10011e5c:	0032      	movs	r2, r6
10011e5e:	0004      	movs	r4, r0
10011e60:	000d      	movs	r5, r1
10011e62:	003b      	movs	r3, r7
10011e64:	0030      	movs	r0, r6
10011e66:	0039      	movs	r1, r7
10011e68:	f002 fc48 	bl	100146fc <__aeabi_dmul>
10011e6c:	0002      	movs	r2, r0
10011e6e:	000b      	movs	r3, r1
10011e70:	0020      	movs	r0, r4
10011e72:	0029      	movs	r1, r5
10011e74:	f002 fc42 	bl	100146fc <__aeabi_dmul>
10011e78:	9e02      	ldr	r6, [sp, #8]
10011e7a:	9f03      	ldr	r7, [sp, #12]
10011e7c:	0004      	movs	r4, r0
10011e7e:	000d      	movs	r5, r1
10011e80:	9804      	ldr	r0, [sp, #16]
10011e82:	9905      	ldr	r1, [sp, #20]
10011e84:	0032      	movs	r2, r6
10011e86:	003b      	movs	r3, r7
10011e88:	f001 fce8 	bl	1001385c <__aeabi_dadd>
10011e8c:	9a06      	ldr	r2, [sp, #24]
10011e8e:	9b07      	ldr	r3, [sp, #28]
10011e90:	f002 fc34 	bl	100146fc <__aeabi_dmul>
10011e94:	0022      	movs	r2, r4
10011e96:	002b      	movs	r3, r5
10011e98:	f001 fce0 	bl	1001385c <__aeabi_dadd>
10011e9c:	0032      	movs	r2, r6
10011e9e:	900a      	str	r0, [sp, #40]	; 0x28
10011ea0:	910b      	str	r1, [sp, #44]	; 0x2c
10011ea2:	003b      	movs	r3, r7
10011ea4:	0030      	movs	r0, r6
10011ea6:	0039      	movs	r1, r7
10011ea8:	9602      	str	r6, [sp, #8]
10011eaa:	9703      	str	r7, [sp, #12]
10011eac:	f002 fc26 	bl	100146fc <__aeabi_dmul>
10011eb0:	2200      	movs	r2, #0
10011eb2:	4b89      	ldr	r3, [pc, #548]	; (100120d8 <__ieee754_pow+0x604>)
10011eb4:	0004      	movs	r4, r0
10011eb6:	000d      	movs	r5, r1
10011eb8:	f001 fcd0 	bl	1001385c <__aeabi_dadd>
10011ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011ec0:	f001 fccc 	bl	1001385c <__aeabi_dadd>
10011ec4:	2600      	movs	r6, #0
10011ec6:	000f      	movs	r7, r1
10011ec8:	0032      	movs	r2, r6
10011eca:	000b      	movs	r3, r1
10011ecc:	9802      	ldr	r0, [sp, #8]
10011ece:	9903      	ldr	r1, [sp, #12]
10011ed0:	f002 fc14 	bl	100146fc <__aeabi_dmul>
10011ed4:	2200      	movs	r2, #0
10011ed6:	9002      	str	r0, [sp, #8]
10011ed8:	9103      	str	r1, [sp, #12]
10011eda:	4b7f      	ldr	r3, [pc, #508]	; (100120d8 <__ieee754_pow+0x604>)
10011edc:	0030      	movs	r0, r6
10011ede:	0039      	movs	r1, r7
10011ee0:	f002 fe86 	bl	10014bf0 <__aeabi_dsub>
10011ee4:	0022      	movs	r2, r4
10011ee6:	002b      	movs	r3, r5
10011ee8:	f002 fe82 	bl	10014bf0 <__aeabi_dsub>
10011eec:	0002      	movs	r2, r0
10011eee:	000b      	movs	r3, r1
10011ef0:	980a      	ldr	r0, [sp, #40]	; 0x28
10011ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011ef4:	f002 fe7c 	bl	10014bf0 <__aeabi_dsub>
10011ef8:	9a04      	ldr	r2, [sp, #16]
10011efa:	9b05      	ldr	r3, [sp, #20]
10011efc:	f002 fbfe 	bl	100146fc <__aeabi_dmul>
10011f00:	0032      	movs	r2, r6
10011f02:	0004      	movs	r4, r0
10011f04:	000d      	movs	r5, r1
10011f06:	9806      	ldr	r0, [sp, #24]
10011f08:	9907      	ldr	r1, [sp, #28]
10011f0a:	003b      	movs	r3, r7
10011f0c:	f002 fbf6 	bl	100146fc <__aeabi_dmul>
10011f10:	0002      	movs	r2, r0
10011f12:	000b      	movs	r3, r1
10011f14:	0020      	movs	r0, r4
10011f16:	0029      	movs	r1, r5
10011f18:	f001 fca0 	bl	1001385c <__aeabi_dadd>
10011f1c:	0004      	movs	r4, r0
10011f1e:	000d      	movs	r5, r1
10011f20:	0002      	movs	r2, r0
10011f22:	000b      	movs	r3, r1
10011f24:	9802      	ldr	r0, [sp, #8]
10011f26:	9903      	ldr	r1, [sp, #12]
10011f28:	f001 fc98 	bl	1001385c <__aeabi_dadd>
10011f2c:	2600      	movs	r6, #0
10011f2e:	22e0      	movs	r2, #224	; 0xe0
10011f30:	4b6a      	ldr	r3, [pc, #424]	; (100120dc <__ieee754_pow+0x608>)
10011f32:	0612      	lsls	r2, r2, #24
10011f34:	0030      	movs	r0, r6
10011f36:	000f      	movs	r7, r1
10011f38:	f002 fbe0 	bl	100146fc <__aeabi_dmul>
10011f3c:	9a02      	ldr	r2, [sp, #8]
10011f3e:	9b03      	ldr	r3, [sp, #12]
10011f40:	9004      	str	r0, [sp, #16]
10011f42:	9105      	str	r1, [sp, #20]
10011f44:	0030      	movs	r0, r6
10011f46:	0039      	movs	r1, r7
10011f48:	f002 fe52 	bl	10014bf0 <__aeabi_dsub>
10011f4c:	0002      	movs	r2, r0
10011f4e:	000b      	movs	r3, r1
10011f50:	0020      	movs	r0, r4
10011f52:	0029      	movs	r1, r5
10011f54:	f002 fe4c 	bl	10014bf0 <__aeabi_dsub>
10011f58:	4a61      	ldr	r2, [pc, #388]	; (100120e0 <__ieee754_pow+0x60c>)
10011f5a:	4b60      	ldr	r3, [pc, #384]	; (100120dc <__ieee754_pow+0x608>)
10011f5c:	f002 fbce 	bl	100146fc <__aeabi_dmul>
10011f60:	4a60      	ldr	r2, [pc, #384]	; (100120e4 <__ieee754_pow+0x610>)
10011f62:	0004      	movs	r4, r0
10011f64:	000d      	movs	r5, r1
10011f66:	4b60      	ldr	r3, [pc, #384]	; (100120e8 <__ieee754_pow+0x614>)
10011f68:	0030      	movs	r0, r6
10011f6a:	0039      	movs	r1, r7
10011f6c:	f002 fbc6 	bl	100146fc <__aeabi_dmul>
10011f70:	0002      	movs	r2, r0
10011f72:	000b      	movs	r3, r1
10011f74:	0020      	movs	r0, r4
10011f76:	0029      	movs	r1, r5
10011f78:	f001 fc70 	bl	1001385c <__aeabi_dadd>
10011f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10011f80:	f001 fc6c 	bl	1001385c <__aeabi_dadd>
10011f84:	0006      	movs	r6, r0
10011f86:	4648      	mov	r0, r9
10011f88:	000f      	movs	r7, r1
10011f8a:	f003 f9db 	bl	10015344 <__aeabi_i2d>
10011f8e:	0004      	movs	r4, r0
10011f90:	000d      	movs	r5, r1
10011f92:	9804      	ldr	r0, [sp, #16]
10011f94:	9905      	ldr	r1, [sp, #20]
10011f96:	0032      	movs	r2, r6
10011f98:	003b      	movs	r3, r7
10011f9a:	f001 fc5f 	bl	1001385c <__aeabi_dadd>
10011f9e:	9a08      	ldr	r2, [sp, #32]
10011fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011fa2:	f001 fc5b 	bl	1001385c <__aeabi_dadd>
10011fa6:	0022      	movs	r2, r4
10011fa8:	002b      	movs	r3, r5
10011faa:	f001 fc57 	bl	1001385c <__aeabi_dadd>
10011fae:	2000      	movs	r0, #0
10011fb0:	0022      	movs	r2, r4
10011fb2:	002b      	movs	r3, r5
10011fb4:	9002      	str	r0, [sp, #8]
10011fb6:	9103      	str	r1, [sp, #12]
10011fb8:	f002 fe1a 	bl	10014bf0 <__aeabi_dsub>
10011fbc:	9a08      	ldr	r2, [sp, #32]
10011fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011fc0:	f002 fe16 	bl	10014bf0 <__aeabi_dsub>
10011fc4:	9a04      	ldr	r2, [sp, #16]
10011fc6:	9b05      	ldr	r3, [sp, #20]
10011fc8:	f002 fe12 	bl	10014bf0 <__aeabi_dsub>
10011fcc:	0002      	movs	r2, r0
10011fce:	000b      	movs	r3, r1
10011fd0:	0030      	movs	r0, r6
10011fd2:	0039      	movs	r1, r7
10011fd4:	f002 fe0c 	bl	10014bf0 <__aeabi_dsub>
10011fd8:	9004      	str	r0, [sp, #16]
10011fda:	9105      	str	r1, [sp, #20]
10011fdc:	465b      	mov	r3, fp
10011fde:	4642      	mov	r2, r8
10011fe0:	3b01      	subs	r3, #1
10011fe2:	4313      	orrs	r3, r2
10011fe4:	d100      	bne.n	10011fe8 <__ieee754_pow+0x514>
10011fe6:	e197      	b.n	10012318 <__ieee754_pow+0x844>
10011fe8:	2300      	movs	r3, #0
10011fea:	4c2b      	ldr	r4, [pc, #172]	; (10012098 <__ieee754_pow+0x5c4>)
10011fec:	9306      	str	r3, [sp, #24]
10011fee:	9407      	str	r4, [sp, #28]
10011ff0:	9800      	ldr	r0, [sp, #0]
10011ff2:	9901      	ldr	r1, [sp, #4]
10011ff4:	2600      	movs	r6, #0
10011ff6:	000b      	movs	r3, r1
10011ff8:	0032      	movs	r2, r6
10011ffa:	000f      	movs	r7, r1
10011ffc:	f002 fdf8 	bl	10014bf0 <__aeabi_dsub>
10012000:	9a02      	ldr	r2, [sp, #8]
10012002:	9b03      	ldr	r3, [sp, #12]
10012004:	f002 fb7a 	bl	100146fc <__aeabi_dmul>
10012008:	9a00      	ldr	r2, [sp, #0]
1001200a:	9b01      	ldr	r3, [sp, #4]
1001200c:	0004      	movs	r4, r0
1001200e:	000d      	movs	r5, r1
10012010:	9804      	ldr	r0, [sp, #16]
10012012:	9905      	ldr	r1, [sp, #20]
10012014:	f002 fb72 	bl	100146fc <__aeabi_dmul>
10012018:	0002      	movs	r2, r0
1001201a:	000b      	movs	r3, r1
1001201c:	0020      	movs	r0, r4
1001201e:	0029      	movs	r1, r5
10012020:	f001 fc1c 	bl	1001385c <__aeabi_dadd>
10012024:	0004      	movs	r4, r0
10012026:	000d      	movs	r5, r1
10012028:	9802      	ldr	r0, [sp, #8]
1001202a:	9903      	ldr	r1, [sp, #12]
1001202c:	003b      	movs	r3, r7
1001202e:	0032      	movs	r2, r6
10012030:	9404      	str	r4, [sp, #16]
10012032:	9505      	str	r5, [sp, #20]
10012034:	f002 fb62 	bl	100146fc <__aeabi_dmul>
10012038:	9000      	str	r0, [sp, #0]
1001203a:	9101      	str	r1, [sp, #4]
1001203c:	000b      	movs	r3, r1
1001203e:	0002      	movs	r2, r0
10012040:	0029      	movs	r1, r5
10012042:	0020      	movs	r0, r4
10012044:	f001 fc0a 	bl	1001385c <__aeabi_dadd>
10012048:	4b28      	ldr	r3, [pc, #160]	; (100120ec <__ieee754_pow+0x618>)
1001204a:	4681      	mov	r9, r0
1001204c:	1e0f      	subs	r7, r1, #0
1001204e:	468a      	mov	sl, r1
10012050:	429f      	cmp	r7, r3
10012052:	dc00      	bgt.n	10012056 <__ieee754_pow+0x582>
10012054:	e13c      	b.n	100122d0 <__ieee754_pow+0x7fc>
10012056:	4b26      	ldr	r3, [pc, #152]	; (100120f0 <__ieee754_pow+0x61c>)
10012058:	18cb      	adds	r3, r1, r3
1001205a:	4303      	orrs	r3, r0
1001205c:	d000      	beq.n	10012060 <__ieee754_pow+0x58c>
1001205e:	e1db      	b.n	10012418 <__ieee754_pow+0x944>
10012060:	9804      	ldr	r0, [sp, #16]
10012062:	9905      	ldr	r1, [sp, #20]
10012064:	4a23      	ldr	r2, [pc, #140]	; (100120f4 <__ieee754_pow+0x620>)
10012066:	4b24      	ldr	r3, [pc, #144]	; (100120f8 <__ieee754_pow+0x624>)
10012068:	f001 fbf8 	bl	1001385c <__aeabi_dadd>
1001206c:	9a00      	ldr	r2, [sp, #0]
1001206e:	9b01      	ldr	r3, [sp, #4]
10012070:	0004      	movs	r4, r0
10012072:	000d      	movs	r5, r1
10012074:	4648      	mov	r0, r9
10012076:	0039      	movs	r1, r7
10012078:	f002 fdba 	bl	10014bf0 <__aeabi_dsub>
1001207c:	0002      	movs	r2, r0
1001207e:	000b      	movs	r3, r1
10012080:	0020      	movs	r0, r4
10012082:	0029      	movs	r1, r5
10012084:	f000 fe2e 	bl	10012ce4 <__aeabi_dcmpgt>
10012088:	003e      	movs	r6, r7
1001208a:	e037      	b.n	100120fc <__ieee754_pow+0x628>
1001208c:	000fffff 	.word	0x000fffff
10012090:	43400000 	.word	0x43400000
10012094:	fffffc01 	.word	0xfffffc01
10012098:	3ff00000 	.word	0x3ff00000
1001209c:	0003988e 	.word	0x0003988e
100120a0:	000bb679 	.word	0x000bb679
100120a4:	fff00000 	.word	0xfff00000
100120a8:	4a454eef 	.word	0x4a454eef
100120ac:	3fca7e28 	.word	0x3fca7e28
100120b0:	93c9db65 	.word	0x93c9db65
100120b4:	3fcd864a 	.word	0x3fcd864a
100120b8:	a91d4101 	.word	0xa91d4101
100120bc:	3fd17460 	.word	0x3fd17460
100120c0:	518f264d 	.word	0x518f264d
100120c4:	3fd55555 	.word	0x3fd55555
100120c8:	db6fabff 	.word	0xdb6fabff
100120cc:	3fdb6db6 	.word	0x3fdb6db6
100120d0:	33333303 	.word	0x33333303
100120d4:	3fe33333 	.word	0x3fe33333
100120d8:	40080000 	.word	0x40080000
100120dc:	3feec709 	.word	0x3feec709
100120e0:	dc3a03fd 	.word	0xdc3a03fd
100120e4:	145b01f5 	.word	0x145b01f5
100120e8:	be3e2fe0 	.word	0xbe3e2fe0
100120ec:	408fffff 	.word	0x408fffff
100120f0:	bf700000 	.word	0xbf700000
100120f4:	652b82fe 	.word	0x652b82fe
100120f8:	3c971547 	.word	0x3c971547
100120fc:	2800      	cmp	r0, #0
100120fe:	d000      	beq.n	10012102 <__ieee754_pow+0x62e>
10012100:	e18a      	b.n	10012418 <__ieee754_pow+0x944>
10012102:	2280      	movs	r2, #128	; 0x80
10012104:	4be7      	ldr	r3, [pc, #924]	; (100124a4 <__ieee754_pow+0x9d0>)
10012106:	0352      	lsls	r2, r2, #13
10012108:	469c      	mov	ip, r3
1001210a:	0013      	movs	r3, r2
1001210c:	1536      	asrs	r6, r6, #20
1001210e:	4466      	add	r6, ip
10012110:	4133      	asrs	r3, r6
10012112:	49e5      	ldr	r1, [pc, #916]	; (100124a8 <__ieee754_pow+0x9d4>)
10012114:	19db      	adds	r3, r3, r7
10012116:	005e      	lsls	r6, r3, #1
10012118:	001c      	movs	r4, r3
1001211a:	031b      	lsls	r3, r3, #12
1001211c:	468c      	mov	ip, r1
1001211e:	0b1b      	lsrs	r3, r3, #12
10012120:	4313      	orrs	r3, r2
10012122:	2214      	movs	r2, #20
10012124:	0d76      	lsrs	r6, r6, #21
10012126:	4fe1      	ldr	r7, [pc, #900]	; (100124ac <__ieee754_pow+0x9d8>)
10012128:	4466      	add	r6, ip
1001212a:	4137      	asrs	r7, r6
1001212c:	1b96      	subs	r6, r2, r6
1001212e:	4133      	asrs	r3, r6
10012130:	4698      	mov	r8, r3
10012132:	4653      	mov	r3, sl
10012134:	43bc      	bics	r4, r7
10012136:	2000      	movs	r0, #0
10012138:	0021      	movs	r1, r4
1001213a:	2b00      	cmp	r3, #0
1001213c:	da00      	bge.n	10012140 <__ieee754_pow+0x66c>
1001213e:	e1a9      	b.n	10012494 <__ieee754_pow+0x9c0>
10012140:	0002      	movs	r2, r0
10012142:	000b      	movs	r3, r1
10012144:	9800      	ldr	r0, [sp, #0]
10012146:	9901      	ldr	r1, [sp, #4]
10012148:	f002 fd52 	bl	10014bf0 <__aeabi_dsub>
1001214c:	000b      	movs	r3, r1
1001214e:	9000      	str	r0, [sp, #0]
10012150:	9101      	str	r1, [sp, #4]
10012152:	0002      	movs	r2, r0
10012154:	9804      	ldr	r0, [sp, #16]
10012156:	9905      	ldr	r1, [sp, #20]
10012158:	f001 fb80 	bl	1001385c <__aeabi_dadd>
1001215c:	4643      	mov	r3, r8
1001215e:	051b      	lsls	r3, r3, #20
10012160:	4699      	mov	r9, r3
10012162:	2000      	movs	r0, #0
10012164:	2200      	movs	r2, #0
10012166:	4bd2      	ldr	r3, [pc, #840]	; (100124b0 <__ieee754_pow+0x9dc>)
10012168:	0006      	movs	r6, r0
1001216a:	000f      	movs	r7, r1
1001216c:	f002 fac6 	bl	100146fc <__aeabi_dmul>
10012170:	9a00      	ldr	r2, [sp, #0]
10012172:	9b01      	ldr	r3, [sp, #4]
10012174:	9002      	str	r0, [sp, #8]
10012176:	9103      	str	r1, [sp, #12]
10012178:	0030      	movs	r0, r6
1001217a:	0039      	movs	r1, r7
1001217c:	f002 fd38 	bl	10014bf0 <__aeabi_dsub>
10012180:	0002      	movs	r2, r0
10012182:	000b      	movs	r3, r1
10012184:	9804      	ldr	r0, [sp, #16]
10012186:	9905      	ldr	r1, [sp, #20]
10012188:	f002 fd32 	bl	10014bf0 <__aeabi_dsub>
1001218c:	4ac9      	ldr	r2, [pc, #804]	; (100124b4 <__ieee754_pow+0x9e0>)
1001218e:	4bca      	ldr	r3, [pc, #808]	; (100124b8 <__ieee754_pow+0x9e4>)
10012190:	f002 fab4 	bl	100146fc <__aeabi_dmul>
10012194:	4ac9      	ldr	r2, [pc, #804]	; (100124bc <__ieee754_pow+0x9e8>)
10012196:	0004      	movs	r4, r0
10012198:	000d      	movs	r5, r1
1001219a:	4bc9      	ldr	r3, [pc, #804]	; (100124c0 <__ieee754_pow+0x9ec>)
1001219c:	0030      	movs	r0, r6
1001219e:	0039      	movs	r1, r7
100121a0:	f002 faac 	bl	100146fc <__aeabi_dmul>
100121a4:	0002      	movs	r2, r0
100121a6:	000b      	movs	r3, r1
100121a8:	0020      	movs	r0, r4
100121aa:	0029      	movs	r1, r5
100121ac:	f001 fb56 	bl	1001385c <__aeabi_dadd>
100121b0:	0004      	movs	r4, r0
100121b2:	000d      	movs	r5, r1
100121b4:	0002      	movs	r2, r0
100121b6:	000b      	movs	r3, r1
100121b8:	9802      	ldr	r0, [sp, #8]
100121ba:	9903      	ldr	r1, [sp, #12]
100121bc:	f001 fb4e 	bl	1001385c <__aeabi_dadd>
100121c0:	9a02      	ldr	r2, [sp, #8]
100121c2:	9b03      	ldr	r3, [sp, #12]
100121c4:	0006      	movs	r6, r0
100121c6:	000f      	movs	r7, r1
100121c8:	f002 fd12 	bl	10014bf0 <__aeabi_dsub>
100121cc:	0002      	movs	r2, r0
100121ce:	000b      	movs	r3, r1
100121d0:	0020      	movs	r0, r4
100121d2:	0029      	movs	r1, r5
100121d4:	f002 fd0c 	bl	10014bf0 <__aeabi_dsub>
100121d8:	0032      	movs	r2, r6
100121da:	9000      	str	r0, [sp, #0]
100121dc:	9101      	str	r1, [sp, #4]
100121de:	003b      	movs	r3, r7
100121e0:	0030      	movs	r0, r6
100121e2:	0039      	movs	r1, r7
100121e4:	f002 fa8a 	bl	100146fc <__aeabi_dmul>
100121e8:	0004      	movs	r4, r0
100121ea:	000d      	movs	r5, r1
100121ec:	4ab5      	ldr	r2, [pc, #724]	; (100124c4 <__ieee754_pow+0x9f0>)
100121ee:	4bb6      	ldr	r3, [pc, #728]	; (100124c8 <__ieee754_pow+0x9f4>)
100121f0:	f002 fa84 	bl	100146fc <__aeabi_dmul>
100121f4:	4ab5      	ldr	r2, [pc, #724]	; (100124cc <__ieee754_pow+0x9f8>)
100121f6:	4bb6      	ldr	r3, [pc, #728]	; (100124d0 <__ieee754_pow+0x9fc>)
100121f8:	f002 fcfa 	bl	10014bf0 <__aeabi_dsub>
100121fc:	0022      	movs	r2, r4
100121fe:	002b      	movs	r3, r5
10012200:	f002 fa7c 	bl	100146fc <__aeabi_dmul>
10012204:	4ab3      	ldr	r2, [pc, #716]	; (100124d4 <__ieee754_pow+0xa00>)
10012206:	4bb4      	ldr	r3, [pc, #720]	; (100124d8 <__ieee754_pow+0xa04>)
10012208:	f001 fb28 	bl	1001385c <__aeabi_dadd>
1001220c:	0022      	movs	r2, r4
1001220e:	002b      	movs	r3, r5
10012210:	f002 fa74 	bl	100146fc <__aeabi_dmul>
10012214:	4ab1      	ldr	r2, [pc, #708]	; (100124dc <__ieee754_pow+0xa08>)
10012216:	4bb2      	ldr	r3, [pc, #712]	; (100124e0 <__ieee754_pow+0xa0c>)
10012218:	f002 fcea 	bl	10014bf0 <__aeabi_dsub>
1001221c:	0022      	movs	r2, r4
1001221e:	002b      	movs	r3, r5
10012220:	f002 fa6c 	bl	100146fc <__aeabi_dmul>
10012224:	4aaf      	ldr	r2, [pc, #700]	; (100124e4 <__ieee754_pow+0xa10>)
10012226:	4bb0      	ldr	r3, [pc, #704]	; (100124e8 <__ieee754_pow+0xa14>)
10012228:	f001 fb18 	bl	1001385c <__aeabi_dadd>
1001222c:	0022      	movs	r2, r4
1001222e:	002b      	movs	r3, r5
10012230:	f002 fa64 	bl	100146fc <__aeabi_dmul>
10012234:	0002      	movs	r2, r0
10012236:	000b      	movs	r3, r1
10012238:	0030      	movs	r0, r6
1001223a:	0039      	movs	r1, r7
1001223c:	f002 fcd8 	bl	10014bf0 <__aeabi_dsub>
10012240:	0004      	movs	r4, r0
10012242:	000d      	movs	r5, r1
10012244:	0002      	movs	r2, r0
10012246:	000b      	movs	r3, r1
10012248:	0030      	movs	r0, r6
1001224a:	0039      	movs	r1, r7
1001224c:	f002 fa56 	bl	100146fc <__aeabi_dmul>
10012250:	2380      	movs	r3, #128	; 0x80
10012252:	9002      	str	r0, [sp, #8]
10012254:	9103      	str	r1, [sp, #12]
10012256:	2200      	movs	r2, #0
10012258:	05db      	lsls	r3, r3, #23
1001225a:	0020      	movs	r0, r4
1001225c:	0029      	movs	r1, r5
1001225e:	f002 fcc7 	bl	10014bf0 <__aeabi_dsub>
10012262:	0002      	movs	r2, r0
10012264:	000b      	movs	r3, r1
10012266:	9802      	ldr	r0, [sp, #8]
10012268:	9903      	ldr	r1, [sp, #12]
1001226a:	f001 fe23 	bl	10013eb4 <__aeabi_ddiv>
1001226e:	9a00      	ldr	r2, [sp, #0]
10012270:	9b01      	ldr	r3, [sp, #4]
10012272:	0004      	movs	r4, r0
10012274:	000d      	movs	r5, r1
10012276:	0030      	movs	r0, r6
10012278:	0039      	movs	r1, r7
1001227a:	f002 fa3f 	bl	100146fc <__aeabi_dmul>
1001227e:	9a00      	ldr	r2, [sp, #0]
10012280:	9b01      	ldr	r3, [sp, #4]
10012282:	f001 faeb 	bl	1001385c <__aeabi_dadd>
10012286:	0002      	movs	r2, r0
10012288:	000b      	movs	r3, r1
1001228a:	0020      	movs	r0, r4
1001228c:	0029      	movs	r1, r5
1001228e:	f002 fcaf 	bl	10014bf0 <__aeabi_dsub>
10012292:	0032      	movs	r2, r6
10012294:	003b      	movs	r3, r7
10012296:	f002 fcab 	bl	10014bf0 <__aeabi_dsub>
1001229a:	0002      	movs	r2, r0
1001229c:	000b      	movs	r3, r1
1001229e:	2000      	movs	r0, #0
100122a0:	4992      	ldr	r1, [pc, #584]	; (100124ec <__ieee754_pow+0xa18>)
100122a2:	f002 fca5 	bl	10014bf0 <__aeabi_dsub>
100122a6:	464b      	mov	r3, r9
100122a8:	185b      	adds	r3, r3, r1
100122aa:	151a      	asrs	r2, r3, #20
100122ac:	2a00      	cmp	r2, #0
100122ae:	dc00      	bgt.n	100122b2 <__ieee754_pow+0x7de>
100122b0:	e0f4      	b.n	1001249c <__ieee754_pow+0x9c8>
100122b2:	0019      	movs	r1, r3
100122b4:	9a06      	ldr	r2, [sp, #24]
100122b6:	9b07      	ldr	r3, [sp, #28]
100122b8:	f002 fa20 	bl	100146fc <__aeabi_dmul>
100122bc:	0006      	movs	r6, r0
100122be:	e452      	b.n	10011b66 <__ieee754_pow+0x92>
100122c0:	0032      	movs	r2, r6
100122c2:	0030      	movs	r0, r6
100122c4:	002b      	movs	r3, r5
100122c6:	0029      	movs	r1, r5
100122c8:	f002 fa18 	bl	100146fc <__aeabi_dmul>
100122cc:	0006      	movs	r6, r0
100122ce:	e44a      	b.n	10011b66 <__ieee754_pow+0x92>
100122d0:	4b87      	ldr	r3, [pc, #540]	; (100124f0 <__ieee754_pow+0xa1c>)
100122d2:	004e      	lsls	r6, r1, #1
100122d4:	0876      	lsrs	r6, r6, #1
100122d6:	429e      	cmp	r6, r3
100122d8:	dc00      	bgt.n	100122dc <__ieee754_pow+0x808>
100122da:	e0bf      	b.n	1001245c <__ieee754_pow+0x988>
100122dc:	4b85      	ldr	r3, [pc, #532]	; (100124f4 <__ieee754_pow+0xa20>)
100122de:	18cb      	adds	r3, r1, r3
100122e0:	4303      	orrs	r3, r0
100122e2:	d10c      	bne.n	100122fe <__ieee754_pow+0x82a>
100122e4:	9a00      	ldr	r2, [sp, #0]
100122e6:	9b01      	ldr	r3, [sp, #4]
100122e8:	f002 fc82 	bl	10014bf0 <__aeabi_dsub>
100122ec:	0002      	movs	r2, r0
100122ee:	000b      	movs	r3, r1
100122f0:	9804      	ldr	r0, [sp, #16]
100122f2:	9905      	ldr	r1, [sp, #20]
100122f4:	f000 fcec 	bl	10012cd0 <__aeabi_dcmple>
100122f8:	2800      	cmp	r0, #0
100122fa:	d100      	bne.n	100122fe <__ieee754_pow+0x82a>
100122fc:	e701      	b.n	10012102 <__ieee754_pow+0x62e>
100122fe:	9806      	ldr	r0, [sp, #24]
10012300:	9907      	ldr	r1, [sp, #28]
10012302:	4a7d      	ldr	r2, [pc, #500]	; (100124f8 <__ieee754_pow+0xa24>)
10012304:	4b7d      	ldr	r3, [pc, #500]	; (100124fc <__ieee754_pow+0xa28>)
10012306:	f002 f9f9 	bl	100146fc <__aeabi_dmul>
1001230a:	4a7b      	ldr	r2, [pc, #492]	; (100124f8 <__ieee754_pow+0xa24>)
1001230c:	4b7b      	ldr	r3, [pc, #492]	; (100124fc <__ieee754_pow+0xa28>)
1001230e:	f002 f9f5 	bl	100146fc <__aeabi_dmul>
10012312:	0006      	movs	r6, r0
10012314:	f7ff fc27 	bl	10011b66 <__ieee754_pow+0x92>
10012318:	2300      	movs	r3, #0
1001231a:	4c79      	ldr	r4, [pc, #484]	; (10012500 <__ieee754_pow+0xa2c>)
1001231c:	9306      	str	r3, [sp, #24]
1001231e:	9407      	str	r4, [sp, #28]
10012320:	e666      	b.n	10011ff0 <__ieee754_pow+0x51c>
10012322:	4653      	mov	r3, sl
10012324:	2b00      	cmp	r3, #0
10012326:	db00      	blt.n	1001232a <__ieee754_pow+0x856>
10012328:	e4c3      	b.n	10011cb2 <__ieee754_pow+0x1de>
1001232a:	9b00      	ldr	r3, [sp, #0]
1001232c:	9c01      	ldr	r4, [sp, #4]
1001232e:	2280      	movs	r2, #128	; 0x80
10012330:	0612      	lsls	r2, r2, #24
10012332:	001e      	movs	r6, r3
10012334:	4694      	mov	ip, r2
10012336:	0023      	movs	r3, r4
10012338:	4463      	add	r3, ip
1001233a:	0019      	movs	r1, r3
1001233c:	f7ff fc13 	bl	10011b66 <__ieee754_pow+0x92>
10012340:	0002      	movs	r2, r0
10012342:	000b      	movs	r3, r1
10012344:	2000      	movs	r0, #0
10012346:	4969      	ldr	r1, [pc, #420]	; (100124ec <__ieee754_pow+0xa18>)
10012348:	f001 fdb4 	bl	10013eb4 <__aeabi_ddiv>
1001234c:	e44a      	b.n	10011be4 <__ieee754_pow+0x110>
1001234e:	4b6d      	ldr	r3, [pc, #436]	; (10012504 <__ieee754_pow+0xa30>)
10012350:	429c      	cmp	r4, r3
10012352:	dc00      	bgt.n	10012356 <__ieee754_pow+0x882>
10012354:	e4aa      	b.n	10011cac <__ieee754_pow+0x1d8>
10012356:	4b65      	ldr	r3, [pc, #404]	; (100124ec <__ieee754_pow+0xa18>)
10012358:	429c      	cmp	r4, r3
1001235a:	dd01      	ble.n	10012360 <__ieee754_pow+0x88c>
1001235c:	f7ff fc2c 	bl	10011bb8 <__ieee754_pow+0xe4>
10012360:	2200      	movs	r2, #0
10012362:	4b62      	ldr	r3, [pc, #392]	; (100124ec <__ieee754_pow+0xa18>)
10012364:	f002 fc44 	bl	10014bf0 <__aeabi_dsub>
10012368:	22c0      	movs	r2, #192	; 0xc0
1001236a:	4b67      	ldr	r3, [pc, #412]	; (10012508 <__ieee754_pow+0xa34>)
1001236c:	05d2      	lsls	r2, r2, #23
1001236e:	0004      	movs	r4, r0
10012370:	000d      	movs	r5, r1
10012372:	f002 f9c3 	bl	100146fc <__aeabi_dmul>
10012376:	4a65      	ldr	r2, [pc, #404]	; (1001250c <__ieee754_pow+0xa38>)
10012378:	0006      	movs	r6, r0
1001237a:	000f      	movs	r7, r1
1001237c:	4b64      	ldr	r3, [pc, #400]	; (10012510 <__ieee754_pow+0xa3c>)
1001237e:	0020      	movs	r0, r4
10012380:	0029      	movs	r1, r5
10012382:	f002 f9bb 	bl	100146fc <__aeabi_dmul>
10012386:	2200      	movs	r2, #0
10012388:	9002      	str	r0, [sp, #8]
1001238a:	9103      	str	r1, [sp, #12]
1001238c:	4b61      	ldr	r3, [pc, #388]	; (10012514 <__ieee754_pow+0xa40>)
1001238e:	0020      	movs	r0, r4
10012390:	0029      	movs	r1, r5
10012392:	f002 f9b3 	bl	100146fc <__aeabi_dmul>
10012396:	0002      	movs	r2, r0
10012398:	000b      	movs	r3, r1
1001239a:	485f      	ldr	r0, [pc, #380]	; (10012518 <__ieee754_pow+0xa44>)
1001239c:	495f      	ldr	r1, [pc, #380]	; (1001251c <__ieee754_pow+0xa48>)
1001239e:	f002 fc27 	bl	10014bf0 <__aeabi_dsub>
100123a2:	0022      	movs	r2, r4
100123a4:	002b      	movs	r3, r5
100123a6:	f002 f9a9 	bl	100146fc <__aeabi_dmul>
100123aa:	0002      	movs	r2, r0
100123ac:	000b      	movs	r3, r1
100123ae:	2000      	movs	r0, #0
100123b0:	495b      	ldr	r1, [pc, #364]	; (10012520 <__ieee754_pow+0xa4c>)
100123b2:	f002 fc1d 	bl	10014bf0 <__aeabi_dsub>
100123b6:	0022      	movs	r2, r4
100123b8:	9004      	str	r0, [sp, #16]
100123ba:	9105      	str	r1, [sp, #20]
100123bc:	002b      	movs	r3, r5
100123be:	0020      	movs	r0, r4
100123c0:	0029      	movs	r1, r5
100123c2:	f002 f99b 	bl	100146fc <__aeabi_dmul>
100123c6:	0002      	movs	r2, r0
100123c8:	000b      	movs	r3, r1
100123ca:	9804      	ldr	r0, [sp, #16]
100123cc:	9905      	ldr	r1, [sp, #20]
100123ce:	f002 f995 	bl	100146fc <__aeabi_dmul>
100123d2:	4a54      	ldr	r2, [pc, #336]	; (10012524 <__ieee754_pow+0xa50>)
100123d4:	4b4c      	ldr	r3, [pc, #304]	; (10012508 <__ieee754_pow+0xa34>)
100123d6:	f002 f991 	bl	100146fc <__aeabi_dmul>
100123da:	0002      	movs	r2, r0
100123dc:	000b      	movs	r3, r1
100123de:	9802      	ldr	r0, [sp, #8]
100123e0:	9903      	ldr	r1, [sp, #12]
100123e2:	f002 fc05 	bl	10014bf0 <__aeabi_dsub>
100123e6:	0002      	movs	r2, r0
100123e8:	000b      	movs	r3, r1
100123ea:	0004      	movs	r4, r0
100123ec:	000d      	movs	r5, r1
100123ee:	0030      	movs	r0, r6
100123f0:	0039      	movs	r1, r7
100123f2:	f001 fa33 	bl	1001385c <__aeabi_dadd>
100123f6:	2200      	movs	r2, #0
100123f8:	0010      	movs	r0, r2
100123fa:	003b      	movs	r3, r7
100123fc:	0032      	movs	r2, r6
100123fe:	9002      	str	r0, [sp, #8]
10012400:	9103      	str	r1, [sp, #12]
10012402:	f002 fbf5 	bl	10014bf0 <__aeabi_dsub>
10012406:	0002      	movs	r2, r0
10012408:	000b      	movs	r3, r1
1001240a:	0020      	movs	r0, r4
1001240c:	0029      	movs	r1, r5
1001240e:	f002 fbef 	bl	10014bf0 <__aeabi_dsub>
10012412:	9004      	str	r0, [sp, #16]
10012414:	9105      	str	r1, [sp, #20]
10012416:	e5e1      	b.n	10011fdc <__ieee754_pow+0x508>
10012418:	4a43      	ldr	r2, [pc, #268]	; (10012528 <__ieee754_pow+0xa54>)
1001241a:	4b44      	ldr	r3, [pc, #272]	; (1001252c <__ieee754_pow+0xa58>)
1001241c:	9806      	ldr	r0, [sp, #24]
1001241e:	9907      	ldr	r1, [sp, #28]
10012420:	f002 f96c 	bl	100146fc <__aeabi_dmul>
10012424:	4a40      	ldr	r2, [pc, #256]	; (10012528 <__ieee754_pow+0xa54>)
10012426:	4b41      	ldr	r3, [pc, #260]	; (1001252c <__ieee754_pow+0xa58>)
10012428:	f002 f968 	bl	100146fc <__aeabi_dmul>
1001242c:	0006      	movs	r6, r0
1001242e:	f7ff fb9a 	bl	10011b66 <__ieee754_pow+0x92>
10012432:	2a00      	cmp	r2, #0
10012434:	d001      	beq.n	1001243a <__ieee754_pow+0x966>
10012436:	f7ff fba5 	bl	10011b84 <__ieee754_pow+0xb0>
1001243a:	3214      	adds	r2, #20
1001243c:	1ad3      	subs	r3, r2, r3
1001243e:	003a      	movs	r2, r7
10012440:	411a      	asrs	r2, r3
10012442:	0011      	movs	r1, r2
10012444:	4099      	lsls	r1, r3
10012446:	428f      	cmp	r7, r1
10012448:	d001      	beq.n	1001244e <__ieee754_pow+0x97a>
1001244a:	f7ff fb6f 	bl	10011b2c <__ieee754_pow+0x58>
1001244e:	2301      	movs	r3, #1
10012450:	4013      	ands	r3, r2
10012452:	2202      	movs	r2, #2
10012454:	1ad3      	subs	r3, r2, r3
10012456:	469b      	mov	fp, r3
10012458:	f7ff fb68 	bl	10011b2c <__ieee754_pow+0x58>
1001245c:	4b30      	ldr	r3, [pc, #192]	; (10012520 <__ieee754_pow+0xa4c>)
1001245e:	429e      	cmp	r6, r3
10012460:	dd00      	ble.n	10012464 <__ieee754_pow+0x990>
10012462:	e64e      	b.n	10012102 <__ieee754_pow+0x62e>
10012464:	2300      	movs	r3, #0
10012466:	4699      	mov	r9, r3
10012468:	4698      	mov	r8, r3
1001246a:	e67a      	b.n	10012162 <__ieee754_pow+0x68e>
1001246c:	0002      	movs	r2, r0
1001246e:	000b      	movs	r3, r1
10012470:	f7ff fc14 	bl	10011c9c <__ieee754_pow+0x1c8>
10012474:	2380      	movs	r3, #128	; 0x80
10012476:	4c2e      	ldr	r4, [pc, #184]	; (10012530 <__ieee754_pow+0xa5c>)
10012478:	05db      	lsls	r3, r3, #23
1001247a:	9308      	str	r3, [sp, #32]
1001247c:	9409      	str	r4, [sp, #36]	; 0x24
1001247e:	4b2d      	ldr	r3, [pc, #180]	; (10012534 <__ieee754_pow+0xa60>)
10012480:	4c2d      	ldr	r4, [pc, #180]	; (10012538 <__ieee754_pow+0xa64>)
10012482:	2200      	movs	r2, #0
10012484:	930c      	str	r3, [sp, #48]	; 0x30
10012486:	940d      	str	r4, [sp, #52]	; 0x34
10012488:	2480      	movs	r4, #128	; 0x80
1001248a:	4b2c      	ldr	r3, [pc, #176]	; (1001253c <__ieee754_pow+0xa68>)
1001248c:	02e4      	lsls	r4, r4, #11
1001248e:	9206      	str	r2, [sp, #24]
10012490:	9307      	str	r3, [sp, #28]
10012492:	e456      	b.n	10011d42 <__ieee754_pow+0x26e>
10012494:	4643      	mov	r3, r8
10012496:	425b      	negs	r3, r3
10012498:	4698      	mov	r8, r3
1001249a:	e651      	b.n	10012140 <__ieee754_pow+0x66c>
1001249c:	4642      	mov	r2, r8
1001249e:	f000 f9fd 	bl	1001289c <scalbn>
100124a2:	e707      	b.n	100122b4 <__ieee754_pow+0x7e0>
100124a4:	fffffc02 	.word	0xfffffc02
100124a8:	fffffc01 	.word	0xfffffc01
100124ac:	000fffff 	.word	0x000fffff
100124b0:	3fe62e43 	.word	0x3fe62e43
100124b4:	fefa39ef 	.word	0xfefa39ef
100124b8:	3fe62e42 	.word	0x3fe62e42
100124bc:	0ca86c39 	.word	0x0ca86c39
100124c0:	be205c61 	.word	0xbe205c61
100124c4:	72bea4d0 	.word	0x72bea4d0
100124c8:	3e663769 	.word	0x3e663769
100124cc:	c5d26bf1 	.word	0xc5d26bf1
100124d0:	3ebbbd41 	.word	0x3ebbbd41
100124d4:	af25de2c 	.word	0xaf25de2c
100124d8:	3f11566a 	.word	0x3f11566a
100124dc:	16bebd93 	.word	0x16bebd93
100124e0:	3f66c16c 	.word	0x3f66c16c
100124e4:	5555553e 	.word	0x5555553e
100124e8:	3fc55555 	.word	0x3fc55555
100124ec:	3ff00000 	.word	0x3ff00000
100124f0:	4090cbff 	.word	0x4090cbff
100124f4:	3f6f3400 	.word	0x3f6f3400
100124f8:	c2f8f359 	.word	0xc2f8f359
100124fc:	01a56e1f 	.word	0x01a56e1f
10012500:	bff00000 	.word	0xbff00000
10012504:	3feffffe 	.word	0x3feffffe
10012508:	3ff71547 	.word	0x3ff71547
1001250c:	f85ddf44 	.word	0xf85ddf44
10012510:	3e54ae0b 	.word	0x3e54ae0b
10012514:	3fd00000 	.word	0x3fd00000
10012518:	55555555 	.word	0x55555555
1001251c:	3fd55555 	.word	0x3fd55555
10012520:	3fe00000 	.word	0x3fe00000
10012524:	652b82fe 	.word	0x652b82fe
10012528:	8800759c 	.word	0x8800759c
1001252c:	7e37e43c 	.word	0x7e37e43c
10012530:	3fe2b803 	.word	0x3fe2b803
10012534:	43cfd006 	.word	0x43cfd006
10012538:	3e4cfdeb 	.word	0x3e4cfdeb
1001253c:	3ff80000 	.word	0x3ff80000

10012540 <__ieee754_sqrt>:
10012540:	b5f0      	push	{r4, r5, r6, r7, lr}
10012542:	4656      	mov	r6, sl
10012544:	464d      	mov	r5, r9
10012546:	4644      	mov	r4, r8
10012548:	465f      	mov	r7, fp
1001254a:	4b75      	ldr	r3, [pc, #468]	; (10012720 <__ieee754_sqrt+0x1e0>)
1001254c:	b4f0      	push	{r4, r5, r6, r7}
1001254e:	000a      	movs	r2, r1
10012550:	000d      	movs	r5, r1
10012552:	0019      	movs	r1, r3
10012554:	b083      	sub	sp, #12
10012556:	0006      	movs	r6, r0
10012558:	0004      	movs	r4, r0
1001255a:	4029      	ands	r1, r5
1001255c:	4299      	cmp	r1, r3
1001255e:	d100      	bne.n	10012562 <__ieee754_sqrt+0x22>
10012560:	e0ba      	b.n	100126d8 <__ieee754_sqrt+0x198>
10012562:	2d00      	cmp	r5, #0
10012564:	dc00      	bgt.n	10012568 <__ieee754_sqrt+0x28>
10012566:	e094      	b.n	10012692 <__ieee754_sqrt+0x152>
10012568:	152d      	asrs	r5, r5, #20
1001256a:	d100      	bne.n	1001256e <__ieee754_sqrt+0x2e>
1001256c:	e0a3      	b.n	100126b6 <__ieee754_sqrt+0x176>
1001256e:	4b6d      	ldr	r3, [pc, #436]	; (10012724 <__ieee754_sqrt+0x1e4>)
10012570:	0312      	lsls	r2, r2, #12
10012572:	469c      	mov	ip, r3
10012574:	2380      	movs	r3, #128	; 0x80
10012576:	0b12      	lsrs	r2, r2, #12
10012578:	035b      	lsls	r3, r3, #13
1001257a:	4465      	add	r5, ip
1001257c:	431a      	orrs	r2, r3
1001257e:	07eb      	lsls	r3, r5, #31
10012580:	d500      	bpl.n	10012584 <__ieee754_sqrt+0x44>
10012582:	e081      	b.n	10012688 <__ieee754_sqrt+0x148>
10012584:	106b      	asrs	r3, r5, #1
10012586:	4698      	mov	r8, r3
10012588:	0fe3      	lsrs	r3, r4, #31
1001258a:	189b      	adds	r3, r3, r2
1001258c:	189b      	adds	r3, r3, r2
1001258e:	2280      	movs	r2, #128	; 0x80
10012590:	2116      	movs	r1, #22
10012592:	2600      	movs	r6, #0
10012594:	2700      	movs	r7, #0
10012596:	0064      	lsls	r4, r4, #1
10012598:	0392      	lsls	r2, r2, #14
1001259a:	18b8      	adds	r0, r7, r2
1001259c:	4298      	cmp	r0, r3
1001259e:	dc02      	bgt.n	100125a6 <__ieee754_sqrt+0x66>
100125a0:	1887      	adds	r7, r0, r2
100125a2:	1a1b      	subs	r3, r3, r0
100125a4:	18b6      	adds	r6, r6, r2
100125a6:	0fe0      	lsrs	r0, r4, #31
100125a8:	005b      	lsls	r3, r3, #1
100125aa:	3901      	subs	r1, #1
100125ac:	181b      	adds	r3, r3, r0
100125ae:	0064      	lsls	r4, r4, #1
100125b0:	0852      	lsrs	r2, r2, #1
100125b2:	2900      	cmp	r1, #0
100125b4:	d1f1      	bne.n	1001259a <__ieee754_sqrt+0x5a>
100125b6:	2200      	movs	r2, #0
100125b8:	9201      	str	r2, [sp, #4]
100125ba:	4694      	mov	ip, r2
100125bc:	2280      	movs	r2, #128	; 0x80
100125be:	0612      	lsls	r2, r2, #24
100125c0:	2020      	movs	r0, #32
100125c2:	4691      	mov	r9, r2
100125c4:	e009      	b.n	100125da <__ieee754_sqrt+0x9a>
100125c6:	429f      	cmp	r7, r3
100125c8:	d041      	beq.n	1001264e <__ieee754_sqrt+0x10e>
100125ca:	0fe1      	lsrs	r1, r4, #31
100125cc:	18c9      	adds	r1, r1, r3
100125ce:	3801      	subs	r0, #1
100125d0:	18cb      	adds	r3, r1, r3
100125d2:	0064      	lsls	r4, r4, #1
100125d4:	0852      	lsrs	r2, r2, #1
100125d6:	2800      	cmp	r0, #0
100125d8:	d01e      	beq.n	10012618 <__ieee754_sqrt+0xd8>
100125da:	4661      	mov	r1, ip
100125dc:	1851      	adds	r1, r2, r1
100125de:	429f      	cmp	r7, r3
100125e0:	daf1      	bge.n	100125c6 <__ieee754_sqrt+0x86>
100125e2:	188d      	adds	r5, r1, r2
100125e4:	46ac      	mov	ip, r5
100125e6:	0fcd      	lsrs	r5, r1, #31
100125e8:	07ed      	lsls	r5, r5, #31
100125ea:	46ba      	mov	sl, r7
100125ec:	454d      	cmp	r5, r9
100125ee:	d039      	beq.n	10012664 <__ieee754_sqrt+0x124>
100125f0:	1bdb      	subs	r3, r3, r7
100125f2:	428c      	cmp	r4, r1
100125f4:	41bf      	sbcs	r7, r7
100125f6:	427f      	negs	r7, r7
100125f8:	1bdb      	subs	r3, r3, r7
100125fa:	1a64      	subs	r4, r4, r1
100125fc:	9901      	ldr	r1, [sp, #4]
100125fe:	3801      	subs	r0, #1
10012600:	468b      	mov	fp, r1
10012602:	4493      	add	fp, r2
10012604:	4659      	mov	r1, fp
10012606:	9101      	str	r1, [sp, #4]
10012608:	0fe1      	lsrs	r1, r4, #31
1001260a:	18c9      	adds	r1, r1, r3
1001260c:	4657      	mov	r7, sl
1001260e:	18cb      	adds	r3, r1, r3
10012610:	0064      	lsls	r4, r4, #1
10012612:	0852      	lsrs	r2, r2, #1
10012614:	2800      	cmp	r0, #0
10012616:	d1e0      	bne.n	100125da <__ieee754_sqrt+0x9a>
10012618:	4323      	orrs	r3, r4
1001261a:	d12b      	bne.n	10012674 <__ieee754_sqrt+0x134>
1001261c:	9b01      	ldr	r3, [sp, #4]
1001261e:	085b      	lsrs	r3, r3, #1
10012620:	4941      	ldr	r1, [pc, #260]	; (10012728 <__ieee754_sqrt+0x1e8>)
10012622:	1072      	asrs	r2, r6, #1
10012624:	468c      	mov	ip, r1
10012626:	4462      	add	r2, ip
10012628:	07f1      	lsls	r1, r6, #31
1001262a:	d502      	bpl.n	10012632 <__ieee754_sqrt+0xf2>
1001262c:	2180      	movs	r1, #128	; 0x80
1001262e:	0609      	lsls	r1, r1, #24
10012630:	430b      	orrs	r3, r1
10012632:	4641      	mov	r1, r8
10012634:	0509      	lsls	r1, r1, #20
10012636:	188d      	adds	r5, r1, r2
10012638:	001e      	movs	r6, r3
1001263a:	002f      	movs	r7, r5
1001263c:	0030      	movs	r0, r6
1001263e:	0039      	movs	r1, r7
10012640:	b003      	add	sp, #12
10012642:	bc3c      	pop	{r2, r3, r4, r5}
10012644:	4690      	mov	r8, r2
10012646:	4699      	mov	r9, r3
10012648:	46a2      	mov	sl, r4
1001264a:	46ab      	mov	fp, r5
1001264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001264e:	42a1      	cmp	r1, r4
10012650:	d80e      	bhi.n	10012670 <__ieee754_sqrt+0x130>
10012652:	188d      	adds	r5, r1, r2
10012654:	46ac      	mov	ip, r5
10012656:	0fcd      	lsrs	r5, r1, #31
10012658:	07ed      	lsls	r5, r5, #31
1001265a:	454d      	cmp	r5, r9
1001265c:	d048      	beq.n	100126f0 <__ieee754_sqrt+0x1b0>
1001265e:	469a      	mov	sl, r3
10012660:	2300      	movs	r3, #0
10012662:	e7ca      	b.n	100125fa <__ieee754_sqrt+0xba>
10012664:	4665      	mov	r5, ip
10012666:	2d00      	cmp	r5, #0
10012668:	dbc2      	blt.n	100125f0 <__ieee754_sqrt+0xb0>
1001266a:	1c7d      	adds	r5, r7, #1
1001266c:	46aa      	mov	sl, r5
1001266e:	e7bf      	b.n	100125f0 <__ieee754_sqrt+0xb0>
10012670:	003b      	movs	r3, r7
10012672:	e7aa      	b.n	100125ca <__ieee754_sqrt+0x8a>
10012674:	9b01      	ldr	r3, [sp, #4]
10012676:	3301      	adds	r3, #1
10012678:	d03e      	beq.n	100126f8 <__ieee754_sqrt+0x1b8>
1001267a:	9a01      	ldr	r2, [sp, #4]
1001267c:	2301      	movs	r3, #1
1001267e:	4694      	mov	ip, r2
10012680:	4013      	ands	r3, r2
10012682:	4463      	add	r3, ip
10012684:	085b      	lsrs	r3, r3, #1
10012686:	e7cb      	b.n	10012620 <__ieee754_sqrt+0xe0>
10012688:	0fe3      	lsrs	r3, r4, #31
1001268a:	0052      	lsls	r2, r2, #1
1001268c:	189a      	adds	r2, r3, r2
1001268e:	0064      	lsls	r4, r4, #1
10012690:	e778      	b.n	10012584 <__ieee754_sqrt+0x44>
10012692:	006b      	lsls	r3, r5, #1
10012694:	085b      	lsrs	r3, r3, #1
10012696:	4303      	orrs	r3, r0
10012698:	002f      	movs	r7, r5
1001269a:	2b00      	cmp	r3, #0
1001269c:	d0ce      	beq.n	1001263c <__ieee754_sqrt+0xfc>
1001269e:	2500      	movs	r5, #0
100126a0:	2a00      	cmp	r2, #0
100126a2:	d131      	bne.n	10012708 <__ieee754_sqrt+0x1c8>
100126a4:	0ae2      	lsrs	r2, r4, #11
100126a6:	3d15      	subs	r5, #21
100126a8:	0564      	lsls	r4, r4, #21
100126aa:	2a00      	cmp	r2, #0
100126ac:	d0fa      	beq.n	100126a4 <__ieee754_sqrt+0x164>
100126ae:	2380      	movs	r3, #128	; 0x80
100126b0:	035b      	lsls	r3, r3, #13
100126b2:	421a      	tst	r2, r3
100126b4:	d123      	bne.n	100126fe <__ieee754_sqrt+0x1be>
100126b6:	2080      	movs	r0, #128	; 0x80
100126b8:	2300      	movs	r3, #0
100126ba:	0340      	lsls	r0, r0, #13
100126bc:	e000      	b.n	100126c0 <__ieee754_sqrt+0x180>
100126be:	000b      	movs	r3, r1
100126c0:	0052      	lsls	r2, r2, #1
100126c2:	1c59      	adds	r1, r3, #1
100126c4:	4202      	tst	r2, r0
100126c6:	d0fa      	beq.n	100126be <__ieee754_sqrt+0x17e>
100126c8:	2020      	movs	r0, #32
100126ca:	1a40      	subs	r0, r0, r1
100126cc:	1aed      	subs	r5, r5, r3
100126ce:	0023      	movs	r3, r4
100126d0:	40c3      	lsrs	r3, r0
100126d2:	408c      	lsls	r4, r1
100126d4:	431a      	orrs	r2, r3
100126d6:	e74a      	b.n	1001256e <__ieee754_sqrt+0x2e>
100126d8:	0002      	movs	r2, r0
100126da:	002b      	movs	r3, r5
100126dc:	0029      	movs	r1, r5
100126de:	f002 f80d 	bl	100146fc <__aeabi_dmul>
100126e2:	0032      	movs	r2, r6
100126e4:	002b      	movs	r3, r5
100126e6:	f001 f8b9 	bl	1001385c <__aeabi_dadd>
100126ea:	0006      	movs	r6, r0
100126ec:	000f      	movs	r7, r1
100126ee:	e7a5      	b.n	1001263c <__ieee754_sqrt+0xfc>
100126f0:	4665      	mov	r5, ip
100126f2:	2d00      	cmp	r5, #0
100126f4:	dab9      	bge.n	1001266a <__ieee754_sqrt+0x12a>
100126f6:	e7b2      	b.n	1001265e <__ieee754_sqrt+0x11e>
100126f8:	3601      	adds	r6, #1
100126fa:	2300      	movs	r3, #0
100126fc:	e790      	b.n	10012620 <__ieee754_sqrt+0xe0>
100126fe:	2301      	movs	r3, #1
10012700:	2020      	movs	r0, #32
10012702:	425b      	negs	r3, r3
10012704:	2100      	movs	r1, #0
10012706:	e7e1      	b.n	100126cc <__ieee754_sqrt+0x18c>
10012708:	003b      	movs	r3, r7
1001270a:	0002      	movs	r2, r0
1001270c:	0039      	movs	r1, r7
1001270e:	f002 fa6f 	bl	10014bf0 <__aeabi_dsub>
10012712:	0002      	movs	r2, r0
10012714:	000b      	movs	r3, r1
10012716:	f001 fbcd 	bl	10013eb4 <__aeabi_ddiv>
1001271a:	0006      	movs	r6, r0
1001271c:	000f      	movs	r7, r1
1001271e:	e78d      	b.n	1001263c <__ieee754_sqrt+0xfc>
10012720:	7ff00000 	.word	0x7ff00000
10012724:	fffffc01 	.word	0xfffffc01
10012728:	3fe00000 	.word	0x3fe00000

1001272c <fabs>:
1001272c:	0049      	lsls	r1, r1, #1
1001272e:	084b      	lsrs	r3, r1, #1
10012730:	0019      	movs	r1, r3
10012732:	4770      	bx	lr

10012734 <finite>:
10012734:	4b03      	ldr	r3, [pc, #12]	; (10012744 <finite+0x10>)
10012736:	0048      	lsls	r0, r1, #1
10012738:	469c      	mov	ip, r3
1001273a:	0840      	lsrs	r0, r0, #1
1001273c:	4460      	add	r0, ip
1001273e:	0fc0      	lsrs	r0, r0, #31
10012740:	4770      	bx	lr
10012742:	46c0      	nop			; (mov r8, r8)
10012744:	80100000 	.word	0x80100000

10012748 <matherr>:
10012748:	2000      	movs	r0, #0
1001274a:	4770      	bx	lr

1001274c <nan>:
1001274c:	2000      	movs	r0, #0
1001274e:	4901      	ldr	r1, [pc, #4]	; (10012754 <nan+0x8>)
10012750:	4770      	bx	lr
10012752:	46c0      	nop			; (mov r8, r8)
10012754:	7ff80000 	.word	0x7ff80000

10012758 <rint>:
10012758:	b5f0      	push	{r4, r5, r6, r7, lr}
1001275a:	4647      	mov	r7, r8
1001275c:	b480      	push	{r7}
1001275e:	0fcb      	lsrs	r3, r1, #31
10012760:	4698      	mov	r8, r3
10012762:	4c4a      	ldr	r4, [pc, #296]	; (1001288c <rint+0x134>)
10012764:	004b      	lsls	r3, r1, #1
10012766:	0d5b      	lsrs	r3, r3, #21
10012768:	191e      	adds	r6, r3, r4
1001276a:	b082      	sub	sp, #8
1001276c:	0007      	movs	r7, r0
1001276e:	000a      	movs	r2, r1
10012770:	2e13      	cmp	r6, #19
10012772:	dc35      	bgt.n	100127e0 <rint+0x88>
10012774:	2e00      	cmp	r6, #0
10012776:	db57      	blt.n	10012828 <rint+0xd0>
10012778:	4b45      	ldr	r3, [pc, #276]	; (10012890 <rint+0x138>)
1001277a:	0004      	movs	r4, r0
1001277c:	4133      	asrs	r3, r6
1001277e:	001f      	movs	r7, r3
10012780:	400f      	ands	r7, r1
10012782:	4307      	orrs	r7, r0
10012784:	000d      	movs	r5, r1
10012786:	2f00      	cmp	r7, #0
10012788:	d024      	beq.n	100127d4 <rint+0x7c>
1001278a:	085b      	lsrs	r3, r3, #1
1001278c:	001c      	movs	r4, r3
1001278e:	400c      	ands	r4, r1
10012790:	4320      	orrs	r0, r4
10012792:	2700      	movs	r7, #0
10012794:	2800      	cmp	r0, #0
10012796:	d007      	beq.n	100127a8 <rint+0x50>
10012798:	2e13      	cmp	r6, #19
1001279a:	d100      	bne.n	1001279e <rint+0x46>
1001279c:	e072      	b.n	10012884 <rint+0x12c>
1001279e:	2280      	movs	r2, #128	; 0x80
100127a0:	02d2      	lsls	r2, r2, #11
100127a2:	4132      	asrs	r2, r6
100127a4:	4399      	bics	r1, r3
100127a6:	430a      	orrs	r2, r1
100127a8:	4643      	mov	r3, r8
100127aa:	00de      	lsls	r6, r3, #3
100127ac:	4b39      	ldr	r3, [pc, #228]	; (10012894 <rint+0x13c>)
100127ae:	0011      	movs	r1, r2
100127b0:	199e      	adds	r6, r3, r6
100127b2:	6834      	ldr	r4, [r6, #0]
100127b4:	6875      	ldr	r5, [r6, #4]
100127b6:	0038      	movs	r0, r7
100127b8:	0022      	movs	r2, r4
100127ba:	002b      	movs	r3, r5
100127bc:	f001 f84e 	bl	1001385c <__aeabi_dadd>
100127c0:	9000      	str	r0, [sp, #0]
100127c2:	9101      	str	r1, [sp, #4]
100127c4:	9800      	ldr	r0, [sp, #0]
100127c6:	9901      	ldr	r1, [sp, #4]
100127c8:	0022      	movs	r2, r4
100127ca:	002b      	movs	r3, r5
100127cc:	f002 fa10 	bl	10014bf0 <__aeabi_dsub>
100127d0:	0004      	movs	r4, r0
100127d2:	000d      	movs	r5, r1
100127d4:	0020      	movs	r0, r4
100127d6:	0029      	movs	r1, r5
100127d8:	b002      	add	sp, #8
100127da:	bc04      	pop	{r2}
100127dc:	4690      	mov	r8, r2
100127de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100127e0:	2e33      	cmp	r6, #51	; 0x33
100127e2:	dd0c      	ble.n	100127fe <rint+0xa6>
100127e4:	2380      	movs	r3, #128	; 0x80
100127e6:	0004      	movs	r4, r0
100127e8:	000d      	movs	r5, r1
100127ea:	00db      	lsls	r3, r3, #3
100127ec:	429e      	cmp	r6, r3
100127ee:	d1f1      	bne.n	100127d4 <rint+0x7c>
100127f0:	0002      	movs	r2, r0
100127f2:	000b      	movs	r3, r1
100127f4:	f001 f832 	bl	1001385c <__aeabi_dadd>
100127f8:	0004      	movs	r4, r0
100127fa:	000d      	movs	r5, r1
100127fc:	e7ea      	b.n	100127d4 <rint+0x7c>
100127fe:	4c26      	ldr	r4, [pc, #152]	; (10012898 <rint+0x140>)
10012800:	000d      	movs	r5, r1
10012802:	46a4      	mov	ip, r4
10012804:	2401      	movs	r4, #1
10012806:	4463      	add	r3, ip
10012808:	4264      	negs	r4, r4
1001280a:	40dc      	lsrs	r4, r3
1001280c:	46a4      	mov	ip, r4
1001280e:	4661      	mov	r1, ip
10012810:	0004      	movs	r4, r0
10012812:	4201      	tst	r1, r0
10012814:	d0de      	beq.n	100127d4 <rint+0x7c>
10012816:	0849      	lsrs	r1, r1, #1
10012818:	4201      	tst	r1, r0
1001281a:	d0c5      	beq.n	100127a8 <rint+0x50>
1001281c:	2780      	movs	r7, #128	; 0x80
1001281e:	05ff      	lsls	r7, r7, #23
10012820:	411f      	asrs	r7, r3
10012822:	4388      	bics	r0, r1
10012824:	4307      	orrs	r7, r0
10012826:	e7bf      	b.n	100127a8 <rint+0x50>
10012828:	004b      	lsls	r3, r1, #1
1001282a:	085b      	lsrs	r3, r3, #1
1001282c:	4303      	orrs	r3, r0
1001282e:	0004      	movs	r4, r0
10012830:	000d      	movs	r5, r1
10012832:	2b00      	cmp	r3, #0
10012834:	d0ce      	beq.n	100127d4 <rint+0x7c>
10012836:	030b      	lsls	r3, r1, #12
10012838:	0b1b      	lsrs	r3, r3, #12
1001283a:	4303      	orrs	r3, r0
1001283c:	425a      	negs	r2, r3
1001283e:	4313      	orrs	r3, r2
10012840:	2280      	movs	r2, #128	; 0x80
10012842:	0b1b      	lsrs	r3, r3, #12
10012844:	0312      	lsls	r2, r2, #12
10012846:	4013      	ands	r3, r2
10012848:	0c4a      	lsrs	r2, r1, #17
1001284a:	0452      	lsls	r2, r2, #17
1001284c:	4313      	orrs	r3, r2
1001284e:	0019      	movs	r1, r3
10012850:	4643      	mov	r3, r8
10012852:	4a10      	ldr	r2, [pc, #64]	; (10012894 <rint+0x13c>)
10012854:	00db      	lsls	r3, r3, #3
10012856:	18d3      	adds	r3, r2, r3
10012858:	681c      	ldr	r4, [r3, #0]
1001285a:	685d      	ldr	r5, [r3, #4]
1001285c:	0022      	movs	r2, r4
1001285e:	002b      	movs	r3, r5
10012860:	f000 fffc 	bl	1001385c <__aeabi_dadd>
10012864:	9000      	str	r0, [sp, #0]
10012866:	9101      	str	r1, [sp, #4]
10012868:	9800      	ldr	r0, [sp, #0]
1001286a:	9901      	ldr	r1, [sp, #4]
1001286c:	0022      	movs	r2, r4
1001286e:	002b      	movs	r3, r5
10012870:	f002 f9be 	bl	10014bf0 <__aeabi_dsub>
10012874:	4642      	mov	r2, r8
10012876:	004b      	lsls	r3, r1, #1
10012878:	085b      	lsrs	r3, r3, #1
1001287a:	07d6      	lsls	r6, r2, #31
1001287c:	4333      	orrs	r3, r6
1001287e:	0004      	movs	r4, r0
10012880:	001d      	movs	r5, r3
10012882:	e7a7      	b.n	100127d4 <rint+0x7c>
10012884:	2780      	movs	r7, #128	; 0x80
10012886:	063f      	lsls	r7, r7, #24
10012888:	e789      	b.n	1001279e <rint+0x46>
1001288a:	46c0      	nop			; (mov r8, r8)
1001288c:	fffffc01 	.word	0xfffffc01
10012890:	000fffff 	.word	0x000fffff
10012894:	10018128 	.word	0x10018128
10012898:	fffffbed 	.word	0xfffffbed

1001289c <scalbn>:
1001289c:	004b      	lsls	r3, r1, #1
1001289e:	b570      	push	{r4, r5, r6, lr}
100128a0:	0d5b      	lsrs	r3, r3, #21
100128a2:	0014      	movs	r4, r2
100128a4:	000a      	movs	r2, r1
100128a6:	2b00      	cmp	r3, #0
100128a8:	d11a      	bne.n	100128e0 <scalbn+0x44>
100128aa:	004b      	lsls	r3, r1, #1
100128ac:	085b      	lsrs	r3, r3, #1
100128ae:	4303      	orrs	r3, r0
100128b0:	d015      	beq.n	100128de <scalbn+0x42>
100128b2:	2200      	movs	r2, #0
100128b4:	4b22      	ldr	r3, [pc, #136]	; (10012940 <scalbn+0xa4>)
100128b6:	f001 ff21 	bl	100146fc <__aeabi_dmul>
100128ba:	4b22      	ldr	r3, [pc, #136]	; (10012944 <scalbn+0xa8>)
100128bc:	000a      	movs	r2, r1
100128be:	429c      	cmp	r4, r3
100128c0:	db22      	blt.n	10012908 <scalbn+0x6c>
100128c2:	004b      	lsls	r3, r1, #1
100128c4:	0d5b      	lsrs	r3, r3, #21
100128c6:	3b36      	subs	r3, #54	; 0x36
100128c8:	4d1f      	ldr	r5, [pc, #124]	; (10012948 <scalbn+0xac>)
100128ca:	18e3      	adds	r3, r4, r3
100128cc:	42ab      	cmp	r3, r5
100128ce:	dc20      	bgt.n	10012912 <scalbn+0x76>
100128d0:	2b00      	cmp	r3, #0
100128d2:	dd0d      	ble.n	100128f0 <scalbn+0x54>
100128d4:	4c1d      	ldr	r4, [pc, #116]	; (1001294c <scalbn+0xb0>)
100128d6:	051b      	lsls	r3, r3, #20
100128d8:	4022      	ands	r2, r4
100128da:	431a      	orrs	r2, r3
100128dc:	0011      	movs	r1, r2
100128de:	bd70      	pop	{r4, r5, r6, pc}
100128e0:	4d1b      	ldr	r5, [pc, #108]	; (10012950 <scalbn+0xb4>)
100128e2:	42ab      	cmp	r3, r5
100128e4:	d1f0      	bne.n	100128c8 <scalbn+0x2c>
100128e6:	0002      	movs	r2, r0
100128e8:	000b      	movs	r3, r1
100128ea:	f000 ffb7 	bl	1001385c <__aeabi_dadd>
100128ee:	e7f6      	b.n	100128de <scalbn+0x42>
100128f0:	001d      	movs	r5, r3
100128f2:	3535      	adds	r5, #53	; 0x35
100128f4:	da18      	bge.n	10012928 <scalbn+0x8c>
100128f6:	4b17      	ldr	r3, [pc, #92]	; (10012954 <scalbn+0xb8>)
100128f8:	0002      	movs	r2, r0
100128fa:	429c      	cmp	r4, r3
100128fc:	dc0a      	bgt.n	10012914 <scalbn+0x78>
100128fe:	000b      	movs	r3, r1
10012900:	4815      	ldr	r0, [pc, #84]	; (10012958 <scalbn+0xbc>)
10012902:	4916      	ldr	r1, [pc, #88]	; (1001295c <scalbn+0xc0>)
10012904:	f000 f832 	bl	1001296c <copysign>
10012908:	4a13      	ldr	r2, [pc, #76]	; (10012958 <scalbn+0xbc>)
1001290a:	4b14      	ldr	r3, [pc, #80]	; (1001295c <scalbn+0xc0>)
1001290c:	f001 fef6 	bl	100146fc <__aeabi_dmul>
10012910:	e7e5      	b.n	100128de <scalbn+0x42>
10012912:	0002      	movs	r2, r0
10012914:	000b      	movs	r3, r1
10012916:	4812      	ldr	r0, [pc, #72]	; (10012960 <scalbn+0xc4>)
10012918:	4912      	ldr	r1, [pc, #72]	; (10012964 <scalbn+0xc8>)
1001291a:	f000 f827 	bl	1001296c <copysign>
1001291e:	4a10      	ldr	r2, [pc, #64]	; (10012960 <scalbn+0xc4>)
10012920:	4b10      	ldr	r3, [pc, #64]	; (10012964 <scalbn+0xc8>)
10012922:	f001 feeb 	bl	100146fc <__aeabi_dmul>
10012926:	e7da      	b.n	100128de <scalbn+0x42>
10012928:	4c08      	ldr	r4, [pc, #32]	; (1001294c <scalbn+0xb0>)
1001292a:	3336      	adds	r3, #54	; 0x36
1001292c:	4022      	ands	r2, r4
1001292e:	051b      	lsls	r3, r3, #20
10012930:	4313      	orrs	r3, r2
10012932:	0019      	movs	r1, r3
10012934:	2200      	movs	r2, #0
10012936:	4b0c      	ldr	r3, [pc, #48]	; (10012968 <scalbn+0xcc>)
10012938:	f001 fee0 	bl	100146fc <__aeabi_dmul>
1001293c:	e7cf      	b.n	100128de <scalbn+0x42>
1001293e:	46c0      	nop			; (mov r8, r8)
10012940:	43500000 	.word	0x43500000
10012944:	ffff3cb0 	.word	0xffff3cb0
10012948:	000007fe 	.word	0x000007fe
1001294c:	800fffff 	.word	0x800fffff
10012950:	000007ff 	.word	0x000007ff
10012954:	0000c350 	.word	0x0000c350
10012958:	c2f8f359 	.word	0xc2f8f359
1001295c:	01a56e1f 	.word	0x01a56e1f
10012960:	8800759c 	.word	0x8800759c
10012964:	7e37e43c 	.word	0x7e37e43c
10012968:	3c900000 	.word	0x3c900000

1001296c <copysign>:
1001296c:	b530      	push	{r4, r5, lr}
1001296e:	004a      	lsls	r2, r1, #1
10012970:	0fdb      	lsrs	r3, r3, #31
10012972:	07db      	lsls	r3, r3, #31
10012974:	0852      	lsrs	r2, r2, #1
10012976:	431a      	orrs	r2, r3
10012978:	0011      	movs	r1, r2
1001297a:	bd30      	pop	{r4, r5, pc}

1001297c <__gnu_thumb1_case_sqi>:
1001297c:	b402      	push	{r1}
1001297e:	4671      	mov	r1, lr
10012980:	0849      	lsrs	r1, r1, #1
10012982:	0049      	lsls	r1, r1, #1
10012984:	5609      	ldrsb	r1, [r1, r0]
10012986:	0049      	lsls	r1, r1, #1
10012988:	448e      	add	lr, r1
1001298a:	bc02      	pop	{r1}
1001298c:	4770      	bx	lr
1001298e:	46c0      	nop			; (mov r8, r8)

10012990 <__gnu_thumb1_case_uqi>:
10012990:	b402      	push	{r1}
10012992:	4671      	mov	r1, lr
10012994:	0849      	lsrs	r1, r1, #1
10012996:	0049      	lsls	r1, r1, #1
10012998:	5c09      	ldrb	r1, [r1, r0]
1001299a:	0049      	lsls	r1, r1, #1
1001299c:	448e      	add	lr, r1
1001299e:	bc02      	pop	{r1}
100129a0:	4770      	bx	lr
100129a2:	46c0      	nop			; (mov r8, r8)

100129a4 <__aeabi_uidiv>:
100129a4:	2200      	movs	r2, #0
100129a6:	0843      	lsrs	r3, r0, #1
100129a8:	428b      	cmp	r3, r1
100129aa:	d374      	bcc.n	10012a96 <__aeabi_uidiv+0xf2>
100129ac:	0903      	lsrs	r3, r0, #4
100129ae:	428b      	cmp	r3, r1
100129b0:	d35f      	bcc.n	10012a72 <__aeabi_uidiv+0xce>
100129b2:	0a03      	lsrs	r3, r0, #8
100129b4:	428b      	cmp	r3, r1
100129b6:	d344      	bcc.n	10012a42 <__aeabi_uidiv+0x9e>
100129b8:	0b03      	lsrs	r3, r0, #12
100129ba:	428b      	cmp	r3, r1
100129bc:	d328      	bcc.n	10012a10 <__aeabi_uidiv+0x6c>
100129be:	0c03      	lsrs	r3, r0, #16
100129c0:	428b      	cmp	r3, r1
100129c2:	d30d      	bcc.n	100129e0 <__aeabi_uidiv+0x3c>
100129c4:	22ff      	movs	r2, #255	; 0xff
100129c6:	0209      	lsls	r1, r1, #8
100129c8:	ba12      	rev	r2, r2
100129ca:	0c03      	lsrs	r3, r0, #16
100129cc:	428b      	cmp	r3, r1
100129ce:	d302      	bcc.n	100129d6 <__aeabi_uidiv+0x32>
100129d0:	1212      	asrs	r2, r2, #8
100129d2:	0209      	lsls	r1, r1, #8
100129d4:	d065      	beq.n	10012aa2 <__aeabi_uidiv+0xfe>
100129d6:	0b03      	lsrs	r3, r0, #12
100129d8:	428b      	cmp	r3, r1
100129da:	d319      	bcc.n	10012a10 <__aeabi_uidiv+0x6c>
100129dc:	e000      	b.n	100129e0 <__aeabi_uidiv+0x3c>
100129de:	0a09      	lsrs	r1, r1, #8
100129e0:	0bc3      	lsrs	r3, r0, #15
100129e2:	428b      	cmp	r3, r1
100129e4:	d301      	bcc.n	100129ea <__aeabi_uidiv+0x46>
100129e6:	03cb      	lsls	r3, r1, #15
100129e8:	1ac0      	subs	r0, r0, r3
100129ea:	4152      	adcs	r2, r2
100129ec:	0b83      	lsrs	r3, r0, #14
100129ee:	428b      	cmp	r3, r1
100129f0:	d301      	bcc.n	100129f6 <__aeabi_uidiv+0x52>
100129f2:	038b      	lsls	r3, r1, #14
100129f4:	1ac0      	subs	r0, r0, r3
100129f6:	4152      	adcs	r2, r2
100129f8:	0b43      	lsrs	r3, r0, #13
100129fa:	428b      	cmp	r3, r1
100129fc:	d301      	bcc.n	10012a02 <__aeabi_uidiv+0x5e>
100129fe:	034b      	lsls	r3, r1, #13
10012a00:	1ac0      	subs	r0, r0, r3
10012a02:	4152      	adcs	r2, r2
10012a04:	0b03      	lsrs	r3, r0, #12
10012a06:	428b      	cmp	r3, r1
10012a08:	d301      	bcc.n	10012a0e <__aeabi_uidiv+0x6a>
10012a0a:	030b      	lsls	r3, r1, #12
10012a0c:	1ac0      	subs	r0, r0, r3
10012a0e:	4152      	adcs	r2, r2
10012a10:	0ac3      	lsrs	r3, r0, #11
10012a12:	428b      	cmp	r3, r1
10012a14:	d301      	bcc.n	10012a1a <__aeabi_uidiv+0x76>
10012a16:	02cb      	lsls	r3, r1, #11
10012a18:	1ac0      	subs	r0, r0, r3
10012a1a:	4152      	adcs	r2, r2
10012a1c:	0a83      	lsrs	r3, r0, #10
10012a1e:	428b      	cmp	r3, r1
10012a20:	d301      	bcc.n	10012a26 <__aeabi_uidiv+0x82>
10012a22:	028b      	lsls	r3, r1, #10
10012a24:	1ac0      	subs	r0, r0, r3
10012a26:	4152      	adcs	r2, r2
10012a28:	0a43      	lsrs	r3, r0, #9
10012a2a:	428b      	cmp	r3, r1
10012a2c:	d301      	bcc.n	10012a32 <__aeabi_uidiv+0x8e>
10012a2e:	024b      	lsls	r3, r1, #9
10012a30:	1ac0      	subs	r0, r0, r3
10012a32:	4152      	adcs	r2, r2
10012a34:	0a03      	lsrs	r3, r0, #8
10012a36:	428b      	cmp	r3, r1
10012a38:	d301      	bcc.n	10012a3e <__aeabi_uidiv+0x9a>
10012a3a:	020b      	lsls	r3, r1, #8
10012a3c:	1ac0      	subs	r0, r0, r3
10012a3e:	4152      	adcs	r2, r2
10012a40:	d2cd      	bcs.n	100129de <__aeabi_uidiv+0x3a>
10012a42:	09c3      	lsrs	r3, r0, #7
10012a44:	428b      	cmp	r3, r1
10012a46:	d301      	bcc.n	10012a4c <__aeabi_uidiv+0xa8>
10012a48:	01cb      	lsls	r3, r1, #7
10012a4a:	1ac0      	subs	r0, r0, r3
10012a4c:	4152      	adcs	r2, r2
10012a4e:	0983      	lsrs	r3, r0, #6
10012a50:	428b      	cmp	r3, r1
10012a52:	d301      	bcc.n	10012a58 <__aeabi_uidiv+0xb4>
10012a54:	018b      	lsls	r3, r1, #6
10012a56:	1ac0      	subs	r0, r0, r3
10012a58:	4152      	adcs	r2, r2
10012a5a:	0943      	lsrs	r3, r0, #5
10012a5c:	428b      	cmp	r3, r1
10012a5e:	d301      	bcc.n	10012a64 <__aeabi_uidiv+0xc0>
10012a60:	014b      	lsls	r3, r1, #5
10012a62:	1ac0      	subs	r0, r0, r3
10012a64:	4152      	adcs	r2, r2
10012a66:	0903      	lsrs	r3, r0, #4
10012a68:	428b      	cmp	r3, r1
10012a6a:	d301      	bcc.n	10012a70 <__aeabi_uidiv+0xcc>
10012a6c:	010b      	lsls	r3, r1, #4
10012a6e:	1ac0      	subs	r0, r0, r3
10012a70:	4152      	adcs	r2, r2
10012a72:	08c3      	lsrs	r3, r0, #3
10012a74:	428b      	cmp	r3, r1
10012a76:	d301      	bcc.n	10012a7c <__aeabi_uidiv+0xd8>
10012a78:	00cb      	lsls	r3, r1, #3
10012a7a:	1ac0      	subs	r0, r0, r3
10012a7c:	4152      	adcs	r2, r2
10012a7e:	0883      	lsrs	r3, r0, #2
10012a80:	428b      	cmp	r3, r1
10012a82:	d301      	bcc.n	10012a88 <__aeabi_uidiv+0xe4>
10012a84:	008b      	lsls	r3, r1, #2
10012a86:	1ac0      	subs	r0, r0, r3
10012a88:	4152      	adcs	r2, r2
10012a8a:	0843      	lsrs	r3, r0, #1
10012a8c:	428b      	cmp	r3, r1
10012a8e:	d301      	bcc.n	10012a94 <__aeabi_uidiv+0xf0>
10012a90:	004b      	lsls	r3, r1, #1
10012a92:	1ac0      	subs	r0, r0, r3
10012a94:	4152      	adcs	r2, r2
10012a96:	1a41      	subs	r1, r0, r1
10012a98:	d200      	bcs.n	10012a9c <__aeabi_uidiv+0xf8>
10012a9a:	4601      	mov	r1, r0
10012a9c:	4152      	adcs	r2, r2
10012a9e:	4610      	mov	r0, r2
10012aa0:	4770      	bx	lr
10012aa2:	e7ff      	b.n	10012aa4 <__aeabi_uidiv+0x100>
10012aa4:	b501      	push	{r0, lr}
10012aa6:	2000      	movs	r0, #0
10012aa8:	f000 f8f0 	bl	10012c8c <__aeabi_idiv0>
10012aac:	bd02      	pop	{r1, pc}
10012aae:	46c0      	nop			; (mov r8, r8)

10012ab0 <__aeabi_uidivmod>:
10012ab0:	2900      	cmp	r1, #0
10012ab2:	d0f7      	beq.n	10012aa4 <__aeabi_uidiv+0x100>
10012ab4:	e776      	b.n	100129a4 <__aeabi_uidiv>
10012ab6:	4770      	bx	lr

10012ab8 <__aeabi_idiv>:
10012ab8:	4603      	mov	r3, r0
10012aba:	430b      	orrs	r3, r1
10012abc:	d47f      	bmi.n	10012bbe <__aeabi_idiv+0x106>
10012abe:	2200      	movs	r2, #0
10012ac0:	0843      	lsrs	r3, r0, #1
10012ac2:	428b      	cmp	r3, r1
10012ac4:	d374      	bcc.n	10012bb0 <__aeabi_idiv+0xf8>
10012ac6:	0903      	lsrs	r3, r0, #4
10012ac8:	428b      	cmp	r3, r1
10012aca:	d35f      	bcc.n	10012b8c <__aeabi_idiv+0xd4>
10012acc:	0a03      	lsrs	r3, r0, #8
10012ace:	428b      	cmp	r3, r1
10012ad0:	d344      	bcc.n	10012b5c <__aeabi_idiv+0xa4>
10012ad2:	0b03      	lsrs	r3, r0, #12
10012ad4:	428b      	cmp	r3, r1
10012ad6:	d328      	bcc.n	10012b2a <__aeabi_idiv+0x72>
10012ad8:	0c03      	lsrs	r3, r0, #16
10012ada:	428b      	cmp	r3, r1
10012adc:	d30d      	bcc.n	10012afa <__aeabi_idiv+0x42>
10012ade:	22ff      	movs	r2, #255	; 0xff
10012ae0:	0209      	lsls	r1, r1, #8
10012ae2:	ba12      	rev	r2, r2
10012ae4:	0c03      	lsrs	r3, r0, #16
10012ae6:	428b      	cmp	r3, r1
10012ae8:	d302      	bcc.n	10012af0 <__aeabi_idiv+0x38>
10012aea:	1212      	asrs	r2, r2, #8
10012aec:	0209      	lsls	r1, r1, #8
10012aee:	d065      	beq.n	10012bbc <__aeabi_idiv+0x104>
10012af0:	0b03      	lsrs	r3, r0, #12
10012af2:	428b      	cmp	r3, r1
10012af4:	d319      	bcc.n	10012b2a <__aeabi_idiv+0x72>
10012af6:	e000      	b.n	10012afa <__aeabi_idiv+0x42>
10012af8:	0a09      	lsrs	r1, r1, #8
10012afa:	0bc3      	lsrs	r3, r0, #15
10012afc:	428b      	cmp	r3, r1
10012afe:	d301      	bcc.n	10012b04 <__aeabi_idiv+0x4c>
10012b00:	03cb      	lsls	r3, r1, #15
10012b02:	1ac0      	subs	r0, r0, r3
10012b04:	4152      	adcs	r2, r2
10012b06:	0b83      	lsrs	r3, r0, #14
10012b08:	428b      	cmp	r3, r1
10012b0a:	d301      	bcc.n	10012b10 <__aeabi_idiv+0x58>
10012b0c:	038b      	lsls	r3, r1, #14
10012b0e:	1ac0      	subs	r0, r0, r3
10012b10:	4152      	adcs	r2, r2
10012b12:	0b43      	lsrs	r3, r0, #13
10012b14:	428b      	cmp	r3, r1
10012b16:	d301      	bcc.n	10012b1c <__aeabi_idiv+0x64>
10012b18:	034b      	lsls	r3, r1, #13
10012b1a:	1ac0      	subs	r0, r0, r3
10012b1c:	4152      	adcs	r2, r2
10012b1e:	0b03      	lsrs	r3, r0, #12
10012b20:	428b      	cmp	r3, r1
10012b22:	d301      	bcc.n	10012b28 <__aeabi_idiv+0x70>
10012b24:	030b      	lsls	r3, r1, #12
10012b26:	1ac0      	subs	r0, r0, r3
10012b28:	4152      	adcs	r2, r2
10012b2a:	0ac3      	lsrs	r3, r0, #11
10012b2c:	428b      	cmp	r3, r1
10012b2e:	d301      	bcc.n	10012b34 <__aeabi_idiv+0x7c>
10012b30:	02cb      	lsls	r3, r1, #11
10012b32:	1ac0      	subs	r0, r0, r3
10012b34:	4152      	adcs	r2, r2
10012b36:	0a83      	lsrs	r3, r0, #10
10012b38:	428b      	cmp	r3, r1
10012b3a:	d301      	bcc.n	10012b40 <__aeabi_idiv+0x88>
10012b3c:	028b      	lsls	r3, r1, #10
10012b3e:	1ac0      	subs	r0, r0, r3
10012b40:	4152      	adcs	r2, r2
10012b42:	0a43      	lsrs	r3, r0, #9
10012b44:	428b      	cmp	r3, r1
10012b46:	d301      	bcc.n	10012b4c <__aeabi_idiv+0x94>
10012b48:	024b      	lsls	r3, r1, #9
10012b4a:	1ac0      	subs	r0, r0, r3
10012b4c:	4152      	adcs	r2, r2
10012b4e:	0a03      	lsrs	r3, r0, #8
10012b50:	428b      	cmp	r3, r1
10012b52:	d301      	bcc.n	10012b58 <__aeabi_idiv+0xa0>
10012b54:	020b      	lsls	r3, r1, #8
10012b56:	1ac0      	subs	r0, r0, r3
10012b58:	4152      	adcs	r2, r2
10012b5a:	d2cd      	bcs.n	10012af8 <__aeabi_idiv+0x40>
10012b5c:	09c3      	lsrs	r3, r0, #7
10012b5e:	428b      	cmp	r3, r1
10012b60:	d301      	bcc.n	10012b66 <__aeabi_idiv+0xae>
10012b62:	01cb      	lsls	r3, r1, #7
10012b64:	1ac0      	subs	r0, r0, r3
10012b66:	4152      	adcs	r2, r2
10012b68:	0983      	lsrs	r3, r0, #6
10012b6a:	428b      	cmp	r3, r1
10012b6c:	d301      	bcc.n	10012b72 <__aeabi_idiv+0xba>
10012b6e:	018b      	lsls	r3, r1, #6
10012b70:	1ac0      	subs	r0, r0, r3
10012b72:	4152      	adcs	r2, r2
10012b74:	0943      	lsrs	r3, r0, #5
10012b76:	428b      	cmp	r3, r1
10012b78:	d301      	bcc.n	10012b7e <__aeabi_idiv+0xc6>
10012b7a:	014b      	lsls	r3, r1, #5
10012b7c:	1ac0      	subs	r0, r0, r3
10012b7e:	4152      	adcs	r2, r2
10012b80:	0903      	lsrs	r3, r0, #4
10012b82:	428b      	cmp	r3, r1
10012b84:	d301      	bcc.n	10012b8a <__aeabi_idiv+0xd2>
10012b86:	010b      	lsls	r3, r1, #4
10012b88:	1ac0      	subs	r0, r0, r3
10012b8a:	4152      	adcs	r2, r2
10012b8c:	08c3      	lsrs	r3, r0, #3
10012b8e:	428b      	cmp	r3, r1
10012b90:	d301      	bcc.n	10012b96 <__aeabi_idiv+0xde>
10012b92:	00cb      	lsls	r3, r1, #3
10012b94:	1ac0      	subs	r0, r0, r3
10012b96:	4152      	adcs	r2, r2
10012b98:	0883      	lsrs	r3, r0, #2
10012b9a:	428b      	cmp	r3, r1
10012b9c:	d301      	bcc.n	10012ba2 <__aeabi_idiv+0xea>
10012b9e:	008b      	lsls	r3, r1, #2
10012ba0:	1ac0      	subs	r0, r0, r3
10012ba2:	4152      	adcs	r2, r2
10012ba4:	0843      	lsrs	r3, r0, #1
10012ba6:	428b      	cmp	r3, r1
10012ba8:	d301      	bcc.n	10012bae <__aeabi_idiv+0xf6>
10012baa:	004b      	lsls	r3, r1, #1
10012bac:	1ac0      	subs	r0, r0, r3
10012bae:	4152      	adcs	r2, r2
10012bb0:	1a41      	subs	r1, r0, r1
10012bb2:	d200      	bcs.n	10012bb6 <__aeabi_idiv+0xfe>
10012bb4:	4601      	mov	r1, r0
10012bb6:	4152      	adcs	r2, r2
10012bb8:	4610      	mov	r0, r2
10012bba:	4770      	bx	lr
10012bbc:	e05d      	b.n	10012c7a <__aeabi_idiv+0x1c2>
10012bbe:	0fca      	lsrs	r2, r1, #31
10012bc0:	d000      	beq.n	10012bc4 <__aeabi_idiv+0x10c>
10012bc2:	4249      	negs	r1, r1
10012bc4:	1003      	asrs	r3, r0, #32
10012bc6:	d300      	bcc.n	10012bca <__aeabi_idiv+0x112>
10012bc8:	4240      	negs	r0, r0
10012bca:	4053      	eors	r3, r2
10012bcc:	2200      	movs	r2, #0
10012bce:	469c      	mov	ip, r3
10012bd0:	0903      	lsrs	r3, r0, #4
10012bd2:	428b      	cmp	r3, r1
10012bd4:	d32d      	bcc.n	10012c32 <__aeabi_idiv+0x17a>
10012bd6:	0a03      	lsrs	r3, r0, #8
10012bd8:	428b      	cmp	r3, r1
10012bda:	d312      	bcc.n	10012c02 <__aeabi_idiv+0x14a>
10012bdc:	22fc      	movs	r2, #252	; 0xfc
10012bde:	0189      	lsls	r1, r1, #6
10012be0:	ba12      	rev	r2, r2
10012be2:	0a03      	lsrs	r3, r0, #8
10012be4:	428b      	cmp	r3, r1
10012be6:	d30c      	bcc.n	10012c02 <__aeabi_idiv+0x14a>
10012be8:	0189      	lsls	r1, r1, #6
10012bea:	1192      	asrs	r2, r2, #6
10012bec:	428b      	cmp	r3, r1
10012bee:	d308      	bcc.n	10012c02 <__aeabi_idiv+0x14a>
10012bf0:	0189      	lsls	r1, r1, #6
10012bf2:	1192      	asrs	r2, r2, #6
10012bf4:	428b      	cmp	r3, r1
10012bf6:	d304      	bcc.n	10012c02 <__aeabi_idiv+0x14a>
10012bf8:	0189      	lsls	r1, r1, #6
10012bfa:	d03a      	beq.n	10012c72 <__aeabi_idiv+0x1ba>
10012bfc:	1192      	asrs	r2, r2, #6
10012bfe:	e000      	b.n	10012c02 <__aeabi_idiv+0x14a>
10012c00:	0989      	lsrs	r1, r1, #6
10012c02:	09c3      	lsrs	r3, r0, #7
10012c04:	428b      	cmp	r3, r1
10012c06:	d301      	bcc.n	10012c0c <__aeabi_idiv+0x154>
10012c08:	01cb      	lsls	r3, r1, #7
10012c0a:	1ac0      	subs	r0, r0, r3
10012c0c:	4152      	adcs	r2, r2
10012c0e:	0983      	lsrs	r3, r0, #6
10012c10:	428b      	cmp	r3, r1
10012c12:	d301      	bcc.n	10012c18 <__aeabi_idiv+0x160>
10012c14:	018b      	lsls	r3, r1, #6
10012c16:	1ac0      	subs	r0, r0, r3
10012c18:	4152      	adcs	r2, r2
10012c1a:	0943      	lsrs	r3, r0, #5
10012c1c:	428b      	cmp	r3, r1
10012c1e:	d301      	bcc.n	10012c24 <__aeabi_idiv+0x16c>
10012c20:	014b      	lsls	r3, r1, #5
10012c22:	1ac0      	subs	r0, r0, r3
10012c24:	4152      	adcs	r2, r2
10012c26:	0903      	lsrs	r3, r0, #4
10012c28:	428b      	cmp	r3, r1
10012c2a:	d301      	bcc.n	10012c30 <__aeabi_idiv+0x178>
10012c2c:	010b      	lsls	r3, r1, #4
10012c2e:	1ac0      	subs	r0, r0, r3
10012c30:	4152      	adcs	r2, r2
10012c32:	08c3      	lsrs	r3, r0, #3
10012c34:	428b      	cmp	r3, r1
10012c36:	d301      	bcc.n	10012c3c <__aeabi_idiv+0x184>
10012c38:	00cb      	lsls	r3, r1, #3
10012c3a:	1ac0      	subs	r0, r0, r3
10012c3c:	4152      	adcs	r2, r2
10012c3e:	0883      	lsrs	r3, r0, #2
10012c40:	428b      	cmp	r3, r1
10012c42:	d301      	bcc.n	10012c48 <__aeabi_idiv+0x190>
10012c44:	008b      	lsls	r3, r1, #2
10012c46:	1ac0      	subs	r0, r0, r3
10012c48:	4152      	adcs	r2, r2
10012c4a:	d2d9      	bcs.n	10012c00 <__aeabi_idiv+0x148>
10012c4c:	0843      	lsrs	r3, r0, #1
10012c4e:	428b      	cmp	r3, r1
10012c50:	d301      	bcc.n	10012c56 <__aeabi_idiv+0x19e>
10012c52:	004b      	lsls	r3, r1, #1
10012c54:	1ac0      	subs	r0, r0, r3
10012c56:	4152      	adcs	r2, r2
10012c58:	1a41      	subs	r1, r0, r1
10012c5a:	d200      	bcs.n	10012c5e <__aeabi_idiv+0x1a6>
10012c5c:	4601      	mov	r1, r0
10012c5e:	4663      	mov	r3, ip
10012c60:	4152      	adcs	r2, r2
10012c62:	105b      	asrs	r3, r3, #1
10012c64:	4610      	mov	r0, r2
10012c66:	d301      	bcc.n	10012c6c <__aeabi_idiv+0x1b4>
10012c68:	4240      	negs	r0, r0
10012c6a:	2b00      	cmp	r3, #0
10012c6c:	d500      	bpl.n	10012c70 <__aeabi_idiv+0x1b8>
10012c6e:	4249      	negs	r1, r1
10012c70:	4770      	bx	lr
10012c72:	4663      	mov	r3, ip
10012c74:	105b      	asrs	r3, r3, #1
10012c76:	d300      	bcc.n	10012c7a <__aeabi_idiv+0x1c2>
10012c78:	4240      	negs	r0, r0
10012c7a:	b501      	push	{r0, lr}
10012c7c:	2000      	movs	r0, #0
10012c7e:	f000 f805 	bl	10012c8c <__aeabi_idiv0>
10012c82:	bd02      	pop	{r1, pc}

10012c84 <__aeabi_idivmod>:
10012c84:	2900      	cmp	r1, #0
10012c86:	d0f8      	beq.n	10012c7a <__aeabi_idiv+0x1c2>
10012c88:	e716      	b.n	10012ab8 <__aeabi_idiv>
10012c8a:	4770      	bx	lr

10012c8c <__aeabi_idiv0>:
10012c8c:	4770      	bx	lr
10012c8e:	46c0      	nop			; (mov r8, r8)

10012c90 <__aeabi_cdrcmple>:
10012c90:	4684      	mov	ip, r0
10012c92:	1c10      	adds	r0, r2, #0
10012c94:	4662      	mov	r2, ip
10012c96:	468c      	mov	ip, r1
10012c98:	1c19      	adds	r1, r3, #0
10012c9a:	4663      	mov	r3, ip
10012c9c:	e000      	b.n	10012ca0 <__aeabi_cdcmpeq>
10012c9e:	46c0      	nop			; (mov r8, r8)

10012ca0 <__aeabi_cdcmpeq>:
10012ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012ca2:	f001 fcc1 	bl	10014628 <__ledf2>
10012ca6:	2800      	cmp	r0, #0
10012ca8:	d401      	bmi.n	10012cae <__aeabi_cdcmpeq+0xe>
10012caa:	2100      	movs	r1, #0
10012cac:	42c8      	cmn	r0, r1
10012cae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012cb0 <__aeabi_dcmpeq>:
10012cb0:	b510      	push	{r4, lr}
10012cb2:	f001 fc15 	bl	100144e0 <__eqdf2>
10012cb6:	4240      	negs	r0, r0
10012cb8:	3001      	adds	r0, #1
10012cba:	bd10      	pop	{r4, pc}

10012cbc <__aeabi_dcmplt>:
10012cbc:	b510      	push	{r4, lr}
10012cbe:	f001 fcb3 	bl	10014628 <__ledf2>
10012cc2:	2800      	cmp	r0, #0
10012cc4:	db01      	blt.n	10012cca <__aeabi_dcmplt+0xe>
10012cc6:	2000      	movs	r0, #0
10012cc8:	bd10      	pop	{r4, pc}
10012cca:	2001      	movs	r0, #1
10012ccc:	bd10      	pop	{r4, pc}
10012cce:	46c0      	nop			; (mov r8, r8)

10012cd0 <__aeabi_dcmple>:
10012cd0:	b510      	push	{r4, lr}
10012cd2:	f001 fca9 	bl	10014628 <__ledf2>
10012cd6:	2800      	cmp	r0, #0
10012cd8:	dd01      	ble.n	10012cde <__aeabi_dcmple+0xe>
10012cda:	2000      	movs	r0, #0
10012cdc:	bd10      	pop	{r4, pc}
10012cde:	2001      	movs	r0, #1
10012ce0:	bd10      	pop	{r4, pc}
10012ce2:	46c0      	nop			; (mov r8, r8)

10012ce4 <__aeabi_dcmpgt>:
10012ce4:	b510      	push	{r4, lr}
10012ce6:	f001 fc3b 	bl	10014560 <__gedf2>
10012cea:	2800      	cmp	r0, #0
10012cec:	dc01      	bgt.n	10012cf2 <__aeabi_dcmpgt+0xe>
10012cee:	2000      	movs	r0, #0
10012cf0:	bd10      	pop	{r4, pc}
10012cf2:	2001      	movs	r0, #1
10012cf4:	bd10      	pop	{r4, pc}
10012cf6:	46c0      	nop			; (mov r8, r8)

10012cf8 <__aeabi_dcmpge>:
10012cf8:	b510      	push	{r4, lr}
10012cfa:	f001 fc31 	bl	10014560 <__gedf2>
10012cfe:	2800      	cmp	r0, #0
10012d00:	da01      	bge.n	10012d06 <__aeabi_dcmpge+0xe>
10012d02:	2000      	movs	r0, #0
10012d04:	bd10      	pop	{r4, pc}
10012d06:	2001      	movs	r0, #1
10012d08:	bd10      	pop	{r4, pc}
10012d0a:	46c0      	nop			; (mov r8, r8)

10012d0c <__aeabi_cfrcmple>:
10012d0c:	4684      	mov	ip, r0
10012d0e:	1c08      	adds	r0, r1, #0
10012d10:	4661      	mov	r1, ip
10012d12:	e7ff      	b.n	10012d14 <__aeabi_cfcmpeq>

10012d14 <__aeabi_cfcmpeq>:
10012d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012d16:	f000 fa1b 	bl	10013150 <__lesf2>
10012d1a:	2800      	cmp	r0, #0
10012d1c:	d401      	bmi.n	10012d22 <__aeabi_cfcmpeq+0xe>
10012d1e:	2100      	movs	r1, #0
10012d20:	42c8      	cmn	r0, r1
10012d22:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012d24 <__aeabi_fcmpeq>:
10012d24:	b510      	push	{r4, lr}
10012d26:	f000 f9a7 	bl	10013078 <__eqsf2>
10012d2a:	4240      	negs	r0, r0
10012d2c:	3001      	adds	r0, #1
10012d2e:	bd10      	pop	{r4, pc}

10012d30 <__aeabi_fcmplt>:
10012d30:	b510      	push	{r4, lr}
10012d32:	f000 fa0d 	bl	10013150 <__lesf2>
10012d36:	2800      	cmp	r0, #0
10012d38:	db01      	blt.n	10012d3e <__aeabi_fcmplt+0xe>
10012d3a:	2000      	movs	r0, #0
10012d3c:	bd10      	pop	{r4, pc}
10012d3e:	2001      	movs	r0, #1
10012d40:	bd10      	pop	{r4, pc}
10012d42:	46c0      	nop			; (mov r8, r8)

10012d44 <__aeabi_fcmple>:
10012d44:	b510      	push	{r4, lr}
10012d46:	f000 fa03 	bl	10013150 <__lesf2>
10012d4a:	2800      	cmp	r0, #0
10012d4c:	dd01      	ble.n	10012d52 <__aeabi_fcmple+0xe>
10012d4e:	2000      	movs	r0, #0
10012d50:	bd10      	pop	{r4, pc}
10012d52:	2001      	movs	r0, #1
10012d54:	bd10      	pop	{r4, pc}
10012d56:	46c0      	nop			; (mov r8, r8)

10012d58 <__aeabi_fcmpgt>:
10012d58:	b510      	push	{r4, lr}
10012d5a:	f000 f9b5 	bl	100130c8 <__gesf2>
10012d5e:	2800      	cmp	r0, #0
10012d60:	dc01      	bgt.n	10012d66 <__aeabi_fcmpgt+0xe>
10012d62:	2000      	movs	r0, #0
10012d64:	bd10      	pop	{r4, pc}
10012d66:	2001      	movs	r0, #1
10012d68:	bd10      	pop	{r4, pc}
10012d6a:	46c0      	nop			; (mov r8, r8)

10012d6c <__aeabi_fcmpge>:
10012d6c:	b510      	push	{r4, lr}
10012d6e:	f000 f9ab 	bl	100130c8 <__gesf2>
10012d72:	2800      	cmp	r0, #0
10012d74:	da01      	bge.n	10012d7a <__aeabi_fcmpge+0xe>
10012d76:	2000      	movs	r0, #0
10012d78:	bd10      	pop	{r4, pc}
10012d7a:	2001      	movs	r0, #1
10012d7c:	bd10      	pop	{r4, pc}
10012d7e:	46c0      	nop			; (mov r8, r8)

10012d80 <__aeabi_lmul>:
10012d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d82:	464f      	mov	r7, r9
10012d84:	4646      	mov	r6, r8
10012d86:	b4c0      	push	{r6, r7}
10012d88:	0416      	lsls	r6, r2, #16
10012d8a:	0c36      	lsrs	r6, r6, #16
10012d8c:	4699      	mov	r9, r3
10012d8e:	0033      	movs	r3, r6
10012d90:	0405      	lsls	r5, r0, #16
10012d92:	0c2c      	lsrs	r4, r5, #16
10012d94:	0c07      	lsrs	r7, r0, #16
10012d96:	0c15      	lsrs	r5, r2, #16
10012d98:	4363      	muls	r3, r4
10012d9a:	437e      	muls	r6, r7
10012d9c:	436f      	muls	r7, r5
10012d9e:	4365      	muls	r5, r4
10012da0:	0c1c      	lsrs	r4, r3, #16
10012da2:	19ad      	adds	r5, r5, r6
10012da4:	1964      	adds	r4, r4, r5
10012da6:	469c      	mov	ip, r3
10012da8:	42a6      	cmp	r6, r4
10012daa:	d903      	bls.n	10012db4 <__aeabi_lmul+0x34>
10012dac:	2380      	movs	r3, #128	; 0x80
10012dae:	025b      	lsls	r3, r3, #9
10012db0:	4698      	mov	r8, r3
10012db2:	4447      	add	r7, r8
10012db4:	4663      	mov	r3, ip
10012db6:	0c25      	lsrs	r5, r4, #16
10012db8:	19ef      	adds	r7, r5, r7
10012dba:	041d      	lsls	r5, r3, #16
10012dbc:	464b      	mov	r3, r9
10012dbe:	434a      	muls	r2, r1
10012dc0:	4343      	muls	r3, r0
10012dc2:	0c2d      	lsrs	r5, r5, #16
10012dc4:	0424      	lsls	r4, r4, #16
10012dc6:	1964      	adds	r4, r4, r5
10012dc8:	1899      	adds	r1, r3, r2
10012dca:	19c9      	adds	r1, r1, r7
10012dcc:	0020      	movs	r0, r4
10012dce:	bc0c      	pop	{r2, r3}
10012dd0:	4690      	mov	r8, r2
10012dd2:	4699      	mov	r9, r3
10012dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012dd6:	46c0      	nop			; (mov r8, r8)

10012dd8 <__aeabi_f2uiz>:
10012dd8:	219e      	movs	r1, #158	; 0x9e
10012dda:	b510      	push	{r4, lr}
10012ddc:	05c9      	lsls	r1, r1, #23
10012dde:	1c04      	adds	r4, r0, #0
10012de0:	f7ff ffc4 	bl	10012d6c <__aeabi_fcmpge>
10012de4:	2800      	cmp	r0, #0
10012de6:	d103      	bne.n	10012df0 <__aeabi_f2uiz+0x18>
10012de8:	1c20      	adds	r0, r4, #0
10012dea:	f000 fc8f 	bl	1001370c <__aeabi_f2iz>
10012dee:	bd10      	pop	{r4, pc}
10012df0:	219e      	movs	r1, #158	; 0x9e
10012df2:	1c20      	adds	r0, r4, #0
10012df4:	05c9      	lsls	r1, r1, #23
10012df6:	f000 fb03 	bl	10013400 <__aeabi_fsub>
10012dfa:	f000 fc87 	bl	1001370c <__aeabi_f2iz>
10012dfe:	2380      	movs	r3, #128	; 0x80
10012e00:	061b      	lsls	r3, r3, #24
10012e02:	469c      	mov	ip, r3
10012e04:	4460      	add	r0, ip
10012e06:	e7f2      	b.n	10012dee <__aeabi_f2uiz+0x16>

10012e08 <__aeabi_d2uiz>:
10012e08:	b570      	push	{r4, r5, r6, lr}
10012e0a:	2200      	movs	r2, #0
10012e0c:	4b0c      	ldr	r3, [pc, #48]	; (10012e40 <__aeabi_d2uiz+0x38>)
10012e0e:	0004      	movs	r4, r0
10012e10:	000d      	movs	r5, r1
10012e12:	f7ff ff71 	bl	10012cf8 <__aeabi_dcmpge>
10012e16:	2800      	cmp	r0, #0
10012e18:	d104      	bne.n	10012e24 <__aeabi_d2uiz+0x1c>
10012e1a:	0020      	movs	r0, r4
10012e1c:	0029      	movs	r1, r5
10012e1e:	f002 fa5b 	bl	100152d8 <__aeabi_d2iz>
10012e22:	bd70      	pop	{r4, r5, r6, pc}
10012e24:	4b06      	ldr	r3, [pc, #24]	; (10012e40 <__aeabi_d2uiz+0x38>)
10012e26:	2200      	movs	r2, #0
10012e28:	0020      	movs	r0, r4
10012e2a:	0029      	movs	r1, r5
10012e2c:	f001 fee0 	bl	10014bf0 <__aeabi_dsub>
10012e30:	f002 fa52 	bl	100152d8 <__aeabi_d2iz>
10012e34:	2380      	movs	r3, #128	; 0x80
10012e36:	061b      	lsls	r3, r3, #24
10012e38:	469c      	mov	ip, r3
10012e3a:	4460      	add	r0, ip
10012e3c:	e7f1      	b.n	10012e22 <__aeabi_d2uiz+0x1a>
10012e3e:	46c0      	nop			; (mov r8, r8)
10012e40:	41e00000 	.word	0x41e00000

10012e44 <__aeabi_fdiv>:
10012e44:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e46:	4656      	mov	r6, sl
10012e48:	4644      	mov	r4, r8
10012e4a:	465f      	mov	r7, fp
10012e4c:	464d      	mov	r5, r9
10012e4e:	b4f0      	push	{r4, r5, r6, r7}
10012e50:	0244      	lsls	r4, r0, #9
10012e52:	0046      	lsls	r6, r0, #1
10012e54:	0fc7      	lsrs	r7, r0, #31
10012e56:	b083      	sub	sp, #12
10012e58:	4688      	mov	r8, r1
10012e5a:	0a65      	lsrs	r5, r4, #9
10012e5c:	0e36      	lsrs	r6, r6, #24
10012e5e:	46ba      	mov	sl, r7
10012e60:	d03d      	beq.n	10012ede <__aeabi_fdiv+0x9a>
10012e62:	2eff      	cmp	r6, #255	; 0xff
10012e64:	d022      	beq.n	10012eac <__aeabi_fdiv+0x68>
10012e66:	2300      	movs	r3, #0
10012e68:	00ec      	lsls	r4, r5, #3
10012e6a:	2580      	movs	r5, #128	; 0x80
10012e6c:	4699      	mov	r9, r3
10012e6e:	469b      	mov	fp, r3
10012e70:	04ed      	lsls	r5, r5, #19
10012e72:	4325      	orrs	r5, r4
10012e74:	3e7f      	subs	r6, #127	; 0x7f
10012e76:	4643      	mov	r3, r8
10012e78:	025c      	lsls	r4, r3, #9
10012e7a:	0058      	lsls	r0, r3, #1
10012e7c:	0fdb      	lsrs	r3, r3, #31
10012e7e:	0a64      	lsrs	r4, r4, #9
10012e80:	0e00      	lsrs	r0, r0, #24
10012e82:	4698      	mov	r8, r3
10012e84:	d036      	beq.n	10012ef4 <__aeabi_fdiv+0xb0>
10012e86:	28ff      	cmp	r0, #255	; 0xff
10012e88:	d030      	beq.n	10012eec <__aeabi_fdiv+0xa8>
10012e8a:	2380      	movs	r3, #128	; 0x80
10012e8c:	2100      	movs	r1, #0
10012e8e:	00e4      	lsls	r4, r4, #3
10012e90:	04db      	lsls	r3, r3, #19
10012e92:	431c      	orrs	r4, r3
10012e94:	387f      	subs	r0, #127	; 0x7f
10012e96:	1a30      	subs	r0, r6, r0
10012e98:	9001      	str	r0, [sp, #4]
10012e9a:	4648      	mov	r0, r9
10012e9c:	4642      	mov	r2, r8
10012e9e:	4308      	orrs	r0, r1
10012ea0:	4e72      	ldr	r6, [pc, #456]	; (1001306c <__aeabi_fdiv+0x228>)
10012ea2:	0080      	lsls	r0, r0, #2
10012ea4:	5830      	ldr	r0, [r6, r0]
10012ea6:	407a      	eors	r2, r7
10012ea8:	0013      	movs	r3, r2
10012eaa:	4687      	mov	pc, r0
10012eac:	2d00      	cmp	r5, #0
10012eae:	d144      	bne.n	10012f3a <__aeabi_fdiv+0xf6>
10012eb0:	2308      	movs	r3, #8
10012eb2:	4699      	mov	r9, r3
10012eb4:	3b06      	subs	r3, #6
10012eb6:	469b      	mov	fp, r3
10012eb8:	e7dd      	b.n	10012e76 <__aeabi_fdiv+0x32>
10012eba:	2201      	movs	r2, #1
10012ebc:	20ff      	movs	r0, #255	; 0xff
10012ebe:	2400      	movs	r4, #0
10012ec0:	401a      	ands	r2, r3
10012ec2:	0264      	lsls	r4, r4, #9
10012ec4:	05c3      	lsls	r3, r0, #23
10012ec6:	0a64      	lsrs	r4, r4, #9
10012ec8:	07d2      	lsls	r2, r2, #31
10012eca:	431c      	orrs	r4, r3
10012ecc:	4314      	orrs	r4, r2
10012ece:	0020      	movs	r0, r4
10012ed0:	b003      	add	sp, #12
10012ed2:	bc3c      	pop	{r2, r3, r4, r5}
10012ed4:	4690      	mov	r8, r2
10012ed6:	4699      	mov	r9, r3
10012ed8:	46a2      	mov	sl, r4
10012eda:	46ab      	mov	fp, r5
10012edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012ede:	2d00      	cmp	r5, #0
10012ee0:	d120      	bne.n	10012f24 <__aeabi_fdiv+0xe0>
10012ee2:	2304      	movs	r3, #4
10012ee4:	4699      	mov	r9, r3
10012ee6:	3b03      	subs	r3, #3
10012ee8:	469b      	mov	fp, r3
10012eea:	e7c4      	b.n	10012e76 <__aeabi_fdiv+0x32>
10012eec:	2c00      	cmp	r4, #0
10012eee:	d117      	bne.n	10012f20 <__aeabi_fdiv+0xdc>
10012ef0:	2102      	movs	r1, #2
10012ef2:	e002      	b.n	10012efa <__aeabi_fdiv+0xb6>
10012ef4:	2c00      	cmp	r4, #0
10012ef6:	d10a      	bne.n	10012f0e <__aeabi_fdiv+0xca>
10012ef8:	2101      	movs	r1, #1
10012efa:	1a32      	subs	r2, r6, r0
10012efc:	9201      	str	r2, [sp, #4]
10012efe:	464a      	mov	r2, r9
10012f00:	4643      	mov	r3, r8
10012f02:	430a      	orrs	r2, r1
10012f04:	485a      	ldr	r0, [pc, #360]	; (10013070 <__aeabi_fdiv+0x22c>)
10012f06:	0092      	lsls	r2, r2, #2
10012f08:	5882      	ldr	r2, [r0, r2]
10012f0a:	407b      	eors	r3, r7
10012f0c:	4697      	mov	pc, r2
10012f0e:	0020      	movs	r0, r4
10012f10:	f002 fb72 	bl	100155f8 <__clzsi2>
10012f14:	1f43      	subs	r3, r0, #5
10012f16:	3076      	adds	r0, #118	; 0x76
10012f18:	409c      	lsls	r4, r3
10012f1a:	4240      	negs	r0, r0
10012f1c:	2100      	movs	r1, #0
10012f1e:	e7ba      	b.n	10012e96 <__aeabi_fdiv+0x52>
10012f20:	2103      	movs	r1, #3
10012f22:	e7b8      	b.n	10012e96 <__aeabi_fdiv+0x52>
10012f24:	0028      	movs	r0, r5
10012f26:	f002 fb67 	bl	100155f8 <__clzsi2>
10012f2a:	1f43      	subs	r3, r0, #5
10012f2c:	409d      	lsls	r5, r3
10012f2e:	2300      	movs	r3, #0
10012f30:	3076      	adds	r0, #118	; 0x76
10012f32:	4246      	negs	r6, r0
10012f34:	4699      	mov	r9, r3
10012f36:	469b      	mov	fp, r3
10012f38:	e79d      	b.n	10012e76 <__aeabi_fdiv+0x32>
10012f3a:	230c      	movs	r3, #12
10012f3c:	4699      	mov	r9, r3
10012f3e:	3b09      	subs	r3, #9
10012f40:	469b      	mov	fp, r3
10012f42:	e798      	b.n	10012e76 <__aeabi_fdiv+0x32>
10012f44:	2480      	movs	r4, #128	; 0x80
10012f46:	2200      	movs	r2, #0
10012f48:	03e4      	lsls	r4, r4, #15
10012f4a:	20ff      	movs	r0, #255	; 0xff
10012f4c:	e7b9      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10012f4e:	2400      	movs	r4, #0
10012f50:	46c2      	mov	sl, r8
10012f52:	468b      	mov	fp, r1
10012f54:	465a      	mov	r2, fp
10012f56:	4653      	mov	r3, sl
10012f58:	2a02      	cmp	r2, #2
10012f5a:	d0ae      	beq.n	10012eba <__aeabi_fdiv+0x76>
10012f5c:	2a03      	cmp	r2, #3
10012f5e:	d07d      	beq.n	1001305c <__aeabi_fdiv+0x218>
10012f60:	2a01      	cmp	r2, #1
10012f62:	d131      	bne.n	10012fc8 <__aeabi_fdiv+0x184>
10012f64:	2201      	movs	r2, #1
10012f66:	2000      	movs	r0, #0
10012f68:	401a      	ands	r2, r3
10012f6a:	2400      	movs	r4, #0
10012f6c:	e7a9      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10012f6e:	2201      	movs	r2, #1
10012f70:	1a10      	subs	r0, r2, r0
10012f72:	281b      	cmp	r0, #27
10012f74:	dd56      	ble.n	10013024 <__aeabi_fdiv+0x1e0>
10012f76:	401a      	ands	r2, r3
10012f78:	2000      	movs	r0, #0
10012f7a:	2400      	movs	r4, #0
10012f7c:	e7a1      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10012f7e:	2380      	movs	r3, #128	; 0x80
10012f80:	03db      	lsls	r3, r3, #15
10012f82:	421d      	tst	r5, r3
10012f84:	d14b      	bne.n	1001301e <__aeabi_fdiv+0x1da>
10012f86:	2380      	movs	r3, #128	; 0x80
10012f88:	03db      	lsls	r3, r3, #15
10012f8a:	432b      	orrs	r3, r5
10012f8c:	025c      	lsls	r4, r3, #9
10012f8e:	0a64      	lsrs	r4, r4, #9
10012f90:	003a      	movs	r2, r7
10012f92:	20ff      	movs	r0, #255	; 0xff
10012f94:	e795      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10012f96:	016d      	lsls	r5, r5, #5
10012f98:	0160      	lsls	r0, r4, #5
10012f9a:	4285      	cmp	r5, r0
10012f9c:	d230      	bcs.n	10013000 <__aeabi_fdiv+0x1bc>
10012f9e:	9a01      	ldr	r2, [sp, #4]
10012fa0:	2400      	movs	r4, #0
10012fa2:	3a01      	subs	r2, #1
10012fa4:	9201      	str	r2, [sp, #4]
10012fa6:	221b      	movs	r2, #27
10012fa8:	2701      	movs	r7, #1
10012faa:	0029      	movs	r1, r5
10012fac:	0064      	lsls	r4, r4, #1
10012fae:	006d      	lsls	r5, r5, #1
10012fb0:	2900      	cmp	r1, #0
10012fb2:	db01      	blt.n	10012fb8 <__aeabi_fdiv+0x174>
10012fb4:	42a8      	cmp	r0, r5
10012fb6:	d801      	bhi.n	10012fbc <__aeabi_fdiv+0x178>
10012fb8:	1a2d      	subs	r5, r5, r0
10012fba:	433c      	orrs	r4, r7
10012fbc:	3a01      	subs	r2, #1
10012fbe:	2a00      	cmp	r2, #0
10012fc0:	d1f3      	bne.n	10012faa <__aeabi_fdiv+0x166>
10012fc2:	1e6a      	subs	r2, r5, #1
10012fc4:	4195      	sbcs	r5, r2
10012fc6:	432c      	orrs	r4, r5
10012fc8:	9801      	ldr	r0, [sp, #4]
10012fca:	307f      	adds	r0, #127	; 0x7f
10012fcc:	2800      	cmp	r0, #0
10012fce:	ddce      	ble.n	10012f6e <__aeabi_fdiv+0x12a>
10012fd0:	0762      	lsls	r2, r4, #29
10012fd2:	d004      	beq.n	10012fde <__aeabi_fdiv+0x19a>
10012fd4:	220f      	movs	r2, #15
10012fd6:	4022      	ands	r2, r4
10012fd8:	2a04      	cmp	r2, #4
10012fda:	d000      	beq.n	10012fde <__aeabi_fdiv+0x19a>
10012fdc:	3404      	adds	r4, #4
10012fde:	0122      	lsls	r2, r4, #4
10012fe0:	d503      	bpl.n	10012fea <__aeabi_fdiv+0x1a6>
10012fe2:	4a24      	ldr	r2, [pc, #144]	; (10013074 <__aeabi_fdiv+0x230>)
10012fe4:	9801      	ldr	r0, [sp, #4]
10012fe6:	4014      	ands	r4, r2
10012fe8:	3080      	adds	r0, #128	; 0x80
10012fea:	28fe      	cmp	r0, #254	; 0xfe
10012fec:	dd00      	ble.n	10012ff0 <__aeabi_fdiv+0x1ac>
10012fee:	e764      	b.n	10012eba <__aeabi_fdiv+0x76>
10012ff0:	2201      	movs	r2, #1
10012ff2:	01a4      	lsls	r4, r4, #6
10012ff4:	0a64      	lsrs	r4, r4, #9
10012ff6:	b2c0      	uxtb	r0, r0
10012ff8:	401a      	ands	r2, r3
10012ffa:	e762      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10012ffc:	002c      	movs	r4, r5
10012ffe:	e7a9      	b.n	10012f54 <__aeabi_fdiv+0x110>
10013000:	1a2d      	subs	r5, r5, r0
10013002:	221a      	movs	r2, #26
10013004:	2401      	movs	r4, #1
10013006:	e7cf      	b.n	10012fa8 <__aeabi_fdiv+0x164>
10013008:	026b      	lsls	r3, r5, #9
1001300a:	d5bc      	bpl.n	10012f86 <__aeabi_fdiv+0x142>
1001300c:	2400      	movs	r4, #0
1001300e:	2380      	movs	r3, #128	; 0x80
10013010:	03db      	lsls	r3, r3, #15
10013012:	431c      	orrs	r4, r3
10013014:	0264      	lsls	r4, r4, #9
10013016:	0a64      	lsrs	r4, r4, #9
10013018:	4642      	mov	r2, r8
1001301a:	20ff      	movs	r0, #255	; 0xff
1001301c:	e751      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
1001301e:	421c      	tst	r4, r3
10013020:	d1b3      	bne.n	10012f8a <__aeabi_fdiv+0x146>
10013022:	e7f4      	b.n	1001300e <__aeabi_fdiv+0x1ca>
10013024:	0021      	movs	r1, r4
10013026:	2220      	movs	r2, #32
10013028:	40c1      	lsrs	r1, r0
1001302a:	1a10      	subs	r0, r2, r0
1001302c:	4084      	lsls	r4, r0
1001302e:	1e62      	subs	r2, r4, #1
10013030:	4194      	sbcs	r4, r2
10013032:	430c      	orrs	r4, r1
10013034:	0762      	lsls	r2, r4, #29
10013036:	d004      	beq.n	10013042 <__aeabi_fdiv+0x1fe>
10013038:	220f      	movs	r2, #15
1001303a:	4022      	ands	r2, r4
1001303c:	2a04      	cmp	r2, #4
1001303e:	d000      	beq.n	10013042 <__aeabi_fdiv+0x1fe>
10013040:	3404      	adds	r4, #4
10013042:	0162      	lsls	r2, r4, #5
10013044:	d504      	bpl.n	10013050 <__aeabi_fdiv+0x20c>
10013046:	2201      	movs	r2, #1
10013048:	2001      	movs	r0, #1
1001304a:	401a      	ands	r2, r3
1001304c:	2400      	movs	r4, #0
1001304e:	e738      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
10013050:	2201      	movs	r2, #1
10013052:	01a4      	lsls	r4, r4, #6
10013054:	0a64      	lsrs	r4, r4, #9
10013056:	401a      	ands	r2, r3
10013058:	2000      	movs	r0, #0
1001305a:	e732      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
1001305c:	2380      	movs	r3, #128	; 0x80
1001305e:	03db      	lsls	r3, r3, #15
10013060:	431c      	orrs	r4, r3
10013062:	0264      	lsls	r4, r4, #9
10013064:	0a64      	lsrs	r4, r4, #9
10013066:	4652      	mov	r2, sl
10013068:	20ff      	movs	r0, #255	; 0xff
1001306a:	e72a      	b.n	10012ec2 <__aeabi_fdiv+0x7e>
1001306c:	10018138 	.word	0x10018138
10013070:	10018178 	.word	0x10018178
10013074:	f7ffffff 	.word	0xf7ffffff

10013078 <__eqsf2>:
10013078:	0243      	lsls	r3, r0, #9
1001307a:	b570      	push	{r4, r5, r6, lr}
1001307c:	0042      	lsls	r2, r0, #1
1001307e:	004c      	lsls	r4, r1, #1
10013080:	0a5d      	lsrs	r5, r3, #9
10013082:	0fc3      	lsrs	r3, r0, #31
10013084:	0248      	lsls	r0, r1, #9
10013086:	0e12      	lsrs	r2, r2, #24
10013088:	0a46      	lsrs	r6, r0, #9
1001308a:	0e24      	lsrs	r4, r4, #24
1001308c:	0fc9      	lsrs	r1, r1, #31
1001308e:	2aff      	cmp	r2, #255	; 0xff
10013090:	d00f      	beq.n	100130b2 <__eqsf2+0x3a>
10013092:	2cff      	cmp	r4, #255	; 0xff
10013094:	d011      	beq.n	100130ba <__eqsf2+0x42>
10013096:	2001      	movs	r0, #1
10013098:	42a2      	cmp	r2, r4
1001309a:	d000      	beq.n	1001309e <__eqsf2+0x26>
1001309c:	bd70      	pop	{r4, r5, r6, pc}
1001309e:	42b5      	cmp	r5, r6
100130a0:	d1fc      	bne.n	1001309c <__eqsf2+0x24>
100130a2:	428b      	cmp	r3, r1
100130a4:	d00d      	beq.n	100130c2 <__eqsf2+0x4a>
100130a6:	2a00      	cmp	r2, #0
100130a8:	d1f8      	bne.n	1001309c <__eqsf2+0x24>
100130aa:	0028      	movs	r0, r5
100130ac:	1e43      	subs	r3, r0, #1
100130ae:	4198      	sbcs	r0, r3
100130b0:	e7f4      	b.n	1001309c <__eqsf2+0x24>
100130b2:	2001      	movs	r0, #1
100130b4:	2d00      	cmp	r5, #0
100130b6:	d1f1      	bne.n	1001309c <__eqsf2+0x24>
100130b8:	e7eb      	b.n	10013092 <__eqsf2+0x1a>
100130ba:	2001      	movs	r0, #1
100130bc:	2e00      	cmp	r6, #0
100130be:	d1ed      	bne.n	1001309c <__eqsf2+0x24>
100130c0:	e7e9      	b.n	10013096 <__eqsf2+0x1e>
100130c2:	2000      	movs	r0, #0
100130c4:	e7ea      	b.n	1001309c <__eqsf2+0x24>
100130c6:	46c0      	nop			; (mov r8, r8)

100130c8 <__gesf2>:
100130c8:	0243      	lsls	r3, r0, #9
100130ca:	b5f0      	push	{r4, r5, r6, r7, lr}
100130cc:	0042      	lsls	r2, r0, #1
100130ce:	0a5d      	lsrs	r5, r3, #9
100130d0:	0fc3      	lsrs	r3, r0, #31
100130d2:	0248      	lsls	r0, r1, #9
100130d4:	0a44      	lsrs	r4, r0, #9
100130d6:	0048      	lsls	r0, r1, #1
100130d8:	0e12      	lsrs	r2, r2, #24
100130da:	0e00      	lsrs	r0, r0, #24
100130dc:	0fc9      	lsrs	r1, r1, #31
100130de:	2aff      	cmp	r2, #255	; 0xff
100130e0:	d01f      	beq.n	10013122 <__gesf2+0x5a>
100130e2:	28ff      	cmp	r0, #255	; 0xff
100130e4:	d022      	beq.n	1001312c <__gesf2+0x64>
100130e6:	2a00      	cmp	r2, #0
100130e8:	d109      	bne.n	100130fe <__gesf2+0x36>
100130ea:	426e      	negs	r6, r5
100130ec:	416e      	adcs	r6, r5
100130ee:	2800      	cmp	r0, #0
100130f0:	d10f      	bne.n	10013112 <__gesf2+0x4a>
100130f2:	2c00      	cmp	r4, #0
100130f4:	d10d      	bne.n	10013112 <__gesf2+0x4a>
100130f6:	2000      	movs	r0, #0
100130f8:	2d00      	cmp	r5, #0
100130fa:	d009      	beq.n	10013110 <__gesf2+0x48>
100130fc:	e005      	b.n	1001310a <__gesf2+0x42>
100130fe:	2800      	cmp	r0, #0
10013100:	d101      	bne.n	10013106 <__gesf2+0x3e>
10013102:	2c00      	cmp	r4, #0
10013104:	d001      	beq.n	1001310a <__gesf2+0x42>
10013106:	428b      	cmp	r3, r1
10013108:	d013      	beq.n	10013132 <__gesf2+0x6a>
1001310a:	4258      	negs	r0, r3
1001310c:	2301      	movs	r3, #1
1001310e:	4318      	orrs	r0, r3
10013110:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013112:	2e00      	cmp	r6, #0
10013114:	d0f7      	beq.n	10013106 <__gesf2+0x3e>
10013116:	4248      	negs	r0, r1
10013118:	4141      	adcs	r1, r0
1001311a:	2001      	movs	r0, #1
1001311c:	4249      	negs	r1, r1
1001311e:	4308      	orrs	r0, r1
10013120:	e7f6      	b.n	10013110 <__gesf2+0x48>
10013122:	2d00      	cmp	r5, #0
10013124:	d0dd      	beq.n	100130e2 <__gesf2+0x1a>
10013126:	2002      	movs	r0, #2
10013128:	4240      	negs	r0, r0
1001312a:	e7f1      	b.n	10013110 <__gesf2+0x48>
1001312c:	2c00      	cmp	r4, #0
1001312e:	d0da      	beq.n	100130e6 <__gesf2+0x1e>
10013130:	e7f9      	b.n	10013126 <__gesf2+0x5e>
10013132:	4282      	cmp	r2, r0
10013134:	dce9      	bgt.n	1001310a <__gesf2+0x42>
10013136:	db04      	blt.n	10013142 <__gesf2+0x7a>
10013138:	42a5      	cmp	r5, r4
1001313a:	d8e6      	bhi.n	1001310a <__gesf2+0x42>
1001313c:	2000      	movs	r0, #0
1001313e:	42a5      	cmp	r5, r4
10013140:	d2e6      	bcs.n	10013110 <__gesf2+0x48>
10013142:	4258      	negs	r0, r3
10013144:	4143      	adcs	r3, r0
10013146:	2001      	movs	r0, #1
10013148:	425b      	negs	r3, r3
1001314a:	4318      	orrs	r0, r3
1001314c:	e7e0      	b.n	10013110 <__gesf2+0x48>
1001314e:	46c0      	nop			; (mov r8, r8)

10013150 <__lesf2>:
10013150:	0243      	lsls	r3, r0, #9
10013152:	b5f0      	push	{r4, r5, r6, r7, lr}
10013154:	0042      	lsls	r2, r0, #1
10013156:	004c      	lsls	r4, r1, #1
10013158:	0a5e      	lsrs	r6, r3, #9
1001315a:	0fc3      	lsrs	r3, r0, #31
1001315c:	0248      	lsls	r0, r1, #9
1001315e:	0e12      	lsrs	r2, r2, #24
10013160:	0a45      	lsrs	r5, r0, #9
10013162:	0e24      	lsrs	r4, r4, #24
10013164:	0fc9      	lsrs	r1, r1, #31
10013166:	2aff      	cmp	r2, #255	; 0xff
10013168:	d017      	beq.n	1001319a <__lesf2+0x4a>
1001316a:	2cff      	cmp	r4, #255	; 0xff
1001316c:	d019      	beq.n	100131a2 <__lesf2+0x52>
1001316e:	2a00      	cmp	r2, #0
10013170:	d10b      	bne.n	1001318a <__lesf2+0x3a>
10013172:	4270      	negs	r0, r6
10013174:	4170      	adcs	r0, r6
10013176:	2c00      	cmp	r4, #0
10013178:	d017      	beq.n	100131aa <__lesf2+0x5a>
1001317a:	2800      	cmp	r0, #0
1001317c:	d007      	beq.n	1001318e <__lesf2+0x3e>
1001317e:	4248      	negs	r0, r1
10013180:	4141      	adcs	r1, r0
10013182:	2001      	movs	r0, #1
10013184:	4249      	negs	r1, r1
10013186:	4308      	orrs	r0, r1
10013188:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001318a:	2c00      	cmp	r4, #0
1001318c:	d013      	beq.n	100131b6 <__lesf2+0x66>
1001318e:	428b      	cmp	r3, r1
10013190:	d014      	beq.n	100131bc <__lesf2+0x6c>
10013192:	4258      	negs	r0, r3
10013194:	2301      	movs	r3, #1
10013196:	4318      	orrs	r0, r3
10013198:	e7f6      	b.n	10013188 <__lesf2+0x38>
1001319a:	2002      	movs	r0, #2
1001319c:	2e00      	cmp	r6, #0
1001319e:	d1f3      	bne.n	10013188 <__lesf2+0x38>
100131a0:	e7e3      	b.n	1001316a <__lesf2+0x1a>
100131a2:	2002      	movs	r0, #2
100131a4:	2d00      	cmp	r5, #0
100131a6:	d1ef      	bne.n	10013188 <__lesf2+0x38>
100131a8:	e7e1      	b.n	1001316e <__lesf2+0x1e>
100131aa:	2d00      	cmp	r5, #0
100131ac:	d1e5      	bne.n	1001317a <__lesf2+0x2a>
100131ae:	2000      	movs	r0, #0
100131b0:	2e00      	cmp	r6, #0
100131b2:	d0e9      	beq.n	10013188 <__lesf2+0x38>
100131b4:	e7ed      	b.n	10013192 <__lesf2+0x42>
100131b6:	2d00      	cmp	r5, #0
100131b8:	d1e9      	bne.n	1001318e <__lesf2+0x3e>
100131ba:	e7ea      	b.n	10013192 <__lesf2+0x42>
100131bc:	42a2      	cmp	r2, r4
100131be:	dce8      	bgt.n	10013192 <__lesf2+0x42>
100131c0:	db04      	blt.n	100131cc <__lesf2+0x7c>
100131c2:	42ae      	cmp	r6, r5
100131c4:	d8e5      	bhi.n	10013192 <__lesf2+0x42>
100131c6:	2000      	movs	r0, #0
100131c8:	42ae      	cmp	r6, r5
100131ca:	d2dd      	bcs.n	10013188 <__lesf2+0x38>
100131cc:	4258      	negs	r0, r3
100131ce:	4143      	adcs	r3, r0
100131d0:	2001      	movs	r0, #1
100131d2:	425b      	negs	r3, r3
100131d4:	4318      	orrs	r0, r3
100131d6:	e7d7      	b.n	10013188 <__lesf2+0x38>

100131d8 <__aeabi_fmul>:
100131d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100131da:	4657      	mov	r7, sl
100131dc:	464e      	mov	r6, r9
100131de:	4645      	mov	r5, r8
100131e0:	0043      	lsls	r3, r0, #1
100131e2:	b4e0      	push	{r5, r6, r7}
100131e4:	0246      	lsls	r6, r0, #9
100131e6:	4688      	mov	r8, r1
100131e8:	0a76      	lsrs	r6, r6, #9
100131ea:	0e1f      	lsrs	r7, r3, #24
100131ec:	0fc4      	lsrs	r4, r0, #31
100131ee:	2f00      	cmp	r7, #0
100131f0:	d047      	beq.n	10013282 <__aeabi_fmul+0xaa>
100131f2:	2fff      	cmp	r7, #255	; 0xff
100131f4:	d025      	beq.n	10013242 <__aeabi_fmul+0x6a>
100131f6:	2300      	movs	r3, #0
100131f8:	2580      	movs	r5, #128	; 0x80
100131fa:	469a      	mov	sl, r3
100131fc:	4699      	mov	r9, r3
100131fe:	00f6      	lsls	r6, r6, #3
10013200:	04ed      	lsls	r5, r5, #19
10013202:	432e      	orrs	r6, r5
10013204:	3f7f      	subs	r7, #127	; 0x7f
10013206:	4643      	mov	r3, r8
10013208:	4642      	mov	r2, r8
1001320a:	025d      	lsls	r5, r3, #9
1001320c:	0fd2      	lsrs	r2, r2, #31
1001320e:	005b      	lsls	r3, r3, #1
10013210:	0a6d      	lsrs	r5, r5, #9
10013212:	0e1b      	lsrs	r3, r3, #24
10013214:	4690      	mov	r8, r2
10013216:	d040      	beq.n	1001329a <__aeabi_fmul+0xc2>
10013218:	2bff      	cmp	r3, #255	; 0xff
1001321a:	d039      	beq.n	10013290 <__aeabi_fmul+0xb8>
1001321c:	2280      	movs	r2, #128	; 0x80
1001321e:	2000      	movs	r0, #0
10013220:	00ed      	lsls	r5, r5, #3
10013222:	04d2      	lsls	r2, r2, #19
10013224:	4315      	orrs	r5, r2
10013226:	3b7f      	subs	r3, #127	; 0x7f
10013228:	18fb      	adds	r3, r7, r3
1001322a:	4642      	mov	r2, r8
1001322c:	4657      	mov	r7, sl
1001322e:	1c59      	adds	r1, r3, #1
10013230:	4062      	eors	r2, r4
10013232:	468c      	mov	ip, r1
10013234:	4307      	orrs	r7, r0
10013236:	2f0f      	cmp	r7, #15
10013238:	d85c      	bhi.n	100132f4 <__aeabi_fmul+0x11c>
1001323a:	496f      	ldr	r1, [pc, #444]	; (100133f8 <__aeabi_fmul+0x220>)
1001323c:	00bf      	lsls	r7, r7, #2
1001323e:	59c9      	ldr	r1, [r1, r7]
10013240:	468f      	mov	pc, r1
10013242:	2e00      	cmp	r6, #0
10013244:	d145      	bne.n	100132d2 <__aeabi_fmul+0xfa>
10013246:	2308      	movs	r3, #8
10013248:	469a      	mov	sl, r3
1001324a:	3b06      	subs	r3, #6
1001324c:	4699      	mov	r9, r3
1001324e:	e7da      	b.n	10013206 <__aeabi_fmul+0x2e>
10013250:	4642      	mov	r2, r8
10013252:	2802      	cmp	r0, #2
10013254:	d02d      	beq.n	100132b2 <__aeabi_fmul+0xda>
10013256:	2803      	cmp	r0, #3
10013258:	d100      	bne.n	1001325c <__aeabi_fmul+0x84>
1001325a:	e0c3      	b.n	100133e4 <__aeabi_fmul+0x20c>
1001325c:	2801      	cmp	r0, #1
1001325e:	d000      	beq.n	10013262 <__aeabi_fmul+0x8a>
10013260:	e0a2      	b.n	100133a8 <__aeabi_fmul+0x1d0>
10013262:	2500      	movs	r5, #0
10013264:	2600      	movs	r6, #0
10013266:	4002      	ands	r2, r0
10013268:	b2d4      	uxtb	r4, r2
1001326a:	0276      	lsls	r6, r6, #9
1001326c:	05ed      	lsls	r5, r5, #23
1001326e:	0a76      	lsrs	r6, r6, #9
10013270:	432e      	orrs	r6, r5
10013272:	07e4      	lsls	r4, r4, #31
10013274:	4326      	orrs	r6, r4
10013276:	0030      	movs	r0, r6
10013278:	bc1c      	pop	{r2, r3, r4}
1001327a:	4690      	mov	r8, r2
1001327c:	4699      	mov	r9, r3
1001327e:	46a2      	mov	sl, r4
10013280:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013282:	2e00      	cmp	r6, #0
10013284:	d11a      	bne.n	100132bc <__aeabi_fmul+0xe4>
10013286:	2304      	movs	r3, #4
10013288:	469a      	mov	sl, r3
1001328a:	3b03      	subs	r3, #3
1001328c:	4699      	mov	r9, r3
1001328e:	e7ba      	b.n	10013206 <__aeabi_fmul+0x2e>
10013290:	002a      	movs	r2, r5
10013292:	1e51      	subs	r1, r2, #1
10013294:	418a      	sbcs	r2, r1
10013296:	1c90      	adds	r0, r2, #2
10013298:	e7c6      	b.n	10013228 <__aeabi_fmul+0x50>
1001329a:	2001      	movs	r0, #1
1001329c:	2d00      	cmp	r5, #0
1001329e:	d0c3      	beq.n	10013228 <__aeabi_fmul+0x50>
100132a0:	0028      	movs	r0, r5
100132a2:	f002 f9a9 	bl	100155f8 <__clzsi2>
100132a6:	1f43      	subs	r3, r0, #5
100132a8:	3076      	adds	r0, #118	; 0x76
100132aa:	409d      	lsls	r5, r3
100132ac:	4243      	negs	r3, r0
100132ae:	2000      	movs	r0, #0
100132b0:	e7ba      	b.n	10013228 <__aeabi_fmul+0x50>
100132b2:	2401      	movs	r4, #1
100132b4:	25ff      	movs	r5, #255	; 0xff
100132b6:	4014      	ands	r4, r2
100132b8:	2600      	movs	r6, #0
100132ba:	e7d6      	b.n	1001326a <__aeabi_fmul+0x92>
100132bc:	0030      	movs	r0, r6
100132be:	f002 f99b 	bl	100155f8 <__clzsi2>
100132c2:	1f43      	subs	r3, r0, #5
100132c4:	409e      	lsls	r6, r3
100132c6:	2300      	movs	r3, #0
100132c8:	3076      	adds	r0, #118	; 0x76
100132ca:	4247      	negs	r7, r0
100132cc:	469a      	mov	sl, r3
100132ce:	4699      	mov	r9, r3
100132d0:	e799      	b.n	10013206 <__aeabi_fmul+0x2e>
100132d2:	230c      	movs	r3, #12
100132d4:	469a      	mov	sl, r3
100132d6:	3b09      	subs	r3, #9
100132d8:	4699      	mov	r9, r3
100132da:	e794      	b.n	10013206 <__aeabi_fmul+0x2e>
100132dc:	2680      	movs	r6, #128	; 0x80
100132de:	2400      	movs	r4, #0
100132e0:	03f6      	lsls	r6, r6, #15
100132e2:	25ff      	movs	r5, #255	; 0xff
100132e4:	e7c1      	b.n	1001326a <__aeabi_fmul+0x92>
100132e6:	0035      	movs	r5, r6
100132e8:	4648      	mov	r0, r9
100132ea:	e7b2      	b.n	10013252 <__aeabi_fmul+0x7a>
100132ec:	0035      	movs	r5, r6
100132ee:	0022      	movs	r2, r4
100132f0:	4648      	mov	r0, r9
100132f2:	e7ae      	b.n	10013252 <__aeabi_fmul+0x7a>
100132f4:	0429      	lsls	r1, r5, #16
100132f6:	0c09      	lsrs	r1, r1, #16
100132f8:	0008      	movs	r0, r1
100132fa:	0c37      	lsrs	r7, r6, #16
100132fc:	0436      	lsls	r6, r6, #16
100132fe:	0c36      	lsrs	r6, r6, #16
10013300:	0c2c      	lsrs	r4, r5, #16
10013302:	4379      	muls	r1, r7
10013304:	4370      	muls	r0, r6
10013306:	4367      	muls	r7, r4
10013308:	4374      	muls	r4, r6
1001330a:	0c06      	lsrs	r6, r0, #16
1001330c:	1864      	adds	r4, r4, r1
1001330e:	1936      	adds	r6, r6, r4
10013310:	42b1      	cmp	r1, r6
10013312:	d903      	bls.n	1001331c <__aeabi_fmul+0x144>
10013314:	2180      	movs	r1, #128	; 0x80
10013316:	0249      	lsls	r1, r1, #9
10013318:	4688      	mov	r8, r1
1001331a:	4447      	add	r7, r8
1001331c:	0400      	lsls	r0, r0, #16
1001331e:	0c00      	lsrs	r0, r0, #16
10013320:	0431      	lsls	r1, r6, #16
10013322:	1809      	adds	r1, r1, r0
10013324:	018d      	lsls	r5, r1, #6
10013326:	1e68      	subs	r0, r5, #1
10013328:	4185      	sbcs	r5, r0
1001332a:	0e89      	lsrs	r1, r1, #26
1001332c:	4329      	orrs	r1, r5
1001332e:	0c35      	lsrs	r5, r6, #16
10013330:	19ed      	adds	r5, r5, r7
10013332:	01ad      	lsls	r5, r5, #6
10013334:	430d      	orrs	r5, r1
10013336:	0129      	lsls	r1, r5, #4
10013338:	d504      	bpl.n	10013344 <__aeabi_fmul+0x16c>
1001333a:	2301      	movs	r3, #1
1001333c:	0869      	lsrs	r1, r5, #1
1001333e:	401d      	ands	r5, r3
10013340:	4663      	mov	r3, ip
10013342:	430d      	orrs	r5, r1
10013344:	0019      	movs	r1, r3
10013346:	317f      	adds	r1, #127	; 0x7f
10013348:	2900      	cmp	r1, #0
1001334a:	dd25      	ble.n	10013398 <__aeabi_fmul+0x1c0>
1001334c:	0768      	lsls	r0, r5, #29
1001334e:	d004      	beq.n	1001335a <__aeabi_fmul+0x182>
10013350:	200f      	movs	r0, #15
10013352:	4028      	ands	r0, r5
10013354:	2804      	cmp	r0, #4
10013356:	d000      	beq.n	1001335a <__aeabi_fmul+0x182>
10013358:	3504      	adds	r5, #4
1001335a:	0128      	lsls	r0, r5, #4
1001335c:	d503      	bpl.n	10013366 <__aeabi_fmul+0x18e>
1001335e:	4927      	ldr	r1, [pc, #156]	; (100133fc <__aeabi_fmul+0x224>)
10013360:	3380      	adds	r3, #128	; 0x80
10013362:	400d      	ands	r5, r1
10013364:	0019      	movs	r1, r3
10013366:	29fe      	cmp	r1, #254	; 0xfe
10013368:	dca3      	bgt.n	100132b2 <__aeabi_fmul+0xda>
1001336a:	2401      	movs	r4, #1
1001336c:	01ad      	lsls	r5, r5, #6
1001336e:	0a6e      	lsrs	r6, r5, #9
10013370:	4014      	ands	r4, r2
10013372:	b2cd      	uxtb	r5, r1
10013374:	e779      	b.n	1001326a <__aeabi_fmul+0x92>
10013376:	2080      	movs	r0, #128	; 0x80
10013378:	03c0      	lsls	r0, r0, #15
1001337a:	4206      	tst	r6, r0
1001337c:	d007      	beq.n	1001338e <__aeabi_fmul+0x1b6>
1001337e:	4205      	tst	r5, r0
10013380:	d105      	bne.n	1001338e <__aeabi_fmul+0x1b6>
10013382:	4328      	orrs	r0, r5
10013384:	0246      	lsls	r6, r0, #9
10013386:	0a76      	lsrs	r6, r6, #9
10013388:	4644      	mov	r4, r8
1001338a:	25ff      	movs	r5, #255	; 0xff
1001338c:	e76d      	b.n	1001326a <__aeabi_fmul+0x92>
1001338e:	4306      	orrs	r6, r0
10013390:	0276      	lsls	r6, r6, #9
10013392:	0a76      	lsrs	r6, r6, #9
10013394:	25ff      	movs	r5, #255	; 0xff
10013396:	e768      	b.n	1001326a <__aeabi_fmul+0x92>
10013398:	2401      	movs	r4, #1
1001339a:	1a61      	subs	r1, r4, r1
1001339c:	291b      	cmp	r1, #27
1001339e:	dd05      	ble.n	100133ac <__aeabi_fmul+0x1d4>
100133a0:	4014      	ands	r4, r2
100133a2:	2500      	movs	r5, #0
100133a4:	2600      	movs	r6, #0
100133a6:	e760      	b.n	1001326a <__aeabi_fmul+0x92>
100133a8:	4663      	mov	r3, ip
100133aa:	e7cb      	b.n	10013344 <__aeabi_fmul+0x16c>
100133ac:	002e      	movs	r6, r5
100133ae:	2320      	movs	r3, #32
100133b0:	40ce      	lsrs	r6, r1
100133b2:	1a59      	subs	r1, r3, r1
100133b4:	408d      	lsls	r5, r1
100133b6:	1e6b      	subs	r3, r5, #1
100133b8:	419d      	sbcs	r5, r3
100133ba:	432e      	orrs	r6, r5
100133bc:	0773      	lsls	r3, r6, #29
100133be:	d004      	beq.n	100133ca <__aeabi_fmul+0x1f2>
100133c0:	230f      	movs	r3, #15
100133c2:	4033      	ands	r3, r6
100133c4:	2b04      	cmp	r3, #4
100133c6:	d000      	beq.n	100133ca <__aeabi_fmul+0x1f2>
100133c8:	3604      	adds	r6, #4
100133ca:	0173      	lsls	r3, r6, #5
100133cc:	d504      	bpl.n	100133d8 <__aeabi_fmul+0x200>
100133ce:	2401      	movs	r4, #1
100133d0:	2501      	movs	r5, #1
100133d2:	4014      	ands	r4, r2
100133d4:	2600      	movs	r6, #0
100133d6:	e748      	b.n	1001326a <__aeabi_fmul+0x92>
100133d8:	2401      	movs	r4, #1
100133da:	01b6      	lsls	r6, r6, #6
100133dc:	0a76      	lsrs	r6, r6, #9
100133de:	4014      	ands	r4, r2
100133e0:	2500      	movs	r5, #0
100133e2:	e742      	b.n	1001326a <__aeabi_fmul+0x92>
100133e4:	2680      	movs	r6, #128	; 0x80
100133e6:	2401      	movs	r4, #1
100133e8:	03f6      	lsls	r6, r6, #15
100133ea:	432e      	orrs	r6, r5
100133ec:	0276      	lsls	r6, r6, #9
100133ee:	0a76      	lsrs	r6, r6, #9
100133f0:	4014      	ands	r4, r2
100133f2:	25ff      	movs	r5, #255	; 0xff
100133f4:	e739      	b.n	1001326a <__aeabi_fmul+0x92>
100133f6:	46c0      	nop			; (mov r8, r8)
100133f8:	100181b8 	.word	0x100181b8
100133fc:	f7ffffff 	.word	0xf7ffffff

10013400 <__aeabi_fsub>:
10013400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013402:	024a      	lsls	r2, r1, #9
10013404:	004e      	lsls	r6, r1, #1
10013406:	0243      	lsls	r3, r0, #9
10013408:	0044      	lsls	r4, r0, #1
1001340a:	0e24      	lsrs	r4, r4, #24
1001340c:	0fc5      	lsrs	r5, r0, #31
1001340e:	099b      	lsrs	r3, r3, #6
10013410:	0e36      	lsrs	r6, r6, #24
10013412:	0fc9      	lsrs	r1, r1, #31
10013414:	0992      	lsrs	r2, r2, #6
10013416:	2eff      	cmp	r6, #255	; 0xff
10013418:	d100      	bne.n	1001341c <__aeabi_fsub+0x1c>
1001341a:	e083      	b.n	10013524 <__aeabi_fsub+0x124>
1001341c:	2001      	movs	r0, #1
1001341e:	4041      	eors	r1, r0
10013420:	1ba0      	subs	r0, r4, r6
10013422:	42a9      	cmp	r1, r5
10013424:	d05c      	beq.n	100134e0 <__aeabi_fsub+0xe0>
10013426:	2800      	cmp	r0, #0
10013428:	dc00      	bgt.n	1001342c <__aeabi_fsub+0x2c>
1001342a:	e095      	b.n	10013558 <__aeabi_fsub+0x158>
1001342c:	2e00      	cmp	r6, #0
1001342e:	d11c      	bne.n	1001346a <__aeabi_fsub+0x6a>
10013430:	2a00      	cmp	r2, #0
10013432:	d000      	beq.n	10013436 <__aeabi_fsub+0x36>
10013434:	e081      	b.n	1001353a <__aeabi_fsub+0x13a>
10013436:	075a      	lsls	r2, r3, #29
10013438:	d004      	beq.n	10013444 <__aeabi_fsub+0x44>
1001343a:	220f      	movs	r2, #15
1001343c:	401a      	ands	r2, r3
1001343e:	2a04      	cmp	r2, #4
10013440:	d000      	beq.n	10013444 <__aeabi_fsub+0x44>
10013442:	3304      	adds	r3, #4
10013444:	015a      	lsls	r2, r3, #5
10013446:	d53b      	bpl.n	100134c0 <__aeabi_fsub+0xc0>
10013448:	3401      	adds	r4, #1
1001344a:	2cff      	cmp	r4, #255	; 0xff
1001344c:	d100      	bne.n	10013450 <__aeabi_fsub+0x50>
1001344e:	e091      	b.n	10013574 <__aeabi_fsub+0x174>
10013450:	2001      	movs	r0, #1
10013452:	019b      	lsls	r3, r3, #6
10013454:	0a5b      	lsrs	r3, r3, #9
10013456:	b2e4      	uxtb	r4, r4
10013458:	4005      	ands	r5, r0
1001345a:	025b      	lsls	r3, r3, #9
1001345c:	05e4      	lsls	r4, r4, #23
1001345e:	0a5b      	lsrs	r3, r3, #9
10013460:	07ed      	lsls	r5, r5, #31
10013462:	4323      	orrs	r3, r4
10013464:	432b      	orrs	r3, r5
10013466:	0018      	movs	r0, r3
10013468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001346a:	2cff      	cmp	r4, #255	; 0xff
1001346c:	d0e3      	beq.n	10013436 <__aeabi_fsub+0x36>
1001346e:	2180      	movs	r1, #128	; 0x80
10013470:	04c9      	lsls	r1, r1, #19
10013472:	430a      	orrs	r2, r1
10013474:	281b      	cmp	r0, #27
10013476:	dd00      	ble.n	1001347a <__aeabi_fsub+0x7a>
10013478:	e090      	b.n	1001359c <__aeabi_fsub+0x19c>
1001347a:	0016      	movs	r6, r2
1001347c:	2120      	movs	r1, #32
1001347e:	40c6      	lsrs	r6, r0
10013480:	1a08      	subs	r0, r1, r0
10013482:	4082      	lsls	r2, r0
10013484:	1e51      	subs	r1, r2, #1
10013486:	418a      	sbcs	r2, r1
10013488:	4332      	orrs	r2, r6
1001348a:	1a9b      	subs	r3, r3, r2
1001348c:	015a      	lsls	r2, r3, #5
1001348e:	d515      	bpl.n	100134bc <__aeabi_fsub+0xbc>
10013490:	019b      	lsls	r3, r3, #6
10013492:	099e      	lsrs	r6, r3, #6
10013494:	0030      	movs	r0, r6
10013496:	f002 f8af 	bl	100155f8 <__clzsi2>
1001349a:	3805      	subs	r0, #5
1001349c:	4086      	lsls	r6, r0
1001349e:	4284      	cmp	r4, r0
100134a0:	dc6c      	bgt.n	1001357c <__aeabi_fsub+0x17c>
100134a2:	1b04      	subs	r4, r0, r4
100134a4:	0033      	movs	r3, r6
100134a6:	2020      	movs	r0, #32
100134a8:	3401      	adds	r4, #1
100134aa:	40e3      	lsrs	r3, r4
100134ac:	1b04      	subs	r4, r0, r4
100134ae:	40a6      	lsls	r6, r4
100134b0:	1e72      	subs	r2, r6, #1
100134b2:	4196      	sbcs	r6, r2
100134b4:	2400      	movs	r4, #0
100134b6:	4333      	orrs	r3, r6
100134b8:	e7bd      	b.n	10013436 <__aeabi_fsub+0x36>
100134ba:	000d      	movs	r5, r1
100134bc:	075a      	lsls	r2, r3, #29
100134be:	d1bc      	bne.n	1001343a <__aeabi_fsub+0x3a>
100134c0:	08df      	lsrs	r7, r3, #3
100134c2:	2301      	movs	r3, #1
100134c4:	401d      	ands	r5, r3
100134c6:	2cff      	cmp	r4, #255	; 0xff
100134c8:	d133      	bne.n	10013532 <__aeabi_fsub+0x132>
100134ca:	2f00      	cmp	r7, #0
100134cc:	d100      	bne.n	100134d0 <__aeabi_fsub+0xd0>
100134ce:	e090      	b.n	100135f2 <__aeabi_fsub+0x1f2>
100134d0:	2280      	movs	r2, #128	; 0x80
100134d2:	03d2      	lsls	r2, r2, #15
100134d4:	0013      	movs	r3, r2
100134d6:	433b      	orrs	r3, r7
100134d8:	025b      	lsls	r3, r3, #9
100134da:	0a5b      	lsrs	r3, r3, #9
100134dc:	24ff      	movs	r4, #255	; 0xff
100134de:	e7bc      	b.n	1001345a <__aeabi_fsub+0x5a>
100134e0:	2800      	cmp	r0, #0
100134e2:	dd4f      	ble.n	10013584 <__aeabi_fsub+0x184>
100134e4:	2e00      	cmp	r6, #0
100134e6:	d02e      	beq.n	10013546 <__aeabi_fsub+0x146>
100134e8:	2cff      	cmp	r4, #255	; 0xff
100134ea:	d0a4      	beq.n	10013436 <__aeabi_fsub+0x36>
100134ec:	2580      	movs	r5, #128	; 0x80
100134ee:	04ed      	lsls	r5, r5, #19
100134f0:	432a      	orrs	r2, r5
100134f2:	281b      	cmp	r0, #27
100134f4:	dd00      	ble.n	100134f8 <__aeabi_fsub+0xf8>
100134f6:	e097      	b.n	10013628 <__aeabi_fsub+0x228>
100134f8:	0016      	movs	r6, r2
100134fa:	2520      	movs	r5, #32
100134fc:	40c6      	lsrs	r6, r0
100134fe:	1a28      	subs	r0, r5, r0
10013500:	4082      	lsls	r2, r0
10013502:	1e50      	subs	r0, r2, #1
10013504:	4182      	sbcs	r2, r0
10013506:	4332      	orrs	r2, r6
10013508:	189b      	adds	r3, r3, r2
1001350a:	015a      	lsls	r2, r3, #5
1001350c:	d5d5      	bpl.n	100134ba <__aeabi_fsub+0xba>
1001350e:	3401      	adds	r4, #1
10013510:	2cff      	cmp	r4, #255	; 0xff
10013512:	d06d      	beq.n	100135f0 <__aeabi_fsub+0x1f0>
10013514:	2201      	movs	r2, #1
10013516:	487b      	ldr	r0, [pc, #492]	; (10013704 <__aeabi_fsub+0x304>)
10013518:	401a      	ands	r2, r3
1001351a:	085b      	lsrs	r3, r3, #1
1001351c:	4003      	ands	r3, r0
1001351e:	4313      	orrs	r3, r2
10013520:	000d      	movs	r5, r1
10013522:	e788      	b.n	10013436 <__aeabi_fsub+0x36>
10013524:	2a00      	cmp	r2, #0
10013526:	d000      	beq.n	1001352a <__aeabi_fsub+0x12a>
10013528:	e77a      	b.n	10013420 <__aeabi_fsub+0x20>
1001352a:	e777      	b.n	1001341c <__aeabi_fsub+0x1c>
1001352c:	1e03      	subs	r3, r0, #0
1001352e:	d1c5      	bne.n	100134bc <__aeabi_fsub+0xbc>
10013530:	2500      	movs	r5, #0
10013532:	027b      	lsls	r3, r7, #9
10013534:	0a5b      	lsrs	r3, r3, #9
10013536:	b2e4      	uxtb	r4, r4
10013538:	e78f      	b.n	1001345a <__aeabi_fsub+0x5a>
1001353a:	3801      	subs	r0, #1
1001353c:	2800      	cmp	r0, #0
1001353e:	d0a4      	beq.n	1001348a <__aeabi_fsub+0x8a>
10013540:	2cff      	cmp	r4, #255	; 0xff
10013542:	d197      	bne.n	10013474 <__aeabi_fsub+0x74>
10013544:	e777      	b.n	10013436 <__aeabi_fsub+0x36>
10013546:	2a00      	cmp	r2, #0
10013548:	d100      	bne.n	1001354c <__aeabi_fsub+0x14c>
1001354a:	e774      	b.n	10013436 <__aeabi_fsub+0x36>
1001354c:	3801      	subs	r0, #1
1001354e:	2800      	cmp	r0, #0
10013550:	d0da      	beq.n	10013508 <__aeabi_fsub+0x108>
10013552:	2cff      	cmp	r4, #255	; 0xff
10013554:	d1cd      	bne.n	100134f2 <__aeabi_fsub+0xf2>
10013556:	e76e      	b.n	10013436 <__aeabi_fsub+0x36>
10013558:	2800      	cmp	r0, #0
1001355a:	d121      	bne.n	100135a0 <__aeabi_fsub+0x1a0>
1001355c:	1c60      	adds	r0, r4, #1
1001355e:	b2c0      	uxtb	r0, r0
10013560:	2801      	cmp	r0, #1
10013562:	dd58      	ble.n	10013616 <__aeabi_fsub+0x216>
10013564:	2780      	movs	r7, #128	; 0x80
10013566:	1a9e      	subs	r6, r3, r2
10013568:	04ff      	lsls	r7, r7, #19
1001356a:	4037      	ands	r7, r6
1001356c:	d02f      	beq.n	100135ce <__aeabi_fsub+0x1ce>
1001356e:	1ad6      	subs	r6, r2, r3
10013570:	000d      	movs	r5, r1
10013572:	e78f      	b.n	10013494 <__aeabi_fsub+0x94>
10013574:	2301      	movs	r3, #1
10013576:	401d      	ands	r5, r3
10013578:	2300      	movs	r3, #0
1001357a:	e76e      	b.n	1001345a <__aeabi_fsub+0x5a>
1001357c:	4b62      	ldr	r3, [pc, #392]	; (10013708 <__aeabi_fsub+0x308>)
1001357e:	1a24      	subs	r4, r4, r0
10013580:	4033      	ands	r3, r6
10013582:	e758      	b.n	10013436 <__aeabi_fsub+0x36>
10013584:	2800      	cmp	r0, #0
10013586:	d151      	bne.n	1001362c <__aeabi_fsub+0x22c>
10013588:	1c60      	adds	r0, r4, #1
1001358a:	b2c6      	uxtb	r6, r0
1001358c:	2e01      	cmp	r6, #1
1001358e:	dd33      	ble.n	100135f8 <__aeabi_fsub+0x1f8>
10013590:	28ff      	cmp	r0, #255	; 0xff
10013592:	d02d      	beq.n	100135f0 <__aeabi_fsub+0x1f0>
10013594:	189b      	adds	r3, r3, r2
10013596:	085b      	lsrs	r3, r3, #1
10013598:	0004      	movs	r4, r0
1001359a:	e74c      	b.n	10013436 <__aeabi_fsub+0x36>
1001359c:	2201      	movs	r2, #1
1001359e:	e774      	b.n	1001348a <__aeabi_fsub+0x8a>
100135a0:	2c00      	cmp	r4, #0
100135a2:	d01a      	beq.n	100135da <__aeabi_fsub+0x1da>
100135a4:	2eff      	cmp	r6, #255	; 0xff
100135a6:	d01f      	beq.n	100135e8 <__aeabi_fsub+0x1e8>
100135a8:	2480      	movs	r4, #128	; 0x80
100135aa:	04e4      	lsls	r4, r4, #19
100135ac:	4240      	negs	r0, r0
100135ae:	4323      	orrs	r3, r4
100135b0:	281b      	cmp	r0, #27
100135b2:	dd00      	ble.n	100135b6 <__aeabi_fsub+0x1b6>
100135b4:	e096      	b.n	100136e4 <__aeabi_fsub+0x2e4>
100135b6:	001d      	movs	r5, r3
100135b8:	2420      	movs	r4, #32
100135ba:	40c5      	lsrs	r5, r0
100135bc:	1a20      	subs	r0, r4, r0
100135be:	4083      	lsls	r3, r0
100135c0:	1e58      	subs	r0, r3, #1
100135c2:	4183      	sbcs	r3, r0
100135c4:	432b      	orrs	r3, r5
100135c6:	1ad3      	subs	r3, r2, r3
100135c8:	0034      	movs	r4, r6
100135ca:	000d      	movs	r5, r1
100135cc:	e75e      	b.n	1001348c <__aeabi_fsub+0x8c>
100135ce:	2e00      	cmp	r6, #0
100135d0:	d000      	beq.n	100135d4 <__aeabi_fsub+0x1d4>
100135d2:	e75f      	b.n	10013494 <__aeabi_fsub+0x94>
100135d4:	2500      	movs	r5, #0
100135d6:	2400      	movs	r4, #0
100135d8:	e7ab      	b.n	10013532 <__aeabi_fsub+0x132>
100135da:	2b00      	cmp	r3, #0
100135dc:	d044      	beq.n	10013668 <__aeabi_fsub+0x268>
100135de:	43c0      	mvns	r0, r0
100135e0:	2800      	cmp	r0, #0
100135e2:	d0f0      	beq.n	100135c6 <__aeabi_fsub+0x1c6>
100135e4:	2eff      	cmp	r6, #255	; 0xff
100135e6:	d1e3      	bne.n	100135b0 <__aeabi_fsub+0x1b0>
100135e8:	0013      	movs	r3, r2
100135ea:	24ff      	movs	r4, #255	; 0xff
100135ec:	000d      	movs	r5, r1
100135ee:	e722      	b.n	10013436 <__aeabi_fsub+0x36>
100135f0:	000d      	movs	r5, r1
100135f2:	24ff      	movs	r4, #255	; 0xff
100135f4:	2300      	movs	r3, #0
100135f6:	e730      	b.n	1001345a <__aeabi_fsub+0x5a>
100135f8:	2c00      	cmp	r4, #0
100135fa:	d15d      	bne.n	100136b8 <__aeabi_fsub+0x2b8>
100135fc:	2b00      	cmp	r3, #0
100135fe:	d07d      	beq.n	100136fc <__aeabi_fsub+0x2fc>
10013600:	2a00      	cmp	r2, #0
10013602:	d100      	bne.n	10013606 <__aeabi_fsub+0x206>
10013604:	e717      	b.n	10013436 <__aeabi_fsub+0x36>
10013606:	189b      	adds	r3, r3, r2
10013608:	015a      	lsls	r2, r3, #5
1001360a:	d400      	bmi.n	1001360e <__aeabi_fsub+0x20e>
1001360c:	e756      	b.n	100134bc <__aeabi_fsub+0xbc>
1001360e:	4a3e      	ldr	r2, [pc, #248]	; (10013708 <__aeabi_fsub+0x308>)
10013610:	0004      	movs	r4, r0
10013612:	4013      	ands	r3, r2
10013614:	e70f      	b.n	10013436 <__aeabi_fsub+0x36>
10013616:	2c00      	cmp	r4, #0
10013618:	d11e      	bne.n	10013658 <__aeabi_fsub+0x258>
1001361a:	2b00      	cmp	r3, #0
1001361c:	d12f      	bne.n	1001367e <__aeabi_fsub+0x27e>
1001361e:	2a00      	cmp	r2, #0
10013620:	d065      	beq.n	100136ee <__aeabi_fsub+0x2ee>
10013622:	0013      	movs	r3, r2
10013624:	000d      	movs	r5, r1
10013626:	e706      	b.n	10013436 <__aeabi_fsub+0x36>
10013628:	2201      	movs	r2, #1
1001362a:	e76d      	b.n	10013508 <__aeabi_fsub+0x108>
1001362c:	2c00      	cmp	r4, #0
1001362e:	d11f      	bne.n	10013670 <__aeabi_fsub+0x270>
10013630:	2b00      	cmp	r3, #0
10013632:	d059      	beq.n	100136e8 <__aeabi_fsub+0x2e8>
10013634:	43c0      	mvns	r0, r0
10013636:	2800      	cmp	r0, #0
10013638:	d00b      	beq.n	10013652 <__aeabi_fsub+0x252>
1001363a:	2eff      	cmp	r6, #255	; 0xff
1001363c:	d04f      	beq.n	100136de <__aeabi_fsub+0x2de>
1001363e:	281b      	cmp	r0, #27
10013640:	dc5e      	bgt.n	10013700 <__aeabi_fsub+0x300>
10013642:	001d      	movs	r5, r3
10013644:	2420      	movs	r4, #32
10013646:	40c5      	lsrs	r5, r0
10013648:	1a20      	subs	r0, r4, r0
1001364a:	4083      	lsls	r3, r0
1001364c:	1e58      	subs	r0, r3, #1
1001364e:	4183      	sbcs	r3, r0
10013650:	432b      	orrs	r3, r5
10013652:	189b      	adds	r3, r3, r2
10013654:	0034      	movs	r4, r6
10013656:	e758      	b.n	1001350a <__aeabi_fsub+0x10a>
10013658:	2b00      	cmp	r3, #0
1001365a:	d11c      	bne.n	10013696 <__aeabi_fsub+0x296>
1001365c:	2a00      	cmp	r2, #0
1001365e:	d049      	beq.n	100136f4 <__aeabi_fsub+0x2f4>
10013660:	0013      	movs	r3, r2
10013662:	000d      	movs	r5, r1
10013664:	24ff      	movs	r4, #255	; 0xff
10013666:	e6e6      	b.n	10013436 <__aeabi_fsub+0x36>
10013668:	0013      	movs	r3, r2
1001366a:	0034      	movs	r4, r6
1001366c:	000d      	movs	r5, r1
1001366e:	e6e2      	b.n	10013436 <__aeabi_fsub+0x36>
10013670:	2eff      	cmp	r6, #255	; 0xff
10013672:	d034      	beq.n	100136de <__aeabi_fsub+0x2de>
10013674:	2480      	movs	r4, #128	; 0x80
10013676:	04e4      	lsls	r4, r4, #19
10013678:	4240      	negs	r0, r0
1001367a:	4323      	orrs	r3, r4
1001367c:	e7df      	b.n	1001363e <__aeabi_fsub+0x23e>
1001367e:	2a00      	cmp	r2, #0
10013680:	d100      	bne.n	10013684 <__aeabi_fsub+0x284>
10013682:	e6d8      	b.n	10013436 <__aeabi_fsub+0x36>
10013684:	2780      	movs	r7, #128	; 0x80
10013686:	1a98      	subs	r0, r3, r2
10013688:	04ff      	lsls	r7, r7, #19
1001368a:	4007      	ands	r7, r0
1001368c:	d100      	bne.n	10013690 <__aeabi_fsub+0x290>
1001368e:	e74d      	b.n	1001352c <__aeabi_fsub+0x12c>
10013690:	1ad3      	subs	r3, r2, r3
10013692:	000d      	movs	r5, r1
10013694:	e6cf      	b.n	10013436 <__aeabi_fsub+0x36>
10013696:	24ff      	movs	r4, #255	; 0xff
10013698:	2a00      	cmp	r2, #0
1001369a:	d100      	bne.n	1001369e <__aeabi_fsub+0x29e>
1001369c:	e6cb      	b.n	10013436 <__aeabi_fsub+0x36>
1001369e:	2080      	movs	r0, #128	; 0x80
100136a0:	08db      	lsrs	r3, r3, #3
100136a2:	03c0      	lsls	r0, r0, #15
100136a4:	4203      	tst	r3, r0
100136a6:	d004      	beq.n	100136b2 <__aeabi_fsub+0x2b2>
100136a8:	08d2      	lsrs	r2, r2, #3
100136aa:	4202      	tst	r2, r0
100136ac:	d101      	bne.n	100136b2 <__aeabi_fsub+0x2b2>
100136ae:	0013      	movs	r3, r2
100136b0:	000d      	movs	r5, r1
100136b2:	00db      	lsls	r3, r3, #3
100136b4:	24ff      	movs	r4, #255	; 0xff
100136b6:	e6be      	b.n	10013436 <__aeabi_fsub+0x36>
100136b8:	2b00      	cmp	r3, #0
100136ba:	d010      	beq.n	100136de <__aeabi_fsub+0x2de>
100136bc:	24ff      	movs	r4, #255	; 0xff
100136be:	2a00      	cmp	r2, #0
100136c0:	d100      	bne.n	100136c4 <__aeabi_fsub+0x2c4>
100136c2:	e6b8      	b.n	10013436 <__aeabi_fsub+0x36>
100136c4:	2080      	movs	r0, #128	; 0x80
100136c6:	08db      	lsrs	r3, r3, #3
100136c8:	03c0      	lsls	r0, r0, #15
100136ca:	4203      	tst	r3, r0
100136cc:	d003      	beq.n	100136d6 <__aeabi_fsub+0x2d6>
100136ce:	08d2      	lsrs	r2, r2, #3
100136d0:	4202      	tst	r2, r0
100136d2:	d100      	bne.n	100136d6 <__aeabi_fsub+0x2d6>
100136d4:	0013      	movs	r3, r2
100136d6:	00db      	lsls	r3, r3, #3
100136d8:	000d      	movs	r5, r1
100136da:	24ff      	movs	r4, #255	; 0xff
100136dc:	e6ab      	b.n	10013436 <__aeabi_fsub+0x36>
100136de:	0013      	movs	r3, r2
100136e0:	24ff      	movs	r4, #255	; 0xff
100136e2:	e6a8      	b.n	10013436 <__aeabi_fsub+0x36>
100136e4:	2301      	movs	r3, #1
100136e6:	e76e      	b.n	100135c6 <__aeabi_fsub+0x1c6>
100136e8:	0013      	movs	r3, r2
100136ea:	0034      	movs	r4, r6
100136ec:	e6a3      	b.n	10013436 <__aeabi_fsub+0x36>
100136ee:	2700      	movs	r7, #0
100136f0:	2500      	movs	r5, #0
100136f2:	e71e      	b.n	10013532 <__aeabi_fsub+0x132>
100136f4:	2780      	movs	r7, #128	; 0x80
100136f6:	2500      	movs	r5, #0
100136f8:	03ff      	lsls	r7, r7, #15
100136fa:	e6e9      	b.n	100134d0 <__aeabi_fsub+0xd0>
100136fc:	0013      	movs	r3, r2
100136fe:	e69a      	b.n	10013436 <__aeabi_fsub+0x36>
10013700:	2301      	movs	r3, #1
10013702:	e7a6      	b.n	10013652 <__aeabi_fsub+0x252>
10013704:	7dffffff 	.word	0x7dffffff
10013708:	fbffffff 	.word	0xfbffffff

1001370c <__aeabi_f2iz>:
1001370c:	0243      	lsls	r3, r0, #9
1001370e:	0a59      	lsrs	r1, r3, #9
10013710:	0043      	lsls	r3, r0, #1
10013712:	0fc2      	lsrs	r2, r0, #31
10013714:	0e1b      	lsrs	r3, r3, #24
10013716:	2000      	movs	r0, #0
10013718:	2b7e      	cmp	r3, #126	; 0x7e
1001371a:	dd0e      	ble.n	1001373a <__aeabi_f2iz+0x2e>
1001371c:	2b9d      	cmp	r3, #157	; 0x9d
1001371e:	dc0d      	bgt.n	1001373c <__aeabi_f2iz+0x30>
10013720:	2080      	movs	r0, #128	; 0x80
10013722:	0400      	lsls	r0, r0, #16
10013724:	4301      	orrs	r1, r0
10013726:	2b95      	cmp	r3, #149	; 0x95
10013728:	dc0b      	bgt.n	10013742 <__aeabi_f2iz+0x36>
1001372a:	2096      	movs	r0, #150	; 0x96
1001372c:	1ac3      	subs	r3, r0, r3
1001372e:	40d9      	lsrs	r1, r3
10013730:	000b      	movs	r3, r1
10013732:	4258      	negs	r0, r3
10013734:	2a00      	cmp	r2, #0
10013736:	d100      	bne.n	1001373a <__aeabi_f2iz+0x2e>
10013738:	0018      	movs	r0, r3
1001373a:	4770      	bx	lr
1001373c:	4b03      	ldr	r3, [pc, #12]	; (1001374c <__aeabi_f2iz+0x40>)
1001373e:	18d0      	adds	r0, r2, r3
10013740:	e7fb      	b.n	1001373a <__aeabi_f2iz+0x2e>
10013742:	3b96      	subs	r3, #150	; 0x96
10013744:	4099      	lsls	r1, r3
10013746:	000b      	movs	r3, r1
10013748:	e7f3      	b.n	10013732 <__aeabi_f2iz+0x26>
1001374a:	46c0      	nop			; (mov r8, r8)
1001374c:	7fffffff 	.word	0x7fffffff

10013750 <__aeabi_i2f>:
10013750:	b570      	push	{r4, r5, r6, lr}
10013752:	2800      	cmp	r0, #0
10013754:	d030      	beq.n	100137b8 <__aeabi_i2f+0x68>
10013756:	17c3      	asrs	r3, r0, #31
10013758:	18c5      	adds	r5, r0, r3
1001375a:	405d      	eors	r5, r3
1001375c:	0fc4      	lsrs	r4, r0, #31
1001375e:	0028      	movs	r0, r5
10013760:	f001 ff4a 	bl	100155f8 <__clzsi2>
10013764:	239e      	movs	r3, #158	; 0x9e
10013766:	1a1b      	subs	r3, r3, r0
10013768:	2b96      	cmp	r3, #150	; 0x96
1001376a:	dc0d      	bgt.n	10013788 <__aeabi_i2f+0x38>
1001376c:	2296      	movs	r2, #150	; 0x96
1001376e:	1ad2      	subs	r2, r2, r3
10013770:	4095      	lsls	r5, r2
10013772:	026a      	lsls	r2, r5, #9
10013774:	0a52      	lsrs	r2, r2, #9
10013776:	b2d8      	uxtb	r0, r3
10013778:	0252      	lsls	r2, r2, #9
1001377a:	05c0      	lsls	r0, r0, #23
1001377c:	0a52      	lsrs	r2, r2, #9
1001377e:	07e4      	lsls	r4, r4, #31
10013780:	4302      	orrs	r2, r0
10013782:	4322      	orrs	r2, r4
10013784:	0010      	movs	r0, r2
10013786:	bd70      	pop	{r4, r5, r6, pc}
10013788:	2b99      	cmp	r3, #153	; 0x99
1001378a:	dc19      	bgt.n	100137c0 <__aeabi_i2f+0x70>
1001378c:	2299      	movs	r2, #153	; 0x99
1001378e:	1ad2      	subs	r2, r2, r3
10013790:	4095      	lsls	r5, r2
10013792:	4a12      	ldr	r2, [pc, #72]	; (100137dc <__aeabi_i2f+0x8c>)
10013794:	402a      	ands	r2, r5
10013796:	0769      	lsls	r1, r5, #29
10013798:	d004      	beq.n	100137a4 <__aeabi_i2f+0x54>
1001379a:	210f      	movs	r1, #15
1001379c:	400d      	ands	r5, r1
1001379e:	2d04      	cmp	r5, #4
100137a0:	d000      	beq.n	100137a4 <__aeabi_i2f+0x54>
100137a2:	3204      	adds	r2, #4
100137a4:	0151      	lsls	r1, r2, #5
100137a6:	d503      	bpl.n	100137b0 <__aeabi_i2f+0x60>
100137a8:	4b0c      	ldr	r3, [pc, #48]	; (100137dc <__aeabi_i2f+0x8c>)
100137aa:	401a      	ands	r2, r3
100137ac:	239f      	movs	r3, #159	; 0x9f
100137ae:	1a1b      	subs	r3, r3, r0
100137b0:	0192      	lsls	r2, r2, #6
100137b2:	0a52      	lsrs	r2, r2, #9
100137b4:	b2d8      	uxtb	r0, r3
100137b6:	e7df      	b.n	10013778 <__aeabi_i2f+0x28>
100137b8:	2400      	movs	r4, #0
100137ba:	2000      	movs	r0, #0
100137bc:	2200      	movs	r2, #0
100137be:	e7db      	b.n	10013778 <__aeabi_i2f+0x28>
100137c0:	2205      	movs	r2, #5
100137c2:	002e      	movs	r6, r5
100137c4:	1a12      	subs	r2, r2, r0
100137c6:	21b9      	movs	r1, #185	; 0xb9
100137c8:	40d6      	lsrs	r6, r2
100137ca:	002a      	movs	r2, r5
100137cc:	1ac9      	subs	r1, r1, r3
100137ce:	408a      	lsls	r2, r1
100137d0:	1e55      	subs	r5, r2, #1
100137d2:	41aa      	sbcs	r2, r5
100137d4:	0035      	movs	r5, r6
100137d6:	4315      	orrs	r5, r2
100137d8:	e7db      	b.n	10013792 <__aeabi_i2f+0x42>
100137da:	46c0      	nop			; (mov r8, r8)
100137dc:	fbffffff 	.word	0xfbffffff

100137e0 <__aeabi_ui2f>:
100137e0:	b570      	push	{r4, r5, r6, lr}
100137e2:	1e04      	subs	r4, r0, #0
100137e4:	d028      	beq.n	10013838 <__aeabi_ui2f+0x58>
100137e6:	f001 ff07 	bl	100155f8 <__clzsi2>
100137ea:	239e      	movs	r3, #158	; 0x9e
100137ec:	1a1b      	subs	r3, r3, r0
100137ee:	2b96      	cmp	r3, #150	; 0x96
100137f0:	dc0a      	bgt.n	10013808 <__aeabi_ui2f+0x28>
100137f2:	2296      	movs	r2, #150	; 0x96
100137f4:	1ad2      	subs	r2, r2, r3
100137f6:	4094      	lsls	r4, r2
100137f8:	0262      	lsls	r2, r4, #9
100137fa:	0a52      	lsrs	r2, r2, #9
100137fc:	b2d8      	uxtb	r0, r3
100137fe:	0252      	lsls	r2, r2, #9
10013800:	0a52      	lsrs	r2, r2, #9
10013802:	05c0      	lsls	r0, r0, #23
10013804:	4310      	orrs	r0, r2
10013806:	bd70      	pop	{r4, r5, r6, pc}
10013808:	2b99      	cmp	r3, #153	; 0x99
1001380a:	dc18      	bgt.n	1001383e <__aeabi_ui2f+0x5e>
1001380c:	2299      	movs	r2, #153	; 0x99
1001380e:	1ad2      	subs	r2, r2, r3
10013810:	4094      	lsls	r4, r2
10013812:	4a11      	ldr	r2, [pc, #68]	; (10013858 <__aeabi_ui2f+0x78>)
10013814:	4022      	ands	r2, r4
10013816:	0761      	lsls	r1, r4, #29
10013818:	d004      	beq.n	10013824 <__aeabi_ui2f+0x44>
1001381a:	210f      	movs	r1, #15
1001381c:	400c      	ands	r4, r1
1001381e:	2c04      	cmp	r4, #4
10013820:	d000      	beq.n	10013824 <__aeabi_ui2f+0x44>
10013822:	3204      	adds	r2, #4
10013824:	0151      	lsls	r1, r2, #5
10013826:	d503      	bpl.n	10013830 <__aeabi_ui2f+0x50>
10013828:	4b0b      	ldr	r3, [pc, #44]	; (10013858 <__aeabi_ui2f+0x78>)
1001382a:	401a      	ands	r2, r3
1001382c:	239f      	movs	r3, #159	; 0x9f
1001382e:	1a1b      	subs	r3, r3, r0
10013830:	0192      	lsls	r2, r2, #6
10013832:	0a52      	lsrs	r2, r2, #9
10013834:	b2d8      	uxtb	r0, r3
10013836:	e7e2      	b.n	100137fe <__aeabi_ui2f+0x1e>
10013838:	2000      	movs	r0, #0
1001383a:	2200      	movs	r2, #0
1001383c:	e7df      	b.n	100137fe <__aeabi_ui2f+0x1e>
1001383e:	2205      	movs	r2, #5
10013840:	0025      	movs	r5, r4
10013842:	1a12      	subs	r2, r2, r0
10013844:	21b9      	movs	r1, #185	; 0xb9
10013846:	40d5      	lsrs	r5, r2
10013848:	0022      	movs	r2, r4
1001384a:	1ac9      	subs	r1, r1, r3
1001384c:	408a      	lsls	r2, r1
1001384e:	1e54      	subs	r4, r2, #1
10013850:	41a2      	sbcs	r2, r4
10013852:	002c      	movs	r4, r5
10013854:	4314      	orrs	r4, r2
10013856:	e7dc      	b.n	10013812 <__aeabi_ui2f+0x32>
10013858:	fbffffff 	.word	0xfbffffff

1001385c <__aeabi_dadd>:
1001385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001385e:	4656      	mov	r6, sl
10013860:	465f      	mov	r7, fp
10013862:	464d      	mov	r5, r9
10013864:	4644      	mov	r4, r8
10013866:	b4f0      	push	{r4, r5, r6, r7}
10013868:	000f      	movs	r7, r1
1001386a:	0ffd      	lsrs	r5, r7, #31
1001386c:	46aa      	mov	sl, r5
1001386e:	0309      	lsls	r1, r1, #12
10013870:	007c      	lsls	r4, r7, #1
10013872:	002e      	movs	r6, r5
10013874:	005f      	lsls	r7, r3, #1
10013876:	0f45      	lsrs	r5, r0, #29
10013878:	0a49      	lsrs	r1, r1, #9
1001387a:	0d7f      	lsrs	r7, r7, #21
1001387c:	4329      	orrs	r1, r5
1001387e:	00c5      	lsls	r5, r0, #3
10013880:	0318      	lsls	r0, r3, #12
10013882:	46bc      	mov	ip, r7
10013884:	0a40      	lsrs	r0, r0, #9
10013886:	0f57      	lsrs	r7, r2, #29
10013888:	0d64      	lsrs	r4, r4, #21
1001388a:	0fdb      	lsrs	r3, r3, #31
1001388c:	4338      	orrs	r0, r7
1001388e:	00d2      	lsls	r2, r2, #3
10013890:	459a      	cmp	sl, r3
10013892:	d100      	bne.n	10013896 <__aeabi_dadd+0x3a>
10013894:	e0aa      	b.n	100139ec <__aeabi_dadd+0x190>
10013896:	4666      	mov	r6, ip
10013898:	1ba6      	subs	r6, r4, r6
1001389a:	2e00      	cmp	r6, #0
1001389c:	dc00      	bgt.n	100138a0 <__aeabi_dadd+0x44>
1001389e:	e0ff      	b.n	10013aa0 <__aeabi_dadd+0x244>
100138a0:	4663      	mov	r3, ip
100138a2:	2b00      	cmp	r3, #0
100138a4:	d139      	bne.n	1001391a <__aeabi_dadd+0xbe>
100138a6:	0003      	movs	r3, r0
100138a8:	4313      	orrs	r3, r2
100138aa:	d000      	beq.n	100138ae <__aeabi_dadd+0x52>
100138ac:	e0d9      	b.n	10013a62 <__aeabi_dadd+0x206>
100138ae:	076b      	lsls	r3, r5, #29
100138b0:	d009      	beq.n	100138c6 <__aeabi_dadd+0x6a>
100138b2:	230f      	movs	r3, #15
100138b4:	402b      	ands	r3, r5
100138b6:	2b04      	cmp	r3, #4
100138b8:	d005      	beq.n	100138c6 <__aeabi_dadd+0x6a>
100138ba:	1d2b      	adds	r3, r5, #4
100138bc:	42ab      	cmp	r3, r5
100138be:	41ad      	sbcs	r5, r5
100138c0:	426d      	negs	r5, r5
100138c2:	1949      	adds	r1, r1, r5
100138c4:	001d      	movs	r5, r3
100138c6:	020b      	lsls	r3, r1, #8
100138c8:	d400      	bmi.n	100138cc <__aeabi_dadd+0x70>
100138ca:	e082      	b.n	100139d2 <__aeabi_dadd+0x176>
100138cc:	4bca      	ldr	r3, [pc, #808]	; (10013bf8 <__aeabi_dadd+0x39c>)
100138ce:	3401      	adds	r4, #1
100138d0:	429c      	cmp	r4, r3
100138d2:	d100      	bne.n	100138d6 <__aeabi_dadd+0x7a>
100138d4:	e0fe      	b.n	10013ad4 <__aeabi_dadd+0x278>
100138d6:	000a      	movs	r2, r1
100138d8:	4656      	mov	r6, sl
100138da:	4bc8      	ldr	r3, [pc, #800]	; (10013bfc <__aeabi_dadd+0x3a0>)
100138dc:	08ed      	lsrs	r5, r5, #3
100138de:	401a      	ands	r2, r3
100138e0:	0750      	lsls	r0, r2, #29
100138e2:	0564      	lsls	r4, r4, #21
100138e4:	0252      	lsls	r2, r2, #9
100138e6:	4305      	orrs	r5, r0
100138e8:	0b12      	lsrs	r2, r2, #12
100138ea:	0d64      	lsrs	r4, r4, #21
100138ec:	2100      	movs	r1, #0
100138ee:	0312      	lsls	r2, r2, #12
100138f0:	0d0b      	lsrs	r3, r1, #20
100138f2:	051b      	lsls	r3, r3, #20
100138f4:	0564      	lsls	r4, r4, #21
100138f6:	0b12      	lsrs	r2, r2, #12
100138f8:	431a      	orrs	r2, r3
100138fa:	0863      	lsrs	r3, r4, #1
100138fc:	4cc0      	ldr	r4, [pc, #768]	; (10013c00 <__aeabi_dadd+0x3a4>)
100138fe:	07f6      	lsls	r6, r6, #31
10013900:	4014      	ands	r4, r2
10013902:	431c      	orrs	r4, r3
10013904:	0064      	lsls	r4, r4, #1
10013906:	0864      	lsrs	r4, r4, #1
10013908:	4334      	orrs	r4, r6
1001390a:	0028      	movs	r0, r5
1001390c:	0021      	movs	r1, r4
1001390e:	bc3c      	pop	{r2, r3, r4, r5}
10013910:	4690      	mov	r8, r2
10013912:	4699      	mov	r9, r3
10013914:	46a2      	mov	sl, r4
10013916:	46ab      	mov	fp, r5
10013918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001391a:	4bb7      	ldr	r3, [pc, #732]	; (10013bf8 <__aeabi_dadd+0x39c>)
1001391c:	429c      	cmp	r4, r3
1001391e:	d0c6      	beq.n	100138ae <__aeabi_dadd+0x52>
10013920:	2380      	movs	r3, #128	; 0x80
10013922:	041b      	lsls	r3, r3, #16
10013924:	4318      	orrs	r0, r3
10013926:	2e38      	cmp	r6, #56	; 0x38
10013928:	dd00      	ble.n	1001392c <__aeabi_dadd+0xd0>
1001392a:	e0eb      	b.n	10013b04 <__aeabi_dadd+0x2a8>
1001392c:	2e1f      	cmp	r6, #31
1001392e:	dd00      	ble.n	10013932 <__aeabi_dadd+0xd6>
10013930:	e11e      	b.n	10013b70 <__aeabi_dadd+0x314>
10013932:	2320      	movs	r3, #32
10013934:	1b9b      	subs	r3, r3, r6
10013936:	469c      	mov	ip, r3
10013938:	0003      	movs	r3, r0
1001393a:	4667      	mov	r7, ip
1001393c:	40bb      	lsls	r3, r7
1001393e:	4698      	mov	r8, r3
10013940:	0013      	movs	r3, r2
10013942:	4647      	mov	r7, r8
10013944:	40f3      	lsrs	r3, r6
10013946:	433b      	orrs	r3, r7
10013948:	4667      	mov	r7, ip
1001394a:	40ba      	lsls	r2, r7
1001394c:	1e57      	subs	r7, r2, #1
1001394e:	41ba      	sbcs	r2, r7
10013950:	4313      	orrs	r3, r2
10013952:	0002      	movs	r2, r0
10013954:	40f2      	lsrs	r2, r6
10013956:	1aeb      	subs	r3, r5, r3
10013958:	429d      	cmp	r5, r3
1001395a:	41b6      	sbcs	r6, r6
1001395c:	001d      	movs	r5, r3
1001395e:	1a8a      	subs	r2, r1, r2
10013960:	4276      	negs	r6, r6
10013962:	1b91      	subs	r1, r2, r6
10013964:	020b      	lsls	r3, r1, #8
10013966:	d531      	bpl.n	100139cc <__aeabi_dadd+0x170>
10013968:	024a      	lsls	r2, r1, #9
1001396a:	0a56      	lsrs	r6, r2, #9
1001396c:	2e00      	cmp	r6, #0
1001396e:	d100      	bne.n	10013972 <__aeabi_dadd+0x116>
10013970:	e0b4      	b.n	10013adc <__aeabi_dadd+0x280>
10013972:	0030      	movs	r0, r6
10013974:	f001 fe40 	bl	100155f8 <__clzsi2>
10013978:	0003      	movs	r3, r0
1001397a:	3b08      	subs	r3, #8
1001397c:	2b1f      	cmp	r3, #31
1001397e:	dd00      	ble.n	10013982 <__aeabi_dadd+0x126>
10013980:	e0b5      	b.n	10013aee <__aeabi_dadd+0x292>
10013982:	2220      	movs	r2, #32
10013984:	0029      	movs	r1, r5
10013986:	1ad2      	subs	r2, r2, r3
10013988:	40d1      	lsrs	r1, r2
1001398a:	409e      	lsls	r6, r3
1001398c:	000a      	movs	r2, r1
1001398e:	409d      	lsls	r5, r3
10013990:	4332      	orrs	r2, r6
10013992:	429c      	cmp	r4, r3
10013994:	dd00      	ble.n	10013998 <__aeabi_dadd+0x13c>
10013996:	e0b1      	b.n	10013afc <__aeabi_dadd+0x2a0>
10013998:	1b1c      	subs	r4, r3, r4
1001399a:	1c63      	adds	r3, r4, #1
1001399c:	2b1f      	cmp	r3, #31
1001399e:	dd00      	ble.n	100139a2 <__aeabi_dadd+0x146>
100139a0:	e0d5      	b.n	10013b4e <__aeabi_dadd+0x2f2>
100139a2:	2120      	movs	r1, #32
100139a4:	0014      	movs	r4, r2
100139a6:	0028      	movs	r0, r5
100139a8:	1ac9      	subs	r1, r1, r3
100139aa:	408c      	lsls	r4, r1
100139ac:	40d8      	lsrs	r0, r3
100139ae:	408d      	lsls	r5, r1
100139b0:	4304      	orrs	r4, r0
100139b2:	40da      	lsrs	r2, r3
100139b4:	1e68      	subs	r0, r5, #1
100139b6:	4185      	sbcs	r5, r0
100139b8:	0011      	movs	r1, r2
100139ba:	4325      	orrs	r5, r4
100139bc:	2400      	movs	r4, #0
100139be:	e776      	b.n	100138ae <__aeabi_dadd+0x52>
100139c0:	4641      	mov	r1, r8
100139c2:	4331      	orrs	r1, r6
100139c4:	d100      	bne.n	100139c8 <__aeabi_dadd+0x16c>
100139c6:	e234      	b.n	10013e32 <__aeabi_dadd+0x5d6>
100139c8:	0031      	movs	r1, r6
100139ca:	4645      	mov	r5, r8
100139cc:	076b      	lsls	r3, r5, #29
100139ce:	d000      	beq.n	100139d2 <__aeabi_dadd+0x176>
100139d0:	e76f      	b.n	100138b2 <__aeabi_dadd+0x56>
100139d2:	4656      	mov	r6, sl
100139d4:	0748      	lsls	r0, r1, #29
100139d6:	08ed      	lsrs	r5, r5, #3
100139d8:	08c9      	lsrs	r1, r1, #3
100139da:	4305      	orrs	r5, r0
100139dc:	4b86      	ldr	r3, [pc, #536]	; (10013bf8 <__aeabi_dadd+0x39c>)
100139de:	429c      	cmp	r4, r3
100139e0:	d035      	beq.n	10013a4e <__aeabi_dadd+0x1f2>
100139e2:	030a      	lsls	r2, r1, #12
100139e4:	0564      	lsls	r4, r4, #21
100139e6:	0b12      	lsrs	r2, r2, #12
100139e8:	0d64      	lsrs	r4, r4, #21
100139ea:	e77f      	b.n	100138ec <__aeabi_dadd+0x90>
100139ec:	4663      	mov	r3, ip
100139ee:	1ae3      	subs	r3, r4, r3
100139f0:	469b      	mov	fp, r3
100139f2:	2b00      	cmp	r3, #0
100139f4:	dc00      	bgt.n	100139f8 <__aeabi_dadd+0x19c>
100139f6:	e08b      	b.n	10013b10 <__aeabi_dadd+0x2b4>
100139f8:	4667      	mov	r7, ip
100139fa:	2f00      	cmp	r7, #0
100139fc:	d03c      	beq.n	10013a78 <__aeabi_dadd+0x21c>
100139fe:	4f7e      	ldr	r7, [pc, #504]	; (10013bf8 <__aeabi_dadd+0x39c>)
10013a00:	42bc      	cmp	r4, r7
10013a02:	d100      	bne.n	10013a06 <__aeabi_dadd+0x1aa>
10013a04:	e753      	b.n	100138ae <__aeabi_dadd+0x52>
10013a06:	2780      	movs	r7, #128	; 0x80
10013a08:	043f      	lsls	r7, r7, #16
10013a0a:	4338      	orrs	r0, r7
10013a0c:	465b      	mov	r3, fp
10013a0e:	2b38      	cmp	r3, #56	; 0x38
10013a10:	dc00      	bgt.n	10013a14 <__aeabi_dadd+0x1b8>
10013a12:	e0f7      	b.n	10013c04 <__aeabi_dadd+0x3a8>
10013a14:	4302      	orrs	r2, r0
10013a16:	1e50      	subs	r0, r2, #1
10013a18:	4182      	sbcs	r2, r0
10013a1a:	2000      	movs	r0, #0
10013a1c:	b2d2      	uxtb	r2, r2
10013a1e:	1953      	adds	r3, r2, r5
10013a20:	1842      	adds	r2, r0, r1
10013a22:	42ab      	cmp	r3, r5
10013a24:	4189      	sbcs	r1, r1
10013a26:	001d      	movs	r5, r3
10013a28:	4249      	negs	r1, r1
10013a2a:	1889      	adds	r1, r1, r2
10013a2c:	020b      	lsls	r3, r1, #8
10013a2e:	d5cd      	bpl.n	100139cc <__aeabi_dadd+0x170>
10013a30:	4b71      	ldr	r3, [pc, #452]	; (10013bf8 <__aeabi_dadd+0x39c>)
10013a32:	3401      	adds	r4, #1
10013a34:	429c      	cmp	r4, r3
10013a36:	d100      	bne.n	10013a3a <__aeabi_dadd+0x1de>
10013a38:	e13d      	b.n	10013cb6 <__aeabi_dadd+0x45a>
10013a3a:	2001      	movs	r0, #1
10013a3c:	4a6f      	ldr	r2, [pc, #444]	; (10013bfc <__aeabi_dadd+0x3a0>)
10013a3e:	086b      	lsrs	r3, r5, #1
10013a40:	400a      	ands	r2, r1
10013a42:	4028      	ands	r0, r5
10013a44:	4318      	orrs	r0, r3
10013a46:	07d5      	lsls	r5, r2, #31
10013a48:	4305      	orrs	r5, r0
10013a4a:	0851      	lsrs	r1, r2, #1
10013a4c:	e72f      	b.n	100138ae <__aeabi_dadd+0x52>
10013a4e:	002b      	movs	r3, r5
10013a50:	430b      	orrs	r3, r1
10013a52:	d100      	bne.n	10013a56 <__aeabi_dadd+0x1fa>
10013a54:	e1cb      	b.n	10013dee <__aeabi_dadd+0x592>
10013a56:	2380      	movs	r3, #128	; 0x80
10013a58:	031b      	lsls	r3, r3, #12
10013a5a:	430b      	orrs	r3, r1
10013a5c:	031a      	lsls	r2, r3, #12
10013a5e:	0b12      	lsrs	r2, r2, #12
10013a60:	e744      	b.n	100138ec <__aeabi_dadd+0x90>
10013a62:	3e01      	subs	r6, #1
10013a64:	2e00      	cmp	r6, #0
10013a66:	d16d      	bne.n	10013b44 <__aeabi_dadd+0x2e8>
10013a68:	1aae      	subs	r6, r5, r2
10013a6a:	42b5      	cmp	r5, r6
10013a6c:	419b      	sbcs	r3, r3
10013a6e:	1a09      	subs	r1, r1, r0
10013a70:	425b      	negs	r3, r3
10013a72:	1ac9      	subs	r1, r1, r3
10013a74:	0035      	movs	r5, r6
10013a76:	e775      	b.n	10013964 <__aeabi_dadd+0x108>
10013a78:	0007      	movs	r7, r0
10013a7a:	4317      	orrs	r7, r2
10013a7c:	d100      	bne.n	10013a80 <__aeabi_dadd+0x224>
10013a7e:	e716      	b.n	100138ae <__aeabi_dadd+0x52>
10013a80:	2301      	movs	r3, #1
10013a82:	425b      	negs	r3, r3
10013a84:	469c      	mov	ip, r3
10013a86:	44e3      	add	fp, ip
10013a88:	465b      	mov	r3, fp
10013a8a:	2b00      	cmp	r3, #0
10013a8c:	d000      	beq.n	10013a90 <__aeabi_dadd+0x234>
10013a8e:	e0e0      	b.n	10013c52 <__aeabi_dadd+0x3f6>
10013a90:	18aa      	adds	r2, r5, r2
10013a92:	42aa      	cmp	r2, r5
10013a94:	419b      	sbcs	r3, r3
10013a96:	1809      	adds	r1, r1, r0
10013a98:	425b      	negs	r3, r3
10013a9a:	1859      	adds	r1, r3, r1
10013a9c:	0015      	movs	r5, r2
10013a9e:	e7c5      	b.n	10013a2c <__aeabi_dadd+0x1d0>
10013aa0:	2e00      	cmp	r6, #0
10013aa2:	d175      	bne.n	10013b90 <__aeabi_dadd+0x334>
10013aa4:	1c66      	adds	r6, r4, #1
10013aa6:	0576      	lsls	r6, r6, #21
10013aa8:	0d76      	lsrs	r6, r6, #21
10013aaa:	2e01      	cmp	r6, #1
10013aac:	dc00      	bgt.n	10013ab0 <__aeabi_dadd+0x254>
10013aae:	e0f3      	b.n	10013c98 <__aeabi_dadd+0x43c>
10013ab0:	1aae      	subs	r6, r5, r2
10013ab2:	46b0      	mov	r8, r6
10013ab4:	4545      	cmp	r5, r8
10013ab6:	41bf      	sbcs	r7, r7
10013ab8:	1a0e      	subs	r6, r1, r0
10013aba:	427f      	negs	r7, r7
10013abc:	1bf6      	subs	r6, r6, r7
10013abe:	0237      	lsls	r7, r6, #8
10013ac0:	d400      	bmi.n	10013ac4 <__aeabi_dadd+0x268>
10013ac2:	e08f      	b.n	10013be4 <__aeabi_dadd+0x388>
10013ac4:	1b55      	subs	r5, r2, r5
10013ac6:	42aa      	cmp	r2, r5
10013ac8:	41b6      	sbcs	r6, r6
10013aca:	1a41      	subs	r1, r0, r1
10013acc:	4276      	negs	r6, r6
10013ace:	1b8e      	subs	r6, r1, r6
10013ad0:	469a      	mov	sl, r3
10013ad2:	e74b      	b.n	1001396c <__aeabi_dadd+0x110>
10013ad4:	4656      	mov	r6, sl
10013ad6:	2200      	movs	r2, #0
10013ad8:	2500      	movs	r5, #0
10013ada:	e707      	b.n	100138ec <__aeabi_dadd+0x90>
10013adc:	0028      	movs	r0, r5
10013ade:	f001 fd8b 	bl	100155f8 <__clzsi2>
10013ae2:	3020      	adds	r0, #32
10013ae4:	0003      	movs	r3, r0
10013ae6:	3b08      	subs	r3, #8
10013ae8:	2b1f      	cmp	r3, #31
10013aea:	dc00      	bgt.n	10013aee <__aeabi_dadd+0x292>
10013aec:	e749      	b.n	10013982 <__aeabi_dadd+0x126>
10013aee:	002a      	movs	r2, r5
10013af0:	3828      	subs	r0, #40	; 0x28
10013af2:	4082      	lsls	r2, r0
10013af4:	2500      	movs	r5, #0
10013af6:	429c      	cmp	r4, r3
10013af8:	dc00      	bgt.n	10013afc <__aeabi_dadd+0x2a0>
10013afa:	e74d      	b.n	10013998 <__aeabi_dadd+0x13c>
10013afc:	493f      	ldr	r1, [pc, #252]	; (10013bfc <__aeabi_dadd+0x3a0>)
10013afe:	1ae4      	subs	r4, r4, r3
10013b00:	4011      	ands	r1, r2
10013b02:	e6d4      	b.n	100138ae <__aeabi_dadd+0x52>
10013b04:	4302      	orrs	r2, r0
10013b06:	1e50      	subs	r0, r2, #1
10013b08:	4182      	sbcs	r2, r0
10013b0a:	b2d3      	uxtb	r3, r2
10013b0c:	2200      	movs	r2, #0
10013b0e:	e722      	b.n	10013956 <__aeabi_dadd+0xfa>
10013b10:	2b00      	cmp	r3, #0
10013b12:	d000      	beq.n	10013b16 <__aeabi_dadd+0x2ba>
10013b14:	e0f3      	b.n	10013cfe <__aeabi_dadd+0x4a2>
10013b16:	1c63      	adds	r3, r4, #1
10013b18:	469c      	mov	ip, r3
10013b1a:	055b      	lsls	r3, r3, #21
10013b1c:	0d5b      	lsrs	r3, r3, #21
10013b1e:	2b01      	cmp	r3, #1
10013b20:	dc00      	bgt.n	10013b24 <__aeabi_dadd+0x2c8>
10013b22:	e09f      	b.n	10013c64 <__aeabi_dadd+0x408>
10013b24:	4b34      	ldr	r3, [pc, #208]	; (10013bf8 <__aeabi_dadd+0x39c>)
10013b26:	459c      	cmp	ip, r3
10013b28:	d100      	bne.n	10013b2c <__aeabi_dadd+0x2d0>
10013b2a:	e0c3      	b.n	10013cb4 <__aeabi_dadd+0x458>
10013b2c:	18aa      	adds	r2, r5, r2
10013b2e:	1809      	adds	r1, r1, r0
10013b30:	42aa      	cmp	r2, r5
10013b32:	4180      	sbcs	r0, r0
10013b34:	4240      	negs	r0, r0
10013b36:	1841      	adds	r1, r0, r1
10013b38:	07cd      	lsls	r5, r1, #31
10013b3a:	0852      	lsrs	r2, r2, #1
10013b3c:	4315      	orrs	r5, r2
10013b3e:	0849      	lsrs	r1, r1, #1
10013b40:	4664      	mov	r4, ip
10013b42:	e6b4      	b.n	100138ae <__aeabi_dadd+0x52>
10013b44:	4b2c      	ldr	r3, [pc, #176]	; (10013bf8 <__aeabi_dadd+0x39c>)
10013b46:	429c      	cmp	r4, r3
10013b48:	d000      	beq.n	10013b4c <__aeabi_dadd+0x2f0>
10013b4a:	e6ec      	b.n	10013926 <__aeabi_dadd+0xca>
10013b4c:	e6af      	b.n	100138ae <__aeabi_dadd+0x52>
10013b4e:	0011      	movs	r1, r2
10013b50:	3c1f      	subs	r4, #31
10013b52:	40e1      	lsrs	r1, r4
10013b54:	000c      	movs	r4, r1
10013b56:	2b20      	cmp	r3, #32
10013b58:	d100      	bne.n	10013b5c <__aeabi_dadd+0x300>
10013b5a:	e07f      	b.n	10013c5c <__aeabi_dadd+0x400>
10013b5c:	2140      	movs	r1, #64	; 0x40
10013b5e:	1acb      	subs	r3, r1, r3
10013b60:	409a      	lsls	r2, r3
10013b62:	4315      	orrs	r5, r2
10013b64:	1e6a      	subs	r2, r5, #1
10013b66:	4195      	sbcs	r5, r2
10013b68:	2100      	movs	r1, #0
10013b6a:	4325      	orrs	r5, r4
10013b6c:	2400      	movs	r4, #0
10013b6e:	e72d      	b.n	100139cc <__aeabi_dadd+0x170>
10013b70:	0033      	movs	r3, r6
10013b72:	0007      	movs	r7, r0
10013b74:	3b20      	subs	r3, #32
10013b76:	40df      	lsrs	r7, r3
10013b78:	003b      	movs	r3, r7
10013b7a:	2e20      	cmp	r6, #32
10013b7c:	d070      	beq.n	10013c60 <__aeabi_dadd+0x404>
10013b7e:	2740      	movs	r7, #64	; 0x40
10013b80:	1bbe      	subs	r6, r7, r6
10013b82:	40b0      	lsls	r0, r6
10013b84:	4302      	orrs	r2, r0
10013b86:	1e50      	subs	r0, r2, #1
10013b88:	4182      	sbcs	r2, r0
10013b8a:	4313      	orrs	r3, r2
10013b8c:	2200      	movs	r2, #0
10013b8e:	e6e2      	b.n	10013956 <__aeabi_dadd+0xfa>
10013b90:	2c00      	cmp	r4, #0
10013b92:	d04f      	beq.n	10013c34 <__aeabi_dadd+0x3d8>
10013b94:	4c18      	ldr	r4, [pc, #96]	; (10013bf8 <__aeabi_dadd+0x39c>)
10013b96:	45a4      	cmp	ip, r4
10013b98:	d100      	bne.n	10013b9c <__aeabi_dadd+0x340>
10013b9a:	e0ab      	b.n	10013cf4 <__aeabi_dadd+0x498>
10013b9c:	2480      	movs	r4, #128	; 0x80
10013b9e:	0424      	lsls	r4, r4, #16
10013ba0:	4276      	negs	r6, r6
10013ba2:	4321      	orrs	r1, r4
10013ba4:	2e38      	cmp	r6, #56	; 0x38
10013ba6:	dd00      	ble.n	10013baa <__aeabi_dadd+0x34e>
10013ba8:	e0df      	b.n	10013d6a <__aeabi_dadd+0x50e>
10013baa:	2e1f      	cmp	r6, #31
10013bac:	dd00      	ble.n	10013bb0 <__aeabi_dadd+0x354>
10013bae:	e143      	b.n	10013e38 <__aeabi_dadd+0x5dc>
10013bb0:	2720      	movs	r7, #32
10013bb2:	1bbc      	subs	r4, r7, r6
10013bb4:	46a1      	mov	r9, r4
10013bb6:	000c      	movs	r4, r1
10013bb8:	464f      	mov	r7, r9
10013bba:	40bc      	lsls	r4, r7
10013bbc:	46a0      	mov	r8, r4
10013bbe:	002c      	movs	r4, r5
10013bc0:	4647      	mov	r7, r8
10013bc2:	40f4      	lsrs	r4, r6
10013bc4:	433c      	orrs	r4, r7
10013bc6:	464f      	mov	r7, r9
10013bc8:	40bd      	lsls	r5, r7
10013bca:	1e6f      	subs	r7, r5, #1
10013bcc:	41bd      	sbcs	r5, r7
10013bce:	40f1      	lsrs	r1, r6
10013bd0:	432c      	orrs	r4, r5
10013bd2:	1b15      	subs	r5, r2, r4
10013bd4:	42aa      	cmp	r2, r5
10013bd6:	4192      	sbcs	r2, r2
10013bd8:	1a41      	subs	r1, r0, r1
10013bda:	4252      	negs	r2, r2
10013bdc:	1a89      	subs	r1, r1, r2
10013bde:	4664      	mov	r4, ip
10013be0:	469a      	mov	sl, r3
10013be2:	e6bf      	b.n	10013964 <__aeabi_dadd+0x108>
10013be4:	4641      	mov	r1, r8
10013be6:	4645      	mov	r5, r8
10013be8:	4331      	orrs	r1, r6
10013bea:	d000      	beq.n	10013bee <__aeabi_dadd+0x392>
10013bec:	e6be      	b.n	1001396c <__aeabi_dadd+0x110>
10013bee:	2600      	movs	r6, #0
10013bf0:	2400      	movs	r4, #0
10013bf2:	2500      	movs	r5, #0
10013bf4:	e6f2      	b.n	100139dc <__aeabi_dadd+0x180>
10013bf6:	46c0      	nop			; (mov r8, r8)
10013bf8:	000007ff 	.word	0x000007ff
10013bfc:	ff7fffff 	.word	0xff7fffff
10013c00:	800fffff 	.word	0x800fffff
10013c04:	2b1f      	cmp	r3, #31
10013c06:	dc59      	bgt.n	10013cbc <__aeabi_dadd+0x460>
10013c08:	2720      	movs	r7, #32
10013c0a:	1aff      	subs	r7, r7, r3
10013c0c:	46bc      	mov	ip, r7
10013c0e:	0007      	movs	r7, r0
10013c10:	4663      	mov	r3, ip
10013c12:	409f      	lsls	r7, r3
10013c14:	465b      	mov	r3, fp
10013c16:	46b9      	mov	r9, r7
10013c18:	0017      	movs	r7, r2
10013c1a:	40df      	lsrs	r7, r3
10013c1c:	46b8      	mov	r8, r7
10013c1e:	464f      	mov	r7, r9
10013c20:	4643      	mov	r3, r8
10013c22:	431f      	orrs	r7, r3
10013c24:	4663      	mov	r3, ip
10013c26:	409a      	lsls	r2, r3
10013c28:	1e53      	subs	r3, r2, #1
10013c2a:	419a      	sbcs	r2, r3
10013c2c:	465b      	mov	r3, fp
10013c2e:	433a      	orrs	r2, r7
10013c30:	40d8      	lsrs	r0, r3
10013c32:	e6f4      	b.n	10013a1e <__aeabi_dadd+0x1c2>
10013c34:	000c      	movs	r4, r1
10013c36:	432c      	orrs	r4, r5
10013c38:	d05c      	beq.n	10013cf4 <__aeabi_dadd+0x498>
10013c3a:	43f6      	mvns	r6, r6
10013c3c:	2e00      	cmp	r6, #0
10013c3e:	d155      	bne.n	10013cec <__aeabi_dadd+0x490>
10013c40:	1b55      	subs	r5, r2, r5
10013c42:	42aa      	cmp	r2, r5
10013c44:	41a4      	sbcs	r4, r4
10013c46:	1a41      	subs	r1, r0, r1
10013c48:	4264      	negs	r4, r4
10013c4a:	1b09      	subs	r1, r1, r4
10013c4c:	469a      	mov	sl, r3
10013c4e:	4664      	mov	r4, ip
10013c50:	e688      	b.n	10013964 <__aeabi_dadd+0x108>
10013c52:	4f96      	ldr	r7, [pc, #600]	; (10013eac <__aeabi_dadd+0x650>)
10013c54:	42bc      	cmp	r4, r7
10013c56:	d000      	beq.n	10013c5a <__aeabi_dadd+0x3fe>
10013c58:	e6d8      	b.n	10013a0c <__aeabi_dadd+0x1b0>
10013c5a:	e628      	b.n	100138ae <__aeabi_dadd+0x52>
10013c5c:	2200      	movs	r2, #0
10013c5e:	e780      	b.n	10013b62 <__aeabi_dadd+0x306>
10013c60:	2000      	movs	r0, #0
10013c62:	e78f      	b.n	10013b84 <__aeabi_dadd+0x328>
10013c64:	000b      	movs	r3, r1
10013c66:	432b      	orrs	r3, r5
10013c68:	2c00      	cmp	r4, #0
10013c6a:	d000      	beq.n	10013c6e <__aeabi_dadd+0x412>
10013c6c:	e0c2      	b.n	10013df4 <__aeabi_dadd+0x598>
10013c6e:	2b00      	cmp	r3, #0
10013c70:	d100      	bne.n	10013c74 <__aeabi_dadd+0x418>
10013c72:	e101      	b.n	10013e78 <__aeabi_dadd+0x61c>
10013c74:	0003      	movs	r3, r0
10013c76:	4313      	orrs	r3, r2
10013c78:	d100      	bne.n	10013c7c <__aeabi_dadd+0x420>
10013c7a:	e618      	b.n	100138ae <__aeabi_dadd+0x52>
10013c7c:	18ab      	adds	r3, r5, r2
10013c7e:	42ab      	cmp	r3, r5
10013c80:	41b6      	sbcs	r6, r6
10013c82:	1809      	adds	r1, r1, r0
10013c84:	4276      	negs	r6, r6
10013c86:	1871      	adds	r1, r6, r1
10013c88:	020a      	lsls	r2, r1, #8
10013c8a:	d400      	bmi.n	10013c8e <__aeabi_dadd+0x432>
10013c8c:	e109      	b.n	10013ea2 <__aeabi_dadd+0x646>
10013c8e:	4a88      	ldr	r2, [pc, #544]	; (10013eb0 <__aeabi_dadd+0x654>)
10013c90:	001d      	movs	r5, r3
10013c92:	4011      	ands	r1, r2
10013c94:	4664      	mov	r4, ip
10013c96:	e60a      	b.n	100138ae <__aeabi_dadd+0x52>
10013c98:	2c00      	cmp	r4, #0
10013c9a:	d15b      	bne.n	10013d54 <__aeabi_dadd+0x4f8>
10013c9c:	000e      	movs	r6, r1
10013c9e:	432e      	orrs	r6, r5
10013ca0:	d000      	beq.n	10013ca4 <__aeabi_dadd+0x448>
10013ca2:	e08a      	b.n	10013dba <__aeabi_dadd+0x55e>
10013ca4:	0001      	movs	r1, r0
10013ca6:	4311      	orrs	r1, r2
10013ca8:	d100      	bne.n	10013cac <__aeabi_dadd+0x450>
10013caa:	e0c2      	b.n	10013e32 <__aeabi_dadd+0x5d6>
10013cac:	0001      	movs	r1, r0
10013cae:	0015      	movs	r5, r2
10013cb0:	469a      	mov	sl, r3
10013cb2:	e5fc      	b.n	100138ae <__aeabi_dadd+0x52>
10013cb4:	4664      	mov	r4, ip
10013cb6:	2100      	movs	r1, #0
10013cb8:	2500      	movs	r5, #0
10013cba:	e68f      	b.n	100139dc <__aeabi_dadd+0x180>
10013cbc:	2320      	movs	r3, #32
10013cbe:	425b      	negs	r3, r3
10013cc0:	469c      	mov	ip, r3
10013cc2:	44dc      	add	ip, fp
10013cc4:	4663      	mov	r3, ip
10013cc6:	0007      	movs	r7, r0
10013cc8:	40df      	lsrs	r7, r3
10013cca:	465b      	mov	r3, fp
10013ccc:	46bc      	mov	ip, r7
10013cce:	2b20      	cmp	r3, #32
10013cd0:	d100      	bne.n	10013cd4 <__aeabi_dadd+0x478>
10013cd2:	e0ac      	b.n	10013e2e <__aeabi_dadd+0x5d2>
10013cd4:	2340      	movs	r3, #64	; 0x40
10013cd6:	465f      	mov	r7, fp
10013cd8:	1bdb      	subs	r3, r3, r7
10013cda:	4098      	lsls	r0, r3
10013cdc:	4302      	orrs	r2, r0
10013cde:	1e50      	subs	r0, r2, #1
10013ce0:	4182      	sbcs	r2, r0
10013ce2:	4663      	mov	r3, ip
10013ce4:	4313      	orrs	r3, r2
10013ce6:	001a      	movs	r2, r3
10013ce8:	2000      	movs	r0, #0
10013cea:	e698      	b.n	10013a1e <__aeabi_dadd+0x1c2>
10013cec:	4c6f      	ldr	r4, [pc, #444]	; (10013eac <__aeabi_dadd+0x650>)
10013cee:	45a4      	cmp	ip, r4
10013cf0:	d000      	beq.n	10013cf4 <__aeabi_dadd+0x498>
10013cf2:	e757      	b.n	10013ba4 <__aeabi_dadd+0x348>
10013cf4:	0001      	movs	r1, r0
10013cf6:	0015      	movs	r5, r2
10013cf8:	4664      	mov	r4, ip
10013cfa:	469a      	mov	sl, r3
10013cfc:	e5d7      	b.n	100138ae <__aeabi_dadd+0x52>
10013cfe:	2c00      	cmp	r4, #0
10013d00:	d139      	bne.n	10013d76 <__aeabi_dadd+0x51a>
10013d02:	000c      	movs	r4, r1
10013d04:	432c      	orrs	r4, r5
10013d06:	d06e      	beq.n	10013de6 <__aeabi_dadd+0x58a>
10013d08:	43db      	mvns	r3, r3
10013d0a:	2b00      	cmp	r3, #0
10013d0c:	d01a      	beq.n	10013d44 <__aeabi_dadd+0x4e8>
10013d0e:	4c67      	ldr	r4, [pc, #412]	; (10013eac <__aeabi_dadd+0x650>)
10013d10:	45a4      	cmp	ip, r4
10013d12:	d068      	beq.n	10013de6 <__aeabi_dadd+0x58a>
10013d14:	2b38      	cmp	r3, #56	; 0x38
10013d16:	dd00      	ble.n	10013d1a <__aeabi_dadd+0x4be>
10013d18:	e0a4      	b.n	10013e64 <__aeabi_dadd+0x608>
10013d1a:	2b1f      	cmp	r3, #31
10013d1c:	dd00      	ble.n	10013d20 <__aeabi_dadd+0x4c4>
10013d1e:	e0ae      	b.n	10013e7e <__aeabi_dadd+0x622>
10013d20:	2420      	movs	r4, #32
10013d22:	000f      	movs	r7, r1
10013d24:	1ae4      	subs	r4, r4, r3
10013d26:	40a7      	lsls	r7, r4
10013d28:	46b9      	mov	r9, r7
10013d2a:	002f      	movs	r7, r5
10013d2c:	40df      	lsrs	r7, r3
10013d2e:	46b8      	mov	r8, r7
10013d30:	46a3      	mov	fp, r4
10013d32:	464f      	mov	r7, r9
10013d34:	4644      	mov	r4, r8
10013d36:	4327      	orrs	r7, r4
10013d38:	465c      	mov	r4, fp
10013d3a:	40a5      	lsls	r5, r4
10013d3c:	1e6c      	subs	r4, r5, #1
10013d3e:	41a5      	sbcs	r5, r4
10013d40:	40d9      	lsrs	r1, r3
10013d42:	433d      	orrs	r5, r7
10013d44:	18ad      	adds	r5, r5, r2
10013d46:	4295      	cmp	r5, r2
10013d48:	419b      	sbcs	r3, r3
10013d4a:	1809      	adds	r1, r1, r0
10013d4c:	425b      	negs	r3, r3
10013d4e:	1859      	adds	r1, r3, r1
10013d50:	4664      	mov	r4, ip
10013d52:	e66b      	b.n	10013a2c <__aeabi_dadd+0x1d0>
10013d54:	000c      	movs	r4, r1
10013d56:	432c      	orrs	r4, r5
10013d58:	d115      	bne.n	10013d86 <__aeabi_dadd+0x52a>
10013d5a:	0001      	movs	r1, r0
10013d5c:	4311      	orrs	r1, r2
10013d5e:	d07b      	beq.n	10013e58 <__aeabi_dadd+0x5fc>
10013d60:	0001      	movs	r1, r0
10013d62:	0015      	movs	r5, r2
10013d64:	469a      	mov	sl, r3
10013d66:	4c51      	ldr	r4, [pc, #324]	; (10013eac <__aeabi_dadd+0x650>)
10013d68:	e5a1      	b.n	100138ae <__aeabi_dadd+0x52>
10013d6a:	430d      	orrs	r5, r1
10013d6c:	1e69      	subs	r1, r5, #1
10013d6e:	418d      	sbcs	r5, r1
10013d70:	2100      	movs	r1, #0
10013d72:	b2ec      	uxtb	r4, r5
10013d74:	e72d      	b.n	10013bd2 <__aeabi_dadd+0x376>
10013d76:	4c4d      	ldr	r4, [pc, #308]	; (10013eac <__aeabi_dadd+0x650>)
10013d78:	45a4      	cmp	ip, r4
10013d7a:	d034      	beq.n	10013de6 <__aeabi_dadd+0x58a>
10013d7c:	2480      	movs	r4, #128	; 0x80
10013d7e:	0424      	lsls	r4, r4, #16
10013d80:	425b      	negs	r3, r3
10013d82:	4321      	orrs	r1, r4
10013d84:	e7c6      	b.n	10013d14 <__aeabi_dadd+0x4b8>
10013d86:	0004      	movs	r4, r0
10013d88:	4314      	orrs	r4, r2
10013d8a:	d04e      	beq.n	10013e2a <__aeabi_dadd+0x5ce>
10013d8c:	08ed      	lsrs	r5, r5, #3
10013d8e:	074c      	lsls	r4, r1, #29
10013d90:	432c      	orrs	r4, r5
10013d92:	2580      	movs	r5, #128	; 0x80
10013d94:	08c9      	lsrs	r1, r1, #3
10013d96:	032d      	lsls	r5, r5, #12
10013d98:	4229      	tst	r1, r5
10013d9a:	d008      	beq.n	10013dae <__aeabi_dadd+0x552>
10013d9c:	08c6      	lsrs	r6, r0, #3
10013d9e:	422e      	tst	r6, r5
10013da0:	d105      	bne.n	10013dae <__aeabi_dadd+0x552>
10013da2:	08d2      	lsrs	r2, r2, #3
10013da4:	0741      	lsls	r1, r0, #29
10013da6:	4311      	orrs	r1, r2
10013da8:	000c      	movs	r4, r1
10013daa:	469a      	mov	sl, r3
10013dac:	0031      	movs	r1, r6
10013dae:	0f62      	lsrs	r2, r4, #29
10013db0:	00c9      	lsls	r1, r1, #3
10013db2:	00e5      	lsls	r5, r4, #3
10013db4:	4311      	orrs	r1, r2
10013db6:	4c3d      	ldr	r4, [pc, #244]	; (10013eac <__aeabi_dadd+0x650>)
10013db8:	e579      	b.n	100138ae <__aeabi_dadd+0x52>
10013dba:	0006      	movs	r6, r0
10013dbc:	4316      	orrs	r6, r2
10013dbe:	d100      	bne.n	10013dc2 <__aeabi_dadd+0x566>
10013dc0:	e575      	b.n	100138ae <__aeabi_dadd+0x52>
10013dc2:	1aae      	subs	r6, r5, r2
10013dc4:	46b0      	mov	r8, r6
10013dc6:	4545      	cmp	r5, r8
10013dc8:	41bf      	sbcs	r7, r7
10013dca:	1a0e      	subs	r6, r1, r0
10013dcc:	427f      	negs	r7, r7
10013dce:	1bf6      	subs	r6, r6, r7
10013dd0:	0237      	lsls	r7, r6, #8
10013dd2:	d400      	bmi.n	10013dd6 <__aeabi_dadd+0x57a>
10013dd4:	e5f4      	b.n	100139c0 <__aeabi_dadd+0x164>
10013dd6:	1b55      	subs	r5, r2, r5
10013dd8:	42aa      	cmp	r2, r5
10013dda:	41b6      	sbcs	r6, r6
10013ddc:	1a41      	subs	r1, r0, r1
10013dde:	4276      	negs	r6, r6
10013de0:	1b89      	subs	r1, r1, r6
10013de2:	469a      	mov	sl, r3
10013de4:	e563      	b.n	100138ae <__aeabi_dadd+0x52>
10013de6:	0001      	movs	r1, r0
10013de8:	0015      	movs	r5, r2
10013dea:	4664      	mov	r4, ip
10013dec:	e55f      	b.n	100138ae <__aeabi_dadd+0x52>
10013dee:	2200      	movs	r2, #0
10013df0:	2500      	movs	r5, #0
10013df2:	e57b      	b.n	100138ec <__aeabi_dadd+0x90>
10013df4:	2b00      	cmp	r3, #0
10013df6:	d03b      	beq.n	10013e70 <__aeabi_dadd+0x614>
10013df8:	0003      	movs	r3, r0
10013dfa:	4313      	orrs	r3, r2
10013dfc:	d015      	beq.n	10013e2a <__aeabi_dadd+0x5ce>
10013dfe:	08ed      	lsrs	r5, r5, #3
10013e00:	074b      	lsls	r3, r1, #29
10013e02:	432b      	orrs	r3, r5
10013e04:	2580      	movs	r5, #128	; 0x80
10013e06:	08c9      	lsrs	r1, r1, #3
10013e08:	032d      	lsls	r5, r5, #12
10013e0a:	4229      	tst	r1, r5
10013e0c:	d007      	beq.n	10013e1e <__aeabi_dadd+0x5c2>
10013e0e:	08c4      	lsrs	r4, r0, #3
10013e10:	422c      	tst	r4, r5
10013e12:	d104      	bne.n	10013e1e <__aeabi_dadd+0x5c2>
10013e14:	0741      	lsls	r1, r0, #29
10013e16:	000b      	movs	r3, r1
10013e18:	0021      	movs	r1, r4
10013e1a:	08d2      	lsrs	r2, r2, #3
10013e1c:	4313      	orrs	r3, r2
10013e1e:	00c9      	lsls	r1, r1, #3
10013e20:	0f5a      	lsrs	r2, r3, #29
10013e22:	4311      	orrs	r1, r2
10013e24:	00dd      	lsls	r5, r3, #3
10013e26:	4c21      	ldr	r4, [pc, #132]	; (10013eac <__aeabi_dadd+0x650>)
10013e28:	e541      	b.n	100138ae <__aeabi_dadd+0x52>
10013e2a:	4c20      	ldr	r4, [pc, #128]	; (10013eac <__aeabi_dadd+0x650>)
10013e2c:	e53f      	b.n	100138ae <__aeabi_dadd+0x52>
10013e2e:	2000      	movs	r0, #0
10013e30:	e754      	b.n	10013cdc <__aeabi_dadd+0x480>
10013e32:	2600      	movs	r6, #0
10013e34:	2500      	movs	r5, #0
10013e36:	e5d1      	b.n	100139dc <__aeabi_dadd+0x180>
10013e38:	0034      	movs	r4, r6
10013e3a:	000f      	movs	r7, r1
10013e3c:	3c20      	subs	r4, #32
10013e3e:	40e7      	lsrs	r7, r4
10013e40:	003c      	movs	r4, r7
10013e42:	2e20      	cmp	r6, #32
10013e44:	d02b      	beq.n	10013e9e <__aeabi_dadd+0x642>
10013e46:	2740      	movs	r7, #64	; 0x40
10013e48:	1bbe      	subs	r6, r7, r6
10013e4a:	40b1      	lsls	r1, r6
10013e4c:	430d      	orrs	r5, r1
10013e4e:	1e69      	subs	r1, r5, #1
10013e50:	418d      	sbcs	r5, r1
10013e52:	2100      	movs	r1, #0
10013e54:	432c      	orrs	r4, r5
10013e56:	e6bc      	b.n	10013bd2 <__aeabi_dadd+0x376>
10013e58:	2180      	movs	r1, #128	; 0x80
10013e5a:	2600      	movs	r6, #0
10013e5c:	0309      	lsls	r1, r1, #12
10013e5e:	4c13      	ldr	r4, [pc, #76]	; (10013eac <__aeabi_dadd+0x650>)
10013e60:	2500      	movs	r5, #0
10013e62:	e5bb      	b.n	100139dc <__aeabi_dadd+0x180>
10013e64:	430d      	orrs	r5, r1
10013e66:	1e69      	subs	r1, r5, #1
10013e68:	418d      	sbcs	r5, r1
10013e6a:	2100      	movs	r1, #0
10013e6c:	b2ed      	uxtb	r5, r5
10013e6e:	e769      	b.n	10013d44 <__aeabi_dadd+0x4e8>
10013e70:	0001      	movs	r1, r0
10013e72:	0015      	movs	r5, r2
10013e74:	4c0d      	ldr	r4, [pc, #52]	; (10013eac <__aeabi_dadd+0x650>)
10013e76:	e51a      	b.n	100138ae <__aeabi_dadd+0x52>
10013e78:	0001      	movs	r1, r0
10013e7a:	0015      	movs	r5, r2
10013e7c:	e517      	b.n	100138ae <__aeabi_dadd+0x52>
10013e7e:	001c      	movs	r4, r3
10013e80:	000f      	movs	r7, r1
10013e82:	3c20      	subs	r4, #32
10013e84:	40e7      	lsrs	r7, r4
10013e86:	003c      	movs	r4, r7
10013e88:	2b20      	cmp	r3, #32
10013e8a:	d00c      	beq.n	10013ea6 <__aeabi_dadd+0x64a>
10013e8c:	2740      	movs	r7, #64	; 0x40
10013e8e:	1afb      	subs	r3, r7, r3
10013e90:	4099      	lsls	r1, r3
10013e92:	430d      	orrs	r5, r1
10013e94:	1e69      	subs	r1, r5, #1
10013e96:	418d      	sbcs	r5, r1
10013e98:	2100      	movs	r1, #0
10013e9a:	4325      	orrs	r5, r4
10013e9c:	e752      	b.n	10013d44 <__aeabi_dadd+0x4e8>
10013e9e:	2100      	movs	r1, #0
10013ea0:	e7d4      	b.n	10013e4c <__aeabi_dadd+0x5f0>
10013ea2:	001d      	movs	r5, r3
10013ea4:	e592      	b.n	100139cc <__aeabi_dadd+0x170>
10013ea6:	2100      	movs	r1, #0
10013ea8:	e7f3      	b.n	10013e92 <__aeabi_dadd+0x636>
10013eaa:	46c0      	nop			; (mov r8, r8)
10013eac:	000007ff 	.word	0x000007ff
10013eb0:	ff7fffff 	.word	0xff7fffff

10013eb4 <__aeabi_ddiv>:
10013eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10013eb6:	4656      	mov	r6, sl
10013eb8:	464d      	mov	r5, r9
10013eba:	4644      	mov	r4, r8
10013ebc:	465f      	mov	r7, fp
10013ebe:	b4f0      	push	{r4, r5, r6, r7}
10013ec0:	001d      	movs	r5, r3
10013ec2:	030e      	lsls	r6, r1, #12
10013ec4:	004c      	lsls	r4, r1, #1
10013ec6:	0fcb      	lsrs	r3, r1, #31
10013ec8:	b087      	sub	sp, #28
10013eca:	0007      	movs	r7, r0
10013ecc:	4692      	mov	sl, r2
10013ece:	4681      	mov	r9, r0
10013ed0:	0b36      	lsrs	r6, r6, #12
10013ed2:	0d64      	lsrs	r4, r4, #21
10013ed4:	4698      	mov	r8, r3
10013ed6:	d06a      	beq.n	10013fae <__aeabi_ddiv+0xfa>
10013ed8:	4b6d      	ldr	r3, [pc, #436]	; (10014090 <__aeabi_ddiv+0x1dc>)
10013eda:	429c      	cmp	r4, r3
10013edc:	d035      	beq.n	10013f4a <__aeabi_ddiv+0x96>
10013ede:	2280      	movs	r2, #128	; 0x80
10013ee0:	0f43      	lsrs	r3, r0, #29
10013ee2:	0412      	lsls	r2, r2, #16
10013ee4:	4313      	orrs	r3, r2
10013ee6:	00f6      	lsls	r6, r6, #3
10013ee8:	431e      	orrs	r6, r3
10013eea:	00c3      	lsls	r3, r0, #3
10013eec:	4699      	mov	r9, r3
10013eee:	4b69      	ldr	r3, [pc, #420]	; (10014094 <__aeabi_ddiv+0x1e0>)
10013ef0:	2700      	movs	r7, #0
10013ef2:	469c      	mov	ip, r3
10013ef4:	2300      	movs	r3, #0
10013ef6:	4464      	add	r4, ip
10013ef8:	9302      	str	r3, [sp, #8]
10013efa:	032b      	lsls	r3, r5, #12
10013efc:	0068      	lsls	r0, r5, #1
10013efe:	0b1b      	lsrs	r3, r3, #12
10013f00:	0fed      	lsrs	r5, r5, #31
10013f02:	4651      	mov	r1, sl
10013f04:	469b      	mov	fp, r3
10013f06:	0d40      	lsrs	r0, r0, #21
10013f08:	9500      	str	r5, [sp, #0]
10013f0a:	d100      	bne.n	10013f0e <__aeabi_ddiv+0x5a>
10013f0c:	e078      	b.n	10014000 <__aeabi_ddiv+0x14c>
10013f0e:	4b60      	ldr	r3, [pc, #384]	; (10014090 <__aeabi_ddiv+0x1dc>)
10013f10:	4298      	cmp	r0, r3
10013f12:	d06c      	beq.n	10013fee <__aeabi_ddiv+0x13a>
10013f14:	465b      	mov	r3, fp
10013f16:	00da      	lsls	r2, r3, #3
10013f18:	0f4b      	lsrs	r3, r1, #29
10013f1a:	2180      	movs	r1, #128	; 0x80
10013f1c:	0409      	lsls	r1, r1, #16
10013f1e:	430b      	orrs	r3, r1
10013f20:	4313      	orrs	r3, r2
10013f22:	469b      	mov	fp, r3
10013f24:	4653      	mov	r3, sl
10013f26:	00d9      	lsls	r1, r3, #3
10013f28:	4b5a      	ldr	r3, [pc, #360]	; (10014094 <__aeabi_ddiv+0x1e0>)
10013f2a:	469c      	mov	ip, r3
10013f2c:	2300      	movs	r3, #0
10013f2e:	4460      	add	r0, ip
10013f30:	4642      	mov	r2, r8
10013f32:	1a20      	subs	r0, r4, r0
10013f34:	406a      	eors	r2, r5
10013f36:	4692      	mov	sl, r2
10013f38:	9001      	str	r0, [sp, #4]
10013f3a:	431f      	orrs	r7, r3
10013f3c:	2f0f      	cmp	r7, #15
10013f3e:	d900      	bls.n	10013f42 <__aeabi_ddiv+0x8e>
10013f40:	e0b0      	b.n	100140a4 <__aeabi_ddiv+0x1f0>
10013f42:	4855      	ldr	r0, [pc, #340]	; (10014098 <__aeabi_ddiv+0x1e4>)
10013f44:	00bf      	lsls	r7, r7, #2
10013f46:	59c0      	ldr	r0, [r0, r7]
10013f48:	4687      	mov	pc, r0
10013f4a:	4337      	orrs	r7, r6
10013f4c:	d000      	beq.n	10013f50 <__aeabi_ddiv+0x9c>
10013f4e:	e088      	b.n	10014062 <__aeabi_ddiv+0x1ae>
10013f50:	2300      	movs	r3, #0
10013f52:	4699      	mov	r9, r3
10013f54:	3302      	adds	r3, #2
10013f56:	2708      	movs	r7, #8
10013f58:	2600      	movs	r6, #0
10013f5a:	9302      	str	r3, [sp, #8]
10013f5c:	e7cd      	b.n	10013efa <__aeabi_ddiv+0x46>
10013f5e:	4643      	mov	r3, r8
10013f60:	46b3      	mov	fp, r6
10013f62:	4649      	mov	r1, r9
10013f64:	9300      	str	r3, [sp, #0]
10013f66:	9b02      	ldr	r3, [sp, #8]
10013f68:	9a00      	ldr	r2, [sp, #0]
10013f6a:	4692      	mov	sl, r2
10013f6c:	2b02      	cmp	r3, #2
10013f6e:	d000      	beq.n	10013f72 <__aeabi_ddiv+0xbe>
10013f70:	e1bf      	b.n	100142f2 <__aeabi_ddiv+0x43e>
10013f72:	2100      	movs	r1, #0
10013f74:	4653      	mov	r3, sl
10013f76:	2201      	movs	r2, #1
10013f78:	2600      	movs	r6, #0
10013f7a:	4689      	mov	r9, r1
10013f7c:	401a      	ands	r2, r3
10013f7e:	4b44      	ldr	r3, [pc, #272]	; (10014090 <__aeabi_ddiv+0x1dc>)
10013f80:	2100      	movs	r1, #0
10013f82:	0336      	lsls	r6, r6, #12
10013f84:	0d0c      	lsrs	r4, r1, #20
10013f86:	0524      	lsls	r4, r4, #20
10013f88:	0b36      	lsrs	r6, r6, #12
10013f8a:	4326      	orrs	r6, r4
10013f8c:	4c43      	ldr	r4, [pc, #268]	; (1001409c <__aeabi_ddiv+0x1e8>)
10013f8e:	051b      	lsls	r3, r3, #20
10013f90:	4026      	ands	r6, r4
10013f92:	431e      	orrs	r6, r3
10013f94:	0076      	lsls	r6, r6, #1
10013f96:	07d2      	lsls	r2, r2, #31
10013f98:	0876      	lsrs	r6, r6, #1
10013f9a:	4316      	orrs	r6, r2
10013f9c:	4648      	mov	r0, r9
10013f9e:	0031      	movs	r1, r6
10013fa0:	b007      	add	sp, #28
10013fa2:	bc3c      	pop	{r2, r3, r4, r5}
10013fa4:	4690      	mov	r8, r2
10013fa6:	4699      	mov	r9, r3
10013fa8:	46a2      	mov	sl, r4
10013faa:	46ab      	mov	fp, r5
10013fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013fae:	0033      	movs	r3, r6
10013fb0:	4303      	orrs	r3, r0
10013fb2:	d04f      	beq.n	10014054 <__aeabi_ddiv+0x1a0>
10013fb4:	2e00      	cmp	r6, #0
10013fb6:	d100      	bne.n	10013fba <__aeabi_ddiv+0x106>
10013fb8:	e1bc      	b.n	10014334 <__aeabi_ddiv+0x480>
10013fba:	0030      	movs	r0, r6
10013fbc:	f001 fb1c 	bl	100155f8 <__clzsi2>
10013fc0:	0003      	movs	r3, r0
10013fc2:	3b0b      	subs	r3, #11
10013fc4:	2b1c      	cmp	r3, #28
10013fc6:	dd00      	ble.n	10013fca <__aeabi_ddiv+0x116>
10013fc8:	e1ad      	b.n	10014326 <__aeabi_ddiv+0x472>
10013fca:	221d      	movs	r2, #29
10013fcc:	0001      	movs	r1, r0
10013fce:	1ad3      	subs	r3, r2, r3
10013fd0:	3908      	subs	r1, #8
10013fd2:	003a      	movs	r2, r7
10013fd4:	408f      	lsls	r7, r1
10013fd6:	408e      	lsls	r6, r1
10013fd8:	40da      	lsrs	r2, r3
10013fda:	46b9      	mov	r9, r7
10013fdc:	4316      	orrs	r6, r2
10013fde:	4b30      	ldr	r3, [pc, #192]	; (100140a0 <__aeabi_ddiv+0x1ec>)
10013fe0:	2700      	movs	r7, #0
10013fe2:	469c      	mov	ip, r3
10013fe4:	2300      	movs	r3, #0
10013fe6:	4460      	add	r0, ip
10013fe8:	4244      	negs	r4, r0
10013fea:	9302      	str	r3, [sp, #8]
10013fec:	e785      	b.n	10013efa <__aeabi_ddiv+0x46>
10013fee:	4653      	mov	r3, sl
10013ff0:	465a      	mov	r2, fp
10013ff2:	4313      	orrs	r3, r2
10013ff4:	d12c      	bne.n	10014050 <__aeabi_ddiv+0x19c>
10013ff6:	2300      	movs	r3, #0
10013ff8:	2100      	movs	r1, #0
10013ffa:	469b      	mov	fp, r3
10013ffc:	3302      	adds	r3, #2
10013ffe:	e797      	b.n	10013f30 <__aeabi_ddiv+0x7c>
10014000:	430b      	orrs	r3, r1
10014002:	d020      	beq.n	10014046 <__aeabi_ddiv+0x192>
10014004:	465b      	mov	r3, fp
10014006:	2b00      	cmp	r3, #0
10014008:	d100      	bne.n	1001400c <__aeabi_ddiv+0x158>
1001400a:	e19e      	b.n	1001434a <__aeabi_ddiv+0x496>
1001400c:	4658      	mov	r0, fp
1001400e:	f001 faf3 	bl	100155f8 <__clzsi2>
10014012:	0003      	movs	r3, r0
10014014:	3b0b      	subs	r3, #11
10014016:	2b1c      	cmp	r3, #28
10014018:	dd00      	ble.n	1001401c <__aeabi_ddiv+0x168>
1001401a:	e18f      	b.n	1001433c <__aeabi_ddiv+0x488>
1001401c:	0002      	movs	r2, r0
1001401e:	4659      	mov	r1, fp
10014020:	3a08      	subs	r2, #8
10014022:	4091      	lsls	r1, r2
10014024:	468b      	mov	fp, r1
10014026:	211d      	movs	r1, #29
10014028:	1acb      	subs	r3, r1, r3
1001402a:	4651      	mov	r1, sl
1001402c:	40d9      	lsrs	r1, r3
1001402e:	000b      	movs	r3, r1
10014030:	4659      	mov	r1, fp
10014032:	430b      	orrs	r3, r1
10014034:	4651      	mov	r1, sl
10014036:	469b      	mov	fp, r3
10014038:	4091      	lsls	r1, r2
1001403a:	4b19      	ldr	r3, [pc, #100]	; (100140a0 <__aeabi_ddiv+0x1ec>)
1001403c:	469c      	mov	ip, r3
1001403e:	4460      	add	r0, ip
10014040:	4240      	negs	r0, r0
10014042:	2300      	movs	r3, #0
10014044:	e774      	b.n	10013f30 <__aeabi_ddiv+0x7c>
10014046:	2300      	movs	r3, #0
10014048:	2100      	movs	r1, #0
1001404a:	469b      	mov	fp, r3
1001404c:	3301      	adds	r3, #1
1001404e:	e76f      	b.n	10013f30 <__aeabi_ddiv+0x7c>
10014050:	2303      	movs	r3, #3
10014052:	e76d      	b.n	10013f30 <__aeabi_ddiv+0x7c>
10014054:	2300      	movs	r3, #0
10014056:	4699      	mov	r9, r3
10014058:	3301      	adds	r3, #1
1001405a:	2704      	movs	r7, #4
1001405c:	2600      	movs	r6, #0
1001405e:	9302      	str	r3, [sp, #8]
10014060:	e74b      	b.n	10013efa <__aeabi_ddiv+0x46>
10014062:	2303      	movs	r3, #3
10014064:	270c      	movs	r7, #12
10014066:	9302      	str	r3, [sp, #8]
10014068:	e747      	b.n	10013efa <__aeabi_ddiv+0x46>
1001406a:	2201      	movs	r2, #1
1001406c:	1ad5      	subs	r5, r2, r3
1001406e:	2d38      	cmp	r5, #56	; 0x38
10014070:	dc00      	bgt.n	10014074 <__aeabi_ddiv+0x1c0>
10014072:	e1b0      	b.n	100143d6 <__aeabi_ddiv+0x522>
10014074:	4653      	mov	r3, sl
10014076:	401a      	ands	r2, r3
10014078:	2100      	movs	r1, #0
1001407a:	2300      	movs	r3, #0
1001407c:	2600      	movs	r6, #0
1001407e:	4689      	mov	r9, r1
10014080:	e77e      	b.n	10013f80 <__aeabi_ddiv+0xcc>
10014082:	2300      	movs	r3, #0
10014084:	2680      	movs	r6, #128	; 0x80
10014086:	4699      	mov	r9, r3
10014088:	2200      	movs	r2, #0
1001408a:	0336      	lsls	r6, r6, #12
1001408c:	4b00      	ldr	r3, [pc, #0]	; (10014090 <__aeabi_ddiv+0x1dc>)
1001408e:	e777      	b.n	10013f80 <__aeabi_ddiv+0xcc>
10014090:	000007ff 	.word	0x000007ff
10014094:	fffffc01 	.word	0xfffffc01
10014098:	100181f8 	.word	0x100181f8
1001409c:	800fffff 	.word	0x800fffff
100140a0:	000003f3 	.word	0x000003f3
100140a4:	455e      	cmp	r6, fp
100140a6:	d900      	bls.n	100140aa <__aeabi_ddiv+0x1f6>
100140a8:	e172      	b.n	10014390 <__aeabi_ddiv+0x4dc>
100140aa:	d100      	bne.n	100140ae <__aeabi_ddiv+0x1fa>
100140ac:	e16d      	b.n	1001438a <__aeabi_ddiv+0x4d6>
100140ae:	9b01      	ldr	r3, [sp, #4]
100140b0:	464d      	mov	r5, r9
100140b2:	3b01      	subs	r3, #1
100140b4:	9301      	str	r3, [sp, #4]
100140b6:	2300      	movs	r3, #0
100140b8:	0034      	movs	r4, r6
100140ba:	9302      	str	r3, [sp, #8]
100140bc:	465b      	mov	r3, fp
100140be:	021e      	lsls	r6, r3, #8
100140c0:	0e0b      	lsrs	r3, r1, #24
100140c2:	431e      	orrs	r6, r3
100140c4:	020b      	lsls	r3, r1, #8
100140c6:	9303      	str	r3, [sp, #12]
100140c8:	0c33      	lsrs	r3, r6, #16
100140ca:	4699      	mov	r9, r3
100140cc:	0433      	lsls	r3, r6, #16
100140ce:	0c1b      	lsrs	r3, r3, #16
100140d0:	4649      	mov	r1, r9
100140d2:	0020      	movs	r0, r4
100140d4:	9300      	str	r3, [sp, #0]
100140d6:	f7fe fc65 	bl	100129a4 <__aeabi_uidiv>
100140da:	9b00      	ldr	r3, [sp, #0]
100140dc:	0037      	movs	r7, r6
100140de:	4343      	muls	r3, r0
100140e0:	0006      	movs	r6, r0
100140e2:	4649      	mov	r1, r9
100140e4:	0020      	movs	r0, r4
100140e6:	4698      	mov	r8, r3
100140e8:	f7fe fce2 	bl	10012ab0 <__aeabi_uidivmod>
100140ec:	0c2c      	lsrs	r4, r5, #16
100140ee:	0409      	lsls	r1, r1, #16
100140f0:	430c      	orrs	r4, r1
100140f2:	45a0      	cmp	r8, r4
100140f4:	d909      	bls.n	1001410a <__aeabi_ddiv+0x256>
100140f6:	19e4      	adds	r4, r4, r7
100140f8:	1e73      	subs	r3, r6, #1
100140fa:	42a7      	cmp	r7, r4
100140fc:	d900      	bls.n	10014100 <__aeabi_ddiv+0x24c>
100140fe:	e15c      	b.n	100143ba <__aeabi_ddiv+0x506>
10014100:	45a0      	cmp	r8, r4
10014102:	d800      	bhi.n	10014106 <__aeabi_ddiv+0x252>
10014104:	e159      	b.n	100143ba <__aeabi_ddiv+0x506>
10014106:	3e02      	subs	r6, #2
10014108:	19e4      	adds	r4, r4, r7
1001410a:	4643      	mov	r3, r8
1001410c:	1ae4      	subs	r4, r4, r3
1001410e:	4649      	mov	r1, r9
10014110:	0020      	movs	r0, r4
10014112:	f7fe fc47 	bl	100129a4 <__aeabi_uidiv>
10014116:	0003      	movs	r3, r0
10014118:	9a00      	ldr	r2, [sp, #0]
1001411a:	4680      	mov	r8, r0
1001411c:	4353      	muls	r3, r2
1001411e:	4649      	mov	r1, r9
10014120:	0020      	movs	r0, r4
10014122:	469b      	mov	fp, r3
10014124:	f7fe fcc4 	bl	10012ab0 <__aeabi_uidivmod>
10014128:	042a      	lsls	r2, r5, #16
1001412a:	0409      	lsls	r1, r1, #16
1001412c:	0c12      	lsrs	r2, r2, #16
1001412e:	430a      	orrs	r2, r1
10014130:	4593      	cmp	fp, r2
10014132:	d90d      	bls.n	10014150 <__aeabi_ddiv+0x29c>
10014134:	4643      	mov	r3, r8
10014136:	19d2      	adds	r2, r2, r7
10014138:	3b01      	subs	r3, #1
1001413a:	4297      	cmp	r7, r2
1001413c:	d900      	bls.n	10014140 <__aeabi_ddiv+0x28c>
1001413e:	e13a      	b.n	100143b6 <__aeabi_ddiv+0x502>
10014140:	4593      	cmp	fp, r2
10014142:	d800      	bhi.n	10014146 <__aeabi_ddiv+0x292>
10014144:	e137      	b.n	100143b6 <__aeabi_ddiv+0x502>
10014146:	2302      	movs	r3, #2
10014148:	425b      	negs	r3, r3
1001414a:	469c      	mov	ip, r3
1001414c:	19d2      	adds	r2, r2, r7
1001414e:	44e0      	add	r8, ip
10014150:	465b      	mov	r3, fp
10014152:	1ad2      	subs	r2, r2, r3
10014154:	4643      	mov	r3, r8
10014156:	0436      	lsls	r6, r6, #16
10014158:	4333      	orrs	r3, r6
1001415a:	469b      	mov	fp, r3
1001415c:	9903      	ldr	r1, [sp, #12]
1001415e:	0c18      	lsrs	r0, r3, #16
10014160:	0c0b      	lsrs	r3, r1, #16
10014162:	001d      	movs	r5, r3
10014164:	9305      	str	r3, [sp, #20]
10014166:	0409      	lsls	r1, r1, #16
10014168:	465b      	mov	r3, fp
1001416a:	0c09      	lsrs	r1, r1, #16
1001416c:	000c      	movs	r4, r1
1001416e:	041b      	lsls	r3, r3, #16
10014170:	0c1b      	lsrs	r3, r3, #16
10014172:	4344      	muls	r4, r0
10014174:	9104      	str	r1, [sp, #16]
10014176:	4359      	muls	r1, r3
10014178:	436b      	muls	r3, r5
1001417a:	4368      	muls	r0, r5
1001417c:	191b      	adds	r3, r3, r4
1001417e:	0c0d      	lsrs	r5, r1, #16
10014180:	18eb      	adds	r3, r5, r3
10014182:	429c      	cmp	r4, r3
10014184:	d903      	bls.n	1001418e <__aeabi_ddiv+0x2da>
10014186:	2480      	movs	r4, #128	; 0x80
10014188:	0264      	lsls	r4, r4, #9
1001418a:	46a4      	mov	ip, r4
1001418c:	4460      	add	r0, ip
1001418e:	0c1c      	lsrs	r4, r3, #16
10014190:	0409      	lsls	r1, r1, #16
10014192:	041b      	lsls	r3, r3, #16
10014194:	0c09      	lsrs	r1, r1, #16
10014196:	1820      	adds	r0, r4, r0
10014198:	185d      	adds	r5, r3, r1
1001419a:	4282      	cmp	r2, r0
1001419c:	d200      	bcs.n	100141a0 <__aeabi_ddiv+0x2ec>
1001419e:	e0de      	b.n	1001435e <__aeabi_ddiv+0x4aa>
100141a0:	d100      	bne.n	100141a4 <__aeabi_ddiv+0x2f0>
100141a2:	e0d7      	b.n	10014354 <__aeabi_ddiv+0x4a0>
100141a4:	1a16      	subs	r6, r2, r0
100141a6:	9b02      	ldr	r3, [sp, #8]
100141a8:	469c      	mov	ip, r3
100141aa:	1b5d      	subs	r5, r3, r5
100141ac:	45ac      	cmp	ip, r5
100141ae:	419b      	sbcs	r3, r3
100141b0:	425b      	negs	r3, r3
100141b2:	1af6      	subs	r6, r6, r3
100141b4:	42b7      	cmp	r7, r6
100141b6:	d100      	bne.n	100141ba <__aeabi_ddiv+0x306>
100141b8:	e106      	b.n	100143c8 <__aeabi_ddiv+0x514>
100141ba:	4649      	mov	r1, r9
100141bc:	0030      	movs	r0, r6
100141be:	f7fe fbf1 	bl	100129a4 <__aeabi_uidiv>
100141c2:	9b00      	ldr	r3, [sp, #0]
100141c4:	0004      	movs	r4, r0
100141c6:	4343      	muls	r3, r0
100141c8:	4649      	mov	r1, r9
100141ca:	0030      	movs	r0, r6
100141cc:	4698      	mov	r8, r3
100141ce:	f7fe fc6f 	bl	10012ab0 <__aeabi_uidivmod>
100141d2:	0c2e      	lsrs	r6, r5, #16
100141d4:	0409      	lsls	r1, r1, #16
100141d6:	430e      	orrs	r6, r1
100141d8:	45b0      	cmp	r8, r6
100141da:	d909      	bls.n	100141f0 <__aeabi_ddiv+0x33c>
100141dc:	19f6      	adds	r6, r6, r7
100141de:	1e63      	subs	r3, r4, #1
100141e0:	42b7      	cmp	r7, r6
100141e2:	d900      	bls.n	100141e6 <__aeabi_ddiv+0x332>
100141e4:	e0f3      	b.n	100143ce <__aeabi_ddiv+0x51a>
100141e6:	45b0      	cmp	r8, r6
100141e8:	d800      	bhi.n	100141ec <__aeabi_ddiv+0x338>
100141ea:	e0f0      	b.n	100143ce <__aeabi_ddiv+0x51a>
100141ec:	3c02      	subs	r4, #2
100141ee:	19f6      	adds	r6, r6, r7
100141f0:	4643      	mov	r3, r8
100141f2:	1af3      	subs	r3, r6, r3
100141f4:	4649      	mov	r1, r9
100141f6:	0018      	movs	r0, r3
100141f8:	9302      	str	r3, [sp, #8]
100141fa:	f7fe fbd3 	bl	100129a4 <__aeabi_uidiv>
100141fe:	9b00      	ldr	r3, [sp, #0]
10014200:	0006      	movs	r6, r0
10014202:	4343      	muls	r3, r0
10014204:	4649      	mov	r1, r9
10014206:	9802      	ldr	r0, [sp, #8]
10014208:	4698      	mov	r8, r3
1001420a:	f7fe fc51 	bl	10012ab0 <__aeabi_uidivmod>
1001420e:	042d      	lsls	r5, r5, #16
10014210:	0409      	lsls	r1, r1, #16
10014212:	0c2d      	lsrs	r5, r5, #16
10014214:	430d      	orrs	r5, r1
10014216:	45a8      	cmp	r8, r5
10014218:	d909      	bls.n	1001422e <__aeabi_ddiv+0x37a>
1001421a:	19ed      	adds	r5, r5, r7
1001421c:	1e73      	subs	r3, r6, #1
1001421e:	42af      	cmp	r7, r5
10014220:	d900      	bls.n	10014224 <__aeabi_ddiv+0x370>
10014222:	e0d6      	b.n	100143d2 <__aeabi_ddiv+0x51e>
10014224:	45a8      	cmp	r8, r5
10014226:	d800      	bhi.n	1001422a <__aeabi_ddiv+0x376>
10014228:	e0d3      	b.n	100143d2 <__aeabi_ddiv+0x51e>
1001422a:	3e02      	subs	r6, #2
1001422c:	19ed      	adds	r5, r5, r7
1001422e:	0424      	lsls	r4, r4, #16
10014230:	0021      	movs	r1, r4
10014232:	4643      	mov	r3, r8
10014234:	4331      	orrs	r1, r6
10014236:	9e04      	ldr	r6, [sp, #16]
10014238:	9a05      	ldr	r2, [sp, #20]
1001423a:	0030      	movs	r0, r6
1001423c:	1aed      	subs	r5, r5, r3
1001423e:	040b      	lsls	r3, r1, #16
10014240:	0c0c      	lsrs	r4, r1, #16
10014242:	0c1b      	lsrs	r3, r3, #16
10014244:	4358      	muls	r0, r3
10014246:	4366      	muls	r6, r4
10014248:	4353      	muls	r3, r2
1001424a:	4354      	muls	r4, r2
1001424c:	199a      	adds	r2, r3, r6
1001424e:	0c03      	lsrs	r3, r0, #16
10014250:	189b      	adds	r3, r3, r2
10014252:	429e      	cmp	r6, r3
10014254:	d903      	bls.n	1001425e <__aeabi_ddiv+0x3aa>
10014256:	2280      	movs	r2, #128	; 0x80
10014258:	0252      	lsls	r2, r2, #9
1001425a:	4694      	mov	ip, r2
1001425c:	4464      	add	r4, ip
1001425e:	0c1a      	lsrs	r2, r3, #16
10014260:	0400      	lsls	r0, r0, #16
10014262:	041b      	lsls	r3, r3, #16
10014264:	0c00      	lsrs	r0, r0, #16
10014266:	1914      	adds	r4, r2, r4
10014268:	181b      	adds	r3, r3, r0
1001426a:	42a5      	cmp	r5, r4
1001426c:	d350      	bcc.n	10014310 <__aeabi_ddiv+0x45c>
1001426e:	d04d      	beq.n	1001430c <__aeabi_ddiv+0x458>
10014270:	2301      	movs	r3, #1
10014272:	4319      	orrs	r1, r3
10014274:	4a96      	ldr	r2, [pc, #600]	; (100144d0 <__aeabi_ddiv+0x61c>)
10014276:	9b01      	ldr	r3, [sp, #4]
10014278:	4694      	mov	ip, r2
1001427a:	4463      	add	r3, ip
1001427c:	2b00      	cmp	r3, #0
1001427e:	dc00      	bgt.n	10014282 <__aeabi_ddiv+0x3ce>
10014280:	e6f3      	b.n	1001406a <__aeabi_ddiv+0x1b6>
10014282:	074a      	lsls	r2, r1, #29
10014284:	d009      	beq.n	1001429a <__aeabi_ddiv+0x3e6>
10014286:	220f      	movs	r2, #15
10014288:	400a      	ands	r2, r1
1001428a:	2a04      	cmp	r2, #4
1001428c:	d005      	beq.n	1001429a <__aeabi_ddiv+0x3e6>
1001428e:	1d0a      	adds	r2, r1, #4
10014290:	428a      	cmp	r2, r1
10014292:	4189      	sbcs	r1, r1
10014294:	4249      	negs	r1, r1
10014296:	448b      	add	fp, r1
10014298:	0011      	movs	r1, r2
1001429a:	465a      	mov	r2, fp
1001429c:	01d2      	lsls	r2, r2, #7
1001429e:	d508      	bpl.n	100142b2 <__aeabi_ddiv+0x3fe>
100142a0:	465a      	mov	r2, fp
100142a2:	4b8c      	ldr	r3, [pc, #560]	; (100144d4 <__aeabi_ddiv+0x620>)
100142a4:	401a      	ands	r2, r3
100142a6:	4693      	mov	fp, r2
100142a8:	2280      	movs	r2, #128	; 0x80
100142aa:	00d2      	lsls	r2, r2, #3
100142ac:	4694      	mov	ip, r2
100142ae:	9b01      	ldr	r3, [sp, #4]
100142b0:	4463      	add	r3, ip
100142b2:	4a89      	ldr	r2, [pc, #548]	; (100144d8 <__aeabi_ddiv+0x624>)
100142b4:	4293      	cmp	r3, r2
100142b6:	dd00      	ble.n	100142ba <__aeabi_ddiv+0x406>
100142b8:	e65b      	b.n	10013f72 <__aeabi_ddiv+0xbe>
100142ba:	465a      	mov	r2, fp
100142bc:	08c9      	lsrs	r1, r1, #3
100142be:	0750      	lsls	r0, r2, #29
100142c0:	4308      	orrs	r0, r1
100142c2:	0256      	lsls	r6, r2, #9
100142c4:	4651      	mov	r1, sl
100142c6:	2201      	movs	r2, #1
100142c8:	055b      	lsls	r3, r3, #21
100142ca:	4681      	mov	r9, r0
100142cc:	0b36      	lsrs	r6, r6, #12
100142ce:	0d5b      	lsrs	r3, r3, #21
100142d0:	400a      	ands	r2, r1
100142d2:	e655      	b.n	10013f80 <__aeabi_ddiv+0xcc>
100142d4:	2380      	movs	r3, #128	; 0x80
100142d6:	031b      	lsls	r3, r3, #12
100142d8:	421e      	tst	r6, r3
100142da:	d011      	beq.n	10014300 <__aeabi_ddiv+0x44c>
100142dc:	465a      	mov	r2, fp
100142de:	421a      	tst	r2, r3
100142e0:	d10e      	bne.n	10014300 <__aeabi_ddiv+0x44c>
100142e2:	465e      	mov	r6, fp
100142e4:	431e      	orrs	r6, r3
100142e6:	0336      	lsls	r6, r6, #12
100142e8:	0b36      	lsrs	r6, r6, #12
100142ea:	002a      	movs	r2, r5
100142ec:	4689      	mov	r9, r1
100142ee:	4b7b      	ldr	r3, [pc, #492]	; (100144dc <__aeabi_ddiv+0x628>)
100142f0:	e646      	b.n	10013f80 <__aeabi_ddiv+0xcc>
100142f2:	2b03      	cmp	r3, #3
100142f4:	d100      	bne.n	100142f8 <__aeabi_ddiv+0x444>
100142f6:	e0e1      	b.n	100144bc <__aeabi_ddiv+0x608>
100142f8:	2b01      	cmp	r3, #1
100142fa:	d1bb      	bne.n	10014274 <__aeabi_ddiv+0x3c0>
100142fc:	401a      	ands	r2, r3
100142fe:	e6bb      	b.n	10014078 <__aeabi_ddiv+0x1c4>
10014300:	431e      	orrs	r6, r3
10014302:	0336      	lsls	r6, r6, #12
10014304:	0b36      	lsrs	r6, r6, #12
10014306:	4642      	mov	r2, r8
10014308:	4b74      	ldr	r3, [pc, #464]	; (100144dc <__aeabi_ddiv+0x628>)
1001430a:	e639      	b.n	10013f80 <__aeabi_ddiv+0xcc>
1001430c:	2b00      	cmp	r3, #0
1001430e:	d0b1      	beq.n	10014274 <__aeabi_ddiv+0x3c0>
10014310:	197d      	adds	r5, r7, r5
10014312:	1e4a      	subs	r2, r1, #1
10014314:	42af      	cmp	r7, r5
10014316:	d952      	bls.n	100143be <__aeabi_ddiv+0x50a>
10014318:	0011      	movs	r1, r2
1001431a:	42a5      	cmp	r5, r4
1001431c:	d1a8      	bne.n	10014270 <__aeabi_ddiv+0x3bc>
1001431e:	9a03      	ldr	r2, [sp, #12]
10014320:	429a      	cmp	r2, r3
10014322:	d1a5      	bne.n	10014270 <__aeabi_ddiv+0x3bc>
10014324:	e7a6      	b.n	10014274 <__aeabi_ddiv+0x3c0>
10014326:	0003      	movs	r3, r0
10014328:	003e      	movs	r6, r7
1001432a:	3b28      	subs	r3, #40	; 0x28
1001432c:	409e      	lsls	r6, r3
1001432e:	2300      	movs	r3, #0
10014330:	4699      	mov	r9, r3
10014332:	e654      	b.n	10013fde <__aeabi_ddiv+0x12a>
10014334:	f001 f960 	bl	100155f8 <__clzsi2>
10014338:	3020      	adds	r0, #32
1001433a:	e641      	b.n	10013fc0 <__aeabi_ddiv+0x10c>
1001433c:	0003      	movs	r3, r0
1001433e:	4652      	mov	r2, sl
10014340:	3b28      	subs	r3, #40	; 0x28
10014342:	409a      	lsls	r2, r3
10014344:	2100      	movs	r1, #0
10014346:	4693      	mov	fp, r2
10014348:	e677      	b.n	1001403a <__aeabi_ddiv+0x186>
1001434a:	4650      	mov	r0, sl
1001434c:	f001 f954 	bl	100155f8 <__clzsi2>
10014350:	3020      	adds	r0, #32
10014352:	e65e      	b.n	10014012 <__aeabi_ddiv+0x15e>
10014354:	9b02      	ldr	r3, [sp, #8]
10014356:	2600      	movs	r6, #0
10014358:	42ab      	cmp	r3, r5
1001435a:	d300      	bcc.n	1001435e <__aeabi_ddiv+0x4aa>
1001435c:	e723      	b.n	100141a6 <__aeabi_ddiv+0x2f2>
1001435e:	9e03      	ldr	r6, [sp, #12]
10014360:	9902      	ldr	r1, [sp, #8]
10014362:	46b4      	mov	ip, r6
10014364:	4461      	add	r1, ip
10014366:	4688      	mov	r8, r1
10014368:	45b0      	cmp	r8, r6
1001436a:	41b6      	sbcs	r6, r6
1001436c:	465b      	mov	r3, fp
1001436e:	4276      	negs	r6, r6
10014370:	19f6      	adds	r6, r6, r7
10014372:	18b2      	adds	r2, r6, r2
10014374:	3b01      	subs	r3, #1
10014376:	9102      	str	r1, [sp, #8]
10014378:	4297      	cmp	r7, r2
1001437a:	d213      	bcs.n	100143a4 <__aeabi_ddiv+0x4f0>
1001437c:	4290      	cmp	r0, r2
1001437e:	d84f      	bhi.n	10014420 <__aeabi_ddiv+0x56c>
10014380:	d100      	bne.n	10014384 <__aeabi_ddiv+0x4d0>
10014382:	e08e      	b.n	100144a2 <__aeabi_ddiv+0x5ee>
10014384:	1a16      	subs	r6, r2, r0
10014386:	469b      	mov	fp, r3
10014388:	e70d      	b.n	100141a6 <__aeabi_ddiv+0x2f2>
1001438a:	4589      	cmp	r9, r1
1001438c:	d200      	bcs.n	10014390 <__aeabi_ddiv+0x4dc>
1001438e:	e68e      	b.n	100140ae <__aeabi_ddiv+0x1fa>
10014390:	0874      	lsrs	r4, r6, #1
10014392:	464b      	mov	r3, r9
10014394:	07f6      	lsls	r6, r6, #31
10014396:	0035      	movs	r5, r6
10014398:	085b      	lsrs	r3, r3, #1
1001439a:	431d      	orrs	r5, r3
1001439c:	464b      	mov	r3, r9
1001439e:	07db      	lsls	r3, r3, #31
100143a0:	9302      	str	r3, [sp, #8]
100143a2:	e68b      	b.n	100140bc <__aeabi_ddiv+0x208>
100143a4:	4297      	cmp	r7, r2
100143a6:	d1ed      	bne.n	10014384 <__aeabi_ddiv+0x4d0>
100143a8:	9903      	ldr	r1, [sp, #12]
100143aa:	9c02      	ldr	r4, [sp, #8]
100143ac:	42a1      	cmp	r1, r4
100143ae:	d9e5      	bls.n	1001437c <__aeabi_ddiv+0x4c8>
100143b0:	1a3e      	subs	r6, r7, r0
100143b2:	469b      	mov	fp, r3
100143b4:	e6f7      	b.n	100141a6 <__aeabi_ddiv+0x2f2>
100143b6:	4698      	mov	r8, r3
100143b8:	e6ca      	b.n	10014150 <__aeabi_ddiv+0x29c>
100143ba:	001e      	movs	r6, r3
100143bc:	e6a5      	b.n	1001410a <__aeabi_ddiv+0x256>
100143be:	42ac      	cmp	r4, r5
100143c0:	d83e      	bhi.n	10014440 <__aeabi_ddiv+0x58c>
100143c2:	d074      	beq.n	100144ae <__aeabi_ddiv+0x5fa>
100143c4:	0011      	movs	r1, r2
100143c6:	e753      	b.n	10014270 <__aeabi_ddiv+0x3bc>
100143c8:	2101      	movs	r1, #1
100143ca:	4249      	negs	r1, r1
100143cc:	e752      	b.n	10014274 <__aeabi_ddiv+0x3c0>
100143ce:	001c      	movs	r4, r3
100143d0:	e70e      	b.n	100141f0 <__aeabi_ddiv+0x33c>
100143d2:	001e      	movs	r6, r3
100143d4:	e72b      	b.n	1001422e <__aeabi_ddiv+0x37a>
100143d6:	2d1f      	cmp	r5, #31
100143d8:	dc3c      	bgt.n	10014454 <__aeabi_ddiv+0x5a0>
100143da:	2320      	movs	r3, #32
100143dc:	000a      	movs	r2, r1
100143de:	4658      	mov	r0, fp
100143e0:	1b5b      	subs	r3, r3, r5
100143e2:	4098      	lsls	r0, r3
100143e4:	40ea      	lsrs	r2, r5
100143e6:	4099      	lsls	r1, r3
100143e8:	4302      	orrs	r2, r0
100143ea:	1e48      	subs	r0, r1, #1
100143ec:	4181      	sbcs	r1, r0
100143ee:	465e      	mov	r6, fp
100143f0:	4311      	orrs	r1, r2
100143f2:	40ee      	lsrs	r6, r5
100143f4:	074b      	lsls	r3, r1, #29
100143f6:	d009      	beq.n	1001440c <__aeabi_ddiv+0x558>
100143f8:	230f      	movs	r3, #15
100143fa:	400b      	ands	r3, r1
100143fc:	2b04      	cmp	r3, #4
100143fe:	d005      	beq.n	1001440c <__aeabi_ddiv+0x558>
10014400:	000b      	movs	r3, r1
10014402:	1d19      	adds	r1, r3, #4
10014404:	4299      	cmp	r1, r3
10014406:	419b      	sbcs	r3, r3
10014408:	425b      	negs	r3, r3
1001440a:	18f6      	adds	r6, r6, r3
1001440c:	0233      	lsls	r3, r6, #8
1001440e:	d53c      	bpl.n	1001448a <__aeabi_ddiv+0x5d6>
10014410:	4653      	mov	r3, sl
10014412:	2201      	movs	r2, #1
10014414:	2100      	movs	r1, #0
10014416:	401a      	ands	r2, r3
10014418:	2600      	movs	r6, #0
1001441a:	2301      	movs	r3, #1
1001441c:	4689      	mov	r9, r1
1001441e:	e5af      	b.n	10013f80 <__aeabi_ddiv+0xcc>
10014420:	2302      	movs	r3, #2
10014422:	425b      	negs	r3, r3
10014424:	469c      	mov	ip, r3
10014426:	9c03      	ldr	r4, [sp, #12]
10014428:	44e3      	add	fp, ip
1001442a:	46a4      	mov	ip, r4
1001442c:	9b02      	ldr	r3, [sp, #8]
1001442e:	4463      	add	r3, ip
10014430:	4698      	mov	r8, r3
10014432:	45a0      	cmp	r8, r4
10014434:	41b6      	sbcs	r6, r6
10014436:	4276      	negs	r6, r6
10014438:	19f6      	adds	r6, r6, r7
1001443a:	9302      	str	r3, [sp, #8]
1001443c:	18b2      	adds	r2, r6, r2
1001443e:	e6b1      	b.n	100141a4 <__aeabi_ddiv+0x2f0>
10014440:	9803      	ldr	r0, [sp, #12]
10014442:	1e8a      	subs	r2, r1, #2
10014444:	0041      	lsls	r1, r0, #1
10014446:	4281      	cmp	r1, r0
10014448:	41b6      	sbcs	r6, r6
1001444a:	4276      	negs	r6, r6
1001444c:	19f6      	adds	r6, r6, r7
1001444e:	19ad      	adds	r5, r5, r6
10014450:	9103      	str	r1, [sp, #12]
10014452:	e761      	b.n	10014318 <__aeabi_ddiv+0x464>
10014454:	221f      	movs	r2, #31
10014456:	4252      	negs	r2, r2
10014458:	1ad3      	subs	r3, r2, r3
1001445a:	465a      	mov	r2, fp
1001445c:	40da      	lsrs	r2, r3
1001445e:	0013      	movs	r3, r2
10014460:	2d20      	cmp	r5, #32
10014462:	d029      	beq.n	100144b8 <__aeabi_ddiv+0x604>
10014464:	2240      	movs	r2, #64	; 0x40
10014466:	4658      	mov	r0, fp
10014468:	1b55      	subs	r5, r2, r5
1001446a:	40a8      	lsls	r0, r5
1001446c:	4301      	orrs	r1, r0
1001446e:	1e48      	subs	r0, r1, #1
10014470:	4181      	sbcs	r1, r0
10014472:	2007      	movs	r0, #7
10014474:	430b      	orrs	r3, r1
10014476:	4018      	ands	r0, r3
10014478:	2600      	movs	r6, #0
1001447a:	2800      	cmp	r0, #0
1001447c:	d009      	beq.n	10014492 <__aeabi_ddiv+0x5de>
1001447e:	220f      	movs	r2, #15
10014480:	2600      	movs	r6, #0
10014482:	401a      	ands	r2, r3
10014484:	0019      	movs	r1, r3
10014486:	2a04      	cmp	r2, #4
10014488:	d1bb      	bne.n	10014402 <__aeabi_ddiv+0x54e>
1001448a:	000b      	movs	r3, r1
1001448c:	0770      	lsls	r0, r6, #29
1001448e:	0276      	lsls	r6, r6, #9
10014490:	0b36      	lsrs	r6, r6, #12
10014492:	08db      	lsrs	r3, r3, #3
10014494:	4303      	orrs	r3, r0
10014496:	4699      	mov	r9, r3
10014498:	2201      	movs	r2, #1
1001449a:	4653      	mov	r3, sl
1001449c:	401a      	ands	r2, r3
1001449e:	2300      	movs	r3, #0
100144a0:	e56e      	b.n	10013f80 <__aeabi_ddiv+0xcc>
100144a2:	9902      	ldr	r1, [sp, #8]
100144a4:	428d      	cmp	r5, r1
100144a6:	d8bb      	bhi.n	10014420 <__aeabi_ddiv+0x56c>
100144a8:	469b      	mov	fp, r3
100144aa:	2600      	movs	r6, #0
100144ac:	e67b      	b.n	100141a6 <__aeabi_ddiv+0x2f2>
100144ae:	9803      	ldr	r0, [sp, #12]
100144b0:	4298      	cmp	r0, r3
100144b2:	d3c5      	bcc.n	10014440 <__aeabi_ddiv+0x58c>
100144b4:	0011      	movs	r1, r2
100144b6:	e732      	b.n	1001431e <__aeabi_ddiv+0x46a>
100144b8:	2000      	movs	r0, #0
100144ba:	e7d7      	b.n	1001446c <__aeabi_ddiv+0x5b8>
100144bc:	2680      	movs	r6, #128	; 0x80
100144be:	465b      	mov	r3, fp
100144c0:	0336      	lsls	r6, r6, #12
100144c2:	431e      	orrs	r6, r3
100144c4:	0336      	lsls	r6, r6, #12
100144c6:	0b36      	lsrs	r6, r6, #12
100144c8:	9a00      	ldr	r2, [sp, #0]
100144ca:	4689      	mov	r9, r1
100144cc:	4b03      	ldr	r3, [pc, #12]	; (100144dc <__aeabi_ddiv+0x628>)
100144ce:	e557      	b.n	10013f80 <__aeabi_ddiv+0xcc>
100144d0:	000003ff 	.word	0x000003ff
100144d4:	feffffff 	.word	0xfeffffff
100144d8:	000007fe 	.word	0x000007fe
100144dc:	000007ff 	.word	0x000007ff

100144e0 <__eqdf2>:
100144e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100144e2:	465f      	mov	r7, fp
100144e4:	4656      	mov	r6, sl
100144e6:	464d      	mov	r5, r9
100144e8:	4644      	mov	r4, r8
100144ea:	b4f0      	push	{r4, r5, r6, r7}
100144ec:	031f      	lsls	r7, r3, #12
100144ee:	005c      	lsls	r4, r3, #1
100144f0:	0fdb      	lsrs	r3, r3, #31
100144f2:	469a      	mov	sl, r3
100144f4:	4b19      	ldr	r3, [pc, #100]	; (1001455c <__eqdf2+0x7c>)
100144f6:	030e      	lsls	r6, r1, #12
100144f8:	004d      	lsls	r5, r1, #1
100144fa:	0fc9      	lsrs	r1, r1, #31
100144fc:	4680      	mov	r8, r0
100144fe:	0b36      	lsrs	r6, r6, #12
10014500:	0d6d      	lsrs	r5, r5, #21
10014502:	468b      	mov	fp, r1
10014504:	4691      	mov	r9, r2
10014506:	0b3f      	lsrs	r7, r7, #12
10014508:	0d64      	lsrs	r4, r4, #21
1001450a:	429d      	cmp	r5, r3
1001450c:	d019      	beq.n	10014542 <__eqdf2+0x62>
1001450e:	4b13      	ldr	r3, [pc, #76]	; (1001455c <__eqdf2+0x7c>)
10014510:	429c      	cmp	r4, r3
10014512:	d01b      	beq.n	1001454c <__eqdf2+0x6c>
10014514:	2301      	movs	r3, #1
10014516:	42a5      	cmp	r5, r4
10014518:	d006      	beq.n	10014528 <__eqdf2+0x48>
1001451a:	0018      	movs	r0, r3
1001451c:	bc3c      	pop	{r2, r3, r4, r5}
1001451e:	4690      	mov	r8, r2
10014520:	4699      	mov	r9, r3
10014522:	46a2      	mov	sl, r4
10014524:	46ab      	mov	fp, r5
10014526:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014528:	42be      	cmp	r6, r7
1001452a:	d1f6      	bne.n	1001451a <__eqdf2+0x3a>
1001452c:	45c8      	cmp	r8, r9
1001452e:	d1f4      	bne.n	1001451a <__eqdf2+0x3a>
10014530:	45d3      	cmp	fp, sl
10014532:	d010      	beq.n	10014556 <__eqdf2+0x76>
10014534:	2d00      	cmp	r5, #0
10014536:	d1f0      	bne.n	1001451a <__eqdf2+0x3a>
10014538:	4330      	orrs	r0, r6
1001453a:	0003      	movs	r3, r0
1001453c:	1e5a      	subs	r2, r3, #1
1001453e:	4193      	sbcs	r3, r2
10014540:	e7eb      	b.n	1001451a <__eqdf2+0x3a>
10014542:	0031      	movs	r1, r6
10014544:	2301      	movs	r3, #1
10014546:	4301      	orrs	r1, r0
10014548:	d1e7      	bne.n	1001451a <__eqdf2+0x3a>
1001454a:	e7e0      	b.n	1001450e <__eqdf2+0x2e>
1001454c:	433a      	orrs	r2, r7
1001454e:	2301      	movs	r3, #1
10014550:	2a00      	cmp	r2, #0
10014552:	d1e2      	bne.n	1001451a <__eqdf2+0x3a>
10014554:	e7de      	b.n	10014514 <__eqdf2+0x34>
10014556:	2300      	movs	r3, #0
10014558:	e7df      	b.n	1001451a <__eqdf2+0x3a>
1001455a:	46c0      	nop			; (mov r8, r8)
1001455c:	000007ff 	.word	0x000007ff

10014560 <__gedf2>:
10014560:	b5f0      	push	{r4, r5, r6, r7, lr}
10014562:	465f      	mov	r7, fp
10014564:	4644      	mov	r4, r8
10014566:	4656      	mov	r6, sl
10014568:	464d      	mov	r5, r9
1001456a:	b4f0      	push	{r4, r5, r6, r7}
1001456c:	031f      	lsls	r7, r3, #12
1001456e:	0b3c      	lsrs	r4, r7, #12
10014570:	4f2c      	ldr	r7, [pc, #176]	; (10014624 <__gedf2+0xc4>)
10014572:	030e      	lsls	r6, r1, #12
10014574:	004d      	lsls	r5, r1, #1
10014576:	46a3      	mov	fp, r4
10014578:	005c      	lsls	r4, r3, #1
1001457a:	4684      	mov	ip, r0
1001457c:	0b36      	lsrs	r6, r6, #12
1001457e:	0d6d      	lsrs	r5, r5, #21
10014580:	0fc9      	lsrs	r1, r1, #31
10014582:	4690      	mov	r8, r2
10014584:	0d64      	lsrs	r4, r4, #21
10014586:	0fdb      	lsrs	r3, r3, #31
10014588:	42bd      	cmp	r5, r7
1001458a:	d02b      	beq.n	100145e4 <__gedf2+0x84>
1001458c:	4f25      	ldr	r7, [pc, #148]	; (10014624 <__gedf2+0xc4>)
1001458e:	42bc      	cmp	r4, r7
10014590:	d02e      	beq.n	100145f0 <__gedf2+0x90>
10014592:	2d00      	cmp	r5, #0
10014594:	d10e      	bne.n	100145b4 <__gedf2+0x54>
10014596:	4330      	orrs	r0, r6
10014598:	0007      	movs	r7, r0
1001459a:	4681      	mov	r9, r0
1001459c:	4278      	negs	r0, r7
1001459e:	4178      	adcs	r0, r7
100145a0:	2c00      	cmp	r4, #0
100145a2:	d117      	bne.n	100145d4 <__gedf2+0x74>
100145a4:	465f      	mov	r7, fp
100145a6:	433a      	orrs	r2, r7
100145a8:	d114      	bne.n	100145d4 <__gedf2+0x74>
100145aa:	464b      	mov	r3, r9
100145ac:	2000      	movs	r0, #0
100145ae:	2b00      	cmp	r3, #0
100145b0:	d00a      	beq.n	100145c8 <__gedf2+0x68>
100145b2:	e006      	b.n	100145c2 <__gedf2+0x62>
100145b4:	2c00      	cmp	r4, #0
100145b6:	d102      	bne.n	100145be <__gedf2+0x5e>
100145b8:	4658      	mov	r0, fp
100145ba:	4302      	orrs	r2, r0
100145bc:	d001      	beq.n	100145c2 <__gedf2+0x62>
100145be:	4299      	cmp	r1, r3
100145c0:	d01a      	beq.n	100145f8 <__gedf2+0x98>
100145c2:	2301      	movs	r3, #1
100145c4:	4248      	negs	r0, r1
100145c6:	4318      	orrs	r0, r3
100145c8:	bc3c      	pop	{r2, r3, r4, r5}
100145ca:	4690      	mov	r8, r2
100145cc:	4699      	mov	r9, r3
100145ce:	46a2      	mov	sl, r4
100145d0:	46ab      	mov	fp, r5
100145d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145d4:	2800      	cmp	r0, #0
100145d6:	d0f2      	beq.n	100145be <__gedf2+0x5e>
100145d8:	4258      	negs	r0, r3
100145da:	4158      	adcs	r0, r3
100145dc:	2201      	movs	r2, #1
100145de:	4240      	negs	r0, r0
100145e0:	4310      	orrs	r0, r2
100145e2:	e7f1      	b.n	100145c8 <__gedf2+0x68>
100145e4:	0037      	movs	r7, r6
100145e6:	4307      	orrs	r7, r0
100145e8:	d0d0      	beq.n	1001458c <__gedf2+0x2c>
100145ea:	2002      	movs	r0, #2
100145ec:	4240      	negs	r0, r0
100145ee:	e7eb      	b.n	100145c8 <__gedf2+0x68>
100145f0:	465f      	mov	r7, fp
100145f2:	4317      	orrs	r7, r2
100145f4:	d0cd      	beq.n	10014592 <__gedf2+0x32>
100145f6:	e7f8      	b.n	100145ea <__gedf2+0x8a>
100145f8:	42a5      	cmp	r5, r4
100145fa:	dce2      	bgt.n	100145c2 <__gedf2+0x62>
100145fc:	db05      	blt.n	1001460a <__gedf2+0xaa>
100145fe:	455e      	cmp	r6, fp
10014600:	d8df      	bhi.n	100145c2 <__gedf2+0x62>
10014602:	d008      	beq.n	10014616 <__gedf2+0xb6>
10014604:	2000      	movs	r0, #0
10014606:	455e      	cmp	r6, fp
10014608:	d2de      	bcs.n	100145c8 <__gedf2+0x68>
1001460a:	4248      	negs	r0, r1
1001460c:	4148      	adcs	r0, r1
1001460e:	2301      	movs	r3, #1
10014610:	4240      	negs	r0, r0
10014612:	4318      	orrs	r0, r3
10014614:	e7d8      	b.n	100145c8 <__gedf2+0x68>
10014616:	45c4      	cmp	ip, r8
10014618:	d8d3      	bhi.n	100145c2 <__gedf2+0x62>
1001461a:	2000      	movs	r0, #0
1001461c:	45c4      	cmp	ip, r8
1001461e:	d3f4      	bcc.n	1001460a <__gedf2+0xaa>
10014620:	e7d2      	b.n	100145c8 <__gedf2+0x68>
10014622:	46c0      	nop			; (mov r8, r8)
10014624:	000007ff 	.word	0x000007ff

10014628 <__ledf2>:
10014628:	b5f0      	push	{r4, r5, r6, r7, lr}
1001462a:	465f      	mov	r7, fp
1001462c:	464d      	mov	r5, r9
1001462e:	4644      	mov	r4, r8
10014630:	4656      	mov	r6, sl
10014632:	b4f0      	push	{r4, r5, r6, r7}
10014634:	031c      	lsls	r4, r3, #12
10014636:	0b24      	lsrs	r4, r4, #12
10014638:	46a4      	mov	ip, r4
1001463a:	4c2f      	ldr	r4, [pc, #188]	; (100146f8 <__ledf2+0xd0>)
1001463c:	030f      	lsls	r7, r1, #12
1001463e:	004d      	lsls	r5, r1, #1
10014640:	005e      	lsls	r6, r3, #1
10014642:	0fc9      	lsrs	r1, r1, #31
10014644:	4680      	mov	r8, r0
10014646:	0b3f      	lsrs	r7, r7, #12
10014648:	0d6d      	lsrs	r5, r5, #21
1001464a:	468b      	mov	fp, r1
1001464c:	4691      	mov	r9, r2
1001464e:	0d76      	lsrs	r6, r6, #21
10014650:	0fdb      	lsrs	r3, r3, #31
10014652:	42a5      	cmp	r5, r4
10014654:	d020      	beq.n	10014698 <__ledf2+0x70>
10014656:	4c28      	ldr	r4, [pc, #160]	; (100146f8 <__ledf2+0xd0>)
10014658:	42a6      	cmp	r6, r4
1001465a:	d022      	beq.n	100146a2 <__ledf2+0x7a>
1001465c:	2d00      	cmp	r5, #0
1001465e:	d112      	bne.n	10014686 <__ledf2+0x5e>
10014660:	4338      	orrs	r0, r7
10014662:	4244      	negs	r4, r0
10014664:	4144      	adcs	r4, r0
10014666:	2e00      	cmp	r6, #0
10014668:	d020      	beq.n	100146ac <__ledf2+0x84>
1001466a:	2c00      	cmp	r4, #0
1001466c:	d00d      	beq.n	1001468a <__ledf2+0x62>
1001466e:	425c      	negs	r4, r3
10014670:	4163      	adcs	r3, r4
10014672:	2401      	movs	r4, #1
10014674:	425b      	negs	r3, r3
10014676:	431c      	orrs	r4, r3
10014678:	0020      	movs	r0, r4
1001467a:	bc3c      	pop	{r2, r3, r4, r5}
1001467c:	4690      	mov	r8, r2
1001467e:	4699      	mov	r9, r3
10014680:	46a2      	mov	sl, r4
10014682:	46ab      	mov	fp, r5
10014684:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014686:	2e00      	cmp	r6, #0
10014688:	d017      	beq.n	100146ba <__ledf2+0x92>
1001468a:	455b      	cmp	r3, fp
1001468c:	d019      	beq.n	100146c2 <__ledf2+0x9a>
1001468e:	465b      	mov	r3, fp
10014690:	425c      	negs	r4, r3
10014692:	2301      	movs	r3, #1
10014694:	431c      	orrs	r4, r3
10014696:	e7ef      	b.n	10014678 <__ledf2+0x50>
10014698:	0039      	movs	r1, r7
1001469a:	2402      	movs	r4, #2
1001469c:	4301      	orrs	r1, r0
1001469e:	d1eb      	bne.n	10014678 <__ledf2+0x50>
100146a0:	e7d9      	b.n	10014656 <__ledf2+0x2e>
100146a2:	4661      	mov	r1, ip
100146a4:	2402      	movs	r4, #2
100146a6:	4311      	orrs	r1, r2
100146a8:	d1e6      	bne.n	10014678 <__ledf2+0x50>
100146aa:	e7d7      	b.n	1001465c <__ledf2+0x34>
100146ac:	4661      	mov	r1, ip
100146ae:	430a      	orrs	r2, r1
100146b0:	d1db      	bne.n	1001466a <__ledf2+0x42>
100146b2:	2400      	movs	r4, #0
100146b4:	2800      	cmp	r0, #0
100146b6:	d0df      	beq.n	10014678 <__ledf2+0x50>
100146b8:	e7e9      	b.n	1001468e <__ledf2+0x66>
100146ba:	4661      	mov	r1, ip
100146bc:	430a      	orrs	r2, r1
100146be:	d1e4      	bne.n	1001468a <__ledf2+0x62>
100146c0:	e7e5      	b.n	1001468e <__ledf2+0x66>
100146c2:	42b5      	cmp	r5, r6
100146c4:	dd03      	ble.n	100146ce <__ledf2+0xa6>
100146c6:	2201      	movs	r2, #1
100146c8:	425c      	negs	r4, r3
100146ca:	4314      	orrs	r4, r2
100146cc:	e7d4      	b.n	10014678 <__ledf2+0x50>
100146ce:	42b5      	cmp	r5, r6
100146d0:	dbcd      	blt.n	1001466e <__ledf2+0x46>
100146d2:	4567      	cmp	r7, ip
100146d4:	d8db      	bhi.n	1001468e <__ledf2+0x66>
100146d6:	d009      	beq.n	100146ec <__ledf2+0xc4>
100146d8:	2400      	movs	r4, #0
100146da:	4567      	cmp	r7, ip
100146dc:	d2cc      	bcs.n	10014678 <__ledf2+0x50>
100146de:	4659      	mov	r1, fp
100146e0:	424c      	negs	r4, r1
100146e2:	4161      	adcs	r1, r4
100146e4:	2401      	movs	r4, #1
100146e6:	4249      	negs	r1, r1
100146e8:	430c      	orrs	r4, r1
100146ea:	e7c5      	b.n	10014678 <__ledf2+0x50>
100146ec:	45c8      	cmp	r8, r9
100146ee:	d8ce      	bhi.n	1001468e <__ledf2+0x66>
100146f0:	2400      	movs	r4, #0
100146f2:	45c8      	cmp	r8, r9
100146f4:	d3f3      	bcc.n	100146de <__ledf2+0xb6>
100146f6:	e7bf      	b.n	10014678 <__ledf2+0x50>
100146f8:	000007ff 	.word	0x000007ff

100146fc <__aeabi_dmul>:
100146fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100146fe:	465f      	mov	r7, fp
10014700:	4656      	mov	r6, sl
10014702:	464d      	mov	r5, r9
10014704:	4644      	mov	r4, r8
10014706:	b4f0      	push	{r4, r5, r6, r7}
10014708:	030d      	lsls	r5, r1, #12
1001470a:	4699      	mov	r9, r3
1001470c:	004e      	lsls	r6, r1, #1
1001470e:	0b2b      	lsrs	r3, r5, #12
10014710:	b087      	sub	sp, #28
10014712:	0007      	movs	r7, r0
10014714:	4692      	mov	sl, r2
10014716:	4680      	mov	r8, r0
10014718:	469b      	mov	fp, r3
1001471a:	0d76      	lsrs	r6, r6, #21
1001471c:	0fcc      	lsrs	r4, r1, #31
1001471e:	2e00      	cmp	r6, #0
10014720:	d069      	beq.n	100147f6 <__aeabi_dmul+0xfa>
10014722:	4b6d      	ldr	r3, [pc, #436]	; (100148d8 <__aeabi_dmul+0x1dc>)
10014724:	429e      	cmp	r6, r3
10014726:	d035      	beq.n	10014794 <__aeabi_dmul+0x98>
10014728:	465b      	mov	r3, fp
1001472a:	2280      	movs	r2, #128	; 0x80
1001472c:	00dd      	lsls	r5, r3, #3
1001472e:	0412      	lsls	r2, r2, #16
10014730:	0f43      	lsrs	r3, r0, #29
10014732:	4313      	orrs	r3, r2
10014734:	432b      	orrs	r3, r5
10014736:	469b      	mov	fp, r3
10014738:	00c3      	lsls	r3, r0, #3
1001473a:	4698      	mov	r8, r3
1001473c:	4b67      	ldr	r3, [pc, #412]	; (100148dc <__aeabi_dmul+0x1e0>)
1001473e:	2700      	movs	r7, #0
10014740:	469c      	mov	ip, r3
10014742:	2300      	movs	r3, #0
10014744:	4466      	add	r6, ip
10014746:	9301      	str	r3, [sp, #4]
10014748:	464a      	mov	r2, r9
1001474a:	0315      	lsls	r5, r2, #12
1001474c:	0050      	lsls	r0, r2, #1
1001474e:	0fd2      	lsrs	r2, r2, #31
10014750:	4653      	mov	r3, sl
10014752:	0b2d      	lsrs	r5, r5, #12
10014754:	0d40      	lsrs	r0, r0, #21
10014756:	4691      	mov	r9, r2
10014758:	d100      	bne.n	1001475c <__aeabi_dmul+0x60>
1001475a:	e076      	b.n	1001484a <__aeabi_dmul+0x14e>
1001475c:	4a5e      	ldr	r2, [pc, #376]	; (100148d8 <__aeabi_dmul+0x1dc>)
1001475e:	4290      	cmp	r0, r2
10014760:	d06c      	beq.n	1001483c <__aeabi_dmul+0x140>
10014762:	2280      	movs	r2, #128	; 0x80
10014764:	0f5b      	lsrs	r3, r3, #29
10014766:	0412      	lsls	r2, r2, #16
10014768:	4313      	orrs	r3, r2
1001476a:	4a5c      	ldr	r2, [pc, #368]	; (100148dc <__aeabi_dmul+0x1e0>)
1001476c:	00ed      	lsls	r5, r5, #3
1001476e:	4694      	mov	ip, r2
10014770:	431d      	orrs	r5, r3
10014772:	4653      	mov	r3, sl
10014774:	2200      	movs	r2, #0
10014776:	00db      	lsls	r3, r3, #3
10014778:	4460      	add	r0, ip
1001477a:	4649      	mov	r1, r9
1001477c:	1836      	adds	r6, r6, r0
1001477e:	1c70      	adds	r0, r6, #1
10014780:	4061      	eors	r1, r4
10014782:	9002      	str	r0, [sp, #8]
10014784:	4317      	orrs	r7, r2
10014786:	2f0f      	cmp	r7, #15
10014788:	d900      	bls.n	1001478c <__aeabi_dmul+0x90>
1001478a:	e0af      	b.n	100148ec <__aeabi_dmul+0x1f0>
1001478c:	4854      	ldr	r0, [pc, #336]	; (100148e0 <__aeabi_dmul+0x1e4>)
1001478e:	00bf      	lsls	r7, r7, #2
10014790:	59c7      	ldr	r7, [r0, r7]
10014792:	46bf      	mov	pc, r7
10014794:	465b      	mov	r3, fp
10014796:	431f      	orrs	r7, r3
10014798:	d000      	beq.n	1001479c <__aeabi_dmul+0xa0>
1001479a:	e088      	b.n	100148ae <__aeabi_dmul+0x1b2>
1001479c:	2300      	movs	r3, #0
1001479e:	469b      	mov	fp, r3
100147a0:	4698      	mov	r8, r3
100147a2:	3302      	adds	r3, #2
100147a4:	2708      	movs	r7, #8
100147a6:	9301      	str	r3, [sp, #4]
100147a8:	e7ce      	b.n	10014748 <__aeabi_dmul+0x4c>
100147aa:	4649      	mov	r1, r9
100147ac:	2a02      	cmp	r2, #2
100147ae:	d06a      	beq.n	10014886 <__aeabi_dmul+0x18a>
100147b0:	2a03      	cmp	r2, #3
100147b2:	d100      	bne.n	100147b6 <__aeabi_dmul+0xba>
100147b4:	e209      	b.n	10014bca <__aeabi_dmul+0x4ce>
100147b6:	2a01      	cmp	r2, #1
100147b8:	d000      	beq.n	100147bc <__aeabi_dmul+0xc0>
100147ba:	e1bb      	b.n	10014b34 <__aeabi_dmul+0x438>
100147bc:	4011      	ands	r1, r2
100147be:	2200      	movs	r2, #0
100147c0:	2300      	movs	r3, #0
100147c2:	2500      	movs	r5, #0
100147c4:	4690      	mov	r8, r2
100147c6:	b2cc      	uxtb	r4, r1
100147c8:	2100      	movs	r1, #0
100147ca:	032d      	lsls	r5, r5, #12
100147cc:	0d0a      	lsrs	r2, r1, #20
100147ce:	0512      	lsls	r2, r2, #20
100147d0:	0b2d      	lsrs	r5, r5, #12
100147d2:	4315      	orrs	r5, r2
100147d4:	4a43      	ldr	r2, [pc, #268]	; (100148e4 <__aeabi_dmul+0x1e8>)
100147d6:	051b      	lsls	r3, r3, #20
100147d8:	4015      	ands	r5, r2
100147da:	431d      	orrs	r5, r3
100147dc:	006d      	lsls	r5, r5, #1
100147de:	07e4      	lsls	r4, r4, #31
100147e0:	086d      	lsrs	r5, r5, #1
100147e2:	4325      	orrs	r5, r4
100147e4:	4640      	mov	r0, r8
100147e6:	0029      	movs	r1, r5
100147e8:	b007      	add	sp, #28
100147ea:	bc3c      	pop	{r2, r3, r4, r5}
100147ec:	4690      	mov	r8, r2
100147ee:	4699      	mov	r9, r3
100147f0:	46a2      	mov	sl, r4
100147f2:	46ab      	mov	fp, r5
100147f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100147f6:	4303      	orrs	r3, r0
100147f8:	d052      	beq.n	100148a0 <__aeabi_dmul+0x1a4>
100147fa:	465b      	mov	r3, fp
100147fc:	2b00      	cmp	r3, #0
100147fe:	d100      	bne.n	10014802 <__aeabi_dmul+0x106>
10014800:	e18a      	b.n	10014b18 <__aeabi_dmul+0x41c>
10014802:	4658      	mov	r0, fp
10014804:	f000 fef8 	bl	100155f8 <__clzsi2>
10014808:	0003      	movs	r3, r0
1001480a:	3b0b      	subs	r3, #11
1001480c:	2b1c      	cmp	r3, #28
1001480e:	dd00      	ble.n	10014812 <__aeabi_dmul+0x116>
10014810:	e17b      	b.n	10014b0a <__aeabi_dmul+0x40e>
10014812:	221d      	movs	r2, #29
10014814:	1ad3      	subs	r3, r2, r3
10014816:	003a      	movs	r2, r7
10014818:	0001      	movs	r1, r0
1001481a:	465d      	mov	r5, fp
1001481c:	40da      	lsrs	r2, r3
1001481e:	3908      	subs	r1, #8
10014820:	408d      	lsls	r5, r1
10014822:	0013      	movs	r3, r2
10014824:	408f      	lsls	r7, r1
10014826:	432b      	orrs	r3, r5
10014828:	469b      	mov	fp, r3
1001482a:	46b8      	mov	r8, r7
1001482c:	4b2e      	ldr	r3, [pc, #184]	; (100148e8 <__aeabi_dmul+0x1ec>)
1001482e:	2700      	movs	r7, #0
10014830:	469c      	mov	ip, r3
10014832:	2300      	movs	r3, #0
10014834:	4460      	add	r0, ip
10014836:	4246      	negs	r6, r0
10014838:	9301      	str	r3, [sp, #4]
1001483a:	e785      	b.n	10014748 <__aeabi_dmul+0x4c>
1001483c:	4652      	mov	r2, sl
1001483e:	432a      	orrs	r2, r5
10014840:	d12c      	bne.n	1001489c <__aeabi_dmul+0x1a0>
10014842:	2500      	movs	r5, #0
10014844:	2300      	movs	r3, #0
10014846:	2202      	movs	r2, #2
10014848:	e797      	b.n	1001477a <__aeabi_dmul+0x7e>
1001484a:	4652      	mov	r2, sl
1001484c:	432a      	orrs	r2, r5
1001484e:	d021      	beq.n	10014894 <__aeabi_dmul+0x198>
10014850:	2d00      	cmp	r5, #0
10014852:	d100      	bne.n	10014856 <__aeabi_dmul+0x15a>
10014854:	e154      	b.n	10014b00 <__aeabi_dmul+0x404>
10014856:	0028      	movs	r0, r5
10014858:	f000 fece 	bl	100155f8 <__clzsi2>
1001485c:	0003      	movs	r3, r0
1001485e:	3b0b      	subs	r3, #11
10014860:	2b1c      	cmp	r3, #28
10014862:	dd00      	ble.n	10014866 <__aeabi_dmul+0x16a>
10014864:	e146      	b.n	10014af4 <__aeabi_dmul+0x3f8>
10014866:	211d      	movs	r1, #29
10014868:	1acb      	subs	r3, r1, r3
1001486a:	4651      	mov	r1, sl
1001486c:	0002      	movs	r2, r0
1001486e:	40d9      	lsrs	r1, r3
10014870:	4653      	mov	r3, sl
10014872:	3a08      	subs	r2, #8
10014874:	4095      	lsls	r5, r2
10014876:	4093      	lsls	r3, r2
10014878:	430d      	orrs	r5, r1
1001487a:	4a1b      	ldr	r2, [pc, #108]	; (100148e8 <__aeabi_dmul+0x1ec>)
1001487c:	4694      	mov	ip, r2
1001487e:	4460      	add	r0, ip
10014880:	4240      	negs	r0, r0
10014882:	2200      	movs	r2, #0
10014884:	e779      	b.n	1001477a <__aeabi_dmul+0x7e>
10014886:	2401      	movs	r4, #1
10014888:	2200      	movs	r2, #0
1001488a:	400c      	ands	r4, r1
1001488c:	4b12      	ldr	r3, [pc, #72]	; (100148d8 <__aeabi_dmul+0x1dc>)
1001488e:	2500      	movs	r5, #0
10014890:	4690      	mov	r8, r2
10014892:	e799      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014894:	2500      	movs	r5, #0
10014896:	2300      	movs	r3, #0
10014898:	2201      	movs	r2, #1
1001489a:	e76e      	b.n	1001477a <__aeabi_dmul+0x7e>
1001489c:	2203      	movs	r2, #3
1001489e:	e76c      	b.n	1001477a <__aeabi_dmul+0x7e>
100148a0:	2300      	movs	r3, #0
100148a2:	469b      	mov	fp, r3
100148a4:	4698      	mov	r8, r3
100148a6:	3301      	adds	r3, #1
100148a8:	2704      	movs	r7, #4
100148aa:	9301      	str	r3, [sp, #4]
100148ac:	e74c      	b.n	10014748 <__aeabi_dmul+0x4c>
100148ae:	2303      	movs	r3, #3
100148b0:	270c      	movs	r7, #12
100148b2:	9301      	str	r3, [sp, #4]
100148b4:	e748      	b.n	10014748 <__aeabi_dmul+0x4c>
100148b6:	2300      	movs	r3, #0
100148b8:	2580      	movs	r5, #128	; 0x80
100148ba:	4698      	mov	r8, r3
100148bc:	2400      	movs	r4, #0
100148be:	032d      	lsls	r5, r5, #12
100148c0:	4b05      	ldr	r3, [pc, #20]	; (100148d8 <__aeabi_dmul+0x1dc>)
100148c2:	e781      	b.n	100147c8 <__aeabi_dmul+0xcc>
100148c4:	465d      	mov	r5, fp
100148c6:	4643      	mov	r3, r8
100148c8:	9a01      	ldr	r2, [sp, #4]
100148ca:	e76f      	b.n	100147ac <__aeabi_dmul+0xb0>
100148cc:	465d      	mov	r5, fp
100148ce:	4643      	mov	r3, r8
100148d0:	0021      	movs	r1, r4
100148d2:	9a01      	ldr	r2, [sp, #4]
100148d4:	e76a      	b.n	100147ac <__aeabi_dmul+0xb0>
100148d6:	46c0      	nop			; (mov r8, r8)
100148d8:	000007ff 	.word	0x000007ff
100148dc:	fffffc01 	.word	0xfffffc01
100148e0:	10018238 	.word	0x10018238
100148e4:	800fffff 	.word	0x800fffff
100148e8:	000003f3 	.word	0x000003f3
100148ec:	4642      	mov	r2, r8
100148ee:	0c12      	lsrs	r2, r2, #16
100148f0:	4691      	mov	r9, r2
100148f2:	0c1a      	lsrs	r2, r3, #16
100148f4:	4694      	mov	ip, r2
100148f6:	4642      	mov	r2, r8
100148f8:	0417      	lsls	r7, r2, #16
100148fa:	464a      	mov	r2, r9
100148fc:	041b      	lsls	r3, r3, #16
100148fe:	0c1b      	lsrs	r3, r3, #16
10014900:	435a      	muls	r2, r3
10014902:	4660      	mov	r0, ip
10014904:	4690      	mov	r8, r2
10014906:	464a      	mov	r2, r9
10014908:	4342      	muls	r2, r0
1001490a:	0010      	movs	r0, r2
1001490c:	9203      	str	r2, [sp, #12]
1001490e:	4662      	mov	r2, ip
10014910:	001c      	movs	r4, r3
10014912:	0c3f      	lsrs	r7, r7, #16
10014914:	437a      	muls	r2, r7
10014916:	437c      	muls	r4, r7
10014918:	4442      	add	r2, r8
1001491a:	9201      	str	r2, [sp, #4]
1001491c:	0c22      	lsrs	r2, r4, #16
1001491e:	4692      	mov	sl, r2
10014920:	9a01      	ldr	r2, [sp, #4]
10014922:	4452      	add	r2, sl
10014924:	4590      	cmp	r8, r2
10014926:	d906      	bls.n	10014936 <__aeabi_dmul+0x23a>
10014928:	4682      	mov	sl, r0
1001492a:	2080      	movs	r0, #128	; 0x80
1001492c:	0240      	lsls	r0, r0, #9
1001492e:	4680      	mov	r8, r0
10014930:	44c2      	add	sl, r8
10014932:	4650      	mov	r0, sl
10014934:	9003      	str	r0, [sp, #12]
10014936:	0c10      	lsrs	r0, r2, #16
10014938:	9004      	str	r0, [sp, #16]
1001493a:	4648      	mov	r0, r9
1001493c:	0424      	lsls	r4, r4, #16
1001493e:	0c24      	lsrs	r4, r4, #16
10014940:	0412      	lsls	r2, r2, #16
10014942:	1912      	adds	r2, r2, r4
10014944:	9205      	str	r2, [sp, #20]
10014946:	0c2a      	lsrs	r2, r5, #16
10014948:	042d      	lsls	r5, r5, #16
1001494a:	0c2d      	lsrs	r5, r5, #16
1001494c:	4368      	muls	r0, r5
1001494e:	002c      	movs	r4, r5
10014950:	4682      	mov	sl, r0
10014952:	4648      	mov	r0, r9
10014954:	437c      	muls	r4, r7
10014956:	4350      	muls	r0, r2
10014958:	4681      	mov	r9, r0
1001495a:	0c20      	lsrs	r0, r4, #16
1001495c:	4680      	mov	r8, r0
1001495e:	4357      	muls	r7, r2
10014960:	4457      	add	r7, sl
10014962:	4447      	add	r7, r8
10014964:	45ba      	cmp	sl, r7
10014966:	d903      	bls.n	10014970 <__aeabi_dmul+0x274>
10014968:	2080      	movs	r0, #128	; 0x80
1001496a:	0240      	lsls	r0, r0, #9
1001496c:	4680      	mov	r8, r0
1001496e:	44c1      	add	r9, r8
10014970:	0c38      	lsrs	r0, r7, #16
10014972:	043f      	lsls	r7, r7, #16
10014974:	46b8      	mov	r8, r7
10014976:	4448      	add	r0, r9
10014978:	0424      	lsls	r4, r4, #16
1001497a:	0c24      	lsrs	r4, r4, #16
1001497c:	9001      	str	r0, [sp, #4]
1001497e:	9804      	ldr	r0, [sp, #16]
10014980:	44a0      	add	r8, r4
10014982:	4440      	add	r0, r8
10014984:	9004      	str	r0, [sp, #16]
10014986:	4658      	mov	r0, fp
10014988:	0c00      	lsrs	r0, r0, #16
1001498a:	4681      	mov	r9, r0
1001498c:	4658      	mov	r0, fp
1001498e:	0404      	lsls	r4, r0, #16
10014990:	0c20      	lsrs	r0, r4, #16
10014992:	4682      	mov	sl, r0
10014994:	0007      	movs	r7, r0
10014996:	4648      	mov	r0, r9
10014998:	435f      	muls	r7, r3
1001499a:	464c      	mov	r4, r9
1001499c:	4343      	muls	r3, r0
1001499e:	4660      	mov	r0, ip
100149a0:	4360      	muls	r0, r4
100149a2:	4664      	mov	r4, ip
100149a4:	4683      	mov	fp, r0
100149a6:	4650      	mov	r0, sl
100149a8:	4344      	muls	r4, r0
100149aa:	0c38      	lsrs	r0, r7, #16
100149ac:	4684      	mov	ip, r0
100149ae:	18e4      	adds	r4, r4, r3
100149b0:	4464      	add	r4, ip
100149b2:	42a3      	cmp	r3, r4
100149b4:	d903      	bls.n	100149be <__aeabi_dmul+0x2c2>
100149b6:	2380      	movs	r3, #128	; 0x80
100149b8:	025b      	lsls	r3, r3, #9
100149ba:	469c      	mov	ip, r3
100149bc:	44e3      	add	fp, ip
100149be:	4648      	mov	r0, r9
100149c0:	043f      	lsls	r7, r7, #16
100149c2:	0c23      	lsrs	r3, r4, #16
100149c4:	0c3f      	lsrs	r7, r7, #16
100149c6:	0424      	lsls	r4, r4, #16
100149c8:	19e4      	adds	r4, r4, r7
100149ca:	4657      	mov	r7, sl
100149cc:	4368      	muls	r0, r5
100149ce:	436f      	muls	r7, r5
100149d0:	4684      	mov	ip, r0
100149d2:	464d      	mov	r5, r9
100149d4:	4650      	mov	r0, sl
100149d6:	4355      	muls	r5, r2
100149d8:	4342      	muls	r2, r0
100149da:	0c38      	lsrs	r0, r7, #16
100149dc:	4681      	mov	r9, r0
100149de:	4462      	add	r2, ip
100149e0:	444a      	add	r2, r9
100149e2:	445b      	add	r3, fp
100149e4:	4594      	cmp	ip, r2
100149e6:	d903      	bls.n	100149f0 <__aeabi_dmul+0x2f4>
100149e8:	2080      	movs	r0, #128	; 0x80
100149ea:	0240      	lsls	r0, r0, #9
100149ec:	4684      	mov	ip, r0
100149ee:	4465      	add	r5, ip
100149f0:	9803      	ldr	r0, [sp, #12]
100149f2:	043f      	lsls	r7, r7, #16
100149f4:	4683      	mov	fp, r0
100149f6:	9804      	ldr	r0, [sp, #16]
100149f8:	0c3f      	lsrs	r7, r7, #16
100149fa:	4684      	mov	ip, r0
100149fc:	44e3      	add	fp, ip
100149fe:	45c3      	cmp	fp, r8
10014a00:	4180      	sbcs	r0, r0
10014a02:	4240      	negs	r0, r0
10014a04:	4682      	mov	sl, r0
10014a06:	0410      	lsls	r0, r2, #16
10014a08:	4684      	mov	ip, r0
10014a0a:	9801      	ldr	r0, [sp, #4]
10014a0c:	4467      	add	r7, ip
10014a0e:	4684      	mov	ip, r0
10014a10:	4467      	add	r7, ip
10014a12:	44a3      	add	fp, r4
10014a14:	46bc      	mov	ip, r7
10014a16:	45a3      	cmp	fp, r4
10014a18:	41a4      	sbcs	r4, r4
10014a1a:	4699      	mov	r9, r3
10014a1c:	44d4      	add	ip, sl
10014a1e:	4264      	negs	r4, r4
10014a20:	4287      	cmp	r7, r0
10014a22:	41bf      	sbcs	r7, r7
10014a24:	45d4      	cmp	ip, sl
10014a26:	4180      	sbcs	r0, r0
10014a28:	44e1      	add	r9, ip
10014a2a:	46a0      	mov	r8, r4
10014a2c:	4599      	cmp	r9, r3
10014a2e:	419b      	sbcs	r3, r3
10014a30:	427f      	negs	r7, r7
10014a32:	4240      	negs	r0, r0
10014a34:	44c8      	add	r8, r9
10014a36:	4307      	orrs	r7, r0
10014a38:	0c12      	lsrs	r2, r2, #16
10014a3a:	18ba      	adds	r2, r7, r2
10014a3c:	45a0      	cmp	r8, r4
10014a3e:	41a4      	sbcs	r4, r4
10014a40:	425f      	negs	r7, r3
10014a42:	003b      	movs	r3, r7
10014a44:	4264      	negs	r4, r4
10014a46:	4323      	orrs	r3, r4
10014a48:	18d7      	adds	r7, r2, r3
10014a4a:	4643      	mov	r3, r8
10014a4c:	197d      	adds	r5, r7, r5
10014a4e:	0ddb      	lsrs	r3, r3, #23
10014a50:	026d      	lsls	r5, r5, #9
10014a52:	431d      	orrs	r5, r3
10014a54:	465b      	mov	r3, fp
10014a56:	025a      	lsls	r2, r3, #9
10014a58:	9b05      	ldr	r3, [sp, #20]
10014a5a:	431a      	orrs	r2, r3
10014a5c:	1e53      	subs	r3, r2, #1
10014a5e:	419a      	sbcs	r2, r3
10014a60:	465b      	mov	r3, fp
10014a62:	0ddb      	lsrs	r3, r3, #23
10014a64:	431a      	orrs	r2, r3
10014a66:	4643      	mov	r3, r8
10014a68:	025b      	lsls	r3, r3, #9
10014a6a:	4313      	orrs	r3, r2
10014a6c:	01ea      	lsls	r2, r5, #7
10014a6e:	d507      	bpl.n	10014a80 <__aeabi_dmul+0x384>
10014a70:	2201      	movs	r2, #1
10014a72:	085c      	lsrs	r4, r3, #1
10014a74:	4013      	ands	r3, r2
10014a76:	4323      	orrs	r3, r4
10014a78:	07ea      	lsls	r2, r5, #31
10014a7a:	9e02      	ldr	r6, [sp, #8]
10014a7c:	4313      	orrs	r3, r2
10014a7e:	086d      	lsrs	r5, r5, #1
10014a80:	4a57      	ldr	r2, [pc, #348]	; (10014be0 <__aeabi_dmul+0x4e4>)
10014a82:	18b2      	adds	r2, r6, r2
10014a84:	2a00      	cmp	r2, #0
10014a86:	dd4b      	ble.n	10014b20 <__aeabi_dmul+0x424>
10014a88:	0758      	lsls	r0, r3, #29
10014a8a:	d009      	beq.n	10014aa0 <__aeabi_dmul+0x3a4>
10014a8c:	200f      	movs	r0, #15
10014a8e:	4018      	ands	r0, r3
10014a90:	2804      	cmp	r0, #4
10014a92:	d005      	beq.n	10014aa0 <__aeabi_dmul+0x3a4>
10014a94:	1d18      	adds	r0, r3, #4
10014a96:	4298      	cmp	r0, r3
10014a98:	419b      	sbcs	r3, r3
10014a9a:	425b      	negs	r3, r3
10014a9c:	18ed      	adds	r5, r5, r3
10014a9e:	0003      	movs	r3, r0
10014aa0:	01e8      	lsls	r0, r5, #7
10014aa2:	d504      	bpl.n	10014aae <__aeabi_dmul+0x3b2>
10014aa4:	4a4f      	ldr	r2, [pc, #316]	; (10014be4 <__aeabi_dmul+0x4e8>)
10014aa6:	4015      	ands	r5, r2
10014aa8:	2280      	movs	r2, #128	; 0x80
10014aaa:	00d2      	lsls	r2, r2, #3
10014aac:	18b2      	adds	r2, r6, r2
10014aae:	484e      	ldr	r0, [pc, #312]	; (10014be8 <__aeabi_dmul+0x4ec>)
10014ab0:	4282      	cmp	r2, r0
10014ab2:	dd00      	ble.n	10014ab6 <__aeabi_dmul+0x3ba>
10014ab4:	e6e7      	b.n	10014886 <__aeabi_dmul+0x18a>
10014ab6:	2401      	movs	r4, #1
10014ab8:	08db      	lsrs	r3, r3, #3
10014aba:	0768      	lsls	r0, r5, #29
10014abc:	4318      	orrs	r0, r3
10014abe:	026d      	lsls	r5, r5, #9
10014ac0:	0553      	lsls	r3, r2, #21
10014ac2:	4680      	mov	r8, r0
10014ac4:	0b2d      	lsrs	r5, r5, #12
10014ac6:	0d5b      	lsrs	r3, r3, #21
10014ac8:	400c      	ands	r4, r1
10014aca:	e67d      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014acc:	2280      	movs	r2, #128	; 0x80
10014ace:	4659      	mov	r1, fp
10014ad0:	0312      	lsls	r2, r2, #12
10014ad2:	4211      	tst	r1, r2
10014ad4:	d008      	beq.n	10014ae8 <__aeabi_dmul+0x3ec>
10014ad6:	4215      	tst	r5, r2
10014ad8:	d106      	bne.n	10014ae8 <__aeabi_dmul+0x3ec>
10014ada:	4315      	orrs	r5, r2
10014adc:	032d      	lsls	r5, r5, #12
10014ade:	4698      	mov	r8, r3
10014ae0:	0b2d      	lsrs	r5, r5, #12
10014ae2:	464c      	mov	r4, r9
10014ae4:	4b41      	ldr	r3, [pc, #260]	; (10014bec <__aeabi_dmul+0x4f0>)
10014ae6:	e66f      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014ae8:	465d      	mov	r5, fp
10014aea:	4315      	orrs	r5, r2
10014aec:	032d      	lsls	r5, r5, #12
10014aee:	0b2d      	lsrs	r5, r5, #12
10014af0:	4b3e      	ldr	r3, [pc, #248]	; (10014bec <__aeabi_dmul+0x4f0>)
10014af2:	e669      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014af4:	0003      	movs	r3, r0
10014af6:	4655      	mov	r5, sl
10014af8:	3b28      	subs	r3, #40	; 0x28
10014afa:	409d      	lsls	r5, r3
10014afc:	2300      	movs	r3, #0
10014afe:	e6bc      	b.n	1001487a <__aeabi_dmul+0x17e>
10014b00:	4650      	mov	r0, sl
10014b02:	f000 fd79 	bl	100155f8 <__clzsi2>
10014b06:	3020      	adds	r0, #32
10014b08:	e6a8      	b.n	1001485c <__aeabi_dmul+0x160>
10014b0a:	0003      	movs	r3, r0
10014b0c:	3b28      	subs	r3, #40	; 0x28
10014b0e:	409f      	lsls	r7, r3
10014b10:	2300      	movs	r3, #0
10014b12:	46bb      	mov	fp, r7
10014b14:	4698      	mov	r8, r3
10014b16:	e689      	b.n	1001482c <__aeabi_dmul+0x130>
10014b18:	f000 fd6e 	bl	100155f8 <__clzsi2>
10014b1c:	3020      	adds	r0, #32
10014b1e:	e673      	b.n	10014808 <__aeabi_dmul+0x10c>
10014b20:	2401      	movs	r4, #1
10014b22:	1aa6      	subs	r6, r4, r2
10014b24:	2e38      	cmp	r6, #56	; 0x38
10014b26:	dd07      	ble.n	10014b38 <__aeabi_dmul+0x43c>
10014b28:	2200      	movs	r2, #0
10014b2a:	400c      	ands	r4, r1
10014b2c:	2300      	movs	r3, #0
10014b2e:	2500      	movs	r5, #0
10014b30:	4690      	mov	r8, r2
10014b32:	e649      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014b34:	9e02      	ldr	r6, [sp, #8]
10014b36:	e7a3      	b.n	10014a80 <__aeabi_dmul+0x384>
10014b38:	2e1f      	cmp	r6, #31
10014b3a:	dc20      	bgt.n	10014b7e <__aeabi_dmul+0x482>
10014b3c:	2220      	movs	r2, #32
10014b3e:	002c      	movs	r4, r5
10014b40:	0018      	movs	r0, r3
10014b42:	1b92      	subs	r2, r2, r6
10014b44:	40f0      	lsrs	r0, r6
10014b46:	4094      	lsls	r4, r2
10014b48:	4093      	lsls	r3, r2
10014b4a:	4304      	orrs	r4, r0
10014b4c:	1e58      	subs	r0, r3, #1
10014b4e:	4183      	sbcs	r3, r0
10014b50:	431c      	orrs	r4, r3
10014b52:	40f5      	lsrs	r5, r6
10014b54:	0763      	lsls	r3, r4, #29
10014b56:	d009      	beq.n	10014b6c <__aeabi_dmul+0x470>
10014b58:	230f      	movs	r3, #15
10014b5a:	4023      	ands	r3, r4
10014b5c:	2b04      	cmp	r3, #4
10014b5e:	d005      	beq.n	10014b6c <__aeabi_dmul+0x470>
10014b60:	0023      	movs	r3, r4
10014b62:	1d1c      	adds	r4, r3, #4
10014b64:	429c      	cmp	r4, r3
10014b66:	4192      	sbcs	r2, r2
10014b68:	4252      	negs	r2, r2
10014b6a:	18ad      	adds	r5, r5, r2
10014b6c:	022b      	lsls	r3, r5, #8
10014b6e:	d51f      	bpl.n	10014bb0 <__aeabi_dmul+0x4b4>
10014b70:	2401      	movs	r4, #1
10014b72:	2200      	movs	r2, #0
10014b74:	400c      	ands	r4, r1
10014b76:	2301      	movs	r3, #1
10014b78:	2500      	movs	r5, #0
10014b7a:	4690      	mov	r8, r2
10014b7c:	e624      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014b7e:	201f      	movs	r0, #31
10014b80:	002c      	movs	r4, r5
10014b82:	4240      	negs	r0, r0
10014b84:	1a82      	subs	r2, r0, r2
10014b86:	40d4      	lsrs	r4, r2
10014b88:	2e20      	cmp	r6, #32
10014b8a:	d01c      	beq.n	10014bc6 <__aeabi_dmul+0x4ca>
10014b8c:	2240      	movs	r2, #64	; 0x40
10014b8e:	1b96      	subs	r6, r2, r6
10014b90:	40b5      	lsls	r5, r6
10014b92:	432b      	orrs	r3, r5
10014b94:	1e58      	subs	r0, r3, #1
10014b96:	4183      	sbcs	r3, r0
10014b98:	2007      	movs	r0, #7
10014b9a:	4323      	orrs	r3, r4
10014b9c:	4018      	ands	r0, r3
10014b9e:	2500      	movs	r5, #0
10014ba0:	2800      	cmp	r0, #0
10014ba2:	d009      	beq.n	10014bb8 <__aeabi_dmul+0x4bc>
10014ba4:	220f      	movs	r2, #15
10014ba6:	2500      	movs	r5, #0
10014ba8:	401a      	ands	r2, r3
10014baa:	001c      	movs	r4, r3
10014bac:	2a04      	cmp	r2, #4
10014bae:	d1d8      	bne.n	10014b62 <__aeabi_dmul+0x466>
10014bb0:	0023      	movs	r3, r4
10014bb2:	0768      	lsls	r0, r5, #29
10014bb4:	026d      	lsls	r5, r5, #9
10014bb6:	0b2d      	lsrs	r5, r5, #12
10014bb8:	2401      	movs	r4, #1
10014bba:	08db      	lsrs	r3, r3, #3
10014bbc:	4303      	orrs	r3, r0
10014bbe:	4698      	mov	r8, r3
10014bc0:	400c      	ands	r4, r1
10014bc2:	2300      	movs	r3, #0
10014bc4:	e600      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014bc6:	2500      	movs	r5, #0
10014bc8:	e7e3      	b.n	10014b92 <__aeabi_dmul+0x496>
10014bca:	2280      	movs	r2, #128	; 0x80
10014bcc:	2401      	movs	r4, #1
10014bce:	0312      	lsls	r2, r2, #12
10014bd0:	4315      	orrs	r5, r2
10014bd2:	032d      	lsls	r5, r5, #12
10014bd4:	4698      	mov	r8, r3
10014bd6:	0b2d      	lsrs	r5, r5, #12
10014bd8:	400c      	ands	r4, r1
10014bda:	4b04      	ldr	r3, [pc, #16]	; (10014bec <__aeabi_dmul+0x4f0>)
10014bdc:	e5f4      	b.n	100147c8 <__aeabi_dmul+0xcc>
10014bde:	46c0      	nop			; (mov r8, r8)
10014be0:	000003ff 	.word	0x000003ff
10014be4:	feffffff 	.word	0xfeffffff
10014be8:	000007fe 	.word	0x000007fe
10014bec:	000007ff 	.word	0x000007ff

10014bf0 <__aeabi_dsub>:
10014bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10014bf2:	4657      	mov	r7, sl
10014bf4:	464e      	mov	r6, r9
10014bf6:	4645      	mov	r5, r8
10014bf8:	b4e0      	push	{r5, r6, r7}
10014bfa:	000e      	movs	r6, r1
10014bfc:	0011      	movs	r1, r2
10014bfe:	0ff2      	lsrs	r2, r6, #31
10014c00:	4692      	mov	sl, r2
10014c02:	00c5      	lsls	r5, r0, #3
10014c04:	0f42      	lsrs	r2, r0, #29
10014c06:	0318      	lsls	r0, r3, #12
10014c08:	0337      	lsls	r7, r6, #12
10014c0a:	0074      	lsls	r4, r6, #1
10014c0c:	0a40      	lsrs	r0, r0, #9
10014c0e:	0f4e      	lsrs	r6, r1, #29
10014c10:	0a7f      	lsrs	r7, r7, #9
10014c12:	4330      	orrs	r0, r6
10014c14:	4ecf      	ldr	r6, [pc, #828]	; (10014f54 <__aeabi_dsub+0x364>)
10014c16:	4317      	orrs	r7, r2
10014c18:	005a      	lsls	r2, r3, #1
10014c1a:	0d64      	lsrs	r4, r4, #21
10014c1c:	0d52      	lsrs	r2, r2, #21
10014c1e:	0fdb      	lsrs	r3, r3, #31
10014c20:	00c9      	lsls	r1, r1, #3
10014c22:	42b2      	cmp	r2, r6
10014c24:	d100      	bne.n	10014c28 <__aeabi_dsub+0x38>
10014c26:	e0e5      	b.n	10014df4 <__aeabi_dsub+0x204>
10014c28:	2601      	movs	r6, #1
10014c2a:	4073      	eors	r3, r6
10014c2c:	1aa6      	subs	r6, r4, r2
10014c2e:	46b4      	mov	ip, r6
10014c30:	4553      	cmp	r3, sl
10014c32:	d100      	bne.n	10014c36 <__aeabi_dsub+0x46>
10014c34:	e0af      	b.n	10014d96 <__aeabi_dsub+0x1a6>
10014c36:	2e00      	cmp	r6, #0
10014c38:	dc00      	bgt.n	10014c3c <__aeabi_dsub+0x4c>
10014c3a:	e10d      	b.n	10014e58 <__aeabi_dsub+0x268>
10014c3c:	2a00      	cmp	r2, #0
10014c3e:	d13a      	bne.n	10014cb6 <__aeabi_dsub+0xc6>
10014c40:	0003      	movs	r3, r0
10014c42:	430b      	orrs	r3, r1
10014c44:	d000      	beq.n	10014c48 <__aeabi_dsub+0x58>
10014c46:	e0e4      	b.n	10014e12 <__aeabi_dsub+0x222>
10014c48:	076b      	lsls	r3, r5, #29
10014c4a:	d009      	beq.n	10014c60 <__aeabi_dsub+0x70>
10014c4c:	230f      	movs	r3, #15
10014c4e:	402b      	ands	r3, r5
10014c50:	2b04      	cmp	r3, #4
10014c52:	d005      	beq.n	10014c60 <__aeabi_dsub+0x70>
10014c54:	1d2b      	adds	r3, r5, #4
10014c56:	42ab      	cmp	r3, r5
10014c58:	41ad      	sbcs	r5, r5
10014c5a:	426d      	negs	r5, r5
10014c5c:	197f      	adds	r7, r7, r5
10014c5e:	001d      	movs	r5, r3
10014c60:	023b      	lsls	r3, r7, #8
10014c62:	d400      	bmi.n	10014c66 <__aeabi_dsub+0x76>
10014c64:	e088      	b.n	10014d78 <__aeabi_dsub+0x188>
10014c66:	4bbb      	ldr	r3, [pc, #748]	; (10014f54 <__aeabi_dsub+0x364>)
10014c68:	3401      	adds	r4, #1
10014c6a:	429c      	cmp	r4, r3
10014c6c:	d100      	bne.n	10014c70 <__aeabi_dsub+0x80>
10014c6e:	e110      	b.n	10014e92 <__aeabi_dsub+0x2a2>
10014c70:	003a      	movs	r2, r7
10014c72:	4bb9      	ldr	r3, [pc, #740]	; (10014f58 <__aeabi_dsub+0x368>)
10014c74:	4651      	mov	r1, sl
10014c76:	401a      	ands	r2, r3
10014c78:	2301      	movs	r3, #1
10014c7a:	0750      	lsls	r0, r2, #29
10014c7c:	08ed      	lsrs	r5, r5, #3
10014c7e:	0252      	lsls	r2, r2, #9
10014c80:	0564      	lsls	r4, r4, #21
10014c82:	4305      	orrs	r5, r0
10014c84:	0b12      	lsrs	r2, r2, #12
10014c86:	0d64      	lsrs	r4, r4, #21
10014c88:	400b      	ands	r3, r1
10014c8a:	2100      	movs	r1, #0
10014c8c:	0028      	movs	r0, r5
10014c8e:	0312      	lsls	r2, r2, #12
10014c90:	0d0d      	lsrs	r5, r1, #20
10014c92:	0b12      	lsrs	r2, r2, #12
10014c94:	0564      	lsls	r4, r4, #21
10014c96:	052d      	lsls	r5, r5, #20
10014c98:	4315      	orrs	r5, r2
10014c9a:	0862      	lsrs	r2, r4, #1
10014c9c:	4caf      	ldr	r4, [pc, #700]	; (10014f5c <__aeabi_dsub+0x36c>)
10014c9e:	07db      	lsls	r3, r3, #31
10014ca0:	402c      	ands	r4, r5
10014ca2:	4314      	orrs	r4, r2
10014ca4:	0064      	lsls	r4, r4, #1
10014ca6:	0864      	lsrs	r4, r4, #1
10014ca8:	431c      	orrs	r4, r3
10014caa:	0021      	movs	r1, r4
10014cac:	bc1c      	pop	{r2, r3, r4}
10014cae:	4690      	mov	r8, r2
10014cb0:	4699      	mov	r9, r3
10014cb2:	46a2      	mov	sl, r4
10014cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014cb6:	4ba7      	ldr	r3, [pc, #668]	; (10014f54 <__aeabi_dsub+0x364>)
10014cb8:	429c      	cmp	r4, r3
10014cba:	d0c5      	beq.n	10014c48 <__aeabi_dsub+0x58>
10014cbc:	2380      	movs	r3, #128	; 0x80
10014cbe:	041b      	lsls	r3, r3, #16
10014cc0:	4318      	orrs	r0, r3
10014cc2:	4663      	mov	r3, ip
10014cc4:	2b38      	cmp	r3, #56	; 0x38
10014cc6:	dd00      	ble.n	10014cca <__aeabi_dsub+0xda>
10014cc8:	e0fd      	b.n	10014ec6 <__aeabi_dsub+0x2d6>
10014cca:	2b1f      	cmp	r3, #31
10014ccc:	dd00      	ble.n	10014cd0 <__aeabi_dsub+0xe0>
10014cce:	e130      	b.n	10014f32 <__aeabi_dsub+0x342>
10014cd0:	4662      	mov	r2, ip
10014cd2:	2320      	movs	r3, #32
10014cd4:	1a9b      	subs	r3, r3, r2
10014cd6:	0002      	movs	r2, r0
10014cd8:	409a      	lsls	r2, r3
10014cda:	4666      	mov	r6, ip
10014cdc:	4690      	mov	r8, r2
10014cde:	000a      	movs	r2, r1
10014ce0:	4099      	lsls	r1, r3
10014ce2:	40f2      	lsrs	r2, r6
10014ce4:	4646      	mov	r6, r8
10014ce6:	1e4b      	subs	r3, r1, #1
10014ce8:	4199      	sbcs	r1, r3
10014cea:	4332      	orrs	r2, r6
10014cec:	4311      	orrs	r1, r2
10014cee:	4663      	mov	r3, ip
10014cf0:	0002      	movs	r2, r0
10014cf2:	40da      	lsrs	r2, r3
10014cf4:	1a69      	subs	r1, r5, r1
10014cf6:	428d      	cmp	r5, r1
10014cf8:	419b      	sbcs	r3, r3
10014cfa:	000d      	movs	r5, r1
10014cfc:	1aba      	subs	r2, r7, r2
10014cfe:	425b      	negs	r3, r3
10014d00:	1ad7      	subs	r7, r2, r3
10014d02:	023b      	lsls	r3, r7, #8
10014d04:	d535      	bpl.n	10014d72 <__aeabi_dsub+0x182>
10014d06:	027a      	lsls	r2, r7, #9
10014d08:	0a53      	lsrs	r3, r2, #9
10014d0a:	4698      	mov	r8, r3
10014d0c:	4643      	mov	r3, r8
10014d0e:	2b00      	cmp	r3, #0
10014d10:	d100      	bne.n	10014d14 <__aeabi_dsub+0x124>
10014d12:	e0c4      	b.n	10014e9e <__aeabi_dsub+0x2ae>
10014d14:	4640      	mov	r0, r8
10014d16:	f000 fc6f 	bl	100155f8 <__clzsi2>
10014d1a:	0003      	movs	r3, r0
10014d1c:	3b08      	subs	r3, #8
10014d1e:	2b1f      	cmp	r3, #31
10014d20:	dd00      	ble.n	10014d24 <__aeabi_dsub+0x134>
10014d22:	e0c5      	b.n	10014eb0 <__aeabi_dsub+0x2c0>
10014d24:	2220      	movs	r2, #32
10014d26:	0029      	movs	r1, r5
10014d28:	1ad2      	subs	r2, r2, r3
10014d2a:	4647      	mov	r7, r8
10014d2c:	40d1      	lsrs	r1, r2
10014d2e:	409f      	lsls	r7, r3
10014d30:	000a      	movs	r2, r1
10014d32:	409d      	lsls	r5, r3
10014d34:	433a      	orrs	r2, r7
10014d36:	429c      	cmp	r4, r3
10014d38:	dd00      	ble.n	10014d3c <__aeabi_dsub+0x14c>
10014d3a:	e0c0      	b.n	10014ebe <__aeabi_dsub+0x2ce>
10014d3c:	1b1c      	subs	r4, r3, r4
10014d3e:	1c63      	adds	r3, r4, #1
10014d40:	2b1f      	cmp	r3, #31
10014d42:	dd00      	ble.n	10014d46 <__aeabi_dsub+0x156>
10014d44:	e0e4      	b.n	10014f10 <__aeabi_dsub+0x320>
10014d46:	2120      	movs	r1, #32
10014d48:	0014      	movs	r4, r2
10014d4a:	0028      	movs	r0, r5
10014d4c:	1ac9      	subs	r1, r1, r3
10014d4e:	40d8      	lsrs	r0, r3
10014d50:	408c      	lsls	r4, r1
10014d52:	408d      	lsls	r5, r1
10014d54:	4304      	orrs	r4, r0
10014d56:	40da      	lsrs	r2, r3
10014d58:	1e68      	subs	r0, r5, #1
10014d5a:	4185      	sbcs	r5, r0
10014d5c:	0017      	movs	r7, r2
10014d5e:	4325      	orrs	r5, r4
10014d60:	2400      	movs	r4, #0
10014d62:	e771      	b.n	10014c48 <__aeabi_dsub+0x58>
10014d64:	4642      	mov	r2, r8
10014d66:	4663      	mov	r3, ip
10014d68:	431a      	orrs	r2, r3
10014d6a:	d100      	bne.n	10014d6e <__aeabi_dsub+0x17e>
10014d6c:	e24c      	b.n	10015208 <__aeabi_dsub+0x618>
10014d6e:	4667      	mov	r7, ip
10014d70:	4645      	mov	r5, r8
10014d72:	076b      	lsls	r3, r5, #29
10014d74:	d000      	beq.n	10014d78 <__aeabi_dsub+0x188>
10014d76:	e769      	b.n	10014c4c <__aeabi_dsub+0x5c>
10014d78:	2301      	movs	r3, #1
10014d7a:	4651      	mov	r1, sl
10014d7c:	0778      	lsls	r0, r7, #29
10014d7e:	08ed      	lsrs	r5, r5, #3
10014d80:	08fa      	lsrs	r2, r7, #3
10014d82:	400b      	ands	r3, r1
10014d84:	4305      	orrs	r5, r0
10014d86:	4973      	ldr	r1, [pc, #460]	; (10014f54 <__aeabi_dsub+0x364>)
10014d88:	428c      	cmp	r4, r1
10014d8a:	d038      	beq.n	10014dfe <__aeabi_dsub+0x20e>
10014d8c:	0312      	lsls	r2, r2, #12
10014d8e:	0564      	lsls	r4, r4, #21
10014d90:	0b12      	lsrs	r2, r2, #12
10014d92:	0d64      	lsrs	r4, r4, #21
10014d94:	e779      	b.n	10014c8a <__aeabi_dsub+0x9a>
10014d96:	2e00      	cmp	r6, #0
10014d98:	dc00      	bgt.n	10014d9c <__aeabi_dsub+0x1ac>
10014d9a:	e09a      	b.n	10014ed2 <__aeabi_dsub+0x2e2>
10014d9c:	2a00      	cmp	r2, #0
10014d9e:	d047      	beq.n	10014e30 <__aeabi_dsub+0x240>
10014da0:	4a6c      	ldr	r2, [pc, #432]	; (10014f54 <__aeabi_dsub+0x364>)
10014da2:	4294      	cmp	r4, r2
10014da4:	d100      	bne.n	10014da8 <__aeabi_dsub+0x1b8>
10014da6:	e74f      	b.n	10014c48 <__aeabi_dsub+0x58>
10014da8:	2280      	movs	r2, #128	; 0x80
10014daa:	0412      	lsls	r2, r2, #16
10014dac:	4310      	orrs	r0, r2
10014dae:	4662      	mov	r2, ip
10014db0:	2a38      	cmp	r2, #56	; 0x38
10014db2:	dc00      	bgt.n	10014db6 <__aeabi_dsub+0x1c6>
10014db4:	e108      	b.n	10014fc8 <__aeabi_dsub+0x3d8>
10014db6:	4301      	orrs	r1, r0
10014db8:	1e48      	subs	r0, r1, #1
10014dba:	4181      	sbcs	r1, r0
10014dbc:	2200      	movs	r2, #0
10014dbe:	b2c9      	uxtb	r1, r1
10014dc0:	1949      	adds	r1, r1, r5
10014dc2:	19d2      	adds	r2, r2, r7
10014dc4:	42a9      	cmp	r1, r5
10014dc6:	41bf      	sbcs	r7, r7
10014dc8:	000d      	movs	r5, r1
10014dca:	427f      	negs	r7, r7
10014dcc:	18bf      	adds	r7, r7, r2
10014dce:	023a      	lsls	r2, r7, #8
10014dd0:	d400      	bmi.n	10014dd4 <__aeabi_dsub+0x1e4>
10014dd2:	e142      	b.n	1001505a <__aeabi_dsub+0x46a>
10014dd4:	4a5f      	ldr	r2, [pc, #380]	; (10014f54 <__aeabi_dsub+0x364>)
10014dd6:	3401      	adds	r4, #1
10014dd8:	4294      	cmp	r4, r2
10014dda:	d100      	bne.n	10014dde <__aeabi_dsub+0x1ee>
10014ddc:	e14e      	b.n	1001507c <__aeabi_dsub+0x48c>
10014dde:	2001      	movs	r0, #1
10014de0:	4a5d      	ldr	r2, [pc, #372]	; (10014f58 <__aeabi_dsub+0x368>)
10014de2:	0869      	lsrs	r1, r5, #1
10014de4:	403a      	ands	r2, r7
10014de6:	4028      	ands	r0, r5
10014de8:	4308      	orrs	r0, r1
10014dea:	07d5      	lsls	r5, r2, #31
10014dec:	4305      	orrs	r5, r0
10014dee:	0857      	lsrs	r7, r2, #1
10014df0:	469a      	mov	sl, r3
10014df2:	e729      	b.n	10014c48 <__aeabi_dsub+0x58>
10014df4:	0006      	movs	r6, r0
10014df6:	430e      	orrs	r6, r1
10014df8:	d000      	beq.n	10014dfc <__aeabi_dsub+0x20c>
10014dfa:	e717      	b.n	10014c2c <__aeabi_dsub+0x3c>
10014dfc:	e714      	b.n	10014c28 <__aeabi_dsub+0x38>
10014dfe:	0029      	movs	r1, r5
10014e00:	4311      	orrs	r1, r2
10014e02:	d100      	bne.n	10014e06 <__aeabi_dsub+0x216>
10014e04:	e1f9      	b.n	100151fa <__aeabi_dsub+0x60a>
10014e06:	2180      	movs	r1, #128	; 0x80
10014e08:	0309      	lsls	r1, r1, #12
10014e0a:	430a      	orrs	r2, r1
10014e0c:	0312      	lsls	r2, r2, #12
10014e0e:	0b12      	lsrs	r2, r2, #12
10014e10:	e73b      	b.n	10014c8a <__aeabi_dsub+0x9a>
10014e12:	2301      	movs	r3, #1
10014e14:	425b      	negs	r3, r3
10014e16:	4698      	mov	r8, r3
10014e18:	44c4      	add	ip, r8
10014e1a:	4663      	mov	r3, ip
10014e1c:	2b00      	cmp	r3, #0
10014e1e:	d172      	bne.n	10014f06 <__aeabi_dsub+0x316>
10014e20:	1a69      	subs	r1, r5, r1
10014e22:	428d      	cmp	r5, r1
10014e24:	419b      	sbcs	r3, r3
10014e26:	1a3f      	subs	r7, r7, r0
10014e28:	425b      	negs	r3, r3
10014e2a:	1aff      	subs	r7, r7, r3
10014e2c:	000d      	movs	r5, r1
10014e2e:	e768      	b.n	10014d02 <__aeabi_dsub+0x112>
10014e30:	0002      	movs	r2, r0
10014e32:	430a      	orrs	r2, r1
10014e34:	d100      	bne.n	10014e38 <__aeabi_dsub+0x248>
10014e36:	e707      	b.n	10014c48 <__aeabi_dsub+0x58>
10014e38:	2201      	movs	r2, #1
10014e3a:	4252      	negs	r2, r2
10014e3c:	4690      	mov	r8, r2
10014e3e:	44c4      	add	ip, r8
10014e40:	4662      	mov	r2, ip
10014e42:	2a00      	cmp	r2, #0
10014e44:	d000      	beq.n	10014e48 <__aeabi_dsub+0x258>
10014e46:	e0e6      	b.n	10015016 <__aeabi_dsub+0x426>
10014e48:	1869      	adds	r1, r5, r1
10014e4a:	42a9      	cmp	r1, r5
10014e4c:	41b6      	sbcs	r6, r6
10014e4e:	183f      	adds	r7, r7, r0
10014e50:	4276      	negs	r6, r6
10014e52:	19f7      	adds	r7, r6, r7
10014e54:	000d      	movs	r5, r1
10014e56:	e7ba      	b.n	10014dce <__aeabi_dsub+0x1de>
10014e58:	2e00      	cmp	r6, #0
10014e5a:	d000      	beq.n	10014e5e <__aeabi_dsub+0x26e>
10014e5c:	e080      	b.n	10014f60 <__aeabi_dsub+0x370>
10014e5e:	1c62      	adds	r2, r4, #1
10014e60:	0552      	lsls	r2, r2, #21
10014e62:	0d52      	lsrs	r2, r2, #21
10014e64:	2a01      	cmp	r2, #1
10014e66:	dc00      	bgt.n	10014e6a <__aeabi_dsub+0x27a>
10014e68:	e0f9      	b.n	1001505e <__aeabi_dsub+0x46e>
10014e6a:	1a6a      	subs	r2, r5, r1
10014e6c:	4691      	mov	r9, r2
10014e6e:	454d      	cmp	r5, r9
10014e70:	41b6      	sbcs	r6, r6
10014e72:	1a3a      	subs	r2, r7, r0
10014e74:	4276      	negs	r6, r6
10014e76:	1b92      	subs	r2, r2, r6
10014e78:	4690      	mov	r8, r2
10014e7a:	0212      	lsls	r2, r2, #8
10014e7c:	d400      	bmi.n	10014e80 <__aeabi_dsub+0x290>
10014e7e:	e099      	b.n	10014fb4 <__aeabi_dsub+0x3c4>
10014e80:	1b4d      	subs	r5, r1, r5
10014e82:	42a9      	cmp	r1, r5
10014e84:	4189      	sbcs	r1, r1
10014e86:	1bc7      	subs	r7, r0, r7
10014e88:	4249      	negs	r1, r1
10014e8a:	1a7a      	subs	r2, r7, r1
10014e8c:	4690      	mov	r8, r2
10014e8e:	469a      	mov	sl, r3
10014e90:	e73c      	b.n	10014d0c <__aeabi_dsub+0x11c>
10014e92:	4652      	mov	r2, sl
10014e94:	2301      	movs	r3, #1
10014e96:	2500      	movs	r5, #0
10014e98:	4013      	ands	r3, r2
10014e9a:	2200      	movs	r2, #0
10014e9c:	e6f5      	b.n	10014c8a <__aeabi_dsub+0x9a>
10014e9e:	0028      	movs	r0, r5
10014ea0:	f000 fbaa 	bl	100155f8 <__clzsi2>
10014ea4:	3020      	adds	r0, #32
10014ea6:	0003      	movs	r3, r0
10014ea8:	3b08      	subs	r3, #8
10014eaa:	2b1f      	cmp	r3, #31
10014eac:	dc00      	bgt.n	10014eb0 <__aeabi_dsub+0x2c0>
10014eae:	e739      	b.n	10014d24 <__aeabi_dsub+0x134>
10014eb0:	002a      	movs	r2, r5
10014eb2:	3828      	subs	r0, #40	; 0x28
10014eb4:	4082      	lsls	r2, r0
10014eb6:	2500      	movs	r5, #0
10014eb8:	429c      	cmp	r4, r3
10014eba:	dc00      	bgt.n	10014ebe <__aeabi_dsub+0x2ce>
10014ebc:	e73e      	b.n	10014d3c <__aeabi_dsub+0x14c>
10014ebe:	4f26      	ldr	r7, [pc, #152]	; (10014f58 <__aeabi_dsub+0x368>)
10014ec0:	1ae4      	subs	r4, r4, r3
10014ec2:	4017      	ands	r7, r2
10014ec4:	e6c0      	b.n	10014c48 <__aeabi_dsub+0x58>
10014ec6:	4301      	orrs	r1, r0
10014ec8:	1e48      	subs	r0, r1, #1
10014eca:	4181      	sbcs	r1, r0
10014ecc:	2200      	movs	r2, #0
10014ece:	b2c9      	uxtb	r1, r1
10014ed0:	e710      	b.n	10014cf4 <__aeabi_dsub+0x104>
10014ed2:	2e00      	cmp	r6, #0
10014ed4:	d000      	beq.n	10014ed8 <__aeabi_dsub+0x2e8>
10014ed6:	e0f1      	b.n	100150bc <__aeabi_dsub+0x4cc>
10014ed8:	1c62      	adds	r2, r4, #1
10014eda:	4694      	mov	ip, r2
10014edc:	0552      	lsls	r2, r2, #21
10014ede:	0d52      	lsrs	r2, r2, #21
10014ee0:	2a01      	cmp	r2, #1
10014ee2:	dc00      	bgt.n	10014ee6 <__aeabi_dsub+0x2f6>
10014ee4:	e0a0      	b.n	10015028 <__aeabi_dsub+0x438>
10014ee6:	4a1b      	ldr	r2, [pc, #108]	; (10014f54 <__aeabi_dsub+0x364>)
10014ee8:	4594      	cmp	ip, r2
10014eea:	d100      	bne.n	10014eee <__aeabi_dsub+0x2fe>
10014eec:	e0c5      	b.n	1001507a <__aeabi_dsub+0x48a>
10014eee:	1869      	adds	r1, r5, r1
10014ef0:	42a9      	cmp	r1, r5
10014ef2:	4192      	sbcs	r2, r2
10014ef4:	183f      	adds	r7, r7, r0
10014ef6:	4252      	negs	r2, r2
10014ef8:	19d2      	adds	r2, r2, r7
10014efa:	0849      	lsrs	r1, r1, #1
10014efc:	07d5      	lsls	r5, r2, #31
10014efe:	430d      	orrs	r5, r1
10014f00:	0857      	lsrs	r7, r2, #1
10014f02:	4664      	mov	r4, ip
10014f04:	e6a0      	b.n	10014c48 <__aeabi_dsub+0x58>
10014f06:	4b13      	ldr	r3, [pc, #76]	; (10014f54 <__aeabi_dsub+0x364>)
10014f08:	429c      	cmp	r4, r3
10014f0a:	d000      	beq.n	10014f0e <__aeabi_dsub+0x31e>
10014f0c:	e6d9      	b.n	10014cc2 <__aeabi_dsub+0xd2>
10014f0e:	e69b      	b.n	10014c48 <__aeabi_dsub+0x58>
10014f10:	0011      	movs	r1, r2
10014f12:	3c1f      	subs	r4, #31
10014f14:	40e1      	lsrs	r1, r4
10014f16:	000c      	movs	r4, r1
10014f18:	2b20      	cmp	r3, #32
10014f1a:	d100      	bne.n	10014f1e <__aeabi_dsub+0x32e>
10014f1c:	e080      	b.n	10015020 <__aeabi_dsub+0x430>
10014f1e:	2140      	movs	r1, #64	; 0x40
10014f20:	1acb      	subs	r3, r1, r3
10014f22:	409a      	lsls	r2, r3
10014f24:	4315      	orrs	r5, r2
10014f26:	1e6a      	subs	r2, r5, #1
10014f28:	4195      	sbcs	r5, r2
10014f2a:	2700      	movs	r7, #0
10014f2c:	4325      	orrs	r5, r4
10014f2e:	2400      	movs	r4, #0
10014f30:	e71f      	b.n	10014d72 <__aeabi_dsub+0x182>
10014f32:	4663      	mov	r3, ip
10014f34:	0002      	movs	r2, r0
10014f36:	3b20      	subs	r3, #32
10014f38:	40da      	lsrs	r2, r3
10014f3a:	4663      	mov	r3, ip
10014f3c:	2b20      	cmp	r3, #32
10014f3e:	d071      	beq.n	10015024 <__aeabi_dsub+0x434>
10014f40:	2340      	movs	r3, #64	; 0x40
10014f42:	4666      	mov	r6, ip
10014f44:	1b9b      	subs	r3, r3, r6
10014f46:	4098      	lsls	r0, r3
10014f48:	4301      	orrs	r1, r0
10014f4a:	1e48      	subs	r0, r1, #1
10014f4c:	4181      	sbcs	r1, r0
10014f4e:	4311      	orrs	r1, r2
10014f50:	2200      	movs	r2, #0
10014f52:	e6cf      	b.n	10014cf4 <__aeabi_dsub+0x104>
10014f54:	000007ff 	.word	0x000007ff
10014f58:	ff7fffff 	.word	0xff7fffff
10014f5c:	800fffff 	.word	0x800fffff
10014f60:	2c00      	cmp	r4, #0
10014f62:	d048      	beq.n	10014ff6 <__aeabi_dsub+0x406>
10014f64:	4cca      	ldr	r4, [pc, #808]	; (10015290 <__aeabi_dsub+0x6a0>)
10014f66:	42a2      	cmp	r2, r4
10014f68:	d100      	bne.n	10014f6c <__aeabi_dsub+0x37c>
10014f6a:	e0a2      	b.n	100150b2 <__aeabi_dsub+0x4c2>
10014f6c:	4274      	negs	r4, r6
10014f6e:	46a1      	mov	r9, r4
10014f70:	2480      	movs	r4, #128	; 0x80
10014f72:	0424      	lsls	r4, r4, #16
10014f74:	4327      	orrs	r7, r4
10014f76:	464c      	mov	r4, r9
10014f78:	2c38      	cmp	r4, #56	; 0x38
10014f7a:	dd00      	ble.n	10014f7e <__aeabi_dsub+0x38e>
10014f7c:	e0db      	b.n	10015136 <__aeabi_dsub+0x546>
10014f7e:	2c1f      	cmp	r4, #31
10014f80:	dd00      	ble.n	10014f84 <__aeabi_dsub+0x394>
10014f82:	e144      	b.n	1001520e <__aeabi_dsub+0x61e>
10014f84:	464e      	mov	r6, r9
10014f86:	2420      	movs	r4, #32
10014f88:	1ba4      	subs	r4, r4, r6
10014f8a:	003e      	movs	r6, r7
10014f8c:	40a6      	lsls	r6, r4
10014f8e:	46a2      	mov	sl, r4
10014f90:	46b0      	mov	r8, r6
10014f92:	464c      	mov	r4, r9
10014f94:	002e      	movs	r6, r5
10014f96:	40e6      	lsrs	r6, r4
10014f98:	46b4      	mov	ip, r6
10014f9a:	4646      	mov	r6, r8
10014f9c:	4664      	mov	r4, ip
10014f9e:	4326      	orrs	r6, r4
10014fa0:	4654      	mov	r4, sl
10014fa2:	40a5      	lsls	r5, r4
10014fa4:	1e6c      	subs	r4, r5, #1
10014fa6:	41a5      	sbcs	r5, r4
10014fa8:	0034      	movs	r4, r6
10014faa:	432c      	orrs	r4, r5
10014fac:	464d      	mov	r5, r9
10014fae:	40ef      	lsrs	r7, r5
10014fb0:	1b0d      	subs	r5, r1, r4
10014fb2:	e028      	b.n	10015006 <__aeabi_dsub+0x416>
10014fb4:	464a      	mov	r2, r9
10014fb6:	4643      	mov	r3, r8
10014fb8:	464d      	mov	r5, r9
10014fba:	431a      	orrs	r2, r3
10014fbc:	d000      	beq.n	10014fc0 <__aeabi_dsub+0x3d0>
10014fbe:	e6a5      	b.n	10014d0c <__aeabi_dsub+0x11c>
10014fc0:	2300      	movs	r3, #0
10014fc2:	2400      	movs	r4, #0
10014fc4:	2500      	movs	r5, #0
10014fc6:	e6de      	b.n	10014d86 <__aeabi_dsub+0x196>
10014fc8:	2a1f      	cmp	r2, #31
10014fca:	dc5a      	bgt.n	10015082 <__aeabi_dsub+0x492>
10014fcc:	4666      	mov	r6, ip
10014fce:	2220      	movs	r2, #32
10014fd0:	1b92      	subs	r2, r2, r6
10014fd2:	0006      	movs	r6, r0
10014fd4:	4096      	lsls	r6, r2
10014fd6:	4691      	mov	r9, r2
10014fd8:	46b0      	mov	r8, r6
10014fda:	4662      	mov	r2, ip
10014fdc:	000e      	movs	r6, r1
10014fde:	40d6      	lsrs	r6, r2
10014fe0:	4642      	mov	r2, r8
10014fe2:	4316      	orrs	r6, r2
10014fe4:	464a      	mov	r2, r9
10014fe6:	4091      	lsls	r1, r2
10014fe8:	1e4a      	subs	r2, r1, #1
10014fea:	4191      	sbcs	r1, r2
10014fec:	0002      	movs	r2, r0
10014fee:	4660      	mov	r0, ip
10014ff0:	4331      	orrs	r1, r6
10014ff2:	40c2      	lsrs	r2, r0
10014ff4:	e6e4      	b.n	10014dc0 <__aeabi_dsub+0x1d0>
10014ff6:	003c      	movs	r4, r7
10014ff8:	432c      	orrs	r4, r5
10014ffa:	d05a      	beq.n	100150b2 <__aeabi_dsub+0x4c2>
10014ffc:	43f4      	mvns	r4, r6
10014ffe:	46a1      	mov	r9, r4
10015000:	2c00      	cmp	r4, #0
10015002:	d152      	bne.n	100150aa <__aeabi_dsub+0x4ba>
10015004:	1b4d      	subs	r5, r1, r5
10015006:	42a9      	cmp	r1, r5
10015008:	4189      	sbcs	r1, r1
1001500a:	1bc7      	subs	r7, r0, r7
1001500c:	4249      	negs	r1, r1
1001500e:	1a7f      	subs	r7, r7, r1
10015010:	0014      	movs	r4, r2
10015012:	469a      	mov	sl, r3
10015014:	e675      	b.n	10014d02 <__aeabi_dsub+0x112>
10015016:	4a9e      	ldr	r2, [pc, #632]	; (10015290 <__aeabi_dsub+0x6a0>)
10015018:	4294      	cmp	r4, r2
1001501a:	d000      	beq.n	1001501e <__aeabi_dsub+0x42e>
1001501c:	e6c7      	b.n	10014dae <__aeabi_dsub+0x1be>
1001501e:	e613      	b.n	10014c48 <__aeabi_dsub+0x58>
10015020:	2200      	movs	r2, #0
10015022:	e77f      	b.n	10014f24 <__aeabi_dsub+0x334>
10015024:	2000      	movs	r0, #0
10015026:	e78f      	b.n	10014f48 <__aeabi_dsub+0x358>
10015028:	2c00      	cmp	r4, #0
1001502a:	d000      	beq.n	1001502e <__aeabi_dsub+0x43e>
1001502c:	e0c8      	b.n	100151c0 <__aeabi_dsub+0x5d0>
1001502e:	003b      	movs	r3, r7
10015030:	432b      	orrs	r3, r5
10015032:	d100      	bne.n	10015036 <__aeabi_dsub+0x446>
10015034:	e10f      	b.n	10015256 <__aeabi_dsub+0x666>
10015036:	0003      	movs	r3, r0
10015038:	430b      	orrs	r3, r1
1001503a:	d100      	bne.n	1001503e <__aeabi_dsub+0x44e>
1001503c:	e604      	b.n	10014c48 <__aeabi_dsub+0x58>
1001503e:	1869      	adds	r1, r5, r1
10015040:	42a9      	cmp	r1, r5
10015042:	419b      	sbcs	r3, r3
10015044:	183f      	adds	r7, r7, r0
10015046:	425b      	negs	r3, r3
10015048:	19df      	adds	r7, r3, r7
1001504a:	023b      	lsls	r3, r7, #8
1001504c:	d400      	bmi.n	10015050 <__aeabi_dsub+0x460>
1001504e:	e11a      	b.n	10015286 <__aeabi_dsub+0x696>
10015050:	4b90      	ldr	r3, [pc, #576]	; (10015294 <__aeabi_dsub+0x6a4>)
10015052:	000d      	movs	r5, r1
10015054:	401f      	ands	r7, r3
10015056:	4664      	mov	r4, ip
10015058:	e5f6      	b.n	10014c48 <__aeabi_dsub+0x58>
1001505a:	469a      	mov	sl, r3
1001505c:	e689      	b.n	10014d72 <__aeabi_dsub+0x182>
1001505e:	003a      	movs	r2, r7
10015060:	432a      	orrs	r2, r5
10015062:	2c00      	cmp	r4, #0
10015064:	d15c      	bne.n	10015120 <__aeabi_dsub+0x530>
10015066:	2a00      	cmp	r2, #0
10015068:	d175      	bne.n	10015156 <__aeabi_dsub+0x566>
1001506a:	0002      	movs	r2, r0
1001506c:	430a      	orrs	r2, r1
1001506e:	d100      	bne.n	10015072 <__aeabi_dsub+0x482>
10015070:	e0ca      	b.n	10015208 <__aeabi_dsub+0x618>
10015072:	0007      	movs	r7, r0
10015074:	000d      	movs	r5, r1
10015076:	469a      	mov	sl, r3
10015078:	e5e6      	b.n	10014c48 <__aeabi_dsub+0x58>
1001507a:	4664      	mov	r4, ip
1001507c:	2200      	movs	r2, #0
1001507e:	2500      	movs	r5, #0
10015080:	e681      	b.n	10014d86 <__aeabi_dsub+0x196>
10015082:	4662      	mov	r2, ip
10015084:	0006      	movs	r6, r0
10015086:	3a20      	subs	r2, #32
10015088:	40d6      	lsrs	r6, r2
1001508a:	4662      	mov	r2, ip
1001508c:	46b0      	mov	r8, r6
1001508e:	2a20      	cmp	r2, #32
10015090:	d100      	bne.n	10015094 <__aeabi_dsub+0x4a4>
10015092:	e0b7      	b.n	10015204 <__aeabi_dsub+0x614>
10015094:	2240      	movs	r2, #64	; 0x40
10015096:	4666      	mov	r6, ip
10015098:	1b92      	subs	r2, r2, r6
1001509a:	4090      	lsls	r0, r2
1001509c:	4301      	orrs	r1, r0
1001509e:	4642      	mov	r2, r8
100150a0:	1e48      	subs	r0, r1, #1
100150a2:	4181      	sbcs	r1, r0
100150a4:	4311      	orrs	r1, r2
100150a6:	2200      	movs	r2, #0
100150a8:	e68a      	b.n	10014dc0 <__aeabi_dsub+0x1d0>
100150aa:	4c79      	ldr	r4, [pc, #484]	; (10015290 <__aeabi_dsub+0x6a0>)
100150ac:	42a2      	cmp	r2, r4
100150ae:	d000      	beq.n	100150b2 <__aeabi_dsub+0x4c2>
100150b0:	e761      	b.n	10014f76 <__aeabi_dsub+0x386>
100150b2:	0007      	movs	r7, r0
100150b4:	000d      	movs	r5, r1
100150b6:	0014      	movs	r4, r2
100150b8:	469a      	mov	sl, r3
100150ba:	e5c5      	b.n	10014c48 <__aeabi_dsub+0x58>
100150bc:	2c00      	cmp	r4, #0
100150be:	d141      	bne.n	10015144 <__aeabi_dsub+0x554>
100150c0:	003c      	movs	r4, r7
100150c2:	432c      	orrs	r4, r5
100150c4:	d078      	beq.n	100151b8 <__aeabi_dsub+0x5c8>
100150c6:	43f4      	mvns	r4, r6
100150c8:	46a1      	mov	r9, r4
100150ca:	2c00      	cmp	r4, #0
100150cc:	d020      	beq.n	10015110 <__aeabi_dsub+0x520>
100150ce:	4c70      	ldr	r4, [pc, #448]	; (10015290 <__aeabi_dsub+0x6a0>)
100150d0:	42a2      	cmp	r2, r4
100150d2:	d071      	beq.n	100151b8 <__aeabi_dsub+0x5c8>
100150d4:	464c      	mov	r4, r9
100150d6:	2c38      	cmp	r4, #56	; 0x38
100150d8:	dd00      	ble.n	100150dc <__aeabi_dsub+0x4ec>
100150da:	e0b2      	b.n	10015242 <__aeabi_dsub+0x652>
100150dc:	2c1f      	cmp	r4, #31
100150de:	dd00      	ble.n	100150e2 <__aeabi_dsub+0x4f2>
100150e0:	e0bc      	b.n	1001525c <__aeabi_dsub+0x66c>
100150e2:	2620      	movs	r6, #32
100150e4:	1b34      	subs	r4, r6, r4
100150e6:	46a2      	mov	sl, r4
100150e8:	003c      	movs	r4, r7
100150ea:	4656      	mov	r6, sl
100150ec:	40b4      	lsls	r4, r6
100150ee:	464e      	mov	r6, r9
100150f0:	46a0      	mov	r8, r4
100150f2:	002c      	movs	r4, r5
100150f4:	40f4      	lsrs	r4, r6
100150f6:	46a4      	mov	ip, r4
100150f8:	4644      	mov	r4, r8
100150fa:	4666      	mov	r6, ip
100150fc:	4334      	orrs	r4, r6
100150fe:	46a4      	mov	ip, r4
10015100:	4654      	mov	r4, sl
10015102:	40a5      	lsls	r5, r4
10015104:	4664      	mov	r4, ip
10015106:	1e6e      	subs	r6, r5, #1
10015108:	41b5      	sbcs	r5, r6
1001510a:	4325      	orrs	r5, r4
1001510c:	464c      	mov	r4, r9
1001510e:	40e7      	lsrs	r7, r4
10015110:	186d      	adds	r5, r5, r1
10015112:	428d      	cmp	r5, r1
10015114:	4189      	sbcs	r1, r1
10015116:	183f      	adds	r7, r7, r0
10015118:	4249      	negs	r1, r1
1001511a:	19cf      	adds	r7, r1, r7
1001511c:	0014      	movs	r4, r2
1001511e:	e656      	b.n	10014dce <__aeabi_dsub+0x1de>
10015120:	2a00      	cmp	r2, #0
10015122:	d12f      	bne.n	10015184 <__aeabi_dsub+0x594>
10015124:	0002      	movs	r2, r0
10015126:	430a      	orrs	r2, r1
10015128:	d100      	bne.n	1001512c <__aeabi_dsub+0x53c>
1001512a:	e084      	b.n	10015236 <__aeabi_dsub+0x646>
1001512c:	0007      	movs	r7, r0
1001512e:	000d      	movs	r5, r1
10015130:	469a      	mov	sl, r3
10015132:	4c57      	ldr	r4, [pc, #348]	; (10015290 <__aeabi_dsub+0x6a0>)
10015134:	e588      	b.n	10014c48 <__aeabi_dsub+0x58>
10015136:	433d      	orrs	r5, r7
10015138:	1e6f      	subs	r7, r5, #1
1001513a:	41bd      	sbcs	r5, r7
1001513c:	b2ec      	uxtb	r4, r5
1001513e:	2700      	movs	r7, #0
10015140:	1b0d      	subs	r5, r1, r4
10015142:	e760      	b.n	10015006 <__aeabi_dsub+0x416>
10015144:	4c52      	ldr	r4, [pc, #328]	; (10015290 <__aeabi_dsub+0x6a0>)
10015146:	42a2      	cmp	r2, r4
10015148:	d036      	beq.n	100151b8 <__aeabi_dsub+0x5c8>
1001514a:	4274      	negs	r4, r6
1001514c:	2680      	movs	r6, #128	; 0x80
1001514e:	0436      	lsls	r6, r6, #16
10015150:	46a1      	mov	r9, r4
10015152:	4337      	orrs	r7, r6
10015154:	e7be      	b.n	100150d4 <__aeabi_dsub+0x4e4>
10015156:	0002      	movs	r2, r0
10015158:	430a      	orrs	r2, r1
1001515a:	d100      	bne.n	1001515e <__aeabi_dsub+0x56e>
1001515c:	e574      	b.n	10014c48 <__aeabi_dsub+0x58>
1001515e:	1a6a      	subs	r2, r5, r1
10015160:	4690      	mov	r8, r2
10015162:	4545      	cmp	r5, r8
10015164:	41b6      	sbcs	r6, r6
10015166:	1a3a      	subs	r2, r7, r0
10015168:	4276      	negs	r6, r6
1001516a:	1b92      	subs	r2, r2, r6
1001516c:	4694      	mov	ip, r2
1001516e:	0212      	lsls	r2, r2, #8
10015170:	d400      	bmi.n	10015174 <__aeabi_dsub+0x584>
10015172:	e5f7      	b.n	10014d64 <__aeabi_dsub+0x174>
10015174:	1b4d      	subs	r5, r1, r5
10015176:	42a9      	cmp	r1, r5
10015178:	4189      	sbcs	r1, r1
1001517a:	1bc7      	subs	r7, r0, r7
1001517c:	4249      	negs	r1, r1
1001517e:	1a7f      	subs	r7, r7, r1
10015180:	469a      	mov	sl, r3
10015182:	e561      	b.n	10014c48 <__aeabi_dsub+0x58>
10015184:	0002      	movs	r2, r0
10015186:	430a      	orrs	r2, r1
10015188:	d03a      	beq.n	10015200 <__aeabi_dsub+0x610>
1001518a:	08ed      	lsrs	r5, r5, #3
1001518c:	077c      	lsls	r4, r7, #29
1001518e:	432c      	orrs	r4, r5
10015190:	2580      	movs	r5, #128	; 0x80
10015192:	08fa      	lsrs	r2, r7, #3
10015194:	032d      	lsls	r5, r5, #12
10015196:	422a      	tst	r2, r5
10015198:	d008      	beq.n	100151ac <__aeabi_dsub+0x5bc>
1001519a:	08c7      	lsrs	r7, r0, #3
1001519c:	422f      	tst	r7, r5
1001519e:	d105      	bne.n	100151ac <__aeabi_dsub+0x5bc>
100151a0:	0745      	lsls	r5, r0, #29
100151a2:	002c      	movs	r4, r5
100151a4:	003a      	movs	r2, r7
100151a6:	469a      	mov	sl, r3
100151a8:	08c9      	lsrs	r1, r1, #3
100151aa:	430c      	orrs	r4, r1
100151ac:	0f67      	lsrs	r7, r4, #29
100151ae:	00d2      	lsls	r2, r2, #3
100151b0:	00e5      	lsls	r5, r4, #3
100151b2:	4317      	orrs	r7, r2
100151b4:	4c36      	ldr	r4, [pc, #216]	; (10015290 <__aeabi_dsub+0x6a0>)
100151b6:	e547      	b.n	10014c48 <__aeabi_dsub+0x58>
100151b8:	0007      	movs	r7, r0
100151ba:	000d      	movs	r5, r1
100151bc:	0014      	movs	r4, r2
100151be:	e543      	b.n	10014c48 <__aeabi_dsub+0x58>
100151c0:	003a      	movs	r2, r7
100151c2:	432a      	orrs	r2, r5
100151c4:	d043      	beq.n	1001524e <__aeabi_dsub+0x65e>
100151c6:	0002      	movs	r2, r0
100151c8:	430a      	orrs	r2, r1
100151ca:	d019      	beq.n	10015200 <__aeabi_dsub+0x610>
100151cc:	08ed      	lsrs	r5, r5, #3
100151ce:	077c      	lsls	r4, r7, #29
100151d0:	432c      	orrs	r4, r5
100151d2:	2580      	movs	r5, #128	; 0x80
100151d4:	08fa      	lsrs	r2, r7, #3
100151d6:	032d      	lsls	r5, r5, #12
100151d8:	422a      	tst	r2, r5
100151da:	d007      	beq.n	100151ec <__aeabi_dsub+0x5fc>
100151dc:	08c6      	lsrs	r6, r0, #3
100151de:	422e      	tst	r6, r5
100151e0:	d104      	bne.n	100151ec <__aeabi_dsub+0x5fc>
100151e2:	0747      	lsls	r7, r0, #29
100151e4:	003c      	movs	r4, r7
100151e6:	0032      	movs	r2, r6
100151e8:	08c9      	lsrs	r1, r1, #3
100151ea:	430c      	orrs	r4, r1
100151ec:	00d7      	lsls	r7, r2, #3
100151ee:	0f62      	lsrs	r2, r4, #29
100151f0:	00e5      	lsls	r5, r4, #3
100151f2:	4317      	orrs	r7, r2
100151f4:	469a      	mov	sl, r3
100151f6:	4c26      	ldr	r4, [pc, #152]	; (10015290 <__aeabi_dsub+0x6a0>)
100151f8:	e526      	b.n	10014c48 <__aeabi_dsub+0x58>
100151fa:	2200      	movs	r2, #0
100151fc:	2500      	movs	r5, #0
100151fe:	e544      	b.n	10014c8a <__aeabi_dsub+0x9a>
10015200:	4c23      	ldr	r4, [pc, #140]	; (10015290 <__aeabi_dsub+0x6a0>)
10015202:	e521      	b.n	10014c48 <__aeabi_dsub+0x58>
10015204:	2000      	movs	r0, #0
10015206:	e749      	b.n	1001509c <__aeabi_dsub+0x4ac>
10015208:	2300      	movs	r3, #0
1001520a:	2500      	movs	r5, #0
1001520c:	e5bb      	b.n	10014d86 <__aeabi_dsub+0x196>
1001520e:	464c      	mov	r4, r9
10015210:	003e      	movs	r6, r7
10015212:	3c20      	subs	r4, #32
10015214:	40e6      	lsrs	r6, r4
10015216:	464c      	mov	r4, r9
10015218:	46b4      	mov	ip, r6
1001521a:	2c20      	cmp	r4, #32
1001521c:	d031      	beq.n	10015282 <__aeabi_dsub+0x692>
1001521e:	2440      	movs	r4, #64	; 0x40
10015220:	464e      	mov	r6, r9
10015222:	1ba6      	subs	r6, r4, r6
10015224:	40b7      	lsls	r7, r6
10015226:	433d      	orrs	r5, r7
10015228:	1e6c      	subs	r4, r5, #1
1001522a:	41a5      	sbcs	r5, r4
1001522c:	4664      	mov	r4, ip
1001522e:	432c      	orrs	r4, r5
10015230:	2700      	movs	r7, #0
10015232:	1b0d      	subs	r5, r1, r4
10015234:	e6e7      	b.n	10015006 <__aeabi_dsub+0x416>
10015236:	2280      	movs	r2, #128	; 0x80
10015238:	2300      	movs	r3, #0
1001523a:	0312      	lsls	r2, r2, #12
1001523c:	4c14      	ldr	r4, [pc, #80]	; (10015290 <__aeabi_dsub+0x6a0>)
1001523e:	2500      	movs	r5, #0
10015240:	e5a1      	b.n	10014d86 <__aeabi_dsub+0x196>
10015242:	433d      	orrs	r5, r7
10015244:	1e6f      	subs	r7, r5, #1
10015246:	41bd      	sbcs	r5, r7
10015248:	2700      	movs	r7, #0
1001524a:	b2ed      	uxtb	r5, r5
1001524c:	e760      	b.n	10015110 <__aeabi_dsub+0x520>
1001524e:	0007      	movs	r7, r0
10015250:	000d      	movs	r5, r1
10015252:	4c0f      	ldr	r4, [pc, #60]	; (10015290 <__aeabi_dsub+0x6a0>)
10015254:	e4f8      	b.n	10014c48 <__aeabi_dsub+0x58>
10015256:	0007      	movs	r7, r0
10015258:	000d      	movs	r5, r1
1001525a:	e4f5      	b.n	10014c48 <__aeabi_dsub+0x58>
1001525c:	464e      	mov	r6, r9
1001525e:	003c      	movs	r4, r7
10015260:	3e20      	subs	r6, #32
10015262:	40f4      	lsrs	r4, r6
10015264:	46a0      	mov	r8, r4
10015266:	464c      	mov	r4, r9
10015268:	2c20      	cmp	r4, #32
1001526a:	d00e      	beq.n	1001528a <__aeabi_dsub+0x69a>
1001526c:	2440      	movs	r4, #64	; 0x40
1001526e:	464e      	mov	r6, r9
10015270:	1ba4      	subs	r4, r4, r6
10015272:	40a7      	lsls	r7, r4
10015274:	433d      	orrs	r5, r7
10015276:	1e6f      	subs	r7, r5, #1
10015278:	41bd      	sbcs	r5, r7
1001527a:	4644      	mov	r4, r8
1001527c:	2700      	movs	r7, #0
1001527e:	4325      	orrs	r5, r4
10015280:	e746      	b.n	10015110 <__aeabi_dsub+0x520>
10015282:	2700      	movs	r7, #0
10015284:	e7cf      	b.n	10015226 <__aeabi_dsub+0x636>
10015286:	000d      	movs	r5, r1
10015288:	e573      	b.n	10014d72 <__aeabi_dsub+0x182>
1001528a:	2700      	movs	r7, #0
1001528c:	e7f2      	b.n	10015274 <__aeabi_dsub+0x684>
1001528e:	46c0      	nop			; (mov r8, r8)
10015290:	000007ff 	.word	0x000007ff
10015294:	ff7fffff 	.word	0xff7fffff

10015298 <__aeabi_dcmpun>:
10015298:	b570      	push	{r4, r5, r6, lr}
1001529a:	4e0e      	ldr	r6, [pc, #56]	; (100152d4 <__aeabi_dcmpun+0x3c>)
1001529c:	030c      	lsls	r4, r1, #12
1001529e:	031d      	lsls	r5, r3, #12
100152a0:	0049      	lsls	r1, r1, #1
100152a2:	005b      	lsls	r3, r3, #1
100152a4:	0b24      	lsrs	r4, r4, #12
100152a6:	0d49      	lsrs	r1, r1, #21
100152a8:	0b2d      	lsrs	r5, r5, #12
100152aa:	0d5b      	lsrs	r3, r3, #21
100152ac:	42b1      	cmp	r1, r6
100152ae:	d004      	beq.n	100152ba <__aeabi_dcmpun+0x22>
100152b0:	4908      	ldr	r1, [pc, #32]	; (100152d4 <__aeabi_dcmpun+0x3c>)
100152b2:	2000      	movs	r0, #0
100152b4:	428b      	cmp	r3, r1
100152b6:	d008      	beq.n	100152ca <__aeabi_dcmpun+0x32>
100152b8:	bd70      	pop	{r4, r5, r6, pc}
100152ba:	4304      	orrs	r4, r0
100152bc:	2001      	movs	r0, #1
100152be:	2c00      	cmp	r4, #0
100152c0:	d1fa      	bne.n	100152b8 <__aeabi_dcmpun+0x20>
100152c2:	4904      	ldr	r1, [pc, #16]	; (100152d4 <__aeabi_dcmpun+0x3c>)
100152c4:	2000      	movs	r0, #0
100152c6:	428b      	cmp	r3, r1
100152c8:	d1f6      	bne.n	100152b8 <__aeabi_dcmpun+0x20>
100152ca:	4315      	orrs	r5, r2
100152cc:	0028      	movs	r0, r5
100152ce:	1e45      	subs	r5, r0, #1
100152d0:	41a8      	sbcs	r0, r5
100152d2:	e7f1      	b.n	100152b8 <__aeabi_dcmpun+0x20>
100152d4:	000007ff 	.word	0x000007ff

100152d8 <__aeabi_d2iz>:
100152d8:	030b      	lsls	r3, r1, #12
100152da:	b530      	push	{r4, r5, lr}
100152dc:	4d13      	ldr	r5, [pc, #76]	; (1001532c <__aeabi_d2iz+0x54>)
100152de:	0b1a      	lsrs	r2, r3, #12
100152e0:	004b      	lsls	r3, r1, #1
100152e2:	0d5b      	lsrs	r3, r3, #21
100152e4:	0fc9      	lsrs	r1, r1, #31
100152e6:	2400      	movs	r4, #0
100152e8:	42ab      	cmp	r3, r5
100152ea:	dd11      	ble.n	10015310 <__aeabi_d2iz+0x38>
100152ec:	4c10      	ldr	r4, [pc, #64]	; (10015330 <__aeabi_d2iz+0x58>)
100152ee:	42a3      	cmp	r3, r4
100152f0:	dc10      	bgt.n	10015314 <__aeabi_d2iz+0x3c>
100152f2:	2480      	movs	r4, #128	; 0x80
100152f4:	0364      	lsls	r4, r4, #13
100152f6:	4322      	orrs	r2, r4
100152f8:	4c0e      	ldr	r4, [pc, #56]	; (10015334 <__aeabi_d2iz+0x5c>)
100152fa:	1ae4      	subs	r4, r4, r3
100152fc:	2c1f      	cmp	r4, #31
100152fe:	dd0c      	ble.n	1001531a <__aeabi_d2iz+0x42>
10015300:	480d      	ldr	r0, [pc, #52]	; (10015338 <__aeabi_d2iz+0x60>)
10015302:	1ac3      	subs	r3, r0, r3
10015304:	40da      	lsrs	r2, r3
10015306:	0013      	movs	r3, r2
10015308:	425c      	negs	r4, r3
1001530a:	2900      	cmp	r1, #0
1001530c:	d100      	bne.n	10015310 <__aeabi_d2iz+0x38>
1001530e:	001c      	movs	r4, r3
10015310:	0020      	movs	r0, r4
10015312:	bd30      	pop	{r4, r5, pc}
10015314:	4b09      	ldr	r3, [pc, #36]	; (1001533c <__aeabi_d2iz+0x64>)
10015316:	18cc      	adds	r4, r1, r3
10015318:	e7fa      	b.n	10015310 <__aeabi_d2iz+0x38>
1001531a:	40e0      	lsrs	r0, r4
1001531c:	4c08      	ldr	r4, [pc, #32]	; (10015340 <__aeabi_d2iz+0x68>)
1001531e:	46a4      	mov	ip, r4
10015320:	4463      	add	r3, ip
10015322:	409a      	lsls	r2, r3
10015324:	0013      	movs	r3, r2
10015326:	4303      	orrs	r3, r0
10015328:	e7ee      	b.n	10015308 <__aeabi_d2iz+0x30>
1001532a:	46c0      	nop			; (mov r8, r8)
1001532c:	000003fe 	.word	0x000003fe
10015330:	0000041d 	.word	0x0000041d
10015334:	00000433 	.word	0x00000433
10015338:	00000413 	.word	0x00000413
1001533c:	7fffffff 	.word	0x7fffffff
10015340:	fffffbed 	.word	0xfffffbed

10015344 <__aeabi_i2d>:
10015344:	b570      	push	{r4, r5, r6, lr}
10015346:	2800      	cmp	r0, #0
10015348:	d030      	beq.n	100153ac <__aeabi_i2d+0x68>
1001534a:	17c3      	asrs	r3, r0, #31
1001534c:	18c4      	adds	r4, r0, r3
1001534e:	405c      	eors	r4, r3
10015350:	0fc5      	lsrs	r5, r0, #31
10015352:	0020      	movs	r0, r4
10015354:	f000 f950 	bl	100155f8 <__clzsi2>
10015358:	4b17      	ldr	r3, [pc, #92]	; (100153b8 <__aeabi_i2d+0x74>)
1001535a:	4a18      	ldr	r2, [pc, #96]	; (100153bc <__aeabi_i2d+0x78>)
1001535c:	1a1b      	subs	r3, r3, r0
1001535e:	1ad2      	subs	r2, r2, r3
10015360:	2a1f      	cmp	r2, #31
10015362:	dd18      	ble.n	10015396 <__aeabi_i2d+0x52>
10015364:	4a16      	ldr	r2, [pc, #88]	; (100153c0 <__aeabi_i2d+0x7c>)
10015366:	1ad2      	subs	r2, r2, r3
10015368:	4094      	lsls	r4, r2
1001536a:	2200      	movs	r2, #0
1001536c:	0324      	lsls	r4, r4, #12
1001536e:	055b      	lsls	r3, r3, #21
10015370:	0b24      	lsrs	r4, r4, #12
10015372:	0d5b      	lsrs	r3, r3, #21
10015374:	2100      	movs	r1, #0
10015376:	0010      	movs	r0, r2
10015378:	0324      	lsls	r4, r4, #12
1001537a:	0d0a      	lsrs	r2, r1, #20
1001537c:	0512      	lsls	r2, r2, #20
1001537e:	0b24      	lsrs	r4, r4, #12
10015380:	4314      	orrs	r4, r2
10015382:	4a10      	ldr	r2, [pc, #64]	; (100153c4 <__aeabi_i2d+0x80>)
10015384:	051b      	lsls	r3, r3, #20
10015386:	4014      	ands	r4, r2
10015388:	431c      	orrs	r4, r3
1001538a:	0064      	lsls	r4, r4, #1
1001538c:	07ed      	lsls	r5, r5, #31
1001538e:	0864      	lsrs	r4, r4, #1
10015390:	432c      	orrs	r4, r5
10015392:	0021      	movs	r1, r4
10015394:	bd70      	pop	{r4, r5, r6, pc}
10015396:	0021      	movs	r1, r4
10015398:	4091      	lsls	r1, r2
1001539a:	000a      	movs	r2, r1
1001539c:	210b      	movs	r1, #11
1001539e:	1a08      	subs	r0, r1, r0
100153a0:	40c4      	lsrs	r4, r0
100153a2:	055b      	lsls	r3, r3, #21
100153a4:	0324      	lsls	r4, r4, #12
100153a6:	0b24      	lsrs	r4, r4, #12
100153a8:	0d5b      	lsrs	r3, r3, #21
100153aa:	e7e3      	b.n	10015374 <__aeabi_i2d+0x30>
100153ac:	2500      	movs	r5, #0
100153ae:	2300      	movs	r3, #0
100153b0:	2400      	movs	r4, #0
100153b2:	2200      	movs	r2, #0
100153b4:	e7de      	b.n	10015374 <__aeabi_i2d+0x30>
100153b6:	46c0      	nop			; (mov r8, r8)
100153b8:	0000041e 	.word	0x0000041e
100153bc:	00000433 	.word	0x00000433
100153c0:	00000413 	.word	0x00000413
100153c4:	800fffff 	.word	0x800fffff

100153c8 <__aeabi_ui2d>:
100153c8:	b570      	push	{r4, r5, r6, lr}
100153ca:	1e05      	subs	r5, r0, #0
100153cc:	d028      	beq.n	10015420 <__aeabi_ui2d+0x58>
100153ce:	f000 f913 	bl	100155f8 <__clzsi2>
100153d2:	4b15      	ldr	r3, [pc, #84]	; (10015428 <__aeabi_ui2d+0x60>)
100153d4:	4a15      	ldr	r2, [pc, #84]	; (1001542c <__aeabi_ui2d+0x64>)
100153d6:	1a1b      	subs	r3, r3, r0
100153d8:	1ad2      	subs	r2, r2, r3
100153da:	2a1f      	cmp	r2, #31
100153dc:	dd16      	ble.n	1001540c <__aeabi_ui2d+0x44>
100153de:	002c      	movs	r4, r5
100153e0:	4a13      	ldr	r2, [pc, #76]	; (10015430 <__aeabi_ui2d+0x68>)
100153e2:	2500      	movs	r5, #0
100153e4:	1ad2      	subs	r2, r2, r3
100153e6:	4094      	lsls	r4, r2
100153e8:	055a      	lsls	r2, r3, #21
100153ea:	0324      	lsls	r4, r4, #12
100153ec:	0b24      	lsrs	r4, r4, #12
100153ee:	0d52      	lsrs	r2, r2, #21
100153f0:	2100      	movs	r1, #0
100153f2:	0324      	lsls	r4, r4, #12
100153f4:	0d0b      	lsrs	r3, r1, #20
100153f6:	0b24      	lsrs	r4, r4, #12
100153f8:	051b      	lsls	r3, r3, #20
100153fa:	4323      	orrs	r3, r4
100153fc:	4c0d      	ldr	r4, [pc, #52]	; (10015434 <__aeabi_ui2d+0x6c>)
100153fe:	0512      	lsls	r2, r2, #20
10015400:	4023      	ands	r3, r4
10015402:	4313      	orrs	r3, r2
10015404:	005b      	lsls	r3, r3, #1
10015406:	0028      	movs	r0, r5
10015408:	0859      	lsrs	r1, r3, #1
1001540a:	bd70      	pop	{r4, r5, r6, pc}
1001540c:	210b      	movs	r1, #11
1001540e:	002c      	movs	r4, r5
10015410:	1a08      	subs	r0, r1, r0
10015412:	40c4      	lsrs	r4, r0
10015414:	4095      	lsls	r5, r2
10015416:	0324      	lsls	r4, r4, #12
10015418:	055a      	lsls	r2, r3, #21
1001541a:	0b24      	lsrs	r4, r4, #12
1001541c:	0d52      	lsrs	r2, r2, #21
1001541e:	e7e7      	b.n	100153f0 <__aeabi_ui2d+0x28>
10015420:	2200      	movs	r2, #0
10015422:	2400      	movs	r4, #0
10015424:	e7e4      	b.n	100153f0 <__aeabi_ui2d+0x28>
10015426:	46c0      	nop			; (mov r8, r8)
10015428:	0000041e 	.word	0x0000041e
1001542c:	00000433 	.word	0x00000433
10015430:	00000413 	.word	0x00000413
10015434:	800fffff 	.word	0x800fffff

10015438 <__aeabi_f2d>:
10015438:	0042      	lsls	r2, r0, #1
1001543a:	0e12      	lsrs	r2, r2, #24
1001543c:	1c51      	adds	r1, r2, #1
1001543e:	0243      	lsls	r3, r0, #9
10015440:	b2c9      	uxtb	r1, r1
10015442:	b570      	push	{r4, r5, r6, lr}
10015444:	0a5d      	lsrs	r5, r3, #9
10015446:	0fc4      	lsrs	r4, r0, #31
10015448:	2901      	cmp	r1, #1
1001544a:	dd15      	ble.n	10015478 <__aeabi_f2d+0x40>
1001544c:	21e0      	movs	r1, #224	; 0xe0
1001544e:	0089      	lsls	r1, r1, #2
10015450:	468c      	mov	ip, r1
10015452:	076d      	lsls	r5, r5, #29
10015454:	0b1b      	lsrs	r3, r3, #12
10015456:	4462      	add	r2, ip
10015458:	2100      	movs	r1, #0
1001545a:	0028      	movs	r0, r5
1001545c:	0d0d      	lsrs	r5, r1, #20
1001545e:	052d      	lsls	r5, r5, #20
10015460:	432b      	orrs	r3, r5
10015462:	4d1c      	ldr	r5, [pc, #112]	; (100154d4 <__aeabi_f2d+0x9c>)
10015464:	0552      	lsls	r2, r2, #21
10015466:	402b      	ands	r3, r5
10015468:	0852      	lsrs	r2, r2, #1
1001546a:	4313      	orrs	r3, r2
1001546c:	005b      	lsls	r3, r3, #1
1001546e:	07e4      	lsls	r4, r4, #31
10015470:	085b      	lsrs	r3, r3, #1
10015472:	4323      	orrs	r3, r4
10015474:	0019      	movs	r1, r3
10015476:	bd70      	pop	{r4, r5, r6, pc}
10015478:	2a00      	cmp	r2, #0
1001547a:	d115      	bne.n	100154a8 <__aeabi_f2d+0x70>
1001547c:	2d00      	cmp	r5, #0
1001547e:	d01f      	beq.n	100154c0 <__aeabi_f2d+0x88>
10015480:	0028      	movs	r0, r5
10015482:	f000 f8b9 	bl	100155f8 <__clzsi2>
10015486:	280a      	cmp	r0, #10
10015488:	dc1d      	bgt.n	100154c6 <__aeabi_f2d+0x8e>
1001548a:	230b      	movs	r3, #11
1001548c:	002a      	movs	r2, r5
1001548e:	1a1b      	subs	r3, r3, r0
10015490:	40da      	lsrs	r2, r3
10015492:	0013      	movs	r3, r2
10015494:	0002      	movs	r2, r0
10015496:	3215      	adds	r2, #21
10015498:	4095      	lsls	r5, r2
1001549a:	4a0f      	ldr	r2, [pc, #60]	; (100154d8 <__aeabi_f2d+0xa0>)
1001549c:	031b      	lsls	r3, r3, #12
1001549e:	1a12      	subs	r2, r2, r0
100154a0:	0552      	lsls	r2, r2, #21
100154a2:	0b1b      	lsrs	r3, r3, #12
100154a4:	0d52      	lsrs	r2, r2, #21
100154a6:	e7d7      	b.n	10015458 <__aeabi_f2d+0x20>
100154a8:	2d00      	cmp	r5, #0
100154aa:	d006      	beq.n	100154ba <__aeabi_f2d+0x82>
100154ac:	2280      	movs	r2, #128	; 0x80
100154ae:	0b1b      	lsrs	r3, r3, #12
100154b0:	0312      	lsls	r2, r2, #12
100154b2:	4313      	orrs	r3, r2
100154b4:	076d      	lsls	r5, r5, #29
100154b6:	4a09      	ldr	r2, [pc, #36]	; (100154dc <__aeabi_f2d+0xa4>)
100154b8:	e7ce      	b.n	10015458 <__aeabi_f2d+0x20>
100154ba:	4a08      	ldr	r2, [pc, #32]	; (100154dc <__aeabi_f2d+0xa4>)
100154bc:	2300      	movs	r3, #0
100154be:	e7cb      	b.n	10015458 <__aeabi_f2d+0x20>
100154c0:	2200      	movs	r2, #0
100154c2:	2300      	movs	r3, #0
100154c4:	e7c8      	b.n	10015458 <__aeabi_f2d+0x20>
100154c6:	0003      	movs	r3, r0
100154c8:	3b0b      	subs	r3, #11
100154ca:	409d      	lsls	r5, r3
100154cc:	002b      	movs	r3, r5
100154ce:	2500      	movs	r5, #0
100154d0:	e7e3      	b.n	1001549a <__aeabi_f2d+0x62>
100154d2:	46c0      	nop			; (mov r8, r8)
100154d4:	800fffff 	.word	0x800fffff
100154d8:	00000389 	.word	0x00000389
100154dc:	000007ff 	.word	0x000007ff

100154e0 <__aeabi_d2f>:
100154e0:	004b      	lsls	r3, r1, #1
100154e2:	b570      	push	{r4, r5, r6, lr}
100154e4:	0d5e      	lsrs	r6, r3, #21
100154e6:	030c      	lsls	r4, r1, #12
100154e8:	1c75      	adds	r5, r6, #1
100154ea:	0a64      	lsrs	r4, r4, #9
100154ec:	0f42      	lsrs	r2, r0, #29
100154ee:	056d      	lsls	r5, r5, #21
100154f0:	4322      	orrs	r2, r4
100154f2:	0fc9      	lsrs	r1, r1, #31
100154f4:	00c4      	lsls	r4, r0, #3
100154f6:	0d6d      	lsrs	r5, r5, #21
100154f8:	2d01      	cmp	r5, #1
100154fa:	dd2a      	ble.n	10015552 <__aeabi_d2f+0x72>
100154fc:	4b3b      	ldr	r3, [pc, #236]	; (100155ec <__aeabi_d2f+0x10c>)
100154fe:	18f3      	adds	r3, r6, r3
10015500:	2bfe      	cmp	r3, #254	; 0xfe
10015502:	dc1a      	bgt.n	1001553a <__aeabi_d2f+0x5a>
10015504:	2b00      	cmp	r3, #0
10015506:	dd42      	ble.n	1001558e <__aeabi_d2f+0xae>
10015508:	0180      	lsls	r0, r0, #6
1001550a:	1e45      	subs	r5, r0, #1
1001550c:	41a8      	sbcs	r0, r5
1001550e:	00d2      	lsls	r2, r2, #3
10015510:	4310      	orrs	r0, r2
10015512:	0f62      	lsrs	r2, r4, #29
10015514:	4302      	orrs	r2, r0
10015516:	0750      	lsls	r0, r2, #29
10015518:	d004      	beq.n	10015524 <__aeabi_d2f+0x44>
1001551a:	200f      	movs	r0, #15
1001551c:	4010      	ands	r0, r2
1001551e:	2804      	cmp	r0, #4
10015520:	d000      	beq.n	10015524 <__aeabi_d2f+0x44>
10015522:	3204      	adds	r2, #4
10015524:	2080      	movs	r0, #128	; 0x80
10015526:	04c0      	lsls	r0, r0, #19
10015528:	4010      	ands	r0, r2
1001552a:	d021      	beq.n	10015570 <__aeabi_d2f+0x90>
1001552c:	3301      	adds	r3, #1
1001552e:	2bff      	cmp	r3, #255	; 0xff
10015530:	d003      	beq.n	1001553a <__aeabi_d2f+0x5a>
10015532:	0192      	lsls	r2, r2, #6
10015534:	0a52      	lsrs	r2, r2, #9
10015536:	b2db      	uxtb	r3, r3
10015538:	e001      	b.n	1001553e <__aeabi_d2f+0x5e>
1001553a:	23ff      	movs	r3, #255	; 0xff
1001553c:	2200      	movs	r2, #0
1001553e:	0252      	lsls	r2, r2, #9
10015540:	0a52      	lsrs	r2, r2, #9
10015542:	05db      	lsls	r3, r3, #23
10015544:	4313      	orrs	r3, r2
10015546:	005b      	lsls	r3, r3, #1
10015548:	07c9      	lsls	r1, r1, #31
1001554a:	085b      	lsrs	r3, r3, #1
1001554c:	430b      	orrs	r3, r1
1001554e:	0018      	movs	r0, r3
10015550:	bd70      	pop	{r4, r5, r6, pc}
10015552:	2e00      	cmp	r6, #0
10015554:	d007      	beq.n	10015566 <__aeabi_d2f+0x86>
10015556:	4314      	orrs	r4, r2
10015558:	d0ef      	beq.n	1001553a <__aeabi_d2f+0x5a>
1001555a:	2080      	movs	r0, #128	; 0x80
1001555c:	00d2      	lsls	r2, r2, #3
1001555e:	0480      	lsls	r0, r0, #18
10015560:	4302      	orrs	r2, r0
10015562:	23ff      	movs	r3, #255	; 0xff
10015564:	e7d7      	b.n	10015516 <__aeabi_d2f+0x36>
10015566:	4322      	orrs	r2, r4
10015568:	2300      	movs	r3, #0
1001556a:	2a00      	cmp	r2, #0
1001556c:	d003      	beq.n	10015576 <__aeabi_d2f+0x96>
1001556e:	2205      	movs	r2, #5
10015570:	08d2      	lsrs	r2, r2, #3
10015572:	2bff      	cmp	r3, #255	; 0xff
10015574:	d003      	beq.n	1001557e <__aeabi_d2f+0x9e>
10015576:	0252      	lsls	r2, r2, #9
10015578:	0a52      	lsrs	r2, r2, #9
1001557a:	b2db      	uxtb	r3, r3
1001557c:	e7df      	b.n	1001553e <__aeabi_d2f+0x5e>
1001557e:	2a00      	cmp	r2, #0
10015580:	d032      	beq.n	100155e8 <__aeabi_d2f+0x108>
10015582:	2080      	movs	r0, #128	; 0x80
10015584:	03c0      	lsls	r0, r0, #15
10015586:	4302      	orrs	r2, r0
10015588:	0252      	lsls	r2, r2, #9
1001558a:	0a52      	lsrs	r2, r2, #9
1001558c:	e7d7      	b.n	1001553e <__aeabi_d2f+0x5e>
1001558e:	0018      	movs	r0, r3
10015590:	3017      	adds	r0, #23
10015592:	db14      	blt.n	100155be <__aeabi_d2f+0xde>
10015594:	2080      	movs	r0, #128	; 0x80
10015596:	0400      	lsls	r0, r0, #16
10015598:	4302      	orrs	r2, r0
1001559a:	201e      	movs	r0, #30
1001559c:	1ac0      	subs	r0, r0, r3
1001559e:	281f      	cmp	r0, #31
100155a0:	dc0f      	bgt.n	100155c2 <__aeabi_d2f+0xe2>
100155a2:	0025      	movs	r5, r4
100155a4:	4b12      	ldr	r3, [pc, #72]	; (100155f0 <__aeabi_d2f+0x110>)
100155a6:	18f3      	adds	r3, r6, r3
100155a8:	409d      	lsls	r5, r3
100155aa:	1e6e      	subs	r6, r5, #1
100155ac:	41b5      	sbcs	r5, r6
100155ae:	409a      	lsls	r2, r3
100155b0:	002b      	movs	r3, r5
100155b2:	4313      	orrs	r3, r2
100155b4:	0022      	movs	r2, r4
100155b6:	40c2      	lsrs	r2, r0
100155b8:	431a      	orrs	r2, r3
100155ba:	2300      	movs	r3, #0
100155bc:	e7ab      	b.n	10015516 <__aeabi_d2f+0x36>
100155be:	2300      	movs	r3, #0
100155c0:	e7d5      	b.n	1001556e <__aeabi_d2f+0x8e>
100155c2:	2502      	movs	r5, #2
100155c4:	426d      	negs	r5, r5
100155c6:	1aeb      	subs	r3, r5, r3
100155c8:	0015      	movs	r5, r2
100155ca:	40dd      	lsrs	r5, r3
100155cc:	2820      	cmp	r0, #32
100155ce:	d009      	beq.n	100155e4 <__aeabi_d2f+0x104>
100155d0:	4b08      	ldr	r3, [pc, #32]	; (100155f4 <__aeabi_d2f+0x114>)
100155d2:	18f3      	adds	r3, r6, r3
100155d4:	409a      	lsls	r2, r3
100155d6:	4314      	orrs	r4, r2
100155d8:	1e62      	subs	r2, r4, #1
100155da:	4194      	sbcs	r4, r2
100155dc:	0022      	movs	r2, r4
100155de:	2300      	movs	r3, #0
100155e0:	432a      	orrs	r2, r5
100155e2:	e798      	b.n	10015516 <__aeabi_d2f+0x36>
100155e4:	2200      	movs	r2, #0
100155e6:	e7f6      	b.n	100155d6 <__aeabi_d2f+0xf6>
100155e8:	2200      	movs	r2, #0
100155ea:	e7a8      	b.n	1001553e <__aeabi_d2f+0x5e>
100155ec:	fffffc80 	.word	0xfffffc80
100155f0:	fffffc82 	.word	0xfffffc82
100155f4:	fffffca2 	.word	0xfffffca2

100155f8 <__clzsi2>:
100155f8:	211c      	movs	r1, #28
100155fa:	2301      	movs	r3, #1
100155fc:	041b      	lsls	r3, r3, #16
100155fe:	4298      	cmp	r0, r3
10015600:	d301      	bcc.n	10015606 <__clzsi2+0xe>
10015602:	0c00      	lsrs	r0, r0, #16
10015604:	3910      	subs	r1, #16
10015606:	0a1b      	lsrs	r3, r3, #8
10015608:	4298      	cmp	r0, r3
1001560a:	d301      	bcc.n	10015610 <__clzsi2+0x18>
1001560c:	0a00      	lsrs	r0, r0, #8
1001560e:	3908      	subs	r1, #8
10015610:	091b      	lsrs	r3, r3, #4
10015612:	4298      	cmp	r0, r3
10015614:	d301      	bcc.n	1001561a <__clzsi2+0x22>
10015616:	0900      	lsrs	r0, r0, #4
10015618:	3904      	subs	r1, #4
1001561a:	a202      	add	r2, pc, #8	; (adr r2, 10015624 <__clzsi2+0x2c>)
1001561c:	5c10      	ldrb	r0, [r2, r0]
1001561e:	1840      	adds	r0, r0, r1
10015620:	4770      	bx	lr
10015622:	46c0      	nop			; (mov r8, r8)
10015624:	02020304 	.word	0x02020304
10015628:	01010101 	.word	0x01010101
	...

10015634 <__errno>:
10015634:	4b01      	ldr	r3, [pc, #4]	; (1001563c <__errno+0x8>)
10015636:	6818      	ldr	r0, [r3, #0]
10015638:	4770      	bx	lr
1001563a:	46c0      	nop			; (mov r8, r8)
1001563c:	100183a0 	.word	0x100183a0

10015640 <__libc_init_array>:
10015640:	4b0e      	ldr	r3, [pc, #56]	; (1001567c <__libc_init_array+0x3c>)
10015642:	b570      	push	{r4, r5, r6, lr}
10015644:	2500      	movs	r5, #0
10015646:	001e      	movs	r6, r3
10015648:	4c0d      	ldr	r4, [pc, #52]	; (10015680 <__libc_init_array+0x40>)
1001564a:	1ae4      	subs	r4, r4, r3
1001564c:	10a4      	asrs	r4, r4, #2
1001564e:	42a5      	cmp	r5, r4
10015650:	d004      	beq.n	1001565c <__libc_init_array+0x1c>
10015652:	00ab      	lsls	r3, r5, #2
10015654:	58f3      	ldr	r3, [r6, r3]
10015656:	4798      	blx	r3
10015658:	3501      	adds	r5, #1
1001565a:	e7f8      	b.n	1001564e <__libc_init_array+0xe>
1001565c:	f002 fe5a 	bl	10018314 <_init>
10015660:	4b08      	ldr	r3, [pc, #32]	; (10015684 <__libc_init_array+0x44>)
10015662:	2500      	movs	r5, #0
10015664:	001e      	movs	r6, r3
10015666:	4c08      	ldr	r4, [pc, #32]	; (10015688 <__libc_init_array+0x48>)
10015668:	1ae4      	subs	r4, r4, r3
1001566a:	10a4      	asrs	r4, r4, #2
1001566c:	42a5      	cmp	r5, r4
1001566e:	d004      	beq.n	1001567a <__libc_init_array+0x3a>
10015670:	00ab      	lsls	r3, r5, #2
10015672:	58f3      	ldr	r3, [r6, r3]
10015674:	4798      	blx	r3
10015676:	3501      	adds	r5, #1
10015678:	e7f8      	b.n	1001566c <__libc_init_array+0x2c>
1001567a:	bd70      	pop	{r4, r5, r6, pc}
1001567c:	10018320 	.word	0x10018320
10015680:	10018320 	.word	0x10018320
10015684:	10018320 	.word	0x10018320
10015688:	10018324 	.word	0x10018324

1001568c <malloc>:
1001568c:	b510      	push	{r4, lr}
1001568e:	4b03      	ldr	r3, [pc, #12]	; (1001569c <malloc+0x10>)
10015690:	0001      	movs	r1, r0
10015692:	6818      	ldr	r0, [r3, #0]
10015694:	f000 f86a 	bl	1001576c <_malloc_r>
10015698:	bd10      	pop	{r4, pc}
1001569a:	46c0      	nop			; (mov r8, r8)
1001569c:	100183a0 	.word	0x100183a0

100156a0 <memcmp>:
100156a0:	b530      	push	{r4, r5, lr}
100156a2:	2400      	movs	r4, #0
100156a4:	42a2      	cmp	r2, r4
100156a6:	d008      	beq.n	100156ba <memcmp+0x1a>
100156a8:	5d03      	ldrb	r3, [r0, r4]
100156aa:	1c65      	adds	r5, r4, #1
100156ac:	5d0c      	ldrb	r4, [r1, r4]
100156ae:	42a3      	cmp	r3, r4
100156b0:	d001      	beq.n	100156b6 <memcmp+0x16>
100156b2:	1b18      	subs	r0, r3, r4
100156b4:	e002      	b.n	100156bc <memcmp+0x1c>
100156b6:	002c      	movs	r4, r5
100156b8:	e7f4      	b.n	100156a4 <memcmp+0x4>
100156ba:	2000      	movs	r0, #0
100156bc:	bd30      	pop	{r4, r5, pc}

100156be <memcpy>:
100156be:	2300      	movs	r3, #0
100156c0:	b510      	push	{r4, lr}
100156c2:	429a      	cmp	r2, r3
100156c4:	d003      	beq.n	100156ce <memcpy+0x10>
100156c6:	5ccc      	ldrb	r4, [r1, r3]
100156c8:	54c4      	strb	r4, [r0, r3]
100156ca:	3301      	adds	r3, #1
100156cc:	e7f9      	b.n	100156c2 <memcpy+0x4>
100156ce:	bd10      	pop	{r4, pc}

100156d0 <memset>:
100156d0:	0003      	movs	r3, r0
100156d2:	1882      	adds	r2, r0, r2
100156d4:	4293      	cmp	r3, r2
100156d6:	d002      	beq.n	100156de <memset+0xe>
100156d8:	7019      	strb	r1, [r3, #0]
100156da:	3301      	adds	r3, #1
100156dc:	e7fa      	b.n	100156d4 <memset+0x4>
100156de:	4770      	bx	lr

100156e0 <_free_r>:
100156e0:	b530      	push	{r4, r5, lr}
100156e2:	2900      	cmp	r1, #0
100156e4:	d03e      	beq.n	10015764 <_free_r+0x84>
100156e6:	3904      	subs	r1, #4
100156e8:	680b      	ldr	r3, [r1, #0]
100156ea:	2b00      	cmp	r3, #0
100156ec:	da00      	bge.n	100156f0 <_free_r+0x10>
100156ee:	18c9      	adds	r1, r1, r3
100156f0:	4a1d      	ldr	r2, [pc, #116]	; (10015768 <_free_r+0x88>)
100156f2:	6813      	ldr	r3, [r2, #0]
100156f4:	0014      	movs	r4, r2
100156f6:	2b00      	cmp	r3, #0
100156f8:	d102      	bne.n	10015700 <_free_r+0x20>
100156fa:	604b      	str	r3, [r1, #4]
100156fc:	6011      	str	r1, [r2, #0]
100156fe:	e031      	b.n	10015764 <_free_r+0x84>
10015700:	428b      	cmp	r3, r1
10015702:	d90d      	bls.n	10015720 <_free_r+0x40>
10015704:	680a      	ldr	r2, [r1, #0]
10015706:	1888      	adds	r0, r1, r2
10015708:	4283      	cmp	r3, r0
1001570a:	d103      	bne.n	10015714 <_free_r+0x34>
1001570c:	6818      	ldr	r0, [r3, #0]
1001570e:	685b      	ldr	r3, [r3, #4]
10015710:	1882      	adds	r2, r0, r2
10015712:	600a      	str	r2, [r1, #0]
10015714:	604b      	str	r3, [r1, #4]
10015716:	6021      	str	r1, [r4, #0]
10015718:	e024      	b.n	10015764 <_free_r+0x84>
1001571a:	428a      	cmp	r2, r1
1001571c:	d803      	bhi.n	10015726 <_free_r+0x46>
1001571e:	0013      	movs	r3, r2
10015720:	685a      	ldr	r2, [r3, #4]
10015722:	2a00      	cmp	r2, #0
10015724:	d1f9      	bne.n	1001571a <_free_r+0x3a>
10015726:	681d      	ldr	r5, [r3, #0]
10015728:	195c      	adds	r4, r3, r5
1001572a:	428c      	cmp	r4, r1
1001572c:	d10b      	bne.n	10015746 <_free_r+0x66>
1001572e:	6809      	ldr	r1, [r1, #0]
10015730:	1869      	adds	r1, r5, r1
10015732:	1858      	adds	r0, r3, r1
10015734:	6019      	str	r1, [r3, #0]
10015736:	4282      	cmp	r2, r0
10015738:	d114      	bne.n	10015764 <_free_r+0x84>
1001573a:	6810      	ldr	r0, [r2, #0]
1001573c:	6852      	ldr	r2, [r2, #4]
1001573e:	1841      	adds	r1, r0, r1
10015740:	6019      	str	r1, [r3, #0]
10015742:	605a      	str	r2, [r3, #4]
10015744:	e00e      	b.n	10015764 <_free_r+0x84>
10015746:	428c      	cmp	r4, r1
10015748:	d902      	bls.n	10015750 <_free_r+0x70>
1001574a:	230c      	movs	r3, #12
1001574c:	6003      	str	r3, [r0, #0]
1001574e:	e009      	b.n	10015764 <_free_r+0x84>
10015750:	6808      	ldr	r0, [r1, #0]
10015752:	180c      	adds	r4, r1, r0
10015754:	42a2      	cmp	r2, r4
10015756:	d103      	bne.n	10015760 <_free_r+0x80>
10015758:	6814      	ldr	r4, [r2, #0]
1001575a:	6852      	ldr	r2, [r2, #4]
1001575c:	1820      	adds	r0, r4, r0
1001575e:	6008      	str	r0, [r1, #0]
10015760:	604a      	str	r2, [r1, #4]
10015762:	6059      	str	r1, [r3, #4]
10015764:	bd30      	pop	{r4, r5, pc}
10015766:	46c0      	nop			; (mov r8, r8)
10015768:	10019e68 	.word	0x10019e68

1001576c <_malloc_r>:
1001576c:	2303      	movs	r3, #3
1001576e:	b570      	push	{r4, r5, r6, lr}
10015770:	1ccd      	adds	r5, r1, #3
10015772:	439d      	bics	r5, r3
10015774:	3508      	adds	r5, #8
10015776:	0006      	movs	r6, r0
10015778:	2d0c      	cmp	r5, #12
1001577a:	d201      	bcs.n	10015780 <_malloc_r+0x14>
1001577c:	250c      	movs	r5, #12
1001577e:	e005      	b.n	1001578c <_malloc_r+0x20>
10015780:	2d00      	cmp	r5, #0
10015782:	da03      	bge.n	1001578c <_malloc_r+0x20>
10015784:	230c      	movs	r3, #12
10015786:	2000      	movs	r0, #0
10015788:	6033      	str	r3, [r6, #0]
1001578a:	e040      	b.n	1001580e <_malloc_r+0xa2>
1001578c:	42a9      	cmp	r1, r5
1001578e:	d8f9      	bhi.n	10015784 <_malloc_r+0x18>
10015790:	4b1f      	ldr	r3, [pc, #124]	; (10015810 <_malloc_r+0xa4>)
10015792:	681c      	ldr	r4, [r3, #0]
10015794:	001a      	movs	r2, r3
10015796:	0021      	movs	r1, r4
10015798:	2900      	cmp	r1, #0
1001579a:	d013      	beq.n	100157c4 <_malloc_r+0x58>
1001579c:	680b      	ldr	r3, [r1, #0]
1001579e:	1b5b      	subs	r3, r3, r5
100157a0:	d40d      	bmi.n	100157be <_malloc_r+0x52>
100157a2:	2b0b      	cmp	r3, #11
100157a4:	d902      	bls.n	100157ac <_malloc_r+0x40>
100157a6:	600b      	str	r3, [r1, #0]
100157a8:	18cc      	adds	r4, r1, r3
100157aa:	e01e      	b.n	100157ea <_malloc_r+0x7e>
100157ac:	428c      	cmp	r4, r1
100157ae:	d102      	bne.n	100157b6 <_malloc_r+0x4a>
100157b0:	6863      	ldr	r3, [r4, #4]
100157b2:	6013      	str	r3, [r2, #0]
100157b4:	e01a      	b.n	100157ec <_malloc_r+0x80>
100157b6:	684b      	ldr	r3, [r1, #4]
100157b8:	6063      	str	r3, [r4, #4]
100157ba:	000c      	movs	r4, r1
100157bc:	e016      	b.n	100157ec <_malloc_r+0x80>
100157be:	000c      	movs	r4, r1
100157c0:	6849      	ldr	r1, [r1, #4]
100157c2:	e7e9      	b.n	10015798 <_malloc_r+0x2c>
100157c4:	4c13      	ldr	r4, [pc, #76]	; (10015814 <_malloc_r+0xa8>)
100157c6:	6823      	ldr	r3, [r4, #0]
100157c8:	2b00      	cmp	r3, #0
100157ca:	d103      	bne.n	100157d4 <_malloc_r+0x68>
100157cc:	0030      	movs	r0, r6
100157ce:	f000 f8f9 	bl	100159c4 <_sbrk_r>
100157d2:	6020      	str	r0, [r4, #0]
100157d4:	0029      	movs	r1, r5
100157d6:	0030      	movs	r0, r6
100157d8:	f000 f8f4 	bl	100159c4 <_sbrk_r>
100157dc:	1c43      	adds	r3, r0, #1
100157de:	d0d1      	beq.n	10015784 <_malloc_r+0x18>
100157e0:	2303      	movs	r3, #3
100157e2:	1cc4      	adds	r4, r0, #3
100157e4:	439c      	bics	r4, r3
100157e6:	42a0      	cmp	r0, r4
100157e8:	d10a      	bne.n	10015800 <_malloc_r+0x94>
100157ea:	6025      	str	r5, [r4, #0]
100157ec:	0020      	movs	r0, r4
100157ee:	2207      	movs	r2, #7
100157f0:	300b      	adds	r0, #11
100157f2:	1d23      	adds	r3, r4, #4
100157f4:	4390      	bics	r0, r2
100157f6:	1ac3      	subs	r3, r0, r3
100157f8:	d009      	beq.n	1001580e <_malloc_r+0xa2>
100157fa:	425a      	negs	r2, r3
100157fc:	50e2      	str	r2, [r4, r3]
100157fe:	e006      	b.n	1001580e <_malloc_r+0xa2>
10015800:	1a21      	subs	r1, r4, r0
10015802:	0030      	movs	r0, r6
10015804:	f000 f8de 	bl	100159c4 <_sbrk_r>
10015808:	1c43      	adds	r3, r0, #1
1001580a:	d1ee      	bne.n	100157ea <_malloc_r+0x7e>
1001580c:	e7ba      	b.n	10015784 <_malloc_r+0x18>
1001580e:	bd70      	pop	{r4, r5, r6, pc}
10015810:	10019e68 	.word	0x10019e68
10015814:	10019e64 	.word	0x10019e64

10015818 <iprintf>:
10015818:	b40f      	push	{r0, r1, r2, r3}
1001581a:	4b0b      	ldr	r3, [pc, #44]	; (10015848 <iprintf+0x30>)
1001581c:	b513      	push	{r0, r1, r4, lr}
1001581e:	681c      	ldr	r4, [r3, #0]
10015820:	2c00      	cmp	r4, #0
10015822:	d005      	beq.n	10015830 <iprintf+0x18>
10015824:	69a3      	ldr	r3, [r4, #24]
10015826:	2b00      	cmp	r3, #0
10015828:	d102      	bne.n	10015830 <iprintf+0x18>
1001582a:	0020      	movs	r0, r4
1001582c:	f000 fb58 	bl	10015ee0 <__sinit>
10015830:	ab05      	add	r3, sp, #20
10015832:	9a04      	ldr	r2, [sp, #16]
10015834:	68a1      	ldr	r1, [r4, #8]
10015836:	0020      	movs	r0, r4
10015838:	9301      	str	r3, [sp, #4]
1001583a:	f000 fc71 	bl	10016120 <_vfiprintf_r>
1001583e:	bc16      	pop	{r1, r2, r4}
10015840:	bc08      	pop	{r3}
10015842:	b004      	add	sp, #16
10015844:	4718      	bx	r3
10015846:	46c0      	nop			; (mov r8, r8)
10015848:	100183a0 	.word	0x100183a0

1001584c <putchar>:
1001584c:	4b08      	ldr	r3, [pc, #32]	; (10015870 <putchar+0x24>)
1001584e:	b570      	push	{r4, r5, r6, lr}
10015850:	681c      	ldr	r4, [r3, #0]
10015852:	0005      	movs	r5, r0
10015854:	2c00      	cmp	r4, #0
10015856:	d005      	beq.n	10015864 <putchar+0x18>
10015858:	69a3      	ldr	r3, [r4, #24]
1001585a:	2b00      	cmp	r3, #0
1001585c:	d102      	bne.n	10015864 <putchar+0x18>
1001585e:	0020      	movs	r0, r4
10015860:	f000 fb3e 	bl	10015ee0 <__sinit>
10015864:	0029      	movs	r1, r5
10015866:	68a2      	ldr	r2, [r4, #8]
10015868:	0020      	movs	r0, r4
1001586a:	f000 ff05 	bl	10016678 <_putc_r>
1001586e:	bd70      	pop	{r4, r5, r6, pc}
10015870:	100183a0 	.word	0x100183a0

10015874 <_puts_r>:
10015874:	b570      	push	{r4, r5, r6, lr}
10015876:	0005      	movs	r5, r0
10015878:	000e      	movs	r6, r1
1001587a:	2800      	cmp	r0, #0
1001587c:	d004      	beq.n	10015888 <_puts_r+0x14>
1001587e:	6983      	ldr	r3, [r0, #24]
10015880:	2b00      	cmp	r3, #0
10015882:	d101      	bne.n	10015888 <_puts_r+0x14>
10015884:	f000 fb2c 	bl	10015ee0 <__sinit>
10015888:	69ab      	ldr	r3, [r5, #24]
1001588a:	68ac      	ldr	r4, [r5, #8]
1001588c:	2b00      	cmp	r3, #0
1001588e:	d102      	bne.n	10015896 <_puts_r+0x22>
10015890:	0028      	movs	r0, r5
10015892:	f000 fb25 	bl	10015ee0 <__sinit>
10015896:	4b25      	ldr	r3, [pc, #148]	; (1001592c <_puts_r+0xb8>)
10015898:	429c      	cmp	r4, r3
1001589a:	d101      	bne.n	100158a0 <_puts_r+0x2c>
1001589c:	686c      	ldr	r4, [r5, #4]
1001589e:	e008      	b.n	100158b2 <_puts_r+0x3e>
100158a0:	4b23      	ldr	r3, [pc, #140]	; (10015930 <_puts_r+0xbc>)
100158a2:	429c      	cmp	r4, r3
100158a4:	d101      	bne.n	100158aa <_puts_r+0x36>
100158a6:	68ac      	ldr	r4, [r5, #8]
100158a8:	e003      	b.n	100158b2 <_puts_r+0x3e>
100158aa:	4b22      	ldr	r3, [pc, #136]	; (10015934 <_puts_r+0xc0>)
100158ac:	429c      	cmp	r4, r3
100158ae:	d100      	bne.n	100158b2 <_puts_r+0x3e>
100158b0:	68ec      	ldr	r4, [r5, #12]
100158b2:	89a3      	ldrh	r3, [r4, #12]
100158b4:	071b      	lsls	r3, r3, #28
100158b6:	d502      	bpl.n	100158be <_puts_r+0x4a>
100158b8:	6923      	ldr	r3, [r4, #16]
100158ba:	2b00      	cmp	r3, #0
100158bc:	d111      	bne.n	100158e2 <_puts_r+0x6e>
100158be:	0021      	movs	r1, r4
100158c0:	0028      	movs	r0, r5
100158c2:	f000 f9a3 	bl	10015c0c <__swsetup_r>
100158c6:	2800      	cmp	r0, #0
100158c8:	d00b      	beq.n	100158e2 <_puts_r+0x6e>
100158ca:	2001      	movs	r0, #1
100158cc:	4240      	negs	r0, r0
100158ce:	e02b      	b.n	10015928 <_puts_r+0xb4>
100158d0:	3b01      	subs	r3, #1
100158d2:	3601      	adds	r6, #1
100158d4:	60a3      	str	r3, [r4, #8]
100158d6:	2b00      	cmp	r3, #0
100158d8:	db08      	blt.n	100158ec <_puts_r+0x78>
100158da:	6823      	ldr	r3, [r4, #0]
100158dc:	1c5a      	adds	r2, r3, #1
100158de:	6022      	str	r2, [r4, #0]
100158e0:	7019      	strb	r1, [r3, #0]
100158e2:	7831      	ldrb	r1, [r6, #0]
100158e4:	68a3      	ldr	r3, [r4, #8]
100158e6:	2900      	cmp	r1, #0
100158e8:	d1f2      	bne.n	100158d0 <_puts_r+0x5c>
100158ea:	e00b      	b.n	10015904 <_puts_r+0x90>
100158ec:	69a2      	ldr	r2, [r4, #24]
100158ee:	4293      	cmp	r3, r2
100158f0:	db01      	blt.n	100158f6 <_puts_r+0x82>
100158f2:	290a      	cmp	r1, #10
100158f4:	d1f1      	bne.n	100158da <_puts_r+0x66>
100158f6:	0022      	movs	r2, r4
100158f8:	0028      	movs	r0, r5
100158fa:	f000 f92f 	bl	10015b5c <__swbuf_r>
100158fe:	1c43      	adds	r3, r0, #1
10015900:	d1ef      	bne.n	100158e2 <_puts_r+0x6e>
10015902:	e7e2      	b.n	100158ca <_puts_r+0x56>
10015904:	3b01      	subs	r3, #1
10015906:	60a3      	str	r3, [r4, #8]
10015908:	2b00      	cmp	r3, #0
1001590a:	da08      	bge.n	1001591e <_puts_r+0xaa>
1001590c:	0022      	movs	r2, r4
1001590e:	310a      	adds	r1, #10
10015910:	0028      	movs	r0, r5
10015912:	f000 f923 	bl	10015b5c <__swbuf_r>
10015916:	1c43      	adds	r3, r0, #1
10015918:	d0d7      	beq.n	100158ca <_puts_r+0x56>
1001591a:	200a      	movs	r0, #10
1001591c:	e004      	b.n	10015928 <_puts_r+0xb4>
1001591e:	200a      	movs	r0, #10
10015920:	6823      	ldr	r3, [r4, #0]
10015922:	1c5a      	adds	r2, r3, #1
10015924:	6022      	str	r2, [r4, #0]
10015926:	7018      	strb	r0, [r3, #0]
10015928:	bd70      	pop	{r4, r5, r6, pc}
1001592a:	46c0      	nop			; (mov r8, r8)
1001592c:	10018280 	.word	0x10018280
10015930:	100182a0 	.word	0x100182a0
10015934:	100182c0 	.word	0x100182c0

10015938 <puts>:
10015938:	b510      	push	{r4, lr}
1001593a:	4b03      	ldr	r3, [pc, #12]	; (10015948 <puts+0x10>)
1001593c:	0001      	movs	r1, r0
1001593e:	6818      	ldr	r0, [r3, #0]
10015940:	f7ff ff98 	bl	10015874 <_puts_r>
10015944:	bd10      	pop	{r4, pc}
10015946:	46c0      	nop			; (mov r8, r8)
10015948:	100183a0 	.word	0x100183a0

1001594c <rand>:
1001594c:	4b15      	ldr	r3, [pc, #84]	; (100159a4 <rand+0x58>)
1001594e:	b510      	push	{r4, lr}
10015950:	681c      	ldr	r4, [r3, #0]
10015952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015954:	2b00      	cmp	r3, #0
10015956:	d115      	bne.n	10015984 <rand+0x38>
10015958:	2018      	movs	r0, #24
1001595a:	f7ff fe97 	bl	1001568c <malloc>
1001595e:	4b12      	ldr	r3, [pc, #72]	; (100159a8 <rand+0x5c>)
10015960:	63a0      	str	r0, [r4, #56]	; 0x38
10015962:	8003      	strh	r3, [r0, #0]
10015964:	4b11      	ldr	r3, [pc, #68]	; (100159ac <rand+0x60>)
10015966:	2201      	movs	r2, #1
10015968:	8043      	strh	r3, [r0, #2]
1001596a:	4b11      	ldr	r3, [pc, #68]	; (100159b0 <rand+0x64>)
1001596c:	8083      	strh	r3, [r0, #4]
1001596e:	4b11      	ldr	r3, [pc, #68]	; (100159b4 <rand+0x68>)
10015970:	80c3      	strh	r3, [r0, #6]
10015972:	4b11      	ldr	r3, [pc, #68]	; (100159b8 <rand+0x6c>)
10015974:	8103      	strh	r3, [r0, #8]
10015976:	2305      	movs	r3, #5
10015978:	8143      	strh	r3, [r0, #10]
1001597a:	3306      	adds	r3, #6
1001597c:	8183      	strh	r3, [r0, #12]
1001597e:	2300      	movs	r3, #0
10015980:	6102      	str	r2, [r0, #16]
10015982:	6143      	str	r3, [r0, #20]
10015984:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10015986:	4a0d      	ldr	r2, [pc, #52]	; (100159bc <rand+0x70>)
10015988:	6920      	ldr	r0, [r4, #16]
1001598a:	6961      	ldr	r1, [r4, #20]
1001598c:	4b0c      	ldr	r3, [pc, #48]	; (100159c0 <rand+0x74>)
1001598e:	f7fd f9f7 	bl	10012d80 <__aeabi_lmul>
10015992:	2201      	movs	r2, #1
10015994:	2300      	movs	r3, #0
10015996:	1880      	adds	r0, r0, r2
10015998:	4159      	adcs	r1, r3
1001599a:	6120      	str	r0, [r4, #16]
1001599c:	6161      	str	r1, [r4, #20]
1001599e:	0048      	lsls	r0, r1, #1
100159a0:	0840      	lsrs	r0, r0, #1
100159a2:	bd10      	pop	{r4, pc}
100159a4:	100183a0 	.word	0x100183a0
100159a8:	0000330e 	.word	0x0000330e
100159ac:	ffffabcd 	.word	0xffffabcd
100159b0:	00001234 	.word	0x00001234
100159b4:	ffffe66d 	.word	0xffffe66d
100159b8:	ffffdeec 	.word	0xffffdeec
100159bc:	4c957f2d 	.word	0x4c957f2d
100159c0:	5851f42d 	.word	0x5851f42d

100159c4 <_sbrk_r>:
100159c4:	2300      	movs	r3, #0
100159c6:	b570      	push	{r4, r5, r6, lr}
100159c8:	4c06      	ldr	r4, [pc, #24]	; (100159e4 <_sbrk_r+0x20>)
100159ca:	0005      	movs	r5, r0
100159cc:	0008      	movs	r0, r1
100159ce:	6023      	str	r3, [r4, #0]
100159d0:	f7f2 fd1a 	bl	10008408 <_sbrk>
100159d4:	1c43      	adds	r3, r0, #1
100159d6:	d103      	bne.n	100159e0 <_sbrk_r+0x1c>
100159d8:	6823      	ldr	r3, [r4, #0]
100159da:	2b00      	cmp	r3, #0
100159dc:	d000      	beq.n	100159e0 <_sbrk_r+0x1c>
100159de:	602b      	str	r3, [r5, #0]
100159e0:	bd70      	pop	{r4, r5, r6, pc}
100159e2:	46c0      	nop			; (mov r8, r8)
100159e4:	1001b290 	.word	0x1001b290

100159e8 <setbuf>:
100159e8:	424a      	negs	r2, r1
100159ea:	414a      	adcs	r2, r1
100159ec:	2380      	movs	r3, #128	; 0x80
100159ee:	b510      	push	{r4, lr}
100159f0:	0052      	lsls	r2, r2, #1
100159f2:	00db      	lsls	r3, r3, #3
100159f4:	f000 f802 	bl	100159fc <setvbuf>
100159f8:	bd10      	pop	{r4, pc}
	...

100159fc <setvbuf>:
100159fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100159fe:	001d      	movs	r5, r3
10015a00:	4b51      	ldr	r3, [pc, #324]	; (10015b48 <setvbuf+0x14c>)
10015a02:	b085      	sub	sp, #20
10015a04:	681e      	ldr	r6, [r3, #0]
10015a06:	0004      	movs	r4, r0
10015a08:	000f      	movs	r7, r1
10015a0a:	9200      	str	r2, [sp, #0]
10015a0c:	2e00      	cmp	r6, #0
10015a0e:	d005      	beq.n	10015a1c <setvbuf+0x20>
10015a10:	69b3      	ldr	r3, [r6, #24]
10015a12:	2b00      	cmp	r3, #0
10015a14:	d102      	bne.n	10015a1c <setvbuf+0x20>
10015a16:	0030      	movs	r0, r6
10015a18:	f000 fa62 	bl	10015ee0 <__sinit>
10015a1c:	4b4b      	ldr	r3, [pc, #300]	; (10015b4c <setvbuf+0x150>)
10015a1e:	429c      	cmp	r4, r3
10015a20:	d101      	bne.n	10015a26 <setvbuf+0x2a>
10015a22:	6874      	ldr	r4, [r6, #4]
10015a24:	e008      	b.n	10015a38 <setvbuf+0x3c>
10015a26:	4b4a      	ldr	r3, [pc, #296]	; (10015b50 <setvbuf+0x154>)
10015a28:	429c      	cmp	r4, r3
10015a2a:	d101      	bne.n	10015a30 <setvbuf+0x34>
10015a2c:	68b4      	ldr	r4, [r6, #8]
10015a2e:	e003      	b.n	10015a38 <setvbuf+0x3c>
10015a30:	4b48      	ldr	r3, [pc, #288]	; (10015b54 <setvbuf+0x158>)
10015a32:	429c      	cmp	r4, r3
10015a34:	d100      	bne.n	10015a38 <setvbuf+0x3c>
10015a36:	68f4      	ldr	r4, [r6, #12]
10015a38:	9b00      	ldr	r3, [sp, #0]
10015a3a:	2b02      	cmp	r3, #2
10015a3c:	d005      	beq.n	10015a4a <setvbuf+0x4e>
10015a3e:	2b01      	cmp	r3, #1
10015a40:	d900      	bls.n	10015a44 <setvbuf+0x48>
10015a42:	e07c      	b.n	10015b3e <setvbuf+0x142>
10015a44:	2d00      	cmp	r5, #0
10015a46:	da00      	bge.n	10015a4a <setvbuf+0x4e>
10015a48:	e079      	b.n	10015b3e <setvbuf+0x142>
10015a4a:	0021      	movs	r1, r4
10015a4c:	0030      	movs	r0, r6
10015a4e:	f000 f9d9 	bl	10015e04 <_fflush_r>
10015a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015a54:	2900      	cmp	r1, #0
10015a56:	d008      	beq.n	10015a6a <setvbuf+0x6e>
10015a58:	0023      	movs	r3, r4
10015a5a:	3344      	adds	r3, #68	; 0x44
10015a5c:	4299      	cmp	r1, r3
10015a5e:	d002      	beq.n	10015a66 <setvbuf+0x6a>
10015a60:	0030      	movs	r0, r6
10015a62:	f7ff fe3d 	bl	100156e0 <_free_r>
10015a66:	2300      	movs	r3, #0
10015a68:	6363      	str	r3, [r4, #52]	; 0x34
10015a6a:	2300      	movs	r3, #0
10015a6c:	61a3      	str	r3, [r4, #24]
10015a6e:	6063      	str	r3, [r4, #4]
10015a70:	89a3      	ldrh	r3, [r4, #12]
10015a72:	061b      	lsls	r3, r3, #24
10015a74:	d503      	bpl.n	10015a7e <setvbuf+0x82>
10015a76:	6921      	ldr	r1, [r4, #16]
10015a78:	0030      	movs	r0, r6
10015a7a:	f7ff fe31 	bl	100156e0 <_free_r>
10015a7e:	89a2      	ldrh	r2, [r4, #12]
10015a80:	4b35      	ldr	r3, [pc, #212]	; (10015b58 <setvbuf+0x15c>)
10015a82:	4013      	ands	r3, r2
10015a84:	81a3      	strh	r3, [r4, #12]
10015a86:	9b00      	ldr	r3, [sp, #0]
10015a88:	2b02      	cmp	r3, #2
10015a8a:	d021      	beq.n	10015ad0 <setvbuf+0xd4>
10015a8c:	ab03      	add	r3, sp, #12
10015a8e:	aa02      	add	r2, sp, #8
10015a90:	0021      	movs	r1, r4
10015a92:	0030      	movs	r0, r6
10015a94:	f000 fab8 	bl	10016008 <__swhatbuf_r>
10015a98:	89a3      	ldrh	r3, [r4, #12]
10015a9a:	4318      	orrs	r0, r3
10015a9c:	81a0      	strh	r0, [r4, #12]
10015a9e:	2d00      	cmp	r5, #0
10015aa0:	d101      	bne.n	10015aa6 <setvbuf+0xaa>
10015aa2:	9d02      	ldr	r5, [sp, #8]
10015aa4:	e001      	b.n	10015aaa <setvbuf+0xae>
10015aa6:	2f00      	cmp	r7, #0
10015aa8:	d125      	bne.n	10015af6 <setvbuf+0xfa>
10015aaa:	0028      	movs	r0, r5
10015aac:	f7ff fdee 	bl	1001568c <malloc>
10015ab0:	9501      	str	r5, [sp, #4]
10015ab2:	1e07      	subs	r7, r0, #0
10015ab4:	d11a      	bne.n	10015aec <setvbuf+0xf0>
10015ab6:	9b02      	ldr	r3, [sp, #8]
10015ab8:	9301      	str	r3, [sp, #4]
10015aba:	42ab      	cmp	r3, r5
10015abc:	d102      	bne.n	10015ac4 <setvbuf+0xc8>
10015abe:	2001      	movs	r0, #1
10015ac0:	4240      	negs	r0, r0
10015ac2:	e006      	b.n	10015ad2 <setvbuf+0xd6>
10015ac4:	9801      	ldr	r0, [sp, #4]
10015ac6:	f7ff fde1 	bl	1001568c <malloc>
10015aca:	1e07      	subs	r7, r0, #0
10015acc:	d10e      	bne.n	10015aec <setvbuf+0xf0>
10015ace:	e7f6      	b.n	10015abe <setvbuf+0xc2>
10015ad0:	2000      	movs	r0, #0
10015ad2:	2202      	movs	r2, #2
10015ad4:	89a3      	ldrh	r3, [r4, #12]
10015ad6:	4313      	orrs	r3, r2
10015ad8:	81a3      	strh	r3, [r4, #12]
10015ada:	2300      	movs	r3, #0
10015adc:	60a3      	str	r3, [r4, #8]
10015ade:	0023      	movs	r3, r4
10015ae0:	3347      	adds	r3, #71	; 0x47
10015ae2:	6023      	str	r3, [r4, #0]
10015ae4:	6123      	str	r3, [r4, #16]
10015ae6:	2301      	movs	r3, #1
10015ae8:	6163      	str	r3, [r4, #20]
10015aea:	e02a      	b.n	10015b42 <setvbuf+0x146>
10015aec:	2280      	movs	r2, #128	; 0x80
10015aee:	89a3      	ldrh	r3, [r4, #12]
10015af0:	9d01      	ldr	r5, [sp, #4]
10015af2:	4313      	orrs	r3, r2
10015af4:	81a3      	strh	r3, [r4, #12]
10015af6:	69b3      	ldr	r3, [r6, #24]
10015af8:	2b00      	cmp	r3, #0
10015afa:	d102      	bne.n	10015b02 <setvbuf+0x106>
10015afc:	0030      	movs	r0, r6
10015afe:	f000 f9ef 	bl	10015ee0 <__sinit>
10015b02:	9b00      	ldr	r3, [sp, #0]
10015b04:	2b01      	cmp	r3, #1
10015b06:	d103      	bne.n	10015b10 <setvbuf+0x114>
10015b08:	89a3      	ldrh	r3, [r4, #12]
10015b0a:	9a00      	ldr	r2, [sp, #0]
10015b0c:	431a      	orrs	r2, r3
10015b0e:	81a2      	strh	r2, [r4, #12]
10015b10:	2308      	movs	r3, #8
10015b12:	89a2      	ldrh	r2, [r4, #12]
10015b14:	6027      	str	r7, [r4, #0]
10015b16:	4013      	ands	r3, r2
10015b18:	6127      	str	r7, [r4, #16]
10015b1a:	6165      	str	r5, [r4, #20]
10015b1c:	1e18      	subs	r0, r3, #0
10015b1e:	d00c      	beq.n	10015b3a <setvbuf+0x13e>
10015b20:	2301      	movs	r3, #1
10015b22:	401a      	ands	r2, r3
10015b24:	2300      	movs	r3, #0
10015b26:	1e10      	subs	r0, r2, #0
10015b28:	4298      	cmp	r0, r3
10015b2a:	d004      	beq.n	10015b36 <setvbuf+0x13a>
10015b2c:	426d      	negs	r5, r5
10015b2e:	60a3      	str	r3, [r4, #8]
10015b30:	61a5      	str	r5, [r4, #24]
10015b32:	0018      	movs	r0, r3
10015b34:	e005      	b.n	10015b42 <setvbuf+0x146>
10015b36:	60a5      	str	r5, [r4, #8]
10015b38:	e003      	b.n	10015b42 <setvbuf+0x146>
10015b3a:	60a3      	str	r3, [r4, #8]
10015b3c:	e001      	b.n	10015b42 <setvbuf+0x146>
10015b3e:	2001      	movs	r0, #1
10015b40:	4240      	negs	r0, r0
10015b42:	b005      	add	sp, #20
10015b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015b46:	46c0      	nop			; (mov r8, r8)
10015b48:	100183a0 	.word	0x100183a0
10015b4c:	10018280 	.word	0x10018280
10015b50:	100182a0 	.word	0x100182a0
10015b54:	100182c0 	.word	0x100182c0
10015b58:	fffff35c 	.word	0xfffff35c

10015b5c <__swbuf_r>:
10015b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015b5e:	0005      	movs	r5, r0
10015b60:	000f      	movs	r7, r1
10015b62:	0014      	movs	r4, r2
10015b64:	2800      	cmp	r0, #0
10015b66:	d004      	beq.n	10015b72 <__swbuf_r+0x16>
10015b68:	6983      	ldr	r3, [r0, #24]
10015b6a:	2b00      	cmp	r3, #0
10015b6c:	d101      	bne.n	10015b72 <__swbuf_r+0x16>
10015b6e:	f000 f9b7 	bl	10015ee0 <__sinit>
10015b72:	4b23      	ldr	r3, [pc, #140]	; (10015c00 <__swbuf_r+0xa4>)
10015b74:	429c      	cmp	r4, r3
10015b76:	d101      	bne.n	10015b7c <__swbuf_r+0x20>
10015b78:	686c      	ldr	r4, [r5, #4]
10015b7a:	e008      	b.n	10015b8e <__swbuf_r+0x32>
10015b7c:	4b21      	ldr	r3, [pc, #132]	; (10015c04 <__swbuf_r+0xa8>)
10015b7e:	429c      	cmp	r4, r3
10015b80:	d101      	bne.n	10015b86 <__swbuf_r+0x2a>
10015b82:	68ac      	ldr	r4, [r5, #8]
10015b84:	e003      	b.n	10015b8e <__swbuf_r+0x32>
10015b86:	4b20      	ldr	r3, [pc, #128]	; (10015c08 <__swbuf_r+0xac>)
10015b88:	429c      	cmp	r4, r3
10015b8a:	d100      	bne.n	10015b8e <__swbuf_r+0x32>
10015b8c:	68ec      	ldr	r4, [r5, #12]
10015b8e:	69a3      	ldr	r3, [r4, #24]
10015b90:	60a3      	str	r3, [r4, #8]
10015b92:	89a3      	ldrh	r3, [r4, #12]
10015b94:	071b      	lsls	r3, r3, #28
10015b96:	d50a      	bpl.n	10015bae <__swbuf_r+0x52>
10015b98:	6923      	ldr	r3, [r4, #16]
10015b9a:	2b00      	cmp	r3, #0
10015b9c:	d007      	beq.n	10015bae <__swbuf_r+0x52>
10015b9e:	6823      	ldr	r3, [r4, #0]
10015ba0:	6922      	ldr	r2, [r4, #16]
10015ba2:	b2fe      	uxtb	r6, r7
10015ba4:	1a98      	subs	r0, r3, r2
10015ba6:	6963      	ldr	r3, [r4, #20]
10015ba8:	4298      	cmp	r0, r3
10015baa:	db0f      	blt.n	10015bcc <__swbuf_r+0x70>
10015bac:	e008      	b.n	10015bc0 <__swbuf_r+0x64>
10015bae:	0021      	movs	r1, r4
10015bb0:	0028      	movs	r0, r5
10015bb2:	f000 f82b 	bl	10015c0c <__swsetup_r>
10015bb6:	2800      	cmp	r0, #0
10015bb8:	d0f1      	beq.n	10015b9e <__swbuf_r+0x42>
10015bba:	2001      	movs	r0, #1
10015bbc:	4240      	negs	r0, r0
10015bbe:	e01d      	b.n	10015bfc <__swbuf_r+0xa0>
10015bc0:	0021      	movs	r1, r4
10015bc2:	0028      	movs	r0, r5
10015bc4:	f000 f91e 	bl	10015e04 <_fflush_r>
10015bc8:	2800      	cmp	r0, #0
10015bca:	d1f6      	bne.n	10015bba <__swbuf_r+0x5e>
10015bcc:	68a3      	ldr	r3, [r4, #8]
10015bce:	3001      	adds	r0, #1
10015bd0:	3b01      	subs	r3, #1
10015bd2:	60a3      	str	r3, [r4, #8]
10015bd4:	6823      	ldr	r3, [r4, #0]
10015bd6:	1c5a      	adds	r2, r3, #1
10015bd8:	6022      	str	r2, [r4, #0]
10015bda:	701f      	strb	r7, [r3, #0]
10015bdc:	6963      	ldr	r3, [r4, #20]
10015bde:	4298      	cmp	r0, r3
10015be0:	d005      	beq.n	10015bee <__swbuf_r+0x92>
10015be2:	89a3      	ldrh	r3, [r4, #12]
10015be4:	0030      	movs	r0, r6
10015be6:	07db      	lsls	r3, r3, #31
10015be8:	d508      	bpl.n	10015bfc <__swbuf_r+0xa0>
10015bea:	2e0a      	cmp	r6, #10
10015bec:	d106      	bne.n	10015bfc <__swbuf_r+0xa0>
10015bee:	0021      	movs	r1, r4
10015bf0:	0028      	movs	r0, r5
10015bf2:	f000 f907 	bl	10015e04 <_fflush_r>
10015bf6:	2800      	cmp	r0, #0
10015bf8:	d1df      	bne.n	10015bba <__swbuf_r+0x5e>
10015bfa:	0030      	movs	r0, r6
10015bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015bfe:	46c0      	nop			; (mov r8, r8)
10015c00:	10018280 	.word	0x10018280
10015c04:	100182a0 	.word	0x100182a0
10015c08:	100182c0 	.word	0x100182c0

10015c0c <__swsetup_r>:
10015c0c:	4b36      	ldr	r3, [pc, #216]	; (10015ce8 <__swsetup_r+0xdc>)
10015c0e:	b570      	push	{r4, r5, r6, lr}
10015c10:	681d      	ldr	r5, [r3, #0]
10015c12:	0006      	movs	r6, r0
10015c14:	000c      	movs	r4, r1
10015c16:	2d00      	cmp	r5, #0
10015c18:	d005      	beq.n	10015c26 <__swsetup_r+0x1a>
10015c1a:	69ab      	ldr	r3, [r5, #24]
10015c1c:	2b00      	cmp	r3, #0
10015c1e:	d102      	bne.n	10015c26 <__swsetup_r+0x1a>
10015c20:	0028      	movs	r0, r5
10015c22:	f000 f95d 	bl	10015ee0 <__sinit>
10015c26:	4b31      	ldr	r3, [pc, #196]	; (10015cec <__swsetup_r+0xe0>)
10015c28:	429c      	cmp	r4, r3
10015c2a:	d101      	bne.n	10015c30 <__swsetup_r+0x24>
10015c2c:	686c      	ldr	r4, [r5, #4]
10015c2e:	e008      	b.n	10015c42 <__swsetup_r+0x36>
10015c30:	4b2f      	ldr	r3, [pc, #188]	; (10015cf0 <__swsetup_r+0xe4>)
10015c32:	429c      	cmp	r4, r3
10015c34:	d101      	bne.n	10015c3a <__swsetup_r+0x2e>
10015c36:	68ac      	ldr	r4, [r5, #8]
10015c38:	e003      	b.n	10015c42 <__swsetup_r+0x36>
10015c3a:	4b2e      	ldr	r3, [pc, #184]	; (10015cf4 <__swsetup_r+0xe8>)
10015c3c:	429c      	cmp	r4, r3
10015c3e:	d100      	bne.n	10015c42 <__swsetup_r+0x36>
10015c40:	68ec      	ldr	r4, [r5, #12]
10015c42:	220c      	movs	r2, #12
10015c44:	5ea3      	ldrsh	r3, [r4, r2]
10015c46:	b29a      	uxth	r2, r3
10015c48:	0711      	lsls	r1, r2, #28
10015c4a:	d423      	bmi.n	10015c94 <__swsetup_r+0x88>
10015c4c:	06d1      	lsls	r1, r2, #27
10015c4e:	d407      	bmi.n	10015c60 <__swsetup_r+0x54>
10015c50:	2209      	movs	r2, #9
10015c52:	2001      	movs	r0, #1
10015c54:	6032      	str	r2, [r6, #0]
10015c56:	3237      	adds	r2, #55	; 0x37
10015c58:	4313      	orrs	r3, r2
10015c5a:	81a3      	strh	r3, [r4, #12]
10015c5c:	4240      	negs	r0, r0
10015c5e:	e042      	b.n	10015ce6 <__swsetup_r+0xda>
10015c60:	0753      	lsls	r3, r2, #29
10015c62:	d513      	bpl.n	10015c8c <__swsetup_r+0x80>
10015c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015c66:	2900      	cmp	r1, #0
10015c68:	d008      	beq.n	10015c7c <__swsetup_r+0x70>
10015c6a:	0023      	movs	r3, r4
10015c6c:	3344      	adds	r3, #68	; 0x44
10015c6e:	4299      	cmp	r1, r3
10015c70:	d002      	beq.n	10015c78 <__swsetup_r+0x6c>
10015c72:	0030      	movs	r0, r6
10015c74:	f7ff fd34 	bl	100156e0 <_free_r>
10015c78:	2300      	movs	r3, #0
10015c7a:	6363      	str	r3, [r4, #52]	; 0x34
10015c7c:	2224      	movs	r2, #36	; 0x24
10015c7e:	89a3      	ldrh	r3, [r4, #12]
10015c80:	4393      	bics	r3, r2
10015c82:	81a3      	strh	r3, [r4, #12]
10015c84:	2300      	movs	r3, #0
10015c86:	6063      	str	r3, [r4, #4]
10015c88:	6923      	ldr	r3, [r4, #16]
10015c8a:	6023      	str	r3, [r4, #0]
10015c8c:	2208      	movs	r2, #8
10015c8e:	89a3      	ldrh	r3, [r4, #12]
10015c90:	4313      	orrs	r3, r2
10015c92:	81a3      	strh	r3, [r4, #12]
10015c94:	6923      	ldr	r3, [r4, #16]
10015c96:	2b00      	cmp	r3, #0
10015c98:	d10b      	bne.n	10015cb2 <__swsetup_r+0xa6>
10015c9a:	23a0      	movs	r3, #160	; 0xa0
10015c9c:	89a2      	ldrh	r2, [r4, #12]
10015c9e:	009b      	lsls	r3, r3, #2
10015ca0:	4013      	ands	r3, r2
10015ca2:	2280      	movs	r2, #128	; 0x80
10015ca4:	0092      	lsls	r2, r2, #2
10015ca6:	4293      	cmp	r3, r2
10015ca8:	d003      	beq.n	10015cb2 <__swsetup_r+0xa6>
10015caa:	0021      	movs	r1, r4
10015cac:	0030      	movs	r0, r6
10015cae:	f000 f9d1 	bl	10016054 <__smakebuf_r>
10015cb2:	2301      	movs	r3, #1
10015cb4:	89a2      	ldrh	r2, [r4, #12]
10015cb6:	4013      	ands	r3, r2
10015cb8:	d005      	beq.n	10015cc6 <__swsetup_r+0xba>
10015cba:	2300      	movs	r3, #0
10015cbc:	60a3      	str	r3, [r4, #8]
10015cbe:	6963      	ldr	r3, [r4, #20]
10015cc0:	425b      	negs	r3, r3
10015cc2:	61a3      	str	r3, [r4, #24]
10015cc4:	e003      	b.n	10015cce <__swsetup_r+0xc2>
10015cc6:	0792      	lsls	r2, r2, #30
10015cc8:	d400      	bmi.n	10015ccc <__swsetup_r+0xc0>
10015cca:	6963      	ldr	r3, [r4, #20]
10015ccc:	60a3      	str	r3, [r4, #8]
10015cce:	2000      	movs	r0, #0
10015cd0:	6923      	ldr	r3, [r4, #16]
10015cd2:	4283      	cmp	r3, r0
10015cd4:	d107      	bne.n	10015ce6 <__swsetup_r+0xda>
10015cd6:	220c      	movs	r2, #12
10015cd8:	5ea3      	ldrsh	r3, [r4, r2]
10015cda:	061a      	lsls	r2, r3, #24
10015cdc:	d503      	bpl.n	10015ce6 <__swsetup_r+0xda>
10015cde:	2240      	movs	r2, #64	; 0x40
10015ce0:	4313      	orrs	r3, r2
10015ce2:	81a3      	strh	r3, [r4, #12]
10015ce4:	3801      	subs	r0, #1
10015ce6:	bd70      	pop	{r4, r5, r6, pc}
10015ce8:	100183a0 	.word	0x100183a0
10015cec:	10018280 	.word	0x10018280
10015cf0:	100182a0 	.word	0x100182a0
10015cf4:	100182c0 	.word	0x100182c0

10015cf8 <__sflush_r>:
10015cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015cfa:	898a      	ldrh	r2, [r1, #12]
10015cfc:	0005      	movs	r5, r0
10015cfe:	000c      	movs	r4, r1
10015d00:	0713      	lsls	r3, r2, #28
10015d02:	d45a      	bmi.n	10015dba <__sflush_r+0xc2>
10015d04:	684b      	ldr	r3, [r1, #4]
10015d06:	2b00      	cmp	r3, #0
10015d08:	dc02      	bgt.n	10015d10 <__sflush_r+0x18>
10015d0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015d0c:	2b00      	cmp	r3, #0
10015d0e:	dd19      	ble.n	10015d44 <__sflush_r+0x4c>
10015d10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015d12:	2f00      	cmp	r7, #0
10015d14:	d016      	beq.n	10015d44 <__sflush_r+0x4c>
10015d16:	2300      	movs	r3, #0
10015d18:	682e      	ldr	r6, [r5, #0]
10015d1a:	602b      	str	r3, [r5, #0]
10015d1c:	2380      	movs	r3, #128	; 0x80
10015d1e:	015b      	lsls	r3, r3, #5
10015d20:	401a      	ands	r2, r3
10015d22:	d001      	beq.n	10015d28 <__sflush_r+0x30>
10015d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015d26:	e014      	b.n	10015d52 <__sflush_r+0x5a>
10015d28:	2301      	movs	r3, #1
10015d2a:	6a21      	ldr	r1, [r4, #32]
10015d2c:	0028      	movs	r0, r5
10015d2e:	47b8      	blx	r7
10015d30:	1c43      	adds	r3, r0, #1
10015d32:	d10e      	bne.n	10015d52 <__sflush_r+0x5a>
10015d34:	682b      	ldr	r3, [r5, #0]
10015d36:	2b00      	cmp	r3, #0
10015d38:	d00b      	beq.n	10015d52 <__sflush_r+0x5a>
10015d3a:	2b1d      	cmp	r3, #29
10015d3c:	d001      	beq.n	10015d42 <__sflush_r+0x4a>
10015d3e:	2b16      	cmp	r3, #22
10015d40:	d102      	bne.n	10015d48 <__sflush_r+0x50>
10015d42:	602e      	str	r6, [r5, #0]
10015d44:	2000      	movs	r0, #0
10015d46:	e05a      	b.n	10015dfe <__sflush_r+0x106>
10015d48:	2240      	movs	r2, #64	; 0x40
10015d4a:	89a3      	ldrh	r3, [r4, #12]
10015d4c:	4313      	orrs	r3, r2
10015d4e:	81a3      	strh	r3, [r4, #12]
10015d50:	e055      	b.n	10015dfe <__sflush_r+0x106>
10015d52:	89a3      	ldrh	r3, [r4, #12]
10015d54:	075b      	lsls	r3, r3, #29
10015d56:	d506      	bpl.n	10015d66 <__sflush_r+0x6e>
10015d58:	6863      	ldr	r3, [r4, #4]
10015d5a:	1ac0      	subs	r0, r0, r3
10015d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015d5e:	2b00      	cmp	r3, #0
10015d60:	d001      	beq.n	10015d66 <__sflush_r+0x6e>
10015d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015d64:	1ac0      	subs	r0, r0, r3
10015d66:	2300      	movs	r3, #0
10015d68:	0002      	movs	r2, r0
10015d6a:	6a21      	ldr	r1, [r4, #32]
10015d6c:	0028      	movs	r0, r5
10015d6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015d70:	47b8      	blx	r7
10015d72:	89a3      	ldrh	r3, [r4, #12]
10015d74:	1c42      	adds	r2, r0, #1
10015d76:	d106      	bne.n	10015d86 <__sflush_r+0x8e>
10015d78:	6829      	ldr	r1, [r5, #0]
10015d7a:	291d      	cmp	r1, #29
10015d7c:	d83a      	bhi.n	10015df4 <__sflush_r+0xfc>
10015d7e:	4a20      	ldr	r2, [pc, #128]	; (10015e00 <__sflush_r+0x108>)
10015d80:	40ca      	lsrs	r2, r1
10015d82:	07d2      	lsls	r2, r2, #31
10015d84:	d536      	bpl.n	10015df4 <__sflush_r+0xfc>
10015d86:	2200      	movs	r2, #0
10015d88:	6062      	str	r2, [r4, #4]
10015d8a:	6922      	ldr	r2, [r4, #16]
10015d8c:	6022      	str	r2, [r4, #0]
10015d8e:	04db      	lsls	r3, r3, #19
10015d90:	d505      	bpl.n	10015d9e <__sflush_r+0xa6>
10015d92:	1c43      	adds	r3, r0, #1
10015d94:	d102      	bne.n	10015d9c <__sflush_r+0xa4>
10015d96:	682b      	ldr	r3, [r5, #0]
10015d98:	2b00      	cmp	r3, #0
10015d9a:	d100      	bne.n	10015d9e <__sflush_r+0xa6>
10015d9c:	6560      	str	r0, [r4, #84]	; 0x54
10015d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015da0:	602e      	str	r6, [r5, #0]
10015da2:	2900      	cmp	r1, #0
10015da4:	d0ce      	beq.n	10015d44 <__sflush_r+0x4c>
10015da6:	0023      	movs	r3, r4
10015da8:	3344      	adds	r3, #68	; 0x44
10015daa:	4299      	cmp	r1, r3
10015dac:	d002      	beq.n	10015db4 <__sflush_r+0xbc>
10015dae:	0028      	movs	r0, r5
10015db0:	f7ff fc96 	bl	100156e0 <_free_r>
10015db4:	2000      	movs	r0, #0
10015db6:	6360      	str	r0, [r4, #52]	; 0x34
10015db8:	e021      	b.n	10015dfe <__sflush_r+0x106>
10015dba:	690f      	ldr	r7, [r1, #16]
10015dbc:	2f00      	cmp	r7, #0
10015dbe:	d0c1      	beq.n	10015d44 <__sflush_r+0x4c>
10015dc0:	680b      	ldr	r3, [r1, #0]
10015dc2:	600f      	str	r7, [r1, #0]
10015dc4:	1bdb      	subs	r3, r3, r7
10015dc6:	9301      	str	r3, [sp, #4]
10015dc8:	2300      	movs	r3, #0
10015dca:	0792      	lsls	r2, r2, #30
10015dcc:	d100      	bne.n	10015dd0 <__sflush_r+0xd8>
10015dce:	694b      	ldr	r3, [r1, #20]
10015dd0:	60a3      	str	r3, [r4, #8]
10015dd2:	e003      	b.n	10015ddc <__sflush_r+0xe4>
10015dd4:	9b01      	ldr	r3, [sp, #4]
10015dd6:	183f      	adds	r7, r7, r0
10015dd8:	1a1b      	subs	r3, r3, r0
10015dda:	9301      	str	r3, [sp, #4]
10015ddc:	9b01      	ldr	r3, [sp, #4]
10015dde:	2b00      	cmp	r3, #0
10015de0:	ddb0      	ble.n	10015d44 <__sflush_r+0x4c>
10015de2:	9b01      	ldr	r3, [sp, #4]
10015de4:	003a      	movs	r2, r7
10015de6:	6a21      	ldr	r1, [r4, #32]
10015de8:	0028      	movs	r0, r5
10015dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015dec:	47b0      	blx	r6
10015dee:	2800      	cmp	r0, #0
10015df0:	dcf0      	bgt.n	10015dd4 <__sflush_r+0xdc>
10015df2:	89a3      	ldrh	r3, [r4, #12]
10015df4:	2240      	movs	r2, #64	; 0x40
10015df6:	2001      	movs	r0, #1
10015df8:	4313      	orrs	r3, r2
10015dfa:	81a3      	strh	r3, [r4, #12]
10015dfc:	4240      	negs	r0, r0
10015dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015e00:	20400001 	.word	0x20400001

10015e04 <_fflush_r>:
10015e04:	690b      	ldr	r3, [r1, #16]
10015e06:	b570      	push	{r4, r5, r6, lr}
10015e08:	0005      	movs	r5, r0
10015e0a:	000c      	movs	r4, r1
10015e0c:	2b00      	cmp	r3, #0
10015e0e:	d101      	bne.n	10015e14 <_fflush_r+0x10>
10015e10:	2000      	movs	r0, #0
10015e12:	e01c      	b.n	10015e4e <_fflush_r+0x4a>
10015e14:	2800      	cmp	r0, #0
10015e16:	d004      	beq.n	10015e22 <_fflush_r+0x1e>
10015e18:	6983      	ldr	r3, [r0, #24]
10015e1a:	2b00      	cmp	r3, #0
10015e1c:	d101      	bne.n	10015e22 <_fflush_r+0x1e>
10015e1e:	f000 f85f 	bl	10015ee0 <__sinit>
10015e22:	4b0b      	ldr	r3, [pc, #44]	; (10015e50 <_fflush_r+0x4c>)
10015e24:	429c      	cmp	r4, r3
10015e26:	d101      	bne.n	10015e2c <_fflush_r+0x28>
10015e28:	686c      	ldr	r4, [r5, #4]
10015e2a:	e008      	b.n	10015e3e <_fflush_r+0x3a>
10015e2c:	4b09      	ldr	r3, [pc, #36]	; (10015e54 <_fflush_r+0x50>)
10015e2e:	429c      	cmp	r4, r3
10015e30:	d101      	bne.n	10015e36 <_fflush_r+0x32>
10015e32:	68ac      	ldr	r4, [r5, #8]
10015e34:	e003      	b.n	10015e3e <_fflush_r+0x3a>
10015e36:	4b08      	ldr	r3, [pc, #32]	; (10015e58 <_fflush_r+0x54>)
10015e38:	429c      	cmp	r4, r3
10015e3a:	d100      	bne.n	10015e3e <_fflush_r+0x3a>
10015e3c:	68ec      	ldr	r4, [r5, #12]
10015e3e:	220c      	movs	r2, #12
10015e40:	5ea3      	ldrsh	r3, [r4, r2]
10015e42:	2b00      	cmp	r3, #0
10015e44:	d0e4      	beq.n	10015e10 <_fflush_r+0xc>
10015e46:	0021      	movs	r1, r4
10015e48:	0028      	movs	r0, r5
10015e4a:	f7ff ff55 	bl	10015cf8 <__sflush_r>
10015e4e:	bd70      	pop	{r4, r5, r6, pc}
10015e50:	10018280 	.word	0x10018280
10015e54:	100182a0 	.word	0x100182a0
10015e58:	100182c0 	.word	0x100182c0

10015e5c <_cleanup_r>:
10015e5c:	b510      	push	{r4, lr}
10015e5e:	4902      	ldr	r1, [pc, #8]	; (10015e68 <_cleanup_r+0xc>)
10015e60:	f000 f8b0 	bl	10015fc4 <_fwalk_reent>
10015e64:	bd10      	pop	{r4, pc}
10015e66:	46c0      	nop			; (mov r8, r8)
10015e68:	10015e05 	.word	0x10015e05

10015e6c <std.isra.0>:
10015e6c:	2300      	movs	r3, #0
10015e6e:	b510      	push	{r4, lr}
10015e70:	0004      	movs	r4, r0
10015e72:	6003      	str	r3, [r0, #0]
10015e74:	6043      	str	r3, [r0, #4]
10015e76:	6083      	str	r3, [r0, #8]
10015e78:	8181      	strh	r1, [r0, #12]
10015e7a:	6643      	str	r3, [r0, #100]	; 0x64
10015e7c:	81c2      	strh	r2, [r0, #14]
10015e7e:	6103      	str	r3, [r0, #16]
10015e80:	6143      	str	r3, [r0, #20]
10015e82:	6183      	str	r3, [r0, #24]
10015e84:	0019      	movs	r1, r3
10015e86:	2208      	movs	r2, #8
10015e88:	305c      	adds	r0, #92	; 0x5c
10015e8a:	f7ff fc21 	bl	100156d0 <memset>
10015e8e:	4b05      	ldr	r3, [pc, #20]	; (10015ea4 <std.isra.0+0x38>)
10015e90:	6224      	str	r4, [r4, #32]
10015e92:	6263      	str	r3, [r4, #36]	; 0x24
10015e94:	4b04      	ldr	r3, [pc, #16]	; (10015ea8 <std.isra.0+0x3c>)
10015e96:	62a3      	str	r3, [r4, #40]	; 0x28
10015e98:	4b04      	ldr	r3, [pc, #16]	; (10015eac <std.isra.0+0x40>)
10015e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
10015e9c:	4b04      	ldr	r3, [pc, #16]	; (10015eb0 <std.isra.0+0x44>)
10015e9e:	6323      	str	r3, [r4, #48]	; 0x30
10015ea0:	bd10      	pop	{r4, pc}
10015ea2:	46c0      	nop			; (mov r8, r8)
10015ea4:	100166e5 	.word	0x100166e5
10015ea8:	1001670d 	.word	0x1001670d
10015eac:	10016745 	.word	0x10016745
10015eb0:	10016771 	.word	0x10016771

10015eb4 <__sfmoreglue>:
10015eb4:	b570      	push	{r4, r5, r6, lr}
10015eb6:	2568      	movs	r5, #104	; 0x68
10015eb8:	1e4b      	subs	r3, r1, #1
10015eba:	435d      	muls	r5, r3
10015ebc:	000e      	movs	r6, r1
10015ebe:	0029      	movs	r1, r5
10015ec0:	3174      	adds	r1, #116	; 0x74
10015ec2:	f7ff fc53 	bl	1001576c <_malloc_r>
10015ec6:	1e04      	subs	r4, r0, #0
10015ec8:	d008      	beq.n	10015edc <__sfmoreglue+0x28>
10015eca:	2100      	movs	r1, #0
10015ecc:	002a      	movs	r2, r5
10015ece:	6001      	str	r1, [r0, #0]
10015ed0:	6046      	str	r6, [r0, #4]
10015ed2:	300c      	adds	r0, #12
10015ed4:	60a0      	str	r0, [r4, #8]
10015ed6:	3268      	adds	r2, #104	; 0x68
10015ed8:	f7ff fbfa 	bl	100156d0 <memset>
10015edc:	0020      	movs	r0, r4
10015ede:	bd70      	pop	{r4, r5, r6, pc}

10015ee0 <__sinit>:
10015ee0:	6983      	ldr	r3, [r0, #24]
10015ee2:	b513      	push	{r0, r1, r4, lr}
10015ee4:	0004      	movs	r4, r0
10015ee6:	2b00      	cmp	r3, #0
10015ee8:	d128      	bne.n	10015f3c <__sinit+0x5c>
10015eea:	6483      	str	r3, [r0, #72]	; 0x48
10015eec:	64c3      	str	r3, [r0, #76]	; 0x4c
10015eee:	6503      	str	r3, [r0, #80]	; 0x50
10015ef0:	4b13      	ldr	r3, [pc, #76]	; (10015f40 <__sinit+0x60>)
10015ef2:	4a14      	ldr	r2, [pc, #80]	; (10015f44 <__sinit+0x64>)
10015ef4:	681b      	ldr	r3, [r3, #0]
10015ef6:	6282      	str	r2, [r0, #40]	; 0x28
10015ef8:	9301      	str	r3, [sp, #4]
10015efa:	4298      	cmp	r0, r3
10015efc:	d101      	bne.n	10015f02 <__sinit+0x22>
10015efe:	2301      	movs	r3, #1
10015f00:	6183      	str	r3, [r0, #24]
10015f02:	0020      	movs	r0, r4
10015f04:	f000 f820 	bl	10015f48 <__sfp>
10015f08:	6060      	str	r0, [r4, #4]
10015f0a:	0020      	movs	r0, r4
10015f0c:	f000 f81c 	bl	10015f48 <__sfp>
10015f10:	60a0      	str	r0, [r4, #8]
10015f12:	0020      	movs	r0, r4
10015f14:	f000 f818 	bl	10015f48 <__sfp>
10015f18:	2200      	movs	r2, #0
10015f1a:	60e0      	str	r0, [r4, #12]
10015f1c:	2104      	movs	r1, #4
10015f1e:	6860      	ldr	r0, [r4, #4]
10015f20:	f7ff ffa4 	bl	10015e6c <std.isra.0>
10015f24:	2201      	movs	r2, #1
10015f26:	2109      	movs	r1, #9
10015f28:	68a0      	ldr	r0, [r4, #8]
10015f2a:	f7ff ff9f 	bl	10015e6c <std.isra.0>
10015f2e:	2202      	movs	r2, #2
10015f30:	2112      	movs	r1, #18
10015f32:	68e0      	ldr	r0, [r4, #12]
10015f34:	f7ff ff9a 	bl	10015e6c <std.isra.0>
10015f38:	2301      	movs	r3, #1
10015f3a:	61a3      	str	r3, [r4, #24]
10015f3c:	bd13      	pop	{r0, r1, r4, pc}
10015f3e:	46c0      	nop			; (mov r8, r8)
10015f40:	1001827c 	.word	0x1001827c
10015f44:	10015e5d 	.word	0x10015e5d

10015f48 <__sfp>:
10015f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015f4a:	4b1d      	ldr	r3, [pc, #116]	; (10015fc0 <__sfp+0x78>)
10015f4c:	0006      	movs	r6, r0
10015f4e:	681d      	ldr	r5, [r3, #0]
10015f50:	69ab      	ldr	r3, [r5, #24]
10015f52:	2b00      	cmp	r3, #0
10015f54:	d102      	bne.n	10015f5c <__sfp+0x14>
10015f56:	0028      	movs	r0, r5
10015f58:	f7ff ffc2 	bl	10015ee0 <__sinit>
10015f5c:	3548      	adds	r5, #72	; 0x48
10015f5e:	68ac      	ldr	r4, [r5, #8]
10015f60:	686b      	ldr	r3, [r5, #4]
10015f62:	3b01      	subs	r3, #1
10015f64:	d405      	bmi.n	10015f72 <__sfp+0x2a>
10015f66:	220c      	movs	r2, #12
10015f68:	5ea7      	ldrsh	r7, [r4, r2]
10015f6a:	2f00      	cmp	r7, #0
10015f6c:	d010      	beq.n	10015f90 <__sfp+0x48>
10015f6e:	3468      	adds	r4, #104	; 0x68
10015f70:	e7f7      	b.n	10015f62 <__sfp+0x1a>
10015f72:	682b      	ldr	r3, [r5, #0]
10015f74:	2b00      	cmp	r3, #0
10015f76:	d001      	beq.n	10015f7c <__sfp+0x34>
10015f78:	682d      	ldr	r5, [r5, #0]
10015f7a:	e7f0      	b.n	10015f5e <__sfp+0x16>
10015f7c:	2104      	movs	r1, #4
10015f7e:	0030      	movs	r0, r6
10015f80:	f7ff ff98 	bl	10015eb4 <__sfmoreglue>
10015f84:	6028      	str	r0, [r5, #0]
10015f86:	2800      	cmp	r0, #0
10015f88:	d1f6      	bne.n	10015f78 <__sfp+0x30>
10015f8a:	230c      	movs	r3, #12
10015f8c:	6033      	str	r3, [r6, #0]
10015f8e:	e016      	b.n	10015fbe <__sfp+0x76>
10015f90:	2301      	movs	r3, #1
10015f92:	0020      	movs	r0, r4
10015f94:	425b      	negs	r3, r3
10015f96:	81e3      	strh	r3, [r4, #14]
10015f98:	3302      	adds	r3, #2
10015f9a:	81a3      	strh	r3, [r4, #12]
10015f9c:	6667      	str	r7, [r4, #100]	; 0x64
10015f9e:	6027      	str	r7, [r4, #0]
10015fa0:	60a7      	str	r7, [r4, #8]
10015fa2:	6067      	str	r7, [r4, #4]
10015fa4:	6127      	str	r7, [r4, #16]
10015fa6:	6167      	str	r7, [r4, #20]
10015fa8:	61a7      	str	r7, [r4, #24]
10015faa:	305c      	adds	r0, #92	; 0x5c
10015fac:	2208      	movs	r2, #8
10015fae:	0039      	movs	r1, r7
10015fb0:	f7ff fb8e 	bl	100156d0 <memset>
10015fb4:	0020      	movs	r0, r4
10015fb6:	6367      	str	r7, [r4, #52]	; 0x34
10015fb8:	63a7      	str	r7, [r4, #56]	; 0x38
10015fba:	64a7      	str	r7, [r4, #72]	; 0x48
10015fbc:	64e7      	str	r7, [r4, #76]	; 0x4c
10015fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015fc0:	1001827c 	.word	0x1001827c

10015fc4 <_fwalk_reent>:
10015fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015fc6:	0004      	movs	r4, r0
10015fc8:	0007      	movs	r7, r0
10015fca:	2600      	movs	r6, #0
10015fcc:	9101      	str	r1, [sp, #4]
10015fce:	3448      	adds	r4, #72	; 0x48
10015fd0:	2c00      	cmp	r4, #0
10015fd2:	d016      	beq.n	10016002 <_fwalk_reent+0x3e>
10015fd4:	6863      	ldr	r3, [r4, #4]
10015fd6:	68a5      	ldr	r5, [r4, #8]
10015fd8:	9300      	str	r3, [sp, #0]
10015fda:	9b00      	ldr	r3, [sp, #0]
10015fdc:	3b01      	subs	r3, #1
10015fde:	9300      	str	r3, [sp, #0]
10015fe0:	d40d      	bmi.n	10015ffe <_fwalk_reent+0x3a>
10015fe2:	89ab      	ldrh	r3, [r5, #12]
10015fe4:	2b01      	cmp	r3, #1
10015fe6:	d908      	bls.n	10015ffa <_fwalk_reent+0x36>
10015fe8:	220e      	movs	r2, #14
10015fea:	5eab      	ldrsh	r3, [r5, r2]
10015fec:	3301      	adds	r3, #1
10015fee:	d004      	beq.n	10015ffa <_fwalk_reent+0x36>
10015ff0:	0029      	movs	r1, r5
10015ff2:	0038      	movs	r0, r7
10015ff4:	9b01      	ldr	r3, [sp, #4]
10015ff6:	4798      	blx	r3
10015ff8:	4306      	orrs	r6, r0
10015ffa:	3568      	adds	r5, #104	; 0x68
10015ffc:	e7ed      	b.n	10015fda <_fwalk_reent+0x16>
10015ffe:	6824      	ldr	r4, [r4, #0]
10016000:	e7e6      	b.n	10015fd0 <_fwalk_reent+0xc>
10016002:	0030      	movs	r0, r6
10016004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016008 <__swhatbuf_r>:
10016008:	b570      	push	{r4, r5, r6, lr}
1001600a:	000e      	movs	r6, r1
1001600c:	001d      	movs	r5, r3
1001600e:	230e      	movs	r3, #14
10016010:	5ec9      	ldrsh	r1, [r1, r3]
10016012:	b090      	sub	sp, #64	; 0x40
10016014:	0014      	movs	r4, r2
10016016:	2900      	cmp	r1, #0
10016018:	da06      	bge.n	10016028 <__swhatbuf_r+0x20>
1001601a:	2300      	movs	r3, #0
1001601c:	602b      	str	r3, [r5, #0]
1001601e:	89b3      	ldrh	r3, [r6, #12]
10016020:	061b      	lsls	r3, r3, #24
10016022:	d50f      	bpl.n	10016044 <__swhatbuf_r+0x3c>
10016024:	2340      	movs	r3, #64	; 0x40
10016026:	e00f      	b.n	10016048 <__swhatbuf_r+0x40>
10016028:	aa01      	add	r2, sp, #4
1001602a:	f000 fbcd 	bl	100167c8 <_fstat_r>
1001602e:	2800      	cmp	r0, #0
10016030:	dbf3      	blt.n	1001601a <__swhatbuf_r+0x12>
10016032:	23f0      	movs	r3, #240	; 0xf0
10016034:	9a02      	ldr	r2, [sp, #8]
10016036:	021b      	lsls	r3, r3, #8
10016038:	4013      	ands	r3, r2
1001603a:	4a05      	ldr	r2, [pc, #20]	; (10016050 <__swhatbuf_r+0x48>)
1001603c:	189b      	adds	r3, r3, r2
1001603e:	425a      	negs	r2, r3
10016040:	4153      	adcs	r3, r2
10016042:	602b      	str	r3, [r5, #0]
10016044:	2380      	movs	r3, #128	; 0x80
10016046:	00db      	lsls	r3, r3, #3
10016048:	2000      	movs	r0, #0
1001604a:	6023      	str	r3, [r4, #0]
1001604c:	b010      	add	sp, #64	; 0x40
1001604e:	bd70      	pop	{r4, r5, r6, pc}
10016050:	ffffe000 	.word	0xffffe000

10016054 <__smakebuf_r>:
10016054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016056:	2602      	movs	r6, #2
10016058:	898b      	ldrh	r3, [r1, #12]
1001605a:	0005      	movs	r5, r0
1001605c:	000c      	movs	r4, r1
1001605e:	4233      	tst	r3, r6
10016060:	d110      	bne.n	10016084 <__smakebuf_r+0x30>
10016062:	ab01      	add	r3, sp, #4
10016064:	466a      	mov	r2, sp
10016066:	f7ff ffcf 	bl	10016008 <__swhatbuf_r>
1001606a:	9900      	ldr	r1, [sp, #0]
1001606c:	0007      	movs	r7, r0
1001606e:	0028      	movs	r0, r5
10016070:	f7ff fb7c 	bl	1001576c <_malloc_r>
10016074:	2800      	cmp	r0, #0
10016076:	d10c      	bne.n	10016092 <__smakebuf_r+0x3e>
10016078:	220c      	movs	r2, #12
1001607a:	5ea3      	ldrsh	r3, [r4, r2]
1001607c:	059a      	lsls	r2, r3, #22
1001607e:	d423      	bmi.n	100160c8 <__smakebuf_r+0x74>
10016080:	4333      	orrs	r3, r6
10016082:	81a3      	strh	r3, [r4, #12]
10016084:	0023      	movs	r3, r4
10016086:	3347      	adds	r3, #71	; 0x47
10016088:	6023      	str	r3, [r4, #0]
1001608a:	6123      	str	r3, [r4, #16]
1001608c:	2301      	movs	r3, #1
1001608e:	6163      	str	r3, [r4, #20]
10016090:	e01a      	b.n	100160c8 <__smakebuf_r+0x74>
10016092:	2280      	movs	r2, #128	; 0x80
10016094:	4b0d      	ldr	r3, [pc, #52]	; (100160cc <__smakebuf_r+0x78>)
10016096:	62ab      	str	r3, [r5, #40]	; 0x28
10016098:	89a3      	ldrh	r3, [r4, #12]
1001609a:	6020      	str	r0, [r4, #0]
1001609c:	4313      	orrs	r3, r2
1001609e:	81a3      	strh	r3, [r4, #12]
100160a0:	9b00      	ldr	r3, [sp, #0]
100160a2:	6120      	str	r0, [r4, #16]
100160a4:	6163      	str	r3, [r4, #20]
100160a6:	9b01      	ldr	r3, [sp, #4]
100160a8:	2b00      	cmp	r3, #0
100160aa:	d00a      	beq.n	100160c2 <__smakebuf_r+0x6e>
100160ac:	230e      	movs	r3, #14
100160ae:	5ee1      	ldrsh	r1, [r4, r3]
100160b0:	0028      	movs	r0, r5
100160b2:	f000 fb9b 	bl	100167ec <_isatty_r>
100160b6:	2800      	cmp	r0, #0
100160b8:	d003      	beq.n	100160c2 <__smakebuf_r+0x6e>
100160ba:	2201      	movs	r2, #1
100160bc:	89a3      	ldrh	r3, [r4, #12]
100160be:	4313      	orrs	r3, r2
100160c0:	81a3      	strh	r3, [r4, #12]
100160c2:	89a3      	ldrh	r3, [r4, #12]
100160c4:	431f      	orrs	r7, r3
100160c6:	81a7      	strh	r7, [r4, #12]
100160c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100160ca:	46c0      	nop			; (mov r8, r8)
100160cc:	10015e5d 	.word	0x10015e5d

100160d0 <__sfputc_r>:
100160d0:	6893      	ldr	r3, [r2, #8]
100160d2:	b510      	push	{r4, lr}
100160d4:	3b01      	subs	r3, #1
100160d6:	6093      	str	r3, [r2, #8]
100160d8:	2b00      	cmp	r3, #0
100160da:	da05      	bge.n	100160e8 <__sfputc_r+0x18>
100160dc:	6994      	ldr	r4, [r2, #24]
100160de:	42a3      	cmp	r3, r4
100160e0:	db08      	blt.n	100160f4 <__sfputc_r+0x24>
100160e2:	b2cb      	uxtb	r3, r1
100160e4:	2b0a      	cmp	r3, #10
100160e6:	d005      	beq.n	100160f4 <__sfputc_r+0x24>
100160e8:	6813      	ldr	r3, [r2, #0]
100160ea:	1c58      	adds	r0, r3, #1
100160ec:	6010      	str	r0, [r2, #0]
100160ee:	7019      	strb	r1, [r3, #0]
100160f0:	b2c8      	uxtb	r0, r1
100160f2:	e001      	b.n	100160f8 <__sfputc_r+0x28>
100160f4:	f7ff fd32 	bl	10015b5c <__swbuf_r>
100160f8:	bd10      	pop	{r4, pc}

100160fa <__sfputs_r>:
100160fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100160fc:	0006      	movs	r6, r0
100160fe:	000f      	movs	r7, r1
10016100:	0014      	movs	r4, r2
10016102:	18d5      	adds	r5, r2, r3
10016104:	42ac      	cmp	r4, r5
10016106:	d008      	beq.n	1001611a <__sfputs_r+0x20>
10016108:	7821      	ldrb	r1, [r4, #0]
1001610a:	003a      	movs	r2, r7
1001610c:	0030      	movs	r0, r6
1001610e:	f7ff ffdf 	bl	100160d0 <__sfputc_r>
10016112:	3401      	adds	r4, #1
10016114:	1c43      	adds	r3, r0, #1
10016116:	d1f5      	bne.n	10016104 <__sfputs_r+0xa>
10016118:	e000      	b.n	1001611c <__sfputs_r+0x22>
1001611a:	2000      	movs	r0, #0
1001611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10016120 <_vfiprintf_r>:
10016120:	b5f0      	push	{r4, r5, r6, r7, lr}
10016122:	b09f      	sub	sp, #124	; 0x7c
10016124:	0006      	movs	r6, r0
10016126:	000f      	movs	r7, r1
10016128:	9202      	str	r2, [sp, #8]
1001612a:	9305      	str	r3, [sp, #20]
1001612c:	2800      	cmp	r0, #0
1001612e:	d004      	beq.n	1001613a <_vfiprintf_r+0x1a>
10016130:	6983      	ldr	r3, [r0, #24]
10016132:	2b00      	cmp	r3, #0
10016134:	d101      	bne.n	1001613a <_vfiprintf_r+0x1a>
10016136:	f7ff fed3 	bl	10015ee0 <__sinit>
1001613a:	4b7f      	ldr	r3, [pc, #508]	; (10016338 <_vfiprintf_r+0x218>)
1001613c:	429f      	cmp	r7, r3
1001613e:	d101      	bne.n	10016144 <_vfiprintf_r+0x24>
10016140:	6877      	ldr	r7, [r6, #4]
10016142:	e008      	b.n	10016156 <_vfiprintf_r+0x36>
10016144:	4b7d      	ldr	r3, [pc, #500]	; (1001633c <_vfiprintf_r+0x21c>)
10016146:	429f      	cmp	r7, r3
10016148:	d101      	bne.n	1001614e <_vfiprintf_r+0x2e>
1001614a:	68b7      	ldr	r7, [r6, #8]
1001614c:	e003      	b.n	10016156 <_vfiprintf_r+0x36>
1001614e:	4b7c      	ldr	r3, [pc, #496]	; (10016340 <_vfiprintf_r+0x220>)
10016150:	429f      	cmp	r7, r3
10016152:	d100      	bne.n	10016156 <_vfiprintf_r+0x36>
10016154:	68f7      	ldr	r7, [r6, #12]
10016156:	89bb      	ldrh	r3, [r7, #12]
10016158:	071b      	lsls	r3, r3, #28
1001615a:	d50a      	bpl.n	10016172 <_vfiprintf_r+0x52>
1001615c:	693b      	ldr	r3, [r7, #16]
1001615e:	2b00      	cmp	r3, #0
10016160:	d007      	beq.n	10016172 <_vfiprintf_r+0x52>
10016162:	2300      	movs	r3, #0
10016164:	ad06      	add	r5, sp, #24
10016166:	616b      	str	r3, [r5, #20]
10016168:	3320      	adds	r3, #32
1001616a:	766b      	strb	r3, [r5, #25]
1001616c:	3310      	adds	r3, #16
1001616e:	76ab      	strb	r3, [r5, #26]
10016170:	e03d      	b.n	100161ee <_vfiprintf_r+0xce>
10016172:	0039      	movs	r1, r7
10016174:	0030      	movs	r0, r6
10016176:	f7ff fd49 	bl	10015c0c <__swsetup_r>
1001617a:	2800      	cmp	r0, #0
1001617c:	d0f1      	beq.n	10016162 <_vfiprintf_r+0x42>
1001617e:	2001      	movs	r0, #1
10016180:	4240      	negs	r0, r0
10016182:	e0d6      	b.n	10016332 <_vfiprintf_r+0x212>
10016184:	9a05      	ldr	r2, [sp, #20]
10016186:	1d11      	adds	r1, r2, #4
10016188:	6812      	ldr	r2, [r2, #0]
1001618a:	9105      	str	r1, [sp, #20]
1001618c:	2a00      	cmp	r2, #0
1001618e:	da00      	bge.n	10016192 <_vfiprintf_r+0x72>
10016190:	e07f      	b.n	10016292 <_vfiprintf_r+0x172>
10016192:	9209      	str	r2, [sp, #36]	; 0x24
10016194:	3401      	adds	r4, #1
10016196:	7823      	ldrb	r3, [r4, #0]
10016198:	2b2e      	cmp	r3, #46	; 0x2e
1001619a:	d100      	bne.n	1001619e <_vfiprintf_r+0x7e>
1001619c:	e08d      	b.n	100162ba <_vfiprintf_r+0x19a>
1001619e:	7821      	ldrb	r1, [r4, #0]
100161a0:	2203      	movs	r2, #3
100161a2:	4868      	ldr	r0, [pc, #416]	; (10016344 <_vfiprintf_r+0x224>)
100161a4:	f000 fb48 	bl	10016838 <memchr>
100161a8:	2800      	cmp	r0, #0
100161aa:	d007      	beq.n	100161bc <_vfiprintf_r+0x9c>
100161ac:	4b65      	ldr	r3, [pc, #404]	; (10016344 <_vfiprintf_r+0x224>)
100161ae:	682a      	ldr	r2, [r5, #0]
100161b0:	1ac0      	subs	r0, r0, r3
100161b2:	2340      	movs	r3, #64	; 0x40
100161b4:	4083      	lsls	r3, r0
100161b6:	4313      	orrs	r3, r2
100161b8:	602b      	str	r3, [r5, #0]
100161ba:	3401      	adds	r4, #1
100161bc:	7821      	ldrb	r1, [r4, #0]
100161be:	1c63      	adds	r3, r4, #1
100161c0:	2206      	movs	r2, #6
100161c2:	4861      	ldr	r0, [pc, #388]	; (10016348 <_vfiprintf_r+0x228>)
100161c4:	9302      	str	r3, [sp, #8]
100161c6:	7629      	strb	r1, [r5, #24]
100161c8:	f000 fb36 	bl	10016838 <memchr>
100161cc:	2800      	cmp	r0, #0
100161ce:	d100      	bne.n	100161d2 <_vfiprintf_r+0xb2>
100161d0:	e09d      	b.n	1001630e <_vfiprintf_r+0x1ee>
100161d2:	4b5e      	ldr	r3, [pc, #376]	; (1001634c <_vfiprintf_r+0x22c>)
100161d4:	2b00      	cmp	r3, #0
100161d6:	d000      	beq.n	100161da <_vfiprintf_r+0xba>
100161d8:	e090      	b.n	100162fc <_vfiprintf_r+0x1dc>
100161da:	2207      	movs	r2, #7
100161dc:	9b05      	ldr	r3, [sp, #20]
100161de:	3307      	adds	r3, #7
100161e0:	4393      	bics	r3, r2
100161e2:	3308      	adds	r3, #8
100161e4:	9305      	str	r3, [sp, #20]
100161e6:	696b      	ldr	r3, [r5, #20]
100161e8:	9a03      	ldr	r2, [sp, #12]
100161ea:	189b      	adds	r3, r3, r2
100161ec:	616b      	str	r3, [r5, #20]
100161ee:	9c02      	ldr	r4, [sp, #8]
100161f0:	7823      	ldrb	r3, [r4, #0]
100161f2:	2b00      	cmp	r3, #0
100161f4:	d104      	bne.n	10016200 <_vfiprintf_r+0xe0>
100161f6:	9b02      	ldr	r3, [sp, #8]
100161f8:	1ae3      	subs	r3, r4, r3
100161fa:	9304      	str	r3, [sp, #16]
100161fc:	d012      	beq.n	10016224 <_vfiprintf_r+0x104>
100161fe:	e003      	b.n	10016208 <_vfiprintf_r+0xe8>
10016200:	2b25      	cmp	r3, #37	; 0x25
10016202:	d0f8      	beq.n	100161f6 <_vfiprintf_r+0xd6>
10016204:	3401      	adds	r4, #1
10016206:	e7f3      	b.n	100161f0 <_vfiprintf_r+0xd0>
10016208:	9b04      	ldr	r3, [sp, #16]
1001620a:	9a02      	ldr	r2, [sp, #8]
1001620c:	0039      	movs	r1, r7
1001620e:	0030      	movs	r0, r6
10016210:	f7ff ff73 	bl	100160fa <__sfputs_r>
10016214:	1c43      	adds	r3, r0, #1
10016216:	d100      	bne.n	1001621a <_vfiprintf_r+0xfa>
10016218:	e086      	b.n	10016328 <_vfiprintf_r+0x208>
1001621a:	696a      	ldr	r2, [r5, #20]
1001621c:	9b04      	ldr	r3, [sp, #16]
1001621e:	4694      	mov	ip, r2
10016220:	4463      	add	r3, ip
10016222:	616b      	str	r3, [r5, #20]
10016224:	7823      	ldrb	r3, [r4, #0]
10016226:	2b00      	cmp	r3, #0
10016228:	d07e      	beq.n	10016328 <_vfiprintf_r+0x208>
1001622a:	2201      	movs	r2, #1
1001622c:	2300      	movs	r3, #0
1001622e:	4252      	negs	r2, r2
10016230:	606a      	str	r2, [r5, #4]
10016232:	a902      	add	r1, sp, #8
10016234:	3254      	adds	r2, #84	; 0x54
10016236:	1852      	adds	r2, r2, r1
10016238:	3401      	adds	r4, #1
1001623a:	602b      	str	r3, [r5, #0]
1001623c:	60eb      	str	r3, [r5, #12]
1001623e:	60ab      	str	r3, [r5, #8]
10016240:	7013      	strb	r3, [r2, #0]
10016242:	65ab      	str	r3, [r5, #88]	; 0x58
10016244:	7821      	ldrb	r1, [r4, #0]
10016246:	2205      	movs	r2, #5
10016248:	4841      	ldr	r0, [pc, #260]	; (10016350 <_vfiprintf_r+0x230>)
1001624a:	f000 faf5 	bl	10016838 <memchr>
1001624e:	2800      	cmp	r0, #0
10016250:	d008      	beq.n	10016264 <_vfiprintf_r+0x144>
10016252:	4b3f      	ldr	r3, [pc, #252]	; (10016350 <_vfiprintf_r+0x230>)
10016254:	682a      	ldr	r2, [r5, #0]
10016256:	1ac0      	subs	r0, r0, r3
10016258:	2301      	movs	r3, #1
1001625a:	4083      	lsls	r3, r0
1001625c:	4313      	orrs	r3, r2
1001625e:	602b      	str	r3, [r5, #0]
10016260:	3401      	adds	r4, #1
10016262:	e7ef      	b.n	10016244 <_vfiprintf_r+0x124>
10016264:	682b      	ldr	r3, [r5, #0]
10016266:	06da      	lsls	r2, r3, #27
10016268:	d504      	bpl.n	10016274 <_vfiprintf_r+0x154>
1001626a:	2253      	movs	r2, #83	; 0x53
1001626c:	2120      	movs	r1, #32
1001626e:	a802      	add	r0, sp, #8
10016270:	1812      	adds	r2, r2, r0
10016272:	7011      	strb	r1, [r2, #0]
10016274:	071a      	lsls	r2, r3, #28
10016276:	d504      	bpl.n	10016282 <_vfiprintf_r+0x162>
10016278:	2253      	movs	r2, #83	; 0x53
1001627a:	212b      	movs	r1, #43	; 0x2b
1001627c:	a802      	add	r0, sp, #8
1001627e:	1812      	adds	r2, r2, r0
10016280:	7011      	strb	r1, [r2, #0]
10016282:	7822      	ldrb	r2, [r4, #0]
10016284:	2a2a      	cmp	r2, #42	; 0x2a
10016286:	d100      	bne.n	1001628a <_vfiprintf_r+0x16a>
10016288:	e77c      	b.n	10016184 <_vfiprintf_r+0x64>
1001628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001628c:	2000      	movs	r0, #0
1001628e:	210a      	movs	r1, #10
10016290:	e005      	b.n	1001629e <_vfiprintf_r+0x17e>
10016292:	4252      	negs	r2, r2
10016294:	60ea      	str	r2, [r5, #12]
10016296:	2202      	movs	r2, #2
10016298:	4313      	orrs	r3, r2
1001629a:	602b      	str	r3, [r5, #0]
1001629c:	e77a      	b.n	10016194 <_vfiprintf_r+0x74>
1001629e:	7822      	ldrb	r2, [r4, #0]
100162a0:	3a30      	subs	r2, #48	; 0x30
100162a2:	2a09      	cmp	r2, #9
100162a4:	d804      	bhi.n	100162b0 <_vfiprintf_r+0x190>
100162a6:	434b      	muls	r3, r1
100162a8:	3401      	adds	r4, #1
100162aa:	189b      	adds	r3, r3, r2
100162ac:	2001      	movs	r0, #1
100162ae:	e7f6      	b.n	1001629e <_vfiprintf_r+0x17e>
100162b0:	2800      	cmp	r0, #0
100162b2:	d100      	bne.n	100162b6 <_vfiprintf_r+0x196>
100162b4:	e76f      	b.n	10016196 <_vfiprintf_r+0x76>
100162b6:	9309      	str	r3, [sp, #36]	; 0x24
100162b8:	e76d      	b.n	10016196 <_vfiprintf_r+0x76>
100162ba:	7863      	ldrb	r3, [r4, #1]
100162bc:	2b2a      	cmp	r3, #42	; 0x2a
100162be:	d10a      	bne.n	100162d6 <_vfiprintf_r+0x1b6>
100162c0:	9b05      	ldr	r3, [sp, #20]
100162c2:	3402      	adds	r4, #2
100162c4:	1d1a      	adds	r2, r3, #4
100162c6:	681b      	ldr	r3, [r3, #0]
100162c8:	9205      	str	r2, [sp, #20]
100162ca:	2b00      	cmp	r3, #0
100162cc:	da01      	bge.n	100162d2 <_vfiprintf_r+0x1b2>
100162ce:	2301      	movs	r3, #1
100162d0:	425b      	negs	r3, r3
100162d2:	9307      	str	r3, [sp, #28]
100162d4:	e763      	b.n	1001619e <_vfiprintf_r+0x7e>
100162d6:	2300      	movs	r3, #0
100162d8:	200a      	movs	r0, #10
100162da:	001a      	movs	r2, r3
100162dc:	3401      	adds	r4, #1
100162de:	606b      	str	r3, [r5, #4]
100162e0:	7821      	ldrb	r1, [r4, #0]
100162e2:	3930      	subs	r1, #48	; 0x30
100162e4:	2909      	cmp	r1, #9
100162e6:	d804      	bhi.n	100162f2 <_vfiprintf_r+0x1d2>
100162e8:	4342      	muls	r2, r0
100162ea:	3401      	adds	r4, #1
100162ec:	1852      	adds	r2, r2, r1
100162ee:	2301      	movs	r3, #1
100162f0:	e7f6      	b.n	100162e0 <_vfiprintf_r+0x1c0>
100162f2:	2b00      	cmp	r3, #0
100162f4:	d100      	bne.n	100162f8 <_vfiprintf_r+0x1d8>
100162f6:	e752      	b.n	1001619e <_vfiprintf_r+0x7e>
100162f8:	9207      	str	r2, [sp, #28]
100162fa:	e750      	b.n	1001619e <_vfiprintf_r+0x7e>
100162fc:	ab05      	add	r3, sp, #20
100162fe:	9300      	str	r3, [sp, #0]
10016300:	003a      	movs	r2, r7
10016302:	4b14      	ldr	r3, [pc, #80]	; (10016354 <_vfiprintf_r+0x234>)
10016304:	0029      	movs	r1, r5
10016306:	0030      	movs	r0, r6
10016308:	e000      	b.n	1001630c <_vfiprintf_r+0x1ec>
1001630a:	bf00      	nop
1001630c:	e007      	b.n	1001631e <_vfiprintf_r+0x1fe>
1001630e:	ab05      	add	r3, sp, #20
10016310:	9300      	str	r3, [sp, #0]
10016312:	003a      	movs	r2, r7
10016314:	4b0f      	ldr	r3, [pc, #60]	; (10016354 <_vfiprintf_r+0x234>)
10016316:	0029      	movs	r1, r5
10016318:	0030      	movs	r0, r6
1001631a:	f000 f88b 	bl	10016434 <_printf_i>
1001631e:	9003      	str	r0, [sp, #12]
10016320:	9b03      	ldr	r3, [sp, #12]
10016322:	3301      	adds	r3, #1
10016324:	d000      	beq.n	10016328 <_vfiprintf_r+0x208>
10016326:	e75e      	b.n	100161e6 <_vfiprintf_r+0xc6>
10016328:	89bb      	ldrh	r3, [r7, #12]
1001632a:	065b      	lsls	r3, r3, #25
1001632c:	d500      	bpl.n	10016330 <_vfiprintf_r+0x210>
1001632e:	e726      	b.n	1001617e <_vfiprintf_r+0x5e>
10016330:	980b      	ldr	r0, [sp, #44]	; 0x2c
10016332:	b01f      	add	sp, #124	; 0x7c
10016334:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016336:	46c0      	nop			; (mov r8, r8)
10016338:	10018280 	.word	0x10018280
1001633c:	100182a0 	.word	0x100182a0
10016340:	100182c0 	.word	0x100182c0
10016344:	100182e6 	.word	0x100182e6
10016348:	100182ea 	.word	0x100182ea
1001634c:	00000000 	.word	0x00000000
10016350:	100182e0 	.word	0x100182e0
10016354:	100160fb 	.word	0x100160fb

10016358 <_printf_common>:
10016358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001635a:	0017      	movs	r7, r2
1001635c:	9301      	str	r3, [sp, #4]
1001635e:	688a      	ldr	r2, [r1, #8]
10016360:	690b      	ldr	r3, [r1, #16]
10016362:	9000      	str	r0, [sp, #0]
10016364:	000c      	movs	r4, r1
10016366:	4293      	cmp	r3, r2
10016368:	da00      	bge.n	1001636c <_printf_common+0x14>
1001636a:	0013      	movs	r3, r2
1001636c:	0022      	movs	r2, r4
1001636e:	603b      	str	r3, [r7, #0]
10016370:	3243      	adds	r2, #67	; 0x43
10016372:	7812      	ldrb	r2, [r2, #0]
10016374:	2a00      	cmp	r2, #0
10016376:	d001      	beq.n	1001637c <_printf_common+0x24>
10016378:	3301      	adds	r3, #1
1001637a:	603b      	str	r3, [r7, #0]
1001637c:	6823      	ldr	r3, [r4, #0]
1001637e:	069b      	lsls	r3, r3, #26
10016380:	d502      	bpl.n	10016388 <_printf_common+0x30>
10016382:	683b      	ldr	r3, [r7, #0]
10016384:	3302      	adds	r3, #2
10016386:	603b      	str	r3, [r7, #0]
10016388:	2506      	movs	r5, #6
1001638a:	6823      	ldr	r3, [r4, #0]
1001638c:	401d      	ands	r5, r3
1001638e:	d01e      	beq.n	100163ce <_printf_common+0x76>
10016390:	0023      	movs	r3, r4
10016392:	3343      	adds	r3, #67	; 0x43
10016394:	781b      	ldrb	r3, [r3, #0]
10016396:	1e5a      	subs	r2, r3, #1
10016398:	4193      	sbcs	r3, r2
1001639a:	6822      	ldr	r2, [r4, #0]
1001639c:	0692      	lsls	r2, r2, #26
1001639e:	d51c      	bpl.n	100163da <_printf_common+0x82>
100163a0:	2030      	movs	r0, #48	; 0x30
100163a2:	18e1      	adds	r1, r4, r3
100163a4:	3143      	adds	r1, #67	; 0x43
100163a6:	7008      	strb	r0, [r1, #0]
100163a8:	0021      	movs	r1, r4
100163aa:	1c5a      	adds	r2, r3, #1
100163ac:	3145      	adds	r1, #69	; 0x45
100163ae:	7809      	ldrb	r1, [r1, #0]
100163b0:	18a2      	adds	r2, r4, r2
100163b2:	3243      	adds	r2, #67	; 0x43
100163b4:	3302      	adds	r3, #2
100163b6:	7011      	strb	r1, [r2, #0]
100163b8:	e00f      	b.n	100163da <_printf_common+0x82>
100163ba:	0022      	movs	r2, r4
100163bc:	2301      	movs	r3, #1
100163be:	3219      	adds	r2, #25
100163c0:	9901      	ldr	r1, [sp, #4]
100163c2:	9800      	ldr	r0, [sp, #0]
100163c4:	9e08      	ldr	r6, [sp, #32]
100163c6:	47b0      	blx	r6
100163c8:	1c43      	adds	r3, r0, #1
100163ca:	d00e      	beq.n	100163ea <_printf_common+0x92>
100163cc:	3501      	adds	r5, #1
100163ce:	68e3      	ldr	r3, [r4, #12]
100163d0:	683a      	ldr	r2, [r7, #0]
100163d2:	1a9b      	subs	r3, r3, r2
100163d4:	429d      	cmp	r5, r3
100163d6:	dbf0      	blt.n	100163ba <_printf_common+0x62>
100163d8:	e7da      	b.n	10016390 <_printf_common+0x38>
100163da:	0022      	movs	r2, r4
100163dc:	9901      	ldr	r1, [sp, #4]
100163de:	3243      	adds	r2, #67	; 0x43
100163e0:	9800      	ldr	r0, [sp, #0]
100163e2:	9d08      	ldr	r5, [sp, #32]
100163e4:	47a8      	blx	r5
100163e6:	1c43      	adds	r3, r0, #1
100163e8:	d102      	bne.n	100163f0 <_printf_common+0x98>
100163ea:	2001      	movs	r0, #1
100163ec:	4240      	negs	r0, r0
100163ee:	e020      	b.n	10016432 <_printf_common+0xda>
100163f0:	2306      	movs	r3, #6
100163f2:	6820      	ldr	r0, [r4, #0]
100163f4:	68e1      	ldr	r1, [r4, #12]
100163f6:	683a      	ldr	r2, [r7, #0]
100163f8:	4003      	ands	r3, r0
100163fa:	2500      	movs	r5, #0
100163fc:	2b04      	cmp	r3, #4
100163fe:	d103      	bne.n	10016408 <_printf_common+0xb0>
10016400:	1a8d      	subs	r5, r1, r2
10016402:	43eb      	mvns	r3, r5
10016404:	17db      	asrs	r3, r3, #31
10016406:	401d      	ands	r5, r3
10016408:	68a3      	ldr	r3, [r4, #8]
1001640a:	6922      	ldr	r2, [r4, #16]
1001640c:	4293      	cmp	r3, r2
1001640e:	dd01      	ble.n	10016414 <_printf_common+0xbc>
10016410:	1a9b      	subs	r3, r3, r2
10016412:	18ed      	adds	r5, r5, r3
10016414:	2700      	movs	r7, #0
10016416:	42bd      	cmp	r5, r7
10016418:	d00a      	beq.n	10016430 <_printf_common+0xd8>
1001641a:	0022      	movs	r2, r4
1001641c:	2301      	movs	r3, #1
1001641e:	321a      	adds	r2, #26
10016420:	9901      	ldr	r1, [sp, #4]
10016422:	9800      	ldr	r0, [sp, #0]
10016424:	9e08      	ldr	r6, [sp, #32]
10016426:	47b0      	blx	r6
10016428:	1c43      	adds	r3, r0, #1
1001642a:	d0de      	beq.n	100163ea <_printf_common+0x92>
1001642c:	3701      	adds	r7, #1
1001642e:	e7f2      	b.n	10016416 <_printf_common+0xbe>
10016430:	2000      	movs	r0, #0
10016432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10016434 <_printf_i>:
10016434:	b5f0      	push	{r4, r5, r6, r7, lr}
10016436:	b08b      	sub	sp, #44	; 0x2c
10016438:	9206      	str	r2, [sp, #24]
1001643a:	000a      	movs	r2, r1
1001643c:	3243      	adds	r2, #67	; 0x43
1001643e:	9307      	str	r3, [sp, #28]
10016440:	9005      	str	r0, [sp, #20]
10016442:	9204      	str	r2, [sp, #16]
10016444:	7e0a      	ldrb	r2, [r1, #24]
10016446:	000c      	movs	r4, r1
10016448:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001644a:	2a6e      	cmp	r2, #110	; 0x6e
1001644c:	d100      	bne.n	10016450 <_printf_i+0x1c>
1001644e:	e0ab      	b.n	100165a8 <_printf_i+0x174>
10016450:	d811      	bhi.n	10016476 <_printf_i+0x42>
10016452:	2a63      	cmp	r2, #99	; 0x63
10016454:	d022      	beq.n	1001649c <_printf_i+0x68>
10016456:	d809      	bhi.n	1001646c <_printf_i+0x38>
10016458:	2a00      	cmp	r2, #0
1001645a:	d100      	bne.n	1001645e <_printf_i+0x2a>
1001645c:	e0b5      	b.n	100165ca <_printf_i+0x196>
1001645e:	2a58      	cmp	r2, #88	; 0x58
10016460:	d000      	beq.n	10016464 <_printf_i+0x30>
10016462:	e0c5      	b.n	100165f0 <_printf_i+0x1bc>
10016464:	3145      	adds	r1, #69	; 0x45
10016466:	700a      	strb	r2, [r1, #0]
10016468:	4a81      	ldr	r2, [pc, #516]	; (10016670 <_printf_i+0x23c>)
1001646a:	e04f      	b.n	1001650c <_printf_i+0xd8>
1001646c:	2a64      	cmp	r2, #100	; 0x64
1001646e:	d01d      	beq.n	100164ac <_printf_i+0x78>
10016470:	2a69      	cmp	r2, #105	; 0x69
10016472:	d01b      	beq.n	100164ac <_printf_i+0x78>
10016474:	e0bc      	b.n	100165f0 <_printf_i+0x1bc>
10016476:	2a73      	cmp	r2, #115	; 0x73
10016478:	d100      	bne.n	1001647c <_printf_i+0x48>
1001647a:	e0aa      	b.n	100165d2 <_printf_i+0x19e>
1001647c:	d809      	bhi.n	10016492 <_printf_i+0x5e>
1001647e:	2a6f      	cmp	r2, #111	; 0x6f
10016480:	d029      	beq.n	100164d6 <_printf_i+0xa2>
10016482:	2a70      	cmp	r2, #112	; 0x70
10016484:	d000      	beq.n	10016488 <_printf_i+0x54>
10016486:	e0b3      	b.n	100165f0 <_printf_i+0x1bc>
10016488:	2220      	movs	r2, #32
1001648a:	6809      	ldr	r1, [r1, #0]
1001648c:	430a      	orrs	r2, r1
1001648e:	6022      	str	r2, [r4, #0]
10016490:	e037      	b.n	10016502 <_printf_i+0xce>
10016492:	2a75      	cmp	r2, #117	; 0x75
10016494:	d01f      	beq.n	100164d6 <_printf_i+0xa2>
10016496:	2a78      	cmp	r2, #120	; 0x78
10016498:	d033      	beq.n	10016502 <_printf_i+0xce>
1001649a:	e0a9      	b.n	100165f0 <_printf_i+0x1bc>
1001649c:	000e      	movs	r6, r1
1001649e:	681a      	ldr	r2, [r3, #0]
100164a0:	3642      	adds	r6, #66	; 0x42
100164a2:	1d11      	adds	r1, r2, #4
100164a4:	6019      	str	r1, [r3, #0]
100164a6:	6813      	ldr	r3, [r2, #0]
100164a8:	7033      	strb	r3, [r6, #0]
100164aa:	e0a4      	b.n	100165f6 <_printf_i+0x1c2>
100164ac:	6821      	ldr	r1, [r4, #0]
100164ae:	681a      	ldr	r2, [r3, #0]
100164b0:	0608      	lsls	r0, r1, #24
100164b2:	d406      	bmi.n	100164c2 <_printf_i+0x8e>
100164b4:	0649      	lsls	r1, r1, #25
100164b6:	d504      	bpl.n	100164c2 <_printf_i+0x8e>
100164b8:	1d11      	adds	r1, r2, #4
100164ba:	6019      	str	r1, [r3, #0]
100164bc:	2300      	movs	r3, #0
100164be:	5ed5      	ldrsh	r5, [r2, r3]
100164c0:	e002      	b.n	100164c8 <_printf_i+0x94>
100164c2:	1d11      	adds	r1, r2, #4
100164c4:	6019      	str	r1, [r3, #0]
100164c6:	6815      	ldr	r5, [r2, #0]
100164c8:	2d00      	cmp	r5, #0
100164ca:	da3b      	bge.n	10016544 <_printf_i+0x110>
100164cc:	232d      	movs	r3, #45	; 0x2d
100164ce:	9a04      	ldr	r2, [sp, #16]
100164d0:	426d      	negs	r5, r5
100164d2:	7013      	strb	r3, [r2, #0]
100164d4:	e036      	b.n	10016544 <_printf_i+0x110>
100164d6:	6821      	ldr	r1, [r4, #0]
100164d8:	681a      	ldr	r2, [r3, #0]
100164da:	0608      	lsls	r0, r1, #24
100164dc:	d406      	bmi.n	100164ec <_printf_i+0xb8>
100164de:	0649      	lsls	r1, r1, #25
100164e0:	d504      	bpl.n	100164ec <_printf_i+0xb8>
100164e2:	6815      	ldr	r5, [r2, #0]
100164e4:	1d11      	adds	r1, r2, #4
100164e6:	6019      	str	r1, [r3, #0]
100164e8:	b2ad      	uxth	r5, r5
100164ea:	e002      	b.n	100164f2 <_printf_i+0xbe>
100164ec:	1d11      	adds	r1, r2, #4
100164ee:	6019      	str	r1, [r3, #0]
100164f0:	6815      	ldr	r5, [r2, #0]
100164f2:	4b5f      	ldr	r3, [pc, #380]	; (10016670 <_printf_i+0x23c>)
100164f4:	7e22      	ldrb	r2, [r4, #24]
100164f6:	9303      	str	r3, [sp, #12]
100164f8:	2708      	movs	r7, #8
100164fa:	2a6f      	cmp	r2, #111	; 0x6f
100164fc:	d01d      	beq.n	1001653a <_printf_i+0x106>
100164fe:	270a      	movs	r7, #10
10016500:	e01b      	b.n	1001653a <_printf_i+0x106>
10016502:	0022      	movs	r2, r4
10016504:	2178      	movs	r1, #120	; 0x78
10016506:	3245      	adds	r2, #69	; 0x45
10016508:	7011      	strb	r1, [r2, #0]
1001650a:	4a5a      	ldr	r2, [pc, #360]	; (10016674 <_printf_i+0x240>)
1001650c:	6819      	ldr	r1, [r3, #0]
1001650e:	9203      	str	r2, [sp, #12]
10016510:	1d08      	adds	r0, r1, #4
10016512:	6822      	ldr	r2, [r4, #0]
10016514:	6018      	str	r0, [r3, #0]
10016516:	680d      	ldr	r5, [r1, #0]
10016518:	0610      	lsls	r0, r2, #24
1001651a:	d402      	bmi.n	10016522 <_printf_i+0xee>
1001651c:	0650      	lsls	r0, r2, #25
1001651e:	d500      	bpl.n	10016522 <_printf_i+0xee>
10016520:	b2ad      	uxth	r5, r5
10016522:	07d3      	lsls	r3, r2, #31
10016524:	d502      	bpl.n	1001652c <_printf_i+0xf8>
10016526:	2320      	movs	r3, #32
10016528:	431a      	orrs	r2, r3
1001652a:	6022      	str	r2, [r4, #0]
1001652c:	2710      	movs	r7, #16
1001652e:	2d00      	cmp	r5, #0
10016530:	d103      	bne.n	1001653a <_printf_i+0x106>
10016532:	2320      	movs	r3, #32
10016534:	6822      	ldr	r2, [r4, #0]
10016536:	439a      	bics	r2, r3
10016538:	6022      	str	r2, [r4, #0]
1001653a:	0023      	movs	r3, r4
1001653c:	2200      	movs	r2, #0
1001653e:	3343      	adds	r3, #67	; 0x43
10016540:	701a      	strb	r2, [r3, #0]
10016542:	e002      	b.n	1001654a <_printf_i+0x116>
10016544:	270a      	movs	r7, #10
10016546:	4b4a      	ldr	r3, [pc, #296]	; (10016670 <_printf_i+0x23c>)
10016548:	9303      	str	r3, [sp, #12]
1001654a:	6863      	ldr	r3, [r4, #4]
1001654c:	60a3      	str	r3, [r4, #8]
1001654e:	2b00      	cmp	r3, #0
10016550:	db09      	blt.n	10016566 <_printf_i+0x132>
10016552:	2204      	movs	r2, #4
10016554:	6821      	ldr	r1, [r4, #0]
10016556:	4391      	bics	r1, r2
10016558:	6021      	str	r1, [r4, #0]
1001655a:	2d00      	cmp	r5, #0
1001655c:	d105      	bne.n	1001656a <_printf_i+0x136>
1001655e:	9e04      	ldr	r6, [sp, #16]
10016560:	2b00      	cmp	r3, #0
10016562:	d011      	beq.n	10016588 <_printf_i+0x154>
10016564:	e07b      	b.n	1001665e <_printf_i+0x22a>
10016566:	2d00      	cmp	r5, #0
10016568:	d079      	beq.n	1001665e <_printf_i+0x22a>
1001656a:	9e04      	ldr	r6, [sp, #16]
1001656c:	0028      	movs	r0, r5
1001656e:	0039      	movs	r1, r7
10016570:	f7fc fa9e 	bl	10012ab0 <__aeabi_uidivmod>
10016574:	9b03      	ldr	r3, [sp, #12]
10016576:	3e01      	subs	r6, #1
10016578:	5c5b      	ldrb	r3, [r3, r1]
1001657a:	0028      	movs	r0, r5
1001657c:	7033      	strb	r3, [r6, #0]
1001657e:	0039      	movs	r1, r7
10016580:	f7fc fa10 	bl	100129a4 <__aeabi_uidiv>
10016584:	1e05      	subs	r5, r0, #0
10016586:	d1f1      	bne.n	1001656c <_printf_i+0x138>
10016588:	2f08      	cmp	r7, #8
1001658a:	d109      	bne.n	100165a0 <_printf_i+0x16c>
1001658c:	6823      	ldr	r3, [r4, #0]
1001658e:	07db      	lsls	r3, r3, #31
10016590:	d506      	bpl.n	100165a0 <_printf_i+0x16c>
10016592:	6863      	ldr	r3, [r4, #4]
10016594:	6922      	ldr	r2, [r4, #16]
10016596:	4293      	cmp	r3, r2
10016598:	dc02      	bgt.n	100165a0 <_printf_i+0x16c>
1001659a:	2330      	movs	r3, #48	; 0x30
1001659c:	3e01      	subs	r6, #1
1001659e:	7033      	strb	r3, [r6, #0]
100165a0:	9b04      	ldr	r3, [sp, #16]
100165a2:	1b9b      	subs	r3, r3, r6
100165a4:	6123      	str	r3, [r4, #16]
100165a6:	e02b      	b.n	10016600 <_printf_i+0x1cc>
100165a8:	6809      	ldr	r1, [r1, #0]
100165aa:	681a      	ldr	r2, [r3, #0]
100165ac:	0608      	lsls	r0, r1, #24
100165ae:	d407      	bmi.n	100165c0 <_printf_i+0x18c>
100165b0:	0649      	lsls	r1, r1, #25
100165b2:	d505      	bpl.n	100165c0 <_printf_i+0x18c>
100165b4:	1d11      	adds	r1, r2, #4
100165b6:	6019      	str	r1, [r3, #0]
100165b8:	6813      	ldr	r3, [r2, #0]
100165ba:	8aa2      	ldrh	r2, [r4, #20]
100165bc:	801a      	strh	r2, [r3, #0]
100165be:	e004      	b.n	100165ca <_printf_i+0x196>
100165c0:	1d11      	adds	r1, r2, #4
100165c2:	6019      	str	r1, [r3, #0]
100165c4:	6813      	ldr	r3, [r2, #0]
100165c6:	6962      	ldr	r2, [r4, #20]
100165c8:	601a      	str	r2, [r3, #0]
100165ca:	2300      	movs	r3, #0
100165cc:	9e04      	ldr	r6, [sp, #16]
100165ce:	6123      	str	r3, [r4, #16]
100165d0:	e016      	b.n	10016600 <_printf_i+0x1cc>
100165d2:	681a      	ldr	r2, [r3, #0]
100165d4:	1d11      	adds	r1, r2, #4
100165d6:	6019      	str	r1, [r3, #0]
100165d8:	6816      	ldr	r6, [r2, #0]
100165da:	2100      	movs	r1, #0
100165dc:	6862      	ldr	r2, [r4, #4]
100165de:	0030      	movs	r0, r6
100165e0:	f000 f92a 	bl	10016838 <memchr>
100165e4:	2800      	cmp	r0, #0
100165e6:	d001      	beq.n	100165ec <_printf_i+0x1b8>
100165e8:	1b80      	subs	r0, r0, r6
100165ea:	6060      	str	r0, [r4, #4]
100165ec:	6863      	ldr	r3, [r4, #4]
100165ee:	e003      	b.n	100165f8 <_printf_i+0x1c4>
100165f0:	0026      	movs	r6, r4
100165f2:	3642      	adds	r6, #66	; 0x42
100165f4:	7032      	strb	r2, [r6, #0]
100165f6:	2301      	movs	r3, #1
100165f8:	6123      	str	r3, [r4, #16]
100165fa:	2300      	movs	r3, #0
100165fc:	9a04      	ldr	r2, [sp, #16]
100165fe:	7013      	strb	r3, [r2, #0]
10016600:	9b07      	ldr	r3, [sp, #28]
10016602:	aa09      	add	r2, sp, #36	; 0x24
10016604:	9300      	str	r3, [sp, #0]
10016606:	0021      	movs	r1, r4
10016608:	9b06      	ldr	r3, [sp, #24]
1001660a:	9805      	ldr	r0, [sp, #20]
1001660c:	f7ff fea4 	bl	10016358 <_printf_common>
10016610:	1c43      	adds	r3, r0, #1
10016612:	d102      	bne.n	1001661a <_printf_i+0x1e6>
10016614:	2001      	movs	r0, #1
10016616:	4240      	negs	r0, r0
10016618:	e027      	b.n	1001666a <_printf_i+0x236>
1001661a:	6923      	ldr	r3, [r4, #16]
1001661c:	0032      	movs	r2, r6
1001661e:	9906      	ldr	r1, [sp, #24]
10016620:	9805      	ldr	r0, [sp, #20]
10016622:	9d07      	ldr	r5, [sp, #28]
10016624:	47a8      	blx	r5
10016626:	1c43      	adds	r3, r0, #1
10016628:	d0f4      	beq.n	10016614 <_printf_i+0x1e0>
1001662a:	6823      	ldr	r3, [r4, #0]
1001662c:	2500      	movs	r5, #0
1001662e:	079b      	lsls	r3, r3, #30
10016630:	d40f      	bmi.n	10016652 <_printf_i+0x21e>
10016632:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016634:	68e0      	ldr	r0, [r4, #12]
10016636:	4298      	cmp	r0, r3
10016638:	da17      	bge.n	1001666a <_printf_i+0x236>
1001663a:	0018      	movs	r0, r3
1001663c:	e015      	b.n	1001666a <_printf_i+0x236>
1001663e:	0022      	movs	r2, r4
10016640:	2301      	movs	r3, #1
10016642:	3219      	adds	r2, #25
10016644:	9906      	ldr	r1, [sp, #24]
10016646:	9805      	ldr	r0, [sp, #20]
10016648:	9e07      	ldr	r6, [sp, #28]
1001664a:	47b0      	blx	r6
1001664c:	1c43      	adds	r3, r0, #1
1001664e:	d0e1      	beq.n	10016614 <_printf_i+0x1e0>
10016650:	3501      	adds	r5, #1
10016652:	68e3      	ldr	r3, [r4, #12]
10016654:	9a09      	ldr	r2, [sp, #36]	; 0x24
10016656:	1a9b      	subs	r3, r3, r2
10016658:	429d      	cmp	r5, r3
1001665a:	dbf0      	blt.n	1001663e <_printf_i+0x20a>
1001665c:	e7e9      	b.n	10016632 <_printf_i+0x1fe>
1001665e:	0026      	movs	r6, r4
10016660:	9b03      	ldr	r3, [sp, #12]
10016662:	3642      	adds	r6, #66	; 0x42
10016664:	781b      	ldrb	r3, [r3, #0]
10016666:	7033      	strb	r3, [r6, #0]
10016668:	e78e      	b.n	10016588 <_printf_i+0x154>
1001666a:	b00b      	add	sp, #44	; 0x2c
1001666c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001666e:	46c0      	nop			; (mov r8, r8)
10016670:	100182f1 	.word	0x100182f1
10016674:	10018302 	.word	0x10018302

10016678 <_putc_r>:
10016678:	b570      	push	{r4, r5, r6, lr}
1001667a:	0006      	movs	r6, r0
1001667c:	000d      	movs	r5, r1
1001667e:	0014      	movs	r4, r2
10016680:	2800      	cmp	r0, #0
10016682:	d004      	beq.n	1001668e <_putc_r+0x16>
10016684:	6983      	ldr	r3, [r0, #24]
10016686:	2b00      	cmp	r3, #0
10016688:	d101      	bne.n	1001668e <_putc_r+0x16>
1001668a:	f7ff fc29 	bl	10015ee0 <__sinit>
1001668e:	4b12      	ldr	r3, [pc, #72]	; (100166d8 <_putc_r+0x60>)
10016690:	429c      	cmp	r4, r3
10016692:	d101      	bne.n	10016698 <_putc_r+0x20>
10016694:	6874      	ldr	r4, [r6, #4]
10016696:	e008      	b.n	100166aa <_putc_r+0x32>
10016698:	4b10      	ldr	r3, [pc, #64]	; (100166dc <_putc_r+0x64>)
1001669a:	429c      	cmp	r4, r3
1001669c:	d101      	bne.n	100166a2 <_putc_r+0x2a>
1001669e:	68b4      	ldr	r4, [r6, #8]
100166a0:	e003      	b.n	100166aa <_putc_r+0x32>
100166a2:	4b0f      	ldr	r3, [pc, #60]	; (100166e0 <_putc_r+0x68>)
100166a4:	429c      	cmp	r4, r3
100166a6:	d100      	bne.n	100166aa <_putc_r+0x32>
100166a8:	68f4      	ldr	r4, [r6, #12]
100166aa:	68a3      	ldr	r3, [r4, #8]
100166ac:	3b01      	subs	r3, #1
100166ae:	60a3      	str	r3, [r4, #8]
100166b0:	2b00      	cmp	r3, #0
100166b2:	da05      	bge.n	100166c0 <_putc_r+0x48>
100166b4:	69a2      	ldr	r2, [r4, #24]
100166b6:	4293      	cmp	r3, r2
100166b8:	db08      	blt.n	100166cc <_putc_r+0x54>
100166ba:	b2eb      	uxtb	r3, r5
100166bc:	2b0a      	cmp	r3, #10
100166be:	d005      	beq.n	100166cc <_putc_r+0x54>
100166c0:	6823      	ldr	r3, [r4, #0]
100166c2:	b2e8      	uxtb	r0, r5
100166c4:	1c5a      	adds	r2, r3, #1
100166c6:	6022      	str	r2, [r4, #0]
100166c8:	701d      	strb	r5, [r3, #0]
100166ca:	e004      	b.n	100166d6 <_putc_r+0x5e>
100166cc:	0022      	movs	r2, r4
100166ce:	0029      	movs	r1, r5
100166d0:	0030      	movs	r0, r6
100166d2:	f7ff fa43 	bl	10015b5c <__swbuf_r>
100166d6:	bd70      	pop	{r4, r5, r6, pc}
100166d8:	10018280 	.word	0x10018280
100166dc:	100182a0 	.word	0x100182a0
100166e0:	100182c0 	.word	0x100182c0

100166e4 <__sread>:
100166e4:	b570      	push	{r4, r5, r6, lr}
100166e6:	000c      	movs	r4, r1
100166e8:	250e      	movs	r5, #14
100166ea:	5f49      	ldrsh	r1, [r1, r5]
100166ec:	f000 f8b0 	bl	10016850 <_read_r>
100166f0:	2800      	cmp	r0, #0
100166f2:	db03      	blt.n	100166fc <__sread+0x18>
100166f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100166f6:	181b      	adds	r3, r3, r0
100166f8:	6563      	str	r3, [r4, #84]	; 0x54
100166fa:	e003      	b.n	10016704 <__sread+0x20>
100166fc:	89a2      	ldrh	r2, [r4, #12]
100166fe:	4b02      	ldr	r3, [pc, #8]	; (10016708 <__sread+0x24>)
10016700:	4013      	ands	r3, r2
10016702:	81a3      	strh	r3, [r4, #12]
10016704:	bd70      	pop	{r4, r5, r6, pc}
10016706:	46c0      	nop			; (mov r8, r8)
10016708:	ffffefff 	.word	0xffffefff

1001670c <__swrite>:
1001670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001670e:	001f      	movs	r7, r3
10016710:	898b      	ldrh	r3, [r1, #12]
10016712:	0005      	movs	r5, r0
10016714:	000c      	movs	r4, r1
10016716:	0016      	movs	r6, r2
10016718:	05db      	lsls	r3, r3, #23
1001671a:	d505      	bpl.n	10016728 <__swrite+0x1c>
1001671c:	230e      	movs	r3, #14
1001671e:	5ec9      	ldrsh	r1, [r1, r3]
10016720:	2200      	movs	r2, #0
10016722:	2302      	movs	r3, #2
10016724:	f000 f874 	bl	10016810 <_lseek_r>
10016728:	89a2      	ldrh	r2, [r4, #12]
1001672a:	4b05      	ldr	r3, [pc, #20]	; (10016740 <__swrite+0x34>)
1001672c:	0028      	movs	r0, r5
1001672e:	4013      	ands	r3, r2
10016730:	81a3      	strh	r3, [r4, #12]
10016732:	0032      	movs	r2, r6
10016734:	230e      	movs	r3, #14
10016736:	5ee1      	ldrsh	r1, [r4, r3]
10016738:	003b      	movs	r3, r7
1001673a:	f000 f81f 	bl	1001677c <_write_r>
1001673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016740:	ffffefff 	.word	0xffffefff

10016744 <__sseek>:
10016744:	b570      	push	{r4, r5, r6, lr}
10016746:	000c      	movs	r4, r1
10016748:	250e      	movs	r5, #14
1001674a:	5f49      	ldrsh	r1, [r1, r5]
1001674c:	f000 f860 	bl	10016810 <_lseek_r>
10016750:	89a3      	ldrh	r3, [r4, #12]
10016752:	1c42      	adds	r2, r0, #1
10016754:	d103      	bne.n	1001675e <__sseek+0x1a>
10016756:	4a05      	ldr	r2, [pc, #20]	; (1001676c <__sseek+0x28>)
10016758:	4013      	ands	r3, r2
1001675a:	81a3      	strh	r3, [r4, #12]
1001675c:	e004      	b.n	10016768 <__sseek+0x24>
1001675e:	2280      	movs	r2, #128	; 0x80
10016760:	0152      	lsls	r2, r2, #5
10016762:	4313      	orrs	r3, r2
10016764:	81a3      	strh	r3, [r4, #12]
10016766:	6560      	str	r0, [r4, #84]	; 0x54
10016768:	bd70      	pop	{r4, r5, r6, pc}
1001676a:	46c0      	nop			; (mov r8, r8)
1001676c:	ffffefff 	.word	0xffffefff

10016770 <__sclose>:
10016770:	b510      	push	{r4, lr}
10016772:	230e      	movs	r3, #14
10016774:	5ec9      	ldrsh	r1, [r1, r3]
10016776:	f000 f815 	bl	100167a4 <_close_r>
1001677a:	bd10      	pop	{r4, pc}

1001677c <_write_r>:
1001677c:	b570      	push	{r4, r5, r6, lr}
1001677e:	0005      	movs	r5, r0
10016780:	0008      	movs	r0, r1
10016782:	0011      	movs	r1, r2
10016784:	2200      	movs	r2, #0
10016786:	4c06      	ldr	r4, [pc, #24]	; (100167a0 <_write_r+0x24>)
10016788:	6022      	str	r2, [r4, #0]
1001678a:	001a      	movs	r2, r3
1001678c:	f7f5 fbfc 	bl	1000bf88 <_write>
10016790:	1c43      	adds	r3, r0, #1
10016792:	d103      	bne.n	1001679c <_write_r+0x20>
10016794:	6823      	ldr	r3, [r4, #0]
10016796:	2b00      	cmp	r3, #0
10016798:	d000      	beq.n	1001679c <_write_r+0x20>
1001679a:	602b      	str	r3, [r5, #0]
1001679c:	bd70      	pop	{r4, r5, r6, pc}
1001679e:	46c0      	nop			; (mov r8, r8)
100167a0:	1001b290 	.word	0x1001b290

100167a4 <_close_r>:
100167a4:	2300      	movs	r3, #0
100167a6:	b570      	push	{r4, r5, r6, lr}
100167a8:	4c06      	ldr	r4, [pc, #24]	; (100167c4 <_close_r+0x20>)
100167aa:	0005      	movs	r5, r0
100167ac:	0008      	movs	r0, r1
100167ae:	6023      	str	r3, [r4, #0]
100167b0:	f7f1 fe3c 	bl	1000842c <_close>
100167b4:	1c43      	adds	r3, r0, #1
100167b6:	d103      	bne.n	100167c0 <_close_r+0x1c>
100167b8:	6823      	ldr	r3, [r4, #0]
100167ba:	2b00      	cmp	r3, #0
100167bc:	d000      	beq.n	100167c0 <_close_r+0x1c>
100167be:	602b      	str	r3, [r5, #0]
100167c0:	bd70      	pop	{r4, r5, r6, pc}
100167c2:	46c0      	nop			; (mov r8, r8)
100167c4:	1001b290 	.word	0x1001b290

100167c8 <_fstat_r>:
100167c8:	2300      	movs	r3, #0
100167ca:	b570      	push	{r4, r5, r6, lr}
100167cc:	4c06      	ldr	r4, [pc, #24]	; (100167e8 <_fstat_r+0x20>)
100167ce:	0005      	movs	r5, r0
100167d0:	0008      	movs	r0, r1
100167d2:	0011      	movs	r1, r2
100167d4:	6023      	str	r3, [r4, #0]
100167d6:	f7f1 fe2d 	bl	10008434 <_fstat>
100167da:	1c43      	adds	r3, r0, #1
100167dc:	d103      	bne.n	100167e6 <_fstat_r+0x1e>
100167de:	6823      	ldr	r3, [r4, #0]
100167e0:	2b00      	cmp	r3, #0
100167e2:	d000      	beq.n	100167e6 <_fstat_r+0x1e>
100167e4:	602b      	str	r3, [r5, #0]
100167e6:	bd70      	pop	{r4, r5, r6, pc}
100167e8:	1001b290 	.word	0x1001b290

100167ec <_isatty_r>:
100167ec:	2300      	movs	r3, #0
100167ee:	b570      	push	{r4, r5, r6, lr}
100167f0:	4c06      	ldr	r4, [pc, #24]	; (1001680c <_isatty_r+0x20>)
100167f2:	0005      	movs	r5, r0
100167f4:	0008      	movs	r0, r1
100167f6:	6023      	str	r3, [r4, #0]
100167f8:	f7f1 fe22 	bl	10008440 <_isatty>
100167fc:	1c43      	adds	r3, r0, #1
100167fe:	d103      	bne.n	10016808 <_isatty_r+0x1c>
10016800:	6823      	ldr	r3, [r4, #0]
10016802:	2b00      	cmp	r3, #0
10016804:	d000      	beq.n	10016808 <_isatty_r+0x1c>
10016806:	602b      	str	r3, [r5, #0]
10016808:	bd70      	pop	{r4, r5, r6, pc}
1001680a:	46c0      	nop			; (mov r8, r8)
1001680c:	1001b290 	.word	0x1001b290

10016810 <_lseek_r>:
10016810:	b570      	push	{r4, r5, r6, lr}
10016812:	0005      	movs	r5, r0
10016814:	0008      	movs	r0, r1
10016816:	0011      	movs	r1, r2
10016818:	2200      	movs	r2, #0
1001681a:	4c06      	ldr	r4, [pc, #24]	; (10016834 <_lseek_r+0x24>)
1001681c:	6022      	str	r2, [r4, #0]
1001681e:	001a      	movs	r2, r3
10016820:	f7f1 fe10 	bl	10008444 <_lseek>
10016824:	1c43      	adds	r3, r0, #1
10016826:	d103      	bne.n	10016830 <_lseek_r+0x20>
10016828:	6823      	ldr	r3, [r4, #0]
1001682a:	2b00      	cmp	r3, #0
1001682c:	d000      	beq.n	10016830 <_lseek_r+0x20>
1001682e:	602b      	str	r3, [r5, #0]
10016830:	bd70      	pop	{r4, r5, r6, pc}
10016832:	46c0      	nop			; (mov r8, r8)
10016834:	1001b290 	.word	0x1001b290

10016838 <memchr>:
10016838:	b2c9      	uxtb	r1, r1
1001683a:	1882      	adds	r2, r0, r2
1001683c:	4290      	cmp	r0, r2
1001683e:	d004      	beq.n	1001684a <memchr+0x12>
10016840:	7803      	ldrb	r3, [r0, #0]
10016842:	428b      	cmp	r3, r1
10016844:	d002      	beq.n	1001684c <memchr+0x14>
10016846:	3001      	adds	r0, #1
10016848:	e7f8      	b.n	1001683c <memchr+0x4>
1001684a:	2000      	movs	r0, #0
1001684c:	4770      	bx	lr
	...

10016850 <_read_r>:
10016850:	b570      	push	{r4, r5, r6, lr}
10016852:	0005      	movs	r5, r0
10016854:	0008      	movs	r0, r1
10016856:	0011      	movs	r1, r2
10016858:	2200      	movs	r2, #0
1001685a:	4c06      	ldr	r4, [pc, #24]	; (10016874 <_read_r+0x24>)
1001685c:	6022      	str	r2, [r4, #0]
1001685e:	001a      	movs	r2, r3
10016860:	f7f5 fb72 	bl	1000bf48 <_read>
10016864:	1c43      	adds	r3, r0, #1
10016866:	d103      	bne.n	10016870 <_read_r+0x20>
10016868:	6823      	ldr	r3, [r4, #0]
1001686a:	2b00      	cmp	r3, #0
1001686c:	d000      	beq.n	10016870 <_read_r+0x20>
1001686e:	602b      	str	r3, [r5, #0]
10016870:	bd70      	pop	{r4, r5, r6, pc}
10016872:	46c0      	nop			; (mov r8, r8)
10016874:	1001b290 	.word	0x1001b290
10016878:	0000000d 	.word	0x0000000d
1001687c:	736d735b 	.word	0x736d735b
10016880:	656c625f 	.word	0x656c625f
10016884:	6961705f 	.word	0x6961705f
10016888:	65725f72 	.word	0x65725f72
1001688c:	73657571 	.word	0x73657571
10016890:	6e665f74 	.word	0x6e665f74
10016894:	6150095d 	.word	0x6150095d
10016898:	6e697269 	.word	0x6e697269
1001689c:	65722067 	.word	0x65722067
100168a0:	73657571 	.word	0x73657571
100168a4:	2e2e2e74 	.word	0x2e2e2e74
100168a8:	656e4220 	.word	0x656e4220
100168ac:	64252077 	.word	0x64252077
100168b0:	4c42202c 	.word	0x4c42202c
100168b4:	78302045 	.word	0x78302045
100168b8:	78323025 	.word	0x78323025
100168bc:	3154202c 	.word	0x3154202c
100168c0:	2c642520 	.word	0x2c642520
100168c4:	20325420 	.word	0x20325420
100168c8:	00006425 	.word	0x00006425
100168cc:	736d735b 	.word	0x736d735b
100168d0:	656c625f 	.word	0x656c625f
100168d4:	776f705f 	.word	0x776f705f
100168d8:	645f7265 	.word	0x645f7265
100168dc:	5d6e776f 	.word	0x5d6e776f
100168e0:	00000000 	.word	0x00000000
100168e4:	736d735b 	.word	0x736d735b
100168e8:	656c625f 	.word	0x656c625f
100168ec:	776f705f 	.word	0x776f705f
100168f0:	645f7265 	.word	0x645f7265
100168f4:	5d6e776f 	.word	0x5d6e776f
100168f8:	6f745309 	.word	0x6f745309
100168fc:	6e697070 	.word	0x6e697070
10016900:	6f632067 	.word	0x6f632067
10016904:	6e616d6d 	.word	0x6e616d6d
10016908:	65722064 	.word	0x65722064
1001690c:	76696563 	.word	0x76696563
10016910:	64206465 	.word	0x64206465
10016914:	6e697275 	.word	0x6e697275
10016918:	64612067 	.word	0x64612067
1001691c:	74726576 	.word	0x74726576
10016920:	6d657369 	.word	0x6d657369
10016924:	2e746e65 	.word	0x2e746e65
10016928:	6f745320 	.word	0x6f745320
1001692c:	6e697070 	.word	0x6e697070
10016930:	2e2e2e67 	.word	0x2e2e2e67
10016934:	00000020 	.word	0x00000020
10016938:	6c696166 	.word	0x6c696166
1001693c:	21216465 	.word	0x21216465
10016940:	00000021 	.word	0x00000021
10016944:	656e6f64 	.word	0x656e6f64
10016948:	00000021 	.word	0x00000021
1001694c:	736d735b 	.word	0x736d735b
10016950:	656c625f 	.word	0x656c625f
10016954:	776f705f 	.word	0x776f705f
10016958:	645f7265 	.word	0x645f7265
1001695c:	5d6e776f 	.word	0x5d6e776f
10016960:	65440909 	.word	0x65440909
10016964:	65636976 	.word	0x65636976
10016968:	69617020 	.word	0x69617020
1001696c:	2e646572 	.word	0x2e646572
10016970:	64202e2e 	.word	0x64202e2e
10016974:	62617369 	.word	0x62617369
10016978:	676e696c 	.word	0x676e696c
1001697c:	746e6920 	.word	0x746e6920
10016980:	75727265 	.word	0x75727265
10016984:	20737470 	.word	0x20737470
10016988:	77732026 	.word	0x77732026
1001698c:	68637469 	.word	0x68637469
10016990:	20676e69 	.word	0x20676e69
10016994:	6e776f64 	.word	0x6e776f64
10016998:	6e657320 	.word	0x6e657320
1001699c:	73726f73 	.word	0x73726f73
100169a0:	00000000 	.word	0x00000000
100169a4:	736d735b 	.word	0x736d735b
100169a8:	656c625f 	.word	0x656c625f
100169ac:	776f705f 	.word	0x776f705f
100169b0:	645f7265 	.word	0x645f7265
100169b4:	5d6e776f 	.word	0x5d6e776f
100169b8:	75430909 	.word	0x75430909
100169bc:	6e657272 	.word	0x6e657272
100169c0:	20796c74 	.word	0x20796c74
100169c4:	69646e69 	.word	0x69646e69
100169c8:	69746163 	.word	0x69746163
100169cc:	0000676e 	.word	0x0000676e
100169d0:	736d735b 	.word	0x736d735b
100169d4:	656c625f 	.word	0x656c625f
100169d8:	776f705f 	.word	0x776f705f
100169dc:	645f7265 	.word	0x645f7265
100169e0:	5d6e776f 	.word	0x5d6e776f
100169e4:	65440909 	.word	0x65440909
100169e8:	65636976 	.word	0x65636976
100169ec:	6e6f6320 	.word	0x6e6f6320
100169f0:	7463656e 	.word	0x7463656e
100169f4:	2e2e6465 	.word	0x2e2e6465
100169f8:	6964202e 	.word	0x6964202e
100169fc:	6e6f6373 	.word	0x6e6f6373
10016a00:	7463656e 	.word	0x7463656e
10016a04:	00676e69 	.word	0x00676e69
10016a08:	736d735b 	.word	0x736d735b
10016a0c:	656c625f 	.word	0x656c625f
10016a10:	7664615f 	.word	0x7664615f
10016a14:	7065725f 	.word	0x7065725f
10016a18:	5f74726f 	.word	0x5f74726f
10016a1c:	095d6e66 	.word	0x095d6e66
10016a20:	65766441 	.word	0x65766441
10016a24:	73697472 	.word	0x73697472
10016a28:	6e656d65 	.word	0x6e656d65
10016a2c:	69742074 	.word	0x69742074
10016a30:	756f656d 	.word	0x756f656d
10016a34:	2e2e2e74 	.word	0x2e2e2e74
10016a38:	00000000 	.word	0x00000000
10016a3c:	736d735b 	.word	0x736d735b
10016a40:	656c625f 	.word	0x656c625f
10016a44:	6e6f635f 	.word	0x6e6f635f
10016a48:	7463656e 	.word	0x7463656e
10016a4c:	665f6465 	.word	0x665f6465
10016a50:	09095d6e 	.word	0x09095d6e
10016a54:	69766544 	.word	0x69766544
10016a58:	20736563 	.word	0x20736563
10016a5c:	6e6e6f63 	.word	0x6e6e6f63
10016a60:	65746365 	.word	0x65746365
10016a64:	2e2e2e64 	.word	0x2e2e2e64
10016a68:	00000000 	.word	0x00000000
10016a6c:	736d735b 	.word	0x736d735b
10016a70:	656c625f 	.word	0x656c625f
10016a74:	6961705f 	.word	0x6961705f
10016a78:	5f646572 	.word	0x5f646572
10016a7c:	005d6e66 	.word	0x005d6e66
10016a80:	6e6e6143 	.word	0x6e6e6143
10016a84:	7320746f 	.word	0x7320746f
10016a88:	74726174 	.word	0x74726174
10016a8c:	554d4920 	.word	0x554d4920
10016a90:	00000000 	.word	0x00000000
10016a94:	736d735b 	.word	0x736d735b
10016a98:	656c625f 	.word	0x656c625f
10016a9c:	7664615f 	.word	0x7664615f
10016aa0:	69747265 	.word	0x69747265
10016aa4:	095d6573 	.word	0x095d6573
10016aa8:	65766441 	.word	0x65766441
10016aac:	73697472 	.word	0x73697472
10016ab0:	6e656d65 	.word	0x6e656d65
10016ab4:	61642074 	.word	0x61642074
10016ab8:	73206174 	.word	0x73206174
10016abc:	66207465 	.word	0x66207465
10016ac0:	656c6961 	.word	0x656c6961
10016ac4:	00002164 	.word	0x00002164
10016ac8:	736d735b 	.word	0x736d735b
10016acc:	656c625f 	.word	0x656c625f
10016ad0:	7664615f 	.word	0x7664615f
10016ad4:	69747265 	.word	0x69747265
10016ad8:	095d6573 	.word	0x095d6573
10016adc:	454c4209 	.word	0x454c4209
10016ae0:	61745320 	.word	0x61745320
10016ae4:	64657472 	.word	0x64657472
10016ae8:	76644120 	.word	0x76644120
10016aec:	69747265 	.word	0x69747265
10016af0:	656d6573 	.word	0x656d6573
10016af4:	0000746e 	.word	0x0000746e
10016af8:	736d735b 	.word	0x736d735b
10016afc:	7265735f 	.word	0x7265735f
10016b00:	65636976 	.word	0x65636976
10016b04:	7664615f 	.word	0x7664615f
10016b08:	69747265 	.word	0x69747265
10016b0c:	095d6573 	.word	0x095d6573
10016b10:	20454c42 	.word	0x20454c42
10016b14:	65766441 	.word	0x65766441
10016b18:	73697472 	.word	0x73697472
10016b1c:	6e656d65 	.word	0x6e656d65
10016b20:	74732074 	.word	0x74732074
10016b24:	20747261 	.word	0x20747261
10016b28:	6c696166 	.word	0x6c696166
10016b2c:	203a6465 	.word	0x203a6465
10016b30:	73616572 	.word	0x73616572
10016b34:	30206e6f 	.word	0x30206e6f
10016b38:	00782578 	.word	0x00782578
10016b3c:	736d735b 	.word	0x736d735b
10016b40:	656c625f 	.word	0x656c625f
10016b44:	7369645f 	.word	0x7369645f
10016b48:	6e6e6f63 	.word	0x6e6e6f63
10016b4c:	65746365 	.word	0x65746365
10016b50:	6e665f64 	.word	0x6e665f64
10016b54:	6550095d 	.word	0x6550095d
10016b58:	64207265 	.word	0x64207265
10016b5c:	6f637369 	.word	0x6f637369
10016b60:	63656e6e 	.word	0x63656e6e
10016b64:	2e646574 	.word	0x2e646574
10016b68:	42202e2e 	.word	0x42202e2e
10016b6c:	2077656e 	.word	0x2077656e
10016b70:	202c6425 	.word	0x202c6425
10016b74:	20454c42 	.word	0x20454c42
10016b78:	30257830 	.word	0x30257830
10016b7c:	202c7832 	.word	0x202c7832
10016b80:	25203154 	.word	0x25203154
10016b84:	54202c64 	.word	0x54202c64
10016b88:	64252032 	.word	0x64252032
10016b8c:	00000000 	.word	0x00000000
10016b90:	49544f4e 	.word	0x49544f4e
10016b94:	41434946 	.word	0x41434946
10016b98:	4e4f4954 	.word	0x4e4f4954
10016b9c:	52524520 	.word	0x52524520
10016ba0:	2121524f 	.word	0x2121524f
10016ba4:	00000000 	.word	0x00000000
10016ba8:	544f4e20 	.word	0x544f4e20
10016bac:	74657320 	.word	0x74657320
10016bb0:	0000203f 	.word	0x0000203f

10016bb4 <sms_ble_gap_cb>:
	...
10016bc0:	1000863d 00000000 10008671 100087cd     =.......q.......
	...
10016bd8:	100086c5 10008449 00000000 00000000     ....I...........
	...

10016c00 <sms_ble_gatt_server_cb>:
10016c00:	10008495 100084e5 00000000 00000000     ................
	...
10016c28:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016c38:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016c48:	656c6968 74657320 676e6974 20707520     hile setting up 
10016c58:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016c68:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016c78:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016c88:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016c98:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016ca8:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016cb8:	656c6968 74657320 676e6974 20707520     hile setting up 
10016cc8:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016cd8:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016ce8:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10016cf8:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10016d08:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016d18:	61570909 676e696b 20707520 00000000     ..Waking up ....
10016d28:	0000202e 736d735b 7475625f 5f6e6f74     . ..[sms_button_
10016d38:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10016d48:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10016d58:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10016d68:	73752074 73206465 65746174 002e2e2e     t used state....
10016d78:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016d88:	68530909 69747475 6420676e 206e776f     ..Shutting down 
10016d98:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10016da8:	095d6e66 6f4e0909 0000656e 72617453     fn]...None..Star
10016db8:	70752074 776f6e20 00000021 74756853     t up now!...Shut
10016dc8:	776f6420 6f6e206e 00002177 736d735b      down now!..[sms
10016dd8:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016de8:	69767265 5d736563 72655309 65636976     ervices].Service
10016df8:	65642073 696e6966 6620676e 656c6961     s defining faile
10016e08:	72202c64 6f736165 7830206e 00007825     d, reason 0x%x..
10016e18:	736d735b 7475625f 5f6e6f74 69666564     [sms_button_defi
10016e28:	735f656e 69767265 5d736563 72655309     ne_services].Ser
10016e38:	65636976 65642073 656e6966 53202c64     vices defined, S
10016e48:	6220534d 6f747475 6168206e 656c646e     MS button handle
10016e58:	6425203a 00000000 626f7250 206d656c     : %d....Problem 
10016e68:	6c696877 65732065 6e697474 70672067     while setting gp
10016e78:	70206f69 00006e69 2e2e7325 4209092e     io pin..%s.....B
10016e88:	6572702d 64252076 2d42202c 20727563     -prev %d, B-cur 
10016e98:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
10016ea8:	25203154 54202c64 64252032 4d53202c     T1 %d, T2 %d, SM
10016eb8:	64252053 00000000 736d735b 756d695f     S %d....[sms_imu
10016ec8:	6e6f635f 75676966 675f6572 5d6f6970     _configure_gpio]
10016ed8:	6f725009 6d656c62 69687720 7320656c     .Problem while s
10016ee8:	69747465 7520676e 4d492070 52442055     etting up IMU DR
10016ef8:	70205944 00006e69 736d735b 75706d5f     DY pin..[sms_mpu
10016f08:	6665645f 5f656e69 76726573 73656369     _define_services
10016f18:	6553095d 63697672 64207365 6e696665     ].Services defin
10016f28:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10016f38:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
10016f48:	6665645f 5f656e69 76726573 73656369     _define_services
10016f58:	6553095d 63697672 64207365 6e696665     ].Services defin
10016f68:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
10016f78:	203a656c 00006425 2055504d 696c6163     le: %d..MPU cali
10016f88:	74617262 2e2e6465 6962202e 76207361     brated... bias v
10016f98:	65756c61 25203a73 2520646c 2520646c     alues: %ld %ld %
10016fa8:	2f20646c 646c2520 646c2520 646c2520     ld / %ld %ld %ld
10016fb8:	00000000 736d735b 64656c5f 6970675f     ....[sms_led_gpi
10016fc8:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
10016fd8:	6c696877 65732065 6e697474 70752067     while setting up
10016fe8:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
10016ff8:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
10017008:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10017018:	20656c69 74746573 20676e69 56207075     ile setting up V
10017028:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10017038:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10017048:	72617453 676e6974 65727020 72757373     Starting pressur
10017058:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10017068:	6572705f 72757373 74735f65 75747261     _pressure_startu
10017078:	09095d70 69614609 2064656c 69206f74     p]...Failed to i
10017088:	6974696e 7a696c61 72702065 75737365     nitialize pressu
10017098:	64206572 63697665 00000065 736d735b     re device...[sms
100170a8:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
100170b8:	75636c61 6574616c 6574205d 7265706d     alculate] temper
100170c8:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
100170d8:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
100170e8:	6572705f 72757373 736d5f65 705f3835     _pressure_ms58_p
100170f8:	5f6c6c6f 61746164 7270205d 656c626f     oll_data] proble
10017108:	6572206d 6e696461 736d2067 64203835     m reading ms58 d
10017118:	00617461 736d735b 6572705f 72757373     ata.[sms_pressur
10017128:	65645f65 656e6966 7265735f 65636976     e_define_service
10017138:	53095d73 69767265 20736563 69666564     s].Services defi
10017148:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10017158:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10017168:	6572705f 72757373 65645f65 656e6966     _pressure_define
10017178:	7265735f 65636976 53095d73 69767265     _services].Servi
10017188:	20736563 69666564 2c64656e 534d5320     ces defined, SMS
10017198:	65727020 72757373 61682065 656c646e      pressure handle
100171a8:	6425203a 00000000 1000af68 1000af76     : %d....h...v...
100171b8:	1000af84 1000af92 1000afa0 1000afae     ................
100171c8:	1000afbc 1000afcc 1000afdc 1000afec     ................
100171d8:	1000affc 1000b00c 1000b01c 1000b02c     ............,...
100171e8:	1000b03c 1000b04c 1000b05c 1000b06c     <...L...\...l...
100171f8:	1000b07c 1000b08c 1000b09c 1000b0ac     |...............
10017208:	1000b0bc 1000b0cc 1000b0dc 1000b0ec     ................
10017218:	1000b0fc 1000b10c 1000b11a 1000b128     ............(...
10017228:	1000b136 1000b144 1000b152 1000b160     6...D...R...`...
10017238:	1000b16e 1000b17c 1000b18c 1000b19c     n...|...........
10017248:	1000b1ac 1000b1bc 1000b1cc 1000b1dc     ................
10017258:	1000b1ec 1000b1fc 1000b20c 1000b21c     ................
10017268:	1000b22c 1000b23c 1000b24c 1000b25c     ,...<...L...\...
10017278:	1000b26c 1000b27c 1000b28a 1000b298     l...|...........
10017288:	1000b2c4 1000b2d2 1000b2e0 1000b2ee     ................
10017298:	1000b2fc 1000b30a 1000b318 1000b326     ............&...
100172a8:	1000b334 1000b342 1000b350 1000b35e     4...B...P...^...
100172b8:	1000b36c 1000b37a 1000b388 1000b396     l...z...........
100172c8:	1000b3a4 1000b3b2 1000b3c0 1000b3ce     ................
100172d8:	1000b3dc 1000b3ea 1000b3f8 1000b406     ................
100172e8:	1000b414 1000b422 1000b430 1000b43e     ...."...0...>...
100172f8:	1000b44c 1000b45a 1000b468 1000b476     L...Z...h...v...
10017308:	1000b484 1000b492 1000b4a0 1000b4ae     ................
10017318:	1000b4bc 1000b4ca 1000b4d8 1000b4e6     ................
10017328:	1000b4f4 1000b502 1000b510 1000b51e     ................
10017338:	1000b52c 1000b53a 1000b548 1000b556     ,...:...H...V...
10017348:	1000b564 1000b572 1000b580 1000b58e     d...r...........
10017358:	1000b59c 1000b5aa 1000b644 1000b66c     ........D...l...
10017368:	1000b694 1000b6bc 1000b8fc 1000b6ec     ................
10017378:	1000b704 1000b77c 1000b794 1000b71c     ....|...........
10017388:	1000b734 1000b74c 1000b764 1000b7ac     4...L...d.......
10017398:	1000ba70 1000ba70 1000ba70 1000ba70     p...p...p...p...
100173a8:	1000ba70 1000ba70 1000ba70 1000ba70     p...p...p...p...
100173b8:	1000b854 1000b86c 1000b884 1000b912     T...l...........
100173c8:	1000b7dc 1000ba70 1000ba70 1000ba70     ....p...p...p...
100173d8:	1000ba70 1000ba70 1000ba70 1000b89c     p...p...p.......
100173e8:	1000b8b4 1000b8cc 1000b8e4 1000ba70     ............p...
100173f8:	1000ba28 1000ba40 1000ba70 1000ba70     (...@...p...p...
10017408:	1000b93e 1000b954 1000b96a 1000b980     >...T...j.......
10017418:	1000ba70 1000ba70 1000ba70 1000ba70     p...p...p...p...
10017428:	1000ba70 1000ba70 1000ba70 1000ba70     p...p...p...p...
10017438:	1000b630 1000b658 1000b680 1000b6a8     0...X...........
10017448:	1000b6d4 1000b7c4 1000b7f4 1000b80c     ................
10017458:	1000b824 1000b83c 1000b928 1000b996     $...<...(.......
10017468:	1000ba10 1000ba58 1000c152 1000c164     ....X...R...d...
10017478:	1000c13a 1000c13a 1000c13a 1000c152     :...:...:...R...
10017488:	1000c13a 1000c13a 1000cb56 1000cbca     :...:...V.......
10017498:	1000cb3e 1000cbd0 1000cb44 1000cb4a     >.......D...J...
100174a8:	1000cb50 1000d2b0 1000d2b0 1000d2b0     P...............
100174b8:	1000d2b0 1000d2b0 1000d2b0 1000d2b0     ................
100174c8:	1000d2b0 1000d2b0 1000d2b0 1000d2b0     ................
100174d8:	1000d2b0 1000d2b0 1000d2b0 1000d2b0     ................
100174e8:	1000d2b0 1000d2b0 1000d2b0 1000d2b0     ................
100174f8:	1000d2ce 1000d2ce 1000d2ce 1000d2ce     ................
10017508:	1000d2ce 1000d2ce 1000d2ce 1000d2ce     ................
10017518:	1000d2ce 1000d2ce 1000d2f0 1000d2f0     ................
10017528:	1000d2f0 1000d2f0 1000d2f0 1000d2f0     ................
10017538:	1000d2f0 1000d2f0 1000d2f0 1000d2f0     ................
10017548:	1000d320 1000d320 1000d320 1000d320      ... ... ... ...
10017558:	1000d320 1000d320 1000d33a 1000d33a      ... ...:...:...
10017568:	1000d33a 1000d33a 1000d33a 1000d33a     :...:...:...:...
10017578:	1000d33a 1000d33a 1000d33a 1000d354     :...:...:...T...
10017588:	1000d354 1000d376 1000d376 1000d390     T...v...v.......
10017598:	1000d376 34333231 00003635 efcdab00     v...123456......
100175a8:	00efcdab                                ....

100175ac <ble_mgr_gatt_server_handle>:
	...
100175c4:	1000c04d 1000c075 1000c0bd 00000000     M...u...........
100175d4:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100175e4:	65636552 64657669 00000000 6e616353     Received....Scan
100175f4:	676e696e 61662020 64656c69 00000000     ning  failed....
10017604:	65766441 73697472 20676e69 6c696166     Advertising fail
10017614:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10017624:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10017634:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10017644:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10017654:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10017664:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10017674:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10017684:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10017694:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100176a4:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100176b4:	00000064 72616843 69725720 43206574     d...Char Write C
100176c4:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100176d4:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100176e4:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
100176f4:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10017704:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10017714:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017724:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10017734:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10017744:	00000000 69766544 64206563 6f637369     ....Device disco
10017754:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10017764:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10017774:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10017784:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10017794:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100177a4:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100177b4:	6c706d6f 64657465 63757320 73736563     ompleted success
100177c4:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100177d4:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100177e4:	74707972 206e6f69 6f666e69 00000000     ryption info....
100177f4:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017804:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017814:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017824:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017834:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10017844:	206e6163 69766564 72206563 68636165     can device reach
10017854:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10017864:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10017874:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10017884:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017894:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100178a4:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100178b4:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100178c4:	52207463 65757165 46207473 656c6961     ct Request Faile
100178d4:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100178e4:	72756465 6f632065 656c706d 20646574     edure completed 
100178f4:	63637573 66737365 796c6c75 00000000     successfully....
10017904:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017914:	646e756f 206f7420 726f7473 68742065     ound to store th
10017924:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017934:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017944:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017954:	76616c53 65532065 69727563 52207974     Slave Security R
10017964:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017974:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017984:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017994:	00205832 646e6553 20676e69 72696170     2X .Sending pair
100179a4:	20676e69 70736572 65736e6f 00000000     ing response....
100179b4:	72696150 71655220 74736575 41202d20     Pair Request - A
100179c4:	65687475 6369746e 6f697461 6146206e     uthentication Fa
100179d4:	64656c69 00000000 65746e45 68742072     iled....Enter th
100179e4:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
100179f4:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017a04:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017a14:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017a24:	61656c50 45206573 7265746e 65687420     Please Enter the
10017a34:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017a44:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017a54:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017a64:	70657220 6620796c 656c6961 00000064      reply failed...
10017a74:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017a84:	70707573 6574726f 00000064 65746e45     supported...Ente
10017a94:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017aa4:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017ab4:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017ac4:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017ad4:	76656420 20656369 76696465 00782520      device ediv %x.
10017ae4:	72656570 76656420 20656369 76696465     peer device ediv
10017af4:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017b04:	00782520 20656854 65646e69 73692078      %x.The index is
10017b14:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017b24:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017b34:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017b44:	20726565 69766564 69206563 6f6e2073     eer device is no
10017b54:	76612074 616c6961 2e656c62 00000000     t available.....
10017b64:	61656c50 75206573 6961706e 68742072     Please unpair th
10017b74:	65642065 65636976 6f726620 6570206d     e device from pe
10017b84:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017b94:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017ba4:	20646e61 72617473 61702074 6e697269     and start pairin
10017bb4:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017bc4:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017bd4:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017be4:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017bf4:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017c04:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017c14:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017c24:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017c34:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017c44:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017c54:	61656c50 63206573 6b636568 65687420     Please check the
10017c64:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017c74:	6f697463 202f206e 64726168 65726177     ction / hardware
10017c84:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017c94:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017ca4:	20656d61 20746573 6c696166 00006465     ame set failed..
10017cb4:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017cc4:	5d676966 44420909 64646120 73736572     fig]..BD address
10017cd4:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017ce4:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017cf4:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017d04:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017d14:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017d24:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017d34:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017d44:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017d54:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017d64:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017d74:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017d84:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017d94:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017da4:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017db4:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017dc4:	69727563 72207974 65757165 73207473     curity request s
10017dd4:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017de4:	65732065 69727563 72207974 65757165     e security reque
10017df4:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017e04:	65746365 6f742064 65657020 65642072     ected to peer de
10017e14:	65636976 74697720 64612068 73657264     vice with addres
10017e24:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017e34:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017e44:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017e54:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017e64:	61522067 6d6f646e 64646120 73736572     g Random address
10017e74:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017e84:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017e94:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017ea4:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017eb4:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017ec4:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017ed4:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017ee4:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017ef4:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017f04:	00000064 23232323 23232323 65442323     d...##########De
10017f14:	65636976 756f4620 0000646e 23232323     vice Found..####
10017f24:	23232323 65442323 65636976 746f4e20     ######Device Not
10017f34:	756f4620 0000646e 69766544 69206563      Found..Device i
10017f44:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10017f54:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10017f64:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017f74:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017f84:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10017f94:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10017fa4:	756e614d 74636166 72657275 65707320     Manufacturer spe
10017fb4:	69666963 61642063 65206174 6c62616e     cific data enabl
10017fc4:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
10017fd4:	65766441 73697472 6e656d65 61642074     Advertisement da
10017fe4:	73206174 66207465 656c6961 00000064     ta set failed...

10017ff4 <ble_mgr_gap_handle>:
10017ff4:	1000bfd9 1000c289 1000bffd 1000c025     ............%...
10018004:	00000000 1000cf05 1000c105 1000c1a1     ................
10018014:	1000c4e5 1000c335 1000c6e5 1000c4fd     ....5...........
10018024:	1000c871 1000c9b5 1000c1c5 1000d151     q...........Q...
	...
10018040:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10018050:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
10018060:	5f6e6f74 29286e66 00000000 316e7442     ton_fn()....Btn1
10018070:	746e6920 202e2e2e 00000000 74736170      int... ....past
10018080:	6c25203a 6e202c75 203a776f 2c756c25     : %lu, now: %lu,
10018090:	6c656420 203a6174 00756c25 73756c66      delta: %lu.flus
100180a0:	676e6968 00000021 73657250 65732073     hing!...Press se
100180b0:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
100180c0:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
100180d0:	6e657645 65672074 69742074 756f656d     Event get timeou
100180e0:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
100180f0:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
10018100:	04022e70                                         p.

10018102 <CSWTCH.45>:
10018102:	00100402                                         ...

10018105 <CSWTCH.47>:
10018105:	03010300 03030303 03030303 02020303              ...............

10018114 <client_conf_uuid>:
10018114:	29042902                                         .)

10018116 <presentation_format_uuid>:
10018116:	29012904                                         .)

10018118 <user_desc_uuid>:
10018118:	29032901                                         .)

1001811a <server_conf_uuid>:
1001811a:	29002903                                         .)

1001811c <extended_props_uuid>:
1001811c:	28022900                                         .)

1001811e <include_uuid>:
1001811e:	28032802                                         .(

10018120 <char_uuid>:
10018120:	00002803 00776f70                       .(..pow.

10018128 <TWO52>:
10018128:	00000000 43300000 00000000 c3300000     ......0C......0.
10018138:	10012f96 10012eba 10012f78 10012f50     ./......x/..P/..
10018148:	10012f78 10012f44 10012f78 10012f50     x/..D/..x/..P/..
10018158:	10012eba 10012eba 10012f44 10012f50     ........D/..P/..
10018168:	10012ffc 10012ffc 10012ffc 10012f7e     ./.../.../..~/..
10018178:	10012eba 10012eba 10012f64 10012f4e     ........d/..N/..
10018188:	10012f64 10012f44 10012f64 10012f4e     d/..D/..d/..N/..
10018198:	10012eba 10012eba 10012f44 10012f4e     ........D/..N/..
100181a8:	10012ffc 10012ffc 10012ffc 10013008     ./.../.../...0..
100181b8:	100132f4 10013252 10013252 10013250     .2..R2..R2..P2..
100181c8:	100132e6 100132e6 100132dc 10013250     .2...2...2..P2..
100181d8:	100132e6 100132dc 100132e6 10013250     .2...2...2..P2..
100181e8:	100132ec 100132ec 100132ec 10013376     .2...2...2..v3..
100181f8:	100140a4 10013f72 10014078 10013f68     .@..r?..x@..h?..
10018208:	10014078 10014082 10014078 10013f68     x@...@..x@..h?..
10018218:	10013f72 10013f72 10014082 10013f68     r?..r?...@..h?..
10018228:	10013f5e 10013f5e 10013f5e 100142d4     ^?..^?..^?...B..
10018238:	100148ec 100147ac 100147ac 100147aa     .H...G...G...G..
10018248:	100148c4 100148c4 100148b6 100147aa     .H...H...H...G..
10018258:	100148c4 100148b6 100148c4 100147aa     .H...H...H...G..
10018268:	100148cc 100148cc 100148cc 10014acc     .H...H...H...J..
10018278:	00000043                                C...

1001827c <_global_impure_ptr>:
1001827c:	10018340                                @...

10018280 <__sf_fake_stdin>:
	...

100182a0 <__sf_fake_stdout>:
	...

100182c0 <__sf_fake_stderr>:
	...
100182e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100182f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018300:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018310:	00006665                                ef..

10018314 <_init>:
10018314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018316:	46c0      	nop			; (mov r8, r8)
10018318:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001831a:	bc08      	pop	{r3}
1001831c:	469e      	mov	lr, r3
1001831e:	4770      	bx	lr

10018320 <__init_array_start>:
10018320:	100080b1 	.word	0x100080b1

10018324 <_fini>:
10018324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018326:	46c0      	nop			; (mov r8, r8)
10018328:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001832a:	bc08      	pop	{r3}
1001832c:	469e      	mov	lr, r3
1001832e:	4770      	bx	lr

10018330 <__fini_array_start>:
10018330:	10008089 	.word	0x10008089
