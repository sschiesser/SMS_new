
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f060  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10017060  10017060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea8  1001710c  1001710c  0001710c  2**2
                  ALLOC
  3 .stack        00000804  10019fb4  10019fb4  0001710c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001710c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017134  2**0
                  CONTENTS, READONLY
  6 .debug_info   000508a7  00000000  00000000  000171e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000598c  00000000  00000000  00067a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b7b5  00000000  00000000  0006d41b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d88  00000000  00000000  00078bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e00  00000000  00000000  00079958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e88  00000000  00000000  0007a758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018d0a  00000000  00000000  000a35e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014723c  00000000  00000000  000bc2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fb4  00000000  00000000  00203528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10017060 	.word	0x10017060
10008068:	10017060 	.word	0x10017060
1000806c:	1001710c 	.word	0x1001710c
10008070:	10019fb4 	.word	0x10019fb4
10008074:	1001710c 	.word	0x1001710c
10008078:	10017064 	.word	0x10017064
1000807c:	10017110 	.word	0x10017110
10008080:	10014861 	.word	0x10014861
10008084:	1000f095 	.word	0x1000f095

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001710c 	.word	0x1001710c
100080a8:	00000000 	.word	0x00000000
100080ac:	10017060 	.word	0x10017060

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017110 	.word	0x10017110
100080dc:	10017060 	.word	0x10017060
100080e0:	10017060 	.word	0x10017060
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c2d9 	.word	0x1000c2d9
10008114:	100127ed 	.word	0x100127ed
10008118:	10017064 	.word	0x10017064
1000811c:	000f4240 	.word	0x000f4240
10008120:	10017060 	.word	0x10017060
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	10014a6d 	.word	0x10014a6d
10008160:	10017064 	.word	0x10017064
10008164:	e000e010 	.word	0xe000e010
10008168:	10015a98 	.word	0x10015a98
1000816c:	10014a39 	.word	0x10014a39

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	10017128 	.word	0x10017128

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	10017128 	.word	0x10017128

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	10017128 	.word	0x10017128

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b29      	ldr	r3, [pc, #164]	; (10008290 <aon_sleep_timer_init+0xac>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a26      	ldr	r2, [pc, #152]	; (10008290 <aon_sleep_timer_init+0xac>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a22      	ldr	r2, [pc, #136]	; (10008290 <aon_sleep_timer_init+0xac>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b21      	ldr	r3, [pc, #132]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d1f      	ldr	r5, [pc, #124]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b0e      	ldr	r3, [pc, #56]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0b      	ldr	r3, [pc, #44]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d106      	bne.n	10008284 <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4907      	ldr	r1, [pc, #28]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008284:	4904      	ldr	r1, [pc, #16]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008286:	202b      	movs	r0, #43	; 0x2b
10008288:	4b04      	ldr	r3, [pc, #16]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000828a:	4798      	blx	r3
}
1000828c:	b003      	add	sp, #12
1000828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008290:	4000e000 	.word	0x4000e000
10008294:	4000d000 	.word	0x4000d000
10008298:	100081b1 	.word	0x100081b1
1000829c:	1000ce15 	.word	0x1000ce15

100082a0 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a2:	4657      	mov	r7, sl
100082a4:	464e      	mov	r6, r9
100082a6:	4645      	mov	r5, r8
100082a8:	b4e0      	push	{r5, r6, r7}
100082aa:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100082ac:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082ae:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082b0:	2d00      	cmp	r5, #0
100082b2:	d033      	beq.n	1000831c <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082b4:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082b6:	2428      	movs	r4, #40	; 0x28
100082b8:	5d1a      	ldrb	r2, [r3, r4]
100082ba:	07d2      	lsls	r2, r2, #31
100082bc:	d4fc      	bmi.n	100082b8 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082be:	2201      	movs	r2, #1
100082c0:	2434      	movs	r4, #52	; 0x34
100082c2:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082c4:	3c14      	subs	r4, #20
100082c6:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082c8:	880a      	ldrh	r2, [r1, #0]
100082ca:	0052      	lsls	r2, r2, #1
100082cc:	2402      	movs	r4, #2
100082ce:	34ff      	adds	r4, #255	; 0xff
100082d0:	4322      	orrs	r2, r4
100082d2:	b292      	uxth	r2, r2
100082d4:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082d6:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
100082d8:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082da:	4222      	tst	r2, r4
100082dc:	d0fc      	beq.n	100082d8 <_i2c_master_read_packet+0x38>
100082de:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
100082e0:	1e6c      	subs	r4, r5, #1
100082e2:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082e4:	2420      	movs	r4, #32
100082e6:	46a1      	mov	r9, r4
100082e8:	2400      	movs	r4, #0
100082ea:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ec:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
100082ee:	7944      	ldrb	r4, [r0, #5]
100082f0:	2c00      	cmp	r4, #0
100082f2:	d104      	bne.n	100082fe <_i2c_master_read_packet+0x5e>
100082f4:	4562      	cmp	r2, ip
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	464c      	mov	r4, r9
100082fa:	4647      	mov	r7, r8
100082fc:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
100082fe:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008300:	4234      	tst	r4, r6
10008302:	d008      	beq.n	10008316 <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
10008304:	1c54      	adds	r4, r2, #1
10008306:	46a2      	mov	sl, r4
10008308:	791f      	ldrb	r7, [r3, #4]
1000830a:	684c      	ldr	r4, [r1, #4]
1000830c:	54a7      	strb	r7, [r4, r2]
1000830e:	4652      	mov	r2, sl
10008310:	466c      	mov	r4, sp
10008312:	80e2      	strh	r2, [r4, #6]
10008314:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
10008316:	42aa      	cmp	r2, r5
10008318:	d3e9      	bcc.n	100082ee <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
1000831a:	2300      	movs	r3, #0
}
1000831c:	0018      	movs	r0, r3
1000831e:	b002      	add	sp, #8
10008320:	bc1c      	pop	{r2, r3, r4}
10008322:	4690      	mov	r8, r2
10008324:	4699      	mov	r9, r3
10008326:	46a2      	mov	sl, r4
10008328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000832a:	46c0      	nop			; (mov r8, r8)

1000832c <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000832c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000832e:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
10008330:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008332:	884e      	ldrh	r6, [r1, #2]
10008334:	2428      	movs	r4, #40	; 0x28
10008336:	5d13      	ldrb	r3, [r2, r4]
10008338:	07db      	lsls	r3, r3, #31
1000833a:	d4fc      	bmi.n	10008336 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000833c:	2301      	movs	r3, #1
1000833e:	2434      	movs	r4, #52	; 0x34
10008340:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008342:	3c14      	subs	r4, #20
10008344:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008346:	880b      	ldrh	r3, [r1, #0]
10008348:	005b      	lsls	r3, r3, #1
1000834a:	34e0      	adds	r4, #224	; 0xe0
1000834c:	4323      	orrs	r3, r4
1000834e:	b29b      	uxth	r3, r3
10008350:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
10008352:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008354:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008356:	7a13      	ldrb	r3, [r2, #8]
10008358:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000835a:	421d      	tst	r5, r3
1000835c:	d004      	beq.n	10008368 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000835e:	1c67      	adds	r7, r4, #1
10008360:	6848      	ldr	r0, [r1, #4]
10008362:	5d04      	ldrb	r4, [r0, r4]
10008364:	8014      	strh	r4, [r2, #0]
10008366:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008368:	42b4      	cmp	r4, r6
1000836a:	d3f4      	bcc.n	10008356 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000836c:	06db      	lsls	r3, r3, #27
1000836e:	d403      	bmi.n	10008378 <_i2c_master_write_packet+0x4c>
10008370:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008372:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008374:	420b      	tst	r3, r1
10008376:	d0fc      	beq.n	10008372 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008378:	4663      	mov	r3, ip
1000837a:	795b      	ldrb	r3, [r3, #5]
1000837c:	2b00      	cmp	r3, #0
1000837e:	d102      	bne.n	10008386 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008380:	2100      	movs	r1, #0
10008382:	3320      	adds	r3, #32
10008384:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008386:	2000      	movs	r0, #0
10008388:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000838a:	46c0      	nop			; (mov r8, r8)

1000838c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000838c:	2303      	movs	r3, #3
1000838e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008390:	330d      	adds	r3, #13
10008392:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008394:	3b08      	subs	r3, #8
10008396:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008398:	3301      	adds	r3, #1
1000839a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000839c:	3b07      	subs	r3, #7
1000839e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083a0:	6103      	str	r3, [r0, #16]
}
100083a2:	4770      	bx	lr

100083a4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083a4:	b570      	push	{r4, r5, r6, lr}
100083a6:	0004      	movs	r4, r0
100083a8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083aa:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083ac:	2800      	cmp	r0, #0
100083ae:	d026      	beq.n	100083fe <i2c_master_init+0x5a>
100083b0:	2a00      	cmp	r2, #0
100083b2:	d026      	beq.n	10008402 <i2c_master_init+0x5e>
100083b4:	2228      	movs	r2, #40	; 0x28
100083b6:	5c8b      	ldrb	r3, [r1, r2]
100083b8:	07db      	lsls	r3, r3, #31
100083ba:	d4fc      	bmi.n	100083b6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083bc:	2300      	movs	r3, #0
100083be:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083c0:	6823      	ldr	r3, [r4, #0]
100083c2:	4a11      	ldr	r2, [pc, #68]	; (10008408 <i2c_master_init+0x64>)
100083c4:	4293      	cmp	r3, r2
100083c6:	d103      	bne.n	100083d0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083c8:	2003      	movs	r0, #3
100083ca:	4b10      	ldr	r3, [pc, #64]	; (1000840c <i2c_master_init+0x68>)
100083cc:	4798      	blx	r3
100083ce:	e006      	b.n	100083de <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083d0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083d2:	4a0f      	ldr	r2, [pc, #60]	; (10008410 <i2c_master_init+0x6c>)
100083d4:	4293      	cmp	r3, r2
100083d6:	d115      	bne.n	10008404 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083d8:	3002      	adds	r0, #2
100083da:	4b0c      	ldr	r3, [pc, #48]	; (1000840c <i2c_master_init+0x68>)
100083dc:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083de:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083e0:	8929      	ldrh	r1, [r5, #8]
100083e2:	7928      	ldrb	r0, [r5, #4]
100083e4:	4e0b      	ldr	r6, [pc, #44]	; (10008414 <i2c_master_init+0x70>)
100083e6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083e8:	8a29      	ldrh	r1, [r5, #16]
100083ea:	7b28      	ldrb	r0, [r5, #12]
100083ec:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ee:	782b      	ldrb	r3, [r5, #0]
100083f0:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083f2:	886b      	ldrh	r3, [r5, #2]
100083f4:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083f6:	2301      	movs	r3, #1
100083f8:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083fa:	2000      	movs	r0, #0
100083fc:	e002      	b.n	10008404 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083fe:	2017      	movs	r0, #23
10008400:	e000      	b.n	10008404 <i2c_master_init+0x60>
10008402:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008404:	bd70      	pop	{r4, r5, r6, pc}
10008406:	46c0      	nop			; (mov r8, r8)
10008408:	40003000 	.word	0x40003000
1000840c:	1000c9ad 	.word	0x1000c9ad
10008410:	40003400 	.word	0x40003400
10008414:	1000bf35 	.word	0x1000bf35

10008418 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_read_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	100082a1 	.word	0x100082a1

1000843c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008448:	2300      	movs	r3, #0
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	1000832d 	.word	0x1000832d

10008460 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008460:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008462:	2800      	cmp	r0, #0
10008464:	d008      	beq.n	10008478 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008466:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008468:	2900      	cmp	r1, #0
1000846a:	d006      	beq.n	1000847a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000846c:	3b16      	subs	r3, #22
1000846e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008470:	4b03      	ldr	r3, [pc, #12]	; (10008480 <i2c_master_write_packet_wait_no_stop+0x20>)
10008472:	4798      	blx	r3
10008474:	0003      	movs	r3, r0
10008476:	e000      	b.n	1000847a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008478:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000847a:	0018      	movs	r0, r3
1000847c:	bd10      	pop	{r4, pc}
1000847e:	46c0      	nop			; (mov r8, r8)
10008480:	1000832d 	.word	0x1000832d

10008484 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10008484:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10008486:	4a06      	ldr	r2, [pc, #24]	; (100084a0 <_sbrk+0x1c>)
10008488:	6812      	ldr	r2, [r2, #0]
1000848a:	2a00      	cmp	r2, #0
1000848c:	d102      	bne.n	10008494 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000848e:	4905      	ldr	r1, [pc, #20]	; (100084a4 <_sbrk+0x20>)
10008490:	4a03      	ldr	r2, [pc, #12]	; (100084a0 <_sbrk+0x1c>)
10008492:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10008494:	4a02      	ldr	r2, [pc, #8]	; (100084a0 <_sbrk+0x1c>)
10008496:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008498:	18c3      	adds	r3, r0, r3
1000849a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000849c:	4770      	bx	lr
1000849e:	46c0      	nop			; (mov r8, r8)
100084a0:	1001712c 	.word	0x1001712c
100084a4:	1001a7b8 	.word	0x1001a7b8

100084a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100084a8:	2001      	movs	r0, #1
100084aa:	4240      	negs	r0, r0
100084ac:	4770      	bx	lr
100084ae:	46c0      	nop			; (mov r8, r8)

100084b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100084b0:	2380      	movs	r3, #128	; 0x80
100084b2:	019b      	lsls	r3, r3, #6
100084b4:	604b      	str	r3, [r1, #4]

	return 0;
}
100084b6:	2000      	movs	r0, #0
100084b8:	4770      	bx	lr
100084ba:	46c0      	nop			; (mov r8, r8)

100084bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100084bc:	2001      	movs	r0, #1
100084be:	4770      	bx	lr

100084c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100084c0:	2000      	movs	r0, #0
100084c2:	4770      	bx	lr

100084c4 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100084c4:	b510      	push	{r4, lr}
100084c6:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100084c8:	2324      	movs	r3, #36	; 0x24
100084ca:	4a25      	ldr	r2, [pc, #148]	; (10008560 <set_int_enable+0x9c>)
100084cc:	5cd3      	ldrb	r3, [r2, r3]
100084ce:	2b00      	cmp	r3, #0
100084d0:	d019      	beq.n	10008506 <set_int_enable+0x42>
        if (enable)
100084d2:	2800      	cmp	r0, #0
100084d4:	d003      	beq.n	100084de <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084d6:	2202      	movs	r2, #2
100084d8:	466b      	mov	r3, sp
100084da:	71da      	strb	r2, [r3, #7]
100084dc:	e002      	b.n	100084e4 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084de:	2200      	movs	r2, #0
100084e0:	466b      	mov	r3, sp
100084e2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084e4:	4b1e      	ldr	r3, [pc, #120]	; (10008560 <set_int_enable+0x9c>)
100084e6:	681a      	ldr	r2, [r3, #0]
100084e8:	7c51      	ldrb	r1, [r2, #17]
100084ea:	685b      	ldr	r3, [r3, #4]
100084ec:	7818      	ldrb	r0, [r3, #0]
100084ee:	466b      	mov	r3, sp
100084f0:	3307      	adds	r3, #7
100084f2:	2201      	movs	r2, #1
100084f4:	4c1b      	ldr	r4, [pc, #108]	; (10008564 <set_int_enable+0xa0>)
100084f6:	47a0      	blx	r4
100084f8:	2800      	cmp	r0, #0
100084fa:	d127      	bne.n	1000854c <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084fc:	466b      	mov	r3, sp
100084fe:	79da      	ldrb	r2, [r3, #7]
10008500:	4b17      	ldr	r3, [pc, #92]	; (10008560 <set_int_enable+0x9c>)
10008502:	745a      	strb	r2, [r3, #17]
10008504:	e02a      	b.n	1000855c <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
10008506:	4b16      	ldr	r3, [pc, #88]	; (10008560 <set_int_enable+0x9c>)
10008508:	7a9b      	ldrb	r3, [r3, #10]
1000850a:	2b00      	cmp	r3, #0
1000850c:	d021      	beq.n	10008552 <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
1000850e:	2800      	cmp	r0, #0
10008510:	d008      	beq.n	10008524 <set_int_enable+0x60>
10008512:	4b13      	ldr	r3, [pc, #76]	; (10008560 <set_int_enable+0x9c>)
10008514:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
10008516:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008518:	2b00      	cmp	r3, #0
1000851a:	d11f      	bne.n	1000855c <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000851c:	2201      	movs	r2, #1
1000851e:	466b      	mov	r3, sp
10008520:	71da      	strb	r2, [r3, #7]
10008522:	e002      	b.n	1000852a <set_int_enable+0x66>
        else
            tmp = 0x00;
10008524:	2200      	movs	r2, #0
10008526:	466b      	mov	r3, sp
10008528:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1000852a:	4b0d      	ldr	r3, [pc, #52]	; (10008560 <set_int_enable+0x9c>)
1000852c:	681a      	ldr	r2, [r3, #0]
1000852e:	7c51      	ldrb	r1, [r2, #17]
10008530:	685b      	ldr	r3, [r3, #4]
10008532:	7818      	ldrb	r0, [r3, #0]
10008534:	466b      	mov	r3, sp
10008536:	3307      	adds	r3, #7
10008538:	2201      	movs	r2, #1
1000853a:	4c0a      	ldr	r4, [pc, #40]	; (10008564 <set_int_enable+0xa0>)
1000853c:	47a0      	blx	r4
1000853e:	2800      	cmp	r0, #0
10008540:	d10a      	bne.n	10008558 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008542:	466b      	mov	r3, sp
10008544:	79da      	ldrb	r2, [r3, #7]
10008546:	4b06      	ldr	r3, [pc, #24]	; (10008560 <set_int_enable+0x9c>)
10008548:	745a      	strb	r2, [r3, #17]
1000854a:	e007      	b.n	1000855c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000854c:	2001      	movs	r0, #1
1000854e:	4240      	negs	r0, r0
10008550:	e004      	b.n	1000855c <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
10008552:	2001      	movs	r0, #1
10008554:	4240      	negs	r0, r0
10008556:	e001      	b.n	1000855c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008558:	2001      	movs	r0, #1
1000855a:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
1000855c:	b002      	add	sp, #8
1000855e:	bd10      	pop	{r4, pc}
10008560:	10017068 	.word	0x10017068
10008564:	1000a951 	.word	0x1000a951

10008568 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000856a:	b085      	sub	sp, #20
1000856c:	0007      	movs	r7, r0
1000856e:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008570:	4b21      	ldr	r3, [pc, #132]	; (100085f8 <mpu_get_temperature+0x90>)
10008572:	7a9b      	ldrb	r3, [r3, #10]
10008574:	2b00      	cmp	r3, #0
10008576:	d035      	beq.n	100085e4 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008578:	4b1f      	ldr	r3, [pc, #124]	; (100085f8 <mpu_get_temperature+0x90>)
1000857a:	681a      	ldr	r2, [r3, #0]
1000857c:	7c11      	ldrb	r1, [r2, #16]
1000857e:	685b      	ldr	r3, [r3, #4]
10008580:	7818      	ldrb	r0, [r3, #0]
10008582:	ab03      	add	r3, sp, #12
10008584:	2202      	movs	r2, #2
10008586:	4c1d      	ldr	r4, [pc, #116]	; (100085fc <mpu_get_temperature+0x94>)
10008588:	47a0      	blx	r4
1000858a:	9001      	str	r0, [sp, #4]
1000858c:	2800      	cmp	r0, #0
1000858e:	d12d      	bne.n	100085ec <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008590:	ab03      	add	r3, sp, #12
10008592:	781c      	ldrb	r4, [r3, #0]
10008594:	0224      	lsls	r4, r4, #8
10008596:	785b      	ldrb	r3, [r3, #1]
10008598:	431c      	orrs	r4, r3
1000859a:	b224      	sxth	r4, r4
    if (timestamp)
1000859c:	2e00      	cmp	r6, #0
1000859e:	d002      	beq.n	100085a6 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
100085a0:	0030      	movs	r0, r6
100085a2:	4b17      	ldr	r3, [pc, #92]	; (10008600 <mpu_get_temperature+0x98>)
100085a4:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
100085a6:	4b14      	ldr	r3, [pc, #80]	; (100085f8 <mpu_get_temperature+0x90>)
100085a8:	685d      	ldr	r5, [r3, #4]
100085aa:	4e16      	ldr	r6, [pc, #88]	; (10008604 <mpu_get_temperature+0x9c>)
100085ac:	0020      	movs	r0, r4
100085ae:	47b0      	blx	r6
100085b0:	1c04      	adds	r4, r0, #0
100085b2:	2308      	movs	r3, #8
100085b4:	5ee8      	ldrsh	r0, [r5, r3]
100085b6:	47b0      	blx	r6
100085b8:	1c01      	adds	r1, r0, #0
100085ba:	1c20      	adds	r0, r4, #0
100085bc:	4b12      	ldr	r3, [pc, #72]	; (10008608 <mpu_get_temperature+0xa0>)
100085be:	4798      	blx	r3
100085c0:	1c04      	adds	r4, r0, #0
100085c2:	88e8      	ldrh	r0, [r5, #6]
100085c4:	47b0      	blx	r6
100085c6:	1c01      	adds	r1, r0, #0
100085c8:	1c20      	adds	r0, r4, #0
100085ca:	4b10      	ldr	r3, [pc, #64]	; (1000860c <mpu_get_temperature+0xa4>)
100085cc:	4798      	blx	r3
100085ce:	4910      	ldr	r1, [pc, #64]	; (10008610 <mpu_get_temperature+0xa8>)
100085d0:	4b10      	ldr	r3, [pc, #64]	; (10008614 <mpu_get_temperature+0xac>)
100085d2:	4798      	blx	r3
100085d4:	218f      	movs	r1, #143	; 0x8f
100085d6:	05c9      	lsls	r1, r1, #23
100085d8:	4b0f      	ldr	r3, [pc, #60]	; (10008618 <mpu_get_temperature+0xb0>)
100085da:	4798      	blx	r3
100085dc:	4b0f      	ldr	r3, [pc, #60]	; (1000861c <mpu_get_temperature+0xb4>)
100085de:	4798      	blx	r3
100085e0:	6038      	str	r0, [r7, #0]
    return 0;
100085e2:	e006      	b.n	100085f2 <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100085e4:	2301      	movs	r3, #1
100085e6:	425b      	negs	r3, r3
100085e8:	9301      	str	r3, [sp, #4]
100085ea:	e002      	b.n	100085f2 <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
100085ec:	2301      	movs	r3, #1
100085ee:	425b      	negs	r3, r3
100085f0:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
100085f2:	9801      	ldr	r0, [sp, #4]
100085f4:	b005      	add	sp, #20
100085f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085f8:	10017068 	.word	0x10017068
100085fc:	1000a9ad 	.word	0x1000a9ad
10008600:	1000b1a5 	.word	0x1000b1a5
10008604:	10013885 	.word	0x10013885
10008608:	10013535 	.word	0x10013535
1000860c:	10012f79 	.word	0x10012f79
10008610:	420c0000 	.word	0x420c0000
10008614:	10012c8d 	.word	0x10012c8d
10008618:	1001330d 	.word	0x1001330d
1000861c:	10013841 	.word	0x10013841

10008620 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008620:	b510      	push	{r4, lr}
10008622:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008624:	4b79      	ldr	r3, [pc, #484]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008626:	7a9b      	ldrb	r3, [r3, #10]
10008628:	2b00      	cmp	r3, #0
1000862a:	d100      	bne.n	1000862e <mpu_reset_fifo+0xe>
1000862c:	e0ce      	b.n	100087cc <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
1000862e:	466b      	mov	r3, sp
10008630:	3307      	adds	r3, #7
10008632:	2200      	movs	r2, #0
10008634:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008636:	4a75      	ldr	r2, [pc, #468]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008638:	6811      	ldr	r1, [r2, #0]
1000863a:	7c49      	ldrb	r1, [r1, #17]
1000863c:	6852      	ldr	r2, [r2, #4]
1000863e:	7810      	ldrb	r0, [r2, #0]
10008640:	2201      	movs	r2, #1
10008642:	4c73      	ldr	r4, [pc, #460]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008644:	47a0      	blx	r4
10008646:	2800      	cmp	r0, #0
10008648:	d000      	beq.n	1000864c <mpu_reset_fifo+0x2c>
1000864a:	e0c2      	b.n	100087d2 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000864c:	4b6f      	ldr	r3, [pc, #444]	; (1000880c <mpu_reset_fifo+0x1ec>)
1000864e:	681a      	ldr	r2, [r3, #0]
10008650:	7951      	ldrb	r1, [r2, #5]
10008652:	685b      	ldr	r3, [r3, #4]
10008654:	7818      	ldrb	r0, [r3, #0]
10008656:	466b      	mov	r3, sp
10008658:	3307      	adds	r3, #7
1000865a:	2201      	movs	r2, #1
1000865c:	4c6c      	ldr	r4, [pc, #432]	; (10008810 <mpu_reset_fifo+0x1f0>)
1000865e:	47a0      	blx	r4
10008660:	2800      	cmp	r0, #0
10008662:	d000      	beq.n	10008666 <mpu_reset_fifo+0x46>
10008664:	e0b8      	b.n	100087d8 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008666:	4b69      	ldr	r3, [pc, #420]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008668:	681a      	ldr	r2, [r3, #0]
1000866a:	7911      	ldrb	r1, [r2, #4]
1000866c:	685b      	ldr	r3, [r3, #4]
1000866e:	7818      	ldrb	r0, [r3, #0]
10008670:	466b      	mov	r3, sp
10008672:	3307      	adds	r3, #7
10008674:	2201      	movs	r2, #1
10008676:	4c66      	ldr	r4, [pc, #408]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008678:	47a0      	blx	r4
1000867a:	2800      	cmp	r0, #0
1000867c:	d000      	beq.n	10008680 <mpu_reset_fifo+0x60>
1000867e:	e0ae      	b.n	100087de <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008680:	2324      	movs	r3, #36	; 0x24
10008682:	4a62      	ldr	r2, [pc, #392]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008684:	5cd3      	ldrb	r3, [r2, r3]
10008686:	2b00      	cmp	r3, #0
10008688:	d04f      	beq.n	1000872a <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000868a:	466b      	mov	r3, sp
1000868c:	3307      	adds	r3, #7
1000868e:	220c      	movs	r2, #12
10008690:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008692:	4a5e      	ldr	r2, [pc, #376]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008694:	6811      	ldr	r1, [r2, #0]
10008696:	7909      	ldrb	r1, [r1, #4]
10008698:	6852      	ldr	r2, [r2, #4]
1000869a:	7810      	ldrb	r0, [r2, #0]
1000869c:	2201      	movs	r2, #1
1000869e:	4c5c      	ldr	r4, [pc, #368]	; (10008810 <mpu_reset_fifo+0x1f0>)
100086a0:	47a0      	blx	r4
100086a2:	2800      	cmp	r0, #0
100086a4:	d000      	beq.n	100086a8 <mpu_reset_fifo+0x88>
100086a6:	e09d      	b.n	100087e4 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
100086a8:	3032      	adds	r0, #50	; 0x32
100086aa:	4b5a      	ldr	r3, [pc, #360]	; (10008814 <mpu_reset_fifo+0x1f4>)
100086ac:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100086ae:	22c0      	movs	r2, #192	; 0xc0
100086b0:	466b      	mov	r3, sp
100086b2:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100086b4:	4b55      	ldr	r3, [pc, #340]	; (1000880c <mpu_reset_fifo+0x1ec>)
100086b6:	7a9b      	ldrb	r3, [r3, #10]
100086b8:	07db      	lsls	r3, r3, #31
100086ba:	d502      	bpl.n	100086c2 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100086bc:	3220      	adds	r2, #32
100086be:	466b      	mov	r3, sp
100086c0:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086c2:	4b52      	ldr	r3, [pc, #328]	; (1000880c <mpu_reset_fifo+0x1ec>)
100086c4:	681a      	ldr	r2, [r3, #0]
100086c6:	7911      	ldrb	r1, [r2, #4]
100086c8:	685b      	ldr	r3, [r3, #4]
100086ca:	7818      	ldrb	r0, [r3, #0]
100086cc:	466b      	mov	r3, sp
100086ce:	3307      	adds	r3, #7
100086d0:	2201      	movs	r2, #1
100086d2:	4c4f      	ldr	r4, [pc, #316]	; (10008810 <mpu_reset_fifo+0x1f0>)
100086d4:	47a0      	blx	r4
100086d6:	2800      	cmp	r0, #0
100086d8:	d000      	beq.n	100086dc <mpu_reset_fifo+0xbc>
100086da:	e086      	b.n	100087ea <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100086dc:	4b4b      	ldr	r3, [pc, #300]	; (1000880c <mpu_reset_fifo+0x1ec>)
100086de:	7c5b      	ldrb	r3, [r3, #17]
100086e0:	2b00      	cmp	r3, #0
100086e2:	d003      	beq.n	100086ec <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100086e4:	2202      	movs	r2, #2
100086e6:	466b      	mov	r3, sp
100086e8:	71da      	strb	r2, [r3, #7]
100086ea:	e002      	b.n	100086f2 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100086ec:	2200      	movs	r2, #0
100086ee:	466b      	mov	r3, sp
100086f0:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086f2:	4b46      	ldr	r3, [pc, #280]	; (1000880c <mpu_reset_fifo+0x1ec>)
100086f4:	681a      	ldr	r2, [r3, #0]
100086f6:	7c51      	ldrb	r1, [r2, #17]
100086f8:	685b      	ldr	r3, [r3, #4]
100086fa:	7818      	ldrb	r0, [r3, #0]
100086fc:	466b      	mov	r3, sp
100086fe:	3307      	adds	r3, #7
10008700:	2201      	movs	r2, #1
10008702:	4c43      	ldr	r4, [pc, #268]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008704:	47a0      	blx	r4
10008706:	2800      	cmp	r0, #0
10008708:	d172      	bne.n	100087f0 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
1000870a:	466b      	mov	r3, sp
1000870c:	3307      	adds	r3, #7
1000870e:	2200      	movs	r2, #0
10008710:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008712:	4a3e      	ldr	r2, [pc, #248]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008714:	6811      	ldr	r1, [r2, #0]
10008716:	7949      	ldrb	r1, [r1, #5]
10008718:	6852      	ldr	r2, [r2, #4]
1000871a:	7810      	ldrb	r0, [r2, #0]
1000871c:	2201      	movs	r2, #1
1000871e:	4c3c      	ldr	r4, [pc, #240]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008720:	47a0      	blx	r4
10008722:	1e43      	subs	r3, r0, #1
10008724:	4198      	sbcs	r0, r3
10008726:	4240      	negs	r0, r0
10008728:	e06d      	b.n	10008806 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000872a:	466b      	mov	r3, sp
1000872c:	3307      	adds	r3, #7
1000872e:	2204      	movs	r2, #4
10008730:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008732:	4a36      	ldr	r2, [pc, #216]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008734:	6811      	ldr	r1, [r2, #0]
10008736:	7909      	ldrb	r1, [r1, #4]
10008738:	6852      	ldr	r2, [r2, #4]
1000873a:	7810      	ldrb	r0, [r2, #0]
1000873c:	2201      	movs	r2, #1
1000873e:	4c34      	ldr	r4, [pc, #208]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008740:	47a0      	blx	r4
10008742:	2800      	cmp	r0, #0
10008744:	d157      	bne.n	100087f6 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008746:	4b31      	ldr	r3, [pc, #196]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008748:	7c9b      	ldrb	r3, [r3, #18]
1000874a:	2b00      	cmp	r3, #0
1000874c:	d103      	bne.n	10008756 <mpu_reset_fifo+0x136>
1000874e:	4b2f      	ldr	r3, [pc, #188]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008750:	7a9b      	ldrb	r3, [r3, #10]
10008752:	07db      	lsls	r3, r3, #31
10008754:	d403      	bmi.n	1000875e <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
10008756:	2240      	movs	r2, #64	; 0x40
10008758:	466b      	mov	r3, sp
1000875a:	71da      	strb	r2, [r3, #7]
1000875c:	e002      	b.n	10008764 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1000875e:	2260      	movs	r2, #96	; 0x60
10008760:	466b      	mov	r3, sp
10008762:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008764:	4b29      	ldr	r3, [pc, #164]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008766:	681a      	ldr	r2, [r3, #0]
10008768:	7911      	ldrb	r1, [r2, #4]
1000876a:	685b      	ldr	r3, [r3, #4]
1000876c:	7818      	ldrb	r0, [r3, #0]
1000876e:	466b      	mov	r3, sp
10008770:	3307      	adds	r3, #7
10008772:	2201      	movs	r2, #1
10008774:	4c26      	ldr	r4, [pc, #152]	; (10008810 <mpu_reset_fifo+0x1f0>)
10008776:	47a0      	blx	r4
10008778:	2800      	cmp	r0, #0
1000877a:	d13f      	bne.n	100087fc <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
1000877c:	3032      	adds	r0, #50	; 0x32
1000877e:	4b25      	ldr	r3, [pc, #148]	; (10008814 <mpu_reset_fifo+0x1f4>)
10008780:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008782:	4b22      	ldr	r3, [pc, #136]	; (1000880c <mpu_reset_fifo+0x1ec>)
10008784:	7c5b      	ldrb	r3, [r3, #17]
10008786:	2b00      	cmp	r3, #0
10008788:	d003      	beq.n	10008792 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000878a:	2201      	movs	r2, #1
1000878c:	466b      	mov	r3, sp
1000878e:	71da      	strb	r2, [r3, #7]
10008790:	e002      	b.n	10008798 <mpu_reset_fifo+0x178>
        else
            data = 0;
10008792:	2200      	movs	r2, #0
10008794:	466b      	mov	r3, sp
10008796:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008798:	4b1c      	ldr	r3, [pc, #112]	; (1000880c <mpu_reset_fifo+0x1ec>)
1000879a:	681a      	ldr	r2, [r3, #0]
1000879c:	7c51      	ldrb	r1, [r2, #17]
1000879e:	685b      	ldr	r3, [r3, #4]
100087a0:	7818      	ldrb	r0, [r3, #0]
100087a2:	466b      	mov	r3, sp
100087a4:	3307      	adds	r3, #7
100087a6:	2201      	movs	r2, #1
100087a8:	4c19      	ldr	r4, [pc, #100]	; (10008810 <mpu_reset_fifo+0x1f0>)
100087aa:	47a0      	blx	r4
100087ac:	2800      	cmp	r0, #0
100087ae:	d128      	bne.n	10008802 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100087b0:	4a16      	ldr	r2, [pc, #88]	; (1000880c <mpu_reset_fifo+0x1ec>)
100087b2:	0013      	movs	r3, r2
100087b4:	3310      	adds	r3, #16
100087b6:	6811      	ldr	r1, [r2, #0]
100087b8:	7949      	ldrb	r1, [r1, #5]
100087ba:	6852      	ldr	r2, [r2, #4]
100087bc:	7810      	ldrb	r0, [r2, #0]
100087be:	2201      	movs	r2, #1
100087c0:	4c13      	ldr	r4, [pc, #76]	; (10008810 <mpu_reset_fifo+0x1f0>)
100087c2:	47a0      	blx	r4
100087c4:	1e43      	subs	r3, r0, #1
100087c6:	4198      	sbcs	r0, r3
100087c8:	4240      	negs	r0, r0
100087ca:	e01c      	b.n	10008806 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087cc:	2001      	movs	r0, #1
100087ce:	4240      	negs	r0, r0
100087d0:	e019      	b.n	10008806 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100087d2:	2001      	movs	r0, #1
100087d4:	4240      	negs	r0, r0
100087d6:	e016      	b.n	10008806 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100087d8:	2001      	movs	r0, #1
100087da:	4240      	negs	r0, r0
100087dc:	e013      	b.n	10008806 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100087de:	2001      	movs	r0, #1
100087e0:	4240      	negs	r0, r0
100087e2:	e010      	b.n	10008806 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087e4:	2001      	movs	r0, #1
100087e6:	4240      	negs	r0, r0
100087e8:	e00d      	b.n	10008806 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087ea:	2001      	movs	r0, #1
100087ec:	4240      	negs	r0, r0
100087ee:	e00a      	b.n	10008806 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087f0:	2001      	movs	r0, #1
100087f2:	4240      	negs	r0, r0
100087f4:	e007      	b.n	10008806 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087f6:	2001      	movs	r0, #1
100087f8:	4240      	negs	r0, r0
100087fa:	e004      	b.n	10008806 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087fc:	2001      	movs	r0, #1
100087fe:	4240      	negs	r0, r0
10008800:	e001      	b.n	10008806 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008802:	2001      	movs	r0, #1
10008804:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008806:	b002      	add	sp, #8
10008808:	bd10      	pop	{r4, pc}
1000880a:	46c0      	nop			; (mov r8, r8)
1000880c:	10017068 	.word	0x10017068
10008810:	1000a951 	.word	0x1000a951
10008814:	10008129 	.word	0x10008129

10008818 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008818:	b510      	push	{r4, lr}
1000881a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881c:	4b24      	ldr	r3, [pc, #144]	; (100088b0 <mpu_set_gyro_fsr+0x98>)
1000881e:	7a9b      	ldrb	r3, [r3, #10]
10008820:	2b00      	cmp	r3, #0
10008822:	d03b      	beq.n	1000889c <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008824:	23fa      	movs	r3, #250	; 0xfa
10008826:	005b      	lsls	r3, r3, #1
10008828:	4298      	cmp	r0, r3
1000882a:	d010      	beq.n	1000884e <mpu_set_gyro_fsr+0x36>
1000882c:	d802      	bhi.n	10008834 <mpu_set_gyro_fsr+0x1c>
1000882e:	28fa      	cmp	r0, #250	; 0xfa
10008830:	d009      	beq.n	10008846 <mpu_set_gyro_fsr+0x2e>
10008832:	e036      	b.n	100088a2 <mpu_set_gyro_fsr+0x8a>
10008834:	23fa      	movs	r3, #250	; 0xfa
10008836:	009b      	lsls	r3, r3, #2
10008838:	4298      	cmp	r0, r3
1000883a:	d00c      	beq.n	10008856 <mpu_set_gyro_fsr+0x3e>
1000883c:	23fa      	movs	r3, #250	; 0xfa
1000883e:	00db      	lsls	r3, r3, #3
10008840:	4298      	cmp	r0, r3
10008842:	d00c      	beq.n	1000885e <mpu_set_gyro_fsr+0x46>
10008844:	e02d      	b.n	100088a2 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
10008846:	2200      	movs	r2, #0
10008848:	466b      	mov	r3, sp
1000884a:	71da      	strb	r2, [r3, #7]
        break;
1000884c:	e00a      	b.n	10008864 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
1000884e:	2208      	movs	r2, #8
10008850:	466b      	mov	r3, sp
10008852:	71da      	strb	r2, [r3, #7]
        break;
10008854:	e006      	b.n	10008864 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008856:	2210      	movs	r2, #16
10008858:	466b      	mov	r3, sp
1000885a:	71da      	strb	r2, [r3, #7]
        break;
1000885c:	e002      	b.n	10008864 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1000885e:	2218      	movs	r2, #24
10008860:	466b      	mov	r3, sp
10008862:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008864:	466b      	mov	r3, sp
10008866:	3307      	adds	r3, #7
10008868:	781b      	ldrb	r3, [r3, #0]
1000886a:	4a11      	ldr	r2, [pc, #68]	; (100088b0 <mpu_set_gyro_fsr+0x98>)
1000886c:	7a12      	ldrb	r2, [r2, #8]
1000886e:	08db      	lsrs	r3, r3, #3
        return 0;
10008870:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008872:	429a      	cmp	r2, r3
10008874:	d01a      	beq.n	100088ac <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008876:	4b0e      	ldr	r3, [pc, #56]	; (100088b0 <mpu_set_gyro_fsr+0x98>)
10008878:	681a      	ldr	r2, [r3, #0]
1000887a:	7991      	ldrb	r1, [r2, #6]
1000887c:	685b      	ldr	r3, [r3, #4]
1000887e:	7818      	ldrb	r0, [r3, #0]
10008880:	466b      	mov	r3, sp
10008882:	3307      	adds	r3, #7
10008884:	2201      	movs	r2, #1
10008886:	4c0b      	ldr	r4, [pc, #44]	; (100088b4 <mpu_set_gyro_fsr+0x9c>)
10008888:	47a0      	blx	r4
1000888a:	2800      	cmp	r0, #0
1000888c:	d10c      	bne.n	100088a8 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000888e:	466b      	mov	r3, sp
10008890:	3307      	adds	r3, #7
10008892:	781b      	ldrb	r3, [r3, #0]
10008894:	08db      	lsrs	r3, r3, #3
10008896:	4a06      	ldr	r2, [pc, #24]	; (100088b0 <mpu_set_gyro_fsr+0x98>)
10008898:	7213      	strb	r3, [r2, #8]
    return 0;
1000889a:	e007      	b.n	100088ac <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000889c:	2001      	movs	r0, #1
1000889e:	4240      	negs	r0, r0
100088a0:	e004      	b.n	100088ac <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
100088a2:	2001      	movs	r0, #1
100088a4:	4240      	negs	r0, r0
100088a6:	e001      	b.n	100088ac <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
100088a8:	2001      	movs	r0, #1
100088aa:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
100088ac:	b002      	add	sp, #8
100088ae:	bd10      	pop	{r4, pc}
100088b0:	10017068 	.word	0x10017068
100088b4:	1000a951 	.word	0x1000a951

100088b8 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
100088b8:	4b11      	ldr	r3, [pc, #68]	; (10008900 <mpu_get_accel_fsr+0x48>)
100088ba:	7a5b      	ldrb	r3, [r3, #9]
100088bc:	2b01      	cmp	r3, #1
100088be:	d009      	beq.n	100088d4 <mpu_get_accel_fsr+0x1c>
100088c0:	2b00      	cmp	r3, #0
100088c2:	d004      	beq.n	100088ce <mpu_get_accel_fsr+0x16>
100088c4:	2b02      	cmp	r3, #2
100088c6:	d008      	beq.n	100088da <mpu_get_accel_fsr+0x22>
100088c8:	2b03      	cmp	r3, #3
100088ca:	d009      	beq.n	100088e0 <mpu_get_accel_fsr+0x28>
100088cc:	e014      	b.n	100088f8 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
100088ce:	2302      	movs	r3, #2
100088d0:	7003      	strb	r3, [r0, #0]
        break;
100088d2:	e007      	b.n	100088e4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100088d4:	2304      	movs	r3, #4
100088d6:	7003      	strb	r3, [r0, #0]
        break;
100088d8:	e004      	b.n	100088e4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100088da:	2308      	movs	r3, #8
100088dc:	7003      	strb	r3, [r0, #0]
        break;
100088de:	e001      	b.n	100088e4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100088e0:	2310      	movs	r3, #16
100088e2:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088e4:	4b06      	ldr	r3, [pc, #24]	; (10008900 <mpu_get_accel_fsr+0x48>)
100088e6:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100088e8:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088ea:	2a00      	cmp	r2, #0
100088ec:	d006      	beq.n	100088fc <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100088ee:	7803      	ldrb	r3, [r0, #0]
100088f0:	005b      	lsls	r3, r3, #1
100088f2:	7003      	strb	r3, [r0, #0]
    return 0;
100088f4:	2300      	movs	r3, #0
100088f6:	e001      	b.n	100088fc <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100088f8:	2301      	movs	r3, #1
100088fa:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100088fc:	0018      	movs	r0, r3
100088fe:	4770      	bx	lr
10008900:	10017068 	.word	0x10017068

10008904 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008904:	b510      	push	{r4, lr}
10008906:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008908:	4b21      	ldr	r3, [pc, #132]	; (10008990 <mpu_set_accel_fsr+0x8c>)
1000890a:	7a9b      	ldrb	r3, [r3, #10]
1000890c:	2b00      	cmp	r3, #0
1000890e:	d035      	beq.n	1000897c <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
10008910:	2804      	cmp	r0, #4
10008912:	d00c      	beq.n	1000892e <mpu_set_accel_fsr+0x2a>
10008914:	d802      	bhi.n	1000891c <mpu_set_accel_fsr+0x18>
10008916:	2802      	cmp	r0, #2
10008918:	d005      	beq.n	10008926 <mpu_set_accel_fsr+0x22>
1000891a:	e032      	b.n	10008982 <mpu_set_accel_fsr+0x7e>
1000891c:	2808      	cmp	r0, #8
1000891e:	d00a      	beq.n	10008936 <mpu_set_accel_fsr+0x32>
10008920:	2810      	cmp	r0, #16
10008922:	d00c      	beq.n	1000893e <mpu_set_accel_fsr+0x3a>
10008924:	e02d      	b.n	10008982 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
10008926:	2200      	movs	r2, #0
10008928:	466b      	mov	r3, sp
1000892a:	71da      	strb	r2, [r3, #7]
        break;
1000892c:	e00a      	b.n	10008944 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
1000892e:	2208      	movs	r2, #8
10008930:	466b      	mov	r3, sp
10008932:	71da      	strb	r2, [r3, #7]
        break;
10008934:	e006      	b.n	10008944 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
10008936:	2210      	movs	r2, #16
10008938:	466b      	mov	r3, sp
1000893a:	71da      	strb	r2, [r3, #7]
        break;
1000893c:	e002      	b.n	10008944 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
1000893e:	2218      	movs	r2, #24
10008940:	466b      	mov	r3, sp
10008942:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008944:	466b      	mov	r3, sp
10008946:	3307      	adds	r3, #7
10008948:	781b      	ldrb	r3, [r3, #0]
1000894a:	4a11      	ldr	r2, [pc, #68]	; (10008990 <mpu_set_accel_fsr+0x8c>)
1000894c:	7a52      	ldrb	r2, [r2, #9]
1000894e:	08db      	lsrs	r3, r3, #3
        return 0;
10008950:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008952:	429a      	cmp	r2, r3
10008954:	d01a      	beq.n	1000898c <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008956:	4b0e      	ldr	r3, [pc, #56]	; (10008990 <mpu_set_accel_fsr+0x8c>)
10008958:	681a      	ldr	r2, [r3, #0]
1000895a:	79d1      	ldrb	r1, [r2, #7]
1000895c:	685b      	ldr	r3, [r3, #4]
1000895e:	7818      	ldrb	r0, [r3, #0]
10008960:	466b      	mov	r3, sp
10008962:	3307      	adds	r3, #7
10008964:	2201      	movs	r2, #1
10008966:	4c0b      	ldr	r4, [pc, #44]	; (10008994 <mpu_set_accel_fsr+0x90>)
10008968:	47a0      	blx	r4
1000896a:	2800      	cmp	r0, #0
1000896c:	d10c      	bne.n	10008988 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000896e:	466b      	mov	r3, sp
10008970:	3307      	adds	r3, #7
10008972:	781b      	ldrb	r3, [r3, #0]
10008974:	08db      	lsrs	r3, r3, #3
10008976:	4a06      	ldr	r2, [pc, #24]	; (10008990 <mpu_set_accel_fsr+0x8c>)
10008978:	7253      	strb	r3, [r2, #9]
    return 0;
1000897a:	e007      	b.n	1000898c <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000897c:	2001      	movs	r0, #1
1000897e:	4240      	negs	r0, r0
10008980:	e004      	b.n	1000898c <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008982:	2001      	movs	r0, #1
10008984:	4240      	negs	r0, r0
10008986:	e001      	b.n	1000898c <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008988:	2001      	movs	r0, #1
1000898a:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
1000898c:	b002      	add	sp, #8
1000898e:	bd10      	pop	{r4, pc}
10008990:	10017068 	.word	0x10017068
10008994:	1000a951 	.word	0x1000a951

10008998 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008998:	b510      	push	{r4, lr}
1000899a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000899c:	4b2b      	ldr	r3, [pc, #172]	; (10008a4c <mpu_set_lpf+0xb4>)
1000899e:	7a9b      	ldrb	r3, [r3, #10]
100089a0:	2b00      	cmp	r3, #0
100089a2:	d049      	beq.n	10008a38 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
100089a4:	28bb      	cmp	r0, #187	; 0xbb
100089a6:	d903      	bls.n	100089b0 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
100089a8:	2201      	movs	r2, #1
100089aa:	466b      	mov	r3, sp
100089ac:	71da      	strb	r2, [r3, #7]
100089ae:	e01a      	b.n	100089e6 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
100089b0:	2861      	cmp	r0, #97	; 0x61
100089b2:	d903      	bls.n	100089bc <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
100089b4:	2202      	movs	r2, #2
100089b6:	466b      	mov	r3, sp
100089b8:	71da      	strb	r2, [r3, #7]
100089ba:	e014      	b.n	100089e6 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100089bc:	2829      	cmp	r0, #41	; 0x29
100089be:	d903      	bls.n	100089c8 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100089c0:	2203      	movs	r2, #3
100089c2:	466b      	mov	r3, sp
100089c4:	71da      	strb	r2, [r3, #7]
100089c6:	e00e      	b.n	100089e6 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100089c8:	2813      	cmp	r0, #19
100089ca:	d903      	bls.n	100089d4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
100089cc:	2204      	movs	r2, #4
100089ce:	466b      	mov	r3, sp
100089d0:	71da      	strb	r2, [r3, #7]
100089d2:	e008      	b.n	100089e6 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100089d4:	2809      	cmp	r0, #9
100089d6:	d903      	bls.n	100089e0 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100089d8:	2205      	movs	r2, #5
100089da:	466b      	mov	r3, sp
100089dc:	71da      	strb	r2, [r3, #7]
100089de:	e002      	b.n	100089e6 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100089e0:	2206      	movs	r2, #6
100089e2:	466b      	mov	r3, sp
100089e4:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100089e6:	4b19      	ldr	r3, [pc, #100]	; (10008a4c <mpu_set_lpf+0xb4>)
100089e8:	7ada      	ldrb	r2, [r3, #11]
100089ea:	466b      	mov	r3, sp
100089ec:	3307      	adds	r3, #7
100089ee:	781b      	ldrb	r3, [r3, #0]
        return 0;
100089f0:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100089f2:	429a      	cmp	r2, r3
100089f4:	d028      	beq.n	10008a48 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100089f6:	4b15      	ldr	r3, [pc, #84]	; (10008a4c <mpu_set_lpf+0xb4>)
100089f8:	681a      	ldr	r2, [r3, #0]
100089fa:	7891      	ldrb	r1, [r2, #2]
100089fc:	685b      	ldr	r3, [r3, #4]
100089fe:	7818      	ldrb	r0, [r3, #0]
10008a00:	466b      	mov	r3, sp
10008a02:	3307      	adds	r3, #7
10008a04:	2201      	movs	r2, #1
10008a06:	4c12      	ldr	r4, [pc, #72]	; (10008a50 <mpu_set_lpf+0xb8>)
10008a08:	47a0      	blx	r4
10008a0a:	2800      	cmp	r0, #0
10008a0c:	d117      	bne.n	10008a3e <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008a0e:	466b      	mov	r3, sp
10008a10:	3307      	adds	r3, #7
10008a12:	7819      	ldrb	r1, [r3, #0]
10008a14:	2240      	movs	r2, #64	; 0x40
10008a16:	430a      	orrs	r2, r1
10008a18:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008a1a:	4a0c      	ldr	r2, [pc, #48]	; (10008a4c <mpu_set_lpf+0xb4>)
10008a1c:	6811      	ldr	r1, [r2, #0]
10008a1e:	7a09      	ldrb	r1, [r1, #8]
10008a20:	6852      	ldr	r2, [r2, #4]
10008a22:	7810      	ldrb	r0, [r2, #0]
10008a24:	2201      	movs	r2, #1
10008a26:	4c0a      	ldr	r4, [pc, #40]	; (10008a50 <mpu_set_lpf+0xb8>)
10008a28:	47a0      	blx	r4
10008a2a:	2800      	cmp	r0, #0
10008a2c:	d10a      	bne.n	10008a44 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008a2e:	466b      	mov	r3, sp
10008a30:	79da      	ldrb	r2, [r3, #7]
10008a32:	4b06      	ldr	r3, [pc, #24]	; (10008a4c <mpu_set_lpf+0xb4>)
10008a34:	72da      	strb	r2, [r3, #11]
    return 0;
10008a36:	e007      	b.n	10008a48 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008a38:	2001      	movs	r0, #1
10008a3a:	4240      	negs	r0, r0
10008a3c:	e004      	b.n	10008a48 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008a3e:	2001      	movs	r0, #1
10008a40:	4240      	negs	r0, r0
10008a42:	e001      	b.n	10008a48 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008a44:	2001      	movs	r0, #1
10008a46:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008a48:	b002      	add	sp, #8
10008a4a:	bd10      	pop	{r4, pc}
10008a4c:	10017068 	.word	0x10017068
10008a50:	1000a951 	.word	0x1000a951

10008a54 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008a54:	2324      	movs	r3, #36	; 0x24
10008a56:	4a05      	ldr	r2, [pc, #20]	; (10008a6c <mpu_get_sample_rate+0x18>)
10008a58:	5cd3      	ldrb	r3, [r2, r3]
10008a5a:	2b00      	cmp	r3, #0
10008a5c:	d103      	bne.n	10008a66 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008a5e:	89d3      	ldrh	r3, [r2, #14]
10008a60:	8003      	strh	r3, [r0, #0]
    return 0;
10008a62:	2000      	movs	r0, #0
10008a64:	e001      	b.n	10008a6a <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a66:	2001      	movs	r0, #1
10008a68:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a6a:	4770      	bx	lr
10008a6c:	10017068 	.word	0x10017068

10008a70 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a70:	b530      	push	{r4, r5, lr}
10008a72:	b083      	sub	sp, #12
10008a74:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a76:	d020      	beq.n	10008aba <mpu_set_compass_sample_rate+0x4a>
10008a78:	4b17      	ldr	r3, [pc, #92]	; (10008ad8 <mpu_set_compass_sample_rate+0x68>)
10008a7a:	89d8      	ldrh	r0, [r3, #14]
10008a7c:	4281      	cmp	r1, r0
10008a7e:	d81f      	bhi.n	10008ac0 <mpu_set_compass_sample_rate+0x50>
10008a80:	2964      	cmp	r1, #100	; 0x64
10008a82:	d820      	bhi.n	10008ac6 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a84:	466b      	mov	r3, sp
10008a86:	1ddc      	adds	r4, r3, #7
10008a88:	4b14      	ldr	r3, [pc, #80]	; (10008adc <mpu_set_compass_sample_rate+0x6c>)
10008a8a:	4798      	blx	r3
10008a8c:	3801      	subs	r0, #1
10008a8e:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a90:	4b11      	ldr	r3, [pc, #68]	; (10008ad8 <mpu_set_compass_sample_rate+0x68>)
10008a92:	2224      	movs	r2, #36	; 0x24
10008a94:	6819      	ldr	r1, [r3, #0]
10008a96:	5c89      	ldrb	r1, [r1, r2]
10008a98:	685b      	ldr	r3, [r3, #4]
10008a9a:	7818      	ldrb	r0, [r3, #0]
10008a9c:	0023      	movs	r3, r4
10008a9e:	3a23      	subs	r2, #35	; 0x23
10008aa0:	4c0f      	ldr	r4, [pc, #60]	; (10008ae0 <mpu_set_compass_sample_rate+0x70>)
10008aa2:	47a0      	blx	r4
10008aa4:	1e04      	subs	r4, r0, #0
10008aa6:	d111      	bne.n	10008acc <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008aa8:	4d0b      	ldr	r5, [pc, #44]	; (10008ad8 <mpu_set_compass_sample_rate+0x68>)
10008aaa:	89e8      	ldrh	r0, [r5, #14]
10008aac:	466b      	mov	r3, sp
10008aae:	79d9      	ldrb	r1, [r3, #7]
10008ab0:	3101      	adds	r1, #1
10008ab2:	4b0c      	ldr	r3, [pc, #48]	; (10008ae4 <mpu_set_compass_sample_rate+0x74>)
10008ab4:	4798      	blx	r3
10008ab6:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008ab8:	e00a      	b.n	10008ad0 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008aba:	2401      	movs	r4, #1
10008abc:	4264      	negs	r4, r4
10008abe:	e007      	b.n	10008ad0 <mpu_set_compass_sample_rate+0x60>
10008ac0:	2401      	movs	r4, #1
10008ac2:	4264      	negs	r4, r4
10008ac4:	e004      	b.n	10008ad0 <mpu_set_compass_sample_rate+0x60>
10008ac6:	2401      	movs	r4, #1
10008ac8:	4264      	negs	r4, r4
10008aca:	e001      	b.n	10008ad0 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008acc:	2401      	movs	r4, #1
10008ace:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008ad0:	0020      	movs	r0, r4
10008ad2:	b003      	add	sp, #12
10008ad4:	bd30      	pop	{r4, r5, pc}
10008ad6:	46c0      	nop			; (mov r8, r8)
10008ad8:	10017068 	.word	0x10017068
10008adc:	100127ed 	.word	0x100127ed
10008ae0:	1000a951 	.word	0x1000a951
10008ae4:	10012901 	.word	0x10012901

10008ae8 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008ae8:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008aea:	2324      	movs	r3, #36	; 0x24
10008aec:	4a16      	ldr	r2, [pc, #88]	; (10008b48 <mpu_configure_fifo+0x60>)
10008aee:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008af0:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008af2:	2b00      	cmp	r3, #0
10008af4:	d126      	bne.n	10008b44 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008af6:	7a94      	ldrb	r4, [r2, #10]
10008af8:	2c00      	cmp	r4, #0
10008afa:	d015      	beq.n	10008b28 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008afc:	2301      	movs	r3, #1
10008afe:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008b00:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008b02:	4004      	ands	r4, r0
10008b04:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008b06:	1b04      	subs	r4, r0, r4
10008b08:	1e63      	subs	r3, r4, #1
10008b0a:	419c      	sbcs	r4, r3
10008b0c:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008b0e:	2800      	cmp	r0, #0
10008b10:	d10d      	bne.n	10008b2e <mpu_configure_fifo+0x46>
10008b12:	7d13      	ldrb	r3, [r2, #20]
10008b14:	2b00      	cmp	r3, #0
10008b16:	d112      	bne.n	10008b3e <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008b18:	4b0c      	ldr	r3, [pc, #48]	; (10008b4c <mpu_configure_fifo+0x64>)
10008b1a:	4798      	blx	r3
10008b1c:	e012      	b.n	10008b44 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008b1e:	4b0a      	ldr	r3, [pc, #40]	; (10008b48 <mpu_configure_fifo+0x60>)
10008b20:	741d      	strb	r5, [r3, #16]
                return -1;
10008b22:	2401      	movs	r4, #1
10008b24:	4264      	negs	r4, r4
10008b26:	e00d      	b.n	10008b44 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008b28:	2401      	movs	r4, #1
10008b2a:	4264      	negs	r4, r4
10008b2c:	e00a      	b.n	10008b44 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b2e:	2001      	movs	r0, #1
10008b30:	4b06      	ldr	r3, [pc, #24]	; (10008b4c <mpu_configure_fifo+0x64>)
10008b32:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008b34:	4b06      	ldr	r3, [pc, #24]	; (10008b50 <mpu_configure_fifo+0x68>)
10008b36:	4798      	blx	r3
10008b38:	2800      	cmp	r0, #0
10008b3a:	d003      	beq.n	10008b44 <mpu_configure_fifo+0x5c>
10008b3c:	e7ef      	b.n	10008b1e <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b3e:	2001      	movs	r0, #1
10008b40:	4b02      	ldr	r3, [pc, #8]	; (10008b4c <mpu_configure_fifo+0x64>)
10008b42:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008b44:	0020      	movs	r0, r4
10008b46:	bd70      	pop	{r4, r5, r6, pc}
10008b48:	10017068 	.word	0x10017068
10008b4c:	100084c5 	.word	0x100084c5
10008b50:	10008621 	.word	0x10008621

10008b54 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b56:	464f      	mov	r7, r9
10008b58:	b480      	push	{r7}
10008b5a:	b088      	sub	sp, #32
10008b5c:	9001      	str	r0, [sp, #4]
10008b5e:	9103      	str	r1, [sp, #12]
10008b60:	9202      	str	r2, [sp, #8]
10008b62:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b64:	2324      	movs	r3, #36	; 0x24
10008b66:	4a69      	ldr	r2, [pc, #420]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008b68:	5cd3      	ldrb	r3, [r2, r3]
10008b6a:	2b00      	cmp	r3, #0
10008b6c:	d000      	beq.n	10008b70 <mpu_read_fifo+0x1c>
10008b6e:	e0b6      	b.n	10008cde <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b70:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b72:	7a93      	ldrb	r3, [r2, #10]
10008b74:	2b00      	cmp	r3, #0
10008b76:	d100      	bne.n	10008b7a <mpu_read_fifo+0x26>
10008b78:	e0b4      	b.n	10008ce4 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b7a:	7c13      	ldrb	r3, [r2, #16]
10008b7c:	2b00      	cmp	r3, #0
10008b7e:	d100      	bne.n	10008b82 <mpu_read_fifo+0x2e>
10008b80:	e0b3      	b.n	10008cea <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b82:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b84:	0fd2      	lsrs	r2, r2, #31
10008b86:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b88:	069a      	lsls	r2, r3, #26
10008b8a:	d501      	bpl.n	10008b90 <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b8c:	1caa      	adds	r2, r5, #2
10008b8e:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b90:	06da      	lsls	r2, r3, #27
10008b92:	d501      	bpl.n	10008b98 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b94:	1caa      	adds	r2, r5, #2
10008b96:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b98:	071b      	lsls	r3, r3, #28
10008b9a:	d501      	bpl.n	10008ba0 <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b9c:	1dab      	adds	r3, r5, #6
10008b9e:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008ba0:	4b5a      	ldr	r3, [pc, #360]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008ba2:	681a      	ldr	r2, [r3, #0]
10008ba4:	7b11      	ldrb	r1, [r2, #12]
10008ba6:	685b      	ldr	r3, [r3, #4]
10008ba8:	7818      	ldrb	r0, [r3, #0]
10008baa:	ab05      	add	r3, sp, #20
10008bac:	2202      	movs	r2, #2
10008bae:	4c58      	ldr	r4, [pc, #352]	; (10008d10 <mpu_read_fifo+0x1bc>)
10008bb0:	47a0      	blx	r4
10008bb2:	1e04      	subs	r4, r0, #0
10008bb4:	d000      	beq.n	10008bb8 <mpu_read_fifo+0x64>
10008bb6:	e09b      	b.n	10008cf0 <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008bb8:	aa05      	add	r2, sp, #20
10008bba:	7813      	ldrb	r3, [r2, #0]
10008bbc:	021b      	lsls	r3, r3, #8
10008bbe:	7852      	ldrb	r2, [r2, #1]
10008bc0:	431a      	orrs	r2, r3
10008bc2:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008bc4:	b2af      	uxth	r7, r5
10008bc6:	42ba      	cmp	r2, r7
10008bc8:	d200      	bcs.n	10008bcc <mpu_read_fifo+0x78>
10008bca:	e099      	b.n	10008d00 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008bcc:	4b4f      	ldr	r3, [pc, #316]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008bce:	685a      	ldr	r2, [r3, #4]
10008bd0:	8853      	ldrh	r3, [r2, #2]
10008bd2:	085b      	lsrs	r3, r3, #1
10008bd4:	4599      	cmp	r9, r3
10008bd6:	d913      	bls.n	10008c00 <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008bd8:	4b4c      	ldr	r3, [pc, #304]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008bda:	681b      	ldr	r3, [r3, #0]
10008bdc:	7cd9      	ldrb	r1, [r3, #19]
10008bde:	7810      	ldrb	r0, [r2, #0]
10008be0:	ab05      	add	r3, sp, #20
10008be2:	2201      	movs	r2, #1
10008be4:	4c4a      	ldr	r4, [pc, #296]	; (10008d10 <mpu_read_fifo+0x1bc>)
10008be6:	47a0      	blx	r4
10008be8:	2800      	cmp	r0, #0
10008bea:	d000      	beq.n	10008bee <mpu_read_fifo+0x9a>
10008bec:	e083      	b.n	10008cf6 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008bee:	ab05      	add	r3, sp, #20
10008bf0:	781b      	ldrb	r3, [r3, #0]
10008bf2:	06db      	lsls	r3, r3, #27
10008bf4:	d504      	bpl.n	10008c00 <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008bf6:	4b47      	ldr	r3, [pc, #284]	; (10008d14 <mpu_read_fifo+0x1c0>)
10008bf8:	4798      	blx	r3
            return -2;
10008bfa:	2402      	movs	r4, #2
10008bfc:	4264      	negs	r4, r4
10008bfe:	e07f      	b.n	10008d00 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008c00:	9802      	ldr	r0, [sp, #8]
10008c02:	4b45      	ldr	r3, [pc, #276]	; (10008d18 <mpu_read_fifo+0x1c4>)
10008c04:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008c06:	4b41      	ldr	r3, [pc, #260]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008c08:	681a      	ldr	r2, [r3, #0]
10008c0a:	7b51      	ldrb	r1, [r2, #13]
10008c0c:	685b      	ldr	r3, [r3, #4]
10008c0e:	7818      	ldrb	r0, [r3, #0]
10008c10:	ab05      	add	r3, sp, #20
10008c12:	002a      	movs	r2, r5
10008c14:	4c3e      	ldr	r4, [pc, #248]	; (10008d10 <mpu_read_fifo+0x1bc>)
10008c16:	47a0      	blx	r4
10008c18:	1e04      	subs	r4, r0, #0
10008c1a:	d16f      	bne.n	10008cfc <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008c1c:	0029      	movs	r1, r5
10008c1e:	4648      	mov	r0, r9
10008c20:	4b3e      	ldr	r3, [pc, #248]	; (10008d1c <mpu_read_fifo+0x1c8>)
10008c22:	4798      	blx	r3
10008c24:	3801      	subs	r0, #1
10008c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008c28:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008c2a:	2300      	movs	r3, #0
10008c2c:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c2e:	2d00      	cmp	r5, #0
10008c30:	d01a      	beq.n	10008c68 <mpu_read_fifo+0x114>
10008c32:	4b36      	ldr	r3, [pc, #216]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008c34:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008c36:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c38:	0712      	lsls	r2, r2, #28
10008c3a:	d515      	bpl.n	10008c68 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008c3c:	ab05      	add	r3, sp, #20
10008c3e:	781a      	ldrb	r2, [r3, #0]
10008c40:	0212      	lsls	r2, r2, #8
10008c42:	7859      	ldrb	r1, [r3, #1]
10008c44:	430a      	orrs	r2, r1
10008c46:	9803      	ldr	r0, [sp, #12]
10008c48:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008c4a:	789a      	ldrb	r2, [r3, #2]
10008c4c:	0212      	lsls	r2, r2, #8
10008c4e:	78d9      	ldrb	r1, [r3, #3]
10008c50:	430a      	orrs	r2, r1
10008c52:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008c54:	791a      	ldrb	r2, [r3, #4]
10008c56:	0212      	lsls	r2, r2, #8
10008c58:	795b      	ldrb	r3, [r3, #5]
10008c5a:	4313      	orrs	r3, r2
10008c5c:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008c5e:	7832      	ldrb	r2, [r6, #0]
10008c60:	2308      	movs	r3, #8
10008c62:	4313      	orrs	r3, r2
10008c64:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c66:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c68:	42bb      	cmp	r3, r7
10008c6a:	d049      	beq.n	10008d00 <mpu_read_fifo+0x1ac>
10008c6c:	4a27      	ldr	r2, [pc, #156]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008c6e:	7c12      	ldrb	r2, [r2, #16]
10008c70:	0652      	lsls	r2, r2, #25
10008c72:	d50f      	bpl.n	10008c94 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c74:	a905      	add	r1, sp, #20
10008c76:	5cca      	ldrb	r2, [r1, r3]
10008c78:	0212      	lsls	r2, r2, #8
10008c7a:	18c9      	adds	r1, r1, r3
10008c7c:	7849      	ldrb	r1, [r1, #1]
10008c7e:	430a      	orrs	r2, r1
10008c80:	9901      	ldr	r1, [sp, #4]
10008c82:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c84:	7831      	ldrb	r1, [r6, #0]
10008c86:	2240      	movs	r2, #64	; 0x40
10008c88:	430a      	orrs	r2, r1
10008c8a:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c8c:	3302      	adds	r3, #2
10008c8e:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c90:	429f      	cmp	r7, r3
10008c92:	d035      	beq.n	10008d00 <mpu_read_fifo+0x1ac>
10008c94:	4a1d      	ldr	r2, [pc, #116]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008c96:	7c12      	ldrb	r2, [r2, #16]
10008c98:	0692      	lsls	r2, r2, #26
10008c9a:	d50f      	bpl.n	10008cbc <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c9c:	a905      	add	r1, sp, #20
10008c9e:	5cca      	ldrb	r2, [r1, r3]
10008ca0:	0212      	lsls	r2, r2, #8
10008ca2:	18c9      	adds	r1, r1, r3
10008ca4:	7849      	ldrb	r1, [r1, #1]
10008ca6:	430a      	orrs	r2, r1
10008ca8:	9901      	ldr	r1, [sp, #4]
10008caa:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008cac:	7831      	ldrb	r1, [r6, #0]
10008cae:	2220      	movs	r2, #32
10008cb0:	430a      	orrs	r2, r1
10008cb2:	7032      	strb	r2, [r6, #0]
        index += 2;
10008cb4:	3302      	adds	r3, #2
10008cb6:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008cb8:	429f      	cmp	r7, r3
10008cba:	d021      	beq.n	10008d00 <mpu_read_fifo+0x1ac>
10008cbc:	4a13      	ldr	r2, [pc, #76]	; (10008d0c <mpu_read_fifo+0x1b8>)
10008cbe:	7c12      	ldrb	r2, [r2, #16]
10008cc0:	06d2      	lsls	r2, r2, #27
10008cc2:	d51d      	bpl.n	10008d00 <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008cc4:	a905      	add	r1, sp, #20
10008cc6:	5cca      	ldrb	r2, [r1, r3]
10008cc8:	0212      	lsls	r2, r2, #8
10008cca:	18cb      	adds	r3, r1, r3
10008ccc:	785b      	ldrb	r3, [r3, #1]
10008cce:	4313      	orrs	r3, r2
10008cd0:	9a01      	ldr	r2, [sp, #4]
10008cd2:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008cd4:	7832      	ldrb	r2, [r6, #0]
10008cd6:	2310      	movs	r3, #16
10008cd8:	4313      	orrs	r3, r2
10008cda:	7033      	strb	r3, [r6, #0]
10008cdc:	e010      	b.n	10008d00 <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008cde:	2401      	movs	r4, #1
10008ce0:	4264      	negs	r4, r4
10008ce2:	e00d      	b.n	10008d00 <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008ce4:	2401      	movs	r4, #1
10008ce6:	4264      	negs	r4, r4
10008ce8:	e00a      	b.n	10008d00 <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008cea:	2401      	movs	r4, #1
10008cec:	4264      	negs	r4, r4
10008cee:	e007      	b.n	10008d00 <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008cf0:	2401      	movs	r4, #1
10008cf2:	4264      	negs	r4, r4
10008cf4:	e004      	b.n	10008d00 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008cf6:	2401      	movs	r4, #1
10008cf8:	4264      	negs	r4, r4
10008cfa:	e001      	b.n	10008d00 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008cfc:	2401      	movs	r4, #1
10008cfe:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008d00:	0020      	movs	r0, r4
10008d02:	b008      	add	sp, #32
10008d04:	bc04      	pop	{r2}
10008d06:	4691      	mov	r9, r2
10008d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d0a:	46c0      	nop			; (mov r8, r8)
10008d0c:	10017068 	.word	0x10017068
10008d10:	1000a9ad 	.word	0x1000a9ad
10008d14:	10008621 	.word	0x10008621
10008d18:	1000b1a5 	.word	0x1000b1a5
10008d1c:	10012901 	.word	0x10012901

10008d20 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008d20:	b530      	push	{r4, r5, lr}
10008d22:	b083      	sub	sp, #12
10008d24:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008d26:	4b59      	ldr	r3, [pc, #356]	; (10008e8c <mpu_set_bypass+0x16c>)
10008d28:	7c9b      	ldrb	r3, [r3, #18]
10008d2a:	4283      	cmp	r3, r0
10008d2c:	d100      	bne.n	10008d30 <mpu_set_bypass+0x10>
10008d2e:	e097      	b.n	10008e60 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008d30:	2800      	cmp	r0, #0
10008d32:	d042      	beq.n	10008dba <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d34:	4b55      	ldr	r3, [pc, #340]	; (10008e8c <mpu_set_bypass+0x16c>)
10008d36:	681a      	ldr	r2, [r3, #0]
10008d38:	7911      	ldrb	r1, [r2, #4]
10008d3a:	685b      	ldr	r3, [r3, #4]
10008d3c:	7818      	ldrb	r0, [r3, #0]
10008d3e:	466b      	mov	r3, sp
10008d40:	3307      	adds	r3, #7
10008d42:	2201      	movs	r2, #1
10008d44:	4d52      	ldr	r5, [pc, #328]	; (10008e90 <mpu_set_bypass+0x170>)
10008d46:	47a8      	blx	r5
10008d48:	2800      	cmp	r0, #0
10008d4a:	d000      	beq.n	10008d4e <mpu_set_bypass+0x2e>
10008d4c:	e08a      	b.n	10008e64 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008d4e:	466b      	mov	r3, sp
10008d50:	3307      	adds	r3, #7
10008d52:	781a      	ldrb	r2, [r3, #0]
10008d54:	2120      	movs	r1, #32
10008d56:	438a      	bics	r2, r1
10008d58:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d5a:	4a4c      	ldr	r2, [pc, #304]	; (10008e8c <mpu_set_bypass+0x16c>)
10008d5c:	6811      	ldr	r1, [r2, #0]
10008d5e:	7909      	ldrb	r1, [r1, #4]
10008d60:	6852      	ldr	r2, [r2, #4]
10008d62:	7810      	ldrb	r0, [r2, #0]
10008d64:	2201      	movs	r2, #1
10008d66:	4d4b      	ldr	r5, [pc, #300]	; (10008e94 <mpu_set_bypass+0x174>)
10008d68:	47a8      	blx	r5
10008d6a:	2800      	cmp	r0, #0
10008d6c:	d17d      	bne.n	10008e6a <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d6e:	3003      	adds	r0, #3
10008d70:	4b49      	ldr	r3, [pc, #292]	; (10008e98 <mpu_set_bypass+0x178>)
10008d72:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d74:	2202      	movs	r2, #2
10008d76:	466b      	mov	r3, sp
10008d78:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d7a:	2322      	movs	r3, #34	; 0x22
10008d7c:	4a43      	ldr	r2, [pc, #268]	; (10008e8c <mpu_set_bypass+0x16c>)
10008d7e:	5cd3      	ldrb	r3, [r2, r3]
10008d80:	2b00      	cmp	r3, #0
10008d82:	d002      	beq.n	10008d8a <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d84:	2282      	movs	r2, #130	; 0x82
10008d86:	466b      	mov	r3, sp
10008d88:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d8a:	2323      	movs	r3, #35	; 0x23
10008d8c:	4a3f      	ldr	r2, [pc, #252]	; (10008e8c <mpu_set_bypass+0x16c>)
10008d8e:	5cd3      	ldrb	r3, [r2, r3]
10008d90:	2b00      	cmp	r3, #0
10008d92:	d005      	beq.n	10008da0 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d94:	466b      	mov	r3, sp
10008d96:	1dda      	adds	r2, r3, #7
10008d98:	79d9      	ldrb	r1, [r3, #7]
10008d9a:	2330      	movs	r3, #48	; 0x30
10008d9c:	430b      	orrs	r3, r1
10008d9e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008da0:	4b3a      	ldr	r3, [pc, #232]	; (10008e8c <mpu_set_bypass+0x16c>)
10008da2:	681a      	ldr	r2, [r3, #0]
10008da4:	7dd1      	ldrb	r1, [r2, #23]
10008da6:	685b      	ldr	r3, [r3, #4]
10008da8:	7818      	ldrb	r0, [r3, #0]
10008daa:	466b      	mov	r3, sp
10008dac:	3307      	adds	r3, #7
10008dae:	2201      	movs	r2, #1
10008db0:	4d38      	ldr	r5, [pc, #224]	; (10008e94 <mpu_set_bypass+0x174>)
10008db2:	47a8      	blx	r5
10008db4:	2800      	cmp	r0, #0
10008db6:	d04f      	beq.n	10008e58 <mpu_set_bypass+0x138>
10008db8:	e05a      	b.n	10008e70 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008dba:	4b34      	ldr	r3, [pc, #208]	; (10008e8c <mpu_set_bypass+0x16c>)
10008dbc:	681a      	ldr	r2, [r3, #0]
10008dbe:	7911      	ldrb	r1, [r2, #4]
10008dc0:	685b      	ldr	r3, [r3, #4]
10008dc2:	7818      	ldrb	r0, [r3, #0]
10008dc4:	466b      	mov	r3, sp
10008dc6:	3307      	adds	r3, #7
10008dc8:	2201      	movs	r2, #1
10008dca:	4d31      	ldr	r5, [pc, #196]	; (10008e90 <mpu_set_bypass+0x170>)
10008dcc:	47a8      	blx	r5
10008dce:	2800      	cmp	r0, #0
10008dd0:	d151      	bne.n	10008e76 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008dd2:	4b2e      	ldr	r3, [pc, #184]	; (10008e8c <mpu_set_bypass+0x16c>)
10008dd4:	7a9b      	ldrb	r3, [r3, #10]
10008dd6:	07db      	lsls	r3, r3, #31
10008dd8:	d506      	bpl.n	10008de8 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008dda:	466b      	mov	r3, sp
10008ddc:	1dda      	adds	r2, r3, #7
10008dde:	79d9      	ldrb	r1, [r3, #7]
10008de0:	2320      	movs	r3, #32
10008de2:	430b      	orrs	r3, r1
10008de4:	7013      	strb	r3, [r2, #0]
10008de6:	e005      	b.n	10008df4 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008de8:	466b      	mov	r3, sp
10008dea:	1dda      	adds	r2, r3, #7
10008dec:	79db      	ldrb	r3, [r3, #7]
10008dee:	2120      	movs	r1, #32
10008df0:	438b      	bics	r3, r1
10008df2:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008df4:	4b25      	ldr	r3, [pc, #148]	; (10008e8c <mpu_set_bypass+0x16c>)
10008df6:	681a      	ldr	r2, [r3, #0]
10008df8:	7911      	ldrb	r1, [r2, #4]
10008dfa:	685b      	ldr	r3, [r3, #4]
10008dfc:	7818      	ldrb	r0, [r3, #0]
10008dfe:	466b      	mov	r3, sp
10008e00:	3307      	adds	r3, #7
10008e02:	2201      	movs	r2, #1
10008e04:	4d23      	ldr	r5, [pc, #140]	; (10008e94 <mpu_set_bypass+0x174>)
10008e06:	47a8      	blx	r5
10008e08:	2800      	cmp	r0, #0
10008e0a:	d137      	bne.n	10008e7c <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008e0c:	3003      	adds	r0, #3
10008e0e:	4b22      	ldr	r3, [pc, #136]	; (10008e98 <mpu_set_bypass+0x178>)
10008e10:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008e12:	2322      	movs	r3, #34	; 0x22
10008e14:	4a1d      	ldr	r2, [pc, #116]	; (10008e8c <mpu_set_bypass+0x16c>)
10008e16:	5cd3      	ldrb	r3, [r2, r3]
10008e18:	2b00      	cmp	r3, #0
10008e1a:	d003      	beq.n	10008e24 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008e1c:	2280      	movs	r2, #128	; 0x80
10008e1e:	466b      	mov	r3, sp
10008e20:	71da      	strb	r2, [r3, #7]
10008e22:	e002      	b.n	10008e2a <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008e24:	2200      	movs	r2, #0
10008e26:	466b      	mov	r3, sp
10008e28:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008e2a:	2323      	movs	r3, #35	; 0x23
10008e2c:	4a17      	ldr	r2, [pc, #92]	; (10008e8c <mpu_set_bypass+0x16c>)
10008e2e:	5cd3      	ldrb	r3, [r2, r3]
10008e30:	2b00      	cmp	r3, #0
10008e32:	d005      	beq.n	10008e40 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e34:	466b      	mov	r3, sp
10008e36:	1dda      	adds	r2, r3, #7
10008e38:	79d9      	ldrb	r1, [r3, #7]
10008e3a:	2330      	movs	r3, #48	; 0x30
10008e3c:	430b      	orrs	r3, r1
10008e3e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e40:	4b12      	ldr	r3, [pc, #72]	; (10008e8c <mpu_set_bypass+0x16c>)
10008e42:	681a      	ldr	r2, [r3, #0]
10008e44:	7dd1      	ldrb	r1, [r2, #23]
10008e46:	685b      	ldr	r3, [r3, #4]
10008e48:	7818      	ldrb	r0, [r3, #0]
10008e4a:	466b      	mov	r3, sp
10008e4c:	3307      	adds	r3, #7
10008e4e:	2201      	movs	r2, #1
10008e50:	4d10      	ldr	r5, [pc, #64]	; (10008e94 <mpu_set_bypass+0x174>)
10008e52:	47a8      	blx	r5
10008e54:	2800      	cmp	r0, #0
10008e56:	d114      	bne.n	10008e82 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008e58:	4b0c      	ldr	r3, [pc, #48]	; (10008e8c <mpu_set_bypass+0x16c>)
10008e5a:	749c      	strb	r4, [r3, #18]
    return 0;
10008e5c:	2000      	movs	r0, #0
10008e5e:	e012      	b.n	10008e86 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008e60:	2000      	movs	r0, #0
10008e62:	e010      	b.n	10008e86 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e64:	2001      	movs	r0, #1
10008e66:	4240      	negs	r0, r0
10008e68:	e00d      	b.n	10008e86 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e6a:	2001      	movs	r0, #1
10008e6c:	4240      	negs	r0, r0
10008e6e:	e00a      	b.n	10008e86 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e70:	2001      	movs	r0, #1
10008e72:	4240      	negs	r0, r0
10008e74:	e007      	b.n	10008e86 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e76:	2001      	movs	r0, #1
10008e78:	4240      	negs	r0, r0
10008e7a:	e004      	b.n	10008e86 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e7c:	2001      	movs	r0, #1
10008e7e:	4240      	negs	r0, r0
10008e80:	e001      	b.n	10008e86 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e82:	2001      	movs	r0, #1
10008e84:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e86:	b003      	add	sp, #12
10008e88:	bd30      	pop	{r4, r5, pc}
10008e8a:	46c0      	nop			; (mov r8, r8)
10008e8c:	10017068 	.word	0x10017068
10008e90:	1000a9ad 	.word	0x1000a9ad
10008e94:	1000a951 	.word	0x1000a951
10008e98:	10008129 	.word	0x10008129

10008e9c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e9c:	b530      	push	{r4, r5, lr}
10008e9e:	b083      	sub	sp, #12
10008ea0:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008ea2:	2323      	movs	r3, #35	; 0x23
10008ea4:	4a1c      	ldr	r2, [pc, #112]	; (10008f18 <mpu_set_int_latched+0x7c>)
10008ea6:	5cd3      	ldrb	r3, [r2, r3]
10008ea8:	4283      	cmp	r3, r0
10008eaa:	d02e      	beq.n	10008f0a <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008eac:	2800      	cmp	r0, #0
10008eae:	d003      	beq.n	10008eb8 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008eb0:	2230      	movs	r2, #48	; 0x30
10008eb2:	466b      	mov	r3, sp
10008eb4:	71da      	strb	r2, [r3, #7]
10008eb6:	e002      	b.n	10008ebe <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008eb8:	2200      	movs	r2, #0
10008eba:	466b      	mov	r3, sp
10008ebc:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008ebe:	4b16      	ldr	r3, [pc, #88]	; (10008f18 <mpu_set_int_latched+0x7c>)
10008ec0:	7c9b      	ldrb	r3, [r3, #18]
10008ec2:	2b00      	cmp	r3, #0
10008ec4:	d005      	beq.n	10008ed2 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008ec6:	466b      	mov	r3, sp
10008ec8:	1dda      	adds	r2, r3, #7
10008eca:	79d9      	ldrb	r1, [r3, #7]
10008ecc:	2302      	movs	r3, #2
10008ece:	430b      	orrs	r3, r1
10008ed0:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008ed2:	2322      	movs	r3, #34	; 0x22
10008ed4:	4a10      	ldr	r2, [pc, #64]	; (10008f18 <mpu_set_int_latched+0x7c>)
10008ed6:	5cd3      	ldrb	r3, [r2, r3]
10008ed8:	2b00      	cmp	r3, #0
10008eda:	d006      	beq.n	10008eea <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008edc:	466b      	mov	r3, sp
10008ede:	1dda      	adds	r2, r3, #7
10008ee0:	79db      	ldrb	r3, [r3, #7]
10008ee2:	2180      	movs	r1, #128	; 0x80
10008ee4:	4249      	negs	r1, r1
10008ee6:	430b      	orrs	r3, r1
10008ee8:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008eea:	4b0b      	ldr	r3, [pc, #44]	; (10008f18 <mpu_set_int_latched+0x7c>)
10008eec:	681a      	ldr	r2, [r3, #0]
10008eee:	7dd1      	ldrb	r1, [r2, #23]
10008ef0:	685b      	ldr	r3, [r3, #4]
10008ef2:	7818      	ldrb	r0, [r3, #0]
10008ef4:	466b      	mov	r3, sp
10008ef6:	3307      	adds	r3, #7
10008ef8:	2201      	movs	r2, #1
10008efa:	4d08      	ldr	r5, [pc, #32]	; (10008f1c <mpu_set_int_latched+0x80>)
10008efc:	47a8      	blx	r5
10008efe:	2800      	cmp	r0, #0
10008f00:	d105      	bne.n	10008f0e <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008f02:	2323      	movs	r3, #35	; 0x23
10008f04:	4a04      	ldr	r2, [pc, #16]	; (10008f18 <mpu_set_int_latched+0x7c>)
10008f06:	54d4      	strb	r4, [r2, r3]
    return 0;
10008f08:	e003      	b.n	10008f12 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008f0a:	2000      	movs	r0, #0
10008f0c:	e001      	b.n	10008f12 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008f0e:	2001      	movs	r0, #1
10008f10:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008f12:	b003      	add	sp, #12
10008f14:	bd30      	pop	{r4, r5, pc}
10008f16:	46c0      	nop			; (mov r8, r8)
10008f18:	10017068 	.word	0x10017068
10008f1c:	1000a951 	.word	0x1000a951

10008f20 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008f20:	b510      	push	{r4, lr}
10008f22:	b082      	sub	sp, #8
10008f24:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008f26:	2c28      	cmp	r4, #40	; 0x28
10008f28:	d878      	bhi.n	1000901c <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008f2a:	2800      	cmp	r0, #0
10008f2c:	d115      	bne.n	10008f5a <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008f2e:	2000      	movs	r0, #0
10008f30:	4b44      	ldr	r3, [pc, #272]	; (10009044 <mpu_lp_accel_mode+0x124>)
10008f32:	4798      	blx	r3
        tmp[0] = 0;
10008f34:	ab01      	add	r3, sp, #4
10008f36:	2200      	movs	r2, #0
10008f38:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008f3a:	3207      	adds	r2, #7
10008f3c:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008f3e:	4a42      	ldr	r2, [pc, #264]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008f40:	6811      	ldr	r1, [r2, #0]
10008f42:	7d49      	ldrb	r1, [r1, #21]
10008f44:	6852      	ldr	r2, [r2, #4]
10008f46:	7810      	ldrb	r0, [r2, #0]
10008f48:	2202      	movs	r2, #2
10008f4a:	4c40      	ldr	r4, [pc, #256]	; (1000904c <mpu_lp_accel_mode+0x12c>)
10008f4c:	47a0      	blx	r4
10008f4e:	1e04      	subs	r4, r0, #0
10008f50:	d167      	bne.n	10009022 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008f52:	2200      	movs	r2, #0
10008f54:	4b3c      	ldr	r3, [pc, #240]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008f56:	751a      	strb	r2, [r3, #20]
        return 0;
10008f58:	e071      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008f5a:	2001      	movs	r0, #1
10008f5c:	4b39      	ldr	r3, [pc, #228]	; (10009044 <mpu_lp_accel_mode+0x124>)
10008f5e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008f60:	2c01      	cmp	r4, #1
10008f62:	d103      	bne.n	10008f6c <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f64:	2202      	movs	r2, #2
10008f66:	ab01      	add	r3, sp, #4
10008f68:	701a      	strb	r2, [r3, #0]
10008f6a:	e01a      	b.n	10008fa2 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f6c:	2c02      	cmp	r4, #2
10008f6e:	d103      	bne.n	10008f78 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f70:	2203      	movs	r2, #3
10008f72:	ab01      	add	r3, sp, #4
10008f74:	701a      	strb	r2, [r3, #0]
10008f76:	e014      	b.n	10008fa2 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f78:	2c05      	cmp	r4, #5
10008f7a:	d803      	bhi.n	10008f84 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f7c:	2204      	movs	r2, #4
10008f7e:	ab01      	add	r3, sp, #4
10008f80:	701a      	strb	r2, [r3, #0]
10008f82:	e00e      	b.n	10008fa2 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f84:	2c0a      	cmp	r4, #10
10008f86:	d803      	bhi.n	10008f90 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f88:	2205      	movs	r2, #5
10008f8a:	ab01      	add	r3, sp, #4
10008f8c:	701a      	strb	r2, [r3, #0]
10008f8e:	e008      	b.n	10008fa2 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f90:	2c14      	cmp	r4, #20
10008f92:	d803      	bhi.n	10008f9c <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f94:	2206      	movs	r2, #6
10008f96:	ab01      	add	r3, sp, #4
10008f98:	701a      	strb	r2, [r3, #0]
10008f9a:	e002      	b.n	10008fa2 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f9c:	2207      	movs	r2, #7
10008f9e:	ab01      	add	r3, sp, #4
10008fa0:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008fa2:	4b29      	ldr	r3, [pc, #164]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008fa4:	681a      	ldr	r2, [r3, #0]
10008fa6:	7a51      	ldrb	r1, [r2, #9]
10008fa8:	685b      	ldr	r3, [r3, #4]
10008faa:	7818      	ldrb	r0, [r3, #0]
10008fac:	ab01      	add	r3, sp, #4
10008fae:	2201      	movs	r2, #1
10008fb0:	4c26      	ldr	r4, [pc, #152]	; (1000904c <mpu_lp_accel_mode+0x12c>)
10008fb2:	47a0      	blx	r4
10008fb4:	2800      	cmp	r0, #0
10008fb6:	d137      	bne.n	10009028 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fb8:	4b23      	ldr	r3, [pc, #140]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008fba:	681a      	ldr	r2, [r3, #0]
10008fbc:	7a11      	ldrb	r1, [r2, #8]
10008fbe:	685b      	ldr	r3, [r3, #4]
10008fc0:	7818      	ldrb	r0, [r3, #0]
10008fc2:	ab01      	add	r3, sp, #4
10008fc4:	2201      	movs	r2, #1
10008fc6:	4c22      	ldr	r4, [pc, #136]	; (10009050 <mpu_lp_accel_mode+0x130>)
10008fc8:	47a0      	blx	r4
10008fca:	2800      	cmp	r0, #0
10008fcc:	d12f      	bne.n	1000902e <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008fce:	ab01      	add	r3, sp, #4
10008fd0:	7819      	ldrb	r1, [r3, #0]
10008fd2:	2208      	movs	r2, #8
10008fd4:	430a      	orrs	r2, r1
10008fd6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fd8:	4a1b      	ldr	r2, [pc, #108]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008fda:	6811      	ldr	r1, [r2, #0]
10008fdc:	7a09      	ldrb	r1, [r1, #8]
10008fde:	6852      	ldr	r2, [r2, #4]
10008fe0:	7810      	ldrb	r0, [r2, #0]
10008fe2:	2201      	movs	r2, #1
10008fe4:	4c19      	ldr	r4, [pc, #100]	; (1000904c <mpu_lp_accel_mode+0x12c>)
10008fe6:	47a0      	blx	r4
10008fe8:	2800      	cmp	r0, #0
10008fea:	d123      	bne.n	10009034 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008fec:	ab01      	add	r3, sp, #4
10008fee:	2220      	movs	r2, #32
10008ff0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008ff2:	4a15      	ldr	r2, [pc, #84]	; (10009048 <mpu_lp_accel_mode+0x128>)
10008ff4:	6811      	ldr	r1, [r2, #0]
10008ff6:	7d49      	ldrb	r1, [r1, #21]
10008ff8:	6852      	ldr	r2, [r2, #4]
10008ffa:	7810      	ldrb	r0, [r2, #0]
10008ffc:	2201      	movs	r2, #1
10008ffe:	4c13      	ldr	r4, [pc, #76]	; (1000904c <mpu_lp_accel_mode+0x12c>)
10009000:	47a0      	blx	r4
10009002:	1e04      	subs	r4, r0, #0
10009004:	d119      	bne.n	1000903a <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10009006:	4b10      	ldr	r3, [pc, #64]	; (10009048 <mpu_lp_accel_mode+0x128>)
10009008:	2208      	movs	r2, #8
1000900a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
1000900c:	2200      	movs	r2, #0
1000900e:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10009010:	3201      	adds	r2, #1
10009012:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10009014:	2000      	movs	r0, #0
10009016:	4b0f      	ldr	r3, [pc, #60]	; (10009054 <mpu_lp_accel_mode+0x134>)
10009018:	4798      	blx	r3

    return 0;
1000901a:	e010      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
1000901c:	2401      	movs	r4, #1
1000901e:	4264      	negs	r4, r4
10009020:	e00d      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10009022:	2401      	movs	r4, #1
10009024:	4264      	negs	r4, r4
10009026:	e00a      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10009028:	2401      	movs	r4, #1
1000902a:	4264      	negs	r4, r4
1000902c:	e007      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
1000902e:	2401      	movs	r4, #1
10009030:	4264      	negs	r4, r4
10009032:	e004      	b.n	1000903e <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10009034:	2401      	movs	r4, #1
10009036:	4264      	negs	r4, r4
10009038:	e001      	b.n	1000903e <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
1000903a:	2401      	movs	r4, #1
1000903c:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
1000903e:	0020      	movs	r0, r4
10009040:	b002      	add	sp, #8
10009042:	bd10      	pop	{r4, pc}
10009044:	10008e9d 	.word	0x10008e9d
10009048:	10017068 	.word	0x10017068
1000904c:	1000a951 	.word	0x1000a951
10009050:	1000a9ad 	.word	0x1000a9ad
10009054:	10008ae9 	.word	0x10008ae9

10009058 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009058:	b530      	push	{r4, r5, lr}
1000905a:	b083      	sub	sp, #12
1000905c:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000905e:	4b2c      	ldr	r3, [pc, #176]	; (10009110 <mpu_set_sample_rate+0xb8>)
10009060:	7a9b      	ldrb	r3, [r3, #10]
10009062:	2b00      	cmp	r3, #0
10009064:	d048      	beq.n	100090f8 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009066:	2324      	movs	r3, #36	; 0x24
10009068:	4a29      	ldr	r2, [pc, #164]	; (10009110 <mpu_set_sample_rate+0xb8>)
1000906a:	5cd3      	ldrb	r3, [r2, r3]
1000906c:	2b00      	cmp	r3, #0
1000906e:	d146      	bne.n	100090fe <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10009070:	7d13      	ldrb	r3, [r2, #20]
10009072:	2b00      	cmp	r3, #0
10009074:	d00a      	beq.n	1000908c <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009076:	1e43      	subs	r3, r0, #1
10009078:	b29b      	uxth	r3, r3
1000907a:	2b27      	cmp	r3, #39	; 0x27
1000907c:	d803      	bhi.n	10009086 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000907e:	4b25      	ldr	r3, [pc, #148]	; (10009114 <mpu_set_sample_rate+0xbc>)
10009080:	4798      	blx	r3
                return 0;
10009082:	2400      	movs	r4, #0
10009084:	e040      	b.n	10009108 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009086:	2000      	movs	r0, #0
10009088:	4b22      	ldr	r3, [pc, #136]	; (10009114 <mpu_set_sample_rate+0xbc>)
1000908a:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
1000908c:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000908e:	2c03      	cmp	r4, #3
10009090:	d907      	bls.n	100090a2 <mpu_set_sample_rate+0x4a>
10009092:	1c21      	adds	r1, r4, #0
10009094:	23fa      	movs	r3, #250	; 0xfa
10009096:	009b      	lsls	r3, r3, #2
10009098:	429c      	cmp	r4, r3
1000909a:	d901      	bls.n	100090a0 <mpu_set_sample_rate+0x48>
1000909c:	4b1e      	ldr	r3, [pc, #120]	; (10009118 <mpu_set_sample_rate+0xc0>)
1000909e:	8819      	ldrh	r1, [r3, #0]
100090a0:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
100090a2:	466b      	mov	r3, sp
100090a4:	1ddc      	adds	r4, r3, #7
100090a6:	20fa      	movs	r0, #250	; 0xfa
100090a8:	0080      	lsls	r0, r0, #2
100090aa:	4b1c      	ldr	r3, [pc, #112]	; (1000911c <mpu_set_sample_rate+0xc4>)
100090ac:	4798      	blx	r3
100090ae:	3801      	subs	r0, #1
100090b0:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
100090b2:	4b17      	ldr	r3, [pc, #92]	; (10009110 <mpu_set_sample_rate+0xb8>)
100090b4:	681a      	ldr	r2, [r3, #0]
100090b6:	7851      	ldrb	r1, [r2, #1]
100090b8:	685b      	ldr	r3, [r3, #4]
100090ba:	7818      	ldrb	r0, [r3, #0]
100090bc:	0023      	movs	r3, r4
100090be:	2201      	movs	r2, #1
100090c0:	4c17      	ldr	r4, [pc, #92]	; (10009120 <mpu_set_sample_rate+0xc8>)
100090c2:	47a0      	blx	r4
100090c4:	1e04      	subs	r4, r0, #0
100090c6:	d11d      	bne.n	10009104 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
100090c8:	4d11      	ldr	r5, [pc, #68]	; (10009110 <mpu_set_sample_rate+0xb8>)
100090ca:	466b      	mov	r3, sp
100090cc:	79d9      	ldrb	r1, [r3, #7]
100090ce:	3101      	adds	r1, #1
100090d0:	20fa      	movs	r0, #250	; 0xfa
100090d2:	0080      	lsls	r0, r0, #2
100090d4:	4b11      	ldr	r3, [pc, #68]	; (1000911c <mpu_set_sample_rate+0xc4>)
100090d6:	4798      	blx	r3
100090d8:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
100090da:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
100090dc:	1c18      	adds	r0, r3, #0
100090de:	b29b      	uxth	r3, r3
100090e0:	2b64      	cmp	r3, #100	; 0x64
100090e2:	d900      	bls.n	100090e6 <mpu_set_sample_rate+0x8e>
100090e4:	2064      	movs	r0, #100	; 0x64
100090e6:	b280      	uxth	r0, r0
100090e8:	4b0e      	ldr	r3, [pc, #56]	; (10009124 <mpu_set_sample_rate+0xcc>)
100090ea:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
100090ec:	4b08      	ldr	r3, [pc, #32]	; (10009110 <mpu_set_sample_rate+0xb8>)
100090ee:	89d8      	ldrh	r0, [r3, #14]
100090f0:	0840      	lsrs	r0, r0, #1
100090f2:	4b0d      	ldr	r3, [pc, #52]	; (10009128 <mpu_set_sample_rate+0xd0>)
100090f4:	4798      	blx	r3
        return 0;
100090f6:	e007      	b.n	10009108 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100090f8:	2401      	movs	r4, #1
100090fa:	4264      	negs	r4, r4
100090fc:	e004      	b.n	10009108 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
100090fe:	2401      	movs	r4, #1
10009100:	4264      	negs	r4, r4
10009102:	e001      	b.n	10009108 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10009104:	2401      	movs	r4, #1
10009106:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10009108:	0020      	movs	r0, r4
1000910a:	b003      	add	sp, #12
1000910c:	bd30      	pop	{r4, r5, pc}
1000910e:	46c0      	nop			; (mov r8, r8)
10009110:	10017068 	.word	0x10017068
10009114:	10008f21 	.word	0x10008f21
10009118:	10015a9c 	.word	0x10015a9c
1000911c:	10012901 	.word	0x10012901
10009120:	1000a951 	.word	0x1000a951
10009124:	10008a71 	.word	0x10008a71
10009128:	10008999 	.word	0x10008999

1000912c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
1000912c:	b530      	push	{r4, r5, lr}
1000912e:	b083      	sub	sp, #12
10009130:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10009132:	2370      	movs	r3, #112	; 0x70
10009134:	4203      	tst	r3, r0
10009136:	d003      	beq.n	10009140 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10009138:	2201      	movs	r2, #1
1000913a:	466b      	mov	r3, sp
1000913c:	71da      	strb	r2, [r3, #7]
1000913e:	e015      	b.n	1000916c <mpu_set_sensors+0x40>
    else if (sensors)
10009140:	2800      	cmp	r0, #0
10009142:	d003      	beq.n	1000914c <mpu_set_sensors+0x20>
        data = 0;
10009144:	2200      	movs	r2, #0
10009146:	466b      	mov	r3, sp
10009148:	71da      	strb	r2, [r3, #7]
1000914a:	e00f      	b.n	1000916c <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
1000914c:	466b      	mov	r3, sp
1000914e:	3307      	adds	r3, #7
10009150:	2240      	movs	r2, #64	; 0x40
10009152:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009154:	4a6a      	ldr	r2, [pc, #424]	; (10009300 <mpu_set_sensors+0x1d4>)
10009156:	6811      	ldr	r1, [r2, #0]
10009158:	7d49      	ldrb	r1, [r1, #21]
1000915a:	6852      	ldr	r2, [r2, #4]
1000915c:	7810      	ldrb	r0, [r2, #0]
1000915e:	2201      	movs	r2, #1
10009160:	4d68      	ldr	r5, [pc, #416]	; (10009304 <mpu_set_sensors+0x1d8>)
10009162:	47a8      	blx	r5
10009164:	2800      	cmp	r0, #0
10009166:	d100      	bne.n	1000916a <mpu_set_sensors+0x3e>
10009168:	e0b2      	b.n	100092d0 <mpu_set_sensors+0x1a4>
1000916a:	e00b      	b.n	10009184 <mpu_set_sensors+0x58>
1000916c:	4b64      	ldr	r3, [pc, #400]	; (10009300 <mpu_set_sensors+0x1d4>)
1000916e:	681a      	ldr	r2, [r3, #0]
10009170:	7d51      	ldrb	r1, [r2, #21]
10009172:	685b      	ldr	r3, [r3, #4]
10009174:	7818      	ldrb	r0, [r3, #0]
10009176:	466b      	mov	r3, sp
10009178:	3307      	adds	r3, #7
1000917a:	2201      	movs	r2, #1
1000917c:	4d61      	ldr	r5, [pc, #388]	; (10009304 <mpu_set_sensors+0x1d8>)
1000917e:	47a8      	blx	r5
10009180:	2800      	cmp	r0, #0
10009182:	d005      	beq.n	10009190 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009184:	2200      	movs	r2, #0
10009186:	4b5e      	ldr	r3, [pc, #376]	; (10009300 <mpu_set_sensors+0x1d4>)
10009188:	729a      	strb	r2, [r3, #10]
        return -1;
1000918a:	2501      	movs	r5, #1
1000918c:	426d      	negs	r5, r5
1000918e:	e0b4      	b.n	100092fa <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009190:	466b      	mov	r3, sp
10009192:	1dda      	adds	r2, r3, #7
10009194:	79db      	ldrb	r3, [r3, #7]
10009196:	2140      	movs	r1, #64	; 0x40
10009198:	438b      	bics	r3, r1
1000919a:	4959      	ldr	r1, [pc, #356]	; (10009300 <mpu_set_sensors+0x1d4>)
1000919c:	730b      	strb	r3, [r1, #12]

    data = 0;
1000919e:	2300      	movs	r3, #0
100091a0:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
100091a2:	0663      	lsls	r3, r4, #25
100091a4:	d402      	bmi.n	100091ac <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
100091a6:	2204      	movs	r2, #4
100091a8:	466b      	mov	r3, sp
100091aa:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
100091ac:	06a3      	lsls	r3, r4, #26
100091ae:	d405      	bmi.n	100091bc <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
100091b0:	466b      	mov	r3, sp
100091b2:	1dda      	adds	r2, r3, #7
100091b4:	79d9      	ldrb	r1, [r3, #7]
100091b6:	2302      	movs	r3, #2
100091b8:	430b      	orrs	r3, r1
100091ba:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
100091bc:	06e3      	lsls	r3, r4, #27
100091be:	d405      	bmi.n	100091cc <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
100091c0:	466b      	mov	r3, sp
100091c2:	1dda      	adds	r2, r3, #7
100091c4:	79d9      	ldrb	r1, [r3, #7]
100091c6:	2301      	movs	r3, #1
100091c8:	430b      	orrs	r3, r1
100091ca:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
100091cc:	0723      	lsls	r3, r4, #28
100091ce:	d405      	bmi.n	100091dc <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
100091d0:	466b      	mov	r3, sp
100091d2:	1dda      	adds	r2, r3, #7
100091d4:	79d9      	ldrb	r1, [r3, #7]
100091d6:	2338      	movs	r3, #56	; 0x38
100091d8:	430b      	orrs	r3, r1
100091da:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
100091dc:	4b48      	ldr	r3, [pc, #288]	; (10009300 <mpu_set_sensors+0x1d4>)
100091de:	681a      	ldr	r2, [r3, #0]
100091e0:	7d91      	ldrb	r1, [r2, #22]
100091e2:	685b      	ldr	r3, [r3, #4]
100091e4:	7818      	ldrb	r0, [r3, #0]
100091e6:	466b      	mov	r3, sp
100091e8:	3307      	adds	r3, #7
100091ea:	2201      	movs	r2, #1
100091ec:	4d45      	ldr	r5, [pc, #276]	; (10009304 <mpu_set_sensors+0x1d8>)
100091ee:	47a8      	blx	r5
100091f0:	2800      	cmp	r0, #0
100091f2:	d005      	beq.n	10009200 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
100091f4:	2200      	movs	r2, #0
100091f6:	4b42      	ldr	r3, [pc, #264]	; (10009300 <mpu_set_sensors+0x1d4>)
100091f8:	729a      	strb	r2, [r3, #10]
        return -1;
100091fa:	2501      	movs	r5, #1
100091fc:	426d      	negs	r5, r5
100091fe:	e07c      	b.n	100092fa <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10009200:	2308      	movs	r3, #8
10009202:	0022      	movs	r2, r4
10009204:	439a      	bics	r2, r3
10009206:	d06b      	beq.n	100092e0 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10009208:	2000      	movs	r0, #0
1000920a:	4b3f      	ldr	r3, [pc, #252]	; (10009308 <mpu_set_sensors+0x1dc>)
1000920c:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000920e:	4b3c      	ldr	r3, [pc, #240]	; (10009300 <mpu_set_sensors+0x1d4>)
10009210:	681a      	ldr	r2, [r3, #0]
10009212:	7911      	ldrb	r1, [r2, #4]
10009214:	685b      	ldr	r3, [r3, #4]
10009216:	7818      	ldrb	r0, [r3, #0]
10009218:	466b      	mov	r3, sp
1000921a:	3306      	adds	r3, #6
1000921c:	2201      	movs	r2, #1
1000921e:	4d3b      	ldr	r5, [pc, #236]	; (1000930c <mpu_set_sensors+0x1e0>)
10009220:	47a8      	blx	r5
10009222:	2800      	cmp	r0, #0
10009224:	d148      	bne.n	100092b8 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10009226:	07e3      	lsls	r3, r4, #31
10009228:	d509      	bpl.n	1000923e <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
1000922a:	2211      	movs	r2, #17
1000922c:	466b      	mov	r3, sp
1000922e:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10009230:	466b      	mov	r3, sp
10009232:	1d9a      	adds	r2, r3, #6
10009234:	7999      	ldrb	r1, [r3, #6]
10009236:	2320      	movs	r3, #32
10009238:	430b      	orrs	r3, r1
1000923a:	7013      	strb	r3, [r2, #0]
1000923c:	e008      	b.n	10009250 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
1000923e:	2210      	movs	r2, #16
10009240:	466b      	mov	r3, sp
10009242:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009244:	466b      	mov	r3, sp
10009246:	1d9a      	adds	r2, r3, #6
10009248:	799b      	ldrb	r3, [r3, #6]
1000924a:	2120      	movs	r1, #32
1000924c:	438b      	bics	r3, r1
1000924e:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10009250:	2324      	movs	r3, #36	; 0x24
10009252:	4a2b      	ldr	r2, [pc, #172]	; (10009300 <mpu_set_sensors+0x1d4>)
10009254:	5cd3      	ldrb	r3, [r2, r3]
10009256:	2b00      	cmp	r3, #0
10009258:	d007      	beq.n	1000926a <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
1000925a:	466b      	mov	r3, sp
1000925c:	1d9a      	adds	r2, r3, #6
1000925e:	799b      	ldrb	r3, [r3, #6]
10009260:	2180      	movs	r1, #128	; 0x80
10009262:	4249      	negs	r1, r1
10009264:	430b      	orrs	r3, r1
10009266:	7013      	strb	r3, [r2, #0]
10009268:	e005      	b.n	10009276 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
1000926a:	466b      	mov	r3, sp
1000926c:	1d9a      	adds	r2, r3, #6
1000926e:	799b      	ldrb	r3, [r3, #6]
10009270:	217f      	movs	r1, #127	; 0x7f
10009272:	400b      	ands	r3, r1
10009274:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009276:	4b22      	ldr	r3, [pc, #136]	; (10009300 <mpu_set_sensors+0x1d4>)
10009278:	2226      	movs	r2, #38	; 0x26
1000927a:	6819      	ldr	r1, [r3, #0]
1000927c:	5c89      	ldrb	r1, [r1, r2]
1000927e:	685b      	ldr	r3, [r3, #4]
10009280:	7818      	ldrb	r0, [r3, #0]
10009282:	466b      	mov	r3, sp
10009284:	3307      	adds	r3, #7
10009286:	3a25      	subs	r2, #37	; 0x25
10009288:	4d1e      	ldr	r5, [pc, #120]	; (10009304 <mpu_set_sensors+0x1d8>)
1000928a:	47a8      	blx	r5
1000928c:	2800      	cmp	r0, #0
1000928e:	d116      	bne.n	100092be <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009290:	4b1b      	ldr	r3, [pc, #108]	; (10009300 <mpu_set_sensors+0x1d4>)
10009292:	681a      	ldr	r2, [r3, #0]
10009294:	7911      	ldrb	r1, [r2, #4]
10009296:	685b      	ldr	r3, [r3, #4]
10009298:	7818      	ldrb	r0, [r3, #0]
1000929a:	466b      	mov	r3, sp
1000929c:	3306      	adds	r3, #6
1000929e:	2201      	movs	r2, #1
100092a0:	4d18      	ldr	r5, [pc, #96]	; (10009304 <mpu_set_sensors+0x1d8>)
100092a2:	47a8      	blx	r5
100092a4:	1e05      	subs	r5, r0, #0
100092a6:	d10d      	bne.n	100092c4 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
100092a8:	4b15      	ldr	r3, [pc, #84]	; (10009300 <mpu_set_sensors+0x1d4>)
100092aa:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
100092ac:	2200      	movs	r2, #0
100092ae:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
100092b0:	2032      	movs	r0, #50	; 0x32
100092b2:	4b17      	ldr	r3, [pc, #92]	; (10009310 <mpu_set_sensors+0x1e4>)
100092b4:	4798      	blx	r3
    return 0;
100092b6:	e020      	b.n	100092fa <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092b8:	2501      	movs	r5, #1
100092ba:	426d      	negs	r5, r5
100092bc:	e01d      	b.n	100092fa <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
100092be:	2501      	movs	r5, #1
100092c0:	426d      	negs	r5, r5
100092c2:	e01a      	b.n	100092fa <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092c4:	2501      	movs	r5, #1
100092c6:	426d      	negs	r5, r5
100092c8:	e017      	b.n	100092fa <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092ca:	2501      	movs	r5, #1
100092cc:	426d      	negs	r5, r5
100092ce:	e014      	b.n	100092fa <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
100092d0:	466b      	mov	r3, sp
100092d2:	3307      	adds	r3, #7
100092d4:	781b      	ldrb	r3, [r3, #0]
100092d6:	2240      	movs	r2, #64	; 0x40
100092d8:	4393      	bics	r3, r2
100092da:	4a09      	ldr	r2, [pc, #36]	; (10009300 <mpu_set_sensors+0x1d4>)
100092dc:	7313      	strb	r3, [r2, #12]
100092de:	e762      	b.n	100091a6 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092e0:	4b07      	ldr	r3, [pc, #28]	; (10009300 <mpu_set_sensors+0x1d4>)
100092e2:	681a      	ldr	r2, [r3, #0]
100092e4:	7911      	ldrb	r1, [r2, #4]
100092e6:	685b      	ldr	r3, [r3, #4]
100092e8:	7818      	ldrb	r0, [r3, #0]
100092ea:	466b      	mov	r3, sp
100092ec:	3306      	adds	r3, #6
100092ee:	2201      	movs	r2, #1
100092f0:	4d06      	ldr	r5, [pc, #24]	; (1000930c <mpu_set_sensors+0x1e0>)
100092f2:	47a8      	blx	r5
100092f4:	2800      	cmp	r0, #0
100092f6:	d0a2      	beq.n	1000923e <mpu_set_sensors+0x112>
100092f8:	e7e7      	b.n	100092ca <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
100092fa:	0028      	movs	r0, r5
100092fc:	b003      	add	sp, #12
100092fe:	bd30      	pop	{r4, r5, pc}
10009300:	10017068 	.word	0x10017068
10009304:	1000a951 	.word	0x1000a951
10009308:	10008e9d 	.word	0x10008e9d
1000930c:	1000a9ad 	.word	0x1000a9ad
10009310:	10008129 	.word	0x10008129

10009314 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009314:	b530      	push	{r4, r5, lr}
10009316:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009318:	ab02      	add	r3, sp, #8
1000931a:	2280      	movs	r2, #128	; 0x80
1000931c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000931e:	4ab9      	ldr	r2, [pc, #740]	; (10009604 <mpu_init+0x2f0>)
10009320:	6811      	ldr	r1, [r2, #0]
10009322:	7d49      	ldrb	r1, [r1, #21]
10009324:	6852      	ldr	r2, [r2, #4]
10009326:	7810      	ldrb	r0, [r2, #0]
10009328:	2201      	movs	r2, #1
1000932a:	4cb7      	ldr	r4, [pc, #732]	; (10009608 <mpu_init+0x2f4>)
1000932c:	47a0      	blx	r4
1000932e:	2800      	cmp	r0, #0
10009330:	d000      	beq.n	10009334 <mpu_init+0x20>
10009332:	e149      	b.n	100095c8 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009334:	3064      	adds	r0, #100	; 0x64
10009336:	4bb5      	ldr	r3, [pc, #724]	; (1000960c <mpu_init+0x2f8>)
10009338:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
1000933a:	ab02      	add	r3, sp, #8
1000933c:	2200      	movs	r2, #0
1000933e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009340:	4ab0      	ldr	r2, [pc, #704]	; (10009604 <mpu_init+0x2f0>)
10009342:	6811      	ldr	r1, [r2, #0]
10009344:	7d49      	ldrb	r1, [r1, #21]
10009346:	6852      	ldr	r2, [r2, #4]
10009348:	7810      	ldrb	r0, [r2, #0]
1000934a:	2201      	movs	r2, #1
1000934c:	4cae      	ldr	r4, [pc, #696]	; (10009608 <mpu_init+0x2f4>)
1000934e:	47a0      	blx	r4
10009350:	2800      	cmp	r0, #0
10009352:	d000      	beq.n	10009356 <mpu_init+0x42>
10009354:	e13b      	b.n	100095ce <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
10009356:	4aab      	ldr	r2, [pc, #684]	; (10009604 <mpu_init+0x2f0>)
10009358:	2300      	movs	r3, #0
1000935a:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
1000935c:	ab02      	add	r3, sp, #8
1000935e:	2140      	movs	r1, #64	; 0x40
10009360:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009362:	6811      	ldr	r1, [r2, #0]
10009364:	7a09      	ldrb	r1, [r1, #8]
10009366:	6852      	ldr	r2, [r2, #4]
10009368:	7810      	ldrb	r0, [r2, #0]
1000936a:	2201      	movs	r2, #1
1000936c:	4ca6      	ldr	r4, [pc, #664]	; (10009608 <mpu_init+0x2f4>)
1000936e:	47a0      	blx	r4
10009370:	2800      	cmp	r0, #0
10009372:	d000      	beq.n	10009376 <mpu_init+0x62>
10009374:	e12e      	b.n	100095d4 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009376:	4ca3      	ldr	r4, [pc, #652]	; (10009604 <mpu_init+0x2f0>)
10009378:	23ff      	movs	r3, #255	; 0xff
1000937a:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1000937c:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000937e:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009380:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009382:	2201      	movs	r2, #1
10009384:	4252      	negs	r2, r2
10009386:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009388:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1000938a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1000938c:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000938e:	3bfe      	subs	r3, #254	; 0xfe
10009390:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009392:	2500      	movs	r5, #0
10009394:	3321      	adds	r3, #33	; 0x21
10009396:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009398:	3301      	adds	r3, #1
1000939a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
1000939c:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000939e:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100093a0:	0020      	movs	r0, r4
100093a2:	3016      	adds	r0, #22
100093a4:	320d      	adds	r2, #13
100093a6:	2100      	movs	r1, #0
100093a8:	4b99      	ldr	r3, [pc, #612]	; (10009610 <mpu_init+0x2fc>)
100093aa:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100093ac:	2324      	movs	r3, #36	; 0x24
100093ae:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100093b0:	3301      	adds	r3, #1
100093b2:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
100093b4:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
100093b6:	20fa      	movs	r0, #250	; 0xfa
100093b8:	00c0      	lsls	r0, r0, #3
100093ba:	4b96      	ldr	r3, [pc, #600]	; (10009614 <mpu_init+0x300>)
100093bc:	4798      	blx	r3
100093be:	2800      	cmp	r0, #0
100093c0:	d000      	beq.n	100093c4 <mpu_init+0xb0>
100093c2:	e10a      	b.n	100095da <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
100093c4:	3002      	adds	r0, #2
100093c6:	4b94      	ldr	r3, [pc, #592]	; (10009618 <mpu_init+0x304>)
100093c8:	4798      	blx	r3
100093ca:	2800      	cmp	r0, #0
100093cc:	d000      	beq.n	100093d0 <mpu_init+0xbc>
100093ce:	e107      	b.n	100095e0 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100093d0:	302a      	adds	r0, #42	; 0x2a
100093d2:	4b92      	ldr	r3, [pc, #584]	; (1000961c <mpu_init+0x308>)
100093d4:	4798      	blx	r3
100093d6:	2800      	cmp	r0, #0
100093d8:	d000      	beq.n	100093dc <mpu_init+0xc8>
100093da:	e104      	b.n	100095e6 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100093dc:	3032      	adds	r0, #50	; 0x32
100093de:	4b90      	ldr	r3, [pc, #576]	; (10009620 <mpu_init+0x30c>)
100093e0:	4798      	blx	r3
100093e2:	2800      	cmp	r0, #0
100093e4:	d000      	beq.n	100093e8 <mpu_init+0xd4>
100093e6:	e101      	b.n	100095ec <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
100093e8:	4b8e      	ldr	r3, [pc, #568]	; (10009624 <mpu_init+0x310>)
100093ea:	4798      	blx	r3
100093ec:	2800      	cmp	r0, #0
100093ee:	d000      	beq.n	100093f2 <mpu_init+0xde>
100093f0:	e0ff      	b.n	100095f2 <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100093f2:	3001      	adds	r0, #1
100093f4:	4b8c      	ldr	r3, [pc, #560]	; (10009628 <mpu_init+0x314>)
100093f6:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093f8:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100093fa:	4d8c      	ldr	r5, [pc, #560]	; (1000962c <mpu_init+0x318>)
100093fc:	ab01      	add	r3, sp, #4
100093fe:	2201      	movs	r2, #1
10009400:	2100      	movs	r1, #0
10009402:	0020      	movs	r0, r4
10009404:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
10009406:	2800      	cmp	r0, #0
10009408:	d103      	bne.n	10009412 <mpu_init+0xfe>
1000940a:	466b      	mov	r3, sp
1000940c:	791b      	ldrb	r3, [r3, #4]
1000940e:	2b48      	cmp	r3, #72	; 0x48
10009410:	d004      	beq.n	1000941c <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009412:	3401      	adds	r4, #1
10009414:	b2e4      	uxtb	r4, r4
10009416:	2c10      	cmp	r4, #16
10009418:	d1f0      	bne.n	100093fc <mpu_init+0xe8>
1000941a:	e001      	b.n	10009420 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
1000941c:	2c0f      	cmp	r4, #15
1000941e:	d905      	bls.n	1000942c <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009420:	4883      	ldr	r0, [pc, #524]	; (10009630 <mpu_init+0x31c>)
10009422:	4c84      	ldr	r4, [pc, #528]	; (10009634 <mpu_init+0x320>)
10009424:	47a0      	blx	r4
10009426:	4884      	ldr	r0, [pc, #528]	; (10009638 <mpu_init+0x324>)
10009428:	47a0      	blx	r4
1000942a:	e0c4      	b.n	100095b6 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
1000942c:	232a      	movs	r3, #42	; 0x2a
1000942e:	4a75      	ldr	r2, [pc, #468]	; (10009604 <mpu_init+0x2f0>)
10009430:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009432:	ab01      	add	r3, sp, #4
10009434:	2210      	movs	r2, #16
10009436:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009438:	3a0f      	subs	r2, #15
1000943a:	210a      	movs	r1, #10
1000943c:	0020      	movs	r0, r4
1000943e:	4c72      	ldr	r4, [pc, #456]	; (10009608 <mpu_init+0x2f4>)
10009440:	47a0      	blx	r4
10009442:	2800      	cmp	r0, #0
10009444:	d000      	beq.n	10009448 <mpu_init+0x134>
10009446:	e0b6      	b.n	100095b6 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009448:	3001      	adds	r0, #1
1000944a:	4b70      	ldr	r3, [pc, #448]	; (1000960c <mpu_init+0x2f8>)
1000944c:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000944e:	ab01      	add	r3, sp, #4
10009450:	221f      	movs	r2, #31
10009452:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009454:	320b      	adds	r2, #11
10009456:	496b      	ldr	r1, [pc, #428]	; (10009604 <mpu_init+0x2f0>)
10009458:	5c88      	ldrb	r0, [r1, r2]
1000945a:	3a29      	subs	r2, #41	; 0x29
1000945c:	210a      	movs	r1, #10
1000945e:	4c6a      	ldr	r4, [pc, #424]	; (10009608 <mpu_init+0x2f4>)
10009460:	47a0      	blx	r4
10009462:	2800      	cmp	r0, #0
10009464:	d000      	beq.n	10009468 <mpu_init+0x154>
10009466:	e0a6      	b.n	100095b6 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009468:	3001      	adds	r0, #1
1000946a:	4b68      	ldr	r3, [pc, #416]	; (1000960c <mpu_init+0x2f8>)
1000946c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000946e:	232a      	movs	r3, #42	; 0x2a
10009470:	4a64      	ldr	r2, [pc, #400]	; (10009604 <mpu_init+0x2f0>)
10009472:	5cd0      	ldrb	r0, [r2, r3]
10009474:	ab01      	add	r3, sp, #4
10009476:	2203      	movs	r2, #3
10009478:	2110      	movs	r1, #16
1000947a:	4c6c      	ldr	r4, [pc, #432]	; (1000962c <mpu_init+0x318>)
1000947c:	47a0      	blx	r4
1000947e:	2800      	cmp	r0, #0
10009480:	d000      	beq.n	10009484 <mpu_init+0x170>
10009482:	e098      	b.n	100095b6 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009484:	4a5f      	ldr	r2, [pc, #380]	; (10009604 <mpu_init+0x2f0>)
10009486:	ab01      	add	r3, sp, #4
10009488:	7819      	ldrb	r1, [r3, #0]
1000948a:	3180      	adds	r1, #128	; 0x80
1000948c:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000948e:	7859      	ldrb	r1, [r3, #1]
10009490:	3180      	adds	r1, #128	; 0x80
10009492:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009494:	7899      	ldrb	r1, [r3, #2]
10009496:	3180      	adds	r1, #128	; 0x80
10009498:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000949a:	2110      	movs	r1, #16
1000949c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000949e:	311a      	adds	r1, #26
100094a0:	5c50      	ldrb	r0, [r2, r1]
100094a2:	2201      	movs	r2, #1
100094a4:	3920      	subs	r1, #32
100094a6:	4c58      	ldr	r4, [pc, #352]	; (10009608 <mpu_init+0x2f4>)
100094a8:	47a0      	blx	r4
100094aa:	2800      	cmp	r0, #0
100094ac:	d000      	beq.n	100094b0 <mpu_init+0x19c>
100094ae:	e082      	b.n	100095b6 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100094b0:	3001      	adds	r0, #1
100094b2:	4b56      	ldr	r3, [pc, #344]	; (1000960c <mpu_init+0x2f8>)
100094b4:	4798      	blx	r3

    mpu_set_bypass(0);
100094b6:	2000      	movs	r0, #0
100094b8:	4b5b      	ldr	r3, [pc, #364]	; (10009628 <mpu_init+0x314>)
100094ba:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100094bc:	ab01      	add	r3, sp, #4
100094be:	2240      	movs	r2, #64	; 0x40
100094c0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100094c2:	4a50      	ldr	r2, [pc, #320]	; (10009604 <mpu_init+0x2f0>)
100094c4:	6811      	ldr	r1, [r2, #0]
100094c6:	7e89      	ldrb	r1, [r1, #26]
100094c8:	6852      	ldr	r2, [r2, #4]
100094ca:	7810      	ldrb	r0, [r2, #0]
100094cc:	2201      	movs	r2, #1
100094ce:	4c4e      	ldr	r4, [pc, #312]	; (10009608 <mpu_init+0x2f4>)
100094d0:	47a0      	blx	r4
100094d2:	2800      	cmp	r0, #0
100094d4:	d16f      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100094d6:	ab01      	add	r3, sp, #4
100094d8:	4a4a      	ldr	r2, [pc, #296]	; (10009604 <mpu_init+0x2f0>)
100094da:	212a      	movs	r1, #42	; 0x2a
100094dc:	5c51      	ldrb	r1, [r2, r1]
100094de:	3880      	subs	r0, #128	; 0x80
100094e0:	4301      	orrs	r1, r0
100094e2:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100094e4:	6811      	ldr	r1, [r2, #0]
100094e6:	7f89      	ldrb	r1, [r1, #30]
100094e8:	6852      	ldr	r2, [r2, #4]
100094ea:	7810      	ldrb	r0, [r2, #0]
100094ec:	2201      	movs	r2, #1
100094ee:	4c46      	ldr	r4, [pc, #280]	; (10009608 <mpu_init+0x2f4>)
100094f0:	47a0      	blx	r4
100094f2:	2800      	cmp	r0, #0
100094f4:	d15f      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100094f6:	ab01      	add	r3, sp, #4
100094f8:	2202      	movs	r2, #2
100094fa:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100094fc:	4a41      	ldr	r2, [pc, #260]	; (10009604 <mpu_init+0x2f0>)
100094fe:	6811      	ldr	r1, [r2, #0]
10009500:	7fc9      	ldrb	r1, [r1, #31]
10009502:	6852      	ldr	r2, [r2, #4]
10009504:	7810      	ldrb	r0, [r2, #0]
10009506:	2201      	movs	r2, #1
10009508:	4c3f      	ldr	r4, [pc, #252]	; (10009608 <mpu_init+0x2f4>)
1000950a:	47a0      	blx	r4
1000950c:	2800      	cmp	r0, #0
1000950e:	d152      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009510:	ab01      	add	r3, sp, #4
10009512:	2288      	movs	r2, #136	; 0x88
10009514:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009516:	4a3b      	ldr	r2, [pc, #236]	; (10009604 <mpu_init+0x2f0>)
10009518:	2120      	movs	r1, #32
1000951a:	6810      	ldr	r0, [r2, #0]
1000951c:	5c41      	ldrb	r1, [r0, r1]
1000951e:	6852      	ldr	r2, [r2, #4]
10009520:	7810      	ldrb	r0, [r2, #0]
10009522:	2201      	movs	r2, #1
10009524:	4c38      	ldr	r4, [pc, #224]	; (10009608 <mpu_init+0x2f4>)
10009526:	47a0      	blx	r4
10009528:	2800      	cmp	r0, #0
1000952a:	d144      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000952c:	ab01      	add	r3, sp, #4
1000952e:	4a35      	ldr	r2, [pc, #212]	; (10009604 <mpu_init+0x2f0>)
10009530:	212a      	movs	r1, #42	; 0x2a
10009532:	5c51      	ldrb	r1, [r2, r1]
10009534:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009536:	2121      	movs	r1, #33	; 0x21
10009538:	6810      	ldr	r0, [r2, #0]
1000953a:	5c41      	ldrb	r1, [r0, r1]
1000953c:	6852      	ldr	r2, [r2, #4]
1000953e:	7810      	ldrb	r0, [r2, #0]
10009540:	2201      	movs	r2, #1
10009542:	4c31      	ldr	r4, [pc, #196]	; (10009608 <mpu_init+0x2f4>)
10009544:	47a0      	blx	r4
10009546:	2800      	cmp	r0, #0
10009548:	d135      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000954a:	ab01      	add	r3, sp, #4
1000954c:	220a      	movs	r2, #10
1000954e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009550:	4a2c      	ldr	r2, [pc, #176]	; (10009604 <mpu_init+0x2f0>)
10009552:	2122      	movs	r1, #34	; 0x22
10009554:	6810      	ldr	r0, [r2, #0]
10009556:	5c41      	ldrb	r1, [r0, r1]
10009558:	6852      	ldr	r2, [r2, #4]
1000955a:	7810      	ldrb	r0, [r2, #0]
1000955c:	2201      	movs	r2, #1
1000955e:	4c2a      	ldr	r4, [pc, #168]	; (10009608 <mpu_init+0x2f4>)
10009560:	47a0      	blx	r4
10009562:	2800      	cmp	r0, #0
10009564:	d127      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009566:	ab01      	add	r3, sp, #4
10009568:	2281      	movs	r2, #129	; 0x81
1000956a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000956c:	4a25      	ldr	r2, [pc, #148]	; (10009604 <mpu_init+0x2f0>)
1000956e:	2123      	movs	r1, #35	; 0x23
10009570:	6810      	ldr	r0, [r2, #0]
10009572:	5c41      	ldrb	r1, [r0, r1]
10009574:	6852      	ldr	r2, [r2, #4]
10009576:	7810      	ldrb	r0, [r2, #0]
10009578:	2201      	movs	r2, #1
1000957a:	4c23      	ldr	r4, [pc, #140]	; (10009608 <mpu_init+0x2f4>)
1000957c:	47a0      	blx	r4
1000957e:	2800      	cmp	r0, #0
10009580:	d119      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009582:	ab01      	add	r3, sp, #4
10009584:	2211      	movs	r2, #17
10009586:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009588:	4a1e      	ldr	r2, [pc, #120]	; (10009604 <mpu_init+0x2f0>)
1000958a:	2126      	movs	r1, #38	; 0x26
1000958c:	6810      	ldr	r0, [r2, #0]
1000958e:	5c41      	ldrb	r1, [r0, r1]
10009590:	6852      	ldr	r2, [r2, #4]
10009592:	7810      	ldrb	r0, [r2, #0]
10009594:	2201      	movs	r2, #1
10009596:	4c1c      	ldr	r4, [pc, #112]	; (10009608 <mpu_init+0x2f4>)
10009598:	47a0      	blx	r4
1000959a:	2800      	cmp	r0, #0
1000959c:	d10b      	bne.n	100095b6 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000959e:	ab01      	add	r3, sp, #4
100095a0:	2203      	movs	r2, #3
100095a2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100095a4:	4a17      	ldr	r2, [pc, #92]	; (10009604 <mpu_init+0x2f0>)
100095a6:	2127      	movs	r1, #39	; 0x27
100095a8:	6810      	ldr	r0, [r2, #0]
100095aa:	5c41      	ldrb	r1, [r0, r1]
100095ac:	6852      	ldr	r2, [r2, #4]
100095ae:	7810      	ldrb	r0, [r2, #0]
100095b0:	2201      	movs	r2, #1
100095b2:	4c15      	ldr	r4, [pc, #84]	; (10009608 <mpu_init+0x2f4>)
100095b4:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
100095b6:	200a      	movs	r0, #10
100095b8:	4b20      	ldr	r3, [pc, #128]	; (1000963c <mpu_init+0x328>)
100095ba:	4798      	blx	r3
100095bc:	1e04      	subs	r4, r0, #0
100095be:	d11b      	bne.n	100095f8 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100095c0:	2000      	movs	r0, #0
100095c2:	4b1f      	ldr	r3, [pc, #124]	; (10009640 <mpu_init+0x32c>)
100095c4:	4798      	blx	r3
    return 0;
100095c6:	e019      	b.n	100095fc <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100095c8:	2401      	movs	r4, #1
100095ca:	4264      	negs	r4, r4
100095cc:	e016      	b.n	100095fc <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100095ce:	2401      	movs	r4, #1
100095d0:	4264      	negs	r4, r4
100095d2:	e013      	b.n	100095fc <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100095d4:	2401      	movs	r4, #1
100095d6:	4264      	negs	r4, r4
100095d8:	e010      	b.n	100095fc <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
        return -1;
100095da:	2401      	movs	r4, #1
100095dc:	4264      	negs	r4, r4
100095de:	e00d      	b.n	100095fc <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
        return -1;
100095e0:	2401      	movs	r4, #1
100095e2:	4264      	negs	r4, r4
100095e4:	e00a      	b.n	100095fc <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100095e6:	2401      	movs	r4, #1
100095e8:	4264      	negs	r4, r4
100095ea:	e007      	b.n	100095fc <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
100095ec:	2401      	movs	r4, #1
100095ee:	4264      	negs	r4, r4
100095f0:	e004      	b.n	100095fc <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
100095f2:	2401      	movs	r4, #1
100095f4:	4264      	negs	r4, r4
100095f6:	e001      	b.n	100095fc <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100095f8:	2401      	movs	r4, #1
100095fa:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100095fc:	0020      	movs	r0, r4
100095fe:	b005      	add	sp, #20
10009600:	bd30      	pop	{r4, r5, pc}
10009602:	46c0      	nop			; (mov r8, r8)
10009604:	10017068 	.word	0x10017068
10009608:	1000a951 	.word	0x1000a951
1000960c:	10008129 	.word	0x10008129
10009610:	100148f1 	.word	0x100148f1
10009614:	10008819 	.word	0x10008819
10009618:	10008905 	.word	0x10008905
1000961c:	10008999 	.word	0x10008999
10009620:	10009059 	.word	0x10009059
10009624:	10008ae9 	.word	0x10008ae9
10009628:	10008d21 	.word	0x10008d21
1000962c:	1000a9ad 	.word	0x1000a9ad
10009630:	10015d04 	.word	0x10015d04
10009634:	10014b59 	.word	0x10014b59
10009638:	10015b74 	.word	0x10015b74
1000963c:	10008a71 	.word	0x10008a71
10009640:	1000912d 	.word	0x1000912d

10009644 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009644:	b570      	push	{r4, r5, r6, lr}
10009646:	b082      	sub	sp, #8
10009648:	000c      	movs	r4, r1
1000964a:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
1000964c:	d025      	beq.n	1000969a <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000964e:	4b19      	ldr	r3, [pc, #100]	; (100096b4 <mpu_write_mem+0x70>)
10009650:	7a9b      	ldrb	r3, [r3, #10]
10009652:	2b00      	cmp	r3, #0
10009654:	d024      	beq.n	100096a0 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009656:	ab01      	add	r3, sp, #4
10009658:	0a02      	lsrs	r2, r0, #8
1000965a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000965c:	b2c0      	uxtb	r0, r0
1000965e:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009660:	4b14      	ldr	r3, [pc, #80]	; (100096b4 <mpu_write_mem+0x70>)
10009662:	685b      	ldr	r3, [r3, #4]
10009664:	1840      	adds	r0, r0, r1
10009666:	895a      	ldrh	r2, [r3, #10]
10009668:	4290      	cmp	r0, r2
1000966a:	dc1c      	bgt.n	100096a6 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000966c:	4a11      	ldr	r2, [pc, #68]	; (100096b4 <mpu_write_mem+0x70>)
1000966e:	6812      	ldr	r2, [r2, #0]
10009670:	7ed1      	ldrb	r1, [r2, #27]
10009672:	7818      	ldrb	r0, [r3, #0]
10009674:	ab01      	add	r3, sp, #4
10009676:	2202      	movs	r2, #2
10009678:	4e0f      	ldr	r6, [pc, #60]	; (100096b8 <mpu_write_mem+0x74>)
1000967a:	47b0      	blx	r6
1000967c:	2800      	cmp	r0, #0
1000967e:	d115      	bne.n	100096ac <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009680:	b2e2      	uxtb	r2, r4
10009682:	4b0c      	ldr	r3, [pc, #48]	; (100096b4 <mpu_write_mem+0x70>)
10009684:	6819      	ldr	r1, [r3, #0]
10009686:	7e09      	ldrb	r1, [r1, #24]
10009688:	685b      	ldr	r3, [r3, #4]
1000968a:	7818      	ldrb	r0, [r3, #0]
1000968c:	002b      	movs	r3, r5
1000968e:	4c0a      	ldr	r4, [pc, #40]	; (100096b8 <mpu_write_mem+0x74>)
10009690:	47a0      	blx	r4
10009692:	1e43      	subs	r3, r0, #1
10009694:	4198      	sbcs	r0, r3
10009696:	4240      	negs	r0, r0
10009698:	e00a      	b.n	100096b0 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000969a:	2001      	movs	r0, #1
1000969c:	4240      	negs	r0, r0
1000969e:	e007      	b.n	100096b0 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
100096a0:	2001      	movs	r0, #1
100096a2:	4240      	negs	r0, r0
100096a4:	e004      	b.n	100096b0 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
100096a6:	2001      	movs	r0, #1
100096a8:	4240      	negs	r0, r0
100096aa:	e001      	b.n	100096b0 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
100096ac:	2001      	movs	r0, #1
100096ae:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
100096b0:	b002      	add	sp, #8
100096b2:	bd70      	pop	{r4, r5, r6, pc}
100096b4:	10017068 	.word	0x10017068
100096b8:	1000a951 	.word	0x1000a951

100096bc <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100096bc:	b570      	push	{r4, r5, r6, lr}
100096be:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100096c0:	2324      	movs	r3, #36	; 0x24
100096c2:	4a21      	ldr	r2, [pc, #132]	; (10009748 <mpu_set_dmp_state+0x8c>)
100096c4:	5cd3      	ldrb	r3, [r2, r3]
100096c6:	4283      	cmp	r3, r0
100096c8:	d037      	beq.n	1000973a <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
100096ca:	2800      	cmp	r0, #0
100096cc:	d020      	beq.n	10009710 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
100096ce:	2325      	movs	r3, #37	; 0x25
100096d0:	5cd3      	ldrb	r3, [r2, r3]
100096d2:	2b00      	cmp	r3, #0
100096d4:	d033      	beq.n	1000973e <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100096d6:	2000      	movs	r0, #0
100096d8:	4d1c      	ldr	r5, [pc, #112]	; (1000974c <mpu_set_dmp_state+0x90>)
100096da:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100096dc:	2000      	movs	r0, #0
100096de:	4b1c      	ldr	r3, [pc, #112]	; (10009750 <mpu_set_dmp_state+0x94>)
100096e0:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100096e2:	4c19      	ldr	r4, [pc, #100]	; (10009748 <mpu_set_dmp_state+0x8c>)
100096e4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100096e6:	4b1b      	ldr	r3, [pc, #108]	; (10009754 <mpu_set_dmp_state+0x98>)
100096e8:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100096ea:	466b      	mov	r3, sp
100096ec:	3307      	adds	r3, #7
100096ee:	2200      	movs	r2, #0
100096f0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096f2:	6862      	ldr	r2, [r4, #4]
100096f4:	7810      	ldrb	r0, [r2, #0]
100096f6:	2201      	movs	r2, #1
100096f8:	2123      	movs	r1, #35	; 0x23
100096fa:	4e17      	ldr	r6, [pc, #92]	; (10009758 <mpu_set_dmp_state+0x9c>)
100096fc:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
100096fe:	2201      	movs	r2, #1
10009700:	2324      	movs	r3, #36	; 0x24
10009702:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009704:	2001      	movs	r0, #1
10009706:	47a8      	blx	r5
        mpu_reset_fifo();
10009708:	4b14      	ldr	r3, [pc, #80]	; (1000975c <mpu_set_dmp_state+0xa0>)
1000970a:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
1000970c:	2000      	movs	r0, #0
1000970e:	e018      	b.n	10009742 <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009710:	2000      	movs	r0, #0
10009712:	4b0e      	ldr	r3, [pc, #56]	; (1000974c <mpu_set_dmp_state+0x90>)
10009714:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
10009716:	466b      	mov	r3, sp
10009718:	3307      	adds	r3, #7
1000971a:	4c0b      	ldr	r4, [pc, #44]	; (10009748 <mpu_set_dmp_state+0x8c>)
1000971c:	7c22      	ldrb	r2, [r4, #16]
1000971e:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009720:	6862      	ldr	r2, [r4, #4]
10009722:	7810      	ldrb	r0, [r2, #0]
10009724:	2201      	movs	r2, #1
10009726:	2123      	movs	r1, #35	; 0x23
10009728:	4d0b      	ldr	r5, [pc, #44]	; (10009758 <mpu_set_dmp_state+0x9c>)
1000972a:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
1000972c:	2200      	movs	r2, #0
1000972e:	2324      	movs	r3, #36	; 0x24
10009730:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
10009732:	4b0a      	ldr	r3, [pc, #40]	; (1000975c <mpu_set_dmp_state+0xa0>)
10009734:	4798      	blx	r3
    }
    return 0;
10009736:	2000      	movs	r0, #0
10009738:	e003      	b.n	10009742 <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
1000973a:	2000      	movs	r0, #0
1000973c:	e001      	b.n	10009742 <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000973e:	2001      	movs	r0, #1
10009740:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
10009742:	b002      	add	sp, #8
10009744:	bd70      	pop	{r4, r5, r6, pc}
10009746:	46c0      	nop			; (mov r8, r8)
10009748:	10017068 	.word	0x10017068
1000974c:	100084c5 	.word	0x100084c5
10009750:	10008d21 	.word	0x10008d21
10009754:	10009059 	.word	0x10009059
10009758:	1000a951 	.word	0x1000a951
1000975c:	10008621 	.word	0x10008621

10009760 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009760:	b5f0      	push	{r4, r5, r6, r7, lr}
10009762:	b085      	sub	sp, #20
10009764:	0006      	movs	r6, r0
10009766:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009768:	4b29      	ldr	r3, [pc, #164]	; (10009810 <mpu_get_compass_reg+0xb0>)
1000976a:	7a9b      	ldrb	r3, [r3, #10]
1000976c:	07db      	lsls	r3, r3, #31
1000976e:	d540      	bpl.n	100097f2 <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009770:	4b27      	ldr	r3, [pc, #156]	; (10009810 <mpu_get_compass_reg+0xb0>)
10009772:	2228      	movs	r2, #40	; 0x28
10009774:	6819      	ldr	r1, [r3, #0]
10009776:	5c89      	ldrb	r1, [r1, r2]
10009778:	685b      	ldr	r3, [r3, #4]
1000977a:	7818      	ldrb	r0, [r3, #0]
1000977c:	ab01      	add	r3, sp, #4
1000977e:	3a20      	subs	r2, #32
10009780:	4c24      	ldr	r4, [pc, #144]	; (10009814 <mpu_get_compass_reg+0xb4>)
10009782:	47a0      	blx	r4
10009784:	1e04      	subs	r4, r0, #0
10009786:	d137      	bne.n	100097f8 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009788:	ab01      	add	r3, sp, #4
1000978a:	781b      	ldrb	r3, [r3, #0]
1000978c:	2203      	movs	r2, #3
1000978e:	4013      	ands	r3, r2
10009790:	2b01      	cmp	r3, #1
10009792:	d134      	bne.n	100097fe <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009794:	ab01      	add	r3, sp, #4
10009796:	79db      	ldrb	r3, [r3, #7]
10009798:	2b7f      	cmp	r3, #127	; 0x7f
1000979a:	d833      	bhi.n	10009804 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1000979c:	a801      	add	r0, sp, #4
1000979e:	7881      	ldrb	r1, [r0, #2]
100097a0:	0209      	lsls	r1, r1, #8
100097a2:	7843      	ldrb	r3, [r0, #1]
100097a4:	4319      	orrs	r1, r3
100097a6:	b209      	sxth	r1, r1
100097a8:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
100097aa:	7902      	ldrb	r2, [r0, #4]
100097ac:	0212      	lsls	r2, r2, #8
100097ae:	78c3      	ldrb	r3, [r0, #3]
100097b0:	431a      	orrs	r2, r3
100097b2:	b212      	sxth	r2, r2
100097b4:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
100097b6:	7983      	ldrb	r3, [r0, #6]
100097b8:	021b      	lsls	r3, r3, #8
100097ba:	7940      	ldrb	r0, [r0, #5]
100097bc:	4303      	orrs	r3, r0
100097be:	b21b      	sxth	r3, r3
100097c0:	469c      	mov	ip, r3
100097c2:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
100097c4:	4812      	ldr	r0, [pc, #72]	; (10009810 <mpu_get_compass_reg+0xb0>)
100097c6:	232c      	movs	r3, #44	; 0x2c
100097c8:	5ec7      	ldrsh	r7, [r0, r3]
100097ca:	4379      	muls	r1, r7
100097cc:	1209      	asrs	r1, r1, #8
100097ce:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100097d0:	232e      	movs	r3, #46	; 0x2e
100097d2:	5ec1      	ldrsh	r1, [r0, r3]
100097d4:	434a      	muls	r2, r1
100097d6:	1212      	asrs	r2, r2, #8
100097d8:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100097da:	2330      	movs	r3, #48	; 0x30
100097dc:	5ec2      	ldrsh	r2, [r0, r3]
100097de:	4663      	mov	r3, ip
100097e0:	4353      	muls	r3, r2
100097e2:	121b      	asrs	r3, r3, #8
100097e4:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
100097e6:	2d00      	cmp	r5, #0
100097e8:	d00e      	beq.n	10009808 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
100097ea:	0028      	movs	r0, r5
100097ec:	4b0a      	ldr	r3, [pc, #40]	; (10009818 <mpu_get_compass_reg+0xb8>)
100097ee:	4798      	blx	r3
100097f0:	e00a      	b.n	10009808 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100097f2:	2401      	movs	r4, #1
100097f4:	4264      	negs	r4, r4
100097f6:	e007      	b.n	10009808 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
100097f8:	2401      	movs	r4, #1
100097fa:	4264      	negs	r4, r4
100097fc:	e004      	b.n	10009808 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
100097fe:	2402      	movs	r4, #2
10009800:	4264      	negs	r4, r4
10009802:	e001      	b.n	10009808 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
10009804:	2403      	movs	r4, #3
10009806:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
10009808:	0020      	movs	r0, r4
1000980a:	b005      	add	sp, #20
1000980c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000980e:	46c0      	nop			; (mov r8, r8)
10009810:	10017068 	.word	0x10017068
10009814:	1000a9ad 	.word	0x1000a9ad
10009818:	1000b1a5 	.word	0x1000b1a5

1000981c <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
1000981c:	4b02      	ldr	r3, [pc, #8]	; (10009828 <mpu_get_compass_fsr+0xc>)
1000981e:	685b      	ldr	r3, [r3, #4]
10009820:	899b      	ldrh	r3, [r3, #12]
10009822:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009824:	2000      	movs	r0, #0
10009826:	4770      	bx	lr
10009828:	10017068 	.word	0x10017068

1000982c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1000982c:	b510      	push	{r4, lr}
1000982e:	b086      	sub	sp, #24
10009830:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
10009832:	220c      	movs	r2, #12
10009834:	4915      	ldr	r1, [pc, #84]	; (1000988c <dmp_set_fifo_rate+0x60>)
10009836:	3110      	adds	r1, #16
10009838:	a803      	add	r0, sp, #12
1000983a:	4b15      	ldr	r3, [pc, #84]	; (10009890 <dmp_set_fifo_rate+0x64>)
1000983c:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000983e:	2cc8      	cmp	r4, #200	; 0xc8
10009840:	d819      	bhi.n	10009876 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009842:	0021      	movs	r1, r4
10009844:	20c8      	movs	r0, #200	; 0xc8
10009846:	4b13      	ldr	r3, [pc, #76]	; (10009894 <dmp_set_fifo_rate+0x68>)
10009848:	4798      	blx	r3
1000984a:	3801      	subs	r0, #1
1000984c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000984e:	aa01      	add	r2, sp, #4
10009850:	0a03      	lsrs	r3, r0, #8
10009852:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009854:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009856:	2102      	movs	r1, #2
10009858:	480f      	ldr	r0, [pc, #60]	; (10009898 <dmp_set_fifo_rate+0x6c>)
1000985a:	4b10      	ldr	r3, [pc, #64]	; (1000989c <dmp_set_fifo_rate+0x70>)
1000985c:	4798      	blx	r3
1000985e:	2800      	cmp	r0, #0
10009860:	d10c      	bne.n	1000987c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009862:	aa03      	add	r2, sp, #12
10009864:	210c      	movs	r1, #12
10009866:	480e      	ldr	r0, [pc, #56]	; (100098a0 <dmp_set_fifo_rate+0x74>)
10009868:	4b0c      	ldr	r3, [pc, #48]	; (1000989c <dmp_set_fifo_rate+0x70>)
1000986a:	4798      	blx	r3
1000986c:	2800      	cmp	r0, #0
1000986e:	d108      	bne.n	10009882 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009870:	4b0c      	ldr	r3, [pc, #48]	; (100098a4 <dmp_set_fifo_rate+0x78>)
10009872:	819c      	strh	r4, [r3, #12]
    return 0;
10009874:	e007      	b.n	10009886 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009876:	2001      	movs	r0, #1
10009878:	4240      	negs	r0, r0
1000987a:	e004      	b.n	10009886 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000987c:	2001      	movs	r0, #1
1000987e:	4240      	negs	r0, r0
10009880:	e001      	b.n	10009886 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009882:	2001      	movs	r0, #1
10009884:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009886:	b006      	add	sp, #24
10009888:	bd10      	pop	{r4, pc}
1000988a:	46c0      	nop			; (mov r8, r8)
1000988c:	10015f50 	.word	0x10015f50
10009890:	100148df 	.word	0x100148df
10009894:	10012901 	.word	0x10012901
10009898:	00000216 	.word	0x00000216
1000989c:	10009645 	.word	0x10009645
100098a0:	00000ac1 	.word	0x00000ac1
100098a4:	10017130 	.word	0x10017130

100098a8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
100098a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100098aa:	4647      	mov	r7, r8
100098ac:	b480      	push	{r7}
100098ae:	b082      	sub	sp, #8
100098b0:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
100098b2:	0743      	lsls	r3, r0, #29
100098b4:	d100      	bne.n	100098b8 <dmp_set_tap_thresh+0x10>
100098b6:	e09c      	b.n	100099f2 <dmp_set_tap_thresh+0x14a>
100098b8:	23c8      	movs	r3, #200	; 0xc8
100098ba:	00db      	lsls	r3, r3, #3
100098bc:	4299      	cmp	r1, r3
100098be:	d900      	bls.n	100098c2 <dmp_set_tap_thresh+0x1a>
100098c0:	e09a      	b.n	100099f8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
100098c2:	0008      	movs	r0, r1
100098c4:	4b58      	ldr	r3, [pc, #352]	; (10009a28 <dmp_set_tap_thresh+0x180>)
100098c6:	4798      	blx	r3
100098c8:	4958      	ldr	r1, [pc, #352]	; (10009a2c <dmp_set_tap_thresh+0x184>)
100098ca:	4b59      	ldr	r3, [pc, #356]	; (10009a30 <dmp_set_tap_thresh+0x188>)
100098cc:	4798      	blx	r3
100098ce:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100098d0:	466b      	mov	r3, sp
100098d2:	1cdd      	adds	r5, r3, #3
100098d4:	0028      	movs	r0, r5
100098d6:	4b57      	ldr	r3, [pc, #348]	; (10009a34 <dmp_set_tap_thresh+0x18c>)
100098d8:	4798      	blx	r3
    switch (accel_fsr) {
100098da:	782b      	ldrb	r3, [r5, #0]
100098dc:	2b04      	cmp	r3, #4
100098de:	d019      	beq.n	10009914 <dmp_set_tap_thresh+0x6c>
100098e0:	b2da      	uxtb	r2, r3
100098e2:	2a04      	cmp	r2, #4
100098e4:	d802      	bhi.n	100098ec <dmp_set_tap_thresh+0x44>
100098e6:	2b02      	cmp	r3, #2
100098e8:	d005      	beq.n	100098f6 <dmp_set_tap_thresh+0x4e>
100098ea:	e088      	b.n	100099fe <dmp_set_tap_thresh+0x156>
100098ec:	2b08      	cmp	r3, #8
100098ee:	d020      	beq.n	10009932 <dmp_set_tap_thresh+0x8a>
100098f0:	2b10      	cmp	r3, #16
100098f2:	d02d      	beq.n	10009950 <dmp_set_tap_thresh+0xa8>
100098f4:	e083      	b.n	100099fe <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100098f6:	4b50      	ldr	r3, [pc, #320]	; (10009a38 <dmp_set_tap_thresh+0x190>)
100098f8:	4698      	mov	r8, r3
100098fa:	218d      	movs	r1, #141	; 0x8d
100098fc:	05c9      	lsls	r1, r1, #23
100098fe:	1c30      	adds	r0, r6, #0
10009900:	4798      	blx	r3
10009902:	4f4e      	ldr	r7, [pc, #312]	; (10009a3c <dmp_set_tap_thresh+0x194>)
10009904:	47b8      	blx	r7
10009906:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009908:	494d      	ldr	r1, [pc, #308]	; (10009a40 <dmp_set_tap_thresh+0x198>)
1000990a:	1c30      	adds	r0, r6, #0
1000990c:	47c0      	blx	r8
1000990e:	47b8      	blx	r7
10009910:	b280      	uxth	r0, r0
        break;
10009912:	e02b      	b.n	1000996c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009914:	4b48      	ldr	r3, [pc, #288]	; (10009a38 <dmp_set_tap_thresh+0x190>)
10009916:	4698      	mov	r8, r3
10009918:	218c      	movs	r1, #140	; 0x8c
1000991a:	05c9      	lsls	r1, r1, #23
1000991c:	1c30      	adds	r0, r6, #0
1000991e:	4798      	blx	r3
10009920:	4f46      	ldr	r7, [pc, #280]	; (10009a3c <dmp_set_tap_thresh+0x194>)
10009922:	47b8      	blx	r7
10009924:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009926:	4947      	ldr	r1, [pc, #284]	; (10009a44 <dmp_set_tap_thresh+0x19c>)
10009928:	1c30      	adds	r0, r6, #0
1000992a:	47c0      	blx	r8
1000992c:	47b8      	blx	r7
1000992e:	b280      	uxth	r0, r0
        break;
10009930:	e01c      	b.n	1000996c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009932:	4b41      	ldr	r3, [pc, #260]	; (10009a38 <dmp_set_tap_thresh+0x190>)
10009934:	4698      	mov	r8, r3
10009936:	218b      	movs	r1, #139	; 0x8b
10009938:	05c9      	lsls	r1, r1, #23
1000993a:	1c30      	adds	r0, r6, #0
1000993c:	4798      	blx	r3
1000993e:	4f3f      	ldr	r7, [pc, #252]	; (10009a3c <dmp_set_tap_thresh+0x194>)
10009940:	47b8      	blx	r7
10009942:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009944:	4940      	ldr	r1, [pc, #256]	; (10009a48 <dmp_set_tap_thresh+0x1a0>)
10009946:	1c30      	adds	r0, r6, #0
10009948:	47c0      	blx	r8
1000994a:	47b8      	blx	r7
1000994c:	b280      	uxth	r0, r0
        break;
1000994e:	e00d      	b.n	1000996c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009950:	4b39      	ldr	r3, [pc, #228]	; (10009a38 <dmp_set_tap_thresh+0x190>)
10009952:	4698      	mov	r8, r3
10009954:	218a      	movs	r1, #138	; 0x8a
10009956:	05c9      	lsls	r1, r1, #23
10009958:	1c30      	adds	r0, r6, #0
1000995a:	4798      	blx	r3
1000995c:	4f37      	ldr	r7, [pc, #220]	; (10009a3c <dmp_set_tap_thresh+0x194>)
1000995e:	47b8      	blx	r7
10009960:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009962:	493a      	ldr	r1, [pc, #232]	; (10009a4c <dmp_set_tap_thresh+0x1a4>)
10009964:	1c30      	adds	r0, r6, #0
10009966:	47c0      	blx	r8
10009968:	47b8      	blx	r7
1000996a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000996c:	ab01      	add	r3, sp, #4
1000996e:	0a2a      	lsrs	r2, r5, #8
10009970:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009972:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009974:	0a02      	lsrs	r2, r0, #8
10009976:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009978:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000997a:	07e3      	lsls	r3, r4, #31
1000997c:	d510      	bpl.n	100099a0 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000997e:	aa01      	add	r2, sp, #4
10009980:	2102      	movs	r1, #2
10009982:	20ea      	movs	r0, #234	; 0xea
10009984:	0040      	lsls	r0, r0, #1
10009986:	4b32      	ldr	r3, [pc, #200]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
10009988:	4798      	blx	r3
1000998a:	2800      	cmp	r0, #0
1000998c:	d13a      	bne.n	10009a04 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000998e:	466b      	mov	r3, sp
10009990:	1d9a      	adds	r2, r3, #6
10009992:	2102      	movs	r1, #2
10009994:	3025      	adds	r0, #37	; 0x25
10009996:	30ff      	adds	r0, #255	; 0xff
10009998:	4b2d      	ldr	r3, [pc, #180]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
1000999a:	4798      	blx	r3
1000999c:	2800      	cmp	r0, #0
1000999e:	d134      	bne.n	10009a0a <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
100099a0:	07a3      	lsls	r3, r4, #30
100099a2:	d510      	bpl.n	100099c6 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100099a4:	aa01      	add	r2, sp, #4
100099a6:	2102      	movs	r1, #2
100099a8:	20ec      	movs	r0, #236	; 0xec
100099aa:	0040      	lsls	r0, r0, #1
100099ac:	4b28      	ldr	r3, [pc, #160]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
100099ae:	4798      	blx	r3
100099b0:	2800      	cmp	r0, #0
100099b2:	d12d      	bne.n	10009a10 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
100099b4:	466b      	mov	r3, sp
100099b6:	1d9a      	adds	r2, r3, #6
100099b8:	2102      	movs	r1, #2
100099ba:	3029      	adds	r0, #41	; 0x29
100099bc:	30ff      	adds	r0, #255	; 0xff
100099be:	4b24      	ldr	r3, [pc, #144]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
100099c0:	4798      	blx	r3
100099c2:	2800      	cmp	r0, #0
100099c4:	d127      	bne.n	10009a16 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100099c6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100099c8:	0763      	lsls	r3, r4, #29
100099ca:	d529      	bpl.n	10009a20 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100099cc:	aa01      	add	r2, sp, #4
100099ce:	2102      	movs	r1, #2
100099d0:	30dd      	adds	r0, #221	; 0xdd
100099d2:	30ff      	adds	r0, #255	; 0xff
100099d4:	4b1e      	ldr	r3, [pc, #120]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
100099d6:	4798      	blx	r3
100099d8:	2800      	cmp	r0, #0
100099da:	d11f      	bne.n	10009a1c <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100099dc:	466b      	mov	r3, sp
100099de:	1d9a      	adds	r2, r3, #6
100099e0:	2102      	movs	r1, #2
100099e2:	302d      	adds	r0, #45	; 0x2d
100099e4:	30ff      	adds	r0, #255	; 0xff
100099e6:	4b1a      	ldr	r3, [pc, #104]	; (10009a50 <dmp_set_tap_thresh+0x1a8>)
100099e8:	4798      	blx	r3
100099ea:	1e43      	subs	r3, r0, #1
100099ec:	4198      	sbcs	r0, r3
100099ee:	4240      	negs	r0, r0
100099f0:	e016      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100099f2:	2001      	movs	r0, #1
100099f4:	4240      	negs	r0, r0
100099f6:	e013      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
100099f8:	2001      	movs	r0, #1
100099fa:	4240      	negs	r0, r0
100099fc:	e010      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100099fe:	2001      	movs	r0, #1
10009a00:	4240      	negs	r0, r0
10009a02:	e00d      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
10009a04:	2001      	movs	r0, #1
10009a06:	4240      	negs	r0, r0
10009a08:	e00a      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
10009a0a:	2001      	movs	r0, #1
10009a0c:	4240      	negs	r0, r0
10009a0e:	e007      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
10009a10:	2001      	movs	r0, #1
10009a12:	4240      	negs	r0, r0
10009a14:	e004      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
10009a16:	2001      	movs	r0, #1
10009a18:	4240      	negs	r0, r0
10009a1a:	e001      	b.n	10009a20 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
10009a1c:	2001      	movs	r0, #1
10009a1e:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009a20:	b002      	add	sp, #8
10009a22:	bc04      	pop	{r2}
10009a24:	4690      	mov	r8, r2
10009a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a28:	10013915 	.word	0x10013915
10009a2c:	43480000 	.word	0x43480000
10009a30:	10012f79 	.word	0x10012f79
10009a34:	100088b9 	.word	0x100088b9
10009a38:	1001330d 	.word	0x1001330d
10009a3c:	10012c21 	.word	0x10012c21
10009a40:	46400000 	.word	0x46400000
10009a44:	45c00000 	.word	0x45c00000
10009a48:	45400000 	.word	0x45400000
10009a4c:	44c00000 	.word	0x44c00000
10009a50:	10009645 	.word	0x10009645

10009a54 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009a54:	b500      	push	{lr}
10009a56:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009a58:	07c3      	lsls	r3, r0, #31
10009a5a:	d403      	bmi.n	10009a64 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009a5c:	2200      	movs	r2, #0
10009a5e:	466b      	mov	r3, sp
10009a60:	71da      	strb	r2, [r3, #7]
10009a62:	e002      	b.n	10009a6a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a64:	2230      	movs	r2, #48	; 0x30
10009a66:	466b      	mov	r3, sp
10009a68:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a6a:	0783      	lsls	r3, r0, #30
10009a6c:	d505      	bpl.n	10009a7a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a6e:	466b      	mov	r3, sp
10009a70:	1dda      	adds	r2, r3, #7
10009a72:	79d9      	ldrb	r1, [r3, #7]
10009a74:	230c      	movs	r3, #12
10009a76:	430b      	orrs	r3, r1
10009a78:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a7a:	0743      	lsls	r3, r0, #29
10009a7c:	d505      	bpl.n	10009a8a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a7e:	466b      	mov	r3, sp
10009a80:	1dda      	adds	r2, r3, #7
10009a82:	79d9      	ldrb	r1, [r3, #7]
10009a84:	2303      	movs	r3, #3
10009a86:	430b      	orrs	r3, r1
10009a88:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a8a:	466b      	mov	r3, sp
10009a8c:	1dda      	adds	r2, r3, #7
10009a8e:	2101      	movs	r1, #1
10009a90:	20a4      	movs	r0, #164	; 0xa4
10009a92:	0040      	lsls	r0, r0, #1
10009a94:	4b01      	ldr	r3, [pc, #4]	; (10009a9c <dmp_set_tap_axes+0x48>)
10009a96:	4798      	blx	r3
}
10009a98:	b003      	add	sp, #12
10009a9a:	bd00      	pop	{pc}
10009a9c:	10009645 	.word	0x10009645

10009aa0 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009aa0:	b500      	push	{lr}
10009aa2:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009aa4:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009aa6:	2800      	cmp	r0, #0
10009aa8:	d004      	beq.n	10009ab4 <dmp_set_tap_count+0x14>
10009aaa:	1c03      	adds	r3, r0, #0
10009aac:	2804      	cmp	r0, #4
10009aae:	d900      	bls.n	10009ab2 <dmp_set_tap_count+0x12>
10009ab0:	2304      	movs	r3, #4
10009ab2:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009ab4:	466a      	mov	r2, sp
10009ab6:	3207      	adds	r2, #7
10009ab8:	3b01      	subs	r3, #1
10009aba:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009abc:	2101      	movs	r1, #1
10009abe:	2050      	movs	r0, #80	; 0x50
10009ac0:	30ff      	adds	r0, #255	; 0xff
10009ac2:	4b02      	ldr	r3, [pc, #8]	; (10009acc <dmp_set_tap_count+0x2c>)
10009ac4:	4798      	blx	r3
}
10009ac6:	b003      	add	sp, #12
10009ac8:	bd00      	pop	{pc}
10009aca:	46c0      	nop			; (mov r8, r8)
10009acc:	10009645 	.word	0x10009645

10009ad0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009ad0:	b500      	push	{lr}
10009ad2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009ad4:	2105      	movs	r1, #5
10009ad6:	4b07      	ldr	r3, [pc, #28]	; (10009af4 <dmp_set_tap_time+0x24>)
10009ad8:	4798      	blx	r3
10009ada:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009adc:	aa01      	add	r2, sp, #4
10009ade:	0a03      	lsrs	r3, r0, #8
10009ae0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ae2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009ae4:	2102      	movs	r1, #2
10009ae6:	20ef      	movs	r0, #239	; 0xef
10009ae8:	0040      	lsls	r0, r0, #1
10009aea:	4b03      	ldr	r3, [pc, #12]	; (10009af8 <dmp_set_tap_time+0x28>)
10009aec:	4798      	blx	r3
}
10009aee:	b003      	add	sp, #12
10009af0:	bd00      	pop	{pc}
10009af2:	46c0      	nop			; (mov r8, r8)
10009af4:	100127ed 	.word	0x100127ed
10009af8:	10009645 	.word	0x10009645

10009afc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009afc:	b500      	push	{lr}
10009afe:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009b00:	2105      	movs	r1, #5
10009b02:	4b07      	ldr	r3, [pc, #28]	; (10009b20 <dmp_set_tap_time_multi+0x24>)
10009b04:	4798      	blx	r3
10009b06:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	0a03      	lsrs	r3, r0, #8
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009b0e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009b10:	2102      	movs	r1, #2
10009b12:	20ed      	movs	r0, #237	; 0xed
10009b14:	0040      	lsls	r0, r0, #1
10009b16:	4b03      	ldr	r3, [pc, #12]	; (10009b24 <dmp_set_tap_time_multi+0x28>)
10009b18:	4798      	blx	r3
}
10009b1a:	b003      	add	sp, #12
10009b1c:	bd00      	pop	{pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	100127ed 	.word	0x100127ed
10009b24:	10009645 	.word	0x10009645

10009b28 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009b28:	b510      	push	{r4, lr}
10009b2a:	b082      	sub	sp, #8
10009b2c:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009b2e:	21fa      	movs	r1, #250	; 0xfa
10009b30:	0089      	lsls	r1, r1, #2
10009b32:	4b09      	ldr	r3, [pc, #36]	; (10009b58 <dmp_set_shake_reject_thresh+0x30>)
10009b34:	4798      	blx	r3
10009b36:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009b38:	aa01      	add	r2, sp, #4
10009b3a:	1603      	asrs	r3, r0, #24
10009b3c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009b3e:	1403      	asrs	r3, r0, #16
10009b40:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009b42:	1203      	asrs	r3, r0, #8
10009b44:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009b46:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009b48:	2104      	movs	r1, #4
10009b4a:	20ae      	movs	r0, #174	; 0xae
10009b4c:	0040      	lsls	r0, r0, #1
10009b4e:	4b03      	ldr	r3, [pc, #12]	; (10009b5c <dmp_set_shake_reject_thresh+0x34>)
10009b50:	4798      	blx	r3
}
10009b52:	b002      	add	sp, #8
10009b54:	bd10      	pop	{r4, pc}
10009b56:	46c0      	nop			; (mov r8, r8)
10009b58:	10012901 	.word	0x10012901
10009b5c:	10009645 	.word	0x10009645

10009b60 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009b60:	b500      	push	{lr}
10009b62:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b64:	2105      	movs	r1, #5
10009b66:	4b07      	ldr	r3, [pc, #28]	; (10009b84 <dmp_set_shake_reject_time+0x24>)
10009b68:	4798      	blx	r3
10009b6a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b6c:	aa01      	add	r2, sp, #4
10009b6e:	0a03      	lsrs	r3, r0, #8
10009b70:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b72:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b74:	2102      	movs	r1, #2
10009b76:	20ad      	movs	r0, #173	; 0xad
10009b78:	0040      	lsls	r0, r0, #1
10009b7a:	4b03      	ldr	r3, [pc, #12]	; (10009b88 <dmp_set_shake_reject_time+0x28>)
10009b7c:	4798      	blx	r3
}
10009b7e:	b003      	add	sp, #12
10009b80:	bd00      	pop	{pc}
10009b82:	46c0      	nop			; (mov r8, r8)
10009b84:	100127ed 	.word	0x100127ed
10009b88:	10009645 	.word	0x10009645

10009b8c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b8c:	b500      	push	{lr}
10009b8e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b90:	2105      	movs	r1, #5
10009b92:	4b07      	ldr	r3, [pc, #28]	; (10009bb0 <dmp_set_shake_reject_timeout+0x24>)
10009b94:	4798      	blx	r3
10009b96:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b98:	aa01      	add	r2, sp, #4
10009b9a:	0a03      	lsrs	r3, r0, #8
10009b9c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b9e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009ba0:	2102      	movs	r1, #2
10009ba2:	20ac      	movs	r0, #172	; 0xac
10009ba4:	0040      	lsls	r0, r0, #1
10009ba6:	4b03      	ldr	r3, [pc, #12]	; (10009bb4 <dmp_set_shake_reject_timeout+0x28>)
10009ba8:	4798      	blx	r3
}
10009baa:	b003      	add	sp, #12
10009bac:	bd00      	pop	{pc}
10009bae:	46c0      	nop			; (mov r8, r8)
10009bb0:	100127ed 	.word	0x100127ed
10009bb4:	10009645 	.word	0x10009645

10009bb8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009bb8:	b500      	push	{lr}
10009bba:	b085      	sub	sp, #20
    if (enable) {
10009bbc:	2800      	cmp	r0, #0
10009bbe:	d00c      	beq.n	10009bda <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009bc0:	2209      	movs	r2, #9
10009bc2:	490d      	ldr	r1, [pc, #52]	; (10009bf8 <dmp_enable_gyro_cal+0x40>)
10009bc4:	311c      	adds	r1, #28
10009bc6:	a801      	add	r0, sp, #4
10009bc8:	4b0c      	ldr	r3, [pc, #48]	; (10009bfc <dmp_enable_gyro_cal+0x44>)
10009bca:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009bcc:	aa01      	add	r2, sp, #4
10009bce:	2109      	movs	r1, #9
10009bd0:	2097      	movs	r0, #151	; 0x97
10009bd2:	00c0      	lsls	r0, r0, #3
10009bd4:	4b0a      	ldr	r3, [pc, #40]	; (10009c00 <dmp_enable_gyro_cal+0x48>)
10009bd6:	4798      	blx	r3
10009bd8:	e00b      	b.n	10009bf2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009bda:	2209      	movs	r2, #9
10009bdc:	4906      	ldr	r1, [pc, #24]	; (10009bf8 <dmp_enable_gyro_cal+0x40>)
10009bde:	3128      	adds	r1, #40	; 0x28
10009be0:	a801      	add	r0, sp, #4
10009be2:	4b06      	ldr	r3, [pc, #24]	; (10009bfc <dmp_enable_gyro_cal+0x44>)
10009be4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009be6:	aa01      	add	r2, sp, #4
10009be8:	2109      	movs	r1, #9
10009bea:	2097      	movs	r0, #151	; 0x97
10009bec:	00c0      	lsls	r0, r0, #3
10009bee:	4b04      	ldr	r3, [pc, #16]	; (10009c00 <dmp_enable_gyro_cal+0x48>)
10009bf0:	4798      	blx	r3
    }
}
10009bf2:	b005      	add	sp, #20
10009bf4:	bd00      	pop	{pc}
10009bf6:	46c0      	nop			; (mov r8, r8)
10009bf8:	10015f50 	.word	0x10015f50
10009bfc:	100148df 	.word	0x100148df
10009c00:	10009645 	.word	0x10009645

10009c04 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009c04:	b500      	push	{lr}
10009c06:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009c08:	2800      	cmp	r0, #0
10009c0a:	d009      	beq.n	10009c20 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009c0c:	ab01      	add	r3, sp, #4
10009c0e:	22c0      	movs	r2, #192	; 0xc0
10009c10:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009c12:	3202      	adds	r2, #2
10009c14:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009c16:	3202      	adds	r2, #2
10009c18:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009c1a:	3202      	adds	r2, #2
10009c1c:	70da      	strb	r2, [r3, #3]
10009c1e:	e001      	b.n	10009c24 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009c20:	4b05      	ldr	r3, [pc, #20]	; (10009c38 <dmp_enable_lp_quat+0x34>)
10009c22:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009c24:	aa01      	add	r2, sp, #4
10009c26:	2104      	movs	r1, #4
10009c28:	4804      	ldr	r0, [pc, #16]	; (10009c3c <dmp_enable_lp_quat+0x38>)
10009c2a:	4b05      	ldr	r3, [pc, #20]	; (10009c40 <dmp_enable_lp_quat+0x3c>)
10009c2c:	4798      	blx	r3

    return mpu_reset_fifo();
10009c2e:	4b05      	ldr	r3, [pc, #20]	; (10009c44 <dmp_enable_lp_quat+0x40>)
10009c30:	4798      	blx	r3
}
10009c32:	b003      	add	sp, #12
10009c34:	bd00      	pop	{pc}
10009c36:	46c0      	nop			; (mov r8, r8)
10009c38:	8b8b8b8b 	.word	0x8b8b8b8b
10009c3c:	00000a98 	.word	0x00000a98
10009c40:	10009645 	.word	0x10009645
10009c44:	10008621 	.word	0x10008621

10009c48 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009c48:	b500      	push	{lr}
10009c4a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009c4c:	2800      	cmp	r0, #0
10009c4e:	d009      	beq.n	10009c64 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009c50:	ab01      	add	r3, sp, #4
10009c52:	2220      	movs	r2, #32
10009c54:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009c56:	3208      	adds	r2, #8
10009c58:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009c5a:	3208      	adds	r2, #8
10009c5c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009c5e:	3208      	adds	r2, #8
10009c60:	70da      	strb	r2, [r3, #3]
10009c62:	e001      	b.n	10009c68 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c64:	4b05      	ldr	r3, [pc, #20]	; (10009c7c <dmp_enable_6x_lp_quat+0x34>)
10009c66:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c68:	aa01      	add	r2, sp, #4
10009c6a:	2104      	movs	r1, #4
10009c6c:	4804      	ldr	r0, [pc, #16]	; (10009c80 <dmp_enable_6x_lp_quat+0x38>)
10009c6e:	4b05      	ldr	r3, [pc, #20]	; (10009c84 <dmp_enable_6x_lp_quat+0x3c>)
10009c70:	4798      	blx	r3

    return mpu_reset_fifo();
10009c72:	4b05      	ldr	r3, [pc, #20]	; (10009c88 <dmp_enable_6x_lp_quat+0x40>)
10009c74:	4798      	blx	r3
}
10009c76:	b003      	add	sp, #12
10009c78:	bd00      	pop	{pc}
10009c7a:	46c0      	nop			; (mov r8, r8)
10009c7c:	a3a3a3a3 	.word	0xa3a3a3a3
10009c80:	00000a9e 	.word	0x00000a9e
10009c84:	10009645 	.word	0x10009645
10009c88:	10008621 	.word	0x10008621

10009c8c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c8e:	b085      	sub	sp, #20
10009c90:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c92:	ad01      	add	r5, sp, #4
10009c94:	2302      	movs	r3, #2
10009c96:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c98:	33c8      	adds	r3, #200	; 0xc8
10009c9a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c9c:	3319      	adds	r3, #25
10009c9e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009ca0:	3bda      	subs	r3, #218	; 0xda
10009ca2:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009ca4:	002a      	movs	r2, r5
10009ca6:	2104      	movs	r1, #4
10009ca8:	2068      	movs	r0, #104	; 0x68
10009caa:	4b6a      	ldr	r3, [pc, #424]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009cac:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009cae:	23a3      	movs	r3, #163	; 0xa3
10009cb0:	702b      	strb	r3, [r5, #0]
10009cb2:	2740      	movs	r7, #64	; 0x40
10009cb4:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009cb6:	d007      	beq.n	10009cc8 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009cb8:	ab01      	add	r3, sp, #4
10009cba:	22c0      	movs	r2, #192	; 0xc0
10009cbc:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009cbe:	3208      	adds	r2, #8
10009cc0:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009cc2:	3a06      	subs	r2, #6
10009cc4:	70da      	strb	r2, [r3, #3]
10009cc6:	e004      	b.n	10009cd2 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009cc8:	ab01      	add	r3, sp, #4
10009cca:	22a3      	movs	r2, #163	; 0xa3
10009ccc:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009cce:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009cd0:	70da      	strb	r2, [r3, #3]
10009cd2:	25c0      	movs	r5, #192	; 0xc0
10009cd4:	006d      	lsls	r5, r5, #1
10009cd6:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009cd8:	d007      	beq.n	10009cea <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009cda:	ab01      	add	r3, sp, #4
10009cdc:	22c4      	movs	r2, #196	; 0xc4
10009cde:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009ce0:	3208      	adds	r2, #8
10009ce2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009ce4:	3a06      	subs	r2, #6
10009ce6:	719a      	strb	r2, [r3, #6]
10009ce8:	e004      	b.n	10009cf4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009cea:	ab01      	add	r3, sp, #4
10009cec:	22a3      	movs	r2, #163	; 0xa3
10009cee:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009cf0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009cf2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009cf4:	aa01      	add	r2, sp, #4
10009cf6:	23a3      	movs	r3, #163	; 0xa3
10009cf8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009cfa:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009cfc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009cfe:	210a      	movs	r1, #10
10009d00:	4855      	ldr	r0, [pc, #340]	; (10009e58 <dmp_enable_feature+0x1cc>)
10009d02:	4b54      	ldr	r3, [pc, #336]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009d04:	4798      	blx	r3
10009d06:	2603      	movs	r6, #3
10009d08:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009d0a:	d003      	beq.n	10009d14 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009d0c:	2220      	movs	r2, #32
10009d0e:	ab01      	add	r3, sp, #4
10009d10:	701a      	strb	r2, [r3, #0]
10009d12:	e002      	b.n	10009d1a <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009d14:	22d8      	movs	r2, #216	; 0xd8
10009d16:	ab01      	add	r3, sp, #4
10009d18:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009d1a:	aa01      	add	r2, sp, #4
10009d1c:	2101      	movs	r1, #1
10009d1e:	484f      	ldr	r0, [pc, #316]	; (10009e5c <dmp_enable_feature+0x1d0>)
10009d20:	4b4c      	ldr	r3, [pc, #304]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009d22:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009d24:	06a3      	lsls	r3, r4, #26
10009d26:	d503      	bpl.n	10009d30 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009d28:	2001      	movs	r0, #1
10009d2a:	4b4d      	ldr	r3, [pc, #308]	; (10009e60 <dmp_enable_feature+0x1d4>)
10009d2c:	4798      	blx	r3
10009d2e:	e002      	b.n	10009d36 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009d30:	2000      	movs	r0, #0
10009d32:	4b4b      	ldr	r3, [pc, #300]	; (10009e60 <dmp_enable_feature+0x1d4>)
10009d34:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009d36:	2d00      	cmp	r5, #0
10009d38:	d019      	beq.n	10009d6e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009d3a:	05e3      	lsls	r3, r4, #23
10009d3c:	d509      	bpl.n	10009d52 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009d3e:	ab01      	add	r3, sp, #4
10009d40:	22b2      	movs	r2, #178	; 0xb2
10009d42:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009d44:	3a27      	subs	r2, #39	; 0x27
10009d46:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009d48:	322b      	adds	r2, #43	; 0x2b
10009d4a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009d4c:	3a1b      	subs	r2, #27
10009d4e:	70da      	strb	r2, [r3, #3]
10009d50:	e008      	b.n	10009d64 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009d52:	ab01      	add	r3, sp, #4
10009d54:	22b0      	movs	r2, #176	; 0xb0
10009d56:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009d58:	3a30      	subs	r2, #48	; 0x30
10009d5a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009d5c:	3234      	adds	r2, #52	; 0x34
10009d5e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009d60:	3a24      	subs	r2, #36	; 0x24
10009d62:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d64:	aa01      	add	r2, sp, #4
10009d66:	2104      	movs	r1, #4
10009d68:	483e      	ldr	r0, [pc, #248]	; (10009e64 <dmp_enable_feature+0x1d8>)
10009d6a:	4b3a      	ldr	r3, [pc, #232]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009d6c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d6e:	07e3      	lsls	r3, r4, #31
10009d70:	d523      	bpl.n	10009dba <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d72:	aa01      	add	r2, sp, #4
10009d74:	23f8      	movs	r3, #248	; 0xf8
10009d76:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d78:	2101      	movs	r1, #1
10009d7a:	208b      	movs	r0, #139	; 0x8b
10009d7c:	0100      	lsls	r0, r0, #4
10009d7e:	4b35      	ldr	r3, [pc, #212]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009d80:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d82:	21fa      	movs	r1, #250	; 0xfa
10009d84:	2007      	movs	r0, #7
10009d86:	4b38      	ldr	r3, [pc, #224]	; (10009e68 <dmp_enable_feature+0x1dc>)
10009d88:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d8a:	2007      	movs	r0, #7
10009d8c:	4b37      	ldr	r3, [pc, #220]	; (10009e6c <dmp_enable_feature+0x1e0>)
10009d8e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d90:	2001      	movs	r0, #1
10009d92:	4b37      	ldr	r3, [pc, #220]	; (10009e70 <dmp_enable_feature+0x1e4>)
10009d94:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d96:	2064      	movs	r0, #100	; 0x64
10009d98:	4b36      	ldr	r3, [pc, #216]	; (10009e74 <dmp_enable_feature+0x1e8>)
10009d9a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d9c:	20fa      	movs	r0, #250	; 0xfa
10009d9e:	0040      	lsls	r0, r0, #1
10009da0:	4b35      	ldr	r3, [pc, #212]	; (10009e78 <dmp_enable_feature+0x1ec>)
10009da2:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009da4:	21c8      	movs	r1, #200	; 0xc8
10009da6:	4835      	ldr	r0, [pc, #212]	; (10009e7c <dmp_enable_feature+0x1f0>)
10009da8:	4b35      	ldr	r3, [pc, #212]	; (10009e80 <dmp_enable_feature+0x1f4>)
10009daa:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009dac:	2028      	movs	r0, #40	; 0x28
10009dae:	4b35      	ldr	r3, [pc, #212]	; (10009e84 <dmp_enable_feature+0x1f8>)
10009db0:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009db2:	200a      	movs	r0, #10
10009db4:	4b34      	ldr	r3, [pc, #208]	; (10009e88 <dmp_enable_feature+0x1fc>)
10009db6:	4798      	blx	r3
10009db8:	e007      	b.n	10009dca <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009dba:	aa01      	add	r2, sp, #4
10009dbc:	23d8      	movs	r3, #216	; 0xd8
10009dbe:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009dc0:	2101      	movs	r1, #1
10009dc2:	208b      	movs	r0, #139	; 0x8b
10009dc4:	0100      	lsls	r0, r0, #4
10009dc6:	4b23      	ldr	r3, [pc, #140]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009dc8:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009dca:	07a3      	lsls	r3, r4, #30
10009dcc:	d503      	bpl.n	10009dd6 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009dce:	22d9      	movs	r2, #217	; 0xd9
10009dd0:	ab01      	add	r3, sp, #4
10009dd2:	701a      	strb	r2, [r3, #0]
10009dd4:	e002      	b.n	10009ddc <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009dd6:	22d8      	movs	r2, #216	; 0xd8
10009dd8:	ab01      	add	r3, sp, #4
10009dda:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009ddc:	aa01      	add	r2, sp, #4
10009dde:	2101      	movs	r1, #1
10009de0:	482a      	ldr	r0, [pc, #168]	; (10009e8c <dmp_enable_feature+0x200>)
10009de2:	4b1c      	ldr	r3, [pc, #112]	; (10009e54 <dmp_enable_feature+0x1c8>)
10009de4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009de6:	0763      	lsls	r3, r4, #29
10009de8:	d503      	bpl.n	10009df2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009dea:	2001      	movs	r0, #1
10009dec:	4b28      	ldr	r3, [pc, #160]	; (10009e90 <dmp_enable_feature+0x204>)
10009dee:	4798      	blx	r3
10009df0:	e002      	b.n	10009df8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009df2:	2000      	movs	r0, #0
10009df4:	4b26      	ldr	r3, [pc, #152]	; (10009e90 <dmp_enable_feature+0x204>)
10009df6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009df8:	06e3      	lsls	r3, r4, #27
10009dfa:	d503      	bpl.n	10009e04 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009dfc:	2001      	movs	r0, #1
10009dfe:	4b25      	ldr	r3, [pc, #148]	; (10009e94 <dmp_enable_feature+0x208>)
10009e00:	4798      	blx	r3
10009e02:	e002      	b.n	10009e0a <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009e04:	2000      	movs	r0, #0
10009e06:	4b23      	ldr	r3, [pc, #140]	; (10009e94 <dmp_enable_feature+0x208>)
10009e08:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009e0a:	2308      	movs	r3, #8
10009e0c:	4323      	orrs	r3, r4
10009e0e:	4a22      	ldr	r2, [pc, #136]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e10:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009e12:	4b22      	ldr	r3, [pc, #136]	; (10009e9c <dmp_enable_feature+0x210>)
10009e14:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009e16:	2f00      	cmp	r7, #0
10009e18:	d103      	bne.n	10009e22 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009e1a:	2200      	movs	r2, #0
10009e1c:	4b1e      	ldr	r3, [pc, #120]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e1e:	739a      	strb	r2, [r3, #14]
10009e20:	e002      	b.n	10009e28 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009e22:	2206      	movs	r2, #6
10009e24:	4b1c      	ldr	r3, [pc, #112]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e26:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009e28:	2d00      	cmp	r5, #0
10009e2a:	d003      	beq.n	10009e34 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009e2c:	4a1a      	ldr	r2, [pc, #104]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e2e:	7b93      	ldrb	r3, [r2, #14]
10009e30:	3306      	adds	r3, #6
10009e32:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009e34:	2314      	movs	r3, #20
10009e36:	4223      	tst	r3, r4
10009e38:	d003      	beq.n	10009e42 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009e3a:	4a17      	ldr	r2, [pc, #92]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e3c:	7b93      	ldrb	r3, [r2, #14]
10009e3e:	3310      	adds	r3, #16
10009e40:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009e42:	2e00      	cmp	r6, #0
10009e44:	d003      	beq.n	10009e4e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009e46:	4a14      	ldr	r2, [pc, #80]	; (10009e98 <dmp_enable_feature+0x20c>)
10009e48:	7b93      	ldrb	r3, [r2, #14]
10009e4a:	3304      	adds	r3, #4
10009e4c:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009e4e:	2000      	movs	r0, #0
10009e50:	b005      	add	sp, #20
10009e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e54:	10009645 	.word	0x10009645
10009e58:	00000aa7 	.word	0x00000aa7
10009e5c:	00000ab6 	.word	0x00000ab6
10009e60:	10009bb9 	.word	0x10009bb9
10009e64:	00000aa2 	.word	0x00000aa2
10009e68:	100098a9 	.word	0x100098a9
10009e6c:	10009a55 	.word	0x10009a55
10009e70:	10009aa1 	.word	0x10009aa1
10009e74:	10009ad1 	.word	0x10009ad1
10009e78:	10009afd 	.word	0x10009afd
10009e7c:	02cae309 	.word	0x02cae309
10009e80:	10009b29 	.word	0x10009b29
10009e84:	10009b61 	.word	0x10009b61
10009e88:	10009b8d 	.word	0x10009b8d
10009e8c:	0000073d 	.word	0x0000073d
10009e90:	10009c05 	.word	0x10009c05
10009e94:	10009c49 	.word	0x10009c49
10009e98:	10017130 	.word	0x10017130
10009e9c:	10008621 	.word	0x10008621

10009ea0 <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10009ea0:	4b03      	ldr	r3, [pc, #12]	; (10009eb0 <sms_ble_pair_request_fn+0x10>)
10009ea2:	781b      	ldrb	r3, [r3, #0]
10009ea4:	4b03      	ldr	r3, [pc, #12]	; (10009eb4 <sms_ble_pair_request_fn+0x14>)
10009ea6:	781b      	ldrb	r3, [r3, #0]
10009ea8:	4b03      	ldr	r3, [pc, #12]	; (10009eb8 <sms_ble_pair_request_fn+0x18>)
10009eaa:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009eac:	2000      	movs	r0, #0
10009eae:	4770      	bx	lr
10009eb0:	10018c78 	.word	0x10018c78
10009eb4:	10018be0 	.word	0x10018be0
10009eb8:	10018d9b 	.word	0x10018d9b

10009ebc <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009ebc:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
10009ebe:	4811      	ldr	r0, [pc, #68]	; (10009f04 <sms_ble_notification_confirmed_fn+0x48>)
10009ec0:	4d11      	ldr	r5, [pc, #68]	; (10009f08 <sms_ble_notification_confirmed_fn+0x4c>)
10009ec2:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10009ec4:	4c11      	ldr	r4, [pc, #68]	; (10009f0c <sms_ble_notification_confirmed_fn+0x50>)
10009ec6:	7863      	ldrb	r3, [r4, #1]
10009ec8:	3b01      	subs	r3, #1
10009eca:	b2db      	uxtb	r3, r3
10009ecc:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
10009ece:	4810      	ldr	r0, [pc, #64]	; (10009f10 <sms_ble_notification_confirmed_fn+0x54>)
10009ed0:	4b10      	ldr	r3, [pc, #64]	; (10009f14 <sms_ble_notification_confirmed_fn+0x58>)
10009ed2:	4798      	blx	r3
10009ed4:	4810      	ldr	r0, [pc, #64]	; (10009f18 <sms_ble_notification_confirmed_fn+0x5c>)
10009ed6:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10009ed8:	2201      	movs	r2, #1
10009eda:	4252      	negs	r2, r2
10009edc:	4b0f      	ldr	r3, [pc, #60]	; (10009f1c <sms_ble_notification_confirmed_fn+0x60>)
10009ede:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ee0:	2001      	movs	r0, #1
10009ee2:	4b0f      	ldr	r3, [pc, #60]	; (10009f20 <sms_ble_notification_confirmed_fn+0x64>)
10009ee4:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ee6:	2200      	movs	r2, #0
10009ee8:	4b0e      	ldr	r3, [pc, #56]	; (10009f24 <sms_ble_notification_confirmed_fn+0x68>)
10009eea:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10009eec:	2322      	movs	r3, #34	; 0x22
10009eee:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ef0:	4b0d      	ldr	r3, [pc, #52]	; (10009f28 <sms_ble_notification_confirmed_fn+0x6c>)
10009ef2:	781b      	ldrb	r3, [r3, #0]
10009ef4:	2b00      	cmp	r3, #0
10009ef6:	d102      	bne.n	10009efe <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
10009ef8:	3201      	adds	r2, #1
10009efa:	4b0c      	ldr	r3, [pc, #48]	; (10009f2c <sms_ble_notification_confirmed_fn+0x70>)
10009efc:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009efe:	2000      	movs	r0, #0
10009f00:	bd70      	pop	{r4, r5, r6, pc}
10009f02:	46c0      	nop			; (mov r8, r8)
10009f04:	10015f9c 	.word	0x10015f9c
10009f08:	10014a39 	.word	0x10014a39
10009f0c:	10018c78 	.word	0x10018c78
10009f10:	10015d04 	.word	0x10015d04
10009f14:	10014b59 	.word	0x10014b59
10009f18:	10015fa4 	.word	0x10015fa4
10009f1c:	10018c70 	.word	0x10018c70
10009f20:	1000b25d 	.word	0x1000b25d
10009f24:	10018d9b 	.word	0x10018d9b
10009f28:	10018be0 	.word	0x10018be0
10009f2c:	10018c75 	.word	0x10018c75

10009f30 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009f30:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009f32:	2001      	movs	r0, #1
10009f34:	4b08      	ldr	r3, [pc, #32]	; (10009f58 <sms_ble_indication_confirmed_fn+0x28>)
10009f36:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009f38:	2200      	movs	r2, #0
10009f3a:	4b08      	ldr	r3, [pc, #32]	; (10009f5c <sms_ble_indication_confirmed_fn+0x2c>)
10009f3c:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10009f3e:	3222      	adds	r2, #34	; 0x22
10009f40:	4b07      	ldr	r3, [pc, #28]	; (10009f60 <sms_ble_indication_confirmed_fn+0x30>)
10009f42:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009f44:	4b07      	ldr	r3, [pc, #28]	; (10009f64 <sms_ble_indication_confirmed_fn+0x34>)
10009f46:	781b      	ldrb	r3, [r3, #0]
10009f48:	2b00      	cmp	r3, #0
10009f4a:	d102      	bne.n	10009f52 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009f4c:	3a21      	subs	r2, #33	; 0x21
10009f4e:	4b06      	ldr	r3, [pc, #24]	; (10009f68 <sms_ble_indication_confirmed_fn+0x38>)
10009f50:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009f52:	2000      	movs	r0, #0
10009f54:	bd10      	pop	{r4, pc}
10009f56:	46c0      	nop			; (mov r8, r8)
10009f58:	1000b25d 	.word	0x1000b25d
10009f5c:	10018d9b 	.word	0x10018d9b
10009f60:	10018c78 	.word	0x10018c78
10009f64:	10018be0 	.word	0x10018be0
10009f68:	10018c75 	.word	0x10018c75

10009f6c <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10009f6c:	2300      	movs	r3, #0
10009f6e:	4a02      	ldr	r2, [pc, #8]	; (10009f78 <sms_ble_init_variables+0xc>)
10009f70:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
10009f72:	4a02      	ldr	r2, [pc, #8]	; (10009f7c <sms_ble_init_variables+0x10>)
10009f74:	8013      	strh	r3, [r2, #0]
}
10009f76:	4770      	bx	lr
10009f78:	10018c78 	.word	0x10018c78
10009f7c:	10018db4 	.word	0x10018db4

10009f80 <sms_ble_startup>:

void sms_ble_startup(void)
{
10009f80:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f82:	2202      	movs	r2, #2
10009f84:	4b02      	ldr	r3, [pc, #8]	; (10009f90 <sms_ble_startup+0x10>)
10009f86:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10009f88:	2016      	movs	r0, #22
10009f8a:	4b02      	ldr	r3, [pc, #8]	; (10009f94 <sms_ble_startup+0x14>)
10009f8c:	4798      	blx	r3
}
10009f8e:	bd10      	pop	{r4, pc}
10009f90:	10018d9b 	.word	0x10018d9b
10009f94:	1000ace5 	.word	0x1000ace5

10009f98 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f98:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10009f9a:	481b      	ldr	r0, [pc, #108]	; (1000a008 <sms_ble_power_down+0x70>)
10009f9c:	4b1b      	ldr	r3, [pc, #108]	; (1000a00c <sms_ble_power_down+0x74>)
10009f9e:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10009fa0:	4b1b      	ldr	r3, [pc, #108]	; (1000a010 <sms_ble_power_down+0x78>)
10009fa2:	781b      	ldrb	r3, [r3, #0]
10009fa4:	2b00      	cmp	r3, #0
10009fa6:	d105      	bne.n	10009fb4 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10009fa8:	2201      	movs	r2, #1
10009faa:	4b1a      	ldr	r3, [pc, #104]	; (1000a014 <sms_ble_power_down+0x7c>)
10009fac:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10009fae:	4b1a      	ldr	r3, [pc, #104]	; (1000a018 <sms_ble_power_down+0x80>)
10009fb0:	4798      	blx	r3
10009fb2:	e028      	b.n	1000a006 <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10009fb4:	4b16      	ldr	r3, [pc, #88]	; (1000a010 <sms_ble_power_down+0x78>)
10009fb6:	781b      	ldrb	r3, [r3, #0]
10009fb8:	b2db      	uxtb	r3, r3
10009fba:	2b21      	cmp	r3, #33	; 0x21
10009fbc:	d015      	beq.n	10009fea <sms_ble_power_down+0x52>
10009fbe:	d802      	bhi.n	10009fc6 <sms_ble_power_down+0x2e>
10009fc0:	2b20      	cmp	r3, #32
10009fc2:	d003      	beq.n	10009fcc <sms_ble_power_down+0x34>
10009fc4:	e016      	b.n	10009ff4 <sms_ble_power_down+0x5c>
10009fc6:	2b23      	cmp	r3, #35	; 0x23
10009fc8:	d908      	bls.n	10009fdc <sms_ble_power_down+0x44>
10009fca:	e013      	b.n	10009ff4 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009fcc:	4b13      	ldr	r3, [pc, #76]	; (1000a01c <sms_ble_power_down+0x84>)
10009fce:	4798      	blx	r3
10009fd0:	2800      	cmp	r0, #0
10009fd2:	d10f      	bne.n	10009ff4 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009fd4:	2211      	movs	r2, #17
10009fd6:	4b0e      	ldr	r3, [pc, #56]	; (1000a010 <sms_ble_power_down+0x78>)
10009fd8:	701a      	strb	r2, [r3, #0]
10009fda:	e00b      	b.n	10009ff4 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10009fdc:	2100      	movs	r1, #0
10009fde:	232b      	movs	r3, #43	; 0x2b
10009fe0:	4a0f      	ldr	r2, [pc, #60]	; (1000a020 <sms_ble_power_down+0x88>)
10009fe2:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10009fe4:	2000      	movs	r0, #0
10009fe6:	4b0f      	ldr	r3, [pc, #60]	; (1000a024 <sms_ble_power_down+0x8c>)
10009fe8:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fea:	4b0f      	ldr	r3, [pc, #60]	; (1000a028 <sms_ble_power_down+0x90>)
10009fec:	8818      	ldrh	r0, [r3, #0]
10009fee:	2113      	movs	r1, #19
10009ff0:	4b0e      	ldr	r3, [pc, #56]	; (1000a02c <sms_ble_power_down+0x94>)
10009ff2:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009ff4:	2211      	movs	r2, #17
10009ff6:	4b06      	ldr	r3, [pc, #24]	; (1000a010 <sms_ble_power_down+0x78>)
10009ff8:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009ffa:	3a0e      	subs	r2, #14
10009ffc:	4b0c      	ldr	r3, [pc, #48]	; (1000a030 <sms_ble_power_down+0x98>)
10009ffe:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
1000a000:	2016      	movs	r0, #22
1000a002:	4b0c      	ldr	r3, [pc, #48]	; (1000a034 <sms_ble_power_down+0x9c>)
1000a004:	4798      	blx	r3
	}
}
1000a006:	bd10      	pop	{r4, pc}
1000a008:	10015fb0 	.word	0x10015fb0
1000a00c:	1000a8b9 	.word	0x1000a8b9
1000a010:	10018c78 	.word	0x10018c78
1000a014:	10018c75 	.word	0x10018c75
1000a018:	1000ee39 	.word	0x1000ee39
1000a01c:	100100f5 	.word	0x100100f5
1000a020:	10018d00 	.word	0x10018d00
1000a024:	1000af65 	.word	0x1000af65
1000a028:	10018c7a 	.word	0x10018c7a
1000a02c:	10010121 	.word	0x10010121
1000a030:	10018d9b 	.word	0x10018d9b
1000a034:	1000ace5 	.word	0x1000ace5

1000a038 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a038:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000a03a:	2211      	movs	r2, #17
1000a03c:	4b02      	ldr	r3, [pc, #8]	; (1000a048 <sms_ble_adv_report_fn+0x10>)
1000a03e:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a040:	4b02      	ldr	r3, [pc, #8]	; (1000a04c <sms_ble_adv_report_fn+0x14>)
1000a042:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a044:	2000      	movs	r0, #0
1000a046:	bd10      	pop	{r4, pc}
1000a048:	10018c78 	.word	0x10018c78
1000a04c:	10009f99 	.word	0x10009f99

1000a050 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a050:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
1000a052:	4b0c      	ldr	r3, [pc, #48]	; (1000a084 <sms_ble_connected_fn+0x34>)
1000a054:	781b      	ldrb	r3, [r3, #0]
1000a056:	2b20      	cmp	r3, #32
1000a058:	d110      	bne.n	1000a07c <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a05a:	8902      	ldrh	r2, [r0, #8]
1000a05c:	4b0a      	ldr	r3, [pc, #40]	; (1000a088 <sms_ble_connected_fn+0x38>)
1000a05e:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
1000a060:	2221      	movs	r2, #33	; 0x21
1000a062:	4b08      	ldr	r3, [pc, #32]	; (1000a084 <sms_ble_connected_fn+0x34>)
1000a064:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
1000a066:	4809      	ldr	r0, [pc, #36]	; (1000a08c <sms_ble_connected_fn+0x3c>)
1000a068:	4b09      	ldr	r3, [pc, #36]	; (1000a090 <sms_ble_connected_fn+0x40>)
1000a06a:	4798      	blx	r3
1000a06c:	4809      	ldr	r0, [pc, #36]	; (1000a094 <sms_ble_connected_fn+0x44>)
1000a06e:	4b0a      	ldr	r3, [pc, #40]	; (1000a098 <sms_ble_connected_fn+0x48>)
1000a070:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
1000a072:	22fa      	movs	r2, #250	; 0xfa
1000a074:	0052      	lsls	r2, r2, #1
1000a076:	4b09      	ldr	r3, [pc, #36]	; (1000a09c <sms_ble_connected_fn+0x4c>)
1000a078:	601a      	str	r2, [r3, #0]
1000a07a:	e001      	b.n	1000a080 <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
1000a07c:	4b08      	ldr	r3, [pc, #32]	; (1000a0a0 <sms_ble_connected_fn+0x50>)
1000a07e:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a080:	2000      	movs	r0, #0
1000a082:	bd10      	pop	{r4, pc}
1000a084:	10018c78 	.word	0x10018c78
1000a088:	10018d8e 	.word	0x10018d8e
1000a08c:	10015d04 	.word	0x10015d04
1000a090:	10014b59 	.word	0x10014b59
1000a094:	10015fc8 	.word	0x10015fc8
1000a098:	10014a39 	.word	0x10014a39
1000a09c:	10018c70 	.word	0x10018c70
1000a0a0:	10009f99 	.word	0x10009f99

1000a0a4 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a0a4:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
1000a0a6:	4b0e      	ldr	r3, [pc, #56]	; (1000a0e0 <sms_ble_paired_fn+0x3c>)
1000a0a8:	781b      	ldrb	r3, [r3, #0]
1000a0aa:	2b21      	cmp	r3, #33	; 0x21
1000a0ac:	d114      	bne.n	1000a0d8 <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
1000a0ae:	2222      	movs	r2, #34	; 0x22
1000a0b0:	4b0b      	ldr	r3, [pc, #44]	; (1000a0e0 <sms_ble_paired_fn+0x3c>)
1000a0b2:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0b4:	480b      	ldr	r0, [pc, #44]	; (1000a0e4 <sms_ble_paired_fn+0x40>)
1000a0b6:	4b0c      	ldr	r3, [pc, #48]	; (1000a0e8 <sms_ble_paired_fn+0x44>)
1000a0b8:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0ba:	2101      	movs	r1, #1
1000a0bc:	2001      	movs	r0, #1
1000a0be:	4b0b      	ldr	r3, [pc, #44]	; (1000a0ec <sms_ble_paired_fn+0x48>)
1000a0c0:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
1000a0c2:	480b      	ldr	r0, [pc, #44]	; (1000a0f0 <sms_ble_paired_fn+0x4c>)
1000a0c4:	4b0b      	ldr	r3, [pc, #44]	; (1000a0f4 <sms_ble_paired_fn+0x50>)
1000a0c6:	4798      	blx	r3
1000a0c8:	480b      	ldr	r0, [pc, #44]	; (1000a0f8 <sms_ble_paired_fn+0x54>)
1000a0ca:	4b0c      	ldr	r3, [pc, #48]	; (1000a0fc <sms_ble_paired_fn+0x58>)
1000a0cc:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
1000a0ce:	2201      	movs	r2, #1
1000a0d0:	4252      	negs	r2, r2
1000a0d2:	4b0b      	ldr	r3, [pc, #44]	; (1000a100 <sms_ble_paired_fn+0x5c>)
1000a0d4:	601a      	str	r2, [r3, #0]
1000a0d6:	e001      	b.n	1000a0dc <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
1000a0d8:	4b0a      	ldr	r3, [pc, #40]	; (1000a104 <sms_ble_paired_fn+0x60>)
1000a0da:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0dc:	2000      	movs	r0, #0
1000a0de:	bd10      	pop	{r4, pc}
1000a0e0:	10018c78 	.word	0x10018c78
1000a0e4:	10015fd8 	.word	0x10015fd8
1000a0e8:	1000a8b9 	.word	0x1000a8b9
1000a0ec:	1000aff1 	.word	0x1000aff1
1000a0f0:	10015d04 	.word	0x10015d04
1000a0f4:	10014b59 	.word	0x10014b59
1000a0f8:	10015fa4 	.word	0x10015fa4
1000a0fc:	10014a39 	.word	0x10014a39
1000a100:	10018c70 	.word	0x10018c70
1000a104:	10009f99 	.word	0x10009f99

1000a108 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
1000a108:	b510      	push	{r4, lr}
1000a10a:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
1000a10c:	2220      	movs	r2, #32
1000a10e:	4b14      	ldr	r3, [pc, #80]	; (1000a160 <sms_ble_advertise+0x58>)
1000a110:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a112:	4b14      	ldr	r3, [pc, #80]	; (1000a164 <sms_ble_advertise+0x5c>)
1000a114:	4798      	blx	r3
1000a116:	1e04      	subs	r4, r0, #0
1000a118:	d007      	beq.n	1000a12a <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a11a:	4813      	ldr	r0, [pc, #76]	; (1000a168 <sms_ble_advertise+0x60>)
1000a11c:	4b13      	ldr	r3, [pc, #76]	; (1000a16c <sms_ble_advertise+0x64>)
1000a11e:	4798      	blx	r3
1000a120:	4813      	ldr	r0, [pc, #76]	; (1000a170 <sms_ble_advertise+0x68>)
1000a122:	4b14      	ldr	r3, [pc, #80]	; (1000a174 <sms_ble_advertise+0x6c>)
1000a124:	4798      	blx	r3
		return status;
1000a126:	0020      	movs	r0, r4
1000a128:	e018      	b.n	1000a15c <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a12a:	2300      	movs	r3, #0
1000a12c:	9302      	str	r3, [sp, #8]
1000a12e:	4b12      	ldr	r3, [pc, #72]	; (1000a178 <sms_ble_advertise+0x70>)
1000a130:	9301      	str	r3, [sp, #4]
1000a132:	23c8      	movs	r3, #200	; 0xc8
1000a134:	00db      	lsls	r3, r3, #3
1000a136:	9300      	str	r3, [sp, #0]
1000a138:	2300      	movs	r3, #0
1000a13a:	2200      	movs	r2, #0
1000a13c:	2101      	movs	r1, #1
1000a13e:	2000      	movs	r0, #0
1000a140:	4c0e      	ldr	r4, [pc, #56]	; (1000a17c <sms_ble_advertise+0x74>)
1000a142:	47a0      	blx	r4
1000a144:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
1000a146:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a148:	2c00      	cmp	r4, #0
1000a14a:	d007      	beq.n	1000a15c <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a14c:	4806      	ldr	r0, [pc, #24]	; (1000a168 <sms_ble_advertise+0x60>)
1000a14e:	4b07      	ldr	r3, [pc, #28]	; (1000a16c <sms_ble_advertise+0x64>)
1000a150:	4798      	blx	r3
1000a152:	0021      	movs	r1, r4
1000a154:	480a      	ldr	r0, [pc, #40]	; (1000a180 <sms_ble_advertise+0x78>)
1000a156:	4b07      	ldr	r3, [pc, #28]	; (1000a174 <sms_ble_advertise+0x6c>)
1000a158:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000a15a:	20e2      	movs	r0, #226	; 0xe2
}
1000a15c:	b004      	add	sp, #16
1000a15e:	bd10      	pop	{r4, pc}
1000a160:	10018c78 	.word	0x10018c78
1000a164:	1000e49d 	.word	0x1000e49d
1000a168:	10015d04 	.word	0x10015d04
1000a16c:	10014b59 	.word	0x10014b59
1000a170:	10015fec 	.word	0x10015fec
1000a174:	10014a39 	.word	0x10014a39
1000a178:	0000028f 	.word	0x0000028f
1000a17c:	1000ffb9 	.word	0x1000ffb9
1000a180:	10016020 	.word	0x10016020

1000a184 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a184:	b510      	push	{r4, lr}
1000a186:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000a188:	4b16      	ldr	r3, [pc, #88]	; (1000a1e4 <sms_ble_disconnected_fn+0x60>)
1000a18a:	781b      	ldrb	r3, [r3, #0]
1000a18c:	2b22      	cmp	r3, #34	; 0x22
1000a18e:	d10a      	bne.n	1000a1a6 <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a190:	2100      	movs	r1, #0
1000a192:	3309      	adds	r3, #9
1000a194:	4a14      	ldr	r2, [pc, #80]	; (1000a1e8 <sms_ble_disconnected_fn+0x64>)
1000a196:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a198:	2000      	movs	r0, #0
1000a19a:	4b14      	ldr	r3, [pc, #80]	; (1000a1ec <sms_ble_disconnected_fn+0x68>)
1000a19c:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a19e:	2100      	movs	r1, #0
1000a1a0:	2000      	movs	r0, #0
1000a1a2:	4b13      	ldr	r3, [pc, #76]	; (1000a1f0 <sms_ble_disconnected_fn+0x6c>)
1000a1a4:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000a1a6:	4b0f      	ldr	r3, [pc, #60]	; (1000a1e4 <sms_ble_disconnected_fn+0x60>)
1000a1a8:	2211      	movs	r2, #17
1000a1aa:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000a1ac:	781b      	ldrb	r3, [r3, #0]
1000a1ae:	4b11      	ldr	r3, [pc, #68]	; (1000a1f4 <sms_ble_disconnected_fn+0x70>)
1000a1b0:	781b      	ldrb	r3, [r3, #0]
1000a1b2:	4b11      	ldr	r3, [pc, #68]	; (1000a1f8 <sms_ble_disconnected_fn+0x74>)
1000a1b4:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1b6:	78a3      	ldrb	r3, [r4, #2]
1000a1b8:	2b1a      	cmp	r3, #26
1000a1ba:	d00b      	beq.n	1000a1d4 <sms_ble_disconnected_fn+0x50>
1000a1bc:	b2da      	uxtb	r2, r3
1000a1be:	2a1a      	cmp	r2, #26
1000a1c0:	d804      	bhi.n	1000a1cc <sms_ble_disconnected_fn+0x48>
1000a1c2:	2b05      	cmp	r3, #5
1000a1c4:	d006      	beq.n	1000a1d4 <sms_ble_disconnected_fn+0x50>
1000a1c6:	2b08      	cmp	r3, #8
1000a1c8:	d107      	bne.n	1000a1da <sms_ble_disconnected_fn+0x56>
1000a1ca:	e003      	b.n	1000a1d4 <sms_ble_disconnected_fn+0x50>
1000a1cc:	2b29      	cmp	r3, #41	; 0x29
1000a1ce:	d001      	beq.n	1000a1d4 <sms_ble_disconnected_fn+0x50>
1000a1d0:	2b3b      	cmp	r3, #59	; 0x3b
1000a1d2:	d102      	bne.n	1000a1da <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a1d4:	4b09      	ldr	r3, [pc, #36]	; (1000a1fc <sms_ble_disconnected_fn+0x78>)
1000a1d6:	4798      	blx	r3
        break;
1000a1d8:	e001      	b.n	1000a1de <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a1da:	4b09      	ldr	r3, [pc, #36]	; (1000a200 <sms_ble_disconnected_fn+0x7c>)
1000a1dc:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a1de:	2000      	movs	r0, #0
1000a1e0:	bd10      	pop	{r4, pc}
1000a1e2:	46c0      	nop			; (mov r8, r8)
1000a1e4:	10018c78 	.word	0x10018c78
1000a1e8:	10018d00 	.word	0x10018d00
1000a1ec:	1000af65 	.word	0x1000af65
1000a1f0:	1000aff1 	.word	0x1000aff1
1000a1f4:	10018be0 	.word	0x10018be0
1000a1f8:	10018d9b 	.word	0x10018d9b
1000a1fc:	1000a109 	.word	0x1000a109
1000a200:	10009f99 	.word	0x10009f99

1000a204 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a204:	b530      	push	{r4, r5, lr}
1000a206:	b087      	sub	sp, #28
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
1000a208:	2801      	cmp	r0, #1
1000a20a:	d02d      	beq.n	1000a268 <sms_ble_send_characteristic+0x64>
1000a20c:	2800      	cmp	r0, #0
1000a20e:	d002      	beq.n	1000a216 <sms_ble_send_characteristic+0x12>
1000a210:	2802      	cmp	r0, #2
1000a212:	d03f      	beq.n	1000a294 <sms_ble_send_characteristic+0x90>
1000a214:	e097      	b.n	1000a346 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
1000a216:	2200      	movs	r2, #0
1000a218:	ab01      	add	r3, sp, #4
1000a21a:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
1000a21c:	4b60      	ldr	r3, [pc, #384]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a21e:	791b      	ldrb	r3, [r3, #4]
1000a220:	2b00      	cmp	r3, #0
1000a222:	d00a      	beq.n	1000a23a <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
1000a224:	4b5e      	ldr	r3, [pc, #376]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a226:	795a      	ldrb	r2, [r3, #5]
1000a228:	2300      	movs	r3, #0
1000a22a:	2a7e      	cmp	r2, #126	; 0x7e
1000a22c:	d801      	bhi.n	1000a232 <sms_ble_send_characteristic+0x2e>
1000a22e:	3201      	adds	r2, #1
1000a230:	b2d3      	uxtb	r3, r2
1000a232:	4a5b      	ldr	r2, [pc, #364]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a234:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000a236:	aa01      	add	r2, sp, #4
1000a238:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000a23a:	4b59      	ldr	r3, [pc, #356]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a23c:	7a9b      	ldrb	r3, [r3, #10]
1000a23e:	2b00      	cmp	r3, #0
1000a240:	d00e      	beq.n	1000a260 <sms_ble_send_characteristic+0x5c>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000a242:	4b57      	ldr	r3, [pc, #348]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a244:	7adb      	ldrb	r3, [r3, #11]
1000a246:	2bff      	cmp	r3, #255	; 0xff
1000a248:	d002      	beq.n	1000a250 <sms_ble_send_characteristic+0x4c>
1000a24a:	3301      	adds	r3, #1
1000a24c:	b2db      	uxtb	r3, r3
1000a24e:	e000      	b.n	1000a252 <sms_ble_send_characteristic+0x4e>
1000a250:	2300      	movs	r3, #0
1000a252:	4a53      	ldr	r2, [pc, #332]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a254:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000a256:	aa01      	add	r2, sp, #4
1000a258:	3b80      	subs	r3, #128	; 0x80
1000a25a:	7811      	ldrb	r1, [r2, #0]
1000a25c:	430b      	orrs	r3, r1
1000a25e:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a260:	4b4f      	ldr	r3, [pc, #316]	; (1000a3a0 <sms_ble_send_characteristic+0x19c>)
1000a262:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
1000a264:	2201      	movs	r2, #1
        break;
1000a266:	e070      	b.n	1000a34a <sms_ble_send_characteristic+0x146>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
1000a268:	494e      	ldr	r1, [pc, #312]	; (1000a3a4 <sms_ble_send_characteristic+0x1a0>)
1000a26a:	6a0a      	ldr	r2, [r1, #32]
1000a26c:	ab01      	add	r3, sp, #4
1000a26e:	1610      	asrs	r0, r2, #24
1000a270:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000a272:	1410      	asrs	r0, r2, #16
1000a274:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000a276:	1210      	asrs	r0, r2, #8
1000a278:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
1000a27a:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
1000a27c:	69ca      	ldr	r2, [r1, #28]
1000a27e:	1610      	asrs	r0, r2, #24
1000a280:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000a282:	1410      	asrs	r0, r2, #16
1000a284:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
1000a286:	1210      	asrs	r0, r2, #8
1000a288:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
1000a28a:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a28c:	2340      	movs	r3, #64	; 0x40
1000a28e:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000a290:	2208      	movs	r2, #8
        break;
1000a292:	e05a      	b.n	1000a34a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a294:	4a44      	ldr	r2, [pc, #272]	; (1000a3a8 <sms_ble_send_characteristic+0x1a4>)
1000a296:	230e      	movs	r3, #14
1000a298:	5ed1      	ldrsh	r1, [r2, r3]
1000a29a:	ab01      	add	r3, sp, #4
1000a29c:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a29e:	1209      	asrs	r1, r1, #8
1000a2a0:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2a2:	2010      	movs	r0, #16
1000a2a4:	5e11      	ldrsh	r1, [r2, r0]
1000a2a6:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a2a8:	1209      	asrs	r1, r1, #8
1000a2aa:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a2ac:	2012      	movs	r0, #18
1000a2ae:	5e11      	ldrsh	r1, [r2, r0]
1000a2b0:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a2b2:	1209      	asrs	r1, r1, #8
1000a2b4:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a2b6:	2008      	movs	r0, #8
1000a2b8:	5e11      	ldrsh	r1, [r2, r0]
1000a2ba:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a2bc:	1209      	asrs	r1, r1, #8
1000a2be:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a2c0:	200a      	movs	r0, #10
1000a2c2:	5e11      	ldrsh	r1, [r2, r0]
1000a2c4:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a2c6:	1209      	asrs	r1, r1, #8
1000a2c8:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a2ca:	200c      	movs	r0, #12
1000a2cc:	5e11      	ldrsh	r1, [r2, r0]
1000a2ce:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a2d0:	1209      	asrs	r1, r1, #8
1000a2d2:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a2d4:	2344      	movs	r3, #68	; 0x44
1000a2d6:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
1000a2d8:	3b18      	subs	r3, #24
1000a2da:	5cd3      	ldrb	r3, [r2, r3]
1000a2dc:	2b00      	cmp	r3, #0
1000a2de:	d014      	beq.n	1000a30a <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a2e0:	2314      	movs	r3, #20
1000a2e2:	5ed1      	ldrsh	r1, [r2, r3]
1000a2e4:	ab01      	add	r3, sp, #4
1000a2e6:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a2e8:	1209      	asrs	r1, r1, #8
1000a2ea:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a2ec:	2016      	movs	r0, #22
1000a2ee:	5e11      	ldrsh	r1, [r2, r0]
1000a2f0:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a2f2:	1209      	asrs	r1, r1, #8
1000a2f4:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a2f6:	2018      	movs	r0, #24
1000a2f8:	5e11      	ldrsh	r1, [r2, r0]
1000a2fa:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a2fc:	1209      	asrs	r1, r1, #8
1000a2fe:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a300:	2100      	movs	r1, #0
1000a302:	232c      	movs	r3, #44	; 0x2c
1000a304:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a306:	2212      	movs	r2, #18
1000a308:	e008      	b.n	1000a31c <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a30a:	ab01      	add	r3, sp, #4
1000a30c:	2200      	movs	r2, #0
1000a30e:	731a      	strb	r2, [r3, #12]
1000a310:	735a      	strb	r2, [r3, #13]
1000a312:	739a      	strb	r2, [r3, #14]
1000a314:	73da      	strb	r2, [r3, #15]
1000a316:	741a      	strb	r2, [r3, #16]
1000a318:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a31a:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a31c:	232d      	movs	r3, #45	; 0x2d
1000a31e:	4922      	ldr	r1, [pc, #136]	; (1000a3a8 <sms_ble_send_characteristic+0x1a4>)
1000a320:	5ccb      	ldrb	r3, [r1, r3]
1000a322:	2b00      	cmp	r3, #0
1000a324:	d00a      	beq.n	1000a33c <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a326:	000a      	movs	r2, r1
1000a328:	69cb      	ldr	r3, [r1, #28]
1000a32a:	a901      	add	r1, sp, #4
1000a32c:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a32e:	121b      	asrs	r3, r3, #8
1000a330:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a332:	2100      	movs	r1, #0
1000a334:	232d      	movs	r3, #45	; 0x2d
1000a336:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a338:	2214      	movs	r2, #20
1000a33a:	e006      	b.n	1000a34a <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a33c:	ab01      	add	r3, sp, #4
1000a33e:	2100      	movs	r1, #0
1000a340:	7499      	strb	r1, [r3, #18]
1000a342:	74d9      	strb	r1, [r3, #19]
1000a344:	e001      	b.n	1000a34a <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a346:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a348:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a34a:	b292      	uxth	r2, r2
1000a34c:	a901      	add	r1, sp, #4
1000a34e:	0028      	movs	r0, r5
1000a350:	4b16      	ldr	r3, [pc, #88]	; (1000a3ac <sms_ble_send_characteristic+0x1a8>)
1000a352:	4798      	blx	r3
1000a354:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a356:	d11f      	bne.n	1000a398 <sms_ble_send_characteristic+0x194>
		DBG_LOG_CONT_DEV(" SET! ");
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a358:	4b15      	ldr	r3, [pc, #84]	; (1000a3b0 <sms_ble_send_characteristic+0x1ac>)
1000a35a:	8818      	ldrh	r0, [r3, #0]
1000a35c:	0029      	movs	r1, r5
1000a35e:	4b15      	ldr	r3, [pc, #84]	; (1000a3b4 <sms_ble_send_characteristic+0x1b0>)
1000a360:	4798      	blx	r3
1000a362:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000a364:	d115      	bne.n	1000a392 <sms_ble_send_characteristic+0x18e>
			ble_instance.sending_queue++;
1000a366:	4a14      	ldr	r2, [pc, #80]	; (1000a3b8 <sms_ble_send_characteristic+0x1b4>)
1000a368:	7853      	ldrb	r3, [r2, #1]
1000a36a:	3301      	adds	r3, #1
1000a36c:	b2db      	uxtb	r3, r3
1000a36e:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000a370:	4b12      	ldr	r3, [pc, #72]	; (1000a3bc <sms_ble_send_characteristic+0x1b8>)
1000a372:	8819      	ldrh	r1, [r3, #0]
1000a374:	3101      	adds	r1, #1
1000a376:	b289      	uxth	r1, r1
1000a378:	8019      	strh	r1, [r3, #0]
			DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
1000a37a:	4811      	ldr	r0, [pc, #68]	; (1000a3c0 <sms_ble_send_characteristic+0x1bc>)
1000a37c:	4d11      	ldr	r5, [pc, #68]	; (1000a3c4 <sms_ble_send_characteristic+0x1c0>)
1000a37e:	47a8      	blx	r5
			DBG_LOG("T/O: 20ms");
1000a380:	4811      	ldr	r0, [pc, #68]	; (1000a3c8 <sms_ble_send_characteristic+0x1c4>)
1000a382:	4b12      	ldr	r3, [pc, #72]	; (1000a3cc <sms_ble_send_characteristic+0x1c8>)
1000a384:	4798      	blx	r3
1000a386:	4812      	ldr	r0, [pc, #72]	; (1000a3d0 <sms_ble_send_characteristic+0x1cc>)
1000a388:	47a8      	blx	r5
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
1000a38a:	2202      	movs	r2, #2
1000a38c:	4b11      	ldr	r3, [pc, #68]	; (1000a3d4 <sms_ble_send_characteristic+0x1d0>)
1000a38e:	601a      	str	r2, [r3, #0]
1000a390:	e002      	b.n	1000a398 <sms_ble_send_characteristic+0x194>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000a392:	4811      	ldr	r0, [pc, #68]	; (1000a3d8 <sms_ble_send_characteristic+0x1d4>)
1000a394:	4b0b      	ldr	r3, [pc, #44]	; (1000a3c4 <sms_ble_send_characteristic+0x1c0>)
1000a396:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
1000a398:	0020      	movs	r0, r4
1000a39a:	b007      	add	sp, #28
1000a39c:	bd30      	pop	{r4, r5, pc}
1000a39e:	46c0      	nop			; (mov r8, r8)
1000a3a0:	10018c7c 	.word	0x10018c7c
1000a3a4:	10018d00 	.word	0x10018d00
1000a3a8:	10018be4 	.word	0x10018be4
1000a3ac:	1001089d 	.word	0x1001089d
1000a3b0:	10018c7a 	.word	0x10018c7a
1000a3b4:	10010a3d 	.word	0x10010a3d
1000a3b8:	10018c78 	.word	0x10018c78
1000a3bc:	10018db4 	.word	0x10018db4
1000a3c0:	10016064 	.word	0x10016064
1000a3c4:	10014a39 	.word	0x10014a39
1000a3c8:	10015d04 	.word	0x10015d04
1000a3cc:	10014b59 	.word	0x10014b59
1000a3d0:	10016070 	.word	0x10016070
1000a3d4:	10018c70 	.word	0x10018c70
1000a3d8:	1001607c 	.word	0x1001607c

1000a3dc <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a3dc:	b510      	push	{r4, lr}
1000a3de:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a3e0:	0001      	movs	r1, r0
1000a3e2:	3112      	adds	r1, #18
1000a3e4:	2301      	movs	r3, #1
1000a3e6:	9301      	str	r3, [sp, #4]
1000a3e8:	0003      	movs	r3, r0
1000a3ea:	3314      	adds	r3, #20
1000a3ec:	9300      	str	r3, [sp, #0]
1000a3ee:	2300      	movs	r3, #0
1000a3f0:	2200      	movs	r2, #0
1000a3f2:	4c02      	ldr	r4, [pc, #8]	; (1000a3fc <sms_ble_primary_service_define+0x20>)
1000a3f4:	47a0      	blx	r4
}
1000a3f6:	b002      	add	sp, #8
1000a3f8:	bd10      	pop	{r4, pc}
1000a3fa:	46c0      	nop			; (mov r8, r8)
1000a3fc:	1001087d 	.word	0x1001087d

1000a400 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a402:	464f      	mov	r7, r9
1000a404:	4646      	mov	r6, r8
1000a406:	b4c0      	push	{r6, r7}
1000a408:	b083      	sub	sp, #12
1000a40a:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a40c:	2801      	cmp	r0, #1
1000a40e:	d010      	beq.n	1000a432 <sms_ble_service_init+0x32>
1000a410:	2800      	cmp	r0, #0
1000a412:	d002      	beq.n	1000a41a <sms_ble_service_init+0x1a>
1000a414:	2802      	cmp	r0, #2
1000a416:	d019      	beq.n	1000a44c <sms_ble_service_init+0x4c>
1000a418:	e025      	b.n	1000a466 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a41a:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a41c:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a41e:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a420:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a422:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a424:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a426:	221c      	movs	r2, #28
1000a428:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a42a:	3a1b      	subs	r2, #27
1000a42c:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a42e:	4691      	mov	r9, r2
1000a430:	e023      	b.n	1000a47a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a432:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a434:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a436:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a438:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a43a:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a43c:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a43e:	221c      	movs	r2, #28
1000a440:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a442:	3a14      	subs	r2, #20
1000a444:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a446:	3a06      	subs	r2, #6
1000a448:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a44a:	e016      	b.n	1000a47a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a44c:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a44e:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a450:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a452:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a454:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a456:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a458:	221c      	movs	r2, #28
1000a45a:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a45c:	3a08      	subs	r2, #8
1000a45e:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a460:	3a11      	subs	r2, #17
1000a462:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a464:	e009      	b.n	1000a47a <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a466:	2300      	movs	r3, #0
1000a468:	2400      	movs	r4, #0
1000a46a:	2500      	movs	r5, #0
1000a46c:	2600      	movs	r6, #0
1000a46e:	2700      	movs	r7, #0
1000a470:	2000      	movs	r0, #0
1000a472:	2200      	movs	r2, #0
1000a474:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a476:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a478:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a47a:	464a      	mov	r2, r9
1000a47c:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a47e:	2202      	movs	r2, #2
1000a480:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a482:	4642      	mov	r2, r8
1000a484:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a486:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a488:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a48a:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a48c:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a48e:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a490:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a492:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a494:	2300      	movs	r3, #0
1000a496:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a498:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a49a:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a49c:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a49e:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a4a0:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a4a2:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a4a4:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a4a6:	2412      	movs	r4, #18
1000a4a8:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a4aa:	4662      	mov	r2, ip
1000a4ac:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a4ae:	466a      	mov	r2, sp
1000a4b0:	8892      	ldrh	r2, [r2, #4]
1000a4b2:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a4b4:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a4b6:	2011      	movs	r0, #17
1000a4b8:	2234      	movs	r2, #52	; 0x34
1000a4ba:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a4bc:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a4be:	2200      	movs	r2, #0
1000a4c0:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a4c2:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a4c4:	3033      	adds	r0, #51	; 0x33
1000a4c6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a4c8:	3001      	adds	r0, #1
1000a4ca:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a4cc:	3001      	adds	r0, #1
1000a4ce:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a4d0:	2248      	movs	r2, #72	; 0x48
1000a4d2:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a4d4:	3202      	adds	r2, #2
1000a4d6:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a4d8:	3202      	adds	r2, #2
1000a4da:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a4dc:	640b      	str	r3, [r1, #64]	; 0x40
1000a4de:	b003      	add	sp, #12
1000a4e0:	bc0c      	pop	{r2, r3}
1000a4e2:	4690      	mov	r8, r2
1000a4e4:	4699      	mov	r9, r3
1000a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a4e8 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a4e8:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
1000a4ea:	4b05      	ldr	r3, [pc, #20]	; (1000a500 <sms_button_bt0_callback+0x18>)
1000a4ec:	2201      	movs	r2, #1
1000a4ee:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a4f0:	7858      	ldrb	r0, [r3, #1]
1000a4f2:	2300      	movs	r3, #0
1000a4f4:	2200      	movs	r2, #0
1000a4f6:	2102      	movs	r1, #2
1000a4f8:	4c02      	ldr	r4, [pc, #8]	; (1000a504 <sms_button_bt0_callback+0x1c>)
1000a4fa:	47a0      	blx	r4
}
1000a4fc:	bd10      	pop	{r4, pc}
1000a4fe:	46c0      	nop			; (mov r8, r8)
1000a500:	10018c7c 	.word	0x10018c7c
1000a504:	1000eb6d 	.word	0x1000eb6d

1000a508 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a508:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
1000a50a:	4b05      	ldr	r3, [pc, #20]	; (1000a520 <sms_button_bt1_callback+0x18>)
1000a50c:	2201      	movs	r2, #1
1000a50e:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a510:	79d8      	ldrb	r0, [r3, #7]
1000a512:	2300      	movs	r3, #0
1000a514:	2200      	movs	r2, #0
1000a516:	2102      	movs	r1, #2
1000a518:	4c02      	ldr	r4, [pc, #8]	; (1000a524 <sms_button_bt1_callback+0x1c>)
1000a51a:	47a0      	blx	r4
}
1000a51c:	bd10      	pop	{r4, pc}
1000a51e:	46c0      	nop			; (mov r8, r8)
1000a520:	10018c7c 	.word	0x10018c7c
1000a524:	1000eb6d 	.word	0x1000eb6d

1000a528 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
1000a528:	4b08      	ldr	r3, [pc, #32]	; (1000a54c <sms_button_init_variables+0x24>)
1000a52a:	2200      	movs	r2, #0
1000a52c:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
1000a52e:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000a530:	211f      	movs	r1, #31
1000a532:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
1000a534:	391e      	subs	r1, #30
1000a536:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000a538:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
1000a53a:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
1000a53c:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000a53e:	201d      	movs	r0, #29
1000a540:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
1000a542:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
1000a544:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
1000a546:	72da      	strb	r2, [r3, #11]
}
1000a548:	4770      	bx	lr
1000a54a:	46c0      	nop			; (mov r8, r8)
1000a54c:	10018c7c 	.word	0x10018c7c

1000a550 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
1000a550:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a552:	4657      	mov	r7, sl
1000a554:	464e      	mov	r6, r9
1000a556:	4645      	mov	r5, r8
1000a558:	b4e0      	push	{r5, r6, r7}
1000a55a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a55c:	ac01      	add	r4, sp, #4
1000a55e:	0020      	movs	r0, r4
1000a560:	4b1d      	ldr	r3, [pc, #116]	; (1000a5d8 <sms_button_gpio_init+0x88>)
1000a562:	469a      	mov	sl, r3
1000a564:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a566:	2300      	movs	r3, #0
1000a568:	4699      	mov	r9, r3
1000a56a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a56c:	2302      	movs	r3, #2
1000a56e:	4698      	mov	r8, r3
1000a570:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a572:	2701      	movs	r7, #1
1000a574:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a576:	4e19      	ldr	r6, [pc, #100]	; (1000a5dc <sms_button_gpio_init+0x8c>)
1000a578:	7870      	ldrb	r0, [r6, #1]
1000a57a:	0021      	movs	r1, r4
1000a57c:	4d18      	ldr	r5, [pc, #96]	; (1000a5e0 <sms_button_gpio_init+0x90>)
1000a57e:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a580:	0020      	movs	r0, r4
1000a582:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a584:	464b      	mov	r3, r9
1000a586:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a588:	4643      	mov	r3, r8
1000a58a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a58c:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a58e:	79f0      	ldrb	r0, [r6, #7]
1000a590:	0021      	movs	r1, r4
1000a592:	47a8      	blx	r5
1000a594:	2800      	cmp	r0, #0
1000a596:	d005      	beq.n	1000a5a4 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a598:	4812      	ldr	r0, [pc, #72]	; (1000a5e4 <sms_button_gpio_init+0x94>)
1000a59a:	4b13      	ldr	r3, [pc, #76]	; (1000a5e8 <sms_button_gpio_init+0x98>)
1000a59c:	4798      	blx	r3
1000a59e:	4813      	ldr	r0, [pc, #76]	; (1000a5ec <sms_button_gpio_init+0x9c>)
1000a5a0:	4b13      	ldr	r3, [pc, #76]	; (1000a5f0 <sms_button_gpio_init+0xa0>)
1000a5a2:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5a4:	ac01      	add	r4, sp, #4
1000a5a6:	0020      	movs	r0, r4
1000a5a8:	4b0b      	ldr	r3, [pc, #44]	; (1000a5d8 <sms_button_gpio_init+0x88>)
1000a5aa:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5ac:	2300      	movs	r3, #0
1000a5ae:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a5b0:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a5b2:	0021      	movs	r1, r4
1000a5b4:	2017      	movs	r0, #23
1000a5b6:	4b0a      	ldr	r3, [pc, #40]	; (1000a5e0 <sms_button_gpio_init+0x90>)
1000a5b8:	4798      	blx	r3
1000a5ba:	2800      	cmp	r0, #0
1000a5bc:	d005      	beq.n	1000a5ca <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a5be:	4809      	ldr	r0, [pc, #36]	; (1000a5e4 <sms_button_gpio_init+0x94>)
1000a5c0:	4b09      	ldr	r3, [pc, #36]	; (1000a5e8 <sms_button_gpio_init+0x98>)
1000a5c2:	4798      	blx	r3
1000a5c4:	480b      	ldr	r0, [pc, #44]	; (1000a5f4 <sms_button_gpio_init+0xa4>)
1000a5c6:	4b0a      	ldr	r3, [pc, #40]	; (1000a5f0 <sms_button_gpio_init+0xa0>)
1000a5c8:	4798      	blx	r3
    }
}
1000a5ca:	b002      	add	sp, #8
1000a5cc:	bc1c      	pop	{r2, r3, r4}
1000a5ce:	4690      	mov	r8, r2
1000a5d0:	4699      	mov	r9, r3
1000a5d2:	46a2      	mov	sl, r4
1000a5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5d6:	46c0      	nop			; (mov r8, r8)
1000a5d8:	1000bc41 	.word	0x1000bc41
1000a5dc:	10018c7c 	.word	0x10018c7c
1000a5e0:	1000bc51 	.word	0x1000bc51
1000a5e4:	10015d04 	.word	0x10015d04
1000a5e8:	10014b59 	.word	0x10014b59
1000a5ec:	10016108 	.word	0x10016108
1000a5f0:	10014a39 	.word	0x10014a39
1000a5f4:	10016140 	.word	0x10016140

1000a5f8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a5f8:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a5fa:	4d05      	ldr	r5, [pc, #20]	; (1000a610 <sms_button_register_callbacks+0x18>)
1000a5fc:	7868      	ldrb	r0, [r5, #1]
1000a5fe:	2202      	movs	r2, #2
1000a600:	4904      	ldr	r1, [pc, #16]	; (1000a614 <sms_button_register_callbacks+0x1c>)
1000a602:	4c05      	ldr	r4, [pc, #20]	; (1000a618 <sms_button_register_callbacks+0x20>)
1000a604:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a606:	79e8      	ldrb	r0, [r5, #7]
1000a608:	2202      	movs	r2, #2
1000a60a:	4904      	ldr	r1, [pc, #16]	; (1000a61c <sms_button_register_callbacks+0x24>)
1000a60c:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a60e:	bd70      	pop	{r4, r5, r6, pc}
1000a610:	10018c7c 	.word	0x10018c7c
1000a614:	1000a4e9 	.word	0x1000a4e9
1000a618:	1000c081 	.word	0x1000c081
1000a61c:	1000a509 	.word	0x1000a509

1000a620 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a620:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a622:	201f      	movs	r0, #31
1000a624:	4c08      	ldr	r4, [pc, #32]	; (1000a648 <sms_button_get_state+0x28>)
1000a626:	47a0      	blx	r4
1000a628:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a62a:	201d      	movs	r0, #29
1000a62c:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a62e:	2d00      	cmp	r5, #0
1000a630:	d004      	beq.n	1000a63c <sms_button_get_state+0x1c>
1000a632:	2303      	movs	r3, #3
1000a634:	2800      	cmp	r0, #0
1000a636:	d104      	bne.n	1000a642 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a638:	3b02      	subs	r3, #2
1000a63a:	e002      	b.n	1000a642 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a63c:	1e43      	subs	r3, r0, #1
1000a63e:	4198      	sbcs	r0, r3
1000a640:	0043      	lsls	r3, r0, #1
}
1000a642:	0018      	movs	r0, r3
1000a644:	bd70      	pop	{r4, r5, r6, pc}
1000a646:	46c0      	nop			; (mov r8, r8)
1000a648:	1000be09 	.word	0x1000be09

1000a64c <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
1000a64c:	b570      	push	{r4, r5, r6, lr}
1000a64e:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a650:	4c47      	ldr	r4, [pc, #284]	; (1000a770 <sms_button_fn+0x124>)
1000a652:	7b63      	ldrb	r3, [r4, #13]
1000a654:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000a656:	4b47      	ldr	r3, [pc, #284]	; (1000a774 <sms_button_fn+0x128>)
1000a658:	4798      	blx	r3
1000a65a:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a65c:	2d00      	cmp	r5, #0
1000a65e:	d103      	bne.n	1000a668 <sms_button_fn+0x1c>
1000a660:	4845      	ldr	r0, [pc, #276]	; (1000a778 <sms_button_fn+0x12c>)
1000a662:	4b46      	ldr	r3, [pc, #280]	; (1000a77c <sms_button_fn+0x130>)
1000a664:	4798      	blx	r3
1000a666:	e004      	b.n	1000a672 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a668:	2d01      	cmp	r5, #1
1000a66a:	d175      	bne.n	1000a758 <sms_button_fn+0x10c>
1000a66c:	4844      	ldr	r0, [pc, #272]	; (1000a780 <sms_button_fn+0x134>)
1000a66e:	4b43      	ldr	r3, [pc, #268]	; (1000a77c <sms_button_fn+0x130>)
1000a670:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a672:	4b3f      	ldr	r3, [pc, #252]	; (1000a770 <sms_button_fn+0x124>)
1000a674:	7b5b      	ldrb	r3, [r3, #13]
1000a676:	2b01      	cmp	r3, #1
1000a678:	d006      	beq.n	1000a688 <sms_button_fn+0x3c>
1000a67a:	2b00      	cmp	r3, #0
1000a67c:	d067      	beq.n	1000a74e <sms_button_fn+0x102>
1000a67e:	2b02      	cmp	r3, #2
1000a680:	d024      	beq.n	1000a6cc <sms_button_fn+0x80>
1000a682:	2b03      	cmp	r3, #3
1000a684:	d043      	beq.n	1000a70e <sms_button_fn+0xc2>
1000a686:	e06a      	b.n	1000a75e <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
1000a688:	4b3e      	ldr	r3, [pc, #248]	; (1000a784 <sms_button_fn+0x138>)
1000a68a:	781b      	ldrb	r3, [r3, #0]
1000a68c:	b2db      	uxtb	r3, r3
1000a68e:	2b00      	cmp	r3, #0
1000a690:	d003      	beq.n	1000a69a <sms_button_fn+0x4e>
1000a692:	3b22      	subs	r3, #34	; 0x22
1000a694:	2b01      	cmp	r3, #1
1000a696:	d864      	bhi.n	1000a762 <sms_button_fn+0x116>
1000a698:	e00e      	b.n	1000a6b8 <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a69a:	2201      	movs	r2, #1
1000a69c:	4b3a      	ldr	r3, [pc, #232]	; (1000a788 <sms_button_fn+0x13c>)
1000a69e:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6a0:	2300      	movs	r3, #0
1000a6a2:	4a3a      	ldr	r2, [pc, #232]	; (1000a78c <sms_button_fn+0x140>)
1000a6a4:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6a6:	4a3a      	ldr	r2, [pc, #232]	; (1000a790 <sms_button_fn+0x144>)
1000a6a8:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6aa:	2200      	movs	r2, #0
1000a6ac:	21fa      	movs	r1, #250	; 0xfa
1000a6ae:	2001      	movs	r0, #1
1000a6b0:	4b38      	ldr	r3, [pc, #224]	; (1000a794 <sms_button_fn+0x148>)
1000a6b2:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6b4:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a6b6:	e059      	b.n	1000a76c <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a6b8:	2300      	movs	r3, #0
1000a6ba:	4a33      	ldr	r2, [pc, #204]	; (1000a788 <sms_button_fn+0x13c>)
1000a6bc:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6be:	4a33      	ldr	r2, [pc, #204]	; (1000a78c <sms_button_fn+0x140>)
1000a6c0:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a6c2:	2000      	movs	r0, #0
1000a6c4:	4b34      	ldr	r3, [pc, #208]	; (1000a798 <sms_button_fn+0x14c>)
1000a6c6:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6c8:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a6ca:	e04f      	b.n	1000a76c <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
1000a6cc:	4b2d      	ldr	r3, [pc, #180]	; (1000a784 <sms_button_fn+0x138>)
1000a6ce:	781b      	ldrb	r3, [r3, #0]
1000a6d0:	b2db      	uxtb	r3, r3
1000a6d2:	2b00      	cmp	r3, #0
1000a6d4:	d002      	beq.n	1000a6dc <sms_button_fn+0x90>
1000a6d6:	2b22      	cmp	r3, #34	; 0x22
1000a6d8:	d00f      	beq.n	1000a6fa <sms_button_fn+0xae>
1000a6da:	e045      	b.n	1000a768 <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6dc:	2201      	movs	r2, #1
1000a6de:	4b2a      	ldr	r3, [pc, #168]	; (1000a788 <sms_button_fn+0x13c>)
1000a6e0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6e2:	2300      	movs	r3, #0
1000a6e4:	4a29      	ldr	r2, [pc, #164]	; (1000a78c <sms_button_fn+0x140>)
1000a6e6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6e8:	4a29      	ldr	r2, [pc, #164]	; (1000a790 <sms_button_fn+0x144>)
1000a6ea:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6ec:	2200      	movs	r2, #0
1000a6ee:	21fa      	movs	r1, #250	; 0xfa
1000a6f0:	2001      	movs	r0, #1
1000a6f2:	4b28      	ldr	r3, [pc, #160]	; (1000a794 <sms_button_fn+0x148>)
1000a6f4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6f6:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a6f8:	e038      	b.n	1000a76c <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a6fa:	2300      	movs	r3, #0
1000a6fc:	4a22      	ldr	r2, [pc, #136]	; (1000a788 <sms_button_fn+0x13c>)
1000a6fe:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a700:	4a22      	ldr	r2, [pc, #136]	; (1000a78c <sms_button_fn+0x140>)
1000a702:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a704:	2000      	movs	r0, #0
1000a706:	4b24      	ldr	r3, [pc, #144]	; (1000a798 <sms_button_fn+0x14c>)
1000a708:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a70a:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a70c:	e02e      	b.n	1000a76c <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a70e:	4b1d      	ldr	r3, [pc, #116]	; (1000a784 <sms_button_fn+0x138>)
1000a710:	781b      	ldrb	r3, [r3, #0]
1000a712:	2b00      	cmp	r3, #0
1000a714:	d108      	bne.n	1000a728 <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a716:	4a1c      	ldr	r2, [pc, #112]	; (1000a788 <sms_button_fn+0x13c>)
1000a718:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a71a:	4a1c      	ldr	r2, [pc, #112]	; (1000a78c <sms_button_fn+0x140>)
1000a71c:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a71e:	2201      	movs	r2, #1
1000a720:	4b1e      	ldr	r3, [pc, #120]	; (1000a79c <sms_button_fn+0x150>)
1000a722:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a724:	2000      	movs	r0, #0
1000a726:	e021      	b.n	1000a76c <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
1000a728:	2100      	movs	r1, #0
1000a72a:	2000      	movs	r0, #0
1000a72c:	4b1c      	ldr	r3, [pc, #112]	; (1000a7a0 <sms_button_fn+0x154>)
1000a72e:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a730:	2202      	movs	r2, #2
1000a732:	4b15      	ldr	r3, [pc, #84]	; (1000a788 <sms_button_fn+0x13c>)
1000a734:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a736:	2300      	movs	r3, #0
1000a738:	4a14      	ldr	r2, [pc, #80]	; (1000a78c <sms_button_fn+0x140>)
1000a73a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a73c:	4a14      	ldr	r2, [pc, #80]	; (1000a790 <sms_button_fn+0x144>)
1000a73e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a740:	2200      	movs	r2, #0
1000a742:	21fa      	movs	r1, #250	; 0xfa
1000a744:	2001      	movs	r0, #1
1000a746:	4b13      	ldr	r3, [pc, #76]	; (1000a794 <sms_button_fn+0x148>)
1000a748:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a74a:	2000      	movs	r0, #0
1000a74c:	e00e      	b.n	1000a76c <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a74e:	2201      	movs	r2, #1
1000a750:	4b12      	ldr	r3, [pc, #72]	; (1000a79c <sms_button_fn+0x150>)
1000a752:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a754:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a756:	e009      	b.n	1000a76c <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a758:	2001      	movs	r0, #1
1000a75a:	4240      	negs	r0, r0
1000a75c:	e006      	b.n	1000a76c <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a75e:	2000      	movs	r0, #0
1000a760:	e004      	b.n	1000a76c <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
1000a762:	2001      	movs	r0, #1
1000a764:	4240      	negs	r0, r0
1000a766:	e001      	b.n	1000a76c <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
1000a768:	2001      	movs	r0, #1
1000a76a:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a76c:	bd70      	pop	{r4, r5, r6, pc}
1000a76e:	46c0      	nop			; (mov r8, r8)
1000a770:	10018c7c 	.word	0x10018c7c
1000a774:	1000a621 	.word	0x1000a621
1000a778:	10016188 	.word	0x10016188
1000a77c:	1000a8b9 	.word	0x1000a8b9
1000a780:	1001619c 	.word	0x1001619c
1000a784:	10018c78 	.word	0x10018c78
1000a788:	10018be0 	.word	0x10018be0
1000a78c:	10018d9b 	.word	0x10018d9b
1000a790:	10018db6 	.word	0x10018db6
1000a794:	1000b1fd 	.word	0x1000b1fd
1000a798:	1000a205 	.word	0x1000a205
1000a79c:	10018c75 	.word	0x10018c75
1000a7a0:	1000af65 	.word	0x1000af65

1000a7a4 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a7a4:	b510      	push	{r4, lr}
1000a7a6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a7a8:	2800      	cmp	r0, #0
1000a7aa:	d104      	bne.n	1000a7b6 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
1000a7ac:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e0 <sms_button_toggle_callback+0x3c>)
1000a7ae:	7858      	ldrb	r0, [r3, #1]
1000a7b0:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e4 <sms_button_toggle_callback+0x40>)
1000a7b2:	4798      	blx	r3
1000a7b4:	e005      	b.n	1000a7c2 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a7b6:	2801      	cmp	r0, #1
1000a7b8:	d103      	bne.n	1000a7c2 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000a7ba:	4b09      	ldr	r3, [pc, #36]	; (1000a7e0 <sms_button_toggle_callback+0x3c>)
1000a7bc:	7858      	ldrb	r0, [r3, #1]
1000a7be:	4b0a      	ldr	r3, [pc, #40]	; (1000a7e8 <sms_button_toggle_callback+0x44>)
1000a7c0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a7c2:	2c00      	cmp	r4, #0
1000a7c4:	d104      	bne.n	1000a7d0 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000a7c6:	4b06      	ldr	r3, [pc, #24]	; (1000a7e0 <sms_button_toggle_callback+0x3c>)
1000a7c8:	79d8      	ldrb	r0, [r3, #7]
1000a7ca:	4b06      	ldr	r3, [pc, #24]	; (1000a7e4 <sms_button_toggle_callback+0x40>)
1000a7cc:	4798      	blx	r3
1000a7ce:	e005      	b.n	1000a7dc <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a7d0:	2c01      	cmp	r4, #1
1000a7d2:	d103      	bne.n	1000a7dc <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000a7d4:	4b02      	ldr	r3, [pc, #8]	; (1000a7e0 <sms_button_toggle_callback+0x3c>)
1000a7d6:	79d8      	ldrb	r0, [r3, #7]
1000a7d8:	4b03      	ldr	r3, [pc, #12]	; (1000a7e8 <sms_button_toggle_callback+0x44>)
1000a7da:	4798      	blx	r3
    }
}
1000a7dc:	bd10      	pop	{r4, pc}
1000a7de:	46c0      	nop			; (mov r8, r8)
1000a7e0:	10018c7c 	.word	0x10018c7c
1000a7e4:	1000c151 	.word	0x1000c151
1000a7e8:	1000c1ad 	.word	0x1000c1ad

1000a7ec <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a7ec:	b510      	push	{r4, lr}
1000a7ee:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a7f0:	466b      	mov	r3, sp
1000a7f2:	1dda      	adds	r2, r3, #7
1000a7f4:	2300      	movs	r3, #0
1000a7f6:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a7f8:	4c09      	ldr	r4, [pc, #36]	; (1000a820 <sms_button_define_services+0x34>)
1000a7fa:	0021      	movs	r1, r4
1000a7fc:	2000      	movs	r0, #0
1000a7fe:	4b09      	ldr	r3, [pc, #36]	; (1000a824 <sms_button_define_services+0x38>)
1000a800:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a802:	0020      	movs	r0, r4
1000a804:	4b08      	ldr	r3, [pc, #32]	; (1000a828 <sms_button_define_services+0x3c>)
1000a806:	4798      	blx	r3
1000a808:	1e04      	subs	r4, r0, #0
1000a80a:	d006      	beq.n	1000a81a <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a80c:	4807      	ldr	r0, [pc, #28]	; (1000a82c <sms_button_define_services+0x40>)
1000a80e:	4b08      	ldr	r3, [pc, #32]	; (1000a830 <sms_button_define_services+0x44>)
1000a810:	4798      	blx	r3
1000a812:	0021      	movs	r1, r4
1000a814:	4807      	ldr	r0, [pc, #28]	; (1000a834 <sms_button_define_services+0x48>)
1000a816:	4b08      	ldr	r3, [pc, #32]	; (1000a838 <sms_button_define_services+0x4c>)
1000a818:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
1000a81a:	b002      	add	sp, #8
1000a81c:	bd10      	pop	{r4, pc}
1000a81e:	46c0      	nop			; (mov r8, r8)
1000a820:	10018c8c 	.word	0x10018c8c
1000a824:	1000a401 	.word	0x1000a401
1000a828:	1000a3dd 	.word	0x1000a3dd
1000a82c:	10015d04 	.word	0x10015d04
1000a830:	10014b59 	.word	0x10014b59
1000a834:	100161b0 	.word	0x100161b0
1000a838:	10014a39 	.word	0x10014a39

1000a83c <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a83c:	b510      	push	{r4, lr}
1000a83e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a840:	ac01      	add	r4, sp, #4
1000a842:	0020      	movs	r0, r4
1000a844:	4b15      	ldr	r3, [pc, #84]	; (1000a89c <sms_monitor_configure_gpio+0x60>)
1000a846:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a848:	2301      	movs	r3, #1
1000a84a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a84c:	0021      	movs	r1, r4
1000a84e:	200e      	movs	r0, #14
1000a850:	4b13      	ldr	r3, [pc, #76]	; (1000a8a0 <sms_monitor_configure_gpio+0x64>)
1000a852:	4798      	blx	r3
1000a854:	2800      	cmp	r0, #0
1000a856:	d005      	beq.n	1000a864 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a858:	4812      	ldr	r0, [pc, #72]	; (1000a8a4 <sms_monitor_configure_gpio+0x68>)
1000a85a:	4b13      	ldr	r3, [pc, #76]	; (1000a8a8 <sms_monitor_configure_gpio+0x6c>)
1000a85c:	4798      	blx	r3
1000a85e:	4813      	ldr	r0, [pc, #76]	; (1000a8ac <sms_monitor_configure_gpio+0x70>)
1000a860:	4b13      	ldr	r3, [pc, #76]	; (1000a8b0 <sms_monitor_configure_gpio+0x74>)
1000a862:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a864:	2100      	movs	r1, #0
1000a866:	200e      	movs	r0, #14
1000a868:	4b12      	ldr	r3, [pc, #72]	; (1000a8b4 <sms_monitor_configure_gpio+0x78>)
1000a86a:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
1000a86c:	ac01      	add	r4, sp, #4
1000a86e:	0020      	movs	r0, r4
1000a870:	4b0a      	ldr	r3, [pc, #40]	; (1000a89c <sms_monitor_configure_gpio+0x60>)
1000a872:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a874:	2301      	movs	r3, #1
1000a876:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000a878:	0021      	movs	r1, r4
1000a87a:	200f      	movs	r0, #15
1000a87c:	4b08      	ldr	r3, [pc, #32]	; (1000a8a0 <sms_monitor_configure_gpio+0x64>)
1000a87e:	4798      	blx	r3
1000a880:	2800      	cmp	r0, #0
1000a882:	d005      	beq.n	1000a890 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
1000a884:	4807      	ldr	r0, [pc, #28]	; (1000a8a4 <sms_monitor_configure_gpio+0x68>)
1000a886:	4b08      	ldr	r3, [pc, #32]	; (1000a8a8 <sms_monitor_configure_gpio+0x6c>)
1000a888:	4798      	blx	r3
1000a88a:	4808      	ldr	r0, [pc, #32]	; (1000a8ac <sms_monitor_configure_gpio+0x70>)
1000a88c:	4b08      	ldr	r3, [pc, #32]	; (1000a8b0 <sms_monitor_configure_gpio+0x74>)
1000a88e:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000a890:	2100      	movs	r1, #0
1000a892:	200f      	movs	r0, #15
1000a894:	4b07      	ldr	r3, [pc, #28]	; (1000a8b4 <sms_monitor_configure_gpio+0x78>)
1000a896:	4798      	blx	r3
}
1000a898:	b002      	add	sp, #8
1000a89a:	bd10      	pop	{r4, pc}
1000a89c:	1000bc41 	.word	0x1000bc41
1000a8a0:	1000bc51 	.word	0x1000bc51
1000a8a4:	10015d04 	.word	0x10015d04
1000a8a8:	10014b59 	.word	0x10014b59
1000a8ac:	100161f4 	.word	0x100161f4
1000a8b0:	10014a39 	.word	0x10014a39
1000a8b4:	1000bea9 	.word	0x1000bea9

1000a8b8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a8b8:	4b04      	ldr	r3, [pc, #16]	; (1000a8cc <sms_monitor_get_states+0x14>)
1000a8ba:	781b      	ldrb	r3, [r3, #0]
1000a8bc:	4b04      	ldr	r3, [pc, #16]	; (1000a8d0 <sms_monitor_get_states+0x18>)
1000a8be:	781b      	ldrb	r3, [r3, #0]
1000a8c0:	4b04      	ldr	r3, [pc, #16]	; (1000a8d4 <sms_monitor_get_states+0x1c>)
1000a8c2:	781b      	ldrb	r3, [r3, #0]
1000a8c4:	4b04      	ldr	r3, [pc, #16]	; (1000a8d8 <sms_monitor_get_states+0x20>)
1000a8c6:	781b      	ldrb	r3, [r3, #0]
}
1000a8c8:	4770      	bx	lr
1000a8ca:	46c0      	nop			; (mov r8, r8)
1000a8cc:	10018c78 	.word	0x10018c78
1000a8d0:	10018be0 	.word	0x10018be0
1000a8d4:	10018d9b 	.word	0x10018d9b
1000a8d8:	10018c74 	.word	0x10018c74

1000a8dc <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a8dc:	b530      	push	{r4, r5, lr}
1000a8de:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a8e0:	2010      	movs	r0, #16
1000a8e2:	4c14      	ldr	r4, [pc, #80]	; (1000a934 <sms_i2c_master_configure+0x58>)
1000a8e4:	47a0      	blx	r4
1000a8e6:	4b14      	ldr	r3, [pc, #80]	; (1000a938 <sms_i2c_master_configure+0x5c>)
1000a8e8:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a8ea:	2010      	movs	r0, #16
1000a8ec:	47a0      	blx	r4
1000a8ee:	4b13      	ldr	r3, [pc, #76]	; (1000a93c <sms_i2c_master_configure+0x60>)
1000a8f0:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a8f2:	ac01      	add	r4, sp, #4
1000a8f4:	0020      	movs	r0, r4
1000a8f6:	4b12      	ldr	r3, [pc, #72]	; (1000a940 <sms_i2c_master_configure+0x64>)
1000a8f8:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a8fa:	2303      	movs	r3, #3
1000a8fc:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a8fe:	331b      	adds	r3, #27
1000a900:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a902:	3b16      	subs	r3, #22
1000a904:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a906:	3301      	adds	r3, #1
1000a908:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a90a:	3b07      	subs	r3, #7
1000a90c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a90e:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a910:	4d0c      	ldr	r5, [pc, #48]	; (1000a944 <sms_i2c_master_configure+0x68>)
1000a912:	4c0d      	ldr	r4, [pc, #52]	; (1000a948 <sms_i2c_master_configure+0x6c>)
1000a914:	aa01      	add	r2, sp, #4
1000a916:	490d      	ldr	r1, [pc, #52]	; (1000a94c <sms_i2c_master_configure+0x70>)
1000a918:	0028      	movs	r0, r5
1000a91a:	47a0      	blx	r4
1000a91c:	2800      	cmp	r0, #0
1000a91e:	d1f9      	bne.n	1000a914 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a920:	4b08      	ldr	r3, [pc, #32]	; (1000a944 <sms_i2c_master_configure+0x68>)
1000a922:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a924:	2128      	movs	r1, #40	; 0x28
1000a926:	5c53      	ldrb	r3, [r2, r1]
1000a928:	07db      	lsls	r3, r3, #31
1000a92a:	d4fc      	bmi.n	1000a926 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a92c:	2301      	movs	r3, #1
1000a92e:	7513      	strb	r3, [r2, #20]
}
1000a930:	b007      	add	sp, #28
1000a932:	bd30      	pop	{r4, r5, pc}
1000a934:	100148ad 	.word	0x100148ad
1000a938:	10018da0 	.word	0x10018da0
1000a93c:	10018d84 	.word	0x10018d84
1000a940:	1000838d 	.word	0x1000838d
1000a944:	10018d90 	.word	0x10018d90
1000a948:	100083a5 	.word	0x100083a5
1000a94c:	40003000 	.word	0x40003000

1000a950 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a952:	4c12      	ldr	r4, [pc, #72]	; (1000a99c <sms_i2c_master_write+0x4c>)
1000a954:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a956:	1c50      	adds	r0, r2, #1
1000a958:	b2c0      	uxtb	r0, r0
1000a95a:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a95c:	6860      	ldr	r0, [r4, #4]
1000a95e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a960:	2a00      	cmp	r2, #0
1000a962:	d00e      	beq.n	1000a982 <sms_i2c_master_write+0x32>
1000a964:	2000      	movs	r0, #0
1000a966:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a968:	5c18      	ldrb	r0, [r3, r0]
1000a96a:	6865      	ldr	r5, [r4, #4]
1000a96c:	5468      	strb	r0, [r5, r1]
1000a96e:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a970:	b2c9      	uxtb	r1, r1
1000a972:	428a      	cmp	r2, r1
1000a974:	d8f7      	bhi.n	1000a966 <sms_i2c_master_write+0x16>
1000a976:	e004      	b.n	1000a982 <sms_i2c_master_write+0x32>
1000a978:	3c01      	subs	r4, #1
1000a97a:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a97c:	2c00      	cmp	r4, #0
1000a97e:	d104      	bne.n	1000a98a <sms_i2c_master_write+0x3a>
1000a980:	e009      	b.n	1000a996 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a982:	4c07      	ldr	r4, [pc, #28]	; (1000a9a0 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a984:	4e05      	ldr	r6, [pc, #20]	; (1000a99c <sms_i2c_master_write+0x4c>)
1000a986:	4d07      	ldr	r5, [pc, #28]	; (1000a9a4 <sms_i2c_master_write+0x54>)
1000a988:	4f07      	ldr	r7, [pc, #28]	; (1000a9a8 <sms_i2c_master_write+0x58>)
1000a98a:	0031      	movs	r1, r6
1000a98c:	0028      	movs	r0, r5
1000a98e:	47b8      	blx	r7
1000a990:	2800      	cmp	r0, #0
1000a992:	d1f1      	bne.n	1000a978 <sms_i2c_master_write+0x28>
1000a994:	e001      	b.n	1000a99a <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a996:	2001      	movs	r0, #1
1000a998:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a99c:	10018da0 	.word	0x10018da0
1000a9a0:	000003e9 	.word	0x000003e9
1000a9a4:	10018d90 	.word	0x10018d90
1000a9a8:	1000843d 	.word	0x1000843d

1000a9ac <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9ae:	4647      	mov	r7, r8
1000a9b0:	b480      	push	{r7}
1000a9b2:	0017      	movs	r7, r2
1000a9b4:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a9b6:	b280      	uxth	r0, r0
1000a9b8:	4b1d      	ldr	r3, [pc, #116]	; (1000aa30 <sms_i2c_master_read+0x84>)
1000a9ba:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a9bc:	2201      	movs	r2, #1
1000a9be:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a9c0:	685b      	ldr	r3, [r3, #4]
1000a9c2:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a9c4:	4b1b      	ldr	r3, [pc, #108]	; (1000aa34 <sms_i2c_master_read+0x88>)
1000a9c6:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a9c8:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a9ca:	4c1b      	ldr	r4, [pc, #108]	; (1000aa38 <sms_i2c_master_read+0x8c>)
1000a9cc:	4e18      	ldr	r6, [pc, #96]	; (1000aa30 <sms_i2c_master_read+0x84>)
1000a9ce:	4d1b      	ldr	r5, [pc, #108]	; (1000aa3c <sms_i2c_master_read+0x90>)
1000a9d0:	e003      	b.n	1000a9da <sms_i2c_master_read+0x2e>
1000a9d2:	3c01      	subs	r4, #1
1000a9d4:	b2a4      	uxth	r4, r4
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000a9d6:	2c00      	cmp	r4, #0
1000a9d8:	d01f      	beq.n	1000aa1a <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a9da:	0031      	movs	r1, r6
1000a9dc:	4818      	ldr	r0, [pc, #96]	; (1000aa40 <sms_i2c_master_read+0x94>)
1000a9de:	47a8      	blx	r5
1000a9e0:	2800      	cmp	r0, #0
1000a9e2:	d1f6      	bne.n	1000a9d2 <sms_i2c_master_read+0x26>
1000a9e4:	4e14      	ldr	r6, [pc, #80]	; (1000aa38 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a9e6:	4d13      	ldr	r5, [pc, #76]	; (1000aa34 <sms_i2c_master_read+0x88>)
1000a9e8:	4c16      	ldr	r4, [pc, #88]	; (1000aa44 <sms_i2c_master_read+0x98>)
1000a9ea:	e003      	b.n	1000a9f4 <sms_i2c_master_read+0x48>
1000a9ec:	3e01      	subs	r6, #1
1000a9ee:	b2b6      	uxth	r6, r6
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000a9f0:	2e00      	cmp	r6, #0
1000a9f2:	d015      	beq.n	1000aa20 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a9f4:	0029      	movs	r1, r5
1000a9f6:	4812      	ldr	r0, [pc, #72]	; (1000aa40 <sms_i2c_master_read+0x94>)
1000a9f8:	47a0      	blx	r4
1000a9fa:	2800      	cmp	r0, #0
1000a9fc:	d1f6      	bne.n	1000a9ec <sms_i2c_master_read+0x40>
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a9fe:	2f00      	cmp	r7, #0
1000aa00:	d011      	beq.n	1000aa26 <sms_i2c_master_read+0x7a>
1000aa02:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000aa04:	490b      	ldr	r1, [pc, #44]	; (1000aa34 <sms_i2c_master_read+0x88>)
1000aa06:	684a      	ldr	r2, [r1, #4]
1000aa08:	5cd2      	ldrb	r2, [r2, r3]
1000aa0a:	4640      	mov	r0, r8
1000aa0c:	54c2      	strb	r2, [r0, r3]
1000aa0e:	3301      	adds	r3, #1
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000aa10:	b2da      	uxtb	r2, r3
1000aa12:	4297      	cmp	r7, r2
1000aa14:	d8f7      	bhi.n	1000aa06 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000aa16:	2000      	movs	r0, #0
1000aa18:	e006      	b.n	1000aa28 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aa1a:	2001      	movs	r0, #1
1000aa1c:	4240      	negs	r0, r0
1000aa1e:	e003      	b.n	1000aa28 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aa20:	2001      	movs	r0, #1
1000aa22:	4240      	negs	r0, r0
1000aa24:	e000      	b.n	1000aa28 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000aa26:	2000      	movs	r0, #0
1000aa28:	bc04      	pop	{r2}
1000aa2a:	4690      	mov	r8, r2
1000aa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa2e:	46c0      	nop			; (mov r8, r8)
1000aa30:	10018da0 	.word	0x10018da0
1000aa34:	10018d84 	.word	0x10018d84
1000aa38:	000003e9 	.word	0x000003e9
1000aa3c:	10008461 	.word	0x10008461
1000aa40:	10018d90 	.word	0x10018d90
1000aa44:	10008419 	.word	0x10008419

1000aa48 <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000aa48:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
1000aa4a:	2328      	movs	r3, #40	; 0x28
1000aa4c:	4a06      	ldr	r2, [pc, #24]	; (1000aa68 <sms_mpu_interrupt_callback+0x20>)
1000aa4e:	5cd3      	ldrb	r3, [r2, r3]
1000aa50:	2b00      	cmp	r3, #0
1000aa52:	d008      	beq.n	1000aa66 <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
1000aa54:	2101      	movs	r1, #1
1000aa56:	2329      	movs	r3, #41	; 0x29
1000aa58:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000aa5a:	2300      	movs	r3, #0
1000aa5c:	2200      	movs	r2, #0
1000aa5e:	3101      	adds	r1, #1
1000aa60:	201e      	movs	r0, #30
1000aa62:	4c02      	ldr	r4, [pc, #8]	; (1000aa6c <sms_mpu_interrupt_callback+0x24>)
1000aa64:	47a0      	blx	r4
	}
}
1000aa66:	bd10      	pop	{r4, pc}
1000aa68:	10018be4 	.word	0x10018be4
1000aa6c:	1000eb6d 	.word	0x1000eb6d

1000aa70 <sms_mpu_configure_gpio>:
#include "sms_mpu.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000aa70:	b510      	push	{r4, lr}
1000aa72:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000aa74:	ac01      	add	r4, sp, #4
1000aa76:	0020      	movs	r0, r4
1000aa78:	4b0a      	ldr	r3, [pc, #40]	; (1000aaa4 <sms_mpu_configure_gpio+0x34>)
1000aa7a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000aa7c:	2300      	movs	r3, #0
1000aa7e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000aa80:	3302      	adds	r3, #2
1000aa82:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000aa84:	3b01      	subs	r3, #1
1000aa86:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000aa88:	0021      	movs	r1, r4
1000aa8a:	201e      	movs	r0, #30
1000aa8c:	4b06      	ldr	r3, [pc, #24]	; (1000aaa8 <sms_mpu_configure_gpio+0x38>)
1000aa8e:	4798      	blx	r3
1000aa90:	2800      	cmp	r0, #0
1000aa92:	d005      	beq.n	1000aaa0 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000aa94:	4805      	ldr	r0, [pc, #20]	; (1000aaac <sms_mpu_configure_gpio+0x3c>)
1000aa96:	4b06      	ldr	r3, [pc, #24]	; (1000aab0 <sms_mpu_configure_gpio+0x40>)
1000aa98:	4798      	blx	r3
1000aa9a:	4806      	ldr	r0, [pc, #24]	; (1000aab4 <sms_mpu_configure_gpio+0x44>)
1000aa9c:	4b06      	ldr	r3, [pc, #24]	; (1000aab8 <sms_mpu_configure_gpio+0x48>)
1000aa9e:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
1000aaa0:	b002      	add	sp, #8
1000aaa2:	bd10      	pop	{r4, pc}
1000aaa4:	1000bc41 	.word	0x1000bc41
1000aaa8:	1000bc51 	.word	0x1000bc51
1000aaac:	10015d04 	.word	0x10015d04
1000aab0:	10014b59 	.word	0x10014b59
1000aab4:	10016214 	.word	0x10016214
1000aab8:	10014a39 	.word	0x10014a39

1000aabc <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000aabc:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000aabe:	2202      	movs	r2, #2
1000aac0:	4902      	ldr	r1, [pc, #8]	; (1000aacc <sms_mpu_register_callbacks+0x10>)
1000aac2:	201e      	movs	r0, #30
1000aac4:	4b02      	ldr	r3, [pc, #8]	; (1000aad0 <sms_mpu_register_callbacks+0x14>)
1000aac6:	4798      	blx	r3
}
1000aac8:	bd10      	pop	{r4, pc}
1000aaca:	46c0      	nop			; (mov r8, r8)
1000aacc:	1000aa49 	.word	0x1000aa49
1000aad0:	1000c081 	.word	0x1000c081

1000aad4 <sms_mpu_initialize>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_initialize(void) {
1000aad4:	b570      	push	{r4, r5, r6, lr}
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
    res = mpu_init(NULL);
1000aad6:	2000      	movs	r0, #0
1000aad8:	4b20      	ldr	r3, [pc, #128]	; (1000ab5c <sms_mpu_initialize+0x88>)
1000aada:	4798      	blx	r3
    if(res) {
1000aadc:	2800      	cmp	r0, #0
1000aade:	d13a      	bne.n	1000ab56 <sms_mpu_initialize+0x82>
        DBG_LOG_CONT_DEV(" failed!");
        return -1;
    }
    DBG_LOG_DEV("Setting up MPU...");
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000aae0:	3079      	adds	r0, #121	; 0x79
1000aae2:	4b1f      	ldr	r3, [pc, #124]	; (1000ab60 <sms_mpu_initialize+0x8c>)
1000aae4:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000aae6:	2078      	movs	r0, #120	; 0x78
1000aae8:	4b1e      	ldr	r3, [pc, #120]	; (1000ab64 <sms_mpu_initialize+0x90>)
1000aaea:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000aaec:	2032      	movs	r0, #50	; 0x32
1000aaee:	4b1e      	ldr	r3, [pc, #120]	; (1000ab68 <sms_mpu_initialize+0x94>)
1000aaf0:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000aaf2:	2032      	movs	r0, #50	; 0x32
1000aaf4:	4b1d      	ldr	r3, [pc, #116]	; (1000ab6c <sms_mpu_initialize+0x98>)
1000aaf6:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000aaf8:	4d1d      	ldr	r5, [pc, #116]	; (1000ab70 <sms_mpu_initialize+0x9c>)
1000aafa:	0028      	movs	r0, r5
1000aafc:	4b1d      	ldr	r3, [pc, #116]	; (1000ab74 <sms_mpu_initialize+0xa0>)
1000aafe:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ab00:	1f68      	subs	r0, r5, #5
1000ab02:	4b1d      	ldr	r3, [pc, #116]	; (1000ab78 <sms_mpu_initialize+0xa4>)
1000ab04:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ab06:	1ea8      	subs	r0, r5, #2
1000ab08:	4b1c      	ldr	r3, [pc, #112]	; (1000ab7c <sms_mpu_initialize+0xa8>)
1000ab0a:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ab0c:	1fac      	subs	r4, r5, #6
1000ab0e:	2307      	movs	r3, #7
1000ab10:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ab12:	20f0      	movs	r0, #240	; 0xf0
1000ab14:	0040      	lsls	r0, r0, #1
1000ab16:	83e8      	strh	r0, [r5, #30]
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ab18:	4b19      	ldr	r3, [pc, #100]	; (1000ab80 <sms_mpu_initialize+0xac>)
1000ab1a:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ab1c:	2032      	movs	r0, #50	; 0x32
1000ab1e:	4b19      	ldr	r3, [pc, #100]	; (1000ab84 <sms_mpu_initialize+0xb0>)
1000ab20:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ab22:	2001      	movs	r0, #1
1000ab24:	4b18      	ldr	r3, [pc, #96]	; (1000ab88 <sms_mpu_initialize+0xb4>)
1000ab26:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ab28:	2301      	movs	r3, #1
1000ab2a:	2222      	movs	r2, #34	; 0x22
1000ab2c:	54a3      	strb	r3, [r4, r2]
	mpu_device.int_enabled = true;
1000ab2e:	3206      	adds	r2, #6
1000ab30:	54a3      	strb	r3, [r4, r2]
	mpu_device.new_int = false;
1000ab32:	2300      	movs	r3, #0
1000ab34:	3201      	adds	r2, #1
1000ab36:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000ab38:	3201      	adds	r2, #1
1000ab3a:	54a3      	strb	r3, [r4, r2]
    mpu_device.temp_cnt = 0;
1000ab3c:	3201      	adds	r2, #1
1000ab3e:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000ab40:	3201      	adds	r2, #1
1000ab42:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000ab44:	3201      	adds	r2, #1
1000ab46:	54a3      	strb	r3, [r4, r2]
	mpu_device.rts = false;
1000ab48:	3201      	adds	r2, #1
1000ab4a:	54a3      	strb	r3, [r4, r2]
	mpu_device.state = MPU_STATE_ON;
1000ab4c:	3a2c      	subs	r2, #44	; 0x2c
1000ab4e:	332f      	adds	r3, #47	; 0x2f
1000ab50:	54e2      	strb	r2, [r4, r3]
    
    return 0;
1000ab52:	2000      	movs	r0, #0
1000ab54:	e001      	b.n	1000ab5a <sms_mpu_initialize+0x86>
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
    res = mpu_init(NULL);
    if(res) {
        DBG_LOG_CONT_DEV(" failed!");
        return -1;
1000ab56:	2001      	movs	r0, #1
1000ab58:	4240      	negs	r0, r0
    mpu_device.new_temp = false;
	mpu_device.rts = false;
	mpu_device.state = MPU_STATE_ON;
    
    return 0;
}
1000ab5a:	bd70      	pop	{r4, r5, r6, pc}
1000ab5c:	10009315 	.word	0x10009315
1000ab60:	1000912d 	.word	0x1000912d
1000ab64:	10008ae9 	.word	0x10008ae9
1000ab68:	10009059 	.word	0x10009059
1000ab6c:	10008a71 	.word	0x10008a71
1000ab70:	10018bea 	.word	0x10018bea
1000ab74:	10008a55 	.word	0x10008a55
1000ab78:	100088b9 	.word	0x100088b9
1000ab7c:	1000981d 	.word	0x1000981d
1000ab80:	10009c8d 	.word	0x10009c8d
1000ab84:	1000982d 	.word	0x1000982d
1000ab88:	100096bd 	.word	0x100096bd

1000ab8c <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000ab8c:	b530      	push	{r4, r5, lr}
1000ab8e:	b085      	sub	sp, #20
    unsigned char sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000ab90:	4c1e      	ldr	r4, [pc, #120]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000ab92:	2200      	movs	r2, #0
1000ab94:	2320      	movs	r3, #32
1000ab96:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000ab98:	0021      	movs	r1, r4
1000ab9a:	310e      	adds	r1, #14
1000ab9c:	0020      	movs	r0, r4
1000ab9e:	3008      	adds	r0, #8
1000aba0:	3b12      	subs	r3, #18
1000aba2:	446b      	add	r3, sp
1000aba4:	9300      	str	r3, [sp, #0]
1000aba6:	230f      	movs	r3, #15
1000aba8:	446b      	add	r3, sp
1000abaa:	aa02      	add	r2, sp, #8
1000abac:	4d18      	ldr	r5, [pc, #96]	; (1000ac10 <sms_mpu_poll_data+0x84>)
1000abae:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000abb0:	232b      	movs	r3, #43	; 0x2b
1000abb2:	5ce3      	ldrb	r3, [r4, r3]
1000abb4:	2b01      	cmp	r3, #1
1000abb6:	d804      	bhi.n	1000abc2 <sms_mpu_poll_data+0x36>
1000abb8:	3301      	adds	r3, #1
1000abba:	222b      	movs	r2, #43	; 0x2b
1000abbc:	4913      	ldr	r1, [pc, #76]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000abbe:	548b      	strb	r3, [r1, r2]
1000abc0:	e00b      	b.n	1000abda <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000abc2:	4c12      	ldr	r4, [pc, #72]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000abc4:	2200      	movs	r2, #0
1000abc6:	232b      	movs	r3, #43	; 0x2b
1000abc8:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000abca:	0020      	movs	r0, r4
1000abcc:	301c      	adds	r0, #28
1000abce:	a902      	add	r1, sp, #8
1000abd0:	4b10      	ldr	r3, [pc, #64]	; (1000ac14 <sms_mpu_poll_data+0x88>)
1000abd2:	4798      	blx	r3
        mpu_device.new_temp = true;
1000abd4:	2201      	movs	r2, #1
1000abd6:	232d      	movs	r3, #45	; 0x2d
1000abd8:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000abda:	232a      	movs	r3, #42	; 0x2a
1000abdc:	4a0b      	ldr	r2, [pc, #44]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000abde:	5cd3      	ldrb	r3, [r2, r3]
1000abe0:	2b01      	cmp	r3, #1
1000abe2:	d804      	bhi.n	1000abee <sms_mpu_poll_data+0x62>
1000abe4:	3301      	adds	r3, #1
1000abe6:	222a      	movs	r2, #42	; 0x2a
1000abe8:	4908      	ldr	r1, [pc, #32]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000abea:	548b      	strb	r3, [r1, r2]
1000abec:	e00b      	b.n	1000ac06 <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000abee:	4c07      	ldr	r4, [pc, #28]	; (1000ac0c <sms_mpu_poll_data+0x80>)
1000abf0:	2200      	movs	r2, #0
1000abf2:	232a      	movs	r3, #42	; 0x2a
1000abf4:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(mpu_device.hal.compass, &sensor_timestamp);
1000abf6:	0020      	movs	r0, r4
1000abf8:	3014      	adds	r0, #20
1000abfa:	a902      	add	r1, sp, #8
1000abfc:	4b06      	ldr	r3, [pc, #24]	; (1000ac18 <sms_mpu_poll_data+0x8c>)
1000abfe:	4798      	blx	r3
        mpu_device.new_compass = true;
1000ac00:	2201      	movs	r2, #1
1000ac02:	232c      	movs	r3, #44	; 0x2c
1000ac04:	54e2      	strb	r2, [r4, r3]
    }
	
	//mpu_device.rts = true;

    return 0;
}
1000ac06:	2000      	movs	r0, #0
1000ac08:	b005      	add	sp, #20
1000ac0a:	bd30      	pop	{r4, r5, pc}
1000ac0c:	10018be4 	.word	0x10018be4
1000ac10:	10008b55 	.word	0x10008b55
1000ac14:	10008569 	.word	0x10008569
1000ac18:	10009761 	.word	0x10009761

1000ac1c <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000ac1c:	b510      	push	{r4, lr}
1000ac1e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ac20:	466b      	mov	r3, sp
1000ac22:	1dda      	adds	r2, r3, #7
1000ac24:	2300      	movs	r3, #0
1000ac26:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000ac28:	4c09      	ldr	r4, [pc, #36]	; (1000ac50 <sms_mpu_define_services+0x34>)
1000ac2a:	0021      	movs	r1, r4
1000ac2c:	2002      	movs	r0, #2
1000ac2e:	4b09      	ldr	r3, [pc, #36]	; (1000ac54 <sms_mpu_define_services+0x38>)
1000ac30:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000ac32:	0020      	movs	r0, r4
1000ac34:	4b08      	ldr	r3, [pc, #32]	; (1000ac58 <sms_mpu_define_services+0x3c>)
1000ac36:	4798      	blx	r3
1000ac38:	1e04      	subs	r4, r0, #0
1000ac3a:	d006      	beq.n	1000ac4a <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000ac3c:	4807      	ldr	r0, [pc, #28]	; (1000ac5c <sms_mpu_define_services+0x40>)
1000ac3e:	4b08      	ldr	r3, [pc, #32]	; (1000ac60 <sms_mpu_define_services+0x44>)
1000ac40:	4798      	blx	r3
1000ac42:	0021      	movs	r1, r4
1000ac44:	4807      	ldr	r0, [pc, #28]	; (1000ac64 <sms_mpu_define_services+0x48>)
1000ac46:	4b08      	ldr	r3, [pc, #32]	; (1000ac68 <sms_mpu_define_services+0x4c>)
1000ac48:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
1000ac4a:	b002      	add	sp, #8
1000ac4c:	bd10      	pop	{r4, pc}
1000ac4e:	46c0      	nop			; (mov r8, r8)
1000ac50:	10018c14 	.word	0x10018c14
1000ac54:	1000a401 	.word	0x1000a401
1000ac58:	1000a3dd 	.word	0x1000a3dd
1000ac5c:	10015d04 	.word	0x10015d04
1000ac60:	10014b59 	.word	0x10014b59
1000ac64:	10016254 	.word	0x10016254
1000ac68:	10014a39 	.word	0x10014a39

1000ac6c <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000ac6c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000ac6e:	2100      	movs	r1, #0
1000ac70:	4b01      	ldr	r3, [pc, #4]	; (1000ac78 <sms_led_switch_on+0xc>)
1000ac72:	4798      	blx	r3
}
1000ac74:	bd10      	pop	{r4, pc}
1000ac76:	46c0      	nop			; (mov r8, r8)
1000ac78:	1000bea9 	.word	0x1000bea9

1000ac7c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ac7c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ac7e:	2101      	movs	r1, #1
1000ac80:	4b01      	ldr	r3, [pc, #4]	; (1000ac88 <sms_led_switch_off+0xc>)
1000ac82:	4798      	blx	r3
}
1000ac84:	bd10      	pop	{r4, pc}
1000ac86:	46c0      	nop			; (mov r8, r8)
1000ac88:	1000bea9 	.word	0x1000bea9

1000ac8c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000ac8c:	b510      	push	{r4, lr}
1000ac8e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac90:	ac01      	add	r4, sp, #4
1000ac92:	0020      	movs	r0, r4
1000ac94:	4b06      	ldr	r3, [pc, #24]	; (1000acb0 <sms_led_gpio_init+0x24>)
1000ac96:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ac98:	2301      	movs	r3, #1
1000ac9a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac9c:	0021      	movs	r1, r4
1000ac9e:	2016      	movs	r0, #22
1000aca0:	4b04      	ldr	r3, [pc, #16]	; (1000acb4 <sms_led_gpio_init+0x28>)
1000aca2:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000aca4:	2016      	movs	r0, #22
1000aca6:	4b04      	ldr	r3, [pc, #16]	; (1000acb8 <sms_led_gpio_init+0x2c>)
1000aca8:	4798      	blx	r3
}
1000acaa:	b002      	add	sp, #8
1000acac:	bd10      	pop	{r4, pc}
1000acae:	46c0      	nop			; (mov r8, r8)
1000acb0:	1000bc41 	.word	0x1000bc41
1000acb4:	1000bc51 	.word	0x1000bc51
1000acb8:	1000ac7d 	.word	0x1000ac7d

1000acbc <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000acbc:	b510      	push	{r4, lr}
1000acbe:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000acc0:	4b05      	ldr	r3, [pc, #20]	; (1000acd8 <sms_led_toggle+0x1c>)
1000acc2:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000acc4:	2800      	cmp	r0, #0
1000acc6:	d103      	bne.n	1000acd0 <sms_led_toggle+0x14>
1000acc8:	0020      	movs	r0, r4
1000acca:	4b04      	ldr	r3, [pc, #16]	; (1000acdc <sms_led_toggle+0x20>)
1000accc:	4798      	blx	r3
1000acce:	e002      	b.n	1000acd6 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000acd0:	0020      	movs	r0, r4
1000acd2:	4b03      	ldr	r3, [pc, #12]	; (1000ace0 <sms_led_toggle+0x24>)
1000acd4:	4798      	blx	r3
}
1000acd6:	bd10      	pop	{r4, pc}
1000acd8:	1000be59 	.word	0x1000be59
1000acdc:	1000ac7d 	.word	0x1000ac7d
1000ace0:	1000ac6d 	.word	0x1000ac6d

1000ace4 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000ace4:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000ace6:	4b0c      	ldr	r3, [pc, #48]	; (1000ad18 <sms_led_blink_start+0x34>)
1000ace8:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000acea:	2200      	movs	r2, #0
1000acec:	4b0b      	ldr	r3, [pc, #44]	; (1000ad1c <sms_led_blink_start+0x38>)
1000acee:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000acf0:	4b0b      	ldr	r3, [pc, #44]	; (1000ad20 <sms_led_blink_start+0x3c>)
1000acf2:	781b      	ldrb	r3, [r3, #0]
1000acf4:	b2db      	uxtb	r3, r3
1000acf6:	2b02      	cmp	r3, #2
1000acf8:	d002      	beq.n	1000ad00 <sms_led_blink_start+0x1c>
1000acfa:	2b03      	cmp	r3, #3
1000acfc:	d002      	beq.n	1000ad04 <sms_led_blink_start+0x20>
1000acfe:	e004      	b.n	1000ad0a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000ad00:	2164      	movs	r1, #100	; 0x64
1000ad02:	e003      	b.n	1000ad0c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000ad04:	21c8      	movs	r1, #200	; 0xc8
1000ad06:	0049      	lsls	r1, r1, #1
        break;
1000ad08:	e000      	b.n	1000ad0c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000ad0a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000ad0c:	2201      	movs	r2, #1
1000ad0e:	2001      	movs	r0, #1
1000ad10:	4b04      	ldr	r3, [pc, #16]	; (1000ad24 <sms_led_blink_start+0x40>)
1000ad12:	4798      	blx	r3
}
1000ad14:	bd10      	pop	{r4, pc}
1000ad16:	46c0      	nop			; (mov r8, r8)
1000ad18:	1000ac6d 	.word	0x1000ac6d
1000ad1c:	10018dbc 	.word	0x10018dbc
1000ad20:	10018d9b 	.word	0x10018d9b
1000ad24:	1000b1fd 	.word	0x1000b1fd

1000ad28 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000ad28:	4b06      	ldr	r3, [pc, #24]	; (1000ad44 <sms_pressure_init_variables+0x1c>)
1000ad2a:	2200      	movs	r2, #0
1000ad2c:	2125      	movs	r1, #37	; 0x25
1000ad2e:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000ad30:	3106      	adds	r1, #6
1000ad32:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000ad34:	3901      	subs	r1, #1
1000ad36:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000ad38:	3902      	subs	r1, #2
1000ad3a:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000ad3c:	3101      	adds	r1, #1
1000ad3e:	545a      	strb	r2, [r3, r1]
}
1000ad40:	4770      	bx	lr
1000ad42:	46c0      	nop			; (mov r8, r8)
1000ad44:	10018d00 	.word	0x10018d00

1000ad48 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000ad48:	b510      	push	{r4, lr}
1000ad4a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000ad4c:	4a05      	ldr	r2, [pc, #20]	; (1000ad64 <sms_pressure_ms58_reset+0x1c>)
1000ad4e:	231e      	movs	r3, #30
1000ad50:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ad52:	3b1d      	subs	r3, #29
1000ad54:	9300      	str	r3, [sp, #0]
1000ad56:	4b04      	ldr	r3, [pc, #16]	; (1000ad68 <sms_pressure_ms58_reset+0x20>)
1000ad58:	4904      	ldr	r1, [pc, #16]	; (1000ad6c <sms_pressure_ms58_reset+0x24>)
1000ad5a:	4805      	ldr	r0, [pc, #20]	; (1000ad70 <sms_pressure_ms58_reset+0x28>)
1000ad5c:	4c05      	ldr	r4, [pc, #20]	; (1000ad74 <sms_pressure_ms58_reset+0x2c>)
1000ad5e:	47a0      	blx	r4
}
1000ad60:	b002      	add	sp, #8
1000ad62:	bd10      	pop	{r4, pc}
1000ad64:	10018cf0 	.word	0x10018cf0
1000ad68:	10018cdc 	.word	0x10018cdc
1000ad6c:	10018d9c 	.word	0x10018d9c
1000ad70:	10018da8 	.word	0x10018da8
1000ad74:	1000b0d1 	.word	0x1000b0d1

1000ad78 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad7a:	4657      	mov	r7, sl
1000ad7c:	b480      	push	{r7}
1000ad7e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000ad80:	4d37      	ldr	r5, [pc, #220]	; (1000ae60 <sms_pressure_ms58_read_prom+0xe8>)
1000ad82:	23a2      	movs	r3, #162	; 0xa2
1000ad84:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000ad86:	2300      	movs	r3, #0
1000ad88:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000ad8a:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ad8c:	4c35      	ldr	r4, [pc, #212]	; (1000ae64 <sms_pressure_ms58_read_prom+0xec>)
1000ad8e:	3303      	adds	r3, #3
1000ad90:	469a      	mov	sl, r3
1000ad92:	9300      	str	r3, [sp, #0]
1000ad94:	0023      	movs	r3, r4
1000ad96:	002a      	movs	r2, r5
1000ad98:	4933      	ldr	r1, [pc, #204]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000ad9a:	4834      	ldr	r0, [pc, #208]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000ad9c:	4f34      	ldr	r7, [pc, #208]	; (1000ae70 <sms_pressure_ms58_read_prom+0xf8>)
1000ad9e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ada0:	4e34      	ldr	r6, [pc, #208]	; (1000ae74 <sms_pressure_ms58_read_prom+0xfc>)
1000ada2:	7863      	ldrb	r3, [r4, #1]
1000ada4:	021b      	lsls	r3, r3, #8
1000ada6:	78a2      	ldrb	r2, [r4, #2]
1000ada8:	4313      	orrs	r3, r2
1000adaa:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000adac:	23a4      	movs	r3, #164	; 0xa4
1000adae:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000adb0:	4653      	mov	r3, sl
1000adb2:	9300      	str	r3, [sp, #0]
1000adb4:	0023      	movs	r3, r4
1000adb6:	002a      	movs	r2, r5
1000adb8:	492b      	ldr	r1, [pc, #172]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000adba:	482c      	ldr	r0, [pc, #176]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000adbc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000adbe:	7863      	ldrb	r3, [r4, #1]
1000adc0:	021b      	lsls	r3, r3, #8
1000adc2:	78a2      	ldrb	r2, [r4, #2]
1000adc4:	4313      	orrs	r3, r2
1000adc6:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000adc8:	23a6      	movs	r3, #166	; 0xa6
1000adca:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000adcc:	4653      	mov	r3, sl
1000adce:	9300      	str	r3, [sp, #0]
1000add0:	0023      	movs	r3, r4
1000add2:	002a      	movs	r2, r5
1000add4:	4924      	ldr	r1, [pc, #144]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000add6:	4825      	ldr	r0, [pc, #148]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000add8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000adda:	7863      	ldrb	r3, [r4, #1]
1000addc:	021b      	lsls	r3, r3, #8
1000adde:	78a2      	ldrb	r2, [r4, #2]
1000ade0:	4313      	orrs	r3, r2
1000ade2:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000ade4:	23a8      	movs	r3, #168	; 0xa8
1000ade6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ade8:	4653      	mov	r3, sl
1000adea:	9300      	str	r3, [sp, #0]
1000adec:	0023      	movs	r3, r4
1000adee:	002a      	movs	r2, r5
1000adf0:	491d      	ldr	r1, [pc, #116]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000adf2:	481e      	ldr	r0, [pc, #120]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000adf4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000adf6:	7863      	ldrb	r3, [r4, #1]
1000adf8:	021b      	lsls	r3, r3, #8
1000adfa:	78a2      	ldrb	r2, [r4, #2]
1000adfc:	4313      	orrs	r3, r2
1000adfe:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000ae00:	23aa      	movs	r3, #170	; 0xaa
1000ae02:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ae04:	4653      	mov	r3, sl
1000ae06:	9300      	str	r3, [sp, #0]
1000ae08:	0023      	movs	r3, r4
1000ae0a:	002a      	movs	r2, r5
1000ae0c:	4916      	ldr	r1, [pc, #88]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000ae0e:	4817      	ldr	r0, [pc, #92]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000ae10:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ae12:	7863      	ldrb	r3, [r4, #1]
1000ae14:	021b      	lsls	r3, r3, #8
1000ae16:	78a2      	ldrb	r2, [r4, #2]
1000ae18:	4313      	orrs	r3, r2
1000ae1a:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000ae1c:	23ac      	movs	r3, #172	; 0xac
1000ae1e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ae20:	4653      	mov	r3, sl
1000ae22:	9300      	str	r3, [sp, #0]
1000ae24:	0023      	movs	r3, r4
1000ae26:	002a      	movs	r2, r5
1000ae28:	490f      	ldr	r1, [pc, #60]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000ae2a:	4810      	ldr	r0, [pc, #64]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000ae2c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ae2e:	7863      	ldrb	r3, [r4, #1]
1000ae30:	021b      	lsls	r3, r3, #8
1000ae32:	78a2      	ldrb	r2, [r4, #2]
1000ae34:	4313      	orrs	r3, r2
1000ae36:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000ae38:	23ae      	movs	r3, #174	; 0xae
1000ae3a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ae3c:	4653      	mov	r3, sl
1000ae3e:	9300      	str	r3, [sp, #0]
1000ae40:	0023      	movs	r3, r4
1000ae42:	002a      	movs	r2, r5
1000ae44:	4908      	ldr	r1, [pc, #32]	; (1000ae68 <sms_pressure_ms58_read_prom+0xf0>)
1000ae46:	4809      	ldr	r0, [pc, #36]	; (1000ae6c <sms_pressure_ms58_read_prom+0xf4>)
1000ae48:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ae4a:	7863      	ldrb	r3, [r4, #1]
1000ae4c:	021b      	lsls	r3, r3, #8
1000ae4e:	78a2      	ldrb	r2, [r4, #2]
1000ae50:	4313      	orrs	r3, r2
1000ae52:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000ae54:	2000      	movs	r0, #0
1000ae56:	b002      	add	sp, #8
1000ae58:	bc04      	pop	{r2}
1000ae5a:	4692      	mov	sl, r2
1000ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae5e:	46c0      	nop			; (mov r8, r8)
1000ae60:	10018cf0 	.word	0x10018cf0
1000ae64:	10018cdc 	.word	0x10018cdc
1000ae68:	10018d9c 	.word	0x10018d9c
1000ae6c:	10018da8 	.word	0x10018da8
1000ae70:	1000b0d1 	.word	0x1000b0d1
1000ae74:	10018d00 	.word	0x10018d00

1000ae78 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000ae78:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000ae7a:	4b0a      	ldr	r3, [pc, #40]	; (1000aea4 <sms_pressure_init+0x2c>)
1000ae7c:	4798      	blx	r3
1000ae7e:	2800      	cmp	r0, #0
1000ae80:	d10d      	bne.n	1000ae9e <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000ae82:	4b09      	ldr	r3, [pc, #36]	; (1000aea8 <sms_pressure_init+0x30>)
1000ae84:	2201      	movs	r2, #1
1000ae86:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000ae88:	2402      	movs	r4, #2
1000ae8a:	2125      	movs	r1, #37	; 0x25
1000ae8c:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000ae8e:	3103      	adds	r1, #3
1000ae90:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000ae92:	2200      	movs	r2, #0
1000ae94:	3101      	adds	r1, #1
1000ae96:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000ae98:	3101      	adds	r1, #1
1000ae9a:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000ae9c:	e000      	b.n	1000aea0 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000ae9e:	2010      	movs	r0, #16
}
1000aea0:	bd10      	pop	{r4, pc}
1000aea2:	46c0      	nop			; (mov r8, r8)
1000aea4:	1000ad79 	.word	0x1000ad79
1000aea8:	10018d00 	.word	0x10018d00

1000aeac <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000aeac:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000aeae:	2101      	movs	r1, #1
1000aeb0:	2001      	movs	r0, #1
1000aeb2:	4b10      	ldr	r3, [pc, #64]	; (1000aef4 <sms_pressure_startup+0x48>)
1000aeb4:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000aeb6:	2101      	movs	r1, #1
1000aeb8:	2325      	movs	r3, #37	; 0x25
1000aeba:	4a0f      	ldr	r2, [pc, #60]	; (1000aef8 <sms_pressure_startup+0x4c>)
1000aebc:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000aebe:	4b0f      	ldr	r3, [pc, #60]	; (1000aefc <sms_pressure_startup+0x50>)
1000aec0:	4798      	blx	r3
    delay_ms(3);
1000aec2:	2003      	movs	r0, #3
1000aec4:	4b0e      	ldr	r3, [pc, #56]	; (1000af00 <sms_pressure_startup+0x54>)
1000aec6:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000aec8:	4b0e      	ldr	r3, [pc, #56]	; (1000af04 <sms_pressure_startup+0x58>)
1000aeca:	4798      	blx	r3
1000aecc:	2800      	cmp	r0, #0
1000aece:	d000      	beq.n	1000aed2 <sms_pressure_startup+0x26>
1000aed0:	e7fe      	b.n	1000aed0 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000aed2:	4b09      	ldr	r3, [pc, #36]	; (1000aef8 <sms_pressure_startup+0x4c>)
1000aed4:	2102      	movs	r1, #2
1000aed6:	2225      	movs	r2, #37	; 0x25
1000aed8:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000aeda:	2401      	movs	r4, #1
1000aedc:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000aede:	3a1e      	subs	r2, #30
1000aee0:	4b09      	ldr	r3, [pc, #36]	; (1000af08 <sms_pressure_startup+0x5c>)
1000aee2:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000aee4:	3901      	subs	r1, #1
1000aee6:	2001      	movs	r0, #1
1000aee8:	4b08      	ldr	r3, [pc, #32]	; (1000af0c <sms_pressure_startup+0x60>)
1000aeea:	4798      	blx	r3
    
    ulp_ready = true;
1000aeec:	4b08      	ldr	r3, [pc, #32]	; (1000af10 <sms_pressure_startup+0x64>)
1000aeee:	701c      	strb	r4, [r3, #0]
}
1000aef0:	bd10      	pop	{r4, pc}
1000aef2:	46c0      	nop			; (mov r8, r8)
1000aef4:	1000a7a5 	.word	0x1000a7a5
1000aef8:	10018d00 	.word	0x10018d00
1000aefc:	1000ad49 	.word	0x1000ad49
1000af00:	10008129 	.word	0x10008129
1000af04:	1000ae79 	.word	0x1000ae79
1000af08:	10018c74 	.word	0x10018c74
1000af0c:	1000af65 	.word	0x1000af65
1000af10:	10018c75 	.word	0x10018c75

1000af14 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000af14:	b510      	push	{r4, lr}
1000af16:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000af18:	466b      	mov	r3, sp
1000af1a:	1dda      	adds	r2, r3, #7
1000af1c:	2300      	movs	r3, #0
1000af1e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000af20:	4c09      	ldr	r4, [pc, #36]	; (1000af48 <sms_pressure_define_services+0x34>)
1000af22:	0021      	movs	r1, r4
1000af24:	2001      	movs	r0, #1
1000af26:	4b09      	ldr	r3, [pc, #36]	; (1000af4c <sms_pressure_define_services+0x38>)
1000af28:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000af2a:	0020      	movs	r0, r4
1000af2c:	4b08      	ldr	r3, [pc, #32]	; (1000af50 <sms_pressure_define_services+0x3c>)
1000af2e:	4798      	blx	r3
1000af30:	1e04      	subs	r4, r0, #0
1000af32:	d006      	beq.n	1000af42 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000af34:	4807      	ldr	r0, [pc, #28]	; (1000af54 <sms_pressure_define_services+0x40>)
1000af36:	4b08      	ldr	r3, [pc, #32]	; (1000af58 <sms_pressure_define_services+0x44>)
1000af38:	4798      	blx	r3
1000af3a:	0021      	movs	r1, r4
1000af3c:	4807      	ldr	r0, [pc, #28]	; (1000af5c <sms_pressure_define_services+0x48>)
1000af3e:	4b08      	ldr	r3, [pc, #32]	; (1000af60 <sms_pressure_define_services+0x4c>)
1000af40:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000af42:	b002      	add	sp, #8
1000af44:	bd10      	pop	{r4, pc}
1000af46:	46c0      	nop			; (mov r8, r8)
1000af48:	10018d2c 	.word	0x10018d2c
1000af4c:	1000a401 	.word	0x1000a401
1000af50:	1000a3dd 	.word	0x1000a3dd
1000af54:	10015d04 	.word	0x10015d04
1000af58:	10014b59 	.word	0x10014b59
1000af5c:	10016294 	.word	0x10016294
1000af60:	10014a39 	.word	0x10014a39

1000af64 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000af64:	b510      	push	{r4, lr}
1000af66:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000af68:	2800      	cmp	r0, #0
1000af6a:	d007      	beq.n	1000af7c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000af6c:	2102      	movs	r1, #2
1000af6e:	232f      	movs	r3, #47	; 0x2f
1000af70:	4a15      	ldr	r2, [pc, #84]	; (1000afc8 <sms_sensors_interrupt_toggle+0x64>)
1000af72:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000af74:	201e      	movs	r0, #30
1000af76:	4b15      	ldr	r3, [pc, #84]	; (1000afcc <sms_sensors_interrupt_toggle+0x68>)
1000af78:	4798      	blx	r3
1000af7a:	e006      	b.n	1000af8a <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000af7c:	2100      	movs	r1, #0
1000af7e:	232f      	movs	r3, #47	; 0x2f
1000af80:	4a11      	ldr	r2, [pc, #68]	; (1000afc8 <sms_sensors_interrupt_toggle+0x64>)
1000af82:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000af84:	201e      	movs	r0, #30
1000af86:	4b12      	ldr	r3, [pc, #72]	; (1000afd0 <sms_sensors_interrupt_toggle+0x6c>)
1000af88:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000af8a:	2c00      	cmp	r4, #0
1000af8c:	d010      	beq.n	1000afb0 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000af8e:	4b11      	ldr	r3, [pc, #68]	; (1000afd4 <sms_sensors_interrupt_toggle+0x70>)
1000af90:	2103      	movs	r1, #3
1000af92:	2225      	movs	r2, #37	; 0x25
1000af94:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000af96:	3901      	subs	r1, #1
1000af98:	3206      	adds	r2, #6
1000af9a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000af9c:	2100      	movs	r1, #0
1000af9e:	480e      	ldr	r0, [pc, #56]	; (1000afd8 <sms_sensors_interrupt_toggle+0x74>)
1000afa0:	4b0e      	ldr	r3, [pc, #56]	; (1000afdc <sms_sensors_interrupt_toggle+0x78>)
1000afa2:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000afa4:	4b0e      	ldr	r3, [pc, #56]	; (1000afe0 <sms_sensors_interrupt_toggle+0x7c>)
1000afa6:	4798      	blx	r3
        sensors_active = true;
1000afa8:	2201      	movs	r2, #1
1000afaa:	4b0e      	ldr	r3, [pc, #56]	; (1000afe4 <sms_sensors_interrupt_toggle+0x80>)
1000afac:	701a      	strb	r2, [r3, #0]
1000afae:	e00a      	b.n	1000afc6 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000afb0:	2102      	movs	r1, #2
1000afb2:	2325      	movs	r3, #37	; 0x25
1000afb4:	4a07      	ldr	r2, [pc, #28]	; (1000afd4 <sms_sensors_interrupt_toggle+0x70>)
1000afb6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000afb8:	4b0b      	ldr	r3, [pc, #44]	; (1000afe8 <sms_sensors_interrupt_toggle+0x84>)
1000afba:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000afbc:	4b0b      	ldr	r3, [pc, #44]	; (1000afec <sms_sensors_interrupt_toggle+0x88>)
1000afbe:	4798      	blx	r3
        sensors_active = false;
1000afc0:	2200      	movs	r2, #0
1000afc2:	4b08      	ldr	r3, [pc, #32]	; (1000afe4 <sms_sensors_interrupt_toggle+0x80>)
1000afc4:	701a      	strb	r2, [r3, #0]
    }
}
1000afc6:	bd10      	pop	{r4, pc}
1000afc8:	10018be4 	.word	0x10018be4
1000afcc:	1000c151 	.word	0x1000c151
1000afd0:	1000c1ad 	.word	0x1000c1ad
1000afd4:	10018d00 	.word	0x10018d00
1000afd8:	000003d5 	.word	0x000003d5
1000afdc:	1000b135 	.word	0x1000b135
1000afe0:	1000b169 	.word	0x1000b169
1000afe4:	10018d8c 	.word	0x10018d8c
1000afe8:	1000b15d 	.word	0x1000b15d
1000afec:	1000b189 	.word	0x1000b189

1000aff0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000aff0:	b510      	push	{r4, lr}
1000aff2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aff4:	2800      	cmp	r0, #0
1000aff6:	d010      	beq.n	1000b01a <sms_sensors_switch+0x2a>
        if(sms_mpu_initialize()) {
1000aff8:	4b11      	ldr	r3, [pc, #68]	; (1000b040 <sms_sensors_switch+0x50>)
1000affa:	4798      	blx	r3
1000affc:	2800      	cmp	r0, #0
1000affe:	d004      	beq.n	1000b00a <sms_sensors_switch+0x1a>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b000:	2100      	movs	r1, #0
1000b002:	2006      	movs	r0, #6
1000b004:	4b0f      	ldr	r3, [pc, #60]	; (1000b044 <sms_sensors_switch+0x54>)
1000b006:	4798      	blx	r3
1000b008:	e00b      	b.n	1000b022 <sms_sensors_switch+0x32>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b00a:	2201      	movs	r2, #1
1000b00c:	4b0e      	ldr	r3, [pc, #56]	; (1000b048 <sms_sensors_switch+0x58>)
1000b00e:	701a      	strb	r2, [r3, #0]
            sms_sensors_interrupt_toggle(true, false);
1000b010:	2100      	movs	r1, #0
1000b012:	2001      	movs	r0, #1
1000b014:	4b0d      	ldr	r3, [pc, #52]	; (1000b04c <sms_sensors_switch+0x5c>)
1000b016:	4798      	blx	r3
1000b018:	e003      	b.n	1000b022 <sms_sensors_switch+0x32>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b01a:	2100      	movs	r1, #0
1000b01c:	2006      	movs	r0, #6
1000b01e:	4b09      	ldr	r3, [pc, #36]	; (1000b044 <sms_sensors_switch+0x54>)
1000b020:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b022:	2c00      	cmp	r4, #0
1000b024:	d006      	beq.n	1000b034 <sms_sensors_switch+0x44>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b026:	2101      	movs	r1, #1
1000b028:	2325      	movs	r3, #37	; 0x25
1000b02a:	4a09      	ldr	r2, [pc, #36]	; (1000b050 <sms_sensors_switch+0x60>)
1000b02c:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b02e:	4b09      	ldr	r3, [pc, #36]	; (1000b054 <sms_sensors_switch+0x64>)
1000b030:	4798      	blx	r3
1000b032:	e003      	b.n	1000b03c <sms_sensors_switch+0x4c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b034:	2100      	movs	r1, #0
1000b036:	2007      	movs	r0, #7
1000b038:	4b02      	ldr	r3, [pc, #8]	; (1000b044 <sms_sensors_switch+0x54>)
1000b03a:	4798      	blx	r3
    }
}
1000b03c:	bd10      	pop	{r4, pc}
1000b03e:	46c0      	nop			; (mov r8, r8)
1000b040:	1000aad5 	.word	0x1000aad5
1000b044:	1000bea9 	.word	0x1000bea9
1000b048:	10018be4 	.word	0x10018be4
1000b04c:	1000af65 	.word	0x1000af65
1000b050:	10018d00 	.word	0x10018d00
1000b054:	1000aead 	.word	0x1000aead

1000b058 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b058:	b530      	push	{r4, r5, lr}
1000b05a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b05c:	ac01      	add	r4, sp, #4
1000b05e:	0020      	movs	r0, r4
1000b060:	4b13      	ldr	r3, [pc, #76]	; (1000b0b0 <sms_spi_master_configure+0x58>)
1000b062:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b064:	2310      	movs	r3, #16
1000b066:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b068:	0021      	movs	r1, r4
1000b06a:	4812      	ldr	r0, [pc, #72]	; (1000b0b4 <sms_spi_master_configure+0x5c>)
1000b06c:	4b12      	ldr	r3, [pc, #72]	; (1000b0b8 <sms_spi_master_configure+0x60>)
1000b06e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b070:	ac02      	add	r4, sp, #8
1000b072:	0020      	movs	r0, r4
1000b074:	4b11      	ldr	r3, [pc, #68]	; (1000b0bc <sms_spi_master_configure+0x64>)
1000b076:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b078:	2368      	movs	r3, #104	; 0x68
1000b07a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b07c:	2300      	movs	r3, #0
1000b07e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b080:	3311      	adds	r3, #17
1000b082:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b084:	3b0d      	subs	r3, #13
1000b086:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b088:	2213      	movs	r2, #19
1000b08a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b08c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b08e:	3a14      	subs	r2, #20
1000b090:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b092:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b094:	3213      	adds	r2, #19
1000b096:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b098:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b09a:	4d09      	ldr	r5, [pc, #36]	; (1000b0c0 <sms_spi_master_configure+0x68>)
1000b09c:	0022      	movs	r2, r4
1000b09e:	4909      	ldr	r1, [pc, #36]	; (1000b0c4 <sms_spi_master_configure+0x6c>)
1000b0a0:	0028      	movs	r0, r5
1000b0a2:	4b09      	ldr	r3, [pc, #36]	; (1000b0c8 <sms_spi_master_configure+0x70>)
1000b0a4:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b0a6:	0028      	movs	r0, r5
1000b0a8:	4b08      	ldr	r3, [pc, #32]	; (1000b0cc <sms_spi_master_configure+0x74>)
1000b0aa:	4798      	blx	r3
}
1000b0ac:	b00d      	add	sp, #52	; 0x34
1000b0ae:	bd30      	pop	{r4, r5, pc}
1000b0b0:	1000b5ed 	.word	0x1000b5ed
1000b0b4:	10018d9c 	.word	0x10018d9c
1000b0b8:	1000b625 	.word	0x1000b625
1000b0bc:	1000b5f9 	.word	0x1000b5f9
1000b0c0:	10018da8 	.word	0x10018da8
1000b0c4:	40007000 	.word	0x40007000
1000b0c8:	1000b6f5 	.word	0x1000b6f5
1000b0cc:	1000b665 	.word	0x1000b665

1000b0d0 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0d2:	b083      	sub	sp, #12
1000b0d4:	0004      	movs	r4, r0
1000b0d6:	000d      	movs	r5, r1
1000b0d8:	9200      	str	r2, [sp, #0]
1000b0da:	9301      	str	r3, [sp, #4]
1000b0dc:	ab08      	add	r3, sp, #32
1000b0de:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b0e0:	2201      	movs	r2, #1
1000b0e2:	4f08      	ldr	r7, [pc, #32]	; (1000b104 <sms_spi_master_transceive+0x34>)
1000b0e4:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b0e6:	0033      	movs	r3, r6
1000b0e8:	9a01      	ldr	r2, [sp, #4]
1000b0ea:	9900      	ldr	r1, [sp, #0]
1000b0ec:	0020      	movs	r0, r4
1000b0ee:	4e06      	ldr	r6, [pc, #24]	; (1000b108 <sms_spi_master_transceive+0x38>)
1000b0f0:	47b0      	blx	r6
1000b0f2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b0f4:	2200      	movs	r2, #0
1000b0f6:	0029      	movs	r1, r5
1000b0f8:	0020      	movs	r0, r4
1000b0fa:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b0fc:	0030      	movs	r0, r6
1000b0fe:	b003      	add	sp, #12
1000b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b102:	46c0      	nop			; (mov r8, r8)
1000b104:	1000b8dd 	.word	0x1000b8dd
1000b108:	1000b859 	.word	0x1000b859

1000b10c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b10c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000b10e:	2328      	movs	r3, #40	; 0x28
1000b110:	4a06      	ldr	r2, [pc, #24]	; (1000b12c <sms_timer_aon_callback+0x20>)
1000b112:	5cd3      	ldrb	r3, [r2, r3]
1000b114:	2b00      	cmp	r3, #0
1000b116:	d008      	beq.n	1000b12a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000b118:	2101      	movs	r1, #1
1000b11a:	2329      	movs	r3, #41	; 0x29
1000b11c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b11e:	2300      	movs	r3, #0
1000b120:	2200      	movs	r2, #0
1000b122:	3102      	adds	r1, #2
1000b124:	2042      	movs	r0, #66	; 0x42
1000b126:	4c02      	ldr	r4, [pc, #8]	; (1000b130 <sms_timer_aon_callback+0x24>)
1000b128:	47a0      	blx	r4
	}
}
1000b12a:	bd10      	pop	{r4, pc}
1000b12c:	10018d00 	.word	0x10018d00
1000b130:	1000eb6d 	.word	0x1000eb6d

1000b134 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b134:	b530      	push	{r4, r5, lr}
1000b136:	b083      	sub	sp, #12
1000b138:	0004      	movs	r4, r0
1000b13a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b13c:	4668      	mov	r0, sp
1000b13e:	4b05      	ldr	r3, [pc, #20]	; (1000b154 <sms_timer_aon_init+0x20>)
1000b140:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b142:	466b      	mov	r3, sp
1000b144:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b146:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b148:	4668      	mov	r0, sp
1000b14a:	4b03      	ldr	r3, [pc, #12]	; (1000b158 <sms_timer_aon_init+0x24>)
1000b14c:	4798      	blx	r3
}
1000b14e:	b003      	add	sp, #12
1000b150:	bd30      	pop	{r4, r5, pc}
1000b152:	46c0      	nop			; (mov r8, r8)
1000b154:	10008171 	.word	0x10008171
1000b158:	100081e5 	.word	0x100081e5

1000b15c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b15c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b15e:	4b01      	ldr	r3, [pc, #4]	; (1000b164 <sms_timer_aon_disable+0x8>)
1000b160:	4798      	blx	r3
}
1000b162:	bd10      	pop	{r4, pc}
1000b164:	10008181 	.word	0x10008181

1000b168 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b168:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b16a:	4804      	ldr	r0, [pc, #16]	; (1000b17c <sms_timer_aon_register_callback+0x14>)
1000b16c:	4b04      	ldr	r3, [pc, #16]	; (1000b180 <sms_timer_aon_register_callback+0x18>)
1000b16e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b170:	2280      	movs	r2, #128	; 0x80
1000b172:	0512      	lsls	r2, r2, #20
1000b174:	4b03      	ldr	r3, [pc, #12]	; (1000b184 <sms_timer_aon_register_callback+0x1c>)
1000b176:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b178:	bd10      	pop	{r4, pc}
1000b17a:	46c0      	nop			; (mov r8, r8)
1000b17c:	1000b10d 	.word	0x1000b10d
1000b180:	100081cd 	.word	0x100081cd
1000b184:	e000e100 	.word	0xe000e100

1000b188 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b188:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b18a:	4b04      	ldr	r3, [pc, #16]	; (1000b19c <sms_timer_aon_unregister_callback+0x14>)
1000b18c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b18e:	2180      	movs	r1, #128	; 0x80
1000b190:	0509      	lsls	r1, r1, #20
1000b192:	2380      	movs	r3, #128	; 0x80
1000b194:	4a02      	ldr	r2, [pc, #8]	; (1000b1a0 <sms_timer_aon_unregister_callback+0x18>)
1000b196:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b198:	bd10      	pop	{r4, pc}
1000b19a:	46c0      	nop			; (mov r8, r8)
1000b19c:	100081d9 	.word	0x100081d9
1000b1a0:	e000e100 	.word	0xe000e100

1000b1a4 <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b1a4:	4770      	bx	lr
1000b1a6:	46c0      	nop			; (mov r8, r8)

1000b1a8 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b1a8:	b510      	push	{r4, lr}
1000b1aa:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b1ac:	ac01      	add	r4, sp, #4
1000b1ae:	0020      	movs	r0, r4
1000b1b0:	4b08      	ldr	r3, [pc, #32]	; (1000b1d4 <sms_dualtimer_init+0x2c>)
1000b1b2:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b1b4:	4a08      	ldr	r2, [pc, #32]	; (1000b1d8 <sms_dualtimer_init+0x30>)
1000b1b6:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1b8:	2300      	movs	r3, #0
1000b1ba:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b1bc:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1be:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b1c0:	0020      	movs	r0, r4
1000b1c2:	4b06      	ldr	r3, [pc, #24]	; (1000b1dc <sms_dualtimer_init+0x34>)
1000b1c4:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b1c6:	2000      	movs	r0, #0
1000b1c8:	4c05      	ldr	r4, [pc, #20]	; (1000b1e0 <sms_dualtimer_init+0x38>)
1000b1ca:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b1cc:	2001      	movs	r0, #1
1000b1ce:	47a0      	blx	r4
}
1000b1d0:	b008      	add	sp, #32
1000b1d2:	bd10      	pop	{r4, pc}
1000b1d4:	1000b941 	.word	0x1000b941
1000b1d8:	018cba80 	.word	0x018cba80
1000b1dc:	1000b9d5 	.word	0x1000b9d5
1000b1e0:	1000b9b1 	.word	0x1000b9b1

1000b1e4 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b1e4:	b510      	push	{r4, lr}
1000b1e6:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b1e8:	4b02      	ldr	r3, [pc, #8]	; (1000b1f4 <sms_dualtimer_register_callback+0x10>)
1000b1ea:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b1ec:	0020      	movs	r0, r4
1000b1ee:	4b02      	ldr	r3, [pc, #8]	; (1000b1f8 <sms_dualtimer_register_callback+0x14>)
1000b1f0:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b1f2:	bd10      	pop	{r4, pc}
1000b1f4:	1000bad9 	.word	0x1000bad9
1000b1f8:	1000b9b1 	.word	0x1000b9b1

1000b1fc <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b1fc:	b510      	push	{r4, lr}
1000b1fe:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b200:	2801      	cmp	r0, #1
1000b202:	d006      	beq.n	1000b212 <sms_dualtimer_start+0x16>
1000b204:	2800      	cmp	r0, #0
1000b206:	d002      	beq.n	1000b20e <sms_dualtimer_start+0x12>
1000b208:	2802      	cmp	r0, #2
1000b20a:	d004      	beq.n	1000b216 <sms_dualtimer_start+0x1a>
1000b20c:	e005      	b.n	1000b21a <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b20e:	221a      	movs	r2, #26
1000b210:	e004      	b.n	1000b21c <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b212:	4a0c      	ldr	r2, [pc, #48]	; (1000b244 <sms_dualtimer_start+0x48>)
        break;
1000b214:	e002      	b.n	1000b21c <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b216:	4a0c      	ldr	r2, [pc, #48]	; (1000b248 <sms_dualtimer_start+0x4c>)
        break;
1000b218:	e000      	b.n	1000b21c <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b21a:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b21c:	2900      	cmp	r1, #0
1000b21e:	d101      	bne.n	1000b224 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b220:	21fa      	movs	r1, #250	; 0xfa
1000b222:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b224:	2000      	movs	r0, #0
1000b226:	4b09      	ldr	r3, [pc, #36]	; (1000b24c <sms_dualtimer_start+0x50>)
1000b228:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b22a:	434a      	muls	r2, r1
1000b22c:	2100      	movs	r1, #0
1000b22e:	0020      	movs	r0, r4
1000b230:	4b07      	ldr	r3, [pc, #28]	; (1000b250 <sms_dualtimer_start+0x54>)
1000b232:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b234:	0020      	movs	r0, r4
1000b236:	4b07      	ldr	r3, [pc, #28]	; (1000b254 <sms_dualtimer_start+0x58>)
1000b238:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b23a:	2280      	movs	r2, #128	; 0x80
1000b23c:	01d2      	lsls	r2, r2, #7
1000b23e:	4b06      	ldr	r3, [pc, #24]	; (1000b258 <sms_dualtimer_start+0x5c>)
1000b240:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b242:	bd10      	pop	{r4, pc}
1000b244:	00006590 	.word	0x00006590
1000b248:	018cba80 	.word	0x018cba80
1000b24c:	10018c75 	.word	0x10018c75
1000b250:	1000b965 	.word	0x1000b965
1000b254:	1000b98d 	.word	0x1000b98d
1000b258:	e000e100 	.word	0xe000e100

1000b25c <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b25c:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b25e:	4b01      	ldr	r3, [pc, #4]	; (1000b264 <sms_dualtimer_stop+0x8>)
1000b260:	4798      	blx	r3
}
1000b262:	bd10      	pop	{r4, pc}
1000b264:	1000b9b1 	.word	0x1000b9b1

1000b268 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b268:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000b26a:	2201      	movs	r2, #1
1000b26c:	4b04      	ldr	r3, [pc, #16]	; (1000b280 <sms_dualtimer1_cb+0x18>)
1000b26e:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b270:	2300      	movs	r3, #0
1000b272:	2200      	movs	r2, #0
1000b274:	2101      	movs	r1, #1
1000b276:	2040      	movs	r0, #64	; 0x40
1000b278:	4c02      	ldr	r4, [pc, #8]	; (1000b284 <sms_dualtimer1_cb+0x1c>)
1000b27a:	47a0      	blx	r4
}
1000b27c:	bd10      	pop	{r4, pc}
1000b27e:	46c0      	nop			; (mov r8, r8)
1000b280:	10018cec 	.word	0x10018cec
1000b284:	1000eb6d 	.word	0x1000eb6d

1000b288 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b288:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000b28a:	2201      	movs	r2, #1
1000b28c:	4b04      	ldr	r3, [pc, #16]	; (1000b2a0 <sms_dualtimer2_cb+0x18>)
1000b28e:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b290:	2300      	movs	r3, #0
1000b292:	2200      	movs	r2, #0
1000b294:	2101      	movs	r1, #1
1000b296:	2041      	movs	r0, #65	; 0x41
1000b298:	4c02      	ldr	r4, [pc, #8]	; (1000b2a4 <sms_dualtimer2_cb+0x1c>)
1000b29a:	47a0      	blx	r4
}
1000b29c:	bd10      	pop	{r4, pc}
1000b29e:	46c0      	nop			; (mov r8, r8)
1000b2a0:	10018d98 	.word	0x10018d98
1000b2a4:	1000eb6d 	.word	0x1000eb6d

1000b2a8 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b2a8:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b2aa:	4b79      	ldr	r3, [pc, #484]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b2ac:	781b      	ldrb	r3, [r3, #0]
1000b2ae:	b2db      	uxtb	r3, r3
1000b2b0:	2b01      	cmp	r3, #1
1000b2b2:	d003      	beq.n	1000b2bc <sms_dualtimer1_fn+0x14>
1000b2b4:	2b02      	cmp	r3, #2
1000b2b6:	d100      	bne.n	1000b2ba <sms_dualtimer1_fn+0x12>
1000b2b8:	e0ae      	b.n	1000b418 <sms_dualtimer1_fn+0x170>
1000b2ba:	e0e1      	b.n	1000b480 <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b2bc:	2200      	movs	r2, #0
1000b2be:	4b74      	ldr	r3, [pc, #464]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b2c0:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b2c2:	4c74      	ldr	r4, [pc, #464]	; (1000b494 <sms_dualtimer1_fn+0x1ec>)
1000b2c4:	7b63      	ldrb	r3, [r4, #13]
1000b2c6:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b2c8:	4b73      	ldr	r3, [pc, #460]	; (1000b498 <sms_dualtimer1_fn+0x1f0>)
1000b2ca:	4798      	blx	r3
1000b2cc:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b2ce:	4873      	ldr	r0, [pc, #460]	; (1000b49c <sms_dualtimer1_fn+0x1f4>)
1000b2d0:	4b73      	ldr	r3, [pc, #460]	; (1000b4a0 <sms_dualtimer1_fn+0x1f8>)
1000b2d2:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b2d4:	7b23      	ldrb	r3, [r4, #12]
1000b2d6:	2b01      	cmp	r3, #1
1000b2d8:	d002      	beq.n	1000b2e0 <sms_dualtimer1_fn+0x38>
1000b2da:	2b02      	cmp	r3, #2
1000b2dc:	d04c      	beq.n	1000b378 <sms_dualtimer1_fn+0xd0>
1000b2de:	e093      	b.n	1000b408 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b2e0:	4b6c      	ldr	r3, [pc, #432]	; (1000b494 <sms_dualtimer1_fn+0x1ec>)
1000b2e2:	7b5b      	ldrb	r3, [r3, #13]
1000b2e4:	2b01      	cmp	r3, #1
1000b2e6:	d002      	beq.n	1000b2ee <sms_dualtimer1_fn+0x46>
1000b2e8:	2b02      	cmp	r3, #2
1000b2ea:	d023      	beq.n	1000b334 <sms_dualtimer1_fn+0x8c>
1000b2ec:	e03b      	b.n	1000b366 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b2ee:	4b6d      	ldr	r3, [pc, #436]	; (1000b4a4 <sms_dualtimer1_fn+0x1fc>)
1000b2f0:	781b      	ldrb	r3, [r3, #0]
1000b2f2:	2b00      	cmp	r3, #0
1000b2f4:	d115      	bne.n	1000b322 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b2f6:	4a6c      	ldr	r2, [pc, #432]	; (1000b4a8 <sms_dualtimer1_fn+0x200>)
1000b2f8:	7813      	ldrb	r3, [r2, #0]
1000b2fa:	3301      	adds	r3, #1
1000b2fc:	b2db      	uxtb	r3, r3
1000b2fe:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b300:	2b0f      	cmp	r3, #15
1000b302:	d905      	bls.n	1000b310 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b304:	2200      	movs	r2, #0
1000b306:	4b62      	ldr	r3, [pc, #392]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b308:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b30a:	4b68      	ldr	r3, [pc, #416]	; (1000b4ac <sms_dualtimer1_fn+0x204>)
1000b30c:	4798      	blx	r3
1000b30e:	e0be      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b310:	2201      	movs	r2, #1
1000b312:	4b5f      	ldr	r3, [pc, #380]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b314:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b316:	2200      	movs	r2, #0
1000b318:	21fa      	movs	r1, #250	; 0xfa
1000b31a:	2001      	movs	r0, #1
1000b31c:	4b64      	ldr	r3, [pc, #400]	; (1000b4b0 <sms_dualtimer1_fn+0x208>)
1000b31e:	4798      	blx	r3
1000b320:	e0b5      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b322:	4b64      	ldr	r3, [pc, #400]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b324:	781b      	ldrb	r3, [r3, #0]
1000b326:	2b00      	cmp	r3, #0
1000b328:	d000      	beq.n	1000b32c <sms_dualtimer1_fn+0x84>
1000b32a:	e0b0      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b32c:	2201      	movs	r2, #1
1000b32e:	4b62      	ldr	r3, [pc, #392]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b330:	701a      	strb	r2, [r3, #0]
1000b332:	e0ac      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b334:	4b5b      	ldr	r3, [pc, #364]	; (1000b4a4 <sms_dualtimer1_fn+0x1fc>)
1000b336:	781b      	ldrb	r3, [r3, #0]
1000b338:	2b00      	cmp	r3, #0
1000b33a:	d10b      	bne.n	1000b354 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b33c:	2200      	movs	r2, #0
1000b33e:	4b5a      	ldr	r3, [pc, #360]	; (1000b4a8 <sms_dualtimer1_fn+0x200>)
1000b340:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b342:	3201      	adds	r2, #1
1000b344:	4b52      	ldr	r3, [pc, #328]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b346:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b348:	2200      	movs	r2, #0
1000b34a:	2164      	movs	r1, #100	; 0x64
1000b34c:	2001      	movs	r0, #1
1000b34e:	4b58      	ldr	r3, [pc, #352]	; (1000b4b0 <sms_dualtimer1_fn+0x208>)
1000b350:	4798      	blx	r3
1000b352:	e09c      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b354:	4b57      	ldr	r3, [pc, #348]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b356:	781b      	ldrb	r3, [r3, #0]
1000b358:	2b00      	cmp	r3, #0
1000b35a:	d000      	beq.n	1000b35e <sms_dualtimer1_fn+0xb6>
1000b35c:	e097      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b35e:	2201      	movs	r2, #1
1000b360:	4b55      	ldr	r3, [pc, #340]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b362:	701a      	strb	r2, [r3, #0]
1000b364:	e093      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b366:	4b53      	ldr	r3, [pc, #332]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b368:	781b      	ldrb	r3, [r3, #0]
1000b36a:	2b00      	cmp	r3, #0
1000b36c:	d000      	beq.n	1000b370 <sms_dualtimer1_fn+0xc8>
1000b36e:	e08e      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b370:	2201      	movs	r2, #1
1000b372:	4b51      	ldr	r3, [pc, #324]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b374:	701a      	strb	r2, [r3, #0]
1000b376:	e08a      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b378:	4b46      	ldr	r3, [pc, #280]	; (1000b494 <sms_dualtimer1_fn+0x1ec>)
1000b37a:	7b5b      	ldrb	r3, [r3, #13]
1000b37c:	2b01      	cmp	r3, #1
1000b37e:	d023      	beq.n	1000b3c8 <sms_dualtimer1_fn+0x120>
1000b380:	2b02      	cmp	r3, #2
1000b382:	d139      	bne.n	1000b3f8 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b384:	4b47      	ldr	r3, [pc, #284]	; (1000b4a4 <sms_dualtimer1_fn+0x1fc>)
1000b386:	781b      	ldrb	r3, [r3, #0]
1000b388:	2b00      	cmp	r3, #0
1000b38a:	d115      	bne.n	1000b3b8 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b38c:	4a46      	ldr	r2, [pc, #280]	; (1000b4a8 <sms_dualtimer1_fn+0x200>)
1000b38e:	7813      	ldrb	r3, [r2, #0]
1000b390:	3301      	adds	r3, #1
1000b392:	b2db      	uxtb	r3, r3
1000b394:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b396:	2b0f      	cmp	r3, #15
1000b398:	d905      	bls.n	1000b3a6 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b39a:	2200      	movs	r2, #0
1000b39c:	4b3c      	ldr	r3, [pc, #240]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b39e:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b3a0:	4b42      	ldr	r3, [pc, #264]	; (1000b4ac <sms_dualtimer1_fn+0x204>)
1000b3a2:	4798      	blx	r3
1000b3a4:	e073      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b3a6:	2201      	movs	r2, #1
1000b3a8:	4b39      	ldr	r3, [pc, #228]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b3aa:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b3ac:	2200      	movs	r2, #0
1000b3ae:	21fa      	movs	r1, #250	; 0xfa
1000b3b0:	2001      	movs	r0, #1
1000b3b2:	4b3f      	ldr	r3, [pc, #252]	; (1000b4b0 <sms_dualtimer1_fn+0x208>)
1000b3b4:	4798      	blx	r3
1000b3b6:	e06a      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3b8:	4b3e      	ldr	r3, [pc, #248]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b3ba:	781b      	ldrb	r3, [r3, #0]
1000b3bc:	2b00      	cmp	r3, #0
1000b3be:	d166      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b3c0:	2201      	movs	r2, #1
1000b3c2:	4b3d      	ldr	r3, [pc, #244]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b3c4:	701a      	strb	r2, [r3, #0]
1000b3c6:	e062      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b3c8:	4b36      	ldr	r3, [pc, #216]	; (1000b4a4 <sms_dualtimer1_fn+0x1fc>)
1000b3ca:	781b      	ldrb	r3, [r3, #0]
1000b3cc:	2b00      	cmp	r3, #0
1000b3ce:	d10b      	bne.n	1000b3e8 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b3d0:	2200      	movs	r2, #0
1000b3d2:	4b35      	ldr	r3, [pc, #212]	; (1000b4a8 <sms_dualtimer1_fn+0x200>)
1000b3d4:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b3d6:	3201      	adds	r2, #1
1000b3d8:	4b2d      	ldr	r3, [pc, #180]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b3da:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b3dc:	2200      	movs	r2, #0
1000b3de:	2164      	movs	r1, #100	; 0x64
1000b3e0:	2001      	movs	r0, #1
1000b3e2:	4b33      	ldr	r3, [pc, #204]	; (1000b4b0 <sms_dualtimer1_fn+0x208>)
1000b3e4:	4798      	blx	r3
1000b3e6:	e052      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3e8:	4b32      	ldr	r3, [pc, #200]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b3ea:	781b      	ldrb	r3, [r3, #0]
1000b3ec:	2b00      	cmp	r3, #0
1000b3ee:	d14e      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b3f0:	2201      	movs	r2, #1
1000b3f2:	4b31      	ldr	r3, [pc, #196]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b3f4:	701a      	strb	r2, [r3, #0]
1000b3f6:	e04a      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3f8:	4b2e      	ldr	r3, [pc, #184]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b3fa:	781b      	ldrb	r3, [r3, #0]
1000b3fc:	2b00      	cmp	r3, #0
1000b3fe:	d146      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b400:	2201      	movs	r2, #1
1000b402:	4b2d      	ldr	r3, [pc, #180]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b404:	701a      	strb	r2, [r3, #0]
1000b406:	e042      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b408:	4b2a      	ldr	r3, [pc, #168]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b40a:	781b      	ldrb	r3, [r3, #0]
1000b40c:	2b00      	cmp	r3, #0
1000b40e:	d13e      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b410:	2201      	movs	r2, #1
1000b412:	4b29      	ldr	r3, [pc, #164]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b414:	701a      	strb	r2, [r3, #0]
1000b416:	e03a      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b418:	4c1e      	ldr	r4, [pc, #120]	; (1000b494 <sms_dualtimer1_fn+0x1ec>)
1000b41a:	7b63      	ldrb	r3, [r4, #13]
1000b41c:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b41e:	4b1e      	ldr	r3, [pc, #120]	; (1000b498 <sms_dualtimer1_fn+0x1f0>)
1000b420:	4798      	blx	r3
1000b422:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b424:	481d      	ldr	r0, [pc, #116]	; (1000b49c <sms_dualtimer1_fn+0x1f4>)
1000b426:	4b1e      	ldr	r3, [pc, #120]	; (1000b4a0 <sms_dualtimer1_fn+0x1f8>)
1000b428:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b42a:	89a2      	ldrh	r2, [r4, #12]
1000b42c:	4b23      	ldr	r3, [pc, #140]	; (1000b4bc <sms_dualtimer1_fn+0x214>)
1000b42e:	429a      	cmp	r2, r3
1000b430:	d112      	bne.n	1000b458 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b432:	4a1d      	ldr	r2, [pc, #116]	; (1000b4a8 <sms_dualtimer1_fn+0x200>)
1000b434:	7813      	ldrb	r3, [r2, #0]
1000b436:	3301      	adds	r3, #1
1000b438:	b2db      	uxtb	r3, r3
1000b43a:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b43c:	2b09      	cmp	r3, #9
1000b43e:	d902      	bls.n	1000b446 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b440:	4b1f      	ldr	r3, [pc, #124]	; (1000b4c0 <sms_dualtimer1_fn+0x218>)
1000b442:	4798      	blx	r3
1000b444:	e023      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b446:	2202      	movs	r2, #2
1000b448:	4b11      	ldr	r3, [pc, #68]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b44a:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b44c:	2200      	movs	r2, #0
1000b44e:	21fa      	movs	r1, #250	; 0xfa
1000b450:	2001      	movs	r0, #1
1000b452:	4b17      	ldr	r3, [pc, #92]	; (1000b4b0 <sms_dualtimer1_fn+0x208>)
1000b454:	4798      	blx	r3
1000b456:	e01a      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b458:	232b      	movs	r3, #43	; 0x2b
1000b45a:	4a1a      	ldr	r2, [pc, #104]	; (1000b4c4 <sms_dualtimer1_fn+0x21c>)
1000b45c:	5cd3      	ldrb	r3, [r2, r3]
1000b45e:	2b01      	cmp	r3, #1
1000b460:	d103      	bne.n	1000b46a <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000b462:	2101      	movs	r1, #1
1000b464:	2000      	movs	r0, #0
1000b466:	4b18      	ldr	r3, [pc, #96]	; (1000b4c8 <sms_dualtimer1_fn+0x220>)
1000b468:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b46a:	2200      	movs	r2, #0
1000b46c:	4b08      	ldr	r3, [pc, #32]	; (1000b490 <sms_dualtimer1_fn+0x1e8>)
1000b46e:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b470:	4b10      	ldr	r3, [pc, #64]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b472:	781b      	ldrb	r3, [r3, #0]
1000b474:	2b00      	cmp	r3, #0
1000b476:	d10a      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000b478:	3201      	adds	r2, #1
1000b47a:	4b0f      	ldr	r3, [pc, #60]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b47c:	701a      	strb	r2, [r3, #0]
1000b47e:	e006      	b.n	1000b48e <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b480:	4b0c      	ldr	r3, [pc, #48]	; (1000b4b4 <sms_dualtimer1_fn+0x20c>)
1000b482:	781b      	ldrb	r3, [r3, #0]
1000b484:	2b00      	cmp	r3, #0
1000b486:	d102      	bne.n	1000b48e <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000b488:	2201      	movs	r2, #1
1000b48a:	4b0b      	ldr	r3, [pc, #44]	; (1000b4b8 <sms_dualtimer1_fn+0x210>)
1000b48c:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b48e:	bd10      	pop	{r4, pc}
1000b490:	10018be0 	.word	0x10018be0
1000b494:	10018c7c 	.word	0x10018c7c
1000b498:	1000a621 	.word	0x1000a621
1000b49c:	100162dc 	.word	0x100162dc
1000b4a0:	1000a8b9 	.word	0x1000a8b9
1000b4a4:	10018c78 	.word	0x10018c78
1000b4a8:	10018db6 	.word	0x10018db6
1000b4ac:	10009f81 	.word	0x10009f81
1000b4b0:	1000b1fd 	.word	0x1000b1fd
1000b4b4:	10018d9b 	.word	0x10018d9b
1000b4b8:	10018c75 	.word	0x10018c75
1000b4bc:	00000303 	.word	0x00000303
1000b4c0:	10009f99 	.word	0x10009f99
1000b4c4:	10018d00 	.word	0x10018d00
1000b4c8:	1000af65 	.word	0x1000af65

1000b4cc <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b4cc:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b4ce:	483a      	ldr	r0, [pc, #232]	; (1000b5b8 <sms_dualtimer2_fn+0xec>)
1000b4d0:	4b3a      	ldr	r3, [pc, #232]	; (1000b5bc <sms_dualtimer2_fn+0xf0>)
1000b4d2:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b4d4:	4b3a      	ldr	r3, [pc, #232]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b4d6:	781b      	ldrb	r3, [r3, #0]
1000b4d8:	b2db      	uxtb	r3, r3
1000b4da:	2b02      	cmp	r3, #2
1000b4dc:	d028      	beq.n	1000b530 <sms_dualtimer2_fn+0x64>
1000b4de:	2b03      	cmp	r3, #3
1000b4e0:	d047      	beq.n	1000b572 <sms_dualtimer2_fn+0xa6>
1000b4e2:	2b01      	cmp	r3, #1
1000b4e4:	d166      	bne.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b4e6:	2200      	movs	r2, #0
1000b4e8:	4b35      	ldr	r3, [pc, #212]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b4ea:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000b4ec:	4b35      	ldr	r3, [pc, #212]	; (1000b5c4 <sms_dualtimer2_fn+0xf8>)
1000b4ee:	781b      	ldrb	r3, [r3, #0]
1000b4f0:	2b22      	cmp	r3, #34	; 0x22
1000b4f2:	d107      	bne.n	1000b504 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b4f4:	4b34      	ldr	r3, [pc, #208]	; (1000b5c8 <sms_dualtimer2_fn+0xfc>)
1000b4f6:	781b      	ldrb	r3, [r3, #0]
1000b4f8:	2b00      	cmp	r3, #0
1000b4fa:	d15b      	bne.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000b4fc:	3201      	adds	r2, #1
1000b4fe:	4b33      	ldr	r3, [pc, #204]	; (1000b5cc <sms_dualtimer2_fn+0x100>)
1000b500:	701a      	strb	r2, [r3, #0]
1000b502:	e057      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b504:	4a32      	ldr	r2, [pc, #200]	; (1000b5d0 <sms_dualtimer2_fn+0x104>)
1000b506:	7813      	ldrb	r3, [r2, #0]
1000b508:	3301      	adds	r3, #1
1000b50a:	b2db      	uxtb	r3, r3
1000b50c:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b50e:	2b00      	cmp	r3, #0
1000b510:	d006      	beq.n	1000b520 <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b512:	2200      	movs	r2, #0
1000b514:	4b2a      	ldr	r3, [pc, #168]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b516:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000b518:	3222      	adds	r2, #34	; 0x22
1000b51a:	4b2a      	ldr	r3, [pc, #168]	; (1000b5c4 <sms_dualtimer2_fn+0xf8>)
1000b51c:	701a      	strb	r2, [r3, #0]
1000b51e:	e049      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b520:	2201      	movs	r2, #1
1000b522:	4b27      	ldr	r3, [pc, #156]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b524:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b526:	2164      	movs	r1, #100	; 0x64
1000b528:	2001      	movs	r0, #1
1000b52a:	4b2a      	ldr	r3, [pc, #168]	; (1000b5d4 <sms_dualtimer2_fn+0x108>)
1000b52c:	4798      	blx	r3
1000b52e:	e041      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000b530:	2200      	movs	r2, #0
1000b532:	4b23      	ldr	r3, [pc, #140]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b534:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b536:	4a28      	ldr	r2, [pc, #160]	; (1000b5d8 <sms_dualtimer2_fn+0x10c>)
1000b538:	7813      	ldrb	r3, [r2, #0]
1000b53a:	3301      	adds	r3, #1
1000b53c:	b2db      	uxtb	r3, r3
1000b53e:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b540:	7813      	ldrb	r3, [r2, #0]
1000b542:	b2db      	uxtb	r3, r3
1000b544:	2b07      	cmp	r3, #7
1000b546:	d908      	bls.n	1000b55a <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b548:	2016      	movs	r0, #22
1000b54a:	4b24      	ldr	r3, [pc, #144]	; (1000b5dc <sms_dualtimer2_fn+0x110>)
1000b54c:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b54e:	4b24      	ldr	r3, [pc, #144]	; (1000b5e0 <sms_dualtimer2_fn+0x114>)
1000b550:	4798      	blx	r3
            ulp_ready = true;
1000b552:	2201      	movs	r2, #1
1000b554:	4b1d      	ldr	r3, [pc, #116]	; (1000b5cc <sms_dualtimer2_fn+0x100>)
1000b556:	701a      	strb	r2, [r3, #0]
1000b558:	e02c      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b55a:	2016      	movs	r0, #22
1000b55c:	4b21      	ldr	r3, [pc, #132]	; (1000b5e4 <sms_dualtimer2_fn+0x118>)
1000b55e:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b560:	2202      	movs	r2, #2
1000b562:	4b17      	ldr	r3, [pc, #92]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b564:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b566:	3a01      	subs	r2, #1
1000b568:	2164      	movs	r1, #100	; 0x64
1000b56a:	2001      	movs	r0, #1
1000b56c:	4b19      	ldr	r3, [pc, #100]	; (1000b5d4 <sms_dualtimer2_fn+0x108>)
1000b56e:	4798      	blx	r3
1000b570:	e020      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000b572:	2200      	movs	r2, #0
1000b574:	4b12      	ldr	r3, [pc, #72]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b576:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b578:	4a17      	ldr	r2, [pc, #92]	; (1000b5d8 <sms_dualtimer2_fn+0x10c>)
1000b57a:	7813      	ldrb	r3, [r2, #0]
1000b57c:	3301      	adds	r3, #1
1000b57e:	b2db      	uxtb	r3, r3
1000b580:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b582:	7813      	ldrb	r3, [r2, #0]
1000b584:	b2db      	uxtb	r3, r3
1000b586:	2b03      	cmp	r3, #3
1000b588:	d908      	bls.n	1000b59c <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b58a:	2016      	movs	r0, #22
1000b58c:	4b13      	ldr	r3, [pc, #76]	; (1000b5dc <sms_dualtimer2_fn+0x110>)
1000b58e:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b590:	4b15      	ldr	r3, [pc, #84]	; (1000b5e8 <sms_dualtimer2_fn+0x11c>)
1000b592:	4798      	blx	r3
            ulp_ready = true;
1000b594:	2201      	movs	r2, #1
1000b596:	4b0d      	ldr	r3, [pc, #52]	; (1000b5cc <sms_dualtimer2_fn+0x100>)
1000b598:	701a      	strb	r2, [r3, #0]
1000b59a:	e00b      	b.n	1000b5b4 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b59c:	2016      	movs	r0, #22
1000b59e:	4b11      	ldr	r3, [pc, #68]	; (1000b5e4 <sms_dualtimer2_fn+0x118>)
1000b5a0:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b5a2:	2203      	movs	r2, #3
1000b5a4:	4b06      	ldr	r3, [pc, #24]	; (1000b5c0 <sms_dualtimer2_fn+0xf4>)
1000b5a6:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b5a8:	3a02      	subs	r2, #2
1000b5aa:	21c8      	movs	r1, #200	; 0xc8
1000b5ac:	0049      	lsls	r1, r1, #1
1000b5ae:	2001      	movs	r0, #1
1000b5b0:	4b08      	ldr	r3, [pc, #32]	; (1000b5d4 <sms_dualtimer2_fn+0x108>)
1000b5b2:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b5b4:	bd10      	pop	{r4, pc}
1000b5b6:	46c0      	nop			; (mov r8, r8)
1000b5b8:	100162f0 	.word	0x100162f0
1000b5bc:	1000a8b9 	.word	0x1000a8b9
1000b5c0:	10018d9b 	.word	0x10018d9b
1000b5c4:	10018c78 	.word	0x10018c78
1000b5c8:	10018be0 	.word	0x10018be0
1000b5cc:	10018c75 	.word	0x10018c75
1000b5d0:	10018d8d 	.word	0x10018d8d
1000b5d4:	1000b1fd 	.word	0x1000b1fd
1000b5d8:	10018dbc 	.word	0x10018dbc
1000b5dc:	1000ac7d 	.word	0x1000ac7d
1000b5e0:	1000a109 	.word	0x1000a109
1000b5e4:	1000acbd 	.word	0x1000acbd
1000b5e8:	1000f049 	.word	0x1000f049

1000b5ec <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b5ec:	230c      	movs	r3, #12
1000b5ee:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b5f0:	2300      	movs	r3, #0
1000b5f2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b5f4:	7083      	strb	r3, [r0, #2]
}
1000b5f6:	4770      	bx	lr

1000b5f8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b5f8:	2301      	movs	r3, #1
1000b5fa:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b5fc:	2300      	movs	r3, #0
1000b5fe:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b600:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b602:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b604:	3381      	adds	r3, #129	; 0x81
1000b606:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b608:	3b77      	subs	r3, #119	; 0x77
1000b60a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b60c:	3301      	adds	r3, #1
1000b60e:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b610:	3301      	adds	r3, #1
1000b612:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b614:	3301      	adds	r3, #1
1000b616:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b618:	3b0b      	subs	r3, #11
1000b61a:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b61c:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b61e:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b620:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b622:	4770      	bx	lr

1000b624 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b624:	b530      	push	{r4, r5, lr}
1000b626:	b083      	sub	sp, #12
1000b628:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b62a:	780b      	ldrb	r3, [r1, #0]
1000b62c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b62e:	784b      	ldrb	r3, [r1, #1]
1000b630:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b632:	788b      	ldrb	r3, [r1, #2]
1000b634:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b636:	ad01      	add	r5, sp, #4
1000b638:	0028      	movs	r0, r5
1000b63a:	4b07      	ldr	r3, [pc, #28]	; (1000b658 <spi_attach_slave+0x34>)
1000b63c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b63e:	2301      	movs	r3, #1
1000b640:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b642:	7820      	ldrb	r0, [r4, #0]
1000b644:	0029      	movs	r1, r5
1000b646:	4b05      	ldr	r3, [pc, #20]	; (1000b65c <spi_attach_slave+0x38>)
1000b648:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b64a:	7820      	ldrb	r0, [r4, #0]
1000b64c:	2101      	movs	r1, #1
1000b64e:	4b04      	ldr	r3, [pc, #16]	; (1000b660 <spi_attach_slave+0x3c>)
1000b650:	4798      	blx	r3
}
1000b652:	b003      	add	sp, #12
1000b654:	bd30      	pop	{r4, r5, pc}
1000b656:	46c0      	nop			; (mov r8, r8)
1000b658:	1000bc41 	.word	0x1000bc41
1000b65c:	1000bc51 	.word	0x1000bc51
1000b660:	1000bea9 	.word	0x1000bea9

1000b664 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b664:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b666:	2201      	movs	r2, #1
1000b668:	761a      	strb	r2, [r3, #24]
}
1000b66a:	4770      	bx	lr

1000b66c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b66c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b66e:	2300      	movs	r3, #0
1000b670:	6802      	ldr	r2, [r0, #0]
1000b672:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b674:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b676:	4a0d      	ldr	r2, [pc, #52]	; (1000b6ac <spi_disable+0x40>)
1000b678:	4293      	cmp	r3, r2
1000b67a:	d109      	bne.n	1000b690 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b67c:	2041      	movs	r0, #65	; 0x41
1000b67e:	4c0c      	ldr	r4, [pc, #48]	; (1000b6b0 <spi_disable+0x44>)
1000b680:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b682:	2026      	movs	r0, #38	; 0x26
1000b684:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b686:	2038      	movs	r0, #56	; 0x38
1000b688:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b68a:	2001      	movs	r0, #1
1000b68c:	47a0      	blx	r4
1000b68e:	e00b      	b.n	1000b6a8 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b690:	4a08      	ldr	r2, [pc, #32]	; (1000b6b4 <spi_disable+0x48>)
1000b692:	4293      	cmp	r3, r2
1000b694:	d108      	bne.n	1000b6a8 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b696:	2042      	movs	r0, #66	; 0x42
1000b698:	4c05      	ldr	r4, [pc, #20]	; (1000b6b0 <spi_disable+0x44>)
1000b69a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b69c:	2027      	movs	r0, #39	; 0x27
1000b69e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b6a0:	2039      	movs	r0, #57	; 0x39
1000b6a2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b6a4:	2002      	movs	r0, #2
1000b6a6:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b6a8:	bd10      	pop	{r4, pc}
1000b6aa:	46c0      	nop			; (mov r8, r8)
1000b6ac:	40006000 	.word	0x40006000
1000b6b0:	1000c641 	.word	0x1000c641
1000b6b4:	40007000 	.word	0x40007000

1000b6b8 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b6b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b6ba:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b6bc:	4b09      	ldr	r3, [pc, #36]	; (1000b6e4 <spi_reset+0x2c>)
1000b6be:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b6c0:	4b09      	ldr	r3, [pc, #36]	; (1000b6e8 <spi_reset+0x30>)
1000b6c2:	429c      	cmp	r4, r3
1000b6c4:	d105      	bne.n	1000b6d2 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b6c6:	2001      	movs	r0, #1
1000b6c8:	4c08      	ldr	r4, [pc, #32]	; (1000b6ec <spi_reset+0x34>)
1000b6ca:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b6cc:	2038      	movs	r0, #56	; 0x38
1000b6ce:	47a0      	blx	r4
1000b6d0:	e007      	b.n	1000b6e2 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b6d2:	4b07      	ldr	r3, [pc, #28]	; (1000b6f0 <spi_reset+0x38>)
1000b6d4:	429c      	cmp	r4, r3
1000b6d6:	d104      	bne.n	1000b6e2 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b6d8:	2002      	movs	r0, #2
1000b6da:	4c04      	ldr	r4, [pc, #16]	; (1000b6ec <spi_reset+0x34>)
1000b6dc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b6de:	2039      	movs	r0, #57	; 0x39
1000b6e0:	47a0      	blx	r4
	}
}
1000b6e2:	bd10      	pop	{r4, pc}
1000b6e4:	1000b66d 	.word	0x1000b66d
1000b6e8:	40006000 	.word	0x40006000
1000b6ec:	1000c9ad 	.word	0x1000c9ad
1000b6f0:	40007000 	.word	0x40007000

1000b6f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6f6:	465f      	mov	r7, fp
1000b6f8:	4646      	mov	r6, r8
1000b6fa:	b4c0      	push	{r6, r7}
1000b6fc:	b083      	sub	sp, #12
1000b6fe:	0006      	movs	r6, r0
1000b700:	4688      	mov	r8, r1
1000b702:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b704:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b706:	7e0b      	ldrb	r3, [r1, #24]
1000b708:	07db      	lsls	r3, r3, #31
1000b70a:	d501      	bpl.n	1000b710 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b70c:	2300      	movs	r3, #0
1000b70e:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b710:	0030      	movs	r0, r6
1000b712:	4b4a      	ldr	r3, [pc, #296]	; (1000b83c <spi_init+0x148>)
1000b714:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b716:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b718:	4a49      	ldr	r2, [pc, #292]	; (1000b840 <spi_init+0x14c>)
1000b71a:	4293      	cmp	r3, r2
1000b71c:	d109      	bne.n	1000b732 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b71e:	2041      	movs	r0, #65	; 0x41
1000b720:	4c48      	ldr	r4, [pc, #288]	; (1000b844 <spi_init+0x150>)
1000b722:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b724:	2026      	movs	r0, #38	; 0x26
1000b726:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b728:	2038      	movs	r0, #56	; 0x38
1000b72a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b72c:	2001      	movs	r0, #1
1000b72e:	47a0      	blx	r4
1000b730:	e00b      	b.n	1000b74a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b732:	4a45      	ldr	r2, [pc, #276]	; (1000b848 <spi_init+0x154>)
1000b734:	4293      	cmp	r3, r2
1000b736:	d108      	bne.n	1000b74a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b738:	2042      	movs	r0, #66	; 0x42
1000b73a:	4c42      	ldr	r4, [pc, #264]	; (1000b844 <spi_init+0x150>)
1000b73c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b73e:	2027      	movs	r0, #39	; 0x27
1000b740:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b742:	2039      	movs	r0, #57	; 0x39
1000b744:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b746:	2002      	movs	r0, #2
1000b748:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b74a:	a801      	add	r0, sp, #4
1000b74c:	4b3f      	ldr	r3, [pc, #252]	; (1000b84c <spi_init+0x158>)
1000b74e:	4798      	blx	r3
1000b750:	002c      	movs	r4, r5
1000b752:	3408      	adds	r4, #8
1000b754:	2318      	movs	r3, #24
1000b756:	469b      	mov	fp, r3
1000b758:	44ab      	add	fp, r5
1000b75a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b75c:	6820      	ldr	r0, [r4, #0]
1000b75e:	1c43      	adds	r3, r0, #1
1000b760:	d011      	beq.n	1000b786 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b762:	782b      	ldrb	r3, [r5, #0]
1000b764:	2b01      	cmp	r3, #1
1000b766:	d102      	bne.n	1000b76e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b768:	466a      	mov	r2, sp
1000b76a:	7113      	strb	r3, [r2, #4]
1000b76c:	e003      	b.n	1000b776 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b76e:	2b00      	cmp	r3, #0
1000b770:	d101      	bne.n	1000b776 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b772:	466a      	mov	r2, sp
1000b774:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b776:	b2c0      	uxtb	r0, r0
1000b778:	a901      	add	r1, sp, #4
1000b77a:	4b35      	ldr	r3, [pc, #212]	; (1000b850 <spi_init+0x15c>)
1000b77c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b77e:	8a39      	ldrh	r1, [r7, #16]
1000b780:	7838      	ldrb	r0, [r7, #0]
1000b782:	4b34      	ldr	r3, [pc, #208]	; (1000b854 <spi_init+0x160>)
1000b784:	4798      	blx	r3
1000b786:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b788:	455c      	cmp	r4, fp
1000b78a:	d1e6      	bne.n	1000b75a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b78c:	78eb      	ldrb	r3, [r5, #3]
1000b78e:	4642      	mov	r2, r8
1000b790:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b792:	782b      	ldrb	r3, [r5, #0]
1000b794:	2b01      	cmp	r3, #1
1000b796:	d100      	bne.n	1000b79a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b798:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b79a:	782b      	ldrb	r3, [r5, #0]
1000b79c:	2b00      	cmp	r3, #0
1000b79e:	d101      	bne.n	1000b7a4 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b7a0:	4642      	mov	r2, r8
1000b7a2:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b7a4:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b7a6:	782a      	ldrb	r2, [r5, #0]
1000b7a8:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b7aa:	782a      	ldrb	r2, [r5, #0]
1000b7ac:	2a01      	cmp	r2, #1
1000b7ae:	d101      	bne.n	1000b7b4 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b7b0:	792a      	ldrb	r2, [r5, #4]
1000b7b2:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b7b4:	786a      	ldrb	r2, [r5, #1]
1000b7b6:	2a04      	cmp	r2, #4
1000b7b8:	d104      	bne.n	1000b7c4 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b7ba:	2124      	movs	r1, #36	; 0x24
1000b7bc:	5c58      	ldrb	r0, [r3, r1]
1000b7be:	4302      	orrs	r2, r0
1000b7c0:	545a      	strb	r2, [r3, r1]
1000b7c2:	e004      	b.n	1000b7ce <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b7c4:	2124      	movs	r1, #36	; 0x24
1000b7c6:	5c5a      	ldrb	r2, [r3, r1]
1000b7c8:	2004      	movs	r0, #4
1000b7ca:	4382      	bics	r2, r0
1000b7cc:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b7ce:	78aa      	ldrb	r2, [r5, #2]
1000b7d0:	2a01      	cmp	r2, #1
1000b7d2:	d01a      	beq.n	1000b80a <spi_init+0x116>
1000b7d4:	2a00      	cmp	r2, #0
1000b7d6:	d004      	beq.n	1000b7e2 <spi_init+0xee>
1000b7d8:	2a02      	cmp	r2, #2
1000b7da:	d00c      	beq.n	1000b7f6 <spi_init+0x102>
1000b7dc:	2a03      	cmp	r2, #3
1000b7de:	d01e      	beq.n	1000b81e <spi_init+0x12a>
1000b7e0:	e026      	b.n	1000b830 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b7e2:	2224      	movs	r2, #36	; 0x24
1000b7e4:	5c99      	ldrb	r1, [r3, r2]
1000b7e6:	2002      	movs	r0, #2
1000b7e8:	4381      	bics	r1, r0
1000b7ea:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b7ec:	5c99      	ldrb	r1, [r3, r2]
1000b7ee:	3801      	subs	r0, #1
1000b7f0:	4381      	bics	r1, r0
1000b7f2:	5499      	strb	r1, [r3, r2]
1000b7f4:	e01c      	b.n	1000b830 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b7f6:	2224      	movs	r2, #36	; 0x24
1000b7f8:	5c98      	ldrb	r0, [r3, r2]
1000b7fa:	2102      	movs	r1, #2
1000b7fc:	4301      	orrs	r1, r0
1000b7fe:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b800:	5c99      	ldrb	r1, [r3, r2]
1000b802:	2001      	movs	r0, #1
1000b804:	4381      	bics	r1, r0
1000b806:	5499      	strb	r1, [r3, r2]
1000b808:	e012      	b.n	1000b830 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b80a:	2224      	movs	r2, #36	; 0x24
1000b80c:	5c99      	ldrb	r1, [r3, r2]
1000b80e:	2002      	movs	r0, #2
1000b810:	4381      	bics	r1, r0
1000b812:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b814:	5c98      	ldrb	r0, [r3, r2]
1000b816:	2101      	movs	r1, #1
1000b818:	4301      	orrs	r1, r0
1000b81a:	5499      	strb	r1, [r3, r2]
1000b81c:	e008      	b.n	1000b830 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b81e:	2224      	movs	r2, #36	; 0x24
1000b820:	5c98      	ldrb	r0, [r3, r2]
1000b822:	2102      	movs	r1, #2
1000b824:	4301      	orrs	r1, r0
1000b826:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b828:	5c98      	ldrb	r0, [r3, r2]
1000b82a:	2101      	movs	r1, #1
1000b82c:	4301      	orrs	r1, r0
1000b82e:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b830:	2000      	movs	r0, #0
1000b832:	b003      	add	sp, #12
1000b834:	bc0c      	pop	{r2, r3}
1000b836:	4690      	mov	r8, r2
1000b838:	469b      	mov	fp, r3
1000b83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b83c:	1000b6b9 	.word	0x1000b6b9
1000b840:	40006000 	.word	0x40006000
1000b844:	1000c2e5 	.word	0x1000c2e5
1000b848:	40007000 	.word	0x40007000
1000b84c:	1000bc41 	.word	0x1000bc41
1000b850:	1000bc51 	.word	0x1000bc51
1000b854:	1000bf35 	.word	0x1000bf35

1000b858 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b858:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b85a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b85c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b85e:	2600      	movs	r6, #0
1000b860:	466d      	mov	r5, sp
1000b862:	71ee      	strb	r6, [r5, #7]
1000b864:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b866:	2c00      	cmp	r4, #0
1000b868:	d034      	beq.n	1000b8d4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b86a:	2900      	cmp	r1, #0
1000b86c:	d104      	bne.n	1000b878 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b86e:	0029      	movs	r1, r5
1000b870:	7980      	ldrb	r0, [r0, #6]
1000b872:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b874:	2701      	movs	r7, #1
1000b876:	e00b      	b.n	1000b890 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b878:	2a00      	cmp	r2, #0
1000b87a:	d005      	beq.n	1000b888 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b87c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b87e:	2b00      	cmp	r3, #0
1000b880:	d029      	beq.n	1000b8d6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b882:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b884:	2700      	movs	r7, #0
1000b886:	e003      	b.n	1000b890 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b888:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b88a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b88c:	466a      	mov	r2, sp
1000b88e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b890:	2528      	movs	r5, #40	; 0x28
1000b892:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b894:	07c0      	lsls	r0, r0, #31
1000b896:	d4fc      	bmi.n	1000b892 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b898:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b89a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b89c:	2b00      	cmp	r3, #0
1000b89e:	d014      	beq.n	1000b8ca <spi_transceive_buffer_wait+0x72>
1000b8a0:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b8a2:	4278      	negs	r0, r7
1000b8a4:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b8a6:	4270      	negs	r0, r6
1000b8a8:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b8aa:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b8ac:	07c0      	lsls	r0, r0, #31
1000b8ae:	d5fc      	bpl.n	1000b8aa <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b8b0:	7808      	ldrb	r0, [r1, #0]
1000b8b2:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b8b4:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b8b6:	07c0      	lsls	r0, r0, #31
1000b8b8:	d5fc      	bpl.n	1000b8b4 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b8ba:	7920      	ldrb	r0, [r4, #4]
1000b8bc:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b8be:	3501      	adds	r5, #1
1000b8c0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b8c2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b8c4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b8c6:	42ab      	cmp	r3, r5
1000b8c8:	d1ef      	bne.n	1000b8aa <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b8ca:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b8cc:	06db      	lsls	r3, r3, #27
1000b8ce:	d5fc      	bpl.n	1000b8ca <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b8d0:	2000      	movs	r0, #0
1000b8d2:	e000      	b.n	1000b8d6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b8d4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b8d6:	b003      	add	sp, #12
1000b8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b8da:	46c0      	nop			; (mov r8, r8)

1000b8dc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b8dc:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b8de:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b8e0:	2a00      	cmp	r2, #0
1000b8e2:	d003      	beq.n	1000b8ec <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b8e4:	2100      	movs	r1, #0
1000b8e6:	4b04      	ldr	r3, [pc, #16]	; (1000b8f8 <spi_select_slave+0x1c>)
1000b8e8:	4798      	blx	r3
1000b8ea:	e002      	b.n	1000b8f2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b8ec:	2101      	movs	r1, #1
1000b8ee:	4b02      	ldr	r3, [pc, #8]	; (1000b8f8 <spi_select_slave+0x1c>)
1000b8f0:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b8f2:	2000      	movs	r0, #0
1000b8f4:	bd10      	pop	{r4, pc}
1000b8f6:	46c0      	nop			; (mov r8, r8)
1000b8f8:	1000bea9 	.word	0x1000bea9

1000b8fc <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b8fc:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b8fe:	4b0d      	ldr	r3, [pc, #52]	; (1000b934 <dualtimer_isr_handler+0x38>)
1000b900:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b902:	2b00      	cmp	r3, #0
1000b904:	d007      	beq.n	1000b916 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b906:	2201      	movs	r2, #1
1000b908:	4b0a      	ldr	r3, [pc, #40]	; (1000b934 <dualtimer_isr_handler+0x38>)
1000b90a:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b90c:	4b0a      	ldr	r3, [pc, #40]	; (1000b938 <dualtimer_isr_handler+0x3c>)
1000b90e:	681b      	ldr	r3, [r3, #0]
1000b910:	2b00      	cmp	r3, #0
1000b912:	d000      	beq.n	1000b916 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b914:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b916:	2334      	movs	r3, #52	; 0x34
1000b918:	4a06      	ldr	r2, [pc, #24]	; (1000b934 <dualtimer_isr_handler+0x38>)
1000b91a:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b91c:	2b00      	cmp	r3, #0
1000b91e:	d007      	beq.n	1000b930 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b920:	2101      	movs	r1, #1
1000b922:	232c      	movs	r3, #44	; 0x2c
1000b924:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b926:	4b05      	ldr	r3, [pc, #20]	; (1000b93c <dualtimer_isr_handler+0x40>)
1000b928:	681b      	ldr	r3, [r3, #0]
1000b92a:	2b00      	cmp	r3, #0
1000b92c:	d000      	beq.n	1000b930 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b92e:	4798      	blx	r3
	}
}
1000b930:	bd10      	pop	{r4, pc}
1000b932:	46c0      	nop			; (mov r8, r8)
1000b934:	40001000 	.word	0x40001000
1000b938:	10017140 	.word	0x10017140
1000b93c:	10017144 	.word	0x10017144

1000b940 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b940:	2301      	movs	r3, #1
1000b942:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b944:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b946:	2202      	movs	r2, #2
1000b948:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b94a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b94c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b94e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b950:	2200      	movs	r2, #0
1000b952:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b954:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b956:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b958:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b95a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b95c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b95e:	7602      	strb	r2, [r0, #24]
}
1000b960:	4770      	bx	lr
1000b962:	46c0      	nop			; (mov r8, r8)

1000b964 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b964:	2800      	cmp	r0, #0
1000b966:	d107      	bne.n	1000b978 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b968:	2900      	cmp	r1, #0
1000b96a:	d102      	bne.n	1000b972 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b96c:	4b06      	ldr	r3, [pc, #24]	; (1000b988 <dualtimer_set_counter+0x24>)
1000b96e:	601a      	str	r2, [r3, #0]
1000b970:	e009      	b.n	1000b986 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b972:	4b05      	ldr	r3, [pc, #20]	; (1000b988 <dualtimer_set_counter+0x24>)
1000b974:	619a      	str	r2, [r3, #24]
1000b976:	e006      	b.n	1000b986 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b978:	2900      	cmp	r1, #0
1000b97a:	d102      	bne.n	1000b982 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b97c:	4b02      	ldr	r3, [pc, #8]	; (1000b988 <dualtimer_set_counter+0x24>)
1000b97e:	621a      	str	r2, [r3, #32]
1000b980:	e001      	b.n	1000b986 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b982:	4b01      	ldr	r3, [pc, #4]	; (1000b988 <dualtimer_set_counter+0x24>)
1000b984:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b986:	4770      	bx	lr
1000b988:	40001000 	.word	0x40001000

1000b98c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b98c:	2800      	cmp	r0, #0
1000b98e:	d105      	bne.n	1000b99c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b990:	4a06      	ldr	r2, [pc, #24]	; (1000b9ac <dualtimer_enable+0x20>)
1000b992:	7a11      	ldrb	r1, [r2, #8]
1000b994:	2380      	movs	r3, #128	; 0x80
1000b996:	430b      	orrs	r3, r1
1000b998:	7213      	strb	r3, [r2, #8]
1000b99a:	e005      	b.n	1000b9a8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b99c:	4903      	ldr	r1, [pc, #12]	; (1000b9ac <dualtimer_enable+0x20>)
1000b99e:	2228      	movs	r2, #40	; 0x28
1000b9a0:	5c88      	ldrb	r0, [r1, r2]
1000b9a2:	2380      	movs	r3, #128	; 0x80
1000b9a4:	4303      	orrs	r3, r0
1000b9a6:	548b      	strb	r3, [r1, r2]
	}
}
1000b9a8:	4770      	bx	lr
1000b9aa:	46c0      	nop			; (mov r8, r8)
1000b9ac:	40001000 	.word	0x40001000

1000b9b0 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b9b0:	2800      	cmp	r0, #0
1000b9b2:	d105      	bne.n	1000b9c0 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b9b4:	4a06      	ldr	r2, [pc, #24]	; (1000b9d0 <dualtimer_disable+0x20>)
1000b9b6:	7a11      	ldrb	r1, [r2, #8]
1000b9b8:	237f      	movs	r3, #127	; 0x7f
1000b9ba:	400b      	ands	r3, r1
1000b9bc:	7213      	strb	r3, [r2, #8]
1000b9be:	e005      	b.n	1000b9cc <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b9c0:	4903      	ldr	r1, [pc, #12]	; (1000b9d0 <dualtimer_disable+0x20>)
1000b9c2:	2228      	movs	r2, #40	; 0x28
1000b9c4:	5c88      	ldrb	r0, [r1, r2]
1000b9c6:	237f      	movs	r3, #127	; 0x7f
1000b9c8:	4003      	ands	r3, r0
1000b9ca:	548b      	strb	r3, [r1, r2]
	}
}
1000b9cc:	4770      	bx	lr
1000b9ce:	46c0      	nop			; (mov r8, r8)
1000b9d0:	40001000 	.word	0x40001000

1000b9d4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b9d4:	b570      	push	{r4, r5, r6, lr}
1000b9d6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b9d8:	2004      	movs	r0, #4
1000b9da:	4b39      	ldr	r3, [pc, #228]	; (1000bac0 <dualtimer_init+0xec>)
1000b9dc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b9de:	7823      	ldrb	r3, [r4, #0]
1000b9e0:	2b00      	cmp	r3, #0
1000b9e2:	d102      	bne.n	1000b9ea <dualtimer_init+0x16>
1000b9e4:	7b23      	ldrb	r3, [r4, #12]
1000b9e6:	2b00      	cmp	r3, #0
1000b9e8:	d065      	beq.n	1000bab6 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b9ea:	4936      	ldr	r1, [pc, #216]	; (1000bac4 <dualtimer_init+0xf0>)
1000b9ec:	68ca      	ldr	r2, [r1, #12]
1000b9ee:	2320      	movs	r3, #32
1000b9f0:	4313      	orrs	r3, r2
1000b9f2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b9f4:	7e22      	ldrb	r2, [r4, #24]
1000b9f6:	698b      	ldr	r3, [r1, #24]
1000b9f8:	2003      	movs	r0, #3
1000b9fa:	4002      	ands	r2, r0
1000b9fc:	0112      	lsls	r2, r2, #4
1000b9fe:	302d      	adds	r0, #45	; 0x2d
1000ba00:	4383      	bics	r3, r0
1000ba02:	4313      	orrs	r3, r2
1000ba04:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000ba06:	7823      	ldrb	r3, [r4, #0]
1000ba08:	2b00      	cmp	r3, #0
1000ba0a:	d026      	beq.n	1000ba5a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ba0c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000ba0e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ba10:	2b00      	cmp	r3, #0
1000ba12:	d003      	beq.n	1000ba1c <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000ba14:	3b02      	subs	r3, #2
1000ba16:	425d      	negs	r5, r3
1000ba18:	415d      	adcs	r5, r3
1000ba1a:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000ba1c:	78a2      	ldrb	r2, [r4, #2]
1000ba1e:	0052      	lsls	r2, r2, #1
1000ba20:	2502      	movs	r5, #2
1000ba22:	402a      	ands	r2, r5
1000ba24:	78e3      	ldrb	r3, [r4, #3]
1000ba26:	009b      	lsls	r3, r3, #2
1000ba28:	350a      	adds	r5, #10
1000ba2a:	402b      	ands	r3, r5
1000ba2c:	431a      	orrs	r2, r3
1000ba2e:	0015      	movs	r5, r2
1000ba30:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000ba32:	7923      	ldrb	r3, [r4, #4]
1000ba34:	2b00      	cmp	r3, #0
1000ba36:	d001      	beq.n	1000ba3c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000ba38:	2320      	movs	r3, #32
1000ba3a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000ba3c:	4b22      	ldr	r3, [pc, #136]	; (1000bac8 <dualtimer_init+0xf4>)
1000ba3e:	68a2      	ldr	r2, [r4, #8]
1000ba40:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000ba42:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000ba44:	491f      	ldr	r1, [pc, #124]	; (1000bac4 <dualtimer_init+0xf0>)
1000ba46:	22c4      	movs	r2, #196	; 0xc4
1000ba48:	0052      	lsls	r2, r2, #1
1000ba4a:	5c88      	ldrb	r0, [r1, r2]
1000ba4c:	2301      	movs	r3, #1
1000ba4e:	4303      	orrs	r3, r0
1000ba50:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000ba52:	2000      	movs	r0, #0
1000ba54:	4b1d      	ldr	r3, [pc, #116]	; (1000bacc <dualtimer_init+0xf8>)
1000ba56:	4798      	blx	r3
1000ba58:	e000      	b.n	1000ba5c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000ba5a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000ba5c:	7b23      	ldrb	r3, [r4, #12]
1000ba5e:	2b00      	cmp	r3, #0
1000ba60:	d029      	beq.n	1000bab6 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ba62:	7b63      	ldrb	r3, [r4, #13]
1000ba64:	2b00      	cmp	r3, #0
1000ba66:	d005      	beq.n	1000ba74 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000ba68:	2b01      	cmp	r3, #1
1000ba6a:	d005      	beq.n	1000ba78 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000ba6c:	2b02      	cmp	r3, #2
1000ba6e:	d104      	bne.n	1000ba7a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000ba70:	2540      	movs	r5, #64	; 0x40
1000ba72:	e002      	b.n	1000ba7a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000ba74:	2501      	movs	r5, #1
1000ba76:	e000      	b.n	1000ba7a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000ba78:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000ba7a:	7ba3      	ldrb	r3, [r4, #14]
1000ba7c:	005b      	lsls	r3, r3, #1
1000ba7e:	2102      	movs	r1, #2
1000ba80:	4019      	ands	r1, r3
1000ba82:	7be2      	ldrb	r2, [r4, #15]
1000ba84:	0092      	lsls	r2, r2, #2
1000ba86:	230c      	movs	r3, #12
1000ba88:	4013      	ands	r3, r2
1000ba8a:	430b      	orrs	r3, r1
1000ba8c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000ba8e:	7c23      	ldrb	r3, [r4, #16]
1000ba90:	2b00      	cmp	r3, #0
1000ba92:	d001      	beq.n	1000ba98 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000ba94:	2320      	movs	r3, #32
1000ba96:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000ba98:	6962      	ldr	r2, [r4, #20]
1000ba9a:	4b0b      	ldr	r3, [pc, #44]	; (1000bac8 <dualtimer_init+0xf4>)
1000ba9c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000ba9e:	2228      	movs	r2, #40	; 0x28
1000baa0:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000baa2:	4908      	ldr	r1, [pc, #32]	; (1000bac4 <dualtimer_init+0xf0>)
1000baa4:	3261      	adds	r2, #97	; 0x61
1000baa6:	32ff      	adds	r2, #255	; 0xff
1000baa8:	5c88      	ldrb	r0, [r1, r2]
1000baaa:	2302      	movs	r3, #2
1000baac:	4303      	orrs	r3, r0
1000baae:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bab0:	2001      	movs	r0, #1
1000bab2:	4b06      	ldr	r3, [pc, #24]	; (1000bacc <dualtimer_init+0xf8>)
1000bab4:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bab6:	4906      	ldr	r1, [pc, #24]	; (1000bad0 <dualtimer_init+0xfc>)
1000bab8:	201e      	movs	r0, #30
1000baba:	4b06      	ldr	r3, [pc, #24]	; (1000bad4 <dualtimer_init+0x100>)
1000babc:	4798      	blx	r3
}
1000babe:	bd70      	pop	{r4, r5, r6, pc}
1000bac0:	1000c9ad 	.word	0x1000c9ad
1000bac4:	4000b000 	.word	0x4000b000
1000bac8:	40001000 	.word	0x40001000
1000bacc:	1000b98d 	.word	0x1000b98d
1000bad0:	1000b8fd 	.word	0x1000b8fd
1000bad4:	1000ce15 	.word	0x1000ce15

1000bad8 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bad8:	2800      	cmp	r0, #0
1000bada:	d102      	bne.n	1000bae2 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000badc:	4b02      	ldr	r3, [pc, #8]	; (1000bae8 <dualtimer_register_callback+0x10>)
1000bade:	6019      	str	r1, [r3, #0]
1000bae0:	e001      	b.n	1000bae6 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bae2:	4b02      	ldr	r3, [pc, #8]	; (1000baec <dualtimer_register_callback+0x14>)
1000bae4:	6019      	str	r1, [r3, #0]
	}
}
1000bae6:	4770      	bx	lr
1000bae8:	10017140 	.word	0x10017140
1000baec:	10017144 	.word	0x10017144

1000baf0 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000baf0:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000baf2:	4b16      	ldr	r3, [pc, #88]	; (1000bb4c <gpio_port0_isr_handler+0x5c>)
1000baf4:	681d      	ldr	r5, [r3, #0]
1000baf6:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000baf8:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bafa:	07cb      	lsls	r3, r1, #31
1000bafc:	d407      	bmi.n	1000bb0e <gpio_port0_isr_handler+0x1e>
1000bafe:	2301      	movs	r3, #1
1000bb00:	2401      	movs	r4, #1
1000bb02:	0018      	movs	r0, r3
1000bb04:	0022      	movs	r2, r4
1000bb06:	409a      	lsls	r2, r3
1000bb08:	4211      	tst	r1, r2
1000bb0a:	d014      	beq.n	1000bb36 <gpio_port0_isr_handler+0x46>
1000bb0c:	e001      	b.n	1000bb12 <gpio_port0_isr_handler+0x22>
1000bb0e:	2201      	movs	r2, #1
1000bb10:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb12:	b292      	uxth	r2, r2
1000bb14:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bb16:	2346      	movs	r3, #70	; 0x46
1000bb18:	4a0c      	ldr	r2, [pc, #48]	; (1000bb4c <gpio_port0_isr_handler+0x5c>)
1000bb1a:	5ad3      	ldrh	r3, [r2, r3]
1000bb1c:	4103      	asrs	r3, r0
1000bb1e:	07db      	lsls	r3, r3, #31
1000bb20:	d50c      	bpl.n	1000bb3c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bb22:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bb24:	5ad3      	ldrh	r3, [r2, r3]
1000bb26:	4103      	asrs	r3, r0
1000bb28:	07db      	lsls	r3, r3, #31
1000bb2a:	d507      	bpl.n	1000bb3c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bb2c:	0080      	lsls	r0, r0, #2
1000bb2e:	1810      	adds	r0, r2, r0
1000bb30:	6843      	ldr	r3, [r0, #4]
1000bb32:	4798      	blx	r3
1000bb34:	e002      	b.n	1000bb3c <gpio_port0_isr_handler+0x4c>
1000bb36:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bb38:	2b10      	cmp	r3, #16
1000bb3a:	d1e2      	bne.n	1000bb02 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bb3c:	2180      	movs	r1, #128	; 0x80
1000bb3e:	0409      	lsls	r1, r1, #16
1000bb40:	23c0      	movs	r3, #192	; 0xc0
1000bb42:	005b      	lsls	r3, r3, #1
1000bb44:	4a02      	ldr	r2, [pc, #8]	; (1000bb50 <gpio_port0_isr_handler+0x60>)
1000bb46:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bb48:	bd70      	pop	{r4, r5, r6, pc}
1000bb4a:	46c0      	nop			; (mov r8, r8)
1000bb4c:	10018dc0 	.word	0x10018dc0
1000bb50:	e000e100 	.word	0xe000e100

1000bb54 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bb56:	4b18      	ldr	r3, [pc, #96]	; (1000bbb8 <gpio_port1_isr_handler+0x64>)
1000bb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bb5a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bb5c:	b2b6      	uxth	r6, r6
1000bb5e:	0037      	movs	r7, r6
1000bb60:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bb62:	0b76      	lsrs	r6, r6, #13
1000bb64:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb66:	4d14      	ldr	r5, [pc, #80]	; (1000bbb8 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bb68:	2e00      	cmp	r6, #0
1000bb6a:	d001      	beq.n	1000bb70 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bb6c:	4b13      	ldr	r3, [pc, #76]	; (1000bbbc <gpio_port1_isr_handler+0x68>)
1000bb6e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bb70:	0022      	movs	r2, r4
1000bb72:	2301      	movs	r3, #1
1000bb74:	40a3      	lsls	r3, r4
1000bb76:	421f      	tst	r7, r3
1000bb78:	d013      	beq.n	1000bba2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb7a:	b29b      	uxth	r3, r3
1000bb7c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bb7e:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bb80:	238e      	movs	r3, #142	; 0x8e
1000bb82:	5aeb      	ldrh	r3, [r5, r3]
1000bb84:	4123      	asrs	r3, r4
1000bb86:	07db      	lsls	r3, r3, #31
1000bb88:	d50b      	bpl.n	1000bba2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bb8a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bb8c:	490a      	ldr	r1, [pc, #40]	; (1000bbb8 <gpio_port1_isr_handler+0x64>)
1000bb8e:	5acb      	ldrh	r3, [r1, r3]
1000bb90:	4123      	asrs	r3, r4
1000bb92:	07db      	lsls	r3, r3, #31
1000bb94:	d505      	bpl.n	1000bba2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bb96:	3212      	adds	r2, #18
1000bb98:	0092      	lsls	r2, r2, #2
1000bb9a:	188a      	adds	r2, r1, r2
1000bb9c:	6853      	ldr	r3, [r2, #4]
1000bb9e:	4798      	blx	r3
				break;
1000bba0:	e002      	b.n	1000bba8 <gpio_port1_isr_handler+0x54>
1000bba2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bba4:	2c10      	cmp	r4, #16
1000bba6:	d1df      	bne.n	1000bb68 <gpio_port1_isr_handler+0x14>
1000bba8:	2180      	movs	r1, #128	; 0x80
1000bbaa:	0449      	lsls	r1, r1, #17
1000bbac:	23c0      	movs	r3, #192	; 0xc0
1000bbae:	005b      	lsls	r3, r3, #1
1000bbb0:	4a03      	ldr	r2, [pc, #12]	; (1000bbc0 <gpio_port1_isr_handler+0x6c>)
1000bbb2:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bbb6:	46c0      	nop			; (mov r8, r8)
1000bbb8:	10018dc0 	.word	0x10018dc0
1000bbbc:	0001bc51 	.word	0x0001bc51
1000bbc0:	e000e100 	.word	0xe000e100

1000bbc4 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bbc4:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bbc6:	2390      	movs	r3, #144	; 0x90
1000bbc8:	4a1b      	ldr	r2, [pc, #108]	; (1000bc38 <gpio_port2_isr_handler+0x74>)
1000bbca:	58d2      	ldr	r2, [r2, r3]
1000bbcc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bbce:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bbd0:	04d9      	lsls	r1, r3, #19
1000bbd2:	d414      	bmi.n	1000bbfe <gpio_port2_isr_handler+0x3a>
1000bbd4:	0499      	lsls	r1, r3, #18
1000bbd6:	d40a      	bmi.n	1000bbee <gpio_port2_isr_handler+0x2a>
1000bbd8:	0459      	lsls	r1, r3, #17
1000bbda:	d40c      	bmi.n	1000bbf6 <gpio_port2_isr_handler+0x32>
1000bbdc:	0bdb      	lsrs	r3, r3, #15
1000bbde:	03db      	lsls	r3, r3, #15
1000bbe0:	b29b      	uxth	r3, r3
1000bbe2:	2b00      	cmp	r3, #0
1000bbe4:	d020      	beq.n	1000bc28 <gpio_port2_isr_handler+0x64>
1000bbe6:	2380      	movs	r3, #128	; 0x80
1000bbe8:	021b      	lsls	r3, r3, #8
1000bbea:	210f      	movs	r1, #15
1000bbec:	e00a      	b.n	1000bc04 <gpio_port2_isr_handler+0x40>
1000bbee:	2380      	movs	r3, #128	; 0x80
1000bbf0:	019b      	lsls	r3, r3, #6
1000bbf2:	210d      	movs	r1, #13
1000bbf4:	e006      	b.n	1000bc04 <gpio_port2_isr_handler+0x40>
1000bbf6:	2380      	movs	r3, #128	; 0x80
1000bbf8:	01db      	lsls	r3, r3, #7
1000bbfa:	210e      	movs	r1, #14
1000bbfc:	e002      	b.n	1000bc04 <gpio_port2_isr_handler+0x40>
1000bbfe:	2380      	movs	r3, #128	; 0x80
1000bc00:	015b      	lsls	r3, r3, #5
1000bc02:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bc04:	b29b      	uxth	r3, r3
1000bc06:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bc08:	23d6      	movs	r3, #214	; 0xd6
1000bc0a:	4a0b      	ldr	r2, [pc, #44]	; (1000bc38 <gpio_port2_isr_handler+0x74>)
1000bc0c:	5ad3      	ldrh	r3, [r2, r3]
1000bc0e:	410b      	asrs	r3, r1
1000bc10:	07db      	lsls	r3, r3, #31
1000bc12:	d509      	bpl.n	1000bc28 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bc14:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bc16:	5ad3      	ldrh	r3, [r2, r3]
1000bc18:	410b      	asrs	r3, r1
1000bc1a:	07db      	lsls	r3, r3, #31
1000bc1c:	d504      	bpl.n	1000bc28 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bc1e:	3124      	adds	r1, #36	; 0x24
1000bc20:	0089      	lsls	r1, r1, #2
1000bc22:	1851      	adds	r1, r2, r1
1000bc24:	684b      	ldr	r3, [r1, #4]
1000bc26:	4798      	blx	r3
1000bc28:	2180      	movs	r1, #128	; 0x80
1000bc2a:	0489      	lsls	r1, r1, #18
1000bc2c:	23c0      	movs	r3, #192	; 0xc0
1000bc2e:	005b      	lsls	r3, r3, #1
1000bc30:	4a02      	ldr	r2, [pc, #8]	; (1000bc3c <gpio_port2_isr_handler+0x78>)
1000bc32:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bc34:	bd10      	pop	{r4, pc}
1000bc36:	46c0      	nop			; (mov r8, r8)
1000bc38:	10018dc0 	.word	0x10018dc0
1000bc3c:	e000e100 	.word	0xe000e100

1000bc40 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bc40:	2300      	movs	r3, #0
1000bc42:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bc44:	2201      	movs	r2, #1
1000bc46:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bc48:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bc4a:	70c3      	strb	r3, [r0, #3]
}
1000bc4c:	4770      	bx	lr
1000bc4e:	46c0      	nop			; (mov r8, r8)

1000bc50 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bc50:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bc52:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bc54:	2801      	cmp	r0, #1
1000bc56:	d800      	bhi.n	1000bc5a <gpio_pin_set_config+0xa>
1000bc58:	e0c8      	b.n	1000bdec <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bc5a:	2807      	cmp	r0, #7
1000bc5c:	d809      	bhi.n	1000bc72 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc5e:	4d64      	ldr	r5, [pc, #400]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bc60:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bc62:	3b10      	subs	r3, #16
1000bc64:	4003      	ands	r3, r0
1000bc66:	009b      	lsls	r3, r3, #2
1000bc68:	2407      	movs	r4, #7
1000bc6a:	409c      	lsls	r4, r3
1000bc6c:	43a2      	bics	r2, r4
1000bc6e:	646a      	str	r2, [r5, #68]	; 0x44
1000bc70:	e029      	b.n	1000bcc6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bc72:	280f      	cmp	r0, #15
1000bc74:	d809      	bhi.n	1000bc8a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc76:	4d5e      	ldr	r5, [pc, #376]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bc78:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bc7a:	2307      	movs	r3, #7
1000bc7c:	4003      	ands	r3, r0
1000bc7e:	009b      	lsls	r3, r3, #2
1000bc80:	2407      	movs	r4, #7
1000bc82:	409c      	lsls	r4, r3
1000bc84:	43a2      	bics	r2, r4
1000bc86:	64aa      	str	r2, [r5, #72]	; 0x48
1000bc88:	e01d      	b.n	1000bcc6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000bc8a:	2817      	cmp	r0, #23
1000bc8c:	d809      	bhi.n	1000bca2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc8e:	4d58      	ldr	r5, [pc, #352]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bc90:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000bc92:	2307      	movs	r3, #7
1000bc94:	4003      	ands	r3, r0
1000bc96:	009b      	lsls	r3, r3, #2
1000bc98:	2407      	movs	r4, #7
1000bc9a:	409c      	lsls	r4, r3
1000bc9c:	43a2      	bics	r2, r4
1000bc9e:	64ea      	str	r2, [r5, #76]	; 0x4c
1000bca0:	e011      	b.n	1000bcc6 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bca2:	0003      	movs	r3, r0
1000bca4:	3b2c      	subs	r3, #44	; 0x2c
1000bca6:	2b03      	cmp	r3, #3
1000bca8:	d80d      	bhi.n	1000bcc6 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bcaa:	4d52      	ldr	r5, [pc, #328]	; (1000bdf4 <gpio_pin_set_config+0x1a4>)
1000bcac:	2482      	movs	r4, #130	; 0x82
1000bcae:	00e4      	lsls	r4, r4, #3
1000bcb0:	5d2a      	ldrb	r2, [r5, r4]
1000bcb2:	0712      	lsls	r2, r2, #28
1000bcb4:	2601      	movs	r6, #1
1000bcb6:	409e      	lsls	r6, r3
1000bcb8:	0f12      	lsrs	r2, r2, #28
1000bcba:	5d2b      	ldrb	r3, [r5, r4]
1000bcbc:	43b2      	bics	r2, r6
1000bcbe:	260f      	movs	r6, #15
1000bcc0:	43b3      	bics	r3, r6
1000bcc2:	4313      	orrs	r3, r2
1000bcc4:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bcc6:	0003      	movs	r3, r0
1000bcc8:	3b1d      	subs	r3, #29
1000bcca:	2b02      	cmp	r3, #2
1000bccc:	d829      	bhi.n	1000bd22 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bcce:	784b      	ldrb	r3, [r1, #1]
1000bcd0:	2b01      	cmp	r3, #1
1000bcd2:	d108      	bne.n	1000bce6 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bcd4:	4d47      	ldr	r5, [pc, #284]	; (1000bdf4 <gpio_pin_set_config+0x1a4>)
1000bcd6:	7d2b      	ldrb	r3, [r5, #20]
1000bcd8:	241f      	movs	r4, #31
1000bcda:	1a24      	subs	r4, r4, r0
1000bcdc:	2201      	movs	r2, #1
1000bcde:	40a2      	lsls	r2, r4
1000bce0:	4393      	bics	r3, r2
1000bce2:	752b      	strb	r3, [r5, #20]
1000bce4:	e008      	b.n	1000bcf8 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bce6:	4c43      	ldr	r4, [pc, #268]	; (1000bdf4 <gpio_pin_set_config+0x1a4>)
1000bce8:	7d25      	ldrb	r5, [r4, #20]
1000bcea:	221f      	movs	r2, #31
1000bcec:	1a12      	subs	r2, r2, r0
1000bcee:	2301      	movs	r3, #1
1000bcf0:	4093      	lsls	r3, r2
1000bcf2:	432b      	orrs	r3, r5
1000bcf4:	b2db      	uxtb	r3, r3
1000bcf6:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bcf8:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bcfa:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bcfc:	2a00      	cmp	r2, #0
1000bcfe:	d075      	beq.n	1000bdec <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bd00:	493c      	ldr	r1, [pc, #240]	; (1000bdf4 <gpio_pin_set_config+0x1a4>)
1000bd02:	880c      	ldrh	r4, [r1, #0]
1000bd04:	221f      	movs	r2, #31
1000bd06:	1a10      	subs	r0, r2, r0
1000bd08:	0080      	lsls	r0, r0, #2
1000bd0a:	3301      	adds	r3, #1
1000bd0c:	4083      	lsls	r3, r0
1000bd0e:	4323      	orrs	r3, r4
1000bd10:	b29b      	uxth	r3, r3
1000bd12:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bd14:	4a38      	ldr	r2, [pc, #224]	; (1000bdf8 <gpio_pin_set_config+0x1a8>)
1000bd16:	7811      	ldrb	r1, [r2, #0]
1000bd18:	2302      	movs	r3, #2
1000bd1a:	430b      	orrs	r3, r1
1000bd1c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd1e:	2300      	movs	r3, #0
1000bd20:	e064      	b.n	1000bdec <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bd22:	780a      	ldrb	r2, [r1, #0]
1000bd24:	2a00      	cmp	r2, #0
1000bd26:	d140      	bne.n	1000bdaa <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bd28:	280f      	cmp	r0, #15
1000bd2a:	d808      	bhi.n	1000bd3e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bd2c:	2301      	movs	r3, #1
1000bd2e:	4083      	lsls	r3, r0
1000bd30:	b29b      	uxth	r3, r3
1000bd32:	4a32      	ldr	r2, [pc, #200]	; (1000bdfc <gpio_pin_set_config+0x1ac>)
1000bd34:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd36:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bd38:	281f      	cmp	r0, #31
1000bd3a:	d857      	bhi.n	1000bdec <gpio_pin_set_config+0x19c>
1000bd3c:	e012      	b.n	1000bd64 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bd3e:	281f      	cmp	r0, #31
1000bd40:	d807      	bhi.n	1000bd52 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bd42:	220f      	movs	r2, #15
1000bd44:	4002      	ands	r2, r0
1000bd46:	2301      	movs	r3, #1
1000bd48:	4093      	lsls	r3, r2
1000bd4a:	b29b      	uxth	r3, r3
1000bd4c:	4a2c      	ldr	r2, [pc, #176]	; (1000be00 <gpio_pin_set_config+0x1b0>)
1000bd4e:	8293      	strh	r3, [r2, #20]
1000bd50:	e008      	b.n	1000bd64 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bd52:	230f      	movs	r3, #15
1000bd54:	4018      	ands	r0, r3
1000bd56:	3b0e      	subs	r3, #14
1000bd58:	4083      	lsls	r3, r0
1000bd5a:	b29b      	uxth	r3, r3
1000bd5c:	4a29      	ldr	r2, [pc, #164]	; (1000be04 <gpio_pin_set_config+0x1b4>)
1000bd5e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd60:	2300      	movs	r3, #0
1000bd62:	e043      	b.n	1000bdec <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bd64:	784b      	ldrb	r3, [r1, #1]
1000bd66:	2b01      	cmp	r3, #1
1000bd68:	d00c      	beq.n	1000bd84 <gpio_pin_set_config+0x134>
1000bd6a:	2b00      	cmp	r3, #0
1000bd6c:	d002      	beq.n	1000bd74 <gpio_pin_set_config+0x124>
1000bd6e:	2b02      	cmp	r3, #2
1000bd70:	d010      	beq.n	1000bd94 <gpio_pin_set_config+0x144>
1000bd72:	e03a      	b.n	1000bdea <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bd74:	491e      	ldr	r1, [pc, #120]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bd76:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bd78:	2301      	movs	r3, #1
1000bd7a:	4083      	lsls	r3, r0
1000bd7c:	4313      	orrs	r3, r2
1000bd7e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd80:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bd82:	e033      	b.n	1000bdec <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bd84:	491a      	ldr	r1, [pc, #104]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bd86:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bd88:	2201      	movs	r2, #1
1000bd8a:	4082      	lsls	r2, r0
1000bd8c:	4393      	bics	r3, r2
1000bd8e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd90:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bd92:	e02b      	b.n	1000bdec <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bd94:	4b16      	ldr	r3, [pc, #88]	; (1000bdf0 <gpio_pin_set_config+0x1a0>)
1000bd96:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bd98:	2201      	movs	r2, #1
1000bd9a:	4082      	lsls	r2, r0
1000bd9c:	4311      	orrs	r1, r2
1000bd9e:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bda0:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bda2:	4391      	bics	r1, r2
1000bda4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bda6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bda8:	e020      	b.n	1000bdec <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdaa:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bdac:	2a01      	cmp	r2, #1
1000bdae:	d11d      	bne.n	1000bdec <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bdb0:	280f      	cmp	r0, #15
1000bdb2:	d806      	bhi.n	1000bdc2 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bdb4:	3301      	adds	r3, #1
1000bdb6:	4083      	lsls	r3, r0
1000bdb8:	b29b      	uxth	r3, r3
1000bdba:	4a10      	ldr	r2, [pc, #64]	; (1000bdfc <gpio_pin_set_config+0x1ac>)
1000bdbc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdbe:	2300      	movs	r3, #0
1000bdc0:	e014      	b.n	1000bdec <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bdc2:	281f      	cmp	r0, #31
1000bdc4:	d808      	bhi.n	1000bdd8 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bdc6:	230f      	movs	r3, #15
1000bdc8:	4018      	ands	r0, r3
1000bdca:	3b0e      	subs	r3, #14
1000bdcc:	4083      	lsls	r3, r0
1000bdce:	b29b      	uxth	r3, r3
1000bdd0:	4a0b      	ldr	r2, [pc, #44]	; (1000be00 <gpio_pin_set_config+0x1b0>)
1000bdd2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdd4:	2300      	movs	r3, #0
1000bdd6:	e009      	b.n	1000bdec <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bdd8:	230f      	movs	r3, #15
1000bdda:	4018      	ands	r0, r3
1000bddc:	3b0e      	subs	r3, #14
1000bdde:	4083      	lsls	r3, r0
1000bde0:	b29b      	uxth	r3, r3
1000bde2:	4a08      	ldr	r2, [pc, #32]	; (1000be04 <gpio_pin_set_config+0x1b4>)
1000bde4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bde6:	2300      	movs	r3, #0
1000bde8:	e000      	b.n	1000bdec <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bdea:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bdec:	0018      	movs	r0, r3
1000bdee:	bd70      	pop	{r4, r5, r6, pc}
1000bdf0:	4000b000 	.word	0x4000b000
1000bdf4:	4000f000 	.word	0x4000f000
1000bdf8:	4000e000 	.word	0x4000e000
1000bdfc:	40010000 	.word	0x40010000
1000be00:	40011000 	.word	0x40011000
1000be04:	40013000 	.word	0x40013000

1000be08 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000be08:	280f      	cmp	r0, #15
1000be0a:	d806      	bhi.n	1000be1a <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000be0c:	4b0f      	ldr	r3, [pc, #60]	; (1000be4c <gpio_pin_get_input_level+0x44>)
1000be0e:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000be10:	2301      	movs	r3, #1
1000be12:	4083      	lsls	r3, r0
1000be14:	0018      	movs	r0, r3
1000be16:	4008      	ands	r0, r1
1000be18:	e014      	b.n	1000be44 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000be1a:	281f      	cmp	r0, #31
1000be1c:	d809      	bhi.n	1000be32 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000be1e:	4b0c      	ldr	r3, [pc, #48]	; (1000be50 <gpio_pin_get_input_level+0x48>)
1000be20:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000be22:	230f      	movs	r3, #15
1000be24:	4003      	ands	r3, r0
1000be26:	001a      	movs	r2, r3
1000be28:	2301      	movs	r3, #1
1000be2a:	4093      	lsls	r3, r2
1000be2c:	0018      	movs	r0, r3
1000be2e:	4008      	ands	r0, r1
1000be30:	e008      	b.n	1000be44 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000be32:	4b08      	ldr	r3, [pc, #32]	; (1000be54 <gpio_pin_get_input_level+0x4c>)
1000be34:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000be36:	230f      	movs	r3, #15
1000be38:	4003      	ands	r3, r0
1000be3a:	001a      	movs	r2, r3
1000be3c:	2301      	movs	r3, #1
1000be3e:	4093      	lsls	r3, r2
1000be40:	0018      	movs	r0, r3
1000be42:	4008      	ands	r0, r1
	}

	return regval;
1000be44:	1e43      	subs	r3, r0, #1
1000be46:	4198      	sbcs	r0, r3
1000be48:	b2c0      	uxtb	r0, r0
}
1000be4a:	4770      	bx	lr
1000be4c:	40010000 	.word	0x40010000
1000be50:	40011000 	.word	0x40011000
1000be54:	40013000 	.word	0x40013000

1000be58 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000be58:	280f      	cmp	r0, #15
1000be5a:	d806      	bhi.n	1000be6a <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000be5c:	4b0f      	ldr	r3, [pc, #60]	; (1000be9c <gpio_pin_get_output_level+0x44>)
1000be5e:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000be60:	2301      	movs	r3, #1
1000be62:	4083      	lsls	r3, r0
1000be64:	0018      	movs	r0, r3
1000be66:	4008      	ands	r0, r1
1000be68:	e014      	b.n	1000be94 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000be6a:	281f      	cmp	r0, #31
1000be6c:	d809      	bhi.n	1000be82 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000be6e:	4b0c      	ldr	r3, [pc, #48]	; (1000bea0 <gpio_pin_get_output_level+0x48>)
1000be70:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000be72:	230f      	movs	r3, #15
1000be74:	4003      	ands	r3, r0
1000be76:	001a      	movs	r2, r3
1000be78:	2301      	movs	r3, #1
1000be7a:	4093      	lsls	r3, r2
1000be7c:	0018      	movs	r0, r3
1000be7e:	4008      	ands	r0, r1
1000be80:	e008      	b.n	1000be94 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000be82:	4b08      	ldr	r3, [pc, #32]	; (1000bea4 <gpio_pin_get_output_level+0x4c>)
1000be84:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000be86:	230f      	movs	r3, #15
1000be88:	4003      	ands	r3, r0
1000be8a:	001a      	movs	r2, r3
1000be8c:	2301      	movs	r3, #1
1000be8e:	4093      	lsls	r3, r2
1000be90:	0018      	movs	r0, r3
1000be92:	4008      	ands	r0, r1
	}

	return regval;
1000be94:	1e43      	subs	r3, r0, #1
1000be96:	4198      	sbcs	r0, r3
1000be98:	b2c0      	uxtb	r0, r0
}
1000be9a:	4770      	bx	lr
1000be9c:	40010000 	.word	0x40010000
1000bea0:	40011000 	.word	0x40011000
1000bea4:	40013000 	.word	0x40013000

1000bea8 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000bea8:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000beaa:	280f      	cmp	r0, #15
1000beac:	d810      	bhi.n	1000bed0 <gpio_pin_set_output_level+0x28>
		if(level) {
1000beae:	2900      	cmp	r1, #0
1000beb0:	d007      	beq.n	1000bec2 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000beb2:	4a1d      	ldr	r2, [pc, #116]	; (1000bf28 <gpio_pin_set_output_level+0x80>)
1000beb4:	8891      	ldrh	r1, [r2, #4]
1000beb6:	2301      	movs	r3, #1
1000beb8:	4083      	lsls	r3, r0
1000beba:	430b      	orrs	r3, r1
1000bebc:	b29b      	uxth	r3, r3
1000bebe:	8093      	strh	r3, [r2, #4]
1000bec0:	e031      	b.n	1000bf26 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000bec2:	4919      	ldr	r1, [pc, #100]	; (1000bf28 <gpio_pin_set_output_level+0x80>)
1000bec4:	888b      	ldrh	r3, [r1, #4]
1000bec6:	2201      	movs	r2, #1
1000bec8:	4082      	lsls	r2, r0
1000beca:	4393      	bics	r3, r2
1000becc:	808b      	strh	r3, [r1, #4]
1000bece:	e02a      	b.n	1000bf26 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000bed0:	281f      	cmp	r0, #31
1000bed2:	d814      	bhi.n	1000befe <gpio_pin_set_output_level+0x56>
		if(level) {
1000bed4:	2900      	cmp	r1, #0
1000bed6:	d009      	beq.n	1000beec <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bed8:	4914      	ldr	r1, [pc, #80]	; (1000bf2c <gpio_pin_set_output_level+0x84>)
1000beda:	888c      	ldrh	r4, [r1, #4]
1000bedc:	220f      	movs	r2, #15
1000bede:	4010      	ands	r0, r2
1000bee0:	2301      	movs	r3, #1
1000bee2:	4083      	lsls	r3, r0
1000bee4:	4323      	orrs	r3, r4
1000bee6:	b29b      	uxth	r3, r3
1000bee8:	808b      	strh	r3, [r1, #4]
1000beea:	e01c      	b.n	1000bf26 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000beec:	490f      	ldr	r1, [pc, #60]	; (1000bf2c <gpio_pin_set_output_level+0x84>)
1000beee:	888b      	ldrh	r3, [r1, #4]
1000bef0:	220f      	movs	r2, #15
1000bef2:	4010      	ands	r0, r2
1000bef4:	3a0e      	subs	r2, #14
1000bef6:	4082      	lsls	r2, r0
1000bef8:	4393      	bics	r3, r2
1000befa:	808b      	strh	r3, [r1, #4]
1000befc:	e013      	b.n	1000bf26 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000befe:	2900      	cmp	r1, #0
1000bf00:	d009      	beq.n	1000bf16 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bf02:	490b      	ldr	r1, [pc, #44]	; (1000bf30 <gpio_pin_set_output_level+0x88>)
1000bf04:	888c      	ldrh	r4, [r1, #4]
1000bf06:	220f      	movs	r2, #15
1000bf08:	4010      	ands	r0, r2
1000bf0a:	2301      	movs	r3, #1
1000bf0c:	4083      	lsls	r3, r0
1000bf0e:	4323      	orrs	r3, r4
1000bf10:	b29b      	uxth	r3, r3
1000bf12:	808b      	strh	r3, [r1, #4]
1000bf14:	e007      	b.n	1000bf26 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bf16:	4906      	ldr	r1, [pc, #24]	; (1000bf30 <gpio_pin_set_output_level+0x88>)
1000bf18:	888b      	ldrh	r3, [r1, #4]
1000bf1a:	220f      	movs	r2, #15
1000bf1c:	4010      	ands	r0, r2
1000bf1e:	3a0e      	subs	r2, #14
1000bf20:	4082      	lsls	r2, r0
1000bf22:	4393      	bics	r3, r2
1000bf24:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000bf26:	bd10      	pop	{r4, pc}
1000bf28:	40010000 	.word	0x40010000
1000bf2c:	40011000 	.word	0x40011000
1000bf30:	40013000 	.word	0x40013000

1000bf34 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bf34:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bf36:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bf38:	23ff      	movs	r3, #255	; 0xff
1000bf3a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bf3c:	2807      	cmp	r0, #7
1000bf3e:	d833      	bhi.n	1000bfa8 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bf40:	4a4e      	ldr	r2, [pc, #312]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000bf42:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bf44:	3bf8      	subs	r3, #248	; 0xf8
1000bf46:	4003      	ands	r3, r0
1000bf48:	009b      	lsls	r3, r3, #2
1000bf4a:	2607      	movs	r6, #7
1000bf4c:	409e      	lsls	r6, r3
1000bf4e:	43b4      	bics	r4, r6
1000bf50:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bf52:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bf54:	000e      	movs	r6, r1
1000bf56:	409e      	lsls	r6, r3
1000bf58:	0033      	movs	r3, r6
1000bf5a:	4323      	orrs	r3, r4
1000bf5c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bf5e:	2901      	cmp	r1, #1
1000bf60:	d000      	beq.n	1000bf64 <gpio_pinmux_cofiguration+0x30>
1000bf62:	e08a      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000bf64:	2803      	cmp	r0, #3
1000bf66:	d80f      	bhi.n	1000bf88 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bf68:	0011      	movs	r1, r2
1000bf6a:	22d0      	movs	r2, #208	; 0xd0
1000bf6c:	0052      	lsls	r2, r2, #1
1000bf6e:	588c      	ldr	r4, [r1, r2]
1000bf70:	2303      	movs	r3, #3
1000bf72:	4018      	ands	r0, r3
1000bf74:	00c0      	lsls	r0, r0, #3
1000bf76:	333c      	adds	r3, #60	; 0x3c
1000bf78:	4083      	lsls	r3, r0
1000bf7a:	439c      	bics	r4, r3
1000bf7c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bf7e:	588b      	ldr	r3, [r1, r2]
1000bf80:	4085      	lsls	r5, r0
1000bf82:	431d      	orrs	r5, r3
1000bf84:	508d      	str	r5, [r1, r2]
1000bf86:	e078      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bf88:	493c      	ldr	r1, [pc, #240]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000bf8a:	22d2      	movs	r2, #210	; 0xd2
1000bf8c:	0052      	lsls	r2, r2, #1
1000bf8e:	588c      	ldr	r4, [r1, r2]
1000bf90:	2303      	movs	r3, #3
1000bf92:	4018      	ands	r0, r3
1000bf94:	00c0      	lsls	r0, r0, #3
1000bf96:	333c      	adds	r3, #60	; 0x3c
1000bf98:	4083      	lsls	r3, r0
1000bf9a:	439c      	bics	r4, r3
1000bf9c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bf9e:	588b      	ldr	r3, [r1, r2]
1000bfa0:	4085      	lsls	r5, r0
1000bfa2:	431d      	orrs	r5, r3
1000bfa4:	508d      	str	r5, [r1, r2]
1000bfa6:	e068      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000bfa8:	280f      	cmp	r0, #15
1000bfaa:	d832      	bhi.n	1000c012 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bfac:	4a33      	ldr	r2, [pc, #204]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000bfae:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000bfb0:	2307      	movs	r3, #7
1000bfb2:	4003      	ands	r3, r0
1000bfb4:	009b      	lsls	r3, r3, #2
1000bfb6:	2607      	movs	r6, #7
1000bfb8:	409e      	lsls	r6, r3
1000bfba:	43b4      	bics	r4, r6
1000bfbc:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bfbe:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000bfc0:	000e      	movs	r6, r1
1000bfc2:	409e      	lsls	r6, r3
1000bfc4:	0033      	movs	r3, r6
1000bfc6:	4323      	orrs	r3, r4
1000bfc8:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000bfca:	2901      	cmp	r1, #1
1000bfcc:	d155      	bne.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000bfce:	280b      	cmp	r0, #11
1000bfd0:	d80f      	bhi.n	1000bff2 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bfd2:	0011      	movs	r1, r2
1000bfd4:	22d4      	movs	r2, #212	; 0xd4
1000bfd6:	0052      	lsls	r2, r2, #1
1000bfd8:	588c      	ldr	r4, [r1, r2]
1000bfda:	2303      	movs	r3, #3
1000bfdc:	4018      	ands	r0, r3
1000bfde:	00c0      	lsls	r0, r0, #3
1000bfe0:	333c      	adds	r3, #60	; 0x3c
1000bfe2:	4083      	lsls	r3, r0
1000bfe4:	439c      	bics	r4, r3
1000bfe6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bfe8:	588b      	ldr	r3, [r1, r2]
1000bfea:	4085      	lsls	r5, r0
1000bfec:	431d      	orrs	r5, r3
1000bfee:	508d      	str	r5, [r1, r2]
1000bff0:	e043      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bff2:	4922      	ldr	r1, [pc, #136]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000bff4:	22d6      	movs	r2, #214	; 0xd6
1000bff6:	0052      	lsls	r2, r2, #1
1000bff8:	588c      	ldr	r4, [r1, r2]
1000bffa:	2303      	movs	r3, #3
1000bffc:	4018      	ands	r0, r3
1000bffe:	00c0      	lsls	r0, r0, #3
1000c000:	333c      	adds	r3, #60	; 0x3c
1000c002:	4083      	lsls	r3, r0
1000c004:	439c      	bics	r4, r3
1000c006:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c008:	588b      	ldr	r3, [r1, r2]
1000c00a:	4085      	lsls	r5, r0
1000c00c:	431d      	orrs	r5, r3
1000c00e:	508d      	str	r5, [r1, r2]
1000c010:	e033      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c012:	2817      	cmp	r0, #23
1000c014:	d831      	bhi.n	1000c07a <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c016:	4a19      	ldr	r2, [pc, #100]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000c018:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c01a:	2307      	movs	r3, #7
1000c01c:	4003      	ands	r3, r0
1000c01e:	009b      	lsls	r3, r3, #2
1000c020:	2607      	movs	r6, #7
1000c022:	409e      	lsls	r6, r3
1000c024:	43b4      	bics	r4, r6
1000c026:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c028:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c02a:	000e      	movs	r6, r1
1000c02c:	409e      	lsls	r6, r3
1000c02e:	0033      	movs	r3, r6
1000c030:	4323      	orrs	r3, r4
1000c032:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c034:	2901      	cmp	r1, #1
1000c036:	d120      	bne.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c038:	2813      	cmp	r0, #19
1000c03a:	d80f      	bhi.n	1000c05c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c03c:	0011      	movs	r1, r2
1000c03e:	22d8      	movs	r2, #216	; 0xd8
1000c040:	0052      	lsls	r2, r2, #1
1000c042:	588c      	ldr	r4, [r1, r2]
1000c044:	2303      	movs	r3, #3
1000c046:	4018      	ands	r0, r3
1000c048:	00c0      	lsls	r0, r0, #3
1000c04a:	333c      	adds	r3, #60	; 0x3c
1000c04c:	4083      	lsls	r3, r0
1000c04e:	439c      	bics	r4, r3
1000c050:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c052:	588b      	ldr	r3, [r1, r2]
1000c054:	4085      	lsls	r5, r0
1000c056:	431d      	orrs	r5, r3
1000c058:	508d      	str	r5, [r1, r2]
1000c05a:	e00e      	b.n	1000c07a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c05c:	4a07      	ldr	r2, [pc, #28]	; (1000c07c <gpio_pinmux_cofiguration+0x148>)
1000c05e:	23da      	movs	r3, #218	; 0xda
1000c060:	005b      	lsls	r3, r3, #1
1000c062:	58d1      	ldr	r1, [r2, r3]
1000c064:	2403      	movs	r4, #3
1000c066:	4020      	ands	r0, r4
1000c068:	00c0      	lsls	r0, r0, #3
1000c06a:	343c      	adds	r4, #60	; 0x3c
1000c06c:	4084      	lsls	r4, r0
1000c06e:	43a1      	bics	r1, r4
1000c070:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c072:	58d1      	ldr	r1, [r2, r3]
1000c074:	4085      	lsls	r5, r0
1000c076:	430d      	orrs	r5, r1
1000c078:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c07a:	bd70      	pop	{r4, r5, r6, pc}
1000c07c:	4000b000 	.word	0x4000b000

1000c080 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c080:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c082:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c084:	280f      	cmp	r0, #15
1000c086:	d904      	bls.n	1000c092 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c088:	241f      	movs	r4, #31
1000c08a:	4284      	cmp	r4, r0
1000c08c:	415b      	adcs	r3, r3
1000c08e:	3c1d      	subs	r4, #29
1000c090:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c092:	2a01      	cmp	r2, #1
1000c094:	d016      	beq.n	1000c0c4 <gpio_register_callback+0x44>
1000c096:	2a00      	cmp	r2, #0
1000c098:	d004      	beq.n	1000c0a4 <gpio_register_callback+0x24>
1000c09a:	2a02      	cmp	r2, #2
1000c09c:	d022      	beq.n	1000c0e4 <gpio_register_callback+0x64>
1000c09e:	2a03      	cmp	r2, #3
1000c0a0:	d030      	beq.n	1000c104 <gpio_register_callback+0x84>
1000c0a2:	e03e      	b.n	1000c122 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c0a4:	4e29      	ldr	r6, [pc, #164]	; (1000c14c <gpio_register_callback+0xcc>)
1000c0a6:	00dc      	lsls	r4, r3, #3
1000c0a8:	18e2      	adds	r2, r4, r3
1000c0aa:	00d2      	lsls	r2, r2, #3
1000c0ac:	5997      	ldr	r7, [r2, r6]
1000c0ae:	250f      	movs	r5, #15
1000c0b0:	4005      	ands	r5, r0
1000c0b2:	2201      	movs	r2, #1
1000c0b4:	40aa      	lsls	r2, r5
1000c0b6:	b292      	uxth	r2, r2
1000c0b8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c0ba:	18e4      	adds	r4, r4, r3
1000c0bc:	00e4      	lsls	r4, r4, #3
1000c0be:	59a4      	ldr	r4, [r4, r6]
1000c0c0:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c0c2:	e02e      	b.n	1000c122 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c0c4:	4e21      	ldr	r6, [pc, #132]	; (1000c14c <gpio_register_callback+0xcc>)
1000c0c6:	00dc      	lsls	r4, r3, #3
1000c0c8:	18e2      	adds	r2, r4, r3
1000c0ca:	00d2      	lsls	r2, r2, #3
1000c0cc:	5997      	ldr	r7, [r2, r6]
1000c0ce:	250f      	movs	r5, #15
1000c0d0:	4005      	ands	r5, r0
1000c0d2:	2201      	movs	r2, #1
1000c0d4:	40aa      	lsls	r2, r5
1000c0d6:	b292      	uxth	r2, r2
1000c0d8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c0da:	18e4      	adds	r4, r4, r3
1000c0dc:	00e4      	lsls	r4, r4, #3
1000c0de:	59a4      	ldr	r4, [r4, r6]
1000c0e0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c0e2:	e01e      	b.n	1000c122 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c0e4:	4e19      	ldr	r6, [pc, #100]	; (1000c14c <gpio_register_callback+0xcc>)
1000c0e6:	00dc      	lsls	r4, r3, #3
1000c0e8:	18e2      	adds	r2, r4, r3
1000c0ea:	00d2      	lsls	r2, r2, #3
1000c0ec:	5997      	ldr	r7, [r2, r6]
1000c0ee:	250f      	movs	r5, #15
1000c0f0:	4005      	ands	r5, r0
1000c0f2:	2201      	movs	r2, #1
1000c0f4:	40aa      	lsls	r2, r5
1000c0f6:	b292      	uxth	r2, r2
1000c0f8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c0fa:	18e4      	adds	r4, r4, r3
1000c0fc:	00e4      	lsls	r4, r4, #3
1000c0fe:	59a4      	ldr	r4, [r4, r6]
1000c100:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c102:	e00e      	b.n	1000c122 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c104:	4e11      	ldr	r6, [pc, #68]	; (1000c14c <gpio_register_callback+0xcc>)
1000c106:	00dc      	lsls	r4, r3, #3
1000c108:	18e2      	adds	r2, r4, r3
1000c10a:	00d2      	lsls	r2, r2, #3
1000c10c:	5997      	ldr	r7, [r2, r6]
1000c10e:	250f      	movs	r5, #15
1000c110:	4005      	ands	r5, r0
1000c112:	2201      	movs	r2, #1
1000c114:	40aa      	lsls	r2, r5
1000c116:	b292      	uxth	r2, r2
1000c118:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c11a:	18e4      	adds	r4, r4, r3
1000c11c:	00e4      	lsls	r4, r4, #3
1000c11e:	59a4      	ldr	r4, [r4, r6]
1000c120:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c122:	220f      	movs	r2, #15
1000c124:	4010      	ands	r0, r2
1000c126:	4c09      	ldr	r4, [pc, #36]	; (1000c14c <gpio_register_callback+0xcc>)
1000c128:	00dd      	lsls	r5, r3, #3
1000c12a:	18ea      	adds	r2, r5, r3
1000c12c:	0052      	lsls	r2, r2, #1
1000c12e:	1812      	adds	r2, r2, r0
1000c130:	0092      	lsls	r2, r2, #2
1000c132:	18a2      	adds	r2, r4, r2
1000c134:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c136:	18ea      	adds	r2, r5, r3
1000c138:	00d2      	lsls	r2, r2, #3
1000c13a:	18a2      	adds	r2, r4, r2
1000c13c:	3244      	adds	r2, #68	; 0x44
1000c13e:	2101      	movs	r1, #1
1000c140:	4081      	lsls	r1, r0
1000c142:	8813      	ldrh	r3, [r2, #0]
1000c144:	430b      	orrs	r3, r1
1000c146:	8013      	strh	r3, [r2, #0]
}
1000c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c14a:	46c0      	nop			; (mov r8, r8)
1000c14c:	10018dc0 	.word	0x10018dc0

1000c150 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c150:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c152:	280f      	cmp	r0, #15
1000c154:	d805      	bhi.n	1000c162 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c156:	2280      	movs	r2, #128	; 0x80
1000c158:	0412      	lsls	r2, r2, #16
1000c15a:	4b12      	ldr	r3, [pc, #72]	; (1000c1a4 <gpio_enable_callback+0x54>)
1000c15c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c15e:	2200      	movs	r2, #0
1000c160:	e00c      	b.n	1000c17c <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c162:	281f      	cmp	r0, #31
1000c164:	d805      	bhi.n	1000c172 <gpio_enable_callback+0x22>
1000c166:	2280      	movs	r2, #128	; 0x80
1000c168:	0452      	lsls	r2, r2, #17
1000c16a:	4b0e      	ldr	r3, [pc, #56]	; (1000c1a4 <gpio_enable_callback+0x54>)
1000c16c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c16e:	2201      	movs	r2, #1
1000c170:	e004      	b.n	1000c17c <gpio_enable_callback+0x2c>
1000c172:	2280      	movs	r2, #128	; 0x80
1000c174:	0492      	lsls	r2, r2, #18
1000c176:	4b0b      	ldr	r3, [pc, #44]	; (1000c1a4 <gpio_enable_callback+0x54>)
1000c178:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c17a:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c17c:	230f      	movs	r3, #15
1000c17e:	4018      	ands	r0, r3
1000c180:	2101      	movs	r1, #1
1000c182:	4081      	lsls	r1, r0
1000c184:	4c08      	ldr	r4, [pc, #32]	; (1000c1a8 <gpio_enable_callback+0x58>)
1000c186:	00d5      	lsls	r5, r2, #3
1000c188:	18ab      	adds	r3, r5, r2
1000c18a:	00db      	lsls	r3, r3, #3
1000c18c:	18e3      	adds	r3, r4, r3
1000c18e:	3346      	adds	r3, #70	; 0x46
1000c190:	8818      	ldrh	r0, [r3, #0]
1000c192:	4308      	orrs	r0, r1
1000c194:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c196:	18aa      	adds	r2, r5, r2
1000c198:	00d2      	lsls	r2, r2, #3
1000c19a:	5913      	ldr	r3, [r2, r4]
1000c19c:	b289      	uxth	r1, r1
1000c19e:	8419      	strh	r1, [r3, #32]
}
1000c1a0:	bd30      	pop	{r4, r5, pc}
1000c1a2:	46c0      	nop			; (mov r8, r8)
1000c1a4:	e000e100 	.word	0xe000e100
1000c1a8:	10018dc0 	.word	0x10018dc0

1000c1ac <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c1ac:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c1ae:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c1b0:	280f      	cmp	r0, #15
1000c1b2:	d904      	bls.n	1000c1be <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c1b4:	221f      	movs	r2, #31
1000c1b6:	4282      	cmp	r2, r0
1000c1b8:	415b      	adcs	r3, r3
1000c1ba:	3a1d      	subs	r2, #29
1000c1bc:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c1be:	220f      	movs	r2, #15
1000c1c0:	4010      	ands	r0, r2
1000c1c2:	2101      	movs	r1, #1
1000c1c4:	4081      	lsls	r1, r0
1000c1c6:	4c07      	ldr	r4, [pc, #28]	; (1000c1e4 <gpio_disable_callback+0x38>)
1000c1c8:	00dd      	lsls	r5, r3, #3
1000c1ca:	18ea      	adds	r2, r5, r3
1000c1cc:	00d2      	lsls	r2, r2, #3
1000c1ce:	18a2      	adds	r2, r4, r2
1000c1d0:	3246      	adds	r2, #70	; 0x46
1000c1d2:	8810      	ldrh	r0, [r2, #0]
1000c1d4:	4388      	bics	r0, r1
1000c1d6:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c1d8:	18eb      	adds	r3, r5, r3
1000c1da:	00db      	lsls	r3, r3, #3
1000c1dc:	591b      	ldr	r3, [r3, r4]
1000c1de:	b289      	uxth	r1, r1
1000c1e0:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c1e2:	bd30      	pop	{r4, r5, pc}
1000c1e4:	10018dc0 	.word	0x10018dc0

1000c1e8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c1e8:	b510      	push	{r4, lr}
1000c1ea:	4a11      	ldr	r2, [pc, #68]	; (1000c230 <gpio_init+0x48>)
1000c1ec:	0010      	movs	r0, r2
1000c1ee:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c1f0:	2100      	movs	r1, #0
1000c1f2:	e007      	b.n	1000c204 <gpio_init+0x1c>
1000c1f4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c1f6:	4293      	cmp	r3, r2
1000c1f8:	d1fc      	bne.n	1000c1f4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c1fa:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c1fc:	8011      	strh	r1, [r2, #0]
1000c1fe:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c200:	4282      	cmp	r2, r0
1000c202:	d002      	beq.n	1000c20a <gpio_init+0x22>
1000c204:	0013      	movs	r3, r2
1000c206:	3b40      	subs	r3, #64	; 0x40
1000c208:	e7f4      	b.n	1000c1f4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c20a:	4b0a      	ldr	r3, [pc, #40]	; (1000c234 <gpio_init+0x4c>)
1000c20c:	4a0a      	ldr	r2, [pc, #40]	; (1000c238 <gpio_init+0x50>)
1000c20e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c210:	4a0a      	ldr	r2, [pc, #40]	; (1000c23c <gpio_init+0x54>)
1000c212:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c214:	490a      	ldr	r1, [pc, #40]	; (1000c240 <gpio_init+0x58>)
1000c216:	2290      	movs	r2, #144	; 0x90
1000c218:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c21a:	490a      	ldr	r1, [pc, #40]	; (1000c244 <gpio_init+0x5c>)
1000c21c:	2027      	movs	r0, #39	; 0x27
1000c21e:	4c0a      	ldr	r4, [pc, #40]	; (1000c248 <gpio_init+0x60>)
1000c220:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c222:	490a      	ldr	r1, [pc, #40]	; (1000c24c <gpio_init+0x64>)
1000c224:	2028      	movs	r0, #40	; 0x28
1000c226:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c228:	4909      	ldr	r1, [pc, #36]	; (1000c250 <gpio_init+0x68>)
1000c22a:	2029      	movs	r0, #41	; 0x29
1000c22c:	47a0      	blx	r4
}
1000c22e:	bd10      	pop	{r4, pc}
1000c230:	10018e04 	.word	0x10018e04
1000c234:	10018dc0 	.word	0x10018dc0
1000c238:	40010000 	.word	0x40010000
1000c23c:	40011000 	.word	0x40011000
1000c240:	40013000 	.word	0x40013000
1000c244:	1000baf1 	.word	0x1000baf1
1000c248:	1000ce15 	.word	0x1000ce15
1000c24c:	1000bb55 	.word	0x1000bb55
1000c250:	1000bbc5 	.word	0x1000bbc5

1000c254 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c254:	2801      	cmp	r0, #1
1000c256:	d00d      	beq.n	1000c274 <system_clock_config+0x20>
1000c258:	2800      	cmp	r0, #0
1000c25a:	d002      	beq.n	1000c262 <system_clock_config+0xe>
1000c25c:	2802      	cmp	r0, #2
1000c25e:	d01c      	beq.n	1000c29a <system_clock_config+0x46>
1000c260:	e02e      	b.n	1000c2c0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c262:	4a18      	ldr	r2, [pc, #96]	; (1000c2c4 <system_clock_config+0x70>)
1000c264:	6990      	ldr	r0, [r2, #24]
1000c266:	230c      	movs	r3, #12
1000c268:	4303      	orrs	r3, r0
1000c26a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c26c:	4a16      	ldr	r2, [pc, #88]	; (1000c2c8 <system_clock_config+0x74>)
1000c26e:	4b17      	ldr	r3, [pc, #92]	; (1000c2cc <system_clock_config+0x78>)
1000c270:	601a      	str	r2, [r3, #0]
			break;
1000c272:	e01a      	b.n	1000c2aa <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c274:	4b13      	ldr	r3, [pc, #76]	; (1000c2c4 <system_clock_config+0x70>)
1000c276:	6998      	ldr	r0, [r3, #24]
1000c278:	2208      	movs	r2, #8
1000c27a:	4302      	orrs	r2, r0
1000c27c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c27e:	699a      	ldr	r2, [r3, #24]
1000c280:	2004      	movs	r0, #4
1000c282:	4382      	bics	r2, r0
1000c284:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c286:	4a12      	ldr	r2, [pc, #72]	; (1000c2d0 <system_clock_config+0x7c>)
1000c288:	6853      	ldr	r3, [r2, #4]
1000c28a:	2080      	movs	r0, #128	; 0x80
1000c28c:	0300      	lsls	r0, r0, #12
1000c28e:	4303      	orrs	r3, r0
1000c290:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c292:	4a10      	ldr	r2, [pc, #64]	; (1000c2d4 <system_clock_config+0x80>)
1000c294:	4b0d      	ldr	r3, [pc, #52]	; (1000c2cc <system_clock_config+0x78>)
1000c296:	601a      	str	r2, [r3, #0]
			break;
1000c298:	e007      	b.n	1000c2aa <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c29a:	4a0a      	ldr	r2, [pc, #40]	; (1000c2c4 <system_clock_config+0x70>)
1000c29c:	6993      	ldr	r3, [r2, #24]
1000c29e:	200c      	movs	r0, #12
1000c2a0:	4383      	bics	r3, r0
1000c2a2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c2a4:	4a08      	ldr	r2, [pc, #32]	; (1000c2c8 <system_clock_config+0x74>)
1000c2a6:	4b09      	ldr	r3, [pc, #36]	; (1000c2cc <system_clock_config+0x78>)
1000c2a8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c2aa:	4b06      	ldr	r3, [pc, #24]	; (1000c2c4 <system_clock_config+0x70>)
1000c2ac:	699a      	ldr	r2, [r3, #24]
1000c2ae:	2003      	movs	r0, #3
1000c2b0:	4382      	bics	r2, r0
1000c2b2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2b4:	699a      	ldr	r2, [r3, #24]
1000c2b6:	4001      	ands	r1, r0
1000c2b8:	4311      	orrs	r1, r2
1000c2ba:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c2bc:	2000      	movs	r0, #0
1000c2be:	e000      	b.n	1000c2c2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c2c0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c2c2:	4770      	bx	lr
1000c2c4:	4000b000 	.word	0x4000b000
1000c2c8:	018cba80 	.word	0x018cba80
1000c2cc:	10018e98 	.word	0x10018e98
1000c2d0:	4000f000 	.word	0x4000f000
1000c2d4:	001e8480 	.word	0x001e8480

1000c2d8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c2d8:	4b01      	ldr	r3, [pc, #4]	; (1000c2e0 <system_clock_get_value+0x8>)
1000c2da:	6818      	ldr	r0, [r3, #0]
}
1000c2dc:	4770      	bx	lr
1000c2de:	46c0      	nop			; (mov r8, r8)
1000c2e0:	10018e98 	.word	0x10018e98

1000c2e4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c2e4:	b500      	push	{lr}
	switch (peripheral) {
1000c2e6:	2835      	cmp	r0, #53	; 0x35
1000c2e8:	d900      	bls.n	1000c2ec <system_clock_peripheral_enable+0x8>
1000c2ea:	e1a2      	b.n	1000c632 <system_clock_peripheral_enable+0x34e>
1000c2ec:	0080      	lsls	r0, r0, #2
1000c2ee:	4bd2      	ldr	r3, [pc, #840]	; (1000c638 <system_clock_peripheral_enable+0x354>)
1000c2f0:	581b      	ldr	r3, [r3, r0]
1000c2f2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2f4:	4ad1      	ldr	r2, [pc, #836]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c2f6:	68d1      	ldr	r1, [r2, #12]
1000c2f8:	2302      	movs	r3, #2
1000c2fa:	430b      	orrs	r3, r1
1000c2fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2fe:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c300:	e198      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c302:	4ace      	ldr	r2, [pc, #824]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c304:	68d1      	ldr	r1, [r2, #12]
1000c306:	2304      	movs	r3, #4
1000c308:	430b      	orrs	r3, r1
1000c30a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c30c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c30e:	e191      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c310:	4aca      	ldr	r2, [pc, #808]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c312:	68d1      	ldr	r1, [r2, #12]
1000c314:	2308      	movs	r3, #8
1000c316:	430b      	orrs	r3, r1
1000c318:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c31a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c31c:	e18a      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c31e:	4ac7      	ldr	r2, [pc, #796]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c320:	68d1      	ldr	r1, [r2, #12]
1000c322:	2310      	movs	r3, #16
1000c324:	430b      	orrs	r3, r1
1000c326:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c328:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c32a:	e183      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c32c:	4ac3      	ldr	r2, [pc, #780]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c32e:	68d1      	ldr	r1, [r2, #12]
1000c330:	2320      	movs	r3, #32
1000c332:	430b      	orrs	r3, r1
1000c334:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c336:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c338:	e17c      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c33a:	4ac0      	ldr	r2, [pc, #768]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c33c:	68d1      	ldr	r1, [r2, #12]
1000c33e:	2380      	movs	r3, #128	; 0x80
1000c340:	430b      	orrs	r3, r1
1000c342:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c344:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c346:	e175      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c348:	4abc      	ldr	r2, [pc, #752]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c34a:	68d3      	ldr	r3, [r2, #12]
1000c34c:	2180      	movs	r1, #128	; 0x80
1000c34e:	0049      	lsls	r1, r1, #1
1000c350:	430b      	orrs	r3, r1
1000c352:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c354:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c356:	e16d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c358:	4ab8      	ldr	r2, [pc, #736]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c35a:	68d3      	ldr	r3, [r2, #12]
1000c35c:	2180      	movs	r1, #128	; 0x80
1000c35e:	0109      	lsls	r1, r1, #4
1000c360:	430b      	orrs	r3, r1
1000c362:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c366:	e165      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c368:	4ab4      	ldr	r2, [pc, #720]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c36a:	68d3      	ldr	r3, [r2, #12]
1000c36c:	2180      	movs	r1, #128	; 0x80
1000c36e:	0149      	lsls	r1, r1, #5
1000c370:	430b      	orrs	r3, r1
1000c372:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c374:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c376:	e15d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c378:	4ab0      	ldr	r2, [pc, #704]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c37a:	68d3      	ldr	r3, [r2, #12]
1000c37c:	2180      	movs	r1, #128	; 0x80
1000c37e:	0189      	lsls	r1, r1, #6
1000c380:	430b      	orrs	r3, r1
1000c382:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c386:	e155      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c388:	4aac      	ldr	r2, [pc, #688]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c38a:	68d3      	ldr	r3, [r2, #12]
1000c38c:	2180      	movs	r1, #128	; 0x80
1000c38e:	01c9      	lsls	r1, r1, #7
1000c390:	430b      	orrs	r3, r1
1000c392:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c394:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c396:	e14d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c398:	4aa8      	ldr	r2, [pc, #672]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c39a:	68d3      	ldr	r3, [r2, #12]
1000c39c:	2180      	movs	r1, #128	; 0x80
1000c39e:	0209      	lsls	r1, r1, #8
1000c3a0:	430b      	orrs	r3, r1
1000c3a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c3a6:	e145      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3a8:	4aa4      	ldr	r2, [pc, #656]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3aa:	68d3      	ldr	r3, [r2, #12]
1000c3ac:	2180      	movs	r1, #128	; 0x80
1000c3ae:	0249      	lsls	r1, r1, #9
1000c3b0:	430b      	orrs	r3, r1
1000c3b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c3b6:	e13d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3b8:	4aa0      	ldr	r2, [pc, #640]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3ba:	68d3      	ldr	r3, [r2, #12]
1000c3bc:	2180      	movs	r1, #128	; 0x80
1000c3be:	0289      	lsls	r1, r1, #10
1000c3c0:	430b      	orrs	r3, r1
1000c3c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c3c6:	e135      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3c8:	4a9c      	ldr	r2, [pc, #624]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3ca:	68d3      	ldr	r3, [r2, #12]
1000c3cc:	2180      	movs	r1, #128	; 0x80
1000c3ce:	02c9      	lsls	r1, r1, #11
1000c3d0:	430b      	orrs	r3, r1
1000c3d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c3d6:	e12d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3d8:	4a98      	ldr	r2, [pc, #608]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3da:	68d3      	ldr	r3, [r2, #12]
1000c3dc:	2180      	movs	r1, #128	; 0x80
1000c3de:	0309      	lsls	r1, r1, #12
1000c3e0:	430b      	orrs	r3, r1
1000c3e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c3e6:	e125      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3e8:	4a94      	ldr	r2, [pc, #592]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3ea:	68d3      	ldr	r3, [r2, #12]
1000c3ec:	2180      	movs	r1, #128	; 0x80
1000c3ee:	0349      	lsls	r1, r1, #13
1000c3f0:	430b      	orrs	r3, r1
1000c3f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c3f6:	e11d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3f8:	4a90      	ldr	r2, [pc, #576]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c3fa:	68d3      	ldr	r3, [r2, #12]
1000c3fc:	2180      	movs	r1, #128	; 0x80
1000c3fe:	0389      	lsls	r1, r1, #14
1000c400:	430b      	orrs	r3, r1
1000c402:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c404:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c406:	e115      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c408:	4a8c      	ldr	r2, [pc, #560]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c40a:	68d3      	ldr	r3, [r2, #12]
1000c40c:	2180      	movs	r1, #128	; 0x80
1000c40e:	03c9      	lsls	r1, r1, #15
1000c410:	430b      	orrs	r3, r1
1000c412:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c414:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c416:	e10d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c418:	4a88      	ldr	r2, [pc, #544]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c41a:	68d3      	ldr	r3, [r2, #12]
1000c41c:	2180      	movs	r1, #128	; 0x80
1000c41e:	0409      	lsls	r1, r1, #16
1000c420:	430b      	orrs	r3, r1
1000c422:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c424:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c426:	e105      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c428:	4a84      	ldr	r2, [pc, #528]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c42a:	68d3      	ldr	r3, [r2, #12]
1000c42c:	2180      	movs	r1, #128	; 0x80
1000c42e:	0449      	lsls	r1, r1, #17
1000c430:	430b      	orrs	r3, r1
1000c432:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c434:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c436:	e0fd      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c438:	4a80      	ldr	r2, [pc, #512]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c43a:	68d3      	ldr	r3, [r2, #12]
1000c43c:	2180      	movs	r1, #128	; 0x80
1000c43e:	0489      	lsls	r1, r1, #18
1000c440:	430b      	orrs	r3, r1
1000c442:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c446:	e0f5      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c448:	4a7c      	ldr	r2, [pc, #496]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c44a:	68d3      	ldr	r3, [r2, #12]
1000c44c:	2180      	movs	r1, #128	; 0x80
1000c44e:	04c9      	lsls	r1, r1, #19
1000c450:	430b      	orrs	r3, r1
1000c452:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c454:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c456:	e0ed      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c458:	4a78      	ldr	r2, [pc, #480]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c45a:	68d3      	ldr	r3, [r2, #12]
1000c45c:	2180      	movs	r1, #128	; 0x80
1000c45e:	0509      	lsls	r1, r1, #20
1000c460:	430b      	orrs	r3, r1
1000c462:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c464:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c466:	e0e5      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c468:	4a74      	ldr	r2, [pc, #464]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c46a:	68d3      	ldr	r3, [r2, #12]
1000c46c:	2180      	movs	r1, #128	; 0x80
1000c46e:	0549      	lsls	r1, r1, #21
1000c470:	430b      	orrs	r3, r1
1000c472:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c474:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c476:	e0dd      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c478:	4a70      	ldr	r2, [pc, #448]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c47a:	68d3      	ldr	r3, [r2, #12]
1000c47c:	2180      	movs	r1, #128	; 0x80
1000c47e:	0589      	lsls	r1, r1, #22
1000c480:	430b      	orrs	r3, r1
1000c482:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c484:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c486:	e0d5      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c488:	4a6c      	ldr	r2, [pc, #432]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c48a:	68d3      	ldr	r3, [r2, #12]
1000c48c:	2180      	movs	r1, #128	; 0x80
1000c48e:	05c9      	lsls	r1, r1, #23
1000c490:	430b      	orrs	r3, r1
1000c492:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c494:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c496:	e0cd      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c498:	4a68      	ldr	r2, [pc, #416]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c49a:	6911      	ldr	r1, [r2, #16]
1000c49c:	2301      	movs	r3, #1
1000c49e:	430b      	orrs	r3, r1
1000c4a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c4a4:	e0c6      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4a6:	4a65      	ldr	r2, [pc, #404]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4a8:	6911      	ldr	r1, [r2, #16]
1000c4aa:	2302      	movs	r3, #2
1000c4ac:	430b      	orrs	r3, r1
1000c4ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c4b2:	e0bf      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4b4:	4a61      	ldr	r2, [pc, #388]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4b6:	6911      	ldr	r1, [r2, #16]
1000c4b8:	2304      	movs	r3, #4
1000c4ba:	430b      	orrs	r3, r1
1000c4bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c4c0:	e0b8      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4c2:	4a5e      	ldr	r2, [pc, #376]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4c4:	6911      	ldr	r1, [r2, #16]
1000c4c6:	2308      	movs	r3, #8
1000c4c8:	430b      	orrs	r3, r1
1000c4ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c4ce:	e0b1      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4d0:	4a5a      	ldr	r2, [pc, #360]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4d2:	6911      	ldr	r1, [r2, #16]
1000c4d4:	2310      	movs	r3, #16
1000c4d6:	430b      	orrs	r3, r1
1000c4d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c4dc:	e0aa      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4de:	4a57      	ldr	r2, [pc, #348]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4e0:	6911      	ldr	r1, [r2, #16]
1000c4e2:	2320      	movs	r3, #32
1000c4e4:	430b      	orrs	r3, r1
1000c4e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c4ea:	e0a3      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4ec:	4a53      	ldr	r2, [pc, #332]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4ee:	6911      	ldr	r1, [r2, #16]
1000c4f0:	2340      	movs	r3, #64	; 0x40
1000c4f2:	430b      	orrs	r3, r1
1000c4f4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c4f8:	e09c      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4fa:	4a50      	ldr	r2, [pc, #320]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c4fc:	6911      	ldr	r1, [r2, #16]
1000c4fe:	2380      	movs	r3, #128	; 0x80
1000c500:	430b      	orrs	r3, r1
1000c502:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c504:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c506:	e095      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c508:	4a4c      	ldr	r2, [pc, #304]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c50a:	6913      	ldr	r3, [r2, #16]
1000c50c:	2180      	movs	r1, #128	; 0x80
1000c50e:	0049      	lsls	r1, r1, #1
1000c510:	430b      	orrs	r3, r1
1000c512:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c514:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c516:	e08d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c518:	4a48      	ldr	r2, [pc, #288]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c51a:	6913      	ldr	r3, [r2, #16]
1000c51c:	2180      	movs	r1, #128	; 0x80
1000c51e:	0089      	lsls	r1, r1, #2
1000c520:	430b      	orrs	r3, r1
1000c522:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c524:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c526:	e085      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c528:	4a44      	ldr	r2, [pc, #272]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c52a:	6913      	ldr	r3, [r2, #16]
1000c52c:	2180      	movs	r1, #128	; 0x80
1000c52e:	00c9      	lsls	r1, r1, #3
1000c530:	430b      	orrs	r3, r1
1000c532:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c534:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c536:	e07d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c538:	4a40      	ldr	r2, [pc, #256]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c53a:	6913      	ldr	r3, [r2, #16]
1000c53c:	2180      	movs	r1, #128	; 0x80
1000c53e:	0109      	lsls	r1, r1, #4
1000c540:	430b      	orrs	r3, r1
1000c542:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c544:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c546:	e075      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c548:	4a3c      	ldr	r2, [pc, #240]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c54a:	6913      	ldr	r3, [r2, #16]
1000c54c:	2180      	movs	r1, #128	; 0x80
1000c54e:	0149      	lsls	r1, r1, #5
1000c550:	430b      	orrs	r3, r1
1000c552:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c554:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c556:	e06d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c558:	4a38      	ldr	r2, [pc, #224]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c55a:	6913      	ldr	r3, [r2, #16]
1000c55c:	2180      	movs	r1, #128	; 0x80
1000c55e:	0189      	lsls	r1, r1, #6
1000c560:	430b      	orrs	r3, r1
1000c562:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c566:	e065      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c568:	4a34      	ldr	r2, [pc, #208]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c56a:	6913      	ldr	r3, [r2, #16]
1000c56c:	2180      	movs	r1, #128	; 0x80
1000c56e:	01c9      	lsls	r1, r1, #7
1000c570:	430b      	orrs	r3, r1
1000c572:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c574:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c576:	e05d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c578:	4a30      	ldr	r2, [pc, #192]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c57a:	6913      	ldr	r3, [r2, #16]
1000c57c:	2180      	movs	r1, #128	; 0x80
1000c57e:	0209      	lsls	r1, r1, #8
1000c580:	430b      	orrs	r3, r1
1000c582:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c586:	e055      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c588:	4a2c      	ldr	r2, [pc, #176]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c58a:	6913      	ldr	r3, [r2, #16]
1000c58c:	2180      	movs	r1, #128	; 0x80
1000c58e:	0249      	lsls	r1, r1, #9
1000c590:	430b      	orrs	r3, r1
1000c592:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c594:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c596:	e04d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c598:	4a28      	ldr	r2, [pc, #160]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c59a:	6913      	ldr	r3, [r2, #16]
1000c59c:	2180      	movs	r1, #128	; 0x80
1000c59e:	0289      	lsls	r1, r1, #10
1000c5a0:	430b      	orrs	r3, r1
1000c5a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c5a6:	e045      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5a8:	4a24      	ldr	r2, [pc, #144]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5aa:	6913      	ldr	r3, [r2, #16]
1000c5ac:	2180      	movs	r1, #128	; 0x80
1000c5ae:	02c9      	lsls	r1, r1, #11
1000c5b0:	430b      	orrs	r3, r1
1000c5b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c5b6:	e03d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5b8:	4a20      	ldr	r2, [pc, #128]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5ba:	6913      	ldr	r3, [r2, #16]
1000c5bc:	2180      	movs	r1, #128	; 0x80
1000c5be:	0309      	lsls	r1, r1, #12
1000c5c0:	430b      	orrs	r3, r1
1000c5c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c5c6:	e035      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5c8:	4a1c      	ldr	r2, [pc, #112]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5ca:	6913      	ldr	r3, [r2, #16]
1000c5cc:	2180      	movs	r1, #128	; 0x80
1000c5ce:	0349      	lsls	r1, r1, #13
1000c5d0:	430b      	orrs	r3, r1
1000c5d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c5d6:	e02d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5d8:	4a18      	ldr	r2, [pc, #96]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5da:	6913      	ldr	r3, [r2, #16]
1000c5dc:	2180      	movs	r1, #128	; 0x80
1000c5de:	0389      	lsls	r1, r1, #14
1000c5e0:	430b      	orrs	r3, r1
1000c5e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c5e6:	e025      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5e8:	4a14      	ldr	r2, [pc, #80]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5ea:	6913      	ldr	r3, [r2, #16]
1000c5ec:	2180      	movs	r1, #128	; 0x80
1000c5ee:	03c9      	lsls	r1, r1, #15
1000c5f0:	430b      	orrs	r3, r1
1000c5f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c5f6:	e01d      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5f8:	4a10      	ldr	r2, [pc, #64]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c5fa:	6913      	ldr	r3, [r2, #16]
1000c5fc:	2180      	movs	r1, #128	; 0x80
1000c5fe:	0409      	lsls	r1, r1, #16
1000c600:	430b      	orrs	r3, r1
1000c602:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c606:	e015      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c608:	4a0c      	ldr	r2, [pc, #48]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c60a:	7d11      	ldrb	r1, [r2, #20]
1000c60c:	2301      	movs	r3, #1
1000c60e:	430b      	orrs	r3, r1
1000c610:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c612:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c614:	e00e      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c616:	4a09      	ldr	r2, [pc, #36]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c618:	7d11      	ldrb	r1, [r2, #20]
1000c61a:	2302      	movs	r3, #2
1000c61c:	430b      	orrs	r3, r1
1000c61e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c620:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c622:	e007      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c624:	4a05      	ldr	r2, [pc, #20]	; (1000c63c <system_clock_peripheral_enable+0x358>)
1000c626:	7d11      	ldrb	r1, [r2, #20]
1000c628:	2304      	movs	r3, #4
1000c62a:	430b      	orrs	r3, r1
1000c62c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c62e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c630:	e000      	b.n	1000c634 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c632:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c634:	bd00      	pop	{pc}
1000c636:	46c0      	nop			; (mov r8, r8)
1000c638:	10016304 	.word	0x10016304
1000c63c:	4000b000 	.word	0x4000b000

1000c640 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c640:	b500      	push	{lr}
	switch (peripheral) {
1000c642:	2835      	cmp	r0, #53	; 0x35
1000c644:	d900      	bls.n	1000c648 <system_clock_peripheral_disable+0x8>
1000c646:	e17d      	b.n	1000c944 <system_clock_peripheral_disable+0x304>
1000c648:	0080      	lsls	r0, r0, #2
1000c64a:	4bbf      	ldr	r3, [pc, #764]	; (1000c948 <system_clock_peripheral_disable+0x308>)
1000c64c:	581b      	ldr	r3, [r3, r0]
1000c64e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c650:	4abe      	ldr	r2, [pc, #760]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c652:	68d3      	ldr	r3, [r2, #12]
1000c654:	2102      	movs	r1, #2
1000c656:	438b      	bics	r3, r1
1000c658:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c65a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c65c:	e173      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c65e:	4abb      	ldr	r2, [pc, #748]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c660:	68d3      	ldr	r3, [r2, #12]
1000c662:	2104      	movs	r1, #4
1000c664:	438b      	bics	r3, r1
1000c666:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c66a:	e16c      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c66c:	4ab7      	ldr	r2, [pc, #732]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c66e:	68d3      	ldr	r3, [r2, #12]
1000c670:	2108      	movs	r1, #8
1000c672:	438b      	bics	r3, r1
1000c674:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c676:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c678:	e165      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c67a:	4ab4      	ldr	r2, [pc, #720]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c67c:	68d3      	ldr	r3, [r2, #12]
1000c67e:	2110      	movs	r1, #16
1000c680:	438b      	bics	r3, r1
1000c682:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c684:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c686:	e15e      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c688:	4ab0      	ldr	r2, [pc, #704]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c68a:	68d3      	ldr	r3, [r2, #12]
1000c68c:	2120      	movs	r1, #32
1000c68e:	438b      	bics	r3, r1
1000c690:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c692:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c694:	e157      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c696:	4aad      	ldr	r2, [pc, #692]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c698:	68d3      	ldr	r3, [r2, #12]
1000c69a:	2180      	movs	r1, #128	; 0x80
1000c69c:	438b      	bics	r3, r1
1000c69e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c6a2:	e150      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6a4:	4aa9      	ldr	r2, [pc, #676]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6a6:	68d1      	ldr	r1, [r2, #12]
1000c6a8:	4ba9      	ldr	r3, [pc, #676]	; (1000c950 <system_clock_peripheral_disable+0x310>)
1000c6aa:	400b      	ands	r3, r1
1000c6ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c6b0:	e149      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6b2:	4aa6      	ldr	r2, [pc, #664]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6b4:	68d1      	ldr	r1, [r2, #12]
1000c6b6:	4ba7      	ldr	r3, [pc, #668]	; (1000c954 <system_clock_peripheral_disable+0x314>)
1000c6b8:	400b      	ands	r3, r1
1000c6ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c6be:	e142      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6c0:	4aa2      	ldr	r2, [pc, #648]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6c2:	68d1      	ldr	r1, [r2, #12]
1000c6c4:	4ba4      	ldr	r3, [pc, #656]	; (1000c958 <system_clock_peripheral_disable+0x318>)
1000c6c6:	400b      	ands	r3, r1
1000c6c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c6cc:	e13b      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6ce:	4a9f      	ldr	r2, [pc, #636]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6d0:	68d1      	ldr	r1, [r2, #12]
1000c6d2:	4ba2      	ldr	r3, [pc, #648]	; (1000c95c <system_clock_peripheral_disable+0x31c>)
1000c6d4:	400b      	ands	r3, r1
1000c6d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c6da:	e134      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6dc:	4a9b      	ldr	r2, [pc, #620]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6de:	68d1      	ldr	r1, [r2, #12]
1000c6e0:	4b9f      	ldr	r3, [pc, #636]	; (1000c960 <system_clock_peripheral_disable+0x320>)
1000c6e2:	400b      	ands	r3, r1
1000c6e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c6e8:	e12d      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6ea:	4a98      	ldr	r2, [pc, #608]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6ec:	68d1      	ldr	r1, [r2, #12]
1000c6ee:	4b9d      	ldr	r3, [pc, #628]	; (1000c964 <system_clock_peripheral_disable+0x324>)
1000c6f0:	400b      	ands	r3, r1
1000c6f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c6f6:	e126      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6f8:	4a94      	ldr	r2, [pc, #592]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c6fa:	68d1      	ldr	r1, [r2, #12]
1000c6fc:	4b9a      	ldr	r3, [pc, #616]	; (1000c968 <system_clock_peripheral_disable+0x328>)
1000c6fe:	400b      	ands	r3, r1
1000c700:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c702:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c704:	e11f      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c706:	4a91      	ldr	r2, [pc, #580]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c708:	68d1      	ldr	r1, [r2, #12]
1000c70a:	4b98      	ldr	r3, [pc, #608]	; (1000c96c <system_clock_peripheral_disable+0x32c>)
1000c70c:	400b      	ands	r3, r1
1000c70e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c710:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c712:	e118      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c714:	4a8d      	ldr	r2, [pc, #564]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c716:	68d1      	ldr	r1, [r2, #12]
1000c718:	4b95      	ldr	r3, [pc, #596]	; (1000c970 <system_clock_peripheral_disable+0x330>)
1000c71a:	400b      	ands	r3, r1
1000c71c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c71e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c720:	e111      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c722:	4a8a      	ldr	r2, [pc, #552]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c724:	68d1      	ldr	r1, [r2, #12]
1000c726:	4b93      	ldr	r3, [pc, #588]	; (1000c974 <system_clock_peripheral_disable+0x334>)
1000c728:	400b      	ands	r3, r1
1000c72a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c72c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c72e:	e10a      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c730:	4a86      	ldr	r2, [pc, #536]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c732:	68d1      	ldr	r1, [r2, #12]
1000c734:	4b90      	ldr	r3, [pc, #576]	; (1000c978 <system_clock_peripheral_disable+0x338>)
1000c736:	400b      	ands	r3, r1
1000c738:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c73a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c73c:	e103      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c73e:	4a83      	ldr	r2, [pc, #524]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c740:	68d1      	ldr	r1, [r2, #12]
1000c742:	4b8e      	ldr	r3, [pc, #568]	; (1000c97c <system_clock_peripheral_disable+0x33c>)
1000c744:	400b      	ands	r3, r1
1000c746:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c748:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c74a:	e0fc      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c74c:	4a7f      	ldr	r2, [pc, #508]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c74e:	68d1      	ldr	r1, [r2, #12]
1000c750:	4b8b      	ldr	r3, [pc, #556]	; (1000c980 <system_clock_peripheral_disable+0x340>)
1000c752:	400b      	ands	r3, r1
1000c754:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c756:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c758:	e0f5      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c75a:	4a7c      	ldr	r2, [pc, #496]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c75c:	68d1      	ldr	r1, [r2, #12]
1000c75e:	4b89      	ldr	r3, [pc, #548]	; (1000c984 <system_clock_peripheral_disable+0x344>)
1000c760:	400b      	ands	r3, r1
1000c762:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c764:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c766:	e0ee      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c768:	4a78      	ldr	r2, [pc, #480]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c76a:	68d1      	ldr	r1, [r2, #12]
1000c76c:	4b86      	ldr	r3, [pc, #536]	; (1000c988 <system_clock_peripheral_disable+0x348>)
1000c76e:	400b      	ands	r3, r1
1000c770:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c772:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c774:	e0e7      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c776:	4a75      	ldr	r2, [pc, #468]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c778:	68d1      	ldr	r1, [r2, #12]
1000c77a:	4b84      	ldr	r3, [pc, #528]	; (1000c98c <system_clock_peripheral_disable+0x34c>)
1000c77c:	400b      	ands	r3, r1
1000c77e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c780:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c782:	e0e0      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c784:	4a71      	ldr	r2, [pc, #452]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c786:	68d1      	ldr	r1, [r2, #12]
1000c788:	4b81      	ldr	r3, [pc, #516]	; (1000c990 <system_clock_peripheral_disable+0x350>)
1000c78a:	400b      	ands	r3, r1
1000c78c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c78e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c790:	e0d9      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c792:	4a6e      	ldr	r2, [pc, #440]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c794:	68d1      	ldr	r1, [r2, #12]
1000c796:	4b7f      	ldr	r3, [pc, #508]	; (1000c994 <system_clock_peripheral_disable+0x354>)
1000c798:	400b      	ands	r3, r1
1000c79a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c79c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c79e:	e0d2      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7a0:	4a6a      	ldr	r2, [pc, #424]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7a2:	68d1      	ldr	r1, [r2, #12]
1000c7a4:	4b7c      	ldr	r3, [pc, #496]	; (1000c998 <system_clock_peripheral_disable+0x358>)
1000c7a6:	400b      	ands	r3, r1
1000c7a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c7ac:	e0cb      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7ae:	4a67      	ldr	r2, [pc, #412]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7b0:	68d1      	ldr	r1, [r2, #12]
1000c7b2:	4b7a      	ldr	r3, [pc, #488]	; (1000c99c <system_clock_peripheral_disable+0x35c>)
1000c7b4:	400b      	ands	r3, r1
1000c7b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c7ba:	e0c4      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7bc:	4a63      	ldr	r2, [pc, #396]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7be:	68d1      	ldr	r1, [r2, #12]
1000c7c0:	4b77      	ldr	r3, [pc, #476]	; (1000c9a0 <system_clock_peripheral_disable+0x360>)
1000c7c2:	400b      	ands	r3, r1
1000c7c4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c7c8:	e0bd      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c7ca:	4a60      	ldr	r2, [pc, #384]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7cc:	6913      	ldr	r3, [r2, #16]
1000c7ce:	2101      	movs	r1, #1
1000c7d0:	438b      	bics	r3, r1
1000c7d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c7d6:	e0b6      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c7d8:	4a5c      	ldr	r2, [pc, #368]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7da:	6913      	ldr	r3, [r2, #16]
1000c7dc:	2102      	movs	r1, #2
1000c7de:	438b      	bics	r3, r1
1000c7e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c7e4:	e0af      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c7e6:	4a59      	ldr	r2, [pc, #356]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7e8:	6913      	ldr	r3, [r2, #16]
1000c7ea:	2104      	movs	r1, #4
1000c7ec:	438b      	bics	r3, r1
1000c7ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c7f2:	e0a8      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c7f4:	4a55      	ldr	r2, [pc, #340]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c7f6:	6913      	ldr	r3, [r2, #16]
1000c7f8:	2108      	movs	r1, #8
1000c7fa:	438b      	bics	r3, r1
1000c7fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c800:	e0a1      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c802:	4a52      	ldr	r2, [pc, #328]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c804:	6913      	ldr	r3, [r2, #16]
1000c806:	2110      	movs	r1, #16
1000c808:	438b      	bics	r3, r1
1000c80a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c80c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c80e:	e09a      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c810:	4a4e      	ldr	r2, [pc, #312]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c812:	6913      	ldr	r3, [r2, #16]
1000c814:	2120      	movs	r1, #32
1000c816:	438b      	bics	r3, r1
1000c818:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c81a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c81c:	e093      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c81e:	4a4b      	ldr	r2, [pc, #300]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c820:	6913      	ldr	r3, [r2, #16]
1000c822:	2140      	movs	r1, #64	; 0x40
1000c824:	438b      	bics	r3, r1
1000c826:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c82a:	e08c      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c82c:	4a47      	ldr	r2, [pc, #284]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c82e:	6913      	ldr	r3, [r2, #16]
1000c830:	2180      	movs	r1, #128	; 0x80
1000c832:	438b      	bics	r3, r1
1000c834:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c836:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c838:	e085      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c83a:	4a44      	ldr	r2, [pc, #272]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c83c:	6911      	ldr	r1, [r2, #16]
1000c83e:	4b44      	ldr	r3, [pc, #272]	; (1000c950 <system_clock_peripheral_disable+0x310>)
1000c840:	400b      	ands	r3, r1
1000c842:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c844:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c846:	e07e      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c848:	4a40      	ldr	r2, [pc, #256]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c84a:	6911      	ldr	r1, [r2, #16]
1000c84c:	4b55      	ldr	r3, [pc, #340]	; (1000c9a4 <system_clock_peripheral_disable+0x364>)
1000c84e:	400b      	ands	r3, r1
1000c850:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c852:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c854:	e077      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c856:	4a3d      	ldr	r2, [pc, #244]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c858:	6911      	ldr	r1, [r2, #16]
1000c85a:	4b53      	ldr	r3, [pc, #332]	; (1000c9a8 <system_clock_peripheral_disable+0x368>)
1000c85c:	400b      	ands	r3, r1
1000c85e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c860:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c862:	e070      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c864:	4a39      	ldr	r2, [pc, #228]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c866:	6911      	ldr	r1, [r2, #16]
1000c868:	4b3a      	ldr	r3, [pc, #232]	; (1000c954 <system_clock_peripheral_disable+0x314>)
1000c86a:	400b      	ands	r3, r1
1000c86c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c86e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c870:	e069      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c872:	4a36      	ldr	r2, [pc, #216]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c874:	6911      	ldr	r1, [r2, #16]
1000c876:	4b38      	ldr	r3, [pc, #224]	; (1000c958 <system_clock_peripheral_disable+0x318>)
1000c878:	400b      	ands	r3, r1
1000c87a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c87c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c87e:	e062      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c880:	4a32      	ldr	r2, [pc, #200]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c882:	6911      	ldr	r1, [r2, #16]
1000c884:	4b35      	ldr	r3, [pc, #212]	; (1000c95c <system_clock_peripheral_disable+0x31c>)
1000c886:	400b      	ands	r3, r1
1000c888:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c88a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c88c:	e05b      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c88e:	4a2f      	ldr	r2, [pc, #188]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c890:	6911      	ldr	r1, [r2, #16]
1000c892:	4b33      	ldr	r3, [pc, #204]	; (1000c960 <system_clock_peripheral_disable+0x320>)
1000c894:	400b      	ands	r3, r1
1000c896:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c89a:	e054      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c89c:	4a2b      	ldr	r2, [pc, #172]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c89e:	6911      	ldr	r1, [r2, #16]
1000c8a0:	4b30      	ldr	r3, [pc, #192]	; (1000c964 <system_clock_peripheral_disable+0x324>)
1000c8a2:	400b      	ands	r3, r1
1000c8a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c8a8:	e04d      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8aa:	4a28      	ldr	r2, [pc, #160]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8ac:	6911      	ldr	r1, [r2, #16]
1000c8ae:	4b2e      	ldr	r3, [pc, #184]	; (1000c968 <system_clock_peripheral_disable+0x328>)
1000c8b0:	400b      	ands	r3, r1
1000c8b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c8b6:	e046      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8b8:	4a24      	ldr	r2, [pc, #144]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8ba:	6911      	ldr	r1, [r2, #16]
1000c8bc:	4b2b      	ldr	r3, [pc, #172]	; (1000c96c <system_clock_peripheral_disable+0x32c>)
1000c8be:	400b      	ands	r3, r1
1000c8c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c8c4:	e03f      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8c6:	4a21      	ldr	r2, [pc, #132]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8c8:	6911      	ldr	r1, [r2, #16]
1000c8ca:	4b29      	ldr	r3, [pc, #164]	; (1000c970 <system_clock_peripheral_disable+0x330>)
1000c8cc:	400b      	ands	r3, r1
1000c8ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c8d2:	e038      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8d4:	4a1d      	ldr	r2, [pc, #116]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8d6:	6911      	ldr	r1, [r2, #16]
1000c8d8:	4b26      	ldr	r3, [pc, #152]	; (1000c974 <system_clock_peripheral_disable+0x334>)
1000c8da:	400b      	ands	r3, r1
1000c8dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c8e0:	e031      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8e2:	4a1a      	ldr	r2, [pc, #104]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8e4:	6911      	ldr	r1, [r2, #16]
1000c8e6:	4b24      	ldr	r3, [pc, #144]	; (1000c978 <system_clock_peripheral_disable+0x338>)
1000c8e8:	400b      	ands	r3, r1
1000c8ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c8ee:	e02a      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8f0:	4a16      	ldr	r2, [pc, #88]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c8f2:	6911      	ldr	r1, [r2, #16]
1000c8f4:	4b21      	ldr	r3, [pc, #132]	; (1000c97c <system_clock_peripheral_disable+0x33c>)
1000c8f6:	400b      	ands	r3, r1
1000c8f8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c8fc:	e023      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8fe:	4a13      	ldr	r2, [pc, #76]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c900:	6911      	ldr	r1, [r2, #16]
1000c902:	4b1f      	ldr	r3, [pc, #124]	; (1000c980 <system_clock_peripheral_disable+0x340>)
1000c904:	400b      	ands	r3, r1
1000c906:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c908:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c90a:	e01c      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c90c:	4a0f      	ldr	r2, [pc, #60]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c90e:	6911      	ldr	r1, [r2, #16]
1000c910:	4b1c      	ldr	r3, [pc, #112]	; (1000c984 <system_clock_peripheral_disable+0x344>)
1000c912:	400b      	ands	r3, r1
1000c914:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c916:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c918:	e015      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c91a:	4a0c      	ldr	r2, [pc, #48]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c91c:	7d13      	ldrb	r3, [r2, #20]
1000c91e:	2101      	movs	r1, #1
1000c920:	438b      	bics	r3, r1
1000c922:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c924:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c926:	e00e      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c928:	4a08      	ldr	r2, [pc, #32]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c92a:	7d13      	ldrb	r3, [r2, #20]
1000c92c:	2102      	movs	r1, #2
1000c92e:	438b      	bics	r3, r1
1000c930:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c932:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c934:	e007      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c936:	4a05      	ldr	r2, [pc, #20]	; (1000c94c <system_clock_peripheral_disable+0x30c>)
1000c938:	7d13      	ldrb	r3, [r2, #20]
1000c93a:	2104      	movs	r1, #4
1000c93c:	438b      	bics	r3, r1
1000c93e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c940:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c942:	e000      	b.n	1000c946 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c944:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c946:	bd00      	pop	{pc}
1000c948:	100163dc 	.word	0x100163dc
1000c94c:	4000b000 	.word	0x4000b000
1000c950:	fffffeff 	.word	0xfffffeff
1000c954:	fffff7ff 	.word	0xfffff7ff
1000c958:	ffffefff 	.word	0xffffefff
1000c95c:	ffffdfff 	.word	0xffffdfff
1000c960:	ffffbfff 	.word	0xffffbfff
1000c964:	ffff7fff 	.word	0xffff7fff
1000c968:	fffeffff 	.word	0xfffeffff
1000c96c:	fffdffff 	.word	0xfffdffff
1000c970:	fffbffff 	.word	0xfffbffff
1000c974:	fff7ffff 	.word	0xfff7ffff
1000c978:	ffefffff 	.word	0xffefffff
1000c97c:	ffdfffff 	.word	0xffdfffff
1000c980:	ffbfffff 	.word	0xffbfffff
1000c984:	ff7fffff 	.word	0xff7fffff
1000c988:	feffffff 	.word	0xfeffffff
1000c98c:	fdffffff 	.word	0xfdffffff
1000c990:	fbffffff 	.word	0xfbffffff
1000c994:	f7ffffff 	.word	0xf7ffffff
1000c998:	efffffff 	.word	0xefffffff
1000c99c:	dfffffff 	.word	0xdfffffff
1000c9a0:	bfffffff 	.word	0xbfffffff
1000c9a4:	fffffdff 	.word	0xfffffdff
1000c9a8:	fffffbff 	.word	0xfffffbff

1000c9ac <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c9ac:	b500      	push	{lr}
	switch (peripheral) {
1000c9ae:	2843      	cmp	r0, #67	; 0x43
1000c9b0:	d900      	bls.n	1000c9b4 <system_peripheral_reset+0x8>
1000c9b2:	e223      	b.n	1000cdfc <system_peripheral_reset+0x450>
1000c9b4:	0080      	lsls	r0, r0, #2
1000c9b6:	4be0      	ldr	r3, [pc, #896]	; (1000cd38 <system_peripheral_reset+0x38c>)
1000c9b8:	581b      	ldr	r3, [r3, r0]
1000c9ba:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9bc:	4bdf      	ldr	r3, [pc, #892]	; (1000cd3c <system_peripheral_reset+0x390>)
1000c9be:	6859      	ldr	r1, [r3, #4]
1000c9c0:	2202      	movs	r2, #2
1000c9c2:	4391      	bics	r1, r2
1000c9c4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9c6:	6859      	ldr	r1, [r3, #4]
1000c9c8:	430a      	orrs	r2, r1
1000c9ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9cc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c9ce:	e216      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9d0:	4bda      	ldr	r3, [pc, #872]	; (1000cd3c <system_peripheral_reset+0x390>)
1000c9d2:	6859      	ldr	r1, [r3, #4]
1000c9d4:	2204      	movs	r2, #4
1000c9d6:	4391      	bics	r1, r2
1000c9d8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9da:	6859      	ldr	r1, [r3, #4]
1000c9dc:	430a      	orrs	r2, r1
1000c9de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c9e2:	e20c      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9e4:	4bd5      	ldr	r3, [pc, #852]	; (1000cd3c <system_peripheral_reset+0x390>)
1000c9e6:	6859      	ldr	r1, [r3, #4]
1000c9e8:	2208      	movs	r2, #8
1000c9ea:	4391      	bics	r1, r2
1000c9ec:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9ee:	6859      	ldr	r1, [r3, #4]
1000c9f0:	430a      	orrs	r2, r1
1000c9f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c9f6:	e202      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9f8:	4bd0      	ldr	r3, [pc, #832]	; (1000cd3c <system_peripheral_reset+0x390>)
1000c9fa:	6859      	ldr	r1, [r3, #4]
1000c9fc:	2210      	movs	r2, #16
1000c9fe:	4391      	bics	r1, r2
1000ca00:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca02:	6859      	ldr	r1, [r3, #4]
1000ca04:	430a      	orrs	r2, r1
1000ca06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca08:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ca0a:	e1f8      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca0c:	4bcb      	ldr	r3, [pc, #812]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca0e:	6859      	ldr	r1, [r3, #4]
1000ca10:	2220      	movs	r2, #32
1000ca12:	4391      	bics	r1, r2
1000ca14:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca16:	6859      	ldr	r1, [r3, #4]
1000ca18:	430a      	orrs	r2, r1
1000ca1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca1c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ca1e:	e1ee      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca20:	4bc6      	ldr	r3, [pc, #792]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca22:	6859      	ldr	r1, [r3, #4]
1000ca24:	2240      	movs	r2, #64	; 0x40
1000ca26:	4391      	bics	r1, r2
1000ca28:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca2a:	6859      	ldr	r1, [r3, #4]
1000ca2c:	430a      	orrs	r2, r1
1000ca2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca30:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ca32:	e1e4      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca34:	4bc1      	ldr	r3, [pc, #772]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca36:	6859      	ldr	r1, [r3, #4]
1000ca38:	2280      	movs	r2, #128	; 0x80
1000ca3a:	4391      	bics	r1, r2
1000ca3c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca3e:	6859      	ldr	r1, [r3, #4]
1000ca40:	430a      	orrs	r2, r1
1000ca42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca44:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000ca46:	e1da      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca48:	4bbc      	ldr	r3, [pc, #752]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca4a:	6859      	ldr	r1, [r3, #4]
1000ca4c:	4abc      	ldr	r2, [pc, #752]	; (1000cd40 <system_peripheral_reset+0x394>)
1000ca4e:	400a      	ands	r2, r1
1000ca50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca52:	685a      	ldr	r2, [r3, #4]
1000ca54:	2180      	movs	r1, #128	; 0x80
1000ca56:	0049      	lsls	r1, r1, #1
1000ca58:	430a      	orrs	r2, r1
1000ca5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca5c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000ca5e:	e1ce      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca60:	4bb6      	ldr	r3, [pc, #728]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca62:	6859      	ldr	r1, [r3, #4]
1000ca64:	4ab7      	ldr	r2, [pc, #732]	; (1000cd44 <system_peripheral_reset+0x398>)
1000ca66:	400a      	ands	r2, r1
1000ca68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca6a:	685a      	ldr	r2, [r3, #4]
1000ca6c:	2180      	movs	r1, #128	; 0x80
1000ca6e:	0089      	lsls	r1, r1, #2
1000ca70:	430a      	orrs	r2, r1
1000ca72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca74:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000ca76:	e1c2      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca78:	4bb0      	ldr	r3, [pc, #704]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca7a:	6859      	ldr	r1, [r3, #4]
1000ca7c:	4ab2      	ldr	r2, [pc, #712]	; (1000cd48 <system_peripheral_reset+0x39c>)
1000ca7e:	400a      	ands	r2, r1
1000ca80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca82:	685a      	ldr	r2, [r3, #4]
1000ca84:	2180      	movs	r1, #128	; 0x80
1000ca86:	00c9      	lsls	r1, r1, #3
1000ca88:	430a      	orrs	r2, r1
1000ca8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca8c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000ca8e:	e1b6      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca90:	4baa      	ldr	r3, [pc, #680]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ca92:	6859      	ldr	r1, [r3, #4]
1000ca94:	4aad      	ldr	r2, [pc, #692]	; (1000cd4c <system_peripheral_reset+0x3a0>)
1000ca96:	400a      	ands	r2, r1
1000ca98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca9a:	685a      	ldr	r2, [r3, #4]
1000ca9c:	2180      	movs	r1, #128	; 0x80
1000ca9e:	0109      	lsls	r1, r1, #4
1000caa0:	430a      	orrs	r2, r1
1000caa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000caa6:	e1aa      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caa8:	4ba4      	ldr	r3, [pc, #656]	; (1000cd3c <system_peripheral_reset+0x390>)
1000caaa:	6859      	ldr	r1, [r3, #4]
1000caac:	4aa8      	ldr	r2, [pc, #672]	; (1000cd50 <system_peripheral_reset+0x3a4>)
1000caae:	400a      	ands	r2, r1
1000cab0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cab2:	685a      	ldr	r2, [r3, #4]
1000cab4:	2180      	movs	r1, #128	; 0x80
1000cab6:	0149      	lsls	r1, r1, #5
1000cab8:	430a      	orrs	r2, r1
1000caba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cabc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cabe:	e19e      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cac0:	4b9e      	ldr	r3, [pc, #632]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cac2:	6859      	ldr	r1, [r3, #4]
1000cac4:	4aa3      	ldr	r2, [pc, #652]	; (1000cd54 <system_peripheral_reset+0x3a8>)
1000cac6:	400a      	ands	r2, r1
1000cac8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caca:	685a      	ldr	r2, [r3, #4]
1000cacc:	2180      	movs	r1, #128	; 0x80
1000cace:	0189      	lsls	r1, r1, #6
1000cad0:	430a      	orrs	r2, r1
1000cad2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cad6:	e192      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cad8:	4b98      	ldr	r3, [pc, #608]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cada:	6859      	ldr	r1, [r3, #4]
1000cadc:	4a9e      	ldr	r2, [pc, #632]	; (1000cd58 <system_peripheral_reset+0x3ac>)
1000cade:	400a      	ands	r2, r1
1000cae0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cae2:	685a      	ldr	r2, [r3, #4]
1000cae4:	2180      	movs	r1, #128	; 0x80
1000cae6:	01c9      	lsls	r1, r1, #7
1000cae8:	430a      	orrs	r2, r1
1000caea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caec:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000caee:	e186      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caf0:	4b92      	ldr	r3, [pc, #584]	; (1000cd3c <system_peripheral_reset+0x390>)
1000caf2:	6859      	ldr	r1, [r3, #4]
1000caf4:	4a99      	ldr	r2, [pc, #612]	; (1000cd5c <system_peripheral_reset+0x3b0>)
1000caf6:	400a      	ands	r2, r1
1000caf8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cafa:	685a      	ldr	r2, [r3, #4]
1000cafc:	2180      	movs	r1, #128	; 0x80
1000cafe:	0209      	lsls	r1, r1, #8
1000cb00:	430a      	orrs	r2, r1
1000cb02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb04:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cb06:	e17a      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb08:	4b8c      	ldr	r3, [pc, #560]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb0a:	6859      	ldr	r1, [r3, #4]
1000cb0c:	4a94      	ldr	r2, [pc, #592]	; (1000cd60 <system_peripheral_reset+0x3b4>)
1000cb0e:	400a      	ands	r2, r1
1000cb10:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb12:	685a      	ldr	r2, [r3, #4]
1000cb14:	2180      	movs	r1, #128	; 0x80
1000cb16:	0249      	lsls	r1, r1, #9
1000cb18:	430a      	orrs	r2, r1
1000cb1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb1c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cb1e:	e16e      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb20:	4b86      	ldr	r3, [pc, #536]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb22:	6859      	ldr	r1, [r3, #4]
1000cb24:	4a8f      	ldr	r2, [pc, #572]	; (1000cd64 <system_peripheral_reset+0x3b8>)
1000cb26:	400a      	ands	r2, r1
1000cb28:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb2a:	685a      	ldr	r2, [r3, #4]
1000cb2c:	2180      	movs	r1, #128	; 0x80
1000cb2e:	0289      	lsls	r1, r1, #10
1000cb30:	430a      	orrs	r2, r1
1000cb32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb34:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000cb36:	e162      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb38:	4b80      	ldr	r3, [pc, #512]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb3a:	6859      	ldr	r1, [r3, #4]
1000cb3c:	4a8a      	ldr	r2, [pc, #552]	; (1000cd68 <system_peripheral_reset+0x3bc>)
1000cb3e:	400a      	ands	r2, r1
1000cb40:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb42:	685a      	ldr	r2, [r3, #4]
1000cb44:	2180      	movs	r1, #128	; 0x80
1000cb46:	02c9      	lsls	r1, r1, #11
1000cb48:	430a      	orrs	r2, r1
1000cb4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb4c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cb4e:	e156      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb50:	4b7a      	ldr	r3, [pc, #488]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb52:	6859      	ldr	r1, [r3, #4]
1000cb54:	4a85      	ldr	r2, [pc, #532]	; (1000cd6c <system_peripheral_reset+0x3c0>)
1000cb56:	400a      	ands	r2, r1
1000cb58:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb5a:	685a      	ldr	r2, [r3, #4]
1000cb5c:	2180      	movs	r1, #128	; 0x80
1000cb5e:	0309      	lsls	r1, r1, #12
1000cb60:	430a      	orrs	r2, r1
1000cb62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb64:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cb66:	e14a      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb68:	4b74      	ldr	r3, [pc, #464]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb6a:	6859      	ldr	r1, [r3, #4]
1000cb6c:	4a80      	ldr	r2, [pc, #512]	; (1000cd70 <system_peripheral_reset+0x3c4>)
1000cb6e:	400a      	ands	r2, r1
1000cb70:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb72:	685a      	ldr	r2, [r3, #4]
1000cb74:	2180      	movs	r1, #128	; 0x80
1000cb76:	0349      	lsls	r1, r1, #13
1000cb78:	430a      	orrs	r2, r1
1000cb7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb7c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cb7e:	e13e      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb80:	4b6e      	ldr	r3, [pc, #440]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb82:	6859      	ldr	r1, [r3, #4]
1000cb84:	4a7b      	ldr	r2, [pc, #492]	; (1000cd74 <system_peripheral_reset+0x3c8>)
1000cb86:	400a      	ands	r2, r1
1000cb88:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb8a:	685a      	ldr	r2, [r3, #4]
1000cb8c:	2180      	movs	r1, #128	; 0x80
1000cb8e:	0389      	lsls	r1, r1, #14
1000cb90:	430a      	orrs	r2, r1
1000cb92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb94:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cb96:	e132      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb98:	4b68      	ldr	r3, [pc, #416]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cb9a:	6859      	ldr	r1, [r3, #4]
1000cb9c:	4a76      	ldr	r2, [pc, #472]	; (1000cd78 <system_peripheral_reset+0x3cc>)
1000cb9e:	400a      	ands	r2, r1
1000cba0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cba2:	685a      	ldr	r2, [r3, #4]
1000cba4:	2180      	movs	r1, #128	; 0x80
1000cba6:	03c9      	lsls	r1, r1, #15
1000cba8:	430a      	orrs	r2, r1
1000cbaa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbac:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cbae:	e126      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbb0:	4b62      	ldr	r3, [pc, #392]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cbb2:	6859      	ldr	r1, [r3, #4]
1000cbb4:	4a71      	ldr	r2, [pc, #452]	; (1000cd7c <system_peripheral_reset+0x3d0>)
1000cbb6:	400a      	ands	r2, r1
1000cbb8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbba:	685a      	ldr	r2, [r3, #4]
1000cbbc:	2180      	movs	r1, #128	; 0x80
1000cbbe:	0409      	lsls	r1, r1, #16
1000cbc0:	430a      	orrs	r2, r1
1000cbc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cbc6:	e11a      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbc8:	4b5c      	ldr	r3, [pc, #368]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cbca:	6859      	ldr	r1, [r3, #4]
1000cbcc:	4a6c      	ldr	r2, [pc, #432]	; (1000cd80 <system_peripheral_reset+0x3d4>)
1000cbce:	400a      	ands	r2, r1
1000cbd0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbd2:	685a      	ldr	r2, [r3, #4]
1000cbd4:	2180      	movs	r1, #128	; 0x80
1000cbd6:	0449      	lsls	r1, r1, #17
1000cbd8:	430a      	orrs	r2, r1
1000cbda:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbdc:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cbde:	e10e      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbe0:	4b56      	ldr	r3, [pc, #344]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cbe2:	6859      	ldr	r1, [r3, #4]
1000cbe4:	4a67      	ldr	r2, [pc, #412]	; (1000cd84 <system_peripheral_reset+0x3d8>)
1000cbe6:	400a      	ands	r2, r1
1000cbe8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbea:	685a      	ldr	r2, [r3, #4]
1000cbec:	2180      	movs	r1, #128	; 0x80
1000cbee:	0489      	lsls	r1, r1, #18
1000cbf0:	430a      	orrs	r2, r1
1000cbf2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cbf6:	e102      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbf8:	4b50      	ldr	r3, [pc, #320]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cbfa:	6859      	ldr	r1, [r3, #4]
1000cbfc:	4a62      	ldr	r2, [pc, #392]	; (1000cd88 <system_peripheral_reset+0x3dc>)
1000cbfe:	400a      	ands	r2, r1
1000cc00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc02:	685a      	ldr	r2, [r3, #4]
1000cc04:	2180      	movs	r1, #128	; 0x80
1000cc06:	04c9      	lsls	r1, r1, #19
1000cc08:	430a      	orrs	r2, r1
1000cc0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc0c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cc0e:	e0f6      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc10:	4b4a      	ldr	r3, [pc, #296]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc12:	6859      	ldr	r1, [r3, #4]
1000cc14:	4a5d      	ldr	r2, [pc, #372]	; (1000cd8c <system_peripheral_reset+0x3e0>)
1000cc16:	400a      	ands	r2, r1
1000cc18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc1a:	685a      	ldr	r2, [r3, #4]
1000cc1c:	2180      	movs	r1, #128	; 0x80
1000cc1e:	0509      	lsls	r1, r1, #20
1000cc20:	430a      	orrs	r2, r1
1000cc22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc24:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cc26:	e0ea      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc28:	4b44      	ldr	r3, [pc, #272]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc2a:	6859      	ldr	r1, [r3, #4]
1000cc2c:	4a58      	ldr	r2, [pc, #352]	; (1000cd90 <system_peripheral_reset+0x3e4>)
1000cc2e:	400a      	ands	r2, r1
1000cc30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc32:	685a      	ldr	r2, [r3, #4]
1000cc34:	2180      	movs	r1, #128	; 0x80
1000cc36:	0549      	lsls	r1, r1, #21
1000cc38:	430a      	orrs	r2, r1
1000cc3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc3c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000cc3e:	e0de      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc40:	4b3e      	ldr	r3, [pc, #248]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc42:	6859      	ldr	r1, [r3, #4]
1000cc44:	4a53      	ldr	r2, [pc, #332]	; (1000cd94 <system_peripheral_reset+0x3e8>)
1000cc46:	400a      	ands	r2, r1
1000cc48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc4a:	685a      	ldr	r2, [r3, #4]
1000cc4c:	2180      	movs	r1, #128	; 0x80
1000cc4e:	0589      	lsls	r1, r1, #22
1000cc50:	430a      	orrs	r2, r1
1000cc52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc54:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000cc56:	e0d2      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc58:	4b38      	ldr	r3, [pc, #224]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc5a:	6859      	ldr	r1, [r3, #4]
1000cc5c:	4a4e      	ldr	r2, [pc, #312]	; (1000cd98 <system_peripheral_reset+0x3ec>)
1000cc5e:	400a      	ands	r2, r1
1000cc60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc62:	685a      	ldr	r2, [r3, #4]
1000cc64:	2180      	movs	r1, #128	; 0x80
1000cc66:	05c9      	lsls	r1, r1, #23
1000cc68:	430a      	orrs	r2, r1
1000cc6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc6c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cc6e:	e0c6      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc70:	4a32      	ldr	r2, [pc, #200]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc72:	6853      	ldr	r3, [r2, #4]
1000cc74:	005b      	lsls	r3, r3, #1
1000cc76:	085b      	lsrs	r3, r3, #1
1000cc78:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc7a:	6853      	ldr	r3, [r2, #4]
1000cc7c:	2180      	movs	r1, #128	; 0x80
1000cc7e:	0609      	lsls	r1, r1, #24
1000cc80:	430b      	orrs	r3, r1
1000cc82:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc84:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000cc86:	e0ba      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc88:	4b2c      	ldr	r3, [pc, #176]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cc8a:	891a      	ldrh	r2, [r3, #8]
1000cc8c:	2101      	movs	r1, #1
1000cc8e:	438a      	bics	r2, r1
1000cc90:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc92:	8919      	ldrh	r1, [r3, #8]
1000cc94:	2201      	movs	r2, #1
1000cc96:	430a      	orrs	r2, r1
1000cc98:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc9a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000cc9c:	e0af      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc9e:	4b27      	ldr	r3, [pc, #156]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cca0:	891a      	ldrh	r2, [r3, #8]
1000cca2:	2102      	movs	r1, #2
1000cca4:	438a      	bics	r2, r1
1000cca6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cca8:	8919      	ldrh	r1, [r3, #8]
1000ccaa:	2202      	movs	r2, #2
1000ccac:	430a      	orrs	r2, r1
1000ccae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000ccb2:	e0a4      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccb4:	4b21      	ldr	r3, [pc, #132]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ccb6:	891a      	ldrh	r2, [r3, #8]
1000ccb8:	2104      	movs	r1, #4
1000ccba:	438a      	bics	r2, r1
1000ccbc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccbe:	8919      	ldrh	r1, [r3, #8]
1000ccc0:	2204      	movs	r2, #4
1000ccc2:	430a      	orrs	r2, r1
1000ccc4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc6:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ccc8:	e099      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccca:	4b1c      	ldr	r3, [pc, #112]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cccc:	891a      	ldrh	r2, [r3, #8]
1000ccce:	2108      	movs	r1, #8
1000ccd0:	438a      	bics	r2, r1
1000ccd2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccd4:	8919      	ldrh	r1, [r3, #8]
1000ccd6:	2208      	movs	r2, #8
1000ccd8:	430a      	orrs	r2, r1
1000ccda:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccdc:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ccde:	e08e      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cce0:	4b16      	ldr	r3, [pc, #88]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cce2:	891a      	ldrh	r2, [r3, #8]
1000cce4:	2110      	movs	r1, #16
1000cce6:	438a      	bics	r2, r1
1000cce8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccea:	8919      	ldrh	r1, [r3, #8]
1000ccec:	2210      	movs	r2, #16
1000ccee:	430a      	orrs	r2, r1
1000ccf0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf2:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000ccf4:	e083      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccf6:	4b11      	ldr	r3, [pc, #68]	; (1000cd3c <system_peripheral_reset+0x390>)
1000ccf8:	891a      	ldrh	r2, [r3, #8]
1000ccfa:	2120      	movs	r1, #32
1000ccfc:	438a      	bics	r2, r1
1000ccfe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd00:	8919      	ldrh	r1, [r3, #8]
1000cd02:	2220      	movs	r2, #32
1000cd04:	430a      	orrs	r2, r1
1000cd06:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd08:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cd0a:	e078      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd0c:	4b0b      	ldr	r3, [pc, #44]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cd0e:	891a      	ldrh	r2, [r3, #8]
1000cd10:	2140      	movs	r1, #64	; 0x40
1000cd12:	438a      	bics	r2, r1
1000cd14:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd16:	8919      	ldrh	r1, [r3, #8]
1000cd18:	2240      	movs	r2, #64	; 0x40
1000cd1a:	430a      	orrs	r2, r1
1000cd1c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd1e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000cd20:	e06d      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd22:	4b06      	ldr	r3, [pc, #24]	; (1000cd3c <system_peripheral_reset+0x390>)
1000cd24:	891a      	ldrh	r2, [r3, #8]
1000cd26:	2180      	movs	r1, #128	; 0x80
1000cd28:	438a      	bics	r2, r1
1000cd2a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd2c:	8919      	ldrh	r1, [r3, #8]
1000cd2e:	2280      	movs	r2, #128	; 0x80
1000cd30:	430a      	orrs	r2, r1
1000cd32:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd34:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cd36:	e062      	b.n	1000cdfe <system_peripheral_reset+0x452>
1000cd38:	100164b4 	.word	0x100164b4
1000cd3c:	4000b000 	.word	0x4000b000
1000cd40:	fffffeff 	.word	0xfffffeff
1000cd44:	fffffdff 	.word	0xfffffdff
1000cd48:	fffffbff 	.word	0xfffffbff
1000cd4c:	fffff7ff 	.word	0xfffff7ff
1000cd50:	ffffefff 	.word	0xffffefff
1000cd54:	ffffdfff 	.word	0xffffdfff
1000cd58:	ffffbfff 	.word	0xffffbfff
1000cd5c:	ffff7fff 	.word	0xffff7fff
1000cd60:	fffeffff 	.word	0xfffeffff
1000cd64:	fffdffff 	.word	0xfffdffff
1000cd68:	fffbffff 	.word	0xfffbffff
1000cd6c:	fff7ffff 	.word	0xfff7ffff
1000cd70:	ffefffff 	.word	0xffefffff
1000cd74:	ffdfffff 	.word	0xffdfffff
1000cd78:	ffbfffff 	.word	0xffbfffff
1000cd7c:	ff7fffff 	.word	0xff7fffff
1000cd80:	feffffff 	.word	0xfeffffff
1000cd84:	fdffffff 	.word	0xfdffffff
1000cd88:	fbffffff 	.word	0xfbffffff
1000cd8c:	f7ffffff 	.word	0xf7ffffff
1000cd90:	efffffff 	.word	0xefffffff
1000cd94:	dfffffff 	.word	0xdfffffff
1000cd98:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd9c:	4b18      	ldr	r3, [pc, #96]	; (1000ce00 <system_peripheral_reset+0x454>)
1000cd9e:	8919      	ldrh	r1, [r3, #8]
1000cda0:	4a18      	ldr	r2, [pc, #96]	; (1000ce04 <system_peripheral_reset+0x458>)
1000cda2:	400a      	ands	r2, r1
1000cda4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cda6:	8919      	ldrh	r1, [r3, #8]
1000cda8:	2280      	movs	r2, #128	; 0x80
1000cdaa:	0052      	lsls	r2, r2, #1
1000cdac:	430a      	orrs	r2, r1
1000cdae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000cdb2:	e024      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cdb4:	4b12      	ldr	r3, [pc, #72]	; (1000ce00 <system_peripheral_reset+0x454>)
1000cdb6:	8919      	ldrh	r1, [r3, #8]
1000cdb8:	4a13      	ldr	r2, [pc, #76]	; (1000ce08 <system_peripheral_reset+0x45c>)
1000cdba:	400a      	ands	r2, r1
1000cdbc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cdbe:	8919      	ldrh	r1, [r3, #8]
1000cdc0:	2280      	movs	r2, #128	; 0x80
1000cdc2:	0092      	lsls	r2, r2, #2
1000cdc4:	430a      	orrs	r2, r1
1000cdc6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdc8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cdca:	e018      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cdcc:	4b0c      	ldr	r3, [pc, #48]	; (1000ce00 <system_peripheral_reset+0x454>)
1000cdce:	8919      	ldrh	r1, [r3, #8]
1000cdd0:	4a0e      	ldr	r2, [pc, #56]	; (1000ce0c <system_peripheral_reset+0x460>)
1000cdd2:	400a      	ands	r2, r1
1000cdd4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cdd6:	8919      	ldrh	r1, [r3, #8]
1000cdd8:	2280      	movs	r2, #128	; 0x80
1000cdda:	00d2      	lsls	r2, r2, #3
1000cddc:	430a      	orrs	r2, r1
1000cdde:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cde0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cde2:	e00c      	b.n	1000cdfe <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cde4:	4b06      	ldr	r3, [pc, #24]	; (1000ce00 <system_peripheral_reset+0x454>)
1000cde6:	8919      	ldrh	r1, [r3, #8]
1000cde8:	4a09      	ldr	r2, [pc, #36]	; (1000ce10 <system_peripheral_reset+0x464>)
1000cdea:	400a      	ands	r2, r1
1000cdec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cdee:	8919      	ldrh	r1, [r3, #8]
1000cdf0:	2280      	movs	r2, #128	; 0x80
1000cdf2:	0112      	lsls	r2, r2, #4
1000cdf4:	430a      	orrs	r2, r1
1000cdf6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdf8:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cdfa:	e000      	b.n	1000cdfe <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cdfc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cdfe:	bd00      	pop	{pc}
1000ce00:	4000b000 	.word	0x4000b000
1000ce04:	fffffeff 	.word	0xfffffeff
1000ce08:	fffffdff 	.word	0xfffffdff
1000ce0c:	fffffbff 	.word	0xfffffbff
1000ce10:	fffff7ff 	.word	0xfffff7ff

1000ce14 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000ce14:	2380      	movs	r3, #128	; 0x80
1000ce16:	04db      	lsls	r3, r3, #19
1000ce18:	469c      	mov	ip, r3
1000ce1a:	4460      	add	r0, ip
1000ce1c:	0080      	lsls	r0, r0, #2
1000ce1e:	6001      	str	r1, [r0, #0]
}
1000ce20:	4770      	bx	lr
1000ce22:	46c0      	nop			; (mov r8, r8)

1000ce24 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ce24:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ce26:	4b20      	ldr	r3, [pc, #128]	; (1000cea8 <uart_rx0_isr_handler+0x84>)
1000ce28:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ce2a:	6823      	ldr	r3, [r4, #0]
1000ce2c:	7d1d      	ldrb	r5, [r3, #20]
1000ce2e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000ce30:	066a      	lsls	r2, r5, #25
1000ce32:	d513      	bpl.n	1000ce5c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ce34:	211e      	movs	r1, #30
1000ce36:	2222      	movs	r2, #34	; 0x22
1000ce38:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ce3a:	7e1a      	ldrb	r2, [r3, #24]
1000ce3c:	3123      	adds	r1, #35	; 0x23
1000ce3e:	438a      	bics	r2, r1
1000ce40:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce42:	2321      	movs	r3, #33	; 0x21
1000ce44:	5ce3      	ldrb	r3, [r4, r3]
1000ce46:	071b      	lsls	r3, r3, #28
1000ce48:	d506      	bpl.n	1000ce58 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ce4a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce4c:	5ce3      	ldrb	r3, [r4, r3]
1000ce4e:	071b      	lsls	r3, r3, #28
1000ce50:	d502      	bpl.n	1000ce58 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ce52:	0020      	movs	r0, r4
1000ce54:	6923      	ldr	r3, [r4, #16]
1000ce56:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ce58:	6823      	ldr	r3, [r4, #0]
1000ce5a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ce5c:	07eb      	lsls	r3, r5, #31
1000ce5e:	d522      	bpl.n	1000cea6 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ce60:	6823      	ldr	r3, [r4, #0]
1000ce62:	7c1b      	ldrb	r3, [r3, #16]
1000ce64:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ce66:	6962      	ldr	r2, [r4, #20]
1000ce68:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ce6a:	6963      	ldr	r3, [r4, #20]
1000ce6c:	3301      	adds	r3, #1
1000ce6e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ce70:	8ba3      	ldrh	r3, [r4, #28]
1000ce72:	3b01      	subs	r3, #1
1000ce74:	b29b      	uxth	r3, r3
1000ce76:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ce78:	8ba3      	ldrh	r3, [r4, #28]
1000ce7a:	b29b      	uxth	r3, r3
1000ce7c:	2b00      	cmp	r3, #0
1000ce7e:	d112      	bne.n	1000cea6 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce80:	3321      	adds	r3, #33	; 0x21
1000ce82:	5ce3      	ldrb	r3, [r4, r3]
1000ce84:	075b      	lsls	r3, r3, #29
1000ce86:	d50e      	bpl.n	1000cea6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ce88:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce8a:	5ce3      	ldrb	r3, [r4, r3]
1000ce8c:	075b      	lsls	r3, r3, #29
1000ce8e:	d50a      	bpl.n	1000cea6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ce90:	2200      	movs	r2, #0
1000ce92:	2322      	movs	r3, #34	; 0x22
1000ce94:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ce96:	6822      	ldr	r2, [r4, #0]
1000ce98:	7e13      	ldrb	r3, [r2, #24]
1000ce9a:	2101      	movs	r1, #1
1000ce9c:	438b      	bics	r3, r1
1000ce9e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cea0:	68e3      	ldr	r3, [r4, #12]
1000cea2:	0020      	movs	r0, r4
1000cea4:	4798      	blx	r3
			}
		}
	}
}
1000cea6:	bd70      	pop	{r4, r5, r6, pc}
1000cea8:	10018e9c 	.word	0x10018e9c

1000ceac <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000ceac:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ceae:	4b21      	ldr	r3, [pc, #132]	; (1000cf34 <uart_tx0_isr_handler+0x88>)
1000ceb0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ceb2:	6823      	ldr	r3, [r4, #0]
1000ceb4:	791d      	ldrb	r5, [r3, #4]
1000ceb6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ceb8:	07ea      	lsls	r2, r5, #31
1000ceba:	d517      	bpl.n	1000ceec <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cebc:	69a2      	ldr	r2, [r4, #24]
1000cebe:	7811      	ldrb	r1, [r2, #0]
1000cec0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cec2:	3201      	adds	r2, #1
1000cec4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cec6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cec8:	8be3      	ldrh	r3, [r4, #30]
1000ceca:	3b01      	subs	r3, #1
1000cecc:	b29b      	uxth	r3, r3
1000cece:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ced0:	8be3      	ldrh	r3, [r4, #30]
1000ced2:	b29b      	uxth	r3, r3
1000ced4:	2b00      	cmp	r3, #0
1000ced6:	d109      	bne.n	1000ceec <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ced8:	6822      	ldr	r2, [r4, #0]
1000ceda:	7a13      	ldrb	r3, [r2, #8]
1000cedc:	2101      	movs	r1, #1
1000cede:	438b      	bics	r3, r1
1000cee0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cee2:	6822      	ldr	r2, [r4, #0]
1000cee4:	7a11      	ldrb	r1, [r2, #8]
1000cee6:	2310      	movs	r3, #16
1000cee8:	430b      	orrs	r3, r1
1000ceea:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ceec:	06eb      	lsls	r3, r5, #27
1000ceee:	d512      	bpl.n	1000cf16 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cef0:	2321      	movs	r3, #33	; 0x21
1000cef2:	5ce3      	ldrb	r3, [r4, r3]
1000cef4:	07db      	lsls	r3, r3, #31
1000cef6:	d50e      	bpl.n	1000cf16 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cef8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cefa:	5ce3      	ldrb	r3, [r4, r3]
1000cefc:	07db      	lsls	r3, r3, #31
1000cefe:	d50a      	bpl.n	1000cf16 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cf00:	2200      	movs	r2, #0
1000cf02:	2322      	movs	r3, #34	; 0x22
1000cf04:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cf06:	6822      	ldr	r2, [r4, #0]
1000cf08:	7a13      	ldrb	r3, [r2, #8]
1000cf0a:	2110      	movs	r1, #16
1000cf0c:	438b      	bics	r3, r1
1000cf0e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cf10:	0020      	movs	r0, r4
1000cf12:	6863      	ldr	r3, [r4, #4]
1000cf14:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cf16:	06ab      	lsls	r3, r5, #26
1000cf18:	d50a      	bpl.n	1000cf30 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cf1a:	2321      	movs	r3, #33	; 0x21
1000cf1c:	5ce3      	ldrb	r3, [r4, r3]
1000cf1e:	079b      	lsls	r3, r3, #30
1000cf20:	d506      	bpl.n	1000cf30 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cf22:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cf24:	5ce3      	ldrb	r3, [r4, r3]
1000cf26:	079b      	lsls	r3, r3, #30
1000cf28:	d502      	bpl.n	1000cf30 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cf2a:	68a3      	ldr	r3, [r4, #8]
1000cf2c:	0020      	movs	r0, r4
1000cf2e:	4798      	blx	r3
		}

	}
}
1000cf30:	bd70      	pop	{r4, r5, r6, pc}
1000cf32:	46c0      	nop			; (mov r8, r8)
1000cf34:	10018e9c 	.word	0x10018e9c

1000cf38 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cf38:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cf3a:	4b20      	ldr	r3, [pc, #128]	; (1000cfbc <uart_rx1_isr_handler+0x84>)
1000cf3c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cf3e:	6823      	ldr	r3, [r4, #0]
1000cf40:	7d1d      	ldrb	r5, [r3, #20]
1000cf42:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cf44:	066a      	lsls	r2, r5, #25
1000cf46:	d513      	bpl.n	1000cf70 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cf48:	211e      	movs	r1, #30
1000cf4a:	2222      	movs	r2, #34	; 0x22
1000cf4c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cf4e:	7e1a      	ldrb	r2, [r3, #24]
1000cf50:	3123      	adds	r1, #35	; 0x23
1000cf52:	438a      	bics	r2, r1
1000cf54:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cf56:	2321      	movs	r3, #33	; 0x21
1000cf58:	5ce3      	ldrb	r3, [r4, r3]
1000cf5a:	071b      	lsls	r3, r3, #28
1000cf5c:	d506      	bpl.n	1000cf6c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cf5e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cf60:	5ce3      	ldrb	r3, [r4, r3]
1000cf62:	071b      	lsls	r3, r3, #28
1000cf64:	d502      	bpl.n	1000cf6c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cf66:	0020      	movs	r0, r4
1000cf68:	6923      	ldr	r3, [r4, #16]
1000cf6a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cf6c:	6823      	ldr	r3, [r4, #0]
1000cf6e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cf70:	07eb      	lsls	r3, r5, #31
1000cf72:	d522      	bpl.n	1000cfba <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cf74:	6823      	ldr	r3, [r4, #0]
1000cf76:	7c1b      	ldrb	r3, [r3, #16]
1000cf78:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cf7a:	6962      	ldr	r2, [r4, #20]
1000cf7c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cf7e:	6963      	ldr	r3, [r4, #20]
1000cf80:	3301      	adds	r3, #1
1000cf82:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cf84:	8ba3      	ldrh	r3, [r4, #28]
1000cf86:	3b01      	subs	r3, #1
1000cf88:	b29b      	uxth	r3, r3
1000cf8a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cf8c:	8ba3      	ldrh	r3, [r4, #28]
1000cf8e:	b29b      	uxth	r3, r3
1000cf90:	2b00      	cmp	r3, #0
1000cf92:	d112      	bne.n	1000cfba <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf94:	3321      	adds	r3, #33	; 0x21
1000cf96:	5ce3      	ldrb	r3, [r4, r3]
1000cf98:	075b      	lsls	r3, r3, #29
1000cf9a:	d50e      	bpl.n	1000cfba <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cf9c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf9e:	5ce3      	ldrb	r3, [r4, r3]
1000cfa0:	075b      	lsls	r3, r3, #29
1000cfa2:	d50a      	bpl.n	1000cfba <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cfa4:	2200      	movs	r2, #0
1000cfa6:	2322      	movs	r3, #34	; 0x22
1000cfa8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cfaa:	6822      	ldr	r2, [r4, #0]
1000cfac:	7e13      	ldrb	r3, [r2, #24]
1000cfae:	2101      	movs	r1, #1
1000cfb0:	438b      	bics	r3, r1
1000cfb2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cfb4:	68e3      	ldr	r3, [r4, #12]
1000cfb6:	0020      	movs	r0, r4
1000cfb8:	4798      	blx	r3
			}
		}
	}
}
1000cfba:	bd70      	pop	{r4, r5, r6, pc}
1000cfbc:	10018e9c 	.word	0x10018e9c

1000cfc0 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000cfc0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cfc2:	4b21      	ldr	r3, [pc, #132]	; (1000d048 <uart_tx1_isr_handler+0x88>)
1000cfc4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cfc6:	6823      	ldr	r3, [r4, #0]
1000cfc8:	791d      	ldrb	r5, [r3, #4]
1000cfca:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cfcc:	07ea      	lsls	r2, r5, #31
1000cfce:	d517      	bpl.n	1000d000 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cfd0:	69a2      	ldr	r2, [r4, #24]
1000cfd2:	7811      	ldrb	r1, [r2, #0]
1000cfd4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cfd6:	3201      	adds	r2, #1
1000cfd8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cfda:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cfdc:	8be3      	ldrh	r3, [r4, #30]
1000cfde:	3b01      	subs	r3, #1
1000cfe0:	b29b      	uxth	r3, r3
1000cfe2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cfe4:	8be3      	ldrh	r3, [r4, #30]
1000cfe6:	b29b      	uxth	r3, r3
1000cfe8:	2b00      	cmp	r3, #0
1000cfea:	d109      	bne.n	1000d000 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cfec:	6822      	ldr	r2, [r4, #0]
1000cfee:	7a13      	ldrb	r3, [r2, #8]
1000cff0:	2101      	movs	r1, #1
1000cff2:	438b      	bics	r3, r1
1000cff4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cff6:	6822      	ldr	r2, [r4, #0]
1000cff8:	7a11      	ldrb	r1, [r2, #8]
1000cffa:	2310      	movs	r3, #16
1000cffc:	430b      	orrs	r3, r1
1000cffe:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d000:	06eb      	lsls	r3, r5, #27
1000d002:	d512      	bpl.n	1000d02a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d004:	2321      	movs	r3, #33	; 0x21
1000d006:	5ce3      	ldrb	r3, [r4, r3]
1000d008:	07db      	lsls	r3, r3, #31
1000d00a:	d50e      	bpl.n	1000d02a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d00c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d00e:	5ce3      	ldrb	r3, [r4, r3]
1000d010:	07db      	lsls	r3, r3, #31
1000d012:	d50a      	bpl.n	1000d02a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d014:	2200      	movs	r2, #0
1000d016:	2322      	movs	r3, #34	; 0x22
1000d018:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d01a:	6822      	ldr	r2, [r4, #0]
1000d01c:	7a13      	ldrb	r3, [r2, #8]
1000d01e:	2110      	movs	r1, #16
1000d020:	438b      	bics	r3, r1
1000d022:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d024:	0020      	movs	r0, r4
1000d026:	6863      	ldr	r3, [r4, #4]
1000d028:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d02a:	06ab      	lsls	r3, r5, #26
1000d02c:	d50a      	bpl.n	1000d044 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d02e:	2321      	movs	r3, #33	; 0x21
1000d030:	5ce3      	ldrb	r3, [r4, r3]
1000d032:	079b      	lsls	r3, r3, #30
1000d034:	d506      	bpl.n	1000d044 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d036:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d038:	5ce3      	ldrb	r3, [r4, r3]
1000d03a:	079b      	lsls	r3, r3, #30
1000d03c:	d502      	bpl.n	1000d044 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d03e:	68a3      	ldr	r3, [r4, #8]
1000d040:	0020      	movs	r0, r4
1000d042:	4798      	blx	r3
		}

	}
}
1000d044:	bd70      	pop	{r4, r5, r6, pc}
1000d046:	46c0      	nop			; (mov r8, r8)
1000d048:	10018e9c 	.word	0x10018e9c

1000d04c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d04c:	23e1      	movs	r3, #225	; 0xe1
1000d04e:	025b      	lsls	r3, r3, #9
1000d050:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d052:	2300      	movs	r3, #0
1000d054:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d056:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d058:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d05a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d05c:	3302      	adds	r3, #2
1000d05e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d060:	2203      	movs	r2, #3
1000d062:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d064:	3201      	adds	r2, #1
1000d066:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d068:	3201      	adds	r2, #1
1000d06a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d06c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d06e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d070:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d072:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d074:	4770      	bx	lr
1000d076:	46c0      	nop			; (mov r8, r8)

1000d078 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d07a:	464f      	mov	r7, r9
1000d07c:	4646      	mov	r6, r8
1000d07e:	b4c0      	push	{r6, r7}
1000d080:	0005      	movs	r5, r0
1000d082:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d084:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d086:	2300      	movs	r3, #0
1000d088:	6043      	str	r3, [r0, #4]
1000d08a:	6083      	str	r3, [r0, #8]
1000d08c:	60c3      	str	r3, [r0, #12]
1000d08e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d090:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d092:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d094:	2200      	movs	r2, #0
1000d096:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d098:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d09a:	3320      	adds	r3, #32
1000d09c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d09e:	3301      	adds	r3, #1
1000d0a0:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d0a2:	3301      	adds	r3, #1
1000d0a4:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d0a6:	4b55      	ldr	r3, [pc, #340]	; (1000d1fc <uart_init+0x184>)
1000d0a8:	4299      	cmp	r1, r3
1000d0aa:	d118      	bne.n	1000d0de <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d0ac:	2009      	movs	r0, #9
1000d0ae:	4c54      	ldr	r4, [pc, #336]	; (1000d200 <uart_init+0x188>)
1000d0b0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d0b2:	200a      	movs	r0, #10
1000d0b4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d0b6:	2009      	movs	r0, #9
1000d0b8:	4c52      	ldr	r4, [pc, #328]	; (1000d204 <uart_init+0x18c>)
1000d0ba:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d0bc:	200a      	movs	r0, #10
1000d0be:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d0c0:	4b51      	ldr	r3, [pc, #324]	; (1000d208 <uart_init+0x190>)
1000d0c2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d0c4:	4951      	ldr	r1, [pc, #324]	; (1000d20c <uart_init+0x194>)
1000d0c6:	2010      	movs	r0, #16
1000d0c8:	4c51      	ldr	r4, [pc, #324]	; (1000d210 <uart_init+0x198>)
1000d0ca:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d0cc:	4951      	ldr	r1, [pc, #324]	; (1000d214 <uart_init+0x19c>)
1000d0ce:	2011      	movs	r0, #17
1000d0d0:	47a0      	blx	r4
1000d0d2:	4b51      	ldr	r3, [pc, #324]	; (1000d218 <uart_init+0x1a0>)
1000d0d4:	2201      	movs	r2, #1
1000d0d6:	601a      	str	r2, [r3, #0]
1000d0d8:	3201      	adds	r2, #1
1000d0da:	601a      	str	r2, [r3, #0]
1000d0dc:	e01a      	b.n	1000d114 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d0de:	4b4f      	ldr	r3, [pc, #316]	; (1000d21c <uart_init+0x1a4>)
1000d0e0:	4299      	cmp	r1, r3
1000d0e2:	d117      	bne.n	1000d114 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d0e4:	200b      	movs	r0, #11
1000d0e6:	4c46      	ldr	r4, [pc, #280]	; (1000d200 <uart_init+0x188>)
1000d0e8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d0ea:	200c      	movs	r0, #12
1000d0ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d0ee:	200b      	movs	r0, #11
1000d0f0:	4c44      	ldr	r4, [pc, #272]	; (1000d204 <uart_init+0x18c>)
1000d0f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d0f4:	200c      	movs	r0, #12
1000d0f6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d0f8:	4b43      	ldr	r3, [pc, #268]	; (1000d208 <uart_init+0x190>)
1000d0fa:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d0fc:	4948      	ldr	r1, [pc, #288]	; (1000d220 <uart_init+0x1a8>)
1000d0fe:	2012      	movs	r0, #18
1000d100:	4c43      	ldr	r4, [pc, #268]	; (1000d210 <uart_init+0x198>)
1000d102:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d104:	4947      	ldr	r1, [pc, #284]	; (1000d224 <uart_init+0x1ac>)
1000d106:	2013      	movs	r0, #19
1000d108:	47a0      	blx	r4
1000d10a:	4b43      	ldr	r3, [pc, #268]	; (1000d218 <uart_init+0x1a0>)
1000d10c:	2204      	movs	r2, #4
1000d10e:	601a      	str	r2, [r3, #0]
1000d110:	3204      	adds	r2, #4
1000d112:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d114:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d116:	2204      	movs	r2, #4
1000d118:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d11a:	2b00      	cmp	r3, #0
1000d11c:	d152      	bne.n	1000d1c4 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d11e:	3302      	adds	r3, #2
1000d120:	4698      	mov	r8, r3
1000d122:	e04f      	b.n	1000d1c4 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d124:	8a31      	ldrh	r1, [r6, #16]
1000d126:	ce01      	ldmia	r6!, {r0}
1000d128:	b2c0      	uxtb	r0, r0
1000d12a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d12c:	3401      	adds	r4, #1
1000d12e:	b2e4      	uxtb	r4, r4
1000d130:	4544      	cmp	r4, r8
1000d132:	d3f7      	bcc.n	1000d124 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d134:	682b      	ldr	r3, [r5, #0]
1000d136:	7d1a      	ldrb	r2, [r3, #20]
1000d138:	07d2      	lsls	r2, r2, #31
1000d13a:	d504      	bpl.n	1000d146 <uart_init+0xce>
1000d13c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d13e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d140:	7d1a      	ldrb	r2, [r3, #20]
1000d142:	420a      	tst	r2, r1
1000d144:	d1fb      	bne.n	1000d13e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d146:	2100      	movs	r1, #0
1000d148:	2220      	movs	r2, #32
1000d14a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d14c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d14e:	1e59      	subs	r1, r3, #1
1000d150:	418b      	sbcs	r3, r1
1000d152:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d154:	793b      	ldrb	r3, [r7, #4]
1000d156:	797a      	ldrb	r2, [r7, #5]
1000d158:	4313      	orrs	r3, r2
1000d15a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d15c:	79ba      	ldrb	r2, [r7, #6]
1000d15e:	2a02      	cmp	r2, #2
1000d160:	d00d      	beq.n	1000d17e <uart_init+0x106>
1000d162:	b2d1      	uxtb	r1, r2
1000d164:	2902      	cmp	r1, #2
1000d166:	d802      	bhi.n	1000d16e <uart_init+0xf6>
1000d168:	2a01      	cmp	r2, #1
1000d16a:	d005      	beq.n	1000d178 <uart_init+0x100>
1000d16c:	e00f      	b.n	1000d18e <uart_init+0x116>
1000d16e:	2a03      	cmp	r2, #3
1000d170:	d008      	beq.n	1000d184 <uart_init+0x10c>
1000d172:	2a04      	cmp	r2, #4
1000d174:	d009      	beq.n	1000d18a <uart_init+0x112>
1000d176:	e00a      	b.n	1000d18e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d178:	2202      	movs	r2, #2
1000d17a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d17c:	e007      	b.n	1000d18e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d17e:	2206      	movs	r2, #6
1000d180:	4313      	orrs	r3, r2
			break;
1000d182:	e004      	b.n	1000d18e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d184:	220a      	movs	r2, #10
1000d186:	4313      	orrs	r3, r2
			break;
1000d188:	e001      	b.n	1000d18e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d18a:	220e      	movs	r2, #14
1000d18c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d18e:	2220      	movs	r2, #32
1000d190:	6829      	ldr	r1, [r5, #0]
1000d192:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d194:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d196:	4b24      	ldr	r3, [pc, #144]	; (1000d228 <uart_init+0x1b0>)
1000d198:	4798      	blx	r3
1000d19a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d19c:	0031      	movs	r1, r6
1000d19e:	4b23      	ldr	r3, [pc, #140]	; (1000d22c <uart_init+0x1b4>)
1000d1a0:	4798      	blx	r3
1000d1a2:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d1a4:	0400      	lsls	r0, r0, #16
1000d1a6:	0c00      	lsrs	r0, r0, #16
1000d1a8:	4370      	muls	r0, r6
1000d1aa:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d1ac:	0931      	lsrs	r1, r6, #4
1000d1ae:	4288      	cmp	r0, r1
1000d1b0:	d906      	bls.n	1000d1c0 <uart_init+0x148>
1000d1b2:	2300      	movs	r3, #0
		i++;
1000d1b4:	3301      	adds	r3, #1
1000d1b6:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d1b8:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d1ba:	4288      	cmp	r0, r1
1000d1bc:	d8fa      	bhi.n	1000d1b4 <uart_init+0x13c>
1000d1be:	e007      	b.n	1000d1d0 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d1c0:	2300      	movs	r3, #0
1000d1c2:	e005      	b.n	1000d1d0 <uart_init+0x158>
1000d1c4:	003e      	movs	r6, r7
1000d1c6:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d1c8:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d1ca:	4b19      	ldr	r3, [pc, #100]	; (1000d230 <uart_init+0x1b8>)
1000d1cc:	4699      	mov	r9, r3
1000d1ce:	e7a9      	b.n	1000d124 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d1d0:	2100      	movs	r1, #0
1000d1d2:	2028      	movs	r0, #40	; 0x28
1000d1d4:	682c      	ldr	r4, [r5, #0]
1000d1d6:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d1d8:	3301      	adds	r3, #1
1000d1da:	071b      	lsls	r3, r3, #28
1000d1dc:	0f5b      	lsrs	r3, r3, #29
1000d1de:	00d2      	lsls	r2, r2, #3
1000d1e0:	4313      	orrs	r3, r2
1000d1e2:	b29b      	uxth	r3, r3
1000d1e4:	682a      	ldr	r2, [r5, #0]
1000d1e6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d1e8:	682b      	ldr	r3, [r5, #0]
1000d1ea:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d1ec:	682b      	ldr	r3, [r5, #0]
1000d1ee:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d1f0:	2000      	movs	r0, #0
1000d1f2:	bc0c      	pop	{r2, r3}
1000d1f4:	4690      	mov	r8, r2
1000d1f6:	4699      	mov	r9, r3
1000d1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d1fa:	46c0      	nop			; (mov r8, r8)
1000d1fc:	40004000 	.word	0x40004000
1000d200:	1000c9ad 	.word	0x1000c9ad
1000d204:	1000c2e5 	.word	0x1000c2e5
1000d208:	10018e9c 	.word	0x10018e9c
1000d20c:	1000ce25 	.word	0x1000ce25
1000d210:	1000ce15 	.word	0x1000ce15
1000d214:	1000cead 	.word	0x1000cead
1000d218:	e000e100 	.word	0xe000e100
1000d21c:	40005000 	.word	0x40005000
1000d220:	1000cf39 	.word	0x1000cf39
1000d224:	1000cfc1 	.word	0x1000cfc1
1000d228:	1000c2d9 	.word	0x1000c2d9
1000d22c:	100127ed 	.word	0x100127ed
1000d230:	1000bf35 	.word	0x1000bf35

1000d234 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d234:	6802      	ldr	r2, [r0, #0]
1000d236:	2001      	movs	r0, #1
1000d238:	7913      	ldrb	r3, [r2, #4]
1000d23a:	4203      	tst	r3, r0
1000d23c:	d0fc      	beq.n	1000d238 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d23e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d240:	2000      	movs	r0, #0
1000d242:	4770      	bx	lr

1000d244 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d244:	6802      	ldr	r2, [r0, #0]
1000d246:	2001      	movs	r0, #1
1000d248:	7d13      	ldrb	r3, [r2, #20]
1000d24a:	4203      	tst	r3, r0
1000d24c:	d0fc      	beq.n	1000d248 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d24e:	7c13      	ldrb	r3, [r2, #16]
1000d250:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d252:	2000      	movs	r0, #0
1000d254:	4770      	bx	lr
1000d256:	46c0      	nop			; (mov r8, r8)

1000d258 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d258:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d25a:	2a00      	cmp	r2, #0
1000d25c:	d00d      	beq.n	1000d27a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d25e:	330b      	adds	r3, #11
1000d260:	5cc3      	ldrb	r3, [r0, r3]
1000d262:	b2db      	uxtb	r3, r3
1000d264:	2b05      	cmp	r3, #5
1000d266:	d008      	beq.n	1000d27a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d268:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d26a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d26c:	2205      	movs	r2, #5
1000d26e:	2322      	movs	r3, #34	; 0x22
1000d270:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d272:	6803      	ldr	r3, [r0, #0]
1000d274:	3a04      	subs	r2, #4
1000d276:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d278:	2300      	movs	r3, #0
}
1000d27a:	0018      	movs	r0, r3
1000d27c:	4770      	bx	lr
1000d27e:	46c0      	nop			; (mov r8, r8)

1000d280 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d280:	0093      	lsls	r3, r2, #2
1000d282:	18c3      	adds	r3, r0, r3
1000d284:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d286:	2120      	movs	r1, #32
1000d288:	2301      	movs	r3, #1
1000d28a:	4093      	lsls	r3, r2
1000d28c:	5c42      	ldrb	r2, [r0, r1]
1000d28e:	4313      	orrs	r3, r2
1000d290:	5443      	strb	r3, [r0, r1]
}
1000d292:	4770      	bx	lr

1000d294 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d294:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d296:	2221      	movs	r2, #33	; 0x21
1000d298:	2301      	movs	r3, #1
1000d29a:	408b      	lsls	r3, r1
1000d29c:	5c84      	ldrb	r4, [r0, r2]
1000d29e:	4323      	orrs	r3, r4
1000d2a0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d2a2:	2901      	cmp	r1, #1
1000d2a4:	d104      	bne.n	1000d2b0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d2a6:	6802      	ldr	r2, [r0, #0]
1000d2a8:	7a11      	ldrb	r1, [r2, #8]
1000d2aa:	2320      	movs	r3, #32
1000d2ac:	430b      	orrs	r3, r1
1000d2ae:	7213      	strb	r3, [r2, #8]
	}
}
1000d2b0:	bd10      	pop	{r4, pc}
1000d2b2:	46c0      	nop			; (mov r8, r8)

1000d2b4 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d2b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d2b6:	2201      	movs	r2, #1
1000d2b8:	408a      	lsls	r2, r1
1000d2ba:	2421      	movs	r4, #33	; 0x21
1000d2bc:	5d03      	ldrb	r3, [r0, r4]
1000d2be:	4393      	bics	r3, r2
1000d2c0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d2c2:	2901      	cmp	r1, #1
1000d2c4:	d104      	bne.n	1000d2d0 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d2c6:	6802      	ldr	r2, [r0, #0]
1000d2c8:	7a13      	ldrb	r3, [r2, #8]
1000d2ca:	311f      	adds	r1, #31
1000d2cc:	438b      	bics	r3, r1
1000d2ce:	7213      	strb	r3, [r2, #8]
	}

}
1000d2d0:	bd10      	pop	{r4, pc}
1000d2d2:	46c0      	nop			; (mov r8, r8)

1000d2d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2d6:	4647      	mov	r7, r8
1000d2d8:	b480      	push	{r7}
1000d2da:	000c      	movs	r4, r1
1000d2dc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d2de:	2800      	cmp	r0, #0
1000d2e0:	d10d      	bne.n	1000d2fe <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d2e2:	2a00      	cmp	r2, #0
1000d2e4:	dd0e      	ble.n	1000d304 <_read+0x30>
1000d2e6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d2e8:	4e08      	ldr	r6, [pc, #32]	; (1000d30c <_read+0x38>)
1000d2ea:	4d09      	ldr	r5, [pc, #36]	; (1000d310 <_read+0x3c>)
1000d2ec:	6830      	ldr	r0, [r6, #0]
1000d2ee:	0021      	movs	r1, r4
1000d2f0:	682b      	ldr	r3, [r5, #0]
1000d2f2:	4798      	blx	r3
		ptr++;
1000d2f4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d2f6:	42a7      	cmp	r7, r4
1000d2f8:	d1f8      	bne.n	1000d2ec <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d2fa:	4640      	mov	r0, r8
1000d2fc:	e003      	b.n	1000d306 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d2fe:	2001      	movs	r0, #1
1000d300:	4240      	negs	r0, r0
1000d302:	e000      	b.n	1000d306 <_read+0x32>
	}

	for (; len > 0; --len) {
1000d304:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d306:	bc04      	pop	{r2}
1000d308:	4690      	mov	r8, r2
1000d30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d30c:	10018eac 	.word	0x10018eac
1000d310:	10018ea4 	.word	0x10018ea4

1000d314 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d314:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d316:	4647      	mov	r7, r8
1000d318:	b480      	push	{r7}
1000d31a:	000e      	movs	r6, r1
1000d31c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d31e:	3801      	subs	r0, #1
1000d320:	2802      	cmp	r0, #2
1000d322:	d811      	bhi.n	1000d348 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d324:	2a00      	cmp	r2, #0
1000d326:	d012      	beq.n	1000d34e <_write+0x3a>
1000d328:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d32a:	4b0c      	ldr	r3, [pc, #48]	; (1000d35c <_write+0x48>)
1000d32c:	4698      	mov	r8, r3
1000d32e:	4f0c      	ldr	r7, [pc, #48]	; (1000d360 <_write+0x4c>)
1000d330:	4643      	mov	r3, r8
1000d332:	6818      	ldr	r0, [r3, #0]
1000d334:	5d31      	ldrb	r1, [r6, r4]
1000d336:	683b      	ldr	r3, [r7, #0]
1000d338:	4798      	blx	r3
1000d33a:	2800      	cmp	r0, #0
1000d33c:	db09      	blt.n	1000d352 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d33e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d340:	42a5      	cmp	r5, r4
1000d342:	d1f5      	bne.n	1000d330 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d344:	0020      	movs	r0, r4
1000d346:	e006      	b.n	1000d356 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d348:	2001      	movs	r0, #1
1000d34a:	4240      	negs	r0, r0
1000d34c:	e003      	b.n	1000d356 <_write+0x42>
	}

	for (; len != 0; --len) {
1000d34e:	2000      	movs	r0, #0
1000d350:	e001      	b.n	1000d356 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d352:	2001      	movs	r0, #1
1000d354:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d356:	bc04      	pop	{r2}
1000d358:	4690      	mov	r8, r2
1000d35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d35c:	10018eac 	.word	0x10018eac
1000d360:	10018ea8 	.word	0x10018ea8

1000d364 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d364:	2000      	movs	r0, #0
1000d366:	4770      	bx	lr

1000d368 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d368:	2000      	movs	r0, #0
1000d36a:	4770      	bx	lr

1000d36c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d36c:	78c0      	ldrb	r0, [r0, #3]
1000d36e:	2800      	cmp	r0, #0
1000d370:	d000      	beq.n	1000d374 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d372:	20e2      	movs	r0, #226	; 0xe2
}
1000d374:	4770      	bx	lr
1000d376:	46c0      	nop			; (mov r8, r8)

1000d378 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d378:	2000      	movs	r0, #0
1000d37a:	4770      	bx	lr

1000d37c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d37c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d37e:	7800      	ldrb	r0, [r0, #0]
1000d380:	2800      	cmp	r0, #0
1000d382:	d006      	beq.n	1000d392 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d384:	4803      	ldr	r0, [pc, #12]	; (1000d394 <ble_scan_report_handler+0x18>)
1000d386:	4b04      	ldr	r3, [pc, #16]	; (1000d398 <ble_scan_report_handler+0x1c>)
1000d388:	4798      	blx	r3
1000d38a:	4804      	ldr	r0, [pc, #16]	; (1000d39c <ble_scan_report_handler+0x20>)
1000d38c:	4b04      	ldr	r3, [pc, #16]	; (1000d3a0 <ble_scan_report_handler+0x24>)
1000d38e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d390:	20e2      	movs	r0, #226	; 0xe2
}
1000d392:	bd10      	pop	{r4, pc}
1000d394:	10015d04 	.word	0x10015d04
1000d398:	10014b59 	.word	0x10014b59
1000d39c:	10016728 	.word	0x10016728
1000d3a0:	10014a39 	.word	0x10014a39

1000d3a4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d3a4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d3a6:	7800      	ldrb	r0, [r0, #0]
1000d3a8:	2800      	cmp	r0, #0
1000d3aa:	d006      	beq.n	1000d3ba <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d3ac:	4803      	ldr	r0, [pc, #12]	; (1000d3bc <ble_adv_report_handler+0x18>)
1000d3ae:	4b04      	ldr	r3, [pc, #16]	; (1000d3c0 <ble_adv_report_handler+0x1c>)
1000d3b0:	4798      	blx	r3
1000d3b2:	4804      	ldr	r0, [pc, #16]	; (1000d3c4 <ble_adv_report_handler+0x20>)
1000d3b4:	4b04      	ldr	r3, [pc, #16]	; (1000d3c8 <ble_adv_report_handler+0x24>)
1000d3b6:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d3b8:	20e2      	movs	r0, #226	; 0xe2
}
1000d3ba:	bd10      	pop	{r4, pc}
1000d3bc:	10015d04 	.word	0x10015d04
1000d3c0:	10014b59 	.word	0x10014b59
1000d3c4:	1001673c 	.word	0x1001673c
1000d3c8:	10014a39 	.word	0x10014a39

1000d3cc <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d3cc:	b510      	push	{r4, lr}
1000d3ce:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d3d0:	78c0      	ldrb	r0, [r0, #3]
1000d3d2:	2800      	cmp	r0, #0
1000d3d4:	d008      	beq.n	1000d3e8 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d3d6:	4805      	ldr	r0, [pc, #20]	; (1000d3ec <ble_mtu_changed_cmd_complete_handler+0x20>)
1000d3d8:	4b05      	ldr	r3, [pc, #20]	; (1000d3f0 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000d3da:	4798      	blx	r3
1000d3dc:	78a2      	ldrb	r2, [r4, #2]
1000d3de:	8821      	ldrh	r1, [r4, #0]
1000d3e0:	4804      	ldr	r0, [pc, #16]	; (1000d3f4 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000d3e2:	4b05      	ldr	r3, [pc, #20]	; (1000d3f8 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000d3e4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d3e6:	20e2      	movs	r0, #226	; 0xe2
}
1000d3e8:	bd10      	pop	{r4, pc}
1000d3ea:	46c0      	nop			; (mov r8, r8)
1000d3ec:	10015d04 	.word	0x10015d04
1000d3f0:	10014b59 	.word	0x10014b59
1000d3f4:	10016750 	.word	0x10016750
1000d3f8:	10014a39 	.word	0x10014a39

1000d3fc <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d3fe:	0004      	movs	r4, r0
1000d400:	4b19      	ldr	r3, [pc, #100]	; (1000d468 <ble_disconnected_state_handler+0x6c>)
1000d402:	229b      	movs	r2, #155	; 0x9b
1000d404:	0092      	lsls	r2, r2, #2
1000d406:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d408:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d40a:	2600      	movs	r6, #0
1000d40c:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d40e:	001a      	movs	r2, r3
1000d410:	3a56      	subs	r2, #86	; 0x56
1000d412:	8811      	ldrh	r1, [r2, #0]
1000d414:	8822      	ldrh	r2, [r4, #0]
1000d416:	4291      	cmp	r1, r2
1000d418:	d119      	bne.n	1000d44e <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d41a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d41c:	2a05      	cmp	r2, #5
1000d41e:	d001      	beq.n	1000d424 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d420:	2a08      	cmp	r2, #8
1000d422:	d101      	bne.n	1000d428 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d424:	7007      	strb	r7, [r0, #0]
1000d426:	e012      	b.n	1000d44e <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d428:	2a07      	cmp	r2, #7
1000d42a:	d80f      	bhi.n	1000d44c <ble_disconnected_state_handler+0x50>
1000d42c:	0092      	lsls	r2, r2, #2
1000d42e:	490f      	ldr	r1, [pc, #60]	; (1000d46c <ble_disconnected_state_handler+0x70>)
1000d430:	588a      	ldr	r2, [r1, r2]
1000d432:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d434:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000d436:	4a0e      	ldr	r2, [pc, #56]	; (1000d470 <ble_disconnected_state_handler+0x74>)
1000d438:	7812      	ldrb	r2, [r2, #0]
1000d43a:	2a00      	cmp	r2, #0
1000d43c:	d007      	beq.n	1000d44e <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000d43e:	4a0c      	ldr	r2, [pc, #48]	; (1000d470 <ble_disconnected_state_handler+0x74>)
1000d440:	7812      	ldrb	r2, [r2, #0]
1000d442:	3a01      	subs	r2, #1
1000d444:	b2d2      	uxtb	r2, r2
1000d446:	490a      	ldr	r1, [pc, #40]	; (1000d470 <ble_disconnected_state_handler+0x74>)
1000d448:	700a      	strb	r2, [r1, #0]
1000d44a:	e000      	b.n	1000d44e <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d44c:	7006      	strb	r6, [r0, #0]
1000d44e:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d450:	42ab      	cmp	r3, r5
1000d452:	d1db      	bne.n	1000d40c <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d454:	4807      	ldr	r0, [pc, #28]	; (1000d474 <ble_disconnected_state_handler+0x78>)
1000d456:	4b08      	ldr	r3, [pc, #32]	; (1000d478 <ble_disconnected_state_handler+0x7c>)
1000d458:	4798      	blx	r3
1000d45a:	8822      	ldrh	r2, [r4, #0]
1000d45c:	78a1      	ldrb	r1, [r4, #2]
1000d45e:	4807      	ldr	r0, [pc, #28]	; (1000d47c <ble_disconnected_state_handler+0x80>)
1000d460:	4b07      	ldr	r3, [pc, #28]	; (1000d480 <ble_disconnected_state_handler+0x84>)
1000d462:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d464:	2000      	movs	r0, #0
1000d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d468:	10018f26 	.word	0x10018f26
1000d46c:	100165c4 	.word	0x100165c4
1000d470:	10019134 	.word	0x10019134
1000d474:	10015d04 	.word	0x10015d04
1000d478:	10014b59 	.word	0x10014b59
1000d47c:	10016788 	.word	0x10016788
1000d480:	10014a39 	.word	0x10014a39

1000d484 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d486:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d488:	8801      	ldrh	r1, [r0, #0]
1000d48a:	4b28      	ldr	r3, [pc, #160]	; (1000d52c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d48c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d48e:	891a      	ldrh	r2, [r3, #8]
1000d490:	428a      	cmp	r2, r1
1000d492:	d104      	bne.n	1000d49e <ble_encryption_status_change_handler+0x1a>
1000d494:	001a      	movs	r2, r3
1000d496:	325e      	adds	r2, #94	; 0x5e
1000d498:	7812      	ldrb	r2, [r2, #0]
1000d49a:	2a06      	cmp	r2, #6
1000d49c:	d02e      	beq.n	1000d4fc <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d49e:	3401      	adds	r4, #1
1000d4a0:	b2e4      	uxtb	r4, r4
1000d4a2:	337c      	adds	r3, #124	; 0x7c
1000d4a4:	2c05      	cmp	r4, #5
1000d4a6:	d1f2      	bne.n	1000d48e <ble_encryption_status_change_handler+0xa>
1000d4a8:	e039      	b.n	1000d51e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d4aa:	4920      	ldr	r1, [pc, #128]	; (1000d52c <ble_encryption_status_change_handler+0xa8>)
1000d4ac:	0163      	lsls	r3, r4, #5
1000d4ae:	1b1a      	subs	r2, r3, r4
1000d4b0:	0092      	lsls	r2, r2, #2
1000d4b2:	188a      	adds	r2, r1, r2
1000d4b4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d4b6:	0014      	movs	r4, r2
1000d4b8:	345e      	adds	r4, #94	; 0x5e
1000d4ba:	2307      	movs	r3, #7
1000d4bc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d4be:	481c      	ldr	r0, [pc, #112]	; (1000d530 <ble_encryption_status_change_handler+0xac>)
1000d4c0:	4b1c      	ldr	r3, [pc, #112]	; (1000d534 <ble_encryption_status_change_handler+0xb0>)
1000d4c2:	4798      	blx	r3
1000d4c4:	481c      	ldr	r0, [pc, #112]	; (1000d538 <ble_encryption_status_change_handler+0xb4>)
1000d4c6:	4b1d      	ldr	r3, [pc, #116]	; (1000d53c <ble_encryption_status_change_handler+0xb8>)
1000d4c8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d4ca:	25e2      	movs	r5, #226	; 0xe2
1000d4cc:	e02b      	b.n	1000d526 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d4ce:	4818      	ldr	r0, [pc, #96]	; (1000d530 <ble_encryption_status_change_handler+0xac>)
1000d4d0:	4b18      	ldr	r3, [pc, #96]	; (1000d534 <ble_encryption_status_change_handler+0xb0>)
1000d4d2:	4798      	blx	r3
1000d4d4:	481a      	ldr	r0, [pc, #104]	; (1000d540 <ble_encryption_status_change_handler+0xbc>)
1000d4d6:	4b19      	ldr	r3, [pc, #100]	; (1000d53c <ble_encryption_status_change_handler+0xb8>)
1000d4d8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d4da:	4914      	ldr	r1, [pc, #80]	; (1000d52c <ble_encryption_status_change_handler+0xa8>)
1000d4dc:	0163      	lsls	r3, r4, #5
1000d4de:	1b1a      	subs	r2, r3, r4
1000d4e0:	0092      	lsls	r2, r2, #2
1000d4e2:	188a      	adds	r2, r1, r2
1000d4e4:	0010      	movs	r0, r2
1000d4e6:	305e      	adds	r0, #94	; 0x5e
1000d4e8:	2708      	movs	r7, #8
1000d4ea:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d4ec:	78f0      	ldrb	r0, [r6, #3]
1000d4ee:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d4f0:	78b2      	ldrb	r2, [r6, #2]
1000d4f2:	1b1c      	subs	r4, r3, r4
1000d4f4:	00a4      	lsls	r4, r4, #2
1000d4f6:	190c      	adds	r4, r1, r4
1000d4f8:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d4fa:	e014      	b.n	1000d526 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d4fc:	78b5      	ldrb	r5, [r6, #2]
1000d4fe:	2d00      	cmp	r5, #0
1000d500:	d0e5      	beq.n	1000d4ce <ble_encryption_status_change_handler+0x4a>
1000d502:	e7d2      	b.n	1000d4aa <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d504:	4e0a      	ldr	r6, [pc, #40]	; (1000d530 <ble_encryption_status_change_handler+0xac>)
1000d506:	0030      	movs	r0, r6
1000d508:	4d0a      	ldr	r5, [pc, #40]	; (1000d534 <ble_encryption_status_change_handler+0xb0>)
1000d50a:	47a8      	blx	r5
1000d50c:	480c      	ldr	r0, [pc, #48]	; (1000d540 <ble_encryption_status_change_handler+0xbc>)
1000d50e:	4c0b      	ldr	r4, [pc, #44]	; (1000d53c <ble_encryption_status_change_handler+0xb8>)
1000d510:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d512:	0030      	movs	r0, r6
1000d514:	47a8      	blx	r5
1000d516:	480b      	ldr	r0, [pc, #44]	; (1000d544 <ble_encryption_status_change_handler+0xc0>)
1000d518:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d51a:	25e2      	movs	r5, #226	; 0xe2
1000d51c:	e003      	b.n	1000d526 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d51e:	78b5      	ldrb	r5, [r6, #2]
1000d520:	2d00      	cmp	r5, #0
1000d522:	d1c2      	bne.n	1000d4aa <ble_encryption_status_change_handler+0x26>
1000d524:	e7ee      	b.n	1000d504 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d526:	0028      	movs	r0, r5
1000d528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d52a:	46c0      	nop			; (mov r8, r8)
1000d52c:	10018ec8 	.word	0x10018ec8
1000d530:	10015d04 	.word	0x10015d04
1000d534:	10014b59 	.word	0x10014b59
1000d538:	100167b8 	.word	0x100167b8
1000d53c:	10014a39 	.word	0x10014a39
1000d540:	100167cc 	.word	0x100167cc
1000d544:	100167f0 	.word	0x100167f0

1000d548 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d548:	b510      	push	{r4, lr}
1000d54a:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d54c:	4b15      	ldr	r3, [pc, #84]	; (1000d5a4 <ble_scan_info_handler+0x5c>)
1000d54e:	781b      	ldrb	r3, [r3, #0]
1000d550:	b2db      	uxtb	r3, r3
1000d552:	2b13      	cmp	r3, #19
1000d554:	d812      	bhi.n	1000d57c <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d556:	4c13      	ldr	r4, [pc, #76]	; (1000d5a4 <ble_scan_info_handler+0x5c>)
1000d558:	7823      	ldrb	r3, [r4, #0]
1000d55a:	b2db      	uxtb	r3, r3
1000d55c:	0098      	lsls	r0, r3, #2
1000d55e:	18c0      	adds	r0, r0, r3
1000d560:	00c0      	lsls	r0, r0, #3
1000d562:	18c3      	adds	r3, r0, r3
1000d564:	4810      	ldr	r0, [pc, #64]	; (1000d5a8 <ble_scan_info_handler+0x60>)
1000d566:	1818      	adds	r0, r3, r0
1000d568:	2229      	movs	r2, #41	; 0x29
1000d56a:	4b10      	ldr	r3, [pc, #64]	; (1000d5ac <ble_scan_info_handler+0x64>)
1000d56c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d56e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d570:	7823      	ldrb	r3, [r4, #0]
1000d572:	3301      	adds	r3, #1
1000d574:	b2db      	uxtb	r3, r3
1000d576:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000d578:	2300      	movs	r3, #0
1000d57a:	e011      	b.n	1000d5a0 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d57c:	480c      	ldr	r0, [pc, #48]	; (1000d5b0 <ble_scan_info_handler+0x68>)
1000d57e:	4b0d      	ldr	r3, [pc, #52]	; (1000d5b4 <ble_scan_info_handler+0x6c>)
1000d580:	4798      	blx	r3
1000d582:	480d      	ldr	r0, [pc, #52]	; (1000d5b8 <ble_scan_info_handler+0x70>)
1000d584:	4b0d      	ldr	r3, [pc, #52]	; (1000d5bc <ble_scan_info_handler+0x74>)
1000d586:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d588:	4b0d      	ldr	r3, [pc, #52]	; (1000d5c0 <ble_scan_info_handler+0x78>)
1000d58a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d58c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d58e:	2800      	cmp	r0, #0
1000d590:	d006      	beq.n	1000d5a0 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000d592:	4807      	ldr	r0, [pc, #28]	; (1000d5b0 <ble_scan_info_handler+0x68>)
1000d594:	4b07      	ldr	r3, [pc, #28]	; (1000d5b4 <ble_scan_info_handler+0x6c>)
1000d596:	4798      	blx	r3
1000d598:	480a      	ldr	r0, [pc, #40]	; (1000d5c4 <ble_scan_info_handler+0x7c>)
1000d59a:	4b08      	ldr	r3, [pc, #32]	; (1000d5bc <ble_scan_info_handler+0x74>)
1000d59c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d59e:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d5a0:	0018      	movs	r0, r3
1000d5a2:	bd10      	pop	{r4, pc}
1000d5a4:	10017a2c 	.word	0x10017a2c
1000d5a8:	100191ac 	.word	0x100191ac
1000d5ac:	100148df 	.word	0x100148df
1000d5b0:	10015d04 	.word	0x10015d04
1000d5b4:	10014b59 	.word	0x10014b59
1000d5b8:	10016818 	.word	0x10016818
1000d5bc:	10014a39 	.word	0x10014a39
1000d5c0:	10010101 	.word	0x10010101
1000d5c4:	10016850 	.word	0x10016850

1000d5c8 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d5ca:	464f      	mov	r7, r9
1000d5cc:	4646      	mov	r6, r8
1000d5ce:	b4c0      	push	{r6, r7}
1000d5d0:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d5d2:	8841      	ldrh	r1, [r0, #2]
1000d5d4:	4b3a      	ldr	r3, [pc, #232]	; (1000d6c0 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5d6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d5d8:	891a      	ldrh	r2, [r3, #8]
1000d5da:	428a      	cmp	r2, r1
1000d5dc:	d104      	bne.n	1000d5e8 <ble_pair_done_handler+0x20>
1000d5de:	001a      	movs	r2, r3
1000d5e0:	325e      	adds	r2, #94	; 0x5e
1000d5e2:	7812      	ldrb	r2, [r2, #0]
1000d5e4:	2a03      	cmp	r2, #3
1000d5e6:	d062      	beq.n	1000d6ae <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5e8:	3401      	adds	r4, #1
1000d5ea:	b2e4      	uxtb	r4, r4
1000d5ec:	337c      	adds	r3, #124	; 0x7c
1000d5ee:	2c05      	cmp	r4, #5
1000d5f0:	d1f2      	bne.n	1000d5d8 <ble_pair_done_handler+0x10>
1000d5f2:	e02b      	b.n	1000d64c <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d5f4:	0163      	lsls	r3, r4, #5
1000d5f6:	1b1c      	subs	r4, r3, r4
1000d5f8:	00a4      	lsls	r4, r4, #2
1000d5fa:	4b31      	ldr	r3, [pc, #196]	; (1000d6c0 <ble_pair_done_handler+0xf8>)
1000d5fc:	191c      	adds	r4, r3, r4
1000d5fe:	345e      	adds	r4, #94	; 0x5e
1000d600:	7823      	ldrb	r3, [r4, #0]
1000d602:	2b01      	cmp	r3, #1
1000d604:	d913      	bls.n	1000d62e <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000d606:	482f      	ldr	r0, [pc, #188]	; (1000d6c4 <ble_pair_done_handler+0xfc>)
1000d608:	4b2f      	ldr	r3, [pc, #188]	; (1000d6c8 <ble_pair_done_handler+0x100>)
1000d60a:	4798      	blx	r3
1000d60c:	482f      	ldr	r0, [pc, #188]	; (1000d6cc <ble_pair_done_handler+0x104>)
1000d60e:	4b30      	ldr	r3, [pc, #192]	; (1000d6d0 <ble_pair_done_handler+0x108>)
1000d610:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d612:	8868      	ldrh	r0, [r5, #2]
1000d614:	2113      	movs	r1, #19
1000d616:	4b2f      	ldr	r3, [pc, #188]	; (1000d6d4 <ble_pair_done_handler+0x10c>)
1000d618:	4798      	blx	r3
1000d61a:	1e06      	subs	r6, r0, #0
1000d61c:	d04b      	beq.n	1000d6b6 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000d61e:	4829      	ldr	r0, [pc, #164]	; (1000d6c4 <ble_pair_done_handler+0xfc>)
1000d620:	4b29      	ldr	r3, [pc, #164]	; (1000d6c8 <ble_pair_done_handler+0x100>)
1000d622:	4798      	blx	r3
1000d624:	482c      	ldr	r0, [pc, #176]	; (1000d6d8 <ble_pair_done_handler+0x110>)
1000d626:	4b2a      	ldr	r3, [pc, #168]	; (1000d6d0 <ble_pair_done_handler+0x108>)
1000d628:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d62a:	26e2      	movs	r6, #226	; 0xe2
1000d62c:	e043      	b.n	1000d6b6 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d62e:	2600      	movs	r6, #0
1000d630:	e041      	b.n	1000d6b6 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d632:	4e24      	ldr	r6, [pc, #144]	; (1000d6c4 <ble_pair_done_handler+0xfc>)
1000d634:	0030      	movs	r0, r6
1000d636:	4d24      	ldr	r5, [pc, #144]	; (1000d6c8 <ble_pair_done_handler+0x100>)
1000d638:	47a8      	blx	r5
1000d63a:	4828      	ldr	r0, [pc, #160]	; (1000d6dc <ble_pair_done_handler+0x114>)
1000d63c:	4c24      	ldr	r4, [pc, #144]	; (1000d6d0 <ble_pair_done_handler+0x108>)
1000d63e:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d640:	0030      	movs	r0, r6
1000d642:	47a8      	blx	r5
1000d644:	4826      	ldr	r0, [pc, #152]	; (1000d6e0 <ble_pair_done_handler+0x118>)
1000d646:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d648:	26e2      	movs	r6, #226	; 0xe2
1000d64a:	e034      	b.n	1000d6b6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d64c:	792b      	ldrb	r3, [r5, #4]
1000d64e:	2b00      	cmp	r3, #0
1000d650:	d1d0      	bne.n	1000d5f4 <ble_pair_done_handler+0x2c>
1000d652:	e7ee      	b.n	1000d632 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d654:	481b      	ldr	r0, [pc, #108]	; (1000d6c4 <ble_pair_done_handler+0xfc>)
1000d656:	4b1c      	ldr	r3, [pc, #112]	; (1000d6c8 <ble_pair_done_handler+0x100>)
1000d658:	4798      	blx	r3
1000d65a:	4820      	ldr	r0, [pc, #128]	; (1000d6dc <ble_pair_done_handler+0x114>)
1000d65c:	4b1c      	ldr	r3, [pc, #112]	; (1000d6d0 <ble_pair_done_handler+0x108>)
1000d65e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d660:	782a      	ldrb	r2, [r5, #0]
1000d662:	4b17      	ldr	r3, [pc, #92]	; (1000d6c0 <ble_pair_done_handler+0xf8>)
1000d664:	4699      	mov	r9, r3
1000d666:	0167      	lsls	r7, r4, #5
1000d668:	1b3b      	subs	r3, r7, r4
1000d66a:	009b      	lsls	r3, r3, #2
1000d66c:	444b      	add	r3, r9
1000d66e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d670:	792a      	ldrb	r2, [r5, #4]
1000d672:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d674:	335e      	adds	r3, #94	; 0x5e
1000d676:	2205      	movs	r2, #5
1000d678:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d67a:	1b38      	subs	r0, r7, r4
1000d67c:	0080      	lsls	r0, r0, #2
1000d67e:	4448      	add	r0, r9
1000d680:	3036      	adds	r0, #54	; 0x36
1000d682:	0029      	movs	r1, r5
1000d684:	3122      	adds	r1, #34	; 0x22
1000d686:	320b      	adds	r2, #11
1000d688:	4b16      	ldr	r3, [pc, #88]	; (1000d6e4 <ble_pair_done_handler+0x11c>)
1000d68a:	4698      	mov	r8, r3
1000d68c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d68e:	1b38      	subs	r0, r7, r4
1000d690:	0080      	lsls	r0, r0, #2
1000d692:	4448      	add	r0, r9
1000d694:	3046      	adds	r0, #70	; 0x46
1000d696:	0029      	movs	r1, r5
1000d698:	3132      	adds	r1, #50	; 0x32
1000d69a:	2217      	movs	r2, #23
1000d69c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d69e:	1b38      	subs	r0, r7, r4
1000d6a0:	0080      	lsls	r0, r0, #2
1000d6a2:	4448      	add	r0, r9
1000d6a4:	301a      	adds	r0, #26
1000d6a6:	1da9      	adds	r1, r5, #6
1000d6a8:	221c      	movs	r2, #28
1000d6aa:	47c0      	blx	r8
1000d6ac:	e003      	b.n	1000d6b6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d6ae:	792e      	ldrb	r6, [r5, #4]
1000d6b0:	2e00      	cmp	r6, #0
1000d6b2:	d0cf      	beq.n	1000d654 <ble_pair_done_handler+0x8c>
1000d6b4:	e79e      	b.n	1000d5f4 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d6b6:	0030      	movs	r0, r6
1000d6b8:	bc0c      	pop	{r2, r3}
1000d6ba:	4690      	mov	r8, r2
1000d6bc:	4699      	mov	r9, r3
1000d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6c0:	10018ec8 	.word	0x10018ec8
1000d6c4:	10015d04 	.word	0x10015d04
1000d6c8:	10014b59 	.word	0x10014b59
1000d6cc:	10016868 	.word	0x10016868
1000d6d0:	10014a39 	.word	0x10014a39
1000d6d4:	10010121 	.word	0x10010121
1000d6d8:	10016888 	.word	0x10016888
1000d6dc:	100168a4 	.word	0x100168a4
1000d6e0:	100168d0 	.word	0x100168d0
1000d6e4:	100148df 	.word	0x100148df

1000d6e8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d6e8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d6ea:	8800      	ldrh	r0, [r0, #0]
1000d6ec:	2378      	movs	r3, #120	; 0x78
1000d6ee:	2201      	movs	r2, #1
1000d6f0:	2101      	movs	r1, #1
1000d6f2:	4c02      	ldr	r4, [pc, #8]	; (1000d6fc <ble_conn_param_update_req+0x14>)
1000d6f4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d6f6:	2000      	movs	r0, #0
1000d6f8:	bd10      	pop	{r4, pc}
1000d6fa:	46c0      	nop			; (mov r8, r8)
1000d6fc:	10010141 	.word	0x10010141

1000d700 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d700:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d702:	4657      	mov	r7, sl
1000d704:	464e      	mov	r6, r9
1000d706:	4645      	mov	r5, r8
1000d708:	b4e0      	push	{r5, r6, r7}
1000d70a:	b084      	sub	sp, #16
1000d70c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d70e:	2209      	movs	r2, #9
1000d710:	2100      	movs	r1, #0
1000d712:	a801      	add	r0, sp, #4
1000d714:	4b6a      	ldr	r3, [pc, #424]	; (1000d8c0 <ble_slave_security_request_handler+0x1c0>)
1000d716:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d718:	8825      	ldrh	r5, [r4, #0]
1000d71a:	496a      	ldr	r1, [pc, #424]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d71c:	000a      	movs	r2, r1
1000d71e:	2300      	movs	r3, #0
1000d720:	8910      	ldrh	r0, [r2, #8]
1000d722:	42a8      	cmp	r0, r5
1000d724:	d116      	bne.n	1000d754 <ble_slave_security_request_handler+0x54>
1000d726:	0010      	movs	r0, r2
1000d728:	305e      	adds	r0, #94	; 0x5e
1000d72a:	7800      	ldrb	r0, [r0, #0]
1000d72c:	2802      	cmp	r0, #2
1000d72e:	d111      	bne.n	1000d754 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d730:	4864      	ldr	r0, [pc, #400]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d732:	015a      	lsls	r2, r3, #5
1000d734:	1ad6      	subs	r6, r2, r3
1000d736:	00b6      	lsls	r6, r6, #2
1000d738:	1986      	adds	r6, r0, r6
1000d73a:	365e      	adds	r6, #94	; 0x5e
1000d73c:	2206      	movs	r2, #6
1000d73e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d740:	32f9      	adds	r2, #249	; 0xf9
1000d742:	4013      	ands	r3, r2
1000d744:	015a      	lsls	r2, r3, #5
1000d746:	1ad2      	subs	r2, r2, r3
1000d748:	0092      	lsls	r2, r2, #2
1000d74a:	1882      	adds	r2, r0, r2
1000d74c:	7d12      	ldrb	r2, [r2, #20]
1000d74e:	07d0      	lsls	r0, r2, #31
1000d750:	d405      	bmi.n	1000d75e <ble_slave_security_request_handler+0x5e>
1000d752:	e01b      	b.n	1000d78c <ble_slave_security_request_handler+0x8c>
1000d754:	3301      	adds	r3, #1
1000d756:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d758:	2b05      	cmp	r3, #5
1000d75a:	d1e1      	bne.n	1000d720 <ble_slave_security_request_handler+0x20>
1000d75c:	e01e      	b.n	1000d79c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d75e:	78e0      	ldrb	r0, [r4, #3]
1000d760:	2800      	cmp	r0, #0
1000d762:	d013      	beq.n	1000d78c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d764:	0159      	lsls	r1, r3, #5
1000d766:	1ac9      	subs	r1, r1, r3
1000d768:	008b      	lsls	r3, r1, #2
1000d76a:	4956      	ldr	r1, [pc, #344]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d76c:	18c9      	adds	r1, r1, r3
1000d76e:	311a      	adds	r1, #26
1000d770:	8820      	ldrh	r0, [r4, #0]
1000d772:	4b55      	ldr	r3, [pc, #340]	; (1000d8c8 <ble_slave_security_request_handler+0x1c8>)
1000d774:	4798      	blx	r3
1000d776:	2800      	cmp	r0, #0
1000d778:	d100      	bne.n	1000d77c <ble_slave_security_request_handler+0x7c>
1000d77a:	e09b      	b.n	1000d8b4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d77c:	4853      	ldr	r0, [pc, #332]	; (1000d8cc <ble_slave_security_request_handler+0x1cc>)
1000d77e:	4b54      	ldr	r3, [pc, #336]	; (1000d8d0 <ble_slave_security_request_handler+0x1d0>)
1000d780:	4798      	blx	r3
1000d782:	4854      	ldr	r0, [pc, #336]	; (1000d8d4 <ble_slave_security_request_handler+0x1d4>)
1000d784:	4b54      	ldr	r3, [pc, #336]	; (1000d8d8 <ble_slave_security_request_handler+0x1d8>)
1000d786:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d788:	20e2      	movs	r0, #226	; 0xe2
1000d78a:	e093      	b.n	1000d8b4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d78c:	015a      	lsls	r2, r3, #5
1000d78e:	1ad3      	subs	r3, r2, r3
1000d790:	009b      	lsls	r3, r3, #2
1000d792:	4a4c      	ldr	r2, [pc, #304]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d794:	18d3      	adds	r3, r2, r3
1000d796:	335e      	adds	r3, #94	; 0x5e
1000d798:	2202      	movs	r2, #2
1000d79a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d79c:	8825      	ldrh	r5, [r4, #0]
1000d79e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7a0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d7a2:	0016      	movs	r6, r2
1000d7a4:	8908      	ldrh	r0, [r1, #8]
1000d7a6:	42a8      	cmp	r0, r5
1000d7a8:	d10d      	bne.n	1000d7c6 <ble_slave_security_request_handler+0xc6>
1000d7aa:	0008      	movs	r0, r1
1000d7ac:	305e      	adds	r0, #94	; 0x5e
1000d7ae:	7800      	ldrb	r0, [r0, #0]
1000d7b0:	2802      	cmp	r0, #2
1000d7b2:	d108      	bne.n	1000d7c6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d7b4:	0152      	lsls	r2, r2, #5
1000d7b6:	1b92      	subs	r2, r2, r6
1000d7b8:	0096      	lsls	r6, r2, #2
1000d7ba:	4a42      	ldr	r2, [pc, #264]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d7bc:	1992      	adds	r2, r2, r6
1000d7be:	325e      	adds	r2, #94	; 0x5e
1000d7c0:	2103      	movs	r1, #3
1000d7c2:	7011      	strb	r1, [r2, #0]
			break;
1000d7c4:	e005      	b.n	1000d7d2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7c6:	3301      	adds	r3, #1
1000d7c8:	b2db      	uxtb	r3, r3
1000d7ca:	3201      	adds	r2, #1
1000d7cc:	317c      	adds	r1, #124	; 0x7c
1000d7ce:	2b05      	cmp	r3, #5
1000d7d0:	d1e7      	bne.n	1000d7a2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000d7d2:	aa01      	add	r2, sp, #4
1000d7d4:	78e1      	ldrb	r1, [r4, #3]
1000d7d6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000d7d8:	2101      	movs	r1, #1
1000d7da:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000d7dc:	3103      	adds	r1, #3
1000d7de:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d7e0:	001f      	movs	r7, r3
1000d7e2:	015a      	lsls	r2, r3, #5
1000d7e4:	1ad2      	subs	r2, r2, r3
1000d7e6:	0092      	lsls	r2, r2, #2
1000d7e8:	4936      	ldr	r1, [pc, #216]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d7ea:	5c52      	ldrb	r2, [r2, r1]
1000d7ec:	2a02      	cmp	r2, #2
1000d7ee:	d104      	bne.n	1000d7fa <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d7f0:	aa01      	add	r2, sp, #4
1000d7f2:	2103      	movs	r1, #3
1000d7f4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d7f6:	71d1      	strb	r1, [r2, #7]
1000d7f8:	e003      	b.n	1000d802 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d7fa:	aa01      	add	r2, sp, #4
1000d7fc:	2101      	movs	r1, #1
1000d7fe:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d800:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000d802:	aa01      	add	r2, sp, #4
1000d804:	2110      	movs	r1, #16
1000d806:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d808:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d80a:	017a      	lsls	r2, r7, #5
1000d80c:	1bd2      	subs	r2, r2, r7
1000d80e:	0092      	lsls	r2, r2, #2
1000d810:	492c      	ldr	r1, [pc, #176]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d812:	188a      	adds	r2, r1, r2
1000d814:	7e12      	ldrb	r2, [r2, #24]
1000d816:	2a40      	cmp	r2, #64	; 0x40
1000d818:	d134      	bne.n	1000d884 <ble_slave_security_request_handler+0x184>
1000d81a:	015a      	lsls	r2, r3, #5
1000d81c:	1ad3      	subs	r3, r2, r3
1000d81e:	009b      	lsls	r3, r3, #2
1000d820:	469a      	mov	sl, r3
1000d822:	001e      	movs	r6, r3
1000d824:	3660      	adds	r6, #96	; 0x60
1000d826:	1876      	adds	r6, r6, r1
1000d828:	4655      	mov	r5, sl
1000d82a:	3568      	adds	r5, #104	; 0x68
1000d82c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d82e:	4b2b      	ldr	r3, [pc, #172]	; (1000d8dc <ble_slave_security_request_handler+0x1dc>)
1000d830:	4699      	mov	r9, r3
1000d832:	230f      	movs	r3, #15
1000d834:	4698      	mov	r8, r3
1000d836:	47c8      	blx	r9
1000d838:	4643      	mov	r3, r8
1000d83a:	4018      	ands	r0, r3
1000d83c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d83e:	47c8      	blx	r9
1000d840:	4643      	mov	r3, r8
1000d842:	4018      	ands	r0, r3
1000d844:	74b0      	strb	r0, [r6, #18]
1000d846:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d848:	42ae      	cmp	r6, r5
1000d84a:	d1f4      	bne.n	1000d836 <ble_slave_security_request_handler+0x136>
1000d84c:	4656      	mov	r6, sl
1000d84e:	3670      	adds	r6, #112	; 0x70
1000d850:	4a1c      	ldr	r2, [pc, #112]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d852:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d854:	4b21      	ldr	r3, [pc, #132]	; (1000d8dc <ble_slave_security_request_handler+0x1dc>)
1000d856:	4699      	mov	r9, r3
1000d858:	230f      	movs	r3, #15
1000d85a:	4698      	mov	r8, r3
1000d85c:	47c8      	blx	r9
1000d85e:	4643      	mov	r3, r8
1000d860:	4018      	ands	r0, r3
1000d862:	7028      	strb	r0, [r5, #0]
1000d864:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d866:	42b5      	cmp	r5, r6
1000d868:	d1f8      	bne.n	1000d85c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d86a:	4b1c      	ldr	r3, [pc, #112]	; (1000d8dc <ble_slave_security_request_handler+0x1dc>)
1000d86c:	4798      	blx	r3
1000d86e:	017b      	lsls	r3, r7, #5
1000d870:	1bdb      	subs	r3, r3, r7
1000d872:	009b      	lsls	r3, r3, #2
1000d874:	4a13      	ldr	r2, [pc, #76]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d876:	18d3      	adds	r3, r2, r3
1000d878:	001a      	movs	r2, r3
1000d87a:	3270      	adds	r2, #112	; 0x70
1000d87c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d87e:	337a      	adds	r3, #122	; 0x7a
1000d880:	2210      	movs	r2, #16
1000d882:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d884:	017a      	lsls	r2, r7, #5
1000d886:	1bd7      	subs	r7, r2, r7
1000d888:	00bf      	lsls	r7, r7, #2
1000d88a:	3760      	adds	r7, #96	; 0x60
1000d88c:	4a0d      	ldr	r2, [pc, #52]	; (1000d8c4 <ble_slave_security_request_handler+0x1c4>)
1000d88e:	18ba      	adds	r2, r7, r2
1000d890:	8820      	ldrh	r0, [r4, #0]
1000d892:	2300      	movs	r3, #0
1000d894:	a901      	add	r1, sp, #4
1000d896:	4c12      	ldr	r4, [pc, #72]	; (1000d8e0 <ble_slave_security_request_handler+0x1e0>)
1000d898:	47a0      	blx	r4
1000d89a:	2800      	cmp	r0, #0
1000d89c:	d00a      	beq.n	1000d8b4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000d89e:	ab01      	add	r3, sp, #4
1000d8a0:	2200      	movs	r2, #0
1000d8a2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d8a4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000d8a6:	4809      	ldr	r0, [pc, #36]	; (1000d8cc <ble_slave_security_request_handler+0x1cc>)
1000d8a8:	4b09      	ldr	r3, [pc, #36]	; (1000d8d0 <ble_slave_security_request_handler+0x1d0>)
1000d8aa:	4798      	blx	r3
1000d8ac:	480d      	ldr	r0, [pc, #52]	; (1000d8e4 <ble_slave_security_request_handler+0x1e4>)
1000d8ae:	4b0a      	ldr	r3, [pc, #40]	; (1000d8d8 <ble_slave_security_request_handler+0x1d8>)
1000d8b0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d8b2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d8b4:	b004      	add	sp, #16
1000d8b6:	bc1c      	pop	{r2, r3, r4}
1000d8b8:	4690      	mov	r8, r2
1000d8ba:	4699      	mov	r9, r3
1000d8bc:	46a2      	mov	sl, r4
1000d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8c0:	100148f1 	.word	0x100148f1
1000d8c4:	10018ec8 	.word	0x10018ec8
1000d8c8:	10010d05 	.word	0x10010d05
1000d8cc:	10015d04 	.word	0x10015d04
1000d8d0:	10014b59 	.word	0x10014b59
1000d8d4:	10016900 	.word	0x10016900
1000d8d8:	10014a39 	.word	0x10014a39
1000d8dc:	10014b6d 	.word	0x10014b6d
1000d8e0:	10010b19 	.word	0x10010b19
1000d8e4:	10016918 	.word	0x10016918

1000d8e8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000d8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8ea:	465f      	mov	r7, fp
1000d8ec:	4656      	mov	r6, sl
1000d8ee:	464d      	mov	r5, r9
1000d8f0:	4644      	mov	r4, r8
1000d8f2:	b4f0      	push	{r4, r5, r6, r7}
1000d8f4:	b085      	sub	sp, #20
1000d8f6:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d8f8:	8804      	ldrh	r4, [r0, #0]
1000d8fa:	4a48      	ldr	r2, [pc, #288]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d8fc:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8fe:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d900:	8910      	ldrh	r0, [r2, #8]
1000d902:	42a0      	cmp	r0, r4
1000d904:	d10d      	bne.n	1000d922 <ble_pair_request_handler+0x3a>
1000d906:	0010      	movs	r0, r2
1000d908:	305e      	adds	r0, #94	; 0x5e
1000d90a:	7800      	ldrb	r0, [r0, #0]
1000d90c:	2802      	cmp	r0, #2
1000d90e:	d108      	bne.n	1000d922 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d910:	014a      	lsls	r2, r1, #5
1000d912:	1a52      	subs	r2, r2, r1
1000d914:	0095      	lsls	r5, r2, #2
1000d916:	4a41      	ldr	r2, [pc, #260]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d918:	1952      	adds	r2, r2, r5
1000d91a:	325e      	adds	r2, #94	; 0x5e
1000d91c:	2103      	movs	r1, #3
1000d91e:	7011      	strb	r1, [r2, #0]
			break;
1000d920:	e005      	b.n	1000d92e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d922:	3301      	adds	r3, #1
1000d924:	b2db      	uxtb	r3, r3
1000d926:	3101      	adds	r1, #1
1000d928:	327c      	adds	r2, #124	; 0x7c
1000d92a:	2b05      	cmp	r3, #5
1000d92c:	d1e8      	bne.n	1000d900 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d92e:	aa01      	add	r2, sp, #4
1000d930:	2100      	movs	r1, #0
1000d932:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d934:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d936:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d938:	2003      	movs	r0, #3
1000d93a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d93c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d93e:	001f      	movs	r7, r3
1000d940:	015a      	lsls	r2, r3, #5
1000d942:	1ad2      	subs	r2, r2, r3
1000d944:	0092      	lsls	r2, r2, #2
1000d946:	4935      	ldr	r1, [pc, #212]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d948:	5c52      	ldrb	r2, [r2, r1]
1000d94a:	2a02      	cmp	r2, #2
1000d94c:	d104      	bne.n	1000d958 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d94e:	aa01      	add	r2, sp, #4
1000d950:	2103      	movs	r1, #3
1000d952:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d954:	71d1      	strb	r1, [r2, #7]
1000d956:	e003      	b.n	1000d960 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d958:	aa01      	add	r2, sp, #4
1000d95a:	2101      	movs	r1, #1
1000d95c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d95e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d960:	aa01      	add	r2, sp, #4
1000d962:	2110      	movs	r1, #16
1000d964:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d966:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d968:	017a      	lsls	r2, r7, #5
1000d96a:	1bd2      	subs	r2, r2, r7
1000d96c:	0092      	lsls	r2, r2, #2
1000d96e:	492b      	ldr	r1, [pc, #172]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d970:	188a      	adds	r2, r1, r2
1000d972:	7e12      	ldrb	r2, [r2, #24]
1000d974:	2a40      	cmp	r2, #64	; 0x40
1000d976:	d131      	bne.n	1000d9dc <ble_pair_request_handler+0xf4>
1000d978:	015a      	lsls	r2, r3, #5
1000d97a:	1ad3      	subs	r3, r2, r3
1000d97c:	009b      	lsls	r3, r3, #2
1000d97e:	469a      	mov	sl, r3
1000d980:	001d      	movs	r5, r3
1000d982:	3560      	adds	r5, #96	; 0x60
1000d984:	186d      	adds	r5, r5, r1
1000d986:	4654      	mov	r4, sl
1000d988:	3468      	adds	r4, #104	; 0x68
1000d98a:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d98c:	4b24      	ldr	r3, [pc, #144]	; (1000da20 <ble_pair_request_handler+0x138>)
1000d98e:	4699      	mov	r9, r3
1000d990:	260f      	movs	r6, #15
1000d992:	47c8      	blx	r9
1000d994:	4030      	ands	r0, r6
1000d996:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d998:	47c8      	blx	r9
1000d99a:	4030      	ands	r0, r6
1000d99c:	74a8      	strb	r0, [r5, #18]
1000d99e:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d9a0:	42a5      	cmp	r5, r4
1000d9a2:	d1f6      	bne.n	1000d992 <ble_pair_request_handler+0xaa>
1000d9a4:	4655      	mov	r5, sl
1000d9a6:	3570      	adds	r5, #112	; 0x70
1000d9a8:	4a1c      	ldr	r2, [pc, #112]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d9aa:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d9ac:	4b1c      	ldr	r3, [pc, #112]	; (1000da20 <ble_pair_request_handler+0x138>)
1000d9ae:	4699      	mov	r9, r3
1000d9b0:	230f      	movs	r3, #15
1000d9b2:	4698      	mov	r8, r3
1000d9b4:	47c8      	blx	r9
1000d9b6:	4643      	mov	r3, r8
1000d9b8:	4018      	ands	r0, r3
1000d9ba:	7020      	strb	r0, [r4, #0]
1000d9bc:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d9be:	42ac      	cmp	r4, r5
1000d9c0:	d1f8      	bne.n	1000d9b4 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d9c2:	4b17      	ldr	r3, [pc, #92]	; (1000da20 <ble_pair_request_handler+0x138>)
1000d9c4:	4798      	blx	r3
1000d9c6:	017b      	lsls	r3, r7, #5
1000d9c8:	1bdb      	subs	r3, r3, r7
1000d9ca:	009b      	lsls	r3, r3, #2
1000d9cc:	4a13      	ldr	r2, [pc, #76]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d9ce:	18d3      	adds	r3, r2, r3
1000d9d0:	001a      	movs	r2, r3
1000d9d2:	3270      	adds	r2, #112	; 0x70
1000d9d4:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d9d6:	337a      	adds	r3, #122	; 0x7a
1000d9d8:	2210      	movs	r2, #16
1000d9da:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d9dc:	017a      	lsls	r2, r7, #5
1000d9de:	1bd7      	subs	r7, r2, r7
1000d9e0:	00bf      	lsls	r7, r7, #2
1000d9e2:	3760      	adds	r7, #96	; 0x60
1000d9e4:	4a0d      	ldr	r2, [pc, #52]	; (1000da1c <ble_pair_request_handler+0x134>)
1000d9e6:	18ba      	adds	r2, r7, r2
1000d9e8:	465b      	mov	r3, fp
1000d9ea:	8818      	ldrh	r0, [r3, #0]
1000d9ec:	2300      	movs	r3, #0
1000d9ee:	a901      	add	r1, sp, #4
1000d9f0:	4c0c      	ldr	r4, [pc, #48]	; (1000da24 <ble_pair_request_handler+0x13c>)
1000d9f2:	47a0      	blx	r4
1000d9f4:	2800      	cmp	r0, #0
1000d9f6:	d00a      	beq.n	1000da0e <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000d9f8:	ab01      	add	r3, sp, #4
1000d9fa:	2200      	movs	r2, #0
1000d9fc:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d9fe:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000da00:	4809      	ldr	r0, [pc, #36]	; (1000da28 <ble_pair_request_handler+0x140>)
1000da02:	4b0a      	ldr	r3, [pc, #40]	; (1000da2c <ble_pair_request_handler+0x144>)
1000da04:	4798      	blx	r3
1000da06:	480a      	ldr	r0, [pc, #40]	; (1000da30 <ble_pair_request_handler+0x148>)
1000da08:	4b0a      	ldr	r3, [pc, #40]	; (1000da34 <ble_pair_request_handler+0x14c>)
1000da0a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000da0c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000da0e:	b005      	add	sp, #20
1000da10:	bc3c      	pop	{r2, r3, r4, r5}
1000da12:	4690      	mov	r8, r2
1000da14:	4699      	mov	r9, r3
1000da16:	46a2      	mov	sl, r4
1000da18:	46ab      	mov	fp, r5
1000da1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da1c:	10018ec8 	.word	0x10018ec8
1000da20:	10014b6d 	.word	0x10014b6d
1000da24:	10010b19 	.word	0x10010b19
1000da28:	10015d04 	.word	0x10015d04
1000da2c:	10014b59 	.word	0x10014b59
1000da30:	10016944 	.word	0x10016944
1000da34:	10014a39 	.word	0x10014a39

1000da38 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000da38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da3a:	b085      	sub	sp, #20
1000da3c:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000da3e:	2206      	movs	r2, #6
1000da40:	493d      	ldr	r1, [pc, #244]	; (1000db38 <ble_pair_key_request_handler+0x100>)
1000da42:	a802      	add	r0, sp, #8
1000da44:	4e3d      	ldr	r6, [pc, #244]	; (1000db3c <ble_pair_key_request_handler+0x104>)
1000da46:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000da48:	ac01      	add	r4, sp, #4
1000da4a:	2204      	movs	r2, #4
1000da4c:	0029      	movs	r1, r5
1000da4e:	0020      	movs	r0, r4
1000da50:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000da52:	78e3      	ldrb	r3, [r4, #3]
1000da54:	2b00      	cmp	r3, #0
1000da56:	d162      	bne.n	1000db1e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000da58:	4839      	ldr	r0, [pc, #228]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000da5a:	4b3a      	ldr	r3, [pc, #232]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000da5c:	4798      	blx	r3
1000da5e:	483a      	ldr	r0, [pc, #232]	; (1000db48 <ble_pair_key_request_handler+0x110>)
1000da60:	4b3a      	ldr	r3, [pc, #232]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000da62:	4798      	blx	r3
1000da64:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000da66:	4c3a      	ldr	r4, [pc, #232]	; (1000db50 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000da68:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000da6a:	201e      	movs	r0, #30
1000da6c:	47a0      	blx	r4
1000da6e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000da70:	2b00      	cmp	r3, #0
1000da72:	d11a      	bne.n	1000daaa <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000da74:	4f32      	ldr	r7, [pc, #200]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000da76:	0038      	movs	r0, r7
1000da78:	4e32      	ldr	r6, [pc, #200]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000da7a:	47b0      	blx	r6
1000da7c:	4835      	ldr	r0, [pc, #212]	; (1000db54 <ble_pair_key_request_handler+0x11c>)
1000da7e:	4c33      	ldr	r4, [pc, #204]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000da80:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000da82:	0038      	movs	r0, r7
1000da84:	47b0      	blx	r6
1000da86:	4834      	ldr	r0, [pc, #208]	; (1000db58 <ble_pair_key_request_handler+0x120>)
1000da88:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000da8a:	8828      	ldrh	r0, [r5, #0]
1000da8c:	2113      	movs	r1, #19
1000da8e:	4b33      	ldr	r3, [pc, #204]	; (1000db5c <ble_pair_key_request_handler+0x124>)
1000da90:	4798      	blx	r3
1000da92:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000da94:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000da96:	2b00      	cmp	r3, #0
1000da98:	d04c      	beq.n	1000db34 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000da9a:	4829      	ldr	r0, [pc, #164]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000da9c:	4b29      	ldr	r3, [pc, #164]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000da9e:	4798      	blx	r3
1000daa0:	482f      	ldr	r0, [pc, #188]	; (1000db60 <ble_pair_key_request_handler+0x128>)
1000daa2:	4b2a      	ldr	r3, [pc, #168]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000daa4:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000daa6:	20e2      	movs	r0, #226	; 0xe2
1000daa8:	e044      	b.n	1000db34 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000daaa:	001a      	movs	r2, r3
1000daac:	3a30      	subs	r2, #48	; 0x30
1000daae:	2a09      	cmp	r2, #9
1000dab0:	d8db      	bhi.n	1000da6a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000dab2:	aa02      	add	r2, sp, #8
1000dab4:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000dab6:	4038      	ands	r0, r7
1000dab8:	4b2a      	ldr	r3, [pc, #168]	; (1000db64 <ble_pair_key_request_handler+0x12c>)
1000daba:	4798      	blx	r3
1000dabc:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000dabe:	2e06      	cmp	r6, #6
1000dac0:	d026      	beq.n	1000db10 <ble_pair_key_request_handler+0xd8>
1000dac2:	e7d2      	b.n	1000da6a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000dac4:	481e      	ldr	r0, [pc, #120]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000dac6:	4b1f      	ldr	r3, [pc, #124]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000dac8:	4798      	blx	r3
1000daca:	4827      	ldr	r0, [pc, #156]	; (1000db68 <ble_pair_key_request_handler+0x130>)
1000dacc:	4b1f      	ldr	r3, [pc, #124]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000dace:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dad0:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dad2:	4e24      	ldr	r6, [pc, #144]	; (1000db64 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000dad4:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dad6:	5ce0      	ldrb	r0, [r4, r3]
1000dad8:	47b0      	blx	r6
1000dada:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000dadc:	2c06      	cmp	r4, #6
1000dade:	d1f9      	bne.n	1000dad4 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000dae0:	ab01      	add	r3, sp, #4
1000dae2:	7899      	ldrb	r1, [r3, #2]
1000dae4:	8828      	ldrh	r0, [r5, #0]
1000dae6:	aa02      	add	r2, sp, #8
1000dae8:	4b20      	ldr	r3, [pc, #128]	; (1000db6c <ble_pair_key_request_handler+0x134>)
1000daea:	4798      	blx	r3
1000daec:	2800      	cmp	r0, #0
1000daee:	d021      	beq.n	1000db34 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000daf0:	4813      	ldr	r0, [pc, #76]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000daf2:	4b14      	ldr	r3, [pc, #80]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000daf4:	4798      	blx	r3
1000daf6:	481e      	ldr	r0, [pc, #120]	; (1000db70 <ble_pair_key_request_handler+0x138>)
1000daf8:	4b14      	ldr	r3, [pc, #80]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000dafa:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000dafc:	2000      	movs	r0, #0
1000dafe:	e019      	b.n	1000db34 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000db00:	480f      	ldr	r0, [pc, #60]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000db02:	4b10      	ldr	r3, [pc, #64]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000db04:	4798      	blx	r3
1000db06:	481b      	ldr	r0, [pc, #108]	; (1000db74 <ble_pair_key_request_handler+0x13c>)
1000db08:	4b10      	ldr	r3, [pc, #64]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000db0a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000db0c:	2000      	movs	r0, #0
1000db0e:	e011      	b.n	1000db34 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000db10:	480b      	ldr	r0, [pc, #44]	; (1000db40 <ble_pair_key_request_handler+0x108>)
1000db12:	4b0c      	ldr	r3, [pc, #48]	; (1000db44 <ble_pair_key_request_handler+0x10c>)
1000db14:	4798      	blx	r3
1000db16:	4818      	ldr	r0, [pc, #96]	; (1000db78 <ble_pair_key_request_handler+0x140>)
1000db18:	4b0c      	ldr	r3, [pc, #48]	; (1000db4c <ble_pair_key_request_handler+0x114>)
1000db1a:	4798      	blx	r3
1000db1c:	e7d8      	b.n	1000dad0 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000db1e:	ab01      	add	r3, sp, #4
1000db20:	885a      	ldrh	r2, [r3, #2]
1000db22:	2380      	movs	r3, #128	; 0x80
1000db24:	005b      	lsls	r3, r3, #1
1000db26:	429a      	cmp	r2, r3
1000db28:	d0cc      	beq.n	1000dac4 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000db2a:	ab01      	add	r3, sp, #4
1000db2c:	789b      	ldrb	r3, [r3, #2]
1000db2e:	2b01      	cmp	r3, #1
1000db30:	d0e6      	beq.n	1000db00 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000db32:	2000      	movs	r0, #0
}
1000db34:	b005      	add	sp, #20
1000db36:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000db38:	100166f0 	.word	0x100166f0
1000db3c:	100148df 	.word	0x100148df
1000db40:	10015d04 	.word	0x10015d04
1000db44:	10014b59 	.word	0x10014b59
1000db48:	1001696c 	.word	0x1001696c
1000db4c:	10014a39 	.word	0x10014a39
1000db50:	1000e6c1 	.word	0x1000e6c1
1000db54:	10016994 	.word	0x10016994
1000db58:	100169a0 	.word	0x100169a0
1000db5c:	10010121 	.word	0x10010121
1000db60:	10016888 	.word	0x10016888
1000db64:	10014a6d 	.word	0x10014a6d
1000db68:	100169b4 	.word	0x100169b4
1000db6c:	10010c49 	.word	0x10010c49
1000db70:	100169ec 	.word	0x100169ec
1000db74:	10016a04 	.word	0x10016a04
1000db78:	10016a20 	.word	0x10016a20

1000db7c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000db7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000db7e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000db80:	8805      	ldrh	r5, [r0, #0]
1000db82:	4b2f      	ldr	r3, [pc, #188]	; (1000dc40 <ble_encryption_request_handler+0xc4>)
1000db84:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db86:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000db88:	0010      	movs	r0, r2
1000db8a:	8919      	ldrh	r1, [r3, #8]
1000db8c:	42a9      	cmp	r1, r5
1000db8e:	d116      	bne.n	1000dbbe <ble_encryption_request_handler+0x42>
1000db90:	0019      	movs	r1, r3
1000db92:	315e      	adds	r1, #94	; 0x5e
1000db94:	7809      	ldrb	r1, [r1, #0]
1000db96:	2901      	cmp	r1, #1
1000db98:	d911      	bls.n	1000dbbe <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000db9a:	4929      	ldr	r1, [pc, #164]	; (1000dc40 <ble_encryption_request_handler+0xc4>)
1000db9c:	0152      	lsls	r2, r2, #5
1000db9e:	1a10      	subs	r0, r2, r0
1000dba0:	0080      	lsls	r0, r0, #2
1000dba2:	1808      	adds	r0, r1, r0
1000dba4:	305e      	adds	r0, #94	; 0x5e
1000dba6:	2306      	movs	r3, #6
1000dba8:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000dbaa:	0162      	lsls	r2, r4, #5
1000dbac:	1b13      	subs	r3, r2, r4
1000dbae:	009b      	lsls	r3, r3, #2
1000dbb0:	18cb      	adds	r3, r1, r3
1000dbb2:	3370      	adds	r3, #112	; 0x70
1000dbb4:	881a      	ldrh	r2, [r3, #0]
1000dbb6:	8873      	ldrh	r3, [r6, #2]
1000dbb8:	429a      	cmp	r2, r3
1000dbba:	d113      	bne.n	1000dbe4 <ble_encryption_request_handler+0x68>
1000dbbc:	e006      	b.n	1000dbcc <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbbe:	3401      	adds	r4, #1
1000dbc0:	b2e4      	uxtb	r4, r4
1000dbc2:	3201      	adds	r2, #1
1000dbc4:	337c      	adds	r3, #124	; 0x7c
1000dbc6:	2c05      	cmp	r4, #5
1000dbc8:	d1de      	bne.n	1000db88 <ble_encryption_request_handler+0xc>
1000dbca:	e00b      	b.n	1000dbe4 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000dbcc:	0161      	lsls	r1, r4, #5
1000dbce:	1b09      	subs	r1, r1, r4
1000dbd0:	0089      	lsls	r1, r1, #2
1000dbd2:	4b1b      	ldr	r3, [pc, #108]	; (1000dc40 <ble_encryption_request_handler+0xc4>)
1000dbd4:	1859      	adds	r1, r3, r1
1000dbd6:	3172      	adds	r1, #114	; 0x72
1000dbd8:	1d30      	adds	r0, r6, #4
1000dbda:	2208      	movs	r2, #8
1000dbdc:	4b19      	ldr	r3, [pc, #100]	; (1000dc44 <ble_encryption_request_handler+0xc8>)
1000dbde:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000dbe0:	2800      	cmp	r0, #0
1000dbe2:	d015      	beq.n	1000dc10 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000dbe4:	4f18      	ldr	r7, [pc, #96]	; (1000dc48 <ble_encryption_request_handler+0xcc>)
1000dbe6:	0038      	movs	r0, r7
1000dbe8:	4e18      	ldr	r6, [pc, #96]	; (1000dc4c <ble_encryption_request_handler+0xd0>)
1000dbea:	47b0      	blx	r6
1000dbec:	4818      	ldr	r0, [pc, #96]	; (1000dc50 <ble_encryption_request_handler+0xd4>)
1000dbee:	4d19      	ldr	r5, [pc, #100]	; (1000dc54 <ble_encryption_request_handler+0xd8>)
1000dbf0:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000dbf2:	0038      	movs	r0, r7
1000dbf4:	47b0      	blx	r6
1000dbf6:	4818      	ldr	r0, [pc, #96]	; (1000dc58 <ble_encryption_request_handler+0xdc>)
1000dbf8:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000dbfa:	0163      	lsls	r3, r4, #5
1000dbfc:	1b1c      	subs	r4, r3, r4
1000dbfe:	00a4      	lsls	r4, r4, #2
1000dc00:	4b0f      	ldr	r3, [pc, #60]	; (1000dc40 <ble_encryption_request_handler+0xc4>)
1000dc02:	191c      	adds	r4, r3, r4
1000dc04:	8920      	ldrh	r0, [r4, #8]
1000dc06:	2105      	movs	r1, #5
1000dc08:	4b14      	ldr	r3, [pc, #80]	; (1000dc5c <ble_encryption_request_handler+0xe0>)
1000dc0a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dc0c:	20e2      	movs	r0, #226	; 0xe2
1000dc0e:	e016      	b.n	1000dc3e <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000dc10:	0162      	lsls	r2, r4, #5
1000dc12:	1b13      	subs	r3, r2, r4
1000dc14:	009b      	lsls	r3, r3, #2
1000dc16:	3360      	adds	r3, #96	; 0x60
1000dc18:	4909      	ldr	r1, [pc, #36]	; (1000dc40 <ble_encryption_request_handler+0xc4>)
1000dc1a:	185b      	adds	r3, r3, r1
1000dc1c:	1b14      	subs	r4, r2, r4
1000dc1e:	00a4      	lsls	r4, r4, #2
1000dc20:	190c      	adds	r4, r1, r4
1000dc22:	7d21      	ldrb	r1, [r4, #20]
1000dc24:	8830      	ldrh	r0, [r6, #0]
1000dc26:	2201      	movs	r2, #1
1000dc28:	4c0d      	ldr	r4, [pc, #52]	; (1000dc60 <ble_encryption_request_handler+0xe4>)
1000dc2a:	47a0      	blx	r4
1000dc2c:	2800      	cmp	r0, #0
1000dc2e:	d006      	beq.n	1000dc3e <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000dc30:	4805      	ldr	r0, [pc, #20]	; (1000dc48 <ble_encryption_request_handler+0xcc>)
1000dc32:	4b06      	ldr	r3, [pc, #24]	; (1000dc4c <ble_encryption_request_handler+0xd0>)
1000dc34:	4798      	blx	r3
1000dc36:	480b      	ldr	r0, [pc, #44]	; (1000dc64 <ble_encryption_request_handler+0xe8>)
1000dc38:	4b06      	ldr	r3, [pc, #24]	; (1000dc54 <ble_encryption_request_handler+0xd8>)
1000dc3a:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000dc3c:	2000      	movs	r0, #0
}
1000dc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dc40:	10018ec8 	.word	0x10018ec8
1000dc44:	100148c1 	.word	0x100148c1
1000dc48:	10015d04 	.word	0x10015d04
1000dc4c:	10014b59 	.word	0x10014b59
1000dc50:	10016a34 	.word	0x10016a34
1000dc54:	10014a39 	.word	0x10014a39
1000dc58:	10016a6c 	.word	0x10016a6c
1000dc5c:	10010121 	.word	0x10010121
1000dc60:	10010d7d 	.word	0x10010d7d
1000dc64:	10016ac4 	.word	0x10016ac4

1000dc68 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000dc68:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000dc6a:	2a00      	cmp	r2, #0
1000dc6c:	d047      	beq.n	1000dcfe <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000dc6e:	2906      	cmp	r1, #6
1000dc70:	d847      	bhi.n	1000dd02 <ble_mgr_events_callback_handler+0x9a>
1000dc72:	0089      	lsls	r1, r1, #2
1000dc74:	4b28      	ldr	r3, [pc, #160]	; (1000dd18 <ble_mgr_events_callback_handler+0xb0>)
1000dc76:	585b      	ldr	r3, [r3, r1]
1000dc78:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000dc7a:	4b28      	ldr	r3, [pc, #160]	; (1000dd1c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000dc7c:	2405      	movs	r4, #5
1000dc7e:	e00a      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000dc80:	4b27      	ldr	r3, [pc, #156]	; (1000dd20 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000dc82:	2401      	movs	r4, #1
			}
			break;
1000dc84:	e007      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000dc86:	4b27      	ldr	r3, [pc, #156]	; (1000dd24 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000dc88:	2405      	movs	r4, #5
			}
			break;
1000dc8a:	e004      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000dc8c:	4b26      	ldr	r3, [pc, #152]	; (1000dd28 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000dc8e:	2401      	movs	r4, #1
			}
			break;
1000dc90:	e001      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000dc92:	4b26      	ldr	r3, [pc, #152]	; (1000dd2c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000dc94:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000dc96:	2800      	cmp	r0, #0
1000dc98:	d116      	bne.n	1000dcc8 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dc9a:	6819      	ldr	r1, [r3, #0]
1000dc9c:	2900      	cmp	r1, #0
1000dc9e:	d10b      	bne.n	1000dcb8 <ble_mgr_events_callback_handler+0x50>
1000dca0:	e006      	b.n	1000dcb0 <ble_mgr_events_callback_handler+0x48>
1000dca2:	001d      	movs	r5, r3
1000dca4:	3304      	adds	r3, #4
1000dca6:	1f18      	subs	r0, r3, #4
1000dca8:	6800      	ldr	r0, [r0, #0]
1000dcaa:	2800      	cmp	r0, #0
1000dcac:	d106      	bne.n	1000dcbc <ble_mgr_events_callback_handler+0x54>
1000dcae:	e000      	b.n	1000dcb2 <ble_mgr_events_callback_handler+0x4a>
1000dcb0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000dcb2:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000dcb4:	2101      	movs	r1, #1
						break;
1000dcb6:	e02c      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
1000dcb8:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dcba:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000dcbc:	3101      	adds	r1, #1
1000dcbe:	b2c9      	uxtb	r1, r1
1000dcc0:	42a1      	cmp	r1, r4
1000dcc2:	d3ee      	bcc.n	1000dca2 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000dcc4:	2100      	movs	r1, #0
1000dcc6:	e024      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
1000dcc8:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000dcca:	2801      	cmp	r0, #1
1000dccc:	d121      	bne.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000dcce:	6819      	ldr	r1, [r3, #0]
1000dcd0:	428a      	cmp	r2, r1
1000dcd2:	d10c      	bne.n	1000dcee <ble_mgr_events_callback_handler+0x86>
1000dcd4:	e006      	b.n	1000dce4 <ble_mgr_events_callback_handler+0x7c>
1000dcd6:	001d      	movs	r5, r3
1000dcd8:	3304      	adds	r3, #4
1000dcda:	1f18      	subs	r0, r3, #4
1000dcdc:	6800      	ldr	r0, [r0, #0]
1000dcde:	4282      	cmp	r2, r0
1000dce0:	d107      	bne.n	1000dcf2 <ble_mgr_events_callback_handler+0x8a>
1000dce2:	e000      	b.n	1000dce6 <ble_mgr_events_callback_handler+0x7e>
1000dce4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000dce6:	2300      	movs	r3, #0
1000dce8:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000dcea:	2101      	movs	r1, #1
						break;
1000dcec:	e011      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
1000dcee:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000dcf0:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000dcf2:	3101      	adds	r1, #1
1000dcf4:	b2c9      	uxtb	r1, r1
1000dcf6:	42a1      	cmp	r1, r4
1000dcf8:	d3ed      	bcc.n	1000dcd6 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000dcfa:	2100      	movs	r1, #0
1000dcfc:	e009      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000dcfe:	2100      	movs	r1, #0
1000dd00:	e007      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000dd02:	2100      	movs	r1, #0
1000dd04:	e005      	b.n	1000dd12 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000dd06:	4b0a      	ldr	r3, [pc, #40]	; (1000dd30 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000dd08:	2405      	movs	r4, #5
1000dd0a:	e7c4      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000dd0c:	4b09      	ldr	r3, [pc, #36]	; (1000dd34 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000dd0e:	2401      	movs	r4, #1
1000dd10:	e7c1      	b.n	1000dc96 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000dd12:	0008      	movs	r0, r1
1000dd14:	bd30      	pop	{r4, r5, pc}
1000dd16:	46c0      	nop			; (mov r8, r8)
1000dd18:	100165e4 	.word	0x100165e4
1000dd1c:	10018eb4 	.word	0x10018eb4
1000dd20:	10018eb0 	.word	0x10018eb0
1000dd24:	10019138 	.word	0x10019138
1000dd28:	100196ec 	.word	0x100196ec
1000dd2c:	1001914c 	.word	0x1001914c
1000dd30:	10019160 	.word	0x10019160
1000dd34:	100191a8 	.word	0x100191a8

1000dd38 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000dd38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd3a:	465f      	mov	r7, fp
1000dd3c:	4656      	mov	r6, sl
1000dd3e:	464d      	mov	r5, r9
1000dd40:	4644      	mov	r4, r8
1000dd42:	b4f0      	push	{r4, r5, r6, r7}
1000dd44:	b08d      	sub	sp, #52	; 0x34
1000dd46:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000dd48:	2400      	movs	r4, #0
1000dd4a:	4b72      	ldr	r3, [pc, #456]	; (1000df14 <ble_device_init+0x1dc>)
1000dd4c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dd4e:	2207      	movs	r2, #7
1000dd50:	2100      	movs	r1, #0
1000dd52:	4871      	ldr	r0, [pc, #452]	; (1000df18 <ble_device_init+0x1e0>)
1000dd54:	4d71      	ldr	r5, [pc, #452]	; (1000df1c <ble_device_init+0x1e4>)
1000dd56:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000dd58:	2212      	movs	r2, #18
1000dd5a:	2100      	movs	r1, #0
1000dd5c:	4870      	ldr	r0, [pc, #448]	; (1000df20 <ble_device_init+0x1e8>)
1000dd5e:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000dd60:	4a70      	ldr	r2, [pc, #448]	; (1000df24 <ble_device_init+0x1ec>)
1000dd62:	2100      	movs	r1, #0
1000dd64:	4870      	ldr	r0, [pc, #448]	; (1000df28 <ble_device_init+0x1f0>)
1000dd66:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000dd68:	4b70      	ldr	r3, [pc, #448]	; (1000df2c <ble_device_init+0x1f4>)
1000dd6a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000dd6c:	22cd      	movs	r2, #205	; 0xcd
1000dd6e:	0092      	lsls	r2, r2, #2
1000dd70:	2100      	movs	r1, #0
1000dd72:	486f      	ldr	r0, [pc, #444]	; (1000df30 <ble_device_init+0x1f8>)
1000dd74:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000dd76:	4b6f      	ldr	r3, [pc, #444]	; (1000df34 <ble_device_init+0x1fc>)
1000dd78:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000dd7a:	2283      	movs	r2, #131	; 0x83
1000dd7c:	0092      	lsls	r2, r2, #2
1000dd7e:	2100      	movs	r1, #0
1000dd80:	486d      	ldr	r0, [pc, #436]	; (1000df38 <ble_device_init+0x200>)
1000dd82:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000dd84:	4b6d      	ldr	r3, [pc, #436]	; (1000df3c <ble_device_init+0x204>)
1000dd86:	469b      	mov	fp, r3
1000dd88:	2380      	movs	r3, #128	; 0x80
1000dd8a:	00db      	lsls	r3, r3, #3
1000dd8c:	469a      	mov	sl, r3
1000dd8e:	001a      	movs	r2, r3
1000dd90:	2100      	movs	r1, #0
1000dd92:	4658      	mov	r0, fp
1000dd94:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000dd96:	4b6a      	ldr	r3, [pc, #424]	; (1000df40 <ble_device_init+0x208>)
1000dd98:	4699      	mov	r9, r3
1000dd9a:	2380      	movs	r3, #128	; 0x80
1000dd9c:	015b      	lsls	r3, r3, #5
1000dd9e:	4698      	mov	r8, r3
1000dda0:	001a      	movs	r2, r3
1000dda2:	2100      	movs	r1, #0
1000dda4:	4648      	mov	r0, r9
1000dda6:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000dda8:	4f66      	ldr	r7, [pc, #408]	; (1000df44 <ble_device_init+0x20c>)
1000ddaa:	221c      	movs	r2, #28
1000ddac:	2100      	movs	r1, #0
1000ddae:	0038      	movs	r0, r7
1000ddb0:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ddb2:	465b      	mov	r3, fp
1000ddb4:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ddb6:	4653      	mov	r3, sl
1000ddb8:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ddba:	464b      	mov	r3, r9
1000ddbc:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ddbe:	4643      	mov	r3, r8
1000ddc0:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ddc2:	4b61      	ldr	r3, [pc, #388]	; (1000df48 <ble_device_init+0x210>)
1000ddc4:	601c      	str	r4, [r3, #0]
1000ddc6:	605c      	str	r4, [r3, #4]
1000ddc8:	609c      	str	r4, [r3, #8]
1000ddca:	60dc      	str	r4, [r3, #12]
1000ddcc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ddce:	4b5f      	ldr	r3, [pc, #380]	; (1000df4c <ble_device_init+0x214>)
1000ddd0:	601c      	str	r4, [r3, #0]
1000ddd2:	605c      	str	r4, [r3, #4]
1000ddd4:	609c      	str	r4, [r3, #8]
1000ddd6:	60dc      	str	r4, [r3, #12]
1000ddd8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ddda:	4b5d      	ldr	r3, [pc, #372]	; (1000df50 <ble_device_init+0x218>)
1000dddc:	601c      	str	r4, [r3, #0]
1000ddde:	605c      	str	r4, [r3, #4]
1000dde0:	609c      	str	r4, [r3, #8]
1000dde2:	60dc      	str	r4, [r3, #12]
1000dde4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000dde6:	4b5b      	ldr	r3, [pc, #364]	; (1000df54 <ble_device_init+0x21c>)
1000dde8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000ddea:	4b5b      	ldr	r3, [pc, #364]	; (1000df58 <ble_device_init+0x220>)
1000ddec:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000ddee:	4b5b      	ldr	r3, [pc, #364]	; (1000df5c <ble_device_init+0x224>)
1000ddf0:	601c      	str	r4, [r3, #0]
1000ddf2:	605c      	str	r4, [r3, #4]
1000ddf4:	609c      	str	r4, [r3, #8]
1000ddf6:	60dc      	str	r4, [r3, #12]
1000ddf8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000ddfa:	4b59      	ldr	r3, [pc, #356]	; (1000df60 <ble_device_init+0x228>)
1000ddfc:	601c      	str	r4, [r3, #0]
1000ddfe:	4c59      	ldr	r4, [pc, #356]	; (1000df64 <ble_device_init+0x22c>)
1000de00:	239b      	movs	r3, #155	; 0x9b
1000de02:	009b      	lsls	r3, r3, #2
1000de04:	4698      	mov	r8, r3
1000de06:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000de08:	4f44      	ldr	r7, [pc, #272]	; (1000df1c <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000de0a:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000de0c:	227c      	movs	r2, #124	; 0x7c
1000de0e:	2100      	movs	r1, #0
1000de10:	0020      	movs	r0, r4
1000de12:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000de14:	0023      	movs	r3, r4
1000de16:	335e      	adds	r3, #94	; 0x5e
1000de18:	2200      	movs	r2, #0
1000de1a:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000de1c:	7625      	strb	r5, [r4, #24]
1000de1e:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de20:	45a0      	cmp	r8, r4
1000de22:	d1f3      	bne.n	1000de0c <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000de24:	4b50      	ldr	r3, [pc, #320]	; (1000df68 <ble_device_init+0x230>)
1000de26:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000de28:	4846      	ldr	r0, [pc, #280]	; (1000df44 <ble_device_init+0x20c>)
1000de2a:	4b3e      	ldr	r3, [pc, #248]	; (1000df24 <ble_device_init+0x1ec>)
1000de2c:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000de2e:	4b3e      	ldr	r3, [pc, #248]	; (1000df28 <ble_device_init+0x1f0>)
1000de30:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000de32:	4b4e      	ldr	r3, [pc, #312]	; (1000df6c <ble_device_init+0x234>)
1000de34:	4798      	blx	r3
1000de36:	2800      	cmp	r0, #0
1000de38:	d00b      	beq.n	1000de52 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000de3a:	4e4d      	ldr	r6, [pc, #308]	; (1000df70 <ble_device_init+0x238>)
1000de3c:	0030      	movs	r0, r6
1000de3e:	4d4d      	ldr	r5, [pc, #308]	; (1000df74 <ble_device_init+0x23c>)
1000de40:	47a8      	blx	r5
1000de42:	484d      	ldr	r0, [pc, #308]	; (1000df78 <ble_device_init+0x240>)
1000de44:	4c4d      	ldr	r4, [pc, #308]	; (1000df7c <ble_device_init+0x244>)
1000de46:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000de48:	0030      	movs	r0, r6
1000de4a:	47a8      	blx	r5
1000de4c:	484c      	ldr	r0, [pc, #304]	; (1000df80 <ble_device_init+0x248>)
1000de4e:	47a0      	blx	r4
1000de50:	e7fe      	b.n	1000de50 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000de52:	4a4c      	ldr	r2, [pc, #304]	; (1000df84 <ble_device_init+0x24c>)
1000de54:	2100      	movs	r1, #0
1000de56:	2000      	movs	r0, #0
1000de58:	4c4b      	ldr	r4, [pc, #300]	; (1000df88 <ble_device_init+0x250>)
1000de5a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000de5c:	4a4b      	ldr	r2, [pc, #300]	; (1000df8c <ble_device_init+0x254>)
1000de5e:	2102      	movs	r1, #2
1000de60:	2000      	movs	r0, #0
1000de62:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000de64:	2109      	movs	r1, #9
1000de66:	484a      	ldr	r0, [pc, #296]	; (1000df90 <ble_device_init+0x258>)
1000de68:	4b4a      	ldr	r3, [pc, #296]	; (1000df94 <ble_device_init+0x25c>)
1000de6a:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000de6c:	2800      	cmp	r0, #0
1000de6e:	d005      	beq.n	1000de7c <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000de70:	483f      	ldr	r0, [pc, #252]	; (1000df70 <ble_device_init+0x238>)
1000de72:	4b40      	ldr	r3, [pc, #256]	; (1000df74 <ble_device_init+0x23c>)
1000de74:	4798      	blx	r3
1000de76:	4848      	ldr	r0, [pc, #288]	; (1000df98 <ble_device_init+0x260>)
1000de78:	4b40      	ldr	r3, [pc, #256]	; (1000df7c <ble_device_init+0x244>)
1000de7a:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000de7c:	2207      	movs	r2, #7
1000de7e:	4947      	ldr	r1, [pc, #284]	; (1000df9c <ble_device_init+0x264>)
1000de80:	3108      	adds	r1, #8
1000de82:	4668      	mov	r0, sp
1000de84:	4b46      	ldr	r3, [pc, #280]	; (1000dfa0 <ble_device_init+0x268>)
1000de86:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000de88:	2226      	movs	r2, #38	; 0x26
1000de8a:	2100      	movs	r1, #0
1000de8c:	a802      	add	r0, sp, #8
1000de8e:	4b23      	ldr	r3, [pc, #140]	; (1000df1c <ble_device_init+0x1e4>)
1000de90:	4798      	blx	r3
	
	if (addr == NULL)
1000de92:	2e00      	cmp	r6, #0
1000de94:	d10c      	bne.n	1000deb0 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000de96:	4668      	mov	r0, sp
1000de98:	4b42      	ldr	r3, [pc, #264]	; (1000dfa4 <ble_device_init+0x26c>)
1000de9a:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000de9c:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000de9e:	2800      	cmp	r0, #0
1000dea0:	d006      	beq.n	1000deb0 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000dea2:	4833      	ldr	r0, [pc, #204]	; (1000df70 <ble_device_init+0x238>)
1000dea4:	4b33      	ldr	r3, [pc, #204]	; (1000df74 <ble_device_init+0x23c>)
1000dea6:	4798      	blx	r3
1000dea8:	483f      	ldr	r0, [pc, #252]	; (1000dfa8 <ble_device_init+0x270>)
1000deaa:	4b34      	ldr	r3, [pc, #208]	; (1000df7c <ble_device_init+0x244>)
1000deac:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000deae:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000deb0:	ac02      	add	r4, sp, #8
1000deb2:	230a      	movs	r3, #10
1000deb4:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000deb6:	4b3d      	ldr	r3, [pc, #244]	; (1000dfac <ble_device_init+0x274>)
1000deb8:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000deba:	2207      	movs	r2, #7
1000debc:	0031      	movs	r1, r6
1000debe:	a803      	add	r0, sp, #12
1000dec0:	4b37      	ldr	r3, [pc, #220]	; (1000dfa0 <ble_device_init+0x268>)
1000dec2:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000dec4:	2300      	movs	r3, #0
1000dec6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000dec8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000deca:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000decc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000dece:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ded0:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ded2:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000ded4:	2380      	movs	r3, #128	; 0x80
1000ded6:	009b      	lsls	r3, r3, #2
1000ded8:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000deda:	0020      	movs	r0, r4
1000dedc:	4b34      	ldr	r3, [pc, #208]	; (1000dfb0 <ble_device_init+0x278>)
1000dede:	4798      	blx	r3
1000dee0:	2800      	cmp	r0, #0
1000dee2:	d005      	beq.n	1000def0 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000dee4:	4822      	ldr	r0, [pc, #136]	; (1000df70 <ble_device_init+0x238>)
1000dee6:	4b23      	ldr	r3, [pc, #140]	; (1000df74 <ble_device_init+0x23c>)
1000dee8:	4798      	blx	r3
1000deea:	4832      	ldr	r0, [pc, #200]	; (1000dfb4 <ble_device_init+0x27c>)
1000deec:	4b23      	ldr	r3, [pc, #140]	; (1000df7c <ble_device_init+0x244>)
1000deee:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000def0:	0030      	movs	r0, r6
1000def2:	4b31      	ldr	r3, [pc, #196]	; (1000dfb8 <ble_device_init+0x280>)
1000def4:	4798      	blx	r3
1000def6:	2800      	cmp	r0, #0
1000def8:	d005      	beq.n	1000df06 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000defa:	481d      	ldr	r0, [pc, #116]	; (1000df70 <ble_device_init+0x238>)
1000defc:	4b1d      	ldr	r3, [pc, #116]	; (1000df74 <ble_device_init+0x23c>)
1000defe:	4798      	blx	r3
1000df00:	482e      	ldr	r0, [pc, #184]	; (1000dfbc <ble_device_init+0x284>)
1000df02:	4b1e      	ldr	r3, [pc, #120]	; (1000df7c <ble_device_init+0x244>)
1000df04:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000df06:	b00d      	add	sp, #52	; 0x34
1000df08:	bc3c      	pop	{r2, r3, r4, r5}
1000df0a:	4690      	mov	r8, r2
1000df0c:	4699      	mov	r9, r3
1000df0e:	46a2      	mov	sl, r4
1000df10:	46ab      	mov	fp, r5
1000df12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df14:	10017a28 	.word	0x10017a28
1000df18:	10017a30 	.word	0x10017a30
1000df1c:	100148f1 	.word	0x100148f1
1000df20:	10019174 	.word	0x10019174
1000df24:	000004e2 	.word	0x000004e2
1000df28:	10017548 	.word	0x10017548
1000df2c:	10017a2c 	.word	0x10017a2c
1000df30:	100191ac 	.word	0x100191ac
1000df34:	100191a4 	.word	0x100191a4
1000df38:	100194e0 	.word	0x100194e0
1000df3c:	10017148 	.word	0x10017148
1000df40:	10017a38 	.word	0x10017a38
1000df44:	10019188 	.word	0x10019188
1000df48:	1001914c 	.word	0x1001914c
1000df4c:	10019160 	.word	0x10019160
1000df50:	10018eb4 	.word	0x10018eb4
1000df54:	100191a8 	.word	0x100191a8
1000df58:	10018eb0 	.word	0x10018eb0
1000df5c:	10019138 	.word	0x10019138
1000df60:	100196ec 	.word	0x100196ec
1000df64:	10018ec8 	.word	0x10018ec8
1000df68:	10019134 	.word	0x10019134
1000df6c:	1000fd2d 	.word	0x1000fd2d
1000df70:	10015d04 	.word	0x10015d04
1000df74:	10014b59 	.word	0x10014b59
1000df78:	10016ae4 	.word	0x10016ae4
1000df7c:	10014a39 	.word	0x10014a39
1000df80:	10016b10 	.word	0x10016b10
1000df84:	10016d64 	.word	0x10016d64
1000df88:	1000dc69 	.word	0x1000dc69
1000df8c:	10016700 	.word	0x10016700
1000df90:	10016b58 	.word	0x10016b58
1000df94:	1000fc45 	.word	0x1000fc45
1000df98:	10016b64 	.word	0x10016b64
1000df9c:	100166f0 	.word	0x100166f0
1000dfa0:	100148df 	.word	0x100148df
1000dfa4:	1000fc79 	.word	0x1000fc79
1000dfa8:	10016b7c 	.word	0x10016b7c
1000dfac:	00003a98 	.word	0x00003a98
1000dfb0:	1000fc9d 	.word	0x1000fc9d
1000dfb4:	10016ba8 	.word	0x10016ba8
1000dfb8:	1000fee1 	.word	0x1000fee1
1000dfbc:	10016be4 	.word	0x10016be4

1000dfc0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000dfc0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000dfc2:	2200      	movs	r2, #0
1000dfc4:	2100      	movs	r1, #0
1000dfc6:	4b06      	ldr	r3, [pc, #24]	; (1000dfe0 <ble_send_slave_sec_request+0x20>)
1000dfc8:	4798      	blx	r3
1000dfca:	2800      	cmp	r0, #0
1000dfcc:	d006      	beq.n	1000dfdc <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000dfce:	4805      	ldr	r0, [pc, #20]	; (1000dfe4 <ble_send_slave_sec_request+0x24>)
1000dfd0:	4b05      	ldr	r3, [pc, #20]	; (1000dfe8 <ble_send_slave_sec_request+0x28>)
1000dfd2:	4798      	blx	r3
1000dfd4:	4805      	ldr	r0, [pc, #20]	; (1000dfec <ble_send_slave_sec_request+0x2c>)
1000dfd6:	4b06      	ldr	r3, [pc, #24]	; (1000dff0 <ble_send_slave_sec_request+0x30>)
1000dfd8:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000dfda:	20e2      	movs	r0, #226	; 0xe2
}
1000dfdc:	bd10      	pop	{r4, pc}
1000dfde:	46c0      	nop			; (mov r8, r8)
1000dfe0:	10010cc5 	.word	0x10010cc5
1000dfe4:	10015d04 	.word	0x10015d04
1000dfe8:	10014b59 	.word	0x10014b59
1000dfec:	10016c34 	.word	0x10016c34
1000dff0:	10014a39 	.word	0x10014a39

1000dff4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000dff4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dff6:	465f      	mov	r7, fp
1000dff8:	464e      	mov	r6, r9
1000dffa:	4645      	mov	r5, r8
1000dffc:	b4e0      	push	{r5, r6, r7}
1000dffe:	b09a      	sub	sp, #104	; 0x68
1000e000:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e002:	7a86      	ldrb	r6, [r0, #10]
1000e004:	2e00      	cmp	r6, #0
1000e006:	d000      	beq.n	1000e00a <ble_connected_state_handler+0x16>
1000e008:	e0c6      	b.n	1000e198 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e00a:	4875      	ldr	r0, [pc, #468]	; (1000e1e0 <ble_connected_state_handler+0x1ec>)
1000e00c:	4f75      	ldr	r7, [pc, #468]	; (1000e1e4 <ble_connected_state_handler+0x1f0>)
1000e00e:	47b8      	blx	r7
1000e010:	792b      	ldrb	r3, [r5, #4]
1000e012:	796a      	ldrb	r2, [r5, #5]
1000e014:	79a9      	ldrb	r1, [r5, #6]
1000e016:	7868      	ldrb	r0, [r5, #1]
1000e018:	9002      	str	r0, [sp, #8]
1000e01a:	78a8      	ldrb	r0, [r5, #2]
1000e01c:	9001      	str	r0, [sp, #4]
1000e01e:	78e8      	ldrb	r0, [r5, #3]
1000e020:	9000      	str	r0, [sp, #0]
1000e022:	4871      	ldr	r0, [pc, #452]	; (1000e1e8 <ble_connected_state_handler+0x1f4>)
1000e024:	4c71      	ldr	r4, [pc, #452]	; (1000e1ec <ble_connected_state_handler+0x1f8>)
1000e026:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e028:	486d      	ldr	r0, [pc, #436]	; (1000e1e0 <ble_connected_state_handler+0x1ec>)
1000e02a:	47b8      	blx	r7
1000e02c:	8929      	ldrh	r1, [r5, #8]
1000e02e:	4870      	ldr	r0, [pc, #448]	; (1000e1f0 <ble_connected_state_handler+0x1fc>)
1000e030:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e032:	2212      	movs	r2, #18
1000e034:	0029      	movs	r1, r5
1000e036:	486f      	ldr	r0, [pc, #444]	; (1000e1f4 <ble_connected_state_handler+0x200>)
1000e038:	4b6f      	ldr	r3, [pc, #444]	; (1000e1f8 <ble_connected_state_handler+0x204>)
1000e03a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e03c:	9504      	str	r5, [sp, #16]
1000e03e:	2207      	movs	r2, #7
1000e040:	0029      	movs	r1, r5
1000e042:	486e      	ldr	r0, [pc, #440]	; (1000e1fc <ble_connected_state_handler+0x208>)
1000e044:	4b6e      	ldr	r3, [pc, #440]	; (1000e200 <ble_connected_state_handler+0x20c>)
1000e046:	4798      	blx	r3
1000e048:	2800      	cmp	r0, #0
1000e04a:	d100      	bne.n	1000e04e <ble_connected_state_handler+0x5a>
1000e04c:	e0ad      	b.n	1000e1aa <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e04e:	782b      	ldrb	r3, [r5, #0]
1000e050:	2b02      	cmp	r3, #2
1000e052:	d000      	beq.n	1000e056 <ble_connected_state_handler+0x62>
1000e054:	e0a9      	b.n	1000e1aa <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e056:	2250      	movs	r2, #80	; 0x50
1000e058:	2100      	movs	r1, #0
1000e05a:	a806      	add	r0, sp, #24
1000e05c:	4b69      	ldr	r3, [pc, #420]	; (1000e204 <ble_connected_state_handler+0x210>)
1000e05e:	4798      	blx	r3
1000e060:	4f69      	ldr	r7, [pc, #420]	; (1000e208 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e062:	2300      	movs	r3, #0
1000e064:	e00b      	b.n	1000e07e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e066:	1c59      	adds	r1, r3, #1
1000e068:	7814      	ldrb	r4, [r2, #0]
1000e06a:	a806      	add	r0, sp, #24
1000e06c:	54c4      	strb	r4, [r0, r3]
1000e06e:	3201      	adds	r2, #1
1000e070:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e072:	42b3      	cmp	r3, r6
1000e074:	d1f7      	bne.n	1000e066 <ble_connected_state_handler+0x72>
1000e076:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e078:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e07a:	2b50      	cmp	r3, #80	; 0x50
1000e07c:	d004      	beq.n	1000e088 <ble_connected_state_handler+0x94>
1000e07e:	001e      	movs	r6, r3
1000e080:	3610      	adds	r6, #16
1000e082:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e084:	003a      	movs	r2, r7
1000e086:	e7ee      	b.n	1000e066 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e088:	aa06      	add	r2, sp, #24
1000e08a:	0029      	movs	r1, r5
1000e08c:	2005      	movs	r0, #5
1000e08e:	4b5f      	ldr	r3, [pc, #380]	; (1000e20c <ble_connected_state_handler+0x218>)
1000e090:	4798      	blx	r3
1000e092:	1e06      	subs	r6, r0, #0
1000e094:	d100      	bne.n	1000e098 <ble_connected_state_handler+0xa4>
1000e096:	e09c      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e098:	4851      	ldr	r0, [pc, #324]	; (1000e1e0 <ble_connected_state_handler+0x1ec>)
1000e09a:	4b52      	ldr	r3, [pc, #328]	; (1000e1e4 <ble_connected_state_handler+0x1f0>)
1000e09c:	4798      	blx	r3
1000e09e:	485c      	ldr	r0, [pc, #368]	; (1000e210 <ble_connected_state_handler+0x21c>)
1000e0a0:	4b52      	ldr	r3, [pc, #328]	; (1000e1ec <ble_connected_state_handler+0x1f8>)
1000e0a2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e0a4:	26e2      	movs	r6, #226	; 0xe2
1000e0a6:	e094      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
1000e0a8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e0aa:	9405      	str	r4, [sp, #20]
1000e0ac:	2207      	movs	r2, #7
1000e0ae:	9904      	ldr	r1, [sp, #16]
1000e0b0:	4648      	mov	r0, r9
1000e0b2:	47d8      	blx	fp
1000e0b4:	2800      	cmp	r0, #0
1000e0b6:	d109      	bne.n	1000e0cc <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e0b8:	9a05      	ldr	r2, [sp, #20]
1000e0ba:	0153      	lsls	r3, r2, #5
1000e0bc:	1a9b      	subs	r3, r3, r2
1000e0be:	009a      	lsls	r2, r3, #2
1000e0c0:	4b54      	ldr	r3, [pc, #336]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e0c2:	189b      	adds	r3, r3, r2
1000e0c4:	335e      	adds	r3, #94	; 0x5e
1000e0c6:	2202      	movs	r2, #2
1000e0c8:	701a      	strb	r2, [r3, #0]
1000e0ca:	e02b      	b.n	1000e124 <ble_connected_state_handler+0x130>
1000e0cc:	3401      	adds	r4, #1
1000e0ce:	237c      	movs	r3, #124	; 0x7c
1000e0d0:	469c      	mov	ip, r3
1000e0d2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e0d4:	2c05      	cmp	r4, #5
1000e0d6:	d1e7      	bne.n	1000e0a8 <ble_connected_state_handler+0xb4>
1000e0d8:	e072      	b.n	1000e1c0 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e0da:	001c      	movs	r4, r3
1000e0dc:	7811      	ldrb	r1, [r2, #0]
1000e0de:	2900      	cmp	r1, #0
1000e0e0:	d11a      	bne.n	1000e118 <ble_connected_state_handler+0x124>
1000e0e2:	e001      	b.n	1000e0e8 <ble_connected_state_handler+0xf4>
1000e0e4:	2400      	movs	r4, #0
1000e0e6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e0e8:	0163      	lsls	r3, r4, #5
1000e0ea:	4699      	mov	r9, r3
1000e0ec:	1b18      	subs	r0, r3, r4
1000e0ee:	0080      	lsls	r0, r0, #2
1000e0f0:	4b48      	ldr	r3, [pc, #288]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e0f2:	4698      	mov	r8, r3
1000e0f4:	4440      	add	r0, r8
1000e0f6:	2212      	movs	r2, #18
1000e0f8:	0029      	movs	r1, r5
1000e0fa:	4b3f      	ldr	r3, [pc, #252]	; (1000e1f8 <ble_connected_state_handler+0x204>)
1000e0fc:	4798      	blx	r3
						ble_device_count++;
1000e0fe:	4a46      	ldr	r2, [pc, #280]	; (1000e218 <ble_connected_state_handler+0x224>)
1000e100:	7813      	ldrb	r3, [r2, #0]
1000e102:	3301      	adds	r3, #1
1000e104:	b2db      	uxtb	r3, r3
1000e106:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e108:	464b      	mov	r3, r9
1000e10a:	1b1b      	subs	r3, r3, r4
1000e10c:	009b      	lsls	r3, r3, #2
1000e10e:	4443      	add	r3, r8
1000e110:	335e      	adds	r3, #94	; 0x5e
1000e112:	2202      	movs	r2, #2
1000e114:	701a      	strb	r2, [r3, #0]
						break;
1000e116:	e005      	b.n	1000e124 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e118:	1c79      	adds	r1, r7, #1
1000e11a:	b2cf      	uxtb	r7, r1
1000e11c:	3301      	adds	r3, #1
1000e11e:	327c      	adds	r2, #124	; 0x7c
1000e120:	2f05      	cmp	r7, #5
1000e122:	d1da      	bne.n	1000e0da <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e124:	2207      	movs	r2, #7
1000e126:	0029      	movs	r1, r5
1000e128:	4834      	ldr	r0, [pc, #208]	; (1000e1fc <ble_connected_state_handler+0x208>)
1000e12a:	4b35      	ldr	r3, [pc, #212]	; (1000e200 <ble_connected_state_handler+0x20c>)
1000e12c:	4798      	blx	r3
1000e12e:	2800      	cmp	r0, #0
1000e130:	d10c      	bne.n	1000e14c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e132:	017b      	lsls	r3, r7, #5
1000e134:	1bdb      	subs	r3, r3, r7
1000e136:	009b      	lsls	r3, r3, #2
1000e138:	4a36      	ldr	r2, [pc, #216]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e13a:	18d3      	adds	r3, r2, r3
1000e13c:	2205      	movs	r2, #5
1000e13e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e140:	3202      	adds	r2, #2
1000e142:	2100      	movs	r1, #0
1000e144:	482d      	ldr	r0, [pc, #180]	; (1000e1fc <ble_connected_state_handler+0x208>)
1000e146:	4b2f      	ldr	r3, [pc, #188]	; (1000e204 <ble_connected_state_handler+0x210>)
1000e148:	4798      	blx	r3
1000e14a:	e042      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e14c:	4b31      	ldr	r3, [pc, #196]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e14e:	4698      	mov	r8, r3
1000e150:	017c      	lsls	r4, r7, #5
1000e152:	1be3      	subs	r3, r4, r7
1000e154:	009b      	lsls	r3, r3, #2
1000e156:	4443      	add	r3, r8
1000e158:	220a      	movs	r2, #10
1000e15a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e15c:	3a03      	subs	r2, #3
1000e15e:	2100      	movs	r1, #0
1000e160:	4826      	ldr	r0, [pc, #152]	; (1000e1fc <ble_connected_state_handler+0x208>)
1000e162:	4b28      	ldr	r3, [pc, #160]	; (1000e204 <ble_connected_state_handler+0x210>)
1000e164:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e166:	1be4      	subs	r4, r4, r7
1000e168:	00a4      	lsls	r4, r4, #2
1000e16a:	4444      	add	r4, r8
1000e16c:	7ca3      	ldrb	r3, [r4, #18]
1000e16e:	2b0a      	cmp	r3, #10
1000e170:	d12f      	bne.n	1000e1d2 <ble_connected_state_handler+0x1de>
1000e172:	e00d      	b.n	1000e190 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e174:	481a      	ldr	r0, [pc, #104]	; (1000e1e0 <ble_connected_state_handler+0x1ec>)
1000e176:	4b1b      	ldr	r3, [pc, #108]	; (1000e1e4 <ble_connected_state_handler+0x1f0>)
1000e178:	4798      	blx	r3
1000e17a:	4b27      	ldr	r3, [pc, #156]	; (1000e218 <ble_connected_state_handler+0x224>)
1000e17c:	7819      	ldrb	r1, [r3, #0]
1000e17e:	b2c9      	uxtb	r1, r1
1000e180:	4826      	ldr	r0, [pc, #152]	; (1000e21c <ble_connected_state_handler+0x228>)
1000e182:	4b1a      	ldr	r3, [pc, #104]	; (1000e1ec <ble_connected_state_handler+0x1f8>)
1000e184:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e186:	8928      	ldrh	r0, [r5, #8]
1000e188:	2113      	movs	r1, #19
1000e18a:	4b25      	ldr	r3, [pc, #148]	; (1000e220 <ble_connected_state_handler+0x22c>)
1000e18c:	4798      	blx	r3
1000e18e:	e020      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e190:	8928      	ldrh	r0, [r5, #8]
1000e192:	4b24      	ldr	r3, [pc, #144]	; (1000e224 <ble_connected_state_handler+0x230>)
1000e194:	4798      	blx	r3
1000e196:	e01c      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e198:	4811      	ldr	r0, [pc, #68]	; (1000e1e0 <ble_connected_state_handler+0x1ec>)
1000e19a:	4b12      	ldr	r3, [pc, #72]	; (1000e1e4 <ble_connected_state_handler+0x1f0>)
1000e19c:	4798      	blx	r3
1000e19e:	7aa9      	ldrb	r1, [r5, #10]
1000e1a0:	4821      	ldr	r0, [pc, #132]	; (1000e228 <ble_connected_state_handler+0x234>)
1000e1a2:	4b12      	ldr	r3, [pc, #72]	; (1000e1ec <ble_connected_state_handler+0x1f8>)
1000e1a4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e1a6:	2600      	movs	r6, #0
1000e1a8:	e013      	b.n	1000e1d2 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e1aa:	4b1b      	ldr	r3, [pc, #108]	; (1000e218 <ble_connected_state_handler+0x224>)
1000e1ac:	781b      	ldrb	r3, [r3, #0]
1000e1ae:	b2db      	uxtb	r3, r3
1000e1b0:	2b04      	cmp	r3, #4
1000e1b2:	d8df      	bhi.n	1000e174 <ble_connected_state_handler+0x180>
1000e1b4:	4b17      	ldr	r3, [pc, #92]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e1b6:	4699      	mov	r9, r3
1000e1b8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e1ba:	4b11      	ldr	r3, [pc, #68]	; (1000e200 <ble_connected_state_handler+0x20c>)
1000e1bc:	469b      	mov	fp, r3
1000e1be:	e773      	b.n	1000e0a8 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e1c0:	235e      	movs	r3, #94	; 0x5e
1000e1c2:	4a14      	ldr	r2, [pc, #80]	; (1000e214 <ble_connected_state_handler+0x220>)
1000e1c4:	5cd3      	ldrb	r3, [r2, r3]
1000e1c6:	2b00      	cmp	r3, #0
1000e1c8:	d08c      	beq.n	1000e0e4 <ble_connected_state_handler+0xf0>
1000e1ca:	4a18      	ldr	r2, [pc, #96]	; (1000e22c <ble_connected_state_handler+0x238>)
1000e1cc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e1ce:	2701      	movs	r7, #1
1000e1d0:	e783      	b.n	1000e0da <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e1d2:	0030      	movs	r0, r6
1000e1d4:	b01a      	add	sp, #104	; 0x68
1000e1d6:	bc1c      	pop	{r2, r3, r4}
1000e1d8:	4690      	mov	r8, r2
1000e1da:	4699      	mov	r9, r3
1000e1dc:	46a3      	mov	fp, r4
1000e1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1e0:	10015d04 	.word	0x10015d04
1000e1e4:	10014b59 	.word	0x10014b59
1000e1e8:	10016c54 	.word	0x10016c54
1000e1ec:	10014a39 	.word	0x10014a39
1000e1f0:	10016c98 	.word	0x10016c98
1000e1f4:	10019174 	.word	0x10019174
1000e1f8:	100148df 	.word	0x100148df
1000e1fc:	10017a30 	.word	0x10017a30
1000e200:	100148c1 	.word	0x100148c1
1000e204:	100148f1 	.word	0x100148f1
1000e208:	10018f0e 	.word	0x10018f0e
1000e20c:	1001014d 	.word	0x1001014d
1000e210:	10016cb0 	.word	0x10016cb0
1000e214:	10018ec8 	.word	0x10018ec8
1000e218:	10019134 	.word	0x10019134
1000e21c:	10016cd4 	.word	0x10016cd4
1000e220:	10010121 	.word	0x10010121
1000e224:	1000dfc1 	.word	0x1000dfc1
1000e228:	10016d10 	.word	0x10016d10
1000e22c:	10018fa2 	.word	0x10018fa2

1000e230 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e230:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e232:	4647      	mov	r7, r8
1000e234:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e236:	7803      	ldrb	r3, [r0, #0]
1000e238:	2b00      	cmp	r3, #0
1000e23a:	d141      	bne.n	1000e2c0 <ble_resolv_rand_addr_handler+0x90>
1000e23c:	4d2f      	ldr	r5, [pc, #188]	; (1000e2fc <ble_resolv_rand_addr_handler+0xcc>)
1000e23e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e240:	1c46      	adds	r6, r0, #1
1000e242:	4f2f      	ldr	r7, [pc, #188]	; (1000e300 <ble_resolv_rand_addr_handler+0xd0>)
1000e244:	2210      	movs	r2, #16
1000e246:	0029      	movs	r1, r5
1000e248:	0030      	movs	r0, r6
1000e24a:	47b8      	blx	r7
1000e24c:	2800      	cmp	r0, #0
1000e24e:	d03f      	beq.n	1000e2d0 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e250:	3401      	adds	r4, #1
1000e252:	b2e4      	uxtb	r4, r4
1000e254:	357c      	adds	r5, #124	; 0x7c
1000e256:	2c05      	cmp	r4, #5
1000e258:	d1f4      	bne.n	1000e244 <ble_resolv_rand_addr_handler+0x14>
1000e25a:	e031      	b.n	1000e2c0 <ble_resolv_rand_addr_handler+0x90>
1000e25c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e25e:	001c      	movs	r4, r3
1000e260:	7811      	ldrb	r1, [r2, #0]
1000e262:	2900      	cmp	r1, #0
1000e264:	d122      	bne.n	1000e2ac <ble_resolv_rand_addr_handler+0x7c>
1000e266:	e001      	b.n	1000e26c <ble_resolv_rand_addr_handler+0x3c>
1000e268:	2400      	movs	r4, #0
1000e26a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e26c:	4b25      	ldr	r3, [pc, #148]	; (1000e304 <ble_resolv_rand_addr_handler+0xd4>)
1000e26e:	4698      	mov	r8, r3
1000e270:	0166      	lsls	r6, r4, #5
1000e272:	1b37      	subs	r7, r6, r4
1000e274:	00bf      	lsls	r7, r7, #2
1000e276:	4447      	add	r7, r8
1000e278:	2212      	movs	r2, #18
1000e27a:	4923      	ldr	r1, [pc, #140]	; (1000e308 <ble_resolv_rand_addr_handler+0xd8>)
1000e27c:	0038      	movs	r0, r7
1000e27e:	4b23      	ldr	r3, [pc, #140]	; (1000e30c <ble_resolv_rand_addr_handler+0xdc>)
1000e280:	4798      	blx	r3
				ble_device_count++;
1000e282:	4a23      	ldr	r2, [pc, #140]	; (1000e310 <ble_resolv_rand_addr_handler+0xe0>)
1000e284:	7813      	ldrb	r3, [r2, #0]
1000e286:	3301      	adds	r3, #1
1000e288:	b2db      	uxtb	r3, r3
1000e28a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e28c:	375e      	adds	r7, #94	; 0x5e
1000e28e:	2302      	movs	r3, #2
1000e290:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e292:	1b34      	subs	r4, r6, r4
1000e294:	00a4      	lsls	r4, r4, #2
1000e296:	4444      	add	r4, r8
1000e298:	3308      	adds	r3, #8
1000e29a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e29c:	016b      	lsls	r3, r5, #5
1000e29e:	1b5d      	subs	r5, r3, r5
1000e2a0:	00ad      	lsls	r5, r5, #2
1000e2a2:	4445      	add	r5, r8
1000e2a4:	7cab      	ldrb	r3, [r5, #18]
1000e2a6:	2b0a      	cmp	r3, #10
1000e2a8:	d123      	bne.n	1000e2f2 <ble_resolv_rand_addr_handler+0xc2>
1000e2aa:	e004      	b.n	1000e2b6 <ble_resolv_rand_addr_handler+0x86>
1000e2ac:	3301      	adds	r3, #1
1000e2ae:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e2b0:	2b05      	cmp	r3, #5
1000e2b2:	d1d3      	bne.n	1000e25c <ble_resolv_rand_addr_handler+0x2c>
1000e2b4:	e01d      	b.n	1000e2f2 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e2b6:	4b14      	ldr	r3, [pc, #80]	; (1000e308 <ble_resolv_rand_addr_handler+0xd8>)
1000e2b8:	8918      	ldrh	r0, [r3, #8]
1000e2ba:	4b16      	ldr	r3, [pc, #88]	; (1000e314 <ble_resolv_rand_addr_handler+0xe4>)
1000e2bc:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000e2be:	e018      	b.n	1000e2f2 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e2c0:	235e      	movs	r3, #94	; 0x5e
1000e2c2:	4a10      	ldr	r2, [pc, #64]	; (1000e304 <ble_resolv_rand_addr_handler+0xd4>)
1000e2c4:	5cd3      	ldrb	r3, [r2, r3]
1000e2c6:	2b00      	cmp	r3, #0
1000e2c8:	d0ce      	beq.n	1000e268 <ble_resolv_rand_addr_handler+0x38>
1000e2ca:	4a13      	ldr	r2, [pc, #76]	; (1000e318 <ble_resolv_rand_addr_handler+0xe8>)
1000e2cc:	2301      	movs	r3, #1
1000e2ce:	e7c5      	b.n	1000e25c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e2d0:	480c      	ldr	r0, [pc, #48]	; (1000e304 <ble_resolv_rand_addr_handler+0xd4>)
1000e2d2:	0163      	lsls	r3, r4, #5
1000e2d4:	1b1a      	subs	r2, r3, r4
1000e2d6:	0092      	lsls	r2, r2, #2
1000e2d8:	1882      	adds	r2, r0, r2
1000e2da:	0011      	movs	r1, r2
1000e2dc:	315e      	adds	r1, #94	; 0x5e
1000e2de:	2502      	movs	r5, #2
1000e2e0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e2e2:	210a      	movs	r1, #10
1000e2e4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e2e6:	0010      	movs	r0, r2
1000e2e8:	2212      	movs	r2, #18
1000e2ea:	4907      	ldr	r1, [pc, #28]	; (1000e308 <ble_resolv_rand_addr_handler+0xd8>)
1000e2ec:	4b07      	ldr	r3, [pc, #28]	; (1000e30c <ble_resolv_rand_addr_handler+0xdc>)
1000e2ee:	4798      	blx	r3
1000e2f0:	e7e1      	b.n	1000e2b6 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e2f2:	2000      	movs	r0, #0
1000e2f4:	bc04      	pop	{r2}
1000e2f6:	4690      	mov	r8, r2
1000e2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2fa:	46c0      	nop			; (mov r8, r8)
1000e2fc:	10018f0e 	.word	0x10018f0e
1000e300:	100148c1 	.word	0x100148c1
1000e304:	10018ec8 	.word	0x10018ec8
1000e308:	10019174 	.word	0x10019174
1000e30c:	100148df 	.word	0x100148df
1000e310:	10019134 	.word	0x10019134
1000e314:	1000dfc1 	.word	0x1000dfc1
1000e318:	10018fa2 	.word	0x10018fa2

1000e31c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e31e:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000e320:	283b      	cmp	r0, #59	; 0x3b
1000e322:	d872      	bhi.n	1000e40a <ble_event_manager+0xee>
1000e324:	0083      	lsls	r3, r0, #2
1000e326:	4a3c      	ldr	r2, [pc, #240]	; (1000e418 <ble_event_manager+0xfc>)
1000e328:	58d3      	ldr	r3, [r2, r3]
1000e32a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e32c:	0084      	lsls	r4, r0, #2
1000e32e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e330:	4f3a      	ldr	r7, [pc, #232]	; (1000e41c <ble_event_manager+0x100>)
1000e332:	59bb      	ldr	r3, [r7, r6]
1000e334:	2b00      	cmp	r3, #0
1000e336:	d004      	beq.n	1000e342 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e338:	591b      	ldr	r3, [r3, r4]
1000e33a:	2b00      	cmp	r3, #0
1000e33c:	d001      	beq.n	1000e342 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000e33e:	0028      	movs	r0, r5
1000e340:	4798      	blx	r3
1000e342:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e344:	2e14      	cmp	r6, #20
1000e346:	d1f4      	bne.n	1000e332 <ble_event_manager+0x16>
1000e348:	e065      	b.n	1000e416 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e34a:	3813      	subs	r0, #19
1000e34c:	b2c4      	uxtb	r4, r0
1000e34e:	00a4      	lsls	r4, r4, #2
1000e350:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e352:	4f33      	ldr	r7, [pc, #204]	; (1000e420 <ble_event_manager+0x104>)
1000e354:	59bb      	ldr	r3, [r7, r6]
1000e356:	2b00      	cmp	r3, #0
1000e358:	d004      	beq.n	1000e364 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e35a:	591b      	ldr	r3, [r3, r4]
1000e35c:	2b00      	cmp	r3, #0
1000e35e:	d001      	beq.n	1000e364 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000e360:	0028      	movs	r0, r5
1000e362:	4798      	blx	r3
1000e364:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e366:	2e14      	cmp	r6, #20
1000e368:	d1f4      	bne.n	1000e354 <ble_event_manager+0x38>
1000e36a:	e054      	b.n	1000e416 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e36c:	381d      	subs	r0, #29
1000e36e:	b2c4      	uxtb	r4, r0
1000e370:	00a4      	lsls	r4, r4, #2
1000e372:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e374:	4f2b      	ldr	r7, [pc, #172]	; (1000e424 <ble_event_manager+0x108>)
1000e376:	59bb      	ldr	r3, [r7, r6]
1000e378:	2b00      	cmp	r3, #0
1000e37a:	d004      	beq.n	1000e386 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e37c:	591b      	ldr	r3, [r3, r4]
1000e37e:	2b00      	cmp	r3, #0
1000e380:	d001      	beq.n	1000e386 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000e382:	0028      	movs	r0, r5
1000e384:	4798      	blx	r3
1000e386:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e388:	2e14      	cmp	r6, #20
1000e38a:	d1f4      	bne.n	1000e376 <ble_event_manager+0x5a>
1000e38c:	e043      	b.n	1000e416 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e38e:	3827      	subs	r0, #39	; 0x27
1000e390:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e392:	4b25      	ldr	r3, [pc, #148]	; (1000e428 <ble_event_manager+0x10c>)
1000e394:	681b      	ldr	r3, [r3, #0]
1000e396:	2b00      	cmp	r3, #0
1000e398:	d03d      	beq.n	1000e416 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e39a:	0080      	lsls	r0, r0, #2
1000e39c:	58c3      	ldr	r3, [r0, r3]
1000e39e:	2b00      	cmp	r3, #0
1000e3a0:	d039      	beq.n	1000e416 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e3a2:	0008      	movs	r0, r1
1000e3a4:	4798      	blx	r3
1000e3a6:	e036      	b.n	1000e416 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e3a8:	382d      	subs	r0, #45	; 0x2d
1000e3aa:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e3ac:	4b1f      	ldr	r3, [pc, #124]	; (1000e42c <ble_event_manager+0x110>)
1000e3ae:	681b      	ldr	r3, [r3, #0]
1000e3b0:	2b00      	cmp	r3, #0
1000e3b2:	d030      	beq.n	1000e416 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e3b4:	0080      	lsls	r0, r0, #2
1000e3b6:	58c3      	ldr	r3, [r0, r3]
1000e3b8:	2b00      	cmp	r3, #0
1000e3ba:	d02c      	beq.n	1000e416 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e3bc:	0008      	movs	r0, r1
1000e3be:	4798      	blx	r3
1000e3c0:	e029      	b.n	1000e416 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e3c2:	3836      	subs	r0, #54	; 0x36
1000e3c4:	b2c4      	uxtb	r4, r0
1000e3c6:	00a4      	lsls	r4, r4, #2
1000e3c8:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e3ca:	4f19      	ldr	r7, [pc, #100]	; (1000e430 <ble_event_manager+0x114>)
1000e3cc:	59bb      	ldr	r3, [r7, r6]
1000e3ce:	2b00      	cmp	r3, #0
1000e3d0:	d004      	beq.n	1000e3dc <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e3d2:	591b      	ldr	r3, [r3, r4]
1000e3d4:	2b00      	cmp	r3, #0
1000e3d6:	d001      	beq.n	1000e3dc <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000e3d8:	0028      	movs	r0, r5
1000e3da:	4798      	blx	r3
1000e3dc:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e3de:	2e14      	cmp	r6, #20
1000e3e0:	d1f4      	bne.n	1000e3cc <ble_event_manager+0xb0>
1000e3e2:	e018      	b.n	1000e416 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e3e4:	3838      	subs	r0, #56	; 0x38
1000e3e6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e3e8:	4b12      	ldr	r3, [pc, #72]	; (1000e434 <ble_event_manager+0x118>)
1000e3ea:	681b      	ldr	r3, [r3, #0]
1000e3ec:	2b00      	cmp	r3, #0
1000e3ee:	d012      	beq.n	1000e416 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e3f0:	0080      	lsls	r0, r0, #2
1000e3f2:	58c3      	ldr	r3, [r0, r3]
1000e3f4:	2b00      	cmp	r3, #0
1000e3f6:	d00e      	beq.n	1000e416 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e3f8:	0008      	movs	r0, r1
1000e3fa:	4798      	blx	r3
1000e3fc:	e00b      	b.n	1000e416 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e3fe:	4b0e      	ldr	r3, [pc, #56]	; (1000e438 <ble_event_manager+0x11c>)
1000e400:	681b      	ldr	r3, [r3, #0]
1000e402:	2b00      	cmp	r3, #0
1000e404:	d007      	beq.n	1000e416 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000e406:	4798      	blx	r3
1000e408:	e005      	b.n	1000e416 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000e40a:	4d0c      	ldr	r5, [pc, #48]	; (1000e43c <ble_event_manager+0x120>)
1000e40c:	0028      	movs	r0, r5
1000e40e:	4c0c      	ldr	r4, [pc, #48]	; (1000e440 <ble_event_manager+0x124>)
1000e410:	47a0      	blx	r4
1000e412:	0028      	movs	r0, r5
1000e414:	47a0      	blx	r4
	}
	break;		
	}
}
1000e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e418:	10016600 	.word	0x10016600
1000e41c:	1001914c 	.word	0x1001914c
1000e420:	10019160 	.word	0x10019160
1000e424:	10018eb4 	.word	0x10018eb4
1000e428:	100191a8 	.word	0x100191a8
1000e42c:	10018eb0 	.word	0x10018eb0
1000e430:	10019138 	.word	0x10019138
1000e434:	100196ec 	.word	0x100196ec
1000e438:	10017a28 	.word	0x10017a28
1000e43c:	10015d04 	.word	0x10015d04
1000e440:	10014b59 	.word	0x10014b59

1000e444 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e444:	b570      	push	{r4, r5, r6, lr}
1000e446:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e448:	4b0d      	ldr	r3, [pc, #52]	; (1000e480 <ble_event_task+0x3c>)
1000e44a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e44c:	2b01      	cmp	r3, #1
1000e44e:	d101      	bne.n	1000e454 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e450:	4b0c      	ldr	r3, [pc, #48]	; (1000e484 <ble_event_task+0x40>)
1000e452:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e454:	0022      	movs	r2, r4
1000e456:	490c      	ldr	r1, [pc, #48]	; (1000e488 <ble_event_task+0x44>)
1000e458:	480c      	ldr	r0, [pc, #48]	; (1000e48c <ble_event_task+0x48>)
1000e45a:	4b0d      	ldr	r3, [pc, #52]	; (1000e490 <ble_event_task+0x4c>)
1000e45c:	4798      	blx	r3
1000e45e:	0004      	movs	r4, r0
1000e460:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e462:	4b07      	ldr	r3, [pc, #28]	; (1000e480 <ble_event_task+0x3c>)
1000e464:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e466:	2b01      	cmp	r3, #1
1000e468:	d101      	bne.n	1000e46e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e46a:	4b0a      	ldr	r3, [pc, #40]	; (1000e494 <ble_event_task+0x50>)
1000e46c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e46e:	2d00      	cmp	r5, #0
1000e470:	d104      	bne.n	1000e47c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e472:	4b06      	ldr	r3, [pc, #24]	; (1000e48c <ble_event_task+0x48>)
1000e474:	7818      	ldrb	r0, [r3, #0]
1000e476:	4904      	ldr	r1, [pc, #16]	; (1000e488 <ble_event_task+0x44>)
1000e478:	4b07      	ldr	r3, [pc, #28]	; (1000e498 <ble_event_task+0x54>)
1000e47a:	4798      	blx	r3
    }
    
    return status;
}
1000e47c:	0020      	movs	r0, r4
1000e47e:	bd70      	pop	{r4, r5, r6, pc}
1000e480:	10017a37 	.word	0x10017a37
1000e484:	1000ee39 	.word	0x1000ee39
1000e488:	100194e0 	.word	0x100194e0
1000e48c:	100191a4 	.word	0x100191a4
1000e490:	1000f4d5 	.word	0x1000f4d5
1000e494:	1000ee11 	.word	0x1000ee11
1000e498:	1000e31d 	.word	0x1000e31d

1000e49c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e49c:	b510      	push	{r4, lr}
1000e49e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e4a0:	ac08      	add	r4, sp, #32
1000e4a2:	2203      	movs	r2, #3
1000e4a4:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e4a6:	2302      	movs	r3, #2
1000e4a8:	70a3      	strb	r3, [r4, #2]
1000e4aa:	3316      	adds	r3, #22
1000e4ac:	70e3      	strb	r3, [r4, #3]
1000e4ae:	7122      	strb	r2, [r4, #4]
1000e4b0:	7163      	strb	r3, [r4, #5]
1000e4b2:	3201      	adds	r2, #1
1000e4b4:	71a2      	strb	r2, [r4, #6]
1000e4b6:	71e3      	strb	r3, [r4, #7]
1000e4b8:	320b      	adds	r2, #11
1000e4ba:	7222      	strb	r2, [r4, #8]
1000e4bc:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e4be:	3b0f      	subs	r3, #15
1000e4c0:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e4c2:	3a05      	subs	r2, #5
1000e4c4:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e4c6:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e4c8:	aa0b      	add	r2, sp, #44	; 0x2c
1000e4ca:	4b10      	ldr	r3, [pc, #64]	; (1000e50c <ble_advertisement_data_set+0x70>)
1000e4cc:	cb03      	ldmia	r3!, {r0, r1}
1000e4ce:	c203      	stmia	r2!, {r0, r1}
1000e4d0:	781b      	ldrb	r3, [r3, #0]
1000e4d2:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e4d4:	2307      	movs	r3, #7
1000e4d6:	466a      	mov	r2, sp
1000e4d8:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e4da:	33f8      	adds	r3, #248	; 0xf8
1000e4dc:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e4de:	2206      	movs	r2, #6
1000e4e0:	490b      	ldr	r1, [pc, #44]	; (1000e510 <ble_advertisement_data_set+0x74>)
1000e4e2:	466b      	mov	r3, sp
1000e4e4:	1c98      	adds	r0, r3, #2
1000e4e6:	4b0b      	ldr	r3, [pc, #44]	; (1000e514 <ble_advertisement_data_set+0x78>)
1000e4e8:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e4ea:	2308      	movs	r3, #8
1000e4ec:	466a      	mov	r2, sp
1000e4ee:	2115      	movs	r1, #21
1000e4f0:	0020      	movs	r0, r4
1000e4f2:	4c09      	ldr	r4, [pc, #36]	; (1000e518 <ble_advertisement_data_set+0x7c>)
1000e4f4:	47a0      	blx	r4
1000e4f6:	2800      	cmp	r0, #0
1000e4f8:	d005      	beq.n	1000e506 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000e4fa:	4808      	ldr	r0, [pc, #32]	; (1000e51c <ble_advertisement_data_set+0x80>)
1000e4fc:	4b08      	ldr	r3, [pc, #32]	; (1000e520 <ble_advertisement_data_set+0x84>)
1000e4fe:	4798      	blx	r3
1000e500:	4808      	ldr	r0, [pc, #32]	; (1000e524 <ble_advertisement_data_set+0x88>)
1000e502:	4b09      	ldr	r3, [pc, #36]	; (1000e528 <ble_advertisement_data_set+0x8c>)
1000e504:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000e506:	2000      	movs	r0, #0
1000e508:	b010      	add	sp, #64	; 0x40
1000e50a:	bd10      	pop	{r4, pc}
1000e50c:	10016b58 	.word	0x10016b58
1000e510:	10016d38 	.word	0x10016d38
1000e514:	100148df 	.word	0x100148df
1000e518:	1000ff35 	.word	0x1000ff35
1000e51c:	10015d04 	.word	0x10015d04
1000e520:	10014b59 	.word	0x10014b59
1000e524:	10016d40 	.word	0x10016d40
1000e528:	10014a39 	.word	0x10014a39

1000e52c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000e52c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000e52e:	4b0e      	ldr	r3, [pc, #56]	; (1000e568 <uart_read_complete_callback+0x3c>)
1000e530:	781b      	ldrb	r3, [r3, #0]
1000e532:	2b01      	cmp	r3, #1
1000e534:	d10b      	bne.n	1000e54e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000e536:	2202      	movs	r2, #2
1000e538:	4b0b      	ldr	r3, [pc, #44]	; (1000e568 <uart_read_complete_callback+0x3c>)
1000e53a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000e53c:	4b0b      	ldr	r3, [pc, #44]	; (1000e56c <uart_read_complete_callback+0x40>)
1000e53e:	681b      	ldr	r3, [r3, #0]
1000e540:	2b00      	cmp	r3, #0
1000e542:	d110      	bne.n	1000e566 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000e544:	2102      	movs	r1, #2
1000e546:	480a      	ldr	r0, [pc, #40]	; (1000e570 <uart_read_complete_callback+0x44>)
1000e548:	4b0a      	ldr	r3, [pc, #40]	; (1000e574 <uart_read_complete_callback+0x48>)
1000e54a:	4798      	blx	r3
1000e54c:	e00b      	b.n	1000e566 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000e54e:	4b07      	ldr	r3, [pc, #28]	; (1000e56c <uart_read_complete_callback+0x40>)
1000e550:	681b      	ldr	r3, [r3, #0]
1000e552:	2b00      	cmp	r3, #0
1000e554:	d007      	beq.n	1000e566 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000e556:	4c08      	ldr	r4, [pc, #32]	; (1000e578 <uart_read_complete_callback+0x4c>)
1000e558:	7820      	ldrb	r0, [r4, #0]
1000e55a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e55c:	2201      	movs	r2, #1
1000e55e:	0021      	movs	r1, r4
1000e560:	4803      	ldr	r0, [pc, #12]	; (1000e570 <uart_read_complete_callback+0x44>)
1000e562:	4b06      	ldr	r3, [pc, #24]	; (1000e57c <uart_read_complete_callback+0x50>)
1000e564:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000e566:	bd10      	pop	{r4, pc}
1000e568:	10018a3c 	.word	0x10018a3c
1000e56c:	10018a44 	.word	0x10018a44
1000e570:	100196f0 	.word	0x100196f0
1000e574:	1000d2b5 	.word	0x1000d2b5
1000e578:	10018a40 	.word	0x10018a40
1000e57c:	1000d259 	.word	0x1000d259

1000e580 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000e580:	b570      	push	{r4, r5, r6, lr}
1000e582:	0006      	movs	r6, r0
1000e584:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e586:	4c03      	ldr	r4, [pc, #12]	; (1000e594 <usart_serial_getchar+0x14>)
1000e588:	0029      	movs	r1, r5
1000e58a:	0030      	movs	r0, r6
1000e58c:	47a0      	blx	r4
1000e58e:	2800      	cmp	r0, #0
1000e590:	d1fa      	bne.n	1000e588 <usart_serial_getchar+0x8>
}
1000e592:	bd70      	pop	{r4, r5, r6, pc}
1000e594:	1000d245 	.word	0x1000d245

1000e598 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e598:	b570      	push	{r4, r5, r6, lr}
1000e59a:	0006      	movs	r6, r0
1000e59c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e59e:	4c03      	ldr	r4, [pc, #12]	; (1000e5ac <usart_serial_putchar+0x14>)
1000e5a0:	0029      	movs	r1, r5
1000e5a2:	0030      	movs	r0, r6
1000e5a4:	47a0      	blx	r4
1000e5a6:	2800      	cmp	r0, #0
1000e5a8:	d1fa      	bne.n	1000e5a0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e5aa:	bd70      	pop	{r4, r5, r6, pc}
1000e5ac:	1000d235 	.word	0x1000d235

1000e5b0 <serial_console_init>:

void serial_console_init(void)
{
1000e5b0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e5b2:	2100      	movs	r1, #0
1000e5b4:	2000      	movs	r0, #0
1000e5b6:	4b19      	ldr	r3, [pc, #100]	; (1000e61c <serial_console_init+0x6c>)
1000e5b8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e5ba:	4c19      	ldr	r4, [pc, #100]	; (1000e620 <serial_console_init+0x70>)
1000e5bc:	0020      	movs	r0, r4
1000e5be:	4b19      	ldr	r3, [pc, #100]	; (1000e624 <serial_console_init+0x74>)
1000e5c0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e5c2:	23e1      	movs	r3, #225	; 0xe1
1000e5c4:	025b      	lsls	r3, r3, #9
1000e5c6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e5c8:	2302      	movs	r3, #2
1000e5ca:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e5cc:	2203      	movs	r2, #3
1000e5ce:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e5d0:	3201      	adds	r2, #1
1000e5d2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e5d4:	3201      	adds	r2, #1
1000e5d6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e5d8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e5da:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e5dc:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e5de:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e5e0:	4d11      	ldr	r5, [pc, #68]	; (1000e628 <serial_console_init+0x78>)
1000e5e2:	4b12      	ldr	r3, [pc, #72]	; (1000e62c <serial_console_init+0x7c>)
1000e5e4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e5e6:	4a12      	ldr	r2, [pc, #72]	; (1000e630 <serial_console_init+0x80>)
1000e5e8:	4b12      	ldr	r3, [pc, #72]	; (1000e634 <serial_console_init+0x84>)
1000e5ea:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e5ec:	4a12      	ldr	r2, [pc, #72]	; (1000e638 <serial_console_init+0x88>)
1000e5ee:	4b13      	ldr	r3, [pc, #76]	; (1000e63c <serial_console_init+0x8c>)
1000e5f0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e5f2:	0022      	movs	r2, r4
1000e5f4:	4912      	ldr	r1, [pc, #72]	; (1000e640 <serial_console_init+0x90>)
1000e5f6:	0028      	movs	r0, r5
1000e5f8:	4b12      	ldr	r3, [pc, #72]	; (1000e644 <serial_console_init+0x94>)
1000e5fa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000e5fc:	4e12      	ldr	r6, [pc, #72]	; (1000e648 <serial_console_init+0x98>)
1000e5fe:	6833      	ldr	r3, [r6, #0]
1000e600:	6898      	ldr	r0, [r3, #8]
1000e602:	2100      	movs	r1, #0
1000e604:	4c11      	ldr	r4, [pc, #68]	; (1000e64c <serial_console_init+0x9c>)
1000e606:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000e608:	6833      	ldr	r3, [r6, #0]
1000e60a:	6858      	ldr	r0, [r3, #4]
1000e60c:	2100      	movs	r1, #0
1000e60e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000e610:	2202      	movs	r2, #2
1000e612:	490f      	ldr	r1, [pc, #60]	; (1000e650 <serial_console_init+0xa0>)
1000e614:	0028      	movs	r0, r5
1000e616:	4b0f      	ldr	r3, [pc, #60]	; (1000e654 <serial_console_init+0xa4>)
1000e618:	4798      	blx	r3
}
1000e61a:	bd70      	pop	{r4, r5, r6, pc}
1000e61c:	1000c255 	.word	0x1000c255
1000e620:	10019714 	.word	0x10019714
1000e624:	1000d04d 	.word	0x1000d04d
1000e628:	100196f0 	.word	0x100196f0
1000e62c:	10018eac 	.word	0x10018eac
1000e630:	1000e599 	.word	0x1000e599
1000e634:	10018ea8 	.word	0x10018ea8
1000e638:	1000e581 	.word	0x1000e581
1000e63c:	10018ea4 	.word	0x10018ea4
1000e640:	40004000 	.word	0x40004000
1000e644:	1000d079 	.word	0x1000d079
1000e648:	10017108 	.word	0x10017108
1000e64c:	10014c09 	.word	0x10014c09
1000e650:	1000e52d 	.word	0x1000e52d
1000e654:	1000d281 	.word	0x1000d281

1000e658 <_time_start>:

void _time_start(unsigned int sec)
{
1000e658:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e65a:	b083      	sub	sp, #12
1000e65c:	0005      	movs	r5, r0
	system_clock_get_value();
1000e65e:	4c0d      	ldr	r4, [pc, #52]	; (1000e694 <_time_start+0x3c>)
1000e660:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000e662:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000e664:	4f0c      	ldr	r7, [pc, #48]	; (1000e698 <_time_start+0x40>)
1000e666:	47b8      	blx	r7
1000e668:	4e0c      	ldr	r6, [pc, #48]	; (1000e69c <_time_start+0x44>)
1000e66a:	4a0d      	ldr	r2, [pc, #52]	; (1000e6a0 <_time_start+0x48>)
1000e66c:	4b0d      	ldr	r3, [pc, #52]	; (1000e6a4 <_time_start+0x4c>)
1000e66e:	47b0      	blx	r6
1000e670:	9000      	str	r0, [sp, #0]
1000e672:	9101      	str	r1, [sp, #4]
1000e674:	20fa      	movs	r0, #250	; 0xfa
1000e676:	0080      	lsls	r0, r0, #2
1000e678:	4368      	muls	r0, r5
1000e67a:	47b8      	blx	r7
1000e67c:	0002      	movs	r2, r0
1000e67e:	000b      	movs	r3, r1
1000e680:	9800      	ldr	r0, [sp, #0]
1000e682:	9901      	ldr	r1, [sp, #4]
1000e684:	47b0      	blx	r6
1000e686:	4b08      	ldr	r3, [pc, #32]	; (1000e6a8 <_time_start+0x50>)
1000e688:	4798      	blx	r3
1000e68a:	4b08      	ldr	r3, [pc, #32]	; (1000e6ac <_time_start+0x54>)
1000e68c:	6018      	str	r0, [r3, #0]
}
1000e68e:	b003      	add	sp, #12
1000e690:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e692:	46c0      	nop			; (mov r8, r8)
1000e694:	1000c2d9 	.word	0x1000c2d9
1000e698:	100147b5 	.word	0x100147b5
1000e69c:	10013bad 	.word	0x10013bad
1000e6a0:	19feaec7 	.word	0x19feaec7
1000e6a4:	3f09d8ef 	.word	0x3f09d8ef
1000e6a8:	10012c51 	.word	0x10012c51
1000e6ac:	10018a38 	.word	0x10018a38

1000e6b0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000e6b0:	4b02      	ldr	r3, [pc, #8]	; (1000e6bc <_time_done+0xc>)
1000e6b2:	681a      	ldr	r2, [r3, #0]
1000e6b4:	1e50      	subs	r0, r2, #1
1000e6b6:	6018      	str	r0, [r3, #0]
}
1000e6b8:	4770      	bx	lr
1000e6ba:	46c0      	nop			; (mov r8, r8)
1000e6bc:	10018a38 	.word	0x10018a38

1000e6c0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000e6c0:	b570      	push	{r4, r5, r6, lr}
1000e6c2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000e6c4:	2201      	movs	r2, #1
1000e6c6:	4b11      	ldr	r3, [pc, #68]	; (1000e70c <getchar_b11_timeout+0x4c>)
1000e6c8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000e6ca:	4b11      	ldr	r3, [pc, #68]	; (1000e710 <getchar_b11_timeout+0x50>)
1000e6cc:	681b      	ldr	r3, [r3, #0]
1000e6ce:	2b00      	cmp	r3, #0
1000e6d0:	d103      	bne.n	1000e6da <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000e6d2:	2102      	movs	r1, #2
1000e6d4:	480f      	ldr	r0, [pc, #60]	; (1000e714 <getchar_b11_timeout+0x54>)
1000e6d6:	4b10      	ldr	r3, [pc, #64]	; (1000e718 <getchar_b11_timeout+0x58>)
1000e6d8:	4798      	blx	r3

	_time_start(sec);
1000e6da:	0020      	movs	r0, r4
1000e6dc:	4b0f      	ldr	r3, [pc, #60]	; (1000e71c <getchar_b11_timeout+0x5c>)
1000e6de:	4798      	blx	r3
	
	string_input[0] = 0;
1000e6e0:	490f      	ldr	r1, [pc, #60]	; (1000e720 <getchar_b11_timeout+0x60>)
1000e6e2:	2300      	movs	r3, #0
1000e6e4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e6e6:	2201      	movs	r2, #1
1000e6e8:	480a      	ldr	r0, [pc, #40]	; (1000e714 <getchar_b11_timeout+0x54>)
1000e6ea:	4b0e      	ldr	r3, [pc, #56]	; (1000e724 <getchar_b11_timeout+0x64>)
1000e6ec:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000e6ee:	4c07      	ldr	r4, [pc, #28]	; (1000e70c <getchar_b11_timeout+0x4c>)
1000e6f0:	4d0d      	ldr	r5, [pc, #52]	; (1000e728 <getchar_b11_timeout+0x68>)
1000e6f2:	7823      	ldrb	r3, [r4, #0]
1000e6f4:	2b02      	cmp	r3, #2
1000e6f6:	d002      	beq.n	1000e6fe <getchar_b11_timeout+0x3e>
1000e6f8:	47a8      	blx	r5
1000e6fa:	2800      	cmp	r0, #0
1000e6fc:	d1f9      	bne.n	1000e6f2 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000e6fe:	2200      	movs	r2, #0
1000e700:	4b02      	ldr	r3, [pc, #8]	; (1000e70c <getchar_b11_timeout+0x4c>)
1000e702:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000e704:	4b06      	ldr	r3, [pc, #24]	; (1000e720 <getchar_b11_timeout+0x60>)
1000e706:	7818      	ldrb	r0, [r3, #0]
}
1000e708:	bd70      	pop	{r4, r5, r6, pc}
1000e70a:	46c0      	nop			; (mov r8, r8)
1000e70c:	10018a3c 	.word	0x10018a3c
1000e710:	10018a44 	.word	0x10018a44
1000e714:	100196f0 	.word	0x100196f0
1000e718:	1000d295 	.word	0x1000d295
1000e71c:	1000e659 	.word	0x1000e659
1000e720:	10018a40 	.word	0x10018a40
1000e724:	1000d259 	.word	0x1000d259
1000e728:	1000e6b1 	.word	0x1000e6b1

1000e72c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000e72c:	4b02      	ldr	r3, [pc, #8]	; (1000e738 <platform_event_free+0xc>)
1000e72e:	681a      	ldr	r2, [r3, #0]
1000e730:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000e732:	6018      	str	r0, [r3, #0]
}
1000e734:	4770      	bx	lr
1000e736:	46c0      	nop			; (mov r8, r8)
1000e738:	10018a4c 	.word	0x10018a4c

1000e73c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000e73c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000e73e:	4b0b      	ldr	r3, [pc, #44]	; (1000e76c <platform_event_post+0x30>)
1000e740:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000e742:	2c00      	cmp	r4, #0
1000e744:	d011      	beq.n	1000e76a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000e746:	6825      	ldr	r5, [r4, #0]
1000e748:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000e74a:	2300      	movs	r3, #0
1000e74c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000e74e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000e750:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000e752:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000e754:	4b06      	ldr	r3, [pc, #24]	; (1000e770 <platform_event_post+0x34>)
1000e756:	681a      	ldr	r2, [r3, #0]
1000e758:	2a00      	cmp	r2, #0
1000e75a:	d102      	bne.n	1000e762 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000e75c:	601c      	str	r4, [r3, #0]
1000e75e:	e004      	b.n	1000e76a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000e760:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000e762:	6813      	ldr	r3, [r2, #0]
1000e764:	2b00      	cmp	r3, #0
1000e766:	d1fb      	bne.n	1000e760 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000e768:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000e76a:	bd30      	pop	{r4, r5, pc}
1000e76c:	10018a4c 	.word	0x10018a4c
1000e770:	10018a48 	.word	0x10018a48

1000e774 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000e774:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000e776:	2300      	movs	r3, #0
1000e778:	4a06      	ldr	r2, [pc, #24]	; (1000e794 <platform_event_init+0x20>)
1000e77a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000e77c:	4a06      	ldr	r2, [pc, #24]	; (1000e798 <platform_event_init+0x24>)
1000e77e:	6013      	str	r3, [r2, #0]
1000e780:	4c06      	ldr	r4, [pc, #24]	; (1000e79c <platform_event_init+0x28>)
1000e782:	0026      	movs	r6, r4
1000e784:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000e786:	4d06      	ldr	r5, [pc, #24]	; (1000e7a0 <platform_event_init+0x2c>)
1000e788:	0020      	movs	r0, r4
1000e78a:	47a8      	blx	r5
1000e78c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000e78e:	42b4      	cmp	r4, r6
1000e790:	d1fa      	bne.n	1000e788 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000e792:	bd70      	pop	{r4, r5, r6, pc}
1000e794:	10018a4c 	.word	0x10018a4c
1000e798:	10018a48 	.word	0x10018a48
1000e79c:	10018a50 	.word	0x10018a50
1000e7a0:	1000e72d 	.word	0x1000e72d

1000e7a4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000e7a4:	b570      	push	{r4, r5, r6, lr}
1000e7a6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e7a8:	4b13      	ldr	r3, [pc, #76]	; (1000e7f8 <at_ke_msg_send+0x54>)
1000e7aa:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000e7ac:	4b13      	ldr	r3, [pc, #76]	; (1000e7fc <at_ke_msg_send+0x58>)
1000e7ae:	681b      	ldr	r3, [r3, #0]
1000e7b0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000e7b2:	2c0c      	cmp	r4, #12
1000e7b4:	d01f      	beq.n	1000e7f6 <at_ke_msg_send+0x52>
1000e7b6:	3c0c      	subs	r4, #12
1000e7b8:	88e3      	ldrh	r3, [r4, #6]
1000e7ba:	2b05      	cmp	r3, #5
1000e7bc:	d01b      	beq.n	1000e7f6 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000e7be:	07eb      	lsls	r3, r5, #31
1000e7c0:	d414      	bmi.n	1000e7ec <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000e7c2:	4b0f      	ldr	r3, [pc, #60]	; (1000e800 <at_ke_msg_send+0x5c>)
1000e7c4:	681b      	ldr	r3, [r3, #0]
1000e7c6:	2002      	movs	r0, #2
1000e7c8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000e7ca:	4b0e      	ldr	r3, [pc, #56]	; (1000e804 <at_ke_msg_send+0x60>)
1000e7cc:	681b      	ldr	r3, [r3, #0]
1000e7ce:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000e7d0:	4c0d      	ldr	r4, [pc, #52]	; (1000e808 <at_ke_msg_send+0x64>)
1000e7d2:	2003      	movs	r0, #3
1000e7d4:	6823      	ldr	r3, [r4, #0]
1000e7d6:	4798      	blx	r3
1000e7d8:	2800      	cmp	r0, #0
1000e7da:	d1fa      	bne.n	1000e7d2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000e7dc:	4b0b      	ldr	r3, [pc, #44]	; (1000e80c <at_ke_msg_send+0x68>)
1000e7de:	681b      	ldr	r3, [r3, #0]
1000e7e0:	3002      	adds	r0, #2
1000e7e2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000e7e4:	2201      	movs	r2, #1
1000e7e6:	4b0a      	ldr	r3, [pc, #40]	; (1000e810 <at_ke_msg_send+0x6c>)
1000e7e8:	601a      	str	r2, [r3, #0]
1000e7ea:	e004      	b.n	1000e7f6 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000e7ec:	4b09      	ldr	r3, [pc, #36]	; (1000e814 <at_ke_msg_send+0x70>)
1000e7ee:	6818      	ldr	r0, [r3, #0]
1000e7f0:	4b09      	ldr	r3, [pc, #36]	; (1000e818 <at_ke_msg_send+0x74>)
1000e7f2:	681b      	ldr	r3, [r3, #0]
1000e7f4:	4798      	blx	r3
		}
	}
}
1000e7f6:	bd70      	pop	{r4, r5, r6, pc}
1000e7f8:	4000b1ec 	.word	0x4000b1ec
1000e7fc:	10018af8 	.word	0x10018af8
1000e800:	10018af0 	.word	0x10018af0
1000e804:	10018b04 	.word	0x10018b04
1000e808:	10018ad8 	.word	0x10018ad8
1000e80c:	10018ae0 	.word	0x10018ae0
1000e810:	4000b020 	.word	0x4000b020
1000e814:	10018ae4 	.word	0x10018ae4
1000e818:	10018ad4 	.word	0x10018ad4

1000e81c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000e81c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000e81e:	4b06      	ldr	r3, [pc, #24]	; (1000e838 <samb11_plf_resume_callback+0x1c>)
1000e820:	4a06      	ldr	r2, [pc, #24]	; (1000e83c <samb11_plf_resume_callback+0x20>)
1000e822:	6819      	ldr	r1, [r3, #0]
1000e824:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000e826:	685a      	ldr	r2, [r3, #4]
1000e828:	4b05      	ldr	r3, [pc, #20]	; (1000e840 <samb11_plf_resume_callback+0x24>)
1000e82a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000e82c:	4b05      	ldr	r3, [pc, #20]	; (1000e844 <samb11_plf_resume_callback+0x28>)
1000e82e:	681b      	ldr	r3, [r3, #0]
1000e830:	2b00      	cmp	r3, #0
1000e832:	d000      	beq.n	1000e836 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000e834:	4798      	blx	r3
	}
}
1000e836:	bd10      	pop	{r4, pc}
1000e838:	1001973c 	.word	0x1001973c
1000e83c:	4000b00c 	.word	0x4000b00c
1000e840:	4000b010 	.word	0x4000b010
1000e844:	10019a18 	.word	0x10019a18

1000e848 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e848:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e84a:	2232      	movs	r2, #50	; 0x32
1000e84c:	2100      	movs	r1, #0
1000e84e:	480d      	ldr	r0, [pc, #52]	; (1000e884 <init_port_list+0x3c>)
1000e850:	4b0d      	ldr	r3, [pc, #52]	; (1000e888 <init_port_list+0x40>)
1000e852:	4798      	blx	r3
1000e854:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e856:	480b      	ldr	r0, [pc, #44]	; (1000e884 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000e858:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000e85a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e85c:	004a      	lsls	r2, r1, #1
1000e85e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000e860:	1882      	adds	r2, r0, r2
1000e862:	7853      	ldrb	r3, [r2, #1]
1000e864:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000e866:	b2db      	uxtb	r3, r3
1000e868:	43a3      	bics	r3, r4
1000e86a:	7053      	strb	r3, [r2, #1]
1000e86c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e86e:	2919      	cmp	r1, #25
1000e870:	d1f4      	bne.n	1000e85c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e872:	4b04      	ldr	r3, [pc, #16]	; (1000e884 <init_port_list+0x3c>)
1000e874:	785a      	ldrb	r2, [r3, #1]
1000e876:	3918      	subs	r1, #24
1000e878:	438a      	bics	r2, r1
1000e87a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e87c:	78da      	ldrb	r2, [r3, #3]
1000e87e:	438a      	bics	r2, r1
1000e880:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000e882:	bd70      	pop	{r4, r5, r6, pc}
1000e884:	10019758 	.word	0x10019758
1000e888:	100148f1 	.word	0x100148f1

1000e88c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e88c:	4a06      	ldr	r2, [pc, #24]	; (1000e8a8 <init_clock+0x1c>)
1000e88e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e890:	4b06      	ldr	r3, [pc, #24]	; (1000e8ac <init_clock+0x20>)
1000e892:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e894:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000e896:	4a06      	ldr	r2, [pc, #24]	; (1000e8b0 <init_clock+0x24>)
1000e898:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e89a:	4906      	ldr	r1, [pc, #24]	; (1000e8b4 <init_clock+0x28>)
1000e89c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e89e:	4b06      	ldr	r3, [pc, #24]	; (1000e8b8 <init_clock+0x2c>)
1000e8a0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e8a2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000e8a4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000e8a6:	4770      	bx	lr
1000e8a8:	4000b00c 	.word	0x4000b00c
1000e8ac:	fffe0fd3 	.word	0xfffe0fd3
1000e8b0:	1001973c 	.word	0x1001973c
1000e8b4:	4000b010 	.word	0x4000b010
1000e8b8:	ffffe7c0 	.word	0xffffe7c0

1000e8bc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e8be:	4657      	mov	r7, sl
1000e8c0:	464e      	mov	r6, r9
1000e8c2:	4645      	mov	r5, r8
1000e8c4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e8c6:	4b4f      	ldr	r3, [pc, #316]	; (1000ea04 <platform_driver_init+0x148>)
1000e8c8:	781b      	ldrb	r3, [r3, #0]
1000e8ca:	2b00      	cmp	r3, #0
1000e8cc:	d004      	beq.n	1000e8d8 <platform_driver_init+0x1c>
1000e8ce:	4b4d      	ldr	r3, [pc, #308]	; (1000ea04 <platform_driver_init+0x148>)
1000e8d0:	781b      	ldrb	r3, [r3, #0]
1000e8d2:	2b01      	cmp	r3, #1
1000e8d4:	d100      	bne.n	1000e8d8 <platform_driver_init+0x1c>
1000e8d6:	e08c      	b.n	1000e9f2 <platform_driver_init+0x136>
		init_port_list();
1000e8d8:	4b4b      	ldr	r3, [pc, #300]	; (1000ea08 <platform_driver_init+0x14c>)
1000e8da:	4798      	blx	r3
		init_clock();
1000e8dc:	4b4b      	ldr	r3, [pc, #300]	; (1000ea0c <platform_driver_init+0x150>)
1000e8de:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e8e0:	2300      	movs	r3, #0
1000e8e2:	4698      	mov	r8, r3
1000e8e4:	4b4a      	ldr	r3, [pc, #296]	; (1000ea10 <platform_driver_init+0x154>)
1000e8e6:	4642      	mov	r2, r8
1000e8e8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e8ea:	4c4a      	ldr	r4, [pc, #296]	; (1000ea14 <platform_driver_init+0x158>)
1000e8ec:	2380      	movs	r3, #128	; 0x80
1000e8ee:	2280      	movs	r2, #128	; 0x80
1000e8f0:	0412      	lsls	r2, r2, #16
1000e8f2:	4692      	mov	sl, r2
1000e8f4:	50e2      	str	r2, [r4, r3]
1000e8f6:	2280      	movs	r2, #128	; 0x80
1000e8f8:	0452      	lsls	r2, r2, #17
1000e8fa:	4691      	mov	r9, r2
1000e8fc:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e8fe:	4d46      	ldr	r5, [pc, #280]	; (1000ea18 <platform_driver_init+0x15c>)
1000e900:	4b46      	ldr	r3, [pc, #280]	; (1000ea1c <platform_driver_init+0x160>)
1000e902:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e904:	4b46      	ldr	r3, [pc, #280]	; (1000ea20 <platform_driver_init+0x164>)
1000e906:	4a47      	ldr	r2, [pc, #284]	; (1000ea24 <platform_driver_init+0x168>)
1000e908:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e90a:	4947      	ldr	r1, [pc, #284]	; (1000ea28 <platform_driver_init+0x16c>)
1000e90c:	4a47      	ldr	r2, [pc, #284]	; (1000ea2c <platform_driver_init+0x170>)
1000e90e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e910:	4a47      	ldr	r2, [pc, #284]	; (1000ea30 <platform_driver_init+0x174>)
1000e912:	6811      	ldr	r1, [r2, #0]
1000e914:	4a47      	ldr	r2, [pc, #284]	; (1000ea34 <platform_driver_init+0x178>)
1000e916:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e918:	4a47      	ldr	r2, [pc, #284]	; (1000ea38 <platform_driver_init+0x17c>)
1000e91a:	6811      	ldr	r1, [r2, #0]
1000e91c:	4a47      	ldr	r2, [pc, #284]	; (1000ea3c <platform_driver_init+0x180>)
1000e91e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e920:	4947      	ldr	r1, [pc, #284]	; (1000ea40 <platform_driver_init+0x184>)
1000e922:	4a48      	ldr	r2, [pc, #288]	; (1000ea44 <platform_driver_init+0x188>)
1000e924:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e926:	4948      	ldr	r1, [pc, #288]	; (1000ea48 <platform_driver_init+0x18c>)
1000e928:	4a48      	ldr	r2, [pc, #288]	; (1000ea4c <platform_driver_init+0x190>)
1000e92a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e92c:	4f48      	ldr	r7, [pc, #288]	; (1000ea50 <platform_driver_init+0x194>)
1000e92e:	4a49      	ldr	r2, [pc, #292]	; (1000ea54 <platform_driver_init+0x198>)
1000e930:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e932:	4949      	ldr	r1, [pc, #292]	; (1000ea58 <platform_driver_init+0x19c>)
1000e934:	4a49      	ldr	r2, [pc, #292]	; (1000ea5c <platform_driver_init+0x1a0>)
1000e936:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e938:	4949      	ldr	r1, [pc, #292]	; (1000ea60 <platform_driver_init+0x1a4>)
1000e93a:	4a4a      	ldr	r2, [pc, #296]	; (1000ea64 <platform_driver_init+0x1a8>)
1000e93c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e93e:	4e4a      	ldr	r6, [pc, #296]	; (1000ea68 <platform_driver_init+0x1ac>)
1000e940:	4a4a      	ldr	r2, [pc, #296]	; (1000ea6c <platform_driver_init+0x1b0>)
1000e942:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e944:	494a      	ldr	r1, [pc, #296]	; (1000ea70 <platform_driver_init+0x1b4>)
1000e946:	4a4b      	ldr	r2, [pc, #300]	; (1000ea74 <platform_driver_init+0x1b8>)
1000e948:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e94a:	494b      	ldr	r1, [pc, #300]	; (1000ea78 <platform_driver_init+0x1bc>)
1000e94c:	4a4b      	ldr	r2, [pc, #300]	; (1000ea7c <platform_driver_init+0x1c0>)
1000e94e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e950:	494b      	ldr	r1, [pc, #300]	; (1000ea80 <platform_driver_init+0x1c4>)
1000e952:	4a4c      	ldr	r2, [pc, #304]	; (1000ea84 <platform_driver_init+0x1c8>)
1000e954:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e956:	494c      	ldr	r1, [pc, #304]	; (1000ea88 <platform_driver_init+0x1cc>)
1000e958:	4a4c      	ldr	r2, [pc, #304]	; (1000ea8c <platform_driver_init+0x1d0>)
1000e95a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e95c:	494c      	ldr	r1, [pc, #304]	; (1000ea90 <platform_driver_init+0x1d4>)
1000e95e:	4a4d      	ldr	r2, [pc, #308]	; (1000ea94 <platform_driver_init+0x1d8>)
1000e960:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e962:	2028      	movs	r0, #40	; 0x28
1000e964:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e966:	494c      	ldr	r1, [pc, #304]	; (1000ea98 <platform_driver_init+0x1dc>)
1000e968:	2028      	movs	r0, #40	; 0x28
1000e96a:	682b      	ldr	r3, [r5, #0]
1000e96c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e96e:	682b      	ldr	r3, [r5, #0]
1000e970:	494a      	ldr	r1, [pc, #296]	; (1000ea9c <platform_driver_init+0x1e0>)
1000e972:	2027      	movs	r0, #39	; 0x27
1000e974:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e976:	4b4a      	ldr	r3, [pc, #296]	; (1000eaa0 <platform_driver_init+0x1e4>)
1000e978:	681a      	ldr	r2, [r3, #0]
1000e97a:	4b4a      	ldr	r3, [pc, #296]	; (1000eaa4 <platform_driver_init+0x1e8>)
1000e97c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e97e:	4a4a      	ldr	r2, [pc, #296]	; (1000eaa8 <platform_driver_init+0x1ec>)
1000e980:	4b4a      	ldr	r3, [pc, #296]	; (1000eaac <platform_driver_init+0x1f0>)
1000e982:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e984:	4a4a      	ldr	r2, [pc, #296]	; (1000eab0 <platform_driver_init+0x1f4>)
1000e986:	4b4b      	ldr	r3, [pc, #300]	; (1000eab4 <platform_driver_init+0x1f8>)
1000e988:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e98a:	4a4b      	ldr	r2, [pc, #300]	; (1000eab8 <platform_driver_init+0x1fc>)
1000e98c:	4b4b      	ldr	r3, [pc, #300]	; (1000eabc <platform_driver_init+0x200>)
1000e98e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e990:	4a4b      	ldr	r2, [pc, #300]	; (1000eac0 <platform_driver_init+0x204>)
1000e992:	4b4c      	ldr	r3, [pc, #304]	; (1000eac4 <platform_driver_init+0x208>)
1000e994:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e996:	4a4c      	ldr	r2, [pc, #304]	; (1000eac8 <platform_driver_init+0x20c>)
1000e998:	4b4c      	ldr	r3, [pc, #304]	; (1000eacc <platform_driver_init+0x210>)
1000e99a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e99c:	4a4c      	ldr	r2, [pc, #304]	; (1000ead0 <platform_driver_init+0x214>)
1000e99e:	4b4d      	ldr	r3, [pc, #308]	; (1000ead4 <platform_driver_init+0x218>)
1000e9a0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e9a2:	4a4d      	ldr	r2, [pc, #308]	; (1000ead8 <platform_driver_init+0x21c>)
1000e9a4:	4b4d      	ldr	r3, [pc, #308]	; (1000eadc <platform_driver_init+0x220>)
1000e9a6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e9a8:	22a0      	movs	r2, #160	; 0xa0
1000e9aa:	0092      	lsls	r2, r2, #2
1000e9ac:	2100      	movs	r1, #0
1000e9ae:	484c      	ldr	r0, [pc, #304]	; (1000eae0 <platform_driver_init+0x224>)
1000e9b0:	4b4c      	ldr	r3, [pc, #304]	; (1000eae4 <platform_driver_init+0x228>)
1000e9b2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e9b4:	2280      	movs	r2, #128	; 0x80
1000e9b6:	0092      	lsls	r2, r2, #2
1000e9b8:	4b4b      	ldr	r3, [pc, #300]	; (1000eae8 <platform_driver_init+0x22c>)
1000e9ba:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e9bc:	4b4b      	ldr	r3, [pc, #300]	; (1000eaec <platform_driver_init+0x230>)
1000e9be:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e9c0:	4653      	mov	r3, sl
1000e9c2:	6023      	str	r3, [r4, #0]
1000e9c4:	464b      	mov	r3, r9
1000e9c6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e9c8:	4b49      	ldr	r3, [pc, #292]	; (1000eaf0 <platform_driver_init+0x234>)
1000e9ca:	4642      	mov	r2, r8
1000e9cc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e9ce:	683b      	ldr	r3, [r7, #0]
1000e9d0:	4a48      	ldr	r2, [pc, #288]	; (1000eaf4 <platform_driver_init+0x238>)
1000e9d2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e9d4:	6833      	ldr	r3, [r6, #0]
1000e9d6:	4a48      	ldr	r2, [pc, #288]	; (1000eaf8 <platform_driver_init+0x23c>)
1000e9d8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e9da:	2000      	movs	r0, #0
1000e9dc:	4c47      	ldr	r4, [pc, #284]	; (1000eafc <platform_driver_init+0x240>)
1000e9de:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e9e0:	2001      	movs	r0, #1
1000e9e2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e9e4:	2002      	movs	r0, #2
1000e9e6:	47a0      	blx	r4
		platform_initialized = 1;
1000e9e8:	2201      	movs	r2, #1
1000e9ea:	4b06      	ldr	r3, [pc, #24]	; (1000ea04 <platform_driver_init+0x148>)
1000e9ec:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e9ee:	2000      	movs	r0, #0
1000e9f0:	e003      	b.n	1000e9fa <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e9f2:	2201      	movs	r2, #1
1000e9f4:	4b03      	ldr	r3, [pc, #12]	; (1000ea04 <platform_driver_init+0x148>)
1000e9f6:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e9f8:	2001      	movs	r0, #1
	}
	return status;
}
1000e9fa:	bc1c      	pop	{r2, r3, r4}
1000e9fc:	4690      	mov	r8, r2
1000e9fe:	4699      	mov	r9, r3
1000ea00:	46a2      	mov	sl, r4
1000ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea04:	10018adc 	.word	0x10018adc
1000ea08:	1000e849 	.word	0x1000e849
1000ea0c:	1000e88d 	.word	0x1000e88d
1000ea10:	10018afc 	.word	0x10018afc
1000ea14:	e000e100 	.word	0xe000e100
1000ea18:	10019a0c 	.word	0x10019a0c
1000ea1c:	000007d7 	.word	0x000007d7
1000ea20:	000007bd 	.word	0x000007bd
1000ea24:	10019748 	.word	0x10019748
1000ea28:	0001bc51 	.word	0x0001bc51
1000ea2c:	10019a10 	.word	0x10019a10
1000ea30:	100400bc 	.word	0x100400bc
1000ea34:	10018ad0 	.word	0x10018ad0
1000ea38:	100400b8 	.word	0x100400b8
1000ea3c:	10018acc 	.word	0x10018acc
1000ea40:	0001b99f 	.word	0x0001b99f
1000ea44:	10019744 	.word	0x10019744
1000ea48:	0001b9db 	.word	0x0001b9db
1000ea4c:	10019750 	.word	0x10019750
1000ea50:	10019a20 	.word	0x10019a20
1000ea54:	1004003c 	.word	0x1004003c
1000ea58:	10041fc0 	.word	0x10041fc0
1000ea5c:	10019754 	.word	0x10019754
1000ea60:	10041fc4 	.word	0x10041fc4
1000ea64:	10019a1c 	.word	0x10019a1c
1000ea68:	10019a14 	.word	0x10019a14
1000ea6c:	10041fd4 	.word	0x10041fd4
1000ea70:	10041fd8 	.word	0x10041fd8
1000ea74:	1001974c 	.word	0x1001974c
1000ea78:	0001cbe9 	.word	0x0001cbe9
1000ea7c:	10018af0 	.word	0x10018af0
1000ea80:	0001cd8f 	.word	0x0001cd8f
1000ea84:	10018ae0 	.word	0x10018ae0
1000ea88:	0001cea3 	.word	0x0001cea3
1000ea8c:	10018b04 	.word	0x10018b04
1000ea90:	0001cbcf 	.word	0x0001cbcf
1000ea94:	10018ad8 	.word	0x10018ad8
1000ea98:	1000ef45 	.word	0x1000ef45
1000ea9c:	1000eed9 	.word	0x1000eed9
1000eaa0:	100400e4 	.word	0x100400e4
1000eaa4:	10018af8 	.word	0x10018af8
1000eaa8:	00019fe9 	.word	0x00019fe9
1000eaac:	10018b08 	.word	0x10018b08
1000eab0:	0001dbdd 	.word	0x0001dbdd
1000eab4:	10018ad4 	.word	0x10018ad4
1000eab8:	0001dc5b 	.word	0x0001dc5b
1000eabc:	10018ae8 	.word	0x10018ae8
1000eac0:	100405ec 	.word	0x100405ec
1000eac4:	10018ae4 	.word	0x10018ae4
1000eac8:	0001d5e3 	.word	0x0001d5e3
1000eacc:	10018af4 	.word	0x10018af4
1000ead0:	10040c20 	.word	0x10040c20
1000ead4:	10018b0c 	.word	0x10018b0c
1000ead8:	00019f09 	.word	0x00019f09
1000eadc:	10018ac8 	.word	0x10018ac8
1000eae0:	1001978c 	.word	0x1001978c
1000eae4:	100148f1 	.word	0x100148f1
1000eae8:	10019a24 	.word	0x10019a24
1000eaec:	1000e775 	.word	0x1000e775
1000eaf0:	10019a18 	.word	0x10019a18
1000eaf4:	1000e81d 	.word	0x1000e81d
1000eaf8:	1000efa1 	.word	0x1000efa1
1000eafc:	1000ef89 	.word	0x1000ef89

1000eb00 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000eb00:	4b04      	ldr	r3, [pc, #16]	; (1000eb14 <platform_register_ble_msg_handler+0x14>)
1000eb02:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000eb04:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000eb06:	2a01      	cmp	r2, #1
1000eb08:	d102      	bne.n	1000eb10 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000eb0a:	4b03      	ldr	r3, [pc, #12]	; (1000eb18 <platform_register_ble_msg_handler+0x18>)
1000eb0c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000eb0e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000eb10:	0018      	movs	r0, r3
1000eb12:	4770      	bx	lr
1000eb14:	10018adc 	.word	0x10018adc
1000eb18:	10018afc 	.word	0x10018afc

1000eb1c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000eb1c:	b570      	push	{r4, r5, r6, lr}
1000eb1e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000eb20:	4b0e      	ldr	r3, [pc, #56]	; (1000eb5c <platform_interface_send+0x40>)
1000eb22:	681b      	ldr	r3, [r3, #0]
1000eb24:	2b00      	cmp	r3, #0
1000eb26:	d002      	beq.n	1000eb2e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000eb28:	8840      	ldrh	r0, [r0, #2]
1000eb2a:	4798      	blx	r3
1000eb2c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000eb2e:	88e3      	ldrh	r3, [r4, #6]
1000eb30:	88a2      	ldrh	r2, [r4, #4]
1000eb32:	8861      	ldrh	r1, [r4, #2]
1000eb34:	8820      	ldrh	r0, [r4, #0]
1000eb36:	4d0a      	ldr	r5, [pc, #40]	; (1000eb60 <platform_interface_send+0x44>)
1000eb38:	682d      	ldr	r5, [r5, #0]
1000eb3a:	47a8      	blx	r5
1000eb3c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000eb3e:	88e2      	ldrh	r2, [r4, #6]
1000eb40:	2a00      	cmp	r2, #0
1000eb42:	d102      	bne.n	1000eb4a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000eb44:	4b07      	ldr	r3, [pc, #28]	; (1000eb64 <platform_interface_send+0x48>)
1000eb46:	4798      	blx	r3
1000eb48:	e006      	b.n	1000eb58 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000eb4a:	0021      	movs	r1, r4
1000eb4c:	3108      	adds	r1, #8
1000eb4e:	4b06      	ldr	r3, [pc, #24]	; (1000eb68 <platform_interface_send+0x4c>)
1000eb50:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000eb52:	0028      	movs	r0, r5
1000eb54:	4b03      	ldr	r3, [pc, #12]	; (1000eb64 <platform_interface_send+0x48>)
1000eb56:	4798      	blx	r3
	}
}
1000eb58:	bd70      	pop	{r4, r5, r6, pc}
1000eb5a:	46c0      	nop			; (mov r8, r8)
1000eb5c:	10018ad0 	.word	0x10018ad0
1000eb60:	10018b08 	.word	0x10018b08
1000eb64:	1000e7a5 	.word	0x1000e7a5
1000eb68:	100148df 	.word	0x100148df

1000eb6c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000eb6c:	b570      	push	{r4, r5, r6, lr}
1000eb6e:	0015      	movs	r5, r2
1000eb70:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000eb72:	020a      	lsls	r2, r1, #8
1000eb74:	4302      	orrs	r2, r0
1000eb76:	4b0a      	ldr	r3, [pc, #40]	; (1000eba0 <send_plf_int_msg_ind+0x34>)
1000eb78:	681e      	ldr	r6, [r3, #0]
1000eb7a:	0023      	movs	r3, r4
1000eb7c:	2105      	movs	r1, #5
1000eb7e:	20a0      	movs	r0, #160	; 0xa0
1000eb80:	00c0      	lsls	r0, r0, #3
1000eb82:	47b0      	blx	r6
1000eb84:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000eb86:	d00a      	beq.n	1000eb9e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000eb88:	2c00      	cmp	r4, #0
1000eb8a:	d005      	beq.n	1000eb98 <send_plf_int_msg_ind+0x2c>
1000eb8c:	2d00      	cmp	r5, #0
1000eb8e:	d003      	beq.n	1000eb98 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000eb90:	0022      	movs	r2, r4
1000eb92:	0029      	movs	r1, r5
1000eb94:	4b03      	ldr	r3, [pc, #12]	; (1000eba4 <send_plf_int_msg_ind+0x38>)
1000eb96:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000eb98:	0030      	movs	r0, r6
1000eb9a:	4b03      	ldr	r3, [pc, #12]	; (1000eba8 <send_plf_int_msg_ind+0x3c>)
1000eb9c:	4798      	blx	r3
	}
}
1000eb9e:	bd70      	pop	{r4, r5, r6, pc}
1000eba0:	10018b08 	.word	0x10018b08
1000eba4:	100148df 	.word	0x100148df
1000eba8:	1000e7a5 	.word	0x1000e7a5

1000ebac <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000ebac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebae:	465f      	mov	r7, fp
1000ebb0:	4656      	mov	r6, sl
1000ebb2:	464d      	mov	r5, r9
1000ebb4:	4644      	mov	r4, r8
1000ebb6:	b4f0      	push	{r4, r5, r6, r7}
1000ebb8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ebba:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000ebbc:	2300      	movs	r3, #0
1000ebbe:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ebc0:	1ce3      	adds	r3, r4, #3
1000ebc2:	d81c      	bhi.n	1000ebfe <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000ebc4:	220d      	movs	r2, #13
1000ebc6:	2100      	movs	r1, #0
1000ebc8:	a802      	add	r0, sp, #8
1000ebca:	4b82      	ldr	r3, [pc, #520]	; (1000edd4 <platform_event_wait+0x228>)
1000ebcc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ebce:	2333      	movs	r3, #51	; 0x33
1000ebd0:	aa02      	add	r2, sp, #8
1000ebd2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ebd4:	3b30      	subs	r3, #48	; 0x30
1000ebd6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ebd8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ebda:	3302      	adds	r3, #2
1000ebdc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ebde:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000ebe0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000ebe2:	0a23      	lsrs	r3, r4, #8
1000ebe4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000ebe6:	0c23      	lsrs	r3, r4, #16
1000ebe8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000ebea:	0e24      	lsrs	r4, r4, #24
1000ebec:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000ebee:	2301      	movs	r3, #1
1000ebf0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ebf2:	210d      	movs	r1, #13
1000ebf4:	0010      	movs	r0, r2
1000ebf6:	4b78      	ldr	r3, [pc, #480]	; (1000edd8 <platform_event_wait+0x22c>)
1000ebf8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000ebfa:	2301      	movs	r3, #1
1000ebfc:	4699      	mov	r9, r3
1000ebfe:	2400      	movs	r4, #0
1000ec00:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000ec02:	4f76      	ldr	r7, [pc, #472]	; (1000eddc <platform_event_wait+0x230>)
1000ec04:	4e76      	ldr	r6, [pc, #472]	; (1000ede0 <platform_event_wait+0x234>)
1000ec06:	4977      	ldr	r1, [pc, #476]	; (1000ede4 <platform_event_wait+0x238>)
1000ec08:	6838      	ldr	r0, [r7, #0]
1000ec0a:	6833      	ldr	r3, [r6, #0]
1000ec0c:	4798      	blx	r3
1000ec0e:	2800      	cmp	r0, #0
1000ec10:	d000      	beq.n	1000ec14 <platform_event_wait+0x68>
1000ec12:	e088      	b.n	1000ed26 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000ec14:	4b73      	ldr	r3, [pc, #460]	; (1000ede4 <platform_event_wait+0x238>)
1000ec16:	681c      	ldr	r4, [r3, #0]
1000ec18:	88a3      	ldrh	r3, [r4, #4]
1000ec1a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ec1c:	23cd      	movs	r3, #205	; 0xcd
1000ec1e:	009b      	lsls	r3, r3, #2
1000ec20:	459a      	cmp	sl, r3
1000ec22:	d100      	bne.n	1000ec26 <platform_event_wait+0x7a>
1000ec24:	e0c7      	b.n	1000edb6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000ec26:	8923      	ldrh	r3, [r4, #8]
1000ec28:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000ec2a:	8963      	ldrh	r3, [r4, #10]
1000ec2c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ec2e:	464b      	mov	r3, r9
1000ec30:	2b00      	cmp	r3, #0
1000ec32:	d011      	beq.n	1000ec58 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ec34:	220d      	movs	r2, #13
1000ec36:	2100      	movs	r1, #0
1000ec38:	a802      	add	r0, sp, #8
1000ec3a:	4b66      	ldr	r3, [pc, #408]	; (1000edd4 <platform_event_wait+0x228>)
1000ec3c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ec3e:	2333      	movs	r3, #51	; 0x33
1000ec40:	aa02      	add	r2, sp, #8
1000ec42:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ec44:	3b30      	subs	r3, #48	; 0x30
1000ec46:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ec48:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ec4a:	3302      	adds	r3, #2
1000ec4c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ec4e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000ec50:	210d      	movs	r1, #13
1000ec52:	0010      	movs	r0, r2
1000ec54:	4b60      	ldr	r3, [pc, #384]	; (1000edd8 <platform_event_wait+0x22c>)
1000ec56:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ec58:	23a0      	movs	r3, #160	; 0xa0
1000ec5a:	00db      	lsls	r3, r3, #3
1000ec5c:	459a      	cmp	sl, r3
1000ec5e:	d121      	bne.n	1000eca4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ec60:	4b61      	ldr	r3, [pc, #388]	; (1000ede8 <platform_event_wait+0x23c>)
1000ec62:	881b      	ldrh	r3, [r3, #0]
1000ec64:	4443      	add	r3, r8
1000ec66:	22a0      	movs	r2, #160	; 0xa0
1000ec68:	0092      	lsls	r2, r2, #2
1000ec6a:	4293      	cmp	r3, r2
1000ec6c:	dd02      	ble.n	1000ec74 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ec6e:	3a80      	subs	r2, #128	; 0x80
1000ec70:	4b5d      	ldr	r3, [pc, #372]	; (1000ede8 <platform_event_wait+0x23c>)
1000ec72:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ec74:	4b5c      	ldr	r3, [pc, #368]	; (1000ede8 <platform_event_wait+0x23c>)
1000ec76:	469a      	mov	sl, r3
1000ec78:	881d      	ldrh	r5, [r3, #0]
1000ec7a:	4b5c      	ldr	r3, [pc, #368]	; (1000edec <platform_event_wait+0x240>)
1000ec7c:	18ed      	adds	r5, r5, r3
1000ec7e:	0021      	movs	r1, r4
1000ec80:	310c      	adds	r1, #12
1000ec82:	4642      	mov	r2, r8
1000ec84:	0028      	movs	r0, r5
1000ec86:	4b5a      	ldr	r3, [pc, #360]	; (1000edf0 <platform_event_wait+0x244>)
1000ec88:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ec8a:	4642      	mov	r2, r8
1000ec8c:	0029      	movs	r1, r5
1000ec8e:	4658      	mov	r0, fp
1000ec90:	4b58      	ldr	r3, [pc, #352]	; (1000edf4 <platform_event_wait+0x248>)
1000ec92:	4798      	blx	r3
				plf_event_buff_index += len;
1000ec94:	4653      	mov	r3, sl
1000ec96:	881b      	ldrh	r3, [r3, #0]
1000ec98:	4443      	add	r3, r8
1000ec9a:	4652      	mov	r2, sl
1000ec9c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ec9e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000eca0:	2502      	movs	r5, #2
1000eca2:	e03a      	b.n	1000ed1a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000eca4:	4b54      	ldr	r3, [pc, #336]	; (1000edf8 <platform_event_wait+0x24c>)
1000eca6:	681b      	ldr	r3, [r3, #0]
1000eca8:	2b00      	cmp	r3, #0
1000ecaa:	d032      	beq.n	1000ed12 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000ecac:	4b4d      	ldr	r3, [pc, #308]	; (1000ede4 <platform_event_wait+0x238>)
1000ecae:	681a      	ldr	r2, [r3, #0]
1000ecb0:	8893      	ldrh	r3, [r2, #4]
1000ecb2:	21cd      	movs	r1, #205	; 0xcd
1000ecb4:	0089      	lsls	r1, r1, #2
1000ecb6:	428b      	cmp	r3, r1
1000ecb8:	d104      	bne.n	1000ecc4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000ecba:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000ecbc:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000ecbe:	2b00      	cmp	r3, #0
1000ecc0:	d02b      	beq.n	1000ed1a <platform_event_wait+0x16e>
1000ecc2:	e028      	b.n	1000ed16 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000ecc4:	4c4d      	ldr	r4, [pc, #308]	; (1000edfc <platform_event_wait+0x250>)
1000ecc6:	4d49      	ldr	r5, [pc, #292]	; (1000edec <platform_event_wait+0x240>)
1000ecc8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000ecca:	702b      	strb	r3, [r5, #0]
1000eccc:	0a1b      	lsrs	r3, r3, #8
1000ecce:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000ecd0:	8910      	ldrh	r0, [r2, #8]
1000ecd2:	4b4b      	ldr	r3, [pc, #300]	; (1000ee00 <platform_event_wait+0x254>)
1000ecd4:	681b      	ldr	r3, [r3, #0]
1000ecd6:	4798      	blx	r3
1000ecd8:	7128      	strb	r0, [r5, #4]
1000ecda:	0a00      	lsrs	r0, r0, #8
1000ecdc:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000ecde:	6820      	ldr	r0, [r4, #0]
1000ece0:	4b40      	ldr	r3, [pc, #256]	; (1000ede4 <platform_event_wait+0x238>)
1000ece2:	681a      	ldr	r2, [r3, #0]
1000ece4:	88d2      	ldrh	r2, [r2, #6]
1000ece6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000ece8:	681d      	ldr	r5, [r3, #0]
1000ecea:	896b      	ldrh	r3, [r5, #10]
1000ecec:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000ecee:	3008      	adds	r0, #8
1000ecf0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000ecf2:	896a      	ldrh	r2, [r5, #10]
1000ecf4:	2a00      	cmp	r2, #0
1000ecf6:	d003      	beq.n	1000ed00 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000ecf8:	0029      	movs	r1, r5
1000ecfa:	310c      	adds	r1, #12
1000ecfc:	4b3c      	ldr	r3, [pc, #240]	; (1000edf0 <platform_event_wait+0x244>)
1000ecfe:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000ed00:	8969      	ldrh	r1, [r5, #10]
1000ed02:	3108      	adds	r1, #8
1000ed04:	4b3c      	ldr	r3, [pc, #240]	; (1000edf8 <platform_event_wait+0x24c>)
1000ed06:	681b      	ldr	r3, [r3, #0]
1000ed08:	4838      	ldr	r0, [pc, #224]	; (1000edec <platform_event_wait+0x240>)
1000ed0a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ed0c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000ed0e:	2503      	movs	r5, #3
1000ed10:	e003      	b.n	1000ed1a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ed12:	2400      	movs	r4, #0
1000ed14:	e001      	b.n	1000ed1a <platform_event_wait+0x16e>
1000ed16:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000ed18:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000ed1a:	4b32      	ldr	r3, [pc, #200]	; (1000ede4 <platform_event_wait+0x238>)
1000ed1c:	6818      	ldr	r0, [r3, #0]
1000ed1e:	4b39      	ldr	r3, [pc, #228]	; (1000ee04 <platform_event_wait+0x258>)
1000ed20:	681b      	ldr	r3, [r3, #0]
1000ed22:	4798      	blx	r3
1000ed24:	e000      	b.n	1000ed28 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000ed26:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000ed28:	2c00      	cmp	r4, #0
1000ed2a:	d000      	beq.n	1000ed2e <platform_event_wait+0x182>
1000ed2c:	e76b      	b.n	1000ec06 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000ed2e:	464b      	mov	r3, r9
1000ed30:	2b00      	cmp	r3, #0
1000ed32:	d046      	beq.n	1000edc2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000ed34:	4b29      	ldr	r3, [pc, #164]	; (1000eddc <platform_event_wait+0x230>)
1000ed36:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000ed38:	2e00      	cmp	r6, #0
1000ed3a:	d104      	bne.n	1000ed46 <platform_event_wait+0x19a>
1000ed3c:	2300      	movs	r3, #0
1000ed3e:	6a1c      	ldr	r4, [r3, #32]
1000ed40:	2c00      	cmp	r4, #0
1000ed42:	d131      	bne.n	1000eda8 <platform_event_wait+0x1fc>
1000ed44:	e03d      	b.n	1000edc2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000ed46:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000ed48:	2314      	movs	r3, #20
1000ed4a:	469c      	mov	ip, r3
1000ed4c:	44b4      	add	ip, r6
1000ed4e:	4663      	mov	r3, ip
1000ed50:	4660      	mov	r0, ip
1000ed52:	9300      	str	r3, [sp, #0]
1000ed54:	4b2c      	ldr	r3, [pc, #176]	; (1000ee08 <platform_event_wait+0x25c>)
1000ed56:	681b      	ldr	r3, [r3, #0]
1000ed58:	4798      	blx	r3
	while(NULL != current)
1000ed5a:	2c00      	cmp	r4, #0
1000ed5c:	d01f      	beq.n	1000ed9e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000ed5e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ed60:	23cd      	movs	r3, #205	; 0xcd
1000ed62:	009b      	lsls	r3, r3, #2
1000ed64:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000ed66:	4b27      	ldr	r3, [pc, #156]	; (1000ee04 <platform_event_wait+0x258>)
1000ed68:	469a      	mov	sl, r3
1000ed6a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ed6c:	6803      	ldr	r3, [r0, #0]
1000ed6e:	889b      	ldrh	r3, [r3, #4]
1000ed70:	4543      	cmp	r3, r8
1000ed72:	d110      	bne.n	1000ed96 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000ed74:	2f00      	cmp	r7, #0
1000ed76:	d006      	beq.n	1000ed86 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000ed78:	6883      	ldr	r3, [r0, #8]
1000ed7a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000ed7c:	4653      	mov	r3, sl
1000ed7e:	681b      	ldr	r3, [r3, #0]
1000ed80:	4798      	blx	r3
				current = prev->pstrNext;
1000ed82:	68b8      	ldr	r0, [r7, #8]
1000ed84:	e009      	b.n	1000ed9a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000ed86:	6883      	ldr	r3, [r0, #8]
1000ed88:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000ed8a:	4b1e      	ldr	r3, [pc, #120]	; (1000ee04 <platform_event_wait+0x258>)
1000ed8c:	681b      	ldr	r3, [r3, #0]
1000ed8e:	9301      	str	r3, [sp, #4]
1000ed90:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000ed92:	6a30      	ldr	r0, [r6, #32]
1000ed94:	e001      	b.n	1000ed9a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000ed96:	0007      	movs	r7, r0
1000ed98:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000ed9a:	2800      	cmp	r0, #0
1000ed9c:	d1e6      	bne.n	1000ed6c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000ed9e:	4b1b      	ldr	r3, [pc, #108]	; (1000ee0c <platform_event_wait+0x260>)
1000eda0:	681b      	ldr	r3, [r3, #0]
1000eda2:	9800      	ldr	r0, [sp, #0]
1000eda4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000eda6:	e00c      	b.n	1000edc2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000eda8:	2314      	movs	r3, #20
1000edaa:	9300      	str	r3, [sp, #0]
1000edac:	4b16      	ldr	r3, [pc, #88]	; (1000ee08 <platform_event_wait+0x25c>)
1000edae:	681b      	ldr	r3, [r3, #0]
1000edb0:	2014      	movs	r0, #20
1000edb2:	4798      	blx	r3
1000edb4:	e7d3      	b.n	1000ed5e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000edb6:	4b10      	ldr	r3, [pc, #64]	; (1000edf8 <platform_event_wait+0x24c>)
1000edb8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000edba:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000edbc:	2b00      	cmp	r3, #0
1000edbe:	d0ac      	beq.n	1000ed1a <platform_event_wait+0x16e>
1000edc0:	e77b      	b.n	1000ecba <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000edc2:	0028      	movs	r0, r5
1000edc4:	b007      	add	sp, #28
1000edc6:	bc3c      	pop	{r2, r3, r4, r5}
1000edc8:	4690      	mov	r8, r2
1000edca:	4699      	mov	r9, r3
1000edcc:	46a2      	mov	sl, r4
1000edce:	46ab      	mov	fp, r5
1000edd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000edd2:	46c0      	nop			; (mov r8, r8)
1000edd4:	100148f1 	.word	0x100148f1
1000edd8:	1000eb1d 	.word	0x1000eb1d
1000eddc:	10018b0c 	.word	0x10018b0c
1000ede0:	10018af4 	.word	0x10018af4
1000ede4:	10018b00 	.word	0x10018b00
1000ede8:	10019a24 	.word	0x10019a24
1000edec:	1001978c 	.word	0x1001978c
1000edf0:	100148df 	.word	0x100148df
1000edf4:	1000e73d 	.word	0x1000e73d
1000edf8:	10018afc 	.word	0x10018afc
1000edfc:	10018aec 	.word	0x10018aec
1000ee00:	10018acc 	.word	0x10018acc
1000ee04:	10018ac8 	.word	0x10018ac8
1000ee08:	10018ae8 	.word	0x10018ae8
1000ee0c:	10018ad4 	.word	0x10018ad4

1000ee10 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ee10:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ee12:	4b03      	ldr	r3, [pc, #12]	; (1000ee20 <acquire_sleep_lock+0x10>)
1000ee14:	681b      	ldr	r3, [r3, #0]
1000ee16:	2080      	movs	r0, #128	; 0x80
1000ee18:	0200      	lsls	r0, r0, #8
1000ee1a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ee1c:	2008      	movs	r0, #8
1000ee1e:	bd10      	pop	{r4, pc}
1000ee20:	10019744 	.word	0x10019744

1000ee24 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ee24:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ee26:	4b03      	ldr	r3, [pc, #12]	; (1000ee34 <release_message_lock+0x10>)
1000ee28:	681b      	ldr	r3, [r3, #0]
1000ee2a:	2080      	movs	r0, #128	; 0x80
1000ee2c:	01c0      	lsls	r0, r0, #7
1000ee2e:	4798      	blx	r3
	return status;
}
1000ee30:	2000      	movs	r0, #0
1000ee32:	bd10      	pop	{r4, pc}
1000ee34:	10019750 	.word	0x10019750

1000ee38 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ee38:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ee3a:	4c05      	ldr	r4, [pc, #20]	; (1000ee50 <release_sleep_lock+0x18>)
1000ee3c:	2080      	movs	r0, #128	; 0x80
1000ee3e:	01c0      	lsls	r0, r0, #7
1000ee40:	6823      	ldr	r3, [r4, #0]
1000ee42:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000ee44:	6823      	ldr	r3, [r4, #0]
1000ee46:	2080      	movs	r0, #128	; 0x80
1000ee48:	0200      	lsls	r0, r0, #8
1000ee4a:	4798      	blx	r3
	return status;
}
1000ee4c:	2000      	movs	r0, #0
1000ee4e:	bd10      	pop	{r4, pc}
1000ee50:	10019750 	.word	0x10019750

1000ee54 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000ee54:	2800      	cmp	r0, #0
1000ee56:	d003      	beq.n	1000ee60 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000ee58:	4b02      	ldr	r3, [pc, #8]	; (1000ee64 <register_resume_callback+0x10>)
1000ee5a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000ee5c:	2000      	movs	r0, #0
1000ee5e:	e000      	b.n	1000ee62 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000ee60:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000ee62:	4770      	bx	lr
1000ee64:	10019a18 	.word	0x10019a18

1000ee68 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000ee68:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ee6a:	4a18      	ldr	r2, [pc, #96]	; (1000eecc <gpio1_combined_isr_handler+0x64>)
1000ee6c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ee6e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ee70:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ee72:	2180      	movs	r1, #128	; 0x80
1000ee74:	0209      	lsls	r1, r1, #8
1000ee76:	4301      	orrs	r1, r0
1000ee78:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ee7a:	0010      	movs	r0, r2
1000ee7c:	4d14      	ldr	r5, [pc, #80]	; (1000eed0 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ee7e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ee80:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ee82:	05db      	lsls	r3, r3, #23
1000ee84:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ee86:	d011      	beq.n	1000eeac <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ee88:	b2db      	uxtb	r3, r3
1000ee8a:	4259      	negs	r1, r3
1000ee8c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000ee8e:	2b01      	cmp	r3, #1
1000ee90:	d006      	beq.n	1000eea0 <gpio1_combined_isr_handler+0x38>
1000ee92:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000ee94:	085b      	lsrs	r3, r3, #1
				index++;
1000ee96:	3101      	adds	r1, #1
1000ee98:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000ee9a:	2b01      	cmp	r3, #1
1000ee9c:	d1fa      	bne.n	1000ee94 <gpio1_combined_isr_handler+0x2c>
1000ee9e:	e000      	b.n	1000eea2 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000eea0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000eea2:	0023      	movs	r3, r4
1000eea4:	408b      	lsls	r3, r1
1000eea6:	b29b      	uxth	r3, r3
1000eea8:	8703      	strh	r3, [r0, #56]	; 0x38
1000eeaa:	e003      	b.n	1000eeb4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000eeac:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000eeae:	432b      	orrs	r3, r5
1000eeb0:	b29b      	uxth	r3, r3
1000eeb2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000eeb4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000eeb6:	05db      	lsls	r3, r3, #23
1000eeb8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000eeba:	d1e2      	bne.n	1000ee82 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000eebc:	2180      	movs	r1, #128	; 0x80
1000eebe:	0049      	lsls	r1, r1, #1
1000eec0:	3381      	adds	r3, #129	; 0x81
1000eec2:	33ff      	adds	r3, #255	; 0xff
1000eec4:	4a03      	ldr	r2, [pc, #12]	; (1000eed4 <gpio1_combined_isr_handler+0x6c>)
1000eec6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000eec8:	bd30      	pop	{r4, r5, pc}
1000eeca:	46c0      	nop			; (mov r8, r8)
1000eecc:	40011000 	.word	0x40011000
1000eed0:	ffff8000 	.word	0xffff8000
1000eed4:	e000e100 	.word	0xe000e100

1000eed8 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000eed8:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000eeda:	4a17      	ldr	r2, [pc, #92]	; (1000ef38 <gpio0_combined_isr_handler+0x60>)
1000eedc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000eede:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000eee0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000eee2:	2180      	movs	r1, #128	; 0x80
1000eee4:	0209      	lsls	r1, r1, #8
1000eee6:	4301      	orrs	r1, r0
1000eee8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000eeea:	0010      	movs	r0, r2
1000eeec:	4d13      	ldr	r5, [pc, #76]	; (1000ef3c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000eeee:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000eef0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000eef2:	05db      	lsls	r3, r3, #23
1000eef4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000eef6:	d011      	beq.n	1000ef1c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000eef8:	b2db      	uxtb	r3, r3
1000eefa:	4259      	negs	r1, r3
1000eefc:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000eefe:	2b01      	cmp	r3, #1
1000ef00:	d006      	beq.n	1000ef10 <gpio0_combined_isr_handler+0x38>
1000ef02:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ef04:	085b      	lsrs	r3, r3, #1
				index++;
1000ef06:	3101      	adds	r1, #1
1000ef08:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ef0a:	2b01      	cmp	r3, #1
1000ef0c:	d1fa      	bne.n	1000ef04 <gpio0_combined_isr_handler+0x2c>
1000ef0e:	e000      	b.n	1000ef12 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ef10:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ef12:	0023      	movs	r3, r4
1000ef14:	408b      	lsls	r3, r1
1000ef16:	b29b      	uxth	r3, r3
1000ef18:	8703      	strh	r3, [r0, #56]	; 0x38
1000ef1a:	e003      	b.n	1000ef24 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ef1c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ef1e:	432b      	orrs	r3, r5
1000ef20:	b29b      	uxth	r3, r3
1000ef22:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ef24:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ef26:	05db      	lsls	r3, r3, #23
1000ef28:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ef2a:	d1e2      	bne.n	1000eef2 <gpio0_combined_isr_handler+0x1a>
1000ef2c:	2180      	movs	r1, #128	; 0x80
1000ef2e:	3381      	adds	r3, #129	; 0x81
1000ef30:	33ff      	adds	r3, #255	; 0xff
1000ef32:	4a03      	ldr	r2, [pc, #12]	; (1000ef40 <gpio0_combined_isr_handler+0x68>)
1000ef34:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000ef36:	bd30      	pop	{r4, r5, pc}
1000ef38:	40010000 	.word	0x40010000
1000ef3c:	ffff8000 	.word	0xffff8000
1000ef40:	e000e100 	.word	0xe000e100

1000ef44 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000ef44:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000ef46:	4b0c      	ldr	r3, [pc, #48]	; (1000ef78 <PORT1_COMB_Handler+0x34>)
1000ef48:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ef4a:	0b5b      	lsrs	r3, r3, #13
1000ef4c:	d010      	beq.n	1000ef70 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000ef4e:	4b0b      	ldr	r3, [pc, #44]	; (1000ef7c <PORT1_COMB_Handler+0x38>)
1000ef50:	681b      	ldr	r3, [r3, #0]
1000ef52:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000ef54:	4a08      	ldr	r2, [pc, #32]	; (1000ef78 <PORT1_COMB_Handler+0x34>)
1000ef56:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ef58:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000ef5a:	0b5b      	lsrs	r3, r3, #13
1000ef5c:	035b      	lsls	r3, r3, #13
1000ef5e:	430b      	orrs	r3, r1
1000ef60:	8713      	strh	r3, [r2, #56]	; 0x38
1000ef62:	2180      	movs	r1, #128	; 0x80
1000ef64:	0049      	lsls	r1, r1, #1
1000ef66:	23c0      	movs	r3, #192	; 0xc0
1000ef68:	005b      	lsls	r3, r3, #1
1000ef6a:	4a05      	ldr	r2, [pc, #20]	; (1000ef80 <PORT1_COMB_Handler+0x3c>)
1000ef6c:	50d1      	str	r1, [r2, r3]
1000ef6e:	e001      	b.n	1000ef74 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000ef70:	4b04      	ldr	r3, [pc, #16]	; (1000ef84 <PORT1_COMB_Handler+0x40>)
1000ef72:	4798      	blx	r3
	}
}
1000ef74:	bd10      	pop	{r4, pc}
1000ef76:	46c0      	nop			; (mov r8, r8)
1000ef78:	40011000 	.word	0x40011000
1000ef7c:	10019a10 	.word	0x10019a10
1000ef80:	e000e100 	.word	0xe000e100
1000ef84:	1000ee69 	.word	0x1000ee69

1000ef88 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000ef88:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000ef8a:	2802      	cmp	r0, #2
1000ef8c:	d804      	bhi.n	1000ef98 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ef8e:	0080      	lsls	r0, r0, #2
1000ef90:	2200      	movs	r2, #0
1000ef92:	4b02      	ldr	r3, [pc, #8]	; (1000ef9c <wakeup_int_unregister_callback+0x14>)
1000ef94:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ef96:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000ef98:	0018      	movs	r0, r3
1000ef9a:	4770      	bx	lr
1000ef9c:	10019a28 	.word	0x10019a28

1000efa0 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000efa0:	b510      	push	{r4, lr}
1000efa2:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000efa4:	7803      	ldrb	r3, [r0, #0]
1000efa6:	2b01      	cmp	r3, #1
1000efa8:	d108      	bne.n	1000efbc <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000efaa:	4b11      	ldr	r3, [pc, #68]	; (1000eff0 <wakeup_active_event_callback+0x50>)
1000efac:	681b      	ldr	r3, [r3, #0]
1000efae:	2b00      	cmp	r3, #0
1000efb0:	d000      	beq.n	1000efb4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000efb2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000efb4:	23ff      	movs	r3, #255	; 0xff
1000efb6:	6822      	ldr	r2, [r4, #0]
1000efb8:	439a      	bics	r2, r3
1000efba:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000efbc:	7863      	ldrb	r3, [r4, #1]
1000efbe:	2b01      	cmp	r3, #1
1000efc0:	d108      	bne.n	1000efd4 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000efc2:	4b0b      	ldr	r3, [pc, #44]	; (1000eff0 <wakeup_active_event_callback+0x50>)
1000efc4:	685b      	ldr	r3, [r3, #4]
1000efc6:	2b00      	cmp	r3, #0
1000efc8:	d000      	beq.n	1000efcc <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000efca:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000efcc:	4b09      	ldr	r3, [pc, #36]	; (1000eff4 <wakeup_active_event_callback+0x54>)
1000efce:	6822      	ldr	r2, [r4, #0]
1000efd0:	4013      	ands	r3, r2
1000efd2:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000efd4:	78a3      	ldrb	r3, [r4, #2]
1000efd6:	2b01      	cmp	r3, #1
1000efd8:	d108      	bne.n	1000efec <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000efda:	4b05      	ldr	r3, [pc, #20]	; (1000eff0 <wakeup_active_event_callback+0x50>)
1000efdc:	689b      	ldr	r3, [r3, #8]
1000efde:	2b00      	cmp	r3, #0
1000efe0:	d000      	beq.n	1000efe4 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000efe2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000efe4:	4b04      	ldr	r3, [pc, #16]	; (1000eff8 <wakeup_active_event_callback+0x58>)
1000efe6:	6822      	ldr	r2, [r4, #0]
1000efe8:	4013      	ands	r3, r2
1000efea:	6023      	str	r3, [r4, #0]
	}
}
1000efec:	bd10      	pop	{r4, pc}
1000efee:	46c0      	nop			; (mov r8, r8)
1000eff0:	10019a28 	.word	0x10019a28
1000eff4:	ffff00ff 	.word	0xffff00ff
1000eff8:	ff00ffff 	.word	0xff00ffff

1000effc <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000effc:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000effe:	4b09      	ldr	r3, [pc, #36]	; (1000f024 <resume_cb+0x28>)
1000f000:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000f002:	4b09      	ldr	r3, [pc, #36]	; (1000f028 <resume_cb+0x2c>)
1000f004:	4798      	blx	r3
	sms_dualtimer_init();
1000f006:	4b09      	ldr	r3, [pc, #36]	; (1000f02c <resume_cb+0x30>)
1000f008:	4798      	blx	r3
	delay_init();
1000f00a:	4b09      	ldr	r3, [pc, #36]	; (1000f030 <resume_cb+0x34>)
1000f00c:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000f00e:	4b09      	ldr	r3, [pc, #36]	; (1000f034 <resume_cb+0x38>)
1000f010:	4798      	blx	r3
	sms_led_gpio_init();
1000f012:	4b09      	ldr	r3, [pc, #36]	; (1000f038 <resume_cb+0x3c>)
1000f014:	4798      	blx	r3
	sms_spi_master_configure();
1000f016:	4b09      	ldr	r3, [pc, #36]	; (1000f03c <resume_cb+0x40>)
1000f018:	4798      	blx	r3
	sms_i2c_master_configure();
1000f01a:	4b09      	ldr	r3, [pc, #36]	; (1000f040 <resume_cb+0x44>)
1000f01c:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000f01e:	4b09      	ldr	r3, [pc, #36]	; (1000f044 <resume_cb+0x48>)
1000f020:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f022:	bd10      	pop	{r4, pc}
1000f024:	1000e849 	.word	0x1000e849
1000f028:	1000e5b1 	.word	0x1000e5b1
1000f02c:	1000b1a9 	.word	0x1000b1a9
1000f030:	100080e9 	.word	0x100080e9
1000f034:	1000a551 	.word	0x1000a551
1000f038:	1000ac8d 	.word	0x1000ac8d
1000f03c:	1000b059 	.word	0x1000b059
1000f040:	1000a8dd 	.word	0x1000a8dd
1000f044:	1000a83d 	.word	0x1000a83d

1000f048 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f048:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000f04a:	2300      	movs	r3, #0
1000f04c:	4a09      	ldr	r2, [pc, #36]	; (1000f074 <sms_init_variables+0x2c>)
1000f04e:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000f050:	4a09      	ldr	r2, [pc, #36]	; (1000f078 <sms_init_variables+0x30>)
1000f052:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f054:	2101      	movs	r1, #1
1000f056:	4a09      	ldr	r2, [pc, #36]	; (1000f07c <sms_init_variables+0x34>)
1000f058:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000f05a:	4a09      	ldr	r2, [pc, #36]	; (1000f080 <sms_init_variables+0x38>)
1000f05c:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000f05e:	2201      	movs	r2, #1
1000f060:	4252      	negs	r2, r2
1000f062:	4b08      	ldr	r3, [pc, #32]	; (1000f084 <sms_init_variables+0x3c>)
1000f064:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000f066:	4b08      	ldr	r3, [pc, #32]	; (1000f088 <sms_init_variables+0x40>)
1000f068:	4798      	blx	r3
	sms_button_init_variables();
1000f06a:	4b08      	ldr	r3, [pc, #32]	; (1000f08c <sms_init_variables+0x44>)
1000f06c:	4798      	blx	r3
	sms_pressure_init_variables();
1000f06e:	4b08      	ldr	r3, [pc, #32]	; (1000f090 <sms_init_variables+0x48>)
1000f070:	4798      	blx	r3
}
1000f072:	bd10      	pop	{r4, pc}
1000f074:	10018be0 	.word	0x10018be0
1000f078:	10018d9b 	.word	0x10018d9b
1000f07c:	10018c74 	.word	0x10018c74
1000f080:	10018c75 	.word	0x10018c75
1000f084:	10018c70 	.word	0x10018c70
1000f088:	10009f6d 	.word	0x10009f6d
1000f08c:	1000a529 	.word	0x1000a529
1000f090:	1000ad29 	.word	0x1000ad29

1000f094 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000f096:	2210      	movs	r2, #16
1000f098:	4b8e      	ldr	r3, [pc, #568]	; (1000f2d4 <main+0x240>)
1000f09a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000f09c:	4b8e      	ldr	r3, [pc, #568]	; (1000f2d8 <main+0x244>)
1000f09e:	4798      	blx	r3
	gpio_init(); // GPIO
1000f0a0:	4b8e      	ldr	r3, [pc, #568]	; (1000f2dc <main+0x248>)
1000f0a2:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f0a4:	4b8e      	ldr	r3, [pc, #568]	; (1000f2e0 <main+0x24c>)
1000f0a6:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000f0a8:	4b8e      	ldr	r3, [pc, #568]	; (1000f2e4 <main+0x250>)
1000f0aa:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000f0ac:	4b8e      	ldr	r3, [pc, #568]	; (1000f2e8 <main+0x254>)
1000f0ae:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000f0b0:	4b8e      	ldr	r3, [pc, #568]	; (1000f2ec <main+0x258>)
1000f0b2:	4798      	blx	r3
	
	// Blocking delay (hacked from other SAM platforms)
	delay_init();
1000f0b4:	4b8e      	ldr	r3, [pc, #568]	; (1000f2f0 <main+0x25c>)
1000f0b6:	4798      	blx	r3

	// Buttons
	sms_button_gpio_init();
1000f0b8:	4b8e      	ldr	r3, [pc, #568]	; (1000f2f4 <main+0x260>)
1000f0ba:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000f0bc:	4b8e      	ldr	r3, [pc, #568]	; (1000f2f8 <main+0x264>)
1000f0be:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000f0c0:	4b8e      	ldr	r3, [pc, #568]	; (1000f2fc <main+0x268>)
1000f0c2:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000f0c4:	4b8e      	ldr	r3, [pc, #568]	; (1000f300 <main+0x26c>)
1000f0c6:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000f0c8:	4b8e      	ldr	r3, [pc, #568]	; (1000f304 <main+0x270>)
1000f0ca:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000f0cc:	4b8e      	ldr	r3, [pc, #568]	; (1000f308 <main+0x274>)
1000f0ce:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000f0d0:	2000      	movs	r0, #0
1000f0d2:	4b8e      	ldr	r3, [pc, #568]	; (1000f30c <main+0x278>)
1000f0d4:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000f0d6:	4b8e      	ldr	r3, [pc, #568]	; (1000f310 <main+0x27c>)
1000f0d8:	4798      	blx	r3
	sms_pressure_define_services();
1000f0da:	4b8e      	ldr	r3, [pc, #568]	; (1000f314 <main+0x280>)
1000f0dc:	4798      	blx	r3
	sms_mpu_define_services();
1000f0de:	4b8e      	ldr	r3, [pc, #568]	; (1000f318 <main+0x284>)
1000f0e0:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000f0e2:	488e      	ldr	r0, [pc, #568]	; (1000f31c <main+0x288>)
1000f0e4:	4b8e      	ldr	r3, [pc, #568]	; (1000f320 <main+0x28c>)
1000f0e6:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f0e8:	498e      	ldr	r1, [pc, #568]	; (1000f324 <main+0x290>)
1000f0ea:	2000      	movs	r0, #0
1000f0ec:	4c8e      	ldr	r4, [pc, #568]	; (1000f328 <main+0x294>)
1000f0ee:	47a0      	blx	r4
	sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f0f0:	498e      	ldr	r1, [pc, #568]	; (1000f32c <main+0x298>)
1000f0f2:	2001      	movs	r0, #1
1000f0f4:	47a0      	blx	r4

	// Buttons
	sms_button_register_callbacks();
1000f0f6:	4b8e      	ldr	r3, [pc, #568]	; (1000f330 <main+0x29c>)
1000f0f8:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000f0fa:	4b8e      	ldr	r3, [pc, #568]	; (1000f334 <main+0x2a0>)
1000f0fc:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f0fe:	4a8e      	ldr	r2, [pc, #568]	; (1000f338 <main+0x2a4>)
1000f100:	2100      	movs	r1, #0
1000f102:	2000      	movs	r0, #0
1000f104:	4c8d      	ldr	r4, [pc, #564]	; (1000f33c <main+0x2a8>)
1000f106:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f108:	4a8d      	ldr	r2, [pc, #564]	; (1000f340 <main+0x2ac>)
1000f10a:	2102      	movs	r1, #2
1000f10c:	2000      	movs	r0, #0
1000f10e:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f110:	2100      	movs	r1, #0
1000f112:	2000      	movs	r0, #0
1000f114:	4b8b      	ldr	r3, [pc, #556]	; (1000f344 <main+0x2b0>)
1000f116:	4798      	blx	r3


	/* Goto sleep
	* ---------- */
	sms_ble_power_down();
1000f118:	4b8b      	ldr	r3, [pc, #556]	; (1000f348 <main+0x2b4>)
1000f11a:	4798      	blx	r3
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000f11c:	4e8b      	ldr	r6, [pc, #556]	; (1000f34c <main+0x2b8>)
1000f11e:	4c8c      	ldr	r4, [pc, #560]	; (1000f350 <main+0x2bc>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000f120:	4d8c      	ldr	r5, [pc, #560]	; (1000f354 <main+0x2c0>)
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000f122:	6830      	ldr	r0, [r6, #0]
1000f124:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000f126:	2800      	cmp	r0, #0
1000f128:	d000      	beq.n	1000f12c <main+0x98>
1000f12a:	e0b9      	b.n	1000f2a0 <main+0x20c>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000f12c:	4b8a      	ldr	r3, [pc, #552]	; (1000f358 <main+0x2c4>)
1000f12e:	78db      	ldrb	r3, [r3, #3]
1000f130:	2b00      	cmp	r3, #0
1000f132:	d00b      	beq.n	1000f14c <main+0xb8>
				DBG_LOG("Btn0 int... ");
1000f134:	4887      	ldr	r0, [pc, #540]	; (1000f354 <main+0x2c0>)
1000f136:	4b89      	ldr	r3, [pc, #548]	; (1000f35c <main+0x2c8>)
1000f138:	4798      	blx	r3
1000f13a:	4889      	ldr	r0, [pc, #548]	; (1000f360 <main+0x2cc>)
1000f13c:	4b89      	ldr	r3, [pc, #548]	; (1000f364 <main+0x2d0>)
1000f13e:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000f140:	2000      	movs	r0, #0
1000f142:	4b89      	ldr	r3, [pc, #548]	; (1000f368 <main+0x2d4>)
1000f144:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000f146:	2200      	movs	r2, #0
1000f148:	4b83      	ldr	r3, [pc, #524]	; (1000f358 <main+0x2c4>)
1000f14a:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000f14c:	4b82      	ldr	r3, [pc, #520]	; (1000f358 <main+0x2c4>)
1000f14e:	7a5b      	ldrb	r3, [r3, #9]
1000f150:	2b00      	cmp	r3, #0
1000f152:	d00b      	beq.n	1000f16c <main+0xd8>
				DBG_LOG("Btn1 int... ");
1000f154:	487f      	ldr	r0, [pc, #508]	; (1000f354 <main+0x2c0>)
1000f156:	4b81      	ldr	r3, [pc, #516]	; (1000f35c <main+0x2c8>)
1000f158:	4798      	blx	r3
1000f15a:	4884      	ldr	r0, [pc, #528]	; (1000f36c <main+0x2d8>)
1000f15c:	4b81      	ldr	r3, [pc, #516]	; (1000f364 <main+0x2d0>)
1000f15e:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000f160:	2001      	movs	r0, #1
1000f162:	4b81      	ldr	r3, [pc, #516]	; (1000f368 <main+0x2d4>)
1000f164:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000f166:	2200      	movs	r2, #0
1000f168:	4b7b      	ldr	r3, [pc, #492]	; (1000f358 <main+0x2c4>)
1000f16a:	725a      	strb	r2, [r3, #9]
			}
			if(mpu_device.new_int) {
1000f16c:	2329      	movs	r3, #41	; 0x29
1000f16e:	4a80      	ldr	r2, [pc, #512]	; (1000f370 <main+0x2dc>)
1000f170:	5cd3      	ldrb	r3, [r2, r3]
1000f172:	2b00      	cmp	r3, #0
1000f174:	d018      	beq.n	1000f1a8 <main+0x114>
				DBG_LOG("MPU int (%d)... ", ble_instance.sending_queue);
1000f176:	4877      	ldr	r0, [pc, #476]	; (1000f354 <main+0x2c0>)
1000f178:	4b78      	ldr	r3, [pc, #480]	; (1000f35c <main+0x2c8>)
1000f17a:	4798      	blx	r3
1000f17c:	4b55      	ldr	r3, [pc, #340]	; (1000f2d4 <main+0x240>)
1000f17e:	7859      	ldrb	r1, [r3, #1]
1000f180:	b2c9      	uxtb	r1, r1
1000f182:	487c      	ldr	r0, [pc, #496]	; (1000f374 <main+0x2e0>)
1000f184:	4b77      	ldr	r3, [pc, #476]	; (1000f364 <main+0x2d0>)
1000f186:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000f188:	2101      	movs	r1, #1
1000f18a:	200e      	movs	r0, #14
1000f18c:	4f7a      	ldr	r7, [pc, #488]	; (1000f378 <main+0x2e4>)
1000f18e:	47b8      	blx	r7
				sms_mpu_poll_data();
1000f190:	4b7a      	ldr	r3, [pc, #488]	; (1000f37c <main+0x2e8>)
1000f192:	4798      	blx	r3
				mpu_device.new_int = false;
1000f194:	4b76      	ldr	r3, [pc, #472]	; (1000f370 <main+0x2dc>)
1000f196:	2100      	movs	r1, #0
1000f198:	2229      	movs	r2, #41	; 0x29
1000f19a:	5499      	strb	r1, [r3, r2]
				mpu_device.rts = true;
1000f19c:	3101      	adds	r1, #1
1000f19e:	3205      	adds	r2, #5
1000f1a0:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000f1a2:	2100      	movs	r1, #0
1000f1a4:	200e      	movs	r0, #14
1000f1a6:	47b8      	blx	r7
				DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000f1a8:	2329      	movs	r3, #41	; 0x29
1000f1aa:	4a75      	ldr	r2, [pc, #468]	; (1000f380 <main+0x2ec>)
1000f1ac:	5cd3      	ldrb	r3, [r2, r3]
1000f1ae:	2b00      	cmp	r3, #0
1000f1b0:	d002      	beq.n	1000f1b8 <main+0x124>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000f1b2:	2100      	movs	r1, #0
1000f1b4:	2329      	movs	r3, #41	; 0x29
1000f1b6:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000f1b8:	4b72      	ldr	r3, [pc, #456]	; (1000f384 <main+0x2f0>)
1000f1ba:	789b      	ldrb	r3, [r3, #2]
1000f1bc:	2b00      	cmp	r3, #0
1000f1be:	d00d      	beq.n	1000f1dc <main+0x148>
				DBG_LOG("Timer1 int... ");
1000f1c0:	4864      	ldr	r0, [pc, #400]	; (1000f354 <main+0x2c0>)
1000f1c2:	4b66      	ldr	r3, [pc, #408]	; (1000f35c <main+0x2c8>)
1000f1c4:	4798      	blx	r3
1000f1c6:	4870      	ldr	r0, [pc, #448]	; (1000f388 <main+0x2f4>)
1000f1c8:	4b66      	ldr	r3, [pc, #408]	; (1000f364 <main+0x2d0>)
1000f1ca:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f1cc:	2000      	movs	r0, #0
1000f1ce:	4b6f      	ldr	r3, [pc, #444]	; (1000f38c <main+0x2f8>)
1000f1d0:	4798      	blx	r3
				sms_dualtimer1_fn();
1000f1d2:	4b6f      	ldr	r3, [pc, #444]	; (1000f390 <main+0x2fc>)
1000f1d4:	4798      	blx	r3
				timer1_instance.new_int = false;
1000f1d6:	2200      	movs	r2, #0
1000f1d8:	4b6a      	ldr	r3, [pc, #424]	; (1000f384 <main+0x2f0>)
1000f1da:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000f1dc:	4b6d      	ldr	r3, [pc, #436]	; (1000f394 <main+0x300>)
1000f1de:	789b      	ldrb	r3, [r3, #2]
1000f1e0:	2b00      	cmp	r3, #0
1000f1e2:	d00d      	beq.n	1000f200 <main+0x16c>
				DBG_LOG("Timer2 int... ");
1000f1e4:	485b      	ldr	r0, [pc, #364]	; (1000f354 <main+0x2c0>)
1000f1e6:	4b5d      	ldr	r3, [pc, #372]	; (1000f35c <main+0x2c8>)
1000f1e8:	4798      	blx	r3
1000f1ea:	486b      	ldr	r0, [pc, #428]	; (1000f398 <main+0x304>)
1000f1ec:	4b5d      	ldr	r3, [pc, #372]	; (1000f364 <main+0x2d0>)
1000f1ee:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f1f0:	2001      	movs	r0, #1
1000f1f2:	4b66      	ldr	r3, [pc, #408]	; (1000f38c <main+0x2f8>)
1000f1f4:	4798      	blx	r3
				sms_dualtimer2_fn();
1000f1f6:	4b69      	ldr	r3, [pc, #420]	; (1000f39c <main+0x308>)
1000f1f8:	4798      	blx	r3
				timer2_instance.new_int = false;
1000f1fa:	2200      	movs	r2, #0
1000f1fc:	4b65      	ldr	r3, [pc, #404]	; (1000f394 <main+0x300>)
1000f1fe:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(mpu_device.rts) {
1000f200:	232e      	movs	r3, #46	; 0x2e
1000f202:	4a5b      	ldr	r2, [pc, #364]	; (1000f370 <main+0x2dc>)
1000f204:	5cd3      	ldrb	r3, [r2, r3]
1000f206:	2b00      	cmp	r3, #0
1000f208:	d021      	beq.n	1000f24e <main+0x1ba>
				DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
1000f20a:	4852      	ldr	r0, [pc, #328]	; (1000f354 <main+0x2c0>)
1000f20c:	4b53      	ldr	r3, [pc, #332]	; (1000f35c <main+0x2c8>)
1000f20e:	4798      	blx	r3
1000f210:	2329      	movs	r3, #41	; 0x29
1000f212:	4a5b      	ldr	r2, [pc, #364]	; (1000f380 <main+0x2ec>)
1000f214:	5cd1      	ldrb	r1, [r2, r3]
1000f216:	b2c9      	uxtb	r1, r1
1000f218:	4f2e      	ldr	r7, [pc, #184]	; (1000f2d4 <main+0x240>)
1000f21a:	787a      	ldrb	r2, [r7, #1]
1000f21c:	b2d2      	uxtb	r2, r2
1000f21e:	4860      	ldr	r0, [pc, #384]	; (1000f3a0 <main+0x30c>)
1000f220:	4b50      	ldr	r3, [pc, #320]	; (1000f364 <main+0x2d0>)
1000f222:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000f224:	2101      	movs	r1, #1
1000f226:	200f      	movs	r0, #15
1000f228:	4b53      	ldr	r3, [pc, #332]	; (1000f378 <main+0x2e4>)
1000f22a:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000f22c:	787b      	ldrb	r3, [r7, #1]
1000f22e:	2b00      	cmp	r3, #0
1000f230:	d103      	bne.n	1000f23a <main+0x1a6>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000f232:	2002      	movs	r0, #2
1000f234:	4b5b      	ldr	r3, [pc, #364]	; (1000f3a4 <main+0x310>)
1000f236:	4798      	blx	r3
1000f238:	e002      	b.n	1000f240 <main+0x1ac>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000f23a:	485b      	ldr	r0, [pc, #364]	; (1000f3a8 <main+0x314>)
1000f23c:	4b49      	ldr	r3, [pc, #292]	; (1000f364 <main+0x2d0>)
1000f23e:	4798      	blx	r3
				}
				mpu_device.rts = false;
1000f240:	2100      	movs	r1, #0
1000f242:	232e      	movs	r3, #46	; 0x2e
1000f244:	4a4a      	ldr	r2, [pc, #296]	; (1000f370 <main+0x2dc>)
1000f246:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000f248:	200f      	movs	r0, #15
1000f24a:	4b4b      	ldr	r3, [pc, #300]	; (1000f378 <main+0x2e4>)
1000f24c:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000f24e:	232a      	movs	r3, #42	; 0x2a
1000f250:	4a4b      	ldr	r2, [pc, #300]	; (1000f380 <main+0x2ec>)
1000f252:	5cd3      	ldrb	r3, [r2, r3]
1000f254:	2b00      	cmp	r3, #0
1000f256:	d100      	bne.n	1000f25a <main+0x1c6>
1000f258:	e763      	b.n	1000f122 <main+0x8e>
				DBG_LOG("Press sending (%d/%d)... ", mpu_device.new_int, ble_instance.sending_queue);
1000f25a:	483e      	ldr	r0, [pc, #248]	; (1000f354 <main+0x2c0>)
1000f25c:	4b3f      	ldr	r3, [pc, #252]	; (1000f35c <main+0x2c8>)
1000f25e:	4798      	blx	r3
1000f260:	2329      	movs	r3, #41	; 0x29
1000f262:	4a43      	ldr	r2, [pc, #268]	; (1000f370 <main+0x2dc>)
1000f264:	5cd1      	ldrb	r1, [r2, r3]
1000f266:	b2c9      	uxtb	r1, r1
1000f268:	4f1a      	ldr	r7, [pc, #104]	; (1000f2d4 <main+0x240>)
1000f26a:	787a      	ldrb	r2, [r7, #1]
1000f26c:	b2d2      	uxtb	r2, r2
1000f26e:	484f      	ldr	r0, [pc, #316]	; (1000f3ac <main+0x318>)
1000f270:	4b3c      	ldr	r3, [pc, #240]	; (1000f364 <main+0x2d0>)
1000f272:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000f274:	2101      	movs	r1, #1
1000f276:	200f      	movs	r0, #15
1000f278:	4b3f      	ldr	r3, [pc, #252]	; (1000f378 <main+0x2e4>)
1000f27a:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000f27c:	787b      	ldrb	r3, [r7, #1]
1000f27e:	2b00      	cmp	r3, #0
1000f280:	d103      	bne.n	1000f28a <main+0x1f6>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000f282:	2001      	movs	r0, #1
1000f284:	4b47      	ldr	r3, [pc, #284]	; (1000f3a4 <main+0x310>)
1000f286:	4798      	blx	r3
1000f288:	e002      	b.n	1000f290 <main+0x1fc>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000f28a:	4847      	ldr	r0, [pc, #284]	; (1000f3a8 <main+0x314>)
1000f28c:	4b35      	ldr	r3, [pc, #212]	; (1000f364 <main+0x2d0>)
1000f28e:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000f290:	2100      	movs	r1, #0
1000f292:	232a      	movs	r3, #42	; 0x2a
1000f294:	4a3a      	ldr	r2, [pc, #232]	; (1000f380 <main+0x2ec>)
1000f296:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000f298:	200f      	movs	r0, #15
1000f29a:	4b37      	ldr	r3, [pc, #220]	; (1000f378 <main+0x2e4>)
1000f29c:	4798      	blx	r3
1000f29e:	e740      	b.n	1000f122 <main+0x8e>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000f2a0:	2845      	cmp	r0, #69	; 0x45
1000f2a2:	d106      	bne.n	1000f2b2 <main+0x21e>
			DBG_LOG("GAP timeout");
1000f2a4:	482b      	ldr	r0, [pc, #172]	; (1000f354 <main+0x2c0>)
1000f2a6:	4b2d      	ldr	r3, [pc, #180]	; (1000f35c <main+0x2c8>)
1000f2a8:	4798      	blx	r3
1000f2aa:	4841      	ldr	r0, [pc, #260]	; (1000f3b0 <main+0x31c>)
1000f2ac:	4b2d      	ldr	r3, [pc, #180]	; (1000f364 <main+0x2d0>)
1000f2ae:	4798      	blx	r3
1000f2b0:	e737      	b.n	1000f122 <main+0x8e>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000f2b2:	28d0      	cmp	r0, #208	; 0xd0
1000f2b4:	d106      	bne.n	1000f2c4 <main+0x230>
			DBG_LOG("Event get timeout");
1000f2b6:	4827      	ldr	r0, [pc, #156]	; (1000f354 <main+0x2c0>)
1000f2b8:	4b28      	ldr	r3, [pc, #160]	; (1000f35c <main+0x2c8>)
1000f2ba:	4798      	blx	r3
1000f2bc:	483d      	ldr	r0, [pc, #244]	; (1000f3b4 <main+0x320>)
1000f2be:	4b29      	ldr	r3, [pc, #164]	; (1000f364 <main+0x2d0>)
1000f2c0:	4798      	blx	r3
1000f2c2:	e72e      	b.n	1000f122 <main+0x8e>
		}
		else {
			DBG_LOG("BLE error occurred");
1000f2c4:	0028      	movs	r0, r5
1000f2c6:	4b25      	ldr	r3, [pc, #148]	; (1000f35c <main+0x2c8>)
1000f2c8:	4798      	blx	r3
1000f2ca:	483b      	ldr	r0, [pc, #236]	; (1000f3b8 <main+0x324>)
1000f2cc:	4b25      	ldr	r3, [pc, #148]	; (1000f364 <main+0x2d0>)
1000f2ce:	4798      	blx	r3
1000f2d0:	e727      	b.n	1000f122 <main+0x8e>
1000f2d2:	46c0      	nop			; (mov r8, r8)
1000f2d4:	10018c78 	.word	0x10018c78
1000f2d8:	1000e8bd 	.word	0x1000e8bd
1000f2dc:	1000c1e9 	.word	0x1000c1e9
1000f2e0:	1000e5b1 	.word	0x1000e5b1
1000f2e4:	1000ee11 	.word	0x1000ee11
1000f2e8:	1000f049 	.word	0x1000f049
1000f2ec:	1000b1a9 	.word	0x1000b1a9
1000f2f0:	100080e9 	.word	0x100080e9
1000f2f4:	1000a551 	.word	0x1000a551
1000f2f8:	1000ac8d 	.word	0x1000ac8d
1000f2fc:	1000a8dd 	.word	0x1000a8dd
1000f300:	1000b059 	.word	0x1000b059
1000f304:	1000aa71 	.word	0x1000aa71
1000f308:	1000a83d 	.word	0x1000a83d
1000f30c:	1000dd39 	.word	0x1000dd39
1000f310:	1000a7ed 	.word	0x1000a7ed
1000f314:	1000af15 	.word	0x1000af15
1000f318:	1000ac1d 	.word	0x1000ac1d
1000f31c:	1000effd 	.word	0x1000effd
1000f320:	1000ee55 	.word	0x1000ee55
1000f324:	1000b269 	.word	0x1000b269
1000f328:	1000b1e5 	.word	0x1000b1e5
1000f32c:	1000b289 	.word	0x1000b289
1000f330:	1000a5f9 	.word	0x1000a5f9
1000f334:	1000aabd 	.word	0x1000aabd
1000f338:	10016094 	.word	0x10016094
1000f33c:	1000dc69 	.word	0x1000dc69
1000f340:	100160e0 	.word	0x100160e0
1000f344:	1000a7a5 	.word	0x1000a7a5
1000f348:	10009f99 	.word	0x10009f99
1000f34c:	10018c70 	.word	0x10018c70
1000f350:	1000e445 	.word	0x1000e445
1000f354:	10015d04 	.word	0x10015d04
1000f358:	10018c7c 	.word	0x10018c7c
1000f35c:	10014b59 	.word	0x10014b59
1000f360:	10016db0 	.word	0x10016db0
1000f364:	10014a39 	.word	0x10014a39
1000f368:	1000a64d 	.word	0x1000a64d
1000f36c:	10016dc0 	.word	0x10016dc0
1000f370:	10018be4 	.word	0x10018be4
1000f374:	10016dd0 	.word	0x10016dd0
1000f378:	1000bea9 	.word	0x1000bea9
1000f37c:	1000ab8d 	.word	0x1000ab8d
1000f380:	10018d00 	.word	0x10018d00
1000f384:	10018cec 	.word	0x10018cec
1000f388:	10016de4 	.word	0x10016de4
1000f38c:	1000b25d 	.word	0x1000b25d
1000f390:	1000b2a9 	.word	0x1000b2a9
1000f394:	10018d98 	.word	0x10018d98
1000f398:	10016df4 	.word	0x10016df4
1000f39c:	1000b4cd 	.word	0x1000b4cd
1000f3a0:	10016e04 	.word	0x10016e04
1000f3a4:	1000a205 	.word	0x1000a205
1000f3a8:	10016e1c 	.word	0x10016e1c
1000f3ac:	10016e28 	.word	0x10016e28
1000f3b0:	10016e44 	.word	0x10016e44
1000f3b4:	10016e50 	.word	0x10016e50
1000f3b8:	10016e64 	.word	0x10016e64

1000f3bc <internal_event_post>:
1000f3bc:	b570      	push	{r4, r5, r6, lr}
1000f3be:	4d12      	ldr	r5, [pc, #72]	; (1000f408 <internal_event_post+0x4c>)
1000f3c0:	682c      	ldr	r4, [r5, #0]
1000f3c2:	2c00      	cmp	r4, #0
1000f3c4:	d014      	beq.n	1000f3f0 <internal_event_post+0x34>
1000f3c6:	6826      	ldr	r6, [r4, #0]
1000f3c8:	60e2      	str	r2, [r4, #12]
1000f3ca:	602e      	str	r6, [r5, #0]
1000f3cc:	2500      	movs	r5, #0
1000f3ce:	4a0f      	ldr	r2, [pc, #60]	; (1000f40c <internal_event_post+0x50>)
1000f3d0:	8123      	strh	r3, [r4, #8]
1000f3d2:	6813      	ldr	r3, [r2, #0]
1000f3d4:	6025      	str	r5, [r4, #0]
1000f3d6:	80a0      	strh	r0, [r4, #4]
1000f3d8:	80e1      	strh	r1, [r4, #6]
1000f3da:	42ab      	cmp	r3, r5
1000f3dc:	d101      	bne.n	1000f3e2 <internal_event_post+0x26>
1000f3de:	6014      	str	r4, [r2, #0]
1000f3e0:	e011      	b.n	1000f406 <internal_event_post+0x4a>
1000f3e2:	681a      	ldr	r2, [r3, #0]
1000f3e4:	2a00      	cmp	r2, #0
1000f3e6:	d001      	beq.n	1000f3ec <internal_event_post+0x30>
1000f3e8:	1c13      	adds	r3, r2, #0
1000f3ea:	e7fa      	b.n	1000f3e2 <internal_event_post+0x26>
1000f3ec:	601c      	str	r4, [r3, #0]
1000f3ee:	e00a      	b.n	1000f406 <internal_event_post+0x4a>
1000f3f0:	b2c4      	uxtb	r4, r0
1000f3f2:	2c00      	cmp	r4, #0
1000f3f4:	d107      	bne.n	1000f406 <internal_event_post+0x4a>
1000f3f6:	4c06      	ldr	r4, [pc, #24]	; (1000f410 <internal_event_post+0x54>)
1000f3f8:	60e2      	str	r2, [r4, #12]
1000f3fa:	2201      	movs	r2, #1
1000f3fc:	8123      	strh	r3, [r4, #8]
1000f3fe:	4b05      	ldr	r3, [pc, #20]	; (1000f414 <internal_event_post+0x58>)
1000f400:	80a0      	strh	r0, [r4, #4]
1000f402:	80e1      	strh	r1, [r4, #6]
1000f404:	701a      	strb	r2, [r3, #0]
1000f406:	bd70      	pop	{r4, r5, r6, pc}
1000f408:	10018b28 	.word	0x10018b28
1000f40c:	10018b24 	.word	0x10018b24
1000f410:	10018b10 	.word	0x10018b10
1000f414:	10018b20 	.word	0x10018b20

1000f418 <internal_event_init>:
1000f418:	b510      	push	{r4, lr}
1000f41a:	4b08      	ldr	r3, [pc, #32]	; (1000f43c <internal_event_init+0x24>)
1000f41c:	0900      	lsrs	r0, r0, #4
1000f41e:	0100      	lsls	r0, r0, #4
1000f420:	681a      	ldr	r2, [r3, #0]
1000f422:	1808      	adds	r0, r1, r0
1000f424:	4281      	cmp	r1, r0
1000f426:	d003      	beq.n	1000f430 <internal_event_init+0x18>
1000f428:	600a      	str	r2, [r1, #0]
1000f42a:	1c0a      	adds	r2, r1, #0
1000f42c:	3110      	adds	r1, #16
1000f42e:	e7f9      	b.n	1000f424 <internal_event_init+0xc>
1000f430:	601a      	str	r2, [r3, #0]
1000f432:	2200      	movs	r2, #0
1000f434:	4b02      	ldr	r3, [pc, #8]	; (1000f440 <internal_event_init+0x28>)
1000f436:	601a      	str	r2, [r3, #0]
1000f438:	bd10      	pop	{r4, pc}
1000f43a:	46c0      	nop			; (mov r8, r8)
1000f43c:	10018b28 	.word	0x10018b28
1000f440:	10018b24 	.word	0x10018b24

1000f444 <special_events_handler>:
1000f444:	b538      	push	{r3, r4, r5, lr}
1000f446:	4c1b      	ldr	r4, [pc, #108]	; (1000f4b4 <special_events_handler+0x70>)
1000f448:	1c03      	adds	r3, r0, #0
1000f44a:	8825      	ldrh	r5, [r4, #0]
1000f44c:	1c08      	adds	r0, r1, #0
1000f44e:	1c21      	adds	r1, r4, #0
1000f450:	429d      	cmp	r5, r3
1000f452:	d107      	bne.n	1000f464 <special_events_handler+0x20>
1000f454:	88a5      	ldrh	r5, [r4, #4]
1000f456:	4285      	cmp	r5, r0
1000f458:	d104      	bne.n	1000f464 <special_events_handler+0x20>
1000f45a:	2301      	movs	r3, #1
1000f45c:	425b      	negs	r3, r3
1000f45e:	8023      	strh	r3, [r4, #0]
1000f460:	60a2      	str	r2, [r4, #8]
1000f462:	e009      	b.n	1000f478 <special_events_handler+0x34>
1000f464:	884c      	ldrh	r4, [r1, #2]
1000f466:	429c      	cmp	r4, r3
1000f468:	d10a      	bne.n	1000f480 <special_events_handler+0x3c>
1000f46a:	888c      	ldrh	r4, [r1, #4]
1000f46c:	4284      	cmp	r4, r0
1000f46e:	d107      	bne.n	1000f480 <special_events_handler+0x3c>
1000f470:	2301      	movs	r3, #1
1000f472:	425b      	negs	r3, r3
1000f474:	804b      	strh	r3, [r1, #2]
1000f476:	608a      	str	r2, [r1, #8]
1000f478:	4b0f      	ldr	r3, [pc, #60]	; (1000f4b8 <special_events_handler+0x74>)
1000f47a:	4798      	blx	r3
1000f47c:	2001      	movs	r0, #1
1000f47e:	e017      	b.n	1000f4b0 <special_events_handler+0x6c>
1000f480:	490e      	ldr	r1, [pc, #56]	; (1000f4bc <special_events_handler+0x78>)
1000f482:	428b      	cmp	r3, r1
1000f484:	d00e      	beq.n	1000f4a4 <special_events_handler+0x60>
1000f486:	490e      	ldr	r1, [pc, #56]	; (1000f4c0 <special_events_handler+0x7c>)
1000f488:	428b      	cmp	r3, r1
1000f48a:	d007      	beq.n	1000f49c <special_events_handler+0x58>
1000f48c:	490d      	ldr	r1, [pc, #52]	; (1000f4c4 <special_events_handler+0x80>)
1000f48e:	2000      	movs	r0, #0
1000f490:	428b      	cmp	r3, r1
1000f492:	d10d      	bne.n	1000f4b0 <special_events_handler+0x6c>
1000f494:	1c10      	adds	r0, r2, #0
1000f496:	4b0c      	ldr	r3, [pc, #48]	; (1000f4c8 <special_events_handler+0x84>)
1000f498:	4798      	blx	r3
1000f49a:	e7ef      	b.n	1000f47c <special_events_handler+0x38>
1000f49c:	1c11      	adds	r1, r2, #0
1000f49e:	4b0b      	ldr	r3, [pc, #44]	; (1000f4cc <special_events_handler+0x88>)
1000f4a0:	2200      	movs	r2, #0
1000f4a2:	e002      	b.n	1000f4aa <special_events_handler+0x66>
1000f4a4:	1c11      	adds	r1, r2, #0
1000f4a6:	2200      	movs	r2, #0
1000f4a8:	4b09      	ldr	r3, [pc, #36]	; (1000f4d0 <special_events_handler+0x8c>)
1000f4aa:	4798      	blx	r3
1000f4ac:	4243      	negs	r3, r0
1000f4ae:	4158      	adcs	r0, r3
1000f4b0:	bd38      	pop	{r3, r4, r5, pc}
1000f4b2:	46c0      	nop			; (mov r8, r8)
1000f4b4:	10019a34 	.word	0x10019a34
1000f4b8:	10010ea1 	.word	0x10010ea1
1000f4bc:	00000e13 	.word	0x00000e13
1000f4c0:	00000e15 	.word	0x00000e15
1000f4c4:	00000e01 	.word	0x00000e01
1000f4c8:	10011211 	.word	0x10011211
1000f4cc:	100113d1 	.word	0x100113d1
1000f4d0:	100114a9 	.word	0x100114a9

1000f4d4 <at_ble_event_get>:
1000f4d4:	2300      	movs	r3, #0
1000f4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4d8:	b087      	sub	sp, #28
1000f4da:	9204      	str	r2, [sp, #16]
1000f4dc:	7003      	strb	r3, [r0, #0]
1000f4de:	9b04      	ldr	r3, [sp, #16]
1000f4e0:	9003      	str	r0, [sp, #12]
1000f4e2:	3b01      	subs	r3, #1
1000f4e4:	1c0d      	adds	r5, r1, #0
1000f4e6:	9305      	str	r3, [sp, #20]
1000f4e8:	3303      	adds	r3, #3
1000f4ea:	d802      	bhi.n	1000f4f2 <at_ble_event_get+0x1e>
1000f4ec:	9804      	ldr	r0, [sp, #16]
1000f4ee:	4bae      	ldr	r3, [pc, #696]	; (1000f7a8 <at_ble_event_get+0x2d4>)
1000f4f0:	4798      	blx	r3
1000f4f2:	9b05      	ldr	r3, [sp, #20]
1000f4f4:	4cad      	ldr	r4, [pc, #692]	; (1000f7ac <at_ble_event_get+0x2d8>)
1000f4f6:	3303      	adds	r3, #3
1000f4f8:	d902      	bls.n	1000f500 <at_ble_event_get+0x2c>
1000f4fa:	2300      	movs	r3, #0
1000f4fc:	9302      	str	r3, [sp, #8]
1000f4fe:	e015      	b.n	1000f52c <at_ble_event_get+0x58>
1000f500:	2300      	movs	r3, #0
1000f502:	9302      	str	r3, [sp, #8]
1000f504:	6823      	ldr	r3, [r4, #0]
1000f506:	2b00      	cmp	r3, #0
1000f508:	d113      	bne.n	1000f532 <at_ble_event_get+0x5e>
1000f50a:	9b02      	ldr	r3, [sp, #8]
1000f50c:	2bd0      	cmp	r3, #208	; 0xd0
1000f50e:	d100      	bne.n	1000f512 <at_ble_event_get+0x3e>
1000f510:	e2da      	b.n	1000fac8 <at_ble_event_get+0x5f4>
1000f512:	9804      	ldr	r0, [sp, #16]
1000f514:	4ba6      	ldr	r3, [pc, #664]	; (1000f7b0 <at_ble_event_get+0x2dc>)
1000f516:	4798      	blx	r3
1000f518:	9002      	str	r0, [sp, #8]
1000f51a:	2802      	cmp	r0, #2
1000f51c:	d1f2      	bne.n	1000f504 <at_ble_event_get+0x30>
1000f51e:	e03f      	b.n	1000f5a0 <at_ble_event_get+0xcc>
1000f520:	9804      	ldr	r0, [sp, #16]
1000f522:	4ba3      	ldr	r3, [pc, #652]	; (1000f7b0 <at_ble_event_get+0x2dc>)
1000f524:	4798      	blx	r3
1000f526:	9002      	str	r0, [sp, #8]
1000f528:	2802      	cmp	r0, #2
1000f52a:	d039      	beq.n	1000f5a0 <at_ble_event_get+0xcc>
1000f52c:	6823      	ldr	r3, [r4, #0]
1000f52e:	2b00      	cmp	r3, #0
1000f530:	d0f6      	beq.n	1000f520 <at_ble_event_get+0x4c>
1000f532:	9b02      	ldr	r3, [sp, #8]
1000f534:	2bd0      	cmp	r3, #208	; 0xd0
1000f536:	d100      	bne.n	1000f53a <at_ble_event_get+0x66>
1000f538:	e2c6      	b.n	1000fac8 <at_ble_event_get+0x5f4>
1000f53a:	9b02      	ldr	r3, [sp, #8]
1000f53c:	3b03      	subs	r3, #3
1000f53e:	1e5a      	subs	r2, r3, #1
1000f540:	4193      	sbcs	r3, r2
1000f542:	9a02      	ldr	r2, [sp, #8]
1000f544:	425b      	negs	r3, r3
1000f546:	401a      	ands	r2, r3
1000f548:	6823      	ldr	r3, [r4, #0]
1000f54a:	9202      	str	r2, [sp, #8]
1000f54c:	2b00      	cmp	r3, #0
1000f54e:	d100      	bne.n	1000f552 <at_ble_event_get+0x7e>
1000f550:	e2c2      	b.n	1000fad8 <at_ble_event_get+0x604>
1000f552:	681a      	ldr	r2, [r3, #0]
1000f554:	68de      	ldr	r6, [r3, #12]
1000f556:	6022      	str	r2, [r4, #0]
1000f558:	88da      	ldrh	r2, [r3, #6]
1000f55a:	9201      	str	r2, [sp, #4]
1000f55c:	4a95      	ldr	r2, [pc, #596]	; (1000f7b4 <at_ble_event_get+0x2e0>)
1000f55e:	889c      	ldrh	r4, [r3, #4]
1000f560:	6811      	ldr	r1, [r2, #0]
1000f562:	6013      	str	r3, [r2, #0]
1000f564:	6019      	str	r1, [r3, #0]
1000f566:	4b94      	ldr	r3, [pc, #592]	; (1000f7b8 <at_ble_event_get+0x2e4>)
1000f568:	781b      	ldrb	r3, [r3, #0]
1000f56a:	2b01      	cmp	r3, #1
1000f56c:	d10f      	bne.n	1000f58e <at_ble_event_get+0xba>
1000f56e:	4b93      	ldr	r3, [pc, #588]	; (1000f7bc <at_ble_event_get+0x2e8>)
1000f570:	4a92      	ldr	r2, [pc, #584]	; (1000f7bc <at_ble_event_get+0x2e8>)
1000f572:	8898      	ldrh	r0, [r3, #4]
1000f574:	88d9      	ldrh	r1, [r3, #6]
1000f576:	68d2      	ldr	r2, [r2, #12]
1000f578:	891b      	ldrh	r3, [r3, #8]
1000f57a:	4f91      	ldr	r7, [pc, #580]	; (1000f7c0 <at_ble_event_get+0x2ec>)
1000f57c:	47b8      	blx	r7
1000f57e:	2210      	movs	r2, #16
1000f580:	4b90      	ldr	r3, [pc, #576]	; (1000f7c4 <at_ble_event_get+0x2f0>)
1000f582:	488e      	ldr	r0, [pc, #568]	; (1000f7bc <at_ble_event_get+0x2e8>)
1000f584:	2100      	movs	r1, #0
1000f586:	4798      	blx	r3
1000f588:	2300      	movs	r3, #0
1000f58a:	4a8b      	ldr	r2, [pc, #556]	; (1000f7b8 <at_ble_event_get+0x2e4>)
1000f58c:	7013      	strb	r3, [r2, #0]
1000f58e:	9b02      	ldr	r3, [sp, #8]
1000f590:	2b00      	cmp	r3, #0
1000f592:	d114      	bne.n	1000f5be <at_ble_event_get+0xea>
1000f594:	4b8c      	ldr	r3, [pc, #560]	; (1000f7c8 <at_ble_event_get+0x2f4>)
1000f596:	429c      	cmp	r4, r3
1000f598:	d009      	beq.n	1000f5ae <at_ble_event_get+0xda>
1000f59a:	4b8c      	ldr	r3, [pc, #560]	; (1000f7cc <at_ble_event_get+0x2f8>)
1000f59c:	429c      	cmp	r4, r3
1000f59e:	d127      	bne.n	1000f5f0 <at_ble_event_get+0x11c>
1000f5a0:	233a      	movs	r3, #58	; 0x3a
1000f5a2:	9a03      	ldr	r2, [sp, #12]
1000f5a4:	7013      	strb	r3, [r2, #0]
1000f5a6:	2300      	movs	r3, #0
1000f5a8:	9302      	str	r3, [sp, #8]
1000f5aa:	1c1d      	adds	r5, r3, #0
1000f5ac:	e007      	b.n	1000f5be <at_ble_event_get+0xea>
1000f5ae:	9b01      	ldr	r3, [sp, #4]
1000f5b0:	42a3      	cmp	r3, r4
1000f5b2:	d000      	beq.n	1000f5b6 <at_ble_event_get+0xe2>
1000f5b4:	e28a      	b.n	1000facc <at_ble_event_get+0x5f8>
1000f5b6:	2338      	movs	r3, #56	; 0x38
1000f5b8:	9a03      	ldr	r2, [sp, #12]
1000f5ba:	7013      	strb	r3, [r2, #0]
1000f5bc:	602e      	str	r6, [r5, #0]
1000f5be:	9b03      	ldr	r3, [sp, #12]
1000f5c0:	781b      	ldrb	r3, [r3, #0]
1000f5c2:	2b3b      	cmp	r3, #59	; 0x3b
1000f5c4:	d101      	bne.n	1000f5ca <at_ble_event_get+0xf6>
1000f5c6:	4b82      	ldr	r3, [pc, #520]	; (1000f7d0 <at_ble_event_get+0x2fc>)
1000f5c8:	4798      	blx	r3
1000f5ca:	9b03      	ldr	r3, [sp, #12]
1000f5cc:	781b      	ldrb	r3, [r3, #0]
1000f5ce:	2b3b      	cmp	r3, #59	; 0x3b
1000f5d0:	d003      	beq.n	1000f5da <at_ble_event_get+0x106>
1000f5d2:	9b05      	ldr	r3, [sp, #20]
1000f5d4:	3303      	adds	r3, #3
1000f5d6:	d904      	bls.n	1000f5e2 <at_ble_event_get+0x10e>
1000f5d8:	e283      	b.n	1000fae2 <at_ble_event_get+0x60e>
1000f5da:	9b02      	ldr	r3, [sp, #8]
1000f5dc:	2b00      	cmp	r3, #0
1000f5de:	d088      	beq.n	1000f4f2 <at_ble_event_get+0x1e>
1000f5e0:	e7f7      	b.n	1000f5d2 <at_ble_event_get+0xfe>
1000f5e2:	9b02      	ldr	r3, [sp, #8]
1000f5e4:	2bd0      	cmp	r3, #208	; 0xd0
1000f5e6:	d100      	bne.n	1000f5ea <at_ble_event_get+0x116>
1000f5e8:	e27b      	b.n	1000fae2 <at_ble_event_get+0x60e>
1000f5ea:	4b7a      	ldr	r3, [pc, #488]	; (1000f7d4 <at_ble_event_get+0x300>)
1000f5ec:	4798      	blx	r3
1000f5ee:	e278      	b.n	1000fae2 <at_ble_event_get+0x60e>
1000f5f0:	9b01      	ldr	r3, [sp, #4]
1000f5f2:	2bbb      	cmp	r3, #187	; 0xbb
1000f5f4:	d125      	bne.n	1000f642 <at_ble_event_get+0x16e>
1000f5f6:	2cbb      	cmp	r4, #187	; 0xbb
1000f5f8:	d123      	bne.n	1000f642 <at_ble_event_get+0x16e>
1000f5fa:	466b      	mov	r3, sp
1000f5fc:	891b      	ldrh	r3, [r3, #8]
1000f5fe:	80ab      	strh	r3, [r5, #4]
1000f600:	78b3      	ldrb	r3, [r6, #2]
1000f602:	7872      	ldrb	r2, [r6, #1]
1000f604:	78f0      	ldrb	r0, [r6, #3]
1000f606:	021b      	lsls	r3, r3, #8
1000f608:	4313      	orrs	r3, r2
1000f60a:	7971      	ldrb	r1, [r6, #5]
1000f60c:	7932      	ldrb	r2, [r6, #4]
1000f60e:	70a8      	strb	r0, [r5, #2]
1000f610:	4871      	ldr	r0, [pc, #452]	; (1000f7d8 <at_ble_event_get+0x304>)
1000f612:	802b      	strh	r3, [r5, #0]
1000f614:	4283      	cmp	r3, r0
1000f616:	d806      	bhi.n	1000f626 <at_ble_event_get+0x152>
1000f618:	4a70      	ldr	r2, [pc, #448]	; (1000f7dc <at_ble_event_get+0x308>)
1000f61a:	4293      	cmp	r3, r2
1000f61c:	d20b      	bcs.n	1000f636 <at_ble_event_get+0x162>
1000f61e:	4a70      	ldr	r2, [pc, #448]	; (1000f7e0 <at_ble_event_get+0x30c>)
1000f620:	4293      	cmp	r3, r2
1000f622:	d008      	beq.n	1000f636 <at_ble_event_get+0x162>
1000f624:	e009      	b.n	1000f63a <at_ble_event_get+0x166>
1000f626:	486f      	ldr	r0, [pc, #444]	; (1000f7e4 <at_ble_event_get+0x310>)
1000f628:	4283      	cmp	r3, r0
1000f62a:	d106      	bne.n	1000f63a <at_ble_event_get+0x166>
1000f62c:	020b      	lsls	r3, r1, #8
1000f62e:	4313      	orrs	r3, r2
1000f630:	80ab      	strh	r3, [r5, #4]
1000f632:	2337      	movs	r3, #55	; 0x37
1000f634:	e002      	b.n	1000f63c <at_ble_event_get+0x168>
1000f636:	2336      	movs	r3, #54	; 0x36
1000f638:	e000      	b.n	1000f63c <at_ble_event_get+0x168>
1000f63a:	2300      	movs	r3, #0
1000f63c:	9a03      	ldr	r2, [sp, #12]
1000f63e:	7013      	strb	r3, [r2, #0]
1000f640:	e7bd      	b.n	1000f5be <at_ble_event_get+0xea>
1000f642:	4b69      	ldr	r3, [pc, #420]	; (1000f7e8 <at_ble_event_get+0x314>)
1000f644:	429c      	cmp	r4, r3
1000f646:	d100      	bne.n	1000f64a <at_ble_event_get+0x176>
1000f648:	e144      	b.n	1000f8d4 <at_ble_event_get+0x400>
1000f64a:	d865      	bhi.n	1000f718 <at_ble_event_get+0x244>
1000f64c:	4b67      	ldr	r3, [pc, #412]	; (1000f7ec <at_ble_event_get+0x318>)
1000f64e:	429c      	cmp	r4, r3
1000f650:	d100      	bne.n	1000f654 <at_ble_event_get+0x180>
1000f652:	e1d5      	b.n	1000fa00 <at_ble_event_get+0x52c>
1000f654:	d82f      	bhi.n	1000f6b6 <at_ble_event_get+0x1e2>
1000f656:	4b66      	ldr	r3, [pc, #408]	; (1000f7f0 <at_ble_event_get+0x31c>)
1000f658:	429c      	cmp	r4, r3
1000f65a:	d100      	bne.n	1000f65e <at_ble_event_get+0x18a>
1000f65c:	e1e0      	b.n	1000fa20 <at_ble_event_get+0x54c>
1000f65e:	d813      	bhi.n	1000f688 <at_ble_event_get+0x1b4>
1000f660:	4b64      	ldr	r3, [pc, #400]	; (1000f7f4 <at_ble_event_get+0x320>)
1000f662:	429c      	cmp	r4, r3
1000f664:	d100      	bne.n	1000f668 <at_ble_event_get+0x194>
1000f666:	e1a3      	b.n	1000f9b0 <at_ble_event_get+0x4dc>
1000f668:	d804      	bhi.n	1000f674 <at_ble_event_get+0x1a0>
1000f66a:	2638      	movs	r6, #56	; 0x38
1000f66c:	42b4      	cmp	r4, r6
1000f66e:	d100      	bne.n	1000f672 <at_ble_event_get+0x19e>
1000f670:	e225      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f672:	e117      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f674:	4b60      	ldr	r3, [pc, #384]	; (1000f7f8 <at_ble_event_get+0x324>)
1000f676:	429c      	cmp	r4, r3
1000f678:	d100      	bne.n	1000f67c <at_ble_event_get+0x1a8>
1000f67a:	e19f      	b.n	1000f9bc <at_ble_event_get+0x4e8>
1000f67c:	33fe      	adds	r3, #254	; 0xfe
1000f67e:	33ff      	adds	r3, #255	; 0xff
1000f680:	429c      	cmp	r4, r3
1000f682:	d100      	bne.n	1000f686 <at_ble_event_get+0x1b2>
1000f684:	e1d3      	b.n	1000fa2e <at_ble_event_get+0x55a>
1000f686:	e10d      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f688:	4b5c      	ldr	r3, [pc, #368]	; (1000f7fc <at_ble_event_get+0x328>)
1000f68a:	429c      	cmp	r4, r3
1000f68c:	d100      	bne.n	1000f690 <at_ble_event_get+0x1bc>
1000f68e:	e1a9      	b.n	1000f9e4 <at_ble_event_get+0x510>
1000f690:	d808      	bhi.n	1000f6a4 <at_ble_event_get+0x1d0>
1000f692:	4b5b      	ldr	r3, [pc, #364]	; (1000f800 <at_ble_event_get+0x32c>)
1000f694:	429c      	cmp	r4, r3
1000f696:	d100      	bne.n	1000f69a <at_ble_event_get+0x1c6>
1000f698:	e196      	b.n	1000f9c8 <at_ble_event_get+0x4f4>
1000f69a:	4b5a      	ldr	r3, [pc, #360]	; (1000f804 <at_ble_event_get+0x330>)
1000f69c:	429c      	cmp	r4, r3
1000f69e:	d100      	bne.n	1000f6a2 <at_ble_event_get+0x1ce>
1000f6a0:	e199      	b.n	1000f9d6 <at_ble_event_get+0x502>
1000f6a2:	e0ff      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f6a4:	4b58      	ldr	r3, [pc, #352]	; (1000f808 <at_ble_event_get+0x334>)
1000f6a6:	429c      	cmp	r4, r3
1000f6a8:	d100      	bne.n	1000f6ac <at_ble_event_get+0x1d8>
1000f6aa:	e1a2      	b.n	1000f9f2 <at_ble_event_get+0x51e>
1000f6ac:	4b57      	ldr	r3, [pc, #348]	; (1000f80c <at_ble_event_get+0x338>)
1000f6ae:	429c      	cmp	r4, r3
1000f6b0:	d100      	bne.n	1000f6b4 <at_ble_event_get+0x1e0>
1000f6b2:	e1d4      	b.n	1000fa5e <at_ble_event_get+0x58a>
1000f6b4:	e0f6      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f6b6:	4b56      	ldr	r3, [pc, #344]	; (1000f810 <at_ble_event_get+0x33c>)
1000f6b8:	429c      	cmp	r4, r3
1000f6ba:	d100      	bne.n	1000f6be <at_ble_event_get+0x1ea>
1000f6bc:	e1c8      	b.n	1000fa50 <at_ble_event_get+0x57c>
1000f6be:	d812      	bhi.n	1000f6e6 <at_ble_event_get+0x212>
1000f6c0:	4b54      	ldr	r3, [pc, #336]	; (1000f814 <at_ble_event_get+0x340>)
1000f6c2:	429c      	cmp	r4, r3
1000f6c4:	d100      	bne.n	1000f6c8 <at_ble_event_get+0x1f4>
1000f6c6:	e1d1      	b.n	1000fa6c <at_ble_event_get+0x598>
1000f6c8:	d804      	bhi.n	1000f6d4 <at_ble_event_get+0x200>
1000f6ca:	4b53      	ldr	r3, [pc, #332]	; (1000f818 <at_ble_event_get+0x344>)
1000f6cc:	429c      	cmp	r4, r3
1000f6ce:	d100      	bne.n	1000f6d2 <at_ble_event_get+0x1fe>
1000f6d0:	e19b      	b.n	1000fa0a <at_ble_event_get+0x536>
1000f6d2:	e0e7      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f6d4:	4b51      	ldr	r3, [pc, #324]	; (1000f81c <at_ble_event_get+0x348>)
1000f6d6:	429c      	cmp	r4, r3
1000f6d8:	d100      	bne.n	1000f6dc <at_ble_event_get+0x208>
1000f6da:	e1ad      	b.n	1000fa38 <at_ble_event_get+0x564>
1000f6dc:	4b50      	ldr	r3, [pc, #320]	; (1000f820 <at_ble_event_get+0x34c>)
1000f6de:	429c      	cmp	r4, r3
1000f6e0:	d100      	bne.n	1000f6e4 <at_ble_event_get+0x210>
1000f6e2:	e1b0      	b.n	1000fa46 <at_ble_event_get+0x572>
1000f6e4:	e0de      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f6e6:	4b4f      	ldr	r3, [pc, #316]	; (1000f824 <at_ble_event_get+0x350>)
1000f6e8:	429c      	cmp	r4, r3
1000f6ea:	d100      	bne.n	1000f6ee <at_ble_event_get+0x21a>
1000f6ec:	e0e0      	b.n	1000f8b0 <at_ble_event_get+0x3dc>
1000f6ee:	d809      	bhi.n	1000f704 <at_ble_event_get+0x230>
1000f6f0:	3b08      	subs	r3, #8
1000f6f2:	429c      	cmp	r4, r3
1000f6f4:	d100      	bne.n	1000f6f8 <at_ble_event_get+0x224>
1000f6f6:	e0d7      	b.n	1000f8a8 <at_ble_event_get+0x3d4>
1000f6f8:	4b4b      	ldr	r3, [pc, #300]	; (1000f828 <at_ble_event_get+0x354>)
1000f6fa:	2639      	movs	r6, #57	; 0x39
1000f6fc:	429c      	cmp	r4, r3
1000f6fe:	d100      	bne.n	1000f702 <at_ble_event_get+0x22e>
1000f700:	e1dd      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f702:	e0cf      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f704:	23d1      	movs	r3, #209	; 0xd1
1000f706:	011b      	lsls	r3, r3, #4
1000f708:	429c      	cmp	r4, r3
1000f70a:	d100      	bne.n	1000f70e <at_ble_event_get+0x23a>
1000f70c:	e0d6      	b.n	1000f8bc <at_ble_event_get+0x3e8>
1000f70e:	4b47      	ldr	r3, [pc, #284]	; (1000f82c <at_ble_event_get+0x358>)
1000f710:	429c      	cmp	r4, r3
1000f712:	d100      	bne.n	1000f716 <at_ble_event_get+0x242>
1000f714:	e0d8      	b.n	1000f8c8 <at_ble_event_get+0x3f4>
1000f716:	e0c5      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f718:	4b45      	ldr	r3, [pc, #276]	; (1000f830 <at_ble_event_get+0x35c>)
1000f71a:	429c      	cmp	r4, r3
1000f71c:	d100      	bne.n	1000f720 <at_ble_event_get+0x24c>
1000f71e:	e117      	b.n	1000f950 <at_ble_event_get+0x47c>
1000f720:	d82e      	bhi.n	1000f780 <at_ble_event_get+0x2ac>
1000f722:	4b44      	ldr	r3, [pc, #272]	; (1000f834 <at_ble_event_get+0x360>)
1000f724:	429c      	cmp	r4, r3
1000f726:	d100      	bne.n	1000f72a <at_ble_event_get+0x256>
1000f728:	e13d      	b.n	1000f9a6 <at_ble_event_get+0x4d2>
1000f72a:	d812      	bhi.n	1000f752 <at_ble_event_get+0x27e>
1000f72c:	4b42      	ldr	r3, [pc, #264]	; (1000f838 <at_ble_event_get+0x364>)
1000f72e:	429c      	cmp	r4, r3
1000f730:	d100      	bne.n	1000f734 <at_ble_event_get+0x260>
1000f732:	e0e8      	b.n	1000f906 <at_ble_event_get+0x432>
1000f734:	d804      	bhi.n	1000f740 <at_ble_event_get+0x26c>
1000f736:	3b03      	subs	r3, #3
1000f738:	429c      	cmp	r4, r3
1000f73a:	d100      	bne.n	1000f73e <at_ble_event_get+0x26a>
1000f73c:	e0d0      	b.n	1000f8e0 <at_ble_event_get+0x40c>
1000f73e:	e0b1      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f740:	4b3e      	ldr	r3, [pc, #248]	; (1000f83c <at_ble_event_get+0x368>)
1000f742:	429c      	cmp	r4, r3
1000f744:	d100      	bne.n	1000f748 <at_ble_event_get+0x274>
1000f746:	e0d0      	b.n	1000f8ea <at_ble_event_get+0x416>
1000f748:	4b3d      	ldr	r3, [pc, #244]	; (1000f840 <at_ble_event_get+0x36c>)
1000f74a:	429c      	cmp	r4, r3
1000f74c:	d100      	bne.n	1000f750 <at_ble_event_get+0x27c>
1000f74e:	e0f9      	b.n	1000f944 <at_ble_event_get+0x470>
1000f750:	e0a8      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f752:	4b3c      	ldr	r3, [pc, #240]	; (1000f844 <at_ble_event_get+0x370>)
1000f754:	429c      	cmp	r4, r3
1000f756:	d100      	bne.n	1000f75a <at_ble_event_get+0x286>
1000f758:	e0db      	b.n	1000f912 <at_ble_event_get+0x43e>
1000f75a:	d808      	bhi.n	1000f76e <at_ble_event_get+0x29a>
1000f75c:	4b3a      	ldr	r3, [pc, #232]	; (1000f848 <at_ble_event_get+0x374>)
1000f75e:	429c      	cmp	r4, r3
1000f760:	d100      	bne.n	1000f764 <at_ble_event_get+0x290>
1000f762:	e11b      	b.n	1000f99c <at_ble_event_get+0x4c8>
1000f764:	4b39      	ldr	r3, [pc, #228]	; (1000f84c <at_ble_event_get+0x378>)
1000f766:	429c      	cmp	r4, r3
1000f768:	d100      	bne.n	1000f76c <at_ble_event_get+0x298>
1000f76a:	e0d8      	b.n	1000f91e <at_ble_event_get+0x44a>
1000f76c:	e09a      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f76e:	4b38      	ldr	r3, [pc, #224]	; (1000f850 <at_ble_event_get+0x37c>)
1000f770:	429c      	cmp	r4, r3
1000f772:	d100      	bne.n	1000f776 <at_ble_event_get+0x2a2>
1000f774:	e0d8      	b.n	1000f928 <at_ble_event_get+0x454>
1000f776:	4b37      	ldr	r3, [pc, #220]	; (1000f854 <at_ble_event_get+0x380>)
1000f778:	429c      	cmp	r4, r3
1000f77a:	d100      	bne.n	1000f77e <at_ble_event_get+0x2aa>
1000f77c:	e0db      	b.n	1000f936 <at_ble_event_get+0x462>
1000f77e:	e091      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f780:	4b35      	ldr	r3, [pc, #212]	; (1000f858 <at_ble_event_get+0x384>)
1000f782:	429c      	cmp	r4, r3
1000f784:	d100      	bne.n	1000f788 <at_ble_event_get+0x2b4>
1000f786:	e0f7      	b.n	1000f978 <at_ble_event_get+0x4a4>
1000f788:	d876      	bhi.n	1000f878 <at_ble_event_get+0x3a4>
1000f78a:	4b34      	ldr	r3, [pc, #208]	; (1000f85c <at_ble_event_get+0x388>)
1000f78c:	429c      	cmp	r4, r3
1000f78e:	d100      	bne.n	1000f792 <at_ble_event_get+0x2be>
1000f790:	e0f8      	b.n	1000f984 <at_ble_event_get+0x4b0>
1000f792:	d869      	bhi.n	1000f868 <at_ble_event_get+0x394>
1000f794:	4b32      	ldr	r3, [pc, #200]	; (1000f860 <at_ble_event_get+0x38c>)
1000f796:	429c      	cmp	r4, r3
1000f798:	d100      	bne.n	1000f79c <at_ble_event_get+0x2c8>
1000f79a:	e0e0      	b.n	1000f95e <at_ble_event_get+0x48a>
1000f79c:	4b31      	ldr	r3, [pc, #196]	; (1000f864 <at_ble_event_get+0x390>)
1000f79e:	429c      	cmp	r4, r3
1000f7a0:	d100      	bne.n	1000f7a4 <at_ble_event_get+0x2d0>
1000f7a2:	e0a9      	b.n	1000f8f8 <at_ble_event_get+0x424>
1000f7a4:	e07e      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f7a6:	46c0      	nop			; (mov r8, r8)
1000f7a8:	10010ed9 	.word	0x10010ed9
1000f7ac:	10018b24 	.word	0x10018b24
1000f7b0:	1000ebad 	.word	0x1000ebad
1000f7b4:	10018b28 	.word	0x10018b28
1000f7b8:	10018b20 	.word	0x10018b20
1000f7bc:	10018b10 	.word	0x10018b10
1000f7c0:	1000f3bd 	.word	0x1000f3bd
1000f7c4:	100148f1 	.word	0x100148f1
1000f7c8:	0000ffff 	.word	0x0000ffff
1000f7cc:	0000fffe 	.word	0x0000fffe
1000f7d0:	1000ee25 	.word	0x1000ee25
1000f7d4:	10010edb 	.word	0x10010edb
1000f7d8:	0000201e 	.word	0x0000201e
1000f7dc:	0000201d 	.word	0x0000201d
1000f7e0:	00000c03 	.word	0x00000c03
1000f7e4:	0000201f 	.word	0x0000201f
1000f7e8:	00000d1c 	.word	0x00000d1c
1000f7ec:	00000c0c 	.word	0x00000c0c
1000f7f0:	00000c02 	.word	0x00000c02
1000f7f4:	00000a02 	.word	0x00000a02
1000f7f8:	00000a03 	.word	0x00000a03
1000f7fc:	00000c06 	.word	0x00000c06
1000f800:	00000c04 	.word	0x00000c04
1000f804:	00000c05 	.word	0x00000c05
1000f808:	00000c07 	.word	0x00000c07
1000f80c:	00000c09 	.word	0x00000c09
1000f810:	00000c17 	.word	0x00000c17
1000f814:	00000c12 	.word	0x00000c12
1000f818:	00000c0d 	.word	0x00000c0d
1000f81c:	00000c13 	.word	0x00000c13
1000f820:	00000c15 	.word	0x00000c15
1000f824:	00000d08 	.word	0x00000d08
1000f828:	00000d01 	.word	0x00000d01
1000f82c:	00000d15 	.word	0x00000d15
1000f830:	00000e1b 	.word	0x00000e1b
1000f834:	00000e0f 	.word	0x00000e0f
1000f838:	00000e03 	.word	0x00000e03
1000f83c:	00000e06 	.word	0x00000e06
1000f840:	00000e0a 	.word	0x00000e0a
1000f844:	00000e15 	.word	0x00000e15
1000f848:	00000e11 	.word	0x00000e11
1000f84c:	00000e13 	.word	0x00000e13
1000f850:	00000e17 	.word	0x00000e17
1000f854:	00000e19 	.word	0x00000e19
1000f858:	00000e27 	.word	0x00000e27
1000f85c:	00000e21 	.word	0x00000e21
1000f860:	00000e1c 	.word	0x00000e1c
1000f864:	00000e1d 	.word	0x00000e1d
1000f868:	4b9f      	ldr	r3, [pc, #636]	; (1000fae8 <at_ble_event_get+0x614>)
1000f86a:	429c      	cmp	r4, r3
1000f86c:	d07e      	beq.n	1000f96c <at_ble_event_get+0x498>
1000f86e:	4b9f      	ldr	r3, [pc, #636]	; (1000faec <at_ble_event_get+0x618>)
1000f870:	429c      	cmp	r4, r3
1000f872:	d100      	bne.n	1000f876 <at_ble_event_get+0x3a2>
1000f874:	e08c      	b.n	1000f990 <at_ble_event_get+0x4bc>
1000f876:	e015      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f878:	4b9d      	ldr	r3, [pc, #628]	; (1000faf0 <at_ble_event_get+0x61c>)
1000f87a:	429c      	cmp	r4, r3
1000f87c:	d100      	bne.n	1000f880 <at_ble_event_get+0x3ac>
1000f87e:	e10a      	b.n	1000fa96 <at_ble_event_get+0x5c2>
1000f880:	d808      	bhi.n	1000f894 <at_ble_event_get+0x3c0>
1000f882:	4b9c      	ldr	r3, [pc, #624]	; (1000faf4 <at_ble_event_get+0x620>)
1000f884:	429c      	cmp	r4, r3
1000f886:	d100      	bne.n	1000f88a <at_ble_event_get+0x3b6>
1000f888:	e0f7      	b.n	1000fa7a <at_ble_event_get+0x5a6>
1000f88a:	4b9b      	ldr	r3, [pc, #620]	; (1000faf8 <at_ble_event_get+0x624>)
1000f88c:	429c      	cmp	r4, r3
1000f88e:	d100      	bne.n	1000f892 <at_ble_event_get+0x3be>
1000f890:	e0fa      	b.n	1000fa88 <at_ble_event_get+0x5b4>
1000f892:	e007      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f894:	4b99      	ldr	r3, [pc, #612]	; (1000fafc <at_ble_event_get+0x628>)
1000f896:	429c      	cmp	r4, r3
1000f898:	d100      	bne.n	1000f89c <at_ble_event_get+0x3c8>
1000f89a:	e103      	b.n	1000faa4 <at_ble_event_get+0x5d0>
1000f89c:	4b98      	ldr	r3, [pc, #608]	; (1000fb00 <at_ble_event_get+0x62c>)
1000f89e:	429c      	cmp	r4, r3
1000f8a0:	d100      	bne.n	1000f8a4 <at_ble_event_get+0x3d0>
1000f8a2:	e106      	b.n	1000fab2 <at_ble_event_get+0x5de>
1000f8a4:	2600      	movs	r6, #0
1000f8a6:	e10a      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8a8:	1c30      	adds	r0, r6, #0
1000f8aa:	1c29      	adds	r1, r5, #0
1000f8ac:	4b95      	ldr	r3, [pc, #596]	; (1000fb04 <at_ble_event_get+0x630>)
1000f8ae:	e014      	b.n	1000f8da <at_ble_event_get+0x406>
1000f8b0:	1c30      	adds	r0, r6, #0
1000f8b2:	1c29      	adds	r1, r5, #0
1000f8b4:	4b94      	ldr	r3, [pc, #592]	; (1000fb08 <at_ble_event_get+0x634>)
1000f8b6:	4798      	blx	r3
1000f8b8:	2604      	movs	r6, #4
1000f8ba:	e100      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8bc:	1c30      	adds	r0, r6, #0
1000f8be:	1c29      	adds	r1, r5, #0
1000f8c0:	4b92      	ldr	r3, [pc, #584]	; (1000fb0c <at_ble_event_get+0x638>)
1000f8c2:	4798      	blx	r3
1000f8c4:	2601      	movs	r6, #1
1000f8c6:	e0fa      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8c8:	1c30      	adds	r0, r6, #0
1000f8ca:	1c29      	adds	r1, r5, #0
1000f8cc:	4b90      	ldr	r3, [pc, #576]	; (1000fb10 <at_ble_event_get+0x63c>)
1000f8ce:	4798      	blx	r3
1000f8d0:	260f      	movs	r6, #15
1000f8d2:	e0f4      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8d4:	1c30      	adds	r0, r6, #0
1000f8d6:	1c29      	adds	r1, r5, #0
1000f8d8:	4b8e      	ldr	r3, [pc, #568]	; (1000fb14 <at_ble_event_get+0x640>)
1000f8da:	4798      	blx	r3
1000f8dc:	1c06      	adds	r6, r0, #0
1000f8de:	e0ee      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8e0:	9801      	ldr	r0, [sp, #4]
1000f8e2:	1c31      	adds	r1, r6, #0
1000f8e4:	1c2a      	adds	r2, r5, #0
1000f8e6:	4b8c      	ldr	r3, [pc, #560]	; (1000fb18 <at_ble_event_get+0x644>)
1000f8e8:	e017      	b.n	1000f91a <at_ble_event_get+0x446>
1000f8ea:	1c31      	adds	r1, r6, #0
1000f8ec:	9801      	ldr	r0, [sp, #4]
1000f8ee:	1c2a      	adds	r2, r5, #0
1000f8f0:	4b8a      	ldr	r3, [pc, #552]	; (1000fb1c <at_ble_event_get+0x648>)
1000f8f2:	4798      	blx	r3
1000f8f4:	2611      	movs	r6, #17
1000f8f6:	e0e2      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f8f8:	1c31      	adds	r1, r6, #0
1000f8fa:	9801      	ldr	r0, [sp, #4]
1000f8fc:	1c2a      	adds	r2, r5, #0
1000f8fe:	4b88      	ldr	r3, [pc, #544]	; (1000fb20 <at_ble_event_get+0x64c>)
1000f900:	4798      	blx	r3
1000f902:	2612      	movs	r6, #18
1000f904:	e0db      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f906:	1c30      	adds	r0, r6, #0
1000f908:	1c29      	adds	r1, r5, #0
1000f90a:	4b86      	ldr	r3, [pc, #536]	; (1000fb24 <at_ble_event_get+0x650>)
1000f90c:	4798      	blx	r3
1000f90e:	2606      	movs	r6, #6
1000f910:	e0d5      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f912:	1c31      	adds	r1, r6, #0
1000f914:	1c2a      	adds	r2, r5, #0
1000f916:	9801      	ldr	r0, [sp, #4]
1000f918:	4b83      	ldr	r3, [pc, #524]	; (1000fb28 <at_ble_event_get+0x654>)
1000f91a:	4798      	blx	r3
1000f91c:	e7de      	b.n	1000f8dc <at_ble_event_get+0x408>
1000f91e:	9801      	ldr	r0, [sp, #4]
1000f920:	1c31      	adds	r1, r6, #0
1000f922:	1c2a      	adds	r2, r5, #0
1000f924:	4b81      	ldr	r3, [pc, #516]	; (1000fb2c <at_ble_event_get+0x658>)
1000f926:	e7f8      	b.n	1000f91a <at_ble_event_get+0x446>
1000f928:	1c31      	adds	r1, r6, #0
1000f92a:	9801      	ldr	r0, [sp, #4]
1000f92c:	1c2a      	adds	r2, r5, #0
1000f92e:	4b80      	ldr	r3, [pc, #512]	; (1000fb30 <at_ble_event_get+0x65c>)
1000f930:	4798      	blx	r3
1000f932:	260d      	movs	r6, #13
1000f934:	e0c3      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f936:	1c31      	adds	r1, r6, #0
1000f938:	9801      	ldr	r0, [sp, #4]
1000f93a:	1c2a      	adds	r2, r5, #0
1000f93c:	4b7d      	ldr	r3, [pc, #500]	; (1000fb34 <at_ble_event_get+0x660>)
1000f93e:	4798      	blx	r3
1000f940:	260e      	movs	r6, #14
1000f942:	e0bc      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f944:	9801      	ldr	r0, [sp, #4]
1000f946:	1c31      	adds	r1, r6, #0
1000f948:	1c2a      	adds	r2, r5, #0
1000f94a:	4b7b      	ldr	r3, [pc, #492]	; (1000fb38 <at_ble_event_get+0x664>)
1000f94c:	4798      	blx	r3
1000f94e:	e084      	b.n	1000fa5a <at_ble_event_get+0x586>
1000f950:	1c31      	adds	r1, r6, #0
1000f952:	9801      	ldr	r0, [sp, #4]
1000f954:	1c2a      	adds	r2, r5, #0
1000f956:	4b79      	ldr	r3, [pc, #484]	; (1000fb3c <at_ble_event_get+0x668>)
1000f958:	4798      	blx	r3
1000f95a:	260b      	movs	r6, #11
1000f95c:	e0af      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f95e:	1c31      	adds	r1, r6, #0
1000f960:	9801      	ldr	r0, [sp, #4]
1000f962:	1c2a      	adds	r2, r5, #0
1000f964:	4b76      	ldr	r3, [pc, #472]	; (1000fb40 <at_ble_event_get+0x66c>)
1000f966:	4798      	blx	r3
1000f968:	2610      	movs	r6, #16
1000f96a:	e0a8      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f96c:	1c30      	adds	r0, r6, #0
1000f96e:	1c29      	adds	r1, r5, #0
1000f970:	4b74      	ldr	r3, [pc, #464]	; (1000fb44 <at_ble_event_get+0x670>)
1000f972:	4798      	blx	r3
1000f974:	2628      	movs	r6, #40	; 0x28
1000f976:	e0a2      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f978:	1c30      	adds	r0, r6, #0
1000f97a:	1c29      	adds	r1, r5, #0
1000f97c:	4b72      	ldr	r3, [pc, #456]	; (1000fb48 <at_ble_event_get+0x674>)
1000f97e:	4798      	blx	r3
1000f980:	2629      	movs	r6, #41	; 0x29
1000f982:	e09c      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f984:	1c30      	adds	r0, r6, #0
1000f986:	1c29      	adds	r1, r5, #0
1000f988:	4b70      	ldr	r3, [pc, #448]	; (1000fb4c <at_ble_event_get+0x678>)
1000f98a:	4798      	blx	r3
1000f98c:	2627      	movs	r6, #39	; 0x27
1000f98e:	e096      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f990:	1c30      	adds	r0, r6, #0
1000f992:	1c29      	adds	r1, r5, #0
1000f994:	4b6e      	ldr	r3, [pc, #440]	; (1000fb50 <at_ble_event_get+0x67c>)
1000f996:	4798      	blx	r3
1000f998:	262a      	movs	r6, #42	; 0x2a
1000f99a:	e090      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f99c:	9801      	ldr	r0, [sp, #4]
1000f99e:	1c31      	adds	r1, r6, #0
1000f9a0:	1c2a      	adds	r2, r5, #0
1000f9a2:	4b6c      	ldr	r3, [pc, #432]	; (1000fb54 <at_ble_event_get+0x680>)
1000f9a4:	e7b9      	b.n	1000f91a <at_ble_event_get+0x446>
1000f9a6:	9801      	ldr	r0, [sp, #4]
1000f9a8:	1c31      	adds	r1, r6, #0
1000f9aa:	1c2a      	adds	r2, r5, #0
1000f9ac:	4b6a      	ldr	r3, [pc, #424]	; (1000fb58 <at_ble_event_get+0x684>)
1000f9ae:	e7b4      	b.n	1000f91a <at_ble_event_get+0x446>
1000f9b0:	1c30      	adds	r0, r6, #0
1000f9b2:	1c29      	adds	r1, r5, #0
1000f9b4:	4b69      	ldr	r3, [pc, #420]	; (1000fb5c <at_ble_event_get+0x688>)
1000f9b6:	4798      	blx	r3
1000f9b8:	262b      	movs	r6, #43	; 0x2b
1000f9ba:	e080      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f9bc:	1c30      	adds	r0, r6, #0
1000f9be:	1c29      	adds	r1, r5, #0
1000f9c0:	4b67      	ldr	r3, [pc, #412]	; (1000fb60 <at_ble_event_get+0x68c>)
1000f9c2:	4798      	blx	r3
1000f9c4:	262c      	movs	r6, #44	; 0x2c
1000f9c6:	e07a      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f9c8:	1c31      	adds	r1, r6, #0
1000f9ca:	9801      	ldr	r0, [sp, #4]
1000f9cc:	1c2a      	adds	r2, r5, #0
1000f9ce:	4b65      	ldr	r3, [pc, #404]	; (1000fb64 <at_ble_event_get+0x690>)
1000f9d0:	4798      	blx	r3
1000f9d2:	2613      	movs	r6, #19
1000f9d4:	e073      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f9d6:	1c31      	adds	r1, r6, #0
1000f9d8:	9801      	ldr	r0, [sp, #4]
1000f9da:	1c2a      	adds	r2, r5, #0
1000f9dc:	4b62      	ldr	r3, [pc, #392]	; (1000fb68 <at_ble_event_get+0x694>)
1000f9de:	4798      	blx	r3
1000f9e0:	2614      	movs	r6, #20
1000f9e2:	e06c      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f9e4:	1c31      	adds	r1, r6, #0
1000f9e6:	9801      	ldr	r0, [sp, #4]
1000f9e8:	1c2a      	adds	r2, r5, #0
1000f9ea:	4b60      	ldr	r3, [pc, #384]	; (1000fb6c <at_ble_event_get+0x698>)
1000f9ec:	4798      	blx	r3
1000f9ee:	2615      	movs	r6, #21
1000f9f0:	e065      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000f9f2:	1c31      	adds	r1, r6, #0
1000f9f4:	9801      	ldr	r0, [sp, #4]
1000f9f6:	1c2a      	adds	r2, r5, #0
1000f9f8:	4b5d      	ldr	r3, [pc, #372]	; (1000fb70 <at_ble_event_get+0x69c>)
1000f9fa:	4798      	blx	r3
1000f9fc:	2616      	movs	r6, #22
1000f9fe:	e05e      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa00:	9801      	ldr	r0, [sp, #4]
1000fa02:	1c31      	adds	r1, r6, #0
1000fa04:	1c2a      	adds	r2, r5, #0
1000fa06:	4b5b      	ldr	r3, [pc, #364]	; (1000fb74 <at_ble_event_get+0x6a0>)
1000fa08:	e787      	b.n	1000f91a <at_ble_event_get+0x446>
1000fa0a:	1c31      	adds	r1, r6, #0
1000fa0c:	9801      	ldr	r0, [sp, #4]
1000fa0e:	1c2a      	adds	r2, r5, #0
1000fa10:	4b58      	ldr	r3, [pc, #352]	; (1000fb74 <at_ble_event_get+0x6a0>)
1000fa12:	4798      	blx	r3
1000fa14:	88a9      	ldrh	r1, [r5, #4]
1000fa16:	1c06      	adds	r6, r0, #0
1000fa18:	4b57      	ldr	r3, [pc, #348]	; (1000fb78 <at_ble_event_get+0x6a4>)
1000fa1a:	8828      	ldrh	r0, [r5, #0]
1000fa1c:	4798      	blx	r3
1000fa1e:	e04e      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa20:	1c31      	adds	r1, r6, #0
1000fa22:	9801      	ldr	r0, [sp, #4]
1000fa24:	1c2a      	adds	r2, r5, #0
1000fa26:	4b55      	ldr	r3, [pc, #340]	; (1000fb7c <at_ble_event_get+0x6a8>)
1000fa28:	4798      	blx	r3
1000fa2a:	2623      	movs	r6, #35	; 0x23
1000fa2c:	e047      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa2e:	9801      	ldr	r0, [sp, #4]
1000fa30:	1c31      	adds	r1, r6, #0
1000fa32:	1c2a      	adds	r2, r5, #0
1000fa34:	4b52      	ldr	r3, [pc, #328]	; (1000fb80 <at_ble_event_get+0x6ac>)
1000fa36:	e770      	b.n	1000f91a <at_ble_event_get+0x446>
1000fa38:	9b01      	ldr	r3, [sp, #4]
1000fa3a:	1c30      	adds	r0, r6, #0
1000fa3c:	0a1f      	lsrs	r7, r3, #8
1000fa3e:	802f      	strh	r7, [r5, #0]
1000fa40:	1c29      	adds	r1, r5, #0
1000fa42:	4b50      	ldr	r3, [pc, #320]	; (1000fb84 <at_ble_event_get+0x6b0>)
1000fa44:	e749      	b.n	1000f8da <at_ble_event_get+0x406>
1000fa46:	9801      	ldr	r0, [sp, #4]
1000fa48:	1c31      	adds	r1, r6, #0
1000fa4a:	1c2a      	adds	r2, r5, #0
1000fa4c:	4b4e      	ldr	r3, [pc, #312]	; (1000fb88 <at_ble_event_get+0x6b4>)
1000fa4e:	e764      	b.n	1000f91a <at_ble_event_get+0x446>
1000fa50:	1c30      	adds	r0, r6, #0
1000fa52:	1c29      	adds	r1, r5, #0
1000fa54:	9a01      	ldr	r2, [sp, #4]
1000fa56:	4b4d      	ldr	r3, [pc, #308]	; (1000fb8c <at_ble_event_get+0x6b8>)
1000fa58:	4798      	blx	r3
1000fa5a:	263b      	movs	r6, #59	; 0x3b
1000fa5c:	e02f      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa5e:	1c31      	adds	r1, r6, #0
1000fa60:	9801      	ldr	r0, [sp, #4]
1000fa62:	1c2a      	adds	r2, r5, #0
1000fa64:	4b4a      	ldr	r3, [pc, #296]	; (1000fb90 <at_ble_event_get+0x6bc>)
1000fa66:	4798      	blx	r3
1000fa68:	2618      	movs	r6, #24
1000fa6a:	e028      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa6c:	1c31      	adds	r1, r6, #0
1000fa6e:	9801      	ldr	r0, [sp, #4]
1000fa70:	1c2a      	adds	r2, r5, #0
1000fa72:	4b48      	ldr	r3, [pc, #288]	; (1000fb94 <at_ble_event_get+0x6c0>)
1000fa74:	4798      	blx	r3
1000fa76:	2620      	movs	r6, #32
1000fa78:	e021      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa7a:	1c31      	adds	r1, r6, #0
1000fa7c:	9801      	ldr	r0, [sp, #4]
1000fa7e:	1c2a      	adds	r2, r5, #0
1000fa80:	4b45      	ldr	r3, [pc, #276]	; (1000fb98 <at_ble_event_get+0x6c4>)
1000fa82:	4798      	blx	r3
1000fa84:	2633      	movs	r6, #51	; 0x33
1000fa86:	e01a      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa88:	1c31      	adds	r1, r6, #0
1000fa8a:	9801      	ldr	r0, [sp, #4]
1000fa8c:	1c2a      	adds	r2, r5, #0
1000fa8e:	4b43      	ldr	r3, [pc, #268]	; (1000fb9c <at_ble_event_get+0x6c8>)
1000fa90:	4798      	blx	r3
1000fa92:	2630      	movs	r6, #48	; 0x30
1000fa94:	e013      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fa96:	1c31      	adds	r1, r6, #0
1000fa98:	9801      	ldr	r0, [sp, #4]
1000fa9a:	1c2a      	adds	r2, r5, #0
1000fa9c:	4b40      	ldr	r3, [pc, #256]	; (1000fba0 <at_ble_event_get+0x6cc>)
1000fa9e:	4798      	blx	r3
1000faa0:	2634      	movs	r6, #52	; 0x34
1000faa2:	e00c      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000faa4:	1c31      	adds	r1, r6, #0
1000faa6:	9801      	ldr	r0, [sp, #4]
1000faa8:	1c2a      	adds	r2, r5, #0
1000faaa:	4b3e      	ldr	r3, [pc, #248]	; (1000fba4 <at_ble_event_get+0x6d0>)
1000faac:	4798      	blx	r3
1000faae:	2635      	movs	r6, #53	; 0x35
1000fab0:	e005      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fab2:	1c31      	adds	r1, r6, #0
1000fab4:	9801      	ldr	r0, [sp, #4]
1000fab6:	1c2a      	adds	r2, r5, #0
1000fab8:	4b3b      	ldr	r3, [pc, #236]	; (1000fba8 <at_ble_event_get+0x6d4>)
1000faba:	4798      	blx	r3
1000fabc:	2632      	movs	r6, #50	; 0x32
1000fabe:	9b03      	ldr	r3, [sp, #12]
1000fac0:	701e      	strb	r6, [r3, #0]
1000fac2:	2300      	movs	r3, #0
1000fac4:	9302      	str	r3, [sp, #8]
1000fac6:	e57a      	b.n	1000f5be <at_ble_event_get+0xea>
1000fac8:	23d0      	movs	r3, #208	; 0xd0
1000faca:	e7fb      	b.n	1000fac4 <at_ble_event_get+0x5f0>
1000facc:	9b01      	ldr	r3, [sp, #4]
1000face:	9e02      	ldr	r6, [sp, #8]
1000fad0:	2bbb      	cmp	r3, #187	; 0xbb
1000fad2:	d000      	beq.n	1000fad6 <at_ble_event_get+0x602>
1000fad4:	e6e6      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000fad6:	e7f2      	b.n	1000fabe <at_ble_event_get+0x5ea>
1000fad8:	9b02      	ldr	r3, [sp, #8]
1000fada:	2b00      	cmp	r3, #0
1000fadc:	d000      	beq.n	1000fae0 <at_ble_event_get+0x60c>
1000fade:	e56e      	b.n	1000f5be <at_ble_event_get+0xea>
1000fae0:	e6e0      	b.n	1000f8a4 <at_ble_event_get+0x3d0>
1000fae2:	9802      	ldr	r0, [sp, #8]
1000fae4:	b007      	add	sp, #28
1000fae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fae8:	00000e22 	.word	0x00000e22
1000faec:	00000e25 	.word	0x00000e25
1000faf0:	00001b05 	.word	0x00001b05
1000faf4:	00001b01 	.word	0x00001b01
1000faf8:	00001b03 	.word	0x00001b03
1000fafc:	00001b06 	.word	0x00001b06
1000fb00:	00001b08 	.word	0x00001b08
1000fb04:	10011d05 	.word	0x10011d05
1000fb08:	10011ce9 	.word	0x10011ce9
1000fb0c:	10011f85 	.word	0x10011f85
1000fb10:	10012075 	.word	0x10012075
1000fb14:	10012099 	.word	0x10012099
1000fb18:	1001107d 	.word	0x1001107d
1000fb1c:	100118fd 	.word	0x100118fd
1000fb20:	10011979 	.word	0x10011979
1000fb24:	10011335 	.word	0x10011335
1000fb28:	100113d1 	.word	0x100113d1
1000fb2c:	100114a9 	.word	0x100114a9
1000fb30:	10011731 	.word	0x10011731
1000fb34:	100117d1 	.word	0x100117d1
1000fb38:	10011889 	.word	0x10011889
1000fb3c:	100118b1 	.word	0x100118b1
1000fb40:	100118c7 	.word	0x100118c7
1000fb44:	10011991 	.word	0x10011991
1000fb48:	100119bf 	.word	0x100119bf
1000fb4c:	100119d5 	.word	0x100119d5
1000fb50:	100119ff 	.word	0x100119ff
1000fb54:	1001182d 	.word	0x1001182d
1000fb58:	10011857 	.word	0x10011857
1000fb5c:	10010abd 	.word	0x10010abd
1000fb60:	10010ae9 	.word	0x10010ae9
1000fb64:	100122b9 	.word	0x100122b9
1000fb68:	100122f5 	.word	0x100122f5
1000fb6c:	1001233d 	.word	0x1001233d
1000fb70:	10012381 	.word	0x10012381
1000fb74:	100123b5 	.word	0x100123b5
1000fb78:	10012279 	.word	0x10012279
1000fb7c:	10012481 	.word	0x10012481
1000fb80:	10012409 	.word	0x10012409
1000fb84:	100109a1 	.word	0x100109a1
1000fb88:	10010a0d 	.word	0x10010a0d
1000fb8c:	100109d1 	.word	0x100109d1
1000fb90:	10012491 	.word	0x10012491
1000fb94:	100124d1 	.word	0x100124d1
1000fb98:	10012799 	.word	0x10012799
1000fb9c:	100127a3 	.word	0x100127a3
1000fba0:	100127a9 	.word	0x100127a9
1000fba4:	100127af 	.word	0x100127af
1000fba8:	100127bb 	.word	0x100127bb

1000fbac <internal_event_flush>:
1000fbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fbae:	490e      	ldr	r1, [pc, #56]	; (1000fbe8 <internal_event_flush+0x3c>)
1000fbb0:	2400      	movs	r4, #0
1000fbb2:	680b      	ldr	r3, [r1, #0]
1000fbb4:	1c0f      	adds	r7, r1, #0
1000fbb6:	1c1e      	adds	r6, r3, #0
1000fbb8:	4a0c      	ldr	r2, [pc, #48]	; (1000fbec <internal_event_flush+0x40>)
1000fbba:	6815      	ldr	r5, [r2, #0]
1000fbbc:	9201      	str	r2, [sp, #4]
1000fbbe:	2b00      	cmp	r3, #0
1000fbc0:	d00e      	beq.n	1000fbe0 <internal_event_flush+0x34>
1000fbc2:	889a      	ldrh	r2, [r3, #4]
1000fbc4:	6819      	ldr	r1, [r3, #0]
1000fbc6:	4282      	cmp	r2, r0
1000fbc8:	d107      	bne.n	1000fbda <internal_event_flush+0x2e>
1000fbca:	2c00      	cmp	r4, #0
1000fbcc:	d001      	beq.n	1000fbd2 <internal_event_flush+0x26>
1000fbce:	6021      	str	r1, [r4, #0]
1000fbd0:	e000      	b.n	1000fbd4 <internal_event_flush+0x28>
1000fbd2:	1c0e      	adds	r6, r1, #0
1000fbd4:	601d      	str	r5, [r3, #0]
1000fbd6:	1c1d      	adds	r5, r3, #0
1000fbd8:	1c23      	adds	r3, r4, #0
1000fbda:	1c1c      	adds	r4, r3, #0
1000fbdc:	1c0b      	adds	r3, r1, #0
1000fbde:	e7ee      	b.n	1000fbbe <internal_event_flush+0x12>
1000fbe0:	9b01      	ldr	r3, [sp, #4]
1000fbe2:	603e      	str	r6, [r7, #0]
1000fbe4:	601d      	str	r5, [r3, #0]
1000fbe6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fbe8:	10018b24 	.word	0x10018b24
1000fbec:	10018b28 	.word	0x10018b28

1000fbf0 <internal_conn_flush>:
1000fbf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fbf2:	4a12      	ldr	r2, [pc, #72]	; (1000fc3c <internal_conn_flush+0x4c>)
1000fbf4:	9000      	str	r0, [sp, #0]
1000fbf6:	6813      	ldr	r3, [r2, #0]
1000fbf8:	4811      	ldr	r0, [pc, #68]	; (1000fc40 <internal_conn_flush+0x50>)
1000fbfa:	1c1f      	adds	r7, r3, #0
1000fbfc:	2100      	movs	r1, #0
1000fbfe:	4684      	mov	ip, r0
1000fc00:	6804      	ldr	r4, [r0, #0]
1000fc02:	9201      	str	r2, [sp, #4]
1000fc04:	2b00      	cmp	r3, #0
1000fc06:	d014      	beq.n	1000fc32 <internal_conn_flush+0x42>
1000fc08:	88d8      	ldrh	r0, [r3, #6]
1000fc0a:	9a00      	ldr	r2, [sp, #0]
1000fc0c:	681d      	ldr	r5, [r3, #0]
1000fc0e:	0a06      	lsrs	r6, r0, #8
1000fc10:	4296      	cmp	r6, r2
1000fc12:	d10b      	bne.n	1000fc2c <internal_conn_flush+0x3c>
1000fc14:	26fd      	movs	r6, #253	; 0xfd
1000fc16:	4006      	ands	r6, r0
1000fc18:	2e0c      	cmp	r6, #12
1000fc1a:	d107      	bne.n	1000fc2c <internal_conn_flush+0x3c>
1000fc1c:	2900      	cmp	r1, #0
1000fc1e:	d001      	beq.n	1000fc24 <internal_conn_flush+0x34>
1000fc20:	600d      	str	r5, [r1, #0]
1000fc22:	e000      	b.n	1000fc26 <internal_conn_flush+0x36>
1000fc24:	1c2f      	adds	r7, r5, #0
1000fc26:	601c      	str	r4, [r3, #0]
1000fc28:	1c1c      	adds	r4, r3, #0
1000fc2a:	1c0b      	adds	r3, r1, #0
1000fc2c:	1c19      	adds	r1, r3, #0
1000fc2e:	1c2b      	adds	r3, r5, #0
1000fc30:	e7e8      	b.n	1000fc04 <internal_conn_flush+0x14>
1000fc32:	9b01      	ldr	r3, [sp, #4]
1000fc34:	601f      	str	r7, [r3, #0]
1000fc36:	4663      	mov	r3, ip
1000fc38:	601c      	str	r4, [r3, #0]
1000fc3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fc3c:	10018b24 	.word	0x10018b24
1000fc40:	10018b28 	.word	0x10018b28

1000fc44 <at_ble_device_name_set>:
1000fc44:	b530      	push	{r4, r5, lr}
1000fc46:	23cf      	movs	r3, #207	; 0xcf
1000fc48:	2800      	cmp	r0, #0
1000fc4a:	d010      	beq.n	1000fc6e <at_ble_device_name_set+0x2a>
1000fc4c:	1e4a      	subs	r2, r1, #1
1000fc4e:	2a1f      	cmp	r2, #31
1000fc50:	d80d      	bhi.n	1000fc6e <at_ble_device_name_set+0x2a>
1000fc52:	4a08      	ldr	r2, [pc, #32]	; (1000fc74 <at_ble_device_name_set+0x30>)
1000fc54:	1c13      	adds	r3, r2, #0
1000fc56:	33aa      	adds	r3, #170	; 0xaa
1000fc58:	8019      	strh	r1, [r3, #0]
1000fc5a:	2300      	movs	r3, #0
1000fc5c:	1c1c      	adds	r4, r3, #0
1000fc5e:	5cc5      	ldrb	r5, [r0, r3]
1000fc60:	34ac      	adds	r4, #172	; 0xac
1000fc62:	3301      	adds	r3, #1
1000fc64:	5515      	strb	r5, [r2, r4]
1000fc66:	b2dc      	uxtb	r4, r3
1000fc68:	428c      	cmp	r4, r1
1000fc6a:	d3f7      	bcc.n	1000fc5c <at_ble_device_name_set+0x18>
1000fc6c:	2300      	movs	r3, #0
1000fc6e:	1c18      	adds	r0, r3, #0
1000fc70:	bd30      	pop	{r4, r5, pc}
1000fc72:	46c0      	nop			; (mov r8, r8)
1000fc74:	10019ad2 	.word	0x10019ad2

1000fc78 <at_ble_addr_get>:
1000fc78:	b510      	push	{r4, lr}
1000fc7a:	1c04      	adds	r4, r0, #0
1000fc7c:	20cf      	movs	r0, #207	; 0xcf
1000fc7e:	2c00      	cmp	r4, #0
1000fc80:	d006      	beq.n	1000fc90 <at_ble_addr_get+0x18>
1000fc82:	4b04      	ldr	r3, [pc, #16]	; (1000fc94 <at_ble_addr_get+0x1c>)
1000fc84:	38ce      	subs	r0, #206	; 0xce
1000fc86:	1c21      	adds	r1, r4, #0
1000fc88:	4798      	blx	r3
1000fc8a:	4b03      	ldr	r3, [pc, #12]	; (1000fc98 <at_ble_addr_get+0x20>)
1000fc8c:	791b      	ldrb	r3, [r3, #4]
1000fc8e:	7023      	strb	r3, [r4, #0]
1000fc90:	bd10      	pop	{r4, pc}
1000fc92:	46c0      	nop			; (mov r8, r8)
1000fc94:	10011b99 	.word	0x10011b99
1000fc98:	10019ad2 	.word	0x10019ad2

1000fc9c <at_ble_set_dev_config>:
1000fc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc9e:	7906      	ldrb	r6, [r0, #4]
1000fca0:	b089      	sub	sp, #36	; 0x24
1000fca2:	25cf      	movs	r5, #207	; 0xcf
1000fca4:	2e03      	cmp	r6, #3
1000fca6:	d838      	bhi.n	1000fd1a <at_ble_set_dev_config+0x7e>
1000fca8:	7803      	ldrb	r3, [r0, #0]
1000fcaa:	3511      	adds	r5, #17
1000fcac:	2b0f      	cmp	r3, #15
1000fcae:	d834      	bhi.n	1000fd1a <at_ble_set_dev_config+0x7e>
1000fcb0:	2380      	movs	r3, #128	; 0x80
1000fcb2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000fcb4:	3d11      	subs	r5, #17
1000fcb6:	009b      	lsls	r3, r3, #2
1000fcb8:	429f      	cmp	r7, r3
1000fcba:	d82e      	bhi.n	1000fd1a <at_ble_set_dev_config+0x7e>
1000fcbc:	7fc5      	ldrb	r5, [r0, #31]
1000fcbe:	7f83      	ldrb	r3, [r0, #30]
1000fcc0:	01ad      	lsls	r5, r5, #6
1000fcc2:	015b      	lsls	r3, r3, #5
1000fcc4:	431d      	orrs	r5, r3
1000fcc6:	7ec3      	ldrb	r3, [r0, #27]
1000fcc8:	431d      	orrs	r5, r3
1000fcca:	7f43      	ldrb	r3, [r0, #29]
1000fccc:	011b      	lsls	r3, r3, #4
1000fcce:	431d      	orrs	r5, r3
1000fcd0:	7f03      	ldrb	r3, [r0, #28]
1000fcd2:	009b      	lsls	r3, r3, #2
1000fcd4:	431d      	orrs	r5, r3
1000fcd6:	4b12      	ldr	r3, [pc, #72]	; (1000fd20 <at_ble_set_dev_config+0x84>)
1000fcd8:	b2ed      	uxtb	r5, r5
1000fcda:	711e      	strb	r6, [r3, #4]
1000fcdc:	7903      	ldrb	r3, [r0, #4]
1000fcde:	3b02      	subs	r3, #2
1000fce0:	2b01      	cmp	r3, #1
1000fce2:	d801      	bhi.n	1000fce8 <at_ble_set_dev_config+0x4c>
1000fce4:	2302      	movs	r3, #2
1000fce6:	7103      	strb	r3, [r0, #4]
1000fce8:	1c04      	adds	r4, r0, #0
1000fcea:	1c23      	adds	r3, r4, #0
1000fcec:	330b      	adds	r3, #11
1000fcee:	8861      	ldrh	r1, [r4, #2]
1000fcf0:	9307      	str	r3, [sp, #28]
1000fcf2:	7923      	ldrb	r3, [r4, #4]
1000fcf4:	7800      	ldrb	r0, [r0, #0]
1000fcf6:	9300      	str	r3, [sp, #0]
1000fcf8:	9501      	str	r5, [sp, #4]
1000fcfa:	8c25      	ldrh	r5, [r4, #32]
1000fcfc:	1d62      	adds	r2, r4, #5
1000fcfe:	9502      	str	r5, [sp, #8]
1000fd00:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000fd02:	9b07      	ldr	r3, [sp, #28]
1000fd04:	9503      	str	r5, [sp, #12]
1000fd06:	9704      	str	r7, [sp, #16]
1000fd08:	4d06      	ldr	r5, [pc, #24]	; (1000fd24 <at_ble_set_dev_config+0x88>)
1000fd0a:	47a8      	blx	r5
1000fd0c:	7126      	strb	r6, [r4, #4]
1000fd0e:	1c05      	adds	r5, r0, #0
1000fd10:	1c21      	adds	r1, r4, #0
1000fd12:	4803      	ldr	r0, [pc, #12]	; (1000fd20 <at_ble_set_dev_config+0x84>)
1000fd14:	2226      	movs	r2, #38	; 0x26
1000fd16:	4b04      	ldr	r3, [pc, #16]	; (1000fd28 <at_ble_set_dev_config+0x8c>)
1000fd18:	4798      	blx	r3
1000fd1a:	1c28      	adds	r0, r5, #0
1000fd1c:	b009      	add	sp, #36	; 0x24
1000fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd20:	10019ad2 	.word	0x10019ad2
1000fd24:	10011a91 	.word	0x10011a91
1000fd28:	100148df 	.word	0x100148df

1000fd2c <at_ble_init>:
1000fd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd2e:	b087      	sub	sp, #28
1000fd30:	af03      	add	r7, sp, #12
1000fd32:	4954      	ldr	r1, [pc, #336]	; (1000fe84 <at_ble_init+0x158>)
1000fd34:	220b      	movs	r2, #11
1000fd36:	4b54      	ldr	r3, [pc, #336]	; (1000fe88 <at_ble_init+0x15c>)
1000fd38:	1c04      	adds	r4, r0, #0
1000fd3a:	1c38      	adds	r0, r7, #0
1000fd3c:	4798      	blx	r3
1000fd3e:	2205      	movs	r2, #5
1000fd40:	4b52      	ldr	r3, [pc, #328]	; (1000fe8c <at_ble_init+0x160>)
1000fd42:	2640      	movs	r6, #64	; 0x40
1000fd44:	801a      	strh	r2, [r3, #0]
1000fd46:	2300      	movs	r3, #0
1000fd48:	4a51      	ldr	r2, [pc, #324]	; (1000fe90 <at_ble_init+0x164>)
1000fd4a:	6013      	str	r3, [r2, #0]
1000fd4c:	4a51      	ldr	r2, [pc, #324]	; (1000fe94 <at_ble_init+0x168>)
1000fd4e:	7013      	strb	r3, [r2, #0]
1000fd50:	4a51      	ldr	r2, [pc, #324]	; (1000fe98 <at_ble_init+0x16c>)
1000fd52:	7013      	strb	r3, [r2, #0]
1000fd54:	4b51      	ldr	r3, [pc, #324]	; (1000fe9c <at_ble_init+0x170>)
1000fd56:	4798      	blx	r3
1000fd58:	4b51      	ldr	r3, [pc, #324]	; (1000fea0 <at_ble_init+0x174>)
1000fd5a:	4798      	blx	r3
1000fd5c:	4b51      	ldr	r3, [pc, #324]	; (1000fea4 <at_ble_init+0x178>)
1000fd5e:	4798      	blx	r3
1000fd60:	4b51      	ldr	r3, [pc, #324]	; (1000fea8 <at_ble_init+0x17c>)
1000fd62:	4798      	blx	r3
1000fd64:	2c00      	cmp	r4, #0
1000fd66:	d100      	bne.n	1000fd6a <at_ble_init+0x3e>
1000fd68:	e089      	b.n	1000fe7e <at_ble_init+0x152>
1000fd6a:	68a3      	ldr	r3, [r4, #8]
1000fd6c:	2b00      	cmp	r3, #0
1000fd6e:	d100      	bne.n	1000fd72 <at_ble_init+0x46>
1000fd70:	e085      	b.n	1000fe7e <at_ble_init+0x152>
1000fd72:	6923      	ldr	r3, [r4, #16]
1000fd74:	2b00      	cmp	r3, #0
1000fd76:	d100      	bne.n	1000fd7a <at_ble_init+0x4e>
1000fd78:	e081      	b.n	1000fe7e <at_ble_init+0x152>
1000fd7a:	6820      	ldr	r0, [r4, #0]
1000fd7c:	2800      	cmp	r0, #0
1000fd7e:	d102      	bne.n	1000fd86 <at_ble_init+0x5a>
1000fd80:	6863      	ldr	r3, [r4, #4]
1000fd82:	2b00      	cmp	r3, #0
1000fd84:	d17b      	bne.n	1000fe7e <at_ble_init+0x152>
1000fd86:	4b49      	ldr	r3, [pc, #292]	; (1000feac <at_ble_init+0x180>)
1000fd88:	6861      	ldr	r1, [r4, #4]
1000fd8a:	4798      	blx	r3
1000fd8c:	4b48      	ldr	r3, [pc, #288]	; (1000feb0 <at_ble_init+0x184>)
1000fd8e:	4798      	blx	r3
1000fd90:	2801      	cmp	r0, #1
1000fd92:	d901      	bls.n	1000fd98 <at_ble_init+0x6c>
1000fd94:	26e2      	movs	r6, #226	; 0xe2
1000fd96:	e072      	b.n	1000fe7e <at_ble_init+0x152>
1000fd98:	4846      	ldr	r0, [pc, #280]	; (1000feb4 <at_ble_init+0x188>)
1000fd9a:	4b47      	ldr	r3, [pc, #284]	; (1000feb8 <at_ble_init+0x18c>)
1000fd9c:	4798      	blx	r3
1000fd9e:	2800      	cmp	r0, #0
1000fda0:	d1f8      	bne.n	1000fd94 <at_ble_init+0x68>
1000fda2:	1c20      	adds	r0, r4, #0
1000fda4:	4b45      	ldr	r3, [pc, #276]	; (1000febc <at_ble_init+0x190>)
1000fda6:	4798      	blx	r3
1000fda8:	68e0      	ldr	r0, [r4, #12]
1000fdaa:	68a1      	ldr	r1, [r4, #8]
1000fdac:	4b44      	ldr	r3, [pc, #272]	; (1000fec0 <at_ble_init+0x194>)
1000fdae:	4798      	blx	r3
1000fdb0:	466b      	mov	r3, sp
1000fdb2:	2201      	movs	r2, #1
1000fdb4:	1cdc      	adds	r4, r3, #3
1000fdb6:	1c20      	adds	r0, r4, #0
1000fdb8:	a901      	add	r1, sp, #4
1000fdba:	4252      	negs	r2, r2
1000fdbc:	4b41      	ldr	r3, [pc, #260]	; (1000fec4 <at_ble_init+0x198>)
1000fdbe:	4798      	blx	r3
1000fdc0:	2800      	cmp	r0, #0
1000fdc2:	d102      	bne.n	1000fdca <at_ble_init+0x9e>
1000fdc4:	7823      	ldrb	r3, [r4, #0]
1000fdc6:	2b39      	cmp	r3, #57	; 0x39
1000fdc8:	d1f2      	bne.n	1000fdb0 <at_ble_init+0x84>
1000fdca:	4b3f      	ldr	r3, [pc, #252]	; (1000fec8 <at_ble_init+0x19c>)
1000fdcc:	4798      	blx	r3
1000fdce:	1e06      	subs	r6, r0, #0
1000fdd0:	d155      	bne.n	1000fe7e <at_ble_init+0x152>
1000fdd2:	1c03      	adds	r3, r0, #0
1000fdd4:	2101      	movs	r1, #1
1000fdd6:	4a3d      	ldr	r2, [pc, #244]	; (1000fecc <at_ble_init+0x1a0>)
1000fdd8:	4249      	negs	r1, r1
1000fdda:	189a      	adds	r2, r3, r2
1000fddc:	3312      	adds	r3, #18
1000fdde:	8151      	strh	r1, [r2, #10]
1000fde0:	2b90      	cmp	r3, #144	; 0x90
1000fde2:	d1f7      	bne.n	1000fdd4 <at_ble_init+0xa8>
1000fde4:	4c3a      	ldr	r4, [pc, #232]	; (1000fed0 <at_ble_init+0x1a4>)
1000fde6:	3b81      	subs	r3, #129	; 0x81
1000fde8:	7023      	strb	r3, [r4, #0]
1000fdea:	4b3a      	ldr	r3, [pc, #232]	; (1000fed4 <at_ble_init+0x1a8>)
1000fdec:	4a3a      	ldr	r2, [pc, #232]	; (1000fed8 <at_ble_init+0x1ac>)
1000fdee:	8063      	strh	r3, [r4, #2]
1000fdf0:	2300      	movs	r3, #0
1000fdf2:	7123      	strb	r3, [r4, #4]
1000fdf4:	3301      	adds	r3, #1
1000fdf6:	1e58      	subs	r0, r3, #1
1000fdf8:	0119      	lsls	r1, r3, #4
1000fdfa:	4301      	orrs	r1, r0
1000fdfc:	3302      	adds	r3, #2
1000fdfe:	7011      	strb	r1, [r2, #0]
1000fe00:	3201      	adds	r2, #1
1000fe02:	2b21      	cmp	r3, #33	; 0x21
1000fe04:	d1f7      	bne.n	1000fdf6 <at_ble_init+0xca>
1000fe06:	33e0      	adds	r3, #224	; 0xe0
1000fe08:	33ff      	adds	r3, #255	; 0xff
1000fe0a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000fe0c:	1c23      	adds	r3, r4, #0
1000fe0e:	2500      	movs	r5, #0
1000fe10:	3373      	adds	r3, #115	; 0x73
1000fe12:	701d      	strb	r5, [r3, #0]
1000fe14:	1c23      	adds	r3, r4, #0
1000fe16:	3372      	adds	r3, #114	; 0x72
1000fe18:	701d      	strb	r5, [r3, #0]
1000fe1a:	1c23      	adds	r3, r4, #0
1000fe1c:	3376      	adds	r3, #118	; 0x76
1000fe1e:	701d      	strb	r5, [r3, #0]
1000fe20:	1c23      	adds	r3, r4, #0
1000fe22:	33cc      	adds	r3, #204	; 0xcc
1000fe24:	801d      	strh	r5, [r3, #0]
1000fe26:	1c22      	adds	r2, r4, #0
1000fe28:	23a0      	movs	r3, #160	; 0xa0
1000fe2a:	32d0      	adds	r2, #208	; 0xd0
1000fe2c:	005b      	lsls	r3, r3, #1
1000fe2e:	8013      	strh	r3, [r2, #0]
1000fe30:	1c22      	adds	r2, r4, #0
1000fe32:	32ce      	adds	r2, #206	; 0xce
1000fe34:	8013      	strh	r3, [r2, #0]
1000fe36:	1c23      	adds	r3, r4, #0
1000fe38:	33d2      	adds	r3, #210	; 0xd2
1000fe3a:	801d      	strh	r5, [r3, #0]
1000fe3c:	22fa      	movs	r2, #250	; 0xfa
1000fe3e:	1c23      	adds	r3, r4, #0
1000fe40:	0052      	lsls	r2, r2, #1
1000fe42:	33d4      	adds	r3, #212	; 0xd4
1000fe44:	801a      	strh	r2, [r3, #0]
1000fe46:	1c23      	adds	r3, r4, #0
1000fe48:	33d6      	adds	r3, #214	; 0xd6
1000fe4a:	701d      	strb	r5, [r3, #0]
1000fe4c:	1c20      	adds	r0, r4, #0
1000fe4e:	4b23      	ldr	r3, [pc, #140]	; (1000fedc <at_ble_init+0x1b0>)
1000fe50:	76e5      	strb	r5, [r4, #27]
1000fe52:	7725      	strb	r5, [r4, #28]
1000fe54:	7765      	strb	r5, [r4, #29]
1000fe56:	77a5      	strb	r5, [r4, #30]
1000fe58:	77e5      	strb	r5, [r4, #31]
1000fe5a:	8425      	strh	r5, [r4, #32]
1000fe5c:	8465      	strh	r5, [r4, #34]	; 0x22
1000fe5e:	4798      	blx	r3
1000fe60:	1c23      	adds	r3, r4, #0
1000fe62:	2207      	movs	r2, #7
1000fe64:	3374      	adds	r3, #116	; 0x74
1000fe66:	701a      	strb	r2, [r3, #0]
1000fe68:	1c23      	adds	r3, r4, #0
1000fe6a:	3204      	adds	r2, #4
1000fe6c:	33aa      	adds	r3, #170	; 0xaa
1000fe6e:	801a      	strh	r2, [r3, #0]
1000fe70:	1c2b      	adds	r3, r5, #0
1000fe72:	5d7a      	ldrb	r2, [r7, r5]
1000fe74:	33ac      	adds	r3, #172	; 0xac
1000fe76:	3501      	adds	r5, #1
1000fe78:	54e2      	strb	r2, [r4, r3]
1000fe7a:	2d0b      	cmp	r5, #11
1000fe7c:	d1f8      	bne.n	1000fe70 <at_ble_init+0x144>
1000fe7e:	1c30      	adds	r0, r6, #0
1000fe80:	b007      	add	sp, #28
1000fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe84:	10016e78 	.word	0x10016e78
1000fe88:	100148df 	.word	0x100148df
1000fe8c:	10019a40 	.word	0x10019a40
1000fe90:	10018bd4 	.word	0x10018bd4
1000fe94:	10018b34 	.word	0x10018b34
1000fe98:	100170a0 	.word	0x100170a0
1000fe9c:	100124e1 	.word	0x100124e1
1000fea0:	1001019d 	.word	0x1001019d
1000fea4:	100107fd 	.word	0x100107fd
1000fea8:	10010ab1 	.word	0x10010ab1
1000feac:	10010839 	.word	0x10010839
1000feb0:	1000e8bd 	.word	0x1000e8bd
1000feb4:	10010db1 	.word	0x10010db1
1000feb8:	1000eb01 	.word	0x1000eb01
1000febc:	10010e59 	.word	0x10010e59
1000fec0:	1000f419 	.word	0x1000f419
1000fec4:	1000f4d5 	.word	0x1000f4d5
1000fec8:	10011a21 	.word	0x10011a21
1000fecc:	10019a42 	.word	0x10019a42
1000fed0:	10019ad2 	.word	0x10019ad2
1000fed4:	00003a98 	.word	0x00003a98
1000fed8:	10019add 	.word	0x10019add
1000fedc:	1000fc9d 	.word	0x1000fc9d

1000fee0 <at_ble_addr_set>:
1000fee0:	b538      	push	{r3, r4, r5, lr}
1000fee2:	1c45      	adds	r5, r0, #1
1000fee4:	1c03      	adds	r3, r0, #0
1000fee6:	20cf      	movs	r0, #207	; 0xcf
1000fee8:	2d00      	cmp	r5, #0
1000feea:	d018      	beq.n	1000ff1e <at_ble_addr_set+0x3e>
1000feec:	781a      	ldrb	r2, [r3, #0]
1000feee:	2a03      	cmp	r2, #3
1000fef0:	d815      	bhi.n	1000ff1e <at_ble_addr_set+0x3e>
1000fef2:	2a01      	cmp	r2, #1
1000fef4:	d102      	bne.n	1000fefc <at_ble_addr_set+0x1c>
1000fef6:	785a      	ldrb	r2, [r3, #1]
1000fef8:	2a00      	cmp	r2, #0
1000fefa:	d010      	beq.n	1000ff1e <at_ble_addr_set+0x3e>
1000fefc:	1c1c      	adds	r4, r3, #0
1000fefe:	1c29      	adds	r1, r5, #0
1000ff00:	2206      	movs	r2, #6
1000ff02:	4b07      	ldr	r3, [pc, #28]	; (1000ff20 <at_ble_addr_set+0x40>)
1000ff04:	4807      	ldr	r0, [pc, #28]	; (1000ff24 <at_ble_addr_set+0x44>)
1000ff06:	4798      	blx	r3
1000ff08:	7823      	ldrb	r3, [r4, #0]
1000ff0a:	4807      	ldr	r0, [pc, #28]	; (1000ff28 <at_ble_addr_set+0x48>)
1000ff0c:	7103      	strb	r3, [r0, #4]
1000ff0e:	4b07      	ldr	r3, [pc, #28]	; (1000ff2c <at_ble_addr_set+0x4c>)
1000ff10:	4798      	blx	r3
1000ff12:	7823      	ldrb	r3, [r4, #0]
1000ff14:	2b00      	cmp	r3, #0
1000ff16:	d102      	bne.n	1000ff1e <at_ble_addr_set+0x3e>
1000ff18:	1c28      	adds	r0, r5, #0
1000ff1a:	4b05      	ldr	r3, [pc, #20]	; (1000ff30 <at_ble_addr_set+0x50>)
1000ff1c:	4798      	blx	r3
1000ff1e:	bd38      	pop	{r3, r4, r5, pc}
1000ff20:	100148df 	.word	0x100148df
1000ff24:	10019ad7 	.word	0x10019ad7
1000ff28:	10019ad2 	.word	0x10019ad2
1000ff2c:	1000fc9d 	.word	0x1000fc9d
1000ff30:	10010edd 	.word	0x10010edd

1000ff34 <at_ble_adv_data_set>:
1000ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ff36:	4684      	mov	ip, r0
1000ff38:	1c0f      	adds	r7, r1, #0
1000ff3a:	1c16      	adds	r6, r2, #0
1000ff3c:	1c1c      	adds	r4, r3, #0
1000ff3e:	2800      	cmp	r0, #0
1000ff40:	d102      	bne.n	1000ff48 <at_ble_adv_data_set+0x14>
1000ff42:	20e2      	movs	r0, #226	; 0xe2
1000ff44:	2a00      	cmp	r2, #0
1000ff46:	d02b      	beq.n	1000ffa0 <at_ble_adv_data_set+0x6c>
1000ff48:	20cf      	movs	r0, #207	; 0xcf
1000ff4a:	2f1f      	cmp	r7, #31
1000ff4c:	d828      	bhi.n	1000ffa0 <at_ble_adv_data_set+0x6c>
1000ff4e:	2c1f      	cmp	r4, #31
1000ff50:	d826      	bhi.n	1000ffa0 <at_ble_adv_data_set+0x6c>
1000ff52:	4663      	mov	r3, ip
1000ff54:	2b00      	cmp	r3, #0
1000ff56:	d00e      	beq.n	1000ff76 <at_ble_adv_data_set+0x42>
1000ff58:	4812      	ldr	r0, [pc, #72]	; (1000ffa4 <at_ble_adv_data_set+0x70>)
1000ff5a:	4d13      	ldr	r5, [pc, #76]	; (1000ffa8 <at_ble_adv_data_set+0x74>)
1000ff5c:	2f00      	cmp	r7, #0
1000ff5e:	d104      	bne.n	1000ff6a <at_ble_adv_data_set+0x36>
1000ff60:	1c39      	adds	r1, r7, #0
1000ff62:	221f      	movs	r2, #31
1000ff64:	4b11      	ldr	r3, [pc, #68]	; (1000ffac <at_ble_adv_data_set+0x78>)
1000ff66:	4798      	blx	r3
1000ff68:	e003      	b.n	1000ff72 <at_ble_adv_data_set+0x3e>
1000ff6a:	4661      	mov	r1, ip
1000ff6c:	1c3a      	adds	r2, r7, #0
1000ff6e:	4b10      	ldr	r3, [pc, #64]	; (1000ffb0 <at_ble_adv_data_set+0x7c>)
1000ff70:	4798      	blx	r3
1000ff72:	3572      	adds	r5, #114	; 0x72
1000ff74:	702f      	strb	r7, [r5, #0]
1000ff76:	1e30      	subs	r0, r6, #0
1000ff78:	d012      	beq.n	1000ffa0 <at_ble_adv_data_set+0x6c>
1000ff7a:	4d0b      	ldr	r5, [pc, #44]	; (1000ffa8 <at_ble_adv_data_set+0x74>)
1000ff7c:	480d      	ldr	r0, [pc, #52]	; (1000ffb4 <at_ble_adv_data_set+0x80>)
1000ff7e:	2c00      	cmp	r4, #0
1000ff80:	d107      	bne.n	1000ff92 <at_ble_adv_data_set+0x5e>
1000ff82:	1c21      	adds	r1, r4, #0
1000ff84:	221f      	movs	r2, #31
1000ff86:	4b09      	ldr	r3, [pc, #36]	; (1000ffac <at_ble_adv_data_set+0x78>)
1000ff88:	3573      	adds	r5, #115	; 0x73
1000ff8a:	4798      	blx	r3
1000ff8c:	702c      	strb	r4, [r5, #0]
1000ff8e:	1c20      	adds	r0, r4, #0
1000ff90:	e006      	b.n	1000ffa0 <at_ble_adv_data_set+0x6c>
1000ff92:	1c31      	adds	r1, r6, #0
1000ff94:	1c22      	adds	r2, r4, #0
1000ff96:	4b06      	ldr	r3, [pc, #24]	; (1000ffb0 <at_ble_adv_data_set+0x7c>)
1000ff98:	4798      	blx	r3
1000ff9a:	2000      	movs	r0, #0
1000ff9c:	3573      	adds	r5, #115	; 0x73
1000ff9e:	702c      	strb	r4, [r5, #0]
1000ffa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ffa2:	46c0      	nop			; (mov r8, r8)
1000ffa4:	10019b06 	.word	0x10019b06
1000ffa8:	10019ad2 	.word	0x10019ad2
1000ffac:	100148f1 	.word	0x100148f1
1000ffb0:	100148df 	.word	0x100148df
1000ffb4:	10019b25 	.word	0x10019b25

1000ffb8 <at_ble_adv_start>:
1000ffb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffba:	b091      	sub	sp, #68	; 0x44
1000ffbc:	1c1f      	adds	r7, r3, #0
1000ffbe:	ab16      	add	r3, sp, #88	; 0x58
1000ffc0:	881d      	ldrh	r5, [r3, #0]
1000ffc2:	ab17      	add	r3, sp, #92	; 0x5c
1000ffc4:	881b      	ldrh	r3, [r3, #0]
1000ffc6:	910d      	str	r1, [sp, #52]	; 0x34
1000ffc8:	930e      	str	r3, [sp, #56]	; 0x38
1000ffca:	ab18      	add	r3, sp, #96	; 0x60
1000ffcc:	781b      	ldrb	r3, [r3, #0]
1000ffce:	1c04      	adds	r4, r0, #0
1000ffd0:	930f      	str	r3, [sp, #60]	; 0x3c
1000ffd2:	4b42      	ldr	r3, [pc, #264]	; (100100dc <at_ble_adv_start+0x124>)
1000ffd4:	1c16      	adds	r6, r2, #0
1000ffd6:	3373      	adds	r3, #115	; 0x73
1000ffd8:	781b      	ldrb	r3, [r3, #0]
1000ffda:	20cf      	movs	r0, #207	; 0xcf
1000ffdc:	930c      	str	r3, [sp, #48]	; 0x30
1000ffde:	2c01      	cmp	r4, #1
1000ffe0:	d103      	bne.n	1000ffea <at_ble_adv_start+0x32>
1000ffe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000ffe4:	2b00      	cmp	r3, #0
1000ffe6:	d176      	bne.n	100100d6 <at_ble_adv_start+0x11e>
1000ffe8:	e024      	b.n	10010034 <at_ble_adv_start+0x7c>
1000ffea:	2c04      	cmp	r4, #4
1000ffec:	d873      	bhi.n	100100d6 <at_ble_adv_start+0x11e>
1000ffee:	2380      	movs	r3, #128	; 0x80
1000fff0:	01db      	lsls	r3, r3, #7
1000fff2:	429d      	cmp	r5, r3
1000fff4:	d86f      	bhi.n	100100d6 <at_ble_adv_start+0x11e>
1000fff6:	2c00      	cmp	r4, #0
1000fff8:	d102      	bne.n	10010000 <at_ble_adv_start+0x48>
1000fffa:	2d1f      	cmp	r5, #31
1000fffc:	d96b      	bls.n	100100d6 <at_ble_adv_start+0x11e>
1000fffe:	e003      	b.n	10010008 <at_ble_adv_start+0x50>
10010000:	2d9f      	cmp	r5, #159	; 0x9f
10010002:	d801      	bhi.n	10010008 <at_ble_adv_start+0x50>
10010004:	2c01      	cmp	r4, #1
10010006:	d166      	bne.n	100100d6 <at_ble_adv_start+0x11e>
10010008:	2f00      	cmp	r7, #0
1001000a:	d009      	beq.n	10010020 <at_ble_adv_start+0x68>
1001000c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001000e:	20cf      	movs	r0, #207	; 0xcf
10010010:	3b01      	subs	r3, #1
10010012:	2b01      	cmp	r3, #1
10010014:	d95f      	bls.n	100100d6 <at_ble_adv_start+0x11e>
10010016:	2c01      	cmp	r4, #1
10010018:	d102      	bne.n	10010020 <at_ble_adv_start+0x68>
1001001a:	2d00      	cmp	r5, #0
1001001c:	d100      	bne.n	10010020 <at_ble_adv_start+0x68>
1001001e:	3520      	adds	r5, #32
10010020:	4b2f      	ldr	r3, [pc, #188]	; (100100e0 <at_ble_adv_start+0x128>)
10010022:	4798      	blx	r3
10010024:	1c01      	adds	r1, r0, #0
10010026:	2e00      	cmp	r6, #0
10010028:	d043      	beq.n	100100b2 <at_ble_adv_start+0xfa>
1001002a:	7833      	ldrb	r3, [r6, #0]
1001002c:	1e60      	subs	r0, r4, #1
1001002e:	2b00      	cmp	r3, #0
10010030:	d109      	bne.n	10010046 <at_ble_adv_start+0x8e>
10010032:	e03b      	b.n	100100ac <at_ble_adv_start+0xf4>
10010034:	2380      	movs	r3, #128	; 0x80
10010036:	01db      	lsls	r3, r3, #7
10010038:	429d      	cmp	r5, r3
1001003a:	d84c      	bhi.n	100100d6 <at_ble_adv_start+0x11e>
1001003c:	2e00      	cmp	r6, #0
1001003e:	d04a      	beq.n	100100d6 <at_ble_adv_start+0x11e>
10010040:	2f00      	cmp	r7, #0
10010042:	d1e3      	bne.n	1001000c <at_ble_adv_start+0x54>
10010044:	e02b      	b.n	1001009e <at_ble_adv_start+0xe6>
10010046:	2301      	movs	r3, #1
10010048:	2803      	cmp	r0, #3
1001004a:	d93a      	bls.n	100100c2 <at_ble_adv_start+0x10a>
1001004c:	200d      	movs	r0, #13
1001004e:	1c72      	adds	r2, r6, #1
10010050:	e002      	b.n	10010058 <at_ble_adv_start+0xa0>
10010052:	200e      	movs	r0, #14
10010054:	1e32      	subs	r2, r6, #0
10010056:	d1fa      	bne.n	1001004e <at_ble_adv_start+0x96>
10010058:	4c20      	ldr	r4, [pc, #128]	; (100100dc <at_ble_adv_start+0x124>)
1001005a:	3474      	adds	r4, #116	; 0x74
1001005c:	7826      	ldrb	r6, [r4, #0]
1001005e:	2407      	movs	r4, #7
10010060:	2e00      	cmp	r6, #0
10010062:	d000      	beq.n	10010066 <at_ble_adv_start+0xae>
10010064:	1c34      	adds	r4, r6, #0
10010066:	9200      	str	r2, [sp, #0]
10010068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001006a:	9403      	str	r4, [sp, #12]
1001006c:	9204      	str	r2, [sp, #16]
1001006e:	4a1b      	ldr	r2, [pc, #108]	; (100100dc <at_ble_adv_start+0x124>)
10010070:	9501      	str	r5, [sp, #4]
10010072:	9502      	str	r5, [sp, #8]
10010074:	9705      	str	r7, [sp, #20]
10010076:	3272      	adds	r2, #114	; 0x72
10010078:	7812      	ldrb	r2, [r2, #0]
1001007a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1001007c:	9206      	str	r2, [sp, #24]
1001007e:	4a19      	ldr	r2, [pc, #100]	; (100100e4 <at_ble_adv_start+0x12c>)
10010080:	9207      	str	r2, [sp, #28]
10010082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10010084:	9208      	str	r2, [sp, #32]
10010086:	4a18      	ldr	r2, [pc, #96]	; (100100e8 <at_ble_adv_start+0x130>)
10010088:	9209      	str	r2, [sp, #36]	; 0x24
1001008a:	2264      	movs	r2, #100	; 0x64
1001008c:	4362      	muls	r2, r4
1001008e:	b292      	uxth	r2, r2
10010090:	920a      	str	r2, [sp, #40]	; 0x28
10010092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10010094:	4c15      	ldr	r4, [pc, #84]	; (100100ec <at_ble_adv_start+0x134>)
10010096:	920b      	str	r2, [sp, #44]	; 0x2c
10010098:	4a15      	ldr	r2, [pc, #84]	; (100100f0 <at_ble_adv_start+0x138>)
1001009a:	47a0      	blx	r4
1001009c:	e01b      	b.n	100100d6 <at_ble_adv_start+0x11e>
1001009e:	2d00      	cmp	r5, #0
100100a0:	d1be      	bne.n	10010020 <at_ble_adv_start+0x68>
100100a2:	4b0f      	ldr	r3, [pc, #60]	; (100100e0 <at_ble_adv_start+0x128>)
100100a4:	4798      	blx	r3
100100a6:	2520      	movs	r5, #32
100100a8:	1c01      	adds	r1, r0, #0
100100aa:	e7be      	b.n	1001002a <at_ble_adv_start+0x72>
100100ac:	2803      	cmp	r0, #3
100100ae:	d8cd      	bhi.n	1001004c <at_ble_adv_start+0x94>
100100b0:	e006      	b.n	100100c0 <at_ble_adv_start+0x108>
100100b2:	1e60      	subs	r0, r4, #1
100100b4:	2803      	cmp	r0, #3
100100b6:	d903      	bls.n	100100c0 <at_ble_adv_start+0x108>
100100b8:	1c33      	adds	r3, r6, #0
100100ba:	200d      	movs	r0, #13
100100bc:	1c32      	adds	r2, r6, #0
100100be:	e7cb      	b.n	10010058 <at_ble_adv_start+0xa0>
100100c0:	2300      	movs	r3, #0
100100c2:	f002 fb7f 	bl	100127c4 <__gnu_thumb1_case_sqi>
100100c6:	06c6      	.short	0x06c6
100100c8:	0204      	.short	0x0204
100100ca:	200f      	movs	r0, #15
100100cc:	e7c2      	b.n	10010054 <at_ble_adv_start+0x9c>
100100ce:	2200      	movs	r2, #0
100100d0:	920c      	str	r2, [sp, #48]	; 0x30
100100d2:	200c      	movs	r0, #12
100100d4:	e7be      	b.n	10010054 <at_ble_adv_start+0x9c>
100100d6:	b011      	add	sp, #68	; 0x44
100100d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100da:	46c0      	nop			; (mov r8, r8)
100100dc:	10019ad2 	.word	0x10019ad2
100100e0:	10011f6d 	.word	0x10011f6d
100100e4:	10019b06 	.word	0x10019b06
100100e8:	10019b25 	.word	0x10019b25
100100ec:	10011e4d 	.word	0x10011e4d
100100f0:	00003a98 	.word	0x00003a98

100100f4 <at_ble_adv_stop>:
100100f4:	b508      	push	{r3, lr}
100100f6:	4b01      	ldr	r3, [pc, #4]	; (100100fc <at_ble_adv_stop+0x8>)
100100f8:	4798      	blx	r3
100100fa:	bd08      	pop	{r3, pc}
100100fc:	10011c79 	.word	0x10011c79

10010100 <at_ble_scan_stop>:
10010100:	b510      	push	{r4, lr}
10010102:	4b05      	ldr	r3, [pc, #20]	; (10010118 <at_ble_scan_stop+0x18>)
10010104:	4798      	blx	r3
10010106:	1e04      	subs	r4, r0, #0
10010108:	d103      	bne.n	10010112 <at_ble_scan_stop+0x12>
1001010a:	20d1      	movs	r0, #209	; 0xd1
1001010c:	4b03      	ldr	r3, [pc, #12]	; (1001011c <at_ble_scan_stop+0x1c>)
1001010e:	0100      	lsls	r0, r0, #4
10010110:	4798      	blx	r3
10010112:	1c20      	adds	r0, r4, #0
10010114:	bd10      	pop	{r4, pc}
10010116:	46c0      	nop			; (mov r8, r8)
10010118:	10011c79 	.word	0x10011c79
1001011c:	1000fbad 	.word	0x1000fbad

10010120 <at_ble_disconnect>:
10010120:	b538      	push	{r3, r4, r5, lr}
10010122:	1c04      	adds	r4, r0, #0
10010124:	4b04      	ldr	r3, [pc, #16]	; (10010138 <at_ble_disconnect+0x18>)
10010126:	1c08      	adds	r0, r1, #0
10010128:	1c21      	adds	r1, r4, #0
1001012a:	4798      	blx	r3
1001012c:	1c05      	adds	r5, r0, #0
1001012e:	4b03      	ldr	r3, [pc, #12]	; (1001013c <at_ble_disconnect+0x1c>)
10010130:	1c20      	adds	r0, r4, #0
10010132:	4798      	blx	r3
10010134:	1c28      	adds	r0, r5, #0
10010136:	bd38      	pop	{r3, r4, r5, pc}
10010138:	100112f1 	.word	0x100112f1
1001013c:	1000fbf1 	.word	0x1000fbf1

10010140 <at_ble_conn_update_reply>:
10010140:	b510      	push	{r4, lr}
10010142:	4c01      	ldr	r4, [pc, #4]	; (10010148 <at_ble_conn_update_reply+0x8>)
10010144:	47a0      	blx	r4
10010146:	bd10      	pop	{r4, pc}
10010148:	100117e1 	.word	0x100117e1

1001014c <at_ble_random_address_resolve>:
1001014c:	b510      	push	{r4, lr}
1001014e:	23cf      	movs	r3, #207	; 0xcf
10010150:	2800      	cmp	r0, #0
10010152:	d00a      	beq.n	1001016a <at_ble_random_address_resolve+0x1e>
10010154:	2900      	cmp	r1, #0
10010156:	d008      	beq.n	1001016a <at_ble_random_address_resolve+0x1e>
10010158:	2a00      	cmp	r2, #0
1001015a:	d006      	beq.n	1001016a <at_ble_random_address_resolve+0x1e>
1001015c:	780c      	ldrb	r4, [r1, #0]
1001015e:	2c02      	cmp	r4, #2
10010160:	d103      	bne.n	1001016a <at_ble_random_address_resolve+0x1e>
10010162:	4b03      	ldr	r3, [pc, #12]	; (10010170 <at_ble_random_address_resolve+0x24>)
10010164:	3101      	adds	r1, #1
10010166:	4798      	blx	r3
10010168:	2300      	movs	r3, #0
1001016a:	1c18      	adds	r0, r3, #0
1001016c:	bd10      	pop	{r4, pc}
1001016e:	46c0      	nop			; (mov r8, r8)
10010170:	1001200d 	.word	0x1001200d

10010174 <at_ble_uuid_type2len>:
10010174:	23cf      	movs	r3, #207	; 0xcf
10010176:	2802      	cmp	r0, #2
10010178:	d801      	bhi.n	1001017e <at_ble_uuid_type2len+0xa>
1001017a:	4b02      	ldr	r3, [pc, #8]	; (10010184 <at_ble_uuid_type2len+0x10>)
1001017c:	5c1b      	ldrb	r3, [r3, r0]
1001017e:	1c18      	adds	r0, r3, #0
10010180:	4770      	bx	lr
10010182:	46c0      	nop			; (mov r8, r8)
10010184:	10016e83 	.word	0x10016e83

10010188 <at_ble_uuid_len2type>:
10010188:	1e83      	subs	r3, r0, #2
1001018a:	b2db      	uxtb	r3, r3
1001018c:	2003      	movs	r0, #3
1001018e:	2b0e      	cmp	r3, #14
10010190:	d801      	bhi.n	10010196 <at_ble_uuid_len2type+0xe>
10010192:	4a01      	ldr	r2, [pc, #4]	; (10010198 <at_ble_uuid_len2type+0x10>)
10010194:	5cd0      	ldrb	r0, [r2, r3]
10010196:	4770      	bx	lr
10010198:	10016e86 	.word	0x10016e86

1001019c <init_gatt_client_module>:
1001019c:	2200      	movs	r2, #0
1001019e:	4b01      	ldr	r3, [pc, #4]	; (100101a4 <init_gatt_client_module+0x8>)
100101a0:	801a      	strh	r2, [r3, #0]
100101a2:	4770      	bx	lr
100101a4:	10018b2c 	.word	0x10018b2c

100101a8 <db_searchATT>:
100101a8:	b570      	push	{r4, r5, r6, lr}
100101aa:	1c05      	adds	r5, r0, #0
100101ac:	2400      	movs	r4, #0
100101ae:	4b0c      	ldr	r3, [pc, #48]	; (100101e0 <db_searchATT+0x38>)
100101b0:	6819      	ldr	r1, [r3, #0]
100101b2:	4b0c      	ldr	r3, [pc, #48]	; (100101e4 <db_searchATT+0x3c>)
100101b4:	681e      	ldr	r6, [r3, #0]
100101b6:	428c      	cmp	r4, r1
100101b8:	dc10      	bgt.n	100101dc <db_searchATT+0x34>
100101ba:	200c      	movs	r0, #12
100101bc:	1863      	adds	r3, r4, r1
100101be:	0fda      	lsrs	r2, r3, #31
100101c0:	18d3      	adds	r3, r2, r3
100101c2:	1c02      	adds	r2, r0, #0
100101c4:	105b      	asrs	r3, r3, #1
100101c6:	435a      	muls	r2, r3
100101c8:	18b0      	adds	r0, r6, r2
100101ca:	8802      	ldrh	r2, [r0, #0]
100101cc:	42aa      	cmp	r2, r5
100101ce:	d201      	bcs.n	100101d4 <db_searchATT+0x2c>
100101d0:	1e59      	subs	r1, r3, #1
100101d2:	e7f0      	b.n	100101b6 <db_searchATT+0xe>
100101d4:	42aa      	cmp	r2, r5
100101d6:	d902      	bls.n	100101de <db_searchATT+0x36>
100101d8:	1c5c      	adds	r4, r3, #1
100101da:	e7ec      	b.n	100101b6 <db_searchATT+0xe>
100101dc:	2000      	movs	r0, #0
100101de:	bd70      	pop	{r4, r5, r6, pc}
100101e0:	10018b40 	.word	0x10018b40
100101e4:	10018b38 	.word	0x10018b38

100101e8 <att_permissions>:
100101e8:	b530      	push	{r4, r5, lr}
100101ea:	2403      	movs	r4, #3
100101ec:	1c05      	adds	r5, r0, #0
100101ee:	2301      	movs	r3, #1
100101f0:	4025      	ands	r5, r4
100101f2:	42a5      	cmp	r5, r4
100101f4:	d009      	beq.n	1001020a <att_permissions+0x22>
100101f6:	1c23      	adds	r3, r4, #0
100101f8:	1924      	adds	r4, r4, r4
100101fa:	4220      	tst	r0, r4
100101fc:	d105      	bne.n	1001020a <att_permissions+0x22>
100101fe:	3b02      	subs	r3, #2
10010200:	4218      	tst	r0, r3
10010202:	d102      	bne.n	1001020a <att_permissions+0x22>
10010204:	1e4b      	subs	r3, r1, #1
10010206:	4199      	sbcs	r1, r3
10010208:	b28b      	uxth	r3, r1
1001020a:	2130      	movs	r1, #48	; 0x30
1001020c:	4001      	ands	r1, r0
1001020e:	2930      	cmp	r1, #48	; 0x30
10010210:	d007      	beq.n	10010222 <att_permissions+0x3a>
10010212:	0641      	lsls	r1, r0, #25
10010214:	d401      	bmi.n	1001021a <att_permissions+0x32>
10010216:	0681      	lsls	r1, r0, #26
10010218:	d501      	bpl.n	1001021e <att_permissions+0x36>
1001021a:	4807      	ldr	r0, [pc, #28]	; (10010238 <att_permissions+0x50>)
1001021c:	e009      	b.n	10010232 <att_permissions+0x4a>
1001021e:	06c1      	lsls	r1, r0, #27
10010220:	d501      	bpl.n	10010226 <att_permissions+0x3e>
10010222:	4806      	ldr	r0, [pc, #24]	; (1001023c <att_permissions+0x54>)
10010224:	e005      	b.n	10010232 <att_permissions+0x4a>
10010226:	2a00      	cmp	r2, #0
10010228:	d001      	beq.n	1001022e <att_permissions+0x46>
1001022a:	2204      	movs	r2, #4
1001022c:	4313      	orrs	r3, r2
1001022e:	2080      	movs	r0, #128	; 0x80
10010230:	0180      	lsls	r0, r0, #6
10010232:	4318      	orrs	r0, r3
10010234:	bd30      	pop	{r4, r5, pc}
10010236:	46c0      	nop			; (mov r8, r8)
10010238:	0000200c 	.word	0x0000200c
1001023c:	00002004 	.word	0x00002004

10010240 <char_permissions>:
10010240:	b530      	push	{r4, r5, lr}
10010242:	2300      	movs	r3, #0
10010244:	0784      	lsls	r4, r0, #30
10010246:	d503      	bpl.n	10010250 <char_permissions+0x10>
10010248:	3301      	adds	r3, #1
1001024a:	4219      	tst	r1, r3
1001024c:	d100      	bne.n	10010250 <char_permissions+0x10>
1001024e:	3302      	adds	r3, #2
10010250:	0704      	lsls	r4, r0, #28
10010252:	d508      	bpl.n	10010266 <char_permissions+0x26>
10010254:	06cc      	lsls	r4, r1, #27
10010256:	d501      	bpl.n	1001025c <char_permissions+0x1c>
10010258:	2404      	movs	r4, #4
1001025a:	e000      	b.n	1001025e <char_permissions+0x1e>
1001025c:	240c      	movs	r4, #12
1001025e:	4323      	orrs	r3, r4
10010260:	2480      	movs	r4, #128	; 0x80
10010262:	01a4      	lsls	r4, r4, #6
10010264:	4323      	orrs	r3, r4
10010266:	0684      	lsls	r4, r0, #26
10010268:	d506      	bpl.n	10010278 <char_permissions+0x38>
1001026a:	2406      	movs	r4, #6
1001026c:	4221      	tst	r1, r4
1001026e:	d101      	bne.n	10010274 <char_permissions+0x34>
10010270:	340a      	adds	r4, #10
10010272:	e000      	b.n	10010276 <char_permissions+0x36>
10010274:	2430      	movs	r4, #48	; 0x30
10010276:	4323      	orrs	r3, r4
10010278:	06c4      	lsls	r4, r0, #27
1001027a:	d506      	bpl.n	1001028a <char_permissions+0x4a>
1001027c:	2406      	movs	r4, #6
1001027e:	4221      	tst	r1, r4
10010280:	d101      	bne.n	10010286 <char_permissions+0x46>
10010282:	343a      	adds	r4, #58	; 0x3a
10010284:	e000      	b.n	10010288 <char_permissions+0x48>
10010286:	24c0      	movs	r4, #192	; 0xc0
10010288:	4323      	orrs	r3, r4
1001028a:	2480      	movs	r4, #128	; 0x80
1001028c:	0064      	lsls	r4, r4, #1
1001028e:	4220      	tst	r0, r4
10010290:	d000      	beq.n	10010294 <char_permissions+0x54>
10010292:	4323      	orrs	r3, r4
10010294:	07c4      	lsls	r4, r0, #31
10010296:	d502      	bpl.n	1001029e <char_permissions+0x5e>
10010298:	2480      	movs	r4, #128	; 0x80
1001029a:	00a4      	lsls	r4, r4, #2
1001029c:	4323      	orrs	r3, r4
1001029e:	2404      	movs	r4, #4
100102a0:	4220      	tst	r0, r4
100102a2:	d006      	beq.n	100102b2 <char_permissions+0x72>
100102a4:	06cd      	lsls	r5, r1, #27
100102a6:	d400      	bmi.n	100102aa <char_permissions+0x6a>
100102a8:	240c      	movs	r4, #12
100102aa:	4323      	orrs	r3, r4
100102ac:	2480      	movs	r4, #128	; 0x80
100102ae:	0124      	lsls	r4, r4, #4
100102b0:	4323      	orrs	r3, r4
100102b2:	0644      	lsls	r4, r0, #25
100102b4:	d501      	bpl.n	100102ba <char_permissions+0x7a>
100102b6:	4c08      	ldr	r4, [pc, #32]	; (100102d8 <char_permissions+0x98>)
100102b8:	4323      	orrs	r3, r4
100102ba:	0600      	lsls	r0, r0, #24
100102bc:	d507      	bpl.n	100102ce <char_permissions+0x8e>
100102be:	2004      	movs	r0, #4
100102c0:	06c9      	lsls	r1, r1, #27
100102c2:	d400      	bmi.n	100102c6 <char_permissions+0x86>
100102c4:	200c      	movs	r0, #12
100102c6:	4303      	orrs	r3, r0
100102c8:	2084      	movs	r0, #132	; 0x84
100102ca:	0180      	lsls	r0, r0, #6
100102cc:	4303      	orrs	r3, r0
100102ce:	0390      	lsls	r0, r2, #14
100102d0:	4303      	orrs	r3, r0
100102d2:	b298      	uxth	r0, r3
100102d4:	bd30      	pop	{r4, r5, pc}
100102d6:	46c0      	nop			; (mov r8, r8)
100102d8:	00001004 	.word	0x00001004

100102dc <presentation_format_define>:
100102dc:	b507      	push	{r0, r1, r2, lr}
100102de:	466a      	mov	r2, sp
100102e0:	780b      	ldrb	r3, [r1, #0]
100102e2:	7013      	strb	r3, [r2, #0]
100102e4:	784b      	ldrb	r3, [r1, #1]
100102e6:	7053      	strb	r3, [r2, #1]
100102e8:	884b      	ldrh	r3, [r1, #2]
100102ea:	7093      	strb	r3, [r2, #2]
100102ec:	0a1b      	lsrs	r3, r3, #8
100102ee:	70d3      	strb	r3, [r2, #3]
100102f0:	790b      	ldrb	r3, [r1, #4]
100102f2:	7113      	strb	r3, [r2, #4]
100102f4:	88cb      	ldrh	r3, [r1, #6]
100102f6:	2107      	movs	r1, #7
100102f8:	7153      	strb	r3, [r2, #5]
100102fa:	0a1b      	lsrs	r3, r3, #8
100102fc:	7193      	strb	r3, [r2, #6]
100102fe:	4b01      	ldr	r3, [pc, #4]	; (10010304 <presentation_format_define+0x28>)
10010300:	4798      	blx	r3
10010302:	bd0e      	pop	{r1, r2, r3, pc}
10010304:	10012671 	.word	0x10012671

10010308 <db_addATT>:
10010308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001030a:	4c29      	ldr	r4, [pc, #164]	; (100103b0 <db_addATT+0xa8>)
1001030c:	1c1d      	adds	r5, r3, #0
1001030e:	6823      	ldr	r3, [r4, #0]
10010310:	9001      	str	r0, [sp, #4]
10010312:	26d3      	movs	r6, #211	; 0xd3
10010314:	2b00      	cmp	r3, #0
10010316:	d048      	beq.n	100103aa <db_addATT+0xa2>
10010318:	1c1e      	adds	r6, r3, #0
1001031a:	3e0c      	subs	r6, #12
1001031c:	6026      	str	r6, [r4, #0]
1001031e:	2900      	cmp	r1, #0
10010320:	d005      	beq.n	1001032e <db_addATT+0x26>
10010322:	4f24      	ldr	r7, [pc, #144]	; (100103b4 <db_addATT+0xac>)
10010324:	46bc      	mov	ip, r7
10010326:	4660      	mov	r0, ip
10010328:	683f      	ldr	r7, [r7, #0]
1001032a:	18bf      	adds	r7, r7, r2
1001032c:	6007      	str	r7, [r0, #0]
1001032e:	4821      	ldr	r0, [pc, #132]	; (100103b4 <db_addATT+0xac>)
10010330:	6807      	ldr	r7, [r0, #0]
10010332:	4684      	mov	ip, r0
10010334:	42be      	cmp	r6, r7
10010336:	d932      	bls.n	1001039e <db_addATT+0x96>
10010338:	4668      	mov	r0, sp
1001033a:	8880      	ldrh	r0, [r0, #4]
1001033c:	3b0c      	subs	r3, #12
1001033e:	8018      	strh	r0, [r3, #0]
10010340:	6823      	ldr	r3, [r4, #0]
10010342:	2900      	cmp	r1, #0
10010344:	d009      	beq.n	1001035a <db_addATT+0x52>
10010346:	2a00      	cmp	r2, #0
10010348:	d007      	beq.n	1001035a <db_addATT+0x52>
1001034a:	4660      	mov	r0, ip
1001034c:	6800      	ldr	r0, [r0, #0]
1001034e:	809a      	strh	r2, [r3, #4]
10010350:	1a80      	subs	r0, r0, r2
10010352:	6098      	str	r0, [r3, #8]
10010354:	4b18      	ldr	r3, [pc, #96]	; (100103b8 <db_addATT+0xb0>)
10010356:	4798      	blx	r3
10010358:	e002      	b.n	10010360 <db_addATT+0x58>
1001035a:	2100      	movs	r1, #0
1001035c:	809a      	strh	r2, [r3, #4]
1001035e:	6099      	str	r1, [r3, #8]
10010360:	2300      	movs	r3, #0
10010362:	6822      	ldr	r2, [r4, #0]
10010364:	7093      	strb	r3, [r2, #2]
10010366:	3303      	adds	r3, #3
10010368:	402b      	ands	r3, r5
1001036a:	2b03      	cmp	r3, #3
1001036c:	d001      	beq.n	10010372 <db_addATT+0x6a>
1001036e:	076b      	lsls	r3, r5, #29
10010370:	d504      	bpl.n	1001037c <db_addATT+0x74>
10010372:	2101      	movs	r1, #1
10010374:	6822      	ldr	r2, [r4, #0]
10010376:	7893      	ldrb	r3, [r2, #2]
10010378:	430b      	orrs	r3, r1
1001037a:	7093      	strb	r3, [r2, #2]
1001037c:	2330      	movs	r3, #48	; 0x30
1001037e:	402b      	ands	r3, r5
10010380:	2b30      	cmp	r3, #48	; 0x30
10010382:	d001      	beq.n	10010388 <db_addATT+0x80>
10010384:	066b      	lsls	r3, r5, #25
10010386:	d504      	bpl.n	10010392 <db_addATT+0x8a>
10010388:	2102      	movs	r1, #2
1001038a:	6822      	ldr	r2, [r4, #0]
1001038c:	7893      	ldrb	r3, [r2, #2]
1001038e:	430b      	orrs	r3, r1
10010390:	7093      	strb	r3, [r2, #2]
10010392:	4a0a      	ldr	r2, [pc, #40]	; (100103bc <db_addATT+0xb4>)
10010394:	2600      	movs	r6, #0
10010396:	6813      	ldr	r3, [r2, #0]
10010398:	3301      	adds	r3, #1
1001039a:	6013      	str	r3, [r2, #0]
1001039c:	e005      	b.n	100103aa <db_addATT+0xa2>
1001039e:	6023      	str	r3, [r4, #0]
100103a0:	2611      	movs	r6, #17
100103a2:	2900      	cmp	r1, #0
100103a4:	d001      	beq.n	100103aa <db_addATT+0xa2>
100103a6:	1aba      	subs	r2, r7, r2
100103a8:	6002      	str	r2, [r0, #0]
100103aa:	1c30      	adds	r0, r6, #0
100103ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100103ae:	46c0      	nop			; (mov r8, r8)
100103b0:	10018b38 	.word	0x10018b38
100103b4:	10018b3c 	.word	0x10018b3c
100103b8:	100148df 	.word	0x100148df
100103bc:	10018b40 	.word	0x10018b40

100103c0 <user_description_define>:
100103c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100103c2:	1c05      	adds	r5, r0, #0
100103c4:	20cf      	movs	r0, #207	; 0xcf
100103c6:	2a00      	cmp	r2, #0
100103c8:	d01c      	beq.n	10010404 <user_description_define+0x44>
100103ca:	1c14      	adds	r4, r2, #0
100103cc:	2203      	movs	r2, #3
100103ce:	1c1e      	adds	r6, r3, #0
100103d0:	400a      	ands	r2, r1
100103d2:	1c0b      	adds	r3, r1, #0
100103d4:	3a03      	subs	r2, #3
100103d6:	4251      	negs	r1, r2
100103d8:	4151      	adcs	r1, r2
100103da:	075a      	lsls	r2, r3, #29
100103dc:	0fd2      	lsrs	r2, r2, #31
100103de:	430a      	orrs	r2, r1
100103e0:	03d2      	lsls	r2, r2, #15
100103e2:	4f09      	ldr	r7, [pc, #36]	; (10010408 <user_description_define+0x48>)
100103e4:	1c28      	adds	r0, r5, #0
100103e6:	2a00      	cmp	r2, #0
100103e8:	d003      	beq.n	100103f2 <user_description_define+0x32>
100103ea:	1c21      	adds	r1, r4, #0
100103ec:	1c32      	adds	r2, r6, #0
100103ee:	47b8      	blx	r7
100103f0:	e008      	b.n	10010404 <user_description_define+0x44>
100103f2:	1c11      	adds	r1, r2, #0
100103f4:	47b8      	blx	r7
100103f6:	2800      	cmp	r0, #0
100103f8:	d104      	bne.n	10010404 <user_description_define+0x44>
100103fa:	1c28      	adds	r0, r5, #0
100103fc:	1c31      	adds	r1, r6, #0
100103fe:	1c22      	adds	r2, r4, #0
10010400:	4b02      	ldr	r3, [pc, #8]	; (1001040c <user_description_define+0x4c>)
10010402:	4798      	blx	r3
10010404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010406:	46c0      	nop			; (mov r8, r8)
10010408:	10010309 	.word	0x10010309
1001040c:	10012671 	.word	0x10012671

10010410 <at_ble_read_authorize_reply.part.1>:
10010410:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010412:	4b09      	ldr	r3, [pc, #36]	; (10010438 <at_ble_read_authorize_reply.part.1+0x28>)
10010414:	1c05      	adds	r5, r0, #0
10010416:	1c08      	adds	r0, r1, #0
10010418:	1c0c      	adds	r4, r1, #0
1001041a:	4798      	blx	r3
1001041c:	2800      	cmp	r0, #0
1001041e:	d009      	beq.n	10010434 <at_ble_read_authorize_reply.part.1+0x24>
10010420:	6882      	ldr	r2, [r0, #8]
10010422:	2a00      	cmp	r2, #0
10010424:	d006      	beq.n	10010434 <at_ble_read_authorize_reply.part.1+0x24>
10010426:	8883      	ldrh	r3, [r0, #4]
10010428:	1c29      	adds	r1, r5, #0
1001042a:	9200      	str	r2, [sp, #0]
1001042c:	1c20      	adds	r0, r4, #0
1001042e:	2200      	movs	r2, #0
10010430:	4c02      	ldr	r4, [pc, #8]	; (1001043c <at_ble_read_authorize_reply.part.1+0x2c>)
10010432:	47a0      	blx	r4
10010434:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010436:	46c0      	nop			; (mov r8, r8)
10010438:	100101a9 	.word	0x100101a9
1001043c:	10012109 	.word	0x10012109

10010440 <internal_at_ble_service_define>:
10010440:	b5f0      	push	{r4, r5, r6, r7, lr}
10010442:	b08b      	sub	sp, #44	; 0x2c
10010444:	9306      	str	r3, [sp, #24]
10010446:	ab10      	add	r3, sp, #64	; 0x40
10010448:	9202      	str	r2, [sp, #8]
1001044a:	cb04      	ldmia	r3!, {r2}
1001044c:	1c05      	adds	r5, r0, #0
1001044e:	881b      	ldrh	r3, [r3, #0]
10010450:	9105      	str	r1, [sp, #20]
10010452:	9303      	str	r3, [sp, #12]
10010454:	ab12      	add	r3, sp, #72	; 0x48
10010456:	781b      	ldrb	r3, [r3, #0]
10010458:	20cf      	movs	r0, #207	; 0xcf
1001045a:	9304      	str	r3, [sp, #16]
1001045c:	2d00      	cmp	r5, #0
1001045e:	d100      	bne.n	10010462 <internal_at_ble_service_define+0x22>
10010460:	e1ca      	b.n	100107f8 <internal_at_ble_service_define+0x3b8>
10010462:	2900      	cmp	r1, #0
10010464:	d100      	bne.n	10010468 <internal_at_ble_service_define+0x28>
10010466:	e1c7      	b.n	100107f8 <internal_at_ble_service_define+0x3b8>
10010468:	2a00      	cmp	r2, #0
1001046a:	d100      	bne.n	1001046e <internal_at_ble_service_define+0x2e>
1001046c:	e1c4      	b.n	100107f8 <internal_at_ble_service_define+0x3b8>
1001046e:	9b03      	ldr	r3, [sp, #12]
10010470:	2b00      	cmp	r3, #0
10010472:	d100      	bne.n	10010476 <internal_at_ble_service_define+0x36>
10010474:	e1c0      	b.n	100107f8 <internal_at_ble_service_define+0x3b8>
10010476:	4bc9      	ldr	r3, [pc, #804]	; (1001079c <internal_at_ble_service_define+0x35c>)
10010478:	3004      	adds	r0, #4
1001047a:	681e      	ldr	r6, [r3, #0]
1001047c:	2e00      	cmp	r6, #0
1001047e:	d100      	bne.n	10010482 <internal_at_ble_service_define+0x42>
10010480:	e1ba      	b.n	100107f8 <internal_at_ble_service_define+0x3b8>
10010482:	2400      	movs	r4, #0
10010484:	4bc6      	ldr	r3, [pc, #792]	; (100107a0 <internal_at_ble_service_define+0x360>)
10010486:	8034      	strh	r4, [r6, #0]
10010488:	881b      	ldrh	r3, [r3, #0]
1001048a:	1db7      	adds	r7, r6, #6
1001048c:	1c21      	adds	r1, r4, #0
1001048e:	2210      	movs	r2, #16
10010490:	8073      	strh	r3, [r6, #2]
10010492:	1c38      	adds	r0, r7, #0
10010494:	4bc3      	ldr	r3, [pc, #780]	; (100107a4 <internal_at_ble_service_define+0x364>)
10010496:	4798      	blx	r3
10010498:	7828      	ldrb	r0, [r5, #0]
1001049a:	4bc3      	ldr	r3, [pc, #780]	; (100107a8 <internal_at_ble_service_define+0x368>)
1001049c:	4798      	blx	r3
1001049e:	1c69      	adds	r1, r5, #1
100104a0:	1c02      	adds	r2, r0, #0
100104a2:	4bc2      	ldr	r3, [pc, #776]	; (100107ac <internal_at_ble_service_define+0x36c>)
100104a4:	1c38      	adds	r0, r7, #0
100104a6:	4798      	blx	r3
100104a8:	2204      	movs	r2, #4
100104aa:	782b      	ldrb	r3, [r5, #0]
100104ac:	9d02      	ldr	r5, [sp, #8]
100104ae:	011b      	lsls	r3, r3, #4
100104b0:	4313      	orrs	r3, r2
100104b2:	9a04      	ldr	r2, [sp, #16]
100104b4:	7174      	strb	r4, [r6, #5]
100104b6:	0192      	lsls	r2, r2, #6
100104b8:	4313      	orrs	r3, r2
100104ba:	7133      	strb	r3, [r6, #4]
100104bc:	2316      	movs	r3, #22
100104be:	9a06      	ldr	r2, [sp, #24]
100104c0:	3512      	adds	r5, #18
100104c2:	4353      	muls	r3, r2
100104c4:	9a02      	ldr	r2, [sp, #8]
100104c6:	3312      	adds	r3, #18
100104c8:	18d7      	adds	r7, r2, r3
100104ca:	42bd      	cmp	r5, r7
100104cc:	d00f      	beq.n	100104ee <internal_at_ble_service_define+0xae>
100104ce:	4bb8      	ldr	r3, [pc, #736]	; (100107b0 <internal_at_ble_service_define+0x370>)
100104d0:	8829      	ldrh	r1, [r5, #0]
100104d2:	9300      	str	r3, [sp, #0]
100104d4:	230e      	movs	r3, #14
100104d6:	aa06      	add	r2, sp, #24
100104d8:	189b      	adds	r3, r3, r2
100104da:	9301      	str	r3, [sp, #4]
100104dc:	4cb5      	ldr	r4, [pc, #724]	; (100107b4 <internal_at_ble_service_define+0x374>)
100104de:	1c30      	adds	r0, r6, #0
100104e0:	2201      	movs	r2, #1
100104e2:	2302      	movs	r3, #2
100104e4:	47a0      	blx	r4
100104e6:	3516      	adds	r5, #22
100104e8:	1e04      	subs	r4, r0, #0
100104ea:	d0ee      	beq.n	100104ca <internal_at_ble_service_define+0x8a>
100104ec:	e183      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
100104ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
100104f0:	2300      	movs	r3, #0
100104f2:	3714      	adds	r7, #20
100104f4:	1c3d      	adds	r5, r7, #0
100104f6:	9302      	str	r3, [sp, #8]
100104f8:	9b02      	ldr	r3, [sp, #8]
100104fa:	9a03      	ldr	r2, [sp, #12]
100104fc:	4293      	cmp	r3, r2
100104fe:	db00      	blt.n	10010502 <internal_at_ble_service_define+0xc2>
10010500:	e0bf      	b.n	10010682 <internal_at_ble_service_define+0x242>
10010502:	4bad      	ldr	r3, [pc, #692]	; (100107b8 <internal_at_ble_service_define+0x378>)
10010504:	aa06      	add	r2, sp, #24
10010506:	9300      	str	r3, [sp, #0]
10010508:	230e      	movs	r3, #14
1001050a:	189b      	adds	r3, r3, r2
1001050c:	9301      	str	r3, [sp, #4]
1001050e:	4ca9      	ldr	r4, [pc, #676]	; (100107b4 <internal_at_ble_service_define+0x374>)
10010510:	1c30      	adds	r0, r6, #0
10010512:	2104      	movs	r1, #4
10010514:	2201      	movs	r2, #1
10010516:	2302      	movs	r3, #2
10010518:	47a0      	blx	r4
1001051a:	1e04      	subs	r4, r0, #0
1001051c:	d000      	beq.n	10010520 <internal_at_ble_service_define+0xe0>
1001051e:	e16a      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
10010520:	1c2b      	adds	r3, r5, #0
10010522:	3b12      	subs	r3, #18
10010524:	7b2c      	ldrb	r4, [r5, #12]
10010526:	781b      	ldrb	r3, [r3, #0]
10010528:	1c21      	adds	r1, r4, #0
1001052a:	1c1a      	adds	r2, r3, #0
1001052c:	9304      	str	r3, [sp, #16]
1001052e:	8828      	ldrh	r0, [r5, #0]
10010530:	4ba2      	ldr	r3, [pc, #648]	; (100107bc <internal_at_ble_service_define+0x37c>)
10010532:	4798      	blx	r3
10010534:	2303      	movs	r3, #3
10010536:	4023      	ands	r3, r4
10010538:	3b03      	subs	r3, #3
1001053a:	4259      	negs	r1, r3
1001053c:	4159      	adcs	r1, r3
1001053e:	2301      	movs	r3, #1
10010540:	08a4      	lsrs	r4, r4, #2
10010542:	401c      	ands	r4, r3
10010544:	430c      	orrs	r4, r1
10010546:	896b      	ldrh	r3, [r5, #10]
10010548:	03e4      	lsls	r4, r4, #15
1001054a:	431c      	orrs	r4, r3
1001054c:	9007      	str	r0, [sp, #28]
1001054e:	4b96      	ldr	r3, [pc, #600]	; (100107a8 <internal_at_ble_service_define+0x368>)
10010550:	9804      	ldr	r0, [sp, #16]
10010552:	4798      	blx	r3
10010554:	1c2a      	adds	r2, r5, #0
10010556:	3a11      	subs	r2, #17
10010558:	9200      	str	r2, [sp, #0]
1001055a:	3a03      	subs	r2, #3
1001055c:	1c03      	adds	r3, r0, #0
1001055e:	9201      	str	r2, [sp, #4]
10010560:	1c21      	adds	r1, r4, #0
10010562:	1c30      	adds	r0, r6, #0
10010564:	4c93      	ldr	r4, [pc, #588]	; (100107b4 <internal_at_ble_service_define+0x374>)
10010566:	9a07      	ldr	r2, [sp, #28]
10010568:	47a0      	blx	r4
1001056a:	1e04      	subs	r4, r0, #0
1001056c:	d000      	beq.n	10010570 <internal_at_ble_service_define+0x130>
1001056e:	e142      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
10010570:	22c0      	movs	r2, #192	; 0xc0
10010572:	882b      	ldrh	r3, [r5, #0]
10010574:	0052      	lsls	r2, r2, #1
10010576:	4213      	tst	r3, r2
10010578:	d104      	bne.n	10010584 <internal_at_ble_service_define+0x144>
1001057a:	8aab      	ldrh	r3, [r5, #20]
1001057c:	9304      	str	r3, [sp, #16]
1001057e:	2b00      	cmp	r3, #0
10010580:	d116      	bne.n	100105b0 <internal_at_ble_service_define+0x170>
10010582:	e03a      	b.n	100105fa <internal_at_ble_service_define+0x1ba>
10010584:	2201      	movs	r2, #1
10010586:	09d9      	lsrs	r1, r3, #7
10010588:	4011      	ands	r1, r2
1001058a:	05db      	lsls	r3, r3, #23
1001058c:	d501      	bpl.n	10010592 <internal_at_ble_service_define+0x152>
1001058e:	2302      	movs	r3, #2
10010590:	4319      	orrs	r1, r3
10010592:	4b8b      	ldr	r3, [pc, #556]	; (100107c0 <internal_at_ble_service_define+0x380>)
10010594:	aa06      	add	r2, sp, #24
10010596:	9300      	str	r3, [sp, #0]
10010598:	230e      	movs	r3, #14
1001059a:	189b      	adds	r3, r3, r2
1001059c:	9301      	str	r3, [sp, #4]
1001059e:	4c85      	ldr	r4, [pc, #532]	; (100107b4 <internal_at_ble_service_define+0x374>)
100105a0:	0209      	lsls	r1, r1, #8
100105a2:	1c30      	adds	r0, r6, #0
100105a4:	2201      	movs	r2, #1
100105a6:	2302      	movs	r3, #2
100105a8:	47a0      	blx	r4
100105aa:	1e04      	subs	r4, r0, #0
100105ac:	d0e5      	beq.n	1001057a <internal_at_ble_service_define+0x13a>
100105ae:	e122      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
100105b0:	2380      	movs	r3, #128	; 0x80
100105b2:	882a      	ldrh	r2, [r5, #0]
100105b4:	7f2c      	ldrb	r4, [r5, #28]
100105b6:	005b      	lsls	r3, r3, #1
100105b8:	401a      	ands	r2, r3
100105ba:	1c20      	adds	r0, r4, #0
100105bc:	2101      	movs	r1, #1
100105be:	2a00      	cmp	r2, #0
100105c0:	d000      	beq.n	100105c4 <internal_at_ble_service_define+0x184>
100105c2:	1c0a      	adds	r2, r1, #0
100105c4:	4b7f      	ldr	r3, [pc, #508]	; (100107c4 <internal_at_ble_service_define+0x384>)
100105c6:	4798      	blx	r3
100105c8:	2203      	movs	r2, #3
100105ca:	4022      	ands	r2, r4
100105cc:	3a03      	subs	r2, #3
100105ce:	4251      	negs	r1, r2
100105d0:	4151      	adcs	r1, r2
100105d2:	4b7d      	ldr	r3, [pc, #500]	; (100107c8 <internal_at_ble_service_define+0x388>)
100105d4:	1c0a      	adds	r2, r1, #0
100105d6:	9300      	str	r3, [sp, #0]
100105d8:	1c2b      	adds	r3, r5, #0
100105da:	0764      	lsls	r4, r4, #29
100105dc:	0fe4      	lsrs	r4, r4, #31
100105de:	4322      	orrs	r2, r4
100105e0:	03d2      	lsls	r2, r2, #15
100105e2:	4310      	orrs	r0, r2
100105e4:	3320      	adds	r3, #32
100105e6:	b282      	uxth	r2, r0
100105e8:	9301      	str	r3, [sp, #4]
100105ea:	4c72      	ldr	r4, [pc, #456]	; (100107b4 <internal_at_ble_service_define+0x374>)
100105ec:	1c30      	adds	r0, r6, #0
100105ee:	9904      	ldr	r1, [sp, #16]
100105f0:	2302      	movs	r3, #2
100105f2:	47a0      	blx	r4
100105f4:	1e04      	subs	r4, r0, #0
100105f6:	d000      	beq.n	100105fa <internal_at_ble_service_define+0x1ba>
100105f8:	e0fd      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
100105fa:	2101      	movs	r1, #1
100105fc:	882b      	ldrh	r3, [r5, #0]
100105fe:	420b      	tst	r3, r1
10010600:	d011      	beq.n	10010626 <internal_at_ble_service_define+0x1e6>
10010602:	7fa8      	ldrb	r0, [r5, #30]
10010604:	4b6f      	ldr	r3, [pc, #444]	; (100107c4 <internal_at_ble_service_define+0x384>)
10010606:	2200      	movs	r2, #0
10010608:	4798      	blx	r3
1001060a:	4b70      	ldr	r3, [pc, #448]	; (100107cc <internal_at_ble_service_define+0x38c>)
1001060c:	1c02      	adds	r2, r0, #0
1001060e:	9300      	str	r3, [sp, #0]
10010610:	1c2b      	adds	r3, r5, #0
10010612:	3324      	adds	r3, #36	; 0x24
10010614:	9301      	str	r3, [sp, #4]
10010616:	4c67      	ldr	r4, [pc, #412]	; (100107b4 <internal_at_ble_service_define+0x374>)
10010618:	1c30      	adds	r0, r6, #0
1001061a:	496d      	ldr	r1, [pc, #436]	; (100107d0 <internal_at_ble_service_define+0x390>)
1001061c:	2302      	movs	r3, #2
1001061e:	47a0      	blx	r4
10010620:	1e04      	subs	r4, r0, #0
10010622:	d000      	beq.n	10010626 <internal_at_ble_service_define+0x1e6>
10010624:	e0e7      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
10010626:	2330      	movs	r3, #48	; 0x30
10010628:	882a      	ldrh	r2, [r5, #0]
1001062a:	421a      	tst	r2, r3
1001062c:	d012      	beq.n	10010654 <internal_at_ble_service_define+0x214>
1001062e:	2101      	movs	r1, #1
10010630:	7f68      	ldrb	r0, [r5, #29]
10010632:	1c0a      	adds	r2, r1, #0
10010634:	4b63      	ldr	r3, [pc, #396]	; (100107c4 <internal_at_ble_service_define+0x384>)
10010636:	4798      	blx	r3
10010638:	4b66      	ldr	r3, [pc, #408]	; (100107d4 <internal_at_ble_service_define+0x394>)
1001063a:	1c02      	adds	r2, r0, #0
1001063c:	9300      	str	r3, [sp, #0]
1001063e:	1c2b      	adds	r3, r5, #0
10010640:	3322      	adds	r3, #34	; 0x22
10010642:	9301      	str	r3, [sp, #4]
10010644:	4c5b      	ldr	r4, [pc, #364]	; (100107b4 <internal_at_ble_service_define+0x374>)
10010646:	1c30      	adds	r0, r6, #0
10010648:	4961      	ldr	r1, [pc, #388]	; (100107d0 <internal_at_ble_service_define+0x390>)
1001064a:	2302      	movs	r3, #2
1001064c:	47a0      	blx	r4
1001064e:	1e04      	subs	r4, r0, #0
10010650:	d000      	beq.n	10010654 <internal_at_ble_service_define+0x214>
10010652:	e0d0      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
10010654:	69ab      	ldr	r3, [r5, #24]
10010656:	2b00      	cmp	r3, #0
10010658:	d00e      	beq.n	10010678 <internal_at_ble_service_define+0x238>
1001065a:	4b5f      	ldr	r3, [pc, #380]	; (100107d8 <internal_at_ble_service_define+0x398>)
1001065c:	aa06      	add	r2, sp, #24
1001065e:	9300      	str	r3, [sp, #0]
10010660:	230e      	movs	r3, #14
10010662:	189b      	adds	r3, r3, r2
10010664:	9301      	str	r3, [sp, #4]
10010666:	4c53      	ldr	r4, [pc, #332]	; (100107b4 <internal_at_ble_service_define+0x374>)
10010668:	1c30      	adds	r0, r6, #0
1001066a:	2107      	movs	r1, #7
1001066c:	2201      	movs	r2, #1
1001066e:	2302      	movs	r3, #2
10010670:	47a0      	blx	r4
10010672:	1e04      	subs	r4, r0, #0
10010674:	d000      	beq.n	10010678 <internal_at_ble_service_define+0x238>
10010676:	e0be      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
10010678:	9b02      	ldr	r3, [sp, #8]
1001067a:	353c      	adds	r5, #60	; 0x3c
1001067c:	3301      	adds	r3, #1
1001067e:	9302      	str	r3, [sp, #8]
10010680:	e73a      	b.n	100104f8 <internal_at_ble_service_define+0xb8>
10010682:	1c30      	adds	r0, r6, #0
10010684:	4b55      	ldr	r3, [pc, #340]	; (100107dc <internal_at_ble_service_define+0x39c>)
10010686:	4798      	blx	r3
10010688:	1e04      	subs	r4, r0, #0
1001068a:	d000      	beq.n	1001068e <internal_at_ble_service_define+0x24e>
1001068c:	e0b3      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
1001068e:	8833      	ldrh	r3, [r6, #0]
10010690:	9a05      	ldr	r2, [sp, #20]
10010692:	8013      	strh	r3, [r2, #0]
10010694:	8836      	ldrh	r6, [r6, #0]
10010696:	9b06      	ldr	r3, [sp, #24]
10010698:	9a03      	ldr	r2, [sp, #12]
1001069a:	18f6      	adds	r6, r6, r3
1001069c:	b2b3      	uxth	r3, r6
1001069e:	9302      	str	r3, [sp, #8]
100106a0:	233c      	movs	r3, #60	; 0x3c
100106a2:	4353      	muls	r3, r2
100106a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
100106a6:	3314      	adds	r3, #20
100106a8:	18d3      	adds	r3, r2, r3
100106aa:	9304      	str	r3, [sp, #16]
100106ac:	9b04      	ldr	r3, [sp, #16]
100106ae:	429f      	cmp	r7, r3
100106b0:	d100      	bne.n	100106b4 <internal_at_ble_service_define+0x274>
100106b2:	e0a0      	b.n	100107f6 <internal_at_ble_service_define+0x3b6>
100106b4:	9b02      	ldr	r3, [sp, #8]
100106b6:	1c9d      	adds	r5, r3, #2
100106b8:	1c3b      	adds	r3, r7, #0
100106ba:	b2ad      	uxth	r5, r5
100106bc:	3b14      	subs	r3, #20
100106be:	801d      	strh	r5, [r3, #0]
100106c0:	9303      	str	r3, [sp, #12]
100106c2:	893b      	ldrh	r3, [r7, #8]
100106c4:	2b00      	cmp	r3, #0
100106c6:	d108      	bne.n	100106da <internal_at_ble_service_define+0x29a>
100106c8:	23c0      	movs	r3, #192	; 0xc0
100106ca:	883a      	ldrh	r2, [r7, #0]
100106cc:	005b      	lsls	r3, r3, #1
100106ce:	421a      	tst	r2, r3
100106d0:	d026      	beq.n	10010720 <internal_at_ble_service_define+0x2e0>
100106d2:	9e02      	ldr	r6, [sp, #8]
100106d4:	3603      	adds	r6, #3
100106d6:	b2b5      	uxth	r5, r6
100106d8:	e022      	b.n	10010720 <internal_at_ble_service_define+0x2e0>
100106da:	2103      	movs	r1, #3
100106dc:	7b3b      	ldrb	r3, [r7, #12]
100106de:	4019      	ands	r1, r3
100106e0:	3903      	subs	r1, #3
100106e2:	424a      	negs	r2, r1
100106e4:	414a      	adcs	r2, r1
100106e6:	0759      	lsls	r1, r3, #29
100106e8:	0fc9      	lsrs	r1, r1, #31
100106ea:	4311      	orrs	r1, r2
100106ec:	03c9      	lsls	r1, r1, #15
100106ee:	897a      	ldrh	r2, [r7, #10]
100106f0:	2900      	cmp	r1, #0
100106f2:	d007      	beq.n	10010704 <internal_at_ble_service_define+0x2c4>
100106f4:	6879      	ldr	r1, [r7, #4]
100106f6:	2900      	cmp	r1, #0
100106f8:	d100      	bne.n	100106fc <internal_at_ble_service_define+0x2bc>
100106fa:	4939      	ldr	r1, [pc, #228]	; (100107e0 <internal_at_ble_service_define+0x3a0>)
100106fc:	1c28      	adds	r0, r5, #0
100106fe:	4e39      	ldr	r6, [pc, #228]	; (100107e4 <internal_at_ble_service_define+0x3a4>)
10010700:	47b0      	blx	r6
10010702:	e00a      	b.n	1001071a <internal_at_ble_service_define+0x2da>
10010704:	1c28      	adds	r0, r5, #0
10010706:	4e37      	ldr	r6, [pc, #220]	; (100107e4 <internal_at_ble_service_define+0x3a4>)
10010708:	47b0      	blx	r6
1001070a:	2800      	cmp	r0, #0
1001070c:	d172      	bne.n	100107f4 <internal_at_ble_service_define+0x3b4>
1001070e:	9b03      	ldr	r3, [sp, #12]
10010710:	8939      	ldrh	r1, [r7, #8]
10010712:	8818      	ldrh	r0, [r3, #0]
10010714:	687a      	ldr	r2, [r7, #4]
10010716:	4b34      	ldr	r3, [pc, #208]	; (100107e8 <internal_at_ble_service_define+0x3a8>)
10010718:	4798      	blx	r3
1001071a:	2800      	cmp	r0, #0
1001071c:	d0d4      	beq.n	100106c8 <internal_at_ble_service_define+0x288>
1001071e:	e069      	b.n	100107f4 <internal_at_ble_service_define+0x3b4>
10010720:	8abb      	ldrh	r3, [r7, #20]
10010722:	2b00      	cmp	r3, #0
10010724:	d00a      	beq.n	1001073c <internal_at_ble_service_define+0x2fc>
10010726:	3501      	adds	r5, #1
10010728:	b2ad      	uxth	r5, r5
1001072a:	843d      	strh	r5, [r7, #32]
1001072c:	7f39      	ldrb	r1, [r7, #28]
1001072e:	8afb      	ldrh	r3, [r7, #22]
10010730:	1c28      	adds	r0, r5, #0
10010732:	693a      	ldr	r2, [r7, #16]
10010734:	4e2d      	ldr	r6, [pc, #180]	; (100107ec <internal_at_ble_service_define+0x3ac>)
10010736:	47b0      	blx	r6
10010738:	2800      	cmp	r0, #0
1001073a:	d15b      	bne.n	100107f4 <internal_at_ble_service_define+0x3b4>
1001073c:	883b      	ldrh	r3, [r7, #0]
1001073e:	07db      	lsls	r3, r3, #31
10010740:	d50d      	bpl.n	1001075e <internal_at_ble_service_define+0x31e>
10010742:	2200      	movs	r2, #0
10010744:	3501      	adds	r5, #1
10010746:	b2ad      	uxth	r5, r5
10010748:	a909      	add	r1, sp, #36	; 0x24
1001074a:	84bd      	strh	r5, [r7, #36]	; 0x24
1001074c:	7fbb      	ldrb	r3, [r7, #30]
1001074e:	1c28      	adds	r0, r5, #0
10010750:	700a      	strb	r2, [r1, #0]
10010752:	704a      	strb	r2, [r1, #1]
10010754:	4e23      	ldr	r6, [pc, #140]	; (100107e4 <internal_at_ble_service_define+0x3a4>)
10010756:	3202      	adds	r2, #2
10010758:	47b0      	blx	r6
1001075a:	2800      	cmp	r0, #0
1001075c:	d14a      	bne.n	100107f4 <internal_at_ble_service_define+0x3b4>
1001075e:	2330      	movs	r3, #48	; 0x30
10010760:	883a      	ldrh	r2, [r7, #0]
10010762:	421a      	tst	r2, r3
10010764:	d00d      	beq.n	10010782 <internal_at_ble_service_define+0x342>
10010766:	2200      	movs	r2, #0
10010768:	3501      	adds	r5, #1
1001076a:	b2ad      	uxth	r5, r5
1001076c:	a909      	add	r1, sp, #36	; 0x24
1001076e:	847d      	strh	r5, [r7, #34]	; 0x22
10010770:	7f7b      	ldrb	r3, [r7, #29]
10010772:	1c28      	adds	r0, r5, #0
10010774:	700a      	strb	r2, [r1, #0]
10010776:	704a      	strb	r2, [r1, #1]
10010778:	4e1a      	ldr	r6, [pc, #104]	; (100107e4 <internal_at_ble_service_define+0x3a4>)
1001077a:	3202      	adds	r2, #2
1001077c:	47b0      	blx	r6
1001077e:	2800      	cmp	r0, #0
10010780:	d138      	bne.n	100107f4 <internal_at_ble_service_define+0x3b4>
10010782:	69b9      	ldr	r1, [r7, #24]
10010784:	2900      	cmp	r1, #0
10010786:	d006      	beq.n	10010796 <internal_at_ble_service_define+0x356>
10010788:	3501      	adds	r5, #1
1001078a:	b2ad      	uxth	r5, r5
1001078c:	1c28      	adds	r0, r5, #0
1001078e:	4b18      	ldr	r3, [pc, #96]	; (100107f0 <internal_at_ble_service_define+0x3b0>)
10010790:	4798      	blx	r3
10010792:	2800      	cmp	r0, #0
10010794:	d12e      	bne.n	100107f4 <internal_at_ble_service_define+0x3b4>
10010796:	373c      	adds	r7, #60	; 0x3c
10010798:	9502      	str	r5, [sp, #8]
1001079a:	e787      	b.n	100106ac <internal_at_ble_service_define+0x26c>
1001079c:	10018b48 	.word	0x10018b48
100107a0:	10019a40 	.word	0x10019a40
100107a4:	100148f1 	.word	0x100148f1
100107a8:	10010175 	.word	0x10010175
100107ac:	100148df 	.word	0x100148df
100107b0:	10016e9f 	.word	0x10016e9f
100107b4:	10012601 	.word	0x10012601
100107b8:	10016ea1 	.word	0x10016ea1
100107bc:	10010241 	.word	0x10010241
100107c0:	10016e9d 	.word	0x10016e9d
100107c4:	100101e9 	.word	0x100101e9
100107c8:	10016e99 	.word	0x10016e99
100107cc:	10016e9b 	.word	0x10016e9b
100107d0:	00008002 	.word	0x00008002
100107d4:	10016e95 	.word	0x10016e95
100107d8:	10016e97 	.word	0x10016e97
100107dc:	100124f5 	.word	0x100124f5
100107e0:	10018b34 	.word	0x10018b34
100107e4:	10010309 	.word	0x10010309
100107e8:	10012671 	.word	0x10012671
100107ec:	100103c1 	.word	0x100103c1
100107f0:	100102dd 	.word	0x100102dd
100107f4:	1c04      	adds	r4, r0, #0
100107f6:	1c20      	adds	r0, r4, #0
100107f8:	b00b      	add	sp, #44	; 0x2c
100107fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100107fc <initi_gatt_server_module>:
100107fc:	2300      	movs	r3, #0
100107fe:	4a07      	ldr	r2, [pc, #28]	; (1001081c <initi_gatt_server_module+0x20>)
10010800:	7013      	strb	r3, [r2, #0]
10010802:	4a07      	ldr	r2, [pc, #28]	; (10010820 <initi_gatt_server_module+0x24>)
10010804:	6013      	str	r3, [r2, #0]
10010806:	4a07      	ldr	r2, [pc, #28]	; (10010824 <initi_gatt_server_module+0x28>)
10010808:	6013      	str	r3, [r2, #0]
1001080a:	4a07      	ldr	r2, [pc, #28]	; (10010828 <initi_gatt_server_module+0x2c>)
1001080c:	6013      	str	r3, [r2, #0]
1001080e:	4a07      	ldr	r2, [pc, #28]	; (1001082c <initi_gatt_server_module+0x30>)
10010810:	6013      	str	r3, [r2, #0]
10010812:	4a07      	ldr	r2, [pc, #28]	; (10010830 <initi_gatt_server_module+0x34>)
10010814:	6013      	str	r3, [r2, #0]
10010816:	4a07      	ldr	r2, [pc, #28]	; (10010834 <initi_gatt_server_module+0x38>)
10010818:	6013      	str	r3, [r2, #0]
1001081a:	4770      	bx	lr
1001081c:	10018b34 	.word	0x10018b34
10010820:	10018b44 	.word	0x10018b44
10010824:	10018b40 	.word	0x10018b40
10010828:	10018b30 	.word	0x10018b30
1001082c:	10018b3c 	.word	0x10018b3c
10010830:	10018b38 	.word	0x10018b38
10010834:	10018b48 	.word	0x10018b48

10010838 <db_init>:
10010838:	4b0a      	ldr	r3, [pc, #40]	; (10010864 <db_init+0x2c>)
1001083a:	4a0b      	ldr	r2, [pc, #44]	; (10010868 <db_init+0x30>)
1001083c:	6018      	str	r0, [r3, #0]
1001083e:	084b      	lsrs	r3, r1, #1
10010840:	6013      	str	r3, [r2, #0]
10010842:	4a0a      	ldr	r2, [pc, #40]	; (1001086c <db_init+0x34>)
10010844:	18c3      	adds	r3, r0, r3
10010846:	6013      	str	r3, [r2, #0]
10010848:	4a09      	ldr	r2, [pc, #36]	; (10010870 <db_init+0x38>)
1001084a:	1841      	adds	r1, r0, r1
1001084c:	6013      	str	r3, [r2, #0]
1001084e:	2303      	movs	r3, #3
10010850:	2200      	movs	r2, #0
10010852:	3103      	adds	r1, #3
10010854:	4399      	bics	r1, r3
10010856:	4b07      	ldr	r3, [pc, #28]	; (10010874 <db_init+0x3c>)
10010858:	3904      	subs	r1, #4
1001085a:	6019      	str	r1, [r3, #0]
1001085c:	4b06      	ldr	r3, [pc, #24]	; (10010878 <db_init+0x40>)
1001085e:	601a      	str	r2, [r3, #0]
10010860:	4770      	bx	lr
10010862:	46c0      	nop			; (mov r8, r8)
10010864:	10018b48 	.word	0x10018b48
10010868:	10018b44 	.word	0x10018b44
1001086c:	10018b30 	.word	0x10018b30
10010870:	10018b3c 	.word	0x10018b3c
10010874:	10018b38 	.word	0x10018b38
10010878:	10018b40 	.word	0x10018b40

1001087c <at_ble_primary_service_define>:
1001087c:	b530      	push	{r4, r5, lr}
1001087e:	b085      	sub	sp, #20
10010880:	ac08      	add	r4, sp, #32
10010882:	cc20      	ldmia	r4!, {r5}
10010884:	8824      	ldrh	r4, [r4, #0]
10010886:	9500      	str	r5, [sp, #0]
10010888:	9401      	str	r4, [sp, #4]
1001088a:	2401      	movs	r4, #1
1001088c:	9402      	str	r4, [sp, #8]
1001088e:	4c02      	ldr	r4, [pc, #8]	; (10010898 <at_ble_primary_service_define+0x1c>)
10010890:	47a0      	blx	r4
10010892:	b005      	add	sp, #20
10010894:	bd30      	pop	{r4, r5, pc}
10010896:	46c0      	nop			; (mov r8, r8)
10010898:	10010441 	.word	0x10010441

1001089c <at_ble_characteristic_value_set>:
1001089c:	b570      	push	{r4, r5, r6, lr}
1001089e:	4b0b      	ldr	r3, [pc, #44]	; (100108cc <at_ble_characteristic_value_set+0x30>)
100108a0:	1c06      	adds	r6, r0, #0
100108a2:	1c0c      	adds	r4, r1, #0
100108a4:	1c15      	adds	r5, r2, #0
100108a6:	4798      	blx	r3
100108a8:	2800      	cmp	r0, #0
100108aa:	d008      	beq.n	100108be <at_ble_characteristic_value_set+0x22>
100108ac:	6880      	ldr	r0, [r0, #8]
100108ae:	2800      	cmp	r0, #0
100108b0:	d005      	beq.n	100108be <at_ble_characteristic_value_set+0x22>
100108b2:	1c21      	adds	r1, r4, #0
100108b4:	1c2a      	adds	r2, r5, #0
100108b6:	4b06      	ldr	r3, [pc, #24]	; (100108d0 <at_ble_characteristic_value_set+0x34>)
100108b8:	4798      	blx	r3
100108ba:	2000      	movs	r0, #0
100108bc:	e004      	b.n	100108c8 <at_ble_characteristic_value_set+0x2c>
100108be:	1c30      	adds	r0, r6, #0
100108c0:	1c29      	adds	r1, r5, #0
100108c2:	1c22      	adds	r2, r4, #0
100108c4:	4b03      	ldr	r3, [pc, #12]	; (100108d4 <at_ble_characteristic_value_set+0x38>)
100108c6:	4798      	blx	r3
100108c8:	bd70      	pop	{r4, r5, r6, pc}
100108ca:	46c0      	nop			; (mov r8, r8)
100108cc:	100101a9 	.word	0x100101a9
100108d0:	100148df 	.word	0x100148df
100108d4:	10012671 	.word	0x10012671

100108d8 <at_ble_characteristic_value_get>:
100108d8:	b570      	push	{r4, r5, r6, lr}
100108da:	4b0c      	ldr	r3, [pc, #48]	; (1001090c <at_ble_characteristic_value_get+0x34>)
100108dc:	1c06      	adds	r6, r0, #0
100108de:	1c0c      	adds	r4, r1, #0
100108e0:	1c15      	adds	r5, r2, #0
100108e2:	4798      	blx	r3
100108e4:	2800      	cmp	r0, #0
100108e6:	d00b      	beq.n	10010900 <at_ble_characteristic_value_get+0x28>
100108e8:	6883      	ldr	r3, [r0, #8]
100108ea:	2b00      	cmp	r3, #0
100108ec:	d008      	beq.n	10010900 <at_ble_characteristic_value_get+0x28>
100108ee:	8883      	ldrh	r3, [r0, #4]
100108f0:	802b      	strh	r3, [r5, #0]
100108f2:	8882      	ldrh	r2, [r0, #4]
100108f4:	6881      	ldr	r1, [r0, #8]
100108f6:	4b06      	ldr	r3, [pc, #24]	; (10010910 <at_ble_characteristic_value_get+0x38>)
100108f8:	1c20      	adds	r0, r4, #0
100108fa:	4798      	blx	r3
100108fc:	2000      	movs	r0, #0
100108fe:	e004      	b.n	1001090a <at_ble_characteristic_value_get+0x32>
10010900:	1c30      	adds	r0, r6, #0
10010902:	1c29      	adds	r1, r5, #0
10010904:	1c22      	adds	r2, r4, #0
10010906:	4b03      	ldr	r3, [pc, #12]	; (10010914 <at_ble_characteristic_value_get+0x3c>)
10010908:	4798      	blx	r3
1001090a:	bd70      	pop	{r4, r5, r6, pc}
1001090c:	100101a9 	.word	0x100101a9
10010910:	100148df 	.word	0x100148df
10010914:	100126fd 	.word	0x100126fd

10010918 <at_ble_write_authorize_reply>:
10010918:	b5f0      	push	{r4, r5, r6, r7, lr}
1001091a:	b085      	sub	sp, #20
1001091c:	1c04      	adds	r4, r0, #0
1001091e:	9101      	str	r1, [sp, #4]
10010920:	2900      	cmp	r1, #0
10010922:	d128      	bne.n	10010976 <at_ble_write_authorize_reply+0x5e>
10010924:	8843      	ldrh	r3, [r0, #2]
10010926:	1c27      	adds	r7, r4, #0
10010928:	9300      	str	r3, [sp, #0]
1001092a:	1c18      	adds	r0, r3, #0
1001092c:	4b16      	ldr	r3, [pc, #88]	; (10010988 <at_ble_write_authorize_reply+0x70>)
1001092e:	4798      	blx	r3
10010930:	3708      	adds	r7, #8
10010932:	2800      	cmp	r0, #0
10010934:	d009      	beq.n	1001094a <at_ble_write_authorize_reply+0x32>
10010936:	6880      	ldr	r0, [r0, #8]
10010938:	2800      	cmp	r0, #0
1001093a:	d006      	beq.n	1001094a <at_ble_write_authorize_reply+0x32>
1001093c:	88a3      	ldrh	r3, [r4, #4]
1001093e:	88e2      	ldrh	r2, [r4, #6]
10010940:	18c0      	adds	r0, r0, r3
10010942:	1c39      	adds	r1, r7, #0
10010944:	4b11      	ldr	r3, [pc, #68]	; (1001098c <at_ble_write_authorize_reply+0x74>)
10010946:	4798      	blx	r3
10010948:	e015      	b.n	10010976 <at_ble_write_authorize_reply+0x5e>
1001094a:	ab02      	add	r3, sp, #8
1001094c:	1d9e      	adds	r6, r3, #6
1001094e:	2300      	movs	r3, #0
10010950:	4d0f      	ldr	r5, [pc, #60]	; (10010990 <at_ble_write_authorize_reply+0x78>)
10010952:	8033      	strh	r3, [r6, #0]
10010954:	6829      	ldr	r1, [r5, #0]
10010956:	1c32      	adds	r2, r6, #0
10010958:	4b0e      	ldr	r3, [pc, #56]	; (10010994 <at_ble_write_authorize_reply+0x7c>)
1001095a:	9800      	ldr	r0, [sp, #0]
1001095c:	4798      	blx	r3
1001095e:	682b      	ldr	r3, [r5, #0]
10010960:	88a0      	ldrh	r0, [r4, #4]
10010962:	88e2      	ldrh	r2, [r4, #6]
10010964:	1818      	adds	r0, r3, r0
10010966:	1c39      	adds	r1, r7, #0
10010968:	4b08      	ldr	r3, [pc, #32]	; (1001098c <at_ble_write_authorize_reply+0x74>)
1001096a:	4798      	blx	r3
1001096c:	8860      	ldrh	r0, [r4, #2]
1001096e:	8832      	ldrh	r2, [r6, #0]
10010970:	6829      	ldr	r1, [r5, #0]
10010972:	4b09      	ldr	r3, [pc, #36]	; (10010998 <at_ble_write_authorize_reply+0x80>)
10010974:	4798      	blx	r3
10010976:	8860      	ldrh	r0, [r4, #2]
10010978:	8821      	ldrh	r1, [r4, #0]
1001097a:	9a01      	ldr	r2, [sp, #4]
1001097c:	4b07      	ldr	r3, [pc, #28]	; (1001099c <at_ble_write_authorize_reply+0x84>)
1001097e:	4798      	blx	r3
10010980:	2000      	movs	r0, #0
10010982:	b005      	add	sp, #20
10010984:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010986:	46c0      	nop			; (mov r8, r8)
10010988:	100101a9 	.word	0x100101a9
1001098c:	100148df 	.word	0x100148df
10010990:	100170a4 	.word	0x100170a4
10010994:	100108d9 	.word	0x100108d9
10010998:	1001089d 	.word	0x1001089d
1001099c:	10012175 	.word	0x10012175

100109a0 <gatts_handle_read_req>:
100109a0:	b538      	push	{r3, r4, r5, lr}
100109a2:	1c0c      	adds	r4, r1, #0
100109a4:	4b07      	ldr	r3, [pc, #28]	; (100109c4 <gatts_handle_read_req+0x24>)
100109a6:	4798      	blx	r3
100109a8:	8865      	ldrh	r5, [r4, #2]
100109aa:	4b07      	ldr	r3, [pc, #28]	; (100109c8 <gatts_handle_read_req+0x28>)
100109ac:	1c28      	adds	r0, r5, #0
100109ae:	4798      	blx	r3
100109b0:	7883      	ldrb	r3, [r0, #2]
100109b2:	2026      	movs	r0, #38	; 0x26
100109b4:	07db      	lsls	r3, r3, #31
100109b6:	d404      	bmi.n	100109c2 <gatts_handle_read_req+0x22>
100109b8:	8820      	ldrh	r0, [r4, #0]
100109ba:	1c29      	adds	r1, r5, #0
100109bc:	4b03      	ldr	r3, [pc, #12]	; (100109cc <gatts_handle_read_req+0x2c>)
100109be:	4798      	blx	r3
100109c0:	203b      	movs	r0, #59	; 0x3b
100109c2:	bd38      	pop	{r3, r4, r5, pc}
100109c4:	100120b9 	.word	0x100120b9
100109c8:	100101a9 	.word	0x100101a9
100109cc:	10010411 	.word	0x10010411

100109d0 <gatts_handle_att_info_req>:
100109d0:	b538      	push	{r3, r4, r5, lr}
100109d2:	1c0d      	adds	r5, r1, #0
100109d4:	4b0a      	ldr	r3, [pc, #40]	; (10010a00 <gatts_handle_att_info_req+0x30>)
100109d6:	1c14      	adds	r4, r2, #0
100109d8:	4798      	blx	r3
100109da:	882d      	ldrh	r5, [r5, #0]
100109dc:	4b09      	ldr	r3, [pc, #36]	; (10010a04 <gatts_handle_att_info_req+0x34>)
100109de:	1c28      	adds	r0, r5, #0
100109e0:	4798      	blx	r3
100109e2:	0a22      	lsrs	r2, r4, #8
100109e4:	1c03      	adds	r3, r0, #0
100109e6:	4c08      	ldr	r4, [pc, #32]	; (10010a08 <gatts_handle_att_info_req+0x38>)
100109e8:	b291      	uxth	r1, r2
100109ea:	2800      	cmp	r0, #0
100109ec:	d003      	beq.n	100109f6 <gatts_handle_att_info_req+0x26>
100109ee:	8882      	ldrh	r2, [r0, #4]
100109f0:	2300      	movs	r3, #0
100109f2:	1c28      	adds	r0, r5, #0
100109f4:	e001      	b.n	100109fa <gatts_handle_att_info_req+0x2a>
100109f6:	1c28      	adds	r0, r5, #0
100109f8:	2201      	movs	r2, #1
100109fa:	47a0      	blx	r4
100109fc:	203b      	movs	r0, #59	; 0x3b
100109fe:	bd38      	pop	{r3, r4, r5, pc}
10010a00:	100120fd 	.word	0x100120fd
10010a04:	100101a9 	.word	0x100101a9
10010a08:	100121b9 	.word	0x100121b9

10010a0c <gatts_handle_write_req>:
10010a0c:	b510      	push	{r4, lr}
10010a0e:	1c14      	adds	r4, r2, #0
10010a10:	4b07      	ldr	r3, [pc, #28]	; (10010a30 <gatts_handle_write_req+0x24>)
10010a12:	4798      	blx	r3
10010a14:	4b07      	ldr	r3, [pc, #28]	; (10010a34 <gatts_handle_write_req+0x28>)
10010a16:	8860      	ldrh	r0, [r4, #2]
10010a18:	4798      	blx	r3
10010a1a:	2302      	movs	r3, #2
10010a1c:	7881      	ldrb	r1, [r0, #2]
10010a1e:	2022      	movs	r0, #34	; 0x22
10010a20:	4019      	ands	r1, r3
10010a22:	d103      	bne.n	10010a2c <gatts_handle_write_req+0x20>
10010a24:	1c20      	adds	r0, r4, #0
10010a26:	4b04      	ldr	r3, [pc, #16]	; (10010a38 <gatts_handle_write_req+0x2c>)
10010a28:	4798      	blx	r3
10010a2a:	201f      	movs	r0, #31
10010a2c:	bd10      	pop	{r4, pc}
10010a2e:	46c0      	nop			; (mov r8, r8)
10010a30:	100120c5 	.word	0x100120c5
10010a34:	100101a9 	.word	0x100101a9
10010a38:	10010919 	.word	0x10010919

10010a3c <at_ble_notification_send>:
10010a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a3e:	4d17      	ldr	r5, [pc, #92]	; (10010a9c <at_ble_notification_send+0x60>)
10010a40:	4c17      	ldr	r4, [pc, #92]	; (10010aa0 <at_ble_notification_send+0x64>)
10010a42:	682a      	ldr	r2, [r5, #0]
10010a44:	44a5      	add	sp, r4
10010a46:	23d2      	movs	r3, #210	; 0xd2
10010a48:	2a04      	cmp	r2, #4
10010a4a:	d822      	bhi.n	10010a92 <at_ble_notification_send+0x56>
10010a4c:	1c06      	adds	r6, r0, #0
10010a4e:	4b15      	ldr	r3, [pc, #84]	; (10010aa4 <at_ble_notification_send+0x68>)
10010a50:	1c08      	adds	r0, r1, #0
10010a52:	1c0c      	adds	r4, r1, #0
10010a54:	4798      	blx	r3
10010a56:	2800      	cmp	r0, #0
10010a58:	d008      	beq.n	10010a6c <at_ble_notification_send+0x30>
10010a5a:	6883      	ldr	r3, [r0, #8]
10010a5c:	2b00      	cmp	r3, #0
10010a5e:	d005      	beq.n	10010a6c <at_ble_notification_send+0x30>
10010a60:	8882      	ldrh	r2, [r0, #4]
10010a62:	1c21      	adds	r1, r4, #0
10010a64:	9200      	str	r2, [sp, #0]
10010a66:	2012      	movs	r0, #18
10010a68:	1c32      	adds	r2, r6, #0
10010a6a:	e00c      	b.n	10010a86 <at_ble_notification_send+0x4a>
10010a6c:	270e      	movs	r7, #14
10010a6e:	446f      	add	r7, sp
10010a70:	1c39      	adds	r1, r7, #0
10010a72:	aa04      	add	r2, sp, #16
10010a74:	4b0c      	ldr	r3, [pc, #48]	; (10010aa8 <at_ble_notification_send+0x6c>)
10010a76:	1c20      	adds	r0, r4, #0
10010a78:	4798      	blx	r3
10010a7a:	2012      	movs	r0, #18
10010a7c:	1c21      	adds	r1, r4, #0
10010a7e:	1c32      	adds	r2, r6, #0
10010a80:	883b      	ldrh	r3, [r7, #0]
10010a82:	9300      	str	r3, [sp, #0]
10010a84:	ab04      	add	r3, sp, #16
10010a86:	4c09      	ldr	r4, [pc, #36]	; (10010aac <at_ble_notification_send+0x70>)
10010a88:	47a0      	blx	r4
10010a8a:	682b      	ldr	r3, [r5, #0]
10010a8c:	3301      	adds	r3, #1
10010a8e:	602b      	str	r3, [r5, #0]
10010a90:	2300      	movs	r3, #0
10010a92:	1c18      	adds	r0, r3, #0
10010a94:	2385      	movs	r3, #133	; 0x85
10010a96:	009b      	lsls	r3, r3, #2
10010a98:	449d      	add	sp, r3
10010a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a9c:	10018bd4 	.word	0x10018bd4
10010aa0:	fffffdec 	.word	0xfffffdec
10010aa4:	100101a9 	.word	0x100101a9
10010aa8:	100126fd 	.word	0x100126fd
10010aac:	10012201 	.word	0x10012201

10010ab0 <init_l2cc_task_module>:
10010ab0:	220a      	movs	r2, #10
10010ab2:	4b01      	ldr	r3, [pc, #4]	; (10010ab8 <init_l2cc_task_module+0x8>)
10010ab4:	701a      	strb	r2, [r3, #0]
10010ab6:	4770      	bx	lr
10010ab8:	100170a0 	.word	0x100170a0

10010abc <l2cc_data_send_rsp_handler>:
10010abc:	b510      	push	{r4, lr}
10010abe:	7802      	ldrb	r2, [r0, #0]
10010ac0:	700a      	strb	r2, [r1, #0]
10010ac2:	7883      	ldrb	r3, [r0, #2]
10010ac4:	7844      	ldrb	r4, [r0, #1]
10010ac6:	021b      	lsls	r3, r3, #8
10010ac8:	4323      	orrs	r3, r4
10010aca:	804b      	strh	r3, [r1, #2]
10010acc:	7903      	ldrb	r3, [r0, #4]
10010ace:	78c0      	ldrb	r0, [r0, #3]
10010ad0:	021b      	lsls	r3, r3, #8
10010ad2:	4303      	orrs	r3, r0
10010ad4:	808b      	strh	r3, [r1, #4]
10010ad6:	2a00      	cmp	r2, #0
10010ad8:	d103      	bne.n	10010ae2 <l2cc_data_send_rsp_handler+0x26>
10010ada:	4a02      	ldr	r2, [pc, #8]	; (10010ae4 <l2cc_data_send_rsp_handler+0x28>)
10010adc:	7813      	ldrb	r3, [r2, #0]
10010ade:	3301      	adds	r3, #1
10010ae0:	7013      	strb	r3, [r2, #0]
10010ae2:	bd10      	pop	{r4, pc}
10010ae4:	100170a0 	.word	0x100170a0

10010ae8 <l2cc_data_received_handler>:
10010ae8:	b508      	push	{r3, lr}
10010aea:	1c03      	adds	r3, r0, #0
10010aec:	7842      	ldrb	r2, [r0, #1]
10010aee:	7800      	ldrb	r0, [r0, #0]
10010af0:	0212      	lsls	r2, r2, #8
10010af2:	4302      	orrs	r2, r0
10010af4:	800a      	strh	r2, [r1, #0]
10010af6:	78da      	ldrb	r2, [r3, #3]
10010af8:	7898      	ldrb	r0, [r3, #2]
10010afa:	0212      	lsls	r2, r2, #8
10010afc:	4302      	orrs	r2, r0
10010afe:	804a      	strh	r2, [r1, #2]
10010b00:	795a      	ldrb	r2, [r3, #5]
10010b02:	7918      	ldrb	r0, [r3, #4]
10010b04:	0212      	lsls	r2, r2, #8
10010b06:	4302      	orrs	r2, r0
10010b08:	808a      	strh	r2, [r1, #4]
10010b0a:	1d88      	adds	r0, r1, #6
10010b0c:	1d99      	adds	r1, r3, #6
10010b0e:	4b01      	ldr	r3, [pc, #4]	; (10010b14 <l2cc_data_received_handler+0x2c>)
10010b10:	4798      	blx	r3
10010b12:	bd08      	pop	{r3, pc}
10010b14:	100148df 	.word	0x100148df

10010b18 <at_ble_authenticate>:
10010b18:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b1a:	1c0c      	adds	r4, r1, #0
10010b1c:	211f      	movs	r1, #31
10010b1e:	b08b      	sub	sp, #44	; 0x2c
10010b20:	9307      	str	r3, [sp, #28]
10010b22:	ab02      	add	r3, sp, #8
10010b24:	18c9      	adds	r1, r1, r3
10010b26:	230f      	movs	r3, #15
10010b28:	700b      	strb	r3, [r1, #0]
10010b2a:	4b40      	ldr	r3, [pc, #256]	; (10010c2c <at_ble_authenticate+0x114>)
10010b2c:	1c05      	adds	r5, r0, #0
10010b2e:	1c16      	adds	r6, r2, #0
10010b30:	4798      	blx	r3
10010b32:	1c07      	adds	r7, r0, #0
10010b34:	2001      	movs	r0, #1
10010b36:	2f07      	cmp	r7, #7
10010b38:	d875      	bhi.n	10010c26 <at_ble_authenticate+0x10e>
10010b3a:	2c00      	cmp	r4, #0
10010b3c:	d113      	bne.n	10010b66 <at_ble_authenticate+0x4e>
10010b3e:	2312      	movs	r3, #18
10010b40:	435f      	muls	r7, r3
10010b42:	4b3b      	ldr	r3, [pc, #236]	; (10010c30 <at_ble_authenticate+0x118>)
10010b44:	5cfb      	ldrb	r3, [r7, r3]
10010b46:	4283      	cmp	r3, r0
10010b48:	d001      	beq.n	10010b4e <at_ble_authenticate+0x36>
10010b4a:	20cf      	movs	r0, #207	; 0xcf
10010b4c:	e06b      	b.n	10010c26 <at_ble_authenticate+0x10e>
10010b4e:	9504      	str	r5, [sp, #16]
10010b50:	9400      	str	r4, [sp, #0]
10010b52:	9401      	str	r4, [sp, #4]
10010b54:	9402      	str	r4, [sp, #8]
10010b56:	9403      	str	r4, [sp, #12]
10010b58:	1c20      	adds	r0, r4, #0
10010b5a:	1c21      	adds	r1, r4, #0
10010b5c:	1c22      	adds	r2, r4, #0
10010b5e:	1c23      	adds	r3, r4, #0
10010b60:	4d34      	ldr	r5, [pc, #208]	; (10010c34 <at_ble_authenticate+0x11c>)
10010b62:	47a8      	blx	r5
10010b64:	e05e      	b.n	10010c24 <at_ble_authenticate+0x10c>
10010b66:	7922      	ldrb	r2, [r4, #4]
10010b68:	2a06      	cmp	r2, #6
10010b6a:	d9ee      	bls.n	10010b4a <at_ble_authenticate+0x32>
10010b6c:	7963      	ldrb	r3, [r4, #5]
10010b6e:	2b10      	cmp	r3, #16
10010b70:	d8eb      	bhi.n	10010b4a <at_ble_authenticate+0x32>
10010b72:	429a      	cmp	r2, r3
10010b74:	d8e9      	bhi.n	10010b4a <at_ble_authenticate+0x32>
10010b76:	7a23      	ldrb	r3, [r4, #8]
10010b78:	2b04      	cmp	r3, #4
10010b7a:	d8e6      	bhi.n	10010b4a <at_ble_authenticate+0x32>
10010b7c:	79a3      	ldrb	r3, [r4, #6]
10010b7e:	2b07      	cmp	r3, #7
10010b80:	d8e3      	bhi.n	10010b4a <at_ble_authenticate+0x32>
10010b82:	79e3      	ldrb	r3, [r4, #7]
10010b84:	2b07      	cmp	r3, #7
10010b86:	d8e0      	bhi.n	10010b4a <at_ble_authenticate+0x32>
10010b88:	78a3      	ldrb	r3, [r4, #2]
10010b8a:	2b00      	cmp	r3, #0
10010b8c:	d006      	beq.n	10010b9c <at_ble_authenticate+0x84>
10010b8e:	2e00      	cmp	r6, #0
10010b90:	d0db      	beq.n	10010b4a <at_ble_authenticate+0x32>
10010b92:	4829      	ldr	r0, [pc, #164]	; (10010c38 <at_ble_authenticate+0x120>)
10010b94:	1c31      	adds	r1, r6, #0
10010b96:	221c      	movs	r2, #28
10010b98:	4b28      	ldr	r3, [pc, #160]	; (10010c3c <at_ble_authenticate+0x124>)
10010b9a:	4798      	blx	r3
10010b9c:	9b07      	ldr	r3, [sp, #28]
10010b9e:	2b00      	cmp	r3, #0
10010ba0:	d005      	beq.n	10010bae <at_ble_authenticate+0x96>
10010ba2:	4827      	ldr	r0, [pc, #156]	; (10010c40 <at_ble_authenticate+0x128>)
10010ba4:	1c19      	adds	r1, r3, #0
10010ba6:	309a      	adds	r0, #154	; 0x9a
10010ba8:	2210      	movs	r2, #16
10010baa:	4b24      	ldr	r3, [pc, #144]	; (10010c3c <at_ble_authenticate+0x124>)
10010bac:	4798      	blx	r3
10010bae:	7863      	ldrb	r3, [r4, #1]
10010bb0:	78a2      	ldrb	r2, [r4, #2]
10010bb2:	009b      	lsls	r3, r3, #2
10010bb4:	4313      	orrs	r3, r2
10010bb6:	2212      	movs	r2, #18
10010bb8:	4357      	muls	r7, r2
10010bba:	4a1d      	ldr	r2, [pc, #116]	; (10010c30 <at_ble_authenticate+0x118>)
10010bbc:	b2db      	uxtb	r3, r3
10010bbe:	5cba      	ldrb	r2, [r7, r2]
10010bc0:	2a00      	cmp	r2, #0
10010bc2:	d116      	bne.n	10010bf2 <at_ble_authenticate+0xda>
10010bc4:	79a0      	ldrb	r0, [r4, #6]
10010bc6:	0742      	lsls	r2, r0, #29
10010bc8:	d502      	bpl.n	10010bd0 <at_ble_authenticate+0xb8>
10010bca:	9a07      	ldr	r2, [sp, #28]
10010bcc:	2a00      	cmp	r2, #0
10010bce:	d0bc      	beq.n	10010b4a <at_ble_authenticate+0x32>
10010bd0:	07c2      	lsls	r2, r0, #31
10010bd2:	d501      	bpl.n	10010bd8 <at_ble_authenticate+0xc0>
10010bd4:	2e00      	cmp	r6, #0
10010bd6:	d0b8      	beq.n	10010b4a <at_ble_authenticate+0x32>
10010bd8:	7966      	ldrb	r6, [r4, #5]
10010bda:	7821      	ldrb	r1, [r4, #0]
10010bdc:	78e2      	ldrb	r2, [r4, #3]
10010bde:	9600      	str	r6, [sp, #0]
10010be0:	9001      	str	r0, [sp, #4]
10010be2:	79e0      	ldrb	r0, [r4, #7]
10010be4:	9002      	str	r0, [sp, #8]
10010be6:	7a20      	ldrb	r0, [r4, #8]
10010be8:	4c16      	ldr	r4, [pc, #88]	; (10010c44 <at_ble_authenticate+0x12c>)
10010bea:	9003      	str	r0, [sp, #12]
10010bec:	1c28      	adds	r0, r5, #0
10010bee:	47a0      	blx	r4
10010bf0:	e018      	b.n	10010c24 <at_ble_authenticate+0x10c>
10010bf2:	2a01      	cmp	r2, #1
10010bf4:	d1a9      	bne.n	10010b4a <at_ble_authenticate+0x32>
10010bf6:	79e0      	ldrb	r0, [r4, #7]
10010bf8:	0742      	lsls	r2, r0, #29
10010bfa:	d502      	bpl.n	10010c02 <at_ble_authenticate+0xea>
10010bfc:	9a07      	ldr	r2, [sp, #28]
10010bfe:	2a00      	cmp	r2, #0
10010c00:	d0a3      	beq.n	10010b4a <at_ble_authenticate+0x32>
10010c02:	07c2      	lsls	r2, r0, #31
10010c04:	d501      	bpl.n	10010c0a <at_ble_authenticate+0xf2>
10010c06:	2e00      	cmp	r6, #0
10010c08:	d09f      	beq.n	10010b4a <at_ble_authenticate+0x32>
10010c0a:	7966      	ldrb	r6, [r4, #5]
10010c0c:	7821      	ldrb	r1, [r4, #0]
10010c0e:	78e2      	ldrb	r2, [r4, #3]
10010c10:	9600      	str	r6, [sp, #0]
10010c12:	79a6      	ldrb	r6, [r4, #6]
10010c14:	9002      	str	r0, [sp, #8]
10010c16:	9601      	str	r6, [sp, #4]
10010c18:	7a20      	ldrb	r0, [r4, #8]
10010c1a:	9504      	str	r5, [sp, #16]
10010c1c:	9003      	str	r0, [sp, #12]
10010c1e:	4c05      	ldr	r4, [pc, #20]	; (10010c34 <at_ble_authenticate+0x11c>)
10010c20:	2001      	movs	r0, #1
10010c22:	47a0      	blx	r4
10010c24:	2000      	movs	r0, #0
10010c26:	b00b      	add	sp, #44	; 0x2c
10010c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c2a:	46c0      	nop			; (mov r8, r8)
10010c2c:	10011019 	.word	0x10011019
10010c30:	10019a42 	.word	0x10019a42
10010c34:	10011589 	.word	0x10011589
10010c38:	10019b50 	.word	0x10019b50
10010c3c:	100148df 	.word	0x100148df
10010c40:	10019ad2 	.word	0x10019ad2
10010c44:	10011369 	.word	0x10011369

10010c48 <at_ble_pair_key_reply>:
10010c48:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c4a:	b085      	sub	sp, #20
10010c4c:	1c05      	adds	r5, r0, #0
10010c4e:	1c0c      	adds	r4, r1, #0
10010c50:	1c16      	adds	r6, r2, #0
10010c52:	2100      	movs	r1, #0
10010c54:	4668      	mov	r0, sp
10010c56:	2210      	movs	r2, #16
10010c58:	4b18      	ldr	r3, [pc, #96]	; (10010cbc <at_ble_pair_key_reply+0x74>)
10010c5a:	4798      	blx	r3
10010c5c:	2101      	movs	r1, #1
10010c5e:	2e00      	cmp	r6, #0
10010c60:	d101      	bne.n	10010c66 <at_ble_pair_key_reply+0x1e>
10010c62:	1c31      	adds	r1, r6, #0
10010c64:	466e      	mov	r6, sp
10010c66:	2c00      	cmp	r4, #0
10010c68:	d116      	bne.n	10010c98 <at_ble_pair_key_reply+0x50>
10010c6a:	2701      	movs	r7, #1
10010c6c:	1c23      	adds	r3, r4, #0
10010c6e:	1d70      	adds	r0, r6, #5
10010c70:	3e01      	subs	r6, #1
10010c72:	7802      	ldrb	r2, [r0, #0]
10010c74:	3801      	subs	r0, #1
10010c76:	3a30      	subs	r2, #48	; 0x30
10010c78:	437a      	muls	r2, r7
10010c7a:	189b      	adds	r3, r3, r2
10010c7c:	220a      	movs	r2, #10
10010c7e:	4357      	muls	r7, r2
10010c80:	42b0      	cmp	r0, r6
10010c82:	d1f6      	bne.n	10010c72 <at_ble_pair_key_reply+0x2a>
10010c84:	466a      	mov	r2, sp
10010c86:	4668      	mov	r0, sp
10010c88:	7013      	strb	r3, [r2, #0]
10010c8a:	0a1a      	lsrs	r2, r3, #8
10010c8c:	7042      	strb	r2, [r0, #1]
10010c8e:	0c1a      	lsrs	r2, r3, #16
10010c90:	0e1b      	lsrs	r3, r3, #24
10010c92:	7082      	strb	r2, [r0, #2]
10010c94:	70c3      	strb	r3, [r0, #3]
10010c96:	e009      	b.n	10010cac <at_ble_pair_key_reply+0x64>
10010c98:	20cf      	movs	r0, #207	; 0xcf
10010c9a:	2c01      	cmp	r4, #1
10010c9c:	d10c      	bne.n	10010cb8 <at_ble_pair_key_reply+0x70>
10010c9e:	2300      	movs	r3, #0
10010ca0:	4668      	mov	r0, sp
10010ca2:	5cf2      	ldrb	r2, [r6, r3]
10010ca4:	54c2      	strb	r2, [r0, r3]
10010ca6:	3301      	adds	r3, #1
10010ca8:	2b10      	cmp	r3, #16
10010caa:	d1f9      	bne.n	10010ca0 <at_ble_pair_key_reply+0x58>
10010cac:	2004      	movs	r0, #4
10010cae:	466a      	mov	r2, sp
10010cb0:	1c2b      	adds	r3, r5, #0
10010cb2:	4c03      	ldr	r4, [pc, #12]	; (10010cc0 <at_ble_pair_key_reply+0x78>)
10010cb4:	47a0      	blx	r4
10010cb6:	2000      	movs	r0, #0
10010cb8:	b005      	add	sp, #20
10010cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010cbc:	100148f1 	.word	0x100148f1
10010cc0:	10011605 	.word	0x10011605

10010cc4 <at_ble_send_slave_sec_request>:
10010cc4:	b570      	push	{r4, r5, r6, lr}
10010cc6:	4b0c      	ldr	r3, [pc, #48]	; (10010cf8 <at_ble_send_slave_sec_request+0x34>)
10010cc8:	1c0e      	adds	r6, r1, #0
10010cca:	2100      	movs	r1, #0
10010ccc:	1c05      	adds	r5, r0, #0
10010cce:	1c14      	adds	r4, r2, #0
10010cd0:	4798      	blx	r3
10010cd2:	2301      	movs	r3, #1
10010cd4:	2807      	cmp	r0, #7
10010cd6:	d80d      	bhi.n	10010cf4 <at_ble_send_slave_sec_request+0x30>
10010cd8:	3311      	adds	r3, #17
10010cda:	4358      	muls	r0, r3
10010cdc:	4b07      	ldr	r3, [pc, #28]	; (10010cfc <at_ble_send_slave_sec_request+0x38>)
10010cde:	5cc2      	ldrb	r2, [r0, r3]
10010ce0:	23e0      	movs	r3, #224	; 0xe0
10010ce2:	2a01      	cmp	r2, #1
10010ce4:	d106      	bne.n	10010cf4 <at_ble_send_slave_sec_request+0x30>
10010ce6:	00b1      	lsls	r1, r6, #2
10010ce8:	430c      	orrs	r4, r1
10010cea:	4b05      	ldr	r3, [pc, #20]	; (10010d00 <at_ble_send_slave_sec_request+0x3c>)
10010cec:	b2e1      	uxtb	r1, r4
10010cee:	1c28      	adds	r0, r5, #0
10010cf0:	4798      	blx	r3
10010cf2:	2300      	movs	r3, #0
10010cf4:	1c18      	adds	r0, r3, #0
10010cf6:	bd70      	pop	{r4, r5, r6, pc}
10010cf8:	10011019 	.word	0x10011019
10010cfc:	10019a42 	.word	0x10019a42
10010d00:	10011655 	.word	0x10011655

10010d04 <at_ble_encryption_start>:
10010d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010d06:	23cf      	movs	r3, #207	; 0xcf
10010d08:	2900      	cmp	r1, #0
10010d0a:	d02b      	beq.n	10010d64 <at_ble_encryption_start+0x60>
10010d0c:	2a05      	cmp	r2, #5
10010d0e:	d829      	bhi.n	10010d64 <at_ble_encryption_start+0x60>
10010d10:	2701      	movs	r7, #1
10010d12:	1c3d      	adds	r5, r7, #0
10010d14:	2433      	movs	r4, #51	; 0x33
10010d16:	4095      	lsls	r5, r2
10010d18:	4225      	tst	r5, r4
10010d1a:	d023      	beq.n	10010d64 <at_ble_encryption_start+0x60>
10010d1c:	7e8c      	ldrb	r4, [r1, #26]
10010d1e:	3c07      	subs	r4, #7
10010d20:	2c09      	cmp	r4, #9
10010d22:	d81f      	bhi.n	10010d64 <at_ble_encryption_start+0x60>
10010d24:	4b10      	ldr	r3, [pc, #64]	; (10010d68 <at_ble_encryption_start+0x64>)
10010d26:	1c0c      	adds	r4, r1, #0
10010d28:	2100      	movs	r1, #0
10010d2a:	1c15      	adds	r5, r2, #0
10010d2c:	1c06      	adds	r6, r0, #0
10010d2e:	4798      	blx	r3
10010d30:	1c3b      	adds	r3, r7, #0
10010d32:	2807      	cmp	r0, #7
10010d34:	d816      	bhi.n	10010d64 <at_ble_encryption_start+0x60>
10010d36:	2312      	movs	r3, #18
10010d38:	4358      	muls	r0, r3
10010d3a:	4b0c      	ldr	r3, [pc, #48]	; (10010d6c <at_ble_encryption_start+0x68>)
10010d3c:	5cc7      	ldrb	r7, [r0, r3]
10010d3e:	23e0      	movs	r3, #224	; 0xe0
10010d40:	2f00      	cmp	r7, #0
10010d42:	d10f      	bne.n	10010d64 <at_ble_encryption_start+0x60>
10010d44:	1c21      	adds	r1, r4, #0
10010d46:	221c      	movs	r2, #28
10010d48:	4b09      	ldr	r3, [pc, #36]	; (10010d70 <at_ble_encryption_start+0x6c>)
10010d4a:	480a      	ldr	r0, [pc, #40]	; (10010d74 <at_ble_encryption_start+0x70>)
10010d4c:	4798      	blx	r3
10010d4e:	1c23      	adds	r3, r4, #0
10010d50:	7ea1      	ldrb	r1, [r4, #26]
10010d52:	8a22      	ldrh	r2, [r4, #16]
10010d54:	3312      	adds	r3, #18
10010d56:	9100      	str	r1, [sp, #0]
10010d58:	9501      	str	r5, [sp, #4]
10010d5a:	1c21      	adds	r1, r4, #0
10010d5c:	1c30      	adds	r0, r6, #0
10010d5e:	4c06      	ldr	r4, [pc, #24]	; (10010d78 <at_ble_encryption_start+0x74>)
10010d60:	47a0      	blx	r4
10010d62:	1c3b      	adds	r3, r7, #0
10010d64:	1c18      	adds	r0, r3, #0
10010d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010d68:	10011019 	.word	0x10011019
10010d6c:	10019a42 	.word	0x10019a42
10010d70:	100148df 	.word	0x100148df
10010d74:	10019b50 	.word	0x10019b50
10010d78:	10011695 	.word	0x10011695

10010d7c <at_ble_encryption_request_reply>:
10010d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010d7e:	24cf      	movs	r4, #207	; 0xcf
10010d80:	2b00      	cmp	r3, #0
10010d82:	d011      	beq.n	10010da8 <at_ble_encryption_request_reply+0x2c>
10010d84:	2a00      	cmp	r2, #0
10010d86:	d00a      	beq.n	10010d9e <at_ble_encryption_request_reply+0x22>
10010d88:	2905      	cmp	r1, #5
10010d8a:	d80d      	bhi.n	10010da8 <at_ble_encryption_request_reply+0x2c>
10010d8c:	2501      	movs	r5, #1
10010d8e:	2633      	movs	r6, #51	; 0x33
10010d90:	408d      	lsls	r5, r1
10010d92:	4235      	tst	r5, r6
10010d94:	d008      	beq.n	10010da8 <at_ble_encryption_request_reply+0x2c>
10010d96:	7e9d      	ldrb	r5, [r3, #26]
10010d98:	3d07      	subs	r5, #7
10010d9a:	2d09      	cmp	r5, #9
10010d9c:	d804      	bhi.n	10010da8 <at_ble_encryption_request_reply+0x2c>
10010d9e:	7e9c      	ldrb	r4, [r3, #26]
10010da0:	9400      	str	r4, [sp, #0]
10010da2:	4c02      	ldr	r4, [pc, #8]	; (10010dac <at_ble_encryption_request_reply+0x30>)
10010da4:	47a0      	blx	r4
10010da6:	2400      	movs	r4, #0
10010da8:	1c20      	adds	r0, r4, #0
10010daa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010dac:	10011751 	.word	0x10011751

10010db0 <rx_callback>:
10010db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010db2:	8883      	ldrh	r3, [r0, #4]
10010db4:	1c01      	adds	r1, r0, #0
10010db6:	9301      	str	r3, [sp, #4]
10010db8:	88c5      	ldrh	r5, [r0, #6]
10010dba:	8806      	ldrh	r6, [r0, #0]
10010dbc:	2d00      	cmp	r5, #0
10010dbe:	d10f      	bne.n	10010de0 <rx_callback+0x30>
10010dc0:	1c19      	adds	r1, r3, #0
10010dc2:	1c30      	adds	r0, r6, #0
10010dc4:	4b19      	ldr	r3, [pc, #100]	; (10010e2c <rx_callback+0x7c>)
10010dc6:	1c2a      	adds	r2, r5, #0
10010dc8:	4798      	blx	r3
10010dca:	1e03      	subs	r3, r0, #0
10010dcc:	d105      	bne.n	10010dda <rx_callback+0x2a>
10010dce:	1c30      	adds	r0, r6, #0
10010dd0:	9901      	ldr	r1, [sp, #4]
10010dd2:	1c1a      	adds	r2, r3, #0
10010dd4:	4c16      	ldr	r4, [pc, #88]	; (10010e30 <rx_callback+0x80>)
10010dd6:	47a0      	blx	r4
10010dd8:	e027      	b.n	10010e2a <rx_callback+0x7a>
10010dda:	4b16      	ldr	r3, [pc, #88]	; (10010e34 <rx_callback+0x84>)
10010ddc:	4798      	blx	r3
10010dde:	e024      	b.n	10010e2a <rx_callback+0x7a>
10010de0:	4c15      	ldr	r4, [pc, #84]	; (10010e38 <rx_callback+0x88>)
10010de2:	4a16      	ldr	r2, [pc, #88]	; (10010e3c <rx_callback+0x8c>)
10010de4:	6823      	ldr	r3, [r4, #0]
10010de6:	6812      	ldr	r2, [r2, #0]
10010de8:	18eb      	adds	r3, r5, r3
10010dea:	4293      	cmp	r3, r2
10010dec:	d901      	bls.n	10010df2 <rx_callback+0x42>
10010dee:	2300      	movs	r3, #0
10010df0:	6023      	str	r3, [r4, #0]
10010df2:	4f13      	ldr	r7, [pc, #76]	; (10010e40 <rx_callback+0x90>)
10010df4:	6822      	ldr	r2, [r4, #0]
10010df6:	683b      	ldr	r3, [r7, #0]
10010df8:	3108      	adds	r1, #8
10010dfa:	1898      	adds	r0, r3, r2
10010dfc:	1c2a      	adds	r2, r5, #0
10010dfe:	4b11      	ldr	r3, [pc, #68]	; (10010e44 <rx_callback+0x94>)
10010e00:	4798      	blx	r3
10010e02:	683b      	ldr	r3, [r7, #0]
10010e04:	6822      	ldr	r2, [r4, #0]
10010e06:	1c30      	adds	r0, r6, #0
10010e08:	189a      	adds	r2, r3, r2
10010e0a:	9901      	ldr	r1, [sp, #4]
10010e0c:	4b07      	ldr	r3, [pc, #28]	; (10010e2c <rx_callback+0x7c>)
10010e0e:	4798      	blx	r3
10010e10:	2800      	cmp	r0, #0
10010e12:	d1e2      	bne.n	10010dda <rx_callback+0x2a>
10010e14:	6823      	ldr	r3, [r4, #0]
10010e16:	683a      	ldr	r2, [r7, #0]
10010e18:	1c30      	adds	r0, r6, #0
10010e1a:	18d2      	adds	r2, r2, r3
10010e1c:	9901      	ldr	r1, [sp, #4]
10010e1e:	1c2b      	adds	r3, r5, #0
10010e20:	4e03      	ldr	r6, [pc, #12]	; (10010e30 <rx_callback+0x80>)
10010e22:	47b0      	blx	r6
10010e24:	6823      	ldr	r3, [r4, #0]
10010e26:	18ed      	adds	r5, r5, r3
10010e28:	6025      	str	r5, [r4, #0]
10010e2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010e2c:	1000f445 	.word	0x1000f445
10010e30:	1000f3bd 	.word	0x1000f3bd
10010e34:	1000ee25 	.word	0x1000ee25
10010e38:	10019bac 	.word	0x10019bac
10010e3c:	10018b50 	.word	0x10018b50
10010e40:	10018b4c 	.word	0x10018b4c
10010e44:	100148df 	.word	0x100148df

10010e48 <interface_send>:
10010e48:	b508      	push	{r3, lr}
10010e4a:	4b02      	ldr	r3, [pc, #8]	; (10010e54 <interface_send+0xc>)
10010e4c:	4798      	blx	r3
10010e4e:	2000      	movs	r0, #0
10010e50:	bd08      	pop	{r3, pc}
10010e52:	46c0      	nop			; (mov r8, r8)
10010e54:	1000eb1d 	.word	0x1000eb1d

10010e58 <interface_init>:
10010e58:	2280      	movs	r2, #128	; 0x80
10010e5a:	b510      	push	{r4, lr}
10010e5c:	2100      	movs	r1, #0
10010e5e:	1c04      	adds	r4, r0, #0
10010e60:	0092      	lsls	r2, r2, #2
10010e62:	4b08      	ldr	r3, [pc, #32]	; (10010e84 <interface_init+0x2c>)
10010e64:	4808      	ldr	r0, [pc, #32]	; (10010e88 <interface_init+0x30>)
10010e66:	4798      	blx	r3
10010e68:	2200      	movs	r2, #0
10010e6a:	4b08      	ldr	r3, [pc, #32]	; (10010e8c <interface_init+0x34>)
10010e6c:	601a      	str	r2, [r3, #0]
10010e6e:	4a08      	ldr	r2, [pc, #32]	; (10010e90 <interface_init+0x38>)
10010e70:	4b08      	ldr	r3, [pc, #32]	; (10010e94 <interface_init+0x3c>)
10010e72:	601a      	str	r2, [r3, #0]
10010e74:	4b08      	ldr	r3, [pc, #32]	; (10010e98 <interface_init+0x40>)
10010e76:	6922      	ldr	r2, [r4, #16]
10010e78:	601a      	str	r2, [r3, #0]
10010e7a:	6962      	ldr	r2, [r4, #20]
10010e7c:	4b07      	ldr	r3, [pc, #28]	; (10010e9c <interface_init+0x44>)
10010e7e:	601a      	str	r2, [r3, #0]
10010e80:	bd10      	pop	{r4, pc}
10010e82:	46c0      	nop			; (mov r8, r8)
10010e84:	100148f1 	.word	0x100148f1
10010e88:	10019db0 	.word	0x10019db0
10010e8c:	10019bac 	.word	0x10019bac
10010e90:	10019bb0 	.word	0x10019bb0
10010e94:	100170a4 	.word	0x100170a4
10010e98:	10018b4c 	.word	0x10018b4c
10010e9c:	10018b50 	.word	0x10018b50

10010ea0 <platform_cmd_cmpl_signal>:
10010ea0:	2201      	movs	r2, #1
10010ea2:	4b01      	ldr	r3, [pc, #4]	; (10010ea8 <platform_cmd_cmpl_signal+0x8>)
10010ea4:	601a      	str	r2, [r3, #0]
10010ea6:	4770      	bx	lr
10010ea8:	10018b54 	.word	0x10018b54

10010eac <platform_cmd_cmpl_wait>:
10010eac:	b510      	push	{r4, lr}
10010eae:	1c04      	adds	r4, r0, #0
10010eb0:	4b07      	ldr	r3, [pc, #28]	; (10010ed0 <platform_cmd_cmpl_wait+0x24>)
10010eb2:	681a      	ldr	r2, [r3, #0]
10010eb4:	2a01      	cmp	r2, #1
10010eb6:	d003      	beq.n	10010ec0 <platform_cmd_cmpl_wait+0x14>
10010eb8:	4b06      	ldr	r3, [pc, #24]	; (10010ed4 <platform_cmd_cmpl_wait+0x28>)
10010eba:	2000      	movs	r0, #0
10010ebc:	4798      	blx	r3
10010ebe:	e7f7      	b.n	10010eb0 <platform_cmd_cmpl_wait+0x4>
10010ec0:	6819      	ldr	r1, [r3, #0]
10010ec2:	2901      	cmp	r1, #1
10010ec4:	d102      	bne.n	10010ecc <platform_cmd_cmpl_wait+0x20>
10010ec6:	2200      	movs	r2, #0
10010ec8:	601a      	str	r2, [r3, #0]
10010eca:	e000      	b.n	10010ece <platform_cmd_cmpl_wait+0x22>
10010ecc:	7022      	strb	r2, [r4, #0]
10010ece:	bd10      	pop	{r4, pc}
10010ed0:	10018b54 	.word	0x10018b54
10010ed4:	1000ebad 	.word	0x1000ebad

10010ed8 <start_timer>:
10010ed8:	4770      	bx	lr

10010eda <stop_timer>:
10010eda:	4770      	bx	lr

10010edc <dbg_le_set_bd_addr_req_handler>:
10010edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010ede:	466b      	mov	r3, sp
10010ee0:	1dde      	adds	r6, r3, #7
10010ee2:	2300      	movs	r3, #0
10010ee4:	7033      	strb	r3, [r6, #0]
10010ee6:	230f      	movs	r3, #15
10010ee8:	4c13      	ldr	r4, [pc, #76]	; (10010f38 <dbg_le_set_bd_addr_req_handler+0x5c>)
10010eea:	2703      	movs	r7, #3
10010eec:	7023      	strb	r3, [r4, #0]
10010eee:	2300      	movs	r3, #0
10010ef0:	70e3      	strb	r3, [r4, #3]
10010ef2:	4b12      	ldr	r3, [pc, #72]	; (10010f3c <dbg_le_set_bd_addr_req_handler+0x60>)
10010ef4:	1c01      	adds	r1, r0, #0
10010ef6:	881a      	ldrh	r2, [r3, #0]
10010ef8:	881b      	ldrh	r3, [r3, #0]
10010efa:	7122      	strb	r2, [r4, #4]
10010efc:	0a1b      	lsrs	r3, r3, #8
10010efe:	2206      	movs	r2, #6
10010f00:	7163      	strb	r3, [r4, #5]
10010f02:	480f      	ldr	r0, [pc, #60]	; (10010f40 <dbg_le_set_bd_addr_req_handler+0x64>)
10010f04:	4b0f      	ldr	r3, [pc, #60]	; (10010f44 <dbg_le_set_bd_addr_req_handler+0x68>)
10010f06:	7067      	strb	r7, [r4, #1]
10010f08:	70a7      	strb	r7, [r4, #2]
10010f0a:	4798      	blx	r3
10010f0c:	4d0e      	ldr	r5, [pc, #56]	; (10010f48 <dbg_le_set_bd_addr_req_handler+0x6c>)
10010f0e:	4b0f      	ldr	r3, [pc, #60]	; (10010f4c <dbg_le_set_bd_addr_req_handler+0x70>)
10010f10:	210e      	movs	r1, #14
10010f12:	802b      	strh	r3, [r5, #0]
10010f14:	2306      	movs	r3, #6
10010f16:	71a3      	strb	r3, [r4, #6]
10010f18:	2300      	movs	r3, #0
10010f1a:	1c20      	adds	r0, r4, #0
10010f1c:	71e3      	strb	r3, [r4, #7]
10010f1e:	4b0c      	ldr	r3, [pc, #48]	; (10010f50 <dbg_le_set_bd_addr_req_handler+0x74>)
10010f20:	80af      	strh	r7, [r5, #4]
10010f22:	4798      	blx	r3
10010f24:	1c30      	adds	r0, r6, #0
10010f26:	4b0b      	ldr	r3, [pc, #44]	; (10010f54 <dbg_le_set_bd_addr_req_handler+0x78>)
10010f28:	4798      	blx	r3
10010f2a:	7833      	ldrb	r3, [r6, #0]
10010f2c:	20e2      	movs	r0, #226	; 0xe2
10010f2e:	2b00      	cmp	r3, #0
10010f30:	d101      	bne.n	10010f36 <dbg_le_set_bd_addr_req_handler+0x5a>
10010f32:	68ab      	ldr	r3, [r5, #8]
10010f34:	7818      	ldrb	r0, [r3, #0]
10010f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010f38:	10019db0 	.word	0x10019db0
10010f3c:	10019a40 	.word	0x10019a40
10010f40:	10019db8 	.word	0x10019db8
10010f44:	100148df 	.word	0x100148df
10010f48:	10019a34 	.word	0x10019a34
10010f4c:	00000329 	.word	0x00000329
10010f50:	10010e49 	.word	0x10010e49
10010f54:	10010ead 	.word	0x10010ead

10010f58 <gapc_get_dev_info_cfm.constprop.1>:
10010f58:	b538      	push	{r3, r4, r5, lr}
10010f5a:	230b      	movs	r3, #11
10010f5c:	4c27      	ldr	r4, [pc, #156]	; (10010ffc <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10010f5e:	7023      	strb	r3, [r4, #0]
10010f60:	3303      	adds	r3, #3
10010f62:	7063      	strb	r3, [r4, #1]
10010f64:	3329      	adds	r3, #41	; 0x29
10010f66:	70a3      	strb	r3, [r4, #2]
10010f68:	4b25      	ldr	r3, [pc, #148]	; (10011000 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10010f6a:	70e1      	strb	r1, [r4, #3]
10010f6c:	881a      	ldrh	r2, [r3, #0]
10010f6e:	881b      	ldrh	r3, [r3, #0]
10010f70:	7122      	strb	r2, [r4, #4]
10010f72:	0a1b      	lsrs	r3, r3, #8
10010f74:	7163      	strb	r3, [r4, #5]
10010f76:	2300      	movs	r3, #0
10010f78:	7220      	strb	r0, [r4, #8]
10010f7a:	7263      	strb	r3, [r4, #9]
10010f7c:	2801      	cmp	r0, #1
10010f7e:	d02b      	beq.n	10010fd8 <gapc_get_dev_info_cfm.constprop.1+0x80>
10010f80:	4298      	cmp	r0, r3
10010f82:	d01b      	beq.n	10010fbc <gapc_get_dev_info_cfm.constprop.1+0x64>
10010f84:	2802      	cmp	r0, #2
10010f86:	d12f      	bne.n	10010fe8 <gapc_get_dev_info_cfm.constprop.1+0x90>
10010f88:	4b1e      	ldr	r3, [pc, #120]	; (10011004 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010f8a:	2112      	movs	r1, #18
10010f8c:	1c1a      	adds	r2, r3, #0
10010f8e:	32ce      	adds	r2, #206	; 0xce
10010f90:	8812      	ldrh	r2, [r2, #0]
10010f92:	72a2      	strb	r2, [r4, #10]
10010f94:	0a12      	lsrs	r2, r2, #8
10010f96:	72e2      	strb	r2, [r4, #11]
10010f98:	1c1a      	adds	r2, r3, #0
10010f9a:	32d0      	adds	r2, #208	; 0xd0
10010f9c:	8812      	ldrh	r2, [r2, #0]
10010f9e:	7322      	strb	r2, [r4, #12]
10010fa0:	0a12      	lsrs	r2, r2, #8
10010fa2:	7362      	strb	r2, [r4, #13]
10010fa4:	1c1a      	adds	r2, r3, #0
10010fa6:	32d2      	adds	r2, #210	; 0xd2
10010fa8:	8812      	ldrh	r2, [r2, #0]
10010faa:	33d4      	adds	r3, #212	; 0xd4
10010fac:	73a2      	strb	r2, [r4, #14]
10010fae:	0a12      	lsrs	r2, r2, #8
10010fb0:	73e2      	strb	r2, [r4, #15]
10010fb2:	881b      	ldrh	r3, [r3, #0]
10010fb4:	7423      	strb	r3, [r4, #16]
10010fb6:	0a1b      	lsrs	r3, r3, #8
10010fb8:	7463      	strb	r3, [r4, #17]
10010fba:	e016      	b.n	10010fea <gapc_get_dev_info_cfm.constprop.1+0x92>
10010fbc:	4b11      	ldr	r3, [pc, #68]	; (10011004 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010fbe:	4912      	ldr	r1, [pc, #72]	; (10011008 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010fc0:	33aa      	adds	r3, #170	; 0xaa
10010fc2:	881d      	ldrh	r5, [r3, #0]
10010fc4:	4811      	ldr	r0, [pc, #68]	; (1001100c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010fc6:	0a2b      	lsrs	r3, r5, #8
10010fc8:	72a5      	strb	r5, [r4, #10]
10010fca:	72e3      	strb	r3, [r4, #11]
10010fcc:	1c2a      	adds	r2, r5, #0
10010fce:	4b10      	ldr	r3, [pc, #64]	; (10011010 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010fd0:	350c      	adds	r5, #12
10010fd2:	4798      	blx	r3
10010fd4:	b2a9      	uxth	r1, r5
10010fd6:	e008      	b.n	10010fea <gapc_get_dev_info_cfm.constprop.1+0x92>
10010fd8:	4b0a      	ldr	r3, [pc, #40]	; (10011004 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010fda:	210c      	movs	r1, #12
10010fdc:	33cc      	adds	r3, #204	; 0xcc
10010fde:	881b      	ldrh	r3, [r3, #0]
10010fe0:	72a3      	strb	r3, [r4, #10]
10010fe2:	0a1b      	lsrs	r3, r3, #8
10010fe4:	72e3      	strb	r3, [r4, #11]
10010fe6:	e000      	b.n	10010fea <gapc_get_dev_info_cfm.constprop.1+0x92>
10010fe8:	210a      	movs	r1, #10
10010fea:	1c0b      	adds	r3, r1, #0
10010fec:	3b08      	subs	r3, #8
10010fee:	71a3      	strb	r3, [r4, #6]
10010ff0:	121b      	asrs	r3, r3, #8
10010ff2:	71e3      	strb	r3, [r4, #7]
10010ff4:	1c20      	adds	r0, r4, #0
10010ff6:	4b07      	ldr	r3, [pc, #28]	; (10011014 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010ff8:	4798      	blx	r3
10010ffa:	bd38      	pop	{r3, r4, r5, pc}
10010ffc:	10019db0 	.word	0x10019db0
10011000:	10019a40 	.word	0x10019a40
10011004:	10019ad2 	.word	0x10019ad2
10011008:	10019b7e 	.word	0x10019b7e
1001100c:	10019dbc 	.word	0x10019dbc
10011010:	100148df 	.word	0x100148df
10011014:	10010e49 	.word	0x10010e49

10011018 <check_ConnData_idx_role>:
10011018:	4b0c      	ldr	r3, [pc, #48]	; (1001104c <check_ConnData_idx_role+0x34>)
1001101a:	b570      	push	{r4, r5, r6, lr}
1001101c:	1c04      	adds	r4, r0, #0
1001101e:	2008      	movs	r0, #8
10011020:	429c      	cmp	r4, r3
10011022:	d011      	beq.n	10011048 <check_ConnData_idx_role+0x30>
10011024:	2300      	movs	r3, #0
10011026:	2212      	movs	r2, #18
10011028:	435a      	muls	r2, r3
1001102a:	4d09      	ldr	r5, [pc, #36]	; (10011050 <check_ConnData_idx_role+0x38>)
1001102c:	b2d8      	uxtb	r0, r3
1001102e:	1956      	adds	r6, r2, r5
10011030:	8976      	ldrh	r6, [r6, #10]
10011032:	42a6      	cmp	r6, r4
10011034:	d104      	bne.n	10011040 <check_ConnData_idx_role+0x28>
10011036:	2900      	cmp	r1, #0
10011038:	d006      	beq.n	10011048 <check_ConnData_idx_role+0x30>
1001103a:	5d53      	ldrb	r3, [r2, r5]
1001103c:	700b      	strb	r3, [r1, #0]
1001103e:	e003      	b.n	10011048 <check_ConnData_idx_role+0x30>
10011040:	3301      	adds	r3, #1
10011042:	2b08      	cmp	r3, #8
10011044:	d1ef      	bne.n	10011026 <check_ConnData_idx_role+0xe>
10011046:	1c18      	adds	r0, r3, #0
10011048:	bd70      	pop	{r4, r5, r6, pc}
1001104a:	46c0      	nop			; (mov r8, r8)
1001104c:	0000ffff 	.word	0x0000ffff
10011050:	10019a42 	.word	0x10019a42

10011054 <check_ConnData_emptyEntry>:
10011054:	2300      	movs	r3, #0
10011056:	2212      	movs	r2, #18
10011058:	435a      	muls	r2, r3
1001105a:	4906      	ldr	r1, [pc, #24]	; (10011074 <check_ConnData_emptyEntry+0x20>)
1001105c:	b2d8      	uxtb	r0, r3
1001105e:	1852      	adds	r2, r2, r1
10011060:	8951      	ldrh	r1, [r2, #10]
10011062:	4a05      	ldr	r2, [pc, #20]	; (10011078 <check_ConnData_emptyEntry+0x24>)
10011064:	4291      	cmp	r1, r2
10011066:	d003      	beq.n	10011070 <check_ConnData_emptyEntry+0x1c>
10011068:	3301      	adds	r3, #1
1001106a:	2b08      	cmp	r3, #8
1001106c:	d1f3      	bne.n	10011056 <check_ConnData_emptyEntry+0x2>
1001106e:	1c18      	adds	r0, r3, #0
10011070:	4770      	bx	lr
10011072:	46c0      	nop			; (mov r8, r8)
10011074:	10019a42 	.word	0x10019a42
10011078:	0000ffff 	.word	0x0000ffff

1001107c <gapc_cmp_evt>:
1001107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001107e:	780b      	ldrb	r3, [r1, #0]
10011080:	1c05      	adds	r5, r0, #0
10011082:	1e58      	subs	r0, r3, #1
10011084:	784e      	ldrb	r6, [r1, #1]
10011086:	280f      	cmp	r0, #15
10011088:	d85a      	bhi.n	10011140 <gapc_cmp_evt+0xc4>
1001108a:	1c14      	adds	r4, r2, #0
1001108c:	f001 fba4 	bl	100127d8 <__gnu_thumb1_case_uqi>
10011090:	5858440a 	.word	0x5858440a
10011094:	4b584444 	.word	0x4b584444
10011098:	0825122d 	.word	0x0825122d
1001109c:	3e395858 	.word	0x3e395858
100110a0:	203b      	movs	r0, #59	; 0x3b
100110a2:	e04e      	b.n	10011142 <gapc_cmp_evt+0xc6>
100110a4:	203b      	movs	r0, #59	; 0x3b
100110a6:	2e00      	cmp	r6, #0
100110a8:	d04b      	beq.n	10011142 <gapc_cmp_evt+0xc6>
100110aa:	0a2d      	lsrs	r5, r5, #8
100110ac:	8015      	strh	r5, [r2, #0]
100110ae:	7096      	strb	r6, [r2, #2]
100110b0:	3835      	subs	r0, #53	; 0x35
100110b2:	e046      	b.n	10011142 <gapc_cmp_evt+0xc6>
100110b4:	466b      	mov	r3, sp
100110b6:	1ddf      	adds	r7, r3, #7
100110b8:	2301      	movs	r3, #1
100110ba:	0a2d      	lsrs	r5, r5, #8
100110bc:	703b      	strb	r3, [r7, #0]
100110be:	1c28      	adds	r0, r5, #0
100110c0:	1c39      	adds	r1, r7, #0
100110c2:	4b20      	ldr	r3, [pc, #128]	; (10011144 <gapc_cmp_evt+0xc8>)
100110c4:	4798      	blx	r3
100110c6:	2807      	cmp	r0, #7
100110c8:	d803      	bhi.n	100110d2 <gapc_cmp_evt+0x56>
100110ca:	783b      	ldrb	r3, [r7, #0]
100110cc:	203b      	movs	r0, #59	; 0x3b
100110ce:	2b00      	cmp	r3, #0
100110d0:	d037      	beq.n	10011142 <gapc_cmp_evt+0xc6>
100110d2:	8065      	strh	r5, [r4, #2]
100110d4:	7126      	strb	r6, [r4, #4]
100110d6:	2009      	movs	r0, #9
100110d8:	e033      	b.n	10011142 <gapc_cmp_evt+0xc6>
100110da:	203b      	movs	r0, #59	; 0x3b
100110dc:	2e00      	cmp	r6, #0
100110de:	d030      	beq.n	10011142 <gapc_cmp_evt+0xc6>
100110e0:	0a2d      	lsrs	r5, r5, #8
100110e2:	8015      	strh	r5, [r2, #0]
100110e4:	7096      	strb	r6, [r2, #2]
100110e6:	382d      	subs	r0, #45	; 0x2d
100110e8:	e02b      	b.n	10011142 <gapc_cmp_evt+0xc6>
100110ea:	203b      	movs	r0, #59	; 0x3b
100110ec:	2e00      	cmp	r6, #0
100110ee:	d028      	beq.n	10011142 <gapc_cmp_evt+0xc6>
100110f0:	2300      	movs	r3, #0
100110f2:	0a2d      	lsrs	r5, r5, #8
100110f4:	8015      	strh	r5, [r2, #0]
100110f6:	7096      	strb	r6, [r2, #2]
100110f8:	8093      	strh	r3, [r2, #4]
100110fa:	80d3      	strh	r3, [r2, #6]
100110fc:	8113      	strh	r3, [r2, #8]
100110fe:	3834      	subs	r0, #52	; 0x34
10011100:	e01f      	b.n	10011142 <gapc_cmp_evt+0xc6>
10011102:	203b      	movs	r0, #59	; 0x3b
10011104:	2e00      	cmp	r6, #0
10011106:	d01c      	beq.n	10011142 <gapc_cmp_evt+0xc6>
10011108:	7216      	strb	r6, [r2, #8]
1001110a:	e003      	b.n	10011114 <gapc_cmp_evt+0x98>
1001110c:	203b      	movs	r0, #59	; 0x3b
1001110e:	2e00      	cmp	r6, #0
10011110:	d017      	beq.n	10011142 <gapc_cmp_evt+0xc6>
10011112:	7116      	strb	r6, [r2, #4]
10011114:	3812      	subs	r0, #18
10011116:	e014      	b.n	10011142 <gapc_cmp_evt+0xc6>
10011118:	203b      	movs	r0, #59	; 0x3b
1001111a:	2e00      	cmp	r6, #0
1001111c:	d011      	beq.n	10011142 <gapc_cmp_evt+0xc6>
1001111e:	7093      	strb	r3, [r2, #2]
10011120:	70d6      	strb	r6, [r2, #3]
10011122:	382a      	subs	r0, #42	; 0x2a
10011124:	e00d      	b.n	10011142 <gapc_cmp_evt+0xc6>
10011126:	203b      	movs	r0, #59	; 0x3b
10011128:	2e00      	cmp	r6, #0
1001112a:	d00a      	beq.n	10011142 <gapc_cmp_evt+0xc6>
1001112c:	0a2d      	lsrs	r5, r5, #8
1001112e:	7016      	strb	r6, [r2, #0]
10011130:	8055      	strh	r5, [r2, #2]
10011132:	1d10      	adds	r0, r2, #4
10011134:	2100      	movs	r1, #0
10011136:	2205      	movs	r2, #5
10011138:	4b03      	ldr	r3, [pc, #12]	; (10011148 <gapc_cmp_evt+0xcc>)
1001113a:	4798      	blx	r3
1001113c:	2012      	movs	r0, #18
1001113e:	e000      	b.n	10011142 <gapc_cmp_evt+0xc6>
10011140:	2000      	movs	r0, #0
10011142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011144:	10011019 	.word	0x10011019
10011148:	100148f1 	.word	0x100148f1

1001114c <gapc_connection_cfm_handler>:
1001114c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001114e:	b085      	sub	sp, #20
10011150:	1c1d      	adds	r5, r3, #0
10011152:	ab0a      	add	r3, sp, #40	; 0x28
10011154:	781b      	ldrb	r3, [r3, #0]
10011156:	9201      	str	r2, [sp, #4]
10011158:	9302      	str	r3, [sp, #8]
1001115a:	ab0b      	add	r3, sp, #44	; 0x2c
1001115c:	781b      	ldrb	r3, [r3, #0]
1001115e:	1c07      	adds	r7, r0, #0
10011160:	9303      	str	r3, [sp, #12]
10011162:	ab0c      	add	r3, sp, #48	; 0x30
10011164:	881a      	ldrh	r2, [r3, #0]
10011166:	2302      	movs	r3, #2
10011168:	1c0e      	adds	r6, r1, #0
1001116a:	4c23      	ldr	r4, [pc, #140]	; (100111f8 <gapc_connection_cfm_handler+0xac>)
1001116c:	1c39      	adds	r1, r7, #0
1001116e:	7023      	strb	r3, [r4, #0]
10011170:	330c      	adds	r3, #12
10011172:	7063      	strb	r3, [r4, #1]
10011174:	70a3      	strb	r3, [r4, #2]
10011176:	4b21      	ldr	r3, [pc, #132]	; (100111fc <gapc_connection_cfm_handler+0xb0>)
10011178:	70e2      	strb	r2, [r4, #3]
1001117a:	881a      	ldrh	r2, [r3, #0]
1001117c:	881b      	ldrh	r3, [r3, #0]
1001117e:	7122      	strb	r2, [r4, #4]
10011180:	0a1b      	lsrs	r3, r3, #8
10011182:	4f1f      	ldr	r7, [pc, #124]	; (10011200 <gapc_connection_cfm_handler+0xb4>)
10011184:	2210      	movs	r2, #16
10011186:	481f      	ldr	r0, [pc, #124]	; (10011204 <gapc_connection_cfm_handler+0xb8>)
10011188:	7163      	strb	r3, [r4, #5]
1001118a:	47b8      	blx	r7
1001118c:	0a33      	lsrs	r3, r6, #8
1001118e:	7626      	strb	r6, [r4, #24]
10011190:	7663      	strb	r3, [r4, #25]
10011192:	9901      	ldr	r1, [sp, #4]
10011194:	0c33      	lsrs	r3, r6, #16
10011196:	2210      	movs	r2, #16
10011198:	0e36      	lsrs	r6, r6, #24
1001119a:	481b      	ldr	r0, [pc, #108]	; (10011208 <gapc_connection_cfm_handler+0xbc>)
1001119c:	76a3      	strb	r3, [r4, #26]
1001119e:	76e6      	strb	r6, [r4, #27]
100111a0:	47b8      	blx	r7
100111a2:	1c23      	adds	r3, r4, #0
100111a4:	332c      	adds	r3, #44	; 0x2c
100111a6:	701d      	strb	r5, [r3, #0]
100111a8:	1c23      	adds	r3, r4, #0
100111aa:	0a2a      	lsrs	r2, r5, #8
100111ac:	332d      	adds	r3, #45	; 0x2d
100111ae:	701a      	strb	r2, [r3, #0]
100111b0:	1c23      	adds	r3, r4, #0
100111b2:	0c2a      	lsrs	r2, r5, #16
100111b4:	332e      	adds	r3, #46	; 0x2e
100111b6:	701a      	strb	r2, [r3, #0]
100111b8:	1c23      	adds	r3, r4, #0
100111ba:	0e2d      	lsrs	r5, r5, #24
100111bc:	332f      	adds	r3, #47	; 0x2f
100111be:	466a      	mov	r2, sp
100111c0:	701d      	strb	r5, [r3, #0]
100111c2:	1c23      	adds	r3, r4, #0
100111c4:	7a12      	ldrb	r2, [r2, #8]
100111c6:	3330      	adds	r3, #48	; 0x30
100111c8:	701a      	strb	r2, [r3, #0]
100111ca:	1c23      	adds	r3, r4, #0
100111cc:	2500      	movs	r5, #0
100111ce:	3331      	adds	r3, #49	; 0x31
100111d0:	466a      	mov	r2, sp
100111d2:	701d      	strb	r5, [r3, #0]
100111d4:	1c23      	adds	r3, r4, #0
100111d6:	7b12      	ldrb	r2, [r2, #12]
100111d8:	3332      	adds	r3, #50	; 0x32
100111da:	701a      	strb	r2, [r3, #0]
100111dc:	1c23      	adds	r3, r4, #0
100111de:	3333      	adds	r3, #51	; 0x33
100111e0:	701d      	strb	r5, [r3, #0]
100111e2:	232c      	movs	r3, #44	; 0x2c
100111e4:	1c20      	adds	r0, r4, #0
100111e6:	71a3      	strb	r3, [r4, #6]
100111e8:	2134      	movs	r1, #52	; 0x34
100111ea:	4b08      	ldr	r3, [pc, #32]	; (1001120c <gapc_connection_cfm_handler+0xc0>)
100111ec:	71e5      	strb	r5, [r4, #7]
100111ee:	4798      	blx	r3
100111f0:	1c28      	adds	r0, r5, #0
100111f2:	b005      	add	sp, #20
100111f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111f6:	46c0      	nop			; (mov r8, r8)
100111f8:	10019db0 	.word	0x10019db0
100111fc:	10019a40 	.word	0x10019a40
10011200:	100148df 	.word	0x100148df
10011204:	10019db8 	.word	0x10019db8
10011208:	10019dcc 	.word	0x10019dcc
1001120c:	10010e49 	.word	0x10010e49

10011210 <gapc_con_req_ind>:
10011210:	b5f0      	push	{r4, r5, r6, r7, lr}
10011212:	7845      	ldrb	r5, [r0, #1]
10011214:	7803      	ldrb	r3, [r0, #0]
10011216:	4c30      	ldr	r4, [pc, #192]	; (100112d8 <gapc_con_req_ind+0xc8>)
10011218:	022d      	lsls	r5, r5, #8
1001121a:	431d      	orrs	r5, r3
1001121c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1001121e:	78c3      	ldrb	r3, [r0, #3]
10011220:	7882      	ldrb	r2, [r0, #2]
10011222:	b08b      	sub	sp, #44	; 0x2c
10011224:	021b      	lsls	r3, r3, #8
10011226:	431a      	orrs	r2, r3
10011228:	466b      	mov	r3, sp
1001122a:	9205      	str	r2, [sp, #20]
1001122c:	8a9b      	ldrh	r3, [r3, #20]
1001122e:	2120      	movs	r1, #32
10011230:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011232:	7943      	ldrb	r3, [r0, #5]
10011234:	7902      	ldrb	r2, [r0, #4]
10011236:	021b      	lsls	r3, r3, #8
10011238:	431a      	orrs	r2, r3
1001123a:	466b      	mov	r3, sp
1001123c:	9206      	str	r2, [sp, #24]
1001123e:	8b1b      	ldrh	r3, [r3, #24]
10011240:	1c06      	adds	r6, r0, #0
10011242:	8623      	strh	r3, [r4, #48]	; 0x30
10011244:	79c3      	ldrb	r3, [r0, #7]
10011246:	7982      	ldrb	r2, [r0, #6]
10011248:	021b      	lsls	r3, r3, #8
1001124a:	431a      	orrs	r2, r3
1001124c:	466b      	mov	r3, sp
1001124e:	9207      	str	r2, [sp, #28]
10011250:	466a      	mov	r2, sp
10011252:	8b9b      	ldrh	r3, [r3, #28]
10011254:	1852      	adds	r2, r2, r1
10011256:	8663      	strh	r3, [r4, #50]	; 0x32
10011258:	7a43      	ldrb	r3, [r0, #9]
1001125a:	1c01      	adds	r1, r0, #0
1001125c:	9308      	str	r3, [sp, #32]
1001125e:	1c23      	adds	r3, r4, #0
10011260:	7812      	ldrb	r2, [r2, #0]
10011262:	3377      	adds	r3, #119	; 0x77
10011264:	3478      	adds	r4, #120	; 0x78
10011266:	701a      	strb	r2, [r3, #0]
10011268:	310a      	adds	r1, #10
1001126a:	2206      	movs	r2, #6
1001126c:	4b1b      	ldr	r3, [pc, #108]	; (100112dc <gapc_con_req_ind+0xcc>)
1001126e:	1c20      	adds	r0, r4, #0
10011270:	4798      	blx	r3
10011272:	7c33      	ldrb	r3, [r6, #16]
10011274:	9309      	str	r3, [sp, #36]	; 0x24
10011276:	4b1a      	ldr	r3, [pc, #104]	; (100112e0 <gapc_con_req_ind+0xd0>)
10011278:	4798      	blx	r3
1001127a:	4e1a      	ldr	r6, [pc, #104]	; (100112e4 <gapc_con_req_ind+0xd4>)
1001127c:	1e07      	subs	r7, r0, #0
1001127e:	2f07      	cmp	r7, #7
10011280:	d81b      	bhi.n	100112ba <gapc_con_req_ind+0xaa>
10011282:	2312      	movs	r3, #18
10011284:	4343      	muls	r3, r0
10011286:	18f0      	adds	r0, r6, r3
10011288:	8145      	strh	r5, [r0, #10]
1001128a:	4669      	mov	r1, sp
1001128c:	2524      	movs	r5, #36	; 0x24
1001128e:	1949      	adds	r1, r1, r5
10011290:	7809      	ldrb	r1, [r1, #0]
10011292:	2206      	movs	r2, #6
10011294:	54f1      	strb	r1, [r6, r3]
10011296:	2120      	movs	r1, #32
10011298:	466b      	mov	r3, sp
1001129a:	185b      	adds	r3, r3, r1
1001129c:	781b      	ldrb	r3, [r3, #0]
1001129e:	1c21      	adds	r1, r4, #0
100112a0:	7043      	strb	r3, [r0, #1]
100112a2:	466b      	mov	r3, sp
100112a4:	8a9b      	ldrh	r3, [r3, #20]
100112a6:	3002      	adds	r0, #2
100112a8:	8143      	strh	r3, [r0, #10]
100112aa:	466b      	mov	r3, sp
100112ac:	8b1b      	ldrh	r3, [r3, #24]
100112ae:	8183      	strh	r3, [r0, #12]
100112b0:	466b      	mov	r3, sp
100112b2:	8b9b      	ldrh	r3, [r3, #28]
100112b4:	81c3      	strh	r3, [r0, #14]
100112b6:	4b09      	ldr	r3, [pc, #36]	; (100112dc <gapc_con_req_ind+0xcc>)
100112b8:	4798      	blx	r3
100112ba:	2112      	movs	r1, #18
100112bc:	2300      	movs	r3, #0
100112be:	434f      	muls	r7, r1
100112c0:	9300      	str	r3, [sp, #0]
100112c2:	9301      	str	r3, [sp, #4]
100112c4:	19f6      	adds	r6, r6, r7
100112c6:	8971      	ldrh	r1, [r6, #10]
100112c8:	4a07      	ldr	r2, [pc, #28]	; (100112e8 <gapc_con_req_ind+0xd8>)
100112ca:	9102      	str	r1, [sp, #8]
100112cc:	1c10      	adds	r0, r2, #0
100112ce:	1c19      	adds	r1, r3, #0
100112d0:	4c06      	ldr	r4, [pc, #24]	; (100112ec <gapc_con_req_ind+0xdc>)
100112d2:	47a0      	blx	r4
100112d4:	b00b      	add	sp, #44	; 0x2c
100112d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112d8:	10019ad2 	.word	0x10019ad2
100112dc:	100148df 	.word	0x100148df
100112e0:	10011055 	.word	0x10011055
100112e4:	10019a42 	.word	0x10019a42
100112e8:	10018b58 	.word	0x10018b58
100112ec:	1001114d 	.word	0x1001114d

100112f0 <gapc_disconnect_cmd_handler>:
100112f0:	2204      	movs	r2, #4
100112f2:	b510      	push	{r4, lr}
100112f4:	4b0c      	ldr	r3, [pc, #48]	; (10011328 <gapc_disconnect_cmd_handler+0x38>)
100112f6:	2400      	movs	r4, #0
100112f8:	701a      	strb	r2, [r3, #0]
100112fa:	320a      	adds	r2, #10
100112fc:	705a      	strb	r2, [r3, #1]
100112fe:	709a      	strb	r2, [r3, #2]
10011300:	4a0a      	ldr	r2, [pc, #40]	; (1001132c <gapc_disconnect_cmd_handler+0x3c>)
10011302:	70d9      	strb	r1, [r3, #3]
10011304:	8811      	ldrh	r1, [r2, #0]
10011306:	8812      	ldrh	r2, [r2, #0]
10011308:	7119      	strb	r1, [r3, #4]
1001130a:	0a12      	lsrs	r2, r2, #8
1001130c:	715a      	strb	r2, [r3, #5]
1001130e:	2201      	movs	r2, #1
10011310:	721a      	strb	r2, [r3, #8]
10011312:	1892      	adds	r2, r2, r2
10011314:	7258      	strb	r0, [r3, #9]
10011316:	719a      	strb	r2, [r3, #6]
10011318:	71dc      	strb	r4, [r3, #7]
1001131a:	1c18      	adds	r0, r3, #0
1001131c:	210a      	movs	r1, #10
1001131e:	4b04      	ldr	r3, [pc, #16]	; (10011330 <gapc_disconnect_cmd_handler+0x40>)
10011320:	4798      	blx	r3
10011322:	1c20      	adds	r0, r4, #0
10011324:	bd10      	pop	{r4, pc}
10011326:	46c0      	nop			; (mov r8, r8)
10011328:	10019db0 	.word	0x10019db0
1001132c:	10019a40 	.word	0x10019a40
10011330:	10010e49 	.word	0x10010e49

10011334 <gapc_disconnect_ind>:
10011334:	1c02      	adds	r2, r0, #0
10011336:	b508      	push	{r3, lr}
10011338:	7843      	ldrb	r3, [r0, #1]
1001133a:	7800      	ldrb	r0, [r0, #0]
1001133c:	021b      	lsls	r3, r3, #8
1001133e:	4318      	orrs	r0, r3
10011340:	8008      	strh	r0, [r1, #0]
10011342:	7893      	ldrb	r3, [r2, #2]
10011344:	708b      	strb	r3, [r1, #2]
10011346:	2100      	movs	r1, #0
10011348:	4b05      	ldr	r3, [pc, #20]	; (10011360 <gapc_disconnect_ind+0x2c>)
1001134a:	4798      	blx	r3
1001134c:	2807      	cmp	r0, #7
1001134e:	d806      	bhi.n	1001135e <gapc_disconnect_ind+0x2a>
10011350:	2312      	movs	r3, #18
10011352:	4358      	muls	r0, r3
10011354:	4b03      	ldr	r3, [pc, #12]	; (10011364 <gapc_disconnect_ind+0x30>)
10011356:	1818      	adds	r0, r3, r0
10011358:	2301      	movs	r3, #1
1001135a:	425b      	negs	r3, r3
1001135c:	8143      	strh	r3, [r0, #10]
1001135e:	bd08      	pop	{r3, pc}
10011360:	10011019 	.word	0x10011019
10011364:	10019a42 	.word	0x10019a42

10011368 <gapc_bond_cmd_handler>:
10011368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001136a:	9300      	str	r3, [sp, #0]
1001136c:	2312      	movs	r3, #18
1001136e:	1c04      	adds	r4, r0, #0
10011370:	a808      	add	r0, sp, #32
10011372:	7807      	ldrb	r7, [r0, #0]
10011374:	a809      	add	r0, sp, #36	; 0x24
10011376:	7806      	ldrb	r6, [r0, #0]
10011378:	a80a      	add	r0, sp, #40	; 0x28
1001137a:	7805      	ldrb	r5, [r0, #0]
1001137c:	a80b      	add	r0, sp, #44	; 0x2c
1001137e:	7800      	ldrb	r0, [r0, #0]
10011380:	9001      	str	r0, [sp, #4]
10011382:	4810      	ldr	r0, [pc, #64]	; (100113c4 <gapc_bond_cmd_handler+0x5c>)
10011384:	7003      	strb	r3, [r0, #0]
10011386:	230e      	movs	r3, #14
10011388:	70c4      	strb	r4, [r0, #3]
1001138a:	4c0f      	ldr	r4, [pc, #60]	; (100113c8 <gapc_bond_cmd_handler+0x60>)
1001138c:	7043      	strb	r3, [r0, #1]
1001138e:	7083      	strb	r3, [r0, #2]
10011390:	8823      	ldrh	r3, [r4, #0]
10011392:	8824      	ldrh	r4, [r4, #0]
10011394:	7103      	strb	r3, [r0, #4]
10011396:	466b      	mov	r3, sp
10011398:	781b      	ldrb	r3, [r3, #0]
1001139a:	0a24      	lsrs	r4, r4, #8
1001139c:	72c3      	strb	r3, [r0, #11]
1001139e:	466b      	mov	r3, sp
100113a0:	791b      	ldrb	r3, [r3, #4]
100113a2:	7144      	strb	r4, [r0, #5]
100113a4:	73c3      	strb	r3, [r0, #15]
100113a6:	2308      	movs	r3, #8
100113a8:	7183      	strb	r3, [r0, #6]
100113aa:	2300      	movs	r3, #0
100113ac:	240a      	movs	r4, #10
100113ae:	7241      	strb	r1, [r0, #9]
100113b0:	71c3      	strb	r3, [r0, #7]
100113b2:	2110      	movs	r1, #16
100113b4:	4b05      	ldr	r3, [pc, #20]	; (100113cc <gapc_bond_cmd_handler+0x64>)
100113b6:	7307      	strb	r7, [r0, #12]
100113b8:	7346      	strb	r6, [r0, #13]
100113ba:	7385      	strb	r5, [r0, #14]
100113bc:	7204      	strb	r4, [r0, #8]
100113be:	7282      	strb	r2, [r0, #10]
100113c0:	4798      	blx	r3
100113c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100113c4:	10019db0 	.word	0x10019db0
100113c8:	10019a40 	.word	0x10019a40
100113cc:	10010e49 	.word	0x10010e49

100113d0 <gapc_bond_ind>:
100113d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100113d2:	780e      	ldrb	r6, [r1, #0]
100113d4:	1c03      	adds	r3, r0, #0
100113d6:	1eb0      	subs	r0, r6, #2
100113d8:	2805      	cmp	r0, #5
100113da:	d85d      	bhi.n	10011498 <gapc_bond_ind+0xc8>
100113dc:	1c15      	adds	r5, r2, #0
100113de:	1c0c      	adds	r4, r1, #0
100113e0:	f001 f9fa 	bl	100127d8 <__gnu_thumb1_case_uqi>
100113e4:	2f5a030d 	.word	0x2f5a030d
100113e8:	4740      	.short	0x4740
100113ea:	2009      	movs	r0, #9
100113ec:	2a00      	cmp	r2, #0
100113ee:	d054      	beq.n	1001149a <gapc_bond_ind+0xca>
100113f0:	0a1b      	lsrs	r3, r3, #8
100113f2:	8053      	strh	r3, [r2, #2]
100113f4:	788b      	ldrb	r3, [r1, #2]
100113f6:	4829      	ldr	r0, [pc, #164]	; (1001149c <gapc_bond_ind+0xcc>)
100113f8:	7113      	strb	r3, [r2, #4]
100113fa:	2100      	movs	r1, #0
100113fc:	e01c      	b.n	10011438 <gapc_bond_ind+0x68>
100113fe:	2009      	movs	r0, #9
10011400:	2a00      	cmp	r2, #0
10011402:	d04a      	beq.n	1001149a <gapc_bond_ind+0xca>
10011404:	4c25      	ldr	r4, [pc, #148]	; (1001149c <gapc_bond_ind+0xcc>)
10011406:	0a1b      	lsrs	r3, r3, #8
10011408:	8053      	strh	r3, [r2, #2]
1001140a:	788b      	ldrb	r3, [r1, #2]
1001140c:	2700      	movs	r7, #0
1001140e:	1c10      	adds	r0, r2, #0
10011410:	1c21      	adds	r1, r4, #0
10011412:	7013      	strb	r3, [r2, #0]
10011414:	4e22      	ldr	r6, [pc, #136]	; (100114a0 <gapc_bond_ind+0xd0>)
10011416:	7117      	strb	r7, [r2, #4]
10011418:	312e      	adds	r1, #46	; 0x2e
1001141a:	2217      	movs	r2, #23
1001141c:	3032      	adds	r0, #50	; 0x32
1001141e:	47b0      	blx	r6
10011420:	1c28      	adds	r0, r5, #0
10011422:	1c21      	adds	r1, r4, #0
10011424:	2210      	movs	r2, #16
10011426:	311e      	adds	r1, #30
10011428:	3022      	adds	r0, #34	; 0x22
1001142a:	47b0      	blx	r6
1001142c:	1ca1      	adds	r1, r4, #2
1001142e:	1da8      	adds	r0, r5, #6
10011430:	221c      	movs	r2, #28
10011432:	47b0      	blx	r6
10011434:	1c20      	adds	r0, r4, #0
10011436:	1c39      	adds	r1, r7, #0
10011438:	2246      	movs	r2, #70	; 0x46
1001143a:	4b1a      	ldr	r3, [pc, #104]	; (100114a4 <gapc_bond_ind+0xd4>)
1001143c:	4798      	blx	r3
1001143e:	2009      	movs	r0, #9
10011440:	e02b      	b.n	1001149a <gapc_bond_ind+0xca>
10011442:	4d16      	ldr	r5, [pc, #88]	; (1001149c <gapc_bond_ind+0xcc>)
10011444:	3102      	adds	r1, #2
10011446:	1c28      	adds	r0, r5, #0
10011448:	2210      	movs	r2, #16
1001144a:	4e15      	ldr	r6, [pc, #84]	; (100114a0 <gapc_bond_ind+0xd0>)
1001144c:	302e      	adds	r0, #46	; 0x2e
1001144e:	47b0      	blx	r6
10011450:	1c28      	adds	r0, r5, #0
10011452:	1c21      	adds	r1, r4, #0
10011454:	303f      	adds	r0, #63	; 0x3f
10011456:	3112      	adds	r1, #18
10011458:	2206      	movs	r2, #6
1001145a:	47b0      	blx	r6
1001145c:	7e23      	ldrb	r3, [r4, #24]
1001145e:	353e      	adds	r5, #62	; 0x3e
10011460:	702b      	strb	r3, [r5, #0]
10011462:	e019      	b.n	10011498 <gapc_bond_ind+0xc8>
10011464:	480d      	ldr	r0, [pc, #52]	; (1001149c <gapc_bond_ind+0xcc>)
10011466:	3102      	adds	r1, #2
10011468:	2210      	movs	r2, #16
1001146a:	4b0d      	ldr	r3, [pc, #52]	; (100114a0 <gapc_bond_ind+0xd0>)
1001146c:	301e      	adds	r0, #30
1001146e:	4798      	blx	r3
10011470:	e012      	b.n	10011498 <gapc_bond_ind+0xc8>
10011472:	4d0a      	ldr	r5, [pc, #40]	; (1001149c <gapc_bond_ind+0xcc>)
10011474:	3102      	adds	r1, #2
10011476:	2210      	movs	r2, #16
10011478:	4e09      	ldr	r6, [pc, #36]	; (100114a0 <gapc_bond_ind+0xd0>)
1001147a:	1ca8      	adds	r0, r5, #2
1001147c:	47b0      	blx	r6
1001147e:	1c28      	adds	r0, r5, #0
10011480:	1c21      	adds	r1, r4, #0
10011482:	7ce3      	ldrb	r3, [r4, #19]
10011484:	7ca2      	ldrb	r2, [r4, #18]
10011486:	021b      	lsls	r3, r3, #8
10011488:	4313      	orrs	r3, r2
1001148a:	3014      	adds	r0, #20
1001148c:	3114      	adds	r1, #20
1001148e:	2208      	movs	r2, #8
10011490:	826b      	strh	r3, [r5, #18]
10011492:	47b0      	blx	r6
10011494:	7f23      	ldrb	r3, [r4, #28]
10011496:	772b      	strb	r3, [r5, #28]
10011498:	2000      	movs	r0, #0
1001149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001149c:	10018b88 	.word	0x10018b88
100114a0:	100148df 	.word	0x100148df
100114a4:	100148f1 	.word	0x100148f1

100114a8 <gapc_bond_req_ind>:
100114a8:	b570      	push	{r4, r5, r6, lr}
100114aa:	780c      	ldrb	r4, [r1, #0]
100114ac:	1c03      	adds	r3, r0, #0
100114ae:	7849      	ldrb	r1, [r1, #1]
100114b0:	2c07      	cmp	r4, #7
100114b2:	d85c      	bhi.n	1001156e <gapc_bond_req_ind+0xc6>
100114b4:	1c20      	adds	r0, r4, #0
100114b6:	f001 f98f 	bl	100127d8 <__gnu_thumb1_case_uqi>
100114ba:	5a04      	.short	0x5a04
100114bc:	5a0b5a5a 	.word	0x5a0b5a5a
100114c0:	1f1f      	.short	0x1f1f
100114c2:	200a      	movs	r0, #10
100114c4:	2a00      	cmp	r2, #0
100114c6:	d053      	beq.n	10011570 <gapc_bond_req_ind+0xc8>
100114c8:	0a1b      	lsrs	r3, r3, #8
100114ca:	8013      	strh	r3, [r2, #0]
100114cc:	7091      	strb	r1, [r2, #2]
100114ce:	e04f      	b.n	10011570 <gapc_bond_req_ind+0xc8>
100114d0:	2a00      	cmp	r2, #0
100114d2:	d00b      	beq.n	100114ec <gapc_bond_req_ind+0x44>
100114d4:	0a1b      	lsrs	r3, r3, #8
100114d6:	8013      	strh	r3, [r2, #0]
100114d8:	2900      	cmp	r1, #0
100114da:	d102      	bne.n	100114e2 <gapc_bond_req_ind+0x3a>
100114dc:	2301      	movs	r3, #1
100114de:	7093      	strb	r3, [r2, #2]
100114e0:	e004      	b.n	100114ec <gapc_bond_req_ind+0x44>
100114e2:	2300      	movs	r3, #0
100114e4:	7093      	strb	r3, [r2, #2]
100114e6:	2902      	cmp	r1, #2
100114e8:	d102      	bne.n	100114f0 <gapc_bond_req_ind+0x48>
100114ea:	70d3      	strb	r3, [r2, #3]
100114ec:	200c      	movs	r0, #12
100114ee:	e03f      	b.n	10011570 <gapc_bond_req_ind+0xc8>
100114f0:	2901      	cmp	r1, #1
100114f2:	d1fb      	bne.n	100114ec <gapc_bond_req_ind+0x44>
100114f4:	70d1      	strb	r1, [r2, #3]
100114f6:	e7f9      	b.n	100114ec <gapc_bond_req_ind+0x44>
100114f8:	2214      	movs	r2, #20
100114fa:	481e      	ldr	r0, [pc, #120]	; (10011574 <gapc_bond_req_ind+0xcc>)
100114fc:	0a1b      	lsrs	r3, r3, #8
100114fe:	70c3      	strb	r3, [r0, #3]
10011500:	4b1d      	ldr	r3, [pc, #116]	; (10011578 <gapc_bond_req_ind+0xd0>)
10011502:	7002      	strb	r2, [r0, #0]
10011504:	3a06      	subs	r2, #6
10011506:	7042      	strb	r2, [r0, #1]
10011508:	7082      	strb	r2, [r0, #2]
1001150a:	881a      	ldrh	r2, [r3, #0]
1001150c:	881b      	ldrh	r3, [r3, #0]
1001150e:	4e1b      	ldr	r6, [pc, #108]	; (1001157c <gapc_bond_req_ind+0xd4>)
10011510:	0a1b      	lsrs	r3, r3, #8
10011512:	7143      	strb	r3, [r0, #5]
10011514:	2301      	movs	r3, #1
10011516:	7102      	strb	r2, [r0, #4]
10011518:	7204      	strb	r4, [r0, #8]
1001151a:	7243      	strb	r3, [r0, #9]
1001151c:	1c05      	adds	r5, r0, #0
1001151e:	1c31      	adds	r1, r6, #0
10011520:	300a      	adds	r0, #10
10011522:	2c07      	cmp	r4, #7
10011524:	d116      	bne.n	10011554 <gapc_bond_req_ind+0xac>
10011526:	317e      	adds	r1, #126	; 0x7e
10011528:	2210      	movs	r2, #16
1001152a:	4c15      	ldr	r4, [pc, #84]	; (10011580 <gapc_bond_req_ind+0xd8>)
1001152c:	47a0      	blx	r4
1001152e:	1c33      	adds	r3, r6, #0
10011530:	1c31      	adds	r1, r6, #0
10011532:	1c28      	adds	r0, r5, #0
10011534:	338e      	adds	r3, #142	; 0x8e
10011536:	881b      	ldrh	r3, [r3, #0]
10011538:	3190      	adds	r1, #144	; 0x90
1001153a:	76ab      	strb	r3, [r5, #26]
1001153c:	2208      	movs	r2, #8
1001153e:	0a1b      	lsrs	r3, r3, #8
10011540:	301c      	adds	r0, #28
10011542:	76eb      	strb	r3, [r5, #27]
10011544:	47a0      	blx	r4
10011546:	1c31      	adds	r1, r6, #0
10011548:	3198      	adds	r1, #152	; 0x98
1001154a:	780a      	ldrb	r2, [r1, #0]
1001154c:	1d6b      	adds	r3, r5, #5
1001154e:	77da      	strb	r2, [r3, #31]
10011550:	2125      	movs	r1, #37	; 0x25
10011552:	e004      	b.n	1001155e <gapc_bond_req_ind+0xb6>
10011554:	319a      	adds	r1, #154	; 0x9a
10011556:	2210      	movs	r2, #16
10011558:	4b09      	ldr	r3, [pc, #36]	; (10011580 <gapc_bond_req_ind+0xd8>)
1001155a:	4798      	blx	r3
1001155c:	211a      	movs	r1, #26
1001155e:	1c0b      	adds	r3, r1, #0
10011560:	2400      	movs	r4, #0
10011562:	3b08      	subs	r3, #8
10011564:	71ab      	strb	r3, [r5, #6]
10011566:	1c28      	adds	r0, r5, #0
10011568:	4b06      	ldr	r3, [pc, #24]	; (10011584 <gapc_bond_req_ind+0xdc>)
1001156a:	71ec      	strb	r4, [r5, #7]
1001156c:	4798      	blx	r3
1001156e:	2000      	movs	r0, #0
10011570:	bd70      	pop	{r4, r5, r6, pc}
10011572:	46c0      	nop			; (mov r8, r8)
10011574:	10019db0 	.word	0x10019db0
10011578:	10019a40 	.word	0x10019a40
1001157c:	10019ad2 	.word	0x10019ad2
10011580:	100148df 	.word	0x100148df
10011584:	10010e49 	.word	0x10010e49

10011588 <gapc_bond_cfm_handler_pair_resp>:
10011588:	b5f0      	push	{r4, r5, r6, r7, lr}
1001158a:	b085      	sub	sp, #20
1001158c:	1c07      	adds	r7, r0, #0
1001158e:	a80a      	add	r0, sp, #40	; 0x28
10011590:	7806      	ldrb	r6, [r0, #0]
10011592:	a80b      	add	r0, sp, #44	; 0x2c
10011594:	7805      	ldrb	r5, [r0, #0]
10011596:	a80c      	add	r0, sp, #48	; 0x30
10011598:	7800      	ldrb	r0, [r0, #0]
1001159a:	2414      	movs	r4, #20
1001159c:	9002      	str	r0, [sp, #8]
1001159e:	a80d      	add	r0, sp, #52	; 0x34
100115a0:	7800      	ldrb	r0, [r0, #0]
100115a2:	9301      	str	r3, [sp, #4]
100115a4:	9003      	str	r0, [sp, #12]
100115a6:	a80e      	add	r0, sp, #56	; 0x38
100115a8:	8800      	ldrh	r0, [r0, #0]
100115aa:	4684      	mov	ip, r0
100115ac:	4812      	ldr	r0, [pc, #72]	; (100115f8 <gapc_bond_cfm_handler_pair_resp+0x70>)
100115ae:	7004      	strb	r4, [r0, #0]
100115b0:	3c06      	subs	r4, #6
100115b2:	7044      	strb	r4, [r0, #1]
100115b4:	7084      	strb	r4, [r0, #2]
100115b6:	4664      	mov	r4, ip
100115b8:	70c4      	strb	r4, [r0, #3]
100115ba:	4c10      	ldr	r4, [pc, #64]	; (100115fc <gapc_bond_cfm_handler_pair_resp+0x74>)
100115bc:	7247      	strb	r7, [r0, #9]
100115be:	8823      	ldrh	r3, [r4, #0]
100115c0:	8824      	ldrh	r4, [r4, #0]
100115c2:	7103      	strb	r3, [r0, #4]
100115c4:	466b      	mov	r3, sp
100115c6:	791b      	ldrb	r3, [r3, #4]
100115c8:	0a24      	lsrs	r4, r4, #8
100115ca:	7303      	strb	r3, [r0, #12]
100115cc:	466b      	mov	r3, sp
100115ce:	7a1b      	ldrb	r3, [r3, #8]
100115d0:	7144      	strb	r4, [r0, #5]
100115d2:	73c3      	strb	r3, [r0, #15]
100115d4:	466b      	mov	r3, sp
100115d6:	7b1b      	ldrb	r3, [r3, #12]
100115d8:	2401      	movs	r4, #1
100115da:	7403      	strb	r3, [r0, #16]
100115dc:	2309      	movs	r3, #9
100115de:	7183      	strb	r3, [r0, #6]
100115e0:	2300      	movs	r3, #0
100115e2:	7204      	strb	r4, [r0, #8]
100115e4:	7281      	strb	r1, [r0, #10]
100115e6:	72c2      	strb	r2, [r0, #11]
100115e8:	7346      	strb	r6, [r0, #13]
100115ea:	7385      	strb	r5, [r0, #14]
100115ec:	71c3      	strb	r3, [r0, #7]
100115ee:	2111      	movs	r1, #17
100115f0:	4b03      	ldr	r3, [pc, #12]	; (10011600 <gapc_bond_cfm_handler_pair_resp+0x78>)
100115f2:	4798      	blx	r3
100115f4:	b005      	add	sp, #20
100115f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115f8:	10019db0 	.word	0x10019db0
100115fc:	10019a40 	.word	0x10019a40
10011600:	10010e49 	.word	0x10010e49

10011604 <gapc_bond_cfm_handler_key_exch>:
10011604:	b538      	push	{r3, r4, r5, lr}
10011606:	2514      	movs	r5, #20
10011608:	4c0d      	ldr	r4, [pc, #52]	; (10011640 <gapc_bond_cfm_handler_key_exch+0x3c>)
1001160a:	70e3      	strb	r3, [r4, #3]
1001160c:	4b0d      	ldr	r3, [pc, #52]	; (10011644 <gapc_bond_cfm_handler_key_exch+0x40>)
1001160e:	7025      	strb	r5, [r4, #0]
10011610:	3d06      	subs	r5, #6
10011612:	7065      	strb	r5, [r4, #1]
10011614:	70a5      	strb	r5, [r4, #2]
10011616:	881d      	ldrh	r5, [r3, #0]
10011618:	881b      	ldrh	r3, [r3, #0]
1001161a:	7220      	strb	r0, [r4, #8]
1001161c:	0a1b      	lsrs	r3, r3, #8
1001161e:	7163      	strb	r3, [r4, #5]
10011620:	7261      	strb	r1, [r4, #9]
10011622:	4b09      	ldr	r3, [pc, #36]	; (10011648 <gapc_bond_cfm_handler_key_exch+0x44>)
10011624:	1c11      	adds	r1, r2, #0
10011626:	4809      	ldr	r0, [pc, #36]	; (1001164c <gapc_bond_cfm_handler_key_exch+0x48>)
10011628:	2210      	movs	r2, #16
1001162a:	7125      	strb	r5, [r4, #4]
1001162c:	4798      	blx	r3
1001162e:	2312      	movs	r3, #18
10011630:	71a3      	strb	r3, [r4, #6]
10011632:	2300      	movs	r3, #0
10011634:	1c20      	adds	r0, r4, #0
10011636:	71e3      	strb	r3, [r4, #7]
10011638:	211a      	movs	r1, #26
1001163a:	4b05      	ldr	r3, [pc, #20]	; (10011650 <gapc_bond_cfm_handler_key_exch+0x4c>)
1001163c:	4798      	blx	r3
1001163e:	bd38      	pop	{r3, r4, r5, pc}
10011640:	10019db0 	.word	0x10019db0
10011644:	10019a40 	.word	0x10019a40
10011648:	100148df 	.word	0x100148df
1001164c:	10019dba 	.word	0x10019dba
10011650:	10010e49 	.word	0x10010e49

10011654 <gapc_security_cmd_handler>:
10011654:	221a      	movs	r2, #26
10011656:	b508      	push	{r3, lr}
10011658:	4b0b      	ldr	r3, [pc, #44]	; (10011688 <gapc_security_cmd_handler+0x34>)
1001165a:	701a      	strb	r2, [r3, #0]
1001165c:	3a0c      	subs	r2, #12
1001165e:	705a      	strb	r2, [r3, #1]
10011660:	709a      	strb	r2, [r3, #2]
10011662:	4a0a      	ldr	r2, [pc, #40]	; (1001168c <gapc_security_cmd_handler+0x38>)
10011664:	70d8      	strb	r0, [r3, #3]
10011666:	8810      	ldrh	r0, [r2, #0]
10011668:	8812      	ldrh	r2, [r2, #0]
1001166a:	7118      	strb	r0, [r3, #4]
1001166c:	0a12      	lsrs	r2, r2, #8
1001166e:	715a      	strb	r2, [r3, #5]
10011670:	220c      	movs	r2, #12
10011672:	721a      	strb	r2, [r3, #8]
10011674:	3a0a      	subs	r2, #10
10011676:	719a      	strb	r2, [r3, #6]
10011678:	2200      	movs	r2, #0
1001167a:	7259      	strb	r1, [r3, #9]
1001167c:	71da      	strb	r2, [r3, #7]
1001167e:	1c18      	adds	r0, r3, #0
10011680:	210a      	movs	r1, #10
10011682:	4b03      	ldr	r3, [pc, #12]	; (10011690 <gapc_security_cmd_handler+0x3c>)
10011684:	4798      	blx	r3
10011686:	bd08      	pop	{r3, pc}
10011688:	10019db0 	.word	0x10019db0
1001168c:	10019a40 	.word	0x10019a40
10011690:	10010e49 	.word	0x10010e49

10011694 <gapc_encrypt_cmd_handler>:
10011694:	b5f0      	push	{r4, r5, r6, r7, lr}
10011696:	2500      	movs	r5, #0
10011698:	b089      	sub	sp, #36	; 0x24
1001169a:	9306      	str	r3, [sp, #24]
1001169c:	ab0e      	add	r3, sp, #56	; 0x38
1001169e:	781b      	ldrb	r3, [r3, #0]
100116a0:	1c17      	adds	r7, r2, #0
100116a2:	9307      	str	r3, [sp, #28]
100116a4:	ab0f      	add	r3, sp, #60	; 0x3c
100116a6:	781b      	ldrb	r3, [r3, #0]
100116a8:	4a19      	ldr	r2, [pc, #100]	; (10011710 <gapc_encrypt_cmd_handler+0x7c>)
100116aa:	1c06      	adds	r6, r0, #0
100116ac:	9105      	str	r1, [sp, #20]
100116ae:	9300      	str	r3, [sp, #0]
100116b0:	9002      	str	r0, [sp, #8]
100116b2:	1c29      	adds	r1, r5, #0
100116b4:	1c2b      	adds	r3, r5, #0
100116b6:	9501      	str	r5, [sp, #4]
100116b8:	1c10      	adds	r0, r2, #0
100116ba:	4c16      	ldr	r4, [pc, #88]	; (10011714 <gapc_encrypt_cmd_handler+0x80>)
100116bc:	47a0      	blx	r4
100116be:	2316      	movs	r3, #22
100116c0:	4c15      	ldr	r4, [pc, #84]	; (10011718 <gapc_encrypt_cmd_handler+0x84>)
100116c2:	9905      	ldr	r1, [sp, #20]
100116c4:	7023      	strb	r3, [r4, #0]
100116c6:	3b08      	subs	r3, #8
100116c8:	7063      	strb	r3, [r4, #1]
100116ca:	70a3      	strb	r3, [r4, #2]
100116cc:	4b13      	ldr	r3, [pc, #76]	; (1001171c <gapc_encrypt_cmd_handler+0x88>)
100116ce:	70e6      	strb	r6, [r4, #3]
100116d0:	881a      	ldrh	r2, [r3, #0]
100116d2:	881b      	ldrh	r3, [r3, #0]
100116d4:	7122      	strb	r2, [r4, #4]
100116d6:	0a1b      	lsrs	r3, r3, #8
100116d8:	7163      	strb	r3, [r4, #5]
100116da:	230b      	movs	r3, #11
100116dc:	4e10      	ldr	r6, [pc, #64]	; (10011720 <gapc_encrypt_cmd_handler+0x8c>)
100116de:	2210      	movs	r2, #16
100116e0:	4810      	ldr	r0, [pc, #64]	; (10011724 <gapc_encrypt_cmd_handler+0x90>)
100116e2:	7223      	strb	r3, [r4, #8]
100116e4:	7265      	strb	r5, [r4, #9]
100116e6:	47b0      	blx	r6
100116e8:	0a3b      	lsrs	r3, r7, #8
100116ea:	9906      	ldr	r1, [sp, #24]
100116ec:	2208      	movs	r2, #8
100116ee:	480e      	ldr	r0, [pc, #56]	; (10011728 <gapc_encrypt_cmd_handler+0x94>)
100116f0:	76e3      	strb	r3, [r4, #27]
100116f2:	76a7      	strb	r7, [r4, #26]
100116f4:	47b0      	blx	r6
100116f6:	466a      	mov	r2, sp
100116f8:	7f12      	ldrb	r2, [r2, #28]
100116fa:	1d63      	adds	r3, r4, #5
100116fc:	77da      	strb	r2, [r3, #31]
100116fe:	231d      	movs	r3, #29
10011700:	1c20      	adds	r0, r4, #0
10011702:	71a3      	strb	r3, [r4, #6]
10011704:	2125      	movs	r1, #37	; 0x25
10011706:	4b09      	ldr	r3, [pc, #36]	; (1001172c <gapc_encrypt_cmd_handler+0x98>)
10011708:	71e5      	strb	r5, [r4, #7]
1001170a:	4798      	blx	r3
1001170c:	b009      	add	sp, #36	; 0x24
1001170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011710:	10018b68 	.word	0x10018b68
10011714:	1001114d 	.word	0x1001114d
10011718:	10019db0 	.word	0x10019db0
1001171c:	10019a40 	.word	0x10019a40
10011720:	100148df 	.word	0x100148df
10011724:	10019dba 	.word	0x10019dba
10011728:	10019dcc 	.word	0x10019dcc
1001172c:	10010e49 	.word	0x10010e49

10011730 <gapc_encrypt_req_ind>:
10011730:	b508      	push	{r3, lr}
10011732:	0a00      	lsrs	r0, r0, #8
10011734:	8010      	strh	r0, [r2, #0]
10011736:	784b      	ldrb	r3, [r1, #1]
10011738:	7808      	ldrb	r0, [r1, #0]
1001173a:	021b      	lsls	r3, r3, #8
1001173c:	4303      	orrs	r3, r0
1001173e:	8053      	strh	r3, [r2, #2]
10011740:	1d10      	adds	r0, r2, #4
10011742:	3102      	adds	r1, #2
10011744:	2208      	movs	r2, #8
10011746:	4b01      	ldr	r3, [pc, #4]	; (1001174c <gapc_encrypt_req_ind+0x1c>)
10011748:	4798      	blx	r3
1001174a:	bd08      	pop	{r3, pc}
1001174c:	100148df 	.word	0x100148df

10011750 <gapc_encrypt_cfm_handler>:
10011750:	b5f0      	push	{r4, r5, r6, r7, lr}
10011752:	2500      	movs	r5, #0
10011754:	b087      	sub	sp, #28
10011756:	9304      	str	r3, [sp, #16]
10011758:	ab0c      	add	r3, sp, #48	; 0x30
1001175a:	781b      	ldrb	r3, [r3, #0]
1001175c:	1c17      	adds	r7, r2, #0
1001175e:	4a15      	ldr	r2, [pc, #84]	; (100117b4 <gapc_encrypt_cfm_handler+0x64>)
10011760:	1c06      	adds	r6, r0, #0
10011762:	9305      	str	r3, [sp, #20]
10011764:	9100      	str	r1, [sp, #0]
10011766:	9002      	str	r0, [sp, #8]
10011768:	1c29      	adds	r1, r5, #0
1001176a:	1c2b      	adds	r3, r5, #0
1001176c:	9501      	str	r5, [sp, #4]
1001176e:	1c10      	adds	r0, r2, #0
10011770:	4c11      	ldr	r4, [pc, #68]	; (100117b8 <gapc_encrypt_cfm_handler+0x68>)
10011772:	47a0      	blx	r4
10011774:	2318      	movs	r3, #24
10011776:	4c11      	ldr	r4, [pc, #68]	; (100117bc <gapc_encrypt_cfm_handler+0x6c>)
10011778:	9904      	ldr	r1, [sp, #16]
1001177a:	7023      	strb	r3, [r4, #0]
1001177c:	3b0a      	subs	r3, #10
1001177e:	7063      	strb	r3, [r4, #1]
10011780:	70a3      	strb	r3, [r4, #2]
10011782:	4b0f      	ldr	r3, [pc, #60]	; (100117c0 <gapc_encrypt_cfm_handler+0x70>)
10011784:	480f      	ldr	r0, [pc, #60]	; (100117c4 <gapc_encrypt_cfm_handler+0x74>)
10011786:	881a      	ldrh	r2, [r3, #0]
10011788:	881b      	ldrh	r3, [r3, #0]
1001178a:	7122      	strb	r2, [r4, #4]
1001178c:	0a1b      	lsrs	r3, r3, #8
1001178e:	7163      	strb	r3, [r4, #5]
10011790:	2210      	movs	r2, #16
10011792:	4b0d      	ldr	r3, [pc, #52]	; (100117c8 <gapc_encrypt_cfm_handler+0x78>)
10011794:	70e6      	strb	r6, [r4, #3]
10011796:	7227      	strb	r7, [r4, #8]
10011798:	4798      	blx	r3
1001179a:	466b      	mov	r3, sp
1001179c:	7d1b      	ldrb	r3, [r3, #20]
1001179e:	1c20      	adds	r0, r4, #0
100117a0:	7663      	strb	r3, [r4, #25]
100117a2:	2312      	movs	r3, #18
100117a4:	211a      	movs	r1, #26
100117a6:	71a3      	strb	r3, [r4, #6]
100117a8:	4b08      	ldr	r3, [pc, #32]	; (100117cc <gapc_encrypt_cfm_handler+0x7c>)
100117aa:	71e5      	strb	r5, [r4, #7]
100117ac:	4798      	blx	r3
100117ae:	b007      	add	sp, #28
100117b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100117b2:	46c0      	nop			; (mov r8, r8)
100117b4:	10018b78 	.word	0x10018b78
100117b8:	1001114d 	.word	0x1001114d
100117bc:	10019db0 	.word	0x10019db0
100117c0:	10019a40 	.word	0x10019a40
100117c4:	10019db9 	.word	0x10019db9
100117c8:	100148df 	.word	0x100148df
100117cc:	10010e49 	.word	0x10010e49

100117d0 <gapc_encrypt_ind>:
100117d0:	780b      	ldrb	r3, [r1, #0]
100117d2:	0a00      	lsrs	r0, r0, #8
100117d4:	70d3      	strb	r3, [r2, #3]
100117d6:	2300      	movs	r3, #0
100117d8:	8010      	strh	r0, [r2, #0]
100117da:	7093      	strb	r3, [r2, #2]
100117dc:	4770      	bx	lr
	...

100117e0 <gapc_param_update_cfm_handler>:
100117e0:	b538      	push	{r3, r4, r5, lr}
100117e2:	2410      	movs	r4, #16
100117e4:	1c05      	adds	r5, r0, #0
100117e6:	480e      	ldr	r0, [pc, #56]	; (10011820 <gapc_param_update_cfm_handler+0x40>)
100117e8:	7004      	strb	r4, [r0, #0]
100117ea:	3c02      	subs	r4, #2
100117ec:	7044      	strb	r4, [r0, #1]
100117ee:	7084      	strb	r4, [r0, #2]
100117f0:	4c0c      	ldr	r4, [pc, #48]	; (10011824 <gapc_param_update_cfm_handler+0x44>)
100117f2:	70c5      	strb	r5, [r0, #3]
100117f4:	8825      	ldrh	r5, [r4, #0]
100117f6:	8824      	ldrh	r4, [r4, #0]
100117f8:	72c3      	strb	r3, [r0, #11]
100117fa:	0a1b      	lsrs	r3, r3, #8
100117fc:	0a24      	lsrs	r4, r4, #8
100117fe:	7303      	strb	r3, [r0, #12]
10011800:	2305      	movs	r3, #5
10011802:	7144      	strb	r4, [r0, #5]
10011804:	2400      	movs	r4, #0
10011806:	7201      	strb	r1, [r0, #8]
10011808:	7242      	strb	r2, [r0, #9]
1001180a:	7183      	strb	r3, [r0, #6]
1001180c:	0a12      	lsrs	r2, r2, #8
1001180e:	210d      	movs	r1, #13
10011810:	4b05      	ldr	r3, [pc, #20]	; (10011828 <gapc_param_update_cfm_handler+0x48>)
10011812:	7105      	strb	r5, [r0, #4]
10011814:	7282      	strb	r2, [r0, #10]
10011816:	71c4      	strb	r4, [r0, #7]
10011818:	4798      	blx	r3
1001181a:	1c20      	adds	r0, r4, #0
1001181c:	bd38      	pop	{r3, r4, r5, pc}
1001181e:	46c0      	nop			; (mov r8, r8)
10011820:	10019db0 	.word	0x10019db0
10011824:	10019a40 	.word	0x10019a40
10011828:	10010e49 	.word	0x10010e49

1001182c <gapc_param_updated_ind>:
1001182c:	2300      	movs	r3, #0
1001182e:	0a00      	lsrs	r0, r0, #8
10011830:	8010      	strh	r0, [r2, #0]
10011832:	7093      	strb	r3, [r2, #2]
10011834:	784b      	ldrb	r3, [r1, #1]
10011836:	7808      	ldrb	r0, [r1, #0]
10011838:	021b      	lsls	r3, r3, #8
1001183a:	4303      	orrs	r3, r0
1001183c:	8093      	strh	r3, [r2, #4]
1001183e:	78cb      	ldrb	r3, [r1, #3]
10011840:	7888      	ldrb	r0, [r1, #2]
10011842:	021b      	lsls	r3, r3, #8
10011844:	4303      	orrs	r3, r0
10011846:	80d3      	strh	r3, [r2, #6]
10011848:	794b      	ldrb	r3, [r1, #5]
1001184a:	7909      	ldrb	r1, [r1, #4]
1001184c:	021b      	lsls	r3, r3, #8
1001184e:	430b      	orrs	r3, r1
10011850:	2007      	movs	r0, #7
10011852:	8113      	strh	r3, [r2, #8]
10011854:	4770      	bx	lr

10011856 <gapc_param_updated_req_ind>:
10011856:	0a00      	lsrs	r0, r0, #8
10011858:	8010      	strh	r0, [r2, #0]
1001185a:	784b      	ldrb	r3, [r1, #1]
1001185c:	7808      	ldrb	r0, [r1, #0]
1001185e:	021b      	lsls	r3, r3, #8
10011860:	4303      	orrs	r3, r0
10011862:	8053      	strh	r3, [r2, #2]
10011864:	78cb      	ldrb	r3, [r1, #3]
10011866:	7888      	ldrb	r0, [r1, #2]
10011868:	021b      	lsls	r3, r3, #8
1001186a:	4303      	orrs	r3, r0
1001186c:	8093      	strh	r3, [r2, #4]
1001186e:	794b      	ldrb	r3, [r1, #5]
10011870:	7908      	ldrb	r0, [r1, #4]
10011872:	021b      	lsls	r3, r3, #8
10011874:	4303      	orrs	r3, r0
10011876:	80d3      	strh	r3, [r2, #6]
10011878:	79cb      	ldrb	r3, [r1, #7]
1001187a:	7989      	ldrb	r1, [r1, #6]
1001187c:	021b      	lsls	r3, r3, #8
1001187e:	430b      	orrs	r3, r1
10011880:	2008      	movs	r0, #8
10011882:	8113      	strh	r3, [r2, #8]
10011884:	4770      	bx	lr
	...

10011888 <gapc_dev_info_req_ind_handler>:
10011888:	b508      	push	{r3, lr}
1001188a:	1c0b      	adds	r3, r1, #0
1001188c:	0a01      	lsrs	r1, r0, #8
1001188e:	8011      	strh	r1, [r2, #0]
10011890:	7818      	ldrb	r0, [r3, #0]
10011892:	7090      	strb	r0, [r2, #2]
10011894:	2800      	cmp	r0, #0
10011896:	d104      	bne.n	100118a2 <gapc_dev_info_req_ind_handler+0x1a>
10011898:	4b03      	ldr	r3, [pc, #12]	; (100118a8 <gapc_dev_info_req_ind_handler+0x20>)
1001189a:	33aa      	adds	r3, #170	; 0xaa
1001189c:	881b      	ldrh	r3, [r3, #0]
1001189e:	2b00      	cmp	r3, #0
100118a0:	d001      	beq.n	100118a6 <gapc_dev_info_req_ind_handler+0x1e>
100118a2:	4b02      	ldr	r3, [pc, #8]	; (100118ac <gapc_dev_info_req_ind_handler+0x24>)
100118a4:	4798      	blx	r3
100118a6:	bd08      	pop	{r3, pc}
100118a8:	10019ad2 	.word	0x10019ad2
100118ac:	10010f59 	.word	0x10010f59

100118b0 <gapc_sec_req_ind>:
100118b0:	0a00      	lsrs	r0, r0, #8
100118b2:	8010      	strh	r0, [r2, #0]
100118b4:	7809      	ldrb	r1, [r1, #0]
100118b6:	2301      	movs	r3, #1
100118b8:	1c08      	adds	r0, r1, #0
100118ba:	0889      	lsrs	r1, r1, #2
100118bc:	4018      	ands	r0, r3
100118be:	400b      	ands	r3, r1
100118c0:	70d0      	strb	r0, [r2, #3]
100118c2:	7113      	strb	r3, [r2, #4]
100118c4:	4770      	bx	lr

100118c6 <gapc_sign_counter_ind_handler>:
100118c6:	0a00      	lsrs	r0, r0, #8
100118c8:	8010      	strh	r0, [r2, #0]
100118ca:	784b      	ldrb	r3, [r1, #1]
100118cc:	0218      	lsls	r0, r3, #8
100118ce:	788b      	ldrb	r3, [r1, #2]
100118d0:	041b      	lsls	r3, r3, #16
100118d2:	4303      	orrs	r3, r0
100118d4:	7808      	ldrb	r0, [r1, #0]
100118d6:	4303      	orrs	r3, r0
100118d8:	78c8      	ldrb	r0, [r1, #3]
100118da:	0600      	lsls	r0, r0, #24
100118dc:	4303      	orrs	r3, r0
100118de:	6053      	str	r3, [r2, #4]
100118e0:	794b      	ldrb	r3, [r1, #5]
100118e2:	0218      	lsls	r0, r3, #8
100118e4:	798b      	ldrb	r3, [r1, #6]
100118e6:	041b      	lsls	r3, r3, #16
100118e8:	4303      	orrs	r3, r0
100118ea:	7908      	ldrb	r0, [r1, #4]
100118ec:	79c9      	ldrb	r1, [r1, #7]
100118ee:	4303      	orrs	r3, r0
100118f0:	0609      	lsls	r1, r1, #24
100118f2:	430b      	orrs	r3, r1
100118f4:	2000      	movs	r0, #0
100118f6:	6093      	str	r3, [r2, #8]
100118f8:	4770      	bx	lr
	...

100118fc <gapc_peer_att_info_ind_handler>:
100118fc:	b510      	push	{r4, lr}
100118fe:	0a00      	lsrs	r0, r0, #8
10011900:	8010      	strh	r0, [r2, #0]
10011902:	7808      	ldrb	r0, [r1, #0]
10011904:	7090      	strb	r0, [r2, #2]
10011906:	788b      	ldrb	r3, [r1, #2]
10011908:	784c      	ldrb	r4, [r1, #1]
1001190a:	021b      	lsls	r3, r3, #8
1001190c:	4323      	orrs	r3, r4
1001190e:	8093      	strh	r3, [r2, #4]
10011910:	2801      	cmp	r0, #1
10011912:	d027      	beq.n	10011964 <gapc_peer_att_info_ind_handler+0x68>
10011914:	2800      	cmp	r0, #0
10011916:	d017      	beq.n	10011948 <gapc_peer_att_info_ind_handler+0x4c>
10011918:	2802      	cmp	r0, #2
1001191a:	d12a      	bne.n	10011972 <gapc_peer_att_info_ind_handler+0x76>
1001191c:	790b      	ldrb	r3, [r1, #4]
1001191e:	78c8      	ldrb	r0, [r1, #3]
10011920:	021b      	lsls	r3, r3, #8
10011922:	4303      	orrs	r3, r0
10011924:	8113      	strh	r3, [r2, #8]
10011926:	798b      	ldrb	r3, [r1, #6]
10011928:	7948      	ldrb	r0, [r1, #5]
1001192a:	021b      	lsls	r3, r3, #8
1001192c:	4303      	orrs	r3, r0
1001192e:	80d3      	strh	r3, [r2, #6]
10011930:	7a0b      	ldrb	r3, [r1, #8]
10011932:	79c8      	ldrb	r0, [r1, #7]
10011934:	021b      	lsls	r3, r3, #8
10011936:	4303      	orrs	r3, r0
10011938:	8193      	strh	r3, [r2, #12]
1001193a:	7a8b      	ldrb	r3, [r1, #10]
1001193c:	7a49      	ldrb	r1, [r1, #9]
1001193e:	021b      	lsls	r3, r3, #8
10011940:	430b      	orrs	r3, r1
10011942:	8153      	strh	r3, [r2, #10]
10011944:	2306      	movs	r3, #6
10011946:	e013      	b.n	10011970 <gapc_peer_att_info_ind_handler+0x74>
10011948:	1c14      	adds	r4, r2, #0
1001194a:	1c20      	adds	r0, r4, #0
1001194c:	790a      	ldrb	r2, [r1, #4]
1001194e:	78cb      	ldrb	r3, [r1, #3]
10011950:	0212      	lsls	r2, r2, #8
10011952:	431a      	orrs	r2, r3
10011954:	80e2      	strh	r2, [r4, #6]
10011956:	4b07      	ldr	r3, [pc, #28]	; (10011974 <gapc_peer_att_info_ind_handler+0x78>)
10011958:	3008      	adds	r0, #8
1001195a:	3105      	adds	r1, #5
1001195c:	4798      	blx	r3
1001195e:	2302      	movs	r3, #2
10011960:	70a3      	strb	r3, [r4, #2]
10011962:	e006      	b.n	10011972 <gapc_peer_att_info_ind_handler+0x76>
10011964:	790b      	ldrb	r3, [r1, #4]
10011966:	78c9      	ldrb	r1, [r1, #3]
10011968:	021b      	lsls	r3, r3, #8
1001196a:	430b      	orrs	r3, r1
1001196c:	80d3      	strh	r3, [r2, #6]
1001196e:	2305      	movs	r3, #5
10011970:	7093      	strb	r3, [r2, #2]
10011972:	bd10      	pop	{r4, pc}
10011974:	100148df 	.word	0x100148df

10011978 <gapc_con_channel_map_ind_handler>:
10011978:	b508      	push	{r3, lr}
1001197a:	2300      	movs	r3, #0
1001197c:	0a00      	lsrs	r0, r0, #8
1001197e:	7013      	strb	r3, [r2, #0]
10011980:	8050      	strh	r0, [r2, #2]
10011982:	4b02      	ldr	r3, [pc, #8]	; (1001198c <gapc_con_channel_map_ind_handler+0x14>)
10011984:	1d10      	adds	r0, r2, #4
10011986:	2205      	movs	r2, #5
10011988:	4798      	blx	r3
1001198a:	bd08      	pop	{r3, pc}
1001198c:	100148df 	.word	0x100148df

10011990 <gapc_lecb_connected>:
10011990:	7843      	ldrb	r3, [r0, #1]
10011992:	7802      	ldrb	r2, [r0, #0]
10011994:	021b      	lsls	r3, r3, #8
10011996:	4313      	orrs	r3, r2
10011998:	800b      	strh	r3, [r1, #0]
1001199a:	78c3      	ldrb	r3, [r0, #3]
1001199c:	7882      	ldrb	r2, [r0, #2]
1001199e:	021b      	lsls	r3, r3, #8
100119a0:	4313      	orrs	r3, r2
100119a2:	804b      	strh	r3, [r1, #2]
100119a4:	7943      	ldrb	r3, [r0, #5]
100119a6:	7902      	ldrb	r2, [r0, #4]
100119a8:	021b      	lsls	r3, r3, #8
100119aa:	4313      	orrs	r3, r2
100119ac:	808b      	strh	r3, [r1, #4]
100119ae:	79c3      	ldrb	r3, [r0, #7]
100119b0:	7982      	ldrb	r2, [r0, #6]
100119b2:	021b      	lsls	r3, r3, #8
100119b4:	4313      	orrs	r3, r2
100119b6:	80cb      	strh	r3, [r1, #6]
100119b8:	2300      	movs	r3, #0
100119ba:	720b      	strb	r3, [r1, #8]
100119bc:	4770      	bx	lr

100119be <gapc_lecb_disconnected>:
100119be:	7843      	ldrb	r3, [r0, #1]
100119c0:	7802      	ldrb	r2, [r0, #0]
100119c2:	021b      	lsls	r3, r3, #8
100119c4:	4313      	orrs	r3, r2
100119c6:	800b      	strh	r3, [r1, #0]
100119c8:	78c3      	ldrb	r3, [r0, #3]
100119ca:	7882      	ldrb	r2, [r0, #2]
100119cc:	021b      	lsls	r3, r3, #8
100119ce:	4313      	orrs	r3, r2
100119d0:	804b      	strh	r3, [r1, #2]
100119d2:	4770      	bx	lr

100119d4 <gapc_lecb_connect_req_ind>:
100119d4:	7843      	ldrb	r3, [r0, #1]
100119d6:	7802      	ldrb	r2, [r0, #0]
100119d8:	021b      	lsls	r3, r3, #8
100119da:	4313      	orrs	r3, r2
100119dc:	800b      	strh	r3, [r1, #0]
100119de:	78c3      	ldrb	r3, [r0, #3]
100119e0:	7882      	ldrb	r2, [r0, #2]
100119e2:	021b      	lsls	r3, r3, #8
100119e4:	4313      	orrs	r3, r2
100119e6:	804b      	strh	r3, [r1, #2]
100119e8:	7943      	ldrb	r3, [r0, #5]
100119ea:	7902      	ldrb	r2, [r0, #4]
100119ec:	021b      	lsls	r3, r3, #8
100119ee:	4313      	orrs	r3, r2
100119f0:	808b      	strh	r3, [r1, #4]
100119f2:	79c3      	ldrb	r3, [r0, #7]
100119f4:	7982      	ldrb	r2, [r0, #6]
100119f6:	021b      	lsls	r3, r3, #8
100119f8:	4313      	orrs	r3, r2
100119fa:	80cb      	strh	r3, [r1, #6]
100119fc:	4770      	bx	lr

100119fe <gapc_lecb_add_credit_resp_handler>:
100119fe:	7843      	ldrb	r3, [r0, #1]
10011a00:	7802      	ldrb	r2, [r0, #0]
10011a02:	021b      	lsls	r3, r3, #8
10011a04:	4313      	orrs	r3, r2
10011a06:	800b      	strh	r3, [r1, #0]
10011a08:	78c3      	ldrb	r3, [r0, #3]
10011a0a:	7882      	ldrb	r2, [r0, #2]
10011a0c:	021b      	lsls	r3, r3, #8
10011a0e:	4313      	orrs	r3, r2
10011a10:	804b      	strh	r3, [r1, #2]
10011a12:	7943      	ldrb	r3, [r0, #5]
10011a14:	7902      	ldrb	r2, [r0, #4]
10011a16:	021b      	lsls	r3, r3, #8
10011a18:	4313      	orrs	r3, r2
10011a1a:	808b      	strh	r3, [r1, #4]
10011a1c:	4770      	bx	lr
	...

10011a20 <gapm_reset_req_handler>:
10011a20:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011a22:	466b      	mov	r3, sp
10011a24:	4915      	ldr	r1, [pc, #84]	; (10011a7c <gapm_reset_req_handler+0x5c>)
10011a26:	4816      	ldr	r0, [pc, #88]	; (10011a80 <gapm_reset_req_handler+0x60>)
10011a28:	880c      	ldrh	r4, [r1, #0]
10011a2a:	8809      	ldrh	r1, [r1, #0]
10011a2c:	1ddd      	adds	r5, r3, #7
10011a2e:	0a09      	lsrs	r1, r1, #8
10011a30:	2300      	movs	r3, #0
10011a32:	2202      	movs	r2, #2
10011a34:	7141      	strb	r1, [r0, #5]
10011a36:	26d0      	movs	r6, #208	; 0xd0
10011a38:	2101      	movs	r1, #1
10011a3a:	7104      	strb	r4, [r0, #4]
10011a3c:	4c11      	ldr	r4, [pc, #68]	; (10011a84 <gapm_reset_req_handler+0x64>)
10011a3e:	702b      	strb	r3, [r5, #0]
10011a40:	7002      	strb	r2, [r0, #0]
10011a42:	70c3      	strb	r3, [r0, #3]
10011a44:	320b      	adds	r2, #11
10011a46:	7201      	strb	r1, [r0, #8]
10011a48:	7181      	strb	r1, [r0, #6]
10011a4a:	71c3      	strb	r3, [r0, #7]
10011a4c:	3108      	adds	r1, #8
10011a4e:	4b0e      	ldr	r3, [pc, #56]	; (10011a88 <gapm_reset_req_handler+0x68>)
10011a50:	0136      	lsls	r6, r6, #4
10011a52:	7042      	strb	r2, [r0, #1]
10011a54:	7082      	strb	r2, [r0, #2]
10011a56:	80a2      	strh	r2, [r4, #4]
10011a58:	8026      	strh	r6, [r4, #0]
10011a5a:	4798      	blx	r3
10011a5c:	1c28      	adds	r0, r5, #0
10011a5e:	4b0b      	ldr	r3, [pc, #44]	; (10011a8c <gapm_reset_req_handler+0x6c>)
10011a60:	4798      	blx	r3
10011a62:	782b      	ldrb	r3, [r5, #0]
10011a64:	20e2      	movs	r0, #226	; 0xe2
10011a66:	2b00      	cmp	r3, #0
10011a68:	d106      	bne.n	10011a78 <gapm_reset_req_handler+0x58>
10011a6a:	68a3      	ldr	r3, [r4, #8]
10011a6c:	20e2      	movs	r0, #226	; 0xe2
10011a6e:	781a      	ldrb	r2, [r3, #0]
10011a70:	785b      	ldrb	r3, [r3, #1]
10011a72:	2a01      	cmp	r2, #1
10011a74:	d100      	bne.n	10011a78 <gapm_reset_req_handler+0x58>
10011a76:	1c18      	adds	r0, r3, #0
10011a78:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011a7a:	46c0      	nop			; (mov r8, r8)
10011a7c:	10019a40 	.word	0x10019a40
10011a80:	10019db0 	.word	0x10019db0
10011a84:	10019a34 	.word	0x10019a34
10011a88:	10010e49 	.word	0x10010e49
10011a8c:	10010ead 	.word	0x10010ead

10011a90 <gapm_set_dev_config_cmd_handler>:
10011a90:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a92:	b089      	sub	sp, #36	; 0x24
10011a94:	9303      	str	r3, [sp, #12]
10011a96:	ab0e      	add	r3, sp, #56	; 0x38
10011a98:	781b      	ldrb	r3, [r3, #0]
10011a9a:	4c37      	ldr	r4, [pc, #220]	; (10011b78 <gapm_set_dev_config_cmd_handler+0xe8>)
10011a9c:	9304      	str	r3, [sp, #16]
10011a9e:	ab0f      	add	r3, sp, #60	; 0x3c
10011aa0:	781b      	ldrb	r3, [r3, #0]
10011aa2:	270d      	movs	r7, #13
10011aa4:	9305      	str	r3, [sp, #20]
10011aa6:	ab10      	add	r3, sp, #64	; 0x40
10011aa8:	881b      	ldrh	r3, [r3, #0]
10011aaa:	72a1      	strb	r1, [r4, #10]
10011aac:	9300      	str	r3, [sp, #0]
10011aae:	ab11      	add	r3, sp, #68	; 0x44
10011ab0:	881b      	ldrh	r3, [r3, #0]
10011ab2:	0a09      	lsrs	r1, r1, #8
10011ab4:	9301      	str	r3, [sp, #4]
10011ab6:	ab12      	add	r3, sp, #72	; 0x48
10011ab8:	881b      	ldrh	r3, [r3, #0]
10011aba:	7260      	strb	r0, [r4, #9]
10011abc:	9302      	str	r3, [sp, #8]
10011abe:	ab06      	add	r3, sp, #24
10011ac0:	1dde      	adds	r6, r3, #7
10011ac2:	2300      	movs	r3, #0
10011ac4:	7033      	strb	r3, [r6, #0]
10011ac6:	2304      	movs	r3, #4
10011ac8:	7023      	strb	r3, [r4, #0]
10011aca:	2300      	movs	r3, #0
10011acc:	70e3      	strb	r3, [r4, #3]
10011ace:	4b2b      	ldr	r3, [pc, #172]	; (10011b7c <gapm_set_dev_config_cmd_handler+0xec>)
10011ad0:	72e1      	strb	r1, [r4, #11]
10011ad2:	881d      	ldrh	r5, [r3, #0]
10011ad4:	881b      	ldrh	r3, [r3, #0]
10011ad6:	1c11      	adds	r1, r2, #0
10011ad8:	0a1b      	lsrs	r3, r3, #8
10011ada:	7163      	strb	r3, [r4, #5]
10011adc:	2303      	movs	r3, #3
10011ade:	7125      	strb	r5, [r4, #4]
10011ae0:	2206      	movs	r2, #6
10011ae2:	4d27      	ldr	r5, [pc, #156]	; (10011b80 <gapm_set_dev_config_cmd_handler+0xf0>)
10011ae4:	4827      	ldr	r0, [pc, #156]	; (10011b84 <gapm_set_dev_config_cmd_handler+0xf4>)
10011ae6:	7223      	strb	r3, [r4, #8]
10011ae8:	7067      	strb	r7, [r4, #1]
10011aea:	70a7      	strb	r7, [r4, #2]
10011aec:	47a8      	blx	r5
10011aee:	9903      	ldr	r1, [sp, #12]
10011af0:	2210      	movs	r2, #16
10011af2:	4825      	ldr	r0, [pc, #148]	; (10011b88 <gapm_set_dev_config_cmd_handler+0xf8>)
10011af4:	47a8      	blx	r5
10011af6:	466a      	mov	r2, sp
10011af8:	7c12      	ldrb	r2, [r2, #16]
10011afa:	1ce3      	adds	r3, r4, #3
10011afc:	77da      	strb	r2, [r3, #31]
10011afe:	466a      	mov	r2, sp
10011b00:	7d12      	ldrb	r2, [r2, #20]
10011b02:	1d23      	adds	r3, r4, #4
10011b04:	77da      	strb	r2, [r3, #31]
10011b06:	466a      	mov	r2, sp
10011b08:	7812      	ldrb	r2, [r2, #0]
10011b0a:	1d63      	adds	r3, r4, #5
10011b0c:	77da      	strb	r2, [r3, #31]
10011b0e:	9b00      	ldr	r3, [sp, #0]
10011b10:	1da2      	adds	r2, r4, #6
10011b12:	0a1b      	lsrs	r3, r3, #8
10011b14:	77d3      	strb	r3, [r2, #31]
10011b16:	466a      	mov	r2, sp
10011b18:	7912      	ldrb	r2, [r2, #4]
10011b1a:	1de3      	adds	r3, r4, #7
10011b1c:	77da      	strb	r2, [r3, #31]
10011b1e:	1c22      	adds	r2, r4, #0
10011b20:	9b01      	ldr	r3, [sp, #4]
10011b22:	3208      	adds	r2, #8
10011b24:	0a1b      	lsrs	r3, r3, #8
10011b26:	77d3      	strb	r3, [r2, #31]
10011b28:	466a      	mov	r2, sp
10011b2a:	1c23      	adds	r3, r4, #0
10011b2c:	7a12      	ldrb	r2, [r2, #8]
10011b2e:	3328      	adds	r3, #40	; 0x28
10011b30:	701a      	strb	r2, [r3, #0]
10011b32:	1c22      	adds	r2, r4, #0
10011b34:	9b02      	ldr	r3, [sp, #8]
10011b36:	3229      	adds	r2, #41	; 0x29
10011b38:	0a1b      	lsrs	r3, r3, #8
10011b3a:	7013      	strb	r3, [r2, #0]
10011b3c:	23d0      	movs	r3, #208	; 0xd0
10011b3e:	4d13      	ldr	r5, [pc, #76]	; (10011b8c <gapm_set_dev_config_cmd_handler+0xfc>)
10011b40:	011b      	lsls	r3, r3, #4
10011b42:	802b      	strh	r3, [r5, #0]
10011b44:	2322      	movs	r3, #34	; 0x22
10011b46:	71a3      	strb	r3, [r4, #6]
10011b48:	2300      	movs	r3, #0
10011b4a:	212a      	movs	r1, #42	; 0x2a
10011b4c:	71e3      	strb	r3, [r4, #7]
10011b4e:	1c20      	adds	r0, r4, #0
10011b50:	4b0f      	ldr	r3, [pc, #60]	; (10011b90 <gapm_set_dev_config_cmd_handler+0x100>)
10011b52:	80af      	strh	r7, [r5, #4]
10011b54:	4798      	blx	r3
10011b56:	1c30      	adds	r0, r6, #0
10011b58:	4b0e      	ldr	r3, [pc, #56]	; (10011b94 <gapm_set_dev_config_cmd_handler+0x104>)
10011b5a:	4798      	blx	r3
10011b5c:	7833      	ldrb	r3, [r6, #0]
10011b5e:	20e2      	movs	r0, #226	; 0xe2
10011b60:	2b00      	cmp	r3, #0
10011b62:	d106      	bne.n	10011b72 <gapm_set_dev_config_cmd_handler+0xe2>
10011b64:	68ab      	ldr	r3, [r5, #8]
10011b66:	20e2      	movs	r0, #226	; 0xe2
10011b68:	781a      	ldrb	r2, [r3, #0]
10011b6a:	785b      	ldrb	r3, [r3, #1]
10011b6c:	2a03      	cmp	r2, #3
10011b6e:	d100      	bne.n	10011b72 <gapm_set_dev_config_cmd_handler+0xe2>
10011b70:	1c18      	adds	r0, r3, #0
10011b72:	b009      	add	sp, #36	; 0x24
10011b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b76:	46c0      	nop			; (mov r8, r8)
10011b78:	10019db0 	.word	0x10019db0
10011b7c:	10019a40 	.word	0x10019a40
10011b80:	100148df 	.word	0x100148df
10011b84:	10019dbc 	.word	0x10019dbc
10011b88:	10019dc2 	.word	0x10019dc2
10011b8c:	10019a34 	.word	0x10019a34
10011b90:	10010e49 	.word	0x10010e49
10011b94:	10010ead 	.word	0x10010ead

10011b98 <gapm_get_dev_config_cmd_handler>:
10011b98:	4684      	mov	ip, r0
10011b9a:	4663      	mov	r3, ip
10011b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b9e:	b085      	sub	sp, #20
10011ba0:	9100      	str	r1, [sp, #0]
10011ba2:	20cf      	movs	r0, #207	; 0xcf
10011ba4:	2b01      	cmp	r3, #1
10011ba6:	d854      	bhi.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011ba8:	2900      	cmp	r1, #0
10011baa:	d052      	beq.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011bac:	2200      	movs	r2, #0
10011bae:	492a      	ldr	r1, [pc, #168]	; (10011c58 <gapm_get_dev_config_cmd_handler+0xc0>)
10011bb0:	ab02      	add	r3, sp, #8
10011bb2:	880c      	ldrh	r4, [r1, #0]
10011bb4:	8809      	ldrh	r1, [r1, #0]
10011bb6:	1d9f      	adds	r7, r3, #6
10011bb8:	719a      	strb	r2, [r3, #6]
10011bba:	4b28      	ldr	r3, [pc, #160]	; (10011c5c <gapm_get_dev_config_cmd_handler+0xc4>)
10011bbc:	0a09      	lsrs	r1, r1, #8
10011bbe:	250d      	movs	r5, #13
10011bc0:	2606      	movs	r6, #6
10011bc2:	7159      	strb	r1, [r3, #5]
10011bc4:	4661      	mov	r1, ip
10011bc6:	701e      	strb	r6, [r3, #0]
10011bc8:	705d      	strb	r5, [r3, #1]
10011bca:	709d      	strb	r5, [r3, #2]
10011bcc:	70da      	strb	r2, [r3, #3]
10011bce:	711c      	strb	r4, [r3, #4]
10011bd0:	2901      	cmp	r1, #1
10011bd2:	d13e      	bne.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011bd4:	21d0      	movs	r1, #208	; 0xd0
10011bd6:	4c22      	ldr	r4, [pc, #136]	; (10011c60 <gapm_get_dev_config_cmd_handler+0xc8>)
10011bd8:	0109      	lsls	r1, r1, #4
10011bda:	8061      	strh	r1, [r4, #2]
10011bdc:	4921      	ldr	r1, [pc, #132]	; (10011c64 <gapm_get_dev_config_cmd_handler+0xcc>)
10011bde:	71da      	strb	r2, [r3, #7]
10011be0:	8021      	strh	r1, [r4, #0]
10011be2:	4661      	mov	r1, ip
10011be4:	721e      	strb	r6, [r3, #8]
10011be6:	7199      	strb	r1, [r3, #6]
10011be8:	1c18      	adds	r0, r3, #0
10011bea:	2109      	movs	r1, #9
10011bec:	4b1e      	ldr	r3, [pc, #120]	; (10011c68 <gapm_get_dev_config_cmd_handler+0xd0>)
10011bee:	80a5      	strh	r5, [r4, #4]
10011bf0:	4798      	blx	r3
10011bf2:	1c38      	adds	r0, r7, #0
10011bf4:	4b1d      	ldr	r3, [pc, #116]	; (10011c6c <gapm_get_dev_config_cmd_handler+0xd4>)
10011bf6:	4798      	blx	r3
10011bf8:	783b      	ldrb	r3, [r7, #0]
10011bfa:	20e2      	movs	r0, #226	; 0xe2
10011bfc:	9301      	str	r3, [sp, #4]
10011bfe:	2b00      	cmp	r3, #0
10011c00:	d127      	bne.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011c02:	8821      	ldrh	r1, [r4, #0]
10011c04:	4a1a      	ldr	r2, [pc, #104]	; (10011c70 <gapm_get_dev_config_cmd_handler+0xd8>)
10011c06:	68a7      	ldr	r7, [r4, #8]
10011c08:	3b01      	subs	r3, #1
10011c0a:	4291      	cmp	r1, r2
10011c0c:	d001      	beq.n	10011c12 <gapm_get_dev_config_cmd_handler+0x7a>
10011c0e:	8023      	strh	r3, [r4, #0]
10011c10:	e01a      	b.n	10011c48 <gapm_get_dev_config_cmd_handler+0xb0>
10011c12:	8063      	strh	r3, [r4, #2]
10011c14:	9b00      	ldr	r3, [sp, #0]
10011c16:	1c39      	adds	r1, r7, #0
10011c18:	1c58      	adds	r0, r3, #1
10011c1a:	1c32      	adds	r2, r6, #0
10011c1c:	4b15      	ldr	r3, [pc, #84]	; (10011c74 <gapm_get_dev_config_cmd_handler+0xdc>)
10011c1e:	4798      	blx	r3
10011c20:	79bb      	ldrb	r3, [r7, #6]
10011c22:	9a00      	ldr	r2, [sp, #0]
10011c24:	7013      	strb	r3, [r2, #0]
10011c26:	23d0      	movs	r3, #208	; 0xd0
10011c28:	011b      	lsls	r3, r3, #4
10011c2a:	8023      	strh	r3, [r4, #0]
10011c2c:	ab02      	add	r3, sp, #8
10011c2e:	80a5      	strh	r5, [r4, #4]
10011c30:	1ddd      	adds	r5, r3, #7
10011c32:	466b      	mov	r3, sp
10011c34:	791b      	ldrb	r3, [r3, #4]
10011c36:	1c28      	adds	r0, r5, #0
10011c38:	702b      	strb	r3, [r5, #0]
10011c3a:	4b0c      	ldr	r3, [pc, #48]	; (10011c6c <gapm_get_dev_config_cmd_handler+0xd4>)
10011c3c:	4798      	blx	r3
10011c3e:	782b      	ldrb	r3, [r5, #0]
10011c40:	20d0      	movs	r0, #208	; 0xd0
10011c42:	2b00      	cmp	r3, #0
10011c44:	d105      	bne.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011c46:	68a7      	ldr	r7, [r4, #8]
10011c48:	783b      	ldrb	r3, [r7, #0]
10011c4a:	7878      	ldrb	r0, [r7, #1]
10011c4c:	2b06      	cmp	r3, #6
10011c4e:	d000      	beq.n	10011c52 <gapm_get_dev_config_cmd_handler+0xba>
10011c50:	20e2      	movs	r0, #226	; 0xe2
10011c52:	b005      	add	sp, #20
10011c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c56:	46c0      	nop			; (mov r8, r8)
10011c58:	10019a40 	.word	0x10019a40
10011c5c:	10019db0 	.word	0x10019db0
10011c60:	10019a34 	.word	0x10019a34
10011c64:	00000d08 	.word	0x00000d08
10011c68:	10010e49 	.word	0x10010e49
10011c6c:	10010ead 	.word	0x10010ead
10011c70:	0000ffff 	.word	0x0000ffff
10011c74:	100148df 	.word	0x100148df

10011c78 <gapm_cancel_cmd_handler>:
10011c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
10011c7a:	4916      	ldr	r1, [pc, #88]	; (10011cd4 <gapm_cancel_cmd_handler+0x5c>)
10011c7c:	4816      	ldr	r0, [pc, #88]	; (10011cd8 <gapm_cancel_cmd_handler+0x60>)
10011c7e:	880c      	ldrh	r4, [r1, #0]
10011c80:	8809      	ldrh	r1, [r1, #0]
10011c82:	466b      	mov	r3, sp
10011c84:	0a09      	lsrs	r1, r1, #8
10011c86:	7141      	strb	r1, [r0, #5]
10011c88:	2102      	movs	r1, #2
10011c8a:	2203      	movs	r2, #3
10011c8c:	7201      	strb	r1, [r0, #8]
10011c8e:	21d0      	movs	r1, #208	; 0xd0
10011c90:	1ddd      	adds	r5, r3, #7
10011c92:	2300      	movs	r3, #0
10011c94:	7104      	strb	r4, [r0, #4]
10011c96:	4c11      	ldr	r4, [pc, #68]	; (10011cdc <gapm_cancel_cmd_handler+0x64>)
10011c98:	7002      	strb	r2, [r0, #0]
10011c9a:	0109      	lsls	r1, r1, #4
10011c9c:	320a      	adds	r2, #10
10011c9e:	702b      	strb	r3, [r5, #0]
10011ca0:	7042      	strb	r2, [r0, #1]
10011ca2:	7082      	strb	r2, [r0, #2]
10011ca4:	70c3      	strb	r3, [r0, #3]
10011ca6:	8021      	strh	r1, [r4, #0]
10011ca8:	80a2      	strh	r2, [r4, #4]
10011caa:	71c3      	strb	r3, [r0, #7]
10011cac:	3a0c      	subs	r2, #12
10011cae:	2109      	movs	r1, #9
10011cb0:	4b0b      	ldr	r3, [pc, #44]	; (10011ce0 <gapm_cancel_cmd_handler+0x68>)
10011cb2:	7182      	strb	r2, [r0, #6]
10011cb4:	4798      	blx	r3
10011cb6:	1c28      	adds	r0, r5, #0
10011cb8:	4b0a      	ldr	r3, [pc, #40]	; (10011ce4 <gapm_cancel_cmd_handler+0x6c>)
10011cba:	4798      	blx	r3
10011cbc:	7828      	ldrb	r0, [r5, #0]
10011cbe:	2800      	cmp	r0, #0
10011cc0:	d001      	beq.n	10011cc6 <gapm_cancel_cmd_handler+0x4e>
10011cc2:	20e2      	movs	r0, #226	; 0xe2
10011cc4:	e004      	b.n	10011cd0 <gapm_cancel_cmd_handler+0x58>
10011cc6:	68a3      	ldr	r3, [r4, #8]
10011cc8:	785b      	ldrb	r3, [r3, #1]
10011cca:	2b44      	cmp	r3, #68	; 0x44
10011ccc:	d000      	beq.n	10011cd0 <gapm_cancel_cmd_handler+0x58>
10011cce:	1c18      	adds	r0, r3, #0
10011cd0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011cd2:	46c0      	nop			; (mov r8, r8)
10011cd4:	10019a40 	.word	0x10019a40
10011cd8:	10019db0 	.word	0x10019db0
10011cdc:	10019a34 	.word	0x10019a34
10011ce0:	10010e49 	.word	0x10010e49
10011ce4:	10010ead 	.word	0x10010ead

10011ce8 <gapm_dev_bdaddr_ind_handler>:
10011ce8:	b538      	push	{r3, r4, r5, lr}
10011cea:	1c05      	adds	r5, r0, #0
10011cec:	1c0c      	adds	r4, r1, #0
10011cee:	1c48      	adds	r0, r1, #1
10011cf0:	2206      	movs	r2, #6
10011cf2:	1c29      	adds	r1, r5, #0
10011cf4:	4b02      	ldr	r3, [pc, #8]	; (10011d00 <gapm_dev_bdaddr_ind_handler+0x18>)
10011cf6:	4798      	blx	r3
10011cf8:	79ab      	ldrb	r3, [r5, #6]
10011cfa:	2000      	movs	r0, #0
10011cfc:	7023      	strb	r3, [r4, #0]
10011cfe:	bd38      	pop	{r3, r4, r5, pc}
10011d00:	100148df 	.word	0x100148df

10011d04 <gapm_cmp_evt>:
10011d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011d06:	7803      	ldrb	r3, [r0, #0]
10011d08:	7845      	ldrb	r5, [r0, #1]
10011d0a:	3b0c      	subs	r3, #12
10011d0c:	1e18      	subs	r0, r3, #0
10011d0e:	280b      	cmp	r0, #11
10011d10:	d900      	bls.n	10011d14 <gapm_cmp_evt+0x10>
10011d12:	e08d      	b.n	10011e30 <gapm_cmp_evt+0x12c>
10011d14:	1c0c      	adds	r4, r1, #0
10011d16:	f000 fd5f 	bl	100127d8 <__gnu_thumb1_case_uqi>
10011d1a:	1952      	.short	0x1952
10011d1c:	068b1919 	.word	0x068b1919
10011d20:	8b595906 	.word	0x8b595906
10011d24:	0d8b      	.short	0x0d8b
10011d26:	2300      	movs	r3, #0
10011d28:	2d45      	cmp	r5, #69	; 0x45
10011d2a:	d000      	beq.n	10011d2e <gapm_cmp_evt+0x2a>
10011d2c:	1c2b      	adds	r3, r5, #0
10011d2e:	7023      	strb	r3, [r4, #0]
10011d30:	2002      	movs	r0, #2
10011d32:	e07e      	b.n	10011e32 <gapm_cmp_evt+0x12e>
10011d34:	203b      	movs	r0, #59	; 0x3b
10011d36:	2d00      	cmp	r5, #0
10011d38:	d100      	bne.n	10011d3c <gapm_cmp_evt+0x38>
10011d3a:	e07a      	b.n	10011e32 <gapm_cmp_evt+0x12e>
10011d3c:	700d      	strb	r5, [r1, #0]
10011d3e:	1c48      	adds	r0, r1, #1
10011d40:	2210      	movs	r2, #16
10011d42:	2100      	movs	r1, #0
10011d44:	4b3b      	ldr	r3, [pc, #236]	; (10011e34 <gapm_cmp_evt+0x130>)
10011d46:	4798      	blx	r3
10011d48:	200f      	movs	r0, #15
10011d4a:	e072      	b.n	10011e32 <gapm_cmp_evt+0x12e>
10011d4c:	2d00      	cmp	r5, #0
10011d4e:	d134      	bne.n	10011dba <gapm_cmp_evt+0xb6>
10011d50:	4b39      	ldr	r3, [pc, #228]	; (10011e38 <gapm_cmp_evt+0x134>)
10011d52:	4798      	blx	r3
10011d54:	1e43      	subs	r3, r0, #1
10011d56:	b2db      	uxtb	r3, r3
10011d58:	1c28      	adds	r0, r5, #0
10011d5a:	2b06      	cmp	r3, #6
10011d5c:	d869      	bhi.n	10011e32 <gapm_cmp_evt+0x12e>
10011d5e:	466b      	mov	r3, sp
10011d60:	4e36      	ldr	r6, [pc, #216]	; (10011e3c <gapm_cmp_evt+0x138>)
10011d62:	1dd9      	adds	r1, r3, #7
10011d64:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011d66:	4b36      	ldr	r3, [pc, #216]	; (10011e40 <gapm_cmp_evt+0x13c>)
10011d68:	4798      	blx	r3
10011d6a:	2312      	movs	r3, #18
10011d6c:	4358      	muls	r0, r3
10011d6e:	4935      	ldr	r1, [pc, #212]	; (10011e44 <gapm_cmp_evt+0x140>)
10011d70:	1809      	adds	r1, r1, r0
10011d72:	1c0b      	adds	r3, r1, #0
10011d74:	894a      	ldrh	r2, [r1, #10]
10011d76:	3308      	adds	r3, #8
10011d78:	8122      	strh	r2, [r4, #8]
10011d7a:	784f      	ldrb	r7, [r1, #1]
10011d7c:	72a5      	strb	r5, [r4, #10]
10011d7e:	7027      	strb	r7, [r4, #0]
10011d80:	898a      	ldrh	r2, [r1, #12]
10011d82:	1c60      	adds	r0, r4, #1
10011d84:	81a2      	strh	r2, [r4, #12]
10011d86:	88db      	ldrh	r3, [r3, #6]
10011d88:	3102      	adds	r1, #2
10011d8a:	81e3      	strh	r3, [r4, #14]
10011d8c:	89cb      	ldrh	r3, [r1, #14]
10011d8e:	2206      	movs	r2, #6
10011d90:	8223      	strh	r3, [r4, #16]
10011d92:	4b2d      	ldr	r3, [pc, #180]	; (10011e48 <gapm_cmp_evt+0x144>)
10011d94:	4798      	blx	r3
10011d96:	2f00      	cmp	r7, #0
10011d98:	d00a      	beq.n	10011db0 <gapm_cmp_evt+0xac>
10011d9a:	79a3      	ldrb	r3, [r4, #6]
10011d9c:	223f      	movs	r2, #63	; 0x3f
10011d9e:	1c19      	adds	r1, r3, #0
10011da0:	3501      	adds	r5, #1
10011da2:	4391      	bics	r1, r2
10011da4:	29c0      	cmp	r1, #192	; 0xc0
10011da6:	d003      	beq.n	10011db0 <gapm_cmp_evt+0xac>
10011da8:	065b      	lsls	r3, r3, #25
10011daa:	0fdb      	lsrs	r3, r3, #31
10011dac:	3502      	adds	r5, #2
10011dae:	1aed      	subs	r5, r5, r3
10011db0:	2301      	movs	r3, #1
10011db2:	425b      	negs	r3, r3
10011db4:	7025      	strb	r5, [r4, #0]
10011db6:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011db8:	e038      	b.n	10011e2c <gapm_cmp_evt+0x128>
10011dba:	700d      	strb	r5, [r1, #0]
10011dbc:	e004      	b.n	10011dc8 <gapm_cmp_evt+0xc4>
10011dbe:	2300      	movs	r3, #0
10011dc0:	2d45      	cmp	r5, #69	; 0x45
10011dc2:	d000      	beq.n	10011dc6 <gapm_cmp_evt+0xc2>
10011dc4:	1c2b      	adds	r3, r5, #0
10011dc6:	7023      	strb	r3, [r4, #0]
10011dc8:	2003      	movs	r0, #3
10011dca:	e032      	b.n	10011e32 <gapm_cmp_evt+0x12e>
10011dcc:	4e1b      	ldr	r6, [pc, #108]	; (10011e3c <gapm_cmp_evt+0x138>)
10011dce:	2100      	movs	r1, #0
10011dd0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011dd2:	4b1b      	ldr	r3, [pc, #108]	; (10011e40 <gapm_cmp_evt+0x13c>)
10011dd4:	4798      	blx	r3
10011dd6:	2807      	cmp	r0, #7
10011dd8:	d818      	bhi.n	10011e0c <gapm_cmp_evt+0x108>
10011dda:	2301      	movs	r3, #1
10011ddc:	425b      	negs	r3, r3
10011dde:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011de0:	3313      	adds	r3, #19
10011de2:	4358      	muls	r0, r3
10011de4:	4917      	ldr	r1, [pc, #92]	; (10011e44 <gapm_cmp_evt+0x140>)
10011de6:	1809      	adds	r1, r1, r0
10011de8:	1c0b      	adds	r3, r1, #0
10011dea:	894a      	ldrh	r2, [r1, #10]
10011dec:	3308      	adds	r3, #8
10011dee:	8122      	strh	r2, [r4, #8]
10011df0:	784a      	ldrb	r2, [r1, #1]
10011df2:	72a5      	strb	r5, [r4, #10]
10011df4:	7022      	strb	r2, [r4, #0]
10011df6:	898a      	ldrh	r2, [r1, #12]
10011df8:	1c60      	adds	r0, r4, #1
10011dfa:	81a2      	strh	r2, [r4, #12]
10011dfc:	88db      	ldrh	r3, [r3, #6]
10011dfe:	3102      	adds	r1, #2
10011e00:	81e3      	strh	r3, [r4, #14]
10011e02:	89cb      	ldrh	r3, [r1, #14]
10011e04:	2206      	movs	r2, #6
10011e06:	8223      	strh	r3, [r4, #16]
10011e08:	4b0f      	ldr	r3, [pc, #60]	; (10011e48 <gapm_cmp_evt+0x144>)
10011e0a:	4798      	blx	r3
10011e0c:	2200      	movs	r2, #0
10011e0e:	7823      	ldrb	r3, [r4, #0]
10011e10:	4293      	cmp	r3, r2
10011e12:	d00a      	beq.n	10011e2a <gapm_cmp_evt+0x126>
10011e14:	79a3      	ldrb	r3, [r4, #6]
10011e16:	323f      	adds	r2, #63	; 0x3f
10011e18:	1c19      	adds	r1, r3, #0
10011e1a:	4391      	bics	r1, r2
10011e1c:	3a3e      	subs	r2, #62	; 0x3e
10011e1e:	29c0      	cmp	r1, #192	; 0xc0
10011e20:	d003      	beq.n	10011e2a <gapm_cmp_evt+0x126>
10011e22:	065b      	lsls	r3, r3, #25
10011e24:	0fdb      	lsrs	r3, r3, #31
10011e26:	3202      	adds	r2, #2
10011e28:	1ad2      	subs	r2, r2, r3
10011e2a:	7022      	strb	r2, [r4, #0]
10011e2c:	2005      	movs	r0, #5
10011e2e:	e000      	b.n	10011e32 <gapm_cmp_evt+0x12e>
10011e30:	2000      	movs	r0, #0
10011e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011e34:	100148f1 	.word	0x100148f1
10011e38:	10011055 	.word	0x10011055
10011e3c:	10019ad2 	.word	0x10019ad2
10011e40:	10011019 	.word	0x10011019
10011e44:	10019a42 	.word	0x10019a42
10011e48:	100148df 	.word	0x100148df

10011e4c <gapm_start_adv_cmd_handler>:
10011e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e4e:	b089      	sub	sp, #36	; 0x24
10011e50:	9303      	str	r3, [sp, #12]
10011e52:	ab0e      	add	r3, sp, #56	; 0x38
10011e54:	9102      	str	r1, [sp, #8]
10011e56:	cb02      	ldmia	r3!, {r1}
10011e58:	aa08      	add	r2, sp, #32
10011e5a:	881b      	ldrh	r3, [r3, #0]
10011e5c:	4e3c      	ldr	r6, [pc, #240]	; (10011f50 <gapm_start_adv_cmd_handler+0x104>)
10011e5e:	9300      	str	r3, [sp, #0]
10011e60:	ab10      	add	r3, sp, #64	; 0x40
10011e62:	881b      	ldrh	r3, [r3, #0]
10011e64:	240d      	movs	r4, #13
10011e66:	469c      	mov	ip, r3
10011e68:	ab11      	add	r3, sp, #68	; 0x44
10011e6a:	781b      	ldrb	r3, [r3, #0]
10011e6c:	9304      	str	r3, [sp, #16]
10011e6e:	ab12      	add	r3, sp, #72	; 0x48
10011e70:	781b      	ldrb	r3, [r3, #0]
10011e72:	9305      	str	r3, [sp, #20]
10011e74:	ab13      	add	r3, sp, #76	; 0x4c
10011e76:	781b      	ldrb	r3, [r3, #0]
10011e78:	9306      	str	r3, [sp, #24]
10011e7a:	ab14      	add	r3, sp, #80	; 0x50
10011e7c:	781b      	ldrb	r3, [r3, #0]
10011e7e:	9301      	str	r3, [sp, #4]
10011e80:	2319      	movs	r3, #25
10011e82:	189b      	adds	r3, r3, r2
10011e84:	7fdd      	ldrb	r5, [r3, #31]
10011e86:	ab18      	add	r3, sp, #96	; 0x60
10011e88:	881f      	ldrh	r7, [r3, #0]
10011e8a:	ab19      	add	r3, sp, #100	; 0x64
10011e8c:	781b      	ldrb	r3, [r3, #0]
10011e8e:	8832      	ldrh	r2, [r6, #0]
10011e90:	9307      	str	r3, [sp, #28]
10011e92:	4b30      	ldr	r3, [pc, #192]	; (10011f54 <gapm_start_adv_cmd_handler+0x108>)
10011e94:	8836      	ldrh	r6, [r6, #0]
10011e96:	711a      	strb	r2, [r3, #4]
10011e98:	466a      	mov	r2, sp
10011e9a:	7a12      	ldrb	r2, [r2, #8]
10011e9c:	701c      	strb	r4, [r3, #0]
10011e9e:	705c      	strb	r4, [r3, #1]
10011ea0:	709c      	strb	r4, [r3, #2]
10011ea2:	725a      	strb	r2, [r3, #9]
10011ea4:	2400      	movs	r4, #0
10011ea6:	466a      	mov	r2, sp
10011ea8:	0a36      	lsrs	r6, r6, #8
10011eaa:	70dc      	strb	r4, [r3, #3]
10011eac:	7218      	strb	r0, [r3, #8]
10011eae:	729c      	strb	r4, [r3, #10]
10011eb0:	715e      	strb	r6, [r3, #5]
10011eb2:	72dc      	strb	r4, [r3, #11]
10011eb4:	7812      	ldrb	r2, [r2, #0]
10011eb6:	380e      	subs	r0, #14
10011eb8:	731a      	strb	r2, [r3, #12]
10011eba:	9a00      	ldr	r2, [sp, #0]
10011ebc:	0a14      	lsrs	r4, r2, #8
10011ebe:	4662      	mov	r2, ip
10011ec0:	739a      	strb	r2, [r3, #14]
10011ec2:	4662      	mov	r2, ip
10011ec4:	735c      	strb	r4, [r3, #13]
10011ec6:	0a14      	lsrs	r4, r2, #8
10011ec8:	466a      	mov	r2, sp
10011eca:	7c12      	ldrb	r2, [r2, #16]
10011ecc:	73dc      	strb	r4, [r3, #15]
10011ece:	741a      	strb	r2, [r3, #16]
10011ed0:	1c1c      	adds	r4, r3, #0
10011ed2:	2801      	cmp	r0, #1
10011ed4:	d809      	bhi.n	10011eea <gapm_start_adv_cmd_handler+0x9e>
10011ed6:	2900      	cmp	r1, #0
10011ed8:	d003      	beq.n	10011ee2 <gapm_start_adv_cmd_handler+0x96>
10011eda:	481f      	ldr	r0, [pc, #124]	; (10011f58 <gapm_start_adv_cmd_handler+0x10c>)
10011edc:	2206      	movs	r2, #6
10011ede:	4b1f      	ldr	r3, [pc, #124]	; (10011f5c <gapm_start_adv_cmd_handler+0x110>)
10011ee0:	4798      	blx	r3
10011ee2:	466b      	mov	r3, sp
10011ee4:	7b1b      	ldrb	r3, [r3, #12]
10011ee6:	75e3      	strb	r3, [r4, #23]
10011ee8:	e014      	b.n	10011f14 <gapm_start_adv_cmd_handler+0xc8>
10011eea:	466b      	mov	r3, sp
10011eec:	7d1b      	ldrb	r3, [r3, #20]
10011eee:	9915      	ldr	r1, [sp, #84]	; 0x54
10011ef0:	7463      	strb	r3, [r4, #17]
10011ef2:	466b      	mov	r3, sp
10011ef4:	7e1b      	ldrb	r3, [r3, #24]
10011ef6:	9a01      	ldr	r2, [sp, #4]
10011ef8:	74a3      	strb	r3, [r4, #18]
10011efa:	466b      	mov	r3, sp
10011efc:	791b      	ldrb	r3, [r3, #4]
10011efe:	4818      	ldr	r0, [pc, #96]	; (10011f60 <gapm_start_adv_cmd_handler+0x114>)
10011f00:	4e16      	ldr	r6, [pc, #88]	; (10011f5c <gapm_start_adv_cmd_handler+0x110>)
10011f02:	74e3      	strb	r3, [r4, #19]
10011f04:	47b0      	blx	r6
10011f06:	1c23      	adds	r3, r4, #0
10011f08:	4816      	ldr	r0, [pc, #88]	; (10011f64 <gapm_start_adv_cmd_handler+0x118>)
10011f0a:	3330      	adds	r3, #48	; 0x30
10011f0c:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011f0e:	1c2a      	adds	r2, r5, #0
10011f10:	701d      	strb	r5, [r3, #0]
10011f12:	47b0      	blx	r6
10011f14:	1c22      	adds	r2, r4, #0
10011f16:	23a5      	movs	r3, #165	; 0xa5
10011f18:	3250      	adds	r2, #80	; 0x50
10011f1a:	7013      	strb	r3, [r2, #0]
10011f1c:	1c22      	adds	r2, r4, #0
10011f1e:	3251      	adds	r2, #81	; 0x51
10011f20:	7013      	strb	r3, [r2, #0]
10011f22:	1c23      	adds	r3, r4, #0
10011f24:	1c22      	adds	r2, r4, #0
10011f26:	3352      	adds	r3, #82	; 0x52
10011f28:	701f      	strb	r7, [r3, #0]
10011f2a:	3253      	adds	r2, #83	; 0x53
10011f2c:	0a3b      	lsrs	r3, r7, #8
10011f2e:	7013      	strb	r3, [r2, #0]
10011f30:	466a      	mov	r2, sp
10011f32:	1c23      	adds	r3, r4, #0
10011f34:	7f12      	ldrb	r2, [r2, #28]
10011f36:	3354      	adds	r3, #84	; 0x54
10011f38:	701a      	strb	r2, [r3, #0]
10011f3a:	234d      	movs	r3, #77	; 0x4d
10011f3c:	2500      	movs	r5, #0
10011f3e:	71a3      	strb	r3, [r4, #6]
10011f40:	1c20      	adds	r0, r4, #0
10011f42:	2155      	movs	r1, #85	; 0x55
10011f44:	4b08      	ldr	r3, [pc, #32]	; (10011f68 <gapm_start_adv_cmd_handler+0x11c>)
10011f46:	71e5      	strb	r5, [r4, #7]
10011f48:	4798      	blx	r3
10011f4a:	1c28      	adds	r0, r5, #0
10011f4c:	b009      	add	sp, #36	; 0x24
10011f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f50:	10019a40 	.word	0x10019a40
10011f54:	10019db0 	.word	0x10019db0
10011f58:	10019dc1 	.word	0x10019dc1
10011f5c:	100148df 	.word	0x100148df
10011f60:	10019dc4 	.word	0x10019dc4
10011f64:	10019de1 	.word	0x10019de1
10011f68:	10010e49 	.word	0x10010e49

10011f6c <get_gap_local_addr_type>:
10011f6c:	4b04      	ldr	r3, [pc, #16]	; (10011f80 <get_gap_local_addr_type+0x14>)
10011f6e:	2001      	movs	r0, #1
10011f70:	791b      	ldrb	r3, [r3, #4]
10011f72:	2b02      	cmp	r3, #2
10011f74:	d003      	beq.n	10011f7e <get_gap_local_addr_type+0x12>
10011f76:	3b03      	subs	r3, #3
10011f78:	4258      	negs	r0, r3
10011f7a:	4158      	adcs	r0, r3
10011f7c:	0040      	lsls	r0, r0, #1
10011f7e:	4770      	bx	lr
10011f80:	10019ad2 	.word	0x10019ad2

10011f84 <gapm_adv_report_evt_handler>:
10011f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011f86:	7843      	ldrb	r3, [r0, #1]
10011f88:	1c05      	adds	r5, r0, #0
10011f8a:	9301      	str	r3, [sp, #4]
10011f8c:	466b      	mov	r3, sp
10011f8e:	1c0c      	adds	r4, r1, #0
10011f90:	791b      	ldrb	r3, [r3, #4]
10011f92:	7806      	ldrb	r6, [r0, #0]
10011f94:	2206      	movs	r2, #6
10011f96:	704b      	strb	r3, [r1, #1]
10011f98:	1c88      	adds	r0, r1, #2
10011f9a:	4f1b      	ldr	r7, [pc, #108]	; (10012008 <gapm_adv_report_evt_handler+0x84>)
10011f9c:	1ca9      	adds	r1, r5, #2
10011f9e:	47b8      	blx	r7
10011fa0:	1c20      	adds	r0, r4, #0
10011fa2:	1c29      	adds	r1, r5, #0
10011fa4:	7a2a      	ldrb	r2, [r5, #8]
10011fa6:	3008      	adds	r0, #8
10011fa8:	77c2      	strb	r2, [r0, #31]
10011faa:	3109      	adds	r1, #9
10011fac:	3528      	adds	r5, #40	; 0x28
10011fae:	47b8      	blx	r7
10011fb0:	782b      	ldrb	r3, [r5, #0]
10011fb2:	b25a      	sxtb	r2, r3
10011fb4:	2a00      	cmp	r2, #0
10011fb6:	da01      	bge.n	10011fbc <gapm_adv_report_evt_handler+0x38>
10011fb8:	3301      	adds	r3, #1
10011fba:	b2db      	uxtb	r3, r3
10011fbc:	1c22      	adds	r2, r4, #0
10011fbe:	3228      	adds	r2, #40	; 0x28
10011fc0:	7013      	strb	r3, [r2, #0]
10011fc2:	2200      	movs	r2, #0
10011fc4:	9b01      	ldr	r3, [sp, #4]
10011fc6:	4293      	cmp	r3, r2
10011fc8:	d00a      	beq.n	10011fe0 <gapm_adv_report_evt_handler+0x5c>
10011fca:	79e3      	ldrb	r3, [r4, #7]
10011fcc:	323f      	adds	r2, #63	; 0x3f
10011fce:	1c19      	adds	r1, r3, #0
10011fd0:	4391      	bics	r1, r2
10011fd2:	3a3e      	subs	r2, #62	; 0x3e
10011fd4:	29c0      	cmp	r1, #192	; 0xc0
10011fd6:	d003      	beq.n	10011fe0 <gapm_adv_report_evt_handler+0x5c>
10011fd8:	065b      	lsls	r3, r3, #25
10011fda:	0fdb      	lsrs	r3, r3, #31
10011fdc:	3202      	adds	r2, #2
10011fde:	1ad2      	subs	r2, r2, r3
10011fe0:	7062      	strb	r2, [r4, #1]
10011fe2:	2e04      	cmp	r6, #4
10011fe4:	d80f      	bhi.n	10012006 <gapm_adv_report_evt_handler+0x82>
10011fe6:	1c30      	adds	r0, r6, #0
10011fe8:	f000 fbf6 	bl	100127d8 <__gnu_thumb1_case_uqi>
10011fec:	09070503 	.word	0x09070503
10011ff0:	0b          	.byte	0x0b
10011ff1:	00          	.byte	0x00
10011ff2:	2300      	movs	r3, #0
10011ff4:	e006      	b.n	10012004 <gapm_adv_report_evt_handler+0x80>
10011ff6:	2301      	movs	r3, #1
10011ff8:	e004      	b.n	10012004 <gapm_adv_report_evt_handler+0x80>
10011ffa:	2302      	movs	r3, #2
10011ffc:	e002      	b.n	10012004 <gapm_adv_report_evt_handler+0x80>
10011ffe:	2303      	movs	r3, #3
10012000:	e000      	b.n	10012004 <gapm_adv_report_evt_handler+0x80>
10012002:	2305      	movs	r3, #5
10012004:	7023      	strb	r3, [r4, #0]
10012006:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012008:	100148df 	.word	0x100148df

1001200c <gapm_resolv_addr_cmd_handler>:
1001200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001200e:	2314      	movs	r3, #20
10012010:	4c12      	ldr	r4, [pc, #72]	; (1001205c <gapm_resolv_addr_cmd_handler+0x50>)
10012012:	1c17      	adds	r7, r2, #0
10012014:	7023      	strb	r3, [r4, #0]
10012016:	3b07      	subs	r3, #7
10012018:	7063      	strb	r3, [r4, #1]
1001201a:	70a3      	strb	r3, [r4, #2]
1001201c:	2300      	movs	r3, #0
1001201e:	70e3      	strb	r3, [r4, #3]
10012020:	4b0f      	ldr	r3, [pc, #60]	; (10012060 <gapm_resolv_addr_cmd_handler+0x54>)
10012022:	1c05      	adds	r5, r0, #0
10012024:	881a      	ldrh	r2, [r3, #0]
10012026:	881b      	ldrh	r3, [r3, #0]
10012028:	4e0e      	ldr	r6, [pc, #56]	; (10012064 <gapm_resolv_addr_cmd_handler+0x58>)
1001202a:	0a1b      	lsrs	r3, r3, #8
1001202c:	7163      	strb	r3, [r4, #5]
1001202e:	2317      	movs	r3, #23
10012030:	012d      	lsls	r5, r5, #4
10012032:	7122      	strb	r2, [r4, #4]
10012034:	7260      	strb	r0, [r4, #9]
10012036:	2206      	movs	r2, #6
10012038:	480b      	ldr	r0, [pc, #44]	; (10012068 <gapm_resolv_addr_cmd_handler+0x5c>)
1001203a:	7223      	strb	r3, [r4, #8]
1001203c:	47b0      	blx	r6
1001203e:	1c39      	adds	r1, r7, #0
10012040:	1c2a      	adds	r2, r5, #0
10012042:	480a      	ldr	r0, [pc, #40]	; (1001206c <gapm_resolv_addr_cmd_handler+0x60>)
10012044:	47b0      	blx	r6
10012046:	1c29      	adds	r1, r5, #0
10012048:	3110      	adds	r1, #16
1001204a:	1c0b      	adds	r3, r1, #0
1001204c:	3b08      	subs	r3, #8
1001204e:	71a3      	strb	r3, [r4, #6]
10012050:	121b      	asrs	r3, r3, #8
10012052:	71e3      	strb	r3, [r4, #7]
10012054:	1c20      	adds	r0, r4, #0
10012056:	4b06      	ldr	r3, [pc, #24]	; (10012070 <gapm_resolv_addr_cmd_handler+0x64>)
10012058:	4798      	blx	r3
1001205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001205c:	10019db0 	.word	0x10019db0
10012060:	10019a40 	.word	0x10019a40
10012064:	100148df 	.word	0x100148df
10012068:	10019dba 	.word	0x10019dba
1001206c:	10019dc0 	.word	0x10019dc0
10012070:	10010e49 	.word	0x10010e49

10012074 <gapm_addr_solved_ind_handler>:
10012074:	b570      	push	{r4, r5, r6, lr}
10012076:	1c04      	adds	r4, r0, #0
10012078:	1c08      	adds	r0, r1, #0
1001207a:	1c0d      	adds	r5, r1, #0
1001207c:	4e05      	ldr	r6, [pc, #20]	; (10012094 <gapm_addr_solved_ind_handler+0x20>)
1001207e:	1c21      	adds	r1, r4, #0
10012080:	2206      	movs	r2, #6
10012082:	3011      	adds	r0, #17
10012084:	47b0      	blx	r6
10012086:	1c68      	adds	r0, r5, #1
10012088:	1da1      	adds	r1, r4, #6
1001208a:	2210      	movs	r2, #16
1001208c:	47b0      	blx	r6
1001208e:	2300      	movs	r3, #0
10012090:	702b      	strb	r3, [r5, #0]
10012092:	bd70      	pop	{r4, r5, r6, pc}
10012094:	100148df 	.word	0x100148df

10012098 <gapm_profile_added_ind_handler>:
10012098:	b510      	push	{r4, lr}
1001209a:	7843      	ldrb	r3, [r0, #1]
1001209c:	7902      	ldrb	r2, [r0, #4]
1001209e:	7944      	ldrb	r4, [r0, #5]
100120a0:	7800      	ldrb	r0, [r0, #0]
100120a2:	021b      	lsls	r3, r3, #8
100120a4:	4303      	orrs	r3, r0
100120a6:	2b1b      	cmp	r3, #27
100120a8:	d104      	bne.n	100120b4 <gapm_profile_added_ind_handler+0x1c>
100120aa:	2300      	movs	r3, #0
100120ac:	700b      	strb	r3, [r1, #0]
100120ae:	0223      	lsls	r3, r4, #8
100120b0:	4313      	orrs	r3, r2
100120b2:	804b      	strh	r3, [r1, #2]
100120b4:	203b      	movs	r0, #59	; 0x3b
100120b6:	bd10      	pop	{r4, pc}

100120b8 <gattc_read_req_ind_parser>:
100120b8:	7843      	ldrb	r3, [r0, #1]
100120ba:	7802      	ldrb	r2, [r0, #0]
100120bc:	021b      	lsls	r3, r3, #8
100120be:	4313      	orrs	r3, r2
100120c0:	804b      	strh	r3, [r1, #2]
100120c2:	4770      	bx	lr

100120c4 <gattc_write_req_ind_parser>:
100120c4:	b508      	push	{r3, lr}
100120c6:	1c13      	adds	r3, r2, #0
100120c8:	0a00      	lsrs	r0, r0, #8
100120ca:	8010      	strh	r0, [r2, #0]
100120cc:	784a      	ldrb	r2, [r1, #1]
100120ce:	7808      	ldrb	r0, [r1, #0]
100120d0:	0212      	lsls	r2, r2, #8
100120d2:	4302      	orrs	r2, r0
100120d4:	805a      	strh	r2, [r3, #2]
100120d6:	78ca      	ldrb	r2, [r1, #3]
100120d8:	7888      	ldrb	r0, [r1, #2]
100120da:	0212      	lsls	r2, r2, #8
100120dc:	4302      	orrs	r2, r0
100120de:	809a      	strh	r2, [r3, #4]
100120e0:	794a      	ldrb	r2, [r1, #5]
100120e2:	7908      	ldrb	r0, [r1, #4]
100120e4:	0212      	lsls	r2, r2, #8
100120e6:	4302      	orrs	r2, r0
100120e8:	80da      	strh	r2, [r3, #6]
100120ea:	3308      	adds	r3, #8
100120ec:	1c18      	adds	r0, r3, #0
100120ee:	3106      	adds	r1, #6
100120f0:	4b01      	ldr	r3, [pc, #4]	; (100120f8 <gattc_write_req_ind_parser+0x34>)
100120f2:	4798      	blx	r3
100120f4:	bd08      	pop	{r3, pc}
100120f6:	46c0      	nop			; (mov r8, r8)
100120f8:	100148df 	.word	0x100148df

100120fc <gattc_att_info_req_parser>:
100120fc:	7843      	ldrb	r3, [r0, #1]
100120fe:	7802      	ldrb	r2, [r0, #0]
10012100:	021b      	lsls	r3, r3, #8
10012102:	4313      	orrs	r3, r2
10012104:	800b      	strh	r3, [r1, #0]
10012106:	4770      	bx	lr

10012108 <gattc_read_cfm>:
10012108:	b538      	push	{r3, r4, r5, lr}
1001210a:	2514      	movs	r5, #20
1001210c:	1c1c      	adds	r4, r3, #0
1001210e:	4b14      	ldr	r3, [pc, #80]	; (10012160 <gattc_read_cfm+0x58>)
10012110:	70d9      	strb	r1, [r3, #3]
10012112:	4914      	ldr	r1, [pc, #80]	; (10012164 <gattc_read_cfm+0x5c>)
10012114:	701d      	strb	r5, [r3, #0]
10012116:	3d08      	subs	r5, #8
10012118:	705d      	strb	r5, [r3, #1]
1001211a:	709d      	strb	r5, [r3, #2]
1001211c:	880d      	ldrh	r5, [r1, #0]
1001211e:	8809      	ldrh	r1, [r1, #0]
10012120:	7218      	strb	r0, [r3, #8]
10012122:	0a09      	lsrs	r1, r1, #8
10012124:	7159      	strb	r1, [r3, #5]
10012126:	0a00      	lsrs	r0, r0, #8
10012128:	0a21      	lsrs	r1, r4, #8
1001212a:	711d      	strb	r5, [r3, #4]
1001212c:	7258      	strb	r0, [r3, #9]
1001212e:	729c      	strb	r4, [r3, #10]
10012130:	72d9      	strb	r1, [r3, #11]
10012132:	731a      	strb	r2, [r3, #12]
10012134:	1c1d      	adds	r5, r3, #0
10012136:	2c00      	cmp	r4, #0
10012138:	d007      	beq.n	1001214a <gattc_read_cfm+0x42>
1001213a:	9904      	ldr	r1, [sp, #16]
1001213c:	1c22      	adds	r2, r4, #0
1001213e:	480a      	ldr	r0, [pc, #40]	; (10012168 <gattc_read_cfm+0x60>)
10012140:	4b0a      	ldr	r3, [pc, #40]	; (1001216c <gattc_read_cfm+0x64>)
10012142:	340d      	adds	r4, #13
10012144:	4798      	blx	r3
10012146:	b2a1      	uxth	r1, r4
10012148:	e001      	b.n	1001214e <gattc_read_cfm+0x46>
1001214a:	210e      	movs	r1, #14
1001214c:	735c      	strb	r4, [r3, #13]
1001214e:	1c0b      	adds	r3, r1, #0
10012150:	3b08      	subs	r3, #8
10012152:	71ab      	strb	r3, [r5, #6]
10012154:	121b      	asrs	r3, r3, #8
10012156:	71eb      	strb	r3, [r5, #7]
10012158:	1c28      	adds	r0, r5, #0
1001215a:	4b05      	ldr	r3, [pc, #20]	; (10012170 <gattc_read_cfm+0x68>)
1001215c:	4798      	blx	r3
1001215e:	bd38      	pop	{r3, r4, r5, pc}
10012160:	10019db0 	.word	0x10019db0
10012164:	10019a40 	.word	0x10019a40
10012168:	10019dbd 	.word	0x10019dbd
1001216c:	100148df 	.word	0x100148df
10012170:	10010e49 	.word	0x10010e49

10012174 <gattc_write_cfm>:
10012174:	4b0d      	ldr	r3, [pc, #52]	; (100121ac <gattc_write_cfm+0x38>)
10012176:	b510      	push	{r4, lr}
10012178:	729a      	strb	r2, [r3, #10]
1001217a:	2203      	movs	r2, #3
1001217c:	2416      	movs	r4, #22
1001217e:	719a      	strb	r2, [r3, #6]
10012180:	2200      	movs	r2, #0
10012182:	70d9      	strb	r1, [r3, #3]
10012184:	490a      	ldr	r1, [pc, #40]	; (100121b0 <gattc_write_cfm+0x3c>)
10012186:	701c      	strb	r4, [r3, #0]
10012188:	3c0a      	subs	r4, #10
1001218a:	705c      	strb	r4, [r3, #1]
1001218c:	709c      	strb	r4, [r3, #2]
1001218e:	880c      	ldrh	r4, [r1, #0]
10012190:	8809      	ldrh	r1, [r1, #0]
10012192:	7218      	strb	r0, [r3, #8]
10012194:	0a09      	lsrs	r1, r1, #8
10012196:	0a00      	lsrs	r0, r0, #8
10012198:	711c      	strb	r4, [r3, #4]
1001219a:	7159      	strb	r1, [r3, #5]
1001219c:	7258      	strb	r0, [r3, #9]
1001219e:	71da      	strb	r2, [r3, #7]
100121a0:	1c18      	adds	r0, r3, #0
100121a2:	210b      	movs	r1, #11
100121a4:	4b03      	ldr	r3, [pc, #12]	; (100121b4 <gattc_write_cfm+0x40>)
100121a6:	4798      	blx	r3
100121a8:	bd10      	pop	{r4, pc}
100121aa:	46c0      	nop			; (mov r8, r8)
100121ac:	10019db0 	.word	0x10019db0
100121b0:	10019a40 	.word	0x10019a40
100121b4:	10010e49 	.word	0x10010e49

100121b8 <gattc_att_info_cfm>:
100121b8:	b538      	push	{r3, r4, r5, lr}
100121ba:	4c0e      	ldr	r4, [pc, #56]	; (100121f4 <gattc_att_info_cfm+0x3c>)
100121bc:	2518      	movs	r5, #24
100121be:	7323      	strb	r3, [r4, #12]
100121c0:	2305      	movs	r3, #5
100121c2:	71a3      	strb	r3, [r4, #6]
100121c4:	2300      	movs	r3, #0
100121c6:	70e1      	strb	r1, [r4, #3]
100121c8:	490b      	ldr	r1, [pc, #44]	; (100121f8 <gattc_att_info_cfm+0x40>)
100121ca:	7025      	strb	r5, [r4, #0]
100121cc:	3d0c      	subs	r5, #12
100121ce:	7065      	strb	r5, [r4, #1]
100121d0:	70a5      	strb	r5, [r4, #2]
100121d2:	880d      	ldrh	r5, [r1, #0]
100121d4:	8809      	ldrh	r1, [r1, #0]
100121d6:	7220      	strb	r0, [r4, #8]
100121d8:	0a09      	lsrs	r1, r1, #8
100121da:	0a00      	lsrs	r0, r0, #8
100121dc:	7161      	strb	r1, [r4, #5]
100121de:	7260      	strb	r0, [r4, #9]
100121e0:	72a2      	strb	r2, [r4, #10]
100121e2:	71e3      	strb	r3, [r4, #7]
100121e4:	0a12      	lsrs	r2, r2, #8
100121e6:	1c20      	adds	r0, r4, #0
100121e8:	210d      	movs	r1, #13
100121ea:	4b04      	ldr	r3, [pc, #16]	; (100121fc <gattc_att_info_cfm+0x44>)
100121ec:	7125      	strb	r5, [r4, #4]
100121ee:	72e2      	strb	r2, [r4, #11]
100121f0:	4798      	blx	r3
100121f2:	bd38      	pop	{r3, r4, r5, pc}
100121f4:	10019db0 	.word	0x10019db0
100121f8:	10019a40 	.word	0x10019a40
100121fc:	10010e49 	.word	0x10010e49

10012200 <gattc_send_evt_cmd_handler>:
10012200:	b570      	push	{r4, r5, r6, lr}
10012202:	2610      	movs	r6, #16
10012204:	ac04      	add	r4, sp, #16
10012206:	8825      	ldrh	r5, [r4, #0]
10012208:	4c15      	ldr	r4, [pc, #84]	; (10012260 <gattc_send_evt_cmd_handler+0x60>)
1001220a:	70e2      	strb	r2, [r4, #3]
1001220c:	4a15      	ldr	r2, [pc, #84]	; (10012264 <gattc_send_evt_cmd_handler+0x64>)
1001220e:	7026      	strb	r6, [r4, #0]
10012210:	3e04      	subs	r6, #4
10012212:	7066      	strb	r6, [r4, #1]
10012214:	70a6      	strb	r6, [r4, #2]
10012216:	8816      	ldrh	r6, [r2, #0]
10012218:	8812      	ldrh	r2, [r2, #0]
1001221a:	7220      	strb	r0, [r4, #8]
1001221c:	0a12      	lsrs	r2, r2, #8
1001221e:	7162      	strb	r2, [r4, #5]
10012220:	4a11      	ldr	r2, [pc, #68]	; (10012268 <gattc_send_evt_cmd_handler+0x68>)
10012222:	7321      	strb	r1, [r4, #12]
10012224:	8812      	ldrh	r2, [r2, #0]
10012226:	73a5      	strb	r5, [r4, #14]
10012228:	3201      	adds	r2, #1
1001222a:	7262      	strb	r2, [r4, #9]
1001222c:	1212      	asrs	r2, r2, #8
1001222e:	72a2      	strb	r2, [r4, #10]
10012230:	2200      	movs	r2, #0
10012232:	72e2      	strb	r2, [r4, #11]
10012234:	0a0a      	lsrs	r2, r1, #8
10012236:	7362      	strb	r2, [r4, #13]
10012238:	0a2a      	lsrs	r2, r5, #8
1001223a:	73e2      	strb	r2, [r4, #15]
1001223c:	1c19      	adds	r1, r3, #0
1001223e:	1c2a      	adds	r2, r5, #0
10012240:	4b0a      	ldr	r3, [pc, #40]	; (1001226c <gattc_send_evt_cmd_handler+0x6c>)
10012242:	3510      	adds	r5, #16
10012244:	480a      	ldr	r0, [pc, #40]	; (10012270 <gattc_send_evt_cmd_handler+0x70>)
10012246:	7126      	strb	r6, [r4, #4]
10012248:	4798      	blx	r3
1001224a:	b2a9      	uxth	r1, r5
1001224c:	1c0b      	adds	r3, r1, #0
1001224e:	3b08      	subs	r3, #8
10012250:	71a3      	strb	r3, [r4, #6]
10012252:	121b      	asrs	r3, r3, #8
10012254:	71e3      	strb	r3, [r4, #7]
10012256:	1c20      	adds	r0, r4, #0
10012258:	4b06      	ldr	r3, [pc, #24]	; (10012274 <gattc_send_evt_cmd_handler+0x74>)
1001225a:	4798      	blx	r3
1001225c:	bd70      	pop	{r4, r5, r6, pc}
1001225e:	46c0      	nop			; (mov r8, r8)
10012260:	10019db0 	.word	0x10019db0
10012264:	10019a40 	.word	0x10019a40
10012268:	10018bd0 	.word	0x10018bd0
1001226c:	100148df 	.word	0x100148df
10012270:	10019dc0 	.word	0x10019dc0
10012274:	10010e49 	.word	0x10010e49

10012278 <gattc_event_cfm_handler>:
10012278:	220e      	movs	r2, #14
1001227a:	b508      	push	{r3, lr}
1001227c:	4b0b      	ldr	r3, [pc, #44]	; (100122ac <gattc_event_cfm_handler+0x34>)
1001227e:	701a      	strb	r2, [r3, #0]
10012280:	3a02      	subs	r2, #2
10012282:	705a      	strb	r2, [r3, #1]
10012284:	709a      	strb	r2, [r3, #2]
10012286:	4a0a      	ldr	r2, [pc, #40]	; (100122b0 <gattc_event_cfm_handler+0x38>)
10012288:	70d8      	strb	r0, [r3, #3]
1001228a:	8810      	ldrh	r0, [r2, #0]
1001228c:	8812      	ldrh	r2, [r2, #0]
1001228e:	7219      	strb	r1, [r3, #8]
10012290:	0a12      	lsrs	r2, r2, #8
10012292:	715a      	strb	r2, [r3, #5]
10012294:	2202      	movs	r2, #2
10012296:	719a      	strb	r2, [r3, #6]
10012298:	2200      	movs	r2, #0
1001229a:	0a09      	lsrs	r1, r1, #8
1001229c:	7118      	strb	r0, [r3, #4]
1001229e:	7259      	strb	r1, [r3, #9]
100122a0:	71da      	strb	r2, [r3, #7]
100122a2:	1c18      	adds	r0, r3, #0
100122a4:	210a      	movs	r1, #10
100122a6:	4b03      	ldr	r3, [pc, #12]	; (100122b4 <gattc_event_cfm_handler+0x3c>)
100122a8:	4798      	blx	r3
100122aa:	bd08      	pop	{r3, pc}
100122ac:	10019db0 	.word	0x10019db0
100122b0:	10019a40 	.word	0x10019a40
100122b4:	10010e49 	.word	0x10010e49

100122b8 <gattc_disc_svc_ind_parser>:
100122b8:	b570      	push	{r4, r5, r6, lr}
100122ba:	1c15      	adds	r5, r2, #0
100122bc:	0a00      	lsrs	r0, r0, #8
100122be:	8010      	strh	r0, [r2, #0]
100122c0:	784b      	ldrb	r3, [r1, #1]
100122c2:	780a      	ldrb	r2, [r1, #0]
100122c4:	021b      	lsls	r3, r3, #8
100122c6:	4313      	orrs	r3, r2
100122c8:	806b      	strh	r3, [r5, #2]
100122ca:	78cb      	ldrb	r3, [r1, #3]
100122cc:	788a      	ldrb	r2, [r1, #2]
100122ce:	021b      	lsls	r3, r3, #8
100122d0:	4313      	orrs	r3, r2
100122d2:	80ab      	strh	r3, [r5, #4]
100122d4:	790e      	ldrb	r6, [r1, #4]
100122d6:	4b05      	ldr	r3, [pc, #20]	; (100122ec <gattc_disc_svc_ind_parser+0x34>)
100122d8:	1c30      	adds	r0, r6, #0
100122da:	1c0c      	adds	r4, r1, #0
100122dc:	4798      	blx	r3
100122de:	1c32      	adds	r2, r6, #0
100122e0:	71a8      	strb	r0, [r5, #6]
100122e2:	1d61      	adds	r1, r4, #5
100122e4:	1de8      	adds	r0, r5, #7
100122e6:	4b02      	ldr	r3, [pc, #8]	; (100122f0 <gattc_disc_svc_ind_parser+0x38>)
100122e8:	4798      	blx	r3
100122ea:	bd70      	pop	{r4, r5, r6, pc}
100122ec:	10010189 	.word	0x10010189
100122f0:	100148df 	.word	0x100148df

100122f4 <gattc_disc_svc_incl_ind_parser>:
100122f4:	b570      	push	{r4, r5, r6, lr}
100122f6:	1c15      	adds	r5, r2, #0
100122f8:	0a00      	lsrs	r0, r0, #8
100122fa:	8010      	strh	r0, [r2, #0]
100122fc:	784b      	ldrb	r3, [r1, #1]
100122fe:	780a      	ldrb	r2, [r1, #0]
10012300:	021b      	lsls	r3, r3, #8
10012302:	4313      	orrs	r3, r2
10012304:	806b      	strh	r3, [r5, #2]
10012306:	78cb      	ldrb	r3, [r1, #3]
10012308:	788a      	ldrb	r2, [r1, #2]
1001230a:	021b      	lsls	r3, r3, #8
1001230c:	4313      	orrs	r3, r2
1001230e:	80ab      	strh	r3, [r5, #4]
10012310:	794b      	ldrb	r3, [r1, #5]
10012312:	790a      	ldrb	r2, [r1, #4]
10012314:	021b      	lsls	r3, r3, #8
10012316:	4313      	orrs	r3, r2
10012318:	80eb      	strh	r3, [r5, #6]
1001231a:	798e      	ldrb	r6, [r1, #6]
1001231c:	4b05      	ldr	r3, [pc, #20]	; (10012334 <gattc_disc_svc_incl_ind_parser+0x40>)
1001231e:	1c30      	adds	r0, r6, #0
10012320:	1c0c      	adds	r4, r1, #0
10012322:	4798      	blx	r3
10012324:	7228      	strb	r0, [r5, #8]
10012326:	1c28      	adds	r0, r5, #0
10012328:	1c32      	adds	r2, r6, #0
1001232a:	1de1      	adds	r1, r4, #7
1001232c:	4b02      	ldr	r3, [pc, #8]	; (10012338 <gattc_disc_svc_incl_ind_parser+0x44>)
1001232e:	3009      	adds	r0, #9
10012330:	4798      	blx	r3
10012332:	bd70      	pop	{r4, r5, r6, pc}
10012334:	10010189 	.word	0x10010189
10012338:	100148df 	.word	0x100148df

1001233c <gattc_disc_char_ind_parser>:
1001233c:	b570      	push	{r4, r5, r6, lr}
1001233e:	1c15      	adds	r5, r2, #0
10012340:	0a00      	lsrs	r0, r0, #8
10012342:	8010      	strh	r0, [r2, #0]
10012344:	784b      	ldrb	r3, [r1, #1]
10012346:	780a      	ldrb	r2, [r1, #0]
10012348:	021b      	lsls	r3, r3, #8
1001234a:	4313      	orrs	r3, r2
1001234c:	806b      	strh	r3, [r5, #2]
1001234e:	78cb      	ldrb	r3, [r1, #3]
10012350:	788a      	ldrb	r2, [r1, #2]
10012352:	021b      	lsls	r3, r3, #8
10012354:	4313      	orrs	r3, r2
10012356:	80ab      	strh	r3, [r5, #4]
10012358:	790b      	ldrb	r3, [r1, #4]
1001235a:	1c0c      	adds	r4, r1, #0
1001235c:	71ab      	strb	r3, [r5, #6]
1001235e:	794e      	ldrb	r6, [r1, #5]
10012360:	4b05      	ldr	r3, [pc, #20]	; (10012378 <gattc_disc_char_ind_parser+0x3c>)
10012362:	1c30      	adds	r0, r6, #0
10012364:	4798      	blx	r3
10012366:	71e8      	strb	r0, [r5, #7]
10012368:	1c28      	adds	r0, r5, #0
1001236a:	1c32      	adds	r2, r6, #0
1001236c:	1da1      	adds	r1, r4, #6
1001236e:	4b03      	ldr	r3, [pc, #12]	; (1001237c <gattc_disc_char_ind_parser+0x40>)
10012370:	3008      	adds	r0, #8
10012372:	4798      	blx	r3
10012374:	bd70      	pop	{r4, r5, r6, pc}
10012376:	46c0      	nop			; (mov r8, r8)
10012378:	10010189 	.word	0x10010189
1001237c:	100148df 	.word	0x100148df

10012380 <gattc_disc_char_desc_ind_parser>:
10012380:	b570      	push	{r4, r5, r6, lr}
10012382:	1c15      	adds	r5, r2, #0
10012384:	0a00      	lsrs	r0, r0, #8
10012386:	8010      	strh	r0, [r2, #0]
10012388:	784b      	ldrb	r3, [r1, #1]
1001238a:	780a      	ldrb	r2, [r1, #0]
1001238c:	021b      	lsls	r3, r3, #8
1001238e:	4313      	orrs	r3, r2
10012390:	806b      	strh	r3, [r5, #2]
10012392:	788e      	ldrb	r6, [r1, #2]
10012394:	4b05      	ldr	r3, [pc, #20]	; (100123ac <gattc_disc_char_desc_ind_parser+0x2c>)
10012396:	1c30      	adds	r0, r6, #0
10012398:	1c0c      	adds	r4, r1, #0
1001239a:	4798      	blx	r3
1001239c:	1c32      	adds	r2, r6, #0
1001239e:	7128      	strb	r0, [r5, #4]
100123a0:	1ce1      	adds	r1, r4, #3
100123a2:	1d68      	adds	r0, r5, #5
100123a4:	4b02      	ldr	r3, [pc, #8]	; (100123b0 <gattc_disc_char_desc_ind_parser+0x30>)
100123a6:	4798      	blx	r3
100123a8:	bd70      	pop	{r4, r5, r6, pc}
100123aa:	46c0      	nop			; (mov r8, r8)
100123ac:	10010189 	.word	0x10010189
100123b0:	100148df 	.word	0x100148df

100123b4 <gattc_event_ind_and_notification_parser>:
100123b4:	b510      	push	{r4, lr}
100123b6:	780c      	ldrb	r4, [r1, #0]
100123b8:	1c13      	adds	r3, r2, #0
100123ba:	2c12      	cmp	r4, #18
100123bc:	d10e      	bne.n	100123dc <gattc_event_ind_and_notification_parser+0x28>
100123be:	0a00      	lsrs	r0, r0, #8
100123c0:	8010      	strh	r0, [r2, #0]
100123c2:	788a      	ldrb	r2, [r1, #2]
100123c4:	709a      	strb	r2, [r3, #2]
100123c6:	7948      	ldrb	r0, [r1, #5]
100123c8:	790c      	ldrb	r4, [r1, #4]
100123ca:	0200      	lsls	r0, r0, #8
100123cc:	4320      	orrs	r0, r4
100123ce:	8098      	strh	r0, [r3, #4]
100123d0:	3106      	adds	r1, #6
100123d2:	1d98      	adds	r0, r3, #6
100123d4:	4b0b      	ldr	r3, [pc, #44]	; (10012404 <gattc_event_ind_and_notification_parser+0x50>)
100123d6:	4798      	blx	r3
100123d8:	221b      	movs	r2, #27
100123da:	e010      	b.n	100123fe <gattc_event_ind_and_notification_parser+0x4a>
100123dc:	2200      	movs	r2, #0
100123de:	2c13      	cmp	r4, #19
100123e0:	d10d      	bne.n	100123fe <gattc_event_ind_and_notification_parser+0x4a>
100123e2:	0a00      	lsrs	r0, r0, #8
100123e4:	8018      	strh	r0, [r3, #0]
100123e6:	788a      	ldrb	r2, [r1, #2]
100123e8:	709a      	strb	r2, [r3, #2]
100123ea:	7908      	ldrb	r0, [r1, #4]
100123ec:	78cc      	ldrb	r4, [r1, #3]
100123ee:	0200      	lsls	r0, r0, #8
100123f0:	4320      	orrs	r0, r4
100123f2:	8098      	strh	r0, [r3, #4]
100123f4:	3106      	adds	r1, #6
100123f6:	1d98      	adds	r0, r3, #6
100123f8:	4b02      	ldr	r3, [pc, #8]	; (10012404 <gattc_event_ind_and_notification_parser+0x50>)
100123fa:	4798      	blx	r3
100123fc:	221c      	movs	r2, #28
100123fe:	1c10      	adds	r0, r2, #0
10012400:	bd10      	pop	{r4, pc}
10012402:	46c0      	nop			; (mov r8, r8)
10012404:	100148df 	.word	0x100148df

10012408 <gattc_complete_evt_handler>:
10012408:	b500      	push	{lr}
1001240a:	0a00      	lsrs	r0, r0, #8
1001240c:	8010      	strh	r0, [r2, #0]
1001240e:	7808      	ldrb	r0, [r1, #0]
10012410:	7090      	strb	r0, [r2, #2]
10012412:	784b      	ldrb	r3, [r1, #1]
10012414:	3801      	subs	r0, #1
10012416:	70d3      	strb	r3, [r2, #3]
10012418:	2813      	cmp	r0, #19
1001241a:	d82c      	bhi.n	10012476 <gattc_complete_evt_handler+0x6e>
1001241c:	f000 f9dc 	bl	100127d8 <__gnu_thumb1_case_uqi>
10012420:	0a0a0a0c 	.word	0x0a0a0a0c
10012424:	210a0a0a 	.word	0x210a0a0a
10012428:	111f2121 	.word	0x111f2121
1001242c:	2b111111 	.word	0x2b111111
10012430:	2919132b 	.word	0x2919132b
10012434:	2017      	movs	r0, #23
10012436:	e01f      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012438:	2024      	movs	r0, #36	; 0x24
1001243a:	2b00      	cmp	r3, #0
1001243c:	d11c      	bne.n	10012478 <gattc_complete_evt_handler+0x70>
1001243e:	3017      	adds	r0, #23
10012440:	e01a      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012442:	2025      	movs	r0, #37	; 0x25
10012444:	e018      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012446:	4a0d      	ldr	r2, [pc, #52]	; (1001247c <gattc_complete_evt_handler+0x74>)
10012448:	201d      	movs	r0, #29
1001244a:	6813      	ldr	r3, [r2, #0]
1001244c:	3b01      	subs	r3, #1
1001244e:	6013      	str	r3, [r2, #0]
10012450:	e012      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012452:	4a0a      	ldr	r2, [pc, #40]	; (1001247c <gattc_complete_evt_handler+0x74>)
10012454:	201e      	movs	r0, #30
10012456:	6813      	ldr	r3, [r2, #0]
10012458:	3b01      	subs	r3, #1
1001245a:	6013      	str	r3, [r2, #0]
1001245c:	e00c      	b.n	10012478 <gattc_complete_evt_handler+0x70>
1001245e:	2019      	movs	r0, #25
10012460:	e00a      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012462:	203b      	movs	r0, #59	; 0x3b
10012464:	2b00      	cmp	r3, #0
10012466:	d007      	beq.n	10012478 <gattc_complete_evt_handler+0x70>
10012468:	2182      	movs	r1, #130	; 0x82
1001246a:	0089      	lsls	r1, r1, #2
1001246c:	5453      	strb	r3, [r2, r1]
1001246e:	3823      	subs	r0, #35	; 0x23
10012470:	e002      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012472:	2021      	movs	r0, #33	; 0x21
10012474:	e000      	b.n	10012478 <gattc_complete_evt_handler+0x70>
10012476:	2000      	movs	r0, #0
10012478:	bd00      	pop	{pc}
1001247a:	46c0      	nop			; (mov r8, r8)
1001247c:	10018bd4 	.word	0x10018bd4

10012480 <gattc_event_mtu_changed_ind_parser>:
10012480:	0a00      	lsrs	r0, r0, #8
10012482:	8010      	strh	r0, [r2, #0]
10012484:	784b      	ldrb	r3, [r1, #1]
10012486:	7809      	ldrb	r1, [r1, #0]
10012488:	021b      	lsls	r3, r3, #8
1001248a:	430b      	orrs	r3, r1
1001248c:	8053      	strh	r3, [r2, #2]
1001248e:	4770      	bx	lr

10012490 <gattc_read_ind_parser>:
10012490:	0a00      	lsrs	r0, r0, #8
10012492:	b508      	push	{r3, lr}
10012494:	8010      	strh	r0, [r2, #0]
10012496:	1c13      	adds	r3, r2, #0
10012498:	2282      	movs	r2, #130	; 0x82
1001249a:	2000      	movs	r0, #0
1001249c:	0092      	lsls	r2, r2, #2
1001249e:	5498      	strb	r0, [r3, r2]
100124a0:	784a      	ldrb	r2, [r1, #1]
100124a2:	7808      	ldrb	r0, [r1, #0]
100124a4:	0212      	lsls	r2, r2, #8
100124a6:	4302      	orrs	r2, r0
100124a8:	805a      	strh	r2, [r3, #2]
100124aa:	78ca      	ldrb	r2, [r1, #3]
100124ac:	7888      	ldrb	r0, [r1, #2]
100124ae:	0212      	lsls	r2, r2, #8
100124b0:	4302      	orrs	r2, r0
100124b2:	80da      	strh	r2, [r3, #6]
100124b4:	794a      	ldrb	r2, [r1, #5]
100124b6:	7908      	ldrb	r0, [r1, #4]
100124b8:	0212      	lsls	r2, r2, #8
100124ba:	4302      	orrs	r2, r0
100124bc:	809a      	strh	r2, [r3, #4]
100124be:	3308      	adds	r3, #8
100124c0:	1c18      	adds	r0, r3, #0
100124c2:	3106      	adds	r1, #6
100124c4:	4b01      	ldr	r3, [pc, #4]	; (100124cc <gattc_read_ind_parser+0x3c>)
100124c6:	4798      	blx	r3
100124c8:	bd08      	pop	{r3, pc}
100124ca:	46c0      	nop			; (mov r8, r8)
100124cc:	100148df 	.word	0x100148df

100124d0 <gattc_svc_changed_cfg_ind_parser>:
100124d0:	0a00      	lsrs	r0, r0, #8
100124d2:	8010      	strh	r0, [r2, #0]
100124d4:	784b      	ldrb	r3, [r1, #1]
100124d6:	7809      	ldrb	r1, [r1, #0]
100124d8:	021b      	lsls	r3, r3, #8
100124da:	430b      	orrs	r3, r1
100124dc:	8053      	strh	r3, [r2, #2]
100124de:	4770      	bx	lr

100124e0 <init_gattc_task_module>:
100124e0:	2300      	movs	r3, #0
100124e2:	4a02      	ldr	r2, [pc, #8]	; (100124ec <init_gattc_task_module+0xc>)
100124e4:	8013      	strh	r3, [r2, #0]
100124e6:	4a02      	ldr	r2, [pc, #8]	; (100124f0 <init_gattc_task_module+0x10>)
100124e8:	8013      	strh	r3, [r2, #0]
100124ea:	4770      	bx	lr
100124ec:	10018bce 	.word	0x10018bce
100124f0:	10018bd0 	.word	0x10018bd0

100124f4 <gattm_add_svc_req_handler>:
100124f4:	2200      	movs	r2, #0
100124f6:	210b      	movs	r1, #11
100124f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100124fa:	1c04      	adds	r4, r0, #0
100124fc:	7943      	ldrb	r3, [r0, #5]
100124fe:	b085      	sub	sp, #20
10012500:	9301      	str	r3, [sp, #4]
10012502:	ab02      	add	r3, sp, #8
10012504:	71da      	strb	r2, [r3, #7]
10012506:	4b37      	ldr	r3, [pc, #220]	; (100125e4 <gattm_add_svc_req_handler+0xf0>)
10012508:	7059      	strb	r1, [r3, #1]
1001250a:	7099      	strb	r1, [r3, #2]
1001250c:	4936      	ldr	r1, [pc, #216]	; (100125e8 <gattm_add_svc_req_handler+0xf4>)
1001250e:	701a      	strb	r2, [r3, #0]
10012510:	8808      	ldrh	r0, [r1, #0]
10012512:	8809      	ldrh	r1, [r1, #0]
10012514:	70da      	strb	r2, [r3, #3]
10012516:	0a09      	lsrs	r1, r1, #8
10012518:	7118      	strb	r0, [r3, #4]
1001251a:	7159      	strb	r1, [r3, #5]
1001251c:	8821      	ldrh	r1, [r4, #0]
1001251e:	7219      	strb	r1, [r3, #8]
10012520:	8821      	ldrh	r1, [r4, #0]
10012522:	0a09      	lsrs	r1, r1, #8
10012524:	7259      	strb	r1, [r3, #9]
10012526:	8861      	ldrh	r1, [r4, #2]
10012528:	7299      	strb	r1, [r3, #10]
1001252a:	8861      	ldrh	r1, [r4, #2]
1001252c:	0a09      	lsrs	r1, r1, #8
1001252e:	72d9      	strb	r1, [r3, #11]
10012530:	7921      	ldrb	r1, [r4, #4]
10012532:	7319      	strb	r1, [r3, #12]
10012534:	4669      	mov	r1, sp
10012536:	7909      	ldrb	r1, [r1, #4]
10012538:	7359      	strb	r1, [r3, #13]
1001253a:	18a1      	adds	r1, r4, r2
1001253c:	7988      	ldrb	r0, [r1, #6]
1001253e:	1899      	adds	r1, r3, r2
10012540:	3201      	adds	r2, #1
10012542:	7388      	strb	r0, [r1, #14]
10012544:	2a10      	cmp	r2, #16
10012546:	d1f8      	bne.n	1001253a <gattm_add_svc_req_handler+0x46>
10012548:	1c27      	adds	r7, r4, #0
1001254a:	2300      	movs	r3, #0
1001254c:	251e      	movs	r5, #30
1001254e:	3716      	adds	r7, #22
10012550:	9300      	str	r3, [sp, #0]
10012552:	9b00      	ldr	r3, [sp, #0]
10012554:	9a01      	ldr	r2, [sp, #4]
10012556:	4e23      	ldr	r6, [pc, #140]	; (100125e4 <gattm_add_svc_req_handler+0xf0>)
10012558:	4293      	cmp	r3, r2
1001255a:	da21      	bge.n	100125a0 <gattm_add_svc_req_handler+0xac>
1001255c:	1c39      	adds	r1, r7, #0
1001255e:	1970      	adds	r0, r6, r5
10012560:	2210      	movs	r2, #16
10012562:	4b22      	ldr	r3, [pc, #136]	; (100125ec <gattm_add_svc_req_handler+0xf8>)
10012564:	4798      	blx	r3
10012566:	1c2b      	adds	r3, r5, #0
10012568:	8a3a      	ldrh	r2, [r7, #16]
1001256a:	3310      	adds	r3, #16
1001256c:	b29b      	uxth	r3, r3
1001256e:	54f2      	strb	r2, [r6, r3]
10012570:	1c2b      	adds	r3, r5, #0
10012572:	8a3a      	ldrh	r2, [r7, #16]
10012574:	3311      	adds	r3, #17
10012576:	b29b      	uxth	r3, r3
10012578:	0a12      	lsrs	r2, r2, #8
1001257a:	54f2      	strb	r2, [r6, r3]
1001257c:	1c2a      	adds	r2, r5, #0
1001257e:	1c2b      	adds	r3, r5, #0
10012580:	8a79      	ldrh	r1, [r7, #18]
10012582:	3212      	adds	r2, #18
10012584:	b292      	uxth	r2, r2
10012586:	54b1      	strb	r1, [r6, r2]
10012588:	8a7a      	ldrh	r2, [r7, #18]
1001258a:	3313      	adds	r3, #19
1001258c:	b29b      	uxth	r3, r3
1001258e:	0a12      	lsrs	r2, r2, #8
10012590:	54f2      	strb	r2, [r6, r3]
10012592:	9b00      	ldr	r3, [sp, #0]
10012594:	3514      	adds	r5, #20
10012596:	3301      	adds	r3, #1
10012598:	b2ad      	uxth	r5, r5
1001259a:	9300      	str	r3, [sp, #0]
1001259c:	3714      	adds	r7, #20
1001259e:	e7d8      	b.n	10012552 <gattm_add_svc_req_handler+0x5e>
100125a0:	2114      	movs	r1, #20
100125a2:	4d13      	ldr	r5, [pc, #76]	; (100125f0 <gattm_add_svc_req_handler+0xfc>)
100125a4:	4b13      	ldr	r3, [pc, #76]	; (100125f4 <gattm_add_svc_req_handler+0x100>)
100125a6:	4351      	muls	r1, r2
100125a8:	802b      	strh	r3, [r5, #0]
100125aa:	230b      	movs	r3, #11
100125ac:	311e      	adds	r1, #30
100125ae:	80ab      	strh	r3, [r5, #4]
100125b0:	1c0b      	adds	r3, r1, #0
100125b2:	3b08      	subs	r3, #8
100125b4:	71b3      	strb	r3, [r6, #6]
100125b6:	121b      	asrs	r3, r3, #8
100125b8:	71f3      	strb	r3, [r6, #7]
100125ba:	1c30      	adds	r0, r6, #0
100125bc:	4b0e      	ldr	r3, [pc, #56]	; (100125f8 <gattm_add_svc_req_handler+0x104>)
100125be:	4798      	blx	r3
100125c0:	ab02      	add	r3, sp, #8
100125c2:	1dde      	adds	r6, r3, #7
100125c4:	1c30      	adds	r0, r6, #0
100125c6:	4b0d      	ldr	r3, [pc, #52]	; (100125fc <gattm_add_svc_req_handler+0x108>)
100125c8:	4798      	blx	r3
100125ca:	7833      	ldrb	r3, [r6, #0]
100125cc:	20e2      	movs	r0, #226	; 0xe2
100125ce:	2b00      	cmp	r3, #0
100125d0:	d106      	bne.n	100125e0 <gattm_add_svc_req_handler+0xec>
100125d2:	68aa      	ldr	r2, [r5, #8]
100125d4:	7853      	ldrb	r3, [r2, #1]
100125d6:	7811      	ldrb	r1, [r2, #0]
100125d8:	021b      	lsls	r3, r3, #8
100125da:	430b      	orrs	r3, r1
100125dc:	8023      	strh	r3, [r4, #0]
100125de:	7890      	ldrb	r0, [r2, #2]
100125e0:	b005      	add	sp, #20
100125e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100125e4:	10019db0 	.word	0x10019db0
100125e8:	10019a40 	.word	0x10019a40
100125ec:	100148df 	.word	0x100148df
100125f0:	10019a34 	.word	0x10019a34
100125f4:	00000b01 	.word	0x00000b01
100125f8:	10010e49 	.word	0x10010e49
100125fc:	10010ead 	.word	0x10010ead

10012600 <gattm_add_attribute_req_handler>:
10012600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012602:	1c1f      	adds	r7, r3, #0
10012604:	4b16      	ldr	r3, [pc, #88]	; (10012660 <gattm_add_attribute_req_handler+0x60>)
10012606:	9100      	str	r1, [sp, #0]
10012608:	9201      	str	r2, [sp, #4]
1001260a:	1c05      	adds	r5, r0, #0
1001260c:	7946      	ldrb	r6, [r0, #5]
1001260e:	6818      	ldr	r0, [r3, #0]
10012610:	2114      	movs	r1, #20
10012612:	4b14      	ldr	r3, [pc, #80]	; (10012664 <gattm_add_attribute_req_handler+0x64>)
10012614:	382a      	subs	r0, #42	; 0x2a
10012616:	4798      	blx	r3
10012618:	2311      	movs	r3, #17
1001261a:	4286      	cmp	r6, r0
1001261c:	d21e      	bcs.n	1001265c <gattm_add_attribute_req_handler+0x5c>
1001261e:	2414      	movs	r4, #20
10012620:	4366      	muls	r6, r4
10012622:	19a8      	adds	r0, r5, r6
10012624:	2100      	movs	r1, #0
10012626:	2210      	movs	r2, #16
10012628:	4b0f      	ldr	r3, [pc, #60]	; (10012668 <gattm_add_attribute_req_handler+0x68>)
1001262a:	3016      	adds	r0, #22
1001262c:	4798      	blx	r3
1001262e:	7968      	ldrb	r0, [r5, #5]
10012630:	1c3a      	adds	r2, r7, #0
10012632:	4360      	muls	r0, r4
10012634:	1828      	adds	r0, r5, r0
10012636:	4b0d      	ldr	r3, [pc, #52]	; (1001266c <gattm_add_attribute_req_handler+0x6c>)
10012638:	3016      	adds	r0, #22
1001263a:	9908      	ldr	r1, [sp, #32]
1001263c:	4798      	blx	r3
1001263e:	466a      	mov	r2, sp
10012640:	796b      	ldrb	r3, [r5, #5]
10012642:	8812      	ldrh	r2, [r2, #0]
10012644:	435c      	muls	r4, r3
10012646:	192c      	adds	r4, r5, r4
10012648:	8522      	strh	r2, [r4, #40]	; 0x28
1001264a:	466a      	mov	r2, sp
1001264c:	8892      	ldrh	r2, [r2, #4]
1001264e:	84e2      	strh	r2, [r4, #38]	; 0x26
10012650:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012652:	8013      	strh	r3, [r2, #0]
10012654:	796b      	ldrb	r3, [r5, #5]
10012656:	3301      	adds	r3, #1
10012658:	716b      	strb	r3, [r5, #5]
1001265a:	2300      	movs	r3, #0
1001265c:	1c18      	adds	r0, r3, #0
1001265e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012660:	10018b44 	.word	0x10018b44
10012664:	100127ed 	.word	0x100127ed
10012668:	100148f1 	.word	0x100148f1
1001266c:	100148df 	.word	0x100148df

10012670 <gattm_att_set_value_req_handler>:
10012670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012672:	466b      	mov	r3, sp
10012674:	1dde      	adds	r6, r3, #7
10012676:	2300      	movs	r3, #0
10012678:	1c0d      	adds	r5, r1, #0
1001267a:	210c      	movs	r1, #12
1001267c:	270b      	movs	r7, #11
1001267e:	4c17      	ldr	r4, [pc, #92]	; (100126dc <gattm_att_set_value_req_handler+0x6c>)
10012680:	7033      	strb	r3, [r6, #0]
10012682:	70e3      	strb	r3, [r4, #3]
10012684:	4b16      	ldr	r3, [pc, #88]	; (100126e0 <gattm_att_set_value_req_handler+0x70>)
10012686:	7021      	strb	r1, [r4, #0]
10012688:	8819      	ldrh	r1, [r3, #0]
1001268a:	881b      	ldrh	r3, [r3, #0]
1001268c:	7220      	strb	r0, [r4, #8]
1001268e:	0a1b      	lsrs	r3, r3, #8
10012690:	7163      	strb	r3, [r4, #5]
10012692:	0a00      	lsrs	r0, r0, #8
10012694:	0a2b      	lsrs	r3, r5, #8
10012696:	7121      	strb	r1, [r4, #4]
10012698:	7260      	strb	r0, [r4, #9]
1001269a:	1c11      	adds	r1, r2, #0
1001269c:	72a5      	strb	r5, [r4, #10]
1001269e:	1c2a      	adds	r2, r5, #0
100126a0:	72e3      	strb	r3, [r4, #11]
100126a2:	350c      	adds	r5, #12
100126a4:	4b0f      	ldr	r3, [pc, #60]	; (100126e4 <gattm_att_set_value_req_handler+0x74>)
100126a6:	4810      	ldr	r0, [pc, #64]	; (100126e8 <gattm_att_set_value_req_handler+0x78>)
100126a8:	7067      	strb	r7, [r4, #1]
100126aa:	70a7      	strb	r7, [r4, #2]
100126ac:	4798      	blx	r3
100126ae:	b2a9      	uxth	r1, r5
100126b0:	4b0e      	ldr	r3, [pc, #56]	; (100126ec <gattm_att_set_value_req_handler+0x7c>)
100126b2:	4d0f      	ldr	r5, [pc, #60]	; (100126f0 <gattm_att_set_value_req_handler+0x80>)
100126b4:	1c20      	adds	r0, r4, #0
100126b6:	802b      	strh	r3, [r5, #0]
100126b8:	1c0b      	adds	r3, r1, #0
100126ba:	3b08      	subs	r3, #8
100126bc:	71a3      	strb	r3, [r4, #6]
100126be:	121b      	asrs	r3, r3, #8
100126c0:	71e3      	strb	r3, [r4, #7]
100126c2:	4b0c      	ldr	r3, [pc, #48]	; (100126f4 <gattm_att_set_value_req_handler+0x84>)
100126c4:	80af      	strh	r7, [r5, #4]
100126c6:	4798      	blx	r3
100126c8:	1c30      	adds	r0, r6, #0
100126ca:	4b0b      	ldr	r3, [pc, #44]	; (100126f8 <gattm_att_set_value_req_handler+0x88>)
100126cc:	4798      	blx	r3
100126ce:	7833      	ldrb	r3, [r6, #0]
100126d0:	20e2      	movs	r0, #226	; 0xe2
100126d2:	2b00      	cmp	r3, #0
100126d4:	d101      	bne.n	100126da <gattm_att_set_value_req_handler+0x6a>
100126d6:	68ab      	ldr	r3, [r5, #8]
100126d8:	7898      	ldrb	r0, [r3, #2]
100126da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100126dc:	10019db0 	.word	0x10019db0
100126e0:	10019a40 	.word	0x10019a40
100126e4:	100148df 	.word	0x100148df
100126e8:	10019dbc 	.word	0x10019dbc
100126ec:	00000b0d 	.word	0x00000b0d
100126f0:	10019a34 	.word	0x10019a34
100126f4:	10010e49 	.word	0x10010e49
100126f8:	10010ead 	.word	0x10010ead

100126fc <gattm_att_get_value_req_handler>:
100126fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100126fe:	b085      	sub	sp, #20
10012700:	9201      	str	r2, [sp, #4]
10012702:	220a      	movs	r2, #10
10012704:	1c04      	adds	r4, r0, #0
10012706:	481d      	ldr	r0, [pc, #116]	; (1001277c <gattm_att_get_value_req_handler+0x80>)
10012708:	ab02      	add	r3, sp, #8
1001270a:	1dde      	adds	r6, r3, #7
1001270c:	7002      	strb	r2, [r0, #0]
1001270e:	2300      	movs	r3, #0
10012710:	220b      	movs	r2, #11
10012712:	4d1b      	ldr	r5, [pc, #108]	; (10012780 <gattm_att_get_value_req_handler+0x84>)
10012714:	1c0f      	adds	r7, r1, #0
10012716:	8829      	ldrh	r1, [r5, #0]
10012718:	882d      	ldrh	r5, [r5, #0]
1001271a:	7101      	strb	r1, [r0, #4]
1001271c:	0a2d      	lsrs	r5, r5, #8
1001271e:	7145      	strb	r5, [r0, #5]
10012720:	0a25      	lsrs	r5, r4, #8
10012722:	7245      	strb	r5, [r0, #9]
10012724:	4917      	ldr	r1, [pc, #92]	; (10012784 <gattm_att_get_value_req_handler+0x88>)
10012726:	4d18      	ldr	r5, [pc, #96]	; (10012788 <gattm_att_get_value_req_handler+0x8c>)
10012728:	7033      	strb	r3, [r6, #0]
1001272a:	7042      	strb	r2, [r0, #1]
1001272c:	7082      	strb	r2, [r0, #2]
1001272e:	70c3      	strb	r3, [r0, #3]
10012730:	8029      	strh	r1, [r5, #0]
10012732:	80aa      	strh	r2, [r5, #4]
10012734:	71c3      	strb	r3, [r0, #7]
10012736:	3a09      	subs	r2, #9
10012738:	210a      	movs	r1, #10
1001273a:	4b14      	ldr	r3, [pc, #80]	; (1001278c <gattm_att_get_value_req_handler+0x90>)
1001273c:	7182      	strb	r2, [r0, #6]
1001273e:	7204      	strb	r4, [r0, #8]
10012740:	4798      	blx	r3
10012742:	1c30      	adds	r0, r6, #0
10012744:	4b12      	ldr	r3, [pc, #72]	; (10012790 <gattm_att_get_value_req_handler+0x94>)
10012746:	4798      	blx	r3
10012748:	7833      	ldrb	r3, [r6, #0]
1001274a:	20e2      	movs	r0, #226	; 0xe2
1001274c:	2b00      	cmp	r3, #0
1001274e:	d112      	bne.n	10012776 <gattm_att_get_value_req_handler+0x7a>
10012750:	68a9      	ldr	r1, [r5, #8]
10012752:	9801      	ldr	r0, [sp, #4]
10012754:	784d      	ldrb	r5, [r1, #1]
10012756:	780b      	ldrb	r3, [r1, #0]
10012758:	78ca      	ldrb	r2, [r1, #3]
1001275a:	022d      	lsls	r5, r5, #8
1001275c:	431d      	orrs	r5, r3
1001275e:	788b      	ldrb	r3, [r1, #2]
10012760:	0212      	lsls	r2, r2, #8
10012762:	431a      	orrs	r2, r3
10012764:	803a      	strh	r2, [r7, #0]
10012766:	790e      	ldrb	r6, [r1, #4]
10012768:	4b0a      	ldr	r3, [pc, #40]	; (10012794 <gattm_att_get_value_req_handler+0x98>)
1001276a:	3105      	adds	r1, #5
1001276c:	4798      	blx	r3
1001276e:	20e2      	movs	r0, #226	; 0xe2
10012770:	42ac      	cmp	r4, r5
10012772:	d100      	bne.n	10012776 <gattm_att_get_value_req_handler+0x7a>
10012774:	1c30      	adds	r0, r6, #0
10012776:	b005      	add	sp, #20
10012778:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001277a:	46c0      	nop			; (mov r8, r8)
1001277c:	10019db0 	.word	0x10019db0
10012780:	10019a40 	.word	0x10019a40
10012784:	00000b0b 	.word	0x00000b0b
10012788:	10019a34 	.word	0x10019a34
1001278c:	10010e49 	.word	0x10010e49
10012790:	10010ead 	.word	0x10010ead
10012794:	100148df 	.word	0x100148df

10012798 <htpt_enable_rsp_handler>:
10012798:	780b      	ldrb	r3, [r1, #0]
1001279a:	7013      	strb	r3, [r2, #0]
1001279c:	784b      	ldrb	r3, [r1, #1]
1001279e:	7053      	strb	r3, [r2, #1]
100127a0:	4770      	bx	lr

100127a2 <htpt_temp_send_rsp_handler>:
100127a2:	780b      	ldrb	r3, [r1, #0]
100127a4:	7013      	strb	r3, [r2, #0]
100127a6:	4770      	bx	lr

100127a8 <htpt_meas_intv_upd_rsp_handler>:
100127a8:	780b      	ldrb	r3, [r1, #0]
100127aa:	7013      	strb	r3, [r2, #0]
100127ac:	4770      	bx	lr

100127ae <htpt_meas_intv_chg_req_ind_handler>:
100127ae:	78cb      	ldrb	r3, [r1, #3]
100127b0:	7889      	ldrb	r1, [r1, #2]
100127b2:	021b      	lsls	r3, r3, #8
100127b4:	430b      	orrs	r3, r1
100127b6:	8013      	strh	r3, [r2, #0]
100127b8:	4770      	bx	lr

100127ba <htpt_cfg_indntf_ind_handler>:
100127ba:	780b      	ldrb	r3, [r1, #0]
100127bc:	7013      	strb	r3, [r2, #0]
100127be:	784b      	ldrb	r3, [r1, #1]
100127c0:	7053      	strb	r3, [r2, #1]
100127c2:	4770      	bx	lr

100127c4 <__gnu_thumb1_case_sqi>:
100127c4:	b402      	push	{r1}
100127c6:	4671      	mov	r1, lr
100127c8:	0849      	lsrs	r1, r1, #1
100127ca:	0049      	lsls	r1, r1, #1
100127cc:	5609      	ldrsb	r1, [r1, r0]
100127ce:	0049      	lsls	r1, r1, #1
100127d0:	448e      	add	lr, r1
100127d2:	bc02      	pop	{r1}
100127d4:	4770      	bx	lr
100127d6:	46c0      	nop			; (mov r8, r8)

100127d8 <__gnu_thumb1_case_uqi>:
100127d8:	b402      	push	{r1}
100127da:	4671      	mov	r1, lr
100127dc:	0849      	lsrs	r1, r1, #1
100127de:	0049      	lsls	r1, r1, #1
100127e0:	5c09      	ldrb	r1, [r1, r0]
100127e2:	0049      	lsls	r1, r1, #1
100127e4:	448e      	add	lr, r1
100127e6:	bc02      	pop	{r1}
100127e8:	4770      	bx	lr
100127ea:	46c0      	nop			; (mov r8, r8)

100127ec <__aeabi_uidiv>:
100127ec:	2200      	movs	r2, #0
100127ee:	0843      	lsrs	r3, r0, #1
100127f0:	428b      	cmp	r3, r1
100127f2:	d374      	bcc.n	100128de <__aeabi_uidiv+0xf2>
100127f4:	0903      	lsrs	r3, r0, #4
100127f6:	428b      	cmp	r3, r1
100127f8:	d35f      	bcc.n	100128ba <__aeabi_uidiv+0xce>
100127fa:	0a03      	lsrs	r3, r0, #8
100127fc:	428b      	cmp	r3, r1
100127fe:	d344      	bcc.n	1001288a <__aeabi_uidiv+0x9e>
10012800:	0b03      	lsrs	r3, r0, #12
10012802:	428b      	cmp	r3, r1
10012804:	d328      	bcc.n	10012858 <__aeabi_uidiv+0x6c>
10012806:	0c03      	lsrs	r3, r0, #16
10012808:	428b      	cmp	r3, r1
1001280a:	d30d      	bcc.n	10012828 <__aeabi_uidiv+0x3c>
1001280c:	22ff      	movs	r2, #255	; 0xff
1001280e:	0209      	lsls	r1, r1, #8
10012810:	ba12      	rev	r2, r2
10012812:	0c03      	lsrs	r3, r0, #16
10012814:	428b      	cmp	r3, r1
10012816:	d302      	bcc.n	1001281e <__aeabi_uidiv+0x32>
10012818:	1212      	asrs	r2, r2, #8
1001281a:	0209      	lsls	r1, r1, #8
1001281c:	d065      	beq.n	100128ea <__aeabi_uidiv+0xfe>
1001281e:	0b03      	lsrs	r3, r0, #12
10012820:	428b      	cmp	r3, r1
10012822:	d319      	bcc.n	10012858 <__aeabi_uidiv+0x6c>
10012824:	e000      	b.n	10012828 <__aeabi_uidiv+0x3c>
10012826:	0a09      	lsrs	r1, r1, #8
10012828:	0bc3      	lsrs	r3, r0, #15
1001282a:	428b      	cmp	r3, r1
1001282c:	d301      	bcc.n	10012832 <__aeabi_uidiv+0x46>
1001282e:	03cb      	lsls	r3, r1, #15
10012830:	1ac0      	subs	r0, r0, r3
10012832:	4152      	adcs	r2, r2
10012834:	0b83      	lsrs	r3, r0, #14
10012836:	428b      	cmp	r3, r1
10012838:	d301      	bcc.n	1001283e <__aeabi_uidiv+0x52>
1001283a:	038b      	lsls	r3, r1, #14
1001283c:	1ac0      	subs	r0, r0, r3
1001283e:	4152      	adcs	r2, r2
10012840:	0b43      	lsrs	r3, r0, #13
10012842:	428b      	cmp	r3, r1
10012844:	d301      	bcc.n	1001284a <__aeabi_uidiv+0x5e>
10012846:	034b      	lsls	r3, r1, #13
10012848:	1ac0      	subs	r0, r0, r3
1001284a:	4152      	adcs	r2, r2
1001284c:	0b03      	lsrs	r3, r0, #12
1001284e:	428b      	cmp	r3, r1
10012850:	d301      	bcc.n	10012856 <__aeabi_uidiv+0x6a>
10012852:	030b      	lsls	r3, r1, #12
10012854:	1ac0      	subs	r0, r0, r3
10012856:	4152      	adcs	r2, r2
10012858:	0ac3      	lsrs	r3, r0, #11
1001285a:	428b      	cmp	r3, r1
1001285c:	d301      	bcc.n	10012862 <__aeabi_uidiv+0x76>
1001285e:	02cb      	lsls	r3, r1, #11
10012860:	1ac0      	subs	r0, r0, r3
10012862:	4152      	adcs	r2, r2
10012864:	0a83      	lsrs	r3, r0, #10
10012866:	428b      	cmp	r3, r1
10012868:	d301      	bcc.n	1001286e <__aeabi_uidiv+0x82>
1001286a:	028b      	lsls	r3, r1, #10
1001286c:	1ac0      	subs	r0, r0, r3
1001286e:	4152      	adcs	r2, r2
10012870:	0a43      	lsrs	r3, r0, #9
10012872:	428b      	cmp	r3, r1
10012874:	d301      	bcc.n	1001287a <__aeabi_uidiv+0x8e>
10012876:	024b      	lsls	r3, r1, #9
10012878:	1ac0      	subs	r0, r0, r3
1001287a:	4152      	adcs	r2, r2
1001287c:	0a03      	lsrs	r3, r0, #8
1001287e:	428b      	cmp	r3, r1
10012880:	d301      	bcc.n	10012886 <__aeabi_uidiv+0x9a>
10012882:	020b      	lsls	r3, r1, #8
10012884:	1ac0      	subs	r0, r0, r3
10012886:	4152      	adcs	r2, r2
10012888:	d2cd      	bcs.n	10012826 <__aeabi_uidiv+0x3a>
1001288a:	09c3      	lsrs	r3, r0, #7
1001288c:	428b      	cmp	r3, r1
1001288e:	d301      	bcc.n	10012894 <__aeabi_uidiv+0xa8>
10012890:	01cb      	lsls	r3, r1, #7
10012892:	1ac0      	subs	r0, r0, r3
10012894:	4152      	adcs	r2, r2
10012896:	0983      	lsrs	r3, r0, #6
10012898:	428b      	cmp	r3, r1
1001289a:	d301      	bcc.n	100128a0 <__aeabi_uidiv+0xb4>
1001289c:	018b      	lsls	r3, r1, #6
1001289e:	1ac0      	subs	r0, r0, r3
100128a0:	4152      	adcs	r2, r2
100128a2:	0943      	lsrs	r3, r0, #5
100128a4:	428b      	cmp	r3, r1
100128a6:	d301      	bcc.n	100128ac <__aeabi_uidiv+0xc0>
100128a8:	014b      	lsls	r3, r1, #5
100128aa:	1ac0      	subs	r0, r0, r3
100128ac:	4152      	adcs	r2, r2
100128ae:	0903      	lsrs	r3, r0, #4
100128b0:	428b      	cmp	r3, r1
100128b2:	d301      	bcc.n	100128b8 <__aeabi_uidiv+0xcc>
100128b4:	010b      	lsls	r3, r1, #4
100128b6:	1ac0      	subs	r0, r0, r3
100128b8:	4152      	adcs	r2, r2
100128ba:	08c3      	lsrs	r3, r0, #3
100128bc:	428b      	cmp	r3, r1
100128be:	d301      	bcc.n	100128c4 <__aeabi_uidiv+0xd8>
100128c0:	00cb      	lsls	r3, r1, #3
100128c2:	1ac0      	subs	r0, r0, r3
100128c4:	4152      	adcs	r2, r2
100128c6:	0883      	lsrs	r3, r0, #2
100128c8:	428b      	cmp	r3, r1
100128ca:	d301      	bcc.n	100128d0 <__aeabi_uidiv+0xe4>
100128cc:	008b      	lsls	r3, r1, #2
100128ce:	1ac0      	subs	r0, r0, r3
100128d0:	4152      	adcs	r2, r2
100128d2:	0843      	lsrs	r3, r0, #1
100128d4:	428b      	cmp	r3, r1
100128d6:	d301      	bcc.n	100128dc <__aeabi_uidiv+0xf0>
100128d8:	004b      	lsls	r3, r1, #1
100128da:	1ac0      	subs	r0, r0, r3
100128dc:	4152      	adcs	r2, r2
100128de:	1a41      	subs	r1, r0, r1
100128e0:	d200      	bcs.n	100128e4 <__aeabi_uidiv+0xf8>
100128e2:	4601      	mov	r1, r0
100128e4:	4152      	adcs	r2, r2
100128e6:	4610      	mov	r0, r2
100128e8:	4770      	bx	lr
100128ea:	e7ff      	b.n	100128ec <__aeabi_uidiv+0x100>
100128ec:	b501      	push	{r0, lr}
100128ee:	2000      	movs	r0, #0
100128f0:	f000 f8f0 	bl	10012ad4 <__aeabi_idiv0>
100128f4:	bd02      	pop	{r1, pc}
100128f6:	46c0      	nop			; (mov r8, r8)

100128f8 <__aeabi_uidivmod>:
100128f8:	2900      	cmp	r1, #0
100128fa:	d0f7      	beq.n	100128ec <__aeabi_uidiv+0x100>
100128fc:	e776      	b.n	100127ec <__aeabi_uidiv>
100128fe:	4770      	bx	lr

10012900 <__aeabi_idiv>:
10012900:	4603      	mov	r3, r0
10012902:	430b      	orrs	r3, r1
10012904:	d47f      	bmi.n	10012a06 <__aeabi_idiv+0x106>
10012906:	2200      	movs	r2, #0
10012908:	0843      	lsrs	r3, r0, #1
1001290a:	428b      	cmp	r3, r1
1001290c:	d374      	bcc.n	100129f8 <__aeabi_idiv+0xf8>
1001290e:	0903      	lsrs	r3, r0, #4
10012910:	428b      	cmp	r3, r1
10012912:	d35f      	bcc.n	100129d4 <__aeabi_idiv+0xd4>
10012914:	0a03      	lsrs	r3, r0, #8
10012916:	428b      	cmp	r3, r1
10012918:	d344      	bcc.n	100129a4 <__aeabi_idiv+0xa4>
1001291a:	0b03      	lsrs	r3, r0, #12
1001291c:	428b      	cmp	r3, r1
1001291e:	d328      	bcc.n	10012972 <__aeabi_idiv+0x72>
10012920:	0c03      	lsrs	r3, r0, #16
10012922:	428b      	cmp	r3, r1
10012924:	d30d      	bcc.n	10012942 <__aeabi_idiv+0x42>
10012926:	22ff      	movs	r2, #255	; 0xff
10012928:	0209      	lsls	r1, r1, #8
1001292a:	ba12      	rev	r2, r2
1001292c:	0c03      	lsrs	r3, r0, #16
1001292e:	428b      	cmp	r3, r1
10012930:	d302      	bcc.n	10012938 <__aeabi_idiv+0x38>
10012932:	1212      	asrs	r2, r2, #8
10012934:	0209      	lsls	r1, r1, #8
10012936:	d065      	beq.n	10012a04 <__aeabi_idiv+0x104>
10012938:	0b03      	lsrs	r3, r0, #12
1001293a:	428b      	cmp	r3, r1
1001293c:	d319      	bcc.n	10012972 <__aeabi_idiv+0x72>
1001293e:	e000      	b.n	10012942 <__aeabi_idiv+0x42>
10012940:	0a09      	lsrs	r1, r1, #8
10012942:	0bc3      	lsrs	r3, r0, #15
10012944:	428b      	cmp	r3, r1
10012946:	d301      	bcc.n	1001294c <__aeabi_idiv+0x4c>
10012948:	03cb      	lsls	r3, r1, #15
1001294a:	1ac0      	subs	r0, r0, r3
1001294c:	4152      	adcs	r2, r2
1001294e:	0b83      	lsrs	r3, r0, #14
10012950:	428b      	cmp	r3, r1
10012952:	d301      	bcc.n	10012958 <__aeabi_idiv+0x58>
10012954:	038b      	lsls	r3, r1, #14
10012956:	1ac0      	subs	r0, r0, r3
10012958:	4152      	adcs	r2, r2
1001295a:	0b43      	lsrs	r3, r0, #13
1001295c:	428b      	cmp	r3, r1
1001295e:	d301      	bcc.n	10012964 <__aeabi_idiv+0x64>
10012960:	034b      	lsls	r3, r1, #13
10012962:	1ac0      	subs	r0, r0, r3
10012964:	4152      	adcs	r2, r2
10012966:	0b03      	lsrs	r3, r0, #12
10012968:	428b      	cmp	r3, r1
1001296a:	d301      	bcc.n	10012970 <__aeabi_idiv+0x70>
1001296c:	030b      	lsls	r3, r1, #12
1001296e:	1ac0      	subs	r0, r0, r3
10012970:	4152      	adcs	r2, r2
10012972:	0ac3      	lsrs	r3, r0, #11
10012974:	428b      	cmp	r3, r1
10012976:	d301      	bcc.n	1001297c <__aeabi_idiv+0x7c>
10012978:	02cb      	lsls	r3, r1, #11
1001297a:	1ac0      	subs	r0, r0, r3
1001297c:	4152      	adcs	r2, r2
1001297e:	0a83      	lsrs	r3, r0, #10
10012980:	428b      	cmp	r3, r1
10012982:	d301      	bcc.n	10012988 <__aeabi_idiv+0x88>
10012984:	028b      	lsls	r3, r1, #10
10012986:	1ac0      	subs	r0, r0, r3
10012988:	4152      	adcs	r2, r2
1001298a:	0a43      	lsrs	r3, r0, #9
1001298c:	428b      	cmp	r3, r1
1001298e:	d301      	bcc.n	10012994 <__aeabi_idiv+0x94>
10012990:	024b      	lsls	r3, r1, #9
10012992:	1ac0      	subs	r0, r0, r3
10012994:	4152      	adcs	r2, r2
10012996:	0a03      	lsrs	r3, r0, #8
10012998:	428b      	cmp	r3, r1
1001299a:	d301      	bcc.n	100129a0 <__aeabi_idiv+0xa0>
1001299c:	020b      	lsls	r3, r1, #8
1001299e:	1ac0      	subs	r0, r0, r3
100129a0:	4152      	adcs	r2, r2
100129a2:	d2cd      	bcs.n	10012940 <__aeabi_idiv+0x40>
100129a4:	09c3      	lsrs	r3, r0, #7
100129a6:	428b      	cmp	r3, r1
100129a8:	d301      	bcc.n	100129ae <__aeabi_idiv+0xae>
100129aa:	01cb      	lsls	r3, r1, #7
100129ac:	1ac0      	subs	r0, r0, r3
100129ae:	4152      	adcs	r2, r2
100129b0:	0983      	lsrs	r3, r0, #6
100129b2:	428b      	cmp	r3, r1
100129b4:	d301      	bcc.n	100129ba <__aeabi_idiv+0xba>
100129b6:	018b      	lsls	r3, r1, #6
100129b8:	1ac0      	subs	r0, r0, r3
100129ba:	4152      	adcs	r2, r2
100129bc:	0943      	lsrs	r3, r0, #5
100129be:	428b      	cmp	r3, r1
100129c0:	d301      	bcc.n	100129c6 <__aeabi_idiv+0xc6>
100129c2:	014b      	lsls	r3, r1, #5
100129c4:	1ac0      	subs	r0, r0, r3
100129c6:	4152      	adcs	r2, r2
100129c8:	0903      	lsrs	r3, r0, #4
100129ca:	428b      	cmp	r3, r1
100129cc:	d301      	bcc.n	100129d2 <__aeabi_idiv+0xd2>
100129ce:	010b      	lsls	r3, r1, #4
100129d0:	1ac0      	subs	r0, r0, r3
100129d2:	4152      	adcs	r2, r2
100129d4:	08c3      	lsrs	r3, r0, #3
100129d6:	428b      	cmp	r3, r1
100129d8:	d301      	bcc.n	100129de <__aeabi_idiv+0xde>
100129da:	00cb      	lsls	r3, r1, #3
100129dc:	1ac0      	subs	r0, r0, r3
100129de:	4152      	adcs	r2, r2
100129e0:	0883      	lsrs	r3, r0, #2
100129e2:	428b      	cmp	r3, r1
100129e4:	d301      	bcc.n	100129ea <__aeabi_idiv+0xea>
100129e6:	008b      	lsls	r3, r1, #2
100129e8:	1ac0      	subs	r0, r0, r3
100129ea:	4152      	adcs	r2, r2
100129ec:	0843      	lsrs	r3, r0, #1
100129ee:	428b      	cmp	r3, r1
100129f0:	d301      	bcc.n	100129f6 <__aeabi_idiv+0xf6>
100129f2:	004b      	lsls	r3, r1, #1
100129f4:	1ac0      	subs	r0, r0, r3
100129f6:	4152      	adcs	r2, r2
100129f8:	1a41      	subs	r1, r0, r1
100129fa:	d200      	bcs.n	100129fe <__aeabi_idiv+0xfe>
100129fc:	4601      	mov	r1, r0
100129fe:	4152      	adcs	r2, r2
10012a00:	4610      	mov	r0, r2
10012a02:	4770      	bx	lr
10012a04:	e05d      	b.n	10012ac2 <__aeabi_idiv+0x1c2>
10012a06:	0fca      	lsrs	r2, r1, #31
10012a08:	d000      	beq.n	10012a0c <__aeabi_idiv+0x10c>
10012a0a:	4249      	negs	r1, r1
10012a0c:	1003      	asrs	r3, r0, #32
10012a0e:	d300      	bcc.n	10012a12 <__aeabi_idiv+0x112>
10012a10:	4240      	negs	r0, r0
10012a12:	4053      	eors	r3, r2
10012a14:	2200      	movs	r2, #0
10012a16:	469c      	mov	ip, r3
10012a18:	0903      	lsrs	r3, r0, #4
10012a1a:	428b      	cmp	r3, r1
10012a1c:	d32d      	bcc.n	10012a7a <__aeabi_idiv+0x17a>
10012a1e:	0a03      	lsrs	r3, r0, #8
10012a20:	428b      	cmp	r3, r1
10012a22:	d312      	bcc.n	10012a4a <__aeabi_idiv+0x14a>
10012a24:	22fc      	movs	r2, #252	; 0xfc
10012a26:	0189      	lsls	r1, r1, #6
10012a28:	ba12      	rev	r2, r2
10012a2a:	0a03      	lsrs	r3, r0, #8
10012a2c:	428b      	cmp	r3, r1
10012a2e:	d30c      	bcc.n	10012a4a <__aeabi_idiv+0x14a>
10012a30:	0189      	lsls	r1, r1, #6
10012a32:	1192      	asrs	r2, r2, #6
10012a34:	428b      	cmp	r3, r1
10012a36:	d308      	bcc.n	10012a4a <__aeabi_idiv+0x14a>
10012a38:	0189      	lsls	r1, r1, #6
10012a3a:	1192      	asrs	r2, r2, #6
10012a3c:	428b      	cmp	r3, r1
10012a3e:	d304      	bcc.n	10012a4a <__aeabi_idiv+0x14a>
10012a40:	0189      	lsls	r1, r1, #6
10012a42:	d03a      	beq.n	10012aba <__aeabi_idiv+0x1ba>
10012a44:	1192      	asrs	r2, r2, #6
10012a46:	e000      	b.n	10012a4a <__aeabi_idiv+0x14a>
10012a48:	0989      	lsrs	r1, r1, #6
10012a4a:	09c3      	lsrs	r3, r0, #7
10012a4c:	428b      	cmp	r3, r1
10012a4e:	d301      	bcc.n	10012a54 <__aeabi_idiv+0x154>
10012a50:	01cb      	lsls	r3, r1, #7
10012a52:	1ac0      	subs	r0, r0, r3
10012a54:	4152      	adcs	r2, r2
10012a56:	0983      	lsrs	r3, r0, #6
10012a58:	428b      	cmp	r3, r1
10012a5a:	d301      	bcc.n	10012a60 <__aeabi_idiv+0x160>
10012a5c:	018b      	lsls	r3, r1, #6
10012a5e:	1ac0      	subs	r0, r0, r3
10012a60:	4152      	adcs	r2, r2
10012a62:	0943      	lsrs	r3, r0, #5
10012a64:	428b      	cmp	r3, r1
10012a66:	d301      	bcc.n	10012a6c <__aeabi_idiv+0x16c>
10012a68:	014b      	lsls	r3, r1, #5
10012a6a:	1ac0      	subs	r0, r0, r3
10012a6c:	4152      	adcs	r2, r2
10012a6e:	0903      	lsrs	r3, r0, #4
10012a70:	428b      	cmp	r3, r1
10012a72:	d301      	bcc.n	10012a78 <__aeabi_idiv+0x178>
10012a74:	010b      	lsls	r3, r1, #4
10012a76:	1ac0      	subs	r0, r0, r3
10012a78:	4152      	adcs	r2, r2
10012a7a:	08c3      	lsrs	r3, r0, #3
10012a7c:	428b      	cmp	r3, r1
10012a7e:	d301      	bcc.n	10012a84 <__aeabi_idiv+0x184>
10012a80:	00cb      	lsls	r3, r1, #3
10012a82:	1ac0      	subs	r0, r0, r3
10012a84:	4152      	adcs	r2, r2
10012a86:	0883      	lsrs	r3, r0, #2
10012a88:	428b      	cmp	r3, r1
10012a8a:	d301      	bcc.n	10012a90 <__aeabi_idiv+0x190>
10012a8c:	008b      	lsls	r3, r1, #2
10012a8e:	1ac0      	subs	r0, r0, r3
10012a90:	4152      	adcs	r2, r2
10012a92:	d2d9      	bcs.n	10012a48 <__aeabi_idiv+0x148>
10012a94:	0843      	lsrs	r3, r0, #1
10012a96:	428b      	cmp	r3, r1
10012a98:	d301      	bcc.n	10012a9e <__aeabi_idiv+0x19e>
10012a9a:	004b      	lsls	r3, r1, #1
10012a9c:	1ac0      	subs	r0, r0, r3
10012a9e:	4152      	adcs	r2, r2
10012aa0:	1a41      	subs	r1, r0, r1
10012aa2:	d200      	bcs.n	10012aa6 <__aeabi_idiv+0x1a6>
10012aa4:	4601      	mov	r1, r0
10012aa6:	4663      	mov	r3, ip
10012aa8:	4152      	adcs	r2, r2
10012aaa:	105b      	asrs	r3, r3, #1
10012aac:	4610      	mov	r0, r2
10012aae:	d301      	bcc.n	10012ab4 <__aeabi_idiv+0x1b4>
10012ab0:	4240      	negs	r0, r0
10012ab2:	2b00      	cmp	r3, #0
10012ab4:	d500      	bpl.n	10012ab8 <__aeabi_idiv+0x1b8>
10012ab6:	4249      	negs	r1, r1
10012ab8:	4770      	bx	lr
10012aba:	4663      	mov	r3, ip
10012abc:	105b      	asrs	r3, r3, #1
10012abe:	d300      	bcc.n	10012ac2 <__aeabi_idiv+0x1c2>
10012ac0:	4240      	negs	r0, r0
10012ac2:	b501      	push	{r0, lr}
10012ac4:	2000      	movs	r0, #0
10012ac6:	f000 f805 	bl	10012ad4 <__aeabi_idiv0>
10012aca:	bd02      	pop	{r1, pc}

10012acc <__aeabi_idivmod>:
10012acc:	2900      	cmp	r1, #0
10012ace:	d0f8      	beq.n	10012ac2 <__aeabi_idiv+0x1c2>
10012ad0:	e716      	b.n	10012900 <__aeabi_idiv>
10012ad2:	4770      	bx	lr

10012ad4 <__aeabi_idiv0>:
10012ad4:	4770      	bx	lr
10012ad6:	46c0      	nop			; (mov r8, r8)

10012ad8 <__aeabi_cdrcmple>:
10012ad8:	4684      	mov	ip, r0
10012ada:	1c10      	adds	r0, r2, #0
10012adc:	4662      	mov	r2, ip
10012ade:	468c      	mov	ip, r1
10012ae0:	1c19      	adds	r1, r3, #0
10012ae2:	4663      	mov	r3, ip
10012ae4:	e000      	b.n	10012ae8 <__aeabi_cdcmpeq>
10012ae6:	46c0      	nop			; (mov r8, r8)

10012ae8 <__aeabi_cdcmpeq>:
10012ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012aea:	f000 fff5 	bl	10013ad8 <__ledf2>
10012aee:	2800      	cmp	r0, #0
10012af0:	d401      	bmi.n	10012af6 <__aeabi_cdcmpeq+0xe>
10012af2:	2100      	movs	r1, #0
10012af4:	42c8      	cmn	r0, r1
10012af6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012af8 <__aeabi_dcmpeq>:
10012af8:	b510      	push	{r4, lr}
10012afa:	f000 ff49 	bl	10013990 <__eqdf2>
10012afe:	4240      	negs	r0, r0
10012b00:	3001      	adds	r0, #1
10012b02:	bd10      	pop	{r4, pc}

10012b04 <__aeabi_dcmplt>:
10012b04:	b510      	push	{r4, lr}
10012b06:	f000 ffe7 	bl	10013ad8 <__ledf2>
10012b0a:	2800      	cmp	r0, #0
10012b0c:	db01      	blt.n	10012b12 <__aeabi_dcmplt+0xe>
10012b0e:	2000      	movs	r0, #0
10012b10:	bd10      	pop	{r4, pc}
10012b12:	2001      	movs	r0, #1
10012b14:	bd10      	pop	{r4, pc}
10012b16:	46c0      	nop			; (mov r8, r8)

10012b18 <__aeabi_dcmple>:
10012b18:	b510      	push	{r4, lr}
10012b1a:	f000 ffdd 	bl	10013ad8 <__ledf2>
10012b1e:	2800      	cmp	r0, #0
10012b20:	dd01      	ble.n	10012b26 <__aeabi_dcmple+0xe>
10012b22:	2000      	movs	r0, #0
10012b24:	bd10      	pop	{r4, pc}
10012b26:	2001      	movs	r0, #1
10012b28:	bd10      	pop	{r4, pc}
10012b2a:	46c0      	nop			; (mov r8, r8)

10012b2c <__aeabi_dcmpgt>:
10012b2c:	b510      	push	{r4, lr}
10012b2e:	f000 ff6f 	bl	10013a10 <__gedf2>
10012b32:	2800      	cmp	r0, #0
10012b34:	dc01      	bgt.n	10012b3a <__aeabi_dcmpgt+0xe>
10012b36:	2000      	movs	r0, #0
10012b38:	bd10      	pop	{r4, pc}
10012b3a:	2001      	movs	r0, #1
10012b3c:	bd10      	pop	{r4, pc}
10012b3e:	46c0      	nop			; (mov r8, r8)

10012b40 <__aeabi_dcmpge>:
10012b40:	b510      	push	{r4, lr}
10012b42:	f000 ff65 	bl	10013a10 <__gedf2>
10012b46:	2800      	cmp	r0, #0
10012b48:	da01      	bge.n	10012b4e <__aeabi_dcmpge+0xe>
10012b4a:	2000      	movs	r0, #0
10012b4c:	bd10      	pop	{r4, pc}
10012b4e:	2001      	movs	r0, #1
10012b50:	bd10      	pop	{r4, pc}
10012b52:	46c0      	nop			; (mov r8, r8)

10012b54 <__aeabi_cfrcmple>:
10012b54:	4684      	mov	ip, r0
10012b56:	1c08      	adds	r0, r1, #0
10012b58:	4661      	mov	r1, ip
10012b5a:	e7ff      	b.n	10012b5c <__aeabi_cfcmpeq>

10012b5c <__aeabi_cfcmpeq>:
10012b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012b5e:	f000 fb91 	bl	10013284 <__lesf2>
10012b62:	2800      	cmp	r0, #0
10012b64:	d401      	bmi.n	10012b6a <__aeabi_cfcmpeq+0xe>
10012b66:	2100      	movs	r1, #0
10012b68:	42c8      	cmn	r0, r1
10012b6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012b6c <__aeabi_fcmpeq>:
10012b6c:	b510      	push	{r4, lr}
10012b6e:	f000 fb1d 	bl	100131ac <__eqsf2>
10012b72:	4240      	negs	r0, r0
10012b74:	3001      	adds	r0, #1
10012b76:	bd10      	pop	{r4, pc}

10012b78 <__aeabi_fcmplt>:
10012b78:	b510      	push	{r4, lr}
10012b7a:	f000 fb83 	bl	10013284 <__lesf2>
10012b7e:	2800      	cmp	r0, #0
10012b80:	db01      	blt.n	10012b86 <__aeabi_fcmplt+0xe>
10012b82:	2000      	movs	r0, #0
10012b84:	bd10      	pop	{r4, pc}
10012b86:	2001      	movs	r0, #1
10012b88:	bd10      	pop	{r4, pc}
10012b8a:	46c0      	nop			; (mov r8, r8)

10012b8c <__aeabi_fcmple>:
10012b8c:	b510      	push	{r4, lr}
10012b8e:	f000 fb79 	bl	10013284 <__lesf2>
10012b92:	2800      	cmp	r0, #0
10012b94:	dd01      	ble.n	10012b9a <__aeabi_fcmple+0xe>
10012b96:	2000      	movs	r0, #0
10012b98:	bd10      	pop	{r4, pc}
10012b9a:	2001      	movs	r0, #1
10012b9c:	bd10      	pop	{r4, pc}
10012b9e:	46c0      	nop			; (mov r8, r8)

10012ba0 <__aeabi_fcmpgt>:
10012ba0:	b510      	push	{r4, lr}
10012ba2:	f000 fb2b 	bl	100131fc <__gesf2>
10012ba6:	2800      	cmp	r0, #0
10012ba8:	dc01      	bgt.n	10012bae <__aeabi_fcmpgt+0xe>
10012baa:	2000      	movs	r0, #0
10012bac:	bd10      	pop	{r4, pc}
10012bae:	2001      	movs	r0, #1
10012bb0:	bd10      	pop	{r4, pc}
10012bb2:	46c0      	nop			; (mov r8, r8)

10012bb4 <__aeabi_fcmpge>:
10012bb4:	b510      	push	{r4, lr}
10012bb6:	f000 fb21 	bl	100131fc <__gesf2>
10012bba:	2800      	cmp	r0, #0
10012bbc:	da01      	bge.n	10012bc2 <__aeabi_fcmpge+0xe>
10012bbe:	2000      	movs	r0, #0
10012bc0:	bd10      	pop	{r4, pc}
10012bc2:	2001      	movs	r0, #1
10012bc4:	bd10      	pop	{r4, pc}
10012bc6:	46c0      	nop			; (mov r8, r8)

10012bc8 <__aeabi_lmul>:
10012bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10012bca:	464f      	mov	r7, r9
10012bcc:	4646      	mov	r6, r8
10012bce:	b4c0      	push	{r6, r7}
10012bd0:	0416      	lsls	r6, r2, #16
10012bd2:	0c36      	lsrs	r6, r6, #16
10012bd4:	4699      	mov	r9, r3
10012bd6:	0033      	movs	r3, r6
10012bd8:	0405      	lsls	r5, r0, #16
10012bda:	0c2c      	lsrs	r4, r5, #16
10012bdc:	0c07      	lsrs	r7, r0, #16
10012bde:	0c15      	lsrs	r5, r2, #16
10012be0:	4363      	muls	r3, r4
10012be2:	437e      	muls	r6, r7
10012be4:	436f      	muls	r7, r5
10012be6:	4365      	muls	r5, r4
10012be8:	0c1c      	lsrs	r4, r3, #16
10012bea:	19ad      	adds	r5, r5, r6
10012bec:	1964      	adds	r4, r4, r5
10012bee:	469c      	mov	ip, r3
10012bf0:	42a6      	cmp	r6, r4
10012bf2:	d903      	bls.n	10012bfc <__aeabi_lmul+0x34>
10012bf4:	2380      	movs	r3, #128	; 0x80
10012bf6:	025b      	lsls	r3, r3, #9
10012bf8:	4698      	mov	r8, r3
10012bfa:	4447      	add	r7, r8
10012bfc:	4663      	mov	r3, ip
10012bfe:	0c25      	lsrs	r5, r4, #16
10012c00:	19ef      	adds	r7, r5, r7
10012c02:	041d      	lsls	r5, r3, #16
10012c04:	464b      	mov	r3, r9
10012c06:	434a      	muls	r2, r1
10012c08:	4343      	muls	r3, r0
10012c0a:	0c2d      	lsrs	r5, r5, #16
10012c0c:	0424      	lsls	r4, r4, #16
10012c0e:	1964      	adds	r4, r4, r5
10012c10:	1899      	adds	r1, r3, r2
10012c12:	19c9      	adds	r1, r1, r7
10012c14:	0020      	movs	r0, r4
10012c16:	bc0c      	pop	{r2, r3}
10012c18:	4690      	mov	r8, r2
10012c1a:	4699      	mov	r9, r3
10012c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c1e:	46c0      	nop			; (mov r8, r8)

10012c20 <__aeabi_f2uiz>:
10012c20:	219e      	movs	r1, #158	; 0x9e
10012c22:	b510      	push	{r4, lr}
10012c24:	05c9      	lsls	r1, r1, #23
10012c26:	1c04      	adds	r4, r0, #0
10012c28:	f7ff ffc4 	bl	10012bb4 <__aeabi_fcmpge>
10012c2c:	2800      	cmp	r0, #0
10012c2e:	d103      	bne.n	10012c38 <__aeabi_f2uiz+0x18>
10012c30:	1c20      	adds	r0, r4, #0
10012c32:	f000 fe05 	bl	10013840 <__aeabi_f2iz>
10012c36:	bd10      	pop	{r4, pc}
10012c38:	219e      	movs	r1, #158	; 0x9e
10012c3a:	1c20      	adds	r0, r4, #0
10012c3c:	05c9      	lsls	r1, r1, #23
10012c3e:	f000 fc79 	bl	10013534 <__aeabi_fsub>
10012c42:	f000 fdfd 	bl	10013840 <__aeabi_f2iz>
10012c46:	2380      	movs	r3, #128	; 0x80
10012c48:	061b      	lsls	r3, r3, #24
10012c4a:	469c      	mov	ip, r3
10012c4c:	4460      	add	r0, ip
10012c4e:	e7f2      	b.n	10012c36 <__aeabi_f2uiz+0x16>

10012c50 <__aeabi_d2uiz>:
10012c50:	b570      	push	{r4, r5, r6, lr}
10012c52:	2200      	movs	r2, #0
10012c54:	4b0c      	ldr	r3, [pc, #48]	; (10012c88 <__aeabi_d2uiz+0x38>)
10012c56:	0004      	movs	r4, r0
10012c58:	000d      	movs	r5, r1
10012c5a:	f7ff ff71 	bl	10012b40 <__aeabi_dcmpge>
10012c5e:	2800      	cmp	r0, #0
10012c60:	d104      	bne.n	10012c6c <__aeabi_d2uiz+0x1c>
10012c62:	0020      	movs	r0, r4
10012c64:	0029      	movs	r1, r5
10012c66:	f001 fd6f 	bl	10014748 <__aeabi_d2iz>
10012c6a:	bd70      	pop	{r4, r5, r6, pc}
10012c6c:	4b06      	ldr	r3, [pc, #24]	; (10012c88 <__aeabi_d2uiz+0x38>)
10012c6e:	2200      	movs	r2, #0
10012c70:	0020      	movs	r0, r4
10012c72:	0029      	movs	r1, r5
10012c74:	f001 fa14 	bl	100140a0 <__aeabi_dsub>
10012c78:	f001 fd66 	bl	10014748 <__aeabi_d2iz>
10012c7c:	2380      	movs	r3, #128	; 0x80
10012c7e:	061b      	lsls	r3, r3, #24
10012c80:	469c      	mov	ip, r3
10012c82:	4460      	add	r0, ip
10012c84:	e7f1      	b.n	10012c6a <__aeabi_d2uiz+0x1a>
10012c86:	46c0      	nop			; (mov r8, r8)
10012c88:	41e00000 	.word	0x41e00000

10012c8c <__aeabi_fadd>:
10012c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012c8e:	024a      	lsls	r2, r1, #9
10012c90:	0243      	lsls	r3, r0, #9
10012c92:	0044      	lsls	r4, r0, #1
10012c94:	004e      	lsls	r6, r1, #1
10012c96:	0fc5      	lsrs	r5, r0, #31
10012c98:	0e24      	lsrs	r4, r4, #24
10012c9a:	0028      	movs	r0, r5
10012c9c:	099b      	lsrs	r3, r3, #6
10012c9e:	0e36      	lsrs	r6, r6, #24
10012ca0:	0fc9      	lsrs	r1, r1, #31
10012ca2:	0992      	lsrs	r2, r2, #6
10012ca4:	428d      	cmp	r5, r1
10012ca6:	d059      	beq.n	10012d5c <__aeabi_fadd+0xd0>
10012ca8:	1ba0      	subs	r0, r4, r6
10012caa:	2800      	cmp	r0, #0
10012cac:	dc00      	bgt.n	10012cb0 <__aeabi_fadd+0x24>
10012cae:	e08d      	b.n	10012dcc <__aeabi_fadd+0x140>
10012cb0:	2e00      	cmp	r6, #0
10012cb2:	d11a      	bne.n	10012cea <__aeabi_fadd+0x5e>
10012cb4:	2a00      	cmp	r2, #0
10012cb6:	d000      	beq.n	10012cba <__aeabi_fadd+0x2e>
10012cb8:	e079      	b.n	10012dae <__aeabi_fadd+0x122>
10012cba:	075a      	lsls	r2, r3, #29
10012cbc:	d004      	beq.n	10012cc8 <__aeabi_fadd+0x3c>
10012cbe:	220f      	movs	r2, #15
10012cc0:	401a      	ands	r2, r3
10012cc2:	2a04      	cmp	r2, #4
10012cc4:	d000      	beq.n	10012cc8 <__aeabi_fadd+0x3c>
10012cc6:	3304      	adds	r3, #4
10012cc8:	015a      	lsls	r2, r3, #5
10012cca:	d538      	bpl.n	10012d3e <__aeabi_fadd+0xb2>
10012ccc:	3401      	adds	r4, #1
10012cce:	2cff      	cmp	r4, #255	; 0xff
10012cd0:	d100      	bne.n	10012cd4 <__aeabi_fadd+0x48>
10012cd2:	e089      	b.n	10012de8 <__aeabi_fadd+0x15c>
10012cd4:	0028      	movs	r0, r5
10012cd6:	019b      	lsls	r3, r3, #6
10012cd8:	0a5b      	lsrs	r3, r3, #9
10012cda:	b2e4      	uxtb	r4, r4
10012cdc:	025b      	lsls	r3, r3, #9
10012cde:	05e4      	lsls	r4, r4, #23
10012ce0:	0a5b      	lsrs	r3, r3, #9
10012ce2:	4323      	orrs	r3, r4
10012ce4:	07c0      	lsls	r0, r0, #31
10012ce6:	4318      	orrs	r0, r3
10012ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012cea:	2cff      	cmp	r4, #255	; 0xff
10012cec:	d0e5      	beq.n	10012cba <__aeabi_fadd+0x2e>
10012cee:	2180      	movs	r1, #128	; 0x80
10012cf0:	04c9      	lsls	r1, r1, #19
10012cf2:	430a      	orrs	r2, r1
10012cf4:	281b      	cmp	r0, #27
10012cf6:	dd00      	ble.n	10012cfa <__aeabi_fadd+0x6e>
10012cf8:	e089      	b.n	10012e0e <__aeabi_fadd+0x182>
10012cfa:	0016      	movs	r6, r2
10012cfc:	2120      	movs	r1, #32
10012cfe:	40c6      	lsrs	r6, r0
10012d00:	1a08      	subs	r0, r1, r0
10012d02:	4082      	lsls	r2, r0
10012d04:	1e51      	subs	r1, r2, #1
10012d06:	418a      	sbcs	r2, r1
10012d08:	4332      	orrs	r2, r6
10012d0a:	1a9b      	subs	r3, r3, r2
10012d0c:	015a      	lsls	r2, r3, #5
10012d0e:	d514      	bpl.n	10012d3a <__aeabi_fadd+0xae>
10012d10:	019b      	lsls	r3, r3, #6
10012d12:	099e      	lsrs	r6, r3, #6
10012d14:	0030      	movs	r0, r6
10012d16:	f001 fd85 	bl	10014824 <__clzsi2>
10012d1a:	3805      	subs	r0, #5
10012d1c:	4086      	lsls	r6, r0
10012d1e:	4284      	cmp	r4, r0
10012d20:	dc65      	bgt.n	10012dee <__aeabi_fadd+0x162>
10012d22:	1b04      	subs	r4, r0, r4
10012d24:	0033      	movs	r3, r6
10012d26:	2020      	movs	r0, #32
10012d28:	3401      	adds	r4, #1
10012d2a:	40e3      	lsrs	r3, r4
10012d2c:	1b04      	subs	r4, r0, r4
10012d2e:	40a6      	lsls	r6, r4
10012d30:	1e72      	subs	r2, r6, #1
10012d32:	4196      	sbcs	r6, r2
10012d34:	2400      	movs	r4, #0
10012d36:	4333      	orrs	r3, r6
10012d38:	e7bf      	b.n	10012cba <__aeabi_fadd+0x2e>
10012d3a:	075a      	lsls	r2, r3, #29
10012d3c:	d1bf      	bne.n	10012cbe <__aeabi_fadd+0x32>
10012d3e:	08df      	lsrs	r7, r3, #3
10012d40:	0028      	movs	r0, r5
10012d42:	2cff      	cmp	r4, #255	; 0xff
10012d44:	d12f      	bne.n	10012da6 <__aeabi_fadd+0x11a>
10012d46:	2f00      	cmp	r7, #0
10012d48:	d100      	bne.n	10012d4c <__aeabi_fadd+0xc0>
10012d4a:	e087      	b.n	10012e5c <__aeabi_fadd+0x1d0>
10012d4c:	2280      	movs	r2, #128	; 0x80
10012d4e:	03d2      	lsls	r2, r2, #15
10012d50:	0013      	movs	r3, r2
10012d52:	433b      	orrs	r3, r7
10012d54:	025b      	lsls	r3, r3, #9
10012d56:	0a5b      	lsrs	r3, r3, #9
10012d58:	24ff      	movs	r4, #255	; 0xff
10012d5a:	e7bf      	b.n	10012cdc <__aeabi_fadd+0x50>
10012d5c:	1ba1      	subs	r1, r4, r6
10012d5e:	2900      	cmp	r1, #0
10012d60:	dd49      	ble.n	10012df6 <__aeabi_fadd+0x16a>
10012d62:	2e00      	cmp	r6, #0
10012d64:	d029      	beq.n	10012dba <__aeabi_fadd+0x12e>
10012d66:	2cff      	cmp	r4, #255	; 0xff
10012d68:	d0a7      	beq.n	10012cba <__aeabi_fadd+0x2e>
10012d6a:	2680      	movs	r6, #128	; 0x80
10012d6c:	04f6      	lsls	r6, r6, #19
10012d6e:	4332      	orrs	r2, r6
10012d70:	291b      	cmp	r1, #27
10012d72:	dd00      	ble.n	10012d76 <__aeabi_fadd+0xea>
10012d74:	e08d      	b.n	10012e92 <__aeabi_fadd+0x206>
10012d76:	0017      	movs	r7, r2
10012d78:	2620      	movs	r6, #32
10012d7a:	40cf      	lsrs	r7, r1
10012d7c:	1a71      	subs	r1, r6, r1
10012d7e:	408a      	lsls	r2, r1
10012d80:	1e51      	subs	r1, r2, #1
10012d82:	418a      	sbcs	r2, r1
10012d84:	433a      	orrs	r2, r7
10012d86:	189b      	adds	r3, r3, r2
10012d88:	015a      	lsls	r2, r3, #5
10012d8a:	d5d6      	bpl.n	10012d3a <__aeabi_fadd+0xae>
10012d8c:	3401      	adds	r4, #1
10012d8e:	2cff      	cmp	r4, #255	; 0xff
10012d90:	d064      	beq.n	10012e5c <__aeabi_fadd+0x1d0>
10012d92:	2201      	movs	r2, #1
10012d94:	4976      	ldr	r1, [pc, #472]	; (10012f70 <__aeabi_fadd+0x2e4>)
10012d96:	401a      	ands	r2, r3
10012d98:	085b      	lsrs	r3, r3, #1
10012d9a:	400b      	ands	r3, r1
10012d9c:	4313      	orrs	r3, r2
10012d9e:	e78c      	b.n	10012cba <__aeabi_fadd+0x2e>
10012da0:	1e03      	subs	r3, r0, #0
10012da2:	d1ca      	bne.n	10012d3a <__aeabi_fadd+0xae>
10012da4:	2000      	movs	r0, #0
10012da6:	027b      	lsls	r3, r7, #9
10012da8:	0a5b      	lsrs	r3, r3, #9
10012daa:	b2e4      	uxtb	r4, r4
10012dac:	e796      	b.n	10012cdc <__aeabi_fadd+0x50>
10012dae:	3801      	subs	r0, #1
10012db0:	2800      	cmp	r0, #0
10012db2:	d0aa      	beq.n	10012d0a <__aeabi_fadd+0x7e>
10012db4:	2cff      	cmp	r4, #255	; 0xff
10012db6:	d19d      	bne.n	10012cf4 <__aeabi_fadd+0x68>
10012db8:	e77f      	b.n	10012cba <__aeabi_fadd+0x2e>
10012dba:	2a00      	cmp	r2, #0
10012dbc:	d100      	bne.n	10012dc0 <__aeabi_fadd+0x134>
10012dbe:	e77c      	b.n	10012cba <__aeabi_fadd+0x2e>
10012dc0:	3901      	subs	r1, #1
10012dc2:	2900      	cmp	r1, #0
10012dc4:	d0df      	beq.n	10012d86 <__aeabi_fadd+0xfa>
10012dc6:	2cff      	cmp	r4, #255	; 0xff
10012dc8:	d1d2      	bne.n	10012d70 <__aeabi_fadd+0xe4>
10012dca:	e776      	b.n	10012cba <__aeabi_fadd+0x2e>
10012dcc:	2800      	cmp	r0, #0
10012dce:	d120      	bne.n	10012e12 <__aeabi_fadd+0x186>
10012dd0:	1c60      	adds	r0, r4, #1
10012dd2:	b2c0      	uxtb	r0, r0
10012dd4:	2801      	cmp	r0, #1
10012dd6:	dd53      	ble.n	10012e80 <__aeabi_fadd+0x1f4>
10012dd8:	2780      	movs	r7, #128	; 0x80
10012dda:	1a9e      	subs	r6, r3, r2
10012ddc:	04ff      	lsls	r7, r7, #19
10012dde:	4037      	ands	r7, r6
10012de0:	d02f      	beq.n	10012e42 <__aeabi_fadd+0x1b6>
10012de2:	1ad6      	subs	r6, r2, r3
10012de4:	000d      	movs	r5, r1
10012de6:	e795      	b.n	10012d14 <__aeabi_fadd+0x88>
10012de8:	0028      	movs	r0, r5
10012dea:	2300      	movs	r3, #0
10012dec:	e776      	b.n	10012cdc <__aeabi_fadd+0x50>
10012dee:	4b61      	ldr	r3, [pc, #388]	; (10012f74 <__aeabi_fadd+0x2e8>)
10012df0:	1a24      	subs	r4, r4, r0
10012df2:	4033      	ands	r3, r6
10012df4:	e761      	b.n	10012cba <__aeabi_fadd+0x2e>
10012df6:	2900      	cmp	r1, #0
10012df8:	d14d      	bne.n	10012e96 <__aeabi_fadd+0x20a>
10012dfa:	1c61      	adds	r1, r4, #1
10012dfc:	b2ce      	uxtb	r6, r1
10012dfe:	2e01      	cmp	r6, #1
10012e00:	dd2f      	ble.n	10012e62 <__aeabi_fadd+0x1d6>
10012e02:	29ff      	cmp	r1, #255	; 0xff
10012e04:	d02a      	beq.n	10012e5c <__aeabi_fadd+0x1d0>
10012e06:	189b      	adds	r3, r3, r2
10012e08:	085b      	lsrs	r3, r3, #1
10012e0a:	000c      	movs	r4, r1
10012e0c:	e755      	b.n	10012cba <__aeabi_fadd+0x2e>
10012e0e:	2201      	movs	r2, #1
10012e10:	e77b      	b.n	10012d0a <__aeabi_fadd+0x7e>
10012e12:	2c00      	cmp	r4, #0
10012e14:	d11b      	bne.n	10012e4e <__aeabi_fadd+0x1c2>
10012e16:	2b00      	cmp	r3, #0
10012e18:	d05b      	beq.n	10012ed2 <__aeabi_fadd+0x246>
10012e1a:	43c0      	mvns	r0, r0
10012e1c:	2800      	cmp	r0, #0
10012e1e:	d00c      	beq.n	10012e3a <__aeabi_fadd+0x1ae>
10012e20:	2eff      	cmp	r6, #255	; 0xff
10012e22:	d07e      	beq.n	10012f22 <__aeabi_fadd+0x296>
10012e24:	281b      	cmp	r0, #27
10012e26:	dd00      	ble.n	10012e2a <__aeabi_fadd+0x19e>
10012e28:	e092      	b.n	10012f50 <__aeabi_fadd+0x2c4>
10012e2a:	001d      	movs	r5, r3
10012e2c:	2420      	movs	r4, #32
10012e2e:	40c5      	lsrs	r5, r0
10012e30:	1a20      	subs	r0, r4, r0
10012e32:	4083      	lsls	r3, r0
10012e34:	1e58      	subs	r0, r3, #1
10012e36:	4183      	sbcs	r3, r0
10012e38:	432b      	orrs	r3, r5
10012e3a:	1ad3      	subs	r3, r2, r3
10012e3c:	0034      	movs	r4, r6
10012e3e:	000d      	movs	r5, r1
10012e40:	e764      	b.n	10012d0c <__aeabi_fadd+0x80>
10012e42:	2e00      	cmp	r6, #0
10012e44:	d000      	beq.n	10012e48 <__aeabi_fadd+0x1bc>
10012e46:	e765      	b.n	10012d14 <__aeabi_fadd+0x88>
10012e48:	2000      	movs	r0, #0
10012e4a:	2400      	movs	r4, #0
10012e4c:	e7ab      	b.n	10012da6 <__aeabi_fadd+0x11a>
10012e4e:	2eff      	cmp	r6, #255	; 0xff
10012e50:	d067      	beq.n	10012f22 <__aeabi_fadd+0x296>
10012e52:	2480      	movs	r4, #128	; 0x80
10012e54:	04e4      	lsls	r4, r4, #19
10012e56:	4240      	negs	r0, r0
10012e58:	4323      	orrs	r3, r4
10012e5a:	e7e3      	b.n	10012e24 <__aeabi_fadd+0x198>
10012e5c:	24ff      	movs	r4, #255	; 0xff
10012e5e:	2300      	movs	r3, #0
10012e60:	e73c      	b.n	10012cdc <__aeabi_fadd+0x50>
10012e62:	2c00      	cmp	r4, #0
10012e64:	d161      	bne.n	10012f2a <__aeabi_fadd+0x29e>
10012e66:	2b00      	cmp	r3, #0
10012e68:	d07e      	beq.n	10012f68 <__aeabi_fadd+0x2dc>
10012e6a:	2a00      	cmp	r2, #0
10012e6c:	d100      	bne.n	10012e70 <__aeabi_fadd+0x1e4>
10012e6e:	e724      	b.n	10012cba <__aeabi_fadd+0x2e>
10012e70:	189b      	adds	r3, r3, r2
10012e72:	015a      	lsls	r2, r3, #5
10012e74:	d400      	bmi.n	10012e78 <__aeabi_fadd+0x1ec>
10012e76:	e760      	b.n	10012d3a <__aeabi_fadd+0xae>
10012e78:	4a3e      	ldr	r2, [pc, #248]	; (10012f74 <__aeabi_fadd+0x2e8>)
10012e7a:	000c      	movs	r4, r1
10012e7c:	4013      	ands	r3, r2
10012e7e:	e71c      	b.n	10012cba <__aeabi_fadd+0x2e>
10012e80:	2c00      	cmp	r4, #0
10012e82:	d11e      	bne.n	10012ec2 <__aeabi_fadd+0x236>
10012e84:	2b00      	cmp	r3, #0
10012e86:	d12f      	bne.n	10012ee8 <__aeabi_fadd+0x25c>
10012e88:	2a00      	cmp	r2, #0
10012e8a:	d066      	beq.n	10012f5a <__aeabi_fadd+0x2ce>
10012e8c:	0013      	movs	r3, r2
10012e8e:	000d      	movs	r5, r1
10012e90:	e713      	b.n	10012cba <__aeabi_fadd+0x2e>
10012e92:	2201      	movs	r2, #1
10012e94:	e777      	b.n	10012d86 <__aeabi_fadd+0xfa>
10012e96:	2c00      	cmp	r4, #0
10012e98:	d11f      	bne.n	10012eda <__aeabi_fadd+0x24e>
10012e9a:	2b00      	cmp	r3, #0
10012e9c:	d05a      	beq.n	10012f54 <__aeabi_fadd+0x2c8>
10012e9e:	43c9      	mvns	r1, r1
10012ea0:	2900      	cmp	r1, #0
10012ea2:	d00b      	beq.n	10012ebc <__aeabi_fadd+0x230>
10012ea4:	2eff      	cmp	r6, #255	; 0xff
10012ea6:	d050      	beq.n	10012f4a <__aeabi_fadd+0x2be>
10012ea8:	291b      	cmp	r1, #27
10012eaa:	dc5f      	bgt.n	10012f6c <__aeabi_fadd+0x2e0>
10012eac:	001f      	movs	r7, r3
10012eae:	2420      	movs	r4, #32
10012eb0:	40cf      	lsrs	r7, r1
10012eb2:	1a61      	subs	r1, r4, r1
10012eb4:	408b      	lsls	r3, r1
10012eb6:	1e59      	subs	r1, r3, #1
10012eb8:	418b      	sbcs	r3, r1
10012eba:	433b      	orrs	r3, r7
10012ebc:	189b      	adds	r3, r3, r2
10012ebe:	0034      	movs	r4, r6
10012ec0:	e762      	b.n	10012d88 <__aeabi_fadd+0xfc>
10012ec2:	2b00      	cmp	r3, #0
10012ec4:	d11c      	bne.n	10012f00 <__aeabi_fadd+0x274>
10012ec6:	2a00      	cmp	r2, #0
10012ec8:	d04a      	beq.n	10012f60 <__aeabi_fadd+0x2d4>
10012eca:	0013      	movs	r3, r2
10012ecc:	000d      	movs	r5, r1
10012ece:	24ff      	movs	r4, #255	; 0xff
10012ed0:	e6f3      	b.n	10012cba <__aeabi_fadd+0x2e>
10012ed2:	0013      	movs	r3, r2
10012ed4:	0034      	movs	r4, r6
10012ed6:	000d      	movs	r5, r1
10012ed8:	e6ef      	b.n	10012cba <__aeabi_fadd+0x2e>
10012eda:	2eff      	cmp	r6, #255	; 0xff
10012edc:	d035      	beq.n	10012f4a <__aeabi_fadd+0x2be>
10012ede:	2480      	movs	r4, #128	; 0x80
10012ee0:	04e4      	lsls	r4, r4, #19
10012ee2:	4249      	negs	r1, r1
10012ee4:	4323      	orrs	r3, r4
10012ee6:	e7df      	b.n	10012ea8 <__aeabi_fadd+0x21c>
10012ee8:	2a00      	cmp	r2, #0
10012eea:	d100      	bne.n	10012eee <__aeabi_fadd+0x262>
10012eec:	e6e5      	b.n	10012cba <__aeabi_fadd+0x2e>
10012eee:	2780      	movs	r7, #128	; 0x80
10012ef0:	1a98      	subs	r0, r3, r2
10012ef2:	04ff      	lsls	r7, r7, #19
10012ef4:	4007      	ands	r7, r0
10012ef6:	d100      	bne.n	10012efa <__aeabi_fadd+0x26e>
10012ef8:	e752      	b.n	10012da0 <__aeabi_fadd+0x114>
10012efa:	1ad3      	subs	r3, r2, r3
10012efc:	000d      	movs	r5, r1
10012efe:	e6dc      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f00:	24ff      	movs	r4, #255	; 0xff
10012f02:	2a00      	cmp	r2, #0
10012f04:	d100      	bne.n	10012f08 <__aeabi_fadd+0x27c>
10012f06:	e6d8      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f08:	2080      	movs	r0, #128	; 0x80
10012f0a:	08db      	lsrs	r3, r3, #3
10012f0c:	03c0      	lsls	r0, r0, #15
10012f0e:	4203      	tst	r3, r0
10012f10:	d004      	beq.n	10012f1c <__aeabi_fadd+0x290>
10012f12:	08d2      	lsrs	r2, r2, #3
10012f14:	4202      	tst	r2, r0
10012f16:	d101      	bne.n	10012f1c <__aeabi_fadd+0x290>
10012f18:	0013      	movs	r3, r2
10012f1a:	000d      	movs	r5, r1
10012f1c:	00db      	lsls	r3, r3, #3
10012f1e:	24ff      	movs	r4, #255	; 0xff
10012f20:	e6cb      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f22:	0013      	movs	r3, r2
10012f24:	24ff      	movs	r4, #255	; 0xff
10012f26:	000d      	movs	r5, r1
10012f28:	e6c7      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f2a:	2b00      	cmp	r3, #0
10012f2c:	d00d      	beq.n	10012f4a <__aeabi_fadd+0x2be>
10012f2e:	24ff      	movs	r4, #255	; 0xff
10012f30:	2a00      	cmp	r2, #0
10012f32:	d100      	bne.n	10012f36 <__aeabi_fadd+0x2aa>
10012f34:	e6c1      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f36:	2180      	movs	r1, #128	; 0x80
10012f38:	08db      	lsrs	r3, r3, #3
10012f3a:	03c9      	lsls	r1, r1, #15
10012f3c:	420b      	tst	r3, r1
10012f3e:	d0ed      	beq.n	10012f1c <__aeabi_fadd+0x290>
10012f40:	08d2      	lsrs	r2, r2, #3
10012f42:	420a      	tst	r2, r1
10012f44:	d1ea      	bne.n	10012f1c <__aeabi_fadd+0x290>
10012f46:	0013      	movs	r3, r2
10012f48:	e7e8      	b.n	10012f1c <__aeabi_fadd+0x290>
10012f4a:	0013      	movs	r3, r2
10012f4c:	24ff      	movs	r4, #255	; 0xff
10012f4e:	e6b4      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f50:	2301      	movs	r3, #1
10012f52:	e772      	b.n	10012e3a <__aeabi_fadd+0x1ae>
10012f54:	0013      	movs	r3, r2
10012f56:	0034      	movs	r4, r6
10012f58:	e6af      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f5a:	2700      	movs	r7, #0
10012f5c:	2000      	movs	r0, #0
10012f5e:	e722      	b.n	10012da6 <__aeabi_fadd+0x11a>
10012f60:	2780      	movs	r7, #128	; 0x80
10012f62:	2000      	movs	r0, #0
10012f64:	03ff      	lsls	r7, r7, #15
10012f66:	e6f1      	b.n	10012d4c <__aeabi_fadd+0xc0>
10012f68:	0013      	movs	r3, r2
10012f6a:	e6a6      	b.n	10012cba <__aeabi_fadd+0x2e>
10012f6c:	2301      	movs	r3, #1
10012f6e:	e7a5      	b.n	10012ebc <__aeabi_fadd+0x230>
10012f70:	7dffffff 	.word	0x7dffffff
10012f74:	fbffffff 	.word	0xfbffffff

10012f78 <__aeabi_fdiv>:
10012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10012f7a:	4656      	mov	r6, sl
10012f7c:	4644      	mov	r4, r8
10012f7e:	465f      	mov	r7, fp
10012f80:	464d      	mov	r5, r9
10012f82:	b4f0      	push	{r4, r5, r6, r7}
10012f84:	0244      	lsls	r4, r0, #9
10012f86:	0046      	lsls	r6, r0, #1
10012f88:	0fc7      	lsrs	r7, r0, #31
10012f8a:	b083      	sub	sp, #12
10012f8c:	4688      	mov	r8, r1
10012f8e:	0a65      	lsrs	r5, r4, #9
10012f90:	0e36      	lsrs	r6, r6, #24
10012f92:	46ba      	mov	sl, r7
10012f94:	d03d      	beq.n	10013012 <__aeabi_fdiv+0x9a>
10012f96:	2eff      	cmp	r6, #255	; 0xff
10012f98:	d022      	beq.n	10012fe0 <__aeabi_fdiv+0x68>
10012f9a:	2300      	movs	r3, #0
10012f9c:	00ec      	lsls	r4, r5, #3
10012f9e:	2580      	movs	r5, #128	; 0x80
10012fa0:	4699      	mov	r9, r3
10012fa2:	469b      	mov	fp, r3
10012fa4:	04ed      	lsls	r5, r5, #19
10012fa6:	4325      	orrs	r5, r4
10012fa8:	3e7f      	subs	r6, #127	; 0x7f
10012faa:	4643      	mov	r3, r8
10012fac:	025c      	lsls	r4, r3, #9
10012fae:	0058      	lsls	r0, r3, #1
10012fb0:	0fdb      	lsrs	r3, r3, #31
10012fb2:	0a64      	lsrs	r4, r4, #9
10012fb4:	0e00      	lsrs	r0, r0, #24
10012fb6:	4698      	mov	r8, r3
10012fb8:	d036      	beq.n	10013028 <__aeabi_fdiv+0xb0>
10012fba:	28ff      	cmp	r0, #255	; 0xff
10012fbc:	d030      	beq.n	10013020 <__aeabi_fdiv+0xa8>
10012fbe:	2380      	movs	r3, #128	; 0x80
10012fc0:	2100      	movs	r1, #0
10012fc2:	00e4      	lsls	r4, r4, #3
10012fc4:	04db      	lsls	r3, r3, #19
10012fc6:	431c      	orrs	r4, r3
10012fc8:	387f      	subs	r0, #127	; 0x7f
10012fca:	1a30      	subs	r0, r6, r0
10012fcc:	9001      	str	r0, [sp, #4]
10012fce:	4648      	mov	r0, r9
10012fd0:	4642      	mov	r2, r8
10012fd2:	4308      	orrs	r0, r1
10012fd4:	4e72      	ldr	r6, [pc, #456]	; (100131a0 <__aeabi_fdiv+0x228>)
10012fd6:	0080      	lsls	r0, r0, #2
10012fd8:	5830      	ldr	r0, [r6, r0]
10012fda:	407a      	eors	r2, r7
10012fdc:	0013      	movs	r3, r2
10012fde:	4687      	mov	pc, r0
10012fe0:	2d00      	cmp	r5, #0
10012fe2:	d144      	bne.n	1001306e <__aeabi_fdiv+0xf6>
10012fe4:	2308      	movs	r3, #8
10012fe6:	4699      	mov	r9, r3
10012fe8:	3b06      	subs	r3, #6
10012fea:	469b      	mov	fp, r3
10012fec:	e7dd      	b.n	10012faa <__aeabi_fdiv+0x32>
10012fee:	2201      	movs	r2, #1
10012ff0:	20ff      	movs	r0, #255	; 0xff
10012ff2:	2400      	movs	r4, #0
10012ff4:	401a      	ands	r2, r3
10012ff6:	0264      	lsls	r4, r4, #9
10012ff8:	05c3      	lsls	r3, r0, #23
10012ffa:	0a64      	lsrs	r4, r4, #9
10012ffc:	07d2      	lsls	r2, r2, #31
10012ffe:	431c      	orrs	r4, r3
10013000:	4314      	orrs	r4, r2
10013002:	0020      	movs	r0, r4
10013004:	b003      	add	sp, #12
10013006:	bc3c      	pop	{r2, r3, r4, r5}
10013008:	4690      	mov	r8, r2
1001300a:	4699      	mov	r9, r3
1001300c:	46a2      	mov	sl, r4
1001300e:	46ab      	mov	fp, r5
10013010:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013012:	2d00      	cmp	r5, #0
10013014:	d120      	bne.n	10013058 <__aeabi_fdiv+0xe0>
10013016:	2304      	movs	r3, #4
10013018:	4699      	mov	r9, r3
1001301a:	3b03      	subs	r3, #3
1001301c:	469b      	mov	fp, r3
1001301e:	e7c4      	b.n	10012faa <__aeabi_fdiv+0x32>
10013020:	2c00      	cmp	r4, #0
10013022:	d117      	bne.n	10013054 <__aeabi_fdiv+0xdc>
10013024:	2102      	movs	r1, #2
10013026:	e002      	b.n	1001302e <__aeabi_fdiv+0xb6>
10013028:	2c00      	cmp	r4, #0
1001302a:	d10a      	bne.n	10013042 <__aeabi_fdiv+0xca>
1001302c:	2101      	movs	r1, #1
1001302e:	1a32      	subs	r2, r6, r0
10013030:	9201      	str	r2, [sp, #4]
10013032:	464a      	mov	r2, r9
10013034:	4643      	mov	r3, r8
10013036:	430a      	orrs	r2, r1
10013038:	485a      	ldr	r0, [pc, #360]	; (100131a4 <__aeabi_fdiv+0x22c>)
1001303a:	0092      	lsls	r2, r2, #2
1001303c:	5882      	ldr	r2, [r0, r2]
1001303e:	407b      	eors	r3, r7
10013040:	4697      	mov	pc, r2
10013042:	0020      	movs	r0, r4
10013044:	f001 fbee 	bl	10014824 <__clzsi2>
10013048:	1f43      	subs	r3, r0, #5
1001304a:	3076      	adds	r0, #118	; 0x76
1001304c:	409c      	lsls	r4, r3
1001304e:	4240      	negs	r0, r0
10013050:	2100      	movs	r1, #0
10013052:	e7ba      	b.n	10012fca <__aeabi_fdiv+0x52>
10013054:	2103      	movs	r1, #3
10013056:	e7b8      	b.n	10012fca <__aeabi_fdiv+0x52>
10013058:	0028      	movs	r0, r5
1001305a:	f001 fbe3 	bl	10014824 <__clzsi2>
1001305e:	1f43      	subs	r3, r0, #5
10013060:	409d      	lsls	r5, r3
10013062:	2300      	movs	r3, #0
10013064:	3076      	adds	r0, #118	; 0x76
10013066:	4246      	negs	r6, r0
10013068:	4699      	mov	r9, r3
1001306a:	469b      	mov	fp, r3
1001306c:	e79d      	b.n	10012faa <__aeabi_fdiv+0x32>
1001306e:	230c      	movs	r3, #12
10013070:	4699      	mov	r9, r3
10013072:	3b09      	subs	r3, #9
10013074:	469b      	mov	fp, r3
10013076:	e798      	b.n	10012faa <__aeabi_fdiv+0x32>
10013078:	2480      	movs	r4, #128	; 0x80
1001307a:	2200      	movs	r2, #0
1001307c:	03e4      	lsls	r4, r4, #15
1001307e:	20ff      	movs	r0, #255	; 0xff
10013080:	e7b9      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
10013082:	2400      	movs	r4, #0
10013084:	46c2      	mov	sl, r8
10013086:	468b      	mov	fp, r1
10013088:	465a      	mov	r2, fp
1001308a:	4653      	mov	r3, sl
1001308c:	2a02      	cmp	r2, #2
1001308e:	d0ae      	beq.n	10012fee <__aeabi_fdiv+0x76>
10013090:	2a03      	cmp	r2, #3
10013092:	d07d      	beq.n	10013190 <__aeabi_fdiv+0x218>
10013094:	2a01      	cmp	r2, #1
10013096:	d131      	bne.n	100130fc <__aeabi_fdiv+0x184>
10013098:	2201      	movs	r2, #1
1001309a:	2000      	movs	r0, #0
1001309c:	401a      	ands	r2, r3
1001309e:	2400      	movs	r4, #0
100130a0:	e7a9      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
100130a2:	2201      	movs	r2, #1
100130a4:	1a10      	subs	r0, r2, r0
100130a6:	281b      	cmp	r0, #27
100130a8:	dd56      	ble.n	10013158 <__aeabi_fdiv+0x1e0>
100130aa:	401a      	ands	r2, r3
100130ac:	2000      	movs	r0, #0
100130ae:	2400      	movs	r4, #0
100130b0:	e7a1      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
100130b2:	2380      	movs	r3, #128	; 0x80
100130b4:	03db      	lsls	r3, r3, #15
100130b6:	421d      	tst	r5, r3
100130b8:	d14b      	bne.n	10013152 <__aeabi_fdiv+0x1da>
100130ba:	2380      	movs	r3, #128	; 0x80
100130bc:	03db      	lsls	r3, r3, #15
100130be:	432b      	orrs	r3, r5
100130c0:	025c      	lsls	r4, r3, #9
100130c2:	0a64      	lsrs	r4, r4, #9
100130c4:	003a      	movs	r2, r7
100130c6:	20ff      	movs	r0, #255	; 0xff
100130c8:	e795      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
100130ca:	016d      	lsls	r5, r5, #5
100130cc:	0160      	lsls	r0, r4, #5
100130ce:	4285      	cmp	r5, r0
100130d0:	d230      	bcs.n	10013134 <__aeabi_fdiv+0x1bc>
100130d2:	9a01      	ldr	r2, [sp, #4]
100130d4:	2400      	movs	r4, #0
100130d6:	3a01      	subs	r2, #1
100130d8:	9201      	str	r2, [sp, #4]
100130da:	221b      	movs	r2, #27
100130dc:	2701      	movs	r7, #1
100130de:	0029      	movs	r1, r5
100130e0:	0064      	lsls	r4, r4, #1
100130e2:	006d      	lsls	r5, r5, #1
100130e4:	2900      	cmp	r1, #0
100130e6:	db01      	blt.n	100130ec <__aeabi_fdiv+0x174>
100130e8:	42a8      	cmp	r0, r5
100130ea:	d801      	bhi.n	100130f0 <__aeabi_fdiv+0x178>
100130ec:	1a2d      	subs	r5, r5, r0
100130ee:	433c      	orrs	r4, r7
100130f0:	3a01      	subs	r2, #1
100130f2:	2a00      	cmp	r2, #0
100130f4:	d1f3      	bne.n	100130de <__aeabi_fdiv+0x166>
100130f6:	1e6a      	subs	r2, r5, #1
100130f8:	4195      	sbcs	r5, r2
100130fa:	432c      	orrs	r4, r5
100130fc:	9801      	ldr	r0, [sp, #4]
100130fe:	307f      	adds	r0, #127	; 0x7f
10013100:	2800      	cmp	r0, #0
10013102:	ddce      	ble.n	100130a2 <__aeabi_fdiv+0x12a>
10013104:	0762      	lsls	r2, r4, #29
10013106:	d004      	beq.n	10013112 <__aeabi_fdiv+0x19a>
10013108:	220f      	movs	r2, #15
1001310a:	4022      	ands	r2, r4
1001310c:	2a04      	cmp	r2, #4
1001310e:	d000      	beq.n	10013112 <__aeabi_fdiv+0x19a>
10013110:	3404      	adds	r4, #4
10013112:	0122      	lsls	r2, r4, #4
10013114:	d503      	bpl.n	1001311e <__aeabi_fdiv+0x1a6>
10013116:	4a24      	ldr	r2, [pc, #144]	; (100131a8 <__aeabi_fdiv+0x230>)
10013118:	9801      	ldr	r0, [sp, #4]
1001311a:	4014      	ands	r4, r2
1001311c:	3080      	adds	r0, #128	; 0x80
1001311e:	28fe      	cmp	r0, #254	; 0xfe
10013120:	dd00      	ble.n	10013124 <__aeabi_fdiv+0x1ac>
10013122:	e764      	b.n	10012fee <__aeabi_fdiv+0x76>
10013124:	2201      	movs	r2, #1
10013126:	01a4      	lsls	r4, r4, #6
10013128:	0a64      	lsrs	r4, r4, #9
1001312a:	b2c0      	uxtb	r0, r0
1001312c:	401a      	ands	r2, r3
1001312e:	e762      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
10013130:	002c      	movs	r4, r5
10013132:	e7a9      	b.n	10013088 <__aeabi_fdiv+0x110>
10013134:	1a2d      	subs	r5, r5, r0
10013136:	221a      	movs	r2, #26
10013138:	2401      	movs	r4, #1
1001313a:	e7cf      	b.n	100130dc <__aeabi_fdiv+0x164>
1001313c:	026b      	lsls	r3, r5, #9
1001313e:	d5bc      	bpl.n	100130ba <__aeabi_fdiv+0x142>
10013140:	2400      	movs	r4, #0
10013142:	2380      	movs	r3, #128	; 0x80
10013144:	03db      	lsls	r3, r3, #15
10013146:	431c      	orrs	r4, r3
10013148:	0264      	lsls	r4, r4, #9
1001314a:	0a64      	lsrs	r4, r4, #9
1001314c:	4642      	mov	r2, r8
1001314e:	20ff      	movs	r0, #255	; 0xff
10013150:	e751      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
10013152:	421c      	tst	r4, r3
10013154:	d1b3      	bne.n	100130be <__aeabi_fdiv+0x146>
10013156:	e7f4      	b.n	10013142 <__aeabi_fdiv+0x1ca>
10013158:	0021      	movs	r1, r4
1001315a:	2220      	movs	r2, #32
1001315c:	40c1      	lsrs	r1, r0
1001315e:	1a10      	subs	r0, r2, r0
10013160:	4084      	lsls	r4, r0
10013162:	1e62      	subs	r2, r4, #1
10013164:	4194      	sbcs	r4, r2
10013166:	430c      	orrs	r4, r1
10013168:	0762      	lsls	r2, r4, #29
1001316a:	d004      	beq.n	10013176 <__aeabi_fdiv+0x1fe>
1001316c:	220f      	movs	r2, #15
1001316e:	4022      	ands	r2, r4
10013170:	2a04      	cmp	r2, #4
10013172:	d000      	beq.n	10013176 <__aeabi_fdiv+0x1fe>
10013174:	3404      	adds	r4, #4
10013176:	0162      	lsls	r2, r4, #5
10013178:	d504      	bpl.n	10013184 <__aeabi_fdiv+0x20c>
1001317a:	2201      	movs	r2, #1
1001317c:	2001      	movs	r0, #1
1001317e:	401a      	ands	r2, r3
10013180:	2400      	movs	r4, #0
10013182:	e738      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
10013184:	2201      	movs	r2, #1
10013186:	01a4      	lsls	r4, r4, #6
10013188:	0a64      	lsrs	r4, r4, #9
1001318a:	401a      	ands	r2, r3
1001318c:	2000      	movs	r0, #0
1001318e:	e732      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
10013190:	2380      	movs	r3, #128	; 0x80
10013192:	03db      	lsls	r3, r3, #15
10013194:	431c      	orrs	r4, r3
10013196:	0264      	lsls	r4, r4, #9
10013198:	0a64      	lsrs	r4, r4, #9
1001319a:	4652      	mov	r2, sl
1001319c:	20ff      	movs	r0, #255	; 0xff
1001319e:	e72a      	b.n	10012ff6 <__aeabi_fdiv+0x7e>
100131a0:	10016ea4 	.word	0x10016ea4
100131a4:	10016ee4 	.word	0x10016ee4
100131a8:	f7ffffff 	.word	0xf7ffffff

100131ac <__eqsf2>:
100131ac:	0243      	lsls	r3, r0, #9
100131ae:	b570      	push	{r4, r5, r6, lr}
100131b0:	0042      	lsls	r2, r0, #1
100131b2:	004c      	lsls	r4, r1, #1
100131b4:	0a5d      	lsrs	r5, r3, #9
100131b6:	0fc3      	lsrs	r3, r0, #31
100131b8:	0248      	lsls	r0, r1, #9
100131ba:	0e12      	lsrs	r2, r2, #24
100131bc:	0a46      	lsrs	r6, r0, #9
100131be:	0e24      	lsrs	r4, r4, #24
100131c0:	0fc9      	lsrs	r1, r1, #31
100131c2:	2aff      	cmp	r2, #255	; 0xff
100131c4:	d00f      	beq.n	100131e6 <__eqsf2+0x3a>
100131c6:	2cff      	cmp	r4, #255	; 0xff
100131c8:	d011      	beq.n	100131ee <__eqsf2+0x42>
100131ca:	2001      	movs	r0, #1
100131cc:	42a2      	cmp	r2, r4
100131ce:	d000      	beq.n	100131d2 <__eqsf2+0x26>
100131d0:	bd70      	pop	{r4, r5, r6, pc}
100131d2:	42b5      	cmp	r5, r6
100131d4:	d1fc      	bne.n	100131d0 <__eqsf2+0x24>
100131d6:	428b      	cmp	r3, r1
100131d8:	d00d      	beq.n	100131f6 <__eqsf2+0x4a>
100131da:	2a00      	cmp	r2, #0
100131dc:	d1f8      	bne.n	100131d0 <__eqsf2+0x24>
100131de:	0028      	movs	r0, r5
100131e0:	1e43      	subs	r3, r0, #1
100131e2:	4198      	sbcs	r0, r3
100131e4:	e7f4      	b.n	100131d0 <__eqsf2+0x24>
100131e6:	2001      	movs	r0, #1
100131e8:	2d00      	cmp	r5, #0
100131ea:	d1f1      	bne.n	100131d0 <__eqsf2+0x24>
100131ec:	e7eb      	b.n	100131c6 <__eqsf2+0x1a>
100131ee:	2001      	movs	r0, #1
100131f0:	2e00      	cmp	r6, #0
100131f2:	d1ed      	bne.n	100131d0 <__eqsf2+0x24>
100131f4:	e7e9      	b.n	100131ca <__eqsf2+0x1e>
100131f6:	2000      	movs	r0, #0
100131f8:	e7ea      	b.n	100131d0 <__eqsf2+0x24>
100131fa:	46c0      	nop			; (mov r8, r8)

100131fc <__gesf2>:
100131fc:	0243      	lsls	r3, r0, #9
100131fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10013200:	0042      	lsls	r2, r0, #1
10013202:	0a5d      	lsrs	r5, r3, #9
10013204:	0fc3      	lsrs	r3, r0, #31
10013206:	0248      	lsls	r0, r1, #9
10013208:	0a44      	lsrs	r4, r0, #9
1001320a:	0048      	lsls	r0, r1, #1
1001320c:	0e12      	lsrs	r2, r2, #24
1001320e:	0e00      	lsrs	r0, r0, #24
10013210:	0fc9      	lsrs	r1, r1, #31
10013212:	2aff      	cmp	r2, #255	; 0xff
10013214:	d01f      	beq.n	10013256 <__gesf2+0x5a>
10013216:	28ff      	cmp	r0, #255	; 0xff
10013218:	d022      	beq.n	10013260 <__gesf2+0x64>
1001321a:	2a00      	cmp	r2, #0
1001321c:	d109      	bne.n	10013232 <__gesf2+0x36>
1001321e:	426e      	negs	r6, r5
10013220:	416e      	adcs	r6, r5
10013222:	2800      	cmp	r0, #0
10013224:	d10f      	bne.n	10013246 <__gesf2+0x4a>
10013226:	2c00      	cmp	r4, #0
10013228:	d10d      	bne.n	10013246 <__gesf2+0x4a>
1001322a:	2000      	movs	r0, #0
1001322c:	2d00      	cmp	r5, #0
1001322e:	d009      	beq.n	10013244 <__gesf2+0x48>
10013230:	e005      	b.n	1001323e <__gesf2+0x42>
10013232:	2800      	cmp	r0, #0
10013234:	d101      	bne.n	1001323a <__gesf2+0x3e>
10013236:	2c00      	cmp	r4, #0
10013238:	d001      	beq.n	1001323e <__gesf2+0x42>
1001323a:	428b      	cmp	r3, r1
1001323c:	d013      	beq.n	10013266 <__gesf2+0x6a>
1001323e:	4258      	negs	r0, r3
10013240:	2301      	movs	r3, #1
10013242:	4318      	orrs	r0, r3
10013244:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013246:	2e00      	cmp	r6, #0
10013248:	d0f7      	beq.n	1001323a <__gesf2+0x3e>
1001324a:	4248      	negs	r0, r1
1001324c:	4141      	adcs	r1, r0
1001324e:	2001      	movs	r0, #1
10013250:	4249      	negs	r1, r1
10013252:	4308      	orrs	r0, r1
10013254:	e7f6      	b.n	10013244 <__gesf2+0x48>
10013256:	2d00      	cmp	r5, #0
10013258:	d0dd      	beq.n	10013216 <__gesf2+0x1a>
1001325a:	2002      	movs	r0, #2
1001325c:	4240      	negs	r0, r0
1001325e:	e7f1      	b.n	10013244 <__gesf2+0x48>
10013260:	2c00      	cmp	r4, #0
10013262:	d0da      	beq.n	1001321a <__gesf2+0x1e>
10013264:	e7f9      	b.n	1001325a <__gesf2+0x5e>
10013266:	4282      	cmp	r2, r0
10013268:	dce9      	bgt.n	1001323e <__gesf2+0x42>
1001326a:	db04      	blt.n	10013276 <__gesf2+0x7a>
1001326c:	42a5      	cmp	r5, r4
1001326e:	d8e6      	bhi.n	1001323e <__gesf2+0x42>
10013270:	2000      	movs	r0, #0
10013272:	42a5      	cmp	r5, r4
10013274:	d2e6      	bcs.n	10013244 <__gesf2+0x48>
10013276:	4258      	negs	r0, r3
10013278:	4143      	adcs	r3, r0
1001327a:	2001      	movs	r0, #1
1001327c:	425b      	negs	r3, r3
1001327e:	4318      	orrs	r0, r3
10013280:	e7e0      	b.n	10013244 <__gesf2+0x48>
10013282:	46c0      	nop			; (mov r8, r8)

10013284 <__lesf2>:
10013284:	0243      	lsls	r3, r0, #9
10013286:	b5f0      	push	{r4, r5, r6, r7, lr}
10013288:	0042      	lsls	r2, r0, #1
1001328a:	004c      	lsls	r4, r1, #1
1001328c:	0a5e      	lsrs	r6, r3, #9
1001328e:	0fc3      	lsrs	r3, r0, #31
10013290:	0248      	lsls	r0, r1, #9
10013292:	0e12      	lsrs	r2, r2, #24
10013294:	0a45      	lsrs	r5, r0, #9
10013296:	0e24      	lsrs	r4, r4, #24
10013298:	0fc9      	lsrs	r1, r1, #31
1001329a:	2aff      	cmp	r2, #255	; 0xff
1001329c:	d017      	beq.n	100132ce <__lesf2+0x4a>
1001329e:	2cff      	cmp	r4, #255	; 0xff
100132a0:	d019      	beq.n	100132d6 <__lesf2+0x52>
100132a2:	2a00      	cmp	r2, #0
100132a4:	d10b      	bne.n	100132be <__lesf2+0x3a>
100132a6:	4270      	negs	r0, r6
100132a8:	4170      	adcs	r0, r6
100132aa:	2c00      	cmp	r4, #0
100132ac:	d017      	beq.n	100132de <__lesf2+0x5a>
100132ae:	2800      	cmp	r0, #0
100132b0:	d007      	beq.n	100132c2 <__lesf2+0x3e>
100132b2:	4248      	negs	r0, r1
100132b4:	4141      	adcs	r1, r0
100132b6:	2001      	movs	r0, #1
100132b8:	4249      	negs	r1, r1
100132ba:	4308      	orrs	r0, r1
100132bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100132be:	2c00      	cmp	r4, #0
100132c0:	d013      	beq.n	100132ea <__lesf2+0x66>
100132c2:	428b      	cmp	r3, r1
100132c4:	d014      	beq.n	100132f0 <__lesf2+0x6c>
100132c6:	4258      	negs	r0, r3
100132c8:	2301      	movs	r3, #1
100132ca:	4318      	orrs	r0, r3
100132cc:	e7f6      	b.n	100132bc <__lesf2+0x38>
100132ce:	2002      	movs	r0, #2
100132d0:	2e00      	cmp	r6, #0
100132d2:	d1f3      	bne.n	100132bc <__lesf2+0x38>
100132d4:	e7e3      	b.n	1001329e <__lesf2+0x1a>
100132d6:	2002      	movs	r0, #2
100132d8:	2d00      	cmp	r5, #0
100132da:	d1ef      	bne.n	100132bc <__lesf2+0x38>
100132dc:	e7e1      	b.n	100132a2 <__lesf2+0x1e>
100132de:	2d00      	cmp	r5, #0
100132e0:	d1e5      	bne.n	100132ae <__lesf2+0x2a>
100132e2:	2000      	movs	r0, #0
100132e4:	2e00      	cmp	r6, #0
100132e6:	d0e9      	beq.n	100132bc <__lesf2+0x38>
100132e8:	e7ed      	b.n	100132c6 <__lesf2+0x42>
100132ea:	2d00      	cmp	r5, #0
100132ec:	d1e9      	bne.n	100132c2 <__lesf2+0x3e>
100132ee:	e7ea      	b.n	100132c6 <__lesf2+0x42>
100132f0:	42a2      	cmp	r2, r4
100132f2:	dce8      	bgt.n	100132c6 <__lesf2+0x42>
100132f4:	db04      	blt.n	10013300 <__lesf2+0x7c>
100132f6:	42ae      	cmp	r6, r5
100132f8:	d8e5      	bhi.n	100132c6 <__lesf2+0x42>
100132fa:	2000      	movs	r0, #0
100132fc:	42ae      	cmp	r6, r5
100132fe:	d2dd      	bcs.n	100132bc <__lesf2+0x38>
10013300:	4258      	negs	r0, r3
10013302:	4143      	adcs	r3, r0
10013304:	2001      	movs	r0, #1
10013306:	425b      	negs	r3, r3
10013308:	4318      	orrs	r0, r3
1001330a:	e7d7      	b.n	100132bc <__lesf2+0x38>

1001330c <__aeabi_fmul>:
1001330c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001330e:	4657      	mov	r7, sl
10013310:	464e      	mov	r6, r9
10013312:	4645      	mov	r5, r8
10013314:	0043      	lsls	r3, r0, #1
10013316:	b4e0      	push	{r5, r6, r7}
10013318:	0246      	lsls	r6, r0, #9
1001331a:	4688      	mov	r8, r1
1001331c:	0a76      	lsrs	r6, r6, #9
1001331e:	0e1f      	lsrs	r7, r3, #24
10013320:	0fc4      	lsrs	r4, r0, #31
10013322:	2f00      	cmp	r7, #0
10013324:	d047      	beq.n	100133b6 <__aeabi_fmul+0xaa>
10013326:	2fff      	cmp	r7, #255	; 0xff
10013328:	d025      	beq.n	10013376 <__aeabi_fmul+0x6a>
1001332a:	2300      	movs	r3, #0
1001332c:	2580      	movs	r5, #128	; 0x80
1001332e:	469a      	mov	sl, r3
10013330:	4699      	mov	r9, r3
10013332:	00f6      	lsls	r6, r6, #3
10013334:	04ed      	lsls	r5, r5, #19
10013336:	432e      	orrs	r6, r5
10013338:	3f7f      	subs	r7, #127	; 0x7f
1001333a:	4643      	mov	r3, r8
1001333c:	4642      	mov	r2, r8
1001333e:	025d      	lsls	r5, r3, #9
10013340:	0fd2      	lsrs	r2, r2, #31
10013342:	005b      	lsls	r3, r3, #1
10013344:	0a6d      	lsrs	r5, r5, #9
10013346:	0e1b      	lsrs	r3, r3, #24
10013348:	4690      	mov	r8, r2
1001334a:	d040      	beq.n	100133ce <__aeabi_fmul+0xc2>
1001334c:	2bff      	cmp	r3, #255	; 0xff
1001334e:	d039      	beq.n	100133c4 <__aeabi_fmul+0xb8>
10013350:	2280      	movs	r2, #128	; 0x80
10013352:	2000      	movs	r0, #0
10013354:	00ed      	lsls	r5, r5, #3
10013356:	04d2      	lsls	r2, r2, #19
10013358:	4315      	orrs	r5, r2
1001335a:	3b7f      	subs	r3, #127	; 0x7f
1001335c:	18fb      	adds	r3, r7, r3
1001335e:	4642      	mov	r2, r8
10013360:	4657      	mov	r7, sl
10013362:	1c59      	adds	r1, r3, #1
10013364:	4062      	eors	r2, r4
10013366:	468c      	mov	ip, r1
10013368:	4307      	orrs	r7, r0
1001336a:	2f0f      	cmp	r7, #15
1001336c:	d85c      	bhi.n	10013428 <__aeabi_fmul+0x11c>
1001336e:	496f      	ldr	r1, [pc, #444]	; (1001352c <__aeabi_fmul+0x220>)
10013370:	00bf      	lsls	r7, r7, #2
10013372:	59c9      	ldr	r1, [r1, r7]
10013374:	468f      	mov	pc, r1
10013376:	2e00      	cmp	r6, #0
10013378:	d145      	bne.n	10013406 <__aeabi_fmul+0xfa>
1001337a:	2308      	movs	r3, #8
1001337c:	469a      	mov	sl, r3
1001337e:	3b06      	subs	r3, #6
10013380:	4699      	mov	r9, r3
10013382:	e7da      	b.n	1001333a <__aeabi_fmul+0x2e>
10013384:	4642      	mov	r2, r8
10013386:	2802      	cmp	r0, #2
10013388:	d02d      	beq.n	100133e6 <__aeabi_fmul+0xda>
1001338a:	2803      	cmp	r0, #3
1001338c:	d100      	bne.n	10013390 <__aeabi_fmul+0x84>
1001338e:	e0c3      	b.n	10013518 <__aeabi_fmul+0x20c>
10013390:	2801      	cmp	r0, #1
10013392:	d000      	beq.n	10013396 <__aeabi_fmul+0x8a>
10013394:	e0a2      	b.n	100134dc <__aeabi_fmul+0x1d0>
10013396:	2500      	movs	r5, #0
10013398:	2600      	movs	r6, #0
1001339a:	4002      	ands	r2, r0
1001339c:	b2d4      	uxtb	r4, r2
1001339e:	0276      	lsls	r6, r6, #9
100133a0:	05ed      	lsls	r5, r5, #23
100133a2:	0a76      	lsrs	r6, r6, #9
100133a4:	432e      	orrs	r6, r5
100133a6:	07e4      	lsls	r4, r4, #31
100133a8:	4326      	orrs	r6, r4
100133aa:	0030      	movs	r0, r6
100133ac:	bc1c      	pop	{r2, r3, r4}
100133ae:	4690      	mov	r8, r2
100133b0:	4699      	mov	r9, r3
100133b2:	46a2      	mov	sl, r4
100133b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133b6:	2e00      	cmp	r6, #0
100133b8:	d11a      	bne.n	100133f0 <__aeabi_fmul+0xe4>
100133ba:	2304      	movs	r3, #4
100133bc:	469a      	mov	sl, r3
100133be:	3b03      	subs	r3, #3
100133c0:	4699      	mov	r9, r3
100133c2:	e7ba      	b.n	1001333a <__aeabi_fmul+0x2e>
100133c4:	002a      	movs	r2, r5
100133c6:	1e51      	subs	r1, r2, #1
100133c8:	418a      	sbcs	r2, r1
100133ca:	1c90      	adds	r0, r2, #2
100133cc:	e7c6      	b.n	1001335c <__aeabi_fmul+0x50>
100133ce:	2001      	movs	r0, #1
100133d0:	2d00      	cmp	r5, #0
100133d2:	d0c3      	beq.n	1001335c <__aeabi_fmul+0x50>
100133d4:	0028      	movs	r0, r5
100133d6:	f001 fa25 	bl	10014824 <__clzsi2>
100133da:	1f43      	subs	r3, r0, #5
100133dc:	3076      	adds	r0, #118	; 0x76
100133de:	409d      	lsls	r5, r3
100133e0:	4243      	negs	r3, r0
100133e2:	2000      	movs	r0, #0
100133e4:	e7ba      	b.n	1001335c <__aeabi_fmul+0x50>
100133e6:	2401      	movs	r4, #1
100133e8:	25ff      	movs	r5, #255	; 0xff
100133ea:	4014      	ands	r4, r2
100133ec:	2600      	movs	r6, #0
100133ee:	e7d6      	b.n	1001339e <__aeabi_fmul+0x92>
100133f0:	0030      	movs	r0, r6
100133f2:	f001 fa17 	bl	10014824 <__clzsi2>
100133f6:	1f43      	subs	r3, r0, #5
100133f8:	409e      	lsls	r6, r3
100133fa:	2300      	movs	r3, #0
100133fc:	3076      	adds	r0, #118	; 0x76
100133fe:	4247      	negs	r7, r0
10013400:	469a      	mov	sl, r3
10013402:	4699      	mov	r9, r3
10013404:	e799      	b.n	1001333a <__aeabi_fmul+0x2e>
10013406:	230c      	movs	r3, #12
10013408:	469a      	mov	sl, r3
1001340a:	3b09      	subs	r3, #9
1001340c:	4699      	mov	r9, r3
1001340e:	e794      	b.n	1001333a <__aeabi_fmul+0x2e>
10013410:	2680      	movs	r6, #128	; 0x80
10013412:	2400      	movs	r4, #0
10013414:	03f6      	lsls	r6, r6, #15
10013416:	25ff      	movs	r5, #255	; 0xff
10013418:	e7c1      	b.n	1001339e <__aeabi_fmul+0x92>
1001341a:	0035      	movs	r5, r6
1001341c:	4648      	mov	r0, r9
1001341e:	e7b2      	b.n	10013386 <__aeabi_fmul+0x7a>
10013420:	0035      	movs	r5, r6
10013422:	0022      	movs	r2, r4
10013424:	4648      	mov	r0, r9
10013426:	e7ae      	b.n	10013386 <__aeabi_fmul+0x7a>
10013428:	0429      	lsls	r1, r5, #16
1001342a:	0c09      	lsrs	r1, r1, #16
1001342c:	0008      	movs	r0, r1
1001342e:	0c37      	lsrs	r7, r6, #16
10013430:	0436      	lsls	r6, r6, #16
10013432:	0c36      	lsrs	r6, r6, #16
10013434:	0c2c      	lsrs	r4, r5, #16
10013436:	4379      	muls	r1, r7
10013438:	4370      	muls	r0, r6
1001343a:	4367      	muls	r7, r4
1001343c:	4374      	muls	r4, r6
1001343e:	0c06      	lsrs	r6, r0, #16
10013440:	1864      	adds	r4, r4, r1
10013442:	1936      	adds	r6, r6, r4
10013444:	42b1      	cmp	r1, r6
10013446:	d903      	bls.n	10013450 <__aeabi_fmul+0x144>
10013448:	2180      	movs	r1, #128	; 0x80
1001344a:	0249      	lsls	r1, r1, #9
1001344c:	4688      	mov	r8, r1
1001344e:	4447      	add	r7, r8
10013450:	0400      	lsls	r0, r0, #16
10013452:	0c00      	lsrs	r0, r0, #16
10013454:	0431      	lsls	r1, r6, #16
10013456:	1809      	adds	r1, r1, r0
10013458:	018d      	lsls	r5, r1, #6
1001345a:	1e68      	subs	r0, r5, #1
1001345c:	4185      	sbcs	r5, r0
1001345e:	0e89      	lsrs	r1, r1, #26
10013460:	4329      	orrs	r1, r5
10013462:	0c35      	lsrs	r5, r6, #16
10013464:	19ed      	adds	r5, r5, r7
10013466:	01ad      	lsls	r5, r5, #6
10013468:	430d      	orrs	r5, r1
1001346a:	0129      	lsls	r1, r5, #4
1001346c:	d504      	bpl.n	10013478 <__aeabi_fmul+0x16c>
1001346e:	2301      	movs	r3, #1
10013470:	0869      	lsrs	r1, r5, #1
10013472:	401d      	ands	r5, r3
10013474:	4663      	mov	r3, ip
10013476:	430d      	orrs	r5, r1
10013478:	0019      	movs	r1, r3
1001347a:	317f      	adds	r1, #127	; 0x7f
1001347c:	2900      	cmp	r1, #0
1001347e:	dd25      	ble.n	100134cc <__aeabi_fmul+0x1c0>
10013480:	0768      	lsls	r0, r5, #29
10013482:	d004      	beq.n	1001348e <__aeabi_fmul+0x182>
10013484:	200f      	movs	r0, #15
10013486:	4028      	ands	r0, r5
10013488:	2804      	cmp	r0, #4
1001348a:	d000      	beq.n	1001348e <__aeabi_fmul+0x182>
1001348c:	3504      	adds	r5, #4
1001348e:	0128      	lsls	r0, r5, #4
10013490:	d503      	bpl.n	1001349a <__aeabi_fmul+0x18e>
10013492:	4927      	ldr	r1, [pc, #156]	; (10013530 <__aeabi_fmul+0x224>)
10013494:	3380      	adds	r3, #128	; 0x80
10013496:	400d      	ands	r5, r1
10013498:	0019      	movs	r1, r3
1001349a:	29fe      	cmp	r1, #254	; 0xfe
1001349c:	dca3      	bgt.n	100133e6 <__aeabi_fmul+0xda>
1001349e:	2401      	movs	r4, #1
100134a0:	01ad      	lsls	r5, r5, #6
100134a2:	0a6e      	lsrs	r6, r5, #9
100134a4:	4014      	ands	r4, r2
100134a6:	b2cd      	uxtb	r5, r1
100134a8:	e779      	b.n	1001339e <__aeabi_fmul+0x92>
100134aa:	2080      	movs	r0, #128	; 0x80
100134ac:	03c0      	lsls	r0, r0, #15
100134ae:	4206      	tst	r6, r0
100134b0:	d007      	beq.n	100134c2 <__aeabi_fmul+0x1b6>
100134b2:	4205      	tst	r5, r0
100134b4:	d105      	bne.n	100134c2 <__aeabi_fmul+0x1b6>
100134b6:	4328      	orrs	r0, r5
100134b8:	0246      	lsls	r6, r0, #9
100134ba:	0a76      	lsrs	r6, r6, #9
100134bc:	4644      	mov	r4, r8
100134be:	25ff      	movs	r5, #255	; 0xff
100134c0:	e76d      	b.n	1001339e <__aeabi_fmul+0x92>
100134c2:	4306      	orrs	r6, r0
100134c4:	0276      	lsls	r6, r6, #9
100134c6:	0a76      	lsrs	r6, r6, #9
100134c8:	25ff      	movs	r5, #255	; 0xff
100134ca:	e768      	b.n	1001339e <__aeabi_fmul+0x92>
100134cc:	2401      	movs	r4, #1
100134ce:	1a61      	subs	r1, r4, r1
100134d0:	291b      	cmp	r1, #27
100134d2:	dd05      	ble.n	100134e0 <__aeabi_fmul+0x1d4>
100134d4:	4014      	ands	r4, r2
100134d6:	2500      	movs	r5, #0
100134d8:	2600      	movs	r6, #0
100134da:	e760      	b.n	1001339e <__aeabi_fmul+0x92>
100134dc:	4663      	mov	r3, ip
100134de:	e7cb      	b.n	10013478 <__aeabi_fmul+0x16c>
100134e0:	002e      	movs	r6, r5
100134e2:	2320      	movs	r3, #32
100134e4:	40ce      	lsrs	r6, r1
100134e6:	1a59      	subs	r1, r3, r1
100134e8:	408d      	lsls	r5, r1
100134ea:	1e6b      	subs	r3, r5, #1
100134ec:	419d      	sbcs	r5, r3
100134ee:	432e      	orrs	r6, r5
100134f0:	0773      	lsls	r3, r6, #29
100134f2:	d004      	beq.n	100134fe <__aeabi_fmul+0x1f2>
100134f4:	230f      	movs	r3, #15
100134f6:	4033      	ands	r3, r6
100134f8:	2b04      	cmp	r3, #4
100134fa:	d000      	beq.n	100134fe <__aeabi_fmul+0x1f2>
100134fc:	3604      	adds	r6, #4
100134fe:	0173      	lsls	r3, r6, #5
10013500:	d504      	bpl.n	1001350c <__aeabi_fmul+0x200>
10013502:	2401      	movs	r4, #1
10013504:	2501      	movs	r5, #1
10013506:	4014      	ands	r4, r2
10013508:	2600      	movs	r6, #0
1001350a:	e748      	b.n	1001339e <__aeabi_fmul+0x92>
1001350c:	2401      	movs	r4, #1
1001350e:	01b6      	lsls	r6, r6, #6
10013510:	0a76      	lsrs	r6, r6, #9
10013512:	4014      	ands	r4, r2
10013514:	2500      	movs	r5, #0
10013516:	e742      	b.n	1001339e <__aeabi_fmul+0x92>
10013518:	2680      	movs	r6, #128	; 0x80
1001351a:	2401      	movs	r4, #1
1001351c:	03f6      	lsls	r6, r6, #15
1001351e:	432e      	orrs	r6, r5
10013520:	0276      	lsls	r6, r6, #9
10013522:	0a76      	lsrs	r6, r6, #9
10013524:	4014      	ands	r4, r2
10013526:	25ff      	movs	r5, #255	; 0xff
10013528:	e739      	b.n	1001339e <__aeabi_fmul+0x92>
1001352a:	46c0      	nop			; (mov r8, r8)
1001352c:	10016f24 	.word	0x10016f24
10013530:	f7ffffff 	.word	0xf7ffffff

10013534 <__aeabi_fsub>:
10013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013536:	024a      	lsls	r2, r1, #9
10013538:	004e      	lsls	r6, r1, #1
1001353a:	0243      	lsls	r3, r0, #9
1001353c:	0044      	lsls	r4, r0, #1
1001353e:	0e24      	lsrs	r4, r4, #24
10013540:	0fc5      	lsrs	r5, r0, #31
10013542:	099b      	lsrs	r3, r3, #6
10013544:	0e36      	lsrs	r6, r6, #24
10013546:	0fc9      	lsrs	r1, r1, #31
10013548:	0992      	lsrs	r2, r2, #6
1001354a:	2eff      	cmp	r6, #255	; 0xff
1001354c:	d100      	bne.n	10013550 <__aeabi_fsub+0x1c>
1001354e:	e083      	b.n	10013658 <__aeabi_fsub+0x124>
10013550:	2001      	movs	r0, #1
10013552:	4041      	eors	r1, r0
10013554:	1ba0      	subs	r0, r4, r6
10013556:	42a9      	cmp	r1, r5
10013558:	d05c      	beq.n	10013614 <__aeabi_fsub+0xe0>
1001355a:	2800      	cmp	r0, #0
1001355c:	dc00      	bgt.n	10013560 <__aeabi_fsub+0x2c>
1001355e:	e095      	b.n	1001368c <__aeabi_fsub+0x158>
10013560:	2e00      	cmp	r6, #0
10013562:	d11c      	bne.n	1001359e <__aeabi_fsub+0x6a>
10013564:	2a00      	cmp	r2, #0
10013566:	d000      	beq.n	1001356a <__aeabi_fsub+0x36>
10013568:	e081      	b.n	1001366e <__aeabi_fsub+0x13a>
1001356a:	075a      	lsls	r2, r3, #29
1001356c:	d004      	beq.n	10013578 <__aeabi_fsub+0x44>
1001356e:	220f      	movs	r2, #15
10013570:	401a      	ands	r2, r3
10013572:	2a04      	cmp	r2, #4
10013574:	d000      	beq.n	10013578 <__aeabi_fsub+0x44>
10013576:	3304      	adds	r3, #4
10013578:	015a      	lsls	r2, r3, #5
1001357a:	d53b      	bpl.n	100135f4 <__aeabi_fsub+0xc0>
1001357c:	3401      	adds	r4, #1
1001357e:	2cff      	cmp	r4, #255	; 0xff
10013580:	d100      	bne.n	10013584 <__aeabi_fsub+0x50>
10013582:	e091      	b.n	100136a8 <__aeabi_fsub+0x174>
10013584:	2001      	movs	r0, #1
10013586:	019b      	lsls	r3, r3, #6
10013588:	0a5b      	lsrs	r3, r3, #9
1001358a:	b2e4      	uxtb	r4, r4
1001358c:	4005      	ands	r5, r0
1001358e:	025b      	lsls	r3, r3, #9
10013590:	05e4      	lsls	r4, r4, #23
10013592:	0a5b      	lsrs	r3, r3, #9
10013594:	07ed      	lsls	r5, r5, #31
10013596:	4323      	orrs	r3, r4
10013598:	432b      	orrs	r3, r5
1001359a:	0018      	movs	r0, r3
1001359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001359e:	2cff      	cmp	r4, #255	; 0xff
100135a0:	d0e3      	beq.n	1001356a <__aeabi_fsub+0x36>
100135a2:	2180      	movs	r1, #128	; 0x80
100135a4:	04c9      	lsls	r1, r1, #19
100135a6:	430a      	orrs	r2, r1
100135a8:	281b      	cmp	r0, #27
100135aa:	dd00      	ble.n	100135ae <__aeabi_fsub+0x7a>
100135ac:	e090      	b.n	100136d0 <__aeabi_fsub+0x19c>
100135ae:	0016      	movs	r6, r2
100135b0:	2120      	movs	r1, #32
100135b2:	40c6      	lsrs	r6, r0
100135b4:	1a08      	subs	r0, r1, r0
100135b6:	4082      	lsls	r2, r0
100135b8:	1e51      	subs	r1, r2, #1
100135ba:	418a      	sbcs	r2, r1
100135bc:	4332      	orrs	r2, r6
100135be:	1a9b      	subs	r3, r3, r2
100135c0:	015a      	lsls	r2, r3, #5
100135c2:	d515      	bpl.n	100135f0 <__aeabi_fsub+0xbc>
100135c4:	019b      	lsls	r3, r3, #6
100135c6:	099e      	lsrs	r6, r3, #6
100135c8:	0030      	movs	r0, r6
100135ca:	f001 f92b 	bl	10014824 <__clzsi2>
100135ce:	3805      	subs	r0, #5
100135d0:	4086      	lsls	r6, r0
100135d2:	4284      	cmp	r4, r0
100135d4:	dc6c      	bgt.n	100136b0 <__aeabi_fsub+0x17c>
100135d6:	1b04      	subs	r4, r0, r4
100135d8:	0033      	movs	r3, r6
100135da:	2020      	movs	r0, #32
100135dc:	3401      	adds	r4, #1
100135de:	40e3      	lsrs	r3, r4
100135e0:	1b04      	subs	r4, r0, r4
100135e2:	40a6      	lsls	r6, r4
100135e4:	1e72      	subs	r2, r6, #1
100135e6:	4196      	sbcs	r6, r2
100135e8:	2400      	movs	r4, #0
100135ea:	4333      	orrs	r3, r6
100135ec:	e7bd      	b.n	1001356a <__aeabi_fsub+0x36>
100135ee:	000d      	movs	r5, r1
100135f0:	075a      	lsls	r2, r3, #29
100135f2:	d1bc      	bne.n	1001356e <__aeabi_fsub+0x3a>
100135f4:	08df      	lsrs	r7, r3, #3
100135f6:	2301      	movs	r3, #1
100135f8:	401d      	ands	r5, r3
100135fa:	2cff      	cmp	r4, #255	; 0xff
100135fc:	d133      	bne.n	10013666 <__aeabi_fsub+0x132>
100135fe:	2f00      	cmp	r7, #0
10013600:	d100      	bne.n	10013604 <__aeabi_fsub+0xd0>
10013602:	e090      	b.n	10013726 <__aeabi_fsub+0x1f2>
10013604:	2280      	movs	r2, #128	; 0x80
10013606:	03d2      	lsls	r2, r2, #15
10013608:	0013      	movs	r3, r2
1001360a:	433b      	orrs	r3, r7
1001360c:	025b      	lsls	r3, r3, #9
1001360e:	0a5b      	lsrs	r3, r3, #9
10013610:	24ff      	movs	r4, #255	; 0xff
10013612:	e7bc      	b.n	1001358e <__aeabi_fsub+0x5a>
10013614:	2800      	cmp	r0, #0
10013616:	dd4f      	ble.n	100136b8 <__aeabi_fsub+0x184>
10013618:	2e00      	cmp	r6, #0
1001361a:	d02e      	beq.n	1001367a <__aeabi_fsub+0x146>
1001361c:	2cff      	cmp	r4, #255	; 0xff
1001361e:	d0a4      	beq.n	1001356a <__aeabi_fsub+0x36>
10013620:	2580      	movs	r5, #128	; 0x80
10013622:	04ed      	lsls	r5, r5, #19
10013624:	432a      	orrs	r2, r5
10013626:	281b      	cmp	r0, #27
10013628:	dd00      	ble.n	1001362c <__aeabi_fsub+0xf8>
1001362a:	e097      	b.n	1001375c <__aeabi_fsub+0x228>
1001362c:	0016      	movs	r6, r2
1001362e:	2520      	movs	r5, #32
10013630:	40c6      	lsrs	r6, r0
10013632:	1a28      	subs	r0, r5, r0
10013634:	4082      	lsls	r2, r0
10013636:	1e50      	subs	r0, r2, #1
10013638:	4182      	sbcs	r2, r0
1001363a:	4332      	orrs	r2, r6
1001363c:	189b      	adds	r3, r3, r2
1001363e:	015a      	lsls	r2, r3, #5
10013640:	d5d5      	bpl.n	100135ee <__aeabi_fsub+0xba>
10013642:	3401      	adds	r4, #1
10013644:	2cff      	cmp	r4, #255	; 0xff
10013646:	d06d      	beq.n	10013724 <__aeabi_fsub+0x1f0>
10013648:	2201      	movs	r2, #1
1001364a:	487b      	ldr	r0, [pc, #492]	; (10013838 <__aeabi_fsub+0x304>)
1001364c:	401a      	ands	r2, r3
1001364e:	085b      	lsrs	r3, r3, #1
10013650:	4003      	ands	r3, r0
10013652:	4313      	orrs	r3, r2
10013654:	000d      	movs	r5, r1
10013656:	e788      	b.n	1001356a <__aeabi_fsub+0x36>
10013658:	2a00      	cmp	r2, #0
1001365a:	d000      	beq.n	1001365e <__aeabi_fsub+0x12a>
1001365c:	e77a      	b.n	10013554 <__aeabi_fsub+0x20>
1001365e:	e777      	b.n	10013550 <__aeabi_fsub+0x1c>
10013660:	1e03      	subs	r3, r0, #0
10013662:	d1c5      	bne.n	100135f0 <__aeabi_fsub+0xbc>
10013664:	2500      	movs	r5, #0
10013666:	027b      	lsls	r3, r7, #9
10013668:	0a5b      	lsrs	r3, r3, #9
1001366a:	b2e4      	uxtb	r4, r4
1001366c:	e78f      	b.n	1001358e <__aeabi_fsub+0x5a>
1001366e:	3801      	subs	r0, #1
10013670:	2800      	cmp	r0, #0
10013672:	d0a4      	beq.n	100135be <__aeabi_fsub+0x8a>
10013674:	2cff      	cmp	r4, #255	; 0xff
10013676:	d197      	bne.n	100135a8 <__aeabi_fsub+0x74>
10013678:	e777      	b.n	1001356a <__aeabi_fsub+0x36>
1001367a:	2a00      	cmp	r2, #0
1001367c:	d100      	bne.n	10013680 <__aeabi_fsub+0x14c>
1001367e:	e774      	b.n	1001356a <__aeabi_fsub+0x36>
10013680:	3801      	subs	r0, #1
10013682:	2800      	cmp	r0, #0
10013684:	d0da      	beq.n	1001363c <__aeabi_fsub+0x108>
10013686:	2cff      	cmp	r4, #255	; 0xff
10013688:	d1cd      	bne.n	10013626 <__aeabi_fsub+0xf2>
1001368a:	e76e      	b.n	1001356a <__aeabi_fsub+0x36>
1001368c:	2800      	cmp	r0, #0
1001368e:	d121      	bne.n	100136d4 <__aeabi_fsub+0x1a0>
10013690:	1c60      	adds	r0, r4, #1
10013692:	b2c0      	uxtb	r0, r0
10013694:	2801      	cmp	r0, #1
10013696:	dd58      	ble.n	1001374a <__aeabi_fsub+0x216>
10013698:	2780      	movs	r7, #128	; 0x80
1001369a:	1a9e      	subs	r6, r3, r2
1001369c:	04ff      	lsls	r7, r7, #19
1001369e:	4037      	ands	r7, r6
100136a0:	d02f      	beq.n	10013702 <__aeabi_fsub+0x1ce>
100136a2:	1ad6      	subs	r6, r2, r3
100136a4:	000d      	movs	r5, r1
100136a6:	e78f      	b.n	100135c8 <__aeabi_fsub+0x94>
100136a8:	2301      	movs	r3, #1
100136aa:	401d      	ands	r5, r3
100136ac:	2300      	movs	r3, #0
100136ae:	e76e      	b.n	1001358e <__aeabi_fsub+0x5a>
100136b0:	4b62      	ldr	r3, [pc, #392]	; (1001383c <__aeabi_fsub+0x308>)
100136b2:	1a24      	subs	r4, r4, r0
100136b4:	4033      	ands	r3, r6
100136b6:	e758      	b.n	1001356a <__aeabi_fsub+0x36>
100136b8:	2800      	cmp	r0, #0
100136ba:	d151      	bne.n	10013760 <__aeabi_fsub+0x22c>
100136bc:	1c60      	adds	r0, r4, #1
100136be:	b2c6      	uxtb	r6, r0
100136c0:	2e01      	cmp	r6, #1
100136c2:	dd33      	ble.n	1001372c <__aeabi_fsub+0x1f8>
100136c4:	28ff      	cmp	r0, #255	; 0xff
100136c6:	d02d      	beq.n	10013724 <__aeabi_fsub+0x1f0>
100136c8:	189b      	adds	r3, r3, r2
100136ca:	085b      	lsrs	r3, r3, #1
100136cc:	0004      	movs	r4, r0
100136ce:	e74c      	b.n	1001356a <__aeabi_fsub+0x36>
100136d0:	2201      	movs	r2, #1
100136d2:	e774      	b.n	100135be <__aeabi_fsub+0x8a>
100136d4:	2c00      	cmp	r4, #0
100136d6:	d01a      	beq.n	1001370e <__aeabi_fsub+0x1da>
100136d8:	2eff      	cmp	r6, #255	; 0xff
100136da:	d01f      	beq.n	1001371c <__aeabi_fsub+0x1e8>
100136dc:	2480      	movs	r4, #128	; 0x80
100136de:	04e4      	lsls	r4, r4, #19
100136e0:	4240      	negs	r0, r0
100136e2:	4323      	orrs	r3, r4
100136e4:	281b      	cmp	r0, #27
100136e6:	dd00      	ble.n	100136ea <__aeabi_fsub+0x1b6>
100136e8:	e096      	b.n	10013818 <__aeabi_fsub+0x2e4>
100136ea:	001d      	movs	r5, r3
100136ec:	2420      	movs	r4, #32
100136ee:	40c5      	lsrs	r5, r0
100136f0:	1a20      	subs	r0, r4, r0
100136f2:	4083      	lsls	r3, r0
100136f4:	1e58      	subs	r0, r3, #1
100136f6:	4183      	sbcs	r3, r0
100136f8:	432b      	orrs	r3, r5
100136fa:	1ad3      	subs	r3, r2, r3
100136fc:	0034      	movs	r4, r6
100136fe:	000d      	movs	r5, r1
10013700:	e75e      	b.n	100135c0 <__aeabi_fsub+0x8c>
10013702:	2e00      	cmp	r6, #0
10013704:	d000      	beq.n	10013708 <__aeabi_fsub+0x1d4>
10013706:	e75f      	b.n	100135c8 <__aeabi_fsub+0x94>
10013708:	2500      	movs	r5, #0
1001370a:	2400      	movs	r4, #0
1001370c:	e7ab      	b.n	10013666 <__aeabi_fsub+0x132>
1001370e:	2b00      	cmp	r3, #0
10013710:	d044      	beq.n	1001379c <__aeabi_fsub+0x268>
10013712:	43c0      	mvns	r0, r0
10013714:	2800      	cmp	r0, #0
10013716:	d0f0      	beq.n	100136fa <__aeabi_fsub+0x1c6>
10013718:	2eff      	cmp	r6, #255	; 0xff
1001371a:	d1e3      	bne.n	100136e4 <__aeabi_fsub+0x1b0>
1001371c:	0013      	movs	r3, r2
1001371e:	24ff      	movs	r4, #255	; 0xff
10013720:	000d      	movs	r5, r1
10013722:	e722      	b.n	1001356a <__aeabi_fsub+0x36>
10013724:	000d      	movs	r5, r1
10013726:	24ff      	movs	r4, #255	; 0xff
10013728:	2300      	movs	r3, #0
1001372a:	e730      	b.n	1001358e <__aeabi_fsub+0x5a>
1001372c:	2c00      	cmp	r4, #0
1001372e:	d15d      	bne.n	100137ec <__aeabi_fsub+0x2b8>
10013730:	2b00      	cmp	r3, #0
10013732:	d07d      	beq.n	10013830 <__aeabi_fsub+0x2fc>
10013734:	2a00      	cmp	r2, #0
10013736:	d100      	bne.n	1001373a <__aeabi_fsub+0x206>
10013738:	e717      	b.n	1001356a <__aeabi_fsub+0x36>
1001373a:	189b      	adds	r3, r3, r2
1001373c:	015a      	lsls	r2, r3, #5
1001373e:	d400      	bmi.n	10013742 <__aeabi_fsub+0x20e>
10013740:	e756      	b.n	100135f0 <__aeabi_fsub+0xbc>
10013742:	4a3e      	ldr	r2, [pc, #248]	; (1001383c <__aeabi_fsub+0x308>)
10013744:	0004      	movs	r4, r0
10013746:	4013      	ands	r3, r2
10013748:	e70f      	b.n	1001356a <__aeabi_fsub+0x36>
1001374a:	2c00      	cmp	r4, #0
1001374c:	d11e      	bne.n	1001378c <__aeabi_fsub+0x258>
1001374e:	2b00      	cmp	r3, #0
10013750:	d12f      	bne.n	100137b2 <__aeabi_fsub+0x27e>
10013752:	2a00      	cmp	r2, #0
10013754:	d065      	beq.n	10013822 <__aeabi_fsub+0x2ee>
10013756:	0013      	movs	r3, r2
10013758:	000d      	movs	r5, r1
1001375a:	e706      	b.n	1001356a <__aeabi_fsub+0x36>
1001375c:	2201      	movs	r2, #1
1001375e:	e76d      	b.n	1001363c <__aeabi_fsub+0x108>
10013760:	2c00      	cmp	r4, #0
10013762:	d11f      	bne.n	100137a4 <__aeabi_fsub+0x270>
10013764:	2b00      	cmp	r3, #0
10013766:	d059      	beq.n	1001381c <__aeabi_fsub+0x2e8>
10013768:	43c0      	mvns	r0, r0
1001376a:	2800      	cmp	r0, #0
1001376c:	d00b      	beq.n	10013786 <__aeabi_fsub+0x252>
1001376e:	2eff      	cmp	r6, #255	; 0xff
10013770:	d04f      	beq.n	10013812 <__aeabi_fsub+0x2de>
10013772:	281b      	cmp	r0, #27
10013774:	dc5e      	bgt.n	10013834 <__aeabi_fsub+0x300>
10013776:	001d      	movs	r5, r3
10013778:	2420      	movs	r4, #32
1001377a:	40c5      	lsrs	r5, r0
1001377c:	1a20      	subs	r0, r4, r0
1001377e:	4083      	lsls	r3, r0
10013780:	1e58      	subs	r0, r3, #1
10013782:	4183      	sbcs	r3, r0
10013784:	432b      	orrs	r3, r5
10013786:	189b      	adds	r3, r3, r2
10013788:	0034      	movs	r4, r6
1001378a:	e758      	b.n	1001363e <__aeabi_fsub+0x10a>
1001378c:	2b00      	cmp	r3, #0
1001378e:	d11c      	bne.n	100137ca <__aeabi_fsub+0x296>
10013790:	2a00      	cmp	r2, #0
10013792:	d049      	beq.n	10013828 <__aeabi_fsub+0x2f4>
10013794:	0013      	movs	r3, r2
10013796:	000d      	movs	r5, r1
10013798:	24ff      	movs	r4, #255	; 0xff
1001379a:	e6e6      	b.n	1001356a <__aeabi_fsub+0x36>
1001379c:	0013      	movs	r3, r2
1001379e:	0034      	movs	r4, r6
100137a0:	000d      	movs	r5, r1
100137a2:	e6e2      	b.n	1001356a <__aeabi_fsub+0x36>
100137a4:	2eff      	cmp	r6, #255	; 0xff
100137a6:	d034      	beq.n	10013812 <__aeabi_fsub+0x2de>
100137a8:	2480      	movs	r4, #128	; 0x80
100137aa:	04e4      	lsls	r4, r4, #19
100137ac:	4240      	negs	r0, r0
100137ae:	4323      	orrs	r3, r4
100137b0:	e7df      	b.n	10013772 <__aeabi_fsub+0x23e>
100137b2:	2a00      	cmp	r2, #0
100137b4:	d100      	bne.n	100137b8 <__aeabi_fsub+0x284>
100137b6:	e6d8      	b.n	1001356a <__aeabi_fsub+0x36>
100137b8:	2780      	movs	r7, #128	; 0x80
100137ba:	1a98      	subs	r0, r3, r2
100137bc:	04ff      	lsls	r7, r7, #19
100137be:	4007      	ands	r7, r0
100137c0:	d100      	bne.n	100137c4 <__aeabi_fsub+0x290>
100137c2:	e74d      	b.n	10013660 <__aeabi_fsub+0x12c>
100137c4:	1ad3      	subs	r3, r2, r3
100137c6:	000d      	movs	r5, r1
100137c8:	e6cf      	b.n	1001356a <__aeabi_fsub+0x36>
100137ca:	24ff      	movs	r4, #255	; 0xff
100137cc:	2a00      	cmp	r2, #0
100137ce:	d100      	bne.n	100137d2 <__aeabi_fsub+0x29e>
100137d0:	e6cb      	b.n	1001356a <__aeabi_fsub+0x36>
100137d2:	2080      	movs	r0, #128	; 0x80
100137d4:	08db      	lsrs	r3, r3, #3
100137d6:	03c0      	lsls	r0, r0, #15
100137d8:	4203      	tst	r3, r0
100137da:	d004      	beq.n	100137e6 <__aeabi_fsub+0x2b2>
100137dc:	08d2      	lsrs	r2, r2, #3
100137de:	4202      	tst	r2, r0
100137e0:	d101      	bne.n	100137e6 <__aeabi_fsub+0x2b2>
100137e2:	0013      	movs	r3, r2
100137e4:	000d      	movs	r5, r1
100137e6:	00db      	lsls	r3, r3, #3
100137e8:	24ff      	movs	r4, #255	; 0xff
100137ea:	e6be      	b.n	1001356a <__aeabi_fsub+0x36>
100137ec:	2b00      	cmp	r3, #0
100137ee:	d010      	beq.n	10013812 <__aeabi_fsub+0x2de>
100137f0:	24ff      	movs	r4, #255	; 0xff
100137f2:	2a00      	cmp	r2, #0
100137f4:	d100      	bne.n	100137f8 <__aeabi_fsub+0x2c4>
100137f6:	e6b8      	b.n	1001356a <__aeabi_fsub+0x36>
100137f8:	2080      	movs	r0, #128	; 0x80
100137fa:	08db      	lsrs	r3, r3, #3
100137fc:	03c0      	lsls	r0, r0, #15
100137fe:	4203      	tst	r3, r0
10013800:	d003      	beq.n	1001380a <__aeabi_fsub+0x2d6>
10013802:	08d2      	lsrs	r2, r2, #3
10013804:	4202      	tst	r2, r0
10013806:	d100      	bne.n	1001380a <__aeabi_fsub+0x2d6>
10013808:	0013      	movs	r3, r2
1001380a:	00db      	lsls	r3, r3, #3
1001380c:	000d      	movs	r5, r1
1001380e:	24ff      	movs	r4, #255	; 0xff
10013810:	e6ab      	b.n	1001356a <__aeabi_fsub+0x36>
10013812:	0013      	movs	r3, r2
10013814:	24ff      	movs	r4, #255	; 0xff
10013816:	e6a8      	b.n	1001356a <__aeabi_fsub+0x36>
10013818:	2301      	movs	r3, #1
1001381a:	e76e      	b.n	100136fa <__aeabi_fsub+0x1c6>
1001381c:	0013      	movs	r3, r2
1001381e:	0034      	movs	r4, r6
10013820:	e6a3      	b.n	1001356a <__aeabi_fsub+0x36>
10013822:	2700      	movs	r7, #0
10013824:	2500      	movs	r5, #0
10013826:	e71e      	b.n	10013666 <__aeabi_fsub+0x132>
10013828:	2780      	movs	r7, #128	; 0x80
1001382a:	2500      	movs	r5, #0
1001382c:	03ff      	lsls	r7, r7, #15
1001382e:	e6e9      	b.n	10013604 <__aeabi_fsub+0xd0>
10013830:	0013      	movs	r3, r2
10013832:	e69a      	b.n	1001356a <__aeabi_fsub+0x36>
10013834:	2301      	movs	r3, #1
10013836:	e7a6      	b.n	10013786 <__aeabi_fsub+0x252>
10013838:	7dffffff 	.word	0x7dffffff
1001383c:	fbffffff 	.word	0xfbffffff

10013840 <__aeabi_f2iz>:
10013840:	0243      	lsls	r3, r0, #9
10013842:	0a59      	lsrs	r1, r3, #9
10013844:	0043      	lsls	r3, r0, #1
10013846:	0fc2      	lsrs	r2, r0, #31
10013848:	0e1b      	lsrs	r3, r3, #24
1001384a:	2000      	movs	r0, #0
1001384c:	2b7e      	cmp	r3, #126	; 0x7e
1001384e:	dd0e      	ble.n	1001386e <__aeabi_f2iz+0x2e>
10013850:	2b9d      	cmp	r3, #157	; 0x9d
10013852:	dc0d      	bgt.n	10013870 <__aeabi_f2iz+0x30>
10013854:	2080      	movs	r0, #128	; 0x80
10013856:	0400      	lsls	r0, r0, #16
10013858:	4301      	orrs	r1, r0
1001385a:	2b95      	cmp	r3, #149	; 0x95
1001385c:	dc0b      	bgt.n	10013876 <__aeabi_f2iz+0x36>
1001385e:	2096      	movs	r0, #150	; 0x96
10013860:	1ac3      	subs	r3, r0, r3
10013862:	40d9      	lsrs	r1, r3
10013864:	000b      	movs	r3, r1
10013866:	4258      	negs	r0, r3
10013868:	2a00      	cmp	r2, #0
1001386a:	d100      	bne.n	1001386e <__aeabi_f2iz+0x2e>
1001386c:	0018      	movs	r0, r3
1001386e:	4770      	bx	lr
10013870:	4b03      	ldr	r3, [pc, #12]	; (10013880 <__aeabi_f2iz+0x40>)
10013872:	18d0      	adds	r0, r2, r3
10013874:	e7fb      	b.n	1001386e <__aeabi_f2iz+0x2e>
10013876:	3b96      	subs	r3, #150	; 0x96
10013878:	4099      	lsls	r1, r3
1001387a:	000b      	movs	r3, r1
1001387c:	e7f3      	b.n	10013866 <__aeabi_f2iz+0x26>
1001387e:	46c0      	nop			; (mov r8, r8)
10013880:	7fffffff 	.word	0x7fffffff

10013884 <__aeabi_i2f>:
10013884:	b570      	push	{r4, r5, r6, lr}
10013886:	2800      	cmp	r0, #0
10013888:	d030      	beq.n	100138ec <__aeabi_i2f+0x68>
1001388a:	17c3      	asrs	r3, r0, #31
1001388c:	18c5      	adds	r5, r0, r3
1001388e:	405d      	eors	r5, r3
10013890:	0fc4      	lsrs	r4, r0, #31
10013892:	0028      	movs	r0, r5
10013894:	f000 ffc6 	bl	10014824 <__clzsi2>
10013898:	239e      	movs	r3, #158	; 0x9e
1001389a:	1a1b      	subs	r3, r3, r0
1001389c:	2b96      	cmp	r3, #150	; 0x96
1001389e:	dc0d      	bgt.n	100138bc <__aeabi_i2f+0x38>
100138a0:	2296      	movs	r2, #150	; 0x96
100138a2:	1ad2      	subs	r2, r2, r3
100138a4:	4095      	lsls	r5, r2
100138a6:	026a      	lsls	r2, r5, #9
100138a8:	0a52      	lsrs	r2, r2, #9
100138aa:	b2d8      	uxtb	r0, r3
100138ac:	0252      	lsls	r2, r2, #9
100138ae:	05c0      	lsls	r0, r0, #23
100138b0:	0a52      	lsrs	r2, r2, #9
100138b2:	07e4      	lsls	r4, r4, #31
100138b4:	4302      	orrs	r2, r0
100138b6:	4322      	orrs	r2, r4
100138b8:	0010      	movs	r0, r2
100138ba:	bd70      	pop	{r4, r5, r6, pc}
100138bc:	2b99      	cmp	r3, #153	; 0x99
100138be:	dc19      	bgt.n	100138f4 <__aeabi_i2f+0x70>
100138c0:	2299      	movs	r2, #153	; 0x99
100138c2:	1ad2      	subs	r2, r2, r3
100138c4:	4095      	lsls	r5, r2
100138c6:	4a12      	ldr	r2, [pc, #72]	; (10013910 <__aeabi_i2f+0x8c>)
100138c8:	402a      	ands	r2, r5
100138ca:	0769      	lsls	r1, r5, #29
100138cc:	d004      	beq.n	100138d8 <__aeabi_i2f+0x54>
100138ce:	210f      	movs	r1, #15
100138d0:	400d      	ands	r5, r1
100138d2:	2d04      	cmp	r5, #4
100138d4:	d000      	beq.n	100138d8 <__aeabi_i2f+0x54>
100138d6:	3204      	adds	r2, #4
100138d8:	0151      	lsls	r1, r2, #5
100138da:	d503      	bpl.n	100138e4 <__aeabi_i2f+0x60>
100138dc:	4b0c      	ldr	r3, [pc, #48]	; (10013910 <__aeabi_i2f+0x8c>)
100138de:	401a      	ands	r2, r3
100138e0:	239f      	movs	r3, #159	; 0x9f
100138e2:	1a1b      	subs	r3, r3, r0
100138e4:	0192      	lsls	r2, r2, #6
100138e6:	0a52      	lsrs	r2, r2, #9
100138e8:	b2d8      	uxtb	r0, r3
100138ea:	e7df      	b.n	100138ac <__aeabi_i2f+0x28>
100138ec:	2400      	movs	r4, #0
100138ee:	2000      	movs	r0, #0
100138f0:	2200      	movs	r2, #0
100138f2:	e7db      	b.n	100138ac <__aeabi_i2f+0x28>
100138f4:	2205      	movs	r2, #5
100138f6:	002e      	movs	r6, r5
100138f8:	1a12      	subs	r2, r2, r0
100138fa:	21b9      	movs	r1, #185	; 0xb9
100138fc:	40d6      	lsrs	r6, r2
100138fe:	002a      	movs	r2, r5
10013900:	1ac9      	subs	r1, r1, r3
10013902:	408a      	lsls	r2, r1
10013904:	1e55      	subs	r5, r2, #1
10013906:	41aa      	sbcs	r2, r5
10013908:	0035      	movs	r5, r6
1001390a:	4315      	orrs	r5, r2
1001390c:	e7db      	b.n	100138c6 <__aeabi_i2f+0x42>
1001390e:	46c0      	nop			; (mov r8, r8)
10013910:	fbffffff 	.word	0xfbffffff

10013914 <__aeabi_ui2f>:
10013914:	b570      	push	{r4, r5, r6, lr}
10013916:	1e04      	subs	r4, r0, #0
10013918:	d028      	beq.n	1001396c <__aeabi_ui2f+0x58>
1001391a:	f000 ff83 	bl	10014824 <__clzsi2>
1001391e:	239e      	movs	r3, #158	; 0x9e
10013920:	1a1b      	subs	r3, r3, r0
10013922:	2b96      	cmp	r3, #150	; 0x96
10013924:	dc0a      	bgt.n	1001393c <__aeabi_ui2f+0x28>
10013926:	2296      	movs	r2, #150	; 0x96
10013928:	1ad2      	subs	r2, r2, r3
1001392a:	4094      	lsls	r4, r2
1001392c:	0262      	lsls	r2, r4, #9
1001392e:	0a52      	lsrs	r2, r2, #9
10013930:	b2d8      	uxtb	r0, r3
10013932:	0252      	lsls	r2, r2, #9
10013934:	0a52      	lsrs	r2, r2, #9
10013936:	05c0      	lsls	r0, r0, #23
10013938:	4310      	orrs	r0, r2
1001393a:	bd70      	pop	{r4, r5, r6, pc}
1001393c:	2b99      	cmp	r3, #153	; 0x99
1001393e:	dc18      	bgt.n	10013972 <__aeabi_ui2f+0x5e>
10013940:	2299      	movs	r2, #153	; 0x99
10013942:	1ad2      	subs	r2, r2, r3
10013944:	4094      	lsls	r4, r2
10013946:	4a11      	ldr	r2, [pc, #68]	; (1001398c <__aeabi_ui2f+0x78>)
10013948:	4022      	ands	r2, r4
1001394a:	0761      	lsls	r1, r4, #29
1001394c:	d004      	beq.n	10013958 <__aeabi_ui2f+0x44>
1001394e:	210f      	movs	r1, #15
10013950:	400c      	ands	r4, r1
10013952:	2c04      	cmp	r4, #4
10013954:	d000      	beq.n	10013958 <__aeabi_ui2f+0x44>
10013956:	3204      	adds	r2, #4
10013958:	0151      	lsls	r1, r2, #5
1001395a:	d503      	bpl.n	10013964 <__aeabi_ui2f+0x50>
1001395c:	4b0b      	ldr	r3, [pc, #44]	; (1001398c <__aeabi_ui2f+0x78>)
1001395e:	401a      	ands	r2, r3
10013960:	239f      	movs	r3, #159	; 0x9f
10013962:	1a1b      	subs	r3, r3, r0
10013964:	0192      	lsls	r2, r2, #6
10013966:	0a52      	lsrs	r2, r2, #9
10013968:	b2d8      	uxtb	r0, r3
1001396a:	e7e2      	b.n	10013932 <__aeabi_ui2f+0x1e>
1001396c:	2000      	movs	r0, #0
1001396e:	2200      	movs	r2, #0
10013970:	e7df      	b.n	10013932 <__aeabi_ui2f+0x1e>
10013972:	2205      	movs	r2, #5
10013974:	0025      	movs	r5, r4
10013976:	1a12      	subs	r2, r2, r0
10013978:	21b9      	movs	r1, #185	; 0xb9
1001397a:	40d5      	lsrs	r5, r2
1001397c:	0022      	movs	r2, r4
1001397e:	1ac9      	subs	r1, r1, r3
10013980:	408a      	lsls	r2, r1
10013982:	1e54      	subs	r4, r2, #1
10013984:	41a2      	sbcs	r2, r4
10013986:	002c      	movs	r4, r5
10013988:	4314      	orrs	r4, r2
1001398a:	e7dc      	b.n	10013946 <__aeabi_ui2f+0x32>
1001398c:	fbffffff 	.word	0xfbffffff

10013990 <__eqdf2>:
10013990:	b5f0      	push	{r4, r5, r6, r7, lr}
10013992:	465f      	mov	r7, fp
10013994:	4656      	mov	r6, sl
10013996:	464d      	mov	r5, r9
10013998:	4644      	mov	r4, r8
1001399a:	b4f0      	push	{r4, r5, r6, r7}
1001399c:	031f      	lsls	r7, r3, #12
1001399e:	005c      	lsls	r4, r3, #1
100139a0:	0fdb      	lsrs	r3, r3, #31
100139a2:	469a      	mov	sl, r3
100139a4:	4b19      	ldr	r3, [pc, #100]	; (10013a0c <__eqdf2+0x7c>)
100139a6:	030e      	lsls	r6, r1, #12
100139a8:	004d      	lsls	r5, r1, #1
100139aa:	0fc9      	lsrs	r1, r1, #31
100139ac:	4680      	mov	r8, r0
100139ae:	0b36      	lsrs	r6, r6, #12
100139b0:	0d6d      	lsrs	r5, r5, #21
100139b2:	468b      	mov	fp, r1
100139b4:	4691      	mov	r9, r2
100139b6:	0b3f      	lsrs	r7, r7, #12
100139b8:	0d64      	lsrs	r4, r4, #21
100139ba:	429d      	cmp	r5, r3
100139bc:	d019      	beq.n	100139f2 <__eqdf2+0x62>
100139be:	4b13      	ldr	r3, [pc, #76]	; (10013a0c <__eqdf2+0x7c>)
100139c0:	429c      	cmp	r4, r3
100139c2:	d01b      	beq.n	100139fc <__eqdf2+0x6c>
100139c4:	2301      	movs	r3, #1
100139c6:	42a5      	cmp	r5, r4
100139c8:	d006      	beq.n	100139d8 <__eqdf2+0x48>
100139ca:	0018      	movs	r0, r3
100139cc:	bc3c      	pop	{r2, r3, r4, r5}
100139ce:	4690      	mov	r8, r2
100139d0:	4699      	mov	r9, r3
100139d2:	46a2      	mov	sl, r4
100139d4:	46ab      	mov	fp, r5
100139d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100139d8:	42be      	cmp	r6, r7
100139da:	d1f6      	bne.n	100139ca <__eqdf2+0x3a>
100139dc:	45c8      	cmp	r8, r9
100139de:	d1f4      	bne.n	100139ca <__eqdf2+0x3a>
100139e0:	45d3      	cmp	fp, sl
100139e2:	d010      	beq.n	10013a06 <__eqdf2+0x76>
100139e4:	2d00      	cmp	r5, #0
100139e6:	d1f0      	bne.n	100139ca <__eqdf2+0x3a>
100139e8:	4330      	orrs	r0, r6
100139ea:	0003      	movs	r3, r0
100139ec:	1e5a      	subs	r2, r3, #1
100139ee:	4193      	sbcs	r3, r2
100139f0:	e7eb      	b.n	100139ca <__eqdf2+0x3a>
100139f2:	0031      	movs	r1, r6
100139f4:	2301      	movs	r3, #1
100139f6:	4301      	orrs	r1, r0
100139f8:	d1e7      	bne.n	100139ca <__eqdf2+0x3a>
100139fa:	e7e0      	b.n	100139be <__eqdf2+0x2e>
100139fc:	433a      	orrs	r2, r7
100139fe:	2301      	movs	r3, #1
10013a00:	2a00      	cmp	r2, #0
10013a02:	d1e2      	bne.n	100139ca <__eqdf2+0x3a>
10013a04:	e7de      	b.n	100139c4 <__eqdf2+0x34>
10013a06:	2300      	movs	r3, #0
10013a08:	e7df      	b.n	100139ca <__eqdf2+0x3a>
10013a0a:	46c0      	nop			; (mov r8, r8)
10013a0c:	000007ff 	.word	0x000007ff

10013a10 <__gedf2>:
10013a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a12:	465f      	mov	r7, fp
10013a14:	4644      	mov	r4, r8
10013a16:	4656      	mov	r6, sl
10013a18:	464d      	mov	r5, r9
10013a1a:	b4f0      	push	{r4, r5, r6, r7}
10013a1c:	031f      	lsls	r7, r3, #12
10013a1e:	0b3c      	lsrs	r4, r7, #12
10013a20:	4f2c      	ldr	r7, [pc, #176]	; (10013ad4 <__gedf2+0xc4>)
10013a22:	030e      	lsls	r6, r1, #12
10013a24:	004d      	lsls	r5, r1, #1
10013a26:	46a3      	mov	fp, r4
10013a28:	005c      	lsls	r4, r3, #1
10013a2a:	4684      	mov	ip, r0
10013a2c:	0b36      	lsrs	r6, r6, #12
10013a2e:	0d6d      	lsrs	r5, r5, #21
10013a30:	0fc9      	lsrs	r1, r1, #31
10013a32:	4690      	mov	r8, r2
10013a34:	0d64      	lsrs	r4, r4, #21
10013a36:	0fdb      	lsrs	r3, r3, #31
10013a38:	42bd      	cmp	r5, r7
10013a3a:	d02b      	beq.n	10013a94 <__gedf2+0x84>
10013a3c:	4f25      	ldr	r7, [pc, #148]	; (10013ad4 <__gedf2+0xc4>)
10013a3e:	42bc      	cmp	r4, r7
10013a40:	d02e      	beq.n	10013aa0 <__gedf2+0x90>
10013a42:	2d00      	cmp	r5, #0
10013a44:	d10e      	bne.n	10013a64 <__gedf2+0x54>
10013a46:	4330      	orrs	r0, r6
10013a48:	0007      	movs	r7, r0
10013a4a:	4681      	mov	r9, r0
10013a4c:	4278      	negs	r0, r7
10013a4e:	4178      	adcs	r0, r7
10013a50:	2c00      	cmp	r4, #0
10013a52:	d117      	bne.n	10013a84 <__gedf2+0x74>
10013a54:	465f      	mov	r7, fp
10013a56:	433a      	orrs	r2, r7
10013a58:	d114      	bne.n	10013a84 <__gedf2+0x74>
10013a5a:	464b      	mov	r3, r9
10013a5c:	2000      	movs	r0, #0
10013a5e:	2b00      	cmp	r3, #0
10013a60:	d00a      	beq.n	10013a78 <__gedf2+0x68>
10013a62:	e006      	b.n	10013a72 <__gedf2+0x62>
10013a64:	2c00      	cmp	r4, #0
10013a66:	d102      	bne.n	10013a6e <__gedf2+0x5e>
10013a68:	4658      	mov	r0, fp
10013a6a:	4302      	orrs	r2, r0
10013a6c:	d001      	beq.n	10013a72 <__gedf2+0x62>
10013a6e:	4299      	cmp	r1, r3
10013a70:	d01a      	beq.n	10013aa8 <__gedf2+0x98>
10013a72:	2301      	movs	r3, #1
10013a74:	4248      	negs	r0, r1
10013a76:	4318      	orrs	r0, r3
10013a78:	bc3c      	pop	{r2, r3, r4, r5}
10013a7a:	4690      	mov	r8, r2
10013a7c:	4699      	mov	r9, r3
10013a7e:	46a2      	mov	sl, r4
10013a80:	46ab      	mov	fp, r5
10013a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a84:	2800      	cmp	r0, #0
10013a86:	d0f2      	beq.n	10013a6e <__gedf2+0x5e>
10013a88:	4258      	negs	r0, r3
10013a8a:	4158      	adcs	r0, r3
10013a8c:	2201      	movs	r2, #1
10013a8e:	4240      	negs	r0, r0
10013a90:	4310      	orrs	r0, r2
10013a92:	e7f1      	b.n	10013a78 <__gedf2+0x68>
10013a94:	0037      	movs	r7, r6
10013a96:	4307      	orrs	r7, r0
10013a98:	d0d0      	beq.n	10013a3c <__gedf2+0x2c>
10013a9a:	2002      	movs	r0, #2
10013a9c:	4240      	negs	r0, r0
10013a9e:	e7eb      	b.n	10013a78 <__gedf2+0x68>
10013aa0:	465f      	mov	r7, fp
10013aa2:	4317      	orrs	r7, r2
10013aa4:	d0cd      	beq.n	10013a42 <__gedf2+0x32>
10013aa6:	e7f8      	b.n	10013a9a <__gedf2+0x8a>
10013aa8:	42a5      	cmp	r5, r4
10013aaa:	dce2      	bgt.n	10013a72 <__gedf2+0x62>
10013aac:	db05      	blt.n	10013aba <__gedf2+0xaa>
10013aae:	455e      	cmp	r6, fp
10013ab0:	d8df      	bhi.n	10013a72 <__gedf2+0x62>
10013ab2:	d008      	beq.n	10013ac6 <__gedf2+0xb6>
10013ab4:	2000      	movs	r0, #0
10013ab6:	455e      	cmp	r6, fp
10013ab8:	d2de      	bcs.n	10013a78 <__gedf2+0x68>
10013aba:	4248      	negs	r0, r1
10013abc:	4148      	adcs	r0, r1
10013abe:	2301      	movs	r3, #1
10013ac0:	4240      	negs	r0, r0
10013ac2:	4318      	orrs	r0, r3
10013ac4:	e7d8      	b.n	10013a78 <__gedf2+0x68>
10013ac6:	45c4      	cmp	ip, r8
10013ac8:	d8d3      	bhi.n	10013a72 <__gedf2+0x62>
10013aca:	2000      	movs	r0, #0
10013acc:	45c4      	cmp	ip, r8
10013ace:	d3f4      	bcc.n	10013aba <__gedf2+0xaa>
10013ad0:	e7d2      	b.n	10013a78 <__gedf2+0x68>
10013ad2:	46c0      	nop			; (mov r8, r8)
10013ad4:	000007ff 	.word	0x000007ff

10013ad8 <__ledf2>:
10013ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
10013ada:	465f      	mov	r7, fp
10013adc:	464d      	mov	r5, r9
10013ade:	4644      	mov	r4, r8
10013ae0:	4656      	mov	r6, sl
10013ae2:	b4f0      	push	{r4, r5, r6, r7}
10013ae4:	031c      	lsls	r4, r3, #12
10013ae6:	0b24      	lsrs	r4, r4, #12
10013ae8:	46a4      	mov	ip, r4
10013aea:	4c2f      	ldr	r4, [pc, #188]	; (10013ba8 <__ledf2+0xd0>)
10013aec:	030f      	lsls	r7, r1, #12
10013aee:	004d      	lsls	r5, r1, #1
10013af0:	005e      	lsls	r6, r3, #1
10013af2:	0fc9      	lsrs	r1, r1, #31
10013af4:	4680      	mov	r8, r0
10013af6:	0b3f      	lsrs	r7, r7, #12
10013af8:	0d6d      	lsrs	r5, r5, #21
10013afa:	468b      	mov	fp, r1
10013afc:	4691      	mov	r9, r2
10013afe:	0d76      	lsrs	r6, r6, #21
10013b00:	0fdb      	lsrs	r3, r3, #31
10013b02:	42a5      	cmp	r5, r4
10013b04:	d020      	beq.n	10013b48 <__ledf2+0x70>
10013b06:	4c28      	ldr	r4, [pc, #160]	; (10013ba8 <__ledf2+0xd0>)
10013b08:	42a6      	cmp	r6, r4
10013b0a:	d022      	beq.n	10013b52 <__ledf2+0x7a>
10013b0c:	2d00      	cmp	r5, #0
10013b0e:	d112      	bne.n	10013b36 <__ledf2+0x5e>
10013b10:	4338      	orrs	r0, r7
10013b12:	4244      	negs	r4, r0
10013b14:	4144      	adcs	r4, r0
10013b16:	2e00      	cmp	r6, #0
10013b18:	d020      	beq.n	10013b5c <__ledf2+0x84>
10013b1a:	2c00      	cmp	r4, #0
10013b1c:	d00d      	beq.n	10013b3a <__ledf2+0x62>
10013b1e:	425c      	negs	r4, r3
10013b20:	4163      	adcs	r3, r4
10013b22:	2401      	movs	r4, #1
10013b24:	425b      	negs	r3, r3
10013b26:	431c      	orrs	r4, r3
10013b28:	0020      	movs	r0, r4
10013b2a:	bc3c      	pop	{r2, r3, r4, r5}
10013b2c:	4690      	mov	r8, r2
10013b2e:	4699      	mov	r9, r3
10013b30:	46a2      	mov	sl, r4
10013b32:	46ab      	mov	fp, r5
10013b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b36:	2e00      	cmp	r6, #0
10013b38:	d017      	beq.n	10013b6a <__ledf2+0x92>
10013b3a:	455b      	cmp	r3, fp
10013b3c:	d019      	beq.n	10013b72 <__ledf2+0x9a>
10013b3e:	465b      	mov	r3, fp
10013b40:	425c      	negs	r4, r3
10013b42:	2301      	movs	r3, #1
10013b44:	431c      	orrs	r4, r3
10013b46:	e7ef      	b.n	10013b28 <__ledf2+0x50>
10013b48:	0039      	movs	r1, r7
10013b4a:	2402      	movs	r4, #2
10013b4c:	4301      	orrs	r1, r0
10013b4e:	d1eb      	bne.n	10013b28 <__ledf2+0x50>
10013b50:	e7d9      	b.n	10013b06 <__ledf2+0x2e>
10013b52:	4661      	mov	r1, ip
10013b54:	2402      	movs	r4, #2
10013b56:	4311      	orrs	r1, r2
10013b58:	d1e6      	bne.n	10013b28 <__ledf2+0x50>
10013b5a:	e7d7      	b.n	10013b0c <__ledf2+0x34>
10013b5c:	4661      	mov	r1, ip
10013b5e:	430a      	orrs	r2, r1
10013b60:	d1db      	bne.n	10013b1a <__ledf2+0x42>
10013b62:	2400      	movs	r4, #0
10013b64:	2800      	cmp	r0, #0
10013b66:	d0df      	beq.n	10013b28 <__ledf2+0x50>
10013b68:	e7e9      	b.n	10013b3e <__ledf2+0x66>
10013b6a:	4661      	mov	r1, ip
10013b6c:	430a      	orrs	r2, r1
10013b6e:	d1e4      	bne.n	10013b3a <__ledf2+0x62>
10013b70:	e7e5      	b.n	10013b3e <__ledf2+0x66>
10013b72:	42b5      	cmp	r5, r6
10013b74:	dd03      	ble.n	10013b7e <__ledf2+0xa6>
10013b76:	2201      	movs	r2, #1
10013b78:	425c      	negs	r4, r3
10013b7a:	4314      	orrs	r4, r2
10013b7c:	e7d4      	b.n	10013b28 <__ledf2+0x50>
10013b7e:	42b5      	cmp	r5, r6
10013b80:	dbcd      	blt.n	10013b1e <__ledf2+0x46>
10013b82:	4567      	cmp	r7, ip
10013b84:	d8db      	bhi.n	10013b3e <__ledf2+0x66>
10013b86:	d009      	beq.n	10013b9c <__ledf2+0xc4>
10013b88:	2400      	movs	r4, #0
10013b8a:	4567      	cmp	r7, ip
10013b8c:	d2cc      	bcs.n	10013b28 <__ledf2+0x50>
10013b8e:	4659      	mov	r1, fp
10013b90:	424c      	negs	r4, r1
10013b92:	4161      	adcs	r1, r4
10013b94:	2401      	movs	r4, #1
10013b96:	4249      	negs	r1, r1
10013b98:	430c      	orrs	r4, r1
10013b9a:	e7c5      	b.n	10013b28 <__ledf2+0x50>
10013b9c:	45c8      	cmp	r8, r9
10013b9e:	d8ce      	bhi.n	10013b3e <__ledf2+0x66>
10013ba0:	2400      	movs	r4, #0
10013ba2:	45c8      	cmp	r8, r9
10013ba4:	d3f3      	bcc.n	10013b8e <__ledf2+0xb6>
10013ba6:	e7bf      	b.n	10013b28 <__ledf2+0x50>
10013ba8:	000007ff 	.word	0x000007ff

10013bac <__aeabi_dmul>:
10013bac:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bae:	465f      	mov	r7, fp
10013bb0:	4656      	mov	r6, sl
10013bb2:	464d      	mov	r5, r9
10013bb4:	4644      	mov	r4, r8
10013bb6:	b4f0      	push	{r4, r5, r6, r7}
10013bb8:	030d      	lsls	r5, r1, #12
10013bba:	4699      	mov	r9, r3
10013bbc:	004e      	lsls	r6, r1, #1
10013bbe:	0b2b      	lsrs	r3, r5, #12
10013bc0:	b087      	sub	sp, #28
10013bc2:	0007      	movs	r7, r0
10013bc4:	4692      	mov	sl, r2
10013bc6:	4680      	mov	r8, r0
10013bc8:	469b      	mov	fp, r3
10013bca:	0d76      	lsrs	r6, r6, #21
10013bcc:	0fcc      	lsrs	r4, r1, #31
10013bce:	2e00      	cmp	r6, #0
10013bd0:	d069      	beq.n	10013ca6 <__aeabi_dmul+0xfa>
10013bd2:	4b6d      	ldr	r3, [pc, #436]	; (10013d88 <__aeabi_dmul+0x1dc>)
10013bd4:	429e      	cmp	r6, r3
10013bd6:	d035      	beq.n	10013c44 <__aeabi_dmul+0x98>
10013bd8:	465b      	mov	r3, fp
10013bda:	2280      	movs	r2, #128	; 0x80
10013bdc:	00dd      	lsls	r5, r3, #3
10013bde:	0412      	lsls	r2, r2, #16
10013be0:	0f43      	lsrs	r3, r0, #29
10013be2:	4313      	orrs	r3, r2
10013be4:	432b      	orrs	r3, r5
10013be6:	469b      	mov	fp, r3
10013be8:	00c3      	lsls	r3, r0, #3
10013bea:	4698      	mov	r8, r3
10013bec:	4b67      	ldr	r3, [pc, #412]	; (10013d8c <__aeabi_dmul+0x1e0>)
10013bee:	2700      	movs	r7, #0
10013bf0:	469c      	mov	ip, r3
10013bf2:	2300      	movs	r3, #0
10013bf4:	4466      	add	r6, ip
10013bf6:	9301      	str	r3, [sp, #4]
10013bf8:	464a      	mov	r2, r9
10013bfa:	0315      	lsls	r5, r2, #12
10013bfc:	0050      	lsls	r0, r2, #1
10013bfe:	0fd2      	lsrs	r2, r2, #31
10013c00:	4653      	mov	r3, sl
10013c02:	0b2d      	lsrs	r5, r5, #12
10013c04:	0d40      	lsrs	r0, r0, #21
10013c06:	4691      	mov	r9, r2
10013c08:	d100      	bne.n	10013c0c <__aeabi_dmul+0x60>
10013c0a:	e076      	b.n	10013cfa <__aeabi_dmul+0x14e>
10013c0c:	4a5e      	ldr	r2, [pc, #376]	; (10013d88 <__aeabi_dmul+0x1dc>)
10013c0e:	4290      	cmp	r0, r2
10013c10:	d06c      	beq.n	10013cec <__aeabi_dmul+0x140>
10013c12:	2280      	movs	r2, #128	; 0x80
10013c14:	0f5b      	lsrs	r3, r3, #29
10013c16:	0412      	lsls	r2, r2, #16
10013c18:	4313      	orrs	r3, r2
10013c1a:	4a5c      	ldr	r2, [pc, #368]	; (10013d8c <__aeabi_dmul+0x1e0>)
10013c1c:	00ed      	lsls	r5, r5, #3
10013c1e:	4694      	mov	ip, r2
10013c20:	431d      	orrs	r5, r3
10013c22:	4653      	mov	r3, sl
10013c24:	2200      	movs	r2, #0
10013c26:	00db      	lsls	r3, r3, #3
10013c28:	4460      	add	r0, ip
10013c2a:	4649      	mov	r1, r9
10013c2c:	1836      	adds	r6, r6, r0
10013c2e:	1c70      	adds	r0, r6, #1
10013c30:	4061      	eors	r1, r4
10013c32:	9002      	str	r0, [sp, #8]
10013c34:	4317      	orrs	r7, r2
10013c36:	2f0f      	cmp	r7, #15
10013c38:	d900      	bls.n	10013c3c <__aeabi_dmul+0x90>
10013c3a:	e0af      	b.n	10013d9c <__aeabi_dmul+0x1f0>
10013c3c:	4854      	ldr	r0, [pc, #336]	; (10013d90 <__aeabi_dmul+0x1e4>)
10013c3e:	00bf      	lsls	r7, r7, #2
10013c40:	59c7      	ldr	r7, [r0, r7]
10013c42:	46bf      	mov	pc, r7
10013c44:	465b      	mov	r3, fp
10013c46:	431f      	orrs	r7, r3
10013c48:	d000      	beq.n	10013c4c <__aeabi_dmul+0xa0>
10013c4a:	e088      	b.n	10013d5e <__aeabi_dmul+0x1b2>
10013c4c:	2300      	movs	r3, #0
10013c4e:	469b      	mov	fp, r3
10013c50:	4698      	mov	r8, r3
10013c52:	3302      	adds	r3, #2
10013c54:	2708      	movs	r7, #8
10013c56:	9301      	str	r3, [sp, #4]
10013c58:	e7ce      	b.n	10013bf8 <__aeabi_dmul+0x4c>
10013c5a:	4649      	mov	r1, r9
10013c5c:	2a02      	cmp	r2, #2
10013c5e:	d06a      	beq.n	10013d36 <__aeabi_dmul+0x18a>
10013c60:	2a03      	cmp	r2, #3
10013c62:	d100      	bne.n	10013c66 <__aeabi_dmul+0xba>
10013c64:	e209      	b.n	1001407a <__aeabi_dmul+0x4ce>
10013c66:	2a01      	cmp	r2, #1
10013c68:	d000      	beq.n	10013c6c <__aeabi_dmul+0xc0>
10013c6a:	e1bb      	b.n	10013fe4 <__aeabi_dmul+0x438>
10013c6c:	4011      	ands	r1, r2
10013c6e:	2200      	movs	r2, #0
10013c70:	2300      	movs	r3, #0
10013c72:	2500      	movs	r5, #0
10013c74:	4690      	mov	r8, r2
10013c76:	b2cc      	uxtb	r4, r1
10013c78:	2100      	movs	r1, #0
10013c7a:	032d      	lsls	r5, r5, #12
10013c7c:	0d0a      	lsrs	r2, r1, #20
10013c7e:	0512      	lsls	r2, r2, #20
10013c80:	0b2d      	lsrs	r5, r5, #12
10013c82:	4315      	orrs	r5, r2
10013c84:	4a43      	ldr	r2, [pc, #268]	; (10013d94 <__aeabi_dmul+0x1e8>)
10013c86:	051b      	lsls	r3, r3, #20
10013c88:	4015      	ands	r5, r2
10013c8a:	431d      	orrs	r5, r3
10013c8c:	006d      	lsls	r5, r5, #1
10013c8e:	07e4      	lsls	r4, r4, #31
10013c90:	086d      	lsrs	r5, r5, #1
10013c92:	4325      	orrs	r5, r4
10013c94:	4640      	mov	r0, r8
10013c96:	0029      	movs	r1, r5
10013c98:	b007      	add	sp, #28
10013c9a:	bc3c      	pop	{r2, r3, r4, r5}
10013c9c:	4690      	mov	r8, r2
10013c9e:	4699      	mov	r9, r3
10013ca0:	46a2      	mov	sl, r4
10013ca2:	46ab      	mov	fp, r5
10013ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ca6:	4303      	orrs	r3, r0
10013ca8:	d052      	beq.n	10013d50 <__aeabi_dmul+0x1a4>
10013caa:	465b      	mov	r3, fp
10013cac:	2b00      	cmp	r3, #0
10013cae:	d100      	bne.n	10013cb2 <__aeabi_dmul+0x106>
10013cb0:	e18a      	b.n	10013fc8 <__aeabi_dmul+0x41c>
10013cb2:	4658      	mov	r0, fp
10013cb4:	f000 fdb6 	bl	10014824 <__clzsi2>
10013cb8:	0003      	movs	r3, r0
10013cba:	3b0b      	subs	r3, #11
10013cbc:	2b1c      	cmp	r3, #28
10013cbe:	dd00      	ble.n	10013cc2 <__aeabi_dmul+0x116>
10013cc0:	e17b      	b.n	10013fba <__aeabi_dmul+0x40e>
10013cc2:	221d      	movs	r2, #29
10013cc4:	1ad3      	subs	r3, r2, r3
10013cc6:	003a      	movs	r2, r7
10013cc8:	0001      	movs	r1, r0
10013cca:	465d      	mov	r5, fp
10013ccc:	40da      	lsrs	r2, r3
10013cce:	3908      	subs	r1, #8
10013cd0:	408d      	lsls	r5, r1
10013cd2:	0013      	movs	r3, r2
10013cd4:	408f      	lsls	r7, r1
10013cd6:	432b      	orrs	r3, r5
10013cd8:	469b      	mov	fp, r3
10013cda:	46b8      	mov	r8, r7
10013cdc:	4b2e      	ldr	r3, [pc, #184]	; (10013d98 <__aeabi_dmul+0x1ec>)
10013cde:	2700      	movs	r7, #0
10013ce0:	469c      	mov	ip, r3
10013ce2:	2300      	movs	r3, #0
10013ce4:	4460      	add	r0, ip
10013ce6:	4246      	negs	r6, r0
10013ce8:	9301      	str	r3, [sp, #4]
10013cea:	e785      	b.n	10013bf8 <__aeabi_dmul+0x4c>
10013cec:	4652      	mov	r2, sl
10013cee:	432a      	orrs	r2, r5
10013cf0:	d12c      	bne.n	10013d4c <__aeabi_dmul+0x1a0>
10013cf2:	2500      	movs	r5, #0
10013cf4:	2300      	movs	r3, #0
10013cf6:	2202      	movs	r2, #2
10013cf8:	e797      	b.n	10013c2a <__aeabi_dmul+0x7e>
10013cfa:	4652      	mov	r2, sl
10013cfc:	432a      	orrs	r2, r5
10013cfe:	d021      	beq.n	10013d44 <__aeabi_dmul+0x198>
10013d00:	2d00      	cmp	r5, #0
10013d02:	d100      	bne.n	10013d06 <__aeabi_dmul+0x15a>
10013d04:	e154      	b.n	10013fb0 <__aeabi_dmul+0x404>
10013d06:	0028      	movs	r0, r5
10013d08:	f000 fd8c 	bl	10014824 <__clzsi2>
10013d0c:	0003      	movs	r3, r0
10013d0e:	3b0b      	subs	r3, #11
10013d10:	2b1c      	cmp	r3, #28
10013d12:	dd00      	ble.n	10013d16 <__aeabi_dmul+0x16a>
10013d14:	e146      	b.n	10013fa4 <__aeabi_dmul+0x3f8>
10013d16:	211d      	movs	r1, #29
10013d18:	1acb      	subs	r3, r1, r3
10013d1a:	4651      	mov	r1, sl
10013d1c:	0002      	movs	r2, r0
10013d1e:	40d9      	lsrs	r1, r3
10013d20:	4653      	mov	r3, sl
10013d22:	3a08      	subs	r2, #8
10013d24:	4095      	lsls	r5, r2
10013d26:	4093      	lsls	r3, r2
10013d28:	430d      	orrs	r5, r1
10013d2a:	4a1b      	ldr	r2, [pc, #108]	; (10013d98 <__aeabi_dmul+0x1ec>)
10013d2c:	4694      	mov	ip, r2
10013d2e:	4460      	add	r0, ip
10013d30:	4240      	negs	r0, r0
10013d32:	2200      	movs	r2, #0
10013d34:	e779      	b.n	10013c2a <__aeabi_dmul+0x7e>
10013d36:	2401      	movs	r4, #1
10013d38:	2200      	movs	r2, #0
10013d3a:	400c      	ands	r4, r1
10013d3c:	4b12      	ldr	r3, [pc, #72]	; (10013d88 <__aeabi_dmul+0x1dc>)
10013d3e:	2500      	movs	r5, #0
10013d40:	4690      	mov	r8, r2
10013d42:	e799      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013d44:	2500      	movs	r5, #0
10013d46:	2300      	movs	r3, #0
10013d48:	2201      	movs	r2, #1
10013d4a:	e76e      	b.n	10013c2a <__aeabi_dmul+0x7e>
10013d4c:	2203      	movs	r2, #3
10013d4e:	e76c      	b.n	10013c2a <__aeabi_dmul+0x7e>
10013d50:	2300      	movs	r3, #0
10013d52:	469b      	mov	fp, r3
10013d54:	4698      	mov	r8, r3
10013d56:	3301      	adds	r3, #1
10013d58:	2704      	movs	r7, #4
10013d5a:	9301      	str	r3, [sp, #4]
10013d5c:	e74c      	b.n	10013bf8 <__aeabi_dmul+0x4c>
10013d5e:	2303      	movs	r3, #3
10013d60:	270c      	movs	r7, #12
10013d62:	9301      	str	r3, [sp, #4]
10013d64:	e748      	b.n	10013bf8 <__aeabi_dmul+0x4c>
10013d66:	2300      	movs	r3, #0
10013d68:	2580      	movs	r5, #128	; 0x80
10013d6a:	4698      	mov	r8, r3
10013d6c:	2400      	movs	r4, #0
10013d6e:	032d      	lsls	r5, r5, #12
10013d70:	4b05      	ldr	r3, [pc, #20]	; (10013d88 <__aeabi_dmul+0x1dc>)
10013d72:	e781      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013d74:	465d      	mov	r5, fp
10013d76:	4643      	mov	r3, r8
10013d78:	9a01      	ldr	r2, [sp, #4]
10013d7a:	e76f      	b.n	10013c5c <__aeabi_dmul+0xb0>
10013d7c:	465d      	mov	r5, fp
10013d7e:	4643      	mov	r3, r8
10013d80:	0021      	movs	r1, r4
10013d82:	9a01      	ldr	r2, [sp, #4]
10013d84:	e76a      	b.n	10013c5c <__aeabi_dmul+0xb0>
10013d86:	46c0      	nop			; (mov r8, r8)
10013d88:	000007ff 	.word	0x000007ff
10013d8c:	fffffc01 	.word	0xfffffc01
10013d90:	10016f64 	.word	0x10016f64
10013d94:	800fffff 	.word	0x800fffff
10013d98:	000003f3 	.word	0x000003f3
10013d9c:	4642      	mov	r2, r8
10013d9e:	0c12      	lsrs	r2, r2, #16
10013da0:	4691      	mov	r9, r2
10013da2:	0c1a      	lsrs	r2, r3, #16
10013da4:	4694      	mov	ip, r2
10013da6:	4642      	mov	r2, r8
10013da8:	0417      	lsls	r7, r2, #16
10013daa:	464a      	mov	r2, r9
10013dac:	041b      	lsls	r3, r3, #16
10013dae:	0c1b      	lsrs	r3, r3, #16
10013db0:	435a      	muls	r2, r3
10013db2:	4660      	mov	r0, ip
10013db4:	4690      	mov	r8, r2
10013db6:	464a      	mov	r2, r9
10013db8:	4342      	muls	r2, r0
10013dba:	0010      	movs	r0, r2
10013dbc:	9203      	str	r2, [sp, #12]
10013dbe:	4662      	mov	r2, ip
10013dc0:	001c      	movs	r4, r3
10013dc2:	0c3f      	lsrs	r7, r7, #16
10013dc4:	437a      	muls	r2, r7
10013dc6:	437c      	muls	r4, r7
10013dc8:	4442      	add	r2, r8
10013dca:	9201      	str	r2, [sp, #4]
10013dcc:	0c22      	lsrs	r2, r4, #16
10013dce:	4692      	mov	sl, r2
10013dd0:	9a01      	ldr	r2, [sp, #4]
10013dd2:	4452      	add	r2, sl
10013dd4:	4590      	cmp	r8, r2
10013dd6:	d906      	bls.n	10013de6 <__aeabi_dmul+0x23a>
10013dd8:	4682      	mov	sl, r0
10013dda:	2080      	movs	r0, #128	; 0x80
10013ddc:	0240      	lsls	r0, r0, #9
10013dde:	4680      	mov	r8, r0
10013de0:	44c2      	add	sl, r8
10013de2:	4650      	mov	r0, sl
10013de4:	9003      	str	r0, [sp, #12]
10013de6:	0c10      	lsrs	r0, r2, #16
10013de8:	9004      	str	r0, [sp, #16]
10013dea:	4648      	mov	r0, r9
10013dec:	0424      	lsls	r4, r4, #16
10013dee:	0c24      	lsrs	r4, r4, #16
10013df0:	0412      	lsls	r2, r2, #16
10013df2:	1912      	adds	r2, r2, r4
10013df4:	9205      	str	r2, [sp, #20]
10013df6:	0c2a      	lsrs	r2, r5, #16
10013df8:	042d      	lsls	r5, r5, #16
10013dfa:	0c2d      	lsrs	r5, r5, #16
10013dfc:	4368      	muls	r0, r5
10013dfe:	002c      	movs	r4, r5
10013e00:	4682      	mov	sl, r0
10013e02:	4648      	mov	r0, r9
10013e04:	437c      	muls	r4, r7
10013e06:	4350      	muls	r0, r2
10013e08:	4681      	mov	r9, r0
10013e0a:	0c20      	lsrs	r0, r4, #16
10013e0c:	4680      	mov	r8, r0
10013e0e:	4357      	muls	r7, r2
10013e10:	4457      	add	r7, sl
10013e12:	4447      	add	r7, r8
10013e14:	45ba      	cmp	sl, r7
10013e16:	d903      	bls.n	10013e20 <__aeabi_dmul+0x274>
10013e18:	2080      	movs	r0, #128	; 0x80
10013e1a:	0240      	lsls	r0, r0, #9
10013e1c:	4680      	mov	r8, r0
10013e1e:	44c1      	add	r9, r8
10013e20:	0c38      	lsrs	r0, r7, #16
10013e22:	043f      	lsls	r7, r7, #16
10013e24:	46b8      	mov	r8, r7
10013e26:	4448      	add	r0, r9
10013e28:	0424      	lsls	r4, r4, #16
10013e2a:	0c24      	lsrs	r4, r4, #16
10013e2c:	9001      	str	r0, [sp, #4]
10013e2e:	9804      	ldr	r0, [sp, #16]
10013e30:	44a0      	add	r8, r4
10013e32:	4440      	add	r0, r8
10013e34:	9004      	str	r0, [sp, #16]
10013e36:	4658      	mov	r0, fp
10013e38:	0c00      	lsrs	r0, r0, #16
10013e3a:	4681      	mov	r9, r0
10013e3c:	4658      	mov	r0, fp
10013e3e:	0404      	lsls	r4, r0, #16
10013e40:	0c20      	lsrs	r0, r4, #16
10013e42:	4682      	mov	sl, r0
10013e44:	0007      	movs	r7, r0
10013e46:	4648      	mov	r0, r9
10013e48:	435f      	muls	r7, r3
10013e4a:	464c      	mov	r4, r9
10013e4c:	4343      	muls	r3, r0
10013e4e:	4660      	mov	r0, ip
10013e50:	4360      	muls	r0, r4
10013e52:	4664      	mov	r4, ip
10013e54:	4683      	mov	fp, r0
10013e56:	4650      	mov	r0, sl
10013e58:	4344      	muls	r4, r0
10013e5a:	0c38      	lsrs	r0, r7, #16
10013e5c:	4684      	mov	ip, r0
10013e5e:	18e4      	adds	r4, r4, r3
10013e60:	4464      	add	r4, ip
10013e62:	42a3      	cmp	r3, r4
10013e64:	d903      	bls.n	10013e6e <__aeabi_dmul+0x2c2>
10013e66:	2380      	movs	r3, #128	; 0x80
10013e68:	025b      	lsls	r3, r3, #9
10013e6a:	469c      	mov	ip, r3
10013e6c:	44e3      	add	fp, ip
10013e6e:	4648      	mov	r0, r9
10013e70:	043f      	lsls	r7, r7, #16
10013e72:	0c23      	lsrs	r3, r4, #16
10013e74:	0c3f      	lsrs	r7, r7, #16
10013e76:	0424      	lsls	r4, r4, #16
10013e78:	19e4      	adds	r4, r4, r7
10013e7a:	4657      	mov	r7, sl
10013e7c:	4368      	muls	r0, r5
10013e7e:	436f      	muls	r7, r5
10013e80:	4684      	mov	ip, r0
10013e82:	464d      	mov	r5, r9
10013e84:	4650      	mov	r0, sl
10013e86:	4355      	muls	r5, r2
10013e88:	4342      	muls	r2, r0
10013e8a:	0c38      	lsrs	r0, r7, #16
10013e8c:	4681      	mov	r9, r0
10013e8e:	4462      	add	r2, ip
10013e90:	444a      	add	r2, r9
10013e92:	445b      	add	r3, fp
10013e94:	4594      	cmp	ip, r2
10013e96:	d903      	bls.n	10013ea0 <__aeabi_dmul+0x2f4>
10013e98:	2080      	movs	r0, #128	; 0x80
10013e9a:	0240      	lsls	r0, r0, #9
10013e9c:	4684      	mov	ip, r0
10013e9e:	4465      	add	r5, ip
10013ea0:	9803      	ldr	r0, [sp, #12]
10013ea2:	043f      	lsls	r7, r7, #16
10013ea4:	4683      	mov	fp, r0
10013ea6:	9804      	ldr	r0, [sp, #16]
10013ea8:	0c3f      	lsrs	r7, r7, #16
10013eaa:	4684      	mov	ip, r0
10013eac:	44e3      	add	fp, ip
10013eae:	45c3      	cmp	fp, r8
10013eb0:	4180      	sbcs	r0, r0
10013eb2:	4240      	negs	r0, r0
10013eb4:	4682      	mov	sl, r0
10013eb6:	0410      	lsls	r0, r2, #16
10013eb8:	4684      	mov	ip, r0
10013eba:	9801      	ldr	r0, [sp, #4]
10013ebc:	4467      	add	r7, ip
10013ebe:	4684      	mov	ip, r0
10013ec0:	4467      	add	r7, ip
10013ec2:	44a3      	add	fp, r4
10013ec4:	46bc      	mov	ip, r7
10013ec6:	45a3      	cmp	fp, r4
10013ec8:	41a4      	sbcs	r4, r4
10013eca:	4699      	mov	r9, r3
10013ecc:	44d4      	add	ip, sl
10013ece:	4264      	negs	r4, r4
10013ed0:	4287      	cmp	r7, r0
10013ed2:	41bf      	sbcs	r7, r7
10013ed4:	45d4      	cmp	ip, sl
10013ed6:	4180      	sbcs	r0, r0
10013ed8:	44e1      	add	r9, ip
10013eda:	46a0      	mov	r8, r4
10013edc:	4599      	cmp	r9, r3
10013ede:	419b      	sbcs	r3, r3
10013ee0:	427f      	negs	r7, r7
10013ee2:	4240      	negs	r0, r0
10013ee4:	44c8      	add	r8, r9
10013ee6:	4307      	orrs	r7, r0
10013ee8:	0c12      	lsrs	r2, r2, #16
10013eea:	18ba      	adds	r2, r7, r2
10013eec:	45a0      	cmp	r8, r4
10013eee:	41a4      	sbcs	r4, r4
10013ef0:	425f      	negs	r7, r3
10013ef2:	003b      	movs	r3, r7
10013ef4:	4264      	negs	r4, r4
10013ef6:	4323      	orrs	r3, r4
10013ef8:	18d7      	adds	r7, r2, r3
10013efa:	4643      	mov	r3, r8
10013efc:	197d      	adds	r5, r7, r5
10013efe:	0ddb      	lsrs	r3, r3, #23
10013f00:	026d      	lsls	r5, r5, #9
10013f02:	431d      	orrs	r5, r3
10013f04:	465b      	mov	r3, fp
10013f06:	025a      	lsls	r2, r3, #9
10013f08:	9b05      	ldr	r3, [sp, #20]
10013f0a:	431a      	orrs	r2, r3
10013f0c:	1e53      	subs	r3, r2, #1
10013f0e:	419a      	sbcs	r2, r3
10013f10:	465b      	mov	r3, fp
10013f12:	0ddb      	lsrs	r3, r3, #23
10013f14:	431a      	orrs	r2, r3
10013f16:	4643      	mov	r3, r8
10013f18:	025b      	lsls	r3, r3, #9
10013f1a:	4313      	orrs	r3, r2
10013f1c:	01ea      	lsls	r2, r5, #7
10013f1e:	d507      	bpl.n	10013f30 <__aeabi_dmul+0x384>
10013f20:	2201      	movs	r2, #1
10013f22:	085c      	lsrs	r4, r3, #1
10013f24:	4013      	ands	r3, r2
10013f26:	4323      	orrs	r3, r4
10013f28:	07ea      	lsls	r2, r5, #31
10013f2a:	9e02      	ldr	r6, [sp, #8]
10013f2c:	4313      	orrs	r3, r2
10013f2e:	086d      	lsrs	r5, r5, #1
10013f30:	4a57      	ldr	r2, [pc, #348]	; (10014090 <__aeabi_dmul+0x4e4>)
10013f32:	18b2      	adds	r2, r6, r2
10013f34:	2a00      	cmp	r2, #0
10013f36:	dd4b      	ble.n	10013fd0 <__aeabi_dmul+0x424>
10013f38:	0758      	lsls	r0, r3, #29
10013f3a:	d009      	beq.n	10013f50 <__aeabi_dmul+0x3a4>
10013f3c:	200f      	movs	r0, #15
10013f3e:	4018      	ands	r0, r3
10013f40:	2804      	cmp	r0, #4
10013f42:	d005      	beq.n	10013f50 <__aeabi_dmul+0x3a4>
10013f44:	1d18      	adds	r0, r3, #4
10013f46:	4298      	cmp	r0, r3
10013f48:	419b      	sbcs	r3, r3
10013f4a:	425b      	negs	r3, r3
10013f4c:	18ed      	adds	r5, r5, r3
10013f4e:	0003      	movs	r3, r0
10013f50:	01e8      	lsls	r0, r5, #7
10013f52:	d504      	bpl.n	10013f5e <__aeabi_dmul+0x3b2>
10013f54:	4a4f      	ldr	r2, [pc, #316]	; (10014094 <__aeabi_dmul+0x4e8>)
10013f56:	4015      	ands	r5, r2
10013f58:	2280      	movs	r2, #128	; 0x80
10013f5a:	00d2      	lsls	r2, r2, #3
10013f5c:	18b2      	adds	r2, r6, r2
10013f5e:	484e      	ldr	r0, [pc, #312]	; (10014098 <__aeabi_dmul+0x4ec>)
10013f60:	4282      	cmp	r2, r0
10013f62:	dd00      	ble.n	10013f66 <__aeabi_dmul+0x3ba>
10013f64:	e6e7      	b.n	10013d36 <__aeabi_dmul+0x18a>
10013f66:	2401      	movs	r4, #1
10013f68:	08db      	lsrs	r3, r3, #3
10013f6a:	0768      	lsls	r0, r5, #29
10013f6c:	4318      	orrs	r0, r3
10013f6e:	026d      	lsls	r5, r5, #9
10013f70:	0553      	lsls	r3, r2, #21
10013f72:	4680      	mov	r8, r0
10013f74:	0b2d      	lsrs	r5, r5, #12
10013f76:	0d5b      	lsrs	r3, r3, #21
10013f78:	400c      	ands	r4, r1
10013f7a:	e67d      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013f7c:	2280      	movs	r2, #128	; 0x80
10013f7e:	4659      	mov	r1, fp
10013f80:	0312      	lsls	r2, r2, #12
10013f82:	4211      	tst	r1, r2
10013f84:	d008      	beq.n	10013f98 <__aeabi_dmul+0x3ec>
10013f86:	4215      	tst	r5, r2
10013f88:	d106      	bne.n	10013f98 <__aeabi_dmul+0x3ec>
10013f8a:	4315      	orrs	r5, r2
10013f8c:	032d      	lsls	r5, r5, #12
10013f8e:	4698      	mov	r8, r3
10013f90:	0b2d      	lsrs	r5, r5, #12
10013f92:	464c      	mov	r4, r9
10013f94:	4b41      	ldr	r3, [pc, #260]	; (1001409c <__aeabi_dmul+0x4f0>)
10013f96:	e66f      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013f98:	465d      	mov	r5, fp
10013f9a:	4315      	orrs	r5, r2
10013f9c:	032d      	lsls	r5, r5, #12
10013f9e:	0b2d      	lsrs	r5, r5, #12
10013fa0:	4b3e      	ldr	r3, [pc, #248]	; (1001409c <__aeabi_dmul+0x4f0>)
10013fa2:	e669      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013fa4:	0003      	movs	r3, r0
10013fa6:	4655      	mov	r5, sl
10013fa8:	3b28      	subs	r3, #40	; 0x28
10013faa:	409d      	lsls	r5, r3
10013fac:	2300      	movs	r3, #0
10013fae:	e6bc      	b.n	10013d2a <__aeabi_dmul+0x17e>
10013fb0:	4650      	mov	r0, sl
10013fb2:	f000 fc37 	bl	10014824 <__clzsi2>
10013fb6:	3020      	adds	r0, #32
10013fb8:	e6a8      	b.n	10013d0c <__aeabi_dmul+0x160>
10013fba:	0003      	movs	r3, r0
10013fbc:	3b28      	subs	r3, #40	; 0x28
10013fbe:	409f      	lsls	r7, r3
10013fc0:	2300      	movs	r3, #0
10013fc2:	46bb      	mov	fp, r7
10013fc4:	4698      	mov	r8, r3
10013fc6:	e689      	b.n	10013cdc <__aeabi_dmul+0x130>
10013fc8:	f000 fc2c 	bl	10014824 <__clzsi2>
10013fcc:	3020      	adds	r0, #32
10013fce:	e673      	b.n	10013cb8 <__aeabi_dmul+0x10c>
10013fd0:	2401      	movs	r4, #1
10013fd2:	1aa6      	subs	r6, r4, r2
10013fd4:	2e38      	cmp	r6, #56	; 0x38
10013fd6:	dd07      	ble.n	10013fe8 <__aeabi_dmul+0x43c>
10013fd8:	2200      	movs	r2, #0
10013fda:	400c      	ands	r4, r1
10013fdc:	2300      	movs	r3, #0
10013fde:	2500      	movs	r5, #0
10013fe0:	4690      	mov	r8, r2
10013fe2:	e649      	b.n	10013c78 <__aeabi_dmul+0xcc>
10013fe4:	9e02      	ldr	r6, [sp, #8]
10013fe6:	e7a3      	b.n	10013f30 <__aeabi_dmul+0x384>
10013fe8:	2e1f      	cmp	r6, #31
10013fea:	dc20      	bgt.n	1001402e <__aeabi_dmul+0x482>
10013fec:	2220      	movs	r2, #32
10013fee:	002c      	movs	r4, r5
10013ff0:	0018      	movs	r0, r3
10013ff2:	1b92      	subs	r2, r2, r6
10013ff4:	40f0      	lsrs	r0, r6
10013ff6:	4094      	lsls	r4, r2
10013ff8:	4093      	lsls	r3, r2
10013ffa:	4304      	orrs	r4, r0
10013ffc:	1e58      	subs	r0, r3, #1
10013ffe:	4183      	sbcs	r3, r0
10014000:	431c      	orrs	r4, r3
10014002:	40f5      	lsrs	r5, r6
10014004:	0763      	lsls	r3, r4, #29
10014006:	d009      	beq.n	1001401c <__aeabi_dmul+0x470>
10014008:	230f      	movs	r3, #15
1001400a:	4023      	ands	r3, r4
1001400c:	2b04      	cmp	r3, #4
1001400e:	d005      	beq.n	1001401c <__aeabi_dmul+0x470>
10014010:	0023      	movs	r3, r4
10014012:	1d1c      	adds	r4, r3, #4
10014014:	429c      	cmp	r4, r3
10014016:	4192      	sbcs	r2, r2
10014018:	4252      	negs	r2, r2
1001401a:	18ad      	adds	r5, r5, r2
1001401c:	022b      	lsls	r3, r5, #8
1001401e:	d51f      	bpl.n	10014060 <__aeabi_dmul+0x4b4>
10014020:	2401      	movs	r4, #1
10014022:	2200      	movs	r2, #0
10014024:	400c      	ands	r4, r1
10014026:	2301      	movs	r3, #1
10014028:	2500      	movs	r5, #0
1001402a:	4690      	mov	r8, r2
1001402c:	e624      	b.n	10013c78 <__aeabi_dmul+0xcc>
1001402e:	201f      	movs	r0, #31
10014030:	002c      	movs	r4, r5
10014032:	4240      	negs	r0, r0
10014034:	1a82      	subs	r2, r0, r2
10014036:	40d4      	lsrs	r4, r2
10014038:	2e20      	cmp	r6, #32
1001403a:	d01c      	beq.n	10014076 <__aeabi_dmul+0x4ca>
1001403c:	2240      	movs	r2, #64	; 0x40
1001403e:	1b96      	subs	r6, r2, r6
10014040:	40b5      	lsls	r5, r6
10014042:	432b      	orrs	r3, r5
10014044:	1e58      	subs	r0, r3, #1
10014046:	4183      	sbcs	r3, r0
10014048:	2007      	movs	r0, #7
1001404a:	4323      	orrs	r3, r4
1001404c:	4018      	ands	r0, r3
1001404e:	2500      	movs	r5, #0
10014050:	2800      	cmp	r0, #0
10014052:	d009      	beq.n	10014068 <__aeabi_dmul+0x4bc>
10014054:	220f      	movs	r2, #15
10014056:	2500      	movs	r5, #0
10014058:	401a      	ands	r2, r3
1001405a:	001c      	movs	r4, r3
1001405c:	2a04      	cmp	r2, #4
1001405e:	d1d8      	bne.n	10014012 <__aeabi_dmul+0x466>
10014060:	0023      	movs	r3, r4
10014062:	0768      	lsls	r0, r5, #29
10014064:	026d      	lsls	r5, r5, #9
10014066:	0b2d      	lsrs	r5, r5, #12
10014068:	2401      	movs	r4, #1
1001406a:	08db      	lsrs	r3, r3, #3
1001406c:	4303      	orrs	r3, r0
1001406e:	4698      	mov	r8, r3
10014070:	400c      	ands	r4, r1
10014072:	2300      	movs	r3, #0
10014074:	e600      	b.n	10013c78 <__aeabi_dmul+0xcc>
10014076:	2500      	movs	r5, #0
10014078:	e7e3      	b.n	10014042 <__aeabi_dmul+0x496>
1001407a:	2280      	movs	r2, #128	; 0x80
1001407c:	2401      	movs	r4, #1
1001407e:	0312      	lsls	r2, r2, #12
10014080:	4315      	orrs	r5, r2
10014082:	032d      	lsls	r5, r5, #12
10014084:	4698      	mov	r8, r3
10014086:	0b2d      	lsrs	r5, r5, #12
10014088:	400c      	ands	r4, r1
1001408a:	4b04      	ldr	r3, [pc, #16]	; (1001409c <__aeabi_dmul+0x4f0>)
1001408c:	e5f4      	b.n	10013c78 <__aeabi_dmul+0xcc>
1001408e:	46c0      	nop			; (mov r8, r8)
10014090:	000003ff 	.word	0x000003ff
10014094:	feffffff 	.word	0xfeffffff
10014098:	000007fe 	.word	0x000007fe
1001409c:	000007ff 	.word	0x000007ff

100140a0 <__aeabi_dsub>:
100140a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100140a2:	4657      	mov	r7, sl
100140a4:	464e      	mov	r6, r9
100140a6:	4645      	mov	r5, r8
100140a8:	b4e0      	push	{r5, r6, r7}
100140aa:	000e      	movs	r6, r1
100140ac:	0011      	movs	r1, r2
100140ae:	0ff2      	lsrs	r2, r6, #31
100140b0:	4692      	mov	sl, r2
100140b2:	00c5      	lsls	r5, r0, #3
100140b4:	0f42      	lsrs	r2, r0, #29
100140b6:	0318      	lsls	r0, r3, #12
100140b8:	0337      	lsls	r7, r6, #12
100140ba:	0074      	lsls	r4, r6, #1
100140bc:	0a40      	lsrs	r0, r0, #9
100140be:	0f4e      	lsrs	r6, r1, #29
100140c0:	0a7f      	lsrs	r7, r7, #9
100140c2:	4330      	orrs	r0, r6
100140c4:	4ecf      	ldr	r6, [pc, #828]	; (10014404 <__aeabi_dsub+0x364>)
100140c6:	4317      	orrs	r7, r2
100140c8:	005a      	lsls	r2, r3, #1
100140ca:	0d64      	lsrs	r4, r4, #21
100140cc:	0d52      	lsrs	r2, r2, #21
100140ce:	0fdb      	lsrs	r3, r3, #31
100140d0:	00c9      	lsls	r1, r1, #3
100140d2:	42b2      	cmp	r2, r6
100140d4:	d100      	bne.n	100140d8 <__aeabi_dsub+0x38>
100140d6:	e0e5      	b.n	100142a4 <__aeabi_dsub+0x204>
100140d8:	2601      	movs	r6, #1
100140da:	4073      	eors	r3, r6
100140dc:	1aa6      	subs	r6, r4, r2
100140de:	46b4      	mov	ip, r6
100140e0:	4553      	cmp	r3, sl
100140e2:	d100      	bne.n	100140e6 <__aeabi_dsub+0x46>
100140e4:	e0af      	b.n	10014246 <__aeabi_dsub+0x1a6>
100140e6:	2e00      	cmp	r6, #0
100140e8:	dc00      	bgt.n	100140ec <__aeabi_dsub+0x4c>
100140ea:	e10d      	b.n	10014308 <__aeabi_dsub+0x268>
100140ec:	2a00      	cmp	r2, #0
100140ee:	d13a      	bne.n	10014166 <__aeabi_dsub+0xc6>
100140f0:	0003      	movs	r3, r0
100140f2:	430b      	orrs	r3, r1
100140f4:	d000      	beq.n	100140f8 <__aeabi_dsub+0x58>
100140f6:	e0e4      	b.n	100142c2 <__aeabi_dsub+0x222>
100140f8:	076b      	lsls	r3, r5, #29
100140fa:	d009      	beq.n	10014110 <__aeabi_dsub+0x70>
100140fc:	230f      	movs	r3, #15
100140fe:	402b      	ands	r3, r5
10014100:	2b04      	cmp	r3, #4
10014102:	d005      	beq.n	10014110 <__aeabi_dsub+0x70>
10014104:	1d2b      	adds	r3, r5, #4
10014106:	42ab      	cmp	r3, r5
10014108:	41ad      	sbcs	r5, r5
1001410a:	426d      	negs	r5, r5
1001410c:	197f      	adds	r7, r7, r5
1001410e:	001d      	movs	r5, r3
10014110:	023b      	lsls	r3, r7, #8
10014112:	d400      	bmi.n	10014116 <__aeabi_dsub+0x76>
10014114:	e088      	b.n	10014228 <__aeabi_dsub+0x188>
10014116:	4bbb      	ldr	r3, [pc, #748]	; (10014404 <__aeabi_dsub+0x364>)
10014118:	3401      	adds	r4, #1
1001411a:	429c      	cmp	r4, r3
1001411c:	d100      	bne.n	10014120 <__aeabi_dsub+0x80>
1001411e:	e110      	b.n	10014342 <__aeabi_dsub+0x2a2>
10014120:	003a      	movs	r2, r7
10014122:	4bb9      	ldr	r3, [pc, #740]	; (10014408 <__aeabi_dsub+0x368>)
10014124:	4651      	mov	r1, sl
10014126:	401a      	ands	r2, r3
10014128:	2301      	movs	r3, #1
1001412a:	0750      	lsls	r0, r2, #29
1001412c:	08ed      	lsrs	r5, r5, #3
1001412e:	0252      	lsls	r2, r2, #9
10014130:	0564      	lsls	r4, r4, #21
10014132:	4305      	orrs	r5, r0
10014134:	0b12      	lsrs	r2, r2, #12
10014136:	0d64      	lsrs	r4, r4, #21
10014138:	400b      	ands	r3, r1
1001413a:	2100      	movs	r1, #0
1001413c:	0028      	movs	r0, r5
1001413e:	0312      	lsls	r2, r2, #12
10014140:	0d0d      	lsrs	r5, r1, #20
10014142:	0b12      	lsrs	r2, r2, #12
10014144:	0564      	lsls	r4, r4, #21
10014146:	052d      	lsls	r5, r5, #20
10014148:	4315      	orrs	r5, r2
1001414a:	0862      	lsrs	r2, r4, #1
1001414c:	4caf      	ldr	r4, [pc, #700]	; (1001440c <__aeabi_dsub+0x36c>)
1001414e:	07db      	lsls	r3, r3, #31
10014150:	402c      	ands	r4, r5
10014152:	4314      	orrs	r4, r2
10014154:	0064      	lsls	r4, r4, #1
10014156:	0864      	lsrs	r4, r4, #1
10014158:	431c      	orrs	r4, r3
1001415a:	0021      	movs	r1, r4
1001415c:	bc1c      	pop	{r2, r3, r4}
1001415e:	4690      	mov	r8, r2
10014160:	4699      	mov	r9, r3
10014162:	46a2      	mov	sl, r4
10014164:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014166:	4ba7      	ldr	r3, [pc, #668]	; (10014404 <__aeabi_dsub+0x364>)
10014168:	429c      	cmp	r4, r3
1001416a:	d0c5      	beq.n	100140f8 <__aeabi_dsub+0x58>
1001416c:	2380      	movs	r3, #128	; 0x80
1001416e:	041b      	lsls	r3, r3, #16
10014170:	4318      	orrs	r0, r3
10014172:	4663      	mov	r3, ip
10014174:	2b38      	cmp	r3, #56	; 0x38
10014176:	dd00      	ble.n	1001417a <__aeabi_dsub+0xda>
10014178:	e0fd      	b.n	10014376 <__aeabi_dsub+0x2d6>
1001417a:	2b1f      	cmp	r3, #31
1001417c:	dd00      	ble.n	10014180 <__aeabi_dsub+0xe0>
1001417e:	e130      	b.n	100143e2 <__aeabi_dsub+0x342>
10014180:	4662      	mov	r2, ip
10014182:	2320      	movs	r3, #32
10014184:	1a9b      	subs	r3, r3, r2
10014186:	0002      	movs	r2, r0
10014188:	409a      	lsls	r2, r3
1001418a:	4666      	mov	r6, ip
1001418c:	4690      	mov	r8, r2
1001418e:	000a      	movs	r2, r1
10014190:	4099      	lsls	r1, r3
10014192:	40f2      	lsrs	r2, r6
10014194:	4646      	mov	r6, r8
10014196:	1e4b      	subs	r3, r1, #1
10014198:	4199      	sbcs	r1, r3
1001419a:	4332      	orrs	r2, r6
1001419c:	4311      	orrs	r1, r2
1001419e:	4663      	mov	r3, ip
100141a0:	0002      	movs	r2, r0
100141a2:	40da      	lsrs	r2, r3
100141a4:	1a69      	subs	r1, r5, r1
100141a6:	428d      	cmp	r5, r1
100141a8:	419b      	sbcs	r3, r3
100141aa:	000d      	movs	r5, r1
100141ac:	1aba      	subs	r2, r7, r2
100141ae:	425b      	negs	r3, r3
100141b0:	1ad7      	subs	r7, r2, r3
100141b2:	023b      	lsls	r3, r7, #8
100141b4:	d535      	bpl.n	10014222 <__aeabi_dsub+0x182>
100141b6:	027a      	lsls	r2, r7, #9
100141b8:	0a53      	lsrs	r3, r2, #9
100141ba:	4698      	mov	r8, r3
100141bc:	4643      	mov	r3, r8
100141be:	2b00      	cmp	r3, #0
100141c0:	d100      	bne.n	100141c4 <__aeabi_dsub+0x124>
100141c2:	e0c4      	b.n	1001434e <__aeabi_dsub+0x2ae>
100141c4:	4640      	mov	r0, r8
100141c6:	f000 fb2d 	bl	10014824 <__clzsi2>
100141ca:	0003      	movs	r3, r0
100141cc:	3b08      	subs	r3, #8
100141ce:	2b1f      	cmp	r3, #31
100141d0:	dd00      	ble.n	100141d4 <__aeabi_dsub+0x134>
100141d2:	e0c5      	b.n	10014360 <__aeabi_dsub+0x2c0>
100141d4:	2220      	movs	r2, #32
100141d6:	0029      	movs	r1, r5
100141d8:	1ad2      	subs	r2, r2, r3
100141da:	4647      	mov	r7, r8
100141dc:	40d1      	lsrs	r1, r2
100141de:	409f      	lsls	r7, r3
100141e0:	000a      	movs	r2, r1
100141e2:	409d      	lsls	r5, r3
100141e4:	433a      	orrs	r2, r7
100141e6:	429c      	cmp	r4, r3
100141e8:	dd00      	ble.n	100141ec <__aeabi_dsub+0x14c>
100141ea:	e0c0      	b.n	1001436e <__aeabi_dsub+0x2ce>
100141ec:	1b1c      	subs	r4, r3, r4
100141ee:	1c63      	adds	r3, r4, #1
100141f0:	2b1f      	cmp	r3, #31
100141f2:	dd00      	ble.n	100141f6 <__aeabi_dsub+0x156>
100141f4:	e0e4      	b.n	100143c0 <__aeabi_dsub+0x320>
100141f6:	2120      	movs	r1, #32
100141f8:	0014      	movs	r4, r2
100141fa:	0028      	movs	r0, r5
100141fc:	1ac9      	subs	r1, r1, r3
100141fe:	40d8      	lsrs	r0, r3
10014200:	408c      	lsls	r4, r1
10014202:	408d      	lsls	r5, r1
10014204:	4304      	orrs	r4, r0
10014206:	40da      	lsrs	r2, r3
10014208:	1e68      	subs	r0, r5, #1
1001420a:	4185      	sbcs	r5, r0
1001420c:	0017      	movs	r7, r2
1001420e:	4325      	orrs	r5, r4
10014210:	2400      	movs	r4, #0
10014212:	e771      	b.n	100140f8 <__aeabi_dsub+0x58>
10014214:	4642      	mov	r2, r8
10014216:	4663      	mov	r3, ip
10014218:	431a      	orrs	r2, r3
1001421a:	d100      	bne.n	1001421e <__aeabi_dsub+0x17e>
1001421c:	e24c      	b.n	100146b8 <__aeabi_dsub+0x618>
1001421e:	4667      	mov	r7, ip
10014220:	4645      	mov	r5, r8
10014222:	076b      	lsls	r3, r5, #29
10014224:	d000      	beq.n	10014228 <__aeabi_dsub+0x188>
10014226:	e769      	b.n	100140fc <__aeabi_dsub+0x5c>
10014228:	2301      	movs	r3, #1
1001422a:	4651      	mov	r1, sl
1001422c:	0778      	lsls	r0, r7, #29
1001422e:	08ed      	lsrs	r5, r5, #3
10014230:	08fa      	lsrs	r2, r7, #3
10014232:	400b      	ands	r3, r1
10014234:	4305      	orrs	r5, r0
10014236:	4973      	ldr	r1, [pc, #460]	; (10014404 <__aeabi_dsub+0x364>)
10014238:	428c      	cmp	r4, r1
1001423a:	d038      	beq.n	100142ae <__aeabi_dsub+0x20e>
1001423c:	0312      	lsls	r2, r2, #12
1001423e:	0564      	lsls	r4, r4, #21
10014240:	0b12      	lsrs	r2, r2, #12
10014242:	0d64      	lsrs	r4, r4, #21
10014244:	e779      	b.n	1001413a <__aeabi_dsub+0x9a>
10014246:	2e00      	cmp	r6, #0
10014248:	dc00      	bgt.n	1001424c <__aeabi_dsub+0x1ac>
1001424a:	e09a      	b.n	10014382 <__aeabi_dsub+0x2e2>
1001424c:	2a00      	cmp	r2, #0
1001424e:	d047      	beq.n	100142e0 <__aeabi_dsub+0x240>
10014250:	4a6c      	ldr	r2, [pc, #432]	; (10014404 <__aeabi_dsub+0x364>)
10014252:	4294      	cmp	r4, r2
10014254:	d100      	bne.n	10014258 <__aeabi_dsub+0x1b8>
10014256:	e74f      	b.n	100140f8 <__aeabi_dsub+0x58>
10014258:	2280      	movs	r2, #128	; 0x80
1001425a:	0412      	lsls	r2, r2, #16
1001425c:	4310      	orrs	r0, r2
1001425e:	4662      	mov	r2, ip
10014260:	2a38      	cmp	r2, #56	; 0x38
10014262:	dc00      	bgt.n	10014266 <__aeabi_dsub+0x1c6>
10014264:	e108      	b.n	10014478 <__aeabi_dsub+0x3d8>
10014266:	4301      	orrs	r1, r0
10014268:	1e48      	subs	r0, r1, #1
1001426a:	4181      	sbcs	r1, r0
1001426c:	2200      	movs	r2, #0
1001426e:	b2c9      	uxtb	r1, r1
10014270:	1949      	adds	r1, r1, r5
10014272:	19d2      	adds	r2, r2, r7
10014274:	42a9      	cmp	r1, r5
10014276:	41bf      	sbcs	r7, r7
10014278:	000d      	movs	r5, r1
1001427a:	427f      	negs	r7, r7
1001427c:	18bf      	adds	r7, r7, r2
1001427e:	023a      	lsls	r2, r7, #8
10014280:	d400      	bmi.n	10014284 <__aeabi_dsub+0x1e4>
10014282:	e142      	b.n	1001450a <__aeabi_dsub+0x46a>
10014284:	4a5f      	ldr	r2, [pc, #380]	; (10014404 <__aeabi_dsub+0x364>)
10014286:	3401      	adds	r4, #1
10014288:	4294      	cmp	r4, r2
1001428a:	d100      	bne.n	1001428e <__aeabi_dsub+0x1ee>
1001428c:	e14e      	b.n	1001452c <__aeabi_dsub+0x48c>
1001428e:	2001      	movs	r0, #1
10014290:	4a5d      	ldr	r2, [pc, #372]	; (10014408 <__aeabi_dsub+0x368>)
10014292:	0869      	lsrs	r1, r5, #1
10014294:	403a      	ands	r2, r7
10014296:	4028      	ands	r0, r5
10014298:	4308      	orrs	r0, r1
1001429a:	07d5      	lsls	r5, r2, #31
1001429c:	4305      	orrs	r5, r0
1001429e:	0857      	lsrs	r7, r2, #1
100142a0:	469a      	mov	sl, r3
100142a2:	e729      	b.n	100140f8 <__aeabi_dsub+0x58>
100142a4:	0006      	movs	r6, r0
100142a6:	430e      	orrs	r6, r1
100142a8:	d000      	beq.n	100142ac <__aeabi_dsub+0x20c>
100142aa:	e717      	b.n	100140dc <__aeabi_dsub+0x3c>
100142ac:	e714      	b.n	100140d8 <__aeabi_dsub+0x38>
100142ae:	0029      	movs	r1, r5
100142b0:	4311      	orrs	r1, r2
100142b2:	d100      	bne.n	100142b6 <__aeabi_dsub+0x216>
100142b4:	e1f9      	b.n	100146aa <__aeabi_dsub+0x60a>
100142b6:	2180      	movs	r1, #128	; 0x80
100142b8:	0309      	lsls	r1, r1, #12
100142ba:	430a      	orrs	r2, r1
100142bc:	0312      	lsls	r2, r2, #12
100142be:	0b12      	lsrs	r2, r2, #12
100142c0:	e73b      	b.n	1001413a <__aeabi_dsub+0x9a>
100142c2:	2301      	movs	r3, #1
100142c4:	425b      	negs	r3, r3
100142c6:	4698      	mov	r8, r3
100142c8:	44c4      	add	ip, r8
100142ca:	4663      	mov	r3, ip
100142cc:	2b00      	cmp	r3, #0
100142ce:	d172      	bne.n	100143b6 <__aeabi_dsub+0x316>
100142d0:	1a69      	subs	r1, r5, r1
100142d2:	428d      	cmp	r5, r1
100142d4:	419b      	sbcs	r3, r3
100142d6:	1a3f      	subs	r7, r7, r0
100142d8:	425b      	negs	r3, r3
100142da:	1aff      	subs	r7, r7, r3
100142dc:	000d      	movs	r5, r1
100142de:	e768      	b.n	100141b2 <__aeabi_dsub+0x112>
100142e0:	0002      	movs	r2, r0
100142e2:	430a      	orrs	r2, r1
100142e4:	d100      	bne.n	100142e8 <__aeabi_dsub+0x248>
100142e6:	e707      	b.n	100140f8 <__aeabi_dsub+0x58>
100142e8:	2201      	movs	r2, #1
100142ea:	4252      	negs	r2, r2
100142ec:	4690      	mov	r8, r2
100142ee:	44c4      	add	ip, r8
100142f0:	4662      	mov	r2, ip
100142f2:	2a00      	cmp	r2, #0
100142f4:	d000      	beq.n	100142f8 <__aeabi_dsub+0x258>
100142f6:	e0e6      	b.n	100144c6 <__aeabi_dsub+0x426>
100142f8:	1869      	adds	r1, r5, r1
100142fa:	42a9      	cmp	r1, r5
100142fc:	41b6      	sbcs	r6, r6
100142fe:	183f      	adds	r7, r7, r0
10014300:	4276      	negs	r6, r6
10014302:	19f7      	adds	r7, r6, r7
10014304:	000d      	movs	r5, r1
10014306:	e7ba      	b.n	1001427e <__aeabi_dsub+0x1de>
10014308:	2e00      	cmp	r6, #0
1001430a:	d000      	beq.n	1001430e <__aeabi_dsub+0x26e>
1001430c:	e080      	b.n	10014410 <__aeabi_dsub+0x370>
1001430e:	1c62      	adds	r2, r4, #1
10014310:	0552      	lsls	r2, r2, #21
10014312:	0d52      	lsrs	r2, r2, #21
10014314:	2a01      	cmp	r2, #1
10014316:	dc00      	bgt.n	1001431a <__aeabi_dsub+0x27a>
10014318:	e0f9      	b.n	1001450e <__aeabi_dsub+0x46e>
1001431a:	1a6a      	subs	r2, r5, r1
1001431c:	4691      	mov	r9, r2
1001431e:	454d      	cmp	r5, r9
10014320:	41b6      	sbcs	r6, r6
10014322:	1a3a      	subs	r2, r7, r0
10014324:	4276      	negs	r6, r6
10014326:	1b92      	subs	r2, r2, r6
10014328:	4690      	mov	r8, r2
1001432a:	0212      	lsls	r2, r2, #8
1001432c:	d400      	bmi.n	10014330 <__aeabi_dsub+0x290>
1001432e:	e099      	b.n	10014464 <__aeabi_dsub+0x3c4>
10014330:	1b4d      	subs	r5, r1, r5
10014332:	42a9      	cmp	r1, r5
10014334:	4189      	sbcs	r1, r1
10014336:	1bc7      	subs	r7, r0, r7
10014338:	4249      	negs	r1, r1
1001433a:	1a7a      	subs	r2, r7, r1
1001433c:	4690      	mov	r8, r2
1001433e:	469a      	mov	sl, r3
10014340:	e73c      	b.n	100141bc <__aeabi_dsub+0x11c>
10014342:	4652      	mov	r2, sl
10014344:	2301      	movs	r3, #1
10014346:	2500      	movs	r5, #0
10014348:	4013      	ands	r3, r2
1001434a:	2200      	movs	r2, #0
1001434c:	e6f5      	b.n	1001413a <__aeabi_dsub+0x9a>
1001434e:	0028      	movs	r0, r5
10014350:	f000 fa68 	bl	10014824 <__clzsi2>
10014354:	3020      	adds	r0, #32
10014356:	0003      	movs	r3, r0
10014358:	3b08      	subs	r3, #8
1001435a:	2b1f      	cmp	r3, #31
1001435c:	dc00      	bgt.n	10014360 <__aeabi_dsub+0x2c0>
1001435e:	e739      	b.n	100141d4 <__aeabi_dsub+0x134>
10014360:	002a      	movs	r2, r5
10014362:	3828      	subs	r0, #40	; 0x28
10014364:	4082      	lsls	r2, r0
10014366:	2500      	movs	r5, #0
10014368:	429c      	cmp	r4, r3
1001436a:	dc00      	bgt.n	1001436e <__aeabi_dsub+0x2ce>
1001436c:	e73e      	b.n	100141ec <__aeabi_dsub+0x14c>
1001436e:	4f26      	ldr	r7, [pc, #152]	; (10014408 <__aeabi_dsub+0x368>)
10014370:	1ae4      	subs	r4, r4, r3
10014372:	4017      	ands	r7, r2
10014374:	e6c0      	b.n	100140f8 <__aeabi_dsub+0x58>
10014376:	4301      	orrs	r1, r0
10014378:	1e48      	subs	r0, r1, #1
1001437a:	4181      	sbcs	r1, r0
1001437c:	2200      	movs	r2, #0
1001437e:	b2c9      	uxtb	r1, r1
10014380:	e710      	b.n	100141a4 <__aeabi_dsub+0x104>
10014382:	2e00      	cmp	r6, #0
10014384:	d000      	beq.n	10014388 <__aeabi_dsub+0x2e8>
10014386:	e0f1      	b.n	1001456c <__aeabi_dsub+0x4cc>
10014388:	1c62      	adds	r2, r4, #1
1001438a:	4694      	mov	ip, r2
1001438c:	0552      	lsls	r2, r2, #21
1001438e:	0d52      	lsrs	r2, r2, #21
10014390:	2a01      	cmp	r2, #1
10014392:	dc00      	bgt.n	10014396 <__aeabi_dsub+0x2f6>
10014394:	e0a0      	b.n	100144d8 <__aeabi_dsub+0x438>
10014396:	4a1b      	ldr	r2, [pc, #108]	; (10014404 <__aeabi_dsub+0x364>)
10014398:	4594      	cmp	ip, r2
1001439a:	d100      	bne.n	1001439e <__aeabi_dsub+0x2fe>
1001439c:	e0c5      	b.n	1001452a <__aeabi_dsub+0x48a>
1001439e:	1869      	adds	r1, r5, r1
100143a0:	42a9      	cmp	r1, r5
100143a2:	4192      	sbcs	r2, r2
100143a4:	183f      	adds	r7, r7, r0
100143a6:	4252      	negs	r2, r2
100143a8:	19d2      	adds	r2, r2, r7
100143aa:	0849      	lsrs	r1, r1, #1
100143ac:	07d5      	lsls	r5, r2, #31
100143ae:	430d      	orrs	r5, r1
100143b0:	0857      	lsrs	r7, r2, #1
100143b2:	4664      	mov	r4, ip
100143b4:	e6a0      	b.n	100140f8 <__aeabi_dsub+0x58>
100143b6:	4b13      	ldr	r3, [pc, #76]	; (10014404 <__aeabi_dsub+0x364>)
100143b8:	429c      	cmp	r4, r3
100143ba:	d000      	beq.n	100143be <__aeabi_dsub+0x31e>
100143bc:	e6d9      	b.n	10014172 <__aeabi_dsub+0xd2>
100143be:	e69b      	b.n	100140f8 <__aeabi_dsub+0x58>
100143c0:	0011      	movs	r1, r2
100143c2:	3c1f      	subs	r4, #31
100143c4:	40e1      	lsrs	r1, r4
100143c6:	000c      	movs	r4, r1
100143c8:	2b20      	cmp	r3, #32
100143ca:	d100      	bne.n	100143ce <__aeabi_dsub+0x32e>
100143cc:	e080      	b.n	100144d0 <__aeabi_dsub+0x430>
100143ce:	2140      	movs	r1, #64	; 0x40
100143d0:	1acb      	subs	r3, r1, r3
100143d2:	409a      	lsls	r2, r3
100143d4:	4315      	orrs	r5, r2
100143d6:	1e6a      	subs	r2, r5, #1
100143d8:	4195      	sbcs	r5, r2
100143da:	2700      	movs	r7, #0
100143dc:	4325      	orrs	r5, r4
100143de:	2400      	movs	r4, #0
100143e0:	e71f      	b.n	10014222 <__aeabi_dsub+0x182>
100143e2:	4663      	mov	r3, ip
100143e4:	0002      	movs	r2, r0
100143e6:	3b20      	subs	r3, #32
100143e8:	40da      	lsrs	r2, r3
100143ea:	4663      	mov	r3, ip
100143ec:	2b20      	cmp	r3, #32
100143ee:	d071      	beq.n	100144d4 <__aeabi_dsub+0x434>
100143f0:	2340      	movs	r3, #64	; 0x40
100143f2:	4666      	mov	r6, ip
100143f4:	1b9b      	subs	r3, r3, r6
100143f6:	4098      	lsls	r0, r3
100143f8:	4301      	orrs	r1, r0
100143fa:	1e48      	subs	r0, r1, #1
100143fc:	4181      	sbcs	r1, r0
100143fe:	4311      	orrs	r1, r2
10014400:	2200      	movs	r2, #0
10014402:	e6cf      	b.n	100141a4 <__aeabi_dsub+0x104>
10014404:	000007ff 	.word	0x000007ff
10014408:	ff7fffff 	.word	0xff7fffff
1001440c:	800fffff 	.word	0x800fffff
10014410:	2c00      	cmp	r4, #0
10014412:	d048      	beq.n	100144a6 <__aeabi_dsub+0x406>
10014414:	4cca      	ldr	r4, [pc, #808]	; (10014740 <__aeabi_dsub+0x6a0>)
10014416:	42a2      	cmp	r2, r4
10014418:	d100      	bne.n	1001441c <__aeabi_dsub+0x37c>
1001441a:	e0a2      	b.n	10014562 <__aeabi_dsub+0x4c2>
1001441c:	4274      	negs	r4, r6
1001441e:	46a1      	mov	r9, r4
10014420:	2480      	movs	r4, #128	; 0x80
10014422:	0424      	lsls	r4, r4, #16
10014424:	4327      	orrs	r7, r4
10014426:	464c      	mov	r4, r9
10014428:	2c38      	cmp	r4, #56	; 0x38
1001442a:	dd00      	ble.n	1001442e <__aeabi_dsub+0x38e>
1001442c:	e0db      	b.n	100145e6 <__aeabi_dsub+0x546>
1001442e:	2c1f      	cmp	r4, #31
10014430:	dd00      	ble.n	10014434 <__aeabi_dsub+0x394>
10014432:	e144      	b.n	100146be <__aeabi_dsub+0x61e>
10014434:	464e      	mov	r6, r9
10014436:	2420      	movs	r4, #32
10014438:	1ba4      	subs	r4, r4, r6
1001443a:	003e      	movs	r6, r7
1001443c:	40a6      	lsls	r6, r4
1001443e:	46a2      	mov	sl, r4
10014440:	46b0      	mov	r8, r6
10014442:	464c      	mov	r4, r9
10014444:	002e      	movs	r6, r5
10014446:	40e6      	lsrs	r6, r4
10014448:	46b4      	mov	ip, r6
1001444a:	4646      	mov	r6, r8
1001444c:	4664      	mov	r4, ip
1001444e:	4326      	orrs	r6, r4
10014450:	4654      	mov	r4, sl
10014452:	40a5      	lsls	r5, r4
10014454:	1e6c      	subs	r4, r5, #1
10014456:	41a5      	sbcs	r5, r4
10014458:	0034      	movs	r4, r6
1001445a:	432c      	orrs	r4, r5
1001445c:	464d      	mov	r5, r9
1001445e:	40ef      	lsrs	r7, r5
10014460:	1b0d      	subs	r5, r1, r4
10014462:	e028      	b.n	100144b6 <__aeabi_dsub+0x416>
10014464:	464a      	mov	r2, r9
10014466:	4643      	mov	r3, r8
10014468:	464d      	mov	r5, r9
1001446a:	431a      	orrs	r2, r3
1001446c:	d000      	beq.n	10014470 <__aeabi_dsub+0x3d0>
1001446e:	e6a5      	b.n	100141bc <__aeabi_dsub+0x11c>
10014470:	2300      	movs	r3, #0
10014472:	2400      	movs	r4, #0
10014474:	2500      	movs	r5, #0
10014476:	e6de      	b.n	10014236 <__aeabi_dsub+0x196>
10014478:	2a1f      	cmp	r2, #31
1001447a:	dc5a      	bgt.n	10014532 <__aeabi_dsub+0x492>
1001447c:	4666      	mov	r6, ip
1001447e:	2220      	movs	r2, #32
10014480:	1b92      	subs	r2, r2, r6
10014482:	0006      	movs	r6, r0
10014484:	4096      	lsls	r6, r2
10014486:	4691      	mov	r9, r2
10014488:	46b0      	mov	r8, r6
1001448a:	4662      	mov	r2, ip
1001448c:	000e      	movs	r6, r1
1001448e:	40d6      	lsrs	r6, r2
10014490:	4642      	mov	r2, r8
10014492:	4316      	orrs	r6, r2
10014494:	464a      	mov	r2, r9
10014496:	4091      	lsls	r1, r2
10014498:	1e4a      	subs	r2, r1, #1
1001449a:	4191      	sbcs	r1, r2
1001449c:	0002      	movs	r2, r0
1001449e:	4660      	mov	r0, ip
100144a0:	4331      	orrs	r1, r6
100144a2:	40c2      	lsrs	r2, r0
100144a4:	e6e4      	b.n	10014270 <__aeabi_dsub+0x1d0>
100144a6:	003c      	movs	r4, r7
100144a8:	432c      	orrs	r4, r5
100144aa:	d05a      	beq.n	10014562 <__aeabi_dsub+0x4c2>
100144ac:	43f4      	mvns	r4, r6
100144ae:	46a1      	mov	r9, r4
100144b0:	2c00      	cmp	r4, #0
100144b2:	d152      	bne.n	1001455a <__aeabi_dsub+0x4ba>
100144b4:	1b4d      	subs	r5, r1, r5
100144b6:	42a9      	cmp	r1, r5
100144b8:	4189      	sbcs	r1, r1
100144ba:	1bc7      	subs	r7, r0, r7
100144bc:	4249      	negs	r1, r1
100144be:	1a7f      	subs	r7, r7, r1
100144c0:	0014      	movs	r4, r2
100144c2:	469a      	mov	sl, r3
100144c4:	e675      	b.n	100141b2 <__aeabi_dsub+0x112>
100144c6:	4a9e      	ldr	r2, [pc, #632]	; (10014740 <__aeabi_dsub+0x6a0>)
100144c8:	4294      	cmp	r4, r2
100144ca:	d000      	beq.n	100144ce <__aeabi_dsub+0x42e>
100144cc:	e6c7      	b.n	1001425e <__aeabi_dsub+0x1be>
100144ce:	e613      	b.n	100140f8 <__aeabi_dsub+0x58>
100144d0:	2200      	movs	r2, #0
100144d2:	e77f      	b.n	100143d4 <__aeabi_dsub+0x334>
100144d4:	2000      	movs	r0, #0
100144d6:	e78f      	b.n	100143f8 <__aeabi_dsub+0x358>
100144d8:	2c00      	cmp	r4, #0
100144da:	d000      	beq.n	100144de <__aeabi_dsub+0x43e>
100144dc:	e0c8      	b.n	10014670 <__aeabi_dsub+0x5d0>
100144de:	003b      	movs	r3, r7
100144e0:	432b      	orrs	r3, r5
100144e2:	d100      	bne.n	100144e6 <__aeabi_dsub+0x446>
100144e4:	e10f      	b.n	10014706 <__aeabi_dsub+0x666>
100144e6:	0003      	movs	r3, r0
100144e8:	430b      	orrs	r3, r1
100144ea:	d100      	bne.n	100144ee <__aeabi_dsub+0x44e>
100144ec:	e604      	b.n	100140f8 <__aeabi_dsub+0x58>
100144ee:	1869      	adds	r1, r5, r1
100144f0:	42a9      	cmp	r1, r5
100144f2:	419b      	sbcs	r3, r3
100144f4:	183f      	adds	r7, r7, r0
100144f6:	425b      	negs	r3, r3
100144f8:	19df      	adds	r7, r3, r7
100144fa:	023b      	lsls	r3, r7, #8
100144fc:	d400      	bmi.n	10014500 <__aeabi_dsub+0x460>
100144fe:	e11a      	b.n	10014736 <__aeabi_dsub+0x696>
10014500:	4b90      	ldr	r3, [pc, #576]	; (10014744 <__aeabi_dsub+0x6a4>)
10014502:	000d      	movs	r5, r1
10014504:	401f      	ands	r7, r3
10014506:	4664      	mov	r4, ip
10014508:	e5f6      	b.n	100140f8 <__aeabi_dsub+0x58>
1001450a:	469a      	mov	sl, r3
1001450c:	e689      	b.n	10014222 <__aeabi_dsub+0x182>
1001450e:	003a      	movs	r2, r7
10014510:	432a      	orrs	r2, r5
10014512:	2c00      	cmp	r4, #0
10014514:	d15c      	bne.n	100145d0 <__aeabi_dsub+0x530>
10014516:	2a00      	cmp	r2, #0
10014518:	d175      	bne.n	10014606 <__aeabi_dsub+0x566>
1001451a:	0002      	movs	r2, r0
1001451c:	430a      	orrs	r2, r1
1001451e:	d100      	bne.n	10014522 <__aeabi_dsub+0x482>
10014520:	e0ca      	b.n	100146b8 <__aeabi_dsub+0x618>
10014522:	0007      	movs	r7, r0
10014524:	000d      	movs	r5, r1
10014526:	469a      	mov	sl, r3
10014528:	e5e6      	b.n	100140f8 <__aeabi_dsub+0x58>
1001452a:	4664      	mov	r4, ip
1001452c:	2200      	movs	r2, #0
1001452e:	2500      	movs	r5, #0
10014530:	e681      	b.n	10014236 <__aeabi_dsub+0x196>
10014532:	4662      	mov	r2, ip
10014534:	0006      	movs	r6, r0
10014536:	3a20      	subs	r2, #32
10014538:	40d6      	lsrs	r6, r2
1001453a:	4662      	mov	r2, ip
1001453c:	46b0      	mov	r8, r6
1001453e:	2a20      	cmp	r2, #32
10014540:	d100      	bne.n	10014544 <__aeabi_dsub+0x4a4>
10014542:	e0b7      	b.n	100146b4 <__aeabi_dsub+0x614>
10014544:	2240      	movs	r2, #64	; 0x40
10014546:	4666      	mov	r6, ip
10014548:	1b92      	subs	r2, r2, r6
1001454a:	4090      	lsls	r0, r2
1001454c:	4301      	orrs	r1, r0
1001454e:	4642      	mov	r2, r8
10014550:	1e48      	subs	r0, r1, #1
10014552:	4181      	sbcs	r1, r0
10014554:	4311      	orrs	r1, r2
10014556:	2200      	movs	r2, #0
10014558:	e68a      	b.n	10014270 <__aeabi_dsub+0x1d0>
1001455a:	4c79      	ldr	r4, [pc, #484]	; (10014740 <__aeabi_dsub+0x6a0>)
1001455c:	42a2      	cmp	r2, r4
1001455e:	d000      	beq.n	10014562 <__aeabi_dsub+0x4c2>
10014560:	e761      	b.n	10014426 <__aeabi_dsub+0x386>
10014562:	0007      	movs	r7, r0
10014564:	000d      	movs	r5, r1
10014566:	0014      	movs	r4, r2
10014568:	469a      	mov	sl, r3
1001456a:	e5c5      	b.n	100140f8 <__aeabi_dsub+0x58>
1001456c:	2c00      	cmp	r4, #0
1001456e:	d141      	bne.n	100145f4 <__aeabi_dsub+0x554>
10014570:	003c      	movs	r4, r7
10014572:	432c      	orrs	r4, r5
10014574:	d078      	beq.n	10014668 <__aeabi_dsub+0x5c8>
10014576:	43f4      	mvns	r4, r6
10014578:	46a1      	mov	r9, r4
1001457a:	2c00      	cmp	r4, #0
1001457c:	d020      	beq.n	100145c0 <__aeabi_dsub+0x520>
1001457e:	4c70      	ldr	r4, [pc, #448]	; (10014740 <__aeabi_dsub+0x6a0>)
10014580:	42a2      	cmp	r2, r4
10014582:	d071      	beq.n	10014668 <__aeabi_dsub+0x5c8>
10014584:	464c      	mov	r4, r9
10014586:	2c38      	cmp	r4, #56	; 0x38
10014588:	dd00      	ble.n	1001458c <__aeabi_dsub+0x4ec>
1001458a:	e0b2      	b.n	100146f2 <__aeabi_dsub+0x652>
1001458c:	2c1f      	cmp	r4, #31
1001458e:	dd00      	ble.n	10014592 <__aeabi_dsub+0x4f2>
10014590:	e0bc      	b.n	1001470c <__aeabi_dsub+0x66c>
10014592:	2620      	movs	r6, #32
10014594:	1b34      	subs	r4, r6, r4
10014596:	46a2      	mov	sl, r4
10014598:	003c      	movs	r4, r7
1001459a:	4656      	mov	r6, sl
1001459c:	40b4      	lsls	r4, r6
1001459e:	464e      	mov	r6, r9
100145a0:	46a0      	mov	r8, r4
100145a2:	002c      	movs	r4, r5
100145a4:	40f4      	lsrs	r4, r6
100145a6:	46a4      	mov	ip, r4
100145a8:	4644      	mov	r4, r8
100145aa:	4666      	mov	r6, ip
100145ac:	4334      	orrs	r4, r6
100145ae:	46a4      	mov	ip, r4
100145b0:	4654      	mov	r4, sl
100145b2:	40a5      	lsls	r5, r4
100145b4:	4664      	mov	r4, ip
100145b6:	1e6e      	subs	r6, r5, #1
100145b8:	41b5      	sbcs	r5, r6
100145ba:	4325      	orrs	r5, r4
100145bc:	464c      	mov	r4, r9
100145be:	40e7      	lsrs	r7, r4
100145c0:	186d      	adds	r5, r5, r1
100145c2:	428d      	cmp	r5, r1
100145c4:	4189      	sbcs	r1, r1
100145c6:	183f      	adds	r7, r7, r0
100145c8:	4249      	negs	r1, r1
100145ca:	19cf      	adds	r7, r1, r7
100145cc:	0014      	movs	r4, r2
100145ce:	e656      	b.n	1001427e <__aeabi_dsub+0x1de>
100145d0:	2a00      	cmp	r2, #0
100145d2:	d12f      	bne.n	10014634 <__aeabi_dsub+0x594>
100145d4:	0002      	movs	r2, r0
100145d6:	430a      	orrs	r2, r1
100145d8:	d100      	bne.n	100145dc <__aeabi_dsub+0x53c>
100145da:	e084      	b.n	100146e6 <__aeabi_dsub+0x646>
100145dc:	0007      	movs	r7, r0
100145de:	000d      	movs	r5, r1
100145e0:	469a      	mov	sl, r3
100145e2:	4c57      	ldr	r4, [pc, #348]	; (10014740 <__aeabi_dsub+0x6a0>)
100145e4:	e588      	b.n	100140f8 <__aeabi_dsub+0x58>
100145e6:	433d      	orrs	r5, r7
100145e8:	1e6f      	subs	r7, r5, #1
100145ea:	41bd      	sbcs	r5, r7
100145ec:	b2ec      	uxtb	r4, r5
100145ee:	2700      	movs	r7, #0
100145f0:	1b0d      	subs	r5, r1, r4
100145f2:	e760      	b.n	100144b6 <__aeabi_dsub+0x416>
100145f4:	4c52      	ldr	r4, [pc, #328]	; (10014740 <__aeabi_dsub+0x6a0>)
100145f6:	42a2      	cmp	r2, r4
100145f8:	d036      	beq.n	10014668 <__aeabi_dsub+0x5c8>
100145fa:	4274      	negs	r4, r6
100145fc:	2680      	movs	r6, #128	; 0x80
100145fe:	0436      	lsls	r6, r6, #16
10014600:	46a1      	mov	r9, r4
10014602:	4337      	orrs	r7, r6
10014604:	e7be      	b.n	10014584 <__aeabi_dsub+0x4e4>
10014606:	0002      	movs	r2, r0
10014608:	430a      	orrs	r2, r1
1001460a:	d100      	bne.n	1001460e <__aeabi_dsub+0x56e>
1001460c:	e574      	b.n	100140f8 <__aeabi_dsub+0x58>
1001460e:	1a6a      	subs	r2, r5, r1
10014610:	4690      	mov	r8, r2
10014612:	4545      	cmp	r5, r8
10014614:	41b6      	sbcs	r6, r6
10014616:	1a3a      	subs	r2, r7, r0
10014618:	4276      	negs	r6, r6
1001461a:	1b92      	subs	r2, r2, r6
1001461c:	4694      	mov	ip, r2
1001461e:	0212      	lsls	r2, r2, #8
10014620:	d400      	bmi.n	10014624 <__aeabi_dsub+0x584>
10014622:	e5f7      	b.n	10014214 <__aeabi_dsub+0x174>
10014624:	1b4d      	subs	r5, r1, r5
10014626:	42a9      	cmp	r1, r5
10014628:	4189      	sbcs	r1, r1
1001462a:	1bc7      	subs	r7, r0, r7
1001462c:	4249      	negs	r1, r1
1001462e:	1a7f      	subs	r7, r7, r1
10014630:	469a      	mov	sl, r3
10014632:	e561      	b.n	100140f8 <__aeabi_dsub+0x58>
10014634:	0002      	movs	r2, r0
10014636:	430a      	orrs	r2, r1
10014638:	d03a      	beq.n	100146b0 <__aeabi_dsub+0x610>
1001463a:	08ed      	lsrs	r5, r5, #3
1001463c:	077c      	lsls	r4, r7, #29
1001463e:	432c      	orrs	r4, r5
10014640:	2580      	movs	r5, #128	; 0x80
10014642:	08fa      	lsrs	r2, r7, #3
10014644:	032d      	lsls	r5, r5, #12
10014646:	422a      	tst	r2, r5
10014648:	d008      	beq.n	1001465c <__aeabi_dsub+0x5bc>
1001464a:	08c7      	lsrs	r7, r0, #3
1001464c:	422f      	tst	r7, r5
1001464e:	d105      	bne.n	1001465c <__aeabi_dsub+0x5bc>
10014650:	0745      	lsls	r5, r0, #29
10014652:	002c      	movs	r4, r5
10014654:	003a      	movs	r2, r7
10014656:	469a      	mov	sl, r3
10014658:	08c9      	lsrs	r1, r1, #3
1001465a:	430c      	orrs	r4, r1
1001465c:	0f67      	lsrs	r7, r4, #29
1001465e:	00d2      	lsls	r2, r2, #3
10014660:	00e5      	lsls	r5, r4, #3
10014662:	4317      	orrs	r7, r2
10014664:	4c36      	ldr	r4, [pc, #216]	; (10014740 <__aeabi_dsub+0x6a0>)
10014666:	e547      	b.n	100140f8 <__aeabi_dsub+0x58>
10014668:	0007      	movs	r7, r0
1001466a:	000d      	movs	r5, r1
1001466c:	0014      	movs	r4, r2
1001466e:	e543      	b.n	100140f8 <__aeabi_dsub+0x58>
10014670:	003a      	movs	r2, r7
10014672:	432a      	orrs	r2, r5
10014674:	d043      	beq.n	100146fe <__aeabi_dsub+0x65e>
10014676:	0002      	movs	r2, r0
10014678:	430a      	orrs	r2, r1
1001467a:	d019      	beq.n	100146b0 <__aeabi_dsub+0x610>
1001467c:	08ed      	lsrs	r5, r5, #3
1001467e:	077c      	lsls	r4, r7, #29
10014680:	432c      	orrs	r4, r5
10014682:	2580      	movs	r5, #128	; 0x80
10014684:	08fa      	lsrs	r2, r7, #3
10014686:	032d      	lsls	r5, r5, #12
10014688:	422a      	tst	r2, r5
1001468a:	d007      	beq.n	1001469c <__aeabi_dsub+0x5fc>
1001468c:	08c6      	lsrs	r6, r0, #3
1001468e:	422e      	tst	r6, r5
10014690:	d104      	bne.n	1001469c <__aeabi_dsub+0x5fc>
10014692:	0747      	lsls	r7, r0, #29
10014694:	003c      	movs	r4, r7
10014696:	0032      	movs	r2, r6
10014698:	08c9      	lsrs	r1, r1, #3
1001469a:	430c      	orrs	r4, r1
1001469c:	00d7      	lsls	r7, r2, #3
1001469e:	0f62      	lsrs	r2, r4, #29
100146a0:	00e5      	lsls	r5, r4, #3
100146a2:	4317      	orrs	r7, r2
100146a4:	469a      	mov	sl, r3
100146a6:	4c26      	ldr	r4, [pc, #152]	; (10014740 <__aeabi_dsub+0x6a0>)
100146a8:	e526      	b.n	100140f8 <__aeabi_dsub+0x58>
100146aa:	2200      	movs	r2, #0
100146ac:	2500      	movs	r5, #0
100146ae:	e544      	b.n	1001413a <__aeabi_dsub+0x9a>
100146b0:	4c23      	ldr	r4, [pc, #140]	; (10014740 <__aeabi_dsub+0x6a0>)
100146b2:	e521      	b.n	100140f8 <__aeabi_dsub+0x58>
100146b4:	2000      	movs	r0, #0
100146b6:	e749      	b.n	1001454c <__aeabi_dsub+0x4ac>
100146b8:	2300      	movs	r3, #0
100146ba:	2500      	movs	r5, #0
100146bc:	e5bb      	b.n	10014236 <__aeabi_dsub+0x196>
100146be:	464c      	mov	r4, r9
100146c0:	003e      	movs	r6, r7
100146c2:	3c20      	subs	r4, #32
100146c4:	40e6      	lsrs	r6, r4
100146c6:	464c      	mov	r4, r9
100146c8:	46b4      	mov	ip, r6
100146ca:	2c20      	cmp	r4, #32
100146cc:	d031      	beq.n	10014732 <__aeabi_dsub+0x692>
100146ce:	2440      	movs	r4, #64	; 0x40
100146d0:	464e      	mov	r6, r9
100146d2:	1ba6      	subs	r6, r4, r6
100146d4:	40b7      	lsls	r7, r6
100146d6:	433d      	orrs	r5, r7
100146d8:	1e6c      	subs	r4, r5, #1
100146da:	41a5      	sbcs	r5, r4
100146dc:	4664      	mov	r4, ip
100146de:	432c      	orrs	r4, r5
100146e0:	2700      	movs	r7, #0
100146e2:	1b0d      	subs	r5, r1, r4
100146e4:	e6e7      	b.n	100144b6 <__aeabi_dsub+0x416>
100146e6:	2280      	movs	r2, #128	; 0x80
100146e8:	2300      	movs	r3, #0
100146ea:	0312      	lsls	r2, r2, #12
100146ec:	4c14      	ldr	r4, [pc, #80]	; (10014740 <__aeabi_dsub+0x6a0>)
100146ee:	2500      	movs	r5, #0
100146f0:	e5a1      	b.n	10014236 <__aeabi_dsub+0x196>
100146f2:	433d      	orrs	r5, r7
100146f4:	1e6f      	subs	r7, r5, #1
100146f6:	41bd      	sbcs	r5, r7
100146f8:	2700      	movs	r7, #0
100146fa:	b2ed      	uxtb	r5, r5
100146fc:	e760      	b.n	100145c0 <__aeabi_dsub+0x520>
100146fe:	0007      	movs	r7, r0
10014700:	000d      	movs	r5, r1
10014702:	4c0f      	ldr	r4, [pc, #60]	; (10014740 <__aeabi_dsub+0x6a0>)
10014704:	e4f8      	b.n	100140f8 <__aeabi_dsub+0x58>
10014706:	0007      	movs	r7, r0
10014708:	000d      	movs	r5, r1
1001470a:	e4f5      	b.n	100140f8 <__aeabi_dsub+0x58>
1001470c:	464e      	mov	r6, r9
1001470e:	003c      	movs	r4, r7
10014710:	3e20      	subs	r6, #32
10014712:	40f4      	lsrs	r4, r6
10014714:	46a0      	mov	r8, r4
10014716:	464c      	mov	r4, r9
10014718:	2c20      	cmp	r4, #32
1001471a:	d00e      	beq.n	1001473a <__aeabi_dsub+0x69a>
1001471c:	2440      	movs	r4, #64	; 0x40
1001471e:	464e      	mov	r6, r9
10014720:	1ba4      	subs	r4, r4, r6
10014722:	40a7      	lsls	r7, r4
10014724:	433d      	orrs	r5, r7
10014726:	1e6f      	subs	r7, r5, #1
10014728:	41bd      	sbcs	r5, r7
1001472a:	4644      	mov	r4, r8
1001472c:	2700      	movs	r7, #0
1001472e:	4325      	orrs	r5, r4
10014730:	e746      	b.n	100145c0 <__aeabi_dsub+0x520>
10014732:	2700      	movs	r7, #0
10014734:	e7cf      	b.n	100146d6 <__aeabi_dsub+0x636>
10014736:	000d      	movs	r5, r1
10014738:	e573      	b.n	10014222 <__aeabi_dsub+0x182>
1001473a:	2700      	movs	r7, #0
1001473c:	e7f2      	b.n	10014724 <__aeabi_dsub+0x684>
1001473e:	46c0      	nop			; (mov r8, r8)
10014740:	000007ff 	.word	0x000007ff
10014744:	ff7fffff 	.word	0xff7fffff

10014748 <__aeabi_d2iz>:
10014748:	030b      	lsls	r3, r1, #12
1001474a:	b530      	push	{r4, r5, lr}
1001474c:	4d13      	ldr	r5, [pc, #76]	; (1001479c <__aeabi_d2iz+0x54>)
1001474e:	0b1a      	lsrs	r2, r3, #12
10014750:	004b      	lsls	r3, r1, #1
10014752:	0d5b      	lsrs	r3, r3, #21
10014754:	0fc9      	lsrs	r1, r1, #31
10014756:	2400      	movs	r4, #0
10014758:	42ab      	cmp	r3, r5
1001475a:	dd11      	ble.n	10014780 <__aeabi_d2iz+0x38>
1001475c:	4c10      	ldr	r4, [pc, #64]	; (100147a0 <__aeabi_d2iz+0x58>)
1001475e:	42a3      	cmp	r3, r4
10014760:	dc10      	bgt.n	10014784 <__aeabi_d2iz+0x3c>
10014762:	2480      	movs	r4, #128	; 0x80
10014764:	0364      	lsls	r4, r4, #13
10014766:	4322      	orrs	r2, r4
10014768:	4c0e      	ldr	r4, [pc, #56]	; (100147a4 <__aeabi_d2iz+0x5c>)
1001476a:	1ae4      	subs	r4, r4, r3
1001476c:	2c1f      	cmp	r4, #31
1001476e:	dd0c      	ble.n	1001478a <__aeabi_d2iz+0x42>
10014770:	480d      	ldr	r0, [pc, #52]	; (100147a8 <__aeabi_d2iz+0x60>)
10014772:	1ac3      	subs	r3, r0, r3
10014774:	40da      	lsrs	r2, r3
10014776:	0013      	movs	r3, r2
10014778:	425c      	negs	r4, r3
1001477a:	2900      	cmp	r1, #0
1001477c:	d100      	bne.n	10014780 <__aeabi_d2iz+0x38>
1001477e:	001c      	movs	r4, r3
10014780:	0020      	movs	r0, r4
10014782:	bd30      	pop	{r4, r5, pc}
10014784:	4b09      	ldr	r3, [pc, #36]	; (100147ac <__aeabi_d2iz+0x64>)
10014786:	18cc      	adds	r4, r1, r3
10014788:	e7fa      	b.n	10014780 <__aeabi_d2iz+0x38>
1001478a:	40e0      	lsrs	r0, r4
1001478c:	4c08      	ldr	r4, [pc, #32]	; (100147b0 <__aeabi_d2iz+0x68>)
1001478e:	46a4      	mov	ip, r4
10014790:	4463      	add	r3, ip
10014792:	409a      	lsls	r2, r3
10014794:	0013      	movs	r3, r2
10014796:	4303      	orrs	r3, r0
10014798:	e7ee      	b.n	10014778 <__aeabi_d2iz+0x30>
1001479a:	46c0      	nop			; (mov r8, r8)
1001479c:	000003fe 	.word	0x000003fe
100147a0:	0000041d 	.word	0x0000041d
100147a4:	00000433 	.word	0x00000433
100147a8:	00000413 	.word	0x00000413
100147ac:	7fffffff 	.word	0x7fffffff
100147b0:	fffffbed 	.word	0xfffffbed

100147b4 <__aeabi_ui2d>:
100147b4:	b570      	push	{r4, r5, r6, lr}
100147b6:	1e05      	subs	r5, r0, #0
100147b8:	d028      	beq.n	1001480c <__aeabi_ui2d+0x58>
100147ba:	f000 f833 	bl	10014824 <__clzsi2>
100147be:	4b15      	ldr	r3, [pc, #84]	; (10014814 <__aeabi_ui2d+0x60>)
100147c0:	4a15      	ldr	r2, [pc, #84]	; (10014818 <__aeabi_ui2d+0x64>)
100147c2:	1a1b      	subs	r3, r3, r0
100147c4:	1ad2      	subs	r2, r2, r3
100147c6:	2a1f      	cmp	r2, #31
100147c8:	dd16      	ble.n	100147f8 <__aeabi_ui2d+0x44>
100147ca:	002c      	movs	r4, r5
100147cc:	4a13      	ldr	r2, [pc, #76]	; (1001481c <__aeabi_ui2d+0x68>)
100147ce:	2500      	movs	r5, #0
100147d0:	1ad2      	subs	r2, r2, r3
100147d2:	4094      	lsls	r4, r2
100147d4:	055a      	lsls	r2, r3, #21
100147d6:	0324      	lsls	r4, r4, #12
100147d8:	0b24      	lsrs	r4, r4, #12
100147da:	0d52      	lsrs	r2, r2, #21
100147dc:	2100      	movs	r1, #0
100147de:	0324      	lsls	r4, r4, #12
100147e0:	0d0b      	lsrs	r3, r1, #20
100147e2:	0b24      	lsrs	r4, r4, #12
100147e4:	051b      	lsls	r3, r3, #20
100147e6:	4323      	orrs	r3, r4
100147e8:	4c0d      	ldr	r4, [pc, #52]	; (10014820 <__aeabi_ui2d+0x6c>)
100147ea:	0512      	lsls	r2, r2, #20
100147ec:	4023      	ands	r3, r4
100147ee:	4313      	orrs	r3, r2
100147f0:	005b      	lsls	r3, r3, #1
100147f2:	0028      	movs	r0, r5
100147f4:	0859      	lsrs	r1, r3, #1
100147f6:	bd70      	pop	{r4, r5, r6, pc}
100147f8:	210b      	movs	r1, #11
100147fa:	002c      	movs	r4, r5
100147fc:	1a08      	subs	r0, r1, r0
100147fe:	40c4      	lsrs	r4, r0
10014800:	4095      	lsls	r5, r2
10014802:	0324      	lsls	r4, r4, #12
10014804:	055a      	lsls	r2, r3, #21
10014806:	0b24      	lsrs	r4, r4, #12
10014808:	0d52      	lsrs	r2, r2, #21
1001480a:	e7e7      	b.n	100147dc <__aeabi_ui2d+0x28>
1001480c:	2200      	movs	r2, #0
1001480e:	2400      	movs	r4, #0
10014810:	e7e4      	b.n	100147dc <__aeabi_ui2d+0x28>
10014812:	46c0      	nop			; (mov r8, r8)
10014814:	0000041e 	.word	0x0000041e
10014818:	00000433 	.word	0x00000433
1001481c:	00000413 	.word	0x00000413
10014820:	800fffff 	.word	0x800fffff

10014824 <__clzsi2>:
10014824:	211c      	movs	r1, #28
10014826:	2301      	movs	r3, #1
10014828:	041b      	lsls	r3, r3, #16
1001482a:	4298      	cmp	r0, r3
1001482c:	d301      	bcc.n	10014832 <__clzsi2+0xe>
1001482e:	0c00      	lsrs	r0, r0, #16
10014830:	3910      	subs	r1, #16
10014832:	0a1b      	lsrs	r3, r3, #8
10014834:	4298      	cmp	r0, r3
10014836:	d301      	bcc.n	1001483c <__clzsi2+0x18>
10014838:	0a00      	lsrs	r0, r0, #8
1001483a:	3908      	subs	r1, #8
1001483c:	091b      	lsrs	r3, r3, #4
1001483e:	4298      	cmp	r0, r3
10014840:	d301      	bcc.n	10014846 <__clzsi2+0x22>
10014842:	0900      	lsrs	r0, r0, #4
10014844:	3904      	subs	r1, #4
10014846:	a202      	add	r2, pc, #8	; (adr r2, 10014850 <__clzsi2+0x2c>)
10014848:	5c10      	ldrb	r0, [r2, r0]
1001484a:	1840      	adds	r0, r0, r1
1001484c:	4770      	bx	lr
1001484e:	46c0      	nop			; (mov r8, r8)
10014850:	02020304 	.word	0x02020304
10014854:	01010101 	.word	0x01010101
	...

10014860 <__libc_init_array>:
10014860:	4b0e      	ldr	r3, [pc, #56]	; (1001489c <__libc_init_array+0x3c>)
10014862:	b570      	push	{r4, r5, r6, lr}
10014864:	2500      	movs	r5, #0
10014866:	001e      	movs	r6, r3
10014868:	4c0d      	ldr	r4, [pc, #52]	; (100148a0 <__libc_init_array+0x40>)
1001486a:	1ae4      	subs	r4, r4, r3
1001486c:	10a4      	asrs	r4, r4, #2
1001486e:	42a5      	cmp	r5, r4
10014870:	d004      	beq.n	1001487c <__libc_init_array+0x1c>
10014872:	00ab      	lsls	r3, r5, #2
10014874:	58f3      	ldr	r3, [r6, r3]
10014876:	4798      	blx	r3
10014878:	3501      	adds	r5, #1
1001487a:	e7f8      	b.n	1001486e <__libc_init_array+0xe>
1001487c:	f002 fbe0 	bl	10017040 <_init>
10014880:	4b08      	ldr	r3, [pc, #32]	; (100148a4 <__libc_init_array+0x44>)
10014882:	2500      	movs	r5, #0
10014884:	001e      	movs	r6, r3
10014886:	4c08      	ldr	r4, [pc, #32]	; (100148a8 <__libc_init_array+0x48>)
10014888:	1ae4      	subs	r4, r4, r3
1001488a:	10a4      	asrs	r4, r4, #2
1001488c:	42a5      	cmp	r5, r4
1001488e:	d004      	beq.n	1001489a <__libc_init_array+0x3a>
10014890:	00ab      	lsls	r3, r5, #2
10014892:	58f3      	ldr	r3, [r6, r3]
10014894:	4798      	blx	r3
10014896:	3501      	adds	r5, #1
10014898:	e7f8      	b.n	1001488c <__libc_init_array+0x2c>
1001489a:	bd70      	pop	{r4, r5, r6, pc}
1001489c:	1001704c 	.word	0x1001704c
100148a0:	1001704c 	.word	0x1001704c
100148a4:	1001704c 	.word	0x1001704c
100148a8:	10017050 	.word	0x10017050

100148ac <malloc>:
100148ac:	b510      	push	{r4, lr}
100148ae:	4b03      	ldr	r3, [pc, #12]	; (100148bc <malloc+0x10>)
100148b0:	0001      	movs	r1, r0
100148b2:	6818      	ldr	r0, [r3, #0]
100148b4:	f000 f86a 	bl	1001498c <_malloc_r>
100148b8:	bd10      	pop	{r4, pc}
100148ba:	46c0      	nop			; (mov r8, r8)
100148bc:	10017108 	.word	0x10017108

100148c0 <memcmp>:
100148c0:	b530      	push	{r4, r5, lr}
100148c2:	2400      	movs	r4, #0
100148c4:	42a2      	cmp	r2, r4
100148c6:	d008      	beq.n	100148da <memcmp+0x1a>
100148c8:	5d03      	ldrb	r3, [r0, r4]
100148ca:	1c65      	adds	r5, r4, #1
100148cc:	5d0c      	ldrb	r4, [r1, r4]
100148ce:	42a3      	cmp	r3, r4
100148d0:	d001      	beq.n	100148d6 <memcmp+0x16>
100148d2:	1b18      	subs	r0, r3, r4
100148d4:	e002      	b.n	100148dc <memcmp+0x1c>
100148d6:	002c      	movs	r4, r5
100148d8:	e7f4      	b.n	100148c4 <memcmp+0x4>
100148da:	2000      	movs	r0, #0
100148dc:	bd30      	pop	{r4, r5, pc}

100148de <memcpy>:
100148de:	2300      	movs	r3, #0
100148e0:	b510      	push	{r4, lr}
100148e2:	429a      	cmp	r2, r3
100148e4:	d003      	beq.n	100148ee <memcpy+0x10>
100148e6:	5ccc      	ldrb	r4, [r1, r3]
100148e8:	54c4      	strb	r4, [r0, r3]
100148ea:	3301      	adds	r3, #1
100148ec:	e7f9      	b.n	100148e2 <memcpy+0x4>
100148ee:	bd10      	pop	{r4, pc}

100148f0 <memset>:
100148f0:	0003      	movs	r3, r0
100148f2:	1882      	adds	r2, r0, r2
100148f4:	4293      	cmp	r3, r2
100148f6:	d002      	beq.n	100148fe <memset+0xe>
100148f8:	7019      	strb	r1, [r3, #0]
100148fa:	3301      	adds	r3, #1
100148fc:	e7fa      	b.n	100148f4 <memset+0x4>
100148fe:	4770      	bx	lr

10014900 <_free_r>:
10014900:	b530      	push	{r4, r5, lr}
10014902:	2900      	cmp	r1, #0
10014904:	d03e      	beq.n	10014984 <_free_r+0x84>
10014906:	3904      	subs	r1, #4
10014908:	680b      	ldr	r3, [r1, #0]
1001490a:	2b00      	cmp	r3, #0
1001490c:	da00      	bge.n	10014910 <_free_r+0x10>
1001490e:	18c9      	adds	r1, r1, r3
10014910:	4a1d      	ldr	r2, [pc, #116]	; (10014988 <_free_r+0x88>)
10014912:	6813      	ldr	r3, [r2, #0]
10014914:	0014      	movs	r4, r2
10014916:	2b00      	cmp	r3, #0
10014918:	d102      	bne.n	10014920 <_free_r+0x20>
1001491a:	604b      	str	r3, [r1, #4]
1001491c:	6011      	str	r1, [r2, #0]
1001491e:	e031      	b.n	10014984 <_free_r+0x84>
10014920:	428b      	cmp	r3, r1
10014922:	d90d      	bls.n	10014940 <_free_r+0x40>
10014924:	680a      	ldr	r2, [r1, #0]
10014926:	1888      	adds	r0, r1, r2
10014928:	4283      	cmp	r3, r0
1001492a:	d103      	bne.n	10014934 <_free_r+0x34>
1001492c:	6818      	ldr	r0, [r3, #0]
1001492e:	685b      	ldr	r3, [r3, #4]
10014930:	1882      	adds	r2, r0, r2
10014932:	600a      	str	r2, [r1, #0]
10014934:	604b      	str	r3, [r1, #4]
10014936:	6021      	str	r1, [r4, #0]
10014938:	e024      	b.n	10014984 <_free_r+0x84>
1001493a:	428a      	cmp	r2, r1
1001493c:	d803      	bhi.n	10014946 <_free_r+0x46>
1001493e:	0013      	movs	r3, r2
10014940:	685a      	ldr	r2, [r3, #4]
10014942:	2a00      	cmp	r2, #0
10014944:	d1f9      	bne.n	1001493a <_free_r+0x3a>
10014946:	681d      	ldr	r5, [r3, #0]
10014948:	195c      	adds	r4, r3, r5
1001494a:	428c      	cmp	r4, r1
1001494c:	d10b      	bne.n	10014966 <_free_r+0x66>
1001494e:	6809      	ldr	r1, [r1, #0]
10014950:	1869      	adds	r1, r5, r1
10014952:	1858      	adds	r0, r3, r1
10014954:	6019      	str	r1, [r3, #0]
10014956:	4282      	cmp	r2, r0
10014958:	d114      	bne.n	10014984 <_free_r+0x84>
1001495a:	6810      	ldr	r0, [r2, #0]
1001495c:	6852      	ldr	r2, [r2, #4]
1001495e:	1841      	adds	r1, r0, r1
10014960:	6019      	str	r1, [r3, #0]
10014962:	605a      	str	r2, [r3, #4]
10014964:	e00e      	b.n	10014984 <_free_r+0x84>
10014966:	428c      	cmp	r4, r1
10014968:	d902      	bls.n	10014970 <_free_r+0x70>
1001496a:	230c      	movs	r3, #12
1001496c:	6003      	str	r3, [r0, #0]
1001496e:	e009      	b.n	10014984 <_free_r+0x84>
10014970:	6808      	ldr	r0, [r1, #0]
10014972:	180c      	adds	r4, r1, r0
10014974:	42a2      	cmp	r2, r4
10014976:	d103      	bne.n	10014980 <_free_r+0x80>
10014978:	6814      	ldr	r4, [r2, #0]
1001497a:	6852      	ldr	r2, [r2, #4]
1001497c:	1820      	adds	r0, r4, r0
1001497e:	6008      	str	r0, [r1, #0]
10014980:	604a      	str	r2, [r1, #4]
10014982:	6059      	str	r1, [r3, #4]
10014984:	bd30      	pop	{r4, r5, pc}
10014986:	46c0      	nop			; (mov r8, r8)
10014988:	10018bdc 	.word	0x10018bdc

1001498c <_malloc_r>:
1001498c:	2303      	movs	r3, #3
1001498e:	b570      	push	{r4, r5, r6, lr}
10014990:	1ccd      	adds	r5, r1, #3
10014992:	439d      	bics	r5, r3
10014994:	3508      	adds	r5, #8
10014996:	0006      	movs	r6, r0
10014998:	2d0c      	cmp	r5, #12
1001499a:	d201      	bcs.n	100149a0 <_malloc_r+0x14>
1001499c:	250c      	movs	r5, #12
1001499e:	e005      	b.n	100149ac <_malloc_r+0x20>
100149a0:	2d00      	cmp	r5, #0
100149a2:	da03      	bge.n	100149ac <_malloc_r+0x20>
100149a4:	230c      	movs	r3, #12
100149a6:	2000      	movs	r0, #0
100149a8:	6033      	str	r3, [r6, #0]
100149aa:	e040      	b.n	10014a2e <_malloc_r+0xa2>
100149ac:	42a9      	cmp	r1, r5
100149ae:	d8f9      	bhi.n	100149a4 <_malloc_r+0x18>
100149b0:	4b1f      	ldr	r3, [pc, #124]	; (10014a30 <_malloc_r+0xa4>)
100149b2:	681c      	ldr	r4, [r3, #0]
100149b4:	001a      	movs	r2, r3
100149b6:	0021      	movs	r1, r4
100149b8:	2900      	cmp	r1, #0
100149ba:	d013      	beq.n	100149e4 <_malloc_r+0x58>
100149bc:	680b      	ldr	r3, [r1, #0]
100149be:	1b5b      	subs	r3, r3, r5
100149c0:	d40d      	bmi.n	100149de <_malloc_r+0x52>
100149c2:	2b0b      	cmp	r3, #11
100149c4:	d902      	bls.n	100149cc <_malloc_r+0x40>
100149c6:	600b      	str	r3, [r1, #0]
100149c8:	18cc      	adds	r4, r1, r3
100149ca:	e01e      	b.n	10014a0a <_malloc_r+0x7e>
100149cc:	428c      	cmp	r4, r1
100149ce:	d102      	bne.n	100149d6 <_malloc_r+0x4a>
100149d0:	6863      	ldr	r3, [r4, #4]
100149d2:	6013      	str	r3, [r2, #0]
100149d4:	e01a      	b.n	10014a0c <_malloc_r+0x80>
100149d6:	684b      	ldr	r3, [r1, #4]
100149d8:	6063      	str	r3, [r4, #4]
100149da:	000c      	movs	r4, r1
100149dc:	e016      	b.n	10014a0c <_malloc_r+0x80>
100149de:	000c      	movs	r4, r1
100149e0:	6849      	ldr	r1, [r1, #4]
100149e2:	e7e9      	b.n	100149b8 <_malloc_r+0x2c>
100149e4:	4c13      	ldr	r4, [pc, #76]	; (10014a34 <_malloc_r+0xa8>)
100149e6:	6823      	ldr	r3, [r4, #0]
100149e8:	2b00      	cmp	r3, #0
100149ea:	d103      	bne.n	100149f4 <_malloc_r+0x68>
100149ec:	0030      	movs	r0, r6
100149ee:	f000 f8f9 	bl	10014be4 <_sbrk_r>
100149f2:	6020      	str	r0, [r4, #0]
100149f4:	0029      	movs	r1, r5
100149f6:	0030      	movs	r0, r6
100149f8:	f000 f8f4 	bl	10014be4 <_sbrk_r>
100149fc:	1c43      	adds	r3, r0, #1
100149fe:	d0d1      	beq.n	100149a4 <_malloc_r+0x18>
10014a00:	2303      	movs	r3, #3
10014a02:	1cc4      	adds	r4, r0, #3
10014a04:	439c      	bics	r4, r3
10014a06:	42a0      	cmp	r0, r4
10014a08:	d10a      	bne.n	10014a20 <_malloc_r+0x94>
10014a0a:	6025      	str	r5, [r4, #0]
10014a0c:	0020      	movs	r0, r4
10014a0e:	2207      	movs	r2, #7
10014a10:	300b      	adds	r0, #11
10014a12:	1d23      	adds	r3, r4, #4
10014a14:	4390      	bics	r0, r2
10014a16:	1ac3      	subs	r3, r0, r3
10014a18:	d009      	beq.n	10014a2e <_malloc_r+0xa2>
10014a1a:	425a      	negs	r2, r3
10014a1c:	50e2      	str	r2, [r4, r3]
10014a1e:	e006      	b.n	10014a2e <_malloc_r+0xa2>
10014a20:	1a21      	subs	r1, r4, r0
10014a22:	0030      	movs	r0, r6
10014a24:	f000 f8de 	bl	10014be4 <_sbrk_r>
10014a28:	1c43      	adds	r3, r0, #1
10014a2a:	d1ee      	bne.n	10014a0a <_malloc_r+0x7e>
10014a2c:	e7ba      	b.n	100149a4 <_malloc_r+0x18>
10014a2e:	bd70      	pop	{r4, r5, r6, pc}
10014a30:	10018bdc 	.word	0x10018bdc
10014a34:	10018bd8 	.word	0x10018bd8

10014a38 <iprintf>:
10014a38:	b40f      	push	{r0, r1, r2, r3}
10014a3a:	4b0b      	ldr	r3, [pc, #44]	; (10014a68 <iprintf+0x30>)
10014a3c:	b513      	push	{r0, r1, r4, lr}
10014a3e:	681c      	ldr	r4, [r3, #0]
10014a40:	2c00      	cmp	r4, #0
10014a42:	d005      	beq.n	10014a50 <iprintf+0x18>
10014a44:	69a3      	ldr	r3, [r4, #24]
10014a46:	2b00      	cmp	r3, #0
10014a48:	d102      	bne.n	10014a50 <iprintf+0x18>
10014a4a:	0020      	movs	r0, r4
10014a4c:	f000 fb58 	bl	10015100 <__sinit>
10014a50:	ab05      	add	r3, sp, #20
10014a52:	9a04      	ldr	r2, [sp, #16]
10014a54:	68a1      	ldr	r1, [r4, #8]
10014a56:	0020      	movs	r0, r4
10014a58:	9301      	str	r3, [sp, #4]
10014a5a:	f000 fc71 	bl	10015340 <_vfiprintf_r>
10014a5e:	bc16      	pop	{r1, r2, r4}
10014a60:	bc08      	pop	{r3}
10014a62:	b004      	add	sp, #16
10014a64:	4718      	bx	r3
10014a66:	46c0      	nop			; (mov r8, r8)
10014a68:	10017108 	.word	0x10017108

10014a6c <putchar>:
10014a6c:	4b08      	ldr	r3, [pc, #32]	; (10014a90 <putchar+0x24>)
10014a6e:	b570      	push	{r4, r5, r6, lr}
10014a70:	681c      	ldr	r4, [r3, #0]
10014a72:	0005      	movs	r5, r0
10014a74:	2c00      	cmp	r4, #0
10014a76:	d005      	beq.n	10014a84 <putchar+0x18>
10014a78:	69a3      	ldr	r3, [r4, #24]
10014a7a:	2b00      	cmp	r3, #0
10014a7c:	d102      	bne.n	10014a84 <putchar+0x18>
10014a7e:	0020      	movs	r0, r4
10014a80:	f000 fb3e 	bl	10015100 <__sinit>
10014a84:	0029      	movs	r1, r5
10014a86:	68a2      	ldr	r2, [r4, #8]
10014a88:	0020      	movs	r0, r4
10014a8a:	f000 ff05 	bl	10015898 <_putc_r>
10014a8e:	bd70      	pop	{r4, r5, r6, pc}
10014a90:	10017108 	.word	0x10017108

10014a94 <_puts_r>:
10014a94:	b570      	push	{r4, r5, r6, lr}
10014a96:	0005      	movs	r5, r0
10014a98:	000e      	movs	r6, r1
10014a9a:	2800      	cmp	r0, #0
10014a9c:	d004      	beq.n	10014aa8 <_puts_r+0x14>
10014a9e:	6983      	ldr	r3, [r0, #24]
10014aa0:	2b00      	cmp	r3, #0
10014aa2:	d101      	bne.n	10014aa8 <_puts_r+0x14>
10014aa4:	f000 fb2c 	bl	10015100 <__sinit>
10014aa8:	69ab      	ldr	r3, [r5, #24]
10014aaa:	68ac      	ldr	r4, [r5, #8]
10014aac:	2b00      	cmp	r3, #0
10014aae:	d102      	bne.n	10014ab6 <_puts_r+0x22>
10014ab0:	0028      	movs	r0, r5
10014ab2:	f000 fb25 	bl	10015100 <__sinit>
10014ab6:	4b25      	ldr	r3, [pc, #148]	; (10014b4c <_puts_r+0xb8>)
10014ab8:	429c      	cmp	r4, r3
10014aba:	d101      	bne.n	10014ac0 <_puts_r+0x2c>
10014abc:	686c      	ldr	r4, [r5, #4]
10014abe:	e008      	b.n	10014ad2 <_puts_r+0x3e>
10014ac0:	4b23      	ldr	r3, [pc, #140]	; (10014b50 <_puts_r+0xbc>)
10014ac2:	429c      	cmp	r4, r3
10014ac4:	d101      	bne.n	10014aca <_puts_r+0x36>
10014ac6:	68ac      	ldr	r4, [r5, #8]
10014ac8:	e003      	b.n	10014ad2 <_puts_r+0x3e>
10014aca:	4b22      	ldr	r3, [pc, #136]	; (10014b54 <_puts_r+0xc0>)
10014acc:	429c      	cmp	r4, r3
10014ace:	d100      	bne.n	10014ad2 <_puts_r+0x3e>
10014ad0:	68ec      	ldr	r4, [r5, #12]
10014ad2:	89a3      	ldrh	r3, [r4, #12]
10014ad4:	071b      	lsls	r3, r3, #28
10014ad6:	d502      	bpl.n	10014ade <_puts_r+0x4a>
10014ad8:	6923      	ldr	r3, [r4, #16]
10014ada:	2b00      	cmp	r3, #0
10014adc:	d111      	bne.n	10014b02 <_puts_r+0x6e>
10014ade:	0021      	movs	r1, r4
10014ae0:	0028      	movs	r0, r5
10014ae2:	f000 f9a3 	bl	10014e2c <__swsetup_r>
10014ae6:	2800      	cmp	r0, #0
10014ae8:	d00b      	beq.n	10014b02 <_puts_r+0x6e>
10014aea:	2001      	movs	r0, #1
10014aec:	4240      	negs	r0, r0
10014aee:	e02b      	b.n	10014b48 <_puts_r+0xb4>
10014af0:	3b01      	subs	r3, #1
10014af2:	3601      	adds	r6, #1
10014af4:	60a3      	str	r3, [r4, #8]
10014af6:	2b00      	cmp	r3, #0
10014af8:	db08      	blt.n	10014b0c <_puts_r+0x78>
10014afa:	6823      	ldr	r3, [r4, #0]
10014afc:	1c5a      	adds	r2, r3, #1
10014afe:	6022      	str	r2, [r4, #0]
10014b00:	7019      	strb	r1, [r3, #0]
10014b02:	7831      	ldrb	r1, [r6, #0]
10014b04:	68a3      	ldr	r3, [r4, #8]
10014b06:	2900      	cmp	r1, #0
10014b08:	d1f2      	bne.n	10014af0 <_puts_r+0x5c>
10014b0a:	e00b      	b.n	10014b24 <_puts_r+0x90>
10014b0c:	69a2      	ldr	r2, [r4, #24]
10014b0e:	4293      	cmp	r3, r2
10014b10:	db01      	blt.n	10014b16 <_puts_r+0x82>
10014b12:	290a      	cmp	r1, #10
10014b14:	d1f1      	bne.n	10014afa <_puts_r+0x66>
10014b16:	0022      	movs	r2, r4
10014b18:	0028      	movs	r0, r5
10014b1a:	f000 f92f 	bl	10014d7c <__swbuf_r>
10014b1e:	1c43      	adds	r3, r0, #1
10014b20:	d1ef      	bne.n	10014b02 <_puts_r+0x6e>
10014b22:	e7e2      	b.n	10014aea <_puts_r+0x56>
10014b24:	3b01      	subs	r3, #1
10014b26:	60a3      	str	r3, [r4, #8]
10014b28:	2b00      	cmp	r3, #0
10014b2a:	da08      	bge.n	10014b3e <_puts_r+0xaa>
10014b2c:	0022      	movs	r2, r4
10014b2e:	310a      	adds	r1, #10
10014b30:	0028      	movs	r0, r5
10014b32:	f000 f923 	bl	10014d7c <__swbuf_r>
10014b36:	1c43      	adds	r3, r0, #1
10014b38:	d0d7      	beq.n	10014aea <_puts_r+0x56>
10014b3a:	200a      	movs	r0, #10
10014b3c:	e004      	b.n	10014b48 <_puts_r+0xb4>
10014b3e:	200a      	movs	r0, #10
10014b40:	6823      	ldr	r3, [r4, #0]
10014b42:	1c5a      	adds	r2, r3, #1
10014b44:	6022      	str	r2, [r4, #0]
10014b46:	7018      	strb	r0, [r3, #0]
10014b48:	bd70      	pop	{r4, r5, r6, pc}
10014b4a:	46c0      	nop			; (mov r8, r8)
10014b4c:	10016fac 	.word	0x10016fac
10014b50:	10016fcc 	.word	0x10016fcc
10014b54:	10016fec 	.word	0x10016fec

10014b58 <puts>:
10014b58:	b510      	push	{r4, lr}
10014b5a:	4b03      	ldr	r3, [pc, #12]	; (10014b68 <puts+0x10>)
10014b5c:	0001      	movs	r1, r0
10014b5e:	6818      	ldr	r0, [r3, #0]
10014b60:	f7ff ff98 	bl	10014a94 <_puts_r>
10014b64:	bd10      	pop	{r4, pc}
10014b66:	46c0      	nop			; (mov r8, r8)
10014b68:	10017108 	.word	0x10017108

10014b6c <rand>:
10014b6c:	4b15      	ldr	r3, [pc, #84]	; (10014bc4 <rand+0x58>)
10014b6e:	b510      	push	{r4, lr}
10014b70:	681c      	ldr	r4, [r3, #0]
10014b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014b74:	2b00      	cmp	r3, #0
10014b76:	d115      	bne.n	10014ba4 <rand+0x38>
10014b78:	2018      	movs	r0, #24
10014b7a:	f7ff fe97 	bl	100148ac <malloc>
10014b7e:	4b12      	ldr	r3, [pc, #72]	; (10014bc8 <rand+0x5c>)
10014b80:	63a0      	str	r0, [r4, #56]	; 0x38
10014b82:	8003      	strh	r3, [r0, #0]
10014b84:	4b11      	ldr	r3, [pc, #68]	; (10014bcc <rand+0x60>)
10014b86:	2201      	movs	r2, #1
10014b88:	8043      	strh	r3, [r0, #2]
10014b8a:	4b11      	ldr	r3, [pc, #68]	; (10014bd0 <rand+0x64>)
10014b8c:	8083      	strh	r3, [r0, #4]
10014b8e:	4b11      	ldr	r3, [pc, #68]	; (10014bd4 <rand+0x68>)
10014b90:	80c3      	strh	r3, [r0, #6]
10014b92:	4b11      	ldr	r3, [pc, #68]	; (10014bd8 <rand+0x6c>)
10014b94:	8103      	strh	r3, [r0, #8]
10014b96:	2305      	movs	r3, #5
10014b98:	8143      	strh	r3, [r0, #10]
10014b9a:	3306      	adds	r3, #6
10014b9c:	8183      	strh	r3, [r0, #12]
10014b9e:	2300      	movs	r3, #0
10014ba0:	6102      	str	r2, [r0, #16]
10014ba2:	6143      	str	r3, [r0, #20]
10014ba4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014ba6:	4a0d      	ldr	r2, [pc, #52]	; (10014bdc <rand+0x70>)
10014ba8:	6920      	ldr	r0, [r4, #16]
10014baa:	6961      	ldr	r1, [r4, #20]
10014bac:	4b0c      	ldr	r3, [pc, #48]	; (10014be0 <rand+0x74>)
10014bae:	f7fe f80b 	bl	10012bc8 <__aeabi_lmul>
10014bb2:	2201      	movs	r2, #1
10014bb4:	2300      	movs	r3, #0
10014bb6:	1880      	adds	r0, r0, r2
10014bb8:	4159      	adcs	r1, r3
10014bba:	6120      	str	r0, [r4, #16]
10014bbc:	6161      	str	r1, [r4, #20]
10014bbe:	0048      	lsls	r0, r1, #1
10014bc0:	0840      	lsrs	r0, r0, #1
10014bc2:	bd10      	pop	{r4, pc}
10014bc4:	10017108 	.word	0x10017108
10014bc8:	0000330e 	.word	0x0000330e
10014bcc:	ffffabcd 	.word	0xffffabcd
10014bd0:	00001234 	.word	0x00001234
10014bd4:	ffffe66d 	.word	0xffffe66d
10014bd8:	ffffdeec 	.word	0xffffdeec
10014bdc:	4c957f2d 	.word	0x4c957f2d
10014be0:	5851f42d 	.word	0x5851f42d

10014be4 <_sbrk_r>:
10014be4:	2300      	movs	r3, #0
10014be6:	b570      	push	{r4, r5, r6, lr}
10014be8:	4c06      	ldr	r4, [pc, #24]	; (10014c04 <_sbrk_r+0x20>)
10014bea:	0005      	movs	r5, r0
10014bec:	0008      	movs	r0, r1
10014bee:	6023      	str	r3, [r4, #0]
10014bf0:	f7f3 fc48 	bl	10008484 <_sbrk>
10014bf4:	1c43      	adds	r3, r0, #1
10014bf6:	d103      	bne.n	10014c00 <_sbrk_r+0x1c>
10014bf8:	6823      	ldr	r3, [r4, #0]
10014bfa:	2b00      	cmp	r3, #0
10014bfc:	d000      	beq.n	10014c00 <_sbrk_r+0x1c>
10014bfe:	602b      	str	r3, [r5, #0]
10014c00:	bd70      	pop	{r4, r5, r6, pc}
10014c02:	46c0      	nop			; (mov r8, r8)
10014c04:	10019fb0 	.word	0x10019fb0

10014c08 <setbuf>:
10014c08:	424a      	negs	r2, r1
10014c0a:	414a      	adcs	r2, r1
10014c0c:	2380      	movs	r3, #128	; 0x80
10014c0e:	b510      	push	{r4, lr}
10014c10:	0052      	lsls	r2, r2, #1
10014c12:	00db      	lsls	r3, r3, #3
10014c14:	f000 f802 	bl	10014c1c <setvbuf>
10014c18:	bd10      	pop	{r4, pc}
	...

10014c1c <setvbuf>:
10014c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10014c1e:	001d      	movs	r5, r3
10014c20:	4b51      	ldr	r3, [pc, #324]	; (10014d68 <setvbuf+0x14c>)
10014c22:	b085      	sub	sp, #20
10014c24:	681e      	ldr	r6, [r3, #0]
10014c26:	0004      	movs	r4, r0
10014c28:	000f      	movs	r7, r1
10014c2a:	9200      	str	r2, [sp, #0]
10014c2c:	2e00      	cmp	r6, #0
10014c2e:	d005      	beq.n	10014c3c <setvbuf+0x20>
10014c30:	69b3      	ldr	r3, [r6, #24]
10014c32:	2b00      	cmp	r3, #0
10014c34:	d102      	bne.n	10014c3c <setvbuf+0x20>
10014c36:	0030      	movs	r0, r6
10014c38:	f000 fa62 	bl	10015100 <__sinit>
10014c3c:	4b4b      	ldr	r3, [pc, #300]	; (10014d6c <setvbuf+0x150>)
10014c3e:	429c      	cmp	r4, r3
10014c40:	d101      	bne.n	10014c46 <setvbuf+0x2a>
10014c42:	6874      	ldr	r4, [r6, #4]
10014c44:	e008      	b.n	10014c58 <setvbuf+0x3c>
10014c46:	4b4a      	ldr	r3, [pc, #296]	; (10014d70 <setvbuf+0x154>)
10014c48:	429c      	cmp	r4, r3
10014c4a:	d101      	bne.n	10014c50 <setvbuf+0x34>
10014c4c:	68b4      	ldr	r4, [r6, #8]
10014c4e:	e003      	b.n	10014c58 <setvbuf+0x3c>
10014c50:	4b48      	ldr	r3, [pc, #288]	; (10014d74 <setvbuf+0x158>)
10014c52:	429c      	cmp	r4, r3
10014c54:	d100      	bne.n	10014c58 <setvbuf+0x3c>
10014c56:	68f4      	ldr	r4, [r6, #12]
10014c58:	9b00      	ldr	r3, [sp, #0]
10014c5a:	2b02      	cmp	r3, #2
10014c5c:	d005      	beq.n	10014c6a <setvbuf+0x4e>
10014c5e:	2b01      	cmp	r3, #1
10014c60:	d900      	bls.n	10014c64 <setvbuf+0x48>
10014c62:	e07c      	b.n	10014d5e <setvbuf+0x142>
10014c64:	2d00      	cmp	r5, #0
10014c66:	da00      	bge.n	10014c6a <setvbuf+0x4e>
10014c68:	e079      	b.n	10014d5e <setvbuf+0x142>
10014c6a:	0021      	movs	r1, r4
10014c6c:	0030      	movs	r0, r6
10014c6e:	f000 f9d9 	bl	10015024 <_fflush_r>
10014c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014c74:	2900      	cmp	r1, #0
10014c76:	d008      	beq.n	10014c8a <setvbuf+0x6e>
10014c78:	0023      	movs	r3, r4
10014c7a:	3344      	adds	r3, #68	; 0x44
10014c7c:	4299      	cmp	r1, r3
10014c7e:	d002      	beq.n	10014c86 <setvbuf+0x6a>
10014c80:	0030      	movs	r0, r6
10014c82:	f7ff fe3d 	bl	10014900 <_free_r>
10014c86:	2300      	movs	r3, #0
10014c88:	6363      	str	r3, [r4, #52]	; 0x34
10014c8a:	2300      	movs	r3, #0
10014c8c:	61a3      	str	r3, [r4, #24]
10014c8e:	6063      	str	r3, [r4, #4]
10014c90:	89a3      	ldrh	r3, [r4, #12]
10014c92:	061b      	lsls	r3, r3, #24
10014c94:	d503      	bpl.n	10014c9e <setvbuf+0x82>
10014c96:	6921      	ldr	r1, [r4, #16]
10014c98:	0030      	movs	r0, r6
10014c9a:	f7ff fe31 	bl	10014900 <_free_r>
10014c9e:	89a2      	ldrh	r2, [r4, #12]
10014ca0:	4b35      	ldr	r3, [pc, #212]	; (10014d78 <setvbuf+0x15c>)
10014ca2:	4013      	ands	r3, r2
10014ca4:	81a3      	strh	r3, [r4, #12]
10014ca6:	9b00      	ldr	r3, [sp, #0]
10014ca8:	2b02      	cmp	r3, #2
10014caa:	d021      	beq.n	10014cf0 <setvbuf+0xd4>
10014cac:	ab03      	add	r3, sp, #12
10014cae:	aa02      	add	r2, sp, #8
10014cb0:	0021      	movs	r1, r4
10014cb2:	0030      	movs	r0, r6
10014cb4:	f000 fab8 	bl	10015228 <__swhatbuf_r>
10014cb8:	89a3      	ldrh	r3, [r4, #12]
10014cba:	4318      	orrs	r0, r3
10014cbc:	81a0      	strh	r0, [r4, #12]
10014cbe:	2d00      	cmp	r5, #0
10014cc0:	d101      	bne.n	10014cc6 <setvbuf+0xaa>
10014cc2:	9d02      	ldr	r5, [sp, #8]
10014cc4:	e001      	b.n	10014cca <setvbuf+0xae>
10014cc6:	2f00      	cmp	r7, #0
10014cc8:	d125      	bne.n	10014d16 <setvbuf+0xfa>
10014cca:	0028      	movs	r0, r5
10014ccc:	f7ff fdee 	bl	100148ac <malloc>
10014cd0:	9501      	str	r5, [sp, #4]
10014cd2:	1e07      	subs	r7, r0, #0
10014cd4:	d11a      	bne.n	10014d0c <setvbuf+0xf0>
10014cd6:	9b02      	ldr	r3, [sp, #8]
10014cd8:	9301      	str	r3, [sp, #4]
10014cda:	42ab      	cmp	r3, r5
10014cdc:	d102      	bne.n	10014ce4 <setvbuf+0xc8>
10014cde:	2001      	movs	r0, #1
10014ce0:	4240      	negs	r0, r0
10014ce2:	e006      	b.n	10014cf2 <setvbuf+0xd6>
10014ce4:	9801      	ldr	r0, [sp, #4]
10014ce6:	f7ff fde1 	bl	100148ac <malloc>
10014cea:	1e07      	subs	r7, r0, #0
10014cec:	d10e      	bne.n	10014d0c <setvbuf+0xf0>
10014cee:	e7f6      	b.n	10014cde <setvbuf+0xc2>
10014cf0:	2000      	movs	r0, #0
10014cf2:	2202      	movs	r2, #2
10014cf4:	89a3      	ldrh	r3, [r4, #12]
10014cf6:	4313      	orrs	r3, r2
10014cf8:	81a3      	strh	r3, [r4, #12]
10014cfa:	2300      	movs	r3, #0
10014cfc:	60a3      	str	r3, [r4, #8]
10014cfe:	0023      	movs	r3, r4
10014d00:	3347      	adds	r3, #71	; 0x47
10014d02:	6023      	str	r3, [r4, #0]
10014d04:	6123      	str	r3, [r4, #16]
10014d06:	2301      	movs	r3, #1
10014d08:	6163      	str	r3, [r4, #20]
10014d0a:	e02a      	b.n	10014d62 <setvbuf+0x146>
10014d0c:	2280      	movs	r2, #128	; 0x80
10014d0e:	89a3      	ldrh	r3, [r4, #12]
10014d10:	9d01      	ldr	r5, [sp, #4]
10014d12:	4313      	orrs	r3, r2
10014d14:	81a3      	strh	r3, [r4, #12]
10014d16:	69b3      	ldr	r3, [r6, #24]
10014d18:	2b00      	cmp	r3, #0
10014d1a:	d102      	bne.n	10014d22 <setvbuf+0x106>
10014d1c:	0030      	movs	r0, r6
10014d1e:	f000 f9ef 	bl	10015100 <__sinit>
10014d22:	9b00      	ldr	r3, [sp, #0]
10014d24:	2b01      	cmp	r3, #1
10014d26:	d103      	bne.n	10014d30 <setvbuf+0x114>
10014d28:	89a3      	ldrh	r3, [r4, #12]
10014d2a:	9a00      	ldr	r2, [sp, #0]
10014d2c:	431a      	orrs	r2, r3
10014d2e:	81a2      	strh	r2, [r4, #12]
10014d30:	2308      	movs	r3, #8
10014d32:	89a2      	ldrh	r2, [r4, #12]
10014d34:	6027      	str	r7, [r4, #0]
10014d36:	4013      	ands	r3, r2
10014d38:	6127      	str	r7, [r4, #16]
10014d3a:	6165      	str	r5, [r4, #20]
10014d3c:	1e18      	subs	r0, r3, #0
10014d3e:	d00c      	beq.n	10014d5a <setvbuf+0x13e>
10014d40:	2301      	movs	r3, #1
10014d42:	401a      	ands	r2, r3
10014d44:	2300      	movs	r3, #0
10014d46:	1e10      	subs	r0, r2, #0
10014d48:	4298      	cmp	r0, r3
10014d4a:	d004      	beq.n	10014d56 <setvbuf+0x13a>
10014d4c:	426d      	negs	r5, r5
10014d4e:	60a3      	str	r3, [r4, #8]
10014d50:	61a5      	str	r5, [r4, #24]
10014d52:	0018      	movs	r0, r3
10014d54:	e005      	b.n	10014d62 <setvbuf+0x146>
10014d56:	60a5      	str	r5, [r4, #8]
10014d58:	e003      	b.n	10014d62 <setvbuf+0x146>
10014d5a:	60a3      	str	r3, [r4, #8]
10014d5c:	e001      	b.n	10014d62 <setvbuf+0x146>
10014d5e:	2001      	movs	r0, #1
10014d60:	4240      	negs	r0, r0
10014d62:	b005      	add	sp, #20
10014d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014d66:	46c0      	nop			; (mov r8, r8)
10014d68:	10017108 	.word	0x10017108
10014d6c:	10016fac 	.word	0x10016fac
10014d70:	10016fcc 	.word	0x10016fcc
10014d74:	10016fec 	.word	0x10016fec
10014d78:	fffff35c 	.word	0xfffff35c

10014d7c <__swbuf_r>:
10014d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014d7e:	0005      	movs	r5, r0
10014d80:	000f      	movs	r7, r1
10014d82:	0014      	movs	r4, r2
10014d84:	2800      	cmp	r0, #0
10014d86:	d004      	beq.n	10014d92 <__swbuf_r+0x16>
10014d88:	6983      	ldr	r3, [r0, #24]
10014d8a:	2b00      	cmp	r3, #0
10014d8c:	d101      	bne.n	10014d92 <__swbuf_r+0x16>
10014d8e:	f000 f9b7 	bl	10015100 <__sinit>
10014d92:	4b23      	ldr	r3, [pc, #140]	; (10014e20 <__swbuf_r+0xa4>)
10014d94:	429c      	cmp	r4, r3
10014d96:	d101      	bne.n	10014d9c <__swbuf_r+0x20>
10014d98:	686c      	ldr	r4, [r5, #4]
10014d9a:	e008      	b.n	10014dae <__swbuf_r+0x32>
10014d9c:	4b21      	ldr	r3, [pc, #132]	; (10014e24 <__swbuf_r+0xa8>)
10014d9e:	429c      	cmp	r4, r3
10014da0:	d101      	bne.n	10014da6 <__swbuf_r+0x2a>
10014da2:	68ac      	ldr	r4, [r5, #8]
10014da4:	e003      	b.n	10014dae <__swbuf_r+0x32>
10014da6:	4b20      	ldr	r3, [pc, #128]	; (10014e28 <__swbuf_r+0xac>)
10014da8:	429c      	cmp	r4, r3
10014daa:	d100      	bne.n	10014dae <__swbuf_r+0x32>
10014dac:	68ec      	ldr	r4, [r5, #12]
10014dae:	69a3      	ldr	r3, [r4, #24]
10014db0:	60a3      	str	r3, [r4, #8]
10014db2:	89a3      	ldrh	r3, [r4, #12]
10014db4:	071b      	lsls	r3, r3, #28
10014db6:	d50a      	bpl.n	10014dce <__swbuf_r+0x52>
10014db8:	6923      	ldr	r3, [r4, #16]
10014dba:	2b00      	cmp	r3, #0
10014dbc:	d007      	beq.n	10014dce <__swbuf_r+0x52>
10014dbe:	6823      	ldr	r3, [r4, #0]
10014dc0:	6922      	ldr	r2, [r4, #16]
10014dc2:	b2fe      	uxtb	r6, r7
10014dc4:	1a98      	subs	r0, r3, r2
10014dc6:	6963      	ldr	r3, [r4, #20]
10014dc8:	4298      	cmp	r0, r3
10014dca:	db0f      	blt.n	10014dec <__swbuf_r+0x70>
10014dcc:	e008      	b.n	10014de0 <__swbuf_r+0x64>
10014dce:	0021      	movs	r1, r4
10014dd0:	0028      	movs	r0, r5
10014dd2:	f000 f82b 	bl	10014e2c <__swsetup_r>
10014dd6:	2800      	cmp	r0, #0
10014dd8:	d0f1      	beq.n	10014dbe <__swbuf_r+0x42>
10014dda:	2001      	movs	r0, #1
10014ddc:	4240      	negs	r0, r0
10014dde:	e01d      	b.n	10014e1c <__swbuf_r+0xa0>
10014de0:	0021      	movs	r1, r4
10014de2:	0028      	movs	r0, r5
10014de4:	f000 f91e 	bl	10015024 <_fflush_r>
10014de8:	2800      	cmp	r0, #0
10014dea:	d1f6      	bne.n	10014dda <__swbuf_r+0x5e>
10014dec:	68a3      	ldr	r3, [r4, #8]
10014dee:	3001      	adds	r0, #1
10014df0:	3b01      	subs	r3, #1
10014df2:	60a3      	str	r3, [r4, #8]
10014df4:	6823      	ldr	r3, [r4, #0]
10014df6:	1c5a      	adds	r2, r3, #1
10014df8:	6022      	str	r2, [r4, #0]
10014dfa:	701f      	strb	r7, [r3, #0]
10014dfc:	6963      	ldr	r3, [r4, #20]
10014dfe:	4298      	cmp	r0, r3
10014e00:	d005      	beq.n	10014e0e <__swbuf_r+0x92>
10014e02:	89a3      	ldrh	r3, [r4, #12]
10014e04:	0030      	movs	r0, r6
10014e06:	07db      	lsls	r3, r3, #31
10014e08:	d508      	bpl.n	10014e1c <__swbuf_r+0xa0>
10014e0a:	2e0a      	cmp	r6, #10
10014e0c:	d106      	bne.n	10014e1c <__swbuf_r+0xa0>
10014e0e:	0021      	movs	r1, r4
10014e10:	0028      	movs	r0, r5
10014e12:	f000 f907 	bl	10015024 <_fflush_r>
10014e16:	2800      	cmp	r0, #0
10014e18:	d1df      	bne.n	10014dda <__swbuf_r+0x5e>
10014e1a:	0030      	movs	r0, r6
10014e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014e1e:	46c0      	nop			; (mov r8, r8)
10014e20:	10016fac 	.word	0x10016fac
10014e24:	10016fcc 	.word	0x10016fcc
10014e28:	10016fec 	.word	0x10016fec

10014e2c <__swsetup_r>:
10014e2c:	4b36      	ldr	r3, [pc, #216]	; (10014f08 <__swsetup_r+0xdc>)
10014e2e:	b570      	push	{r4, r5, r6, lr}
10014e30:	681d      	ldr	r5, [r3, #0]
10014e32:	0006      	movs	r6, r0
10014e34:	000c      	movs	r4, r1
10014e36:	2d00      	cmp	r5, #0
10014e38:	d005      	beq.n	10014e46 <__swsetup_r+0x1a>
10014e3a:	69ab      	ldr	r3, [r5, #24]
10014e3c:	2b00      	cmp	r3, #0
10014e3e:	d102      	bne.n	10014e46 <__swsetup_r+0x1a>
10014e40:	0028      	movs	r0, r5
10014e42:	f000 f95d 	bl	10015100 <__sinit>
10014e46:	4b31      	ldr	r3, [pc, #196]	; (10014f0c <__swsetup_r+0xe0>)
10014e48:	429c      	cmp	r4, r3
10014e4a:	d101      	bne.n	10014e50 <__swsetup_r+0x24>
10014e4c:	686c      	ldr	r4, [r5, #4]
10014e4e:	e008      	b.n	10014e62 <__swsetup_r+0x36>
10014e50:	4b2f      	ldr	r3, [pc, #188]	; (10014f10 <__swsetup_r+0xe4>)
10014e52:	429c      	cmp	r4, r3
10014e54:	d101      	bne.n	10014e5a <__swsetup_r+0x2e>
10014e56:	68ac      	ldr	r4, [r5, #8]
10014e58:	e003      	b.n	10014e62 <__swsetup_r+0x36>
10014e5a:	4b2e      	ldr	r3, [pc, #184]	; (10014f14 <__swsetup_r+0xe8>)
10014e5c:	429c      	cmp	r4, r3
10014e5e:	d100      	bne.n	10014e62 <__swsetup_r+0x36>
10014e60:	68ec      	ldr	r4, [r5, #12]
10014e62:	220c      	movs	r2, #12
10014e64:	5ea3      	ldrsh	r3, [r4, r2]
10014e66:	b29a      	uxth	r2, r3
10014e68:	0711      	lsls	r1, r2, #28
10014e6a:	d423      	bmi.n	10014eb4 <__swsetup_r+0x88>
10014e6c:	06d1      	lsls	r1, r2, #27
10014e6e:	d407      	bmi.n	10014e80 <__swsetup_r+0x54>
10014e70:	2209      	movs	r2, #9
10014e72:	2001      	movs	r0, #1
10014e74:	6032      	str	r2, [r6, #0]
10014e76:	3237      	adds	r2, #55	; 0x37
10014e78:	4313      	orrs	r3, r2
10014e7a:	81a3      	strh	r3, [r4, #12]
10014e7c:	4240      	negs	r0, r0
10014e7e:	e042      	b.n	10014f06 <__swsetup_r+0xda>
10014e80:	0753      	lsls	r3, r2, #29
10014e82:	d513      	bpl.n	10014eac <__swsetup_r+0x80>
10014e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014e86:	2900      	cmp	r1, #0
10014e88:	d008      	beq.n	10014e9c <__swsetup_r+0x70>
10014e8a:	0023      	movs	r3, r4
10014e8c:	3344      	adds	r3, #68	; 0x44
10014e8e:	4299      	cmp	r1, r3
10014e90:	d002      	beq.n	10014e98 <__swsetup_r+0x6c>
10014e92:	0030      	movs	r0, r6
10014e94:	f7ff fd34 	bl	10014900 <_free_r>
10014e98:	2300      	movs	r3, #0
10014e9a:	6363      	str	r3, [r4, #52]	; 0x34
10014e9c:	2224      	movs	r2, #36	; 0x24
10014e9e:	89a3      	ldrh	r3, [r4, #12]
10014ea0:	4393      	bics	r3, r2
10014ea2:	81a3      	strh	r3, [r4, #12]
10014ea4:	2300      	movs	r3, #0
10014ea6:	6063      	str	r3, [r4, #4]
10014ea8:	6923      	ldr	r3, [r4, #16]
10014eaa:	6023      	str	r3, [r4, #0]
10014eac:	2208      	movs	r2, #8
10014eae:	89a3      	ldrh	r3, [r4, #12]
10014eb0:	4313      	orrs	r3, r2
10014eb2:	81a3      	strh	r3, [r4, #12]
10014eb4:	6923      	ldr	r3, [r4, #16]
10014eb6:	2b00      	cmp	r3, #0
10014eb8:	d10b      	bne.n	10014ed2 <__swsetup_r+0xa6>
10014eba:	23a0      	movs	r3, #160	; 0xa0
10014ebc:	89a2      	ldrh	r2, [r4, #12]
10014ebe:	009b      	lsls	r3, r3, #2
10014ec0:	4013      	ands	r3, r2
10014ec2:	2280      	movs	r2, #128	; 0x80
10014ec4:	0092      	lsls	r2, r2, #2
10014ec6:	4293      	cmp	r3, r2
10014ec8:	d003      	beq.n	10014ed2 <__swsetup_r+0xa6>
10014eca:	0021      	movs	r1, r4
10014ecc:	0030      	movs	r0, r6
10014ece:	f000 f9d1 	bl	10015274 <__smakebuf_r>
10014ed2:	2301      	movs	r3, #1
10014ed4:	89a2      	ldrh	r2, [r4, #12]
10014ed6:	4013      	ands	r3, r2
10014ed8:	d005      	beq.n	10014ee6 <__swsetup_r+0xba>
10014eda:	2300      	movs	r3, #0
10014edc:	60a3      	str	r3, [r4, #8]
10014ede:	6963      	ldr	r3, [r4, #20]
10014ee0:	425b      	negs	r3, r3
10014ee2:	61a3      	str	r3, [r4, #24]
10014ee4:	e003      	b.n	10014eee <__swsetup_r+0xc2>
10014ee6:	0792      	lsls	r2, r2, #30
10014ee8:	d400      	bmi.n	10014eec <__swsetup_r+0xc0>
10014eea:	6963      	ldr	r3, [r4, #20]
10014eec:	60a3      	str	r3, [r4, #8]
10014eee:	2000      	movs	r0, #0
10014ef0:	6923      	ldr	r3, [r4, #16]
10014ef2:	4283      	cmp	r3, r0
10014ef4:	d107      	bne.n	10014f06 <__swsetup_r+0xda>
10014ef6:	220c      	movs	r2, #12
10014ef8:	5ea3      	ldrsh	r3, [r4, r2]
10014efa:	061a      	lsls	r2, r3, #24
10014efc:	d503      	bpl.n	10014f06 <__swsetup_r+0xda>
10014efe:	2240      	movs	r2, #64	; 0x40
10014f00:	4313      	orrs	r3, r2
10014f02:	81a3      	strh	r3, [r4, #12]
10014f04:	3801      	subs	r0, #1
10014f06:	bd70      	pop	{r4, r5, r6, pc}
10014f08:	10017108 	.word	0x10017108
10014f0c:	10016fac 	.word	0x10016fac
10014f10:	10016fcc 	.word	0x10016fcc
10014f14:	10016fec 	.word	0x10016fec

10014f18 <__sflush_r>:
10014f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014f1a:	898a      	ldrh	r2, [r1, #12]
10014f1c:	0005      	movs	r5, r0
10014f1e:	000c      	movs	r4, r1
10014f20:	0713      	lsls	r3, r2, #28
10014f22:	d45a      	bmi.n	10014fda <__sflush_r+0xc2>
10014f24:	684b      	ldr	r3, [r1, #4]
10014f26:	2b00      	cmp	r3, #0
10014f28:	dc02      	bgt.n	10014f30 <__sflush_r+0x18>
10014f2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10014f2c:	2b00      	cmp	r3, #0
10014f2e:	dd19      	ble.n	10014f64 <__sflush_r+0x4c>
10014f30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014f32:	2f00      	cmp	r7, #0
10014f34:	d016      	beq.n	10014f64 <__sflush_r+0x4c>
10014f36:	2300      	movs	r3, #0
10014f38:	682e      	ldr	r6, [r5, #0]
10014f3a:	602b      	str	r3, [r5, #0]
10014f3c:	2380      	movs	r3, #128	; 0x80
10014f3e:	015b      	lsls	r3, r3, #5
10014f40:	401a      	ands	r2, r3
10014f42:	d001      	beq.n	10014f48 <__sflush_r+0x30>
10014f44:	6d60      	ldr	r0, [r4, #84]	; 0x54
10014f46:	e014      	b.n	10014f72 <__sflush_r+0x5a>
10014f48:	2301      	movs	r3, #1
10014f4a:	6a21      	ldr	r1, [r4, #32]
10014f4c:	0028      	movs	r0, r5
10014f4e:	47b8      	blx	r7
10014f50:	1c43      	adds	r3, r0, #1
10014f52:	d10e      	bne.n	10014f72 <__sflush_r+0x5a>
10014f54:	682b      	ldr	r3, [r5, #0]
10014f56:	2b00      	cmp	r3, #0
10014f58:	d00b      	beq.n	10014f72 <__sflush_r+0x5a>
10014f5a:	2b1d      	cmp	r3, #29
10014f5c:	d001      	beq.n	10014f62 <__sflush_r+0x4a>
10014f5e:	2b16      	cmp	r3, #22
10014f60:	d102      	bne.n	10014f68 <__sflush_r+0x50>
10014f62:	602e      	str	r6, [r5, #0]
10014f64:	2000      	movs	r0, #0
10014f66:	e05a      	b.n	1001501e <__sflush_r+0x106>
10014f68:	2240      	movs	r2, #64	; 0x40
10014f6a:	89a3      	ldrh	r3, [r4, #12]
10014f6c:	4313      	orrs	r3, r2
10014f6e:	81a3      	strh	r3, [r4, #12]
10014f70:	e055      	b.n	1001501e <__sflush_r+0x106>
10014f72:	89a3      	ldrh	r3, [r4, #12]
10014f74:	075b      	lsls	r3, r3, #29
10014f76:	d506      	bpl.n	10014f86 <__sflush_r+0x6e>
10014f78:	6863      	ldr	r3, [r4, #4]
10014f7a:	1ac0      	subs	r0, r0, r3
10014f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10014f7e:	2b00      	cmp	r3, #0
10014f80:	d001      	beq.n	10014f86 <__sflush_r+0x6e>
10014f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
10014f84:	1ac0      	subs	r0, r0, r3
10014f86:	2300      	movs	r3, #0
10014f88:	0002      	movs	r2, r0
10014f8a:	6a21      	ldr	r1, [r4, #32]
10014f8c:	0028      	movs	r0, r5
10014f8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014f90:	47b8      	blx	r7
10014f92:	89a3      	ldrh	r3, [r4, #12]
10014f94:	1c42      	adds	r2, r0, #1
10014f96:	d106      	bne.n	10014fa6 <__sflush_r+0x8e>
10014f98:	6829      	ldr	r1, [r5, #0]
10014f9a:	291d      	cmp	r1, #29
10014f9c:	d83a      	bhi.n	10015014 <__sflush_r+0xfc>
10014f9e:	4a20      	ldr	r2, [pc, #128]	; (10015020 <__sflush_r+0x108>)
10014fa0:	40ca      	lsrs	r2, r1
10014fa2:	07d2      	lsls	r2, r2, #31
10014fa4:	d536      	bpl.n	10015014 <__sflush_r+0xfc>
10014fa6:	2200      	movs	r2, #0
10014fa8:	6062      	str	r2, [r4, #4]
10014faa:	6922      	ldr	r2, [r4, #16]
10014fac:	6022      	str	r2, [r4, #0]
10014fae:	04db      	lsls	r3, r3, #19
10014fb0:	d505      	bpl.n	10014fbe <__sflush_r+0xa6>
10014fb2:	1c43      	adds	r3, r0, #1
10014fb4:	d102      	bne.n	10014fbc <__sflush_r+0xa4>
10014fb6:	682b      	ldr	r3, [r5, #0]
10014fb8:	2b00      	cmp	r3, #0
10014fba:	d100      	bne.n	10014fbe <__sflush_r+0xa6>
10014fbc:	6560      	str	r0, [r4, #84]	; 0x54
10014fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014fc0:	602e      	str	r6, [r5, #0]
10014fc2:	2900      	cmp	r1, #0
10014fc4:	d0ce      	beq.n	10014f64 <__sflush_r+0x4c>
10014fc6:	0023      	movs	r3, r4
10014fc8:	3344      	adds	r3, #68	; 0x44
10014fca:	4299      	cmp	r1, r3
10014fcc:	d002      	beq.n	10014fd4 <__sflush_r+0xbc>
10014fce:	0028      	movs	r0, r5
10014fd0:	f7ff fc96 	bl	10014900 <_free_r>
10014fd4:	2000      	movs	r0, #0
10014fd6:	6360      	str	r0, [r4, #52]	; 0x34
10014fd8:	e021      	b.n	1001501e <__sflush_r+0x106>
10014fda:	690f      	ldr	r7, [r1, #16]
10014fdc:	2f00      	cmp	r7, #0
10014fde:	d0c1      	beq.n	10014f64 <__sflush_r+0x4c>
10014fe0:	680b      	ldr	r3, [r1, #0]
10014fe2:	600f      	str	r7, [r1, #0]
10014fe4:	1bdb      	subs	r3, r3, r7
10014fe6:	9301      	str	r3, [sp, #4]
10014fe8:	2300      	movs	r3, #0
10014fea:	0792      	lsls	r2, r2, #30
10014fec:	d100      	bne.n	10014ff0 <__sflush_r+0xd8>
10014fee:	694b      	ldr	r3, [r1, #20]
10014ff0:	60a3      	str	r3, [r4, #8]
10014ff2:	e003      	b.n	10014ffc <__sflush_r+0xe4>
10014ff4:	9b01      	ldr	r3, [sp, #4]
10014ff6:	183f      	adds	r7, r7, r0
10014ff8:	1a1b      	subs	r3, r3, r0
10014ffa:	9301      	str	r3, [sp, #4]
10014ffc:	9b01      	ldr	r3, [sp, #4]
10014ffe:	2b00      	cmp	r3, #0
10015000:	ddb0      	ble.n	10014f64 <__sflush_r+0x4c>
10015002:	9b01      	ldr	r3, [sp, #4]
10015004:	003a      	movs	r2, r7
10015006:	6a21      	ldr	r1, [r4, #32]
10015008:	0028      	movs	r0, r5
1001500a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1001500c:	47b0      	blx	r6
1001500e:	2800      	cmp	r0, #0
10015010:	dcf0      	bgt.n	10014ff4 <__sflush_r+0xdc>
10015012:	89a3      	ldrh	r3, [r4, #12]
10015014:	2240      	movs	r2, #64	; 0x40
10015016:	2001      	movs	r0, #1
10015018:	4313      	orrs	r3, r2
1001501a:	81a3      	strh	r3, [r4, #12]
1001501c:	4240      	negs	r0, r0
1001501e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015020:	20400001 	.word	0x20400001

10015024 <_fflush_r>:
10015024:	690b      	ldr	r3, [r1, #16]
10015026:	b570      	push	{r4, r5, r6, lr}
10015028:	0005      	movs	r5, r0
1001502a:	000c      	movs	r4, r1
1001502c:	2b00      	cmp	r3, #0
1001502e:	d101      	bne.n	10015034 <_fflush_r+0x10>
10015030:	2000      	movs	r0, #0
10015032:	e01c      	b.n	1001506e <_fflush_r+0x4a>
10015034:	2800      	cmp	r0, #0
10015036:	d004      	beq.n	10015042 <_fflush_r+0x1e>
10015038:	6983      	ldr	r3, [r0, #24]
1001503a:	2b00      	cmp	r3, #0
1001503c:	d101      	bne.n	10015042 <_fflush_r+0x1e>
1001503e:	f000 f85f 	bl	10015100 <__sinit>
10015042:	4b0b      	ldr	r3, [pc, #44]	; (10015070 <_fflush_r+0x4c>)
10015044:	429c      	cmp	r4, r3
10015046:	d101      	bne.n	1001504c <_fflush_r+0x28>
10015048:	686c      	ldr	r4, [r5, #4]
1001504a:	e008      	b.n	1001505e <_fflush_r+0x3a>
1001504c:	4b09      	ldr	r3, [pc, #36]	; (10015074 <_fflush_r+0x50>)
1001504e:	429c      	cmp	r4, r3
10015050:	d101      	bne.n	10015056 <_fflush_r+0x32>
10015052:	68ac      	ldr	r4, [r5, #8]
10015054:	e003      	b.n	1001505e <_fflush_r+0x3a>
10015056:	4b08      	ldr	r3, [pc, #32]	; (10015078 <_fflush_r+0x54>)
10015058:	429c      	cmp	r4, r3
1001505a:	d100      	bne.n	1001505e <_fflush_r+0x3a>
1001505c:	68ec      	ldr	r4, [r5, #12]
1001505e:	220c      	movs	r2, #12
10015060:	5ea3      	ldrsh	r3, [r4, r2]
10015062:	2b00      	cmp	r3, #0
10015064:	d0e4      	beq.n	10015030 <_fflush_r+0xc>
10015066:	0021      	movs	r1, r4
10015068:	0028      	movs	r0, r5
1001506a:	f7ff ff55 	bl	10014f18 <__sflush_r>
1001506e:	bd70      	pop	{r4, r5, r6, pc}
10015070:	10016fac 	.word	0x10016fac
10015074:	10016fcc 	.word	0x10016fcc
10015078:	10016fec 	.word	0x10016fec

1001507c <_cleanup_r>:
1001507c:	b510      	push	{r4, lr}
1001507e:	4902      	ldr	r1, [pc, #8]	; (10015088 <_cleanup_r+0xc>)
10015080:	f000 f8b0 	bl	100151e4 <_fwalk_reent>
10015084:	bd10      	pop	{r4, pc}
10015086:	46c0      	nop			; (mov r8, r8)
10015088:	10015025 	.word	0x10015025

1001508c <std.isra.0>:
1001508c:	2300      	movs	r3, #0
1001508e:	b510      	push	{r4, lr}
10015090:	0004      	movs	r4, r0
10015092:	6003      	str	r3, [r0, #0]
10015094:	6043      	str	r3, [r0, #4]
10015096:	6083      	str	r3, [r0, #8]
10015098:	8181      	strh	r1, [r0, #12]
1001509a:	6643      	str	r3, [r0, #100]	; 0x64
1001509c:	81c2      	strh	r2, [r0, #14]
1001509e:	6103      	str	r3, [r0, #16]
100150a0:	6143      	str	r3, [r0, #20]
100150a2:	6183      	str	r3, [r0, #24]
100150a4:	0019      	movs	r1, r3
100150a6:	2208      	movs	r2, #8
100150a8:	305c      	adds	r0, #92	; 0x5c
100150aa:	f7ff fc21 	bl	100148f0 <memset>
100150ae:	4b05      	ldr	r3, [pc, #20]	; (100150c4 <std.isra.0+0x38>)
100150b0:	6224      	str	r4, [r4, #32]
100150b2:	6263      	str	r3, [r4, #36]	; 0x24
100150b4:	4b04      	ldr	r3, [pc, #16]	; (100150c8 <std.isra.0+0x3c>)
100150b6:	62a3      	str	r3, [r4, #40]	; 0x28
100150b8:	4b04      	ldr	r3, [pc, #16]	; (100150cc <std.isra.0+0x40>)
100150ba:	62e3      	str	r3, [r4, #44]	; 0x2c
100150bc:	4b04      	ldr	r3, [pc, #16]	; (100150d0 <std.isra.0+0x44>)
100150be:	6323      	str	r3, [r4, #48]	; 0x30
100150c0:	bd10      	pop	{r4, pc}
100150c2:	46c0      	nop			; (mov r8, r8)
100150c4:	10015905 	.word	0x10015905
100150c8:	1001592d 	.word	0x1001592d
100150cc:	10015965 	.word	0x10015965
100150d0:	10015991 	.word	0x10015991

100150d4 <__sfmoreglue>:
100150d4:	b570      	push	{r4, r5, r6, lr}
100150d6:	2568      	movs	r5, #104	; 0x68
100150d8:	1e4b      	subs	r3, r1, #1
100150da:	435d      	muls	r5, r3
100150dc:	000e      	movs	r6, r1
100150de:	0029      	movs	r1, r5
100150e0:	3174      	adds	r1, #116	; 0x74
100150e2:	f7ff fc53 	bl	1001498c <_malloc_r>
100150e6:	1e04      	subs	r4, r0, #0
100150e8:	d008      	beq.n	100150fc <__sfmoreglue+0x28>
100150ea:	2100      	movs	r1, #0
100150ec:	002a      	movs	r2, r5
100150ee:	6001      	str	r1, [r0, #0]
100150f0:	6046      	str	r6, [r0, #4]
100150f2:	300c      	adds	r0, #12
100150f4:	60a0      	str	r0, [r4, #8]
100150f6:	3268      	adds	r2, #104	; 0x68
100150f8:	f7ff fbfa 	bl	100148f0 <memset>
100150fc:	0020      	movs	r0, r4
100150fe:	bd70      	pop	{r4, r5, r6, pc}

10015100 <__sinit>:
10015100:	6983      	ldr	r3, [r0, #24]
10015102:	b513      	push	{r0, r1, r4, lr}
10015104:	0004      	movs	r4, r0
10015106:	2b00      	cmp	r3, #0
10015108:	d128      	bne.n	1001515c <__sinit+0x5c>
1001510a:	6483      	str	r3, [r0, #72]	; 0x48
1001510c:	64c3      	str	r3, [r0, #76]	; 0x4c
1001510e:	6503      	str	r3, [r0, #80]	; 0x50
10015110:	4b13      	ldr	r3, [pc, #76]	; (10015160 <__sinit+0x60>)
10015112:	4a14      	ldr	r2, [pc, #80]	; (10015164 <__sinit+0x64>)
10015114:	681b      	ldr	r3, [r3, #0]
10015116:	6282      	str	r2, [r0, #40]	; 0x28
10015118:	9301      	str	r3, [sp, #4]
1001511a:	4298      	cmp	r0, r3
1001511c:	d101      	bne.n	10015122 <__sinit+0x22>
1001511e:	2301      	movs	r3, #1
10015120:	6183      	str	r3, [r0, #24]
10015122:	0020      	movs	r0, r4
10015124:	f000 f820 	bl	10015168 <__sfp>
10015128:	6060      	str	r0, [r4, #4]
1001512a:	0020      	movs	r0, r4
1001512c:	f000 f81c 	bl	10015168 <__sfp>
10015130:	60a0      	str	r0, [r4, #8]
10015132:	0020      	movs	r0, r4
10015134:	f000 f818 	bl	10015168 <__sfp>
10015138:	2200      	movs	r2, #0
1001513a:	60e0      	str	r0, [r4, #12]
1001513c:	2104      	movs	r1, #4
1001513e:	6860      	ldr	r0, [r4, #4]
10015140:	f7ff ffa4 	bl	1001508c <std.isra.0>
10015144:	2201      	movs	r2, #1
10015146:	2109      	movs	r1, #9
10015148:	68a0      	ldr	r0, [r4, #8]
1001514a:	f7ff ff9f 	bl	1001508c <std.isra.0>
1001514e:	2202      	movs	r2, #2
10015150:	2112      	movs	r1, #18
10015152:	68e0      	ldr	r0, [r4, #12]
10015154:	f7ff ff9a 	bl	1001508c <std.isra.0>
10015158:	2301      	movs	r3, #1
1001515a:	61a3      	str	r3, [r4, #24]
1001515c:	bd13      	pop	{r0, r1, r4, pc}
1001515e:	46c0      	nop			; (mov r8, r8)
10015160:	10016fa8 	.word	0x10016fa8
10015164:	1001507d 	.word	0x1001507d

10015168 <__sfp>:
10015168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001516a:	4b1d      	ldr	r3, [pc, #116]	; (100151e0 <__sfp+0x78>)
1001516c:	0006      	movs	r6, r0
1001516e:	681d      	ldr	r5, [r3, #0]
10015170:	69ab      	ldr	r3, [r5, #24]
10015172:	2b00      	cmp	r3, #0
10015174:	d102      	bne.n	1001517c <__sfp+0x14>
10015176:	0028      	movs	r0, r5
10015178:	f7ff ffc2 	bl	10015100 <__sinit>
1001517c:	3548      	adds	r5, #72	; 0x48
1001517e:	68ac      	ldr	r4, [r5, #8]
10015180:	686b      	ldr	r3, [r5, #4]
10015182:	3b01      	subs	r3, #1
10015184:	d405      	bmi.n	10015192 <__sfp+0x2a>
10015186:	220c      	movs	r2, #12
10015188:	5ea7      	ldrsh	r7, [r4, r2]
1001518a:	2f00      	cmp	r7, #0
1001518c:	d010      	beq.n	100151b0 <__sfp+0x48>
1001518e:	3468      	adds	r4, #104	; 0x68
10015190:	e7f7      	b.n	10015182 <__sfp+0x1a>
10015192:	682b      	ldr	r3, [r5, #0]
10015194:	2b00      	cmp	r3, #0
10015196:	d001      	beq.n	1001519c <__sfp+0x34>
10015198:	682d      	ldr	r5, [r5, #0]
1001519a:	e7f0      	b.n	1001517e <__sfp+0x16>
1001519c:	2104      	movs	r1, #4
1001519e:	0030      	movs	r0, r6
100151a0:	f7ff ff98 	bl	100150d4 <__sfmoreglue>
100151a4:	6028      	str	r0, [r5, #0]
100151a6:	2800      	cmp	r0, #0
100151a8:	d1f6      	bne.n	10015198 <__sfp+0x30>
100151aa:	230c      	movs	r3, #12
100151ac:	6033      	str	r3, [r6, #0]
100151ae:	e016      	b.n	100151de <__sfp+0x76>
100151b0:	2301      	movs	r3, #1
100151b2:	0020      	movs	r0, r4
100151b4:	425b      	negs	r3, r3
100151b6:	81e3      	strh	r3, [r4, #14]
100151b8:	3302      	adds	r3, #2
100151ba:	81a3      	strh	r3, [r4, #12]
100151bc:	6667      	str	r7, [r4, #100]	; 0x64
100151be:	6027      	str	r7, [r4, #0]
100151c0:	60a7      	str	r7, [r4, #8]
100151c2:	6067      	str	r7, [r4, #4]
100151c4:	6127      	str	r7, [r4, #16]
100151c6:	6167      	str	r7, [r4, #20]
100151c8:	61a7      	str	r7, [r4, #24]
100151ca:	305c      	adds	r0, #92	; 0x5c
100151cc:	2208      	movs	r2, #8
100151ce:	0039      	movs	r1, r7
100151d0:	f7ff fb8e 	bl	100148f0 <memset>
100151d4:	0020      	movs	r0, r4
100151d6:	6367      	str	r7, [r4, #52]	; 0x34
100151d8:	63a7      	str	r7, [r4, #56]	; 0x38
100151da:	64a7      	str	r7, [r4, #72]	; 0x48
100151dc:	64e7      	str	r7, [r4, #76]	; 0x4c
100151de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100151e0:	10016fa8 	.word	0x10016fa8

100151e4 <_fwalk_reent>:
100151e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100151e6:	0004      	movs	r4, r0
100151e8:	0007      	movs	r7, r0
100151ea:	2600      	movs	r6, #0
100151ec:	9101      	str	r1, [sp, #4]
100151ee:	3448      	adds	r4, #72	; 0x48
100151f0:	2c00      	cmp	r4, #0
100151f2:	d016      	beq.n	10015222 <_fwalk_reent+0x3e>
100151f4:	6863      	ldr	r3, [r4, #4]
100151f6:	68a5      	ldr	r5, [r4, #8]
100151f8:	9300      	str	r3, [sp, #0]
100151fa:	9b00      	ldr	r3, [sp, #0]
100151fc:	3b01      	subs	r3, #1
100151fe:	9300      	str	r3, [sp, #0]
10015200:	d40d      	bmi.n	1001521e <_fwalk_reent+0x3a>
10015202:	89ab      	ldrh	r3, [r5, #12]
10015204:	2b01      	cmp	r3, #1
10015206:	d908      	bls.n	1001521a <_fwalk_reent+0x36>
10015208:	220e      	movs	r2, #14
1001520a:	5eab      	ldrsh	r3, [r5, r2]
1001520c:	3301      	adds	r3, #1
1001520e:	d004      	beq.n	1001521a <_fwalk_reent+0x36>
10015210:	0029      	movs	r1, r5
10015212:	0038      	movs	r0, r7
10015214:	9b01      	ldr	r3, [sp, #4]
10015216:	4798      	blx	r3
10015218:	4306      	orrs	r6, r0
1001521a:	3568      	adds	r5, #104	; 0x68
1001521c:	e7ed      	b.n	100151fa <_fwalk_reent+0x16>
1001521e:	6824      	ldr	r4, [r4, #0]
10015220:	e7e6      	b.n	100151f0 <_fwalk_reent+0xc>
10015222:	0030      	movs	r0, r6
10015224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015228 <__swhatbuf_r>:
10015228:	b570      	push	{r4, r5, r6, lr}
1001522a:	000e      	movs	r6, r1
1001522c:	001d      	movs	r5, r3
1001522e:	230e      	movs	r3, #14
10015230:	5ec9      	ldrsh	r1, [r1, r3]
10015232:	b090      	sub	sp, #64	; 0x40
10015234:	0014      	movs	r4, r2
10015236:	2900      	cmp	r1, #0
10015238:	da06      	bge.n	10015248 <__swhatbuf_r+0x20>
1001523a:	2300      	movs	r3, #0
1001523c:	602b      	str	r3, [r5, #0]
1001523e:	89b3      	ldrh	r3, [r6, #12]
10015240:	061b      	lsls	r3, r3, #24
10015242:	d50f      	bpl.n	10015264 <__swhatbuf_r+0x3c>
10015244:	2340      	movs	r3, #64	; 0x40
10015246:	e00f      	b.n	10015268 <__swhatbuf_r+0x40>
10015248:	aa01      	add	r2, sp, #4
1001524a:	f000 fbcd 	bl	100159e8 <_fstat_r>
1001524e:	2800      	cmp	r0, #0
10015250:	dbf3      	blt.n	1001523a <__swhatbuf_r+0x12>
10015252:	23f0      	movs	r3, #240	; 0xf0
10015254:	9a02      	ldr	r2, [sp, #8]
10015256:	021b      	lsls	r3, r3, #8
10015258:	4013      	ands	r3, r2
1001525a:	4a05      	ldr	r2, [pc, #20]	; (10015270 <__swhatbuf_r+0x48>)
1001525c:	189b      	adds	r3, r3, r2
1001525e:	425a      	negs	r2, r3
10015260:	4153      	adcs	r3, r2
10015262:	602b      	str	r3, [r5, #0]
10015264:	2380      	movs	r3, #128	; 0x80
10015266:	00db      	lsls	r3, r3, #3
10015268:	2000      	movs	r0, #0
1001526a:	6023      	str	r3, [r4, #0]
1001526c:	b010      	add	sp, #64	; 0x40
1001526e:	bd70      	pop	{r4, r5, r6, pc}
10015270:	ffffe000 	.word	0xffffe000

10015274 <__smakebuf_r>:
10015274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015276:	2602      	movs	r6, #2
10015278:	898b      	ldrh	r3, [r1, #12]
1001527a:	0005      	movs	r5, r0
1001527c:	000c      	movs	r4, r1
1001527e:	4233      	tst	r3, r6
10015280:	d110      	bne.n	100152a4 <__smakebuf_r+0x30>
10015282:	ab01      	add	r3, sp, #4
10015284:	466a      	mov	r2, sp
10015286:	f7ff ffcf 	bl	10015228 <__swhatbuf_r>
1001528a:	9900      	ldr	r1, [sp, #0]
1001528c:	0007      	movs	r7, r0
1001528e:	0028      	movs	r0, r5
10015290:	f7ff fb7c 	bl	1001498c <_malloc_r>
10015294:	2800      	cmp	r0, #0
10015296:	d10c      	bne.n	100152b2 <__smakebuf_r+0x3e>
10015298:	220c      	movs	r2, #12
1001529a:	5ea3      	ldrsh	r3, [r4, r2]
1001529c:	059a      	lsls	r2, r3, #22
1001529e:	d423      	bmi.n	100152e8 <__smakebuf_r+0x74>
100152a0:	4333      	orrs	r3, r6
100152a2:	81a3      	strh	r3, [r4, #12]
100152a4:	0023      	movs	r3, r4
100152a6:	3347      	adds	r3, #71	; 0x47
100152a8:	6023      	str	r3, [r4, #0]
100152aa:	6123      	str	r3, [r4, #16]
100152ac:	2301      	movs	r3, #1
100152ae:	6163      	str	r3, [r4, #20]
100152b0:	e01a      	b.n	100152e8 <__smakebuf_r+0x74>
100152b2:	2280      	movs	r2, #128	; 0x80
100152b4:	4b0d      	ldr	r3, [pc, #52]	; (100152ec <__smakebuf_r+0x78>)
100152b6:	62ab      	str	r3, [r5, #40]	; 0x28
100152b8:	89a3      	ldrh	r3, [r4, #12]
100152ba:	6020      	str	r0, [r4, #0]
100152bc:	4313      	orrs	r3, r2
100152be:	81a3      	strh	r3, [r4, #12]
100152c0:	9b00      	ldr	r3, [sp, #0]
100152c2:	6120      	str	r0, [r4, #16]
100152c4:	6163      	str	r3, [r4, #20]
100152c6:	9b01      	ldr	r3, [sp, #4]
100152c8:	2b00      	cmp	r3, #0
100152ca:	d00a      	beq.n	100152e2 <__smakebuf_r+0x6e>
100152cc:	230e      	movs	r3, #14
100152ce:	5ee1      	ldrsh	r1, [r4, r3]
100152d0:	0028      	movs	r0, r5
100152d2:	f000 fb9b 	bl	10015a0c <_isatty_r>
100152d6:	2800      	cmp	r0, #0
100152d8:	d003      	beq.n	100152e2 <__smakebuf_r+0x6e>
100152da:	2201      	movs	r2, #1
100152dc:	89a3      	ldrh	r3, [r4, #12]
100152de:	4313      	orrs	r3, r2
100152e0:	81a3      	strh	r3, [r4, #12]
100152e2:	89a3      	ldrh	r3, [r4, #12]
100152e4:	431f      	orrs	r7, r3
100152e6:	81a7      	strh	r7, [r4, #12]
100152e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100152ea:	46c0      	nop			; (mov r8, r8)
100152ec:	1001507d 	.word	0x1001507d

100152f0 <__sfputc_r>:
100152f0:	6893      	ldr	r3, [r2, #8]
100152f2:	b510      	push	{r4, lr}
100152f4:	3b01      	subs	r3, #1
100152f6:	6093      	str	r3, [r2, #8]
100152f8:	2b00      	cmp	r3, #0
100152fa:	da05      	bge.n	10015308 <__sfputc_r+0x18>
100152fc:	6994      	ldr	r4, [r2, #24]
100152fe:	42a3      	cmp	r3, r4
10015300:	db08      	blt.n	10015314 <__sfputc_r+0x24>
10015302:	b2cb      	uxtb	r3, r1
10015304:	2b0a      	cmp	r3, #10
10015306:	d005      	beq.n	10015314 <__sfputc_r+0x24>
10015308:	6813      	ldr	r3, [r2, #0]
1001530a:	1c58      	adds	r0, r3, #1
1001530c:	6010      	str	r0, [r2, #0]
1001530e:	7019      	strb	r1, [r3, #0]
10015310:	b2c8      	uxtb	r0, r1
10015312:	e001      	b.n	10015318 <__sfputc_r+0x28>
10015314:	f7ff fd32 	bl	10014d7c <__swbuf_r>
10015318:	bd10      	pop	{r4, pc}

1001531a <__sfputs_r>:
1001531a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001531c:	0006      	movs	r6, r0
1001531e:	000f      	movs	r7, r1
10015320:	0014      	movs	r4, r2
10015322:	18d5      	adds	r5, r2, r3
10015324:	42ac      	cmp	r4, r5
10015326:	d008      	beq.n	1001533a <__sfputs_r+0x20>
10015328:	7821      	ldrb	r1, [r4, #0]
1001532a:	003a      	movs	r2, r7
1001532c:	0030      	movs	r0, r6
1001532e:	f7ff ffdf 	bl	100152f0 <__sfputc_r>
10015332:	3401      	adds	r4, #1
10015334:	1c43      	adds	r3, r0, #1
10015336:	d1f5      	bne.n	10015324 <__sfputs_r+0xa>
10015338:	e000      	b.n	1001533c <__sfputs_r+0x22>
1001533a:	2000      	movs	r0, #0
1001533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015340 <_vfiprintf_r>:
10015340:	b5f0      	push	{r4, r5, r6, r7, lr}
10015342:	b09f      	sub	sp, #124	; 0x7c
10015344:	0006      	movs	r6, r0
10015346:	000f      	movs	r7, r1
10015348:	9202      	str	r2, [sp, #8]
1001534a:	9305      	str	r3, [sp, #20]
1001534c:	2800      	cmp	r0, #0
1001534e:	d004      	beq.n	1001535a <_vfiprintf_r+0x1a>
10015350:	6983      	ldr	r3, [r0, #24]
10015352:	2b00      	cmp	r3, #0
10015354:	d101      	bne.n	1001535a <_vfiprintf_r+0x1a>
10015356:	f7ff fed3 	bl	10015100 <__sinit>
1001535a:	4b7f      	ldr	r3, [pc, #508]	; (10015558 <_vfiprintf_r+0x218>)
1001535c:	429f      	cmp	r7, r3
1001535e:	d101      	bne.n	10015364 <_vfiprintf_r+0x24>
10015360:	6877      	ldr	r7, [r6, #4]
10015362:	e008      	b.n	10015376 <_vfiprintf_r+0x36>
10015364:	4b7d      	ldr	r3, [pc, #500]	; (1001555c <_vfiprintf_r+0x21c>)
10015366:	429f      	cmp	r7, r3
10015368:	d101      	bne.n	1001536e <_vfiprintf_r+0x2e>
1001536a:	68b7      	ldr	r7, [r6, #8]
1001536c:	e003      	b.n	10015376 <_vfiprintf_r+0x36>
1001536e:	4b7c      	ldr	r3, [pc, #496]	; (10015560 <_vfiprintf_r+0x220>)
10015370:	429f      	cmp	r7, r3
10015372:	d100      	bne.n	10015376 <_vfiprintf_r+0x36>
10015374:	68f7      	ldr	r7, [r6, #12]
10015376:	89bb      	ldrh	r3, [r7, #12]
10015378:	071b      	lsls	r3, r3, #28
1001537a:	d50a      	bpl.n	10015392 <_vfiprintf_r+0x52>
1001537c:	693b      	ldr	r3, [r7, #16]
1001537e:	2b00      	cmp	r3, #0
10015380:	d007      	beq.n	10015392 <_vfiprintf_r+0x52>
10015382:	2300      	movs	r3, #0
10015384:	ad06      	add	r5, sp, #24
10015386:	616b      	str	r3, [r5, #20]
10015388:	3320      	adds	r3, #32
1001538a:	766b      	strb	r3, [r5, #25]
1001538c:	3310      	adds	r3, #16
1001538e:	76ab      	strb	r3, [r5, #26]
10015390:	e03d      	b.n	1001540e <_vfiprintf_r+0xce>
10015392:	0039      	movs	r1, r7
10015394:	0030      	movs	r0, r6
10015396:	f7ff fd49 	bl	10014e2c <__swsetup_r>
1001539a:	2800      	cmp	r0, #0
1001539c:	d0f1      	beq.n	10015382 <_vfiprintf_r+0x42>
1001539e:	2001      	movs	r0, #1
100153a0:	4240      	negs	r0, r0
100153a2:	e0d6      	b.n	10015552 <_vfiprintf_r+0x212>
100153a4:	9a05      	ldr	r2, [sp, #20]
100153a6:	1d11      	adds	r1, r2, #4
100153a8:	6812      	ldr	r2, [r2, #0]
100153aa:	9105      	str	r1, [sp, #20]
100153ac:	2a00      	cmp	r2, #0
100153ae:	da00      	bge.n	100153b2 <_vfiprintf_r+0x72>
100153b0:	e07f      	b.n	100154b2 <_vfiprintf_r+0x172>
100153b2:	9209      	str	r2, [sp, #36]	; 0x24
100153b4:	3401      	adds	r4, #1
100153b6:	7823      	ldrb	r3, [r4, #0]
100153b8:	2b2e      	cmp	r3, #46	; 0x2e
100153ba:	d100      	bne.n	100153be <_vfiprintf_r+0x7e>
100153bc:	e08d      	b.n	100154da <_vfiprintf_r+0x19a>
100153be:	7821      	ldrb	r1, [r4, #0]
100153c0:	2203      	movs	r2, #3
100153c2:	4868      	ldr	r0, [pc, #416]	; (10015564 <_vfiprintf_r+0x224>)
100153c4:	f000 fb48 	bl	10015a58 <memchr>
100153c8:	2800      	cmp	r0, #0
100153ca:	d007      	beq.n	100153dc <_vfiprintf_r+0x9c>
100153cc:	4b65      	ldr	r3, [pc, #404]	; (10015564 <_vfiprintf_r+0x224>)
100153ce:	682a      	ldr	r2, [r5, #0]
100153d0:	1ac0      	subs	r0, r0, r3
100153d2:	2340      	movs	r3, #64	; 0x40
100153d4:	4083      	lsls	r3, r0
100153d6:	4313      	orrs	r3, r2
100153d8:	602b      	str	r3, [r5, #0]
100153da:	3401      	adds	r4, #1
100153dc:	7821      	ldrb	r1, [r4, #0]
100153de:	1c63      	adds	r3, r4, #1
100153e0:	2206      	movs	r2, #6
100153e2:	4861      	ldr	r0, [pc, #388]	; (10015568 <_vfiprintf_r+0x228>)
100153e4:	9302      	str	r3, [sp, #8]
100153e6:	7629      	strb	r1, [r5, #24]
100153e8:	f000 fb36 	bl	10015a58 <memchr>
100153ec:	2800      	cmp	r0, #0
100153ee:	d100      	bne.n	100153f2 <_vfiprintf_r+0xb2>
100153f0:	e09d      	b.n	1001552e <_vfiprintf_r+0x1ee>
100153f2:	4b5e      	ldr	r3, [pc, #376]	; (1001556c <_vfiprintf_r+0x22c>)
100153f4:	2b00      	cmp	r3, #0
100153f6:	d000      	beq.n	100153fa <_vfiprintf_r+0xba>
100153f8:	e090      	b.n	1001551c <_vfiprintf_r+0x1dc>
100153fa:	2207      	movs	r2, #7
100153fc:	9b05      	ldr	r3, [sp, #20]
100153fe:	3307      	adds	r3, #7
10015400:	4393      	bics	r3, r2
10015402:	3308      	adds	r3, #8
10015404:	9305      	str	r3, [sp, #20]
10015406:	696b      	ldr	r3, [r5, #20]
10015408:	9a03      	ldr	r2, [sp, #12]
1001540a:	189b      	adds	r3, r3, r2
1001540c:	616b      	str	r3, [r5, #20]
1001540e:	9c02      	ldr	r4, [sp, #8]
10015410:	7823      	ldrb	r3, [r4, #0]
10015412:	2b00      	cmp	r3, #0
10015414:	d104      	bne.n	10015420 <_vfiprintf_r+0xe0>
10015416:	9b02      	ldr	r3, [sp, #8]
10015418:	1ae3      	subs	r3, r4, r3
1001541a:	9304      	str	r3, [sp, #16]
1001541c:	d012      	beq.n	10015444 <_vfiprintf_r+0x104>
1001541e:	e003      	b.n	10015428 <_vfiprintf_r+0xe8>
10015420:	2b25      	cmp	r3, #37	; 0x25
10015422:	d0f8      	beq.n	10015416 <_vfiprintf_r+0xd6>
10015424:	3401      	adds	r4, #1
10015426:	e7f3      	b.n	10015410 <_vfiprintf_r+0xd0>
10015428:	9b04      	ldr	r3, [sp, #16]
1001542a:	9a02      	ldr	r2, [sp, #8]
1001542c:	0039      	movs	r1, r7
1001542e:	0030      	movs	r0, r6
10015430:	f7ff ff73 	bl	1001531a <__sfputs_r>
10015434:	1c43      	adds	r3, r0, #1
10015436:	d100      	bne.n	1001543a <_vfiprintf_r+0xfa>
10015438:	e086      	b.n	10015548 <_vfiprintf_r+0x208>
1001543a:	696a      	ldr	r2, [r5, #20]
1001543c:	9b04      	ldr	r3, [sp, #16]
1001543e:	4694      	mov	ip, r2
10015440:	4463      	add	r3, ip
10015442:	616b      	str	r3, [r5, #20]
10015444:	7823      	ldrb	r3, [r4, #0]
10015446:	2b00      	cmp	r3, #0
10015448:	d07e      	beq.n	10015548 <_vfiprintf_r+0x208>
1001544a:	2201      	movs	r2, #1
1001544c:	2300      	movs	r3, #0
1001544e:	4252      	negs	r2, r2
10015450:	606a      	str	r2, [r5, #4]
10015452:	a902      	add	r1, sp, #8
10015454:	3254      	adds	r2, #84	; 0x54
10015456:	1852      	adds	r2, r2, r1
10015458:	3401      	adds	r4, #1
1001545a:	602b      	str	r3, [r5, #0]
1001545c:	60eb      	str	r3, [r5, #12]
1001545e:	60ab      	str	r3, [r5, #8]
10015460:	7013      	strb	r3, [r2, #0]
10015462:	65ab      	str	r3, [r5, #88]	; 0x58
10015464:	7821      	ldrb	r1, [r4, #0]
10015466:	2205      	movs	r2, #5
10015468:	4841      	ldr	r0, [pc, #260]	; (10015570 <_vfiprintf_r+0x230>)
1001546a:	f000 faf5 	bl	10015a58 <memchr>
1001546e:	2800      	cmp	r0, #0
10015470:	d008      	beq.n	10015484 <_vfiprintf_r+0x144>
10015472:	4b3f      	ldr	r3, [pc, #252]	; (10015570 <_vfiprintf_r+0x230>)
10015474:	682a      	ldr	r2, [r5, #0]
10015476:	1ac0      	subs	r0, r0, r3
10015478:	2301      	movs	r3, #1
1001547a:	4083      	lsls	r3, r0
1001547c:	4313      	orrs	r3, r2
1001547e:	602b      	str	r3, [r5, #0]
10015480:	3401      	adds	r4, #1
10015482:	e7ef      	b.n	10015464 <_vfiprintf_r+0x124>
10015484:	682b      	ldr	r3, [r5, #0]
10015486:	06da      	lsls	r2, r3, #27
10015488:	d504      	bpl.n	10015494 <_vfiprintf_r+0x154>
1001548a:	2253      	movs	r2, #83	; 0x53
1001548c:	2120      	movs	r1, #32
1001548e:	a802      	add	r0, sp, #8
10015490:	1812      	adds	r2, r2, r0
10015492:	7011      	strb	r1, [r2, #0]
10015494:	071a      	lsls	r2, r3, #28
10015496:	d504      	bpl.n	100154a2 <_vfiprintf_r+0x162>
10015498:	2253      	movs	r2, #83	; 0x53
1001549a:	212b      	movs	r1, #43	; 0x2b
1001549c:	a802      	add	r0, sp, #8
1001549e:	1812      	adds	r2, r2, r0
100154a0:	7011      	strb	r1, [r2, #0]
100154a2:	7822      	ldrb	r2, [r4, #0]
100154a4:	2a2a      	cmp	r2, #42	; 0x2a
100154a6:	d100      	bne.n	100154aa <_vfiprintf_r+0x16a>
100154a8:	e77c      	b.n	100153a4 <_vfiprintf_r+0x64>
100154aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
100154ac:	2000      	movs	r0, #0
100154ae:	210a      	movs	r1, #10
100154b0:	e005      	b.n	100154be <_vfiprintf_r+0x17e>
100154b2:	4252      	negs	r2, r2
100154b4:	60ea      	str	r2, [r5, #12]
100154b6:	2202      	movs	r2, #2
100154b8:	4313      	orrs	r3, r2
100154ba:	602b      	str	r3, [r5, #0]
100154bc:	e77a      	b.n	100153b4 <_vfiprintf_r+0x74>
100154be:	7822      	ldrb	r2, [r4, #0]
100154c0:	3a30      	subs	r2, #48	; 0x30
100154c2:	2a09      	cmp	r2, #9
100154c4:	d804      	bhi.n	100154d0 <_vfiprintf_r+0x190>
100154c6:	434b      	muls	r3, r1
100154c8:	3401      	adds	r4, #1
100154ca:	189b      	adds	r3, r3, r2
100154cc:	2001      	movs	r0, #1
100154ce:	e7f6      	b.n	100154be <_vfiprintf_r+0x17e>
100154d0:	2800      	cmp	r0, #0
100154d2:	d100      	bne.n	100154d6 <_vfiprintf_r+0x196>
100154d4:	e76f      	b.n	100153b6 <_vfiprintf_r+0x76>
100154d6:	9309      	str	r3, [sp, #36]	; 0x24
100154d8:	e76d      	b.n	100153b6 <_vfiprintf_r+0x76>
100154da:	7863      	ldrb	r3, [r4, #1]
100154dc:	2b2a      	cmp	r3, #42	; 0x2a
100154de:	d10a      	bne.n	100154f6 <_vfiprintf_r+0x1b6>
100154e0:	9b05      	ldr	r3, [sp, #20]
100154e2:	3402      	adds	r4, #2
100154e4:	1d1a      	adds	r2, r3, #4
100154e6:	681b      	ldr	r3, [r3, #0]
100154e8:	9205      	str	r2, [sp, #20]
100154ea:	2b00      	cmp	r3, #0
100154ec:	da01      	bge.n	100154f2 <_vfiprintf_r+0x1b2>
100154ee:	2301      	movs	r3, #1
100154f0:	425b      	negs	r3, r3
100154f2:	9307      	str	r3, [sp, #28]
100154f4:	e763      	b.n	100153be <_vfiprintf_r+0x7e>
100154f6:	2300      	movs	r3, #0
100154f8:	200a      	movs	r0, #10
100154fa:	001a      	movs	r2, r3
100154fc:	3401      	adds	r4, #1
100154fe:	606b      	str	r3, [r5, #4]
10015500:	7821      	ldrb	r1, [r4, #0]
10015502:	3930      	subs	r1, #48	; 0x30
10015504:	2909      	cmp	r1, #9
10015506:	d804      	bhi.n	10015512 <_vfiprintf_r+0x1d2>
10015508:	4342      	muls	r2, r0
1001550a:	3401      	adds	r4, #1
1001550c:	1852      	adds	r2, r2, r1
1001550e:	2301      	movs	r3, #1
10015510:	e7f6      	b.n	10015500 <_vfiprintf_r+0x1c0>
10015512:	2b00      	cmp	r3, #0
10015514:	d100      	bne.n	10015518 <_vfiprintf_r+0x1d8>
10015516:	e752      	b.n	100153be <_vfiprintf_r+0x7e>
10015518:	9207      	str	r2, [sp, #28]
1001551a:	e750      	b.n	100153be <_vfiprintf_r+0x7e>
1001551c:	ab05      	add	r3, sp, #20
1001551e:	9300      	str	r3, [sp, #0]
10015520:	003a      	movs	r2, r7
10015522:	4b14      	ldr	r3, [pc, #80]	; (10015574 <_vfiprintf_r+0x234>)
10015524:	0029      	movs	r1, r5
10015526:	0030      	movs	r0, r6
10015528:	e000      	b.n	1001552c <_vfiprintf_r+0x1ec>
1001552a:	bf00      	nop
1001552c:	e007      	b.n	1001553e <_vfiprintf_r+0x1fe>
1001552e:	ab05      	add	r3, sp, #20
10015530:	9300      	str	r3, [sp, #0]
10015532:	003a      	movs	r2, r7
10015534:	4b0f      	ldr	r3, [pc, #60]	; (10015574 <_vfiprintf_r+0x234>)
10015536:	0029      	movs	r1, r5
10015538:	0030      	movs	r0, r6
1001553a:	f000 f88b 	bl	10015654 <_printf_i>
1001553e:	9003      	str	r0, [sp, #12]
10015540:	9b03      	ldr	r3, [sp, #12]
10015542:	3301      	adds	r3, #1
10015544:	d000      	beq.n	10015548 <_vfiprintf_r+0x208>
10015546:	e75e      	b.n	10015406 <_vfiprintf_r+0xc6>
10015548:	89bb      	ldrh	r3, [r7, #12]
1001554a:	065b      	lsls	r3, r3, #25
1001554c:	d500      	bpl.n	10015550 <_vfiprintf_r+0x210>
1001554e:	e726      	b.n	1001539e <_vfiprintf_r+0x5e>
10015550:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015552:	b01f      	add	sp, #124	; 0x7c
10015554:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015556:	46c0      	nop			; (mov r8, r8)
10015558:	10016fac 	.word	0x10016fac
1001555c:	10016fcc 	.word	0x10016fcc
10015560:	10016fec 	.word	0x10016fec
10015564:	10017012 	.word	0x10017012
10015568:	10017016 	.word	0x10017016
1001556c:	00000000 	.word	0x00000000
10015570:	1001700c 	.word	0x1001700c
10015574:	1001531b 	.word	0x1001531b

10015578 <_printf_common>:
10015578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001557a:	0017      	movs	r7, r2
1001557c:	9301      	str	r3, [sp, #4]
1001557e:	688a      	ldr	r2, [r1, #8]
10015580:	690b      	ldr	r3, [r1, #16]
10015582:	9000      	str	r0, [sp, #0]
10015584:	000c      	movs	r4, r1
10015586:	4293      	cmp	r3, r2
10015588:	da00      	bge.n	1001558c <_printf_common+0x14>
1001558a:	0013      	movs	r3, r2
1001558c:	0022      	movs	r2, r4
1001558e:	603b      	str	r3, [r7, #0]
10015590:	3243      	adds	r2, #67	; 0x43
10015592:	7812      	ldrb	r2, [r2, #0]
10015594:	2a00      	cmp	r2, #0
10015596:	d001      	beq.n	1001559c <_printf_common+0x24>
10015598:	3301      	adds	r3, #1
1001559a:	603b      	str	r3, [r7, #0]
1001559c:	6823      	ldr	r3, [r4, #0]
1001559e:	069b      	lsls	r3, r3, #26
100155a0:	d502      	bpl.n	100155a8 <_printf_common+0x30>
100155a2:	683b      	ldr	r3, [r7, #0]
100155a4:	3302      	adds	r3, #2
100155a6:	603b      	str	r3, [r7, #0]
100155a8:	2506      	movs	r5, #6
100155aa:	6823      	ldr	r3, [r4, #0]
100155ac:	401d      	ands	r5, r3
100155ae:	d01e      	beq.n	100155ee <_printf_common+0x76>
100155b0:	0023      	movs	r3, r4
100155b2:	3343      	adds	r3, #67	; 0x43
100155b4:	781b      	ldrb	r3, [r3, #0]
100155b6:	1e5a      	subs	r2, r3, #1
100155b8:	4193      	sbcs	r3, r2
100155ba:	6822      	ldr	r2, [r4, #0]
100155bc:	0692      	lsls	r2, r2, #26
100155be:	d51c      	bpl.n	100155fa <_printf_common+0x82>
100155c0:	2030      	movs	r0, #48	; 0x30
100155c2:	18e1      	adds	r1, r4, r3
100155c4:	3143      	adds	r1, #67	; 0x43
100155c6:	7008      	strb	r0, [r1, #0]
100155c8:	0021      	movs	r1, r4
100155ca:	1c5a      	adds	r2, r3, #1
100155cc:	3145      	adds	r1, #69	; 0x45
100155ce:	7809      	ldrb	r1, [r1, #0]
100155d0:	18a2      	adds	r2, r4, r2
100155d2:	3243      	adds	r2, #67	; 0x43
100155d4:	3302      	adds	r3, #2
100155d6:	7011      	strb	r1, [r2, #0]
100155d8:	e00f      	b.n	100155fa <_printf_common+0x82>
100155da:	0022      	movs	r2, r4
100155dc:	2301      	movs	r3, #1
100155de:	3219      	adds	r2, #25
100155e0:	9901      	ldr	r1, [sp, #4]
100155e2:	9800      	ldr	r0, [sp, #0]
100155e4:	9e08      	ldr	r6, [sp, #32]
100155e6:	47b0      	blx	r6
100155e8:	1c43      	adds	r3, r0, #1
100155ea:	d00e      	beq.n	1001560a <_printf_common+0x92>
100155ec:	3501      	adds	r5, #1
100155ee:	68e3      	ldr	r3, [r4, #12]
100155f0:	683a      	ldr	r2, [r7, #0]
100155f2:	1a9b      	subs	r3, r3, r2
100155f4:	429d      	cmp	r5, r3
100155f6:	dbf0      	blt.n	100155da <_printf_common+0x62>
100155f8:	e7da      	b.n	100155b0 <_printf_common+0x38>
100155fa:	0022      	movs	r2, r4
100155fc:	9901      	ldr	r1, [sp, #4]
100155fe:	3243      	adds	r2, #67	; 0x43
10015600:	9800      	ldr	r0, [sp, #0]
10015602:	9d08      	ldr	r5, [sp, #32]
10015604:	47a8      	blx	r5
10015606:	1c43      	adds	r3, r0, #1
10015608:	d102      	bne.n	10015610 <_printf_common+0x98>
1001560a:	2001      	movs	r0, #1
1001560c:	4240      	negs	r0, r0
1001560e:	e020      	b.n	10015652 <_printf_common+0xda>
10015610:	2306      	movs	r3, #6
10015612:	6820      	ldr	r0, [r4, #0]
10015614:	68e1      	ldr	r1, [r4, #12]
10015616:	683a      	ldr	r2, [r7, #0]
10015618:	4003      	ands	r3, r0
1001561a:	2500      	movs	r5, #0
1001561c:	2b04      	cmp	r3, #4
1001561e:	d103      	bne.n	10015628 <_printf_common+0xb0>
10015620:	1a8d      	subs	r5, r1, r2
10015622:	43eb      	mvns	r3, r5
10015624:	17db      	asrs	r3, r3, #31
10015626:	401d      	ands	r5, r3
10015628:	68a3      	ldr	r3, [r4, #8]
1001562a:	6922      	ldr	r2, [r4, #16]
1001562c:	4293      	cmp	r3, r2
1001562e:	dd01      	ble.n	10015634 <_printf_common+0xbc>
10015630:	1a9b      	subs	r3, r3, r2
10015632:	18ed      	adds	r5, r5, r3
10015634:	2700      	movs	r7, #0
10015636:	42bd      	cmp	r5, r7
10015638:	d00a      	beq.n	10015650 <_printf_common+0xd8>
1001563a:	0022      	movs	r2, r4
1001563c:	2301      	movs	r3, #1
1001563e:	321a      	adds	r2, #26
10015640:	9901      	ldr	r1, [sp, #4]
10015642:	9800      	ldr	r0, [sp, #0]
10015644:	9e08      	ldr	r6, [sp, #32]
10015646:	47b0      	blx	r6
10015648:	1c43      	adds	r3, r0, #1
1001564a:	d0de      	beq.n	1001560a <_printf_common+0x92>
1001564c:	3701      	adds	r7, #1
1001564e:	e7f2      	b.n	10015636 <_printf_common+0xbe>
10015650:	2000      	movs	r0, #0
10015652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015654 <_printf_i>:
10015654:	b5f0      	push	{r4, r5, r6, r7, lr}
10015656:	b08b      	sub	sp, #44	; 0x2c
10015658:	9206      	str	r2, [sp, #24]
1001565a:	000a      	movs	r2, r1
1001565c:	3243      	adds	r2, #67	; 0x43
1001565e:	9307      	str	r3, [sp, #28]
10015660:	9005      	str	r0, [sp, #20]
10015662:	9204      	str	r2, [sp, #16]
10015664:	7e0a      	ldrb	r2, [r1, #24]
10015666:	000c      	movs	r4, r1
10015668:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001566a:	2a6e      	cmp	r2, #110	; 0x6e
1001566c:	d100      	bne.n	10015670 <_printf_i+0x1c>
1001566e:	e0ab      	b.n	100157c8 <_printf_i+0x174>
10015670:	d811      	bhi.n	10015696 <_printf_i+0x42>
10015672:	2a63      	cmp	r2, #99	; 0x63
10015674:	d022      	beq.n	100156bc <_printf_i+0x68>
10015676:	d809      	bhi.n	1001568c <_printf_i+0x38>
10015678:	2a00      	cmp	r2, #0
1001567a:	d100      	bne.n	1001567e <_printf_i+0x2a>
1001567c:	e0b5      	b.n	100157ea <_printf_i+0x196>
1001567e:	2a58      	cmp	r2, #88	; 0x58
10015680:	d000      	beq.n	10015684 <_printf_i+0x30>
10015682:	e0c5      	b.n	10015810 <_printf_i+0x1bc>
10015684:	3145      	adds	r1, #69	; 0x45
10015686:	700a      	strb	r2, [r1, #0]
10015688:	4a81      	ldr	r2, [pc, #516]	; (10015890 <_printf_i+0x23c>)
1001568a:	e04f      	b.n	1001572c <_printf_i+0xd8>
1001568c:	2a64      	cmp	r2, #100	; 0x64
1001568e:	d01d      	beq.n	100156cc <_printf_i+0x78>
10015690:	2a69      	cmp	r2, #105	; 0x69
10015692:	d01b      	beq.n	100156cc <_printf_i+0x78>
10015694:	e0bc      	b.n	10015810 <_printf_i+0x1bc>
10015696:	2a73      	cmp	r2, #115	; 0x73
10015698:	d100      	bne.n	1001569c <_printf_i+0x48>
1001569a:	e0aa      	b.n	100157f2 <_printf_i+0x19e>
1001569c:	d809      	bhi.n	100156b2 <_printf_i+0x5e>
1001569e:	2a6f      	cmp	r2, #111	; 0x6f
100156a0:	d029      	beq.n	100156f6 <_printf_i+0xa2>
100156a2:	2a70      	cmp	r2, #112	; 0x70
100156a4:	d000      	beq.n	100156a8 <_printf_i+0x54>
100156a6:	e0b3      	b.n	10015810 <_printf_i+0x1bc>
100156a8:	2220      	movs	r2, #32
100156aa:	6809      	ldr	r1, [r1, #0]
100156ac:	430a      	orrs	r2, r1
100156ae:	6022      	str	r2, [r4, #0]
100156b0:	e037      	b.n	10015722 <_printf_i+0xce>
100156b2:	2a75      	cmp	r2, #117	; 0x75
100156b4:	d01f      	beq.n	100156f6 <_printf_i+0xa2>
100156b6:	2a78      	cmp	r2, #120	; 0x78
100156b8:	d033      	beq.n	10015722 <_printf_i+0xce>
100156ba:	e0a9      	b.n	10015810 <_printf_i+0x1bc>
100156bc:	000e      	movs	r6, r1
100156be:	681a      	ldr	r2, [r3, #0]
100156c0:	3642      	adds	r6, #66	; 0x42
100156c2:	1d11      	adds	r1, r2, #4
100156c4:	6019      	str	r1, [r3, #0]
100156c6:	6813      	ldr	r3, [r2, #0]
100156c8:	7033      	strb	r3, [r6, #0]
100156ca:	e0a4      	b.n	10015816 <_printf_i+0x1c2>
100156cc:	6821      	ldr	r1, [r4, #0]
100156ce:	681a      	ldr	r2, [r3, #0]
100156d0:	0608      	lsls	r0, r1, #24
100156d2:	d406      	bmi.n	100156e2 <_printf_i+0x8e>
100156d4:	0649      	lsls	r1, r1, #25
100156d6:	d504      	bpl.n	100156e2 <_printf_i+0x8e>
100156d8:	1d11      	adds	r1, r2, #4
100156da:	6019      	str	r1, [r3, #0]
100156dc:	2300      	movs	r3, #0
100156de:	5ed5      	ldrsh	r5, [r2, r3]
100156e0:	e002      	b.n	100156e8 <_printf_i+0x94>
100156e2:	1d11      	adds	r1, r2, #4
100156e4:	6019      	str	r1, [r3, #0]
100156e6:	6815      	ldr	r5, [r2, #0]
100156e8:	2d00      	cmp	r5, #0
100156ea:	da3b      	bge.n	10015764 <_printf_i+0x110>
100156ec:	232d      	movs	r3, #45	; 0x2d
100156ee:	9a04      	ldr	r2, [sp, #16]
100156f0:	426d      	negs	r5, r5
100156f2:	7013      	strb	r3, [r2, #0]
100156f4:	e036      	b.n	10015764 <_printf_i+0x110>
100156f6:	6821      	ldr	r1, [r4, #0]
100156f8:	681a      	ldr	r2, [r3, #0]
100156fa:	0608      	lsls	r0, r1, #24
100156fc:	d406      	bmi.n	1001570c <_printf_i+0xb8>
100156fe:	0649      	lsls	r1, r1, #25
10015700:	d504      	bpl.n	1001570c <_printf_i+0xb8>
10015702:	6815      	ldr	r5, [r2, #0]
10015704:	1d11      	adds	r1, r2, #4
10015706:	6019      	str	r1, [r3, #0]
10015708:	b2ad      	uxth	r5, r5
1001570a:	e002      	b.n	10015712 <_printf_i+0xbe>
1001570c:	1d11      	adds	r1, r2, #4
1001570e:	6019      	str	r1, [r3, #0]
10015710:	6815      	ldr	r5, [r2, #0]
10015712:	4b5f      	ldr	r3, [pc, #380]	; (10015890 <_printf_i+0x23c>)
10015714:	7e22      	ldrb	r2, [r4, #24]
10015716:	9303      	str	r3, [sp, #12]
10015718:	2708      	movs	r7, #8
1001571a:	2a6f      	cmp	r2, #111	; 0x6f
1001571c:	d01d      	beq.n	1001575a <_printf_i+0x106>
1001571e:	270a      	movs	r7, #10
10015720:	e01b      	b.n	1001575a <_printf_i+0x106>
10015722:	0022      	movs	r2, r4
10015724:	2178      	movs	r1, #120	; 0x78
10015726:	3245      	adds	r2, #69	; 0x45
10015728:	7011      	strb	r1, [r2, #0]
1001572a:	4a5a      	ldr	r2, [pc, #360]	; (10015894 <_printf_i+0x240>)
1001572c:	6819      	ldr	r1, [r3, #0]
1001572e:	9203      	str	r2, [sp, #12]
10015730:	1d08      	adds	r0, r1, #4
10015732:	6822      	ldr	r2, [r4, #0]
10015734:	6018      	str	r0, [r3, #0]
10015736:	680d      	ldr	r5, [r1, #0]
10015738:	0610      	lsls	r0, r2, #24
1001573a:	d402      	bmi.n	10015742 <_printf_i+0xee>
1001573c:	0650      	lsls	r0, r2, #25
1001573e:	d500      	bpl.n	10015742 <_printf_i+0xee>
10015740:	b2ad      	uxth	r5, r5
10015742:	07d3      	lsls	r3, r2, #31
10015744:	d502      	bpl.n	1001574c <_printf_i+0xf8>
10015746:	2320      	movs	r3, #32
10015748:	431a      	orrs	r2, r3
1001574a:	6022      	str	r2, [r4, #0]
1001574c:	2710      	movs	r7, #16
1001574e:	2d00      	cmp	r5, #0
10015750:	d103      	bne.n	1001575a <_printf_i+0x106>
10015752:	2320      	movs	r3, #32
10015754:	6822      	ldr	r2, [r4, #0]
10015756:	439a      	bics	r2, r3
10015758:	6022      	str	r2, [r4, #0]
1001575a:	0023      	movs	r3, r4
1001575c:	2200      	movs	r2, #0
1001575e:	3343      	adds	r3, #67	; 0x43
10015760:	701a      	strb	r2, [r3, #0]
10015762:	e002      	b.n	1001576a <_printf_i+0x116>
10015764:	270a      	movs	r7, #10
10015766:	4b4a      	ldr	r3, [pc, #296]	; (10015890 <_printf_i+0x23c>)
10015768:	9303      	str	r3, [sp, #12]
1001576a:	6863      	ldr	r3, [r4, #4]
1001576c:	60a3      	str	r3, [r4, #8]
1001576e:	2b00      	cmp	r3, #0
10015770:	db09      	blt.n	10015786 <_printf_i+0x132>
10015772:	2204      	movs	r2, #4
10015774:	6821      	ldr	r1, [r4, #0]
10015776:	4391      	bics	r1, r2
10015778:	6021      	str	r1, [r4, #0]
1001577a:	2d00      	cmp	r5, #0
1001577c:	d105      	bne.n	1001578a <_printf_i+0x136>
1001577e:	9e04      	ldr	r6, [sp, #16]
10015780:	2b00      	cmp	r3, #0
10015782:	d011      	beq.n	100157a8 <_printf_i+0x154>
10015784:	e07b      	b.n	1001587e <_printf_i+0x22a>
10015786:	2d00      	cmp	r5, #0
10015788:	d079      	beq.n	1001587e <_printf_i+0x22a>
1001578a:	9e04      	ldr	r6, [sp, #16]
1001578c:	0028      	movs	r0, r5
1001578e:	0039      	movs	r1, r7
10015790:	f7fd f8b2 	bl	100128f8 <__aeabi_uidivmod>
10015794:	9b03      	ldr	r3, [sp, #12]
10015796:	3e01      	subs	r6, #1
10015798:	5c5b      	ldrb	r3, [r3, r1]
1001579a:	0028      	movs	r0, r5
1001579c:	7033      	strb	r3, [r6, #0]
1001579e:	0039      	movs	r1, r7
100157a0:	f7fd f824 	bl	100127ec <__aeabi_uidiv>
100157a4:	1e05      	subs	r5, r0, #0
100157a6:	d1f1      	bne.n	1001578c <_printf_i+0x138>
100157a8:	2f08      	cmp	r7, #8
100157aa:	d109      	bne.n	100157c0 <_printf_i+0x16c>
100157ac:	6823      	ldr	r3, [r4, #0]
100157ae:	07db      	lsls	r3, r3, #31
100157b0:	d506      	bpl.n	100157c0 <_printf_i+0x16c>
100157b2:	6863      	ldr	r3, [r4, #4]
100157b4:	6922      	ldr	r2, [r4, #16]
100157b6:	4293      	cmp	r3, r2
100157b8:	dc02      	bgt.n	100157c0 <_printf_i+0x16c>
100157ba:	2330      	movs	r3, #48	; 0x30
100157bc:	3e01      	subs	r6, #1
100157be:	7033      	strb	r3, [r6, #0]
100157c0:	9b04      	ldr	r3, [sp, #16]
100157c2:	1b9b      	subs	r3, r3, r6
100157c4:	6123      	str	r3, [r4, #16]
100157c6:	e02b      	b.n	10015820 <_printf_i+0x1cc>
100157c8:	6809      	ldr	r1, [r1, #0]
100157ca:	681a      	ldr	r2, [r3, #0]
100157cc:	0608      	lsls	r0, r1, #24
100157ce:	d407      	bmi.n	100157e0 <_printf_i+0x18c>
100157d0:	0649      	lsls	r1, r1, #25
100157d2:	d505      	bpl.n	100157e0 <_printf_i+0x18c>
100157d4:	1d11      	adds	r1, r2, #4
100157d6:	6019      	str	r1, [r3, #0]
100157d8:	6813      	ldr	r3, [r2, #0]
100157da:	8aa2      	ldrh	r2, [r4, #20]
100157dc:	801a      	strh	r2, [r3, #0]
100157de:	e004      	b.n	100157ea <_printf_i+0x196>
100157e0:	1d11      	adds	r1, r2, #4
100157e2:	6019      	str	r1, [r3, #0]
100157e4:	6813      	ldr	r3, [r2, #0]
100157e6:	6962      	ldr	r2, [r4, #20]
100157e8:	601a      	str	r2, [r3, #0]
100157ea:	2300      	movs	r3, #0
100157ec:	9e04      	ldr	r6, [sp, #16]
100157ee:	6123      	str	r3, [r4, #16]
100157f0:	e016      	b.n	10015820 <_printf_i+0x1cc>
100157f2:	681a      	ldr	r2, [r3, #0]
100157f4:	1d11      	adds	r1, r2, #4
100157f6:	6019      	str	r1, [r3, #0]
100157f8:	6816      	ldr	r6, [r2, #0]
100157fa:	2100      	movs	r1, #0
100157fc:	6862      	ldr	r2, [r4, #4]
100157fe:	0030      	movs	r0, r6
10015800:	f000 f92a 	bl	10015a58 <memchr>
10015804:	2800      	cmp	r0, #0
10015806:	d001      	beq.n	1001580c <_printf_i+0x1b8>
10015808:	1b80      	subs	r0, r0, r6
1001580a:	6060      	str	r0, [r4, #4]
1001580c:	6863      	ldr	r3, [r4, #4]
1001580e:	e003      	b.n	10015818 <_printf_i+0x1c4>
10015810:	0026      	movs	r6, r4
10015812:	3642      	adds	r6, #66	; 0x42
10015814:	7032      	strb	r2, [r6, #0]
10015816:	2301      	movs	r3, #1
10015818:	6123      	str	r3, [r4, #16]
1001581a:	2300      	movs	r3, #0
1001581c:	9a04      	ldr	r2, [sp, #16]
1001581e:	7013      	strb	r3, [r2, #0]
10015820:	9b07      	ldr	r3, [sp, #28]
10015822:	aa09      	add	r2, sp, #36	; 0x24
10015824:	9300      	str	r3, [sp, #0]
10015826:	0021      	movs	r1, r4
10015828:	9b06      	ldr	r3, [sp, #24]
1001582a:	9805      	ldr	r0, [sp, #20]
1001582c:	f7ff fea4 	bl	10015578 <_printf_common>
10015830:	1c43      	adds	r3, r0, #1
10015832:	d102      	bne.n	1001583a <_printf_i+0x1e6>
10015834:	2001      	movs	r0, #1
10015836:	4240      	negs	r0, r0
10015838:	e027      	b.n	1001588a <_printf_i+0x236>
1001583a:	6923      	ldr	r3, [r4, #16]
1001583c:	0032      	movs	r2, r6
1001583e:	9906      	ldr	r1, [sp, #24]
10015840:	9805      	ldr	r0, [sp, #20]
10015842:	9d07      	ldr	r5, [sp, #28]
10015844:	47a8      	blx	r5
10015846:	1c43      	adds	r3, r0, #1
10015848:	d0f4      	beq.n	10015834 <_printf_i+0x1e0>
1001584a:	6823      	ldr	r3, [r4, #0]
1001584c:	2500      	movs	r5, #0
1001584e:	079b      	lsls	r3, r3, #30
10015850:	d40f      	bmi.n	10015872 <_printf_i+0x21e>
10015852:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015854:	68e0      	ldr	r0, [r4, #12]
10015856:	4298      	cmp	r0, r3
10015858:	da17      	bge.n	1001588a <_printf_i+0x236>
1001585a:	0018      	movs	r0, r3
1001585c:	e015      	b.n	1001588a <_printf_i+0x236>
1001585e:	0022      	movs	r2, r4
10015860:	2301      	movs	r3, #1
10015862:	3219      	adds	r2, #25
10015864:	9906      	ldr	r1, [sp, #24]
10015866:	9805      	ldr	r0, [sp, #20]
10015868:	9e07      	ldr	r6, [sp, #28]
1001586a:	47b0      	blx	r6
1001586c:	1c43      	adds	r3, r0, #1
1001586e:	d0e1      	beq.n	10015834 <_printf_i+0x1e0>
10015870:	3501      	adds	r5, #1
10015872:	68e3      	ldr	r3, [r4, #12]
10015874:	9a09      	ldr	r2, [sp, #36]	; 0x24
10015876:	1a9b      	subs	r3, r3, r2
10015878:	429d      	cmp	r5, r3
1001587a:	dbf0      	blt.n	1001585e <_printf_i+0x20a>
1001587c:	e7e9      	b.n	10015852 <_printf_i+0x1fe>
1001587e:	0026      	movs	r6, r4
10015880:	9b03      	ldr	r3, [sp, #12]
10015882:	3642      	adds	r6, #66	; 0x42
10015884:	781b      	ldrb	r3, [r3, #0]
10015886:	7033      	strb	r3, [r6, #0]
10015888:	e78e      	b.n	100157a8 <_printf_i+0x154>
1001588a:	b00b      	add	sp, #44	; 0x2c
1001588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001588e:	46c0      	nop			; (mov r8, r8)
10015890:	1001701d 	.word	0x1001701d
10015894:	1001702e 	.word	0x1001702e

10015898 <_putc_r>:
10015898:	b570      	push	{r4, r5, r6, lr}
1001589a:	0006      	movs	r6, r0
1001589c:	000d      	movs	r5, r1
1001589e:	0014      	movs	r4, r2
100158a0:	2800      	cmp	r0, #0
100158a2:	d004      	beq.n	100158ae <_putc_r+0x16>
100158a4:	6983      	ldr	r3, [r0, #24]
100158a6:	2b00      	cmp	r3, #0
100158a8:	d101      	bne.n	100158ae <_putc_r+0x16>
100158aa:	f7ff fc29 	bl	10015100 <__sinit>
100158ae:	4b12      	ldr	r3, [pc, #72]	; (100158f8 <_putc_r+0x60>)
100158b0:	429c      	cmp	r4, r3
100158b2:	d101      	bne.n	100158b8 <_putc_r+0x20>
100158b4:	6874      	ldr	r4, [r6, #4]
100158b6:	e008      	b.n	100158ca <_putc_r+0x32>
100158b8:	4b10      	ldr	r3, [pc, #64]	; (100158fc <_putc_r+0x64>)
100158ba:	429c      	cmp	r4, r3
100158bc:	d101      	bne.n	100158c2 <_putc_r+0x2a>
100158be:	68b4      	ldr	r4, [r6, #8]
100158c0:	e003      	b.n	100158ca <_putc_r+0x32>
100158c2:	4b0f      	ldr	r3, [pc, #60]	; (10015900 <_putc_r+0x68>)
100158c4:	429c      	cmp	r4, r3
100158c6:	d100      	bne.n	100158ca <_putc_r+0x32>
100158c8:	68f4      	ldr	r4, [r6, #12]
100158ca:	68a3      	ldr	r3, [r4, #8]
100158cc:	3b01      	subs	r3, #1
100158ce:	60a3      	str	r3, [r4, #8]
100158d0:	2b00      	cmp	r3, #0
100158d2:	da05      	bge.n	100158e0 <_putc_r+0x48>
100158d4:	69a2      	ldr	r2, [r4, #24]
100158d6:	4293      	cmp	r3, r2
100158d8:	db08      	blt.n	100158ec <_putc_r+0x54>
100158da:	b2eb      	uxtb	r3, r5
100158dc:	2b0a      	cmp	r3, #10
100158de:	d005      	beq.n	100158ec <_putc_r+0x54>
100158e0:	6823      	ldr	r3, [r4, #0]
100158e2:	b2e8      	uxtb	r0, r5
100158e4:	1c5a      	adds	r2, r3, #1
100158e6:	6022      	str	r2, [r4, #0]
100158e8:	701d      	strb	r5, [r3, #0]
100158ea:	e004      	b.n	100158f6 <_putc_r+0x5e>
100158ec:	0022      	movs	r2, r4
100158ee:	0029      	movs	r1, r5
100158f0:	0030      	movs	r0, r6
100158f2:	f7ff fa43 	bl	10014d7c <__swbuf_r>
100158f6:	bd70      	pop	{r4, r5, r6, pc}
100158f8:	10016fac 	.word	0x10016fac
100158fc:	10016fcc 	.word	0x10016fcc
10015900:	10016fec 	.word	0x10016fec

10015904 <__sread>:
10015904:	b570      	push	{r4, r5, r6, lr}
10015906:	000c      	movs	r4, r1
10015908:	250e      	movs	r5, #14
1001590a:	5f49      	ldrsh	r1, [r1, r5]
1001590c:	f000 f8b0 	bl	10015a70 <_read_r>
10015910:	2800      	cmp	r0, #0
10015912:	db03      	blt.n	1001591c <__sread+0x18>
10015914:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015916:	181b      	adds	r3, r3, r0
10015918:	6563      	str	r3, [r4, #84]	; 0x54
1001591a:	e003      	b.n	10015924 <__sread+0x20>
1001591c:	89a2      	ldrh	r2, [r4, #12]
1001591e:	4b02      	ldr	r3, [pc, #8]	; (10015928 <__sread+0x24>)
10015920:	4013      	ands	r3, r2
10015922:	81a3      	strh	r3, [r4, #12]
10015924:	bd70      	pop	{r4, r5, r6, pc}
10015926:	46c0      	nop			; (mov r8, r8)
10015928:	ffffefff 	.word	0xffffefff

1001592c <__swrite>:
1001592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001592e:	001f      	movs	r7, r3
10015930:	898b      	ldrh	r3, [r1, #12]
10015932:	0005      	movs	r5, r0
10015934:	000c      	movs	r4, r1
10015936:	0016      	movs	r6, r2
10015938:	05db      	lsls	r3, r3, #23
1001593a:	d505      	bpl.n	10015948 <__swrite+0x1c>
1001593c:	230e      	movs	r3, #14
1001593e:	5ec9      	ldrsh	r1, [r1, r3]
10015940:	2200      	movs	r2, #0
10015942:	2302      	movs	r3, #2
10015944:	f000 f874 	bl	10015a30 <_lseek_r>
10015948:	89a2      	ldrh	r2, [r4, #12]
1001594a:	4b05      	ldr	r3, [pc, #20]	; (10015960 <__swrite+0x34>)
1001594c:	0028      	movs	r0, r5
1001594e:	4013      	ands	r3, r2
10015950:	81a3      	strh	r3, [r4, #12]
10015952:	0032      	movs	r2, r6
10015954:	230e      	movs	r3, #14
10015956:	5ee1      	ldrsh	r1, [r4, r3]
10015958:	003b      	movs	r3, r7
1001595a:	f000 f81f 	bl	1001599c <_write_r>
1001595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015960:	ffffefff 	.word	0xffffefff

10015964 <__sseek>:
10015964:	b570      	push	{r4, r5, r6, lr}
10015966:	000c      	movs	r4, r1
10015968:	250e      	movs	r5, #14
1001596a:	5f49      	ldrsh	r1, [r1, r5]
1001596c:	f000 f860 	bl	10015a30 <_lseek_r>
10015970:	89a3      	ldrh	r3, [r4, #12]
10015972:	1c42      	adds	r2, r0, #1
10015974:	d103      	bne.n	1001597e <__sseek+0x1a>
10015976:	4a05      	ldr	r2, [pc, #20]	; (1001598c <__sseek+0x28>)
10015978:	4013      	ands	r3, r2
1001597a:	81a3      	strh	r3, [r4, #12]
1001597c:	e004      	b.n	10015988 <__sseek+0x24>
1001597e:	2280      	movs	r2, #128	; 0x80
10015980:	0152      	lsls	r2, r2, #5
10015982:	4313      	orrs	r3, r2
10015984:	81a3      	strh	r3, [r4, #12]
10015986:	6560      	str	r0, [r4, #84]	; 0x54
10015988:	bd70      	pop	{r4, r5, r6, pc}
1001598a:	46c0      	nop			; (mov r8, r8)
1001598c:	ffffefff 	.word	0xffffefff

10015990 <__sclose>:
10015990:	b510      	push	{r4, lr}
10015992:	230e      	movs	r3, #14
10015994:	5ec9      	ldrsh	r1, [r1, r3]
10015996:	f000 f815 	bl	100159c4 <_close_r>
1001599a:	bd10      	pop	{r4, pc}

1001599c <_write_r>:
1001599c:	b570      	push	{r4, r5, r6, lr}
1001599e:	0005      	movs	r5, r0
100159a0:	0008      	movs	r0, r1
100159a2:	0011      	movs	r1, r2
100159a4:	2200      	movs	r2, #0
100159a6:	4c06      	ldr	r4, [pc, #24]	; (100159c0 <_write_r+0x24>)
100159a8:	6022      	str	r2, [r4, #0]
100159aa:	001a      	movs	r2, r3
100159ac:	f7f7 fcb2 	bl	1000d314 <_write>
100159b0:	1c43      	adds	r3, r0, #1
100159b2:	d103      	bne.n	100159bc <_write_r+0x20>
100159b4:	6823      	ldr	r3, [r4, #0]
100159b6:	2b00      	cmp	r3, #0
100159b8:	d000      	beq.n	100159bc <_write_r+0x20>
100159ba:	602b      	str	r3, [r5, #0]
100159bc:	bd70      	pop	{r4, r5, r6, pc}
100159be:	46c0      	nop			; (mov r8, r8)
100159c0:	10019fb0 	.word	0x10019fb0

100159c4 <_close_r>:
100159c4:	2300      	movs	r3, #0
100159c6:	b570      	push	{r4, r5, r6, lr}
100159c8:	4c06      	ldr	r4, [pc, #24]	; (100159e4 <_close_r+0x20>)
100159ca:	0005      	movs	r5, r0
100159cc:	0008      	movs	r0, r1
100159ce:	6023      	str	r3, [r4, #0]
100159d0:	f7f2 fd6a 	bl	100084a8 <_close>
100159d4:	1c43      	adds	r3, r0, #1
100159d6:	d103      	bne.n	100159e0 <_close_r+0x1c>
100159d8:	6823      	ldr	r3, [r4, #0]
100159da:	2b00      	cmp	r3, #0
100159dc:	d000      	beq.n	100159e0 <_close_r+0x1c>
100159de:	602b      	str	r3, [r5, #0]
100159e0:	bd70      	pop	{r4, r5, r6, pc}
100159e2:	46c0      	nop			; (mov r8, r8)
100159e4:	10019fb0 	.word	0x10019fb0

100159e8 <_fstat_r>:
100159e8:	2300      	movs	r3, #0
100159ea:	b570      	push	{r4, r5, r6, lr}
100159ec:	4c06      	ldr	r4, [pc, #24]	; (10015a08 <_fstat_r+0x20>)
100159ee:	0005      	movs	r5, r0
100159f0:	0008      	movs	r0, r1
100159f2:	0011      	movs	r1, r2
100159f4:	6023      	str	r3, [r4, #0]
100159f6:	f7f2 fd5b 	bl	100084b0 <_fstat>
100159fa:	1c43      	adds	r3, r0, #1
100159fc:	d103      	bne.n	10015a06 <_fstat_r+0x1e>
100159fe:	6823      	ldr	r3, [r4, #0]
10015a00:	2b00      	cmp	r3, #0
10015a02:	d000      	beq.n	10015a06 <_fstat_r+0x1e>
10015a04:	602b      	str	r3, [r5, #0]
10015a06:	bd70      	pop	{r4, r5, r6, pc}
10015a08:	10019fb0 	.word	0x10019fb0

10015a0c <_isatty_r>:
10015a0c:	2300      	movs	r3, #0
10015a0e:	b570      	push	{r4, r5, r6, lr}
10015a10:	4c06      	ldr	r4, [pc, #24]	; (10015a2c <_isatty_r+0x20>)
10015a12:	0005      	movs	r5, r0
10015a14:	0008      	movs	r0, r1
10015a16:	6023      	str	r3, [r4, #0]
10015a18:	f7f2 fd50 	bl	100084bc <_isatty>
10015a1c:	1c43      	adds	r3, r0, #1
10015a1e:	d103      	bne.n	10015a28 <_isatty_r+0x1c>
10015a20:	6823      	ldr	r3, [r4, #0]
10015a22:	2b00      	cmp	r3, #0
10015a24:	d000      	beq.n	10015a28 <_isatty_r+0x1c>
10015a26:	602b      	str	r3, [r5, #0]
10015a28:	bd70      	pop	{r4, r5, r6, pc}
10015a2a:	46c0      	nop			; (mov r8, r8)
10015a2c:	10019fb0 	.word	0x10019fb0

10015a30 <_lseek_r>:
10015a30:	b570      	push	{r4, r5, r6, lr}
10015a32:	0005      	movs	r5, r0
10015a34:	0008      	movs	r0, r1
10015a36:	0011      	movs	r1, r2
10015a38:	2200      	movs	r2, #0
10015a3a:	4c06      	ldr	r4, [pc, #24]	; (10015a54 <_lseek_r+0x24>)
10015a3c:	6022      	str	r2, [r4, #0]
10015a3e:	001a      	movs	r2, r3
10015a40:	f7f2 fd3e 	bl	100084c0 <_lseek>
10015a44:	1c43      	adds	r3, r0, #1
10015a46:	d103      	bne.n	10015a50 <_lseek_r+0x20>
10015a48:	6823      	ldr	r3, [r4, #0]
10015a4a:	2b00      	cmp	r3, #0
10015a4c:	d000      	beq.n	10015a50 <_lseek_r+0x20>
10015a4e:	602b      	str	r3, [r5, #0]
10015a50:	bd70      	pop	{r4, r5, r6, pc}
10015a52:	46c0      	nop			; (mov r8, r8)
10015a54:	10019fb0 	.word	0x10019fb0

10015a58 <memchr>:
10015a58:	b2c9      	uxtb	r1, r1
10015a5a:	1882      	adds	r2, r0, r2
10015a5c:	4290      	cmp	r0, r2
10015a5e:	d004      	beq.n	10015a6a <memchr+0x12>
10015a60:	7803      	ldrb	r3, [r0, #0]
10015a62:	428b      	cmp	r3, r1
10015a64:	d002      	beq.n	10015a6c <memchr+0x14>
10015a66:	3001      	adds	r0, #1
10015a68:	e7f8      	b.n	10015a5c <memchr+0x4>
10015a6a:	2000      	movs	r0, #0
10015a6c:	4770      	bx	lr
	...

10015a70 <_read_r>:
10015a70:	b570      	push	{r4, r5, r6, lr}
10015a72:	0005      	movs	r5, r0
10015a74:	0008      	movs	r0, r1
10015a76:	0011      	movs	r1, r2
10015a78:	2200      	movs	r2, #0
10015a7a:	4c06      	ldr	r4, [pc, #24]	; (10015a94 <_read_r+0x24>)
10015a7c:	6022      	str	r2, [r4, #0]
10015a7e:	001a      	movs	r2, r3
10015a80:	f7f7 fc28 	bl	1000d2d4 <_read>
10015a84:	1c43      	adds	r3, r0, #1
10015a86:	d103      	bne.n	10015a90 <_read_r+0x20>
10015a88:	6823      	ldr	r3, [r4, #0]
10015a8a:	2b00      	cmp	r3, #0
10015a8c:	d000      	beq.n	10015a90 <_read_r+0x20>
10015a8e:	602b      	str	r3, [r5, #0]
10015a90:	bd70      	pop	{r4, r5, r6, pc}
10015a92:	46c0      	nop			; (mov r8, r8)
10015a94:	10019fb0 	.word	0x10019fb0
10015a98:	00000d0a 	.word	0x00000d0a
10015a9c:	000003e8 	.word	0x000003e8

10015aa0 <test>:
10015aa0:	00000083 00004000 00000200 00c800c8     .....@..........
10015ab0:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10015ac0:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10015ad0:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10015ae0:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10015af0:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10015b00:	666f206c 74657366 74616420 57482061     l offset data HW
10015b10:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10015b20:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10015b30:	6f727947 66666f20 20746573 61746164     Gyro offset data
10015b40:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10015b50:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10015b60:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10015b70:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10015b80:	6e756f66 00002e64 72617453 676e6974     found...Starting
10015b90:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10015ba0:	72746552 69766569 4220676e 65736169     Retrieving Biase
10015bb0:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10015bc0:	65736169 72452073 20726f72 6f70202d     iases Error - po
10015bd0:	62697373 4920656c 65204332 726f7272     ssible I2C error
10015be0:	00000000 72746552 69766569 5320676e     ....Retrieving S
10015bf0:	69422054 73657361 00000000 72746552     T Biases....Retr
10015c00:	69766569 5320676e 69422054 73657361     ieving ST Biases
10015c10:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10015c20:	32492065 72652043 00726f72 64616552     e I2C error.Read
10015c30:	20676e69 2050544f 69676552 72657473     ing OTP Register
10015c40:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10015c50:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10015c60:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10015c70:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10015c80:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10015c90:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10015ca0:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10015cb0:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10015cc0:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10015cd0:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10015ce0:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10015cf0:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10015d00:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10015d10:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10015d20:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10015d30:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10015d40:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10015d50:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10015d60:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10015d70:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10015d80:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10015d90:	6c207361 20737365 6e616874 2e372520     as less than %7.
10015da0:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10015db0:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10015dc0:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10015dd0:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10015de0:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10015df0:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10015e00:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10015e10:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10015e20:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10015e30:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10015e40:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10015e50:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10015e60:	253a7369 72672064 65746165 68742072     is:%d greater th
10015e70:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10015e80:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10015e90:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10015ea0:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10015eb0:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10015ec0:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10015ed0:	65542066 52207473 6c757365 203a7374     f Test Results: 
10015ee0:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10015ef0:	73655420 65522074 746c7573 25203a73      Test Results: %
10015f00:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10015f10:	00000000                                ....

10015f14 <hw>:
10015f14:	04000069 01410080 01000000 00001333     i.....A.....3...

10015f24 <reg>:
10015f24:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10015f34:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10015f44:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10015f54:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10015f64:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10015f74:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10015f84:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10015f94:	b691a38b 00dab4da 6e6f6420 00002165     ........ done!..
10015fa4:	3a4f2f54 46464f20 00000000 736d735b     T/O: OFF....[sms
10015fb4:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10015fc4:	00000000 3a4f2f54 30303520 736d2030     ....T/O: 5000 ms
10015fd4:	00000000 736d735b 656c625f 6961705f     ....[sms_ble_pai
10015fe4:	5f646572 005d6e66 736d735b 656c625f     red_fn].[sms_ble
10015ff4:	7664615f 69747265 095d6573 65766441     _advertise].Adve
10016004:	73697472 6e656d65 61642074 73206174     rtisement data s
10016014:	66207465 656c6961 00002164 736d735b     et failed!..[sms
10016024:	7265735f 65636976 7664615f 69747265     _service_adverti
10016034:	095d6573 20454c42 65766441 73697472     se].BLE Advertis
10016044:	6e656d65 74732074 20747261 6c696166     ement start fail
10016054:	203a6465 73616572 30206e6f 00782578     ed: reason 0x%x.
10016064:	20642520 454e4f47 0000203f 3a4f2f54      %d GONE? ..T/O:
10016074:	6d303220 00000073 49544f4e 41434946      20ms...NOTIFICA
10016084:	4e4f4954 52524520 2121524f 00000000     TION ERROR!!....

10016094 <sms_ble_gap_cb>:
	...
100160a0:	1000a039 00000000 1000a051 1000a185     9.......Q.......
	...
100160b8:	1000a0a5 10009ea1 00000000 00000000     ................
	...

100160e0 <sms_ble_gatt_server_cb>:
100160e0:	10009ebd 10009f31 00000000 00000000     ....1...........
	...
10016108:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016118:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016128:	656c6968 74657320 676e6974 20707520     hile setting up 
10016138:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10016148:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016158:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016168:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10016178:	65737520 75622072 6e6f7474 00000000      user button....
10016188:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10016198:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
100161a8:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
100161b8:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100161c8:	5d736563 72655309 65636976 65642073     ces].Services de
100161d8:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100161e8:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
100161f8:	206d656c 6c696877 65732065 6e697474     lem while settin
10016208:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10016218:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016228:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016238:	7320656c 69747465 7520676e 4d492070     le setting up IM
10016248:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10016258:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10016268:	73656369 6553095d 63697672 64207365     ices].Services d
10016278:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10016288:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
10016298:	6572705f 72757373 65645f65 656e6966     _pressure_define
100162a8:	7265735f 65636976 53095d73 69767265     _services].Servi
100162b8:	20736563 69666564 676e696e 69616620     ces defining fai
100162c8:	2c64656c 61657220 206e6f73 78257830     led, reason 0x%x
100162d8:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
100162e8:	5f317265 005d6e66 736d735b 6175645f     er1_fn].[sms_dua
100162f8:	6d69746c 5f327265 005d6e66 1000c2f4     ltimer2_fn].....
10016308:	1000c302 1000c310 1000c31e 1000c32c     ............,...
10016318:	1000c33a 1000c348 1000c358 1000c368     :...H...X...h...
10016328:	1000c378 1000c388 1000c398 1000c3a8     x...............
10016338:	1000c3b8 1000c3c8 1000c3d8 1000c3e8     ................
10016348:	1000c3f8 1000c408 1000c418 1000c428     ............(...
10016358:	1000c438 1000c448 1000c458 1000c468     8...H...X...h...
10016368:	1000c478 1000c488 1000c498 1000c4a6     x...............
10016378:	1000c4b4 1000c4c2 1000c4d0 1000c4de     ................
10016388:	1000c4ec 1000c4fa 1000c508 1000c518     ................
10016398:	1000c528 1000c538 1000c548 1000c558     (...8...H...X...
100163a8:	1000c568 1000c578 1000c588 1000c598     h...x...........
100163b8:	1000c5a8 1000c5b8 1000c5c8 1000c5d8     ................
100163c8:	1000c5e8 1000c5f8 1000c608 1000c616     ................
100163d8:	1000c624 1000c650 1000c65e 1000c66c     $...P...^...l...
100163e8:	1000c67a 1000c688 1000c696 1000c6a4     z...............
100163f8:	1000c6b2 1000c6c0 1000c6ce 1000c6dc     ................
10016408:	1000c6ea 1000c6f8 1000c706 1000c714     ................
10016418:	1000c722 1000c730 1000c73e 1000c74c     "...0...>...L...
10016428:	1000c75a 1000c768 1000c776 1000c784     Z...h...v.......
10016438:	1000c792 1000c7a0 1000c7ae 1000c7bc     ................
10016448:	1000c7ca 1000c7d8 1000c7e6 1000c7f4     ................
10016458:	1000c802 1000c810 1000c81e 1000c82c     ............,...
10016468:	1000c83a 1000c848 1000c856 1000c864     :...H...V...d...
10016478:	1000c872 1000c880 1000c88e 1000c89c     r...............
10016488:	1000c8aa 1000c8b8 1000c8c6 1000c8d4     ................
10016498:	1000c8e2 1000c8f0 1000c8fe 1000c90c     ................
100164a8:	1000c91a 1000c928 1000c936 1000c9d0     ....(...6.......
100164b8:	1000c9f8 1000ca20 1000ca48 1000cc88     .... ...H.......
100164c8:	1000ca78 1000ca90 1000cb08 1000cb20     x........... ...
100164d8:	1000caa8 1000cac0 1000cad8 1000caf0     ................
100164e8:	1000cb38 1000cdfc 1000cdfc 1000cdfc     8...............
100164f8:	1000cdfc 1000cdfc 1000cdfc 1000cdfc     ................
10016508:	1000cdfc 1000cbe0 1000cbf8 1000cc10     ................
10016518:	1000cc9e 1000cb68 1000cdfc 1000cdfc     ....h...........
10016528:	1000cdfc 1000cdfc 1000cdfc 1000cdfc     ................
10016538:	1000cc28 1000cc40 1000cc58 1000cc70     (...@...X...p...
10016548:	1000cdfc 1000cdb4 1000cdcc 1000cdfc     ................
10016558:	1000cdfc 1000ccca 1000cce0 1000ccf6     ................
10016568:	1000cd0c 1000cdfc 1000cdfc 1000cdfc     ................
10016578:	1000cdfc 1000cdfc 1000cdfc 1000cdfc     ................
10016588:	1000cdfc 1000c9bc 1000c9e4 1000ca0c     ................
10016598:	1000ca34 1000ca60 1000cb50 1000cb80     4...`...P.......
100165a8:	1000cb98 1000cbb0 1000cbc8 1000ccb4     ................
100165b8:	1000cd22 1000cd9c 1000cde4 1000d44c     "...........L...
100165c8:	1000d44e 1000d434 1000d434 1000d434     N...4...4...4...
100165d8:	1000d44c 1000d434 1000d434 1000dc92     L...4...4.......
100165e8:	1000dd06 1000dc7a 1000dd0c 1000dc80     ....z...........
100165f8:	1000dc86 1000dc8c 1000e32c 1000e32c     ........,...,...
10016608:	1000e32c 1000e32c 1000e32c 1000e32c     ,...,...,...,...
10016618:	1000e32c 1000e32c 1000e32c 1000e32c     ,...,...,...,...
10016628:	1000e32c 1000e32c 1000e32c 1000e32c     ,...,...,...,...
10016638:	1000e32c 1000e32c 1000e32c 1000e32c     ,...,...,...,...
10016648:	1000e32c 1000e34a 1000e34a 1000e34a     ,...J...J...J...
10016658:	1000e34a 1000e34a 1000e34a 1000e34a     J...J...J...J...
10016668:	1000e34a 1000e34a 1000e34a 1000e36c     J...J...J...l...
10016678:	1000e36c 1000e36c 1000e36c 1000e36c     l...l...l...l...
10016688:	1000e36c 1000e36c 1000e36c 1000e36c     l...l...l...l...
10016698:	1000e36c 1000e38e 1000e38e 1000e38e     l...............
100166a8:	1000e38e 1000e38e 1000e38e 1000e3a8     ................
100166b8:	1000e3a8 1000e3a8 1000e3a8 1000e3a8     ................
100166c8:	1000e3a8 1000e3a8 1000e3a8 1000e3a8     ................
100166d8:	1000e3c2 1000e3c2 1000e3e4 1000e3e4     ................
100166e8:	1000e3fe 1000e3e4 34333231 00003635     ........123456..
100166f8:	efcdab00 00efcdab                       ........

10016700 <ble_mgr_gatt_server_handle>:
	...
10016718:	1000d369 1000d3cd 1000d36d 00000000     i.......m.......
10016728:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10016738:	00000000 65766441 73697472 20676e69     ....Advertising 
10016748:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10016758:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10016768:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10016778:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10016788:	69766544 64206563 6f637369 63656e6e     Device disconnec
10016798:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100167a8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100167b8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100167c8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100167d8:	6c706d6f 64657465 63757320 73736563     ompleted success
100167e8:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100167f8:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10016808:	74707972 206e6f69 6f666e69 00000000     ryption info....
10016818:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10016828:	7320666f 206e6163 69766564 72206563     of scan device r
10016838:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10016848:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10016858:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10016868:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10016878:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10016888:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10016898:	46207473 656c6961 00000064 72696150     st Failed...Pair
100168a8:	20676e69 636f7270 72756465 6f632065     ing procedure co
100168b8:	656c706d 20646574 63637573 66737365     mpleted successf
100168c8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100168d8:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100168e8:	726f7473 68742065 61702065 6e697269     store the pairin
100168f8:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10016908:	4e206e6f 7320746f 74726174 00006465     on Not started..
10016918:	76616c53 65532065 69727563 52207974     Slave Security R
10016928:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10016938:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10016948:	71655220 74736575 41202d20 65687475      Request - Authe
10016958:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10016968:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10016978:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10016988:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10016998:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100169a8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100169b8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100169c8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100169d8:	206e6f28 6568746f 65442072 65636976     (on other Device
100169e8:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
100169f8:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10016a08:	74616546 20657275 20746f4e 70707573     Feature Not supp
10016a18:	6574726f 00000064 65746e45 20646572     orted...Entered 
10016a28:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10016a38:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10016a48:	7020666f 20726565 69766564 69206563     of peer device i
10016a58:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10016a68:	00000000 61656c50 75206573 6961706e     ....Please unpai
10016a78:	68742072 65642065 65636976 6f726620     r the device fro
10016a88:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10016a98:	656c6962 65732029 6e697474 6d207367     bile) settings m
10016aa8:	20756e65 20646e61 72617473 61702074     enu and start pa
10016ab8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10016ac8:	69747079 52206e6f 65757165 52207473     yption Request R
10016ad8:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10016ae8:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10016af8:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10016b08:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10016b18:	09095d74 61656c50 63206573 6b636568     t]..Please check
10016b28:	65687420 776f7020 61207265 6320646e      the power and c
10016b38:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10016b48:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10016b58:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10016b68:	6e206563 20656d61 20746573 6c696166     ce name set fail
10016b78:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
10016b88:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
10016b98:	73736572 74656720 69616620 0064656c     ress get failed.
10016ba8:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10016bb8:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
10016bc8:	20656369 666e6f63 72756769 6f697461     ice configuratio
10016bd8:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10016be8:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016bf8:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10016c08:	72646441 20737365 6c696166 00006465     Address failed..
10016c18:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10016c28:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10016c38:	65732065 69727563 72207974 65757165     e security reque
10016c48:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10016c58:	65746365 6f742064 65657020 65642072     ected to peer de
10016c68:	65636976 74697720 64612068 73657264     vice with addres
10016c78:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10016c88:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10016c98:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10016ca8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10016cb8:	61522067 6d6f646e 64646120 73736572     g Random address
10016cc8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10016cd8:	626d756e 6f207265 6f632066 63656e6e     number of connec
10016ce8:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10016cf8:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10016d08:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10016d18:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10016d28:	53202d20 75746174 25203a73 00000064      - Status: %d...
10016d38:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10016d48:	73697472 6e656d65 61642074 73206174     rtisement data s
10016d58:	66207465 656c6961 00000064              et failed...

10016d64 <ble_mgr_gap_handle>:
10016d64:	1000d365 1000d549 1000d37d 1000d3a5     e...I...}.......
10016d74:	00000000 1000dff5 1000d3fd 1000d379     ............y...
10016d84:	1000d6e9 1000d5c9 1000d8e9 1000d701     ................
10016d94:	1000da39 1000db7d 1000d485 1000e231     9...}.......1...
	...
10016db0:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10016dc0:	316e7442 746e6920 202e2e2e 00000000     Btn1 int... ....
10016dd0:	2055504d 20746e69 29642528 202e2e2e     MPU int (%d)... 
10016de0:	00000000 656d6954 69203172 2e2e746e     ....Timer1 int..
10016df0:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10016e00:	0000202e 2055504d 646e6573 20676e69     . ..MPU sending 
10016e10:	2f642528 2e296425 00202e2e 73756c66     (%d/%d)... .flus
10016e20:	676e6968 00000021 73657250 65732073     hing!...Press se
10016e30:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10016e40:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10016e50:	6e657645 65672074 69742074 756f656d     Event get timeou
10016e60:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
10016e70:	72727563 00006465 656d7441 6f43206c     curred..Atmel Co
10016e80:	022e7072                                         rp.

10016e83 <CSWTCH.45>:
10016e83:	00100402                                         ...

10016e86 <CSWTCH.47>:
10016e86:	03010300 03030303 03030303 02020303              ...............

10016e95 <client_conf_uuid>:
10016e95:	29042902                                         .)

10016e97 <presentation_format_uuid>:
10016e97:	29012904                                         .)

10016e99 <user_desc_uuid>:
10016e99:	29032901                                         .)

10016e9b <server_conf_uuid>:
10016e9b:	29002903                                         .)

10016e9d <extended_props_uuid>:
10016e9d:	28022900                                         .)

10016e9f <include_uuid>:
10016e9f:	28032802                                         .(

10016ea1 <char_uuid>:
10016ea1:	ca002803 ee100130 ac10012f 84100130     .(..0.../...0...
10016eb1:	ac100130 78100130 ac100130 84100130     0...0..x0...0...
10016ec1:	ee100130 ee10012f 7810012f 84100130     0.../.../..x0...
10016ed1:	30100130 30100131 30100131 b2100131     0..01..01..01...
10016ee1:	ee100130 ee10012f 9810012f 82100130     0.../.../...0...
10016ef1:	98100130 78100130 98100130 82100130     0...0..x0...0...
10016f01:	ee100130 ee10012f 7810012f 82100130     0.../.../..x0...
10016f11:	30100130 30100131 30100131 3c100131     0..01..01..01..<
10016f21:	28100131 86100134 86100133 84100133     1..(4...3...3...
10016f31:	1a100133 1a100134 10100134 84100134     3...4...4...4...
10016f41:	1a100133 10100134 1a100134 84100134     3...4...4...4...
10016f51:	20100133 20100134 20100134 aa100134     3.. 4.. 4.. 4...
10016f61:	9c100134 5c10013d 5c10013c 5a10013c     4...=..\<..\<..Z
10016f71:	7410013c 7410013d 6610013d 5a10013d     <..t=..t=..f=..Z
10016f81:	7410013c 6610013d 7410013d 5a10013d     <..t=..f=..t=..Z
10016f91:	7c10013c 7c10013d 7c10013d 7c10013d     <..|=..|=..|=..|
10016fa1:	4310013f a8000000                                ?..C...

10016fa8 <_global_impure_ptr>:
10016fa8:	100170a8                                .p..

10016fac <__sf_fake_stdin>:
	...

10016fcc <__sf_fake_stdout>:
	...

10016fec <__sf_fake_stderr>:
	...
1001700c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001701c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001702c:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001703c:	00006665                                ef..

10017040 <_init>:
10017040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017042:	46c0      	nop			; (mov r8, r8)
10017044:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017046:	bc08      	pop	{r3}
10017048:	469e      	mov	lr, r3
1001704a:	4770      	bx	lr

1001704c <__init_array_start>:
1001704c:	100080b1 	.word	0x100080b1

10017050 <_fini>:
10017050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017052:	46c0      	nop			; (mov r8, r8)
10017054:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017056:	bc08      	pop	{r3}
10017058:	469e      	mov	lr, r3
1001705a:	4770      	bx	lr

1001705c <__fini_array_start>:
1001705c:	10008089 	.word	0x10008089
