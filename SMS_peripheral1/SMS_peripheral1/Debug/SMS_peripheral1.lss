
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fcb0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10017cb0  10017cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea4  10017d5c  10017d5c  00017d5c  2**2
                  ALLOC
  3 .stack        00001800  1001ac00  1001ac00  00017d5c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00017d5c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017d84  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050f09  00000000  00000000  00017e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000591b  00000000  00000000  00068d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ba23  00000000  00000000  0006e65c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d68  00000000  00000000  0007a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  0007ade7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028d20  00000000  00000000  0007bbc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018db6  00000000  00000000  000a48e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014723b  00000000  00000000  000bd69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f4c  00000000  00000000  002048d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10017cb0 	.word	0x10017cb0
10008068:	10017cb0 	.word	0x10017cb0
1000806c:	10017d5c 	.word	0x10017d5c
10008070:	1001ac00 	.word	0x1001ac00
10008074:	10017d5c 	.word	0x10017d5c
10008078:	10017cb4 	.word	0x10017cb4
1000807c:	10017d60 	.word	0x10017d60
10008080:	10014951 	.word	0x10014951
10008084:	1000f4d1 	.word	0x1000f4d1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10017d5c 	.word	0x10017d5c
100080a8:	00000000 	.word	0x00000000
100080ac:	10017cb0 	.word	0x10017cb0

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017d60 	.word	0x10017d60
100080dc:	10017cb0 	.word	0x10017cb0
100080e0:	10017cb0 	.word	0x10017cb0
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c34d 	.word	0x1000c34d
10008114:	10012c59 	.word	0x10012c59
10008118:	10017cb4 	.word	0x10017cb4
1000811c:	000f4240 	.word	0x000f4240
10008120:	10017cb0 	.word	0x10017cb0
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	10014b5d 	.word	0x10014b5d
10008160:	10017cb4 	.word	0x10017cb4
10008164:	e000e010 	.word	0xe000e010
10008168:	10015b88 	.word	0x10015b88
1000816c:	10014b29 	.word	0x10014b29

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	10017d78 	.word	0x10017d78

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	10017d78 	.word	0x10017d78

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	10017d78 	.word	0x10017d78

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b2b      	ldr	r3, [pc, #172]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a28      	ldr	r2, [pc, #160]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a24      	ldr	r2, [pc, #144]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b23      	ldr	r3, [pc, #140]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d21      	ldr	r5, [pc, #132]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b10      	ldr	r3, [pc, #64]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0d      	ldr	r3, [pc, #52]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d109      	bne.n	1000828a <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4909      	ldr	r1, [pc, #36]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008284:	2200      	movs	r2, #0
10008286:	4b05      	ldr	r3, [pc, #20]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008288:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000828a:	4905      	ldr	r1, [pc, #20]	; (100082a0 <aon_sleep_timer_init+0xbc>)
1000828c:	202b      	movs	r0, #43	; 0x2b
1000828e:	4b05      	ldr	r3, [pc, #20]	; (100082a4 <aon_sleep_timer_init+0xc0>)
10008290:	4798      	blx	r3
}
10008292:	b003      	add	sp, #12
10008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008296:	46c0      	nop			; (mov r8, r8)
10008298:	4000e000 	.word	0x4000e000
1000829c:	4000d000 	.word	0x4000d000
100082a0:	100081b1 	.word	0x100081b1
100082a4:	1000ce89 	.word	0x1000ce89

100082a8 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082aa:	464f      	mov	r7, r9
100082ac:	4646      	mov	r6, r8
100082ae:	b4c0      	push	{r6, r7}
100082b0:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100082b2:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082b4:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082b6:	2d00      	cmp	r5, #0
100082b8:	d02f      	beq.n	1000831a <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082ba:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082bc:	2428      	movs	r4, #40	; 0x28
100082be:	5d13      	ldrb	r3, [r2, r4]
100082c0:	07db      	lsls	r3, r3, #31
100082c2:	d4fc      	bmi.n	100082be <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082c4:	2301      	movs	r3, #1
100082c6:	2434      	movs	r4, #52	; 0x34
100082c8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ca:	3c14      	subs	r4, #20
100082cc:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082ce:	880b      	ldrh	r3, [r1, #0]
100082d0:	005b      	lsls	r3, r3, #1
100082d2:	2402      	movs	r4, #2
100082d4:	34ff      	adds	r4, #255	; 0xff
100082d6:	4323      	orrs	r3, r4
100082d8:	b29b      	uxth	r3, r3
100082da:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082dc:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082de:	2301      	movs	r3, #1
100082e0:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082e2:	7b13      	ldrb	r3, [r2, #12]
100082e4:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082e6:	4640      	mov	r0, r8
100082e8:	4218      	tst	r0, r3
100082ea:	d006      	beq.n	100082fa <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082ec:	1c67      	adds	r7, r4, #1
100082ee:	7910      	ldrb	r0, [r2, #4]
100082f0:	4684      	mov	ip, r0
100082f2:	6848      	ldr	r0, [r1, #4]
100082f4:	4666      	mov	r6, ip
100082f6:	5506      	strb	r6, [r0, r4]
100082f8:	b2bc      	uxth	r4, r7
            //printf("counter %d", (counter-1));
	} while (counter < length); 
100082fa:	42ac      	cmp	r4, r5
100082fc:	d3f1      	bcc.n	100082e2 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082fe:	06db      	lsls	r3, r3, #27
10008300:	d403      	bmi.n	1000830a <_i2c_master_read_packet+0x62>
10008302:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
10008304:	7a13      	ldrb	r3, [r2, #8]
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
            //printf("counter %d", (counter-1));
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008306:	420b      	tst	r3, r1
10008308:	d0fc      	beq.n	10008304 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000830a:	464b      	mov	r3, r9
1000830c:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000830e:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008310:	2900      	cmp	r1, #0
10008312:	d102      	bne.n	1000831a <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008314:	3320      	adds	r3, #32
10008316:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
10008318:	2300      	movs	r3, #0
}
1000831a:	0018      	movs	r0, r3
1000831c:	bc0c      	pop	{r2, r3}
1000831e:	4690      	mov	r8, r2
10008320:	4699      	mov	r9, r3
10008322:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008324 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008324:	b5f0      	push	{r4, r5, r6, r7, lr}
10008326:	b083      	sub	sp, #12
10008328:	4684      	mov	ip, r0
1000832a:	0008      	movs	r0, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000832c:	4663      	mov	r3, ip
1000832e:	681c      	ldr	r4, [r3, #0]
	volatile uint16_t counter = 0;
10008330:	2200      	movs	r2, #0
10008332:	466b      	mov	r3, sp
10008334:	80da      	strh	r2, [r3, #6]
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008336:	8849      	ldrh	r1, [r1, #2]
10008338:	3228      	adds	r2, #40	; 0x28
1000833a:	5ca3      	ldrb	r3, [r4, r2]
1000833c:	07db      	lsls	r3, r3, #31
1000833e:	d4fc      	bmi.n	1000833a <_i2c_master_write_packet+0x16>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008340:	2301      	movs	r3, #1
10008342:	2234      	movs	r2, #52	; 0x34
10008344:	54a3      	strb	r3, [r4, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008346:	3a14      	subs	r2, #20
10008348:	54a3      	strb	r3, [r4, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000834a:	8803      	ldrh	r3, [r0, #0]
1000834c:	005b      	lsls	r3, r3, #1
1000834e:	32e0      	adds	r2, #224	; 0xe0
10008350:	4313      	orrs	r3, r2
10008352:	b29b      	uxth	r3, r3
10008354:	8023      	strh	r3, [r4, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008356:	2701      	movs	r7, #1
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008358:	466b      	mov	r3, sp
1000835a:	1d9d      	adds	r5, r3, #6

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
1000835c:	7a23      	ldrb	r3, [r4, #8]
1000835e:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008360:	421f      	tst	r7, r3
10008362:	d007      	beq.n	10008374 <_i2c_master_write_packet+0x50>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008364:	882a      	ldrh	r2, [r5, #0]
10008366:	b292      	uxth	r2, r2
10008368:	1c56      	adds	r6, r2, #1
1000836a:	b2b6      	uxth	r6, r6
1000836c:	802e      	strh	r6, [r5, #0]
1000836e:	6846      	ldr	r6, [r0, #4]
10008370:	5cb2      	ldrb	r2, [r6, r2]
10008372:	8022      	strh	r2, [r4, #0]
            //printf("\r\ncounter %d",(counter-1));
            //printf(".");
		}
	} while (counter < length); 
10008374:	882a      	ldrh	r2, [r5, #0]
10008376:	b292      	uxth	r2, r2
10008378:	4291      	cmp	r1, r2
1000837a:	d8ef      	bhi.n	1000835c <_i2c_master_write_packet+0x38>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000837c:	06db      	lsls	r3, r3, #27
1000837e:	d403      	bmi.n	10008388 <_i2c_master_write_packet+0x64>
10008380:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008382:	7a23      	ldrb	r3, [r4, #8]
            //printf(".");
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008384:	4213      	tst	r3, r2
10008386:	d0fc      	beq.n	10008382 <_i2c_master_write_packet+0x5e>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008388:	4663      	mov	r3, ip
1000838a:	795b      	ldrb	r3, [r3, #5]
1000838c:	2b00      	cmp	r3, #0
1000838e:	d102      	bne.n	10008396 <_i2c_master_write_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008390:	2200      	movs	r2, #0
10008392:	3320      	adds	r3, #32
10008394:	54e2      	strb	r2, [r4, r3]
	}

	return STATUS_OK;
}
10008396:	2000      	movs	r0, #0
10008398:	b003      	add	sp, #12
1000839a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000839c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000839c:	2303      	movs	r3, #3
1000839e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083a0:	330d      	adds	r3, #13
100083a2:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100083a4:	3b08      	subs	r3, #8
100083a6:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100083a8:	3301      	adds	r3, #1
100083aa:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100083ac:	3b07      	subs	r3, #7
100083ae:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083b0:	6103      	str	r3, [r0, #16]
}
100083b2:	4770      	bx	lr

100083b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083b4:	b570      	push	{r4, r5, r6, lr}
100083b6:	0004      	movs	r4, r0
100083b8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083ba:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083bc:	2800      	cmp	r0, #0
100083be:	d026      	beq.n	1000840e <i2c_master_init+0x5a>
100083c0:	2a00      	cmp	r2, #0
100083c2:	d026      	beq.n	10008412 <i2c_master_init+0x5e>
100083c4:	2228      	movs	r2, #40	; 0x28
100083c6:	5c8b      	ldrb	r3, [r1, r2]
100083c8:	07db      	lsls	r3, r3, #31
100083ca:	d4fc      	bmi.n	100083c6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083cc:	2300      	movs	r3, #0
100083ce:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083d0:	6823      	ldr	r3, [r4, #0]
100083d2:	4a11      	ldr	r2, [pc, #68]	; (10008418 <i2c_master_init+0x64>)
100083d4:	4293      	cmp	r3, r2
100083d6:	d103      	bne.n	100083e0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083d8:	2003      	movs	r0, #3
100083da:	4b10      	ldr	r3, [pc, #64]	; (1000841c <i2c_master_init+0x68>)
100083dc:	4798      	blx	r3
100083de:	e006      	b.n	100083ee <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083e0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083e2:	4a0f      	ldr	r2, [pc, #60]	; (10008420 <i2c_master_init+0x6c>)
100083e4:	4293      	cmp	r3, r2
100083e6:	d115      	bne.n	10008414 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083e8:	3002      	adds	r0, #2
100083ea:	4b0c      	ldr	r3, [pc, #48]	; (1000841c <i2c_master_init+0x68>)
100083ec:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ee:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083f0:	8929      	ldrh	r1, [r5, #8]
100083f2:	7928      	ldrb	r0, [r5, #4]
100083f4:	4e0b      	ldr	r6, [pc, #44]	; (10008424 <i2c_master_init+0x70>)
100083f6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083f8:	8a29      	ldrh	r1, [r5, #16]
100083fa:	7b28      	ldrb	r0, [r5, #12]
100083fc:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083fe:	782b      	ldrb	r3, [r5, #0]
10008400:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008402:	886b      	ldrh	r3, [r5, #2]
10008404:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
10008406:	2301      	movs	r3, #1
10008408:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000840a:	2000      	movs	r0, #0
1000840c:	e002      	b.n	10008414 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840e:	2017      	movs	r0, #23
10008410:	e000      	b.n	10008414 <i2c_master_init+0x60>
10008412:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008414:	bd70      	pop	{r4, r5, r6, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40003000 	.word	0x40003000
1000841c:	1000ca21 	.word	0x1000ca21
10008420:	40003400 	.word	0x40003400
10008424:	1000bfa9 	.word	0x1000bfa9

10008428 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008428:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000842a:	2800      	cmp	r0, #0
1000842c:	d008      	beq.n	10008440 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000842e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008430:	2900      	cmp	r1, #0
10008432:	d006      	beq.n	10008442 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008434:	2300      	movs	r3, #0
10008436:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008438:	4b03      	ldr	r3, [pc, #12]	; (10008448 <i2c_master_read_packet_wait+0x20>)
1000843a:	4798      	blx	r3
1000843c:	0003      	movs	r3, r0
1000843e:	e000      	b.n	10008442 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008440:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
10008442:	0018      	movs	r0, r3
10008444:	bd10      	pop	{r4, pc}
10008446:	46c0      	nop			; (mov r8, r8)
10008448:	100082a9 	.word	0x100082a9

1000844c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000844c:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000844e:	2800      	cmp	r0, #0
10008450:	d008      	beq.n	10008464 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008452:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008454:	2900      	cmp	r1, #0
10008456:	d006      	beq.n	10008466 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008458:	2300      	movs	r3, #0
1000845a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000845c:	4b03      	ldr	r3, [pc, #12]	; (1000846c <i2c_master_write_packet_wait+0x20>)
1000845e:	4798      	blx	r3
10008460:	0003      	movs	r3, r0
10008462:	e000      	b.n	10008466 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008464:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008466:	0018      	movs	r0, r3
10008468:	bd10      	pop	{r4, pc}
1000846a:	46c0      	nop			; (mov r8, r8)
1000846c:	10008325 	.word	0x10008325

10008470 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008470:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008472:	2800      	cmp	r0, #0
10008474:	d008      	beq.n	10008488 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008476:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008478:	2900      	cmp	r1, #0
1000847a:	d006      	beq.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000847c:	3b16      	subs	r3, #22
1000847e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008480:	4b03      	ldr	r3, [pc, #12]	; (10008490 <i2c_master_write_packet_wait_no_stop+0x20>)
10008482:	4798      	blx	r3
10008484:	0003      	movs	r3, r0
10008486:	e000      	b.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008488:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000848a:	0018      	movs	r0, r3
1000848c:	bd10      	pop	{r4, pc}
1000848e:	46c0      	nop			; (mov r8, r8)
10008490:	10008325 	.word	0x10008325

10008494 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008494:	b510      	push	{r4, lr}
10008496:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008498:	2324      	movs	r3, #36	; 0x24
1000849a:	4a25      	ldr	r2, [pc, #148]	; (10008530 <set_int_enable+0x9c>)
1000849c:	5cd3      	ldrb	r3, [r2, r3]
1000849e:	2b00      	cmp	r3, #0
100084a0:	d019      	beq.n	100084d6 <set_int_enable+0x42>
        if (enable)
100084a2:	2800      	cmp	r0, #0
100084a4:	d003      	beq.n	100084ae <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084a6:	2202      	movs	r2, #2
100084a8:	466b      	mov	r3, sp
100084aa:	71da      	strb	r2, [r3, #7]
100084ac:	e002      	b.n	100084b4 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084ae:	2200      	movs	r2, #0
100084b0:	466b      	mov	r3, sp
100084b2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084b4:	4b1e      	ldr	r3, [pc, #120]	; (10008530 <set_int_enable+0x9c>)
100084b6:	681a      	ldr	r2, [r3, #0]
100084b8:	7c51      	ldrb	r1, [r2, #17]
100084ba:	685b      	ldr	r3, [r3, #4]
100084bc:	7818      	ldrb	r0, [r3, #0]
100084be:	466b      	mov	r3, sp
100084c0:	3307      	adds	r3, #7
100084c2:	2201      	movs	r2, #1
100084c4:	4c1b      	ldr	r4, [pc, #108]	; (10008534 <set_int_enable+0xa0>)
100084c6:	47a0      	blx	r4
100084c8:	2800      	cmp	r0, #0
100084ca:	d127      	bne.n	1000851c <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084cc:	466b      	mov	r3, sp
100084ce:	79da      	ldrb	r2, [r3, #7]
100084d0:	4b17      	ldr	r3, [pc, #92]	; (10008530 <set_int_enable+0x9c>)
100084d2:	745a      	strb	r2, [r3, #17]
100084d4:	e02a      	b.n	1000852c <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084d6:	4b16      	ldr	r3, [pc, #88]	; (10008530 <set_int_enable+0x9c>)
100084d8:	7a9b      	ldrb	r3, [r3, #10]
100084da:	2b00      	cmp	r3, #0
100084dc:	d021      	beq.n	10008522 <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084de:	2800      	cmp	r0, #0
100084e0:	d008      	beq.n	100084f4 <set_int_enable+0x60>
100084e2:	4b13      	ldr	r3, [pc, #76]	; (10008530 <set_int_enable+0x9c>)
100084e4:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084e6:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084e8:	2b00      	cmp	r3, #0
100084ea:	d11f      	bne.n	1000852c <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084ec:	2201      	movs	r2, #1
100084ee:	466b      	mov	r3, sp
100084f0:	71da      	strb	r2, [r3, #7]
100084f2:	e002      	b.n	100084fa <set_int_enable+0x66>
        else
            tmp = 0x00;
100084f4:	2200      	movs	r2, #0
100084f6:	466b      	mov	r3, sp
100084f8:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084fa:	4b0d      	ldr	r3, [pc, #52]	; (10008530 <set_int_enable+0x9c>)
100084fc:	681a      	ldr	r2, [r3, #0]
100084fe:	7c51      	ldrb	r1, [r2, #17]
10008500:	685b      	ldr	r3, [r3, #4]
10008502:	7818      	ldrb	r0, [r3, #0]
10008504:	466b      	mov	r3, sp
10008506:	3307      	adds	r3, #7
10008508:	2201      	movs	r2, #1
1000850a:	4c0a      	ldr	r4, [pc, #40]	; (10008534 <set_int_enable+0xa0>)
1000850c:	47a0      	blx	r4
1000850e:	2800      	cmp	r0, #0
10008510:	d10a      	bne.n	10008528 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008512:	466b      	mov	r3, sp
10008514:	79da      	ldrb	r2, [r3, #7]
10008516:	4b06      	ldr	r3, [pc, #24]	; (10008530 <set_int_enable+0x9c>)
10008518:	745a      	strb	r2, [r3, #17]
1000851a:	e007      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000851c:	2001      	movs	r0, #1
1000851e:	4240      	negs	r0, r0
10008520:	e004      	b.n	1000852c <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
10008522:	2001      	movs	r0, #1
10008524:	4240      	negs	r0, r0
10008526:	e001      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008528:	2001      	movs	r0, #1
1000852a:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
1000852c:	b002      	add	sp, #8
1000852e:	bd10      	pop	{r4, pc}
10008530:	10017cb8 	.word	0x10017cb8
10008534:	1000a75d 	.word	0x1000a75d

10008538 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008538:	b510      	push	{r4, lr}
1000853a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000853c:	4b79      	ldr	r3, [pc, #484]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000853e:	7a9b      	ldrb	r3, [r3, #10]
10008540:	2b00      	cmp	r3, #0
10008542:	d100      	bne.n	10008546 <mpu_reset_fifo+0xe>
10008544:	e0ce      	b.n	100086e4 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008546:	466b      	mov	r3, sp
10008548:	3307      	adds	r3, #7
1000854a:	2200      	movs	r2, #0
1000854c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000854e:	4a75      	ldr	r2, [pc, #468]	; (10008724 <mpu_reset_fifo+0x1ec>)
10008550:	6811      	ldr	r1, [r2, #0]
10008552:	7c49      	ldrb	r1, [r1, #17]
10008554:	6852      	ldr	r2, [r2, #4]
10008556:	7810      	ldrb	r0, [r2, #0]
10008558:	2201      	movs	r2, #1
1000855a:	4c73      	ldr	r4, [pc, #460]	; (10008728 <mpu_reset_fifo+0x1f0>)
1000855c:	47a0      	blx	r4
1000855e:	2800      	cmp	r0, #0
10008560:	d000      	beq.n	10008564 <mpu_reset_fifo+0x2c>
10008562:	e0c2      	b.n	100086ea <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008564:	4b6f      	ldr	r3, [pc, #444]	; (10008724 <mpu_reset_fifo+0x1ec>)
10008566:	681a      	ldr	r2, [r3, #0]
10008568:	7951      	ldrb	r1, [r2, #5]
1000856a:	685b      	ldr	r3, [r3, #4]
1000856c:	7818      	ldrb	r0, [r3, #0]
1000856e:	466b      	mov	r3, sp
10008570:	3307      	adds	r3, #7
10008572:	2201      	movs	r2, #1
10008574:	4c6c      	ldr	r4, [pc, #432]	; (10008728 <mpu_reset_fifo+0x1f0>)
10008576:	47a0      	blx	r4
10008578:	2800      	cmp	r0, #0
1000857a:	d000      	beq.n	1000857e <mpu_reset_fifo+0x46>
1000857c:	e0b8      	b.n	100086f0 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000857e:	4b69      	ldr	r3, [pc, #420]	; (10008724 <mpu_reset_fifo+0x1ec>)
10008580:	681a      	ldr	r2, [r3, #0]
10008582:	7911      	ldrb	r1, [r2, #4]
10008584:	685b      	ldr	r3, [r3, #4]
10008586:	7818      	ldrb	r0, [r3, #0]
10008588:	466b      	mov	r3, sp
1000858a:	3307      	adds	r3, #7
1000858c:	2201      	movs	r2, #1
1000858e:	4c66      	ldr	r4, [pc, #408]	; (10008728 <mpu_reset_fifo+0x1f0>)
10008590:	47a0      	blx	r4
10008592:	2800      	cmp	r0, #0
10008594:	d000      	beq.n	10008598 <mpu_reset_fifo+0x60>
10008596:	e0ae      	b.n	100086f6 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008598:	2324      	movs	r3, #36	; 0x24
1000859a:	4a62      	ldr	r2, [pc, #392]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000859c:	5cd3      	ldrb	r3, [r2, r3]
1000859e:	2b00      	cmp	r3, #0
100085a0:	d04f      	beq.n	10008642 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100085a2:	466b      	mov	r3, sp
100085a4:	3307      	adds	r3, #7
100085a6:	220c      	movs	r2, #12
100085a8:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085aa:	4a5e      	ldr	r2, [pc, #376]	; (10008724 <mpu_reset_fifo+0x1ec>)
100085ac:	6811      	ldr	r1, [r2, #0]
100085ae:	7909      	ldrb	r1, [r1, #4]
100085b0:	6852      	ldr	r2, [r2, #4]
100085b2:	7810      	ldrb	r0, [r2, #0]
100085b4:	2201      	movs	r2, #1
100085b6:	4c5c      	ldr	r4, [pc, #368]	; (10008728 <mpu_reset_fifo+0x1f0>)
100085b8:	47a0      	blx	r4
100085ba:	2800      	cmp	r0, #0
100085bc:	d000      	beq.n	100085c0 <mpu_reset_fifo+0x88>
100085be:	e09d      	b.n	100086fc <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
100085c0:	3032      	adds	r0, #50	; 0x32
100085c2:	4b5a      	ldr	r3, [pc, #360]	; (1000872c <mpu_reset_fifo+0x1f4>)
100085c4:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100085c6:	22c0      	movs	r2, #192	; 0xc0
100085c8:	466b      	mov	r3, sp
100085ca:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100085cc:	4b55      	ldr	r3, [pc, #340]	; (10008724 <mpu_reset_fifo+0x1ec>)
100085ce:	7a9b      	ldrb	r3, [r3, #10]
100085d0:	07db      	lsls	r3, r3, #31
100085d2:	d502      	bpl.n	100085da <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100085d4:	3220      	adds	r2, #32
100085d6:	466b      	mov	r3, sp
100085d8:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085da:	4b52      	ldr	r3, [pc, #328]	; (10008724 <mpu_reset_fifo+0x1ec>)
100085dc:	681a      	ldr	r2, [r3, #0]
100085de:	7911      	ldrb	r1, [r2, #4]
100085e0:	685b      	ldr	r3, [r3, #4]
100085e2:	7818      	ldrb	r0, [r3, #0]
100085e4:	466b      	mov	r3, sp
100085e6:	3307      	adds	r3, #7
100085e8:	2201      	movs	r2, #1
100085ea:	4c4f      	ldr	r4, [pc, #316]	; (10008728 <mpu_reset_fifo+0x1f0>)
100085ec:	47a0      	blx	r4
100085ee:	2800      	cmp	r0, #0
100085f0:	d000      	beq.n	100085f4 <mpu_reset_fifo+0xbc>
100085f2:	e086      	b.n	10008702 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100085f4:	4b4b      	ldr	r3, [pc, #300]	; (10008724 <mpu_reset_fifo+0x1ec>)
100085f6:	7c5b      	ldrb	r3, [r3, #17]
100085f8:	2b00      	cmp	r3, #0
100085fa:	d003      	beq.n	10008604 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100085fc:	2202      	movs	r2, #2
100085fe:	466b      	mov	r3, sp
10008600:	71da      	strb	r2, [r3, #7]
10008602:	e002      	b.n	1000860a <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008604:	2200      	movs	r2, #0
10008606:	466b      	mov	r3, sp
10008608:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000860a:	4b46      	ldr	r3, [pc, #280]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000860c:	681a      	ldr	r2, [r3, #0]
1000860e:	7c51      	ldrb	r1, [r2, #17]
10008610:	685b      	ldr	r3, [r3, #4]
10008612:	7818      	ldrb	r0, [r3, #0]
10008614:	466b      	mov	r3, sp
10008616:	3307      	adds	r3, #7
10008618:	2201      	movs	r2, #1
1000861a:	4c43      	ldr	r4, [pc, #268]	; (10008728 <mpu_reset_fifo+0x1f0>)
1000861c:	47a0      	blx	r4
1000861e:	2800      	cmp	r0, #0
10008620:	d172      	bne.n	10008708 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
10008622:	466b      	mov	r3, sp
10008624:	3307      	adds	r3, #7
10008626:	2200      	movs	r2, #0
10008628:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000862a:	4a3e      	ldr	r2, [pc, #248]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000862c:	6811      	ldr	r1, [r2, #0]
1000862e:	7949      	ldrb	r1, [r1, #5]
10008630:	6852      	ldr	r2, [r2, #4]
10008632:	7810      	ldrb	r0, [r2, #0]
10008634:	2201      	movs	r2, #1
10008636:	4c3c      	ldr	r4, [pc, #240]	; (10008728 <mpu_reset_fifo+0x1f0>)
10008638:	47a0      	blx	r4
1000863a:	1e43      	subs	r3, r0, #1
1000863c:	4198      	sbcs	r0, r3
1000863e:	4240      	negs	r0, r0
10008640:	e06d      	b.n	1000871e <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
10008642:	466b      	mov	r3, sp
10008644:	3307      	adds	r3, #7
10008646:	2204      	movs	r2, #4
10008648:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000864a:	4a36      	ldr	r2, [pc, #216]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000864c:	6811      	ldr	r1, [r2, #0]
1000864e:	7909      	ldrb	r1, [r1, #4]
10008650:	6852      	ldr	r2, [r2, #4]
10008652:	7810      	ldrb	r0, [r2, #0]
10008654:	2201      	movs	r2, #1
10008656:	4c34      	ldr	r4, [pc, #208]	; (10008728 <mpu_reset_fifo+0x1f0>)
10008658:	47a0      	blx	r4
1000865a:	2800      	cmp	r0, #0
1000865c:	d157      	bne.n	1000870e <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000865e:	4b31      	ldr	r3, [pc, #196]	; (10008724 <mpu_reset_fifo+0x1ec>)
10008660:	7c9b      	ldrb	r3, [r3, #18]
10008662:	2b00      	cmp	r3, #0
10008664:	d103      	bne.n	1000866e <mpu_reset_fifo+0x136>
10008666:	4b2f      	ldr	r3, [pc, #188]	; (10008724 <mpu_reset_fifo+0x1ec>)
10008668:	7a9b      	ldrb	r3, [r3, #10]
1000866a:	07db      	lsls	r3, r3, #31
1000866c:	d403      	bmi.n	10008676 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000866e:	2240      	movs	r2, #64	; 0x40
10008670:	466b      	mov	r3, sp
10008672:	71da      	strb	r2, [r3, #7]
10008674:	e002      	b.n	1000867c <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008676:	2260      	movs	r2, #96	; 0x60
10008678:	466b      	mov	r3, sp
1000867a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000867c:	4b29      	ldr	r3, [pc, #164]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000867e:	681a      	ldr	r2, [r3, #0]
10008680:	7911      	ldrb	r1, [r2, #4]
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	466b      	mov	r3, sp
10008688:	3307      	adds	r3, #7
1000868a:	2201      	movs	r2, #1
1000868c:	4c26      	ldr	r4, [pc, #152]	; (10008728 <mpu_reset_fifo+0x1f0>)
1000868e:	47a0      	blx	r4
10008690:	2800      	cmp	r0, #0
10008692:	d13f      	bne.n	10008714 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008694:	3032      	adds	r0, #50	; 0x32
10008696:	4b25      	ldr	r3, [pc, #148]	; (1000872c <mpu_reset_fifo+0x1f4>)
10008698:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000869a:	4b22      	ldr	r3, [pc, #136]	; (10008724 <mpu_reset_fifo+0x1ec>)
1000869c:	7c5b      	ldrb	r3, [r3, #17]
1000869e:	2b00      	cmp	r3, #0
100086a0:	d003      	beq.n	100086aa <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
100086a2:	2201      	movs	r2, #1
100086a4:	466b      	mov	r3, sp
100086a6:	71da      	strb	r2, [r3, #7]
100086a8:	e002      	b.n	100086b0 <mpu_reset_fifo+0x178>
        else
            data = 0;
100086aa:	2200      	movs	r2, #0
100086ac:	466b      	mov	r3, sp
100086ae:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086b0:	4b1c      	ldr	r3, [pc, #112]	; (10008724 <mpu_reset_fifo+0x1ec>)
100086b2:	681a      	ldr	r2, [r3, #0]
100086b4:	7c51      	ldrb	r1, [r2, #17]
100086b6:	685b      	ldr	r3, [r3, #4]
100086b8:	7818      	ldrb	r0, [r3, #0]
100086ba:	466b      	mov	r3, sp
100086bc:	3307      	adds	r3, #7
100086be:	2201      	movs	r2, #1
100086c0:	4c19      	ldr	r4, [pc, #100]	; (10008728 <mpu_reset_fifo+0x1f0>)
100086c2:	47a0      	blx	r4
100086c4:	2800      	cmp	r0, #0
100086c6:	d128      	bne.n	1000871a <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100086c8:	4a16      	ldr	r2, [pc, #88]	; (10008724 <mpu_reset_fifo+0x1ec>)
100086ca:	0013      	movs	r3, r2
100086cc:	3310      	adds	r3, #16
100086ce:	6811      	ldr	r1, [r2, #0]
100086d0:	7949      	ldrb	r1, [r1, #5]
100086d2:	6852      	ldr	r2, [r2, #4]
100086d4:	7810      	ldrb	r0, [r2, #0]
100086d6:	2201      	movs	r2, #1
100086d8:	4c13      	ldr	r4, [pc, #76]	; (10008728 <mpu_reset_fifo+0x1f0>)
100086da:	47a0      	blx	r4
100086dc:	1e43      	subs	r3, r0, #1
100086de:	4198      	sbcs	r0, r3
100086e0:	4240      	negs	r0, r0
100086e2:	e01c      	b.n	1000871e <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100086e4:	2001      	movs	r0, #1
100086e6:	4240      	negs	r0, r0
100086e8:	e019      	b.n	1000871e <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086ea:	2001      	movs	r0, #1
100086ec:	4240      	negs	r0, r0
100086ee:	e016      	b.n	1000871e <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100086f0:	2001      	movs	r0, #1
100086f2:	4240      	negs	r0, r0
100086f4:	e013      	b.n	1000871e <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086f6:	2001      	movs	r0, #1
100086f8:	4240      	negs	r0, r0
100086fa:	e010      	b.n	1000871e <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086fc:	2001      	movs	r0, #1
100086fe:	4240      	negs	r0, r0
10008700:	e00d      	b.n	1000871e <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008702:	2001      	movs	r0, #1
10008704:	4240      	negs	r0, r0
10008706:	e00a      	b.n	1000871e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008708:	2001      	movs	r0, #1
1000870a:	4240      	negs	r0, r0
1000870c:	e007      	b.n	1000871e <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000870e:	2001      	movs	r0, #1
10008710:	4240      	negs	r0, r0
10008712:	e004      	b.n	1000871e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008714:	2001      	movs	r0, #1
10008716:	4240      	negs	r0, r0
10008718:	e001      	b.n	1000871e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000871a:	2001      	movs	r0, #1
1000871c:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
1000871e:	b002      	add	sp, #8
10008720:	bd10      	pop	{r4, pc}
10008722:	46c0      	nop			; (mov r8, r8)
10008724:	10017cb8 	.word	0x10017cb8
10008728:	1000a75d 	.word	0x1000a75d
1000872c:	10008129 	.word	0x10008129

10008730 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008730:	b510      	push	{r4, lr}
10008732:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008734:	4b24      	ldr	r3, [pc, #144]	; (100087c8 <mpu_set_gyro_fsr+0x98>)
10008736:	7a9b      	ldrb	r3, [r3, #10]
10008738:	2b00      	cmp	r3, #0
1000873a:	d03b      	beq.n	100087b4 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
1000873c:	23fa      	movs	r3, #250	; 0xfa
1000873e:	005b      	lsls	r3, r3, #1
10008740:	4298      	cmp	r0, r3
10008742:	d010      	beq.n	10008766 <mpu_set_gyro_fsr+0x36>
10008744:	d802      	bhi.n	1000874c <mpu_set_gyro_fsr+0x1c>
10008746:	28fa      	cmp	r0, #250	; 0xfa
10008748:	d009      	beq.n	1000875e <mpu_set_gyro_fsr+0x2e>
1000874a:	e036      	b.n	100087ba <mpu_set_gyro_fsr+0x8a>
1000874c:	23fa      	movs	r3, #250	; 0xfa
1000874e:	009b      	lsls	r3, r3, #2
10008750:	4298      	cmp	r0, r3
10008752:	d00c      	beq.n	1000876e <mpu_set_gyro_fsr+0x3e>
10008754:	23fa      	movs	r3, #250	; 0xfa
10008756:	00db      	lsls	r3, r3, #3
10008758:	4298      	cmp	r0, r3
1000875a:	d00c      	beq.n	10008776 <mpu_set_gyro_fsr+0x46>
1000875c:	e02d      	b.n	100087ba <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000875e:	2200      	movs	r2, #0
10008760:	466b      	mov	r3, sp
10008762:	71da      	strb	r2, [r3, #7]
        break;
10008764:	e00a      	b.n	1000877c <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008766:	2208      	movs	r2, #8
10008768:	466b      	mov	r3, sp
1000876a:	71da      	strb	r2, [r3, #7]
        break;
1000876c:	e006      	b.n	1000877c <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000876e:	2210      	movs	r2, #16
10008770:	466b      	mov	r3, sp
10008772:	71da      	strb	r2, [r3, #7]
        break;
10008774:	e002      	b.n	1000877c <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008776:	2218      	movs	r2, #24
10008778:	466b      	mov	r3, sp
1000877a:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000877c:	466b      	mov	r3, sp
1000877e:	3307      	adds	r3, #7
10008780:	781b      	ldrb	r3, [r3, #0]
10008782:	4a11      	ldr	r2, [pc, #68]	; (100087c8 <mpu_set_gyro_fsr+0x98>)
10008784:	7a12      	ldrb	r2, [r2, #8]
10008786:	08db      	lsrs	r3, r3, #3
        return 0;
10008788:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000878a:	429a      	cmp	r2, r3
1000878c:	d01a      	beq.n	100087c4 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000878e:	4b0e      	ldr	r3, [pc, #56]	; (100087c8 <mpu_set_gyro_fsr+0x98>)
10008790:	681a      	ldr	r2, [r3, #0]
10008792:	7991      	ldrb	r1, [r2, #6]
10008794:	685b      	ldr	r3, [r3, #4]
10008796:	7818      	ldrb	r0, [r3, #0]
10008798:	466b      	mov	r3, sp
1000879a:	3307      	adds	r3, #7
1000879c:	2201      	movs	r2, #1
1000879e:	4c0b      	ldr	r4, [pc, #44]	; (100087cc <mpu_set_gyro_fsr+0x9c>)
100087a0:	47a0      	blx	r4
100087a2:	2800      	cmp	r0, #0
100087a4:	d10c      	bne.n	100087c0 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
100087a6:	466b      	mov	r3, sp
100087a8:	3307      	adds	r3, #7
100087aa:	781b      	ldrb	r3, [r3, #0]
100087ac:	08db      	lsrs	r3, r3, #3
100087ae:	4a06      	ldr	r2, [pc, #24]	; (100087c8 <mpu_set_gyro_fsr+0x98>)
100087b0:	7213      	strb	r3, [r2, #8]
    return 0;
100087b2:	e007      	b.n	100087c4 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087b4:	2001      	movs	r0, #1
100087b6:	4240      	negs	r0, r0
100087b8:	e004      	b.n	100087c4 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
100087ba:	2001      	movs	r0, #1
100087bc:	4240      	negs	r0, r0
100087be:	e001      	b.n	100087c4 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
100087c0:	2001      	movs	r0, #1
100087c2:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
100087c4:	b002      	add	sp, #8
100087c6:	bd10      	pop	{r4, pc}
100087c8:	10017cb8 	.word	0x10017cb8
100087cc:	1000a75d 	.word	0x1000a75d

100087d0 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
100087d0:	4b11      	ldr	r3, [pc, #68]	; (10008818 <mpu_get_accel_fsr+0x48>)
100087d2:	7a5b      	ldrb	r3, [r3, #9]
100087d4:	2b01      	cmp	r3, #1
100087d6:	d009      	beq.n	100087ec <mpu_get_accel_fsr+0x1c>
100087d8:	2b00      	cmp	r3, #0
100087da:	d004      	beq.n	100087e6 <mpu_get_accel_fsr+0x16>
100087dc:	2b02      	cmp	r3, #2
100087de:	d008      	beq.n	100087f2 <mpu_get_accel_fsr+0x22>
100087e0:	2b03      	cmp	r3, #3
100087e2:	d009      	beq.n	100087f8 <mpu_get_accel_fsr+0x28>
100087e4:	e014      	b.n	10008810 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
100087e6:	2302      	movs	r3, #2
100087e8:	7003      	strb	r3, [r0, #0]
        break;
100087ea:	e007      	b.n	100087fc <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100087ec:	2304      	movs	r3, #4
100087ee:	7003      	strb	r3, [r0, #0]
        break;
100087f0:	e004      	b.n	100087fc <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100087f2:	2308      	movs	r3, #8
100087f4:	7003      	strb	r3, [r0, #0]
        break;
100087f6:	e001      	b.n	100087fc <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100087f8:	2310      	movs	r3, #16
100087fa:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087fc:	4b06      	ldr	r3, [pc, #24]	; (10008818 <mpu_get_accel_fsr+0x48>)
100087fe:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008800:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008802:	2a00      	cmp	r2, #0
10008804:	d006      	beq.n	10008814 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
10008806:	7803      	ldrb	r3, [r0, #0]
10008808:	005b      	lsls	r3, r3, #1
1000880a:	7003      	strb	r3, [r0, #0]
    return 0;
1000880c:	2300      	movs	r3, #0
1000880e:	e001      	b.n	10008814 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008810:	2301      	movs	r3, #1
10008812:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008814:	0018      	movs	r0, r3
10008816:	4770      	bx	lr
10008818:	10017cb8 	.word	0x10017cb8

1000881c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000881c:	b510      	push	{r4, lr}
1000881e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008820:	4b21      	ldr	r3, [pc, #132]	; (100088a8 <mpu_set_accel_fsr+0x8c>)
10008822:	7a9b      	ldrb	r3, [r3, #10]
10008824:	2b00      	cmp	r3, #0
10008826:	d035      	beq.n	10008894 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
10008828:	2804      	cmp	r0, #4
1000882a:	d00c      	beq.n	10008846 <mpu_set_accel_fsr+0x2a>
1000882c:	d802      	bhi.n	10008834 <mpu_set_accel_fsr+0x18>
1000882e:	2802      	cmp	r0, #2
10008830:	d005      	beq.n	1000883e <mpu_set_accel_fsr+0x22>
10008832:	e032      	b.n	1000889a <mpu_set_accel_fsr+0x7e>
10008834:	2808      	cmp	r0, #8
10008836:	d00a      	beq.n	1000884e <mpu_set_accel_fsr+0x32>
10008838:	2810      	cmp	r0, #16
1000883a:	d00c      	beq.n	10008856 <mpu_set_accel_fsr+0x3a>
1000883c:	e02d      	b.n	1000889a <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
1000883e:	2200      	movs	r2, #0
10008840:	466b      	mov	r3, sp
10008842:	71da      	strb	r2, [r3, #7]
        break;
10008844:	e00a      	b.n	1000885c <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
10008846:	2208      	movs	r2, #8
10008848:	466b      	mov	r3, sp
1000884a:	71da      	strb	r2, [r3, #7]
        break;
1000884c:	e006      	b.n	1000885c <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
1000884e:	2210      	movs	r2, #16
10008850:	466b      	mov	r3, sp
10008852:	71da      	strb	r2, [r3, #7]
        break;
10008854:	e002      	b.n	1000885c <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
10008856:	2218      	movs	r2, #24
10008858:	466b      	mov	r3, sp
1000885a:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000885c:	466b      	mov	r3, sp
1000885e:	3307      	adds	r3, #7
10008860:	781b      	ldrb	r3, [r3, #0]
10008862:	4a11      	ldr	r2, [pc, #68]	; (100088a8 <mpu_set_accel_fsr+0x8c>)
10008864:	7a52      	ldrb	r2, [r2, #9]
10008866:	08db      	lsrs	r3, r3, #3
        return 0;
10008868:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000886a:	429a      	cmp	r2, r3
1000886c:	d01a      	beq.n	100088a4 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000886e:	4b0e      	ldr	r3, [pc, #56]	; (100088a8 <mpu_set_accel_fsr+0x8c>)
10008870:	681a      	ldr	r2, [r3, #0]
10008872:	79d1      	ldrb	r1, [r2, #7]
10008874:	685b      	ldr	r3, [r3, #4]
10008876:	7818      	ldrb	r0, [r3, #0]
10008878:	466b      	mov	r3, sp
1000887a:	3307      	adds	r3, #7
1000887c:	2201      	movs	r2, #1
1000887e:	4c0b      	ldr	r4, [pc, #44]	; (100088ac <mpu_set_accel_fsr+0x90>)
10008880:	47a0      	blx	r4
10008882:	2800      	cmp	r0, #0
10008884:	d10c      	bne.n	100088a0 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008886:	466b      	mov	r3, sp
10008888:	3307      	adds	r3, #7
1000888a:	781b      	ldrb	r3, [r3, #0]
1000888c:	08db      	lsrs	r3, r3, #3
1000888e:	4a06      	ldr	r2, [pc, #24]	; (100088a8 <mpu_set_accel_fsr+0x8c>)
10008890:	7253      	strb	r3, [r2, #9]
    return 0;
10008892:	e007      	b.n	100088a4 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008894:	2001      	movs	r0, #1
10008896:	4240      	negs	r0, r0
10008898:	e004      	b.n	100088a4 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000889a:	2001      	movs	r0, #1
1000889c:	4240      	negs	r0, r0
1000889e:	e001      	b.n	100088a4 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
100088a0:	2001      	movs	r0, #1
100088a2:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100088a4:	b002      	add	sp, #8
100088a6:	bd10      	pop	{r4, pc}
100088a8:	10017cb8 	.word	0x10017cb8
100088ac:	1000a75d 	.word	0x1000a75d

100088b0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
100088b0:	b510      	push	{r4, lr}
100088b2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088b4:	4b2b      	ldr	r3, [pc, #172]	; (10008964 <mpu_set_lpf+0xb4>)
100088b6:	7a9b      	ldrb	r3, [r3, #10]
100088b8:	2b00      	cmp	r3, #0
100088ba:	d049      	beq.n	10008950 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
100088bc:	28bb      	cmp	r0, #187	; 0xbb
100088be:	d903      	bls.n	100088c8 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
100088c0:	2201      	movs	r2, #1
100088c2:	466b      	mov	r3, sp
100088c4:	71da      	strb	r2, [r3, #7]
100088c6:	e01a      	b.n	100088fe <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
100088c8:	2861      	cmp	r0, #97	; 0x61
100088ca:	d903      	bls.n	100088d4 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
100088cc:	2202      	movs	r2, #2
100088ce:	466b      	mov	r3, sp
100088d0:	71da      	strb	r2, [r3, #7]
100088d2:	e014      	b.n	100088fe <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100088d4:	2829      	cmp	r0, #41	; 0x29
100088d6:	d903      	bls.n	100088e0 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100088d8:	2203      	movs	r2, #3
100088da:	466b      	mov	r3, sp
100088dc:	71da      	strb	r2, [r3, #7]
100088de:	e00e      	b.n	100088fe <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100088e0:	2813      	cmp	r0, #19
100088e2:	d903      	bls.n	100088ec <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
100088e4:	2204      	movs	r2, #4
100088e6:	466b      	mov	r3, sp
100088e8:	71da      	strb	r2, [r3, #7]
100088ea:	e008      	b.n	100088fe <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100088ec:	2809      	cmp	r0, #9
100088ee:	d903      	bls.n	100088f8 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100088f0:	2205      	movs	r2, #5
100088f2:	466b      	mov	r3, sp
100088f4:	71da      	strb	r2, [r3, #7]
100088f6:	e002      	b.n	100088fe <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100088f8:	2206      	movs	r2, #6
100088fa:	466b      	mov	r3, sp
100088fc:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100088fe:	4b19      	ldr	r3, [pc, #100]	; (10008964 <mpu_set_lpf+0xb4>)
10008900:	7ada      	ldrb	r2, [r3, #11]
10008902:	466b      	mov	r3, sp
10008904:	3307      	adds	r3, #7
10008906:	781b      	ldrb	r3, [r3, #0]
        return 0;
10008908:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000890a:	429a      	cmp	r2, r3
1000890c:	d028      	beq.n	10008960 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000890e:	4b15      	ldr	r3, [pc, #84]	; (10008964 <mpu_set_lpf+0xb4>)
10008910:	681a      	ldr	r2, [r3, #0]
10008912:	7891      	ldrb	r1, [r2, #2]
10008914:	685b      	ldr	r3, [r3, #4]
10008916:	7818      	ldrb	r0, [r3, #0]
10008918:	466b      	mov	r3, sp
1000891a:	3307      	adds	r3, #7
1000891c:	2201      	movs	r2, #1
1000891e:	4c12      	ldr	r4, [pc, #72]	; (10008968 <mpu_set_lpf+0xb8>)
10008920:	47a0      	blx	r4
10008922:	2800      	cmp	r0, #0
10008924:	d117      	bne.n	10008956 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008926:	466b      	mov	r3, sp
10008928:	3307      	adds	r3, #7
1000892a:	7819      	ldrb	r1, [r3, #0]
1000892c:	2240      	movs	r2, #64	; 0x40
1000892e:	430a      	orrs	r2, r1
10008930:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008932:	4a0c      	ldr	r2, [pc, #48]	; (10008964 <mpu_set_lpf+0xb4>)
10008934:	6811      	ldr	r1, [r2, #0]
10008936:	7a09      	ldrb	r1, [r1, #8]
10008938:	6852      	ldr	r2, [r2, #4]
1000893a:	7810      	ldrb	r0, [r2, #0]
1000893c:	2201      	movs	r2, #1
1000893e:	4c0a      	ldr	r4, [pc, #40]	; (10008968 <mpu_set_lpf+0xb8>)
10008940:	47a0      	blx	r4
10008942:	2800      	cmp	r0, #0
10008944:	d10a      	bne.n	1000895c <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008946:	466b      	mov	r3, sp
10008948:	79da      	ldrb	r2, [r3, #7]
1000894a:	4b06      	ldr	r3, [pc, #24]	; (10008964 <mpu_set_lpf+0xb4>)
1000894c:	72da      	strb	r2, [r3, #11]
    return 0;
1000894e:	e007      	b.n	10008960 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008950:	2001      	movs	r0, #1
10008952:	4240      	negs	r0, r0
10008954:	e004      	b.n	10008960 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008956:	2001      	movs	r0, #1
10008958:	4240      	negs	r0, r0
1000895a:	e001      	b.n	10008960 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
1000895c:	2001      	movs	r0, #1
1000895e:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008960:	b002      	add	sp, #8
10008962:	bd10      	pop	{r4, pc}
10008964:	10017cb8 	.word	0x10017cb8
10008968:	1000a75d 	.word	0x1000a75d

1000896c <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
1000896c:	2324      	movs	r3, #36	; 0x24
1000896e:	4a05      	ldr	r2, [pc, #20]	; (10008984 <mpu_get_sample_rate+0x18>)
10008970:	5cd3      	ldrb	r3, [r2, r3]
10008972:	2b00      	cmp	r3, #0
10008974:	d103      	bne.n	1000897e <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008976:	89d3      	ldrh	r3, [r2, #14]
10008978:	8003      	strh	r3, [r0, #0]
    return 0;
1000897a:	2000      	movs	r0, #0
1000897c:	e001      	b.n	10008982 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
1000897e:	2001      	movs	r0, #1
10008980:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008982:	4770      	bx	lr
10008984:	10017cb8 	.word	0x10017cb8

10008988 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008988:	b530      	push	{r4, r5, lr}
1000898a:	b083      	sub	sp, #12
1000898c:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000898e:	d020      	beq.n	100089d2 <mpu_set_compass_sample_rate+0x4a>
10008990:	4b17      	ldr	r3, [pc, #92]	; (100089f0 <mpu_set_compass_sample_rate+0x68>)
10008992:	89d8      	ldrh	r0, [r3, #14]
10008994:	4281      	cmp	r1, r0
10008996:	d81f      	bhi.n	100089d8 <mpu_set_compass_sample_rate+0x50>
10008998:	2964      	cmp	r1, #100	; 0x64
1000899a:	d820      	bhi.n	100089de <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
1000899c:	466b      	mov	r3, sp
1000899e:	1ddc      	adds	r4, r3, #7
100089a0:	4b14      	ldr	r3, [pc, #80]	; (100089f4 <mpu_set_compass_sample_rate+0x6c>)
100089a2:	4798      	blx	r3
100089a4:	3801      	subs	r0, #1
100089a6:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100089a8:	4b11      	ldr	r3, [pc, #68]	; (100089f0 <mpu_set_compass_sample_rate+0x68>)
100089aa:	2224      	movs	r2, #36	; 0x24
100089ac:	6819      	ldr	r1, [r3, #0]
100089ae:	5c89      	ldrb	r1, [r1, r2]
100089b0:	685b      	ldr	r3, [r3, #4]
100089b2:	7818      	ldrb	r0, [r3, #0]
100089b4:	0023      	movs	r3, r4
100089b6:	3a23      	subs	r2, #35	; 0x23
100089b8:	4c0f      	ldr	r4, [pc, #60]	; (100089f8 <mpu_set_compass_sample_rate+0x70>)
100089ba:	47a0      	blx	r4
100089bc:	1e04      	subs	r4, r0, #0
100089be:	d111      	bne.n	100089e4 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
100089c0:	4d0b      	ldr	r5, [pc, #44]	; (100089f0 <mpu_set_compass_sample_rate+0x68>)
100089c2:	89e8      	ldrh	r0, [r5, #14]
100089c4:	466b      	mov	r3, sp
100089c6:	79d9      	ldrb	r1, [r3, #7]
100089c8:	3101      	adds	r1, #1
100089ca:	4b0c      	ldr	r3, [pc, #48]	; (100089fc <mpu_set_compass_sample_rate+0x74>)
100089cc:	4798      	blx	r3
100089ce:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
100089d0:	e00a      	b.n	100089e8 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
100089d2:	2401      	movs	r4, #1
100089d4:	4264      	negs	r4, r4
100089d6:	e007      	b.n	100089e8 <mpu_set_compass_sample_rate+0x60>
100089d8:	2401      	movs	r4, #1
100089da:	4264      	negs	r4, r4
100089dc:	e004      	b.n	100089e8 <mpu_set_compass_sample_rate+0x60>
100089de:	2401      	movs	r4, #1
100089e0:	4264      	negs	r4, r4
100089e2:	e001      	b.n	100089e8 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
100089e4:	2401      	movs	r4, #1
100089e6:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
100089e8:	0020      	movs	r0, r4
100089ea:	b003      	add	sp, #12
100089ec:	bd30      	pop	{r4, r5, pc}
100089ee:	46c0      	nop			; (mov r8, r8)
100089f0:	10017cb8 	.word	0x10017cb8
100089f4:	10012c59 	.word	0x10012c59
100089f8:	1000a75d 	.word	0x1000a75d
100089fc:	10012d6d 	.word	0x10012d6d

10008a00 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a00:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a02:	2324      	movs	r3, #36	; 0x24
10008a04:	4a16      	ldr	r2, [pc, #88]	; (10008a60 <mpu_configure_fifo+0x60>)
10008a06:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a08:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a0a:	2b00      	cmp	r3, #0
10008a0c:	d126      	bne.n	10008a5c <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a0e:	7a94      	ldrb	r4, [r2, #10]
10008a10:	2c00      	cmp	r4, #0
10008a12:	d015      	beq.n	10008a40 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a14:	2301      	movs	r3, #1
10008a16:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a18:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a1a:	4004      	ands	r4, r0
10008a1c:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008a1e:	1b04      	subs	r4, r0, r4
10008a20:	1e63      	subs	r3, r4, #1
10008a22:	419c      	sbcs	r4, r3
10008a24:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008a26:	2800      	cmp	r0, #0
10008a28:	d10d      	bne.n	10008a46 <mpu_configure_fifo+0x46>
10008a2a:	7d13      	ldrb	r3, [r2, #20]
10008a2c:	2b00      	cmp	r3, #0
10008a2e:	d112      	bne.n	10008a56 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008a30:	4b0c      	ldr	r3, [pc, #48]	; (10008a64 <mpu_configure_fifo+0x64>)
10008a32:	4798      	blx	r3
10008a34:	e012      	b.n	10008a5c <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008a36:	4b0a      	ldr	r3, [pc, #40]	; (10008a60 <mpu_configure_fifo+0x60>)
10008a38:	741d      	strb	r5, [r3, #16]
                return -1;
10008a3a:	2401      	movs	r4, #1
10008a3c:	4264      	negs	r4, r4
10008a3e:	e00d      	b.n	10008a5c <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008a40:	2401      	movs	r4, #1
10008a42:	4264      	negs	r4, r4
10008a44:	e00a      	b.n	10008a5c <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a46:	2001      	movs	r0, #1
10008a48:	4b06      	ldr	r3, [pc, #24]	; (10008a64 <mpu_configure_fifo+0x64>)
10008a4a:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008a4c:	4b06      	ldr	r3, [pc, #24]	; (10008a68 <mpu_configure_fifo+0x68>)
10008a4e:	4798      	blx	r3
10008a50:	2800      	cmp	r0, #0
10008a52:	d003      	beq.n	10008a5c <mpu_configure_fifo+0x5c>
10008a54:	e7ef      	b.n	10008a36 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a56:	2001      	movs	r0, #1
10008a58:	4b02      	ldr	r3, [pc, #8]	; (10008a64 <mpu_configure_fifo+0x64>)
10008a5a:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008a5c:	0020      	movs	r0, r4
10008a5e:	bd70      	pop	{r4, r5, r6, pc}
10008a60:	10017cb8 	.word	0x10017cb8
10008a64:	10008495 	.word	0x10008495
10008a68:	10008539 	.word	0x10008539

10008a6c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008a6c:	b530      	push	{r4, r5, lr}
10008a6e:	b083      	sub	sp, #12
10008a70:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008a72:	4b59      	ldr	r3, [pc, #356]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008a74:	7c9b      	ldrb	r3, [r3, #18]
10008a76:	4283      	cmp	r3, r0
10008a78:	d100      	bne.n	10008a7c <mpu_set_bypass+0x10>
10008a7a:	e097      	b.n	10008bac <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008a7c:	2800      	cmp	r0, #0
10008a7e:	d042      	beq.n	10008b06 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a80:	4b55      	ldr	r3, [pc, #340]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008a82:	681a      	ldr	r2, [r3, #0]
10008a84:	7911      	ldrb	r1, [r2, #4]
10008a86:	685b      	ldr	r3, [r3, #4]
10008a88:	7818      	ldrb	r0, [r3, #0]
10008a8a:	466b      	mov	r3, sp
10008a8c:	3307      	adds	r3, #7
10008a8e:	2201      	movs	r2, #1
10008a90:	4d52      	ldr	r5, [pc, #328]	; (10008bdc <mpu_set_bypass+0x170>)
10008a92:	47a8      	blx	r5
10008a94:	2800      	cmp	r0, #0
10008a96:	d000      	beq.n	10008a9a <mpu_set_bypass+0x2e>
10008a98:	e08a      	b.n	10008bb0 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008a9a:	466b      	mov	r3, sp
10008a9c:	3307      	adds	r3, #7
10008a9e:	781a      	ldrb	r2, [r3, #0]
10008aa0:	2120      	movs	r1, #32
10008aa2:	438a      	bics	r2, r1
10008aa4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008aa6:	4a4c      	ldr	r2, [pc, #304]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008aa8:	6811      	ldr	r1, [r2, #0]
10008aaa:	7909      	ldrb	r1, [r1, #4]
10008aac:	6852      	ldr	r2, [r2, #4]
10008aae:	7810      	ldrb	r0, [r2, #0]
10008ab0:	2201      	movs	r2, #1
10008ab2:	4d4b      	ldr	r5, [pc, #300]	; (10008be0 <mpu_set_bypass+0x174>)
10008ab4:	47a8      	blx	r5
10008ab6:	2800      	cmp	r0, #0
10008ab8:	d17d      	bne.n	10008bb6 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008aba:	3003      	adds	r0, #3
10008abc:	4b49      	ldr	r3, [pc, #292]	; (10008be4 <mpu_set_bypass+0x178>)
10008abe:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008ac0:	2202      	movs	r2, #2
10008ac2:	466b      	mov	r3, sp
10008ac4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008ac6:	2322      	movs	r3, #34	; 0x22
10008ac8:	4a43      	ldr	r2, [pc, #268]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008aca:	5cd3      	ldrb	r3, [r2, r3]
10008acc:	2b00      	cmp	r3, #0
10008ace:	d002      	beq.n	10008ad6 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008ad0:	2282      	movs	r2, #130	; 0x82
10008ad2:	466b      	mov	r3, sp
10008ad4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008ad6:	2323      	movs	r3, #35	; 0x23
10008ad8:	4a3f      	ldr	r2, [pc, #252]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008ada:	5cd3      	ldrb	r3, [r2, r3]
10008adc:	2b00      	cmp	r3, #0
10008ade:	d005      	beq.n	10008aec <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008ae0:	466b      	mov	r3, sp
10008ae2:	1dda      	adds	r2, r3, #7
10008ae4:	79d9      	ldrb	r1, [r3, #7]
10008ae6:	2330      	movs	r3, #48	; 0x30
10008ae8:	430b      	orrs	r3, r1
10008aea:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008aec:	4b3a      	ldr	r3, [pc, #232]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008aee:	681a      	ldr	r2, [r3, #0]
10008af0:	7dd1      	ldrb	r1, [r2, #23]
10008af2:	685b      	ldr	r3, [r3, #4]
10008af4:	7818      	ldrb	r0, [r3, #0]
10008af6:	466b      	mov	r3, sp
10008af8:	3307      	adds	r3, #7
10008afa:	2201      	movs	r2, #1
10008afc:	4d38      	ldr	r5, [pc, #224]	; (10008be0 <mpu_set_bypass+0x174>)
10008afe:	47a8      	blx	r5
10008b00:	2800      	cmp	r0, #0
10008b02:	d04f      	beq.n	10008ba4 <mpu_set_bypass+0x138>
10008b04:	e05a      	b.n	10008bbc <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b06:	4b34      	ldr	r3, [pc, #208]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b08:	681a      	ldr	r2, [r3, #0]
10008b0a:	7911      	ldrb	r1, [r2, #4]
10008b0c:	685b      	ldr	r3, [r3, #4]
10008b0e:	7818      	ldrb	r0, [r3, #0]
10008b10:	466b      	mov	r3, sp
10008b12:	3307      	adds	r3, #7
10008b14:	2201      	movs	r2, #1
10008b16:	4d31      	ldr	r5, [pc, #196]	; (10008bdc <mpu_set_bypass+0x170>)
10008b18:	47a8      	blx	r5
10008b1a:	2800      	cmp	r0, #0
10008b1c:	d151      	bne.n	10008bc2 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008b1e:	4b2e      	ldr	r3, [pc, #184]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b20:	7a9b      	ldrb	r3, [r3, #10]
10008b22:	07db      	lsls	r3, r3, #31
10008b24:	d506      	bpl.n	10008b34 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008b26:	466b      	mov	r3, sp
10008b28:	1dda      	adds	r2, r3, #7
10008b2a:	79d9      	ldrb	r1, [r3, #7]
10008b2c:	2320      	movs	r3, #32
10008b2e:	430b      	orrs	r3, r1
10008b30:	7013      	strb	r3, [r2, #0]
10008b32:	e005      	b.n	10008b40 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008b34:	466b      	mov	r3, sp
10008b36:	1dda      	adds	r2, r3, #7
10008b38:	79db      	ldrb	r3, [r3, #7]
10008b3a:	2120      	movs	r1, #32
10008b3c:	438b      	bics	r3, r1
10008b3e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b40:	4b25      	ldr	r3, [pc, #148]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b42:	681a      	ldr	r2, [r3, #0]
10008b44:	7911      	ldrb	r1, [r2, #4]
10008b46:	685b      	ldr	r3, [r3, #4]
10008b48:	7818      	ldrb	r0, [r3, #0]
10008b4a:	466b      	mov	r3, sp
10008b4c:	3307      	adds	r3, #7
10008b4e:	2201      	movs	r2, #1
10008b50:	4d23      	ldr	r5, [pc, #140]	; (10008be0 <mpu_set_bypass+0x174>)
10008b52:	47a8      	blx	r5
10008b54:	2800      	cmp	r0, #0
10008b56:	d137      	bne.n	10008bc8 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008b58:	3003      	adds	r0, #3
10008b5a:	4b22      	ldr	r3, [pc, #136]	; (10008be4 <mpu_set_bypass+0x178>)
10008b5c:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008b5e:	2322      	movs	r3, #34	; 0x22
10008b60:	4a1d      	ldr	r2, [pc, #116]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b62:	5cd3      	ldrb	r3, [r2, r3]
10008b64:	2b00      	cmp	r3, #0
10008b66:	d003      	beq.n	10008b70 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008b68:	2280      	movs	r2, #128	; 0x80
10008b6a:	466b      	mov	r3, sp
10008b6c:	71da      	strb	r2, [r3, #7]
10008b6e:	e002      	b.n	10008b76 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008b70:	2200      	movs	r2, #0
10008b72:	466b      	mov	r3, sp
10008b74:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b76:	2323      	movs	r3, #35	; 0x23
10008b78:	4a17      	ldr	r2, [pc, #92]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b7a:	5cd3      	ldrb	r3, [r2, r3]
10008b7c:	2b00      	cmp	r3, #0
10008b7e:	d005      	beq.n	10008b8c <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b80:	466b      	mov	r3, sp
10008b82:	1dda      	adds	r2, r3, #7
10008b84:	79d9      	ldrb	r1, [r3, #7]
10008b86:	2330      	movs	r3, #48	; 0x30
10008b88:	430b      	orrs	r3, r1
10008b8a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b8c:	4b12      	ldr	r3, [pc, #72]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008b8e:	681a      	ldr	r2, [r3, #0]
10008b90:	7dd1      	ldrb	r1, [r2, #23]
10008b92:	685b      	ldr	r3, [r3, #4]
10008b94:	7818      	ldrb	r0, [r3, #0]
10008b96:	466b      	mov	r3, sp
10008b98:	3307      	adds	r3, #7
10008b9a:	2201      	movs	r2, #1
10008b9c:	4d10      	ldr	r5, [pc, #64]	; (10008be0 <mpu_set_bypass+0x174>)
10008b9e:	47a8      	blx	r5
10008ba0:	2800      	cmp	r0, #0
10008ba2:	d114      	bne.n	10008bce <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008ba4:	4b0c      	ldr	r3, [pc, #48]	; (10008bd8 <mpu_set_bypass+0x16c>)
10008ba6:	749c      	strb	r4, [r3, #18]
    return 0;
10008ba8:	2000      	movs	r0, #0
10008baa:	e012      	b.n	10008bd2 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008bac:	2000      	movs	r0, #0
10008bae:	e010      	b.n	10008bd2 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bb0:	2001      	movs	r0, #1
10008bb2:	4240      	negs	r0, r0
10008bb4:	e00d      	b.n	10008bd2 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bb6:	2001      	movs	r0, #1
10008bb8:	4240      	negs	r0, r0
10008bba:	e00a      	b.n	10008bd2 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bbc:	2001      	movs	r0, #1
10008bbe:	4240      	negs	r0, r0
10008bc0:	e007      	b.n	10008bd2 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bc2:	2001      	movs	r0, #1
10008bc4:	4240      	negs	r0, r0
10008bc6:	e004      	b.n	10008bd2 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bc8:	2001      	movs	r0, #1
10008bca:	4240      	negs	r0, r0
10008bcc:	e001      	b.n	10008bd2 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bce:	2001      	movs	r0, #1
10008bd0:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008bd2:	b003      	add	sp, #12
10008bd4:	bd30      	pop	{r4, r5, pc}
10008bd6:	46c0      	nop			; (mov r8, r8)
10008bd8:	10017cb8 	.word	0x10017cb8
10008bdc:	1000a7b9 	.word	0x1000a7b9
10008be0:	1000a75d 	.word	0x1000a75d
10008be4:	10008129 	.word	0x10008129

10008be8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008be8:	b530      	push	{r4, r5, lr}
10008bea:	b083      	sub	sp, #12
10008bec:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008bee:	2323      	movs	r3, #35	; 0x23
10008bf0:	4a1c      	ldr	r2, [pc, #112]	; (10008c64 <mpu_set_int_latched+0x7c>)
10008bf2:	5cd3      	ldrb	r3, [r2, r3]
10008bf4:	4283      	cmp	r3, r0
10008bf6:	d02e      	beq.n	10008c56 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008bf8:	2800      	cmp	r0, #0
10008bfa:	d003      	beq.n	10008c04 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bfc:	2230      	movs	r2, #48	; 0x30
10008bfe:	466b      	mov	r3, sp
10008c00:	71da      	strb	r2, [r3, #7]
10008c02:	e002      	b.n	10008c0a <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008c04:	2200      	movs	r2, #0
10008c06:	466b      	mov	r3, sp
10008c08:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008c0a:	4b16      	ldr	r3, [pc, #88]	; (10008c64 <mpu_set_int_latched+0x7c>)
10008c0c:	7c9b      	ldrb	r3, [r3, #18]
10008c0e:	2b00      	cmp	r3, #0
10008c10:	d005      	beq.n	10008c1e <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008c12:	466b      	mov	r3, sp
10008c14:	1dda      	adds	r2, r3, #7
10008c16:	79d9      	ldrb	r1, [r3, #7]
10008c18:	2302      	movs	r3, #2
10008c1a:	430b      	orrs	r3, r1
10008c1c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008c1e:	2322      	movs	r3, #34	; 0x22
10008c20:	4a10      	ldr	r2, [pc, #64]	; (10008c64 <mpu_set_int_latched+0x7c>)
10008c22:	5cd3      	ldrb	r3, [r2, r3]
10008c24:	2b00      	cmp	r3, #0
10008c26:	d006      	beq.n	10008c36 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008c28:	466b      	mov	r3, sp
10008c2a:	1dda      	adds	r2, r3, #7
10008c2c:	79db      	ldrb	r3, [r3, #7]
10008c2e:	2180      	movs	r1, #128	; 0x80
10008c30:	4249      	negs	r1, r1
10008c32:	430b      	orrs	r3, r1
10008c34:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c36:	4b0b      	ldr	r3, [pc, #44]	; (10008c64 <mpu_set_int_latched+0x7c>)
10008c38:	681a      	ldr	r2, [r3, #0]
10008c3a:	7dd1      	ldrb	r1, [r2, #23]
10008c3c:	685b      	ldr	r3, [r3, #4]
10008c3e:	7818      	ldrb	r0, [r3, #0]
10008c40:	466b      	mov	r3, sp
10008c42:	3307      	adds	r3, #7
10008c44:	2201      	movs	r2, #1
10008c46:	4d08      	ldr	r5, [pc, #32]	; (10008c68 <mpu_set_int_latched+0x80>)
10008c48:	47a8      	blx	r5
10008c4a:	2800      	cmp	r0, #0
10008c4c:	d105      	bne.n	10008c5a <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c4e:	2323      	movs	r3, #35	; 0x23
10008c50:	4a04      	ldr	r2, [pc, #16]	; (10008c64 <mpu_set_int_latched+0x7c>)
10008c52:	54d4      	strb	r4, [r2, r3]
    return 0;
10008c54:	e003      	b.n	10008c5e <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c56:	2000      	movs	r0, #0
10008c58:	e001      	b.n	10008c5e <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008c5a:	2001      	movs	r0, #1
10008c5c:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008c5e:	b003      	add	sp, #12
10008c60:	bd30      	pop	{r4, r5, pc}
10008c62:	46c0      	nop			; (mov r8, r8)
10008c64:	10017cb8 	.word	0x10017cb8
10008c68:	1000a75d 	.word	0x1000a75d

10008c6c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008c6c:	b510      	push	{r4, lr}
10008c6e:	b082      	sub	sp, #8
10008c70:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008c72:	2c28      	cmp	r4, #40	; 0x28
10008c74:	d878      	bhi.n	10008d68 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008c76:	2800      	cmp	r0, #0
10008c78:	d115      	bne.n	10008ca6 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008c7a:	2000      	movs	r0, #0
10008c7c:	4b44      	ldr	r3, [pc, #272]	; (10008d90 <mpu_lp_accel_mode+0x124>)
10008c7e:	4798      	blx	r3
        tmp[0] = 0;
10008c80:	ab01      	add	r3, sp, #4
10008c82:	2200      	movs	r2, #0
10008c84:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008c86:	3207      	adds	r2, #7
10008c88:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008c8a:	4a42      	ldr	r2, [pc, #264]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008c8c:	6811      	ldr	r1, [r2, #0]
10008c8e:	7d49      	ldrb	r1, [r1, #21]
10008c90:	6852      	ldr	r2, [r2, #4]
10008c92:	7810      	ldrb	r0, [r2, #0]
10008c94:	2202      	movs	r2, #2
10008c96:	4c40      	ldr	r4, [pc, #256]	; (10008d98 <mpu_lp_accel_mode+0x12c>)
10008c98:	47a0      	blx	r4
10008c9a:	1e04      	subs	r4, r0, #0
10008c9c:	d167      	bne.n	10008d6e <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c9e:	2200      	movs	r2, #0
10008ca0:	4b3c      	ldr	r3, [pc, #240]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008ca2:	751a      	strb	r2, [r3, #20]
        return 0;
10008ca4:	e071      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ca6:	2001      	movs	r0, #1
10008ca8:	4b39      	ldr	r3, [pc, #228]	; (10008d90 <mpu_lp_accel_mode+0x124>)
10008caa:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cac:	2c01      	cmp	r4, #1
10008cae:	d103      	bne.n	10008cb8 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008cb0:	2202      	movs	r2, #2
10008cb2:	ab01      	add	r3, sp, #4
10008cb4:	701a      	strb	r2, [r3, #0]
10008cb6:	e01a      	b.n	10008cee <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008cb8:	2c02      	cmp	r4, #2
10008cba:	d103      	bne.n	10008cc4 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008cbc:	2203      	movs	r2, #3
10008cbe:	ab01      	add	r3, sp, #4
10008cc0:	701a      	strb	r2, [r3, #0]
10008cc2:	e014      	b.n	10008cee <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008cc4:	2c05      	cmp	r4, #5
10008cc6:	d803      	bhi.n	10008cd0 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008cc8:	2204      	movs	r2, #4
10008cca:	ab01      	add	r3, sp, #4
10008ccc:	701a      	strb	r2, [r3, #0]
10008cce:	e00e      	b.n	10008cee <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008cd0:	2c0a      	cmp	r4, #10
10008cd2:	d803      	bhi.n	10008cdc <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008cd4:	2205      	movs	r2, #5
10008cd6:	ab01      	add	r3, sp, #4
10008cd8:	701a      	strb	r2, [r3, #0]
10008cda:	e008      	b.n	10008cee <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008cdc:	2c14      	cmp	r4, #20
10008cde:	d803      	bhi.n	10008ce8 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008ce0:	2206      	movs	r2, #6
10008ce2:	ab01      	add	r3, sp, #4
10008ce4:	701a      	strb	r2, [r3, #0]
10008ce6:	e002      	b.n	10008cee <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008ce8:	2207      	movs	r2, #7
10008cea:	ab01      	add	r3, sp, #4
10008cec:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008cee:	4b29      	ldr	r3, [pc, #164]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008cf0:	681a      	ldr	r2, [r3, #0]
10008cf2:	7a51      	ldrb	r1, [r2, #9]
10008cf4:	685b      	ldr	r3, [r3, #4]
10008cf6:	7818      	ldrb	r0, [r3, #0]
10008cf8:	ab01      	add	r3, sp, #4
10008cfa:	2201      	movs	r2, #1
10008cfc:	4c26      	ldr	r4, [pc, #152]	; (10008d98 <mpu_lp_accel_mode+0x12c>)
10008cfe:	47a0      	blx	r4
10008d00:	2800      	cmp	r0, #0
10008d02:	d137      	bne.n	10008d74 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d04:	4b23      	ldr	r3, [pc, #140]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008d06:	681a      	ldr	r2, [r3, #0]
10008d08:	7a11      	ldrb	r1, [r2, #8]
10008d0a:	685b      	ldr	r3, [r3, #4]
10008d0c:	7818      	ldrb	r0, [r3, #0]
10008d0e:	ab01      	add	r3, sp, #4
10008d10:	2201      	movs	r2, #1
10008d12:	4c22      	ldr	r4, [pc, #136]	; (10008d9c <mpu_lp_accel_mode+0x130>)
10008d14:	47a0      	blx	r4
10008d16:	2800      	cmp	r0, #0
10008d18:	d12f      	bne.n	10008d7a <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d1a:	ab01      	add	r3, sp, #4
10008d1c:	7819      	ldrb	r1, [r3, #0]
10008d1e:	2208      	movs	r2, #8
10008d20:	430a      	orrs	r2, r1
10008d22:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d24:	4a1b      	ldr	r2, [pc, #108]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008d26:	6811      	ldr	r1, [r2, #0]
10008d28:	7a09      	ldrb	r1, [r1, #8]
10008d2a:	6852      	ldr	r2, [r2, #4]
10008d2c:	7810      	ldrb	r0, [r2, #0]
10008d2e:	2201      	movs	r2, #1
10008d30:	4c19      	ldr	r4, [pc, #100]	; (10008d98 <mpu_lp_accel_mode+0x12c>)
10008d32:	47a0      	blx	r4
10008d34:	2800      	cmp	r0, #0
10008d36:	d123      	bne.n	10008d80 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d38:	ab01      	add	r3, sp, #4
10008d3a:	2220      	movs	r2, #32
10008d3c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d3e:	4a15      	ldr	r2, [pc, #84]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008d40:	6811      	ldr	r1, [r2, #0]
10008d42:	7d49      	ldrb	r1, [r1, #21]
10008d44:	6852      	ldr	r2, [r2, #4]
10008d46:	7810      	ldrb	r0, [r2, #0]
10008d48:	2201      	movs	r2, #1
10008d4a:	4c13      	ldr	r4, [pc, #76]	; (10008d98 <mpu_lp_accel_mode+0x12c>)
10008d4c:	47a0      	blx	r4
10008d4e:	1e04      	subs	r4, r0, #0
10008d50:	d119      	bne.n	10008d86 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d52:	4b10      	ldr	r3, [pc, #64]	; (10008d94 <mpu_lp_accel_mode+0x128>)
10008d54:	2208      	movs	r2, #8
10008d56:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008d58:	2200      	movs	r2, #0
10008d5a:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d5c:	3201      	adds	r2, #1
10008d5e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008d60:	2000      	movs	r0, #0
10008d62:	4b0f      	ldr	r3, [pc, #60]	; (10008da0 <mpu_lp_accel_mode+0x134>)
10008d64:	4798      	blx	r3

    return 0;
10008d66:	e010      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008d68:	2401      	movs	r4, #1
10008d6a:	4264      	negs	r4, r4
10008d6c:	e00d      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008d6e:	2401      	movs	r4, #1
10008d70:	4264      	negs	r4, r4
10008d72:	e00a      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d74:	2401      	movs	r4, #1
10008d76:	4264      	negs	r4, r4
10008d78:	e007      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008d7a:	2401      	movs	r4, #1
10008d7c:	4264      	negs	r4, r4
10008d7e:	e004      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008d80:	2401      	movs	r4, #1
10008d82:	4264      	negs	r4, r4
10008d84:	e001      	b.n	10008d8a <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008d86:	2401      	movs	r4, #1
10008d88:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008d8a:	0020      	movs	r0, r4
10008d8c:	b002      	add	sp, #8
10008d8e:	bd10      	pop	{r4, pc}
10008d90:	10008be9 	.word	0x10008be9
10008d94:	10017cb8 	.word	0x10017cb8
10008d98:	1000a75d 	.word	0x1000a75d
10008d9c:	1000a7b9 	.word	0x1000a7b9
10008da0:	10008a01 	.word	0x10008a01

10008da4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008da4:	b530      	push	{r4, r5, lr}
10008da6:	b083      	sub	sp, #12
10008da8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008daa:	4b2c      	ldr	r3, [pc, #176]	; (10008e5c <mpu_set_sample_rate+0xb8>)
10008dac:	7a9b      	ldrb	r3, [r3, #10]
10008dae:	2b00      	cmp	r3, #0
10008db0:	d048      	beq.n	10008e44 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008db2:	2324      	movs	r3, #36	; 0x24
10008db4:	4a29      	ldr	r2, [pc, #164]	; (10008e5c <mpu_set_sample_rate+0xb8>)
10008db6:	5cd3      	ldrb	r3, [r2, r3]
10008db8:	2b00      	cmp	r3, #0
10008dba:	d146      	bne.n	10008e4a <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dbc:	7d13      	ldrb	r3, [r2, #20]
10008dbe:	2b00      	cmp	r3, #0
10008dc0:	d00a      	beq.n	10008dd8 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008dc2:	1e43      	subs	r3, r0, #1
10008dc4:	b29b      	uxth	r3, r3
10008dc6:	2b27      	cmp	r3, #39	; 0x27
10008dc8:	d803      	bhi.n	10008dd2 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008dca:	4b25      	ldr	r3, [pc, #148]	; (10008e60 <mpu_set_sample_rate+0xbc>)
10008dcc:	4798      	blx	r3
                return 0;
10008dce:	2400      	movs	r4, #0
10008dd0:	e040      	b.n	10008e54 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008dd2:	2000      	movs	r0, #0
10008dd4:	4b22      	ldr	r3, [pc, #136]	; (10008e60 <mpu_set_sample_rate+0xbc>)
10008dd6:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008dd8:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008dda:	2c03      	cmp	r4, #3
10008ddc:	d907      	bls.n	10008dee <mpu_set_sample_rate+0x4a>
10008dde:	1c21      	adds	r1, r4, #0
10008de0:	23fa      	movs	r3, #250	; 0xfa
10008de2:	009b      	lsls	r3, r3, #2
10008de4:	429c      	cmp	r4, r3
10008de6:	d901      	bls.n	10008dec <mpu_set_sample_rate+0x48>
10008de8:	4b1e      	ldr	r3, [pc, #120]	; (10008e64 <mpu_set_sample_rate+0xc0>)
10008dea:	8819      	ldrh	r1, [r3, #0]
10008dec:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008dee:	466b      	mov	r3, sp
10008df0:	1ddc      	adds	r4, r3, #7
10008df2:	20fa      	movs	r0, #250	; 0xfa
10008df4:	0080      	lsls	r0, r0, #2
10008df6:	4b1c      	ldr	r3, [pc, #112]	; (10008e68 <mpu_set_sample_rate+0xc4>)
10008df8:	4798      	blx	r3
10008dfa:	3801      	subs	r0, #1
10008dfc:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dfe:	4b17      	ldr	r3, [pc, #92]	; (10008e5c <mpu_set_sample_rate+0xb8>)
10008e00:	681a      	ldr	r2, [r3, #0]
10008e02:	7851      	ldrb	r1, [r2, #1]
10008e04:	685b      	ldr	r3, [r3, #4]
10008e06:	7818      	ldrb	r0, [r3, #0]
10008e08:	0023      	movs	r3, r4
10008e0a:	2201      	movs	r2, #1
10008e0c:	4c17      	ldr	r4, [pc, #92]	; (10008e6c <mpu_set_sample_rate+0xc8>)
10008e0e:	47a0      	blx	r4
10008e10:	1e04      	subs	r4, r0, #0
10008e12:	d11d      	bne.n	10008e50 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e14:	4d11      	ldr	r5, [pc, #68]	; (10008e5c <mpu_set_sample_rate+0xb8>)
10008e16:	466b      	mov	r3, sp
10008e18:	79d9      	ldrb	r1, [r3, #7]
10008e1a:	3101      	adds	r1, #1
10008e1c:	20fa      	movs	r0, #250	; 0xfa
10008e1e:	0080      	lsls	r0, r0, #2
10008e20:	4b11      	ldr	r3, [pc, #68]	; (10008e68 <mpu_set_sample_rate+0xc4>)
10008e22:	4798      	blx	r3
10008e24:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e26:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008e28:	1c18      	adds	r0, r3, #0
10008e2a:	b29b      	uxth	r3, r3
10008e2c:	2b64      	cmp	r3, #100	; 0x64
10008e2e:	d900      	bls.n	10008e32 <mpu_set_sample_rate+0x8e>
10008e30:	2064      	movs	r0, #100	; 0x64
10008e32:	b280      	uxth	r0, r0
10008e34:	4b0e      	ldr	r3, [pc, #56]	; (10008e70 <mpu_set_sample_rate+0xcc>)
10008e36:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e38:	4b08      	ldr	r3, [pc, #32]	; (10008e5c <mpu_set_sample_rate+0xb8>)
10008e3a:	89d8      	ldrh	r0, [r3, #14]
10008e3c:	0840      	lsrs	r0, r0, #1
10008e3e:	4b0d      	ldr	r3, [pc, #52]	; (10008e74 <mpu_set_sample_rate+0xd0>)
10008e40:	4798      	blx	r3
        return 0;
10008e42:	e007      	b.n	10008e54 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e44:	2401      	movs	r4, #1
10008e46:	4264      	negs	r4, r4
10008e48:	e004      	b.n	10008e54 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008e4a:	2401      	movs	r4, #1
10008e4c:	4264      	negs	r4, r4
10008e4e:	e001      	b.n	10008e54 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008e50:	2401      	movs	r4, #1
10008e52:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008e54:	0020      	movs	r0, r4
10008e56:	b003      	add	sp, #12
10008e58:	bd30      	pop	{r4, r5, pc}
10008e5a:	46c0      	nop			; (mov r8, r8)
10008e5c:	10017cb8 	.word	0x10017cb8
10008e60:	10008c6d 	.word	0x10008c6d
10008e64:	10015b8c 	.word	0x10015b8c
10008e68:	10012d6d 	.word	0x10012d6d
10008e6c:	1000a75d 	.word	0x1000a75d
10008e70:	10008989 	.word	0x10008989
10008e74:	100088b1 	.word	0x100088b1

10008e78 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e78:	b530      	push	{r4, r5, lr}
10008e7a:	b083      	sub	sp, #12
10008e7c:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e7e:	2370      	movs	r3, #112	; 0x70
10008e80:	4203      	tst	r3, r0
10008e82:	d003      	beq.n	10008e8c <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008e84:	2201      	movs	r2, #1
10008e86:	466b      	mov	r3, sp
10008e88:	71da      	strb	r2, [r3, #7]
10008e8a:	e015      	b.n	10008eb8 <mpu_set_sensors+0x40>
    else if (sensors)
10008e8c:	2800      	cmp	r0, #0
10008e8e:	d003      	beq.n	10008e98 <mpu_set_sensors+0x20>
        data = 0;
10008e90:	2200      	movs	r2, #0
10008e92:	466b      	mov	r3, sp
10008e94:	71da      	strb	r2, [r3, #7]
10008e96:	e00f      	b.n	10008eb8 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008e98:	466b      	mov	r3, sp
10008e9a:	3307      	adds	r3, #7
10008e9c:	2240      	movs	r2, #64	; 0x40
10008e9e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008ea0:	4a6a      	ldr	r2, [pc, #424]	; (1000904c <mpu_set_sensors+0x1d4>)
10008ea2:	6811      	ldr	r1, [r2, #0]
10008ea4:	7d49      	ldrb	r1, [r1, #21]
10008ea6:	6852      	ldr	r2, [r2, #4]
10008ea8:	7810      	ldrb	r0, [r2, #0]
10008eaa:	2201      	movs	r2, #1
10008eac:	4d68      	ldr	r5, [pc, #416]	; (10009050 <mpu_set_sensors+0x1d8>)
10008eae:	47a8      	blx	r5
10008eb0:	2800      	cmp	r0, #0
10008eb2:	d100      	bne.n	10008eb6 <mpu_set_sensors+0x3e>
10008eb4:	e0b2      	b.n	1000901c <mpu_set_sensors+0x1a4>
10008eb6:	e00b      	b.n	10008ed0 <mpu_set_sensors+0x58>
10008eb8:	4b64      	ldr	r3, [pc, #400]	; (1000904c <mpu_set_sensors+0x1d4>)
10008eba:	681a      	ldr	r2, [r3, #0]
10008ebc:	7d51      	ldrb	r1, [r2, #21]
10008ebe:	685b      	ldr	r3, [r3, #4]
10008ec0:	7818      	ldrb	r0, [r3, #0]
10008ec2:	466b      	mov	r3, sp
10008ec4:	3307      	adds	r3, #7
10008ec6:	2201      	movs	r2, #1
10008ec8:	4d61      	ldr	r5, [pc, #388]	; (10009050 <mpu_set_sensors+0x1d8>)
10008eca:	47a8      	blx	r5
10008ecc:	2800      	cmp	r0, #0
10008ece:	d005      	beq.n	10008edc <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008ed0:	2200      	movs	r2, #0
10008ed2:	4b5e      	ldr	r3, [pc, #376]	; (1000904c <mpu_set_sensors+0x1d4>)
10008ed4:	729a      	strb	r2, [r3, #10]
        return -1;
10008ed6:	2501      	movs	r5, #1
10008ed8:	426d      	negs	r5, r5
10008eda:	e0b4      	b.n	10009046 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008edc:	466b      	mov	r3, sp
10008ede:	1dda      	adds	r2, r3, #7
10008ee0:	79db      	ldrb	r3, [r3, #7]
10008ee2:	2140      	movs	r1, #64	; 0x40
10008ee4:	438b      	bics	r3, r1
10008ee6:	4959      	ldr	r1, [pc, #356]	; (1000904c <mpu_set_sensors+0x1d4>)
10008ee8:	730b      	strb	r3, [r1, #12]

    data = 0;
10008eea:	2300      	movs	r3, #0
10008eec:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008eee:	0663      	lsls	r3, r4, #25
10008ef0:	d402      	bmi.n	10008ef8 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008ef2:	2204      	movs	r2, #4
10008ef4:	466b      	mov	r3, sp
10008ef6:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008ef8:	06a3      	lsls	r3, r4, #26
10008efa:	d405      	bmi.n	10008f08 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008efc:	466b      	mov	r3, sp
10008efe:	1dda      	adds	r2, r3, #7
10008f00:	79d9      	ldrb	r1, [r3, #7]
10008f02:	2302      	movs	r3, #2
10008f04:	430b      	orrs	r3, r1
10008f06:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008f08:	06e3      	lsls	r3, r4, #27
10008f0a:	d405      	bmi.n	10008f18 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008f0c:	466b      	mov	r3, sp
10008f0e:	1dda      	adds	r2, r3, #7
10008f10:	79d9      	ldrb	r1, [r3, #7]
10008f12:	2301      	movs	r3, #1
10008f14:	430b      	orrs	r3, r1
10008f16:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008f18:	0723      	lsls	r3, r4, #28
10008f1a:	d405      	bmi.n	10008f28 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008f1c:	466b      	mov	r3, sp
10008f1e:	1dda      	adds	r2, r3, #7
10008f20:	79d9      	ldrb	r1, [r3, #7]
10008f22:	2338      	movs	r3, #56	; 0x38
10008f24:	430b      	orrs	r3, r1
10008f26:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008f28:	4b48      	ldr	r3, [pc, #288]	; (1000904c <mpu_set_sensors+0x1d4>)
10008f2a:	681a      	ldr	r2, [r3, #0]
10008f2c:	7d91      	ldrb	r1, [r2, #22]
10008f2e:	685b      	ldr	r3, [r3, #4]
10008f30:	7818      	ldrb	r0, [r3, #0]
10008f32:	466b      	mov	r3, sp
10008f34:	3307      	adds	r3, #7
10008f36:	2201      	movs	r2, #1
10008f38:	4d45      	ldr	r5, [pc, #276]	; (10009050 <mpu_set_sensors+0x1d8>)
10008f3a:	47a8      	blx	r5
10008f3c:	2800      	cmp	r0, #0
10008f3e:	d005      	beq.n	10008f4c <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008f40:	2200      	movs	r2, #0
10008f42:	4b42      	ldr	r3, [pc, #264]	; (1000904c <mpu_set_sensors+0x1d4>)
10008f44:	729a      	strb	r2, [r3, #10]
        return -1;
10008f46:	2501      	movs	r5, #1
10008f48:	426d      	negs	r5, r5
10008f4a:	e07c      	b.n	10009046 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008f4c:	2308      	movs	r3, #8
10008f4e:	0022      	movs	r2, r4
10008f50:	439a      	bics	r2, r3
10008f52:	d06b      	beq.n	1000902c <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008f54:	2000      	movs	r0, #0
10008f56:	4b3f      	ldr	r3, [pc, #252]	; (10009054 <mpu_set_sensors+0x1dc>)
10008f58:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f5a:	4b3c      	ldr	r3, [pc, #240]	; (1000904c <mpu_set_sensors+0x1d4>)
10008f5c:	681a      	ldr	r2, [r3, #0]
10008f5e:	7911      	ldrb	r1, [r2, #4]
10008f60:	685b      	ldr	r3, [r3, #4]
10008f62:	7818      	ldrb	r0, [r3, #0]
10008f64:	466b      	mov	r3, sp
10008f66:	3306      	adds	r3, #6
10008f68:	2201      	movs	r2, #1
10008f6a:	4d3b      	ldr	r5, [pc, #236]	; (10009058 <mpu_set_sensors+0x1e0>)
10008f6c:	47a8      	blx	r5
10008f6e:	2800      	cmp	r0, #0
10008f70:	d148      	bne.n	10009004 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f72:	07e3      	lsls	r3, r4, #31
10008f74:	d509      	bpl.n	10008f8a <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008f76:	2211      	movs	r2, #17
10008f78:	466b      	mov	r3, sp
10008f7a:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f7c:	466b      	mov	r3, sp
10008f7e:	1d9a      	adds	r2, r3, #6
10008f80:	7999      	ldrb	r1, [r3, #6]
10008f82:	2320      	movs	r3, #32
10008f84:	430b      	orrs	r3, r1
10008f86:	7013      	strb	r3, [r2, #0]
10008f88:	e008      	b.n	10008f9c <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008f8a:	2210      	movs	r2, #16
10008f8c:	466b      	mov	r3, sp
10008f8e:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f90:	466b      	mov	r3, sp
10008f92:	1d9a      	adds	r2, r3, #6
10008f94:	799b      	ldrb	r3, [r3, #6]
10008f96:	2120      	movs	r1, #32
10008f98:	438b      	bics	r3, r1
10008f9a:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f9c:	2324      	movs	r3, #36	; 0x24
10008f9e:	4a2b      	ldr	r2, [pc, #172]	; (1000904c <mpu_set_sensors+0x1d4>)
10008fa0:	5cd3      	ldrb	r3, [r2, r3]
10008fa2:	2b00      	cmp	r3, #0
10008fa4:	d007      	beq.n	10008fb6 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008fa6:	466b      	mov	r3, sp
10008fa8:	1d9a      	adds	r2, r3, #6
10008faa:	799b      	ldrb	r3, [r3, #6]
10008fac:	2180      	movs	r1, #128	; 0x80
10008fae:	4249      	negs	r1, r1
10008fb0:	430b      	orrs	r3, r1
10008fb2:	7013      	strb	r3, [r2, #0]
10008fb4:	e005      	b.n	10008fc2 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fb6:	466b      	mov	r3, sp
10008fb8:	1d9a      	adds	r2, r3, #6
10008fba:	799b      	ldrb	r3, [r3, #6]
10008fbc:	217f      	movs	r1, #127	; 0x7f
10008fbe:	400b      	ands	r3, r1
10008fc0:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008fc2:	4b22      	ldr	r3, [pc, #136]	; (1000904c <mpu_set_sensors+0x1d4>)
10008fc4:	2226      	movs	r2, #38	; 0x26
10008fc6:	6819      	ldr	r1, [r3, #0]
10008fc8:	5c89      	ldrb	r1, [r1, r2]
10008fca:	685b      	ldr	r3, [r3, #4]
10008fcc:	7818      	ldrb	r0, [r3, #0]
10008fce:	466b      	mov	r3, sp
10008fd0:	3307      	adds	r3, #7
10008fd2:	3a25      	subs	r2, #37	; 0x25
10008fd4:	4d1e      	ldr	r5, [pc, #120]	; (10009050 <mpu_set_sensors+0x1d8>)
10008fd6:	47a8      	blx	r5
10008fd8:	2800      	cmp	r0, #0
10008fda:	d116      	bne.n	1000900a <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008fdc:	4b1b      	ldr	r3, [pc, #108]	; (1000904c <mpu_set_sensors+0x1d4>)
10008fde:	681a      	ldr	r2, [r3, #0]
10008fe0:	7911      	ldrb	r1, [r2, #4]
10008fe2:	685b      	ldr	r3, [r3, #4]
10008fe4:	7818      	ldrb	r0, [r3, #0]
10008fe6:	466b      	mov	r3, sp
10008fe8:	3306      	adds	r3, #6
10008fea:	2201      	movs	r2, #1
10008fec:	4d18      	ldr	r5, [pc, #96]	; (10009050 <mpu_set_sensors+0x1d8>)
10008fee:	47a8      	blx	r5
10008ff0:	1e05      	subs	r5, r0, #0
10008ff2:	d10d      	bne.n	10009010 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008ff4:	4b15      	ldr	r3, [pc, #84]	; (1000904c <mpu_set_sensors+0x1d4>)
10008ff6:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008ff8:	2200      	movs	r2, #0
10008ffa:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008ffc:	2032      	movs	r0, #50	; 0x32
10008ffe:	4b17      	ldr	r3, [pc, #92]	; (1000905c <mpu_set_sensors+0x1e4>)
10009000:	4798      	blx	r3
    return 0;
10009002:	e020      	b.n	10009046 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009004:	2501      	movs	r5, #1
10009006:	426d      	negs	r5, r5
10009008:	e01d      	b.n	10009046 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000900a:	2501      	movs	r5, #1
1000900c:	426d      	negs	r5, r5
1000900e:	e01a      	b.n	10009046 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009010:	2501      	movs	r5, #1
10009012:	426d      	negs	r5, r5
10009014:	e017      	b.n	10009046 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009016:	2501      	movs	r5, #1
10009018:	426d      	negs	r5, r5
1000901a:	e014      	b.n	10009046 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000901c:	466b      	mov	r3, sp
1000901e:	3307      	adds	r3, #7
10009020:	781b      	ldrb	r3, [r3, #0]
10009022:	2240      	movs	r2, #64	; 0x40
10009024:	4393      	bics	r3, r2
10009026:	4a09      	ldr	r2, [pc, #36]	; (1000904c <mpu_set_sensors+0x1d4>)
10009028:	7313      	strb	r3, [r2, #12]
1000902a:	e762      	b.n	10008ef2 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000902c:	4b07      	ldr	r3, [pc, #28]	; (1000904c <mpu_set_sensors+0x1d4>)
1000902e:	681a      	ldr	r2, [r3, #0]
10009030:	7911      	ldrb	r1, [r2, #4]
10009032:	685b      	ldr	r3, [r3, #4]
10009034:	7818      	ldrb	r0, [r3, #0]
10009036:	466b      	mov	r3, sp
10009038:	3306      	adds	r3, #6
1000903a:	2201      	movs	r2, #1
1000903c:	4d06      	ldr	r5, [pc, #24]	; (10009058 <mpu_set_sensors+0x1e0>)
1000903e:	47a8      	blx	r5
10009040:	2800      	cmp	r0, #0
10009042:	d0a2      	beq.n	10008f8a <mpu_set_sensors+0x112>
10009044:	e7e7      	b.n	10009016 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009046:	0028      	movs	r0, r5
10009048:	b003      	add	sp, #12
1000904a:	bd30      	pop	{r4, r5, pc}
1000904c:	10017cb8 	.word	0x10017cb8
10009050:	1000a75d 	.word	0x1000a75d
10009054:	10008be9 	.word	0x10008be9
10009058:	1000a7b9 	.word	0x1000a7b9
1000905c:	10008129 	.word	0x10008129

10009060 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009060:	b530      	push	{r4, r5, lr}
10009062:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009064:	ab02      	add	r3, sp, #8
10009066:	2280      	movs	r2, #128	; 0x80
10009068:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000906a:	4ab9      	ldr	r2, [pc, #740]	; (10009350 <mpu_init+0x2f0>)
1000906c:	6811      	ldr	r1, [r2, #0]
1000906e:	7d49      	ldrb	r1, [r1, #21]
10009070:	6852      	ldr	r2, [r2, #4]
10009072:	7810      	ldrb	r0, [r2, #0]
10009074:	2201      	movs	r2, #1
10009076:	4cb7      	ldr	r4, [pc, #732]	; (10009354 <mpu_init+0x2f4>)
10009078:	47a0      	blx	r4
1000907a:	2800      	cmp	r0, #0
1000907c:	d000      	beq.n	10009080 <mpu_init+0x20>
1000907e:	e149      	b.n	10009314 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009080:	3064      	adds	r0, #100	; 0x64
10009082:	4bb5      	ldr	r3, [pc, #724]	; (10009358 <mpu_init+0x2f8>)
10009084:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009086:	ab02      	add	r3, sp, #8
10009088:	2200      	movs	r2, #0
1000908a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000908c:	4ab0      	ldr	r2, [pc, #704]	; (10009350 <mpu_init+0x2f0>)
1000908e:	6811      	ldr	r1, [r2, #0]
10009090:	7d49      	ldrb	r1, [r1, #21]
10009092:	6852      	ldr	r2, [r2, #4]
10009094:	7810      	ldrb	r0, [r2, #0]
10009096:	2201      	movs	r2, #1
10009098:	4cae      	ldr	r4, [pc, #696]	; (10009354 <mpu_init+0x2f4>)
1000909a:	47a0      	blx	r4
1000909c:	2800      	cmp	r0, #0
1000909e:	d000      	beq.n	100090a2 <mpu_init+0x42>
100090a0:	e13b      	b.n	1000931a <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100090a2:	4aab      	ldr	r2, [pc, #684]	; (10009350 <mpu_init+0x2f0>)
100090a4:	2300      	movs	r3, #0
100090a6:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100090a8:	ab02      	add	r3, sp, #8
100090aa:	2140      	movs	r1, #64	; 0x40
100090ac:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100090ae:	6811      	ldr	r1, [r2, #0]
100090b0:	7a09      	ldrb	r1, [r1, #8]
100090b2:	6852      	ldr	r2, [r2, #4]
100090b4:	7810      	ldrb	r0, [r2, #0]
100090b6:	2201      	movs	r2, #1
100090b8:	4ca6      	ldr	r4, [pc, #664]	; (10009354 <mpu_init+0x2f4>)
100090ba:	47a0      	blx	r4
100090bc:	2800      	cmp	r0, #0
100090be:	d000      	beq.n	100090c2 <mpu_init+0x62>
100090c0:	e12e      	b.n	10009320 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
100090c2:	4ca3      	ldr	r4, [pc, #652]	; (10009350 <mpu_init+0x2f0>)
100090c4:	23ff      	movs	r3, #255	; 0xff
100090c6:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
100090c8:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
100090ca:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
100090cc:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
100090ce:	2201      	movs	r2, #1
100090d0:	4252      	negs	r2, r2
100090d2:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090d4:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
100090d6:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090d8:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
100090da:	3bfe      	subs	r3, #254	; 0xfe
100090dc:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090de:	2500      	movs	r5, #0
100090e0:	3321      	adds	r3, #33	; 0x21
100090e2:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
100090e4:	3301      	adds	r3, #1
100090e6:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090e8:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090ea:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090ec:	0020      	movs	r0, r4
100090ee:	3016      	adds	r0, #22
100090f0:	320d      	adds	r2, #13
100090f2:	2100      	movs	r1, #0
100090f4:	4b99      	ldr	r3, [pc, #612]	; (1000935c <mpu_init+0x2fc>)
100090f6:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090f8:	2324      	movs	r3, #36	; 0x24
100090fa:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090fc:	3301      	adds	r3, #1
100090fe:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009100:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10009102:	20fa      	movs	r0, #250	; 0xfa
10009104:	00c0      	lsls	r0, r0, #3
10009106:	4b96      	ldr	r3, [pc, #600]	; (10009360 <mpu_init+0x300>)
10009108:	4798      	blx	r3
1000910a:	2800      	cmp	r0, #0
1000910c:	d000      	beq.n	10009110 <mpu_init+0xb0>
1000910e:	e10a      	b.n	10009326 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
10009110:	3002      	adds	r0, #2
10009112:	4b94      	ldr	r3, [pc, #592]	; (10009364 <mpu_init+0x304>)
10009114:	4798      	blx	r3
10009116:	2800      	cmp	r0, #0
10009118:	d000      	beq.n	1000911c <mpu_init+0xbc>
1000911a:	e107      	b.n	1000932c <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
1000911c:	302a      	adds	r0, #42	; 0x2a
1000911e:	4b92      	ldr	r3, [pc, #584]	; (10009368 <mpu_init+0x308>)
10009120:	4798      	blx	r3
10009122:	2800      	cmp	r0, #0
10009124:	d000      	beq.n	10009128 <mpu_init+0xc8>
10009126:	e104      	b.n	10009332 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009128:	3032      	adds	r0, #50	; 0x32
1000912a:	4b90      	ldr	r3, [pc, #576]	; (1000936c <mpu_init+0x30c>)
1000912c:	4798      	blx	r3
1000912e:	2800      	cmp	r0, #0
10009130:	d000      	beq.n	10009134 <mpu_init+0xd4>
10009132:	e101      	b.n	10009338 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009134:	4b8e      	ldr	r3, [pc, #568]	; (10009370 <mpu_init+0x310>)
10009136:	4798      	blx	r3
10009138:	2800      	cmp	r0, #0
1000913a:	d000      	beq.n	1000913e <mpu_init+0xde>
1000913c:	e0ff      	b.n	1000933e <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000913e:	3001      	adds	r0, #1
10009140:	4b8c      	ldr	r3, [pc, #560]	; (10009374 <mpu_init+0x314>)
10009142:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009144:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009146:	4d8c      	ldr	r5, [pc, #560]	; (10009378 <mpu_init+0x318>)
10009148:	ab01      	add	r3, sp, #4
1000914a:	2201      	movs	r2, #1
1000914c:	2100      	movs	r1, #0
1000914e:	0020      	movs	r0, r4
10009150:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
10009152:	2800      	cmp	r0, #0
10009154:	d103      	bne.n	1000915e <mpu_init+0xfe>
10009156:	466b      	mov	r3, sp
10009158:	791b      	ldrb	r3, [r3, #4]
1000915a:	2b48      	cmp	r3, #72	; 0x48
1000915c:	d004      	beq.n	10009168 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000915e:	3401      	adds	r4, #1
10009160:	b2e4      	uxtb	r4, r4
10009162:	2c10      	cmp	r4, #16
10009164:	d1f0      	bne.n	10009148 <mpu_init+0xe8>
10009166:	e001      	b.n	1000916c <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009168:	2c0f      	cmp	r4, #15
1000916a:	d905      	bls.n	10009178 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
1000916c:	4883      	ldr	r0, [pc, #524]	; (1000937c <mpu_init+0x31c>)
1000916e:	4c84      	ldr	r4, [pc, #528]	; (10009380 <mpu_init+0x320>)
10009170:	47a0      	blx	r4
10009172:	4884      	ldr	r0, [pc, #528]	; (10009384 <mpu_init+0x324>)
10009174:	47a0      	blx	r4
10009176:	e0c4      	b.n	10009302 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009178:	232a      	movs	r3, #42	; 0x2a
1000917a:	4a75      	ldr	r2, [pc, #468]	; (10009350 <mpu_init+0x2f0>)
1000917c:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
1000917e:	ab01      	add	r3, sp, #4
10009180:	2210      	movs	r2, #16
10009182:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009184:	3a0f      	subs	r2, #15
10009186:	210a      	movs	r1, #10
10009188:	0020      	movs	r0, r4
1000918a:	4c72      	ldr	r4, [pc, #456]	; (10009354 <mpu_init+0x2f4>)
1000918c:	47a0      	blx	r4
1000918e:	2800      	cmp	r0, #0
10009190:	d000      	beq.n	10009194 <mpu_init+0x134>
10009192:	e0b6      	b.n	10009302 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009194:	3001      	adds	r0, #1
10009196:	4b70      	ldr	r3, [pc, #448]	; (10009358 <mpu_init+0x2f8>)
10009198:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000919a:	ab01      	add	r3, sp, #4
1000919c:	221f      	movs	r2, #31
1000919e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091a0:	320b      	adds	r2, #11
100091a2:	496b      	ldr	r1, [pc, #428]	; (10009350 <mpu_init+0x2f0>)
100091a4:	5c88      	ldrb	r0, [r1, r2]
100091a6:	3a29      	subs	r2, #41	; 0x29
100091a8:	210a      	movs	r1, #10
100091aa:	4c6a      	ldr	r4, [pc, #424]	; (10009354 <mpu_init+0x2f4>)
100091ac:	47a0      	blx	r4
100091ae:	2800      	cmp	r0, #0
100091b0:	d000      	beq.n	100091b4 <mpu_init+0x154>
100091b2:	e0a6      	b.n	10009302 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091b4:	3001      	adds	r0, #1
100091b6:	4b68      	ldr	r3, [pc, #416]	; (10009358 <mpu_init+0x2f8>)
100091b8:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
100091ba:	232a      	movs	r3, #42	; 0x2a
100091bc:	4a64      	ldr	r2, [pc, #400]	; (10009350 <mpu_init+0x2f0>)
100091be:	5cd0      	ldrb	r0, [r2, r3]
100091c0:	ab01      	add	r3, sp, #4
100091c2:	2203      	movs	r2, #3
100091c4:	2110      	movs	r1, #16
100091c6:	4c6c      	ldr	r4, [pc, #432]	; (10009378 <mpu_init+0x318>)
100091c8:	47a0      	blx	r4
100091ca:	2800      	cmp	r0, #0
100091cc:	d000      	beq.n	100091d0 <mpu_init+0x170>
100091ce:	e098      	b.n	10009302 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091d0:	4a5f      	ldr	r2, [pc, #380]	; (10009350 <mpu_init+0x2f0>)
100091d2:	ab01      	add	r3, sp, #4
100091d4:	7819      	ldrb	r1, [r3, #0]
100091d6:	3180      	adds	r1, #128	; 0x80
100091d8:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091da:	7859      	ldrb	r1, [r3, #1]
100091dc:	3180      	adds	r1, #128	; 0x80
100091de:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091e0:	7899      	ldrb	r1, [r3, #2]
100091e2:	3180      	adds	r1, #128	; 0x80
100091e4:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091e6:	2110      	movs	r1, #16
100091e8:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091ea:	311a      	adds	r1, #26
100091ec:	5c50      	ldrb	r0, [r2, r1]
100091ee:	2201      	movs	r2, #1
100091f0:	3920      	subs	r1, #32
100091f2:	4c58      	ldr	r4, [pc, #352]	; (10009354 <mpu_init+0x2f4>)
100091f4:	47a0      	blx	r4
100091f6:	2800      	cmp	r0, #0
100091f8:	d000      	beq.n	100091fc <mpu_init+0x19c>
100091fa:	e082      	b.n	10009302 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091fc:	3001      	adds	r0, #1
100091fe:	4b56      	ldr	r3, [pc, #344]	; (10009358 <mpu_init+0x2f8>)
10009200:	4798      	blx	r3

    mpu_set_bypass(0);
10009202:	2000      	movs	r0, #0
10009204:	4b5b      	ldr	r3, [pc, #364]	; (10009374 <mpu_init+0x314>)
10009206:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009208:	ab01      	add	r3, sp, #4
1000920a:	2240      	movs	r2, #64	; 0x40
1000920c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000920e:	4a50      	ldr	r2, [pc, #320]	; (10009350 <mpu_init+0x2f0>)
10009210:	6811      	ldr	r1, [r2, #0]
10009212:	7e89      	ldrb	r1, [r1, #26]
10009214:	6852      	ldr	r2, [r2, #4]
10009216:	7810      	ldrb	r0, [r2, #0]
10009218:	2201      	movs	r2, #1
1000921a:	4c4e      	ldr	r4, [pc, #312]	; (10009354 <mpu_init+0x2f4>)
1000921c:	47a0      	blx	r4
1000921e:	2800      	cmp	r0, #0
10009220:	d16f      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009222:	ab01      	add	r3, sp, #4
10009224:	4a4a      	ldr	r2, [pc, #296]	; (10009350 <mpu_init+0x2f0>)
10009226:	212a      	movs	r1, #42	; 0x2a
10009228:	5c51      	ldrb	r1, [r2, r1]
1000922a:	3880      	subs	r0, #128	; 0x80
1000922c:	4301      	orrs	r1, r0
1000922e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009230:	6811      	ldr	r1, [r2, #0]
10009232:	7f89      	ldrb	r1, [r1, #30]
10009234:	6852      	ldr	r2, [r2, #4]
10009236:	7810      	ldrb	r0, [r2, #0]
10009238:	2201      	movs	r2, #1
1000923a:	4c46      	ldr	r4, [pc, #280]	; (10009354 <mpu_init+0x2f4>)
1000923c:	47a0      	blx	r4
1000923e:	2800      	cmp	r0, #0
10009240:	d15f      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009242:	ab01      	add	r3, sp, #4
10009244:	2202      	movs	r2, #2
10009246:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009248:	4a41      	ldr	r2, [pc, #260]	; (10009350 <mpu_init+0x2f0>)
1000924a:	6811      	ldr	r1, [r2, #0]
1000924c:	7fc9      	ldrb	r1, [r1, #31]
1000924e:	6852      	ldr	r2, [r2, #4]
10009250:	7810      	ldrb	r0, [r2, #0]
10009252:	2201      	movs	r2, #1
10009254:	4c3f      	ldr	r4, [pc, #252]	; (10009354 <mpu_init+0x2f4>)
10009256:	47a0      	blx	r4
10009258:	2800      	cmp	r0, #0
1000925a:	d152      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000925c:	ab01      	add	r3, sp, #4
1000925e:	2288      	movs	r2, #136	; 0x88
10009260:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009262:	4a3b      	ldr	r2, [pc, #236]	; (10009350 <mpu_init+0x2f0>)
10009264:	2120      	movs	r1, #32
10009266:	6810      	ldr	r0, [r2, #0]
10009268:	5c41      	ldrb	r1, [r0, r1]
1000926a:	6852      	ldr	r2, [r2, #4]
1000926c:	7810      	ldrb	r0, [r2, #0]
1000926e:	2201      	movs	r2, #1
10009270:	4c38      	ldr	r4, [pc, #224]	; (10009354 <mpu_init+0x2f4>)
10009272:	47a0      	blx	r4
10009274:	2800      	cmp	r0, #0
10009276:	d144      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009278:	ab01      	add	r3, sp, #4
1000927a:	4a35      	ldr	r2, [pc, #212]	; (10009350 <mpu_init+0x2f0>)
1000927c:	212a      	movs	r1, #42	; 0x2a
1000927e:	5c51      	ldrb	r1, [r2, r1]
10009280:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009282:	2121      	movs	r1, #33	; 0x21
10009284:	6810      	ldr	r0, [r2, #0]
10009286:	5c41      	ldrb	r1, [r0, r1]
10009288:	6852      	ldr	r2, [r2, #4]
1000928a:	7810      	ldrb	r0, [r2, #0]
1000928c:	2201      	movs	r2, #1
1000928e:	4c31      	ldr	r4, [pc, #196]	; (10009354 <mpu_init+0x2f4>)
10009290:	47a0      	blx	r4
10009292:	2800      	cmp	r0, #0
10009294:	d135      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009296:	ab01      	add	r3, sp, #4
10009298:	220a      	movs	r2, #10
1000929a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000929c:	4a2c      	ldr	r2, [pc, #176]	; (10009350 <mpu_init+0x2f0>)
1000929e:	2122      	movs	r1, #34	; 0x22
100092a0:	6810      	ldr	r0, [r2, #0]
100092a2:	5c41      	ldrb	r1, [r0, r1]
100092a4:	6852      	ldr	r2, [r2, #4]
100092a6:	7810      	ldrb	r0, [r2, #0]
100092a8:	2201      	movs	r2, #1
100092aa:	4c2a      	ldr	r4, [pc, #168]	; (10009354 <mpu_init+0x2f4>)
100092ac:	47a0      	blx	r4
100092ae:	2800      	cmp	r0, #0
100092b0:	d127      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100092b2:	ab01      	add	r3, sp, #4
100092b4:	2281      	movs	r2, #129	; 0x81
100092b6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
100092b8:	4a25      	ldr	r2, [pc, #148]	; (10009350 <mpu_init+0x2f0>)
100092ba:	2123      	movs	r1, #35	; 0x23
100092bc:	6810      	ldr	r0, [r2, #0]
100092be:	5c41      	ldrb	r1, [r0, r1]
100092c0:	6852      	ldr	r2, [r2, #4]
100092c2:	7810      	ldrb	r0, [r2, #0]
100092c4:	2201      	movs	r2, #1
100092c6:	4c23      	ldr	r4, [pc, #140]	; (10009354 <mpu_init+0x2f4>)
100092c8:	47a0      	blx	r4
100092ca:	2800      	cmp	r0, #0
100092cc:	d119      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100092ce:	ab01      	add	r3, sp, #4
100092d0:	2211      	movs	r2, #17
100092d2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100092d4:	4a1e      	ldr	r2, [pc, #120]	; (10009350 <mpu_init+0x2f0>)
100092d6:	2126      	movs	r1, #38	; 0x26
100092d8:	6810      	ldr	r0, [r2, #0]
100092da:	5c41      	ldrb	r1, [r0, r1]
100092dc:	6852      	ldr	r2, [r2, #4]
100092de:	7810      	ldrb	r0, [r2, #0]
100092e0:	2201      	movs	r2, #1
100092e2:	4c1c      	ldr	r4, [pc, #112]	; (10009354 <mpu_init+0x2f4>)
100092e4:	47a0      	blx	r4
100092e6:	2800      	cmp	r0, #0
100092e8:	d10b      	bne.n	10009302 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092ea:	ab01      	add	r3, sp, #4
100092ec:	2203      	movs	r2, #3
100092ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092f0:	4a17      	ldr	r2, [pc, #92]	; (10009350 <mpu_init+0x2f0>)
100092f2:	2127      	movs	r1, #39	; 0x27
100092f4:	6810      	ldr	r0, [r2, #0]
100092f6:	5c41      	ldrb	r1, [r0, r1]
100092f8:	6852      	ldr	r2, [r2, #4]
100092fa:	7810      	ldrb	r0, [r2, #0]
100092fc:	2201      	movs	r2, #1
100092fe:	4c15      	ldr	r4, [pc, #84]	; (10009354 <mpu_init+0x2f4>)
10009300:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009302:	200a      	movs	r0, #10
10009304:	4b20      	ldr	r3, [pc, #128]	; (10009388 <mpu_init+0x328>)
10009306:	4798      	blx	r3
10009308:	1e04      	subs	r4, r0, #0
1000930a:	d11b      	bne.n	10009344 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000930c:	2000      	movs	r0, #0
1000930e:	4b1f      	ldr	r3, [pc, #124]	; (1000938c <mpu_init+0x32c>)
10009310:	4798      	blx	r3
    return 0;
10009312:	e019      	b.n	10009348 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009314:	2401      	movs	r4, #1
10009316:	4264      	negs	r4, r4
10009318:	e016      	b.n	10009348 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000931a:	2401      	movs	r4, #1
1000931c:	4264      	negs	r4, r4
1000931e:	e013      	b.n	10009348 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009320:	2401      	movs	r4, #1
10009322:	4264      	negs	r4, r4
10009324:	e010      	b.n	10009348 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
10009326:	2401      	movs	r4, #1
10009328:	4264      	negs	r4, r4
1000932a:	e00d      	b.n	10009348 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
1000932c:	2401      	movs	r4, #1
1000932e:	4264      	negs	r4, r4
10009330:	e00a      	b.n	10009348 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
10009332:	2401      	movs	r4, #1
10009334:	4264      	negs	r4, r4
10009336:	e007      	b.n	10009348 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009338:	2401      	movs	r4, #1
1000933a:	4264      	negs	r4, r4
1000933c:	e004      	b.n	10009348 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000933e:	2401      	movs	r4, #1
10009340:	4264      	negs	r4, r4
10009342:	e001      	b.n	10009348 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009344:	2401      	movs	r4, #1
10009346:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009348:	0020      	movs	r0, r4
1000934a:	b005      	add	sp, #20
1000934c:	bd30      	pop	{r4, r5, pc}
1000934e:	46c0      	nop			; (mov r8, r8)
10009350:	10017cb8 	.word	0x10017cb8
10009354:	1000a75d 	.word	0x1000a75d
10009358:	10008129 	.word	0x10008129
1000935c:	100149e1 	.word	0x100149e1
10009360:	10008731 	.word	0x10008731
10009364:	1000881d 	.word	0x1000881d
10009368:	100088b1 	.word	0x100088b1
1000936c:	10008da5 	.word	0x10008da5
10009370:	10008a01 	.word	0x10008a01
10009374:	10008a6d 	.word	0x10008a6d
10009378:	1000a7b9 	.word	0x1000a7b9
1000937c:	10015df4 	.word	0x10015df4
10009380:	10014c49 	.word	0x10014c49
10009384:	10015c64 	.word	0x10015c64
10009388:	10008989 	.word	0x10008989
1000938c:	10008e79 	.word	0x10008e79

10009390 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009390:	b570      	push	{r4, r5, r6, lr}
10009392:	b082      	sub	sp, #8
10009394:	000c      	movs	r4, r1
10009396:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009398:	d025      	beq.n	100093e6 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000939a:	4b19      	ldr	r3, [pc, #100]	; (10009400 <mpu_write_mem+0x70>)
1000939c:	7a9b      	ldrb	r3, [r3, #10]
1000939e:	2b00      	cmp	r3, #0
100093a0:	d024      	beq.n	100093ec <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100093a2:	ab01      	add	r3, sp, #4
100093a4:	0a02      	lsrs	r2, r0, #8
100093a6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100093a8:	b2c0      	uxtb	r0, r0
100093aa:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100093ac:	4b14      	ldr	r3, [pc, #80]	; (10009400 <mpu_write_mem+0x70>)
100093ae:	685b      	ldr	r3, [r3, #4]
100093b0:	1840      	adds	r0, r0, r1
100093b2:	895a      	ldrh	r2, [r3, #10]
100093b4:	4290      	cmp	r0, r2
100093b6:	dc1c      	bgt.n	100093f2 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100093b8:	4a11      	ldr	r2, [pc, #68]	; (10009400 <mpu_write_mem+0x70>)
100093ba:	6812      	ldr	r2, [r2, #0]
100093bc:	7ed1      	ldrb	r1, [r2, #27]
100093be:	7818      	ldrb	r0, [r3, #0]
100093c0:	ab01      	add	r3, sp, #4
100093c2:	2202      	movs	r2, #2
100093c4:	4e0f      	ldr	r6, [pc, #60]	; (10009404 <mpu_write_mem+0x74>)
100093c6:	47b0      	blx	r6
100093c8:	2800      	cmp	r0, #0
100093ca:	d115      	bne.n	100093f8 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
100093cc:	b2e2      	uxtb	r2, r4
100093ce:	4b0c      	ldr	r3, [pc, #48]	; (10009400 <mpu_write_mem+0x70>)
100093d0:	6819      	ldr	r1, [r3, #0]
100093d2:	7e09      	ldrb	r1, [r1, #24]
100093d4:	685b      	ldr	r3, [r3, #4]
100093d6:	7818      	ldrb	r0, [r3, #0]
100093d8:	002b      	movs	r3, r5
100093da:	4c0a      	ldr	r4, [pc, #40]	; (10009404 <mpu_write_mem+0x74>)
100093dc:	47a0      	blx	r4
100093de:	1e43      	subs	r3, r0, #1
100093e0:	4198      	sbcs	r0, r3
100093e2:	4240      	negs	r0, r0
100093e4:	e00a      	b.n	100093fc <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
100093e6:	2001      	movs	r0, #1
100093e8:	4240      	negs	r0, r0
100093ea:	e007      	b.n	100093fc <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
100093ec:	2001      	movs	r0, #1
100093ee:	4240      	negs	r0, r0
100093f0:	e004      	b.n	100093fc <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
100093f2:	2001      	movs	r0, #1
100093f4:	4240      	negs	r0, r0
100093f6:	e001      	b.n	100093fc <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
100093f8:	2001      	movs	r0, #1
100093fa:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
100093fc:	b002      	add	sp, #8
100093fe:	bd70      	pop	{r4, r5, r6, pc}
10009400:	10017cb8 	.word	0x10017cb8
10009404:	1000a75d 	.word	0x1000a75d

10009408 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009408:	b570      	push	{r4, r5, r6, lr}
1000940a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000940c:	2324      	movs	r3, #36	; 0x24
1000940e:	4a21      	ldr	r2, [pc, #132]	; (10009494 <mpu_set_dmp_state+0x8c>)
10009410:	5cd3      	ldrb	r3, [r2, r3]
10009412:	4283      	cmp	r3, r0
10009414:	d037      	beq.n	10009486 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009416:	2800      	cmp	r0, #0
10009418:	d020      	beq.n	1000945c <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000941a:	2325      	movs	r3, #37	; 0x25
1000941c:	5cd3      	ldrb	r3, [r2, r3]
1000941e:	2b00      	cmp	r3, #0
10009420:	d033      	beq.n	1000948a <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009422:	2000      	movs	r0, #0
10009424:	4d1c      	ldr	r5, [pc, #112]	; (10009498 <mpu_set_dmp_state+0x90>)
10009426:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009428:	2000      	movs	r0, #0
1000942a:	4b1c      	ldr	r3, [pc, #112]	; (1000949c <mpu_set_dmp_state+0x94>)
1000942c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000942e:	4c19      	ldr	r4, [pc, #100]	; (10009494 <mpu_set_dmp_state+0x8c>)
10009430:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009432:	4b1b      	ldr	r3, [pc, #108]	; (100094a0 <mpu_set_dmp_state+0x98>)
10009434:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009436:	466b      	mov	r3, sp
10009438:	3307      	adds	r3, #7
1000943a:	2200      	movs	r2, #0
1000943c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000943e:	6862      	ldr	r2, [r4, #4]
10009440:	7810      	ldrb	r0, [r2, #0]
10009442:	2201      	movs	r2, #1
10009444:	2123      	movs	r1, #35	; 0x23
10009446:	4e17      	ldr	r6, [pc, #92]	; (100094a4 <mpu_set_dmp_state+0x9c>)
10009448:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000944a:	2201      	movs	r2, #1
1000944c:	2324      	movs	r3, #36	; 0x24
1000944e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009450:	2001      	movs	r0, #1
10009452:	47a8      	blx	r5
        mpu_reset_fifo();
10009454:	4b14      	ldr	r3, [pc, #80]	; (100094a8 <mpu_set_dmp_state+0xa0>)
10009456:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
10009458:	2000      	movs	r0, #0
1000945a:	e018      	b.n	1000948e <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
1000945c:	2000      	movs	r0, #0
1000945e:	4b0e      	ldr	r3, [pc, #56]	; (10009498 <mpu_set_dmp_state+0x90>)
10009460:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
10009462:	466b      	mov	r3, sp
10009464:	3307      	adds	r3, #7
10009466:	4c0b      	ldr	r4, [pc, #44]	; (10009494 <mpu_set_dmp_state+0x8c>)
10009468:	7c22      	ldrb	r2, [r4, #16]
1000946a:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000946c:	6862      	ldr	r2, [r4, #4]
1000946e:	7810      	ldrb	r0, [r2, #0]
10009470:	2201      	movs	r2, #1
10009472:	2123      	movs	r1, #35	; 0x23
10009474:	4d0b      	ldr	r5, [pc, #44]	; (100094a4 <mpu_set_dmp_state+0x9c>)
10009476:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009478:	2200      	movs	r2, #0
1000947a:	2324      	movs	r3, #36	; 0x24
1000947c:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
1000947e:	4b0a      	ldr	r3, [pc, #40]	; (100094a8 <mpu_set_dmp_state+0xa0>)
10009480:	4798      	blx	r3
    }
    return 0;
10009482:	2000      	movs	r0, #0
10009484:	e003      	b.n	1000948e <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009486:	2000      	movs	r0, #0
10009488:	e001      	b.n	1000948e <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000948a:	2001      	movs	r0, #1
1000948c:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
1000948e:	b002      	add	sp, #8
10009490:	bd70      	pop	{r4, r5, r6, pc}
10009492:	46c0      	nop			; (mov r8, r8)
10009494:	10017cb8 	.word	0x10017cb8
10009498:	10008495 	.word	0x10008495
1000949c:	10008a6d 	.word	0x10008a6d
100094a0:	10008da5 	.word	0x10008da5
100094a4:	1000a75d 	.word	0x1000a75d
100094a8:	10008539 	.word	0x10008539

100094ac <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100094ac:	4b02      	ldr	r3, [pc, #8]	; (100094b8 <mpu_get_compass_fsr+0xc>)
100094ae:	685b      	ldr	r3, [r3, #4]
100094b0:	899b      	ldrh	r3, [r3, #12]
100094b2:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100094b4:	2000      	movs	r0, #0
100094b6:	4770      	bx	lr
100094b8:	10017cb8 	.word	0x10017cb8

100094bc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094bc:	b510      	push	{r4, lr}
100094be:	b086      	sub	sp, #24
100094c0:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094c2:	220c      	movs	r2, #12
100094c4:	4915      	ldr	r1, [pc, #84]	; (1000951c <dmp_set_fifo_rate+0x60>)
100094c6:	3110      	adds	r1, #16
100094c8:	a803      	add	r0, sp, #12
100094ca:	4b15      	ldr	r3, [pc, #84]	; (10009520 <dmp_set_fifo_rate+0x64>)
100094cc:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100094ce:	2cc8      	cmp	r4, #200	; 0xc8
100094d0:	d819      	bhi.n	10009506 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100094d2:	0021      	movs	r1, r4
100094d4:	20c8      	movs	r0, #200	; 0xc8
100094d6:	4b13      	ldr	r3, [pc, #76]	; (10009524 <dmp_set_fifo_rate+0x68>)
100094d8:	4798      	blx	r3
100094da:	3801      	subs	r0, #1
100094dc:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094de:	aa01      	add	r2, sp, #4
100094e0:	0a03      	lsrs	r3, r0, #8
100094e2:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
100094e4:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100094e6:	2102      	movs	r1, #2
100094e8:	480f      	ldr	r0, [pc, #60]	; (10009528 <dmp_set_fifo_rate+0x6c>)
100094ea:	4b10      	ldr	r3, [pc, #64]	; (1000952c <dmp_set_fifo_rate+0x70>)
100094ec:	4798      	blx	r3
100094ee:	2800      	cmp	r0, #0
100094f0:	d10c      	bne.n	1000950c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100094f2:	aa03      	add	r2, sp, #12
100094f4:	210c      	movs	r1, #12
100094f6:	480e      	ldr	r0, [pc, #56]	; (10009530 <dmp_set_fifo_rate+0x74>)
100094f8:	4b0c      	ldr	r3, [pc, #48]	; (1000952c <dmp_set_fifo_rate+0x70>)
100094fa:	4798      	blx	r3
100094fc:	2800      	cmp	r0, #0
100094fe:	d108      	bne.n	10009512 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009500:	4b0c      	ldr	r3, [pc, #48]	; (10009534 <dmp_set_fifo_rate+0x78>)
10009502:	819c      	strh	r4, [r3, #12]
    return 0;
10009504:	e007      	b.n	10009516 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009506:	2001      	movs	r0, #1
10009508:	4240      	negs	r0, r0
1000950a:	e004      	b.n	10009516 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000950c:	2001      	movs	r0, #1
1000950e:	4240      	negs	r0, r0
10009510:	e001      	b.n	10009516 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009512:	2001      	movs	r0, #1
10009514:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009516:	b006      	add	sp, #24
10009518:	bd10      	pop	{r4, pc}
1000951a:	46c0      	nop			; (mov r8, r8)
1000951c:	10016040 	.word	0x10016040
10009520:	100149cf 	.word	0x100149cf
10009524:	10012d6d 	.word	0x10012d6d
10009528:	00000216 	.word	0x00000216
1000952c:	10009391 	.word	0x10009391
10009530:	00000ac1 	.word	0x00000ac1
10009534:	10017d7c 	.word	0x10017d7c

10009538 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000953a:	4647      	mov	r7, r8
1000953c:	b480      	push	{r7}
1000953e:	b082      	sub	sp, #8
10009540:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009542:	0743      	lsls	r3, r0, #29
10009544:	d100      	bne.n	10009548 <dmp_set_tap_thresh+0x10>
10009546:	e09c      	b.n	10009682 <dmp_set_tap_thresh+0x14a>
10009548:	23c8      	movs	r3, #200	; 0xc8
1000954a:	00db      	lsls	r3, r3, #3
1000954c:	4299      	cmp	r1, r3
1000954e:	d900      	bls.n	10009552 <dmp_set_tap_thresh+0x1a>
10009550:	e09a      	b.n	10009688 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009552:	0008      	movs	r0, r1
10009554:	4b58      	ldr	r3, [pc, #352]	; (100096b8 <dmp_set_tap_thresh+0x180>)
10009556:	4798      	blx	r3
10009558:	4958      	ldr	r1, [pc, #352]	; (100096bc <dmp_set_tap_thresh+0x184>)
1000955a:	4b59      	ldr	r3, [pc, #356]	; (100096c0 <dmp_set_tap_thresh+0x188>)
1000955c:	4798      	blx	r3
1000955e:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
10009560:	466b      	mov	r3, sp
10009562:	1cdd      	adds	r5, r3, #3
10009564:	0028      	movs	r0, r5
10009566:	4b57      	ldr	r3, [pc, #348]	; (100096c4 <dmp_set_tap_thresh+0x18c>)
10009568:	4798      	blx	r3
    switch (accel_fsr) {
1000956a:	782b      	ldrb	r3, [r5, #0]
1000956c:	2b04      	cmp	r3, #4
1000956e:	d019      	beq.n	100095a4 <dmp_set_tap_thresh+0x6c>
10009570:	b2da      	uxtb	r2, r3
10009572:	2a04      	cmp	r2, #4
10009574:	d802      	bhi.n	1000957c <dmp_set_tap_thresh+0x44>
10009576:	2b02      	cmp	r3, #2
10009578:	d005      	beq.n	10009586 <dmp_set_tap_thresh+0x4e>
1000957a:	e088      	b.n	1000968e <dmp_set_tap_thresh+0x156>
1000957c:	2b08      	cmp	r3, #8
1000957e:	d020      	beq.n	100095c2 <dmp_set_tap_thresh+0x8a>
10009580:	2b10      	cmp	r3, #16
10009582:	d02d      	beq.n	100095e0 <dmp_set_tap_thresh+0xa8>
10009584:	e083      	b.n	1000968e <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009586:	4b50      	ldr	r3, [pc, #320]	; (100096c8 <dmp_set_tap_thresh+0x190>)
10009588:	4698      	mov	r8, r3
1000958a:	218d      	movs	r1, #141	; 0x8d
1000958c:	05c9      	lsls	r1, r1, #23
1000958e:	1c30      	adds	r0, r6, #0
10009590:	4798      	blx	r3
10009592:	4f4e      	ldr	r7, [pc, #312]	; (100096cc <dmp_set_tap_thresh+0x194>)
10009594:	47b8      	blx	r7
10009596:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009598:	494d      	ldr	r1, [pc, #308]	; (100096d0 <dmp_set_tap_thresh+0x198>)
1000959a:	1c30      	adds	r0, r6, #0
1000959c:	47c0      	blx	r8
1000959e:	47b8      	blx	r7
100095a0:	b280      	uxth	r0, r0
        break;
100095a2:	e02b      	b.n	100095fc <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100095a4:	4b48      	ldr	r3, [pc, #288]	; (100096c8 <dmp_set_tap_thresh+0x190>)
100095a6:	4698      	mov	r8, r3
100095a8:	218c      	movs	r1, #140	; 0x8c
100095aa:	05c9      	lsls	r1, r1, #23
100095ac:	1c30      	adds	r0, r6, #0
100095ae:	4798      	blx	r3
100095b0:	4f46      	ldr	r7, [pc, #280]	; (100096cc <dmp_set_tap_thresh+0x194>)
100095b2:	47b8      	blx	r7
100095b4:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100095b6:	4947      	ldr	r1, [pc, #284]	; (100096d4 <dmp_set_tap_thresh+0x19c>)
100095b8:	1c30      	adds	r0, r6, #0
100095ba:	47c0      	blx	r8
100095bc:	47b8      	blx	r7
100095be:	b280      	uxth	r0, r0
        break;
100095c0:	e01c      	b.n	100095fc <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100095c2:	4b41      	ldr	r3, [pc, #260]	; (100096c8 <dmp_set_tap_thresh+0x190>)
100095c4:	4698      	mov	r8, r3
100095c6:	218b      	movs	r1, #139	; 0x8b
100095c8:	05c9      	lsls	r1, r1, #23
100095ca:	1c30      	adds	r0, r6, #0
100095cc:	4798      	blx	r3
100095ce:	4f3f      	ldr	r7, [pc, #252]	; (100096cc <dmp_set_tap_thresh+0x194>)
100095d0:	47b8      	blx	r7
100095d2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100095d4:	4940      	ldr	r1, [pc, #256]	; (100096d8 <dmp_set_tap_thresh+0x1a0>)
100095d6:	1c30      	adds	r0, r6, #0
100095d8:	47c0      	blx	r8
100095da:	47b8      	blx	r7
100095dc:	b280      	uxth	r0, r0
        break;
100095de:	e00d      	b.n	100095fc <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100095e0:	4b39      	ldr	r3, [pc, #228]	; (100096c8 <dmp_set_tap_thresh+0x190>)
100095e2:	4698      	mov	r8, r3
100095e4:	218a      	movs	r1, #138	; 0x8a
100095e6:	05c9      	lsls	r1, r1, #23
100095e8:	1c30      	adds	r0, r6, #0
100095ea:	4798      	blx	r3
100095ec:	4f37      	ldr	r7, [pc, #220]	; (100096cc <dmp_set_tap_thresh+0x194>)
100095ee:	47b8      	blx	r7
100095f0:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100095f2:	493a      	ldr	r1, [pc, #232]	; (100096dc <dmp_set_tap_thresh+0x1a4>)
100095f4:	1c30      	adds	r0, r6, #0
100095f6:	47c0      	blx	r8
100095f8:	47b8      	blx	r7
100095fa:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100095fc:	ab01      	add	r3, sp, #4
100095fe:	0a2a      	lsrs	r2, r5, #8
10009600:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009602:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009604:	0a02      	lsrs	r2, r0, #8
10009606:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009608:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000960a:	07e3      	lsls	r3, r4, #31
1000960c:	d510      	bpl.n	10009630 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000960e:	aa01      	add	r2, sp, #4
10009610:	2102      	movs	r1, #2
10009612:	20ea      	movs	r0, #234	; 0xea
10009614:	0040      	lsls	r0, r0, #1
10009616:	4b32      	ldr	r3, [pc, #200]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
10009618:	4798      	blx	r3
1000961a:	2800      	cmp	r0, #0
1000961c:	d13a      	bne.n	10009694 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000961e:	466b      	mov	r3, sp
10009620:	1d9a      	adds	r2, r3, #6
10009622:	2102      	movs	r1, #2
10009624:	3025      	adds	r0, #37	; 0x25
10009626:	30ff      	adds	r0, #255	; 0xff
10009628:	4b2d      	ldr	r3, [pc, #180]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
1000962a:	4798      	blx	r3
1000962c:	2800      	cmp	r0, #0
1000962e:	d134      	bne.n	1000969a <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
10009630:	07a3      	lsls	r3, r4, #30
10009632:	d510      	bpl.n	10009656 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009634:	aa01      	add	r2, sp, #4
10009636:	2102      	movs	r1, #2
10009638:	20ec      	movs	r0, #236	; 0xec
1000963a:	0040      	lsls	r0, r0, #1
1000963c:	4b28      	ldr	r3, [pc, #160]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
1000963e:	4798      	blx	r3
10009640:	2800      	cmp	r0, #0
10009642:	d12d      	bne.n	100096a0 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009644:	466b      	mov	r3, sp
10009646:	1d9a      	adds	r2, r3, #6
10009648:	2102      	movs	r1, #2
1000964a:	3029      	adds	r0, #41	; 0x29
1000964c:	30ff      	adds	r0, #255	; 0xff
1000964e:	4b24      	ldr	r3, [pc, #144]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
10009650:	4798      	blx	r3
10009652:	2800      	cmp	r0, #0
10009654:	d127      	bne.n	100096a6 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009656:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009658:	0763      	lsls	r3, r4, #29
1000965a:	d529      	bpl.n	100096b0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1000965c:	aa01      	add	r2, sp, #4
1000965e:	2102      	movs	r1, #2
10009660:	30dd      	adds	r0, #221	; 0xdd
10009662:	30ff      	adds	r0, #255	; 0xff
10009664:	4b1e      	ldr	r3, [pc, #120]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
10009666:	4798      	blx	r3
10009668:	2800      	cmp	r0, #0
1000966a:	d11f      	bne.n	100096ac <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
1000966c:	466b      	mov	r3, sp
1000966e:	1d9a      	adds	r2, r3, #6
10009670:	2102      	movs	r1, #2
10009672:	302d      	adds	r0, #45	; 0x2d
10009674:	30ff      	adds	r0, #255	; 0xff
10009676:	4b1a      	ldr	r3, [pc, #104]	; (100096e0 <dmp_set_tap_thresh+0x1a8>)
10009678:	4798      	blx	r3
1000967a:	1e43      	subs	r3, r0, #1
1000967c:	4198      	sbcs	r0, r3
1000967e:	4240      	negs	r0, r0
10009680:	e016      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
10009682:	2001      	movs	r0, #1
10009684:	4240      	negs	r0, r0
10009686:	e013      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
10009688:	2001      	movs	r0, #1
1000968a:	4240      	negs	r0, r0
1000968c:	e010      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000968e:	2001      	movs	r0, #1
10009690:	4240      	negs	r0, r0
10009692:	e00d      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
10009694:	2001      	movs	r0, #1
10009696:	4240      	negs	r0, r0
10009698:	e00a      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
1000969a:	2001      	movs	r0, #1
1000969c:	4240      	negs	r0, r0
1000969e:	e007      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100096a0:	2001      	movs	r0, #1
100096a2:	4240      	negs	r0, r0
100096a4:	e004      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100096a6:	2001      	movs	r0, #1
100096a8:	4240      	negs	r0, r0
100096aa:	e001      	b.n	100096b0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100096ac:	2001      	movs	r0, #1
100096ae:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100096b0:	b002      	add	sp, #8
100096b2:	bc04      	pop	{r2}
100096b4:	4690      	mov	r8, r2
100096b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096b8:	10013a05 	.word	0x10013a05
100096bc:	43480000 	.word	0x43480000
100096c0:	100130f9 	.word	0x100130f9
100096c4:	100087d1 	.word	0x100087d1
100096c8:	1001348d 	.word	0x1001348d
100096cc:	1001308d 	.word	0x1001308d
100096d0:	46400000 	.word	0x46400000
100096d4:	45c00000 	.word	0x45c00000
100096d8:	45400000 	.word	0x45400000
100096dc:	44c00000 	.word	0x44c00000
100096e0:	10009391 	.word	0x10009391

100096e4 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096e4:	b500      	push	{lr}
100096e6:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096e8:	07c3      	lsls	r3, r0, #31
100096ea:	d403      	bmi.n	100096f4 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100096ec:	2200      	movs	r2, #0
100096ee:	466b      	mov	r3, sp
100096f0:	71da      	strb	r2, [r3, #7]
100096f2:	e002      	b.n	100096fa <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
100096f4:	2230      	movs	r2, #48	; 0x30
100096f6:	466b      	mov	r3, sp
100096f8:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
100096fa:	0783      	lsls	r3, r0, #30
100096fc:	d505      	bpl.n	1000970a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
100096fe:	466b      	mov	r3, sp
10009700:	1dda      	adds	r2, r3, #7
10009702:	79d9      	ldrb	r1, [r3, #7]
10009704:	230c      	movs	r3, #12
10009706:	430b      	orrs	r3, r1
10009708:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
1000970a:	0743      	lsls	r3, r0, #29
1000970c:	d505      	bpl.n	1000971a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
1000970e:	466b      	mov	r3, sp
10009710:	1dda      	adds	r2, r3, #7
10009712:	79d9      	ldrb	r1, [r3, #7]
10009714:	2303      	movs	r3, #3
10009716:	430b      	orrs	r3, r1
10009718:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000971a:	466b      	mov	r3, sp
1000971c:	1dda      	adds	r2, r3, #7
1000971e:	2101      	movs	r1, #1
10009720:	20a4      	movs	r0, #164	; 0xa4
10009722:	0040      	lsls	r0, r0, #1
10009724:	4b01      	ldr	r3, [pc, #4]	; (1000972c <dmp_set_tap_axes+0x48>)
10009726:	4798      	blx	r3
}
10009728:	b003      	add	sp, #12
1000972a:	bd00      	pop	{pc}
1000972c:	10009391 	.word	0x10009391

10009730 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009730:	b500      	push	{lr}
10009732:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009734:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009736:	2800      	cmp	r0, #0
10009738:	d004      	beq.n	10009744 <dmp_set_tap_count+0x14>
1000973a:	1c03      	adds	r3, r0, #0
1000973c:	2804      	cmp	r0, #4
1000973e:	d900      	bls.n	10009742 <dmp_set_tap_count+0x12>
10009740:	2304      	movs	r3, #4
10009742:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009744:	466a      	mov	r2, sp
10009746:	3207      	adds	r2, #7
10009748:	3b01      	subs	r3, #1
1000974a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
1000974c:	2101      	movs	r1, #1
1000974e:	2050      	movs	r0, #80	; 0x50
10009750:	30ff      	adds	r0, #255	; 0xff
10009752:	4b02      	ldr	r3, [pc, #8]	; (1000975c <dmp_set_tap_count+0x2c>)
10009754:	4798      	blx	r3
}
10009756:	b003      	add	sp, #12
10009758:	bd00      	pop	{pc}
1000975a:	46c0      	nop			; (mov r8, r8)
1000975c:	10009391 	.word	0x10009391

10009760 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009760:	b500      	push	{lr}
10009762:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009764:	2105      	movs	r1, #5
10009766:	4b07      	ldr	r3, [pc, #28]	; (10009784 <dmp_set_tap_time+0x24>)
10009768:	4798      	blx	r3
1000976a:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000976c:	aa01      	add	r2, sp, #4
1000976e:	0a03      	lsrs	r3, r0, #8
10009770:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009772:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009774:	2102      	movs	r1, #2
10009776:	20ef      	movs	r0, #239	; 0xef
10009778:	0040      	lsls	r0, r0, #1
1000977a:	4b03      	ldr	r3, [pc, #12]	; (10009788 <dmp_set_tap_time+0x28>)
1000977c:	4798      	blx	r3
}
1000977e:	b003      	add	sp, #12
10009780:	bd00      	pop	{pc}
10009782:	46c0      	nop			; (mov r8, r8)
10009784:	10012c59 	.word	0x10012c59
10009788:	10009391 	.word	0x10009391

1000978c <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
1000978c:	b500      	push	{lr}
1000978e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009790:	2105      	movs	r1, #5
10009792:	4b07      	ldr	r3, [pc, #28]	; (100097b0 <dmp_set_tap_time_multi+0x24>)
10009794:	4798      	blx	r3
10009796:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009798:	aa01      	add	r2, sp, #4
1000979a:	0a03      	lsrs	r3, r0, #8
1000979c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000979e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100097a0:	2102      	movs	r1, #2
100097a2:	20ed      	movs	r0, #237	; 0xed
100097a4:	0040      	lsls	r0, r0, #1
100097a6:	4b03      	ldr	r3, [pc, #12]	; (100097b4 <dmp_set_tap_time_multi+0x28>)
100097a8:	4798      	blx	r3
}
100097aa:	b003      	add	sp, #12
100097ac:	bd00      	pop	{pc}
100097ae:	46c0      	nop			; (mov r8, r8)
100097b0:	10012c59 	.word	0x10012c59
100097b4:	10009391 	.word	0x10009391

100097b8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
100097b8:	b510      	push	{r4, lr}
100097ba:	b082      	sub	sp, #8
100097bc:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
100097be:	21fa      	movs	r1, #250	; 0xfa
100097c0:	0089      	lsls	r1, r1, #2
100097c2:	4b09      	ldr	r3, [pc, #36]	; (100097e8 <dmp_set_shake_reject_thresh+0x30>)
100097c4:	4798      	blx	r3
100097c6:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100097c8:	aa01      	add	r2, sp, #4
100097ca:	1603      	asrs	r3, r0, #24
100097cc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097ce:	1403      	asrs	r3, r0, #16
100097d0:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100097d2:	1203      	asrs	r3, r0, #8
100097d4:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097d6:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100097d8:	2104      	movs	r1, #4
100097da:	20ae      	movs	r0, #174	; 0xae
100097dc:	0040      	lsls	r0, r0, #1
100097de:	4b03      	ldr	r3, [pc, #12]	; (100097ec <dmp_set_shake_reject_thresh+0x34>)
100097e0:	4798      	blx	r3
}
100097e2:	b002      	add	sp, #8
100097e4:	bd10      	pop	{r4, pc}
100097e6:	46c0      	nop			; (mov r8, r8)
100097e8:	10012d6d 	.word	0x10012d6d
100097ec:	10009391 	.word	0x10009391

100097f0 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
100097f0:	b500      	push	{lr}
100097f2:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100097f4:	2105      	movs	r1, #5
100097f6:	4b07      	ldr	r3, [pc, #28]	; (10009814 <dmp_set_shake_reject_time+0x24>)
100097f8:	4798      	blx	r3
100097fa:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100097fc:	aa01      	add	r2, sp, #4
100097fe:	0a03      	lsrs	r3, r0, #8
10009800:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009802:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009804:	2102      	movs	r1, #2
10009806:	20ad      	movs	r0, #173	; 0xad
10009808:	0040      	lsls	r0, r0, #1
1000980a:	4b03      	ldr	r3, [pc, #12]	; (10009818 <dmp_set_shake_reject_time+0x28>)
1000980c:	4798      	blx	r3
}
1000980e:	b003      	add	sp, #12
10009810:	bd00      	pop	{pc}
10009812:	46c0      	nop			; (mov r8, r8)
10009814:	10012c59 	.word	0x10012c59
10009818:	10009391 	.word	0x10009391

1000981c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
1000981c:	b500      	push	{lr}
1000981e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009820:	2105      	movs	r1, #5
10009822:	4b07      	ldr	r3, [pc, #28]	; (10009840 <dmp_set_shake_reject_timeout+0x24>)
10009824:	4798      	blx	r3
10009826:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009828:	aa01      	add	r2, sp, #4
1000982a:	0a03      	lsrs	r3, r0, #8
1000982c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000982e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009830:	2102      	movs	r1, #2
10009832:	20ac      	movs	r0, #172	; 0xac
10009834:	0040      	lsls	r0, r0, #1
10009836:	4b03      	ldr	r3, [pc, #12]	; (10009844 <dmp_set_shake_reject_timeout+0x28>)
10009838:	4798      	blx	r3
}
1000983a:	b003      	add	sp, #12
1000983c:	bd00      	pop	{pc}
1000983e:	46c0      	nop			; (mov r8, r8)
10009840:	10012c59 	.word	0x10012c59
10009844:	10009391 	.word	0x10009391

10009848 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009848:	b500      	push	{lr}
1000984a:	b085      	sub	sp, #20
    if (enable) {
1000984c:	2800      	cmp	r0, #0
1000984e:	d00c      	beq.n	1000986a <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009850:	2209      	movs	r2, #9
10009852:	490d      	ldr	r1, [pc, #52]	; (10009888 <dmp_enable_gyro_cal+0x40>)
10009854:	311c      	adds	r1, #28
10009856:	a801      	add	r0, sp, #4
10009858:	4b0c      	ldr	r3, [pc, #48]	; (1000988c <dmp_enable_gyro_cal+0x44>)
1000985a:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000985c:	aa01      	add	r2, sp, #4
1000985e:	2109      	movs	r1, #9
10009860:	2097      	movs	r0, #151	; 0x97
10009862:	00c0      	lsls	r0, r0, #3
10009864:	4b0a      	ldr	r3, [pc, #40]	; (10009890 <dmp_enable_gyro_cal+0x48>)
10009866:	4798      	blx	r3
10009868:	e00b      	b.n	10009882 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1000986a:	2209      	movs	r2, #9
1000986c:	4906      	ldr	r1, [pc, #24]	; (10009888 <dmp_enable_gyro_cal+0x40>)
1000986e:	3128      	adds	r1, #40	; 0x28
10009870:	a801      	add	r0, sp, #4
10009872:	4b06      	ldr	r3, [pc, #24]	; (1000988c <dmp_enable_gyro_cal+0x44>)
10009874:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009876:	aa01      	add	r2, sp, #4
10009878:	2109      	movs	r1, #9
1000987a:	2097      	movs	r0, #151	; 0x97
1000987c:	00c0      	lsls	r0, r0, #3
1000987e:	4b04      	ldr	r3, [pc, #16]	; (10009890 <dmp_enable_gyro_cal+0x48>)
10009880:	4798      	blx	r3
    }
}
10009882:	b005      	add	sp, #20
10009884:	bd00      	pop	{pc}
10009886:	46c0      	nop			; (mov r8, r8)
10009888:	10016040 	.word	0x10016040
1000988c:	100149cf 	.word	0x100149cf
10009890:	10009391 	.word	0x10009391

10009894 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009894:	b500      	push	{lr}
10009896:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009898:	2800      	cmp	r0, #0
1000989a:	d009      	beq.n	100098b0 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
1000989c:	ab01      	add	r3, sp, #4
1000989e:	22c0      	movs	r2, #192	; 0xc0
100098a0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
100098a2:	3202      	adds	r2, #2
100098a4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
100098a6:	3202      	adds	r2, #2
100098a8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
100098aa:	3202      	adds	r2, #2
100098ac:	70da      	strb	r2, [r3, #3]
100098ae:	e001      	b.n	100098b4 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
100098b0:	4b05      	ldr	r3, [pc, #20]	; (100098c8 <dmp_enable_lp_quat+0x34>)
100098b2:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
100098b4:	aa01      	add	r2, sp, #4
100098b6:	2104      	movs	r1, #4
100098b8:	4804      	ldr	r0, [pc, #16]	; (100098cc <dmp_enable_lp_quat+0x38>)
100098ba:	4b05      	ldr	r3, [pc, #20]	; (100098d0 <dmp_enable_lp_quat+0x3c>)
100098bc:	4798      	blx	r3

    return mpu_reset_fifo();
100098be:	4b05      	ldr	r3, [pc, #20]	; (100098d4 <dmp_enable_lp_quat+0x40>)
100098c0:	4798      	blx	r3
}
100098c2:	b003      	add	sp, #12
100098c4:	bd00      	pop	{pc}
100098c6:	46c0      	nop			; (mov r8, r8)
100098c8:	8b8b8b8b 	.word	0x8b8b8b8b
100098cc:	00000a98 	.word	0x00000a98
100098d0:	10009391 	.word	0x10009391
100098d4:	10008539 	.word	0x10008539

100098d8 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
100098d8:	b500      	push	{lr}
100098da:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100098dc:	2800      	cmp	r0, #0
100098de:	d009      	beq.n	100098f4 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
100098e0:	ab01      	add	r3, sp, #4
100098e2:	2220      	movs	r2, #32
100098e4:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
100098e6:	3208      	adds	r2, #8
100098e8:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
100098ea:	3208      	adds	r2, #8
100098ec:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
100098ee:	3208      	adds	r2, #8
100098f0:	70da      	strb	r2, [r3, #3]
100098f2:	e001      	b.n	100098f8 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
100098f4:	4b05      	ldr	r3, [pc, #20]	; (1000990c <dmp_enable_6x_lp_quat+0x34>)
100098f6:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
100098f8:	aa01      	add	r2, sp, #4
100098fa:	2104      	movs	r1, #4
100098fc:	4804      	ldr	r0, [pc, #16]	; (10009910 <dmp_enable_6x_lp_quat+0x38>)
100098fe:	4b05      	ldr	r3, [pc, #20]	; (10009914 <dmp_enable_6x_lp_quat+0x3c>)
10009900:	4798      	blx	r3

    return mpu_reset_fifo();
10009902:	4b05      	ldr	r3, [pc, #20]	; (10009918 <dmp_enable_6x_lp_quat+0x40>)
10009904:	4798      	blx	r3
}
10009906:	b003      	add	sp, #12
10009908:	bd00      	pop	{pc}
1000990a:	46c0      	nop			; (mov r8, r8)
1000990c:	a3a3a3a3 	.word	0xa3a3a3a3
10009910:	00000a9e 	.word	0x00000a9e
10009914:	10009391 	.word	0x10009391
10009918:	10008539 	.word	0x10008539

1000991c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000991c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000991e:	b085      	sub	sp, #20
10009920:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009922:	ad01      	add	r5, sp, #4
10009924:	2302      	movs	r3, #2
10009926:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009928:	33c8      	adds	r3, #200	; 0xc8
1000992a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000992c:	3319      	adds	r3, #25
1000992e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009930:	3bda      	subs	r3, #218	; 0xda
10009932:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009934:	002a      	movs	r2, r5
10009936:	2104      	movs	r1, #4
10009938:	2068      	movs	r0, #104	; 0x68
1000993a:	4b6a      	ldr	r3, [pc, #424]	; (10009ae4 <dmp_enable_feature+0x1c8>)
1000993c:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000993e:	23a3      	movs	r3, #163	; 0xa3
10009940:	702b      	strb	r3, [r5, #0]
10009942:	2740      	movs	r7, #64	; 0x40
10009944:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009946:	d007      	beq.n	10009958 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009948:	ab01      	add	r3, sp, #4
1000994a:	22c0      	movs	r2, #192	; 0xc0
1000994c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
1000994e:	3208      	adds	r2, #8
10009950:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009952:	3a06      	subs	r2, #6
10009954:	70da      	strb	r2, [r3, #3]
10009956:	e004      	b.n	10009962 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009958:	ab01      	add	r3, sp, #4
1000995a:	22a3      	movs	r2, #163	; 0xa3
1000995c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
1000995e:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009960:	70da      	strb	r2, [r3, #3]
10009962:	25c0      	movs	r5, #192	; 0xc0
10009964:	006d      	lsls	r5, r5, #1
10009966:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009968:	d007      	beq.n	1000997a <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
1000996a:	ab01      	add	r3, sp, #4
1000996c:	22c4      	movs	r2, #196	; 0xc4
1000996e:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009970:	3208      	adds	r2, #8
10009972:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009974:	3a06      	subs	r2, #6
10009976:	719a      	strb	r2, [r3, #6]
10009978:	e004      	b.n	10009984 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
1000997a:	ab01      	add	r3, sp, #4
1000997c:	22a3      	movs	r2, #163	; 0xa3
1000997e:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009980:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009982:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009984:	aa01      	add	r2, sp, #4
10009986:	23a3      	movs	r3, #163	; 0xa3
10009988:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
1000998a:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
1000998c:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000998e:	210a      	movs	r1, #10
10009990:	4855      	ldr	r0, [pc, #340]	; (10009ae8 <dmp_enable_feature+0x1cc>)
10009992:	4b54      	ldr	r3, [pc, #336]	; (10009ae4 <dmp_enable_feature+0x1c8>)
10009994:	4798      	blx	r3
10009996:	2603      	movs	r6, #3
10009998:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000999a:	d003      	beq.n	100099a4 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
1000999c:	2220      	movs	r2, #32
1000999e:	ab01      	add	r3, sp, #4
100099a0:	701a      	strb	r2, [r3, #0]
100099a2:	e002      	b.n	100099aa <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
100099a4:	22d8      	movs	r2, #216	; 0xd8
100099a6:	ab01      	add	r3, sp, #4
100099a8:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
100099aa:	aa01      	add	r2, sp, #4
100099ac:	2101      	movs	r1, #1
100099ae:	484f      	ldr	r0, [pc, #316]	; (10009aec <dmp_enable_feature+0x1d0>)
100099b0:	4b4c      	ldr	r3, [pc, #304]	; (10009ae4 <dmp_enable_feature+0x1c8>)
100099b2:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
100099b4:	06a3      	lsls	r3, r4, #26
100099b6:	d503      	bpl.n	100099c0 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
100099b8:	2001      	movs	r0, #1
100099ba:	4b4d      	ldr	r3, [pc, #308]	; (10009af0 <dmp_enable_feature+0x1d4>)
100099bc:	4798      	blx	r3
100099be:	e002      	b.n	100099c6 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
100099c0:	2000      	movs	r0, #0
100099c2:	4b4b      	ldr	r3, [pc, #300]	; (10009af0 <dmp_enable_feature+0x1d4>)
100099c4:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100099c6:	2d00      	cmp	r5, #0
100099c8:	d019      	beq.n	100099fe <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
100099ca:	05e3      	lsls	r3, r4, #23
100099cc:	d509      	bpl.n	100099e2 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
100099ce:	ab01      	add	r3, sp, #4
100099d0:	22b2      	movs	r2, #178	; 0xb2
100099d2:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
100099d4:	3a27      	subs	r2, #39	; 0x27
100099d6:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
100099d8:	322b      	adds	r2, #43	; 0x2b
100099da:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
100099dc:	3a1b      	subs	r2, #27
100099de:	70da      	strb	r2, [r3, #3]
100099e0:	e008      	b.n	100099f4 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
100099e2:	ab01      	add	r3, sp, #4
100099e4:	22b0      	movs	r2, #176	; 0xb0
100099e6:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
100099e8:	3a30      	subs	r2, #48	; 0x30
100099ea:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
100099ec:	3234      	adds	r2, #52	; 0x34
100099ee:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
100099f0:	3a24      	subs	r2, #36	; 0x24
100099f2:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
100099f4:	aa01      	add	r2, sp, #4
100099f6:	2104      	movs	r1, #4
100099f8:	483e      	ldr	r0, [pc, #248]	; (10009af4 <dmp_enable_feature+0x1d8>)
100099fa:	4b3a      	ldr	r3, [pc, #232]	; (10009ae4 <dmp_enable_feature+0x1c8>)
100099fc:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
100099fe:	07e3      	lsls	r3, r4, #31
10009a00:	d523      	bpl.n	10009a4a <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009a02:	aa01      	add	r2, sp, #4
10009a04:	23f8      	movs	r3, #248	; 0xf8
10009a06:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a08:	2101      	movs	r1, #1
10009a0a:	208b      	movs	r0, #139	; 0x8b
10009a0c:	0100      	lsls	r0, r0, #4
10009a0e:	4b35      	ldr	r3, [pc, #212]	; (10009ae4 <dmp_enable_feature+0x1c8>)
10009a10:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009a12:	21fa      	movs	r1, #250	; 0xfa
10009a14:	2007      	movs	r0, #7
10009a16:	4b38      	ldr	r3, [pc, #224]	; (10009af8 <dmp_enable_feature+0x1dc>)
10009a18:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009a1a:	2007      	movs	r0, #7
10009a1c:	4b37      	ldr	r3, [pc, #220]	; (10009afc <dmp_enable_feature+0x1e0>)
10009a1e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009a20:	2001      	movs	r0, #1
10009a22:	4b37      	ldr	r3, [pc, #220]	; (10009b00 <dmp_enable_feature+0x1e4>)
10009a24:	4798      	blx	r3
        dmp_set_tap_time(100);
10009a26:	2064      	movs	r0, #100	; 0x64
10009a28:	4b36      	ldr	r3, [pc, #216]	; (10009b04 <dmp_enable_feature+0x1e8>)
10009a2a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009a2c:	20fa      	movs	r0, #250	; 0xfa
10009a2e:	0040      	lsls	r0, r0, #1
10009a30:	4b35      	ldr	r3, [pc, #212]	; (10009b08 <dmp_enable_feature+0x1ec>)
10009a32:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009a34:	21c8      	movs	r1, #200	; 0xc8
10009a36:	4835      	ldr	r0, [pc, #212]	; (10009b0c <dmp_enable_feature+0x1f0>)
10009a38:	4b35      	ldr	r3, [pc, #212]	; (10009b10 <dmp_enable_feature+0x1f4>)
10009a3a:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009a3c:	2028      	movs	r0, #40	; 0x28
10009a3e:	4b35      	ldr	r3, [pc, #212]	; (10009b14 <dmp_enable_feature+0x1f8>)
10009a40:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009a42:	200a      	movs	r0, #10
10009a44:	4b34      	ldr	r3, [pc, #208]	; (10009b18 <dmp_enable_feature+0x1fc>)
10009a46:	4798      	blx	r3
10009a48:	e007      	b.n	10009a5a <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009a4a:	aa01      	add	r2, sp, #4
10009a4c:	23d8      	movs	r3, #216	; 0xd8
10009a4e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a50:	2101      	movs	r1, #1
10009a52:	208b      	movs	r0, #139	; 0x8b
10009a54:	0100      	lsls	r0, r0, #4
10009a56:	4b23      	ldr	r3, [pc, #140]	; (10009ae4 <dmp_enable_feature+0x1c8>)
10009a58:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009a5a:	07a3      	lsls	r3, r4, #30
10009a5c:	d503      	bpl.n	10009a66 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009a5e:	22d9      	movs	r2, #217	; 0xd9
10009a60:	ab01      	add	r3, sp, #4
10009a62:	701a      	strb	r2, [r3, #0]
10009a64:	e002      	b.n	10009a6c <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009a66:	22d8      	movs	r2, #216	; 0xd8
10009a68:	ab01      	add	r3, sp, #4
10009a6a:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009a6c:	aa01      	add	r2, sp, #4
10009a6e:	2101      	movs	r1, #1
10009a70:	482a      	ldr	r0, [pc, #168]	; (10009b1c <dmp_enable_feature+0x200>)
10009a72:	4b1c      	ldr	r3, [pc, #112]	; (10009ae4 <dmp_enable_feature+0x1c8>)
10009a74:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009a76:	0763      	lsls	r3, r4, #29
10009a78:	d503      	bpl.n	10009a82 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009a7a:	2001      	movs	r0, #1
10009a7c:	4b28      	ldr	r3, [pc, #160]	; (10009b20 <dmp_enable_feature+0x204>)
10009a7e:	4798      	blx	r3
10009a80:	e002      	b.n	10009a88 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009a82:	2000      	movs	r0, #0
10009a84:	4b26      	ldr	r3, [pc, #152]	; (10009b20 <dmp_enable_feature+0x204>)
10009a86:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009a88:	06e3      	lsls	r3, r4, #27
10009a8a:	d503      	bpl.n	10009a94 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009a8c:	2001      	movs	r0, #1
10009a8e:	4b25      	ldr	r3, [pc, #148]	; (10009b24 <dmp_enable_feature+0x208>)
10009a90:	4798      	blx	r3
10009a92:	e002      	b.n	10009a9a <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009a94:	2000      	movs	r0, #0
10009a96:	4b23      	ldr	r3, [pc, #140]	; (10009b24 <dmp_enable_feature+0x208>)
10009a98:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009a9a:	2308      	movs	r3, #8
10009a9c:	4323      	orrs	r3, r4
10009a9e:	4a22      	ldr	r2, [pc, #136]	; (10009b28 <dmp_enable_feature+0x20c>)
10009aa0:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009aa2:	4b22      	ldr	r3, [pc, #136]	; (10009b2c <dmp_enable_feature+0x210>)
10009aa4:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009aa6:	2f00      	cmp	r7, #0
10009aa8:	d103      	bne.n	10009ab2 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009aaa:	2200      	movs	r2, #0
10009aac:	4b1e      	ldr	r3, [pc, #120]	; (10009b28 <dmp_enable_feature+0x20c>)
10009aae:	739a      	strb	r2, [r3, #14]
10009ab0:	e002      	b.n	10009ab8 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009ab2:	2206      	movs	r2, #6
10009ab4:	4b1c      	ldr	r3, [pc, #112]	; (10009b28 <dmp_enable_feature+0x20c>)
10009ab6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009ab8:	2d00      	cmp	r5, #0
10009aba:	d003      	beq.n	10009ac4 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009abc:	4a1a      	ldr	r2, [pc, #104]	; (10009b28 <dmp_enable_feature+0x20c>)
10009abe:	7b93      	ldrb	r3, [r2, #14]
10009ac0:	3306      	adds	r3, #6
10009ac2:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009ac4:	2314      	movs	r3, #20
10009ac6:	4223      	tst	r3, r4
10009ac8:	d003      	beq.n	10009ad2 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009aca:	4a17      	ldr	r2, [pc, #92]	; (10009b28 <dmp_enable_feature+0x20c>)
10009acc:	7b93      	ldrb	r3, [r2, #14]
10009ace:	3310      	adds	r3, #16
10009ad0:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009ad2:	2e00      	cmp	r6, #0
10009ad4:	d003      	beq.n	10009ade <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009ad6:	4a14      	ldr	r2, [pc, #80]	; (10009b28 <dmp_enable_feature+0x20c>)
10009ad8:	7b93      	ldrb	r3, [r2, #14]
10009ada:	3304      	adds	r3, #4
10009adc:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009ade:	2000      	movs	r0, #0
10009ae0:	b005      	add	sp, #20
10009ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ae4:	10009391 	.word	0x10009391
10009ae8:	00000aa7 	.word	0x00000aa7
10009aec:	00000ab6 	.word	0x00000ab6
10009af0:	10009849 	.word	0x10009849
10009af4:	00000aa2 	.word	0x00000aa2
10009af8:	10009539 	.word	0x10009539
10009afc:	100096e5 	.word	0x100096e5
10009b00:	10009731 	.word	0x10009731
10009b04:	10009761 	.word	0x10009761
10009b08:	1000978d 	.word	0x1000978d
10009b0c:	02cae309 	.word	0x02cae309
10009b10:	100097b9 	.word	0x100097b9
10009b14:	100097f1 	.word	0x100097f1
10009b18:	1000981d 	.word	0x1000981d
10009b1c:	0000073d 	.word	0x0000073d
10009b20:	10009895 	.word	0x10009895
10009b24:	100098d9 	.word	0x100098d9
10009b28:	10017d7c 	.word	0x10017d7c
10009b2c:	10008539 	.word	0x10008539

10009b30 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009b30:	b510      	push	{r4, lr}
10009b32:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009b34:	4809      	ldr	r0, [pc, #36]	; (10009b5c <sms_ble_pair_request_fn+0x2c>)
10009b36:	4b0a      	ldr	r3, [pc, #40]	; (10009b60 <sms_ble_pair_request_fn+0x30>)
10009b38:	4798      	blx	r3
10009b3a:	4b0a      	ldr	r3, [pc, #40]	; (10009b64 <sms_ble_pair_request_fn+0x34>)
10009b3c:	781a      	ldrb	r2, [r3, #0]
10009b3e:	b2d2      	uxtb	r2, r2
10009b40:	4b09      	ldr	r3, [pc, #36]	; (10009b68 <sms_ble_pair_request_fn+0x38>)
10009b42:	781b      	ldrb	r3, [r3, #0]
10009b44:	b2db      	uxtb	r3, r3
10009b46:	4909      	ldr	r1, [pc, #36]	; (10009b6c <sms_ble_pair_request_fn+0x3c>)
10009b48:	7808      	ldrb	r0, [r1, #0]
10009b4a:	4909      	ldr	r1, [pc, #36]	; (10009b70 <sms_ble_pair_request_fn+0x40>)
10009b4c:	7849      	ldrb	r1, [r1, #1]
10009b4e:	9000      	str	r0, [sp, #0]
10009b50:	4808      	ldr	r0, [pc, #32]	; (10009b74 <sms_ble_pair_request_fn+0x44>)
10009b52:	4c09      	ldr	r4, [pc, #36]	; (10009b78 <sms_ble_pair_request_fn+0x48>)
10009b54:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009b56:	2000      	movs	r0, #0
10009b58:	b002      	add	sp, #8
10009b5a:	bd10      	pop	{r4, pc}
10009b5c:	10015df4 	.word	0x10015df4
10009b60:	10014c49 	.word	0x10014c49
10009b64:	100199e0 	.word	0x100199e0
10009b68:	10019834 	.word	0x10019834
10009b6c:	100199e1 	.word	0x100199e1
10009b70:	100198d0 	.word	0x100198d0
10009b74:	1001608c 	.word	0x1001608c
10009b78:	10014b29 	.word	0x10014b29

10009b7c <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009b7c:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009b7e:	2001      	movs	r0, #1
10009b80:	4b08      	ldr	r3, [pc, #32]	; (10009ba4 <sms_ble_notification_confirmed_fn+0x28>)
10009b82:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009b84:	2200      	movs	r2, #0
10009b86:	4b08      	ldr	r3, [pc, #32]	; (10009ba8 <sms_ble_notification_confirmed_fn+0x2c>)
10009b88:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009b8a:	3222      	adds	r2, #34	; 0x22
10009b8c:	4b07      	ldr	r3, [pc, #28]	; (10009bac <sms_ble_notification_confirmed_fn+0x30>)
10009b8e:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009b90:	4b07      	ldr	r3, [pc, #28]	; (10009bb0 <sms_ble_notification_confirmed_fn+0x34>)
10009b92:	781b      	ldrb	r3, [r3, #0]
10009b94:	2b00      	cmp	r3, #0
10009b96:	d102      	bne.n	10009b9e <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009b98:	3a21      	subs	r2, #33	; 0x21
10009b9a:	4b06      	ldr	r3, [pc, #24]	; (10009bb4 <sms_ble_notification_confirmed_fn+0x38>)
10009b9c:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009b9e:	2000      	movs	r0, #0
10009ba0:	bd10      	pop	{r4, pc}
10009ba2:	46c0      	nop			; (mov r8, r8)
10009ba4:	1000b25d 	.word	0x1000b25d
10009ba8:	100199e1 	.word	0x100199e1
10009bac:	100199e0 	.word	0x100199e0
10009bb0:	10019834 	.word	0x10019834
10009bb4:	100198c9 	.word	0x100198c9

10009bb8 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009bb8:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009bba:	2001      	movs	r0, #1
10009bbc:	4b08      	ldr	r3, [pc, #32]	; (10009be0 <sms_ble_indication_confirmed_fn+0x28>)
10009bbe:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009bc0:	2200      	movs	r2, #0
10009bc2:	4b08      	ldr	r3, [pc, #32]	; (10009be4 <sms_ble_indication_confirmed_fn+0x2c>)
10009bc4:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009bc6:	3222      	adds	r2, #34	; 0x22
10009bc8:	4b07      	ldr	r3, [pc, #28]	; (10009be8 <sms_ble_indication_confirmed_fn+0x30>)
10009bca:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009bcc:	4b07      	ldr	r3, [pc, #28]	; (10009bec <sms_ble_indication_confirmed_fn+0x34>)
10009bce:	781b      	ldrb	r3, [r3, #0]
10009bd0:	2b00      	cmp	r3, #0
10009bd2:	d102      	bne.n	10009bda <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009bd4:	3a21      	subs	r2, #33	; 0x21
10009bd6:	4b06      	ldr	r3, [pc, #24]	; (10009bf0 <sms_ble_indication_confirmed_fn+0x38>)
10009bd8:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009bda:	2000      	movs	r0, #0
10009bdc:	bd10      	pop	{r4, pc}
10009bde:	46c0      	nop			; (mov r8, r8)
10009be0:	1000b25d 	.word	0x1000b25d
10009be4:	100199e1 	.word	0x100199e1
10009be8:	100199e0 	.word	0x100199e0
10009bec:	10019834 	.word	0x10019834
10009bf0:	100198c9 	.word	0x100198c9

10009bf4 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009bf4:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009bf6:	2202      	movs	r2, #2
10009bf8:	4b02      	ldr	r3, [pc, #8]	; (10009c04 <sms_ble_startup+0x10>)
10009bfa:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009bfc:	2016      	movs	r0, #22
10009bfe:	4b02      	ldr	r3, [pc, #8]	; (10009c08 <sms_ble_startup+0x14>)
10009c00:	4798      	blx	r3
}
10009c02:	bd10      	pop	{r4, pc}
10009c04:	100199e1 	.word	0x100199e1
10009c08:	1000aab9 	.word	0x1000aab9

10009c0c <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009c0c:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009c0e:	482c      	ldr	r0, [pc, #176]	; (10009cc0 <sms_ble_power_down+0xb4>)
10009c10:	4b2c      	ldr	r3, [pc, #176]	; (10009cc4 <sms_ble_power_down+0xb8>)
10009c12:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009c14:	4b2c      	ldr	r3, [pc, #176]	; (10009cc8 <sms_ble_power_down+0xbc>)
10009c16:	781b      	ldrb	r3, [r3, #0]
10009c18:	2b00      	cmp	r3, #0
10009c1a:	d105      	bne.n	10009c28 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009c1c:	2201      	movs	r2, #1
10009c1e:	4b2b      	ldr	r3, [pc, #172]	; (10009ccc <sms_ble_power_down+0xc0>)
10009c20:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009c22:	4b2b      	ldr	r3, [pc, #172]	; (10009cd0 <sms_ble_power_down+0xc4>)
10009c24:	4798      	blx	r3
10009c26:	e049      	b.n	10009cbc <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009c28:	4b27      	ldr	r3, [pc, #156]	; (10009cc8 <sms_ble_power_down+0xbc>)
10009c2a:	781b      	ldrb	r3, [r3, #0]
10009c2c:	b2db      	uxtb	r3, r3
10009c2e:	2b21      	cmp	r3, #33	; 0x21
10009c30:	d030      	beq.n	10009c94 <sms_ble_power_down+0x88>
10009c32:	d802      	bhi.n	10009c3a <sms_ble_power_down+0x2e>
10009c34:	2b20      	cmp	r3, #32
10009c36:	d005      	beq.n	10009c44 <sms_ble_power_down+0x38>
10009c38:	e037      	b.n	10009caa <sms_ble_power_down+0x9e>
10009c3a:	2b22      	cmp	r3, #34	; 0x22
10009c3c:	d017      	beq.n	10009c6e <sms_ble_power_down+0x62>
10009c3e:	2b23      	cmp	r3, #35	; 0x23
10009c40:	d01b      	beq.n	10009c7a <sms_ble_power_down+0x6e>
10009c42:	e032      	b.n	10009caa <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009c44:	4823      	ldr	r0, [pc, #140]	; (10009cd4 <sms_ble_power_down+0xc8>)
10009c46:	4b24      	ldr	r3, [pc, #144]	; (10009cd8 <sms_ble_power_down+0xcc>)
10009c48:	4798      	blx	r3
10009c4a:	4824      	ldr	r0, [pc, #144]	; (10009cdc <sms_ble_power_down+0xd0>)
10009c4c:	4b24      	ldr	r3, [pc, #144]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c4e:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009c50:	4b24      	ldr	r3, [pc, #144]	; (10009ce4 <sms_ble_power_down+0xd8>)
10009c52:	4798      	blx	r3
10009c54:	2800      	cmp	r0, #0
10009c56:	d003      	beq.n	10009c60 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009c58:	4823      	ldr	r0, [pc, #140]	; (10009ce8 <sms_ble_power_down+0xdc>)
10009c5a:	4b21      	ldr	r3, [pc, #132]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c5c:	4798      	blx	r3
10009c5e:	e024      	b.n	10009caa <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009c60:	4822      	ldr	r0, [pc, #136]	; (10009cec <sms_ble_power_down+0xe0>)
10009c62:	4b1f      	ldr	r3, [pc, #124]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c64:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009c66:	2211      	movs	r2, #17
10009c68:	4b17      	ldr	r3, [pc, #92]	; (10009cc8 <sms_ble_power_down+0xbc>)
10009c6a:	701a      	strb	r2, [r3, #0]
10009c6c:	e01d      	b.n	10009caa <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009c6e:	4819      	ldr	r0, [pc, #100]	; (10009cd4 <sms_ble_power_down+0xc8>)
10009c70:	4b19      	ldr	r3, [pc, #100]	; (10009cd8 <sms_ble_power_down+0xcc>)
10009c72:	4798      	blx	r3
10009c74:	481e      	ldr	r0, [pc, #120]	; (10009cf0 <sms_ble_power_down+0xe4>)
10009c76:	4b1a      	ldr	r3, [pc, #104]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c78:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009c7a:	4816      	ldr	r0, [pc, #88]	; (10009cd4 <sms_ble_power_down+0xc8>)
10009c7c:	4b16      	ldr	r3, [pc, #88]	; (10009cd8 <sms_ble_power_down+0xcc>)
10009c7e:	4798      	blx	r3
10009c80:	481c      	ldr	r0, [pc, #112]	; (10009cf4 <sms_ble_power_down+0xe8>)
10009c82:	4b17      	ldr	r3, [pc, #92]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c84:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009c86:	2100      	movs	r1, #0
10009c88:	2328      	movs	r3, #40	; 0x28
10009c8a:	4a1b      	ldr	r2, [pc, #108]	; (10009cf8 <sms_ble_power_down+0xec>)
10009c8c:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009c8e:	2000      	movs	r0, #0
10009c90:	4b1a      	ldr	r3, [pc, #104]	; (10009cfc <sms_ble_power_down+0xf0>)
10009c92:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009c94:	480f      	ldr	r0, [pc, #60]	; (10009cd4 <sms_ble_power_down+0xc8>)
10009c96:	4b10      	ldr	r3, [pc, #64]	; (10009cd8 <sms_ble_power_down+0xcc>)
10009c98:	4798      	blx	r3
10009c9a:	4819      	ldr	r0, [pc, #100]	; (10009d00 <sms_ble_power_down+0xf4>)
10009c9c:	4b10      	ldr	r3, [pc, #64]	; (10009ce0 <sms_ble_power_down+0xd4>)
10009c9e:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009ca0:	4b18      	ldr	r3, [pc, #96]	; (10009d04 <sms_ble_power_down+0xf8>)
10009ca2:	8818      	ldrh	r0, [r3, #0]
10009ca4:	2113      	movs	r1, #19
10009ca6:	4b18      	ldr	r3, [pc, #96]	; (10009d08 <sms_ble_power_down+0xfc>)
10009ca8:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009caa:	2211      	movs	r2, #17
10009cac:	4b06      	ldr	r3, [pc, #24]	; (10009cc8 <sms_ble_power_down+0xbc>)
10009cae:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009cb0:	3a0e      	subs	r2, #14
10009cb2:	4b16      	ldr	r3, [pc, #88]	; (10009d0c <sms_ble_power_down+0x100>)
10009cb4:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009cb6:	2016      	movs	r0, #22
10009cb8:	4b15      	ldr	r3, [pc, #84]	; (10009d10 <sms_ble_power_down+0x104>)
10009cba:	4798      	blx	r3
    }
}
10009cbc:	bd10      	pop	{r4, pc}
10009cbe:	46c0      	nop			; (mov r8, r8)
10009cc0:	100160dc 	.word	0x100160dc
10009cc4:	1000a68d 	.word	0x1000a68d
10009cc8:	100199e0 	.word	0x100199e0
10009ccc:	100198c9 	.word	0x100198c9
10009cd0:	1000f245 	.word	0x1000f245
10009cd4:	10015df4 	.word	0x10015df4
10009cd8:	10014c49 	.word	0x10014c49
10009cdc:	100160f4 	.word	0x100160f4
10009ce0:	10014b29 	.word	0x10014b29
10009ce4:	10010561 	.word	0x10010561
10009ce8:	10016148 	.word	0x10016148
10009cec:	10016154 	.word	0x10016154
10009cf0:	1001615c 	.word	0x1001615c
10009cf4:	100161b4 	.word	0x100161b4
10009cf8:	10019944 	.word	0x10019944
10009cfc:	1000af51 	.word	0x1000af51
10009d00:	100161e0 	.word	0x100161e0
10009d04:	100198ca 	.word	0x100198ca
10009d08:	1001058d 	.word	0x1001058d
10009d0c:	100199e1 	.word	0x100199e1
10009d10:	1000aab9 	.word	0x1000aab9

10009d14 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009d14:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009d16:	2211      	movs	r2, #17
10009d18:	4b05      	ldr	r3, [pc, #20]	; (10009d30 <sms_ble_adv_report_fn+0x1c>)
10009d1a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009d1c:	4805      	ldr	r0, [pc, #20]	; (10009d34 <sms_ble_adv_report_fn+0x20>)
10009d1e:	4b06      	ldr	r3, [pc, #24]	; (10009d38 <sms_ble_adv_report_fn+0x24>)
10009d20:	4798      	blx	r3
10009d22:	4806      	ldr	r0, [pc, #24]	; (10009d3c <sms_ble_adv_report_fn+0x28>)
10009d24:	4b06      	ldr	r3, [pc, #24]	; (10009d40 <sms_ble_adv_report_fn+0x2c>)
10009d26:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009d28:	4b06      	ldr	r3, [pc, #24]	; (10009d44 <sms_ble_adv_report_fn+0x30>)
10009d2a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009d2c:	2000      	movs	r0, #0
10009d2e:	bd10      	pop	{r4, pc}
10009d30:	100199e0 	.word	0x100199e0
10009d34:	10015df4 	.word	0x10015df4
10009d38:	10014c49 	.word	0x10014c49
10009d3c:	10016218 	.word	0x10016218
10009d40:	10014b29 	.word	0x10014b29
10009d44:	10009c0d 	.word	0x10009c0d

10009d48 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009d48:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009d4a:	4b0a      	ldr	r3, [pc, #40]	; (10009d74 <sms_ble_connected_fn+0x2c>)
10009d4c:	781b      	ldrb	r3, [r3, #0]
10009d4e:	2b20      	cmp	r3, #32
10009d50:	d10c      	bne.n	10009d6c <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009d52:	8902      	ldrh	r2, [r0, #8]
10009d54:	4b08      	ldr	r3, [pc, #32]	; (10009d78 <sms_ble_connected_fn+0x30>)
10009d56:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009d58:	2221      	movs	r2, #33	; 0x21
10009d5a:	4b06      	ldr	r3, [pc, #24]	; (10009d74 <sms_ble_connected_fn+0x2c>)
10009d5c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009d5e:	4807      	ldr	r0, [pc, #28]	; (10009d7c <sms_ble_connected_fn+0x34>)
10009d60:	4b07      	ldr	r3, [pc, #28]	; (10009d80 <sms_ble_connected_fn+0x38>)
10009d62:	4798      	blx	r3
10009d64:	4807      	ldr	r0, [pc, #28]	; (10009d84 <sms_ble_connected_fn+0x3c>)
10009d66:	4b08      	ldr	r3, [pc, #32]	; (10009d88 <sms_ble_connected_fn+0x40>)
10009d68:	4798      	blx	r3
10009d6a:	e001      	b.n	10009d70 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009d6c:	4b07      	ldr	r3, [pc, #28]	; (10009d8c <sms_ble_connected_fn+0x44>)
10009d6e:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009d70:	2000      	movs	r0, #0
10009d72:	bd10      	pop	{r4, pc}
10009d74:	100199e0 	.word	0x100199e0
10009d78:	100199d6 	.word	0x100199d6
10009d7c:	10015df4 	.word	0x10015df4
10009d80:	10014c49 	.word	0x10014c49
10009d84:	1001624c 	.word	0x1001624c
10009d88:	10014b29 	.word	0x10014b29
10009d8c:	10009c0d 	.word	0x10009c0d

10009d90 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009d90:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009d92:	4b09      	ldr	r3, [pc, #36]	; (10009db8 <sms_ble_paired_fn+0x28>)
10009d94:	781b      	ldrb	r3, [r3, #0]
10009d96:	2b21      	cmp	r3, #33	; 0x21
10009d98:	d10a      	bne.n	10009db0 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
10009d9a:	2222      	movs	r2, #34	; 0x22
10009d9c:	4b06      	ldr	r3, [pc, #24]	; (10009db8 <sms_ble_paired_fn+0x28>)
10009d9e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009da0:	4806      	ldr	r0, [pc, #24]	; (10009dbc <sms_ble_paired_fn+0x2c>)
10009da2:	4b07      	ldr	r3, [pc, #28]	; (10009dc0 <sms_ble_paired_fn+0x30>)
10009da4:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009da6:	2101      	movs	r1, #1
10009da8:	2001      	movs	r0, #1
10009daa:	4b06      	ldr	r3, [pc, #24]	; (10009dc4 <sms_ble_paired_fn+0x34>)
10009dac:	4798      	blx	r3
10009dae:	e001      	b.n	10009db4 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009db0:	4b05      	ldr	r3, [pc, #20]	; (10009dc8 <sms_ble_paired_fn+0x38>)
10009db2:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009db4:	2000      	movs	r0, #0
10009db6:	bd10      	pop	{r4, pc}
10009db8:	100199e0 	.word	0x100199e0
10009dbc:	1001627c 	.word	0x1001627c
10009dc0:	1000a68d 	.word	0x1000a68d
10009dc4:	1000afdd 	.word	0x1000afdd
10009dc8:	10009c0d 	.word	0x10009c0d

10009dcc <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009dcc:	b510      	push	{r4, lr}
10009dce:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009dd0:	2220      	movs	r2, #32
10009dd2:	4b17      	ldr	r3, [pc, #92]	; (10009e30 <sms_ble_advertise+0x64>)
10009dd4:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009dd6:	4b17      	ldr	r3, [pc, #92]	; (10009e34 <sms_ble_advertise+0x68>)
10009dd8:	4798      	blx	r3
10009dda:	1e04      	subs	r4, r0, #0
10009ddc:	d007      	beq.n	10009dee <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009dde:	4816      	ldr	r0, [pc, #88]	; (10009e38 <sms_ble_advertise+0x6c>)
10009de0:	4b16      	ldr	r3, [pc, #88]	; (10009e3c <sms_ble_advertise+0x70>)
10009de2:	4798      	blx	r3
10009de4:	4816      	ldr	r0, [pc, #88]	; (10009e40 <sms_ble_advertise+0x74>)
10009de6:	4b17      	ldr	r3, [pc, #92]	; (10009e44 <sms_ble_advertise+0x78>)
10009de8:	4798      	blx	r3
        return status;
10009dea:	0020      	movs	r0, r4
10009dec:	e01e      	b.n	10009e2c <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009dee:	2300      	movs	r3, #0
10009df0:	9302      	str	r3, [sp, #8]
10009df2:	4b15      	ldr	r3, [pc, #84]	; (10009e48 <sms_ble_advertise+0x7c>)
10009df4:	9301      	str	r3, [sp, #4]
10009df6:	23c8      	movs	r3, #200	; 0xc8
10009df8:	00db      	lsls	r3, r3, #3
10009dfa:	9300      	str	r3, [sp, #0]
10009dfc:	2300      	movs	r3, #0
10009dfe:	2200      	movs	r2, #0
10009e00:	2101      	movs	r1, #1
10009e02:	2000      	movs	r0, #0
10009e04:	4c11      	ldr	r4, [pc, #68]	; (10009e4c <sms_ble_advertise+0x80>)
10009e06:	47a0      	blx	r4
10009e08:	1e04      	subs	r4, r0, #0
10009e0a:	d107      	bne.n	10009e1c <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009e0c:	480a      	ldr	r0, [pc, #40]	; (10009e38 <sms_ble_advertise+0x6c>)
10009e0e:	4b0b      	ldr	r3, [pc, #44]	; (10009e3c <sms_ble_advertise+0x70>)
10009e10:	4798      	blx	r3
10009e12:	480f      	ldr	r0, [pc, #60]	; (10009e50 <sms_ble_advertise+0x84>)
10009e14:	4b0b      	ldr	r3, [pc, #44]	; (10009e44 <sms_ble_advertise+0x78>)
10009e16:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10009e18:	2000      	movs	r0, #0
10009e1a:	e007      	b.n	10009e2c <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009e1c:	4806      	ldr	r0, [pc, #24]	; (10009e38 <sms_ble_advertise+0x6c>)
10009e1e:	4b07      	ldr	r3, [pc, #28]	; (10009e3c <sms_ble_advertise+0x70>)
10009e20:	4798      	blx	r3
10009e22:	0021      	movs	r1, r4
10009e24:	480b      	ldr	r0, [pc, #44]	; (10009e54 <sms_ble_advertise+0x88>)
10009e26:	4b07      	ldr	r3, [pc, #28]	; (10009e44 <sms_ble_advertise+0x78>)
10009e28:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
10009e2a:	20e2      	movs	r0, #226	; 0xe2
}
10009e2c:	b004      	add	sp, #16
10009e2e:	bd10      	pop	{r4, pc}
10009e30:	100199e0 	.word	0x100199e0
10009e34:	1000e88d 	.word	0x1000e88d
10009e38:	10015df4 	.word	0x10015df4
10009e3c:	10014c49 	.word	0x10014c49
10009e40:	10016290 	.word	0x10016290
10009e44:	10014b29 	.word	0x10014b29
10009e48:	0000028f 	.word	0x0000028f
10009e4c:	10010425 	.word	0x10010425
10009e50:	100162c4 	.word	0x100162c4
10009e54:	100162f4 	.word	0x100162f4

10009e58 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009e58:	b530      	push	{r4, r5, lr}
10009e5a:	b083      	sub	sp, #12
10009e5c:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
10009e5e:	4b1c      	ldr	r3, [pc, #112]	; (10009ed0 <sms_ble_disconnected_fn+0x78>)
10009e60:	781b      	ldrb	r3, [r3, #0]
10009e62:	2b22      	cmp	r3, #34	; 0x22
10009e64:	d10a      	bne.n	10009e7c <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
10009e66:	2100      	movs	r1, #0
10009e68:	3306      	adds	r3, #6
10009e6a:	4a1a      	ldr	r2, [pc, #104]	; (10009ed4 <sms_ble_disconnected_fn+0x7c>)
10009e6c:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10009e6e:	2000      	movs	r0, #0
10009e70:	4b19      	ldr	r3, [pc, #100]	; (10009ed8 <sms_ble_disconnected_fn+0x80>)
10009e72:	4798      	blx	r3
        sms_sensors_switch(false, false);
10009e74:	2100      	movs	r1, #0
10009e76:	2000      	movs	r0, #0
10009e78:	4b18      	ldr	r3, [pc, #96]	; (10009edc <sms_ble_disconnected_fn+0x84>)
10009e7a:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
10009e7c:	4c14      	ldr	r4, [pc, #80]	; (10009ed0 <sms_ble_disconnected_fn+0x78>)
10009e7e:	2311      	movs	r3, #17
10009e80:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e82:	4817      	ldr	r0, [pc, #92]	; (10009ee0 <sms_ble_disconnected_fn+0x88>)
10009e84:	4b17      	ldr	r3, [pc, #92]	; (10009ee4 <sms_ble_disconnected_fn+0x8c>)
10009e86:	4798      	blx	r3
10009e88:	7822      	ldrb	r2, [r4, #0]
10009e8a:	b2d2      	uxtb	r2, r2
10009e8c:	4b16      	ldr	r3, [pc, #88]	; (10009ee8 <sms_ble_disconnected_fn+0x90>)
10009e8e:	781b      	ldrb	r3, [r3, #0]
10009e90:	b2db      	uxtb	r3, r3
10009e92:	4916      	ldr	r1, [pc, #88]	; (10009eec <sms_ble_disconnected_fn+0x94>)
10009e94:	7808      	ldrb	r0, [r1, #0]
10009e96:	4916      	ldr	r1, [pc, #88]	; (10009ef0 <sms_ble_disconnected_fn+0x98>)
10009e98:	7849      	ldrb	r1, [r1, #1]
10009e9a:	9000      	str	r0, [sp, #0]
10009e9c:	4815      	ldr	r0, [pc, #84]	; (10009ef4 <sms_ble_disconnected_fn+0x9c>)
10009e9e:	4c16      	ldr	r4, [pc, #88]	; (10009ef8 <sms_ble_disconnected_fn+0xa0>)
10009ea0:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009ea2:	78ab      	ldrb	r3, [r5, #2]
10009ea4:	2b1a      	cmp	r3, #26
10009ea6:	d00b      	beq.n	10009ec0 <sms_ble_disconnected_fn+0x68>
10009ea8:	b2da      	uxtb	r2, r3
10009eaa:	2a1a      	cmp	r2, #26
10009eac:	d804      	bhi.n	10009eb8 <sms_ble_disconnected_fn+0x60>
10009eae:	2b05      	cmp	r3, #5
10009eb0:	d006      	beq.n	10009ec0 <sms_ble_disconnected_fn+0x68>
10009eb2:	2b08      	cmp	r3, #8
10009eb4:	d107      	bne.n	10009ec6 <sms_ble_disconnected_fn+0x6e>
10009eb6:	e003      	b.n	10009ec0 <sms_ble_disconnected_fn+0x68>
10009eb8:	2b29      	cmp	r3, #41	; 0x29
10009eba:	d001      	beq.n	10009ec0 <sms_ble_disconnected_fn+0x68>
10009ebc:	2b3b      	cmp	r3, #59	; 0x3b
10009ebe:	d102      	bne.n	10009ec6 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009ec0:	4b0e      	ldr	r3, [pc, #56]	; (10009efc <sms_ble_disconnected_fn+0xa4>)
10009ec2:	4798      	blx	r3
        break;
10009ec4:	e001      	b.n	10009eca <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009ec6:	4b0e      	ldr	r3, [pc, #56]	; (10009f00 <sms_ble_disconnected_fn+0xa8>)
10009ec8:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009eca:	2000      	movs	r0, #0
10009ecc:	b003      	add	sp, #12
10009ece:	bd30      	pop	{r4, r5, pc}
10009ed0:	100199e0 	.word	0x100199e0
10009ed4:	10019944 	.word	0x10019944
10009ed8:	1000af51 	.word	0x1000af51
10009edc:	1000afdd 	.word	0x1000afdd
10009ee0:	10015df4 	.word	0x10015df4
10009ee4:	10014c49 	.word	0x10014c49
10009ee8:	10019834 	.word	0x10019834
10009eec:	100199e1 	.word	0x100199e1
10009ef0:	100198d0 	.word	0x100198d0
10009ef4:	10016338 	.word	0x10016338
10009ef8:	10014b29 	.word	0x10014b29
10009efc:	10009dcd 	.word	0x10009dcd
10009f00:	10009c0d 	.word	0x10009c0d

10009f04 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009f04:	b570      	push	{r4, r5, r6, lr}
10009f06:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
10009f08:	2223      	movs	r2, #35	; 0x23
10009f0a:	4b5e      	ldr	r3, [pc, #376]	; (1000a084 <sms_ble_send_characteristic+0x180>)
10009f0c:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
10009f0e:	4a5e      	ldr	r2, [pc, #376]	; (1000a088 <sms_ble_send_characteristic+0x184>)
10009f10:	8813      	ldrh	r3, [r2, #0]
10009f12:	3301      	adds	r3, #1
10009f14:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
10009f16:	2801      	cmp	r0, #1
10009f18:	d015      	beq.n	10009f46 <sms_ble_send_characteristic+0x42>
10009f1a:	2800      	cmp	r0, #0
10009f1c:	d004      	beq.n	10009f28 <sms_ble_send_characteristic+0x24>
10009f1e:	2802      	cmp	r0, #2
10009f20:	d022      	beq.n	10009f68 <sms_ble_send_characteristic+0x64>
10009f22:	2803      	cmp	r0, #3
10009f24:	d036      	beq.n	10009f94 <sms_ble_send_characteristic+0x90>
10009f26:	e08e      	b.n	1000a046 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
10009f28:	4b58      	ldr	r3, [pc, #352]	; (1000a08c <sms_ble_send_characteristic+0x188>)
10009f2a:	78da      	ldrb	r2, [r3, #3]
10009f2c:	2300      	movs	r3, #0
10009f2e:	2a7e      	cmp	r2, #126	; 0x7e
10009f30:	d801      	bhi.n	10009f36 <sms_ble_send_characteristic+0x32>
10009f32:	3201      	adds	r2, #1
10009f34:	b2d3      	uxtb	r3, r2
10009f36:	4a55      	ldr	r2, [pc, #340]	; (1000a08c <sms_ble_send_characteristic+0x188>)
10009f38:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
10009f3a:	aa01      	add	r2, sp, #4
10009f3c:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009f3e:	4b54      	ldr	r3, [pc, #336]	; (1000a090 <sms_ble_send_characteristic+0x18c>)
10009f40:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
10009f42:	2201      	movs	r2, #1
        break;
10009f44:	e081      	b.n	1000a04a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
10009f46:	4b53      	ldr	r3, [pc, #332]	; (1000a094 <sms_ble_send_characteristic+0x190>)
10009f48:	78db      	ldrb	r3, [r3, #3]
10009f4a:	2bff      	cmp	r3, #255	; 0xff
10009f4c:	d002      	beq.n	10009f54 <sms_ble_send_characteristic+0x50>
10009f4e:	3301      	adds	r3, #1
10009f50:	b2db      	uxtb	r3, r3
10009f52:	e000      	b.n	10009f56 <sms_ble_send_characteristic+0x52>
10009f54:	2300      	movs	r3, #0
10009f56:	4a4f      	ldr	r2, [pc, #316]	; (1000a094 <sms_ble_send_characteristic+0x190>)
10009f58:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
10009f5a:	3b80      	subs	r3, #128	; 0x80
10009f5c:	aa01      	add	r2, sp, #4
10009f5e:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009f60:	4b4b      	ldr	r3, [pc, #300]	; (1000a090 <sms_ble_send_characteristic+0x18c>)
10009f62:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
10009f64:	2201      	movs	r2, #1
        break;
10009f66:	e070      	b.n	1000a04a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
10009f68:	494b      	ldr	r1, [pc, #300]	; (1000a098 <sms_ble_send_characteristic+0x194>)
10009f6a:	6a0a      	ldr	r2, [r1, #32]
10009f6c:	ab01      	add	r3, sp, #4
10009f6e:	1610      	asrs	r0, r2, #24
10009f70:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10009f72:	1410      	asrs	r0, r2, #16
10009f74:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10009f76:	1210      	asrs	r0, r2, #8
10009f78:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10009f7a:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10009f7c:	69ca      	ldr	r2, [r1, #28]
10009f7e:	1610      	asrs	r0, r2, #24
10009f80:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
10009f82:	1410      	asrs	r0, r2, #16
10009f84:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10009f86:	1210      	asrs	r0, r2, #8
10009f88:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10009f8a:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10009f8c:	2340      	movs	r3, #64	; 0x40
10009f8e:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
10009f90:	2208      	movs	r2, #8
        break;
10009f92:	e05a      	b.n	1000a04a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
10009f94:	4a41      	ldr	r2, [pc, #260]	; (1000a09c <sms_ble_send_characteristic+0x198>)
10009f96:	2312      	movs	r3, #18
10009f98:	5ed1      	ldrsh	r1, [r2, r3]
10009f9a:	ab01      	add	r3, sp, #4
10009f9c:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
10009f9e:	1209      	asrs	r1, r1, #8
10009fa0:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
10009fa2:	2014      	movs	r0, #20
10009fa4:	5e11      	ldrsh	r1, [r2, r0]
10009fa6:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
10009fa8:	1209      	asrs	r1, r1, #8
10009faa:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
10009fac:	2016      	movs	r0, #22
10009fae:	5e11      	ldrsh	r1, [r2, r0]
10009fb0:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
10009fb2:	1209      	asrs	r1, r1, #8
10009fb4:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
10009fb6:	200c      	movs	r0, #12
10009fb8:	5e11      	ldrsh	r1, [r2, r0]
10009fba:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
10009fbc:	1209      	asrs	r1, r1, #8
10009fbe:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
10009fc0:	200e      	movs	r0, #14
10009fc2:	5e11      	ldrsh	r1, [r2, r0]
10009fc4:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
10009fc6:	1209      	asrs	r1, r1, #8
10009fc8:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
10009fca:	2010      	movs	r0, #16
10009fcc:	5e11      	ldrsh	r1, [r2, r0]
10009fce:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
10009fd0:	1209      	asrs	r1, r1, #8
10009fd2:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
10009fd4:	2348      	movs	r3, #72	; 0x48
10009fd6:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
10009fd8:	3b1a      	subs	r3, #26
10009fda:	5cd3      	ldrb	r3, [r2, r3]
10009fdc:	2b00      	cmp	r3, #0
10009fde:	d014      	beq.n	1000a00a <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
10009fe0:	2318      	movs	r3, #24
10009fe2:	5ed1      	ldrsh	r1, [r2, r3]
10009fe4:	ab01      	add	r3, sp, #4
10009fe6:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
10009fe8:	1209      	asrs	r1, r1, #8
10009fea:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
10009fec:	201a      	movs	r0, #26
10009fee:	5e11      	ldrsh	r1, [r2, r0]
10009ff0:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
10009ff2:	1209      	asrs	r1, r1, #8
10009ff4:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
10009ff6:	201c      	movs	r0, #28
10009ff8:	5e11      	ldrsh	r1, [r2, r0]
10009ffa:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
10009ffc:	1209      	asrs	r1, r1, #8
10009ffe:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a000:	2100      	movs	r1, #0
1000a002:	232e      	movs	r3, #46	; 0x2e
1000a004:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a006:	2212      	movs	r2, #18
1000a008:	e008      	b.n	1000a01c <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a00a:	ab01      	add	r3, sp, #4
1000a00c:	2200      	movs	r2, #0
1000a00e:	731a      	strb	r2, [r3, #12]
1000a010:	735a      	strb	r2, [r3, #13]
1000a012:	739a      	strb	r2, [r3, #14]
1000a014:	73da      	strb	r2, [r3, #15]
1000a016:	741a      	strb	r2, [r3, #16]
1000a018:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a01a:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a01c:	232f      	movs	r3, #47	; 0x2f
1000a01e:	491f      	ldr	r1, [pc, #124]	; (1000a09c <sms_ble_send_characteristic+0x198>)
1000a020:	5ccb      	ldrb	r3, [r1, r3]
1000a022:	2b00      	cmp	r3, #0
1000a024:	d00a      	beq.n	1000a03c <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a026:	000a      	movs	r2, r1
1000a028:	6a0b      	ldr	r3, [r1, #32]
1000a02a:	a901      	add	r1, sp, #4
1000a02c:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a02e:	121b      	asrs	r3, r3, #8
1000a030:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a032:	2100      	movs	r1, #0
1000a034:	232f      	movs	r3, #47	; 0x2f
1000a036:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a038:	2214      	movs	r2, #20
1000a03a:	e006      	b.n	1000a04a <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a03c:	ab01      	add	r3, sp, #4
1000a03e:	2100      	movs	r1, #0
1000a040:	7499      	strb	r1, [r3, #18]
1000a042:	74d9      	strb	r1, [r3, #19]
1000a044:	e001      	b.n	1000a04a <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a046:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a048:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a04a:	b292      	uxth	r2, r2
1000a04c:	a901      	add	r1, sp, #4
1000a04e:	0028      	movs	r0, r5
1000a050:	4b13      	ldr	r3, [pc, #76]	; (1000a0a0 <sms_ble_send_characteristic+0x19c>)
1000a052:	4798      	blx	r3
1000a054:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a056:	d111      	bne.n	1000a07c <sms_ble_send_characteristic+0x178>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a058:	4b0b      	ldr	r3, [pc, #44]	; (1000a088 <sms_ble_send_characteristic+0x184>)
1000a05a:	8819      	ldrh	r1, [r3, #0]
1000a05c:	4811      	ldr	r0, [pc, #68]	; (1000a0a4 <sms_ble_send_characteristic+0x1a0>)
1000a05e:	4b12      	ldr	r3, [pc, #72]	; (1000a0a8 <sms_ble_send_characteristic+0x1a4>)
1000a060:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a062:	2101      	movs	r1, #1
1000a064:	2002      	movs	r0, #2
1000a066:	4e11      	ldr	r6, [pc, #68]	; (1000a0ac <sms_ble_send_characteristic+0x1a8>)
1000a068:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a06a:	4b11      	ldr	r3, [pc, #68]	; (1000a0b0 <sms_ble_send_characteristic+0x1ac>)
1000a06c:	8818      	ldrh	r0, [r3, #0]
1000a06e:	0029      	movs	r1, r5
1000a070:	4b10      	ldr	r3, [pc, #64]	; (1000a0b4 <sms_ble_send_characteristic+0x1b0>)
1000a072:	4798      	blx	r3
1000a074:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a076:	2100      	movs	r1, #0
1000a078:	2002      	movs	r0, #2
1000a07a:	47b0      	blx	r6
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a07c:	0020      	movs	r0, r4
1000a07e:	b006      	add	sp, #24
1000a080:	bd70      	pop	{r4, r5, r6, pc}
1000a082:	46c0      	nop			; (mov r8, r8)
1000a084:	100199e0 	.word	0x100199e0
1000a088:	10019a00 	.word	0x10019a00
1000a08c:	10019830 	.word	0x10019830
1000a090:	100198d0 	.word	0x100198d0
1000a094:	100198cc 	.word	0x100198cc
1000a098:	10019944 	.word	0x10019944
1000a09c:	10019838 	.word	0x10019838
1000a0a0:	10010d09 	.word	0x10010d09
1000a0a4:	1001638c 	.word	0x1001638c
1000a0a8:	10014b29 	.word	0x10014b29
1000a0ac:	1000bf1d 	.word	0x1000bf1d
1000a0b0:	100198ca 	.word	0x100198ca
1000a0b4:	10010ea9 	.word	0x10010ea9

1000a0b8 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a0b8:	b510      	push	{r4, lr}
1000a0ba:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a0bc:	0001      	movs	r1, r0
1000a0be:	3112      	adds	r1, #18
1000a0c0:	2301      	movs	r3, #1
1000a0c2:	9301      	str	r3, [sp, #4]
1000a0c4:	0003      	movs	r3, r0
1000a0c6:	3314      	adds	r3, #20
1000a0c8:	9300      	str	r3, [sp, #0]
1000a0ca:	2300      	movs	r3, #0
1000a0cc:	2200      	movs	r2, #0
1000a0ce:	4c02      	ldr	r4, [pc, #8]	; (1000a0d8 <sms_ble_primary_service_define+0x20>)
1000a0d0:	47a0      	blx	r4
}
1000a0d2:	b002      	add	sp, #8
1000a0d4:	bd10      	pop	{r4, pc}
1000a0d6:	46c0      	nop			; (mov r8, r8)
1000a0d8:	10010ce9 	.word	0x10010ce9

1000a0dc <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0de:	464f      	mov	r7, r9
1000a0e0:	4646      	mov	r6, r8
1000a0e2:	b4c0      	push	{r6, r7}
1000a0e4:	b083      	sub	sp, #12
1000a0e6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a0e8:	2801      	cmp	r0, #1
1000a0ea:	d010      	beq.n	1000a10e <sms_ble_service_init+0x32>
1000a0ec:	2800      	cmp	r0, #0
1000a0ee:	d002      	beq.n	1000a0f6 <sms_ble_service_init+0x1a>
1000a0f0:	2802      	cmp	r0, #2
1000a0f2:	d019      	beq.n	1000a128 <sms_ble_service_init+0x4c>
1000a0f4:	e025      	b.n	1000a142 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a0f6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a0f8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a0fa:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a0fc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a0fe:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a100:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a102:	221c      	movs	r2, #28
1000a104:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a106:	3a1b      	subs	r2, #27
1000a108:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a10a:	4691      	mov	r9, r2
1000a10c:	e023      	b.n	1000a156 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a10e:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a110:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a112:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a114:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a116:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a118:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a11a:	221c      	movs	r2, #28
1000a11c:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a11e:	3a14      	subs	r2, #20
1000a120:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a122:	3a06      	subs	r2, #6
1000a124:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a126:	e016      	b.n	1000a156 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a128:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a12a:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a12c:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a12e:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a130:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a132:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a134:	221c      	movs	r2, #28
1000a136:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a138:	3a08      	subs	r2, #8
1000a13a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a13c:	3a11      	subs	r2, #17
1000a13e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a140:	e009      	b.n	1000a156 <sms_ble_service_init+0x7a>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a142:	2300      	movs	r3, #0
1000a144:	2400      	movs	r4, #0
1000a146:	2500      	movs	r5, #0
1000a148:	2600      	movs	r6, #0
1000a14a:	2700      	movs	r7, #0
1000a14c:	2000      	movs	r0, #0
1000a14e:	2200      	movs	r2, #0
1000a150:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a152:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a154:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a156:	464a      	mov	r2, r9
1000a158:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a15a:	2202      	movs	r2, #2
1000a15c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a15e:	4642      	mov	r2, r8
1000a160:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a162:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a164:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a166:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a168:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a16a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a16c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a16e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a170:	2300      	movs	r3, #0
1000a172:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a174:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a176:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a178:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a17a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a17c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a17e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a180:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a182:	2412      	movs	r4, #18
1000a184:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a186:	4662      	mov	r2, ip
1000a188:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a18a:	466a      	mov	r2, sp
1000a18c:	8892      	ldrh	r2, [r2, #4]
1000a18e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a190:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a192:	2011      	movs	r0, #17
1000a194:	2234      	movs	r2, #52	; 0x34
1000a196:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a198:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a19a:	2200      	movs	r2, #0
1000a19c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a19e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a1a0:	3033      	adds	r0, #51	; 0x33
1000a1a2:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a1a4:	3001      	adds	r0, #1
1000a1a6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a1a8:	3001      	adds	r0, #1
1000a1aa:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a1ac:	2248      	movs	r2, #72	; 0x48
1000a1ae:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a1b0:	3202      	adds	r2, #2
1000a1b2:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a1b4:	3202      	adds	r2, #2
1000a1b6:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a1b8:	640b      	str	r3, [r1, #64]	; 0x40
1000a1ba:	b003      	add	sp, #12
1000a1bc:	bc0c      	pop	{r2, r3}
1000a1be:	4690      	mov	r8, r2
1000a1c0:	4699      	mov	r9, r3
1000a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a1c4 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a1c4:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.int_on = true;
1000a1c6:	4b06      	ldr	r3, [pc, #24]	; (1000a1e0 <sms_button_bt0_callback+0x1c>)
1000a1c8:	2201      	movs	r2, #1
1000a1ca:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN0;
1000a1cc:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1ce:	4b05      	ldr	r3, [pc, #20]	; (1000a1e4 <sms_button_bt0_callback+0x20>)
1000a1d0:	7858      	ldrb	r0, [r3, #1]
1000a1d2:	2300      	movs	r3, #0
1000a1d4:	2200      	movs	r2, #0
1000a1d6:	2102      	movs	r1, #2
1000a1d8:	4c03      	ldr	r4, [pc, #12]	; (1000a1e8 <sms_button_bt0_callback+0x24>)
1000a1da:	47a0      	blx	r4
}
1000a1dc:	bd10      	pop	{r4, pc}
1000a1de:	46c0      	nop			; (mov r8, r8)
1000a1e0:	100199c8 	.word	0x100199c8
1000a1e4:	10019830 	.word	0x10019830
1000a1e8:	1000ef79 	.word	0x1000ef79

1000a1ec <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a1ec:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.int_on = true;
1000a1ee:	4b06      	ldr	r3, [pc, #24]	; (1000a208 <sms_button_bt1_callback+0x1c>)
1000a1f0:	2201      	movs	r2, #1
1000a1f2:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN1;
1000a1f4:	3201      	adds	r2, #1
1000a1f6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1f8:	4b04      	ldr	r3, [pc, #16]	; (1000a20c <sms_button_bt1_callback+0x20>)
1000a1fa:	7858      	ldrb	r0, [r3, #1]
1000a1fc:	2300      	movs	r3, #0
1000a1fe:	2200      	movs	r2, #0
1000a200:	2102      	movs	r1, #2
1000a202:	4c03      	ldr	r4, [pc, #12]	; (1000a210 <sms_button_bt1_callback+0x24>)
1000a204:	47a0      	blx	r4
}
1000a206:	bd10      	pop	{r4, pc}
1000a208:	100199c8 	.word	0x100199c8
1000a20c:	100198cc 	.word	0x100198cc
1000a210:	1000ef79 	.word	0x1000ef79

1000a214 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a214:	b510      	push	{r4, lr}
1000a216:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a218:	ac01      	add	r4, sp, #4
1000a21a:	0020      	movs	r0, r4
1000a21c:	4b20      	ldr	r3, [pc, #128]	; (1000a2a0 <sms_button_configure_gpio+0x8c>)
1000a21e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a220:	2300      	movs	r3, #0
1000a222:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a224:	3302      	adds	r3, #2
1000a226:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a228:	3b01      	subs	r3, #1
1000a22a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a22c:	4b1d      	ldr	r3, [pc, #116]	; (1000a2a4 <sms_button_configure_gpio+0x90>)
1000a22e:	7858      	ldrb	r0, [r3, #1]
1000a230:	0021      	movs	r1, r4
1000a232:	4b1d      	ldr	r3, [pc, #116]	; (1000a2a8 <sms_button_configure_gpio+0x94>)
1000a234:	4798      	blx	r3
1000a236:	2800      	cmp	r0, #0
1000a238:	d005      	beq.n	1000a246 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a23a:	481c      	ldr	r0, [pc, #112]	; (1000a2ac <sms_button_configure_gpio+0x98>)
1000a23c:	4b1c      	ldr	r3, [pc, #112]	; (1000a2b0 <sms_button_configure_gpio+0x9c>)
1000a23e:	4798      	blx	r3
1000a240:	481c      	ldr	r0, [pc, #112]	; (1000a2b4 <sms_button_configure_gpio+0xa0>)
1000a242:	4b1d      	ldr	r3, [pc, #116]	; (1000a2b8 <sms_button_configure_gpio+0xa4>)
1000a244:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a246:	ac01      	add	r4, sp, #4
1000a248:	0020      	movs	r0, r4
1000a24a:	4b15      	ldr	r3, [pc, #84]	; (1000a2a0 <sms_button_configure_gpio+0x8c>)
1000a24c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a24e:	2300      	movs	r3, #0
1000a250:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a252:	3302      	adds	r3, #2
1000a254:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a256:	3b01      	subs	r3, #1
1000a258:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a25a:	4b18      	ldr	r3, [pc, #96]	; (1000a2bc <sms_button_configure_gpio+0xa8>)
1000a25c:	7858      	ldrb	r0, [r3, #1]
1000a25e:	0021      	movs	r1, r4
1000a260:	4b11      	ldr	r3, [pc, #68]	; (1000a2a8 <sms_button_configure_gpio+0x94>)
1000a262:	4798      	blx	r3
1000a264:	2800      	cmp	r0, #0
1000a266:	d005      	beq.n	1000a274 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a268:	4810      	ldr	r0, [pc, #64]	; (1000a2ac <sms_button_configure_gpio+0x98>)
1000a26a:	4b11      	ldr	r3, [pc, #68]	; (1000a2b0 <sms_button_configure_gpio+0x9c>)
1000a26c:	4798      	blx	r3
1000a26e:	4814      	ldr	r0, [pc, #80]	; (1000a2c0 <sms_button_configure_gpio+0xac>)
1000a270:	4b11      	ldr	r3, [pc, #68]	; (1000a2b8 <sms_button_configure_gpio+0xa4>)
1000a272:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a274:	ac01      	add	r4, sp, #4
1000a276:	0020      	movs	r0, r4
1000a278:	4b09      	ldr	r3, [pc, #36]	; (1000a2a0 <sms_button_configure_gpio+0x8c>)
1000a27a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a27c:	2300      	movs	r3, #0
1000a27e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a280:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a282:	0021      	movs	r1, r4
1000a284:	2017      	movs	r0, #23
1000a286:	4b08      	ldr	r3, [pc, #32]	; (1000a2a8 <sms_button_configure_gpio+0x94>)
1000a288:	4798      	blx	r3
1000a28a:	2800      	cmp	r0, #0
1000a28c:	d005      	beq.n	1000a29a <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a28e:	4807      	ldr	r0, [pc, #28]	; (1000a2ac <sms_button_configure_gpio+0x98>)
1000a290:	4b07      	ldr	r3, [pc, #28]	; (1000a2b0 <sms_button_configure_gpio+0x9c>)
1000a292:	4798      	blx	r3
1000a294:	480b      	ldr	r0, [pc, #44]	; (1000a2c4 <sms_button_configure_gpio+0xb0>)
1000a296:	4b08      	ldr	r3, [pc, #32]	; (1000a2b8 <sms_button_configure_gpio+0xa4>)
1000a298:	4798      	blx	r3
    }
}
1000a29a:	b002      	add	sp, #8
1000a29c:	bd10      	pop	{r4, pc}
1000a29e:	46c0      	nop			; (mov r8, r8)
1000a2a0:	1000bcb5 	.word	0x1000bcb5
1000a2a4:	10019830 	.word	0x10019830
1000a2a8:	1000bcc5 	.word	0x1000bcc5
1000a2ac:	10015df4 	.word	0x10015df4
1000a2b0:	10014c49 	.word	0x10014c49
1000a2b4:	1001640c 	.word	0x1001640c
1000a2b8:	10014b29 	.word	0x10014b29
1000a2bc:	100198cc 	.word	0x100198cc
1000a2c0:	10016444 	.word	0x10016444
1000a2c4:	1001647c 	.word	0x1001647c

1000a2c8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a2c8:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a2ca:	4b06      	ldr	r3, [pc, #24]	; (1000a2e4 <sms_button_register_callbacks+0x1c>)
1000a2cc:	7858      	ldrb	r0, [r3, #1]
1000a2ce:	2202      	movs	r2, #2
1000a2d0:	4905      	ldr	r1, [pc, #20]	; (1000a2e8 <sms_button_register_callbacks+0x20>)
1000a2d2:	4c06      	ldr	r4, [pc, #24]	; (1000a2ec <sms_button_register_callbacks+0x24>)
1000a2d4:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a2d6:	4b06      	ldr	r3, [pc, #24]	; (1000a2f0 <sms_button_register_callbacks+0x28>)
1000a2d8:	7858      	ldrb	r0, [r3, #1]
1000a2da:	2202      	movs	r2, #2
1000a2dc:	4905      	ldr	r1, [pc, #20]	; (1000a2f4 <sms_button_register_callbacks+0x2c>)
1000a2de:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a2e0:	bd10      	pop	{r4, pc}
1000a2e2:	46c0      	nop			; (mov r8, r8)
1000a2e4:	10019830 	.word	0x10019830
1000a2e8:	1000a1c5 	.word	0x1000a1c5
1000a2ec:	1000c0f5 	.word	0x1000c0f5
1000a2f0:	100198cc 	.word	0x100198cc
1000a2f4:	1000a1ed 	.word	0x1000a1ed

1000a2f8 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a2f8:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a2fa:	201f      	movs	r0, #31
1000a2fc:	4d0c      	ldr	r5, [pc, #48]	; (1000a330 <sms_button_get_state+0x38>)
1000a2fe:	47a8      	blx	r5
1000a300:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a302:	201d      	movs	r0, #29
1000a304:	47a8      	blx	r5
1000a306:	0005      	movs	r5, r0
1000a308:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a30a:	480a      	ldr	r0, [pc, #40]	; (1000a334 <sms_button_get_state+0x3c>)
1000a30c:	4b0a      	ldr	r3, [pc, #40]	; (1000a338 <sms_button_get_state+0x40>)
1000a30e:	4798      	blx	r3
1000a310:	0022      	movs	r2, r4
1000a312:	0029      	movs	r1, r5
1000a314:	4809      	ldr	r0, [pc, #36]	; (1000a33c <sms_button_get_state+0x44>)
1000a316:	4b0a      	ldr	r3, [pc, #40]	; (1000a340 <sms_button_get_state+0x48>)
1000a318:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a31a:	2c00      	cmp	r4, #0
1000a31c:	d004      	beq.n	1000a328 <sms_button_get_state+0x30>
1000a31e:	2003      	movs	r0, #3
1000a320:	2d00      	cmp	r5, #0
1000a322:	d104      	bne.n	1000a32e <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a324:	3802      	subs	r0, #2
1000a326:	e002      	b.n	1000a32e <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a328:	1e70      	subs	r0, r6, #1
1000a32a:	4186      	sbcs	r6, r0
1000a32c:	0070      	lsls	r0, r6, #1
}
1000a32e:	bd70      	pop	{r4, r5, r6, pc}
1000a330:	1000be7d 	.word	0x1000be7d
1000a334:	10015df4 	.word	0x10015df4
1000a338:	10014c49 	.word	0x10014c49
1000a33c:	100164c4 	.word	0x100164c4
1000a340:	10014b29 	.word	0x10014b29

1000a344 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a344:	b570      	push	{r4, r5, r6, lr}
1000a346:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a348:	4c78      	ldr	r4, [pc, #480]	; (1000a52c <sms_button_fn+0x1e8>)
1000a34a:	7863      	ldrb	r3, [r4, #1]
1000a34c:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a34e:	4b78      	ldr	r3, [pc, #480]	; (1000a530 <sms_button_fn+0x1ec>)
1000a350:	4798      	blx	r3
1000a352:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a354:	2d00      	cmp	r5, #0
1000a356:	d103      	bne.n	1000a360 <sms_button_fn+0x1c>
1000a358:	4876      	ldr	r0, [pc, #472]	; (1000a534 <sms_button_fn+0x1f0>)
1000a35a:	4b77      	ldr	r3, [pc, #476]	; (1000a538 <sms_button_fn+0x1f4>)
1000a35c:	4798      	blx	r3
1000a35e:	e005      	b.n	1000a36c <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a360:	2d01      	cmp	r5, #1
1000a362:	d000      	beq.n	1000a366 <sms_button_fn+0x22>
1000a364:	e0d4      	b.n	1000a510 <sms_button_fn+0x1cc>
1000a366:	4875      	ldr	r0, [pc, #468]	; (1000a53c <sms_button_fn+0x1f8>)
1000a368:	4b73      	ldr	r3, [pc, #460]	; (1000a538 <sms_button_fn+0x1f4>)
1000a36a:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a36c:	4b6f      	ldr	r3, [pc, #444]	; (1000a52c <sms_button_fn+0x1e8>)
1000a36e:	785b      	ldrb	r3, [r3, #1]
1000a370:	2b01      	cmp	r3, #1
1000a372:	d008      	beq.n	1000a386 <sms_button_fn+0x42>
1000a374:	2b00      	cmp	r3, #0
1000a376:	d100      	bne.n	1000a37a <sms_button_fn+0x36>
1000a378:	e0c5      	b.n	1000a506 <sms_button_fn+0x1c2>
1000a37a:	2b02      	cmp	r3, #2
1000a37c:	d04b      	beq.n	1000a416 <sms_button_fn+0xd2>
1000a37e:	2b03      	cmp	r3, #3
1000a380:	d100      	bne.n	1000a384 <sms_button_fn+0x40>
1000a382:	e08f      	b.n	1000a4a4 <sms_button_fn+0x160>
1000a384:	e0c7      	b.n	1000a516 <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a386:	4b6e      	ldr	r3, [pc, #440]	; (1000a540 <sms_button_fn+0x1fc>)
1000a388:	781b      	ldrb	r3, [r3, #0]
1000a38a:	b2db      	uxtb	r3, r3
1000a38c:	2b00      	cmp	r3, #0
1000a38e:	d003      	beq.n	1000a398 <sms_button_fn+0x54>
1000a390:	3b22      	subs	r3, #34	; 0x22
1000a392:	2b01      	cmp	r3, #1
1000a394:	d836      	bhi.n	1000a404 <sms_button_fn+0xc0>
1000a396:	e00e      	b.n	1000a3b6 <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a398:	2201      	movs	r2, #1
1000a39a:	4b6a      	ldr	r3, [pc, #424]	; (1000a544 <sms_button_fn+0x200>)
1000a39c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a39e:	2300      	movs	r3, #0
1000a3a0:	4a69      	ldr	r2, [pc, #420]	; (1000a548 <sms_button_fn+0x204>)
1000a3a2:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a3a4:	4a69      	ldr	r2, [pc, #420]	; (1000a54c <sms_button_fn+0x208>)
1000a3a6:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3a8:	2200      	movs	r2, #0
1000a3aa:	21fa      	movs	r1, #250	; 0xfa
1000a3ac:	2001      	movs	r0, #1
1000a3ae:	4b68      	ldr	r3, [pc, #416]	; (1000a550 <sms_button_fn+0x20c>)
1000a3b0:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3b2:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a3b4:	e0b9      	b.n	1000a52a <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a3b6:	2328      	movs	r3, #40	; 0x28
1000a3b8:	4a66      	ldr	r2, [pc, #408]	; (1000a554 <sms_button_fn+0x210>)
1000a3ba:	5cd3      	ldrb	r3, [r2, r3]
1000a3bc:	2b01      	cmp	r3, #1
1000a3be:	d109      	bne.n	1000a3d4 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a3c0:	4865      	ldr	r0, [pc, #404]	; (1000a558 <sms_button_fn+0x214>)
1000a3c2:	4b66      	ldr	r3, [pc, #408]	; (1000a55c <sms_button_fn+0x218>)
1000a3c4:	4798      	blx	r3
1000a3c6:	4866      	ldr	r0, [pc, #408]	; (1000a560 <sms_button_fn+0x21c>)
1000a3c8:	4b66      	ldr	r3, [pc, #408]	; (1000a564 <sms_button_fn+0x220>)
1000a3ca:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a3cc:	2101      	movs	r1, #1
1000a3ce:	2000      	movs	r0, #0
1000a3d0:	4b65      	ldr	r3, [pc, #404]	; (1000a568 <sms_button_fn+0x224>)
1000a3d2:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a3d4:	2300      	movs	r3, #0
1000a3d6:	4a5b      	ldr	r2, [pc, #364]	; (1000a544 <sms_button_fn+0x200>)
1000a3d8:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3da:	4a5b      	ldr	r2, [pc, #364]	; (1000a548 <sms_button_fn+0x204>)
1000a3dc:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a3de:	4b63      	ldr	r3, [pc, #396]	; (1000a56c <sms_button_fn+0x228>)
1000a3e0:	781b      	ldrb	r3, [r3, #0]
1000a3e2:	42ab      	cmp	r3, r5
1000a3e4:	d104      	bne.n	1000a3f0 <sms_button_fn+0xac>
1000a3e6:	2000      	movs	r0, #0
1000a3e8:	4b61      	ldr	r3, [pc, #388]	; (1000a570 <sms_button_fn+0x22c>)
1000a3ea:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3ec:	2000      	movs	r0, #0
1000a3ee:	e09c      	b.n	1000a52a <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a3f0:	4b60      	ldr	r3, [pc, #384]	; (1000a574 <sms_button_fn+0x230>)
1000a3f2:	781b      	ldrb	r3, [r3, #0]
1000a3f4:	42ab      	cmp	r3, r5
1000a3f6:	d000      	beq.n	1000a3fa <sms_button_fn+0xb6>
1000a3f8:	e08f      	b.n	1000a51a <sms_button_fn+0x1d6>
1000a3fa:	2001      	movs	r0, #1
1000a3fc:	4b5c      	ldr	r3, [pc, #368]	; (1000a570 <sms_button_fn+0x22c>)
1000a3fe:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a400:	2000      	movs	r0, #0
1000a402:	e092      	b.n	1000a52a <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a404:	4854      	ldr	r0, [pc, #336]	; (1000a558 <sms_button_fn+0x214>)
1000a406:	4b55      	ldr	r3, [pc, #340]	; (1000a55c <sms_button_fn+0x218>)
1000a408:	4798      	blx	r3
1000a40a:	485b      	ldr	r0, [pc, #364]	; (1000a578 <sms_button_fn+0x234>)
1000a40c:	4b55      	ldr	r3, [pc, #340]	; (1000a564 <sms_button_fn+0x220>)
1000a40e:	4798      	blx	r3
            return -1;
1000a410:	2001      	movs	r0, #1
1000a412:	4240      	negs	r0, r0
1000a414:	e089      	b.n	1000a52a <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a416:	4b4a      	ldr	r3, [pc, #296]	; (1000a540 <sms_button_fn+0x1fc>)
1000a418:	781b      	ldrb	r3, [r3, #0]
1000a41a:	b2db      	uxtb	r3, r3
1000a41c:	2b22      	cmp	r3, #34	; 0x22
1000a41e:	d012      	beq.n	1000a446 <sms_button_fn+0x102>
1000a420:	2b23      	cmp	r3, #35	; 0x23
1000a422:	d036      	beq.n	1000a492 <sms_button_fn+0x14e>
1000a424:	2b00      	cmp	r3, #0
1000a426:	d17b      	bne.n	1000a520 <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a428:	2201      	movs	r2, #1
1000a42a:	4b46      	ldr	r3, [pc, #280]	; (1000a544 <sms_button_fn+0x200>)
1000a42c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a42e:	2300      	movs	r3, #0
1000a430:	4a45      	ldr	r2, [pc, #276]	; (1000a548 <sms_button_fn+0x204>)
1000a432:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a434:	4a45      	ldr	r2, [pc, #276]	; (1000a54c <sms_button_fn+0x208>)
1000a436:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a438:	2200      	movs	r2, #0
1000a43a:	21fa      	movs	r1, #250	; 0xfa
1000a43c:	2001      	movs	r0, #1
1000a43e:	4b44      	ldr	r3, [pc, #272]	; (1000a550 <sms_button_fn+0x20c>)
1000a440:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a442:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a444:	e071      	b.n	1000a52a <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a446:	2328      	movs	r3, #40	; 0x28
1000a448:	4a42      	ldr	r2, [pc, #264]	; (1000a554 <sms_button_fn+0x210>)
1000a44a:	5cd3      	ldrb	r3, [r2, r3]
1000a44c:	2b01      	cmp	r3, #1
1000a44e:	d109      	bne.n	1000a464 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a450:	4841      	ldr	r0, [pc, #260]	; (1000a558 <sms_button_fn+0x214>)
1000a452:	4b42      	ldr	r3, [pc, #264]	; (1000a55c <sms_button_fn+0x218>)
1000a454:	4798      	blx	r3
1000a456:	4849      	ldr	r0, [pc, #292]	; (1000a57c <sms_button_fn+0x238>)
1000a458:	4b42      	ldr	r3, [pc, #264]	; (1000a564 <sms_button_fn+0x220>)
1000a45a:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a45c:	2101      	movs	r1, #1
1000a45e:	2000      	movs	r0, #0
1000a460:	4b41      	ldr	r3, [pc, #260]	; (1000a568 <sms_button_fn+0x224>)
1000a462:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a464:	2300      	movs	r3, #0
1000a466:	4a37      	ldr	r2, [pc, #220]	; (1000a544 <sms_button_fn+0x200>)
1000a468:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a46a:	4a37      	ldr	r2, [pc, #220]	; (1000a548 <sms_button_fn+0x204>)
1000a46c:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a46e:	4b3f      	ldr	r3, [pc, #252]	; (1000a56c <sms_button_fn+0x228>)
1000a470:	781b      	ldrb	r3, [r3, #0]
1000a472:	42ab      	cmp	r3, r5
1000a474:	d104      	bne.n	1000a480 <sms_button_fn+0x13c>
1000a476:	2000      	movs	r0, #0
1000a478:	4b3d      	ldr	r3, [pc, #244]	; (1000a570 <sms_button_fn+0x22c>)
1000a47a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a47c:	2000      	movs	r0, #0
1000a47e:	e054      	b.n	1000a52a <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a480:	4b3c      	ldr	r3, [pc, #240]	; (1000a574 <sms_button_fn+0x230>)
1000a482:	781b      	ldrb	r3, [r3, #0]
1000a484:	42ab      	cmp	r3, r5
1000a486:	d14e      	bne.n	1000a526 <sms_button_fn+0x1e2>
1000a488:	2001      	movs	r0, #1
1000a48a:	4b39      	ldr	r3, [pc, #228]	; (1000a570 <sms_button_fn+0x22c>)
1000a48c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a48e:	2000      	movs	r0, #0
1000a490:	e04b      	b.n	1000a52a <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a492:	4831      	ldr	r0, [pc, #196]	; (1000a558 <sms_button_fn+0x214>)
1000a494:	4b31      	ldr	r3, [pc, #196]	; (1000a55c <sms_button_fn+0x218>)
1000a496:	4798      	blx	r3
1000a498:	4839      	ldr	r0, [pc, #228]	; (1000a580 <sms_button_fn+0x23c>)
1000a49a:	4b32      	ldr	r3, [pc, #200]	; (1000a564 <sms_button_fn+0x220>)
1000a49c:	4798      	blx	r3
            return -1;
1000a49e:	2001      	movs	r0, #1
1000a4a0:	4240      	negs	r0, r0
1000a4a2:	e042      	b.n	1000a52a <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a4a4:	4b26      	ldr	r3, [pc, #152]	; (1000a540 <sms_button_fn+0x1fc>)
1000a4a6:	781b      	ldrb	r3, [r3, #0]
1000a4a8:	2b00      	cmp	r3, #0
1000a4aa:	d108      	bne.n	1000a4be <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a4ac:	4a25      	ldr	r2, [pc, #148]	; (1000a544 <sms_button_fn+0x200>)
1000a4ae:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a4b0:	4a25      	ldr	r2, [pc, #148]	; (1000a548 <sms_button_fn+0x204>)
1000a4b2:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a4b4:	2201      	movs	r2, #1
1000a4b6:	4b33      	ldr	r3, [pc, #204]	; (1000a584 <sms_button_fn+0x240>)
1000a4b8:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a4ba:	2000      	movs	r0, #0
1000a4bc:	e035      	b.n	1000a52a <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a4be:	4b20      	ldr	r3, [pc, #128]	; (1000a540 <sms_button_fn+0x1fc>)
1000a4c0:	781b      	ldrb	r3, [r3, #0]
1000a4c2:	2b22      	cmp	r3, #34	; 0x22
1000a4c4:	d003      	beq.n	1000a4ce <sms_button_fn+0x18a>
1000a4c6:	4b1e      	ldr	r3, [pc, #120]	; (1000a540 <sms_button_fn+0x1fc>)
1000a4c8:	781b      	ldrb	r3, [r3, #0]
1000a4ca:	2b23      	cmp	r3, #35	; 0x23
1000a4cc:	d104      	bne.n	1000a4d8 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a4ce:	2101      	movs	r1, #1
1000a4d0:	2328      	movs	r3, #40	; 0x28
1000a4d2:	4a20      	ldr	r2, [pc, #128]	; (1000a554 <sms_button_fn+0x210>)
1000a4d4:	54d1      	strb	r1, [r2, r3]
1000a4d6:	e003      	b.n	1000a4e0 <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a4d8:	2100      	movs	r1, #0
1000a4da:	2328      	movs	r3, #40	; 0x28
1000a4dc:	4a1d      	ldr	r2, [pc, #116]	; (1000a554 <sms_button_fn+0x210>)
1000a4de:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a4e0:	2100      	movs	r1, #0
1000a4e2:	2000      	movs	r0, #0
1000a4e4:	4b20      	ldr	r3, [pc, #128]	; (1000a568 <sms_button_fn+0x224>)
1000a4e6:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a4e8:	2202      	movs	r2, #2
1000a4ea:	4b16      	ldr	r3, [pc, #88]	; (1000a544 <sms_button_fn+0x200>)
1000a4ec:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a4ee:	2300      	movs	r3, #0
1000a4f0:	4a15      	ldr	r2, [pc, #84]	; (1000a548 <sms_button_fn+0x204>)
1000a4f2:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a4f4:	4a15      	ldr	r2, [pc, #84]	; (1000a54c <sms_button_fn+0x208>)
1000a4f6:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a4f8:	2200      	movs	r2, #0
1000a4fa:	21fa      	movs	r1, #250	; 0xfa
1000a4fc:	2001      	movs	r0, #1
1000a4fe:	4b14      	ldr	r3, [pc, #80]	; (1000a550 <sms_button_fn+0x20c>)
1000a500:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a502:	2000      	movs	r0, #0
1000a504:	e011      	b.n	1000a52a <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a506:	2201      	movs	r2, #1
1000a508:	4b1e      	ldr	r3, [pc, #120]	; (1000a584 <sms_button_fn+0x240>)
1000a50a:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a50c:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a50e:	e00c      	b.n	1000a52a <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a510:	2001      	movs	r0, #1
1000a512:	4240      	negs	r0, r0
1000a514:	e009      	b.n	1000a52a <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a516:	2000      	movs	r0, #0
1000a518:	e007      	b.n	1000a52a <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a51a:	2001      	movs	r0, #1
1000a51c:	4240      	negs	r0, r0
1000a51e:	e004      	b.n	1000a52a <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a520:	2001      	movs	r0, #1
1000a522:	4240      	negs	r0, r0
1000a524:	e001      	b.n	1000a52a <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a526:	2001      	movs	r0, #1
1000a528:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a52a:	bd70      	pop	{r4, r5, r6, pc}
1000a52c:	100198d0 	.word	0x100198d0
1000a530:	1000a2f9 	.word	0x1000a2f9
1000a534:	100164f0 	.word	0x100164f0
1000a538:	1000a68d 	.word	0x1000a68d
1000a53c:	10016504 	.word	0x10016504
1000a540:	100199e0 	.word	0x100199e0
1000a544:	10019834 	.word	0x10019834
1000a548:	100199e1 	.word	0x100199e1
1000a54c:	10019a02 	.word	0x10019a02
1000a550:	1000b1fd 	.word	0x1000b1fd
1000a554:	10019944 	.word	0x10019944
1000a558:	10015df4 	.word	0x10015df4
1000a55c:	10014c49 	.word	0x10014c49
1000a560:	10016518 	.word	0x10016518
1000a564:	10014b29 	.word	0x10014b29
1000a568:	1000af51 	.word	0x1000af51
1000a56c:	10019830 	.word	0x10019830
1000a570:	10009f05 	.word	0x10009f05
1000a574:	100198cc 	.word	0x100198cc
1000a578:	10016540 	.word	0x10016540
1000a57c:	10016568 	.word	0x10016568
1000a580:	10016590 	.word	0x10016590
1000a584:	100198c9 	.word	0x100198c9

1000a588 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a588:	b510      	push	{r4, lr}
1000a58a:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a58c:	2800      	cmp	r0, #0
1000a58e:	d104      	bne.n	1000a59a <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a590:	4b0c      	ldr	r3, [pc, #48]	; (1000a5c4 <sms_button_toggle_interrupt+0x3c>)
1000a592:	7858      	ldrb	r0, [r3, #1]
1000a594:	4b0c      	ldr	r3, [pc, #48]	; (1000a5c8 <sms_button_toggle_interrupt+0x40>)
1000a596:	4798      	blx	r3
1000a598:	e005      	b.n	1000a5a6 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a59a:	2801      	cmp	r0, #1
1000a59c:	d103      	bne.n	1000a5a6 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a59e:	4b09      	ldr	r3, [pc, #36]	; (1000a5c4 <sms_button_toggle_interrupt+0x3c>)
1000a5a0:	7858      	ldrb	r0, [r3, #1]
1000a5a2:	4b0a      	ldr	r3, [pc, #40]	; (1000a5cc <sms_button_toggle_interrupt+0x44>)
1000a5a4:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a5a6:	2c00      	cmp	r4, #0
1000a5a8:	d104      	bne.n	1000a5b4 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a5aa:	4b09      	ldr	r3, [pc, #36]	; (1000a5d0 <sms_button_toggle_interrupt+0x48>)
1000a5ac:	7858      	ldrb	r0, [r3, #1]
1000a5ae:	4b06      	ldr	r3, [pc, #24]	; (1000a5c8 <sms_button_toggle_interrupt+0x40>)
1000a5b0:	4798      	blx	r3
1000a5b2:	e005      	b.n	1000a5c0 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a5b4:	2c01      	cmp	r4, #1
1000a5b6:	d103      	bne.n	1000a5c0 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a5b8:	4b05      	ldr	r3, [pc, #20]	; (1000a5d0 <sms_button_toggle_interrupt+0x48>)
1000a5ba:	7858      	ldrb	r0, [r3, #1]
1000a5bc:	4b03      	ldr	r3, [pc, #12]	; (1000a5cc <sms_button_toggle_interrupt+0x44>)
1000a5be:	4798      	blx	r3
    }
}
1000a5c0:	bd10      	pop	{r4, pc}
1000a5c2:	46c0      	nop			; (mov r8, r8)
1000a5c4:	10019830 	.word	0x10019830
1000a5c8:	1000c1c5 	.word	0x1000c1c5
1000a5cc:	1000c221 	.word	0x1000c221
1000a5d0:	100198cc 	.word	0x100198cc

1000a5d4 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a5d4:	b510      	push	{r4, lr}
1000a5d6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a5d8:	466b      	mov	r3, sp
1000a5da:	1dda      	adds	r2, r3, #7
1000a5dc:	2300      	movs	r3, #0
1000a5de:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a5e0:	4c0d      	ldr	r4, [pc, #52]	; (1000a618 <sms_button_define_services+0x44>)
1000a5e2:	0021      	movs	r1, r4
1000a5e4:	2000      	movs	r0, #0
1000a5e6:	4b0d      	ldr	r3, [pc, #52]	; (1000a61c <sms_button_define_services+0x48>)
1000a5e8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a5ea:	0020      	movs	r0, r4
1000a5ec:	4b0c      	ldr	r3, [pc, #48]	; (1000a620 <sms_button_define_services+0x4c>)
1000a5ee:	4798      	blx	r3
1000a5f0:	1e04      	subs	r4, r0, #0
1000a5f2:	d007      	beq.n	1000a604 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a5f4:	480b      	ldr	r0, [pc, #44]	; (1000a624 <sms_button_define_services+0x50>)
1000a5f6:	4b0c      	ldr	r3, [pc, #48]	; (1000a628 <sms_button_define_services+0x54>)
1000a5f8:	4798      	blx	r3
1000a5fa:	0021      	movs	r1, r4
1000a5fc:	480b      	ldr	r0, [pc, #44]	; (1000a62c <sms_button_define_services+0x58>)
1000a5fe:	4b0c      	ldr	r3, [pc, #48]	; (1000a630 <sms_button_define_services+0x5c>)
1000a600:	4798      	blx	r3
1000a602:	e007      	b.n	1000a614 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a604:	4807      	ldr	r0, [pc, #28]	; (1000a624 <sms_button_define_services+0x50>)
1000a606:	4b08      	ldr	r3, [pc, #32]	; (1000a628 <sms_button_define_services+0x54>)
1000a608:	4798      	blx	r3
1000a60a:	4b0a      	ldr	r3, [pc, #40]	; (1000a634 <sms_button_define_services+0x60>)
1000a60c:	8ad9      	ldrh	r1, [r3, #22]
1000a60e:	480a      	ldr	r0, [pc, #40]	; (1000a638 <sms_button_define_services+0x64>)
1000a610:	4b07      	ldr	r3, [pc, #28]	; (1000a630 <sms_button_define_services+0x5c>)
1000a612:	4798      	blx	r3
    }
1000a614:	b002      	add	sp, #8
1000a616:	bd10      	pop	{r4, pc}
1000a618:	100198d4 	.word	0x100198d4
1000a61c:	1000a0dd 	.word	0x1000a0dd
1000a620:	1000a0b9 	.word	0x1000a0b9
1000a624:	10015df4 	.word	0x10015df4
1000a628:	10014c49 	.word	0x10014c49
1000a62c:	100165b4 	.word	0x100165b4
1000a630:	10014b29 	.word	0x10014b29
1000a634:	100198d0 	.word	0x100198d0
1000a638:	100165f8 	.word	0x100165f8

1000a63c <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a63c:	b510      	push	{r4, lr}
1000a63e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a640:	ac01      	add	r4, sp, #4
1000a642:	0020      	movs	r0, r4
1000a644:	4b0a      	ldr	r3, [pc, #40]	; (1000a670 <sms_monitor_configure_gpio+0x34>)
1000a646:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a648:	2301      	movs	r3, #1
1000a64a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a64c:	0021      	movs	r1, r4
1000a64e:	2002      	movs	r0, #2
1000a650:	4b08      	ldr	r3, [pc, #32]	; (1000a674 <sms_monitor_configure_gpio+0x38>)
1000a652:	4798      	blx	r3
1000a654:	2800      	cmp	r0, #0
1000a656:	d005      	beq.n	1000a664 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a658:	4807      	ldr	r0, [pc, #28]	; (1000a678 <sms_monitor_configure_gpio+0x3c>)
1000a65a:	4b08      	ldr	r3, [pc, #32]	; (1000a67c <sms_monitor_configure_gpio+0x40>)
1000a65c:	4798      	blx	r3
1000a65e:	4808      	ldr	r0, [pc, #32]	; (1000a680 <sms_monitor_configure_gpio+0x44>)
1000a660:	4b08      	ldr	r3, [pc, #32]	; (1000a684 <sms_monitor_configure_gpio+0x48>)
1000a662:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a664:	2100      	movs	r1, #0
1000a666:	2002      	movs	r0, #2
1000a668:	4b07      	ldr	r3, [pc, #28]	; (1000a688 <sms_monitor_configure_gpio+0x4c>)
1000a66a:	4798      	blx	r3
}
1000a66c:	b002      	add	sp, #8
1000a66e:	bd10      	pop	{r4, pc}
1000a670:	1000bcb5 	.word	0x1000bcb5
1000a674:	1000bcc5 	.word	0x1000bcc5
1000a678:	10015df4 	.word	0x10015df4
1000a67c:	10014c49 	.word	0x10014c49
1000a680:	10016640 	.word	0x10016640
1000a684:	10014b29 	.word	0x10014b29
1000a688:	1000bf1d 	.word	0x1000bf1d

1000a68c <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a68c:	b570      	push	{r4, r5, r6, lr}
1000a68e:	b084      	sub	sp, #16
1000a690:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a692:	480c      	ldr	r0, [pc, #48]	; (1000a6c4 <sms_monitor_get_states+0x38>)
1000a694:	4b0c      	ldr	r3, [pc, #48]	; (1000a6c8 <sms_monitor_get_states+0x3c>)
1000a696:	4798      	blx	r3
1000a698:	4b0c      	ldr	r3, [pc, #48]	; (1000a6cc <sms_monitor_get_states+0x40>)
1000a69a:	7819      	ldrb	r1, [r3, #0]
1000a69c:	4b0c      	ldr	r3, [pc, #48]	; (1000a6d0 <sms_monitor_get_states+0x44>)
1000a69e:	7818      	ldrb	r0, [r3, #0]
1000a6a0:	4b0c      	ldr	r3, [pc, #48]	; (1000a6d4 <sms_monitor_get_states+0x48>)
1000a6a2:	781d      	ldrb	r5, [r3, #0]
1000a6a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a6d8 <sms_monitor_get_states+0x4c>)
1000a6a6:	781e      	ldrb	r6, [r3, #0]
1000a6a8:	4a0c      	ldr	r2, [pc, #48]	; (1000a6dc <sms_monitor_get_states+0x50>)
1000a6aa:	7853      	ldrb	r3, [r2, #1]
1000a6ac:	7812      	ldrb	r2, [r2, #0]
1000a6ae:	9603      	str	r6, [sp, #12]
1000a6b0:	9502      	str	r5, [sp, #8]
1000a6b2:	9001      	str	r0, [sp, #4]
1000a6b4:	9100      	str	r1, [sp, #0]
1000a6b6:	0021      	movs	r1, r4
1000a6b8:	4809      	ldr	r0, [pc, #36]	; (1000a6e0 <sms_monitor_get_states+0x54>)
1000a6ba:	4c0a      	ldr	r4, [pc, #40]	; (1000a6e4 <sms_monitor_get_states+0x58>)
1000a6bc:	47a0      	blx	r4
}
1000a6be:	b004      	add	sp, #16
1000a6c0:	bd70      	pop	{r4, r5, r6, pc}
1000a6c2:	46c0      	nop			; (mov r8, r8)
1000a6c4:	10015df4 	.word	0x10015df4
1000a6c8:	10014c49 	.word	0x10014c49
1000a6cc:	100199e0 	.word	0x100199e0
1000a6d0:	10019834 	.word	0x10019834
1000a6d4:	100199e1 	.word	0x100199e1
1000a6d8:	100198c8 	.word	0x100198c8
1000a6dc:	100198d0 	.word	0x100198d0
1000a6e0:	10016660 	.word	0x10016660
1000a6e4:	10014b29 	.word	0x10014b29

1000a6e8 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a6e8:	b530      	push	{r4, r5, lr}
1000a6ea:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a6ec:	2010      	movs	r0, #16
1000a6ee:	4c14      	ldr	r4, [pc, #80]	; (1000a740 <sms_i2c_master_configure+0x58>)
1000a6f0:	47a0      	blx	r4
1000a6f2:	4b14      	ldr	r3, [pc, #80]	; (1000a744 <sms_i2c_master_configure+0x5c>)
1000a6f4:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a6f6:	2010      	movs	r0, #16
1000a6f8:	47a0      	blx	r4
1000a6fa:	4b13      	ldr	r3, [pc, #76]	; (1000a748 <sms_i2c_master_configure+0x60>)
1000a6fc:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a6fe:	ac01      	add	r4, sp, #4
1000a700:	0020      	movs	r0, r4
1000a702:	4b12      	ldr	r3, [pc, #72]	; (1000a74c <sms_i2c_master_configure+0x64>)
1000a704:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a706:	2301      	movs	r3, #1
1000a708:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a70a:	3381      	adds	r3, #129	; 0x81
1000a70c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a70e:	3b7a      	subs	r3, #122	; 0x7a
1000a710:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a712:	3301      	adds	r3, #1
1000a714:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a716:	3b07      	subs	r3, #7
1000a718:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a71a:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a71c:	4d0c      	ldr	r5, [pc, #48]	; (1000a750 <sms_i2c_master_configure+0x68>)
1000a71e:	4c0d      	ldr	r4, [pc, #52]	; (1000a754 <sms_i2c_master_configure+0x6c>)
1000a720:	aa01      	add	r2, sp, #4
1000a722:	490d      	ldr	r1, [pc, #52]	; (1000a758 <sms_i2c_master_configure+0x70>)
1000a724:	0028      	movs	r0, r5
1000a726:	47a0      	blx	r4
1000a728:	2800      	cmp	r0, #0
1000a72a:	d1f9      	bne.n	1000a720 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a72c:	4b08      	ldr	r3, [pc, #32]	; (1000a750 <sms_i2c_master_configure+0x68>)
1000a72e:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a730:	2128      	movs	r1, #40	; 0x28
1000a732:	5c53      	ldrb	r3, [r2, r1]
1000a734:	07db      	lsls	r3, r3, #31
1000a736:	d4fc      	bmi.n	1000a732 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a738:	2301      	movs	r3, #1
1000a73a:	7513      	strb	r3, [r2, #20]
}
1000a73c:	b007      	add	sp, #28
1000a73e:	bd30      	pop	{r4, r5, pc}
1000a740:	1001499d 	.word	0x1001499d
1000a744:	100199ec 	.word	0x100199ec
1000a748:	100199cc 	.word	0x100199cc
1000a74c:	1000839d 	.word	0x1000839d
1000a750:	100199d8 	.word	0x100199d8
1000a754:	100083b5 	.word	0x100083b5
1000a758:	40003000 	.word	0x40003000

1000a75c <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a75e:	4c12      	ldr	r4, [pc, #72]	; (1000a7a8 <sms_i2c_master_write+0x4c>)
1000a760:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a762:	1c50      	adds	r0, r2, #1
1000a764:	b2c0      	uxtb	r0, r0
1000a766:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a768:	6860      	ldr	r0, [r4, #4]
1000a76a:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a76c:	2a00      	cmp	r2, #0
1000a76e:	d00e      	beq.n	1000a78e <sms_i2c_master_write+0x32>
1000a770:	2000      	movs	r0, #0
1000a772:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a774:	5c18      	ldrb	r0, [r3, r0]
1000a776:	6865      	ldr	r5, [r4, #4]
1000a778:	5468      	strb	r0, [r5, r1]
1000a77a:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a77c:	b2c9      	uxtb	r1, r1
1000a77e:	428a      	cmp	r2, r1
1000a780:	d8f7      	bhi.n	1000a772 <sms_i2c_master_write+0x16>
1000a782:	e004      	b.n	1000a78e <sms_i2c_master_write+0x32>
1000a784:	3c01      	subs	r4, #1
1000a786:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a788:	2c00      	cmp	r4, #0
1000a78a:	d104      	bne.n	1000a796 <sms_i2c_master_write+0x3a>
1000a78c:	e009      	b.n	1000a7a2 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a78e:	4c07      	ldr	r4, [pc, #28]	; (1000a7ac <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a790:	4e05      	ldr	r6, [pc, #20]	; (1000a7a8 <sms_i2c_master_write+0x4c>)
1000a792:	4d07      	ldr	r5, [pc, #28]	; (1000a7b0 <sms_i2c_master_write+0x54>)
1000a794:	4f07      	ldr	r7, [pc, #28]	; (1000a7b4 <sms_i2c_master_write+0x58>)
1000a796:	0031      	movs	r1, r6
1000a798:	0028      	movs	r0, r5
1000a79a:	47b8      	blx	r7
1000a79c:	2800      	cmp	r0, #0
1000a79e:	d1f1      	bne.n	1000a784 <sms_i2c_master_write+0x28>
1000a7a0:	e001      	b.n	1000a7a6 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a7a2:	2001      	movs	r0, #1
1000a7a4:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a7a8:	100199ec 	.word	0x100199ec
1000a7ac:	000003e9 	.word	0x000003e9
1000a7b0:	100199d8 	.word	0x100199d8
1000a7b4:	1000844d 	.word	0x1000844d

1000a7b8 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7ba:	4647      	mov	r7, r8
1000a7bc:	b480      	push	{r7}
1000a7be:	0017      	movs	r7, r2
1000a7c0:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a7c2:	b280      	uxth	r0, r0
1000a7c4:	4b1d      	ldr	r3, [pc, #116]	; (1000a83c <sms_i2c_master_read+0x84>)
1000a7c6:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a7c8:	2201      	movs	r2, #1
1000a7ca:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a7cc:	685b      	ldr	r3, [r3, #4]
1000a7ce:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a7d0:	4b1b      	ldr	r3, [pc, #108]	; (1000a840 <sms_i2c_master_read+0x88>)
1000a7d2:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a7d4:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a7d6:	4c1b      	ldr	r4, [pc, #108]	; (1000a844 <sms_i2c_master_read+0x8c>)
1000a7d8:	4e18      	ldr	r6, [pc, #96]	; (1000a83c <sms_i2c_master_read+0x84>)
1000a7da:	4d1b      	ldr	r5, [pc, #108]	; (1000a848 <sms_i2c_master_read+0x90>)
1000a7dc:	e003      	b.n	1000a7e6 <sms_i2c_master_read+0x2e>
1000a7de:	3c01      	subs	r4, #1
1000a7e0:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000a7e2:	2c00      	cmp	r4, #0
1000a7e4:	d01f      	beq.n	1000a826 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a7e6:	0031      	movs	r1, r6
1000a7e8:	4818      	ldr	r0, [pc, #96]	; (1000a84c <sms_i2c_master_read+0x94>)
1000a7ea:	47a8      	blx	r5
1000a7ec:	2800      	cmp	r0, #0
1000a7ee:	d1f6      	bne.n	1000a7de <sms_i2c_master_read+0x26>
1000a7f0:	4e14      	ldr	r6, [pc, #80]	; (1000a844 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a7f2:	4d13      	ldr	r5, [pc, #76]	; (1000a840 <sms_i2c_master_read+0x88>)
1000a7f4:	4c16      	ldr	r4, [pc, #88]	; (1000a850 <sms_i2c_master_read+0x98>)
1000a7f6:	e003      	b.n	1000a800 <sms_i2c_master_read+0x48>
1000a7f8:	3e01      	subs	r6, #1
1000a7fa:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000a7fc:	2e00      	cmp	r6, #0
1000a7fe:	d015      	beq.n	1000a82c <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a800:	0029      	movs	r1, r5
1000a802:	4812      	ldr	r0, [pc, #72]	; (1000a84c <sms_i2c_master_read+0x94>)
1000a804:	47a0      	blx	r4
1000a806:	2800      	cmp	r0, #0
1000a808:	d1f6      	bne.n	1000a7f8 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a80a:	2f00      	cmp	r7, #0
1000a80c:	d011      	beq.n	1000a832 <sms_i2c_master_read+0x7a>
1000a80e:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000a810:	490b      	ldr	r1, [pc, #44]	; (1000a840 <sms_i2c_master_read+0x88>)
1000a812:	684a      	ldr	r2, [r1, #4]
1000a814:	5cd2      	ldrb	r2, [r2, r3]
1000a816:	4640      	mov	r0, r8
1000a818:	54c2      	strb	r2, [r0, r3]
1000a81a:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a81c:	b2da      	uxtb	r2, r3
1000a81e:	4297      	cmp	r7, r2
1000a820:	d8f7      	bhi.n	1000a812 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a822:	2000      	movs	r0, #0
1000a824:	e006      	b.n	1000a834 <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a826:	2001      	movs	r0, #1
1000a828:	4240      	negs	r0, r0
1000a82a:	e003      	b.n	1000a834 <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a82c:	2001      	movs	r0, #1
1000a82e:	4240      	negs	r0, r0
1000a830:	e000      	b.n	1000a834 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a832:	2000      	movs	r0, #0
1000a834:	bc04      	pop	{r2}
1000a836:	4690      	mov	r8, r2
1000a838:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a83a:	46c0      	nop			; (mov r8, r8)
1000a83c:	100199ec 	.word	0x100199ec
1000a840:	100199cc 	.word	0x100199cc
1000a844:	000003e9 	.word	0x000003e9
1000a848:	10008471 	.word	0x10008471
1000a84c:	100199d8 	.word	0x100199d8
1000a850:	10008429 	.word	0x10008429

1000a854 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000a854:	b510      	push	{r4, lr}
1000a856:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a858:	ac01      	add	r4, sp, #4
1000a85a:	0020      	movs	r0, r4
1000a85c:	4b15      	ldr	r3, [pc, #84]	; (1000a8b4 <sms_mpu_configure_gpio+0x60>)
1000a85e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a860:	2300      	movs	r3, #0
1000a862:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a864:	3302      	adds	r3, #2
1000a866:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a868:	3b01      	subs	r3, #1
1000a86a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000a86c:	0021      	movs	r1, r4
1000a86e:	201e      	movs	r0, #30
1000a870:	4b11      	ldr	r3, [pc, #68]	; (1000a8b8 <sms_mpu_configure_gpio+0x64>)
1000a872:	4798      	blx	r3
1000a874:	2800      	cmp	r0, #0
1000a876:	d005      	beq.n	1000a884 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000a878:	4810      	ldr	r0, [pc, #64]	; (1000a8bc <sms_mpu_configure_gpio+0x68>)
1000a87a:	4b11      	ldr	r3, [pc, #68]	; (1000a8c0 <sms_mpu_configure_gpio+0x6c>)
1000a87c:	4798      	blx	r3
1000a87e:	4811      	ldr	r0, [pc, #68]	; (1000a8c4 <sms_mpu_configure_gpio+0x70>)
1000a880:	4b11      	ldr	r3, [pc, #68]	; (1000a8c8 <sms_mpu_configure_gpio+0x74>)
1000a882:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a884:	ac01      	add	r4, sp, #4
1000a886:	0020      	movs	r0, r4
1000a888:	4b0a      	ldr	r3, [pc, #40]	; (1000a8b4 <sms_mpu_configure_gpio+0x60>)
1000a88a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a88c:	2301      	movs	r3, #1
1000a88e:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000a890:	0021      	movs	r1, r4
1000a892:	2006      	movs	r0, #6
1000a894:	4b08      	ldr	r3, [pc, #32]	; (1000a8b8 <sms_mpu_configure_gpio+0x64>)
1000a896:	4798      	blx	r3
1000a898:	2800      	cmp	r0, #0
1000a89a:	d105      	bne.n	1000a8a8 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
1000a89c:	4807      	ldr	r0, [pc, #28]	; (1000a8bc <sms_mpu_configure_gpio+0x68>)
1000a89e:	4b08      	ldr	r3, [pc, #32]	; (1000a8c0 <sms_mpu_configure_gpio+0x6c>)
1000a8a0:	4798      	blx	r3
1000a8a2:	480a      	ldr	r0, [pc, #40]	; (1000a8cc <sms_mpu_configure_gpio+0x78>)
1000a8a4:	4b08      	ldr	r3, [pc, #32]	; (1000a8c8 <sms_mpu_configure_gpio+0x74>)
1000a8a6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000a8a8:	2101      	movs	r1, #1
1000a8aa:	2006      	movs	r0, #6
1000a8ac:	4b08      	ldr	r3, [pc, #32]	; (1000a8d0 <sms_mpu_configure_gpio+0x7c>)
1000a8ae:	4798      	blx	r3
}
1000a8b0:	b002      	add	sp, #8
1000a8b2:	bd10      	pop	{r4, pc}
1000a8b4:	1000bcb5 	.word	0x1000bcb5
1000a8b8:	1000bcc5 	.word	0x1000bcc5
1000a8bc:	10015df4 	.word	0x10015df4
1000a8c0:	10014c49 	.word	0x10014c49
1000a8c4:	100166a0 	.word	0x100166a0
1000a8c8:	10014b29 	.word	0x10014b29
1000a8cc:	100166e0 	.word	0x100166e0
1000a8d0:	1000bf1d 	.word	0x1000bf1d

1000a8d4 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000a8d4:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000a8d6:	4825      	ldr	r0, [pc, #148]	; (1000a96c <sms_mpu_initialize+0x98>)
1000a8d8:	4b25      	ldr	r3, [pc, #148]	; (1000a970 <sms_mpu_initialize+0x9c>)
1000a8da:	4798      	blx	r3
1000a8dc:	4825      	ldr	r0, [pc, #148]	; (1000a974 <sms_mpu_initialize+0xa0>)
1000a8de:	4b26      	ldr	r3, [pc, #152]	; (1000a978 <sms_mpu_initialize+0xa4>)
1000a8e0:	4798      	blx	r3
    res = mpu_init(NULL);
1000a8e2:	2000      	movs	r0, #0
1000a8e4:	4b25      	ldr	r3, [pc, #148]	; (1000a97c <sms_mpu_initialize+0xa8>)
1000a8e6:	4798      	blx	r3
    if(res) {
1000a8e8:	2800      	cmp	r0, #0
1000a8ea:	d005      	beq.n	1000a8f8 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000a8ec:	4824      	ldr	r0, [pc, #144]	; (1000a980 <sms_mpu_initialize+0xac>)
1000a8ee:	4b22      	ldr	r3, [pc, #136]	; (1000a978 <sms_mpu_initialize+0xa4>)
1000a8f0:	4798      	blx	r3
        return -1;
1000a8f2:	2001      	movs	r0, #1
1000a8f4:	4240      	negs	r0, r0
1000a8f6:	e037      	b.n	1000a968 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000a8f8:	481c      	ldr	r0, [pc, #112]	; (1000a96c <sms_mpu_initialize+0x98>)
1000a8fa:	4b1d      	ldr	r3, [pc, #116]	; (1000a970 <sms_mpu_initialize+0x9c>)
1000a8fc:	4798      	blx	r3
1000a8fe:	4821      	ldr	r0, [pc, #132]	; (1000a984 <sms_mpu_initialize+0xb0>)
1000a900:	4b1d      	ldr	r3, [pc, #116]	; (1000a978 <sms_mpu_initialize+0xa4>)
1000a902:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000a904:	2079      	movs	r0, #121	; 0x79
1000a906:	4b20      	ldr	r3, [pc, #128]	; (1000a988 <sms_mpu_initialize+0xb4>)
1000a908:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000a90a:	2078      	movs	r0, #120	; 0x78
1000a90c:	4b1f      	ldr	r3, [pc, #124]	; (1000a98c <sms_mpu_initialize+0xb8>)
1000a90e:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a910:	2001      	movs	r0, #1
1000a912:	4b1f      	ldr	r3, [pc, #124]	; (1000a990 <sms_mpu_initialize+0xbc>)
1000a914:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000a916:	2001      	movs	r0, #1
1000a918:	4b1e      	ldr	r3, [pc, #120]	; (1000a994 <sms_mpu_initialize+0xc0>)
1000a91a:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000a91c:	4d1e      	ldr	r5, [pc, #120]	; (1000a998 <sms_mpu_initialize+0xc4>)
1000a91e:	0028      	movs	r0, r5
1000a920:	4b1e      	ldr	r3, [pc, #120]	; (1000a99c <sms_mpu_initialize+0xc8>)
1000a922:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000a924:	1f68      	subs	r0, r5, #5
1000a926:	4b1e      	ldr	r3, [pc, #120]	; (1000a9a0 <sms_mpu_initialize+0xcc>)
1000a928:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000a92a:	1ea8      	subs	r0, r5, #2
1000a92c:	4b1d      	ldr	r3, [pc, #116]	; (1000a9a4 <sms_mpu_initialize+0xd0>)
1000a92e:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a930:	002c      	movs	r4, r5
1000a932:	2307      	movs	r3, #7
1000a934:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000a936:	20f0      	movs	r0, #240	; 0xf0
1000a938:	0040      	lsls	r0, r0, #1
1000a93a:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a93c:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000a93e:	4b1a      	ldr	r3, [pc, #104]	; (1000a9a8 <sms_mpu_initialize+0xd4>)
1000a940:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a942:	2001      	movs	r0, #1
1000a944:	4b19      	ldr	r3, [pc, #100]	; (1000a9ac <sms_mpu_initialize+0xd8>)
1000a946:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000a948:	2001      	movs	r0, #1
1000a94a:	4b19      	ldr	r3, [pc, #100]	; (1000a9b0 <sms_mpu_initialize+0xdc>)
1000a94c:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000a94e:	2201      	movs	r2, #1
1000a950:	2326      	movs	r3, #38	; 0x26
1000a952:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000a954:	2300      	movs	r3, #0
1000a956:	322c      	adds	r2, #44	; 0x2c
1000a958:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000a95a:	3a01      	subs	r2, #1
1000a95c:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000a95e:	3202      	adds	r2, #2
1000a960:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000a962:	3201      	adds	r2, #1
1000a964:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000a966:	2000      	movs	r0, #0
}
1000a968:	bd70      	pop	{r4, r5, r6, pc}
1000a96a:	46c0      	nop			; (mov r8, r8)
1000a96c:	10015df4 	.word	0x10015df4
1000a970:	10014c49 	.word	0x10014c49
1000a974:	10016720 	.word	0x10016720
1000a978:	10014b29 	.word	0x10014b29
1000a97c:	10009061 	.word	0x10009061
1000a980:	10016734 	.word	0x10016734
1000a984:	10016740 	.word	0x10016740
1000a988:	10008e79 	.word	0x10008e79
1000a98c:	10008a01 	.word	0x10008a01
1000a990:	10008da5 	.word	0x10008da5
1000a994:	10008989 	.word	0x10008989
1000a998:	10019842 	.word	0x10019842
1000a99c:	1000896d 	.word	0x1000896d
1000a9a0:	100087d1 	.word	0x100087d1
1000a9a4:	100094ad 	.word	0x100094ad
1000a9a8:	1000991d 	.word	0x1000991d
1000a9ac:	100094bd 	.word	0x100094bd
1000a9b0:	10009409 	.word	0x10009409

1000a9b4 <sms_mpu_define_services>:

    return 0;
}

void sms_mpu_define_services(void)
{
1000a9b4:	b510      	push	{r4, lr}
1000a9b6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a9b8:	466b      	mov	r3, sp
1000a9ba:	1dda      	adds	r2, r3, #7
1000a9bc:	2300      	movs	r3, #0
1000a9be:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000a9c0:	4c0e      	ldr	r4, [pc, #56]	; (1000a9fc <sms_mpu_define_services+0x48>)
1000a9c2:	0021      	movs	r1, r4
1000a9c4:	2002      	movs	r0, #2
1000a9c6:	4b0e      	ldr	r3, [pc, #56]	; (1000aa00 <sms_mpu_define_services+0x4c>)
1000a9c8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000a9ca:	0020      	movs	r0, r4
1000a9cc:	4b0d      	ldr	r3, [pc, #52]	; (1000aa04 <sms_mpu_define_services+0x50>)
1000a9ce:	4798      	blx	r3
1000a9d0:	1e04      	subs	r4, r0, #0
1000a9d2:	d007      	beq.n	1000a9e4 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000a9d4:	480c      	ldr	r0, [pc, #48]	; (1000aa08 <sms_mpu_define_services+0x54>)
1000a9d6:	4b0d      	ldr	r3, [pc, #52]	; (1000aa0c <sms_mpu_define_services+0x58>)
1000a9d8:	4798      	blx	r3
1000a9da:	0021      	movs	r1, r4
1000a9dc:	480c      	ldr	r0, [pc, #48]	; (1000aa10 <sms_mpu_define_services+0x5c>)
1000a9de:	4b0d      	ldr	r3, [pc, #52]	; (1000aa14 <sms_mpu_define_services+0x60>)
1000a9e0:	4798      	blx	r3
1000a9e2:	e008      	b.n	1000a9f6 <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000a9e4:	4808      	ldr	r0, [pc, #32]	; (1000aa08 <sms_mpu_define_services+0x54>)
1000a9e6:	4b09      	ldr	r3, [pc, #36]	; (1000aa0c <sms_mpu_define_services+0x58>)
1000a9e8:	4798      	blx	r3
1000a9ea:	2346      	movs	r3, #70	; 0x46
1000a9ec:	4a0a      	ldr	r2, [pc, #40]	; (1000aa18 <sms_mpu_define_services+0x64>)
1000a9ee:	5ad1      	ldrh	r1, [r2, r3]
1000a9f0:	480a      	ldr	r0, [pc, #40]	; (1000aa1c <sms_mpu_define_services+0x68>)
1000a9f2:	4b08      	ldr	r3, [pc, #32]	; (1000aa14 <sms_mpu_define_services+0x60>)
1000a9f4:	4798      	blx	r3
    }
1000a9f6:	b002      	add	sp, #8
1000a9f8:	bd10      	pop	{r4, pc}
1000a9fa:	46c0      	nop			; (mov r8, r8)
1000a9fc:	1001986c 	.word	0x1001986c
1000aa00:	1000a0dd 	.word	0x1000a0dd
1000aa04:	1000a0b9 	.word	0x1000a0b9
1000aa08:	10015df4 	.word	0x10015df4
1000aa0c:	10014c49 	.word	0x10014c49
1000aa10:	10016754 	.word	0x10016754
1000aa14:	10014b29 	.word	0x10014b29
1000aa18:	10019838 	.word	0x10019838
1000aa1c:	10016794 	.word	0x10016794

1000aa20 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000aa20:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000aa22:	2100      	movs	r1, #0
1000aa24:	4b01      	ldr	r3, [pc, #4]	; (1000aa2c <sms_led_switch_on+0xc>)
1000aa26:	4798      	blx	r3
}
1000aa28:	bd10      	pop	{r4, pc}
1000aa2a:	46c0      	nop			; (mov r8, r8)
1000aa2c:	1000bf1d 	.word	0x1000bf1d

1000aa30 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000aa30:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000aa32:	2101      	movs	r1, #1
1000aa34:	4b01      	ldr	r3, [pc, #4]	; (1000aa3c <sms_led_switch_off+0xc>)
1000aa36:	4798      	blx	r3
}
1000aa38:	bd10      	pop	{r4, pc}
1000aa3a:	46c0      	nop			; (mov r8, r8)
1000aa3c:	1000bf1d 	.word	0x1000bf1d

1000aa40 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000aa40:	b510      	push	{r4, lr}
1000aa42:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000aa44:	ac01      	add	r4, sp, #4
1000aa46:	0020      	movs	r0, r4
1000aa48:	4b0a      	ldr	r3, [pc, #40]	; (1000aa74 <sms_led_gpio_init+0x34>)
1000aa4a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000aa4c:	2301      	movs	r3, #1
1000aa4e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000aa50:	0021      	movs	r1, r4
1000aa52:	2016      	movs	r0, #22
1000aa54:	4b08      	ldr	r3, [pc, #32]	; (1000aa78 <sms_led_gpio_init+0x38>)
1000aa56:	4798      	blx	r3
1000aa58:	2800      	cmp	r0, #0
1000aa5a:	d005      	beq.n	1000aa68 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000aa5c:	4807      	ldr	r0, [pc, #28]	; (1000aa7c <sms_led_gpio_init+0x3c>)
1000aa5e:	4b08      	ldr	r3, [pc, #32]	; (1000aa80 <sms_led_gpio_init+0x40>)
1000aa60:	4798      	blx	r3
1000aa62:	4808      	ldr	r0, [pc, #32]	; (1000aa84 <sms_led_gpio_init+0x44>)
1000aa64:	4b08      	ldr	r3, [pc, #32]	; (1000aa88 <sms_led_gpio_init+0x48>)
1000aa66:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000aa68:	2016      	movs	r0, #22
1000aa6a:	4b08      	ldr	r3, [pc, #32]	; (1000aa8c <sms_led_gpio_init+0x4c>)
1000aa6c:	4798      	blx	r3
}
1000aa6e:	b002      	add	sp, #8
1000aa70:	bd10      	pop	{r4, pc}
1000aa72:	46c0      	nop			; (mov r8, r8)
1000aa74:	1000bcb5 	.word	0x1000bcb5
1000aa78:	1000bcc5 	.word	0x1000bcc5
1000aa7c:	10015df4 	.word	0x10015df4
1000aa80:	10014c49 	.word	0x10014c49
1000aa84:	100167d4 	.word	0x100167d4
1000aa88:	10014b29 	.word	0x10014b29
1000aa8c:	1000aa31 	.word	0x1000aa31

1000aa90 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000aa90:	b510      	push	{r4, lr}
1000aa92:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000aa94:	4b05      	ldr	r3, [pc, #20]	; (1000aaac <sms_led_toggle+0x1c>)
1000aa96:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000aa98:	2800      	cmp	r0, #0
1000aa9a:	d103      	bne.n	1000aaa4 <sms_led_toggle+0x14>
1000aa9c:	0020      	movs	r0, r4
1000aa9e:	4b04      	ldr	r3, [pc, #16]	; (1000aab0 <sms_led_toggle+0x20>)
1000aaa0:	4798      	blx	r3
1000aaa2:	e002      	b.n	1000aaaa <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000aaa4:	0020      	movs	r0, r4
1000aaa6:	4b03      	ldr	r3, [pc, #12]	; (1000aab4 <sms_led_toggle+0x24>)
1000aaa8:	4798      	blx	r3
}
1000aaaa:	bd10      	pop	{r4, pc}
1000aaac:	1000becd 	.word	0x1000becd
1000aab0:	1000aa31 	.word	0x1000aa31
1000aab4:	1000aa21 	.word	0x1000aa21

1000aab8 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000aab8:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000aaba:	4b0c      	ldr	r3, [pc, #48]	; (1000aaec <sms_led_blink_start+0x34>)
1000aabc:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000aabe:	2200      	movs	r2, #0
1000aac0:	4b0b      	ldr	r3, [pc, #44]	; (1000aaf0 <sms_led_blink_start+0x38>)
1000aac2:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000aac4:	4b0b      	ldr	r3, [pc, #44]	; (1000aaf4 <sms_led_blink_start+0x3c>)
1000aac6:	781b      	ldrb	r3, [r3, #0]
1000aac8:	b2db      	uxtb	r3, r3
1000aaca:	2b02      	cmp	r3, #2
1000aacc:	d002      	beq.n	1000aad4 <sms_led_blink_start+0x1c>
1000aace:	2b03      	cmp	r3, #3
1000aad0:	d002      	beq.n	1000aad8 <sms_led_blink_start+0x20>
1000aad2:	e004      	b.n	1000aade <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000aad4:	2164      	movs	r1, #100	; 0x64
1000aad6:	e003      	b.n	1000aae0 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000aad8:	21c8      	movs	r1, #200	; 0xc8
1000aada:	0049      	lsls	r1, r1, #1
        break;
1000aadc:	e000      	b.n	1000aae0 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000aade:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000aae0:	2201      	movs	r2, #1
1000aae2:	2001      	movs	r0, #1
1000aae4:	4b04      	ldr	r3, [pc, #16]	; (1000aaf8 <sms_led_blink_start+0x40>)
1000aae6:	4798      	blx	r3
}
1000aae8:	bd10      	pop	{r4, pc}
1000aaea:	46c0      	nop			; (mov r8, r8)
1000aaec:	1000aa21 	.word	0x1000aa21
1000aaf0:	10019a08 	.word	0x10019a08
1000aaf4:	100199e1 	.word	0x100199e1
1000aaf8:	1000b1fd 	.word	0x1000b1fd

1000aafc <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000aafc:	b510      	push	{r4, lr}
1000aafe:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000ab00:	4a05      	ldr	r2, [pc, #20]	; (1000ab18 <sms_pressure_ms58_reset+0x1c>)
1000ab02:	231e      	movs	r3, #30
1000ab04:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ab06:	3b1d      	subs	r3, #29
1000ab08:	9300      	str	r3, [sp, #0]
1000ab0a:	4b04      	ldr	r3, [pc, #16]	; (1000ab1c <sms_pressure_ms58_reset+0x20>)
1000ab0c:	4904      	ldr	r1, [pc, #16]	; (1000ab20 <sms_pressure_ms58_reset+0x24>)
1000ab0e:	4805      	ldr	r0, [pc, #20]	; (1000ab24 <sms_pressure_ms58_reset+0x28>)
1000ab10:	4c05      	ldr	r4, [pc, #20]	; (1000ab28 <sms_pressure_ms58_reset+0x2c>)
1000ab12:	47a0      	blx	r4
}
1000ab14:	b002      	add	sp, #8
1000ab16:	bd10      	pop	{r4, pc}
1000ab18:	10019934 	.word	0x10019934
1000ab1c:	10019924 	.word	0x10019924
1000ab20:	100199e8 	.word	0x100199e8
1000ab24:	100199f4 	.word	0x100199f4
1000ab28:	1000b0d9 	.word	0x1000b0d9

1000ab2c <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab2e:	4657      	mov	r7, sl
1000ab30:	b480      	push	{r7}
1000ab32:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000ab34:	4d37      	ldr	r5, [pc, #220]	; (1000ac14 <sms_pressure_ms58_read_prom+0xe8>)
1000ab36:	23a2      	movs	r3, #162	; 0xa2
1000ab38:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000ab3a:	2300      	movs	r3, #0
1000ab3c:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000ab3e:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab40:	4c35      	ldr	r4, [pc, #212]	; (1000ac18 <sms_pressure_ms58_read_prom+0xec>)
1000ab42:	3303      	adds	r3, #3
1000ab44:	469a      	mov	sl, r3
1000ab46:	9300      	str	r3, [sp, #0]
1000ab48:	0023      	movs	r3, r4
1000ab4a:	002a      	movs	r2, r5
1000ab4c:	4933      	ldr	r1, [pc, #204]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000ab4e:	4834      	ldr	r0, [pc, #208]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000ab50:	4f34      	ldr	r7, [pc, #208]	; (1000ac24 <sms_pressure_ms58_read_prom+0xf8>)
1000ab52:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ab54:	4e34      	ldr	r6, [pc, #208]	; (1000ac28 <sms_pressure_ms58_read_prom+0xfc>)
1000ab56:	7863      	ldrb	r3, [r4, #1]
1000ab58:	021b      	lsls	r3, r3, #8
1000ab5a:	78a2      	ldrb	r2, [r4, #2]
1000ab5c:	4313      	orrs	r3, r2
1000ab5e:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000ab60:	23a4      	movs	r3, #164	; 0xa4
1000ab62:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab64:	4653      	mov	r3, sl
1000ab66:	9300      	str	r3, [sp, #0]
1000ab68:	0023      	movs	r3, r4
1000ab6a:	002a      	movs	r2, r5
1000ab6c:	492b      	ldr	r1, [pc, #172]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000ab6e:	482c      	ldr	r0, [pc, #176]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000ab70:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ab72:	7863      	ldrb	r3, [r4, #1]
1000ab74:	021b      	lsls	r3, r3, #8
1000ab76:	78a2      	ldrb	r2, [r4, #2]
1000ab78:	4313      	orrs	r3, r2
1000ab7a:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000ab7c:	23a6      	movs	r3, #166	; 0xa6
1000ab7e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab80:	4653      	mov	r3, sl
1000ab82:	9300      	str	r3, [sp, #0]
1000ab84:	0023      	movs	r3, r4
1000ab86:	002a      	movs	r2, r5
1000ab88:	4924      	ldr	r1, [pc, #144]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000ab8a:	4825      	ldr	r0, [pc, #148]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000ab8c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ab8e:	7863      	ldrb	r3, [r4, #1]
1000ab90:	021b      	lsls	r3, r3, #8
1000ab92:	78a2      	ldrb	r2, [r4, #2]
1000ab94:	4313      	orrs	r3, r2
1000ab96:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000ab98:	23a8      	movs	r3, #168	; 0xa8
1000ab9a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab9c:	4653      	mov	r3, sl
1000ab9e:	9300      	str	r3, [sp, #0]
1000aba0:	0023      	movs	r3, r4
1000aba2:	002a      	movs	r2, r5
1000aba4:	491d      	ldr	r1, [pc, #116]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000aba6:	481e      	ldr	r0, [pc, #120]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000aba8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abaa:	7863      	ldrb	r3, [r4, #1]
1000abac:	021b      	lsls	r3, r3, #8
1000abae:	78a2      	ldrb	r2, [r4, #2]
1000abb0:	4313      	orrs	r3, r2
1000abb2:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000abb4:	23aa      	movs	r3, #170	; 0xaa
1000abb6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abb8:	4653      	mov	r3, sl
1000abba:	9300      	str	r3, [sp, #0]
1000abbc:	0023      	movs	r3, r4
1000abbe:	002a      	movs	r2, r5
1000abc0:	4916      	ldr	r1, [pc, #88]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000abc2:	4817      	ldr	r0, [pc, #92]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000abc4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abc6:	7863      	ldrb	r3, [r4, #1]
1000abc8:	021b      	lsls	r3, r3, #8
1000abca:	78a2      	ldrb	r2, [r4, #2]
1000abcc:	4313      	orrs	r3, r2
1000abce:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000abd0:	23ac      	movs	r3, #172	; 0xac
1000abd2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abd4:	4653      	mov	r3, sl
1000abd6:	9300      	str	r3, [sp, #0]
1000abd8:	0023      	movs	r3, r4
1000abda:	002a      	movs	r2, r5
1000abdc:	490f      	ldr	r1, [pc, #60]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000abde:	4810      	ldr	r0, [pc, #64]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000abe0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abe2:	7863      	ldrb	r3, [r4, #1]
1000abe4:	021b      	lsls	r3, r3, #8
1000abe6:	78a2      	ldrb	r2, [r4, #2]
1000abe8:	4313      	orrs	r3, r2
1000abea:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000abec:	23ae      	movs	r3, #174	; 0xae
1000abee:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abf0:	4653      	mov	r3, sl
1000abf2:	9300      	str	r3, [sp, #0]
1000abf4:	0023      	movs	r3, r4
1000abf6:	002a      	movs	r2, r5
1000abf8:	4908      	ldr	r1, [pc, #32]	; (1000ac1c <sms_pressure_ms58_read_prom+0xf0>)
1000abfa:	4809      	ldr	r0, [pc, #36]	; (1000ac20 <sms_pressure_ms58_read_prom+0xf4>)
1000abfc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abfe:	7863      	ldrb	r3, [r4, #1]
1000ac00:	021b      	lsls	r3, r3, #8
1000ac02:	78a2      	ldrb	r2, [r4, #2]
1000ac04:	4313      	orrs	r3, r2
1000ac06:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000ac08:	2000      	movs	r0, #0
1000ac0a:	b002      	add	sp, #8
1000ac0c:	bc04      	pop	{r2}
1000ac0e:	4692      	mov	sl, r2
1000ac10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac12:	46c0      	nop			; (mov r8, r8)
1000ac14:	10019934 	.word	0x10019934
1000ac18:	10019924 	.word	0x10019924
1000ac1c:	100199e8 	.word	0x100199e8
1000ac20:	100199f4 	.word	0x100199f4
1000ac24:	1000b0d9 	.word	0x1000b0d9
1000ac28:	10019944 	.word	0x10019944

1000ac2c <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000ac2c:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000ac2e:	4b06      	ldr	r3, [pc, #24]	; (1000ac48 <sms_pressure_init+0x1c>)
1000ac30:	4798      	blx	r3
1000ac32:	2800      	cmp	r0, #0
1000ac34:	d106      	bne.n	1000ac44 <sms_pressure_init+0x18>
        pressure_device.hal.init_ok = true;
1000ac36:	4b05      	ldr	r3, [pc, #20]	; (1000ac4c <sms_pressure_init+0x20>)
1000ac38:	2201      	movs	r2, #1
1000ac3a:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000ac3c:	2102      	movs	r1, #2
1000ac3e:	3224      	adds	r2, #36	; 0x24
1000ac40:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000ac42:	e000      	b.n	1000ac46 <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000ac44:	2010      	movs	r0, #16
}
1000ac46:	bd10      	pop	{r4, pc}
1000ac48:	1000ab2d 	.word	0x1000ab2d
1000ac4c:	10019944 	.word	0x10019944

1000ac50 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000ac50:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000ac52:	4817      	ldr	r0, [pc, #92]	; (1000acb0 <sms_pressure_startup+0x60>)
1000ac54:	4b17      	ldr	r3, [pc, #92]	; (1000acb4 <sms_pressure_startup+0x64>)
1000ac56:	4798      	blx	r3
1000ac58:	4817      	ldr	r0, [pc, #92]	; (1000acb8 <sms_pressure_startup+0x68>)
1000ac5a:	4b18      	ldr	r3, [pc, #96]	; (1000acbc <sms_pressure_startup+0x6c>)
1000ac5c:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000ac5e:	2101      	movs	r1, #1
1000ac60:	2001      	movs	r0, #1
1000ac62:	4b17      	ldr	r3, [pc, #92]	; (1000acc0 <sms_pressure_startup+0x70>)
1000ac64:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000ac66:	2101      	movs	r1, #1
1000ac68:	2325      	movs	r3, #37	; 0x25
1000ac6a:	4a16      	ldr	r2, [pc, #88]	; (1000acc4 <sms_pressure_startup+0x74>)
1000ac6c:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000ac6e:	4b16      	ldr	r3, [pc, #88]	; (1000acc8 <sms_pressure_startup+0x78>)
1000ac70:	4798      	blx	r3
    delay_ms(3);
1000ac72:	2003      	movs	r0, #3
1000ac74:	4b15      	ldr	r3, [pc, #84]	; (1000accc <sms_pressure_startup+0x7c>)
1000ac76:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000ac78:	4b15      	ldr	r3, [pc, #84]	; (1000acd0 <sms_pressure_startup+0x80>)
1000ac7a:	4798      	blx	r3
1000ac7c:	2800      	cmp	r0, #0
1000ac7e:	d006      	beq.n	1000ac8e <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000ac80:	480b      	ldr	r0, [pc, #44]	; (1000acb0 <sms_pressure_startup+0x60>)
1000ac82:	4b0c      	ldr	r3, [pc, #48]	; (1000acb4 <sms_pressure_startup+0x64>)
1000ac84:	4798      	blx	r3
1000ac86:	4813      	ldr	r0, [pc, #76]	; (1000acd4 <sms_pressure_startup+0x84>)
1000ac88:	4b0c      	ldr	r3, [pc, #48]	; (1000acbc <sms_pressure_startup+0x6c>)
1000ac8a:	4798      	blx	r3
1000ac8c:	e7fe      	b.n	1000ac8c <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000ac8e:	4b0d      	ldr	r3, [pc, #52]	; (1000acc4 <sms_pressure_startup+0x74>)
1000ac90:	2102      	movs	r1, #2
1000ac92:	2225      	movs	r2, #37	; 0x25
1000ac94:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000ac96:	2401      	movs	r4, #1
1000ac98:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000ac9a:	3a1e      	subs	r2, #30
1000ac9c:	4b0e      	ldr	r3, [pc, #56]	; (1000acd8 <sms_pressure_startup+0x88>)
1000ac9e:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000aca0:	3901      	subs	r1, #1
1000aca2:	2001      	movs	r0, #1
1000aca4:	4b0d      	ldr	r3, [pc, #52]	; (1000acdc <sms_pressure_startup+0x8c>)
1000aca6:	4798      	blx	r3
    
    ulp_ready = true;
1000aca8:	4b0d      	ldr	r3, [pc, #52]	; (1000ace0 <sms_pressure_startup+0x90>)
1000acaa:	701c      	strb	r4, [r3, #0]
}
1000acac:	bd10      	pop	{r4, pc}
1000acae:	46c0      	nop			; (mov r8, r8)
1000acb0:	10015df4 	.word	0x10015df4
1000acb4:	10014c49 	.word	0x10014c49
1000acb8:	10016848 	.word	0x10016848
1000acbc:	10014b29 	.word	0x10014b29
1000acc0:	1000a589 	.word	0x1000a589
1000acc4:	10019944 	.word	0x10019944
1000acc8:	1000aafd 	.word	0x1000aafd
1000accc:	10008129 	.word	0x10008129
1000acd0:	1000ac2d 	.word	0x1000ac2d
1000acd4:	1001687c 	.word	0x1001687c
1000acd8:	100198c8 	.word	0x100198c8
1000acdc:	1000af51 	.word	0x1000af51
1000ace0:	100198c9 	.word	0x100198c9

1000ace4 <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000ace4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ace6:	4657      	mov	r7, sl
1000ace8:	464e      	mov	r6, r9
1000acea:	b4c0      	push	{r6, r7}
1000acec:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000acee:	2325      	movs	r3, #37	; 0x25
1000acf0:	4a2c      	ldr	r2, [pc, #176]	; (1000ada4 <sms_pressure_ms58_read_data+0xc0>)
1000acf2:	5cd3      	ldrb	r3, [r2, r3]
1000acf4:	2b03      	cmp	r3, #3
1000acf6:	d002      	beq.n	1000acfe <sms_pressure_ms58_read_data+0x1a>
1000acf8:	2b04      	cmp	r3, #4
1000acfa:	d025      	beq.n	1000ad48 <sms_pressure_ms58_read_data+0x64>
1000acfc:	e04b      	b.n	1000ad96 <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000acfe:	4c2a      	ldr	r4, [pc, #168]	; (1000ada8 <sms_pressure_ms58_read_data+0xc4>)
1000ad00:	2300      	movs	r3, #0
1000ad02:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ad04:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ad06:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000ad08:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000ad0a:	4d28      	ldr	r5, [pc, #160]	; (1000adac <sms_pressure_ms58_read_data+0xc8>)
1000ad0c:	2704      	movs	r7, #4
1000ad0e:	9700      	str	r7, [sp, #0]
1000ad10:	002b      	movs	r3, r5
1000ad12:	0022      	movs	r2, r4
1000ad14:	4926      	ldr	r1, [pc, #152]	; (1000adb0 <sms_pressure_ms58_read_data+0xcc>)
1000ad16:	4827      	ldr	r0, [pc, #156]	; (1000adb4 <sms_pressure_ms58_read_data+0xd0>)
1000ad18:	4e27      	ldr	r6, [pc, #156]	; (1000adb8 <sms_pressure_ms58_read_data+0xd4>)
1000ad1a:	46b2      	mov	sl, r6
1000ad1c:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000ad1e:	4e21      	ldr	r6, [pc, #132]	; (1000ada4 <sms_pressure_ms58_read_data+0xc0>)
1000ad20:	786b      	ldrb	r3, [r5, #1]
1000ad22:	041a      	lsls	r2, r3, #16
1000ad24:	78ab      	ldrb	r3, [r5, #2]
1000ad26:	021b      	lsls	r3, r3, #8
1000ad28:	4313      	orrs	r3, r2
1000ad2a:	78ea      	ldrb	r2, [r5, #3]
1000ad2c:	4313      	orrs	r3, r2
1000ad2e:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000ad30:	2352      	movs	r3, #82	; 0x52
1000ad32:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ad34:	3b51      	subs	r3, #81	; 0x51
1000ad36:	9300      	str	r3, [sp, #0]
1000ad38:	002b      	movs	r3, r5
1000ad3a:	0022      	movs	r2, r4
1000ad3c:	491c      	ldr	r1, [pc, #112]	; (1000adb0 <sms_pressure_ms58_read_data+0xcc>)
1000ad3e:	481d      	ldr	r0, [pc, #116]	; (1000adb4 <sms_pressure_ms58_read_data+0xd0>)
1000ad40:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000ad42:	2325      	movs	r3, #37	; 0x25
1000ad44:	54f7      	strb	r7, [r6, r3]
        break;
1000ad46:	e026      	b.n	1000ad96 <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000ad48:	4c17      	ldr	r4, [pc, #92]	; (1000ada8 <sms_pressure_ms58_read_data+0xc4>)
1000ad4a:	2300      	movs	r3, #0
1000ad4c:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ad4e:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ad50:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000ad52:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000ad54:	4d15      	ldr	r5, [pc, #84]	; (1000adac <sms_pressure_ms58_read_data+0xc8>)
1000ad56:	3304      	adds	r3, #4
1000ad58:	9300      	str	r3, [sp, #0]
1000ad5a:	002b      	movs	r3, r5
1000ad5c:	0022      	movs	r2, r4
1000ad5e:	4914      	ldr	r1, [pc, #80]	; (1000adb0 <sms_pressure_ms58_read_data+0xcc>)
1000ad60:	4814      	ldr	r0, [pc, #80]	; (1000adb4 <sms_pressure_ms58_read_data+0xd0>)
1000ad62:	4e15      	ldr	r6, [pc, #84]	; (1000adb8 <sms_pressure_ms58_read_data+0xd4>)
1000ad64:	46b1      	mov	r9, r6
1000ad66:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000ad68:	4e0e      	ldr	r6, [pc, #56]	; (1000ada4 <sms_pressure_ms58_read_data+0xc0>)
1000ad6a:	786b      	ldrb	r3, [r5, #1]
1000ad6c:	041a      	lsls	r2, r3, #16
1000ad6e:	78ab      	ldrb	r3, [r5, #2]
1000ad70:	021b      	lsls	r3, r3, #8
1000ad72:	4313      	orrs	r3, r2
1000ad74:	78ea      	ldrb	r2, [r5, #3]
1000ad76:	4313      	orrs	r3, r2
1000ad78:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000ad7a:	2342      	movs	r3, #66	; 0x42
1000ad7c:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ad7e:	2701      	movs	r7, #1
1000ad80:	9700      	str	r7, [sp, #0]
1000ad82:	002b      	movs	r3, r5
1000ad84:	0022      	movs	r2, r4
1000ad86:	490a      	ldr	r1, [pc, #40]	; (1000adb0 <sms_pressure_ms58_read_data+0xcc>)
1000ad88:	480a      	ldr	r0, [pc, #40]	; (1000adb4 <sms_pressure_ms58_read_data+0xd0>)
1000ad8a:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000ad8c:	2203      	movs	r2, #3
1000ad8e:	2325      	movs	r3, #37	; 0x25
1000ad90:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000ad92:	3b01      	subs	r3, #1
1000ad94:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000ad96:	2000      	movs	r0, #0
1000ad98:	b003      	add	sp, #12
1000ad9a:	bc0c      	pop	{r2, r3}
1000ad9c:	4691      	mov	r9, r2
1000ad9e:	469a      	mov	sl, r3
1000ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ada2:	46c0      	nop			; (mov r8, r8)
1000ada4:	10019944 	.word	0x10019944
1000ada8:	10019934 	.word	0x10019934
1000adac:	10019924 	.word	0x10019924
1000adb0:	100199e8 	.word	0x100199e8
1000adb4:	100199f4 	.word	0x100199f4
1000adb8:	1000b0d9 	.word	0x1000b0d9

1000adbc <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adbe:	464f      	mov	r7, r9
1000adc0:	b480      	push	{r7}
1000adc2:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000adc4:	4d26      	ldr	r5, [pc, #152]	; (1000ae60 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000adc6:	89ec      	ldrh	r4, [r5, #14]
1000adc8:	0224      	lsls	r4, r4, #8
1000adca:	69ab      	ldr	r3, [r5, #24]
1000adcc:	1b1c      	subs	r4, r3, r4
1000adce:	17e3      	asrs	r3, r4, #31
1000add0:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000add2:	8a28      	ldrh	r0, [r5, #16]
1000add4:	4a23      	ldr	r2, [pc, #140]	; (1000ae64 <sms_pressure_ms58_calculate+0xa8>)
1000add6:	4691      	mov	r9, r2
1000add8:	0022      	movs	r2, r4
1000adda:	2100      	movs	r1, #0
1000addc:	47c8      	blx	r9
1000adde:	0249      	lsls	r1, r1, #9
1000ade0:	0dc0      	lsrs	r0, r0, #23
1000ade2:	4308      	orrs	r0, r1
1000ade4:	23fa      	movs	r3, #250	; 0xfa
1000ade6:	00db      	lsls	r3, r3, #3
1000ade8:	469c      	mov	ip, r3
1000adea:	4460      	add	r0, ip
1000adec:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000adee:	89a8      	ldrh	r0, [r5, #12]
1000adf0:	0022      	movs	r2, r4
1000adf2:	9601      	str	r6, [sp, #4]
1000adf4:	0033      	movs	r3, r6
1000adf6:	2100      	movs	r1, #0
1000adf8:	47c8      	blx	r9
1000adfa:	064e      	lsls	r6, r1, #25
1000adfc:	09c2      	lsrs	r2, r0, #7
1000adfe:	4332      	orrs	r2, r6
1000ae00:	11cb      	asrs	r3, r1, #7
1000ae02:	892e      	ldrh	r6, [r5, #8]
1000ae04:	2100      	movs	r1, #0
1000ae06:	0430      	lsls	r0, r6, #16
1000ae08:	1812      	adds	r2, r2, r0
1000ae0a:	414b      	adcs	r3, r1
1000ae0c:	0016      	movs	r6, r2
1000ae0e:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000ae10:	8968      	ldrh	r0, [r5, #10]
1000ae12:	0022      	movs	r2, r4
1000ae14:	9b01      	ldr	r3, [sp, #4]
1000ae16:	2100      	movs	r1, #0
1000ae18:	47c8      	blx	r9
1000ae1a:	060c      	lsls	r4, r1, #24
1000ae1c:	0a02      	lsrs	r2, r0, #8
1000ae1e:	4322      	orrs	r2, r4
1000ae20:	120b      	asrs	r3, r1, #8
1000ae22:	88ec      	ldrh	r4, [r5, #6]
1000ae24:	2100      	movs	r1, #0
1000ae26:	03e0      	lsls	r0, r4, #15
1000ae28:	1880      	adds	r0, r0, r2
1000ae2a:	4159      	adcs	r1, r3
1000ae2c:	696a      	ldr	r2, [r5, #20]
1000ae2e:	2300      	movs	r3, #0
1000ae30:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000ae32:	02cc      	lsls	r4, r1, #11
1000ae34:	0d42      	lsrs	r2, r0, #21
1000ae36:	4322      	orrs	r2, r4
1000ae38:	154b      	asrs	r3, r1, #21
1000ae3a:	1b92      	subs	r2, r2, r6
1000ae3c:	41bb      	sbcs	r3, r7
1000ae3e:	0011      	movs	r1, r2
1000ae40:	045b      	lsls	r3, r3, #17
1000ae42:	0bca      	lsrs	r2, r1, #15
1000ae44:	431a      	orrs	r2, r3
1000ae46:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
1000ae48:	4807      	ldr	r0, [pc, #28]	; (1000ae68 <sms_pressure_ms58_calculate+0xac>)
1000ae4a:	4b08      	ldr	r3, [pc, #32]	; (1000ae6c <sms_pressure_ms58_calculate+0xb0>)
1000ae4c:	4798      	blx	r3
1000ae4e:	69ea      	ldr	r2, [r5, #28]
1000ae50:	6a29      	ldr	r1, [r5, #32]
1000ae52:	4807      	ldr	r0, [pc, #28]	; (1000ae70 <sms_pressure_ms58_calculate+0xb4>)
1000ae54:	4b07      	ldr	r3, [pc, #28]	; (1000ae74 <sms_pressure_ms58_calculate+0xb8>)
1000ae56:	4798      	blx	r3
}
1000ae58:	b002      	add	sp, #8
1000ae5a:	bc04      	pop	{r2}
1000ae5c:	4691      	mov	r9, r2
1000ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae60:	10019944 	.word	0x10019944
1000ae64:	10013035 	.word	0x10013035
1000ae68:	10015df4 	.word	0x10015df4
1000ae6c:	10014c49 	.word	0x10014c49
1000ae70:	100168bc 	.word	0x100168bc
1000ae74:	10014b29 	.word	0x10014b29

1000ae78 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000ae78:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_PAIRED) {
1000ae7a:	4b11      	ldr	r3, [pc, #68]	; (1000aec0 <sms_pressure_poll_data+0x48>)
1000ae7c:	781b      	ldrb	r3, [r3, #0]
1000ae7e:	2b22      	cmp	r3, #34	; 0x22
1000ae80:	d11d      	bne.n	1000aebe <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000ae82:	4810      	ldr	r0, [pc, #64]	; (1000aec4 <sms_pressure_poll_data+0x4c>)
1000ae84:	4b10      	ldr	r3, [pc, #64]	; (1000aec8 <sms_pressure_poll_data+0x50>)
1000ae86:	4798      	blx	r3
1000ae88:	4810      	ldr	r0, [pc, #64]	; (1000aecc <sms_pressure_poll_data+0x54>)
1000ae8a:	4b11      	ldr	r3, [pc, #68]	; (1000aed0 <sms_pressure_poll_data+0x58>)
1000ae8c:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000ae8e:	4b11      	ldr	r3, [pc, #68]	; (1000aed4 <sms_pressure_poll_data+0x5c>)
1000ae90:	4798      	blx	r3
1000ae92:	2800      	cmp	r0, #0
1000ae94:	d006      	beq.n	1000aea4 <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000ae96:	480b      	ldr	r0, [pc, #44]	; (1000aec4 <sms_pressure_poll_data+0x4c>)
1000ae98:	4b0b      	ldr	r3, [pc, #44]	; (1000aec8 <sms_pressure_poll_data+0x50>)
1000ae9a:	4798      	blx	r3
1000ae9c:	480e      	ldr	r0, [pc, #56]	; (1000aed8 <sms_pressure_poll_data+0x60>)
1000ae9e:	4b0c      	ldr	r3, [pc, #48]	; (1000aed0 <sms_pressure_poll_data+0x58>)
1000aea0:	4798      	blx	r3
1000aea2:	e00c      	b.n	1000aebe <sms_pressure_poll_data+0x46>
        }
        else {
            if(pressure_device.hal.data_complete) {
1000aea4:	2324      	movs	r3, #36	; 0x24
1000aea6:	4a0d      	ldr	r2, [pc, #52]	; (1000aedc <sms_pressure_poll_data+0x64>)
1000aea8:	5cd3      	ldrb	r3, [r2, r3]
1000aeaa:	2b00      	cmp	r3, #0
1000aeac:	d007      	beq.n	1000aebe <sms_pressure_poll_data+0x46>
                pressure_device.hal.data_complete = false;
1000aeae:	2100      	movs	r1, #0
1000aeb0:	2324      	movs	r3, #36	; 0x24
1000aeb2:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000aeb4:	4b0a      	ldr	r3, [pc, #40]	; (1000aee0 <sms_pressure_poll_data+0x68>)
1000aeb6:	4798      	blx	r3
				ready_to_send[RTS_PRESSURE_POS] = true;
1000aeb8:	2201      	movs	r2, #1
1000aeba:	4b0a      	ldr	r3, [pc, #40]	; (1000aee4 <sms_pressure_poll_data+0x6c>)
1000aebc:	705a      	strb	r2, [r3, #1]
                //sms_ble_send_characteristic(BLE_CHAR_PRESS);
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000aebe:	bd10      	pop	{r4, pc}
1000aec0:	100199e0 	.word	0x100199e0
1000aec4:	10015df4 	.word	0x10015df4
1000aec8:	10014c49 	.word	0x10014c49
1000aecc:	100168fc 	.word	0x100168fc
1000aed0:	10014b29 	.word	0x10014b29
1000aed4:	1000ace5 	.word	0x1000ace5
1000aed8:	1001692c 	.word	0x1001692c
1000aedc:	10019944 	.word	0x10019944
1000aee0:	1000adbd 	.word	0x1000adbd
1000aee4:	100199e4 	.word	0x100199e4

1000aee8 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}


void sms_pressure_define_services(void)
{
1000aee8:	b510      	push	{r4, lr}
1000aeea:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000aeec:	466b      	mov	r3, sp
1000aeee:	1dda      	adds	r2, r3, #7
1000aef0:	2300      	movs	r3, #0
1000aef2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000aef4:	4c0d      	ldr	r4, [pc, #52]	; (1000af2c <sms_pressure_define_services+0x44>)
1000aef6:	0021      	movs	r1, r4
1000aef8:	2001      	movs	r0, #1
1000aefa:	4b0d      	ldr	r3, [pc, #52]	; (1000af30 <sms_pressure_define_services+0x48>)
1000aefc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000aefe:	0020      	movs	r0, r4
1000af00:	4b0c      	ldr	r3, [pc, #48]	; (1000af34 <sms_pressure_define_services+0x4c>)
1000af02:	4798      	blx	r3
1000af04:	1e04      	subs	r4, r0, #0
1000af06:	d007      	beq.n	1000af18 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000af08:	480b      	ldr	r0, [pc, #44]	; (1000af38 <sms_pressure_define_services+0x50>)
1000af0a:	4b0c      	ldr	r3, [pc, #48]	; (1000af3c <sms_pressure_define_services+0x54>)
1000af0c:	4798      	blx	r3
1000af0e:	0021      	movs	r1, r4
1000af10:	480b      	ldr	r0, [pc, #44]	; (1000af40 <sms_pressure_define_services+0x58>)
1000af12:	4b0c      	ldr	r3, [pc, #48]	; (1000af44 <sms_pressure_define_services+0x5c>)
1000af14:	4798      	blx	r3
1000af16:	e007      	b.n	1000af28 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000af18:	4807      	ldr	r0, [pc, #28]	; (1000af38 <sms_pressure_define_services+0x50>)
1000af1a:	4b08      	ldr	r3, [pc, #32]	; (1000af3c <sms_pressure_define_services+0x54>)
1000af1c:	4798      	blx	r3
1000af1e:	4b0a      	ldr	r3, [pc, #40]	; (1000af48 <sms_pressure_define_services+0x60>)
1000af20:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000af22:	480a      	ldr	r0, [pc, #40]	; (1000af4c <sms_pressure_define_services+0x64>)
1000af24:	4b07      	ldr	r3, [pc, #28]	; (1000af44 <sms_pressure_define_services+0x5c>)
1000af26:	4798      	blx	r3
    }
1000af28:	b002      	add	sp, #8
1000af2a:	bd10      	pop	{r4, pc}
1000af2c:	10019970 	.word	0x10019970
1000af30:	1000a0dd 	.word	0x1000a0dd
1000af34:	1000a0b9 	.word	0x1000a0b9
1000af38:	10015df4 	.word	0x10015df4
1000af3c:	10014c49 	.word	0x10014c49
1000af40:	10016964 	.word	0x10016964
1000af44:	10014b29 	.word	0x10014b29
1000af48:	10019944 	.word	0x10019944
1000af4c:	100169ac 	.word	0x100169ac

1000af50 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000af50:	b510      	push	{r4, lr}
1000af52:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000af54:	2800      	cmp	r0, #0
1000af56:	d007      	beq.n	1000af68 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000af58:	2102      	movs	r1, #2
1000af5a:	2330      	movs	r3, #48	; 0x30
1000af5c:	4a15      	ldr	r2, [pc, #84]	; (1000afb4 <sms_sensors_interrupt_toggle+0x64>)
1000af5e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000af60:	201e      	movs	r0, #30
1000af62:	4b15      	ldr	r3, [pc, #84]	; (1000afb8 <sms_sensors_interrupt_toggle+0x68>)
1000af64:	4798      	blx	r3
1000af66:	e006      	b.n	1000af76 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000af68:	2100      	movs	r1, #0
1000af6a:	2330      	movs	r3, #48	; 0x30
1000af6c:	4a11      	ldr	r2, [pc, #68]	; (1000afb4 <sms_sensors_interrupt_toggle+0x64>)
1000af6e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000af70:	201e      	movs	r0, #30
1000af72:	4b12      	ldr	r3, [pc, #72]	; (1000afbc <sms_sensors_interrupt_toggle+0x6c>)
1000af74:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000af76:	2c00      	cmp	r4, #0
1000af78:	d010      	beq.n	1000af9c <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000af7a:	4b11      	ldr	r3, [pc, #68]	; (1000afc0 <sms_sensors_interrupt_toggle+0x70>)
1000af7c:	2103      	movs	r1, #3
1000af7e:	2225      	movs	r2, #37	; 0x25
1000af80:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000af82:	3901      	subs	r1, #1
1000af84:	3203      	adds	r2, #3
1000af86:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000af88:	2100      	movs	r1, #0
1000af8a:	480e      	ldr	r0, [pc, #56]	; (1000afc4 <sms_sensors_interrupt_toggle+0x74>)
1000af8c:	4b0e      	ldr	r3, [pc, #56]	; (1000afc8 <sms_sensors_interrupt_toggle+0x78>)
1000af8e:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000af90:	4b0e      	ldr	r3, [pc, #56]	; (1000afcc <sms_sensors_interrupt_toggle+0x7c>)
1000af92:	4798      	blx	r3
        sensors_active = true;
1000af94:	2201      	movs	r2, #1
1000af96:	4b0e      	ldr	r3, [pc, #56]	; (1000afd0 <sms_sensors_interrupt_toggle+0x80>)
1000af98:	701a      	strb	r2, [r3, #0]
1000af9a:	e00a      	b.n	1000afb2 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000af9c:	2102      	movs	r1, #2
1000af9e:	2325      	movs	r3, #37	; 0x25
1000afa0:	4a07      	ldr	r2, [pc, #28]	; (1000afc0 <sms_sensors_interrupt_toggle+0x70>)
1000afa2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000afa4:	4b0b      	ldr	r3, [pc, #44]	; (1000afd4 <sms_sensors_interrupt_toggle+0x84>)
1000afa6:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000afa8:	4b0b      	ldr	r3, [pc, #44]	; (1000afd8 <sms_sensors_interrupt_toggle+0x88>)
1000afaa:	4798      	blx	r3
        sensors_active = false;
1000afac:	2200      	movs	r2, #0
1000afae:	4b08      	ldr	r3, [pc, #32]	; (1000afd0 <sms_sensors_interrupt_toggle+0x80>)
1000afb0:	701a      	strb	r2, [r3, #0]
    }
}
1000afb2:	bd10      	pop	{r4, pc}
1000afb4:	10019838 	.word	0x10019838
1000afb8:	1000c1c5 	.word	0x1000c1c5
1000afbc:	1000c221 	.word	0x1000c221
1000afc0:	10019944 	.word	0x10019944
1000afc4:	00002664 	.word	0x00002664
1000afc8:	1000b139 	.word	0x1000b139
1000afcc:	1000b16d 	.word	0x1000b16d
1000afd0:	100199d4 	.word	0x100199d4
1000afd4:	1000b161 	.word	0x1000b161
1000afd8:	1000b18d 	.word	0x1000b18d

1000afdc <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000afdc:	b510      	push	{r4, lr}
1000afde:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000afe0:	2800      	cmp	r0, #0
1000afe2:	d016      	beq.n	1000b012 <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000afe4:	4b14      	ldr	r3, [pc, #80]	; (1000b038 <sms_sensors_switch+0x5c>)
1000afe6:	4798      	blx	r3
1000afe8:	2800      	cmp	r0, #0
1000afea:	d00a      	beq.n	1000b002 <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000afec:	4813      	ldr	r0, [pc, #76]	; (1000b03c <sms_sensors_switch+0x60>)
1000afee:	4b14      	ldr	r3, [pc, #80]	; (1000b040 <sms_sensors_switch+0x64>)
1000aff0:	4798      	blx	r3
1000aff2:	4814      	ldr	r0, [pc, #80]	; (1000b044 <sms_sensors_switch+0x68>)
1000aff4:	4b14      	ldr	r3, [pc, #80]	; (1000b048 <sms_sensors_switch+0x6c>)
1000aff6:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000aff8:	2100      	movs	r1, #0
1000affa:	2006      	movs	r0, #6
1000affc:	4b13      	ldr	r3, [pc, #76]	; (1000b04c <sms_sensors_switch+0x70>)
1000affe:	4798      	blx	r3
1000b000:	e00b      	b.n	1000b01a <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b002:	2201      	movs	r2, #1
1000b004:	4b12      	ldr	r3, [pc, #72]	; (1000b050 <sms_sensors_switch+0x74>)
1000b006:	711a      	strb	r2, [r3, #4]
            sms_sensors_interrupt_toggle(true, false);
1000b008:	2100      	movs	r1, #0
1000b00a:	2001      	movs	r0, #1
1000b00c:	4b11      	ldr	r3, [pc, #68]	; (1000b054 <sms_sensors_switch+0x78>)
1000b00e:	4798      	blx	r3
1000b010:	e003      	b.n	1000b01a <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b012:	2100      	movs	r1, #0
1000b014:	2006      	movs	r0, #6
1000b016:	4b0d      	ldr	r3, [pc, #52]	; (1000b04c <sms_sensors_switch+0x70>)
1000b018:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b01a:	2c00      	cmp	r4, #0
1000b01c:	d006      	beq.n	1000b02c <sms_sensors_switch+0x50>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b01e:	2101      	movs	r1, #1
1000b020:	2325      	movs	r3, #37	; 0x25
1000b022:	4a0d      	ldr	r2, [pc, #52]	; (1000b058 <sms_sensors_switch+0x7c>)
1000b024:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b026:	4b0d      	ldr	r3, [pc, #52]	; (1000b05c <sms_sensors_switch+0x80>)
1000b028:	4798      	blx	r3
1000b02a:	e003      	b.n	1000b034 <sms_sensors_switch+0x58>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b02c:	2100      	movs	r1, #0
1000b02e:	2007      	movs	r0, #7
1000b030:	4b06      	ldr	r3, [pc, #24]	; (1000b04c <sms_sensors_switch+0x70>)
1000b032:	4798      	blx	r3
    }
}
1000b034:	bd10      	pop	{r4, pc}
1000b036:	46c0      	nop			; (mov r8, r8)
1000b038:	1000a8d5 	.word	0x1000a8d5
1000b03c:	10015df4 	.word	0x10015df4
1000b040:	10014c49 	.word	0x10014c49
1000b044:	100169f8 	.word	0x100169f8
1000b048:	10014b29 	.word	0x10014b29
1000b04c:	1000bf1d 	.word	0x1000bf1d
1000b050:	10019838 	.word	0x10019838
1000b054:	1000af51 	.word	0x1000af51
1000b058:	10019944 	.word	0x10019944
1000b05c:	1000ac51 	.word	0x1000ac51

1000b060 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b060:	b530      	push	{r4, r5, lr}
1000b062:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b064:	ac01      	add	r4, sp, #4
1000b066:	0020      	movs	r0, r4
1000b068:	4b13      	ldr	r3, [pc, #76]	; (1000b0b8 <sms_spi_master_configure+0x58>)
1000b06a:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b06c:	2310      	movs	r3, #16
1000b06e:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b070:	0021      	movs	r1, r4
1000b072:	4812      	ldr	r0, [pc, #72]	; (1000b0bc <sms_spi_master_configure+0x5c>)
1000b074:	4b12      	ldr	r3, [pc, #72]	; (1000b0c0 <sms_spi_master_configure+0x60>)
1000b076:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b078:	ac02      	add	r4, sp, #8
1000b07a:	0020      	movs	r0, r4
1000b07c:	4b11      	ldr	r3, [pc, #68]	; (1000b0c4 <sms_spi_master_configure+0x64>)
1000b07e:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b080:	2368      	movs	r3, #104	; 0x68
1000b082:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b084:	2300      	movs	r3, #0
1000b086:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b088:	3311      	adds	r3, #17
1000b08a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b08c:	3b0d      	subs	r3, #13
1000b08e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b090:	2213      	movs	r2, #19
1000b092:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b094:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b096:	3a14      	subs	r2, #20
1000b098:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b09a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b09c:	3213      	adds	r2, #19
1000b09e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b0a0:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b0a2:	4d09      	ldr	r5, [pc, #36]	; (1000b0c8 <sms_spi_master_configure+0x68>)
1000b0a4:	0022      	movs	r2, r4
1000b0a6:	4909      	ldr	r1, [pc, #36]	; (1000b0cc <sms_spi_master_configure+0x6c>)
1000b0a8:	0028      	movs	r0, r5
1000b0aa:	4b09      	ldr	r3, [pc, #36]	; (1000b0d0 <sms_spi_master_configure+0x70>)
1000b0ac:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b0ae:	0028      	movs	r0, r5
1000b0b0:	4b08      	ldr	r3, [pc, #32]	; (1000b0d4 <sms_spi_master_configure+0x74>)
1000b0b2:	4798      	blx	r3
}
1000b0b4:	b00d      	add	sp, #52	; 0x34
1000b0b6:	bd30      	pop	{r4, r5, pc}
1000b0b8:	1000b661 	.word	0x1000b661
1000b0bc:	100199e8 	.word	0x100199e8
1000b0c0:	1000b699 	.word	0x1000b699
1000b0c4:	1000b66d 	.word	0x1000b66d
1000b0c8:	100199f4 	.word	0x100199f4
1000b0cc:	40007000 	.word	0x40007000
1000b0d0:	1000b769 	.word	0x1000b769
1000b0d4:	1000b6d9 	.word	0x1000b6d9

1000b0d8 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0da:	b083      	sub	sp, #12
1000b0dc:	0004      	movs	r4, r0
1000b0de:	000d      	movs	r5, r1
1000b0e0:	9200      	str	r2, [sp, #0]
1000b0e2:	9301      	str	r3, [sp, #4]
1000b0e4:	ab08      	add	r3, sp, #32
1000b0e6:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b0e8:	2201      	movs	r2, #1
1000b0ea:	4f08      	ldr	r7, [pc, #32]	; (1000b10c <sms_spi_master_transceive+0x34>)
1000b0ec:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b0ee:	0033      	movs	r3, r6
1000b0f0:	9a01      	ldr	r2, [sp, #4]
1000b0f2:	9900      	ldr	r1, [sp, #0]
1000b0f4:	0020      	movs	r0, r4
1000b0f6:	4e06      	ldr	r6, [pc, #24]	; (1000b110 <sms_spi_master_transceive+0x38>)
1000b0f8:	47b0      	blx	r6
1000b0fa:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b0fc:	2200      	movs	r2, #0
1000b0fe:	0029      	movs	r1, r5
1000b100:	0020      	movs	r0, r4
1000b102:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b104:	0030      	movs	r0, r6
1000b106:	b003      	add	sp, #12
1000b108:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b10a:	46c0      	nop			; (mov r8, r8)
1000b10c:	1000b951 	.word	0x1000b951
1000b110:	1000b8cd 	.word	0x1000b8cd

1000b114 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b114:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b116:	4b06      	ldr	r3, [pc, #24]	; (1000b130 <sms_timer_aon_callback+0x1c>)
1000b118:	2201      	movs	r2, #1
1000b11a:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_AON_TIMER;
1000b11c:	3203      	adds	r2, #3
1000b11e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b120:	2300      	movs	r3, #0
1000b122:	2200      	movs	r2, #0
1000b124:	2103      	movs	r1, #3
1000b126:	2042      	movs	r0, #66	; 0x42
1000b128:	4c02      	ldr	r4, [pc, #8]	; (1000b134 <sms_timer_aon_callback+0x20>)
1000b12a:	47a0      	blx	r4
}
1000b12c:	bd10      	pop	{r4, pc}
1000b12e:	46c0      	nop			; (mov r8, r8)
1000b130:	100199c8 	.word	0x100199c8
1000b134:	1000ef79 	.word	0x1000ef79

1000b138 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b138:	b530      	push	{r4, r5, lr}
1000b13a:	b083      	sub	sp, #12
1000b13c:	0004      	movs	r4, r0
1000b13e:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b140:	4668      	mov	r0, sp
1000b142:	4b05      	ldr	r3, [pc, #20]	; (1000b158 <sms_timer_aon_init+0x20>)
1000b144:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b146:	466b      	mov	r3, sp
1000b148:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b14a:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b14c:	4668      	mov	r0, sp
1000b14e:	4b03      	ldr	r3, [pc, #12]	; (1000b15c <sms_timer_aon_init+0x24>)
1000b150:	4798      	blx	r3
}
1000b152:	b003      	add	sp, #12
1000b154:	bd30      	pop	{r4, r5, pc}
1000b156:	46c0      	nop			; (mov r8, r8)
1000b158:	10008171 	.word	0x10008171
1000b15c:	100081e5 	.word	0x100081e5

1000b160 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b160:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b162:	4b01      	ldr	r3, [pc, #4]	; (1000b168 <sms_timer_aon_disable+0x8>)
1000b164:	4798      	blx	r3
}
1000b166:	bd10      	pop	{r4, pc}
1000b168:	10008181 	.word	0x10008181

1000b16c <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b16c:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b16e:	4804      	ldr	r0, [pc, #16]	; (1000b180 <sms_timer_aon_register_callback+0x14>)
1000b170:	4b04      	ldr	r3, [pc, #16]	; (1000b184 <sms_timer_aon_register_callback+0x18>)
1000b172:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b174:	2280      	movs	r2, #128	; 0x80
1000b176:	0512      	lsls	r2, r2, #20
1000b178:	4b03      	ldr	r3, [pc, #12]	; (1000b188 <sms_timer_aon_register_callback+0x1c>)
1000b17a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b17c:	bd10      	pop	{r4, pc}
1000b17e:	46c0      	nop			; (mov r8, r8)
1000b180:	1000b115 	.word	0x1000b115
1000b184:	100081cd 	.word	0x100081cd
1000b188:	e000e100 	.word	0xe000e100

1000b18c <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b18c:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b18e:	4b04      	ldr	r3, [pc, #16]	; (1000b1a0 <sms_timer_aon_unregister_callback+0x14>)
1000b190:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b192:	2180      	movs	r1, #128	; 0x80
1000b194:	0509      	lsls	r1, r1, #20
1000b196:	2380      	movs	r3, #128	; 0x80
1000b198:	4a02      	ldr	r2, [pc, #8]	; (1000b1a4 <sms_timer_aon_unregister_callback+0x18>)
1000b19a:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b19c:	bd10      	pop	{r4, pc}
1000b19e:	46c0      	nop			; (mov r8, r8)
1000b1a0:	100081d9 	.word	0x100081d9
1000b1a4:	e000e100 	.word	0xe000e100

1000b1a8 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b1a8:	b510      	push	{r4, lr}
1000b1aa:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b1ac:	ac01      	add	r4, sp, #4
1000b1ae:	0020      	movs	r0, r4
1000b1b0:	4b08      	ldr	r3, [pc, #32]	; (1000b1d4 <sms_dualtimer_init+0x2c>)
1000b1b2:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b1b4:	4a08      	ldr	r2, [pc, #32]	; (1000b1d8 <sms_dualtimer_init+0x30>)
1000b1b6:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1b8:	2300      	movs	r3, #0
1000b1ba:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b1bc:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1be:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b1c0:	0020      	movs	r0, r4
1000b1c2:	4b06      	ldr	r3, [pc, #24]	; (1000b1dc <sms_dualtimer_init+0x34>)
1000b1c4:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b1c6:	2000      	movs	r0, #0
1000b1c8:	4c05      	ldr	r4, [pc, #20]	; (1000b1e0 <sms_dualtimer_init+0x38>)
1000b1ca:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b1cc:	2001      	movs	r0, #1
1000b1ce:	47a0      	blx	r4
}
1000b1d0:	b008      	add	sp, #32
1000b1d2:	bd10      	pop	{r4, pc}
1000b1d4:	1000b9b5 	.word	0x1000b9b5
1000b1d8:	018cba80 	.word	0x018cba80
1000b1dc:	1000ba49 	.word	0x1000ba49
1000b1e0:	1000ba25 	.word	0x1000ba25

1000b1e4 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b1e4:	b510      	push	{r4, lr}
1000b1e6:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b1e8:	4b02      	ldr	r3, [pc, #8]	; (1000b1f4 <sms_dualtimer_register_callback+0x10>)
1000b1ea:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b1ec:	0020      	movs	r0, r4
1000b1ee:	4b02      	ldr	r3, [pc, #8]	; (1000b1f8 <sms_dualtimer_register_callback+0x14>)
1000b1f0:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b1f2:	bd10      	pop	{r4, pc}
1000b1f4:	1000bb4d 	.word	0x1000bb4d
1000b1f8:	1000ba25 	.word	0x1000ba25

1000b1fc <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b1fc:	b510      	push	{r4, lr}
1000b1fe:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b200:	2801      	cmp	r0, #1
1000b202:	d006      	beq.n	1000b212 <sms_dualtimer_start+0x16>
1000b204:	2800      	cmp	r0, #0
1000b206:	d002      	beq.n	1000b20e <sms_dualtimer_start+0x12>
1000b208:	2802      	cmp	r0, #2
1000b20a:	d004      	beq.n	1000b216 <sms_dualtimer_start+0x1a>
1000b20c:	e005      	b.n	1000b21a <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b20e:	221a      	movs	r2, #26
1000b210:	e004      	b.n	1000b21c <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b212:	4a0c      	ldr	r2, [pc, #48]	; (1000b244 <sms_dualtimer_start+0x48>)
        break;
1000b214:	e002      	b.n	1000b21c <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b216:	4a0c      	ldr	r2, [pc, #48]	; (1000b248 <sms_dualtimer_start+0x4c>)
        break;
1000b218:	e000      	b.n	1000b21c <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b21a:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b21c:	2900      	cmp	r1, #0
1000b21e:	d101      	bne.n	1000b224 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b220:	21fa      	movs	r1, #250	; 0xfa
1000b222:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b224:	2000      	movs	r0, #0
1000b226:	4b09      	ldr	r3, [pc, #36]	; (1000b24c <sms_dualtimer_start+0x50>)
1000b228:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b22a:	434a      	muls	r2, r1
1000b22c:	2100      	movs	r1, #0
1000b22e:	0020      	movs	r0, r4
1000b230:	4b07      	ldr	r3, [pc, #28]	; (1000b250 <sms_dualtimer_start+0x54>)
1000b232:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b234:	0020      	movs	r0, r4
1000b236:	4b07      	ldr	r3, [pc, #28]	; (1000b254 <sms_dualtimer_start+0x58>)
1000b238:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b23a:	2280      	movs	r2, #128	; 0x80
1000b23c:	01d2      	lsls	r2, r2, #7
1000b23e:	4b06      	ldr	r3, [pc, #24]	; (1000b258 <sms_dualtimer_start+0x5c>)
1000b240:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b242:	bd10      	pop	{r4, pc}
1000b244:	00006590 	.word	0x00006590
1000b248:	018cba80 	.word	0x018cba80
1000b24c:	100198c9 	.word	0x100198c9
1000b250:	1000b9d9 	.word	0x1000b9d9
1000b254:	1000ba01 	.word	0x1000ba01
1000b258:	e000e100 	.word	0xe000e100

1000b25c <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b25c:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b25e:	4b01      	ldr	r3, [pc, #4]	; (1000b264 <sms_dualtimer_stop+0x8>)
1000b260:	4798      	blx	r3
}
1000b262:	bd10      	pop	{r4, pc}
1000b264:	1000ba25 	.word	0x1000ba25

1000b268 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b268:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b26a:	4b06      	ldr	r3, [pc, #24]	; (1000b284 <sms_dualtimer1_cb+0x1c>)
1000b26c:	2201      	movs	r2, #1
1000b26e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b270:	3204      	adds	r2, #4
1000b272:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b274:	2300      	movs	r3, #0
1000b276:	2200      	movs	r2, #0
1000b278:	2101      	movs	r1, #1
1000b27a:	2040      	movs	r0, #64	; 0x40
1000b27c:	4c02      	ldr	r4, [pc, #8]	; (1000b288 <sms_dualtimer1_cb+0x20>)
1000b27e:	47a0      	blx	r4
}
1000b280:	bd10      	pop	{r4, pc}
1000b282:	46c0      	nop			; (mov r8, r8)
1000b284:	100199c8 	.word	0x100199c8
1000b288:	1000ef79 	.word	0x1000ef79

1000b28c <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b28c:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b28e:	4b06      	ldr	r3, [pc, #24]	; (1000b2a8 <sms_dualtimer2_cb+0x1c>)
1000b290:	2201      	movs	r2, #1
1000b292:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b294:	3205      	adds	r2, #5
1000b296:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b298:	2300      	movs	r3, #0
1000b29a:	2200      	movs	r2, #0
1000b29c:	2101      	movs	r1, #1
1000b29e:	2041      	movs	r0, #65	; 0x41
1000b2a0:	4c02      	ldr	r4, [pc, #8]	; (1000b2ac <sms_dualtimer2_cb+0x20>)
1000b2a2:	47a0      	blx	r4
}
1000b2a4:	bd10      	pop	{r4, pc}
1000b2a6:	46c0      	nop			; (mov r8, r8)
1000b2a8:	100199c8 	.word	0x100199c8
1000b2ac:	1000ef79 	.word	0x1000ef79

1000b2b0 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b2b0:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b2b2:	4b7c      	ldr	r3, [pc, #496]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b2b4:	781b      	ldrb	r3, [r3, #0]
1000b2b6:	b2db      	uxtb	r3, r3
1000b2b8:	2b01      	cmp	r3, #1
1000b2ba:	d003      	beq.n	1000b2c4 <sms_dualtimer1_fn+0x14>
1000b2bc:	2b02      	cmp	r3, #2
1000b2be:	d100      	bne.n	1000b2c2 <sms_dualtimer1_fn+0x12>
1000b2c0:	e0ae      	b.n	1000b420 <sms_dualtimer1_fn+0x170>
1000b2c2:	e0e7      	b.n	1000b494 <sms_dualtimer1_fn+0x1e4>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b2c4:	2200      	movs	r2, #0
1000b2c6:	4b77      	ldr	r3, [pc, #476]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b2c8:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b2ca:	4c77      	ldr	r4, [pc, #476]	; (1000b4a8 <sms_dualtimer1_fn+0x1f8>)
1000b2cc:	7863      	ldrb	r3, [r4, #1]
1000b2ce:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b2d0:	4b76      	ldr	r3, [pc, #472]	; (1000b4ac <sms_dualtimer1_fn+0x1fc>)
1000b2d2:	4798      	blx	r3
1000b2d4:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b2d6:	4876      	ldr	r0, [pc, #472]	; (1000b4b0 <sms_dualtimer1_fn+0x200>)
1000b2d8:	4b76      	ldr	r3, [pc, #472]	; (1000b4b4 <sms_dualtimer1_fn+0x204>)
1000b2da:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b2dc:	7823      	ldrb	r3, [r4, #0]
1000b2de:	2b01      	cmp	r3, #1
1000b2e0:	d002      	beq.n	1000b2e8 <sms_dualtimer1_fn+0x38>
1000b2e2:	2b02      	cmp	r3, #2
1000b2e4:	d04c      	beq.n	1000b380 <sms_dualtimer1_fn+0xd0>
1000b2e6:	e093      	b.n	1000b410 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b2e8:	4b6f      	ldr	r3, [pc, #444]	; (1000b4a8 <sms_dualtimer1_fn+0x1f8>)
1000b2ea:	785b      	ldrb	r3, [r3, #1]
1000b2ec:	2b01      	cmp	r3, #1
1000b2ee:	d002      	beq.n	1000b2f6 <sms_dualtimer1_fn+0x46>
1000b2f0:	2b02      	cmp	r3, #2
1000b2f2:	d023      	beq.n	1000b33c <sms_dualtimer1_fn+0x8c>
1000b2f4:	e03b      	b.n	1000b36e <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b2f6:	4b70      	ldr	r3, [pc, #448]	; (1000b4b8 <sms_dualtimer1_fn+0x208>)
1000b2f8:	781b      	ldrb	r3, [r3, #0]
1000b2fa:	2b00      	cmp	r3, #0
1000b2fc:	d115      	bne.n	1000b32a <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b2fe:	4a6f      	ldr	r2, [pc, #444]	; (1000b4bc <sms_dualtimer1_fn+0x20c>)
1000b300:	7813      	ldrb	r3, [r2, #0]
1000b302:	3301      	adds	r3, #1
1000b304:	b2db      	uxtb	r3, r3
1000b306:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b308:	2b0f      	cmp	r3, #15
1000b30a:	d905      	bls.n	1000b318 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b30c:	2200      	movs	r2, #0
1000b30e:	4b65      	ldr	r3, [pc, #404]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b310:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b312:	4b6b      	ldr	r3, [pc, #428]	; (1000b4c0 <sms_dualtimer1_fn+0x210>)
1000b314:	4798      	blx	r3
1000b316:	e0c4      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b318:	2201      	movs	r2, #1
1000b31a:	4b62      	ldr	r3, [pc, #392]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b31c:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b31e:	2200      	movs	r2, #0
1000b320:	21fa      	movs	r1, #250	; 0xfa
1000b322:	2001      	movs	r0, #1
1000b324:	4b67      	ldr	r3, [pc, #412]	; (1000b4c4 <sms_dualtimer1_fn+0x214>)
1000b326:	4798      	blx	r3
1000b328:	e0bb      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b32a:	4b67      	ldr	r3, [pc, #412]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b32c:	781b      	ldrb	r3, [r3, #0]
1000b32e:	2b00      	cmp	r3, #0
1000b330:	d000      	beq.n	1000b334 <sms_dualtimer1_fn+0x84>
1000b332:	e0b6      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b334:	2201      	movs	r2, #1
1000b336:	4b65      	ldr	r3, [pc, #404]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b338:	701a      	strb	r2, [r3, #0]
1000b33a:	e0b2      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b33c:	4b5e      	ldr	r3, [pc, #376]	; (1000b4b8 <sms_dualtimer1_fn+0x208>)
1000b33e:	781b      	ldrb	r3, [r3, #0]
1000b340:	2b00      	cmp	r3, #0
1000b342:	d10b      	bne.n	1000b35c <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b344:	2200      	movs	r2, #0
1000b346:	4b5d      	ldr	r3, [pc, #372]	; (1000b4bc <sms_dualtimer1_fn+0x20c>)
1000b348:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b34a:	3201      	adds	r2, #1
1000b34c:	4b55      	ldr	r3, [pc, #340]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b34e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b350:	2200      	movs	r2, #0
1000b352:	2164      	movs	r1, #100	; 0x64
1000b354:	2001      	movs	r0, #1
1000b356:	4b5b      	ldr	r3, [pc, #364]	; (1000b4c4 <sms_dualtimer1_fn+0x214>)
1000b358:	4798      	blx	r3
1000b35a:	e0a2      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b35c:	4b5a      	ldr	r3, [pc, #360]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b35e:	781b      	ldrb	r3, [r3, #0]
1000b360:	2b00      	cmp	r3, #0
1000b362:	d000      	beq.n	1000b366 <sms_dualtimer1_fn+0xb6>
1000b364:	e09d      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b366:	2201      	movs	r2, #1
1000b368:	4b58      	ldr	r3, [pc, #352]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b36a:	701a      	strb	r2, [r3, #0]
1000b36c:	e099      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b36e:	4b56      	ldr	r3, [pc, #344]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b370:	781b      	ldrb	r3, [r3, #0]
1000b372:	2b00      	cmp	r3, #0
1000b374:	d000      	beq.n	1000b378 <sms_dualtimer1_fn+0xc8>
1000b376:	e094      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b378:	2201      	movs	r2, #1
1000b37a:	4b54      	ldr	r3, [pc, #336]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b37c:	701a      	strb	r2, [r3, #0]
1000b37e:	e090      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b380:	4b49      	ldr	r3, [pc, #292]	; (1000b4a8 <sms_dualtimer1_fn+0x1f8>)
1000b382:	785b      	ldrb	r3, [r3, #1]
1000b384:	2b01      	cmp	r3, #1
1000b386:	d023      	beq.n	1000b3d0 <sms_dualtimer1_fn+0x120>
1000b388:	2b02      	cmp	r3, #2
1000b38a:	d139      	bne.n	1000b400 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b38c:	4b4a      	ldr	r3, [pc, #296]	; (1000b4b8 <sms_dualtimer1_fn+0x208>)
1000b38e:	781b      	ldrb	r3, [r3, #0]
1000b390:	2b00      	cmp	r3, #0
1000b392:	d115      	bne.n	1000b3c0 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b394:	4a49      	ldr	r2, [pc, #292]	; (1000b4bc <sms_dualtimer1_fn+0x20c>)
1000b396:	7813      	ldrb	r3, [r2, #0]
1000b398:	3301      	adds	r3, #1
1000b39a:	b2db      	uxtb	r3, r3
1000b39c:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b39e:	2b0f      	cmp	r3, #15
1000b3a0:	d905      	bls.n	1000b3ae <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b3a2:	2200      	movs	r2, #0
1000b3a4:	4b3f      	ldr	r3, [pc, #252]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b3a6:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b3a8:	4b45      	ldr	r3, [pc, #276]	; (1000b4c0 <sms_dualtimer1_fn+0x210>)
1000b3aa:	4798      	blx	r3
1000b3ac:	e079      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b3ae:	2201      	movs	r2, #1
1000b3b0:	4b3c      	ldr	r3, [pc, #240]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b3b2:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b3b4:	2200      	movs	r2, #0
1000b3b6:	21fa      	movs	r1, #250	; 0xfa
1000b3b8:	2001      	movs	r0, #1
1000b3ba:	4b42      	ldr	r3, [pc, #264]	; (1000b4c4 <sms_dualtimer1_fn+0x214>)
1000b3bc:	4798      	blx	r3
1000b3be:	e070      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3c0:	4b41      	ldr	r3, [pc, #260]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b3c2:	781b      	ldrb	r3, [r3, #0]
1000b3c4:	2b00      	cmp	r3, #0
1000b3c6:	d16c      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b3c8:	2201      	movs	r2, #1
1000b3ca:	4b40      	ldr	r3, [pc, #256]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b3cc:	701a      	strb	r2, [r3, #0]
1000b3ce:	e068      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b3d0:	4b39      	ldr	r3, [pc, #228]	; (1000b4b8 <sms_dualtimer1_fn+0x208>)
1000b3d2:	781b      	ldrb	r3, [r3, #0]
1000b3d4:	2b00      	cmp	r3, #0
1000b3d6:	d10b      	bne.n	1000b3f0 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b3d8:	2200      	movs	r2, #0
1000b3da:	4b38      	ldr	r3, [pc, #224]	; (1000b4bc <sms_dualtimer1_fn+0x20c>)
1000b3dc:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b3de:	3201      	adds	r2, #1
1000b3e0:	4b30      	ldr	r3, [pc, #192]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b3e2:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b3e4:	2200      	movs	r2, #0
1000b3e6:	2164      	movs	r1, #100	; 0x64
1000b3e8:	2001      	movs	r0, #1
1000b3ea:	4b36      	ldr	r3, [pc, #216]	; (1000b4c4 <sms_dualtimer1_fn+0x214>)
1000b3ec:	4798      	blx	r3
1000b3ee:	e058      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3f0:	4b35      	ldr	r3, [pc, #212]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b3f2:	781b      	ldrb	r3, [r3, #0]
1000b3f4:	2b00      	cmp	r3, #0
1000b3f6:	d154      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b3f8:	2201      	movs	r2, #1
1000b3fa:	4b34      	ldr	r3, [pc, #208]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b3fc:	701a      	strb	r2, [r3, #0]
1000b3fe:	e050      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b400:	4b31      	ldr	r3, [pc, #196]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b402:	781b      	ldrb	r3, [r3, #0]
1000b404:	2b00      	cmp	r3, #0
1000b406:	d14c      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b408:	2201      	movs	r2, #1
1000b40a:	4b30      	ldr	r3, [pc, #192]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b40c:	701a      	strb	r2, [r3, #0]
1000b40e:	e048      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b410:	4b2d      	ldr	r3, [pc, #180]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b412:	781b      	ldrb	r3, [r3, #0]
1000b414:	2b00      	cmp	r3, #0
1000b416:	d144      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b418:	2201      	movs	r2, #1
1000b41a:	4b2c      	ldr	r3, [pc, #176]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b41c:	701a      	strb	r2, [r3, #0]
1000b41e:	e040      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b420:	4c21      	ldr	r4, [pc, #132]	; (1000b4a8 <sms_dualtimer1_fn+0x1f8>)
1000b422:	7863      	ldrb	r3, [r4, #1]
1000b424:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b426:	4b21      	ldr	r3, [pc, #132]	; (1000b4ac <sms_dualtimer1_fn+0x1fc>)
1000b428:	4798      	blx	r3
1000b42a:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b42c:	4820      	ldr	r0, [pc, #128]	; (1000b4b0 <sms_dualtimer1_fn+0x200>)
1000b42e:	4b21      	ldr	r3, [pc, #132]	; (1000b4b4 <sms_dualtimer1_fn+0x204>)
1000b430:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b432:	8822      	ldrh	r2, [r4, #0]
1000b434:	4b26      	ldr	r3, [pc, #152]	; (1000b4d0 <sms_dualtimer1_fn+0x220>)
1000b436:	429a      	cmp	r2, r3
1000b438:	d112      	bne.n	1000b460 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b43a:	4a20      	ldr	r2, [pc, #128]	; (1000b4bc <sms_dualtimer1_fn+0x20c>)
1000b43c:	7813      	ldrb	r3, [r2, #0]
1000b43e:	3301      	adds	r3, #1
1000b440:	b2db      	uxtb	r3, r3
1000b442:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b444:	2b09      	cmp	r3, #9
1000b446:	d902      	bls.n	1000b44e <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b448:	4b22      	ldr	r3, [pc, #136]	; (1000b4d4 <sms_dualtimer1_fn+0x224>)
1000b44a:	4798      	blx	r3
1000b44c:	e029      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b44e:	2202      	movs	r2, #2
1000b450:	4b14      	ldr	r3, [pc, #80]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b452:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b454:	2200      	movs	r2, #0
1000b456:	21fa      	movs	r1, #250	; 0xfa
1000b458:	2001      	movs	r0, #1
1000b45a:	4b1a      	ldr	r3, [pc, #104]	; (1000b4c4 <sms_dualtimer1_fn+0x214>)
1000b45c:	4798      	blx	r3
1000b45e:	e020      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b460:	2328      	movs	r3, #40	; 0x28
1000b462:	4a1d      	ldr	r2, [pc, #116]	; (1000b4d8 <sms_dualtimer1_fn+0x228>)
1000b464:	5cd3      	ldrb	r3, [r2, r3]
1000b466:	2b01      	cmp	r3, #1
1000b468:	d109      	bne.n	1000b47e <sms_dualtimer1_fn+0x1ce>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b46a:	481c      	ldr	r0, [pc, #112]	; (1000b4dc <sms_dualtimer1_fn+0x22c>)
1000b46c:	4b1c      	ldr	r3, [pc, #112]	; (1000b4e0 <sms_dualtimer1_fn+0x230>)
1000b46e:	4798      	blx	r3
1000b470:	481c      	ldr	r0, [pc, #112]	; (1000b4e4 <sms_dualtimer1_fn+0x234>)
1000b472:	4b1d      	ldr	r3, [pc, #116]	; (1000b4e8 <sms_dualtimer1_fn+0x238>)
1000b474:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b476:	2101      	movs	r1, #1
1000b478:	2000      	movs	r0, #0
1000b47a:	4b1c      	ldr	r3, [pc, #112]	; (1000b4ec <sms_dualtimer1_fn+0x23c>)
1000b47c:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b47e:	2200      	movs	r2, #0
1000b480:	4b08      	ldr	r3, [pc, #32]	; (1000b4a4 <sms_dualtimer1_fn+0x1f4>)
1000b482:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b484:	4b10      	ldr	r3, [pc, #64]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b486:	781b      	ldrb	r3, [r3, #0]
1000b488:	2b00      	cmp	r3, #0
1000b48a:	d10a      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
                    ulp_ready = true;
1000b48c:	3201      	adds	r2, #1
1000b48e:	4b0f      	ldr	r3, [pc, #60]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b490:	701a      	strb	r2, [r3, #0]
1000b492:	e006      	b.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b494:	4b0c      	ldr	r3, [pc, #48]	; (1000b4c8 <sms_dualtimer1_fn+0x218>)
1000b496:	781b      	ldrb	r3, [r3, #0]
1000b498:	2b00      	cmp	r3, #0
1000b49a:	d102      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1f2>
            //release_sleep_lock();
            ulp_ready = true;
1000b49c:	2201      	movs	r2, #1
1000b49e:	4b0b      	ldr	r3, [pc, #44]	; (1000b4cc <sms_dualtimer1_fn+0x21c>)
1000b4a0:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b4a2:	bd10      	pop	{r4, pc}
1000b4a4:	10019834 	.word	0x10019834
1000b4a8:	100198d0 	.word	0x100198d0
1000b4ac:	1000a2f9 	.word	0x1000a2f9
1000b4b0:	10016a28 	.word	0x10016a28
1000b4b4:	1000a68d 	.word	0x1000a68d
1000b4b8:	100199e0 	.word	0x100199e0
1000b4bc:	10019a02 	.word	0x10019a02
1000b4c0:	10009bf5 	.word	0x10009bf5
1000b4c4:	1000b1fd 	.word	0x1000b1fd
1000b4c8:	100199e1 	.word	0x100199e1
1000b4cc:	100198c9 	.word	0x100198c9
1000b4d0:	00000303 	.word	0x00000303
1000b4d4:	10009c0d 	.word	0x10009c0d
1000b4d8:	10019944 	.word	0x10019944
1000b4dc:	10015df4 	.word	0x10015df4
1000b4e0:	10014c49 	.word	0x10014c49
1000b4e4:	10016a3c 	.word	0x10016a3c
1000b4e8:	10014b29 	.word	0x10014b29
1000b4ec:	1000af51 	.word	0x1000af51

1000b4f0 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b4f0:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b4f2:	4846      	ldr	r0, [pc, #280]	; (1000b60c <sms_dualtimer2_fn+0x11c>)
1000b4f4:	4b46      	ldr	r3, [pc, #280]	; (1000b610 <sms_dualtimer2_fn+0x120>)
1000b4f6:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b4f8:	4b46      	ldr	r3, [pc, #280]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b4fa:	781b      	ldrb	r3, [r3, #0]
1000b4fc:	b2db      	uxtb	r3, r3
1000b4fe:	2b02      	cmp	r3, #2
1000b500:	d02f      	beq.n	1000b562 <sms_dualtimer2_fn+0x72>
1000b502:	2b03      	cmp	r3, #3
1000b504:	d054      	beq.n	1000b5b0 <sms_dualtimer2_fn+0xc0>
1000b506:	2b01      	cmp	r3, #1
1000b508:	d17f      	bne.n	1000b60a <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b50a:	2200      	movs	r2, #0
1000b50c:	4b41      	ldr	r3, [pc, #260]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b50e:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b510:	4b41      	ldr	r3, [pc, #260]	; (1000b618 <sms_dualtimer2_fn+0x128>)
1000b512:	781b      	ldrb	r3, [r3, #0]
1000b514:	2b22      	cmp	r3, #34	; 0x22
1000b516:	d107      	bne.n	1000b528 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b518:	4b40      	ldr	r3, [pc, #256]	; (1000b61c <sms_dualtimer2_fn+0x12c>)
1000b51a:	781b      	ldrb	r3, [r3, #0]
1000b51c:	2b00      	cmp	r3, #0
1000b51e:	d174      	bne.n	1000b60a <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b520:	3201      	adds	r2, #1
1000b522:	4b3f      	ldr	r3, [pc, #252]	; (1000b620 <sms_dualtimer2_fn+0x130>)
1000b524:	701a      	strb	r2, [r3, #0]
1000b526:	e070      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b528:	4a3e      	ldr	r2, [pc, #248]	; (1000b624 <sms_dualtimer2_fn+0x134>)
1000b52a:	7813      	ldrb	r3, [r2, #0]
1000b52c:	3301      	adds	r3, #1
1000b52e:	b2db      	uxtb	r3, r3
1000b530:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b532:	2b00      	cmp	r3, #0
1000b534:	d009      	beq.n	1000b54a <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b536:	483c      	ldr	r0, [pc, #240]	; (1000b628 <sms_dualtimer2_fn+0x138>)
1000b538:	4b3c      	ldr	r3, [pc, #240]	; (1000b62c <sms_dualtimer2_fn+0x13c>)
1000b53a:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b53c:	2200      	movs	r2, #0
1000b53e:	4b35      	ldr	r3, [pc, #212]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b540:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b542:	3222      	adds	r2, #34	; 0x22
1000b544:	4b34      	ldr	r3, [pc, #208]	; (1000b618 <sms_dualtimer2_fn+0x128>)
1000b546:	701a      	strb	r2, [r3, #0]
1000b548:	e05f      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b54a:	2100      	movs	r1, #0
1000b54c:	4838      	ldr	r0, [pc, #224]	; (1000b630 <sms_dualtimer2_fn+0x140>)
1000b54e:	4b37      	ldr	r3, [pc, #220]	; (1000b62c <sms_dualtimer2_fn+0x13c>)
1000b550:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b552:	2201      	movs	r2, #1
1000b554:	4b2f      	ldr	r3, [pc, #188]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b556:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b558:	2164      	movs	r1, #100	; 0x64
1000b55a:	2001      	movs	r0, #1
1000b55c:	4b35      	ldr	r3, [pc, #212]	; (1000b634 <sms_dualtimer2_fn+0x144>)
1000b55e:	4798      	blx	r3
1000b560:	e053      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b562:	4835      	ldr	r0, [pc, #212]	; (1000b638 <sms_dualtimer2_fn+0x148>)
1000b564:	4b35      	ldr	r3, [pc, #212]	; (1000b63c <sms_dualtimer2_fn+0x14c>)
1000b566:	4798      	blx	r3
1000b568:	4835      	ldr	r0, [pc, #212]	; (1000b640 <sms_dualtimer2_fn+0x150>)
1000b56a:	4b30      	ldr	r3, [pc, #192]	; (1000b62c <sms_dualtimer2_fn+0x13c>)
1000b56c:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b56e:	2200      	movs	r2, #0
1000b570:	4b28      	ldr	r3, [pc, #160]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b572:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b574:	4a33      	ldr	r2, [pc, #204]	; (1000b644 <sms_dualtimer2_fn+0x154>)
1000b576:	7813      	ldrb	r3, [r2, #0]
1000b578:	3301      	adds	r3, #1
1000b57a:	b2db      	uxtb	r3, r3
1000b57c:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b57e:	7813      	ldrb	r3, [r2, #0]
1000b580:	b2db      	uxtb	r3, r3
1000b582:	2b07      	cmp	r3, #7
1000b584:	d908      	bls.n	1000b598 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b586:	2016      	movs	r0, #22
1000b588:	4b2f      	ldr	r3, [pc, #188]	; (1000b648 <sms_dualtimer2_fn+0x158>)
1000b58a:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b58c:	4b2f      	ldr	r3, [pc, #188]	; (1000b64c <sms_dualtimer2_fn+0x15c>)
1000b58e:	4798      	blx	r3
            ulp_ready = true;
1000b590:	2201      	movs	r2, #1
1000b592:	4b23      	ldr	r3, [pc, #140]	; (1000b620 <sms_dualtimer2_fn+0x130>)
1000b594:	701a      	strb	r2, [r3, #0]
1000b596:	e038      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b598:	2016      	movs	r0, #22
1000b59a:	4b2d      	ldr	r3, [pc, #180]	; (1000b650 <sms_dualtimer2_fn+0x160>)
1000b59c:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b59e:	2202      	movs	r2, #2
1000b5a0:	4b1c      	ldr	r3, [pc, #112]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b5a2:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b5a4:	3a01      	subs	r2, #1
1000b5a6:	2164      	movs	r1, #100	; 0x64
1000b5a8:	2001      	movs	r0, #1
1000b5aa:	4b22      	ldr	r3, [pc, #136]	; (1000b634 <sms_dualtimer2_fn+0x144>)
1000b5ac:	4798      	blx	r3
1000b5ae:	e02c      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b5b0:	4821      	ldr	r0, [pc, #132]	; (1000b638 <sms_dualtimer2_fn+0x148>)
1000b5b2:	4b22      	ldr	r3, [pc, #136]	; (1000b63c <sms_dualtimer2_fn+0x14c>)
1000b5b4:	4798      	blx	r3
1000b5b6:	4827      	ldr	r0, [pc, #156]	; (1000b654 <sms_dualtimer2_fn+0x164>)
1000b5b8:	4b1c      	ldr	r3, [pc, #112]	; (1000b62c <sms_dualtimer2_fn+0x13c>)
1000b5ba:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b5bc:	2200      	movs	r2, #0
1000b5be:	4b15      	ldr	r3, [pc, #84]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b5c0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b5c2:	4a20      	ldr	r2, [pc, #128]	; (1000b644 <sms_dualtimer2_fn+0x154>)
1000b5c4:	7813      	ldrb	r3, [r2, #0]
1000b5c6:	3301      	adds	r3, #1
1000b5c8:	b2db      	uxtb	r3, r3
1000b5ca:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b5cc:	7813      	ldrb	r3, [r2, #0]
1000b5ce:	b2db      	uxtb	r3, r3
1000b5d0:	2b03      	cmp	r3, #3
1000b5d2:	d90e      	bls.n	1000b5f2 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b5d4:	2016      	movs	r0, #22
1000b5d6:	4b1c      	ldr	r3, [pc, #112]	; (1000b648 <sms_dualtimer2_fn+0x158>)
1000b5d8:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b5da:	4817      	ldr	r0, [pc, #92]	; (1000b638 <sms_dualtimer2_fn+0x148>)
1000b5dc:	4b17      	ldr	r3, [pc, #92]	; (1000b63c <sms_dualtimer2_fn+0x14c>)
1000b5de:	4798      	blx	r3
1000b5e0:	481d      	ldr	r0, [pc, #116]	; (1000b658 <sms_dualtimer2_fn+0x168>)
1000b5e2:	4b12      	ldr	r3, [pc, #72]	; (1000b62c <sms_dualtimer2_fn+0x13c>)
1000b5e4:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b5e6:	4b1d      	ldr	r3, [pc, #116]	; (1000b65c <sms_dualtimer2_fn+0x16c>)
1000b5e8:	4798      	blx	r3
            ulp_ready = true;
1000b5ea:	2201      	movs	r2, #1
1000b5ec:	4b0c      	ldr	r3, [pc, #48]	; (1000b620 <sms_dualtimer2_fn+0x130>)
1000b5ee:	701a      	strb	r2, [r3, #0]
1000b5f0:	e00b      	b.n	1000b60a <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b5f2:	2016      	movs	r0, #22
1000b5f4:	4b16      	ldr	r3, [pc, #88]	; (1000b650 <sms_dualtimer2_fn+0x160>)
1000b5f6:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b5f8:	2203      	movs	r2, #3
1000b5fa:	4b06      	ldr	r3, [pc, #24]	; (1000b614 <sms_dualtimer2_fn+0x124>)
1000b5fc:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b5fe:	3a02      	subs	r2, #2
1000b600:	21c8      	movs	r1, #200	; 0xc8
1000b602:	0049      	lsls	r1, r1, #1
1000b604:	2001      	movs	r0, #1
1000b606:	4b0b      	ldr	r3, [pc, #44]	; (1000b634 <sms_dualtimer2_fn+0x144>)
1000b608:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b60a:	bd10      	pop	{r4, pc}
1000b60c:	10016a78 	.word	0x10016a78
1000b610:	1000a68d 	.word	0x1000a68d
1000b614:	100199e1 	.word	0x100199e1
1000b618:	100199e0 	.word	0x100199e0
1000b61c:	10019834 	.word	0x10019834
1000b620:	100198c9 	.word	0x100198c9
1000b624:	100199d5 	.word	0x100199d5
1000b628:	10016a8c 	.word	0x10016a8c
1000b62c:	10014b29 	.word	0x10014b29
1000b630:	10016a9c 	.word	0x10016a9c
1000b634:	1000b1fd 	.word	0x1000b1fd
1000b638:	10015df4 	.word	0x10015df4
1000b63c:	10014c49 	.word	0x10014c49
1000b640:	10016ab8 	.word	0x10016ab8
1000b644:	10019a08 	.word	0x10019a08
1000b648:	1000aa31 	.word	0x1000aa31
1000b64c:	10009dcd 	.word	0x10009dcd
1000b650:	1000aa91 	.word	0x1000aa91
1000b654:	10016ae4 	.word	0x10016ae4
1000b658:	10016b10 	.word	0x10016b10
1000b65c:	1000f455 	.word	0x1000f455

1000b660 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b660:	230c      	movs	r3, #12
1000b662:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b664:	2300      	movs	r3, #0
1000b666:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b668:	7083      	strb	r3, [r0, #2]
}
1000b66a:	4770      	bx	lr

1000b66c <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b66c:	2301      	movs	r3, #1
1000b66e:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b670:	2300      	movs	r3, #0
1000b672:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b674:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b676:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b678:	3381      	adds	r3, #129	; 0x81
1000b67a:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b67c:	3b77      	subs	r3, #119	; 0x77
1000b67e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b680:	3301      	adds	r3, #1
1000b682:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b684:	3301      	adds	r3, #1
1000b686:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b688:	3301      	adds	r3, #1
1000b68a:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b68c:	3b0b      	subs	r3, #11
1000b68e:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b690:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b692:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b694:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b696:	4770      	bx	lr

1000b698 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b698:	b530      	push	{r4, r5, lr}
1000b69a:	b083      	sub	sp, #12
1000b69c:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b69e:	780b      	ldrb	r3, [r1, #0]
1000b6a0:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b6a2:	784b      	ldrb	r3, [r1, #1]
1000b6a4:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b6a6:	788b      	ldrb	r3, [r1, #2]
1000b6a8:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b6aa:	ad01      	add	r5, sp, #4
1000b6ac:	0028      	movs	r0, r5
1000b6ae:	4b07      	ldr	r3, [pc, #28]	; (1000b6cc <spi_attach_slave+0x34>)
1000b6b0:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b6b2:	2301      	movs	r3, #1
1000b6b4:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b6b6:	7820      	ldrb	r0, [r4, #0]
1000b6b8:	0029      	movs	r1, r5
1000b6ba:	4b05      	ldr	r3, [pc, #20]	; (1000b6d0 <spi_attach_slave+0x38>)
1000b6bc:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b6be:	7820      	ldrb	r0, [r4, #0]
1000b6c0:	2101      	movs	r1, #1
1000b6c2:	4b04      	ldr	r3, [pc, #16]	; (1000b6d4 <spi_attach_slave+0x3c>)
1000b6c4:	4798      	blx	r3
}
1000b6c6:	b003      	add	sp, #12
1000b6c8:	bd30      	pop	{r4, r5, pc}
1000b6ca:	46c0      	nop			; (mov r8, r8)
1000b6cc:	1000bcb5 	.word	0x1000bcb5
1000b6d0:	1000bcc5 	.word	0x1000bcc5
1000b6d4:	1000bf1d 	.word	0x1000bf1d

1000b6d8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b6d8:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b6da:	2201      	movs	r2, #1
1000b6dc:	761a      	strb	r2, [r3, #24]
}
1000b6de:	4770      	bx	lr

1000b6e0 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b6e0:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b6e2:	2300      	movs	r3, #0
1000b6e4:	6802      	ldr	r2, [r0, #0]
1000b6e6:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b6e8:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b6ea:	4a0d      	ldr	r2, [pc, #52]	; (1000b720 <spi_disable+0x40>)
1000b6ec:	4293      	cmp	r3, r2
1000b6ee:	d109      	bne.n	1000b704 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b6f0:	2041      	movs	r0, #65	; 0x41
1000b6f2:	4c0c      	ldr	r4, [pc, #48]	; (1000b724 <spi_disable+0x44>)
1000b6f4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b6f6:	2026      	movs	r0, #38	; 0x26
1000b6f8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b6fa:	2038      	movs	r0, #56	; 0x38
1000b6fc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b6fe:	2001      	movs	r0, #1
1000b700:	47a0      	blx	r4
1000b702:	e00b      	b.n	1000b71c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b704:	4a08      	ldr	r2, [pc, #32]	; (1000b728 <spi_disable+0x48>)
1000b706:	4293      	cmp	r3, r2
1000b708:	d108      	bne.n	1000b71c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b70a:	2042      	movs	r0, #66	; 0x42
1000b70c:	4c05      	ldr	r4, [pc, #20]	; (1000b724 <spi_disable+0x44>)
1000b70e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b710:	2027      	movs	r0, #39	; 0x27
1000b712:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b714:	2039      	movs	r0, #57	; 0x39
1000b716:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b718:	2002      	movs	r0, #2
1000b71a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b71c:	bd10      	pop	{r4, pc}
1000b71e:	46c0      	nop			; (mov r8, r8)
1000b720:	40006000 	.word	0x40006000
1000b724:	1000c6b5 	.word	0x1000c6b5
1000b728:	40007000 	.word	0x40007000

1000b72c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b72c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b72e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b730:	4b09      	ldr	r3, [pc, #36]	; (1000b758 <spi_reset+0x2c>)
1000b732:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b734:	4b09      	ldr	r3, [pc, #36]	; (1000b75c <spi_reset+0x30>)
1000b736:	429c      	cmp	r4, r3
1000b738:	d105      	bne.n	1000b746 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b73a:	2001      	movs	r0, #1
1000b73c:	4c08      	ldr	r4, [pc, #32]	; (1000b760 <spi_reset+0x34>)
1000b73e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b740:	2038      	movs	r0, #56	; 0x38
1000b742:	47a0      	blx	r4
1000b744:	e007      	b.n	1000b756 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b746:	4b07      	ldr	r3, [pc, #28]	; (1000b764 <spi_reset+0x38>)
1000b748:	429c      	cmp	r4, r3
1000b74a:	d104      	bne.n	1000b756 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b74c:	2002      	movs	r0, #2
1000b74e:	4c04      	ldr	r4, [pc, #16]	; (1000b760 <spi_reset+0x34>)
1000b750:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b752:	2039      	movs	r0, #57	; 0x39
1000b754:	47a0      	blx	r4
	}
}
1000b756:	bd10      	pop	{r4, pc}
1000b758:	1000b6e1 	.word	0x1000b6e1
1000b75c:	40006000 	.word	0x40006000
1000b760:	1000ca21 	.word	0x1000ca21
1000b764:	40007000 	.word	0x40007000

1000b768 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b768:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b76a:	465f      	mov	r7, fp
1000b76c:	4646      	mov	r6, r8
1000b76e:	b4c0      	push	{r6, r7}
1000b770:	b083      	sub	sp, #12
1000b772:	0006      	movs	r6, r0
1000b774:	4688      	mov	r8, r1
1000b776:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b778:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b77a:	7e0b      	ldrb	r3, [r1, #24]
1000b77c:	07db      	lsls	r3, r3, #31
1000b77e:	d501      	bpl.n	1000b784 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b780:	2300      	movs	r3, #0
1000b782:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b784:	0030      	movs	r0, r6
1000b786:	4b4a      	ldr	r3, [pc, #296]	; (1000b8b0 <spi_init+0x148>)
1000b788:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b78a:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b78c:	4a49      	ldr	r2, [pc, #292]	; (1000b8b4 <spi_init+0x14c>)
1000b78e:	4293      	cmp	r3, r2
1000b790:	d109      	bne.n	1000b7a6 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b792:	2041      	movs	r0, #65	; 0x41
1000b794:	4c48      	ldr	r4, [pc, #288]	; (1000b8b8 <spi_init+0x150>)
1000b796:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b798:	2026      	movs	r0, #38	; 0x26
1000b79a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b79c:	2038      	movs	r0, #56	; 0x38
1000b79e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b7a0:	2001      	movs	r0, #1
1000b7a2:	47a0      	blx	r4
1000b7a4:	e00b      	b.n	1000b7be <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b7a6:	4a45      	ldr	r2, [pc, #276]	; (1000b8bc <spi_init+0x154>)
1000b7a8:	4293      	cmp	r3, r2
1000b7aa:	d108      	bne.n	1000b7be <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b7ac:	2042      	movs	r0, #66	; 0x42
1000b7ae:	4c42      	ldr	r4, [pc, #264]	; (1000b8b8 <spi_init+0x150>)
1000b7b0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b7b2:	2027      	movs	r0, #39	; 0x27
1000b7b4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b7b6:	2039      	movs	r0, #57	; 0x39
1000b7b8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b7ba:	2002      	movs	r0, #2
1000b7bc:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b7be:	a801      	add	r0, sp, #4
1000b7c0:	4b3f      	ldr	r3, [pc, #252]	; (1000b8c0 <spi_init+0x158>)
1000b7c2:	4798      	blx	r3
1000b7c4:	002c      	movs	r4, r5
1000b7c6:	3408      	adds	r4, #8
1000b7c8:	2318      	movs	r3, #24
1000b7ca:	469b      	mov	fp, r3
1000b7cc:	44ab      	add	fp, r5
1000b7ce:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b7d0:	6820      	ldr	r0, [r4, #0]
1000b7d2:	1c43      	adds	r3, r0, #1
1000b7d4:	d011      	beq.n	1000b7fa <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b7d6:	782b      	ldrb	r3, [r5, #0]
1000b7d8:	2b01      	cmp	r3, #1
1000b7da:	d102      	bne.n	1000b7e2 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b7dc:	466a      	mov	r2, sp
1000b7de:	7113      	strb	r3, [r2, #4]
1000b7e0:	e003      	b.n	1000b7ea <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b7e2:	2b00      	cmp	r3, #0
1000b7e4:	d101      	bne.n	1000b7ea <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b7e6:	466a      	mov	r2, sp
1000b7e8:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b7ea:	b2c0      	uxtb	r0, r0
1000b7ec:	a901      	add	r1, sp, #4
1000b7ee:	4b35      	ldr	r3, [pc, #212]	; (1000b8c4 <spi_init+0x15c>)
1000b7f0:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b7f2:	8a39      	ldrh	r1, [r7, #16]
1000b7f4:	7838      	ldrb	r0, [r7, #0]
1000b7f6:	4b34      	ldr	r3, [pc, #208]	; (1000b8c8 <spi_init+0x160>)
1000b7f8:	4798      	blx	r3
1000b7fa:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b7fc:	455c      	cmp	r4, fp
1000b7fe:	d1e6      	bne.n	1000b7ce <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b800:	78eb      	ldrb	r3, [r5, #3]
1000b802:	4642      	mov	r2, r8
1000b804:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b806:	782b      	ldrb	r3, [r5, #0]
1000b808:	2b01      	cmp	r3, #1
1000b80a:	d100      	bne.n	1000b80e <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b80c:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b80e:	782b      	ldrb	r3, [r5, #0]
1000b810:	2b00      	cmp	r3, #0
1000b812:	d101      	bne.n	1000b818 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b814:	4642      	mov	r2, r8
1000b816:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b818:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b81a:	782a      	ldrb	r2, [r5, #0]
1000b81c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b81e:	782a      	ldrb	r2, [r5, #0]
1000b820:	2a01      	cmp	r2, #1
1000b822:	d101      	bne.n	1000b828 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b824:	792a      	ldrb	r2, [r5, #4]
1000b826:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b828:	786a      	ldrb	r2, [r5, #1]
1000b82a:	2a04      	cmp	r2, #4
1000b82c:	d104      	bne.n	1000b838 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b82e:	2124      	movs	r1, #36	; 0x24
1000b830:	5c58      	ldrb	r0, [r3, r1]
1000b832:	4302      	orrs	r2, r0
1000b834:	545a      	strb	r2, [r3, r1]
1000b836:	e004      	b.n	1000b842 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b838:	2124      	movs	r1, #36	; 0x24
1000b83a:	5c5a      	ldrb	r2, [r3, r1]
1000b83c:	2004      	movs	r0, #4
1000b83e:	4382      	bics	r2, r0
1000b840:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b842:	78aa      	ldrb	r2, [r5, #2]
1000b844:	2a01      	cmp	r2, #1
1000b846:	d01a      	beq.n	1000b87e <spi_init+0x116>
1000b848:	2a00      	cmp	r2, #0
1000b84a:	d004      	beq.n	1000b856 <spi_init+0xee>
1000b84c:	2a02      	cmp	r2, #2
1000b84e:	d00c      	beq.n	1000b86a <spi_init+0x102>
1000b850:	2a03      	cmp	r2, #3
1000b852:	d01e      	beq.n	1000b892 <spi_init+0x12a>
1000b854:	e026      	b.n	1000b8a4 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b856:	2224      	movs	r2, #36	; 0x24
1000b858:	5c99      	ldrb	r1, [r3, r2]
1000b85a:	2002      	movs	r0, #2
1000b85c:	4381      	bics	r1, r0
1000b85e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b860:	5c99      	ldrb	r1, [r3, r2]
1000b862:	3801      	subs	r0, #1
1000b864:	4381      	bics	r1, r0
1000b866:	5499      	strb	r1, [r3, r2]
1000b868:	e01c      	b.n	1000b8a4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b86a:	2224      	movs	r2, #36	; 0x24
1000b86c:	5c98      	ldrb	r0, [r3, r2]
1000b86e:	2102      	movs	r1, #2
1000b870:	4301      	orrs	r1, r0
1000b872:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b874:	5c99      	ldrb	r1, [r3, r2]
1000b876:	2001      	movs	r0, #1
1000b878:	4381      	bics	r1, r0
1000b87a:	5499      	strb	r1, [r3, r2]
1000b87c:	e012      	b.n	1000b8a4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b87e:	2224      	movs	r2, #36	; 0x24
1000b880:	5c99      	ldrb	r1, [r3, r2]
1000b882:	2002      	movs	r0, #2
1000b884:	4381      	bics	r1, r0
1000b886:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b888:	5c98      	ldrb	r0, [r3, r2]
1000b88a:	2101      	movs	r1, #1
1000b88c:	4301      	orrs	r1, r0
1000b88e:	5499      	strb	r1, [r3, r2]
1000b890:	e008      	b.n	1000b8a4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b892:	2224      	movs	r2, #36	; 0x24
1000b894:	5c98      	ldrb	r0, [r3, r2]
1000b896:	2102      	movs	r1, #2
1000b898:	4301      	orrs	r1, r0
1000b89a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b89c:	5c98      	ldrb	r0, [r3, r2]
1000b89e:	2101      	movs	r1, #1
1000b8a0:	4301      	orrs	r1, r0
1000b8a2:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b8a4:	2000      	movs	r0, #0
1000b8a6:	b003      	add	sp, #12
1000b8a8:	bc0c      	pop	{r2, r3}
1000b8aa:	4690      	mov	r8, r2
1000b8ac:	469b      	mov	fp, r3
1000b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b8b0:	1000b72d 	.word	0x1000b72d
1000b8b4:	40006000 	.word	0x40006000
1000b8b8:	1000c359 	.word	0x1000c359
1000b8bc:	40007000 	.word	0x40007000
1000b8c0:	1000bcb5 	.word	0x1000bcb5
1000b8c4:	1000bcc5 	.word	0x1000bcc5
1000b8c8:	1000bfa9 	.word	0x1000bfa9

1000b8cc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8ce:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b8d0:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b8d2:	2600      	movs	r6, #0
1000b8d4:	466d      	mov	r5, sp
1000b8d6:	71ee      	strb	r6, [r5, #7]
1000b8d8:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b8da:	2c00      	cmp	r4, #0
1000b8dc:	d034      	beq.n	1000b948 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b8de:	2900      	cmp	r1, #0
1000b8e0:	d104      	bne.n	1000b8ec <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b8e2:	0029      	movs	r1, r5
1000b8e4:	7980      	ldrb	r0, [r0, #6]
1000b8e6:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b8e8:	2701      	movs	r7, #1
1000b8ea:	e00b      	b.n	1000b904 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b8ec:	2a00      	cmp	r2, #0
1000b8ee:	d005      	beq.n	1000b8fc <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b8f0:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b8f2:	2b00      	cmp	r3, #0
1000b8f4:	d029      	beq.n	1000b94a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b8f6:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b8f8:	2700      	movs	r7, #0
1000b8fa:	e003      	b.n	1000b904 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b8fc:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b8fe:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b900:	466a      	mov	r2, sp
1000b902:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b904:	2528      	movs	r5, #40	; 0x28
1000b906:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b908:	07c0      	lsls	r0, r0, #31
1000b90a:	d4fc      	bmi.n	1000b906 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b90c:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b90e:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b910:	2b00      	cmp	r3, #0
1000b912:	d014      	beq.n	1000b93e <spi_transceive_buffer_wait+0x72>
1000b914:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b916:	4278      	negs	r0, r7
1000b918:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b91a:	4270      	negs	r0, r6
1000b91c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b91e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b920:	07c0      	lsls	r0, r0, #31
1000b922:	d5fc      	bpl.n	1000b91e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b924:	7808      	ldrb	r0, [r1, #0]
1000b926:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b928:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b92a:	07c0      	lsls	r0, r0, #31
1000b92c:	d5fc      	bpl.n	1000b928 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b92e:	7920      	ldrb	r0, [r4, #4]
1000b930:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b932:	3501      	adds	r5, #1
1000b934:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b936:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b938:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b93a:	42ab      	cmp	r3, r5
1000b93c:	d1ef      	bne.n	1000b91e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b93e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b940:	06db      	lsls	r3, r3, #27
1000b942:	d5fc      	bpl.n	1000b93e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b944:	2000      	movs	r0, #0
1000b946:	e000      	b.n	1000b94a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b948:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b94a:	b003      	add	sp, #12
1000b94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b94e:	46c0      	nop			; (mov r8, r8)

1000b950 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b950:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b952:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b954:	2a00      	cmp	r2, #0
1000b956:	d003      	beq.n	1000b960 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b958:	2100      	movs	r1, #0
1000b95a:	4b04      	ldr	r3, [pc, #16]	; (1000b96c <spi_select_slave+0x1c>)
1000b95c:	4798      	blx	r3
1000b95e:	e002      	b.n	1000b966 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b960:	2101      	movs	r1, #1
1000b962:	4b02      	ldr	r3, [pc, #8]	; (1000b96c <spi_select_slave+0x1c>)
1000b964:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b966:	2000      	movs	r0, #0
1000b968:	bd10      	pop	{r4, pc}
1000b96a:	46c0      	nop			; (mov r8, r8)
1000b96c:	1000bf1d 	.word	0x1000bf1d

1000b970 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b970:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b972:	4b0d      	ldr	r3, [pc, #52]	; (1000b9a8 <dualtimer_isr_handler+0x38>)
1000b974:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b976:	2b00      	cmp	r3, #0
1000b978:	d007      	beq.n	1000b98a <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b97a:	2201      	movs	r2, #1
1000b97c:	4b0a      	ldr	r3, [pc, #40]	; (1000b9a8 <dualtimer_isr_handler+0x38>)
1000b97e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b980:	4b0a      	ldr	r3, [pc, #40]	; (1000b9ac <dualtimer_isr_handler+0x3c>)
1000b982:	681b      	ldr	r3, [r3, #0]
1000b984:	2b00      	cmp	r3, #0
1000b986:	d000      	beq.n	1000b98a <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b988:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b98a:	2334      	movs	r3, #52	; 0x34
1000b98c:	4a06      	ldr	r2, [pc, #24]	; (1000b9a8 <dualtimer_isr_handler+0x38>)
1000b98e:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b990:	2b00      	cmp	r3, #0
1000b992:	d007      	beq.n	1000b9a4 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b994:	2101      	movs	r1, #1
1000b996:	232c      	movs	r3, #44	; 0x2c
1000b998:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b99a:	4b05      	ldr	r3, [pc, #20]	; (1000b9b0 <dualtimer_isr_handler+0x40>)
1000b99c:	681b      	ldr	r3, [r3, #0]
1000b99e:	2b00      	cmp	r3, #0
1000b9a0:	d000      	beq.n	1000b9a4 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b9a2:	4798      	blx	r3
	}
}
1000b9a4:	bd10      	pop	{r4, pc}
1000b9a6:	46c0      	nop			; (mov r8, r8)
1000b9a8:	40001000 	.word	0x40001000
1000b9ac:	10017d8c 	.word	0x10017d8c
1000b9b0:	10017d90 	.word	0x10017d90

1000b9b4 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b9b4:	2301      	movs	r3, #1
1000b9b6:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b9b8:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b9ba:	2202      	movs	r2, #2
1000b9bc:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b9be:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b9c0:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b9c2:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b9c4:	2200      	movs	r2, #0
1000b9c6:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b9c8:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b9ca:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b9cc:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b9ce:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b9d0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b9d2:	7602      	strb	r2, [r0, #24]
}
1000b9d4:	4770      	bx	lr
1000b9d6:	46c0      	nop			; (mov r8, r8)

1000b9d8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b9d8:	2800      	cmp	r0, #0
1000b9da:	d107      	bne.n	1000b9ec <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b9dc:	2900      	cmp	r1, #0
1000b9de:	d102      	bne.n	1000b9e6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b9e0:	4b06      	ldr	r3, [pc, #24]	; (1000b9fc <dualtimer_set_counter+0x24>)
1000b9e2:	601a      	str	r2, [r3, #0]
1000b9e4:	e009      	b.n	1000b9fa <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b9e6:	4b05      	ldr	r3, [pc, #20]	; (1000b9fc <dualtimer_set_counter+0x24>)
1000b9e8:	619a      	str	r2, [r3, #24]
1000b9ea:	e006      	b.n	1000b9fa <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b9ec:	2900      	cmp	r1, #0
1000b9ee:	d102      	bne.n	1000b9f6 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b9f0:	4b02      	ldr	r3, [pc, #8]	; (1000b9fc <dualtimer_set_counter+0x24>)
1000b9f2:	621a      	str	r2, [r3, #32]
1000b9f4:	e001      	b.n	1000b9fa <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b9f6:	4b01      	ldr	r3, [pc, #4]	; (1000b9fc <dualtimer_set_counter+0x24>)
1000b9f8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b9fa:	4770      	bx	lr
1000b9fc:	40001000 	.word	0x40001000

1000ba00 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ba00:	2800      	cmp	r0, #0
1000ba02:	d105      	bne.n	1000ba10 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ba04:	4a06      	ldr	r2, [pc, #24]	; (1000ba20 <dualtimer_enable+0x20>)
1000ba06:	7a11      	ldrb	r1, [r2, #8]
1000ba08:	2380      	movs	r3, #128	; 0x80
1000ba0a:	430b      	orrs	r3, r1
1000ba0c:	7213      	strb	r3, [r2, #8]
1000ba0e:	e005      	b.n	1000ba1c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ba10:	4903      	ldr	r1, [pc, #12]	; (1000ba20 <dualtimer_enable+0x20>)
1000ba12:	2228      	movs	r2, #40	; 0x28
1000ba14:	5c88      	ldrb	r0, [r1, r2]
1000ba16:	2380      	movs	r3, #128	; 0x80
1000ba18:	4303      	orrs	r3, r0
1000ba1a:	548b      	strb	r3, [r1, r2]
	}
}
1000ba1c:	4770      	bx	lr
1000ba1e:	46c0      	nop			; (mov r8, r8)
1000ba20:	40001000 	.word	0x40001000

1000ba24 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ba24:	2800      	cmp	r0, #0
1000ba26:	d105      	bne.n	1000ba34 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ba28:	4a06      	ldr	r2, [pc, #24]	; (1000ba44 <dualtimer_disable+0x20>)
1000ba2a:	7a11      	ldrb	r1, [r2, #8]
1000ba2c:	237f      	movs	r3, #127	; 0x7f
1000ba2e:	400b      	ands	r3, r1
1000ba30:	7213      	strb	r3, [r2, #8]
1000ba32:	e005      	b.n	1000ba40 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ba34:	4903      	ldr	r1, [pc, #12]	; (1000ba44 <dualtimer_disable+0x20>)
1000ba36:	2228      	movs	r2, #40	; 0x28
1000ba38:	5c88      	ldrb	r0, [r1, r2]
1000ba3a:	237f      	movs	r3, #127	; 0x7f
1000ba3c:	4003      	ands	r3, r0
1000ba3e:	548b      	strb	r3, [r1, r2]
	}
}
1000ba40:	4770      	bx	lr
1000ba42:	46c0      	nop			; (mov r8, r8)
1000ba44:	40001000 	.word	0x40001000

1000ba48 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000ba48:	b570      	push	{r4, r5, r6, lr}
1000ba4a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000ba4c:	2004      	movs	r0, #4
1000ba4e:	4b39      	ldr	r3, [pc, #228]	; (1000bb34 <dualtimer_init+0xec>)
1000ba50:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000ba52:	7823      	ldrb	r3, [r4, #0]
1000ba54:	2b00      	cmp	r3, #0
1000ba56:	d102      	bne.n	1000ba5e <dualtimer_init+0x16>
1000ba58:	7b23      	ldrb	r3, [r4, #12]
1000ba5a:	2b00      	cmp	r3, #0
1000ba5c:	d065      	beq.n	1000bb2a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000ba5e:	4936      	ldr	r1, [pc, #216]	; (1000bb38 <dualtimer_init+0xf0>)
1000ba60:	68ca      	ldr	r2, [r1, #12]
1000ba62:	2320      	movs	r3, #32
1000ba64:	4313      	orrs	r3, r2
1000ba66:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000ba68:	7e22      	ldrb	r2, [r4, #24]
1000ba6a:	698b      	ldr	r3, [r1, #24]
1000ba6c:	2003      	movs	r0, #3
1000ba6e:	4002      	ands	r2, r0
1000ba70:	0112      	lsls	r2, r2, #4
1000ba72:	302d      	adds	r0, #45	; 0x2d
1000ba74:	4383      	bics	r3, r0
1000ba76:	4313      	orrs	r3, r2
1000ba78:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000ba7a:	7823      	ldrb	r3, [r4, #0]
1000ba7c:	2b00      	cmp	r3, #0
1000ba7e:	d026      	beq.n	1000bace <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ba80:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000ba82:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ba84:	2b00      	cmp	r3, #0
1000ba86:	d003      	beq.n	1000ba90 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000ba88:	3b02      	subs	r3, #2
1000ba8a:	425d      	negs	r5, r3
1000ba8c:	415d      	adcs	r5, r3
1000ba8e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000ba90:	78a2      	ldrb	r2, [r4, #2]
1000ba92:	0052      	lsls	r2, r2, #1
1000ba94:	2502      	movs	r5, #2
1000ba96:	402a      	ands	r2, r5
1000ba98:	78e3      	ldrb	r3, [r4, #3]
1000ba9a:	009b      	lsls	r3, r3, #2
1000ba9c:	350a      	adds	r5, #10
1000ba9e:	402b      	ands	r3, r5
1000baa0:	431a      	orrs	r2, r3
1000baa2:	0015      	movs	r5, r2
1000baa4:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000baa6:	7923      	ldrb	r3, [r4, #4]
1000baa8:	2b00      	cmp	r3, #0
1000baaa:	d001      	beq.n	1000bab0 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000baac:	2320      	movs	r3, #32
1000baae:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bab0:	4b22      	ldr	r3, [pc, #136]	; (1000bb3c <dualtimer_init+0xf4>)
1000bab2:	68a2      	ldr	r2, [r4, #8]
1000bab4:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bab6:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bab8:	491f      	ldr	r1, [pc, #124]	; (1000bb38 <dualtimer_init+0xf0>)
1000baba:	22c4      	movs	r2, #196	; 0xc4
1000babc:	0052      	lsls	r2, r2, #1
1000babe:	5c88      	ldrb	r0, [r1, r2]
1000bac0:	2301      	movs	r3, #1
1000bac2:	4303      	orrs	r3, r0
1000bac4:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bac6:	2000      	movs	r0, #0
1000bac8:	4b1d      	ldr	r3, [pc, #116]	; (1000bb40 <dualtimer_init+0xf8>)
1000baca:	4798      	blx	r3
1000bacc:	e000      	b.n	1000bad0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bace:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bad0:	7b23      	ldrb	r3, [r4, #12]
1000bad2:	2b00      	cmp	r3, #0
1000bad4:	d029      	beq.n	1000bb2a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bad6:	7b63      	ldrb	r3, [r4, #13]
1000bad8:	2b00      	cmp	r3, #0
1000bada:	d005      	beq.n	1000bae8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000badc:	2b01      	cmp	r3, #1
1000bade:	d005      	beq.n	1000baec <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bae0:	2b02      	cmp	r3, #2
1000bae2:	d104      	bne.n	1000baee <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bae4:	2540      	movs	r5, #64	; 0x40
1000bae6:	e002      	b.n	1000baee <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bae8:	2501      	movs	r5, #1
1000baea:	e000      	b.n	1000baee <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000baec:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000baee:	7ba3      	ldrb	r3, [r4, #14]
1000baf0:	005b      	lsls	r3, r3, #1
1000baf2:	2102      	movs	r1, #2
1000baf4:	4019      	ands	r1, r3
1000baf6:	7be2      	ldrb	r2, [r4, #15]
1000baf8:	0092      	lsls	r2, r2, #2
1000bafa:	230c      	movs	r3, #12
1000bafc:	4013      	ands	r3, r2
1000bafe:	430b      	orrs	r3, r1
1000bb00:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bb02:	7c23      	ldrb	r3, [r4, #16]
1000bb04:	2b00      	cmp	r3, #0
1000bb06:	d001      	beq.n	1000bb0c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bb08:	2320      	movs	r3, #32
1000bb0a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bb0c:	6962      	ldr	r2, [r4, #20]
1000bb0e:	4b0b      	ldr	r3, [pc, #44]	; (1000bb3c <dualtimer_init+0xf4>)
1000bb10:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bb12:	2228      	movs	r2, #40	; 0x28
1000bb14:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bb16:	4908      	ldr	r1, [pc, #32]	; (1000bb38 <dualtimer_init+0xf0>)
1000bb18:	3261      	adds	r2, #97	; 0x61
1000bb1a:	32ff      	adds	r2, #255	; 0xff
1000bb1c:	5c88      	ldrb	r0, [r1, r2]
1000bb1e:	2302      	movs	r3, #2
1000bb20:	4303      	orrs	r3, r0
1000bb22:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bb24:	2001      	movs	r0, #1
1000bb26:	4b06      	ldr	r3, [pc, #24]	; (1000bb40 <dualtimer_init+0xf8>)
1000bb28:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bb2a:	4906      	ldr	r1, [pc, #24]	; (1000bb44 <dualtimer_init+0xfc>)
1000bb2c:	201e      	movs	r0, #30
1000bb2e:	4b06      	ldr	r3, [pc, #24]	; (1000bb48 <dualtimer_init+0x100>)
1000bb30:	4798      	blx	r3
}
1000bb32:	bd70      	pop	{r4, r5, r6, pc}
1000bb34:	1000ca21 	.word	0x1000ca21
1000bb38:	4000b000 	.word	0x4000b000
1000bb3c:	40001000 	.word	0x40001000
1000bb40:	1000ba01 	.word	0x1000ba01
1000bb44:	1000b971 	.word	0x1000b971
1000bb48:	1000ce89 	.word	0x1000ce89

1000bb4c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb4c:	2800      	cmp	r0, #0
1000bb4e:	d102      	bne.n	1000bb56 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bb50:	4b02      	ldr	r3, [pc, #8]	; (1000bb5c <dualtimer_register_callback+0x10>)
1000bb52:	6019      	str	r1, [r3, #0]
1000bb54:	e001      	b.n	1000bb5a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bb56:	4b02      	ldr	r3, [pc, #8]	; (1000bb60 <dualtimer_register_callback+0x14>)
1000bb58:	6019      	str	r1, [r3, #0]
	}
}
1000bb5a:	4770      	bx	lr
1000bb5c:	10017d8c 	.word	0x10017d8c
1000bb60:	10017d90 	.word	0x10017d90

1000bb64 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bb64:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bb66:	4b16      	ldr	r3, [pc, #88]	; (1000bbc0 <gpio_port0_isr_handler+0x5c>)
1000bb68:	681d      	ldr	r5, [r3, #0]
1000bb6a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bb6c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bb6e:	07cb      	lsls	r3, r1, #31
1000bb70:	d407      	bmi.n	1000bb82 <gpio_port0_isr_handler+0x1e>
1000bb72:	2301      	movs	r3, #1
1000bb74:	2401      	movs	r4, #1
1000bb76:	0018      	movs	r0, r3
1000bb78:	0022      	movs	r2, r4
1000bb7a:	409a      	lsls	r2, r3
1000bb7c:	4211      	tst	r1, r2
1000bb7e:	d014      	beq.n	1000bbaa <gpio_port0_isr_handler+0x46>
1000bb80:	e001      	b.n	1000bb86 <gpio_port0_isr_handler+0x22>
1000bb82:	2201      	movs	r2, #1
1000bb84:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb86:	b292      	uxth	r2, r2
1000bb88:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bb8a:	2346      	movs	r3, #70	; 0x46
1000bb8c:	4a0c      	ldr	r2, [pc, #48]	; (1000bbc0 <gpio_port0_isr_handler+0x5c>)
1000bb8e:	5ad3      	ldrh	r3, [r2, r3]
1000bb90:	4103      	asrs	r3, r0
1000bb92:	07db      	lsls	r3, r3, #31
1000bb94:	d50c      	bpl.n	1000bbb0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bb96:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bb98:	5ad3      	ldrh	r3, [r2, r3]
1000bb9a:	4103      	asrs	r3, r0
1000bb9c:	07db      	lsls	r3, r3, #31
1000bb9e:	d507      	bpl.n	1000bbb0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bba0:	0080      	lsls	r0, r0, #2
1000bba2:	1810      	adds	r0, r2, r0
1000bba4:	6843      	ldr	r3, [r0, #4]
1000bba6:	4798      	blx	r3
1000bba8:	e002      	b.n	1000bbb0 <gpio_port0_isr_handler+0x4c>
1000bbaa:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bbac:	2b10      	cmp	r3, #16
1000bbae:	d1e2      	bne.n	1000bb76 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bbb0:	2180      	movs	r1, #128	; 0x80
1000bbb2:	0409      	lsls	r1, r1, #16
1000bbb4:	23c0      	movs	r3, #192	; 0xc0
1000bbb6:	005b      	lsls	r3, r3, #1
1000bbb8:	4a02      	ldr	r2, [pc, #8]	; (1000bbc4 <gpio_port0_isr_handler+0x60>)
1000bbba:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bbbc:	bd70      	pop	{r4, r5, r6, pc}
1000bbbe:	46c0      	nop			; (mov r8, r8)
1000bbc0:	10019a0c 	.word	0x10019a0c
1000bbc4:	e000e100 	.word	0xe000e100

1000bbc8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bbca:	4b18      	ldr	r3, [pc, #96]	; (1000bc2c <gpio_port1_isr_handler+0x64>)
1000bbcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bbce:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bbd0:	b2b6      	uxth	r6, r6
1000bbd2:	0037      	movs	r7, r6
1000bbd4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bbd6:	0b76      	lsrs	r6, r6, #13
1000bbd8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bbda:	4d14      	ldr	r5, [pc, #80]	; (1000bc2c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bbdc:	2e00      	cmp	r6, #0
1000bbde:	d001      	beq.n	1000bbe4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bbe0:	4b13      	ldr	r3, [pc, #76]	; (1000bc30 <gpio_port1_isr_handler+0x68>)
1000bbe2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bbe4:	0022      	movs	r2, r4
1000bbe6:	2301      	movs	r3, #1
1000bbe8:	40a3      	lsls	r3, r4
1000bbea:	421f      	tst	r7, r3
1000bbec:	d013      	beq.n	1000bc16 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bbee:	b29b      	uxth	r3, r3
1000bbf0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bbf2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bbf4:	238e      	movs	r3, #142	; 0x8e
1000bbf6:	5aeb      	ldrh	r3, [r5, r3]
1000bbf8:	4123      	asrs	r3, r4
1000bbfa:	07db      	lsls	r3, r3, #31
1000bbfc:	d50b      	bpl.n	1000bc16 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bbfe:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bc00:	490a      	ldr	r1, [pc, #40]	; (1000bc2c <gpio_port1_isr_handler+0x64>)
1000bc02:	5acb      	ldrh	r3, [r1, r3]
1000bc04:	4123      	asrs	r3, r4
1000bc06:	07db      	lsls	r3, r3, #31
1000bc08:	d505      	bpl.n	1000bc16 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bc0a:	3212      	adds	r2, #18
1000bc0c:	0092      	lsls	r2, r2, #2
1000bc0e:	188a      	adds	r2, r1, r2
1000bc10:	6853      	ldr	r3, [r2, #4]
1000bc12:	4798      	blx	r3
				break;
1000bc14:	e002      	b.n	1000bc1c <gpio_port1_isr_handler+0x54>
1000bc16:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bc18:	2c10      	cmp	r4, #16
1000bc1a:	d1df      	bne.n	1000bbdc <gpio_port1_isr_handler+0x14>
1000bc1c:	2180      	movs	r1, #128	; 0x80
1000bc1e:	0449      	lsls	r1, r1, #17
1000bc20:	23c0      	movs	r3, #192	; 0xc0
1000bc22:	005b      	lsls	r3, r3, #1
1000bc24:	4a03      	ldr	r2, [pc, #12]	; (1000bc34 <gpio_port1_isr_handler+0x6c>)
1000bc26:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bc2a:	46c0      	nop			; (mov r8, r8)
1000bc2c:	10019a0c 	.word	0x10019a0c
1000bc30:	0001bc51 	.word	0x0001bc51
1000bc34:	e000e100 	.word	0xe000e100

1000bc38 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bc38:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bc3a:	2390      	movs	r3, #144	; 0x90
1000bc3c:	4a1b      	ldr	r2, [pc, #108]	; (1000bcac <gpio_port2_isr_handler+0x74>)
1000bc3e:	58d2      	ldr	r2, [r2, r3]
1000bc40:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bc42:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bc44:	04d9      	lsls	r1, r3, #19
1000bc46:	d414      	bmi.n	1000bc72 <gpio_port2_isr_handler+0x3a>
1000bc48:	0499      	lsls	r1, r3, #18
1000bc4a:	d40a      	bmi.n	1000bc62 <gpio_port2_isr_handler+0x2a>
1000bc4c:	0459      	lsls	r1, r3, #17
1000bc4e:	d40c      	bmi.n	1000bc6a <gpio_port2_isr_handler+0x32>
1000bc50:	0bdb      	lsrs	r3, r3, #15
1000bc52:	03db      	lsls	r3, r3, #15
1000bc54:	b29b      	uxth	r3, r3
1000bc56:	2b00      	cmp	r3, #0
1000bc58:	d020      	beq.n	1000bc9c <gpio_port2_isr_handler+0x64>
1000bc5a:	2380      	movs	r3, #128	; 0x80
1000bc5c:	021b      	lsls	r3, r3, #8
1000bc5e:	210f      	movs	r1, #15
1000bc60:	e00a      	b.n	1000bc78 <gpio_port2_isr_handler+0x40>
1000bc62:	2380      	movs	r3, #128	; 0x80
1000bc64:	019b      	lsls	r3, r3, #6
1000bc66:	210d      	movs	r1, #13
1000bc68:	e006      	b.n	1000bc78 <gpio_port2_isr_handler+0x40>
1000bc6a:	2380      	movs	r3, #128	; 0x80
1000bc6c:	01db      	lsls	r3, r3, #7
1000bc6e:	210e      	movs	r1, #14
1000bc70:	e002      	b.n	1000bc78 <gpio_port2_isr_handler+0x40>
1000bc72:	2380      	movs	r3, #128	; 0x80
1000bc74:	015b      	lsls	r3, r3, #5
1000bc76:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bc78:	b29b      	uxth	r3, r3
1000bc7a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bc7c:	23d6      	movs	r3, #214	; 0xd6
1000bc7e:	4a0b      	ldr	r2, [pc, #44]	; (1000bcac <gpio_port2_isr_handler+0x74>)
1000bc80:	5ad3      	ldrh	r3, [r2, r3]
1000bc82:	410b      	asrs	r3, r1
1000bc84:	07db      	lsls	r3, r3, #31
1000bc86:	d509      	bpl.n	1000bc9c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bc88:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bc8a:	5ad3      	ldrh	r3, [r2, r3]
1000bc8c:	410b      	asrs	r3, r1
1000bc8e:	07db      	lsls	r3, r3, #31
1000bc90:	d504      	bpl.n	1000bc9c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bc92:	3124      	adds	r1, #36	; 0x24
1000bc94:	0089      	lsls	r1, r1, #2
1000bc96:	1851      	adds	r1, r2, r1
1000bc98:	684b      	ldr	r3, [r1, #4]
1000bc9a:	4798      	blx	r3
1000bc9c:	2180      	movs	r1, #128	; 0x80
1000bc9e:	0489      	lsls	r1, r1, #18
1000bca0:	23c0      	movs	r3, #192	; 0xc0
1000bca2:	005b      	lsls	r3, r3, #1
1000bca4:	4a02      	ldr	r2, [pc, #8]	; (1000bcb0 <gpio_port2_isr_handler+0x78>)
1000bca6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bca8:	bd10      	pop	{r4, pc}
1000bcaa:	46c0      	nop			; (mov r8, r8)
1000bcac:	10019a0c 	.word	0x10019a0c
1000bcb0:	e000e100 	.word	0xe000e100

1000bcb4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bcb4:	2300      	movs	r3, #0
1000bcb6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bcb8:	2201      	movs	r2, #1
1000bcba:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bcbc:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bcbe:	70c3      	strb	r3, [r0, #3]
}
1000bcc0:	4770      	bx	lr
1000bcc2:	46c0      	nop			; (mov r8, r8)

1000bcc4 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bcc4:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bcc6:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bcc8:	2801      	cmp	r0, #1
1000bcca:	d800      	bhi.n	1000bcce <gpio_pin_set_config+0xa>
1000bccc:	e0c8      	b.n	1000be60 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bcce:	2807      	cmp	r0, #7
1000bcd0:	d809      	bhi.n	1000bce6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bcd2:	4d64      	ldr	r5, [pc, #400]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000bcd4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bcd6:	3b10      	subs	r3, #16
1000bcd8:	4003      	ands	r3, r0
1000bcda:	009b      	lsls	r3, r3, #2
1000bcdc:	2407      	movs	r4, #7
1000bcde:	409c      	lsls	r4, r3
1000bce0:	43a2      	bics	r2, r4
1000bce2:	646a      	str	r2, [r5, #68]	; 0x44
1000bce4:	e029      	b.n	1000bd3a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bce6:	280f      	cmp	r0, #15
1000bce8:	d809      	bhi.n	1000bcfe <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bcea:	4d5e      	ldr	r5, [pc, #376]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000bcec:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bcee:	2307      	movs	r3, #7
1000bcf0:	4003      	ands	r3, r0
1000bcf2:	009b      	lsls	r3, r3, #2
1000bcf4:	2407      	movs	r4, #7
1000bcf6:	409c      	lsls	r4, r3
1000bcf8:	43a2      	bics	r2, r4
1000bcfa:	64aa      	str	r2, [r5, #72]	; 0x48
1000bcfc:	e01d      	b.n	1000bd3a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000bcfe:	2817      	cmp	r0, #23
1000bd00:	d809      	bhi.n	1000bd16 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bd02:	4d58      	ldr	r5, [pc, #352]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000bd04:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000bd06:	2307      	movs	r3, #7
1000bd08:	4003      	ands	r3, r0
1000bd0a:	009b      	lsls	r3, r3, #2
1000bd0c:	2407      	movs	r4, #7
1000bd0e:	409c      	lsls	r4, r3
1000bd10:	43a2      	bics	r2, r4
1000bd12:	64ea      	str	r2, [r5, #76]	; 0x4c
1000bd14:	e011      	b.n	1000bd3a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bd16:	0003      	movs	r3, r0
1000bd18:	3b2c      	subs	r3, #44	; 0x2c
1000bd1a:	2b03      	cmp	r3, #3
1000bd1c:	d80d      	bhi.n	1000bd3a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bd1e:	4d52      	ldr	r5, [pc, #328]	; (1000be68 <gpio_pin_set_config+0x1a4>)
1000bd20:	2482      	movs	r4, #130	; 0x82
1000bd22:	00e4      	lsls	r4, r4, #3
1000bd24:	5d2a      	ldrb	r2, [r5, r4]
1000bd26:	0712      	lsls	r2, r2, #28
1000bd28:	2601      	movs	r6, #1
1000bd2a:	409e      	lsls	r6, r3
1000bd2c:	0f12      	lsrs	r2, r2, #28
1000bd2e:	5d2b      	ldrb	r3, [r5, r4]
1000bd30:	43b2      	bics	r2, r6
1000bd32:	260f      	movs	r6, #15
1000bd34:	43b3      	bics	r3, r6
1000bd36:	4313      	orrs	r3, r2
1000bd38:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bd3a:	0003      	movs	r3, r0
1000bd3c:	3b1d      	subs	r3, #29
1000bd3e:	2b02      	cmp	r3, #2
1000bd40:	d829      	bhi.n	1000bd96 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bd42:	784b      	ldrb	r3, [r1, #1]
1000bd44:	2b01      	cmp	r3, #1
1000bd46:	d108      	bne.n	1000bd5a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bd48:	4d47      	ldr	r5, [pc, #284]	; (1000be68 <gpio_pin_set_config+0x1a4>)
1000bd4a:	7d2b      	ldrb	r3, [r5, #20]
1000bd4c:	241f      	movs	r4, #31
1000bd4e:	1a24      	subs	r4, r4, r0
1000bd50:	2201      	movs	r2, #1
1000bd52:	40a2      	lsls	r2, r4
1000bd54:	4393      	bics	r3, r2
1000bd56:	752b      	strb	r3, [r5, #20]
1000bd58:	e008      	b.n	1000bd6c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bd5a:	4c43      	ldr	r4, [pc, #268]	; (1000be68 <gpio_pin_set_config+0x1a4>)
1000bd5c:	7d25      	ldrb	r5, [r4, #20]
1000bd5e:	221f      	movs	r2, #31
1000bd60:	1a12      	subs	r2, r2, r0
1000bd62:	2301      	movs	r3, #1
1000bd64:	4093      	lsls	r3, r2
1000bd66:	432b      	orrs	r3, r5
1000bd68:	b2db      	uxtb	r3, r3
1000bd6a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bd6c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd6e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bd70:	2a00      	cmp	r2, #0
1000bd72:	d075      	beq.n	1000be60 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bd74:	493c      	ldr	r1, [pc, #240]	; (1000be68 <gpio_pin_set_config+0x1a4>)
1000bd76:	880c      	ldrh	r4, [r1, #0]
1000bd78:	221f      	movs	r2, #31
1000bd7a:	1a10      	subs	r0, r2, r0
1000bd7c:	0080      	lsls	r0, r0, #2
1000bd7e:	3301      	adds	r3, #1
1000bd80:	4083      	lsls	r3, r0
1000bd82:	4323      	orrs	r3, r4
1000bd84:	b29b      	uxth	r3, r3
1000bd86:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bd88:	4a38      	ldr	r2, [pc, #224]	; (1000be6c <gpio_pin_set_config+0x1a8>)
1000bd8a:	7811      	ldrb	r1, [r2, #0]
1000bd8c:	2302      	movs	r3, #2
1000bd8e:	430b      	orrs	r3, r1
1000bd90:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd92:	2300      	movs	r3, #0
1000bd94:	e064      	b.n	1000be60 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bd96:	780a      	ldrb	r2, [r1, #0]
1000bd98:	2a00      	cmp	r2, #0
1000bd9a:	d140      	bne.n	1000be1e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bd9c:	280f      	cmp	r0, #15
1000bd9e:	d808      	bhi.n	1000bdb2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bda0:	2301      	movs	r3, #1
1000bda2:	4083      	lsls	r3, r0
1000bda4:	b29b      	uxth	r3, r3
1000bda6:	4a32      	ldr	r2, [pc, #200]	; (1000be70 <gpio_pin_set_config+0x1ac>)
1000bda8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdaa:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bdac:	281f      	cmp	r0, #31
1000bdae:	d857      	bhi.n	1000be60 <gpio_pin_set_config+0x19c>
1000bdb0:	e012      	b.n	1000bdd8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bdb2:	281f      	cmp	r0, #31
1000bdb4:	d807      	bhi.n	1000bdc6 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bdb6:	220f      	movs	r2, #15
1000bdb8:	4002      	ands	r2, r0
1000bdba:	2301      	movs	r3, #1
1000bdbc:	4093      	lsls	r3, r2
1000bdbe:	b29b      	uxth	r3, r3
1000bdc0:	4a2c      	ldr	r2, [pc, #176]	; (1000be74 <gpio_pin_set_config+0x1b0>)
1000bdc2:	8293      	strh	r3, [r2, #20]
1000bdc4:	e008      	b.n	1000bdd8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bdc6:	230f      	movs	r3, #15
1000bdc8:	4018      	ands	r0, r3
1000bdca:	3b0e      	subs	r3, #14
1000bdcc:	4083      	lsls	r3, r0
1000bdce:	b29b      	uxth	r3, r3
1000bdd0:	4a29      	ldr	r2, [pc, #164]	; (1000be78 <gpio_pin_set_config+0x1b4>)
1000bdd2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdd4:	2300      	movs	r3, #0
1000bdd6:	e043      	b.n	1000be60 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bdd8:	784b      	ldrb	r3, [r1, #1]
1000bdda:	2b01      	cmp	r3, #1
1000bddc:	d00c      	beq.n	1000bdf8 <gpio_pin_set_config+0x134>
1000bdde:	2b00      	cmp	r3, #0
1000bde0:	d002      	beq.n	1000bde8 <gpio_pin_set_config+0x124>
1000bde2:	2b02      	cmp	r3, #2
1000bde4:	d010      	beq.n	1000be08 <gpio_pin_set_config+0x144>
1000bde6:	e03a      	b.n	1000be5e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bde8:	491e      	ldr	r1, [pc, #120]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000bdea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bdec:	2301      	movs	r3, #1
1000bdee:	4083      	lsls	r3, r0
1000bdf0:	4313      	orrs	r3, r2
1000bdf2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdf4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bdf6:	e033      	b.n	1000be60 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bdf8:	491a      	ldr	r1, [pc, #104]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000bdfa:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bdfc:	2201      	movs	r2, #1
1000bdfe:	4082      	lsls	r2, r0
1000be00:	4393      	bics	r3, r2
1000be02:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be04:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000be06:	e02b      	b.n	1000be60 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000be08:	4b16      	ldr	r3, [pc, #88]	; (1000be64 <gpio_pin_set_config+0x1a0>)
1000be0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000be0c:	2201      	movs	r2, #1
1000be0e:	4082      	lsls	r2, r0
1000be10:	4311      	orrs	r1, r2
1000be12:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000be14:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000be16:	4391      	bics	r1, r2
1000be18:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be1a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000be1c:	e020      	b.n	1000be60 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be1e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000be20:	2a01      	cmp	r2, #1
1000be22:	d11d      	bne.n	1000be60 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000be24:	280f      	cmp	r0, #15
1000be26:	d806      	bhi.n	1000be36 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000be28:	3301      	adds	r3, #1
1000be2a:	4083      	lsls	r3, r0
1000be2c:	b29b      	uxth	r3, r3
1000be2e:	4a10      	ldr	r2, [pc, #64]	; (1000be70 <gpio_pin_set_config+0x1ac>)
1000be30:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be32:	2300      	movs	r3, #0
1000be34:	e014      	b.n	1000be60 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000be36:	281f      	cmp	r0, #31
1000be38:	d808      	bhi.n	1000be4c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000be3a:	230f      	movs	r3, #15
1000be3c:	4018      	ands	r0, r3
1000be3e:	3b0e      	subs	r3, #14
1000be40:	4083      	lsls	r3, r0
1000be42:	b29b      	uxth	r3, r3
1000be44:	4a0b      	ldr	r2, [pc, #44]	; (1000be74 <gpio_pin_set_config+0x1b0>)
1000be46:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be48:	2300      	movs	r3, #0
1000be4a:	e009      	b.n	1000be60 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000be4c:	230f      	movs	r3, #15
1000be4e:	4018      	ands	r0, r3
1000be50:	3b0e      	subs	r3, #14
1000be52:	4083      	lsls	r3, r0
1000be54:	b29b      	uxth	r3, r3
1000be56:	4a08      	ldr	r2, [pc, #32]	; (1000be78 <gpio_pin_set_config+0x1b4>)
1000be58:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be5a:	2300      	movs	r3, #0
1000be5c:	e000      	b.n	1000be60 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000be5e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000be60:	0018      	movs	r0, r3
1000be62:	bd70      	pop	{r4, r5, r6, pc}
1000be64:	4000b000 	.word	0x4000b000
1000be68:	4000f000 	.word	0x4000f000
1000be6c:	4000e000 	.word	0x4000e000
1000be70:	40010000 	.word	0x40010000
1000be74:	40011000 	.word	0x40011000
1000be78:	40013000 	.word	0x40013000

1000be7c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000be7c:	280f      	cmp	r0, #15
1000be7e:	d806      	bhi.n	1000be8e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000be80:	4b0f      	ldr	r3, [pc, #60]	; (1000bec0 <gpio_pin_get_input_level+0x44>)
1000be82:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000be84:	2301      	movs	r3, #1
1000be86:	4083      	lsls	r3, r0
1000be88:	0018      	movs	r0, r3
1000be8a:	4008      	ands	r0, r1
1000be8c:	e014      	b.n	1000beb8 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000be8e:	281f      	cmp	r0, #31
1000be90:	d809      	bhi.n	1000bea6 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000be92:	4b0c      	ldr	r3, [pc, #48]	; (1000bec4 <gpio_pin_get_input_level+0x48>)
1000be94:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000be96:	230f      	movs	r3, #15
1000be98:	4003      	ands	r3, r0
1000be9a:	001a      	movs	r2, r3
1000be9c:	2301      	movs	r3, #1
1000be9e:	4093      	lsls	r3, r2
1000bea0:	0018      	movs	r0, r3
1000bea2:	4008      	ands	r0, r1
1000bea4:	e008      	b.n	1000beb8 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000bea6:	4b08      	ldr	r3, [pc, #32]	; (1000bec8 <gpio_pin_get_input_level+0x4c>)
1000bea8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000beaa:	230f      	movs	r3, #15
1000beac:	4003      	ands	r3, r0
1000beae:	001a      	movs	r2, r3
1000beb0:	2301      	movs	r3, #1
1000beb2:	4093      	lsls	r3, r2
1000beb4:	0018      	movs	r0, r3
1000beb6:	4008      	ands	r0, r1
	}

	return regval;
1000beb8:	1e43      	subs	r3, r0, #1
1000beba:	4198      	sbcs	r0, r3
1000bebc:	b2c0      	uxtb	r0, r0
}
1000bebe:	4770      	bx	lr
1000bec0:	40010000 	.word	0x40010000
1000bec4:	40011000 	.word	0x40011000
1000bec8:	40013000 	.word	0x40013000

1000becc <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000becc:	280f      	cmp	r0, #15
1000bece:	d806      	bhi.n	1000bede <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000bed0:	4b0f      	ldr	r3, [pc, #60]	; (1000bf10 <gpio_pin_get_output_level+0x44>)
1000bed2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000bed4:	2301      	movs	r3, #1
1000bed6:	4083      	lsls	r3, r0
1000bed8:	0018      	movs	r0, r3
1000beda:	4008      	ands	r0, r1
1000bedc:	e014      	b.n	1000bf08 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000bede:	281f      	cmp	r0, #31
1000bee0:	d809      	bhi.n	1000bef6 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000bee2:	4b0c      	ldr	r3, [pc, #48]	; (1000bf14 <gpio_pin_get_output_level+0x48>)
1000bee4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bee6:	230f      	movs	r3, #15
1000bee8:	4003      	ands	r3, r0
1000beea:	001a      	movs	r2, r3
1000beec:	2301      	movs	r3, #1
1000beee:	4093      	lsls	r3, r2
1000bef0:	0018      	movs	r0, r3
1000bef2:	4008      	ands	r0, r1
1000bef4:	e008      	b.n	1000bf08 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000bef6:	4b08      	ldr	r3, [pc, #32]	; (1000bf18 <gpio_pin_get_output_level+0x4c>)
1000bef8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000befa:	230f      	movs	r3, #15
1000befc:	4003      	ands	r3, r0
1000befe:	001a      	movs	r2, r3
1000bf00:	2301      	movs	r3, #1
1000bf02:	4093      	lsls	r3, r2
1000bf04:	0018      	movs	r0, r3
1000bf06:	4008      	ands	r0, r1
	}

	return regval;
1000bf08:	1e43      	subs	r3, r0, #1
1000bf0a:	4198      	sbcs	r0, r3
1000bf0c:	b2c0      	uxtb	r0, r0
}
1000bf0e:	4770      	bx	lr
1000bf10:	40010000 	.word	0x40010000
1000bf14:	40011000 	.word	0x40011000
1000bf18:	40013000 	.word	0x40013000

1000bf1c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000bf1c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000bf1e:	280f      	cmp	r0, #15
1000bf20:	d810      	bhi.n	1000bf44 <gpio_pin_set_output_level+0x28>
		if(level) {
1000bf22:	2900      	cmp	r1, #0
1000bf24:	d007      	beq.n	1000bf36 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000bf26:	4a1d      	ldr	r2, [pc, #116]	; (1000bf9c <gpio_pin_set_output_level+0x80>)
1000bf28:	8891      	ldrh	r1, [r2, #4]
1000bf2a:	2301      	movs	r3, #1
1000bf2c:	4083      	lsls	r3, r0
1000bf2e:	430b      	orrs	r3, r1
1000bf30:	b29b      	uxth	r3, r3
1000bf32:	8093      	strh	r3, [r2, #4]
1000bf34:	e031      	b.n	1000bf9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000bf36:	4919      	ldr	r1, [pc, #100]	; (1000bf9c <gpio_pin_set_output_level+0x80>)
1000bf38:	888b      	ldrh	r3, [r1, #4]
1000bf3a:	2201      	movs	r2, #1
1000bf3c:	4082      	lsls	r2, r0
1000bf3e:	4393      	bics	r3, r2
1000bf40:	808b      	strh	r3, [r1, #4]
1000bf42:	e02a      	b.n	1000bf9a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000bf44:	281f      	cmp	r0, #31
1000bf46:	d814      	bhi.n	1000bf72 <gpio_pin_set_output_level+0x56>
		if(level) {
1000bf48:	2900      	cmp	r1, #0
1000bf4a:	d009      	beq.n	1000bf60 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bf4c:	4914      	ldr	r1, [pc, #80]	; (1000bfa0 <gpio_pin_set_output_level+0x84>)
1000bf4e:	888c      	ldrh	r4, [r1, #4]
1000bf50:	220f      	movs	r2, #15
1000bf52:	4010      	ands	r0, r2
1000bf54:	2301      	movs	r3, #1
1000bf56:	4083      	lsls	r3, r0
1000bf58:	4323      	orrs	r3, r4
1000bf5a:	b29b      	uxth	r3, r3
1000bf5c:	808b      	strh	r3, [r1, #4]
1000bf5e:	e01c      	b.n	1000bf9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bf60:	490f      	ldr	r1, [pc, #60]	; (1000bfa0 <gpio_pin_set_output_level+0x84>)
1000bf62:	888b      	ldrh	r3, [r1, #4]
1000bf64:	220f      	movs	r2, #15
1000bf66:	4010      	ands	r0, r2
1000bf68:	3a0e      	subs	r2, #14
1000bf6a:	4082      	lsls	r2, r0
1000bf6c:	4393      	bics	r3, r2
1000bf6e:	808b      	strh	r3, [r1, #4]
1000bf70:	e013      	b.n	1000bf9a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000bf72:	2900      	cmp	r1, #0
1000bf74:	d009      	beq.n	1000bf8a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bf76:	490b      	ldr	r1, [pc, #44]	; (1000bfa4 <gpio_pin_set_output_level+0x88>)
1000bf78:	888c      	ldrh	r4, [r1, #4]
1000bf7a:	220f      	movs	r2, #15
1000bf7c:	4010      	ands	r0, r2
1000bf7e:	2301      	movs	r3, #1
1000bf80:	4083      	lsls	r3, r0
1000bf82:	4323      	orrs	r3, r4
1000bf84:	b29b      	uxth	r3, r3
1000bf86:	808b      	strh	r3, [r1, #4]
1000bf88:	e007      	b.n	1000bf9a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bf8a:	4906      	ldr	r1, [pc, #24]	; (1000bfa4 <gpio_pin_set_output_level+0x88>)
1000bf8c:	888b      	ldrh	r3, [r1, #4]
1000bf8e:	220f      	movs	r2, #15
1000bf90:	4010      	ands	r0, r2
1000bf92:	3a0e      	subs	r2, #14
1000bf94:	4082      	lsls	r2, r0
1000bf96:	4393      	bics	r3, r2
1000bf98:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000bf9a:	bd10      	pop	{r4, pc}
1000bf9c:	40010000 	.word	0x40010000
1000bfa0:	40011000 	.word	0x40011000
1000bfa4:	40013000 	.word	0x40013000

1000bfa8 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bfa8:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bfaa:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bfac:	23ff      	movs	r3, #255	; 0xff
1000bfae:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bfb0:	2807      	cmp	r0, #7
1000bfb2:	d833      	bhi.n	1000c01c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bfb4:	4a4e      	ldr	r2, [pc, #312]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000bfb6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bfb8:	3bf8      	subs	r3, #248	; 0xf8
1000bfba:	4003      	ands	r3, r0
1000bfbc:	009b      	lsls	r3, r3, #2
1000bfbe:	2607      	movs	r6, #7
1000bfc0:	409e      	lsls	r6, r3
1000bfc2:	43b4      	bics	r4, r6
1000bfc4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bfc6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bfc8:	000e      	movs	r6, r1
1000bfca:	409e      	lsls	r6, r3
1000bfcc:	0033      	movs	r3, r6
1000bfce:	4323      	orrs	r3, r4
1000bfd0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bfd2:	2901      	cmp	r1, #1
1000bfd4:	d000      	beq.n	1000bfd8 <gpio_pinmux_cofiguration+0x30>
1000bfd6:	e08a      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000bfd8:	2803      	cmp	r0, #3
1000bfda:	d80f      	bhi.n	1000bffc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bfdc:	0011      	movs	r1, r2
1000bfde:	22d0      	movs	r2, #208	; 0xd0
1000bfe0:	0052      	lsls	r2, r2, #1
1000bfe2:	588c      	ldr	r4, [r1, r2]
1000bfe4:	2303      	movs	r3, #3
1000bfe6:	4018      	ands	r0, r3
1000bfe8:	00c0      	lsls	r0, r0, #3
1000bfea:	333c      	adds	r3, #60	; 0x3c
1000bfec:	4083      	lsls	r3, r0
1000bfee:	439c      	bics	r4, r3
1000bff0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bff2:	588b      	ldr	r3, [r1, r2]
1000bff4:	4085      	lsls	r5, r0
1000bff6:	431d      	orrs	r5, r3
1000bff8:	508d      	str	r5, [r1, r2]
1000bffa:	e078      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bffc:	493c      	ldr	r1, [pc, #240]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000bffe:	22d2      	movs	r2, #210	; 0xd2
1000c000:	0052      	lsls	r2, r2, #1
1000c002:	588c      	ldr	r4, [r1, r2]
1000c004:	2303      	movs	r3, #3
1000c006:	4018      	ands	r0, r3
1000c008:	00c0      	lsls	r0, r0, #3
1000c00a:	333c      	adds	r3, #60	; 0x3c
1000c00c:	4083      	lsls	r3, r0
1000c00e:	439c      	bics	r4, r3
1000c010:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c012:	588b      	ldr	r3, [r1, r2]
1000c014:	4085      	lsls	r5, r0
1000c016:	431d      	orrs	r5, r3
1000c018:	508d      	str	r5, [r1, r2]
1000c01a:	e068      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c01c:	280f      	cmp	r0, #15
1000c01e:	d832      	bhi.n	1000c086 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c020:	4a33      	ldr	r2, [pc, #204]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000c022:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c024:	2307      	movs	r3, #7
1000c026:	4003      	ands	r3, r0
1000c028:	009b      	lsls	r3, r3, #2
1000c02a:	2607      	movs	r6, #7
1000c02c:	409e      	lsls	r6, r3
1000c02e:	43b4      	bics	r4, r6
1000c030:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c032:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c034:	000e      	movs	r6, r1
1000c036:	409e      	lsls	r6, r3
1000c038:	0033      	movs	r3, r6
1000c03a:	4323      	orrs	r3, r4
1000c03c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c03e:	2901      	cmp	r1, #1
1000c040:	d155      	bne.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c042:	280b      	cmp	r0, #11
1000c044:	d80f      	bhi.n	1000c066 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c046:	0011      	movs	r1, r2
1000c048:	22d4      	movs	r2, #212	; 0xd4
1000c04a:	0052      	lsls	r2, r2, #1
1000c04c:	588c      	ldr	r4, [r1, r2]
1000c04e:	2303      	movs	r3, #3
1000c050:	4018      	ands	r0, r3
1000c052:	00c0      	lsls	r0, r0, #3
1000c054:	333c      	adds	r3, #60	; 0x3c
1000c056:	4083      	lsls	r3, r0
1000c058:	439c      	bics	r4, r3
1000c05a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c05c:	588b      	ldr	r3, [r1, r2]
1000c05e:	4085      	lsls	r5, r0
1000c060:	431d      	orrs	r5, r3
1000c062:	508d      	str	r5, [r1, r2]
1000c064:	e043      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c066:	4922      	ldr	r1, [pc, #136]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000c068:	22d6      	movs	r2, #214	; 0xd6
1000c06a:	0052      	lsls	r2, r2, #1
1000c06c:	588c      	ldr	r4, [r1, r2]
1000c06e:	2303      	movs	r3, #3
1000c070:	4018      	ands	r0, r3
1000c072:	00c0      	lsls	r0, r0, #3
1000c074:	333c      	adds	r3, #60	; 0x3c
1000c076:	4083      	lsls	r3, r0
1000c078:	439c      	bics	r4, r3
1000c07a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c07c:	588b      	ldr	r3, [r1, r2]
1000c07e:	4085      	lsls	r5, r0
1000c080:	431d      	orrs	r5, r3
1000c082:	508d      	str	r5, [r1, r2]
1000c084:	e033      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c086:	2817      	cmp	r0, #23
1000c088:	d831      	bhi.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c08a:	4a19      	ldr	r2, [pc, #100]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000c08c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c08e:	2307      	movs	r3, #7
1000c090:	4003      	ands	r3, r0
1000c092:	009b      	lsls	r3, r3, #2
1000c094:	2607      	movs	r6, #7
1000c096:	409e      	lsls	r6, r3
1000c098:	43b4      	bics	r4, r6
1000c09a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c09c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c09e:	000e      	movs	r6, r1
1000c0a0:	409e      	lsls	r6, r3
1000c0a2:	0033      	movs	r3, r6
1000c0a4:	4323      	orrs	r3, r4
1000c0a6:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c0a8:	2901      	cmp	r1, #1
1000c0aa:	d120      	bne.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c0ac:	2813      	cmp	r0, #19
1000c0ae:	d80f      	bhi.n	1000c0d0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0b0:	0011      	movs	r1, r2
1000c0b2:	22d8      	movs	r2, #216	; 0xd8
1000c0b4:	0052      	lsls	r2, r2, #1
1000c0b6:	588c      	ldr	r4, [r1, r2]
1000c0b8:	2303      	movs	r3, #3
1000c0ba:	4018      	ands	r0, r3
1000c0bc:	00c0      	lsls	r0, r0, #3
1000c0be:	333c      	adds	r3, #60	; 0x3c
1000c0c0:	4083      	lsls	r3, r0
1000c0c2:	439c      	bics	r4, r3
1000c0c4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0c6:	588b      	ldr	r3, [r1, r2]
1000c0c8:	4085      	lsls	r5, r0
1000c0ca:	431d      	orrs	r5, r3
1000c0cc:	508d      	str	r5, [r1, r2]
1000c0ce:	e00e      	b.n	1000c0ee <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0d0:	4a07      	ldr	r2, [pc, #28]	; (1000c0f0 <gpio_pinmux_cofiguration+0x148>)
1000c0d2:	23da      	movs	r3, #218	; 0xda
1000c0d4:	005b      	lsls	r3, r3, #1
1000c0d6:	58d1      	ldr	r1, [r2, r3]
1000c0d8:	2403      	movs	r4, #3
1000c0da:	4020      	ands	r0, r4
1000c0dc:	00c0      	lsls	r0, r0, #3
1000c0de:	343c      	adds	r4, #60	; 0x3c
1000c0e0:	4084      	lsls	r4, r0
1000c0e2:	43a1      	bics	r1, r4
1000c0e4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0e6:	58d1      	ldr	r1, [r2, r3]
1000c0e8:	4085      	lsls	r5, r0
1000c0ea:	430d      	orrs	r5, r1
1000c0ec:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c0ee:	bd70      	pop	{r4, r5, r6, pc}
1000c0f0:	4000b000 	.word	0x4000b000

1000c0f4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c0f6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c0f8:	280f      	cmp	r0, #15
1000c0fa:	d904      	bls.n	1000c106 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c0fc:	241f      	movs	r4, #31
1000c0fe:	4284      	cmp	r4, r0
1000c100:	415b      	adcs	r3, r3
1000c102:	3c1d      	subs	r4, #29
1000c104:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c106:	2a01      	cmp	r2, #1
1000c108:	d016      	beq.n	1000c138 <gpio_register_callback+0x44>
1000c10a:	2a00      	cmp	r2, #0
1000c10c:	d004      	beq.n	1000c118 <gpio_register_callback+0x24>
1000c10e:	2a02      	cmp	r2, #2
1000c110:	d022      	beq.n	1000c158 <gpio_register_callback+0x64>
1000c112:	2a03      	cmp	r2, #3
1000c114:	d030      	beq.n	1000c178 <gpio_register_callback+0x84>
1000c116:	e03e      	b.n	1000c196 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c118:	4e29      	ldr	r6, [pc, #164]	; (1000c1c0 <gpio_register_callback+0xcc>)
1000c11a:	00dc      	lsls	r4, r3, #3
1000c11c:	18e2      	adds	r2, r4, r3
1000c11e:	00d2      	lsls	r2, r2, #3
1000c120:	5997      	ldr	r7, [r2, r6]
1000c122:	250f      	movs	r5, #15
1000c124:	4005      	ands	r5, r0
1000c126:	2201      	movs	r2, #1
1000c128:	40aa      	lsls	r2, r5
1000c12a:	b292      	uxth	r2, r2
1000c12c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c12e:	18e4      	adds	r4, r4, r3
1000c130:	00e4      	lsls	r4, r4, #3
1000c132:	59a4      	ldr	r4, [r4, r6]
1000c134:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c136:	e02e      	b.n	1000c196 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c138:	4e21      	ldr	r6, [pc, #132]	; (1000c1c0 <gpio_register_callback+0xcc>)
1000c13a:	00dc      	lsls	r4, r3, #3
1000c13c:	18e2      	adds	r2, r4, r3
1000c13e:	00d2      	lsls	r2, r2, #3
1000c140:	5997      	ldr	r7, [r2, r6]
1000c142:	250f      	movs	r5, #15
1000c144:	4005      	ands	r5, r0
1000c146:	2201      	movs	r2, #1
1000c148:	40aa      	lsls	r2, r5
1000c14a:	b292      	uxth	r2, r2
1000c14c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c14e:	18e4      	adds	r4, r4, r3
1000c150:	00e4      	lsls	r4, r4, #3
1000c152:	59a4      	ldr	r4, [r4, r6]
1000c154:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c156:	e01e      	b.n	1000c196 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c158:	4e19      	ldr	r6, [pc, #100]	; (1000c1c0 <gpio_register_callback+0xcc>)
1000c15a:	00dc      	lsls	r4, r3, #3
1000c15c:	18e2      	adds	r2, r4, r3
1000c15e:	00d2      	lsls	r2, r2, #3
1000c160:	5997      	ldr	r7, [r2, r6]
1000c162:	250f      	movs	r5, #15
1000c164:	4005      	ands	r5, r0
1000c166:	2201      	movs	r2, #1
1000c168:	40aa      	lsls	r2, r5
1000c16a:	b292      	uxth	r2, r2
1000c16c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c16e:	18e4      	adds	r4, r4, r3
1000c170:	00e4      	lsls	r4, r4, #3
1000c172:	59a4      	ldr	r4, [r4, r6]
1000c174:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c176:	e00e      	b.n	1000c196 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c178:	4e11      	ldr	r6, [pc, #68]	; (1000c1c0 <gpio_register_callback+0xcc>)
1000c17a:	00dc      	lsls	r4, r3, #3
1000c17c:	18e2      	adds	r2, r4, r3
1000c17e:	00d2      	lsls	r2, r2, #3
1000c180:	5997      	ldr	r7, [r2, r6]
1000c182:	250f      	movs	r5, #15
1000c184:	4005      	ands	r5, r0
1000c186:	2201      	movs	r2, #1
1000c188:	40aa      	lsls	r2, r5
1000c18a:	b292      	uxth	r2, r2
1000c18c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c18e:	18e4      	adds	r4, r4, r3
1000c190:	00e4      	lsls	r4, r4, #3
1000c192:	59a4      	ldr	r4, [r4, r6]
1000c194:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c196:	220f      	movs	r2, #15
1000c198:	4010      	ands	r0, r2
1000c19a:	4c09      	ldr	r4, [pc, #36]	; (1000c1c0 <gpio_register_callback+0xcc>)
1000c19c:	00dd      	lsls	r5, r3, #3
1000c19e:	18ea      	adds	r2, r5, r3
1000c1a0:	0052      	lsls	r2, r2, #1
1000c1a2:	1812      	adds	r2, r2, r0
1000c1a4:	0092      	lsls	r2, r2, #2
1000c1a6:	18a2      	adds	r2, r4, r2
1000c1a8:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c1aa:	18ea      	adds	r2, r5, r3
1000c1ac:	00d2      	lsls	r2, r2, #3
1000c1ae:	18a2      	adds	r2, r4, r2
1000c1b0:	3244      	adds	r2, #68	; 0x44
1000c1b2:	2101      	movs	r1, #1
1000c1b4:	4081      	lsls	r1, r0
1000c1b6:	8813      	ldrh	r3, [r2, #0]
1000c1b8:	430b      	orrs	r3, r1
1000c1ba:	8013      	strh	r3, [r2, #0]
}
1000c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c1be:	46c0      	nop			; (mov r8, r8)
1000c1c0:	10019a0c 	.word	0x10019a0c

1000c1c4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c1c4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c1c6:	280f      	cmp	r0, #15
1000c1c8:	d805      	bhi.n	1000c1d6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c1ca:	2280      	movs	r2, #128	; 0x80
1000c1cc:	0412      	lsls	r2, r2, #16
1000c1ce:	4b12      	ldr	r3, [pc, #72]	; (1000c218 <gpio_enable_callback+0x54>)
1000c1d0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c1d2:	2200      	movs	r2, #0
1000c1d4:	e00c      	b.n	1000c1f0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c1d6:	281f      	cmp	r0, #31
1000c1d8:	d805      	bhi.n	1000c1e6 <gpio_enable_callback+0x22>
1000c1da:	2280      	movs	r2, #128	; 0x80
1000c1dc:	0452      	lsls	r2, r2, #17
1000c1de:	4b0e      	ldr	r3, [pc, #56]	; (1000c218 <gpio_enable_callback+0x54>)
1000c1e0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c1e2:	2201      	movs	r2, #1
1000c1e4:	e004      	b.n	1000c1f0 <gpio_enable_callback+0x2c>
1000c1e6:	2280      	movs	r2, #128	; 0x80
1000c1e8:	0492      	lsls	r2, r2, #18
1000c1ea:	4b0b      	ldr	r3, [pc, #44]	; (1000c218 <gpio_enable_callback+0x54>)
1000c1ec:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c1ee:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c1f0:	230f      	movs	r3, #15
1000c1f2:	4018      	ands	r0, r3
1000c1f4:	2101      	movs	r1, #1
1000c1f6:	4081      	lsls	r1, r0
1000c1f8:	4c08      	ldr	r4, [pc, #32]	; (1000c21c <gpio_enable_callback+0x58>)
1000c1fa:	00d5      	lsls	r5, r2, #3
1000c1fc:	18ab      	adds	r3, r5, r2
1000c1fe:	00db      	lsls	r3, r3, #3
1000c200:	18e3      	adds	r3, r4, r3
1000c202:	3346      	adds	r3, #70	; 0x46
1000c204:	8818      	ldrh	r0, [r3, #0]
1000c206:	4308      	orrs	r0, r1
1000c208:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c20a:	18aa      	adds	r2, r5, r2
1000c20c:	00d2      	lsls	r2, r2, #3
1000c20e:	5913      	ldr	r3, [r2, r4]
1000c210:	b289      	uxth	r1, r1
1000c212:	8419      	strh	r1, [r3, #32]
}
1000c214:	bd30      	pop	{r4, r5, pc}
1000c216:	46c0      	nop			; (mov r8, r8)
1000c218:	e000e100 	.word	0xe000e100
1000c21c:	10019a0c 	.word	0x10019a0c

1000c220 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c220:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c222:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c224:	280f      	cmp	r0, #15
1000c226:	d904      	bls.n	1000c232 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c228:	221f      	movs	r2, #31
1000c22a:	4282      	cmp	r2, r0
1000c22c:	415b      	adcs	r3, r3
1000c22e:	3a1d      	subs	r2, #29
1000c230:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c232:	220f      	movs	r2, #15
1000c234:	4010      	ands	r0, r2
1000c236:	2101      	movs	r1, #1
1000c238:	4081      	lsls	r1, r0
1000c23a:	4c07      	ldr	r4, [pc, #28]	; (1000c258 <gpio_disable_callback+0x38>)
1000c23c:	00dd      	lsls	r5, r3, #3
1000c23e:	18ea      	adds	r2, r5, r3
1000c240:	00d2      	lsls	r2, r2, #3
1000c242:	18a2      	adds	r2, r4, r2
1000c244:	3246      	adds	r2, #70	; 0x46
1000c246:	8810      	ldrh	r0, [r2, #0]
1000c248:	4388      	bics	r0, r1
1000c24a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c24c:	18eb      	adds	r3, r5, r3
1000c24e:	00db      	lsls	r3, r3, #3
1000c250:	591b      	ldr	r3, [r3, r4]
1000c252:	b289      	uxth	r1, r1
1000c254:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c256:	bd30      	pop	{r4, r5, pc}
1000c258:	10019a0c 	.word	0x10019a0c

1000c25c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c25c:	b510      	push	{r4, lr}
1000c25e:	4a11      	ldr	r2, [pc, #68]	; (1000c2a4 <gpio_init+0x48>)
1000c260:	0010      	movs	r0, r2
1000c262:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c264:	2100      	movs	r1, #0
1000c266:	e007      	b.n	1000c278 <gpio_init+0x1c>
1000c268:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c26a:	4293      	cmp	r3, r2
1000c26c:	d1fc      	bne.n	1000c268 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c26e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c270:	8011      	strh	r1, [r2, #0]
1000c272:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c274:	4282      	cmp	r2, r0
1000c276:	d002      	beq.n	1000c27e <gpio_init+0x22>
1000c278:	0013      	movs	r3, r2
1000c27a:	3b40      	subs	r3, #64	; 0x40
1000c27c:	e7f4      	b.n	1000c268 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c27e:	4b0a      	ldr	r3, [pc, #40]	; (1000c2a8 <gpio_init+0x4c>)
1000c280:	4a0a      	ldr	r2, [pc, #40]	; (1000c2ac <gpio_init+0x50>)
1000c282:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c284:	4a0a      	ldr	r2, [pc, #40]	; (1000c2b0 <gpio_init+0x54>)
1000c286:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c288:	490a      	ldr	r1, [pc, #40]	; (1000c2b4 <gpio_init+0x58>)
1000c28a:	2290      	movs	r2, #144	; 0x90
1000c28c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c28e:	490a      	ldr	r1, [pc, #40]	; (1000c2b8 <gpio_init+0x5c>)
1000c290:	2027      	movs	r0, #39	; 0x27
1000c292:	4c0a      	ldr	r4, [pc, #40]	; (1000c2bc <gpio_init+0x60>)
1000c294:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c296:	490a      	ldr	r1, [pc, #40]	; (1000c2c0 <gpio_init+0x64>)
1000c298:	2028      	movs	r0, #40	; 0x28
1000c29a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c29c:	4909      	ldr	r1, [pc, #36]	; (1000c2c4 <gpio_init+0x68>)
1000c29e:	2029      	movs	r0, #41	; 0x29
1000c2a0:	47a0      	blx	r4
}
1000c2a2:	bd10      	pop	{r4, pc}
1000c2a4:	10019a50 	.word	0x10019a50
1000c2a8:	10019a0c 	.word	0x10019a0c
1000c2ac:	40010000 	.word	0x40010000
1000c2b0:	40011000 	.word	0x40011000
1000c2b4:	40013000 	.word	0x40013000
1000c2b8:	1000bb65 	.word	0x1000bb65
1000c2bc:	1000ce89 	.word	0x1000ce89
1000c2c0:	1000bbc9 	.word	0x1000bbc9
1000c2c4:	1000bc39 	.word	0x1000bc39

1000c2c8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c2c8:	2801      	cmp	r0, #1
1000c2ca:	d00d      	beq.n	1000c2e8 <system_clock_config+0x20>
1000c2cc:	2800      	cmp	r0, #0
1000c2ce:	d002      	beq.n	1000c2d6 <system_clock_config+0xe>
1000c2d0:	2802      	cmp	r0, #2
1000c2d2:	d01c      	beq.n	1000c30e <system_clock_config+0x46>
1000c2d4:	e02e      	b.n	1000c334 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2d6:	4a18      	ldr	r2, [pc, #96]	; (1000c338 <system_clock_config+0x70>)
1000c2d8:	6990      	ldr	r0, [r2, #24]
1000c2da:	230c      	movs	r3, #12
1000c2dc:	4303      	orrs	r3, r0
1000c2de:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c2e0:	4a16      	ldr	r2, [pc, #88]	; (1000c33c <system_clock_config+0x74>)
1000c2e2:	4b17      	ldr	r3, [pc, #92]	; (1000c340 <system_clock_config+0x78>)
1000c2e4:	601a      	str	r2, [r3, #0]
			break;
1000c2e6:	e01a      	b.n	1000c31e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2e8:	4b13      	ldr	r3, [pc, #76]	; (1000c338 <system_clock_config+0x70>)
1000c2ea:	6998      	ldr	r0, [r3, #24]
1000c2ec:	2208      	movs	r2, #8
1000c2ee:	4302      	orrs	r2, r0
1000c2f0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c2f2:	699a      	ldr	r2, [r3, #24]
1000c2f4:	2004      	movs	r0, #4
1000c2f6:	4382      	bics	r2, r0
1000c2f8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c2fa:	4a12      	ldr	r2, [pc, #72]	; (1000c344 <system_clock_config+0x7c>)
1000c2fc:	6853      	ldr	r3, [r2, #4]
1000c2fe:	2080      	movs	r0, #128	; 0x80
1000c300:	0300      	lsls	r0, r0, #12
1000c302:	4303      	orrs	r3, r0
1000c304:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c306:	4a10      	ldr	r2, [pc, #64]	; (1000c348 <system_clock_config+0x80>)
1000c308:	4b0d      	ldr	r3, [pc, #52]	; (1000c340 <system_clock_config+0x78>)
1000c30a:	601a      	str	r2, [r3, #0]
			break;
1000c30c:	e007      	b.n	1000c31e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c30e:	4a0a      	ldr	r2, [pc, #40]	; (1000c338 <system_clock_config+0x70>)
1000c310:	6993      	ldr	r3, [r2, #24]
1000c312:	200c      	movs	r0, #12
1000c314:	4383      	bics	r3, r0
1000c316:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c318:	4a08      	ldr	r2, [pc, #32]	; (1000c33c <system_clock_config+0x74>)
1000c31a:	4b09      	ldr	r3, [pc, #36]	; (1000c340 <system_clock_config+0x78>)
1000c31c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c31e:	4b06      	ldr	r3, [pc, #24]	; (1000c338 <system_clock_config+0x70>)
1000c320:	699a      	ldr	r2, [r3, #24]
1000c322:	2003      	movs	r0, #3
1000c324:	4382      	bics	r2, r0
1000c326:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c328:	699a      	ldr	r2, [r3, #24]
1000c32a:	4001      	ands	r1, r0
1000c32c:	4311      	orrs	r1, r2
1000c32e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c330:	2000      	movs	r0, #0
1000c332:	e000      	b.n	1000c336 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c334:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c336:	4770      	bx	lr
1000c338:	4000b000 	.word	0x4000b000
1000c33c:	018cba80 	.word	0x018cba80
1000c340:	10019ae4 	.word	0x10019ae4
1000c344:	4000f000 	.word	0x4000f000
1000c348:	001e8480 	.word	0x001e8480

1000c34c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c34c:	4b01      	ldr	r3, [pc, #4]	; (1000c354 <system_clock_get_value+0x8>)
1000c34e:	6818      	ldr	r0, [r3, #0]
}
1000c350:	4770      	bx	lr
1000c352:	46c0      	nop			; (mov r8, r8)
1000c354:	10019ae4 	.word	0x10019ae4

1000c358 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c358:	b500      	push	{lr}
	switch (peripheral) {
1000c35a:	2835      	cmp	r0, #53	; 0x35
1000c35c:	d900      	bls.n	1000c360 <system_clock_peripheral_enable+0x8>
1000c35e:	e1a2      	b.n	1000c6a6 <system_clock_peripheral_enable+0x34e>
1000c360:	0080      	lsls	r0, r0, #2
1000c362:	4bd2      	ldr	r3, [pc, #840]	; (1000c6ac <system_clock_peripheral_enable+0x354>)
1000c364:	581b      	ldr	r3, [r3, r0]
1000c366:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c368:	4ad1      	ldr	r2, [pc, #836]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c36a:	68d1      	ldr	r1, [r2, #12]
1000c36c:	2302      	movs	r3, #2
1000c36e:	430b      	orrs	r3, r1
1000c370:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c372:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c374:	e198      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c376:	4ace      	ldr	r2, [pc, #824]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c378:	68d1      	ldr	r1, [r2, #12]
1000c37a:	2304      	movs	r3, #4
1000c37c:	430b      	orrs	r3, r1
1000c37e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c380:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c382:	e191      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c384:	4aca      	ldr	r2, [pc, #808]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c386:	68d1      	ldr	r1, [r2, #12]
1000c388:	2308      	movs	r3, #8
1000c38a:	430b      	orrs	r3, r1
1000c38c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c38e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c390:	e18a      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c392:	4ac7      	ldr	r2, [pc, #796]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c394:	68d1      	ldr	r1, [r2, #12]
1000c396:	2310      	movs	r3, #16
1000c398:	430b      	orrs	r3, r1
1000c39a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c39c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c39e:	e183      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3a0:	4ac3      	ldr	r2, [pc, #780]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3a2:	68d1      	ldr	r1, [r2, #12]
1000c3a4:	2320      	movs	r3, #32
1000c3a6:	430b      	orrs	r3, r1
1000c3a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c3ac:	e17c      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3ae:	4ac0      	ldr	r2, [pc, #768]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3b0:	68d1      	ldr	r1, [r2, #12]
1000c3b2:	2380      	movs	r3, #128	; 0x80
1000c3b4:	430b      	orrs	r3, r1
1000c3b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c3ba:	e175      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3bc:	4abc      	ldr	r2, [pc, #752]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3be:	68d3      	ldr	r3, [r2, #12]
1000c3c0:	2180      	movs	r1, #128	; 0x80
1000c3c2:	0049      	lsls	r1, r1, #1
1000c3c4:	430b      	orrs	r3, r1
1000c3c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c3ca:	e16d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3cc:	4ab8      	ldr	r2, [pc, #736]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3ce:	68d3      	ldr	r3, [r2, #12]
1000c3d0:	2180      	movs	r1, #128	; 0x80
1000c3d2:	0109      	lsls	r1, r1, #4
1000c3d4:	430b      	orrs	r3, r1
1000c3d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c3da:	e165      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3dc:	4ab4      	ldr	r2, [pc, #720]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3de:	68d3      	ldr	r3, [r2, #12]
1000c3e0:	2180      	movs	r1, #128	; 0x80
1000c3e2:	0149      	lsls	r1, r1, #5
1000c3e4:	430b      	orrs	r3, r1
1000c3e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c3ea:	e15d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3ec:	4ab0      	ldr	r2, [pc, #704]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3ee:	68d3      	ldr	r3, [r2, #12]
1000c3f0:	2180      	movs	r1, #128	; 0x80
1000c3f2:	0189      	lsls	r1, r1, #6
1000c3f4:	430b      	orrs	r3, r1
1000c3f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c3fa:	e155      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3fc:	4aac      	ldr	r2, [pc, #688]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c3fe:	68d3      	ldr	r3, [r2, #12]
1000c400:	2180      	movs	r1, #128	; 0x80
1000c402:	01c9      	lsls	r1, r1, #7
1000c404:	430b      	orrs	r3, r1
1000c406:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c408:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c40a:	e14d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c40c:	4aa8      	ldr	r2, [pc, #672]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c40e:	68d3      	ldr	r3, [r2, #12]
1000c410:	2180      	movs	r1, #128	; 0x80
1000c412:	0209      	lsls	r1, r1, #8
1000c414:	430b      	orrs	r3, r1
1000c416:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c418:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c41a:	e145      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c41c:	4aa4      	ldr	r2, [pc, #656]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c41e:	68d3      	ldr	r3, [r2, #12]
1000c420:	2180      	movs	r1, #128	; 0x80
1000c422:	0249      	lsls	r1, r1, #9
1000c424:	430b      	orrs	r3, r1
1000c426:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c428:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c42a:	e13d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c42c:	4aa0      	ldr	r2, [pc, #640]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c42e:	68d3      	ldr	r3, [r2, #12]
1000c430:	2180      	movs	r1, #128	; 0x80
1000c432:	0289      	lsls	r1, r1, #10
1000c434:	430b      	orrs	r3, r1
1000c436:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c438:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c43a:	e135      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c43c:	4a9c      	ldr	r2, [pc, #624]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c43e:	68d3      	ldr	r3, [r2, #12]
1000c440:	2180      	movs	r1, #128	; 0x80
1000c442:	02c9      	lsls	r1, r1, #11
1000c444:	430b      	orrs	r3, r1
1000c446:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c448:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c44a:	e12d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c44c:	4a98      	ldr	r2, [pc, #608]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c44e:	68d3      	ldr	r3, [r2, #12]
1000c450:	2180      	movs	r1, #128	; 0x80
1000c452:	0309      	lsls	r1, r1, #12
1000c454:	430b      	orrs	r3, r1
1000c456:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c458:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c45a:	e125      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c45c:	4a94      	ldr	r2, [pc, #592]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c45e:	68d3      	ldr	r3, [r2, #12]
1000c460:	2180      	movs	r1, #128	; 0x80
1000c462:	0349      	lsls	r1, r1, #13
1000c464:	430b      	orrs	r3, r1
1000c466:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c468:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c46a:	e11d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c46c:	4a90      	ldr	r2, [pc, #576]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c46e:	68d3      	ldr	r3, [r2, #12]
1000c470:	2180      	movs	r1, #128	; 0x80
1000c472:	0389      	lsls	r1, r1, #14
1000c474:	430b      	orrs	r3, r1
1000c476:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c478:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c47a:	e115      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c47c:	4a8c      	ldr	r2, [pc, #560]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c47e:	68d3      	ldr	r3, [r2, #12]
1000c480:	2180      	movs	r1, #128	; 0x80
1000c482:	03c9      	lsls	r1, r1, #15
1000c484:	430b      	orrs	r3, r1
1000c486:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c488:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c48a:	e10d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c48c:	4a88      	ldr	r2, [pc, #544]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c48e:	68d3      	ldr	r3, [r2, #12]
1000c490:	2180      	movs	r1, #128	; 0x80
1000c492:	0409      	lsls	r1, r1, #16
1000c494:	430b      	orrs	r3, r1
1000c496:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c498:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c49a:	e105      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c49c:	4a84      	ldr	r2, [pc, #528]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c49e:	68d3      	ldr	r3, [r2, #12]
1000c4a0:	2180      	movs	r1, #128	; 0x80
1000c4a2:	0449      	lsls	r1, r1, #17
1000c4a4:	430b      	orrs	r3, r1
1000c4a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c4aa:	e0fd      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4ac:	4a80      	ldr	r2, [pc, #512]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4ae:	68d3      	ldr	r3, [r2, #12]
1000c4b0:	2180      	movs	r1, #128	; 0x80
1000c4b2:	0489      	lsls	r1, r1, #18
1000c4b4:	430b      	orrs	r3, r1
1000c4b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c4ba:	e0f5      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4bc:	4a7c      	ldr	r2, [pc, #496]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4be:	68d3      	ldr	r3, [r2, #12]
1000c4c0:	2180      	movs	r1, #128	; 0x80
1000c4c2:	04c9      	lsls	r1, r1, #19
1000c4c4:	430b      	orrs	r3, r1
1000c4c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c4ca:	e0ed      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4cc:	4a78      	ldr	r2, [pc, #480]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4ce:	68d3      	ldr	r3, [r2, #12]
1000c4d0:	2180      	movs	r1, #128	; 0x80
1000c4d2:	0509      	lsls	r1, r1, #20
1000c4d4:	430b      	orrs	r3, r1
1000c4d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c4da:	e0e5      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4dc:	4a74      	ldr	r2, [pc, #464]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4de:	68d3      	ldr	r3, [r2, #12]
1000c4e0:	2180      	movs	r1, #128	; 0x80
1000c4e2:	0549      	lsls	r1, r1, #21
1000c4e4:	430b      	orrs	r3, r1
1000c4e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c4ea:	e0dd      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4ec:	4a70      	ldr	r2, [pc, #448]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4ee:	68d3      	ldr	r3, [r2, #12]
1000c4f0:	2180      	movs	r1, #128	; 0x80
1000c4f2:	0589      	lsls	r1, r1, #22
1000c4f4:	430b      	orrs	r3, r1
1000c4f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c4fa:	e0d5      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4fc:	4a6c      	ldr	r2, [pc, #432]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c4fe:	68d3      	ldr	r3, [r2, #12]
1000c500:	2180      	movs	r1, #128	; 0x80
1000c502:	05c9      	lsls	r1, r1, #23
1000c504:	430b      	orrs	r3, r1
1000c506:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c508:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c50a:	e0cd      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c50c:	4a68      	ldr	r2, [pc, #416]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c50e:	6911      	ldr	r1, [r2, #16]
1000c510:	2301      	movs	r3, #1
1000c512:	430b      	orrs	r3, r1
1000c514:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c516:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c518:	e0c6      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c51a:	4a65      	ldr	r2, [pc, #404]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c51c:	6911      	ldr	r1, [r2, #16]
1000c51e:	2302      	movs	r3, #2
1000c520:	430b      	orrs	r3, r1
1000c522:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c524:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c526:	e0bf      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c528:	4a61      	ldr	r2, [pc, #388]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c52a:	6911      	ldr	r1, [r2, #16]
1000c52c:	2304      	movs	r3, #4
1000c52e:	430b      	orrs	r3, r1
1000c530:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c532:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c534:	e0b8      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c536:	4a5e      	ldr	r2, [pc, #376]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c538:	6911      	ldr	r1, [r2, #16]
1000c53a:	2308      	movs	r3, #8
1000c53c:	430b      	orrs	r3, r1
1000c53e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c540:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c542:	e0b1      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c544:	4a5a      	ldr	r2, [pc, #360]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c546:	6911      	ldr	r1, [r2, #16]
1000c548:	2310      	movs	r3, #16
1000c54a:	430b      	orrs	r3, r1
1000c54c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c54e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c550:	e0aa      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c552:	4a57      	ldr	r2, [pc, #348]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c554:	6911      	ldr	r1, [r2, #16]
1000c556:	2320      	movs	r3, #32
1000c558:	430b      	orrs	r3, r1
1000c55a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c55c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c55e:	e0a3      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c560:	4a53      	ldr	r2, [pc, #332]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c562:	6911      	ldr	r1, [r2, #16]
1000c564:	2340      	movs	r3, #64	; 0x40
1000c566:	430b      	orrs	r3, r1
1000c568:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c56a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c56c:	e09c      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c56e:	4a50      	ldr	r2, [pc, #320]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c570:	6911      	ldr	r1, [r2, #16]
1000c572:	2380      	movs	r3, #128	; 0x80
1000c574:	430b      	orrs	r3, r1
1000c576:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c578:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c57a:	e095      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c57c:	4a4c      	ldr	r2, [pc, #304]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c57e:	6913      	ldr	r3, [r2, #16]
1000c580:	2180      	movs	r1, #128	; 0x80
1000c582:	0049      	lsls	r1, r1, #1
1000c584:	430b      	orrs	r3, r1
1000c586:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c588:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c58a:	e08d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c58c:	4a48      	ldr	r2, [pc, #288]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c58e:	6913      	ldr	r3, [r2, #16]
1000c590:	2180      	movs	r1, #128	; 0x80
1000c592:	0089      	lsls	r1, r1, #2
1000c594:	430b      	orrs	r3, r1
1000c596:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c598:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c59a:	e085      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c59c:	4a44      	ldr	r2, [pc, #272]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c59e:	6913      	ldr	r3, [r2, #16]
1000c5a0:	2180      	movs	r1, #128	; 0x80
1000c5a2:	00c9      	lsls	r1, r1, #3
1000c5a4:	430b      	orrs	r3, r1
1000c5a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c5aa:	e07d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5ac:	4a40      	ldr	r2, [pc, #256]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5ae:	6913      	ldr	r3, [r2, #16]
1000c5b0:	2180      	movs	r1, #128	; 0x80
1000c5b2:	0109      	lsls	r1, r1, #4
1000c5b4:	430b      	orrs	r3, r1
1000c5b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c5ba:	e075      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5bc:	4a3c      	ldr	r2, [pc, #240]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5be:	6913      	ldr	r3, [r2, #16]
1000c5c0:	2180      	movs	r1, #128	; 0x80
1000c5c2:	0149      	lsls	r1, r1, #5
1000c5c4:	430b      	orrs	r3, r1
1000c5c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c5ca:	e06d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5cc:	4a38      	ldr	r2, [pc, #224]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5ce:	6913      	ldr	r3, [r2, #16]
1000c5d0:	2180      	movs	r1, #128	; 0x80
1000c5d2:	0189      	lsls	r1, r1, #6
1000c5d4:	430b      	orrs	r3, r1
1000c5d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c5da:	e065      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5dc:	4a34      	ldr	r2, [pc, #208]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5de:	6913      	ldr	r3, [r2, #16]
1000c5e0:	2180      	movs	r1, #128	; 0x80
1000c5e2:	01c9      	lsls	r1, r1, #7
1000c5e4:	430b      	orrs	r3, r1
1000c5e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c5ea:	e05d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5ec:	4a30      	ldr	r2, [pc, #192]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5ee:	6913      	ldr	r3, [r2, #16]
1000c5f0:	2180      	movs	r1, #128	; 0x80
1000c5f2:	0209      	lsls	r1, r1, #8
1000c5f4:	430b      	orrs	r3, r1
1000c5f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c5fa:	e055      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5fc:	4a2c      	ldr	r2, [pc, #176]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c5fe:	6913      	ldr	r3, [r2, #16]
1000c600:	2180      	movs	r1, #128	; 0x80
1000c602:	0249      	lsls	r1, r1, #9
1000c604:	430b      	orrs	r3, r1
1000c606:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c608:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c60a:	e04d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c60c:	4a28      	ldr	r2, [pc, #160]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c60e:	6913      	ldr	r3, [r2, #16]
1000c610:	2180      	movs	r1, #128	; 0x80
1000c612:	0289      	lsls	r1, r1, #10
1000c614:	430b      	orrs	r3, r1
1000c616:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c618:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c61a:	e045      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c61c:	4a24      	ldr	r2, [pc, #144]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c61e:	6913      	ldr	r3, [r2, #16]
1000c620:	2180      	movs	r1, #128	; 0x80
1000c622:	02c9      	lsls	r1, r1, #11
1000c624:	430b      	orrs	r3, r1
1000c626:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c62a:	e03d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c62c:	4a20      	ldr	r2, [pc, #128]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c62e:	6913      	ldr	r3, [r2, #16]
1000c630:	2180      	movs	r1, #128	; 0x80
1000c632:	0309      	lsls	r1, r1, #12
1000c634:	430b      	orrs	r3, r1
1000c636:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c638:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c63a:	e035      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c63c:	4a1c      	ldr	r2, [pc, #112]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c63e:	6913      	ldr	r3, [r2, #16]
1000c640:	2180      	movs	r1, #128	; 0x80
1000c642:	0349      	lsls	r1, r1, #13
1000c644:	430b      	orrs	r3, r1
1000c646:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c64a:	e02d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c64c:	4a18      	ldr	r2, [pc, #96]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c64e:	6913      	ldr	r3, [r2, #16]
1000c650:	2180      	movs	r1, #128	; 0x80
1000c652:	0389      	lsls	r1, r1, #14
1000c654:	430b      	orrs	r3, r1
1000c656:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c658:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c65a:	e025      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c65c:	4a14      	ldr	r2, [pc, #80]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c65e:	6913      	ldr	r3, [r2, #16]
1000c660:	2180      	movs	r1, #128	; 0x80
1000c662:	03c9      	lsls	r1, r1, #15
1000c664:	430b      	orrs	r3, r1
1000c666:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c66a:	e01d      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c66c:	4a10      	ldr	r2, [pc, #64]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c66e:	6913      	ldr	r3, [r2, #16]
1000c670:	2180      	movs	r1, #128	; 0x80
1000c672:	0409      	lsls	r1, r1, #16
1000c674:	430b      	orrs	r3, r1
1000c676:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c678:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c67a:	e015      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c67c:	4a0c      	ldr	r2, [pc, #48]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c67e:	7d11      	ldrb	r1, [r2, #20]
1000c680:	2301      	movs	r3, #1
1000c682:	430b      	orrs	r3, r1
1000c684:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c686:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c688:	e00e      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c68a:	4a09      	ldr	r2, [pc, #36]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c68c:	7d11      	ldrb	r1, [r2, #20]
1000c68e:	2302      	movs	r3, #2
1000c690:	430b      	orrs	r3, r1
1000c692:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c694:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c696:	e007      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c698:	4a05      	ldr	r2, [pc, #20]	; (1000c6b0 <system_clock_peripheral_enable+0x358>)
1000c69a:	7d11      	ldrb	r1, [r2, #20]
1000c69c:	2304      	movs	r3, #4
1000c69e:	430b      	orrs	r3, r1
1000c6a0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c6a4:	e000      	b.n	1000c6a8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c6a6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c6a8:	bd00      	pop	{pc}
1000c6aa:	46c0      	nop			; (mov r8, r8)
1000c6ac:	10016b38 	.word	0x10016b38
1000c6b0:	4000b000 	.word	0x4000b000

1000c6b4 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c6b4:	b500      	push	{lr}
	switch (peripheral) {
1000c6b6:	2835      	cmp	r0, #53	; 0x35
1000c6b8:	d900      	bls.n	1000c6bc <system_clock_peripheral_disable+0x8>
1000c6ba:	e17d      	b.n	1000c9b8 <system_clock_peripheral_disable+0x304>
1000c6bc:	0080      	lsls	r0, r0, #2
1000c6be:	4bbf      	ldr	r3, [pc, #764]	; (1000c9bc <system_clock_peripheral_disable+0x308>)
1000c6c0:	581b      	ldr	r3, [r3, r0]
1000c6c2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6c4:	4abe      	ldr	r2, [pc, #760]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c6c6:	68d3      	ldr	r3, [r2, #12]
1000c6c8:	2102      	movs	r1, #2
1000c6ca:	438b      	bics	r3, r1
1000c6cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ce:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c6d0:	e173      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6d2:	4abb      	ldr	r2, [pc, #748]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c6d4:	68d3      	ldr	r3, [r2, #12]
1000c6d6:	2104      	movs	r1, #4
1000c6d8:	438b      	bics	r3, r1
1000c6da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c6de:	e16c      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6e0:	4ab7      	ldr	r2, [pc, #732]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c6e2:	68d3      	ldr	r3, [r2, #12]
1000c6e4:	2108      	movs	r1, #8
1000c6e6:	438b      	bics	r3, r1
1000c6e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c6ec:	e165      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6ee:	4ab4      	ldr	r2, [pc, #720]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c6f0:	68d3      	ldr	r3, [r2, #12]
1000c6f2:	2110      	movs	r1, #16
1000c6f4:	438b      	bics	r3, r1
1000c6f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c6fa:	e15e      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6fc:	4ab0      	ldr	r2, [pc, #704]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c6fe:	68d3      	ldr	r3, [r2, #12]
1000c700:	2120      	movs	r1, #32
1000c702:	438b      	bics	r3, r1
1000c704:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c706:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c708:	e157      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c70a:	4aad      	ldr	r2, [pc, #692]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c70c:	68d3      	ldr	r3, [r2, #12]
1000c70e:	2180      	movs	r1, #128	; 0x80
1000c710:	438b      	bics	r3, r1
1000c712:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c714:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c716:	e150      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c718:	4aa9      	ldr	r2, [pc, #676]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c71a:	68d1      	ldr	r1, [r2, #12]
1000c71c:	4ba9      	ldr	r3, [pc, #676]	; (1000c9c4 <system_clock_peripheral_disable+0x310>)
1000c71e:	400b      	ands	r3, r1
1000c720:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c722:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c724:	e149      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c726:	4aa6      	ldr	r2, [pc, #664]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c728:	68d1      	ldr	r1, [r2, #12]
1000c72a:	4ba7      	ldr	r3, [pc, #668]	; (1000c9c8 <system_clock_peripheral_disable+0x314>)
1000c72c:	400b      	ands	r3, r1
1000c72e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c730:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c732:	e142      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c734:	4aa2      	ldr	r2, [pc, #648]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c736:	68d1      	ldr	r1, [r2, #12]
1000c738:	4ba4      	ldr	r3, [pc, #656]	; (1000c9cc <system_clock_peripheral_disable+0x318>)
1000c73a:	400b      	ands	r3, r1
1000c73c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c73e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c740:	e13b      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c742:	4a9f      	ldr	r2, [pc, #636]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c744:	68d1      	ldr	r1, [r2, #12]
1000c746:	4ba2      	ldr	r3, [pc, #648]	; (1000c9d0 <system_clock_peripheral_disable+0x31c>)
1000c748:	400b      	ands	r3, r1
1000c74a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c74c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c74e:	e134      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c750:	4a9b      	ldr	r2, [pc, #620]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c752:	68d1      	ldr	r1, [r2, #12]
1000c754:	4b9f      	ldr	r3, [pc, #636]	; (1000c9d4 <system_clock_peripheral_disable+0x320>)
1000c756:	400b      	ands	r3, r1
1000c758:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c75a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c75c:	e12d      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c75e:	4a98      	ldr	r2, [pc, #608]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c760:	68d1      	ldr	r1, [r2, #12]
1000c762:	4b9d      	ldr	r3, [pc, #628]	; (1000c9d8 <system_clock_peripheral_disable+0x324>)
1000c764:	400b      	ands	r3, r1
1000c766:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c768:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c76a:	e126      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c76c:	4a94      	ldr	r2, [pc, #592]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c76e:	68d1      	ldr	r1, [r2, #12]
1000c770:	4b9a      	ldr	r3, [pc, #616]	; (1000c9dc <system_clock_peripheral_disable+0x328>)
1000c772:	400b      	ands	r3, r1
1000c774:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c776:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c778:	e11f      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c77a:	4a91      	ldr	r2, [pc, #580]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c77c:	68d1      	ldr	r1, [r2, #12]
1000c77e:	4b98      	ldr	r3, [pc, #608]	; (1000c9e0 <system_clock_peripheral_disable+0x32c>)
1000c780:	400b      	ands	r3, r1
1000c782:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c786:	e118      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c788:	4a8d      	ldr	r2, [pc, #564]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c78a:	68d1      	ldr	r1, [r2, #12]
1000c78c:	4b95      	ldr	r3, [pc, #596]	; (1000c9e4 <system_clock_peripheral_disable+0x330>)
1000c78e:	400b      	ands	r3, r1
1000c790:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c792:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c794:	e111      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c796:	4a8a      	ldr	r2, [pc, #552]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c798:	68d1      	ldr	r1, [r2, #12]
1000c79a:	4b93      	ldr	r3, [pc, #588]	; (1000c9e8 <system_clock_peripheral_disable+0x334>)
1000c79c:	400b      	ands	r3, r1
1000c79e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c7a2:	e10a      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7a4:	4a86      	ldr	r2, [pc, #536]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7a6:	68d1      	ldr	r1, [r2, #12]
1000c7a8:	4b90      	ldr	r3, [pc, #576]	; (1000c9ec <system_clock_peripheral_disable+0x338>)
1000c7aa:	400b      	ands	r3, r1
1000c7ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c7b0:	e103      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7b2:	4a83      	ldr	r2, [pc, #524]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7b4:	68d1      	ldr	r1, [r2, #12]
1000c7b6:	4b8e      	ldr	r3, [pc, #568]	; (1000c9f0 <system_clock_peripheral_disable+0x33c>)
1000c7b8:	400b      	ands	r3, r1
1000c7ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c7be:	e0fc      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7c0:	4a7f      	ldr	r2, [pc, #508]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7c2:	68d1      	ldr	r1, [r2, #12]
1000c7c4:	4b8b      	ldr	r3, [pc, #556]	; (1000c9f4 <system_clock_peripheral_disable+0x340>)
1000c7c6:	400b      	ands	r3, r1
1000c7c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c7cc:	e0f5      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7ce:	4a7c      	ldr	r2, [pc, #496]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7d0:	68d1      	ldr	r1, [r2, #12]
1000c7d2:	4b89      	ldr	r3, [pc, #548]	; (1000c9f8 <system_clock_peripheral_disable+0x344>)
1000c7d4:	400b      	ands	r3, r1
1000c7d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c7da:	e0ee      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7dc:	4a78      	ldr	r2, [pc, #480]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7de:	68d1      	ldr	r1, [r2, #12]
1000c7e0:	4b86      	ldr	r3, [pc, #536]	; (1000c9fc <system_clock_peripheral_disable+0x348>)
1000c7e2:	400b      	ands	r3, r1
1000c7e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c7e8:	e0e7      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7ea:	4a75      	ldr	r2, [pc, #468]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7ec:	68d1      	ldr	r1, [r2, #12]
1000c7ee:	4b84      	ldr	r3, [pc, #528]	; (1000ca00 <system_clock_peripheral_disable+0x34c>)
1000c7f0:	400b      	ands	r3, r1
1000c7f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c7f6:	e0e0      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7f8:	4a71      	ldr	r2, [pc, #452]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c7fa:	68d1      	ldr	r1, [r2, #12]
1000c7fc:	4b81      	ldr	r3, [pc, #516]	; (1000ca04 <system_clock_peripheral_disable+0x350>)
1000c7fe:	400b      	ands	r3, r1
1000c800:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c802:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c804:	e0d9      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c806:	4a6e      	ldr	r2, [pc, #440]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c808:	68d1      	ldr	r1, [r2, #12]
1000c80a:	4b7f      	ldr	r3, [pc, #508]	; (1000ca08 <system_clock_peripheral_disable+0x354>)
1000c80c:	400b      	ands	r3, r1
1000c80e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c810:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c812:	e0d2      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c814:	4a6a      	ldr	r2, [pc, #424]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c816:	68d1      	ldr	r1, [r2, #12]
1000c818:	4b7c      	ldr	r3, [pc, #496]	; (1000ca0c <system_clock_peripheral_disable+0x358>)
1000c81a:	400b      	ands	r3, r1
1000c81c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c81e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c820:	e0cb      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c822:	4a67      	ldr	r2, [pc, #412]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c824:	68d1      	ldr	r1, [r2, #12]
1000c826:	4b7a      	ldr	r3, [pc, #488]	; (1000ca10 <system_clock_peripheral_disable+0x35c>)
1000c828:	400b      	ands	r3, r1
1000c82a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c82c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c82e:	e0c4      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c830:	4a63      	ldr	r2, [pc, #396]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c832:	68d1      	ldr	r1, [r2, #12]
1000c834:	4b77      	ldr	r3, [pc, #476]	; (1000ca14 <system_clock_peripheral_disable+0x360>)
1000c836:	400b      	ands	r3, r1
1000c838:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c83a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c83c:	e0bd      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c83e:	4a60      	ldr	r2, [pc, #384]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c840:	6913      	ldr	r3, [r2, #16]
1000c842:	2101      	movs	r1, #1
1000c844:	438b      	bics	r3, r1
1000c846:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c84a:	e0b6      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c84c:	4a5c      	ldr	r2, [pc, #368]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c84e:	6913      	ldr	r3, [r2, #16]
1000c850:	2102      	movs	r1, #2
1000c852:	438b      	bics	r3, r1
1000c854:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c856:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c858:	e0af      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c85a:	4a59      	ldr	r2, [pc, #356]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c85c:	6913      	ldr	r3, [r2, #16]
1000c85e:	2104      	movs	r1, #4
1000c860:	438b      	bics	r3, r1
1000c862:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c864:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c866:	e0a8      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c868:	4a55      	ldr	r2, [pc, #340]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c86a:	6913      	ldr	r3, [r2, #16]
1000c86c:	2108      	movs	r1, #8
1000c86e:	438b      	bics	r3, r1
1000c870:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c872:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c874:	e0a1      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c876:	4a52      	ldr	r2, [pc, #328]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c878:	6913      	ldr	r3, [r2, #16]
1000c87a:	2110      	movs	r1, #16
1000c87c:	438b      	bics	r3, r1
1000c87e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c880:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c882:	e09a      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c884:	4a4e      	ldr	r2, [pc, #312]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c886:	6913      	ldr	r3, [r2, #16]
1000c888:	2120      	movs	r1, #32
1000c88a:	438b      	bics	r3, r1
1000c88c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c88e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c890:	e093      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c892:	4a4b      	ldr	r2, [pc, #300]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c894:	6913      	ldr	r3, [r2, #16]
1000c896:	2140      	movs	r1, #64	; 0x40
1000c898:	438b      	bics	r3, r1
1000c89a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c89c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c89e:	e08c      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8a0:	4a47      	ldr	r2, [pc, #284]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8a2:	6913      	ldr	r3, [r2, #16]
1000c8a4:	2180      	movs	r1, #128	; 0x80
1000c8a6:	438b      	bics	r3, r1
1000c8a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c8ac:	e085      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8ae:	4a44      	ldr	r2, [pc, #272]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8b0:	6911      	ldr	r1, [r2, #16]
1000c8b2:	4b44      	ldr	r3, [pc, #272]	; (1000c9c4 <system_clock_peripheral_disable+0x310>)
1000c8b4:	400b      	ands	r3, r1
1000c8b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c8ba:	e07e      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8bc:	4a40      	ldr	r2, [pc, #256]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8be:	6911      	ldr	r1, [r2, #16]
1000c8c0:	4b55      	ldr	r3, [pc, #340]	; (1000ca18 <system_clock_peripheral_disable+0x364>)
1000c8c2:	400b      	ands	r3, r1
1000c8c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c8c8:	e077      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8ca:	4a3d      	ldr	r2, [pc, #244]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8cc:	6911      	ldr	r1, [r2, #16]
1000c8ce:	4b53      	ldr	r3, [pc, #332]	; (1000ca1c <system_clock_peripheral_disable+0x368>)
1000c8d0:	400b      	ands	r3, r1
1000c8d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c8d6:	e070      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8d8:	4a39      	ldr	r2, [pc, #228]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8da:	6911      	ldr	r1, [r2, #16]
1000c8dc:	4b3a      	ldr	r3, [pc, #232]	; (1000c9c8 <system_clock_peripheral_disable+0x314>)
1000c8de:	400b      	ands	r3, r1
1000c8e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c8e4:	e069      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8e6:	4a36      	ldr	r2, [pc, #216]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8e8:	6911      	ldr	r1, [r2, #16]
1000c8ea:	4b38      	ldr	r3, [pc, #224]	; (1000c9cc <system_clock_peripheral_disable+0x318>)
1000c8ec:	400b      	ands	r3, r1
1000c8ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c8f2:	e062      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8f4:	4a32      	ldr	r2, [pc, #200]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c8f6:	6911      	ldr	r1, [r2, #16]
1000c8f8:	4b35      	ldr	r3, [pc, #212]	; (1000c9d0 <system_clock_peripheral_disable+0x31c>)
1000c8fa:	400b      	ands	r3, r1
1000c8fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c900:	e05b      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c902:	4a2f      	ldr	r2, [pc, #188]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c904:	6911      	ldr	r1, [r2, #16]
1000c906:	4b33      	ldr	r3, [pc, #204]	; (1000c9d4 <system_clock_peripheral_disable+0x320>)
1000c908:	400b      	ands	r3, r1
1000c90a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c90c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c90e:	e054      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c910:	4a2b      	ldr	r2, [pc, #172]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c912:	6911      	ldr	r1, [r2, #16]
1000c914:	4b30      	ldr	r3, [pc, #192]	; (1000c9d8 <system_clock_peripheral_disable+0x324>)
1000c916:	400b      	ands	r3, r1
1000c918:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c91a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c91c:	e04d      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c91e:	4a28      	ldr	r2, [pc, #160]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c920:	6911      	ldr	r1, [r2, #16]
1000c922:	4b2e      	ldr	r3, [pc, #184]	; (1000c9dc <system_clock_peripheral_disable+0x328>)
1000c924:	400b      	ands	r3, r1
1000c926:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c928:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c92a:	e046      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c92c:	4a24      	ldr	r2, [pc, #144]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c92e:	6911      	ldr	r1, [r2, #16]
1000c930:	4b2b      	ldr	r3, [pc, #172]	; (1000c9e0 <system_clock_peripheral_disable+0x32c>)
1000c932:	400b      	ands	r3, r1
1000c934:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c936:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c938:	e03f      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c93a:	4a21      	ldr	r2, [pc, #132]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c93c:	6911      	ldr	r1, [r2, #16]
1000c93e:	4b29      	ldr	r3, [pc, #164]	; (1000c9e4 <system_clock_peripheral_disable+0x330>)
1000c940:	400b      	ands	r3, r1
1000c942:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c946:	e038      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c948:	4a1d      	ldr	r2, [pc, #116]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c94a:	6911      	ldr	r1, [r2, #16]
1000c94c:	4b26      	ldr	r3, [pc, #152]	; (1000c9e8 <system_clock_peripheral_disable+0x334>)
1000c94e:	400b      	ands	r3, r1
1000c950:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c952:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c954:	e031      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c956:	4a1a      	ldr	r2, [pc, #104]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c958:	6911      	ldr	r1, [r2, #16]
1000c95a:	4b24      	ldr	r3, [pc, #144]	; (1000c9ec <system_clock_peripheral_disable+0x338>)
1000c95c:	400b      	ands	r3, r1
1000c95e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c960:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c962:	e02a      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c964:	4a16      	ldr	r2, [pc, #88]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c966:	6911      	ldr	r1, [r2, #16]
1000c968:	4b21      	ldr	r3, [pc, #132]	; (1000c9f0 <system_clock_peripheral_disable+0x33c>)
1000c96a:	400b      	ands	r3, r1
1000c96c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c96e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c970:	e023      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c972:	4a13      	ldr	r2, [pc, #76]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c974:	6911      	ldr	r1, [r2, #16]
1000c976:	4b1f      	ldr	r3, [pc, #124]	; (1000c9f4 <system_clock_peripheral_disable+0x340>)
1000c978:	400b      	ands	r3, r1
1000c97a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c97c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c97e:	e01c      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c980:	4a0f      	ldr	r2, [pc, #60]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c982:	6911      	ldr	r1, [r2, #16]
1000c984:	4b1c      	ldr	r3, [pc, #112]	; (1000c9f8 <system_clock_peripheral_disable+0x344>)
1000c986:	400b      	ands	r3, r1
1000c988:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c98a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c98c:	e015      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c98e:	4a0c      	ldr	r2, [pc, #48]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c990:	7d13      	ldrb	r3, [r2, #20]
1000c992:	2101      	movs	r1, #1
1000c994:	438b      	bics	r3, r1
1000c996:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c99a:	e00e      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c99c:	4a08      	ldr	r2, [pc, #32]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c99e:	7d13      	ldrb	r3, [r2, #20]
1000c9a0:	2102      	movs	r1, #2
1000c9a2:	438b      	bics	r3, r1
1000c9a4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c9a8:	e007      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c9aa:	4a05      	ldr	r2, [pc, #20]	; (1000c9c0 <system_clock_peripheral_disable+0x30c>)
1000c9ac:	7d13      	ldrb	r3, [r2, #20]
1000c9ae:	2104      	movs	r1, #4
1000c9b0:	438b      	bics	r3, r1
1000c9b2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c9b6:	e000      	b.n	1000c9ba <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c9b8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c9ba:	bd00      	pop	{pc}
1000c9bc:	10016c10 	.word	0x10016c10
1000c9c0:	4000b000 	.word	0x4000b000
1000c9c4:	fffffeff 	.word	0xfffffeff
1000c9c8:	fffff7ff 	.word	0xfffff7ff
1000c9cc:	ffffefff 	.word	0xffffefff
1000c9d0:	ffffdfff 	.word	0xffffdfff
1000c9d4:	ffffbfff 	.word	0xffffbfff
1000c9d8:	ffff7fff 	.word	0xffff7fff
1000c9dc:	fffeffff 	.word	0xfffeffff
1000c9e0:	fffdffff 	.word	0xfffdffff
1000c9e4:	fffbffff 	.word	0xfffbffff
1000c9e8:	fff7ffff 	.word	0xfff7ffff
1000c9ec:	ffefffff 	.word	0xffefffff
1000c9f0:	ffdfffff 	.word	0xffdfffff
1000c9f4:	ffbfffff 	.word	0xffbfffff
1000c9f8:	ff7fffff 	.word	0xff7fffff
1000c9fc:	feffffff 	.word	0xfeffffff
1000ca00:	fdffffff 	.word	0xfdffffff
1000ca04:	fbffffff 	.word	0xfbffffff
1000ca08:	f7ffffff 	.word	0xf7ffffff
1000ca0c:	efffffff 	.word	0xefffffff
1000ca10:	dfffffff 	.word	0xdfffffff
1000ca14:	bfffffff 	.word	0xbfffffff
1000ca18:	fffffdff 	.word	0xfffffdff
1000ca1c:	fffffbff 	.word	0xfffffbff

1000ca20 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ca20:	b500      	push	{lr}
	switch (peripheral) {
1000ca22:	2843      	cmp	r0, #67	; 0x43
1000ca24:	d900      	bls.n	1000ca28 <system_peripheral_reset+0x8>
1000ca26:	e223      	b.n	1000ce70 <system_peripheral_reset+0x450>
1000ca28:	0080      	lsls	r0, r0, #2
1000ca2a:	4be0      	ldr	r3, [pc, #896]	; (1000cdac <system_peripheral_reset+0x38c>)
1000ca2c:	581b      	ldr	r3, [r3, r0]
1000ca2e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca30:	4bdf      	ldr	r3, [pc, #892]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca32:	6859      	ldr	r1, [r3, #4]
1000ca34:	2202      	movs	r2, #2
1000ca36:	4391      	bics	r1, r2
1000ca38:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca3a:	6859      	ldr	r1, [r3, #4]
1000ca3c:	430a      	orrs	r2, r1
1000ca3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca40:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ca42:	e216      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca44:	4bda      	ldr	r3, [pc, #872]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca46:	6859      	ldr	r1, [r3, #4]
1000ca48:	2204      	movs	r2, #4
1000ca4a:	4391      	bics	r1, r2
1000ca4c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca4e:	6859      	ldr	r1, [r3, #4]
1000ca50:	430a      	orrs	r2, r1
1000ca52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca54:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ca56:	e20c      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca58:	4bd5      	ldr	r3, [pc, #852]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca5a:	6859      	ldr	r1, [r3, #4]
1000ca5c:	2208      	movs	r2, #8
1000ca5e:	4391      	bics	r1, r2
1000ca60:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca62:	6859      	ldr	r1, [r3, #4]
1000ca64:	430a      	orrs	r2, r1
1000ca66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca68:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ca6a:	e202      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca6c:	4bd0      	ldr	r3, [pc, #832]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca6e:	6859      	ldr	r1, [r3, #4]
1000ca70:	2210      	movs	r2, #16
1000ca72:	4391      	bics	r1, r2
1000ca74:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca76:	6859      	ldr	r1, [r3, #4]
1000ca78:	430a      	orrs	r2, r1
1000ca7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca7c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ca7e:	e1f8      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca80:	4bcb      	ldr	r3, [pc, #812]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca82:	6859      	ldr	r1, [r3, #4]
1000ca84:	2220      	movs	r2, #32
1000ca86:	4391      	bics	r1, r2
1000ca88:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca8a:	6859      	ldr	r1, [r3, #4]
1000ca8c:	430a      	orrs	r2, r1
1000ca8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ca92:	e1ee      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca94:	4bc6      	ldr	r3, [pc, #792]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ca96:	6859      	ldr	r1, [r3, #4]
1000ca98:	2240      	movs	r2, #64	; 0x40
1000ca9a:	4391      	bics	r1, r2
1000ca9c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca9e:	6859      	ldr	r1, [r3, #4]
1000caa0:	430a      	orrs	r2, r1
1000caa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000caa6:	e1e4      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caa8:	4bc1      	ldr	r3, [pc, #772]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000caaa:	6859      	ldr	r1, [r3, #4]
1000caac:	2280      	movs	r2, #128	; 0x80
1000caae:	4391      	bics	r1, r2
1000cab0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cab2:	6859      	ldr	r1, [r3, #4]
1000cab4:	430a      	orrs	r2, r1
1000cab6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000caba:	e1da      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cabc:	4bbc      	ldr	r3, [pc, #752]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cabe:	6859      	ldr	r1, [r3, #4]
1000cac0:	4abc      	ldr	r2, [pc, #752]	; (1000cdb4 <system_peripheral_reset+0x394>)
1000cac2:	400a      	ands	r2, r1
1000cac4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cac6:	685a      	ldr	r2, [r3, #4]
1000cac8:	2180      	movs	r1, #128	; 0x80
1000caca:	0049      	lsls	r1, r1, #1
1000cacc:	430a      	orrs	r2, r1
1000cace:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cad2:	e1ce      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cad4:	4bb6      	ldr	r3, [pc, #728]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cad6:	6859      	ldr	r1, [r3, #4]
1000cad8:	4ab7      	ldr	r2, [pc, #732]	; (1000cdb8 <system_peripheral_reset+0x398>)
1000cada:	400a      	ands	r2, r1
1000cadc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cade:	685a      	ldr	r2, [r3, #4]
1000cae0:	2180      	movs	r1, #128	; 0x80
1000cae2:	0089      	lsls	r1, r1, #2
1000cae4:	430a      	orrs	r2, r1
1000cae6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000caea:	e1c2      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caec:	4bb0      	ldr	r3, [pc, #704]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000caee:	6859      	ldr	r1, [r3, #4]
1000caf0:	4ab2      	ldr	r2, [pc, #712]	; (1000cdbc <system_peripheral_reset+0x39c>)
1000caf2:	400a      	ands	r2, r1
1000caf4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caf6:	685a      	ldr	r2, [r3, #4]
1000caf8:	2180      	movs	r1, #128	; 0x80
1000cafa:	00c9      	lsls	r1, r1, #3
1000cafc:	430a      	orrs	r2, r1
1000cafe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb00:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cb02:	e1b6      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb04:	4baa      	ldr	r3, [pc, #680]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb06:	6859      	ldr	r1, [r3, #4]
1000cb08:	4aad      	ldr	r2, [pc, #692]	; (1000cdc0 <system_peripheral_reset+0x3a0>)
1000cb0a:	400a      	ands	r2, r1
1000cb0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb0e:	685a      	ldr	r2, [r3, #4]
1000cb10:	2180      	movs	r1, #128	; 0x80
1000cb12:	0109      	lsls	r1, r1, #4
1000cb14:	430a      	orrs	r2, r1
1000cb16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb18:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cb1a:	e1aa      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb1c:	4ba4      	ldr	r3, [pc, #656]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb1e:	6859      	ldr	r1, [r3, #4]
1000cb20:	4aa8      	ldr	r2, [pc, #672]	; (1000cdc4 <system_peripheral_reset+0x3a4>)
1000cb22:	400a      	ands	r2, r1
1000cb24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb26:	685a      	ldr	r2, [r3, #4]
1000cb28:	2180      	movs	r1, #128	; 0x80
1000cb2a:	0149      	lsls	r1, r1, #5
1000cb2c:	430a      	orrs	r2, r1
1000cb2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb30:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cb32:	e19e      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb34:	4b9e      	ldr	r3, [pc, #632]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb36:	6859      	ldr	r1, [r3, #4]
1000cb38:	4aa3      	ldr	r2, [pc, #652]	; (1000cdc8 <system_peripheral_reset+0x3a8>)
1000cb3a:	400a      	ands	r2, r1
1000cb3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb3e:	685a      	ldr	r2, [r3, #4]
1000cb40:	2180      	movs	r1, #128	; 0x80
1000cb42:	0189      	lsls	r1, r1, #6
1000cb44:	430a      	orrs	r2, r1
1000cb46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb48:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cb4a:	e192      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb4c:	4b98      	ldr	r3, [pc, #608]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb4e:	6859      	ldr	r1, [r3, #4]
1000cb50:	4a9e      	ldr	r2, [pc, #632]	; (1000cdcc <system_peripheral_reset+0x3ac>)
1000cb52:	400a      	ands	r2, r1
1000cb54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb56:	685a      	ldr	r2, [r3, #4]
1000cb58:	2180      	movs	r1, #128	; 0x80
1000cb5a:	01c9      	lsls	r1, r1, #7
1000cb5c:	430a      	orrs	r2, r1
1000cb5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb60:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cb62:	e186      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb64:	4b92      	ldr	r3, [pc, #584]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb66:	6859      	ldr	r1, [r3, #4]
1000cb68:	4a99      	ldr	r2, [pc, #612]	; (1000cdd0 <system_peripheral_reset+0x3b0>)
1000cb6a:	400a      	ands	r2, r1
1000cb6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb6e:	685a      	ldr	r2, [r3, #4]
1000cb70:	2180      	movs	r1, #128	; 0x80
1000cb72:	0209      	lsls	r1, r1, #8
1000cb74:	430a      	orrs	r2, r1
1000cb76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb78:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cb7a:	e17a      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb7c:	4b8c      	ldr	r3, [pc, #560]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb7e:	6859      	ldr	r1, [r3, #4]
1000cb80:	4a94      	ldr	r2, [pc, #592]	; (1000cdd4 <system_peripheral_reset+0x3b4>)
1000cb82:	400a      	ands	r2, r1
1000cb84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb86:	685a      	ldr	r2, [r3, #4]
1000cb88:	2180      	movs	r1, #128	; 0x80
1000cb8a:	0249      	lsls	r1, r1, #9
1000cb8c:	430a      	orrs	r2, r1
1000cb8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb90:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cb92:	e16e      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb94:	4b86      	ldr	r3, [pc, #536]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cb96:	6859      	ldr	r1, [r3, #4]
1000cb98:	4a8f      	ldr	r2, [pc, #572]	; (1000cdd8 <system_peripheral_reset+0x3b8>)
1000cb9a:	400a      	ands	r2, r1
1000cb9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb9e:	685a      	ldr	r2, [r3, #4]
1000cba0:	2180      	movs	r1, #128	; 0x80
1000cba2:	0289      	lsls	r1, r1, #10
1000cba4:	430a      	orrs	r2, r1
1000cba6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000cbaa:	e162      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbac:	4b80      	ldr	r3, [pc, #512]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cbae:	6859      	ldr	r1, [r3, #4]
1000cbb0:	4a8a      	ldr	r2, [pc, #552]	; (1000cddc <system_peripheral_reset+0x3bc>)
1000cbb2:	400a      	ands	r2, r1
1000cbb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbb6:	685a      	ldr	r2, [r3, #4]
1000cbb8:	2180      	movs	r1, #128	; 0x80
1000cbba:	02c9      	lsls	r1, r1, #11
1000cbbc:	430a      	orrs	r2, r1
1000cbbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cbc2:	e156      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbc4:	4b7a      	ldr	r3, [pc, #488]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cbc6:	6859      	ldr	r1, [r3, #4]
1000cbc8:	4a85      	ldr	r2, [pc, #532]	; (1000cde0 <system_peripheral_reset+0x3c0>)
1000cbca:	400a      	ands	r2, r1
1000cbcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbce:	685a      	ldr	r2, [r3, #4]
1000cbd0:	2180      	movs	r1, #128	; 0x80
1000cbd2:	0309      	lsls	r1, r1, #12
1000cbd4:	430a      	orrs	r2, r1
1000cbd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cbda:	e14a      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbdc:	4b74      	ldr	r3, [pc, #464]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cbde:	6859      	ldr	r1, [r3, #4]
1000cbe0:	4a80      	ldr	r2, [pc, #512]	; (1000cde4 <system_peripheral_reset+0x3c4>)
1000cbe2:	400a      	ands	r2, r1
1000cbe4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbe6:	685a      	ldr	r2, [r3, #4]
1000cbe8:	2180      	movs	r1, #128	; 0x80
1000cbea:	0349      	lsls	r1, r1, #13
1000cbec:	430a      	orrs	r2, r1
1000cbee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cbf2:	e13e      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbf4:	4b6e      	ldr	r3, [pc, #440]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cbf6:	6859      	ldr	r1, [r3, #4]
1000cbf8:	4a7b      	ldr	r2, [pc, #492]	; (1000cde8 <system_peripheral_reset+0x3c8>)
1000cbfa:	400a      	ands	r2, r1
1000cbfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbfe:	685a      	ldr	r2, [r3, #4]
1000cc00:	2180      	movs	r1, #128	; 0x80
1000cc02:	0389      	lsls	r1, r1, #14
1000cc04:	430a      	orrs	r2, r1
1000cc06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc08:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cc0a:	e132      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc0c:	4b68      	ldr	r3, [pc, #416]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc0e:	6859      	ldr	r1, [r3, #4]
1000cc10:	4a76      	ldr	r2, [pc, #472]	; (1000cdec <system_peripheral_reset+0x3cc>)
1000cc12:	400a      	ands	r2, r1
1000cc14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc16:	685a      	ldr	r2, [r3, #4]
1000cc18:	2180      	movs	r1, #128	; 0x80
1000cc1a:	03c9      	lsls	r1, r1, #15
1000cc1c:	430a      	orrs	r2, r1
1000cc1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc20:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cc22:	e126      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc24:	4b62      	ldr	r3, [pc, #392]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc26:	6859      	ldr	r1, [r3, #4]
1000cc28:	4a71      	ldr	r2, [pc, #452]	; (1000cdf0 <system_peripheral_reset+0x3d0>)
1000cc2a:	400a      	ands	r2, r1
1000cc2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc2e:	685a      	ldr	r2, [r3, #4]
1000cc30:	2180      	movs	r1, #128	; 0x80
1000cc32:	0409      	lsls	r1, r1, #16
1000cc34:	430a      	orrs	r2, r1
1000cc36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc38:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cc3a:	e11a      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc3c:	4b5c      	ldr	r3, [pc, #368]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc3e:	6859      	ldr	r1, [r3, #4]
1000cc40:	4a6c      	ldr	r2, [pc, #432]	; (1000cdf4 <system_peripheral_reset+0x3d4>)
1000cc42:	400a      	ands	r2, r1
1000cc44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc46:	685a      	ldr	r2, [r3, #4]
1000cc48:	2180      	movs	r1, #128	; 0x80
1000cc4a:	0449      	lsls	r1, r1, #17
1000cc4c:	430a      	orrs	r2, r1
1000cc4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc50:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cc52:	e10e      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc54:	4b56      	ldr	r3, [pc, #344]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc56:	6859      	ldr	r1, [r3, #4]
1000cc58:	4a67      	ldr	r2, [pc, #412]	; (1000cdf8 <system_peripheral_reset+0x3d8>)
1000cc5a:	400a      	ands	r2, r1
1000cc5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc5e:	685a      	ldr	r2, [r3, #4]
1000cc60:	2180      	movs	r1, #128	; 0x80
1000cc62:	0489      	lsls	r1, r1, #18
1000cc64:	430a      	orrs	r2, r1
1000cc66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc68:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cc6a:	e102      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc6c:	4b50      	ldr	r3, [pc, #320]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc6e:	6859      	ldr	r1, [r3, #4]
1000cc70:	4a62      	ldr	r2, [pc, #392]	; (1000cdfc <system_peripheral_reset+0x3dc>)
1000cc72:	400a      	ands	r2, r1
1000cc74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc76:	685a      	ldr	r2, [r3, #4]
1000cc78:	2180      	movs	r1, #128	; 0x80
1000cc7a:	04c9      	lsls	r1, r1, #19
1000cc7c:	430a      	orrs	r2, r1
1000cc7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc80:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cc82:	e0f6      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc84:	4b4a      	ldr	r3, [pc, #296]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc86:	6859      	ldr	r1, [r3, #4]
1000cc88:	4a5d      	ldr	r2, [pc, #372]	; (1000ce00 <system_peripheral_reset+0x3e0>)
1000cc8a:	400a      	ands	r2, r1
1000cc8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc8e:	685a      	ldr	r2, [r3, #4]
1000cc90:	2180      	movs	r1, #128	; 0x80
1000cc92:	0509      	lsls	r1, r1, #20
1000cc94:	430a      	orrs	r2, r1
1000cc96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc98:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cc9a:	e0ea      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc9c:	4b44      	ldr	r3, [pc, #272]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cc9e:	6859      	ldr	r1, [r3, #4]
1000cca0:	4a58      	ldr	r2, [pc, #352]	; (1000ce04 <system_peripheral_reset+0x3e4>)
1000cca2:	400a      	ands	r2, r1
1000cca4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cca6:	685a      	ldr	r2, [r3, #4]
1000cca8:	2180      	movs	r1, #128	; 0x80
1000ccaa:	0549      	lsls	r1, r1, #21
1000ccac:	430a      	orrs	r2, r1
1000ccae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000ccb2:	e0de      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccb4:	4b3e      	ldr	r3, [pc, #248]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ccb6:	6859      	ldr	r1, [r3, #4]
1000ccb8:	4a53      	ldr	r2, [pc, #332]	; (1000ce08 <system_peripheral_reset+0x3e8>)
1000ccba:	400a      	ands	r2, r1
1000ccbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccbe:	685a      	ldr	r2, [r3, #4]
1000ccc0:	2180      	movs	r1, #128	; 0x80
1000ccc2:	0589      	lsls	r1, r1, #22
1000ccc4:	430a      	orrs	r2, r1
1000ccc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000ccca:	e0d2      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cccc:	4b38      	ldr	r3, [pc, #224]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ccce:	6859      	ldr	r1, [r3, #4]
1000ccd0:	4a4e      	ldr	r2, [pc, #312]	; (1000ce0c <system_peripheral_reset+0x3ec>)
1000ccd2:	400a      	ands	r2, r1
1000ccd4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccd6:	685a      	ldr	r2, [r3, #4]
1000ccd8:	2180      	movs	r1, #128	; 0x80
1000ccda:	05c9      	lsls	r1, r1, #23
1000ccdc:	430a      	orrs	r2, r1
1000ccde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cce2:	e0c6      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cce4:	4a32      	ldr	r2, [pc, #200]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cce6:	6853      	ldr	r3, [r2, #4]
1000cce8:	005b      	lsls	r3, r3, #1
1000ccea:	085b      	lsrs	r3, r3, #1
1000ccec:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccee:	6853      	ldr	r3, [r2, #4]
1000ccf0:	2180      	movs	r1, #128	; 0x80
1000ccf2:	0609      	lsls	r1, r1, #24
1000ccf4:	430b      	orrs	r3, r1
1000ccf6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000ccfa:	e0ba      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccfc:	4b2c      	ldr	r3, [pc, #176]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000ccfe:	891a      	ldrh	r2, [r3, #8]
1000cd00:	2101      	movs	r1, #1
1000cd02:	438a      	bics	r2, r1
1000cd04:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd06:	8919      	ldrh	r1, [r3, #8]
1000cd08:	2201      	movs	r2, #1
1000cd0a:	430a      	orrs	r2, r1
1000cd0c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd0e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000cd10:	e0af      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd12:	4b27      	ldr	r3, [pc, #156]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd14:	891a      	ldrh	r2, [r3, #8]
1000cd16:	2102      	movs	r1, #2
1000cd18:	438a      	bics	r2, r1
1000cd1a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd1c:	8919      	ldrh	r1, [r3, #8]
1000cd1e:	2202      	movs	r2, #2
1000cd20:	430a      	orrs	r2, r1
1000cd22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd24:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000cd26:	e0a4      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd28:	4b21      	ldr	r3, [pc, #132]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd2a:	891a      	ldrh	r2, [r3, #8]
1000cd2c:	2104      	movs	r1, #4
1000cd2e:	438a      	bics	r2, r1
1000cd30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd32:	8919      	ldrh	r1, [r3, #8]
1000cd34:	2204      	movs	r2, #4
1000cd36:	430a      	orrs	r2, r1
1000cd38:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd3a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000cd3c:	e099      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd3e:	4b1c      	ldr	r3, [pc, #112]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd40:	891a      	ldrh	r2, [r3, #8]
1000cd42:	2108      	movs	r1, #8
1000cd44:	438a      	bics	r2, r1
1000cd46:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd48:	8919      	ldrh	r1, [r3, #8]
1000cd4a:	2208      	movs	r2, #8
1000cd4c:	430a      	orrs	r2, r1
1000cd4e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd50:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000cd52:	e08e      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd54:	4b16      	ldr	r3, [pc, #88]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd56:	891a      	ldrh	r2, [r3, #8]
1000cd58:	2110      	movs	r1, #16
1000cd5a:	438a      	bics	r2, r1
1000cd5c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd5e:	8919      	ldrh	r1, [r3, #8]
1000cd60:	2210      	movs	r2, #16
1000cd62:	430a      	orrs	r2, r1
1000cd64:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd66:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000cd68:	e083      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd6a:	4b11      	ldr	r3, [pc, #68]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd6c:	891a      	ldrh	r2, [r3, #8]
1000cd6e:	2120      	movs	r1, #32
1000cd70:	438a      	bics	r2, r1
1000cd72:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd74:	8919      	ldrh	r1, [r3, #8]
1000cd76:	2220      	movs	r2, #32
1000cd78:	430a      	orrs	r2, r1
1000cd7a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd7c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cd7e:	e078      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd80:	4b0b      	ldr	r3, [pc, #44]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd82:	891a      	ldrh	r2, [r3, #8]
1000cd84:	2140      	movs	r1, #64	; 0x40
1000cd86:	438a      	bics	r2, r1
1000cd88:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd8a:	8919      	ldrh	r1, [r3, #8]
1000cd8c:	2240      	movs	r2, #64	; 0x40
1000cd8e:	430a      	orrs	r2, r1
1000cd90:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd92:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000cd94:	e06d      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd96:	4b06      	ldr	r3, [pc, #24]	; (1000cdb0 <system_peripheral_reset+0x390>)
1000cd98:	891a      	ldrh	r2, [r3, #8]
1000cd9a:	2180      	movs	r1, #128	; 0x80
1000cd9c:	438a      	bics	r2, r1
1000cd9e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cda0:	8919      	ldrh	r1, [r3, #8]
1000cda2:	2280      	movs	r2, #128	; 0x80
1000cda4:	430a      	orrs	r2, r1
1000cda6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cdaa:	e062      	b.n	1000ce72 <system_peripheral_reset+0x452>
1000cdac:	10016ce8 	.word	0x10016ce8
1000cdb0:	4000b000 	.word	0x4000b000
1000cdb4:	fffffeff 	.word	0xfffffeff
1000cdb8:	fffffdff 	.word	0xfffffdff
1000cdbc:	fffffbff 	.word	0xfffffbff
1000cdc0:	fffff7ff 	.word	0xfffff7ff
1000cdc4:	ffffefff 	.word	0xffffefff
1000cdc8:	ffffdfff 	.word	0xffffdfff
1000cdcc:	ffffbfff 	.word	0xffffbfff
1000cdd0:	ffff7fff 	.word	0xffff7fff
1000cdd4:	fffeffff 	.word	0xfffeffff
1000cdd8:	fffdffff 	.word	0xfffdffff
1000cddc:	fffbffff 	.word	0xfffbffff
1000cde0:	fff7ffff 	.word	0xfff7ffff
1000cde4:	ffefffff 	.word	0xffefffff
1000cde8:	ffdfffff 	.word	0xffdfffff
1000cdec:	ffbfffff 	.word	0xffbfffff
1000cdf0:	ff7fffff 	.word	0xff7fffff
1000cdf4:	feffffff 	.word	0xfeffffff
1000cdf8:	fdffffff 	.word	0xfdffffff
1000cdfc:	fbffffff 	.word	0xfbffffff
1000ce00:	f7ffffff 	.word	0xf7ffffff
1000ce04:	efffffff 	.word	0xefffffff
1000ce08:	dfffffff 	.word	0xdfffffff
1000ce0c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce10:	4b18      	ldr	r3, [pc, #96]	; (1000ce74 <system_peripheral_reset+0x454>)
1000ce12:	8919      	ldrh	r1, [r3, #8]
1000ce14:	4a18      	ldr	r2, [pc, #96]	; (1000ce78 <system_peripheral_reset+0x458>)
1000ce16:	400a      	ands	r2, r1
1000ce18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce1a:	8919      	ldrh	r1, [r3, #8]
1000ce1c:	2280      	movs	r2, #128	; 0x80
1000ce1e:	0052      	lsls	r2, r2, #1
1000ce20:	430a      	orrs	r2, r1
1000ce22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000ce26:	e024      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce28:	4b12      	ldr	r3, [pc, #72]	; (1000ce74 <system_peripheral_reset+0x454>)
1000ce2a:	8919      	ldrh	r1, [r3, #8]
1000ce2c:	4a13      	ldr	r2, [pc, #76]	; (1000ce7c <system_peripheral_reset+0x45c>)
1000ce2e:	400a      	ands	r2, r1
1000ce30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce32:	8919      	ldrh	r1, [r3, #8]
1000ce34:	2280      	movs	r2, #128	; 0x80
1000ce36:	0092      	lsls	r2, r2, #2
1000ce38:	430a      	orrs	r2, r1
1000ce3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ce3e:	e018      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce40:	4b0c      	ldr	r3, [pc, #48]	; (1000ce74 <system_peripheral_reset+0x454>)
1000ce42:	8919      	ldrh	r1, [r3, #8]
1000ce44:	4a0e      	ldr	r2, [pc, #56]	; (1000ce80 <system_peripheral_reset+0x460>)
1000ce46:	400a      	ands	r2, r1
1000ce48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce4a:	8919      	ldrh	r1, [r3, #8]
1000ce4c:	2280      	movs	r2, #128	; 0x80
1000ce4e:	00d2      	lsls	r2, r2, #3
1000ce50:	430a      	orrs	r2, r1
1000ce52:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce54:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ce56:	e00c      	b.n	1000ce72 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce58:	4b06      	ldr	r3, [pc, #24]	; (1000ce74 <system_peripheral_reset+0x454>)
1000ce5a:	8919      	ldrh	r1, [r3, #8]
1000ce5c:	4a09      	ldr	r2, [pc, #36]	; (1000ce84 <system_peripheral_reset+0x464>)
1000ce5e:	400a      	ands	r2, r1
1000ce60:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce62:	8919      	ldrh	r1, [r3, #8]
1000ce64:	2280      	movs	r2, #128	; 0x80
1000ce66:	0112      	lsls	r2, r2, #4
1000ce68:	430a      	orrs	r2, r1
1000ce6a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce6c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000ce6e:	e000      	b.n	1000ce72 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ce70:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ce72:	bd00      	pop	{pc}
1000ce74:	4000b000 	.word	0x4000b000
1000ce78:	fffffeff 	.word	0xfffffeff
1000ce7c:	fffffdff 	.word	0xfffffdff
1000ce80:	fffffbff 	.word	0xfffffbff
1000ce84:	fffff7ff 	.word	0xfffff7ff

1000ce88 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000ce88:	2380      	movs	r3, #128	; 0x80
1000ce8a:	04db      	lsls	r3, r3, #19
1000ce8c:	469c      	mov	ip, r3
1000ce8e:	4460      	add	r0, ip
1000ce90:	0080      	lsls	r0, r0, #2
1000ce92:	6001      	str	r1, [r0, #0]
}
1000ce94:	4770      	bx	lr
1000ce96:	46c0      	nop			; (mov r8, r8)

1000ce98 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ce98:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ce9a:	4b20      	ldr	r3, [pc, #128]	; (1000cf1c <uart_rx0_isr_handler+0x84>)
1000ce9c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ce9e:	6823      	ldr	r3, [r4, #0]
1000cea0:	7d1d      	ldrb	r5, [r3, #20]
1000cea2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cea4:	066a      	lsls	r2, r5, #25
1000cea6:	d513      	bpl.n	1000ced0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cea8:	211e      	movs	r1, #30
1000ceaa:	2222      	movs	r2, #34	; 0x22
1000ceac:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ceae:	7e1a      	ldrb	r2, [r3, #24]
1000ceb0:	3123      	adds	r1, #35	; 0x23
1000ceb2:	438a      	bics	r2, r1
1000ceb4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ceb6:	2321      	movs	r3, #33	; 0x21
1000ceb8:	5ce3      	ldrb	r3, [r4, r3]
1000ceba:	071b      	lsls	r3, r3, #28
1000cebc:	d506      	bpl.n	1000cecc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cebe:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cec0:	5ce3      	ldrb	r3, [r4, r3]
1000cec2:	071b      	lsls	r3, r3, #28
1000cec4:	d502      	bpl.n	1000cecc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cec6:	0020      	movs	r0, r4
1000cec8:	6923      	ldr	r3, [r4, #16]
1000ceca:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cecc:	6823      	ldr	r3, [r4, #0]
1000cece:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ced0:	07eb      	lsls	r3, r5, #31
1000ced2:	d522      	bpl.n	1000cf1a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ced4:	6823      	ldr	r3, [r4, #0]
1000ced6:	7c1b      	ldrb	r3, [r3, #16]
1000ced8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ceda:	6962      	ldr	r2, [r4, #20]
1000cedc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cede:	6963      	ldr	r3, [r4, #20]
1000cee0:	3301      	adds	r3, #1
1000cee2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cee4:	8ba3      	ldrh	r3, [r4, #28]
1000cee6:	3b01      	subs	r3, #1
1000cee8:	b29b      	uxth	r3, r3
1000ceea:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ceec:	8ba3      	ldrh	r3, [r4, #28]
1000ceee:	b29b      	uxth	r3, r3
1000cef0:	2b00      	cmp	r3, #0
1000cef2:	d112      	bne.n	1000cf1a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cef4:	3321      	adds	r3, #33	; 0x21
1000cef6:	5ce3      	ldrb	r3, [r4, r3]
1000cef8:	075b      	lsls	r3, r3, #29
1000cefa:	d50e      	bpl.n	1000cf1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cefc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cefe:	5ce3      	ldrb	r3, [r4, r3]
1000cf00:	075b      	lsls	r3, r3, #29
1000cf02:	d50a      	bpl.n	1000cf1a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cf04:	2200      	movs	r2, #0
1000cf06:	2322      	movs	r3, #34	; 0x22
1000cf08:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cf0a:	6822      	ldr	r2, [r4, #0]
1000cf0c:	7e13      	ldrb	r3, [r2, #24]
1000cf0e:	2101      	movs	r1, #1
1000cf10:	438b      	bics	r3, r1
1000cf12:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cf14:	68e3      	ldr	r3, [r4, #12]
1000cf16:	0020      	movs	r0, r4
1000cf18:	4798      	blx	r3
			}
		}
	}
}
1000cf1a:	bd70      	pop	{r4, r5, r6, pc}
1000cf1c:	10019ae8 	.word	0x10019ae8

1000cf20 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000cf20:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cf22:	4b21      	ldr	r3, [pc, #132]	; (1000cfa8 <uart_tx0_isr_handler+0x88>)
1000cf24:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cf26:	6823      	ldr	r3, [r4, #0]
1000cf28:	791d      	ldrb	r5, [r3, #4]
1000cf2a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cf2c:	07ea      	lsls	r2, r5, #31
1000cf2e:	d517      	bpl.n	1000cf60 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cf30:	69a2      	ldr	r2, [r4, #24]
1000cf32:	7811      	ldrb	r1, [r2, #0]
1000cf34:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cf36:	3201      	adds	r2, #1
1000cf38:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cf3a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cf3c:	8be3      	ldrh	r3, [r4, #30]
1000cf3e:	3b01      	subs	r3, #1
1000cf40:	b29b      	uxth	r3, r3
1000cf42:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cf44:	8be3      	ldrh	r3, [r4, #30]
1000cf46:	b29b      	uxth	r3, r3
1000cf48:	2b00      	cmp	r3, #0
1000cf4a:	d109      	bne.n	1000cf60 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cf4c:	6822      	ldr	r2, [r4, #0]
1000cf4e:	7a13      	ldrb	r3, [r2, #8]
1000cf50:	2101      	movs	r1, #1
1000cf52:	438b      	bics	r3, r1
1000cf54:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cf56:	6822      	ldr	r2, [r4, #0]
1000cf58:	7a11      	ldrb	r1, [r2, #8]
1000cf5a:	2310      	movs	r3, #16
1000cf5c:	430b      	orrs	r3, r1
1000cf5e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cf60:	06eb      	lsls	r3, r5, #27
1000cf62:	d512      	bpl.n	1000cf8a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cf64:	2321      	movs	r3, #33	; 0x21
1000cf66:	5ce3      	ldrb	r3, [r4, r3]
1000cf68:	07db      	lsls	r3, r3, #31
1000cf6a:	d50e      	bpl.n	1000cf8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cf6c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cf6e:	5ce3      	ldrb	r3, [r4, r3]
1000cf70:	07db      	lsls	r3, r3, #31
1000cf72:	d50a      	bpl.n	1000cf8a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cf74:	2200      	movs	r2, #0
1000cf76:	2322      	movs	r3, #34	; 0x22
1000cf78:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cf7a:	6822      	ldr	r2, [r4, #0]
1000cf7c:	7a13      	ldrb	r3, [r2, #8]
1000cf7e:	2110      	movs	r1, #16
1000cf80:	438b      	bics	r3, r1
1000cf82:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cf84:	0020      	movs	r0, r4
1000cf86:	6863      	ldr	r3, [r4, #4]
1000cf88:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cf8a:	06ab      	lsls	r3, r5, #26
1000cf8c:	d50a      	bpl.n	1000cfa4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cf8e:	2321      	movs	r3, #33	; 0x21
1000cf90:	5ce3      	ldrb	r3, [r4, r3]
1000cf92:	079b      	lsls	r3, r3, #30
1000cf94:	d506      	bpl.n	1000cfa4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cf96:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cf98:	5ce3      	ldrb	r3, [r4, r3]
1000cf9a:	079b      	lsls	r3, r3, #30
1000cf9c:	d502      	bpl.n	1000cfa4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cf9e:	68a3      	ldr	r3, [r4, #8]
1000cfa0:	0020      	movs	r0, r4
1000cfa2:	4798      	blx	r3
		}

	}
}
1000cfa4:	bd70      	pop	{r4, r5, r6, pc}
1000cfa6:	46c0      	nop			; (mov r8, r8)
1000cfa8:	10019ae8 	.word	0x10019ae8

1000cfac <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cfac:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cfae:	4b20      	ldr	r3, [pc, #128]	; (1000d030 <uart_rx1_isr_handler+0x84>)
1000cfb0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cfb2:	6823      	ldr	r3, [r4, #0]
1000cfb4:	7d1d      	ldrb	r5, [r3, #20]
1000cfb6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cfb8:	066a      	lsls	r2, r5, #25
1000cfba:	d513      	bpl.n	1000cfe4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cfbc:	211e      	movs	r1, #30
1000cfbe:	2222      	movs	r2, #34	; 0x22
1000cfc0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cfc2:	7e1a      	ldrb	r2, [r3, #24]
1000cfc4:	3123      	adds	r1, #35	; 0x23
1000cfc6:	438a      	bics	r2, r1
1000cfc8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cfca:	2321      	movs	r3, #33	; 0x21
1000cfcc:	5ce3      	ldrb	r3, [r4, r3]
1000cfce:	071b      	lsls	r3, r3, #28
1000cfd0:	d506      	bpl.n	1000cfe0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cfd2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cfd4:	5ce3      	ldrb	r3, [r4, r3]
1000cfd6:	071b      	lsls	r3, r3, #28
1000cfd8:	d502      	bpl.n	1000cfe0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cfda:	0020      	movs	r0, r4
1000cfdc:	6923      	ldr	r3, [r4, #16]
1000cfde:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cfe0:	6823      	ldr	r3, [r4, #0]
1000cfe2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cfe4:	07eb      	lsls	r3, r5, #31
1000cfe6:	d522      	bpl.n	1000d02e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cfe8:	6823      	ldr	r3, [r4, #0]
1000cfea:	7c1b      	ldrb	r3, [r3, #16]
1000cfec:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cfee:	6962      	ldr	r2, [r4, #20]
1000cff0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cff2:	6963      	ldr	r3, [r4, #20]
1000cff4:	3301      	adds	r3, #1
1000cff6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cff8:	8ba3      	ldrh	r3, [r4, #28]
1000cffa:	3b01      	subs	r3, #1
1000cffc:	b29b      	uxth	r3, r3
1000cffe:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d000:	8ba3      	ldrh	r3, [r4, #28]
1000d002:	b29b      	uxth	r3, r3
1000d004:	2b00      	cmp	r3, #0
1000d006:	d112      	bne.n	1000d02e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d008:	3321      	adds	r3, #33	; 0x21
1000d00a:	5ce3      	ldrb	r3, [r4, r3]
1000d00c:	075b      	lsls	r3, r3, #29
1000d00e:	d50e      	bpl.n	1000d02e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d010:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d012:	5ce3      	ldrb	r3, [r4, r3]
1000d014:	075b      	lsls	r3, r3, #29
1000d016:	d50a      	bpl.n	1000d02e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d018:	2200      	movs	r2, #0
1000d01a:	2322      	movs	r3, #34	; 0x22
1000d01c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d01e:	6822      	ldr	r2, [r4, #0]
1000d020:	7e13      	ldrb	r3, [r2, #24]
1000d022:	2101      	movs	r1, #1
1000d024:	438b      	bics	r3, r1
1000d026:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d028:	68e3      	ldr	r3, [r4, #12]
1000d02a:	0020      	movs	r0, r4
1000d02c:	4798      	blx	r3
			}
		}
	}
}
1000d02e:	bd70      	pop	{r4, r5, r6, pc}
1000d030:	10019ae8 	.word	0x10019ae8

1000d034 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d034:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d036:	4b21      	ldr	r3, [pc, #132]	; (1000d0bc <uart_tx1_isr_handler+0x88>)
1000d038:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d03a:	6823      	ldr	r3, [r4, #0]
1000d03c:	791d      	ldrb	r5, [r3, #4]
1000d03e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d040:	07ea      	lsls	r2, r5, #31
1000d042:	d517      	bpl.n	1000d074 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d044:	69a2      	ldr	r2, [r4, #24]
1000d046:	7811      	ldrb	r1, [r2, #0]
1000d048:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d04a:	3201      	adds	r2, #1
1000d04c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d04e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d050:	8be3      	ldrh	r3, [r4, #30]
1000d052:	3b01      	subs	r3, #1
1000d054:	b29b      	uxth	r3, r3
1000d056:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d058:	8be3      	ldrh	r3, [r4, #30]
1000d05a:	b29b      	uxth	r3, r3
1000d05c:	2b00      	cmp	r3, #0
1000d05e:	d109      	bne.n	1000d074 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d060:	6822      	ldr	r2, [r4, #0]
1000d062:	7a13      	ldrb	r3, [r2, #8]
1000d064:	2101      	movs	r1, #1
1000d066:	438b      	bics	r3, r1
1000d068:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d06a:	6822      	ldr	r2, [r4, #0]
1000d06c:	7a11      	ldrb	r1, [r2, #8]
1000d06e:	2310      	movs	r3, #16
1000d070:	430b      	orrs	r3, r1
1000d072:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d074:	06eb      	lsls	r3, r5, #27
1000d076:	d512      	bpl.n	1000d09e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d078:	2321      	movs	r3, #33	; 0x21
1000d07a:	5ce3      	ldrb	r3, [r4, r3]
1000d07c:	07db      	lsls	r3, r3, #31
1000d07e:	d50e      	bpl.n	1000d09e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d080:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d082:	5ce3      	ldrb	r3, [r4, r3]
1000d084:	07db      	lsls	r3, r3, #31
1000d086:	d50a      	bpl.n	1000d09e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d088:	2200      	movs	r2, #0
1000d08a:	2322      	movs	r3, #34	; 0x22
1000d08c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d08e:	6822      	ldr	r2, [r4, #0]
1000d090:	7a13      	ldrb	r3, [r2, #8]
1000d092:	2110      	movs	r1, #16
1000d094:	438b      	bics	r3, r1
1000d096:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d098:	0020      	movs	r0, r4
1000d09a:	6863      	ldr	r3, [r4, #4]
1000d09c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d09e:	06ab      	lsls	r3, r5, #26
1000d0a0:	d50a      	bpl.n	1000d0b8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0a2:	2321      	movs	r3, #33	; 0x21
1000d0a4:	5ce3      	ldrb	r3, [r4, r3]
1000d0a6:	079b      	lsls	r3, r3, #30
1000d0a8:	d506      	bpl.n	1000d0b8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d0aa:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0ac:	5ce3      	ldrb	r3, [r4, r3]
1000d0ae:	079b      	lsls	r3, r3, #30
1000d0b0:	d502      	bpl.n	1000d0b8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d0b2:	68a3      	ldr	r3, [r4, #8]
1000d0b4:	0020      	movs	r0, r4
1000d0b6:	4798      	blx	r3
		}

	}
}
1000d0b8:	bd70      	pop	{r4, r5, r6, pc}
1000d0ba:	46c0      	nop			; (mov r8, r8)
1000d0bc:	10019ae8 	.word	0x10019ae8

1000d0c0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d0c0:	23e1      	movs	r3, #225	; 0xe1
1000d0c2:	025b      	lsls	r3, r3, #9
1000d0c4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d0c6:	2300      	movs	r3, #0
1000d0c8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d0ca:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d0cc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d0ce:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d0d0:	3302      	adds	r3, #2
1000d0d2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d0d4:	2203      	movs	r2, #3
1000d0d6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d0d8:	3201      	adds	r2, #1
1000d0da:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d0dc:	3201      	adds	r2, #1
1000d0de:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d0e0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d0e2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d0e4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d0e6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d0e8:	4770      	bx	lr
1000d0ea:	46c0      	nop			; (mov r8, r8)

1000d0ec <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d0ee:	464f      	mov	r7, r9
1000d0f0:	4646      	mov	r6, r8
1000d0f2:	b4c0      	push	{r6, r7}
1000d0f4:	0005      	movs	r5, r0
1000d0f6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d0f8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d0fa:	2300      	movs	r3, #0
1000d0fc:	6043      	str	r3, [r0, #4]
1000d0fe:	6083      	str	r3, [r0, #8]
1000d100:	60c3      	str	r3, [r0, #12]
1000d102:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d104:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d106:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d108:	2200      	movs	r2, #0
1000d10a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d10c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d10e:	3320      	adds	r3, #32
1000d110:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d112:	3301      	adds	r3, #1
1000d114:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d116:	3301      	adds	r3, #1
1000d118:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d11a:	4b55      	ldr	r3, [pc, #340]	; (1000d270 <uart_init+0x184>)
1000d11c:	4299      	cmp	r1, r3
1000d11e:	d118      	bne.n	1000d152 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d120:	2009      	movs	r0, #9
1000d122:	4c54      	ldr	r4, [pc, #336]	; (1000d274 <uart_init+0x188>)
1000d124:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d126:	200a      	movs	r0, #10
1000d128:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d12a:	2009      	movs	r0, #9
1000d12c:	4c52      	ldr	r4, [pc, #328]	; (1000d278 <uart_init+0x18c>)
1000d12e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d130:	200a      	movs	r0, #10
1000d132:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d134:	4b51      	ldr	r3, [pc, #324]	; (1000d27c <uart_init+0x190>)
1000d136:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d138:	4951      	ldr	r1, [pc, #324]	; (1000d280 <uart_init+0x194>)
1000d13a:	2010      	movs	r0, #16
1000d13c:	4c51      	ldr	r4, [pc, #324]	; (1000d284 <uart_init+0x198>)
1000d13e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d140:	4951      	ldr	r1, [pc, #324]	; (1000d288 <uart_init+0x19c>)
1000d142:	2011      	movs	r0, #17
1000d144:	47a0      	blx	r4
1000d146:	4b51      	ldr	r3, [pc, #324]	; (1000d28c <uart_init+0x1a0>)
1000d148:	2201      	movs	r2, #1
1000d14a:	601a      	str	r2, [r3, #0]
1000d14c:	3201      	adds	r2, #1
1000d14e:	601a      	str	r2, [r3, #0]
1000d150:	e01a      	b.n	1000d188 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d152:	4b4f      	ldr	r3, [pc, #316]	; (1000d290 <uart_init+0x1a4>)
1000d154:	4299      	cmp	r1, r3
1000d156:	d117      	bne.n	1000d188 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d158:	200b      	movs	r0, #11
1000d15a:	4c46      	ldr	r4, [pc, #280]	; (1000d274 <uart_init+0x188>)
1000d15c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d15e:	200c      	movs	r0, #12
1000d160:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d162:	200b      	movs	r0, #11
1000d164:	4c44      	ldr	r4, [pc, #272]	; (1000d278 <uart_init+0x18c>)
1000d166:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d168:	200c      	movs	r0, #12
1000d16a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d16c:	4b43      	ldr	r3, [pc, #268]	; (1000d27c <uart_init+0x190>)
1000d16e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d170:	4948      	ldr	r1, [pc, #288]	; (1000d294 <uart_init+0x1a8>)
1000d172:	2012      	movs	r0, #18
1000d174:	4c43      	ldr	r4, [pc, #268]	; (1000d284 <uart_init+0x198>)
1000d176:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d178:	4947      	ldr	r1, [pc, #284]	; (1000d298 <uart_init+0x1ac>)
1000d17a:	2013      	movs	r0, #19
1000d17c:	47a0      	blx	r4
1000d17e:	4b43      	ldr	r3, [pc, #268]	; (1000d28c <uart_init+0x1a0>)
1000d180:	2204      	movs	r2, #4
1000d182:	601a      	str	r2, [r3, #0]
1000d184:	3204      	adds	r2, #4
1000d186:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d188:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d18a:	2204      	movs	r2, #4
1000d18c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d18e:	2b00      	cmp	r3, #0
1000d190:	d152      	bne.n	1000d238 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d192:	3302      	adds	r3, #2
1000d194:	4698      	mov	r8, r3
1000d196:	e04f      	b.n	1000d238 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d198:	8a31      	ldrh	r1, [r6, #16]
1000d19a:	ce01      	ldmia	r6!, {r0}
1000d19c:	b2c0      	uxtb	r0, r0
1000d19e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d1a0:	3401      	adds	r4, #1
1000d1a2:	b2e4      	uxtb	r4, r4
1000d1a4:	4544      	cmp	r4, r8
1000d1a6:	d3f7      	bcc.n	1000d198 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d1a8:	682b      	ldr	r3, [r5, #0]
1000d1aa:	7d1a      	ldrb	r2, [r3, #20]
1000d1ac:	07d2      	lsls	r2, r2, #31
1000d1ae:	d504      	bpl.n	1000d1ba <uart_init+0xce>
1000d1b0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d1b2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d1b4:	7d1a      	ldrb	r2, [r3, #20]
1000d1b6:	420a      	tst	r2, r1
1000d1b8:	d1fb      	bne.n	1000d1b2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d1ba:	2100      	movs	r1, #0
1000d1bc:	2220      	movs	r2, #32
1000d1be:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d1c0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d1c2:	1e59      	subs	r1, r3, #1
1000d1c4:	418b      	sbcs	r3, r1
1000d1c6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d1c8:	793b      	ldrb	r3, [r7, #4]
1000d1ca:	797a      	ldrb	r2, [r7, #5]
1000d1cc:	4313      	orrs	r3, r2
1000d1ce:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d1d0:	79ba      	ldrb	r2, [r7, #6]
1000d1d2:	2a02      	cmp	r2, #2
1000d1d4:	d00d      	beq.n	1000d1f2 <uart_init+0x106>
1000d1d6:	b2d1      	uxtb	r1, r2
1000d1d8:	2902      	cmp	r1, #2
1000d1da:	d802      	bhi.n	1000d1e2 <uart_init+0xf6>
1000d1dc:	2a01      	cmp	r2, #1
1000d1de:	d005      	beq.n	1000d1ec <uart_init+0x100>
1000d1e0:	e00f      	b.n	1000d202 <uart_init+0x116>
1000d1e2:	2a03      	cmp	r2, #3
1000d1e4:	d008      	beq.n	1000d1f8 <uart_init+0x10c>
1000d1e6:	2a04      	cmp	r2, #4
1000d1e8:	d009      	beq.n	1000d1fe <uart_init+0x112>
1000d1ea:	e00a      	b.n	1000d202 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d1ec:	2202      	movs	r2, #2
1000d1ee:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d1f0:	e007      	b.n	1000d202 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d1f2:	2206      	movs	r2, #6
1000d1f4:	4313      	orrs	r3, r2
			break;
1000d1f6:	e004      	b.n	1000d202 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d1f8:	220a      	movs	r2, #10
1000d1fa:	4313      	orrs	r3, r2
			break;
1000d1fc:	e001      	b.n	1000d202 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d1fe:	220e      	movs	r2, #14
1000d200:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d202:	2220      	movs	r2, #32
1000d204:	6829      	ldr	r1, [r5, #0]
1000d206:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d208:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d20a:	4b24      	ldr	r3, [pc, #144]	; (1000d29c <uart_init+0x1b0>)
1000d20c:	4798      	blx	r3
1000d20e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d210:	0031      	movs	r1, r6
1000d212:	4b23      	ldr	r3, [pc, #140]	; (1000d2a0 <uart_init+0x1b4>)
1000d214:	4798      	blx	r3
1000d216:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d218:	0400      	lsls	r0, r0, #16
1000d21a:	0c00      	lsrs	r0, r0, #16
1000d21c:	4370      	muls	r0, r6
1000d21e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d220:	0931      	lsrs	r1, r6, #4
1000d222:	4288      	cmp	r0, r1
1000d224:	d906      	bls.n	1000d234 <uart_init+0x148>
1000d226:	2300      	movs	r3, #0
		i++;
1000d228:	3301      	adds	r3, #1
1000d22a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d22c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d22e:	4288      	cmp	r0, r1
1000d230:	d8fa      	bhi.n	1000d228 <uart_init+0x13c>
1000d232:	e007      	b.n	1000d244 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d234:	2300      	movs	r3, #0
1000d236:	e005      	b.n	1000d244 <uart_init+0x158>
1000d238:	003e      	movs	r6, r7
1000d23a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d23c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d23e:	4b19      	ldr	r3, [pc, #100]	; (1000d2a4 <uart_init+0x1b8>)
1000d240:	4699      	mov	r9, r3
1000d242:	e7a9      	b.n	1000d198 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d244:	2100      	movs	r1, #0
1000d246:	2028      	movs	r0, #40	; 0x28
1000d248:	682c      	ldr	r4, [r5, #0]
1000d24a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d24c:	3301      	adds	r3, #1
1000d24e:	071b      	lsls	r3, r3, #28
1000d250:	0f5b      	lsrs	r3, r3, #29
1000d252:	00d2      	lsls	r2, r2, #3
1000d254:	4313      	orrs	r3, r2
1000d256:	b29b      	uxth	r3, r3
1000d258:	682a      	ldr	r2, [r5, #0]
1000d25a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d25c:	682b      	ldr	r3, [r5, #0]
1000d25e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d260:	682b      	ldr	r3, [r5, #0]
1000d262:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d264:	2000      	movs	r0, #0
1000d266:	bc0c      	pop	{r2, r3}
1000d268:	4690      	mov	r8, r2
1000d26a:	4699      	mov	r9, r3
1000d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d26e:	46c0      	nop			; (mov r8, r8)
1000d270:	40004000 	.word	0x40004000
1000d274:	1000ca21 	.word	0x1000ca21
1000d278:	1000c359 	.word	0x1000c359
1000d27c:	10019ae8 	.word	0x10019ae8
1000d280:	1000ce99 	.word	0x1000ce99
1000d284:	1000ce89 	.word	0x1000ce89
1000d288:	1000cf21 	.word	0x1000cf21
1000d28c:	e000e100 	.word	0xe000e100
1000d290:	40005000 	.word	0x40005000
1000d294:	1000cfad 	.word	0x1000cfad
1000d298:	1000d035 	.word	0x1000d035
1000d29c:	1000c34d 	.word	0x1000c34d
1000d2a0:	10012c59 	.word	0x10012c59
1000d2a4:	1000bfa9 	.word	0x1000bfa9

1000d2a8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d2a8:	6802      	ldr	r2, [r0, #0]
1000d2aa:	2001      	movs	r0, #1
1000d2ac:	7913      	ldrb	r3, [r2, #4]
1000d2ae:	4203      	tst	r3, r0
1000d2b0:	d0fc      	beq.n	1000d2ac <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d2b2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d2b4:	2000      	movs	r0, #0
1000d2b6:	4770      	bx	lr

1000d2b8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d2b8:	6802      	ldr	r2, [r0, #0]
1000d2ba:	2001      	movs	r0, #1
1000d2bc:	7d13      	ldrb	r3, [r2, #20]
1000d2be:	4203      	tst	r3, r0
1000d2c0:	d0fc      	beq.n	1000d2bc <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d2c2:	7c13      	ldrb	r3, [r2, #16]
1000d2c4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d2c6:	2000      	movs	r0, #0
1000d2c8:	4770      	bx	lr
1000d2ca:	46c0      	nop			; (mov r8, r8)

1000d2cc <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d2cc:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d2ce:	2a00      	cmp	r2, #0
1000d2d0:	d00d      	beq.n	1000d2ee <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d2d2:	330b      	adds	r3, #11
1000d2d4:	5cc3      	ldrb	r3, [r0, r3]
1000d2d6:	b2db      	uxtb	r3, r3
1000d2d8:	2b05      	cmp	r3, #5
1000d2da:	d008      	beq.n	1000d2ee <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d2dc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d2de:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d2e0:	2205      	movs	r2, #5
1000d2e2:	2322      	movs	r3, #34	; 0x22
1000d2e4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d2e6:	6803      	ldr	r3, [r0, #0]
1000d2e8:	3a04      	subs	r2, #4
1000d2ea:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d2ec:	2300      	movs	r3, #0
}
1000d2ee:	0018      	movs	r0, r3
1000d2f0:	4770      	bx	lr
1000d2f2:	46c0      	nop			; (mov r8, r8)

1000d2f4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d2f4:	0093      	lsls	r3, r2, #2
1000d2f6:	18c3      	adds	r3, r0, r3
1000d2f8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d2fa:	2120      	movs	r1, #32
1000d2fc:	2301      	movs	r3, #1
1000d2fe:	4093      	lsls	r3, r2
1000d300:	5c42      	ldrb	r2, [r0, r1]
1000d302:	4313      	orrs	r3, r2
1000d304:	5443      	strb	r3, [r0, r1]
}
1000d306:	4770      	bx	lr

1000d308 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d308:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d30a:	2221      	movs	r2, #33	; 0x21
1000d30c:	2301      	movs	r3, #1
1000d30e:	408b      	lsls	r3, r1
1000d310:	5c84      	ldrb	r4, [r0, r2]
1000d312:	4323      	orrs	r3, r4
1000d314:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d316:	2901      	cmp	r1, #1
1000d318:	d104      	bne.n	1000d324 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d31a:	6802      	ldr	r2, [r0, #0]
1000d31c:	7a11      	ldrb	r1, [r2, #8]
1000d31e:	2320      	movs	r3, #32
1000d320:	430b      	orrs	r3, r1
1000d322:	7213      	strb	r3, [r2, #8]
	}
}
1000d324:	bd10      	pop	{r4, pc}
1000d326:	46c0      	nop			; (mov r8, r8)

1000d328 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d328:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d32a:	2201      	movs	r2, #1
1000d32c:	408a      	lsls	r2, r1
1000d32e:	2421      	movs	r4, #33	; 0x21
1000d330:	5d03      	ldrb	r3, [r0, r4]
1000d332:	4393      	bics	r3, r2
1000d334:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d336:	2901      	cmp	r1, #1
1000d338:	d104      	bne.n	1000d344 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d33a:	6802      	ldr	r2, [r0, #0]
1000d33c:	7a13      	ldrb	r3, [r2, #8]
1000d33e:	311f      	adds	r1, #31
1000d340:	438b      	bics	r3, r1
1000d342:	7213      	strb	r3, [r2, #8]
	}

}
1000d344:	bd10      	pop	{r4, pc}
1000d346:	46c0      	nop			; (mov r8, r8)

1000d348 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d348:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d34a:	4647      	mov	r7, r8
1000d34c:	b480      	push	{r7}
1000d34e:	000c      	movs	r4, r1
1000d350:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d352:	2800      	cmp	r0, #0
1000d354:	d10d      	bne.n	1000d372 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d356:	2a00      	cmp	r2, #0
1000d358:	dd0e      	ble.n	1000d378 <_read+0x30>
1000d35a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d35c:	4e08      	ldr	r6, [pc, #32]	; (1000d380 <_read+0x38>)
1000d35e:	4d09      	ldr	r5, [pc, #36]	; (1000d384 <_read+0x3c>)
1000d360:	6830      	ldr	r0, [r6, #0]
1000d362:	0021      	movs	r1, r4
1000d364:	682b      	ldr	r3, [r5, #0]
1000d366:	4798      	blx	r3
		ptr++;
1000d368:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d36a:	42a7      	cmp	r7, r4
1000d36c:	d1f8      	bne.n	1000d360 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d36e:	4640      	mov	r0, r8
1000d370:	e003      	b.n	1000d37a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d372:	2001      	movs	r0, #1
1000d374:	4240      	negs	r0, r0
1000d376:	e000      	b.n	1000d37a <_read+0x32>
	}

	for (; len > 0; --len) {
1000d378:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d37a:	bc04      	pop	{r2}
1000d37c:	4690      	mov	r8, r2
1000d37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d380:	10019af8 	.word	0x10019af8
1000d384:	10019af0 	.word	0x10019af0

1000d388 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d388:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d38a:	4647      	mov	r7, r8
1000d38c:	b480      	push	{r7}
1000d38e:	000e      	movs	r6, r1
1000d390:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d392:	3801      	subs	r0, #1
1000d394:	2802      	cmp	r0, #2
1000d396:	d811      	bhi.n	1000d3bc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d398:	2a00      	cmp	r2, #0
1000d39a:	d012      	beq.n	1000d3c2 <_write+0x3a>
1000d39c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d39e:	4b0c      	ldr	r3, [pc, #48]	; (1000d3d0 <_write+0x48>)
1000d3a0:	4698      	mov	r8, r3
1000d3a2:	4f0c      	ldr	r7, [pc, #48]	; (1000d3d4 <_write+0x4c>)
1000d3a4:	4643      	mov	r3, r8
1000d3a6:	6818      	ldr	r0, [r3, #0]
1000d3a8:	5d31      	ldrb	r1, [r6, r4]
1000d3aa:	683b      	ldr	r3, [r7, #0]
1000d3ac:	4798      	blx	r3
1000d3ae:	2800      	cmp	r0, #0
1000d3b0:	db09      	blt.n	1000d3c6 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d3b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d3b4:	42a5      	cmp	r5, r4
1000d3b6:	d1f5      	bne.n	1000d3a4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d3b8:	0020      	movs	r0, r4
1000d3ba:	e006      	b.n	1000d3ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d3bc:	2001      	movs	r0, #1
1000d3be:	4240      	negs	r0, r0
1000d3c0:	e003      	b.n	1000d3ca <_write+0x42>
	}

	for (; len != 0; --len) {
1000d3c2:	2000      	movs	r0, #0
1000d3c4:	e001      	b.n	1000d3ca <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d3c6:	2001      	movs	r0, #1
1000d3c8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d3ca:	bc04      	pop	{r2}
1000d3cc:	4690      	mov	r8, r2
1000d3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3d0:	10019af8 	.word	0x10019af8
1000d3d4:	10019af4 	.word	0x10019af4

1000d3d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d3d8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d3da:	4a06      	ldr	r2, [pc, #24]	; (1000d3f4 <_sbrk+0x1c>)
1000d3dc:	6812      	ldr	r2, [r2, #0]
1000d3de:	2a00      	cmp	r2, #0
1000d3e0:	d102      	bne.n	1000d3e8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d3e2:	4905      	ldr	r1, [pc, #20]	; (1000d3f8 <_sbrk+0x20>)
1000d3e4:	4a03      	ldr	r2, [pc, #12]	; (1000d3f4 <_sbrk+0x1c>)
1000d3e6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d3e8:	4a02      	ldr	r2, [pc, #8]	; (1000d3f4 <_sbrk+0x1c>)
1000d3ea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d3ec:	18c3      	adds	r3, r0, r3
1000d3ee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d3f0:	4770      	bx	lr
1000d3f2:	46c0      	nop			; (mov r8, r8)
1000d3f4:	10017d94 	.word	0x10017d94
1000d3f8:	1001c400 	.word	0x1001c400

1000d3fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d3fc:	2001      	movs	r0, #1
1000d3fe:	4240      	negs	r0, r0
1000d400:	4770      	bx	lr
1000d402:	46c0      	nop			; (mov r8, r8)

1000d404 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d404:	2380      	movs	r3, #128	; 0x80
1000d406:	019b      	lsls	r3, r3, #6
1000d408:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d40a:	2000      	movs	r0, #0
1000d40c:	4770      	bx	lr
1000d40e:	46c0      	nop			; (mov r8, r8)

1000d410 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d410:	2001      	movs	r0, #1
1000d412:	4770      	bx	lr

1000d414 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d414:	2000      	movs	r0, #0
1000d416:	4770      	bx	lr

1000d418 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d418:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d41a:	4804      	ldr	r0, [pc, #16]	; (1000d42c <ble_undefined_event_handler+0x14>)
1000d41c:	4b04      	ldr	r3, [pc, #16]	; (1000d430 <ble_undefined_event_handler+0x18>)
1000d41e:	4798      	blx	r3
1000d420:	4804      	ldr	r0, [pc, #16]	; (1000d434 <ble_undefined_event_handler+0x1c>)
1000d422:	4b05      	ldr	r3, [pc, #20]	; (1000d438 <ble_undefined_event_handler+0x20>)
1000d424:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d426:	2000      	movs	r0, #0
1000d428:	bd10      	pop	{r4, pc}
1000d42a:	46c0      	nop			; (mov r8, r8)
1000d42c:	10015df4 	.word	0x10015df4
1000d430:	10014c49 	.word	0x10014c49
1000d434:	10016f5c 	.word	0x10016f5c
1000d438:	10014b29 	.word	0x10014b29

1000d43c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d43c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d43e:	7800      	ldrb	r0, [r0, #0]
1000d440:	2800      	cmp	r0, #0
1000d442:	d006      	beq.n	1000d452 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d444:	4803      	ldr	r0, [pc, #12]	; (1000d454 <ble_scan_report_handler+0x18>)
1000d446:	4b04      	ldr	r3, [pc, #16]	; (1000d458 <ble_scan_report_handler+0x1c>)
1000d448:	4798      	blx	r3
1000d44a:	4804      	ldr	r0, [pc, #16]	; (1000d45c <ble_scan_report_handler+0x20>)
1000d44c:	4b04      	ldr	r3, [pc, #16]	; (1000d460 <ble_scan_report_handler+0x24>)
1000d44e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d450:	20e2      	movs	r0, #226	; 0xe2
}
1000d452:	bd10      	pop	{r4, pc}
1000d454:	10015df4 	.word	0x10015df4
1000d458:	10014c49 	.word	0x10014c49
1000d45c:	10016f78 	.word	0x10016f78
1000d460:	10014b29 	.word	0x10014b29

1000d464 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d464:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d466:	7800      	ldrb	r0, [r0, #0]
1000d468:	2800      	cmp	r0, #0
1000d46a:	d006      	beq.n	1000d47a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d46c:	4803      	ldr	r0, [pc, #12]	; (1000d47c <ble_adv_report_handler+0x18>)
1000d46e:	4b04      	ldr	r3, [pc, #16]	; (1000d480 <ble_adv_report_handler+0x1c>)
1000d470:	4798      	blx	r3
1000d472:	4804      	ldr	r0, [pc, #16]	; (1000d484 <ble_adv_report_handler+0x20>)
1000d474:	4b04      	ldr	r3, [pc, #16]	; (1000d488 <ble_adv_report_handler+0x24>)
1000d476:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d478:	20e2      	movs	r0, #226	; 0xe2
}
1000d47a:	bd10      	pop	{r4, pc}
1000d47c:	10015df4 	.word	0x10015df4
1000d480:	10014c49 	.word	0x10014c49
1000d484:	10016f8c 	.word	0x10016f8c
1000d488:	10014b29 	.word	0x10014b29

1000d48c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d48c:	b510      	push	{r4, lr}
1000d48e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d490:	4804      	ldr	r0, [pc, #16]	; (1000d4a4 <ble_mtu_changed_indication_handler+0x18>)
1000d492:	4b05      	ldr	r3, [pc, #20]	; (1000d4a8 <ble_mtu_changed_indication_handler+0x1c>)
1000d494:	4798      	blx	r3
1000d496:	8862      	ldrh	r2, [r4, #2]
1000d498:	8821      	ldrh	r1, [r4, #0]
1000d49a:	4804      	ldr	r0, [pc, #16]	; (1000d4ac <ble_mtu_changed_indication_handler+0x20>)
1000d49c:	4b04      	ldr	r3, [pc, #16]	; (1000d4b0 <ble_mtu_changed_indication_handler+0x24>)
1000d49e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d4a0:	2000      	movs	r0, #0
1000d4a2:	bd10      	pop	{r4, pc}
1000d4a4:	10015df4 	.word	0x10015df4
1000d4a8:	10014c49 	.word	0x10014c49
1000d4ac:	10016fa0 	.word	0x10016fa0
1000d4b0:	10014b29 	.word	0x10014b29

1000d4b4 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d4b4:	b570      	push	{r4, r5, r6, lr}
1000d4b6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d4b8:	78c5      	ldrb	r5, [r0, #3]
1000d4ba:	2d00      	cmp	r5, #0
1000d4bc:	d108      	bne.n	1000d4d0 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d4be:	480a      	ldr	r0, [pc, #40]	; (1000d4e8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d4c0:	4b0a      	ldr	r3, [pc, #40]	; (1000d4ec <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d4c2:	4798      	blx	r3
1000d4c4:	78a2      	ldrb	r2, [r4, #2]
1000d4c6:	8821      	ldrh	r1, [r4, #0]
1000d4c8:	4809      	ldr	r0, [pc, #36]	; (1000d4f0 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d4ca:	4b0a      	ldr	r3, [pc, #40]	; (1000d4f4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d4cc:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d4ce:	e008      	b.n	1000d4e2 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d4d0:	4805      	ldr	r0, [pc, #20]	; (1000d4e8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d4d2:	4b06      	ldr	r3, [pc, #24]	; (1000d4ec <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d4d4:	4798      	blx	r3
1000d4d6:	78a2      	ldrb	r2, [r4, #2]
1000d4d8:	8821      	ldrh	r1, [r4, #0]
1000d4da:	4807      	ldr	r0, [pc, #28]	; (1000d4f8 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d4dc:	4b05      	ldr	r3, [pc, #20]	; (1000d4f4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d4de:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d4e0:	25e2      	movs	r5, #226	; 0xe2
}
1000d4e2:	0028      	movs	r0, r5
1000d4e4:	bd70      	pop	{r4, r5, r6, pc}
1000d4e6:	46c0      	nop			; (mov r8, r8)
1000d4e8:	10015df4 	.word	0x10015df4
1000d4ec:	10014c49 	.word	0x10014c49
1000d4f0:	10016fd8 	.word	0x10016fd8
1000d4f4:	10014b29 	.word	0x10014b29
1000d4f8:	10017008 	.word	0x10017008

1000d4fc <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d4fc:	b570      	push	{r4, r5, r6, lr}
1000d4fe:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d500:	78c5      	ldrb	r5, [r0, #3]
1000d502:	2d00      	cmp	r5, #0
1000d504:	d108      	bne.n	1000d518 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d506:	480a      	ldr	r0, [pc, #40]	; (1000d530 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d508:	4b0a      	ldr	r3, [pc, #40]	; (1000d534 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d50a:	4798      	blx	r3
1000d50c:	78a2      	ldrb	r2, [r4, #2]
1000d50e:	8821      	ldrh	r1, [r4, #0]
1000d510:	4809      	ldr	r0, [pc, #36]	; (1000d538 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d512:	4b0a      	ldr	r3, [pc, #40]	; (1000d53c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d514:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d516:	e008      	b.n	1000d52a <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d518:	4805      	ldr	r0, [pc, #20]	; (1000d530 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d51a:	4b06      	ldr	r3, [pc, #24]	; (1000d534 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d51c:	4798      	blx	r3
1000d51e:	78a2      	ldrb	r2, [r4, #2]
1000d520:	8821      	ldrh	r1, [r4, #0]
1000d522:	4807      	ldr	r0, [pc, #28]	; (1000d540 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d524:	4b05      	ldr	r3, [pc, #20]	; (1000d53c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d526:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d528:	25e2      	movs	r5, #226	; 0xe2
}
1000d52a:	0028      	movs	r0, r5
1000d52c:	bd70      	pop	{r4, r5, r6, pc}
1000d52e:	46c0      	nop			; (mov r8, r8)
1000d530:	10015df4 	.word	0x10015df4
1000d534:	10014c49 	.word	0x10014c49
1000d538:	10017040 	.word	0x10017040
1000d53c:	10014b29 	.word	0x10014b29
1000d540:	1001707c 	.word	0x1001707c

1000d544 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d546:	0006      	movs	r6, r0
1000d548:	4c1d      	ldr	r4, [pc, #116]	; (1000d5c0 <ble_disconnected_state_handler+0x7c>)
1000d54a:	239b      	movs	r3, #155	; 0x9b
1000d54c:	009b      	lsls	r3, r3, #2
1000d54e:	18e7      	adds	r7, r4, r3
1000d550:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d552:	0023      	movs	r3, r4
1000d554:	3b56      	subs	r3, #86	; 0x56
1000d556:	881a      	ldrh	r2, [r3, #0]
1000d558:	8833      	ldrh	r3, [r6, #0]
1000d55a:	429a      	cmp	r2, r3
1000d55c:	d122      	bne.n	1000d5a4 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d55e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d560:	2b05      	cmp	r3, #5
1000d562:	d001      	beq.n	1000d568 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d564:	2b08      	cmp	r3, #8
1000d566:	d102      	bne.n	1000d56e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d568:	2301      	movs	r3, #1
1000d56a:	702b      	strb	r3, [r5, #0]
1000d56c:	e01a      	b.n	1000d5a4 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d56e:	2b07      	cmp	r3, #7
1000d570:	d80f      	bhi.n	1000d592 <ble_disconnected_state_handler+0x4e>
1000d572:	009b      	lsls	r3, r3, #2
1000d574:	4a13      	ldr	r2, [pc, #76]	; (1000d5c4 <ble_disconnected_state_handler+0x80>)
1000d576:	58d3      	ldr	r3, [r2, r3]
1000d578:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d57a:	2300      	movs	r3, #0
1000d57c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d57e:	4b12      	ldr	r3, [pc, #72]	; (1000d5c8 <ble_disconnected_state_handler+0x84>)
1000d580:	781b      	ldrb	r3, [r3, #0]
1000d582:	2b00      	cmp	r3, #0
1000d584:	d00e      	beq.n	1000d5a4 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d586:	4a10      	ldr	r2, [pc, #64]	; (1000d5c8 <ble_disconnected_state_handler+0x84>)
1000d588:	7813      	ldrb	r3, [r2, #0]
1000d58a:	3b01      	subs	r3, #1
1000d58c:	b2db      	uxtb	r3, r3
1000d58e:	7013      	strb	r3, [r2, #0]
1000d590:	e008      	b.n	1000d5a4 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d592:	480e      	ldr	r0, [pc, #56]	; (1000d5cc <ble_disconnected_state_handler+0x88>)
1000d594:	4b0e      	ldr	r3, [pc, #56]	; (1000d5d0 <ble_disconnected_state_handler+0x8c>)
1000d596:	4798      	blx	r3
1000d598:	7829      	ldrb	r1, [r5, #0]
1000d59a:	480e      	ldr	r0, [pc, #56]	; (1000d5d4 <ble_disconnected_state_handler+0x90>)
1000d59c:	4b0e      	ldr	r3, [pc, #56]	; (1000d5d8 <ble_disconnected_state_handler+0x94>)
1000d59e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d5a0:	2300      	movs	r3, #0
1000d5a2:	702b      	strb	r3, [r5, #0]
1000d5a4:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5a6:	42bc      	cmp	r4, r7
1000d5a8:	d1d2      	bne.n	1000d550 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d5aa:	4808      	ldr	r0, [pc, #32]	; (1000d5cc <ble_disconnected_state_handler+0x88>)
1000d5ac:	4b08      	ldr	r3, [pc, #32]	; (1000d5d0 <ble_disconnected_state_handler+0x8c>)
1000d5ae:	4798      	blx	r3
1000d5b0:	8832      	ldrh	r2, [r6, #0]
1000d5b2:	78b1      	ldrb	r1, [r6, #2]
1000d5b4:	4809      	ldr	r0, [pc, #36]	; (1000d5dc <ble_disconnected_state_handler+0x98>)
1000d5b6:	4b08      	ldr	r3, [pc, #32]	; (1000d5d8 <ble_disconnected_state_handler+0x94>)
1000d5b8:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d5ba:	2000      	movs	r0, #0
1000d5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5be:	46c0      	nop			; (mov r8, r8)
1000d5c0:	10019b72 	.word	0x10019b72
1000d5c4:	10016df8 	.word	0x10016df8
1000d5c8:	10019d80 	.word	0x10019d80
1000d5cc:	10015df4 	.word	0x10015df4
1000d5d0:	10014c49 	.word	0x10014c49
1000d5d4:	100170b8 	.word	0x100170b8
1000d5d8:	10014b29 	.word	0x10014b29
1000d5dc:	100170d0 	.word	0x100170d0

1000d5e0 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d5e0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d5e2:	4804      	ldr	r0, [pc, #16]	; (1000d5f4 <ble_conn_param_update+0x14>)
1000d5e4:	4b04      	ldr	r3, [pc, #16]	; (1000d5f8 <ble_conn_param_update+0x18>)
1000d5e6:	4798      	blx	r3
1000d5e8:	4804      	ldr	r0, [pc, #16]	; (1000d5fc <ble_conn_param_update+0x1c>)
1000d5ea:	4b05      	ldr	r3, [pc, #20]	; (1000d600 <ble_conn_param_update+0x20>)
1000d5ec:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d5ee:	2000      	movs	r0, #0
1000d5f0:	bd10      	pop	{r4, pc}
1000d5f2:	46c0      	nop			; (mov r8, r8)
1000d5f4:	10015df4 	.word	0x10015df4
1000d5f8:	10014c49 	.word	0x10014c49
1000d5fc:	10017100 	.word	0x10017100
1000d600:	10014b29 	.word	0x10014b29

1000d604 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d606:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d608:	8801      	ldrh	r1, [r0, #0]
1000d60a:	4b28      	ldr	r3, [pc, #160]	; (1000d6ac <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d60c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d60e:	891a      	ldrh	r2, [r3, #8]
1000d610:	428a      	cmp	r2, r1
1000d612:	d104      	bne.n	1000d61e <ble_encryption_status_change_handler+0x1a>
1000d614:	001a      	movs	r2, r3
1000d616:	325e      	adds	r2, #94	; 0x5e
1000d618:	7812      	ldrb	r2, [r2, #0]
1000d61a:	2a06      	cmp	r2, #6
1000d61c:	d02e      	beq.n	1000d67c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d61e:	3401      	adds	r4, #1
1000d620:	b2e4      	uxtb	r4, r4
1000d622:	337c      	adds	r3, #124	; 0x7c
1000d624:	2c05      	cmp	r4, #5
1000d626:	d1f2      	bne.n	1000d60e <ble_encryption_status_change_handler+0xa>
1000d628:	e039      	b.n	1000d69e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d62a:	4920      	ldr	r1, [pc, #128]	; (1000d6ac <ble_encryption_status_change_handler+0xa8>)
1000d62c:	0163      	lsls	r3, r4, #5
1000d62e:	1b1a      	subs	r2, r3, r4
1000d630:	0092      	lsls	r2, r2, #2
1000d632:	188a      	adds	r2, r1, r2
1000d634:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d636:	0014      	movs	r4, r2
1000d638:	345e      	adds	r4, #94	; 0x5e
1000d63a:	2307      	movs	r3, #7
1000d63c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d63e:	481c      	ldr	r0, [pc, #112]	; (1000d6b0 <ble_encryption_status_change_handler+0xac>)
1000d640:	4b1c      	ldr	r3, [pc, #112]	; (1000d6b4 <ble_encryption_status_change_handler+0xb0>)
1000d642:	4798      	blx	r3
1000d644:	481c      	ldr	r0, [pc, #112]	; (1000d6b8 <ble_encryption_status_change_handler+0xb4>)
1000d646:	4b1d      	ldr	r3, [pc, #116]	; (1000d6bc <ble_encryption_status_change_handler+0xb8>)
1000d648:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d64a:	25e2      	movs	r5, #226	; 0xe2
1000d64c:	e02b      	b.n	1000d6a6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d64e:	4818      	ldr	r0, [pc, #96]	; (1000d6b0 <ble_encryption_status_change_handler+0xac>)
1000d650:	4b18      	ldr	r3, [pc, #96]	; (1000d6b4 <ble_encryption_status_change_handler+0xb0>)
1000d652:	4798      	blx	r3
1000d654:	481a      	ldr	r0, [pc, #104]	; (1000d6c0 <ble_encryption_status_change_handler+0xbc>)
1000d656:	4b19      	ldr	r3, [pc, #100]	; (1000d6bc <ble_encryption_status_change_handler+0xb8>)
1000d658:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d65a:	4914      	ldr	r1, [pc, #80]	; (1000d6ac <ble_encryption_status_change_handler+0xa8>)
1000d65c:	0163      	lsls	r3, r4, #5
1000d65e:	1b1a      	subs	r2, r3, r4
1000d660:	0092      	lsls	r2, r2, #2
1000d662:	188a      	adds	r2, r1, r2
1000d664:	0010      	movs	r0, r2
1000d666:	305e      	adds	r0, #94	; 0x5e
1000d668:	2708      	movs	r7, #8
1000d66a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d66c:	78f0      	ldrb	r0, [r6, #3]
1000d66e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d670:	78b2      	ldrb	r2, [r6, #2]
1000d672:	1b1c      	subs	r4, r3, r4
1000d674:	00a4      	lsls	r4, r4, #2
1000d676:	190c      	adds	r4, r1, r4
1000d678:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d67a:	e014      	b.n	1000d6a6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d67c:	78b5      	ldrb	r5, [r6, #2]
1000d67e:	2d00      	cmp	r5, #0
1000d680:	d0e5      	beq.n	1000d64e <ble_encryption_status_change_handler+0x4a>
1000d682:	e7d2      	b.n	1000d62a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d684:	4e0a      	ldr	r6, [pc, #40]	; (1000d6b0 <ble_encryption_status_change_handler+0xac>)
1000d686:	0030      	movs	r0, r6
1000d688:	4d0a      	ldr	r5, [pc, #40]	; (1000d6b4 <ble_encryption_status_change_handler+0xb0>)
1000d68a:	47a8      	blx	r5
1000d68c:	480c      	ldr	r0, [pc, #48]	; (1000d6c0 <ble_encryption_status_change_handler+0xbc>)
1000d68e:	4c0b      	ldr	r4, [pc, #44]	; (1000d6bc <ble_encryption_status_change_handler+0xb8>)
1000d690:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d692:	0030      	movs	r0, r6
1000d694:	47a8      	blx	r5
1000d696:	480b      	ldr	r0, [pc, #44]	; (1000d6c4 <ble_encryption_status_change_handler+0xc0>)
1000d698:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d69a:	25e2      	movs	r5, #226	; 0xe2
1000d69c:	e003      	b.n	1000d6a6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d69e:	78b5      	ldrb	r5, [r6, #2]
1000d6a0:	2d00      	cmp	r5, #0
1000d6a2:	d1c2      	bne.n	1000d62a <ble_encryption_status_change_handler+0x26>
1000d6a4:	e7ee      	b.n	1000d684 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d6a6:	0028      	movs	r0, r5
1000d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6aa:	46c0      	nop			; (mov r8, r8)
1000d6ac:	10019b14 	.word	0x10019b14
1000d6b0:	10015df4 	.word	0x10015df4
1000d6b4:	10014c49 	.word	0x10014c49
1000d6b8:	1001711c 	.word	0x1001711c
1000d6bc:	10014b29 	.word	0x10014b29
1000d6c0:	10017130 	.word	0x10017130
1000d6c4:	10017154 	.word	0x10017154

1000d6c8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d6c8:	b530      	push	{r4, r5, lr}
1000d6ca:	b085      	sub	sp, #20
1000d6cc:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d6ce:	4b1f      	ldr	r3, [pc, #124]	; (1000d74c <ble_scan_info_handler+0x84>)
1000d6d0:	781b      	ldrb	r3, [r3, #0]
1000d6d2:	b2db      	uxtb	r3, r3
1000d6d4:	2b13      	cmp	r3, #19
1000d6d6:	d824      	bhi.n	1000d722 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d6d8:	4d1c      	ldr	r5, [pc, #112]	; (1000d74c <ble_scan_info_handler+0x84>)
1000d6da:	782b      	ldrb	r3, [r5, #0]
1000d6dc:	b2db      	uxtb	r3, r3
1000d6de:	0098      	lsls	r0, r3, #2
1000d6e0:	18c0      	adds	r0, r0, r3
1000d6e2:	00c0      	lsls	r0, r0, #3
1000d6e4:	18c3      	adds	r3, r0, r3
1000d6e6:	481a      	ldr	r0, [pc, #104]	; (1000d750 <ble_scan_info_handler+0x88>)
1000d6e8:	1818      	adds	r0, r3, r0
1000d6ea:	2229      	movs	r2, #41	; 0x29
1000d6ec:	0021      	movs	r1, r4
1000d6ee:	4b19      	ldr	r3, [pc, #100]	; (1000d754 <ble_scan_info_handler+0x8c>)
1000d6f0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d6f2:	4819      	ldr	r0, [pc, #100]	; (1000d758 <ble_scan_info_handler+0x90>)
1000d6f4:	4b19      	ldr	r3, [pc, #100]	; (1000d75c <ble_scan_info_handler+0x94>)
1000d6f6:	4798      	blx	r3
1000d6f8:	7829      	ldrb	r1, [r5, #0]
1000d6fa:	b2c9      	uxtb	r1, r1
1000d6fc:	79a3      	ldrb	r3, [r4, #6]
1000d6fe:	79e2      	ldrb	r2, [r4, #7]
1000d700:	78a0      	ldrb	r0, [r4, #2]
1000d702:	9003      	str	r0, [sp, #12]
1000d704:	78e0      	ldrb	r0, [r4, #3]
1000d706:	9002      	str	r0, [sp, #8]
1000d708:	7920      	ldrb	r0, [r4, #4]
1000d70a:	9001      	str	r0, [sp, #4]
1000d70c:	7960      	ldrb	r0, [r4, #5]
1000d70e:	9000      	str	r0, [sp, #0]
1000d710:	4813      	ldr	r0, [pc, #76]	; (1000d760 <ble_scan_info_handler+0x98>)
1000d712:	4c14      	ldr	r4, [pc, #80]	; (1000d764 <ble_scan_info_handler+0x9c>)
1000d714:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d716:	782b      	ldrb	r3, [r5, #0]
1000d718:	3301      	adds	r3, #1
1000d71a:	b2db      	uxtb	r3, r3
1000d71c:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000d71e:	2300      	movs	r3, #0
1000d720:	e011      	b.n	1000d746 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d722:	480d      	ldr	r0, [pc, #52]	; (1000d758 <ble_scan_info_handler+0x90>)
1000d724:	4b0d      	ldr	r3, [pc, #52]	; (1000d75c <ble_scan_info_handler+0x94>)
1000d726:	4798      	blx	r3
1000d728:	480f      	ldr	r0, [pc, #60]	; (1000d768 <ble_scan_info_handler+0xa0>)
1000d72a:	4b0e      	ldr	r3, [pc, #56]	; (1000d764 <ble_scan_info_handler+0x9c>)
1000d72c:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d72e:	4b0f      	ldr	r3, [pc, #60]	; (1000d76c <ble_scan_info_handler+0xa4>)
1000d730:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d732:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d734:	2800      	cmp	r0, #0
1000d736:	d006      	beq.n	1000d746 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000d738:	4807      	ldr	r0, [pc, #28]	; (1000d758 <ble_scan_info_handler+0x90>)
1000d73a:	4b08      	ldr	r3, [pc, #32]	; (1000d75c <ble_scan_info_handler+0x94>)
1000d73c:	4798      	blx	r3
1000d73e:	480c      	ldr	r0, [pc, #48]	; (1000d770 <ble_scan_info_handler+0xa8>)
1000d740:	4b08      	ldr	r3, [pc, #32]	; (1000d764 <ble_scan_info_handler+0x9c>)
1000d742:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d744:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d746:	0018      	movs	r0, r3
1000d748:	b005      	add	sp, #20
1000d74a:	bd30      	pop	{r4, r5, pc}
1000d74c:	1001867c 	.word	0x1001867c
1000d750:	10019df8 	.word	0x10019df8
1000d754:	100149cf 	.word	0x100149cf
1000d758:	10015df4 	.word	0x10015df4
1000d75c:	10014c49 	.word	0x10014c49
1000d760:	1001717c 	.word	0x1001717c
1000d764:	10014b29 	.word	0x10014b29
1000d768:	100171b8 	.word	0x100171b8
1000d76c:	1001056d 	.word	0x1001056d
1000d770:	100171f0 	.word	0x100171f0

1000d774 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d774:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d776:	465f      	mov	r7, fp
1000d778:	4656      	mov	r6, sl
1000d77a:	464d      	mov	r5, r9
1000d77c:	4644      	mov	r4, r8
1000d77e:	b4f0      	push	{r4, r5, r6, r7}
1000d780:	b083      	sub	sp, #12
1000d782:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d784:	8841      	ldrh	r1, [r0, #2]
1000d786:	4b59      	ldr	r3, [pc, #356]	; (1000d8ec <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d788:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d78a:	891a      	ldrh	r2, [r3, #8]
1000d78c:	428a      	cmp	r2, r1
1000d78e:	d105      	bne.n	1000d79c <ble_pair_done_handler+0x28>
1000d790:	001a      	movs	r2, r3
1000d792:	325e      	adds	r2, #94	; 0x5e
1000d794:	7812      	ldrb	r2, [r2, #0]
1000d796:	2a03      	cmp	r2, #3
1000d798:	d100      	bne.n	1000d79c <ble_pair_done_handler+0x28>
1000d79a:	e09a      	b.n	1000d8d2 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d79c:	3401      	adds	r4, #1
1000d79e:	b2e4      	uxtb	r4, r4
1000d7a0:	337c      	adds	r3, #124	; 0x7c
1000d7a2:	2c05      	cmp	r4, #5
1000d7a4:	d1f1      	bne.n	1000d78a <ble_pair_done_handler+0x16>
1000d7a6:	e057      	b.n	1000d858 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d7a8:	7821      	ldrb	r1, [r4, #0]
1000d7aa:	0030      	movs	r0, r6
1000d7ac:	47b8      	blx	r7
1000d7ae:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000d7b0:	454c      	cmp	r4, r9
1000d7b2:	d1f9      	bne.n	1000d7a8 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000d7b4:	484e      	ldr	r0, [pc, #312]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d7b6:	4b4f      	ldr	r3, [pc, #316]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d7b8:	4798      	blx	r3
1000d7ba:	484f      	ldr	r0, [pc, #316]	; (1000d8f8 <ble_pair_done_handler+0x184>)
1000d7bc:	4b4f      	ldr	r3, [pc, #316]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d7be:	4798      	blx	r3
1000d7c0:	002e      	movs	r6, r5
1000d7c2:	3622      	adds	r6, #34	; 0x22
1000d7c4:	002c      	movs	r4, r5
1000d7c6:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000d7c8:	4f4c      	ldr	r7, [pc, #304]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d7ca:	7831      	ldrb	r1, [r6, #0]
1000d7cc:	484c      	ldr	r0, [pc, #304]	; (1000d900 <ble_pair_done_handler+0x18c>)
1000d7ce:	47b8      	blx	r7
1000d7d0:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000d7d2:	42a6      	cmp	r6, r4
1000d7d4:	d1f9      	bne.n	1000d7ca <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000d7d6:	4846      	ldr	r0, [pc, #280]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d7d8:	4b46      	ldr	r3, [pc, #280]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d7da:	4798      	blx	r3
1000d7dc:	4849      	ldr	r0, [pc, #292]	; (1000d904 <ble_pair_done_handler+0x190>)
1000d7de:	4b47      	ldr	r3, [pc, #284]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d7e0:	4798      	blx	r3
1000d7e2:	3542      	adds	r5, #66	; 0x42
1000d7e4:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000d7e6:	4e46      	ldr	r6, [pc, #280]	; (1000d900 <ble_pair_done_handler+0x18c>)
1000d7e8:	4d44      	ldr	r5, [pc, #272]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d7ea:	7821      	ldrb	r1, [r4, #0]
1000d7ec:	0030      	movs	r0, r6
1000d7ee:	47a8      	blx	r5
1000d7f0:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000d7f2:	42bc      	cmp	r4, r7
1000d7f4:	d1f9      	bne.n	1000d7ea <ble_pair_done_handler+0x76>
1000d7f6:	e071      	b.n	1000d8dc <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d7f8:	0163      	lsls	r3, r4, #5
1000d7fa:	1b1c      	subs	r4, r3, r4
1000d7fc:	00a4      	lsls	r4, r4, #2
1000d7fe:	4b3b      	ldr	r3, [pc, #236]	; (1000d8ec <ble_pair_done_handler+0x178>)
1000d800:	191c      	adds	r4, r3, r4
1000d802:	345e      	adds	r4, #94	; 0x5e
1000d804:	7823      	ldrb	r3, [r4, #0]
1000d806:	2b01      	cmp	r3, #1
1000d808:	d915      	bls.n	1000d836 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000d80a:	4839      	ldr	r0, [pc, #228]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d80c:	4b39      	ldr	r3, [pc, #228]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d80e:	4798      	blx	r3
1000d810:	483d      	ldr	r0, [pc, #244]	; (1000d908 <ble_pair_done_handler+0x194>)
1000d812:	4b3a      	ldr	r3, [pc, #232]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d814:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d816:	8868      	ldrh	r0, [r5, #2]
1000d818:	2113      	movs	r1, #19
1000d81a:	4b3c      	ldr	r3, [pc, #240]	; (1000d90c <ble_pair_done_handler+0x198>)
1000d81c:	4798      	blx	r3
1000d81e:	9001      	str	r0, [sp, #4]
1000d820:	2800      	cmp	r0, #0
1000d822:	d05b      	beq.n	1000d8dc <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000d824:	4832      	ldr	r0, [pc, #200]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d826:	4b33      	ldr	r3, [pc, #204]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d828:	4798      	blx	r3
1000d82a:	4839      	ldr	r0, [pc, #228]	; (1000d910 <ble_pair_done_handler+0x19c>)
1000d82c:	4b33      	ldr	r3, [pc, #204]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d82e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d830:	23e2      	movs	r3, #226	; 0xe2
1000d832:	9301      	str	r3, [sp, #4]
1000d834:	e052      	b.n	1000d8dc <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d836:	2300      	movs	r3, #0
1000d838:	9301      	str	r3, [sp, #4]
1000d83a:	e04f      	b.n	1000d8dc <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d83c:	4e2c      	ldr	r6, [pc, #176]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d83e:	0030      	movs	r0, r6
1000d840:	4d2c      	ldr	r5, [pc, #176]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d842:	47a8      	blx	r5
1000d844:	4833      	ldr	r0, [pc, #204]	; (1000d914 <ble_pair_done_handler+0x1a0>)
1000d846:	4c2d      	ldr	r4, [pc, #180]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d848:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d84a:	0030      	movs	r0, r6
1000d84c:	47a8      	blx	r5
1000d84e:	4832      	ldr	r0, [pc, #200]	; (1000d918 <ble_pair_done_handler+0x1a4>)
1000d850:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d852:	23e2      	movs	r3, #226	; 0xe2
1000d854:	9301      	str	r3, [sp, #4]
1000d856:	e041      	b.n	1000d8dc <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d858:	792b      	ldrb	r3, [r5, #4]
1000d85a:	2b00      	cmp	r3, #0
1000d85c:	d1cc      	bne.n	1000d7f8 <ble_pair_done_handler+0x84>
1000d85e:	e7ed      	b.n	1000d83c <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d860:	4823      	ldr	r0, [pc, #140]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d862:	4b24      	ldr	r3, [pc, #144]	; (1000d8f4 <ble_pair_done_handler+0x180>)
1000d864:	469b      	mov	fp, r3
1000d866:	4798      	blx	r3
1000d868:	482a      	ldr	r0, [pc, #168]	; (1000d914 <ble_pair_done_handler+0x1a0>)
1000d86a:	4b24      	ldr	r3, [pc, #144]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d86c:	469a      	mov	sl, r3
1000d86e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d870:	782a      	ldrb	r2, [r5, #0]
1000d872:	4b1e      	ldr	r3, [pc, #120]	; (1000d8ec <ble_pair_done_handler+0x178>)
1000d874:	4698      	mov	r8, r3
1000d876:	0167      	lsls	r7, r4, #5
1000d878:	1b3b      	subs	r3, r7, r4
1000d87a:	009b      	lsls	r3, r3, #2
1000d87c:	4443      	add	r3, r8
1000d87e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d880:	792a      	ldrb	r2, [r5, #4]
1000d882:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d884:	335e      	adds	r3, #94	; 0x5e
1000d886:	2205      	movs	r2, #5
1000d888:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d88a:	1b38      	subs	r0, r7, r4
1000d88c:	0080      	lsls	r0, r0, #2
1000d88e:	4440      	add	r0, r8
1000d890:	3036      	adds	r0, #54	; 0x36
1000d892:	320b      	adds	r2, #11
1000d894:	0029      	movs	r1, r5
1000d896:	3122      	adds	r1, #34	; 0x22
1000d898:	4b20      	ldr	r3, [pc, #128]	; (1000d91c <ble_pair_done_handler+0x1a8>)
1000d89a:	4699      	mov	r9, r3
1000d89c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d89e:	1b38      	subs	r0, r7, r4
1000d8a0:	0080      	lsls	r0, r0, #2
1000d8a2:	4440      	add	r0, r8
1000d8a4:	3046      	adds	r0, #70	; 0x46
1000d8a6:	2217      	movs	r2, #23
1000d8a8:	0029      	movs	r1, r5
1000d8aa:	3132      	adds	r1, #50	; 0x32
1000d8ac:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d8ae:	1b38      	subs	r0, r7, r4
1000d8b0:	0080      	lsls	r0, r0, #2
1000d8b2:	4440      	add	r0, r8
1000d8b4:	301a      	adds	r0, #26
1000d8b6:	1dac      	adds	r4, r5, #6
1000d8b8:	221c      	movs	r2, #28
1000d8ba:	0021      	movs	r1, r4
1000d8bc:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000d8be:	480c      	ldr	r0, [pc, #48]	; (1000d8f0 <ble_pair_done_handler+0x17c>)
1000d8c0:	47d8      	blx	fp
1000d8c2:	4817      	ldr	r0, [pc, #92]	; (1000d920 <ble_pair_done_handler+0x1ac>)
1000d8c4:	47d0      	blx	sl
1000d8c6:	2316      	movs	r3, #22
1000d8c8:	4699      	mov	r9, r3
1000d8ca:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d8cc:	4e0c      	ldr	r6, [pc, #48]	; (1000d900 <ble_pair_done_handler+0x18c>)
1000d8ce:	4f0b      	ldr	r7, [pc, #44]	; (1000d8fc <ble_pair_done_handler+0x188>)
1000d8d0:	e76a      	b.n	1000d7a8 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d8d2:	792b      	ldrb	r3, [r5, #4]
1000d8d4:	9301      	str	r3, [sp, #4]
1000d8d6:	2b00      	cmp	r3, #0
1000d8d8:	d0c2      	beq.n	1000d860 <ble_pair_done_handler+0xec>
1000d8da:	e78d      	b.n	1000d7f8 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d8dc:	9801      	ldr	r0, [sp, #4]
1000d8de:	b003      	add	sp, #12
1000d8e0:	bc3c      	pop	{r2, r3, r4, r5}
1000d8e2:	4690      	mov	r8, r2
1000d8e4:	4699      	mov	r9, r3
1000d8e6:	46a2      	mov	sl, r4
1000d8e8:	46ab      	mov	fp, r5
1000d8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8ec:	10019b14 	.word	0x10019b14
1000d8f0:	10015df4 	.word	0x10015df4
1000d8f4:	10014c49 	.word	0x10014c49
1000d8f8:	10017214 	.word	0x10017214
1000d8fc:	10014b29 	.word	0x10014b29
1000d900:	10017208 	.word	0x10017208
1000d904:	1001721c 	.word	0x1001721c
1000d908:	10017224 	.word	0x10017224
1000d90c:	1001058d 	.word	0x1001058d
1000d910:	10017244 	.word	0x10017244
1000d914:	10017260 	.word	0x10017260
1000d918:	1001728c 	.word	0x1001728c
1000d91c:	100149cf 	.word	0x100149cf
1000d920:	100172bc 	.word	0x100172bc

1000d924 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d924:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d926:	8800      	ldrh	r0, [r0, #0]
1000d928:	2378      	movs	r3, #120	; 0x78
1000d92a:	2201      	movs	r2, #1
1000d92c:	2101      	movs	r1, #1
1000d92e:	4c02      	ldr	r4, [pc, #8]	; (1000d938 <ble_conn_param_update_req+0x14>)
1000d930:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d932:	2000      	movs	r0, #0
1000d934:	bd10      	pop	{r4, pc}
1000d936:	46c0      	nop			; (mov r8, r8)
1000d938:	100105ad 	.word	0x100105ad

1000d93c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d93c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d93e:	4657      	mov	r7, sl
1000d940:	464e      	mov	r6, r9
1000d942:	4645      	mov	r5, r8
1000d944:	b4e0      	push	{r5, r6, r7}
1000d946:	b084      	sub	sp, #16
1000d948:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d94a:	2209      	movs	r2, #9
1000d94c:	2100      	movs	r1, #0
1000d94e:	a801      	add	r0, sp, #4
1000d950:	4b6a      	ldr	r3, [pc, #424]	; (1000dafc <ble_slave_security_request_handler+0x1c0>)
1000d952:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d954:	8825      	ldrh	r5, [r4, #0]
1000d956:	496a      	ldr	r1, [pc, #424]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000d958:	000a      	movs	r2, r1
1000d95a:	2300      	movs	r3, #0
1000d95c:	8910      	ldrh	r0, [r2, #8]
1000d95e:	42a8      	cmp	r0, r5
1000d960:	d116      	bne.n	1000d990 <ble_slave_security_request_handler+0x54>
1000d962:	0010      	movs	r0, r2
1000d964:	305e      	adds	r0, #94	; 0x5e
1000d966:	7800      	ldrb	r0, [r0, #0]
1000d968:	2802      	cmp	r0, #2
1000d96a:	d111      	bne.n	1000d990 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d96c:	4864      	ldr	r0, [pc, #400]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000d96e:	015a      	lsls	r2, r3, #5
1000d970:	1ad6      	subs	r6, r2, r3
1000d972:	00b6      	lsls	r6, r6, #2
1000d974:	1986      	adds	r6, r0, r6
1000d976:	365e      	adds	r6, #94	; 0x5e
1000d978:	2206      	movs	r2, #6
1000d97a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d97c:	32f9      	adds	r2, #249	; 0xf9
1000d97e:	4013      	ands	r3, r2
1000d980:	015a      	lsls	r2, r3, #5
1000d982:	1ad2      	subs	r2, r2, r3
1000d984:	0092      	lsls	r2, r2, #2
1000d986:	1882      	adds	r2, r0, r2
1000d988:	7d12      	ldrb	r2, [r2, #20]
1000d98a:	07d0      	lsls	r0, r2, #31
1000d98c:	d405      	bmi.n	1000d99a <ble_slave_security_request_handler+0x5e>
1000d98e:	e01b      	b.n	1000d9c8 <ble_slave_security_request_handler+0x8c>
1000d990:	3301      	adds	r3, #1
1000d992:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d994:	2b05      	cmp	r3, #5
1000d996:	d1e1      	bne.n	1000d95c <ble_slave_security_request_handler+0x20>
1000d998:	e01e      	b.n	1000d9d8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d99a:	78e0      	ldrb	r0, [r4, #3]
1000d99c:	2800      	cmp	r0, #0
1000d99e:	d013      	beq.n	1000d9c8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d9a0:	0159      	lsls	r1, r3, #5
1000d9a2:	1ac9      	subs	r1, r1, r3
1000d9a4:	008b      	lsls	r3, r1, #2
1000d9a6:	4956      	ldr	r1, [pc, #344]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000d9a8:	18c9      	adds	r1, r1, r3
1000d9aa:	311a      	adds	r1, #26
1000d9ac:	8820      	ldrh	r0, [r4, #0]
1000d9ae:	4b55      	ldr	r3, [pc, #340]	; (1000db04 <ble_slave_security_request_handler+0x1c8>)
1000d9b0:	4798      	blx	r3
1000d9b2:	2800      	cmp	r0, #0
1000d9b4:	d100      	bne.n	1000d9b8 <ble_slave_security_request_handler+0x7c>
1000d9b6:	e09b      	b.n	1000daf0 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d9b8:	4853      	ldr	r0, [pc, #332]	; (1000db08 <ble_slave_security_request_handler+0x1cc>)
1000d9ba:	4b54      	ldr	r3, [pc, #336]	; (1000db0c <ble_slave_security_request_handler+0x1d0>)
1000d9bc:	4798      	blx	r3
1000d9be:	4854      	ldr	r0, [pc, #336]	; (1000db10 <ble_slave_security_request_handler+0x1d4>)
1000d9c0:	4b54      	ldr	r3, [pc, #336]	; (1000db14 <ble_slave_security_request_handler+0x1d8>)
1000d9c2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d9c4:	20e2      	movs	r0, #226	; 0xe2
1000d9c6:	e093      	b.n	1000daf0 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d9c8:	015a      	lsls	r2, r3, #5
1000d9ca:	1ad3      	subs	r3, r2, r3
1000d9cc:	009b      	lsls	r3, r3, #2
1000d9ce:	4a4c      	ldr	r2, [pc, #304]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000d9d0:	18d3      	adds	r3, r2, r3
1000d9d2:	335e      	adds	r3, #94	; 0x5e
1000d9d4:	2202      	movs	r2, #2
1000d9d6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d9d8:	8825      	ldrh	r5, [r4, #0]
1000d9da:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9dc:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d9de:	0016      	movs	r6, r2
1000d9e0:	8908      	ldrh	r0, [r1, #8]
1000d9e2:	42a8      	cmp	r0, r5
1000d9e4:	d10d      	bne.n	1000da02 <ble_slave_security_request_handler+0xc6>
1000d9e6:	0008      	movs	r0, r1
1000d9e8:	305e      	adds	r0, #94	; 0x5e
1000d9ea:	7800      	ldrb	r0, [r0, #0]
1000d9ec:	2802      	cmp	r0, #2
1000d9ee:	d108      	bne.n	1000da02 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d9f0:	0152      	lsls	r2, r2, #5
1000d9f2:	1b92      	subs	r2, r2, r6
1000d9f4:	0096      	lsls	r6, r2, #2
1000d9f6:	4a42      	ldr	r2, [pc, #264]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000d9f8:	1992      	adds	r2, r2, r6
1000d9fa:	325e      	adds	r2, #94	; 0x5e
1000d9fc:	2103      	movs	r1, #3
1000d9fe:	7011      	strb	r1, [r2, #0]
			break;
1000da00:	e005      	b.n	1000da0e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da02:	3301      	adds	r3, #1
1000da04:	b2db      	uxtb	r3, r3
1000da06:	3201      	adds	r2, #1
1000da08:	317c      	adds	r1, #124	; 0x7c
1000da0a:	2b05      	cmp	r3, #5
1000da0c:	d1e7      	bne.n	1000d9de <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000da0e:	aa01      	add	r2, sp, #4
1000da10:	78e1      	ldrb	r1, [r4, #3]
1000da12:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000da14:	2101      	movs	r1, #1
1000da16:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000da18:	3103      	adds	r1, #3
1000da1a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000da1c:	001f      	movs	r7, r3
1000da1e:	015a      	lsls	r2, r3, #5
1000da20:	1ad2      	subs	r2, r2, r3
1000da22:	0092      	lsls	r2, r2, #2
1000da24:	4936      	ldr	r1, [pc, #216]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000da26:	5c52      	ldrb	r2, [r2, r1]
1000da28:	2a02      	cmp	r2, #2
1000da2a:	d104      	bne.n	1000da36 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000da2c:	aa01      	add	r2, sp, #4
1000da2e:	2103      	movs	r1, #3
1000da30:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000da32:	71d1      	strb	r1, [r2, #7]
1000da34:	e003      	b.n	1000da3e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000da36:	aa01      	add	r2, sp, #4
1000da38:	2101      	movs	r1, #1
1000da3a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000da3c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000da3e:	aa01      	add	r2, sp, #4
1000da40:	2110      	movs	r1, #16
1000da42:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000da44:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000da46:	017a      	lsls	r2, r7, #5
1000da48:	1bd2      	subs	r2, r2, r7
1000da4a:	0092      	lsls	r2, r2, #2
1000da4c:	492c      	ldr	r1, [pc, #176]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000da4e:	188a      	adds	r2, r1, r2
1000da50:	7e12      	ldrb	r2, [r2, #24]
1000da52:	2a40      	cmp	r2, #64	; 0x40
1000da54:	d134      	bne.n	1000dac0 <ble_slave_security_request_handler+0x184>
1000da56:	015a      	lsls	r2, r3, #5
1000da58:	1ad3      	subs	r3, r2, r3
1000da5a:	009b      	lsls	r3, r3, #2
1000da5c:	469a      	mov	sl, r3
1000da5e:	001e      	movs	r6, r3
1000da60:	3660      	adds	r6, #96	; 0x60
1000da62:	1876      	adds	r6, r6, r1
1000da64:	4655      	mov	r5, sl
1000da66:	3568      	adds	r5, #104	; 0x68
1000da68:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000da6a:	4b2b      	ldr	r3, [pc, #172]	; (1000db18 <ble_slave_security_request_handler+0x1dc>)
1000da6c:	4699      	mov	r9, r3
1000da6e:	230f      	movs	r3, #15
1000da70:	4698      	mov	r8, r3
1000da72:	47c8      	blx	r9
1000da74:	4643      	mov	r3, r8
1000da76:	4018      	ands	r0, r3
1000da78:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000da7a:	47c8      	blx	r9
1000da7c:	4643      	mov	r3, r8
1000da7e:	4018      	ands	r0, r3
1000da80:	74b0      	strb	r0, [r6, #18]
1000da82:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000da84:	42ae      	cmp	r6, r5
1000da86:	d1f4      	bne.n	1000da72 <ble_slave_security_request_handler+0x136>
1000da88:	4656      	mov	r6, sl
1000da8a:	3670      	adds	r6, #112	; 0x70
1000da8c:	4a1c      	ldr	r2, [pc, #112]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000da8e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000da90:	4b21      	ldr	r3, [pc, #132]	; (1000db18 <ble_slave_security_request_handler+0x1dc>)
1000da92:	4699      	mov	r9, r3
1000da94:	230f      	movs	r3, #15
1000da96:	4698      	mov	r8, r3
1000da98:	47c8      	blx	r9
1000da9a:	4643      	mov	r3, r8
1000da9c:	4018      	ands	r0, r3
1000da9e:	7028      	strb	r0, [r5, #0]
1000daa0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000daa2:	42b5      	cmp	r5, r6
1000daa4:	d1f8      	bne.n	1000da98 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000daa6:	4b1c      	ldr	r3, [pc, #112]	; (1000db18 <ble_slave_security_request_handler+0x1dc>)
1000daa8:	4798      	blx	r3
1000daaa:	017b      	lsls	r3, r7, #5
1000daac:	1bdb      	subs	r3, r3, r7
1000daae:	009b      	lsls	r3, r3, #2
1000dab0:	4a13      	ldr	r2, [pc, #76]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000dab2:	18d3      	adds	r3, r2, r3
1000dab4:	001a      	movs	r2, r3
1000dab6:	3270      	adds	r2, #112	; 0x70
1000dab8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000daba:	337a      	adds	r3, #122	; 0x7a
1000dabc:	2210      	movs	r2, #16
1000dabe:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dac0:	017a      	lsls	r2, r7, #5
1000dac2:	1bd7      	subs	r7, r2, r7
1000dac4:	00bf      	lsls	r7, r7, #2
1000dac6:	3760      	adds	r7, #96	; 0x60
1000dac8:	4a0d      	ldr	r2, [pc, #52]	; (1000db00 <ble_slave_security_request_handler+0x1c4>)
1000daca:	18ba      	adds	r2, r7, r2
1000dacc:	8820      	ldrh	r0, [r4, #0]
1000dace:	2300      	movs	r3, #0
1000dad0:	a901      	add	r1, sp, #4
1000dad2:	4c12      	ldr	r4, [pc, #72]	; (1000db1c <ble_slave_security_request_handler+0x1e0>)
1000dad4:	47a0      	blx	r4
1000dad6:	2800      	cmp	r0, #0
1000dad8:	d00a      	beq.n	1000daf0 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000dada:	ab01      	add	r3, sp, #4
1000dadc:	2200      	movs	r2, #0
1000dade:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dae0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000dae2:	4809      	ldr	r0, [pc, #36]	; (1000db08 <ble_slave_security_request_handler+0x1cc>)
1000dae4:	4b09      	ldr	r3, [pc, #36]	; (1000db0c <ble_slave_security_request_handler+0x1d0>)
1000dae6:	4798      	blx	r3
1000dae8:	480d      	ldr	r0, [pc, #52]	; (1000db20 <ble_slave_security_request_handler+0x1e4>)
1000daea:	4b0a      	ldr	r3, [pc, #40]	; (1000db14 <ble_slave_security_request_handler+0x1d8>)
1000daec:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000daee:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000daf0:	b004      	add	sp, #16
1000daf2:	bc1c      	pop	{r2, r3, r4}
1000daf4:	4690      	mov	r8, r2
1000daf6:	4699      	mov	r9, r3
1000daf8:	46a2      	mov	sl, r4
1000dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dafc:	100149e1 	.word	0x100149e1
1000db00:	10019b14 	.word	0x10019b14
1000db04:	10011171 	.word	0x10011171
1000db08:	10015df4 	.word	0x10015df4
1000db0c:	10014c49 	.word	0x10014c49
1000db10:	100172c4 	.word	0x100172c4
1000db14:	10014b29 	.word	0x10014b29
1000db18:	10014c5d 	.word	0x10014c5d
1000db1c:	10010f85 	.word	0x10010f85
1000db20:	100172dc 	.word	0x100172dc

1000db24 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000db24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db26:	465f      	mov	r7, fp
1000db28:	4656      	mov	r6, sl
1000db2a:	464d      	mov	r5, r9
1000db2c:	4644      	mov	r4, r8
1000db2e:	b4f0      	push	{r4, r5, r6, r7}
1000db30:	b085      	sub	sp, #20
1000db32:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db34:	8804      	ldrh	r4, [r0, #0]
1000db36:	4a54      	ldr	r2, [pc, #336]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000db38:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db3a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db3c:	8910      	ldrh	r0, [r2, #8]
1000db3e:	42a0      	cmp	r0, r4
1000db40:	d10d      	bne.n	1000db5e <ble_pair_request_handler+0x3a>
1000db42:	0010      	movs	r0, r2
1000db44:	305e      	adds	r0, #94	; 0x5e
1000db46:	7800      	ldrb	r0, [r0, #0]
1000db48:	2802      	cmp	r0, #2
1000db4a:	d108      	bne.n	1000db5e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000db4c:	014a      	lsls	r2, r1, #5
1000db4e:	1a52      	subs	r2, r2, r1
1000db50:	0095      	lsls	r5, r2, #2
1000db52:	4a4d      	ldr	r2, [pc, #308]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000db54:	1952      	adds	r2, r2, r5
1000db56:	325e      	adds	r2, #94	; 0x5e
1000db58:	2103      	movs	r1, #3
1000db5a:	7011      	strb	r1, [r2, #0]
			break;
1000db5c:	e005      	b.n	1000db6a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db5e:	3301      	adds	r3, #1
1000db60:	b2db      	uxtb	r3, r3
1000db62:	3101      	adds	r1, #1
1000db64:	327c      	adds	r2, #124	; 0x7c
1000db66:	2b05      	cmp	r3, #5
1000db68:	d1e8      	bne.n	1000db3c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000db6a:	aa01      	add	r2, sp, #4
1000db6c:	2100      	movs	r1, #0
1000db6e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000db70:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000db72:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000db74:	2003      	movs	r0, #3
1000db76:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000db78:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000db7a:	001e      	movs	r6, r3
1000db7c:	015a      	lsls	r2, r3, #5
1000db7e:	1ad2      	subs	r2, r2, r3
1000db80:	0092      	lsls	r2, r2, #2
1000db82:	4941      	ldr	r1, [pc, #260]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000db84:	5c52      	ldrb	r2, [r2, r1]
1000db86:	2a02      	cmp	r2, #2
1000db88:	d104      	bne.n	1000db94 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db8a:	aa01      	add	r2, sp, #4
1000db8c:	2103      	movs	r1, #3
1000db8e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db90:	71d1      	strb	r1, [r2, #7]
1000db92:	e003      	b.n	1000db9c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000db94:	aa01      	add	r2, sp, #4
1000db96:	2101      	movs	r1, #1
1000db98:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000db9a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000db9c:	aa01      	add	r2, sp, #4
1000db9e:	2110      	movs	r1, #16
1000dba0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dba2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dba4:	0172      	lsls	r2, r6, #5
1000dba6:	1b92      	subs	r2, r2, r6
1000dba8:	0092      	lsls	r2, r2, #2
1000dbaa:	4937      	ldr	r1, [pc, #220]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000dbac:	188a      	adds	r2, r1, r2
1000dbae:	7e12      	ldrb	r2, [r2, #24]
1000dbb0:	2a40      	cmp	r2, #64	; 0x40
1000dbb2:	d142      	bne.n	1000dc3a <ble_pair_request_handler+0x116>
1000dbb4:	015f      	lsls	r7, r3, #5
1000dbb6:	1afb      	subs	r3, r7, r3
1000dbb8:	009b      	lsls	r3, r3, #2
1000dbba:	469b      	mov	fp, r3
1000dbbc:	001c      	movs	r4, r3
1000dbbe:	3460      	adds	r4, #96	; 0x60
1000dbc0:	1864      	adds	r4, r4, r1
1000dbc2:	465d      	mov	r5, fp
1000dbc4:	3568      	adds	r5, #104	; 0x68
1000dbc6:	186d      	adds	r5, r5, r1
1000dbc8:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dbca:	4b30      	ldr	r3, [pc, #192]	; (1000dc8c <ble_pair_request_handler+0x168>)
1000dbcc:	469a      	mov	sl, r3
1000dbce:	230f      	movs	r3, #15
1000dbd0:	4699      	mov	r9, r3
1000dbd2:	47d0      	blx	sl
1000dbd4:	464b      	mov	r3, r9
1000dbd6:	4018      	ands	r0, r3
1000dbd8:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dbda:	47d0      	blx	sl
1000dbdc:	464b      	mov	r3, r9
1000dbde:	4018      	ands	r0, r3
1000dbe0:	74b8      	strb	r0, [r7, #18]
1000dbe2:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dbe4:	42af      	cmp	r7, r5
1000dbe6:	d1f4      	bne.n	1000dbd2 <ble_pair_request_handler+0xae>
1000dbe8:	465b      	mov	r3, fp
1000dbea:	3370      	adds	r3, #112	; 0x70
1000dbec:	4f26      	ldr	r7, [pc, #152]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000dbee:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dbf0:	4b26      	ldr	r3, [pc, #152]	; (1000dc8c <ble_pair_request_handler+0x168>)
1000dbf2:	469a      	mov	sl, r3
1000dbf4:	230f      	movs	r3, #15
1000dbf6:	4699      	mov	r9, r3
1000dbf8:	47d0      	blx	sl
1000dbfa:	464b      	mov	r3, r9
1000dbfc:	4018      	ands	r0, r3
1000dbfe:	7028      	strb	r0, [r5, #0]
1000dc00:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dc02:	42bd      	cmp	r5, r7
1000dc04:	d1f8      	bne.n	1000dbf8 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000dc06:	4822      	ldr	r0, [pc, #136]	; (1000dc90 <ble_pair_request_handler+0x16c>)
1000dc08:	4b22      	ldr	r3, [pc, #136]	; (1000dc94 <ble_pair_request_handler+0x170>)
1000dc0a:	4798      	blx	r3
1000dc0c:	4822      	ldr	r0, [pc, #136]	; (1000dc98 <ble_pair_request_handler+0x174>)
1000dc0e:	4b23      	ldr	r3, [pc, #140]	; (1000dc9c <ble_pair_request_handler+0x178>)
1000dc10:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000dc12:	4d22      	ldr	r5, [pc, #136]	; (1000dc9c <ble_pair_request_handler+0x178>)
1000dc14:	7821      	ldrb	r1, [r4, #0]
1000dc16:	4822      	ldr	r0, [pc, #136]	; (1000dca0 <ble_pair_request_handler+0x17c>)
1000dc18:	47a8      	blx	r5
1000dc1a:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000dc1c:	42bc      	cmp	r4, r7
1000dc1e:	d1f9      	bne.n	1000dc14 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dc20:	4b1a      	ldr	r3, [pc, #104]	; (1000dc8c <ble_pair_request_handler+0x168>)
1000dc22:	4798      	blx	r3
1000dc24:	0173      	lsls	r3, r6, #5
1000dc26:	1b9b      	subs	r3, r3, r6
1000dc28:	009b      	lsls	r3, r3, #2
1000dc2a:	4a17      	ldr	r2, [pc, #92]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000dc2c:	18d3      	adds	r3, r2, r3
1000dc2e:	001a      	movs	r2, r3
1000dc30:	3270      	adds	r2, #112	; 0x70
1000dc32:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dc34:	337a      	adds	r3, #122	; 0x7a
1000dc36:	2210      	movs	r2, #16
1000dc38:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000dc3a:	4815      	ldr	r0, [pc, #84]	; (1000dc90 <ble_pair_request_handler+0x16c>)
1000dc3c:	4b15      	ldr	r3, [pc, #84]	; (1000dc94 <ble_pair_request_handler+0x170>)
1000dc3e:	4798      	blx	r3
1000dc40:	4818      	ldr	r0, [pc, #96]	; (1000dca4 <ble_pair_request_handler+0x180>)
1000dc42:	4b16      	ldr	r3, [pc, #88]	; (1000dc9c <ble_pair_request_handler+0x178>)
1000dc44:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dc46:	0173      	lsls	r3, r6, #5
1000dc48:	1b9b      	subs	r3, r3, r6
1000dc4a:	009b      	lsls	r3, r3, #2
1000dc4c:	3360      	adds	r3, #96	; 0x60
1000dc4e:	4a0e      	ldr	r2, [pc, #56]	; (1000dc88 <ble_pair_request_handler+0x164>)
1000dc50:	189a      	adds	r2, r3, r2
1000dc52:	4643      	mov	r3, r8
1000dc54:	8818      	ldrh	r0, [r3, #0]
1000dc56:	2300      	movs	r3, #0
1000dc58:	a901      	add	r1, sp, #4
1000dc5a:	4c13      	ldr	r4, [pc, #76]	; (1000dca8 <ble_pair_request_handler+0x184>)
1000dc5c:	47a0      	blx	r4
1000dc5e:	2800      	cmp	r0, #0
1000dc60:	d00a      	beq.n	1000dc78 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000dc62:	ab01      	add	r3, sp, #4
1000dc64:	2200      	movs	r2, #0
1000dc66:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dc68:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000dc6a:	4809      	ldr	r0, [pc, #36]	; (1000dc90 <ble_pair_request_handler+0x16c>)
1000dc6c:	4b09      	ldr	r3, [pc, #36]	; (1000dc94 <ble_pair_request_handler+0x170>)
1000dc6e:	4798      	blx	r3
1000dc70:	480e      	ldr	r0, [pc, #56]	; (1000dcac <ble_pair_request_handler+0x188>)
1000dc72:	4b0a      	ldr	r3, [pc, #40]	; (1000dc9c <ble_pair_request_handler+0x178>)
1000dc74:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dc76:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dc78:	b005      	add	sp, #20
1000dc7a:	bc3c      	pop	{r2, r3, r4, r5}
1000dc7c:	4690      	mov	r8, r2
1000dc7e:	4699      	mov	r9, r3
1000dc80:	46a2      	mov	sl, r4
1000dc82:	46ab      	mov	fp, r5
1000dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc86:	46c0      	nop			; (mov r8, r8)
1000dc88:	10019b14 	.word	0x10019b14
1000dc8c:	10014c5d 	.word	0x10014c5d
1000dc90:	10015df4 	.word	0x10015df4
1000dc94:	10014c49 	.word	0x10014c49
1000dc98:	10017308 	.word	0x10017308
1000dc9c:	10014b29 	.word	0x10014b29
1000dca0:	10017318 	.word	0x10017318
1000dca4:	10017320 	.word	0x10017320
1000dca8:	10010f85 	.word	0x10010f85
1000dcac:	1001733c 	.word	0x1001733c

1000dcb0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcb2:	b085      	sub	sp, #20
1000dcb4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000dcb6:	2206      	movs	r2, #6
1000dcb8:	493d      	ldr	r1, [pc, #244]	; (1000ddb0 <ble_pair_key_request_handler+0x100>)
1000dcba:	a802      	add	r0, sp, #8
1000dcbc:	4e3d      	ldr	r6, [pc, #244]	; (1000ddb4 <ble_pair_key_request_handler+0x104>)
1000dcbe:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000dcc0:	ac01      	add	r4, sp, #4
1000dcc2:	2204      	movs	r2, #4
1000dcc4:	0029      	movs	r1, r5
1000dcc6:	0020      	movs	r0, r4
1000dcc8:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000dcca:	78e3      	ldrb	r3, [r4, #3]
1000dccc:	2b00      	cmp	r3, #0
1000dcce:	d162      	bne.n	1000dd96 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dcd0:	4839      	ldr	r0, [pc, #228]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dcd2:	4b3a      	ldr	r3, [pc, #232]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dcd4:	4798      	blx	r3
1000dcd6:	483a      	ldr	r0, [pc, #232]	; (1000ddc0 <ble_pair_key_request_handler+0x110>)
1000dcd8:	4b3a      	ldr	r3, [pc, #232]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dcda:	4798      	blx	r3
1000dcdc:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dcde:	4c3a      	ldr	r4, [pc, #232]	; (1000ddc8 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000dce0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dce2:	201e      	movs	r0, #30
1000dce4:	47a0      	blx	r4
1000dce6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000dce8:	2b00      	cmp	r3, #0
1000dcea:	d11a      	bne.n	1000dd22 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000dcec:	4f32      	ldr	r7, [pc, #200]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dcee:	0038      	movs	r0, r7
1000dcf0:	4e32      	ldr	r6, [pc, #200]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dcf2:	47b0      	blx	r6
1000dcf4:	4835      	ldr	r0, [pc, #212]	; (1000ddcc <ble_pair_key_request_handler+0x11c>)
1000dcf6:	4c33      	ldr	r4, [pc, #204]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dcf8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000dcfa:	0038      	movs	r0, r7
1000dcfc:	47b0      	blx	r6
1000dcfe:	4834      	ldr	r0, [pc, #208]	; (1000ddd0 <ble_pair_key_request_handler+0x120>)
1000dd00:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000dd02:	8828      	ldrh	r0, [r5, #0]
1000dd04:	2113      	movs	r1, #19
1000dd06:	4b33      	ldr	r3, [pc, #204]	; (1000ddd4 <ble_pair_key_request_handler+0x124>)
1000dd08:	4798      	blx	r3
1000dd0a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000dd0c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000dd0e:	2b00      	cmp	r3, #0
1000dd10:	d04c      	beq.n	1000ddac <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000dd12:	4829      	ldr	r0, [pc, #164]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dd14:	4b29      	ldr	r3, [pc, #164]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dd16:	4798      	blx	r3
1000dd18:	482f      	ldr	r0, [pc, #188]	; (1000ddd8 <ble_pair_key_request_handler+0x128>)
1000dd1a:	4b2a      	ldr	r3, [pc, #168]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dd1c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000dd1e:	20e2      	movs	r0, #226	; 0xe2
1000dd20:	e044      	b.n	1000ddac <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000dd22:	001a      	movs	r2, r3
1000dd24:	3a30      	subs	r2, #48	; 0x30
1000dd26:	2a09      	cmp	r2, #9
1000dd28:	d8db      	bhi.n	1000dce2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000dd2a:	aa02      	add	r2, sp, #8
1000dd2c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000dd2e:	4038      	ands	r0, r7
1000dd30:	4b2a      	ldr	r3, [pc, #168]	; (1000dddc <ble_pair_key_request_handler+0x12c>)
1000dd32:	4798      	blx	r3
1000dd34:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000dd36:	2e06      	cmp	r6, #6
1000dd38:	d026      	beq.n	1000dd88 <ble_pair_key_request_handler+0xd8>
1000dd3a:	e7d2      	b.n	1000dce2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000dd3c:	481e      	ldr	r0, [pc, #120]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dd3e:	4b1f      	ldr	r3, [pc, #124]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dd40:	4798      	blx	r3
1000dd42:	4827      	ldr	r0, [pc, #156]	; (1000dde0 <ble_pair_key_request_handler+0x130>)
1000dd44:	4b1f      	ldr	r3, [pc, #124]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dd46:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dd48:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dd4a:	4e24      	ldr	r6, [pc, #144]	; (1000dddc <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000dd4c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dd4e:	5ce0      	ldrb	r0, [r4, r3]
1000dd50:	47b0      	blx	r6
1000dd52:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000dd54:	2c06      	cmp	r4, #6
1000dd56:	d1f9      	bne.n	1000dd4c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000dd58:	ab01      	add	r3, sp, #4
1000dd5a:	7899      	ldrb	r1, [r3, #2]
1000dd5c:	8828      	ldrh	r0, [r5, #0]
1000dd5e:	aa02      	add	r2, sp, #8
1000dd60:	4b20      	ldr	r3, [pc, #128]	; (1000dde4 <ble_pair_key_request_handler+0x134>)
1000dd62:	4798      	blx	r3
1000dd64:	2800      	cmp	r0, #0
1000dd66:	d021      	beq.n	1000ddac <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000dd68:	4813      	ldr	r0, [pc, #76]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dd6a:	4b14      	ldr	r3, [pc, #80]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dd6c:	4798      	blx	r3
1000dd6e:	481e      	ldr	r0, [pc, #120]	; (1000dde8 <ble_pair_key_request_handler+0x138>)
1000dd70:	4b14      	ldr	r3, [pc, #80]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dd72:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000dd74:	2000      	movs	r0, #0
1000dd76:	e019      	b.n	1000ddac <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000dd78:	480f      	ldr	r0, [pc, #60]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dd7a:	4b10      	ldr	r3, [pc, #64]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dd7c:	4798      	blx	r3
1000dd7e:	481b      	ldr	r0, [pc, #108]	; (1000ddec <ble_pair_key_request_handler+0x13c>)
1000dd80:	4b10      	ldr	r3, [pc, #64]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dd82:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000dd84:	2000      	movs	r0, #0
1000dd86:	e011      	b.n	1000ddac <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000dd88:	480b      	ldr	r0, [pc, #44]	; (1000ddb8 <ble_pair_key_request_handler+0x108>)
1000dd8a:	4b0c      	ldr	r3, [pc, #48]	; (1000ddbc <ble_pair_key_request_handler+0x10c>)
1000dd8c:	4798      	blx	r3
1000dd8e:	4818      	ldr	r0, [pc, #96]	; (1000ddf0 <ble_pair_key_request_handler+0x140>)
1000dd90:	4b0c      	ldr	r3, [pc, #48]	; (1000ddc4 <ble_pair_key_request_handler+0x114>)
1000dd92:	4798      	blx	r3
1000dd94:	e7d8      	b.n	1000dd48 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000dd96:	ab01      	add	r3, sp, #4
1000dd98:	885a      	ldrh	r2, [r3, #2]
1000dd9a:	2380      	movs	r3, #128	; 0x80
1000dd9c:	005b      	lsls	r3, r3, #1
1000dd9e:	429a      	cmp	r2, r3
1000dda0:	d0cc      	beq.n	1000dd3c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000dda2:	ab01      	add	r3, sp, #4
1000dda4:	789b      	ldrb	r3, [r3, #2]
1000dda6:	2b01      	cmp	r3, #1
1000dda8:	d0e6      	beq.n	1000dd78 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ddaa:	2000      	movs	r0, #0
}
1000ddac:	b005      	add	sp, #20
1000ddae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddb0:	10016f24 	.word	0x10016f24
1000ddb4:	100149cf 	.word	0x100149cf
1000ddb8:	10015df4 	.word	0x10015df4
1000ddbc:	10014c49 	.word	0x10014c49
1000ddc0:	10017364 	.word	0x10017364
1000ddc4:	10014b29 	.word	0x10014b29
1000ddc8:	1000eacd 	.word	0x1000eacd
1000ddcc:	1001738c 	.word	0x1001738c
1000ddd0:	10017398 	.word	0x10017398
1000ddd4:	1001058d 	.word	0x1001058d
1000ddd8:	10017244 	.word	0x10017244
1000dddc:	10014b5d 	.word	0x10014b5d
1000dde0:	100173ac 	.word	0x100173ac
1000dde4:	100110b5 	.word	0x100110b5
1000dde8:	100173e4 	.word	0x100173e4
1000ddec:	100173fc 	.word	0x100173fc
1000ddf0:	10017418 	.word	0x10017418

1000ddf4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000ddf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddf6:	465f      	mov	r7, fp
1000ddf8:	4656      	mov	r6, sl
1000ddfa:	464d      	mov	r5, r9
1000ddfc:	b4e0      	push	{r5, r6, r7}
1000ddfe:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000de00:	8800      	ldrh	r0, [r0, #0]
1000de02:	4b49      	ldr	r3, [pc, #292]	; (1000df28 <ble_encryption_request_handler+0x134>)
1000de04:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de06:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000de08:	8919      	ldrh	r1, [r3, #8]
1000de0a:	4281      	cmp	r1, r0
1000de0c:	d137      	bne.n	1000de7e <ble_encryption_request_handler+0x8a>
1000de0e:	0019      	movs	r1, r3
1000de10:	315e      	adds	r1, #94	; 0x5e
1000de12:	7809      	ldrb	r1, [r1, #0]
1000de14:	2901      	cmp	r1, #1
1000de16:	d932      	bls.n	1000de7e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000de18:	4f43      	ldr	r7, [pc, #268]	; (1000df28 <ble_encryption_request_handler+0x134>)
1000de1a:	0153      	lsls	r3, r2, #5
1000de1c:	1a9d      	subs	r5, r3, r2
1000de1e:	00ad      	lsls	r5, r5, #2
1000de20:	197d      	adds	r5, r7, r5
1000de22:	355e      	adds	r5, #94	; 0x5e
1000de24:	2306      	movs	r3, #6
1000de26:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000de28:	4840      	ldr	r0, [pc, #256]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000de2a:	4b41      	ldr	r3, [pc, #260]	; (1000df30 <ble_encryption_request_handler+0x13c>)
1000de2c:	469a      	mov	sl, r3
1000de2e:	4798      	blx	r3
1000de30:	8831      	ldrh	r1, [r6, #0]
1000de32:	4840      	ldr	r0, [pc, #256]	; (1000df34 <ble_encryption_request_handler+0x140>)
1000de34:	4b40      	ldr	r3, [pc, #256]	; (1000df38 <ble_encryption_request_handler+0x144>)
1000de36:	4699      	mov	r9, r3
1000de38:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000de3a:	483c      	ldr	r0, [pc, #240]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000de3c:	47d0      	blx	sl
1000de3e:	0163      	lsls	r3, r4, #5
1000de40:	1b1b      	subs	r3, r3, r4
1000de42:	009b      	lsls	r3, r3, #2
1000de44:	18ff      	adds	r7, r7, r3
1000de46:	2370      	movs	r3, #112	; 0x70
1000de48:	469b      	mov	fp, r3
1000de4a:	44bb      	add	fp, r7
1000de4c:	465b      	mov	r3, fp
1000de4e:	8819      	ldrh	r1, [r3, #0]
1000de50:	483a      	ldr	r0, [pc, #232]	; (1000df3c <ble_encryption_request_handler+0x148>)
1000de52:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000de54:	4835      	ldr	r0, [pc, #212]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000de56:	47d0      	blx	sl
1000de58:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000de5a:	4839      	ldr	r0, [pc, #228]	; (1000df40 <ble_encryption_request_handler+0x14c>)
1000de5c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000de5e:	4833      	ldr	r0, [pc, #204]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000de60:	47d0      	blx	sl
1000de62:	8871      	ldrh	r1, [r6, #2]
1000de64:	4837      	ldr	r0, [pc, #220]	; (1000df44 <ble_encryption_request_handler+0x150>)
1000de66:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000de68:	4830      	ldr	r0, [pc, #192]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000de6a:	47d0      	blx	sl
1000de6c:	0021      	movs	r1, r4
1000de6e:	4836      	ldr	r0, [pc, #216]	; (1000df48 <ble_encryption_request_handler+0x154>)
1000de70:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000de72:	465b      	mov	r3, fp
1000de74:	881a      	ldrh	r2, [r3, #0]
1000de76:	8873      	ldrh	r3, [r6, #2]
1000de78:	429a      	cmp	r2, r3
1000de7a:	d12a      	bne.n	1000ded2 <ble_encryption_request_handler+0xde>
1000de7c:	e006      	b.n	1000de8c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de7e:	3401      	adds	r4, #1
1000de80:	b2e4      	uxtb	r4, r4
1000de82:	3201      	adds	r2, #1
1000de84:	337c      	adds	r3, #124	; 0x7c
1000de86:	2c05      	cmp	r4, #5
1000de88:	d1be      	bne.n	1000de08 <ble_encryption_request_handler+0x14>
1000de8a:	e022      	b.n	1000ded2 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000de8c:	0161      	lsls	r1, r4, #5
1000de8e:	1b09      	subs	r1, r1, r4
1000de90:	0089      	lsls	r1, r1, #2
1000de92:	4b25      	ldr	r3, [pc, #148]	; (1000df28 <ble_encryption_request_handler+0x134>)
1000de94:	1859      	adds	r1, r3, r1
1000de96:	3172      	adds	r1, #114	; 0x72
1000de98:	1d30      	adds	r0, r6, #4
1000de9a:	2208      	movs	r2, #8
1000de9c:	4b2b      	ldr	r3, [pc, #172]	; (1000df4c <ble_encryption_request_handler+0x158>)
1000de9e:	4798      	blx	r3
1000dea0:	2800      	cmp	r0, #0
1000dea2:	d116      	bne.n	1000ded2 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000dea4:	4821      	ldr	r0, [pc, #132]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000dea6:	4b22      	ldr	r3, [pc, #136]	; (1000df30 <ble_encryption_request_handler+0x13c>)
1000dea8:	4798      	blx	r3
1000deaa:	4829      	ldr	r0, [pc, #164]	; (1000df50 <ble_encryption_request_handler+0x15c>)
1000deac:	4b22      	ldr	r3, [pc, #136]	; (1000df38 <ble_encryption_request_handler+0x144>)
1000deae:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000deb0:	0162      	lsls	r2, r4, #5
1000deb2:	1b13      	subs	r3, r2, r4
1000deb4:	009b      	lsls	r3, r3, #2
1000deb6:	3360      	adds	r3, #96	; 0x60
1000deb8:	491b      	ldr	r1, [pc, #108]	; (1000df28 <ble_encryption_request_handler+0x134>)
1000deba:	185b      	adds	r3, r3, r1
1000debc:	1b12      	subs	r2, r2, r4
1000debe:	0092      	lsls	r2, r2, #2
1000dec0:	188a      	adds	r2, r1, r2
1000dec2:	7d11      	ldrb	r1, [r2, #20]
1000dec4:	8830      	ldrh	r0, [r6, #0]
1000dec6:	2201      	movs	r2, #1
1000dec8:	4c22      	ldr	r4, [pc, #136]	; (1000df54 <ble_encryption_request_handler+0x160>)
1000deca:	47a0      	blx	r4
1000decc:	1e04      	subs	r4, r0, #0
1000dece:	d01e      	beq.n	1000df0e <ble_encryption_request_handler+0x11a>
1000ded0:	e015      	b.n	1000defe <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000ded2:	4f16      	ldr	r7, [pc, #88]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000ded4:	0038      	movs	r0, r7
1000ded6:	4e16      	ldr	r6, [pc, #88]	; (1000df30 <ble_encryption_request_handler+0x13c>)
1000ded8:	47b0      	blx	r6
1000deda:	481f      	ldr	r0, [pc, #124]	; (1000df58 <ble_encryption_request_handler+0x164>)
1000dedc:	4d16      	ldr	r5, [pc, #88]	; (1000df38 <ble_encryption_request_handler+0x144>)
1000dede:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000dee0:	0038      	movs	r0, r7
1000dee2:	47b0      	blx	r6
1000dee4:	481d      	ldr	r0, [pc, #116]	; (1000df5c <ble_encryption_request_handler+0x168>)
1000dee6:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000dee8:	0163      	lsls	r3, r4, #5
1000deea:	1b1c      	subs	r4, r3, r4
1000deec:	00a4      	lsls	r4, r4, #2
1000deee:	4b0e      	ldr	r3, [pc, #56]	; (1000df28 <ble_encryption_request_handler+0x134>)
1000def0:	191c      	adds	r4, r3, r4
1000def2:	8920      	ldrh	r0, [r4, #8]
1000def4:	2105      	movs	r1, #5
1000def6:	4b1a      	ldr	r3, [pc, #104]	; (1000df60 <ble_encryption_request_handler+0x16c>)
1000def8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000defa:	24e2      	movs	r4, #226	; 0xe2
1000defc:	e00d      	b.n	1000df1a <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000defe:	480b      	ldr	r0, [pc, #44]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000df00:	4b0b      	ldr	r3, [pc, #44]	; (1000df30 <ble_encryption_request_handler+0x13c>)
1000df02:	4798      	blx	r3
1000df04:	4817      	ldr	r0, [pc, #92]	; (1000df64 <ble_encryption_request_handler+0x170>)
1000df06:	4b0c      	ldr	r3, [pc, #48]	; (1000df38 <ble_encryption_request_handler+0x144>)
1000df08:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000df0a:	2400      	movs	r4, #0
1000df0c:	e005      	b.n	1000df1a <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000df0e:	4807      	ldr	r0, [pc, #28]	; (1000df2c <ble_encryption_request_handler+0x138>)
1000df10:	4b07      	ldr	r3, [pc, #28]	; (1000df30 <ble_encryption_request_handler+0x13c>)
1000df12:	4798      	blx	r3
1000df14:	4814      	ldr	r0, [pc, #80]	; (1000df68 <ble_encryption_request_handler+0x174>)
1000df16:	4b08      	ldr	r3, [pc, #32]	; (1000df38 <ble_encryption_request_handler+0x144>)
1000df18:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000df1a:	0020      	movs	r0, r4
1000df1c:	bc1c      	pop	{r2, r3, r4}
1000df1e:	4691      	mov	r9, r2
1000df20:	469a      	mov	sl, r3
1000df22:	46a3      	mov	fp, r4
1000df24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df26:	46c0      	nop			; (mov r8, r8)
1000df28:	10019b14 	.word	0x10019b14
1000df2c:	10015df4 	.word	0x10015df4
1000df30:	10014c49 	.word	0x10014c49
1000df34:	1001742c 	.word	0x1001742c
1000df38:	10014b29 	.word	0x10014b29
1000df3c:	10017458 	.word	0x10017458
1000df40:	1001746c 	.word	0x1001746c
1000df44:	10017480 	.word	0x10017480
1000df48:	10017490 	.word	0x10017490
1000df4c:	100149b1 	.word	0x100149b1
1000df50:	100174a0 	.word	0x100174a0
1000df54:	100111e9 	.word	0x100111e9
1000df58:	100174b4 	.word	0x100174b4
1000df5c:	100174ec 	.word	0x100174ec
1000df60:	1001058d 	.word	0x1001058d
1000df64:	10017544 	.word	0x10017544
1000df68:	10017564 	.word	0x10017564

1000df6c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000df6c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000df6e:	2a00      	cmp	r2, #0
1000df70:	d047      	beq.n	1000e002 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000df72:	2906      	cmp	r1, #6
1000df74:	d847      	bhi.n	1000e006 <ble_mgr_events_callback_handler+0x9a>
1000df76:	0089      	lsls	r1, r1, #2
1000df78:	4b28      	ldr	r3, [pc, #160]	; (1000e01c <ble_mgr_events_callback_handler+0xb0>)
1000df7a:	585b      	ldr	r3, [r3, r1]
1000df7c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000df7e:	4b28      	ldr	r3, [pc, #160]	; (1000e020 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000df80:	2405      	movs	r4, #5
1000df82:	e00a      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000df84:	4b27      	ldr	r3, [pc, #156]	; (1000e024 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000df86:	2401      	movs	r4, #1
			}
			break;
1000df88:	e007      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000df8a:	4b27      	ldr	r3, [pc, #156]	; (1000e028 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000df8c:	2405      	movs	r4, #5
			}
			break;
1000df8e:	e004      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000df90:	4b26      	ldr	r3, [pc, #152]	; (1000e02c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000df92:	2401      	movs	r4, #1
			}
			break;
1000df94:	e001      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000df96:	4b26      	ldr	r3, [pc, #152]	; (1000e030 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000df98:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000df9a:	2800      	cmp	r0, #0
1000df9c:	d116      	bne.n	1000dfcc <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000df9e:	6819      	ldr	r1, [r3, #0]
1000dfa0:	2900      	cmp	r1, #0
1000dfa2:	d10b      	bne.n	1000dfbc <ble_mgr_events_callback_handler+0x50>
1000dfa4:	e006      	b.n	1000dfb4 <ble_mgr_events_callback_handler+0x48>
1000dfa6:	001d      	movs	r5, r3
1000dfa8:	3304      	adds	r3, #4
1000dfaa:	1f18      	subs	r0, r3, #4
1000dfac:	6800      	ldr	r0, [r0, #0]
1000dfae:	2800      	cmp	r0, #0
1000dfb0:	d106      	bne.n	1000dfc0 <ble_mgr_events_callback_handler+0x54>
1000dfb2:	e000      	b.n	1000dfb6 <ble_mgr_events_callback_handler+0x4a>
1000dfb4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000dfb6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000dfb8:	2101      	movs	r1, #1
						break;
1000dfba:	e02c      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
1000dfbc:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dfbe:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000dfc0:	3101      	adds	r1, #1
1000dfc2:	b2c9      	uxtb	r1, r1
1000dfc4:	42a1      	cmp	r1, r4
1000dfc6:	d3ee      	bcc.n	1000dfa6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000dfc8:	2100      	movs	r1, #0
1000dfca:	e024      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
1000dfcc:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000dfce:	2801      	cmp	r0, #1
1000dfd0:	d121      	bne.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000dfd2:	6819      	ldr	r1, [r3, #0]
1000dfd4:	428a      	cmp	r2, r1
1000dfd6:	d10c      	bne.n	1000dff2 <ble_mgr_events_callback_handler+0x86>
1000dfd8:	e006      	b.n	1000dfe8 <ble_mgr_events_callback_handler+0x7c>
1000dfda:	001d      	movs	r5, r3
1000dfdc:	3304      	adds	r3, #4
1000dfde:	1f18      	subs	r0, r3, #4
1000dfe0:	6800      	ldr	r0, [r0, #0]
1000dfe2:	4282      	cmp	r2, r0
1000dfe4:	d107      	bne.n	1000dff6 <ble_mgr_events_callback_handler+0x8a>
1000dfe6:	e000      	b.n	1000dfea <ble_mgr_events_callback_handler+0x7e>
1000dfe8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000dfea:	2300      	movs	r3, #0
1000dfec:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000dfee:	2101      	movs	r1, #1
						break;
1000dff0:	e011      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
1000dff2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000dff4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000dff6:	3101      	adds	r1, #1
1000dff8:	b2c9      	uxtb	r1, r1
1000dffa:	42a1      	cmp	r1, r4
1000dffc:	d3ed      	bcc.n	1000dfda <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000dffe:	2100      	movs	r1, #0
1000e000:	e009      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e002:	2100      	movs	r1, #0
1000e004:	e007      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e006:	2100      	movs	r1, #0
1000e008:	e005      	b.n	1000e016 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e00a:	4b0a      	ldr	r3, [pc, #40]	; (1000e034 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e00c:	2405      	movs	r4, #5
1000e00e:	e7c4      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e010:	4b09      	ldr	r3, [pc, #36]	; (1000e038 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e012:	2401      	movs	r4, #1
1000e014:	e7c1      	b.n	1000df9a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e016:	0008      	movs	r0, r1
1000e018:	bd30      	pop	{r4, r5, pc}
1000e01a:	46c0      	nop			; (mov r8, r8)
1000e01c:	10016e18 	.word	0x10016e18
1000e020:	10019b00 	.word	0x10019b00
1000e024:	10019afc 	.word	0x10019afc
1000e028:	10019d84 	.word	0x10019d84
1000e02c:	1001a338 	.word	0x1001a338
1000e030:	10019d98 	.word	0x10019d98
1000e034:	10019dac 	.word	0x10019dac
1000e038:	10019df4 	.word	0x10019df4

1000e03c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e03e:	465f      	mov	r7, fp
1000e040:	4656      	mov	r6, sl
1000e042:	464d      	mov	r5, r9
1000e044:	4644      	mov	r4, r8
1000e046:	b4f0      	push	{r4, r5, r6, r7}
1000e048:	b091      	sub	sp, #68	; 0x44
1000e04a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e04c:	2400      	movs	r4, #0
1000e04e:	4b7e      	ldr	r3, [pc, #504]	; (1000e248 <ble_device_init+0x20c>)
1000e050:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e052:	2207      	movs	r2, #7
1000e054:	2100      	movs	r1, #0
1000e056:	487d      	ldr	r0, [pc, #500]	; (1000e24c <ble_device_init+0x210>)
1000e058:	4e7d      	ldr	r6, [pc, #500]	; (1000e250 <ble_device_init+0x214>)
1000e05a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e05c:	2212      	movs	r2, #18
1000e05e:	2100      	movs	r1, #0
1000e060:	487c      	ldr	r0, [pc, #496]	; (1000e254 <ble_device_init+0x218>)
1000e062:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e064:	4a7c      	ldr	r2, [pc, #496]	; (1000e258 <ble_device_init+0x21c>)
1000e066:	2100      	movs	r1, #0
1000e068:	487c      	ldr	r0, [pc, #496]	; (1000e25c <ble_device_init+0x220>)
1000e06a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e06c:	4b7c      	ldr	r3, [pc, #496]	; (1000e260 <ble_device_init+0x224>)
1000e06e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e070:	22cd      	movs	r2, #205	; 0xcd
1000e072:	0092      	lsls	r2, r2, #2
1000e074:	2100      	movs	r1, #0
1000e076:	487b      	ldr	r0, [pc, #492]	; (1000e264 <ble_device_init+0x228>)
1000e078:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e07a:	4b7b      	ldr	r3, [pc, #492]	; (1000e268 <ble_device_init+0x22c>)
1000e07c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e07e:	2283      	movs	r2, #131	; 0x83
1000e080:	0092      	lsls	r2, r2, #2
1000e082:	2100      	movs	r1, #0
1000e084:	4879      	ldr	r0, [pc, #484]	; (1000e26c <ble_device_init+0x230>)
1000e086:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e088:	4b79      	ldr	r3, [pc, #484]	; (1000e270 <ble_device_init+0x234>)
1000e08a:	469b      	mov	fp, r3
1000e08c:	2380      	movs	r3, #128	; 0x80
1000e08e:	00db      	lsls	r3, r3, #3
1000e090:	469a      	mov	sl, r3
1000e092:	001a      	movs	r2, r3
1000e094:	2100      	movs	r1, #0
1000e096:	4658      	mov	r0, fp
1000e098:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e09a:	4b76      	ldr	r3, [pc, #472]	; (1000e274 <ble_device_init+0x238>)
1000e09c:	4699      	mov	r9, r3
1000e09e:	2380      	movs	r3, #128	; 0x80
1000e0a0:	015b      	lsls	r3, r3, #5
1000e0a2:	4698      	mov	r8, r3
1000e0a4:	001a      	movs	r2, r3
1000e0a6:	2100      	movs	r1, #0
1000e0a8:	4648      	mov	r0, r9
1000e0aa:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e0ac:	4f72      	ldr	r7, [pc, #456]	; (1000e278 <ble_device_init+0x23c>)
1000e0ae:	221c      	movs	r2, #28
1000e0b0:	2100      	movs	r1, #0
1000e0b2:	0038      	movs	r0, r7
1000e0b4:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e0b6:	465b      	mov	r3, fp
1000e0b8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e0ba:	4653      	mov	r3, sl
1000e0bc:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e0be:	464b      	mov	r3, r9
1000e0c0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e0c2:	4643      	mov	r3, r8
1000e0c4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e0c6:	4b6d      	ldr	r3, [pc, #436]	; (1000e27c <ble_device_init+0x240>)
1000e0c8:	601c      	str	r4, [r3, #0]
1000e0ca:	605c      	str	r4, [r3, #4]
1000e0cc:	609c      	str	r4, [r3, #8]
1000e0ce:	60dc      	str	r4, [r3, #12]
1000e0d0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e0d2:	4b6b      	ldr	r3, [pc, #428]	; (1000e280 <ble_device_init+0x244>)
1000e0d4:	601c      	str	r4, [r3, #0]
1000e0d6:	605c      	str	r4, [r3, #4]
1000e0d8:	609c      	str	r4, [r3, #8]
1000e0da:	60dc      	str	r4, [r3, #12]
1000e0dc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e0de:	4b69      	ldr	r3, [pc, #420]	; (1000e284 <ble_device_init+0x248>)
1000e0e0:	601c      	str	r4, [r3, #0]
1000e0e2:	605c      	str	r4, [r3, #4]
1000e0e4:	609c      	str	r4, [r3, #8]
1000e0e6:	60dc      	str	r4, [r3, #12]
1000e0e8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e0ea:	4b67      	ldr	r3, [pc, #412]	; (1000e288 <ble_device_init+0x24c>)
1000e0ec:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e0ee:	4b67      	ldr	r3, [pc, #412]	; (1000e28c <ble_device_init+0x250>)
1000e0f0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e0f2:	4b67      	ldr	r3, [pc, #412]	; (1000e290 <ble_device_init+0x254>)
1000e0f4:	601c      	str	r4, [r3, #0]
1000e0f6:	605c      	str	r4, [r3, #4]
1000e0f8:	609c      	str	r4, [r3, #8]
1000e0fa:	60dc      	str	r4, [r3, #12]
1000e0fc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e0fe:	4b65      	ldr	r3, [pc, #404]	; (1000e294 <ble_device_init+0x258>)
1000e100:	601c      	str	r4, [r3, #0]
1000e102:	4c65      	ldr	r4, [pc, #404]	; (1000e298 <ble_device_init+0x25c>)
1000e104:	239b      	movs	r3, #155	; 0x9b
1000e106:	009b      	lsls	r3, r3, #2
1000e108:	4698      	mov	r8, r3
1000e10a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e10c:	4f50      	ldr	r7, [pc, #320]	; (1000e250 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e10e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e110:	227c      	movs	r2, #124	; 0x7c
1000e112:	2100      	movs	r1, #0
1000e114:	0020      	movs	r0, r4
1000e116:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e118:	0023      	movs	r3, r4
1000e11a:	335e      	adds	r3, #94	; 0x5e
1000e11c:	2200      	movs	r2, #0
1000e11e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e120:	7626      	strb	r6, [r4, #24]
1000e122:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e124:	45a0      	cmp	r8, r4
1000e126:	d1f3      	bne.n	1000e110 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e128:	4b5c      	ldr	r3, [pc, #368]	; (1000e29c <ble_device_init+0x260>)
1000e12a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e12c:	4c52      	ldr	r4, [pc, #328]	; (1000e278 <ble_device_init+0x23c>)
1000e12e:	4b4a      	ldr	r3, [pc, #296]	; (1000e258 <ble_device_init+0x21c>)
1000e130:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e132:	4b4a      	ldr	r3, [pc, #296]	; (1000e25c <ble_device_init+0x220>)
1000e134:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e136:	485a      	ldr	r0, [pc, #360]	; (1000e2a0 <ble_device_init+0x264>)
1000e138:	4b5a      	ldr	r3, [pc, #360]	; (1000e2a4 <ble_device_init+0x268>)
1000e13a:	4798      	blx	r3
1000e13c:	485a      	ldr	r0, [pc, #360]	; (1000e2a8 <ble_device_init+0x26c>)
1000e13e:	4b5b      	ldr	r3, [pc, #364]	; (1000e2ac <ble_device_init+0x270>)
1000e140:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e142:	0020      	movs	r0, r4
1000e144:	4b5a      	ldr	r3, [pc, #360]	; (1000e2b0 <ble_device_init+0x274>)
1000e146:	4798      	blx	r3
1000e148:	2800      	cmp	r0, #0
1000e14a:	d00b      	beq.n	1000e164 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e14c:	4e54      	ldr	r6, [pc, #336]	; (1000e2a0 <ble_device_init+0x264>)
1000e14e:	0030      	movs	r0, r6
1000e150:	4d54      	ldr	r5, [pc, #336]	; (1000e2a4 <ble_device_init+0x268>)
1000e152:	47a8      	blx	r5
1000e154:	4857      	ldr	r0, [pc, #348]	; (1000e2b4 <ble_device_init+0x278>)
1000e156:	4c55      	ldr	r4, [pc, #340]	; (1000e2ac <ble_device_init+0x270>)
1000e158:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e15a:	0030      	movs	r0, r6
1000e15c:	47a8      	blx	r5
1000e15e:	4856      	ldr	r0, [pc, #344]	; (1000e2b8 <ble_device_init+0x27c>)
1000e160:	47a0      	blx	r4
1000e162:	e7fe      	b.n	1000e162 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e164:	4a55      	ldr	r2, [pc, #340]	; (1000e2bc <ble_device_init+0x280>)
1000e166:	2100      	movs	r1, #0
1000e168:	2000      	movs	r0, #0
1000e16a:	4c55      	ldr	r4, [pc, #340]	; (1000e2c0 <ble_device_init+0x284>)
1000e16c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e16e:	4a55      	ldr	r2, [pc, #340]	; (1000e2c4 <ble_device_init+0x288>)
1000e170:	2102      	movs	r1, #2
1000e172:	2000      	movs	r0, #0
1000e174:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e176:	2109      	movs	r1, #9
1000e178:	4853      	ldr	r0, [pc, #332]	; (1000e2c8 <ble_device_init+0x28c>)
1000e17a:	4b54      	ldr	r3, [pc, #336]	; (1000e2cc <ble_device_init+0x290>)
1000e17c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e17e:	2800      	cmp	r0, #0
1000e180:	d005      	beq.n	1000e18e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e182:	4847      	ldr	r0, [pc, #284]	; (1000e2a0 <ble_device_init+0x264>)
1000e184:	4b47      	ldr	r3, [pc, #284]	; (1000e2a4 <ble_device_init+0x268>)
1000e186:	4798      	blx	r3
1000e188:	4851      	ldr	r0, [pc, #324]	; (1000e2d0 <ble_device_init+0x294>)
1000e18a:	4b48      	ldr	r3, [pc, #288]	; (1000e2ac <ble_device_init+0x270>)
1000e18c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e18e:	2207      	movs	r2, #7
1000e190:	4950      	ldr	r1, [pc, #320]	; (1000e2d4 <ble_device_init+0x298>)
1000e192:	3108      	adds	r1, #8
1000e194:	a804      	add	r0, sp, #16
1000e196:	4b50      	ldr	r3, [pc, #320]	; (1000e2d8 <ble_device_init+0x29c>)
1000e198:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e19a:	2226      	movs	r2, #38	; 0x26
1000e19c:	2100      	movs	r1, #0
1000e19e:	a806      	add	r0, sp, #24
1000e1a0:	4b2b      	ldr	r3, [pc, #172]	; (1000e250 <ble_device_init+0x214>)
1000e1a2:	4798      	blx	r3
	
	if (addr == NULL)
1000e1a4:	2d00      	cmp	r5, #0
1000e1a6:	d10c      	bne.n	1000e1c2 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e1a8:	a804      	add	r0, sp, #16
1000e1aa:	4b4c      	ldr	r3, [pc, #304]	; (1000e2dc <ble_device_init+0x2a0>)
1000e1ac:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e1ae:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e1b0:	2800      	cmp	r0, #0
1000e1b2:	d006      	beq.n	1000e1c2 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e1b4:	483a      	ldr	r0, [pc, #232]	; (1000e2a0 <ble_device_init+0x264>)
1000e1b6:	4b3b      	ldr	r3, [pc, #236]	; (1000e2a4 <ble_device_init+0x268>)
1000e1b8:	4798      	blx	r3
1000e1ba:	4849      	ldr	r0, [pc, #292]	; (1000e2e0 <ble_device_init+0x2a4>)
1000e1bc:	4b3b      	ldr	r3, [pc, #236]	; (1000e2ac <ble_device_init+0x270>)
1000e1be:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e1c0:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e1c2:	4837      	ldr	r0, [pc, #220]	; (1000e2a0 <ble_device_init+0x264>)
1000e1c4:	4b37      	ldr	r3, [pc, #220]	; (1000e2a4 <ble_device_init+0x268>)
1000e1c6:	4798      	blx	r3
1000e1c8:	792b      	ldrb	r3, [r5, #4]
1000e1ca:	796a      	ldrb	r2, [r5, #5]
1000e1cc:	79a9      	ldrb	r1, [r5, #6]
1000e1ce:	7828      	ldrb	r0, [r5, #0]
1000e1d0:	9003      	str	r0, [sp, #12]
1000e1d2:	7868      	ldrb	r0, [r5, #1]
1000e1d4:	9002      	str	r0, [sp, #8]
1000e1d6:	78a8      	ldrb	r0, [r5, #2]
1000e1d8:	9001      	str	r0, [sp, #4]
1000e1da:	78e8      	ldrb	r0, [r5, #3]
1000e1dc:	9000      	str	r0, [sp, #0]
1000e1de:	4841      	ldr	r0, [pc, #260]	; (1000e2e4 <ble_device_init+0x2a8>)
1000e1e0:	4c32      	ldr	r4, [pc, #200]	; (1000e2ac <ble_device_init+0x270>)
1000e1e2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e1e4:	ac06      	add	r4, sp, #24
1000e1e6:	230a      	movs	r3, #10
1000e1e8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e1ea:	4b3f      	ldr	r3, [pc, #252]	; (1000e2e8 <ble_device_init+0x2ac>)
1000e1ec:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e1ee:	2207      	movs	r2, #7
1000e1f0:	0029      	movs	r1, r5
1000e1f2:	a807      	add	r0, sp, #28
1000e1f4:	4b38      	ldr	r3, [pc, #224]	; (1000e2d8 <ble_device_init+0x29c>)
1000e1f6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e1f8:	2300      	movs	r3, #0
1000e1fa:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e1fc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e1fe:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e200:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e202:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e204:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e206:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e208:	2380      	movs	r3, #128	; 0x80
1000e20a:	009b      	lsls	r3, r3, #2
1000e20c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e20e:	0020      	movs	r0, r4
1000e210:	4b36      	ldr	r3, [pc, #216]	; (1000e2ec <ble_device_init+0x2b0>)
1000e212:	4798      	blx	r3
1000e214:	2800      	cmp	r0, #0
1000e216:	d005      	beq.n	1000e224 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e218:	4821      	ldr	r0, [pc, #132]	; (1000e2a0 <ble_device_init+0x264>)
1000e21a:	4b22      	ldr	r3, [pc, #136]	; (1000e2a4 <ble_device_init+0x268>)
1000e21c:	4798      	blx	r3
1000e21e:	4834      	ldr	r0, [pc, #208]	; (1000e2f0 <ble_device_init+0x2b4>)
1000e220:	4b22      	ldr	r3, [pc, #136]	; (1000e2ac <ble_device_init+0x270>)
1000e222:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e224:	0028      	movs	r0, r5
1000e226:	4b33      	ldr	r3, [pc, #204]	; (1000e2f4 <ble_device_init+0x2b8>)
1000e228:	4798      	blx	r3
1000e22a:	2800      	cmp	r0, #0
1000e22c:	d005      	beq.n	1000e23a <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e22e:	481c      	ldr	r0, [pc, #112]	; (1000e2a0 <ble_device_init+0x264>)
1000e230:	4b1c      	ldr	r3, [pc, #112]	; (1000e2a4 <ble_device_init+0x268>)
1000e232:	4798      	blx	r3
1000e234:	4830      	ldr	r0, [pc, #192]	; (1000e2f8 <ble_device_init+0x2bc>)
1000e236:	4b1d      	ldr	r3, [pc, #116]	; (1000e2ac <ble_device_init+0x270>)
1000e238:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e23a:	b011      	add	sp, #68	; 0x44
1000e23c:	bc3c      	pop	{r2, r3, r4, r5}
1000e23e:	4690      	mov	r8, r2
1000e240:	4699      	mov	r9, r3
1000e242:	46a2      	mov	sl, r4
1000e244:	46ab      	mov	fp, r5
1000e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e248:	10018678 	.word	0x10018678
1000e24c:	10018680 	.word	0x10018680
1000e250:	100149e1 	.word	0x100149e1
1000e254:	10019dc0 	.word	0x10019dc0
1000e258:	000004e2 	.word	0x000004e2
1000e25c:	10018198 	.word	0x10018198
1000e260:	1001867c 	.word	0x1001867c
1000e264:	10019df8 	.word	0x10019df8
1000e268:	10019df0 	.word	0x10019df0
1000e26c:	1001a12c 	.word	0x1001a12c
1000e270:	10017d98 	.word	0x10017d98
1000e274:	10018688 	.word	0x10018688
1000e278:	10019dd4 	.word	0x10019dd4
1000e27c:	10019d98 	.word	0x10019d98
1000e280:	10019dac 	.word	0x10019dac
1000e284:	10019b00 	.word	0x10019b00
1000e288:	10019df4 	.word	0x10019df4
1000e28c:	10019afc 	.word	0x10019afc
1000e290:	10019d84 	.word	0x10019d84
1000e294:	1001a338 	.word	0x1001a338
1000e298:	10019b14 	.word	0x10019b14
1000e29c:	10019d80 	.word	0x10019d80
1000e2a0:	10015df4 	.word	0x10015df4
1000e2a4:	10014c49 	.word	0x10014c49
1000e2a8:	10017580 	.word	0x10017580
1000e2ac:	10014b29 	.word	0x10014b29
1000e2b0:	10010199 	.word	0x10010199
1000e2b4:	100175a4 	.word	0x100175a4
1000e2b8:	100175d0 	.word	0x100175d0
1000e2bc:	1001797c 	.word	0x1001797c
1000e2c0:	1000df6d 	.word	0x1000df6d
1000e2c4:	10016f34 	.word	0x10016f34
1000e2c8:	10017618 	.word	0x10017618
1000e2cc:	100100b1 	.word	0x100100b1
1000e2d0:	10017624 	.word	0x10017624
1000e2d4:	10016f24 	.word	0x10016f24
1000e2d8:	100149cf 	.word	0x100149cf
1000e2dc:	100100e5 	.word	0x100100e5
1000e2e0:	1001763c 	.word	0x1001763c
1000e2e4:	10017668 	.word	0x10017668
1000e2e8:	00003a98 	.word	0x00003a98
1000e2ec:	10010109 	.word	0x10010109
1000e2f0:	100176b8 	.word	0x100176b8
1000e2f4:	1001034d 	.word	0x1001034d
1000e2f8:	100176f4 	.word	0x100176f4

1000e2fc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e2fc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e2fe:	2200      	movs	r2, #0
1000e300:	2100      	movs	r1, #0
1000e302:	4b0a      	ldr	r3, [pc, #40]	; (1000e32c <ble_send_slave_sec_request+0x30>)
1000e304:	4798      	blx	r3
1000e306:	1e04      	subs	r4, r0, #0
1000e308:	d106      	bne.n	1000e318 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e30a:	4809      	ldr	r0, [pc, #36]	; (1000e330 <ble_send_slave_sec_request+0x34>)
1000e30c:	4b09      	ldr	r3, [pc, #36]	; (1000e334 <ble_send_slave_sec_request+0x38>)
1000e30e:	4798      	blx	r3
1000e310:	4809      	ldr	r0, [pc, #36]	; (1000e338 <ble_send_slave_sec_request+0x3c>)
1000e312:	4b0a      	ldr	r3, [pc, #40]	; (1000e33c <ble_send_slave_sec_request+0x40>)
1000e314:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e316:	e006      	b.n	1000e326 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e318:	4805      	ldr	r0, [pc, #20]	; (1000e330 <ble_send_slave_sec_request+0x34>)
1000e31a:	4b06      	ldr	r3, [pc, #24]	; (1000e334 <ble_send_slave_sec_request+0x38>)
1000e31c:	4798      	blx	r3
1000e31e:	4808      	ldr	r0, [pc, #32]	; (1000e340 <ble_send_slave_sec_request+0x44>)
1000e320:	4b06      	ldr	r3, [pc, #24]	; (1000e33c <ble_send_slave_sec_request+0x40>)
1000e322:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e324:	24e2      	movs	r4, #226	; 0xe2
}
1000e326:	0020      	movs	r0, r4
1000e328:	bd10      	pop	{r4, pc}
1000e32a:	46c0      	nop			; (mov r8, r8)
1000e32c:	10011131 	.word	0x10011131
1000e330:	10015df4 	.word	0x10015df4
1000e334:	10014c49 	.word	0x10014c49
1000e338:	10017744 	.word	0x10017744
1000e33c:	10014b29 	.word	0x10014b29
1000e340:	10017768 	.word	0x10017768

1000e344 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e344:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e346:	465f      	mov	r7, fp
1000e348:	464e      	mov	r6, r9
1000e34a:	4645      	mov	r5, r8
1000e34c:	b4e0      	push	{r5, r6, r7}
1000e34e:	b09a      	sub	sp, #104	; 0x68
1000e350:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e352:	7a86      	ldrb	r6, [r0, #10]
1000e354:	2e00      	cmp	r6, #0
1000e356:	d000      	beq.n	1000e35a <ble_connected_state_handler+0x16>
1000e358:	e0cc      	b.n	1000e4f4 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e35a:	4878      	ldr	r0, [pc, #480]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e35c:	4f78      	ldr	r7, [pc, #480]	; (1000e540 <ble_connected_state_handler+0x1fc>)
1000e35e:	47b8      	blx	r7
1000e360:	792b      	ldrb	r3, [r5, #4]
1000e362:	796a      	ldrb	r2, [r5, #5]
1000e364:	79a9      	ldrb	r1, [r5, #6]
1000e366:	7868      	ldrb	r0, [r5, #1]
1000e368:	9002      	str	r0, [sp, #8]
1000e36a:	78a8      	ldrb	r0, [r5, #2]
1000e36c:	9001      	str	r0, [sp, #4]
1000e36e:	78e8      	ldrb	r0, [r5, #3]
1000e370:	9000      	str	r0, [sp, #0]
1000e372:	4874      	ldr	r0, [pc, #464]	; (1000e544 <ble_connected_state_handler+0x200>)
1000e374:	4c74      	ldr	r4, [pc, #464]	; (1000e548 <ble_connected_state_handler+0x204>)
1000e376:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e378:	4870      	ldr	r0, [pc, #448]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e37a:	47b8      	blx	r7
1000e37c:	8929      	ldrh	r1, [r5, #8]
1000e37e:	4873      	ldr	r0, [pc, #460]	; (1000e54c <ble_connected_state_handler+0x208>)
1000e380:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e382:	2212      	movs	r2, #18
1000e384:	0029      	movs	r1, r5
1000e386:	4872      	ldr	r0, [pc, #456]	; (1000e550 <ble_connected_state_handler+0x20c>)
1000e388:	4b72      	ldr	r3, [pc, #456]	; (1000e554 <ble_connected_state_handler+0x210>)
1000e38a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e38c:	9504      	str	r5, [sp, #16]
1000e38e:	2207      	movs	r2, #7
1000e390:	0029      	movs	r1, r5
1000e392:	4871      	ldr	r0, [pc, #452]	; (1000e558 <ble_connected_state_handler+0x214>)
1000e394:	4b71      	ldr	r3, [pc, #452]	; (1000e55c <ble_connected_state_handler+0x218>)
1000e396:	4798      	blx	r3
1000e398:	2800      	cmp	r0, #0
1000e39a:	d100      	bne.n	1000e39e <ble_connected_state_handler+0x5a>
1000e39c:	e0b3      	b.n	1000e506 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e39e:	782b      	ldrb	r3, [r5, #0]
1000e3a0:	2b02      	cmp	r3, #2
1000e3a2:	d000      	beq.n	1000e3a6 <ble_connected_state_handler+0x62>
1000e3a4:	e0af      	b.n	1000e506 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e3a6:	2250      	movs	r2, #80	; 0x50
1000e3a8:	2100      	movs	r1, #0
1000e3aa:	a806      	add	r0, sp, #24
1000e3ac:	4b6c      	ldr	r3, [pc, #432]	; (1000e560 <ble_connected_state_handler+0x21c>)
1000e3ae:	4798      	blx	r3
1000e3b0:	4f6c      	ldr	r7, [pc, #432]	; (1000e564 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e3b2:	2300      	movs	r3, #0
1000e3b4:	e00b      	b.n	1000e3ce <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e3b6:	1c59      	adds	r1, r3, #1
1000e3b8:	7814      	ldrb	r4, [r2, #0]
1000e3ba:	a806      	add	r0, sp, #24
1000e3bc:	54c4      	strb	r4, [r0, r3]
1000e3be:	3201      	adds	r2, #1
1000e3c0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e3c2:	42b3      	cmp	r3, r6
1000e3c4:	d1f7      	bne.n	1000e3b6 <ble_connected_state_handler+0x72>
1000e3c6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e3c8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e3ca:	2b50      	cmp	r3, #80	; 0x50
1000e3cc:	d004      	beq.n	1000e3d8 <ble_connected_state_handler+0x94>
1000e3ce:	001e      	movs	r6, r3
1000e3d0:	3610      	adds	r6, #16
1000e3d2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e3d4:	003a      	movs	r2, r7
1000e3d6:	e7ee      	b.n	1000e3b6 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e3d8:	aa06      	add	r2, sp, #24
1000e3da:	0029      	movs	r1, r5
1000e3dc:	2005      	movs	r0, #5
1000e3de:	4b62      	ldr	r3, [pc, #392]	; (1000e568 <ble_connected_state_handler+0x224>)
1000e3e0:	4798      	blx	r3
1000e3e2:	1e06      	subs	r6, r0, #0
1000e3e4:	d106      	bne.n	1000e3f4 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e3e6:	4855      	ldr	r0, [pc, #340]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e3e8:	4b55      	ldr	r3, [pc, #340]	; (1000e540 <ble_connected_state_handler+0x1fc>)
1000e3ea:	4798      	blx	r3
1000e3ec:	485f      	ldr	r0, [pc, #380]	; (1000e56c <ble_connected_state_handler+0x228>)
1000e3ee:	4b56      	ldr	r3, [pc, #344]	; (1000e548 <ble_connected_state_handler+0x204>)
1000e3f0:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e3f2:	e09c      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e3f4:	4851      	ldr	r0, [pc, #324]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e3f6:	4b52      	ldr	r3, [pc, #328]	; (1000e540 <ble_connected_state_handler+0x1fc>)
1000e3f8:	4798      	blx	r3
1000e3fa:	485d      	ldr	r0, [pc, #372]	; (1000e570 <ble_connected_state_handler+0x22c>)
1000e3fc:	4b52      	ldr	r3, [pc, #328]	; (1000e548 <ble_connected_state_handler+0x204>)
1000e3fe:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e400:	26e2      	movs	r6, #226	; 0xe2
1000e402:	e094      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
1000e404:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e406:	9405      	str	r4, [sp, #20]
1000e408:	2207      	movs	r2, #7
1000e40a:	9904      	ldr	r1, [sp, #16]
1000e40c:	4648      	mov	r0, r9
1000e40e:	47d8      	blx	fp
1000e410:	2800      	cmp	r0, #0
1000e412:	d109      	bne.n	1000e428 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e414:	9a05      	ldr	r2, [sp, #20]
1000e416:	0153      	lsls	r3, r2, #5
1000e418:	1a9b      	subs	r3, r3, r2
1000e41a:	009a      	lsls	r2, r3, #2
1000e41c:	4b55      	ldr	r3, [pc, #340]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e41e:	189b      	adds	r3, r3, r2
1000e420:	335e      	adds	r3, #94	; 0x5e
1000e422:	2202      	movs	r2, #2
1000e424:	701a      	strb	r2, [r3, #0]
1000e426:	e02b      	b.n	1000e480 <ble_connected_state_handler+0x13c>
1000e428:	3401      	adds	r4, #1
1000e42a:	237c      	movs	r3, #124	; 0x7c
1000e42c:	469c      	mov	ip, r3
1000e42e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e430:	2c05      	cmp	r4, #5
1000e432:	d1e7      	bne.n	1000e404 <ble_connected_state_handler+0xc0>
1000e434:	e072      	b.n	1000e51c <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e436:	001c      	movs	r4, r3
1000e438:	7811      	ldrb	r1, [r2, #0]
1000e43a:	2900      	cmp	r1, #0
1000e43c:	d11a      	bne.n	1000e474 <ble_connected_state_handler+0x130>
1000e43e:	e001      	b.n	1000e444 <ble_connected_state_handler+0x100>
1000e440:	2400      	movs	r4, #0
1000e442:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e444:	0163      	lsls	r3, r4, #5
1000e446:	4699      	mov	r9, r3
1000e448:	1b18      	subs	r0, r3, r4
1000e44a:	0080      	lsls	r0, r0, #2
1000e44c:	4b49      	ldr	r3, [pc, #292]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e44e:	4698      	mov	r8, r3
1000e450:	4440      	add	r0, r8
1000e452:	2212      	movs	r2, #18
1000e454:	0029      	movs	r1, r5
1000e456:	4b3f      	ldr	r3, [pc, #252]	; (1000e554 <ble_connected_state_handler+0x210>)
1000e458:	4798      	blx	r3
						ble_device_count++;
1000e45a:	4a47      	ldr	r2, [pc, #284]	; (1000e578 <ble_connected_state_handler+0x234>)
1000e45c:	7813      	ldrb	r3, [r2, #0]
1000e45e:	3301      	adds	r3, #1
1000e460:	b2db      	uxtb	r3, r3
1000e462:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e464:	464b      	mov	r3, r9
1000e466:	1b1b      	subs	r3, r3, r4
1000e468:	009b      	lsls	r3, r3, #2
1000e46a:	4443      	add	r3, r8
1000e46c:	335e      	adds	r3, #94	; 0x5e
1000e46e:	2202      	movs	r2, #2
1000e470:	701a      	strb	r2, [r3, #0]
						break;
1000e472:	e005      	b.n	1000e480 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e474:	1c79      	adds	r1, r7, #1
1000e476:	b2cf      	uxtb	r7, r1
1000e478:	3301      	adds	r3, #1
1000e47a:	327c      	adds	r2, #124	; 0x7c
1000e47c:	2f05      	cmp	r7, #5
1000e47e:	d1da      	bne.n	1000e436 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e480:	2207      	movs	r2, #7
1000e482:	0029      	movs	r1, r5
1000e484:	4834      	ldr	r0, [pc, #208]	; (1000e558 <ble_connected_state_handler+0x214>)
1000e486:	4b35      	ldr	r3, [pc, #212]	; (1000e55c <ble_connected_state_handler+0x218>)
1000e488:	4798      	blx	r3
1000e48a:	2800      	cmp	r0, #0
1000e48c:	d10c      	bne.n	1000e4a8 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e48e:	017b      	lsls	r3, r7, #5
1000e490:	1bdb      	subs	r3, r3, r7
1000e492:	009b      	lsls	r3, r3, #2
1000e494:	4a37      	ldr	r2, [pc, #220]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e496:	18d3      	adds	r3, r2, r3
1000e498:	2205      	movs	r2, #5
1000e49a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e49c:	3202      	adds	r2, #2
1000e49e:	2100      	movs	r1, #0
1000e4a0:	482d      	ldr	r0, [pc, #180]	; (1000e558 <ble_connected_state_handler+0x214>)
1000e4a2:	4b2f      	ldr	r3, [pc, #188]	; (1000e560 <ble_connected_state_handler+0x21c>)
1000e4a4:	4798      	blx	r3
1000e4a6:	e042      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e4a8:	4b32      	ldr	r3, [pc, #200]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e4aa:	4698      	mov	r8, r3
1000e4ac:	017c      	lsls	r4, r7, #5
1000e4ae:	1be3      	subs	r3, r4, r7
1000e4b0:	009b      	lsls	r3, r3, #2
1000e4b2:	4443      	add	r3, r8
1000e4b4:	220a      	movs	r2, #10
1000e4b6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e4b8:	3a03      	subs	r2, #3
1000e4ba:	2100      	movs	r1, #0
1000e4bc:	4826      	ldr	r0, [pc, #152]	; (1000e558 <ble_connected_state_handler+0x214>)
1000e4be:	4b28      	ldr	r3, [pc, #160]	; (1000e560 <ble_connected_state_handler+0x21c>)
1000e4c0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e4c2:	1be4      	subs	r4, r4, r7
1000e4c4:	00a4      	lsls	r4, r4, #2
1000e4c6:	4444      	add	r4, r8
1000e4c8:	7ca3      	ldrb	r3, [r4, #18]
1000e4ca:	2b0a      	cmp	r3, #10
1000e4cc:	d12f      	bne.n	1000e52e <ble_connected_state_handler+0x1ea>
1000e4ce:	e00d      	b.n	1000e4ec <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e4d0:	481a      	ldr	r0, [pc, #104]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e4d2:	4b1b      	ldr	r3, [pc, #108]	; (1000e540 <ble_connected_state_handler+0x1fc>)
1000e4d4:	4798      	blx	r3
1000e4d6:	4b28      	ldr	r3, [pc, #160]	; (1000e578 <ble_connected_state_handler+0x234>)
1000e4d8:	7819      	ldrb	r1, [r3, #0]
1000e4da:	b2c9      	uxtb	r1, r1
1000e4dc:	4827      	ldr	r0, [pc, #156]	; (1000e57c <ble_connected_state_handler+0x238>)
1000e4de:	4b1a      	ldr	r3, [pc, #104]	; (1000e548 <ble_connected_state_handler+0x204>)
1000e4e0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e4e2:	8928      	ldrh	r0, [r5, #8]
1000e4e4:	2113      	movs	r1, #19
1000e4e6:	4b26      	ldr	r3, [pc, #152]	; (1000e580 <ble_connected_state_handler+0x23c>)
1000e4e8:	4798      	blx	r3
1000e4ea:	e020      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e4ec:	8928      	ldrh	r0, [r5, #8]
1000e4ee:	4b25      	ldr	r3, [pc, #148]	; (1000e584 <ble_connected_state_handler+0x240>)
1000e4f0:	4798      	blx	r3
1000e4f2:	e01c      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e4f4:	4811      	ldr	r0, [pc, #68]	; (1000e53c <ble_connected_state_handler+0x1f8>)
1000e4f6:	4b12      	ldr	r3, [pc, #72]	; (1000e540 <ble_connected_state_handler+0x1fc>)
1000e4f8:	4798      	blx	r3
1000e4fa:	7aa9      	ldrb	r1, [r5, #10]
1000e4fc:	4822      	ldr	r0, [pc, #136]	; (1000e588 <ble_connected_state_handler+0x244>)
1000e4fe:	4b12      	ldr	r3, [pc, #72]	; (1000e548 <ble_connected_state_handler+0x204>)
1000e500:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e502:	2600      	movs	r6, #0
1000e504:	e013      	b.n	1000e52e <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e506:	4b1c      	ldr	r3, [pc, #112]	; (1000e578 <ble_connected_state_handler+0x234>)
1000e508:	781b      	ldrb	r3, [r3, #0]
1000e50a:	b2db      	uxtb	r3, r3
1000e50c:	2b04      	cmp	r3, #4
1000e50e:	d8df      	bhi.n	1000e4d0 <ble_connected_state_handler+0x18c>
1000e510:	4b18      	ldr	r3, [pc, #96]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e512:	4699      	mov	r9, r3
1000e514:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e516:	4b11      	ldr	r3, [pc, #68]	; (1000e55c <ble_connected_state_handler+0x218>)
1000e518:	469b      	mov	fp, r3
1000e51a:	e773      	b.n	1000e404 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e51c:	235e      	movs	r3, #94	; 0x5e
1000e51e:	4a15      	ldr	r2, [pc, #84]	; (1000e574 <ble_connected_state_handler+0x230>)
1000e520:	5cd3      	ldrb	r3, [r2, r3]
1000e522:	2b00      	cmp	r3, #0
1000e524:	d08c      	beq.n	1000e440 <ble_connected_state_handler+0xfc>
1000e526:	4a19      	ldr	r2, [pc, #100]	; (1000e58c <ble_connected_state_handler+0x248>)
1000e528:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e52a:	2701      	movs	r7, #1
1000e52c:	e783      	b.n	1000e436 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e52e:	0030      	movs	r0, r6
1000e530:	b01a      	add	sp, #104	; 0x68
1000e532:	bc1c      	pop	{r2, r3, r4}
1000e534:	4690      	mov	r8, r2
1000e536:	4699      	mov	r9, r3
1000e538:	46a3      	mov	fp, r4
1000e53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e53c:	10015df4 	.word	0x10015df4
1000e540:	10014c49 	.word	0x10014c49
1000e544:	10017788 	.word	0x10017788
1000e548:	10014b29 	.word	0x10014b29
1000e54c:	100177cc 	.word	0x100177cc
1000e550:	10019dc0 	.word	0x10019dc0
1000e554:	100149cf 	.word	0x100149cf
1000e558:	10018680 	.word	0x10018680
1000e55c:	100149b1 	.word	0x100149b1
1000e560:	100149e1 	.word	0x100149e1
1000e564:	10019b5a 	.word	0x10019b5a
1000e568:	100105b9 	.word	0x100105b9
1000e56c:	100177e4 	.word	0x100177e4
1000e570:	10017808 	.word	0x10017808
1000e574:	10019b14 	.word	0x10019b14
1000e578:	10019d80 	.word	0x10019d80
1000e57c:	1001782c 	.word	0x1001782c
1000e580:	1001058d 	.word	0x1001058d
1000e584:	1000e2fd 	.word	0x1000e2fd
1000e588:	10017868 	.word	0x10017868
1000e58c:	10019bee 	.word	0x10019bee

1000e590 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e590:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e592:	4647      	mov	r7, r8
1000e594:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e596:	7803      	ldrb	r3, [r0, #0]
1000e598:	2b00      	cmp	r3, #0
1000e59a:	d152      	bne.n	1000e642 <ble_resolv_rand_addr_handler+0xb2>
1000e59c:	4d3e      	ldr	r5, [pc, #248]	; (1000e698 <ble_resolv_rand_addr_handler+0x108>)
1000e59e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e5a0:	1c46      	adds	r6, r0, #1
1000e5a2:	4f3e      	ldr	r7, [pc, #248]	; (1000e69c <ble_resolv_rand_addr_handler+0x10c>)
1000e5a4:	2210      	movs	r2, #16
1000e5a6:	0029      	movs	r1, r5
1000e5a8:	0030      	movs	r0, r6
1000e5aa:	47b8      	blx	r7
1000e5ac:	2800      	cmp	r0, #0
1000e5ae:	d031      	beq.n	1000e614 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5b0:	3401      	adds	r4, #1
1000e5b2:	b2e4      	uxtb	r4, r4
1000e5b4:	357c      	adds	r5, #124	; 0x7c
1000e5b6:	2c05      	cmp	r4, #5
1000e5b8:	d1f4      	bne.n	1000e5a4 <ble_resolv_rand_addr_handler+0x14>
1000e5ba:	e042      	b.n	1000e642 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e5bc:	001d      	movs	r5, r3
1000e5be:	7811      	ldrb	r1, [r2, #0]
1000e5c0:	2900      	cmp	r1, #0
1000e5c2:	d11b      	bne.n	1000e5fc <ble_resolv_rand_addr_handler+0x6c>
1000e5c4:	e001      	b.n	1000e5ca <ble_resolv_rand_addr_handler+0x3a>
1000e5c6:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5c8:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e5ca:	4b35      	ldr	r3, [pc, #212]	; (1000e6a0 <ble_resolv_rand_addr_handler+0x110>)
1000e5cc:	4698      	mov	r8, r3
1000e5ce:	016e      	lsls	r6, r5, #5
1000e5d0:	1b77      	subs	r7, r6, r5
1000e5d2:	00bf      	lsls	r7, r7, #2
1000e5d4:	4447      	add	r7, r8
1000e5d6:	2212      	movs	r2, #18
1000e5d8:	4932      	ldr	r1, [pc, #200]	; (1000e6a4 <ble_resolv_rand_addr_handler+0x114>)
1000e5da:	0038      	movs	r0, r7
1000e5dc:	4b32      	ldr	r3, [pc, #200]	; (1000e6a8 <ble_resolv_rand_addr_handler+0x118>)
1000e5de:	4798      	blx	r3
				ble_device_count++;
1000e5e0:	4a32      	ldr	r2, [pc, #200]	; (1000e6ac <ble_resolv_rand_addr_handler+0x11c>)
1000e5e2:	7813      	ldrb	r3, [r2, #0]
1000e5e4:	3301      	adds	r3, #1
1000e5e6:	b2db      	uxtb	r3, r3
1000e5e8:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e5ea:	375e      	adds	r7, #94	; 0x5e
1000e5ec:	2302      	movs	r3, #2
1000e5ee:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e5f0:	1b75      	subs	r5, r6, r5
1000e5f2:	00ad      	lsls	r5, r5, #2
1000e5f4:	4445      	add	r5, r8
1000e5f6:	3308      	adds	r3, #8
1000e5f8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e5fa:	e031      	b.n	1000e660 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5fc:	3401      	adds	r4, #1
1000e5fe:	b2e4      	uxtb	r4, r4
1000e600:	3301      	adds	r3, #1
1000e602:	327c      	adds	r2, #124	; 0x7c
1000e604:	2c05      	cmp	r4, #5
1000e606:	d1d9      	bne.n	1000e5bc <ble_resolv_rand_addr_handler+0x2c>
1000e608:	e03a      	b.n	1000e680 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e60a:	4b26      	ldr	r3, [pc, #152]	; (1000e6a4 <ble_resolv_rand_addr_handler+0x114>)
1000e60c:	8918      	ldrh	r0, [r3, #8]
1000e60e:	4b28      	ldr	r3, [pc, #160]	; (1000e6b0 <ble_resolv_rand_addr_handler+0x120>)
1000e610:	4798      	blx	r3
1000e612:	e03c      	b.n	1000e68e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e614:	4827      	ldr	r0, [pc, #156]	; (1000e6b4 <ble_resolv_rand_addr_handler+0x124>)
1000e616:	4b28      	ldr	r3, [pc, #160]	; (1000e6b8 <ble_resolv_rand_addr_handler+0x128>)
1000e618:	4798      	blx	r3
1000e61a:	4828      	ldr	r0, [pc, #160]	; (1000e6bc <ble_resolv_rand_addr_handler+0x12c>)
1000e61c:	4b28      	ldr	r3, [pc, #160]	; (1000e6c0 <ble_resolv_rand_addr_handler+0x130>)
1000e61e:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e620:	481f      	ldr	r0, [pc, #124]	; (1000e6a0 <ble_resolv_rand_addr_handler+0x110>)
1000e622:	0163      	lsls	r3, r4, #5
1000e624:	1b1a      	subs	r2, r3, r4
1000e626:	0092      	lsls	r2, r2, #2
1000e628:	1882      	adds	r2, r0, r2
1000e62a:	0011      	movs	r1, r2
1000e62c:	315e      	adds	r1, #94	; 0x5e
1000e62e:	2502      	movs	r5, #2
1000e630:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e632:	210a      	movs	r1, #10
1000e634:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e636:	0010      	movs	r0, r2
1000e638:	2212      	movs	r2, #18
1000e63a:	491a      	ldr	r1, [pc, #104]	; (1000e6a4 <ble_resolv_rand_addr_handler+0x114>)
1000e63c:	4b1a      	ldr	r3, [pc, #104]	; (1000e6a8 <ble_resolv_rand_addr_handler+0x118>)
1000e63e:	4798      	blx	r3
1000e640:	e00e      	b.n	1000e660 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000e642:	481c      	ldr	r0, [pc, #112]	; (1000e6b4 <ble_resolv_rand_addr_handler+0x124>)
1000e644:	4b1c      	ldr	r3, [pc, #112]	; (1000e6b8 <ble_resolv_rand_addr_handler+0x128>)
1000e646:	4798      	blx	r3
1000e648:	481e      	ldr	r0, [pc, #120]	; (1000e6c4 <ble_resolv_rand_addr_handler+0x134>)
1000e64a:	4b1d      	ldr	r3, [pc, #116]	; (1000e6c0 <ble_resolv_rand_addr_handler+0x130>)
1000e64c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e64e:	235e      	movs	r3, #94	; 0x5e
1000e650:	4a13      	ldr	r2, [pc, #76]	; (1000e6a0 <ble_resolv_rand_addr_handler+0x110>)
1000e652:	5cd3      	ldrb	r3, [r2, r3]
1000e654:	2b00      	cmp	r3, #0
1000e656:	d0b6      	beq.n	1000e5c6 <ble_resolv_rand_addr_handler+0x36>
1000e658:	4a1b      	ldr	r2, [pc, #108]	; (1000e6c8 <ble_resolv_rand_addr_handler+0x138>)
1000e65a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e65c:	2401      	movs	r4, #1
1000e65e:	e7ad      	b.n	1000e5bc <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e660:	4814      	ldr	r0, [pc, #80]	; (1000e6b4 <ble_resolv_rand_addr_handler+0x124>)
1000e662:	4b15      	ldr	r3, [pc, #84]	; (1000e6b8 <ble_resolv_rand_addr_handler+0x128>)
1000e664:	4798      	blx	r3
1000e666:	0021      	movs	r1, r4
1000e668:	4818      	ldr	r0, [pc, #96]	; (1000e6cc <ble_resolv_rand_addr_handler+0x13c>)
1000e66a:	4b15      	ldr	r3, [pc, #84]	; (1000e6c0 <ble_resolv_rand_addr_handler+0x130>)
1000e66c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e66e:	0163      	lsls	r3, r4, #5
1000e670:	1b1c      	subs	r4, r3, r4
1000e672:	00a4      	lsls	r4, r4, #2
1000e674:	4b0a      	ldr	r3, [pc, #40]	; (1000e6a0 <ble_resolv_rand_addr_handler+0x110>)
1000e676:	191c      	adds	r4, r3, r4
1000e678:	7ca3      	ldrb	r3, [r4, #18]
1000e67a:	2b0a      	cmp	r3, #10
1000e67c:	d107      	bne.n	1000e68e <ble_resolv_rand_addr_handler+0xfe>
1000e67e:	e7c4      	b.n	1000e60a <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e680:	480c      	ldr	r0, [pc, #48]	; (1000e6b4 <ble_resolv_rand_addr_handler+0x124>)
1000e682:	4b0d      	ldr	r3, [pc, #52]	; (1000e6b8 <ble_resolv_rand_addr_handler+0x128>)
1000e684:	4798      	blx	r3
1000e686:	2105      	movs	r1, #5
1000e688:	4810      	ldr	r0, [pc, #64]	; (1000e6cc <ble_resolv_rand_addr_handler+0x13c>)
1000e68a:	4b0d      	ldr	r3, [pc, #52]	; (1000e6c0 <ble_resolv_rand_addr_handler+0x130>)
1000e68c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e68e:	2000      	movs	r0, #0
1000e690:	bc04      	pop	{r2}
1000e692:	4690      	mov	r8, r2
1000e694:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e696:	46c0      	nop			; (mov r8, r8)
1000e698:	10019b5a 	.word	0x10019b5a
1000e69c:	100149b1 	.word	0x100149b1
1000e6a0:	10019b14 	.word	0x10019b14
1000e6a4:	10019dc0 	.word	0x10019dc0
1000e6a8:	100149cf 	.word	0x100149cf
1000e6ac:	10019d80 	.word	0x10019d80
1000e6b0:	1000e2fd 	.word	0x1000e2fd
1000e6b4:	10015df4 	.word	0x10015df4
1000e6b8:	10014c49 	.word	0x10014c49
1000e6bc:	10017890 	.word	0x10017890
1000e6c0:	10014b29 	.word	0x10014b29
1000e6c4:	100178a8 	.word	0x100178a8
1000e6c8:	10019bee 	.word	0x10019bee
1000e6cc:	100178c4 	.word	0x100178c4

1000e6d0 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e6d2:	0004      	movs	r4, r0
1000e6d4:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000e6d6:	4848      	ldr	r0, [pc, #288]	; (1000e7f8 <ble_event_manager+0x128>)
1000e6d8:	4b48      	ldr	r3, [pc, #288]	; (1000e7fc <ble_event_manager+0x12c>)
1000e6da:	4798      	blx	r3
1000e6dc:	0021      	movs	r1, r4
1000e6de:	4848      	ldr	r0, [pc, #288]	; (1000e800 <ble_event_manager+0x130>)
1000e6e0:	4b48      	ldr	r3, [pc, #288]	; (1000e804 <ble_event_manager+0x134>)
1000e6e2:	4798      	blx	r3
	switch(events)
1000e6e4:	2c3b      	cmp	r4, #59	; 0x3b
1000e6e6:	d879      	bhi.n	1000e7dc <ble_event_manager+0x10c>
1000e6e8:	00a3      	lsls	r3, r4, #2
1000e6ea:	4a47      	ldr	r2, [pc, #284]	; (1000e808 <ble_event_manager+0x138>)
1000e6ec:	58d3      	ldr	r3, [r2, r3]
1000e6ee:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e6f0:	00a4      	lsls	r4, r4, #2
1000e6f2:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e6f4:	4f45      	ldr	r7, [pc, #276]	; (1000e80c <ble_event_manager+0x13c>)
1000e6f6:	59bb      	ldr	r3, [r7, r6]
1000e6f8:	2b00      	cmp	r3, #0
1000e6fa:	d004      	beq.n	1000e706 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e6fc:	591b      	ldr	r3, [r3, r4]
1000e6fe:	2b00      	cmp	r3, #0
1000e700:	d001      	beq.n	1000e706 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000e702:	0028      	movs	r0, r5
1000e704:	4798      	blx	r3
1000e706:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e708:	2e14      	cmp	r6, #20
1000e70a:	d1f4      	bne.n	1000e6f6 <ble_event_manager+0x26>
1000e70c:	e072      	b.n	1000e7f4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e70e:	3c13      	subs	r4, #19
1000e710:	b2e4      	uxtb	r4, r4
1000e712:	00a4      	lsls	r4, r4, #2
1000e714:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e716:	4f3e      	ldr	r7, [pc, #248]	; (1000e810 <ble_event_manager+0x140>)
1000e718:	59bb      	ldr	r3, [r7, r6]
1000e71a:	2b00      	cmp	r3, #0
1000e71c:	d004      	beq.n	1000e728 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e71e:	591b      	ldr	r3, [r3, r4]
1000e720:	2b00      	cmp	r3, #0
1000e722:	d001      	beq.n	1000e728 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000e724:	0028      	movs	r0, r5
1000e726:	4798      	blx	r3
1000e728:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e72a:	2e14      	cmp	r6, #20
1000e72c:	d1f4      	bne.n	1000e718 <ble_event_manager+0x48>
1000e72e:	e061      	b.n	1000e7f4 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000e730:	3c1d      	subs	r4, #29
1000e732:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000e734:	4830      	ldr	r0, [pc, #192]	; (1000e7f8 <ble_event_manager+0x128>)
1000e736:	4b31      	ldr	r3, [pc, #196]	; (1000e7fc <ble_event_manager+0x12c>)
1000e738:	4798      	blx	r3
1000e73a:	0021      	movs	r1, r4
1000e73c:	4835      	ldr	r0, [pc, #212]	; (1000e814 <ble_event_manager+0x144>)
1000e73e:	4b31      	ldr	r3, [pc, #196]	; (1000e804 <ble_event_manager+0x134>)
1000e740:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e742:	00a4      	lsls	r4, r4, #2
1000e744:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e746:	4f34      	ldr	r7, [pc, #208]	; (1000e818 <ble_event_manager+0x148>)
1000e748:	59bb      	ldr	r3, [r7, r6]
1000e74a:	2b00      	cmp	r3, #0
1000e74c:	d004      	beq.n	1000e758 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e74e:	591b      	ldr	r3, [r3, r4]
1000e750:	2b00      	cmp	r3, #0
1000e752:	d001      	beq.n	1000e758 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000e754:	0028      	movs	r0, r5
1000e756:	4798      	blx	r3
1000e758:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e75a:	2e14      	cmp	r6, #20
1000e75c:	d1f4      	bne.n	1000e748 <ble_event_manager+0x78>
1000e75e:	e049      	b.n	1000e7f4 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e760:	3c27      	subs	r4, #39	; 0x27
1000e762:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e764:	4b2d      	ldr	r3, [pc, #180]	; (1000e81c <ble_event_manager+0x14c>)
1000e766:	681b      	ldr	r3, [r3, #0]
1000e768:	2b00      	cmp	r3, #0
1000e76a:	d043      	beq.n	1000e7f4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e76c:	00a4      	lsls	r4, r4, #2
1000e76e:	58e3      	ldr	r3, [r4, r3]
1000e770:	2b00      	cmp	r3, #0
1000e772:	d03f      	beq.n	1000e7f4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e774:	0028      	movs	r0, r5
1000e776:	4798      	blx	r3
1000e778:	e03c      	b.n	1000e7f4 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e77a:	3c2d      	subs	r4, #45	; 0x2d
1000e77c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e77e:	4b28      	ldr	r3, [pc, #160]	; (1000e820 <ble_event_manager+0x150>)
1000e780:	681b      	ldr	r3, [r3, #0]
1000e782:	2b00      	cmp	r3, #0
1000e784:	d036      	beq.n	1000e7f4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e786:	00a4      	lsls	r4, r4, #2
1000e788:	58e3      	ldr	r3, [r4, r3]
1000e78a:	2b00      	cmp	r3, #0
1000e78c:	d032      	beq.n	1000e7f4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e78e:	0028      	movs	r0, r5
1000e790:	4798      	blx	r3
1000e792:	e02f      	b.n	1000e7f4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e794:	3c36      	subs	r4, #54	; 0x36
1000e796:	b2e4      	uxtb	r4, r4
1000e798:	00a4      	lsls	r4, r4, #2
1000e79a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e79c:	4f21      	ldr	r7, [pc, #132]	; (1000e824 <ble_event_manager+0x154>)
1000e79e:	59bb      	ldr	r3, [r7, r6]
1000e7a0:	2b00      	cmp	r3, #0
1000e7a2:	d004      	beq.n	1000e7ae <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7a4:	591b      	ldr	r3, [r3, r4]
1000e7a6:	2b00      	cmp	r3, #0
1000e7a8:	d001      	beq.n	1000e7ae <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000e7aa:	0028      	movs	r0, r5
1000e7ac:	4798      	blx	r3
1000e7ae:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e7b0:	2e14      	cmp	r6, #20
1000e7b2:	d1f4      	bne.n	1000e79e <ble_event_manager+0xce>
1000e7b4:	e01e      	b.n	1000e7f4 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e7b6:	3c38      	subs	r4, #56	; 0x38
1000e7b8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e7ba:	4b1b      	ldr	r3, [pc, #108]	; (1000e828 <ble_event_manager+0x158>)
1000e7bc:	681b      	ldr	r3, [r3, #0]
1000e7be:	2b00      	cmp	r3, #0
1000e7c0:	d018      	beq.n	1000e7f4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7c2:	00a4      	lsls	r4, r4, #2
1000e7c4:	58e3      	ldr	r3, [r4, r3]
1000e7c6:	2b00      	cmp	r3, #0
1000e7c8:	d014      	beq.n	1000e7f4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e7ca:	0028      	movs	r0, r5
1000e7cc:	4798      	blx	r3
1000e7ce:	e011      	b.n	1000e7f4 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e7d0:	4b16      	ldr	r3, [pc, #88]	; (1000e82c <ble_event_manager+0x15c>)
1000e7d2:	681b      	ldr	r3, [r3, #0]
1000e7d4:	2b00      	cmp	r3, #0
1000e7d6:	d00d      	beq.n	1000e7f4 <ble_event_manager+0x124>
			ble_user_event_cb();
1000e7d8:	4798      	blx	r3
1000e7da:	e00b      	b.n	1000e7f4 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000e7dc:	4e06      	ldr	r6, [pc, #24]	; (1000e7f8 <ble_event_manager+0x128>)
1000e7de:	0030      	movs	r0, r6
1000e7e0:	4d06      	ldr	r5, [pc, #24]	; (1000e7fc <ble_event_manager+0x12c>)
1000e7e2:	47a8      	blx	r5
1000e7e4:	0021      	movs	r1, r4
1000e7e6:	4812      	ldr	r0, [pc, #72]	; (1000e830 <ble_event_manager+0x160>)
1000e7e8:	4b06      	ldr	r3, [pc, #24]	; (1000e804 <ble_event_manager+0x134>)
1000e7ea:	4798      	blx	r3
		DBG_LOG("\r\n");
1000e7ec:	0030      	movs	r0, r6
1000e7ee:	47a8      	blx	r5
1000e7f0:	0030      	movs	r0, r6
1000e7f2:	47a8      	blx	r5
	}
	break;		
	}
}
1000e7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e7f6:	46c0      	nop			; (mov r8, r8)
1000e7f8:	10015df4 	.word	0x10015df4
1000e7fc:	10014c49 	.word	0x10014c49
1000e800:	100178d4 	.word	0x100178d4
1000e804:	10014b29 	.word	0x10014b29
1000e808:	10016e34 	.word	0x10016e34
1000e80c:	10019d98 	.word	0x10019d98
1000e810:	10019dac 	.word	0x10019dac
1000e814:	100178e4 	.word	0x100178e4
1000e818:	10019b00 	.word	0x10019b00
1000e81c:	10019df4 	.word	0x10019df4
1000e820:	10019afc 	.word	0x10019afc
1000e824:	10019d84 	.word	0x10019d84
1000e828:	1001a338 	.word	0x1001a338
1000e82c:	10018678 	.word	0x10018678
1000e830:	100178fc 	.word	0x100178fc

1000e834 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e834:	b570      	push	{r4, r5, r6, lr}
1000e836:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e838:	4b0d      	ldr	r3, [pc, #52]	; (1000e870 <ble_event_task+0x3c>)
1000e83a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e83c:	2b01      	cmp	r3, #1
1000e83e:	d101      	bne.n	1000e844 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e840:	4b0c      	ldr	r3, [pc, #48]	; (1000e874 <ble_event_task+0x40>)
1000e842:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e844:	0022      	movs	r2, r4
1000e846:	490c      	ldr	r1, [pc, #48]	; (1000e878 <ble_event_task+0x44>)
1000e848:	480c      	ldr	r0, [pc, #48]	; (1000e87c <ble_event_task+0x48>)
1000e84a:	4b0d      	ldr	r3, [pc, #52]	; (1000e880 <ble_event_task+0x4c>)
1000e84c:	4798      	blx	r3
1000e84e:	0004      	movs	r4, r0
1000e850:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e852:	4b07      	ldr	r3, [pc, #28]	; (1000e870 <ble_event_task+0x3c>)
1000e854:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e856:	2b01      	cmp	r3, #1
1000e858:	d101      	bne.n	1000e85e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e85a:	4b0a      	ldr	r3, [pc, #40]	; (1000e884 <ble_event_task+0x50>)
1000e85c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e85e:	2d00      	cmp	r5, #0
1000e860:	d104      	bne.n	1000e86c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e862:	4b06      	ldr	r3, [pc, #24]	; (1000e87c <ble_event_task+0x48>)
1000e864:	7818      	ldrb	r0, [r3, #0]
1000e866:	4904      	ldr	r1, [pc, #16]	; (1000e878 <ble_event_task+0x44>)
1000e868:	4b07      	ldr	r3, [pc, #28]	; (1000e888 <ble_event_task+0x54>)
1000e86a:	4798      	blx	r3
    }
    
    return status;
}
1000e86c:	0020      	movs	r0, r4
1000e86e:	bd70      	pop	{r4, r5, r6, pc}
1000e870:	10018687 	.word	0x10018687
1000e874:	1000f245 	.word	0x1000f245
1000e878:	1001a12c 	.word	0x1001a12c
1000e87c:	10019df0 	.word	0x10019df0
1000e880:	1000f941 	.word	0x1000f941
1000e884:	1000f21d 	.word	0x1000f21d
1000e888:	1000e6d1 	.word	0x1000e6d1

1000e88c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e88c:	b510      	push	{r4, lr}
1000e88e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e890:	ac08      	add	r4, sp, #32
1000e892:	2203      	movs	r2, #3
1000e894:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e896:	2302      	movs	r3, #2
1000e898:	70a3      	strb	r3, [r4, #2]
1000e89a:	3316      	adds	r3, #22
1000e89c:	70e3      	strb	r3, [r4, #3]
1000e89e:	7122      	strb	r2, [r4, #4]
1000e8a0:	7163      	strb	r3, [r4, #5]
1000e8a2:	3201      	adds	r2, #1
1000e8a4:	71a2      	strb	r2, [r4, #6]
1000e8a6:	71e3      	strb	r3, [r4, #7]
1000e8a8:	320b      	adds	r2, #11
1000e8aa:	7222      	strb	r2, [r4, #8]
1000e8ac:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e8ae:	3b0f      	subs	r3, #15
1000e8b0:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e8b2:	3a05      	subs	r2, #5
1000e8b4:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e8b6:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e8b8:	aa0b      	add	r2, sp, #44	; 0x2c
1000e8ba:	4b16      	ldr	r3, [pc, #88]	; (1000e914 <ble_advertisement_data_set+0x88>)
1000e8bc:	cb03      	ldmia	r3!, {r0, r1}
1000e8be:	c203      	stmia	r2!, {r0, r1}
1000e8c0:	781b      	ldrb	r3, [r3, #0]
1000e8c2:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000e8c4:	2300      	movs	r3, #0
1000e8c6:	466a      	mov	r2, sp
1000e8c8:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000e8ca:	3315      	adds	r3, #21
1000e8cc:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000e8ce:	4812      	ldr	r0, [pc, #72]	; (1000e918 <ble_advertisement_data_set+0x8c>)
1000e8d0:	4b12      	ldr	r3, [pc, #72]	; (1000e91c <ble_advertisement_data_set+0x90>)
1000e8d2:	4798      	blx	r3
1000e8d4:	4812      	ldr	r0, [pc, #72]	; (1000e920 <ble_advertisement_data_set+0x94>)
1000e8d6:	4b13      	ldr	r3, [pc, #76]	; (1000e924 <ble_advertisement_data_set+0x98>)
1000e8d8:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e8da:	2307      	movs	r3, #7
1000e8dc:	466a      	mov	r2, sp
1000e8de:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e8e0:	33f8      	adds	r3, #248	; 0xf8
1000e8e2:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e8e4:	2206      	movs	r2, #6
1000e8e6:	4910      	ldr	r1, [pc, #64]	; (1000e928 <ble_advertisement_data_set+0x9c>)
1000e8e8:	466b      	mov	r3, sp
1000e8ea:	1c98      	adds	r0, r3, #2
1000e8ec:	4b0f      	ldr	r3, [pc, #60]	; (1000e92c <ble_advertisement_data_set+0xa0>)
1000e8ee:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e8f0:	2308      	movs	r3, #8
1000e8f2:	466a      	mov	r2, sp
1000e8f4:	2115      	movs	r1, #21
1000e8f6:	0020      	movs	r0, r4
1000e8f8:	4c0d      	ldr	r4, [pc, #52]	; (1000e930 <ble_advertisement_data_set+0xa4>)
1000e8fa:	47a0      	blx	r4
1000e8fc:	2800      	cmp	r0, #0
1000e8fe:	d005      	beq.n	1000e90c <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000e900:	4805      	ldr	r0, [pc, #20]	; (1000e918 <ble_advertisement_data_set+0x8c>)
1000e902:	4b06      	ldr	r3, [pc, #24]	; (1000e91c <ble_advertisement_data_set+0x90>)
1000e904:	4798      	blx	r3
1000e906:	480b      	ldr	r0, [pc, #44]	; (1000e934 <ble_advertisement_data_set+0xa8>)
1000e908:	4b06      	ldr	r3, [pc, #24]	; (1000e924 <ble_advertisement_data_set+0x98>)
1000e90a:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000e90c:	2000      	movs	r0, #0
1000e90e:	b010      	add	sp, #64	; 0x40
1000e910:	bd10      	pop	{r4, pc}
1000e912:	46c0      	nop			; (mov r8, r8)
1000e914:	10017618 	.word	0x10017618
1000e918:	10015df4 	.word	0x10015df4
1000e91c:	10014c49 	.word	0x10014c49
1000e920:	1001791c 	.word	0x1001791c
1000e924:	10014b29 	.word	0x10014b29
1000e928:	10017950 	.word	0x10017950
1000e92c:	100149cf 	.word	0x100149cf
1000e930:	100103a1 	.word	0x100103a1
1000e934:	10017958 	.word	0x10017958

1000e938 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000e938:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000e93a:	4b0e      	ldr	r3, [pc, #56]	; (1000e974 <uart_read_complete_callback+0x3c>)
1000e93c:	781b      	ldrb	r3, [r3, #0]
1000e93e:	2b01      	cmp	r3, #1
1000e940:	d10b      	bne.n	1000e95a <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000e942:	2202      	movs	r2, #2
1000e944:	4b0b      	ldr	r3, [pc, #44]	; (1000e974 <uart_read_complete_callback+0x3c>)
1000e946:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000e948:	4b0b      	ldr	r3, [pc, #44]	; (1000e978 <uart_read_complete_callback+0x40>)
1000e94a:	681b      	ldr	r3, [r3, #0]
1000e94c:	2b00      	cmp	r3, #0
1000e94e:	d110      	bne.n	1000e972 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000e950:	2102      	movs	r1, #2
1000e952:	480a      	ldr	r0, [pc, #40]	; (1000e97c <uart_read_complete_callback+0x44>)
1000e954:	4b0a      	ldr	r3, [pc, #40]	; (1000e980 <uart_read_complete_callback+0x48>)
1000e956:	4798      	blx	r3
1000e958:	e00b      	b.n	1000e972 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000e95a:	4b07      	ldr	r3, [pc, #28]	; (1000e978 <uart_read_complete_callback+0x40>)
1000e95c:	681b      	ldr	r3, [r3, #0]
1000e95e:	2b00      	cmp	r3, #0
1000e960:	d007      	beq.n	1000e972 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000e962:	4c08      	ldr	r4, [pc, #32]	; (1000e984 <uart_read_complete_callback+0x4c>)
1000e964:	7820      	ldrb	r0, [r4, #0]
1000e966:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e968:	2201      	movs	r2, #1
1000e96a:	0021      	movs	r1, r4
1000e96c:	4803      	ldr	r0, [pc, #12]	; (1000e97c <uart_read_complete_callback+0x44>)
1000e96e:	4b06      	ldr	r3, [pc, #24]	; (1000e988 <uart_read_complete_callback+0x50>)
1000e970:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000e972:	bd10      	pop	{r4, pc}
1000e974:	1001968c 	.word	0x1001968c
1000e978:	10019694 	.word	0x10019694
1000e97c:	1001a33c 	.word	0x1001a33c
1000e980:	1000d329 	.word	0x1000d329
1000e984:	10019690 	.word	0x10019690
1000e988:	1000d2cd 	.word	0x1000d2cd

1000e98c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000e98c:	b570      	push	{r4, r5, r6, lr}
1000e98e:	0006      	movs	r6, r0
1000e990:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e992:	4c03      	ldr	r4, [pc, #12]	; (1000e9a0 <usart_serial_getchar+0x14>)
1000e994:	0029      	movs	r1, r5
1000e996:	0030      	movs	r0, r6
1000e998:	47a0      	blx	r4
1000e99a:	2800      	cmp	r0, #0
1000e99c:	d1fa      	bne.n	1000e994 <usart_serial_getchar+0x8>
}
1000e99e:	bd70      	pop	{r4, r5, r6, pc}
1000e9a0:	1000d2b9 	.word	0x1000d2b9

1000e9a4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e9a4:	b570      	push	{r4, r5, r6, lr}
1000e9a6:	0006      	movs	r6, r0
1000e9a8:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e9aa:	4c03      	ldr	r4, [pc, #12]	; (1000e9b8 <usart_serial_putchar+0x14>)
1000e9ac:	0029      	movs	r1, r5
1000e9ae:	0030      	movs	r0, r6
1000e9b0:	47a0      	blx	r4
1000e9b2:	2800      	cmp	r0, #0
1000e9b4:	d1fa      	bne.n	1000e9ac <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e9b6:	bd70      	pop	{r4, r5, r6, pc}
1000e9b8:	1000d2a9 	.word	0x1000d2a9

1000e9bc <serial_console_init>:

void serial_console_init(void)
{
1000e9bc:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e9be:	2100      	movs	r1, #0
1000e9c0:	2000      	movs	r0, #0
1000e9c2:	4b19      	ldr	r3, [pc, #100]	; (1000ea28 <serial_console_init+0x6c>)
1000e9c4:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e9c6:	4c19      	ldr	r4, [pc, #100]	; (1000ea2c <serial_console_init+0x70>)
1000e9c8:	0020      	movs	r0, r4
1000e9ca:	4b19      	ldr	r3, [pc, #100]	; (1000ea30 <serial_console_init+0x74>)
1000e9cc:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e9ce:	23e1      	movs	r3, #225	; 0xe1
1000e9d0:	025b      	lsls	r3, r3, #9
1000e9d2:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e9d4:	2302      	movs	r3, #2
1000e9d6:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e9d8:	2203      	movs	r2, #3
1000e9da:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e9dc:	3201      	adds	r2, #1
1000e9de:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e9e0:	3201      	adds	r2, #1
1000e9e2:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e9e4:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e9e6:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e9e8:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e9ea:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e9ec:	4d11      	ldr	r5, [pc, #68]	; (1000ea34 <serial_console_init+0x78>)
1000e9ee:	4b12      	ldr	r3, [pc, #72]	; (1000ea38 <serial_console_init+0x7c>)
1000e9f0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e9f2:	4a12      	ldr	r2, [pc, #72]	; (1000ea3c <serial_console_init+0x80>)
1000e9f4:	4b12      	ldr	r3, [pc, #72]	; (1000ea40 <serial_console_init+0x84>)
1000e9f6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e9f8:	4a12      	ldr	r2, [pc, #72]	; (1000ea44 <serial_console_init+0x88>)
1000e9fa:	4b13      	ldr	r3, [pc, #76]	; (1000ea48 <serial_console_init+0x8c>)
1000e9fc:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e9fe:	0022      	movs	r2, r4
1000ea00:	4912      	ldr	r1, [pc, #72]	; (1000ea4c <serial_console_init+0x90>)
1000ea02:	0028      	movs	r0, r5
1000ea04:	4b12      	ldr	r3, [pc, #72]	; (1000ea50 <serial_console_init+0x94>)
1000ea06:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ea08:	4e12      	ldr	r6, [pc, #72]	; (1000ea54 <serial_console_init+0x98>)
1000ea0a:	6833      	ldr	r3, [r6, #0]
1000ea0c:	6898      	ldr	r0, [r3, #8]
1000ea0e:	2100      	movs	r1, #0
1000ea10:	4c11      	ldr	r4, [pc, #68]	; (1000ea58 <serial_console_init+0x9c>)
1000ea12:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ea14:	6833      	ldr	r3, [r6, #0]
1000ea16:	6858      	ldr	r0, [r3, #4]
1000ea18:	2100      	movs	r1, #0
1000ea1a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ea1c:	2202      	movs	r2, #2
1000ea1e:	490f      	ldr	r1, [pc, #60]	; (1000ea5c <serial_console_init+0xa0>)
1000ea20:	0028      	movs	r0, r5
1000ea22:	4b0f      	ldr	r3, [pc, #60]	; (1000ea60 <serial_console_init+0xa4>)
1000ea24:	4798      	blx	r3
}
1000ea26:	bd70      	pop	{r4, r5, r6, pc}
1000ea28:	1000c2c9 	.word	0x1000c2c9
1000ea2c:	1001a360 	.word	0x1001a360
1000ea30:	1000d0c1 	.word	0x1000d0c1
1000ea34:	1001a33c 	.word	0x1001a33c
1000ea38:	10019af8 	.word	0x10019af8
1000ea3c:	1000e9a5 	.word	0x1000e9a5
1000ea40:	10019af4 	.word	0x10019af4
1000ea44:	1000e98d 	.word	0x1000e98d
1000ea48:	10019af0 	.word	0x10019af0
1000ea4c:	40004000 	.word	0x40004000
1000ea50:	1000d0ed 	.word	0x1000d0ed
1000ea54:	10017d58 	.word	0x10017d58
1000ea58:	10014cf9 	.word	0x10014cf9
1000ea5c:	1000e939 	.word	0x1000e939
1000ea60:	1000d2f5 	.word	0x1000d2f5

1000ea64 <_time_start>:

void _time_start(unsigned int sec)
{
1000ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea66:	b083      	sub	sp, #12
1000ea68:	0005      	movs	r5, r0
	system_clock_get_value();
1000ea6a:	4c0d      	ldr	r4, [pc, #52]	; (1000eaa0 <_time_start+0x3c>)
1000ea6c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ea6e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ea70:	4f0c      	ldr	r7, [pc, #48]	; (1000eaa4 <_time_start+0x40>)
1000ea72:	47b8      	blx	r7
1000ea74:	4e0c      	ldr	r6, [pc, #48]	; (1000eaa8 <_time_start+0x44>)
1000ea76:	4a0d      	ldr	r2, [pc, #52]	; (1000eaac <_time_start+0x48>)
1000ea78:	4b0d      	ldr	r3, [pc, #52]	; (1000eab0 <_time_start+0x4c>)
1000ea7a:	47b0      	blx	r6
1000ea7c:	9000      	str	r0, [sp, #0]
1000ea7e:	9101      	str	r1, [sp, #4]
1000ea80:	20fa      	movs	r0, #250	; 0xfa
1000ea82:	0080      	lsls	r0, r0, #2
1000ea84:	4368      	muls	r0, r5
1000ea86:	47b8      	blx	r7
1000ea88:	0002      	movs	r2, r0
1000ea8a:	000b      	movs	r3, r1
1000ea8c:	9800      	ldr	r0, [sp, #0]
1000ea8e:	9901      	ldr	r1, [sp, #4]
1000ea90:	47b0      	blx	r6
1000ea92:	4b08      	ldr	r3, [pc, #32]	; (1000eab4 <_time_start+0x50>)
1000ea94:	4798      	blx	r3
1000ea96:	4b08      	ldr	r3, [pc, #32]	; (1000eab8 <_time_start+0x54>)
1000ea98:	6018      	str	r0, [r3, #0]
}
1000ea9a:	b003      	add	sp, #12
1000ea9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea9e:	46c0      	nop			; (mov r8, r8)
1000eaa0:	1000c34d 	.word	0x1000c34d
1000eaa4:	100148a5 	.word	0x100148a5
1000eaa8:	10013c9d 	.word	0x10013c9d
1000eaac:	19feaec7 	.word	0x19feaec7
1000eab0:	3f09d8ef 	.word	0x3f09d8ef
1000eab4:	100130bd 	.word	0x100130bd
1000eab8:	10019688 	.word	0x10019688

1000eabc <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000eabc:	4b02      	ldr	r3, [pc, #8]	; (1000eac8 <_time_done+0xc>)
1000eabe:	681a      	ldr	r2, [r3, #0]
1000eac0:	1e50      	subs	r0, r2, #1
1000eac2:	6018      	str	r0, [r3, #0]
}
1000eac4:	4770      	bx	lr
1000eac6:	46c0      	nop			; (mov r8, r8)
1000eac8:	10019688 	.word	0x10019688

1000eacc <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000eacc:	b570      	push	{r4, r5, r6, lr}
1000eace:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ead0:	2201      	movs	r2, #1
1000ead2:	4b11      	ldr	r3, [pc, #68]	; (1000eb18 <getchar_b11_timeout+0x4c>)
1000ead4:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ead6:	4b11      	ldr	r3, [pc, #68]	; (1000eb1c <getchar_b11_timeout+0x50>)
1000ead8:	681b      	ldr	r3, [r3, #0]
1000eada:	2b00      	cmp	r3, #0
1000eadc:	d103      	bne.n	1000eae6 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000eade:	2102      	movs	r1, #2
1000eae0:	480f      	ldr	r0, [pc, #60]	; (1000eb20 <getchar_b11_timeout+0x54>)
1000eae2:	4b10      	ldr	r3, [pc, #64]	; (1000eb24 <getchar_b11_timeout+0x58>)
1000eae4:	4798      	blx	r3

	_time_start(sec);
1000eae6:	0020      	movs	r0, r4
1000eae8:	4b0f      	ldr	r3, [pc, #60]	; (1000eb28 <getchar_b11_timeout+0x5c>)
1000eaea:	4798      	blx	r3
	
	string_input[0] = 0;
1000eaec:	490f      	ldr	r1, [pc, #60]	; (1000eb2c <getchar_b11_timeout+0x60>)
1000eaee:	2300      	movs	r3, #0
1000eaf0:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000eaf2:	2201      	movs	r2, #1
1000eaf4:	480a      	ldr	r0, [pc, #40]	; (1000eb20 <getchar_b11_timeout+0x54>)
1000eaf6:	4b0e      	ldr	r3, [pc, #56]	; (1000eb30 <getchar_b11_timeout+0x64>)
1000eaf8:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000eafa:	4c07      	ldr	r4, [pc, #28]	; (1000eb18 <getchar_b11_timeout+0x4c>)
1000eafc:	4d0d      	ldr	r5, [pc, #52]	; (1000eb34 <getchar_b11_timeout+0x68>)
1000eafe:	7823      	ldrb	r3, [r4, #0]
1000eb00:	2b02      	cmp	r3, #2
1000eb02:	d002      	beq.n	1000eb0a <getchar_b11_timeout+0x3e>
1000eb04:	47a8      	blx	r5
1000eb06:	2800      	cmp	r0, #0
1000eb08:	d1f9      	bne.n	1000eafe <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000eb0a:	2200      	movs	r2, #0
1000eb0c:	4b02      	ldr	r3, [pc, #8]	; (1000eb18 <getchar_b11_timeout+0x4c>)
1000eb0e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000eb10:	4b06      	ldr	r3, [pc, #24]	; (1000eb2c <getchar_b11_timeout+0x60>)
1000eb12:	7818      	ldrb	r0, [r3, #0]
}
1000eb14:	bd70      	pop	{r4, r5, r6, pc}
1000eb16:	46c0      	nop			; (mov r8, r8)
1000eb18:	1001968c 	.word	0x1001968c
1000eb1c:	10019694 	.word	0x10019694
1000eb20:	1001a33c 	.word	0x1001a33c
1000eb24:	1000d309 	.word	0x1000d309
1000eb28:	1000ea65 	.word	0x1000ea65
1000eb2c:	10019690 	.word	0x10019690
1000eb30:	1000d2cd 	.word	0x1000d2cd
1000eb34:	1000eabd 	.word	0x1000eabd

1000eb38 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000eb38:	4b02      	ldr	r3, [pc, #8]	; (1000eb44 <platform_event_free+0xc>)
1000eb3a:	681a      	ldr	r2, [r3, #0]
1000eb3c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000eb3e:	6018      	str	r0, [r3, #0]
}
1000eb40:	4770      	bx	lr
1000eb42:	46c0      	nop			; (mov r8, r8)
1000eb44:	1001969c 	.word	0x1001969c

1000eb48 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000eb48:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000eb4a:	4b0b      	ldr	r3, [pc, #44]	; (1000eb78 <platform_event_post+0x30>)
1000eb4c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000eb4e:	2c00      	cmp	r4, #0
1000eb50:	d011      	beq.n	1000eb76 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000eb52:	6825      	ldr	r5, [r4, #0]
1000eb54:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000eb56:	2300      	movs	r3, #0
1000eb58:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000eb5a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000eb5c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000eb5e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000eb60:	4b06      	ldr	r3, [pc, #24]	; (1000eb7c <platform_event_post+0x34>)
1000eb62:	681a      	ldr	r2, [r3, #0]
1000eb64:	2a00      	cmp	r2, #0
1000eb66:	d102      	bne.n	1000eb6e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000eb68:	601c      	str	r4, [r3, #0]
1000eb6a:	e004      	b.n	1000eb76 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000eb6c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000eb6e:	6813      	ldr	r3, [r2, #0]
1000eb70:	2b00      	cmp	r3, #0
1000eb72:	d1fb      	bne.n	1000eb6c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000eb74:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000eb76:	bd30      	pop	{r4, r5, pc}
1000eb78:	1001969c 	.word	0x1001969c
1000eb7c:	10019698 	.word	0x10019698

1000eb80 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000eb80:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000eb82:	2300      	movs	r3, #0
1000eb84:	4a06      	ldr	r2, [pc, #24]	; (1000eba0 <platform_event_init+0x20>)
1000eb86:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000eb88:	4a06      	ldr	r2, [pc, #24]	; (1000eba4 <platform_event_init+0x24>)
1000eb8a:	6013      	str	r3, [r2, #0]
1000eb8c:	4c06      	ldr	r4, [pc, #24]	; (1000eba8 <platform_event_init+0x28>)
1000eb8e:	0026      	movs	r6, r4
1000eb90:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000eb92:	4d06      	ldr	r5, [pc, #24]	; (1000ebac <platform_event_init+0x2c>)
1000eb94:	0020      	movs	r0, r4
1000eb96:	47a8      	blx	r5
1000eb98:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000eb9a:	42b4      	cmp	r4, r6
1000eb9c:	d1fa      	bne.n	1000eb94 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000eb9e:	bd70      	pop	{r4, r5, r6, pc}
1000eba0:	1001969c 	.word	0x1001969c
1000eba4:	10019698 	.word	0x10019698
1000eba8:	100196a0 	.word	0x100196a0
1000ebac:	1000eb39 	.word	0x1000eb39

1000ebb0 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ebb0:	b570      	push	{r4, r5, r6, lr}
1000ebb2:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ebb4:	4b13      	ldr	r3, [pc, #76]	; (1000ec04 <at_ke_msg_send+0x54>)
1000ebb6:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ebb8:	4b13      	ldr	r3, [pc, #76]	; (1000ec08 <at_ke_msg_send+0x58>)
1000ebba:	681b      	ldr	r3, [r3, #0]
1000ebbc:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ebbe:	2c0c      	cmp	r4, #12
1000ebc0:	d01f      	beq.n	1000ec02 <at_ke_msg_send+0x52>
1000ebc2:	3c0c      	subs	r4, #12
1000ebc4:	88e3      	ldrh	r3, [r4, #6]
1000ebc6:	2b05      	cmp	r3, #5
1000ebc8:	d01b      	beq.n	1000ec02 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ebca:	07eb      	lsls	r3, r5, #31
1000ebcc:	d414      	bmi.n	1000ebf8 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ebce:	4b0f      	ldr	r3, [pc, #60]	; (1000ec0c <at_ke_msg_send+0x5c>)
1000ebd0:	681b      	ldr	r3, [r3, #0]
1000ebd2:	2002      	movs	r0, #2
1000ebd4:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ebd6:	4b0e      	ldr	r3, [pc, #56]	; (1000ec10 <at_ke_msg_send+0x60>)
1000ebd8:	681b      	ldr	r3, [r3, #0]
1000ebda:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ebdc:	4c0d      	ldr	r4, [pc, #52]	; (1000ec14 <at_ke_msg_send+0x64>)
1000ebde:	2003      	movs	r0, #3
1000ebe0:	6823      	ldr	r3, [r4, #0]
1000ebe2:	4798      	blx	r3
1000ebe4:	2800      	cmp	r0, #0
1000ebe6:	d1fa      	bne.n	1000ebde <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ebe8:	4b0b      	ldr	r3, [pc, #44]	; (1000ec18 <at_ke_msg_send+0x68>)
1000ebea:	681b      	ldr	r3, [r3, #0]
1000ebec:	3002      	adds	r0, #2
1000ebee:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ebf0:	2201      	movs	r2, #1
1000ebf2:	4b0a      	ldr	r3, [pc, #40]	; (1000ec1c <at_ke_msg_send+0x6c>)
1000ebf4:	601a      	str	r2, [r3, #0]
1000ebf6:	e004      	b.n	1000ec02 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ebf8:	4b09      	ldr	r3, [pc, #36]	; (1000ec20 <at_ke_msg_send+0x70>)
1000ebfa:	6818      	ldr	r0, [r3, #0]
1000ebfc:	4b09      	ldr	r3, [pc, #36]	; (1000ec24 <at_ke_msg_send+0x74>)
1000ebfe:	681b      	ldr	r3, [r3, #0]
1000ec00:	4798      	blx	r3
		}
	}
}
1000ec02:	bd70      	pop	{r4, r5, r6, pc}
1000ec04:	4000b1ec 	.word	0x4000b1ec
1000ec08:	10019748 	.word	0x10019748
1000ec0c:	10019740 	.word	0x10019740
1000ec10:	10019754 	.word	0x10019754
1000ec14:	10019728 	.word	0x10019728
1000ec18:	10019730 	.word	0x10019730
1000ec1c:	4000b020 	.word	0x4000b020
1000ec20:	10019734 	.word	0x10019734
1000ec24:	10019724 	.word	0x10019724

1000ec28 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ec28:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ec2a:	4b06      	ldr	r3, [pc, #24]	; (1000ec44 <samb11_plf_resume_callback+0x1c>)
1000ec2c:	4a06      	ldr	r2, [pc, #24]	; (1000ec48 <samb11_plf_resume_callback+0x20>)
1000ec2e:	6819      	ldr	r1, [r3, #0]
1000ec30:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ec32:	685a      	ldr	r2, [r3, #4]
1000ec34:	4b05      	ldr	r3, [pc, #20]	; (1000ec4c <samb11_plf_resume_callback+0x24>)
1000ec36:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ec38:	4b05      	ldr	r3, [pc, #20]	; (1000ec50 <samb11_plf_resume_callback+0x28>)
1000ec3a:	681b      	ldr	r3, [r3, #0]
1000ec3c:	2b00      	cmp	r3, #0
1000ec3e:	d000      	beq.n	1000ec42 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ec40:	4798      	blx	r3
	}
}
1000ec42:	bd10      	pop	{r4, pc}
1000ec44:	1001a388 	.word	0x1001a388
1000ec48:	4000b00c 	.word	0x4000b00c
1000ec4c:	4000b010 	.word	0x4000b010
1000ec50:	1001a664 	.word	0x1001a664

1000ec54 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ec54:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ec56:	2232      	movs	r2, #50	; 0x32
1000ec58:	2100      	movs	r1, #0
1000ec5a:	480d      	ldr	r0, [pc, #52]	; (1000ec90 <init_port_list+0x3c>)
1000ec5c:	4b0d      	ldr	r3, [pc, #52]	; (1000ec94 <init_port_list+0x40>)
1000ec5e:	4798      	blx	r3
1000ec60:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ec62:	480b      	ldr	r0, [pc, #44]	; (1000ec90 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ec64:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ec66:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ec68:	004a      	lsls	r2, r1, #1
1000ec6a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ec6c:	1882      	adds	r2, r0, r2
1000ec6e:	7853      	ldrb	r3, [r2, #1]
1000ec70:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ec72:	b2db      	uxtb	r3, r3
1000ec74:	43a3      	bics	r3, r4
1000ec76:	7053      	strb	r3, [r2, #1]
1000ec78:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ec7a:	2919      	cmp	r1, #25
1000ec7c:	d1f4      	bne.n	1000ec68 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ec7e:	4b04      	ldr	r3, [pc, #16]	; (1000ec90 <init_port_list+0x3c>)
1000ec80:	785a      	ldrb	r2, [r3, #1]
1000ec82:	3918      	subs	r1, #24
1000ec84:	438a      	bics	r2, r1
1000ec86:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ec88:	78da      	ldrb	r2, [r3, #3]
1000ec8a:	438a      	bics	r2, r1
1000ec8c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000ec8e:	bd70      	pop	{r4, r5, r6, pc}
1000ec90:	1001a3a4 	.word	0x1001a3a4
1000ec94:	100149e1 	.word	0x100149e1

1000ec98 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ec98:	4a06      	ldr	r2, [pc, #24]	; (1000ecb4 <init_clock+0x1c>)
1000ec9a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ec9c:	4b06      	ldr	r3, [pc, #24]	; (1000ecb8 <init_clock+0x20>)
1000ec9e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000eca0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000eca2:	4a06      	ldr	r2, [pc, #24]	; (1000ecbc <init_clock+0x24>)
1000eca4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000eca6:	4906      	ldr	r1, [pc, #24]	; (1000ecc0 <init_clock+0x28>)
1000eca8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ecaa:	4b06      	ldr	r3, [pc, #24]	; (1000ecc4 <init_clock+0x2c>)
1000ecac:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000ecae:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000ecb0:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000ecb2:	4770      	bx	lr
1000ecb4:	4000b00c 	.word	0x4000b00c
1000ecb8:	fffe0fd3 	.word	0xfffe0fd3
1000ecbc:	1001a388 	.word	0x1001a388
1000ecc0:	4000b010 	.word	0x4000b010
1000ecc4:	ffffe7c0 	.word	0xffffe7c0

1000ecc8 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecca:	4657      	mov	r7, sl
1000eccc:	464e      	mov	r6, r9
1000ecce:	4645      	mov	r5, r8
1000ecd0:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ecd2:	4b4f      	ldr	r3, [pc, #316]	; (1000ee10 <platform_driver_init+0x148>)
1000ecd4:	781b      	ldrb	r3, [r3, #0]
1000ecd6:	2b00      	cmp	r3, #0
1000ecd8:	d004      	beq.n	1000ece4 <platform_driver_init+0x1c>
1000ecda:	4b4d      	ldr	r3, [pc, #308]	; (1000ee10 <platform_driver_init+0x148>)
1000ecdc:	781b      	ldrb	r3, [r3, #0]
1000ecde:	2b01      	cmp	r3, #1
1000ece0:	d100      	bne.n	1000ece4 <platform_driver_init+0x1c>
1000ece2:	e08c      	b.n	1000edfe <platform_driver_init+0x136>
		init_port_list();
1000ece4:	4b4b      	ldr	r3, [pc, #300]	; (1000ee14 <platform_driver_init+0x14c>)
1000ece6:	4798      	blx	r3
		init_clock();
1000ece8:	4b4b      	ldr	r3, [pc, #300]	; (1000ee18 <platform_driver_init+0x150>)
1000ecea:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ecec:	2300      	movs	r3, #0
1000ecee:	4698      	mov	r8, r3
1000ecf0:	4b4a      	ldr	r3, [pc, #296]	; (1000ee1c <platform_driver_init+0x154>)
1000ecf2:	4642      	mov	r2, r8
1000ecf4:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ecf6:	4c4a      	ldr	r4, [pc, #296]	; (1000ee20 <platform_driver_init+0x158>)
1000ecf8:	2380      	movs	r3, #128	; 0x80
1000ecfa:	2280      	movs	r2, #128	; 0x80
1000ecfc:	0412      	lsls	r2, r2, #16
1000ecfe:	4692      	mov	sl, r2
1000ed00:	50e2      	str	r2, [r4, r3]
1000ed02:	2280      	movs	r2, #128	; 0x80
1000ed04:	0452      	lsls	r2, r2, #17
1000ed06:	4691      	mov	r9, r2
1000ed08:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ed0a:	4d46      	ldr	r5, [pc, #280]	; (1000ee24 <platform_driver_init+0x15c>)
1000ed0c:	4b46      	ldr	r3, [pc, #280]	; (1000ee28 <platform_driver_init+0x160>)
1000ed0e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ed10:	4b46      	ldr	r3, [pc, #280]	; (1000ee2c <platform_driver_init+0x164>)
1000ed12:	4a47      	ldr	r2, [pc, #284]	; (1000ee30 <platform_driver_init+0x168>)
1000ed14:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ed16:	4947      	ldr	r1, [pc, #284]	; (1000ee34 <platform_driver_init+0x16c>)
1000ed18:	4a47      	ldr	r2, [pc, #284]	; (1000ee38 <platform_driver_init+0x170>)
1000ed1a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ed1c:	4a47      	ldr	r2, [pc, #284]	; (1000ee3c <platform_driver_init+0x174>)
1000ed1e:	6811      	ldr	r1, [r2, #0]
1000ed20:	4a47      	ldr	r2, [pc, #284]	; (1000ee40 <platform_driver_init+0x178>)
1000ed22:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ed24:	4a47      	ldr	r2, [pc, #284]	; (1000ee44 <platform_driver_init+0x17c>)
1000ed26:	6811      	ldr	r1, [r2, #0]
1000ed28:	4a47      	ldr	r2, [pc, #284]	; (1000ee48 <platform_driver_init+0x180>)
1000ed2a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ed2c:	4947      	ldr	r1, [pc, #284]	; (1000ee4c <platform_driver_init+0x184>)
1000ed2e:	4a48      	ldr	r2, [pc, #288]	; (1000ee50 <platform_driver_init+0x188>)
1000ed30:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ed32:	4948      	ldr	r1, [pc, #288]	; (1000ee54 <platform_driver_init+0x18c>)
1000ed34:	4a48      	ldr	r2, [pc, #288]	; (1000ee58 <platform_driver_init+0x190>)
1000ed36:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ed38:	4f48      	ldr	r7, [pc, #288]	; (1000ee5c <platform_driver_init+0x194>)
1000ed3a:	4a49      	ldr	r2, [pc, #292]	; (1000ee60 <platform_driver_init+0x198>)
1000ed3c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ed3e:	4949      	ldr	r1, [pc, #292]	; (1000ee64 <platform_driver_init+0x19c>)
1000ed40:	4a49      	ldr	r2, [pc, #292]	; (1000ee68 <platform_driver_init+0x1a0>)
1000ed42:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ed44:	4949      	ldr	r1, [pc, #292]	; (1000ee6c <platform_driver_init+0x1a4>)
1000ed46:	4a4a      	ldr	r2, [pc, #296]	; (1000ee70 <platform_driver_init+0x1a8>)
1000ed48:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ed4a:	4e4a      	ldr	r6, [pc, #296]	; (1000ee74 <platform_driver_init+0x1ac>)
1000ed4c:	4a4a      	ldr	r2, [pc, #296]	; (1000ee78 <platform_driver_init+0x1b0>)
1000ed4e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ed50:	494a      	ldr	r1, [pc, #296]	; (1000ee7c <platform_driver_init+0x1b4>)
1000ed52:	4a4b      	ldr	r2, [pc, #300]	; (1000ee80 <platform_driver_init+0x1b8>)
1000ed54:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ed56:	494b      	ldr	r1, [pc, #300]	; (1000ee84 <platform_driver_init+0x1bc>)
1000ed58:	4a4b      	ldr	r2, [pc, #300]	; (1000ee88 <platform_driver_init+0x1c0>)
1000ed5a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ed5c:	494b      	ldr	r1, [pc, #300]	; (1000ee8c <platform_driver_init+0x1c4>)
1000ed5e:	4a4c      	ldr	r2, [pc, #304]	; (1000ee90 <platform_driver_init+0x1c8>)
1000ed60:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ed62:	494c      	ldr	r1, [pc, #304]	; (1000ee94 <platform_driver_init+0x1cc>)
1000ed64:	4a4c      	ldr	r2, [pc, #304]	; (1000ee98 <platform_driver_init+0x1d0>)
1000ed66:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ed68:	494c      	ldr	r1, [pc, #304]	; (1000ee9c <platform_driver_init+0x1d4>)
1000ed6a:	4a4d      	ldr	r2, [pc, #308]	; (1000eea0 <platform_driver_init+0x1d8>)
1000ed6c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ed6e:	2028      	movs	r0, #40	; 0x28
1000ed70:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ed72:	494c      	ldr	r1, [pc, #304]	; (1000eea4 <platform_driver_init+0x1dc>)
1000ed74:	2028      	movs	r0, #40	; 0x28
1000ed76:	682b      	ldr	r3, [r5, #0]
1000ed78:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ed7a:	682b      	ldr	r3, [r5, #0]
1000ed7c:	494a      	ldr	r1, [pc, #296]	; (1000eea8 <platform_driver_init+0x1e0>)
1000ed7e:	2027      	movs	r0, #39	; 0x27
1000ed80:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ed82:	4b4a      	ldr	r3, [pc, #296]	; (1000eeac <platform_driver_init+0x1e4>)
1000ed84:	681a      	ldr	r2, [r3, #0]
1000ed86:	4b4a      	ldr	r3, [pc, #296]	; (1000eeb0 <platform_driver_init+0x1e8>)
1000ed88:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ed8a:	4a4a      	ldr	r2, [pc, #296]	; (1000eeb4 <platform_driver_init+0x1ec>)
1000ed8c:	4b4a      	ldr	r3, [pc, #296]	; (1000eeb8 <platform_driver_init+0x1f0>)
1000ed8e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ed90:	4a4a      	ldr	r2, [pc, #296]	; (1000eebc <platform_driver_init+0x1f4>)
1000ed92:	4b4b      	ldr	r3, [pc, #300]	; (1000eec0 <platform_driver_init+0x1f8>)
1000ed94:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ed96:	4a4b      	ldr	r2, [pc, #300]	; (1000eec4 <platform_driver_init+0x1fc>)
1000ed98:	4b4b      	ldr	r3, [pc, #300]	; (1000eec8 <platform_driver_init+0x200>)
1000ed9a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000ed9c:	4a4b      	ldr	r2, [pc, #300]	; (1000eecc <platform_driver_init+0x204>)
1000ed9e:	4b4c      	ldr	r3, [pc, #304]	; (1000eed0 <platform_driver_init+0x208>)
1000eda0:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000eda2:	4a4c      	ldr	r2, [pc, #304]	; (1000eed4 <platform_driver_init+0x20c>)
1000eda4:	4b4c      	ldr	r3, [pc, #304]	; (1000eed8 <platform_driver_init+0x210>)
1000eda6:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000eda8:	4a4c      	ldr	r2, [pc, #304]	; (1000eedc <platform_driver_init+0x214>)
1000edaa:	4b4d      	ldr	r3, [pc, #308]	; (1000eee0 <platform_driver_init+0x218>)
1000edac:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000edae:	4a4d      	ldr	r2, [pc, #308]	; (1000eee4 <platform_driver_init+0x21c>)
1000edb0:	4b4d      	ldr	r3, [pc, #308]	; (1000eee8 <platform_driver_init+0x220>)
1000edb2:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000edb4:	22a0      	movs	r2, #160	; 0xa0
1000edb6:	0092      	lsls	r2, r2, #2
1000edb8:	2100      	movs	r1, #0
1000edba:	484c      	ldr	r0, [pc, #304]	; (1000eeec <platform_driver_init+0x224>)
1000edbc:	4b4c      	ldr	r3, [pc, #304]	; (1000eef0 <platform_driver_init+0x228>)
1000edbe:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000edc0:	2280      	movs	r2, #128	; 0x80
1000edc2:	0092      	lsls	r2, r2, #2
1000edc4:	4b4b      	ldr	r3, [pc, #300]	; (1000eef4 <platform_driver_init+0x22c>)
1000edc6:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000edc8:	4b4b      	ldr	r3, [pc, #300]	; (1000eef8 <platform_driver_init+0x230>)
1000edca:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000edcc:	4653      	mov	r3, sl
1000edce:	6023      	str	r3, [r4, #0]
1000edd0:	464b      	mov	r3, r9
1000edd2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000edd4:	4b49      	ldr	r3, [pc, #292]	; (1000eefc <platform_driver_init+0x234>)
1000edd6:	4642      	mov	r2, r8
1000edd8:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000edda:	683b      	ldr	r3, [r7, #0]
1000eddc:	4a48      	ldr	r2, [pc, #288]	; (1000ef00 <platform_driver_init+0x238>)
1000edde:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ede0:	6833      	ldr	r3, [r6, #0]
1000ede2:	4a48      	ldr	r2, [pc, #288]	; (1000ef04 <platform_driver_init+0x23c>)
1000ede4:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ede6:	2000      	movs	r0, #0
1000ede8:	4c47      	ldr	r4, [pc, #284]	; (1000ef08 <platform_driver_init+0x240>)
1000edea:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000edec:	2001      	movs	r0, #1
1000edee:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000edf0:	2002      	movs	r0, #2
1000edf2:	47a0      	blx	r4
		platform_initialized = 1;
1000edf4:	2201      	movs	r2, #1
1000edf6:	4b06      	ldr	r3, [pc, #24]	; (1000ee10 <platform_driver_init+0x148>)
1000edf8:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000edfa:	2000      	movs	r0, #0
1000edfc:	e003      	b.n	1000ee06 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000edfe:	2201      	movs	r2, #1
1000ee00:	4b03      	ldr	r3, [pc, #12]	; (1000ee10 <platform_driver_init+0x148>)
1000ee02:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ee04:	2001      	movs	r0, #1
	}
	return status;
}
1000ee06:	bc1c      	pop	{r2, r3, r4}
1000ee08:	4690      	mov	r8, r2
1000ee0a:	4699      	mov	r9, r3
1000ee0c:	46a2      	mov	sl, r4
1000ee0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee10:	1001972c 	.word	0x1001972c
1000ee14:	1000ec55 	.word	0x1000ec55
1000ee18:	1000ec99 	.word	0x1000ec99
1000ee1c:	1001974c 	.word	0x1001974c
1000ee20:	e000e100 	.word	0xe000e100
1000ee24:	1001a658 	.word	0x1001a658
1000ee28:	000007d7 	.word	0x000007d7
1000ee2c:	000007bd 	.word	0x000007bd
1000ee30:	1001a394 	.word	0x1001a394
1000ee34:	0001bc51 	.word	0x0001bc51
1000ee38:	1001a65c 	.word	0x1001a65c
1000ee3c:	100400bc 	.word	0x100400bc
1000ee40:	10019720 	.word	0x10019720
1000ee44:	100400b8 	.word	0x100400b8
1000ee48:	1001971c 	.word	0x1001971c
1000ee4c:	0001b99f 	.word	0x0001b99f
1000ee50:	1001a390 	.word	0x1001a390
1000ee54:	0001b9db 	.word	0x0001b9db
1000ee58:	1001a39c 	.word	0x1001a39c
1000ee5c:	1001a66c 	.word	0x1001a66c
1000ee60:	1004003c 	.word	0x1004003c
1000ee64:	10041fc0 	.word	0x10041fc0
1000ee68:	1001a3a0 	.word	0x1001a3a0
1000ee6c:	10041fc4 	.word	0x10041fc4
1000ee70:	1001a668 	.word	0x1001a668
1000ee74:	1001a660 	.word	0x1001a660
1000ee78:	10041fd4 	.word	0x10041fd4
1000ee7c:	10041fd8 	.word	0x10041fd8
1000ee80:	1001a398 	.word	0x1001a398
1000ee84:	0001cbe9 	.word	0x0001cbe9
1000ee88:	10019740 	.word	0x10019740
1000ee8c:	0001cd8f 	.word	0x0001cd8f
1000ee90:	10019730 	.word	0x10019730
1000ee94:	0001cea3 	.word	0x0001cea3
1000ee98:	10019754 	.word	0x10019754
1000ee9c:	0001cbcf 	.word	0x0001cbcf
1000eea0:	10019728 	.word	0x10019728
1000eea4:	1000f351 	.word	0x1000f351
1000eea8:	1000f2e5 	.word	0x1000f2e5
1000eeac:	100400e4 	.word	0x100400e4
1000eeb0:	10019748 	.word	0x10019748
1000eeb4:	00019fe9 	.word	0x00019fe9
1000eeb8:	10019758 	.word	0x10019758
1000eebc:	0001dbdd 	.word	0x0001dbdd
1000eec0:	10019724 	.word	0x10019724
1000eec4:	0001dc5b 	.word	0x0001dc5b
1000eec8:	10019738 	.word	0x10019738
1000eecc:	100405ec 	.word	0x100405ec
1000eed0:	10019734 	.word	0x10019734
1000eed4:	0001d5e3 	.word	0x0001d5e3
1000eed8:	10019744 	.word	0x10019744
1000eedc:	10040c20 	.word	0x10040c20
1000eee0:	1001975c 	.word	0x1001975c
1000eee4:	00019f09 	.word	0x00019f09
1000eee8:	10019718 	.word	0x10019718
1000eeec:	1001a3d8 	.word	0x1001a3d8
1000eef0:	100149e1 	.word	0x100149e1
1000eef4:	1001a670 	.word	0x1001a670
1000eef8:	1000eb81 	.word	0x1000eb81
1000eefc:	1001a664 	.word	0x1001a664
1000ef00:	1000ec29 	.word	0x1000ec29
1000ef04:	1000f3ad 	.word	0x1000f3ad
1000ef08:	1000f395 	.word	0x1000f395

1000ef0c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ef0c:	4b04      	ldr	r3, [pc, #16]	; (1000ef20 <platform_register_ble_msg_handler+0x14>)
1000ef0e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ef10:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ef12:	2a01      	cmp	r2, #1
1000ef14:	d102      	bne.n	1000ef1c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000ef16:	4b03      	ldr	r3, [pc, #12]	; (1000ef24 <platform_register_ble_msg_handler+0x18>)
1000ef18:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000ef1a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000ef1c:	0018      	movs	r0, r3
1000ef1e:	4770      	bx	lr
1000ef20:	1001972c 	.word	0x1001972c
1000ef24:	1001974c 	.word	0x1001974c

1000ef28 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000ef28:	b570      	push	{r4, r5, r6, lr}
1000ef2a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000ef2c:	4b0e      	ldr	r3, [pc, #56]	; (1000ef68 <platform_interface_send+0x40>)
1000ef2e:	681b      	ldr	r3, [r3, #0]
1000ef30:	2b00      	cmp	r3, #0
1000ef32:	d002      	beq.n	1000ef3a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000ef34:	8840      	ldrh	r0, [r0, #2]
1000ef36:	4798      	blx	r3
1000ef38:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000ef3a:	88e3      	ldrh	r3, [r4, #6]
1000ef3c:	88a2      	ldrh	r2, [r4, #4]
1000ef3e:	8861      	ldrh	r1, [r4, #2]
1000ef40:	8820      	ldrh	r0, [r4, #0]
1000ef42:	4d0a      	ldr	r5, [pc, #40]	; (1000ef6c <platform_interface_send+0x44>)
1000ef44:	682d      	ldr	r5, [r5, #0]
1000ef46:	47a8      	blx	r5
1000ef48:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000ef4a:	88e2      	ldrh	r2, [r4, #6]
1000ef4c:	2a00      	cmp	r2, #0
1000ef4e:	d102      	bne.n	1000ef56 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000ef50:	4b07      	ldr	r3, [pc, #28]	; (1000ef70 <platform_interface_send+0x48>)
1000ef52:	4798      	blx	r3
1000ef54:	e006      	b.n	1000ef64 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000ef56:	0021      	movs	r1, r4
1000ef58:	3108      	adds	r1, #8
1000ef5a:	4b06      	ldr	r3, [pc, #24]	; (1000ef74 <platform_interface_send+0x4c>)
1000ef5c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000ef5e:	0028      	movs	r0, r5
1000ef60:	4b03      	ldr	r3, [pc, #12]	; (1000ef70 <platform_interface_send+0x48>)
1000ef62:	4798      	blx	r3
	}
}
1000ef64:	bd70      	pop	{r4, r5, r6, pc}
1000ef66:	46c0      	nop			; (mov r8, r8)
1000ef68:	10019720 	.word	0x10019720
1000ef6c:	10019758 	.word	0x10019758
1000ef70:	1000ebb1 	.word	0x1000ebb1
1000ef74:	100149cf 	.word	0x100149cf

1000ef78 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ef78:	b570      	push	{r4, r5, r6, lr}
1000ef7a:	0015      	movs	r5, r2
1000ef7c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000ef7e:	020a      	lsls	r2, r1, #8
1000ef80:	4302      	orrs	r2, r0
1000ef82:	4b0a      	ldr	r3, [pc, #40]	; (1000efac <send_plf_int_msg_ind+0x34>)
1000ef84:	681e      	ldr	r6, [r3, #0]
1000ef86:	0023      	movs	r3, r4
1000ef88:	2105      	movs	r1, #5
1000ef8a:	20a0      	movs	r0, #160	; 0xa0
1000ef8c:	00c0      	lsls	r0, r0, #3
1000ef8e:	47b0      	blx	r6
1000ef90:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000ef92:	d00a      	beq.n	1000efaa <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000ef94:	2c00      	cmp	r4, #0
1000ef96:	d005      	beq.n	1000efa4 <send_plf_int_msg_ind+0x2c>
1000ef98:	2d00      	cmp	r5, #0
1000ef9a:	d003      	beq.n	1000efa4 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000ef9c:	0022      	movs	r2, r4
1000ef9e:	0029      	movs	r1, r5
1000efa0:	4b03      	ldr	r3, [pc, #12]	; (1000efb0 <send_plf_int_msg_ind+0x38>)
1000efa2:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000efa4:	0030      	movs	r0, r6
1000efa6:	4b03      	ldr	r3, [pc, #12]	; (1000efb4 <send_plf_int_msg_ind+0x3c>)
1000efa8:	4798      	blx	r3
	}
}
1000efaa:	bd70      	pop	{r4, r5, r6, pc}
1000efac:	10019758 	.word	0x10019758
1000efb0:	100149cf 	.word	0x100149cf
1000efb4:	1000ebb1 	.word	0x1000ebb1

1000efb8 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efba:	465f      	mov	r7, fp
1000efbc:	4656      	mov	r6, sl
1000efbe:	464d      	mov	r5, r9
1000efc0:	4644      	mov	r4, r8
1000efc2:	b4f0      	push	{r4, r5, r6, r7}
1000efc4:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000efc6:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000efc8:	2300      	movs	r3, #0
1000efca:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000efcc:	1ce3      	adds	r3, r4, #3
1000efce:	d81c      	bhi.n	1000f00a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000efd0:	220d      	movs	r2, #13
1000efd2:	2100      	movs	r1, #0
1000efd4:	a802      	add	r0, sp, #8
1000efd6:	4b82      	ldr	r3, [pc, #520]	; (1000f1e0 <platform_event_wait+0x228>)
1000efd8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000efda:	2333      	movs	r3, #51	; 0x33
1000efdc:	aa02      	add	r2, sp, #8
1000efde:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000efe0:	3b30      	subs	r3, #48	; 0x30
1000efe2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000efe4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000efe6:	3302      	adds	r3, #2
1000efe8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000efea:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000efec:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000efee:	0a23      	lsrs	r3, r4, #8
1000eff0:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000eff2:	0c23      	lsrs	r3, r4, #16
1000eff4:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000eff6:	0e24      	lsrs	r4, r4, #24
1000eff8:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000effa:	2301      	movs	r3, #1
1000effc:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000effe:	210d      	movs	r1, #13
1000f000:	0010      	movs	r0, r2
1000f002:	4b78      	ldr	r3, [pc, #480]	; (1000f1e4 <platform_event_wait+0x22c>)
1000f004:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f006:	2301      	movs	r3, #1
1000f008:	4699      	mov	r9, r3
1000f00a:	2400      	movs	r4, #0
1000f00c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f00e:	4f76      	ldr	r7, [pc, #472]	; (1000f1e8 <platform_event_wait+0x230>)
1000f010:	4e76      	ldr	r6, [pc, #472]	; (1000f1ec <platform_event_wait+0x234>)
1000f012:	4977      	ldr	r1, [pc, #476]	; (1000f1f0 <platform_event_wait+0x238>)
1000f014:	6838      	ldr	r0, [r7, #0]
1000f016:	6833      	ldr	r3, [r6, #0]
1000f018:	4798      	blx	r3
1000f01a:	2800      	cmp	r0, #0
1000f01c:	d000      	beq.n	1000f020 <platform_event_wait+0x68>
1000f01e:	e088      	b.n	1000f132 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f020:	4b73      	ldr	r3, [pc, #460]	; (1000f1f0 <platform_event_wait+0x238>)
1000f022:	681c      	ldr	r4, [r3, #0]
1000f024:	88a3      	ldrh	r3, [r4, #4]
1000f026:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f028:	23cd      	movs	r3, #205	; 0xcd
1000f02a:	009b      	lsls	r3, r3, #2
1000f02c:	459a      	cmp	sl, r3
1000f02e:	d100      	bne.n	1000f032 <platform_event_wait+0x7a>
1000f030:	e0c7      	b.n	1000f1c2 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f032:	8923      	ldrh	r3, [r4, #8]
1000f034:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f036:	8963      	ldrh	r3, [r4, #10]
1000f038:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f03a:	464b      	mov	r3, r9
1000f03c:	2b00      	cmp	r3, #0
1000f03e:	d011      	beq.n	1000f064 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f040:	220d      	movs	r2, #13
1000f042:	2100      	movs	r1, #0
1000f044:	a802      	add	r0, sp, #8
1000f046:	4b66      	ldr	r3, [pc, #408]	; (1000f1e0 <platform_event_wait+0x228>)
1000f048:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f04a:	2333      	movs	r3, #51	; 0x33
1000f04c:	aa02      	add	r2, sp, #8
1000f04e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f050:	3b30      	subs	r3, #48	; 0x30
1000f052:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f054:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f056:	3302      	adds	r3, #2
1000f058:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f05a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f05c:	210d      	movs	r1, #13
1000f05e:	0010      	movs	r0, r2
1000f060:	4b60      	ldr	r3, [pc, #384]	; (1000f1e4 <platform_event_wait+0x22c>)
1000f062:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f064:	23a0      	movs	r3, #160	; 0xa0
1000f066:	00db      	lsls	r3, r3, #3
1000f068:	459a      	cmp	sl, r3
1000f06a:	d121      	bne.n	1000f0b0 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f06c:	4b61      	ldr	r3, [pc, #388]	; (1000f1f4 <platform_event_wait+0x23c>)
1000f06e:	881b      	ldrh	r3, [r3, #0]
1000f070:	4443      	add	r3, r8
1000f072:	22a0      	movs	r2, #160	; 0xa0
1000f074:	0092      	lsls	r2, r2, #2
1000f076:	4293      	cmp	r3, r2
1000f078:	dd02      	ble.n	1000f080 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f07a:	3a80      	subs	r2, #128	; 0x80
1000f07c:	4b5d      	ldr	r3, [pc, #372]	; (1000f1f4 <platform_event_wait+0x23c>)
1000f07e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f080:	4b5c      	ldr	r3, [pc, #368]	; (1000f1f4 <platform_event_wait+0x23c>)
1000f082:	469a      	mov	sl, r3
1000f084:	881d      	ldrh	r5, [r3, #0]
1000f086:	4b5c      	ldr	r3, [pc, #368]	; (1000f1f8 <platform_event_wait+0x240>)
1000f088:	18ed      	adds	r5, r5, r3
1000f08a:	0021      	movs	r1, r4
1000f08c:	310c      	adds	r1, #12
1000f08e:	4642      	mov	r2, r8
1000f090:	0028      	movs	r0, r5
1000f092:	4b5a      	ldr	r3, [pc, #360]	; (1000f1fc <platform_event_wait+0x244>)
1000f094:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f096:	4642      	mov	r2, r8
1000f098:	0029      	movs	r1, r5
1000f09a:	4658      	mov	r0, fp
1000f09c:	4b58      	ldr	r3, [pc, #352]	; (1000f200 <platform_event_wait+0x248>)
1000f09e:	4798      	blx	r3
				plf_event_buff_index += len;
1000f0a0:	4653      	mov	r3, sl
1000f0a2:	881b      	ldrh	r3, [r3, #0]
1000f0a4:	4443      	add	r3, r8
1000f0a6:	4652      	mov	r2, sl
1000f0a8:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f0aa:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f0ac:	2502      	movs	r5, #2
1000f0ae:	e03a      	b.n	1000f126 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f0b0:	4b54      	ldr	r3, [pc, #336]	; (1000f204 <platform_event_wait+0x24c>)
1000f0b2:	681b      	ldr	r3, [r3, #0]
1000f0b4:	2b00      	cmp	r3, #0
1000f0b6:	d032      	beq.n	1000f11e <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f0b8:	4b4d      	ldr	r3, [pc, #308]	; (1000f1f0 <platform_event_wait+0x238>)
1000f0ba:	681a      	ldr	r2, [r3, #0]
1000f0bc:	8893      	ldrh	r3, [r2, #4]
1000f0be:	21cd      	movs	r1, #205	; 0xcd
1000f0c0:	0089      	lsls	r1, r1, #2
1000f0c2:	428b      	cmp	r3, r1
1000f0c4:	d104      	bne.n	1000f0d0 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f0c6:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f0c8:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f0ca:	2b00      	cmp	r3, #0
1000f0cc:	d02b      	beq.n	1000f126 <platform_event_wait+0x16e>
1000f0ce:	e028      	b.n	1000f122 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f0d0:	4c4d      	ldr	r4, [pc, #308]	; (1000f208 <platform_event_wait+0x250>)
1000f0d2:	4d49      	ldr	r5, [pc, #292]	; (1000f1f8 <platform_event_wait+0x240>)
1000f0d4:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f0d6:	702b      	strb	r3, [r5, #0]
1000f0d8:	0a1b      	lsrs	r3, r3, #8
1000f0da:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f0dc:	8910      	ldrh	r0, [r2, #8]
1000f0de:	4b4b      	ldr	r3, [pc, #300]	; (1000f20c <platform_event_wait+0x254>)
1000f0e0:	681b      	ldr	r3, [r3, #0]
1000f0e2:	4798      	blx	r3
1000f0e4:	7128      	strb	r0, [r5, #4]
1000f0e6:	0a00      	lsrs	r0, r0, #8
1000f0e8:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f0ea:	6820      	ldr	r0, [r4, #0]
1000f0ec:	4b40      	ldr	r3, [pc, #256]	; (1000f1f0 <platform_event_wait+0x238>)
1000f0ee:	681a      	ldr	r2, [r3, #0]
1000f0f0:	88d2      	ldrh	r2, [r2, #6]
1000f0f2:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f0f4:	681d      	ldr	r5, [r3, #0]
1000f0f6:	896b      	ldrh	r3, [r5, #10]
1000f0f8:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f0fa:	3008      	adds	r0, #8
1000f0fc:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f0fe:	896a      	ldrh	r2, [r5, #10]
1000f100:	2a00      	cmp	r2, #0
1000f102:	d003      	beq.n	1000f10c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f104:	0029      	movs	r1, r5
1000f106:	310c      	adds	r1, #12
1000f108:	4b3c      	ldr	r3, [pc, #240]	; (1000f1fc <platform_event_wait+0x244>)
1000f10a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f10c:	8969      	ldrh	r1, [r5, #10]
1000f10e:	3108      	adds	r1, #8
1000f110:	4b3c      	ldr	r3, [pc, #240]	; (1000f204 <platform_event_wait+0x24c>)
1000f112:	681b      	ldr	r3, [r3, #0]
1000f114:	4838      	ldr	r0, [pc, #224]	; (1000f1f8 <platform_event_wait+0x240>)
1000f116:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f118:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f11a:	2503      	movs	r5, #3
1000f11c:	e003      	b.n	1000f126 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f11e:	2400      	movs	r4, #0
1000f120:	e001      	b.n	1000f126 <platform_event_wait+0x16e>
1000f122:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f124:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f126:	4b32      	ldr	r3, [pc, #200]	; (1000f1f0 <platform_event_wait+0x238>)
1000f128:	6818      	ldr	r0, [r3, #0]
1000f12a:	4b39      	ldr	r3, [pc, #228]	; (1000f210 <platform_event_wait+0x258>)
1000f12c:	681b      	ldr	r3, [r3, #0]
1000f12e:	4798      	blx	r3
1000f130:	e000      	b.n	1000f134 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f132:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f134:	2c00      	cmp	r4, #0
1000f136:	d000      	beq.n	1000f13a <platform_event_wait+0x182>
1000f138:	e76b      	b.n	1000f012 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f13a:	464b      	mov	r3, r9
1000f13c:	2b00      	cmp	r3, #0
1000f13e:	d046      	beq.n	1000f1ce <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f140:	4b29      	ldr	r3, [pc, #164]	; (1000f1e8 <platform_event_wait+0x230>)
1000f142:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f144:	2e00      	cmp	r6, #0
1000f146:	d104      	bne.n	1000f152 <platform_event_wait+0x19a>
1000f148:	2300      	movs	r3, #0
1000f14a:	6a1c      	ldr	r4, [r3, #32]
1000f14c:	2c00      	cmp	r4, #0
1000f14e:	d131      	bne.n	1000f1b4 <platform_event_wait+0x1fc>
1000f150:	e03d      	b.n	1000f1ce <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f152:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f154:	2314      	movs	r3, #20
1000f156:	469c      	mov	ip, r3
1000f158:	44b4      	add	ip, r6
1000f15a:	4663      	mov	r3, ip
1000f15c:	4660      	mov	r0, ip
1000f15e:	9300      	str	r3, [sp, #0]
1000f160:	4b2c      	ldr	r3, [pc, #176]	; (1000f214 <platform_event_wait+0x25c>)
1000f162:	681b      	ldr	r3, [r3, #0]
1000f164:	4798      	blx	r3
	while(NULL != current)
1000f166:	2c00      	cmp	r4, #0
1000f168:	d01f      	beq.n	1000f1aa <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f16a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f16c:	23cd      	movs	r3, #205	; 0xcd
1000f16e:	009b      	lsls	r3, r3, #2
1000f170:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f172:	4b27      	ldr	r3, [pc, #156]	; (1000f210 <platform_event_wait+0x258>)
1000f174:	469a      	mov	sl, r3
1000f176:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f178:	6803      	ldr	r3, [r0, #0]
1000f17a:	889b      	ldrh	r3, [r3, #4]
1000f17c:	4543      	cmp	r3, r8
1000f17e:	d110      	bne.n	1000f1a2 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f180:	2f00      	cmp	r7, #0
1000f182:	d006      	beq.n	1000f192 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f184:	6883      	ldr	r3, [r0, #8]
1000f186:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f188:	4653      	mov	r3, sl
1000f18a:	681b      	ldr	r3, [r3, #0]
1000f18c:	4798      	blx	r3
				current = prev->pstrNext;
1000f18e:	68b8      	ldr	r0, [r7, #8]
1000f190:	e009      	b.n	1000f1a6 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f192:	6883      	ldr	r3, [r0, #8]
1000f194:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f196:	4b1e      	ldr	r3, [pc, #120]	; (1000f210 <platform_event_wait+0x258>)
1000f198:	681b      	ldr	r3, [r3, #0]
1000f19a:	9301      	str	r3, [sp, #4]
1000f19c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f19e:	6a30      	ldr	r0, [r6, #32]
1000f1a0:	e001      	b.n	1000f1a6 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f1a2:	0007      	movs	r7, r0
1000f1a4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f1a6:	2800      	cmp	r0, #0
1000f1a8:	d1e6      	bne.n	1000f178 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f1aa:	4b1b      	ldr	r3, [pc, #108]	; (1000f218 <platform_event_wait+0x260>)
1000f1ac:	681b      	ldr	r3, [r3, #0]
1000f1ae:	9800      	ldr	r0, [sp, #0]
1000f1b0:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f1b2:	e00c      	b.n	1000f1ce <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f1b4:	2314      	movs	r3, #20
1000f1b6:	9300      	str	r3, [sp, #0]
1000f1b8:	4b16      	ldr	r3, [pc, #88]	; (1000f214 <platform_event_wait+0x25c>)
1000f1ba:	681b      	ldr	r3, [r3, #0]
1000f1bc:	2014      	movs	r0, #20
1000f1be:	4798      	blx	r3
1000f1c0:	e7d3      	b.n	1000f16a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1c2:	4b10      	ldr	r3, [pc, #64]	; (1000f204 <platform_event_wait+0x24c>)
1000f1c4:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f1c6:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1c8:	2b00      	cmp	r3, #0
1000f1ca:	d0ac      	beq.n	1000f126 <platform_event_wait+0x16e>
1000f1cc:	e77b      	b.n	1000f0c6 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f1ce:	0028      	movs	r0, r5
1000f1d0:	b007      	add	sp, #28
1000f1d2:	bc3c      	pop	{r2, r3, r4, r5}
1000f1d4:	4690      	mov	r8, r2
1000f1d6:	4699      	mov	r9, r3
1000f1d8:	46a2      	mov	sl, r4
1000f1da:	46ab      	mov	fp, r5
1000f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1de:	46c0      	nop			; (mov r8, r8)
1000f1e0:	100149e1 	.word	0x100149e1
1000f1e4:	1000ef29 	.word	0x1000ef29
1000f1e8:	1001975c 	.word	0x1001975c
1000f1ec:	10019744 	.word	0x10019744
1000f1f0:	10019750 	.word	0x10019750
1000f1f4:	1001a670 	.word	0x1001a670
1000f1f8:	1001a3d8 	.word	0x1001a3d8
1000f1fc:	100149cf 	.word	0x100149cf
1000f200:	1000eb49 	.word	0x1000eb49
1000f204:	1001974c 	.word	0x1001974c
1000f208:	1001973c 	.word	0x1001973c
1000f20c:	1001971c 	.word	0x1001971c
1000f210:	10019718 	.word	0x10019718
1000f214:	10019738 	.word	0x10019738
1000f218:	10019724 	.word	0x10019724

1000f21c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f21c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f21e:	4b03      	ldr	r3, [pc, #12]	; (1000f22c <acquire_sleep_lock+0x10>)
1000f220:	681b      	ldr	r3, [r3, #0]
1000f222:	2080      	movs	r0, #128	; 0x80
1000f224:	0200      	lsls	r0, r0, #8
1000f226:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f228:	2008      	movs	r0, #8
1000f22a:	bd10      	pop	{r4, pc}
1000f22c:	1001a390 	.word	0x1001a390

1000f230 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f230:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f232:	4b03      	ldr	r3, [pc, #12]	; (1000f240 <release_message_lock+0x10>)
1000f234:	681b      	ldr	r3, [r3, #0]
1000f236:	2080      	movs	r0, #128	; 0x80
1000f238:	01c0      	lsls	r0, r0, #7
1000f23a:	4798      	blx	r3
	return status;
}
1000f23c:	2000      	movs	r0, #0
1000f23e:	bd10      	pop	{r4, pc}
1000f240:	1001a39c 	.word	0x1001a39c

1000f244 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f244:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f246:	4c05      	ldr	r4, [pc, #20]	; (1000f25c <release_sleep_lock+0x18>)
1000f248:	2080      	movs	r0, #128	; 0x80
1000f24a:	01c0      	lsls	r0, r0, #7
1000f24c:	6823      	ldr	r3, [r4, #0]
1000f24e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f250:	6823      	ldr	r3, [r4, #0]
1000f252:	2080      	movs	r0, #128	; 0x80
1000f254:	0200      	lsls	r0, r0, #8
1000f256:	4798      	blx	r3
	return status;
}
1000f258:	2000      	movs	r0, #0
1000f25a:	bd10      	pop	{r4, pc}
1000f25c:	1001a39c 	.word	0x1001a39c

1000f260 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f260:	2800      	cmp	r0, #0
1000f262:	d003      	beq.n	1000f26c <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f264:	4b02      	ldr	r3, [pc, #8]	; (1000f270 <register_resume_callback+0x10>)
1000f266:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f268:	2000      	movs	r0, #0
1000f26a:	e000      	b.n	1000f26e <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f26c:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f26e:	4770      	bx	lr
1000f270:	1001a664 	.word	0x1001a664

1000f274 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f274:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f276:	4a18      	ldr	r2, [pc, #96]	; (1000f2d8 <gpio1_combined_isr_handler+0x64>)
1000f278:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f27a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f27c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f27e:	2180      	movs	r1, #128	; 0x80
1000f280:	0209      	lsls	r1, r1, #8
1000f282:	4301      	orrs	r1, r0
1000f284:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f286:	0010      	movs	r0, r2
1000f288:	4d14      	ldr	r5, [pc, #80]	; (1000f2dc <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f28a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f28c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f28e:	05db      	lsls	r3, r3, #23
1000f290:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f292:	d011      	beq.n	1000f2b8 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f294:	b2db      	uxtb	r3, r3
1000f296:	4259      	negs	r1, r3
1000f298:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f29a:	2b01      	cmp	r3, #1
1000f29c:	d006      	beq.n	1000f2ac <gpio1_combined_isr_handler+0x38>
1000f29e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f2a0:	085b      	lsrs	r3, r3, #1
				index++;
1000f2a2:	3101      	adds	r1, #1
1000f2a4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f2a6:	2b01      	cmp	r3, #1
1000f2a8:	d1fa      	bne.n	1000f2a0 <gpio1_combined_isr_handler+0x2c>
1000f2aa:	e000      	b.n	1000f2ae <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f2ac:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f2ae:	0023      	movs	r3, r4
1000f2b0:	408b      	lsls	r3, r1
1000f2b2:	b29b      	uxth	r3, r3
1000f2b4:	8703      	strh	r3, [r0, #56]	; 0x38
1000f2b6:	e003      	b.n	1000f2c0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f2b8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f2ba:	432b      	orrs	r3, r5
1000f2bc:	b29b      	uxth	r3, r3
1000f2be:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f2c0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f2c2:	05db      	lsls	r3, r3, #23
1000f2c4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f2c6:	d1e2      	bne.n	1000f28e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f2c8:	2180      	movs	r1, #128	; 0x80
1000f2ca:	0049      	lsls	r1, r1, #1
1000f2cc:	3381      	adds	r3, #129	; 0x81
1000f2ce:	33ff      	adds	r3, #255	; 0xff
1000f2d0:	4a03      	ldr	r2, [pc, #12]	; (1000f2e0 <gpio1_combined_isr_handler+0x6c>)
1000f2d2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f2d4:	bd30      	pop	{r4, r5, pc}
1000f2d6:	46c0      	nop			; (mov r8, r8)
1000f2d8:	40011000 	.word	0x40011000
1000f2dc:	ffff8000 	.word	0xffff8000
1000f2e0:	e000e100 	.word	0xe000e100

1000f2e4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f2e4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f2e6:	4a17      	ldr	r2, [pc, #92]	; (1000f344 <gpio0_combined_isr_handler+0x60>)
1000f2e8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f2ea:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f2ec:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f2ee:	2180      	movs	r1, #128	; 0x80
1000f2f0:	0209      	lsls	r1, r1, #8
1000f2f2:	4301      	orrs	r1, r0
1000f2f4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f2f6:	0010      	movs	r0, r2
1000f2f8:	4d13      	ldr	r5, [pc, #76]	; (1000f348 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f2fa:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f2fc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f2fe:	05db      	lsls	r3, r3, #23
1000f300:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f302:	d011      	beq.n	1000f328 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f304:	b2db      	uxtb	r3, r3
1000f306:	4259      	negs	r1, r3
1000f308:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f30a:	2b01      	cmp	r3, #1
1000f30c:	d006      	beq.n	1000f31c <gpio0_combined_isr_handler+0x38>
1000f30e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f310:	085b      	lsrs	r3, r3, #1
				index++;
1000f312:	3101      	adds	r1, #1
1000f314:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f316:	2b01      	cmp	r3, #1
1000f318:	d1fa      	bne.n	1000f310 <gpio0_combined_isr_handler+0x2c>
1000f31a:	e000      	b.n	1000f31e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f31c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f31e:	0023      	movs	r3, r4
1000f320:	408b      	lsls	r3, r1
1000f322:	b29b      	uxth	r3, r3
1000f324:	8703      	strh	r3, [r0, #56]	; 0x38
1000f326:	e003      	b.n	1000f330 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f328:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f32a:	432b      	orrs	r3, r5
1000f32c:	b29b      	uxth	r3, r3
1000f32e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f330:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f332:	05db      	lsls	r3, r3, #23
1000f334:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f336:	d1e2      	bne.n	1000f2fe <gpio0_combined_isr_handler+0x1a>
1000f338:	2180      	movs	r1, #128	; 0x80
1000f33a:	3381      	adds	r3, #129	; 0x81
1000f33c:	33ff      	adds	r3, #255	; 0xff
1000f33e:	4a03      	ldr	r2, [pc, #12]	; (1000f34c <gpio0_combined_isr_handler+0x68>)
1000f340:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f342:	bd30      	pop	{r4, r5, pc}
1000f344:	40010000 	.word	0x40010000
1000f348:	ffff8000 	.word	0xffff8000
1000f34c:	e000e100 	.word	0xe000e100

1000f350 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f350:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f352:	4b0c      	ldr	r3, [pc, #48]	; (1000f384 <PORT1_COMB_Handler+0x34>)
1000f354:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f356:	0b5b      	lsrs	r3, r3, #13
1000f358:	d010      	beq.n	1000f37c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f35a:	4b0b      	ldr	r3, [pc, #44]	; (1000f388 <PORT1_COMB_Handler+0x38>)
1000f35c:	681b      	ldr	r3, [r3, #0]
1000f35e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f360:	4a08      	ldr	r2, [pc, #32]	; (1000f384 <PORT1_COMB_Handler+0x34>)
1000f362:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f364:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f366:	0b5b      	lsrs	r3, r3, #13
1000f368:	035b      	lsls	r3, r3, #13
1000f36a:	430b      	orrs	r3, r1
1000f36c:	8713      	strh	r3, [r2, #56]	; 0x38
1000f36e:	2180      	movs	r1, #128	; 0x80
1000f370:	0049      	lsls	r1, r1, #1
1000f372:	23c0      	movs	r3, #192	; 0xc0
1000f374:	005b      	lsls	r3, r3, #1
1000f376:	4a05      	ldr	r2, [pc, #20]	; (1000f38c <PORT1_COMB_Handler+0x3c>)
1000f378:	50d1      	str	r1, [r2, r3]
1000f37a:	e001      	b.n	1000f380 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f37c:	4b04      	ldr	r3, [pc, #16]	; (1000f390 <PORT1_COMB_Handler+0x40>)
1000f37e:	4798      	blx	r3
	}
}
1000f380:	bd10      	pop	{r4, pc}
1000f382:	46c0      	nop			; (mov r8, r8)
1000f384:	40011000 	.word	0x40011000
1000f388:	1001a65c 	.word	0x1001a65c
1000f38c:	e000e100 	.word	0xe000e100
1000f390:	1000f275 	.word	0x1000f275

1000f394 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f394:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f396:	2802      	cmp	r0, #2
1000f398:	d804      	bhi.n	1000f3a4 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f39a:	0080      	lsls	r0, r0, #2
1000f39c:	2200      	movs	r2, #0
1000f39e:	4b02      	ldr	r3, [pc, #8]	; (1000f3a8 <wakeup_int_unregister_callback+0x14>)
1000f3a0:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f3a2:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f3a4:	0018      	movs	r0, r3
1000f3a6:	4770      	bx	lr
1000f3a8:	1001a674 	.word	0x1001a674

1000f3ac <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f3ac:	b510      	push	{r4, lr}
1000f3ae:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f3b0:	7803      	ldrb	r3, [r0, #0]
1000f3b2:	2b01      	cmp	r3, #1
1000f3b4:	d108      	bne.n	1000f3c8 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f3b6:	4b11      	ldr	r3, [pc, #68]	; (1000f3fc <wakeup_active_event_callback+0x50>)
1000f3b8:	681b      	ldr	r3, [r3, #0]
1000f3ba:	2b00      	cmp	r3, #0
1000f3bc:	d000      	beq.n	1000f3c0 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f3be:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f3c0:	23ff      	movs	r3, #255	; 0xff
1000f3c2:	6822      	ldr	r2, [r4, #0]
1000f3c4:	439a      	bics	r2, r3
1000f3c6:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f3c8:	7863      	ldrb	r3, [r4, #1]
1000f3ca:	2b01      	cmp	r3, #1
1000f3cc:	d108      	bne.n	1000f3e0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f3ce:	4b0b      	ldr	r3, [pc, #44]	; (1000f3fc <wakeup_active_event_callback+0x50>)
1000f3d0:	685b      	ldr	r3, [r3, #4]
1000f3d2:	2b00      	cmp	r3, #0
1000f3d4:	d000      	beq.n	1000f3d8 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f3d6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f3d8:	4b09      	ldr	r3, [pc, #36]	; (1000f400 <wakeup_active_event_callback+0x54>)
1000f3da:	6822      	ldr	r2, [r4, #0]
1000f3dc:	4013      	ands	r3, r2
1000f3de:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f3e0:	78a3      	ldrb	r3, [r4, #2]
1000f3e2:	2b01      	cmp	r3, #1
1000f3e4:	d108      	bne.n	1000f3f8 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f3e6:	4b05      	ldr	r3, [pc, #20]	; (1000f3fc <wakeup_active_event_callback+0x50>)
1000f3e8:	689b      	ldr	r3, [r3, #8]
1000f3ea:	2b00      	cmp	r3, #0
1000f3ec:	d000      	beq.n	1000f3f0 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f3ee:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f3f0:	4b04      	ldr	r3, [pc, #16]	; (1000f404 <wakeup_active_event_callback+0x58>)
1000f3f2:	6822      	ldr	r2, [r4, #0]
1000f3f4:	4013      	ands	r3, r2
1000f3f6:	6023      	str	r3, [r4, #0]
	}
}
1000f3f8:	bd10      	pop	{r4, pc}
1000f3fa:	46c0      	nop			; (mov r8, r8)
1000f3fc:	1001a674 	.word	0x1001a674
1000f400:	ffff00ff 	.word	0xffff00ff
1000f404:	ff00ffff 	.word	0xff00ffff

1000f408 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f408:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f40a:	4b09      	ldr	r3, [pc, #36]	; (1000f430 <resume_cb+0x28>)
1000f40c:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f40e:	4b09      	ldr	r3, [pc, #36]	; (1000f434 <resume_cb+0x2c>)
1000f410:	4798      	blx	r3
    sms_dualtimer_init();
1000f412:	4b09      	ldr	r3, [pc, #36]	; (1000f438 <resume_cb+0x30>)
1000f414:	4798      	blx	r3
    delay_init();
1000f416:	4b09      	ldr	r3, [pc, #36]	; (1000f43c <resume_cb+0x34>)
1000f418:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f41a:	4b09      	ldr	r3, [pc, #36]	; (1000f440 <resume_cb+0x38>)
1000f41c:	4798      	blx	r3
    sms_led_gpio_init();
1000f41e:	4b09      	ldr	r3, [pc, #36]	; (1000f444 <resume_cb+0x3c>)
1000f420:	4798      	blx	r3
    sms_spi_master_configure();
1000f422:	4b09      	ldr	r3, [pc, #36]	; (1000f448 <resume_cb+0x40>)
1000f424:	4798      	blx	r3
    sms_i2c_master_configure();
1000f426:	4b09      	ldr	r3, [pc, #36]	; (1000f44c <resume_cb+0x44>)
1000f428:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000f42a:	4b09      	ldr	r3, [pc, #36]	; (1000f450 <resume_cb+0x48>)
1000f42c:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f42e:	bd10      	pop	{r4, pc}
1000f430:	1000ec55 	.word	0x1000ec55
1000f434:	1000e9bd 	.word	0x1000e9bd
1000f438:	1000b1a9 	.word	0x1000b1a9
1000f43c:	100080e9 	.word	0x100080e9
1000f440:	1000a215 	.word	0x1000a215
1000f444:	1000aa41 	.word	0x1000aa41
1000f448:	1000b061 	.word	0x1000b061
1000f44c:	1000a6e9 	.word	0x1000a6e9
1000f450:	1000a63d 	.word	0x1000a63d

1000f454 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f454:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f456:	2300      	movs	r3, #0
1000f458:	4a12      	ldr	r2, [pc, #72]	; (1000f4a4 <sms_init_variables+0x50>)
1000f45a:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f45c:	4a12      	ldr	r2, [pc, #72]	; (1000f4a8 <sms_init_variables+0x54>)
1000f45e:	7053      	strb	r3, [r2, #1]
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f460:	4812      	ldr	r0, [pc, #72]	; (1000f4ac <sms_init_variables+0x58>)
1000f462:	2225      	movs	r2, #37	; 0x25
1000f464:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f466:	4a12      	ldr	r2, [pc, #72]	; (1000f4b0 <sms_init_variables+0x5c>)
1000f468:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f46a:	4a12      	ldr	r2, [pc, #72]	; (1000f4b4 <sms_init_variables+0x60>)
1000f46c:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f46e:	2101      	movs	r1, #1
1000f470:	4a11      	ldr	r2, [pc, #68]	; (1000f4b8 <sms_init_variables+0x64>)
1000f472:	7011      	strb	r1, [r2, #0]

    // button
    btn0_instance.id = SMS_BTN_0;
1000f474:	4a11      	ldr	r2, [pc, #68]	; (1000f4bc <sms_init_variables+0x68>)
1000f476:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f478:	241f      	movs	r4, #31
1000f47a:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f47c:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f47e:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f480:	2228      	movs	r2, #40	; 0x28
1000f482:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f484:	4a0e      	ldr	r2, [pc, #56]	; (1000f4c0 <sms_init_variables+0x6c>)
1000f486:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f488:	4a0e      	ldr	r2, [pc, #56]	; (1000f4c4 <sms_init_variables+0x70>)
1000f48a:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f48c:	201d      	movs	r0, #29
1000f48e:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f490:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f492:	70d3      	strb	r3, [r2, #3]
    
	for(uint8_t i = 0; i < 3; i++) {
		ready_to_send[i] = false;
1000f494:	4a0c      	ldr	r2, [pc, #48]	; (1000f4c8 <sms_init_variables+0x74>)
1000f496:	7013      	strb	r3, [r2, #0]
1000f498:	7053      	strb	r3, [r2, #1]
1000f49a:	7093      	strb	r3, [r2, #2]
	}
    sms_ble_send_cnt = 0;
1000f49c:	4a0b      	ldr	r2, [pc, #44]	; (1000f4cc <sms_init_variables+0x78>)
1000f49e:	8013      	strh	r3, [r2, #0]
}
1000f4a0:	bd10      	pop	{r4, pc}
1000f4a2:	46c0      	nop			; (mov r8, r8)
1000f4a4:	100199e0 	.word	0x100199e0
1000f4a8:	100198d0 	.word	0x100198d0
1000f4ac:	10019944 	.word	0x10019944
1000f4b0:	10019834 	.word	0x10019834
1000f4b4:	100199e1 	.word	0x100199e1
1000f4b8:	100198c8 	.word	0x100198c8
1000f4bc:	10019830 	.word	0x10019830
1000f4c0:	100198c9 	.word	0x100198c9
1000f4c4:	100198cc 	.word	0x100198cc
1000f4c8:	100199e4 	.word	0x100199e4
1000f4cc:	10019a00 	.word	0x10019a00

1000f4d0 <main>:
    //sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f4d2:	2210      	movs	r2, #16
1000f4d4:	4b99      	ldr	r3, [pc, #612]	; (1000f73c <main+0x26c>)
1000f4d6:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f4d8:	4b99      	ldr	r3, [pc, #612]	; (1000f740 <main+0x270>)
1000f4da:	4798      	blx	r3
	gpio_init(); // GPIO
1000f4dc:	4b99      	ldr	r3, [pc, #612]	; (1000f744 <main+0x274>)
1000f4de:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f4e0:	4b99      	ldr	r3, [pc, #612]	; (1000f748 <main+0x278>)
1000f4e2:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f4e4:	4b99      	ldr	r3, [pc, #612]	; (1000f74c <main+0x27c>)
1000f4e6:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f4e8:	4b99      	ldr	r3, [pc, #612]	; (1000f750 <main+0x280>)
1000f4ea:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f4ec:	4b99      	ldr	r3, [pc, #612]	; (1000f754 <main+0x284>)
1000f4ee:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f4f0:	4b99      	ldr	r3, [pc, #612]	; (1000f758 <main+0x288>)
1000f4f2:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f4f4:	4b99      	ldr	r3, [pc, #612]	; (1000f75c <main+0x28c>)
1000f4f6:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f4f8:	4b99      	ldr	r3, [pc, #612]	; (1000f760 <main+0x290>)
1000f4fa:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f4fc:	4b99      	ldr	r3, [pc, #612]	; (1000f764 <main+0x294>)
1000f4fe:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f500:	4b99      	ldr	r3, [pc, #612]	; (1000f768 <main+0x298>)
1000f502:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f504:	4b99      	ldr	r3, [pc, #612]	; (1000f76c <main+0x29c>)
1000f506:	4798      	blx	r3
    
	// monitoring...
    sms_monitor_configure_gpio();
1000f508:	4b99      	ldr	r3, [pc, #612]	; (1000f770 <main+0x2a0>)
1000f50a:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f50c:	2000      	movs	r0, #0
1000f50e:	4b99      	ldr	r3, [pc, #612]	; (1000f774 <main+0x2a4>)
1000f510:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f512:	4b99      	ldr	r3, [pc, #612]	; (1000f778 <main+0x2a8>)
1000f514:	4798      	blx	r3
    sms_pressure_define_services();
1000f516:	4b99      	ldr	r3, [pc, #612]	; (1000f77c <main+0x2ac>)
1000f518:	4798      	blx	r3
    sms_mpu_define_services();
1000f51a:	4b99      	ldr	r3, [pc, #612]	; (1000f780 <main+0x2b0>)
1000f51c:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f51e:	4899      	ldr	r0, [pc, #612]	; (1000f784 <main+0x2b4>)
1000f520:	4b99      	ldr	r3, [pc, #612]	; (1000f788 <main+0x2b8>)
1000f522:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f524:	4999      	ldr	r1, [pc, #612]	; (1000f78c <main+0x2bc>)
1000f526:	2000      	movs	r0, #0
1000f528:	4c99      	ldr	r4, [pc, #612]	; (1000f790 <main+0x2c0>)
1000f52a:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f52c:	4999      	ldr	r1, [pc, #612]	; (1000f794 <main+0x2c4>)
1000f52e:	2001      	movs	r0, #1
1000f530:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f532:	4b99      	ldr	r3, [pc, #612]	; (1000f798 <main+0x2c8>)
1000f534:	4798      	blx	r3
    
    // MPU
    //sms_mpu_register_callbacks();

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f536:	4a99      	ldr	r2, [pc, #612]	; (1000f79c <main+0x2cc>)
1000f538:	2100      	movs	r1, #0
1000f53a:	2000      	movs	r0, #0
1000f53c:	4c98      	ldr	r4, [pc, #608]	; (1000f7a0 <main+0x2d0>)
1000f53e:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f540:	4a98      	ldr	r2, [pc, #608]	; (1000f7a4 <main+0x2d4>)
1000f542:	2102      	movs	r1, #2
1000f544:	2000      	movs	r0, #0
1000f546:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f548:	2100      	movs	r1, #0
1000f54a:	2000      	movs	r0, #0
1000f54c:	4b96      	ldr	r3, [pc, #600]	; (1000f7a8 <main+0x2d8>)
1000f54e:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000f550:	4b96      	ldr	r3, [pc, #600]	; (1000f7ac <main+0x2dc>)
1000f552:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f554:	4d96      	ldr	r5, [pc, #600]	; (1000f7b0 <main+0x2e0>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f556:	4c97      	ldr	r4, [pc, #604]	; (1000f7b4 <main+0x2e4>)
        {
            if(ulp_active) {
1000f558:	4e97      	ldr	r6, [pc, #604]	; (1000f7b8 <main+0x2e8>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f55a:	2001      	movs	r0, #1
1000f55c:	4240      	negs	r0, r0
1000f55e:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f560:	7863      	ldrb	r3, [r4, #1]
1000f562:	2b00      	cmp	r3, #0
1000f564:	d100      	bne.n	1000f568 <main+0x98>
1000f566:	e0ba      	b.n	1000f6de <main+0x20e>
        {
            if(ulp_active) {
1000f568:	7833      	ldrb	r3, [r6, #0]
1000f56a:	2b00      	cmp	r3, #0
1000f56c:	d009      	beq.n	1000f582 <main+0xb2>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000f56e:	4893      	ldr	r0, [pc, #588]	; (1000f7bc <main+0x2ec>)
1000f570:	4b93      	ldr	r3, [pc, #588]	; (1000f7c0 <main+0x2f0>)
1000f572:	4798      	blx	r3
1000f574:	4893      	ldr	r0, [pc, #588]	; (1000f7c4 <main+0x2f4>)
1000f576:	4f94      	ldr	r7, [pc, #592]	; (1000f7c8 <main+0x2f8>)
1000f578:	47b8      	blx	r7
                acquire_sleep_lock();
1000f57a:	4b74      	ldr	r3, [pc, #464]	; (1000f74c <main+0x27c>)
1000f57c:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000f57e:	4893      	ldr	r0, [pc, #588]	; (1000f7cc <main+0x2fc>)
1000f580:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000f582:	488e      	ldr	r0, [pc, #568]	; (1000f7bc <main+0x2ec>)
1000f584:	4b8e      	ldr	r3, [pc, #568]	; (1000f7c0 <main+0x2f0>)
1000f586:	4798      	blx	r3
1000f588:	4891      	ldr	r0, [pc, #580]	; (1000f7d0 <main+0x300>)
1000f58a:	4f8f      	ldr	r7, [pc, #572]	; (1000f7c8 <main+0x2f8>)
1000f58c:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000f58e:	2101      	movs	r1, #1
1000f590:	2001      	movs	r0, #1
1000f592:	4b85      	ldr	r3, [pc, #532]	; (1000f7a8 <main+0x2d8>)
1000f594:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f596:	488d      	ldr	r0, [pc, #564]	; (1000f7cc <main+0x2fc>)
1000f598:	47b8      	blx	r7
            switch(sms_current_interrupt.source)
1000f59a:	4b86      	ldr	r3, [pc, #536]	; (1000f7b4 <main+0x2e4>)
1000f59c:	781b      	ldrb	r3, [r3, #0]
1000f59e:	b2db      	uxtb	r3, r3
1000f5a0:	2b06      	cmp	r3, #6
1000f5a2:	d900      	bls.n	1000f5a6 <main+0xd6>
1000f5a4:	e08d      	b.n	1000f6c2 <main+0x1f2>
1000f5a6:	009b      	lsls	r3, r3, #2
1000f5a8:	4a8a      	ldr	r2, [pc, #552]	; (1000f7d4 <main+0x304>)
1000f5aa:	58d3      	ldr	r3, [r2, r3]
1000f5ac:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000f5ae:	4883      	ldr	r0, [pc, #524]	; (1000f7bc <main+0x2ec>)
1000f5b0:	4b83      	ldr	r3, [pc, #524]	; (1000f7c0 <main+0x2f0>)
1000f5b2:	4798      	blx	r3
1000f5b4:	4888      	ldr	r0, [pc, #544]	; (1000f7d8 <main+0x308>)
1000f5b6:	4b84      	ldr	r3, [pc, #528]	; (1000f7c8 <main+0x2f8>)
1000f5b8:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f5ba:	e088      	b.n	1000f6ce <main+0x1fe>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000f5bc:	487f      	ldr	r0, [pc, #508]	; (1000f7bc <main+0x2ec>)
1000f5be:	4b80      	ldr	r3, [pc, #512]	; (1000f7c0 <main+0x2f0>)
1000f5c0:	4798      	blx	r3
1000f5c2:	4886      	ldr	r0, [pc, #536]	; (1000f7dc <main+0x30c>)
1000f5c4:	4b80      	ldr	r3, [pc, #512]	; (1000f7c8 <main+0x2f8>)
1000f5c6:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f5c8:	4b85      	ldr	r3, [pc, #532]	; (1000f7e0 <main+0x310>)
1000f5ca:	781b      	ldrb	r3, [r3, #0]
1000f5cc:	2b04      	cmp	r3, #4
1000f5ce:	d00b      	beq.n	1000f5e8 <main+0x118>
1000f5d0:	4b83      	ldr	r3, [pc, #524]	; (1000f7e0 <main+0x310>)
1000f5d2:	781b      	ldrb	r3, [r3, #0]
1000f5d4:	2b07      	cmp	r3, #7
1000f5d6:	d007      	beq.n	1000f5e8 <main+0x118>
1000f5d8:	4b81      	ldr	r3, [pc, #516]	; (1000f7e0 <main+0x310>)
1000f5da:	781b      	ldrb	r3, [r3, #0]
1000f5dc:	2b01      	cmp	r3, #1
1000f5de:	d003      	beq.n	1000f5e8 <main+0x118>
1000f5e0:	4b7f      	ldr	r3, [pc, #508]	; (1000f7e0 <main+0x310>)
1000f5e2:	781b      	ldrb	r3, [r3, #0]
1000f5e4:	2b05      	cmp	r3, #5
1000f5e6:	d172      	bne.n	1000f6ce <main+0x1fe>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000f5e8:	2000      	movs	r0, #0
1000f5ea:	4b7e      	ldr	r3, [pc, #504]	; (1000f7e4 <main+0x314>)
1000f5ec:	4798      	blx	r3
1000f5ee:	2800      	cmp	r0, #0
1000f5f0:	da6d      	bge.n	1000f6ce <main+0x1fe>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f5f2:	4872      	ldr	r0, [pc, #456]	; (1000f7bc <main+0x2ec>)
1000f5f4:	4b72      	ldr	r3, [pc, #456]	; (1000f7c0 <main+0x2f0>)
1000f5f6:	4798      	blx	r3
1000f5f8:	487b      	ldr	r0, [pc, #492]	; (1000f7e8 <main+0x318>)
1000f5fa:	4b73      	ldr	r3, [pc, #460]	; (1000f7c8 <main+0x2f8>)
1000f5fc:	4798      	blx	r3
1000f5fe:	e066      	b.n	1000f6ce <main+0x1fe>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000f600:	486e      	ldr	r0, [pc, #440]	; (1000f7bc <main+0x2ec>)
1000f602:	4b6f      	ldr	r3, [pc, #444]	; (1000f7c0 <main+0x2f0>)
1000f604:	4798      	blx	r3
1000f606:	4879      	ldr	r0, [pc, #484]	; (1000f7ec <main+0x31c>)
1000f608:	4b6f      	ldr	r3, [pc, #444]	; (1000f7c8 <main+0x2f8>)
1000f60a:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f60c:	4b74      	ldr	r3, [pc, #464]	; (1000f7e0 <main+0x310>)
1000f60e:	781b      	ldrb	r3, [r3, #0]
1000f610:	2b04      	cmp	r3, #4
1000f612:	d00b      	beq.n	1000f62c <main+0x15c>
1000f614:	4b72      	ldr	r3, [pc, #456]	; (1000f7e0 <main+0x310>)
1000f616:	781b      	ldrb	r3, [r3, #0]
1000f618:	2b07      	cmp	r3, #7
1000f61a:	d007      	beq.n	1000f62c <main+0x15c>
1000f61c:	4b70      	ldr	r3, [pc, #448]	; (1000f7e0 <main+0x310>)
1000f61e:	781b      	ldrb	r3, [r3, #0]
1000f620:	2b01      	cmp	r3, #1
1000f622:	d003      	beq.n	1000f62c <main+0x15c>
1000f624:	4b6e      	ldr	r3, [pc, #440]	; (1000f7e0 <main+0x310>)
1000f626:	781b      	ldrb	r3, [r3, #0]
1000f628:	2b05      	cmp	r3, #5
1000f62a:	d150      	bne.n	1000f6ce <main+0x1fe>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000f62c:	2001      	movs	r0, #1
1000f62e:	4b6d      	ldr	r3, [pc, #436]	; (1000f7e4 <main+0x314>)
1000f630:	4798      	blx	r3
1000f632:	2800      	cmp	r0, #0
1000f634:	da4b      	bge.n	1000f6ce <main+0x1fe>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f636:	4861      	ldr	r0, [pc, #388]	; (1000f7bc <main+0x2ec>)
1000f638:	4b61      	ldr	r3, [pc, #388]	; (1000f7c0 <main+0x2f0>)
1000f63a:	4798      	blx	r3
1000f63c:	486a      	ldr	r0, [pc, #424]	; (1000f7e8 <main+0x318>)
1000f63e:	4b62      	ldr	r3, [pc, #392]	; (1000f7c8 <main+0x2f8>)
1000f640:	4798      	blx	r3
1000f642:	e044      	b.n	1000f6ce <main+0x1fe>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000f644:	485d      	ldr	r0, [pc, #372]	; (1000f7bc <main+0x2ec>)
1000f646:	4b5e      	ldr	r3, [pc, #376]	; (1000f7c0 <main+0x2f0>)
1000f648:	4798      	blx	r3
1000f64a:	4869      	ldr	r0, [pc, #420]	; (1000f7f0 <main+0x320>)
1000f64c:	4b5e      	ldr	r3, [pc, #376]	; (1000f7c8 <main+0x2f8>)
1000f64e:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    //sms_mpu_poll_data();
                //}                    
                break;
1000f650:	e03d      	b.n	1000f6ce <main+0x1fe>
                
                case INT_AON_TIMER:
                DBG_LOG_DEV("...AON_TIMER");
1000f652:	485a      	ldr	r0, [pc, #360]	; (1000f7bc <main+0x2ec>)
1000f654:	4b5a      	ldr	r3, [pc, #360]	; (1000f7c0 <main+0x2f0>)
1000f656:	4798      	blx	r3
1000f658:	4866      	ldr	r0, [pc, #408]	; (1000f7f4 <main+0x324>)
1000f65a:	4b5b      	ldr	r3, [pc, #364]	; (1000f7c8 <main+0x2f8>)
1000f65c:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000f65e:	4b60      	ldr	r3, [pc, #384]	; (1000f7e0 <main+0x310>)
1000f660:	781b      	ldrb	r3, [r3, #0]
1000f662:	2b05      	cmp	r3, #5
1000f664:	d00b      	beq.n	1000f67e <main+0x1ae>
1000f666:	4b5e      	ldr	r3, [pc, #376]	; (1000f7e0 <main+0x310>)
1000f668:	781b      	ldrb	r3, [r3, #0]
1000f66a:	2b07      	cmp	r3, #7
1000f66c:	d007      	beq.n	1000f67e <main+0x1ae>
1000f66e:	4b5c      	ldr	r3, [pc, #368]	; (1000f7e0 <main+0x310>)
1000f670:	781b      	ldrb	r3, [r3, #0]
1000f672:	2b03      	cmp	r3, #3
1000f674:	d003      	beq.n	1000f67e <main+0x1ae>
1000f676:	4b5a      	ldr	r3, [pc, #360]	; (1000f7e0 <main+0x310>)
1000f678:	781b      	ldrb	r3, [r3, #0]
1000f67a:	2b06      	cmp	r3, #6
1000f67c:	d127      	bne.n	1000f6ce <main+0x1fe>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000f67e:	4b2f      	ldr	r3, [pc, #188]	; (1000f73c <main+0x26c>)
1000f680:	781b      	ldrb	r3, [r3, #0]
1000f682:	2b22      	cmp	r3, #34	; 0x22
1000f684:	d102      	bne.n	1000f68c <main+0x1bc>
                        sms_pressure_poll_data();
1000f686:	4b5c      	ldr	r3, [pc, #368]	; (1000f7f8 <main+0x328>)
1000f688:	4798      	blx	r3
1000f68a:	e020      	b.n	1000f6ce <main+0x1fe>
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000f68c:	4b2b      	ldr	r3, [pc, #172]	; (1000f73c <main+0x26c>)
1000f68e:	781b      	ldrb	r3, [r3, #0]
1000f690:	e01d      	b.n	1000f6ce <main+0x1fe>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000f692:	484a      	ldr	r0, [pc, #296]	; (1000f7bc <main+0x2ec>)
1000f694:	4b4a      	ldr	r3, [pc, #296]	; (1000f7c0 <main+0x2f0>)
1000f696:	4798      	blx	r3
1000f698:	4858      	ldr	r0, [pc, #352]	; (1000f7fc <main+0x32c>)
1000f69a:	4b4b      	ldr	r3, [pc, #300]	; (1000f7c8 <main+0x2f8>)
1000f69c:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f69e:	2000      	movs	r0, #0
1000f6a0:	4b57      	ldr	r3, [pc, #348]	; (1000f800 <main+0x330>)
1000f6a2:	4798      	blx	r3
                sms_dualtimer1_fn();
1000f6a4:	4b57      	ldr	r3, [pc, #348]	; (1000f804 <main+0x334>)
1000f6a6:	4798      	blx	r3
                break;
1000f6a8:	e011      	b.n	1000f6ce <main+0x1fe>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000f6aa:	4844      	ldr	r0, [pc, #272]	; (1000f7bc <main+0x2ec>)
1000f6ac:	4b44      	ldr	r3, [pc, #272]	; (1000f7c0 <main+0x2f0>)
1000f6ae:	4798      	blx	r3
1000f6b0:	4855      	ldr	r0, [pc, #340]	; (1000f808 <main+0x338>)
1000f6b2:	4b45      	ldr	r3, [pc, #276]	; (1000f7c8 <main+0x2f8>)
1000f6b4:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f6b6:	2001      	movs	r0, #1
1000f6b8:	4b51      	ldr	r3, [pc, #324]	; (1000f800 <main+0x330>)
1000f6ba:	4798      	blx	r3
                sms_dualtimer2_fn();
1000f6bc:	4b53      	ldr	r3, [pc, #332]	; (1000f80c <main+0x33c>)
1000f6be:	4798      	blx	r3
                break;
1000f6c0:	e005      	b.n	1000f6ce <main+0x1fe>
                
                default:
                DBG_LOG_DEV("...??");
1000f6c2:	483e      	ldr	r0, [pc, #248]	; (1000f7bc <main+0x2ec>)
1000f6c4:	4b3e      	ldr	r3, [pc, #248]	; (1000f7c0 <main+0x2f0>)
1000f6c6:	4798      	blx	r3
1000f6c8:	4851      	ldr	r0, [pc, #324]	; (1000f810 <main+0x340>)
1000f6ca:	4b3f      	ldr	r3, [pc, #252]	; (1000f7c8 <main+0x2f8>)
1000f6cc:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            //DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f6ce:	2100      	movs	r1, #0
1000f6d0:	2000      	movs	r0, #0
1000f6d2:	4b35      	ldr	r3, [pc, #212]	; (1000f7a8 <main+0x2d8>)
1000f6d4:	4798      	blx	r3
            //DBG_LOG_CONT_DEV(" done!");
            sms_current_interrupt.int_on = false;
1000f6d6:	4b37      	ldr	r3, [pc, #220]	; (1000f7b4 <main+0x2e4>)
1000f6d8:	2200      	movs	r2, #0
1000f6da:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000f6dc:	701a      	strb	r2, [r3, #0]
        }
		
		if(ready_to_send[RTS_BUTTON_POS]) {
1000f6de:	4b4d      	ldr	r3, [pc, #308]	; (1000f814 <main+0x344>)
1000f6e0:	781b      	ldrb	r3, [r3, #0]
1000f6e2:	2b00      	cmp	r3, #0
1000f6e4:	d002      	beq.n	1000f6ec <main+0x21c>
			ready_to_send[RTS_BUTTON_POS] = false;
1000f6e6:	2200      	movs	r2, #0
1000f6e8:	4b4a      	ldr	r3, [pc, #296]	; (1000f814 <main+0x344>)
1000f6ea:	701a      	strb	r2, [r3, #0]
		}
		if(ready_to_send[RTS_PRESSURE_POS]) {
1000f6ec:	4b49      	ldr	r3, [pc, #292]	; (1000f814 <main+0x344>)
1000f6ee:	785b      	ldrb	r3, [r3, #1]
1000f6f0:	2b00      	cmp	r3, #0
1000f6f2:	d005      	beq.n	1000f700 <main+0x230>
			sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000f6f4:	2002      	movs	r0, #2
1000f6f6:	4b48      	ldr	r3, [pc, #288]	; (1000f818 <main+0x348>)
1000f6f8:	4798      	blx	r3
			ready_to_send[RTS_PRESSURE_POS] = false;
1000f6fa:	2200      	movs	r2, #0
1000f6fc:	4b45      	ldr	r3, [pc, #276]	; (1000f814 <main+0x344>)
1000f6fe:	705a      	strb	r2, [r3, #1]
		}
		if(ready_to_send[RTS_MPU_POS]) {
1000f700:	4b44      	ldr	r3, [pc, #272]	; (1000f814 <main+0x344>)
1000f702:	789b      	ldrb	r3, [r3, #2]
1000f704:	2b00      	cmp	r3, #0
1000f706:	d005      	beq.n	1000f714 <main+0x244>
			sms_ble_send_characteristic(BLE_CHAR_MPU);
1000f708:	2003      	movs	r0, #3
1000f70a:	4b43      	ldr	r3, [pc, #268]	; (1000f818 <main+0x348>)
1000f70c:	4798      	blx	r3
			ready_to_send[RTS_MPU_POS] = false;
1000f70e:	2200      	movs	r2, #0
1000f710:	4b40      	ldr	r3, [pc, #256]	; (1000f814 <main+0x344>)
1000f712:	709a      	strb	r2, [r3, #2]
		}
        
        
        if(ulp_ready) {
1000f714:	4b41      	ldr	r3, [pc, #260]	; (1000f81c <main+0x34c>)
1000f716:	781b      	ldrb	r3, [r3, #0]
1000f718:	2b00      	cmp	r3, #0
1000f71a:	d00b      	beq.n	1000f734 <main+0x264>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000f71c:	4827      	ldr	r0, [pc, #156]	; (1000f7bc <main+0x2ec>)
1000f71e:	4b28      	ldr	r3, [pc, #160]	; (1000f7c0 <main+0x2f0>)
1000f720:	4798      	blx	r3
1000f722:	483f      	ldr	r0, [pc, #252]	; (1000f820 <main+0x350>)
1000f724:	4f28      	ldr	r7, [pc, #160]	; (1000f7c8 <main+0x2f8>)
1000f726:	47b8      	blx	r7
            ulp_active = true;
1000f728:	2201      	movs	r2, #1
1000f72a:	4b23      	ldr	r3, [pc, #140]	; (1000f7b8 <main+0x2e8>)
1000f72c:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000f72e:	483d      	ldr	r0, [pc, #244]	; (1000f824 <main+0x354>)
1000f730:	47b8      	blx	r7
1000f732:	e712      	b.n	1000f55a <main+0x8a>
        }            
        else {
            ulp_active = false;
1000f734:	2200      	movs	r2, #0
1000f736:	4b20      	ldr	r3, [pc, #128]	; (1000f7b8 <main+0x2e8>)
1000f738:	701a      	strb	r2, [r3, #0]
1000f73a:	e70e      	b.n	1000f55a <main+0x8a>
1000f73c:	100199e0 	.word	0x100199e0
1000f740:	1000ecc9 	.word	0x1000ecc9
1000f744:	1000c25d 	.word	0x1000c25d
1000f748:	1000e9bd 	.word	0x1000e9bd
1000f74c:	1000f21d 	.word	0x1000f21d
1000f750:	1000f455 	.word	0x1000f455
1000f754:	1000b1a9 	.word	0x1000b1a9
1000f758:	100080e9 	.word	0x100080e9
1000f75c:	1000a215 	.word	0x1000a215
1000f760:	1000aa41 	.word	0x1000aa41
1000f764:	1000a6e9 	.word	0x1000a6e9
1000f768:	1000b061 	.word	0x1000b061
1000f76c:	1000a855 	.word	0x1000a855
1000f770:	1000a63d 	.word	0x1000a63d
1000f774:	1000e03d 	.word	0x1000e03d
1000f778:	1000a5d5 	.word	0x1000a5d5
1000f77c:	1000aee9 	.word	0x1000aee9
1000f780:	1000a9b5 	.word	0x1000a9b5
1000f784:	1000f409 	.word	0x1000f409
1000f788:	1000f261 	.word	0x1000f261
1000f78c:	1000b269 	.word	0x1000b269
1000f790:	1000b1e5 	.word	0x1000b1e5
1000f794:	1000b28d 	.word	0x1000b28d
1000f798:	1000a2c9 	.word	0x1000a2c9
1000f79c:	10016398 	.word	0x10016398
1000f7a0:	1000df6d 	.word	0x1000df6d
1000f7a4:	100163e4 	.word	0x100163e4
1000f7a8:	1000a589 	.word	0x1000a589
1000f7ac:	10009c0d 	.word	0x10009c0d
1000f7b0:	1000e835 	.word	0x1000e835
1000f7b4:	100199c8 	.word	0x100199c8
1000f7b8:	100199eb 	.word	0x100199eb
1000f7bc:	10015df4 	.word	0x10015df4
1000f7c0:	10014c49 	.word	0x10014c49
1000f7c4:	100179e4 	.word	0x100179e4
1000f7c8:	10014b29 	.word	0x10014b29
1000f7cc:	100179fc 	.word	0x100179fc
1000f7d0:	10017a04 	.word	0x10017a04
1000f7d4:	100179c8 	.word	0x100179c8
1000f7d8:	10017a28 	.word	0x10017a28
1000f7dc:	10017a38 	.word	0x10017a38
1000f7e0:	100198c8 	.word	0x100198c8
1000f7e4:	1000a345 	.word	0x1000a345
1000f7e8:	10017a40 	.word	0x10017a40
1000f7ec:	10017a64 	.word	0x10017a64
1000f7f0:	10017a6c 	.word	0x10017a6c
1000f7f4:	10017a78 	.word	0x10017a78
1000f7f8:	1000ae79 	.word	0x1000ae79
1000f7fc:	10017a88 	.word	0x10017a88
1000f800:	1000b25d 	.word	0x1000b25d
1000f804:	1000b2b1 	.word	0x1000b2b1
1000f808:	10017a98 	.word	0x10017a98
1000f80c:	1000b4f1 	.word	0x1000b4f1
1000f810:	10017aa8 	.word	0x10017aa8
1000f814:	100199e4 	.word	0x100199e4
1000f818:	10009f05 	.word	0x10009f05
1000f81c:	100198c9 	.word	0x100198c9
1000f820:	10017ab0 	.word	0x10017ab0
1000f824:	10017ac4 	.word	0x10017ac4

1000f828 <internal_event_post>:
1000f828:	b570      	push	{r4, r5, r6, lr}
1000f82a:	4d12      	ldr	r5, [pc, #72]	; (1000f874 <internal_event_post+0x4c>)
1000f82c:	682c      	ldr	r4, [r5, #0]
1000f82e:	2c00      	cmp	r4, #0
1000f830:	d014      	beq.n	1000f85c <internal_event_post+0x34>
1000f832:	6826      	ldr	r6, [r4, #0]
1000f834:	60e2      	str	r2, [r4, #12]
1000f836:	602e      	str	r6, [r5, #0]
1000f838:	2500      	movs	r5, #0
1000f83a:	4a0f      	ldr	r2, [pc, #60]	; (1000f878 <internal_event_post+0x50>)
1000f83c:	8123      	strh	r3, [r4, #8]
1000f83e:	6813      	ldr	r3, [r2, #0]
1000f840:	6025      	str	r5, [r4, #0]
1000f842:	80a0      	strh	r0, [r4, #4]
1000f844:	80e1      	strh	r1, [r4, #6]
1000f846:	42ab      	cmp	r3, r5
1000f848:	d101      	bne.n	1000f84e <internal_event_post+0x26>
1000f84a:	6014      	str	r4, [r2, #0]
1000f84c:	e011      	b.n	1000f872 <internal_event_post+0x4a>
1000f84e:	681a      	ldr	r2, [r3, #0]
1000f850:	2a00      	cmp	r2, #0
1000f852:	d001      	beq.n	1000f858 <internal_event_post+0x30>
1000f854:	1c13      	adds	r3, r2, #0
1000f856:	e7fa      	b.n	1000f84e <internal_event_post+0x26>
1000f858:	601c      	str	r4, [r3, #0]
1000f85a:	e00a      	b.n	1000f872 <internal_event_post+0x4a>
1000f85c:	b2c4      	uxtb	r4, r0
1000f85e:	2c00      	cmp	r4, #0
1000f860:	d107      	bne.n	1000f872 <internal_event_post+0x4a>
1000f862:	4c06      	ldr	r4, [pc, #24]	; (1000f87c <internal_event_post+0x54>)
1000f864:	60e2      	str	r2, [r4, #12]
1000f866:	2201      	movs	r2, #1
1000f868:	8123      	strh	r3, [r4, #8]
1000f86a:	4b05      	ldr	r3, [pc, #20]	; (1000f880 <internal_event_post+0x58>)
1000f86c:	80a0      	strh	r0, [r4, #4]
1000f86e:	80e1      	strh	r1, [r4, #6]
1000f870:	701a      	strb	r2, [r3, #0]
1000f872:	bd70      	pop	{r4, r5, r6, pc}
1000f874:	10019778 	.word	0x10019778
1000f878:	10019774 	.word	0x10019774
1000f87c:	10019760 	.word	0x10019760
1000f880:	10019770 	.word	0x10019770

1000f884 <internal_event_init>:
1000f884:	b510      	push	{r4, lr}
1000f886:	4b08      	ldr	r3, [pc, #32]	; (1000f8a8 <internal_event_init+0x24>)
1000f888:	0900      	lsrs	r0, r0, #4
1000f88a:	0100      	lsls	r0, r0, #4
1000f88c:	681a      	ldr	r2, [r3, #0]
1000f88e:	1808      	adds	r0, r1, r0
1000f890:	4281      	cmp	r1, r0
1000f892:	d003      	beq.n	1000f89c <internal_event_init+0x18>
1000f894:	600a      	str	r2, [r1, #0]
1000f896:	1c0a      	adds	r2, r1, #0
1000f898:	3110      	adds	r1, #16
1000f89a:	e7f9      	b.n	1000f890 <internal_event_init+0xc>
1000f89c:	601a      	str	r2, [r3, #0]
1000f89e:	2200      	movs	r2, #0
1000f8a0:	4b02      	ldr	r3, [pc, #8]	; (1000f8ac <internal_event_init+0x28>)
1000f8a2:	601a      	str	r2, [r3, #0]
1000f8a4:	bd10      	pop	{r4, pc}
1000f8a6:	46c0      	nop			; (mov r8, r8)
1000f8a8:	10019778 	.word	0x10019778
1000f8ac:	10019774 	.word	0x10019774

1000f8b0 <special_events_handler>:
1000f8b0:	b538      	push	{r3, r4, r5, lr}
1000f8b2:	4c1b      	ldr	r4, [pc, #108]	; (1000f920 <special_events_handler+0x70>)
1000f8b4:	1c03      	adds	r3, r0, #0
1000f8b6:	8825      	ldrh	r5, [r4, #0]
1000f8b8:	1c08      	adds	r0, r1, #0
1000f8ba:	1c21      	adds	r1, r4, #0
1000f8bc:	429d      	cmp	r5, r3
1000f8be:	d107      	bne.n	1000f8d0 <special_events_handler+0x20>
1000f8c0:	88a5      	ldrh	r5, [r4, #4]
1000f8c2:	4285      	cmp	r5, r0
1000f8c4:	d104      	bne.n	1000f8d0 <special_events_handler+0x20>
1000f8c6:	2301      	movs	r3, #1
1000f8c8:	425b      	negs	r3, r3
1000f8ca:	8023      	strh	r3, [r4, #0]
1000f8cc:	60a2      	str	r2, [r4, #8]
1000f8ce:	e009      	b.n	1000f8e4 <special_events_handler+0x34>
1000f8d0:	884c      	ldrh	r4, [r1, #2]
1000f8d2:	429c      	cmp	r4, r3
1000f8d4:	d10a      	bne.n	1000f8ec <special_events_handler+0x3c>
1000f8d6:	888c      	ldrh	r4, [r1, #4]
1000f8d8:	4284      	cmp	r4, r0
1000f8da:	d107      	bne.n	1000f8ec <special_events_handler+0x3c>
1000f8dc:	2301      	movs	r3, #1
1000f8de:	425b      	negs	r3, r3
1000f8e0:	804b      	strh	r3, [r1, #2]
1000f8e2:	608a      	str	r2, [r1, #8]
1000f8e4:	4b0f      	ldr	r3, [pc, #60]	; (1000f924 <special_events_handler+0x74>)
1000f8e6:	4798      	blx	r3
1000f8e8:	2001      	movs	r0, #1
1000f8ea:	e017      	b.n	1000f91c <special_events_handler+0x6c>
1000f8ec:	490e      	ldr	r1, [pc, #56]	; (1000f928 <special_events_handler+0x78>)
1000f8ee:	428b      	cmp	r3, r1
1000f8f0:	d00e      	beq.n	1000f910 <special_events_handler+0x60>
1000f8f2:	490e      	ldr	r1, [pc, #56]	; (1000f92c <special_events_handler+0x7c>)
1000f8f4:	428b      	cmp	r3, r1
1000f8f6:	d007      	beq.n	1000f908 <special_events_handler+0x58>
1000f8f8:	490d      	ldr	r1, [pc, #52]	; (1000f930 <special_events_handler+0x80>)
1000f8fa:	2000      	movs	r0, #0
1000f8fc:	428b      	cmp	r3, r1
1000f8fe:	d10d      	bne.n	1000f91c <special_events_handler+0x6c>
1000f900:	1c10      	adds	r0, r2, #0
1000f902:	4b0c      	ldr	r3, [pc, #48]	; (1000f934 <special_events_handler+0x84>)
1000f904:	4798      	blx	r3
1000f906:	e7ef      	b.n	1000f8e8 <special_events_handler+0x38>
1000f908:	1c11      	adds	r1, r2, #0
1000f90a:	4b0b      	ldr	r3, [pc, #44]	; (1000f938 <special_events_handler+0x88>)
1000f90c:	2200      	movs	r2, #0
1000f90e:	e002      	b.n	1000f916 <special_events_handler+0x66>
1000f910:	1c11      	adds	r1, r2, #0
1000f912:	2200      	movs	r2, #0
1000f914:	4b09      	ldr	r3, [pc, #36]	; (1000f93c <special_events_handler+0x8c>)
1000f916:	4798      	blx	r3
1000f918:	4243      	negs	r3, r0
1000f91a:	4158      	adcs	r0, r3
1000f91c:	bd38      	pop	{r3, r4, r5, pc}
1000f91e:	46c0      	nop			; (mov r8, r8)
1000f920:	1001a680 	.word	0x1001a680
1000f924:	1001130d 	.word	0x1001130d
1000f928:	00000e13 	.word	0x00000e13
1000f92c:	00000e15 	.word	0x00000e15
1000f930:	00000e01 	.word	0x00000e01
1000f934:	1001167d 	.word	0x1001167d
1000f938:	1001183d 	.word	0x1001183d
1000f93c:	10011915 	.word	0x10011915

1000f940 <at_ble_event_get>:
1000f940:	2300      	movs	r3, #0
1000f942:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f944:	b087      	sub	sp, #28
1000f946:	9204      	str	r2, [sp, #16]
1000f948:	7003      	strb	r3, [r0, #0]
1000f94a:	9b04      	ldr	r3, [sp, #16]
1000f94c:	9003      	str	r0, [sp, #12]
1000f94e:	3b01      	subs	r3, #1
1000f950:	1c0d      	adds	r5, r1, #0
1000f952:	9305      	str	r3, [sp, #20]
1000f954:	3303      	adds	r3, #3
1000f956:	d802      	bhi.n	1000f95e <at_ble_event_get+0x1e>
1000f958:	9804      	ldr	r0, [sp, #16]
1000f95a:	4bae      	ldr	r3, [pc, #696]	; (1000fc14 <at_ble_event_get+0x2d4>)
1000f95c:	4798      	blx	r3
1000f95e:	9b05      	ldr	r3, [sp, #20]
1000f960:	4cad      	ldr	r4, [pc, #692]	; (1000fc18 <at_ble_event_get+0x2d8>)
1000f962:	3303      	adds	r3, #3
1000f964:	d902      	bls.n	1000f96c <at_ble_event_get+0x2c>
1000f966:	2300      	movs	r3, #0
1000f968:	9302      	str	r3, [sp, #8]
1000f96a:	e015      	b.n	1000f998 <at_ble_event_get+0x58>
1000f96c:	2300      	movs	r3, #0
1000f96e:	9302      	str	r3, [sp, #8]
1000f970:	6823      	ldr	r3, [r4, #0]
1000f972:	2b00      	cmp	r3, #0
1000f974:	d113      	bne.n	1000f99e <at_ble_event_get+0x5e>
1000f976:	9b02      	ldr	r3, [sp, #8]
1000f978:	2bd0      	cmp	r3, #208	; 0xd0
1000f97a:	d100      	bne.n	1000f97e <at_ble_event_get+0x3e>
1000f97c:	e2da      	b.n	1000ff34 <at_ble_event_get+0x5f4>
1000f97e:	9804      	ldr	r0, [sp, #16]
1000f980:	4ba6      	ldr	r3, [pc, #664]	; (1000fc1c <at_ble_event_get+0x2dc>)
1000f982:	4798      	blx	r3
1000f984:	9002      	str	r0, [sp, #8]
1000f986:	2802      	cmp	r0, #2
1000f988:	d1f2      	bne.n	1000f970 <at_ble_event_get+0x30>
1000f98a:	e03f      	b.n	1000fa0c <at_ble_event_get+0xcc>
1000f98c:	9804      	ldr	r0, [sp, #16]
1000f98e:	4ba3      	ldr	r3, [pc, #652]	; (1000fc1c <at_ble_event_get+0x2dc>)
1000f990:	4798      	blx	r3
1000f992:	9002      	str	r0, [sp, #8]
1000f994:	2802      	cmp	r0, #2
1000f996:	d039      	beq.n	1000fa0c <at_ble_event_get+0xcc>
1000f998:	6823      	ldr	r3, [r4, #0]
1000f99a:	2b00      	cmp	r3, #0
1000f99c:	d0f6      	beq.n	1000f98c <at_ble_event_get+0x4c>
1000f99e:	9b02      	ldr	r3, [sp, #8]
1000f9a0:	2bd0      	cmp	r3, #208	; 0xd0
1000f9a2:	d100      	bne.n	1000f9a6 <at_ble_event_get+0x66>
1000f9a4:	e2c6      	b.n	1000ff34 <at_ble_event_get+0x5f4>
1000f9a6:	9b02      	ldr	r3, [sp, #8]
1000f9a8:	3b03      	subs	r3, #3
1000f9aa:	1e5a      	subs	r2, r3, #1
1000f9ac:	4193      	sbcs	r3, r2
1000f9ae:	9a02      	ldr	r2, [sp, #8]
1000f9b0:	425b      	negs	r3, r3
1000f9b2:	401a      	ands	r2, r3
1000f9b4:	6823      	ldr	r3, [r4, #0]
1000f9b6:	9202      	str	r2, [sp, #8]
1000f9b8:	2b00      	cmp	r3, #0
1000f9ba:	d100      	bne.n	1000f9be <at_ble_event_get+0x7e>
1000f9bc:	e2c2      	b.n	1000ff44 <at_ble_event_get+0x604>
1000f9be:	681a      	ldr	r2, [r3, #0]
1000f9c0:	68de      	ldr	r6, [r3, #12]
1000f9c2:	6022      	str	r2, [r4, #0]
1000f9c4:	88da      	ldrh	r2, [r3, #6]
1000f9c6:	9201      	str	r2, [sp, #4]
1000f9c8:	4a95      	ldr	r2, [pc, #596]	; (1000fc20 <at_ble_event_get+0x2e0>)
1000f9ca:	889c      	ldrh	r4, [r3, #4]
1000f9cc:	6811      	ldr	r1, [r2, #0]
1000f9ce:	6013      	str	r3, [r2, #0]
1000f9d0:	6019      	str	r1, [r3, #0]
1000f9d2:	4b94      	ldr	r3, [pc, #592]	; (1000fc24 <at_ble_event_get+0x2e4>)
1000f9d4:	781b      	ldrb	r3, [r3, #0]
1000f9d6:	2b01      	cmp	r3, #1
1000f9d8:	d10f      	bne.n	1000f9fa <at_ble_event_get+0xba>
1000f9da:	4b93      	ldr	r3, [pc, #588]	; (1000fc28 <at_ble_event_get+0x2e8>)
1000f9dc:	4a92      	ldr	r2, [pc, #584]	; (1000fc28 <at_ble_event_get+0x2e8>)
1000f9de:	8898      	ldrh	r0, [r3, #4]
1000f9e0:	88d9      	ldrh	r1, [r3, #6]
1000f9e2:	68d2      	ldr	r2, [r2, #12]
1000f9e4:	891b      	ldrh	r3, [r3, #8]
1000f9e6:	4f91      	ldr	r7, [pc, #580]	; (1000fc2c <at_ble_event_get+0x2ec>)
1000f9e8:	47b8      	blx	r7
1000f9ea:	2210      	movs	r2, #16
1000f9ec:	4b90      	ldr	r3, [pc, #576]	; (1000fc30 <at_ble_event_get+0x2f0>)
1000f9ee:	488e      	ldr	r0, [pc, #568]	; (1000fc28 <at_ble_event_get+0x2e8>)
1000f9f0:	2100      	movs	r1, #0
1000f9f2:	4798      	blx	r3
1000f9f4:	2300      	movs	r3, #0
1000f9f6:	4a8b      	ldr	r2, [pc, #556]	; (1000fc24 <at_ble_event_get+0x2e4>)
1000f9f8:	7013      	strb	r3, [r2, #0]
1000f9fa:	9b02      	ldr	r3, [sp, #8]
1000f9fc:	2b00      	cmp	r3, #0
1000f9fe:	d114      	bne.n	1000fa2a <at_ble_event_get+0xea>
1000fa00:	4b8c      	ldr	r3, [pc, #560]	; (1000fc34 <at_ble_event_get+0x2f4>)
1000fa02:	429c      	cmp	r4, r3
1000fa04:	d009      	beq.n	1000fa1a <at_ble_event_get+0xda>
1000fa06:	4b8c      	ldr	r3, [pc, #560]	; (1000fc38 <at_ble_event_get+0x2f8>)
1000fa08:	429c      	cmp	r4, r3
1000fa0a:	d127      	bne.n	1000fa5c <at_ble_event_get+0x11c>
1000fa0c:	233a      	movs	r3, #58	; 0x3a
1000fa0e:	9a03      	ldr	r2, [sp, #12]
1000fa10:	7013      	strb	r3, [r2, #0]
1000fa12:	2300      	movs	r3, #0
1000fa14:	9302      	str	r3, [sp, #8]
1000fa16:	1c1d      	adds	r5, r3, #0
1000fa18:	e007      	b.n	1000fa2a <at_ble_event_get+0xea>
1000fa1a:	9b01      	ldr	r3, [sp, #4]
1000fa1c:	42a3      	cmp	r3, r4
1000fa1e:	d000      	beq.n	1000fa22 <at_ble_event_get+0xe2>
1000fa20:	e28a      	b.n	1000ff38 <at_ble_event_get+0x5f8>
1000fa22:	2338      	movs	r3, #56	; 0x38
1000fa24:	9a03      	ldr	r2, [sp, #12]
1000fa26:	7013      	strb	r3, [r2, #0]
1000fa28:	602e      	str	r6, [r5, #0]
1000fa2a:	9b03      	ldr	r3, [sp, #12]
1000fa2c:	781b      	ldrb	r3, [r3, #0]
1000fa2e:	2b3b      	cmp	r3, #59	; 0x3b
1000fa30:	d101      	bne.n	1000fa36 <at_ble_event_get+0xf6>
1000fa32:	4b82      	ldr	r3, [pc, #520]	; (1000fc3c <at_ble_event_get+0x2fc>)
1000fa34:	4798      	blx	r3
1000fa36:	9b03      	ldr	r3, [sp, #12]
1000fa38:	781b      	ldrb	r3, [r3, #0]
1000fa3a:	2b3b      	cmp	r3, #59	; 0x3b
1000fa3c:	d003      	beq.n	1000fa46 <at_ble_event_get+0x106>
1000fa3e:	9b05      	ldr	r3, [sp, #20]
1000fa40:	3303      	adds	r3, #3
1000fa42:	d904      	bls.n	1000fa4e <at_ble_event_get+0x10e>
1000fa44:	e283      	b.n	1000ff4e <at_ble_event_get+0x60e>
1000fa46:	9b02      	ldr	r3, [sp, #8]
1000fa48:	2b00      	cmp	r3, #0
1000fa4a:	d088      	beq.n	1000f95e <at_ble_event_get+0x1e>
1000fa4c:	e7f7      	b.n	1000fa3e <at_ble_event_get+0xfe>
1000fa4e:	9b02      	ldr	r3, [sp, #8]
1000fa50:	2bd0      	cmp	r3, #208	; 0xd0
1000fa52:	d100      	bne.n	1000fa56 <at_ble_event_get+0x116>
1000fa54:	e27b      	b.n	1000ff4e <at_ble_event_get+0x60e>
1000fa56:	4b7a      	ldr	r3, [pc, #488]	; (1000fc40 <at_ble_event_get+0x300>)
1000fa58:	4798      	blx	r3
1000fa5a:	e278      	b.n	1000ff4e <at_ble_event_get+0x60e>
1000fa5c:	9b01      	ldr	r3, [sp, #4]
1000fa5e:	2bbb      	cmp	r3, #187	; 0xbb
1000fa60:	d125      	bne.n	1000faae <at_ble_event_get+0x16e>
1000fa62:	2cbb      	cmp	r4, #187	; 0xbb
1000fa64:	d123      	bne.n	1000faae <at_ble_event_get+0x16e>
1000fa66:	466b      	mov	r3, sp
1000fa68:	891b      	ldrh	r3, [r3, #8]
1000fa6a:	80ab      	strh	r3, [r5, #4]
1000fa6c:	78b3      	ldrb	r3, [r6, #2]
1000fa6e:	7872      	ldrb	r2, [r6, #1]
1000fa70:	78f0      	ldrb	r0, [r6, #3]
1000fa72:	021b      	lsls	r3, r3, #8
1000fa74:	4313      	orrs	r3, r2
1000fa76:	7971      	ldrb	r1, [r6, #5]
1000fa78:	7932      	ldrb	r2, [r6, #4]
1000fa7a:	70a8      	strb	r0, [r5, #2]
1000fa7c:	4871      	ldr	r0, [pc, #452]	; (1000fc44 <at_ble_event_get+0x304>)
1000fa7e:	802b      	strh	r3, [r5, #0]
1000fa80:	4283      	cmp	r3, r0
1000fa82:	d806      	bhi.n	1000fa92 <at_ble_event_get+0x152>
1000fa84:	4a70      	ldr	r2, [pc, #448]	; (1000fc48 <at_ble_event_get+0x308>)
1000fa86:	4293      	cmp	r3, r2
1000fa88:	d20b      	bcs.n	1000faa2 <at_ble_event_get+0x162>
1000fa8a:	4a70      	ldr	r2, [pc, #448]	; (1000fc4c <at_ble_event_get+0x30c>)
1000fa8c:	4293      	cmp	r3, r2
1000fa8e:	d008      	beq.n	1000faa2 <at_ble_event_get+0x162>
1000fa90:	e009      	b.n	1000faa6 <at_ble_event_get+0x166>
1000fa92:	486f      	ldr	r0, [pc, #444]	; (1000fc50 <at_ble_event_get+0x310>)
1000fa94:	4283      	cmp	r3, r0
1000fa96:	d106      	bne.n	1000faa6 <at_ble_event_get+0x166>
1000fa98:	020b      	lsls	r3, r1, #8
1000fa9a:	4313      	orrs	r3, r2
1000fa9c:	80ab      	strh	r3, [r5, #4]
1000fa9e:	2337      	movs	r3, #55	; 0x37
1000faa0:	e002      	b.n	1000faa8 <at_ble_event_get+0x168>
1000faa2:	2336      	movs	r3, #54	; 0x36
1000faa4:	e000      	b.n	1000faa8 <at_ble_event_get+0x168>
1000faa6:	2300      	movs	r3, #0
1000faa8:	9a03      	ldr	r2, [sp, #12]
1000faaa:	7013      	strb	r3, [r2, #0]
1000faac:	e7bd      	b.n	1000fa2a <at_ble_event_get+0xea>
1000faae:	4b69      	ldr	r3, [pc, #420]	; (1000fc54 <at_ble_event_get+0x314>)
1000fab0:	429c      	cmp	r4, r3
1000fab2:	d100      	bne.n	1000fab6 <at_ble_event_get+0x176>
1000fab4:	e144      	b.n	1000fd40 <at_ble_event_get+0x400>
1000fab6:	d865      	bhi.n	1000fb84 <at_ble_event_get+0x244>
1000fab8:	4b67      	ldr	r3, [pc, #412]	; (1000fc58 <at_ble_event_get+0x318>)
1000faba:	429c      	cmp	r4, r3
1000fabc:	d100      	bne.n	1000fac0 <at_ble_event_get+0x180>
1000fabe:	e1d5      	b.n	1000fe6c <at_ble_event_get+0x52c>
1000fac0:	d82f      	bhi.n	1000fb22 <at_ble_event_get+0x1e2>
1000fac2:	4b66      	ldr	r3, [pc, #408]	; (1000fc5c <at_ble_event_get+0x31c>)
1000fac4:	429c      	cmp	r4, r3
1000fac6:	d100      	bne.n	1000faca <at_ble_event_get+0x18a>
1000fac8:	e1e0      	b.n	1000fe8c <at_ble_event_get+0x54c>
1000faca:	d813      	bhi.n	1000faf4 <at_ble_event_get+0x1b4>
1000facc:	4b64      	ldr	r3, [pc, #400]	; (1000fc60 <at_ble_event_get+0x320>)
1000face:	429c      	cmp	r4, r3
1000fad0:	d100      	bne.n	1000fad4 <at_ble_event_get+0x194>
1000fad2:	e1a3      	b.n	1000fe1c <at_ble_event_get+0x4dc>
1000fad4:	d804      	bhi.n	1000fae0 <at_ble_event_get+0x1a0>
1000fad6:	2638      	movs	r6, #56	; 0x38
1000fad8:	42b4      	cmp	r4, r6
1000fada:	d100      	bne.n	1000fade <at_ble_event_get+0x19e>
1000fadc:	e225      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fade:	e117      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fae0:	4b60      	ldr	r3, [pc, #384]	; (1000fc64 <at_ble_event_get+0x324>)
1000fae2:	429c      	cmp	r4, r3
1000fae4:	d100      	bne.n	1000fae8 <at_ble_event_get+0x1a8>
1000fae6:	e19f      	b.n	1000fe28 <at_ble_event_get+0x4e8>
1000fae8:	33fe      	adds	r3, #254	; 0xfe
1000faea:	33ff      	adds	r3, #255	; 0xff
1000faec:	429c      	cmp	r4, r3
1000faee:	d100      	bne.n	1000faf2 <at_ble_event_get+0x1b2>
1000faf0:	e1d3      	b.n	1000fe9a <at_ble_event_get+0x55a>
1000faf2:	e10d      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000faf4:	4b5c      	ldr	r3, [pc, #368]	; (1000fc68 <at_ble_event_get+0x328>)
1000faf6:	429c      	cmp	r4, r3
1000faf8:	d100      	bne.n	1000fafc <at_ble_event_get+0x1bc>
1000fafa:	e1a9      	b.n	1000fe50 <at_ble_event_get+0x510>
1000fafc:	d808      	bhi.n	1000fb10 <at_ble_event_get+0x1d0>
1000fafe:	4b5b      	ldr	r3, [pc, #364]	; (1000fc6c <at_ble_event_get+0x32c>)
1000fb00:	429c      	cmp	r4, r3
1000fb02:	d100      	bne.n	1000fb06 <at_ble_event_get+0x1c6>
1000fb04:	e196      	b.n	1000fe34 <at_ble_event_get+0x4f4>
1000fb06:	4b5a      	ldr	r3, [pc, #360]	; (1000fc70 <at_ble_event_get+0x330>)
1000fb08:	429c      	cmp	r4, r3
1000fb0a:	d100      	bne.n	1000fb0e <at_ble_event_get+0x1ce>
1000fb0c:	e199      	b.n	1000fe42 <at_ble_event_get+0x502>
1000fb0e:	e0ff      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb10:	4b58      	ldr	r3, [pc, #352]	; (1000fc74 <at_ble_event_get+0x334>)
1000fb12:	429c      	cmp	r4, r3
1000fb14:	d100      	bne.n	1000fb18 <at_ble_event_get+0x1d8>
1000fb16:	e1a2      	b.n	1000fe5e <at_ble_event_get+0x51e>
1000fb18:	4b57      	ldr	r3, [pc, #348]	; (1000fc78 <at_ble_event_get+0x338>)
1000fb1a:	429c      	cmp	r4, r3
1000fb1c:	d100      	bne.n	1000fb20 <at_ble_event_get+0x1e0>
1000fb1e:	e1d4      	b.n	1000feca <at_ble_event_get+0x58a>
1000fb20:	e0f6      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb22:	4b56      	ldr	r3, [pc, #344]	; (1000fc7c <at_ble_event_get+0x33c>)
1000fb24:	429c      	cmp	r4, r3
1000fb26:	d100      	bne.n	1000fb2a <at_ble_event_get+0x1ea>
1000fb28:	e1c8      	b.n	1000febc <at_ble_event_get+0x57c>
1000fb2a:	d812      	bhi.n	1000fb52 <at_ble_event_get+0x212>
1000fb2c:	4b54      	ldr	r3, [pc, #336]	; (1000fc80 <at_ble_event_get+0x340>)
1000fb2e:	429c      	cmp	r4, r3
1000fb30:	d100      	bne.n	1000fb34 <at_ble_event_get+0x1f4>
1000fb32:	e1d1      	b.n	1000fed8 <at_ble_event_get+0x598>
1000fb34:	d804      	bhi.n	1000fb40 <at_ble_event_get+0x200>
1000fb36:	4b53      	ldr	r3, [pc, #332]	; (1000fc84 <at_ble_event_get+0x344>)
1000fb38:	429c      	cmp	r4, r3
1000fb3a:	d100      	bne.n	1000fb3e <at_ble_event_get+0x1fe>
1000fb3c:	e19b      	b.n	1000fe76 <at_ble_event_get+0x536>
1000fb3e:	e0e7      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb40:	4b51      	ldr	r3, [pc, #324]	; (1000fc88 <at_ble_event_get+0x348>)
1000fb42:	429c      	cmp	r4, r3
1000fb44:	d100      	bne.n	1000fb48 <at_ble_event_get+0x208>
1000fb46:	e1ad      	b.n	1000fea4 <at_ble_event_get+0x564>
1000fb48:	4b50      	ldr	r3, [pc, #320]	; (1000fc8c <at_ble_event_get+0x34c>)
1000fb4a:	429c      	cmp	r4, r3
1000fb4c:	d100      	bne.n	1000fb50 <at_ble_event_get+0x210>
1000fb4e:	e1b0      	b.n	1000feb2 <at_ble_event_get+0x572>
1000fb50:	e0de      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb52:	4b4f      	ldr	r3, [pc, #316]	; (1000fc90 <at_ble_event_get+0x350>)
1000fb54:	429c      	cmp	r4, r3
1000fb56:	d100      	bne.n	1000fb5a <at_ble_event_get+0x21a>
1000fb58:	e0e0      	b.n	1000fd1c <at_ble_event_get+0x3dc>
1000fb5a:	d809      	bhi.n	1000fb70 <at_ble_event_get+0x230>
1000fb5c:	3b08      	subs	r3, #8
1000fb5e:	429c      	cmp	r4, r3
1000fb60:	d100      	bne.n	1000fb64 <at_ble_event_get+0x224>
1000fb62:	e0d7      	b.n	1000fd14 <at_ble_event_get+0x3d4>
1000fb64:	4b4b      	ldr	r3, [pc, #300]	; (1000fc94 <at_ble_event_get+0x354>)
1000fb66:	2639      	movs	r6, #57	; 0x39
1000fb68:	429c      	cmp	r4, r3
1000fb6a:	d100      	bne.n	1000fb6e <at_ble_event_get+0x22e>
1000fb6c:	e1dd      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fb6e:	e0cf      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb70:	23d1      	movs	r3, #209	; 0xd1
1000fb72:	011b      	lsls	r3, r3, #4
1000fb74:	429c      	cmp	r4, r3
1000fb76:	d100      	bne.n	1000fb7a <at_ble_event_get+0x23a>
1000fb78:	e0d6      	b.n	1000fd28 <at_ble_event_get+0x3e8>
1000fb7a:	4b47      	ldr	r3, [pc, #284]	; (1000fc98 <at_ble_event_get+0x358>)
1000fb7c:	429c      	cmp	r4, r3
1000fb7e:	d100      	bne.n	1000fb82 <at_ble_event_get+0x242>
1000fb80:	e0d8      	b.n	1000fd34 <at_ble_event_get+0x3f4>
1000fb82:	e0c5      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fb84:	4b45      	ldr	r3, [pc, #276]	; (1000fc9c <at_ble_event_get+0x35c>)
1000fb86:	429c      	cmp	r4, r3
1000fb88:	d100      	bne.n	1000fb8c <at_ble_event_get+0x24c>
1000fb8a:	e117      	b.n	1000fdbc <at_ble_event_get+0x47c>
1000fb8c:	d82e      	bhi.n	1000fbec <at_ble_event_get+0x2ac>
1000fb8e:	4b44      	ldr	r3, [pc, #272]	; (1000fca0 <at_ble_event_get+0x360>)
1000fb90:	429c      	cmp	r4, r3
1000fb92:	d100      	bne.n	1000fb96 <at_ble_event_get+0x256>
1000fb94:	e13d      	b.n	1000fe12 <at_ble_event_get+0x4d2>
1000fb96:	d812      	bhi.n	1000fbbe <at_ble_event_get+0x27e>
1000fb98:	4b42      	ldr	r3, [pc, #264]	; (1000fca4 <at_ble_event_get+0x364>)
1000fb9a:	429c      	cmp	r4, r3
1000fb9c:	d100      	bne.n	1000fba0 <at_ble_event_get+0x260>
1000fb9e:	e0e8      	b.n	1000fd72 <at_ble_event_get+0x432>
1000fba0:	d804      	bhi.n	1000fbac <at_ble_event_get+0x26c>
1000fba2:	3b03      	subs	r3, #3
1000fba4:	429c      	cmp	r4, r3
1000fba6:	d100      	bne.n	1000fbaa <at_ble_event_get+0x26a>
1000fba8:	e0d0      	b.n	1000fd4c <at_ble_event_get+0x40c>
1000fbaa:	e0b1      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fbac:	4b3e      	ldr	r3, [pc, #248]	; (1000fca8 <at_ble_event_get+0x368>)
1000fbae:	429c      	cmp	r4, r3
1000fbb0:	d100      	bne.n	1000fbb4 <at_ble_event_get+0x274>
1000fbb2:	e0d0      	b.n	1000fd56 <at_ble_event_get+0x416>
1000fbb4:	4b3d      	ldr	r3, [pc, #244]	; (1000fcac <at_ble_event_get+0x36c>)
1000fbb6:	429c      	cmp	r4, r3
1000fbb8:	d100      	bne.n	1000fbbc <at_ble_event_get+0x27c>
1000fbba:	e0f9      	b.n	1000fdb0 <at_ble_event_get+0x470>
1000fbbc:	e0a8      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fbbe:	4b3c      	ldr	r3, [pc, #240]	; (1000fcb0 <at_ble_event_get+0x370>)
1000fbc0:	429c      	cmp	r4, r3
1000fbc2:	d100      	bne.n	1000fbc6 <at_ble_event_get+0x286>
1000fbc4:	e0db      	b.n	1000fd7e <at_ble_event_get+0x43e>
1000fbc6:	d808      	bhi.n	1000fbda <at_ble_event_get+0x29a>
1000fbc8:	4b3a      	ldr	r3, [pc, #232]	; (1000fcb4 <at_ble_event_get+0x374>)
1000fbca:	429c      	cmp	r4, r3
1000fbcc:	d100      	bne.n	1000fbd0 <at_ble_event_get+0x290>
1000fbce:	e11b      	b.n	1000fe08 <at_ble_event_get+0x4c8>
1000fbd0:	4b39      	ldr	r3, [pc, #228]	; (1000fcb8 <at_ble_event_get+0x378>)
1000fbd2:	429c      	cmp	r4, r3
1000fbd4:	d100      	bne.n	1000fbd8 <at_ble_event_get+0x298>
1000fbd6:	e0d8      	b.n	1000fd8a <at_ble_event_get+0x44a>
1000fbd8:	e09a      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fbda:	4b38      	ldr	r3, [pc, #224]	; (1000fcbc <at_ble_event_get+0x37c>)
1000fbdc:	429c      	cmp	r4, r3
1000fbde:	d100      	bne.n	1000fbe2 <at_ble_event_get+0x2a2>
1000fbe0:	e0d8      	b.n	1000fd94 <at_ble_event_get+0x454>
1000fbe2:	4b37      	ldr	r3, [pc, #220]	; (1000fcc0 <at_ble_event_get+0x380>)
1000fbe4:	429c      	cmp	r4, r3
1000fbe6:	d100      	bne.n	1000fbea <at_ble_event_get+0x2aa>
1000fbe8:	e0db      	b.n	1000fda2 <at_ble_event_get+0x462>
1000fbea:	e091      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fbec:	4b35      	ldr	r3, [pc, #212]	; (1000fcc4 <at_ble_event_get+0x384>)
1000fbee:	429c      	cmp	r4, r3
1000fbf0:	d100      	bne.n	1000fbf4 <at_ble_event_get+0x2b4>
1000fbf2:	e0f7      	b.n	1000fde4 <at_ble_event_get+0x4a4>
1000fbf4:	d876      	bhi.n	1000fce4 <at_ble_event_get+0x3a4>
1000fbf6:	4b34      	ldr	r3, [pc, #208]	; (1000fcc8 <at_ble_event_get+0x388>)
1000fbf8:	429c      	cmp	r4, r3
1000fbfa:	d100      	bne.n	1000fbfe <at_ble_event_get+0x2be>
1000fbfc:	e0f8      	b.n	1000fdf0 <at_ble_event_get+0x4b0>
1000fbfe:	d869      	bhi.n	1000fcd4 <at_ble_event_get+0x394>
1000fc00:	4b32      	ldr	r3, [pc, #200]	; (1000fccc <at_ble_event_get+0x38c>)
1000fc02:	429c      	cmp	r4, r3
1000fc04:	d100      	bne.n	1000fc08 <at_ble_event_get+0x2c8>
1000fc06:	e0e0      	b.n	1000fdca <at_ble_event_get+0x48a>
1000fc08:	4b31      	ldr	r3, [pc, #196]	; (1000fcd0 <at_ble_event_get+0x390>)
1000fc0a:	429c      	cmp	r4, r3
1000fc0c:	d100      	bne.n	1000fc10 <at_ble_event_get+0x2d0>
1000fc0e:	e0a9      	b.n	1000fd64 <at_ble_event_get+0x424>
1000fc10:	e07e      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fc12:	46c0      	nop			; (mov r8, r8)
1000fc14:	10011345 	.word	0x10011345
1000fc18:	10019774 	.word	0x10019774
1000fc1c:	1000efb9 	.word	0x1000efb9
1000fc20:	10019778 	.word	0x10019778
1000fc24:	10019770 	.word	0x10019770
1000fc28:	10019760 	.word	0x10019760
1000fc2c:	1000f829 	.word	0x1000f829
1000fc30:	100149e1 	.word	0x100149e1
1000fc34:	0000ffff 	.word	0x0000ffff
1000fc38:	0000fffe 	.word	0x0000fffe
1000fc3c:	1000f231 	.word	0x1000f231
1000fc40:	10011347 	.word	0x10011347
1000fc44:	0000201e 	.word	0x0000201e
1000fc48:	0000201d 	.word	0x0000201d
1000fc4c:	00000c03 	.word	0x00000c03
1000fc50:	0000201f 	.word	0x0000201f
1000fc54:	00000d1c 	.word	0x00000d1c
1000fc58:	00000c0c 	.word	0x00000c0c
1000fc5c:	00000c02 	.word	0x00000c02
1000fc60:	00000a02 	.word	0x00000a02
1000fc64:	00000a03 	.word	0x00000a03
1000fc68:	00000c06 	.word	0x00000c06
1000fc6c:	00000c04 	.word	0x00000c04
1000fc70:	00000c05 	.word	0x00000c05
1000fc74:	00000c07 	.word	0x00000c07
1000fc78:	00000c09 	.word	0x00000c09
1000fc7c:	00000c17 	.word	0x00000c17
1000fc80:	00000c12 	.word	0x00000c12
1000fc84:	00000c0d 	.word	0x00000c0d
1000fc88:	00000c13 	.word	0x00000c13
1000fc8c:	00000c15 	.word	0x00000c15
1000fc90:	00000d08 	.word	0x00000d08
1000fc94:	00000d01 	.word	0x00000d01
1000fc98:	00000d15 	.word	0x00000d15
1000fc9c:	00000e1b 	.word	0x00000e1b
1000fca0:	00000e0f 	.word	0x00000e0f
1000fca4:	00000e03 	.word	0x00000e03
1000fca8:	00000e06 	.word	0x00000e06
1000fcac:	00000e0a 	.word	0x00000e0a
1000fcb0:	00000e15 	.word	0x00000e15
1000fcb4:	00000e11 	.word	0x00000e11
1000fcb8:	00000e13 	.word	0x00000e13
1000fcbc:	00000e17 	.word	0x00000e17
1000fcc0:	00000e19 	.word	0x00000e19
1000fcc4:	00000e27 	.word	0x00000e27
1000fcc8:	00000e21 	.word	0x00000e21
1000fccc:	00000e1c 	.word	0x00000e1c
1000fcd0:	00000e1d 	.word	0x00000e1d
1000fcd4:	4b9f      	ldr	r3, [pc, #636]	; (1000ff54 <at_ble_event_get+0x614>)
1000fcd6:	429c      	cmp	r4, r3
1000fcd8:	d07e      	beq.n	1000fdd8 <at_ble_event_get+0x498>
1000fcda:	4b9f      	ldr	r3, [pc, #636]	; (1000ff58 <at_ble_event_get+0x618>)
1000fcdc:	429c      	cmp	r4, r3
1000fcde:	d100      	bne.n	1000fce2 <at_ble_event_get+0x3a2>
1000fce0:	e08c      	b.n	1000fdfc <at_ble_event_get+0x4bc>
1000fce2:	e015      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fce4:	4b9d      	ldr	r3, [pc, #628]	; (1000ff5c <at_ble_event_get+0x61c>)
1000fce6:	429c      	cmp	r4, r3
1000fce8:	d100      	bne.n	1000fcec <at_ble_event_get+0x3ac>
1000fcea:	e10a      	b.n	1000ff02 <at_ble_event_get+0x5c2>
1000fcec:	d808      	bhi.n	1000fd00 <at_ble_event_get+0x3c0>
1000fcee:	4b9c      	ldr	r3, [pc, #624]	; (1000ff60 <at_ble_event_get+0x620>)
1000fcf0:	429c      	cmp	r4, r3
1000fcf2:	d100      	bne.n	1000fcf6 <at_ble_event_get+0x3b6>
1000fcf4:	e0f7      	b.n	1000fee6 <at_ble_event_get+0x5a6>
1000fcf6:	4b9b      	ldr	r3, [pc, #620]	; (1000ff64 <at_ble_event_get+0x624>)
1000fcf8:	429c      	cmp	r4, r3
1000fcfa:	d100      	bne.n	1000fcfe <at_ble_event_get+0x3be>
1000fcfc:	e0fa      	b.n	1000fef4 <at_ble_event_get+0x5b4>
1000fcfe:	e007      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000fd00:	4b99      	ldr	r3, [pc, #612]	; (1000ff68 <at_ble_event_get+0x628>)
1000fd02:	429c      	cmp	r4, r3
1000fd04:	d100      	bne.n	1000fd08 <at_ble_event_get+0x3c8>
1000fd06:	e103      	b.n	1000ff10 <at_ble_event_get+0x5d0>
1000fd08:	4b98      	ldr	r3, [pc, #608]	; (1000ff6c <at_ble_event_get+0x62c>)
1000fd0a:	429c      	cmp	r4, r3
1000fd0c:	d100      	bne.n	1000fd10 <at_ble_event_get+0x3d0>
1000fd0e:	e106      	b.n	1000ff1e <at_ble_event_get+0x5de>
1000fd10:	2600      	movs	r6, #0
1000fd12:	e10a      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd14:	1c30      	adds	r0, r6, #0
1000fd16:	1c29      	adds	r1, r5, #0
1000fd18:	4b95      	ldr	r3, [pc, #596]	; (1000ff70 <at_ble_event_get+0x630>)
1000fd1a:	e014      	b.n	1000fd46 <at_ble_event_get+0x406>
1000fd1c:	1c30      	adds	r0, r6, #0
1000fd1e:	1c29      	adds	r1, r5, #0
1000fd20:	4b94      	ldr	r3, [pc, #592]	; (1000ff74 <at_ble_event_get+0x634>)
1000fd22:	4798      	blx	r3
1000fd24:	2604      	movs	r6, #4
1000fd26:	e100      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd28:	1c30      	adds	r0, r6, #0
1000fd2a:	1c29      	adds	r1, r5, #0
1000fd2c:	4b92      	ldr	r3, [pc, #584]	; (1000ff78 <at_ble_event_get+0x638>)
1000fd2e:	4798      	blx	r3
1000fd30:	2601      	movs	r6, #1
1000fd32:	e0fa      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd34:	1c30      	adds	r0, r6, #0
1000fd36:	1c29      	adds	r1, r5, #0
1000fd38:	4b90      	ldr	r3, [pc, #576]	; (1000ff7c <at_ble_event_get+0x63c>)
1000fd3a:	4798      	blx	r3
1000fd3c:	260f      	movs	r6, #15
1000fd3e:	e0f4      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd40:	1c30      	adds	r0, r6, #0
1000fd42:	1c29      	adds	r1, r5, #0
1000fd44:	4b8e      	ldr	r3, [pc, #568]	; (1000ff80 <at_ble_event_get+0x640>)
1000fd46:	4798      	blx	r3
1000fd48:	1c06      	adds	r6, r0, #0
1000fd4a:	e0ee      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd4c:	9801      	ldr	r0, [sp, #4]
1000fd4e:	1c31      	adds	r1, r6, #0
1000fd50:	1c2a      	adds	r2, r5, #0
1000fd52:	4b8c      	ldr	r3, [pc, #560]	; (1000ff84 <at_ble_event_get+0x644>)
1000fd54:	e017      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fd56:	1c31      	adds	r1, r6, #0
1000fd58:	9801      	ldr	r0, [sp, #4]
1000fd5a:	1c2a      	adds	r2, r5, #0
1000fd5c:	4b8a      	ldr	r3, [pc, #552]	; (1000ff88 <at_ble_event_get+0x648>)
1000fd5e:	4798      	blx	r3
1000fd60:	2611      	movs	r6, #17
1000fd62:	e0e2      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd64:	1c31      	adds	r1, r6, #0
1000fd66:	9801      	ldr	r0, [sp, #4]
1000fd68:	1c2a      	adds	r2, r5, #0
1000fd6a:	4b88      	ldr	r3, [pc, #544]	; (1000ff8c <at_ble_event_get+0x64c>)
1000fd6c:	4798      	blx	r3
1000fd6e:	2612      	movs	r6, #18
1000fd70:	e0db      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd72:	1c30      	adds	r0, r6, #0
1000fd74:	1c29      	adds	r1, r5, #0
1000fd76:	4b86      	ldr	r3, [pc, #536]	; (1000ff90 <at_ble_event_get+0x650>)
1000fd78:	4798      	blx	r3
1000fd7a:	2606      	movs	r6, #6
1000fd7c:	e0d5      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fd7e:	1c31      	adds	r1, r6, #0
1000fd80:	1c2a      	adds	r2, r5, #0
1000fd82:	9801      	ldr	r0, [sp, #4]
1000fd84:	4b83      	ldr	r3, [pc, #524]	; (1000ff94 <at_ble_event_get+0x654>)
1000fd86:	4798      	blx	r3
1000fd88:	e7de      	b.n	1000fd48 <at_ble_event_get+0x408>
1000fd8a:	9801      	ldr	r0, [sp, #4]
1000fd8c:	1c31      	adds	r1, r6, #0
1000fd8e:	1c2a      	adds	r2, r5, #0
1000fd90:	4b81      	ldr	r3, [pc, #516]	; (1000ff98 <at_ble_event_get+0x658>)
1000fd92:	e7f8      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fd94:	1c31      	adds	r1, r6, #0
1000fd96:	9801      	ldr	r0, [sp, #4]
1000fd98:	1c2a      	adds	r2, r5, #0
1000fd9a:	4b80      	ldr	r3, [pc, #512]	; (1000ff9c <at_ble_event_get+0x65c>)
1000fd9c:	4798      	blx	r3
1000fd9e:	260d      	movs	r6, #13
1000fda0:	e0c3      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fda2:	1c31      	adds	r1, r6, #0
1000fda4:	9801      	ldr	r0, [sp, #4]
1000fda6:	1c2a      	adds	r2, r5, #0
1000fda8:	4b7d      	ldr	r3, [pc, #500]	; (1000ffa0 <at_ble_event_get+0x660>)
1000fdaa:	4798      	blx	r3
1000fdac:	260e      	movs	r6, #14
1000fdae:	e0bc      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fdb0:	9801      	ldr	r0, [sp, #4]
1000fdb2:	1c31      	adds	r1, r6, #0
1000fdb4:	1c2a      	adds	r2, r5, #0
1000fdb6:	4b7b      	ldr	r3, [pc, #492]	; (1000ffa4 <at_ble_event_get+0x664>)
1000fdb8:	4798      	blx	r3
1000fdba:	e084      	b.n	1000fec6 <at_ble_event_get+0x586>
1000fdbc:	1c31      	adds	r1, r6, #0
1000fdbe:	9801      	ldr	r0, [sp, #4]
1000fdc0:	1c2a      	adds	r2, r5, #0
1000fdc2:	4b79      	ldr	r3, [pc, #484]	; (1000ffa8 <at_ble_event_get+0x668>)
1000fdc4:	4798      	blx	r3
1000fdc6:	260b      	movs	r6, #11
1000fdc8:	e0af      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fdca:	1c31      	adds	r1, r6, #0
1000fdcc:	9801      	ldr	r0, [sp, #4]
1000fdce:	1c2a      	adds	r2, r5, #0
1000fdd0:	4b76      	ldr	r3, [pc, #472]	; (1000ffac <at_ble_event_get+0x66c>)
1000fdd2:	4798      	blx	r3
1000fdd4:	2610      	movs	r6, #16
1000fdd6:	e0a8      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fdd8:	1c30      	adds	r0, r6, #0
1000fdda:	1c29      	adds	r1, r5, #0
1000fddc:	4b74      	ldr	r3, [pc, #464]	; (1000ffb0 <at_ble_event_get+0x670>)
1000fdde:	4798      	blx	r3
1000fde0:	2628      	movs	r6, #40	; 0x28
1000fde2:	e0a2      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fde4:	1c30      	adds	r0, r6, #0
1000fde6:	1c29      	adds	r1, r5, #0
1000fde8:	4b72      	ldr	r3, [pc, #456]	; (1000ffb4 <at_ble_event_get+0x674>)
1000fdea:	4798      	blx	r3
1000fdec:	2629      	movs	r6, #41	; 0x29
1000fdee:	e09c      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fdf0:	1c30      	adds	r0, r6, #0
1000fdf2:	1c29      	adds	r1, r5, #0
1000fdf4:	4b70      	ldr	r3, [pc, #448]	; (1000ffb8 <at_ble_event_get+0x678>)
1000fdf6:	4798      	blx	r3
1000fdf8:	2627      	movs	r6, #39	; 0x27
1000fdfa:	e096      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fdfc:	1c30      	adds	r0, r6, #0
1000fdfe:	1c29      	adds	r1, r5, #0
1000fe00:	4b6e      	ldr	r3, [pc, #440]	; (1000ffbc <at_ble_event_get+0x67c>)
1000fe02:	4798      	blx	r3
1000fe04:	262a      	movs	r6, #42	; 0x2a
1000fe06:	e090      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe08:	9801      	ldr	r0, [sp, #4]
1000fe0a:	1c31      	adds	r1, r6, #0
1000fe0c:	1c2a      	adds	r2, r5, #0
1000fe0e:	4b6c      	ldr	r3, [pc, #432]	; (1000ffc0 <at_ble_event_get+0x680>)
1000fe10:	e7b9      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fe12:	9801      	ldr	r0, [sp, #4]
1000fe14:	1c31      	adds	r1, r6, #0
1000fe16:	1c2a      	adds	r2, r5, #0
1000fe18:	4b6a      	ldr	r3, [pc, #424]	; (1000ffc4 <at_ble_event_get+0x684>)
1000fe1a:	e7b4      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fe1c:	1c30      	adds	r0, r6, #0
1000fe1e:	1c29      	adds	r1, r5, #0
1000fe20:	4b69      	ldr	r3, [pc, #420]	; (1000ffc8 <at_ble_event_get+0x688>)
1000fe22:	4798      	blx	r3
1000fe24:	262b      	movs	r6, #43	; 0x2b
1000fe26:	e080      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe28:	1c30      	adds	r0, r6, #0
1000fe2a:	1c29      	adds	r1, r5, #0
1000fe2c:	4b67      	ldr	r3, [pc, #412]	; (1000ffcc <at_ble_event_get+0x68c>)
1000fe2e:	4798      	blx	r3
1000fe30:	262c      	movs	r6, #44	; 0x2c
1000fe32:	e07a      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe34:	1c31      	adds	r1, r6, #0
1000fe36:	9801      	ldr	r0, [sp, #4]
1000fe38:	1c2a      	adds	r2, r5, #0
1000fe3a:	4b65      	ldr	r3, [pc, #404]	; (1000ffd0 <at_ble_event_get+0x690>)
1000fe3c:	4798      	blx	r3
1000fe3e:	2613      	movs	r6, #19
1000fe40:	e073      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe42:	1c31      	adds	r1, r6, #0
1000fe44:	9801      	ldr	r0, [sp, #4]
1000fe46:	1c2a      	adds	r2, r5, #0
1000fe48:	4b62      	ldr	r3, [pc, #392]	; (1000ffd4 <at_ble_event_get+0x694>)
1000fe4a:	4798      	blx	r3
1000fe4c:	2614      	movs	r6, #20
1000fe4e:	e06c      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe50:	1c31      	adds	r1, r6, #0
1000fe52:	9801      	ldr	r0, [sp, #4]
1000fe54:	1c2a      	adds	r2, r5, #0
1000fe56:	4b60      	ldr	r3, [pc, #384]	; (1000ffd8 <at_ble_event_get+0x698>)
1000fe58:	4798      	blx	r3
1000fe5a:	2615      	movs	r6, #21
1000fe5c:	e065      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe5e:	1c31      	adds	r1, r6, #0
1000fe60:	9801      	ldr	r0, [sp, #4]
1000fe62:	1c2a      	adds	r2, r5, #0
1000fe64:	4b5d      	ldr	r3, [pc, #372]	; (1000ffdc <at_ble_event_get+0x69c>)
1000fe66:	4798      	blx	r3
1000fe68:	2616      	movs	r6, #22
1000fe6a:	e05e      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe6c:	9801      	ldr	r0, [sp, #4]
1000fe6e:	1c31      	adds	r1, r6, #0
1000fe70:	1c2a      	adds	r2, r5, #0
1000fe72:	4b5b      	ldr	r3, [pc, #364]	; (1000ffe0 <at_ble_event_get+0x6a0>)
1000fe74:	e787      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fe76:	1c31      	adds	r1, r6, #0
1000fe78:	9801      	ldr	r0, [sp, #4]
1000fe7a:	1c2a      	adds	r2, r5, #0
1000fe7c:	4b58      	ldr	r3, [pc, #352]	; (1000ffe0 <at_ble_event_get+0x6a0>)
1000fe7e:	4798      	blx	r3
1000fe80:	88a9      	ldrh	r1, [r5, #4]
1000fe82:	1c06      	adds	r6, r0, #0
1000fe84:	4b57      	ldr	r3, [pc, #348]	; (1000ffe4 <at_ble_event_get+0x6a4>)
1000fe86:	8828      	ldrh	r0, [r5, #0]
1000fe88:	4798      	blx	r3
1000fe8a:	e04e      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe8c:	1c31      	adds	r1, r6, #0
1000fe8e:	9801      	ldr	r0, [sp, #4]
1000fe90:	1c2a      	adds	r2, r5, #0
1000fe92:	4b55      	ldr	r3, [pc, #340]	; (1000ffe8 <at_ble_event_get+0x6a8>)
1000fe94:	4798      	blx	r3
1000fe96:	2623      	movs	r6, #35	; 0x23
1000fe98:	e047      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fe9a:	9801      	ldr	r0, [sp, #4]
1000fe9c:	1c31      	adds	r1, r6, #0
1000fe9e:	1c2a      	adds	r2, r5, #0
1000fea0:	4b52      	ldr	r3, [pc, #328]	; (1000ffec <at_ble_event_get+0x6ac>)
1000fea2:	e770      	b.n	1000fd86 <at_ble_event_get+0x446>
1000fea4:	9b01      	ldr	r3, [sp, #4]
1000fea6:	1c30      	adds	r0, r6, #0
1000fea8:	0a1f      	lsrs	r7, r3, #8
1000feaa:	802f      	strh	r7, [r5, #0]
1000feac:	1c29      	adds	r1, r5, #0
1000feae:	4b50      	ldr	r3, [pc, #320]	; (1000fff0 <at_ble_event_get+0x6b0>)
1000feb0:	e749      	b.n	1000fd46 <at_ble_event_get+0x406>
1000feb2:	9801      	ldr	r0, [sp, #4]
1000feb4:	1c31      	adds	r1, r6, #0
1000feb6:	1c2a      	adds	r2, r5, #0
1000feb8:	4b4e      	ldr	r3, [pc, #312]	; (1000fff4 <at_ble_event_get+0x6b4>)
1000feba:	e764      	b.n	1000fd86 <at_ble_event_get+0x446>
1000febc:	1c30      	adds	r0, r6, #0
1000febe:	1c29      	adds	r1, r5, #0
1000fec0:	9a01      	ldr	r2, [sp, #4]
1000fec2:	4b4d      	ldr	r3, [pc, #308]	; (1000fff8 <at_ble_event_get+0x6b8>)
1000fec4:	4798      	blx	r3
1000fec6:	263b      	movs	r6, #59	; 0x3b
1000fec8:	e02f      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000feca:	1c31      	adds	r1, r6, #0
1000fecc:	9801      	ldr	r0, [sp, #4]
1000fece:	1c2a      	adds	r2, r5, #0
1000fed0:	4b4a      	ldr	r3, [pc, #296]	; (1000fffc <at_ble_event_get+0x6bc>)
1000fed2:	4798      	blx	r3
1000fed4:	2618      	movs	r6, #24
1000fed6:	e028      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fed8:	1c31      	adds	r1, r6, #0
1000feda:	9801      	ldr	r0, [sp, #4]
1000fedc:	1c2a      	adds	r2, r5, #0
1000fede:	4b48      	ldr	r3, [pc, #288]	; (10010000 <at_ble_event_get+0x6c0>)
1000fee0:	4798      	blx	r3
1000fee2:	2620      	movs	r6, #32
1000fee4:	e021      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fee6:	1c31      	adds	r1, r6, #0
1000fee8:	9801      	ldr	r0, [sp, #4]
1000feea:	1c2a      	adds	r2, r5, #0
1000feec:	4b45      	ldr	r3, [pc, #276]	; (10010004 <at_ble_event_get+0x6c4>)
1000feee:	4798      	blx	r3
1000fef0:	2633      	movs	r6, #51	; 0x33
1000fef2:	e01a      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000fef4:	1c31      	adds	r1, r6, #0
1000fef6:	9801      	ldr	r0, [sp, #4]
1000fef8:	1c2a      	adds	r2, r5, #0
1000fefa:	4b43      	ldr	r3, [pc, #268]	; (10010008 <at_ble_event_get+0x6c8>)
1000fefc:	4798      	blx	r3
1000fefe:	2630      	movs	r6, #48	; 0x30
1000ff00:	e013      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000ff02:	1c31      	adds	r1, r6, #0
1000ff04:	9801      	ldr	r0, [sp, #4]
1000ff06:	1c2a      	adds	r2, r5, #0
1000ff08:	4b40      	ldr	r3, [pc, #256]	; (1001000c <at_ble_event_get+0x6cc>)
1000ff0a:	4798      	blx	r3
1000ff0c:	2634      	movs	r6, #52	; 0x34
1000ff0e:	e00c      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000ff10:	1c31      	adds	r1, r6, #0
1000ff12:	9801      	ldr	r0, [sp, #4]
1000ff14:	1c2a      	adds	r2, r5, #0
1000ff16:	4b3e      	ldr	r3, [pc, #248]	; (10010010 <at_ble_event_get+0x6d0>)
1000ff18:	4798      	blx	r3
1000ff1a:	2635      	movs	r6, #53	; 0x35
1000ff1c:	e005      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000ff1e:	1c31      	adds	r1, r6, #0
1000ff20:	9801      	ldr	r0, [sp, #4]
1000ff22:	1c2a      	adds	r2, r5, #0
1000ff24:	4b3b      	ldr	r3, [pc, #236]	; (10010014 <at_ble_event_get+0x6d4>)
1000ff26:	4798      	blx	r3
1000ff28:	2632      	movs	r6, #50	; 0x32
1000ff2a:	9b03      	ldr	r3, [sp, #12]
1000ff2c:	701e      	strb	r6, [r3, #0]
1000ff2e:	2300      	movs	r3, #0
1000ff30:	9302      	str	r3, [sp, #8]
1000ff32:	e57a      	b.n	1000fa2a <at_ble_event_get+0xea>
1000ff34:	23d0      	movs	r3, #208	; 0xd0
1000ff36:	e7fb      	b.n	1000ff30 <at_ble_event_get+0x5f0>
1000ff38:	9b01      	ldr	r3, [sp, #4]
1000ff3a:	9e02      	ldr	r6, [sp, #8]
1000ff3c:	2bbb      	cmp	r3, #187	; 0xbb
1000ff3e:	d000      	beq.n	1000ff42 <at_ble_event_get+0x602>
1000ff40:	e6e6      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000ff42:	e7f2      	b.n	1000ff2a <at_ble_event_get+0x5ea>
1000ff44:	9b02      	ldr	r3, [sp, #8]
1000ff46:	2b00      	cmp	r3, #0
1000ff48:	d000      	beq.n	1000ff4c <at_ble_event_get+0x60c>
1000ff4a:	e56e      	b.n	1000fa2a <at_ble_event_get+0xea>
1000ff4c:	e6e0      	b.n	1000fd10 <at_ble_event_get+0x3d0>
1000ff4e:	9802      	ldr	r0, [sp, #8]
1000ff50:	b007      	add	sp, #28
1000ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff54:	00000e22 	.word	0x00000e22
1000ff58:	00000e25 	.word	0x00000e25
1000ff5c:	00001b05 	.word	0x00001b05
1000ff60:	00001b01 	.word	0x00001b01
1000ff64:	00001b03 	.word	0x00001b03
1000ff68:	00001b06 	.word	0x00001b06
1000ff6c:	00001b08 	.word	0x00001b08
1000ff70:	10012171 	.word	0x10012171
1000ff74:	10012155 	.word	0x10012155
1000ff78:	100123f1 	.word	0x100123f1
1000ff7c:	100124e1 	.word	0x100124e1
1000ff80:	10012505 	.word	0x10012505
1000ff84:	100114e9 	.word	0x100114e9
1000ff88:	10011d69 	.word	0x10011d69
1000ff8c:	10011de5 	.word	0x10011de5
1000ff90:	100117a1 	.word	0x100117a1
1000ff94:	1001183d 	.word	0x1001183d
1000ff98:	10011915 	.word	0x10011915
1000ff9c:	10011b9d 	.word	0x10011b9d
1000ffa0:	10011c3d 	.word	0x10011c3d
1000ffa4:	10011cf5 	.word	0x10011cf5
1000ffa8:	10011d1d 	.word	0x10011d1d
1000ffac:	10011d33 	.word	0x10011d33
1000ffb0:	10011dfd 	.word	0x10011dfd
1000ffb4:	10011e2b 	.word	0x10011e2b
1000ffb8:	10011e41 	.word	0x10011e41
1000ffbc:	10011e6b 	.word	0x10011e6b
1000ffc0:	10011c99 	.word	0x10011c99
1000ffc4:	10011cc3 	.word	0x10011cc3
1000ffc8:	10010f29 	.word	0x10010f29
1000ffcc:	10010f55 	.word	0x10010f55
1000ffd0:	10012725 	.word	0x10012725
1000ffd4:	10012761 	.word	0x10012761
1000ffd8:	100127a9 	.word	0x100127a9
1000ffdc:	100127ed 	.word	0x100127ed
1000ffe0:	10012821 	.word	0x10012821
1000ffe4:	100126e5 	.word	0x100126e5
1000ffe8:	100128ed 	.word	0x100128ed
1000ffec:	10012875 	.word	0x10012875
1000fff0:	10010e0d 	.word	0x10010e0d
1000fff4:	10010e79 	.word	0x10010e79
1000fff8:	10010e3d 	.word	0x10010e3d
1000fffc:	100128fd 	.word	0x100128fd
10010000:	1001293d 	.word	0x1001293d
10010004:	10012c05 	.word	0x10012c05
10010008:	10012c0f 	.word	0x10012c0f
1001000c:	10012c15 	.word	0x10012c15
10010010:	10012c1b 	.word	0x10012c1b
10010014:	10012c27 	.word	0x10012c27

10010018 <internal_event_flush>:
10010018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001001a:	490e      	ldr	r1, [pc, #56]	; (10010054 <internal_event_flush+0x3c>)
1001001c:	2400      	movs	r4, #0
1001001e:	680b      	ldr	r3, [r1, #0]
10010020:	1c0f      	adds	r7, r1, #0
10010022:	1c1e      	adds	r6, r3, #0
10010024:	4a0c      	ldr	r2, [pc, #48]	; (10010058 <internal_event_flush+0x40>)
10010026:	6815      	ldr	r5, [r2, #0]
10010028:	9201      	str	r2, [sp, #4]
1001002a:	2b00      	cmp	r3, #0
1001002c:	d00e      	beq.n	1001004c <internal_event_flush+0x34>
1001002e:	889a      	ldrh	r2, [r3, #4]
10010030:	6819      	ldr	r1, [r3, #0]
10010032:	4282      	cmp	r2, r0
10010034:	d107      	bne.n	10010046 <internal_event_flush+0x2e>
10010036:	2c00      	cmp	r4, #0
10010038:	d001      	beq.n	1001003e <internal_event_flush+0x26>
1001003a:	6021      	str	r1, [r4, #0]
1001003c:	e000      	b.n	10010040 <internal_event_flush+0x28>
1001003e:	1c0e      	adds	r6, r1, #0
10010040:	601d      	str	r5, [r3, #0]
10010042:	1c1d      	adds	r5, r3, #0
10010044:	1c23      	adds	r3, r4, #0
10010046:	1c1c      	adds	r4, r3, #0
10010048:	1c0b      	adds	r3, r1, #0
1001004a:	e7ee      	b.n	1001002a <internal_event_flush+0x12>
1001004c:	9b01      	ldr	r3, [sp, #4]
1001004e:	603e      	str	r6, [r7, #0]
10010050:	601d      	str	r5, [r3, #0]
10010052:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010054:	10019774 	.word	0x10019774
10010058:	10019778 	.word	0x10019778

1001005c <internal_conn_flush>:
1001005c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001005e:	4a12      	ldr	r2, [pc, #72]	; (100100a8 <internal_conn_flush+0x4c>)
10010060:	9000      	str	r0, [sp, #0]
10010062:	6813      	ldr	r3, [r2, #0]
10010064:	4811      	ldr	r0, [pc, #68]	; (100100ac <internal_conn_flush+0x50>)
10010066:	1c1f      	adds	r7, r3, #0
10010068:	2100      	movs	r1, #0
1001006a:	4684      	mov	ip, r0
1001006c:	6804      	ldr	r4, [r0, #0]
1001006e:	9201      	str	r2, [sp, #4]
10010070:	2b00      	cmp	r3, #0
10010072:	d014      	beq.n	1001009e <internal_conn_flush+0x42>
10010074:	88d8      	ldrh	r0, [r3, #6]
10010076:	9a00      	ldr	r2, [sp, #0]
10010078:	681d      	ldr	r5, [r3, #0]
1001007a:	0a06      	lsrs	r6, r0, #8
1001007c:	4296      	cmp	r6, r2
1001007e:	d10b      	bne.n	10010098 <internal_conn_flush+0x3c>
10010080:	26fd      	movs	r6, #253	; 0xfd
10010082:	4006      	ands	r6, r0
10010084:	2e0c      	cmp	r6, #12
10010086:	d107      	bne.n	10010098 <internal_conn_flush+0x3c>
10010088:	2900      	cmp	r1, #0
1001008a:	d001      	beq.n	10010090 <internal_conn_flush+0x34>
1001008c:	600d      	str	r5, [r1, #0]
1001008e:	e000      	b.n	10010092 <internal_conn_flush+0x36>
10010090:	1c2f      	adds	r7, r5, #0
10010092:	601c      	str	r4, [r3, #0]
10010094:	1c1c      	adds	r4, r3, #0
10010096:	1c0b      	adds	r3, r1, #0
10010098:	1c19      	adds	r1, r3, #0
1001009a:	1c2b      	adds	r3, r5, #0
1001009c:	e7e8      	b.n	10010070 <internal_conn_flush+0x14>
1001009e:	9b01      	ldr	r3, [sp, #4]
100100a0:	601f      	str	r7, [r3, #0]
100100a2:	4663      	mov	r3, ip
100100a4:	601c      	str	r4, [r3, #0]
100100a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100100a8:	10019774 	.word	0x10019774
100100ac:	10019778 	.word	0x10019778

100100b0 <at_ble_device_name_set>:
100100b0:	b530      	push	{r4, r5, lr}
100100b2:	23cf      	movs	r3, #207	; 0xcf
100100b4:	2800      	cmp	r0, #0
100100b6:	d010      	beq.n	100100da <at_ble_device_name_set+0x2a>
100100b8:	1e4a      	subs	r2, r1, #1
100100ba:	2a1f      	cmp	r2, #31
100100bc:	d80d      	bhi.n	100100da <at_ble_device_name_set+0x2a>
100100be:	4a08      	ldr	r2, [pc, #32]	; (100100e0 <at_ble_device_name_set+0x30>)
100100c0:	1c13      	adds	r3, r2, #0
100100c2:	33aa      	adds	r3, #170	; 0xaa
100100c4:	8019      	strh	r1, [r3, #0]
100100c6:	2300      	movs	r3, #0
100100c8:	1c1c      	adds	r4, r3, #0
100100ca:	5cc5      	ldrb	r5, [r0, r3]
100100cc:	34ac      	adds	r4, #172	; 0xac
100100ce:	3301      	adds	r3, #1
100100d0:	5515      	strb	r5, [r2, r4]
100100d2:	b2dc      	uxtb	r4, r3
100100d4:	428c      	cmp	r4, r1
100100d6:	d3f7      	bcc.n	100100c8 <at_ble_device_name_set+0x18>
100100d8:	2300      	movs	r3, #0
100100da:	1c18      	adds	r0, r3, #0
100100dc:	bd30      	pop	{r4, r5, pc}
100100de:	46c0      	nop			; (mov r8, r8)
100100e0:	1001a71e 	.word	0x1001a71e

100100e4 <at_ble_addr_get>:
100100e4:	b510      	push	{r4, lr}
100100e6:	1c04      	adds	r4, r0, #0
100100e8:	20cf      	movs	r0, #207	; 0xcf
100100ea:	2c00      	cmp	r4, #0
100100ec:	d006      	beq.n	100100fc <at_ble_addr_get+0x18>
100100ee:	4b04      	ldr	r3, [pc, #16]	; (10010100 <at_ble_addr_get+0x1c>)
100100f0:	38ce      	subs	r0, #206	; 0xce
100100f2:	1c21      	adds	r1, r4, #0
100100f4:	4798      	blx	r3
100100f6:	4b03      	ldr	r3, [pc, #12]	; (10010104 <at_ble_addr_get+0x20>)
100100f8:	791b      	ldrb	r3, [r3, #4]
100100fa:	7023      	strb	r3, [r4, #0]
100100fc:	bd10      	pop	{r4, pc}
100100fe:	46c0      	nop			; (mov r8, r8)
10010100:	10012005 	.word	0x10012005
10010104:	1001a71e 	.word	0x1001a71e

10010108 <at_ble_set_dev_config>:
10010108:	b5f0      	push	{r4, r5, r6, r7, lr}
1001010a:	7906      	ldrb	r6, [r0, #4]
1001010c:	b089      	sub	sp, #36	; 0x24
1001010e:	25cf      	movs	r5, #207	; 0xcf
10010110:	2e03      	cmp	r6, #3
10010112:	d838      	bhi.n	10010186 <at_ble_set_dev_config+0x7e>
10010114:	7803      	ldrb	r3, [r0, #0]
10010116:	3511      	adds	r5, #17
10010118:	2b0f      	cmp	r3, #15
1001011a:	d834      	bhi.n	10010186 <at_ble_set_dev_config+0x7e>
1001011c:	2380      	movs	r3, #128	; 0x80
1001011e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
10010120:	3d11      	subs	r5, #17
10010122:	009b      	lsls	r3, r3, #2
10010124:	429f      	cmp	r7, r3
10010126:	d82e      	bhi.n	10010186 <at_ble_set_dev_config+0x7e>
10010128:	7fc5      	ldrb	r5, [r0, #31]
1001012a:	7f83      	ldrb	r3, [r0, #30]
1001012c:	01ad      	lsls	r5, r5, #6
1001012e:	015b      	lsls	r3, r3, #5
10010130:	431d      	orrs	r5, r3
10010132:	7ec3      	ldrb	r3, [r0, #27]
10010134:	431d      	orrs	r5, r3
10010136:	7f43      	ldrb	r3, [r0, #29]
10010138:	011b      	lsls	r3, r3, #4
1001013a:	431d      	orrs	r5, r3
1001013c:	7f03      	ldrb	r3, [r0, #28]
1001013e:	009b      	lsls	r3, r3, #2
10010140:	431d      	orrs	r5, r3
10010142:	4b12      	ldr	r3, [pc, #72]	; (1001018c <at_ble_set_dev_config+0x84>)
10010144:	b2ed      	uxtb	r5, r5
10010146:	711e      	strb	r6, [r3, #4]
10010148:	7903      	ldrb	r3, [r0, #4]
1001014a:	3b02      	subs	r3, #2
1001014c:	2b01      	cmp	r3, #1
1001014e:	d801      	bhi.n	10010154 <at_ble_set_dev_config+0x4c>
10010150:	2302      	movs	r3, #2
10010152:	7103      	strb	r3, [r0, #4]
10010154:	1c04      	adds	r4, r0, #0
10010156:	1c23      	adds	r3, r4, #0
10010158:	330b      	adds	r3, #11
1001015a:	8861      	ldrh	r1, [r4, #2]
1001015c:	9307      	str	r3, [sp, #28]
1001015e:	7923      	ldrb	r3, [r4, #4]
10010160:	7800      	ldrb	r0, [r0, #0]
10010162:	9300      	str	r3, [sp, #0]
10010164:	9501      	str	r5, [sp, #4]
10010166:	8c25      	ldrh	r5, [r4, #32]
10010168:	1d62      	adds	r2, r4, #5
1001016a:	9502      	str	r5, [sp, #8]
1001016c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1001016e:	9b07      	ldr	r3, [sp, #28]
10010170:	9503      	str	r5, [sp, #12]
10010172:	9704      	str	r7, [sp, #16]
10010174:	4d06      	ldr	r5, [pc, #24]	; (10010190 <at_ble_set_dev_config+0x88>)
10010176:	47a8      	blx	r5
10010178:	7126      	strb	r6, [r4, #4]
1001017a:	1c05      	adds	r5, r0, #0
1001017c:	1c21      	adds	r1, r4, #0
1001017e:	4803      	ldr	r0, [pc, #12]	; (1001018c <at_ble_set_dev_config+0x84>)
10010180:	2226      	movs	r2, #38	; 0x26
10010182:	4b04      	ldr	r3, [pc, #16]	; (10010194 <at_ble_set_dev_config+0x8c>)
10010184:	4798      	blx	r3
10010186:	1c28      	adds	r0, r5, #0
10010188:	b009      	add	sp, #36	; 0x24
1001018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001018c:	1001a71e 	.word	0x1001a71e
10010190:	10011efd 	.word	0x10011efd
10010194:	100149cf 	.word	0x100149cf

10010198 <at_ble_init>:
10010198:	b5f0      	push	{r4, r5, r6, r7, lr}
1001019a:	b087      	sub	sp, #28
1001019c:	af03      	add	r7, sp, #12
1001019e:	4954      	ldr	r1, [pc, #336]	; (100102f0 <at_ble_init+0x158>)
100101a0:	220b      	movs	r2, #11
100101a2:	4b54      	ldr	r3, [pc, #336]	; (100102f4 <at_ble_init+0x15c>)
100101a4:	1c04      	adds	r4, r0, #0
100101a6:	1c38      	adds	r0, r7, #0
100101a8:	4798      	blx	r3
100101aa:	2205      	movs	r2, #5
100101ac:	4b52      	ldr	r3, [pc, #328]	; (100102f8 <at_ble_init+0x160>)
100101ae:	2640      	movs	r6, #64	; 0x40
100101b0:	801a      	strh	r2, [r3, #0]
100101b2:	2300      	movs	r3, #0
100101b4:	4a51      	ldr	r2, [pc, #324]	; (100102fc <at_ble_init+0x164>)
100101b6:	6013      	str	r3, [r2, #0]
100101b8:	4a51      	ldr	r2, [pc, #324]	; (10010300 <at_ble_init+0x168>)
100101ba:	7013      	strb	r3, [r2, #0]
100101bc:	4a51      	ldr	r2, [pc, #324]	; (10010304 <at_ble_init+0x16c>)
100101be:	7013      	strb	r3, [r2, #0]
100101c0:	4b51      	ldr	r3, [pc, #324]	; (10010308 <at_ble_init+0x170>)
100101c2:	4798      	blx	r3
100101c4:	4b51      	ldr	r3, [pc, #324]	; (1001030c <at_ble_init+0x174>)
100101c6:	4798      	blx	r3
100101c8:	4b51      	ldr	r3, [pc, #324]	; (10010310 <at_ble_init+0x178>)
100101ca:	4798      	blx	r3
100101cc:	4b51      	ldr	r3, [pc, #324]	; (10010314 <at_ble_init+0x17c>)
100101ce:	4798      	blx	r3
100101d0:	2c00      	cmp	r4, #0
100101d2:	d100      	bne.n	100101d6 <at_ble_init+0x3e>
100101d4:	e089      	b.n	100102ea <at_ble_init+0x152>
100101d6:	68a3      	ldr	r3, [r4, #8]
100101d8:	2b00      	cmp	r3, #0
100101da:	d100      	bne.n	100101de <at_ble_init+0x46>
100101dc:	e085      	b.n	100102ea <at_ble_init+0x152>
100101de:	6923      	ldr	r3, [r4, #16]
100101e0:	2b00      	cmp	r3, #0
100101e2:	d100      	bne.n	100101e6 <at_ble_init+0x4e>
100101e4:	e081      	b.n	100102ea <at_ble_init+0x152>
100101e6:	6820      	ldr	r0, [r4, #0]
100101e8:	2800      	cmp	r0, #0
100101ea:	d102      	bne.n	100101f2 <at_ble_init+0x5a>
100101ec:	6863      	ldr	r3, [r4, #4]
100101ee:	2b00      	cmp	r3, #0
100101f0:	d17b      	bne.n	100102ea <at_ble_init+0x152>
100101f2:	4b49      	ldr	r3, [pc, #292]	; (10010318 <at_ble_init+0x180>)
100101f4:	6861      	ldr	r1, [r4, #4]
100101f6:	4798      	blx	r3
100101f8:	4b48      	ldr	r3, [pc, #288]	; (1001031c <at_ble_init+0x184>)
100101fa:	4798      	blx	r3
100101fc:	2801      	cmp	r0, #1
100101fe:	d901      	bls.n	10010204 <at_ble_init+0x6c>
10010200:	26e2      	movs	r6, #226	; 0xe2
10010202:	e072      	b.n	100102ea <at_ble_init+0x152>
10010204:	4846      	ldr	r0, [pc, #280]	; (10010320 <at_ble_init+0x188>)
10010206:	4b47      	ldr	r3, [pc, #284]	; (10010324 <at_ble_init+0x18c>)
10010208:	4798      	blx	r3
1001020a:	2800      	cmp	r0, #0
1001020c:	d1f8      	bne.n	10010200 <at_ble_init+0x68>
1001020e:	1c20      	adds	r0, r4, #0
10010210:	4b45      	ldr	r3, [pc, #276]	; (10010328 <at_ble_init+0x190>)
10010212:	4798      	blx	r3
10010214:	68e0      	ldr	r0, [r4, #12]
10010216:	68a1      	ldr	r1, [r4, #8]
10010218:	4b44      	ldr	r3, [pc, #272]	; (1001032c <at_ble_init+0x194>)
1001021a:	4798      	blx	r3
1001021c:	466b      	mov	r3, sp
1001021e:	2201      	movs	r2, #1
10010220:	1cdc      	adds	r4, r3, #3
10010222:	1c20      	adds	r0, r4, #0
10010224:	a901      	add	r1, sp, #4
10010226:	4252      	negs	r2, r2
10010228:	4b41      	ldr	r3, [pc, #260]	; (10010330 <at_ble_init+0x198>)
1001022a:	4798      	blx	r3
1001022c:	2800      	cmp	r0, #0
1001022e:	d102      	bne.n	10010236 <at_ble_init+0x9e>
10010230:	7823      	ldrb	r3, [r4, #0]
10010232:	2b39      	cmp	r3, #57	; 0x39
10010234:	d1f2      	bne.n	1001021c <at_ble_init+0x84>
10010236:	4b3f      	ldr	r3, [pc, #252]	; (10010334 <at_ble_init+0x19c>)
10010238:	4798      	blx	r3
1001023a:	1e06      	subs	r6, r0, #0
1001023c:	d155      	bne.n	100102ea <at_ble_init+0x152>
1001023e:	1c03      	adds	r3, r0, #0
10010240:	2101      	movs	r1, #1
10010242:	4a3d      	ldr	r2, [pc, #244]	; (10010338 <at_ble_init+0x1a0>)
10010244:	4249      	negs	r1, r1
10010246:	189a      	adds	r2, r3, r2
10010248:	3312      	adds	r3, #18
1001024a:	8151      	strh	r1, [r2, #10]
1001024c:	2b90      	cmp	r3, #144	; 0x90
1001024e:	d1f7      	bne.n	10010240 <at_ble_init+0xa8>
10010250:	4c3a      	ldr	r4, [pc, #232]	; (1001033c <at_ble_init+0x1a4>)
10010252:	3b81      	subs	r3, #129	; 0x81
10010254:	7023      	strb	r3, [r4, #0]
10010256:	4b3a      	ldr	r3, [pc, #232]	; (10010340 <at_ble_init+0x1a8>)
10010258:	4a3a      	ldr	r2, [pc, #232]	; (10010344 <at_ble_init+0x1ac>)
1001025a:	8063      	strh	r3, [r4, #2]
1001025c:	2300      	movs	r3, #0
1001025e:	7123      	strb	r3, [r4, #4]
10010260:	3301      	adds	r3, #1
10010262:	1e58      	subs	r0, r3, #1
10010264:	0119      	lsls	r1, r3, #4
10010266:	4301      	orrs	r1, r0
10010268:	3302      	adds	r3, #2
1001026a:	7011      	strb	r1, [r2, #0]
1001026c:	3201      	adds	r2, #1
1001026e:	2b21      	cmp	r3, #33	; 0x21
10010270:	d1f7      	bne.n	10010262 <at_ble_init+0xca>
10010272:	33e0      	adds	r3, #224	; 0xe0
10010274:	33ff      	adds	r3, #255	; 0xff
10010276:	84a3      	strh	r3, [r4, #36]	; 0x24
10010278:	1c23      	adds	r3, r4, #0
1001027a:	2500      	movs	r5, #0
1001027c:	3373      	adds	r3, #115	; 0x73
1001027e:	701d      	strb	r5, [r3, #0]
10010280:	1c23      	adds	r3, r4, #0
10010282:	3372      	adds	r3, #114	; 0x72
10010284:	701d      	strb	r5, [r3, #0]
10010286:	1c23      	adds	r3, r4, #0
10010288:	3376      	adds	r3, #118	; 0x76
1001028a:	701d      	strb	r5, [r3, #0]
1001028c:	1c23      	adds	r3, r4, #0
1001028e:	33cc      	adds	r3, #204	; 0xcc
10010290:	801d      	strh	r5, [r3, #0]
10010292:	1c22      	adds	r2, r4, #0
10010294:	23a0      	movs	r3, #160	; 0xa0
10010296:	32d0      	adds	r2, #208	; 0xd0
10010298:	005b      	lsls	r3, r3, #1
1001029a:	8013      	strh	r3, [r2, #0]
1001029c:	1c22      	adds	r2, r4, #0
1001029e:	32ce      	adds	r2, #206	; 0xce
100102a0:	8013      	strh	r3, [r2, #0]
100102a2:	1c23      	adds	r3, r4, #0
100102a4:	33d2      	adds	r3, #210	; 0xd2
100102a6:	801d      	strh	r5, [r3, #0]
100102a8:	22fa      	movs	r2, #250	; 0xfa
100102aa:	1c23      	adds	r3, r4, #0
100102ac:	0052      	lsls	r2, r2, #1
100102ae:	33d4      	adds	r3, #212	; 0xd4
100102b0:	801a      	strh	r2, [r3, #0]
100102b2:	1c23      	adds	r3, r4, #0
100102b4:	33d6      	adds	r3, #214	; 0xd6
100102b6:	701d      	strb	r5, [r3, #0]
100102b8:	1c20      	adds	r0, r4, #0
100102ba:	4b23      	ldr	r3, [pc, #140]	; (10010348 <at_ble_init+0x1b0>)
100102bc:	76e5      	strb	r5, [r4, #27]
100102be:	7725      	strb	r5, [r4, #28]
100102c0:	7765      	strb	r5, [r4, #29]
100102c2:	77a5      	strb	r5, [r4, #30]
100102c4:	77e5      	strb	r5, [r4, #31]
100102c6:	8425      	strh	r5, [r4, #32]
100102c8:	8465      	strh	r5, [r4, #34]	; 0x22
100102ca:	4798      	blx	r3
100102cc:	1c23      	adds	r3, r4, #0
100102ce:	2207      	movs	r2, #7
100102d0:	3374      	adds	r3, #116	; 0x74
100102d2:	701a      	strb	r2, [r3, #0]
100102d4:	1c23      	adds	r3, r4, #0
100102d6:	3204      	adds	r2, #4
100102d8:	33aa      	adds	r3, #170	; 0xaa
100102da:	801a      	strh	r2, [r3, #0]
100102dc:	1c2b      	adds	r3, r5, #0
100102de:	5d7a      	ldrb	r2, [r7, r5]
100102e0:	33ac      	adds	r3, #172	; 0xac
100102e2:	3501      	adds	r5, #1
100102e4:	54e2      	strb	r2, [r4, r3]
100102e6:	2d0b      	cmp	r5, #11
100102e8:	d1f8      	bne.n	100102dc <at_ble_init+0x144>
100102ea:	1c30      	adds	r0, r6, #0
100102ec:	b007      	add	sp, #28
100102ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102f0:	10017ac8 	.word	0x10017ac8
100102f4:	100149cf 	.word	0x100149cf
100102f8:	1001a68c 	.word	0x1001a68c
100102fc:	10019824 	.word	0x10019824
10010300:	10019784 	.word	0x10019784
10010304:	10017cf0 	.word	0x10017cf0
10010308:	1001294d 	.word	0x1001294d
1001030c:	10010609 	.word	0x10010609
10010310:	10010c69 	.word	0x10010c69
10010314:	10010f1d 	.word	0x10010f1d
10010318:	10010ca5 	.word	0x10010ca5
1001031c:	1000ecc9 	.word	0x1000ecc9
10010320:	1001121d 	.word	0x1001121d
10010324:	1000ef0d 	.word	0x1000ef0d
10010328:	100112c5 	.word	0x100112c5
1001032c:	1000f885 	.word	0x1000f885
10010330:	1000f941 	.word	0x1000f941
10010334:	10011e8d 	.word	0x10011e8d
10010338:	1001a68e 	.word	0x1001a68e
1001033c:	1001a71e 	.word	0x1001a71e
10010340:	00003a98 	.word	0x00003a98
10010344:	1001a729 	.word	0x1001a729
10010348:	10010109 	.word	0x10010109

1001034c <at_ble_addr_set>:
1001034c:	b538      	push	{r3, r4, r5, lr}
1001034e:	1c45      	adds	r5, r0, #1
10010350:	1c03      	adds	r3, r0, #0
10010352:	20cf      	movs	r0, #207	; 0xcf
10010354:	2d00      	cmp	r5, #0
10010356:	d018      	beq.n	1001038a <at_ble_addr_set+0x3e>
10010358:	781a      	ldrb	r2, [r3, #0]
1001035a:	2a03      	cmp	r2, #3
1001035c:	d815      	bhi.n	1001038a <at_ble_addr_set+0x3e>
1001035e:	2a01      	cmp	r2, #1
10010360:	d102      	bne.n	10010368 <at_ble_addr_set+0x1c>
10010362:	785a      	ldrb	r2, [r3, #1]
10010364:	2a00      	cmp	r2, #0
10010366:	d010      	beq.n	1001038a <at_ble_addr_set+0x3e>
10010368:	1c1c      	adds	r4, r3, #0
1001036a:	1c29      	adds	r1, r5, #0
1001036c:	2206      	movs	r2, #6
1001036e:	4b07      	ldr	r3, [pc, #28]	; (1001038c <at_ble_addr_set+0x40>)
10010370:	4807      	ldr	r0, [pc, #28]	; (10010390 <at_ble_addr_set+0x44>)
10010372:	4798      	blx	r3
10010374:	7823      	ldrb	r3, [r4, #0]
10010376:	4807      	ldr	r0, [pc, #28]	; (10010394 <at_ble_addr_set+0x48>)
10010378:	7103      	strb	r3, [r0, #4]
1001037a:	4b07      	ldr	r3, [pc, #28]	; (10010398 <at_ble_addr_set+0x4c>)
1001037c:	4798      	blx	r3
1001037e:	7823      	ldrb	r3, [r4, #0]
10010380:	2b00      	cmp	r3, #0
10010382:	d102      	bne.n	1001038a <at_ble_addr_set+0x3e>
10010384:	1c28      	adds	r0, r5, #0
10010386:	4b05      	ldr	r3, [pc, #20]	; (1001039c <at_ble_addr_set+0x50>)
10010388:	4798      	blx	r3
1001038a:	bd38      	pop	{r3, r4, r5, pc}
1001038c:	100149cf 	.word	0x100149cf
10010390:	1001a723 	.word	0x1001a723
10010394:	1001a71e 	.word	0x1001a71e
10010398:	10010109 	.word	0x10010109
1001039c:	10011349 	.word	0x10011349

100103a0 <at_ble_adv_data_set>:
100103a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100103a2:	4684      	mov	ip, r0
100103a4:	1c0f      	adds	r7, r1, #0
100103a6:	1c16      	adds	r6, r2, #0
100103a8:	1c1c      	adds	r4, r3, #0
100103aa:	2800      	cmp	r0, #0
100103ac:	d102      	bne.n	100103b4 <at_ble_adv_data_set+0x14>
100103ae:	20e2      	movs	r0, #226	; 0xe2
100103b0:	2a00      	cmp	r2, #0
100103b2:	d02b      	beq.n	1001040c <at_ble_adv_data_set+0x6c>
100103b4:	20cf      	movs	r0, #207	; 0xcf
100103b6:	2f1f      	cmp	r7, #31
100103b8:	d828      	bhi.n	1001040c <at_ble_adv_data_set+0x6c>
100103ba:	2c1f      	cmp	r4, #31
100103bc:	d826      	bhi.n	1001040c <at_ble_adv_data_set+0x6c>
100103be:	4663      	mov	r3, ip
100103c0:	2b00      	cmp	r3, #0
100103c2:	d00e      	beq.n	100103e2 <at_ble_adv_data_set+0x42>
100103c4:	4812      	ldr	r0, [pc, #72]	; (10010410 <at_ble_adv_data_set+0x70>)
100103c6:	4d13      	ldr	r5, [pc, #76]	; (10010414 <at_ble_adv_data_set+0x74>)
100103c8:	2f00      	cmp	r7, #0
100103ca:	d104      	bne.n	100103d6 <at_ble_adv_data_set+0x36>
100103cc:	1c39      	adds	r1, r7, #0
100103ce:	221f      	movs	r2, #31
100103d0:	4b11      	ldr	r3, [pc, #68]	; (10010418 <at_ble_adv_data_set+0x78>)
100103d2:	4798      	blx	r3
100103d4:	e003      	b.n	100103de <at_ble_adv_data_set+0x3e>
100103d6:	4661      	mov	r1, ip
100103d8:	1c3a      	adds	r2, r7, #0
100103da:	4b10      	ldr	r3, [pc, #64]	; (1001041c <at_ble_adv_data_set+0x7c>)
100103dc:	4798      	blx	r3
100103de:	3572      	adds	r5, #114	; 0x72
100103e0:	702f      	strb	r7, [r5, #0]
100103e2:	1e30      	subs	r0, r6, #0
100103e4:	d012      	beq.n	1001040c <at_ble_adv_data_set+0x6c>
100103e6:	4d0b      	ldr	r5, [pc, #44]	; (10010414 <at_ble_adv_data_set+0x74>)
100103e8:	480d      	ldr	r0, [pc, #52]	; (10010420 <at_ble_adv_data_set+0x80>)
100103ea:	2c00      	cmp	r4, #0
100103ec:	d107      	bne.n	100103fe <at_ble_adv_data_set+0x5e>
100103ee:	1c21      	adds	r1, r4, #0
100103f0:	221f      	movs	r2, #31
100103f2:	4b09      	ldr	r3, [pc, #36]	; (10010418 <at_ble_adv_data_set+0x78>)
100103f4:	3573      	adds	r5, #115	; 0x73
100103f6:	4798      	blx	r3
100103f8:	702c      	strb	r4, [r5, #0]
100103fa:	1c20      	adds	r0, r4, #0
100103fc:	e006      	b.n	1001040c <at_ble_adv_data_set+0x6c>
100103fe:	1c31      	adds	r1, r6, #0
10010400:	1c22      	adds	r2, r4, #0
10010402:	4b06      	ldr	r3, [pc, #24]	; (1001041c <at_ble_adv_data_set+0x7c>)
10010404:	4798      	blx	r3
10010406:	2000      	movs	r0, #0
10010408:	3573      	adds	r5, #115	; 0x73
1001040a:	702c      	strb	r4, [r5, #0]
1001040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001040e:	46c0      	nop			; (mov r8, r8)
10010410:	1001a752 	.word	0x1001a752
10010414:	1001a71e 	.word	0x1001a71e
10010418:	100149e1 	.word	0x100149e1
1001041c:	100149cf 	.word	0x100149cf
10010420:	1001a771 	.word	0x1001a771

10010424 <at_ble_adv_start>:
10010424:	b5f0      	push	{r4, r5, r6, r7, lr}
10010426:	b091      	sub	sp, #68	; 0x44
10010428:	1c1f      	adds	r7, r3, #0
1001042a:	ab16      	add	r3, sp, #88	; 0x58
1001042c:	881d      	ldrh	r5, [r3, #0]
1001042e:	ab17      	add	r3, sp, #92	; 0x5c
10010430:	881b      	ldrh	r3, [r3, #0]
10010432:	910d      	str	r1, [sp, #52]	; 0x34
10010434:	930e      	str	r3, [sp, #56]	; 0x38
10010436:	ab18      	add	r3, sp, #96	; 0x60
10010438:	781b      	ldrb	r3, [r3, #0]
1001043a:	1c04      	adds	r4, r0, #0
1001043c:	930f      	str	r3, [sp, #60]	; 0x3c
1001043e:	4b42      	ldr	r3, [pc, #264]	; (10010548 <at_ble_adv_start+0x124>)
10010440:	1c16      	adds	r6, r2, #0
10010442:	3373      	adds	r3, #115	; 0x73
10010444:	781b      	ldrb	r3, [r3, #0]
10010446:	20cf      	movs	r0, #207	; 0xcf
10010448:	930c      	str	r3, [sp, #48]	; 0x30
1001044a:	2c01      	cmp	r4, #1
1001044c:	d103      	bne.n	10010456 <at_ble_adv_start+0x32>
1001044e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10010450:	2b00      	cmp	r3, #0
10010452:	d176      	bne.n	10010542 <at_ble_adv_start+0x11e>
10010454:	e024      	b.n	100104a0 <at_ble_adv_start+0x7c>
10010456:	2c04      	cmp	r4, #4
10010458:	d873      	bhi.n	10010542 <at_ble_adv_start+0x11e>
1001045a:	2380      	movs	r3, #128	; 0x80
1001045c:	01db      	lsls	r3, r3, #7
1001045e:	429d      	cmp	r5, r3
10010460:	d86f      	bhi.n	10010542 <at_ble_adv_start+0x11e>
10010462:	2c00      	cmp	r4, #0
10010464:	d102      	bne.n	1001046c <at_ble_adv_start+0x48>
10010466:	2d1f      	cmp	r5, #31
10010468:	d96b      	bls.n	10010542 <at_ble_adv_start+0x11e>
1001046a:	e003      	b.n	10010474 <at_ble_adv_start+0x50>
1001046c:	2d9f      	cmp	r5, #159	; 0x9f
1001046e:	d801      	bhi.n	10010474 <at_ble_adv_start+0x50>
10010470:	2c01      	cmp	r4, #1
10010472:	d166      	bne.n	10010542 <at_ble_adv_start+0x11e>
10010474:	2f00      	cmp	r7, #0
10010476:	d009      	beq.n	1001048c <at_ble_adv_start+0x68>
10010478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001047a:	20cf      	movs	r0, #207	; 0xcf
1001047c:	3b01      	subs	r3, #1
1001047e:	2b01      	cmp	r3, #1
10010480:	d95f      	bls.n	10010542 <at_ble_adv_start+0x11e>
10010482:	2c01      	cmp	r4, #1
10010484:	d102      	bne.n	1001048c <at_ble_adv_start+0x68>
10010486:	2d00      	cmp	r5, #0
10010488:	d100      	bne.n	1001048c <at_ble_adv_start+0x68>
1001048a:	3520      	adds	r5, #32
1001048c:	4b2f      	ldr	r3, [pc, #188]	; (1001054c <at_ble_adv_start+0x128>)
1001048e:	4798      	blx	r3
10010490:	1c01      	adds	r1, r0, #0
10010492:	2e00      	cmp	r6, #0
10010494:	d043      	beq.n	1001051e <at_ble_adv_start+0xfa>
10010496:	7833      	ldrb	r3, [r6, #0]
10010498:	1e60      	subs	r0, r4, #1
1001049a:	2b00      	cmp	r3, #0
1001049c:	d109      	bne.n	100104b2 <at_ble_adv_start+0x8e>
1001049e:	e03b      	b.n	10010518 <at_ble_adv_start+0xf4>
100104a0:	2380      	movs	r3, #128	; 0x80
100104a2:	01db      	lsls	r3, r3, #7
100104a4:	429d      	cmp	r5, r3
100104a6:	d84c      	bhi.n	10010542 <at_ble_adv_start+0x11e>
100104a8:	2e00      	cmp	r6, #0
100104aa:	d04a      	beq.n	10010542 <at_ble_adv_start+0x11e>
100104ac:	2f00      	cmp	r7, #0
100104ae:	d1e3      	bne.n	10010478 <at_ble_adv_start+0x54>
100104b0:	e02b      	b.n	1001050a <at_ble_adv_start+0xe6>
100104b2:	2301      	movs	r3, #1
100104b4:	2803      	cmp	r0, #3
100104b6:	d93a      	bls.n	1001052e <at_ble_adv_start+0x10a>
100104b8:	200d      	movs	r0, #13
100104ba:	1c72      	adds	r2, r6, #1
100104bc:	e002      	b.n	100104c4 <at_ble_adv_start+0xa0>
100104be:	200e      	movs	r0, #14
100104c0:	1e32      	subs	r2, r6, #0
100104c2:	d1fa      	bne.n	100104ba <at_ble_adv_start+0x96>
100104c4:	4c20      	ldr	r4, [pc, #128]	; (10010548 <at_ble_adv_start+0x124>)
100104c6:	3474      	adds	r4, #116	; 0x74
100104c8:	7826      	ldrb	r6, [r4, #0]
100104ca:	2407      	movs	r4, #7
100104cc:	2e00      	cmp	r6, #0
100104ce:	d000      	beq.n	100104d2 <at_ble_adv_start+0xae>
100104d0:	1c34      	adds	r4, r6, #0
100104d2:	9200      	str	r2, [sp, #0]
100104d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100104d6:	9403      	str	r4, [sp, #12]
100104d8:	9204      	str	r2, [sp, #16]
100104da:	4a1b      	ldr	r2, [pc, #108]	; (10010548 <at_ble_adv_start+0x124>)
100104dc:	9501      	str	r5, [sp, #4]
100104de:	9502      	str	r5, [sp, #8]
100104e0:	9705      	str	r7, [sp, #20]
100104e2:	3272      	adds	r2, #114	; 0x72
100104e4:	7812      	ldrb	r2, [r2, #0]
100104e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100104e8:	9206      	str	r2, [sp, #24]
100104ea:	4a19      	ldr	r2, [pc, #100]	; (10010550 <at_ble_adv_start+0x12c>)
100104ec:	9207      	str	r2, [sp, #28]
100104ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100104f0:	9208      	str	r2, [sp, #32]
100104f2:	4a18      	ldr	r2, [pc, #96]	; (10010554 <at_ble_adv_start+0x130>)
100104f4:	9209      	str	r2, [sp, #36]	; 0x24
100104f6:	2264      	movs	r2, #100	; 0x64
100104f8:	4362      	muls	r2, r4
100104fa:	b292      	uxth	r2, r2
100104fc:	920a      	str	r2, [sp, #40]	; 0x28
100104fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10010500:	4c15      	ldr	r4, [pc, #84]	; (10010558 <at_ble_adv_start+0x134>)
10010502:	920b      	str	r2, [sp, #44]	; 0x2c
10010504:	4a15      	ldr	r2, [pc, #84]	; (1001055c <at_ble_adv_start+0x138>)
10010506:	47a0      	blx	r4
10010508:	e01b      	b.n	10010542 <at_ble_adv_start+0x11e>
1001050a:	2d00      	cmp	r5, #0
1001050c:	d1be      	bne.n	1001048c <at_ble_adv_start+0x68>
1001050e:	4b0f      	ldr	r3, [pc, #60]	; (1001054c <at_ble_adv_start+0x128>)
10010510:	4798      	blx	r3
10010512:	2520      	movs	r5, #32
10010514:	1c01      	adds	r1, r0, #0
10010516:	e7be      	b.n	10010496 <at_ble_adv_start+0x72>
10010518:	2803      	cmp	r0, #3
1001051a:	d8cd      	bhi.n	100104b8 <at_ble_adv_start+0x94>
1001051c:	e006      	b.n	1001052c <at_ble_adv_start+0x108>
1001051e:	1e60      	subs	r0, r4, #1
10010520:	2803      	cmp	r0, #3
10010522:	d903      	bls.n	1001052c <at_ble_adv_start+0x108>
10010524:	1c33      	adds	r3, r6, #0
10010526:	200d      	movs	r0, #13
10010528:	1c32      	adds	r2, r6, #0
1001052a:	e7cb      	b.n	100104c4 <at_ble_adv_start+0xa0>
1001052c:	2300      	movs	r3, #0
1001052e:	f002 fb7f 	bl	10012c30 <__gnu_thumb1_case_sqi>
10010532:	06c6      	.short	0x06c6
10010534:	0204      	.short	0x0204
10010536:	200f      	movs	r0, #15
10010538:	e7c2      	b.n	100104c0 <at_ble_adv_start+0x9c>
1001053a:	2200      	movs	r2, #0
1001053c:	920c      	str	r2, [sp, #48]	; 0x30
1001053e:	200c      	movs	r0, #12
10010540:	e7be      	b.n	100104c0 <at_ble_adv_start+0x9c>
10010542:	b011      	add	sp, #68	; 0x44
10010544:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010546:	46c0      	nop			; (mov r8, r8)
10010548:	1001a71e 	.word	0x1001a71e
1001054c:	100123d9 	.word	0x100123d9
10010550:	1001a752 	.word	0x1001a752
10010554:	1001a771 	.word	0x1001a771
10010558:	100122b9 	.word	0x100122b9
1001055c:	00003a98 	.word	0x00003a98

10010560 <at_ble_adv_stop>:
10010560:	b508      	push	{r3, lr}
10010562:	4b01      	ldr	r3, [pc, #4]	; (10010568 <at_ble_adv_stop+0x8>)
10010564:	4798      	blx	r3
10010566:	bd08      	pop	{r3, pc}
10010568:	100120e5 	.word	0x100120e5

1001056c <at_ble_scan_stop>:
1001056c:	b510      	push	{r4, lr}
1001056e:	4b05      	ldr	r3, [pc, #20]	; (10010584 <at_ble_scan_stop+0x18>)
10010570:	4798      	blx	r3
10010572:	1e04      	subs	r4, r0, #0
10010574:	d103      	bne.n	1001057e <at_ble_scan_stop+0x12>
10010576:	20d1      	movs	r0, #209	; 0xd1
10010578:	4b03      	ldr	r3, [pc, #12]	; (10010588 <at_ble_scan_stop+0x1c>)
1001057a:	0100      	lsls	r0, r0, #4
1001057c:	4798      	blx	r3
1001057e:	1c20      	adds	r0, r4, #0
10010580:	bd10      	pop	{r4, pc}
10010582:	46c0      	nop			; (mov r8, r8)
10010584:	100120e5 	.word	0x100120e5
10010588:	10010019 	.word	0x10010019

1001058c <at_ble_disconnect>:
1001058c:	b538      	push	{r3, r4, r5, lr}
1001058e:	1c04      	adds	r4, r0, #0
10010590:	4b04      	ldr	r3, [pc, #16]	; (100105a4 <at_ble_disconnect+0x18>)
10010592:	1c08      	adds	r0, r1, #0
10010594:	1c21      	adds	r1, r4, #0
10010596:	4798      	blx	r3
10010598:	1c05      	adds	r5, r0, #0
1001059a:	4b03      	ldr	r3, [pc, #12]	; (100105a8 <at_ble_disconnect+0x1c>)
1001059c:	1c20      	adds	r0, r4, #0
1001059e:	4798      	blx	r3
100105a0:	1c28      	adds	r0, r5, #0
100105a2:	bd38      	pop	{r3, r4, r5, pc}
100105a4:	1001175d 	.word	0x1001175d
100105a8:	1001005d 	.word	0x1001005d

100105ac <at_ble_conn_update_reply>:
100105ac:	b510      	push	{r4, lr}
100105ae:	4c01      	ldr	r4, [pc, #4]	; (100105b4 <at_ble_conn_update_reply+0x8>)
100105b0:	47a0      	blx	r4
100105b2:	bd10      	pop	{r4, pc}
100105b4:	10011c4d 	.word	0x10011c4d

100105b8 <at_ble_random_address_resolve>:
100105b8:	b510      	push	{r4, lr}
100105ba:	23cf      	movs	r3, #207	; 0xcf
100105bc:	2800      	cmp	r0, #0
100105be:	d00a      	beq.n	100105d6 <at_ble_random_address_resolve+0x1e>
100105c0:	2900      	cmp	r1, #0
100105c2:	d008      	beq.n	100105d6 <at_ble_random_address_resolve+0x1e>
100105c4:	2a00      	cmp	r2, #0
100105c6:	d006      	beq.n	100105d6 <at_ble_random_address_resolve+0x1e>
100105c8:	780c      	ldrb	r4, [r1, #0]
100105ca:	2c02      	cmp	r4, #2
100105cc:	d103      	bne.n	100105d6 <at_ble_random_address_resolve+0x1e>
100105ce:	4b03      	ldr	r3, [pc, #12]	; (100105dc <at_ble_random_address_resolve+0x24>)
100105d0:	3101      	adds	r1, #1
100105d2:	4798      	blx	r3
100105d4:	2300      	movs	r3, #0
100105d6:	1c18      	adds	r0, r3, #0
100105d8:	bd10      	pop	{r4, pc}
100105da:	46c0      	nop			; (mov r8, r8)
100105dc:	10012479 	.word	0x10012479

100105e0 <at_ble_uuid_type2len>:
100105e0:	23cf      	movs	r3, #207	; 0xcf
100105e2:	2802      	cmp	r0, #2
100105e4:	d801      	bhi.n	100105ea <at_ble_uuid_type2len+0xa>
100105e6:	4b02      	ldr	r3, [pc, #8]	; (100105f0 <at_ble_uuid_type2len+0x10>)
100105e8:	5c1b      	ldrb	r3, [r3, r0]
100105ea:	1c18      	adds	r0, r3, #0
100105ec:	4770      	bx	lr
100105ee:	46c0      	nop			; (mov r8, r8)
100105f0:	10017ad3 	.word	0x10017ad3

100105f4 <at_ble_uuid_len2type>:
100105f4:	1e83      	subs	r3, r0, #2
100105f6:	b2db      	uxtb	r3, r3
100105f8:	2003      	movs	r0, #3
100105fa:	2b0e      	cmp	r3, #14
100105fc:	d801      	bhi.n	10010602 <at_ble_uuid_len2type+0xe>
100105fe:	4a01      	ldr	r2, [pc, #4]	; (10010604 <at_ble_uuid_len2type+0x10>)
10010600:	5cd0      	ldrb	r0, [r2, r3]
10010602:	4770      	bx	lr
10010604:	10017ad6 	.word	0x10017ad6

10010608 <init_gatt_client_module>:
10010608:	2200      	movs	r2, #0
1001060a:	4b01      	ldr	r3, [pc, #4]	; (10010610 <init_gatt_client_module+0x8>)
1001060c:	801a      	strh	r2, [r3, #0]
1001060e:	4770      	bx	lr
10010610:	1001977c 	.word	0x1001977c

10010614 <db_searchATT>:
10010614:	b570      	push	{r4, r5, r6, lr}
10010616:	1c05      	adds	r5, r0, #0
10010618:	2400      	movs	r4, #0
1001061a:	4b0c      	ldr	r3, [pc, #48]	; (1001064c <db_searchATT+0x38>)
1001061c:	6819      	ldr	r1, [r3, #0]
1001061e:	4b0c      	ldr	r3, [pc, #48]	; (10010650 <db_searchATT+0x3c>)
10010620:	681e      	ldr	r6, [r3, #0]
10010622:	428c      	cmp	r4, r1
10010624:	dc10      	bgt.n	10010648 <db_searchATT+0x34>
10010626:	200c      	movs	r0, #12
10010628:	1863      	adds	r3, r4, r1
1001062a:	0fda      	lsrs	r2, r3, #31
1001062c:	18d3      	adds	r3, r2, r3
1001062e:	1c02      	adds	r2, r0, #0
10010630:	105b      	asrs	r3, r3, #1
10010632:	435a      	muls	r2, r3
10010634:	18b0      	adds	r0, r6, r2
10010636:	8802      	ldrh	r2, [r0, #0]
10010638:	42aa      	cmp	r2, r5
1001063a:	d201      	bcs.n	10010640 <db_searchATT+0x2c>
1001063c:	1e59      	subs	r1, r3, #1
1001063e:	e7f0      	b.n	10010622 <db_searchATT+0xe>
10010640:	42aa      	cmp	r2, r5
10010642:	d902      	bls.n	1001064a <db_searchATT+0x36>
10010644:	1c5c      	adds	r4, r3, #1
10010646:	e7ec      	b.n	10010622 <db_searchATT+0xe>
10010648:	2000      	movs	r0, #0
1001064a:	bd70      	pop	{r4, r5, r6, pc}
1001064c:	10019790 	.word	0x10019790
10010650:	10019788 	.word	0x10019788

10010654 <att_permissions>:
10010654:	b530      	push	{r4, r5, lr}
10010656:	2403      	movs	r4, #3
10010658:	1c05      	adds	r5, r0, #0
1001065a:	2301      	movs	r3, #1
1001065c:	4025      	ands	r5, r4
1001065e:	42a5      	cmp	r5, r4
10010660:	d009      	beq.n	10010676 <att_permissions+0x22>
10010662:	1c23      	adds	r3, r4, #0
10010664:	1924      	adds	r4, r4, r4
10010666:	4220      	tst	r0, r4
10010668:	d105      	bne.n	10010676 <att_permissions+0x22>
1001066a:	3b02      	subs	r3, #2
1001066c:	4218      	tst	r0, r3
1001066e:	d102      	bne.n	10010676 <att_permissions+0x22>
10010670:	1e4b      	subs	r3, r1, #1
10010672:	4199      	sbcs	r1, r3
10010674:	b28b      	uxth	r3, r1
10010676:	2130      	movs	r1, #48	; 0x30
10010678:	4001      	ands	r1, r0
1001067a:	2930      	cmp	r1, #48	; 0x30
1001067c:	d007      	beq.n	1001068e <att_permissions+0x3a>
1001067e:	0641      	lsls	r1, r0, #25
10010680:	d401      	bmi.n	10010686 <att_permissions+0x32>
10010682:	0681      	lsls	r1, r0, #26
10010684:	d501      	bpl.n	1001068a <att_permissions+0x36>
10010686:	4807      	ldr	r0, [pc, #28]	; (100106a4 <att_permissions+0x50>)
10010688:	e009      	b.n	1001069e <att_permissions+0x4a>
1001068a:	06c1      	lsls	r1, r0, #27
1001068c:	d501      	bpl.n	10010692 <att_permissions+0x3e>
1001068e:	4806      	ldr	r0, [pc, #24]	; (100106a8 <att_permissions+0x54>)
10010690:	e005      	b.n	1001069e <att_permissions+0x4a>
10010692:	2a00      	cmp	r2, #0
10010694:	d001      	beq.n	1001069a <att_permissions+0x46>
10010696:	2204      	movs	r2, #4
10010698:	4313      	orrs	r3, r2
1001069a:	2080      	movs	r0, #128	; 0x80
1001069c:	0180      	lsls	r0, r0, #6
1001069e:	4318      	orrs	r0, r3
100106a0:	bd30      	pop	{r4, r5, pc}
100106a2:	46c0      	nop			; (mov r8, r8)
100106a4:	0000200c 	.word	0x0000200c
100106a8:	00002004 	.word	0x00002004

100106ac <char_permissions>:
100106ac:	b530      	push	{r4, r5, lr}
100106ae:	2300      	movs	r3, #0
100106b0:	0784      	lsls	r4, r0, #30
100106b2:	d503      	bpl.n	100106bc <char_permissions+0x10>
100106b4:	3301      	adds	r3, #1
100106b6:	4219      	tst	r1, r3
100106b8:	d100      	bne.n	100106bc <char_permissions+0x10>
100106ba:	3302      	adds	r3, #2
100106bc:	0704      	lsls	r4, r0, #28
100106be:	d508      	bpl.n	100106d2 <char_permissions+0x26>
100106c0:	06cc      	lsls	r4, r1, #27
100106c2:	d501      	bpl.n	100106c8 <char_permissions+0x1c>
100106c4:	2404      	movs	r4, #4
100106c6:	e000      	b.n	100106ca <char_permissions+0x1e>
100106c8:	240c      	movs	r4, #12
100106ca:	4323      	orrs	r3, r4
100106cc:	2480      	movs	r4, #128	; 0x80
100106ce:	01a4      	lsls	r4, r4, #6
100106d0:	4323      	orrs	r3, r4
100106d2:	0684      	lsls	r4, r0, #26
100106d4:	d506      	bpl.n	100106e4 <char_permissions+0x38>
100106d6:	2406      	movs	r4, #6
100106d8:	4221      	tst	r1, r4
100106da:	d101      	bne.n	100106e0 <char_permissions+0x34>
100106dc:	340a      	adds	r4, #10
100106de:	e000      	b.n	100106e2 <char_permissions+0x36>
100106e0:	2430      	movs	r4, #48	; 0x30
100106e2:	4323      	orrs	r3, r4
100106e4:	06c4      	lsls	r4, r0, #27
100106e6:	d506      	bpl.n	100106f6 <char_permissions+0x4a>
100106e8:	2406      	movs	r4, #6
100106ea:	4221      	tst	r1, r4
100106ec:	d101      	bne.n	100106f2 <char_permissions+0x46>
100106ee:	343a      	adds	r4, #58	; 0x3a
100106f0:	e000      	b.n	100106f4 <char_permissions+0x48>
100106f2:	24c0      	movs	r4, #192	; 0xc0
100106f4:	4323      	orrs	r3, r4
100106f6:	2480      	movs	r4, #128	; 0x80
100106f8:	0064      	lsls	r4, r4, #1
100106fa:	4220      	tst	r0, r4
100106fc:	d000      	beq.n	10010700 <char_permissions+0x54>
100106fe:	4323      	orrs	r3, r4
10010700:	07c4      	lsls	r4, r0, #31
10010702:	d502      	bpl.n	1001070a <char_permissions+0x5e>
10010704:	2480      	movs	r4, #128	; 0x80
10010706:	00a4      	lsls	r4, r4, #2
10010708:	4323      	orrs	r3, r4
1001070a:	2404      	movs	r4, #4
1001070c:	4220      	tst	r0, r4
1001070e:	d006      	beq.n	1001071e <char_permissions+0x72>
10010710:	06cd      	lsls	r5, r1, #27
10010712:	d400      	bmi.n	10010716 <char_permissions+0x6a>
10010714:	240c      	movs	r4, #12
10010716:	4323      	orrs	r3, r4
10010718:	2480      	movs	r4, #128	; 0x80
1001071a:	0124      	lsls	r4, r4, #4
1001071c:	4323      	orrs	r3, r4
1001071e:	0644      	lsls	r4, r0, #25
10010720:	d501      	bpl.n	10010726 <char_permissions+0x7a>
10010722:	4c08      	ldr	r4, [pc, #32]	; (10010744 <char_permissions+0x98>)
10010724:	4323      	orrs	r3, r4
10010726:	0600      	lsls	r0, r0, #24
10010728:	d507      	bpl.n	1001073a <char_permissions+0x8e>
1001072a:	2004      	movs	r0, #4
1001072c:	06c9      	lsls	r1, r1, #27
1001072e:	d400      	bmi.n	10010732 <char_permissions+0x86>
10010730:	200c      	movs	r0, #12
10010732:	4303      	orrs	r3, r0
10010734:	2084      	movs	r0, #132	; 0x84
10010736:	0180      	lsls	r0, r0, #6
10010738:	4303      	orrs	r3, r0
1001073a:	0390      	lsls	r0, r2, #14
1001073c:	4303      	orrs	r3, r0
1001073e:	b298      	uxth	r0, r3
10010740:	bd30      	pop	{r4, r5, pc}
10010742:	46c0      	nop			; (mov r8, r8)
10010744:	00001004 	.word	0x00001004

10010748 <presentation_format_define>:
10010748:	b507      	push	{r0, r1, r2, lr}
1001074a:	466a      	mov	r2, sp
1001074c:	780b      	ldrb	r3, [r1, #0]
1001074e:	7013      	strb	r3, [r2, #0]
10010750:	784b      	ldrb	r3, [r1, #1]
10010752:	7053      	strb	r3, [r2, #1]
10010754:	884b      	ldrh	r3, [r1, #2]
10010756:	7093      	strb	r3, [r2, #2]
10010758:	0a1b      	lsrs	r3, r3, #8
1001075a:	70d3      	strb	r3, [r2, #3]
1001075c:	790b      	ldrb	r3, [r1, #4]
1001075e:	7113      	strb	r3, [r2, #4]
10010760:	88cb      	ldrh	r3, [r1, #6]
10010762:	2107      	movs	r1, #7
10010764:	7153      	strb	r3, [r2, #5]
10010766:	0a1b      	lsrs	r3, r3, #8
10010768:	7193      	strb	r3, [r2, #6]
1001076a:	4b01      	ldr	r3, [pc, #4]	; (10010770 <presentation_format_define+0x28>)
1001076c:	4798      	blx	r3
1001076e:	bd0e      	pop	{r1, r2, r3, pc}
10010770:	10012add 	.word	0x10012add

10010774 <db_addATT>:
10010774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010776:	4c29      	ldr	r4, [pc, #164]	; (1001081c <db_addATT+0xa8>)
10010778:	1c1d      	adds	r5, r3, #0
1001077a:	6823      	ldr	r3, [r4, #0]
1001077c:	9001      	str	r0, [sp, #4]
1001077e:	26d3      	movs	r6, #211	; 0xd3
10010780:	2b00      	cmp	r3, #0
10010782:	d048      	beq.n	10010816 <db_addATT+0xa2>
10010784:	1c1e      	adds	r6, r3, #0
10010786:	3e0c      	subs	r6, #12
10010788:	6026      	str	r6, [r4, #0]
1001078a:	2900      	cmp	r1, #0
1001078c:	d005      	beq.n	1001079a <db_addATT+0x26>
1001078e:	4f24      	ldr	r7, [pc, #144]	; (10010820 <db_addATT+0xac>)
10010790:	46bc      	mov	ip, r7
10010792:	4660      	mov	r0, ip
10010794:	683f      	ldr	r7, [r7, #0]
10010796:	18bf      	adds	r7, r7, r2
10010798:	6007      	str	r7, [r0, #0]
1001079a:	4821      	ldr	r0, [pc, #132]	; (10010820 <db_addATT+0xac>)
1001079c:	6807      	ldr	r7, [r0, #0]
1001079e:	4684      	mov	ip, r0
100107a0:	42be      	cmp	r6, r7
100107a2:	d932      	bls.n	1001080a <db_addATT+0x96>
100107a4:	4668      	mov	r0, sp
100107a6:	8880      	ldrh	r0, [r0, #4]
100107a8:	3b0c      	subs	r3, #12
100107aa:	8018      	strh	r0, [r3, #0]
100107ac:	6823      	ldr	r3, [r4, #0]
100107ae:	2900      	cmp	r1, #0
100107b0:	d009      	beq.n	100107c6 <db_addATT+0x52>
100107b2:	2a00      	cmp	r2, #0
100107b4:	d007      	beq.n	100107c6 <db_addATT+0x52>
100107b6:	4660      	mov	r0, ip
100107b8:	6800      	ldr	r0, [r0, #0]
100107ba:	809a      	strh	r2, [r3, #4]
100107bc:	1a80      	subs	r0, r0, r2
100107be:	6098      	str	r0, [r3, #8]
100107c0:	4b18      	ldr	r3, [pc, #96]	; (10010824 <db_addATT+0xb0>)
100107c2:	4798      	blx	r3
100107c4:	e002      	b.n	100107cc <db_addATT+0x58>
100107c6:	2100      	movs	r1, #0
100107c8:	809a      	strh	r2, [r3, #4]
100107ca:	6099      	str	r1, [r3, #8]
100107cc:	2300      	movs	r3, #0
100107ce:	6822      	ldr	r2, [r4, #0]
100107d0:	7093      	strb	r3, [r2, #2]
100107d2:	3303      	adds	r3, #3
100107d4:	402b      	ands	r3, r5
100107d6:	2b03      	cmp	r3, #3
100107d8:	d001      	beq.n	100107de <db_addATT+0x6a>
100107da:	076b      	lsls	r3, r5, #29
100107dc:	d504      	bpl.n	100107e8 <db_addATT+0x74>
100107de:	2101      	movs	r1, #1
100107e0:	6822      	ldr	r2, [r4, #0]
100107e2:	7893      	ldrb	r3, [r2, #2]
100107e4:	430b      	orrs	r3, r1
100107e6:	7093      	strb	r3, [r2, #2]
100107e8:	2330      	movs	r3, #48	; 0x30
100107ea:	402b      	ands	r3, r5
100107ec:	2b30      	cmp	r3, #48	; 0x30
100107ee:	d001      	beq.n	100107f4 <db_addATT+0x80>
100107f0:	066b      	lsls	r3, r5, #25
100107f2:	d504      	bpl.n	100107fe <db_addATT+0x8a>
100107f4:	2102      	movs	r1, #2
100107f6:	6822      	ldr	r2, [r4, #0]
100107f8:	7893      	ldrb	r3, [r2, #2]
100107fa:	430b      	orrs	r3, r1
100107fc:	7093      	strb	r3, [r2, #2]
100107fe:	4a0a      	ldr	r2, [pc, #40]	; (10010828 <db_addATT+0xb4>)
10010800:	2600      	movs	r6, #0
10010802:	6813      	ldr	r3, [r2, #0]
10010804:	3301      	adds	r3, #1
10010806:	6013      	str	r3, [r2, #0]
10010808:	e005      	b.n	10010816 <db_addATT+0xa2>
1001080a:	6023      	str	r3, [r4, #0]
1001080c:	2611      	movs	r6, #17
1001080e:	2900      	cmp	r1, #0
10010810:	d001      	beq.n	10010816 <db_addATT+0xa2>
10010812:	1aba      	subs	r2, r7, r2
10010814:	6002      	str	r2, [r0, #0]
10010816:	1c30      	adds	r0, r6, #0
10010818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001081a:	46c0      	nop			; (mov r8, r8)
1001081c:	10019788 	.word	0x10019788
10010820:	1001978c 	.word	0x1001978c
10010824:	100149cf 	.word	0x100149cf
10010828:	10019790 	.word	0x10019790

1001082c <user_description_define>:
1001082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001082e:	1c05      	adds	r5, r0, #0
10010830:	20cf      	movs	r0, #207	; 0xcf
10010832:	2a00      	cmp	r2, #0
10010834:	d01c      	beq.n	10010870 <user_description_define+0x44>
10010836:	1c14      	adds	r4, r2, #0
10010838:	2203      	movs	r2, #3
1001083a:	1c1e      	adds	r6, r3, #0
1001083c:	400a      	ands	r2, r1
1001083e:	1c0b      	adds	r3, r1, #0
10010840:	3a03      	subs	r2, #3
10010842:	4251      	negs	r1, r2
10010844:	4151      	adcs	r1, r2
10010846:	075a      	lsls	r2, r3, #29
10010848:	0fd2      	lsrs	r2, r2, #31
1001084a:	430a      	orrs	r2, r1
1001084c:	03d2      	lsls	r2, r2, #15
1001084e:	4f09      	ldr	r7, [pc, #36]	; (10010874 <user_description_define+0x48>)
10010850:	1c28      	adds	r0, r5, #0
10010852:	2a00      	cmp	r2, #0
10010854:	d003      	beq.n	1001085e <user_description_define+0x32>
10010856:	1c21      	adds	r1, r4, #0
10010858:	1c32      	adds	r2, r6, #0
1001085a:	47b8      	blx	r7
1001085c:	e008      	b.n	10010870 <user_description_define+0x44>
1001085e:	1c11      	adds	r1, r2, #0
10010860:	47b8      	blx	r7
10010862:	2800      	cmp	r0, #0
10010864:	d104      	bne.n	10010870 <user_description_define+0x44>
10010866:	1c28      	adds	r0, r5, #0
10010868:	1c31      	adds	r1, r6, #0
1001086a:	1c22      	adds	r2, r4, #0
1001086c:	4b02      	ldr	r3, [pc, #8]	; (10010878 <user_description_define+0x4c>)
1001086e:	4798      	blx	r3
10010870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010872:	46c0      	nop			; (mov r8, r8)
10010874:	10010775 	.word	0x10010775
10010878:	10012add 	.word	0x10012add

1001087c <at_ble_read_authorize_reply.part.1>:
1001087c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001087e:	4b09      	ldr	r3, [pc, #36]	; (100108a4 <at_ble_read_authorize_reply.part.1+0x28>)
10010880:	1c05      	adds	r5, r0, #0
10010882:	1c08      	adds	r0, r1, #0
10010884:	1c0c      	adds	r4, r1, #0
10010886:	4798      	blx	r3
10010888:	2800      	cmp	r0, #0
1001088a:	d009      	beq.n	100108a0 <at_ble_read_authorize_reply.part.1+0x24>
1001088c:	6882      	ldr	r2, [r0, #8]
1001088e:	2a00      	cmp	r2, #0
10010890:	d006      	beq.n	100108a0 <at_ble_read_authorize_reply.part.1+0x24>
10010892:	8883      	ldrh	r3, [r0, #4]
10010894:	1c29      	adds	r1, r5, #0
10010896:	9200      	str	r2, [sp, #0]
10010898:	1c20      	adds	r0, r4, #0
1001089a:	2200      	movs	r2, #0
1001089c:	4c02      	ldr	r4, [pc, #8]	; (100108a8 <at_ble_read_authorize_reply.part.1+0x2c>)
1001089e:	47a0      	blx	r4
100108a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100108a2:	46c0      	nop			; (mov r8, r8)
100108a4:	10010615 	.word	0x10010615
100108a8:	10012575 	.word	0x10012575

100108ac <internal_at_ble_service_define>:
100108ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100108ae:	b08b      	sub	sp, #44	; 0x2c
100108b0:	9306      	str	r3, [sp, #24]
100108b2:	ab10      	add	r3, sp, #64	; 0x40
100108b4:	9202      	str	r2, [sp, #8]
100108b6:	cb04      	ldmia	r3!, {r2}
100108b8:	1c05      	adds	r5, r0, #0
100108ba:	881b      	ldrh	r3, [r3, #0]
100108bc:	9105      	str	r1, [sp, #20]
100108be:	9303      	str	r3, [sp, #12]
100108c0:	ab12      	add	r3, sp, #72	; 0x48
100108c2:	781b      	ldrb	r3, [r3, #0]
100108c4:	20cf      	movs	r0, #207	; 0xcf
100108c6:	9304      	str	r3, [sp, #16]
100108c8:	2d00      	cmp	r5, #0
100108ca:	d100      	bne.n	100108ce <internal_at_ble_service_define+0x22>
100108cc:	e1ca      	b.n	10010c64 <internal_at_ble_service_define+0x3b8>
100108ce:	2900      	cmp	r1, #0
100108d0:	d100      	bne.n	100108d4 <internal_at_ble_service_define+0x28>
100108d2:	e1c7      	b.n	10010c64 <internal_at_ble_service_define+0x3b8>
100108d4:	2a00      	cmp	r2, #0
100108d6:	d100      	bne.n	100108da <internal_at_ble_service_define+0x2e>
100108d8:	e1c4      	b.n	10010c64 <internal_at_ble_service_define+0x3b8>
100108da:	9b03      	ldr	r3, [sp, #12]
100108dc:	2b00      	cmp	r3, #0
100108de:	d100      	bne.n	100108e2 <internal_at_ble_service_define+0x36>
100108e0:	e1c0      	b.n	10010c64 <internal_at_ble_service_define+0x3b8>
100108e2:	4bc9      	ldr	r3, [pc, #804]	; (10010c08 <internal_at_ble_service_define+0x35c>)
100108e4:	3004      	adds	r0, #4
100108e6:	681e      	ldr	r6, [r3, #0]
100108e8:	2e00      	cmp	r6, #0
100108ea:	d100      	bne.n	100108ee <internal_at_ble_service_define+0x42>
100108ec:	e1ba      	b.n	10010c64 <internal_at_ble_service_define+0x3b8>
100108ee:	2400      	movs	r4, #0
100108f0:	4bc6      	ldr	r3, [pc, #792]	; (10010c0c <internal_at_ble_service_define+0x360>)
100108f2:	8034      	strh	r4, [r6, #0]
100108f4:	881b      	ldrh	r3, [r3, #0]
100108f6:	1db7      	adds	r7, r6, #6
100108f8:	1c21      	adds	r1, r4, #0
100108fa:	2210      	movs	r2, #16
100108fc:	8073      	strh	r3, [r6, #2]
100108fe:	1c38      	adds	r0, r7, #0
10010900:	4bc3      	ldr	r3, [pc, #780]	; (10010c10 <internal_at_ble_service_define+0x364>)
10010902:	4798      	blx	r3
10010904:	7828      	ldrb	r0, [r5, #0]
10010906:	4bc3      	ldr	r3, [pc, #780]	; (10010c14 <internal_at_ble_service_define+0x368>)
10010908:	4798      	blx	r3
1001090a:	1c69      	adds	r1, r5, #1
1001090c:	1c02      	adds	r2, r0, #0
1001090e:	4bc2      	ldr	r3, [pc, #776]	; (10010c18 <internal_at_ble_service_define+0x36c>)
10010910:	1c38      	adds	r0, r7, #0
10010912:	4798      	blx	r3
10010914:	2204      	movs	r2, #4
10010916:	782b      	ldrb	r3, [r5, #0]
10010918:	9d02      	ldr	r5, [sp, #8]
1001091a:	011b      	lsls	r3, r3, #4
1001091c:	4313      	orrs	r3, r2
1001091e:	9a04      	ldr	r2, [sp, #16]
10010920:	7174      	strb	r4, [r6, #5]
10010922:	0192      	lsls	r2, r2, #6
10010924:	4313      	orrs	r3, r2
10010926:	7133      	strb	r3, [r6, #4]
10010928:	2316      	movs	r3, #22
1001092a:	9a06      	ldr	r2, [sp, #24]
1001092c:	3512      	adds	r5, #18
1001092e:	4353      	muls	r3, r2
10010930:	9a02      	ldr	r2, [sp, #8]
10010932:	3312      	adds	r3, #18
10010934:	18d7      	adds	r7, r2, r3
10010936:	42bd      	cmp	r5, r7
10010938:	d00f      	beq.n	1001095a <internal_at_ble_service_define+0xae>
1001093a:	4bb8      	ldr	r3, [pc, #736]	; (10010c1c <internal_at_ble_service_define+0x370>)
1001093c:	8829      	ldrh	r1, [r5, #0]
1001093e:	9300      	str	r3, [sp, #0]
10010940:	230e      	movs	r3, #14
10010942:	aa06      	add	r2, sp, #24
10010944:	189b      	adds	r3, r3, r2
10010946:	9301      	str	r3, [sp, #4]
10010948:	4cb5      	ldr	r4, [pc, #724]	; (10010c20 <internal_at_ble_service_define+0x374>)
1001094a:	1c30      	adds	r0, r6, #0
1001094c:	2201      	movs	r2, #1
1001094e:	2302      	movs	r3, #2
10010950:	47a0      	blx	r4
10010952:	3516      	adds	r5, #22
10010954:	1e04      	subs	r4, r0, #0
10010956:	d0ee      	beq.n	10010936 <internal_at_ble_service_define+0x8a>
10010958:	e183      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
1001095a:	9f10      	ldr	r7, [sp, #64]	; 0x40
1001095c:	2300      	movs	r3, #0
1001095e:	3714      	adds	r7, #20
10010960:	1c3d      	adds	r5, r7, #0
10010962:	9302      	str	r3, [sp, #8]
10010964:	9b02      	ldr	r3, [sp, #8]
10010966:	9a03      	ldr	r2, [sp, #12]
10010968:	4293      	cmp	r3, r2
1001096a:	db00      	blt.n	1001096e <internal_at_ble_service_define+0xc2>
1001096c:	e0bf      	b.n	10010aee <internal_at_ble_service_define+0x242>
1001096e:	4bad      	ldr	r3, [pc, #692]	; (10010c24 <internal_at_ble_service_define+0x378>)
10010970:	aa06      	add	r2, sp, #24
10010972:	9300      	str	r3, [sp, #0]
10010974:	230e      	movs	r3, #14
10010976:	189b      	adds	r3, r3, r2
10010978:	9301      	str	r3, [sp, #4]
1001097a:	4ca9      	ldr	r4, [pc, #676]	; (10010c20 <internal_at_ble_service_define+0x374>)
1001097c:	1c30      	adds	r0, r6, #0
1001097e:	2104      	movs	r1, #4
10010980:	2201      	movs	r2, #1
10010982:	2302      	movs	r3, #2
10010984:	47a0      	blx	r4
10010986:	1e04      	subs	r4, r0, #0
10010988:	d000      	beq.n	1001098c <internal_at_ble_service_define+0xe0>
1001098a:	e16a      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
1001098c:	1c2b      	adds	r3, r5, #0
1001098e:	3b12      	subs	r3, #18
10010990:	7b2c      	ldrb	r4, [r5, #12]
10010992:	781b      	ldrb	r3, [r3, #0]
10010994:	1c21      	adds	r1, r4, #0
10010996:	1c1a      	adds	r2, r3, #0
10010998:	9304      	str	r3, [sp, #16]
1001099a:	8828      	ldrh	r0, [r5, #0]
1001099c:	4ba2      	ldr	r3, [pc, #648]	; (10010c28 <internal_at_ble_service_define+0x37c>)
1001099e:	4798      	blx	r3
100109a0:	2303      	movs	r3, #3
100109a2:	4023      	ands	r3, r4
100109a4:	3b03      	subs	r3, #3
100109a6:	4259      	negs	r1, r3
100109a8:	4159      	adcs	r1, r3
100109aa:	2301      	movs	r3, #1
100109ac:	08a4      	lsrs	r4, r4, #2
100109ae:	401c      	ands	r4, r3
100109b0:	430c      	orrs	r4, r1
100109b2:	896b      	ldrh	r3, [r5, #10]
100109b4:	03e4      	lsls	r4, r4, #15
100109b6:	431c      	orrs	r4, r3
100109b8:	9007      	str	r0, [sp, #28]
100109ba:	4b96      	ldr	r3, [pc, #600]	; (10010c14 <internal_at_ble_service_define+0x368>)
100109bc:	9804      	ldr	r0, [sp, #16]
100109be:	4798      	blx	r3
100109c0:	1c2a      	adds	r2, r5, #0
100109c2:	3a11      	subs	r2, #17
100109c4:	9200      	str	r2, [sp, #0]
100109c6:	3a03      	subs	r2, #3
100109c8:	1c03      	adds	r3, r0, #0
100109ca:	9201      	str	r2, [sp, #4]
100109cc:	1c21      	adds	r1, r4, #0
100109ce:	1c30      	adds	r0, r6, #0
100109d0:	4c93      	ldr	r4, [pc, #588]	; (10010c20 <internal_at_ble_service_define+0x374>)
100109d2:	9a07      	ldr	r2, [sp, #28]
100109d4:	47a0      	blx	r4
100109d6:	1e04      	subs	r4, r0, #0
100109d8:	d000      	beq.n	100109dc <internal_at_ble_service_define+0x130>
100109da:	e142      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
100109dc:	22c0      	movs	r2, #192	; 0xc0
100109de:	882b      	ldrh	r3, [r5, #0]
100109e0:	0052      	lsls	r2, r2, #1
100109e2:	4213      	tst	r3, r2
100109e4:	d104      	bne.n	100109f0 <internal_at_ble_service_define+0x144>
100109e6:	8aab      	ldrh	r3, [r5, #20]
100109e8:	9304      	str	r3, [sp, #16]
100109ea:	2b00      	cmp	r3, #0
100109ec:	d116      	bne.n	10010a1c <internal_at_ble_service_define+0x170>
100109ee:	e03a      	b.n	10010a66 <internal_at_ble_service_define+0x1ba>
100109f0:	2201      	movs	r2, #1
100109f2:	09d9      	lsrs	r1, r3, #7
100109f4:	4011      	ands	r1, r2
100109f6:	05db      	lsls	r3, r3, #23
100109f8:	d501      	bpl.n	100109fe <internal_at_ble_service_define+0x152>
100109fa:	2302      	movs	r3, #2
100109fc:	4319      	orrs	r1, r3
100109fe:	4b8b      	ldr	r3, [pc, #556]	; (10010c2c <internal_at_ble_service_define+0x380>)
10010a00:	aa06      	add	r2, sp, #24
10010a02:	9300      	str	r3, [sp, #0]
10010a04:	230e      	movs	r3, #14
10010a06:	189b      	adds	r3, r3, r2
10010a08:	9301      	str	r3, [sp, #4]
10010a0a:	4c85      	ldr	r4, [pc, #532]	; (10010c20 <internal_at_ble_service_define+0x374>)
10010a0c:	0209      	lsls	r1, r1, #8
10010a0e:	1c30      	adds	r0, r6, #0
10010a10:	2201      	movs	r2, #1
10010a12:	2302      	movs	r3, #2
10010a14:	47a0      	blx	r4
10010a16:	1e04      	subs	r4, r0, #0
10010a18:	d0e5      	beq.n	100109e6 <internal_at_ble_service_define+0x13a>
10010a1a:	e122      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010a1c:	2380      	movs	r3, #128	; 0x80
10010a1e:	882a      	ldrh	r2, [r5, #0]
10010a20:	7f2c      	ldrb	r4, [r5, #28]
10010a22:	005b      	lsls	r3, r3, #1
10010a24:	401a      	ands	r2, r3
10010a26:	1c20      	adds	r0, r4, #0
10010a28:	2101      	movs	r1, #1
10010a2a:	2a00      	cmp	r2, #0
10010a2c:	d000      	beq.n	10010a30 <internal_at_ble_service_define+0x184>
10010a2e:	1c0a      	adds	r2, r1, #0
10010a30:	4b7f      	ldr	r3, [pc, #508]	; (10010c30 <internal_at_ble_service_define+0x384>)
10010a32:	4798      	blx	r3
10010a34:	2203      	movs	r2, #3
10010a36:	4022      	ands	r2, r4
10010a38:	3a03      	subs	r2, #3
10010a3a:	4251      	negs	r1, r2
10010a3c:	4151      	adcs	r1, r2
10010a3e:	4b7d      	ldr	r3, [pc, #500]	; (10010c34 <internal_at_ble_service_define+0x388>)
10010a40:	1c0a      	adds	r2, r1, #0
10010a42:	9300      	str	r3, [sp, #0]
10010a44:	1c2b      	adds	r3, r5, #0
10010a46:	0764      	lsls	r4, r4, #29
10010a48:	0fe4      	lsrs	r4, r4, #31
10010a4a:	4322      	orrs	r2, r4
10010a4c:	03d2      	lsls	r2, r2, #15
10010a4e:	4310      	orrs	r0, r2
10010a50:	3320      	adds	r3, #32
10010a52:	b282      	uxth	r2, r0
10010a54:	9301      	str	r3, [sp, #4]
10010a56:	4c72      	ldr	r4, [pc, #456]	; (10010c20 <internal_at_ble_service_define+0x374>)
10010a58:	1c30      	adds	r0, r6, #0
10010a5a:	9904      	ldr	r1, [sp, #16]
10010a5c:	2302      	movs	r3, #2
10010a5e:	47a0      	blx	r4
10010a60:	1e04      	subs	r4, r0, #0
10010a62:	d000      	beq.n	10010a66 <internal_at_ble_service_define+0x1ba>
10010a64:	e0fd      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010a66:	2101      	movs	r1, #1
10010a68:	882b      	ldrh	r3, [r5, #0]
10010a6a:	420b      	tst	r3, r1
10010a6c:	d011      	beq.n	10010a92 <internal_at_ble_service_define+0x1e6>
10010a6e:	7fa8      	ldrb	r0, [r5, #30]
10010a70:	4b6f      	ldr	r3, [pc, #444]	; (10010c30 <internal_at_ble_service_define+0x384>)
10010a72:	2200      	movs	r2, #0
10010a74:	4798      	blx	r3
10010a76:	4b70      	ldr	r3, [pc, #448]	; (10010c38 <internal_at_ble_service_define+0x38c>)
10010a78:	1c02      	adds	r2, r0, #0
10010a7a:	9300      	str	r3, [sp, #0]
10010a7c:	1c2b      	adds	r3, r5, #0
10010a7e:	3324      	adds	r3, #36	; 0x24
10010a80:	9301      	str	r3, [sp, #4]
10010a82:	4c67      	ldr	r4, [pc, #412]	; (10010c20 <internal_at_ble_service_define+0x374>)
10010a84:	1c30      	adds	r0, r6, #0
10010a86:	496d      	ldr	r1, [pc, #436]	; (10010c3c <internal_at_ble_service_define+0x390>)
10010a88:	2302      	movs	r3, #2
10010a8a:	47a0      	blx	r4
10010a8c:	1e04      	subs	r4, r0, #0
10010a8e:	d000      	beq.n	10010a92 <internal_at_ble_service_define+0x1e6>
10010a90:	e0e7      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010a92:	2330      	movs	r3, #48	; 0x30
10010a94:	882a      	ldrh	r2, [r5, #0]
10010a96:	421a      	tst	r2, r3
10010a98:	d012      	beq.n	10010ac0 <internal_at_ble_service_define+0x214>
10010a9a:	2101      	movs	r1, #1
10010a9c:	7f68      	ldrb	r0, [r5, #29]
10010a9e:	1c0a      	adds	r2, r1, #0
10010aa0:	4b63      	ldr	r3, [pc, #396]	; (10010c30 <internal_at_ble_service_define+0x384>)
10010aa2:	4798      	blx	r3
10010aa4:	4b66      	ldr	r3, [pc, #408]	; (10010c40 <internal_at_ble_service_define+0x394>)
10010aa6:	1c02      	adds	r2, r0, #0
10010aa8:	9300      	str	r3, [sp, #0]
10010aaa:	1c2b      	adds	r3, r5, #0
10010aac:	3322      	adds	r3, #34	; 0x22
10010aae:	9301      	str	r3, [sp, #4]
10010ab0:	4c5b      	ldr	r4, [pc, #364]	; (10010c20 <internal_at_ble_service_define+0x374>)
10010ab2:	1c30      	adds	r0, r6, #0
10010ab4:	4961      	ldr	r1, [pc, #388]	; (10010c3c <internal_at_ble_service_define+0x390>)
10010ab6:	2302      	movs	r3, #2
10010ab8:	47a0      	blx	r4
10010aba:	1e04      	subs	r4, r0, #0
10010abc:	d000      	beq.n	10010ac0 <internal_at_ble_service_define+0x214>
10010abe:	e0d0      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010ac0:	69ab      	ldr	r3, [r5, #24]
10010ac2:	2b00      	cmp	r3, #0
10010ac4:	d00e      	beq.n	10010ae4 <internal_at_ble_service_define+0x238>
10010ac6:	4b5f      	ldr	r3, [pc, #380]	; (10010c44 <internal_at_ble_service_define+0x398>)
10010ac8:	aa06      	add	r2, sp, #24
10010aca:	9300      	str	r3, [sp, #0]
10010acc:	230e      	movs	r3, #14
10010ace:	189b      	adds	r3, r3, r2
10010ad0:	9301      	str	r3, [sp, #4]
10010ad2:	4c53      	ldr	r4, [pc, #332]	; (10010c20 <internal_at_ble_service_define+0x374>)
10010ad4:	1c30      	adds	r0, r6, #0
10010ad6:	2107      	movs	r1, #7
10010ad8:	2201      	movs	r2, #1
10010ada:	2302      	movs	r3, #2
10010adc:	47a0      	blx	r4
10010ade:	1e04      	subs	r4, r0, #0
10010ae0:	d000      	beq.n	10010ae4 <internal_at_ble_service_define+0x238>
10010ae2:	e0be      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010ae4:	9b02      	ldr	r3, [sp, #8]
10010ae6:	353c      	adds	r5, #60	; 0x3c
10010ae8:	3301      	adds	r3, #1
10010aea:	9302      	str	r3, [sp, #8]
10010aec:	e73a      	b.n	10010964 <internal_at_ble_service_define+0xb8>
10010aee:	1c30      	adds	r0, r6, #0
10010af0:	4b55      	ldr	r3, [pc, #340]	; (10010c48 <internal_at_ble_service_define+0x39c>)
10010af2:	4798      	blx	r3
10010af4:	1e04      	subs	r4, r0, #0
10010af6:	d000      	beq.n	10010afa <internal_at_ble_service_define+0x24e>
10010af8:	e0b3      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010afa:	8833      	ldrh	r3, [r6, #0]
10010afc:	9a05      	ldr	r2, [sp, #20]
10010afe:	8013      	strh	r3, [r2, #0]
10010b00:	8836      	ldrh	r6, [r6, #0]
10010b02:	9b06      	ldr	r3, [sp, #24]
10010b04:	9a03      	ldr	r2, [sp, #12]
10010b06:	18f6      	adds	r6, r6, r3
10010b08:	b2b3      	uxth	r3, r6
10010b0a:	9302      	str	r3, [sp, #8]
10010b0c:	233c      	movs	r3, #60	; 0x3c
10010b0e:	4353      	muls	r3, r2
10010b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010b12:	3314      	adds	r3, #20
10010b14:	18d3      	adds	r3, r2, r3
10010b16:	9304      	str	r3, [sp, #16]
10010b18:	9b04      	ldr	r3, [sp, #16]
10010b1a:	429f      	cmp	r7, r3
10010b1c:	d100      	bne.n	10010b20 <internal_at_ble_service_define+0x274>
10010b1e:	e0a0      	b.n	10010c62 <internal_at_ble_service_define+0x3b6>
10010b20:	9b02      	ldr	r3, [sp, #8]
10010b22:	1c9d      	adds	r5, r3, #2
10010b24:	1c3b      	adds	r3, r7, #0
10010b26:	b2ad      	uxth	r5, r5
10010b28:	3b14      	subs	r3, #20
10010b2a:	801d      	strh	r5, [r3, #0]
10010b2c:	9303      	str	r3, [sp, #12]
10010b2e:	893b      	ldrh	r3, [r7, #8]
10010b30:	2b00      	cmp	r3, #0
10010b32:	d108      	bne.n	10010b46 <internal_at_ble_service_define+0x29a>
10010b34:	23c0      	movs	r3, #192	; 0xc0
10010b36:	883a      	ldrh	r2, [r7, #0]
10010b38:	005b      	lsls	r3, r3, #1
10010b3a:	421a      	tst	r2, r3
10010b3c:	d026      	beq.n	10010b8c <internal_at_ble_service_define+0x2e0>
10010b3e:	9e02      	ldr	r6, [sp, #8]
10010b40:	3603      	adds	r6, #3
10010b42:	b2b5      	uxth	r5, r6
10010b44:	e022      	b.n	10010b8c <internal_at_ble_service_define+0x2e0>
10010b46:	2103      	movs	r1, #3
10010b48:	7b3b      	ldrb	r3, [r7, #12]
10010b4a:	4019      	ands	r1, r3
10010b4c:	3903      	subs	r1, #3
10010b4e:	424a      	negs	r2, r1
10010b50:	414a      	adcs	r2, r1
10010b52:	0759      	lsls	r1, r3, #29
10010b54:	0fc9      	lsrs	r1, r1, #31
10010b56:	4311      	orrs	r1, r2
10010b58:	03c9      	lsls	r1, r1, #15
10010b5a:	897a      	ldrh	r2, [r7, #10]
10010b5c:	2900      	cmp	r1, #0
10010b5e:	d007      	beq.n	10010b70 <internal_at_ble_service_define+0x2c4>
10010b60:	6879      	ldr	r1, [r7, #4]
10010b62:	2900      	cmp	r1, #0
10010b64:	d100      	bne.n	10010b68 <internal_at_ble_service_define+0x2bc>
10010b66:	4939      	ldr	r1, [pc, #228]	; (10010c4c <internal_at_ble_service_define+0x3a0>)
10010b68:	1c28      	adds	r0, r5, #0
10010b6a:	4e39      	ldr	r6, [pc, #228]	; (10010c50 <internal_at_ble_service_define+0x3a4>)
10010b6c:	47b0      	blx	r6
10010b6e:	e00a      	b.n	10010b86 <internal_at_ble_service_define+0x2da>
10010b70:	1c28      	adds	r0, r5, #0
10010b72:	4e37      	ldr	r6, [pc, #220]	; (10010c50 <internal_at_ble_service_define+0x3a4>)
10010b74:	47b0      	blx	r6
10010b76:	2800      	cmp	r0, #0
10010b78:	d172      	bne.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010b7a:	9b03      	ldr	r3, [sp, #12]
10010b7c:	8939      	ldrh	r1, [r7, #8]
10010b7e:	8818      	ldrh	r0, [r3, #0]
10010b80:	687a      	ldr	r2, [r7, #4]
10010b82:	4b34      	ldr	r3, [pc, #208]	; (10010c54 <internal_at_ble_service_define+0x3a8>)
10010b84:	4798      	blx	r3
10010b86:	2800      	cmp	r0, #0
10010b88:	d0d4      	beq.n	10010b34 <internal_at_ble_service_define+0x288>
10010b8a:	e069      	b.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010b8c:	8abb      	ldrh	r3, [r7, #20]
10010b8e:	2b00      	cmp	r3, #0
10010b90:	d00a      	beq.n	10010ba8 <internal_at_ble_service_define+0x2fc>
10010b92:	3501      	adds	r5, #1
10010b94:	b2ad      	uxth	r5, r5
10010b96:	843d      	strh	r5, [r7, #32]
10010b98:	7f39      	ldrb	r1, [r7, #28]
10010b9a:	8afb      	ldrh	r3, [r7, #22]
10010b9c:	1c28      	adds	r0, r5, #0
10010b9e:	693a      	ldr	r2, [r7, #16]
10010ba0:	4e2d      	ldr	r6, [pc, #180]	; (10010c58 <internal_at_ble_service_define+0x3ac>)
10010ba2:	47b0      	blx	r6
10010ba4:	2800      	cmp	r0, #0
10010ba6:	d15b      	bne.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010ba8:	883b      	ldrh	r3, [r7, #0]
10010baa:	07db      	lsls	r3, r3, #31
10010bac:	d50d      	bpl.n	10010bca <internal_at_ble_service_define+0x31e>
10010bae:	2200      	movs	r2, #0
10010bb0:	3501      	adds	r5, #1
10010bb2:	b2ad      	uxth	r5, r5
10010bb4:	a909      	add	r1, sp, #36	; 0x24
10010bb6:	84bd      	strh	r5, [r7, #36]	; 0x24
10010bb8:	7fbb      	ldrb	r3, [r7, #30]
10010bba:	1c28      	adds	r0, r5, #0
10010bbc:	700a      	strb	r2, [r1, #0]
10010bbe:	704a      	strb	r2, [r1, #1]
10010bc0:	4e23      	ldr	r6, [pc, #140]	; (10010c50 <internal_at_ble_service_define+0x3a4>)
10010bc2:	3202      	adds	r2, #2
10010bc4:	47b0      	blx	r6
10010bc6:	2800      	cmp	r0, #0
10010bc8:	d14a      	bne.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010bca:	2330      	movs	r3, #48	; 0x30
10010bcc:	883a      	ldrh	r2, [r7, #0]
10010bce:	421a      	tst	r2, r3
10010bd0:	d00d      	beq.n	10010bee <internal_at_ble_service_define+0x342>
10010bd2:	2200      	movs	r2, #0
10010bd4:	3501      	adds	r5, #1
10010bd6:	b2ad      	uxth	r5, r5
10010bd8:	a909      	add	r1, sp, #36	; 0x24
10010bda:	847d      	strh	r5, [r7, #34]	; 0x22
10010bdc:	7f7b      	ldrb	r3, [r7, #29]
10010bde:	1c28      	adds	r0, r5, #0
10010be0:	700a      	strb	r2, [r1, #0]
10010be2:	704a      	strb	r2, [r1, #1]
10010be4:	4e1a      	ldr	r6, [pc, #104]	; (10010c50 <internal_at_ble_service_define+0x3a4>)
10010be6:	3202      	adds	r2, #2
10010be8:	47b0      	blx	r6
10010bea:	2800      	cmp	r0, #0
10010bec:	d138      	bne.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010bee:	69b9      	ldr	r1, [r7, #24]
10010bf0:	2900      	cmp	r1, #0
10010bf2:	d006      	beq.n	10010c02 <internal_at_ble_service_define+0x356>
10010bf4:	3501      	adds	r5, #1
10010bf6:	b2ad      	uxth	r5, r5
10010bf8:	1c28      	adds	r0, r5, #0
10010bfa:	4b18      	ldr	r3, [pc, #96]	; (10010c5c <internal_at_ble_service_define+0x3b0>)
10010bfc:	4798      	blx	r3
10010bfe:	2800      	cmp	r0, #0
10010c00:	d12e      	bne.n	10010c60 <internal_at_ble_service_define+0x3b4>
10010c02:	373c      	adds	r7, #60	; 0x3c
10010c04:	9502      	str	r5, [sp, #8]
10010c06:	e787      	b.n	10010b18 <internal_at_ble_service_define+0x26c>
10010c08:	10019798 	.word	0x10019798
10010c0c:	1001a68c 	.word	0x1001a68c
10010c10:	100149e1 	.word	0x100149e1
10010c14:	100105e1 	.word	0x100105e1
10010c18:	100149cf 	.word	0x100149cf
10010c1c:	10017aef 	.word	0x10017aef
10010c20:	10012a6d 	.word	0x10012a6d
10010c24:	10017af1 	.word	0x10017af1
10010c28:	100106ad 	.word	0x100106ad
10010c2c:	10017aed 	.word	0x10017aed
10010c30:	10010655 	.word	0x10010655
10010c34:	10017ae9 	.word	0x10017ae9
10010c38:	10017aeb 	.word	0x10017aeb
10010c3c:	00008002 	.word	0x00008002
10010c40:	10017ae5 	.word	0x10017ae5
10010c44:	10017ae7 	.word	0x10017ae7
10010c48:	10012961 	.word	0x10012961
10010c4c:	10019784 	.word	0x10019784
10010c50:	10010775 	.word	0x10010775
10010c54:	10012add 	.word	0x10012add
10010c58:	1001082d 	.word	0x1001082d
10010c5c:	10010749 	.word	0x10010749
10010c60:	1c04      	adds	r4, r0, #0
10010c62:	1c20      	adds	r0, r4, #0
10010c64:	b00b      	add	sp, #44	; 0x2c
10010c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010c68 <initi_gatt_server_module>:
10010c68:	2300      	movs	r3, #0
10010c6a:	4a07      	ldr	r2, [pc, #28]	; (10010c88 <initi_gatt_server_module+0x20>)
10010c6c:	7013      	strb	r3, [r2, #0]
10010c6e:	4a07      	ldr	r2, [pc, #28]	; (10010c8c <initi_gatt_server_module+0x24>)
10010c70:	6013      	str	r3, [r2, #0]
10010c72:	4a07      	ldr	r2, [pc, #28]	; (10010c90 <initi_gatt_server_module+0x28>)
10010c74:	6013      	str	r3, [r2, #0]
10010c76:	4a07      	ldr	r2, [pc, #28]	; (10010c94 <initi_gatt_server_module+0x2c>)
10010c78:	6013      	str	r3, [r2, #0]
10010c7a:	4a07      	ldr	r2, [pc, #28]	; (10010c98 <initi_gatt_server_module+0x30>)
10010c7c:	6013      	str	r3, [r2, #0]
10010c7e:	4a07      	ldr	r2, [pc, #28]	; (10010c9c <initi_gatt_server_module+0x34>)
10010c80:	6013      	str	r3, [r2, #0]
10010c82:	4a07      	ldr	r2, [pc, #28]	; (10010ca0 <initi_gatt_server_module+0x38>)
10010c84:	6013      	str	r3, [r2, #0]
10010c86:	4770      	bx	lr
10010c88:	10019784 	.word	0x10019784
10010c8c:	10019794 	.word	0x10019794
10010c90:	10019790 	.word	0x10019790
10010c94:	10019780 	.word	0x10019780
10010c98:	1001978c 	.word	0x1001978c
10010c9c:	10019788 	.word	0x10019788
10010ca0:	10019798 	.word	0x10019798

10010ca4 <db_init>:
10010ca4:	4b0a      	ldr	r3, [pc, #40]	; (10010cd0 <db_init+0x2c>)
10010ca6:	4a0b      	ldr	r2, [pc, #44]	; (10010cd4 <db_init+0x30>)
10010ca8:	6018      	str	r0, [r3, #0]
10010caa:	084b      	lsrs	r3, r1, #1
10010cac:	6013      	str	r3, [r2, #0]
10010cae:	4a0a      	ldr	r2, [pc, #40]	; (10010cd8 <db_init+0x34>)
10010cb0:	18c3      	adds	r3, r0, r3
10010cb2:	6013      	str	r3, [r2, #0]
10010cb4:	4a09      	ldr	r2, [pc, #36]	; (10010cdc <db_init+0x38>)
10010cb6:	1841      	adds	r1, r0, r1
10010cb8:	6013      	str	r3, [r2, #0]
10010cba:	2303      	movs	r3, #3
10010cbc:	2200      	movs	r2, #0
10010cbe:	3103      	adds	r1, #3
10010cc0:	4399      	bics	r1, r3
10010cc2:	4b07      	ldr	r3, [pc, #28]	; (10010ce0 <db_init+0x3c>)
10010cc4:	3904      	subs	r1, #4
10010cc6:	6019      	str	r1, [r3, #0]
10010cc8:	4b06      	ldr	r3, [pc, #24]	; (10010ce4 <db_init+0x40>)
10010cca:	601a      	str	r2, [r3, #0]
10010ccc:	4770      	bx	lr
10010cce:	46c0      	nop			; (mov r8, r8)
10010cd0:	10019798 	.word	0x10019798
10010cd4:	10019794 	.word	0x10019794
10010cd8:	10019780 	.word	0x10019780
10010cdc:	1001978c 	.word	0x1001978c
10010ce0:	10019788 	.word	0x10019788
10010ce4:	10019790 	.word	0x10019790

10010ce8 <at_ble_primary_service_define>:
10010ce8:	b530      	push	{r4, r5, lr}
10010cea:	b085      	sub	sp, #20
10010cec:	ac08      	add	r4, sp, #32
10010cee:	cc20      	ldmia	r4!, {r5}
10010cf0:	8824      	ldrh	r4, [r4, #0]
10010cf2:	9500      	str	r5, [sp, #0]
10010cf4:	9401      	str	r4, [sp, #4]
10010cf6:	2401      	movs	r4, #1
10010cf8:	9402      	str	r4, [sp, #8]
10010cfa:	4c02      	ldr	r4, [pc, #8]	; (10010d04 <at_ble_primary_service_define+0x1c>)
10010cfc:	47a0      	blx	r4
10010cfe:	b005      	add	sp, #20
10010d00:	bd30      	pop	{r4, r5, pc}
10010d02:	46c0      	nop			; (mov r8, r8)
10010d04:	100108ad 	.word	0x100108ad

10010d08 <at_ble_characteristic_value_set>:
10010d08:	b570      	push	{r4, r5, r6, lr}
10010d0a:	4b0b      	ldr	r3, [pc, #44]	; (10010d38 <at_ble_characteristic_value_set+0x30>)
10010d0c:	1c06      	adds	r6, r0, #0
10010d0e:	1c0c      	adds	r4, r1, #0
10010d10:	1c15      	adds	r5, r2, #0
10010d12:	4798      	blx	r3
10010d14:	2800      	cmp	r0, #0
10010d16:	d008      	beq.n	10010d2a <at_ble_characteristic_value_set+0x22>
10010d18:	6880      	ldr	r0, [r0, #8]
10010d1a:	2800      	cmp	r0, #0
10010d1c:	d005      	beq.n	10010d2a <at_ble_characteristic_value_set+0x22>
10010d1e:	1c21      	adds	r1, r4, #0
10010d20:	1c2a      	adds	r2, r5, #0
10010d22:	4b06      	ldr	r3, [pc, #24]	; (10010d3c <at_ble_characteristic_value_set+0x34>)
10010d24:	4798      	blx	r3
10010d26:	2000      	movs	r0, #0
10010d28:	e004      	b.n	10010d34 <at_ble_characteristic_value_set+0x2c>
10010d2a:	1c30      	adds	r0, r6, #0
10010d2c:	1c29      	adds	r1, r5, #0
10010d2e:	1c22      	adds	r2, r4, #0
10010d30:	4b03      	ldr	r3, [pc, #12]	; (10010d40 <at_ble_characteristic_value_set+0x38>)
10010d32:	4798      	blx	r3
10010d34:	bd70      	pop	{r4, r5, r6, pc}
10010d36:	46c0      	nop			; (mov r8, r8)
10010d38:	10010615 	.word	0x10010615
10010d3c:	100149cf 	.word	0x100149cf
10010d40:	10012add 	.word	0x10012add

10010d44 <at_ble_characteristic_value_get>:
10010d44:	b570      	push	{r4, r5, r6, lr}
10010d46:	4b0c      	ldr	r3, [pc, #48]	; (10010d78 <at_ble_characteristic_value_get+0x34>)
10010d48:	1c06      	adds	r6, r0, #0
10010d4a:	1c0c      	adds	r4, r1, #0
10010d4c:	1c15      	adds	r5, r2, #0
10010d4e:	4798      	blx	r3
10010d50:	2800      	cmp	r0, #0
10010d52:	d00b      	beq.n	10010d6c <at_ble_characteristic_value_get+0x28>
10010d54:	6883      	ldr	r3, [r0, #8]
10010d56:	2b00      	cmp	r3, #0
10010d58:	d008      	beq.n	10010d6c <at_ble_characteristic_value_get+0x28>
10010d5a:	8883      	ldrh	r3, [r0, #4]
10010d5c:	802b      	strh	r3, [r5, #0]
10010d5e:	8882      	ldrh	r2, [r0, #4]
10010d60:	6881      	ldr	r1, [r0, #8]
10010d62:	4b06      	ldr	r3, [pc, #24]	; (10010d7c <at_ble_characteristic_value_get+0x38>)
10010d64:	1c20      	adds	r0, r4, #0
10010d66:	4798      	blx	r3
10010d68:	2000      	movs	r0, #0
10010d6a:	e004      	b.n	10010d76 <at_ble_characteristic_value_get+0x32>
10010d6c:	1c30      	adds	r0, r6, #0
10010d6e:	1c29      	adds	r1, r5, #0
10010d70:	1c22      	adds	r2, r4, #0
10010d72:	4b03      	ldr	r3, [pc, #12]	; (10010d80 <at_ble_characteristic_value_get+0x3c>)
10010d74:	4798      	blx	r3
10010d76:	bd70      	pop	{r4, r5, r6, pc}
10010d78:	10010615 	.word	0x10010615
10010d7c:	100149cf 	.word	0x100149cf
10010d80:	10012b69 	.word	0x10012b69

10010d84 <at_ble_write_authorize_reply>:
10010d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d86:	b085      	sub	sp, #20
10010d88:	1c04      	adds	r4, r0, #0
10010d8a:	9101      	str	r1, [sp, #4]
10010d8c:	2900      	cmp	r1, #0
10010d8e:	d128      	bne.n	10010de2 <at_ble_write_authorize_reply+0x5e>
10010d90:	8843      	ldrh	r3, [r0, #2]
10010d92:	1c27      	adds	r7, r4, #0
10010d94:	9300      	str	r3, [sp, #0]
10010d96:	1c18      	adds	r0, r3, #0
10010d98:	4b16      	ldr	r3, [pc, #88]	; (10010df4 <at_ble_write_authorize_reply+0x70>)
10010d9a:	4798      	blx	r3
10010d9c:	3708      	adds	r7, #8
10010d9e:	2800      	cmp	r0, #0
10010da0:	d009      	beq.n	10010db6 <at_ble_write_authorize_reply+0x32>
10010da2:	6880      	ldr	r0, [r0, #8]
10010da4:	2800      	cmp	r0, #0
10010da6:	d006      	beq.n	10010db6 <at_ble_write_authorize_reply+0x32>
10010da8:	88a3      	ldrh	r3, [r4, #4]
10010daa:	88e2      	ldrh	r2, [r4, #6]
10010dac:	18c0      	adds	r0, r0, r3
10010dae:	1c39      	adds	r1, r7, #0
10010db0:	4b11      	ldr	r3, [pc, #68]	; (10010df8 <at_ble_write_authorize_reply+0x74>)
10010db2:	4798      	blx	r3
10010db4:	e015      	b.n	10010de2 <at_ble_write_authorize_reply+0x5e>
10010db6:	ab02      	add	r3, sp, #8
10010db8:	1d9e      	adds	r6, r3, #6
10010dba:	2300      	movs	r3, #0
10010dbc:	4d0f      	ldr	r5, [pc, #60]	; (10010dfc <at_ble_write_authorize_reply+0x78>)
10010dbe:	8033      	strh	r3, [r6, #0]
10010dc0:	6829      	ldr	r1, [r5, #0]
10010dc2:	1c32      	adds	r2, r6, #0
10010dc4:	4b0e      	ldr	r3, [pc, #56]	; (10010e00 <at_ble_write_authorize_reply+0x7c>)
10010dc6:	9800      	ldr	r0, [sp, #0]
10010dc8:	4798      	blx	r3
10010dca:	682b      	ldr	r3, [r5, #0]
10010dcc:	88a0      	ldrh	r0, [r4, #4]
10010dce:	88e2      	ldrh	r2, [r4, #6]
10010dd0:	1818      	adds	r0, r3, r0
10010dd2:	1c39      	adds	r1, r7, #0
10010dd4:	4b08      	ldr	r3, [pc, #32]	; (10010df8 <at_ble_write_authorize_reply+0x74>)
10010dd6:	4798      	blx	r3
10010dd8:	8860      	ldrh	r0, [r4, #2]
10010dda:	8832      	ldrh	r2, [r6, #0]
10010ddc:	6829      	ldr	r1, [r5, #0]
10010dde:	4b09      	ldr	r3, [pc, #36]	; (10010e04 <at_ble_write_authorize_reply+0x80>)
10010de0:	4798      	blx	r3
10010de2:	8860      	ldrh	r0, [r4, #2]
10010de4:	8821      	ldrh	r1, [r4, #0]
10010de6:	9a01      	ldr	r2, [sp, #4]
10010de8:	4b07      	ldr	r3, [pc, #28]	; (10010e08 <at_ble_write_authorize_reply+0x84>)
10010dea:	4798      	blx	r3
10010dec:	2000      	movs	r0, #0
10010dee:	b005      	add	sp, #20
10010df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010df2:	46c0      	nop			; (mov r8, r8)
10010df4:	10010615 	.word	0x10010615
10010df8:	100149cf 	.word	0x100149cf
10010dfc:	10017cf4 	.word	0x10017cf4
10010e00:	10010d45 	.word	0x10010d45
10010e04:	10010d09 	.word	0x10010d09
10010e08:	100125e1 	.word	0x100125e1

10010e0c <gatts_handle_read_req>:
10010e0c:	b538      	push	{r3, r4, r5, lr}
10010e0e:	1c0c      	adds	r4, r1, #0
10010e10:	4b07      	ldr	r3, [pc, #28]	; (10010e30 <gatts_handle_read_req+0x24>)
10010e12:	4798      	blx	r3
10010e14:	8865      	ldrh	r5, [r4, #2]
10010e16:	4b07      	ldr	r3, [pc, #28]	; (10010e34 <gatts_handle_read_req+0x28>)
10010e18:	1c28      	adds	r0, r5, #0
10010e1a:	4798      	blx	r3
10010e1c:	7883      	ldrb	r3, [r0, #2]
10010e1e:	2026      	movs	r0, #38	; 0x26
10010e20:	07db      	lsls	r3, r3, #31
10010e22:	d404      	bmi.n	10010e2e <gatts_handle_read_req+0x22>
10010e24:	8820      	ldrh	r0, [r4, #0]
10010e26:	1c29      	adds	r1, r5, #0
10010e28:	4b03      	ldr	r3, [pc, #12]	; (10010e38 <gatts_handle_read_req+0x2c>)
10010e2a:	4798      	blx	r3
10010e2c:	203b      	movs	r0, #59	; 0x3b
10010e2e:	bd38      	pop	{r3, r4, r5, pc}
10010e30:	10012525 	.word	0x10012525
10010e34:	10010615 	.word	0x10010615
10010e38:	1001087d 	.word	0x1001087d

10010e3c <gatts_handle_att_info_req>:
10010e3c:	b538      	push	{r3, r4, r5, lr}
10010e3e:	1c0d      	adds	r5, r1, #0
10010e40:	4b0a      	ldr	r3, [pc, #40]	; (10010e6c <gatts_handle_att_info_req+0x30>)
10010e42:	1c14      	adds	r4, r2, #0
10010e44:	4798      	blx	r3
10010e46:	882d      	ldrh	r5, [r5, #0]
10010e48:	4b09      	ldr	r3, [pc, #36]	; (10010e70 <gatts_handle_att_info_req+0x34>)
10010e4a:	1c28      	adds	r0, r5, #0
10010e4c:	4798      	blx	r3
10010e4e:	0a22      	lsrs	r2, r4, #8
10010e50:	1c03      	adds	r3, r0, #0
10010e52:	4c08      	ldr	r4, [pc, #32]	; (10010e74 <gatts_handle_att_info_req+0x38>)
10010e54:	b291      	uxth	r1, r2
10010e56:	2800      	cmp	r0, #0
10010e58:	d003      	beq.n	10010e62 <gatts_handle_att_info_req+0x26>
10010e5a:	8882      	ldrh	r2, [r0, #4]
10010e5c:	2300      	movs	r3, #0
10010e5e:	1c28      	adds	r0, r5, #0
10010e60:	e001      	b.n	10010e66 <gatts_handle_att_info_req+0x2a>
10010e62:	1c28      	adds	r0, r5, #0
10010e64:	2201      	movs	r2, #1
10010e66:	47a0      	blx	r4
10010e68:	203b      	movs	r0, #59	; 0x3b
10010e6a:	bd38      	pop	{r3, r4, r5, pc}
10010e6c:	10012569 	.word	0x10012569
10010e70:	10010615 	.word	0x10010615
10010e74:	10012625 	.word	0x10012625

10010e78 <gatts_handle_write_req>:
10010e78:	b510      	push	{r4, lr}
10010e7a:	1c14      	adds	r4, r2, #0
10010e7c:	4b07      	ldr	r3, [pc, #28]	; (10010e9c <gatts_handle_write_req+0x24>)
10010e7e:	4798      	blx	r3
10010e80:	4b07      	ldr	r3, [pc, #28]	; (10010ea0 <gatts_handle_write_req+0x28>)
10010e82:	8860      	ldrh	r0, [r4, #2]
10010e84:	4798      	blx	r3
10010e86:	2302      	movs	r3, #2
10010e88:	7881      	ldrb	r1, [r0, #2]
10010e8a:	2022      	movs	r0, #34	; 0x22
10010e8c:	4019      	ands	r1, r3
10010e8e:	d103      	bne.n	10010e98 <gatts_handle_write_req+0x20>
10010e90:	1c20      	adds	r0, r4, #0
10010e92:	4b04      	ldr	r3, [pc, #16]	; (10010ea4 <gatts_handle_write_req+0x2c>)
10010e94:	4798      	blx	r3
10010e96:	201f      	movs	r0, #31
10010e98:	bd10      	pop	{r4, pc}
10010e9a:	46c0      	nop			; (mov r8, r8)
10010e9c:	10012531 	.word	0x10012531
10010ea0:	10010615 	.word	0x10010615
10010ea4:	10010d85 	.word	0x10010d85

10010ea8 <at_ble_notification_send>:
10010ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010eaa:	4d17      	ldr	r5, [pc, #92]	; (10010f08 <at_ble_notification_send+0x60>)
10010eac:	4c17      	ldr	r4, [pc, #92]	; (10010f0c <at_ble_notification_send+0x64>)
10010eae:	682a      	ldr	r2, [r5, #0]
10010eb0:	44a5      	add	sp, r4
10010eb2:	23d2      	movs	r3, #210	; 0xd2
10010eb4:	2a04      	cmp	r2, #4
10010eb6:	d822      	bhi.n	10010efe <at_ble_notification_send+0x56>
10010eb8:	1c06      	adds	r6, r0, #0
10010eba:	4b15      	ldr	r3, [pc, #84]	; (10010f10 <at_ble_notification_send+0x68>)
10010ebc:	1c08      	adds	r0, r1, #0
10010ebe:	1c0c      	adds	r4, r1, #0
10010ec0:	4798      	blx	r3
10010ec2:	2800      	cmp	r0, #0
10010ec4:	d008      	beq.n	10010ed8 <at_ble_notification_send+0x30>
10010ec6:	6883      	ldr	r3, [r0, #8]
10010ec8:	2b00      	cmp	r3, #0
10010eca:	d005      	beq.n	10010ed8 <at_ble_notification_send+0x30>
10010ecc:	8882      	ldrh	r2, [r0, #4]
10010ece:	1c21      	adds	r1, r4, #0
10010ed0:	9200      	str	r2, [sp, #0]
10010ed2:	2012      	movs	r0, #18
10010ed4:	1c32      	adds	r2, r6, #0
10010ed6:	e00c      	b.n	10010ef2 <at_ble_notification_send+0x4a>
10010ed8:	270e      	movs	r7, #14
10010eda:	446f      	add	r7, sp
10010edc:	1c39      	adds	r1, r7, #0
10010ede:	aa04      	add	r2, sp, #16
10010ee0:	4b0c      	ldr	r3, [pc, #48]	; (10010f14 <at_ble_notification_send+0x6c>)
10010ee2:	1c20      	adds	r0, r4, #0
10010ee4:	4798      	blx	r3
10010ee6:	2012      	movs	r0, #18
10010ee8:	1c21      	adds	r1, r4, #0
10010eea:	1c32      	adds	r2, r6, #0
10010eec:	883b      	ldrh	r3, [r7, #0]
10010eee:	9300      	str	r3, [sp, #0]
10010ef0:	ab04      	add	r3, sp, #16
10010ef2:	4c09      	ldr	r4, [pc, #36]	; (10010f18 <at_ble_notification_send+0x70>)
10010ef4:	47a0      	blx	r4
10010ef6:	682b      	ldr	r3, [r5, #0]
10010ef8:	3301      	adds	r3, #1
10010efa:	602b      	str	r3, [r5, #0]
10010efc:	2300      	movs	r3, #0
10010efe:	1c18      	adds	r0, r3, #0
10010f00:	2385      	movs	r3, #133	; 0x85
10010f02:	009b      	lsls	r3, r3, #2
10010f04:	449d      	add	sp, r3
10010f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f08:	10019824 	.word	0x10019824
10010f0c:	fffffdec 	.word	0xfffffdec
10010f10:	10010615 	.word	0x10010615
10010f14:	10012b69 	.word	0x10012b69
10010f18:	1001266d 	.word	0x1001266d

10010f1c <init_l2cc_task_module>:
10010f1c:	220a      	movs	r2, #10
10010f1e:	4b01      	ldr	r3, [pc, #4]	; (10010f24 <init_l2cc_task_module+0x8>)
10010f20:	701a      	strb	r2, [r3, #0]
10010f22:	4770      	bx	lr
10010f24:	10017cf0 	.word	0x10017cf0

10010f28 <l2cc_data_send_rsp_handler>:
10010f28:	b510      	push	{r4, lr}
10010f2a:	7802      	ldrb	r2, [r0, #0]
10010f2c:	700a      	strb	r2, [r1, #0]
10010f2e:	7883      	ldrb	r3, [r0, #2]
10010f30:	7844      	ldrb	r4, [r0, #1]
10010f32:	021b      	lsls	r3, r3, #8
10010f34:	4323      	orrs	r3, r4
10010f36:	804b      	strh	r3, [r1, #2]
10010f38:	7903      	ldrb	r3, [r0, #4]
10010f3a:	78c0      	ldrb	r0, [r0, #3]
10010f3c:	021b      	lsls	r3, r3, #8
10010f3e:	4303      	orrs	r3, r0
10010f40:	808b      	strh	r3, [r1, #4]
10010f42:	2a00      	cmp	r2, #0
10010f44:	d103      	bne.n	10010f4e <l2cc_data_send_rsp_handler+0x26>
10010f46:	4a02      	ldr	r2, [pc, #8]	; (10010f50 <l2cc_data_send_rsp_handler+0x28>)
10010f48:	7813      	ldrb	r3, [r2, #0]
10010f4a:	3301      	adds	r3, #1
10010f4c:	7013      	strb	r3, [r2, #0]
10010f4e:	bd10      	pop	{r4, pc}
10010f50:	10017cf0 	.word	0x10017cf0

10010f54 <l2cc_data_received_handler>:
10010f54:	b508      	push	{r3, lr}
10010f56:	1c03      	adds	r3, r0, #0
10010f58:	7842      	ldrb	r2, [r0, #1]
10010f5a:	7800      	ldrb	r0, [r0, #0]
10010f5c:	0212      	lsls	r2, r2, #8
10010f5e:	4302      	orrs	r2, r0
10010f60:	800a      	strh	r2, [r1, #0]
10010f62:	78da      	ldrb	r2, [r3, #3]
10010f64:	7898      	ldrb	r0, [r3, #2]
10010f66:	0212      	lsls	r2, r2, #8
10010f68:	4302      	orrs	r2, r0
10010f6a:	804a      	strh	r2, [r1, #2]
10010f6c:	795a      	ldrb	r2, [r3, #5]
10010f6e:	7918      	ldrb	r0, [r3, #4]
10010f70:	0212      	lsls	r2, r2, #8
10010f72:	4302      	orrs	r2, r0
10010f74:	808a      	strh	r2, [r1, #4]
10010f76:	1d88      	adds	r0, r1, #6
10010f78:	1d99      	adds	r1, r3, #6
10010f7a:	4b01      	ldr	r3, [pc, #4]	; (10010f80 <l2cc_data_received_handler+0x2c>)
10010f7c:	4798      	blx	r3
10010f7e:	bd08      	pop	{r3, pc}
10010f80:	100149cf 	.word	0x100149cf

10010f84 <at_ble_authenticate>:
10010f84:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f86:	1c0c      	adds	r4, r1, #0
10010f88:	211f      	movs	r1, #31
10010f8a:	b08b      	sub	sp, #44	; 0x2c
10010f8c:	9307      	str	r3, [sp, #28]
10010f8e:	ab02      	add	r3, sp, #8
10010f90:	18c9      	adds	r1, r1, r3
10010f92:	230f      	movs	r3, #15
10010f94:	700b      	strb	r3, [r1, #0]
10010f96:	4b40      	ldr	r3, [pc, #256]	; (10011098 <at_ble_authenticate+0x114>)
10010f98:	1c05      	adds	r5, r0, #0
10010f9a:	1c16      	adds	r6, r2, #0
10010f9c:	4798      	blx	r3
10010f9e:	1c07      	adds	r7, r0, #0
10010fa0:	2001      	movs	r0, #1
10010fa2:	2f07      	cmp	r7, #7
10010fa4:	d875      	bhi.n	10011092 <at_ble_authenticate+0x10e>
10010fa6:	2c00      	cmp	r4, #0
10010fa8:	d113      	bne.n	10010fd2 <at_ble_authenticate+0x4e>
10010faa:	2312      	movs	r3, #18
10010fac:	435f      	muls	r7, r3
10010fae:	4b3b      	ldr	r3, [pc, #236]	; (1001109c <at_ble_authenticate+0x118>)
10010fb0:	5cfb      	ldrb	r3, [r7, r3]
10010fb2:	4283      	cmp	r3, r0
10010fb4:	d001      	beq.n	10010fba <at_ble_authenticate+0x36>
10010fb6:	20cf      	movs	r0, #207	; 0xcf
10010fb8:	e06b      	b.n	10011092 <at_ble_authenticate+0x10e>
10010fba:	9504      	str	r5, [sp, #16]
10010fbc:	9400      	str	r4, [sp, #0]
10010fbe:	9401      	str	r4, [sp, #4]
10010fc0:	9402      	str	r4, [sp, #8]
10010fc2:	9403      	str	r4, [sp, #12]
10010fc4:	1c20      	adds	r0, r4, #0
10010fc6:	1c21      	adds	r1, r4, #0
10010fc8:	1c22      	adds	r2, r4, #0
10010fca:	1c23      	adds	r3, r4, #0
10010fcc:	4d34      	ldr	r5, [pc, #208]	; (100110a0 <at_ble_authenticate+0x11c>)
10010fce:	47a8      	blx	r5
10010fd0:	e05e      	b.n	10011090 <at_ble_authenticate+0x10c>
10010fd2:	7922      	ldrb	r2, [r4, #4]
10010fd4:	2a06      	cmp	r2, #6
10010fd6:	d9ee      	bls.n	10010fb6 <at_ble_authenticate+0x32>
10010fd8:	7963      	ldrb	r3, [r4, #5]
10010fda:	2b10      	cmp	r3, #16
10010fdc:	d8eb      	bhi.n	10010fb6 <at_ble_authenticate+0x32>
10010fde:	429a      	cmp	r2, r3
10010fe0:	d8e9      	bhi.n	10010fb6 <at_ble_authenticate+0x32>
10010fe2:	7a23      	ldrb	r3, [r4, #8]
10010fe4:	2b04      	cmp	r3, #4
10010fe6:	d8e6      	bhi.n	10010fb6 <at_ble_authenticate+0x32>
10010fe8:	79a3      	ldrb	r3, [r4, #6]
10010fea:	2b07      	cmp	r3, #7
10010fec:	d8e3      	bhi.n	10010fb6 <at_ble_authenticate+0x32>
10010fee:	79e3      	ldrb	r3, [r4, #7]
10010ff0:	2b07      	cmp	r3, #7
10010ff2:	d8e0      	bhi.n	10010fb6 <at_ble_authenticate+0x32>
10010ff4:	78a3      	ldrb	r3, [r4, #2]
10010ff6:	2b00      	cmp	r3, #0
10010ff8:	d006      	beq.n	10011008 <at_ble_authenticate+0x84>
10010ffa:	2e00      	cmp	r6, #0
10010ffc:	d0db      	beq.n	10010fb6 <at_ble_authenticate+0x32>
10010ffe:	4829      	ldr	r0, [pc, #164]	; (100110a4 <at_ble_authenticate+0x120>)
10011000:	1c31      	adds	r1, r6, #0
10011002:	221c      	movs	r2, #28
10011004:	4b28      	ldr	r3, [pc, #160]	; (100110a8 <at_ble_authenticate+0x124>)
10011006:	4798      	blx	r3
10011008:	9b07      	ldr	r3, [sp, #28]
1001100a:	2b00      	cmp	r3, #0
1001100c:	d005      	beq.n	1001101a <at_ble_authenticate+0x96>
1001100e:	4827      	ldr	r0, [pc, #156]	; (100110ac <at_ble_authenticate+0x128>)
10011010:	1c19      	adds	r1, r3, #0
10011012:	309a      	adds	r0, #154	; 0x9a
10011014:	2210      	movs	r2, #16
10011016:	4b24      	ldr	r3, [pc, #144]	; (100110a8 <at_ble_authenticate+0x124>)
10011018:	4798      	blx	r3
1001101a:	7863      	ldrb	r3, [r4, #1]
1001101c:	78a2      	ldrb	r2, [r4, #2]
1001101e:	009b      	lsls	r3, r3, #2
10011020:	4313      	orrs	r3, r2
10011022:	2212      	movs	r2, #18
10011024:	4357      	muls	r7, r2
10011026:	4a1d      	ldr	r2, [pc, #116]	; (1001109c <at_ble_authenticate+0x118>)
10011028:	b2db      	uxtb	r3, r3
1001102a:	5cba      	ldrb	r2, [r7, r2]
1001102c:	2a00      	cmp	r2, #0
1001102e:	d116      	bne.n	1001105e <at_ble_authenticate+0xda>
10011030:	79a0      	ldrb	r0, [r4, #6]
10011032:	0742      	lsls	r2, r0, #29
10011034:	d502      	bpl.n	1001103c <at_ble_authenticate+0xb8>
10011036:	9a07      	ldr	r2, [sp, #28]
10011038:	2a00      	cmp	r2, #0
1001103a:	d0bc      	beq.n	10010fb6 <at_ble_authenticate+0x32>
1001103c:	07c2      	lsls	r2, r0, #31
1001103e:	d501      	bpl.n	10011044 <at_ble_authenticate+0xc0>
10011040:	2e00      	cmp	r6, #0
10011042:	d0b8      	beq.n	10010fb6 <at_ble_authenticate+0x32>
10011044:	7966      	ldrb	r6, [r4, #5]
10011046:	7821      	ldrb	r1, [r4, #0]
10011048:	78e2      	ldrb	r2, [r4, #3]
1001104a:	9600      	str	r6, [sp, #0]
1001104c:	9001      	str	r0, [sp, #4]
1001104e:	79e0      	ldrb	r0, [r4, #7]
10011050:	9002      	str	r0, [sp, #8]
10011052:	7a20      	ldrb	r0, [r4, #8]
10011054:	4c16      	ldr	r4, [pc, #88]	; (100110b0 <at_ble_authenticate+0x12c>)
10011056:	9003      	str	r0, [sp, #12]
10011058:	1c28      	adds	r0, r5, #0
1001105a:	47a0      	blx	r4
1001105c:	e018      	b.n	10011090 <at_ble_authenticate+0x10c>
1001105e:	2a01      	cmp	r2, #1
10011060:	d1a9      	bne.n	10010fb6 <at_ble_authenticate+0x32>
10011062:	79e0      	ldrb	r0, [r4, #7]
10011064:	0742      	lsls	r2, r0, #29
10011066:	d502      	bpl.n	1001106e <at_ble_authenticate+0xea>
10011068:	9a07      	ldr	r2, [sp, #28]
1001106a:	2a00      	cmp	r2, #0
1001106c:	d0a3      	beq.n	10010fb6 <at_ble_authenticate+0x32>
1001106e:	07c2      	lsls	r2, r0, #31
10011070:	d501      	bpl.n	10011076 <at_ble_authenticate+0xf2>
10011072:	2e00      	cmp	r6, #0
10011074:	d09f      	beq.n	10010fb6 <at_ble_authenticate+0x32>
10011076:	7966      	ldrb	r6, [r4, #5]
10011078:	7821      	ldrb	r1, [r4, #0]
1001107a:	78e2      	ldrb	r2, [r4, #3]
1001107c:	9600      	str	r6, [sp, #0]
1001107e:	79a6      	ldrb	r6, [r4, #6]
10011080:	9002      	str	r0, [sp, #8]
10011082:	9601      	str	r6, [sp, #4]
10011084:	7a20      	ldrb	r0, [r4, #8]
10011086:	9504      	str	r5, [sp, #16]
10011088:	9003      	str	r0, [sp, #12]
1001108a:	4c05      	ldr	r4, [pc, #20]	; (100110a0 <at_ble_authenticate+0x11c>)
1001108c:	2001      	movs	r0, #1
1001108e:	47a0      	blx	r4
10011090:	2000      	movs	r0, #0
10011092:	b00b      	add	sp, #44	; 0x2c
10011094:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011096:	46c0      	nop			; (mov r8, r8)
10011098:	10011485 	.word	0x10011485
1001109c:	1001a68e 	.word	0x1001a68e
100110a0:	100119f5 	.word	0x100119f5
100110a4:	1001a79c 	.word	0x1001a79c
100110a8:	100149cf 	.word	0x100149cf
100110ac:	1001a71e 	.word	0x1001a71e
100110b0:	100117d5 	.word	0x100117d5

100110b4 <at_ble_pair_key_reply>:
100110b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100110b6:	b085      	sub	sp, #20
100110b8:	1c05      	adds	r5, r0, #0
100110ba:	1c0c      	adds	r4, r1, #0
100110bc:	1c16      	adds	r6, r2, #0
100110be:	2100      	movs	r1, #0
100110c0:	4668      	mov	r0, sp
100110c2:	2210      	movs	r2, #16
100110c4:	4b18      	ldr	r3, [pc, #96]	; (10011128 <at_ble_pair_key_reply+0x74>)
100110c6:	4798      	blx	r3
100110c8:	2101      	movs	r1, #1
100110ca:	2e00      	cmp	r6, #0
100110cc:	d101      	bne.n	100110d2 <at_ble_pair_key_reply+0x1e>
100110ce:	1c31      	adds	r1, r6, #0
100110d0:	466e      	mov	r6, sp
100110d2:	2c00      	cmp	r4, #0
100110d4:	d116      	bne.n	10011104 <at_ble_pair_key_reply+0x50>
100110d6:	2701      	movs	r7, #1
100110d8:	1c23      	adds	r3, r4, #0
100110da:	1d70      	adds	r0, r6, #5
100110dc:	3e01      	subs	r6, #1
100110de:	7802      	ldrb	r2, [r0, #0]
100110e0:	3801      	subs	r0, #1
100110e2:	3a30      	subs	r2, #48	; 0x30
100110e4:	437a      	muls	r2, r7
100110e6:	189b      	adds	r3, r3, r2
100110e8:	220a      	movs	r2, #10
100110ea:	4357      	muls	r7, r2
100110ec:	42b0      	cmp	r0, r6
100110ee:	d1f6      	bne.n	100110de <at_ble_pair_key_reply+0x2a>
100110f0:	466a      	mov	r2, sp
100110f2:	4668      	mov	r0, sp
100110f4:	7013      	strb	r3, [r2, #0]
100110f6:	0a1a      	lsrs	r2, r3, #8
100110f8:	7042      	strb	r2, [r0, #1]
100110fa:	0c1a      	lsrs	r2, r3, #16
100110fc:	0e1b      	lsrs	r3, r3, #24
100110fe:	7082      	strb	r2, [r0, #2]
10011100:	70c3      	strb	r3, [r0, #3]
10011102:	e009      	b.n	10011118 <at_ble_pair_key_reply+0x64>
10011104:	20cf      	movs	r0, #207	; 0xcf
10011106:	2c01      	cmp	r4, #1
10011108:	d10c      	bne.n	10011124 <at_ble_pair_key_reply+0x70>
1001110a:	2300      	movs	r3, #0
1001110c:	4668      	mov	r0, sp
1001110e:	5cf2      	ldrb	r2, [r6, r3]
10011110:	54c2      	strb	r2, [r0, r3]
10011112:	3301      	adds	r3, #1
10011114:	2b10      	cmp	r3, #16
10011116:	d1f9      	bne.n	1001110c <at_ble_pair_key_reply+0x58>
10011118:	2004      	movs	r0, #4
1001111a:	466a      	mov	r2, sp
1001111c:	1c2b      	adds	r3, r5, #0
1001111e:	4c03      	ldr	r4, [pc, #12]	; (1001112c <at_ble_pair_key_reply+0x78>)
10011120:	47a0      	blx	r4
10011122:	2000      	movs	r0, #0
10011124:	b005      	add	sp, #20
10011126:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011128:	100149e1 	.word	0x100149e1
1001112c:	10011a71 	.word	0x10011a71

10011130 <at_ble_send_slave_sec_request>:
10011130:	b570      	push	{r4, r5, r6, lr}
10011132:	4b0c      	ldr	r3, [pc, #48]	; (10011164 <at_ble_send_slave_sec_request+0x34>)
10011134:	1c0e      	adds	r6, r1, #0
10011136:	2100      	movs	r1, #0
10011138:	1c05      	adds	r5, r0, #0
1001113a:	1c14      	adds	r4, r2, #0
1001113c:	4798      	blx	r3
1001113e:	2301      	movs	r3, #1
10011140:	2807      	cmp	r0, #7
10011142:	d80d      	bhi.n	10011160 <at_ble_send_slave_sec_request+0x30>
10011144:	3311      	adds	r3, #17
10011146:	4358      	muls	r0, r3
10011148:	4b07      	ldr	r3, [pc, #28]	; (10011168 <at_ble_send_slave_sec_request+0x38>)
1001114a:	5cc2      	ldrb	r2, [r0, r3]
1001114c:	23e0      	movs	r3, #224	; 0xe0
1001114e:	2a01      	cmp	r2, #1
10011150:	d106      	bne.n	10011160 <at_ble_send_slave_sec_request+0x30>
10011152:	00b1      	lsls	r1, r6, #2
10011154:	430c      	orrs	r4, r1
10011156:	4b05      	ldr	r3, [pc, #20]	; (1001116c <at_ble_send_slave_sec_request+0x3c>)
10011158:	b2e1      	uxtb	r1, r4
1001115a:	1c28      	adds	r0, r5, #0
1001115c:	4798      	blx	r3
1001115e:	2300      	movs	r3, #0
10011160:	1c18      	adds	r0, r3, #0
10011162:	bd70      	pop	{r4, r5, r6, pc}
10011164:	10011485 	.word	0x10011485
10011168:	1001a68e 	.word	0x1001a68e
1001116c:	10011ac1 	.word	0x10011ac1

10011170 <at_ble_encryption_start>:
10011170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011172:	23cf      	movs	r3, #207	; 0xcf
10011174:	2900      	cmp	r1, #0
10011176:	d02b      	beq.n	100111d0 <at_ble_encryption_start+0x60>
10011178:	2a05      	cmp	r2, #5
1001117a:	d829      	bhi.n	100111d0 <at_ble_encryption_start+0x60>
1001117c:	2701      	movs	r7, #1
1001117e:	1c3d      	adds	r5, r7, #0
10011180:	2433      	movs	r4, #51	; 0x33
10011182:	4095      	lsls	r5, r2
10011184:	4225      	tst	r5, r4
10011186:	d023      	beq.n	100111d0 <at_ble_encryption_start+0x60>
10011188:	7e8c      	ldrb	r4, [r1, #26]
1001118a:	3c07      	subs	r4, #7
1001118c:	2c09      	cmp	r4, #9
1001118e:	d81f      	bhi.n	100111d0 <at_ble_encryption_start+0x60>
10011190:	4b10      	ldr	r3, [pc, #64]	; (100111d4 <at_ble_encryption_start+0x64>)
10011192:	1c0c      	adds	r4, r1, #0
10011194:	2100      	movs	r1, #0
10011196:	1c15      	adds	r5, r2, #0
10011198:	1c06      	adds	r6, r0, #0
1001119a:	4798      	blx	r3
1001119c:	1c3b      	adds	r3, r7, #0
1001119e:	2807      	cmp	r0, #7
100111a0:	d816      	bhi.n	100111d0 <at_ble_encryption_start+0x60>
100111a2:	2312      	movs	r3, #18
100111a4:	4358      	muls	r0, r3
100111a6:	4b0c      	ldr	r3, [pc, #48]	; (100111d8 <at_ble_encryption_start+0x68>)
100111a8:	5cc7      	ldrb	r7, [r0, r3]
100111aa:	23e0      	movs	r3, #224	; 0xe0
100111ac:	2f00      	cmp	r7, #0
100111ae:	d10f      	bne.n	100111d0 <at_ble_encryption_start+0x60>
100111b0:	1c21      	adds	r1, r4, #0
100111b2:	221c      	movs	r2, #28
100111b4:	4b09      	ldr	r3, [pc, #36]	; (100111dc <at_ble_encryption_start+0x6c>)
100111b6:	480a      	ldr	r0, [pc, #40]	; (100111e0 <at_ble_encryption_start+0x70>)
100111b8:	4798      	blx	r3
100111ba:	1c23      	adds	r3, r4, #0
100111bc:	7ea1      	ldrb	r1, [r4, #26]
100111be:	8a22      	ldrh	r2, [r4, #16]
100111c0:	3312      	adds	r3, #18
100111c2:	9100      	str	r1, [sp, #0]
100111c4:	9501      	str	r5, [sp, #4]
100111c6:	1c21      	adds	r1, r4, #0
100111c8:	1c30      	adds	r0, r6, #0
100111ca:	4c06      	ldr	r4, [pc, #24]	; (100111e4 <at_ble_encryption_start+0x74>)
100111cc:	47a0      	blx	r4
100111ce:	1c3b      	adds	r3, r7, #0
100111d0:	1c18      	adds	r0, r3, #0
100111d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100111d4:	10011485 	.word	0x10011485
100111d8:	1001a68e 	.word	0x1001a68e
100111dc:	100149cf 	.word	0x100149cf
100111e0:	1001a79c 	.word	0x1001a79c
100111e4:	10011b01 	.word	0x10011b01

100111e8 <at_ble_encryption_request_reply>:
100111e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
100111ea:	24cf      	movs	r4, #207	; 0xcf
100111ec:	2b00      	cmp	r3, #0
100111ee:	d011      	beq.n	10011214 <at_ble_encryption_request_reply+0x2c>
100111f0:	2a00      	cmp	r2, #0
100111f2:	d00a      	beq.n	1001120a <at_ble_encryption_request_reply+0x22>
100111f4:	2905      	cmp	r1, #5
100111f6:	d80d      	bhi.n	10011214 <at_ble_encryption_request_reply+0x2c>
100111f8:	2501      	movs	r5, #1
100111fa:	2633      	movs	r6, #51	; 0x33
100111fc:	408d      	lsls	r5, r1
100111fe:	4235      	tst	r5, r6
10011200:	d008      	beq.n	10011214 <at_ble_encryption_request_reply+0x2c>
10011202:	7e9d      	ldrb	r5, [r3, #26]
10011204:	3d07      	subs	r5, #7
10011206:	2d09      	cmp	r5, #9
10011208:	d804      	bhi.n	10011214 <at_ble_encryption_request_reply+0x2c>
1001120a:	7e9c      	ldrb	r4, [r3, #26]
1001120c:	9400      	str	r4, [sp, #0]
1001120e:	4c02      	ldr	r4, [pc, #8]	; (10011218 <at_ble_encryption_request_reply+0x30>)
10011210:	47a0      	blx	r4
10011212:	2400      	movs	r4, #0
10011214:	1c20      	adds	r0, r4, #0
10011216:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011218:	10011bbd 	.word	0x10011bbd

1001121c <rx_callback>:
1001121c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001121e:	8883      	ldrh	r3, [r0, #4]
10011220:	1c01      	adds	r1, r0, #0
10011222:	9301      	str	r3, [sp, #4]
10011224:	88c5      	ldrh	r5, [r0, #6]
10011226:	8806      	ldrh	r6, [r0, #0]
10011228:	2d00      	cmp	r5, #0
1001122a:	d10f      	bne.n	1001124c <rx_callback+0x30>
1001122c:	1c19      	adds	r1, r3, #0
1001122e:	1c30      	adds	r0, r6, #0
10011230:	4b19      	ldr	r3, [pc, #100]	; (10011298 <rx_callback+0x7c>)
10011232:	1c2a      	adds	r2, r5, #0
10011234:	4798      	blx	r3
10011236:	1e03      	subs	r3, r0, #0
10011238:	d105      	bne.n	10011246 <rx_callback+0x2a>
1001123a:	1c30      	adds	r0, r6, #0
1001123c:	9901      	ldr	r1, [sp, #4]
1001123e:	1c1a      	adds	r2, r3, #0
10011240:	4c16      	ldr	r4, [pc, #88]	; (1001129c <rx_callback+0x80>)
10011242:	47a0      	blx	r4
10011244:	e027      	b.n	10011296 <rx_callback+0x7a>
10011246:	4b16      	ldr	r3, [pc, #88]	; (100112a0 <rx_callback+0x84>)
10011248:	4798      	blx	r3
1001124a:	e024      	b.n	10011296 <rx_callback+0x7a>
1001124c:	4c15      	ldr	r4, [pc, #84]	; (100112a4 <rx_callback+0x88>)
1001124e:	4a16      	ldr	r2, [pc, #88]	; (100112a8 <rx_callback+0x8c>)
10011250:	6823      	ldr	r3, [r4, #0]
10011252:	6812      	ldr	r2, [r2, #0]
10011254:	18eb      	adds	r3, r5, r3
10011256:	4293      	cmp	r3, r2
10011258:	d901      	bls.n	1001125e <rx_callback+0x42>
1001125a:	2300      	movs	r3, #0
1001125c:	6023      	str	r3, [r4, #0]
1001125e:	4f13      	ldr	r7, [pc, #76]	; (100112ac <rx_callback+0x90>)
10011260:	6822      	ldr	r2, [r4, #0]
10011262:	683b      	ldr	r3, [r7, #0]
10011264:	3108      	adds	r1, #8
10011266:	1898      	adds	r0, r3, r2
10011268:	1c2a      	adds	r2, r5, #0
1001126a:	4b11      	ldr	r3, [pc, #68]	; (100112b0 <rx_callback+0x94>)
1001126c:	4798      	blx	r3
1001126e:	683b      	ldr	r3, [r7, #0]
10011270:	6822      	ldr	r2, [r4, #0]
10011272:	1c30      	adds	r0, r6, #0
10011274:	189a      	adds	r2, r3, r2
10011276:	9901      	ldr	r1, [sp, #4]
10011278:	4b07      	ldr	r3, [pc, #28]	; (10011298 <rx_callback+0x7c>)
1001127a:	4798      	blx	r3
1001127c:	2800      	cmp	r0, #0
1001127e:	d1e2      	bne.n	10011246 <rx_callback+0x2a>
10011280:	6823      	ldr	r3, [r4, #0]
10011282:	683a      	ldr	r2, [r7, #0]
10011284:	1c30      	adds	r0, r6, #0
10011286:	18d2      	adds	r2, r2, r3
10011288:	9901      	ldr	r1, [sp, #4]
1001128a:	1c2b      	adds	r3, r5, #0
1001128c:	4e03      	ldr	r6, [pc, #12]	; (1001129c <rx_callback+0x80>)
1001128e:	47b0      	blx	r6
10011290:	6823      	ldr	r3, [r4, #0]
10011292:	18ed      	adds	r5, r5, r3
10011294:	6025      	str	r5, [r4, #0]
10011296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011298:	1000f8b1 	.word	0x1000f8b1
1001129c:	1000f829 	.word	0x1000f829
100112a0:	1000f231 	.word	0x1000f231
100112a4:	1001a7f8 	.word	0x1001a7f8
100112a8:	100197a0 	.word	0x100197a0
100112ac:	1001979c 	.word	0x1001979c
100112b0:	100149cf 	.word	0x100149cf

100112b4 <interface_send>:
100112b4:	b508      	push	{r3, lr}
100112b6:	4b02      	ldr	r3, [pc, #8]	; (100112c0 <interface_send+0xc>)
100112b8:	4798      	blx	r3
100112ba:	2000      	movs	r0, #0
100112bc:	bd08      	pop	{r3, pc}
100112be:	46c0      	nop			; (mov r8, r8)
100112c0:	1000ef29 	.word	0x1000ef29

100112c4 <interface_init>:
100112c4:	2280      	movs	r2, #128	; 0x80
100112c6:	b510      	push	{r4, lr}
100112c8:	2100      	movs	r1, #0
100112ca:	1c04      	adds	r4, r0, #0
100112cc:	0092      	lsls	r2, r2, #2
100112ce:	4b08      	ldr	r3, [pc, #32]	; (100112f0 <interface_init+0x2c>)
100112d0:	4808      	ldr	r0, [pc, #32]	; (100112f4 <interface_init+0x30>)
100112d2:	4798      	blx	r3
100112d4:	2200      	movs	r2, #0
100112d6:	4b08      	ldr	r3, [pc, #32]	; (100112f8 <interface_init+0x34>)
100112d8:	601a      	str	r2, [r3, #0]
100112da:	4a08      	ldr	r2, [pc, #32]	; (100112fc <interface_init+0x38>)
100112dc:	4b08      	ldr	r3, [pc, #32]	; (10011300 <interface_init+0x3c>)
100112de:	601a      	str	r2, [r3, #0]
100112e0:	4b08      	ldr	r3, [pc, #32]	; (10011304 <interface_init+0x40>)
100112e2:	6922      	ldr	r2, [r4, #16]
100112e4:	601a      	str	r2, [r3, #0]
100112e6:	6962      	ldr	r2, [r4, #20]
100112e8:	4b07      	ldr	r3, [pc, #28]	; (10011308 <interface_init+0x44>)
100112ea:	601a      	str	r2, [r3, #0]
100112ec:	bd10      	pop	{r4, pc}
100112ee:	46c0      	nop			; (mov r8, r8)
100112f0:	100149e1 	.word	0x100149e1
100112f4:	1001a9fc 	.word	0x1001a9fc
100112f8:	1001a7f8 	.word	0x1001a7f8
100112fc:	1001a7fc 	.word	0x1001a7fc
10011300:	10017cf4 	.word	0x10017cf4
10011304:	1001979c 	.word	0x1001979c
10011308:	100197a0 	.word	0x100197a0

1001130c <platform_cmd_cmpl_signal>:
1001130c:	2201      	movs	r2, #1
1001130e:	4b01      	ldr	r3, [pc, #4]	; (10011314 <platform_cmd_cmpl_signal+0x8>)
10011310:	601a      	str	r2, [r3, #0]
10011312:	4770      	bx	lr
10011314:	100197a4 	.word	0x100197a4

10011318 <platform_cmd_cmpl_wait>:
10011318:	b510      	push	{r4, lr}
1001131a:	1c04      	adds	r4, r0, #0
1001131c:	4b07      	ldr	r3, [pc, #28]	; (1001133c <platform_cmd_cmpl_wait+0x24>)
1001131e:	681a      	ldr	r2, [r3, #0]
10011320:	2a01      	cmp	r2, #1
10011322:	d003      	beq.n	1001132c <platform_cmd_cmpl_wait+0x14>
10011324:	4b06      	ldr	r3, [pc, #24]	; (10011340 <platform_cmd_cmpl_wait+0x28>)
10011326:	2000      	movs	r0, #0
10011328:	4798      	blx	r3
1001132a:	e7f7      	b.n	1001131c <platform_cmd_cmpl_wait+0x4>
1001132c:	6819      	ldr	r1, [r3, #0]
1001132e:	2901      	cmp	r1, #1
10011330:	d102      	bne.n	10011338 <platform_cmd_cmpl_wait+0x20>
10011332:	2200      	movs	r2, #0
10011334:	601a      	str	r2, [r3, #0]
10011336:	e000      	b.n	1001133a <platform_cmd_cmpl_wait+0x22>
10011338:	7022      	strb	r2, [r4, #0]
1001133a:	bd10      	pop	{r4, pc}
1001133c:	100197a4 	.word	0x100197a4
10011340:	1000efb9 	.word	0x1000efb9

10011344 <start_timer>:
10011344:	4770      	bx	lr

10011346 <stop_timer>:
10011346:	4770      	bx	lr

10011348 <dbg_le_set_bd_addr_req_handler>:
10011348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001134a:	466b      	mov	r3, sp
1001134c:	1dde      	adds	r6, r3, #7
1001134e:	2300      	movs	r3, #0
10011350:	7033      	strb	r3, [r6, #0]
10011352:	230f      	movs	r3, #15
10011354:	4c13      	ldr	r4, [pc, #76]	; (100113a4 <dbg_le_set_bd_addr_req_handler+0x5c>)
10011356:	2703      	movs	r7, #3
10011358:	7023      	strb	r3, [r4, #0]
1001135a:	2300      	movs	r3, #0
1001135c:	70e3      	strb	r3, [r4, #3]
1001135e:	4b12      	ldr	r3, [pc, #72]	; (100113a8 <dbg_le_set_bd_addr_req_handler+0x60>)
10011360:	1c01      	adds	r1, r0, #0
10011362:	881a      	ldrh	r2, [r3, #0]
10011364:	881b      	ldrh	r3, [r3, #0]
10011366:	7122      	strb	r2, [r4, #4]
10011368:	0a1b      	lsrs	r3, r3, #8
1001136a:	2206      	movs	r2, #6
1001136c:	7163      	strb	r3, [r4, #5]
1001136e:	480f      	ldr	r0, [pc, #60]	; (100113ac <dbg_le_set_bd_addr_req_handler+0x64>)
10011370:	4b0f      	ldr	r3, [pc, #60]	; (100113b0 <dbg_le_set_bd_addr_req_handler+0x68>)
10011372:	7067      	strb	r7, [r4, #1]
10011374:	70a7      	strb	r7, [r4, #2]
10011376:	4798      	blx	r3
10011378:	4d0e      	ldr	r5, [pc, #56]	; (100113b4 <dbg_le_set_bd_addr_req_handler+0x6c>)
1001137a:	4b0f      	ldr	r3, [pc, #60]	; (100113b8 <dbg_le_set_bd_addr_req_handler+0x70>)
1001137c:	210e      	movs	r1, #14
1001137e:	802b      	strh	r3, [r5, #0]
10011380:	2306      	movs	r3, #6
10011382:	71a3      	strb	r3, [r4, #6]
10011384:	2300      	movs	r3, #0
10011386:	1c20      	adds	r0, r4, #0
10011388:	71e3      	strb	r3, [r4, #7]
1001138a:	4b0c      	ldr	r3, [pc, #48]	; (100113bc <dbg_le_set_bd_addr_req_handler+0x74>)
1001138c:	80af      	strh	r7, [r5, #4]
1001138e:	4798      	blx	r3
10011390:	1c30      	adds	r0, r6, #0
10011392:	4b0b      	ldr	r3, [pc, #44]	; (100113c0 <dbg_le_set_bd_addr_req_handler+0x78>)
10011394:	4798      	blx	r3
10011396:	7833      	ldrb	r3, [r6, #0]
10011398:	20e2      	movs	r0, #226	; 0xe2
1001139a:	2b00      	cmp	r3, #0
1001139c:	d101      	bne.n	100113a2 <dbg_le_set_bd_addr_req_handler+0x5a>
1001139e:	68ab      	ldr	r3, [r5, #8]
100113a0:	7818      	ldrb	r0, [r3, #0]
100113a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100113a4:	1001a9fc 	.word	0x1001a9fc
100113a8:	1001a68c 	.word	0x1001a68c
100113ac:	1001aa04 	.word	0x1001aa04
100113b0:	100149cf 	.word	0x100149cf
100113b4:	1001a680 	.word	0x1001a680
100113b8:	00000329 	.word	0x00000329
100113bc:	100112b5 	.word	0x100112b5
100113c0:	10011319 	.word	0x10011319

100113c4 <gapc_get_dev_info_cfm.constprop.1>:
100113c4:	b538      	push	{r3, r4, r5, lr}
100113c6:	230b      	movs	r3, #11
100113c8:	4c27      	ldr	r4, [pc, #156]	; (10011468 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100113ca:	7023      	strb	r3, [r4, #0]
100113cc:	3303      	adds	r3, #3
100113ce:	7063      	strb	r3, [r4, #1]
100113d0:	3329      	adds	r3, #41	; 0x29
100113d2:	70a3      	strb	r3, [r4, #2]
100113d4:	4b25      	ldr	r3, [pc, #148]	; (1001146c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100113d6:	70e1      	strb	r1, [r4, #3]
100113d8:	881a      	ldrh	r2, [r3, #0]
100113da:	881b      	ldrh	r3, [r3, #0]
100113dc:	7122      	strb	r2, [r4, #4]
100113de:	0a1b      	lsrs	r3, r3, #8
100113e0:	7163      	strb	r3, [r4, #5]
100113e2:	2300      	movs	r3, #0
100113e4:	7220      	strb	r0, [r4, #8]
100113e6:	7263      	strb	r3, [r4, #9]
100113e8:	2801      	cmp	r0, #1
100113ea:	d02b      	beq.n	10011444 <gapc_get_dev_info_cfm.constprop.1+0x80>
100113ec:	4298      	cmp	r0, r3
100113ee:	d01b      	beq.n	10011428 <gapc_get_dev_info_cfm.constprop.1+0x64>
100113f0:	2802      	cmp	r0, #2
100113f2:	d12f      	bne.n	10011454 <gapc_get_dev_info_cfm.constprop.1+0x90>
100113f4:	4b1e      	ldr	r3, [pc, #120]	; (10011470 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100113f6:	2112      	movs	r1, #18
100113f8:	1c1a      	adds	r2, r3, #0
100113fa:	32ce      	adds	r2, #206	; 0xce
100113fc:	8812      	ldrh	r2, [r2, #0]
100113fe:	72a2      	strb	r2, [r4, #10]
10011400:	0a12      	lsrs	r2, r2, #8
10011402:	72e2      	strb	r2, [r4, #11]
10011404:	1c1a      	adds	r2, r3, #0
10011406:	32d0      	adds	r2, #208	; 0xd0
10011408:	8812      	ldrh	r2, [r2, #0]
1001140a:	7322      	strb	r2, [r4, #12]
1001140c:	0a12      	lsrs	r2, r2, #8
1001140e:	7362      	strb	r2, [r4, #13]
10011410:	1c1a      	adds	r2, r3, #0
10011412:	32d2      	adds	r2, #210	; 0xd2
10011414:	8812      	ldrh	r2, [r2, #0]
10011416:	33d4      	adds	r3, #212	; 0xd4
10011418:	73a2      	strb	r2, [r4, #14]
1001141a:	0a12      	lsrs	r2, r2, #8
1001141c:	73e2      	strb	r2, [r4, #15]
1001141e:	881b      	ldrh	r3, [r3, #0]
10011420:	7423      	strb	r3, [r4, #16]
10011422:	0a1b      	lsrs	r3, r3, #8
10011424:	7463      	strb	r3, [r4, #17]
10011426:	e016      	b.n	10011456 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011428:	4b11      	ldr	r3, [pc, #68]	; (10011470 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001142a:	4912      	ldr	r1, [pc, #72]	; (10011474 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1001142c:	33aa      	adds	r3, #170	; 0xaa
1001142e:	881d      	ldrh	r5, [r3, #0]
10011430:	4811      	ldr	r0, [pc, #68]	; (10011478 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10011432:	0a2b      	lsrs	r3, r5, #8
10011434:	72a5      	strb	r5, [r4, #10]
10011436:	72e3      	strb	r3, [r4, #11]
10011438:	1c2a      	adds	r2, r5, #0
1001143a:	4b10      	ldr	r3, [pc, #64]	; (1001147c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1001143c:	350c      	adds	r5, #12
1001143e:	4798      	blx	r3
10011440:	b2a9      	uxth	r1, r5
10011442:	e008      	b.n	10011456 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011444:	4b0a      	ldr	r3, [pc, #40]	; (10011470 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011446:	210c      	movs	r1, #12
10011448:	33cc      	adds	r3, #204	; 0xcc
1001144a:	881b      	ldrh	r3, [r3, #0]
1001144c:	72a3      	strb	r3, [r4, #10]
1001144e:	0a1b      	lsrs	r3, r3, #8
10011450:	72e3      	strb	r3, [r4, #11]
10011452:	e000      	b.n	10011456 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011454:	210a      	movs	r1, #10
10011456:	1c0b      	adds	r3, r1, #0
10011458:	3b08      	subs	r3, #8
1001145a:	71a3      	strb	r3, [r4, #6]
1001145c:	121b      	asrs	r3, r3, #8
1001145e:	71e3      	strb	r3, [r4, #7]
10011460:	1c20      	adds	r0, r4, #0
10011462:	4b07      	ldr	r3, [pc, #28]	; (10011480 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011464:	4798      	blx	r3
10011466:	bd38      	pop	{r3, r4, r5, pc}
10011468:	1001a9fc 	.word	0x1001a9fc
1001146c:	1001a68c 	.word	0x1001a68c
10011470:	1001a71e 	.word	0x1001a71e
10011474:	1001a7ca 	.word	0x1001a7ca
10011478:	1001aa08 	.word	0x1001aa08
1001147c:	100149cf 	.word	0x100149cf
10011480:	100112b5 	.word	0x100112b5

10011484 <check_ConnData_idx_role>:
10011484:	4b0c      	ldr	r3, [pc, #48]	; (100114b8 <check_ConnData_idx_role+0x34>)
10011486:	b570      	push	{r4, r5, r6, lr}
10011488:	1c04      	adds	r4, r0, #0
1001148a:	2008      	movs	r0, #8
1001148c:	429c      	cmp	r4, r3
1001148e:	d011      	beq.n	100114b4 <check_ConnData_idx_role+0x30>
10011490:	2300      	movs	r3, #0
10011492:	2212      	movs	r2, #18
10011494:	435a      	muls	r2, r3
10011496:	4d09      	ldr	r5, [pc, #36]	; (100114bc <check_ConnData_idx_role+0x38>)
10011498:	b2d8      	uxtb	r0, r3
1001149a:	1956      	adds	r6, r2, r5
1001149c:	8976      	ldrh	r6, [r6, #10]
1001149e:	42a6      	cmp	r6, r4
100114a0:	d104      	bne.n	100114ac <check_ConnData_idx_role+0x28>
100114a2:	2900      	cmp	r1, #0
100114a4:	d006      	beq.n	100114b4 <check_ConnData_idx_role+0x30>
100114a6:	5d53      	ldrb	r3, [r2, r5]
100114a8:	700b      	strb	r3, [r1, #0]
100114aa:	e003      	b.n	100114b4 <check_ConnData_idx_role+0x30>
100114ac:	3301      	adds	r3, #1
100114ae:	2b08      	cmp	r3, #8
100114b0:	d1ef      	bne.n	10011492 <check_ConnData_idx_role+0xe>
100114b2:	1c18      	adds	r0, r3, #0
100114b4:	bd70      	pop	{r4, r5, r6, pc}
100114b6:	46c0      	nop			; (mov r8, r8)
100114b8:	0000ffff 	.word	0x0000ffff
100114bc:	1001a68e 	.word	0x1001a68e

100114c0 <check_ConnData_emptyEntry>:
100114c0:	2300      	movs	r3, #0
100114c2:	2212      	movs	r2, #18
100114c4:	435a      	muls	r2, r3
100114c6:	4906      	ldr	r1, [pc, #24]	; (100114e0 <check_ConnData_emptyEntry+0x20>)
100114c8:	b2d8      	uxtb	r0, r3
100114ca:	1852      	adds	r2, r2, r1
100114cc:	8951      	ldrh	r1, [r2, #10]
100114ce:	4a05      	ldr	r2, [pc, #20]	; (100114e4 <check_ConnData_emptyEntry+0x24>)
100114d0:	4291      	cmp	r1, r2
100114d2:	d003      	beq.n	100114dc <check_ConnData_emptyEntry+0x1c>
100114d4:	3301      	adds	r3, #1
100114d6:	2b08      	cmp	r3, #8
100114d8:	d1f3      	bne.n	100114c2 <check_ConnData_emptyEntry+0x2>
100114da:	1c18      	adds	r0, r3, #0
100114dc:	4770      	bx	lr
100114de:	46c0      	nop			; (mov r8, r8)
100114e0:	1001a68e 	.word	0x1001a68e
100114e4:	0000ffff 	.word	0x0000ffff

100114e8 <gapc_cmp_evt>:
100114e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100114ea:	780b      	ldrb	r3, [r1, #0]
100114ec:	1c05      	adds	r5, r0, #0
100114ee:	1e58      	subs	r0, r3, #1
100114f0:	784e      	ldrb	r6, [r1, #1]
100114f2:	280f      	cmp	r0, #15
100114f4:	d85a      	bhi.n	100115ac <gapc_cmp_evt+0xc4>
100114f6:	1c14      	adds	r4, r2, #0
100114f8:	f001 fba4 	bl	10012c44 <__gnu_thumb1_case_uqi>
100114fc:	5858440a 	.word	0x5858440a
10011500:	4b584444 	.word	0x4b584444
10011504:	0825122d 	.word	0x0825122d
10011508:	3e395858 	.word	0x3e395858
1001150c:	203b      	movs	r0, #59	; 0x3b
1001150e:	e04e      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011510:	203b      	movs	r0, #59	; 0x3b
10011512:	2e00      	cmp	r6, #0
10011514:	d04b      	beq.n	100115ae <gapc_cmp_evt+0xc6>
10011516:	0a2d      	lsrs	r5, r5, #8
10011518:	8015      	strh	r5, [r2, #0]
1001151a:	7096      	strb	r6, [r2, #2]
1001151c:	3835      	subs	r0, #53	; 0x35
1001151e:	e046      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011520:	466b      	mov	r3, sp
10011522:	1ddf      	adds	r7, r3, #7
10011524:	2301      	movs	r3, #1
10011526:	0a2d      	lsrs	r5, r5, #8
10011528:	703b      	strb	r3, [r7, #0]
1001152a:	1c28      	adds	r0, r5, #0
1001152c:	1c39      	adds	r1, r7, #0
1001152e:	4b20      	ldr	r3, [pc, #128]	; (100115b0 <gapc_cmp_evt+0xc8>)
10011530:	4798      	blx	r3
10011532:	2807      	cmp	r0, #7
10011534:	d803      	bhi.n	1001153e <gapc_cmp_evt+0x56>
10011536:	783b      	ldrb	r3, [r7, #0]
10011538:	203b      	movs	r0, #59	; 0x3b
1001153a:	2b00      	cmp	r3, #0
1001153c:	d037      	beq.n	100115ae <gapc_cmp_evt+0xc6>
1001153e:	8065      	strh	r5, [r4, #2]
10011540:	7126      	strb	r6, [r4, #4]
10011542:	2009      	movs	r0, #9
10011544:	e033      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011546:	203b      	movs	r0, #59	; 0x3b
10011548:	2e00      	cmp	r6, #0
1001154a:	d030      	beq.n	100115ae <gapc_cmp_evt+0xc6>
1001154c:	0a2d      	lsrs	r5, r5, #8
1001154e:	8015      	strh	r5, [r2, #0]
10011550:	7096      	strb	r6, [r2, #2]
10011552:	382d      	subs	r0, #45	; 0x2d
10011554:	e02b      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011556:	203b      	movs	r0, #59	; 0x3b
10011558:	2e00      	cmp	r6, #0
1001155a:	d028      	beq.n	100115ae <gapc_cmp_evt+0xc6>
1001155c:	2300      	movs	r3, #0
1001155e:	0a2d      	lsrs	r5, r5, #8
10011560:	8015      	strh	r5, [r2, #0]
10011562:	7096      	strb	r6, [r2, #2]
10011564:	8093      	strh	r3, [r2, #4]
10011566:	80d3      	strh	r3, [r2, #6]
10011568:	8113      	strh	r3, [r2, #8]
1001156a:	3834      	subs	r0, #52	; 0x34
1001156c:	e01f      	b.n	100115ae <gapc_cmp_evt+0xc6>
1001156e:	203b      	movs	r0, #59	; 0x3b
10011570:	2e00      	cmp	r6, #0
10011572:	d01c      	beq.n	100115ae <gapc_cmp_evt+0xc6>
10011574:	7216      	strb	r6, [r2, #8]
10011576:	e003      	b.n	10011580 <gapc_cmp_evt+0x98>
10011578:	203b      	movs	r0, #59	; 0x3b
1001157a:	2e00      	cmp	r6, #0
1001157c:	d017      	beq.n	100115ae <gapc_cmp_evt+0xc6>
1001157e:	7116      	strb	r6, [r2, #4]
10011580:	3812      	subs	r0, #18
10011582:	e014      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011584:	203b      	movs	r0, #59	; 0x3b
10011586:	2e00      	cmp	r6, #0
10011588:	d011      	beq.n	100115ae <gapc_cmp_evt+0xc6>
1001158a:	7093      	strb	r3, [r2, #2]
1001158c:	70d6      	strb	r6, [r2, #3]
1001158e:	382a      	subs	r0, #42	; 0x2a
10011590:	e00d      	b.n	100115ae <gapc_cmp_evt+0xc6>
10011592:	203b      	movs	r0, #59	; 0x3b
10011594:	2e00      	cmp	r6, #0
10011596:	d00a      	beq.n	100115ae <gapc_cmp_evt+0xc6>
10011598:	0a2d      	lsrs	r5, r5, #8
1001159a:	7016      	strb	r6, [r2, #0]
1001159c:	8055      	strh	r5, [r2, #2]
1001159e:	1d10      	adds	r0, r2, #4
100115a0:	2100      	movs	r1, #0
100115a2:	2205      	movs	r2, #5
100115a4:	4b03      	ldr	r3, [pc, #12]	; (100115b4 <gapc_cmp_evt+0xcc>)
100115a6:	4798      	blx	r3
100115a8:	2012      	movs	r0, #18
100115aa:	e000      	b.n	100115ae <gapc_cmp_evt+0xc6>
100115ac:	2000      	movs	r0, #0
100115ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100115b0:	10011485 	.word	0x10011485
100115b4:	100149e1 	.word	0x100149e1

100115b8 <gapc_connection_cfm_handler>:
100115b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100115ba:	b085      	sub	sp, #20
100115bc:	1c1d      	adds	r5, r3, #0
100115be:	ab0a      	add	r3, sp, #40	; 0x28
100115c0:	781b      	ldrb	r3, [r3, #0]
100115c2:	9201      	str	r2, [sp, #4]
100115c4:	9302      	str	r3, [sp, #8]
100115c6:	ab0b      	add	r3, sp, #44	; 0x2c
100115c8:	781b      	ldrb	r3, [r3, #0]
100115ca:	1c07      	adds	r7, r0, #0
100115cc:	9303      	str	r3, [sp, #12]
100115ce:	ab0c      	add	r3, sp, #48	; 0x30
100115d0:	881a      	ldrh	r2, [r3, #0]
100115d2:	2302      	movs	r3, #2
100115d4:	1c0e      	adds	r6, r1, #0
100115d6:	4c23      	ldr	r4, [pc, #140]	; (10011664 <gapc_connection_cfm_handler+0xac>)
100115d8:	1c39      	adds	r1, r7, #0
100115da:	7023      	strb	r3, [r4, #0]
100115dc:	330c      	adds	r3, #12
100115de:	7063      	strb	r3, [r4, #1]
100115e0:	70a3      	strb	r3, [r4, #2]
100115e2:	4b21      	ldr	r3, [pc, #132]	; (10011668 <gapc_connection_cfm_handler+0xb0>)
100115e4:	70e2      	strb	r2, [r4, #3]
100115e6:	881a      	ldrh	r2, [r3, #0]
100115e8:	881b      	ldrh	r3, [r3, #0]
100115ea:	7122      	strb	r2, [r4, #4]
100115ec:	0a1b      	lsrs	r3, r3, #8
100115ee:	4f1f      	ldr	r7, [pc, #124]	; (1001166c <gapc_connection_cfm_handler+0xb4>)
100115f0:	2210      	movs	r2, #16
100115f2:	481f      	ldr	r0, [pc, #124]	; (10011670 <gapc_connection_cfm_handler+0xb8>)
100115f4:	7163      	strb	r3, [r4, #5]
100115f6:	47b8      	blx	r7
100115f8:	0a33      	lsrs	r3, r6, #8
100115fa:	7626      	strb	r6, [r4, #24]
100115fc:	7663      	strb	r3, [r4, #25]
100115fe:	9901      	ldr	r1, [sp, #4]
10011600:	0c33      	lsrs	r3, r6, #16
10011602:	2210      	movs	r2, #16
10011604:	0e36      	lsrs	r6, r6, #24
10011606:	481b      	ldr	r0, [pc, #108]	; (10011674 <gapc_connection_cfm_handler+0xbc>)
10011608:	76a3      	strb	r3, [r4, #26]
1001160a:	76e6      	strb	r6, [r4, #27]
1001160c:	47b8      	blx	r7
1001160e:	1c23      	adds	r3, r4, #0
10011610:	332c      	adds	r3, #44	; 0x2c
10011612:	701d      	strb	r5, [r3, #0]
10011614:	1c23      	adds	r3, r4, #0
10011616:	0a2a      	lsrs	r2, r5, #8
10011618:	332d      	adds	r3, #45	; 0x2d
1001161a:	701a      	strb	r2, [r3, #0]
1001161c:	1c23      	adds	r3, r4, #0
1001161e:	0c2a      	lsrs	r2, r5, #16
10011620:	332e      	adds	r3, #46	; 0x2e
10011622:	701a      	strb	r2, [r3, #0]
10011624:	1c23      	adds	r3, r4, #0
10011626:	0e2d      	lsrs	r5, r5, #24
10011628:	332f      	adds	r3, #47	; 0x2f
1001162a:	466a      	mov	r2, sp
1001162c:	701d      	strb	r5, [r3, #0]
1001162e:	1c23      	adds	r3, r4, #0
10011630:	7a12      	ldrb	r2, [r2, #8]
10011632:	3330      	adds	r3, #48	; 0x30
10011634:	701a      	strb	r2, [r3, #0]
10011636:	1c23      	adds	r3, r4, #0
10011638:	2500      	movs	r5, #0
1001163a:	3331      	adds	r3, #49	; 0x31
1001163c:	466a      	mov	r2, sp
1001163e:	701d      	strb	r5, [r3, #0]
10011640:	1c23      	adds	r3, r4, #0
10011642:	7b12      	ldrb	r2, [r2, #12]
10011644:	3332      	adds	r3, #50	; 0x32
10011646:	701a      	strb	r2, [r3, #0]
10011648:	1c23      	adds	r3, r4, #0
1001164a:	3333      	adds	r3, #51	; 0x33
1001164c:	701d      	strb	r5, [r3, #0]
1001164e:	232c      	movs	r3, #44	; 0x2c
10011650:	1c20      	adds	r0, r4, #0
10011652:	71a3      	strb	r3, [r4, #6]
10011654:	2134      	movs	r1, #52	; 0x34
10011656:	4b08      	ldr	r3, [pc, #32]	; (10011678 <gapc_connection_cfm_handler+0xc0>)
10011658:	71e5      	strb	r5, [r4, #7]
1001165a:	4798      	blx	r3
1001165c:	1c28      	adds	r0, r5, #0
1001165e:	b005      	add	sp, #20
10011660:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011662:	46c0      	nop			; (mov r8, r8)
10011664:	1001a9fc 	.word	0x1001a9fc
10011668:	1001a68c 	.word	0x1001a68c
1001166c:	100149cf 	.word	0x100149cf
10011670:	1001aa04 	.word	0x1001aa04
10011674:	1001aa18 	.word	0x1001aa18
10011678:	100112b5 	.word	0x100112b5

1001167c <gapc_con_req_ind>:
1001167c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001167e:	7845      	ldrb	r5, [r0, #1]
10011680:	7803      	ldrb	r3, [r0, #0]
10011682:	4c30      	ldr	r4, [pc, #192]	; (10011744 <gapc_con_req_ind+0xc8>)
10011684:	022d      	lsls	r5, r5, #8
10011686:	431d      	orrs	r5, r3
10011688:	85a5      	strh	r5, [r4, #44]	; 0x2c
1001168a:	78c3      	ldrb	r3, [r0, #3]
1001168c:	7882      	ldrb	r2, [r0, #2]
1001168e:	b08b      	sub	sp, #44	; 0x2c
10011690:	021b      	lsls	r3, r3, #8
10011692:	431a      	orrs	r2, r3
10011694:	466b      	mov	r3, sp
10011696:	9205      	str	r2, [sp, #20]
10011698:	8a9b      	ldrh	r3, [r3, #20]
1001169a:	2120      	movs	r1, #32
1001169c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1001169e:	7943      	ldrb	r3, [r0, #5]
100116a0:	7902      	ldrb	r2, [r0, #4]
100116a2:	021b      	lsls	r3, r3, #8
100116a4:	431a      	orrs	r2, r3
100116a6:	466b      	mov	r3, sp
100116a8:	9206      	str	r2, [sp, #24]
100116aa:	8b1b      	ldrh	r3, [r3, #24]
100116ac:	1c06      	adds	r6, r0, #0
100116ae:	8623      	strh	r3, [r4, #48]	; 0x30
100116b0:	79c3      	ldrb	r3, [r0, #7]
100116b2:	7982      	ldrb	r2, [r0, #6]
100116b4:	021b      	lsls	r3, r3, #8
100116b6:	431a      	orrs	r2, r3
100116b8:	466b      	mov	r3, sp
100116ba:	9207      	str	r2, [sp, #28]
100116bc:	466a      	mov	r2, sp
100116be:	8b9b      	ldrh	r3, [r3, #28]
100116c0:	1852      	adds	r2, r2, r1
100116c2:	8663      	strh	r3, [r4, #50]	; 0x32
100116c4:	7a43      	ldrb	r3, [r0, #9]
100116c6:	1c01      	adds	r1, r0, #0
100116c8:	9308      	str	r3, [sp, #32]
100116ca:	1c23      	adds	r3, r4, #0
100116cc:	7812      	ldrb	r2, [r2, #0]
100116ce:	3377      	adds	r3, #119	; 0x77
100116d0:	3478      	adds	r4, #120	; 0x78
100116d2:	701a      	strb	r2, [r3, #0]
100116d4:	310a      	adds	r1, #10
100116d6:	2206      	movs	r2, #6
100116d8:	4b1b      	ldr	r3, [pc, #108]	; (10011748 <gapc_con_req_ind+0xcc>)
100116da:	1c20      	adds	r0, r4, #0
100116dc:	4798      	blx	r3
100116de:	7c33      	ldrb	r3, [r6, #16]
100116e0:	9309      	str	r3, [sp, #36]	; 0x24
100116e2:	4b1a      	ldr	r3, [pc, #104]	; (1001174c <gapc_con_req_ind+0xd0>)
100116e4:	4798      	blx	r3
100116e6:	4e1a      	ldr	r6, [pc, #104]	; (10011750 <gapc_con_req_ind+0xd4>)
100116e8:	1e07      	subs	r7, r0, #0
100116ea:	2f07      	cmp	r7, #7
100116ec:	d81b      	bhi.n	10011726 <gapc_con_req_ind+0xaa>
100116ee:	2312      	movs	r3, #18
100116f0:	4343      	muls	r3, r0
100116f2:	18f0      	adds	r0, r6, r3
100116f4:	8145      	strh	r5, [r0, #10]
100116f6:	4669      	mov	r1, sp
100116f8:	2524      	movs	r5, #36	; 0x24
100116fa:	1949      	adds	r1, r1, r5
100116fc:	7809      	ldrb	r1, [r1, #0]
100116fe:	2206      	movs	r2, #6
10011700:	54f1      	strb	r1, [r6, r3]
10011702:	2120      	movs	r1, #32
10011704:	466b      	mov	r3, sp
10011706:	185b      	adds	r3, r3, r1
10011708:	781b      	ldrb	r3, [r3, #0]
1001170a:	1c21      	adds	r1, r4, #0
1001170c:	7043      	strb	r3, [r0, #1]
1001170e:	466b      	mov	r3, sp
10011710:	8a9b      	ldrh	r3, [r3, #20]
10011712:	3002      	adds	r0, #2
10011714:	8143      	strh	r3, [r0, #10]
10011716:	466b      	mov	r3, sp
10011718:	8b1b      	ldrh	r3, [r3, #24]
1001171a:	8183      	strh	r3, [r0, #12]
1001171c:	466b      	mov	r3, sp
1001171e:	8b9b      	ldrh	r3, [r3, #28]
10011720:	81c3      	strh	r3, [r0, #14]
10011722:	4b09      	ldr	r3, [pc, #36]	; (10011748 <gapc_con_req_ind+0xcc>)
10011724:	4798      	blx	r3
10011726:	2112      	movs	r1, #18
10011728:	2300      	movs	r3, #0
1001172a:	434f      	muls	r7, r1
1001172c:	9300      	str	r3, [sp, #0]
1001172e:	9301      	str	r3, [sp, #4]
10011730:	19f6      	adds	r6, r6, r7
10011732:	8971      	ldrh	r1, [r6, #10]
10011734:	4a07      	ldr	r2, [pc, #28]	; (10011754 <gapc_con_req_ind+0xd8>)
10011736:	9102      	str	r1, [sp, #8]
10011738:	1c10      	adds	r0, r2, #0
1001173a:	1c19      	adds	r1, r3, #0
1001173c:	4c06      	ldr	r4, [pc, #24]	; (10011758 <gapc_con_req_ind+0xdc>)
1001173e:	47a0      	blx	r4
10011740:	b00b      	add	sp, #44	; 0x2c
10011742:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011744:	1001a71e 	.word	0x1001a71e
10011748:	100149cf 	.word	0x100149cf
1001174c:	100114c1 	.word	0x100114c1
10011750:	1001a68e 	.word	0x1001a68e
10011754:	100197a8 	.word	0x100197a8
10011758:	100115b9 	.word	0x100115b9

1001175c <gapc_disconnect_cmd_handler>:
1001175c:	2204      	movs	r2, #4
1001175e:	b510      	push	{r4, lr}
10011760:	4b0c      	ldr	r3, [pc, #48]	; (10011794 <gapc_disconnect_cmd_handler+0x38>)
10011762:	2400      	movs	r4, #0
10011764:	701a      	strb	r2, [r3, #0]
10011766:	320a      	adds	r2, #10
10011768:	705a      	strb	r2, [r3, #1]
1001176a:	709a      	strb	r2, [r3, #2]
1001176c:	4a0a      	ldr	r2, [pc, #40]	; (10011798 <gapc_disconnect_cmd_handler+0x3c>)
1001176e:	70d9      	strb	r1, [r3, #3]
10011770:	8811      	ldrh	r1, [r2, #0]
10011772:	8812      	ldrh	r2, [r2, #0]
10011774:	7119      	strb	r1, [r3, #4]
10011776:	0a12      	lsrs	r2, r2, #8
10011778:	715a      	strb	r2, [r3, #5]
1001177a:	2201      	movs	r2, #1
1001177c:	721a      	strb	r2, [r3, #8]
1001177e:	1892      	adds	r2, r2, r2
10011780:	7258      	strb	r0, [r3, #9]
10011782:	719a      	strb	r2, [r3, #6]
10011784:	71dc      	strb	r4, [r3, #7]
10011786:	1c18      	adds	r0, r3, #0
10011788:	210a      	movs	r1, #10
1001178a:	4b04      	ldr	r3, [pc, #16]	; (1001179c <gapc_disconnect_cmd_handler+0x40>)
1001178c:	4798      	blx	r3
1001178e:	1c20      	adds	r0, r4, #0
10011790:	bd10      	pop	{r4, pc}
10011792:	46c0      	nop			; (mov r8, r8)
10011794:	1001a9fc 	.word	0x1001a9fc
10011798:	1001a68c 	.word	0x1001a68c
1001179c:	100112b5 	.word	0x100112b5

100117a0 <gapc_disconnect_ind>:
100117a0:	1c02      	adds	r2, r0, #0
100117a2:	b508      	push	{r3, lr}
100117a4:	7843      	ldrb	r3, [r0, #1]
100117a6:	7800      	ldrb	r0, [r0, #0]
100117a8:	021b      	lsls	r3, r3, #8
100117aa:	4318      	orrs	r0, r3
100117ac:	8008      	strh	r0, [r1, #0]
100117ae:	7893      	ldrb	r3, [r2, #2]
100117b0:	708b      	strb	r3, [r1, #2]
100117b2:	2100      	movs	r1, #0
100117b4:	4b05      	ldr	r3, [pc, #20]	; (100117cc <gapc_disconnect_ind+0x2c>)
100117b6:	4798      	blx	r3
100117b8:	2807      	cmp	r0, #7
100117ba:	d806      	bhi.n	100117ca <gapc_disconnect_ind+0x2a>
100117bc:	2312      	movs	r3, #18
100117be:	4358      	muls	r0, r3
100117c0:	4b03      	ldr	r3, [pc, #12]	; (100117d0 <gapc_disconnect_ind+0x30>)
100117c2:	1818      	adds	r0, r3, r0
100117c4:	2301      	movs	r3, #1
100117c6:	425b      	negs	r3, r3
100117c8:	8143      	strh	r3, [r0, #10]
100117ca:	bd08      	pop	{r3, pc}
100117cc:	10011485 	.word	0x10011485
100117d0:	1001a68e 	.word	0x1001a68e

100117d4 <gapc_bond_cmd_handler>:
100117d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100117d6:	9300      	str	r3, [sp, #0]
100117d8:	2312      	movs	r3, #18
100117da:	1c04      	adds	r4, r0, #0
100117dc:	a808      	add	r0, sp, #32
100117de:	7807      	ldrb	r7, [r0, #0]
100117e0:	a809      	add	r0, sp, #36	; 0x24
100117e2:	7806      	ldrb	r6, [r0, #0]
100117e4:	a80a      	add	r0, sp, #40	; 0x28
100117e6:	7805      	ldrb	r5, [r0, #0]
100117e8:	a80b      	add	r0, sp, #44	; 0x2c
100117ea:	7800      	ldrb	r0, [r0, #0]
100117ec:	9001      	str	r0, [sp, #4]
100117ee:	4810      	ldr	r0, [pc, #64]	; (10011830 <gapc_bond_cmd_handler+0x5c>)
100117f0:	7003      	strb	r3, [r0, #0]
100117f2:	230e      	movs	r3, #14
100117f4:	70c4      	strb	r4, [r0, #3]
100117f6:	4c0f      	ldr	r4, [pc, #60]	; (10011834 <gapc_bond_cmd_handler+0x60>)
100117f8:	7043      	strb	r3, [r0, #1]
100117fa:	7083      	strb	r3, [r0, #2]
100117fc:	8823      	ldrh	r3, [r4, #0]
100117fe:	8824      	ldrh	r4, [r4, #0]
10011800:	7103      	strb	r3, [r0, #4]
10011802:	466b      	mov	r3, sp
10011804:	781b      	ldrb	r3, [r3, #0]
10011806:	0a24      	lsrs	r4, r4, #8
10011808:	72c3      	strb	r3, [r0, #11]
1001180a:	466b      	mov	r3, sp
1001180c:	791b      	ldrb	r3, [r3, #4]
1001180e:	7144      	strb	r4, [r0, #5]
10011810:	73c3      	strb	r3, [r0, #15]
10011812:	2308      	movs	r3, #8
10011814:	7183      	strb	r3, [r0, #6]
10011816:	2300      	movs	r3, #0
10011818:	240a      	movs	r4, #10
1001181a:	7241      	strb	r1, [r0, #9]
1001181c:	71c3      	strb	r3, [r0, #7]
1001181e:	2110      	movs	r1, #16
10011820:	4b05      	ldr	r3, [pc, #20]	; (10011838 <gapc_bond_cmd_handler+0x64>)
10011822:	7307      	strb	r7, [r0, #12]
10011824:	7346      	strb	r6, [r0, #13]
10011826:	7385      	strb	r5, [r0, #14]
10011828:	7204      	strb	r4, [r0, #8]
1001182a:	7282      	strb	r2, [r0, #10]
1001182c:	4798      	blx	r3
1001182e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011830:	1001a9fc 	.word	0x1001a9fc
10011834:	1001a68c 	.word	0x1001a68c
10011838:	100112b5 	.word	0x100112b5

1001183c <gapc_bond_ind>:
1001183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001183e:	780e      	ldrb	r6, [r1, #0]
10011840:	1c03      	adds	r3, r0, #0
10011842:	1eb0      	subs	r0, r6, #2
10011844:	2805      	cmp	r0, #5
10011846:	d85d      	bhi.n	10011904 <gapc_bond_ind+0xc8>
10011848:	1c15      	adds	r5, r2, #0
1001184a:	1c0c      	adds	r4, r1, #0
1001184c:	f001 f9fa 	bl	10012c44 <__gnu_thumb1_case_uqi>
10011850:	2f5a030d 	.word	0x2f5a030d
10011854:	4740      	.short	0x4740
10011856:	2009      	movs	r0, #9
10011858:	2a00      	cmp	r2, #0
1001185a:	d054      	beq.n	10011906 <gapc_bond_ind+0xca>
1001185c:	0a1b      	lsrs	r3, r3, #8
1001185e:	8053      	strh	r3, [r2, #2]
10011860:	788b      	ldrb	r3, [r1, #2]
10011862:	4829      	ldr	r0, [pc, #164]	; (10011908 <gapc_bond_ind+0xcc>)
10011864:	7113      	strb	r3, [r2, #4]
10011866:	2100      	movs	r1, #0
10011868:	e01c      	b.n	100118a4 <gapc_bond_ind+0x68>
1001186a:	2009      	movs	r0, #9
1001186c:	2a00      	cmp	r2, #0
1001186e:	d04a      	beq.n	10011906 <gapc_bond_ind+0xca>
10011870:	4c25      	ldr	r4, [pc, #148]	; (10011908 <gapc_bond_ind+0xcc>)
10011872:	0a1b      	lsrs	r3, r3, #8
10011874:	8053      	strh	r3, [r2, #2]
10011876:	788b      	ldrb	r3, [r1, #2]
10011878:	2700      	movs	r7, #0
1001187a:	1c10      	adds	r0, r2, #0
1001187c:	1c21      	adds	r1, r4, #0
1001187e:	7013      	strb	r3, [r2, #0]
10011880:	4e22      	ldr	r6, [pc, #136]	; (1001190c <gapc_bond_ind+0xd0>)
10011882:	7117      	strb	r7, [r2, #4]
10011884:	312e      	adds	r1, #46	; 0x2e
10011886:	2217      	movs	r2, #23
10011888:	3032      	adds	r0, #50	; 0x32
1001188a:	47b0      	blx	r6
1001188c:	1c28      	adds	r0, r5, #0
1001188e:	1c21      	adds	r1, r4, #0
10011890:	2210      	movs	r2, #16
10011892:	311e      	adds	r1, #30
10011894:	3022      	adds	r0, #34	; 0x22
10011896:	47b0      	blx	r6
10011898:	1ca1      	adds	r1, r4, #2
1001189a:	1da8      	adds	r0, r5, #6
1001189c:	221c      	movs	r2, #28
1001189e:	47b0      	blx	r6
100118a0:	1c20      	adds	r0, r4, #0
100118a2:	1c39      	adds	r1, r7, #0
100118a4:	2246      	movs	r2, #70	; 0x46
100118a6:	4b1a      	ldr	r3, [pc, #104]	; (10011910 <gapc_bond_ind+0xd4>)
100118a8:	4798      	blx	r3
100118aa:	2009      	movs	r0, #9
100118ac:	e02b      	b.n	10011906 <gapc_bond_ind+0xca>
100118ae:	4d16      	ldr	r5, [pc, #88]	; (10011908 <gapc_bond_ind+0xcc>)
100118b0:	3102      	adds	r1, #2
100118b2:	1c28      	adds	r0, r5, #0
100118b4:	2210      	movs	r2, #16
100118b6:	4e15      	ldr	r6, [pc, #84]	; (1001190c <gapc_bond_ind+0xd0>)
100118b8:	302e      	adds	r0, #46	; 0x2e
100118ba:	47b0      	blx	r6
100118bc:	1c28      	adds	r0, r5, #0
100118be:	1c21      	adds	r1, r4, #0
100118c0:	303f      	adds	r0, #63	; 0x3f
100118c2:	3112      	adds	r1, #18
100118c4:	2206      	movs	r2, #6
100118c6:	47b0      	blx	r6
100118c8:	7e23      	ldrb	r3, [r4, #24]
100118ca:	353e      	adds	r5, #62	; 0x3e
100118cc:	702b      	strb	r3, [r5, #0]
100118ce:	e019      	b.n	10011904 <gapc_bond_ind+0xc8>
100118d0:	480d      	ldr	r0, [pc, #52]	; (10011908 <gapc_bond_ind+0xcc>)
100118d2:	3102      	adds	r1, #2
100118d4:	2210      	movs	r2, #16
100118d6:	4b0d      	ldr	r3, [pc, #52]	; (1001190c <gapc_bond_ind+0xd0>)
100118d8:	301e      	adds	r0, #30
100118da:	4798      	blx	r3
100118dc:	e012      	b.n	10011904 <gapc_bond_ind+0xc8>
100118de:	4d0a      	ldr	r5, [pc, #40]	; (10011908 <gapc_bond_ind+0xcc>)
100118e0:	3102      	adds	r1, #2
100118e2:	2210      	movs	r2, #16
100118e4:	4e09      	ldr	r6, [pc, #36]	; (1001190c <gapc_bond_ind+0xd0>)
100118e6:	1ca8      	adds	r0, r5, #2
100118e8:	47b0      	blx	r6
100118ea:	1c28      	adds	r0, r5, #0
100118ec:	1c21      	adds	r1, r4, #0
100118ee:	7ce3      	ldrb	r3, [r4, #19]
100118f0:	7ca2      	ldrb	r2, [r4, #18]
100118f2:	021b      	lsls	r3, r3, #8
100118f4:	4313      	orrs	r3, r2
100118f6:	3014      	adds	r0, #20
100118f8:	3114      	adds	r1, #20
100118fa:	2208      	movs	r2, #8
100118fc:	826b      	strh	r3, [r5, #18]
100118fe:	47b0      	blx	r6
10011900:	7f23      	ldrb	r3, [r4, #28]
10011902:	772b      	strb	r3, [r5, #28]
10011904:	2000      	movs	r0, #0
10011906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011908:	100197d8 	.word	0x100197d8
1001190c:	100149cf 	.word	0x100149cf
10011910:	100149e1 	.word	0x100149e1

10011914 <gapc_bond_req_ind>:
10011914:	b570      	push	{r4, r5, r6, lr}
10011916:	780c      	ldrb	r4, [r1, #0]
10011918:	1c03      	adds	r3, r0, #0
1001191a:	7849      	ldrb	r1, [r1, #1]
1001191c:	2c07      	cmp	r4, #7
1001191e:	d85c      	bhi.n	100119da <gapc_bond_req_ind+0xc6>
10011920:	1c20      	adds	r0, r4, #0
10011922:	f001 f98f 	bl	10012c44 <__gnu_thumb1_case_uqi>
10011926:	5a04      	.short	0x5a04
10011928:	5a0b5a5a 	.word	0x5a0b5a5a
1001192c:	1f1f      	.short	0x1f1f
1001192e:	200a      	movs	r0, #10
10011930:	2a00      	cmp	r2, #0
10011932:	d053      	beq.n	100119dc <gapc_bond_req_ind+0xc8>
10011934:	0a1b      	lsrs	r3, r3, #8
10011936:	8013      	strh	r3, [r2, #0]
10011938:	7091      	strb	r1, [r2, #2]
1001193a:	e04f      	b.n	100119dc <gapc_bond_req_ind+0xc8>
1001193c:	2a00      	cmp	r2, #0
1001193e:	d00b      	beq.n	10011958 <gapc_bond_req_ind+0x44>
10011940:	0a1b      	lsrs	r3, r3, #8
10011942:	8013      	strh	r3, [r2, #0]
10011944:	2900      	cmp	r1, #0
10011946:	d102      	bne.n	1001194e <gapc_bond_req_ind+0x3a>
10011948:	2301      	movs	r3, #1
1001194a:	7093      	strb	r3, [r2, #2]
1001194c:	e004      	b.n	10011958 <gapc_bond_req_ind+0x44>
1001194e:	2300      	movs	r3, #0
10011950:	7093      	strb	r3, [r2, #2]
10011952:	2902      	cmp	r1, #2
10011954:	d102      	bne.n	1001195c <gapc_bond_req_ind+0x48>
10011956:	70d3      	strb	r3, [r2, #3]
10011958:	200c      	movs	r0, #12
1001195a:	e03f      	b.n	100119dc <gapc_bond_req_ind+0xc8>
1001195c:	2901      	cmp	r1, #1
1001195e:	d1fb      	bne.n	10011958 <gapc_bond_req_ind+0x44>
10011960:	70d1      	strb	r1, [r2, #3]
10011962:	e7f9      	b.n	10011958 <gapc_bond_req_ind+0x44>
10011964:	2214      	movs	r2, #20
10011966:	481e      	ldr	r0, [pc, #120]	; (100119e0 <gapc_bond_req_ind+0xcc>)
10011968:	0a1b      	lsrs	r3, r3, #8
1001196a:	70c3      	strb	r3, [r0, #3]
1001196c:	4b1d      	ldr	r3, [pc, #116]	; (100119e4 <gapc_bond_req_ind+0xd0>)
1001196e:	7002      	strb	r2, [r0, #0]
10011970:	3a06      	subs	r2, #6
10011972:	7042      	strb	r2, [r0, #1]
10011974:	7082      	strb	r2, [r0, #2]
10011976:	881a      	ldrh	r2, [r3, #0]
10011978:	881b      	ldrh	r3, [r3, #0]
1001197a:	4e1b      	ldr	r6, [pc, #108]	; (100119e8 <gapc_bond_req_ind+0xd4>)
1001197c:	0a1b      	lsrs	r3, r3, #8
1001197e:	7143      	strb	r3, [r0, #5]
10011980:	2301      	movs	r3, #1
10011982:	7102      	strb	r2, [r0, #4]
10011984:	7204      	strb	r4, [r0, #8]
10011986:	7243      	strb	r3, [r0, #9]
10011988:	1c05      	adds	r5, r0, #0
1001198a:	1c31      	adds	r1, r6, #0
1001198c:	300a      	adds	r0, #10
1001198e:	2c07      	cmp	r4, #7
10011990:	d116      	bne.n	100119c0 <gapc_bond_req_ind+0xac>
10011992:	317e      	adds	r1, #126	; 0x7e
10011994:	2210      	movs	r2, #16
10011996:	4c15      	ldr	r4, [pc, #84]	; (100119ec <gapc_bond_req_ind+0xd8>)
10011998:	47a0      	blx	r4
1001199a:	1c33      	adds	r3, r6, #0
1001199c:	1c31      	adds	r1, r6, #0
1001199e:	1c28      	adds	r0, r5, #0
100119a0:	338e      	adds	r3, #142	; 0x8e
100119a2:	881b      	ldrh	r3, [r3, #0]
100119a4:	3190      	adds	r1, #144	; 0x90
100119a6:	76ab      	strb	r3, [r5, #26]
100119a8:	2208      	movs	r2, #8
100119aa:	0a1b      	lsrs	r3, r3, #8
100119ac:	301c      	adds	r0, #28
100119ae:	76eb      	strb	r3, [r5, #27]
100119b0:	47a0      	blx	r4
100119b2:	1c31      	adds	r1, r6, #0
100119b4:	3198      	adds	r1, #152	; 0x98
100119b6:	780a      	ldrb	r2, [r1, #0]
100119b8:	1d6b      	adds	r3, r5, #5
100119ba:	77da      	strb	r2, [r3, #31]
100119bc:	2125      	movs	r1, #37	; 0x25
100119be:	e004      	b.n	100119ca <gapc_bond_req_ind+0xb6>
100119c0:	319a      	adds	r1, #154	; 0x9a
100119c2:	2210      	movs	r2, #16
100119c4:	4b09      	ldr	r3, [pc, #36]	; (100119ec <gapc_bond_req_ind+0xd8>)
100119c6:	4798      	blx	r3
100119c8:	211a      	movs	r1, #26
100119ca:	1c0b      	adds	r3, r1, #0
100119cc:	2400      	movs	r4, #0
100119ce:	3b08      	subs	r3, #8
100119d0:	71ab      	strb	r3, [r5, #6]
100119d2:	1c28      	adds	r0, r5, #0
100119d4:	4b06      	ldr	r3, [pc, #24]	; (100119f0 <gapc_bond_req_ind+0xdc>)
100119d6:	71ec      	strb	r4, [r5, #7]
100119d8:	4798      	blx	r3
100119da:	2000      	movs	r0, #0
100119dc:	bd70      	pop	{r4, r5, r6, pc}
100119de:	46c0      	nop			; (mov r8, r8)
100119e0:	1001a9fc 	.word	0x1001a9fc
100119e4:	1001a68c 	.word	0x1001a68c
100119e8:	1001a71e 	.word	0x1001a71e
100119ec:	100149cf 	.word	0x100149cf
100119f0:	100112b5 	.word	0x100112b5

100119f4 <gapc_bond_cfm_handler_pair_resp>:
100119f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100119f6:	b085      	sub	sp, #20
100119f8:	1c07      	adds	r7, r0, #0
100119fa:	a80a      	add	r0, sp, #40	; 0x28
100119fc:	7806      	ldrb	r6, [r0, #0]
100119fe:	a80b      	add	r0, sp, #44	; 0x2c
10011a00:	7805      	ldrb	r5, [r0, #0]
10011a02:	a80c      	add	r0, sp, #48	; 0x30
10011a04:	7800      	ldrb	r0, [r0, #0]
10011a06:	2414      	movs	r4, #20
10011a08:	9002      	str	r0, [sp, #8]
10011a0a:	a80d      	add	r0, sp, #52	; 0x34
10011a0c:	7800      	ldrb	r0, [r0, #0]
10011a0e:	9301      	str	r3, [sp, #4]
10011a10:	9003      	str	r0, [sp, #12]
10011a12:	a80e      	add	r0, sp, #56	; 0x38
10011a14:	8800      	ldrh	r0, [r0, #0]
10011a16:	4684      	mov	ip, r0
10011a18:	4812      	ldr	r0, [pc, #72]	; (10011a64 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011a1a:	7004      	strb	r4, [r0, #0]
10011a1c:	3c06      	subs	r4, #6
10011a1e:	7044      	strb	r4, [r0, #1]
10011a20:	7084      	strb	r4, [r0, #2]
10011a22:	4664      	mov	r4, ip
10011a24:	70c4      	strb	r4, [r0, #3]
10011a26:	4c10      	ldr	r4, [pc, #64]	; (10011a68 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011a28:	7247      	strb	r7, [r0, #9]
10011a2a:	8823      	ldrh	r3, [r4, #0]
10011a2c:	8824      	ldrh	r4, [r4, #0]
10011a2e:	7103      	strb	r3, [r0, #4]
10011a30:	466b      	mov	r3, sp
10011a32:	791b      	ldrb	r3, [r3, #4]
10011a34:	0a24      	lsrs	r4, r4, #8
10011a36:	7303      	strb	r3, [r0, #12]
10011a38:	466b      	mov	r3, sp
10011a3a:	7a1b      	ldrb	r3, [r3, #8]
10011a3c:	7144      	strb	r4, [r0, #5]
10011a3e:	73c3      	strb	r3, [r0, #15]
10011a40:	466b      	mov	r3, sp
10011a42:	7b1b      	ldrb	r3, [r3, #12]
10011a44:	2401      	movs	r4, #1
10011a46:	7403      	strb	r3, [r0, #16]
10011a48:	2309      	movs	r3, #9
10011a4a:	7183      	strb	r3, [r0, #6]
10011a4c:	2300      	movs	r3, #0
10011a4e:	7204      	strb	r4, [r0, #8]
10011a50:	7281      	strb	r1, [r0, #10]
10011a52:	72c2      	strb	r2, [r0, #11]
10011a54:	7346      	strb	r6, [r0, #13]
10011a56:	7385      	strb	r5, [r0, #14]
10011a58:	71c3      	strb	r3, [r0, #7]
10011a5a:	2111      	movs	r1, #17
10011a5c:	4b03      	ldr	r3, [pc, #12]	; (10011a6c <gapc_bond_cfm_handler_pair_resp+0x78>)
10011a5e:	4798      	blx	r3
10011a60:	b005      	add	sp, #20
10011a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a64:	1001a9fc 	.word	0x1001a9fc
10011a68:	1001a68c 	.word	0x1001a68c
10011a6c:	100112b5 	.word	0x100112b5

10011a70 <gapc_bond_cfm_handler_key_exch>:
10011a70:	b538      	push	{r3, r4, r5, lr}
10011a72:	2514      	movs	r5, #20
10011a74:	4c0d      	ldr	r4, [pc, #52]	; (10011aac <gapc_bond_cfm_handler_key_exch+0x3c>)
10011a76:	70e3      	strb	r3, [r4, #3]
10011a78:	4b0d      	ldr	r3, [pc, #52]	; (10011ab0 <gapc_bond_cfm_handler_key_exch+0x40>)
10011a7a:	7025      	strb	r5, [r4, #0]
10011a7c:	3d06      	subs	r5, #6
10011a7e:	7065      	strb	r5, [r4, #1]
10011a80:	70a5      	strb	r5, [r4, #2]
10011a82:	881d      	ldrh	r5, [r3, #0]
10011a84:	881b      	ldrh	r3, [r3, #0]
10011a86:	7220      	strb	r0, [r4, #8]
10011a88:	0a1b      	lsrs	r3, r3, #8
10011a8a:	7163      	strb	r3, [r4, #5]
10011a8c:	7261      	strb	r1, [r4, #9]
10011a8e:	4b09      	ldr	r3, [pc, #36]	; (10011ab4 <gapc_bond_cfm_handler_key_exch+0x44>)
10011a90:	1c11      	adds	r1, r2, #0
10011a92:	4809      	ldr	r0, [pc, #36]	; (10011ab8 <gapc_bond_cfm_handler_key_exch+0x48>)
10011a94:	2210      	movs	r2, #16
10011a96:	7125      	strb	r5, [r4, #4]
10011a98:	4798      	blx	r3
10011a9a:	2312      	movs	r3, #18
10011a9c:	71a3      	strb	r3, [r4, #6]
10011a9e:	2300      	movs	r3, #0
10011aa0:	1c20      	adds	r0, r4, #0
10011aa2:	71e3      	strb	r3, [r4, #7]
10011aa4:	211a      	movs	r1, #26
10011aa6:	4b05      	ldr	r3, [pc, #20]	; (10011abc <gapc_bond_cfm_handler_key_exch+0x4c>)
10011aa8:	4798      	blx	r3
10011aaa:	bd38      	pop	{r3, r4, r5, pc}
10011aac:	1001a9fc 	.word	0x1001a9fc
10011ab0:	1001a68c 	.word	0x1001a68c
10011ab4:	100149cf 	.word	0x100149cf
10011ab8:	1001aa06 	.word	0x1001aa06
10011abc:	100112b5 	.word	0x100112b5

10011ac0 <gapc_security_cmd_handler>:
10011ac0:	221a      	movs	r2, #26
10011ac2:	b508      	push	{r3, lr}
10011ac4:	4b0b      	ldr	r3, [pc, #44]	; (10011af4 <gapc_security_cmd_handler+0x34>)
10011ac6:	701a      	strb	r2, [r3, #0]
10011ac8:	3a0c      	subs	r2, #12
10011aca:	705a      	strb	r2, [r3, #1]
10011acc:	709a      	strb	r2, [r3, #2]
10011ace:	4a0a      	ldr	r2, [pc, #40]	; (10011af8 <gapc_security_cmd_handler+0x38>)
10011ad0:	70d8      	strb	r0, [r3, #3]
10011ad2:	8810      	ldrh	r0, [r2, #0]
10011ad4:	8812      	ldrh	r2, [r2, #0]
10011ad6:	7118      	strb	r0, [r3, #4]
10011ad8:	0a12      	lsrs	r2, r2, #8
10011ada:	715a      	strb	r2, [r3, #5]
10011adc:	220c      	movs	r2, #12
10011ade:	721a      	strb	r2, [r3, #8]
10011ae0:	3a0a      	subs	r2, #10
10011ae2:	719a      	strb	r2, [r3, #6]
10011ae4:	2200      	movs	r2, #0
10011ae6:	7259      	strb	r1, [r3, #9]
10011ae8:	71da      	strb	r2, [r3, #7]
10011aea:	1c18      	adds	r0, r3, #0
10011aec:	210a      	movs	r1, #10
10011aee:	4b03      	ldr	r3, [pc, #12]	; (10011afc <gapc_security_cmd_handler+0x3c>)
10011af0:	4798      	blx	r3
10011af2:	bd08      	pop	{r3, pc}
10011af4:	1001a9fc 	.word	0x1001a9fc
10011af8:	1001a68c 	.word	0x1001a68c
10011afc:	100112b5 	.word	0x100112b5

10011b00 <gapc_encrypt_cmd_handler>:
10011b00:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b02:	2500      	movs	r5, #0
10011b04:	b089      	sub	sp, #36	; 0x24
10011b06:	9306      	str	r3, [sp, #24]
10011b08:	ab0e      	add	r3, sp, #56	; 0x38
10011b0a:	781b      	ldrb	r3, [r3, #0]
10011b0c:	1c17      	adds	r7, r2, #0
10011b0e:	9307      	str	r3, [sp, #28]
10011b10:	ab0f      	add	r3, sp, #60	; 0x3c
10011b12:	781b      	ldrb	r3, [r3, #0]
10011b14:	4a19      	ldr	r2, [pc, #100]	; (10011b7c <gapc_encrypt_cmd_handler+0x7c>)
10011b16:	1c06      	adds	r6, r0, #0
10011b18:	9105      	str	r1, [sp, #20]
10011b1a:	9300      	str	r3, [sp, #0]
10011b1c:	9002      	str	r0, [sp, #8]
10011b1e:	1c29      	adds	r1, r5, #0
10011b20:	1c2b      	adds	r3, r5, #0
10011b22:	9501      	str	r5, [sp, #4]
10011b24:	1c10      	adds	r0, r2, #0
10011b26:	4c16      	ldr	r4, [pc, #88]	; (10011b80 <gapc_encrypt_cmd_handler+0x80>)
10011b28:	47a0      	blx	r4
10011b2a:	2316      	movs	r3, #22
10011b2c:	4c15      	ldr	r4, [pc, #84]	; (10011b84 <gapc_encrypt_cmd_handler+0x84>)
10011b2e:	9905      	ldr	r1, [sp, #20]
10011b30:	7023      	strb	r3, [r4, #0]
10011b32:	3b08      	subs	r3, #8
10011b34:	7063      	strb	r3, [r4, #1]
10011b36:	70a3      	strb	r3, [r4, #2]
10011b38:	4b13      	ldr	r3, [pc, #76]	; (10011b88 <gapc_encrypt_cmd_handler+0x88>)
10011b3a:	70e6      	strb	r6, [r4, #3]
10011b3c:	881a      	ldrh	r2, [r3, #0]
10011b3e:	881b      	ldrh	r3, [r3, #0]
10011b40:	7122      	strb	r2, [r4, #4]
10011b42:	0a1b      	lsrs	r3, r3, #8
10011b44:	7163      	strb	r3, [r4, #5]
10011b46:	230b      	movs	r3, #11
10011b48:	4e10      	ldr	r6, [pc, #64]	; (10011b8c <gapc_encrypt_cmd_handler+0x8c>)
10011b4a:	2210      	movs	r2, #16
10011b4c:	4810      	ldr	r0, [pc, #64]	; (10011b90 <gapc_encrypt_cmd_handler+0x90>)
10011b4e:	7223      	strb	r3, [r4, #8]
10011b50:	7265      	strb	r5, [r4, #9]
10011b52:	47b0      	blx	r6
10011b54:	0a3b      	lsrs	r3, r7, #8
10011b56:	9906      	ldr	r1, [sp, #24]
10011b58:	2208      	movs	r2, #8
10011b5a:	480e      	ldr	r0, [pc, #56]	; (10011b94 <gapc_encrypt_cmd_handler+0x94>)
10011b5c:	76e3      	strb	r3, [r4, #27]
10011b5e:	76a7      	strb	r7, [r4, #26]
10011b60:	47b0      	blx	r6
10011b62:	466a      	mov	r2, sp
10011b64:	7f12      	ldrb	r2, [r2, #28]
10011b66:	1d63      	adds	r3, r4, #5
10011b68:	77da      	strb	r2, [r3, #31]
10011b6a:	231d      	movs	r3, #29
10011b6c:	1c20      	adds	r0, r4, #0
10011b6e:	71a3      	strb	r3, [r4, #6]
10011b70:	2125      	movs	r1, #37	; 0x25
10011b72:	4b09      	ldr	r3, [pc, #36]	; (10011b98 <gapc_encrypt_cmd_handler+0x98>)
10011b74:	71e5      	strb	r5, [r4, #7]
10011b76:	4798      	blx	r3
10011b78:	b009      	add	sp, #36	; 0x24
10011b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b7c:	100197b8 	.word	0x100197b8
10011b80:	100115b9 	.word	0x100115b9
10011b84:	1001a9fc 	.word	0x1001a9fc
10011b88:	1001a68c 	.word	0x1001a68c
10011b8c:	100149cf 	.word	0x100149cf
10011b90:	1001aa06 	.word	0x1001aa06
10011b94:	1001aa18 	.word	0x1001aa18
10011b98:	100112b5 	.word	0x100112b5

10011b9c <gapc_encrypt_req_ind>:
10011b9c:	b508      	push	{r3, lr}
10011b9e:	0a00      	lsrs	r0, r0, #8
10011ba0:	8010      	strh	r0, [r2, #0]
10011ba2:	784b      	ldrb	r3, [r1, #1]
10011ba4:	7808      	ldrb	r0, [r1, #0]
10011ba6:	021b      	lsls	r3, r3, #8
10011ba8:	4303      	orrs	r3, r0
10011baa:	8053      	strh	r3, [r2, #2]
10011bac:	1d10      	adds	r0, r2, #4
10011bae:	3102      	adds	r1, #2
10011bb0:	2208      	movs	r2, #8
10011bb2:	4b01      	ldr	r3, [pc, #4]	; (10011bb8 <gapc_encrypt_req_ind+0x1c>)
10011bb4:	4798      	blx	r3
10011bb6:	bd08      	pop	{r3, pc}
10011bb8:	100149cf 	.word	0x100149cf

10011bbc <gapc_encrypt_cfm_handler>:
10011bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011bbe:	2500      	movs	r5, #0
10011bc0:	b087      	sub	sp, #28
10011bc2:	9304      	str	r3, [sp, #16]
10011bc4:	ab0c      	add	r3, sp, #48	; 0x30
10011bc6:	781b      	ldrb	r3, [r3, #0]
10011bc8:	1c17      	adds	r7, r2, #0
10011bca:	4a15      	ldr	r2, [pc, #84]	; (10011c20 <gapc_encrypt_cfm_handler+0x64>)
10011bcc:	1c06      	adds	r6, r0, #0
10011bce:	9305      	str	r3, [sp, #20]
10011bd0:	9100      	str	r1, [sp, #0]
10011bd2:	9002      	str	r0, [sp, #8]
10011bd4:	1c29      	adds	r1, r5, #0
10011bd6:	1c2b      	adds	r3, r5, #0
10011bd8:	9501      	str	r5, [sp, #4]
10011bda:	1c10      	adds	r0, r2, #0
10011bdc:	4c11      	ldr	r4, [pc, #68]	; (10011c24 <gapc_encrypt_cfm_handler+0x68>)
10011bde:	47a0      	blx	r4
10011be0:	2318      	movs	r3, #24
10011be2:	4c11      	ldr	r4, [pc, #68]	; (10011c28 <gapc_encrypt_cfm_handler+0x6c>)
10011be4:	9904      	ldr	r1, [sp, #16]
10011be6:	7023      	strb	r3, [r4, #0]
10011be8:	3b0a      	subs	r3, #10
10011bea:	7063      	strb	r3, [r4, #1]
10011bec:	70a3      	strb	r3, [r4, #2]
10011bee:	4b0f      	ldr	r3, [pc, #60]	; (10011c2c <gapc_encrypt_cfm_handler+0x70>)
10011bf0:	480f      	ldr	r0, [pc, #60]	; (10011c30 <gapc_encrypt_cfm_handler+0x74>)
10011bf2:	881a      	ldrh	r2, [r3, #0]
10011bf4:	881b      	ldrh	r3, [r3, #0]
10011bf6:	7122      	strb	r2, [r4, #4]
10011bf8:	0a1b      	lsrs	r3, r3, #8
10011bfa:	7163      	strb	r3, [r4, #5]
10011bfc:	2210      	movs	r2, #16
10011bfe:	4b0d      	ldr	r3, [pc, #52]	; (10011c34 <gapc_encrypt_cfm_handler+0x78>)
10011c00:	70e6      	strb	r6, [r4, #3]
10011c02:	7227      	strb	r7, [r4, #8]
10011c04:	4798      	blx	r3
10011c06:	466b      	mov	r3, sp
10011c08:	7d1b      	ldrb	r3, [r3, #20]
10011c0a:	1c20      	adds	r0, r4, #0
10011c0c:	7663      	strb	r3, [r4, #25]
10011c0e:	2312      	movs	r3, #18
10011c10:	211a      	movs	r1, #26
10011c12:	71a3      	strb	r3, [r4, #6]
10011c14:	4b08      	ldr	r3, [pc, #32]	; (10011c38 <gapc_encrypt_cfm_handler+0x7c>)
10011c16:	71e5      	strb	r5, [r4, #7]
10011c18:	4798      	blx	r3
10011c1a:	b007      	add	sp, #28
10011c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c1e:	46c0      	nop			; (mov r8, r8)
10011c20:	100197c8 	.word	0x100197c8
10011c24:	100115b9 	.word	0x100115b9
10011c28:	1001a9fc 	.word	0x1001a9fc
10011c2c:	1001a68c 	.word	0x1001a68c
10011c30:	1001aa05 	.word	0x1001aa05
10011c34:	100149cf 	.word	0x100149cf
10011c38:	100112b5 	.word	0x100112b5

10011c3c <gapc_encrypt_ind>:
10011c3c:	780b      	ldrb	r3, [r1, #0]
10011c3e:	0a00      	lsrs	r0, r0, #8
10011c40:	70d3      	strb	r3, [r2, #3]
10011c42:	2300      	movs	r3, #0
10011c44:	8010      	strh	r0, [r2, #0]
10011c46:	7093      	strb	r3, [r2, #2]
10011c48:	4770      	bx	lr
	...

10011c4c <gapc_param_update_cfm_handler>:
10011c4c:	b538      	push	{r3, r4, r5, lr}
10011c4e:	2410      	movs	r4, #16
10011c50:	1c05      	adds	r5, r0, #0
10011c52:	480e      	ldr	r0, [pc, #56]	; (10011c8c <gapc_param_update_cfm_handler+0x40>)
10011c54:	7004      	strb	r4, [r0, #0]
10011c56:	3c02      	subs	r4, #2
10011c58:	7044      	strb	r4, [r0, #1]
10011c5a:	7084      	strb	r4, [r0, #2]
10011c5c:	4c0c      	ldr	r4, [pc, #48]	; (10011c90 <gapc_param_update_cfm_handler+0x44>)
10011c5e:	70c5      	strb	r5, [r0, #3]
10011c60:	8825      	ldrh	r5, [r4, #0]
10011c62:	8824      	ldrh	r4, [r4, #0]
10011c64:	72c3      	strb	r3, [r0, #11]
10011c66:	0a1b      	lsrs	r3, r3, #8
10011c68:	0a24      	lsrs	r4, r4, #8
10011c6a:	7303      	strb	r3, [r0, #12]
10011c6c:	2305      	movs	r3, #5
10011c6e:	7144      	strb	r4, [r0, #5]
10011c70:	2400      	movs	r4, #0
10011c72:	7201      	strb	r1, [r0, #8]
10011c74:	7242      	strb	r2, [r0, #9]
10011c76:	7183      	strb	r3, [r0, #6]
10011c78:	0a12      	lsrs	r2, r2, #8
10011c7a:	210d      	movs	r1, #13
10011c7c:	4b05      	ldr	r3, [pc, #20]	; (10011c94 <gapc_param_update_cfm_handler+0x48>)
10011c7e:	7105      	strb	r5, [r0, #4]
10011c80:	7282      	strb	r2, [r0, #10]
10011c82:	71c4      	strb	r4, [r0, #7]
10011c84:	4798      	blx	r3
10011c86:	1c20      	adds	r0, r4, #0
10011c88:	bd38      	pop	{r3, r4, r5, pc}
10011c8a:	46c0      	nop			; (mov r8, r8)
10011c8c:	1001a9fc 	.word	0x1001a9fc
10011c90:	1001a68c 	.word	0x1001a68c
10011c94:	100112b5 	.word	0x100112b5

10011c98 <gapc_param_updated_ind>:
10011c98:	2300      	movs	r3, #0
10011c9a:	0a00      	lsrs	r0, r0, #8
10011c9c:	8010      	strh	r0, [r2, #0]
10011c9e:	7093      	strb	r3, [r2, #2]
10011ca0:	784b      	ldrb	r3, [r1, #1]
10011ca2:	7808      	ldrb	r0, [r1, #0]
10011ca4:	021b      	lsls	r3, r3, #8
10011ca6:	4303      	orrs	r3, r0
10011ca8:	8093      	strh	r3, [r2, #4]
10011caa:	78cb      	ldrb	r3, [r1, #3]
10011cac:	7888      	ldrb	r0, [r1, #2]
10011cae:	021b      	lsls	r3, r3, #8
10011cb0:	4303      	orrs	r3, r0
10011cb2:	80d3      	strh	r3, [r2, #6]
10011cb4:	794b      	ldrb	r3, [r1, #5]
10011cb6:	7909      	ldrb	r1, [r1, #4]
10011cb8:	021b      	lsls	r3, r3, #8
10011cba:	430b      	orrs	r3, r1
10011cbc:	2007      	movs	r0, #7
10011cbe:	8113      	strh	r3, [r2, #8]
10011cc0:	4770      	bx	lr

10011cc2 <gapc_param_updated_req_ind>:
10011cc2:	0a00      	lsrs	r0, r0, #8
10011cc4:	8010      	strh	r0, [r2, #0]
10011cc6:	784b      	ldrb	r3, [r1, #1]
10011cc8:	7808      	ldrb	r0, [r1, #0]
10011cca:	021b      	lsls	r3, r3, #8
10011ccc:	4303      	orrs	r3, r0
10011cce:	8053      	strh	r3, [r2, #2]
10011cd0:	78cb      	ldrb	r3, [r1, #3]
10011cd2:	7888      	ldrb	r0, [r1, #2]
10011cd4:	021b      	lsls	r3, r3, #8
10011cd6:	4303      	orrs	r3, r0
10011cd8:	8093      	strh	r3, [r2, #4]
10011cda:	794b      	ldrb	r3, [r1, #5]
10011cdc:	7908      	ldrb	r0, [r1, #4]
10011cde:	021b      	lsls	r3, r3, #8
10011ce0:	4303      	orrs	r3, r0
10011ce2:	80d3      	strh	r3, [r2, #6]
10011ce4:	79cb      	ldrb	r3, [r1, #7]
10011ce6:	7989      	ldrb	r1, [r1, #6]
10011ce8:	021b      	lsls	r3, r3, #8
10011cea:	430b      	orrs	r3, r1
10011cec:	2008      	movs	r0, #8
10011cee:	8113      	strh	r3, [r2, #8]
10011cf0:	4770      	bx	lr
	...

10011cf4 <gapc_dev_info_req_ind_handler>:
10011cf4:	b508      	push	{r3, lr}
10011cf6:	1c0b      	adds	r3, r1, #0
10011cf8:	0a01      	lsrs	r1, r0, #8
10011cfa:	8011      	strh	r1, [r2, #0]
10011cfc:	7818      	ldrb	r0, [r3, #0]
10011cfe:	7090      	strb	r0, [r2, #2]
10011d00:	2800      	cmp	r0, #0
10011d02:	d104      	bne.n	10011d0e <gapc_dev_info_req_ind_handler+0x1a>
10011d04:	4b03      	ldr	r3, [pc, #12]	; (10011d14 <gapc_dev_info_req_ind_handler+0x20>)
10011d06:	33aa      	adds	r3, #170	; 0xaa
10011d08:	881b      	ldrh	r3, [r3, #0]
10011d0a:	2b00      	cmp	r3, #0
10011d0c:	d001      	beq.n	10011d12 <gapc_dev_info_req_ind_handler+0x1e>
10011d0e:	4b02      	ldr	r3, [pc, #8]	; (10011d18 <gapc_dev_info_req_ind_handler+0x24>)
10011d10:	4798      	blx	r3
10011d12:	bd08      	pop	{r3, pc}
10011d14:	1001a71e 	.word	0x1001a71e
10011d18:	100113c5 	.word	0x100113c5

10011d1c <gapc_sec_req_ind>:
10011d1c:	0a00      	lsrs	r0, r0, #8
10011d1e:	8010      	strh	r0, [r2, #0]
10011d20:	7809      	ldrb	r1, [r1, #0]
10011d22:	2301      	movs	r3, #1
10011d24:	1c08      	adds	r0, r1, #0
10011d26:	0889      	lsrs	r1, r1, #2
10011d28:	4018      	ands	r0, r3
10011d2a:	400b      	ands	r3, r1
10011d2c:	70d0      	strb	r0, [r2, #3]
10011d2e:	7113      	strb	r3, [r2, #4]
10011d30:	4770      	bx	lr

10011d32 <gapc_sign_counter_ind_handler>:
10011d32:	0a00      	lsrs	r0, r0, #8
10011d34:	8010      	strh	r0, [r2, #0]
10011d36:	784b      	ldrb	r3, [r1, #1]
10011d38:	0218      	lsls	r0, r3, #8
10011d3a:	788b      	ldrb	r3, [r1, #2]
10011d3c:	041b      	lsls	r3, r3, #16
10011d3e:	4303      	orrs	r3, r0
10011d40:	7808      	ldrb	r0, [r1, #0]
10011d42:	4303      	orrs	r3, r0
10011d44:	78c8      	ldrb	r0, [r1, #3]
10011d46:	0600      	lsls	r0, r0, #24
10011d48:	4303      	orrs	r3, r0
10011d4a:	6053      	str	r3, [r2, #4]
10011d4c:	794b      	ldrb	r3, [r1, #5]
10011d4e:	0218      	lsls	r0, r3, #8
10011d50:	798b      	ldrb	r3, [r1, #6]
10011d52:	041b      	lsls	r3, r3, #16
10011d54:	4303      	orrs	r3, r0
10011d56:	7908      	ldrb	r0, [r1, #4]
10011d58:	79c9      	ldrb	r1, [r1, #7]
10011d5a:	4303      	orrs	r3, r0
10011d5c:	0609      	lsls	r1, r1, #24
10011d5e:	430b      	orrs	r3, r1
10011d60:	2000      	movs	r0, #0
10011d62:	6093      	str	r3, [r2, #8]
10011d64:	4770      	bx	lr
	...

10011d68 <gapc_peer_att_info_ind_handler>:
10011d68:	b510      	push	{r4, lr}
10011d6a:	0a00      	lsrs	r0, r0, #8
10011d6c:	8010      	strh	r0, [r2, #0]
10011d6e:	7808      	ldrb	r0, [r1, #0]
10011d70:	7090      	strb	r0, [r2, #2]
10011d72:	788b      	ldrb	r3, [r1, #2]
10011d74:	784c      	ldrb	r4, [r1, #1]
10011d76:	021b      	lsls	r3, r3, #8
10011d78:	4323      	orrs	r3, r4
10011d7a:	8093      	strh	r3, [r2, #4]
10011d7c:	2801      	cmp	r0, #1
10011d7e:	d027      	beq.n	10011dd0 <gapc_peer_att_info_ind_handler+0x68>
10011d80:	2800      	cmp	r0, #0
10011d82:	d017      	beq.n	10011db4 <gapc_peer_att_info_ind_handler+0x4c>
10011d84:	2802      	cmp	r0, #2
10011d86:	d12a      	bne.n	10011dde <gapc_peer_att_info_ind_handler+0x76>
10011d88:	790b      	ldrb	r3, [r1, #4]
10011d8a:	78c8      	ldrb	r0, [r1, #3]
10011d8c:	021b      	lsls	r3, r3, #8
10011d8e:	4303      	orrs	r3, r0
10011d90:	8113      	strh	r3, [r2, #8]
10011d92:	798b      	ldrb	r3, [r1, #6]
10011d94:	7948      	ldrb	r0, [r1, #5]
10011d96:	021b      	lsls	r3, r3, #8
10011d98:	4303      	orrs	r3, r0
10011d9a:	80d3      	strh	r3, [r2, #6]
10011d9c:	7a0b      	ldrb	r3, [r1, #8]
10011d9e:	79c8      	ldrb	r0, [r1, #7]
10011da0:	021b      	lsls	r3, r3, #8
10011da2:	4303      	orrs	r3, r0
10011da4:	8193      	strh	r3, [r2, #12]
10011da6:	7a8b      	ldrb	r3, [r1, #10]
10011da8:	7a49      	ldrb	r1, [r1, #9]
10011daa:	021b      	lsls	r3, r3, #8
10011dac:	430b      	orrs	r3, r1
10011dae:	8153      	strh	r3, [r2, #10]
10011db0:	2306      	movs	r3, #6
10011db2:	e013      	b.n	10011ddc <gapc_peer_att_info_ind_handler+0x74>
10011db4:	1c14      	adds	r4, r2, #0
10011db6:	1c20      	adds	r0, r4, #0
10011db8:	790a      	ldrb	r2, [r1, #4]
10011dba:	78cb      	ldrb	r3, [r1, #3]
10011dbc:	0212      	lsls	r2, r2, #8
10011dbe:	431a      	orrs	r2, r3
10011dc0:	80e2      	strh	r2, [r4, #6]
10011dc2:	4b07      	ldr	r3, [pc, #28]	; (10011de0 <gapc_peer_att_info_ind_handler+0x78>)
10011dc4:	3008      	adds	r0, #8
10011dc6:	3105      	adds	r1, #5
10011dc8:	4798      	blx	r3
10011dca:	2302      	movs	r3, #2
10011dcc:	70a3      	strb	r3, [r4, #2]
10011dce:	e006      	b.n	10011dde <gapc_peer_att_info_ind_handler+0x76>
10011dd0:	790b      	ldrb	r3, [r1, #4]
10011dd2:	78c9      	ldrb	r1, [r1, #3]
10011dd4:	021b      	lsls	r3, r3, #8
10011dd6:	430b      	orrs	r3, r1
10011dd8:	80d3      	strh	r3, [r2, #6]
10011dda:	2305      	movs	r3, #5
10011ddc:	7093      	strb	r3, [r2, #2]
10011dde:	bd10      	pop	{r4, pc}
10011de0:	100149cf 	.word	0x100149cf

10011de4 <gapc_con_channel_map_ind_handler>:
10011de4:	b508      	push	{r3, lr}
10011de6:	2300      	movs	r3, #0
10011de8:	0a00      	lsrs	r0, r0, #8
10011dea:	7013      	strb	r3, [r2, #0]
10011dec:	8050      	strh	r0, [r2, #2]
10011dee:	4b02      	ldr	r3, [pc, #8]	; (10011df8 <gapc_con_channel_map_ind_handler+0x14>)
10011df0:	1d10      	adds	r0, r2, #4
10011df2:	2205      	movs	r2, #5
10011df4:	4798      	blx	r3
10011df6:	bd08      	pop	{r3, pc}
10011df8:	100149cf 	.word	0x100149cf

10011dfc <gapc_lecb_connected>:
10011dfc:	7843      	ldrb	r3, [r0, #1]
10011dfe:	7802      	ldrb	r2, [r0, #0]
10011e00:	021b      	lsls	r3, r3, #8
10011e02:	4313      	orrs	r3, r2
10011e04:	800b      	strh	r3, [r1, #0]
10011e06:	78c3      	ldrb	r3, [r0, #3]
10011e08:	7882      	ldrb	r2, [r0, #2]
10011e0a:	021b      	lsls	r3, r3, #8
10011e0c:	4313      	orrs	r3, r2
10011e0e:	804b      	strh	r3, [r1, #2]
10011e10:	7943      	ldrb	r3, [r0, #5]
10011e12:	7902      	ldrb	r2, [r0, #4]
10011e14:	021b      	lsls	r3, r3, #8
10011e16:	4313      	orrs	r3, r2
10011e18:	808b      	strh	r3, [r1, #4]
10011e1a:	79c3      	ldrb	r3, [r0, #7]
10011e1c:	7982      	ldrb	r2, [r0, #6]
10011e1e:	021b      	lsls	r3, r3, #8
10011e20:	4313      	orrs	r3, r2
10011e22:	80cb      	strh	r3, [r1, #6]
10011e24:	2300      	movs	r3, #0
10011e26:	720b      	strb	r3, [r1, #8]
10011e28:	4770      	bx	lr

10011e2a <gapc_lecb_disconnected>:
10011e2a:	7843      	ldrb	r3, [r0, #1]
10011e2c:	7802      	ldrb	r2, [r0, #0]
10011e2e:	021b      	lsls	r3, r3, #8
10011e30:	4313      	orrs	r3, r2
10011e32:	800b      	strh	r3, [r1, #0]
10011e34:	78c3      	ldrb	r3, [r0, #3]
10011e36:	7882      	ldrb	r2, [r0, #2]
10011e38:	021b      	lsls	r3, r3, #8
10011e3a:	4313      	orrs	r3, r2
10011e3c:	804b      	strh	r3, [r1, #2]
10011e3e:	4770      	bx	lr

10011e40 <gapc_lecb_connect_req_ind>:
10011e40:	7843      	ldrb	r3, [r0, #1]
10011e42:	7802      	ldrb	r2, [r0, #0]
10011e44:	021b      	lsls	r3, r3, #8
10011e46:	4313      	orrs	r3, r2
10011e48:	800b      	strh	r3, [r1, #0]
10011e4a:	78c3      	ldrb	r3, [r0, #3]
10011e4c:	7882      	ldrb	r2, [r0, #2]
10011e4e:	021b      	lsls	r3, r3, #8
10011e50:	4313      	orrs	r3, r2
10011e52:	804b      	strh	r3, [r1, #2]
10011e54:	7943      	ldrb	r3, [r0, #5]
10011e56:	7902      	ldrb	r2, [r0, #4]
10011e58:	021b      	lsls	r3, r3, #8
10011e5a:	4313      	orrs	r3, r2
10011e5c:	808b      	strh	r3, [r1, #4]
10011e5e:	79c3      	ldrb	r3, [r0, #7]
10011e60:	7982      	ldrb	r2, [r0, #6]
10011e62:	021b      	lsls	r3, r3, #8
10011e64:	4313      	orrs	r3, r2
10011e66:	80cb      	strh	r3, [r1, #6]
10011e68:	4770      	bx	lr

10011e6a <gapc_lecb_add_credit_resp_handler>:
10011e6a:	7843      	ldrb	r3, [r0, #1]
10011e6c:	7802      	ldrb	r2, [r0, #0]
10011e6e:	021b      	lsls	r3, r3, #8
10011e70:	4313      	orrs	r3, r2
10011e72:	800b      	strh	r3, [r1, #0]
10011e74:	78c3      	ldrb	r3, [r0, #3]
10011e76:	7882      	ldrb	r2, [r0, #2]
10011e78:	021b      	lsls	r3, r3, #8
10011e7a:	4313      	orrs	r3, r2
10011e7c:	804b      	strh	r3, [r1, #2]
10011e7e:	7943      	ldrb	r3, [r0, #5]
10011e80:	7902      	ldrb	r2, [r0, #4]
10011e82:	021b      	lsls	r3, r3, #8
10011e84:	4313      	orrs	r3, r2
10011e86:	808b      	strh	r3, [r1, #4]
10011e88:	4770      	bx	lr
	...

10011e8c <gapm_reset_req_handler>:
10011e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011e8e:	466b      	mov	r3, sp
10011e90:	4915      	ldr	r1, [pc, #84]	; (10011ee8 <gapm_reset_req_handler+0x5c>)
10011e92:	4816      	ldr	r0, [pc, #88]	; (10011eec <gapm_reset_req_handler+0x60>)
10011e94:	880c      	ldrh	r4, [r1, #0]
10011e96:	8809      	ldrh	r1, [r1, #0]
10011e98:	1ddd      	adds	r5, r3, #7
10011e9a:	0a09      	lsrs	r1, r1, #8
10011e9c:	2300      	movs	r3, #0
10011e9e:	2202      	movs	r2, #2
10011ea0:	7141      	strb	r1, [r0, #5]
10011ea2:	26d0      	movs	r6, #208	; 0xd0
10011ea4:	2101      	movs	r1, #1
10011ea6:	7104      	strb	r4, [r0, #4]
10011ea8:	4c11      	ldr	r4, [pc, #68]	; (10011ef0 <gapm_reset_req_handler+0x64>)
10011eaa:	702b      	strb	r3, [r5, #0]
10011eac:	7002      	strb	r2, [r0, #0]
10011eae:	70c3      	strb	r3, [r0, #3]
10011eb0:	320b      	adds	r2, #11
10011eb2:	7201      	strb	r1, [r0, #8]
10011eb4:	7181      	strb	r1, [r0, #6]
10011eb6:	71c3      	strb	r3, [r0, #7]
10011eb8:	3108      	adds	r1, #8
10011eba:	4b0e      	ldr	r3, [pc, #56]	; (10011ef4 <gapm_reset_req_handler+0x68>)
10011ebc:	0136      	lsls	r6, r6, #4
10011ebe:	7042      	strb	r2, [r0, #1]
10011ec0:	7082      	strb	r2, [r0, #2]
10011ec2:	80a2      	strh	r2, [r4, #4]
10011ec4:	8026      	strh	r6, [r4, #0]
10011ec6:	4798      	blx	r3
10011ec8:	1c28      	adds	r0, r5, #0
10011eca:	4b0b      	ldr	r3, [pc, #44]	; (10011ef8 <gapm_reset_req_handler+0x6c>)
10011ecc:	4798      	blx	r3
10011ece:	782b      	ldrb	r3, [r5, #0]
10011ed0:	20e2      	movs	r0, #226	; 0xe2
10011ed2:	2b00      	cmp	r3, #0
10011ed4:	d106      	bne.n	10011ee4 <gapm_reset_req_handler+0x58>
10011ed6:	68a3      	ldr	r3, [r4, #8]
10011ed8:	20e2      	movs	r0, #226	; 0xe2
10011eda:	781a      	ldrb	r2, [r3, #0]
10011edc:	785b      	ldrb	r3, [r3, #1]
10011ede:	2a01      	cmp	r2, #1
10011ee0:	d100      	bne.n	10011ee4 <gapm_reset_req_handler+0x58>
10011ee2:	1c18      	adds	r0, r3, #0
10011ee4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011ee6:	46c0      	nop			; (mov r8, r8)
10011ee8:	1001a68c 	.word	0x1001a68c
10011eec:	1001a9fc 	.word	0x1001a9fc
10011ef0:	1001a680 	.word	0x1001a680
10011ef4:	100112b5 	.word	0x100112b5
10011ef8:	10011319 	.word	0x10011319

10011efc <gapm_set_dev_config_cmd_handler>:
10011efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011efe:	b089      	sub	sp, #36	; 0x24
10011f00:	9303      	str	r3, [sp, #12]
10011f02:	ab0e      	add	r3, sp, #56	; 0x38
10011f04:	781b      	ldrb	r3, [r3, #0]
10011f06:	4c37      	ldr	r4, [pc, #220]	; (10011fe4 <gapm_set_dev_config_cmd_handler+0xe8>)
10011f08:	9304      	str	r3, [sp, #16]
10011f0a:	ab0f      	add	r3, sp, #60	; 0x3c
10011f0c:	781b      	ldrb	r3, [r3, #0]
10011f0e:	270d      	movs	r7, #13
10011f10:	9305      	str	r3, [sp, #20]
10011f12:	ab10      	add	r3, sp, #64	; 0x40
10011f14:	881b      	ldrh	r3, [r3, #0]
10011f16:	72a1      	strb	r1, [r4, #10]
10011f18:	9300      	str	r3, [sp, #0]
10011f1a:	ab11      	add	r3, sp, #68	; 0x44
10011f1c:	881b      	ldrh	r3, [r3, #0]
10011f1e:	0a09      	lsrs	r1, r1, #8
10011f20:	9301      	str	r3, [sp, #4]
10011f22:	ab12      	add	r3, sp, #72	; 0x48
10011f24:	881b      	ldrh	r3, [r3, #0]
10011f26:	7260      	strb	r0, [r4, #9]
10011f28:	9302      	str	r3, [sp, #8]
10011f2a:	ab06      	add	r3, sp, #24
10011f2c:	1dde      	adds	r6, r3, #7
10011f2e:	2300      	movs	r3, #0
10011f30:	7033      	strb	r3, [r6, #0]
10011f32:	2304      	movs	r3, #4
10011f34:	7023      	strb	r3, [r4, #0]
10011f36:	2300      	movs	r3, #0
10011f38:	70e3      	strb	r3, [r4, #3]
10011f3a:	4b2b      	ldr	r3, [pc, #172]	; (10011fe8 <gapm_set_dev_config_cmd_handler+0xec>)
10011f3c:	72e1      	strb	r1, [r4, #11]
10011f3e:	881d      	ldrh	r5, [r3, #0]
10011f40:	881b      	ldrh	r3, [r3, #0]
10011f42:	1c11      	adds	r1, r2, #0
10011f44:	0a1b      	lsrs	r3, r3, #8
10011f46:	7163      	strb	r3, [r4, #5]
10011f48:	2303      	movs	r3, #3
10011f4a:	7125      	strb	r5, [r4, #4]
10011f4c:	2206      	movs	r2, #6
10011f4e:	4d27      	ldr	r5, [pc, #156]	; (10011fec <gapm_set_dev_config_cmd_handler+0xf0>)
10011f50:	4827      	ldr	r0, [pc, #156]	; (10011ff0 <gapm_set_dev_config_cmd_handler+0xf4>)
10011f52:	7223      	strb	r3, [r4, #8]
10011f54:	7067      	strb	r7, [r4, #1]
10011f56:	70a7      	strb	r7, [r4, #2]
10011f58:	47a8      	blx	r5
10011f5a:	9903      	ldr	r1, [sp, #12]
10011f5c:	2210      	movs	r2, #16
10011f5e:	4825      	ldr	r0, [pc, #148]	; (10011ff4 <gapm_set_dev_config_cmd_handler+0xf8>)
10011f60:	47a8      	blx	r5
10011f62:	466a      	mov	r2, sp
10011f64:	7c12      	ldrb	r2, [r2, #16]
10011f66:	1ce3      	adds	r3, r4, #3
10011f68:	77da      	strb	r2, [r3, #31]
10011f6a:	466a      	mov	r2, sp
10011f6c:	7d12      	ldrb	r2, [r2, #20]
10011f6e:	1d23      	adds	r3, r4, #4
10011f70:	77da      	strb	r2, [r3, #31]
10011f72:	466a      	mov	r2, sp
10011f74:	7812      	ldrb	r2, [r2, #0]
10011f76:	1d63      	adds	r3, r4, #5
10011f78:	77da      	strb	r2, [r3, #31]
10011f7a:	9b00      	ldr	r3, [sp, #0]
10011f7c:	1da2      	adds	r2, r4, #6
10011f7e:	0a1b      	lsrs	r3, r3, #8
10011f80:	77d3      	strb	r3, [r2, #31]
10011f82:	466a      	mov	r2, sp
10011f84:	7912      	ldrb	r2, [r2, #4]
10011f86:	1de3      	adds	r3, r4, #7
10011f88:	77da      	strb	r2, [r3, #31]
10011f8a:	1c22      	adds	r2, r4, #0
10011f8c:	9b01      	ldr	r3, [sp, #4]
10011f8e:	3208      	adds	r2, #8
10011f90:	0a1b      	lsrs	r3, r3, #8
10011f92:	77d3      	strb	r3, [r2, #31]
10011f94:	466a      	mov	r2, sp
10011f96:	1c23      	adds	r3, r4, #0
10011f98:	7a12      	ldrb	r2, [r2, #8]
10011f9a:	3328      	adds	r3, #40	; 0x28
10011f9c:	701a      	strb	r2, [r3, #0]
10011f9e:	1c22      	adds	r2, r4, #0
10011fa0:	9b02      	ldr	r3, [sp, #8]
10011fa2:	3229      	adds	r2, #41	; 0x29
10011fa4:	0a1b      	lsrs	r3, r3, #8
10011fa6:	7013      	strb	r3, [r2, #0]
10011fa8:	23d0      	movs	r3, #208	; 0xd0
10011faa:	4d13      	ldr	r5, [pc, #76]	; (10011ff8 <gapm_set_dev_config_cmd_handler+0xfc>)
10011fac:	011b      	lsls	r3, r3, #4
10011fae:	802b      	strh	r3, [r5, #0]
10011fb0:	2322      	movs	r3, #34	; 0x22
10011fb2:	71a3      	strb	r3, [r4, #6]
10011fb4:	2300      	movs	r3, #0
10011fb6:	212a      	movs	r1, #42	; 0x2a
10011fb8:	71e3      	strb	r3, [r4, #7]
10011fba:	1c20      	adds	r0, r4, #0
10011fbc:	4b0f      	ldr	r3, [pc, #60]	; (10011ffc <gapm_set_dev_config_cmd_handler+0x100>)
10011fbe:	80af      	strh	r7, [r5, #4]
10011fc0:	4798      	blx	r3
10011fc2:	1c30      	adds	r0, r6, #0
10011fc4:	4b0e      	ldr	r3, [pc, #56]	; (10012000 <gapm_set_dev_config_cmd_handler+0x104>)
10011fc6:	4798      	blx	r3
10011fc8:	7833      	ldrb	r3, [r6, #0]
10011fca:	20e2      	movs	r0, #226	; 0xe2
10011fcc:	2b00      	cmp	r3, #0
10011fce:	d106      	bne.n	10011fde <gapm_set_dev_config_cmd_handler+0xe2>
10011fd0:	68ab      	ldr	r3, [r5, #8]
10011fd2:	20e2      	movs	r0, #226	; 0xe2
10011fd4:	781a      	ldrb	r2, [r3, #0]
10011fd6:	785b      	ldrb	r3, [r3, #1]
10011fd8:	2a03      	cmp	r2, #3
10011fda:	d100      	bne.n	10011fde <gapm_set_dev_config_cmd_handler+0xe2>
10011fdc:	1c18      	adds	r0, r3, #0
10011fde:	b009      	add	sp, #36	; 0x24
10011fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011fe2:	46c0      	nop			; (mov r8, r8)
10011fe4:	1001a9fc 	.word	0x1001a9fc
10011fe8:	1001a68c 	.word	0x1001a68c
10011fec:	100149cf 	.word	0x100149cf
10011ff0:	1001aa08 	.word	0x1001aa08
10011ff4:	1001aa0e 	.word	0x1001aa0e
10011ff8:	1001a680 	.word	0x1001a680
10011ffc:	100112b5 	.word	0x100112b5
10012000:	10011319 	.word	0x10011319

10012004 <gapm_get_dev_config_cmd_handler>:
10012004:	4684      	mov	ip, r0
10012006:	4663      	mov	r3, ip
10012008:	b5f0      	push	{r4, r5, r6, r7, lr}
1001200a:	b085      	sub	sp, #20
1001200c:	9100      	str	r1, [sp, #0]
1001200e:	20cf      	movs	r0, #207	; 0xcf
10012010:	2b01      	cmp	r3, #1
10012012:	d854      	bhi.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
10012014:	2900      	cmp	r1, #0
10012016:	d052      	beq.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
10012018:	2200      	movs	r2, #0
1001201a:	492a      	ldr	r1, [pc, #168]	; (100120c4 <gapm_get_dev_config_cmd_handler+0xc0>)
1001201c:	ab02      	add	r3, sp, #8
1001201e:	880c      	ldrh	r4, [r1, #0]
10012020:	8809      	ldrh	r1, [r1, #0]
10012022:	1d9f      	adds	r7, r3, #6
10012024:	719a      	strb	r2, [r3, #6]
10012026:	4b28      	ldr	r3, [pc, #160]	; (100120c8 <gapm_get_dev_config_cmd_handler+0xc4>)
10012028:	0a09      	lsrs	r1, r1, #8
1001202a:	250d      	movs	r5, #13
1001202c:	2606      	movs	r6, #6
1001202e:	7159      	strb	r1, [r3, #5]
10012030:	4661      	mov	r1, ip
10012032:	701e      	strb	r6, [r3, #0]
10012034:	705d      	strb	r5, [r3, #1]
10012036:	709d      	strb	r5, [r3, #2]
10012038:	70da      	strb	r2, [r3, #3]
1001203a:	711c      	strb	r4, [r3, #4]
1001203c:	2901      	cmp	r1, #1
1001203e:	d13e      	bne.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
10012040:	21d0      	movs	r1, #208	; 0xd0
10012042:	4c22      	ldr	r4, [pc, #136]	; (100120cc <gapm_get_dev_config_cmd_handler+0xc8>)
10012044:	0109      	lsls	r1, r1, #4
10012046:	8061      	strh	r1, [r4, #2]
10012048:	4921      	ldr	r1, [pc, #132]	; (100120d0 <gapm_get_dev_config_cmd_handler+0xcc>)
1001204a:	71da      	strb	r2, [r3, #7]
1001204c:	8021      	strh	r1, [r4, #0]
1001204e:	4661      	mov	r1, ip
10012050:	721e      	strb	r6, [r3, #8]
10012052:	7199      	strb	r1, [r3, #6]
10012054:	1c18      	adds	r0, r3, #0
10012056:	2109      	movs	r1, #9
10012058:	4b1e      	ldr	r3, [pc, #120]	; (100120d4 <gapm_get_dev_config_cmd_handler+0xd0>)
1001205a:	80a5      	strh	r5, [r4, #4]
1001205c:	4798      	blx	r3
1001205e:	1c38      	adds	r0, r7, #0
10012060:	4b1d      	ldr	r3, [pc, #116]	; (100120d8 <gapm_get_dev_config_cmd_handler+0xd4>)
10012062:	4798      	blx	r3
10012064:	783b      	ldrb	r3, [r7, #0]
10012066:	20e2      	movs	r0, #226	; 0xe2
10012068:	9301      	str	r3, [sp, #4]
1001206a:	2b00      	cmp	r3, #0
1001206c:	d127      	bne.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
1001206e:	8821      	ldrh	r1, [r4, #0]
10012070:	4a1a      	ldr	r2, [pc, #104]	; (100120dc <gapm_get_dev_config_cmd_handler+0xd8>)
10012072:	68a7      	ldr	r7, [r4, #8]
10012074:	3b01      	subs	r3, #1
10012076:	4291      	cmp	r1, r2
10012078:	d001      	beq.n	1001207e <gapm_get_dev_config_cmd_handler+0x7a>
1001207a:	8023      	strh	r3, [r4, #0]
1001207c:	e01a      	b.n	100120b4 <gapm_get_dev_config_cmd_handler+0xb0>
1001207e:	8063      	strh	r3, [r4, #2]
10012080:	9b00      	ldr	r3, [sp, #0]
10012082:	1c39      	adds	r1, r7, #0
10012084:	1c58      	adds	r0, r3, #1
10012086:	1c32      	adds	r2, r6, #0
10012088:	4b15      	ldr	r3, [pc, #84]	; (100120e0 <gapm_get_dev_config_cmd_handler+0xdc>)
1001208a:	4798      	blx	r3
1001208c:	79bb      	ldrb	r3, [r7, #6]
1001208e:	9a00      	ldr	r2, [sp, #0]
10012090:	7013      	strb	r3, [r2, #0]
10012092:	23d0      	movs	r3, #208	; 0xd0
10012094:	011b      	lsls	r3, r3, #4
10012096:	8023      	strh	r3, [r4, #0]
10012098:	ab02      	add	r3, sp, #8
1001209a:	80a5      	strh	r5, [r4, #4]
1001209c:	1ddd      	adds	r5, r3, #7
1001209e:	466b      	mov	r3, sp
100120a0:	791b      	ldrb	r3, [r3, #4]
100120a2:	1c28      	adds	r0, r5, #0
100120a4:	702b      	strb	r3, [r5, #0]
100120a6:	4b0c      	ldr	r3, [pc, #48]	; (100120d8 <gapm_get_dev_config_cmd_handler+0xd4>)
100120a8:	4798      	blx	r3
100120aa:	782b      	ldrb	r3, [r5, #0]
100120ac:	20d0      	movs	r0, #208	; 0xd0
100120ae:	2b00      	cmp	r3, #0
100120b0:	d105      	bne.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
100120b2:	68a7      	ldr	r7, [r4, #8]
100120b4:	783b      	ldrb	r3, [r7, #0]
100120b6:	7878      	ldrb	r0, [r7, #1]
100120b8:	2b06      	cmp	r3, #6
100120ba:	d000      	beq.n	100120be <gapm_get_dev_config_cmd_handler+0xba>
100120bc:	20e2      	movs	r0, #226	; 0xe2
100120be:	b005      	add	sp, #20
100120c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120c2:	46c0      	nop			; (mov r8, r8)
100120c4:	1001a68c 	.word	0x1001a68c
100120c8:	1001a9fc 	.word	0x1001a9fc
100120cc:	1001a680 	.word	0x1001a680
100120d0:	00000d08 	.word	0x00000d08
100120d4:	100112b5 	.word	0x100112b5
100120d8:	10011319 	.word	0x10011319
100120dc:	0000ffff 	.word	0x0000ffff
100120e0:	100149cf 	.word	0x100149cf

100120e4 <gapm_cancel_cmd_handler>:
100120e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
100120e6:	4916      	ldr	r1, [pc, #88]	; (10012140 <gapm_cancel_cmd_handler+0x5c>)
100120e8:	4816      	ldr	r0, [pc, #88]	; (10012144 <gapm_cancel_cmd_handler+0x60>)
100120ea:	880c      	ldrh	r4, [r1, #0]
100120ec:	8809      	ldrh	r1, [r1, #0]
100120ee:	466b      	mov	r3, sp
100120f0:	0a09      	lsrs	r1, r1, #8
100120f2:	7141      	strb	r1, [r0, #5]
100120f4:	2102      	movs	r1, #2
100120f6:	2203      	movs	r2, #3
100120f8:	7201      	strb	r1, [r0, #8]
100120fa:	21d0      	movs	r1, #208	; 0xd0
100120fc:	1ddd      	adds	r5, r3, #7
100120fe:	2300      	movs	r3, #0
10012100:	7104      	strb	r4, [r0, #4]
10012102:	4c11      	ldr	r4, [pc, #68]	; (10012148 <gapm_cancel_cmd_handler+0x64>)
10012104:	7002      	strb	r2, [r0, #0]
10012106:	0109      	lsls	r1, r1, #4
10012108:	320a      	adds	r2, #10
1001210a:	702b      	strb	r3, [r5, #0]
1001210c:	7042      	strb	r2, [r0, #1]
1001210e:	7082      	strb	r2, [r0, #2]
10012110:	70c3      	strb	r3, [r0, #3]
10012112:	8021      	strh	r1, [r4, #0]
10012114:	80a2      	strh	r2, [r4, #4]
10012116:	71c3      	strb	r3, [r0, #7]
10012118:	3a0c      	subs	r2, #12
1001211a:	2109      	movs	r1, #9
1001211c:	4b0b      	ldr	r3, [pc, #44]	; (1001214c <gapm_cancel_cmd_handler+0x68>)
1001211e:	7182      	strb	r2, [r0, #6]
10012120:	4798      	blx	r3
10012122:	1c28      	adds	r0, r5, #0
10012124:	4b0a      	ldr	r3, [pc, #40]	; (10012150 <gapm_cancel_cmd_handler+0x6c>)
10012126:	4798      	blx	r3
10012128:	7828      	ldrb	r0, [r5, #0]
1001212a:	2800      	cmp	r0, #0
1001212c:	d001      	beq.n	10012132 <gapm_cancel_cmd_handler+0x4e>
1001212e:	20e2      	movs	r0, #226	; 0xe2
10012130:	e004      	b.n	1001213c <gapm_cancel_cmd_handler+0x58>
10012132:	68a3      	ldr	r3, [r4, #8]
10012134:	785b      	ldrb	r3, [r3, #1]
10012136:	2b44      	cmp	r3, #68	; 0x44
10012138:	d000      	beq.n	1001213c <gapm_cancel_cmd_handler+0x58>
1001213a:	1c18      	adds	r0, r3, #0
1001213c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001213e:	46c0      	nop			; (mov r8, r8)
10012140:	1001a68c 	.word	0x1001a68c
10012144:	1001a9fc 	.word	0x1001a9fc
10012148:	1001a680 	.word	0x1001a680
1001214c:	100112b5 	.word	0x100112b5
10012150:	10011319 	.word	0x10011319

10012154 <gapm_dev_bdaddr_ind_handler>:
10012154:	b538      	push	{r3, r4, r5, lr}
10012156:	1c05      	adds	r5, r0, #0
10012158:	1c0c      	adds	r4, r1, #0
1001215a:	1c48      	adds	r0, r1, #1
1001215c:	2206      	movs	r2, #6
1001215e:	1c29      	adds	r1, r5, #0
10012160:	4b02      	ldr	r3, [pc, #8]	; (1001216c <gapm_dev_bdaddr_ind_handler+0x18>)
10012162:	4798      	blx	r3
10012164:	79ab      	ldrb	r3, [r5, #6]
10012166:	2000      	movs	r0, #0
10012168:	7023      	strb	r3, [r4, #0]
1001216a:	bd38      	pop	{r3, r4, r5, pc}
1001216c:	100149cf 	.word	0x100149cf

10012170 <gapm_cmp_evt>:
10012170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012172:	7803      	ldrb	r3, [r0, #0]
10012174:	7845      	ldrb	r5, [r0, #1]
10012176:	3b0c      	subs	r3, #12
10012178:	1e18      	subs	r0, r3, #0
1001217a:	280b      	cmp	r0, #11
1001217c:	d900      	bls.n	10012180 <gapm_cmp_evt+0x10>
1001217e:	e08d      	b.n	1001229c <gapm_cmp_evt+0x12c>
10012180:	1c0c      	adds	r4, r1, #0
10012182:	f000 fd5f 	bl	10012c44 <__gnu_thumb1_case_uqi>
10012186:	1952      	.short	0x1952
10012188:	068b1919 	.word	0x068b1919
1001218c:	8b595906 	.word	0x8b595906
10012190:	0d8b      	.short	0x0d8b
10012192:	2300      	movs	r3, #0
10012194:	2d45      	cmp	r5, #69	; 0x45
10012196:	d000      	beq.n	1001219a <gapm_cmp_evt+0x2a>
10012198:	1c2b      	adds	r3, r5, #0
1001219a:	7023      	strb	r3, [r4, #0]
1001219c:	2002      	movs	r0, #2
1001219e:	e07e      	b.n	1001229e <gapm_cmp_evt+0x12e>
100121a0:	203b      	movs	r0, #59	; 0x3b
100121a2:	2d00      	cmp	r5, #0
100121a4:	d100      	bne.n	100121a8 <gapm_cmp_evt+0x38>
100121a6:	e07a      	b.n	1001229e <gapm_cmp_evt+0x12e>
100121a8:	700d      	strb	r5, [r1, #0]
100121aa:	1c48      	adds	r0, r1, #1
100121ac:	2210      	movs	r2, #16
100121ae:	2100      	movs	r1, #0
100121b0:	4b3b      	ldr	r3, [pc, #236]	; (100122a0 <gapm_cmp_evt+0x130>)
100121b2:	4798      	blx	r3
100121b4:	200f      	movs	r0, #15
100121b6:	e072      	b.n	1001229e <gapm_cmp_evt+0x12e>
100121b8:	2d00      	cmp	r5, #0
100121ba:	d134      	bne.n	10012226 <gapm_cmp_evt+0xb6>
100121bc:	4b39      	ldr	r3, [pc, #228]	; (100122a4 <gapm_cmp_evt+0x134>)
100121be:	4798      	blx	r3
100121c0:	1e43      	subs	r3, r0, #1
100121c2:	b2db      	uxtb	r3, r3
100121c4:	1c28      	adds	r0, r5, #0
100121c6:	2b06      	cmp	r3, #6
100121c8:	d869      	bhi.n	1001229e <gapm_cmp_evt+0x12e>
100121ca:	466b      	mov	r3, sp
100121cc:	4e36      	ldr	r6, [pc, #216]	; (100122a8 <gapm_cmp_evt+0x138>)
100121ce:	1dd9      	adds	r1, r3, #7
100121d0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100121d2:	4b36      	ldr	r3, [pc, #216]	; (100122ac <gapm_cmp_evt+0x13c>)
100121d4:	4798      	blx	r3
100121d6:	2312      	movs	r3, #18
100121d8:	4358      	muls	r0, r3
100121da:	4935      	ldr	r1, [pc, #212]	; (100122b0 <gapm_cmp_evt+0x140>)
100121dc:	1809      	adds	r1, r1, r0
100121de:	1c0b      	adds	r3, r1, #0
100121e0:	894a      	ldrh	r2, [r1, #10]
100121e2:	3308      	adds	r3, #8
100121e4:	8122      	strh	r2, [r4, #8]
100121e6:	784f      	ldrb	r7, [r1, #1]
100121e8:	72a5      	strb	r5, [r4, #10]
100121ea:	7027      	strb	r7, [r4, #0]
100121ec:	898a      	ldrh	r2, [r1, #12]
100121ee:	1c60      	adds	r0, r4, #1
100121f0:	81a2      	strh	r2, [r4, #12]
100121f2:	88db      	ldrh	r3, [r3, #6]
100121f4:	3102      	adds	r1, #2
100121f6:	81e3      	strh	r3, [r4, #14]
100121f8:	89cb      	ldrh	r3, [r1, #14]
100121fa:	2206      	movs	r2, #6
100121fc:	8223      	strh	r3, [r4, #16]
100121fe:	4b2d      	ldr	r3, [pc, #180]	; (100122b4 <gapm_cmp_evt+0x144>)
10012200:	4798      	blx	r3
10012202:	2f00      	cmp	r7, #0
10012204:	d00a      	beq.n	1001221c <gapm_cmp_evt+0xac>
10012206:	79a3      	ldrb	r3, [r4, #6]
10012208:	223f      	movs	r2, #63	; 0x3f
1001220a:	1c19      	adds	r1, r3, #0
1001220c:	3501      	adds	r5, #1
1001220e:	4391      	bics	r1, r2
10012210:	29c0      	cmp	r1, #192	; 0xc0
10012212:	d003      	beq.n	1001221c <gapm_cmp_evt+0xac>
10012214:	065b      	lsls	r3, r3, #25
10012216:	0fdb      	lsrs	r3, r3, #31
10012218:	3502      	adds	r5, #2
1001221a:	1aed      	subs	r5, r5, r3
1001221c:	2301      	movs	r3, #1
1001221e:	425b      	negs	r3, r3
10012220:	7025      	strb	r5, [r4, #0]
10012222:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012224:	e038      	b.n	10012298 <gapm_cmp_evt+0x128>
10012226:	700d      	strb	r5, [r1, #0]
10012228:	e004      	b.n	10012234 <gapm_cmp_evt+0xc4>
1001222a:	2300      	movs	r3, #0
1001222c:	2d45      	cmp	r5, #69	; 0x45
1001222e:	d000      	beq.n	10012232 <gapm_cmp_evt+0xc2>
10012230:	1c2b      	adds	r3, r5, #0
10012232:	7023      	strb	r3, [r4, #0]
10012234:	2003      	movs	r0, #3
10012236:	e032      	b.n	1001229e <gapm_cmp_evt+0x12e>
10012238:	4e1b      	ldr	r6, [pc, #108]	; (100122a8 <gapm_cmp_evt+0x138>)
1001223a:	2100      	movs	r1, #0
1001223c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001223e:	4b1b      	ldr	r3, [pc, #108]	; (100122ac <gapm_cmp_evt+0x13c>)
10012240:	4798      	blx	r3
10012242:	2807      	cmp	r0, #7
10012244:	d818      	bhi.n	10012278 <gapm_cmp_evt+0x108>
10012246:	2301      	movs	r3, #1
10012248:	425b      	negs	r3, r3
1001224a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001224c:	3313      	adds	r3, #19
1001224e:	4358      	muls	r0, r3
10012250:	4917      	ldr	r1, [pc, #92]	; (100122b0 <gapm_cmp_evt+0x140>)
10012252:	1809      	adds	r1, r1, r0
10012254:	1c0b      	adds	r3, r1, #0
10012256:	894a      	ldrh	r2, [r1, #10]
10012258:	3308      	adds	r3, #8
1001225a:	8122      	strh	r2, [r4, #8]
1001225c:	784a      	ldrb	r2, [r1, #1]
1001225e:	72a5      	strb	r5, [r4, #10]
10012260:	7022      	strb	r2, [r4, #0]
10012262:	898a      	ldrh	r2, [r1, #12]
10012264:	1c60      	adds	r0, r4, #1
10012266:	81a2      	strh	r2, [r4, #12]
10012268:	88db      	ldrh	r3, [r3, #6]
1001226a:	3102      	adds	r1, #2
1001226c:	81e3      	strh	r3, [r4, #14]
1001226e:	89cb      	ldrh	r3, [r1, #14]
10012270:	2206      	movs	r2, #6
10012272:	8223      	strh	r3, [r4, #16]
10012274:	4b0f      	ldr	r3, [pc, #60]	; (100122b4 <gapm_cmp_evt+0x144>)
10012276:	4798      	blx	r3
10012278:	2200      	movs	r2, #0
1001227a:	7823      	ldrb	r3, [r4, #0]
1001227c:	4293      	cmp	r3, r2
1001227e:	d00a      	beq.n	10012296 <gapm_cmp_evt+0x126>
10012280:	79a3      	ldrb	r3, [r4, #6]
10012282:	323f      	adds	r2, #63	; 0x3f
10012284:	1c19      	adds	r1, r3, #0
10012286:	4391      	bics	r1, r2
10012288:	3a3e      	subs	r2, #62	; 0x3e
1001228a:	29c0      	cmp	r1, #192	; 0xc0
1001228c:	d003      	beq.n	10012296 <gapm_cmp_evt+0x126>
1001228e:	065b      	lsls	r3, r3, #25
10012290:	0fdb      	lsrs	r3, r3, #31
10012292:	3202      	adds	r2, #2
10012294:	1ad2      	subs	r2, r2, r3
10012296:	7022      	strb	r2, [r4, #0]
10012298:	2005      	movs	r0, #5
1001229a:	e000      	b.n	1001229e <gapm_cmp_evt+0x12e>
1001229c:	2000      	movs	r0, #0
1001229e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100122a0:	100149e1 	.word	0x100149e1
100122a4:	100114c1 	.word	0x100114c1
100122a8:	1001a71e 	.word	0x1001a71e
100122ac:	10011485 	.word	0x10011485
100122b0:	1001a68e 	.word	0x1001a68e
100122b4:	100149cf 	.word	0x100149cf

100122b8 <gapm_start_adv_cmd_handler>:
100122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100122ba:	b089      	sub	sp, #36	; 0x24
100122bc:	9303      	str	r3, [sp, #12]
100122be:	ab0e      	add	r3, sp, #56	; 0x38
100122c0:	9102      	str	r1, [sp, #8]
100122c2:	cb02      	ldmia	r3!, {r1}
100122c4:	aa08      	add	r2, sp, #32
100122c6:	881b      	ldrh	r3, [r3, #0]
100122c8:	4e3c      	ldr	r6, [pc, #240]	; (100123bc <gapm_start_adv_cmd_handler+0x104>)
100122ca:	9300      	str	r3, [sp, #0]
100122cc:	ab10      	add	r3, sp, #64	; 0x40
100122ce:	881b      	ldrh	r3, [r3, #0]
100122d0:	240d      	movs	r4, #13
100122d2:	469c      	mov	ip, r3
100122d4:	ab11      	add	r3, sp, #68	; 0x44
100122d6:	781b      	ldrb	r3, [r3, #0]
100122d8:	9304      	str	r3, [sp, #16]
100122da:	ab12      	add	r3, sp, #72	; 0x48
100122dc:	781b      	ldrb	r3, [r3, #0]
100122de:	9305      	str	r3, [sp, #20]
100122e0:	ab13      	add	r3, sp, #76	; 0x4c
100122e2:	781b      	ldrb	r3, [r3, #0]
100122e4:	9306      	str	r3, [sp, #24]
100122e6:	ab14      	add	r3, sp, #80	; 0x50
100122e8:	781b      	ldrb	r3, [r3, #0]
100122ea:	9301      	str	r3, [sp, #4]
100122ec:	2319      	movs	r3, #25
100122ee:	189b      	adds	r3, r3, r2
100122f0:	7fdd      	ldrb	r5, [r3, #31]
100122f2:	ab18      	add	r3, sp, #96	; 0x60
100122f4:	881f      	ldrh	r7, [r3, #0]
100122f6:	ab19      	add	r3, sp, #100	; 0x64
100122f8:	781b      	ldrb	r3, [r3, #0]
100122fa:	8832      	ldrh	r2, [r6, #0]
100122fc:	9307      	str	r3, [sp, #28]
100122fe:	4b30      	ldr	r3, [pc, #192]	; (100123c0 <gapm_start_adv_cmd_handler+0x108>)
10012300:	8836      	ldrh	r6, [r6, #0]
10012302:	711a      	strb	r2, [r3, #4]
10012304:	466a      	mov	r2, sp
10012306:	7a12      	ldrb	r2, [r2, #8]
10012308:	701c      	strb	r4, [r3, #0]
1001230a:	705c      	strb	r4, [r3, #1]
1001230c:	709c      	strb	r4, [r3, #2]
1001230e:	725a      	strb	r2, [r3, #9]
10012310:	2400      	movs	r4, #0
10012312:	466a      	mov	r2, sp
10012314:	0a36      	lsrs	r6, r6, #8
10012316:	70dc      	strb	r4, [r3, #3]
10012318:	7218      	strb	r0, [r3, #8]
1001231a:	729c      	strb	r4, [r3, #10]
1001231c:	715e      	strb	r6, [r3, #5]
1001231e:	72dc      	strb	r4, [r3, #11]
10012320:	7812      	ldrb	r2, [r2, #0]
10012322:	380e      	subs	r0, #14
10012324:	731a      	strb	r2, [r3, #12]
10012326:	9a00      	ldr	r2, [sp, #0]
10012328:	0a14      	lsrs	r4, r2, #8
1001232a:	4662      	mov	r2, ip
1001232c:	739a      	strb	r2, [r3, #14]
1001232e:	4662      	mov	r2, ip
10012330:	735c      	strb	r4, [r3, #13]
10012332:	0a14      	lsrs	r4, r2, #8
10012334:	466a      	mov	r2, sp
10012336:	7c12      	ldrb	r2, [r2, #16]
10012338:	73dc      	strb	r4, [r3, #15]
1001233a:	741a      	strb	r2, [r3, #16]
1001233c:	1c1c      	adds	r4, r3, #0
1001233e:	2801      	cmp	r0, #1
10012340:	d809      	bhi.n	10012356 <gapm_start_adv_cmd_handler+0x9e>
10012342:	2900      	cmp	r1, #0
10012344:	d003      	beq.n	1001234e <gapm_start_adv_cmd_handler+0x96>
10012346:	481f      	ldr	r0, [pc, #124]	; (100123c4 <gapm_start_adv_cmd_handler+0x10c>)
10012348:	2206      	movs	r2, #6
1001234a:	4b1f      	ldr	r3, [pc, #124]	; (100123c8 <gapm_start_adv_cmd_handler+0x110>)
1001234c:	4798      	blx	r3
1001234e:	466b      	mov	r3, sp
10012350:	7b1b      	ldrb	r3, [r3, #12]
10012352:	75e3      	strb	r3, [r4, #23]
10012354:	e014      	b.n	10012380 <gapm_start_adv_cmd_handler+0xc8>
10012356:	466b      	mov	r3, sp
10012358:	7d1b      	ldrb	r3, [r3, #20]
1001235a:	9915      	ldr	r1, [sp, #84]	; 0x54
1001235c:	7463      	strb	r3, [r4, #17]
1001235e:	466b      	mov	r3, sp
10012360:	7e1b      	ldrb	r3, [r3, #24]
10012362:	9a01      	ldr	r2, [sp, #4]
10012364:	74a3      	strb	r3, [r4, #18]
10012366:	466b      	mov	r3, sp
10012368:	791b      	ldrb	r3, [r3, #4]
1001236a:	4818      	ldr	r0, [pc, #96]	; (100123cc <gapm_start_adv_cmd_handler+0x114>)
1001236c:	4e16      	ldr	r6, [pc, #88]	; (100123c8 <gapm_start_adv_cmd_handler+0x110>)
1001236e:	74e3      	strb	r3, [r4, #19]
10012370:	47b0      	blx	r6
10012372:	1c23      	adds	r3, r4, #0
10012374:	4816      	ldr	r0, [pc, #88]	; (100123d0 <gapm_start_adv_cmd_handler+0x118>)
10012376:	3330      	adds	r3, #48	; 0x30
10012378:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001237a:	1c2a      	adds	r2, r5, #0
1001237c:	701d      	strb	r5, [r3, #0]
1001237e:	47b0      	blx	r6
10012380:	1c22      	adds	r2, r4, #0
10012382:	23a5      	movs	r3, #165	; 0xa5
10012384:	3250      	adds	r2, #80	; 0x50
10012386:	7013      	strb	r3, [r2, #0]
10012388:	1c22      	adds	r2, r4, #0
1001238a:	3251      	adds	r2, #81	; 0x51
1001238c:	7013      	strb	r3, [r2, #0]
1001238e:	1c23      	adds	r3, r4, #0
10012390:	1c22      	adds	r2, r4, #0
10012392:	3352      	adds	r3, #82	; 0x52
10012394:	701f      	strb	r7, [r3, #0]
10012396:	3253      	adds	r2, #83	; 0x53
10012398:	0a3b      	lsrs	r3, r7, #8
1001239a:	7013      	strb	r3, [r2, #0]
1001239c:	466a      	mov	r2, sp
1001239e:	1c23      	adds	r3, r4, #0
100123a0:	7f12      	ldrb	r2, [r2, #28]
100123a2:	3354      	adds	r3, #84	; 0x54
100123a4:	701a      	strb	r2, [r3, #0]
100123a6:	234d      	movs	r3, #77	; 0x4d
100123a8:	2500      	movs	r5, #0
100123aa:	71a3      	strb	r3, [r4, #6]
100123ac:	1c20      	adds	r0, r4, #0
100123ae:	2155      	movs	r1, #85	; 0x55
100123b0:	4b08      	ldr	r3, [pc, #32]	; (100123d4 <gapm_start_adv_cmd_handler+0x11c>)
100123b2:	71e5      	strb	r5, [r4, #7]
100123b4:	4798      	blx	r3
100123b6:	1c28      	adds	r0, r5, #0
100123b8:	b009      	add	sp, #36	; 0x24
100123ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100123bc:	1001a68c 	.word	0x1001a68c
100123c0:	1001a9fc 	.word	0x1001a9fc
100123c4:	1001aa0d 	.word	0x1001aa0d
100123c8:	100149cf 	.word	0x100149cf
100123cc:	1001aa10 	.word	0x1001aa10
100123d0:	1001aa2d 	.word	0x1001aa2d
100123d4:	100112b5 	.word	0x100112b5

100123d8 <get_gap_local_addr_type>:
100123d8:	4b04      	ldr	r3, [pc, #16]	; (100123ec <get_gap_local_addr_type+0x14>)
100123da:	2001      	movs	r0, #1
100123dc:	791b      	ldrb	r3, [r3, #4]
100123de:	2b02      	cmp	r3, #2
100123e0:	d003      	beq.n	100123ea <get_gap_local_addr_type+0x12>
100123e2:	3b03      	subs	r3, #3
100123e4:	4258      	negs	r0, r3
100123e6:	4158      	adcs	r0, r3
100123e8:	0040      	lsls	r0, r0, #1
100123ea:	4770      	bx	lr
100123ec:	1001a71e 	.word	0x1001a71e

100123f0 <gapm_adv_report_evt_handler>:
100123f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100123f2:	7843      	ldrb	r3, [r0, #1]
100123f4:	1c05      	adds	r5, r0, #0
100123f6:	9301      	str	r3, [sp, #4]
100123f8:	466b      	mov	r3, sp
100123fa:	1c0c      	adds	r4, r1, #0
100123fc:	791b      	ldrb	r3, [r3, #4]
100123fe:	7806      	ldrb	r6, [r0, #0]
10012400:	2206      	movs	r2, #6
10012402:	704b      	strb	r3, [r1, #1]
10012404:	1c88      	adds	r0, r1, #2
10012406:	4f1b      	ldr	r7, [pc, #108]	; (10012474 <gapm_adv_report_evt_handler+0x84>)
10012408:	1ca9      	adds	r1, r5, #2
1001240a:	47b8      	blx	r7
1001240c:	1c20      	adds	r0, r4, #0
1001240e:	1c29      	adds	r1, r5, #0
10012410:	7a2a      	ldrb	r2, [r5, #8]
10012412:	3008      	adds	r0, #8
10012414:	77c2      	strb	r2, [r0, #31]
10012416:	3109      	adds	r1, #9
10012418:	3528      	adds	r5, #40	; 0x28
1001241a:	47b8      	blx	r7
1001241c:	782b      	ldrb	r3, [r5, #0]
1001241e:	b25a      	sxtb	r2, r3
10012420:	2a00      	cmp	r2, #0
10012422:	da01      	bge.n	10012428 <gapm_adv_report_evt_handler+0x38>
10012424:	3301      	adds	r3, #1
10012426:	b2db      	uxtb	r3, r3
10012428:	1c22      	adds	r2, r4, #0
1001242a:	3228      	adds	r2, #40	; 0x28
1001242c:	7013      	strb	r3, [r2, #0]
1001242e:	2200      	movs	r2, #0
10012430:	9b01      	ldr	r3, [sp, #4]
10012432:	4293      	cmp	r3, r2
10012434:	d00a      	beq.n	1001244c <gapm_adv_report_evt_handler+0x5c>
10012436:	79e3      	ldrb	r3, [r4, #7]
10012438:	323f      	adds	r2, #63	; 0x3f
1001243a:	1c19      	adds	r1, r3, #0
1001243c:	4391      	bics	r1, r2
1001243e:	3a3e      	subs	r2, #62	; 0x3e
10012440:	29c0      	cmp	r1, #192	; 0xc0
10012442:	d003      	beq.n	1001244c <gapm_adv_report_evt_handler+0x5c>
10012444:	065b      	lsls	r3, r3, #25
10012446:	0fdb      	lsrs	r3, r3, #31
10012448:	3202      	adds	r2, #2
1001244a:	1ad2      	subs	r2, r2, r3
1001244c:	7062      	strb	r2, [r4, #1]
1001244e:	2e04      	cmp	r6, #4
10012450:	d80f      	bhi.n	10012472 <gapm_adv_report_evt_handler+0x82>
10012452:	1c30      	adds	r0, r6, #0
10012454:	f000 fbf6 	bl	10012c44 <__gnu_thumb1_case_uqi>
10012458:	09070503 	.word	0x09070503
1001245c:	0b          	.byte	0x0b
1001245d:	00          	.byte	0x00
1001245e:	2300      	movs	r3, #0
10012460:	e006      	b.n	10012470 <gapm_adv_report_evt_handler+0x80>
10012462:	2301      	movs	r3, #1
10012464:	e004      	b.n	10012470 <gapm_adv_report_evt_handler+0x80>
10012466:	2302      	movs	r3, #2
10012468:	e002      	b.n	10012470 <gapm_adv_report_evt_handler+0x80>
1001246a:	2303      	movs	r3, #3
1001246c:	e000      	b.n	10012470 <gapm_adv_report_evt_handler+0x80>
1001246e:	2305      	movs	r3, #5
10012470:	7023      	strb	r3, [r4, #0]
10012472:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012474:	100149cf 	.word	0x100149cf

10012478 <gapm_resolv_addr_cmd_handler>:
10012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001247a:	2314      	movs	r3, #20
1001247c:	4c12      	ldr	r4, [pc, #72]	; (100124c8 <gapm_resolv_addr_cmd_handler+0x50>)
1001247e:	1c17      	adds	r7, r2, #0
10012480:	7023      	strb	r3, [r4, #0]
10012482:	3b07      	subs	r3, #7
10012484:	7063      	strb	r3, [r4, #1]
10012486:	70a3      	strb	r3, [r4, #2]
10012488:	2300      	movs	r3, #0
1001248a:	70e3      	strb	r3, [r4, #3]
1001248c:	4b0f      	ldr	r3, [pc, #60]	; (100124cc <gapm_resolv_addr_cmd_handler+0x54>)
1001248e:	1c05      	adds	r5, r0, #0
10012490:	881a      	ldrh	r2, [r3, #0]
10012492:	881b      	ldrh	r3, [r3, #0]
10012494:	4e0e      	ldr	r6, [pc, #56]	; (100124d0 <gapm_resolv_addr_cmd_handler+0x58>)
10012496:	0a1b      	lsrs	r3, r3, #8
10012498:	7163      	strb	r3, [r4, #5]
1001249a:	2317      	movs	r3, #23
1001249c:	012d      	lsls	r5, r5, #4
1001249e:	7122      	strb	r2, [r4, #4]
100124a0:	7260      	strb	r0, [r4, #9]
100124a2:	2206      	movs	r2, #6
100124a4:	480b      	ldr	r0, [pc, #44]	; (100124d4 <gapm_resolv_addr_cmd_handler+0x5c>)
100124a6:	7223      	strb	r3, [r4, #8]
100124a8:	47b0      	blx	r6
100124aa:	1c39      	adds	r1, r7, #0
100124ac:	1c2a      	adds	r2, r5, #0
100124ae:	480a      	ldr	r0, [pc, #40]	; (100124d8 <gapm_resolv_addr_cmd_handler+0x60>)
100124b0:	47b0      	blx	r6
100124b2:	1c29      	adds	r1, r5, #0
100124b4:	3110      	adds	r1, #16
100124b6:	1c0b      	adds	r3, r1, #0
100124b8:	3b08      	subs	r3, #8
100124ba:	71a3      	strb	r3, [r4, #6]
100124bc:	121b      	asrs	r3, r3, #8
100124be:	71e3      	strb	r3, [r4, #7]
100124c0:	1c20      	adds	r0, r4, #0
100124c2:	4b06      	ldr	r3, [pc, #24]	; (100124dc <gapm_resolv_addr_cmd_handler+0x64>)
100124c4:	4798      	blx	r3
100124c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100124c8:	1001a9fc 	.word	0x1001a9fc
100124cc:	1001a68c 	.word	0x1001a68c
100124d0:	100149cf 	.word	0x100149cf
100124d4:	1001aa06 	.word	0x1001aa06
100124d8:	1001aa0c 	.word	0x1001aa0c
100124dc:	100112b5 	.word	0x100112b5

100124e0 <gapm_addr_solved_ind_handler>:
100124e0:	b570      	push	{r4, r5, r6, lr}
100124e2:	1c04      	adds	r4, r0, #0
100124e4:	1c08      	adds	r0, r1, #0
100124e6:	1c0d      	adds	r5, r1, #0
100124e8:	4e05      	ldr	r6, [pc, #20]	; (10012500 <gapm_addr_solved_ind_handler+0x20>)
100124ea:	1c21      	adds	r1, r4, #0
100124ec:	2206      	movs	r2, #6
100124ee:	3011      	adds	r0, #17
100124f0:	47b0      	blx	r6
100124f2:	1c68      	adds	r0, r5, #1
100124f4:	1da1      	adds	r1, r4, #6
100124f6:	2210      	movs	r2, #16
100124f8:	47b0      	blx	r6
100124fa:	2300      	movs	r3, #0
100124fc:	702b      	strb	r3, [r5, #0]
100124fe:	bd70      	pop	{r4, r5, r6, pc}
10012500:	100149cf 	.word	0x100149cf

10012504 <gapm_profile_added_ind_handler>:
10012504:	b510      	push	{r4, lr}
10012506:	7843      	ldrb	r3, [r0, #1]
10012508:	7902      	ldrb	r2, [r0, #4]
1001250a:	7944      	ldrb	r4, [r0, #5]
1001250c:	7800      	ldrb	r0, [r0, #0]
1001250e:	021b      	lsls	r3, r3, #8
10012510:	4303      	orrs	r3, r0
10012512:	2b1b      	cmp	r3, #27
10012514:	d104      	bne.n	10012520 <gapm_profile_added_ind_handler+0x1c>
10012516:	2300      	movs	r3, #0
10012518:	700b      	strb	r3, [r1, #0]
1001251a:	0223      	lsls	r3, r4, #8
1001251c:	4313      	orrs	r3, r2
1001251e:	804b      	strh	r3, [r1, #2]
10012520:	203b      	movs	r0, #59	; 0x3b
10012522:	bd10      	pop	{r4, pc}

10012524 <gattc_read_req_ind_parser>:
10012524:	7843      	ldrb	r3, [r0, #1]
10012526:	7802      	ldrb	r2, [r0, #0]
10012528:	021b      	lsls	r3, r3, #8
1001252a:	4313      	orrs	r3, r2
1001252c:	804b      	strh	r3, [r1, #2]
1001252e:	4770      	bx	lr

10012530 <gattc_write_req_ind_parser>:
10012530:	b508      	push	{r3, lr}
10012532:	1c13      	adds	r3, r2, #0
10012534:	0a00      	lsrs	r0, r0, #8
10012536:	8010      	strh	r0, [r2, #0]
10012538:	784a      	ldrb	r2, [r1, #1]
1001253a:	7808      	ldrb	r0, [r1, #0]
1001253c:	0212      	lsls	r2, r2, #8
1001253e:	4302      	orrs	r2, r0
10012540:	805a      	strh	r2, [r3, #2]
10012542:	78ca      	ldrb	r2, [r1, #3]
10012544:	7888      	ldrb	r0, [r1, #2]
10012546:	0212      	lsls	r2, r2, #8
10012548:	4302      	orrs	r2, r0
1001254a:	809a      	strh	r2, [r3, #4]
1001254c:	794a      	ldrb	r2, [r1, #5]
1001254e:	7908      	ldrb	r0, [r1, #4]
10012550:	0212      	lsls	r2, r2, #8
10012552:	4302      	orrs	r2, r0
10012554:	80da      	strh	r2, [r3, #6]
10012556:	3308      	adds	r3, #8
10012558:	1c18      	adds	r0, r3, #0
1001255a:	3106      	adds	r1, #6
1001255c:	4b01      	ldr	r3, [pc, #4]	; (10012564 <gattc_write_req_ind_parser+0x34>)
1001255e:	4798      	blx	r3
10012560:	bd08      	pop	{r3, pc}
10012562:	46c0      	nop			; (mov r8, r8)
10012564:	100149cf 	.word	0x100149cf

10012568 <gattc_att_info_req_parser>:
10012568:	7843      	ldrb	r3, [r0, #1]
1001256a:	7802      	ldrb	r2, [r0, #0]
1001256c:	021b      	lsls	r3, r3, #8
1001256e:	4313      	orrs	r3, r2
10012570:	800b      	strh	r3, [r1, #0]
10012572:	4770      	bx	lr

10012574 <gattc_read_cfm>:
10012574:	b538      	push	{r3, r4, r5, lr}
10012576:	2514      	movs	r5, #20
10012578:	1c1c      	adds	r4, r3, #0
1001257a:	4b14      	ldr	r3, [pc, #80]	; (100125cc <gattc_read_cfm+0x58>)
1001257c:	70d9      	strb	r1, [r3, #3]
1001257e:	4914      	ldr	r1, [pc, #80]	; (100125d0 <gattc_read_cfm+0x5c>)
10012580:	701d      	strb	r5, [r3, #0]
10012582:	3d08      	subs	r5, #8
10012584:	705d      	strb	r5, [r3, #1]
10012586:	709d      	strb	r5, [r3, #2]
10012588:	880d      	ldrh	r5, [r1, #0]
1001258a:	8809      	ldrh	r1, [r1, #0]
1001258c:	7218      	strb	r0, [r3, #8]
1001258e:	0a09      	lsrs	r1, r1, #8
10012590:	7159      	strb	r1, [r3, #5]
10012592:	0a00      	lsrs	r0, r0, #8
10012594:	0a21      	lsrs	r1, r4, #8
10012596:	711d      	strb	r5, [r3, #4]
10012598:	7258      	strb	r0, [r3, #9]
1001259a:	729c      	strb	r4, [r3, #10]
1001259c:	72d9      	strb	r1, [r3, #11]
1001259e:	731a      	strb	r2, [r3, #12]
100125a0:	1c1d      	adds	r5, r3, #0
100125a2:	2c00      	cmp	r4, #0
100125a4:	d007      	beq.n	100125b6 <gattc_read_cfm+0x42>
100125a6:	9904      	ldr	r1, [sp, #16]
100125a8:	1c22      	adds	r2, r4, #0
100125aa:	480a      	ldr	r0, [pc, #40]	; (100125d4 <gattc_read_cfm+0x60>)
100125ac:	4b0a      	ldr	r3, [pc, #40]	; (100125d8 <gattc_read_cfm+0x64>)
100125ae:	340d      	adds	r4, #13
100125b0:	4798      	blx	r3
100125b2:	b2a1      	uxth	r1, r4
100125b4:	e001      	b.n	100125ba <gattc_read_cfm+0x46>
100125b6:	210e      	movs	r1, #14
100125b8:	735c      	strb	r4, [r3, #13]
100125ba:	1c0b      	adds	r3, r1, #0
100125bc:	3b08      	subs	r3, #8
100125be:	71ab      	strb	r3, [r5, #6]
100125c0:	121b      	asrs	r3, r3, #8
100125c2:	71eb      	strb	r3, [r5, #7]
100125c4:	1c28      	adds	r0, r5, #0
100125c6:	4b05      	ldr	r3, [pc, #20]	; (100125dc <gattc_read_cfm+0x68>)
100125c8:	4798      	blx	r3
100125ca:	bd38      	pop	{r3, r4, r5, pc}
100125cc:	1001a9fc 	.word	0x1001a9fc
100125d0:	1001a68c 	.word	0x1001a68c
100125d4:	1001aa09 	.word	0x1001aa09
100125d8:	100149cf 	.word	0x100149cf
100125dc:	100112b5 	.word	0x100112b5

100125e0 <gattc_write_cfm>:
100125e0:	4b0d      	ldr	r3, [pc, #52]	; (10012618 <gattc_write_cfm+0x38>)
100125e2:	b510      	push	{r4, lr}
100125e4:	729a      	strb	r2, [r3, #10]
100125e6:	2203      	movs	r2, #3
100125e8:	2416      	movs	r4, #22
100125ea:	719a      	strb	r2, [r3, #6]
100125ec:	2200      	movs	r2, #0
100125ee:	70d9      	strb	r1, [r3, #3]
100125f0:	490a      	ldr	r1, [pc, #40]	; (1001261c <gattc_write_cfm+0x3c>)
100125f2:	701c      	strb	r4, [r3, #0]
100125f4:	3c0a      	subs	r4, #10
100125f6:	705c      	strb	r4, [r3, #1]
100125f8:	709c      	strb	r4, [r3, #2]
100125fa:	880c      	ldrh	r4, [r1, #0]
100125fc:	8809      	ldrh	r1, [r1, #0]
100125fe:	7218      	strb	r0, [r3, #8]
10012600:	0a09      	lsrs	r1, r1, #8
10012602:	0a00      	lsrs	r0, r0, #8
10012604:	711c      	strb	r4, [r3, #4]
10012606:	7159      	strb	r1, [r3, #5]
10012608:	7258      	strb	r0, [r3, #9]
1001260a:	71da      	strb	r2, [r3, #7]
1001260c:	1c18      	adds	r0, r3, #0
1001260e:	210b      	movs	r1, #11
10012610:	4b03      	ldr	r3, [pc, #12]	; (10012620 <gattc_write_cfm+0x40>)
10012612:	4798      	blx	r3
10012614:	bd10      	pop	{r4, pc}
10012616:	46c0      	nop			; (mov r8, r8)
10012618:	1001a9fc 	.word	0x1001a9fc
1001261c:	1001a68c 	.word	0x1001a68c
10012620:	100112b5 	.word	0x100112b5

10012624 <gattc_att_info_cfm>:
10012624:	b538      	push	{r3, r4, r5, lr}
10012626:	4c0e      	ldr	r4, [pc, #56]	; (10012660 <gattc_att_info_cfm+0x3c>)
10012628:	2518      	movs	r5, #24
1001262a:	7323      	strb	r3, [r4, #12]
1001262c:	2305      	movs	r3, #5
1001262e:	71a3      	strb	r3, [r4, #6]
10012630:	2300      	movs	r3, #0
10012632:	70e1      	strb	r1, [r4, #3]
10012634:	490b      	ldr	r1, [pc, #44]	; (10012664 <gattc_att_info_cfm+0x40>)
10012636:	7025      	strb	r5, [r4, #0]
10012638:	3d0c      	subs	r5, #12
1001263a:	7065      	strb	r5, [r4, #1]
1001263c:	70a5      	strb	r5, [r4, #2]
1001263e:	880d      	ldrh	r5, [r1, #0]
10012640:	8809      	ldrh	r1, [r1, #0]
10012642:	7220      	strb	r0, [r4, #8]
10012644:	0a09      	lsrs	r1, r1, #8
10012646:	0a00      	lsrs	r0, r0, #8
10012648:	7161      	strb	r1, [r4, #5]
1001264a:	7260      	strb	r0, [r4, #9]
1001264c:	72a2      	strb	r2, [r4, #10]
1001264e:	71e3      	strb	r3, [r4, #7]
10012650:	0a12      	lsrs	r2, r2, #8
10012652:	1c20      	adds	r0, r4, #0
10012654:	210d      	movs	r1, #13
10012656:	4b04      	ldr	r3, [pc, #16]	; (10012668 <gattc_att_info_cfm+0x44>)
10012658:	7125      	strb	r5, [r4, #4]
1001265a:	72e2      	strb	r2, [r4, #11]
1001265c:	4798      	blx	r3
1001265e:	bd38      	pop	{r3, r4, r5, pc}
10012660:	1001a9fc 	.word	0x1001a9fc
10012664:	1001a68c 	.word	0x1001a68c
10012668:	100112b5 	.word	0x100112b5

1001266c <gattc_send_evt_cmd_handler>:
1001266c:	b570      	push	{r4, r5, r6, lr}
1001266e:	2610      	movs	r6, #16
10012670:	ac04      	add	r4, sp, #16
10012672:	8825      	ldrh	r5, [r4, #0]
10012674:	4c15      	ldr	r4, [pc, #84]	; (100126cc <gattc_send_evt_cmd_handler+0x60>)
10012676:	70e2      	strb	r2, [r4, #3]
10012678:	4a15      	ldr	r2, [pc, #84]	; (100126d0 <gattc_send_evt_cmd_handler+0x64>)
1001267a:	7026      	strb	r6, [r4, #0]
1001267c:	3e04      	subs	r6, #4
1001267e:	7066      	strb	r6, [r4, #1]
10012680:	70a6      	strb	r6, [r4, #2]
10012682:	8816      	ldrh	r6, [r2, #0]
10012684:	8812      	ldrh	r2, [r2, #0]
10012686:	7220      	strb	r0, [r4, #8]
10012688:	0a12      	lsrs	r2, r2, #8
1001268a:	7162      	strb	r2, [r4, #5]
1001268c:	4a11      	ldr	r2, [pc, #68]	; (100126d4 <gattc_send_evt_cmd_handler+0x68>)
1001268e:	7321      	strb	r1, [r4, #12]
10012690:	8812      	ldrh	r2, [r2, #0]
10012692:	73a5      	strb	r5, [r4, #14]
10012694:	3201      	adds	r2, #1
10012696:	7262      	strb	r2, [r4, #9]
10012698:	1212      	asrs	r2, r2, #8
1001269a:	72a2      	strb	r2, [r4, #10]
1001269c:	2200      	movs	r2, #0
1001269e:	72e2      	strb	r2, [r4, #11]
100126a0:	0a0a      	lsrs	r2, r1, #8
100126a2:	7362      	strb	r2, [r4, #13]
100126a4:	0a2a      	lsrs	r2, r5, #8
100126a6:	73e2      	strb	r2, [r4, #15]
100126a8:	1c19      	adds	r1, r3, #0
100126aa:	1c2a      	adds	r2, r5, #0
100126ac:	4b0a      	ldr	r3, [pc, #40]	; (100126d8 <gattc_send_evt_cmd_handler+0x6c>)
100126ae:	3510      	adds	r5, #16
100126b0:	480a      	ldr	r0, [pc, #40]	; (100126dc <gattc_send_evt_cmd_handler+0x70>)
100126b2:	7126      	strb	r6, [r4, #4]
100126b4:	4798      	blx	r3
100126b6:	b2a9      	uxth	r1, r5
100126b8:	1c0b      	adds	r3, r1, #0
100126ba:	3b08      	subs	r3, #8
100126bc:	71a3      	strb	r3, [r4, #6]
100126be:	121b      	asrs	r3, r3, #8
100126c0:	71e3      	strb	r3, [r4, #7]
100126c2:	1c20      	adds	r0, r4, #0
100126c4:	4b06      	ldr	r3, [pc, #24]	; (100126e0 <gattc_send_evt_cmd_handler+0x74>)
100126c6:	4798      	blx	r3
100126c8:	bd70      	pop	{r4, r5, r6, pc}
100126ca:	46c0      	nop			; (mov r8, r8)
100126cc:	1001a9fc 	.word	0x1001a9fc
100126d0:	1001a68c 	.word	0x1001a68c
100126d4:	10019820 	.word	0x10019820
100126d8:	100149cf 	.word	0x100149cf
100126dc:	1001aa0c 	.word	0x1001aa0c
100126e0:	100112b5 	.word	0x100112b5

100126e4 <gattc_event_cfm_handler>:
100126e4:	220e      	movs	r2, #14
100126e6:	b508      	push	{r3, lr}
100126e8:	4b0b      	ldr	r3, [pc, #44]	; (10012718 <gattc_event_cfm_handler+0x34>)
100126ea:	701a      	strb	r2, [r3, #0]
100126ec:	3a02      	subs	r2, #2
100126ee:	705a      	strb	r2, [r3, #1]
100126f0:	709a      	strb	r2, [r3, #2]
100126f2:	4a0a      	ldr	r2, [pc, #40]	; (1001271c <gattc_event_cfm_handler+0x38>)
100126f4:	70d8      	strb	r0, [r3, #3]
100126f6:	8810      	ldrh	r0, [r2, #0]
100126f8:	8812      	ldrh	r2, [r2, #0]
100126fa:	7219      	strb	r1, [r3, #8]
100126fc:	0a12      	lsrs	r2, r2, #8
100126fe:	715a      	strb	r2, [r3, #5]
10012700:	2202      	movs	r2, #2
10012702:	719a      	strb	r2, [r3, #6]
10012704:	2200      	movs	r2, #0
10012706:	0a09      	lsrs	r1, r1, #8
10012708:	7118      	strb	r0, [r3, #4]
1001270a:	7259      	strb	r1, [r3, #9]
1001270c:	71da      	strb	r2, [r3, #7]
1001270e:	1c18      	adds	r0, r3, #0
10012710:	210a      	movs	r1, #10
10012712:	4b03      	ldr	r3, [pc, #12]	; (10012720 <gattc_event_cfm_handler+0x3c>)
10012714:	4798      	blx	r3
10012716:	bd08      	pop	{r3, pc}
10012718:	1001a9fc 	.word	0x1001a9fc
1001271c:	1001a68c 	.word	0x1001a68c
10012720:	100112b5 	.word	0x100112b5

10012724 <gattc_disc_svc_ind_parser>:
10012724:	b570      	push	{r4, r5, r6, lr}
10012726:	1c15      	adds	r5, r2, #0
10012728:	0a00      	lsrs	r0, r0, #8
1001272a:	8010      	strh	r0, [r2, #0]
1001272c:	784b      	ldrb	r3, [r1, #1]
1001272e:	780a      	ldrb	r2, [r1, #0]
10012730:	021b      	lsls	r3, r3, #8
10012732:	4313      	orrs	r3, r2
10012734:	806b      	strh	r3, [r5, #2]
10012736:	78cb      	ldrb	r3, [r1, #3]
10012738:	788a      	ldrb	r2, [r1, #2]
1001273a:	021b      	lsls	r3, r3, #8
1001273c:	4313      	orrs	r3, r2
1001273e:	80ab      	strh	r3, [r5, #4]
10012740:	790e      	ldrb	r6, [r1, #4]
10012742:	4b05      	ldr	r3, [pc, #20]	; (10012758 <gattc_disc_svc_ind_parser+0x34>)
10012744:	1c30      	adds	r0, r6, #0
10012746:	1c0c      	adds	r4, r1, #0
10012748:	4798      	blx	r3
1001274a:	1c32      	adds	r2, r6, #0
1001274c:	71a8      	strb	r0, [r5, #6]
1001274e:	1d61      	adds	r1, r4, #5
10012750:	1de8      	adds	r0, r5, #7
10012752:	4b02      	ldr	r3, [pc, #8]	; (1001275c <gattc_disc_svc_ind_parser+0x38>)
10012754:	4798      	blx	r3
10012756:	bd70      	pop	{r4, r5, r6, pc}
10012758:	100105f5 	.word	0x100105f5
1001275c:	100149cf 	.word	0x100149cf

10012760 <gattc_disc_svc_incl_ind_parser>:
10012760:	b570      	push	{r4, r5, r6, lr}
10012762:	1c15      	adds	r5, r2, #0
10012764:	0a00      	lsrs	r0, r0, #8
10012766:	8010      	strh	r0, [r2, #0]
10012768:	784b      	ldrb	r3, [r1, #1]
1001276a:	780a      	ldrb	r2, [r1, #0]
1001276c:	021b      	lsls	r3, r3, #8
1001276e:	4313      	orrs	r3, r2
10012770:	806b      	strh	r3, [r5, #2]
10012772:	78cb      	ldrb	r3, [r1, #3]
10012774:	788a      	ldrb	r2, [r1, #2]
10012776:	021b      	lsls	r3, r3, #8
10012778:	4313      	orrs	r3, r2
1001277a:	80ab      	strh	r3, [r5, #4]
1001277c:	794b      	ldrb	r3, [r1, #5]
1001277e:	790a      	ldrb	r2, [r1, #4]
10012780:	021b      	lsls	r3, r3, #8
10012782:	4313      	orrs	r3, r2
10012784:	80eb      	strh	r3, [r5, #6]
10012786:	798e      	ldrb	r6, [r1, #6]
10012788:	4b05      	ldr	r3, [pc, #20]	; (100127a0 <gattc_disc_svc_incl_ind_parser+0x40>)
1001278a:	1c30      	adds	r0, r6, #0
1001278c:	1c0c      	adds	r4, r1, #0
1001278e:	4798      	blx	r3
10012790:	7228      	strb	r0, [r5, #8]
10012792:	1c28      	adds	r0, r5, #0
10012794:	1c32      	adds	r2, r6, #0
10012796:	1de1      	adds	r1, r4, #7
10012798:	4b02      	ldr	r3, [pc, #8]	; (100127a4 <gattc_disc_svc_incl_ind_parser+0x44>)
1001279a:	3009      	adds	r0, #9
1001279c:	4798      	blx	r3
1001279e:	bd70      	pop	{r4, r5, r6, pc}
100127a0:	100105f5 	.word	0x100105f5
100127a4:	100149cf 	.word	0x100149cf

100127a8 <gattc_disc_char_ind_parser>:
100127a8:	b570      	push	{r4, r5, r6, lr}
100127aa:	1c15      	adds	r5, r2, #0
100127ac:	0a00      	lsrs	r0, r0, #8
100127ae:	8010      	strh	r0, [r2, #0]
100127b0:	784b      	ldrb	r3, [r1, #1]
100127b2:	780a      	ldrb	r2, [r1, #0]
100127b4:	021b      	lsls	r3, r3, #8
100127b6:	4313      	orrs	r3, r2
100127b8:	806b      	strh	r3, [r5, #2]
100127ba:	78cb      	ldrb	r3, [r1, #3]
100127bc:	788a      	ldrb	r2, [r1, #2]
100127be:	021b      	lsls	r3, r3, #8
100127c0:	4313      	orrs	r3, r2
100127c2:	80ab      	strh	r3, [r5, #4]
100127c4:	790b      	ldrb	r3, [r1, #4]
100127c6:	1c0c      	adds	r4, r1, #0
100127c8:	71ab      	strb	r3, [r5, #6]
100127ca:	794e      	ldrb	r6, [r1, #5]
100127cc:	4b05      	ldr	r3, [pc, #20]	; (100127e4 <gattc_disc_char_ind_parser+0x3c>)
100127ce:	1c30      	adds	r0, r6, #0
100127d0:	4798      	blx	r3
100127d2:	71e8      	strb	r0, [r5, #7]
100127d4:	1c28      	adds	r0, r5, #0
100127d6:	1c32      	adds	r2, r6, #0
100127d8:	1da1      	adds	r1, r4, #6
100127da:	4b03      	ldr	r3, [pc, #12]	; (100127e8 <gattc_disc_char_ind_parser+0x40>)
100127dc:	3008      	adds	r0, #8
100127de:	4798      	blx	r3
100127e0:	bd70      	pop	{r4, r5, r6, pc}
100127e2:	46c0      	nop			; (mov r8, r8)
100127e4:	100105f5 	.word	0x100105f5
100127e8:	100149cf 	.word	0x100149cf

100127ec <gattc_disc_char_desc_ind_parser>:
100127ec:	b570      	push	{r4, r5, r6, lr}
100127ee:	1c15      	adds	r5, r2, #0
100127f0:	0a00      	lsrs	r0, r0, #8
100127f2:	8010      	strh	r0, [r2, #0]
100127f4:	784b      	ldrb	r3, [r1, #1]
100127f6:	780a      	ldrb	r2, [r1, #0]
100127f8:	021b      	lsls	r3, r3, #8
100127fa:	4313      	orrs	r3, r2
100127fc:	806b      	strh	r3, [r5, #2]
100127fe:	788e      	ldrb	r6, [r1, #2]
10012800:	4b05      	ldr	r3, [pc, #20]	; (10012818 <gattc_disc_char_desc_ind_parser+0x2c>)
10012802:	1c30      	adds	r0, r6, #0
10012804:	1c0c      	adds	r4, r1, #0
10012806:	4798      	blx	r3
10012808:	1c32      	adds	r2, r6, #0
1001280a:	7128      	strb	r0, [r5, #4]
1001280c:	1ce1      	adds	r1, r4, #3
1001280e:	1d68      	adds	r0, r5, #5
10012810:	4b02      	ldr	r3, [pc, #8]	; (1001281c <gattc_disc_char_desc_ind_parser+0x30>)
10012812:	4798      	blx	r3
10012814:	bd70      	pop	{r4, r5, r6, pc}
10012816:	46c0      	nop			; (mov r8, r8)
10012818:	100105f5 	.word	0x100105f5
1001281c:	100149cf 	.word	0x100149cf

10012820 <gattc_event_ind_and_notification_parser>:
10012820:	b510      	push	{r4, lr}
10012822:	780c      	ldrb	r4, [r1, #0]
10012824:	1c13      	adds	r3, r2, #0
10012826:	2c12      	cmp	r4, #18
10012828:	d10e      	bne.n	10012848 <gattc_event_ind_and_notification_parser+0x28>
1001282a:	0a00      	lsrs	r0, r0, #8
1001282c:	8010      	strh	r0, [r2, #0]
1001282e:	788a      	ldrb	r2, [r1, #2]
10012830:	709a      	strb	r2, [r3, #2]
10012832:	7948      	ldrb	r0, [r1, #5]
10012834:	790c      	ldrb	r4, [r1, #4]
10012836:	0200      	lsls	r0, r0, #8
10012838:	4320      	orrs	r0, r4
1001283a:	8098      	strh	r0, [r3, #4]
1001283c:	3106      	adds	r1, #6
1001283e:	1d98      	adds	r0, r3, #6
10012840:	4b0b      	ldr	r3, [pc, #44]	; (10012870 <gattc_event_ind_and_notification_parser+0x50>)
10012842:	4798      	blx	r3
10012844:	221b      	movs	r2, #27
10012846:	e010      	b.n	1001286a <gattc_event_ind_and_notification_parser+0x4a>
10012848:	2200      	movs	r2, #0
1001284a:	2c13      	cmp	r4, #19
1001284c:	d10d      	bne.n	1001286a <gattc_event_ind_and_notification_parser+0x4a>
1001284e:	0a00      	lsrs	r0, r0, #8
10012850:	8018      	strh	r0, [r3, #0]
10012852:	788a      	ldrb	r2, [r1, #2]
10012854:	709a      	strb	r2, [r3, #2]
10012856:	7908      	ldrb	r0, [r1, #4]
10012858:	78cc      	ldrb	r4, [r1, #3]
1001285a:	0200      	lsls	r0, r0, #8
1001285c:	4320      	orrs	r0, r4
1001285e:	8098      	strh	r0, [r3, #4]
10012860:	3106      	adds	r1, #6
10012862:	1d98      	adds	r0, r3, #6
10012864:	4b02      	ldr	r3, [pc, #8]	; (10012870 <gattc_event_ind_and_notification_parser+0x50>)
10012866:	4798      	blx	r3
10012868:	221c      	movs	r2, #28
1001286a:	1c10      	adds	r0, r2, #0
1001286c:	bd10      	pop	{r4, pc}
1001286e:	46c0      	nop			; (mov r8, r8)
10012870:	100149cf 	.word	0x100149cf

10012874 <gattc_complete_evt_handler>:
10012874:	b500      	push	{lr}
10012876:	0a00      	lsrs	r0, r0, #8
10012878:	8010      	strh	r0, [r2, #0]
1001287a:	7808      	ldrb	r0, [r1, #0]
1001287c:	7090      	strb	r0, [r2, #2]
1001287e:	784b      	ldrb	r3, [r1, #1]
10012880:	3801      	subs	r0, #1
10012882:	70d3      	strb	r3, [r2, #3]
10012884:	2813      	cmp	r0, #19
10012886:	d82c      	bhi.n	100128e2 <gattc_complete_evt_handler+0x6e>
10012888:	f000 f9dc 	bl	10012c44 <__gnu_thumb1_case_uqi>
1001288c:	0a0a0a0c 	.word	0x0a0a0a0c
10012890:	210a0a0a 	.word	0x210a0a0a
10012894:	111f2121 	.word	0x111f2121
10012898:	2b111111 	.word	0x2b111111
1001289c:	2919132b 	.word	0x2919132b
100128a0:	2017      	movs	r0, #23
100128a2:	e01f      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128a4:	2024      	movs	r0, #36	; 0x24
100128a6:	2b00      	cmp	r3, #0
100128a8:	d11c      	bne.n	100128e4 <gattc_complete_evt_handler+0x70>
100128aa:	3017      	adds	r0, #23
100128ac:	e01a      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128ae:	2025      	movs	r0, #37	; 0x25
100128b0:	e018      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128b2:	4a0d      	ldr	r2, [pc, #52]	; (100128e8 <gattc_complete_evt_handler+0x74>)
100128b4:	201d      	movs	r0, #29
100128b6:	6813      	ldr	r3, [r2, #0]
100128b8:	3b01      	subs	r3, #1
100128ba:	6013      	str	r3, [r2, #0]
100128bc:	e012      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128be:	4a0a      	ldr	r2, [pc, #40]	; (100128e8 <gattc_complete_evt_handler+0x74>)
100128c0:	201e      	movs	r0, #30
100128c2:	6813      	ldr	r3, [r2, #0]
100128c4:	3b01      	subs	r3, #1
100128c6:	6013      	str	r3, [r2, #0]
100128c8:	e00c      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128ca:	2019      	movs	r0, #25
100128cc:	e00a      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128ce:	203b      	movs	r0, #59	; 0x3b
100128d0:	2b00      	cmp	r3, #0
100128d2:	d007      	beq.n	100128e4 <gattc_complete_evt_handler+0x70>
100128d4:	2182      	movs	r1, #130	; 0x82
100128d6:	0089      	lsls	r1, r1, #2
100128d8:	5453      	strb	r3, [r2, r1]
100128da:	3823      	subs	r0, #35	; 0x23
100128dc:	e002      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128de:	2021      	movs	r0, #33	; 0x21
100128e0:	e000      	b.n	100128e4 <gattc_complete_evt_handler+0x70>
100128e2:	2000      	movs	r0, #0
100128e4:	bd00      	pop	{pc}
100128e6:	46c0      	nop			; (mov r8, r8)
100128e8:	10019824 	.word	0x10019824

100128ec <gattc_event_mtu_changed_ind_parser>:
100128ec:	0a00      	lsrs	r0, r0, #8
100128ee:	8010      	strh	r0, [r2, #0]
100128f0:	784b      	ldrb	r3, [r1, #1]
100128f2:	7809      	ldrb	r1, [r1, #0]
100128f4:	021b      	lsls	r3, r3, #8
100128f6:	430b      	orrs	r3, r1
100128f8:	8053      	strh	r3, [r2, #2]
100128fa:	4770      	bx	lr

100128fc <gattc_read_ind_parser>:
100128fc:	0a00      	lsrs	r0, r0, #8
100128fe:	b508      	push	{r3, lr}
10012900:	8010      	strh	r0, [r2, #0]
10012902:	1c13      	adds	r3, r2, #0
10012904:	2282      	movs	r2, #130	; 0x82
10012906:	2000      	movs	r0, #0
10012908:	0092      	lsls	r2, r2, #2
1001290a:	5498      	strb	r0, [r3, r2]
1001290c:	784a      	ldrb	r2, [r1, #1]
1001290e:	7808      	ldrb	r0, [r1, #0]
10012910:	0212      	lsls	r2, r2, #8
10012912:	4302      	orrs	r2, r0
10012914:	805a      	strh	r2, [r3, #2]
10012916:	78ca      	ldrb	r2, [r1, #3]
10012918:	7888      	ldrb	r0, [r1, #2]
1001291a:	0212      	lsls	r2, r2, #8
1001291c:	4302      	orrs	r2, r0
1001291e:	80da      	strh	r2, [r3, #6]
10012920:	794a      	ldrb	r2, [r1, #5]
10012922:	7908      	ldrb	r0, [r1, #4]
10012924:	0212      	lsls	r2, r2, #8
10012926:	4302      	orrs	r2, r0
10012928:	809a      	strh	r2, [r3, #4]
1001292a:	3308      	adds	r3, #8
1001292c:	1c18      	adds	r0, r3, #0
1001292e:	3106      	adds	r1, #6
10012930:	4b01      	ldr	r3, [pc, #4]	; (10012938 <gattc_read_ind_parser+0x3c>)
10012932:	4798      	blx	r3
10012934:	bd08      	pop	{r3, pc}
10012936:	46c0      	nop			; (mov r8, r8)
10012938:	100149cf 	.word	0x100149cf

1001293c <gattc_svc_changed_cfg_ind_parser>:
1001293c:	0a00      	lsrs	r0, r0, #8
1001293e:	8010      	strh	r0, [r2, #0]
10012940:	784b      	ldrb	r3, [r1, #1]
10012942:	7809      	ldrb	r1, [r1, #0]
10012944:	021b      	lsls	r3, r3, #8
10012946:	430b      	orrs	r3, r1
10012948:	8053      	strh	r3, [r2, #2]
1001294a:	4770      	bx	lr

1001294c <init_gattc_task_module>:
1001294c:	2300      	movs	r3, #0
1001294e:	4a02      	ldr	r2, [pc, #8]	; (10012958 <init_gattc_task_module+0xc>)
10012950:	8013      	strh	r3, [r2, #0]
10012952:	4a02      	ldr	r2, [pc, #8]	; (1001295c <init_gattc_task_module+0x10>)
10012954:	8013      	strh	r3, [r2, #0]
10012956:	4770      	bx	lr
10012958:	1001981e 	.word	0x1001981e
1001295c:	10019820 	.word	0x10019820

10012960 <gattm_add_svc_req_handler>:
10012960:	2200      	movs	r2, #0
10012962:	210b      	movs	r1, #11
10012964:	b5f0      	push	{r4, r5, r6, r7, lr}
10012966:	1c04      	adds	r4, r0, #0
10012968:	7943      	ldrb	r3, [r0, #5]
1001296a:	b085      	sub	sp, #20
1001296c:	9301      	str	r3, [sp, #4]
1001296e:	ab02      	add	r3, sp, #8
10012970:	71da      	strb	r2, [r3, #7]
10012972:	4b37      	ldr	r3, [pc, #220]	; (10012a50 <gattm_add_svc_req_handler+0xf0>)
10012974:	7059      	strb	r1, [r3, #1]
10012976:	7099      	strb	r1, [r3, #2]
10012978:	4936      	ldr	r1, [pc, #216]	; (10012a54 <gattm_add_svc_req_handler+0xf4>)
1001297a:	701a      	strb	r2, [r3, #0]
1001297c:	8808      	ldrh	r0, [r1, #0]
1001297e:	8809      	ldrh	r1, [r1, #0]
10012980:	70da      	strb	r2, [r3, #3]
10012982:	0a09      	lsrs	r1, r1, #8
10012984:	7118      	strb	r0, [r3, #4]
10012986:	7159      	strb	r1, [r3, #5]
10012988:	8821      	ldrh	r1, [r4, #0]
1001298a:	7219      	strb	r1, [r3, #8]
1001298c:	8821      	ldrh	r1, [r4, #0]
1001298e:	0a09      	lsrs	r1, r1, #8
10012990:	7259      	strb	r1, [r3, #9]
10012992:	8861      	ldrh	r1, [r4, #2]
10012994:	7299      	strb	r1, [r3, #10]
10012996:	8861      	ldrh	r1, [r4, #2]
10012998:	0a09      	lsrs	r1, r1, #8
1001299a:	72d9      	strb	r1, [r3, #11]
1001299c:	7921      	ldrb	r1, [r4, #4]
1001299e:	7319      	strb	r1, [r3, #12]
100129a0:	4669      	mov	r1, sp
100129a2:	7909      	ldrb	r1, [r1, #4]
100129a4:	7359      	strb	r1, [r3, #13]
100129a6:	18a1      	adds	r1, r4, r2
100129a8:	7988      	ldrb	r0, [r1, #6]
100129aa:	1899      	adds	r1, r3, r2
100129ac:	3201      	adds	r2, #1
100129ae:	7388      	strb	r0, [r1, #14]
100129b0:	2a10      	cmp	r2, #16
100129b2:	d1f8      	bne.n	100129a6 <gattm_add_svc_req_handler+0x46>
100129b4:	1c27      	adds	r7, r4, #0
100129b6:	2300      	movs	r3, #0
100129b8:	251e      	movs	r5, #30
100129ba:	3716      	adds	r7, #22
100129bc:	9300      	str	r3, [sp, #0]
100129be:	9b00      	ldr	r3, [sp, #0]
100129c0:	9a01      	ldr	r2, [sp, #4]
100129c2:	4e23      	ldr	r6, [pc, #140]	; (10012a50 <gattm_add_svc_req_handler+0xf0>)
100129c4:	4293      	cmp	r3, r2
100129c6:	da21      	bge.n	10012a0c <gattm_add_svc_req_handler+0xac>
100129c8:	1c39      	adds	r1, r7, #0
100129ca:	1970      	adds	r0, r6, r5
100129cc:	2210      	movs	r2, #16
100129ce:	4b22      	ldr	r3, [pc, #136]	; (10012a58 <gattm_add_svc_req_handler+0xf8>)
100129d0:	4798      	blx	r3
100129d2:	1c2b      	adds	r3, r5, #0
100129d4:	8a3a      	ldrh	r2, [r7, #16]
100129d6:	3310      	adds	r3, #16
100129d8:	b29b      	uxth	r3, r3
100129da:	54f2      	strb	r2, [r6, r3]
100129dc:	1c2b      	adds	r3, r5, #0
100129de:	8a3a      	ldrh	r2, [r7, #16]
100129e0:	3311      	adds	r3, #17
100129e2:	b29b      	uxth	r3, r3
100129e4:	0a12      	lsrs	r2, r2, #8
100129e6:	54f2      	strb	r2, [r6, r3]
100129e8:	1c2a      	adds	r2, r5, #0
100129ea:	1c2b      	adds	r3, r5, #0
100129ec:	8a79      	ldrh	r1, [r7, #18]
100129ee:	3212      	adds	r2, #18
100129f0:	b292      	uxth	r2, r2
100129f2:	54b1      	strb	r1, [r6, r2]
100129f4:	8a7a      	ldrh	r2, [r7, #18]
100129f6:	3313      	adds	r3, #19
100129f8:	b29b      	uxth	r3, r3
100129fa:	0a12      	lsrs	r2, r2, #8
100129fc:	54f2      	strb	r2, [r6, r3]
100129fe:	9b00      	ldr	r3, [sp, #0]
10012a00:	3514      	adds	r5, #20
10012a02:	3301      	adds	r3, #1
10012a04:	b2ad      	uxth	r5, r5
10012a06:	9300      	str	r3, [sp, #0]
10012a08:	3714      	adds	r7, #20
10012a0a:	e7d8      	b.n	100129be <gattm_add_svc_req_handler+0x5e>
10012a0c:	2114      	movs	r1, #20
10012a0e:	4d13      	ldr	r5, [pc, #76]	; (10012a5c <gattm_add_svc_req_handler+0xfc>)
10012a10:	4b13      	ldr	r3, [pc, #76]	; (10012a60 <gattm_add_svc_req_handler+0x100>)
10012a12:	4351      	muls	r1, r2
10012a14:	802b      	strh	r3, [r5, #0]
10012a16:	230b      	movs	r3, #11
10012a18:	311e      	adds	r1, #30
10012a1a:	80ab      	strh	r3, [r5, #4]
10012a1c:	1c0b      	adds	r3, r1, #0
10012a1e:	3b08      	subs	r3, #8
10012a20:	71b3      	strb	r3, [r6, #6]
10012a22:	121b      	asrs	r3, r3, #8
10012a24:	71f3      	strb	r3, [r6, #7]
10012a26:	1c30      	adds	r0, r6, #0
10012a28:	4b0e      	ldr	r3, [pc, #56]	; (10012a64 <gattm_add_svc_req_handler+0x104>)
10012a2a:	4798      	blx	r3
10012a2c:	ab02      	add	r3, sp, #8
10012a2e:	1dde      	adds	r6, r3, #7
10012a30:	1c30      	adds	r0, r6, #0
10012a32:	4b0d      	ldr	r3, [pc, #52]	; (10012a68 <gattm_add_svc_req_handler+0x108>)
10012a34:	4798      	blx	r3
10012a36:	7833      	ldrb	r3, [r6, #0]
10012a38:	20e2      	movs	r0, #226	; 0xe2
10012a3a:	2b00      	cmp	r3, #0
10012a3c:	d106      	bne.n	10012a4c <gattm_add_svc_req_handler+0xec>
10012a3e:	68aa      	ldr	r2, [r5, #8]
10012a40:	7853      	ldrb	r3, [r2, #1]
10012a42:	7811      	ldrb	r1, [r2, #0]
10012a44:	021b      	lsls	r3, r3, #8
10012a46:	430b      	orrs	r3, r1
10012a48:	8023      	strh	r3, [r4, #0]
10012a4a:	7890      	ldrb	r0, [r2, #2]
10012a4c:	b005      	add	sp, #20
10012a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a50:	1001a9fc 	.word	0x1001a9fc
10012a54:	1001a68c 	.word	0x1001a68c
10012a58:	100149cf 	.word	0x100149cf
10012a5c:	1001a680 	.word	0x1001a680
10012a60:	00000b01 	.word	0x00000b01
10012a64:	100112b5 	.word	0x100112b5
10012a68:	10011319 	.word	0x10011319

10012a6c <gattm_add_attribute_req_handler>:
10012a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012a6e:	1c1f      	adds	r7, r3, #0
10012a70:	4b16      	ldr	r3, [pc, #88]	; (10012acc <gattm_add_attribute_req_handler+0x60>)
10012a72:	9100      	str	r1, [sp, #0]
10012a74:	9201      	str	r2, [sp, #4]
10012a76:	1c05      	adds	r5, r0, #0
10012a78:	7946      	ldrb	r6, [r0, #5]
10012a7a:	6818      	ldr	r0, [r3, #0]
10012a7c:	2114      	movs	r1, #20
10012a7e:	4b14      	ldr	r3, [pc, #80]	; (10012ad0 <gattm_add_attribute_req_handler+0x64>)
10012a80:	382a      	subs	r0, #42	; 0x2a
10012a82:	4798      	blx	r3
10012a84:	2311      	movs	r3, #17
10012a86:	4286      	cmp	r6, r0
10012a88:	d21e      	bcs.n	10012ac8 <gattm_add_attribute_req_handler+0x5c>
10012a8a:	2414      	movs	r4, #20
10012a8c:	4366      	muls	r6, r4
10012a8e:	19a8      	adds	r0, r5, r6
10012a90:	2100      	movs	r1, #0
10012a92:	2210      	movs	r2, #16
10012a94:	4b0f      	ldr	r3, [pc, #60]	; (10012ad4 <gattm_add_attribute_req_handler+0x68>)
10012a96:	3016      	adds	r0, #22
10012a98:	4798      	blx	r3
10012a9a:	7968      	ldrb	r0, [r5, #5]
10012a9c:	1c3a      	adds	r2, r7, #0
10012a9e:	4360      	muls	r0, r4
10012aa0:	1828      	adds	r0, r5, r0
10012aa2:	4b0d      	ldr	r3, [pc, #52]	; (10012ad8 <gattm_add_attribute_req_handler+0x6c>)
10012aa4:	3016      	adds	r0, #22
10012aa6:	9908      	ldr	r1, [sp, #32]
10012aa8:	4798      	blx	r3
10012aaa:	466a      	mov	r2, sp
10012aac:	796b      	ldrb	r3, [r5, #5]
10012aae:	8812      	ldrh	r2, [r2, #0]
10012ab0:	435c      	muls	r4, r3
10012ab2:	192c      	adds	r4, r5, r4
10012ab4:	8522      	strh	r2, [r4, #40]	; 0x28
10012ab6:	466a      	mov	r2, sp
10012ab8:	8892      	ldrh	r2, [r2, #4]
10012aba:	84e2      	strh	r2, [r4, #38]	; 0x26
10012abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012abe:	8013      	strh	r3, [r2, #0]
10012ac0:	796b      	ldrb	r3, [r5, #5]
10012ac2:	3301      	adds	r3, #1
10012ac4:	716b      	strb	r3, [r5, #5]
10012ac6:	2300      	movs	r3, #0
10012ac8:	1c18      	adds	r0, r3, #0
10012aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012acc:	10019794 	.word	0x10019794
10012ad0:	10012c59 	.word	0x10012c59
10012ad4:	100149e1 	.word	0x100149e1
10012ad8:	100149cf 	.word	0x100149cf

10012adc <gattm_att_set_value_req_handler>:
10012adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012ade:	466b      	mov	r3, sp
10012ae0:	1dde      	adds	r6, r3, #7
10012ae2:	2300      	movs	r3, #0
10012ae4:	1c0d      	adds	r5, r1, #0
10012ae6:	210c      	movs	r1, #12
10012ae8:	270b      	movs	r7, #11
10012aea:	4c17      	ldr	r4, [pc, #92]	; (10012b48 <gattm_att_set_value_req_handler+0x6c>)
10012aec:	7033      	strb	r3, [r6, #0]
10012aee:	70e3      	strb	r3, [r4, #3]
10012af0:	4b16      	ldr	r3, [pc, #88]	; (10012b4c <gattm_att_set_value_req_handler+0x70>)
10012af2:	7021      	strb	r1, [r4, #0]
10012af4:	8819      	ldrh	r1, [r3, #0]
10012af6:	881b      	ldrh	r3, [r3, #0]
10012af8:	7220      	strb	r0, [r4, #8]
10012afa:	0a1b      	lsrs	r3, r3, #8
10012afc:	7163      	strb	r3, [r4, #5]
10012afe:	0a00      	lsrs	r0, r0, #8
10012b00:	0a2b      	lsrs	r3, r5, #8
10012b02:	7121      	strb	r1, [r4, #4]
10012b04:	7260      	strb	r0, [r4, #9]
10012b06:	1c11      	adds	r1, r2, #0
10012b08:	72a5      	strb	r5, [r4, #10]
10012b0a:	1c2a      	adds	r2, r5, #0
10012b0c:	72e3      	strb	r3, [r4, #11]
10012b0e:	350c      	adds	r5, #12
10012b10:	4b0f      	ldr	r3, [pc, #60]	; (10012b50 <gattm_att_set_value_req_handler+0x74>)
10012b12:	4810      	ldr	r0, [pc, #64]	; (10012b54 <gattm_att_set_value_req_handler+0x78>)
10012b14:	7067      	strb	r7, [r4, #1]
10012b16:	70a7      	strb	r7, [r4, #2]
10012b18:	4798      	blx	r3
10012b1a:	b2a9      	uxth	r1, r5
10012b1c:	4b0e      	ldr	r3, [pc, #56]	; (10012b58 <gattm_att_set_value_req_handler+0x7c>)
10012b1e:	4d0f      	ldr	r5, [pc, #60]	; (10012b5c <gattm_att_set_value_req_handler+0x80>)
10012b20:	1c20      	adds	r0, r4, #0
10012b22:	802b      	strh	r3, [r5, #0]
10012b24:	1c0b      	adds	r3, r1, #0
10012b26:	3b08      	subs	r3, #8
10012b28:	71a3      	strb	r3, [r4, #6]
10012b2a:	121b      	asrs	r3, r3, #8
10012b2c:	71e3      	strb	r3, [r4, #7]
10012b2e:	4b0c      	ldr	r3, [pc, #48]	; (10012b60 <gattm_att_set_value_req_handler+0x84>)
10012b30:	80af      	strh	r7, [r5, #4]
10012b32:	4798      	blx	r3
10012b34:	1c30      	adds	r0, r6, #0
10012b36:	4b0b      	ldr	r3, [pc, #44]	; (10012b64 <gattm_att_set_value_req_handler+0x88>)
10012b38:	4798      	blx	r3
10012b3a:	7833      	ldrb	r3, [r6, #0]
10012b3c:	20e2      	movs	r0, #226	; 0xe2
10012b3e:	2b00      	cmp	r3, #0
10012b40:	d101      	bne.n	10012b46 <gattm_att_set_value_req_handler+0x6a>
10012b42:	68ab      	ldr	r3, [r5, #8]
10012b44:	7898      	ldrb	r0, [r3, #2]
10012b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012b48:	1001a9fc 	.word	0x1001a9fc
10012b4c:	1001a68c 	.word	0x1001a68c
10012b50:	100149cf 	.word	0x100149cf
10012b54:	1001aa08 	.word	0x1001aa08
10012b58:	00000b0d 	.word	0x00000b0d
10012b5c:	1001a680 	.word	0x1001a680
10012b60:	100112b5 	.word	0x100112b5
10012b64:	10011319 	.word	0x10011319

10012b68 <gattm_att_get_value_req_handler>:
10012b68:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b6a:	b085      	sub	sp, #20
10012b6c:	9201      	str	r2, [sp, #4]
10012b6e:	220a      	movs	r2, #10
10012b70:	1c04      	adds	r4, r0, #0
10012b72:	481d      	ldr	r0, [pc, #116]	; (10012be8 <gattm_att_get_value_req_handler+0x80>)
10012b74:	ab02      	add	r3, sp, #8
10012b76:	1dde      	adds	r6, r3, #7
10012b78:	7002      	strb	r2, [r0, #0]
10012b7a:	2300      	movs	r3, #0
10012b7c:	220b      	movs	r2, #11
10012b7e:	4d1b      	ldr	r5, [pc, #108]	; (10012bec <gattm_att_get_value_req_handler+0x84>)
10012b80:	1c0f      	adds	r7, r1, #0
10012b82:	8829      	ldrh	r1, [r5, #0]
10012b84:	882d      	ldrh	r5, [r5, #0]
10012b86:	7101      	strb	r1, [r0, #4]
10012b88:	0a2d      	lsrs	r5, r5, #8
10012b8a:	7145      	strb	r5, [r0, #5]
10012b8c:	0a25      	lsrs	r5, r4, #8
10012b8e:	7245      	strb	r5, [r0, #9]
10012b90:	4917      	ldr	r1, [pc, #92]	; (10012bf0 <gattm_att_get_value_req_handler+0x88>)
10012b92:	4d18      	ldr	r5, [pc, #96]	; (10012bf4 <gattm_att_get_value_req_handler+0x8c>)
10012b94:	7033      	strb	r3, [r6, #0]
10012b96:	7042      	strb	r2, [r0, #1]
10012b98:	7082      	strb	r2, [r0, #2]
10012b9a:	70c3      	strb	r3, [r0, #3]
10012b9c:	8029      	strh	r1, [r5, #0]
10012b9e:	80aa      	strh	r2, [r5, #4]
10012ba0:	71c3      	strb	r3, [r0, #7]
10012ba2:	3a09      	subs	r2, #9
10012ba4:	210a      	movs	r1, #10
10012ba6:	4b14      	ldr	r3, [pc, #80]	; (10012bf8 <gattm_att_get_value_req_handler+0x90>)
10012ba8:	7182      	strb	r2, [r0, #6]
10012baa:	7204      	strb	r4, [r0, #8]
10012bac:	4798      	blx	r3
10012bae:	1c30      	adds	r0, r6, #0
10012bb0:	4b12      	ldr	r3, [pc, #72]	; (10012bfc <gattm_att_get_value_req_handler+0x94>)
10012bb2:	4798      	blx	r3
10012bb4:	7833      	ldrb	r3, [r6, #0]
10012bb6:	20e2      	movs	r0, #226	; 0xe2
10012bb8:	2b00      	cmp	r3, #0
10012bba:	d112      	bne.n	10012be2 <gattm_att_get_value_req_handler+0x7a>
10012bbc:	68a9      	ldr	r1, [r5, #8]
10012bbe:	9801      	ldr	r0, [sp, #4]
10012bc0:	784d      	ldrb	r5, [r1, #1]
10012bc2:	780b      	ldrb	r3, [r1, #0]
10012bc4:	78ca      	ldrb	r2, [r1, #3]
10012bc6:	022d      	lsls	r5, r5, #8
10012bc8:	431d      	orrs	r5, r3
10012bca:	788b      	ldrb	r3, [r1, #2]
10012bcc:	0212      	lsls	r2, r2, #8
10012bce:	431a      	orrs	r2, r3
10012bd0:	803a      	strh	r2, [r7, #0]
10012bd2:	790e      	ldrb	r6, [r1, #4]
10012bd4:	4b0a      	ldr	r3, [pc, #40]	; (10012c00 <gattm_att_get_value_req_handler+0x98>)
10012bd6:	3105      	adds	r1, #5
10012bd8:	4798      	blx	r3
10012bda:	20e2      	movs	r0, #226	; 0xe2
10012bdc:	42ac      	cmp	r4, r5
10012bde:	d100      	bne.n	10012be2 <gattm_att_get_value_req_handler+0x7a>
10012be0:	1c30      	adds	r0, r6, #0
10012be2:	b005      	add	sp, #20
10012be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012be6:	46c0      	nop			; (mov r8, r8)
10012be8:	1001a9fc 	.word	0x1001a9fc
10012bec:	1001a68c 	.word	0x1001a68c
10012bf0:	00000b0b 	.word	0x00000b0b
10012bf4:	1001a680 	.word	0x1001a680
10012bf8:	100112b5 	.word	0x100112b5
10012bfc:	10011319 	.word	0x10011319
10012c00:	100149cf 	.word	0x100149cf

10012c04 <htpt_enable_rsp_handler>:
10012c04:	780b      	ldrb	r3, [r1, #0]
10012c06:	7013      	strb	r3, [r2, #0]
10012c08:	784b      	ldrb	r3, [r1, #1]
10012c0a:	7053      	strb	r3, [r2, #1]
10012c0c:	4770      	bx	lr

10012c0e <htpt_temp_send_rsp_handler>:
10012c0e:	780b      	ldrb	r3, [r1, #0]
10012c10:	7013      	strb	r3, [r2, #0]
10012c12:	4770      	bx	lr

10012c14 <htpt_meas_intv_upd_rsp_handler>:
10012c14:	780b      	ldrb	r3, [r1, #0]
10012c16:	7013      	strb	r3, [r2, #0]
10012c18:	4770      	bx	lr

10012c1a <htpt_meas_intv_chg_req_ind_handler>:
10012c1a:	78cb      	ldrb	r3, [r1, #3]
10012c1c:	7889      	ldrb	r1, [r1, #2]
10012c1e:	021b      	lsls	r3, r3, #8
10012c20:	430b      	orrs	r3, r1
10012c22:	8013      	strh	r3, [r2, #0]
10012c24:	4770      	bx	lr

10012c26 <htpt_cfg_indntf_ind_handler>:
10012c26:	780b      	ldrb	r3, [r1, #0]
10012c28:	7013      	strb	r3, [r2, #0]
10012c2a:	784b      	ldrb	r3, [r1, #1]
10012c2c:	7053      	strb	r3, [r2, #1]
10012c2e:	4770      	bx	lr

10012c30 <__gnu_thumb1_case_sqi>:
10012c30:	b402      	push	{r1}
10012c32:	4671      	mov	r1, lr
10012c34:	0849      	lsrs	r1, r1, #1
10012c36:	0049      	lsls	r1, r1, #1
10012c38:	5609      	ldrsb	r1, [r1, r0]
10012c3a:	0049      	lsls	r1, r1, #1
10012c3c:	448e      	add	lr, r1
10012c3e:	bc02      	pop	{r1}
10012c40:	4770      	bx	lr
10012c42:	46c0      	nop			; (mov r8, r8)

10012c44 <__gnu_thumb1_case_uqi>:
10012c44:	b402      	push	{r1}
10012c46:	4671      	mov	r1, lr
10012c48:	0849      	lsrs	r1, r1, #1
10012c4a:	0049      	lsls	r1, r1, #1
10012c4c:	5c09      	ldrb	r1, [r1, r0]
10012c4e:	0049      	lsls	r1, r1, #1
10012c50:	448e      	add	lr, r1
10012c52:	bc02      	pop	{r1}
10012c54:	4770      	bx	lr
10012c56:	46c0      	nop			; (mov r8, r8)

10012c58 <__aeabi_uidiv>:
10012c58:	2200      	movs	r2, #0
10012c5a:	0843      	lsrs	r3, r0, #1
10012c5c:	428b      	cmp	r3, r1
10012c5e:	d374      	bcc.n	10012d4a <__aeabi_uidiv+0xf2>
10012c60:	0903      	lsrs	r3, r0, #4
10012c62:	428b      	cmp	r3, r1
10012c64:	d35f      	bcc.n	10012d26 <__aeabi_uidiv+0xce>
10012c66:	0a03      	lsrs	r3, r0, #8
10012c68:	428b      	cmp	r3, r1
10012c6a:	d344      	bcc.n	10012cf6 <__aeabi_uidiv+0x9e>
10012c6c:	0b03      	lsrs	r3, r0, #12
10012c6e:	428b      	cmp	r3, r1
10012c70:	d328      	bcc.n	10012cc4 <__aeabi_uidiv+0x6c>
10012c72:	0c03      	lsrs	r3, r0, #16
10012c74:	428b      	cmp	r3, r1
10012c76:	d30d      	bcc.n	10012c94 <__aeabi_uidiv+0x3c>
10012c78:	22ff      	movs	r2, #255	; 0xff
10012c7a:	0209      	lsls	r1, r1, #8
10012c7c:	ba12      	rev	r2, r2
10012c7e:	0c03      	lsrs	r3, r0, #16
10012c80:	428b      	cmp	r3, r1
10012c82:	d302      	bcc.n	10012c8a <__aeabi_uidiv+0x32>
10012c84:	1212      	asrs	r2, r2, #8
10012c86:	0209      	lsls	r1, r1, #8
10012c88:	d065      	beq.n	10012d56 <__aeabi_uidiv+0xfe>
10012c8a:	0b03      	lsrs	r3, r0, #12
10012c8c:	428b      	cmp	r3, r1
10012c8e:	d319      	bcc.n	10012cc4 <__aeabi_uidiv+0x6c>
10012c90:	e000      	b.n	10012c94 <__aeabi_uidiv+0x3c>
10012c92:	0a09      	lsrs	r1, r1, #8
10012c94:	0bc3      	lsrs	r3, r0, #15
10012c96:	428b      	cmp	r3, r1
10012c98:	d301      	bcc.n	10012c9e <__aeabi_uidiv+0x46>
10012c9a:	03cb      	lsls	r3, r1, #15
10012c9c:	1ac0      	subs	r0, r0, r3
10012c9e:	4152      	adcs	r2, r2
10012ca0:	0b83      	lsrs	r3, r0, #14
10012ca2:	428b      	cmp	r3, r1
10012ca4:	d301      	bcc.n	10012caa <__aeabi_uidiv+0x52>
10012ca6:	038b      	lsls	r3, r1, #14
10012ca8:	1ac0      	subs	r0, r0, r3
10012caa:	4152      	adcs	r2, r2
10012cac:	0b43      	lsrs	r3, r0, #13
10012cae:	428b      	cmp	r3, r1
10012cb0:	d301      	bcc.n	10012cb6 <__aeabi_uidiv+0x5e>
10012cb2:	034b      	lsls	r3, r1, #13
10012cb4:	1ac0      	subs	r0, r0, r3
10012cb6:	4152      	adcs	r2, r2
10012cb8:	0b03      	lsrs	r3, r0, #12
10012cba:	428b      	cmp	r3, r1
10012cbc:	d301      	bcc.n	10012cc2 <__aeabi_uidiv+0x6a>
10012cbe:	030b      	lsls	r3, r1, #12
10012cc0:	1ac0      	subs	r0, r0, r3
10012cc2:	4152      	adcs	r2, r2
10012cc4:	0ac3      	lsrs	r3, r0, #11
10012cc6:	428b      	cmp	r3, r1
10012cc8:	d301      	bcc.n	10012cce <__aeabi_uidiv+0x76>
10012cca:	02cb      	lsls	r3, r1, #11
10012ccc:	1ac0      	subs	r0, r0, r3
10012cce:	4152      	adcs	r2, r2
10012cd0:	0a83      	lsrs	r3, r0, #10
10012cd2:	428b      	cmp	r3, r1
10012cd4:	d301      	bcc.n	10012cda <__aeabi_uidiv+0x82>
10012cd6:	028b      	lsls	r3, r1, #10
10012cd8:	1ac0      	subs	r0, r0, r3
10012cda:	4152      	adcs	r2, r2
10012cdc:	0a43      	lsrs	r3, r0, #9
10012cde:	428b      	cmp	r3, r1
10012ce0:	d301      	bcc.n	10012ce6 <__aeabi_uidiv+0x8e>
10012ce2:	024b      	lsls	r3, r1, #9
10012ce4:	1ac0      	subs	r0, r0, r3
10012ce6:	4152      	adcs	r2, r2
10012ce8:	0a03      	lsrs	r3, r0, #8
10012cea:	428b      	cmp	r3, r1
10012cec:	d301      	bcc.n	10012cf2 <__aeabi_uidiv+0x9a>
10012cee:	020b      	lsls	r3, r1, #8
10012cf0:	1ac0      	subs	r0, r0, r3
10012cf2:	4152      	adcs	r2, r2
10012cf4:	d2cd      	bcs.n	10012c92 <__aeabi_uidiv+0x3a>
10012cf6:	09c3      	lsrs	r3, r0, #7
10012cf8:	428b      	cmp	r3, r1
10012cfa:	d301      	bcc.n	10012d00 <__aeabi_uidiv+0xa8>
10012cfc:	01cb      	lsls	r3, r1, #7
10012cfe:	1ac0      	subs	r0, r0, r3
10012d00:	4152      	adcs	r2, r2
10012d02:	0983      	lsrs	r3, r0, #6
10012d04:	428b      	cmp	r3, r1
10012d06:	d301      	bcc.n	10012d0c <__aeabi_uidiv+0xb4>
10012d08:	018b      	lsls	r3, r1, #6
10012d0a:	1ac0      	subs	r0, r0, r3
10012d0c:	4152      	adcs	r2, r2
10012d0e:	0943      	lsrs	r3, r0, #5
10012d10:	428b      	cmp	r3, r1
10012d12:	d301      	bcc.n	10012d18 <__aeabi_uidiv+0xc0>
10012d14:	014b      	lsls	r3, r1, #5
10012d16:	1ac0      	subs	r0, r0, r3
10012d18:	4152      	adcs	r2, r2
10012d1a:	0903      	lsrs	r3, r0, #4
10012d1c:	428b      	cmp	r3, r1
10012d1e:	d301      	bcc.n	10012d24 <__aeabi_uidiv+0xcc>
10012d20:	010b      	lsls	r3, r1, #4
10012d22:	1ac0      	subs	r0, r0, r3
10012d24:	4152      	adcs	r2, r2
10012d26:	08c3      	lsrs	r3, r0, #3
10012d28:	428b      	cmp	r3, r1
10012d2a:	d301      	bcc.n	10012d30 <__aeabi_uidiv+0xd8>
10012d2c:	00cb      	lsls	r3, r1, #3
10012d2e:	1ac0      	subs	r0, r0, r3
10012d30:	4152      	adcs	r2, r2
10012d32:	0883      	lsrs	r3, r0, #2
10012d34:	428b      	cmp	r3, r1
10012d36:	d301      	bcc.n	10012d3c <__aeabi_uidiv+0xe4>
10012d38:	008b      	lsls	r3, r1, #2
10012d3a:	1ac0      	subs	r0, r0, r3
10012d3c:	4152      	adcs	r2, r2
10012d3e:	0843      	lsrs	r3, r0, #1
10012d40:	428b      	cmp	r3, r1
10012d42:	d301      	bcc.n	10012d48 <__aeabi_uidiv+0xf0>
10012d44:	004b      	lsls	r3, r1, #1
10012d46:	1ac0      	subs	r0, r0, r3
10012d48:	4152      	adcs	r2, r2
10012d4a:	1a41      	subs	r1, r0, r1
10012d4c:	d200      	bcs.n	10012d50 <__aeabi_uidiv+0xf8>
10012d4e:	4601      	mov	r1, r0
10012d50:	4152      	adcs	r2, r2
10012d52:	4610      	mov	r0, r2
10012d54:	4770      	bx	lr
10012d56:	e7ff      	b.n	10012d58 <__aeabi_uidiv+0x100>
10012d58:	b501      	push	{r0, lr}
10012d5a:	2000      	movs	r0, #0
10012d5c:	f000 f8f0 	bl	10012f40 <__aeabi_idiv0>
10012d60:	bd02      	pop	{r1, pc}
10012d62:	46c0      	nop			; (mov r8, r8)

10012d64 <__aeabi_uidivmod>:
10012d64:	2900      	cmp	r1, #0
10012d66:	d0f7      	beq.n	10012d58 <__aeabi_uidiv+0x100>
10012d68:	e776      	b.n	10012c58 <__aeabi_uidiv>
10012d6a:	4770      	bx	lr

10012d6c <__aeabi_idiv>:
10012d6c:	4603      	mov	r3, r0
10012d6e:	430b      	orrs	r3, r1
10012d70:	d47f      	bmi.n	10012e72 <__aeabi_idiv+0x106>
10012d72:	2200      	movs	r2, #0
10012d74:	0843      	lsrs	r3, r0, #1
10012d76:	428b      	cmp	r3, r1
10012d78:	d374      	bcc.n	10012e64 <__aeabi_idiv+0xf8>
10012d7a:	0903      	lsrs	r3, r0, #4
10012d7c:	428b      	cmp	r3, r1
10012d7e:	d35f      	bcc.n	10012e40 <__aeabi_idiv+0xd4>
10012d80:	0a03      	lsrs	r3, r0, #8
10012d82:	428b      	cmp	r3, r1
10012d84:	d344      	bcc.n	10012e10 <__aeabi_idiv+0xa4>
10012d86:	0b03      	lsrs	r3, r0, #12
10012d88:	428b      	cmp	r3, r1
10012d8a:	d328      	bcc.n	10012dde <__aeabi_idiv+0x72>
10012d8c:	0c03      	lsrs	r3, r0, #16
10012d8e:	428b      	cmp	r3, r1
10012d90:	d30d      	bcc.n	10012dae <__aeabi_idiv+0x42>
10012d92:	22ff      	movs	r2, #255	; 0xff
10012d94:	0209      	lsls	r1, r1, #8
10012d96:	ba12      	rev	r2, r2
10012d98:	0c03      	lsrs	r3, r0, #16
10012d9a:	428b      	cmp	r3, r1
10012d9c:	d302      	bcc.n	10012da4 <__aeabi_idiv+0x38>
10012d9e:	1212      	asrs	r2, r2, #8
10012da0:	0209      	lsls	r1, r1, #8
10012da2:	d065      	beq.n	10012e70 <__aeabi_idiv+0x104>
10012da4:	0b03      	lsrs	r3, r0, #12
10012da6:	428b      	cmp	r3, r1
10012da8:	d319      	bcc.n	10012dde <__aeabi_idiv+0x72>
10012daa:	e000      	b.n	10012dae <__aeabi_idiv+0x42>
10012dac:	0a09      	lsrs	r1, r1, #8
10012dae:	0bc3      	lsrs	r3, r0, #15
10012db0:	428b      	cmp	r3, r1
10012db2:	d301      	bcc.n	10012db8 <__aeabi_idiv+0x4c>
10012db4:	03cb      	lsls	r3, r1, #15
10012db6:	1ac0      	subs	r0, r0, r3
10012db8:	4152      	adcs	r2, r2
10012dba:	0b83      	lsrs	r3, r0, #14
10012dbc:	428b      	cmp	r3, r1
10012dbe:	d301      	bcc.n	10012dc4 <__aeabi_idiv+0x58>
10012dc0:	038b      	lsls	r3, r1, #14
10012dc2:	1ac0      	subs	r0, r0, r3
10012dc4:	4152      	adcs	r2, r2
10012dc6:	0b43      	lsrs	r3, r0, #13
10012dc8:	428b      	cmp	r3, r1
10012dca:	d301      	bcc.n	10012dd0 <__aeabi_idiv+0x64>
10012dcc:	034b      	lsls	r3, r1, #13
10012dce:	1ac0      	subs	r0, r0, r3
10012dd0:	4152      	adcs	r2, r2
10012dd2:	0b03      	lsrs	r3, r0, #12
10012dd4:	428b      	cmp	r3, r1
10012dd6:	d301      	bcc.n	10012ddc <__aeabi_idiv+0x70>
10012dd8:	030b      	lsls	r3, r1, #12
10012dda:	1ac0      	subs	r0, r0, r3
10012ddc:	4152      	adcs	r2, r2
10012dde:	0ac3      	lsrs	r3, r0, #11
10012de0:	428b      	cmp	r3, r1
10012de2:	d301      	bcc.n	10012de8 <__aeabi_idiv+0x7c>
10012de4:	02cb      	lsls	r3, r1, #11
10012de6:	1ac0      	subs	r0, r0, r3
10012de8:	4152      	adcs	r2, r2
10012dea:	0a83      	lsrs	r3, r0, #10
10012dec:	428b      	cmp	r3, r1
10012dee:	d301      	bcc.n	10012df4 <__aeabi_idiv+0x88>
10012df0:	028b      	lsls	r3, r1, #10
10012df2:	1ac0      	subs	r0, r0, r3
10012df4:	4152      	adcs	r2, r2
10012df6:	0a43      	lsrs	r3, r0, #9
10012df8:	428b      	cmp	r3, r1
10012dfa:	d301      	bcc.n	10012e00 <__aeabi_idiv+0x94>
10012dfc:	024b      	lsls	r3, r1, #9
10012dfe:	1ac0      	subs	r0, r0, r3
10012e00:	4152      	adcs	r2, r2
10012e02:	0a03      	lsrs	r3, r0, #8
10012e04:	428b      	cmp	r3, r1
10012e06:	d301      	bcc.n	10012e0c <__aeabi_idiv+0xa0>
10012e08:	020b      	lsls	r3, r1, #8
10012e0a:	1ac0      	subs	r0, r0, r3
10012e0c:	4152      	adcs	r2, r2
10012e0e:	d2cd      	bcs.n	10012dac <__aeabi_idiv+0x40>
10012e10:	09c3      	lsrs	r3, r0, #7
10012e12:	428b      	cmp	r3, r1
10012e14:	d301      	bcc.n	10012e1a <__aeabi_idiv+0xae>
10012e16:	01cb      	lsls	r3, r1, #7
10012e18:	1ac0      	subs	r0, r0, r3
10012e1a:	4152      	adcs	r2, r2
10012e1c:	0983      	lsrs	r3, r0, #6
10012e1e:	428b      	cmp	r3, r1
10012e20:	d301      	bcc.n	10012e26 <__aeabi_idiv+0xba>
10012e22:	018b      	lsls	r3, r1, #6
10012e24:	1ac0      	subs	r0, r0, r3
10012e26:	4152      	adcs	r2, r2
10012e28:	0943      	lsrs	r3, r0, #5
10012e2a:	428b      	cmp	r3, r1
10012e2c:	d301      	bcc.n	10012e32 <__aeabi_idiv+0xc6>
10012e2e:	014b      	lsls	r3, r1, #5
10012e30:	1ac0      	subs	r0, r0, r3
10012e32:	4152      	adcs	r2, r2
10012e34:	0903      	lsrs	r3, r0, #4
10012e36:	428b      	cmp	r3, r1
10012e38:	d301      	bcc.n	10012e3e <__aeabi_idiv+0xd2>
10012e3a:	010b      	lsls	r3, r1, #4
10012e3c:	1ac0      	subs	r0, r0, r3
10012e3e:	4152      	adcs	r2, r2
10012e40:	08c3      	lsrs	r3, r0, #3
10012e42:	428b      	cmp	r3, r1
10012e44:	d301      	bcc.n	10012e4a <__aeabi_idiv+0xde>
10012e46:	00cb      	lsls	r3, r1, #3
10012e48:	1ac0      	subs	r0, r0, r3
10012e4a:	4152      	adcs	r2, r2
10012e4c:	0883      	lsrs	r3, r0, #2
10012e4e:	428b      	cmp	r3, r1
10012e50:	d301      	bcc.n	10012e56 <__aeabi_idiv+0xea>
10012e52:	008b      	lsls	r3, r1, #2
10012e54:	1ac0      	subs	r0, r0, r3
10012e56:	4152      	adcs	r2, r2
10012e58:	0843      	lsrs	r3, r0, #1
10012e5a:	428b      	cmp	r3, r1
10012e5c:	d301      	bcc.n	10012e62 <__aeabi_idiv+0xf6>
10012e5e:	004b      	lsls	r3, r1, #1
10012e60:	1ac0      	subs	r0, r0, r3
10012e62:	4152      	adcs	r2, r2
10012e64:	1a41      	subs	r1, r0, r1
10012e66:	d200      	bcs.n	10012e6a <__aeabi_idiv+0xfe>
10012e68:	4601      	mov	r1, r0
10012e6a:	4152      	adcs	r2, r2
10012e6c:	4610      	mov	r0, r2
10012e6e:	4770      	bx	lr
10012e70:	e05d      	b.n	10012f2e <__aeabi_idiv+0x1c2>
10012e72:	0fca      	lsrs	r2, r1, #31
10012e74:	d000      	beq.n	10012e78 <__aeabi_idiv+0x10c>
10012e76:	4249      	negs	r1, r1
10012e78:	1003      	asrs	r3, r0, #32
10012e7a:	d300      	bcc.n	10012e7e <__aeabi_idiv+0x112>
10012e7c:	4240      	negs	r0, r0
10012e7e:	4053      	eors	r3, r2
10012e80:	2200      	movs	r2, #0
10012e82:	469c      	mov	ip, r3
10012e84:	0903      	lsrs	r3, r0, #4
10012e86:	428b      	cmp	r3, r1
10012e88:	d32d      	bcc.n	10012ee6 <__aeabi_idiv+0x17a>
10012e8a:	0a03      	lsrs	r3, r0, #8
10012e8c:	428b      	cmp	r3, r1
10012e8e:	d312      	bcc.n	10012eb6 <__aeabi_idiv+0x14a>
10012e90:	22fc      	movs	r2, #252	; 0xfc
10012e92:	0189      	lsls	r1, r1, #6
10012e94:	ba12      	rev	r2, r2
10012e96:	0a03      	lsrs	r3, r0, #8
10012e98:	428b      	cmp	r3, r1
10012e9a:	d30c      	bcc.n	10012eb6 <__aeabi_idiv+0x14a>
10012e9c:	0189      	lsls	r1, r1, #6
10012e9e:	1192      	asrs	r2, r2, #6
10012ea0:	428b      	cmp	r3, r1
10012ea2:	d308      	bcc.n	10012eb6 <__aeabi_idiv+0x14a>
10012ea4:	0189      	lsls	r1, r1, #6
10012ea6:	1192      	asrs	r2, r2, #6
10012ea8:	428b      	cmp	r3, r1
10012eaa:	d304      	bcc.n	10012eb6 <__aeabi_idiv+0x14a>
10012eac:	0189      	lsls	r1, r1, #6
10012eae:	d03a      	beq.n	10012f26 <__aeabi_idiv+0x1ba>
10012eb0:	1192      	asrs	r2, r2, #6
10012eb2:	e000      	b.n	10012eb6 <__aeabi_idiv+0x14a>
10012eb4:	0989      	lsrs	r1, r1, #6
10012eb6:	09c3      	lsrs	r3, r0, #7
10012eb8:	428b      	cmp	r3, r1
10012eba:	d301      	bcc.n	10012ec0 <__aeabi_idiv+0x154>
10012ebc:	01cb      	lsls	r3, r1, #7
10012ebe:	1ac0      	subs	r0, r0, r3
10012ec0:	4152      	adcs	r2, r2
10012ec2:	0983      	lsrs	r3, r0, #6
10012ec4:	428b      	cmp	r3, r1
10012ec6:	d301      	bcc.n	10012ecc <__aeabi_idiv+0x160>
10012ec8:	018b      	lsls	r3, r1, #6
10012eca:	1ac0      	subs	r0, r0, r3
10012ecc:	4152      	adcs	r2, r2
10012ece:	0943      	lsrs	r3, r0, #5
10012ed0:	428b      	cmp	r3, r1
10012ed2:	d301      	bcc.n	10012ed8 <__aeabi_idiv+0x16c>
10012ed4:	014b      	lsls	r3, r1, #5
10012ed6:	1ac0      	subs	r0, r0, r3
10012ed8:	4152      	adcs	r2, r2
10012eda:	0903      	lsrs	r3, r0, #4
10012edc:	428b      	cmp	r3, r1
10012ede:	d301      	bcc.n	10012ee4 <__aeabi_idiv+0x178>
10012ee0:	010b      	lsls	r3, r1, #4
10012ee2:	1ac0      	subs	r0, r0, r3
10012ee4:	4152      	adcs	r2, r2
10012ee6:	08c3      	lsrs	r3, r0, #3
10012ee8:	428b      	cmp	r3, r1
10012eea:	d301      	bcc.n	10012ef0 <__aeabi_idiv+0x184>
10012eec:	00cb      	lsls	r3, r1, #3
10012eee:	1ac0      	subs	r0, r0, r3
10012ef0:	4152      	adcs	r2, r2
10012ef2:	0883      	lsrs	r3, r0, #2
10012ef4:	428b      	cmp	r3, r1
10012ef6:	d301      	bcc.n	10012efc <__aeabi_idiv+0x190>
10012ef8:	008b      	lsls	r3, r1, #2
10012efa:	1ac0      	subs	r0, r0, r3
10012efc:	4152      	adcs	r2, r2
10012efe:	d2d9      	bcs.n	10012eb4 <__aeabi_idiv+0x148>
10012f00:	0843      	lsrs	r3, r0, #1
10012f02:	428b      	cmp	r3, r1
10012f04:	d301      	bcc.n	10012f0a <__aeabi_idiv+0x19e>
10012f06:	004b      	lsls	r3, r1, #1
10012f08:	1ac0      	subs	r0, r0, r3
10012f0a:	4152      	adcs	r2, r2
10012f0c:	1a41      	subs	r1, r0, r1
10012f0e:	d200      	bcs.n	10012f12 <__aeabi_idiv+0x1a6>
10012f10:	4601      	mov	r1, r0
10012f12:	4663      	mov	r3, ip
10012f14:	4152      	adcs	r2, r2
10012f16:	105b      	asrs	r3, r3, #1
10012f18:	4610      	mov	r0, r2
10012f1a:	d301      	bcc.n	10012f20 <__aeabi_idiv+0x1b4>
10012f1c:	4240      	negs	r0, r0
10012f1e:	2b00      	cmp	r3, #0
10012f20:	d500      	bpl.n	10012f24 <__aeabi_idiv+0x1b8>
10012f22:	4249      	negs	r1, r1
10012f24:	4770      	bx	lr
10012f26:	4663      	mov	r3, ip
10012f28:	105b      	asrs	r3, r3, #1
10012f2a:	d300      	bcc.n	10012f2e <__aeabi_idiv+0x1c2>
10012f2c:	4240      	negs	r0, r0
10012f2e:	b501      	push	{r0, lr}
10012f30:	2000      	movs	r0, #0
10012f32:	f000 f805 	bl	10012f40 <__aeabi_idiv0>
10012f36:	bd02      	pop	{r1, pc}

10012f38 <__aeabi_idivmod>:
10012f38:	2900      	cmp	r1, #0
10012f3a:	d0f8      	beq.n	10012f2e <__aeabi_idiv+0x1c2>
10012f3c:	e716      	b.n	10012d6c <__aeabi_idiv>
10012f3e:	4770      	bx	lr

10012f40 <__aeabi_idiv0>:
10012f40:	4770      	bx	lr
10012f42:	46c0      	nop			; (mov r8, r8)

10012f44 <__aeabi_cdrcmple>:
10012f44:	4684      	mov	ip, r0
10012f46:	1c10      	adds	r0, r2, #0
10012f48:	4662      	mov	r2, ip
10012f4a:	468c      	mov	ip, r1
10012f4c:	1c19      	adds	r1, r3, #0
10012f4e:	4663      	mov	r3, ip
10012f50:	e000      	b.n	10012f54 <__aeabi_cdcmpeq>
10012f52:	46c0      	nop			; (mov r8, r8)

10012f54 <__aeabi_cdcmpeq>:
10012f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012f56:	f000 fe37 	bl	10013bc8 <__ledf2>
10012f5a:	2800      	cmp	r0, #0
10012f5c:	d401      	bmi.n	10012f62 <__aeabi_cdcmpeq+0xe>
10012f5e:	2100      	movs	r1, #0
10012f60:	42c8      	cmn	r0, r1
10012f62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012f64 <__aeabi_dcmpeq>:
10012f64:	b510      	push	{r4, lr}
10012f66:	f000 fd8b 	bl	10013a80 <__eqdf2>
10012f6a:	4240      	negs	r0, r0
10012f6c:	3001      	adds	r0, #1
10012f6e:	bd10      	pop	{r4, pc}

10012f70 <__aeabi_dcmplt>:
10012f70:	b510      	push	{r4, lr}
10012f72:	f000 fe29 	bl	10013bc8 <__ledf2>
10012f76:	2800      	cmp	r0, #0
10012f78:	db01      	blt.n	10012f7e <__aeabi_dcmplt+0xe>
10012f7a:	2000      	movs	r0, #0
10012f7c:	bd10      	pop	{r4, pc}
10012f7e:	2001      	movs	r0, #1
10012f80:	bd10      	pop	{r4, pc}
10012f82:	46c0      	nop			; (mov r8, r8)

10012f84 <__aeabi_dcmple>:
10012f84:	b510      	push	{r4, lr}
10012f86:	f000 fe1f 	bl	10013bc8 <__ledf2>
10012f8a:	2800      	cmp	r0, #0
10012f8c:	dd01      	ble.n	10012f92 <__aeabi_dcmple+0xe>
10012f8e:	2000      	movs	r0, #0
10012f90:	bd10      	pop	{r4, pc}
10012f92:	2001      	movs	r0, #1
10012f94:	bd10      	pop	{r4, pc}
10012f96:	46c0      	nop			; (mov r8, r8)

10012f98 <__aeabi_dcmpgt>:
10012f98:	b510      	push	{r4, lr}
10012f9a:	f000 fdb1 	bl	10013b00 <__gedf2>
10012f9e:	2800      	cmp	r0, #0
10012fa0:	dc01      	bgt.n	10012fa6 <__aeabi_dcmpgt+0xe>
10012fa2:	2000      	movs	r0, #0
10012fa4:	bd10      	pop	{r4, pc}
10012fa6:	2001      	movs	r0, #1
10012fa8:	bd10      	pop	{r4, pc}
10012faa:	46c0      	nop			; (mov r8, r8)

10012fac <__aeabi_dcmpge>:
10012fac:	b510      	push	{r4, lr}
10012fae:	f000 fda7 	bl	10013b00 <__gedf2>
10012fb2:	2800      	cmp	r0, #0
10012fb4:	da01      	bge.n	10012fba <__aeabi_dcmpge+0xe>
10012fb6:	2000      	movs	r0, #0
10012fb8:	bd10      	pop	{r4, pc}
10012fba:	2001      	movs	r0, #1
10012fbc:	bd10      	pop	{r4, pc}
10012fbe:	46c0      	nop			; (mov r8, r8)

10012fc0 <__aeabi_cfrcmple>:
10012fc0:	4684      	mov	ip, r0
10012fc2:	1c08      	adds	r0, r1, #0
10012fc4:	4661      	mov	r1, ip
10012fc6:	e7ff      	b.n	10012fc8 <__aeabi_cfcmpeq>

10012fc8 <__aeabi_cfcmpeq>:
10012fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012fca:	f000 fa1b 	bl	10013404 <__lesf2>
10012fce:	2800      	cmp	r0, #0
10012fd0:	d401      	bmi.n	10012fd6 <__aeabi_cfcmpeq+0xe>
10012fd2:	2100      	movs	r1, #0
10012fd4:	42c8      	cmn	r0, r1
10012fd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012fd8 <__aeabi_fcmpeq>:
10012fd8:	b510      	push	{r4, lr}
10012fda:	f000 f9a7 	bl	1001332c <__eqsf2>
10012fde:	4240      	negs	r0, r0
10012fe0:	3001      	adds	r0, #1
10012fe2:	bd10      	pop	{r4, pc}

10012fe4 <__aeabi_fcmplt>:
10012fe4:	b510      	push	{r4, lr}
10012fe6:	f000 fa0d 	bl	10013404 <__lesf2>
10012fea:	2800      	cmp	r0, #0
10012fec:	db01      	blt.n	10012ff2 <__aeabi_fcmplt+0xe>
10012fee:	2000      	movs	r0, #0
10012ff0:	bd10      	pop	{r4, pc}
10012ff2:	2001      	movs	r0, #1
10012ff4:	bd10      	pop	{r4, pc}
10012ff6:	46c0      	nop			; (mov r8, r8)

10012ff8 <__aeabi_fcmple>:
10012ff8:	b510      	push	{r4, lr}
10012ffa:	f000 fa03 	bl	10013404 <__lesf2>
10012ffe:	2800      	cmp	r0, #0
10013000:	dd01      	ble.n	10013006 <__aeabi_fcmple+0xe>
10013002:	2000      	movs	r0, #0
10013004:	bd10      	pop	{r4, pc}
10013006:	2001      	movs	r0, #1
10013008:	bd10      	pop	{r4, pc}
1001300a:	46c0      	nop			; (mov r8, r8)

1001300c <__aeabi_fcmpgt>:
1001300c:	b510      	push	{r4, lr}
1001300e:	f000 f9b5 	bl	1001337c <__gesf2>
10013012:	2800      	cmp	r0, #0
10013014:	dc01      	bgt.n	1001301a <__aeabi_fcmpgt+0xe>
10013016:	2000      	movs	r0, #0
10013018:	bd10      	pop	{r4, pc}
1001301a:	2001      	movs	r0, #1
1001301c:	bd10      	pop	{r4, pc}
1001301e:	46c0      	nop			; (mov r8, r8)

10013020 <__aeabi_fcmpge>:
10013020:	b510      	push	{r4, lr}
10013022:	f000 f9ab 	bl	1001337c <__gesf2>
10013026:	2800      	cmp	r0, #0
10013028:	da01      	bge.n	1001302e <__aeabi_fcmpge+0xe>
1001302a:	2000      	movs	r0, #0
1001302c:	bd10      	pop	{r4, pc}
1001302e:	2001      	movs	r0, #1
10013030:	bd10      	pop	{r4, pc}
10013032:	46c0      	nop			; (mov r8, r8)

10013034 <__aeabi_lmul>:
10013034:	b5f0      	push	{r4, r5, r6, r7, lr}
10013036:	464f      	mov	r7, r9
10013038:	4646      	mov	r6, r8
1001303a:	b4c0      	push	{r6, r7}
1001303c:	0416      	lsls	r6, r2, #16
1001303e:	0c36      	lsrs	r6, r6, #16
10013040:	4699      	mov	r9, r3
10013042:	0033      	movs	r3, r6
10013044:	0405      	lsls	r5, r0, #16
10013046:	0c2c      	lsrs	r4, r5, #16
10013048:	0c07      	lsrs	r7, r0, #16
1001304a:	0c15      	lsrs	r5, r2, #16
1001304c:	4363      	muls	r3, r4
1001304e:	437e      	muls	r6, r7
10013050:	436f      	muls	r7, r5
10013052:	4365      	muls	r5, r4
10013054:	0c1c      	lsrs	r4, r3, #16
10013056:	19ad      	adds	r5, r5, r6
10013058:	1964      	adds	r4, r4, r5
1001305a:	469c      	mov	ip, r3
1001305c:	42a6      	cmp	r6, r4
1001305e:	d903      	bls.n	10013068 <__aeabi_lmul+0x34>
10013060:	2380      	movs	r3, #128	; 0x80
10013062:	025b      	lsls	r3, r3, #9
10013064:	4698      	mov	r8, r3
10013066:	4447      	add	r7, r8
10013068:	4663      	mov	r3, ip
1001306a:	0c25      	lsrs	r5, r4, #16
1001306c:	19ef      	adds	r7, r5, r7
1001306e:	041d      	lsls	r5, r3, #16
10013070:	464b      	mov	r3, r9
10013072:	434a      	muls	r2, r1
10013074:	4343      	muls	r3, r0
10013076:	0c2d      	lsrs	r5, r5, #16
10013078:	0424      	lsls	r4, r4, #16
1001307a:	1964      	adds	r4, r4, r5
1001307c:	1899      	adds	r1, r3, r2
1001307e:	19c9      	adds	r1, r1, r7
10013080:	0020      	movs	r0, r4
10013082:	bc0c      	pop	{r2, r3}
10013084:	4690      	mov	r8, r2
10013086:	4699      	mov	r9, r3
10013088:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001308a:	46c0      	nop			; (mov r8, r8)

1001308c <__aeabi_f2uiz>:
1001308c:	219e      	movs	r1, #158	; 0x9e
1001308e:	b510      	push	{r4, lr}
10013090:	05c9      	lsls	r1, r1, #23
10013092:	1c04      	adds	r4, r0, #0
10013094:	f7ff ffc4 	bl	10013020 <__aeabi_fcmpge>
10013098:	2800      	cmp	r0, #0
1001309a:	d103      	bne.n	100130a4 <__aeabi_f2uiz+0x18>
1001309c:	1c20      	adds	r0, r4, #0
1001309e:	f000 fc8f 	bl	100139c0 <__aeabi_f2iz>
100130a2:	bd10      	pop	{r4, pc}
100130a4:	219e      	movs	r1, #158	; 0x9e
100130a6:	1c20      	adds	r0, r4, #0
100130a8:	05c9      	lsls	r1, r1, #23
100130aa:	f000 fb03 	bl	100136b4 <__aeabi_fsub>
100130ae:	f000 fc87 	bl	100139c0 <__aeabi_f2iz>
100130b2:	2380      	movs	r3, #128	; 0x80
100130b4:	061b      	lsls	r3, r3, #24
100130b6:	469c      	mov	ip, r3
100130b8:	4460      	add	r0, ip
100130ba:	e7f2      	b.n	100130a2 <__aeabi_f2uiz+0x16>

100130bc <__aeabi_d2uiz>:
100130bc:	b570      	push	{r4, r5, r6, lr}
100130be:	2200      	movs	r2, #0
100130c0:	4b0c      	ldr	r3, [pc, #48]	; (100130f4 <__aeabi_d2uiz+0x38>)
100130c2:	0004      	movs	r4, r0
100130c4:	000d      	movs	r5, r1
100130c6:	f7ff ff71 	bl	10012fac <__aeabi_dcmpge>
100130ca:	2800      	cmp	r0, #0
100130cc:	d104      	bne.n	100130d8 <__aeabi_d2uiz+0x1c>
100130ce:	0020      	movs	r0, r4
100130d0:	0029      	movs	r1, r5
100130d2:	f001 fbb1 	bl	10014838 <__aeabi_d2iz>
100130d6:	bd70      	pop	{r4, r5, r6, pc}
100130d8:	4b06      	ldr	r3, [pc, #24]	; (100130f4 <__aeabi_d2uiz+0x38>)
100130da:	2200      	movs	r2, #0
100130dc:	0020      	movs	r0, r4
100130de:	0029      	movs	r1, r5
100130e0:	f001 f856 	bl	10014190 <__aeabi_dsub>
100130e4:	f001 fba8 	bl	10014838 <__aeabi_d2iz>
100130e8:	2380      	movs	r3, #128	; 0x80
100130ea:	061b      	lsls	r3, r3, #24
100130ec:	469c      	mov	ip, r3
100130ee:	4460      	add	r0, ip
100130f0:	e7f1      	b.n	100130d6 <__aeabi_d2uiz+0x1a>
100130f2:	46c0      	nop			; (mov r8, r8)
100130f4:	41e00000 	.word	0x41e00000

100130f8 <__aeabi_fdiv>:
100130f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100130fa:	4656      	mov	r6, sl
100130fc:	4644      	mov	r4, r8
100130fe:	465f      	mov	r7, fp
10013100:	464d      	mov	r5, r9
10013102:	b4f0      	push	{r4, r5, r6, r7}
10013104:	0244      	lsls	r4, r0, #9
10013106:	0046      	lsls	r6, r0, #1
10013108:	0fc7      	lsrs	r7, r0, #31
1001310a:	b083      	sub	sp, #12
1001310c:	4688      	mov	r8, r1
1001310e:	0a65      	lsrs	r5, r4, #9
10013110:	0e36      	lsrs	r6, r6, #24
10013112:	46ba      	mov	sl, r7
10013114:	d03d      	beq.n	10013192 <__aeabi_fdiv+0x9a>
10013116:	2eff      	cmp	r6, #255	; 0xff
10013118:	d022      	beq.n	10013160 <__aeabi_fdiv+0x68>
1001311a:	2300      	movs	r3, #0
1001311c:	00ec      	lsls	r4, r5, #3
1001311e:	2580      	movs	r5, #128	; 0x80
10013120:	4699      	mov	r9, r3
10013122:	469b      	mov	fp, r3
10013124:	04ed      	lsls	r5, r5, #19
10013126:	4325      	orrs	r5, r4
10013128:	3e7f      	subs	r6, #127	; 0x7f
1001312a:	4643      	mov	r3, r8
1001312c:	025c      	lsls	r4, r3, #9
1001312e:	0058      	lsls	r0, r3, #1
10013130:	0fdb      	lsrs	r3, r3, #31
10013132:	0a64      	lsrs	r4, r4, #9
10013134:	0e00      	lsrs	r0, r0, #24
10013136:	4698      	mov	r8, r3
10013138:	d036      	beq.n	100131a8 <__aeabi_fdiv+0xb0>
1001313a:	28ff      	cmp	r0, #255	; 0xff
1001313c:	d030      	beq.n	100131a0 <__aeabi_fdiv+0xa8>
1001313e:	2380      	movs	r3, #128	; 0x80
10013140:	2100      	movs	r1, #0
10013142:	00e4      	lsls	r4, r4, #3
10013144:	04db      	lsls	r3, r3, #19
10013146:	431c      	orrs	r4, r3
10013148:	387f      	subs	r0, #127	; 0x7f
1001314a:	1a30      	subs	r0, r6, r0
1001314c:	9001      	str	r0, [sp, #4]
1001314e:	4648      	mov	r0, r9
10013150:	4642      	mov	r2, r8
10013152:	4308      	orrs	r0, r1
10013154:	4e72      	ldr	r6, [pc, #456]	; (10013320 <__aeabi_fdiv+0x228>)
10013156:	0080      	lsls	r0, r0, #2
10013158:	5830      	ldr	r0, [r6, r0]
1001315a:	407a      	eors	r2, r7
1001315c:	0013      	movs	r3, r2
1001315e:	4687      	mov	pc, r0
10013160:	2d00      	cmp	r5, #0
10013162:	d144      	bne.n	100131ee <__aeabi_fdiv+0xf6>
10013164:	2308      	movs	r3, #8
10013166:	4699      	mov	r9, r3
10013168:	3b06      	subs	r3, #6
1001316a:	469b      	mov	fp, r3
1001316c:	e7dd      	b.n	1001312a <__aeabi_fdiv+0x32>
1001316e:	2201      	movs	r2, #1
10013170:	20ff      	movs	r0, #255	; 0xff
10013172:	2400      	movs	r4, #0
10013174:	401a      	ands	r2, r3
10013176:	0264      	lsls	r4, r4, #9
10013178:	05c3      	lsls	r3, r0, #23
1001317a:	0a64      	lsrs	r4, r4, #9
1001317c:	07d2      	lsls	r2, r2, #31
1001317e:	431c      	orrs	r4, r3
10013180:	4314      	orrs	r4, r2
10013182:	0020      	movs	r0, r4
10013184:	b003      	add	sp, #12
10013186:	bc3c      	pop	{r2, r3, r4, r5}
10013188:	4690      	mov	r8, r2
1001318a:	4699      	mov	r9, r3
1001318c:	46a2      	mov	sl, r4
1001318e:	46ab      	mov	fp, r5
10013190:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013192:	2d00      	cmp	r5, #0
10013194:	d120      	bne.n	100131d8 <__aeabi_fdiv+0xe0>
10013196:	2304      	movs	r3, #4
10013198:	4699      	mov	r9, r3
1001319a:	3b03      	subs	r3, #3
1001319c:	469b      	mov	fp, r3
1001319e:	e7c4      	b.n	1001312a <__aeabi_fdiv+0x32>
100131a0:	2c00      	cmp	r4, #0
100131a2:	d117      	bne.n	100131d4 <__aeabi_fdiv+0xdc>
100131a4:	2102      	movs	r1, #2
100131a6:	e002      	b.n	100131ae <__aeabi_fdiv+0xb6>
100131a8:	2c00      	cmp	r4, #0
100131aa:	d10a      	bne.n	100131c2 <__aeabi_fdiv+0xca>
100131ac:	2101      	movs	r1, #1
100131ae:	1a32      	subs	r2, r6, r0
100131b0:	9201      	str	r2, [sp, #4]
100131b2:	464a      	mov	r2, r9
100131b4:	4643      	mov	r3, r8
100131b6:	430a      	orrs	r2, r1
100131b8:	485a      	ldr	r0, [pc, #360]	; (10013324 <__aeabi_fdiv+0x22c>)
100131ba:	0092      	lsls	r2, r2, #2
100131bc:	5882      	ldr	r2, [r0, r2]
100131be:	407b      	eors	r3, r7
100131c0:	4697      	mov	pc, r2
100131c2:	0020      	movs	r0, r4
100131c4:	f001 fba6 	bl	10014914 <__clzsi2>
100131c8:	1f43      	subs	r3, r0, #5
100131ca:	3076      	adds	r0, #118	; 0x76
100131cc:	409c      	lsls	r4, r3
100131ce:	4240      	negs	r0, r0
100131d0:	2100      	movs	r1, #0
100131d2:	e7ba      	b.n	1001314a <__aeabi_fdiv+0x52>
100131d4:	2103      	movs	r1, #3
100131d6:	e7b8      	b.n	1001314a <__aeabi_fdiv+0x52>
100131d8:	0028      	movs	r0, r5
100131da:	f001 fb9b 	bl	10014914 <__clzsi2>
100131de:	1f43      	subs	r3, r0, #5
100131e0:	409d      	lsls	r5, r3
100131e2:	2300      	movs	r3, #0
100131e4:	3076      	adds	r0, #118	; 0x76
100131e6:	4246      	negs	r6, r0
100131e8:	4699      	mov	r9, r3
100131ea:	469b      	mov	fp, r3
100131ec:	e79d      	b.n	1001312a <__aeabi_fdiv+0x32>
100131ee:	230c      	movs	r3, #12
100131f0:	4699      	mov	r9, r3
100131f2:	3b09      	subs	r3, #9
100131f4:	469b      	mov	fp, r3
100131f6:	e798      	b.n	1001312a <__aeabi_fdiv+0x32>
100131f8:	2480      	movs	r4, #128	; 0x80
100131fa:	2200      	movs	r2, #0
100131fc:	03e4      	lsls	r4, r4, #15
100131fe:	20ff      	movs	r0, #255	; 0xff
10013200:	e7b9      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013202:	2400      	movs	r4, #0
10013204:	46c2      	mov	sl, r8
10013206:	468b      	mov	fp, r1
10013208:	465a      	mov	r2, fp
1001320a:	4653      	mov	r3, sl
1001320c:	2a02      	cmp	r2, #2
1001320e:	d0ae      	beq.n	1001316e <__aeabi_fdiv+0x76>
10013210:	2a03      	cmp	r2, #3
10013212:	d07d      	beq.n	10013310 <__aeabi_fdiv+0x218>
10013214:	2a01      	cmp	r2, #1
10013216:	d131      	bne.n	1001327c <__aeabi_fdiv+0x184>
10013218:	2201      	movs	r2, #1
1001321a:	2000      	movs	r0, #0
1001321c:	401a      	ands	r2, r3
1001321e:	2400      	movs	r4, #0
10013220:	e7a9      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013222:	2201      	movs	r2, #1
10013224:	1a10      	subs	r0, r2, r0
10013226:	281b      	cmp	r0, #27
10013228:	dd56      	ble.n	100132d8 <__aeabi_fdiv+0x1e0>
1001322a:	401a      	ands	r2, r3
1001322c:	2000      	movs	r0, #0
1001322e:	2400      	movs	r4, #0
10013230:	e7a1      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013232:	2380      	movs	r3, #128	; 0x80
10013234:	03db      	lsls	r3, r3, #15
10013236:	421d      	tst	r5, r3
10013238:	d14b      	bne.n	100132d2 <__aeabi_fdiv+0x1da>
1001323a:	2380      	movs	r3, #128	; 0x80
1001323c:	03db      	lsls	r3, r3, #15
1001323e:	432b      	orrs	r3, r5
10013240:	025c      	lsls	r4, r3, #9
10013242:	0a64      	lsrs	r4, r4, #9
10013244:	003a      	movs	r2, r7
10013246:	20ff      	movs	r0, #255	; 0xff
10013248:	e795      	b.n	10013176 <__aeabi_fdiv+0x7e>
1001324a:	016d      	lsls	r5, r5, #5
1001324c:	0160      	lsls	r0, r4, #5
1001324e:	4285      	cmp	r5, r0
10013250:	d230      	bcs.n	100132b4 <__aeabi_fdiv+0x1bc>
10013252:	9a01      	ldr	r2, [sp, #4]
10013254:	2400      	movs	r4, #0
10013256:	3a01      	subs	r2, #1
10013258:	9201      	str	r2, [sp, #4]
1001325a:	221b      	movs	r2, #27
1001325c:	2701      	movs	r7, #1
1001325e:	0029      	movs	r1, r5
10013260:	0064      	lsls	r4, r4, #1
10013262:	006d      	lsls	r5, r5, #1
10013264:	2900      	cmp	r1, #0
10013266:	db01      	blt.n	1001326c <__aeabi_fdiv+0x174>
10013268:	42a8      	cmp	r0, r5
1001326a:	d801      	bhi.n	10013270 <__aeabi_fdiv+0x178>
1001326c:	1a2d      	subs	r5, r5, r0
1001326e:	433c      	orrs	r4, r7
10013270:	3a01      	subs	r2, #1
10013272:	2a00      	cmp	r2, #0
10013274:	d1f3      	bne.n	1001325e <__aeabi_fdiv+0x166>
10013276:	1e6a      	subs	r2, r5, #1
10013278:	4195      	sbcs	r5, r2
1001327a:	432c      	orrs	r4, r5
1001327c:	9801      	ldr	r0, [sp, #4]
1001327e:	307f      	adds	r0, #127	; 0x7f
10013280:	2800      	cmp	r0, #0
10013282:	ddce      	ble.n	10013222 <__aeabi_fdiv+0x12a>
10013284:	0762      	lsls	r2, r4, #29
10013286:	d004      	beq.n	10013292 <__aeabi_fdiv+0x19a>
10013288:	220f      	movs	r2, #15
1001328a:	4022      	ands	r2, r4
1001328c:	2a04      	cmp	r2, #4
1001328e:	d000      	beq.n	10013292 <__aeabi_fdiv+0x19a>
10013290:	3404      	adds	r4, #4
10013292:	0122      	lsls	r2, r4, #4
10013294:	d503      	bpl.n	1001329e <__aeabi_fdiv+0x1a6>
10013296:	4a24      	ldr	r2, [pc, #144]	; (10013328 <__aeabi_fdiv+0x230>)
10013298:	9801      	ldr	r0, [sp, #4]
1001329a:	4014      	ands	r4, r2
1001329c:	3080      	adds	r0, #128	; 0x80
1001329e:	28fe      	cmp	r0, #254	; 0xfe
100132a0:	dd00      	ble.n	100132a4 <__aeabi_fdiv+0x1ac>
100132a2:	e764      	b.n	1001316e <__aeabi_fdiv+0x76>
100132a4:	2201      	movs	r2, #1
100132a6:	01a4      	lsls	r4, r4, #6
100132a8:	0a64      	lsrs	r4, r4, #9
100132aa:	b2c0      	uxtb	r0, r0
100132ac:	401a      	ands	r2, r3
100132ae:	e762      	b.n	10013176 <__aeabi_fdiv+0x7e>
100132b0:	002c      	movs	r4, r5
100132b2:	e7a9      	b.n	10013208 <__aeabi_fdiv+0x110>
100132b4:	1a2d      	subs	r5, r5, r0
100132b6:	221a      	movs	r2, #26
100132b8:	2401      	movs	r4, #1
100132ba:	e7cf      	b.n	1001325c <__aeabi_fdiv+0x164>
100132bc:	026b      	lsls	r3, r5, #9
100132be:	d5bc      	bpl.n	1001323a <__aeabi_fdiv+0x142>
100132c0:	2400      	movs	r4, #0
100132c2:	2380      	movs	r3, #128	; 0x80
100132c4:	03db      	lsls	r3, r3, #15
100132c6:	431c      	orrs	r4, r3
100132c8:	0264      	lsls	r4, r4, #9
100132ca:	0a64      	lsrs	r4, r4, #9
100132cc:	4642      	mov	r2, r8
100132ce:	20ff      	movs	r0, #255	; 0xff
100132d0:	e751      	b.n	10013176 <__aeabi_fdiv+0x7e>
100132d2:	421c      	tst	r4, r3
100132d4:	d1b3      	bne.n	1001323e <__aeabi_fdiv+0x146>
100132d6:	e7f4      	b.n	100132c2 <__aeabi_fdiv+0x1ca>
100132d8:	0021      	movs	r1, r4
100132da:	2220      	movs	r2, #32
100132dc:	40c1      	lsrs	r1, r0
100132de:	1a10      	subs	r0, r2, r0
100132e0:	4084      	lsls	r4, r0
100132e2:	1e62      	subs	r2, r4, #1
100132e4:	4194      	sbcs	r4, r2
100132e6:	430c      	orrs	r4, r1
100132e8:	0762      	lsls	r2, r4, #29
100132ea:	d004      	beq.n	100132f6 <__aeabi_fdiv+0x1fe>
100132ec:	220f      	movs	r2, #15
100132ee:	4022      	ands	r2, r4
100132f0:	2a04      	cmp	r2, #4
100132f2:	d000      	beq.n	100132f6 <__aeabi_fdiv+0x1fe>
100132f4:	3404      	adds	r4, #4
100132f6:	0162      	lsls	r2, r4, #5
100132f8:	d504      	bpl.n	10013304 <__aeabi_fdiv+0x20c>
100132fa:	2201      	movs	r2, #1
100132fc:	2001      	movs	r0, #1
100132fe:	401a      	ands	r2, r3
10013300:	2400      	movs	r4, #0
10013302:	e738      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013304:	2201      	movs	r2, #1
10013306:	01a4      	lsls	r4, r4, #6
10013308:	0a64      	lsrs	r4, r4, #9
1001330a:	401a      	ands	r2, r3
1001330c:	2000      	movs	r0, #0
1001330e:	e732      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013310:	2380      	movs	r3, #128	; 0x80
10013312:	03db      	lsls	r3, r3, #15
10013314:	431c      	orrs	r4, r3
10013316:	0264      	lsls	r4, r4, #9
10013318:	0a64      	lsrs	r4, r4, #9
1001331a:	4652      	mov	r2, sl
1001331c:	20ff      	movs	r0, #255	; 0xff
1001331e:	e72a      	b.n	10013176 <__aeabi_fdiv+0x7e>
10013320:	10017af4 	.word	0x10017af4
10013324:	10017b34 	.word	0x10017b34
10013328:	f7ffffff 	.word	0xf7ffffff

1001332c <__eqsf2>:
1001332c:	0243      	lsls	r3, r0, #9
1001332e:	b570      	push	{r4, r5, r6, lr}
10013330:	0042      	lsls	r2, r0, #1
10013332:	004c      	lsls	r4, r1, #1
10013334:	0a5d      	lsrs	r5, r3, #9
10013336:	0fc3      	lsrs	r3, r0, #31
10013338:	0248      	lsls	r0, r1, #9
1001333a:	0e12      	lsrs	r2, r2, #24
1001333c:	0a46      	lsrs	r6, r0, #9
1001333e:	0e24      	lsrs	r4, r4, #24
10013340:	0fc9      	lsrs	r1, r1, #31
10013342:	2aff      	cmp	r2, #255	; 0xff
10013344:	d00f      	beq.n	10013366 <__eqsf2+0x3a>
10013346:	2cff      	cmp	r4, #255	; 0xff
10013348:	d011      	beq.n	1001336e <__eqsf2+0x42>
1001334a:	2001      	movs	r0, #1
1001334c:	42a2      	cmp	r2, r4
1001334e:	d000      	beq.n	10013352 <__eqsf2+0x26>
10013350:	bd70      	pop	{r4, r5, r6, pc}
10013352:	42b5      	cmp	r5, r6
10013354:	d1fc      	bne.n	10013350 <__eqsf2+0x24>
10013356:	428b      	cmp	r3, r1
10013358:	d00d      	beq.n	10013376 <__eqsf2+0x4a>
1001335a:	2a00      	cmp	r2, #0
1001335c:	d1f8      	bne.n	10013350 <__eqsf2+0x24>
1001335e:	0028      	movs	r0, r5
10013360:	1e43      	subs	r3, r0, #1
10013362:	4198      	sbcs	r0, r3
10013364:	e7f4      	b.n	10013350 <__eqsf2+0x24>
10013366:	2001      	movs	r0, #1
10013368:	2d00      	cmp	r5, #0
1001336a:	d1f1      	bne.n	10013350 <__eqsf2+0x24>
1001336c:	e7eb      	b.n	10013346 <__eqsf2+0x1a>
1001336e:	2001      	movs	r0, #1
10013370:	2e00      	cmp	r6, #0
10013372:	d1ed      	bne.n	10013350 <__eqsf2+0x24>
10013374:	e7e9      	b.n	1001334a <__eqsf2+0x1e>
10013376:	2000      	movs	r0, #0
10013378:	e7ea      	b.n	10013350 <__eqsf2+0x24>
1001337a:	46c0      	nop			; (mov r8, r8)

1001337c <__gesf2>:
1001337c:	0243      	lsls	r3, r0, #9
1001337e:	b5f0      	push	{r4, r5, r6, r7, lr}
10013380:	0042      	lsls	r2, r0, #1
10013382:	0a5d      	lsrs	r5, r3, #9
10013384:	0fc3      	lsrs	r3, r0, #31
10013386:	0248      	lsls	r0, r1, #9
10013388:	0a44      	lsrs	r4, r0, #9
1001338a:	0048      	lsls	r0, r1, #1
1001338c:	0e12      	lsrs	r2, r2, #24
1001338e:	0e00      	lsrs	r0, r0, #24
10013390:	0fc9      	lsrs	r1, r1, #31
10013392:	2aff      	cmp	r2, #255	; 0xff
10013394:	d01f      	beq.n	100133d6 <__gesf2+0x5a>
10013396:	28ff      	cmp	r0, #255	; 0xff
10013398:	d022      	beq.n	100133e0 <__gesf2+0x64>
1001339a:	2a00      	cmp	r2, #0
1001339c:	d109      	bne.n	100133b2 <__gesf2+0x36>
1001339e:	426e      	negs	r6, r5
100133a0:	416e      	adcs	r6, r5
100133a2:	2800      	cmp	r0, #0
100133a4:	d10f      	bne.n	100133c6 <__gesf2+0x4a>
100133a6:	2c00      	cmp	r4, #0
100133a8:	d10d      	bne.n	100133c6 <__gesf2+0x4a>
100133aa:	2000      	movs	r0, #0
100133ac:	2d00      	cmp	r5, #0
100133ae:	d009      	beq.n	100133c4 <__gesf2+0x48>
100133b0:	e005      	b.n	100133be <__gesf2+0x42>
100133b2:	2800      	cmp	r0, #0
100133b4:	d101      	bne.n	100133ba <__gesf2+0x3e>
100133b6:	2c00      	cmp	r4, #0
100133b8:	d001      	beq.n	100133be <__gesf2+0x42>
100133ba:	428b      	cmp	r3, r1
100133bc:	d013      	beq.n	100133e6 <__gesf2+0x6a>
100133be:	4258      	negs	r0, r3
100133c0:	2301      	movs	r3, #1
100133c2:	4318      	orrs	r0, r3
100133c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133c6:	2e00      	cmp	r6, #0
100133c8:	d0f7      	beq.n	100133ba <__gesf2+0x3e>
100133ca:	4248      	negs	r0, r1
100133cc:	4141      	adcs	r1, r0
100133ce:	2001      	movs	r0, #1
100133d0:	4249      	negs	r1, r1
100133d2:	4308      	orrs	r0, r1
100133d4:	e7f6      	b.n	100133c4 <__gesf2+0x48>
100133d6:	2d00      	cmp	r5, #0
100133d8:	d0dd      	beq.n	10013396 <__gesf2+0x1a>
100133da:	2002      	movs	r0, #2
100133dc:	4240      	negs	r0, r0
100133de:	e7f1      	b.n	100133c4 <__gesf2+0x48>
100133e0:	2c00      	cmp	r4, #0
100133e2:	d0da      	beq.n	1001339a <__gesf2+0x1e>
100133e4:	e7f9      	b.n	100133da <__gesf2+0x5e>
100133e6:	4282      	cmp	r2, r0
100133e8:	dce9      	bgt.n	100133be <__gesf2+0x42>
100133ea:	db04      	blt.n	100133f6 <__gesf2+0x7a>
100133ec:	42a5      	cmp	r5, r4
100133ee:	d8e6      	bhi.n	100133be <__gesf2+0x42>
100133f0:	2000      	movs	r0, #0
100133f2:	42a5      	cmp	r5, r4
100133f4:	d2e6      	bcs.n	100133c4 <__gesf2+0x48>
100133f6:	4258      	negs	r0, r3
100133f8:	4143      	adcs	r3, r0
100133fa:	2001      	movs	r0, #1
100133fc:	425b      	negs	r3, r3
100133fe:	4318      	orrs	r0, r3
10013400:	e7e0      	b.n	100133c4 <__gesf2+0x48>
10013402:	46c0      	nop			; (mov r8, r8)

10013404 <__lesf2>:
10013404:	0243      	lsls	r3, r0, #9
10013406:	b5f0      	push	{r4, r5, r6, r7, lr}
10013408:	0042      	lsls	r2, r0, #1
1001340a:	004c      	lsls	r4, r1, #1
1001340c:	0a5e      	lsrs	r6, r3, #9
1001340e:	0fc3      	lsrs	r3, r0, #31
10013410:	0248      	lsls	r0, r1, #9
10013412:	0e12      	lsrs	r2, r2, #24
10013414:	0a45      	lsrs	r5, r0, #9
10013416:	0e24      	lsrs	r4, r4, #24
10013418:	0fc9      	lsrs	r1, r1, #31
1001341a:	2aff      	cmp	r2, #255	; 0xff
1001341c:	d017      	beq.n	1001344e <__lesf2+0x4a>
1001341e:	2cff      	cmp	r4, #255	; 0xff
10013420:	d019      	beq.n	10013456 <__lesf2+0x52>
10013422:	2a00      	cmp	r2, #0
10013424:	d10b      	bne.n	1001343e <__lesf2+0x3a>
10013426:	4270      	negs	r0, r6
10013428:	4170      	adcs	r0, r6
1001342a:	2c00      	cmp	r4, #0
1001342c:	d017      	beq.n	1001345e <__lesf2+0x5a>
1001342e:	2800      	cmp	r0, #0
10013430:	d007      	beq.n	10013442 <__lesf2+0x3e>
10013432:	4248      	negs	r0, r1
10013434:	4141      	adcs	r1, r0
10013436:	2001      	movs	r0, #1
10013438:	4249      	negs	r1, r1
1001343a:	4308      	orrs	r0, r1
1001343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001343e:	2c00      	cmp	r4, #0
10013440:	d013      	beq.n	1001346a <__lesf2+0x66>
10013442:	428b      	cmp	r3, r1
10013444:	d014      	beq.n	10013470 <__lesf2+0x6c>
10013446:	4258      	negs	r0, r3
10013448:	2301      	movs	r3, #1
1001344a:	4318      	orrs	r0, r3
1001344c:	e7f6      	b.n	1001343c <__lesf2+0x38>
1001344e:	2002      	movs	r0, #2
10013450:	2e00      	cmp	r6, #0
10013452:	d1f3      	bne.n	1001343c <__lesf2+0x38>
10013454:	e7e3      	b.n	1001341e <__lesf2+0x1a>
10013456:	2002      	movs	r0, #2
10013458:	2d00      	cmp	r5, #0
1001345a:	d1ef      	bne.n	1001343c <__lesf2+0x38>
1001345c:	e7e1      	b.n	10013422 <__lesf2+0x1e>
1001345e:	2d00      	cmp	r5, #0
10013460:	d1e5      	bne.n	1001342e <__lesf2+0x2a>
10013462:	2000      	movs	r0, #0
10013464:	2e00      	cmp	r6, #0
10013466:	d0e9      	beq.n	1001343c <__lesf2+0x38>
10013468:	e7ed      	b.n	10013446 <__lesf2+0x42>
1001346a:	2d00      	cmp	r5, #0
1001346c:	d1e9      	bne.n	10013442 <__lesf2+0x3e>
1001346e:	e7ea      	b.n	10013446 <__lesf2+0x42>
10013470:	42a2      	cmp	r2, r4
10013472:	dce8      	bgt.n	10013446 <__lesf2+0x42>
10013474:	db04      	blt.n	10013480 <__lesf2+0x7c>
10013476:	42ae      	cmp	r6, r5
10013478:	d8e5      	bhi.n	10013446 <__lesf2+0x42>
1001347a:	2000      	movs	r0, #0
1001347c:	42ae      	cmp	r6, r5
1001347e:	d2dd      	bcs.n	1001343c <__lesf2+0x38>
10013480:	4258      	negs	r0, r3
10013482:	4143      	adcs	r3, r0
10013484:	2001      	movs	r0, #1
10013486:	425b      	negs	r3, r3
10013488:	4318      	orrs	r0, r3
1001348a:	e7d7      	b.n	1001343c <__lesf2+0x38>

1001348c <__aeabi_fmul>:
1001348c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001348e:	4657      	mov	r7, sl
10013490:	464e      	mov	r6, r9
10013492:	4645      	mov	r5, r8
10013494:	0043      	lsls	r3, r0, #1
10013496:	b4e0      	push	{r5, r6, r7}
10013498:	0246      	lsls	r6, r0, #9
1001349a:	4688      	mov	r8, r1
1001349c:	0a76      	lsrs	r6, r6, #9
1001349e:	0e1f      	lsrs	r7, r3, #24
100134a0:	0fc4      	lsrs	r4, r0, #31
100134a2:	2f00      	cmp	r7, #0
100134a4:	d047      	beq.n	10013536 <__aeabi_fmul+0xaa>
100134a6:	2fff      	cmp	r7, #255	; 0xff
100134a8:	d025      	beq.n	100134f6 <__aeabi_fmul+0x6a>
100134aa:	2300      	movs	r3, #0
100134ac:	2580      	movs	r5, #128	; 0x80
100134ae:	469a      	mov	sl, r3
100134b0:	4699      	mov	r9, r3
100134b2:	00f6      	lsls	r6, r6, #3
100134b4:	04ed      	lsls	r5, r5, #19
100134b6:	432e      	orrs	r6, r5
100134b8:	3f7f      	subs	r7, #127	; 0x7f
100134ba:	4643      	mov	r3, r8
100134bc:	4642      	mov	r2, r8
100134be:	025d      	lsls	r5, r3, #9
100134c0:	0fd2      	lsrs	r2, r2, #31
100134c2:	005b      	lsls	r3, r3, #1
100134c4:	0a6d      	lsrs	r5, r5, #9
100134c6:	0e1b      	lsrs	r3, r3, #24
100134c8:	4690      	mov	r8, r2
100134ca:	d040      	beq.n	1001354e <__aeabi_fmul+0xc2>
100134cc:	2bff      	cmp	r3, #255	; 0xff
100134ce:	d039      	beq.n	10013544 <__aeabi_fmul+0xb8>
100134d0:	2280      	movs	r2, #128	; 0x80
100134d2:	2000      	movs	r0, #0
100134d4:	00ed      	lsls	r5, r5, #3
100134d6:	04d2      	lsls	r2, r2, #19
100134d8:	4315      	orrs	r5, r2
100134da:	3b7f      	subs	r3, #127	; 0x7f
100134dc:	18fb      	adds	r3, r7, r3
100134de:	4642      	mov	r2, r8
100134e0:	4657      	mov	r7, sl
100134e2:	1c59      	adds	r1, r3, #1
100134e4:	4062      	eors	r2, r4
100134e6:	468c      	mov	ip, r1
100134e8:	4307      	orrs	r7, r0
100134ea:	2f0f      	cmp	r7, #15
100134ec:	d85c      	bhi.n	100135a8 <__aeabi_fmul+0x11c>
100134ee:	496f      	ldr	r1, [pc, #444]	; (100136ac <__aeabi_fmul+0x220>)
100134f0:	00bf      	lsls	r7, r7, #2
100134f2:	59c9      	ldr	r1, [r1, r7]
100134f4:	468f      	mov	pc, r1
100134f6:	2e00      	cmp	r6, #0
100134f8:	d145      	bne.n	10013586 <__aeabi_fmul+0xfa>
100134fa:	2308      	movs	r3, #8
100134fc:	469a      	mov	sl, r3
100134fe:	3b06      	subs	r3, #6
10013500:	4699      	mov	r9, r3
10013502:	e7da      	b.n	100134ba <__aeabi_fmul+0x2e>
10013504:	4642      	mov	r2, r8
10013506:	2802      	cmp	r0, #2
10013508:	d02d      	beq.n	10013566 <__aeabi_fmul+0xda>
1001350a:	2803      	cmp	r0, #3
1001350c:	d100      	bne.n	10013510 <__aeabi_fmul+0x84>
1001350e:	e0c3      	b.n	10013698 <__aeabi_fmul+0x20c>
10013510:	2801      	cmp	r0, #1
10013512:	d000      	beq.n	10013516 <__aeabi_fmul+0x8a>
10013514:	e0a2      	b.n	1001365c <__aeabi_fmul+0x1d0>
10013516:	2500      	movs	r5, #0
10013518:	2600      	movs	r6, #0
1001351a:	4002      	ands	r2, r0
1001351c:	b2d4      	uxtb	r4, r2
1001351e:	0276      	lsls	r6, r6, #9
10013520:	05ed      	lsls	r5, r5, #23
10013522:	0a76      	lsrs	r6, r6, #9
10013524:	432e      	orrs	r6, r5
10013526:	07e4      	lsls	r4, r4, #31
10013528:	4326      	orrs	r6, r4
1001352a:	0030      	movs	r0, r6
1001352c:	bc1c      	pop	{r2, r3, r4}
1001352e:	4690      	mov	r8, r2
10013530:	4699      	mov	r9, r3
10013532:	46a2      	mov	sl, r4
10013534:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013536:	2e00      	cmp	r6, #0
10013538:	d11a      	bne.n	10013570 <__aeabi_fmul+0xe4>
1001353a:	2304      	movs	r3, #4
1001353c:	469a      	mov	sl, r3
1001353e:	3b03      	subs	r3, #3
10013540:	4699      	mov	r9, r3
10013542:	e7ba      	b.n	100134ba <__aeabi_fmul+0x2e>
10013544:	002a      	movs	r2, r5
10013546:	1e51      	subs	r1, r2, #1
10013548:	418a      	sbcs	r2, r1
1001354a:	1c90      	adds	r0, r2, #2
1001354c:	e7c6      	b.n	100134dc <__aeabi_fmul+0x50>
1001354e:	2001      	movs	r0, #1
10013550:	2d00      	cmp	r5, #0
10013552:	d0c3      	beq.n	100134dc <__aeabi_fmul+0x50>
10013554:	0028      	movs	r0, r5
10013556:	f001 f9dd 	bl	10014914 <__clzsi2>
1001355a:	1f43      	subs	r3, r0, #5
1001355c:	3076      	adds	r0, #118	; 0x76
1001355e:	409d      	lsls	r5, r3
10013560:	4243      	negs	r3, r0
10013562:	2000      	movs	r0, #0
10013564:	e7ba      	b.n	100134dc <__aeabi_fmul+0x50>
10013566:	2401      	movs	r4, #1
10013568:	25ff      	movs	r5, #255	; 0xff
1001356a:	4014      	ands	r4, r2
1001356c:	2600      	movs	r6, #0
1001356e:	e7d6      	b.n	1001351e <__aeabi_fmul+0x92>
10013570:	0030      	movs	r0, r6
10013572:	f001 f9cf 	bl	10014914 <__clzsi2>
10013576:	1f43      	subs	r3, r0, #5
10013578:	409e      	lsls	r6, r3
1001357a:	2300      	movs	r3, #0
1001357c:	3076      	adds	r0, #118	; 0x76
1001357e:	4247      	negs	r7, r0
10013580:	469a      	mov	sl, r3
10013582:	4699      	mov	r9, r3
10013584:	e799      	b.n	100134ba <__aeabi_fmul+0x2e>
10013586:	230c      	movs	r3, #12
10013588:	469a      	mov	sl, r3
1001358a:	3b09      	subs	r3, #9
1001358c:	4699      	mov	r9, r3
1001358e:	e794      	b.n	100134ba <__aeabi_fmul+0x2e>
10013590:	2680      	movs	r6, #128	; 0x80
10013592:	2400      	movs	r4, #0
10013594:	03f6      	lsls	r6, r6, #15
10013596:	25ff      	movs	r5, #255	; 0xff
10013598:	e7c1      	b.n	1001351e <__aeabi_fmul+0x92>
1001359a:	0035      	movs	r5, r6
1001359c:	4648      	mov	r0, r9
1001359e:	e7b2      	b.n	10013506 <__aeabi_fmul+0x7a>
100135a0:	0035      	movs	r5, r6
100135a2:	0022      	movs	r2, r4
100135a4:	4648      	mov	r0, r9
100135a6:	e7ae      	b.n	10013506 <__aeabi_fmul+0x7a>
100135a8:	0429      	lsls	r1, r5, #16
100135aa:	0c09      	lsrs	r1, r1, #16
100135ac:	0008      	movs	r0, r1
100135ae:	0c37      	lsrs	r7, r6, #16
100135b0:	0436      	lsls	r6, r6, #16
100135b2:	0c36      	lsrs	r6, r6, #16
100135b4:	0c2c      	lsrs	r4, r5, #16
100135b6:	4379      	muls	r1, r7
100135b8:	4370      	muls	r0, r6
100135ba:	4367      	muls	r7, r4
100135bc:	4374      	muls	r4, r6
100135be:	0c06      	lsrs	r6, r0, #16
100135c0:	1864      	adds	r4, r4, r1
100135c2:	1936      	adds	r6, r6, r4
100135c4:	42b1      	cmp	r1, r6
100135c6:	d903      	bls.n	100135d0 <__aeabi_fmul+0x144>
100135c8:	2180      	movs	r1, #128	; 0x80
100135ca:	0249      	lsls	r1, r1, #9
100135cc:	4688      	mov	r8, r1
100135ce:	4447      	add	r7, r8
100135d0:	0400      	lsls	r0, r0, #16
100135d2:	0c00      	lsrs	r0, r0, #16
100135d4:	0431      	lsls	r1, r6, #16
100135d6:	1809      	adds	r1, r1, r0
100135d8:	018d      	lsls	r5, r1, #6
100135da:	1e68      	subs	r0, r5, #1
100135dc:	4185      	sbcs	r5, r0
100135de:	0e89      	lsrs	r1, r1, #26
100135e0:	4329      	orrs	r1, r5
100135e2:	0c35      	lsrs	r5, r6, #16
100135e4:	19ed      	adds	r5, r5, r7
100135e6:	01ad      	lsls	r5, r5, #6
100135e8:	430d      	orrs	r5, r1
100135ea:	0129      	lsls	r1, r5, #4
100135ec:	d504      	bpl.n	100135f8 <__aeabi_fmul+0x16c>
100135ee:	2301      	movs	r3, #1
100135f0:	0869      	lsrs	r1, r5, #1
100135f2:	401d      	ands	r5, r3
100135f4:	4663      	mov	r3, ip
100135f6:	430d      	orrs	r5, r1
100135f8:	0019      	movs	r1, r3
100135fa:	317f      	adds	r1, #127	; 0x7f
100135fc:	2900      	cmp	r1, #0
100135fe:	dd25      	ble.n	1001364c <__aeabi_fmul+0x1c0>
10013600:	0768      	lsls	r0, r5, #29
10013602:	d004      	beq.n	1001360e <__aeabi_fmul+0x182>
10013604:	200f      	movs	r0, #15
10013606:	4028      	ands	r0, r5
10013608:	2804      	cmp	r0, #4
1001360a:	d000      	beq.n	1001360e <__aeabi_fmul+0x182>
1001360c:	3504      	adds	r5, #4
1001360e:	0128      	lsls	r0, r5, #4
10013610:	d503      	bpl.n	1001361a <__aeabi_fmul+0x18e>
10013612:	4927      	ldr	r1, [pc, #156]	; (100136b0 <__aeabi_fmul+0x224>)
10013614:	3380      	adds	r3, #128	; 0x80
10013616:	400d      	ands	r5, r1
10013618:	0019      	movs	r1, r3
1001361a:	29fe      	cmp	r1, #254	; 0xfe
1001361c:	dca3      	bgt.n	10013566 <__aeabi_fmul+0xda>
1001361e:	2401      	movs	r4, #1
10013620:	01ad      	lsls	r5, r5, #6
10013622:	0a6e      	lsrs	r6, r5, #9
10013624:	4014      	ands	r4, r2
10013626:	b2cd      	uxtb	r5, r1
10013628:	e779      	b.n	1001351e <__aeabi_fmul+0x92>
1001362a:	2080      	movs	r0, #128	; 0x80
1001362c:	03c0      	lsls	r0, r0, #15
1001362e:	4206      	tst	r6, r0
10013630:	d007      	beq.n	10013642 <__aeabi_fmul+0x1b6>
10013632:	4205      	tst	r5, r0
10013634:	d105      	bne.n	10013642 <__aeabi_fmul+0x1b6>
10013636:	4328      	orrs	r0, r5
10013638:	0246      	lsls	r6, r0, #9
1001363a:	0a76      	lsrs	r6, r6, #9
1001363c:	4644      	mov	r4, r8
1001363e:	25ff      	movs	r5, #255	; 0xff
10013640:	e76d      	b.n	1001351e <__aeabi_fmul+0x92>
10013642:	4306      	orrs	r6, r0
10013644:	0276      	lsls	r6, r6, #9
10013646:	0a76      	lsrs	r6, r6, #9
10013648:	25ff      	movs	r5, #255	; 0xff
1001364a:	e768      	b.n	1001351e <__aeabi_fmul+0x92>
1001364c:	2401      	movs	r4, #1
1001364e:	1a61      	subs	r1, r4, r1
10013650:	291b      	cmp	r1, #27
10013652:	dd05      	ble.n	10013660 <__aeabi_fmul+0x1d4>
10013654:	4014      	ands	r4, r2
10013656:	2500      	movs	r5, #0
10013658:	2600      	movs	r6, #0
1001365a:	e760      	b.n	1001351e <__aeabi_fmul+0x92>
1001365c:	4663      	mov	r3, ip
1001365e:	e7cb      	b.n	100135f8 <__aeabi_fmul+0x16c>
10013660:	002e      	movs	r6, r5
10013662:	2320      	movs	r3, #32
10013664:	40ce      	lsrs	r6, r1
10013666:	1a59      	subs	r1, r3, r1
10013668:	408d      	lsls	r5, r1
1001366a:	1e6b      	subs	r3, r5, #1
1001366c:	419d      	sbcs	r5, r3
1001366e:	432e      	orrs	r6, r5
10013670:	0773      	lsls	r3, r6, #29
10013672:	d004      	beq.n	1001367e <__aeabi_fmul+0x1f2>
10013674:	230f      	movs	r3, #15
10013676:	4033      	ands	r3, r6
10013678:	2b04      	cmp	r3, #4
1001367a:	d000      	beq.n	1001367e <__aeabi_fmul+0x1f2>
1001367c:	3604      	adds	r6, #4
1001367e:	0173      	lsls	r3, r6, #5
10013680:	d504      	bpl.n	1001368c <__aeabi_fmul+0x200>
10013682:	2401      	movs	r4, #1
10013684:	2501      	movs	r5, #1
10013686:	4014      	ands	r4, r2
10013688:	2600      	movs	r6, #0
1001368a:	e748      	b.n	1001351e <__aeabi_fmul+0x92>
1001368c:	2401      	movs	r4, #1
1001368e:	01b6      	lsls	r6, r6, #6
10013690:	0a76      	lsrs	r6, r6, #9
10013692:	4014      	ands	r4, r2
10013694:	2500      	movs	r5, #0
10013696:	e742      	b.n	1001351e <__aeabi_fmul+0x92>
10013698:	2680      	movs	r6, #128	; 0x80
1001369a:	2401      	movs	r4, #1
1001369c:	03f6      	lsls	r6, r6, #15
1001369e:	432e      	orrs	r6, r5
100136a0:	0276      	lsls	r6, r6, #9
100136a2:	0a76      	lsrs	r6, r6, #9
100136a4:	4014      	ands	r4, r2
100136a6:	25ff      	movs	r5, #255	; 0xff
100136a8:	e739      	b.n	1001351e <__aeabi_fmul+0x92>
100136aa:	46c0      	nop			; (mov r8, r8)
100136ac:	10017b74 	.word	0x10017b74
100136b0:	f7ffffff 	.word	0xf7ffffff

100136b4 <__aeabi_fsub>:
100136b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100136b6:	024a      	lsls	r2, r1, #9
100136b8:	004e      	lsls	r6, r1, #1
100136ba:	0243      	lsls	r3, r0, #9
100136bc:	0044      	lsls	r4, r0, #1
100136be:	0e24      	lsrs	r4, r4, #24
100136c0:	0fc5      	lsrs	r5, r0, #31
100136c2:	099b      	lsrs	r3, r3, #6
100136c4:	0e36      	lsrs	r6, r6, #24
100136c6:	0fc9      	lsrs	r1, r1, #31
100136c8:	0992      	lsrs	r2, r2, #6
100136ca:	2eff      	cmp	r6, #255	; 0xff
100136cc:	d100      	bne.n	100136d0 <__aeabi_fsub+0x1c>
100136ce:	e083      	b.n	100137d8 <__aeabi_fsub+0x124>
100136d0:	2001      	movs	r0, #1
100136d2:	4041      	eors	r1, r0
100136d4:	1ba0      	subs	r0, r4, r6
100136d6:	42a9      	cmp	r1, r5
100136d8:	d05c      	beq.n	10013794 <__aeabi_fsub+0xe0>
100136da:	2800      	cmp	r0, #0
100136dc:	dc00      	bgt.n	100136e0 <__aeabi_fsub+0x2c>
100136de:	e095      	b.n	1001380c <__aeabi_fsub+0x158>
100136e0:	2e00      	cmp	r6, #0
100136e2:	d11c      	bne.n	1001371e <__aeabi_fsub+0x6a>
100136e4:	2a00      	cmp	r2, #0
100136e6:	d000      	beq.n	100136ea <__aeabi_fsub+0x36>
100136e8:	e081      	b.n	100137ee <__aeabi_fsub+0x13a>
100136ea:	075a      	lsls	r2, r3, #29
100136ec:	d004      	beq.n	100136f8 <__aeabi_fsub+0x44>
100136ee:	220f      	movs	r2, #15
100136f0:	401a      	ands	r2, r3
100136f2:	2a04      	cmp	r2, #4
100136f4:	d000      	beq.n	100136f8 <__aeabi_fsub+0x44>
100136f6:	3304      	adds	r3, #4
100136f8:	015a      	lsls	r2, r3, #5
100136fa:	d53b      	bpl.n	10013774 <__aeabi_fsub+0xc0>
100136fc:	3401      	adds	r4, #1
100136fe:	2cff      	cmp	r4, #255	; 0xff
10013700:	d100      	bne.n	10013704 <__aeabi_fsub+0x50>
10013702:	e091      	b.n	10013828 <__aeabi_fsub+0x174>
10013704:	2001      	movs	r0, #1
10013706:	019b      	lsls	r3, r3, #6
10013708:	0a5b      	lsrs	r3, r3, #9
1001370a:	b2e4      	uxtb	r4, r4
1001370c:	4005      	ands	r5, r0
1001370e:	025b      	lsls	r3, r3, #9
10013710:	05e4      	lsls	r4, r4, #23
10013712:	0a5b      	lsrs	r3, r3, #9
10013714:	07ed      	lsls	r5, r5, #31
10013716:	4323      	orrs	r3, r4
10013718:	432b      	orrs	r3, r5
1001371a:	0018      	movs	r0, r3
1001371c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001371e:	2cff      	cmp	r4, #255	; 0xff
10013720:	d0e3      	beq.n	100136ea <__aeabi_fsub+0x36>
10013722:	2180      	movs	r1, #128	; 0x80
10013724:	04c9      	lsls	r1, r1, #19
10013726:	430a      	orrs	r2, r1
10013728:	281b      	cmp	r0, #27
1001372a:	dd00      	ble.n	1001372e <__aeabi_fsub+0x7a>
1001372c:	e090      	b.n	10013850 <__aeabi_fsub+0x19c>
1001372e:	0016      	movs	r6, r2
10013730:	2120      	movs	r1, #32
10013732:	40c6      	lsrs	r6, r0
10013734:	1a08      	subs	r0, r1, r0
10013736:	4082      	lsls	r2, r0
10013738:	1e51      	subs	r1, r2, #1
1001373a:	418a      	sbcs	r2, r1
1001373c:	4332      	orrs	r2, r6
1001373e:	1a9b      	subs	r3, r3, r2
10013740:	015a      	lsls	r2, r3, #5
10013742:	d515      	bpl.n	10013770 <__aeabi_fsub+0xbc>
10013744:	019b      	lsls	r3, r3, #6
10013746:	099e      	lsrs	r6, r3, #6
10013748:	0030      	movs	r0, r6
1001374a:	f001 f8e3 	bl	10014914 <__clzsi2>
1001374e:	3805      	subs	r0, #5
10013750:	4086      	lsls	r6, r0
10013752:	4284      	cmp	r4, r0
10013754:	dc6c      	bgt.n	10013830 <__aeabi_fsub+0x17c>
10013756:	1b04      	subs	r4, r0, r4
10013758:	0033      	movs	r3, r6
1001375a:	2020      	movs	r0, #32
1001375c:	3401      	adds	r4, #1
1001375e:	40e3      	lsrs	r3, r4
10013760:	1b04      	subs	r4, r0, r4
10013762:	40a6      	lsls	r6, r4
10013764:	1e72      	subs	r2, r6, #1
10013766:	4196      	sbcs	r6, r2
10013768:	2400      	movs	r4, #0
1001376a:	4333      	orrs	r3, r6
1001376c:	e7bd      	b.n	100136ea <__aeabi_fsub+0x36>
1001376e:	000d      	movs	r5, r1
10013770:	075a      	lsls	r2, r3, #29
10013772:	d1bc      	bne.n	100136ee <__aeabi_fsub+0x3a>
10013774:	08df      	lsrs	r7, r3, #3
10013776:	2301      	movs	r3, #1
10013778:	401d      	ands	r5, r3
1001377a:	2cff      	cmp	r4, #255	; 0xff
1001377c:	d133      	bne.n	100137e6 <__aeabi_fsub+0x132>
1001377e:	2f00      	cmp	r7, #0
10013780:	d100      	bne.n	10013784 <__aeabi_fsub+0xd0>
10013782:	e090      	b.n	100138a6 <__aeabi_fsub+0x1f2>
10013784:	2280      	movs	r2, #128	; 0x80
10013786:	03d2      	lsls	r2, r2, #15
10013788:	0013      	movs	r3, r2
1001378a:	433b      	orrs	r3, r7
1001378c:	025b      	lsls	r3, r3, #9
1001378e:	0a5b      	lsrs	r3, r3, #9
10013790:	24ff      	movs	r4, #255	; 0xff
10013792:	e7bc      	b.n	1001370e <__aeabi_fsub+0x5a>
10013794:	2800      	cmp	r0, #0
10013796:	dd4f      	ble.n	10013838 <__aeabi_fsub+0x184>
10013798:	2e00      	cmp	r6, #0
1001379a:	d02e      	beq.n	100137fa <__aeabi_fsub+0x146>
1001379c:	2cff      	cmp	r4, #255	; 0xff
1001379e:	d0a4      	beq.n	100136ea <__aeabi_fsub+0x36>
100137a0:	2580      	movs	r5, #128	; 0x80
100137a2:	04ed      	lsls	r5, r5, #19
100137a4:	432a      	orrs	r2, r5
100137a6:	281b      	cmp	r0, #27
100137a8:	dd00      	ble.n	100137ac <__aeabi_fsub+0xf8>
100137aa:	e097      	b.n	100138dc <__aeabi_fsub+0x228>
100137ac:	0016      	movs	r6, r2
100137ae:	2520      	movs	r5, #32
100137b0:	40c6      	lsrs	r6, r0
100137b2:	1a28      	subs	r0, r5, r0
100137b4:	4082      	lsls	r2, r0
100137b6:	1e50      	subs	r0, r2, #1
100137b8:	4182      	sbcs	r2, r0
100137ba:	4332      	orrs	r2, r6
100137bc:	189b      	adds	r3, r3, r2
100137be:	015a      	lsls	r2, r3, #5
100137c0:	d5d5      	bpl.n	1001376e <__aeabi_fsub+0xba>
100137c2:	3401      	adds	r4, #1
100137c4:	2cff      	cmp	r4, #255	; 0xff
100137c6:	d06d      	beq.n	100138a4 <__aeabi_fsub+0x1f0>
100137c8:	2201      	movs	r2, #1
100137ca:	487b      	ldr	r0, [pc, #492]	; (100139b8 <__aeabi_fsub+0x304>)
100137cc:	401a      	ands	r2, r3
100137ce:	085b      	lsrs	r3, r3, #1
100137d0:	4003      	ands	r3, r0
100137d2:	4313      	orrs	r3, r2
100137d4:	000d      	movs	r5, r1
100137d6:	e788      	b.n	100136ea <__aeabi_fsub+0x36>
100137d8:	2a00      	cmp	r2, #0
100137da:	d000      	beq.n	100137de <__aeabi_fsub+0x12a>
100137dc:	e77a      	b.n	100136d4 <__aeabi_fsub+0x20>
100137de:	e777      	b.n	100136d0 <__aeabi_fsub+0x1c>
100137e0:	1e03      	subs	r3, r0, #0
100137e2:	d1c5      	bne.n	10013770 <__aeabi_fsub+0xbc>
100137e4:	2500      	movs	r5, #0
100137e6:	027b      	lsls	r3, r7, #9
100137e8:	0a5b      	lsrs	r3, r3, #9
100137ea:	b2e4      	uxtb	r4, r4
100137ec:	e78f      	b.n	1001370e <__aeabi_fsub+0x5a>
100137ee:	3801      	subs	r0, #1
100137f0:	2800      	cmp	r0, #0
100137f2:	d0a4      	beq.n	1001373e <__aeabi_fsub+0x8a>
100137f4:	2cff      	cmp	r4, #255	; 0xff
100137f6:	d197      	bne.n	10013728 <__aeabi_fsub+0x74>
100137f8:	e777      	b.n	100136ea <__aeabi_fsub+0x36>
100137fa:	2a00      	cmp	r2, #0
100137fc:	d100      	bne.n	10013800 <__aeabi_fsub+0x14c>
100137fe:	e774      	b.n	100136ea <__aeabi_fsub+0x36>
10013800:	3801      	subs	r0, #1
10013802:	2800      	cmp	r0, #0
10013804:	d0da      	beq.n	100137bc <__aeabi_fsub+0x108>
10013806:	2cff      	cmp	r4, #255	; 0xff
10013808:	d1cd      	bne.n	100137a6 <__aeabi_fsub+0xf2>
1001380a:	e76e      	b.n	100136ea <__aeabi_fsub+0x36>
1001380c:	2800      	cmp	r0, #0
1001380e:	d121      	bne.n	10013854 <__aeabi_fsub+0x1a0>
10013810:	1c60      	adds	r0, r4, #1
10013812:	b2c0      	uxtb	r0, r0
10013814:	2801      	cmp	r0, #1
10013816:	dd58      	ble.n	100138ca <__aeabi_fsub+0x216>
10013818:	2780      	movs	r7, #128	; 0x80
1001381a:	1a9e      	subs	r6, r3, r2
1001381c:	04ff      	lsls	r7, r7, #19
1001381e:	4037      	ands	r7, r6
10013820:	d02f      	beq.n	10013882 <__aeabi_fsub+0x1ce>
10013822:	1ad6      	subs	r6, r2, r3
10013824:	000d      	movs	r5, r1
10013826:	e78f      	b.n	10013748 <__aeabi_fsub+0x94>
10013828:	2301      	movs	r3, #1
1001382a:	401d      	ands	r5, r3
1001382c:	2300      	movs	r3, #0
1001382e:	e76e      	b.n	1001370e <__aeabi_fsub+0x5a>
10013830:	4b62      	ldr	r3, [pc, #392]	; (100139bc <__aeabi_fsub+0x308>)
10013832:	1a24      	subs	r4, r4, r0
10013834:	4033      	ands	r3, r6
10013836:	e758      	b.n	100136ea <__aeabi_fsub+0x36>
10013838:	2800      	cmp	r0, #0
1001383a:	d151      	bne.n	100138e0 <__aeabi_fsub+0x22c>
1001383c:	1c60      	adds	r0, r4, #1
1001383e:	b2c6      	uxtb	r6, r0
10013840:	2e01      	cmp	r6, #1
10013842:	dd33      	ble.n	100138ac <__aeabi_fsub+0x1f8>
10013844:	28ff      	cmp	r0, #255	; 0xff
10013846:	d02d      	beq.n	100138a4 <__aeabi_fsub+0x1f0>
10013848:	189b      	adds	r3, r3, r2
1001384a:	085b      	lsrs	r3, r3, #1
1001384c:	0004      	movs	r4, r0
1001384e:	e74c      	b.n	100136ea <__aeabi_fsub+0x36>
10013850:	2201      	movs	r2, #1
10013852:	e774      	b.n	1001373e <__aeabi_fsub+0x8a>
10013854:	2c00      	cmp	r4, #0
10013856:	d01a      	beq.n	1001388e <__aeabi_fsub+0x1da>
10013858:	2eff      	cmp	r6, #255	; 0xff
1001385a:	d01f      	beq.n	1001389c <__aeabi_fsub+0x1e8>
1001385c:	2480      	movs	r4, #128	; 0x80
1001385e:	04e4      	lsls	r4, r4, #19
10013860:	4240      	negs	r0, r0
10013862:	4323      	orrs	r3, r4
10013864:	281b      	cmp	r0, #27
10013866:	dd00      	ble.n	1001386a <__aeabi_fsub+0x1b6>
10013868:	e096      	b.n	10013998 <__aeabi_fsub+0x2e4>
1001386a:	001d      	movs	r5, r3
1001386c:	2420      	movs	r4, #32
1001386e:	40c5      	lsrs	r5, r0
10013870:	1a20      	subs	r0, r4, r0
10013872:	4083      	lsls	r3, r0
10013874:	1e58      	subs	r0, r3, #1
10013876:	4183      	sbcs	r3, r0
10013878:	432b      	orrs	r3, r5
1001387a:	1ad3      	subs	r3, r2, r3
1001387c:	0034      	movs	r4, r6
1001387e:	000d      	movs	r5, r1
10013880:	e75e      	b.n	10013740 <__aeabi_fsub+0x8c>
10013882:	2e00      	cmp	r6, #0
10013884:	d000      	beq.n	10013888 <__aeabi_fsub+0x1d4>
10013886:	e75f      	b.n	10013748 <__aeabi_fsub+0x94>
10013888:	2500      	movs	r5, #0
1001388a:	2400      	movs	r4, #0
1001388c:	e7ab      	b.n	100137e6 <__aeabi_fsub+0x132>
1001388e:	2b00      	cmp	r3, #0
10013890:	d044      	beq.n	1001391c <__aeabi_fsub+0x268>
10013892:	43c0      	mvns	r0, r0
10013894:	2800      	cmp	r0, #0
10013896:	d0f0      	beq.n	1001387a <__aeabi_fsub+0x1c6>
10013898:	2eff      	cmp	r6, #255	; 0xff
1001389a:	d1e3      	bne.n	10013864 <__aeabi_fsub+0x1b0>
1001389c:	0013      	movs	r3, r2
1001389e:	24ff      	movs	r4, #255	; 0xff
100138a0:	000d      	movs	r5, r1
100138a2:	e722      	b.n	100136ea <__aeabi_fsub+0x36>
100138a4:	000d      	movs	r5, r1
100138a6:	24ff      	movs	r4, #255	; 0xff
100138a8:	2300      	movs	r3, #0
100138aa:	e730      	b.n	1001370e <__aeabi_fsub+0x5a>
100138ac:	2c00      	cmp	r4, #0
100138ae:	d15d      	bne.n	1001396c <__aeabi_fsub+0x2b8>
100138b0:	2b00      	cmp	r3, #0
100138b2:	d07d      	beq.n	100139b0 <__aeabi_fsub+0x2fc>
100138b4:	2a00      	cmp	r2, #0
100138b6:	d100      	bne.n	100138ba <__aeabi_fsub+0x206>
100138b8:	e717      	b.n	100136ea <__aeabi_fsub+0x36>
100138ba:	189b      	adds	r3, r3, r2
100138bc:	015a      	lsls	r2, r3, #5
100138be:	d400      	bmi.n	100138c2 <__aeabi_fsub+0x20e>
100138c0:	e756      	b.n	10013770 <__aeabi_fsub+0xbc>
100138c2:	4a3e      	ldr	r2, [pc, #248]	; (100139bc <__aeabi_fsub+0x308>)
100138c4:	0004      	movs	r4, r0
100138c6:	4013      	ands	r3, r2
100138c8:	e70f      	b.n	100136ea <__aeabi_fsub+0x36>
100138ca:	2c00      	cmp	r4, #0
100138cc:	d11e      	bne.n	1001390c <__aeabi_fsub+0x258>
100138ce:	2b00      	cmp	r3, #0
100138d0:	d12f      	bne.n	10013932 <__aeabi_fsub+0x27e>
100138d2:	2a00      	cmp	r2, #0
100138d4:	d065      	beq.n	100139a2 <__aeabi_fsub+0x2ee>
100138d6:	0013      	movs	r3, r2
100138d8:	000d      	movs	r5, r1
100138da:	e706      	b.n	100136ea <__aeabi_fsub+0x36>
100138dc:	2201      	movs	r2, #1
100138de:	e76d      	b.n	100137bc <__aeabi_fsub+0x108>
100138e0:	2c00      	cmp	r4, #0
100138e2:	d11f      	bne.n	10013924 <__aeabi_fsub+0x270>
100138e4:	2b00      	cmp	r3, #0
100138e6:	d059      	beq.n	1001399c <__aeabi_fsub+0x2e8>
100138e8:	43c0      	mvns	r0, r0
100138ea:	2800      	cmp	r0, #0
100138ec:	d00b      	beq.n	10013906 <__aeabi_fsub+0x252>
100138ee:	2eff      	cmp	r6, #255	; 0xff
100138f0:	d04f      	beq.n	10013992 <__aeabi_fsub+0x2de>
100138f2:	281b      	cmp	r0, #27
100138f4:	dc5e      	bgt.n	100139b4 <__aeabi_fsub+0x300>
100138f6:	001d      	movs	r5, r3
100138f8:	2420      	movs	r4, #32
100138fa:	40c5      	lsrs	r5, r0
100138fc:	1a20      	subs	r0, r4, r0
100138fe:	4083      	lsls	r3, r0
10013900:	1e58      	subs	r0, r3, #1
10013902:	4183      	sbcs	r3, r0
10013904:	432b      	orrs	r3, r5
10013906:	189b      	adds	r3, r3, r2
10013908:	0034      	movs	r4, r6
1001390a:	e758      	b.n	100137be <__aeabi_fsub+0x10a>
1001390c:	2b00      	cmp	r3, #0
1001390e:	d11c      	bne.n	1001394a <__aeabi_fsub+0x296>
10013910:	2a00      	cmp	r2, #0
10013912:	d049      	beq.n	100139a8 <__aeabi_fsub+0x2f4>
10013914:	0013      	movs	r3, r2
10013916:	000d      	movs	r5, r1
10013918:	24ff      	movs	r4, #255	; 0xff
1001391a:	e6e6      	b.n	100136ea <__aeabi_fsub+0x36>
1001391c:	0013      	movs	r3, r2
1001391e:	0034      	movs	r4, r6
10013920:	000d      	movs	r5, r1
10013922:	e6e2      	b.n	100136ea <__aeabi_fsub+0x36>
10013924:	2eff      	cmp	r6, #255	; 0xff
10013926:	d034      	beq.n	10013992 <__aeabi_fsub+0x2de>
10013928:	2480      	movs	r4, #128	; 0x80
1001392a:	04e4      	lsls	r4, r4, #19
1001392c:	4240      	negs	r0, r0
1001392e:	4323      	orrs	r3, r4
10013930:	e7df      	b.n	100138f2 <__aeabi_fsub+0x23e>
10013932:	2a00      	cmp	r2, #0
10013934:	d100      	bne.n	10013938 <__aeabi_fsub+0x284>
10013936:	e6d8      	b.n	100136ea <__aeabi_fsub+0x36>
10013938:	2780      	movs	r7, #128	; 0x80
1001393a:	1a98      	subs	r0, r3, r2
1001393c:	04ff      	lsls	r7, r7, #19
1001393e:	4007      	ands	r7, r0
10013940:	d100      	bne.n	10013944 <__aeabi_fsub+0x290>
10013942:	e74d      	b.n	100137e0 <__aeabi_fsub+0x12c>
10013944:	1ad3      	subs	r3, r2, r3
10013946:	000d      	movs	r5, r1
10013948:	e6cf      	b.n	100136ea <__aeabi_fsub+0x36>
1001394a:	24ff      	movs	r4, #255	; 0xff
1001394c:	2a00      	cmp	r2, #0
1001394e:	d100      	bne.n	10013952 <__aeabi_fsub+0x29e>
10013950:	e6cb      	b.n	100136ea <__aeabi_fsub+0x36>
10013952:	2080      	movs	r0, #128	; 0x80
10013954:	08db      	lsrs	r3, r3, #3
10013956:	03c0      	lsls	r0, r0, #15
10013958:	4203      	tst	r3, r0
1001395a:	d004      	beq.n	10013966 <__aeabi_fsub+0x2b2>
1001395c:	08d2      	lsrs	r2, r2, #3
1001395e:	4202      	tst	r2, r0
10013960:	d101      	bne.n	10013966 <__aeabi_fsub+0x2b2>
10013962:	0013      	movs	r3, r2
10013964:	000d      	movs	r5, r1
10013966:	00db      	lsls	r3, r3, #3
10013968:	24ff      	movs	r4, #255	; 0xff
1001396a:	e6be      	b.n	100136ea <__aeabi_fsub+0x36>
1001396c:	2b00      	cmp	r3, #0
1001396e:	d010      	beq.n	10013992 <__aeabi_fsub+0x2de>
10013970:	24ff      	movs	r4, #255	; 0xff
10013972:	2a00      	cmp	r2, #0
10013974:	d100      	bne.n	10013978 <__aeabi_fsub+0x2c4>
10013976:	e6b8      	b.n	100136ea <__aeabi_fsub+0x36>
10013978:	2080      	movs	r0, #128	; 0x80
1001397a:	08db      	lsrs	r3, r3, #3
1001397c:	03c0      	lsls	r0, r0, #15
1001397e:	4203      	tst	r3, r0
10013980:	d003      	beq.n	1001398a <__aeabi_fsub+0x2d6>
10013982:	08d2      	lsrs	r2, r2, #3
10013984:	4202      	tst	r2, r0
10013986:	d100      	bne.n	1001398a <__aeabi_fsub+0x2d6>
10013988:	0013      	movs	r3, r2
1001398a:	00db      	lsls	r3, r3, #3
1001398c:	000d      	movs	r5, r1
1001398e:	24ff      	movs	r4, #255	; 0xff
10013990:	e6ab      	b.n	100136ea <__aeabi_fsub+0x36>
10013992:	0013      	movs	r3, r2
10013994:	24ff      	movs	r4, #255	; 0xff
10013996:	e6a8      	b.n	100136ea <__aeabi_fsub+0x36>
10013998:	2301      	movs	r3, #1
1001399a:	e76e      	b.n	1001387a <__aeabi_fsub+0x1c6>
1001399c:	0013      	movs	r3, r2
1001399e:	0034      	movs	r4, r6
100139a0:	e6a3      	b.n	100136ea <__aeabi_fsub+0x36>
100139a2:	2700      	movs	r7, #0
100139a4:	2500      	movs	r5, #0
100139a6:	e71e      	b.n	100137e6 <__aeabi_fsub+0x132>
100139a8:	2780      	movs	r7, #128	; 0x80
100139aa:	2500      	movs	r5, #0
100139ac:	03ff      	lsls	r7, r7, #15
100139ae:	e6e9      	b.n	10013784 <__aeabi_fsub+0xd0>
100139b0:	0013      	movs	r3, r2
100139b2:	e69a      	b.n	100136ea <__aeabi_fsub+0x36>
100139b4:	2301      	movs	r3, #1
100139b6:	e7a6      	b.n	10013906 <__aeabi_fsub+0x252>
100139b8:	7dffffff 	.word	0x7dffffff
100139bc:	fbffffff 	.word	0xfbffffff

100139c0 <__aeabi_f2iz>:
100139c0:	0243      	lsls	r3, r0, #9
100139c2:	0a59      	lsrs	r1, r3, #9
100139c4:	0043      	lsls	r3, r0, #1
100139c6:	0fc2      	lsrs	r2, r0, #31
100139c8:	0e1b      	lsrs	r3, r3, #24
100139ca:	2000      	movs	r0, #0
100139cc:	2b7e      	cmp	r3, #126	; 0x7e
100139ce:	dd0e      	ble.n	100139ee <__aeabi_f2iz+0x2e>
100139d0:	2b9d      	cmp	r3, #157	; 0x9d
100139d2:	dc0d      	bgt.n	100139f0 <__aeabi_f2iz+0x30>
100139d4:	2080      	movs	r0, #128	; 0x80
100139d6:	0400      	lsls	r0, r0, #16
100139d8:	4301      	orrs	r1, r0
100139da:	2b95      	cmp	r3, #149	; 0x95
100139dc:	dc0b      	bgt.n	100139f6 <__aeabi_f2iz+0x36>
100139de:	2096      	movs	r0, #150	; 0x96
100139e0:	1ac3      	subs	r3, r0, r3
100139e2:	40d9      	lsrs	r1, r3
100139e4:	000b      	movs	r3, r1
100139e6:	4258      	negs	r0, r3
100139e8:	2a00      	cmp	r2, #0
100139ea:	d100      	bne.n	100139ee <__aeabi_f2iz+0x2e>
100139ec:	0018      	movs	r0, r3
100139ee:	4770      	bx	lr
100139f0:	4b03      	ldr	r3, [pc, #12]	; (10013a00 <__aeabi_f2iz+0x40>)
100139f2:	18d0      	adds	r0, r2, r3
100139f4:	e7fb      	b.n	100139ee <__aeabi_f2iz+0x2e>
100139f6:	3b96      	subs	r3, #150	; 0x96
100139f8:	4099      	lsls	r1, r3
100139fa:	000b      	movs	r3, r1
100139fc:	e7f3      	b.n	100139e6 <__aeabi_f2iz+0x26>
100139fe:	46c0      	nop			; (mov r8, r8)
10013a00:	7fffffff 	.word	0x7fffffff

10013a04 <__aeabi_ui2f>:
10013a04:	b570      	push	{r4, r5, r6, lr}
10013a06:	1e04      	subs	r4, r0, #0
10013a08:	d028      	beq.n	10013a5c <__aeabi_ui2f+0x58>
10013a0a:	f000 ff83 	bl	10014914 <__clzsi2>
10013a0e:	239e      	movs	r3, #158	; 0x9e
10013a10:	1a1b      	subs	r3, r3, r0
10013a12:	2b96      	cmp	r3, #150	; 0x96
10013a14:	dc0a      	bgt.n	10013a2c <__aeabi_ui2f+0x28>
10013a16:	2296      	movs	r2, #150	; 0x96
10013a18:	1ad2      	subs	r2, r2, r3
10013a1a:	4094      	lsls	r4, r2
10013a1c:	0262      	lsls	r2, r4, #9
10013a1e:	0a52      	lsrs	r2, r2, #9
10013a20:	b2d8      	uxtb	r0, r3
10013a22:	0252      	lsls	r2, r2, #9
10013a24:	0a52      	lsrs	r2, r2, #9
10013a26:	05c0      	lsls	r0, r0, #23
10013a28:	4310      	orrs	r0, r2
10013a2a:	bd70      	pop	{r4, r5, r6, pc}
10013a2c:	2b99      	cmp	r3, #153	; 0x99
10013a2e:	dc18      	bgt.n	10013a62 <__aeabi_ui2f+0x5e>
10013a30:	2299      	movs	r2, #153	; 0x99
10013a32:	1ad2      	subs	r2, r2, r3
10013a34:	4094      	lsls	r4, r2
10013a36:	4a11      	ldr	r2, [pc, #68]	; (10013a7c <__aeabi_ui2f+0x78>)
10013a38:	4022      	ands	r2, r4
10013a3a:	0761      	lsls	r1, r4, #29
10013a3c:	d004      	beq.n	10013a48 <__aeabi_ui2f+0x44>
10013a3e:	210f      	movs	r1, #15
10013a40:	400c      	ands	r4, r1
10013a42:	2c04      	cmp	r4, #4
10013a44:	d000      	beq.n	10013a48 <__aeabi_ui2f+0x44>
10013a46:	3204      	adds	r2, #4
10013a48:	0151      	lsls	r1, r2, #5
10013a4a:	d503      	bpl.n	10013a54 <__aeabi_ui2f+0x50>
10013a4c:	4b0b      	ldr	r3, [pc, #44]	; (10013a7c <__aeabi_ui2f+0x78>)
10013a4e:	401a      	ands	r2, r3
10013a50:	239f      	movs	r3, #159	; 0x9f
10013a52:	1a1b      	subs	r3, r3, r0
10013a54:	0192      	lsls	r2, r2, #6
10013a56:	0a52      	lsrs	r2, r2, #9
10013a58:	b2d8      	uxtb	r0, r3
10013a5a:	e7e2      	b.n	10013a22 <__aeabi_ui2f+0x1e>
10013a5c:	2000      	movs	r0, #0
10013a5e:	2200      	movs	r2, #0
10013a60:	e7df      	b.n	10013a22 <__aeabi_ui2f+0x1e>
10013a62:	2205      	movs	r2, #5
10013a64:	0025      	movs	r5, r4
10013a66:	1a12      	subs	r2, r2, r0
10013a68:	21b9      	movs	r1, #185	; 0xb9
10013a6a:	40d5      	lsrs	r5, r2
10013a6c:	0022      	movs	r2, r4
10013a6e:	1ac9      	subs	r1, r1, r3
10013a70:	408a      	lsls	r2, r1
10013a72:	1e54      	subs	r4, r2, #1
10013a74:	41a2      	sbcs	r2, r4
10013a76:	002c      	movs	r4, r5
10013a78:	4314      	orrs	r4, r2
10013a7a:	e7dc      	b.n	10013a36 <__aeabi_ui2f+0x32>
10013a7c:	fbffffff 	.word	0xfbffffff

10013a80 <__eqdf2>:
10013a80:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a82:	465f      	mov	r7, fp
10013a84:	4656      	mov	r6, sl
10013a86:	464d      	mov	r5, r9
10013a88:	4644      	mov	r4, r8
10013a8a:	b4f0      	push	{r4, r5, r6, r7}
10013a8c:	031f      	lsls	r7, r3, #12
10013a8e:	005c      	lsls	r4, r3, #1
10013a90:	0fdb      	lsrs	r3, r3, #31
10013a92:	469a      	mov	sl, r3
10013a94:	4b19      	ldr	r3, [pc, #100]	; (10013afc <__eqdf2+0x7c>)
10013a96:	030e      	lsls	r6, r1, #12
10013a98:	004d      	lsls	r5, r1, #1
10013a9a:	0fc9      	lsrs	r1, r1, #31
10013a9c:	4680      	mov	r8, r0
10013a9e:	0b36      	lsrs	r6, r6, #12
10013aa0:	0d6d      	lsrs	r5, r5, #21
10013aa2:	468b      	mov	fp, r1
10013aa4:	4691      	mov	r9, r2
10013aa6:	0b3f      	lsrs	r7, r7, #12
10013aa8:	0d64      	lsrs	r4, r4, #21
10013aaa:	429d      	cmp	r5, r3
10013aac:	d019      	beq.n	10013ae2 <__eqdf2+0x62>
10013aae:	4b13      	ldr	r3, [pc, #76]	; (10013afc <__eqdf2+0x7c>)
10013ab0:	429c      	cmp	r4, r3
10013ab2:	d01b      	beq.n	10013aec <__eqdf2+0x6c>
10013ab4:	2301      	movs	r3, #1
10013ab6:	42a5      	cmp	r5, r4
10013ab8:	d006      	beq.n	10013ac8 <__eqdf2+0x48>
10013aba:	0018      	movs	r0, r3
10013abc:	bc3c      	pop	{r2, r3, r4, r5}
10013abe:	4690      	mov	r8, r2
10013ac0:	4699      	mov	r9, r3
10013ac2:	46a2      	mov	sl, r4
10013ac4:	46ab      	mov	fp, r5
10013ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ac8:	42be      	cmp	r6, r7
10013aca:	d1f6      	bne.n	10013aba <__eqdf2+0x3a>
10013acc:	45c8      	cmp	r8, r9
10013ace:	d1f4      	bne.n	10013aba <__eqdf2+0x3a>
10013ad0:	45d3      	cmp	fp, sl
10013ad2:	d010      	beq.n	10013af6 <__eqdf2+0x76>
10013ad4:	2d00      	cmp	r5, #0
10013ad6:	d1f0      	bne.n	10013aba <__eqdf2+0x3a>
10013ad8:	4330      	orrs	r0, r6
10013ada:	0003      	movs	r3, r0
10013adc:	1e5a      	subs	r2, r3, #1
10013ade:	4193      	sbcs	r3, r2
10013ae0:	e7eb      	b.n	10013aba <__eqdf2+0x3a>
10013ae2:	0031      	movs	r1, r6
10013ae4:	2301      	movs	r3, #1
10013ae6:	4301      	orrs	r1, r0
10013ae8:	d1e7      	bne.n	10013aba <__eqdf2+0x3a>
10013aea:	e7e0      	b.n	10013aae <__eqdf2+0x2e>
10013aec:	433a      	orrs	r2, r7
10013aee:	2301      	movs	r3, #1
10013af0:	2a00      	cmp	r2, #0
10013af2:	d1e2      	bne.n	10013aba <__eqdf2+0x3a>
10013af4:	e7de      	b.n	10013ab4 <__eqdf2+0x34>
10013af6:	2300      	movs	r3, #0
10013af8:	e7df      	b.n	10013aba <__eqdf2+0x3a>
10013afa:	46c0      	nop			; (mov r8, r8)
10013afc:	000007ff 	.word	0x000007ff

10013b00 <__gedf2>:
10013b00:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b02:	465f      	mov	r7, fp
10013b04:	4644      	mov	r4, r8
10013b06:	4656      	mov	r6, sl
10013b08:	464d      	mov	r5, r9
10013b0a:	b4f0      	push	{r4, r5, r6, r7}
10013b0c:	031f      	lsls	r7, r3, #12
10013b0e:	0b3c      	lsrs	r4, r7, #12
10013b10:	4f2c      	ldr	r7, [pc, #176]	; (10013bc4 <__gedf2+0xc4>)
10013b12:	030e      	lsls	r6, r1, #12
10013b14:	004d      	lsls	r5, r1, #1
10013b16:	46a3      	mov	fp, r4
10013b18:	005c      	lsls	r4, r3, #1
10013b1a:	4684      	mov	ip, r0
10013b1c:	0b36      	lsrs	r6, r6, #12
10013b1e:	0d6d      	lsrs	r5, r5, #21
10013b20:	0fc9      	lsrs	r1, r1, #31
10013b22:	4690      	mov	r8, r2
10013b24:	0d64      	lsrs	r4, r4, #21
10013b26:	0fdb      	lsrs	r3, r3, #31
10013b28:	42bd      	cmp	r5, r7
10013b2a:	d02b      	beq.n	10013b84 <__gedf2+0x84>
10013b2c:	4f25      	ldr	r7, [pc, #148]	; (10013bc4 <__gedf2+0xc4>)
10013b2e:	42bc      	cmp	r4, r7
10013b30:	d02e      	beq.n	10013b90 <__gedf2+0x90>
10013b32:	2d00      	cmp	r5, #0
10013b34:	d10e      	bne.n	10013b54 <__gedf2+0x54>
10013b36:	4330      	orrs	r0, r6
10013b38:	0007      	movs	r7, r0
10013b3a:	4681      	mov	r9, r0
10013b3c:	4278      	negs	r0, r7
10013b3e:	4178      	adcs	r0, r7
10013b40:	2c00      	cmp	r4, #0
10013b42:	d117      	bne.n	10013b74 <__gedf2+0x74>
10013b44:	465f      	mov	r7, fp
10013b46:	433a      	orrs	r2, r7
10013b48:	d114      	bne.n	10013b74 <__gedf2+0x74>
10013b4a:	464b      	mov	r3, r9
10013b4c:	2000      	movs	r0, #0
10013b4e:	2b00      	cmp	r3, #0
10013b50:	d00a      	beq.n	10013b68 <__gedf2+0x68>
10013b52:	e006      	b.n	10013b62 <__gedf2+0x62>
10013b54:	2c00      	cmp	r4, #0
10013b56:	d102      	bne.n	10013b5e <__gedf2+0x5e>
10013b58:	4658      	mov	r0, fp
10013b5a:	4302      	orrs	r2, r0
10013b5c:	d001      	beq.n	10013b62 <__gedf2+0x62>
10013b5e:	4299      	cmp	r1, r3
10013b60:	d01a      	beq.n	10013b98 <__gedf2+0x98>
10013b62:	2301      	movs	r3, #1
10013b64:	4248      	negs	r0, r1
10013b66:	4318      	orrs	r0, r3
10013b68:	bc3c      	pop	{r2, r3, r4, r5}
10013b6a:	4690      	mov	r8, r2
10013b6c:	4699      	mov	r9, r3
10013b6e:	46a2      	mov	sl, r4
10013b70:	46ab      	mov	fp, r5
10013b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b74:	2800      	cmp	r0, #0
10013b76:	d0f2      	beq.n	10013b5e <__gedf2+0x5e>
10013b78:	4258      	negs	r0, r3
10013b7a:	4158      	adcs	r0, r3
10013b7c:	2201      	movs	r2, #1
10013b7e:	4240      	negs	r0, r0
10013b80:	4310      	orrs	r0, r2
10013b82:	e7f1      	b.n	10013b68 <__gedf2+0x68>
10013b84:	0037      	movs	r7, r6
10013b86:	4307      	orrs	r7, r0
10013b88:	d0d0      	beq.n	10013b2c <__gedf2+0x2c>
10013b8a:	2002      	movs	r0, #2
10013b8c:	4240      	negs	r0, r0
10013b8e:	e7eb      	b.n	10013b68 <__gedf2+0x68>
10013b90:	465f      	mov	r7, fp
10013b92:	4317      	orrs	r7, r2
10013b94:	d0cd      	beq.n	10013b32 <__gedf2+0x32>
10013b96:	e7f8      	b.n	10013b8a <__gedf2+0x8a>
10013b98:	42a5      	cmp	r5, r4
10013b9a:	dce2      	bgt.n	10013b62 <__gedf2+0x62>
10013b9c:	db05      	blt.n	10013baa <__gedf2+0xaa>
10013b9e:	455e      	cmp	r6, fp
10013ba0:	d8df      	bhi.n	10013b62 <__gedf2+0x62>
10013ba2:	d008      	beq.n	10013bb6 <__gedf2+0xb6>
10013ba4:	2000      	movs	r0, #0
10013ba6:	455e      	cmp	r6, fp
10013ba8:	d2de      	bcs.n	10013b68 <__gedf2+0x68>
10013baa:	4248      	negs	r0, r1
10013bac:	4148      	adcs	r0, r1
10013bae:	2301      	movs	r3, #1
10013bb0:	4240      	negs	r0, r0
10013bb2:	4318      	orrs	r0, r3
10013bb4:	e7d8      	b.n	10013b68 <__gedf2+0x68>
10013bb6:	45c4      	cmp	ip, r8
10013bb8:	d8d3      	bhi.n	10013b62 <__gedf2+0x62>
10013bba:	2000      	movs	r0, #0
10013bbc:	45c4      	cmp	ip, r8
10013bbe:	d3f4      	bcc.n	10013baa <__gedf2+0xaa>
10013bc0:	e7d2      	b.n	10013b68 <__gedf2+0x68>
10013bc2:	46c0      	nop			; (mov r8, r8)
10013bc4:	000007ff 	.word	0x000007ff

10013bc8 <__ledf2>:
10013bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bca:	465f      	mov	r7, fp
10013bcc:	464d      	mov	r5, r9
10013bce:	4644      	mov	r4, r8
10013bd0:	4656      	mov	r6, sl
10013bd2:	b4f0      	push	{r4, r5, r6, r7}
10013bd4:	031c      	lsls	r4, r3, #12
10013bd6:	0b24      	lsrs	r4, r4, #12
10013bd8:	46a4      	mov	ip, r4
10013bda:	4c2f      	ldr	r4, [pc, #188]	; (10013c98 <__ledf2+0xd0>)
10013bdc:	030f      	lsls	r7, r1, #12
10013bde:	004d      	lsls	r5, r1, #1
10013be0:	005e      	lsls	r6, r3, #1
10013be2:	0fc9      	lsrs	r1, r1, #31
10013be4:	4680      	mov	r8, r0
10013be6:	0b3f      	lsrs	r7, r7, #12
10013be8:	0d6d      	lsrs	r5, r5, #21
10013bea:	468b      	mov	fp, r1
10013bec:	4691      	mov	r9, r2
10013bee:	0d76      	lsrs	r6, r6, #21
10013bf0:	0fdb      	lsrs	r3, r3, #31
10013bf2:	42a5      	cmp	r5, r4
10013bf4:	d020      	beq.n	10013c38 <__ledf2+0x70>
10013bf6:	4c28      	ldr	r4, [pc, #160]	; (10013c98 <__ledf2+0xd0>)
10013bf8:	42a6      	cmp	r6, r4
10013bfa:	d022      	beq.n	10013c42 <__ledf2+0x7a>
10013bfc:	2d00      	cmp	r5, #0
10013bfe:	d112      	bne.n	10013c26 <__ledf2+0x5e>
10013c00:	4338      	orrs	r0, r7
10013c02:	4244      	negs	r4, r0
10013c04:	4144      	adcs	r4, r0
10013c06:	2e00      	cmp	r6, #0
10013c08:	d020      	beq.n	10013c4c <__ledf2+0x84>
10013c0a:	2c00      	cmp	r4, #0
10013c0c:	d00d      	beq.n	10013c2a <__ledf2+0x62>
10013c0e:	425c      	negs	r4, r3
10013c10:	4163      	adcs	r3, r4
10013c12:	2401      	movs	r4, #1
10013c14:	425b      	negs	r3, r3
10013c16:	431c      	orrs	r4, r3
10013c18:	0020      	movs	r0, r4
10013c1a:	bc3c      	pop	{r2, r3, r4, r5}
10013c1c:	4690      	mov	r8, r2
10013c1e:	4699      	mov	r9, r3
10013c20:	46a2      	mov	sl, r4
10013c22:	46ab      	mov	fp, r5
10013c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c26:	2e00      	cmp	r6, #0
10013c28:	d017      	beq.n	10013c5a <__ledf2+0x92>
10013c2a:	455b      	cmp	r3, fp
10013c2c:	d019      	beq.n	10013c62 <__ledf2+0x9a>
10013c2e:	465b      	mov	r3, fp
10013c30:	425c      	negs	r4, r3
10013c32:	2301      	movs	r3, #1
10013c34:	431c      	orrs	r4, r3
10013c36:	e7ef      	b.n	10013c18 <__ledf2+0x50>
10013c38:	0039      	movs	r1, r7
10013c3a:	2402      	movs	r4, #2
10013c3c:	4301      	orrs	r1, r0
10013c3e:	d1eb      	bne.n	10013c18 <__ledf2+0x50>
10013c40:	e7d9      	b.n	10013bf6 <__ledf2+0x2e>
10013c42:	4661      	mov	r1, ip
10013c44:	2402      	movs	r4, #2
10013c46:	4311      	orrs	r1, r2
10013c48:	d1e6      	bne.n	10013c18 <__ledf2+0x50>
10013c4a:	e7d7      	b.n	10013bfc <__ledf2+0x34>
10013c4c:	4661      	mov	r1, ip
10013c4e:	430a      	orrs	r2, r1
10013c50:	d1db      	bne.n	10013c0a <__ledf2+0x42>
10013c52:	2400      	movs	r4, #0
10013c54:	2800      	cmp	r0, #0
10013c56:	d0df      	beq.n	10013c18 <__ledf2+0x50>
10013c58:	e7e9      	b.n	10013c2e <__ledf2+0x66>
10013c5a:	4661      	mov	r1, ip
10013c5c:	430a      	orrs	r2, r1
10013c5e:	d1e4      	bne.n	10013c2a <__ledf2+0x62>
10013c60:	e7e5      	b.n	10013c2e <__ledf2+0x66>
10013c62:	42b5      	cmp	r5, r6
10013c64:	dd03      	ble.n	10013c6e <__ledf2+0xa6>
10013c66:	2201      	movs	r2, #1
10013c68:	425c      	negs	r4, r3
10013c6a:	4314      	orrs	r4, r2
10013c6c:	e7d4      	b.n	10013c18 <__ledf2+0x50>
10013c6e:	42b5      	cmp	r5, r6
10013c70:	dbcd      	blt.n	10013c0e <__ledf2+0x46>
10013c72:	4567      	cmp	r7, ip
10013c74:	d8db      	bhi.n	10013c2e <__ledf2+0x66>
10013c76:	d009      	beq.n	10013c8c <__ledf2+0xc4>
10013c78:	2400      	movs	r4, #0
10013c7a:	4567      	cmp	r7, ip
10013c7c:	d2cc      	bcs.n	10013c18 <__ledf2+0x50>
10013c7e:	4659      	mov	r1, fp
10013c80:	424c      	negs	r4, r1
10013c82:	4161      	adcs	r1, r4
10013c84:	2401      	movs	r4, #1
10013c86:	4249      	negs	r1, r1
10013c88:	430c      	orrs	r4, r1
10013c8a:	e7c5      	b.n	10013c18 <__ledf2+0x50>
10013c8c:	45c8      	cmp	r8, r9
10013c8e:	d8ce      	bhi.n	10013c2e <__ledf2+0x66>
10013c90:	2400      	movs	r4, #0
10013c92:	45c8      	cmp	r8, r9
10013c94:	d3f3      	bcc.n	10013c7e <__ledf2+0xb6>
10013c96:	e7bf      	b.n	10013c18 <__ledf2+0x50>
10013c98:	000007ff 	.word	0x000007ff

10013c9c <__aeabi_dmul>:
10013c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c9e:	465f      	mov	r7, fp
10013ca0:	4656      	mov	r6, sl
10013ca2:	464d      	mov	r5, r9
10013ca4:	4644      	mov	r4, r8
10013ca6:	b4f0      	push	{r4, r5, r6, r7}
10013ca8:	030d      	lsls	r5, r1, #12
10013caa:	4699      	mov	r9, r3
10013cac:	004e      	lsls	r6, r1, #1
10013cae:	0b2b      	lsrs	r3, r5, #12
10013cb0:	b087      	sub	sp, #28
10013cb2:	0007      	movs	r7, r0
10013cb4:	4692      	mov	sl, r2
10013cb6:	4680      	mov	r8, r0
10013cb8:	469b      	mov	fp, r3
10013cba:	0d76      	lsrs	r6, r6, #21
10013cbc:	0fcc      	lsrs	r4, r1, #31
10013cbe:	2e00      	cmp	r6, #0
10013cc0:	d069      	beq.n	10013d96 <__aeabi_dmul+0xfa>
10013cc2:	4b6d      	ldr	r3, [pc, #436]	; (10013e78 <__aeabi_dmul+0x1dc>)
10013cc4:	429e      	cmp	r6, r3
10013cc6:	d035      	beq.n	10013d34 <__aeabi_dmul+0x98>
10013cc8:	465b      	mov	r3, fp
10013cca:	2280      	movs	r2, #128	; 0x80
10013ccc:	00dd      	lsls	r5, r3, #3
10013cce:	0412      	lsls	r2, r2, #16
10013cd0:	0f43      	lsrs	r3, r0, #29
10013cd2:	4313      	orrs	r3, r2
10013cd4:	432b      	orrs	r3, r5
10013cd6:	469b      	mov	fp, r3
10013cd8:	00c3      	lsls	r3, r0, #3
10013cda:	4698      	mov	r8, r3
10013cdc:	4b67      	ldr	r3, [pc, #412]	; (10013e7c <__aeabi_dmul+0x1e0>)
10013cde:	2700      	movs	r7, #0
10013ce0:	469c      	mov	ip, r3
10013ce2:	2300      	movs	r3, #0
10013ce4:	4466      	add	r6, ip
10013ce6:	9301      	str	r3, [sp, #4]
10013ce8:	464a      	mov	r2, r9
10013cea:	0315      	lsls	r5, r2, #12
10013cec:	0050      	lsls	r0, r2, #1
10013cee:	0fd2      	lsrs	r2, r2, #31
10013cf0:	4653      	mov	r3, sl
10013cf2:	0b2d      	lsrs	r5, r5, #12
10013cf4:	0d40      	lsrs	r0, r0, #21
10013cf6:	4691      	mov	r9, r2
10013cf8:	d100      	bne.n	10013cfc <__aeabi_dmul+0x60>
10013cfa:	e076      	b.n	10013dea <__aeabi_dmul+0x14e>
10013cfc:	4a5e      	ldr	r2, [pc, #376]	; (10013e78 <__aeabi_dmul+0x1dc>)
10013cfe:	4290      	cmp	r0, r2
10013d00:	d06c      	beq.n	10013ddc <__aeabi_dmul+0x140>
10013d02:	2280      	movs	r2, #128	; 0x80
10013d04:	0f5b      	lsrs	r3, r3, #29
10013d06:	0412      	lsls	r2, r2, #16
10013d08:	4313      	orrs	r3, r2
10013d0a:	4a5c      	ldr	r2, [pc, #368]	; (10013e7c <__aeabi_dmul+0x1e0>)
10013d0c:	00ed      	lsls	r5, r5, #3
10013d0e:	4694      	mov	ip, r2
10013d10:	431d      	orrs	r5, r3
10013d12:	4653      	mov	r3, sl
10013d14:	2200      	movs	r2, #0
10013d16:	00db      	lsls	r3, r3, #3
10013d18:	4460      	add	r0, ip
10013d1a:	4649      	mov	r1, r9
10013d1c:	1836      	adds	r6, r6, r0
10013d1e:	1c70      	adds	r0, r6, #1
10013d20:	4061      	eors	r1, r4
10013d22:	9002      	str	r0, [sp, #8]
10013d24:	4317      	orrs	r7, r2
10013d26:	2f0f      	cmp	r7, #15
10013d28:	d900      	bls.n	10013d2c <__aeabi_dmul+0x90>
10013d2a:	e0af      	b.n	10013e8c <__aeabi_dmul+0x1f0>
10013d2c:	4854      	ldr	r0, [pc, #336]	; (10013e80 <__aeabi_dmul+0x1e4>)
10013d2e:	00bf      	lsls	r7, r7, #2
10013d30:	59c7      	ldr	r7, [r0, r7]
10013d32:	46bf      	mov	pc, r7
10013d34:	465b      	mov	r3, fp
10013d36:	431f      	orrs	r7, r3
10013d38:	d000      	beq.n	10013d3c <__aeabi_dmul+0xa0>
10013d3a:	e088      	b.n	10013e4e <__aeabi_dmul+0x1b2>
10013d3c:	2300      	movs	r3, #0
10013d3e:	469b      	mov	fp, r3
10013d40:	4698      	mov	r8, r3
10013d42:	3302      	adds	r3, #2
10013d44:	2708      	movs	r7, #8
10013d46:	9301      	str	r3, [sp, #4]
10013d48:	e7ce      	b.n	10013ce8 <__aeabi_dmul+0x4c>
10013d4a:	4649      	mov	r1, r9
10013d4c:	2a02      	cmp	r2, #2
10013d4e:	d06a      	beq.n	10013e26 <__aeabi_dmul+0x18a>
10013d50:	2a03      	cmp	r2, #3
10013d52:	d100      	bne.n	10013d56 <__aeabi_dmul+0xba>
10013d54:	e209      	b.n	1001416a <__aeabi_dmul+0x4ce>
10013d56:	2a01      	cmp	r2, #1
10013d58:	d000      	beq.n	10013d5c <__aeabi_dmul+0xc0>
10013d5a:	e1bb      	b.n	100140d4 <__aeabi_dmul+0x438>
10013d5c:	4011      	ands	r1, r2
10013d5e:	2200      	movs	r2, #0
10013d60:	2300      	movs	r3, #0
10013d62:	2500      	movs	r5, #0
10013d64:	4690      	mov	r8, r2
10013d66:	b2cc      	uxtb	r4, r1
10013d68:	2100      	movs	r1, #0
10013d6a:	032d      	lsls	r5, r5, #12
10013d6c:	0d0a      	lsrs	r2, r1, #20
10013d6e:	0512      	lsls	r2, r2, #20
10013d70:	0b2d      	lsrs	r5, r5, #12
10013d72:	4315      	orrs	r5, r2
10013d74:	4a43      	ldr	r2, [pc, #268]	; (10013e84 <__aeabi_dmul+0x1e8>)
10013d76:	051b      	lsls	r3, r3, #20
10013d78:	4015      	ands	r5, r2
10013d7a:	431d      	orrs	r5, r3
10013d7c:	006d      	lsls	r5, r5, #1
10013d7e:	07e4      	lsls	r4, r4, #31
10013d80:	086d      	lsrs	r5, r5, #1
10013d82:	4325      	orrs	r5, r4
10013d84:	4640      	mov	r0, r8
10013d86:	0029      	movs	r1, r5
10013d88:	b007      	add	sp, #28
10013d8a:	bc3c      	pop	{r2, r3, r4, r5}
10013d8c:	4690      	mov	r8, r2
10013d8e:	4699      	mov	r9, r3
10013d90:	46a2      	mov	sl, r4
10013d92:	46ab      	mov	fp, r5
10013d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013d96:	4303      	orrs	r3, r0
10013d98:	d052      	beq.n	10013e40 <__aeabi_dmul+0x1a4>
10013d9a:	465b      	mov	r3, fp
10013d9c:	2b00      	cmp	r3, #0
10013d9e:	d100      	bne.n	10013da2 <__aeabi_dmul+0x106>
10013da0:	e18a      	b.n	100140b8 <__aeabi_dmul+0x41c>
10013da2:	4658      	mov	r0, fp
10013da4:	f000 fdb6 	bl	10014914 <__clzsi2>
10013da8:	0003      	movs	r3, r0
10013daa:	3b0b      	subs	r3, #11
10013dac:	2b1c      	cmp	r3, #28
10013dae:	dd00      	ble.n	10013db2 <__aeabi_dmul+0x116>
10013db0:	e17b      	b.n	100140aa <__aeabi_dmul+0x40e>
10013db2:	221d      	movs	r2, #29
10013db4:	1ad3      	subs	r3, r2, r3
10013db6:	003a      	movs	r2, r7
10013db8:	0001      	movs	r1, r0
10013dba:	465d      	mov	r5, fp
10013dbc:	40da      	lsrs	r2, r3
10013dbe:	3908      	subs	r1, #8
10013dc0:	408d      	lsls	r5, r1
10013dc2:	0013      	movs	r3, r2
10013dc4:	408f      	lsls	r7, r1
10013dc6:	432b      	orrs	r3, r5
10013dc8:	469b      	mov	fp, r3
10013dca:	46b8      	mov	r8, r7
10013dcc:	4b2e      	ldr	r3, [pc, #184]	; (10013e88 <__aeabi_dmul+0x1ec>)
10013dce:	2700      	movs	r7, #0
10013dd0:	469c      	mov	ip, r3
10013dd2:	2300      	movs	r3, #0
10013dd4:	4460      	add	r0, ip
10013dd6:	4246      	negs	r6, r0
10013dd8:	9301      	str	r3, [sp, #4]
10013dda:	e785      	b.n	10013ce8 <__aeabi_dmul+0x4c>
10013ddc:	4652      	mov	r2, sl
10013dde:	432a      	orrs	r2, r5
10013de0:	d12c      	bne.n	10013e3c <__aeabi_dmul+0x1a0>
10013de2:	2500      	movs	r5, #0
10013de4:	2300      	movs	r3, #0
10013de6:	2202      	movs	r2, #2
10013de8:	e797      	b.n	10013d1a <__aeabi_dmul+0x7e>
10013dea:	4652      	mov	r2, sl
10013dec:	432a      	orrs	r2, r5
10013dee:	d021      	beq.n	10013e34 <__aeabi_dmul+0x198>
10013df0:	2d00      	cmp	r5, #0
10013df2:	d100      	bne.n	10013df6 <__aeabi_dmul+0x15a>
10013df4:	e154      	b.n	100140a0 <__aeabi_dmul+0x404>
10013df6:	0028      	movs	r0, r5
10013df8:	f000 fd8c 	bl	10014914 <__clzsi2>
10013dfc:	0003      	movs	r3, r0
10013dfe:	3b0b      	subs	r3, #11
10013e00:	2b1c      	cmp	r3, #28
10013e02:	dd00      	ble.n	10013e06 <__aeabi_dmul+0x16a>
10013e04:	e146      	b.n	10014094 <__aeabi_dmul+0x3f8>
10013e06:	211d      	movs	r1, #29
10013e08:	1acb      	subs	r3, r1, r3
10013e0a:	4651      	mov	r1, sl
10013e0c:	0002      	movs	r2, r0
10013e0e:	40d9      	lsrs	r1, r3
10013e10:	4653      	mov	r3, sl
10013e12:	3a08      	subs	r2, #8
10013e14:	4095      	lsls	r5, r2
10013e16:	4093      	lsls	r3, r2
10013e18:	430d      	orrs	r5, r1
10013e1a:	4a1b      	ldr	r2, [pc, #108]	; (10013e88 <__aeabi_dmul+0x1ec>)
10013e1c:	4694      	mov	ip, r2
10013e1e:	4460      	add	r0, ip
10013e20:	4240      	negs	r0, r0
10013e22:	2200      	movs	r2, #0
10013e24:	e779      	b.n	10013d1a <__aeabi_dmul+0x7e>
10013e26:	2401      	movs	r4, #1
10013e28:	2200      	movs	r2, #0
10013e2a:	400c      	ands	r4, r1
10013e2c:	4b12      	ldr	r3, [pc, #72]	; (10013e78 <__aeabi_dmul+0x1dc>)
10013e2e:	2500      	movs	r5, #0
10013e30:	4690      	mov	r8, r2
10013e32:	e799      	b.n	10013d68 <__aeabi_dmul+0xcc>
10013e34:	2500      	movs	r5, #0
10013e36:	2300      	movs	r3, #0
10013e38:	2201      	movs	r2, #1
10013e3a:	e76e      	b.n	10013d1a <__aeabi_dmul+0x7e>
10013e3c:	2203      	movs	r2, #3
10013e3e:	e76c      	b.n	10013d1a <__aeabi_dmul+0x7e>
10013e40:	2300      	movs	r3, #0
10013e42:	469b      	mov	fp, r3
10013e44:	4698      	mov	r8, r3
10013e46:	3301      	adds	r3, #1
10013e48:	2704      	movs	r7, #4
10013e4a:	9301      	str	r3, [sp, #4]
10013e4c:	e74c      	b.n	10013ce8 <__aeabi_dmul+0x4c>
10013e4e:	2303      	movs	r3, #3
10013e50:	270c      	movs	r7, #12
10013e52:	9301      	str	r3, [sp, #4]
10013e54:	e748      	b.n	10013ce8 <__aeabi_dmul+0x4c>
10013e56:	2300      	movs	r3, #0
10013e58:	2580      	movs	r5, #128	; 0x80
10013e5a:	4698      	mov	r8, r3
10013e5c:	2400      	movs	r4, #0
10013e5e:	032d      	lsls	r5, r5, #12
10013e60:	4b05      	ldr	r3, [pc, #20]	; (10013e78 <__aeabi_dmul+0x1dc>)
10013e62:	e781      	b.n	10013d68 <__aeabi_dmul+0xcc>
10013e64:	465d      	mov	r5, fp
10013e66:	4643      	mov	r3, r8
10013e68:	9a01      	ldr	r2, [sp, #4]
10013e6a:	e76f      	b.n	10013d4c <__aeabi_dmul+0xb0>
10013e6c:	465d      	mov	r5, fp
10013e6e:	4643      	mov	r3, r8
10013e70:	0021      	movs	r1, r4
10013e72:	9a01      	ldr	r2, [sp, #4]
10013e74:	e76a      	b.n	10013d4c <__aeabi_dmul+0xb0>
10013e76:	46c0      	nop			; (mov r8, r8)
10013e78:	000007ff 	.word	0x000007ff
10013e7c:	fffffc01 	.word	0xfffffc01
10013e80:	10017bb4 	.word	0x10017bb4
10013e84:	800fffff 	.word	0x800fffff
10013e88:	000003f3 	.word	0x000003f3
10013e8c:	4642      	mov	r2, r8
10013e8e:	0c12      	lsrs	r2, r2, #16
10013e90:	4691      	mov	r9, r2
10013e92:	0c1a      	lsrs	r2, r3, #16
10013e94:	4694      	mov	ip, r2
10013e96:	4642      	mov	r2, r8
10013e98:	0417      	lsls	r7, r2, #16
10013e9a:	464a      	mov	r2, r9
10013e9c:	041b      	lsls	r3, r3, #16
10013e9e:	0c1b      	lsrs	r3, r3, #16
10013ea0:	435a      	muls	r2, r3
10013ea2:	4660      	mov	r0, ip
10013ea4:	4690      	mov	r8, r2
10013ea6:	464a      	mov	r2, r9
10013ea8:	4342      	muls	r2, r0
10013eaa:	0010      	movs	r0, r2
10013eac:	9203      	str	r2, [sp, #12]
10013eae:	4662      	mov	r2, ip
10013eb0:	001c      	movs	r4, r3
10013eb2:	0c3f      	lsrs	r7, r7, #16
10013eb4:	437a      	muls	r2, r7
10013eb6:	437c      	muls	r4, r7
10013eb8:	4442      	add	r2, r8
10013eba:	9201      	str	r2, [sp, #4]
10013ebc:	0c22      	lsrs	r2, r4, #16
10013ebe:	4692      	mov	sl, r2
10013ec0:	9a01      	ldr	r2, [sp, #4]
10013ec2:	4452      	add	r2, sl
10013ec4:	4590      	cmp	r8, r2
10013ec6:	d906      	bls.n	10013ed6 <__aeabi_dmul+0x23a>
10013ec8:	4682      	mov	sl, r0
10013eca:	2080      	movs	r0, #128	; 0x80
10013ecc:	0240      	lsls	r0, r0, #9
10013ece:	4680      	mov	r8, r0
10013ed0:	44c2      	add	sl, r8
10013ed2:	4650      	mov	r0, sl
10013ed4:	9003      	str	r0, [sp, #12]
10013ed6:	0c10      	lsrs	r0, r2, #16
10013ed8:	9004      	str	r0, [sp, #16]
10013eda:	4648      	mov	r0, r9
10013edc:	0424      	lsls	r4, r4, #16
10013ede:	0c24      	lsrs	r4, r4, #16
10013ee0:	0412      	lsls	r2, r2, #16
10013ee2:	1912      	adds	r2, r2, r4
10013ee4:	9205      	str	r2, [sp, #20]
10013ee6:	0c2a      	lsrs	r2, r5, #16
10013ee8:	042d      	lsls	r5, r5, #16
10013eea:	0c2d      	lsrs	r5, r5, #16
10013eec:	4368      	muls	r0, r5
10013eee:	002c      	movs	r4, r5
10013ef0:	4682      	mov	sl, r0
10013ef2:	4648      	mov	r0, r9
10013ef4:	437c      	muls	r4, r7
10013ef6:	4350      	muls	r0, r2
10013ef8:	4681      	mov	r9, r0
10013efa:	0c20      	lsrs	r0, r4, #16
10013efc:	4680      	mov	r8, r0
10013efe:	4357      	muls	r7, r2
10013f00:	4457      	add	r7, sl
10013f02:	4447      	add	r7, r8
10013f04:	45ba      	cmp	sl, r7
10013f06:	d903      	bls.n	10013f10 <__aeabi_dmul+0x274>
10013f08:	2080      	movs	r0, #128	; 0x80
10013f0a:	0240      	lsls	r0, r0, #9
10013f0c:	4680      	mov	r8, r0
10013f0e:	44c1      	add	r9, r8
10013f10:	0c38      	lsrs	r0, r7, #16
10013f12:	043f      	lsls	r7, r7, #16
10013f14:	46b8      	mov	r8, r7
10013f16:	4448      	add	r0, r9
10013f18:	0424      	lsls	r4, r4, #16
10013f1a:	0c24      	lsrs	r4, r4, #16
10013f1c:	9001      	str	r0, [sp, #4]
10013f1e:	9804      	ldr	r0, [sp, #16]
10013f20:	44a0      	add	r8, r4
10013f22:	4440      	add	r0, r8
10013f24:	9004      	str	r0, [sp, #16]
10013f26:	4658      	mov	r0, fp
10013f28:	0c00      	lsrs	r0, r0, #16
10013f2a:	4681      	mov	r9, r0
10013f2c:	4658      	mov	r0, fp
10013f2e:	0404      	lsls	r4, r0, #16
10013f30:	0c20      	lsrs	r0, r4, #16
10013f32:	4682      	mov	sl, r0
10013f34:	0007      	movs	r7, r0
10013f36:	4648      	mov	r0, r9
10013f38:	435f      	muls	r7, r3
10013f3a:	464c      	mov	r4, r9
10013f3c:	4343      	muls	r3, r0
10013f3e:	4660      	mov	r0, ip
10013f40:	4360      	muls	r0, r4
10013f42:	4664      	mov	r4, ip
10013f44:	4683      	mov	fp, r0
10013f46:	4650      	mov	r0, sl
10013f48:	4344      	muls	r4, r0
10013f4a:	0c38      	lsrs	r0, r7, #16
10013f4c:	4684      	mov	ip, r0
10013f4e:	18e4      	adds	r4, r4, r3
10013f50:	4464      	add	r4, ip
10013f52:	42a3      	cmp	r3, r4
10013f54:	d903      	bls.n	10013f5e <__aeabi_dmul+0x2c2>
10013f56:	2380      	movs	r3, #128	; 0x80
10013f58:	025b      	lsls	r3, r3, #9
10013f5a:	469c      	mov	ip, r3
10013f5c:	44e3      	add	fp, ip
10013f5e:	4648      	mov	r0, r9
10013f60:	043f      	lsls	r7, r7, #16
10013f62:	0c23      	lsrs	r3, r4, #16
10013f64:	0c3f      	lsrs	r7, r7, #16
10013f66:	0424      	lsls	r4, r4, #16
10013f68:	19e4      	adds	r4, r4, r7
10013f6a:	4657      	mov	r7, sl
10013f6c:	4368      	muls	r0, r5
10013f6e:	436f      	muls	r7, r5
10013f70:	4684      	mov	ip, r0
10013f72:	464d      	mov	r5, r9
10013f74:	4650      	mov	r0, sl
10013f76:	4355      	muls	r5, r2
10013f78:	4342      	muls	r2, r0
10013f7a:	0c38      	lsrs	r0, r7, #16
10013f7c:	4681      	mov	r9, r0
10013f7e:	4462      	add	r2, ip
10013f80:	444a      	add	r2, r9
10013f82:	445b      	add	r3, fp
10013f84:	4594      	cmp	ip, r2
10013f86:	d903      	bls.n	10013f90 <__aeabi_dmul+0x2f4>
10013f88:	2080      	movs	r0, #128	; 0x80
10013f8a:	0240      	lsls	r0, r0, #9
10013f8c:	4684      	mov	ip, r0
10013f8e:	4465      	add	r5, ip
10013f90:	9803      	ldr	r0, [sp, #12]
10013f92:	043f      	lsls	r7, r7, #16
10013f94:	4683      	mov	fp, r0
10013f96:	9804      	ldr	r0, [sp, #16]
10013f98:	0c3f      	lsrs	r7, r7, #16
10013f9a:	4684      	mov	ip, r0
10013f9c:	44e3      	add	fp, ip
10013f9e:	45c3      	cmp	fp, r8
10013fa0:	4180      	sbcs	r0, r0
10013fa2:	4240      	negs	r0, r0
10013fa4:	4682      	mov	sl, r0
10013fa6:	0410      	lsls	r0, r2, #16
10013fa8:	4684      	mov	ip, r0
10013faa:	9801      	ldr	r0, [sp, #4]
10013fac:	4467      	add	r7, ip
10013fae:	4684      	mov	ip, r0
10013fb0:	4467      	add	r7, ip
10013fb2:	44a3      	add	fp, r4
10013fb4:	46bc      	mov	ip, r7
10013fb6:	45a3      	cmp	fp, r4
10013fb8:	41a4      	sbcs	r4, r4
10013fba:	4699      	mov	r9, r3
10013fbc:	44d4      	add	ip, sl
10013fbe:	4264      	negs	r4, r4
10013fc0:	4287      	cmp	r7, r0
10013fc2:	41bf      	sbcs	r7, r7
10013fc4:	45d4      	cmp	ip, sl
10013fc6:	4180      	sbcs	r0, r0
10013fc8:	44e1      	add	r9, ip
10013fca:	46a0      	mov	r8, r4
10013fcc:	4599      	cmp	r9, r3
10013fce:	419b      	sbcs	r3, r3
10013fd0:	427f      	negs	r7, r7
10013fd2:	4240      	negs	r0, r0
10013fd4:	44c8      	add	r8, r9
10013fd6:	4307      	orrs	r7, r0
10013fd8:	0c12      	lsrs	r2, r2, #16
10013fda:	18ba      	adds	r2, r7, r2
10013fdc:	45a0      	cmp	r8, r4
10013fde:	41a4      	sbcs	r4, r4
10013fe0:	425f      	negs	r7, r3
10013fe2:	003b      	movs	r3, r7
10013fe4:	4264      	negs	r4, r4
10013fe6:	4323      	orrs	r3, r4
10013fe8:	18d7      	adds	r7, r2, r3
10013fea:	4643      	mov	r3, r8
10013fec:	197d      	adds	r5, r7, r5
10013fee:	0ddb      	lsrs	r3, r3, #23
10013ff0:	026d      	lsls	r5, r5, #9
10013ff2:	431d      	orrs	r5, r3
10013ff4:	465b      	mov	r3, fp
10013ff6:	025a      	lsls	r2, r3, #9
10013ff8:	9b05      	ldr	r3, [sp, #20]
10013ffa:	431a      	orrs	r2, r3
10013ffc:	1e53      	subs	r3, r2, #1
10013ffe:	419a      	sbcs	r2, r3
10014000:	465b      	mov	r3, fp
10014002:	0ddb      	lsrs	r3, r3, #23
10014004:	431a      	orrs	r2, r3
10014006:	4643      	mov	r3, r8
10014008:	025b      	lsls	r3, r3, #9
1001400a:	4313      	orrs	r3, r2
1001400c:	01ea      	lsls	r2, r5, #7
1001400e:	d507      	bpl.n	10014020 <__aeabi_dmul+0x384>
10014010:	2201      	movs	r2, #1
10014012:	085c      	lsrs	r4, r3, #1
10014014:	4013      	ands	r3, r2
10014016:	4323      	orrs	r3, r4
10014018:	07ea      	lsls	r2, r5, #31
1001401a:	9e02      	ldr	r6, [sp, #8]
1001401c:	4313      	orrs	r3, r2
1001401e:	086d      	lsrs	r5, r5, #1
10014020:	4a57      	ldr	r2, [pc, #348]	; (10014180 <__aeabi_dmul+0x4e4>)
10014022:	18b2      	adds	r2, r6, r2
10014024:	2a00      	cmp	r2, #0
10014026:	dd4b      	ble.n	100140c0 <__aeabi_dmul+0x424>
10014028:	0758      	lsls	r0, r3, #29
1001402a:	d009      	beq.n	10014040 <__aeabi_dmul+0x3a4>
1001402c:	200f      	movs	r0, #15
1001402e:	4018      	ands	r0, r3
10014030:	2804      	cmp	r0, #4
10014032:	d005      	beq.n	10014040 <__aeabi_dmul+0x3a4>
10014034:	1d18      	adds	r0, r3, #4
10014036:	4298      	cmp	r0, r3
10014038:	419b      	sbcs	r3, r3
1001403a:	425b      	negs	r3, r3
1001403c:	18ed      	adds	r5, r5, r3
1001403e:	0003      	movs	r3, r0
10014040:	01e8      	lsls	r0, r5, #7
10014042:	d504      	bpl.n	1001404e <__aeabi_dmul+0x3b2>
10014044:	4a4f      	ldr	r2, [pc, #316]	; (10014184 <__aeabi_dmul+0x4e8>)
10014046:	4015      	ands	r5, r2
10014048:	2280      	movs	r2, #128	; 0x80
1001404a:	00d2      	lsls	r2, r2, #3
1001404c:	18b2      	adds	r2, r6, r2
1001404e:	484e      	ldr	r0, [pc, #312]	; (10014188 <__aeabi_dmul+0x4ec>)
10014050:	4282      	cmp	r2, r0
10014052:	dd00      	ble.n	10014056 <__aeabi_dmul+0x3ba>
10014054:	e6e7      	b.n	10013e26 <__aeabi_dmul+0x18a>
10014056:	2401      	movs	r4, #1
10014058:	08db      	lsrs	r3, r3, #3
1001405a:	0768      	lsls	r0, r5, #29
1001405c:	4318      	orrs	r0, r3
1001405e:	026d      	lsls	r5, r5, #9
10014060:	0553      	lsls	r3, r2, #21
10014062:	4680      	mov	r8, r0
10014064:	0b2d      	lsrs	r5, r5, #12
10014066:	0d5b      	lsrs	r3, r3, #21
10014068:	400c      	ands	r4, r1
1001406a:	e67d      	b.n	10013d68 <__aeabi_dmul+0xcc>
1001406c:	2280      	movs	r2, #128	; 0x80
1001406e:	4659      	mov	r1, fp
10014070:	0312      	lsls	r2, r2, #12
10014072:	4211      	tst	r1, r2
10014074:	d008      	beq.n	10014088 <__aeabi_dmul+0x3ec>
10014076:	4215      	tst	r5, r2
10014078:	d106      	bne.n	10014088 <__aeabi_dmul+0x3ec>
1001407a:	4315      	orrs	r5, r2
1001407c:	032d      	lsls	r5, r5, #12
1001407e:	4698      	mov	r8, r3
10014080:	0b2d      	lsrs	r5, r5, #12
10014082:	464c      	mov	r4, r9
10014084:	4b41      	ldr	r3, [pc, #260]	; (1001418c <__aeabi_dmul+0x4f0>)
10014086:	e66f      	b.n	10013d68 <__aeabi_dmul+0xcc>
10014088:	465d      	mov	r5, fp
1001408a:	4315      	orrs	r5, r2
1001408c:	032d      	lsls	r5, r5, #12
1001408e:	0b2d      	lsrs	r5, r5, #12
10014090:	4b3e      	ldr	r3, [pc, #248]	; (1001418c <__aeabi_dmul+0x4f0>)
10014092:	e669      	b.n	10013d68 <__aeabi_dmul+0xcc>
10014094:	0003      	movs	r3, r0
10014096:	4655      	mov	r5, sl
10014098:	3b28      	subs	r3, #40	; 0x28
1001409a:	409d      	lsls	r5, r3
1001409c:	2300      	movs	r3, #0
1001409e:	e6bc      	b.n	10013e1a <__aeabi_dmul+0x17e>
100140a0:	4650      	mov	r0, sl
100140a2:	f000 fc37 	bl	10014914 <__clzsi2>
100140a6:	3020      	adds	r0, #32
100140a8:	e6a8      	b.n	10013dfc <__aeabi_dmul+0x160>
100140aa:	0003      	movs	r3, r0
100140ac:	3b28      	subs	r3, #40	; 0x28
100140ae:	409f      	lsls	r7, r3
100140b0:	2300      	movs	r3, #0
100140b2:	46bb      	mov	fp, r7
100140b4:	4698      	mov	r8, r3
100140b6:	e689      	b.n	10013dcc <__aeabi_dmul+0x130>
100140b8:	f000 fc2c 	bl	10014914 <__clzsi2>
100140bc:	3020      	adds	r0, #32
100140be:	e673      	b.n	10013da8 <__aeabi_dmul+0x10c>
100140c0:	2401      	movs	r4, #1
100140c2:	1aa6      	subs	r6, r4, r2
100140c4:	2e38      	cmp	r6, #56	; 0x38
100140c6:	dd07      	ble.n	100140d8 <__aeabi_dmul+0x43c>
100140c8:	2200      	movs	r2, #0
100140ca:	400c      	ands	r4, r1
100140cc:	2300      	movs	r3, #0
100140ce:	2500      	movs	r5, #0
100140d0:	4690      	mov	r8, r2
100140d2:	e649      	b.n	10013d68 <__aeabi_dmul+0xcc>
100140d4:	9e02      	ldr	r6, [sp, #8]
100140d6:	e7a3      	b.n	10014020 <__aeabi_dmul+0x384>
100140d8:	2e1f      	cmp	r6, #31
100140da:	dc20      	bgt.n	1001411e <__aeabi_dmul+0x482>
100140dc:	2220      	movs	r2, #32
100140de:	002c      	movs	r4, r5
100140e0:	0018      	movs	r0, r3
100140e2:	1b92      	subs	r2, r2, r6
100140e4:	40f0      	lsrs	r0, r6
100140e6:	4094      	lsls	r4, r2
100140e8:	4093      	lsls	r3, r2
100140ea:	4304      	orrs	r4, r0
100140ec:	1e58      	subs	r0, r3, #1
100140ee:	4183      	sbcs	r3, r0
100140f0:	431c      	orrs	r4, r3
100140f2:	40f5      	lsrs	r5, r6
100140f4:	0763      	lsls	r3, r4, #29
100140f6:	d009      	beq.n	1001410c <__aeabi_dmul+0x470>
100140f8:	230f      	movs	r3, #15
100140fa:	4023      	ands	r3, r4
100140fc:	2b04      	cmp	r3, #4
100140fe:	d005      	beq.n	1001410c <__aeabi_dmul+0x470>
10014100:	0023      	movs	r3, r4
10014102:	1d1c      	adds	r4, r3, #4
10014104:	429c      	cmp	r4, r3
10014106:	4192      	sbcs	r2, r2
10014108:	4252      	negs	r2, r2
1001410a:	18ad      	adds	r5, r5, r2
1001410c:	022b      	lsls	r3, r5, #8
1001410e:	d51f      	bpl.n	10014150 <__aeabi_dmul+0x4b4>
10014110:	2401      	movs	r4, #1
10014112:	2200      	movs	r2, #0
10014114:	400c      	ands	r4, r1
10014116:	2301      	movs	r3, #1
10014118:	2500      	movs	r5, #0
1001411a:	4690      	mov	r8, r2
1001411c:	e624      	b.n	10013d68 <__aeabi_dmul+0xcc>
1001411e:	201f      	movs	r0, #31
10014120:	002c      	movs	r4, r5
10014122:	4240      	negs	r0, r0
10014124:	1a82      	subs	r2, r0, r2
10014126:	40d4      	lsrs	r4, r2
10014128:	2e20      	cmp	r6, #32
1001412a:	d01c      	beq.n	10014166 <__aeabi_dmul+0x4ca>
1001412c:	2240      	movs	r2, #64	; 0x40
1001412e:	1b96      	subs	r6, r2, r6
10014130:	40b5      	lsls	r5, r6
10014132:	432b      	orrs	r3, r5
10014134:	1e58      	subs	r0, r3, #1
10014136:	4183      	sbcs	r3, r0
10014138:	2007      	movs	r0, #7
1001413a:	4323      	orrs	r3, r4
1001413c:	4018      	ands	r0, r3
1001413e:	2500      	movs	r5, #0
10014140:	2800      	cmp	r0, #0
10014142:	d009      	beq.n	10014158 <__aeabi_dmul+0x4bc>
10014144:	220f      	movs	r2, #15
10014146:	2500      	movs	r5, #0
10014148:	401a      	ands	r2, r3
1001414a:	001c      	movs	r4, r3
1001414c:	2a04      	cmp	r2, #4
1001414e:	d1d8      	bne.n	10014102 <__aeabi_dmul+0x466>
10014150:	0023      	movs	r3, r4
10014152:	0768      	lsls	r0, r5, #29
10014154:	026d      	lsls	r5, r5, #9
10014156:	0b2d      	lsrs	r5, r5, #12
10014158:	2401      	movs	r4, #1
1001415a:	08db      	lsrs	r3, r3, #3
1001415c:	4303      	orrs	r3, r0
1001415e:	4698      	mov	r8, r3
10014160:	400c      	ands	r4, r1
10014162:	2300      	movs	r3, #0
10014164:	e600      	b.n	10013d68 <__aeabi_dmul+0xcc>
10014166:	2500      	movs	r5, #0
10014168:	e7e3      	b.n	10014132 <__aeabi_dmul+0x496>
1001416a:	2280      	movs	r2, #128	; 0x80
1001416c:	2401      	movs	r4, #1
1001416e:	0312      	lsls	r2, r2, #12
10014170:	4315      	orrs	r5, r2
10014172:	032d      	lsls	r5, r5, #12
10014174:	4698      	mov	r8, r3
10014176:	0b2d      	lsrs	r5, r5, #12
10014178:	400c      	ands	r4, r1
1001417a:	4b04      	ldr	r3, [pc, #16]	; (1001418c <__aeabi_dmul+0x4f0>)
1001417c:	e5f4      	b.n	10013d68 <__aeabi_dmul+0xcc>
1001417e:	46c0      	nop			; (mov r8, r8)
10014180:	000003ff 	.word	0x000003ff
10014184:	feffffff 	.word	0xfeffffff
10014188:	000007fe 	.word	0x000007fe
1001418c:	000007ff 	.word	0x000007ff

10014190 <__aeabi_dsub>:
10014190:	b5f0      	push	{r4, r5, r6, r7, lr}
10014192:	4657      	mov	r7, sl
10014194:	464e      	mov	r6, r9
10014196:	4645      	mov	r5, r8
10014198:	b4e0      	push	{r5, r6, r7}
1001419a:	000e      	movs	r6, r1
1001419c:	0011      	movs	r1, r2
1001419e:	0ff2      	lsrs	r2, r6, #31
100141a0:	4692      	mov	sl, r2
100141a2:	00c5      	lsls	r5, r0, #3
100141a4:	0f42      	lsrs	r2, r0, #29
100141a6:	0318      	lsls	r0, r3, #12
100141a8:	0337      	lsls	r7, r6, #12
100141aa:	0074      	lsls	r4, r6, #1
100141ac:	0a40      	lsrs	r0, r0, #9
100141ae:	0f4e      	lsrs	r6, r1, #29
100141b0:	0a7f      	lsrs	r7, r7, #9
100141b2:	4330      	orrs	r0, r6
100141b4:	4ecf      	ldr	r6, [pc, #828]	; (100144f4 <__aeabi_dsub+0x364>)
100141b6:	4317      	orrs	r7, r2
100141b8:	005a      	lsls	r2, r3, #1
100141ba:	0d64      	lsrs	r4, r4, #21
100141bc:	0d52      	lsrs	r2, r2, #21
100141be:	0fdb      	lsrs	r3, r3, #31
100141c0:	00c9      	lsls	r1, r1, #3
100141c2:	42b2      	cmp	r2, r6
100141c4:	d100      	bne.n	100141c8 <__aeabi_dsub+0x38>
100141c6:	e0e5      	b.n	10014394 <__aeabi_dsub+0x204>
100141c8:	2601      	movs	r6, #1
100141ca:	4073      	eors	r3, r6
100141cc:	1aa6      	subs	r6, r4, r2
100141ce:	46b4      	mov	ip, r6
100141d0:	4553      	cmp	r3, sl
100141d2:	d100      	bne.n	100141d6 <__aeabi_dsub+0x46>
100141d4:	e0af      	b.n	10014336 <__aeabi_dsub+0x1a6>
100141d6:	2e00      	cmp	r6, #0
100141d8:	dc00      	bgt.n	100141dc <__aeabi_dsub+0x4c>
100141da:	e10d      	b.n	100143f8 <__aeabi_dsub+0x268>
100141dc:	2a00      	cmp	r2, #0
100141de:	d13a      	bne.n	10014256 <__aeabi_dsub+0xc6>
100141e0:	0003      	movs	r3, r0
100141e2:	430b      	orrs	r3, r1
100141e4:	d000      	beq.n	100141e8 <__aeabi_dsub+0x58>
100141e6:	e0e4      	b.n	100143b2 <__aeabi_dsub+0x222>
100141e8:	076b      	lsls	r3, r5, #29
100141ea:	d009      	beq.n	10014200 <__aeabi_dsub+0x70>
100141ec:	230f      	movs	r3, #15
100141ee:	402b      	ands	r3, r5
100141f0:	2b04      	cmp	r3, #4
100141f2:	d005      	beq.n	10014200 <__aeabi_dsub+0x70>
100141f4:	1d2b      	adds	r3, r5, #4
100141f6:	42ab      	cmp	r3, r5
100141f8:	41ad      	sbcs	r5, r5
100141fa:	426d      	negs	r5, r5
100141fc:	197f      	adds	r7, r7, r5
100141fe:	001d      	movs	r5, r3
10014200:	023b      	lsls	r3, r7, #8
10014202:	d400      	bmi.n	10014206 <__aeabi_dsub+0x76>
10014204:	e088      	b.n	10014318 <__aeabi_dsub+0x188>
10014206:	4bbb      	ldr	r3, [pc, #748]	; (100144f4 <__aeabi_dsub+0x364>)
10014208:	3401      	adds	r4, #1
1001420a:	429c      	cmp	r4, r3
1001420c:	d100      	bne.n	10014210 <__aeabi_dsub+0x80>
1001420e:	e110      	b.n	10014432 <__aeabi_dsub+0x2a2>
10014210:	003a      	movs	r2, r7
10014212:	4bb9      	ldr	r3, [pc, #740]	; (100144f8 <__aeabi_dsub+0x368>)
10014214:	4651      	mov	r1, sl
10014216:	401a      	ands	r2, r3
10014218:	2301      	movs	r3, #1
1001421a:	0750      	lsls	r0, r2, #29
1001421c:	08ed      	lsrs	r5, r5, #3
1001421e:	0252      	lsls	r2, r2, #9
10014220:	0564      	lsls	r4, r4, #21
10014222:	4305      	orrs	r5, r0
10014224:	0b12      	lsrs	r2, r2, #12
10014226:	0d64      	lsrs	r4, r4, #21
10014228:	400b      	ands	r3, r1
1001422a:	2100      	movs	r1, #0
1001422c:	0028      	movs	r0, r5
1001422e:	0312      	lsls	r2, r2, #12
10014230:	0d0d      	lsrs	r5, r1, #20
10014232:	0b12      	lsrs	r2, r2, #12
10014234:	0564      	lsls	r4, r4, #21
10014236:	052d      	lsls	r5, r5, #20
10014238:	4315      	orrs	r5, r2
1001423a:	0862      	lsrs	r2, r4, #1
1001423c:	4caf      	ldr	r4, [pc, #700]	; (100144fc <__aeabi_dsub+0x36c>)
1001423e:	07db      	lsls	r3, r3, #31
10014240:	402c      	ands	r4, r5
10014242:	4314      	orrs	r4, r2
10014244:	0064      	lsls	r4, r4, #1
10014246:	0864      	lsrs	r4, r4, #1
10014248:	431c      	orrs	r4, r3
1001424a:	0021      	movs	r1, r4
1001424c:	bc1c      	pop	{r2, r3, r4}
1001424e:	4690      	mov	r8, r2
10014250:	4699      	mov	r9, r3
10014252:	46a2      	mov	sl, r4
10014254:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014256:	4ba7      	ldr	r3, [pc, #668]	; (100144f4 <__aeabi_dsub+0x364>)
10014258:	429c      	cmp	r4, r3
1001425a:	d0c5      	beq.n	100141e8 <__aeabi_dsub+0x58>
1001425c:	2380      	movs	r3, #128	; 0x80
1001425e:	041b      	lsls	r3, r3, #16
10014260:	4318      	orrs	r0, r3
10014262:	4663      	mov	r3, ip
10014264:	2b38      	cmp	r3, #56	; 0x38
10014266:	dd00      	ble.n	1001426a <__aeabi_dsub+0xda>
10014268:	e0fd      	b.n	10014466 <__aeabi_dsub+0x2d6>
1001426a:	2b1f      	cmp	r3, #31
1001426c:	dd00      	ble.n	10014270 <__aeabi_dsub+0xe0>
1001426e:	e130      	b.n	100144d2 <__aeabi_dsub+0x342>
10014270:	4662      	mov	r2, ip
10014272:	2320      	movs	r3, #32
10014274:	1a9b      	subs	r3, r3, r2
10014276:	0002      	movs	r2, r0
10014278:	409a      	lsls	r2, r3
1001427a:	4666      	mov	r6, ip
1001427c:	4690      	mov	r8, r2
1001427e:	000a      	movs	r2, r1
10014280:	4099      	lsls	r1, r3
10014282:	40f2      	lsrs	r2, r6
10014284:	4646      	mov	r6, r8
10014286:	1e4b      	subs	r3, r1, #1
10014288:	4199      	sbcs	r1, r3
1001428a:	4332      	orrs	r2, r6
1001428c:	4311      	orrs	r1, r2
1001428e:	4663      	mov	r3, ip
10014290:	0002      	movs	r2, r0
10014292:	40da      	lsrs	r2, r3
10014294:	1a69      	subs	r1, r5, r1
10014296:	428d      	cmp	r5, r1
10014298:	419b      	sbcs	r3, r3
1001429a:	000d      	movs	r5, r1
1001429c:	1aba      	subs	r2, r7, r2
1001429e:	425b      	negs	r3, r3
100142a0:	1ad7      	subs	r7, r2, r3
100142a2:	023b      	lsls	r3, r7, #8
100142a4:	d535      	bpl.n	10014312 <__aeabi_dsub+0x182>
100142a6:	027a      	lsls	r2, r7, #9
100142a8:	0a53      	lsrs	r3, r2, #9
100142aa:	4698      	mov	r8, r3
100142ac:	4643      	mov	r3, r8
100142ae:	2b00      	cmp	r3, #0
100142b0:	d100      	bne.n	100142b4 <__aeabi_dsub+0x124>
100142b2:	e0c4      	b.n	1001443e <__aeabi_dsub+0x2ae>
100142b4:	4640      	mov	r0, r8
100142b6:	f000 fb2d 	bl	10014914 <__clzsi2>
100142ba:	0003      	movs	r3, r0
100142bc:	3b08      	subs	r3, #8
100142be:	2b1f      	cmp	r3, #31
100142c0:	dd00      	ble.n	100142c4 <__aeabi_dsub+0x134>
100142c2:	e0c5      	b.n	10014450 <__aeabi_dsub+0x2c0>
100142c4:	2220      	movs	r2, #32
100142c6:	0029      	movs	r1, r5
100142c8:	1ad2      	subs	r2, r2, r3
100142ca:	4647      	mov	r7, r8
100142cc:	40d1      	lsrs	r1, r2
100142ce:	409f      	lsls	r7, r3
100142d0:	000a      	movs	r2, r1
100142d2:	409d      	lsls	r5, r3
100142d4:	433a      	orrs	r2, r7
100142d6:	429c      	cmp	r4, r3
100142d8:	dd00      	ble.n	100142dc <__aeabi_dsub+0x14c>
100142da:	e0c0      	b.n	1001445e <__aeabi_dsub+0x2ce>
100142dc:	1b1c      	subs	r4, r3, r4
100142de:	1c63      	adds	r3, r4, #1
100142e0:	2b1f      	cmp	r3, #31
100142e2:	dd00      	ble.n	100142e6 <__aeabi_dsub+0x156>
100142e4:	e0e4      	b.n	100144b0 <__aeabi_dsub+0x320>
100142e6:	2120      	movs	r1, #32
100142e8:	0014      	movs	r4, r2
100142ea:	0028      	movs	r0, r5
100142ec:	1ac9      	subs	r1, r1, r3
100142ee:	40d8      	lsrs	r0, r3
100142f0:	408c      	lsls	r4, r1
100142f2:	408d      	lsls	r5, r1
100142f4:	4304      	orrs	r4, r0
100142f6:	40da      	lsrs	r2, r3
100142f8:	1e68      	subs	r0, r5, #1
100142fa:	4185      	sbcs	r5, r0
100142fc:	0017      	movs	r7, r2
100142fe:	4325      	orrs	r5, r4
10014300:	2400      	movs	r4, #0
10014302:	e771      	b.n	100141e8 <__aeabi_dsub+0x58>
10014304:	4642      	mov	r2, r8
10014306:	4663      	mov	r3, ip
10014308:	431a      	orrs	r2, r3
1001430a:	d100      	bne.n	1001430e <__aeabi_dsub+0x17e>
1001430c:	e24c      	b.n	100147a8 <__aeabi_dsub+0x618>
1001430e:	4667      	mov	r7, ip
10014310:	4645      	mov	r5, r8
10014312:	076b      	lsls	r3, r5, #29
10014314:	d000      	beq.n	10014318 <__aeabi_dsub+0x188>
10014316:	e769      	b.n	100141ec <__aeabi_dsub+0x5c>
10014318:	2301      	movs	r3, #1
1001431a:	4651      	mov	r1, sl
1001431c:	0778      	lsls	r0, r7, #29
1001431e:	08ed      	lsrs	r5, r5, #3
10014320:	08fa      	lsrs	r2, r7, #3
10014322:	400b      	ands	r3, r1
10014324:	4305      	orrs	r5, r0
10014326:	4973      	ldr	r1, [pc, #460]	; (100144f4 <__aeabi_dsub+0x364>)
10014328:	428c      	cmp	r4, r1
1001432a:	d038      	beq.n	1001439e <__aeabi_dsub+0x20e>
1001432c:	0312      	lsls	r2, r2, #12
1001432e:	0564      	lsls	r4, r4, #21
10014330:	0b12      	lsrs	r2, r2, #12
10014332:	0d64      	lsrs	r4, r4, #21
10014334:	e779      	b.n	1001422a <__aeabi_dsub+0x9a>
10014336:	2e00      	cmp	r6, #0
10014338:	dc00      	bgt.n	1001433c <__aeabi_dsub+0x1ac>
1001433a:	e09a      	b.n	10014472 <__aeabi_dsub+0x2e2>
1001433c:	2a00      	cmp	r2, #0
1001433e:	d047      	beq.n	100143d0 <__aeabi_dsub+0x240>
10014340:	4a6c      	ldr	r2, [pc, #432]	; (100144f4 <__aeabi_dsub+0x364>)
10014342:	4294      	cmp	r4, r2
10014344:	d100      	bne.n	10014348 <__aeabi_dsub+0x1b8>
10014346:	e74f      	b.n	100141e8 <__aeabi_dsub+0x58>
10014348:	2280      	movs	r2, #128	; 0x80
1001434a:	0412      	lsls	r2, r2, #16
1001434c:	4310      	orrs	r0, r2
1001434e:	4662      	mov	r2, ip
10014350:	2a38      	cmp	r2, #56	; 0x38
10014352:	dc00      	bgt.n	10014356 <__aeabi_dsub+0x1c6>
10014354:	e108      	b.n	10014568 <__aeabi_dsub+0x3d8>
10014356:	4301      	orrs	r1, r0
10014358:	1e48      	subs	r0, r1, #1
1001435a:	4181      	sbcs	r1, r0
1001435c:	2200      	movs	r2, #0
1001435e:	b2c9      	uxtb	r1, r1
10014360:	1949      	adds	r1, r1, r5
10014362:	19d2      	adds	r2, r2, r7
10014364:	42a9      	cmp	r1, r5
10014366:	41bf      	sbcs	r7, r7
10014368:	000d      	movs	r5, r1
1001436a:	427f      	negs	r7, r7
1001436c:	18bf      	adds	r7, r7, r2
1001436e:	023a      	lsls	r2, r7, #8
10014370:	d400      	bmi.n	10014374 <__aeabi_dsub+0x1e4>
10014372:	e142      	b.n	100145fa <__aeabi_dsub+0x46a>
10014374:	4a5f      	ldr	r2, [pc, #380]	; (100144f4 <__aeabi_dsub+0x364>)
10014376:	3401      	adds	r4, #1
10014378:	4294      	cmp	r4, r2
1001437a:	d100      	bne.n	1001437e <__aeabi_dsub+0x1ee>
1001437c:	e14e      	b.n	1001461c <__aeabi_dsub+0x48c>
1001437e:	2001      	movs	r0, #1
10014380:	4a5d      	ldr	r2, [pc, #372]	; (100144f8 <__aeabi_dsub+0x368>)
10014382:	0869      	lsrs	r1, r5, #1
10014384:	403a      	ands	r2, r7
10014386:	4028      	ands	r0, r5
10014388:	4308      	orrs	r0, r1
1001438a:	07d5      	lsls	r5, r2, #31
1001438c:	4305      	orrs	r5, r0
1001438e:	0857      	lsrs	r7, r2, #1
10014390:	469a      	mov	sl, r3
10014392:	e729      	b.n	100141e8 <__aeabi_dsub+0x58>
10014394:	0006      	movs	r6, r0
10014396:	430e      	orrs	r6, r1
10014398:	d000      	beq.n	1001439c <__aeabi_dsub+0x20c>
1001439a:	e717      	b.n	100141cc <__aeabi_dsub+0x3c>
1001439c:	e714      	b.n	100141c8 <__aeabi_dsub+0x38>
1001439e:	0029      	movs	r1, r5
100143a0:	4311      	orrs	r1, r2
100143a2:	d100      	bne.n	100143a6 <__aeabi_dsub+0x216>
100143a4:	e1f9      	b.n	1001479a <__aeabi_dsub+0x60a>
100143a6:	2180      	movs	r1, #128	; 0x80
100143a8:	0309      	lsls	r1, r1, #12
100143aa:	430a      	orrs	r2, r1
100143ac:	0312      	lsls	r2, r2, #12
100143ae:	0b12      	lsrs	r2, r2, #12
100143b0:	e73b      	b.n	1001422a <__aeabi_dsub+0x9a>
100143b2:	2301      	movs	r3, #1
100143b4:	425b      	negs	r3, r3
100143b6:	4698      	mov	r8, r3
100143b8:	44c4      	add	ip, r8
100143ba:	4663      	mov	r3, ip
100143bc:	2b00      	cmp	r3, #0
100143be:	d172      	bne.n	100144a6 <__aeabi_dsub+0x316>
100143c0:	1a69      	subs	r1, r5, r1
100143c2:	428d      	cmp	r5, r1
100143c4:	419b      	sbcs	r3, r3
100143c6:	1a3f      	subs	r7, r7, r0
100143c8:	425b      	negs	r3, r3
100143ca:	1aff      	subs	r7, r7, r3
100143cc:	000d      	movs	r5, r1
100143ce:	e768      	b.n	100142a2 <__aeabi_dsub+0x112>
100143d0:	0002      	movs	r2, r0
100143d2:	430a      	orrs	r2, r1
100143d4:	d100      	bne.n	100143d8 <__aeabi_dsub+0x248>
100143d6:	e707      	b.n	100141e8 <__aeabi_dsub+0x58>
100143d8:	2201      	movs	r2, #1
100143da:	4252      	negs	r2, r2
100143dc:	4690      	mov	r8, r2
100143de:	44c4      	add	ip, r8
100143e0:	4662      	mov	r2, ip
100143e2:	2a00      	cmp	r2, #0
100143e4:	d000      	beq.n	100143e8 <__aeabi_dsub+0x258>
100143e6:	e0e6      	b.n	100145b6 <__aeabi_dsub+0x426>
100143e8:	1869      	adds	r1, r5, r1
100143ea:	42a9      	cmp	r1, r5
100143ec:	41b6      	sbcs	r6, r6
100143ee:	183f      	adds	r7, r7, r0
100143f0:	4276      	negs	r6, r6
100143f2:	19f7      	adds	r7, r6, r7
100143f4:	000d      	movs	r5, r1
100143f6:	e7ba      	b.n	1001436e <__aeabi_dsub+0x1de>
100143f8:	2e00      	cmp	r6, #0
100143fa:	d000      	beq.n	100143fe <__aeabi_dsub+0x26e>
100143fc:	e080      	b.n	10014500 <__aeabi_dsub+0x370>
100143fe:	1c62      	adds	r2, r4, #1
10014400:	0552      	lsls	r2, r2, #21
10014402:	0d52      	lsrs	r2, r2, #21
10014404:	2a01      	cmp	r2, #1
10014406:	dc00      	bgt.n	1001440a <__aeabi_dsub+0x27a>
10014408:	e0f9      	b.n	100145fe <__aeabi_dsub+0x46e>
1001440a:	1a6a      	subs	r2, r5, r1
1001440c:	4691      	mov	r9, r2
1001440e:	454d      	cmp	r5, r9
10014410:	41b6      	sbcs	r6, r6
10014412:	1a3a      	subs	r2, r7, r0
10014414:	4276      	negs	r6, r6
10014416:	1b92      	subs	r2, r2, r6
10014418:	4690      	mov	r8, r2
1001441a:	0212      	lsls	r2, r2, #8
1001441c:	d400      	bmi.n	10014420 <__aeabi_dsub+0x290>
1001441e:	e099      	b.n	10014554 <__aeabi_dsub+0x3c4>
10014420:	1b4d      	subs	r5, r1, r5
10014422:	42a9      	cmp	r1, r5
10014424:	4189      	sbcs	r1, r1
10014426:	1bc7      	subs	r7, r0, r7
10014428:	4249      	negs	r1, r1
1001442a:	1a7a      	subs	r2, r7, r1
1001442c:	4690      	mov	r8, r2
1001442e:	469a      	mov	sl, r3
10014430:	e73c      	b.n	100142ac <__aeabi_dsub+0x11c>
10014432:	4652      	mov	r2, sl
10014434:	2301      	movs	r3, #1
10014436:	2500      	movs	r5, #0
10014438:	4013      	ands	r3, r2
1001443a:	2200      	movs	r2, #0
1001443c:	e6f5      	b.n	1001422a <__aeabi_dsub+0x9a>
1001443e:	0028      	movs	r0, r5
10014440:	f000 fa68 	bl	10014914 <__clzsi2>
10014444:	3020      	adds	r0, #32
10014446:	0003      	movs	r3, r0
10014448:	3b08      	subs	r3, #8
1001444a:	2b1f      	cmp	r3, #31
1001444c:	dc00      	bgt.n	10014450 <__aeabi_dsub+0x2c0>
1001444e:	e739      	b.n	100142c4 <__aeabi_dsub+0x134>
10014450:	002a      	movs	r2, r5
10014452:	3828      	subs	r0, #40	; 0x28
10014454:	4082      	lsls	r2, r0
10014456:	2500      	movs	r5, #0
10014458:	429c      	cmp	r4, r3
1001445a:	dc00      	bgt.n	1001445e <__aeabi_dsub+0x2ce>
1001445c:	e73e      	b.n	100142dc <__aeabi_dsub+0x14c>
1001445e:	4f26      	ldr	r7, [pc, #152]	; (100144f8 <__aeabi_dsub+0x368>)
10014460:	1ae4      	subs	r4, r4, r3
10014462:	4017      	ands	r7, r2
10014464:	e6c0      	b.n	100141e8 <__aeabi_dsub+0x58>
10014466:	4301      	orrs	r1, r0
10014468:	1e48      	subs	r0, r1, #1
1001446a:	4181      	sbcs	r1, r0
1001446c:	2200      	movs	r2, #0
1001446e:	b2c9      	uxtb	r1, r1
10014470:	e710      	b.n	10014294 <__aeabi_dsub+0x104>
10014472:	2e00      	cmp	r6, #0
10014474:	d000      	beq.n	10014478 <__aeabi_dsub+0x2e8>
10014476:	e0f1      	b.n	1001465c <__aeabi_dsub+0x4cc>
10014478:	1c62      	adds	r2, r4, #1
1001447a:	4694      	mov	ip, r2
1001447c:	0552      	lsls	r2, r2, #21
1001447e:	0d52      	lsrs	r2, r2, #21
10014480:	2a01      	cmp	r2, #1
10014482:	dc00      	bgt.n	10014486 <__aeabi_dsub+0x2f6>
10014484:	e0a0      	b.n	100145c8 <__aeabi_dsub+0x438>
10014486:	4a1b      	ldr	r2, [pc, #108]	; (100144f4 <__aeabi_dsub+0x364>)
10014488:	4594      	cmp	ip, r2
1001448a:	d100      	bne.n	1001448e <__aeabi_dsub+0x2fe>
1001448c:	e0c5      	b.n	1001461a <__aeabi_dsub+0x48a>
1001448e:	1869      	adds	r1, r5, r1
10014490:	42a9      	cmp	r1, r5
10014492:	4192      	sbcs	r2, r2
10014494:	183f      	adds	r7, r7, r0
10014496:	4252      	negs	r2, r2
10014498:	19d2      	adds	r2, r2, r7
1001449a:	0849      	lsrs	r1, r1, #1
1001449c:	07d5      	lsls	r5, r2, #31
1001449e:	430d      	orrs	r5, r1
100144a0:	0857      	lsrs	r7, r2, #1
100144a2:	4664      	mov	r4, ip
100144a4:	e6a0      	b.n	100141e8 <__aeabi_dsub+0x58>
100144a6:	4b13      	ldr	r3, [pc, #76]	; (100144f4 <__aeabi_dsub+0x364>)
100144a8:	429c      	cmp	r4, r3
100144aa:	d000      	beq.n	100144ae <__aeabi_dsub+0x31e>
100144ac:	e6d9      	b.n	10014262 <__aeabi_dsub+0xd2>
100144ae:	e69b      	b.n	100141e8 <__aeabi_dsub+0x58>
100144b0:	0011      	movs	r1, r2
100144b2:	3c1f      	subs	r4, #31
100144b4:	40e1      	lsrs	r1, r4
100144b6:	000c      	movs	r4, r1
100144b8:	2b20      	cmp	r3, #32
100144ba:	d100      	bne.n	100144be <__aeabi_dsub+0x32e>
100144bc:	e080      	b.n	100145c0 <__aeabi_dsub+0x430>
100144be:	2140      	movs	r1, #64	; 0x40
100144c0:	1acb      	subs	r3, r1, r3
100144c2:	409a      	lsls	r2, r3
100144c4:	4315      	orrs	r5, r2
100144c6:	1e6a      	subs	r2, r5, #1
100144c8:	4195      	sbcs	r5, r2
100144ca:	2700      	movs	r7, #0
100144cc:	4325      	orrs	r5, r4
100144ce:	2400      	movs	r4, #0
100144d0:	e71f      	b.n	10014312 <__aeabi_dsub+0x182>
100144d2:	4663      	mov	r3, ip
100144d4:	0002      	movs	r2, r0
100144d6:	3b20      	subs	r3, #32
100144d8:	40da      	lsrs	r2, r3
100144da:	4663      	mov	r3, ip
100144dc:	2b20      	cmp	r3, #32
100144de:	d071      	beq.n	100145c4 <__aeabi_dsub+0x434>
100144e0:	2340      	movs	r3, #64	; 0x40
100144e2:	4666      	mov	r6, ip
100144e4:	1b9b      	subs	r3, r3, r6
100144e6:	4098      	lsls	r0, r3
100144e8:	4301      	orrs	r1, r0
100144ea:	1e48      	subs	r0, r1, #1
100144ec:	4181      	sbcs	r1, r0
100144ee:	4311      	orrs	r1, r2
100144f0:	2200      	movs	r2, #0
100144f2:	e6cf      	b.n	10014294 <__aeabi_dsub+0x104>
100144f4:	000007ff 	.word	0x000007ff
100144f8:	ff7fffff 	.word	0xff7fffff
100144fc:	800fffff 	.word	0x800fffff
10014500:	2c00      	cmp	r4, #0
10014502:	d048      	beq.n	10014596 <__aeabi_dsub+0x406>
10014504:	4cca      	ldr	r4, [pc, #808]	; (10014830 <__aeabi_dsub+0x6a0>)
10014506:	42a2      	cmp	r2, r4
10014508:	d100      	bne.n	1001450c <__aeabi_dsub+0x37c>
1001450a:	e0a2      	b.n	10014652 <__aeabi_dsub+0x4c2>
1001450c:	4274      	negs	r4, r6
1001450e:	46a1      	mov	r9, r4
10014510:	2480      	movs	r4, #128	; 0x80
10014512:	0424      	lsls	r4, r4, #16
10014514:	4327      	orrs	r7, r4
10014516:	464c      	mov	r4, r9
10014518:	2c38      	cmp	r4, #56	; 0x38
1001451a:	dd00      	ble.n	1001451e <__aeabi_dsub+0x38e>
1001451c:	e0db      	b.n	100146d6 <__aeabi_dsub+0x546>
1001451e:	2c1f      	cmp	r4, #31
10014520:	dd00      	ble.n	10014524 <__aeabi_dsub+0x394>
10014522:	e144      	b.n	100147ae <__aeabi_dsub+0x61e>
10014524:	464e      	mov	r6, r9
10014526:	2420      	movs	r4, #32
10014528:	1ba4      	subs	r4, r4, r6
1001452a:	003e      	movs	r6, r7
1001452c:	40a6      	lsls	r6, r4
1001452e:	46a2      	mov	sl, r4
10014530:	46b0      	mov	r8, r6
10014532:	464c      	mov	r4, r9
10014534:	002e      	movs	r6, r5
10014536:	40e6      	lsrs	r6, r4
10014538:	46b4      	mov	ip, r6
1001453a:	4646      	mov	r6, r8
1001453c:	4664      	mov	r4, ip
1001453e:	4326      	orrs	r6, r4
10014540:	4654      	mov	r4, sl
10014542:	40a5      	lsls	r5, r4
10014544:	1e6c      	subs	r4, r5, #1
10014546:	41a5      	sbcs	r5, r4
10014548:	0034      	movs	r4, r6
1001454a:	432c      	orrs	r4, r5
1001454c:	464d      	mov	r5, r9
1001454e:	40ef      	lsrs	r7, r5
10014550:	1b0d      	subs	r5, r1, r4
10014552:	e028      	b.n	100145a6 <__aeabi_dsub+0x416>
10014554:	464a      	mov	r2, r9
10014556:	4643      	mov	r3, r8
10014558:	464d      	mov	r5, r9
1001455a:	431a      	orrs	r2, r3
1001455c:	d000      	beq.n	10014560 <__aeabi_dsub+0x3d0>
1001455e:	e6a5      	b.n	100142ac <__aeabi_dsub+0x11c>
10014560:	2300      	movs	r3, #0
10014562:	2400      	movs	r4, #0
10014564:	2500      	movs	r5, #0
10014566:	e6de      	b.n	10014326 <__aeabi_dsub+0x196>
10014568:	2a1f      	cmp	r2, #31
1001456a:	dc5a      	bgt.n	10014622 <__aeabi_dsub+0x492>
1001456c:	4666      	mov	r6, ip
1001456e:	2220      	movs	r2, #32
10014570:	1b92      	subs	r2, r2, r6
10014572:	0006      	movs	r6, r0
10014574:	4096      	lsls	r6, r2
10014576:	4691      	mov	r9, r2
10014578:	46b0      	mov	r8, r6
1001457a:	4662      	mov	r2, ip
1001457c:	000e      	movs	r6, r1
1001457e:	40d6      	lsrs	r6, r2
10014580:	4642      	mov	r2, r8
10014582:	4316      	orrs	r6, r2
10014584:	464a      	mov	r2, r9
10014586:	4091      	lsls	r1, r2
10014588:	1e4a      	subs	r2, r1, #1
1001458a:	4191      	sbcs	r1, r2
1001458c:	0002      	movs	r2, r0
1001458e:	4660      	mov	r0, ip
10014590:	4331      	orrs	r1, r6
10014592:	40c2      	lsrs	r2, r0
10014594:	e6e4      	b.n	10014360 <__aeabi_dsub+0x1d0>
10014596:	003c      	movs	r4, r7
10014598:	432c      	orrs	r4, r5
1001459a:	d05a      	beq.n	10014652 <__aeabi_dsub+0x4c2>
1001459c:	43f4      	mvns	r4, r6
1001459e:	46a1      	mov	r9, r4
100145a0:	2c00      	cmp	r4, #0
100145a2:	d152      	bne.n	1001464a <__aeabi_dsub+0x4ba>
100145a4:	1b4d      	subs	r5, r1, r5
100145a6:	42a9      	cmp	r1, r5
100145a8:	4189      	sbcs	r1, r1
100145aa:	1bc7      	subs	r7, r0, r7
100145ac:	4249      	negs	r1, r1
100145ae:	1a7f      	subs	r7, r7, r1
100145b0:	0014      	movs	r4, r2
100145b2:	469a      	mov	sl, r3
100145b4:	e675      	b.n	100142a2 <__aeabi_dsub+0x112>
100145b6:	4a9e      	ldr	r2, [pc, #632]	; (10014830 <__aeabi_dsub+0x6a0>)
100145b8:	4294      	cmp	r4, r2
100145ba:	d000      	beq.n	100145be <__aeabi_dsub+0x42e>
100145bc:	e6c7      	b.n	1001434e <__aeabi_dsub+0x1be>
100145be:	e613      	b.n	100141e8 <__aeabi_dsub+0x58>
100145c0:	2200      	movs	r2, #0
100145c2:	e77f      	b.n	100144c4 <__aeabi_dsub+0x334>
100145c4:	2000      	movs	r0, #0
100145c6:	e78f      	b.n	100144e8 <__aeabi_dsub+0x358>
100145c8:	2c00      	cmp	r4, #0
100145ca:	d000      	beq.n	100145ce <__aeabi_dsub+0x43e>
100145cc:	e0c8      	b.n	10014760 <__aeabi_dsub+0x5d0>
100145ce:	003b      	movs	r3, r7
100145d0:	432b      	orrs	r3, r5
100145d2:	d100      	bne.n	100145d6 <__aeabi_dsub+0x446>
100145d4:	e10f      	b.n	100147f6 <__aeabi_dsub+0x666>
100145d6:	0003      	movs	r3, r0
100145d8:	430b      	orrs	r3, r1
100145da:	d100      	bne.n	100145de <__aeabi_dsub+0x44e>
100145dc:	e604      	b.n	100141e8 <__aeabi_dsub+0x58>
100145de:	1869      	adds	r1, r5, r1
100145e0:	42a9      	cmp	r1, r5
100145e2:	419b      	sbcs	r3, r3
100145e4:	183f      	adds	r7, r7, r0
100145e6:	425b      	negs	r3, r3
100145e8:	19df      	adds	r7, r3, r7
100145ea:	023b      	lsls	r3, r7, #8
100145ec:	d400      	bmi.n	100145f0 <__aeabi_dsub+0x460>
100145ee:	e11a      	b.n	10014826 <__aeabi_dsub+0x696>
100145f0:	4b90      	ldr	r3, [pc, #576]	; (10014834 <__aeabi_dsub+0x6a4>)
100145f2:	000d      	movs	r5, r1
100145f4:	401f      	ands	r7, r3
100145f6:	4664      	mov	r4, ip
100145f8:	e5f6      	b.n	100141e8 <__aeabi_dsub+0x58>
100145fa:	469a      	mov	sl, r3
100145fc:	e689      	b.n	10014312 <__aeabi_dsub+0x182>
100145fe:	003a      	movs	r2, r7
10014600:	432a      	orrs	r2, r5
10014602:	2c00      	cmp	r4, #0
10014604:	d15c      	bne.n	100146c0 <__aeabi_dsub+0x530>
10014606:	2a00      	cmp	r2, #0
10014608:	d175      	bne.n	100146f6 <__aeabi_dsub+0x566>
1001460a:	0002      	movs	r2, r0
1001460c:	430a      	orrs	r2, r1
1001460e:	d100      	bne.n	10014612 <__aeabi_dsub+0x482>
10014610:	e0ca      	b.n	100147a8 <__aeabi_dsub+0x618>
10014612:	0007      	movs	r7, r0
10014614:	000d      	movs	r5, r1
10014616:	469a      	mov	sl, r3
10014618:	e5e6      	b.n	100141e8 <__aeabi_dsub+0x58>
1001461a:	4664      	mov	r4, ip
1001461c:	2200      	movs	r2, #0
1001461e:	2500      	movs	r5, #0
10014620:	e681      	b.n	10014326 <__aeabi_dsub+0x196>
10014622:	4662      	mov	r2, ip
10014624:	0006      	movs	r6, r0
10014626:	3a20      	subs	r2, #32
10014628:	40d6      	lsrs	r6, r2
1001462a:	4662      	mov	r2, ip
1001462c:	46b0      	mov	r8, r6
1001462e:	2a20      	cmp	r2, #32
10014630:	d100      	bne.n	10014634 <__aeabi_dsub+0x4a4>
10014632:	e0b7      	b.n	100147a4 <__aeabi_dsub+0x614>
10014634:	2240      	movs	r2, #64	; 0x40
10014636:	4666      	mov	r6, ip
10014638:	1b92      	subs	r2, r2, r6
1001463a:	4090      	lsls	r0, r2
1001463c:	4301      	orrs	r1, r0
1001463e:	4642      	mov	r2, r8
10014640:	1e48      	subs	r0, r1, #1
10014642:	4181      	sbcs	r1, r0
10014644:	4311      	orrs	r1, r2
10014646:	2200      	movs	r2, #0
10014648:	e68a      	b.n	10014360 <__aeabi_dsub+0x1d0>
1001464a:	4c79      	ldr	r4, [pc, #484]	; (10014830 <__aeabi_dsub+0x6a0>)
1001464c:	42a2      	cmp	r2, r4
1001464e:	d000      	beq.n	10014652 <__aeabi_dsub+0x4c2>
10014650:	e761      	b.n	10014516 <__aeabi_dsub+0x386>
10014652:	0007      	movs	r7, r0
10014654:	000d      	movs	r5, r1
10014656:	0014      	movs	r4, r2
10014658:	469a      	mov	sl, r3
1001465a:	e5c5      	b.n	100141e8 <__aeabi_dsub+0x58>
1001465c:	2c00      	cmp	r4, #0
1001465e:	d141      	bne.n	100146e4 <__aeabi_dsub+0x554>
10014660:	003c      	movs	r4, r7
10014662:	432c      	orrs	r4, r5
10014664:	d078      	beq.n	10014758 <__aeabi_dsub+0x5c8>
10014666:	43f4      	mvns	r4, r6
10014668:	46a1      	mov	r9, r4
1001466a:	2c00      	cmp	r4, #0
1001466c:	d020      	beq.n	100146b0 <__aeabi_dsub+0x520>
1001466e:	4c70      	ldr	r4, [pc, #448]	; (10014830 <__aeabi_dsub+0x6a0>)
10014670:	42a2      	cmp	r2, r4
10014672:	d071      	beq.n	10014758 <__aeabi_dsub+0x5c8>
10014674:	464c      	mov	r4, r9
10014676:	2c38      	cmp	r4, #56	; 0x38
10014678:	dd00      	ble.n	1001467c <__aeabi_dsub+0x4ec>
1001467a:	e0b2      	b.n	100147e2 <__aeabi_dsub+0x652>
1001467c:	2c1f      	cmp	r4, #31
1001467e:	dd00      	ble.n	10014682 <__aeabi_dsub+0x4f2>
10014680:	e0bc      	b.n	100147fc <__aeabi_dsub+0x66c>
10014682:	2620      	movs	r6, #32
10014684:	1b34      	subs	r4, r6, r4
10014686:	46a2      	mov	sl, r4
10014688:	003c      	movs	r4, r7
1001468a:	4656      	mov	r6, sl
1001468c:	40b4      	lsls	r4, r6
1001468e:	464e      	mov	r6, r9
10014690:	46a0      	mov	r8, r4
10014692:	002c      	movs	r4, r5
10014694:	40f4      	lsrs	r4, r6
10014696:	46a4      	mov	ip, r4
10014698:	4644      	mov	r4, r8
1001469a:	4666      	mov	r6, ip
1001469c:	4334      	orrs	r4, r6
1001469e:	46a4      	mov	ip, r4
100146a0:	4654      	mov	r4, sl
100146a2:	40a5      	lsls	r5, r4
100146a4:	4664      	mov	r4, ip
100146a6:	1e6e      	subs	r6, r5, #1
100146a8:	41b5      	sbcs	r5, r6
100146aa:	4325      	orrs	r5, r4
100146ac:	464c      	mov	r4, r9
100146ae:	40e7      	lsrs	r7, r4
100146b0:	186d      	adds	r5, r5, r1
100146b2:	428d      	cmp	r5, r1
100146b4:	4189      	sbcs	r1, r1
100146b6:	183f      	adds	r7, r7, r0
100146b8:	4249      	negs	r1, r1
100146ba:	19cf      	adds	r7, r1, r7
100146bc:	0014      	movs	r4, r2
100146be:	e656      	b.n	1001436e <__aeabi_dsub+0x1de>
100146c0:	2a00      	cmp	r2, #0
100146c2:	d12f      	bne.n	10014724 <__aeabi_dsub+0x594>
100146c4:	0002      	movs	r2, r0
100146c6:	430a      	orrs	r2, r1
100146c8:	d100      	bne.n	100146cc <__aeabi_dsub+0x53c>
100146ca:	e084      	b.n	100147d6 <__aeabi_dsub+0x646>
100146cc:	0007      	movs	r7, r0
100146ce:	000d      	movs	r5, r1
100146d0:	469a      	mov	sl, r3
100146d2:	4c57      	ldr	r4, [pc, #348]	; (10014830 <__aeabi_dsub+0x6a0>)
100146d4:	e588      	b.n	100141e8 <__aeabi_dsub+0x58>
100146d6:	433d      	orrs	r5, r7
100146d8:	1e6f      	subs	r7, r5, #1
100146da:	41bd      	sbcs	r5, r7
100146dc:	b2ec      	uxtb	r4, r5
100146de:	2700      	movs	r7, #0
100146e0:	1b0d      	subs	r5, r1, r4
100146e2:	e760      	b.n	100145a6 <__aeabi_dsub+0x416>
100146e4:	4c52      	ldr	r4, [pc, #328]	; (10014830 <__aeabi_dsub+0x6a0>)
100146e6:	42a2      	cmp	r2, r4
100146e8:	d036      	beq.n	10014758 <__aeabi_dsub+0x5c8>
100146ea:	4274      	negs	r4, r6
100146ec:	2680      	movs	r6, #128	; 0x80
100146ee:	0436      	lsls	r6, r6, #16
100146f0:	46a1      	mov	r9, r4
100146f2:	4337      	orrs	r7, r6
100146f4:	e7be      	b.n	10014674 <__aeabi_dsub+0x4e4>
100146f6:	0002      	movs	r2, r0
100146f8:	430a      	orrs	r2, r1
100146fa:	d100      	bne.n	100146fe <__aeabi_dsub+0x56e>
100146fc:	e574      	b.n	100141e8 <__aeabi_dsub+0x58>
100146fe:	1a6a      	subs	r2, r5, r1
10014700:	4690      	mov	r8, r2
10014702:	4545      	cmp	r5, r8
10014704:	41b6      	sbcs	r6, r6
10014706:	1a3a      	subs	r2, r7, r0
10014708:	4276      	negs	r6, r6
1001470a:	1b92      	subs	r2, r2, r6
1001470c:	4694      	mov	ip, r2
1001470e:	0212      	lsls	r2, r2, #8
10014710:	d400      	bmi.n	10014714 <__aeabi_dsub+0x584>
10014712:	e5f7      	b.n	10014304 <__aeabi_dsub+0x174>
10014714:	1b4d      	subs	r5, r1, r5
10014716:	42a9      	cmp	r1, r5
10014718:	4189      	sbcs	r1, r1
1001471a:	1bc7      	subs	r7, r0, r7
1001471c:	4249      	negs	r1, r1
1001471e:	1a7f      	subs	r7, r7, r1
10014720:	469a      	mov	sl, r3
10014722:	e561      	b.n	100141e8 <__aeabi_dsub+0x58>
10014724:	0002      	movs	r2, r0
10014726:	430a      	orrs	r2, r1
10014728:	d03a      	beq.n	100147a0 <__aeabi_dsub+0x610>
1001472a:	08ed      	lsrs	r5, r5, #3
1001472c:	077c      	lsls	r4, r7, #29
1001472e:	432c      	orrs	r4, r5
10014730:	2580      	movs	r5, #128	; 0x80
10014732:	08fa      	lsrs	r2, r7, #3
10014734:	032d      	lsls	r5, r5, #12
10014736:	422a      	tst	r2, r5
10014738:	d008      	beq.n	1001474c <__aeabi_dsub+0x5bc>
1001473a:	08c7      	lsrs	r7, r0, #3
1001473c:	422f      	tst	r7, r5
1001473e:	d105      	bne.n	1001474c <__aeabi_dsub+0x5bc>
10014740:	0745      	lsls	r5, r0, #29
10014742:	002c      	movs	r4, r5
10014744:	003a      	movs	r2, r7
10014746:	469a      	mov	sl, r3
10014748:	08c9      	lsrs	r1, r1, #3
1001474a:	430c      	orrs	r4, r1
1001474c:	0f67      	lsrs	r7, r4, #29
1001474e:	00d2      	lsls	r2, r2, #3
10014750:	00e5      	lsls	r5, r4, #3
10014752:	4317      	orrs	r7, r2
10014754:	4c36      	ldr	r4, [pc, #216]	; (10014830 <__aeabi_dsub+0x6a0>)
10014756:	e547      	b.n	100141e8 <__aeabi_dsub+0x58>
10014758:	0007      	movs	r7, r0
1001475a:	000d      	movs	r5, r1
1001475c:	0014      	movs	r4, r2
1001475e:	e543      	b.n	100141e8 <__aeabi_dsub+0x58>
10014760:	003a      	movs	r2, r7
10014762:	432a      	orrs	r2, r5
10014764:	d043      	beq.n	100147ee <__aeabi_dsub+0x65e>
10014766:	0002      	movs	r2, r0
10014768:	430a      	orrs	r2, r1
1001476a:	d019      	beq.n	100147a0 <__aeabi_dsub+0x610>
1001476c:	08ed      	lsrs	r5, r5, #3
1001476e:	077c      	lsls	r4, r7, #29
10014770:	432c      	orrs	r4, r5
10014772:	2580      	movs	r5, #128	; 0x80
10014774:	08fa      	lsrs	r2, r7, #3
10014776:	032d      	lsls	r5, r5, #12
10014778:	422a      	tst	r2, r5
1001477a:	d007      	beq.n	1001478c <__aeabi_dsub+0x5fc>
1001477c:	08c6      	lsrs	r6, r0, #3
1001477e:	422e      	tst	r6, r5
10014780:	d104      	bne.n	1001478c <__aeabi_dsub+0x5fc>
10014782:	0747      	lsls	r7, r0, #29
10014784:	003c      	movs	r4, r7
10014786:	0032      	movs	r2, r6
10014788:	08c9      	lsrs	r1, r1, #3
1001478a:	430c      	orrs	r4, r1
1001478c:	00d7      	lsls	r7, r2, #3
1001478e:	0f62      	lsrs	r2, r4, #29
10014790:	00e5      	lsls	r5, r4, #3
10014792:	4317      	orrs	r7, r2
10014794:	469a      	mov	sl, r3
10014796:	4c26      	ldr	r4, [pc, #152]	; (10014830 <__aeabi_dsub+0x6a0>)
10014798:	e526      	b.n	100141e8 <__aeabi_dsub+0x58>
1001479a:	2200      	movs	r2, #0
1001479c:	2500      	movs	r5, #0
1001479e:	e544      	b.n	1001422a <__aeabi_dsub+0x9a>
100147a0:	4c23      	ldr	r4, [pc, #140]	; (10014830 <__aeabi_dsub+0x6a0>)
100147a2:	e521      	b.n	100141e8 <__aeabi_dsub+0x58>
100147a4:	2000      	movs	r0, #0
100147a6:	e749      	b.n	1001463c <__aeabi_dsub+0x4ac>
100147a8:	2300      	movs	r3, #0
100147aa:	2500      	movs	r5, #0
100147ac:	e5bb      	b.n	10014326 <__aeabi_dsub+0x196>
100147ae:	464c      	mov	r4, r9
100147b0:	003e      	movs	r6, r7
100147b2:	3c20      	subs	r4, #32
100147b4:	40e6      	lsrs	r6, r4
100147b6:	464c      	mov	r4, r9
100147b8:	46b4      	mov	ip, r6
100147ba:	2c20      	cmp	r4, #32
100147bc:	d031      	beq.n	10014822 <__aeabi_dsub+0x692>
100147be:	2440      	movs	r4, #64	; 0x40
100147c0:	464e      	mov	r6, r9
100147c2:	1ba6      	subs	r6, r4, r6
100147c4:	40b7      	lsls	r7, r6
100147c6:	433d      	orrs	r5, r7
100147c8:	1e6c      	subs	r4, r5, #1
100147ca:	41a5      	sbcs	r5, r4
100147cc:	4664      	mov	r4, ip
100147ce:	432c      	orrs	r4, r5
100147d0:	2700      	movs	r7, #0
100147d2:	1b0d      	subs	r5, r1, r4
100147d4:	e6e7      	b.n	100145a6 <__aeabi_dsub+0x416>
100147d6:	2280      	movs	r2, #128	; 0x80
100147d8:	2300      	movs	r3, #0
100147da:	0312      	lsls	r2, r2, #12
100147dc:	4c14      	ldr	r4, [pc, #80]	; (10014830 <__aeabi_dsub+0x6a0>)
100147de:	2500      	movs	r5, #0
100147e0:	e5a1      	b.n	10014326 <__aeabi_dsub+0x196>
100147e2:	433d      	orrs	r5, r7
100147e4:	1e6f      	subs	r7, r5, #1
100147e6:	41bd      	sbcs	r5, r7
100147e8:	2700      	movs	r7, #0
100147ea:	b2ed      	uxtb	r5, r5
100147ec:	e760      	b.n	100146b0 <__aeabi_dsub+0x520>
100147ee:	0007      	movs	r7, r0
100147f0:	000d      	movs	r5, r1
100147f2:	4c0f      	ldr	r4, [pc, #60]	; (10014830 <__aeabi_dsub+0x6a0>)
100147f4:	e4f8      	b.n	100141e8 <__aeabi_dsub+0x58>
100147f6:	0007      	movs	r7, r0
100147f8:	000d      	movs	r5, r1
100147fa:	e4f5      	b.n	100141e8 <__aeabi_dsub+0x58>
100147fc:	464e      	mov	r6, r9
100147fe:	003c      	movs	r4, r7
10014800:	3e20      	subs	r6, #32
10014802:	40f4      	lsrs	r4, r6
10014804:	46a0      	mov	r8, r4
10014806:	464c      	mov	r4, r9
10014808:	2c20      	cmp	r4, #32
1001480a:	d00e      	beq.n	1001482a <__aeabi_dsub+0x69a>
1001480c:	2440      	movs	r4, #64	; 0x40
1001480e:	464e      	mov	r6, r9
10014810:	1ba4      	subs	r4, r4, r6
10014812:	40a7      	lsls	r7, r4
10014814:	433d      	orrs	r5, r7
10014816:	1e6f      	subs	r7, r5, #1
10014818:	41bd      	sbcs	r5, r7
1001481a:	4644      	mov	r4, r8
1001481c:	2700      	movs	r7, #0
1001481e:	4325      	orrs	r5, r4
10014820:	e746      	b.n	100146b0 <__aeabi_dsub+0x520>
10014822:	2700      	movs	r7, #0
10014824:	e7cf      	b.n	100147c6 <__aeabi_dsub+0x636>
10014826:	000d      	movs	r5, r1
10014828:	e573      	b.n	10014312 <__aeabi_dsub+0x182>
1001482a:	2700      	movs	r7, #0
1001482c:	e7f2      	b.n	10014814 <__aeabi_dsub+0x684>
1001482e:	46c0      	nop			; (mov r8, r8)
10014830:	000007ff 	.word	0x000007ff
10014834:	ff7fffff 	.word	0xff7fffff

10014838 <__aeabi_d2iz>:
10014838:	030b      	lsls	r3, r1, #12
1001483a:	b530      	push	{r4, r5, lr}
1001483c:	4d13      	ldr	r5, [pc, #76]	; (1001488c <__aeabi_d2iz+0x54>)
1001483e:	0b1a      	lsrs	r2, r3, #12
10014840:	004b      	lsls	r3, r1, #1
10014842:	0d5b      	lsrs	r3, r3, #21
10014844:	0fc9      	lsrs	r1, r1, #31
10014846:	2400      	movs	r4, #0
10014848:	42ab      	cmp	r3, r5
1001484a:	dd11      	ble.n	10014870 <__aeabi_d2iz+0x38>
1001484c:	4c10      	ldr	r4, [pc, #64]	; (10014890 <__aeabi_d2iz+0x58>)
1001484e:	42a3      	cmp	r3, r4
10014850:	dc10      	bgt.n	10014874 <__aeabi_d2iz+0x3c>
10014852:	2480      	movs	r4, #128	; 0x80
10014854:	0364      	lsls	r4, r4, #13
10014856:	4322      	orrs	r2, r4
10014858:	4c0e      	ldr	r4, [pc, #56]	; (10014894 <__aeabi_d2iz+0x5c>)
1001485a:	1ae4      	subs	r4, r4, r3
1001485c:	2c1f      	cmp	r4, #31
1001485e:	dd0c      	ble.n	1001487a <__aeabi_d2iz+0x42>
10014860:	480d      	ldr	r0, [pc, #52]	; (10014898 <__aeabi_d2iz+0x60>)
10014862:	1ac3      	subs	r3, r0, r3
10014864:	40da      	lsrs	r2, r3
10014866:	0013      	movs	r3, r2
10014868:	425c      	negs	r4, r3
1001486a:	2900      	cmp	r1, #0
1001486c:	d100      	bne.n	10014870 <__aeabi_d2iz+0x38>
1001486e:	001c      	movs	r4, r3
10014870:	0020      	movs	r0, r4
10014872:	bd30      	pop	{r4, r5, pc}
10014874:	4b09      	ldr	r3, [pc, #36]	; (1001489c <__aeabi_d2iz+0x64>)
10014876:	18cc      	adds	r4, r1, r3
10014878:	e7fa      	b.n	10014870 <__aeabi_d2iz+0x38>
1001487a:	40e0      	lsrs	r0, r4
1001487c:	4c08      	ldr	r4, [pc, #32]	; (100148a0 <__aeabi_d2iz+0x68>)
1001487e:	46a4      	mov	ip, r4
10014880:	4463      	add	r3, ip
10014882:	409a      	lsls	r2, r3
10014884:	0013      	movs	r3, r2
10014886:	4303      	orrs	r3, r0
10014888:	e7ee      	b.n	10014868 <__aeabi_d2iz+0x30>
1001488a:	46c0      	nop			; (mov r8, r8)
1001488c:	000003fe 	.word	0x000003fe
10014890:	0000041d 	.word	0x0000041d
10014894:	00000433 	.word	0x00000433
10014898:	00000413 	.word	0x00000413
1001489c:	7fffffff 	.word	0x7fffffff
100148a0:	fffffbed 	.word	0xfffffbed

100148a4 <__aeabi_ui2d>:
100148a4:	b570      	push	{r4, r5, r6, lr}
100148a6:	1e05      	subs	r5, r0, #0
100148a8:	d028      	beq.n	100148fc <__aeabi_ui2d+0x58>
100148aa:	f000 f833 	bl	10014914 <__clzsi2>
100148ae:	4b15      	ldr	r3, [pc, #84]	; (10014904 <__aeabi_ui2d+0x60>)
100148b0:	4a15      	ldr	r2, [pc, #84]	; (10014908 <__aeabi_ui2d+0x64>)
100148b2:	1a1b      	subs	r3, r3, r0
100148b4:	1ad2      	subs	r2, r2, r3
100148b6:	2a1f      	cmp	r2, #31
100148b8:	dd16      	ble.n	100148e8 <__aeabi_ui2d+0x44>
100148ba:	002c      	movs	r4, r5
100148bc:	4a13      	ldr	r2, [pc, #76]	; (1001490c <__aeabi_ui2d+0x68>)
100148be:	2500      	movs	r5, #0
100148c0:	1ad2      	subs	r2, r2, r3
100148c2:	4094      	lsls	r4, r2
100148c4:	055a      	lsls	r2, r3, #21
100148c6:	0324      	lsls	r4, r4, #12
100148c8:	0b24      	lsrs	r4, r4, #12
100148ca:	0d52      	lsrs	r2, r2, #21
100148cc:	2100      	movs	r1, #0
100148ce:	0324      	lsls	r4, r4, #12
100148d0:	0d0b      	lsrs	r3, r1, #20
100148d2:	0b24      	lsrs	r4, r4, #12
100148d4:	051b      	lsls	r3, r3, #20
100148d6:	4323      	orrs	r3, r4
100148d8:	4c0d      	ldr	r4, [pc, #52]	; (10014910 <__aeabi_ui2d+0x6c>)
100148da:	0512      	lsls	r2, r2, #20
100148dc:	4023      	ands	r3, r4
100148de:	4313      	orrs	r3, r2
100148e0:	005b      	lsls	r3, r3, #1
100148e2:	0028      	movs	r0, r5
100148e4:	0859      	lsrs	r1, r3, #1
100148e6:	bd70      	pop	{r4, r5, r6, pc}
100148e8:	210b      	movs	r1, #11
100148ea:	002c      	movs	r4, r5
100148ec:	1a08      	subs	r0, r1, r0
100148ee:	40c4      	lsrs	r4, r0
100148f0:	4095      	lsls	r5, r2
100148f2:	0324      	lsls	r4, r4, #12
100148f4:	055a      	lsls	r2, r3, #21
100148f6:	0b24      	lsrs	r4, r4, #12
100148f8:	0d52      	lsrs	r2, r2, #21
100148fa:	e7e7      	b.n	100148cc <__aeabi_ui2d+0x28>
100148fc:	2200      	movs	r2, #0
100148fe:	2400      	movs	r4, #0
10014900:	e7e4      	b.n	100148cc <__aeabi_ui2d+0x28>
10014902:	46c0      	nop			; (mov r8, r8)
10014904:	0000041e 	.word	0x0000041e
10014908:	00000433 	.word	0x00000433
1001490c:	00000413 	.word	0x00000413
10014910:	800fffff 	.word	0x800fffff

10014914 <__clzsi2>:
10014914:	211c      	movs	r1, #28
10014916:	2301      	movs	r3, #1
10014918:	041b      	lsls	r3, r3, #16
1001491a:	4298      	cmp	r0, r3
1001491c:	d301      	bcc.n	10014922 <__clzsi2+0xe>
1001491e:	0c00      	lsrs	r0, r0, #16
10014920:	3910      	subs	r1, #16
10014922:	0a1b      	lsrs	r3, r3, #8
10014924:	4298      	cmp	r0, r3
10014926:	d301      	bcc.n	1001492c <__clzsi2+0x18>
10014928:	0a00      	lsrs	r0, r0, #8
1001492a:	3908      	subs	r1, #8
1001492c:	091b      	lsrs	r3, r3, #4
1001492e:	4298      	cmp	r0, r3
10014930:	d301      	bcc.n	10014936 <__clzsi2+0x22>
10014932:	0900      	lsrs	r0, r0, #4
10014934:	3904      	subs	r1, #4
10014936:	a202      	add	r2, pc, #8	; (adr r2, 10014940 <__clzsi2+0x2c>)
10014938:	5c10      	ldrb	r0, [r2, r0]
1001493a:	1840      	adds	r0, r0, r1
1001493c:	4770      	bx	lr
1001493e:	46c0      	nop			; (mov r8, r8)
10014940:	02020304 	.word	0x02020304
10014944:	01010101 	.word	0x01010101
	...

10014950 <__libc_init_array>:
10014950:	4b0e      	ldr	r3, [pc, #56]	; (1001498c <__libc_init_array+0x3c>)
10014952:	b570      	push	{r4, r5, r6, lr}
10014954:	2500      	movs	r5, #0
10014956:	001e      	movs	r6, r3
10014958:	4c0d      	ldr	r4, [pc, #52]	; (10014990 <__libc_init_array+0x40>)
1001495a:	1ae4      	subs	r4, r4, r3
1001495c:	10a4      	asrs	r4, r4, #2
1001495e:	42a5      	cmp	r5, r4
10014960:	d004      	beq.n	1001496c <__libc_init_array+0x1c>
10014962:	00ab      	lsls	r3, r5, #2
10014964:	58f3      	ldr	r3, [r6, r3]
10014966:	4798      	blx	r3
10014968:	3501      	adds	r5, #1
1001496a:	e7f8      	b.n	1001495e <__libc_init_array+0xe>
1001496c:	f003 f990 	bl	10017c90 <_init>
10014970:	4b08      	ldr	r3, [pc, #32]	; (10014994 <__libc_init_array+0x44>)
10014972:	2500      	movs	r5, #0
10014974:	001e      	movs	r6, r3
10014976:	4c08      	ldr	r4, [pc, #32]	; (10014998 <__libc_init_array+0x48>)
10014978:	1ae4      	subs	r4, r4, r3
1001497a:	10a4      	asrs	r4, r4, #2
1001497c:	42a5      	cmp	r5, r4
1001497e:	d004      	beq.n	1001498a <__libc_init_array+0x3a>
10014980:	00ab      	lsls	r3, r5, #2
10014982:	58f3      	ldr	r3, [r6, r3]
10014984:	4798      	blx	r3
10014986:	3501      	adds	r5, #1
10014988:	e7f8      	b.n	1001497c <__libc_init_array+0x2c>
1001498a:	bd70      	pop	{r4, r5, r6, pc}
1001498c:	10017c9c 	.word	0x10017c9c
10014990:	10017c9c 	.word	0x10017c9c
10014994:	10017c9c 	.word	0x10017c9c
10014998:	10017ca0 	.word	0x10017ca0

1001499c <malloc>:
1001499c:	b510      	push	{r4, lr}
1001499e:	4b03      	ldr	r3, [pc, #12]	; (100149ac <malloc+0x10>)
100149a0:	0001      	movs	r1, r0
100149a2:	6818      	ldr	r0, [r3, #0]
100149a4:	f000 f86a 	bl	10014a7c <_malloc_r>
100149a8:	bd10      	pop	{r4, pc}
100149aa:	46c0      	nop			; (mov r8, r8)
100149ac:	10017d58 	.word	0x10017d58

100149b0 <memcmp>:
100149b0:	b530      	push	{r4, r5, lr}
100149b2:	2400      	movs	r4, #0
100149b4:	42a2      	cmp	r2, r4
100149b6:	d008      	beq.n	100149ca <memcmp+0x1a>
100149b8:	5d03      	ldrb	r3, [r0, r4]
100149ba:	1c65      	adds	r5, r4, #1
100149bc:	5d0c      	ldrb	r4, [r1, r4]
100149be:	42a3      	cmp	r3, r4
100149c0:	d001      	beq.n	100149c6 <memcmp+0x16>
100149c2:	1b18      	subs	r0, r3, r4
100149c4:	e002      	b.n	100149cc <memcmp+0x1c>
100149c6:	002c      	movs	r4, r5
100149c8:	e7f4      	b.n	100149b4 <memcmp+0x4>
100149ca:	2000      	movs	r0, #0
100149cc:	bd30      	pop	{r4, r5, pc}

100149ce <memcpy>:
100149ce:	2300      	movs	r3, #0
100149d0:	b510      	push	{r4, lr}
100149d2:	429a      	cmp	r2, r3
100149d4:	d003      	beq.n	100149de <memcpy+0x10>
100149d6:	5ccc      	ldrb	r4, [r1, r3]
100149d8:	54c4      	strb	r4, [r0, r3]
100149da:	3301      	adds	r3, #1
100149dc:	e7f9      	b.n	100149d2 <memcpy+0x4>
100149de:	bd10      	pop	{r4, pc}

100149e0 <memset>:
100149e0:	0003      	movs	r3, r0
100149e2:	1882      	adds	r2, r0, r2
100149e4:	4293      	cmp	r3, r2
100149e6:	d002      	beq.n	100149ee <memset+0xe>
100149e8:	7019      	strb	r1, [r3, #0]
100149ea:	3301      	adds	r3, #1
100149ec:	e7fa      	b.n	100149e4 <memset+0x4>
100149ee:	4770      	bx	lr

100149f0 <_free_r>:
100149f0:	b530      	push	{r4, r5, lr}
100149f2:	2900      	cmp	r1, #0
100149f4:	d03e      	beq.n	10014a74 <_free_r+0x84>
100149f6:	3904      	subs	r1, #4
100149f8:	680b      	ldr	r3, [r1, #0]
100149fa:	2b00      	cmp	r3, #0
100149fc:	da00      	bge.n	10014a00 <_free_r+0x10>
100149fe:	18c9      	adds	r1, r1, r3
10014a00:	4a1d      	ldr	r2, [pc, #116]	; (10014a78 <_free_r+0x88>)
10014a02:	6813      	ldr	r3, [r2, #0]
10014a04:	0014      	movs	r4, r2
10014a06:	2b00      	cmp	r3, #0
10014a08:	d102      	bne.n	10014a10 <_free_r+0x20>
10014a0a:	604b      	str	r3, [r1, #4]
10014a0c:	6011      	str	r1, [r2, #0]
10014a0e:	e031      	b.n	10014a74 <_free_r+0x84>
10014a10:	428b      	cmp	r3, r1
10014a12:	d90d      	bls.n	10014a30 <_free_r+0x40>
10014a14:	680a      	ldr	r2, [r1, #0]
10014a16:	1888      	adds	r0, r1, r2
10014a18:	4283      	cmp	r3, r0
10014a1a:	d103      	bne.n	10014a24 <_free_r+0x34>
10014a1c:	6818      	ldr	r0, [r3, #0]
10014a1e:	685b      	ldr	r3, [r3, #4]
10014a20:	1882      	adds	r2, r0, r2
10014a22:	600a      	str	r2, [r1, #0]
10014a24:	604b      	str	r3, [r1, #4]
10014a26:	6021      	str	r1, [r4, #0]
10014a28:	e024      	b.n	10014a74 <_free_r+0x84>
10014a2a:	428a      	cmp	r2, r1
10014a2c:	d803      	bhi.n	10014a36 <_free_r+0x46>
10014a2e:	0013      	movs	r3, r2
10014a30:	685a      	ldr	r2, [r3, #4]
10014a32:	2a00      	cmp	r2, #0
10014a34:	d1f9      	bne.n	10014a2a <_free_r+0x3a>
10014a36:	681d      	ldr	r5, [r3, #0]
10014a38:	195c      	adds	r4, r3, r5
10014a3a:	428c      	cmp	r4, r1
10014a3c:	d10b      	bne.n	10014a56 <_free_r+0x66>
10014a3e:	6809      	ldr	r1, [r1, #0]
10014a40:	1869      	adds	r1, r5, r1
10014a42:	1858      	adds	r0, r3, r1
10014a44:	6019      	str	r1, [r3, #0]
10014a46:	4282      	cmp	r2, r0
10014a48:	d114      	bne.n	10014a74 <_free_r+0x84>
10014a4a:	6810      	ldr	r0, [r2, #0]
10014a4c:	6852      	ldr	r2, [r2, #4]
10014a4e:	1841      	adds	r1, r0, r1
10014a50:	6019      	str	r1, [r3, #0]
10014a52:	605a      	str	r2, [r3, #4]
10014a54:	e00e      	b.n	10014a74 <_free_r+0x84>
10014a56:	428c      	cmp	r4, r1
10014a58:	d902      	bls.n	10014a60 <_free_r+0x70>
10014a5a:	230c      	movs	r3, #12
10014a5c:	6003      	str	r3, [r0, #0]
10014a5e:	e009      	b.n	10014a74 <_free_r+0x84>
10014a60:	6808      	ldr	r0, [r1, #0]
10014a62:	180c      	adds	r4, r1, r0
10014a64:	42a2      	cmp	r2, r4
10014a66:	d103      	bne.n	10014a70 <_free_r+0x80>
10014a68:	6814      	ldr	r4, [r2, #0]
10014a6a:	6852      	ldr	r2, [r2, #4]
10014a6c:	1820      	adds	r0, r4, r0
10014a6e:	6008      	str	r0, [r1, #0]
10014a70:	604a      	str	r2, [r1, #4]
10014a72:	6059      	str	r1, [r3, #4]
10014a74:	bd30      	pop	{r4, r5, pc}
10014a76:	46c0      	nop			; (mov r8, r8)
10014a78:	1001982c 	.word	0x1001982c

10014a7c <_malloc_r>:
10014a7c:	2303      	movs	r3, #3
10014a7e:	b570      	push	{r4, r5, r6, lr}
10014a80:	1ccd      	adds	r5, r1, #3
10014a82:	439d      	bics	r5, r3
10014a84:	3508      	adds	r5, #8
10014a86:	0006      	movs	r6, r0
10014a88:	2d0c      	cmp	r5, #12
10014a8a:	d201      	bcs.n	10014a90 <_malloc_r+0x14>
10014a8c:	250c      	movs	r5, #12
10014a8e:	e005      	b.n	10014a9c <_malloc_r+0x20>
10014a90:	2d00      	cmp	r5, #0
10014a92:	da03      	bge.n	10014a9c <_malloc_r+0x20>
10014a94:	230c      	movs	r3, #12
10014a96:	2000      	movs	r0, #0
10014a98:	6033      	str	r3, [r6, #0]
10014a9a:	e040      	b.n	10014b1e <_malloc_r+0xa2>
10014a9c:	42a9      	cmp	r1, r5
10014a9e:	d8f9      	bhi.n	10014a94 <_malloc_r+0x18>
10014aa0:	4b1f      	ldr	r3, [pc, #124]	; (10014b20 <_malloc_r+0xa4>)
10014aa2:	681c      	ldr	r4, [r3, #0]
10014aa4:	001a      	movs	r2, r3
10014aa6:	0021      	movs	r1, r4
10014aa8:	2900      	cmp	r1, #0
10014aaa:	d013      	beq.n	10014ad4 <_malloc_r+0x58>
10014aac:	680b      	ldr	r3, [r1, #0]
10014aae:	1b5b      	subs	r3, r3, r5
10014ab0:	d40d      	bmi.n	10014ace <_malloc_r+0x52>
10014ab2:	2b0b      	cmp	r3, #11
10014ab4:	d902      	bls.n	10014abc <_malloc_r+0x40>
10014ab6:	600b      	str	r3, [r1, #0]
10014ab8:	18cc      	adds	r4, r1, r3
10014aba:	e01e      	b.n	10014afa <_malloc_r+0x7e>
10014abc:	428c      	cmp	r4, r1
10014abe:	d102      	bne.n	10014ac6 <_malloc_r+0x4a>
10014ac0:	6863      	ldr	r3, [r4, #4]
10014ac2:	6013      	str	r3, [r2, #0]
10014ac4:	e01a      	b.n	10014afc <_malloc_r+0x80>
10014ac6:	684b      	ldr	r3, [r1, #4]
10014ac8:	6063      	str	r3, [r4, #4]
10014aca:	000c      	movs	r4, r1
10014acc:	e016      	b.n	10014afc <_malloc_r+0x80>
10014ace:	000c      	movs	r4, r1
10014ad0:	6849      	ldr	r1, [r1, #4]
10014ad2:	e7e9      	b.n	10014aa8 <_malloc_r+0x2c>
10014ad4:	4c13      	ldr	r4, [pc, #76]	; (10014b24 <_malloc_r+0xa8>)
10014ad6:	6823      	ldr	r3, [r4, #0]
10014ad8:	2b00      	cmp	r3, #0
10014ada:	d103      	bne.n	10014ae4 <_malloc_r+0x68>
10014adc:	0030      	movs	r0, r6
10014ade:	f000 f8f9 	bl	10014cd4 <_sbrk_r>
10014ae2:	6020      	str	r0, [r4, #0]
10014ae4:	0029      	movs	r1, r5
10014ae6:	0030      	movs	r0, r6
10014ae8:	f000 f8f4 	bl	10014cd4 <_sbrk_r>
10014aec:	1c43      	adds	r3, r0, #1
10014aee:	d0d1      	beq.n	10014a94 <_malloc_r+0x18>
10014af0:	2303      	movs	r3, #3
10014af2:	1cc4      	adds	r4, r0, #3
10014af4:	439c      	bics	r4, r3
10014af6:	42a0      	cmp	r0, r4
10014af8:	d10a      	bne.n	10014b10 <_malloc_r+0x94>
10014afa:	6025      	str	r5, [r4, #0]
10014afc:	0020      	movs	r0, r4
10014afe:	2207      	movs	r2, #7
10014b00:	300b      	adds	r0, #11
10014b02:	1d23      	adds	r3, r4, #4
10014b04:	4390      	bics	r0, r2
10014b06:	1ac3      	subs	r3, r0, r3
10014b08:	d009      	beq.n	10014b1e <_malloc_r+0xa2>
10014b0a:	425a      	negs	r2, r3
10014b0c:	50e2      	str	r2, [r4, r3]
10014b0e:	e006      	b.n	10014b1e <_malloc_r+0xa2>
10014b10:	1a21      	subs	r1, r4, r0
10014b12:	0030      	movs	r0, r6
10014b14:	f000 f8de 	bl	10014cd4 <_sbrk_r>
10014b18:	1c43      	adds	r3, r0, #1
10014b1a:	d1ee      	bne.n	10014afa <_malloc_r+0x7e>
10014b1c:	e7ba      	b.n	10014a94 <_malloc_r+0x18>
10014b1e:	bd70      	pop	{r4, r5, r6, pc}
10014b20:	1001982c 	.word	0x1001982c
10014b24:	10019828 	.word	0x10019828

10014b28 <iprintf>:
10014b28:	b40f      	push	{r0, r1, r2, r3}
10014b2a:	4b0b      	ldr	r3, [pc, #44]	; (10014b58 <iprintf+0x30>)
10014b2c:	b513      	push	{r0, r1, r4, lr}
10014b2e:	681c      	ldr	r4, [r3, #0]
10014b30:	2c00      	cmp	r4, #0
10014b32:	d005      	beq.n	10014b40 <iprintf+0x18>
10014b34:	69a3      	ldr	r3, [r4, #24]
10014b36:	2b00      	cmp	r3, #0
10014b38:	d102      	bne.n	10014b40 <iprintf+0x18>
10014b3a:	0020      	movs	r0, r4
10014b3c:	f000 fb58 	bl	100151f0 <__sinit>
10014b40:	ab05      	add	r3, sp, #20
10014b42:	9a04      	ldr	r2, [sp, #16]
10014b44:	68a1      	ldr	r1, [r4, #8]
10014b46:	0020      	movs	r0, r4
10014b48:	9301      	str	r3, [sp, #4]
10014b4a:	f000 fc71 	bl	10015430 <_vfiprintf_r>
10014b4e:	bc16      	pop	{r1, r2, r4}
10014b50:	bc08      	pop	{r3}
10014b52:	b004      	add	sp, #16
10014b54:	4718      	bx	r3
10014b56:	46c0      	nop			; (mov r8, r8)
10014b58:	10017d58 	.word	0x10017d58

10014b5c <putchar>:
10014b5c:	4b08      	ldr	r3, [pc, #32]	; (10014b80 <putchar+0x24>)
10014b5e:	b570      	push	{r4, r5, r6, lr}
10014b60:	681c      	ldr	r4, [r3, #0]
10014b62:	0005      	movs	r5, r0
10014b64:	2c00      	cmp	r4, #0
10014b66:	d005      	beq.n	10014b74 <putchar+0x18>
10014b68:	69a3      	ldr	r3, [r4, #24]
10014b6a:	2b00      	cmp	r3, #0
10014b6c:	d102      	bne.n	10014b74 <putchar+0x18>
10014b6e:	0020      	movs	r0, r4
10014b70:	f000 fb3e 	bl	100151f0 <__sinit>
10014b74:	0029      	movs	r1, r5
10014b76:	68a2      	ldr	r2, [r4, #8]
10014b78:	0020      	movs	r0, r4
10014b7a:	f000 ff05 	bl	10015988 <_putc_r>
10014b7e:	bd70      	pop	{r4, r5, r6, pc}
10014b80:	10017d58 	.word	0x10017d58

10014b84 <_puts_r>:
10014b84:	b570      	push	{r4, r5, r6, lr}
10014b86:	0005      	movs	r5, r0
10014b88:	000e      	movs	r6, r1
10014b8a:	2800      	cmp	r0, #0
10014b8c:	d004      	beq.n	10014b98 <_puts_r+0x14>
10014b8e:	6983      	ldr	r3, [r0, #24]
10014b90:	2b00      	cmp	r3, #0
10014b92:	d101      	bne.n	10014b98 <_puts_r+0x14>
10014b94:	f000 fb2c 	bl	100151f0 <__sinit>
10014b98:	69ab      	ldr	r3, [r5, #24]
10014b9a:	68ac      	ldr	r4, [r5, #8]
10014b9c:	2b00      	cmp	r3, #0
10014b9e:	d102      	bne.n	10014ba6 <_puts_r+0x22>
10014ba0:	0028      	movs	r0, r5
10014ba2:	f000 fb25 	bl	100151f0 <__sinit>
10014ba6:	4b25      	ldr	r3, [pc, #148]	; (10014c3c <_puts_r+0xb8>)
10014ba8:	429c      	cmp	r4, r3
10014baa:	d101      	bne.n	10014bb0 <_puts_r+0x2c>
10014bac:	686c      	ldr	r4, [r5, #4]
10014bae:	e008      	b.n	10014bc2 <_puts_r+0x3e>
10014bb0:	4b23      	ldr	r3, [pc, #140]	; (10014c40 <_puts_r+0xbc>)
10014bb2:	429c      	cmp	r4, r3
10014bb4:	d101      	bne.n	10014bba <_puts_r+0x36>
10014bb6:	68ac      	ldr	r4, [r5, #8]
10014bb8:	e003      	b.n	10014bc2 <_puts_r+0x3e>
10014bba:	4b22      	ldr	r3, [pc, #136]	; (10014c44 <_puts_r+0xc0>)
10014bbc:	429c      	cmp	r4, r3
10014bbe:	d100      	bne.n	10014bc2 <_puts_r+0x3e>
10014bc0:	68ec      	ldr	r4, [r5, #12]
10014bc2:	89a3      	ldrh	r3, [r4, #12]
10014bc4:	071b      	lsls	r3, r3, #28
10014bc6:	d502      	bpl.n	10014bce <_puts_r+0x4a>
10014bc8:	6923      	ldr	r3, [r4, #16]
10014bca:	2b00      	cmp	r3, #0
10014bcc:	d111      	bne.n	10014bf2 <_puts_r+0x6e>
10014bce:	0021      	movs	r1, r4
10014bd0:	0028      	movs	r0, r5
10014bd2:	f000 f9a3 	bl	10014f1c <__swsetup_r>
10014bd6:	2800      	cmp	r0, #0
10014bd8:	d00b      	beq.n	10014bf2 <_puts_r+0x6e>
10014bda:	2001      	movs	r0, #1
10014bdc:	4240      	negs	r0, r0
10014bde:	e02b      	b.n	10014c38 <_puts_r+0xb4>
10014be0:	3b01      	subs	r3, #1
10014be2:	3601      	adds	r6, #1
10014be4:	60a3      	str	r3, [r4, #8]
10014be6:	2b00      	cmp	r3, #0
10014be8:	db08      	blt.n	10014bfc <_puts_r+0x78>
10014bea:	6823      	ldr	r3, [r4, #0]
10014bec:	1c5a      	adds	r2, r3, #1
10014bee:	6022      	str	r2, [r4, #0]
10014bf0:	7019      	strb	r1, [r3, #0]
10014bf2:	7831      	ldrb	r1, [r6, #0]
10014bf4:	68a3      	ldr	r3, [r4, #8]
10014bf6:	2900      	cmp	r1, #0
10014bf8:	d1f2      	bne.n	10014be0 <_puts_r+0x5c>
10014bfa:	e00b      	b.n	10014c14 <_puts_r+0x90>
10014bfc:	69a2      	ldr	r2, [r4, #24]
10014bfe:	4293      	cmp	r3, r2
10014c00:	db01      	blt.n	10014c06 <_puts_r+0x82>
10014c02:	290a      	cmp	r1, #10
10014c04:	d1f1      	bne.n	10014bea <_puts_r+0x66>
10014c06:	0022      	movs	r2, r4
10014c08:	0028      	movs	r0, r5
10014c0a:	f000 f92f 	bl	10014e6c <__swbuf_r>
10014c0e:	1c43      	adds	r3, r0, #1
10014c10:	d1ef      	bne.n	10014bf2 <_puts_r+0x6e>
10014c12:	e7e2      	b.n	10014bda <_puts_r+0x56>
10014c14:	3b01      	subs	r3, #1
10014c16:	60a3      	str	r3, [r4, #8]
10014c18:	2b00      	cmp	r3, #0
10014c1a:	da08      	bge.n	10014c2e <_puts_r+0xaa>
10014c1c:	0022      	movs	r2, r4
10014c1e:	310a      	adds	r1, #10
10014c20:	0028      	movs	r0, r5
10014c22:	f000 f923 	bl	10014e6c <__swbuf_r>
10014c26:	1c43      	adds	r3, r0, #1
10014c28:	d0d7      	beq.n	10014bda <_puts_r+0x56>
10014c2a:	200a      	movs	r0, #10
10014c2c:	e004      	b.n	10014c38 <_puts_r+0xb4>
10014c2e:	200a      	movs	r0, #10
10014c30:	6823      	ldr	r3, [r4, #0]
10014c32:	1c5a      	adds	r2, r3, #1
10014c34:	6022      	str	r2, [r4, #0]
10014c36:	7018      	strb	r0, [r3, #0]
10014c38:	bd70      	pop	{r4, r5, r6, pc}
10014c3a:	46c0      	nop			; (mov r8, r8)
10014c3c:	10017bfc 	.word	0x10017bfc
10014c40:	10017c1c 	.word	0x10017c1c
10014c44:	10017c3c 	.word	0x10017c3c

10014c48 <puts>:
10014c48:	b510      	push	{r4, lr}
10014c4a:	4b03      	ldr	r3, [pc, #12]	; (10014c58 <puts+0x10>)
10014c4c:	0001      	movs	r1, r0
10014c4e:	6818      	ldr	r0, [r3, #0]
10014c50:	f7ff ff98 	bl	10014b84 <_puts_r>
10014c54:	bd10      	pop	{r4, pc}
10014c56:	46c0      	nop			; (mov r8, r8)
10014c58:	10017d58 	.word	0x10017d58

10014c5c <rand>:
10014c5c:	4b15      	ldr	r3, [pc, #84]	; (10014cb4 <rand+0x58>)
10014c5e:	b510      	push	{r4, lr}
10014c60:	681c      	ldr	r4, [r3, #0]
10014c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014c64:	2b00      	cmp	r3, #0
10014c66:	d115      	bne.n	10014c94 <rand+0x38>
10014c68:	2018      	movs	r0, #24
10014c6a:	f7ff fe97 	bl	1001499c <malloc>
10014c6e:	4b12      	ldr	r3, [pc, #72]	; (10014cb8 <rand+0x5c>)
10014c70:	63a0      	str	r0, [r4, #56]	; 0x38
10014c72:	8003      	strh	r3, [r0, #0]
10014c74:	4b11      	ldr	r3, [pc, #68]	; (10014cbc <rand+0x60>)
10014c76:	2201      	movs	r2, #1
10014c78:	8043      	strh	r3, [r0, #2]
10014c7a:	4b11      	ldr	r3, [pc, #68]	; (10014cc0 <rand+0x64>)
10014c7c:	8083      	strh	r3, [r0, #4]
10014c7e:	4b11      	ldr	r3, [pc, #68]	; (10014cc4 <rand+0x68>)
10014c80:	80c3      	strh	r3, [r0, #6]
10014c82:	4b11      	ldr	r3, [pc, #68]	; (10014cc8 <rand+0x6c>)
10014c84:	8103      	strh	r3, [r0, #8]
10014c86:	2305      	movs	r3, #5
10014c88:	8143      	strh	r3, [r0, #10]
10014c8a:	3306      	adds	r3, #6
10014c8c:	8183      	strh	r3, [r0, #12]
10014c8e:	2300      	movs	r3, #0
10014c90:	6102      	str	r2, [r0, #16]
10014c92:	6143      	str	r3, [r0, #20]
10014c94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014c96:	4a0d      	ldr	r2, [pc, #52]	; (10014ccc <rand+0x70>)
10014c98:	6920      	ldr	r0, [r4, #16]
10014c9a:	6961      	ldr	r1, [r4, #20]
10014c9c:	4b0c      	ldr	r3, [pc, #48]	; (10014cd0 <rand+0x74>)
10014c9e:	f7fe f9c9 	bl	10013034 <__aeabi_lmul>
10014ca2:	2201      	movs	r2, #1
10014ca4:	2300      	movs	r3, #0
10014ca6:	1880      	adds	r0, r0, r2
10014ca8:	4159      	adcs	r1, r3
10014caa:	6120      	str	r0, [r4, #16]
10014cac:	6161      	str	r1, [r4, #20]
10014cae:	0048      	lsls	r0, r1, #1
10014cb0:	0840      	lsrs	r0, r0, #1
10014cb2:	bd10      	pop	{r4, pc}
10014cb4:	10017d58 	.word	0x10017d58
10014cb8:	0000330e 	.word	0x0000330e
10014cbc:	ffffabcd 	.word	0xffffabcd
10014cc0:	00001234 	.word	0x00001234
10014cc4:	ffffe66d 	.word	0xffffe66d
10014cc8:	ffffdeec 	.word	0xffffdeec
10014ccc:	4c957f2d 	.word	0x4c957f2d
10014cd0:	5851f42d 	.word	0x5851f42d

10014cd4 <_sbrk_r>:
10014cd4:	2300      	movs	r3, #0
10014cd6:	b570      	push	{r4, r5, r6, lr}
10014cd8:	4c06      	ldr	r4, [pc, #24]	; (10014cf4 <_sbrk_r+0x20>)
10014cda:	0005      	movs	r5, r0
10014cdc:	0008      	movs	r0, r1
10014cde:	6023      	str	r3, [r4, #0]
10014ce0:	f7f8 fb7a 	bl	1000d3d8 <_sbrk>
10014ce4:	1c43      	adds	r3, r0, #1
10014ce6:	d103      	bne.n	10014cf0 <_sbrk_r+0x1c>
10014ce8:	6823      	ldr	r3, [r4, #0]
10014cea:	2b00      	cmp	r3, #0
10014cec:	d000      	beq.n	10014cf0 <_sbrk_r+0x1c>
10014cee:	602b      	str	r3, [r5, #0]
10014cf0:	bd70      	pop	{r4, r5, r6, pc}
10014cf2:	46c0      	nop			; (mov r8, r8)
10014cf4:	1001abfc 	.word	0x1001abfc

10014cf8 <setbuf>:
10014cf8:	424a      	negs	r2, r1
10014cfa:	414a      	adcs	r2, r1
10014cfc:	2380      	movs	r3, #128	; 0x80
10014cfe:	b510      	push	{r4, lr}
10014d00:	0052      	lsls	r2, r2, #1
10014d02:	00db      	lsls	r3, r3, #3
10014d04:	f000 f802 	bl	10014d0c <setvbuf>
10014d08:	bd10      	pop	{r4, pc}
	...

10014d0c <setvbuf>:
10014d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10014d0e:	001d      	movs	r5, r3
10014d10:	4b51      	ldr	r3, [pc, #324]	; (10014e58 <setvbuf+0x14c>)
10014d12:	b085      	sub	sp, #20
10014d14:	681e      	ldr	r6, [r3, #0]
10014d16:	0004      	movs	r4, r0
10014d18:	000f      	movs	r7, r1
10014d1a:	9200      	str	r2, [sp, #0]
10014d1c:	2e00      	cmp	r6, #0
10014d1e:	d005      	beq.n	10014d2c <setvbuf+0x20>
10014d20:	69b3      	ldr	r3, [r6, #24]
10014d22:	2b00      	cmp	r3, #0
10014d24:	d102      	bne.n	10014d2c <setvbuf+0x20>
10014d26:	0030      	movs	r0, r6
10014d28:	f000 fa62 	bl	100151f0 <__sinit>
10014d2c:	4b4b      	ldr	r3, [pc, #300]	; (10014e5c <setvbuf+0x150>)
10014d2e:	429c      	cmp	r4, r3
10014d30:	d101      	bne.n	10014d36 <setvbuf+0x2a>
10014d32:	6874      	ldr	r4, [r6, #4]
10014d34:	e008      	b.n	10014d48 <setvbuf+0x3c>
10014d36:	4b4a      	ldr	r3, [pc, #296]	; (10014e60 <setvbuf+0x154>)
10014d38:	429c      	cmp	r4, r3
10014d3a:	d101      	bne.n	10014d40 <setvbuf+0x34>
10014d3c:	68b4      	ldr	r4, [r6, #8]
10014d3e:	e003      	b.n	10014d48 <setvbuf+0x3c>
10014d40:	4b48      	ldr	r3, [pc, #288]	; (10014e64 <setvbuf+0x158>)
10014d42:	429c      	cmp	r4, r3
10014d44:	d100      	bne.n	10014d48 <setvbuf+0x3c>
10014d46:	68f4      	ldr	r4, [r6, #12]
10014d48:	9b00      	ldr	r3, [sp, #0]
10014d4a:	2b02      	cmp	r3, #2
10014d4c:	d005      	beq.n	10014d5a <setvbuf+0x4e>
10014d4e:	2b01      	cmp	r3, #1
10014d50:	d900      	bls.n	10014d54 <setvbuf+0x48>
10014d52:	e07c      	b.n	10014e4e <setvbuf+0x142>
10014d54:	2d00      	cmp	r5, #0
10014d56:	da00      	bge.n	10014d5a <setvbuf+0x4e>
10014d58:	e079      	b.n	10014e4e <setvbuf+0x142>
10014d5a:	0021      	movs	r1, r4
10014d5c:	0030      	movs	r0, r6
10014d5e:	f000 f9d9 	bl	10015114 <_fflush_r>
10014d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014d64:	2900      	cmp	r1, #0
10014d66:	d008      	beq.n	10014d7a <setvbuf+0x6e>
10014d68:	0023      	movs	r3, r4
10014d6a:	3344      	adds	r3, #68	; 0x44
10014d6c:	4299      	cmp	r1, r3
10014d6e:	d002      	beq.n	10014d76 <setvbuf+0x6a>
10014d70:	0030      	movs	r0, r6
10014d72:	f7ff fe3d 	bl	100149f0 <_free_r>
10014d76:	2300      	movs	r3, #0
10014d78:	6363      	str	r3, [r4, #52]	; 0x34
10014d7a:	2300      	movs	r3, #0
10014d7c:	61a3      	str	r3, [r4, #24]
10014d7e:	6063      	str	r3, [r4, #4]
10014d80:	89a3      	ldrh	r3, [r4, #12]
10014d82:	061b      	lsls	r3, r3, #24
10014d84:	d503      	bpl.n	10014d8e <setvbuf+0x82>
10014d86:	6921      	ldr	r1, [r4, #16]
10014d88:	0030      	movs	r0, r6
10014d8a:	f7ff fe31 	bl	100149f0 <_free_r>
10014d8e:	89a2      	ldrh	r2, [r4, #12]
10014d90:	4b35      	ldr	r3, [pc, #212]	; (10014e68 <setvbuf+0x15c>)
10014d92:	4013      	ands	r3, r2
10014d94:	81a3      	strh	r3, [r4, #12]
10014d96:	9b00      	ldr	r3, [sp, #0]
10014d98:	2b02      	cmp	r3, #2
10014d9a:	d021      	beq.n	10014de0 <setvbuf+0xd4>
10014d9c:	ab03      	add	r3, sp, #12
10014d9e:	aa02      	add	r2, sp, #8
10014da0:	0021      	movs	r1, r4
10014da2:	0030      	movs	r0, r6
10014da4:	f000 fab8 	bl	10015318 <__swhatbuf_r>
10014da8:	89a3      	ldrh	r3, [r4, #12]
10014daa:	4318      	orrs	r0, r3
10014dac:	81a0      	strh	r0, [r4, #12]
10014dae:	2d00      	cmp	r5, #0
10014db0:	d101      	bne.n	10014db6 <setvbuf+0xaa>
10014db2:	9d02      	ldr	r5, [sp, #8]
10014db4:	e001      	b.n	10014dba <setvbuf+0xae>
10014db6:	2f00      	cmp	r7, #0
10014db8:	d125      	bne.n	10014e06 <setvbuf+0xfa>
10014dba:	0028      	movs	r0, r5
10014dbc:	f7ff fdee 	bl	1001499c <malloc>
10014dc0:	9501      	str	r5, [sp, #4]
10014dc2:	1e07      	subs	r7, r0, #0
10014dc4:	d11a      	bne.n	10014dfc <setvbuf+0xf0>
10014dc6:	9b02      	ldr	r3, [sp, #8]
10014dc8:	9301      	str	r3, [sp, #4]
10014dca:	42ab      	cmp	r3, r5
10014dcc:	d102      	bne.n	10014dd4 <setvbuf+0xc8>
10014dce:	2001      	movs	r0, #1
10014dd0:	4240      	negs	r0, r0
10014dd2:	e006      	b.n	10014de2 <setvbuf+0xd6>
10014dd4:	9801      	ldr	r0, [sp, #4]
10014dd6:	f7ff fde1 	bl	1001499c <malloc>
10014dda:	1e07      	subs	r7, r0, #0
10014ddc:	d10e      	bne.n	10014dfc <setvbuf+0xf0>
10014dde:	e7f6      	b.n	10014dce <setvbuf+0xc2>
10014de0:	2000      	movs	r0, #0
10014de2:	2202      	movs	r2, #2
10014de4:	89a3      	ldrh	r3, [r4, #12]
10014de6:	4313      	orrs	r3, r2
10014de8:	81a3      	strh	r3, [r4, #12]
10014dea:	2300      	movs	r3, #0
10014dec:	60a3      	str	r3, [r4, #8]
10014dee:	0023      	movs	r3, r4
10014df0:	3347      	adds	r3, #71	; 0x47
10014df2:	6023      	str	r3, [r4, #0]
10014df4:	6123      	str	r3, [r4, #16]
10014df6:	2301      	movs	r3, #1
10014df8:	6163      	str	r3, [r4, #20]
10014dfa:	e02a      	b.n	10014e52 <setvbuf+0x146>
10014dfc:	2280      	movs	r2, #128	; 0x80
10014dfe:	89a3      	ldrh	r3, [r4, #12]
10014e00:	9d01      	ldr	r5, [sp, #4]
10014e02:	4313      	orrs	r3, r2
10014e04:	81a3      	strh	r3, [r4, #12]
10014e06:	69b3      	ldr	r3, [r6, #24]
10014e08:	2b00      	cmp	r3, #0
10014e0a:	d102      	bne.n	10014e12 <setvbuf+0x106>
10014e0c:	0030      	movs	r0, r6
10014e0e:	f000 f9ef 	bl	100151f0 <__sinit>
10014e12:	9b00      	ldr	r3, [sp, #0]
10014e14:	2b01      	cmp	r3, #1
10014e16:	d103      	bne.n	10014e20 <setvbuf+0x114>
10014e18:	89a3      	ldrh	r3, [r4, #12]
10014e1a:	9a00      	ldr	r2, [sp, #0]
10014e1c:	431a      	orrs	r2, r3
10014e1e:	81a2      	strh	r2, [r4, #12]
10014e20:	2308      	movs	r3, #8
10014e22:	89a2      	ldrh	r2, [r4, #12]
10014e24:	6027      	str	r7, [r4, #0]
10014e26:	4013      	ands	r3, r2
10014e28:	6127      	str	r7, [r4, #16]
10014e2a:	6165      	str	r5, [r4, #20]
10014e2c:	1e18      	subs	r0, r3, #0
10014e2e:	d00c      	beq.n	10014e4a <setvbuf+0x13e>
10014e30:	2301      	movs	r3, #1
10014e32:	401a      	ands	r2, r3
10014e34:	2300      	movs	r3, #0
10014e36:	1e10      	subs	r0, r2, #0
10014e38:	4298      	cmp	r0, r3
10014e3a:	d004      	beq.n	10014e46 <setvbuf+0x13a>
10014e3c:	426d      	negs	r5, r5
10014e3e:	60a3      	str	r3, [r4, #8]
10014e40:	61a5      	str	r5, [r4, #24]
10014e42:	0018      	movs	r0, r3
10014e44:	e005      	b.n	10014e52 <setvbuf+0x146>
10014e46:	60a5      	str	r5, [r4, #8]
10014e48:	e003      	b.n	10014e52 <setvbuf+0x146>
10014e4a:	60a3      	str	r3, [r4, #8]
10014e4c:	e001      	b.n	10014e52 <setvbuf+0x146>
10014e4e:	2001      	movs	r0, #1
10014e50:	4240      	negs	r0, r0
10014e52:	b005      	add	sp, #20
10014e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014e56:	46c0      	nop			; (mov r8, r8)
10014e58:	10017d58 	.word	0x10017d58
10014e5c:	10017bfc 	.word	0x10017bfc
10014e60:	10017c1c 	.word	0x10017c1c
10014e64:	10017c3c 	.word	0x10017c3c
10014e68:	fffff35c 	.word	0xfffff35c

10014e6c <__swbuf_r>:
10014e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014e6e:	0005      	movs	r5, r0
10014e70:	000f      	movs	r7, r1
10014e72:	0014      	movs	r4, r2
10014e74:	2800      	cmp	r0, #0
10014e76:	d004      	beq.n	10014e82 <__swbuf_r+0x16>
10014e78:	6983      	ldr	r3, [r0, #24]
10014e7a:	2b00      	cmp	r3, #0
10014e7c:	d101      	bne.n	10014e82 <__swbuf_r+0x16>
10014e7e:	f000 f9b7 	bl	100151f0 <__sinit>
10014e82:	4b23      	ldr	r3, [pc, #140]	; (10014f10 <__swbuf_r+0xa4>)
10014e84:	429c      	cmp	r4, r3
10014e86:	d101      	bne.n	10014e8c <__swbuf_r+0x20>
10014e88:	686c      	ldr	r4, [r5, #4]
10014e8a:	e008      	b.n	10014e9e <__swbuf_r+0x32>
10014e8c:	4b21      	ldr	r3, [pc, #132]	; (10014f14 <__swbuf_r+0xa8>)
10014e8e:	429c      	cmp	r4, r3
10014e90:	d101      	bne.n	10014e96 <__swbuf_r+0x2a>
10014e92:	68ac      	ldr	r4, [r5, #8]
10014e94:	e003      	b.n	10014e9e <__swbuf_r+0x32>
10014e96:	4b20      	ldr	r3, [pc, #128]	; (10014f18 <__swbuf_r+0xac>)
10014e98:	429c      	cmp	r4, r3
10014e9a:	d100      	bne.n	10014e9e <__swbuf_r+0x32>
10014e9c:	68ec      	ldr	r4, [r5, #12]
10014e9e:	69a3      	ldr	r3, [r4, #24]
10014ea0:	60a3      	str	r3, [r4, #8]
10014ea2:	89a3      	ldrh	r3, [r4, #12]
10014ea4:	071b      	lsls	r3, r3, #28
10014ea6:	d50a      	bpl.n	10014ebe <__swbuf_r+0x52>
10014ea8:	6923      	ldr	r3, [r4, #16]
10014eaa:	2b00      	cmp	r3, #0
10014eac:	d007      	beq.n	10014ebe <__swbuf_r+0x52>
10014eae:	6823      	ldr	r3, [r4, #0]
10014eb0:	6922      	ldr	r2, [r4, #16]
10014eb2:	b2fe      	uxtb	r6, r7
10014eb4:	1a98      	subs	r0, r3, r2
10014eb6:	6963      	ldr	r3, [r4, #20]
10014eb8:	4298      	cmp	r0, r3
10014eba:	db0f      	blt.n	10014edc <__swbuf_r+0x70>
10014ebc:	e008      	b.n	10014ed0 <__swbuf_r+0x64>
10014ebe:	0021      	movs	r1, r4
10014ec0:	0028      	movs	r0, r5
10014ec2:	f000 f82b 	bl	10014f1c <__swsetup_r>
10014ec6:	2800      	cmp	r0, #0
10014ec8:	d0f1      	beq.n	10014eae <__swbuf_r+0x42>
10014eca:	2001      	movs	r0, #1
10014ecc:	4240      	negs	r0, r0
10014ece:	e01d      	b.n	10014f0c <__swbuf_r+0xa0>
10014ed0:	0021      	movs	r1, r4
10014ed2:	0028      	movs	r0, r5
10014ed4:	f000 f91e 	bl	10015114 <_fflush_r>
10014ed8:	2800      	cmp	r0, #0
10014eda:	d1f6      	bne.n	10014eca <__swbuf_r+0x5e>
10014edc:	68a3      	ldr	r3, [r4, #8]
10014ede:	3001      	adds	r0, #1
10014ee0:	3b01      	subs	r3, #1
10014ee2:	60a3      	str	r3, [r4, #8]
10014ee4:	6823      	ldr	r3, [r4, #0]
10014ee6:	1c5a      	adds	r2, r3, #1
10014ee8:	6022      	str	r2, [r4, #0]
10014eea:	701f      	strb	r7, [r3, #0]
10014eec:	6963      	ldr	r3, [r4, #20]
10014eee:	4298      	cmp	r0, r3
10014ef0:	d005      	beq.n	10014efe <__swbuf_r+0x92>
10014ef2:	89a3      	ldrh	r3, [r4, #12]
10014ef4:	0030      	movs	r0, r6
10014ef6:	07db      	lsls	r3, r3, #31
10014ef8:	d508      	bpl.n	10014f0c <__swbuf_r+0xa0>
10014efa:	2e0a      	cmp	r6, #10
10014efc:	d106      	bne.n	10014f0c <__swbuf_r+0xa0>
10014efe:	0021      	movs	r1, r4
10014f00:	0028      	movs	r0, r5
10014f02:	f000 f907 	bl	10015114 <_fflush_r>
10014f06:	2800      	cmp	r0, #0
10014f08:	d1df      	bne.n	10014eca <__swbuf_r+0x5e>
10014f0a:	0030      	movs	r0, r6
10014f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014f0e:	46c0      	nop			; (mov r8, r8)
10014f10:	10017bfc 	.word	0x10017bfc
10014f14:	10017c1c 	.word	0x10017c1c
10014f18:	10017c3c 	.word	0x10017c3c

10014f1c <__swsetup_r>:
10014f1c:	4b36      	ldr	r3, [pc, #216]	; (10014ff8 <__swsetup_r+0xdc>)
10014f1e:	b570      	push	{r4, r5, r6, lr}
10014f20:	681d      	ldr	r5, [r3, #0]
10014f22:	0006      	movs	r6, r0
10014f24:	000c      	movs	r4, r1
10014f26:	2d00      	cmp	r5, #0
10014f28:	d005      	beq.n	10014f36 <__swsetup_r+0x1a>
10014f2a:	69ab      	ldr	r3, [r5, #24]
10014f2c:	2b00      	cmp	r3, #0
10014f2e:	d102      	bne.n	10014f36 <__swsetup_r+0x1a>
10014f30:	0028      	movs	r0, r5
10014f32:	f000 f95d 	bl	100151f0 <__sinit>
10014f36:	4b31      	ldr	r3, [pc, #196]	; (10014ffc <__swsetup_r+0xe0>)
10014f38:	429c      	cmp	r4, r3
10014f3a:	d101      	bne.n	10014f40 <__swsetup_r+0x24>
10014f3c:	686c      	ldr	r4, [r5, #4]
10014f3e:	e008      	b.n	10014f52 <__swsetup_r+0x36>
10014f40:	4b2f      	ldr	r3, [pc, #188]	; (10015000 <__swsetup_r+0xe4>)
10014f42:	429c      	cmp	r4, r3
10014f44:	d101      	bne.n	10014f4a <__swsetup_r+0x2e>
10014f46:	68ac      	ldr	r4, [r5, #8]
10014f48:	e003      	b.n	10014f52 <__swsetup_r+0x36>
10014f4a:	4b2e      	ldr	r3, [pc, #184]	; (10015004 <__swsetup_r+0xe8>)
10014f4c:	429c      	cmp	r4, r3
10014f4e:	d100      	bne.n	10014f52 <__swsetup_r+0x36>
10014f50:	68ec      	ldr	r4, [r5, #12]
10014f52:	220c      	movs	r2, #12
10014f54:	5ea3      	ldrsh	r3, [r4, r2]
10014f56:	b29a      	uxth	r2, r3
10014f58:	0711      	lsls	r1, r2, #28
10014f5a:	d423      	bmi.n	10014fa4 <__swsetup_r+0x88>
10014f5c:	06d1      	lsls	r1, r2, #27
10014f5e:	d407      	bmi.n	10014f70 <__swsetup_r+0x54>
10014f60:	2209      	movs	r2, #9
10014f62:	2001      	movs	r0, #1
10014f64:	6032      	str	r2, [r6, #0]
10014f66:	3237      	adds	r2, #55	; 0x37
10014f68:	4313      	orrs	r3, r2
10014f6a:	81a3      	strh	r3, [r4, #12]
10014f6c:	4240      	negs	r0, r0
10014f6e:	e042      	b.n	10014ff6 <__swsetup_r+0xda>
10014f70:	0753      	lsls	r3, r2, #29
10014f72:	d513      	bpl.n	10014f9c <__swsetup_r+0x80>
10014f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014f76:	2900      	cmp	r1, #0
10014f78:	d008      	beq.n	10014f8c <__swsetup_r+0x70>
10014f7a:	0023      	movs	r3, r4
10014f7c:	3344      	adds	r3, #68	; 0x44
10014f7e:	4299      	cmp	r1, r3
10014f80:	d002      	beq.n	10014f88 <__swsetup_r+0x6c>
10014f82:	0030      	movs	r0, r6
10014f84:	f7ff fd34 	bl	100149f0 <_free_r>
10014f88:	2300      	movs	r3, #0
10014f8a:	6363      	str	r3, [r4, #52]	; 0x34
10014f8c:	2224      	movs	r2, #36	; 0x24
10014f8e:	89a3      	ldrh	r3, [r4, #12]
10014f90:	4393      	bics	r3, r2
10014f92:	81a3      	strh	r3, [r4, #12]
10014f94:	2300      	movs	r3, #0
10014f96:	6063      	str	r3, [r4, #4]
10014f98:	6923      	ldr	r3, [r4, #16]
10014f9a:	6023      	str	r3, [r4, #0]
10014f9c:	2208      	movs	r2, #8
10014f9e:	89a3      	ldrh	r3, [r4, #12]
10014fa0:	4313      	orrs	r3, r2
10014fa2:	81a3      	strh	r3, [r4, #12]
10014fa4:	6923      	ldr	r3, [r4, #16]
10014fa6:	2b00      	cmp	r3, #0
10014fa8:	d10b      	bne.n	10014fc2 <__swsetup_r+0xa6>
10014faa:	23a0      	movs	r3, #160	; 0xa0
10014fac:	89a2      	ldrh	r2, [r4, #12]
10014fae:	009b      	lsls	r3, r3, #2
10014fb0:	4013      	ands	r3, r2
10014fb2:	2280      	movs	r2, #128	; 0x80
10014fb4:	0092      	lsls	r2, r2, #2
10014fb6:	4293      	cmp	r3, r2
10014fb8:	d003      	beq.n	10014fc2 <__swsetup_r+0xa6>
10014fba:	0021      	movs	r1, r4
10014fbc:	0030      	movs	r0, r6
10014fbe:	f000 f9d1 	bl	10015364 <__smakebuf_r>
10014fc2:	2301      	movs	r3, #1
10014fc4:	89a2      	ldrh	r2, [r4, #12]
10014fc6:	4013      	ands	r3, r2
10014fc8:	d005      	beq.n	10014fd6 <__swsetup_r+0xba>
10014fca:	2300      	movs	r3, #0
10014fcc:	60a3      	str	r3, [r4, #8]
10014fce:	6963      	ldr	r3, [r4, #20]
10014fd0:	425b      	negs	r3, r3
10014fd2:	61a3      	str	r3, [r4, #24]
10014fd4:	e003      	b.n	10014fde <__swsetup_r+0xc2>
10014fd6:	0792      	lsls	r2, r2, #30
10014fd8:	d400      	bmi.n	10014fdc <__swsetup_r+0xc0>
10014fda:	6963      	ldr	r3, [r4, #20]
10014fdc:	60a3      	str	r3, [r4, #8]
10014fde:	2000      	movs	r0, #0
10014fe0:	6923      	ldr	r3, [r4, #16]
10014fe2:	4283      	cmp	r3, r0
10014fe4:	d107      	bne.n	10014ff6 <__swsetup_r+0xda>
10014fe6:	220c      	movs	r2, #12
10014fe8:	5ea3      	ldrsh	r3, [r4, r2]
10014fea:	061a      	lsls	r2, r3, #24
10014fec:	d503      	bpl.n	10014ff6 <__swsetup_r+0xda>
10014fee:	2240      	movs	r2, #64	; 0x40
10014ff0:	4313      	orrs	r3, r2
10014ff2:	81a3      	strh	r3, [r4, #12]
10014ff4:	3801      	subs	r0, #1
10014ff6:	bd70      	pop	{r4, r5, r6, pc}
10014ff8:	10017d58 	.word	0x10017d58
10014ffc:	10017bfc 	.word	0x10017bfc
10015000:	10017c1c 	.word	0x10017c1c
10015004:	10017c3c 	.word	0x10017c3c

10015008 <__sflush_r>:
10015008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001500a:	898a      	ldrh	r2, [r1, #12]
1001500c:	0005      	movs	r5, r0
1001500e:	000c      	movs	r4, r1
10015010:	0713      	lsls	r3, r2, #28
10015012:	d45a      	bmi.n	100150ca <__sflush_r+0xc2>
10015014:	684b      	ldr	r3, [r1, #4]
10015016:	2b00      	cmp	r3, #0
10015018:	dc02      	bgt.n	10015020 <__sflush_r+0x18>
1001501a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001501c:	2b00      	cmp	r3, #0
1001501e:	dd19      	ble.n	10015054 <__sflush_r+0x4c>
10015020:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015022:	2f00      	cmp	r7, #0
10015024:	d016      	beq.n	10015054 <__sflush_r+0x4c>
10015026:	2300      	movs	r3, #0
10015028:	682e      	ldr	r6, [r5, #0]
1001502a:	602b      	str	r3, [r5, #0]
1001502c:	2380      	movs	r3, #128	; 0x80
1001502e:	015b      	lsls	r3, r3, #5
10015030:	401a      	ands	r2, r3
10015032:	d001      	beq.n	10015038 <__sflush_r+0x30>
10015034:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015036:	e014      	b.n	10015062 <__sflush_r+0x5a>
10015038:	2301      	movs	r3, #1
1001503a:	6a21      	ldr	r1, [r4, #32]
1001503c:	0028      	movs	r0, r5
1001503e:	47b8      	blx	r7
10015040:	1c43      	adds	r3, r0, #1
10015042:	d10e      	bne.n	10015062 <__sflush_r+0x5a>
10015044:	682b      	ldr	r3, [r5, #0]
10015046:	2b00      	cmp	r3, #0
10015048:	d00b      	beq.n	10015062 <__sflush_r+0x5a>
1001504a:	2b1d      	cmp	r3, #29
1001504c:	d001      	beq.n	10015052 <__sflush_r+0x4a>
1001504e:	2b16      	cmp	r3, #22
10015050:	d102      	bne.n	10015058 <__sflush_r+0x50>
10015052:	602e      	str	r6, [r5, #0]
10015054:	2000      	movs	r0, #0
10015056:	e05a      	b.n	1001510e <__sflush_r+0x106>
10015058:	2240      	movs	r2, #64	; 0x40
1001505a:	89a3      	ldrh	r3, [r4, #12]
1001505c:	4313      	orrs	r3, r2
1001505e:	81a3      	strh	r3, [r4, #12]
10015060:	e055      	b.n	1001510e <__sflush_r+0x106>
10015062:	89a3      	ldrh	r3, [r4, #12]
10015064:	075b      	lsls	r3, r3, #29
10015066:	d506      	bpl.n	10015076 <__sflush_r+0x6e>
10015068:	6863      	ldr	r3, [r4, #4]
1001506a:	1ac0      	subs	r0, r0, r3
1001506c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001506e:	2b00      	cmp	r3, #0
10015070:	d001      	beq.n	10015076 <__sflush_r+0x6e>
10015072:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015074:	1ac0      	subs	r0, r0, r3
10015076:	2300      	movs	r3, #0
10015078:	0002      	movs	r2, r0
1001507a:	6a21      	ldr	r1, [r4, #32]
1001507c:	0028      	movs	r0, r5
1001507e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015080:	47b8      	blx	r7
10015082:	89a3      	ldrh	r3, [r4, #12]
10015084:	1c42      	adds	r2, r0, #1
10015086:	d106      	bne.n	10015096 <__sflush_r+0x8e>
10015088:	6829      	ldr	r1, [r5, #0]
1001508a:	291d      	cmp	r1, #29
1001508c:	d83a      	bhi.n	10015104 <__sflush_r+0xfc>
1001508e:	4a20      	ldr	r2, [pc, #128]	; (10015110 <__sflush_r+0x108>)
10015090:	40ca      	lsrs	r2, r1
10015092:	07d2      	lsls	r2, r2, #31
10015094:	d536      	bpl.n	10015104 <__sflush_r+0xfc>
10015096:	2200      	movs	r2, #0
10015098:	6062      	str	r2, [r4, #4]
1001509a:	6922      	ldr	r2, [r4, #16]
1001509c:	6022      	str	r2, [r4, #0]
1001509e:	04db      	lsls	r3, r3, #19
100150a0:	d505      	bpl.n	100150ae <__sflush_r+0xa6>
100150a2:	1c43      	adds	r3, r0, #1
100150a4:	d102      	bne.n	100150ac <__sflush_r+0xa4>
100150a6:	682b      	ldr	r3, [r5, #0]
100150a8:	2b00      	cmp	r3, #0
100150aa:	d100      	bne.n	100150ae <__sflush_r+0xa6>
100150ac:	6560      	str	r0, [r4, #84]	; 0x54
100150ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
100150b0:	602e      	str	r6, [r5, #0]
100150b2:	2900      	cmp	r1, #0
100150b4:	d0ce      	beq.n	10015054 <__sflush_r+0x4c>
100150b6:	0023      	movs	r3, r4
100150b8:	3344      	adds	r3, #68	; 0x44
100150ba:	4299      	cmp	r1, r3
100150bc:	d002      	beq.n	100150c4 <__sflush_r+0xbc>
100150be:	0028      	movs	r0, r5
100150c0:	f7ff fc96 	bl	100149f0 <_free_r>
100150c4:	2000      	movs	r0, #0
100150c6:	6360      	str	r0, [r4, #52]	; 0x34
100150c8:	e021      	b.n	1001510e <__sflush_r+0x106>
100150ca:	690f      	ldr	r7, [r1, #16]
100150cc:	2f00      	cmp	r7, #0
100150ce:	d0c1      	beq.n	10015054 <__sflush_r+0x4c>
100150d0:	680b      	ldr	r3, [r1, #0]
100150d2:	600f      	str	r7, [r1, #0]
100150d4:	1bdb      	subs	r3, r3, r7
100150d6:	9301      	str	r3, [sp, #4]
100150d8:	2300      	movs	r3, #0
100150da:	0792      	lsls	r2, r2, #30
100150dc:	d100      	bne.n	100150e0 <__sflush_r+0xd8>
100150de:	694b      	ldr	r3, [r1, #20]
100150e0:	60a3      	str	r3, [r4, #8]
100150e2:	e003      	b.n	100150ec <__sflush_r+0xe4>
100150e4:	9b01      	ldr	r3, [sp, #4]
100150e6:	183f      	adds	r7, r7, r0
100150e8:	1a1b      	subs	r3, r3, r0
100150ea:	9301      	str	r3, [sp, #4]
100150ec:	9b01      	ldr	r3, [sp, #4]
100150ee:	2b00      	cmp	r3, #0
100150f0:	ddb0      	ble.n	10015054 <__sflush_r+0x4c>
100150f2:	9b01      	ldr	r3, [sp, #4]
100150f4:	003a      	movs	r2, r7
100150f6:	6a21      	ldr	r1, [r4, #32]
100150f8:	0028      	movs	r0, r5
100150fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100150fc:	47b0      	blx	r6
100150fe:	2800      	cmp	r0, #0
10015100:	dcf0      	bgt.n	100150e4 <__sflush_r+0xdc>
10015102:	89a3      	ldrh	r3, [r4, #12]
10015104:	2240      	movs	r2, #64	; 0x40
10015106:	2001      	movs	r0, #1
10015108:	4313      	orrs	r3, r2
1001510a:	81a3      	strh	r3, [r4, #12]
1001510c:	4240      	negs	r0, r0
1001510e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015110:	20400001 	.word	0x20400001

10015114 <_fflush_r>:
10015114:	690b      	ldr	r3, [r1, #16]
10015116:	b570      	push	{r4, r5, r6, lr}
10015118:	0005      	movs	r5, r0
1001511a:	000c      	movs	r4, r1
1001511c:	2b00      	cmp	r3, #0
1001511e:	d101      	bne.n	10015124 <_fflush_r+0x10>
10015120:	2000      	movs	r0, #0
10015122:	e01c      	b.n	1001515e <_fflush_r+0x4a>
10015124:	2800      	cmp	r0, #0
10015126:	d004      	beq.n	10015132 <_fflush_r+0x1e>
10015128:	6983      	ldr	r3, [r0, #24]
1001512a:	2b00      	cmp	r3, #0
1001512c:	d101      	bne.n	10015132 <_fflush_r+0x1e>
1001512e:	f000 f85f 	bl	100151f0 <__sinit>
10015132:	4b0b      	ldr	r3, [pc, #44]	; (10015160 <_fflush_r+0x4c>)
10015134:	429c      	cmp	r4, r3
10015136:	d101      	bne.n	1001513c <_fflush_r+0x28>
10015138:	686c      	ldr	r4, [r5, #4]
1001513a:	e008      	b.n	1001514e <_fflush_r+0x3a>
1001513c:	4b09      	ldr	r3, [pc, #36]	; (10015164 <_fflush_r+0x50>)
1001513e:	429c      	cmp	r4, r3
10015140:	d101      	bne.n	10015146 <_fflush_r+0x32>
10015142:	68ac      	ldr	r4, [r5, #8]
10015144:	e003      	b.n	1001514e <_fflush_r+0x3a>
10015146:	4b08      	ldr	r3, [pc, #32]	; (10015168 <_fflush_r+0x54>)
10015148:	429c      	cmp	r4, r3
1001514a:	d100      	bne.n	1001514e <_fflush_r+0x3a>
1001514c:	68ec      	ldr	r4, [r5, #12]
1001514e:	220c      	movs	r2, #12
10015150:	5ea3      	ldrsh	r3, [r4, r2]
10015152:	2b00      	cmp	r3, #0
10015154:	d0e4      	beq.n	10015120 <_fflush_r+0xc>
10015156:	0021      	movs	r1, r4
10015158:	0028      	movs	r0, r5
1001515a:	f7ff ff55 	bl	10015008 <__sflush_r>
1001515e:	bd70      	pop	{r4, r5, r6, pc}
10015160:	10017bfc 	.word	0x10017bfc
10015164:	10017c1c 	.word	0x10017c1c
10015168:	10017c3c 	.word	0x10017c3c

1001516c <_cleanup_r>:
1001516c:	b510      	push	{r4, lr}
1001516e:	4902      	ldr	r1, [pc, #8]	; (10015178 <_cleanup_r+0xc>)
10015170:	f000 f8b0 	bl	100152d4 <_fwalk_reent>
10015174:	bd10      	pop	{r4, pc}
10015176:	46c0      	nop			; (mov r8, r8)
10015178:	10015115 	.word	0x10015115

1001517c <std.isra.0>:
1001517c:	2300      	movs	r3, #0
1001517e:	b510      	push	{r4, lr}
10015180:	0004      	movs	r4, r0
10015182:	6003      	str	r3, [r0, #0]
10015184:	6043      	str	r3, [r0, #4]
10015186:	6083      	str	r3, [r0, #8]
10015188:	8181      	strh	r1, [r0, #12]
1001518a:	6643      	str	r3, [r0, #100]	; 0x64
1001518c:	81c2      	strh	r2, [r0, #14]
1001518e:	6103      	str	r3, [r0, #16]
10015190:	6143      	str	r3, [r0, #20]
10015192:	6183      	str	r3, [r0, #24]
10015194:	0019      	movs	r1, r3
10015196:	2208      	movs	r2, #8
10015198:	305c      	adds	r0, #92	; 0x5c
1001519a:	f7ff fc21 	bl	100149e0 <memset>
1001519e:	4b05      	ldr	r3, [pc, #20]	; (100151b4 <std.isra.0+0x38>)
100151a0:	6224      	str	r4, [r4, #32]
100151a2:	6263      	str	r3, [r4, #36]	; 0x24
100151a4:	4b04      	ldr	r3, [pc, #16]	; (100151b8 <std.isra.0+0x3c>)
100151a6:	62a3      	str	r3, [r4, #40]	; 0x28
100151a8:	4b04      	ldr	r3, [pc, #16]	; (100151bc <std.isra.0+0x40>)
100151aa:	62e3      	str	r3, [r4, #44]	; 0x2c
100151ac:	4b04      	ldr	r3, [pc, #16]	; (100151c0 <std.isra.0+0x44>)
100151ae:	6323      	str	r3, [r4, #48]	; 0x30
100151b0:	bd10      	pop	{r4, pc}
100151b2:	46c0      	nop			; (mov r8, r8)
100151b4:	100159f5 	.word	0x100159f5
100151b8:	10015a1d 	.word	0x10015a1d
100151bc:	10015a55 	.word	0x10015a55
100151c0:	10015a81 	.word	0x10015a81

100151c4 <__sfmoreglue>:
100151c4:	b570      	push	{r4, r5, r6, lr}
100151c6:	2568      	movs	r5, #104	; 0x68
100151c8:	1e4b      	subs	r3, r1, #1
100151ca:	435d      	muls	r5, r3
100151cc:	000e      	movs	r6, r1
100151ce:	0029      	movs	r1, r5
100151d0:	3174      	adds	r1, #116	; 0x74
100151d2:	f7ff fc53 	bl	10014a7c <_malloc_r>
100151d6:	1e04      	subs	r4, r0, #0
100151d8:	d008      	beq.n	100151ec <__sfmoreglue+0x28>
100151da:	2100      	movs	r1, #0
100151dc:	002a      	movs	r2, r5
100151de:	6001      	str	r1, [r0, #0]
100151e0:	6046      	str	r6, [r0, #4]
100151e2:	300c      	adds	r0, #12
100151e4:	60a0      	str	r0, [r4, #8]
100151e6:	3268      	adds	r2, #104	; 0x68
100151e8:	f7ff fbfa 	bl	100149e0 <memset>
100151ec:	0020      	movs	r0, r4
100151ee:	bd70      	pop	{r4, r5, r6, pc}

100151f0 <__sinit>:
100151f0:	6983      	ldr	r3, [r0, #24]
100151f2:	b513      	push	{r0, r1, r4, lr}
100151f4:	0004      	movs	r4, r0
100151f6:	2b00      	cmp	r3, #0
100151f8:	d128      	bne.n	1001524c <__sinit+0x5c>
100151fa:	6483      	str	r3, [r0, #72]	; 0x48
100151fc:	64c3      	str	r3, [r0, #76]	; 0x4c
100151fe:	6503      	str	r3, [r0, #80]	; 0x50
10015200:	4b13      	ldr	r3, [pc, #76]	; (10015250 <__sinit+0x60>)
10015202:	4a14      	ldr	r2, [pc, #80]	; (10015254 <__sinit+0x64>)
10015204:	681b      	ldr	r3, [r3, #0]
10015206:	6282      	str	r2, [r0, #40]	; 0x28
10015208:	9301      	str	r3, [sp, #4]
1001520a:	4298      	cmp	r0, r3
1001520c:	d101      	bne.n	10015212 <__sinit+0x22>
1001520e:	2301      	movs	r3, #1
10015210:	6183      	str	r3, [r0, #24]
10015212:	0020      	movs	r0, r4
10015214:	f000 f820 	bl	10015258 <__sfp>
10015218:	6060      	str	r0, [r4, #4]
1001521a:	0020      	movs	r0, r4
1001521c:	f000 f81c 	bl	10015258 <__sfp>
10015220:	60a0      	str	r0, [r4, #8]
10015222:	0020      	movs	r0, r4
10015224:	f000 f818 	bl	10015258 <__sfp>
10015228:	2200      	movs	r2, #0
1001522a:	60e0      	str	r0, [r4, #12]
1001522c:	2104      	movs	r1, #4
1001522e:	6860      	ldr	r0, [r4, #4]
10015230:	f7ff ffa4 	bl	1001517c <std.isra.0>
10015234:	2201      	movs	r2, #1
10015236:	2109      	movs	r1, #9
10015238:	68a0      	ldr	r0, [r4, #8]
1001523a:	f7ff ff9f 	bl	1001517c <std.isra.0>
1001523e:	2202      	movs	r2, #2
10015240:	2112      	movs	r1, #18
10015242:	68e0      	ldr	r0, [r4, #12]
10015244:	f7ff ff9a 	bl	1001517c <std.isra.0>
10015248:	2301      	movs	r3, #1
1001524a:	61a3      	str	r3, [r4, #24]
1001524c:	bd13      	pop	{r0, r1, r4, pc}
1001524e:	46c0      	nop			; (mov r8, r8)
10015250:	10017bf8 	.word	0x10017bf8
10015254:	1001516d 	.word	0x1001516d

10015258 <__sfp>:
10015258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001525a:	4b1d      	ldr	r3, [pc, #116]	; (100152d0 <__sfp+0x78>)
1001525c:	0006      	movs	r6, r0
1001525e:	681d      	ldr	r5, [r3, #0]
10015260:	69ab      	ldr	r3, [r5, #24]
10015262:	2b00      	cmp	r3, #0
10015264:	d102      	bne.n	1001526c <__sfp+0x14>
10015266:	0028      	movs	r0, r5
10015268:	f7ff ffc2 	bl	100151f0 <__sinit>
1001526c:	3548      	adds	r5, #72	; 0x48
1001526e:	68ac      	ldr	r4, [r5, #8]
10015270:	686b      	ldr	r3, [r5, #4]
10015272:	3b01      	subs	r3, #1
10015274:	d405      	bmi.n	10015282 <__sfp+0x2a>
10015276:	220c      	movs	r2, #12
10015278:	5ea7      	ldrsh	r7, [r4, r2]
1001527a:	2f00      	cmp	r7, #0
1001527c:	d010      	beq.n	100152a0 <__sfp+0x48>
1001527e:	3468      	adds	r4, #104	; 0x68
10015280:	e7f7      	b.n	10015272 <__sfp+0x1a>
10015282:	682b      	ldr	r3, [r5, #0]
10015284:	2b00      	cmp	r3, #0
10015286:	d001      	beq.n	1001528c <__sfp+0x34>
10015288:	682d      	ldr	r5, [r5, #0]
1001528a:	e7f0      	b.n	1001526e <__sfp+0x16>
1001528c:	2104      	movs	r1, #4
1001528e:	0030      	movs	r0, r6
10015290:	f7ff ff98 	bl	100151c4 <__sfmoreglue>
10015294:	6028      	str	r0, [r5, #0]
10015296:	2800      	cmp	r0, #0
10015298:	d1f6      	bne.n	10015288 <__sfp+0x30>
1001529a:	230c      	movs	r3, #12
1001529c:	6033      	str	r3, [r6, #0]
1001529e:	e016      	b.n	100152ce <__sfp+0x76>
100152a0:	2301      	movs	r3, #1
100152a2:	0020      	movs	r0, r4
100152a4:	425b      	negs	r3, r3
100152a6:	81e3      	strh	r3, [r4, #14]
100152a8:	3302      	adds	r3, #2
100152aa:	81a3      	strh	r3, [r4, #12]
100152ac:	6667      	str	r7, [r4, #100]	; 0x64
100152ae:	6027      	str	r7, [r4, #0]
100152b0:	60a7      	str	r7, [r4, #8]
100152b2:	6067      	str	r7, [r4, #4]
100152b4:	6127      	str	r7, [r4, #16]
100152b6:	6167      	str	r7, [r4, #20]
100152b8:	61a7      	str	r7, [r4, #24]
100152ba:	305c      	adds	r0, #92	; 0x5c
100152bc:	2208      	movs	r2, #8
100152be:	0039      	movs	r1, r7
100152c0:	f7ff fb8e 	bl	100149e0 <memset>
100152c4:	0020      	movs	r0, r4
100152c6:	6367      	str	r7, [r4, #52]	; 0x34
100152c8:	63a7      	str	r7, [r4, #56]	; 0x38
100152ca:	64a7      	str	r7, [r4, #72]	; 0x48
100152cc:	64e7      	str	r7, [r4, #76]	; 0x4c
100152ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100152d0:	10017bf8 	.word	0x10017bf8

100152d4 <_fwalk_reent>:
100152d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100152d6:	0004      	movs	r4, r0
100152d8:	0007      	movs	r7, r0
100152da:	2600      	movs	r6, #0
100152dc:	9101      	str	r1, [sp, #4]
100152de:	3448      	adds	r4, #72	; 0x48
100152e0:	2c00      	cmp	r4, #0
100152e2:	d016      	beq.n	10015312 <_fwalk_reent+0x3e>
100152e4:	6863      	ldr	r3, [r4, #4]
100152e6:	68a5      	ldr	r5, [r4, #8]
100152e8:	9300      	str	r3, [sp, #0]
100152ea:	9b00      	ldr	r3, [sp, #0]
100152ec:	3b01      	subs	r3, #1
100152ee:	9300      	str	r3, [sp, #0]
100152f0:	d40d      	bmi.n	1001530e <_fwalk_reent+0x3a>
100152f2:	89ab      	ldrh	r3, [r5, #12]
100152f4:	2b01      	cmp	r3, #1
100152f6:	d908      	bls.n	1001530a <_fwalk_reent+0x36>
100152f8:	220e      	movs	r2, #14
100152fa:	5eab      	ldrsh	r3, [r5, r2]
100152fc:	3301      	adds	r3, #1
100152fe:	d004      	beq.n	1001530a <_fwalk_reent+0x36>
10015300:	0029      	movs	r1, r5
10015302:	0038      	movs	r0, r7
10015304:	9b01      	ldr	r3, [sp, #4]
10015306:	4798      	blx	r3
10015308:	4306      	orrs	r6, r0
1001530a:	3568      	adds	r5, #104	; 0x68
1001530c:	e7ed      	b.n	100152ea <_fwalk_reent+0x16>
1001530e:	6824      	ldr	r4, [r4, #0]
10015310:	e7e6      	b.n	100152e0 <_fwalk_reent+0xc>
10015312:	0030      	movs	r0, r6
10015314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015318 <__swhatbuf_r>:
10015318:	b570      	push	{r4, r5, r6, lr}
1001531a:	000e      	movs	r6, r1
1001531c:	001d      	movs	r5, r3
1001531e:	230e      	movs	r3, #14
10015320:	5ec9      	ldrsh	r1, [r1, r3]
10015322:	b090      	sub	sp, #64	; 0x40
10015324:	0014      	movs	r4, r2
10015326:	2900      	cmp	r1, #0
10015328:	da06      	bge.n	10015338 <__swhatbuf_r+0x20>
1001532a:	2300      	movs	r3, #0
1001532c:	602b      	str	r3, [r5, #0]
1001532e:	89b3      	ldrh	r3, [r6, #12]
10015330:	061b      	lsls	r3, r3, #24
10015332:	d50f      	bpl.n	10015354 <__swhatbuf_r+0x3c>
10015334:	2340      	movs	r3, #64	; 0x40
10015336:	e00f      	b.n	10015358 <__swhatbuf_r+0x40>
10015338:	aa01      	add	r2, sp, #4
1001533a:	f000 fbcd 	bl	10015ad8 <_fstat_r>
1001533e:	2800      	cmp	r0, #0
10015340:	dbf3      	blt.n	1001532a <__swhatbuf_r+0x12>
10015342:	23f0      	movs	r3, #240	; 0xf0
10015344:	9a02      	ldr	r2, [sp, #8]
10015346:	021b      	lsls	r3, r3, #8
10015348:	4013      	ands	r3, r2
1001534a:	4a05      	ldr	r2, [pc, #20]	; (10015360 <__swhatbuf_r+0x48>)
1001534c:	189b      	adds	r3, r3, r2
1001534e:	425a      	negs	r2, r3
10015350:	4153      	adcs	r3, r2
10015352:	602b      	str	r3, [r5, #0]
10015354:	2380      	movs	r3, #128	; 0x80
10015356:	00db      	lsls	r3, r3, #3
10015358:	2000      	movs	r0, #0
1001535a:	6023      	str	r3, [r4, #0]
1001535c:	b010      	add	sp, #64	; 0x40
1001535e:	bd70      	pop	{r4, r5, r6, pc}
10015360:	ffffe000 	.word	0xffffe000

10015364 <__smakebuf_r>:
10015364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015366:	2602      	movs	r6, #2
10015368:	898b      	ldrh	r3, [r1, #12]
1001536a:	0005      	movs	r5, r0
1001536c:	000c      	movs	r4, r1
1001536e:	4233      	tst	r3, r6
10015370:	d110      	bne.n	10015394 <__smakebuf_r+0x30>
10015372:	ab01      	add	r3, sp, #4
10015374:	466a      	mov	r2, sp
10015376:	f7ff ffcf 	bl	10015318 <__swhatbuf_r>
1001537a:	9900      	ldr	r1, [sp, #0]
1001537c:	0007      	movs	r7, r0
1001537e:	0028      	movs	r0, r5
10015380:	f7ff fb7c 	bl	10014a7c <_malloc_r>
10015384:	2800      	cmp	r0, #0
10015386:	d10c      	bne.n	100153a2 <__smakebuf_r+0x3e>
10015388:	220c      	movs	r2, #12
1001538a:	5ea3      	ldrsh	r3, [r4, r2]
1001538c:	059a      	lsls	r2, r3, #22
1001538e:	d423      	bmi.n	100153d8 <__smakebuf_r+0x74>
10015390:	4333      	orrs	r3, r6
10015392:	81a3      	strh	r3, [r4, #12]
10015394:	0023      	movs	r3, r4
10015396:	3347      	adds	r3, #71	; 0x47
10015398:	6023      	str	r3, [r4, #0]
1001539a:	6123      	str	r3, [r4, #16]
1001539c:	2301      	movs	r3, #1
1001539e:	6163      	str	r3, [r4, #20]
100153a0:	e01a      	b.n	100153d8 <__smakebuf_r+0x74>
100153a2:	2280      	movs	r2, #128	; 0x80
100153a4:	4b0d      	ldr	r3, [pc, #52]	; (100153dc <__smakebuf_r+0x78>)
100153a6:	62ab      	str	r3, [r5, #40]	; 0x28
100153a8:	89a3      	ldrh	r3, [r4, #12]
100153aa:	6020      	str	r0, [r4, #0]
100153ac:	4313      	orrs	r3, r2
100153ae:	81a3      	strh	r3, [r4, #12]
100153b0:	9b00      	ldr	r3, [sp, #0]
100153b2:	6120      	str	r0, [r4, #16]
100153b4:	6163      	str	r3, [r4, #20]
100153b6:	9b01      	ldr	r3, [sp, #4]
100153b8:	2b00      	cmp	r3, #0
100153ba:	d00a      	beq.n	100153d2 <__smakebuf_r+0x6e>
100153bc:	230e      	movs	r3, #14
100153be:	5ee1      	ldrsh	r1, [r4, r3]
100153c0:	0028      	movs	r0, r5
100153c2:	f000 fb9b 	bl	10015afc <_isatty_r>
100153c6:	2800      	cmp	r0, #0
100153c8:	d003      	beq.n	100153d2 <__smakebuf_r+0x6e>
100153ca:	2201      	movs	r2, #1
100153cc:	89a3      	ldrh	r3, [r4, #12]
100153ce:	4313      	orrs	r3, r2
100153d0:	81a3      	strh	r3, [r4, #12]
100153d2:	89a3      	ldrh	r3, [r4, #12]
100153d4:	431f      	orrs	r7, r3
100153d6:	81a7      	strh	r7, [r4, #12]
100153d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100153da:	46c0      	nop			; (mov r8, r8)
100153dc:	1001516d 	.word	0x1001516d

100153e0 <__sfputc_r>:
100153e0:	6893      	ldr	r3, [r2, #8]
100153e2:	b510      	push	{r4, lr}
100153e4:	3b01      	subs	r3, #1
100153e6:	6093      	str	r3, [r2, #8]
100153e8:	2b00      	cmp	r3, #0
100153ea:	da05      	bge.n	100153f8 <__sfputc_r+0x18>
100153ec:	6994      	ldr	r4, [r2, #24]
100153ee:	42a3      	cmp	r3, r4
100153f0:	db08      	blt.n	10015404 <__sfputc_r+0x24>
100153f2:	b2cb      	uxtb	r3, r1
100153f4:	2b0a      	cmp	r3, #10
100153f6:	d005      	beq.n	10015404 <__sfputc_r+0x24>
100153f8:	6813      	ldr	r3, [r2, #0]
100153fa:	1c58      	adds	r0, r3, #1
100153fc:	6010      	str	r0, [r2, #0]
100153fe:	7019      	strb	r1, [r3, #0]
10015400:	b2c8      	uxtb	r0, r1
10015402:	e001      	b.n	10015408 <__sfputc_r+0x28>
10015404:	f7ff fd32 	bl	10014e6c <__swbuf_r>
10015408:	bd10      	pop	{r4, pc}

1001540a <__sfputs_r>:
1001540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001540c:	0006      	movs	r6, r0
1001540e:	000f      	movs	r7, r1
10015410:	0014      	movs	r4, r2
10015412:	18d5      	adds	r5, r2, r3
10015414:	42ac      	cmp	r4, r5
10015416:	d008      	beq.n	1001542a <__sfputs_r+0x20>
10015418:	7821      	ldrb	r1, [r4, #0]
1001541a:	003a      	movs	r2, r7
1001541c:	0030      	movs	r0, r6
1001541e:	f7ff ffdf 	bl	100153e0 <__sfputc_r>
10015422:	3401      	adds	r4, #1
10015424:	1c43      	adds	r3, r0, #1
10015426:	d1f5      	bne.n	10015414 <__sfputs_r+0xa>
10015428:	e000      	b.n	1001542c <__sfputs_r+0x22>
1001542a:	2000      	movs	r0, #0
1001542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015430 <_vfiprintf_r>:
10015430:	b5f0      	push	{r4, r5, r6, r7, lr}
10015432:	b09f      	sub	sp, #124	; 0x7c
10015434:	0006      	movs	r6, r0
10015436:	000f      	movs	r7, r1
10015438:	9202      	str	r2, [sp, #8]
1001543a:	9305      	str	r3, [sp, #20]
1001543c:	2800      	cmp	r0, #0
1001543e:	d004      	beq.n	1001544a <_vfiprintf_r+0x1a>
10015440:	6983      	ldr	r3, [r0, #24]
10015442:	2b00      	cmp	r3, #0
10015444:	d101      	bne.n	1001544a <_vfiprintf_r+0x1a>
10015446:	f7ff fed3 	bl	100151f0 <__sinit>
1001544a:	4b7f      	ldr	r3, [pc, #508]	; (10015648 <_vfiprintf_r+0x218>)
1001544c:	429f      	cmp	r7, r3
1001544e:	d101      	bne.n	10015454 <_vfiprintf_r+0x24>
10015450:	6877      	ldr	r7, [r6, #4]
10015452:	e008      	b.n	10015466 <_vfiprintf_r+0x36>
10015454:	4b7d      	ldr	r3, [pc, #500]	; (1001564c <_vfiprintf_r+0x21c>)
10015456:	429f      	cmp	r7, r3
10015458:	d101      	bne.n	1001545e <_vfiprintf_r+0x2e>
1001545a:	68b7      	ldr	r7, [r6, #8]
1001545c:	e003      	b.n	10015466 <_vfiprintf_r+0x36>
1001545e:	4b7c      	ldr	r3, [pc, #496]	; (10015650 <_vfiprintf_r+0x220>)
10015460:	429f      	cmp	r7, r3
10015462:	d100      	bne.n	10015466 <_vfiprintf_r+0x36>
10015464:	68f7      	ldr	r7, [r6, #12]
10015466:	89bb      	ldrh	r3, [r7, #12]
10015468:	071b      	lsls	r3, r3, #28
1001546a:	d50a      	bpl.n	10015482 <_vfiprintf_r+0x52>
1001546c:	693b      	ldr	r3, [r7, #16]
1001546e:	2b00      	cmp	r3, #0
10015470:	d007      	beq.n	10015482 <_vfiprintf_r+0x52>
10015472:	2300      	movs	r3, #0
10015474:	ad06      	add	r5, sp, #24
10015476:	616b      	str	r3, [r5, #20]
10015478:	3320      	adds	r3, #32
1001547a:	766b      	strb	r3, [r5, #25]
1001547c:	3310      	adds	r3, #16
1001547e:	76ab      	strb	r3, [r5, #26]
10015480:	e03d      	b.n	100154fe <_vfiprintf_r+0xce>
10015482:	0039      	movs	r1, r7
10015484:	0030      	movs	r0, r6
10015486:	f7ff fd49 	bl	10014f1c <__swsetup_r>
1001548a:	2800      	cmp	r0, #0
1001548c:	d0f1      	beq.n	10015472 <_vfiprintf_r+0x42>
1001548e:	2001      	movs	r0, #1
10015490:	4240      	negs	r0, r0
10015492:	e0d6      	b.n	10015642 <_vfiprintf_r+0x212>
10015494:	9a05      	ldr	r2, [sp, #20]
10015496:	1d11      	adds	r1, r2, #4
10015498:	6812      	ldr	r2, [r2, #0]
1001549a:	9105      	str	r1, [sp, #20]
1001549c:	2a00      	cmp	r2, #0
1001549e:	da00      	bge.n	100154a2 <_vfiprintf_r+0x72>
100154a0:	e07f      	b.n	100155a2 <_vfiprintf_r+0x172>
100154a2:	9209      	str	r2, [sp, #36]	; 0x24
100154a4:	3401      	adds	r4, #1
100154a6:	7823      	ldrb	r3, [r4, #0]
100154a8:	2b2e      	cmp	r3, #46	; 0x2e
100154aa:	d100      	bne.n	100154ae <_vfiprintf_r+0x7e>
100154ac:	e08d      	b.n	100155ca <_vfiprintf_r+0x19a>
100154ae:	7821      	ldrb	r1, [r4, #0]
100154b0:	2203      	movs	r2, #3
100154b2:	4868      	ldr	r0, [pc, #416]	; (10015654 <_vfiprintf_r+0x224>)
100154b4:	f000 fb48 	bl	10015b48 <memchr>
100154b8:	2800      	cmp	r0, #0
100154ba:	d007      	beq.n	100154cc <_vfiprintf_r+0x9c>
100154bc:	4b65      	ldr	r3, [pc, #404]	; (10015654 <_vfiprintf_r+0x224>)
100154be:	682a      	ldr	r2, [r5, #0]
100154c0:	1ac0      	subs	r0, r0, r3
100154c2:	2340      	movs	r3, #64	; 0x40
100154c4:	4083      	lsls	r3, r0
100154c6:	4313      	orrs	r3, r2
100154c8:	602b      	str	r3, [r5, #0]
100154ca:	3401      	adds	r4, #1
100154cc:	7821      	ldrb	r1, [r4, #0]
100154ce:	1c63      	adds	r3, r4, #1
100154d0:	2206      	movs	r2, #6
100154d2:	4861      	ldr	r0, [pc, #388]	; (10015658 <_vfiprintf_r+0x228>)
100154d4:	9302      	str	r3, [sp, #8]
100154d6:	7629      	strb	r1, [r5, #24]
100154d8:	f000 fb36 	bl	10015b48 <memchr>
100154dc:	2800      	cmp	r0, #0
100154de:	d100      	bne.n	100154e2 <_vfiprintf_r+0xb2>
100154e0:	e09d      	b.n	1001561e <_vfiprintf_r+0x1ee>
100154e2:	4b5e      	ldr	r3, [pc, #376]	; (1001565c <_vfiprintf_r+0x22c>)
100154e4:	2b00      	cmp	r3, #0
100154e6:	d000      	beq.n	100154ea <_vfiprintf_r+0xba>
100154e8:	e090      	b.n	1001560c <_vfiprintf_r+0x1dc>
100154ea:	2207      	movs	r2, #7
100154ec:	9b05      	ldr	r3, [sp, #20]
100154ee:	3307      	adds	r3, #7
100154f0:	4393      	bics	r3, r2
100154f2:	3308      	adds	r3, #8
100154f4:	9305      	str	r3, [sp, #20]
100154f6:	696b      	ldr	r3, [r5, #20]
100154f8:	9a03      	ldr	r2, [sp, #12]
100154fa:	189b      	adds	r3, r3, r2
100154fc:	616b      	str	r3, [r5, #20]
100154fe:	9c02      	ldr	r4, [sp, #8]
10015500:	7823      	ldrb	r3, [r4, #0]
10015502:	2b00      	cmp	r3, #0
10015504:	d104      	bne.n	10015510 <_vfiprintf_r+0xe0>
10015506:	9b02      	ldr	r3, [sp, #8]
10015508:	1ae3      	subs	r3, r4, r3
1001550a:	9304      	str	r3, [sp, #16]
1001550c:	d012      	beq.n	10015534 <_vfiprintf_r+0x104>
1001550e:	e003      	b.n	10015518 <_vfiprintf_r+0xe8>
10015510:	2b25      	cmp	r3, #37	; 0x25
10015512:	d0f8      	beq.n	10015506 <_vfiprintf_r+0xd6>
10015514:	3401      	adds	r4, #1
10015516:	e7f3      	b.n	10015500 <_vfiprintf_r+0xd0>
10015518:	9b04      	ldr	r3, [sp, #16]
1001551a:	9a02      	ldr	r2, [sp, #8]
1001551c:	0039      	movs	r1, r7
1001551e:	0030      	movs	r0, r6
10015520:	f7ff ff73 	bl	1001540a <__sfputs_r>
10015524:	1c43      	adds	r3, r0, #1
10015526:	d100      	bne.n	1001552a <_vfiprintf_r+0xfa>
10015528:	e086      	b.n	10015638 <_vfiprintf_r+0x208>
1001552a:	696a      	ldr	r2, [r5, #20]
1001552c:	9b04      	ldr	r3, [sp, #16]
1001552e:	4694      	mov	ip, r2
10015530:	4463      	add	r3, ip
10015532:	616b      	str	r3, [r5, #20]
10015534:	7823      	ldrb	r3, [r4, #0]
10015536:	2b00      	cmp	r3, #0
10015538:	d07e      	beq.n	10015638 <_vfiprintf_r+0x208>
1001553a:	2201      	movs	r2, #1
1001553c:	2300      	movs	r3, #0
1001553e:	4252      	negs	r2, r2
10015540:	606a      	str	r2, [r5, #4]
10015542:	a902      	add	r1, sp, #8
10015544:	3254      	adds	r2, #84	; 0x54
10015546:	1852      	adds	r2, r2, r1
10015548:	3401      	adds	r4, #1
1001554a:	602b      	str	r3, [r5, #0]
1001554c:	60eb      	str	r3, [r5, #12]
1001554e:	60ab      	str	r3, [r5, #8]
10015550:	7013      	strb	r3, [r2, #0]
10015552:	65ab      	str	r3, [r5, #88]	; 0x58
10015554:	7821      	ldrb	r1, [r4, #0]
10015556:	2205      	movs	r2, #5
10015558:	4841      	ldr	r0, [pc, #260]	; (10015660 <_vfiprintf_r+0x230>)
1001555a:	f000 faf5 	bl	10015b48 <memchr>
1001555e:	2800      	cmp	r0, #0
10015560:	d008      	beq.n	10015574 <_vfiprintf_r+0x144>
10015562:	4b3f      	ldr	r3, [pc, #252]	; (10015660 <_vfiprintf_r+0x230>)
10015564:	682a      	ldr	r2, [r5, #0]
10015566:	1ac0      	subs	r0, r0, r3
10015568:	2301      	movs	r3, #1
1001556a:	4083      	lsls	r3, r0
1001556c:	4313      	orrs	r3, r2
1001556e:	602b      	str	r3, [r5, #0]
10015570:	3401      	adds	r4, #1
10015572:	e7ef      	b.n	10015554 <_vfiprintf_r+0x124>
10015574:	682b      	ldr	r3, [r5, #0]
10015576:	06da      	lsls	r2, r3, #27
10015578:	d504      	bpl.n	10015584 <_vfiprintf_r+0x154>
1001557a:	2253      	movs	r2, #83	; 0x53
1001557c:	2120      	movs	r1, #32
1001557e:	a802      	add	r0, sp, #8
10015580:	1812      	adds	r2, r2, r0
10015582:	7011      	strb	r1, [r2, #0]
10015584:	071a      	lsls	r2, r3, #28
10015586:	d504      	bpl.n	10015592 <_vfiprintf_r+0x162>
10015588:	2253      	movs	r2, #83	; 0x53
1001558a:	212b      	movs	r1, #43	; 0x2b
1001558c:	a802      	add	r0, sp, #8
1001558e:	1812      	adds	r2, r2, r0
10015590:	7011      	strb	r1, [r2, #0]
10015592:	7822      	ldrb	r2, [r4, #0]
10015594:	2a2a      	cmp	r2, #42	; 0x2a
10015596:	d100      	bne.n	1001559a <_vfiprintf_r+0x16a>
10015598:	e77c      	b.n	10015494 <_vfiprintf_r+0x64>
1001559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001559c:	2000      	movs	r0, #0
1001559e:	210a      	movs	r1, #10
100155a0:	e005      	b.n	100155ae <_vfiprintf_r+0x17e>
100155a2:	4252      	negs	r2, r2
100155a4:	60ea      	str	r2, [r5, #12]
100155a6:	2202      	movs	r2, #2
100155a8:	4313      	orrs	r3, r2
100155aa:	602b      	str	r3, [r5, #0]
100155ac:	e77a      	b.n	100154a4 <_vfiprintf_r+0x74>
100155ae:	7822      	ldrb	r2, [r4, #0]
100155b0:	3a30      	subs	r2, #48	; 0x30
100155b2:	2a09      	cmp	r2, #9
100155b4:	d804      	bhi.n	100155c0 <_vfiprintf_r+0x190>
100155b6:	434b      	muls	r3, r1
100155b8:	3401      	adds	r4, #1
100155ba:	189b      	adds	r3, r3, r2
100155bc:	2001      	movs	r0, #1
100155be:	e7f6      	b.n	100155ae <_vfiprintf_r+0x17e>
100155c0:	2800      	cmp	r0, #0
100155c2:	d100      	bne.n	100155c6 <_vfiprintf_r+0x196>
100155c4:	e76f      	b.n	100154a6 <_vfiprintf_r+0x76>
100155c6:	9309      	str	r3, [sp, #36]	; 0x24
100155c8:	e76d      	b.n	100154a6 <_vfiprintf_r+0x76>
100155ca:	7863      	ldrb	r3, [r4, #1]
100155cc:	2b2a      	cmp	r3, #42	; 0x2a
100155ce:	d10a      	bne.n	100155e6 <_vfiprintf_r+0x1b6>
100155d0:	9b05      	ldr	r3, [sp, #20]
100155d2:	3402      	adds	r4, #2
100155d4:	1d1a      	adds	r2, r3, #4
100155d6:	681b      	ldr	r3, [r3, #0]
100155d8:	9205      	str	r2, [sp, #20]
100155da:	2b00      	cmp	r3, #0
100155dc:	da01      	bge.n	100155e2 <_vfiprintf_r+0x1b2>
100155de:	2301      	movs	r3, #1
100155e0:	425b      	negs	r3, r3
100155e2:	9307      	str	r3, [sp, #28]
100155e4:	e763      	b.n	100154ae <_vfiprintf_r+0x7e>
100155e6:	2300      	movs	r3, #0
100155e8:	200a      	movs	r0, #10
100155ea:	001a      	movs	r2, r3
100155ec:	3401      	adds	r4, #1
100155ee:	606b      	str	r3, [r5, #4]
100155f0:	7821      	ldrb	r1, [r4, #0]
100155f2:	3930      	subs	r1, #48	; 0x30
100155f4:	2909      	cmp	r1, #9
100155f6:	d804      	bhi.n	10015602 <_vfiprintf_r+0x1d2>
100155f8:	4342      	muls	r2, r0
100155fa:	3401      	adds	r4, #1
100155fc:	1852      	adds	r2, r2, r1
100155fe:	2301      	movs	r3, #1
10015600:	e7f6      	b.n	100155f0 <_vfiprintf_r+0x1c0>
10015602:	2b00      	cmp	r3, #0
10015604:	d100      	bne.n	10015608 <_vfiprintf_r+0x1d8>
10015606:	e752      	b.n	100154ae <_vfiprintf_r+0x7e>
10015608:	9207      	str	r2, [sp, #28]
1001560a:	e750      	b.n	100154ae <_vfiprintf_r+0x7e>
1001560c:	ab05      	add	r3, sp, #20
1001560e:	9300      	str	r3, [sp, #0]
10015610:	003a      	movs	r2, r7
10015612:	4b14      	ldr	r3, [pc, #80]	; (10015664 <_vfiprintf_r+0x234>)
10015614:	0029      	movs	r1, r5
10015616:	0030      	movs	r0, r6
10015618:	e000      	b.n	1001561c <_vfiprintf_r+0x1ec>
1001561a:	bf00      	nop
1001561c:	e007      	b.n	1001562e <_vfiprintf_r+0x1fe>
1001561e:	ab05      	add	r3, sp, #20
10015620:	9300      	str	r3, [sp, #0]
10015622:	003a      	movs	r2, r7
10015624:	4b0f      	ldr	r3, [pc, #60]	; (10015664 <_vfiprintf_r+0x234>)
10015626:	0029      	movs	r1, r5
10015628:	0030      	movs	r0, r6
1001562a:	f000 f88b 	bl	10015744 <_printf_i>
1001562e:	9003      	str	r0, [sp, #12]
10015630:	9b03      	ldr	r3, [sp, #12]
10015632:	3301      	adds	r3, #1
10015634:	d000      	beq.n	10015638 <_vfiprintf_r+0x208>
10015636:	e75e      	b.n	100154f6 <_vfiprintf_r+0xc6>
10015638:	89bb      	ldrh	r3, [r7, #12]
1001563a:	065b      	lsls	r3, r3, #25
1001563c:	d500      	bpl.n	10015640 <_vfiprintf_r+0x210>
1001563e:	e726      	b.n	1001548e <_vfiprintf_r+0x5e>
10015640:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015642:	b01f      	add	sp, #124	; 0x7c
10015644:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015646:	46c0      	nop			; (mov r8, r8)
10015648:	10017bfc 	.word	0x10017bfc
1001564c:	10017c1c 	.word	0x10017c1c
10015650:	10017c3c 	.word	0x10017c3c
10015654:	10017c62 	.word	0x10017c62
10015658:	10017c66 	.word	0x10017c66
1001565c:	00000000 	.word	0x00000000
10015660:	10017c5c 	.word	0x10017c5c
10015664:	1001540b 	.word	0x1001540b

10015668 <_printf_common>:
10015668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001566a:	0017      	movs	r7, r2
1001566c:	9301      	str	r3, [sp, #4]
1001566e:	688a      	ldr	r2, [r1, #8]
10015670:	690b      	ldr	r3, [r1, #16]
10015672:	9000      	str	r0, [sp, #0]
10015674:	000c      	movs	r4, r1
10015676:	4293      	cmp	r3, r2
10015678:	da00      	bge.n	1001567c <_printf_common+0x14>
1001567a:	0013      	movs	r3, r2
1001567c:	0022      	movs	r2, r4
1001567e:	603b      	str	r3, [r7, #0]
10015680:	3243      	adds	r2, #67	; 0x43
10015682:	7812      	ldrb	r2, [r2, #0]
10015684:	2a00      	cmp	r2, #0
10015686:	d001      	beq.n	1001568c <_printf_common+0x24>
10015688:	3301      	adds	r3, #1
1001568a:	603b      	str	r3, [r7, #0]
1001568c:	6823      	ldr	r3, [r4, #0]
1001568e:	069b      	lsls	r3, r3, #26
10015690:	d502      	bpl.n	10015698 <_printf_common+0x30>
10015692:	683b      	ldr	r3, [r7, #0]
10015694:	3302      	adds	r3, #2
10015696:	603b      	str	r3, [r7, #0]
10015698:	2506      	movs	r5, #6
1001569a:	6823      	ldr	r3, [r4, #0]
1001569c:	401d      	ands	r5, r3
1001569e:	d01e      	beq.n	100156de <_printf_common+0x76>
100156a0:	0023      	movs	r3, r4
100156a2:	3343      	adds	r3, #67	; 0x43
100156a4:	781b      	ldrb	r3, [r3, #0]
100156a6:	1e5a      	subs	r2, r3, #1
100156a8:	4193      	sbcs	r3, r2
100156aa:	6822      	ldr	r2, [r4, #0]
100156ac:	0692      	lsls	r2, r2, #26
100156ae:	d51c      	bpl.n	100156ea <_printf_common+0x82>
100156b0:	2030      	movs	r0, #48	; 0x30
100156b2:	18e1      	adds	r1, r4, r3
100156b4:	3143      	adds	r1, #67	; 0x43
100156b6:	7008      	strb	r0, [r1, #0]
100156b8:	0021      	movs	r1, r4
100156ba:	1c5a      	adds	r2, r3, #1
100156bc:	3145      	adds	r1, #69	; 0x45
100156be:	7809      	ldrb	r1, [r1, #0]
100156c0:	18a2      	adds	r2, r4, r2
100156c2:	3243      	adds	r2, #67	; 0x43
100156c4:	3302      	adds	r3, #2
100156c6:	7011      	strb	r1, [r2, #0]
100156c8:	e00f      	b.n	100156ea <_printf_common+0x82>
100156ca:	0022      	movs	r2, r4
100156cc:	2301      	movs	r3, #1
100156ce:	3219      	adds	r2, #25
100156d0:	9901      	ldr	r1, [sp, #4]
100156d2:	9800      	ldr	r0, [sp, #0]
100156d4:	9e08      	ldr	r6, [sp, #32]
100156d6:	47b0      	blx	r6
100156d8:	1c43      	adds	r3, r0, #1
100156da:	d00e      	beq.n	100156fa <_printf_common+0x92>
100156dc:	3501      	adds	r5, #1
100156de:	68e3      	ldr	r3, [r4, #12]
100156e0:	683a      	ldr	r2, [r7, #0]
100156e2:	1a9b      	subs	r3, r3, r2
100156e4:	429d      	cmp	r5, r3
100156e6:	dbf0      	blt.n	100156ca <_printf_common+0x62>
100156e8:	e7da      	b.n	100156a0 <_printf_common+0x38>
100156ea:	0022      	movs	r2, r4
100156ec:	9901      	ldr	r1, [sp, #4]
100156ee:	3243      	adds	r2, #67	; 0x43
100156f0:	9800      	ldr	r0, [sp, #0]
100156f2:	9d08      	ldr	r5, [sp, #32]
100156f4:	47a8      	blx	r5
100156f6:	1c43      	adds	r3, r0, #1
100156f8:	d102      	bne.n	10015700 <_printf_common+0x98>
100156fa:	2001      	movs	r0, #1
100156fc:	4240      	negs	r0, r0
100156fe:	e020      	b.n	10015742 <_printf_common+0xda>
10015700:	2306      	movs	r3, #6
10015702:	6820      	ldr	r0, [r4, #0]
10015704:	68e1      	ldr	r1, [r4, #12]
10015706:	683a      	ldr	r2, [r7, #0]
10015708:	4003      	ands	r3, r0
1001570a:	2500      	movs	r5, #0
1001570c:	2b04      	cmp	r3, #4
1001570e:	d103      	bne.n	10015718 <_printf_common+0xb0>
10015710:	1a8d      	subs	r5, r1, r2
10015712:	43eb      	mvns	r3, r5
10015714:	17db      	asrs	r3, r3, #31
10015716:	401d      	ands	r5, r3
10015718:	68a3      	ldr	r3, [r4, #8]
1001571a:	6922      	ldr	r2, [r4, #16]
1001571c:	4293      	cmp	r3, r2
1001571e:	dd01      	ble.n	10015724 <_printf_common+0xbc>
10015720:	1a9b      	subs	r3, r3, r2
10015722:	18ed      	adds	r5, r5, r3
10015724:	2700      	movs	r7, #0
10015726:	42bd      	cmp	r5, r7
10015728:	d00a      	beq.n	10015740 <_printf_common+0xd8>
1001572a:	0022      	movs	r2, r4
1001572c:	2301      	movs	r3, #1
1001572e:	321a      	adds	r2, #26
10015730:	9901      	ldr	r1, [sp, #4]
10015732:	9800      	ldr	r0, [sp, #0]
10015734:	9e08      	ldr	r6, [sp, #32]
10015736:	47b0      	blx	r6
10015738:	1c43      	adds	r3, r0, #1
1001573a:	d0de      	beq.n	100156fa <_printf_common+0x92>
1001573c:	3701      	adds	r7, #1
1001573e:	e7f2      	b.n	10015726 <_printf_common+0xbe>
10015740:	2000      	movs	r0, #0
10015742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015744 <_printf_i>:
10015744:	b5f0      	push	{r4, r5, r6, r7, lr}
10015746:	b08b      	sub	sp, #44	; 0x2c
10015748:	9206      	str	r2, [sp, #24]
1001574a:	000a      	movs	r2, r1
1001574c:	3243      	adds	r2, #67	; 0x43
1001574e:	9307      	str	r3, [sp, #28]
10015750:	9005      	str	r0, [sp, #20]
10015752:	9204      	str	r2, [sp, #16]
10015754:	7e0a      	ldrb	r2, [r1, #24]
10015756:	000c      	movs	r4, r1
10015758:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001575a:	2a6e      	cmp	r2, #110	; 0x6e
1001575c:	d100      	bne.n	10015760 <_printf_i+0x1c>
1001575e:	e0ab      	b.n	100158b8 <_printf_i+0x174>
10015760:	d811      	bhi.n	10015786 <_printf_i+0x42>
10015762:	2a63      	cmp	r2, #99	; 0x63
10015764:	d022      	beq.n	100157ac <_printf_i+0x68>
10015766:	d809      	bhi.n	1001577c <_printf_i+0x38>
10015768:	2a00      	cmp	r2, #0
1001576a:	d100      	bne.n	1001576e <_printf_i+0x2a>
1001576c:	e0b5      	b.n	100158da <_printf_i+0x196>
1001576e:	2a58      	cmp	r2, #88	; 0x58
10015770:	d000      	beq.n	10015774 <_printf_i+0x30>
10015772:	e0c5      	b.n	10015900 <_printf_i+0x1bc>
10015774:	3145      	adds	r1, #69	; 0x45
10015776:	700a      	strb	r2, [r1, #0]
10015778:	4a81      	ldr	r2, [pc, #516]	; (10015980 <_printf_i+0x23c>)
1001577a:	e04f      	b.n	1001581c <_printf_i+0xd8>
1001577c:	2a64      	cmp	r2, #100	; 0x64
1001577e:	d01d      	beq.n	100157bc <_printf_i+0x78>
10015780:	2a69      	cmp	r2, #105	; 0x69
10015782:	d01b      	beq.n	100157bc <_printf_i+0x78>
10015784:	e0bc      	b.n	10015900 <_printf_i+0x1bc>
10015786:	2a73      	cmp	r2, #115	; 0x73
10015788:	d100      	bne.n	1001578c <_printf_i+0x48>
1001578a:	e0aa      	b.n	100158e2 <_printf_i+0x19e>
1001578c:	d809      	bhi.n	100157a2 <_printf_i+0x5e>
1001578e:	2a6f      	cmp	r2, #111	; 0x6f
10015790:	d029      	beq.n	100157e6 <_printf_i+0xa2>
10015792:	2a70      	cmp	r2, #112	; 0x70
10015794:	d000      	beq.n	10015798 <_printf_i+0x54>
10015796:	e0b3      	b.n	10015900 <_printf_i+0x1bc>
10015798:	2220      	movs	r2, #32
1001579a:	6809      	ldr	r1, [r1, #0]
1001579c:	430a      	orrs	r2, r1
1001579e:	6022      	str	r2, [r4, #0]
100157a0:	e037      	b.n	10015812 <_printf_i+0xce>
100157a2:	2a75      	cmp	r2, #117	; 0x75
100157a4:	d01f      	beq.n	100157e6 <_printf_i+0xa2>
100157a6:	2a78      	cmp	r2, #120	; 0x78
100157a8:	d033      	beq.n	10015812 <_printf_i+0xce>
100157aa:	e0a9      	b.n	10015900 <_printf_i+0x1bc>
100157ac:	000e      	movs	r6, r1
100157ae:	681a      	ldr	r2, [r3, #0]
100157b0:	3642      	adds	r6, #66	; 0x42
100157b2:	1d11      	adds	r1, r2, #4
100157b4:	6019      	str	r1, [r3, #0]
100157b6:	6813      	ldr	r3, [r2, #0]
100157b8:	7033      	strb	r3, [r6, #0]
100157ba:	e0a4      	b.n	10015906 <_printf_i+0x1c2>
100157bc:	6821      	ldr	r1, [r4, #0]
100157be:	681a      	ldr	r2, [r3, #0]
100157c0:	0608      	lsls	r0, r1, #24
100157c2:	d406      	bmi.n	100157d2 <_printf_i+0x8e>
100157c4:	0649      	lsls	r1, r1, #25
100157c6:	d504      	bpl.n	100157d2 <_printf_i+0x8e>
100157c8:	1d11      	adds	r1, r2, #4
100157ca:	6019      	str	r1, [r3, #0]
100157cc:	2300      	movs	r3, #0
100157ce:	5ed5      	ldrsh	r5, [r2, r3]
100157d0:	e002      	b.n	100157d8 <_printf_i+0x94>
100157d2:	1d11      	adds	r1, r2, #4
100157d4:	6019      	str	r1, [r3, #0]
100157d6:	6815      	ldr	r5, [r2, #0]
100157d8:	2d00      	cmp	r5, #0
100157da:	da3b      	bge.n	10015854 <_printf_i+0x110>
100157dc:	232d      	movs	r3, #45	; 0x2d
100157de:	9a04      	ldr	r2, [sp, #16]
100157e0:	426d      	negs	r5, r5
100157e2:	7013      	strb	r3, [r2, #0]
100157e4:	e036      	b.n	10015854 <_printf_i+0x110>
100157e6:	6821      	ldr	r1, [r4, #0]
100157e8:	681a      	ldr	r2, [r3, #0]
100157ea:	0608      	lsls	r0, r1, #24
100157ec:	d406      	bmi.n	100157fc <_printf_i+0xb8>
100157ee:	0649      	lsls	r1, r1, #25
100157f0:	d504      	bpl.n	100157fc <_printf_i+0xb8>
100157f2:	6815      	ldr	r5, [r2, #0]
100157f4:	1d11      	adds	r1, r2, #4
100157f6:	6019      	str	r1, [r3, #0]
100157f8:	b2ad      	uxth	r5, r5
100157fa:	e002      	b.n	10015802 <_printf_i+0xbe>
100157fc:	1d11      	adds	r1, r2, #4
100157fe:	6019      	str	r1, [r3, #0]
10015800:	6815      	ldr	r5, [r2, #0]
10015802:	4b5f      	ldr	r3, [pc, #380]	; (10015980 <_printf_i+0x23c>)
10015804:	7e22      	ldrb	r2, [r4, #24]
10015806:	9303      	str	r3, [sp, #12]
10015808:	2708      	movs	r7, #8
1001580a:	2a6f      	cmp	r2, #111	; 0x6f
1001580c:	d01d      	beq.n	1001584a <_printf_i+0x106>
1001580e:	270a      	movs	r7, #10
10015810:	e01b      	b.n	1001584a <_printf_i+0x106>
10015812:	0022      	movs	r2, r4
10015814:	2178      	movs	r1, #120	; 0x78
10015816:	3245      	adds	r2, #69	; 0x45
10015818:	7011      	strb	r1, [r2, #0]
1001581a:	4a5a      	ldr	r2, [pc, #360]	; (10015984 <_printf_i+0x240>)
1001581c:	6819      	ldr	r1, [r3, #0]
1001581e:	9203      	str	r2, [sp, #12]
10015820:	1d08      	adds	r0, r1, #4
10015822:	6822      	ldr	r2, [r4, #0]
10015824:	6018      	str	r0, [r3, #0]
10015826:	680d      	ldr	r5, [r1, #0]
10015828:	0610      	lsls	r0, r2, #24
1001582a:	d402      	bmi.n	10015832 <_printf_i+0xee>
1001582c:	0650      	lsls	r0, r2, #25
1001582e:	d500      	bpl.n	10015832 <_printf_i+0xee>
10015830:	b2ad      	uxth	r5, r5
10015832:	07d3      	lsls	r3, r2, #31
10015834:	d502      	bpl.n	1001583c <_printf_i+0xf8>
10015836:	2320      	movs	r3, #32
10015838:	431a      	orrs	r2, r3
1001583a:	6022      	str	r2, [r4, #0]
1001583c:	2710      	movs	r7, #16
1001583e:	2d00      	cmp	r5, #0
10015840:	d103      	bne.n	1001584a <_printf_i+0x106>
10015842:	2320      	movs	r3, #32
10015844:	6822      	ldr	r2, [r4, #0]
10015846:	439a      	bics	r2, r3
10015848:	6022      	str	r2, [r4, #0]
1001584a:	0023      	movs	r3, r4
1001584c:	2200      	movs	r2, #0
1001584e:	3343      	adds	r3, #67	; 0x43
10015850:	701a      	strb	r2, [r3, #0]
10015852:	e002      	b.n	1001585a <_printf_i+0x116>
10015854:	270a      	movs	r7, #10
10015856:	4b4a      	ldr	r3, [pc, #296]	; (10015980 <_printf_i+0x23c>)
10015858:	9303      	str	r3, [sp, #12]
1001585a:	6863      	ldr	r3, [r4, #4]
1001585c:	60a3      	str	r3, [r4, #8]
1001585e:	2b00      	cmp	r3, #0
10015860:	db09      	blt.n	10015876 <_printf_i+0x132>
10015862:	2204      	movs	r2, #4
10015864:	6821      	ldr	r1, [r4, #0]
10015866:	4391      	bics	r1, r2
10015868:	6021      	str	r1, [r4, #0]
1001586a:	2d00      	cmp	r5, #0
1001586c:	d105      	bne.n	1001587a <_printf_i+0x136>
1001586e:	9e04      	ldr	r6, [sp, #16]
10015870:	2b00      	cmp	r3, #0
10015872:	d011      	beq.n	10015898 <_printf_i+0x154>
10015874:	e07b      	b.n	1001596e <_printf_i+0x22a>
10015876:	2d00      	cmp	r5, #0
10015878:	d079      	beq.n	1001596e <_printf_i+0x22a>
1001587a:	9e04      	ldr	r6, [sp, #16]
1001587c:	0028      	movs	r0, r5
1001587e:	0039      	movs	r1, r7
10015880:	f7fd fa70 	bl	10012d64 <__aeabi_uidivmod>
10015884:	9b03      	ldr	r3, [sp, #12]
10015886:	3e01      	subs	r6, #1
10015888:	5c5b      	ldrb	r3, [r3, r1]
1001588a:	0028      	movs	r0, r5
1001588c:	7033      	strb	r3, [r6, #0]
1001588e:	0039      	movs	r1, r7
10015890:	f7fd f9e2 	bl	10012c58 <__aeabi_uidiv>
10015894:	1e05      	subs	r5, r0, #0
10015896:	d1f1      	bne.n	1001587c <_printf_i+0x138>
10015898:	2f08      	cmp	r7, #8
1001589a:	d109      	bne.n	100158b0 <_printf_i+0x16c>
1001589c:	6823      	ldr	r3, [r4, #0]
1001589e:	07db      	lsls	r3, r3, #31
100158a0:	d506      	bpl.n	100158b0 <_printf_i+0x16c>
100158a2:	6863      	ldr	r3, [r4, #4]
100158a4:	6922      	ldr	r2, [r4, #16]
100158a6:	4293      	cmp	r3, r2
100158a8:	dc02      	bgt.n	100158b0 <_printf_i+0x16c>
100158aa:	2330      	movs	r3, #48	; 0x30
100158ac:	3e01      	subs	r6, #1
100158ae:	7033      	strb	r3, [r6, #0]
100158b0:	9b04      	ldr	r3, [sp, #16]
100158b2:	1b9b      	subs	r3, r3, r6
100158b4:	6123      	str	r3, [r4, #16]
100158b6:	e02b      	b.n	10015910 <_printf_i+0x1cc>
100158b8:	6809      	ldr	r1, [r1, #0]
100158ba:	681a      	ldr	r2, [r3, #0]
100158bc:	0608      	lsls	r0, r1, #24
100158be:	d407      	bmi.n	100158d0 <_printf_i+0x18c>
100158c0:	0649      	lsls	r1, r1, #25
100158c2:	d505      	bpl.n	100158d0 <_printf_i+0x18c>
100158c4:	1d11      	adds	r1, r2, #4
100158c6:	6019      	str	r1, [r3, #0]
100158c8:	6813      	ldr	r3, [r2, #0]
100158ca:	8aa2      	ldrh	r2, [r4, #20]
100158cc:	801a      	strh	r2, [r3, #0]
100158ce:	e004      	b.n	100158da <_printf_i+0x196>
100158d0:	1d11      	adds	r1, r2, #4
100158d2:	6019      	str	r1, [r3, #0]
100158d4:	6813      	ldr	r3, [r2, #0]
100158d6:	6962      	ldr	r2, [r4, #20]
100158d8:	601a      	str	r2, [r3, #0]
100158da:	2300      	movs	r3, #0
100158dc:	9e04      	ldr	r6, [sp, #16]
100158de:	6123      	str	r3, [r4, #16]
100158e0:	e016      	b.n	10015910 <_printf_i+0x1cc>
100158e2:	681a      	ldr	r2, [r3, #0]
100158e4:	1d11      	adds	r1, r2, #4
100158e6:	6019      	str	r1, [r3, #0]
100158e8:	6816      	ldr	r6, [r2, #0]
100158ea:	2100      	movs	r1, #0
100158ec:	6862      	ldr	r2, [r4, #4]
100158ee:	0030      	movs	r0, r6
100158f0:	f000 f92a 	bl	10015b48 <memchr>
100158f4:	2800      	cmp	r0, #0
100158f6:	d001      	beq.n	100158fc <_printf_i+0x1b8>
100158f8:	1b80      	subs	r0, r0, r6
100158fa:	6060      	str	r0, [r4, #4]
100158fc:	6863      	ldr	r3, [r4, #4]
100158fe:	e003      	b.n	10015908 <_printf_i+0x1c4>
10015900:	0026      	movs	r6, r4
10015902:	3642      	adds	r6, #66	; 0x42
10015904:	7032      	strb	r2, [r6, #0]
10015906:	2301      	movs	r3, #1
10015908:	6123      	str	r3, [r4, #16]
1001590a:	2300      	movs	r3, #0
1001590c:	9a04      	ldr	r2, [sp, #16]
1001590e:	7013      	strb	r3, [r2, #0]
10015910:	9b07      	ldr	r3, [sp, #28]
10015912:	aa09      	add	r2, sp, #36	; 0x24
10015914:	9300      	str	r3, [sp, #0]
10015916:	0021      	movs	r1, r4
10015918:	9b06      	ldr	r3, [sp, #24]
1001591a:	9805      	ldr	r0, [sp, #20]
1001591c:	f7ff fea4 	bl	10015668 <_printf_common>
10015920:	1c43      	adds	r3, r0, #1
10015922:	d102      	bne.n	1001592a <_printf_i+0x1e6>
10015924:	2001      	movs	r0, #1
10015926:	4240      	negs	r0, r0
10015928:	e027      	b.n	1001597a <_printf_i+0x236>
1001592a:	6923      	ldr	r3, [r4, #16]
1001592c:	0032      	movs	r2, r6
1001592e:	9906      	ldr	r1, [sp, #24]
10015930:	9805      	ldr	r0, [sp, #20]
10015932:	9d07      	ldr	r5, [sp, #28]
10015934:	47a8      	blx	r5
10015936:	1c43      	adds	r3, r0, #1
10015938:	d0f4      	beq.n	10015924 <_printf_i+0x1e0>
1001593a:	6823      	ldr	r3, [r4, #0]
1001593c:	2500      	movs	r5, #0
1001593e:	079b      	lsls	r3, r3, #30
10015940:	d40f      	bmi.n	10015962 <_printf_i+0x21e>
10015942:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015944:	68e0      	ldr	r0, [r4, #12]
10015946:	4298      	cmp	r0, r3
10015948:	da17      	bge.n	1001597a <_printf_i+0x236>
1001594a:	0018      	movs	r0, r3
1001594c:	e015      	b.n	1001597a <_printf_i+0x236>
1001594e:	0022      	movs	r2, r4
10015950:	2301      	movs	r3, #1
10015952:	3219      	adds	r2, #25
10015954:	9906      	ldr	r1, [sp, #24]
10015956:	9805      	ldr	r0, [sp, #20]
10015958:	9e07      	ldr	r6, [sp, #28]
1001595a:	47b0      	blx	r6
1001595c:	1c43      	adds	r3, r0, #1
1001595e:	d0e1      	beq.n	10015924 <_printf_i+0x1e0>
10015960:	3501      	adds	r5, #1
10015962:	68e3      	ldr	r3, [r4, #12]
10015964:	9a09      	ldr	r2, [sp, #36]	; 0x24
10015966:	1a9b      	subs	r3, r3, r2
10015968:	429d      	cmp	r5, r3
1001596a:	dbf0      	blt.n	1001594e <_printf_i+0x20a>
1001596c:	e7e9      	b.n	10015942 <_printf_i+0x1fe>
1001596e:	0026      	movs	r6, r4
10015970:	9b03      	ldr	r3, [sp, #12]
10015972:	3642      	adds	r6, #66	; 0x42
10015974:	781b      	ldrb	r3, [r3, #0]
10015976:	7033      	strb	r3, [r6, #0]
10015978:	e78e      	b.n	10015898 <_printf_i+0x154>
1001597a:	b00b      	add	sp, #44	; 0x2c
1001597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001597e:	46c0      	nop			; (mov r8, r8)
10015980:	10017c6d 	.word	0x10017c6d
10015984:	10017c7e 	.word	0x10017c7e

10015988 <_putc_r>:
10015988:	b570      	push	{r4, r5, r6, lr}
1001598a:	0006      	movs	r6, r0
1001598c:	000d      	movs	r5, r1
1001598e:	0014      	movs	r4, r2
10015990:	2800      	cmp	r0, #0
10015992:	d004      	beq.n	1001599e <_putc_r+0x16>
10015994:	6983      	ldr	r3, [r0, #24]
10015996:	2b00      	cmp	r3, #0
10015998:	d101      	bne.n	1001599e <_putc_r+0x16>
1001599a:	f7ff fc29 	bl	100151f0 <__sinit>
1001599e:	4b12      	ldr	r3, [pc, #72]	; (100159e8 <_putc_r+0x60>)
100159a0:	429c      	cmp	r4, r3
100159a2:	d101      	bne.n	100159a8 <_putc_r+0x20>
100159a4:	6874      	ldr	r4, [r6, #4]
100159a6:	e008      	b.n	100159ba <_putc_r+0x32>
100159a8:	4b10      	ldr	r3, [pc, #64]	; (100159ec <_putc_r+0x64>)
100159aa:	429c      	cmp	r4, r3
100159ac:	d101      	bne.n	100159b2 <_putc_r+0x2a>
100159ae:	68b4      	ldr	r4, [r6, #8]
100159b0:	e003      	b.n	100159ba <_putc_r+0x32>
100159b2:	4b0f      	ldr	r3, [pc, #60]	; (100159f0 <_putc_r+0x68>)
100159b4:	429c      	cmp	r4, r3
100159b6:	d100      	bne.n	100159ba <_putc_r+0x32>
100159b8:	68f4      	ldr	r4, [r6, #12]
100159ba:	68a3      	ldr	r3, [r4, #8]
100159bc:	3b01      	subs	r3, #1
100159be:	60a3      	str	r3, [r4, #8]
100159c0:	2b00      	cmp	r3, #0
100159c2:	da05      	bge.n	100159d0 <_putc_r+0x48>
100159c4:	69a2      	ldr	r2, [r4, #24]
100159c6:	4293      	cmp	r3, r2
100159c8:	db08      	blt.n	100159dc <_putc_r+0x54>
100159ca:	b2eb      	uxtb	r3, r5
100159cc:	2b0a      	cmp	r3, #10
100159ce:	d005      	beq.n	100159dc <_putc_r+0x54>
100159d0:	6823      	ldr	r3, [r4, #0]
100159d2:	b2e8      	uxtb	r0, r5
100159d4:	1c5a      	adds	r2, r3, #1
100159d6:	6022      	str	r2, [r4, #0]
100159d8:	701d      	strb	r5, [r3, #0]
100159da:	e004      	b.n	100159e6 <_putc_r+0x5e>
100159dc:	0022      	movs	r2, r4
100159de:	0029      	movs	r1, r5
100159e0:	0030      	movs	r0, r6
100159e2:	f7ff fa43 	bl	10014e6c <__swbuf_r>
100159e6:	bd70      	pop	{r4, r5, r6, pc}
100159e8:	10017bfc 	.word	0x10017bfc
100159ec:	10017c1c 	.word	0x10017c1c
100159f0:	10017c3c 	.word	0x10017c3c

100159f4 <__sread>:
100159f4:	b570      	push	{r4, r5, r6, lr}
100159f6:	000c      	movs	r4, r1
100159f8:	250e      	movs	r5, #14
100159fa:	5f49      	ldrsh	r1, [r1, r5]
100159fc:	f000 f8b0 	bl	10015b60 <_read_r>
10015a00:	2800      	cmp	r0, #0
10015a02:	db03      	blt.n	10015a0c <__sread+0x18>
10015a04:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015a06:	181b      	adds	r3, r3, r0
10015a08:	6563      	str	r3, [r4, #84]	; 0x54
10015a0a:	e003      	b.n	10015a14 <__sread+0x20>
10015a0c:	89a2      	ldrh	r2, [r4, #12]
10015a0e:	4b02      	ldr	r3, [pc, #8]	; (10015a18 <__sread+0x24>)
10015a10:	4013      	ands	r3, r2
10015a12:	81a3      	strh	r3, [r4, #12]
10015a14:	bd70      	pop	{r4, r5, r6, pc}
10015a16:	46c0      	nop			; (mov r8, r8)
10015a18:	ffffefff 	.word	0xffffefff

10015a1c <__swrite>:
10015a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015a1e:	001f      	movs	r7, r3
10015a20:	898b      	ldrh	r3, [r1, #12]
10015a22:	0005      	movs	r5, r0
10015a24:	000c      	movs	r4, r1
10015a26:	0016      	movs	r6, r2
10015a28:	05db      	lsls	r3, r3, #23
10015a2a:	d505      	bpl.n	10015a38 <__swrite+0x1c>
10015a2c:	230e      	movs	r3, #14
10015a2e:	5ec9      	ldrsh	r1, [r1, r3]
10015a30:	2200      	movs	r2, #0
10015a32:	2302      	movs	r3, #2
10015a34:	f000 f874 	bl	10015b20 <_lseek_r>
10015a38:	89a2      	ldrh	r2, [r4, #12]
10015a3a:	4b05      	ldr	r3, [pc, #20]	; (10015a50 <__swrite+0x34>)
10015a3c:	0028      	movs	r0, r5
10015a3e:	4013      	ands	r3, r2
10015a40:	81a3      	strh	r3, [r4, #12]
10015a42:	0032      	movs	r2, r6
10015a44:	230e      	movs	r3, #14
10015a46:	5ee1      	ldrsh	r1, [r4, r3]
10015a48:	003b      	movs	r3, r7
10015a4a:	f000 f81f 	bl	10015a8c <_write_r>
10015a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015a50:	ffffefff 	.word	0xffffefff

10015a54 <__sseek>:
10015a54:	b570      	push	{r4, r5, r6, lr}
10015a56:	000c      	movs	r4, r1
10015a58:	250e      	movs	r5, #14
10015a5a:	5f49      	ldrsh	r1, [r1, r5]
10015a5c:	f000 f860 	bl	10015b20 <_lseek_r>
10015a60:	89a3      	ldrh	r3, [r4, #12]
10015a62:	1c42      	adds	r2, r0, #1
10015a64:	d103      	bne.n	10015a6e <__sseek+0x1a>
10015a66:	4a05      	ldr	r2, [pc, #20]	; (10015a7c <__sseek+0x28>)
10015a68:	4013      	ands	r3, r2
10015a6a:	81a3      	strh	r3, [r4, #12]
10015a6c:	e004      	b.n	10015a78 <__sseek+0x24>
10015a6e:	2280      	movs	r2, #128	; 0x80
10015a70:	0152      	lsls	r2, r2, #5
10015a72:	4313      	orrs	r3, r2
10015a74:	81a3      	strh	r3, [r4, #12]
10015a76:	6560      	str	r0, [r4, #84]	; 0x54
10015a78:	bd70      	pop	{r4, r5, r6, pc}
10015a7a:	46c0      	nop			; (mov r8, r8)
10015a7c:	ffffefff 	.word	0xffffefff

10015a80 <__sclose>:
10015a80:	b510      	push	{r4, lr}
10015a82:	230e      	movs	r3, #14
10015a84:	5ec9      	ldrsh	r1, [r1, r3]
10015a86:	f000 f815 	bl	10015ab4 <_close_r>
10015a8a:	bd10      	pop	{r4, pc}

10015a8c <_write_r>:
10015a8c:	b570      	push	{r4, r5, r6, lr}
10015a8e:	0005      	movs	r5, r0
10015a90:	0008      	movs	r0, r1
10015a92:	0011      	movs	r1, r2
10015a94:	2200      	movs	r2, #0
10015a96:	4c06      	ldr	r4, [pc, #24]	; (10015ab0 <_write_r+0x24>)
10015a98:	6022      	str	r2, [r4, #0]
10015a9a:	001a      	movs	r2, r3
10015a9c:	f7f7 fc74 	bl	1000d388 <_write>
10015aa0:	1c43      	adds	r3, r0, #1
10015aa2:	d103      	bne.n	10015aac <_write_r+0x20>
10015aa4:	6823      	ldr	r3, [r4, #0]
10015aa6:	2b00      	cmp	r3, #0
10015aa8:	d000      	beq.n	10015aac <_write_r+0x20>
10015aaa:	602b      	str	r3, [r5, #0]
10015aac:	bd70      	pop	{r4, r5, r6, pc}
10015aae:	46c0      	nop			; (mov r8, r8)
10015ab0:	1001abfc 	.word	0x1001abfc

10015ab4 <_close_r>:
10015ab4:	2300      	movs	r3, #0
10015ab6:	b570      	push	{r4, r5, r6, lr}
10015ab8:	4c06      	ldr	r4, [pc, #24]	; (10015ad4 <_close_r+0x20>)
10015aba:	0005      	movs	r5, r0
10015abc:	0008      	movs	r0, r1
10015abe:	6023      	str	r3, [r4, #0]
10015ac0:	f7f7 fc9c 	bl	1000d3fc <_close>
10015ac4:	1c43      	adds	r3, r0, #1
10015ac6:	d103      	bne.n	10015ad0 <_close_r+0x1c>
10015ac8:	6823      	ldr	r3, [r4, #0]
10015aca:	2b00      	cmp	r3, #0
10015acc:	d000      	beq.n	10015ad0 <_close_r+0x1c>
10015ace:	602b      	str	r3, [r5, #0]
10015ad0:	bd70      	pop	{r4, r5, r6, pc}
10015ad2:	46c0      	nop			; (mov r8, r8)
10015ad4:	1001abfc 	.word	0x1001abfc

10015ad8 <_fstat_r>:
10015ad8:	2300      	movs	r3, #0
10015ada:	b570      	push	{r4, r5, r6, lr}
10015adc:	4c06      	ldr	r4, [pc, #24]	; (10015af8 <_fstat_r+0x20>)
10015ade:	0005      	movs	r5, r0
10015ae0:	0008      	movs	r0, r1
10015ae2:	0011      	movs	r1, r2
10015ae4:	6023      	str	r3, [r4, #0]
10015ae6:	f7f7 fc8d 	bl	1000d404 <_fstat>
10015aea:	1c43      	adds	r3, r0, #1
10015aec:	d103      	bne.n	10015af6 <_fstat_r+0x1e>
10015aee:	6823      	ldr	r3, [r4, #0]
10015af0:	2b00      	cmp	r3, #0
10015af2:	d000      	beq.n	10015af6 <_fstat_r+0x1e>
10015af4:	602b      	str	r3, [r5, #0]
10015af6:	bd70      	pop	{r4, r5, r6, pc}
10015af8:	1001abfc 	.word	0x1001abfc

10015afc <_isatty_r>:
10015afc:	2300      	movs	r3, #0
10015afe:	b570      	push	{r4, r5, r6, lr}
10015b00:	4c06      	ldr	r4, [pc, #24]	; (10015b1c <_isatty_r+0x20>)
10015b02:	0005      	movs	r5, r0
10015b04:	0008      	movs	r0, r1
10015b06:	6023      	str	r3, [r4, #0]
10015b08:	f7f7 fc82 	bl	1000d410 <_isatty>
10015b0c:	1c43      	adds	r3, r0, #1
10015b0e:	d103      	bne.n	10015b18 <_isatty_r+0x1c>
10015b10:	6823      	ldr	r3, [r4, #0]
10015b12:	2b00      	cmp	r3, #0
10015b14:	d000      	beq.n	10015b18 <_isatty_r+0x1c>
10015b16:	602b      	str	r3, [r5, #0]
10015b18:	bd70      	pop	{r4, r5, r6, pc}
10015b1a:	46c0      	nop			; (mov r8, r8)
10015b1c:	1001abfc 	.word	0x1001abfc

10015b20 <_lseek_r>:
10015b20:	b570      	push	{r4, r5, r6, lr}
10015b22:	0005      	movs	r5, r0
10015b24:	0008      	movs	r0, r1
10015b26:	0011      	movs	r1, r2
10015b28:	2200      	movs	r2, #0
10015b2a:	4c06      	ldr	r4, [pc, #24]	; (10015b44 <_lseek_r+0x24>)
10015b2c:	6022      	str	r2, [r4, #0]
10015b2e:	001a      	movs	r2, r3
10015b30:	f7f7 fc70 	bl	1000d414 <_lseek>
10015b34:	1c43      	adds	r3, r0, #1
10015b36:	d103      	bne.n	10015b40 <_lseek_r+0x20>
10015b38:	6823      	ldr	r3, [r4, #0]
10015b3a:	2b00      	cmp	r3, #0
10015b3c:	d000      	beq.n	10015b40 <_lseek_r+0x20>
10015b3e:	602b      	str	r3, [r5, #0]
10015b40:	bd70      	pop	{r4, r5, r6, pc}
10015b42:	46c0      	nop			; (mov r8, r8)
10015b44:	1001abfc 	.word	0x1001abfc

10015b48 <memchr>:
10015b48:	b2c9      	uxtb	r1, r1
10015b4a:	1882      	adds	r2, r0, r2
10015b4c:	4290      	cmp	r0, r2
10015b4e:	d004      	beq.n	10015b5a <memchr+0x12>
10015b50:	7803      	ldrb	r3, [r0, #0]
10015b52:	428b      	cmp	r3, r1
10015b54:	d002      	beq.n	10015b5c <memchr+0x14>
10015b56:	3001      	adds	r0, #1
10015b58:	e7f8      	b.n	10015b4c <memchr+0x4>
10015b5a:	2000      	movs	r0, #0
10015b5c:	4770      	bx	lr
	...

10015b60 <_read_r>:
10015b60:	b570      	push	{r4, r5, r6, lr}
10015b62:	0005      	movs	r5, r0
10015b64:	0008      	movs	r0, r1
10015b66:	0011      	movs	r1, r2
10015b68:	2200      	movs	r2, #0
10015b6a:	4c06      	ldr	r4, [pc, #24]	; (10015b84 <_read_r+0x24>)
10015b6c:	6022      	str	r2, [r4, #0]
10015b6e:	001a      	movs	r2, r3
10015b70:	f7f7 fbea 	bl	1000d348 <_read>
10015b74:	1c43      	adds	r3, r0, #1
10015b76:	d103      	bne.n	10015b80 <_read_r+0x20>
10015b78:	6823      	ldr	r3, [r4, #0]
10015b7a:	2b00      	cmp	r3, #0
10015b7c:	d000      	beq.n	10015b80 <_read_r+0x20>
10015b7e:	602b      	str	r3, [r5, #0]
10015b80:	bd70      	pop	{r4, r5, r6, pc}
10015b82:	46c0      	nop			; (mov r8, r8)
10015b84:	1001abfc 	.word	0x1001abfc
10015b88:	00000d0a 	.word	0x00000d0a
10015b8c:	000003e8 	.word	0x000003e8

10015b90 <test>:
10015b90:	00000083 00004000 00000200 00c800c8     .....@..........
10015ba0:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10015bb0:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10015bc0:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10015bd0:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10015be0:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10015bf0:	666f206c 74657366 74616420 57482061     l offset data HW
10015c00:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10015c10:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10015c20:	6f727947 66666f20 20746573 61746164     Gyro offset data
10015c30:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10015c40:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10015c50:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10015c60:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10015c70:	6e756f66 00002e64 72617453 676e6974     found...Starting
10015c80:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10015c90:	72746552 69766569 4220676e 65736169     Retrieving Biase
10015ca0:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10015cb0:	65736169 72452073 20726f72 6f70202d     iases Error - po
10015cc0:	62697373 4920656c 65204332 726f7272     ssible I2C error
10015cd0:	00000000 72746552 69766569 5320676e     ....Retrieving S
10015ce0:	69422054 73657361 00000000 72746552     T Biases....Retr
10015cf0:	69766569 5320676e 69422054 73657361     ieving ST Biases
10015d00:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10015d10:	32492065 72652043 00726f72 64616552     e I2C error.Read
10015d20:	20676e69 2050544f 69676552 72657473     ing OTP Register
10015d30:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10015d40:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10015d50:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10015d60:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10015d70:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10015d80:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10015d90:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10015da0:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10015db0:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10015dc0:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10015dd0:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10015de0:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10015df0:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10015e00:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10015e10:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10015e20:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10015e30:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10015e40:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10015e50:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10015e60:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10015e70:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10015e80:	6c207361 20737365 6e616874 2e372520     as less than %7.
10015e90:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10015ea0:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10015eb0:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10015ec0:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10015ed0:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10015ee0:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10015ef0:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10015f00:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10015f10:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10015f20:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10015f30:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10015f40:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10015f50:	253a7369 72672064 65746165 68742072     is:%d greater th
10015f60:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10015f70:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10015f80:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10015f90:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10015fa0:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10015fb0:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10015fc0:	65542066 52207473 6c757365 203a7374     f Test Results: 
10015fd0:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10015fe0:	73655420 65522074 746c7573 25203a73      Test Results: %
10015ff0:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10016000:	00000000                                ....

10016004 <hw>:
10016004:	04000069 01410080 01000000 00001333     i.....A.....3...

10016014 <reg>:
10016014:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10016024:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10016034:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10016044:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10016054:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10016064:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10016074:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10016084:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
10016094:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
100160a4:	6150095d 6e697269 65722067 73657571     ].Pairing reques
100160b4:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
100160c4:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
100160d4:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
100160e4:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
100160f4:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016104:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
10016114:	6e616d6d 65722064 76696563 64206465     mmand received d
10016124:	6e697275 64612067 74726576 6d657369     uring advertisem
10016134:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
10016144:	00000020 6c696166 21216465 00000021      ...failed!!!...
10016154:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
10016164:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
10016174:	65636976 69617020 2e646572 64202e2e     vice paired... d
10016184:	62617369 676e696c 746e6920 75727265     isabling interru
10016194:	20737470 77732026 68637469 20676e69     pts & switching 
100161a4:	6e776f64 6e657320 73726f73 00000000     down sensors....
100161b4:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
100161c4:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
100161d4:	69646e69 69746163 0000676e 736d735b     indicating..[sms
100161e4:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
100161f4:	65440909 65636976 6e6f6320 7463656e     ..Device connect
10016204:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
10016214:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
10016224:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
10016234:	73697472 6e656d65 69742074 756f656d     rtisement timeou
10016244:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
10016254:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
10016264:	69766544 20736563 6e6e6f63 65746365     Devices connecte
10016274:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
10016284:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
10016294:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
100162a4:	65766441 73697472 6e656d65 61642074     Advertisement da
100162b4:	73206174 66207465 656c6961 00002164     ta set failed!..
100162c4:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
100162d4:	095d6573 454c4209 61745320 64657472     se]..BLE Started
100162e4:	76644120 69747265 656d6573 0000746e      Advertisement..
100162f4:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10016304:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10016314:	73697472 6e656d65 74732074 20747261     rtisement start 
10016324:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
10016334:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
10016344:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
10016354:	64207265 6f637369 63656e6e 2e646574     er disconnected.
10016364:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
10016374:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10016384:	64252032 00000000 6e630a0d 25203a74     2 %d......cnt: %
10016394:	00000064                                d...

10016398 <sms_ble_gap_cb>:
	...
100163a4:	10009d15 00000000 10009d49 10009e59     ........I...Y...
	...
100163bc:	10009d91 10009b31 00000000 00000000     ....1...........
	...

100163e4 <sms_ble_gatt_server_cb>:
100163e4:	10009b7d 10009bb9 00000000 00000000     }...............
	...
1001640c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
1001641c:	72756769 70095d65 6c626f72 77206d65     igure].problem w
1001642c:	656c6968 74657320 676e6974 20707520     hile setting up 
1001643c:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
1001644c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
1001645c:	6c626f72 77206d65 656c6968 74657320     roblem while set
1001646c:	676e6974 20707520 74747562 00316e6f     ting up button1.
1001647c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
1001648c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
1001649c:	656c6968 74657320 676e6974 20707520     hile setting up 
100164ac:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
100164bc:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
100164cc:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
100164dc:	74747542 73206e6f 65746174 6425203a     Button state: %d
100164ec:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
100164fc:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
1001650c:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
1001651c:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
1001652c:	6e697472 65732067 726f736e 42282073     rting sensors (B
1001653c:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
1001654c:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
1001655c:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
1001656c:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
1001657c:	6e697472 65732067 726f736e 42282073     rting sensors (B
1001658c:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
1001659c:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
100165ac:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
100165bc:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100165cc:	5d736563 72655309 65636976 65642073     ces].Services de
100165dc:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100165ec:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
100165fc:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
1001660c:	69767265 5d736563 72655309 65636976     ervices].Service
1001661c:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
1001662c:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
1001663c:	00000000 626f7250 206d656c 6c696877     ....Problem whil
1001664c:	65732065 6e697474 70672067 70206f69     e setting gpio p
1001665c:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
1001666c:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
1001667c:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
1001668c:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
1001669c:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
100166ac:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
100166bc:	6d656c62 69687720 7320656c 69747465     blem while setti
100166cc:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
100166dc:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
100166ec:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
100166fc:	6d656c62 69687720 7320656c 69747465     blem while setti
1001670c:	7520676e 504d2070 43562055 69702043     ng up MPU VCC pi
1001671c:	0000006e 74696e49 696c6169 676e697a     n...Initializing
1001672c:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
1001673c:	00000000 74746553 20676e69 4d207075     ....Setting up M
1001674c:	2e2e5550 0000002e 736d735b 75706d5f     PU......[sms_mpu
1001675c:	6665645f 5f656e69 76726573 73656369     _define_services
1001676c:	6553095d 63697672 64207365 6e696665     ].Services defin
1001677c:	20676e69 6c696166 202c6465 73616572     ing failed, reas
1001678c:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
1001679c:	6665645f 5f656e69 76726573 73656369     _define_services
100167ac:	6553095d 63697672 64207365 6e696665     ].Services defin
100167bc:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
100167cc:	203a656c 00006425 736d735b 64656c5f     le: %d..[sms_led
100167dc:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
100167ec:	206d656c 6c696877 65732065 6e697474     lem while settin
100167fc:	70752067 64656c20 00000030 736d735b     g up led0...[sms
1001680c:	6572705f 72757373 6f635f65 6769666e     _pressure_config
1001681c:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
1001682c:	6877206d 20656c69 74746573 20676e69     m while setting 
1001683c:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
1001684c:	6572705f 72757373 74735f65 75747261     _pressure_startu
1001685c:	09095d70 72617453 676e6974 65727020     p]..Starting pre
1001686c:	72757373 65732065 726f736e 00000000     ssure sensor....
1001687c:	736d735b 6572705f 72757373 74735f65     [sms_pressure_st
1001688c:	75747261 09095d70 69614609 2064656c     artup]...Failed 
1001689c:	69206f74 6974696e 7a696c61 72702065     to initialize pr
100168ac:	75737365 64206572 63697665 00000065     essure device...
100168bc:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
100168cc:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
100168dc:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
100168ec:	65727020 72757373 203d2065 00646c25      pressure = %ld.
100168fc:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
1001690c:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
1001691c:	61642067 70206174 696c6c6f 0000676e     g data polling..
1001692c:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
1001693c:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
1001694c:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
1001695c:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
1001696c:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
1001697c:	65636976 53095d73 69767265 20736563     vices].Services 
1001698c:	69666564 676e696e 69616620 2c64656c     defining failed,
1001699c:	61657220 206e6f73 78257830 00000000      reason 0x%x....
100169ac:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
100169bc:	656e6966 7265735f 65636976 53095d73     fine_services].S
100169cc:	69767265 20736563 69666564 2c64656e     ervices defined,
100169dc:	534d5320 65727020 72757373 61682065      SMS pressure ha
100169ec:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
100169fc:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
10016a0c:	43090909 646c756f 2074276e 74696e69     ...Couldn't init
10016a1c:	696c6169 4d20657a 00005550 736d735b     ialize MPU..[sms
10016a2c:	6175645f 6d69746c 5f317265 005d6e66     _dualtimer1_fn].
10016a3c:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10016a4c:	095d6e66 61745309 6e697472 65732067     fn]..Starting se
10016a5c:	726f736e 73282073 74747568 20676e69     nsors (shutting 
10016a6c:	6e776f64 2e2e2e29 00000000 736d735b     down).......[sms
10016a7c:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10016a8c:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10016a9c:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10016aac:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
10016abc:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10016acc:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
10016adc:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
10016aec:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
10016afc:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
10016b0c:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
10016b1c:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
10016b2c:	666f2067 2e2e2e66 00000000 1000c368     g off.......h...
10016b3c:	1000c376 1000c384 1000c392 1000c3a0     v...............
10016b4c:	1000c3ae 1000c3bc 1000c3cc 1000c3dc     ................
10016b5c:	1000c3ec 1000c3fc 1000c40c 1000c41c     ................
10016b6c:	1000c42c 1000c43c 1000c44c 1000c45c     ,...<...L...\...
10016b7c:	1000c46c 1000c47c 1000c48c 1000c49c     l...|...........
10016b8c:	1000c4ac 1000c4bc 1000c4cc 1000c4dc     ................
10016b9c:	1000c4ec 1000c4fc 1000c50c 1000c51a     ................
10016bac:	1000c528 1000c536 1000c544 1000c552     (...6...D...R...
10016bbc:	1000c560 1000c56e 1000c57c 1000c58c     `...n...|.......
10016bcc:	1000c59c 1000c5ac 1000c5bc 1000c5cc     ................
10016bdc:	1000c5dc 1000c5ec 1000c5fc 1000c60c     ................
10016bec:	1000c61c 1000c62c 1000c63c 1000c64c     ....,...<...L...
10016bfc:	1000c65c 1000c66c 1000c67c 1000c68a     \...l...|.......
10016c0c:	1000c698 1000c6c4 1000c6d2 1000c6e0     ................
10016c1c:	1000c6ee 1000c6fc 1000c70a 1000c718     ................
10016c2c:	1000c726 1000c734 1000c742 1000c750     &...4...B...P...
10016c3c:	1000c75e 1000c76c 1000c77a 1000c788     ^...l...z.......
10016c4c:	1000c796 1000c7a4 1000c7b2 1000c7c0     ................
10016c5c:	1000c7ce 1000c7dc 1000c7ea 1000c7f8     ................
10016c6c:	1000c806 1000c814 1000c822 1000c830     ........"...0...
10016c7c:	1000c83e 1000c84c 1000c85a 1000c868     >...L...Z...h...
10016c8c:	1000c876 1000c884 1000c892 1000c8a0     v...............
10016c9c:	1000c8ae 1000c8bc 1000c8ca 1000c8d8     ................
10016cac:	1000c8e6 1000c8f4 1000c902 1000c910     ................
10016cbc:	1000c91e 1000c92c 1000c93a 1000c948     ....,...:...H...
10016ccc:	1000c956 1000c964 1000c972 1000c980     V...d...r.......
10016cdc:	1000c98e 1000c99c 1000c9aa 1000ca44     ............D...
10016cec:	1000ca6c 1000ca94 1000cabc 1000ccfc     l...............
10016cfc:	1000caec 1000cb04 1000cb7c 1000cb94     ........|.......
10016d0c:	1000cb1c 1000cb34 1000cb4c 1000cb64     ....4...L...d...
10016d1c:	1000cbac 1000ce70 1000ce70 1000ce70     ....p...p...p...
10016d2c:	1000ce70 1000ce70 1000ce70 1000ce70     p...p...p...p...
10016d3c:	1000ce70 1000cc54 1000cc6c 1000cc84     p...T...l.......
10016d4c:	1000cd12 1000cbdc 1000ce70 1000ce70     ........p...p...
10016d5c:	1000ce70 1000ce70 1000ce70 1000ce70     p...p...p...p...
10016d6c:	1000cc9c 1000ccb4 1000cccc 1000cce4     ................
10016d7c:	1000ce70 1000ce28 1000ce40 1000ce70     p...(...@...p...
10016d8c:	1000ce70 1000cd3e 1000cd54 1000cd6a     p...>...T...j...
10016d9c:	1000cd80 1000ce70 1000ce70 1000ce70     ....p...p...p...
10016dac:	1000ce70 1000ce70 1000ce70 1000ce70     p...p...p...p...
10016dbc:	1000ce70 1000ca30 1000ca58 1000ca80     p...0...X.......
10016dcc:	1000caa8 1000cad4 1000cbc4 1000cbf4     ................
10016ddc:	1000cc0c 1000cc24 1000cc3c 1000cd28     ....$...<...(...
10016dec:	1000cd96 1000ce10 1000ce58 1000d592     ........X.......
10016dfc:	1000d5a4 1000d57a 1000d57a 1000d57a     ....z...z...z...
10016e0c:	1000d592 1000d57a 1000d57a 1000df96     ....z...z.......
10016e1c:	1000e00a 1000df7e 1000e010 1000df84     ....~...........
10016e2c:	1000df8a 1000df90 1000e6f0 1000e6f0     ................
10016e3c:	1000e6f0 1000e6f0 1000e6f0 1000e6f0     ................
10016e4c:	1000e6f0 1000e6f0 1000e6f0 1000e6f0     ................
10016e5c:	1000e6f0 1000e6f0 1000e6f0 1000e6f0     ................
10016e6c:	1000e6f0 1000e6f0 1000e6f0 1000e6f0     ................
10016e7c:	1000e6f0 1000e70e 1000e70e 1000e70e     ................
10016e8c:	1000e70e 1000e70e 1000e70e 1000e70e     ................
10016e9c:	1000e70e 1000e70e 1000e70e 1000e730     ............0...
10016eac:	1000e730 1000e730 1000e730 1000e730     0...0...0...0...
10016ebc:	1000e730 1000e730 1000e730 1000e730     0...0...0...0...
10016ecc:	1000e730 1000e760 1000e760 1000e760     0...`...`...`...
10016edc:	1000e760 1000e760 1000e760 1000e77a     `...`...`...z...
10016eec:	1000e77a 1000e77a 1000e77a 1000e77a     z...z...z...z...
10016efc:	1000e77a 1000e77a 1000e77a 1000e77a     z...z...z...z...
10016f0c:	1000e794 1000e794 1000e7b6 1000e7b6     ................
10016f1c:	1000e7d0 1000e7b6 34333231 00003635     ........123456..
10016f2c:	efcdab00 00efcdab                       ........

10016f34 <ble_mgr_gatt_server_handle>:
	...
10016f4c:	1000d48d 1000d4b5 1000d4fd 00000000     ................
10016f5c:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10016f6c:	65636552 64657669 00000000 6e616353     Received....Scan
10016f7c:	676e696e 61662020 64656c69 00000000     ning  failed....
10016f8c:	65766441 73697472 20676e69 6c696166     Advertising fail
10016f9c:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10016fac:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10016fbc:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10016fcc:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10016fdc:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10016fec:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10016ffc:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
1001700c:	6e616843 46206567 656c6961 43202c64     Change Failed, C
1001701c:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
1001702c:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
1001703c:	00000064 72616843 69725720 43206574     d...Char Write C
1001704c:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
1001705c:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
1001706c:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
1001707c:	72616843 69725720 43206574 4620646d     Char Write Cmd F
1001708c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001709c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
100170ac:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
100170bc:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
100170cc:	00000000 69766544 64206563 6f637369     ....Device disco
100170dc:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
100170ec:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100170fc:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
1001710c:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
1001711c:	72636e45 69747079 66206e6f 656c6961     Encryption faile
1001712c:	00000064 72636e45 69747079 63206e6f     d...Encryption c
1001713c:	6c706d6f 64657465 63757320 73736563     ompleted success
1001714c:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
1001715c:	6e206563 6620746f 646e756f 636e6520     ce not found enc
1001716c:	74707972 206e6f69 6f666e69 00000000     ryption info....
1001717c:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
1001718c:	64612064 73657264 255b2073 20205d64     d address [%d]  
1001719c:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
100171ac:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
100171bc:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
100171cc:	206e6163 69766564 72206563 68636165     can device reach
100171dc:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
100171ec:	00006e61 6c696146 74206465 7473206f     an..Failed to st
100171fc:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
1001720c:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
1001721c:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
1001722c:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
1001723c:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
1001724c:	52207463 65757165 46207473 656c6961     ct Request Faile
1001725c:	00000064 72696150 20676e69 636f7270     d...Pairing proc
1001726c:	72756465 6f632065 656c706d 20646574     edure completed 
1001727c:	63637573 66737365 796c6c75 00000000     successfully....
1001728c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
1001729c:	646e756f 206f7420 726f7473 68742065     ound to store th
100172ac:	61702065 6e697269 6e692067 00006f66     e pairing info..
100172bc:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
100172cc:	4e206e6f 7320746f 74726174 00006465     on Not started..
100172dc:	76616c53 65532065 69727563 52207974     Slave Security R
100172ec:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100172fc:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
1001730c:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
1001731c:	00205832 646e6553 20676e69 72696170     2X .Sending pair
1001732c:	20676e69 70736572 65736e6f 00000000     ing response....
1001733c:	72696150 71655220 74736575 41202d20     Pair Request - A
1001734c:	65687475 6369746e 6f697461 6146206e     uthentication Fa
1001735c:	64656c69 00000000 65746e45 68742072     iled....Enter th
1001736c:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
1001737c:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
1001738c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
1001739c:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
100173ac:	61656c50 45206573 7265746e 65687420     Please Enter the
100173bc:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
100173cc:	65646f63 206e6f28 6568746f 65442072     code(on other De
100173dc:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
100173ec:	70657220 6620796c 656c6961 00000064      reply failed...
100173fc:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
1001740c:	70707573 6574726f 00000064 65746e45     supported...Ente
1001741c:	20646572 73736150 646f632d 00003a65     red Pass-code:..
1001742c:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
1001743c:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
1001744c:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
1001745c:	76656420 20656369 76696465 00782520      device ediv %x.
1001746c:	72656570 76656420 20656369 76696465     peer device ediv
1001747c:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
1001748c:	00782520 20656854 65646e69 73692078      %x.The index is
1001749c:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
100174ac:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
100174bc:	6f666e69 74616d72 206e6f69 7020666f     information of p
100174cc:	20726565 69766564 69206563 6f6e2073     eer device is no
100174dc:	76612074 616c6961 2e656c62 00000000     t available.....
100174ec:	61656c50 75206573 6961706e 68742072     Please unpair th
100174fc:	65642065 65636976 6f726620 6570206d     e device from pe
1001750c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001751c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001752c:	20646e61 72617473 61702074 6e697269     and start pairin
1001753c:	67612067 006e6961 72636e45 69747079     g again.Encrypti
1001754c:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001755c:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
1001756c:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001757c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
1001758c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
1001759c:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
100175ac:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
100175bc:	7a696c61 6f697461 6166206e 64656c69     alization failed
100175cc:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
100175dc:	61656c50 63206573 6b636568 65687420     Please check the
100175ec:	776f7020 61207265 6320646e 656e6e6f      power and conne
100175fc:	6f697463 202f206e 64726168 65726177     ction / hardware
1001760c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
1001761c:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
1001762c:	20656d61 20746573 6c696166 00006465     ame set failed..
1001763c:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
1001764c:	5d676966 44420909 64646120 73736572     fig]..BD address
1001765c:	74656720 69616620 0064656c 656c625b      get failed.[ble
1001766c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
1001767c:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
1001768c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
1001769c:	25583230 2c583230 64644120 73736572     02X%02X, Address
100176ac:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
100176bc:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100176cc:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100176dc:	666e6f63 72756769 6f697461 6166206e     configuration fa
100176ec:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
100176fc:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
1001770c:	454c4220 76654420 20656369 72646441      BLE Device Addr
1001771c:	20737365 6c696166 00006465 6e616353     ess failed..Scan
1001772c:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
1001773c:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
1001774c:	69727563 72207974 65757165 73207473     curity request s
1001775c:	65636375 75667373 0000006c 76616c53     uccessful...Slav
1001776c:	65732065 69727563 72207974 65757165     e security reque
1001777c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001778c:	65746365 6f742064 65657020 65642072     ected to peer de
1001779c:	65636976 74697720 64612068 73657264     vice with addres
100177ac:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100177bc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100177cc:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100177dc:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100177ec:	61522067 6d6f646e 64646120 73736572     g Random address
100177fc:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001780c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
1001781c:	73736572 69616620 2a64656c 0000002a     ress failed**...
1001782c:	2078614d 626d756e 6f207265 6f632066     Max number of co
1001783c:	63656e6e 6e6f6974 61657220 64656863     nnection reached
1001784c:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
1001785c:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
1001786c:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
1001787c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
1001788c:	00000064 23232323 23232323 65442323     d...##########De
1001789c:	65636976 756f4620 0000646e 23232323     vice Found..####
100178ac:	23232323 65442323 65636976 746f4e20     ######Device Not
100178bc:	756f4620 0000646e 69766544 69206563      Found..Device i
100178cc:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
100178dc:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
100178ec:	20726576 6e657645 64253a74 00000000     ver Event:%d....
100178fc:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
1001790c:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
1001791c:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
1001792c:	756e614d 74636166 72657275 65707320     Manufacturer spe
1001793c:	69666963 61642063 65206174 6c62616e     cific data enabl
1001794c:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
1001795c:	65766441 73697472 6e656d65 61642074     Advertisement da
1001796c:	73206174 66207465 656c6961 00000064     ta set failed...

1001797c <ble_mgr_gap_handle>:
1001797c:	1000d419 1000d6c9 1000d43d 1000d465     ........=...e...
1001798c:	00000000 1000e345 1000d545 1000d5e1     ....E...E.......
1001799c:	1000d925 1000d775 1000db25 1000d93d     %...u...%...=...
100179ac:	1000dcb1 1000ddf5 1000d605 1000e591     ................
	...
100179c8:	1000f5ae 1000f5bc 1000f600 1000f644     ............D...
100179d8:	1000f652 1000f692 1000f6aa 69616d5b     R...........[mai
100179e8:	09095d6e 61570909 676e696b 2e707520     n]....Waking up.
100179f8:	00002e2e 6e6f6420 00002165 69616d5b     .... done!..[mai
10017a08:	09095d6e 69440909 6c626173 20676e69     n]....Disabling 
10017a18:	74747562 69206e6f 2e2e746e 0000002e     button int......
10017a28:	4e2e2e2e 4f53204f 45435255 00002121     ...NO SOURCE!!..
10017a38:	422e2e2e 00304e54 69616d5b 09095d6e     ...BTN0.[main]..
10017a48:	72450909 20726f72 73206e69 625f736d     ..Error in sms_b
10017a58:	6f747475 6e665f6e 00212928 422e2e2e     utton_fn()!....B
10017a68:	00314e54 4d2e2e2e 445f5550 00594452     TN1....MPU_DRDY.
10017a78:	412e2e2e 545f4e4f 52454d49 00000000     ...AON_TIMER....
10017a88:	442e2e2e 544c4155 52454d49 00000031     ...DUALTIMER1...
10017a98:	442e2e2e 544c4155 52454d49 00000032     ...DUALTIMER2...
10017aa8:	3f2e2e2e 0000003f 69616d5b 09095d6e     ...??...[main]..
10017ab8:	4c550909 2e2e2e50 00000000 00212120     ..ULP....... !!.
10017ac8:	656d7441 6f43206c 022e7072                       Atmel Corp.

10017ad3 <CSWTCH.45>:
10017ad3:	00100402                                         ...

10017ad6 <CSWTCH.47>:
10017ad6:	03010300 03030303 03030303 02020303              ...............

10017ae5 <client_conf_uuid>:
10017ae5:	29042902                                         .)

10017ae7 <presentation_format_uuid>:
10017ae7:	29012904                                         .)

10017ae9 <user_desc_uuid>:
10017ae9:	29032901                                         .)

10017aeb <server_conf_uuid>:
10017aeb:	29002903                                         .)

10017aed <extended_props_uuid>:
10017aed:	28022900                                         .)

10017aef <include_uuid>:
10017aef:	28032802                                         .(

10017af1 <char_uuid>:
10017af1:	4a002803 6e100132 2c100131 04100132     .(.J2..n1..,2...
10017b01:	2c100132 f8100132 2c100131 04100132     2..,2...1..,2...
10017b11:	6e100132 6e100131 f8100131 04100131     2..n1..n1...1...
10017b21:	b0100132 b0100132 b0100132 32100132     2...2...2...2..2
10017b31:	6e100132 6e100131 18100131 02100132     2..n1..n1...2...
10017b41:	18100132 f8100132 18100131 02100132     2...2...1...2...
10017b51:	6e100132 6e100131 f8100131 02100131     2..n1..n1...1...
10017b61:	b0100132 b0100132 b0100132 bc100132     2...2...2...2...
10017b71:	a8100132 06100135 06100135 04100135     2...5...5...5...
10017b81:	9a100135 9a100135 90100135 04100135     5...5...5...5...
10017b91:	9a100135 90100135 9a100135 04100135     5...5...5...5...
10017ba1:	a0100135 a0100135 a0100135 2a100135     5...5...5...5..*
10017bb1:	8c100136 4c10013e 4c10013d 4a10013d     6...>..L=..L=..J
10017bc1:	6410013d 6410013e 5610013e 4a10013e     =..d>..d>..V>..J
10017bd1:	6410013d 5610013e 6410013e 4a10013e     =..d>..V>..d>..J
10017be1:	6c10013d 6c10013e 6c10013e 6c10013e     =..l>..l>..l>..l
10017bf1:	43100140 f8000000                                @..C...

10017bf8 <_global_impure_ptr>:
10017bf8:	10017cf8                                .|..

10017bfc <__sf_fake_stdin>:
	...

10017c1c <__sf_fake_stdout>:
	...

10017c3c <__sf_fake_stderr>:
	...
10017c5c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10017c6c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10017c7c:	31300046 35343332 39383736 64636261     F.0123456789abcd
10017c8c:	00006665                                ef..

10017c90 <_init>:
10017c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017c92:	46c0      	nop			; (mov r8, r8)
10017c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017c96:	bc08      	pop	{r3}
10017c98:	469e      	mov	lr, r3
10017c9a:	4770      	bx	lr

10017c9c <__init_array_start>:
10017c9c:	100080b1 	.word	0x100080b1

10017ca0 <_fini>:
10017ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017ca2:	46c0      	nop			; (mov r8, r8)
10017ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017ca6:	bc08      	pop	{r3}
10017ca8:	469e      	mov	lr, r3
10017caa:	4770      	bx	lr

10017cac <__fini_array_start>:
10017cac:	10008089 	.word	0x10008089
